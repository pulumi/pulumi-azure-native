// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v20190101preview

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// Links relevant to the assessment
type AssessmentLinksResponse struct {
	// Link to assessment in Azure Portal
	AzurePortalUri string `pulumi:"azurePortalUri"`
}

// AssessmentLinksResponseInput is an input type that accepts AssessmentLinksResponseArgs and AssessmentLinksResponseOutput values.
// You can construct a concrete instance of `AssessmentLinksResponseInput` via:
//
//          AssessmentLinksResponseArgs{...}
type AssessmentLinksResponseInput interface {
	pulumi.Input

	ToAssessmentLinksResponseOutput() AssessmentLinksResponseOutput
	ToAssessmentLinksResponseOutputWithContext(context.Context) AssessmentLinksResponseOutput
}

// Links relevant to the assessment
type AssessmentLinksResponseArgs struct {
	// Link to assessment in Azure Portal
	AzurePortalUri pulumi.StringInput `pulumi:"azurePortalUri"`
}

func (AssessmentLinksResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AssessmentLinksResponse)(nil)).Elem()
}

func (i AssessmentLinksResponseArgs) ToAssessmentLinksResponseOutput() AssessmentLinksResponseOutput {
	return i.ToAssessmentLinksResponseOutputWithContext(context.Background())
}

func (i AssessmentLinksResponseArgs) ToAssessmentLinksResponseOutputWithContext(ctx context.Context) AssessmentLinksResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AssessmentLinksResponseOutput)
}

func (i AssessmentLinksResponseArgs) ToAssessmentLinksResponsePtrOutput() AssessmentLinksResponsePtrOutput {
	return i.ToAssessmentLinksResponsePtrOutputWithContext(context.Background())
}

func (i AssessmentLinksResponseArgs) ToAssessmentLinksResponsePtrOutputWithContext(ctx context.Context) AssessmentLinksResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AssessmentLinksResponseOutput).ToAssessmentLinksResponsePtrOutputWithContext(ctx)
}

// AssessmentLinksResponsePtrInput is an input type that accepts AssessmentLinksResponseArgs, AssessmentLinksResponsePtr and AssessmentLinksResponsePtrOutput values.
// You can construct a concrete instance of `AssessmentLinksResponsePtrInput` via:
//
//          AssessmentLinksResponseArgs{...}
//
//  or:
//
//          nil
type AssessmentLinksResponsePtrInput interface {
	pulumi.Input

	ToAssessmentLinksResponsePtrOutput() AssessmentLinksResponsePtrOutput
	ToAssessmentLinksResponsePtrOutputWithContext(context.Context) AssessmentLinksResponsePtrOutput
}

type assessmentLinksResponsePtrType AssessmentLinksResponseArgs

func AssessmentLinksResponsePtr(v *AssessmentLinksResponseArgs) AssessmentLinksResponsePtrInput {
	return (*assessmentLinksResponsePtrType)(v)
}

func (*assessmentLinksResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AssessmentLinksResponse)(nil)).Elem()
}

func (i *assessmentLinksResponsePtrType) ToAssessmentLinksResponsePtrOutput() AssessmentLinksResponsePtrOutput {
	return i.ToAssessmentLinksResponsePtrOutputWithContext(context.Background())
}

func (i *assessmentLinksResponsePtrType) ToAssessmentLinksResponsePtrOutputWithContext(ctx context.Context) AssessmentLinksResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AssessmentLinksResponsePtrOutput)
}

// Links relevant to the assessment
type AssessmentLinksResponseOutput struct{ *pulumi.OutputState }

func (AssessmentLinksResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AssessmentLinksResponse)(nil)).Elem()
}

func (o AssessmentLinksResponseOutput) ToAssessmentLinksResponseOutput() AssessmentLinksResponseOutput {
	return o
}

func (o AssessmentLinksResponseOutput) ToAssessmentLinksResponseOutputWithContext(ctx context.Context) AssessmentLinksResponseOutput {
	return o
}

func (o AssessmentLinksResponseOutput) ToAssessmentLinksResponsePtrOutput() AssessmentLinksResponsePtrOutput {
	return o.ToAssessmentLinksResponsePtrOutputWithContext(context.Background())
}

func (o AssessmentLinksResponseOutput) ToAssessmentLinksResponsePtrOutputWithContext(ctx context.Context) AssessmentLinksResponsePtrOutput {
	return o.ApplyT(func(v AssessmentLinksResponse) *AssessmentLinksResponse {
		return &v
	}).(AssessmentLinksResponsePtrOutput)
}

// Link to assessment in Azure Portal
func (o AssessmentLinksResponseOutput) AzurePortalUri() pulumi.StringOutput {
	return o.ApplyT(func(v AssessmentLinksResponse) string { return v.AzurePortalUri }).(pulumi.StringOutput)
}

type AssessmentLinksResponsePtrOutput struct{ *pulumi.OutputState }

func (AssessmentLinksResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AssessmentLinksResponse)(nil)).Elem()
}

func (o AssessmentLinksResponsePtrOutput) ToAssessmentLinksResponsePtrOutput() AssessmentLinksResponsePtrOutput {
	return o
}

func (o AssessmentLinksResponsePtrOutput) ToAssessmentLinksResponsePtrOutputWithContext(ctx context.Context) AssessmentLinksResponsePtrOutput {
	return o
}

func (o AssessmentLinksResponsePtrOutput) Elem() AssessmentLinksResponseOutput {
	return o.ApplyT(func(v *AssessmentLinksResponse) AssessmentLinksResponse { return *v }).(AssessmentLinksResponseOutput)
}

// Link to assessment in Azure Portal
func (o AssessmentLinksResponsePtrOutput) AzurePortalUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AssessmentLinksResponse) *string {
		if v == nil {
			return nil
		}
		return &v.AzurePortalUri
	}).(pulumi.StringPtrOutput)
}

// The result of the assessment
type AssessmentStatus struct {
	// Programmatic code for the cause of the assessment status
	Cause *string `pulumi:"cause"`
	// Programmatic code for the status of the assessment
	Code string `pulumi:"code"`
	// Human readable description of the assessment status
	Description *string `pulumi:"description"`
}

// AssessmentStatusInput is an input type that accepts AssessmentStatusArgs and AssessmentStatusOutput values.
// You can construct a concrete instance of `AssessmentStatusInput` via:
//
//          AssessmentStatusArgs{...}
type AssessmentStatusInput interface {
	pulumi.Input

	ToAssessmentStatusOutput() AssessmentStatusOutput
	ToAssessmentStatusOutputWithContext(context.Context) AssessmentStatusOutput
}

// The result of the assessment
type AssessmentStatusArgs struct {
	// Programmatic code for the cause of the assessment status
	Cause pulumi.StringPtrInput `pulumi:"cause"`
	// Programmatic code for the status of the assessment
	Code pulumi.StringInput `pulumi:"code"`
	// Human readable description of the assessment status
	Description pulumi.StringPtrInput `pulumi:"description"`
}

func (AssessmentStatusArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AssessmentStatus)(nil)).Elem()
}

func (i AssessmentStatusArgs) ToAssessmentStatusOutput() AssessmentStatusOutput {
	return i.ToAssessmentStatusOutputWithContext(context.Background())
}

func (i AssessmentStatusArgs) ToAssessmentStatusOutputWithContext(ctx context.Context) AssessmentStatusOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AssessmentStatusOutput)
}

func (i AssessmentStatusArgs) ToAssessmentStatusPtrOutput() AssessmentStatusPtrOutput {
	return i.ToAssessmentStatusPtrOutputWithContext(context.Background())
}

func (i AssessmentStatusArgs) ToAssessmentStatusPtrOutputWithContext(ctx context.Context) AssessmentStatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AssessmentStatusOutput).ToAssessmentStatusPtrOutputWithContext(ctx)
}

// AssessmentStatusPtrInput is an input type that accepts AssessmentStatusArgs, AssessmentStatusPtr and AssessmentStatusPtrOutput values.
// You can construct a concrete instance of `AssessmentStatusPtrInput` via:
//
//          AssessmentStatusArgs{...}
//
//  or:
//
//          nil
type AssessmentStatusPtrInput interface {
	pulumi.Input

	ToAssessmentStatusPtrOutput() AssessmentStatusPtrOutput
	ToAssessmentStatusPtrOutputWithContext(context.Context) AssessmentStatusPtrOutput
}

type assessmentStatusPtrType AssessmentStatusArgs

func AssessmentStatusPtr(v *AssessmentStatusArgs) AssessmentStatusPtrInput {
	return (*assessmentStatusPtrType)(v)
}

func (*assessmentStatusPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AssessmentStatus)(nil)).Elem()
}

func (i *assessmentStatusPtrType) ToAssessmentStatusPtrOutput() AssessmentStatusPtrOutput {
	return i.ToAssessmentStatusPtrOutputWithContext(context.Background())
}

func (i *assessmentStatusPtrType) ToAssessmentStatusPtrOutputWithContext(ctx context.Context) AssessmentStatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AssessmentStatusPtrOutput)
}

// The result of the assessment
type AssessmentStatusOutput struct{ *pulumi.OutputState }

func (AssessmentStatusOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AssessmentStatus)(nil)).Elem()
}

func (o AssessmentStatusOutput) ToAssessmentStatusOutput() AssessmentStatusOutput {
	return o
}

func (o AssessmentStatusOutput) ToAssessmentStatusOutputWithContext(ctx context.Context) AssessmentStatusOutput {
	return o
}

func (o AssessmentStatusOutput) ToAssessmentStatusPtrOutput() AssessmentStatusPtrOutput {
	return o.ToAssessmentStatusPtrOutputWithContext(context.Background())
}

func (o AssessmentStatusOutput) ToAssessmentStatusPtrOutputWithContext(ctx context.Context) AssessmentStatusPtrOutput {
	return o.ApplyT(func(v AssessmentStatus) *AssessmentStatus {
		return &v
	}).(AssessmentStatusPtrOutput)
}

// Programmatic code for the cause of the assessment status
func (o AssessmentStatusOutput) Cause() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AssessmentStatus) *string { return v.Cause }).(pulumi.StringPtrOutput)
}

// Programmatic code for the status of the assessment
func (o AssessmentStatusOutput) Code() pulumi.StringOutput {
	return o.ApplyT(func(v AssessmentStatus) string { return v.Code }).(pulumi.StringOutput)
}

// Human readable description of the assessment status
func (o AssessmentStatusOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AssessmentStatus) *string { return v.Description }).(pulumi.StringPtrOutput)
}

type AssessmentStatusPtrOutput struct{ *pulumi.OutputState }

func (AssessmentStatusPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AssessmentStatus)(nil)).Elem()
}

func (o AssessmentStatusPtrOutput) ToAssessmentStatusPtrOutput() AssessmentStatusPtrOutput {
	return o
}

func (o AssessmentStatusPtrOutput) ToAssessmentStatusPtrOutputWithContext(ctx context.Context) AssessmentStatusPtrOutput {
	return o
}

func (o AssessmentStatusPtrOutput) Elem() AssessmentStatusOutput {
	return o.ApplyT(func(v *AssessmentStatus) AssessmentStatus { return *v }).(AssessmentStatusOutput)
}

// Programmatic code for the cause of the assessment status
func (o AssessmentStatusPtrOutput) Cause() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AssessmentStatus) *string {
		if v == nil {
			return nil
		}
		return v.Cause
	}).(pulumi.StringPtrOutput)
}

// Programmatic code for the status of the assessment
func (o AssessmentStatusPtrOutput) Code() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AssessmentStatus) *string {
		if v == nil {
			return nil
		}
		return &v.Code
	}).(pulumi.StringPtrOutput)
}

// Human readable description of the assessment status
func (o AssessmentStatusPtrOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AssessmentStatus) *string {
		if v == nil {
			return nil
		}
		return v.Description
	}).(pulumi.StringPtrOutput)
}

// The result of the assessment
type AssessmentStatusResponse struct {
	// Programmatic code for the cause of the assessment status
	Cause *string `pulumi:"cause"`
	// Programmatic code for the status of the assessment
	Code string `pulumi:"code"`
	// Human readable description of the assessment status
	Description *string `pulumi:"description"`
}

// AssessmentStatusResponseInput is an input type that accepts AssessmentStatusResponseArgs and AssessmentStatusResponseOutput values.
// You can construct a concrete instance of `AssessmentStatusResponseInput` via:
//
//          AssessmentStatusResponseArgs{...}
type AssessmentStatusResponseInput interface {
	pulumi.Input

	ToAssessmentStatusResponseOutput() AssessmentStatusResponseOutput
	ToAssessmentStatusResponseOutputWithContext(context.Context) AssessmentStatusResponseOutput
}

// The result of the assessment
type AssessmentStatusResponseArgs struct {
	// Programmatic code for the cause of the assessment status
	Cause pulumi.StringPtrInput `pulumi:"cause"`
	// Programmatic code for the status of the assessment
	Code pulumi.StringInput `pulumi:"code"`
	// Human readable description of the assessment status
	Description pulumi.StringPtrInput `pulumi:"description"`
}

func (AssessmentStatusResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AssessmentStatusResponse)(nil)).Elem()
}

func (i AssessmentStatusResponseArgs) ToAssessmentStatusResponseOutput() AssessmentStatusResponseOutput {
	return i.ToAssessmentStatusResponseOutputWithContext(context.Background())
}

func (i AssessmentStatusResponseArgs) ToAssessmentStatusResponseOutputWithContext(ctx context.Context) AssessmentStatusResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AssessmentStatusResponseOutput)
}

func (i AssessmentStatusResponseArgs) ToAssessmentStatusResponsePtrOutput() AssessmentStatusResponsePtrOutput {
	return i.ToAssessmentStatusResponsePtrOutputWithContext(context.Background())
}

func (i AssessmentStatusResponseArgs) ToAssessmentStatusResponsePtrOutputWithContext(ctx context.Context) AssessmentStatusResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AssessmentStatusResponseOutput).ToAssessmentStatusResponsePtrOutputWithContext(ctx)
}

// AssessmentStatusResponsePtrInput is an input type that accepts AssessmentStatusResponseArgs, AssessmentStatusResponsePtr and AssessmentStatusResponsePtrOutput values.
// You can construct a concrete instance of `AssessmentStatusResponsePtrInput` via:
//
//          AssessmentStatusResponseArgs{...}
//
//  or:
//
//          nil
type AssessmentStatusResponsePtrInput interface {
	pulumi.Input

	ToAssessmentStatusResponsePtrOutput() AssessmentStatusResponsePtrOutput
	ToAssessmentStatusResponsePtrOutputWithContext(context.Context) AssessmentStatusResponsePtrOutput
}

type assessmentStatusResponsePtrType AssessmentStatusResponseArgs

func AssessmentStatusResponsePtr(v *AssessmentStatusResponseArgs) AssessmentStatusResponsePtrInput {
	return (*assessmentStatusResponsePtrType)(v)
}

func (*assessmentStatusResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AssessmentStatusResponse)(nil)).Elem()
}

func (i *assessmentStatusResponsePtrType) ToAssessmentStatusResponsePtrOutput() AssessmentStatusResponsePtrOutput {
	return i.ToAssessmentStatusResponsePtrOutputWithContext(context.Background())
}

func (i *assessmentStatusResponsePtrType) ToAssessmentStatusResponsePtrOutputWithContext(ctx context.Context) AssessmentStatusResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AssessmentStatusResponsePtrOutput)
}

// The result of the assessment
type AssessmentStatusResponseOutput struct{ *pulumi.OutputState }

func (AssessmentStatusResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AssessmentStatusResponse)(nil)).Elem()
}

func (o AssessmentStatusResponseOutput) ToAssessmentStatusResponseOutput() AssessmentStatusResponseOutput {
	return o
}

func (o AssessmentStatusResponseOutput) ToAssessmentStatusResponseOutputWithContext(ctx context.Context) AssessmentStatusResponseOutput {
	return o
}

func (o AssessmentStatusResponseOutput) ToAssessmentStatusResponsePtrOutput() AssessmentStatusResponsePtrOutput {
	return o.ToAssessmentStatusResponsePtrOutputWithContext(context.Background())
}

func (o AssessmentStatusResponseOutput) ToAssessmentStatusResponsePtrOutputWithContext(ctx context.Context) AssessmentStatusResponsePtrOutput {
	return o.ApplyT(func(v AssessmentStatusResponse) *AssessmentStatusResponse {
		return &v
	}).(AssessmentStatusResponsePtrOutput)
}

// Programmatic code for the cause of the assessment status
func (o AssessmentStatusResponseOutput) Cause() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AssessmentStatusResponse) *string { return v.Cause }).(pulumi.StringPtrOutput)
}

// Programmatic code for the status of the assessment
func (o AssessmentStatusResponseOutput) Code() pulumi.StringOutput {
	return o.ApplyT(func(v AssessmentStatusResponse) string { return v.Code }).(pulumi.StringOutput)
}

// Human readable description of the assessment status
func (o AssessmentStatusResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AssessmentStatusResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

type AssessmentStatusResponsePtrOutput struct{ *pulumi.OutputState }

func (AssessmentStatusResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AssessmentStatusResponse)(nil)).Elem()
}

func (o AssessmentStatusResponsePtrOutput) ToAssessmentStatusResponsePtrOutput() AssessmentStatusResponsePtrOutput {
	return o
}

func (o AssessmentStatusResponsePtrOutput) ToAssessmentStatusResponsePtrOutputWithContext(ctx context.Context) AssessmentStatusResponsePtrOutput {
	return o
}

func (o AssessmentStatusResponsePtrOutput) Elem() AssessmentStatusResponseOutput {
	return o.ApplyT(func(v *AssessmentStatusResponse) AssessmentStatusResponse { return *v }).(AssessmentStatusResponseOutput)
}

// Programmatic code for the cause of the assessment status
func (o AssessmentStatusResponsePtrOutput) Cause() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AssessmentStatusResponse) *string {
		if v == nil {
			return nil
		}
		return v.Cause
	}).(pulumi.StringPtrOutput)
}

// Programmatic code for the status of the assessment
func (o AssessmentStatusResponsePtrOutput) Code() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AssessmentStatusResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Code
	}).(pulumi.StringPtrOutput)
}

// Human readable description of the assessment status
func (o AssessmentStatusResponsePtrOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AssessmentStatusResponse) *string {
		if v == nil {
			return nil
		}
		return v.Description
	}).(pulumi.StringPtrOutput)
}

// The action that should be triggered.
type AutomationAction struct {
	// The type of the action that will be triggered by the Automation
	ActionType string `pulumi:"actionType"`
}

// AutomationActionInput is an input type that accepts AutomationActionArgs and AutomationActionOutput values.
// You can construct a concrete instance of `AutomationActionInput` via:
//
//          AutomationActionArgs{...}
type AutomationActionInput interface {
	pulumi.Input

	ToAutomationActionOutput() AutomationActionOutput
	ToAutomationActionOutputWithContext(context.Context) AutomationActionOutput
}

// The action that should be triggered.
type AutomationActionArgs struct {
	// The type of the action that will be triggered by the Automation
	ActionType pulumi.StringInput `pulumi:"actionType"`
}

func (AutomationActionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AutomationAction)(nil)).Elem()
}

func (i AutomationActionArgs) ToAutomationActionOutput() AutomationActionOutput {
	return i.ToAutomationActionOutputWithContext(context.Background())
}

func (i AutomationActionArgs) ToAutomationActionOutputWithContext(ctx context.Context) AutomationActionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AutomationActionOutput)
}

// AutomationActionArrayInput is an input type that accepts AutomationActionArray and AutomationActionArrayOutput values.
// You can construct a concrete instance of `AutomationActionArrayInput` via:
//
//          AutomationActionArray{ AutomationActionArgs{...} }
type AutomationActionArrayInput interface {
	pulumi.Input

	ToAutomationActionArrayOutput() AutomationActionArrayOutput
	ToAutomationActionArrayOutputWithContext(context.Context) AutomationActionArrayOutput
}

type AutomationActionArray []AutomationActionInput

func (AutomationActionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AutomationAction)(nil)).Elem()
}

func (i AutomationActionArray) ToAutomationActionArrayOutput() AutomationActionArrayOutput {
	return i.ToAutomationActionArrayOutputWithContext(context.Background())
}

func (i AutomationActionArray) ToAutomationActionArrayOutputWithContext(ctx context.Context) AutomationActionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AutomationActionArrayOutput)
}

// The action that should be triggered.
type AutomationActionOutput struct{ *pulumi.OutputState }

func (AutomationActionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AutomationAction)(nil)).Elem()
}

func (o AutomationActionOutput) ToAutomationActionOutput() AutomationActionOutput {
	return o
}

func (o AutomationActionOutput) ToAutomationActionOutputWithContext(ctx context.Context) AutomationActionOutput {
	return o
}

// The type of the action that will be triggered by the Automation
func (o AutomationActionOutput) ActionType() pulumi.StringOutput {
	return o.ApplyT(func(v AutomationAction) string { return v.ActionType }).(pulumi.StringOutput)
}

type AutomationActionArrayOutput struct{ *pulumi.OutputState }

func (AutomationActionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AutomationAction)(nil)).Elem()
}

func (o AutomationActionArrayOutput) ToAutomationActionArrayOutput() AutomationActionArrayOutput {
	return o
}

func (o AutomationActionArrayOutput) ToAutomationActionArrayOutputWithContext(ctx context.Context) AutomationActionArrayOutput {
	return o
}

func (o AutomationActionArrayOutput) Index(i pulumi.IntInput) AutomationActionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AutomationAction {
		return vs[0].([]AutomationAction)[vs[1].(int)]
	}).(AutomationActionOutput)
}

// The action that should be triggered.
type AutomationActionResponse struct {
	// The type of the action that will be triggered by the Automation
	ActionType string `pulumi:"actionType"`
}

// AutomationActionResponseInput is an input type that accepts AutomationActionResponseArgs and AutomationActionResponseOutput values.
// You can construct a concrete instance of `AutomationActionResponseInput` via:
//
//          AutomationActionResponseArgs{...}
type AutomationActionResponseInput interface {
	pulumi.Input

	ToAutomationActionResponseOutput() AutomationActionResponseOutput
	ToAutomationActionResponseOutputWithContext(context.Context) AutomationActionResponseOutput
}

// The action that should be triggered.
type AutomationActionResponseArgs struct {
	// The type of the action that will be triggered by the Automation
	ActionType pulumi.StringInput `pulumi:"actionType"`
}

func (AutomationActionResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AutomationActionResponse)(nil)).Elem()
}

func (i AutomationActionResponseArgs) ToAutomationActionResponseOutput() AutomationActionResponseOutput {
	return i.ToAutomationActionResponseOutputWithContext(context.Background())
}

func (i AutomationActionResponseArgs) ToAutomationActionResponseOutputWithContext(ctx context.Context) AutomationActionResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AutomationActionResponseOutput)
}

// AutomationActionResponseArrayInput is an input type that accepts AutomationActionResponseArray and AutomationActionResponseArrayOutput values.
// You can construct a concrete instance of `AutomationActionResponseArrayInput` via:
//
//          AutomationActionResponseArray{ AutomationActionResponseArgs{...} }
type AutomationActionResponseArrayInput interface {
	pulumi.Input

	ToAutomationActionResponseArrayOutput() AutomationActionResponseArrayOutput
	ToAutomationActionResponseArrayOutputWithContext(context.Context) AutomationActionResponseArrayOutput
}

type AutomationActionResponseArray []AutomationActionResponseInput

func (AutomationActionResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AutomationActionResponse)(nil)).Elem()
}

func (i AutomationActionResponseArray) ToAutomationActionResponseArrayOutput() AutomationActionResponseArrayOutput {
	return i.ToAutomationActionResponseArrayOutputWithContext(context.Background())
}

func (i AutomationActionResponseArray) ToAutomationActionResponseArrayOutputWithContext(ctx context.Context) AutomationActionResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AutomationActionResponseArrayOutput)
}

// The action that should be triggered.
type AutomationActionResponseOutput struct{ *pulumi.OutputState }

func (AutomationActionResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AutomationActionResponse)(nil)).Elem()
}

func (o AutomationActionResponseOutput) ToAutomationActionResponseOutput() AutomationActionResponseOutput {
	return o
}

func (o AutomationActionResponseOutput) ToAutomationActionResponseOutputWithContext(ctx context.Context) AutomationActionResponseOutput {
	return o
}

// The type of the action that will be triggered by the Automation
func (o AutomationActionResponseOutput) ActionType() pulumi.StringOutput {
	return o.ApplyT(func(v AutomationActionResponse) string { return v.ActionType }).(pulumi.StringOutput)
}

type AutomationActionResponseArrayOutput struct{ *pulumi.OutputState }

func (AutomationActionResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AutomationActionResponse)(nil)).Elem()
}

func (o AutomationActionResponseArrayOutput) ToAutomationActionResponseArrayOutput() AutomationActionResponseArrayOutput {
	return o
}

func (o AutomationActionResponseArrayOutput) ToAutomationActionResponseArrayOutputWithContext(ctx context.Context) AutomationActionResponseArrayOutput {
	return o
}

func (o AutomationActionResponseArrayOutput) Index(i pulumi.IntInput) AutomationActionResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AutomationActionResponse {
		return vs[0].([]AutomationActionResponse)[vs[1].(int)]
	}).(AutomationActionResponseOutput)
}

// A rule set which evaluates all its rules upon an event interception. Only when all the included rules in the rule set will be evaluated as 'true', will the event trigger the defined actions.
type AutomationRuleSet struct {
	Rules []AutomationTriggeringRule `pulumi:"rules"`
}

// AutomationRuleSetInput is an input type that accepts AutomationRuleSetArgs and AutomationRuleSetOutput values.
// You can construct a concrete instance of `AutomationRuleSetInput` via:
//
//          AutomationRuleSetArgs{...}
type AutomationRuleSetInput interface {
	pulumi.Input

	ToAutomationRuleSetOutput() AutomationRuleSetOutput
	ToAutomationRuleSetOutputWithContext(context.Context) AutomationRuleSetOutput
}

// A rule set which evaluates all its rules upon an event interception. Only when all the included rules in the rule set will be evaluated as 'true', will the event trigger the defined actions.
type AutomationRuleSetArgs struct {
	Rules AutomationTriggeringRuleArrayInput `pulumi:"rules"`
}

func (AutomationRuleSetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AutomationRuleSet)(nil)).Elem()
}

func (i AutomationRuleSetArgs) ToAutomationRuleSetOutput() AutomationRuleSetOutput {
	return i.ToAutomationRuleSetOutputWithContext(context.Background())
}

func (i AutomationRuleSetArgs) ToAutomationRuleSetOutputWithContext(ctx context.Context) AutomationRuleSetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AutomationRuleSetOutput)
}

// AutomationRuleSetArrayInput is an input type that accepts AutomationRuleSetArray and AutomationRuleSetArrayOutput values.
// You can construct a concrete instance of `AutomationRuleSetArrayInput` via:
//
//          AutomationRuleSetArray{ AutomationRuleSetArgs{...} }
type AutomationRuleSetArrayInput interface {
	pulumi.Input

	ToAutomationRuleSetArrayOutput() AutomationRuleSetArrayOutput
	ToAutomationRuleSetArrayOutputWithContext(context.Context) AutomationRuleSetArrayOutput
}

type AutomationRuleSetArray []AutomationRuleSetInput

func (AutomationRuleSetArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AutomationRuleSet)(nil)).Elem()
}

func (i AutomationRuleSetArray) ToAutomationRuleSetArrayOutput() AutomationRuleSetArrayOutput {
	return i.ToAutomationRuleSetArrayOutputWithContext(context.Background())
}

func (i AutomationRuleSetArray) ToAutomationRuleSetArrayOutputWithContext(ctx context.Context) AutomationRuleSetArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AutomationRuleSetArrayOutput)
}

// A rule set which evaluates all its rules upon an event interception. Only when all the included rules in the rule set will be evaluated as 'true', will the event trigger the defined actions.
type AutomationRuleSetOutput struct{ *pulumi.OutputState }

func (AutomationRuleSetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AutomationRuleSet)(nil)).Elem()
}

func (o AutomationRuleSetOutput) ToAutomationRuleSetOutput() AutomationRuleSetOutput {
	return o
}

func (o AutomationRuleSetOutput) ToAutomationRuleSetOutputWithContext(ctx context.Context) AutomationRuleSetOutput {
	return o
}

func (o AutomationRuleSetOutput) Rules() AutomationTriggeringRuleArrayOutput {
	return o.ApplyT(func(v AutomationRuleSet) []AutomationTriggeringRule { return v.Rules }).(AutomationTriggeringRuleArrayOutput)
}

type AutomationRuleSetArrayOutput struct{ *pulumi.OutputState }

func (AutomationRuleSetArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AutomationRuleSet)(nil)).Elem()
}

func (o AutomationRuleSetArrayOutput) ToAutomationRuleSetArrayOutput() AutomationRuleSetArrayOutput {
	return o
}

func (o AutomationRuleSetArrayOutput) ToAutomationRuleSetArrayOutputWithContext(ctx context.Context) AutomationRuleSetArrayOutput {
	return o
}

func (o AutomationRuleSetArrayOutput) Index(i pulumi.IntInput) AutomationRuleSetOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AutomationRuleSet {
		return vs[0].([]AutomationRuleSet)[vs[1].(int)]
	}).(AutomationRuleSetOutput)
}

// A rule set which evaluates all its rules upon an event interception. Only when all the included rules in the rule set will be evaluated as 'true', will the event trigger the defined actions.
type AutomationRuleSetResponse struct {
	Rules []AutomationTriggeringRuleResponse `pulumi:"rules"`
}

// AutomationRuleSetResponseInput is an input type that accepts AutomationRuleSetResponseArgs and AutomationRuleSetResponseOutput values.
// You can construct a concrete instance of `AutomationRuleSetResponseInput` via:
//
//          AutomationRuleSetResponseArgs{...}
type AutomationRuleSetResponseInput interface {
	pulumi.Input

	ToAutomationRuleSetResponseOutput() AutomationRuleSetResponseOutput
	ToAutomationRuleSetResponseOutputWithContext(context.Context) AutomationRuleSetResponseOutput
}

// A rule set which evaluates all its rules upon an event interception. Only when all the included rules in the rule set will be evaluated as 'true', will the event trigger the defined actions.
type AutomationRuleSetResponseArgs struct {
	Rules AutomationTriggeringRuleResponseArrayInput `pulumi:"rules"`
}

func (AutomationRuleSetResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AutomationRuleSetResponse)(nil)).Elem()
}

func (i AutomationRuleSetResponseArgs) ToAutomationRuleSetResponseOutput() AutomationRuleSetResponseOutput {
	return i.ToAutomationRuleSetResponseOutputWithContext(context.Background())
}

func (i AutomationRuleSetResponseArgs) ToAutomationRuleSetResponseOutputWithContext(ctx context.Context) AutomationRuleSetResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AutomationRuleSetResponseOutput)
}

// AutomationRuleSetResponseArrayInput is an input type that accepts AutomationRuleSetResponseArray and AutomationRuleSetResponseArrayOutput values.
// You can construct a concrete instance of `AutomationRuleSetResponseArrayInput` via:
//
//          AutomationRuleSetResponseArray{ AutomationRuleSetResponseArgs{...} }
type AutomationRuleSetResponseArrayInput interface {
	pulumi.Input

	ToAutomationRuleSetResponseArrayOutput() AutomationRuleSetResponseArrayOutput
	ToAutomationRuleSetResponseArrayOutputWithContext(context.Context) AutomationRuleSetResponseArrayOutput
}

type AutomationRuleSetResponseArray []AutomationRuleSetResponseInput

func (AutomationRuleSetResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AutomationRuleSetResponse)(nil)).Elem()
}

func (i AutomationRuleSetResponseArray) ToAutomationRuleSetResponseArrayOutput() AutomationRuleSetResponseArrayOutput {
	return i.ToAutomationRuleSetResponseArrayOutputWithContext(context.Background())
}

func (i AutomationRuleSetResponseArray) ToAutomationRuleSetResponseArrayOutputWithContext(ctx context.Context) AutomationRuleSetResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AutomationRuleSetResponseArrayOutput)
}

// A rule set which evaluates all its rules upon an event interception. Only when all the included rules in the rule set will be evaluated as 'true', will the event trigger the defined actions.
type AutomationRuleSetResponseOutput struct{ *pulumi.OutputState }

func (AutomationRuleSetResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AutomationRuleSetResponse)(nil)).Elem()
}

func (o AutomationRuleSetResponseOutput) ToAutomationRuleSetResponseOutput() AutomationRuleSetResponseOutput {
	return o
}

func (o AutomationRuleSetResponseOutput) ToAutomationRuleSetResponseOutputWithContext(ctx context.Context) AutomationRuleSetResponseOutput {
	return o
}

func (o AutomationRuleSetResponseOutput) Rules() AutomationTriggeringRuleResponseArrayOutput {
	return o.ApplyT(func(v AutomationRuleSetResponse) []AutomationTriggeringRuleResponse { return v.Rules }).(AutomationTriggeringRuleResponseArrayOutput)
}

type AutomationRuleSetResponseArrayOutput struct{ *pulumi.OutputState }

func (AutomationRuleSetResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AutomationRuleSetResponse)(nil)).Elem()
}

func (o AutomationRuleSetResponseArrayOutput) ToAutomationRuleSetResponseArrayOutput() AutomationRuleSetResponseArrayOutput {
	return o
}

func (o AutomationRuleSetResponseArrayOutput) ToAutomationRuleSetResponseArrayOutputWithContext(ctx context.Context) AutomationRuleSetResponseArrayOutput {
	return o
}

func (o AutomationRuleSetResponseArrayOutput) Index(i pulumi.IntInput) AutomationRuleSetResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AutomationRuleSetResponse {
		return vs[0].([]AutomationRuleSetResponse)[vs[1].(int)]
	}).(AutomationRuleSetResponseOutput)
}

// A single automation scope.
type AutomationScope struct {
	// The resources scope description.
	Description *string `pulumi:"description"`
	// The resources scope path. Can be the subscription on which the automation is defined on or a resource group under that subscription (fully qualified Azure resource IDs).
	ScopePath *string `pulumi:"scopePath"`
}

// AutomationScopeInput is an input type that accepts AutomationScopeArgs and AutomationScopeOutput values.
// You can construct a concrete instance of `AutomationScopeInput` via:
//
//          AutomationScopeArgs{...}
type AutomationScopeInput interface {
	pulumi.Input

	ToAutomationScopeOutput() AutomationScopeOutput
	ToAutomationScopeOutputWithContext(context.Context) AutomationScopeOutput
}

// A single automation scope.
type AutomationScopeArgs struct {
	// The resources scope description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The resources scope path. Can be the subscription on which the automation is defined on or a resource group under that subscription (fully qualified Azure resource IDs).
	ScopePath pulumi.StringPtrInput `pulumi:"scopePath"`
}

func (AutomationScopeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AutomationScope)(nil)).Elem()
}

func (i AutomationScopeArgs) ToAutomationScopeOutput() AutomationScopeOutput {
	return i.ToAutomationScopeOutputWithContext(context.Background())
}

func (i AutomationScopeArgs) ToAutomationScopeOutputWithContext(ctx context.Context) AutomationScopeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AutomationScopeOutput)
}

// AutomationScopeArrayInput is an input type that accepts AutomationScopeArray and AutomationScopeArrayOutput values.
// You can construct a concrete instance of `AutomationScopeArrayInput` via:
//
//          AutomationScopeArray{ AutomationScopeArgs{...} }
type AutomationScopeArrayInput interface {
	pulumi.Input

	ToAutomationScopeArrayOutput() AutomationScopeArrayOutput
	ToAutomationScopeArrayOutputWithContext(context.Context) AutomationScopeArrayOutput
}

type AutomationScopeArray []AutomationScopeInput

func (AutomationScopeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AutomationScope)(nil)).Elem()
}

func (i AutomationScopeArray) ToAutomationScopeArrayOutput() AutomationScopeArrayOutput {
	return i.ToAutomationScopeArrayOutputWithContext(context.Background())
}

func (i AutomationScopeArray) ToAutomationScopeArrayOutputWithContext(ctx context.Context) AutomationScopeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AutomationScopeArrayOutput)
}

// A single automation scope.
type AutomationScopeOutput struct{ *pulumi.OutputState }

func (AutomationScopeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AutomationScope)(nil)).Elem()
}

func (o AutomationScopeOutput) ToAutomationScopeOutput() AutomationScopeOutput {
	return o
}

func (o AutomationScopeOutput) ToAutomationScopeOutputWithContext(ctx context.Context) AutomationScopeOutput {
	return o
}

// The resources scope description.
func (o AutomationScopeOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AutomationScope) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The resources scope path. Can be the subscription on which the automation is defined on or a resource group under that subscription (fully qualified Azure resource IDs).
func (o AutomationScopeOutput) ScopePath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AutomationScope) *string { return v.ScopePath }).(pulumi.StringPtrOutput)
}

type AutomationScopeArrayOutput struct{ *pulumi.OutputState }

func (AutomationScopeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AutomationScope)(nil)).Elem()
}

func (o AutomationScopeArrayOutput) ToAutomationScopeArrayOutput() AutomationScopeArrayOutput {
	return o
}

func (o AutomationScopeArrayOutput) ToAutomationScopeArrayOutputWithContext(ctx context.Context) AutomationScopeArrayOutput {
	return o
}

func (o AutomationScopeArrayOutput) Index(i pulumi.IntInput) AutomationScopeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AutomationScope {
		return vs[0].([]AutomationScope)[vs[1].(int)]
	}).(AutomationScopeOutput)
}

// A single automation scope.
type AutomationScopeResponse struct {
	// The resources scope description.
	Description *string `pulumi:"description"`
	// The resources scope path. Can be the subscription on which the automation is defined on or a resource group under that subscription (fully qualified Azure resource IDs).
	ScopePath *string `pulumi:"scopePath"`
}

// AutomationScopeResponseInput is an input type that accepts AutomationScopeResponseArgs and AutomationScopeResponseOutput values.
// You can construct a concrete instance of `AutomationScopeResponseInput` via:
//
//          AutomationScopeResponseArgs{...}
type AutomationScopeResponseInput interface {
	pulumi.Input

	ToAutomationScopeResponseOutput() AutomationScopeResponseOutput
	ToAutomationScopeResponseOutputWithContext(context.Context) AutomationScopeResponseOutput
}

// A single automation scope.
type AutomationScopeResponseArgs struct {
	// The resources scope description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The resources scope path. Can be the subscription on which the automation is defined on or a resource group under that subscription (fully qualified Azure resource IDs).
	ScopePath pulumi.StringPtrInput `pulumi:"scopePath"`
}

func (AutomationScopeResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AutomationScopeResponse)(nil)).Elem()
}

func (i AutomationScopeResponseArgs) ToAutomationScopeResponseOutput() AutomationScopeResponseOutput {
	return i.ToAutomationScopeResponseOutputWithContext(context.Background())
}

func (i AutomationScopeResponseArgs) ToAutomationScopeResponseOutputWithContext(ctx context.Context) AutomationScopeResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AutomationScopeResponseOutput)
}

// AutomationScopeResponseArrayInput is an input type that accepts AutomationScopeResponseArray and AutomationScopeResponseArrayOutput values.
// You can construct a concrete instance of `AutomationScopeResponseArrayInput` via:
//
//          AutomationScopeResponseArray{ AutomationScopeResponseArgs{...} }
type AutomationScopeResponseArrayInput interface {
	pulumi.Input

	ToAutomationScopeResponseArrayOutput() AutomationScopeResponseArrayOutput
	ToAutomationScopeResponseArrayOutputWithContext(context.Context) AutomationScopeResponseArrayOutput
}

type AutomationScopeResponseArray []AutomationScopeResponseInput

func (AutomationScopeResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AutomationScopeResponse)(nil)).Elem()
}

func (i AutomationScopeResponseArray) ToAutomationScopeResponseArrayOutput() AutomationScopeResponseArrayOutput {
	return i.ToAutomationScopeResponseArrayOutputWithContext(context.Background())
}

func (i AutomationScopeResponseArray) ToAutomationScopeResponseArrayOutputWithContext(ctx context.Context) AutomationScopeResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AutomationScopeResponseArrayOutput)
}

// A single automation scope.
type AutomationScopeResponseOutput struct{ *pulumi.OutputState }

func (AutomationScopeResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AutomationScopeResponse)(nil)).Elem()
}

func (o AutomationScopeResponseOutput) ToAutomationScopeResponseOutput() AutomationScopeResponseOutput {
	return o
}

func (o AutomationScopeResponseOutput) ToAutomationScopeResponseOutputWithContext(ctx context.Context) AutomationScopeResponseOutput {
	return o
}

// The resources scope description.
func (o AutomationScopeResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AutomationScopeResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The resources scope path. Can be the subscription on which the automation is defined on or a resource group under that subscription (fully qualified Azure resource IDs).
func (o AutomationScopeResponseOutput) ScopePath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AutomationScopeResponse) *string { return v.ScopePath }).(pulumi.StringPtrOutput)
}

type AutomationScopeResponseArrayOutput struct{ *pulumi.OutputState }

func (AutomationScopeResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AutomationScopeResponse)(nil)).Elem()
}

func (o AutomationScopeResponseArrayOutput) ToAutomationScopeResponseArrayOutput() AutomationScopeResponseArrayOutput {
	return o
}

func (o AutomationScopeResponseArrayOutput) ToAutomationScopeResponseArrayOutputWithContext(ctx context.Context) AutomationScopeResponseArrayOutput {
	return o
}

func (o AutomationScopeResponseArrayOutput) Index(i pulumi.IntInput) AutomationScopeResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AutomationScopeResponse {
		return vs[0].([]AutomationScopeResponse)[vs[1].(int)]
	}).(AutomationScopeResponseOutput)
}

// The source event types which evaluate the security automation set of rules. For example - security alerts and security assessments. To learn more about the supported security events data models schemas - please visit https://aka.ms/ASCAutomationSchemas.
type AutomationSource struct {
	// A valid event source type.
	EventSource *string `pulumi:"eventSource"`
	// A set of rules which evaluate upon event interception. A logical disjunction is applied between defined rule sets (logical 'or').
	RuleSets []AutomationRuleSet `pulumi:"ruleSets"`
}

// AutomationSourceInput is an input type that accepts AutomationSourceArgs and AutomationSourceOutput values.
// You can construct a concrete instance of `AutomationSourceInput` via:
//
//          AutomationSourceArgs{...}
type AutomationSourceInput interface {
	pulumi.Input

	ToAutomationSourceOutput() AutomationSourceOutput
	ToAutomationSourceOutputWithContext(context.Context) AutomationSourceOutput
}

// The source event types which evaluate the security automation set of rules. For example - security alerts and security assessments. To learn more about the supported security events data models schemas - please visit https://aka.ms/ASCAutomationSchemas.
type AutomationSourceArgs struct {
	// A valid event source type.
	EventSource pulumi.StringPtrInput `pulumi:"eventSource"`
	// A set of rules which evaluate upon event interception. A logical disjunction is applied between defined rule sets (logical 'or').
	RuleSets AutomationRuleSetArrayInput `pulumi:"ruleSets"`
}

func (AutomationSourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AutomationSource)(nil)).Elem()
}

func (i AutomationSourceArgs) ToAutomationSourceOutput() AutomationSourceOutput {
	return i.ToAutomationSourceOutputWithContext(context.Background())
}

func (i AutomationSourceArgs) ToAutomationSourceOutputWithContext(ctx context.Context) AutomationSourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AutomationSourceOutput)
}

// AutomationSourceArrayInput is an input type that accepts AutomationSourceArray and AutomationSourceArrayOutput values.
// You can construct a concrete instance of `AutomationSourceArrayInput` via:
//
//          AutomationSourceArray{ AutomationSourceArgs{...} }
type AutomationSourceArrayInput interface {
	pulumi.Input

	ToAutomationSourceArrayOutput() AutomationSourceArrayOutput
	ToAutomationSourceArrayOutputWithContext(context.Context) AutomationSourceArrayOutput
}

type AutomationSourceArray []AutomationSourceInput

func (AutomationSourceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AutomationSource)(nil)).Elem()
}

func (i AutomationSourceArray) ToAutomationSourceArrayOutput() AutomationSourceArrayOutput {
	return i.ToAutomationSourceArrayOutputWithContext(context.Background())
}

func (i AutomationSourceArray) ToAutomationSourceArrayOutputWithContext(ctx context.Context) AutomationSourceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AutomationSourceArrayOutput)
}

// The source event types which evaluate the security automation set of rules. For example - security alerts and security assessments. To learn more about the supported security events data models schemas - please visit https://aka.ms/ASCAutomationSchemas.
type AutomationSourceOutput struct{ *pulumi.OutputState }

func (AutomationSourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AutomationSource)(nil)).Elem()
}

func (o AutomationSourceOutput) ToAutomationSourceOutput() AutomationSourceOutput {
	return o
}

func (o AutomationSourceOutput) ToAutomationSourceOutputWithContext(ctx context.Context) AutomationSourceOutput {
	return o
}

// A valid event source type.
func (o AutomationSourceOutput) EventSource() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AutomationSource) *string { return v.EventSource }).(pulumi.StringPtrOutput)
}

// A set of rules which evaluate upon event interception. A logical disjunction is applied between defined rule sets (logical 'or').
func (o AutomationSourceOutput) RuleSets() AutomationRuleSetArrayOutput {
	return o.ApplyT(func(v AutomationSource) []AutomationRuleSet { return v.RuleSets }).(AutomationRuleSetArrayOutput)
}

type AutomationSourceArrayOutput struct{ *pulumi.OutputState }

func (AutomationSourceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AutomationSource)(nil)).Elem()
}

func (o AutomationSourceArrayOutput) ToAutomationSourceArrayOutput() AutomationSourceArrayOutput {
	return o
}

func (o AutomationSourceArrayOutput) ToAutomationSourceArrayOutputWithContext(ctx context.Context) AutomationSourceArrayOutput {
	return o
}

func (o AutomationSourceArrayOutput) Index(i pulumi.IntInput) AutomationSourceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AutomationSource {
		return vs[0].([]AutomationSource)[vs[1].(int)]
	}).(AutomationSourceOutput)
}

// The source event types which evaluate the security automation set of rules. For example - security alerts and security assessments. To learn more about the supported security events data models schemas - please visit https://aka.ms/ASCAutomationSchemas.
type AutomationSourceResponse struct {
	// A valid event source type.
	EventSource *string `pulumi:"eventSource"`
	// A set of rules which evaluate upon event interception. A logical disjunction is applied between defined rule sets (logical 'or').
	RuleSets []AutomationRuleSetResponse `pulumi:"ruleSets"`
}

// AutomationSourceResponseInput is an input type that accepts AutomationSourceResponseArgs and AutomationSourceResponseOutput values.
// You can construct a concrete instance of `AutomationSourceResponseInput` via:
//
//          AutomationSourceResponseArgs{...}
type AutomationSourceResponseInput interface {
	pulumi.Input

	ToAutomationSourceResponseOutput() AutomationSourceResponseOutput
	ToAutomationSourceResponseOutputWithContext(context.Context) AutomationSourceResponseOutput
}

// The source event types which evaluate the security automation set of rules. For example - security alerts and security assessments. To learn more about the supported security events data models schemas - please visit https://aka.ms/ASCAutomationSchemas.
type AutomationSourceResponseArgs struct {
	// A valid event source type.
	EventSource pulumi.StringPtrInput `pulumi:"eventSource"`
	// A set of rules which evaluate upon event interception. A logical disjunction is applied between defined rule sets (logical 'or').
	RuleSets AutomationRuleSetResponseArrayInput `pulumi:"ruleSets"`
}

func (AutomationSourceResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AutomationSourceResponse)(nil)).Elem()
}

func (i AutomationSourceResponseArgs) ToAutomationSourceResponseOutput() AutomationSourceResponseOutput {
	return i.ToAutomationSourceResponseOutputWithContext(context.Background())
}

func (i AutomationSourceResponseArgs) ToAutomationSourceResponseOutputWithContext(ctx context.Context) AutomationSourceResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AutomationSourceResponseOutput)
}

// AutomationSourceResponseArrayInput is an input type that accepts AutomationSourceResponseArray and AutomationSourceResponseArrayOutput values.
// You can construct a concrete instance of `AutomationSourceResponseArrayInput` via:
//
//          AutomationSourceResponseArray{ AutomationSourceResponseArgs{...} }
type AutomationSourceResponseArrayInput interface {
	pulumi.Input

	ToAutomationSourceResponseArrayOutput() AutomationSourceResponseArrayOutput
	ToAutomationSourceResponseArrayOutputWithContext(context.Context) AutomationSourceResponseArrayOutput
}

type AutomationSourceResponseArray []AutomationSourceResponseInput

func (AutomationSourceResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AutomationSourceResponse)(nil)).Elem()
}

func (i AutomationSourceResponseArray) ToAutomationSourceResponseArrayOutput() AutomationSourceResponseArrayOutput {
	return i.ToAutomationSourceResponseArrayOutputWithContext(context.Background())
}

func (i AutomationSourceResponseArray) ToAutomationSourceResponseArrayOutputWithContext(ctx context.Context) AutomationSourceResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AutomationSourceResponseArrayOutput)
}

// The source event types which evaluate the security automation set of rules. For example - security alerts and security assessments. To learn more about the supported security events data models schemas - please visit https://aka.ms/ASCAutomationSchemas.
type AutomationSourceResponseOutput struct{ *pulumi.OutputState }

func (AutomationSourceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AutomationSourceResponse)(nil)).Elem()
}

func (o AutomationSourceResponseOutput) ToAutomationSourceResponseOutput() AutomationSourceResponseOutput {
	return o
}

func (o AutomationSourceResponseOutput) ToAutomationSourceResponseOutputWithContext(ctx context.Context) AutomationSourceResponseOutput {
	return o
}

// A valid event source type.
func (o AutomationSourceResponseOutput) EventSource() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AutomationSourceResponse) *string { return v.EventSource }).(pulumi.StringPtrOutput)
}

// A set of rules which evaluate upon event interception. A logical disjunction is applied between defined rule sets (logical 'or').
func (o AutomationSourceResponseOutput) RuleSets() AutomationRuleSetResponseArrayOutput {
	return o.ApplyT(func(v AutomationSourceResponse) []AutomationRuleSetResponse { return v.RuleSets }).(AutomationRuleSetResponseArrayOutput)
}

type AutomationSourceResponseArrayOutput struct{ *pulumi.OutputState }

func (AutomationSourceResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AutomationSourceResponse)(nil)).Elem()
}

func (o AutomationSourceResponseArrayOutput) ToAutomationSourceResponseArrayOutput() AutomationSourceResponseArrayOutput {
	return o
}

func (o AutomationSourceResponseArrayOutput) ToAutomationSourceResponseArrayOutputWithContext(ctx context.Context) AutomationSourceResponseArrayOutput {
	return o
}

func (o AutomationSourceResponseArrayOutput) Index(i pulumi.IntInput) AutomationSourceResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AutomationSourceResponse {
		return vs[0].([]AutomationSourceResponse)[vs[1].(int)]
	}).(AutomationSourceResponseOutput)
}

// A rule which is evaluated upon event interception. The rule is configured by comparing a specific value from the event model to an expected value. This comparison is done by using one of the supported operators set.
type AutomationTriggeringRule struct {
	// The expected value.
	ExpectedValue *string `pulumi:"expectedValue"`
	// A valid comparer operator to use. A case-insensitive comparison will be applied for String PropertyType.
	Operator *string `pulumi:"operator"`
	// The JPath of the entity model property that should be checked.
	PropertyJPath *string `pulumi:"propertyJPath"`
	// The data type of the compared operands (string, integer, floating point number or a boolean [true/false]]
	PropertyType *string `pulumi:"propertyType"`
}

// AutomationTriggeringRuleInput is an input type that accepts AutomationTriggeringRuleArgs and AutomationTriggeringRuleOutput values.
// You can construct a concrete instance of `AutomationTriggeringRuleInput` via:
//
//          AutomationTriggeringRuleArgs{...}
type AutomationTriggeringRuleInput interface {
	pulumi.Input

	ToAutomationTriggeringRuleOutput() AutomationTriggeringRuleOutput
	ToAutomationTriggeringRuleOutputWithContext(context.Context) AutomationTriggeringRuleOutput
}

// A rule which is evaluated upon event interception. The rule is configured by comparing a specific value from the event model to an expected value. This comparison is done by using one of the supported operators set.
type AutomationTriggeringRuleArgs struct {
	// The expected value.
	ExpectedValue pulumi.StringPtrInput `pulumi:"expectedValue"`
	// A valid comparer operator to use. A case-insensitive comparison will be applied for String PropertyType.
	Operator pulumi.StringPtrInput `pulumi:"operator"`
	// The JPath of the entity model property that should be checked.
	PropertyJPath pulumi.StringPtrInput `pulumi:"propertyJPath"`
	// The data type of the compared operands (string, integer, floating point number or a boolean [true/false]]
	PropertyType pulumi.StringPtrInput `pulumi:"propertyType"`
}

func (AutomationTriggeringRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AutomationTriggeringRule)(nil)).Elem()
}

func (i AutomationTriggeringRuleArgs) ToAutomationTriggeringRuleOutput() AutomationTriggeringRuleOutput {
	return i.ToAutomationTriggeringRuleOutputWithContext(context.Background())
}

func (i AutomationTriggeringRuleArgs) ToAutomationTriggeringRuleOutputWithContext(ctx context.Context) AutomationTriggeringRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AutomationTriggeringRuleOutput)
}

// AutomationTriggeringRuleArrayInput is an input type that accepts AutomationTriggeringRuleArray and AutomationTriggeringRuleArrayOutput values.
// You can construct a concrete instance of `AutomationTriggeringRuleArrayInput` via:
//
//          AutomationTriggeringRuleArray{ AutomationTriggeringRuleArgs{...} }
type AutomationTriggeringRuleArrayInput interface {
	pulumi.Input

	ToAutomationTriggeringRuleArrayOutput() AutomationTriggeringRuleArrayOutput
	ToAutomationTriggeringRuleArrayOutputWithContext(context.Context) AutomationTriggeringRuleArrayOutput
}

type AutomationTriggeringRuleArray []AutomationTriggeringRuleInput

func (AutomationTriggeringRuleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AutomationTriggeringRule)(nil)).Elem()
}

func (i AutomationTriggeringRuleArray) ToAutomationTriggeringRuleArrayOutput() AutomationTriggeringRuleArrayOutput {
	return i.ToAutomationTriggeringRuleArrayOutputWithContext(context.Background())
}

func (i AutomationTriggeringRuleArray) ToAutomationTriggeringRuleArrayOutputWithContext(ctx context.Context) AutomationTriggeringRuleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AutomationTriggeringRuleArrayOutput)
}

// A rule which is evaluated upon event interception. The rule is configured by comparing a specific value from the event model to an expected value. This comparison is done by using one of the supported operators set.
type AutomationTriggeringRuleOutput struct{ *pulumi.OutputState }

func (AutomationTriggeringRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AutomationTriggeringRule)(nil)).Elem()
}

func (o AutomationTriggeringRuleOutput) ToAutomationTriggeringRuleOutput() AutomationTriggeringRuleOutput {
	return o
}

func (o AutomationTriggeringRuleOutput) ToAutomationTriggeringRuleOutputWithContext(ctx context.Context) AutomationTriggeringRuleOutput {
	return o
}

// The expected value.
func (o AutomationTriggeringRuleOutput) ExpectedValue() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AutomationTriggeringRule) *string { return v.ExpectedValue }).(pulumi.StringPtrOutput)
}

// A valid comparer operator to use. A case-insensitive comparison will be applied for String PropertyType.
func (o AutomationTriggeringRuleOutput) Operator() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AutomationTriggeringRule) *string { return v.Operator }).(pulumi.StringPtrOutput)
}

// The JPath of the entity model property that should be checked.
func (o AutomationTriggeringRuleOutput) PropertyJPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AutomationTriggeringRule) *string { return v.PropertyJPath }).(pulumi.StringPtrOutput)
}

// The data type of the compared operands (string, integer, floating point number or a boolean [true/false]]
func (o AutomationTriggeringRuleOutput) PropertyType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AutomationTriggeringRule) *string { return v.PropertyType }).(pulumi.StringPtrOutput)
}

type AutomationTriggeringRuleArrayOutput struct{ *pulumi.OutputState }

func (AutomationTriggeringRuleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AutomationTriggeringRule)(nil)).Elem()
}

func (o AutomationTriggeringRuleArrayOutput) ToAutomationTriggeringRuleArrayOutput() AutomationTriggeringRuleArrayOutput {
	return o
}

func (o AutomationTriggeringRuleArrayOutput) ToAutomationTriggeringRuleArrayOutputWithContext(ctx context.Context) AutomationTriggeringRuleArrayOutput {
	return o
}

func (o AutomationTriggeringRuleArrayOutput) Index(i pulumi.IntInput) AutomationTriggeringRuleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AutomationTriggeringRule {
		return vs[0].([]AutomationTriggeringRule)[vs[1].(int)]
	}).(AutomationTriggeringRuleOutput)
}

// A rule which is evaluated upon event interception. The rule is configured by comparing a specific value from the event model to an expected value. This comparison is done by using one of the supported operators set.
type AutomationTriggeringRuleResponse struct {
	// The expected value.
	ExpectedValue *string `pulumi:"expectedValue"`
	// A valid comparer operator to use. A case-insensitive comparison will be applied for String PropertyType.
	Operator *string `pulumi:"operator"`
	// The JPath of the entity model property that should be checked.
	PropertyJPath *string `pulumi:"propertyJPath"`
	// The data type of the compared operands (string, integer, floating point number or a boolean [true/false]]
	PropertyType *string `pulumi:"propertyType"`
}

// AutomationTriggeringRuleResponseInput is an input type that accepts AutomationTriggeringRuleResponseArgs and AutomationTriggeringRuleResponseOutput values.
// You can construct a concrete instance of `AutomationTriggeringRuleResponseInput` via:
//
//          AutomationTriggeringRuleResponseArgs{...}
type AutomationTriggeringRuleResponseInput interface {
	pulumi.Input

	ToAutomationTriggeringRuleResponseOutput() AutomationTriggeringRuleResponseOutput
	ToAutomationTriggeringRuleResponseOutputWithContext(context.Context) AutomationTriggeringRuleResponseOutput
}

// A rule which is evaluated upon event interception. The rule is configured by comparing a specific value from the event model to an expected value. This comparison is done by using one of the supported operators set.
type AutomationTriggeringRuleResponseArgs struct {
	// The expected value.
	ExpectedValue pulumi.StringPtrInput `pulumi:"expectedValue"`
	// A valid comparer operator to use. A case-insensitive comparison will be applied for String PropertyType.
	Operator pulumi.StringPtrInput `pulumi:"operator"`
	// The JPath of the entity model property that should be checked.
	PropertyJPath pulumi.StringPtrInput `pulumi:"propertyJPath"`
	// The data type of the compared operands (string, integer, floating point number or a boolean [true/false]]
	PropertyType pulumi.StringPtrInput `pulumi:"propertyType"`
}

func (AutomationTriggeringRuleResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AutomationTriggeringRuleResponse)(nil)).Elem()
}

func (i AutomationTriggeringRuleResponseArgs) ToAutomationTriggeringRuleResponseOutput() AutomationTriggeringRuleResponseOutput {
	return i.ToAutomationTriggeringRuleResponseOutputWithContext(context.Background())
}

func (i AutomationTriggeringRuleResponseArgs) ToAutomationTriggeringRuleResponseOutputWithContext(ctx context.Context) AutomationTriggeringRuleResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AutomationTriggeringRuleResponseOutput)
}

// AutomationTriggeringRuleResponseArrayInput is an input type that accepts AutomationTriggeringRuleResponseArray and AutomationTriggeringRuleResponseArrayOutput values.
// You can construct a concrete instance of `AutomationTriggeringRuleResponseArrayInput` via:
//
//          AutomationTriggeringRuleResponseArray{ AutomationTriggeringRuleResponseArgs{...} }
type AutomationTriggeringRuleResponseArrayInput interface {
	pulumi.Input

	ToAutomationTriggeringRuleResponseArrayOutput() AutomationTriggeringRuleResponseArrayOutput
	ToAutomationTriggeringRuleResponseArrayOutputWithContext(context.Context) AutomationTriggeringRuleResponseArrayOutput
}

type AutomationTriggeringRuleResponseArray []AutomationTriggeringRuleResponseInput

func (AutomationTriggeringRuleResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AutomationTriggeringRuleResponse)(nil)).Elem()
}

func (i AutomationTriggeringRuleResponseArray) ToAutomationTriggeringRuleResponseArrayOutput() AutomationTriggeringRuleResponseArrayOutput {
	return i.ToAutomationTriggeringRuleResponseArrayOutputWithContext(context.Background())
}

func (i AutomationTriggeringRuleResponseArray) ToAutomationTriggeringRuleResponseArrayOutputWithContext(ctx context.Context) AutomationTriggeringRuleResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AutomationTriggeringRuleResponseArrayOutput)
}

// A rule which is evaluated upon event interception. The rule is configured by comparing a specific value from the event model to an expected value. This comparison is done by using one of the supported operators set.
type AutomationTriggeringRuleResponseOutput struct{ *pulumi.OutputState }

func (AutomationTriggeringRuleResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AutomationTriggeringRuleResponse)(nil)).Elem()
}

func (o AutomationTriggeringRuleResponseOutput) ToAutomationTriggeringRuleResponseOutput() AutomationTriggeringRuleResponseOutput {
	return o
}

func (o AutomationTriggeringRuleResponseOutput) ToAutomationTriggeringRuleResponseOutputWithContext(ctx context.Context) AutomationTriggeringRuleResponseOutput {
	return o
}

// The expected value.
func (o AutomationTriggeringRuleResponseOutput) ExpectedValue() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AutomationTriggeringRuleResponse) *string { return v.ExpectedValue }).(pulumi.StringPtrOutput)
}

// A valid comparer operator to use. A case-insensitive comparison will be applied for String PropertyType.
func (o AutomationTriggeringRuleResponseOutput) Operator() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AutomationTriggeringRuleResponse) *string { return v.Operator }).(pulumi.StringPtrOutput)
}

// The JPath of the entity model property that should be checked.
func (o AutomationTriggeringRuleResponseOutput) PropertyJPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AutomationTriggeringRuleResponse) *string { return v.PropertyJPath }).(pulumi.StringPtrOutput)
}

// The data type of the compared operands (string, integer, floating point number or a boolean [true/false]]
func (o AutomationTriggeringRuleResponseOutput) PropertyType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AutomationTriggeringRuleResponse) *string { return v.PropertyType }).(pulumi.StringPtrOutput)
}

type AutomationTriggeringRuleResponseArrayOutput struct{ *pulumi.OutputState }

func (AutomationTriggeringRuleResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AutomationTriggeringRuleResponse)(nil)).Elem()
}

func (o AutomationTriggeringRuleResponseArrayOutput) ToAutomationTriggeringRuleResponseArrayOutput() AutomationTriggeringRuleResponseArrayOutput {
	return o
}

func (o AutomationTriggeringRuleResponseArrayOutput) ToAutomationTriggeringRuleResponseArrayOutputWithContext(ctx context.Context) AutomationTriggeringRuleResponseArrayOutput {
	return o
}

func (o AutomationTriggeringRuleResponseArrayOutput) Index(i pulumi.IntInput) AutomationTriggeringRuleResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AutomationTriggeringRuleResponse {
		return vs[0].([]AutomationTriggeringRuleResponse)[vs[1].(int)]
	}).(AutomationTriggeringRuleResponseOutput)
}

// Details of the resource that was assessed
type ResourceDetails struct {
	// The platform where the assessed resource resides
	Source string `pulumi:"source"`
}

// ResourceDetailsInput is an input type that accepts ResourceDetailsArgs and ResourceDetailsOutput values.
// You can construct a concrete instance of `ResourceDetailsInput` via:
//
//          ResourceDetailsArgs{...}
type ResourceDetailsInput interface {
	pulumi.Input

	ToResourceDetailsOutput() ResourceDetailsOutput
	ToResourceDetailsOutputWithContext(context.Context) ResourceDetailsOutput
}

// Details of the resource that was assessed
type ResourceDetailsArgs struct {
	// The platform where the assessed resource resides
	Source pulumi.StringInput `pulumi:"source"`
}

func (ResourceDetailsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceDetails)(nil)).Elem()
}

func (i ResourceDetailsArgs) ToResourceDetailsOutput() ResourceDetailsOutput {
	return i.ToResourceDetailsOutputWithContext(context.Background())
}

func (i ResourceDetailsArgs) ToResourceDetailsOutputWithContext(ctx context.Context) ResourceDetailsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceDetailsOutput)
}

func (i ResourceDetailsArgs) ToResourceDetailsPtrOutput() ResourceDetailsPtrOutput {
	return i.ToResourceDetailsPtrOutputWithContext(context.Background())
}

func (i ResourceDetailsArgs) ToResourceDetailsPtrOutputWithContext(ctx context.Context) ResourceDetailsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceDetailsOutput).ToResourceDetailsPtrOutputWithContext(ctx)
}

// ResourceDetailsPtrInput is an input type that accepts ResourceDetailsArgs, ResourceDetailsPtr and ResourceDetailsPtrOutput values.
// You can construct a concrete instance of `ResourceDetailsPtrInput` via:
//
//          ResourceDetailsArgs{...}
//
//  or:
//
//          nil
type ResourceDetailsPtrInput interface {
	pulumi.Input

	ToResourceDetailsPtrOutput() ResourceDetailsPtrOutput
	ToResourceDetailsPtrOutputWithContext(context.Context) ResourceDetailsPtrOutput
}

type resourceDetailsPtrType ResourceDetailsArgs

func ResourceDetailsPtr(v *ResourceDetailsArgs) ResourceDetailsPtrInput {
	return (*resourceDetailsPtrType)(v)
}

func (*resourceDetailsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ResourceDetails)(nil)).Elem()
}

func (i *resourceDetailsPtrType) ToResourceDetailsPtrOutput() ResourceDetailsPtrOutput {
	return i.ToResourceDetailsPtrOutputWithContext(context.Background())
}

func (i *resourceDetailsPtrType) ToResourceDetailsPtrOutputWithContext(ctx context.Context) ResourceDetailsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceDetailsPtrOutput)
}

// Details of the resource that was assessed
type ResourceDetailsOutput struct{ *pulumi.OutputState }

func (ResourceDetailsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceDetails)(nil)).Elem()
}

func (o ResourceDetailsOutput) ToResourceDetailsOutput() ResourceDetailsOutput {
	return o
}

func (o ResourceDetailsOutput) ToResourceDetailsOutputWithContext(ctx context.Context) ResourceDetailsOutput {
	return o
}

func (o ResourceDetailsOutput) ToResourceDetailsPtrOutput() ResourceDetailsPtrOutput {
	return o.ToResourceDetailsPtrOutputWithContext(context.Background())
}

func (o ResourceDetailsOutput) ToResourceDetailsPtrOutputWithContext(ctx context.Context) ResourceDetailsPtrOutput {
	return o.ApplyT(func(v ResourceDetails) *ResourceDetails {
		return &v
	}).(ResourceDetailsPtrOutput)
}

// The platform where the assessed resource resides
func (o ResourceDetailsOutput) Source() pulumi.StringOutput {
	return o.ApplyT(func(v ResourceDetails) string { return v.Source }).(pulumi.StringOutput)
}

type ResourceDetailsPtrOutput struct{ *pulumi.OutputState }

func (ResourceDetailsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ResourceDetails)(nil)).Elem()
}

func (o ResourceDetailsPtrOutput) ToResourceDetailsPtrOutput() ResourceDetailsPtrOutput {
	return o
}

func (o ResourceDetailsPtrOutput) ToResourceDetailsPtrOutputWithContext(ctx context.Context) ResourceDetailsPtrOutput {
	return o
}

func (o ResourceDetailsPtrOutput) Elem() ResourceDetailsOutput {
	return o.ApplyT(func(v *ResourceDetails) ResourceDetails { return *v }).(ResourceDetailsOutput)
}

// The platform where the assessed resource resides
func (o ResourceDetailsPtrOutput) Source() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceDetails) *string {
		if v == nil {
			return nil
		}
		return &v.Source
	}).(pulumi.StringPtrOutput)
}

// Details of the resource that was assessed
type ResourceDetailsResponse struct {
	// The platform where the assessed resource resides
	Source string `pulumi:"source"`
}

// ResourceDetailsResponseInput is an input type that accepts ResourceDetailsResponseArgs and ResourceDetailsResponseOutput values.
// You can construct a concrete instance of `ResourceDetailsResponseInput` via:
//
//          ResourceDetailsResponseArgs{...}
type ResourceDetailsResponseInput interface {
	pulumi.Input

	ToResourceDetailsResponseOutput() ResourceDetailsResponseOutput
	ToResourceDetailsResponseOutputWithContext(context.Context) ResourceDetailsResponseOutput
}

// Details of the resource that was assessed
type ResourceDetailsResponseArgs struct {
	// The platform where the assessed resource resides
	Source pulumi.StringInput `pulumi:"source"`
}

func (ResourceDetailsResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceDetailsResponse)(nil)).Elem()
}

func (i ResourceDetailsResponseArgs) ToResourceDetailsResponseOutput() ResourceDetailsResponseOutput {
	return i.ToResourceDetailsResponseOutputWithContext(context.Background())
}

func (i ResourceDetailsResponseArgs) ToResourceDetailsResponseOutputWithContext(ctx context.Context) ResourceDetailsResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceDetailsResponseOutput)
}

func (i ResourceDetailsResponseArgs) ToResourceDetailsResponsePtrOutput() ResourceDetailsResponsePtrOutput {
	return i.ToResourceDetailsResponsePtrOutputWithContext(context.Background())
}

func (i ResourceDetailsResponseArgs) ToResourceDetailsResponsePtrOutputWithContext(ctx context.Context) ResourceDetailsResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceDetailsResponseOutput).ToResourceDetailsResponsePtrOutputWithContext(ctx)
}

// ResourceDetailsResponsePtrInput is an input type that accepts ResourceDetailsResponseArgs, ResourceDetailsResponsePtr and ResourceDetailsResponsePtrOutput values.
// You can construct a concrete instance of `ResourceDetailsResponsePtrInput` via:
//
//          ResourceDetailsResponseArgs{...}
//
//  or:
//
//          nil
type ResourceDetailsResponsePtrInput interface {
	pulumi.Input

	ToResourceDetailsResponsePtrOutput() ResourceDetailsResponsePtrOutput
	ToResourceDetailsResponsePtrOutputWithContext(context.Context) ResourceDetailsResponsePtrOutput
}

type resourceDetailsResponsePtrType ResourceDetailsResponseArgs

func ResourceDetailsResponsePtr(v *ResourceDetailsResponseArgs) ResourceDetailsResponsePtrInput {
	return (*resourceDetailsResponsePtrType)(v)
}

func (*resourceDetailsResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ResourceDetailsResponse)(nil)).Elem()
}

func (i *resourceDetailsResponsePtrType) ToResourceDetailsResponsePtrOutput() ResourceDetailsResponsePtrOutput {
	return i.ToResourceDetailsResponsePtrOutputWithContext(context.Background())
}

func (i *resourceDetailsResponsePtrType) ToResourceDetailsResponsePtrOutputWithContext(ctx context.Context) ResourceDetailsResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceDetailsResponsePtrOutput)
}

// Details of the resource that was assessed
type ResourceDetailsResponseOutput struct{ *pulumi.OutputState }

func (ResourceDetailsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceDetailsResponse)(nil)).Elem()
}

func (o ResourceDetailsResponseOutput) ToResourceDetailsResponseOutput() ResourceDetailsResponseOutput {
	return o
}

func (o ResourceDetailsResponseOutput) ToResourceDetailsResponseOutputWithContext(ctx context.Context) ResourceDetailsResponseOutput {
	return o
}

func (o ResourceDetailsResponseOutput) ToResourceDetailsResponsePtrOutput() ResourceDetailsResponsePtrOutput {
	return o.ToResourceDetailsResponsePtrOutputWithContext(context.Background())
}

func (o ResourceDetailsResponseOutput) ToResourceDetailsResponsePtrOutputWithContext(ctx context.Context) ResourceDetailsResponsePtrOutput {
	return o.ApplyT(func(v ResourceDetailsResponse) *ResourceDetailsResponse {
		return &v
	}).(ResourceDetailsResponsePtrOutput)
}

// The platform where the assessed resource resides
func (o ResourceDetailsResponseOutput) Source() pulumi.StringOutput {
	return o.ApplyT(func(v ResourceDetailsResponse) string { return v.Source }).(pulumi.StringOutput)
}

type ResourceDetailsResponsePtrOutput struct{ *pulumi.OutputState }

func (ResourceDetailsResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ResourceDetailsResponse)(nil)).Elem()
}

func (o ResourceDetailsResponsePtrOutput) ToResourceDetailsResponsePtrOutput() ResourceDetailsResponsePtrOutput {
	return o
}

func (o ResourceDetailsResponsePtrOutput) ToResourceDetailsResponsePtrOutputWithContext(ctx context.Context) ResourceDetailsResponsePtrOutput {
	return o
}

func (o ResourceDetailsResponsePtrOutput) Elem() ResourceDetailsResponseOutput {
	return o.ApplyT(func(v *ResourceDetailsResponse) ResourceDetailsResponse { return *v }).(ResourceDetailsResponseOutput)
}

// The platform where the assessed resource resides
func (o ResourceDetailsResponsePtrOutput) Source() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceDetailsResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Source
	}).(pulumi.StringPtrOutput)
}

// A more specific scope used to identify the alerts to suppress.
type ScopeElement struct {
	// The alert entity type to suppress by.
	Field *string `pulumi:"field"`
}

// ScopeElementInput is an input type that accepts ScopeElementArgs and ScopeElementOutput values.
// You can construct a concrete instance of `ScopeElementInput` via:
//
//          ScopeElementArgs{...}
type ScopeElementInput interface {
	pulumi.Input

	ToScopeElementOutput() ScopeElementOutput
	ToScopeElementOutputWithContext(context.Context) ScopeElementOutput
}

// A more specific scope used to identify the alerts to suppress.
type ScopeElementArgs struct {
	// The alert entity type to suppress by.
	Field pulumi.StringPtrInput `pulumi:"field"`
}

func (ScopeElementArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ScopeElement)(nil)).Elem()
}

func (i ScopeElementArgs) ToScopeElementOutput() ScopeElementOutput {
	return i.ToScopeElementOutputWithContext(context.Background())
}

func (i ScopeElementArgs) ToScopeElementOutputWithContext(ctx context.Context) ScopeElementOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScopeElementOutput)
}

// ScopeElementArrayInput is an input type that accepts ScopeElementArray and ScopeElementArrayOutput values.
// You can construct a concrete instance of `ScopeElementArrayInput` via:
//
//          ScopeElementArray{ ScopeElementArgs{...} }
type ScopeElementArrayInput interface {
	pulumi.Input

	ToScopeElementArrayOutput() ScopeElementArrayOutput
	ToScopeElementArrayOutputWithContext(context.Context) ScopeElementArrayOutput
}

type ScopeElementArray []ScopeElementInput

func (ScopeElementArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ScopeElement)(nil)).Elem()
}

func (i ScopeElementArray) ToScopeElementArrayOutput() ScopeElementArrayOutput {
	return i.ToScopeElementArrayOutputWithContext(context.Background())
}

func (i ScopeElementArray) ToScopeElementArrayOutputWithContext(ctx context.Context) ScopeElementArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScopeElementArrayOutput)
}

// A more specific scope used to identify the alerts to suppress.
type ScopeElementOutput struct{ *pulumi.OutputState }

func (ScopeElementOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ScopeElement)(nil)).Elem()
}

func (o ScopeElementOutput) ToScopeElementOutput() ScopeElementOutput {
	return o
}

func (o ScopeElementOutput) ToScopeElementOutputWithContext(ctx context.Context) ScopeElementOutput {
	return o
}

// The alert entity type to suppress by.
func (o ScopeElementOutput) Field() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ScopeElement) *string { return v.Field }).(pulumi.StringPtrOutput)
}

type ScopeElementArrayOutput struct{ *pulumi.OutputState }

func (ScopeElementArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ScopeElement)(nil)).Elem()
}

func (o ScopeElementArrayOutput) ToScopeElementArrayOutput() ScopeElementArrayOutput {
	return o
}

func (o ScopeElementArrayOutput) ToScopeElementArrayOutputWithContext(ctx context.Context) ScopeElementArrayOutput {
	return o
}

func (o ScopeElementArrayOutput) Index(i pulumi.IntInput) ScopeElementOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ScopeElement {
		return vs[0].([]ScopeElement)[vs[1].(int)]
	}).(ScopeElementOutput)
}

// A more specific scope used to identify the alerts to suppress.
type ScopeElementResponse struct {
	// The alert entity type to suppress by.
	Field *string `pulumi:"field"`
}

// ScopeElementResponseInput is an input type that accepts ScopeElementResponseArgs and ScopeElementResponseOutput values.
// You can construct a concrete instance of `ScopeElementResponseInput` via:
//
//          ScopeElementResponseArgs{...}
type ScopeElementResponseInput interface {
	pulumi.Input

	ToScopeElementResponseOutput() ScopeElementResponseOutput
	ToScopeElementResponseOutputWithContext(context.Context) ScopeElementResponseOutput
}

// A more specific scope used to identify the alerts to suppress.
type ScopeElementResponseArgs struct {
	// The alert entity type to suppress by.
	Field pulumi.StringPtrInput `pulumi:"field"`
}

func (ScopeElementResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ScopeElementResponse)(nil)).Elem()
}

func (i ScopeElementResponseArgs) ToScopeElementResponseOutput() ScopeElementResponseOutput {
	return i.ToScopeElementResponseOutputWithContext(context.Background())
}

func (i ScopeElementResponseArgs) ToScopeElementResponseOutputWithContext(ctx context.Context) ScopeElementResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScopeElementResponseOutput)
}

// ScopeElementResponseArrayInput is an input type that accepts ScopeElementResponseArray and ScopeElementResponseArrayOutput values.
// You can construct a concrete instance of `ScopeElementResponseArrayInput` via:
//
//          ScopeElementResponseArray{ ScopeElementResponseArgs{...} }
type ScopeElementResponseArrayInput interface {
	pulumi.Input

	ToScopeElementResponseArrayOutput() ScopeElementResponseArrayOutput
	ToScopeElementResponseArrayOutputWithContext(context.Context) ScopeElementResponseArrayOutput
}

type ScopeElementResponseArray []ScopeElementResponseInput

func (ScopeElementResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ScopeElementResponse)(nil)).Elem()
}

func (i ScopeElementResponseArray) ToScopeElementResponseArrayOutput() ScopeElementResponseArrayOutput {
	return i.ToScopeElementResponseArrayOutputWithContext(context.Background())
}

func (i ScopeElementResponseArray) ToScopeElementResponseArrayOutputWithContext(ctx context.Context) ScopeElementResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScopeElementResponseArrayOutput)
}

// A more specific scope used to identify the alerts to suppress.
type ScopeElementResponseOutput struct{ *pulumi.OutputState }

func (ScopeElementResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ScopeElementResponse)(nil)).Elem()
}

func (o ScopeElementResponseOutput) ToScopeElementResponseOutput() ScopeElementResponseOutput {
	return o
}

func (o ScopeElementResponseOutput) ToScopeElementResponseOutputWithContext(ctx context.Context) ScopeElementResponseOutput {
	return o
}

// The alert entity type to suppress by.
func (o ScopeElementResponseOutput) Field() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ScopeElementResponse) *string { return v.Field }).(pulumi.StringPtrOutput)
}

type ScopeElementResponseArrayOutput struct{ *pulumi.OutputState }

func (ScopeElementResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ScopeElementResponse)(nil)).Elem()
}

func (o ScopeElementResponseArrayOutput) ToScopeElementResponseArrayOutput() ScopeElementResponseArrayOutput {
	return o
}

func (o ScopeElementResponseArrayOutput) ToScopeElementResponseArrayOutputWithContext(ctx context.Context) ScopeElementResponseArrayOutput {
	return o
}

func (o ScopeElementResponseArrayOutput) Index(i pulumi.IntInput) ScopeElementResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ScopeElementResponse {
		return vs[0].([]ScopeElementResponse)[vs[1].(int)]
	}).(ScopeElementResponseOutput)
}

type SuppressionAlertsScope struct {
	// All the conditions inside need to be true in order to suppress the alert
	AllOf []ScopeElement `pulumi:"allOf"`
}

// SuppressionAlertsScopeInput is an input type that accepts SuppressionAlertsScopeArgs and SuppressionAlertsScopeOutput values.
// You can construct a concrete instance of `SuppressionAlertsScopeInput` via:
//
//          SuppressionAlertsScopeArgs{...}
type SuppressionAlertsScopeInput interface {
	pulumi.Input

	ToSuppressionAlertsScopeOutput() SuppressionAlertsScopeOutput
	ToSuppressionAlertsScopeOutputWithContext(context.Context) SuppressionAlertsScopeOutput
}

type SuppressionAlertsScopeArgs struct {
	// All the conditions inside need to be true in order to suppress the alert
	AllOf ScopeElementArrayInput `pulumi:"allOf"`
}

func (SuppressionAlertsScopeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SuppressionAlertsScope)(nil)).Elem()
}

func (i SuppressionAlertsScopeArgs) ToSuppressionAlertsScopeOutput() SuppressionAlertsScopeOutput {
	return i.ToSuppressionAlertsScopeOutputWithContext(context.Background())
}

func (i SuppressionAlertsScopeArgs) ToSuppressionAlertsScopeOutputWithContext(ctx context.Context) SuppressionAlertsScopeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SuppressionAlertsScopeOutput)
}

func (i SuppressionAlertsScopeArgs) ToSuppressionAlertsScopePtrOutput() SuppressionAlertsScopePtrOutput {
	return i.ToSuppressionAlertsScopePtrOutputWithContext(context.Background())
}

func (i SuppressionAlertsScopeArgs) ToSuppressionAlertsScopePtrOutputWithContext(ctx context.Context) SuppressionAlertsScopePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SuppressionAlertsScopeOutput).ToSuppressionAlertsScopePtrOutputWithContext(ctx)
}

// SuppressionAlertsScopePtrInput is an input type that accepts SuppressionAlertsScopeArgs, SuppressionAlertsScopePtr and SuppressionAlertsScopePtrOutput values.
// You can construct a concrete instance of `SuppressionAlertsScopePtrInput` via:
//
//          SuppressionAlertsScopeArgs{...}
//
//  or:
//
//          nil
type SuppressionAlertsScopePtrInput interface {
	pulumi.Input

	ToSuppressionAlertsScopePtrOutput() SuppressionAlertsScopePtrOutput
	ToSuppressionAlertsScopePtrOutputWithContext(context.Context) SuppressionAlertsScopePtrOutput
}

type suppressionAlertsScopePtrType SuppressionAlertsScopeArgs

func SuppressionAlertsScopePtr(v *SuppressionAlertsScopeArgs) SuppressionAlertsScopePtrInput {
	return (*suppressionAlertsScopePtrType)(v)
}

func (*suppressionAlertsScopePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SuppressionAlertsScope)(nil)).Elem()
}

func (i *suppressionAlertsScopePtrType) ToSuppressionAlertsScopePtrOutput() SuppressionAlertsScopePtrOutput {
	return i.ToSuppressionAlertsScopePtrOutputWithContext(context.Background())
}

func (i *suppressionAlertsScopePtrType) ToSuppressionAlertsScopePtrOutputWithContext(ctx context.Context) SuppressionAlertsScopePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SuppressionAlertsScopePtrOutput)
}

type SuppressionAlertsScopeOutput struct{ *pulumi.OutputState }

func (SuppressionAlertsScopeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SuppressionAlertsScope)(nil)).Elem()
}

func (o SuppressionAlertsScopeOutput) ToSuppressionAlertsScopeOutput() SuppressionAlertsScopeOutput {
	return o
}

func (o SuppressionAlertsScopeOutput) ToSuppressionAlertsScopeOutputWithContext(ctx context.Context) SuppressionAlertsScopeOutput {
	return o
}

func (o SuppressionAlertsScopeOutput) ToSuppressionAlertsScopePtrOutput() SuppressionAlertsScopePtrOutput {
	return o.ToSuppressionAlertsScopePtrOutputWithContext(context.Background())
}

func (o SuppressionAlertsScopeOutput) ToSuppressionAlertsScopePtrOutputWithContext(ctx context.Context) SuppressionAlertsScopePtrOutput {
	return o.ApplyT(func(v SuppressionAlertsScope) *SuppressionAlertsScope {
		return &v
	}).(SuppressionAlertsScopePtrOutput)
}

// All the conditions inside need to be true in order to suppress the alert
func (o SuppressionAlertsScopeOutput) AllOf() ScopeElementArrayOutput {
	return o.ApplyT(func(v SuppressionAlertsScope) []ScopeElement { return v.AllOf }).(ScopeElementArrayOutput)
}

type SuppressionAlertsScopePtrOutput struct{ *pulumi.OutputState }

func (SuppressionAlertsScopePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SuppressionAlertsScope)(nil)).Elem()
}

func (o SuppressionAlertsScopePtrOutput) ToSuppressionAlertsScopePtrOutput() SuppressionAlertsScopePtrOutput {
	return o
}

func (o SuppressionAlertsScopePtrOutput) ToSuppressionAlertsScopePtrOutputWithContext(ctx context.Context) SuppressionAlertsScopePtrOutput {
	return o
}

func (o SuppressionAlertsScopePtrOutput) Elem() SuppressionAlertsScopeOutput {
	return o.ApplyT(func(v *SuppressionAlertsScope) SuppressionAlertsScope { return *v }).(SuppressionAlertsScopeOutput)
}

// All the conditions inside need to be true in order to suppress the alert
func (o SuppressionAlertsScopePtrOutput) AllOf() ScopeElementArrayOutput {
	return o.ApplyT(func(v *SuppressionAlertsScope) []ScopeElement {
		if v == nil {
			return nil
		}
		return v.AllOf
	}).(ScopeElementArrayOutput)
}

type SuppressionAlertsScopeResponse struct {
	// All the conditions inside need to be true in order to suppress the alert
	AllOf []ScopeElementResponse `pulumi:"allOf"`
}

// SuppressionAlertsScopeResponseInput is an input type that accepts SuppressionAlertsScopeResponseArgs and SuppressionAlertsScopeResponseOutput values.
// You can construct a concrete instance of `SuppressionAlertsScopeResponseInput` via:
//
//          SuppressionAlertsScopeResponseArgs{...}
type SuppressionAlertsScopeResponseInput interface {
	pulumi.Input

	ToSuppressionAlertsScopeResponseOutput() SuppressionAlertsScopeResponseOutput
	ToSuppressionAlertsScopeResponseOutputWithContext(context.Context) SuppressionAlertsScopeResponseOutput
}

type SuppressionAlertsScopeResponseArgs struct {
	// All the conditions inside need to be true in order to suppress the alert
	AllOf ScopeElementResponseArrayInput `pulumi:"allOf"`
}

func (SuppressionAlertsScopeResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SuppressionAlertsScopeResponse)(nil)).Elem()
}

func (i SuppressionAlertsScopeResponseArgs) ToSuppressionAlertsScopeResponseOutput() SuppressionAlertsScopeResponseOutput {
	return i.ToSuppressionAlertsScopeResponseOutputWithContext(context.Background())
}

func (i SuppressionAlertsScopeResponseArgs) ToSuppressionAlertsScopeResponseOutputWithContext(ctx context.Context) SuppressionAlertsScopeResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SuppressionAlertsScopeResponseOutput)
}

func (i SuppressionAlertsScopeResponseArgs) ToSuppressionAlertsScopeResponsePtrOutput() SuppressionAlertsScopeResponsePtrOutput {
	return i.ToSuppressionAlertsScopeResponsePtrOutputWithContext(context.Background())
}

func (i SuppressionAlertsScopeResponseArgs) ToSuppressionAlertsScopeResponsePtrOutputWithContext(ctx context.Context) SuppressionAlertsScopeResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SuppressionAlertsScopeResponseOutput).ToSuppressionAlertsScopeResponsePtrOutputWithContext(ctx)
}

// SuppressionAlertsScopeResponsePtrInput is an input type that accepts SuppressionAlertsScopeResponseArgs, SuppressionAlertsScopeResponsePtr and SuppressionAlertsScopeResponsePtrOutput values.
// You can construct a concrete instance of `SuppressionAlertsScopeResponsePtrInput` via:
//
//          SuppressionAlertsScopeResponseArgs{...}
//
//  or:
//
//          nil
type SuppressionAlertsScopeResponsePtrInput interface {
	pulumi.Input

	ToSuppressionAlertsScopeResponsePtrOutput() SuppressionAlertsScopeResponsePtrOutput
	ToSuppressionAlertsScopeResponsePtrOutputWithContext(context.Context) SuppressionAlertsScopeResponsePtrOutput
}

type suppressionAlertsScopeResponsePtrType SuppressionAlertsScopeResponseArgs

func SuppressionAlertsScopeResponsePtr(v *SuppressionAlertsScopeResponseArgs) SuppressionAlertsScopeResponsePtrInput {
	return (*suppressionAlertsScopeResponsePtrType)(v)
}

func (*suppressionAlertsScopeResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SuppressionAlertsScopeResponse)(nil)).Elem()
}

func (i *suppressionAlertsScopeResponsePtrType) ToSuppressionAlertsScopeResponsePtrOutput() SuppressionAlertsScopeResponsePtrOutput {
	return i.ToSuppressionAlertsScopeResponsePtrOutputWithContext(context.Background())
}

func (i *suppressionAlertsScopeResponsePtrType) ToSuppressionAlertsScopeResponsePtrOutputWithContext(ctx context.Context) SuppressionAlertsScopeResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SuppressionAlertsScopeResponsePtrOutput)
}

type SuppressionAlertsScopeResponseOutput struct{ *pulumi.OutputState }

func (SuppressionAlertsScopeResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SuppressionAlertsScopeResponse)(nil)).Elem()
}

func (o SuppressionAlertsScopeResponseOutput) ToSuppressionAlertsScopeResponseOutput() SuppressionAlertsScopeResponseOutput {
	return o
}

func (o SuppressionAlertsScopeResponseOutput) ToSuppressionAlertsScopeResponseOutputWithContext(ctx context.Context) SuppressionAlertsScopeResponseOutput {
	return o
}

func (o SuppressionAlertsScopeResponseOutput) ToSuppressionAlertsScopeResponsePtrOutput() SuppressionAlertsScopeResponsePtrOutput {
	return o.ToSuppressionAlertsScopeResponsePtrOutputWithContext(context.Background())
}

func (o SuppressionAlertsScopeResponseOutput) ToSuppressionAlertsScopeResponsePtrOutputWithContext(ctx context.Context) SuppressionAlertsScopeResponsePtrOutput {
	return o.ApplyT(func(v SuppressionAlertsScopeResponse) *SuppressionAlertsScopeResponse {
		return &v
	}).(SuppressionAlertsScopeResponsePtrOutput)
}

// All the conditions inside need to be true in order to suppress the alert
func (o SuppressionAlertsScopeResponseOutput) AllOf() ScopeElementResponseArrayOutput {
	return o.ApplyT(func(v SuppressionAlertsScopeResponse) []ScopeElementResponse { return v.AllOf }).(ScopeElementResponseArrayOutput)
}

type SuppressionAlertsScopeResponsePtrOutput struct{ *pulumi.OutputState }

func (SuppressionAlertsScopeResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SuppressionAlertsScopeResponse)(nil)).Elem()
}

func (o SuppressionAlertsScopeResponsePtrOutput) ToSuppressionAlertsScopeResponsePtrOutput() SuppressionAlertsScopeResponsePtrOutput {
	return o
}

func (o SuppressionAlertsScopeResponsePtrOutput) ToSuppressionAlertsScopeResponsePtrOutputWithContext(ctx context.Context) SuppressionAlertsScopeResponsePtrOutput {
	return o
}

func (o SuppressionAlertsScopeResponsePtrOutput) Elem() SuppressionAlertsScopeResponseOutput {
	return o.ApplyT(func(v *SuppressionAlertsScopeResponse) SuppressionAlertsScopeResponse { return *v }).(SuppressionAlertsScopeResponseOutput)
}

// All the conditions inside need to be true in order to suppress the alert
func (o SuppressionAlertsScopeResponsePtrOutput) AllOf() ScopeElementResponseArrayOutput {
	return o.ApplyT(func(v *SuppressionAlertsScopeResponse) []ScopeElementResponse {
		if v == nil {
			return nil
		}
		return v.AllOf
	}).(ScopeElementResponseArrayOutput)
}

func init() {
	pulumi.RegisterOutputType(AssessmentLinksResponseOutput{})
	pulumi.RegisterOutputType(AssessmentLinksResponsePtrOutput{})
	pulumi.RegisterOutputType(AssessmentStatusOutput{})
	pulumi.RegisterOutputType(AssessmentStatusPtrOutput{})
	pulumi.RegisterOutputType(AssessmentStatusResponseOutput{})
	pulumi.RegisterOutputType(AssessmentStatusResponsePtrOutput{})
	pulumi.RegisterOutputType(AutomationActionOutput{})
	pulumi.RegisterOutputType(AutomationActionArrayOutput{})
	pulumi.RegisterOutputType(AutomationActionResponseOutput{})
	pulumi.RegisterOutputType(AutomationActionResponseArrayOutput{})
	pulumi.RegisterOutputType(AutomationRuleSetOutput{})
	pulumi.RegisterOutputType(AutomationRuleSetArrayOutput{})
	pulumi.RegisterOutputType(AutomationRuleSetResponseOutput{})
	pulumi.RegisterOutputType(AutomationRuleSetResponseArrayOutput{})
	pulumi.RegisterOutputType(AutomationScopeOutput{})
	pulumi.RegisterOutputType(AutomationScopeArrayOutput{})
	pulumi.RegisterOutputType(AutomationScopeResponseOutput{})
	pulumi.RegisterOutputType(AutomationScopeResponseArrayOutput{})
	pulumi.RegisterOutputType(AutomationSourceOutput{})
	pulumi.RegisterOutputType(AutomationSourceArrayOutput{})
	pulumi.RegisterOutputType(AutomationSourceResponseOutput{})
	pulumi.RegisterOutputType(AutomationSourceResponseArrayOutput{})
	pulumi.RegisterOutputType(AutomationTriggeringRuleOutput{})
	pulumi.RegisterOutputType(AutomationTriggeringRuleArrayOutput{})
	pulumi.RegisterOutputType(AutomationTriggeringRuleResponseOutput{})
	pulumi.RegisterOutputType(AutomationTriggeringRuleResponseArrayOutput{})
	pulumi.RegisterOutputType(ResourceDetailsOutput{})
	pulumi.RegisterOutputType(ResourceDetailsPtrOutput{})
	pulumi.RegisterOutputType(ResourceDetailsResponseOutput{})
	pulumi.RegisterOutputType(ResourceDetailsResponsePtrOutput{})
	pulumi.RegisterOutputType(ScopeElementOutput{})
	pulumi.RegisterOutputType(ScopeElementArrayOutput{})
	pulumi.RegisterOutputType(ScopeElementResponseOutput{})
	pulumi.RegisterOutputType(ScopeElementResponseArrayOutput{})
	pulumi.RegisterOutputType(SuppressionAlertsScopeOutput{})
	pulumi.RegisterOutputType(SuppressionAlertsScopePtrOutput{})
	pulumi.RegisterOutputType(SuppressionAlertsScopeResponseOutput{})
	pulumi.RegisterOutputType(SuppressionAlertsScopeResponsePtrOutput{})
}
