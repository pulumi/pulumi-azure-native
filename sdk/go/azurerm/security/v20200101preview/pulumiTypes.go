// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v20200101preview

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// AWS cloud account connector based assume role, the role enables delegating access to your AWS resources. The role is composed of role arn and external id, for more details, refer to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_create_for-user.html">Creating a Role to Delegate Permissions to an IAM User (write only)</a>
type AwAssumeRoleAuthenticationDetailsProperties struct {
	// Connect to your cloud account, for AWS use either account credentials or role-based authentication. For GCP use account organization credentials.
	AuthenticationType string `pulumi:"authenticationType"`
	// Assumed role ID is an identifier that you can use to create temporary security credentials.
	AwsAssumeRoleArn string `pulumi:"awsAssumeRoleArn"`
	// A unique identifier that is required when you assume a role in another account.
	AwsExternalId string `pulumi:"awsExternalId"`
}

// AwAssumeRoleAuthenticationDetailsPropertiesInput is an input type that accepts AwAssumeRoleAuthenticationDetailsPropertiesArgs and AwAssumeRoleAuthenticationDetailsPropertiesOutput values.
// You can construct a concrete instance of `AwAssumeRoleAuthenticationDetailsPropertiesInput` via:
//
//          AwAssumeRoleAuthenticationDetailsPropertiesArgs{...}
type AwAssumeRoleAuthenticationDetailsPropertiesInput interface {
	pulumi.Input

	ToAwAssumeRoleAuthenticationDetailsPropertiesOutput() AwAssumeRoleAuthenticationDetailsPropertiesOutput
	ToAwAssumeRoleAuthenticationDetailsPropertiesOutputWithContext(context.Context) AwAssumeRoleAuthenticationDetailsPropertiesOutput
}

// AWS cloud account connector based assume role, the role enables delegating access to your AWS resources. The role is composed of role arn and external id, for more details, refer to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_create_for-user.html">Creating a Role to Delegate Permissions to an IAM User (write only)</a>
type AwAssumeRoleAuthenticationDetailsPropertiesArgs struct {
	// Connect to your cloud account, for AWS use either account credentials or role-based authentication. For GCP use account organization credentials.
	AuthenticationType pulumi.StringInput `pulumi:"authenticationType"`
	// Assumed role ID is an identifier that you can use to create temporary security credentials.
	AwsAssumeRoleArn pulumi.StringInput `pulumi:"awsAssumeRoleArn"`
	// A unique identifier that is required when you assume a role in another account.
	AwsExternalId pulumi.StringInput `pulumi:"awsExternalId"`
}

func (AwAssumeRoleAuthenticationDetailsPropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AwAssumeRoleAuthenticationDetailsProperties)(nil)).Elem()
}

func (i AwAssumeRoleAuthenticationDetailsPropertiesArgs) ToAwAssumeRoleAuthenticationDetailsPropertiesOutput() AwAssumeRoleAuthenticationDetailsPropertiesOutput {
	return i.ToAwAssumeRoleAuthenticationDetailsPropertiesOutputWithContext(context.Background())
}

func (i AwAssumeRoleAuthenticationDetailsPropertiesArgs) ToAwAssumeRoleAuthenticationDetailsPropertiesOutputWithContext(ctx context.Context) AwAssumeRoleAuthenticationDetailsPropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AwAssumeRoleAuthenticationDetailsPropertiesOutput)
}

// AWS cloud account connector based assume role, the role enables delegating access to your AWS resources. The role is composed of role arn and external id, for more details, refer to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_create_for-user.html">Creating a Role to Delegate Permissions to an IAM User (write only)</a>
type AwAssumeRoleAuthenticationDetailsPropertiesResponse struct {
	// The ID of the cloud account
	AccountId string `pulumi:"accountId"`
	// State of the multi-cloud connector
	AuthenticationProvisioningState string `pulumi:"authenticationProvisioningState"`
	// Connect to your cloud account, for AWS use either account credentials or role-based authentication. For GCP use account organization credentials.
	AuthenticationType string `pulumi:"authenticationType"`
	// Assumed role ID is an identifier that you can use to create temporary security credentials.
	AwsAssumeRoleArn string `pulumi:"awsAssumeRoleArn"`
	// A unique identifier that is required when you assume a role in another account.
	AwsExternalId string `pulumi:"awsExternalId"`
	// The permissions detected in the cloud account.
	GrantedPermissions []string `pulumi:"grantedPermissions"`
}

// AWS cloud account connector based assume role, the role enables delegating access to your AWS resources. The role is composed of role arn and external id, for more details, refer to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_create_for-user.html">Creating a Role to Delegate Permissions to an IAM User (write only)</a>
type AwAssumeRoleAuthenticationDetailsPropertiesResponseOutput struct{ *pulumi.OutputState }

func (AwAssumeRoleAuthenticationDetailsPropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AwAssumeRoleAuthenticationDetailsPropertiesResponse)(nil)).Elem()
}

func (o AwAssumeRoleAuthenticationDetailsPropertiesResponseOutput) ToAwAssumeRoleAuthenticationDetailsPropertiesResponseOutput() AwAssumeRoleAuthenticationDetailsPropertiesResponseOutput {
	return o
}

func (o AwAssumeRoleAuthenticationDetailsPropertiesResponseOutput) ToAwAssumeRoleAuthenticationDetailsPropertiesResponseOutputWithContext(ctx context.Context) AwAssumeRoleAuthenticationDetailsPropertiesResponseOutput {
	return o
}

// The ID of the cloud account
func (o AwAssumeRoleAuthenticationDetailsPropertiesResponseOutput) AccountId() pulumi.StringOutput {
	return o.ApplyT(func(v AwAssumeRoleAuthenticationDetailsPropertiesResponse) string { return v.AccountId }).(pulumi.StringOutput)
}

// State of the multi-cloud connector
func (o AwAssumeRoleAuthenticationDetailsPropertiesResponseOutput) AuthenticationProvisioningState() pulumi.StringOutput {
	return o.ApplyT(func(v AwAssumeRoleAuthenticationDetailsPropertiesResponse) string {
		return v.AuthenticationProvisioningState
	}).(pulumi.StringOutput)
}

// Connect to your cloud account, for AWS use either account credentials or role-based authentication. For GCP use account organization credentials.
func (o AwAssumeRoleAuthenticationDetailsPropertiesResponseOutput) AuthenticationType() pulumi.StringOutput {
	return o.ApplyT(func(v AwAssumeRoleAuthenticationDetailsPropertiesResponse) string { return v.AuthenticationType }).(pulumi.StringOutput)
}

// Assumed role ID is an identifier that you can use to create temporary security credentials.
func (o AwAssumeRoleAuthenticationDetailsPropertiesResponseOutput) AwsAssumeRoleArn() pulumi.StringOutput {
	return o.ApplyT(func(v AwAssumeRoleAuthenticationDetailsPropertiesResponse) string { return v.AwsAssumeRoleArn }).(pulumi.StringOutput)
}

// A unique identifier that is required when you assume a role in another account.
func (o AwAssumeRoleAuthenticationDetailsPropertiesResponseOutput) AwsExternalId() pulumi.StringOutput {
	return o.ApplyT(func(v AwAssumeRoleAuthenticationDetailsPropertiesResponse) string { return v.AwsExternalId }).(pulumi.StringOutput)
}

// The permissions detected in the cloud account.
func (o AwAssumeRoleAuthenticationDetailsPropertiesResponseOutput) GrantedPermissions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v AwAssumeRoleAuthenticationDetailsPropertiesResponse) []string { return v.GrantedPermissions }).(pulumi.StringArrayOutput)
}

// AWS cloud account connector based credentials, the credentials is composed of access key id and secret key, for more details, refer to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_users_create.html">Creating an IAM User in Your AWS Account (write only)</a>
type AwsCredsAuthenticationDetailsProperties struct {
	// Connect to your cloud account, for AWS use either account credentials or role-based authentication. For GCP use account organization credentials.
	AuthenticationType string `pulumi:"authenticationType"`
	// Public key element of the AWS credential object (write only)
	AwsAccessKeyId string `pulumi:"awsAccessKeyId"`
	// Secret key element of the AWS credential object (write only)
	AwsSecretAccessKey string `pulumi:"awsSecretAccessKey"`
}

// AwsCredsAuthenticationDetailsPropertiesInput is an input type that accepts AwsCredsAuthenticationDetailsPropertiesArgs and AwsCredsAuthenticationDetailsPropertiesOutput values.
// You can construct a concrete instance of `AwsCredsAuthenticationDetailsPropertiesInput` via:
//
//          AwsCredsAuthenticationDetailsPropertiesArgs{...}
type AwsCredsAuthenticationDetailsPropertiesInput interface {
	pulumi.Input

	ToAwsCredsAuthenticationDetailsPropertiesOutput() AwsCredsAuthenticationDetailsPropertiesOutput
	ToAwsCredsAuthenticationDetailsPropertiesOutputWithContext(context.Context) AwsCredsAuthenticationDetailsPropertiesOutput
}

// AWS cloud account connector based credentials, the credentials is composed of access key id and secret key, for more details, refer to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_users_create.html">Creating an IAM User in Your AWS Account (write only)</a>
type AwsCredsAuthenticationDetailsPropertiesArgs struct {
	// Connect to your cloud account, for AWS use either account credentials or role-based authentication. For GCP use account organization credentials.
	AuthenticationType pulumi.StringInput `pulumi:"authenticationType"`
	// Public key element of the AWS credential object (write only)
	AwsAccessKeyId pulumi.StringInput `pulumi:"awsAccessKeyId"`
	// Secret key element of the AWS credential object (write only)
	AwsSecretAccessKey pulumi.StringInput `pulumi:"awsSecretAccessKey"`
}

func (AwsCredsAuthenticationDetailsPropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AwsCredsAuthenticationDetailsProperties)(nil)).Elem()
}

func (i AwsCredsAuthenticationDetailsPropertiesArgs) ToAwsCredsAuthenticationDetailsPropertiesOutput() AwsCredsAuthenticationDetailsPropertiesOutput {
	return i.ToAwsCredsAuthenticationDetailsPropertiesOutputWithContext(context.Background())
}

func (i AwsCredsAuthenticationDetailsPropertiesArgs) ToAwsCredsAuthenticationDetailsPropertiesOutputWithContext(ctx context.Context) AwsCredsAuthenticationDetailsPropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AwsCredsAuthenticationDetailsPropertiesOutput)
}

// AWS cloud account connector based credentials, the credentials is composed of access key id and secret key, for more details, refer to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_users_create.html">Creating an IAM User in Your AWS Account (write only)</a>
type AwsCredsAuthenticationDetailsPropertiesResponse struct {
	// The ID of the cloud account
	AccountId string `pulumi:"accountId"`
	// State of the multi-cloud connector
	AuthenticationProvisioningState string `pulumi:"authenticationProvisioningState"`
	// Connect to your cloud account, for AWS use either account credentials or role-based authentication. For GCP use account organization credentials.
	AuthenticationType string `pulumi:"authenticationType"`
	// Public key element of the AWS credential object (write only)
	AwsAccessKeyId string `pulumi:"awsAccessKeyId"`
	// Secret key element of the AWS credential object (write only)
	AwsSecretAccessKey string `pulumi:"awsSecretAccessKey"`
	// The permissions detected in the cloud account.
	GrantedPermissions []string `pulumi:"grantedPermissions"`
}

// AWS cloud account connector based credentials, the credentials is composed of access key id and secret key, for more details, refer to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_users_create.html">Creating an IAM User in Your AWS Account (write only)</a>
type AwsCredsAuthenticationDetailsPropertiesResponseOutput struct{ *pulumi.OutputState }

func (AwsCredsAuthenticationDetailsPropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AwsCredsAuthenticationDetailsPropertiesResponse)(nil)).Elem()
}

func (o AwsCredsAuthenticationDetailsPropertiesResponseOutput) ToAwsCredsAuthenticationDetailsPropertiesResponseOutput() AwsCredsAuthenticationDetailsPropertiesResponseOutput {
	return o
}

func (o AwsCredsAuthenticationDetailsPropertiesResponseOutput) ToAwsCredsAuthenticationDetailsPropertiesResponseOutputWithContext(ctx context.Context) AwsCredsAuthenticationDetailsPropertiesResponseOutput {
	return o
}

// The ID of the cloud account
func (o AwsCredsAuthenticationDetailsPropertiesResponseOutput) AccountId() pulumi.StringOutput {
	return o.ApplyT(func(v AwsCredsAuthenticationDetailsPropertiesResponse) string { return v.AccountId }).(pulumi.StringOutput)
}

// State of the multi-cloud connector
func (o AwsCredsAuthenticationDetailsPropertiesResponseOutput) AuthenticationProvisioningState() pulumi.StringOutput {
	return o.ApplyT(func(v AwsCredsAuthenticationDetailsPropertiesResponse) string {
		return v.AuthenticationProvisioningState
	}).(pulumi.StringOutput)
}

// Connect to your cloud account, for AWS use either account credentials or role-based authentication. For GCP use account organization credentials.
func (o AwsCredsAuthenticationDetailsPropertiesResponseOutput) AuthenticationType() pulumi.StringOutput {
	return o.ApplyT(func(v AwsCredsAuthenticationDetailsPropertiesResponse) string { return v.AuthenticationType }).(pulumi.StringOutput)
}

// Public key element of the AWS credential object (write only)
func (o AwsCredsAuthenticationDetailsPropertiesResponseOutput) AwsAccessKeyId() pulumi.StringOutput {
	return o.ApplyT(func(v AwsCredsAuthenticationDetailsPropertiesResponse) string { return v.AwsAccessKeyId }).(pulumi.StringOutput)
}

// Secret key element of the AWS credential object (write only)
func (o AwsCredsAuthenticationDetailsPropertiesResponseOutput) AwsSecretAccessKey() pulumi.StringOutput {
	return o.ApplyT(func(v AwsCredsAuthenticationDetailsPropertiesResponse) string { return v.AwsSecretAccessKey }).(pulumi.StringOutput)
}

// The permissions detected in the cloud account.
func (o AwsCredsAuthenticationDetailsPropertiesResponseOutput) GrantedPermissions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v AwsCredsAuthenticationDetailsPropertiesResponse) []string { return v.GrantedPermissions }).(pulumi.StringArrayOutput)
}

// GCP cloud account connector based service to service credentials, the credentials is composed of organization id and json api key (write only)</a>
type GcpCredentialsDetailsProperties struct {
	// Auth provider x509 certificate url field of the API key (write only)
	AuthProviderX509CertUrl string `pulumi:"authProviderX509CertUrl"`
	// Auth Uri field of the API key (write only)
	AuthUri string `pulumi:"authUri"`
	// Connect to your cloud account, for AWS use either account credentials or role-based authentication. For GCP use account organization credentials.
	AuthenticationType string `pulumi:"authenticationType"`
	// Client email field of the API key (write only)
	ClientEmail string `pulumi:"clientEmail"`
	// Client Id field of the API key (write only)
	ClientId string `pulumi:"clientId"`
	// Client x509 certificate url field of the API key (write only)
	ClientX509CertUrl string `pulumi:"clientX509CertUrl"`
	// The Organization ID of the GCP cloud account
	OrganizationId string `pulumi:"organizationId"`
	// Private key field of the API key (write only)
	PrivateKey string `pulumi:"privateKey"`
	// Private key Id field of the API key (write only)
	PrivateKeyId string `pulumi:"privateKeyId"`
	// Project Id field of the API key (write only)
	ProjectId string `pulumi:"projectId"`
	// Token Uri field of the API key (write only)
	TokenUri string `pulumi:"tokenUri"`
	// Type field of the API key (write only)
	Type string `pulumi:"type"`
}

// GcpCredentialsDetailsPropertiesInput is an input type that accepts GcpCredentialsDetailsPropertiesArgs and GcpCredentialsDetailsPropertiesOutput values.
// You can construct a concrete instance of `GcpCredentialsDetailsPropertiesInput` via:
//
//          GcpCredentialsDetailsPropertiesArgs{...}
type GcpCredentialsDetailsPropertiesInput interface {
	pulumi.Input

	ToGcpCredentialsDetailsPropertiesOutput() GcpCredentialsDetailsPropertiesOutput
	ToGcpCredentialsDetailsPropertiesOutputWithContext(context.Context) GcpCredentialsDetailsPropertiesOutput
}

// GCP cloud account connector based service to service credentials, the credentials is composed of organization id and json api key (write only)</a>
type GcpCredentialsDetailsPropertiesArgs struct {
	// Auth provider x509 certificate url field of the API key (write only)
	AuthProviderX509CertUrl pulumi.StringInput `pulumi:"authProviderX509CertUrl"`
	// Auth Uri field of the API key (write only)
	AuthUri pulumi.StringInput `pulumi:"authUri"`
	// Connect to your cloud account, for AWS use either account credentials or role-based authentication. For GCP use account organization credentials.
	AuthenticationType pulumi.StringInput `pulumi:"authenticationType"`
	// Client email field of the API key (write only)
	ClientEmail pulumi.StringInput `pulumi:"clientEmail"`
	// Client Id field of the API key (write only)
	ClientId pulumi.StringInput `pulumi:"clientId"`
	// Client x509 certificate url field of the API key (write only)
	ClientX509CertUrl pulumi.StringInput `pulumi:"clientX509CertUrl"`
	// The Organization ID of the GCP cloud account
	OrganizationId pulumi.StringInput `pulumi:"organizationId"`
	// Private key field of the API key (write only)
	PrivateKey pulumi.StringInput `pulumi:"privateKey"`
	// Private key Id field of the API key (write only)
	PrivateKeyId pulumi.StringInput `pulumi:"privateKeyId"`
	// Project Id field of the API key (write only)
	ProjectId pulumi.StringInput `pulumi:"projectId"`
	// Token Uri field of the API key (write only)
	TokenUri pulumi.StringInput `pulumi:"tokenUri"`
	// Type field of the API key (write only)
	Type pulumi.StringInput `pulumi:"type"`
}

func (GcpCredentialsDetailsPropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GcpCredentialsDetailsProperties)(nil)).Elem()
}

func (i GcpCredentialsDetailsPropertiesArgs) ToGcpCredentialsDetailsPropertiesOutput() GcpCredentialsDetailsPropertiesOutput {
	return i.ToGcpCredentialsDetailsPropertiesOutputWithContext(context.Background())
}

func (i GcpCredentialsDetailsPropertiesArgs) ToGcpCredentialsDetailsPropertiesOutputWithContext(ctx context.Context) GcpCredentialsDetailsPropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GcpCredentialsDetailsPropertiesOutput)
}

// GCP cloud account connector based service to service credentials, the credentials is composed of organization id and json api key (write only)</a>
type GcpCredentialsDetailsPropertiesResponse struct {
	// Auth provider x509 certificate url field of the API key (write only)
	AuthProviderX509CertUrl string `pulumi:"authProviderX509CertUrl"`
	// Auth Uri field of the API key (write only)
	AuthUri string `pulumi:"authUri"`
	// State of the multi-cloud connector
	AuthenticationProvisioningState string `pulumi:"authenticationProvisioningState"`
	// Connect to your cloud account, for AWS use either account credentials or role-based authentication. For GCP use account organization credentials.
	AuthenticationType string `pulumi:"authenticationType"`
	// Client email field of the API key (write only)
	ClientEmail string `pulumi:"clientEmail"`
	// Client Id field of the API key (write only)
	ClientId string `pulumi:"clientId"`
	// Client x509 certificate url field of the API key (write only)
	ClientX509CertUrl string `pulumi:"clientX509CertUrl"`
	// The permissions detected in the cloud account.
	GrantedPermissions []string `pulumi:"grantedPermissions"`
	// The Organization ID of the GCP cloud account
	OrganizationId string `pulumi:"organizationId"`
	// Private key field of the API key (write only)
	PrivateKey string `pulumi:"privateKey"`
	// Private key Id field of the API key (write only)
	PrivateKeyId string `pulumi:"privateKeyId"`
	// Project Id field of the API key (write only)
	ProjectId string `pulumi:"projectId"`
	// Token Uri field of the API key (write only)
	TokenUri string `pulumi:"tokenUri"`
	// Type field of the API key (write only)
	Type string `pulumi:"type"`
}

// GCP cloud account connector based service to service credentials, the credentials is composed of organization id and json api key (write only)</a>
type GcpCredentialsDetailsPropertiesResponseOutput struct{ *pulumi.OutputState }

func (GcpCredentialsDetailsPropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GcpCredentialsDetailsPropertiesResponse)(nil)).Elem()
}

func (o GcpCredentialsDetailsPropertiesResponseOutput) ToGcpCredentialsDetailsPropertiesResponseOutput() GcpCredentialsDetailsPropertiesResponseOutput {
	return o
}

func (o GcpCredentialsDetailsPropertiesResponseOutput) ToGcpCredentialsDetailsPropertiesResponseOutputWithContext(ctx context.Context) GcpCredentialsDetailsPropertiesResponseOutput {
	return o
}

// Auth provider x509 certificate url field of the API key (write only)
func (o GcpCredentialsDetailsPropertiesResponseOutput) AuthProviderX509CertUrl() pulumi.StringOutput {
	return o.ApplyT(func(v GcpCredentialsDetailsPropertiesResponse) string { return v.AuthProviderX509CertUrl }).(pulumi.StringOutput)
}

// Auth Uri field of the API key (write only)
func (o GcpCredentialsDetailsPropertiesResponseOutput) AuthUri() pulumi.StringOutput {
	return o.ApplyT(func(v GcpCredentialsDetailsPropertiesResponse) string { return v.AuthUri }).(pulumi.StringOutput)
}

// State of the multi-cloud connector
func (o GcpCredentialsDetailsPropertiesResponseOutput) AuthenticationProvisioningState() pulumi.StringOutput {
	return o.ApplyT(func(v GcpCredentialsDetailsPropertiesResponse) string { return v.AuthenticationProvisioningState }).(pulumi.StringOutput)
}

// Connect to your cloud account, for AWS use either account credentials or role-based authentication. For GCP use account organization credentials.
func (o GcpCredentialsDetailsPropertiesResponseOutput) AuthenticationType() pulumi.StringOutput {
	return o.ApplyT(func(v GcpCredentialsDetailsPropertiesResponse) string { return v.AuthenticationType }).(pulumi.StringOutput)
}

// Client email field of the API key (write only)
func (o GcpCredentialsDetailsPropertiesResponseOutput) ClientEmail() pulumi.StringOutput {
	return o.ApplyT(func(v GcpCredentialsDetailsPropertiesResponse) string { return v.ClientEmail }).(pulumi.StringOutput)
}

// Client Id field of the API key (write only)
func (o GcpCredentialsDetailsPropertiesResponseOutput) ClientId() pulumi.StringOutput {
	return o.ApplyT(func(v GcpCredentialsDetailsPropertiesResponse) string { return v.ClientId }).(pulumi.StringOutput)
}

// Client x509 certificate url field of the API key (write only)
func (o GcpCredentialsDetailsPropertiesResponseOutput) ClientX509CertUrl() pulumi.StringOutput {
	return o.ApplyT(func(v GcpCredentialsDetailsPropertiesResponse) string { return v.ClientX509CertUrl }).(pulumi.StringOutput)
}

// The permissions detected in the cloud account.
func (o GcpCredentialsDetailsPropertiesResponseOutput) GrantedPermissions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GcpCredentialsDetailsPropertiesResponse) []string { return v.GrantedPermissions }).(pulumi.StringArrayOutput)
}

// The Organization ID of the GCP cloud account
func (o GcpCredentialsDetailsPropertiesResponseOutput) OrganizationId() pulumi.StringOutput {
	return o.ApplyT(func(v GcpCredentialsDetailsPropertiesResponse) string { return v.OrganizationId }).(pulumi.StringOutput)
}

// Private key field of the API key (write only)
func (o GcpCredentialsDetailsPropertiesResponseOutput) PrivateKey() pulumi.StringOutput {
	return o.ApplyT(func(v GcpCredentialsDetailsPropertiesResponse) string { return v.PrivateKey }).(pulumi.StringOutput)
}

// Private key Id field of the API key (write only)
func (o GcpCredentialsDetailsPropertiesResponseOutput) PrivateKeyId() pulumi.StringOutput {
	return o.ApplyT(func(v GcpCredentialsDetailsPropertiesResponse) string { return v.PrivateKeyId }).(pulumi.StringOutput)
}

// Project Id field of the API key (write only)
func (o GcpCredentialsDetailsPropertiesResponseOutput) ProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v GcpCredentialsDetailsPropertiesResponse) string { return v.ProjectId }).(pulumi.StringOutput)
}

// Token Uri field of the API key (write only)
func (o GcpCredentialsDetailsPropertiesResponseOutput) TokenUri() pulumi.StringOutput {
	return o.ApplyT(func(v GcpCredentialsDetailsPropertiesResponse) string { return v.TokenUri }).(pulumi.StringOutput)
}

// Type field of the API key (write only)
func (o GcpCredentialsDetailsPropertiesResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v GcpCredentialsDetailsPropertiesResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Settings for hybrid compute management
type HybridComputeSettingsProperties struct {
	// Whether or not to automatically install Azure Arc (hybrid compute) agents on machines
	AutoProvision string `pulumi:"autoProvision"`
	// For a non-Azure machine that is not connected directly to the internet, specify a proxy server that the non-Azure machine can use.
	ProxyServer *ProxyServerProperties `pulumi:"proxyServer"`
	// The location where the meta data of machines will be stored
	Region *string `pulumi:"region"`
	// The name of the resource group where Arc (Hybrid Compute) connectors are connected.
	ResourceGroupName *string `pulumi:"resourceGroupName"`
	// An object to access resources that are secured by an Azure AD tenant.
	ServicePrincipal *ServicePrincipalProperties `pulumi:"servicePrincipal"`
}

// HybridComputeSettingsPropertiesInput is an input type that accepts HybridComputeSettingsPropertiesArgs and HybridComputeSettingsPropertiesOutput values.
// You can construct a concrete instance of `HybridComputeSettingsPropertiesInput` via:
//
//          HybridComputeSettingsPropertiesArgs{...}
type HybridComputeSettingsPropertiesInput interface {
	pulumi.Input

	ToHybridComputeSettingsPropertiesOutput() HybridComputeSettingsPropertiesOutput
	ToHybridComputeSettingsPropertiesOutputWithContext(context.Context) HybridComputeSettingsPropertiesOutput
}

// Settings for hybrid compute management
type HybridComputeSettingsPropertiesArgs struct {
	// Whether or not to automatically install Azure Arc (hybrid compute) agents on machines
	AutoProvision pulumi.StringInput `pulumi:"autoProvision"`
	// For a non-Azure machine that is not connected directly to the internet, specify a proxy server that the non-Azure machine can use.
	ProxyServer ProxyServerPropertiesPtrInput `pulumi:"proxyServer"`
	// The location where the meta data of machines will be stored
	Region pulumi.StringPtrInput `pulumi:"region"`
	// The name of the resource group where Arc (Hybrid Compute) connectors are connected.
	ResourceGroupName pulumi.StringPtrInput `pulumi:"resourceGroupName"`
	// An object to access resources that are secured by an Azure AD tenant.
	ServicePrincipal ServicePrincipalPropertiesPtrInput `pulumi:"servicePrincipal"`
}

func (HybridComputeSettingsPropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HybridComputeSettingsProperties)(nil)).Elem()
}

func (i HybridComputeSettingsPropertiesArgs) ToHybridComputeSettingsPropertiesOutput() HybridComputeSettingsPropertiesOutput {
	return i.ToHybridComputeSettingsPropertiesOutputWithContext(context.Background())
}

func (i HybridComputeSettingsPropertiesArgs) ToHybridComputeSettingsPropertiesOutputWithContext(ctx context.Context) HybridComputeSettingsPropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HybridComputeSettingsPropertiesOutput)
}

func (i HybridComputeSettingsPropertiesArgs) ToHybridComputeSettingsPropertiesPtrOutput() HybridComputeSettingsPropertiesPtrOutput {
	return i.ToHybridComputeSettingsPropertiesPtrOutputWithContext(context.Background())
}

func (i HybridComputeSettingsPropertiesArgs) ToHybridComputeSettingsPropertiesPtrOutputWithContext(ctx context.Context) HybridComputeSettingsPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HybridComputeSettingsPropertiesOutput).ToHybridComputeSettingsPropertiesPtrOutputWithContext(ctx)
}

// HybridComputeSettingsPropertiesPtrInput is an input type that accepts HybridComputeSettingsPropertiesArgs, HybridComputeSettingsPropertiesPtr and HybridComputeSettingsPropertiesPtrOutput values.
// You can construct a concrete instance of `HybridComputeSettingsPropertiesPtrInput` via:
//
//          HybridComputeSettingsPropertiesArgs{...}
//
//  or:
//
//          nil
type HybridComputeSettingsPropertiesPtrInput interface {
	pulumi.Input

	ToHybridComputeSettingsPropertiesPtrOutput() HybridComputeSettingsPropertiesPtrOutput
	ToHybridComputeSettingsPropertiesPtrOutputWithContext(context.Context) HybridComputeSettingsPropertiesPtrOutput
}

type hybridComputeSettingsPropertiesPtrType HybridComputeSettingsPropertiesArgs

func HybridComputeSettingsPropertiesPtr(v *HybridComputeSettingsPropertiesArgs) HybridComputeSettingsPropertiesPtrInput {
	return (*hybridComputeSettingsPropertiesPtrType)(v)
}

func (*hybridComputeSettingsPropertiesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**HybridComputeSettingsProperties)(nil)).Elem()
}

func (i *hybridComputeSettingsPropertiesPtrType) ToHybridComputeSettingsPropertiesPtrOutput() HybridComputeSettingsPropertiesPtrOutput {
	return i.ToHybridComputeSettingsPropertiesPtrOutputWithContext(context.Background())
}

func (i *hybridComputeSettingsPropertiesPtrType) ToHybridComputeSettingsPropertiesPtrOutputWithContext(ctx context.Context) HybridComputeSettingsPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HybridComputeSettingsPropertiesPtrOutput)
}

// Settings for hybrid compute management
type HybridComputeSettingsPropertiesResponse struct {
	// Whether or not to automatically install Azure Arc (hybrid compute) agents on machines
	AutoProvision string `pulumi:"autoProvision"`
	// State of the service principal and its secret
	HybridComputeProvisioningState string `pulumi:"hybridComputeProvisioningState"`
	// For a non-Azure machine that is not connected directly to the internet, specify a proxy server that the non-Azure machine can use.
	ProxyServer *ProxyServerPropertiesResponse `pulumi:"proxyServer"`
	// The location where the meta data of machines will be stored
	Region *string `pulumi:"region"`
	// The name of the resource group where Arc (Hybrid Compute) connectors are connected.
	ResourceGroupName *string `pulumi:"resourceGroupName"`
	// An object to access resources that are secured by an Azure AD tenant.
	ServicePrincipal *ServicePrincipalPropertiesResponse `pulumi:"servicePrincipal"`
}

// Settings for hybrid compute management
type HybridComputeSettingsPropertiesResponseOutput struct{ *pulumi.OutputState }

func (HybridComputeSettingsPropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HybridComputeSettingsPropertiesResponse)(nil)).Elem()
}

func (o HybridComputeSettingsPropertiesResponseOutput) ToHybridComputeSettingsPropertiesResponseOutput() HybridComputeSettingsPropertiesResponseOutput {
	return o
}

func (o HybridComputeSettingsPropertiesResponseOutput) ToHybridComputeSettingsPropertiesResponseOutputWithContext(ctx context.Context) HybridComputeSettingsPropertiesResponseOutput {
	return o
}

func (o HybridComputeSettingsPropertiesResponseOutput) ToHybridComputeSettingsPropertiesResponsePtrOutput() HybridComputeSettingsPropertiesResponsePtrOutput {
	return o.ToHybridComputeSettingsPropertiesResponsePtrOutputWithContext(context.Background())
}

func (o HybridComputeSettingsPropertiesResponseOutput) ToHybridComputeSettingsPropertiesResponsePtrOutputWithContext(ctx context.Context) HybridComputeSettingsPropertiesResponsePtrOutput {
	return o.ApplyT(func(v HybridComputeSettingsPropertiesResponse) *HybridComputeSettingsPropertiesResponse {
		return &v
	}).(HybridComputeSettingsPropertiesResponsePtrOutput)
}

// Whether or not to automatically install Azure Arc (hybrid compute) agents on machines
func (o HybridComputeSettingsPropertiesResponseOutput) AutoProvision() pulumi.StringOutput {
	return o.ApplyT(func(v HybridComputeSettingsPropertiesResponse) string { return v.AutoProvision }).(pulumi.StringOutput)
}

// State of the service principal and its secret
func (o HybridComputeSettingsPropertiesResponseOutput) HybridComputeProvisioningState() pulumi.StringOutput {
	return o.ApplyT(func(v HybridComputeSettingsPropertiesResponse) string { return v.HybridComputeProvisioningState }).(pulumi.StringOutput)
}

// For a non-Azure machine that is not connected directly to the internet, specify a proxy server that the non-Azure machine can use.
func (o HybridComputeSettingsPropertiesResponseOutput) ProxyServer() ProxyServerPropertiesResponsePtrOutput {
	return o.ApplyT(func(v HybridComputeSettingsPropertiesResponse) *ProxyServerPropertiesResponse { return v.ProxyServer }).(ProxyServerPropertiesResponsePtrOutput)
}

// The location where the meta data of machines will be stored
func (o HybridComputeSettingsPropertiesResponseOutput) Region() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HybridComputeSettingsPropertiesResponse) *string { return v.Region }).(pulumi.StringPtrOutput)
}

// The name of the resource group where Arc (Hybrid Compute) connectors are connected.
func (o HybridComputeSettingsPropertiesResponseOutput) ResourceGroupName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HybridComputeSettingsPropertiesResponse) *string { return v.ResourceGroupName }).(pulumi.StringPtrOutput)
}

// An object to access resources that are secured by an Azure AD tenant.
func (o HybridComputeSettingsPropertiesResponseOutput) ServicePrincipal() ServicePrincipalPropertiesResponsePtrOutput {
	return o.ApplyT(func(v HybridComputeSettingsPropertiesResponse) *ServicePrincipalPropertiesResponse {
		return v.ServicePrincipal
	}).(ServicePrincipalPropertiesResponsePtrOutput)
}

type HybridComputeSettingsPropertiesResponsePtrOutput struct{ *pulumi.OutputState }

func (HybridComputeSettingsPropertiesResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**HybridComputeSettingsPropertiesResponse)(nil)).Elem()
}

func (o HybridComputeSettingsPropertiesResponsePtrOutput) ToHybridComputeSettingsPropertiesResponsePtrOutput() HybridComputeSettingsPropertiesResponsePtrOutput {
	return o
}

func (o HybridComputeSettingsPropertiesResponsePtrOutput) ToHybridComputeSettingsPropertiesResponsePtrOutputWithContext(ctx context.Context) HybridComputeSettingsPropertiesResponsePtrOutput {
	return o
}

func (o HybridComputeSettingsPropertiesResponsePtrOutput) Elem() HybridComputeSettingsPropertiesResponseOutput {
	return o.ApplyT(func(v *HybridComputeSettingsPropertiesResponse) HybridComputeSettingsPropertiesResponse { return *v }).(HybridComputeSettingsPropertiesResponseOutput)
}

// Whether or not to automatically install Azure Arc (hybrid compute) agents on machines
func (o HybridComputeSettingsPropertiesResponsePtrOutput) AutoProvision() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HybridComputeSettingsPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return &v.AutoProvision
	}).(pulumi.StringPtrOutput)
}

// State of the service principal and its secret
func (o HybridComputeSettingsPropertiesResponsePtrOutput) HybridComputeProvisioningState() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HybridComputeSettingsPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return &v.HybridComputeProvisioningState
	}).(pulumi.StringPtrOutput)
}

// For a non-Azure machine that is not connected directly to the internet, specify a proxy server that the non-Azure machine can use.
func (o HybridComputeSettingsPropertiesResponsePtrOutput) ProxyServer() ProxyServerPropertiesResponsePtrOutput {
	return o.ApplyT(func(v *HybridComputeSettingsPropertiesResponse) *ProxyServerPropertiesResponse {
		if v == nil {
			return nil
		}
		return v.ProxyServer
	}).(ProxyServerPropertiesResponsePtrOutput)
}

// The location where the meta data of machines will be stored
func (o HybridComputeSettingsPropertiesResponsePtrOutput) Region() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HybridComputeSettingsPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return v.Region
	}).(pulumi.StringPtrOutput)
}

// The name of the resource group where Arc (Hybrid Compute) connectors are connected.
func (o HybridComputeSettingsPropertiesResponsePtrOutput) ResourceGroupName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HybridComputeSettingsPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return v.ResourceGroupName
	}).(pulumi.StringPtrOutput)
}

// An object to access resources that are secured by an Azure AD tenant.
func (o HybridComputeSettingsPropertiesResponsePtrOutput) ServicePrincipal() ServicePrincipalPropertiesResponsePtrOutput {
	return o.ApplyT(func(v *HybridComputeSettingsPropertiesResponse) *ServicePrincipalPropertiesResponse {
		if v == nil {
			return nil
		}
		return v.ServicePrincipal
	}).(ServicePrincipalPropertiesResponsePtrOutput)
}

// For a non-Azure machine that is not connected directly to the internet, specify a proxy server that the non-Azure machine can use.
type ProxyServerProperties struct {
	// Proxy server IP
	Ip *string `pulumi:"ip"`
	// Proxy server port
	Port *string `pulumi:"port"`
}

// ProxyServerPropertiesInput is an input type that accepts ProxyServerPropertiesArgs and ProxyServerPropertiesOutput values.
// You can construct a concrete instance of `ProxyServerPropertiesInput` via:
//
//          ProxyServerPropertiesArgs{...}
type ProxyServerPropertiesInput interface {
	pulumi.Input

	ToProxyServerPropertiesOutput() ProxyServerPropertiesOutput
	ToProxyServerPropertiesOutputWithContext(context.Context) ProxyServerPropertiesOutput
}

// For a non-Azure machine that is not connected directly to the internet, specify a proxy server that the non-Azure machine can use.
type ProxyServerPropertiesArgs struct {
	// Proxy server IP
	Ip pulumi.StringPtrInput `pulumi:"ip"`
	// Proxy server port
	Port pulumi.StringPtrInput `pulumi:"port"`
}

func (ProxyServerPropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ProxyServerProperties)(nil)).Elem()
}

func (i ProxyServerPropertiesArgs) ToProxyServerPropertiesOutput() ProxyServerPropertiesOutput {
	return i.ToProxyServerPropertiesOutputWithContext(context.Background())
}

func (i ProxyServerPropertiesArgs) ToProxyServerPropertiesOutputWithContext(ctx context.Context) ProxyServerPropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProxyServerPropertiesOutput)
}

func (i ProxyServerPropertiesArgs) ToProxyServerPropertiesPtrOutput() ProxyServerPropertiesPtrOutput {
	return i.ToProxyServerPropertiesPtrOutputWithContext(context.Background())
}

func (i ProxyServerPropertiesArgs) ToProxyServerPropertiesPtrOutputWithContext(ctx context.Context) ProxyServerPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProxyServerPropertiesOutput).ToProxyServerPropertiesPtrOutputWithContext(ctx)
}

// ProxyServerPropertiesPtrInput is an input type that accepts ProxyServerPropertiesArgs, ProxyServerPropertiesPtr and ProxyServerPropertiesPtrOutput values.
// You can construct a concrete instance of `ProxyServerPropertiesPtrInput` via:
//
//          ProxyServerPropertiesArgs{...}
//
//  or:
//
//          nil
type ProxyServerPropertiesPtrInput interface {
	pulumi.Input

	ToProxyServerPropertiesPtrOutput() ProxyServerPropertiesPtrOutput
	ToProxyServerPropertiesPtrOutputWithContext(context.Context) ProxyServerPropertiesPtrOutput
}

type proxyServerPropertiesPtrType ProxyServerPropertiesArgs

func ProxyServerPropertiesPtr(v *ProxyServerPropertiesArgs) ProxyServerPropertiesPtrInput {
	return (*proxyServerPropertiesPtrType)(v)
}

func (*proxyServerPropertiesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ProxyServerProperties)(nil)).Elem()
}

func (i *proxyServerPropertiesPtrType) ToProxyServerPropertiesPtrOutput() ProxyServerPropertiesPtrOutput {
	return i.ToProxyServerPropertiesPtrOutputWithContext(context.Background())
}

func (i *proxyServerPropertiesPtrType) ToProxyServerPropertiesPtrOutputWithContext(ctx context.Context) ProxyServerPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProxyServerPropertiesPtrOutput)
}

// For a non-Azure machine that is not connected directly to the internet, specify a proxy server that the non-Azure machine can use.
type ProxyServerPropertiesResponse struct {
	// Proxy server IP
	Ip *string `pulumi:"ip"`
	// Proxy server port
	Port *string `pulumi:"port"`
}

// For a non-Azure machine that is not connected directly to the internet, specify a proxy server that the non-Azure machine can use.
type ProxyServerPropertiesResponseOutput struct{ *pulumi.OutputState }

func (ProxyServerPropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ProxyServerPropertiesResponse)(nil)).Elem()
}

func (o ProxyServerPropertiesResponseOutput) ToProxyServerPropertiesResponseOutput() ProxyServerPropertiesResponseOutput {
	return o
}

func (o ProxyServerPropertiesResponseOutput) ToProxyServerPropertiesResponseOutputWithContext(ctx context.Context) ProxyServerPropertiesResponseOutput {
	return o
}

func (o ProxyServerPropertiesResponseOutput) ToProxyServerPropertiesResponsePtrOutput() ProxyServerPropertiesResponsePtrOutput {
	return o.ToProxyServerPropertiesResponsePtrOutputWithContext(context.Background())
}

func (o ProxyServerPropertiesResponseOutput) ToProxyServerPropertiesResponsePtrOutputWithContext(ctx context.Context) ProxyServerPropertiesResponsePtrOutput {
	return o.ApplyT(func(v ProxyServerPropertiesResponse) *ProxyServerPropertiesResponse {
		return &v
	}).(ProxyServerPropertiesResponsePtrOutput)
}

// Proxy server IP
func (o ProxyServerPropertiesResponseOutput) Ip() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProxyServerPropertiesResponse) *string { return v.Ip }).(pulumi.StringPtrOutput)
}

// Proxy server port
func (o ProxyServerPropertiesResponseOutput) Port() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProxyServerPropertiesResponse) *string { return v.Port }).(pulumi.StringPtrOutput)
}

type ProxyServerPropertiesResponsePtrOutput struct{ *pulumi.OutputState }

func (ProxyServerPropertiesResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ProxyServerPropertiesResponse)(nil)).Elem()
}

func (o ProxyServerPropertiesResponsePtrOutput) ToProxyServerPropertiesResponsePtrOutput() ProxyServerPropertiesResponsePtrOutput {
	return o
}

func (o ProxyServerPropertiesResponsePtrOutput) ToProxyServerPropertiesResponsePtrOutputWithContext(ctx context.Context) ProxyServerPropertiesResponsePtrOutput {
	return o
}

func (o ProxyServerPropertiesResponsePtrOutput) Elem() ProxyServerPropertiesResponseOutput {
	return o.ApplyT(func(v *ProxyServerPropertiesResponse) ProxyServerPropertiesResponse { return *v }).(ProxyServerPropertiesResponseOutput)
}

// Proxy server IP
func (o ProxyServerPropertiesResponsePtrOutput) Ip() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProxyServerPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return v.Ip
	}).(pulumi.StringPtrOutput)
}

// Proxy server port
func (o ProxyServerPropertiesResponsePtrOutput) Port() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProxyServerPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return v.Port
	}).(pulumi.StringPtrOutput)
}

// Defines whether to send email notifications about new security alerts
type SecurityContactPropertiesResponseAlertNotifications struct {
	// Defines the minimal alert severity which will be sent as email notifications
	MinimalSeverity *string `pulumi:"minimalSeverity"`
	// Defines if email notifications will be sent about new security alerts
	State *string `pulumi:"state"`
}

// Defines whether to send email notifications about new security alerts
type SecurityContactPropertiesResponseAlertNotificationsOutput struct{ *pulumi.OutputState }

func (SecurityContactPropertiesResponseAlertNotificationsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SecurityContactPropertiesResponseAlertNotifications)(nil)).Elem()
}

func (o SecurityContactPropertiesResponseAlertNotificationsOutput) ToSecurityContactPropertiesResponseAlertNotificationsOutput() SecurityContactPropertiesResponseAlertNotificationsOutput {
	return o
}

func (o SecurityContactPropertiesResponseAlertNotificationsOutput) ToSecurityContactPropertiesResponseAlertNotificationsOutputWithContext(ctx context.Context) SecurityContactPropertiesResponseAlertNotificationsOutput {
	return o
}

func (o SecurityContactPropertiesResponseAlertNotificationsOutput) ToSecurityContactPropertiesResponseAlertNotificationsPtrOutput() SecurityContactPropertiesResponseAlertNotificationsPtrOutput {
	return o.ToSecurityContactPropertiesResponseAlertNotificationsPtrOutputWithContext(context.Background())
}

func (o SecurityContactPropertiesResponseAlertNotificationsOutput) ToSecurityContactPropertiesResponseAlertNotificationsPtrOutputWithContext(ctx context.Context) SecurityContactPropertiesResponseAlertNotificationsPtrOutput {
	return o.ApplyT(func(v SecurityContactPropertiesResponseAlertNotifications) *SecurityContactPropertiesResponseAlertNotifications {
		return &v
	}).(SecurityContactPropertiesResponseAlertNotificationsPtrOutput)
}

// Defines the minimal alert severity which will be sent as email notifications
func (o SecurityContactPropertiesResponseAlertNotificationsOutput) MinimalSeverity() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SecurityContactPropertiesResponseAlertNotifications) *string { return v.MinimalSeverity }).(pulumi.StringPtrOutput)
}

// Defines if email notifications will be sent about new security alerts
func (o SecurityContactPropertiesResponseAlertNotificationsOutput) State() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SecurityContactPropertiesResponseAlertNotifications) *string { return v.State }).(pulumi.StringPtrOutput)
}

type SecurityContactPropertiesResponseAlertNotificationsPtrOutput struct{ *pulumi.OutputState }

func (SecurityContactPropertiesResponseAlertNotificationsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SecurityContactPropertiesResponseAlertNotifications)(nil)).Elem()
}

func (o SecurityContactPropertiesResponseAlertNotificationsPtrOutput) ToSecurityContactPropertiesResponseAlertNotificationsPtrOutput() SecurityContactPropertiesResponseAlertNotificationsPtrOutput {
	return o
}

func (o SecurityContactPropertiesResponseAlertNotificationsPtrOutput) ToSecurityContactPropertiesResponseAlertNotificationsPtrOutputWithContext(ctx context.Context) SecurityContactPropertiesResponseAlertNotificationsPtrOutput {
	return o
}

func (o SecurityContactPropertiesResponseAlertNotificationsPtrOutput) Elem() SecurityContactPropertiesResponseAlertNotificationsOutput {
	return o.ApplyT(func(v *SecurityContactPropertiesResponseAlertNotifications) SecurityContactPropertiesResponseAlertNotifications {
		return *v
	}).(SecurityContactPropertiesResponseAlertNotificationsOutput)
}

// Defines the minimal alert severity which will be sent as email notifications
func (o SecurityContactPropertiesResponseAlertNotificationsPtrOutput) MinimalSeverity() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SecurityContactPropertiesResponseAlertNotifications) *string {
		if v == nil {
			return nil
		}
		return v.MinimalSeverity
	}).(pulumi.StringPtrOutput)
}

// Defines if email notifications will be sent about new security alerts
func (o SecurityContactPropertiesResponseAlertNotificationsPtrOutput) State() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SecurityContactPropertiesResponseAlertNotifications) *string {
		if v == nil {
			return nil
		}
		return v.State
	}).(pulumi.StringPtrOutput)
}

// Defines whether to send email notifications from Azure Security Center to persons with specific RBAC roles on the subscription.
type SecurityContactPropertiesResponseNotificationsByRole struct {
	// Defines which RBAC roles will get email notifications from Azure Security Center. List of allowed RBAC roles:
	Roles []string `pulumi:"roles"`
	// Defines whether to send email notifications from Azure Security Center to persons with specific RBAC roles on the subscription.
	State *string `pulumi:"state"`
}

// Defines whether to send email notifications from Azure Security Center to persons with specific RBAC roles on the subscription.
type SecurityContactPropertiesResponseNotificationsByRoleOutput struct{ *pulumi.OutputState }

func (SecurityContactPropertiesResponseNotificationsByRoleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SecurityContactPropertiesResponseNotificationsByRole)(nil)).Elem()
}

func (o SecurityContactPropertiesResponseNotificationsByRoleOutput) ToSecurityContactPropertiesResponseNotificationsByRoleOutput() SecurityContactPropertiesResponseNotificationsByRoleOutput {
	return o
}

func (o SecurityContactPropertiesResponseNotificationsByRoleOutput) ToSecurityContactPropertiesResponseNotificationsByRoleOutputWithContext(ctx context.Context) SecurityContactPropertiesResponseNotificationsByRoleOutput {
	return o
}

func (o SecurityContactPropertiesResponseNotificationsByRoleOutput) ToSecurityContactPropertiesResponseNotificationsByRolePtrOutput() SecurityContactPropertiesResponseNotificationsByRolePtrOutput {
	return o.ToSecurityContactPropertiesResponseNotificationsByRolePtrOutputWithContext(context.Background())
}

func (o SecurityContactPropertiesResponseNotificationsByRoleOutput) ToSecurityContactPropertiesResponseNotificationsByRolePtrOutputWithContext(ctx context.Context) SecurityContactPropertiesResponseNotificationsByRolePtrOutput {
	return o.ApplyT(func(v SecurityContactPropertiesResponseNotificationsByRole) *SecurityContactPropertiesResponseNotificationsByRole {
		return &v
	}).(SecurityContactPropertiesResponseNotificationsByRolePtrOutput)
}

// Defines which RBAC roles will get email notifications from Azure Security Center. List of allowed RBAC roles:
func (o SecurityContactPropertiesResponseNotificationsByRoleOutput) Roles() pulumi.StringArrayOutput {
	return o.ApplyT(func(v SecurityContactPropertiesResponseNotificationsByRole) []string { return v.Roles }).(pulumi.StringArrayOutput)
}

// Defines whether to send email notifications from Azure Security Center to persons with specific RBAC roles on the subscription.
func (o SecurityContactPropertiesResponseNotificationsByRoleOutput) State() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SecurityContactPropertiesResponseNotificationsByRole) *string { return v.State }).(pulumi.StringPtrOutput)
}

type SecurityContactPropertiesResponseNotificationsByRolePtrOutput struct{ *pulumi.OutputState }

func (SecurityContactPropertiesResponseNotificationsByRolePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SecurityContactPropertiesResponseNotificationsByRole)(nil)).Elem()
}

func (o SecurityContactPropertiesResponseNotificationsByRolePtrOutput) ToSecurityContactPropertiesResponseNotificationsByRolePtrOutput() SecurityContactPropertiesResponseNotificationsByRolePtrOutput {
	return o
}

func (o SecurityContactPropertiesResponseNotificationsByRolePtrOutput) ToSecurityContactPropertiesResponseNotificationsByRolePtrOutputWithContext(ctx context.Context) SecurityContactPropertiesResponseNotificationsByRolePtrOutput {
	return o
}

func (o SecurityContactPropertiesResponseNotificationsByRolePtrOutput) Elem() SecurityContactPropertiesResponseNotificationsByRoleOutput {
	return o.ApplyT(func(v *SecurityContactPropertiesResponseNotificationsByRole) SecurityContactPropertiesResponseNotificationsByRole {
		return *v
	}).(SecurityContactPropertiesResponseNotificationsByRoleOutput)
}

// Defines which RBAC roles will get email notifications from Azure Security Center. List of allowed RBAC roles:
func (o SecurityContactPropertiesResponseNotificationsByRolePtrOutput) Roles() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *SecurityContactPropertiesResponseNotificationsByRole) []string {
		if v == nil {
			return nil
		}
		return v.Roles
	}).(pulumi.StringArrayOutput)
}

// Defines whether to send email notifications from Azure Security Center to persons with specific RBAC roles on the subscription.
func (o SecurityContactPropertiesResponseNotificationsByRolePtrOutput) State() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SecurityContactPropertiesResponseNotificationsByRole) *string {
		if v == nil {
			return nil
		}
		return v.State
	}).(pulumi.StringPtrOutput)
}

// Details of the service principal.
type ServicePrincipalProperties struct {
	// Application id of service principal.
	ApplicationId *string `pulumi:"applicationId"`
	// A secret string that the application uses to prove its identity, also can be referred to as application password (write only).
	Secret *string `pulumi:"secret"`
}

// ServicePrincipalPropertiesInput is an input type that accepts ServicePrincipalPropertiesArgs and ServicePrincipalPropertiesOutput values.
// You can construct a concrete instance of `ServicePrincipalPropertiesInput` via:
//
//          ServicePrincipalPropertiesArgs{...}
type ServicePrincipalPropertiesInput interface {
	pulumi.Input

	ToServicePrincipalPropertiesOutput() ServicePrincipalPropertiesOutput
	ToServicePrincipalPropertiesOutputWithContext(context.Context) ServicePrincipalPropertiesOutput
}

// Details of the service principal.
type ServicePrincipalPropertiesArgs struct {
	// Application id of service principal.
	ApplicationId pulumi.StringPtrInput `pulumi:"applicationId"`
	// A secret string that the application uses to prove its identity, also can be referred to as application password (write only).
	Secret pulumi.StringPtrInput `pulumi:"secret"`
}

func (ServicePrincipalPropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServicePrincipalProperties)(nil)).Elem()
}

func (i ServicePrincipalPropertiesArgs) ToServicePrincipalPropertiesOutput() ServicePrincipalPropertiesOutput {
	return i.ToServicePrincipalPropertiesOutputWithContext(context.Background())
}

func (i ServicePrincipalPropertiesArgs) ToServicePrincipalPropertiesOutputWithContext(ctx context.Context) ServicePrincipalPropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServicePrincipalPropertiesOutput)
}

func (i ServicePrincipalPropertiesArgs) ToServicePrincipalPropertiesPtrOutput() ServicePrincipalPropertiesPtrOutput {
	return i.ToServicePrincipalPropertiesPtrOutputWithContext(context.Background())
}

func (i ServicePrincipalPropertiesArgs) ToServicePrincipalPropertiesPtrOutputWithContext(ctx context.Context) ServicePrincipalPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServicePrincipalPropertiesOutput).ToServicePrincipalPropertiesPtrOutputWithContext(ctx)
}

// ServicePrincipalPropertiesPtrInput is an input type that accepts ServicePrincipalPropertiesArgs, ServicePrincipalPropertiesPtr and ServicePrincipalPropertiesPtrOutput values.
// You can construct a concrete instance of `ServicePrincipalPropertiesPtrInput` via:
//
//          ServicePrincipalPropertiesArgs{...}
//
//  or:
//
//          nil
type ServicePrincipalPropertiesPtrInput interface {
	pulumi.Input

	ToServicePrincipalPropertiesPtrOutput() ServicePrincipalPropertiesPtrOutput
	ToServicePrincipalPropertiesPtrOutputWithContext(context.Context) ServicePrincipalPropertiesPtrOutput
}

type servicePrincipalPropertiesPtrType ServicePrincipalPropertiesArgs

func ServicePrincipalPropertiesPtr(v *ServicePrincipalPropertiesArgs) ServicePrincipalPropertiesPtrInput {
	return (*servicePrincipalPropertiesPtrType)(v)
}

func (*servicePrincipalPropertiesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ServicePrincipalProperties)(nil)).Elem()
}

func (i *servicePrincipalPropertiesPtrType) ToServicePrincipalPropertiesPtrOutput() ServicePrincipalPropertiesPtrOutput {
	return i.ToServicePrincipalPropertiesPtrOutputWithContext(context.Background())
}

func (i *servicePrincipalPropertiesPtrType) ToServicePrincipalPropertiesPtrOutputWithContext(ctx context.Context) ServicePrincipalPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServicePrincipalPropertiesPtrOutput)
}

// Details of the service principal.
type ServicePrincipalPropertiesResponse struct {
	// Application id of service principal.
	ApplicationId *string `pulumi:"applicationId"`
	// A secret string that the application uses to prove its identity, also can be referred to as application password (write only).
	Secret *string `pulumi:"secret"`
}

// Details of the service principal.
type ServicePrincipalPropertiesResponseOutput struct{ *pulumi.OutputState }

func (ServicePrincipalPropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServicePrincipalPropertiesResponse)(nil)).Elem()
}

func (o ServicePrincipalPropertiesResponseOutput) ToServicePrincipalPropertiesResponseOutput() ServicePrincipalPropertiesResponseOutput {
	return o
}

func (o ServicePrincipalPropertiesResponseOutput) ToServicePrincipalPropertiesResponseOutputWithContext(ctx context.Context) ServicePrincipalPropertiesResponseOutput {
	return o
}

func (o ServicePrincipalPropertiesResponseOutput) ToServicePrincipalPropertiesResponsePtrOutput() ServicePrincipalPropertiesResponsePtrOutput {
	return o.ToServicePrincipalPropertiesResponsePtrOutputWithContext(context.Background())
}

func (o ServicePrincipalPropertiesResponseOutput) ToServicePrincipalPropertiesResponsePtrOutputWithContext(ctx context.Context) ServicePrincipalPropertiesResponsePtrOutput {
	return o.ApplyT(func(v ServicePrincipalPropertiesResponse) *ServicePrincipalPropertiesResponse {
		return &v
	}).(ServicePrincipalPropertiesResponsePtrOutput)
}

// Application id of service principal.
func (o ServicePrincipalPropertiesResponseOutput) ApplicationId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServicePrincipalPropertiesResponse) *string { return v.ApplicationId }).(pulumi.StringPtrOutput)
}

// A secret string that the application uses to prove its identity, also can be referred to as application password (write only).
func (o ServicePrincipalPropertiesResponseOutput) Secret() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServicePrincipalPropertiesResponse) *string { return v.Secret }).(pulumi.StringPtrOutput)
}

type ServicePrincipalPropertiesResponsePtrOutput struct{ *pulumi.OutputState }

func (ServicePrincipalPropertiesResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ServicePrincipalPropertiesResponse)(nil)).Elem()
}

func (o ServicePrincipalPropertiesResponsePtrOutput) ToServicePrincipalPropertiesResponsePtrOutput() ServicePrincipalPropertiesResponsePtrOutput {
	return o
}

func (o ServicePrincipalPropertiesResponsePtrOutput) ToServicePrincipalPropertiesResponsePtrOutputWithContext(ctx context.Context) ServicePrincipalPropertiesResponsePtrOutput {
	return o
}

func (o ServicePrincipalPropertiesResponsePtrOutput) Elem() ServicePrincipalPropertiesResponseOutput {
	return o.ApplyT(func(v *ServicePrincipalPropertiesResponse) ServicePrincipalPropertiesResponse { return *v }).(ServicePrincipalPropertiesResponseOutput)
}

// Application id of service principal.
func (o ServicePrincipalPropertiesResponsePtrOutput) ApplicationId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServicePrincipalPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return v.ApplicationId
	}).(pulumi.StringPtrOutput)
}

// A secret string that the application uses to prove its identity, also can be referred to as application password (write only).
func (o ServicePrincipalPropertiesResponsePtrOutput) Secret() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServicePrincipalPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return v.Secret
	}).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(AwAssumeRoleAuthenticationDetailsPropertiesOutput{})
	pulumi.RegisterOutputType(AwAssumeRoleAuthenticationDetailsPropertiesResponseOutput{})
	pulumi.RegisterOutputType(AwsCredsAuthenticationDetailsPropertiesOutput{})
	pulumi.RegisterOutputType(AwsCredsAuthenticationDetailsPropertiesResponseOutput{})
	pulumi.RegisterOutputType(GcpCredentialsDetailsPropertiesOutput{})
	pulumi.RegisterOutputType(GcpCredentialsDetailsPropertiesResponseOutput{})
	pulumi.RegisterOutputType(HybridComputeSettingsPropertiesOutput{})
	pulumi.RegisterOutputType(HybridComputeSettingsPropertiesPtrOutput{})
	pulumi.RegisterOutputType(HybridComputeSettingsPropertiesResponseOutput{})
	pulumi.RegisterOutputType(HybridComputeSettingsPropertiesResponsePtrOutput{})
	pulumi.RegisterOutputType(ProxyServerPropertiesOutput{})
	pulumi.RegisterOutputType(ProxyServerPropertiesPtrOutput{})
	pulumi.RegisterOutputType(ProxyServerPropertiesResponseOutput{})
	pulumi.RegisterOutputType(ProxyServerPropertiesResponsePtrOutput{})
	pulumi.RegisterOutputType(SecurityContactPropertiesResponseAlertNotificationsOutput{})
	pulumi.RegisterOutputType(SecurityContactPropertiesResponseAlertNotificationsPtrOutput{})
	pulumi.RegisterOutputType(SecurityContactPropertiesResponseNotificationsByRoleOutput{})
	pulumi.RegisterOutputType(SecurityContactPropertiesResponseNotificationsByRolePtrOutput{})
	pulumi.RegisterOutputType(ServicePrincipalPropertiesOutput{})
	pulumi.RegisterOutputType(ServicePrincipalPropertiesPtrOutput{})
	pulumi.RegisterOutputType(ServicePrincipalPropertiesResponseOutput{})
	pulumi.RegisterOutputType(ServicePrincipalPropertiesResponsePtrOutput{})
}
