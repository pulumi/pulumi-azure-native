// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v20170426

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// The AssignmentPrincipal
type AssignmentPrincipal struct {
	// The principal id being assigned to.
	PrincipalId string `pulumi:"principalId"`
	// Other metadata for the principal.
	PrincipalMetadata map[string]string `pulumi:"principalMetadata"`
	// The Type of the principal ID.
	PrincipalType string `pulumi:"principalType"`
}

// AssignmentPrincipalInput is an input type that accepts AssignmentPrincipalArgs and AssignmentPrincipalOutput values.
// You can construct a concrete instance of `AssignmentPrincipalInput` via:
//
//          AssignmentPrincipalArgs{...}
type AssignmentPrincipalInput interface {
	pulumi.Input

	ToAssignmentPrincipalOutput() AssignmentPrincipalOutput
	ToAssignmentPrincipalOutputWithContext(context.Context) AssignmentPrincipalOutput
}

// The AssignmentPrincipal
type AssignmentPrincipalArgs struct {
	// The principal id being assigned to.
	PrincipalId pulumi.StringInput `pulumi:"principalId"`
	// Other metadata for the principal.
	PrincipalMetadata pulumi.StringMapInput `pulumi:"principalMetadata"`
	// The Type of the principal ID.
	PrincipalType pulumi.StringInput `pulumi:"principalType"`
}

func (AssignmentPrincipalArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AssignmentPrincipal)(nil)).Elem()
}

func (i AssignmentPrincipalArgs) ToAssignmentPrincipalOutput() AssignmentPrincipalOutput {
	return i.ToAssignmentPrincipalOutputWithContext(context.Background())
}

func (i AssignmentPrincipalArgs) ToAssignmentPrincipalOutputWithContext(ctx context.Context) AssignmentPrincipalOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AssignmentPrincipalOutput)
}

// AssignmentPrincipalArrayInput is an input type that accepts AssignmentPrincipalArray and AssignmentPrincipalArrayOutput values.
// You can construct a concrete instance of `AssignmentPrincipalArrayInput` via:
//
//          AssignmentPrincipalArray{ AssignmentPrincipalArgs{...} }
type AssignmentPrincipalArrayInput interface {
	pulumi.Input

	ToAssignmentPrincipalArrayOutput() AssignmentPrincipalArrayOutput
	ToAssignmentPrincipalArrayOutputWithContext(context.Context) AssignmentPrincipalArrayOutput
}

type AssignmentPrincipalArray []AssignmentPrincipalInput

func (AssignmentPrincipalArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AssignmentPrincipal)(nil)).Elem()
}

func (i AssignmentPrincipalArray) ToAssignmentPrincipalArrayOutput() AssignmentPrincipalArrayOutput {
	return i.ToAssignmentPrincipalArrayOutputWithContext(context.Background())
}

func (i AssignmentPrincipalArray) ToAssignmentPrincipalArrayOutputWithContext(ctx context.Context) AssignmentPrincipalArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AssignmentPrincipalArrayOutput)
}

// The AssignmentPrincipal
type AssignmentPrincipalOutput struct{ *pulumi.OutputState }

func (AssignmentPrincipalOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AssignmentPrincipal)(nil)).Elem()
}

func (o AssignmentPrincipalOutput) ToAssignmentPrincipalOutput() AssignmentPrincipalOutput {
	return o
}

func (o AssignmentPrincipalOutput) ToAssignmentPrincipalOutputWithContext(ctx context.Context) AssignmentPrincipalOutput {
	return o
}

// The principal id being assigned to.
func (o AssignmentPrincipalOutput) PrincipalId() pulumi.StringOutput {
	return o.ApplyT(func(v AssignmentPrincipal) string { return v.PrincipalId }).(pulumi.StringOutput)
}

// Other metadata for the principal.
func (o AssignmentPrincipalOutput) PrincipalMetadata() pulumi.StringMapOutput {
	return o.ApplyT(func(v AssignmentPrincipal) map[string]string { return v.PrincipalMetadata }).(pulumi.StringMapOutput)
}

// The Type of the principal ID.
func (o AssignmentPrincipalOutput) PrincipalType() pulumi.StringOutput {
	return o.ApplyT(func(v AssignmentPrincipal) string { return v.PrincipalType }).(pulumi.StringOutput)
}

type AssignmentPrincipalArrayOutput struct{ *pulumi.OutputState }

func (AssignmentPrincipalArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AssignmentPrincipal)(nil)).Elem()
}

func (o AssignmentPrincipalArrayOutput) ToAssignmentPrincipalArrayOutput() AssignmentPrincipalArrayOutput {
	return o
}

func (o AssignmentPrincipalArrayOutput) ToAssignmentPrincipalArrayOutputWithContext(ctx context.Context) AssignmentPrincipalArrayOutput {
	return o
}

func (o AssignmentPrincipalArrayOutput) Index(i pulumi.IntInput) AssignmentPrincipalOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AssignmentPrincipal {
		return vs[0].([]AssignmentPrincipal)[vs[1].(int)]
	}).(AssignmentPrincipalOutput)
}

// The AssignmentPrincipal
type AssignmentPrincipalResponse struct {
	// The principal id being assigned to.
	PrincipalId string `pulumi:"principalId"`
	// Other metadata for the principal.
	PrincipalMetadata map[string]string `pulumi:"principalMetadata"`
	// The Type of the principal ID.
	PrincipalType string `pulumi:"principalType"`
}

// AssignmentPrincipalResponseInput is an input type that accepts AssignmentPrincipalResponseArgs and AssignmentPrincipalResponseOutput values.
// You can construct a concrete instance of `AssignmentPrincipalResponseInput` via:
//
//          AssignmentPrincipalResponseArgs{...}
type AssignmentPrincipalResponseInput interface {
	pulumi.Input

	ToAssignmentPrincipalResponseOutput() AssignmentPrincipalResponseOutput
	ToAssignmentPrincipalResponseOutputWithContext(context.Context) AssignmentPrincipalResponseOutput
}

// The AssignmentPrincipal
type AssignmentPrincipalResponseArgs struct {
	// The principal id being assigned to.
	PrincipalId pulumi.StringInput `pulumi:"principalId"`
	// Other metadata for the principal.
	PrincipalMetadata pulumi.StringMapInput `pulumi:"principalMetadata"`
	// The Type of the principal ID.
	PrincipalType pulumi.StringInput `pulumi:"principalType"`
}

func (AssignmentPrincipalResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AssignmentPrincipalResponse)(nil)).Elem()
}

func (i AssignmentPrincipalResponseArgs) ToAssignmentPrincipalResponseOutput() AssignmentPrincipalResponseOutput {
	return i.ToAssignmentPrincipalResponseOutputWithContext(context.Background())
}

func (i AssignmentPrincipalResponseArgs) ToAssignmentPrincipalResponseOutputWithContext(ctx context.Context) AssignmentPrincipalResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AssignmentPrincipalResponseOutput)
}

// AssignmentPrincipalResponseArrayInput is an input type that accepts AssignmentPrincipalResponseArray and AssignmentPrincipalResponseArrayOutput values.
// You can construct a concrete instance of `AssignmentPrincipalResponseArrayInput` via:
//
//          AssignmentPrincipalResponseArray{ AssignmentPrincipalResponseArgs{...} }
type AssignmentPrincipalResponseArrayInput interface {
	pulumi.Input

	ToAssignmentPrincipalResponseArrayOutput() AssignmentPrincipalResponseArrayOutput
	ToAssignmentPrincipalResponseArrayOutputWithContext(context.Context) AssignmentPrincipalResponseArrayOutput
}

type AssignmentPrincipalResponseArray []AssignmentPrincipalResponseInput

func (AssignmentPrincipalResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AssignmentPrincipalResponse)(nil)).Elem()
}

func (i AssignmentPrincipalResponseArray) ToAssignmentPrincipalResponseArrayOutput() AssignmentPrincipalResponseArrayOutput {
	return i.ToAssignmentPrincipalResponseArrayOutputWithContext(context.Background())
}

func (i AssignmentPrincipalResponseArray) ToAssignmentPrincipalResponseArrayOutputWithContext(ctx context.Context) AssignmentPrincipalResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AssignmentPrincipalResponseArrayOutput)
}

// The AssignmentPrincipal
type AssignmentPrincipalResponseOutput struct{ *pulumi.OutputState }

func (AssignmentPrincipalResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AssignmentPrincipalResponse)(nil)).Elem()
}

func (o AssignmentPrincipalResponseOutput) ToAssignmentPrincipalResponseOutput() AssignmentPrincipalResponseOutput {
	return o
}

func (o AssignmentPrincipalResponseOutput) ToAssignmentPrincipalResponseOutputWithContext(ctx context.Context) AssignmentPrincipalResponseOutput {
	return o
}

// The principal id being assigned to.
func (o AssignmentPrincipalResponseOutput) PrincipalId() pulumi.StringOutput {
	return o.ApplyT(func(v AssignmentPrincipalResponse) string { return v.PrincipalId }).(pulumi.StringOutput)
}

// Other metadata for the principal.
func (o AssignmentPrincipalResponseOutput) PrincipalMetadata() pulumi.StringMapOutput {
	return o.ApplyT(func(v AssignmentPrincipalResponse) map[string]string { return v.PrincipalMetadata }).(pulumi.StringMapOutput)
}

// The Type of the principal ID.
func (o AssignmentPrincipalResponseOutput) PrincipalType() pulumi.StringOutput {
	return o.ApplyT(func(v AssignmentPrincipalResponse) string { return v.PrincipalType }).(pulumi.StringOutput)
}

type AssignmentPrincipalResponseArrayOutput struct{ *pulumi.OutputState }

func (AssignmentPrincipalResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AssignmentPrincipalResponse)(nil)).Elem()
}

func (o AssignmentPrincipalResponseArrayOutput) ToAssignmentPrincipalResponseArrayOutput() AssignmentPrincipalResponseArrayOutput {
	return o
}

func (o AssignmentPrincipalResponseArrayOutput) ToAssignmentPrincipalResponseArrayOutputWithContext(ctx context.Context) AssignmentPrincipalResponseArrayOutput {
	return o
}

func (o AssignmentPrincipalResponseArrayOutput) Index(i pulumi.IntInput) AssignmentPrincipalResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AssignmentPrincipalResponse {
		return vs[0].([]AssignmentPrincipalResponse)[vs[1].(int)]
	}).(AssignmentPrincipalResponseOutput)
}

// Connector mapping property availability.
type ConnectorMappingAvailability struct {
	// The frequency to update.
	Frequency *string `pulumi:"frequency"`
	// The interval of the given frequency to use.
	Interval int `pulumi:"interval"`
}

// ConnectorMappingAvailabilityInput is an input type that accepts ConnectorMappingAvailabilityArgs and ConnectorMappingAvailabilityOutput values.
// You can construct a concrete instance of `ConnectorMappingAvailabilityInput` via:
//
//          ConnectorMappingAvailabilityArgs{...}
type ConnectorMappingAvailabilityInput interface {
	pulumi.Input

	ToConnectorMappingAvailabilityOutput() ConnectorMappingAvailabilityOutput
	ToConnectorMappingAvailabilityOutputWithContext(context.Context) ConnectorMappingAvailabilityOutput
}

// Connector mapping property availability.
type ConnectorMappingAvailabilityArgs struct {
	// The frequency to update.
	Frequency pulumi.StringPtrInput `pulumi:"frequency"`
	// The interval of the given frequency to use.
	Interval pulumi.IntInput `pulumi:"interval"`
}

func (ConnectorMappingAvailabilityArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectorMappingAvailability)(nil)).Elem()
}

func (i ConnectorMappingAvailabilityArgs) ToConnectorMappingAvailabilityOutput() ConnectorMappingAvailabilityOutput {
	return i.ToConnectorMappingAvailabilityOutputWithContext(context.Background())
}

func (i ConnectorMappingAvailabilityArgs) ToConnectorMappingAvailabilityOutputWithContext(ctx context.Context) ConnectorMappingAvailabilityOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectorMappingAvailabilityOutput)
}

func (i ConnectorMappingAvailabilityArgs) ToConnectorMappingAvailabilityPtrOutput() ConnectorMappingAvailabilityPtrOutput {
	return i.ToConnectorMappingAvailabilityPtrOutputWithContext(context.Background())
}

func (i ConnectorMappingAvailabilityArgs) ToConnectorMappingAvailabilityPtrOutputWithContext(ctx context.Context) ConnectorMappingAvailabilityPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectorMappingAvailabilityOutput).ToConnectorMappingAvailabilityPtrOutputWithContext(ctx)
}

// ConnectorMappingAvailabilityPtrInput is an input type that accepts ConnectorMappingAvailabilityArgs, ConnectorMappingAvailabilityPtr and ConnectorMappingAvailabilityPtrOutput values.
// You can construct a concrete instance of `ConnectorMappingAvailabilityPtrInput` via:
//
//          ConnectorMappingAvailabilityArgs{...}
//
//  or:
//
//          nil
type ConnectorMappingAvailabilityPtrInput interface {
	pulumi.Input

	ToConnectorMappingAvailabilityPtrOutput() ConnectorMappingAvailabilityPtrOutput
	ToConnectorMappingAvailabilityPtrOutputWithContext(context.Context) ConnectorMappingAvailabilityPtrOutput
}

type connectorMappingAvailabilityPtrType ConnectorMappingAvailabilityArgs

func ConnectorMappingAvailabilityPtr(v *ConnectorMappingAvailabilityArgs) ConnectorMappingAvailabilityPtrInput {
	return (*connectorMappingAvailabilityPtrType)(v)
}

func (*connectorMappingAvailabilityPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ConnectorMappingAvailability)(nil)).Elem()
}

func (i *connectorMappingAvailabilityPtrType) ToConnectorMappingAvailabilityPtrOutput() ConnectorMappingAvailabilityPtrOutput {
	return i.ToConnectorMappingAvailabilityPtrOutputWithContext(context.Background())
}

func (i *connectorMappingAvailabilityPtrType) ToConnectorMappingAvailabilityPtrOutputWithContext(ctx context.Context) ConnectorMappingAvailabilityPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectorMappingAvailabilityPtrOutput)
}

// Connector mapping property availability.
type ConnectorMappingAvailabilityOutput struct{ *pulumi.OutputState }

func (ConnectorMappingAvailabilityOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectorMappingAvailability)(nil)).Elem()
}

func (o ConnectorMappingAvailabilityOutput) ToConnectorMappingAvailabilityOutput() ConnectorMappingAvailabilityOutput {
	return o
}

func (o ConnectorMappingAvailabilityOutput) ToConnectorMappingAvailabilityOutputWithContext(ctx context.Context) ConnectorMappingAvailabilityOutput {
	return o
}

func (o ConnectorMappingAvailabilityOutput) ToConnectorMappingAvailabilityPtrOutput() ConnectorMappingAvailabilityPtrOutput {
	return o.ToConnectorMappingAvailabilityPtrOutputWithContext(context.Background())
}

func (o ConnectorMappingAvailabilityOutput) ToConnectorMappingAvailabilityPtrOutputWithContext(ctx context.Context) ConnectorMappingAvailabilityPtrOutput {
	return o.ApplyT(func(v ConnectorMappingAvailability) *ConnectorMappingAvailability {
		return &v
	}).(ConnectorMappingAvailabilityPtrOutput)
}

// The frequency to update.
func (o ConnectorMappingAvailabilityOutput) Frequency() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ConnectorMappingAvailability) *string { return v.Frequency }).(pulumi.StringPtrOutput)
}

// The interval of the given frequency to use.
func (o ConnectorMappingAvailabilityOutput) Interval() pulumi.IntOutput {
	return o.ApplyT(func(v ConnectorMappingAvailability) int { return v.Interval }).(pulumi.IntOutput)
}

type ConnectorMappingAvailabilityPtrOutput struct{ *pulumi.OutputState }

func (ConnectorMappingAvailabilityPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ConnectorMappingAvailability)(nil)).Elem()
}

func (o ConnectorMappingAvailabilityPtrOutput) ToConnectorMappingAvailabilityPtrOutput() ConnectorMappingAvailabilityPtrOutput {
	return o
}

func (o ConnectorMappingAvailabilityPtrOutput) ToConnectorMappingAvailabilityPtrOutputWithContext(ctx context.Context) ConnectorMappingAvailabilityPtrOutput {
	return o
}

func (o ConnectorMappingAvailabilityPtrOutput) Elem() ConnectorMappingAvailabilityOutput {
	return o.ApplyT(func(v *ConnectorMappingAvailability) ConnectorMappingAvailability { return *v }).(ConnectorMappingAvailabilityOutput)
}

// The frequency to update.
func (o ConnectorMappingAvailabilityPtrOutput) Frequency() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConnectorMappingAvailability) *string {
		if v == nil {
			return nil
		}
		return v.Frequency
	}).(pulumi.StringPtrOutput)
}

// The interval of the given frequency to use.
func (o ConnectorMappingAvailabilityPtrOutput) Interval() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ConnectorMappingAvailability) *int {
		if v == nil {
			return nil
		}
		return &v.Interval
	}).(pulumi.IntPtrOutput)
}

// Connector mapping property availability.
type ConnectorMappingAvailabilityResponse struct {
	// The frequency to update.
	Frequency *string `pulumi:"frequency"`
	// The interval of the given frequency to use.
	Interval int `pulumi:"interval"`
}

// ConnectorMappingAvailabilityResponseInput is an input type that accepts ConnectorMappingAvailabilityResponseArgs and ConnectorMappingAvailabilityResponseOutput values.
// You can construct a concrete instance of `ConnectorMappingAvailabilityResponseInput` via:
//
//          ConnectorMappingAvailabilityResponseArgs{...}
type ConnectorMappingAvailabilityResponseInput interface {
	pulumi.Input

	ToConnectorMappingAvailabilityResponseOutput() ConnectorMappingAvailabilityResponseOutput
	ToConnectorMappingAvailabilityResponseOutputWithContext(context.Context) ConnectorMappingAvailabilityResponseOutput
}

// Connector mapping property availability.
type ConnectorMappingAvailabilityResponseArgs struct {
	// The frequency to update.
	Frequency pulumi.StringPtrInput `pulumi:"frequency"`
	// The interval of the given frequency to use.
	Interval pulumi.IntInput `pulumi:"interval"`
}

func (ConnectorMappingAvailabilityResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectorMappingAvailabilityResponse)(nil)).Elem()
}

func (i ConnectorMappingAvailabilityResponseArgs) ToConnectorMappingAvailabilityResponseOutput() ConnectorMappingAvailabilityResponseOutput {
	return i.ToConnectorMappingAvailabilityResponseOutputWithContext(context.Background())
}

func (i ConnectorMappingAvailabilityResponseArgs) ToConnectorMappingAvailabilityResponseOutputWithContext(ctx context.Context) ConnectorMappingAvailabilityResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectorMappingAvailabilityResponseOutput)
}

func (i ConnectorMappingAvailabilityResponseArgs) ToConnectorMappingAvailabilityResponsePtrOutput() ConnectorMappingAvailabilityResponsePtrOutput {
	return i.ToConnectorMappingAvailabilityResponsePtrOutputWithContext(context.Background())
}

func (i ConnectorMappingAvailabilityResponseArgs) ToConnectorMappingAvailabilityResponsePtrOutputWithContext(ctx context.Context) ConnectorMappingAvailabilityResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectorMappingAvailabilityResponseOutput).ToConnectorMappingAvailabilityResponsePtrOutputWithContext(ctx)
}

// ConnectorMappingAvailabilityResponsePtrInput is an input type that accepts ConnectorMappingAvailabilityResponseArgs, ConnectorMappingAvailabilityResponsePtr and ConnectorMappingAvailabilityResponsePtrOutput values.
// You can construct a concrete instance of `ConnectorMappingAvailabilityResponsePtrInput` via:
//
//          ConnectorMappingAvailabilityResponseArgs{...}
//
//  or:
//
//          nil
type ConnectorMappingAvailabilityResponsePtrInput interface {
	pulumi.Input

	ToConnectorMappingAvailabilityResponsePtrOutput() ConnectorMappingAvailabilityResponsePtrOutput
	ToConnectorMappingAvailabilityResponsePtrOutputWithContext(context.Context) ConnectorMappingAvailabilityResponsePtrOutput
}

type connectorMappingAvailabilityResponsePtrType ConnectorMappingAvailabilityResponseArgs

func ConnectorMappingAvailabilityResponsePtr(v *ConnectorMappingAvailabilityResponseArgs) ConnectorMappingAvailabilityResponsePtrInput {
	return (*connectorMappingAvailabilityResponsePtrType)(v)
}

func (*connectorMappingAvailabilityResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ConnectorMappingAvailabilityResponse)(nil)).Elem()
}

func (i *connectorMappingAvailabilityResponsePtrType) ToConnectorMappingAvailabilityResponsePtrOutput() ConnectorMappingAvailabilityResponsePtrOutput {
	return i.ToConnectorMappingAvailabilityResponsePtrOutputWithContext(context.Background())
}

func (i *connectorMappingAvailabilityResponsePtrType) ToConnectorMappingAvailabilityResponsePtrOutputWithContext(ctx context.Context) ConnectorMappingAvailabilityResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectorMappingAvailabilityResponsePtrOutput)
}

// Connector mapping property availability.
type ConnectorMappingAvailabilityResponseOutput struct{ *pulumi.OutputState }

func (ConnectorMappingAvailabilityResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectorMappingAvailabilityResponse)(nil)).Elem()
}

func (o ConnectorMappingAvailabilityResponseOutput) ToConnectorMappingAvailabilityResponseOutput() ConnectorMappingAvailabilityResponseOutput {
	return o
}

func (o ConnectorMappingAvailabilityResponseOutput) ToConnectorMappingAvailabilityResponseOutputWithContext(ctx context.Context) ConnectorMappingAvailabilityResponseOutput {
	return o
}

func (o ConnectorMappingAvailabilityResponseOutput) ToConnectorMappingAvailabilityResponsePtrOutput() ConnectorMappingAvailabilityResponsePtrOutput {
	return o.ToConnectorMappingAvailabilityResponsePtrOutputWithContext(context.Background())
}

func (o ConnectorMappingAvailabilityResponseOutput) ToConnectorMappingAvailabilityResponsePtrOutputWithContext(ctx context.Context) ConnectorMappingAvailabilityResponsePtrOutput {
	return o.ApplyT(func(v ConnectorMappingAvailabilityResponse) *ConnectorMappingAvailabilityResponse {
		return &v
	}).(ConnectorMappingAvailabilityResponsePtrOutput)
}

// The frequency to update.
func (o ConnectorMappingAvailabilityResponseOutput) Frequency() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ConnectorMappingAvailabilityResponse) *string { return v.Frequency }).(pulumi.StringPtrOutput)
}

// The interval of the given frequency to use.
func (o ConnectorMappingAvailabilityResponseOutput) Interval() pulumi.IntOutput {
	return o.ApplyT(func(v ConnectorMappingAvailabilityResponse) int { return v.Interval }).(pulumi.IntOutput)
}

type ConnectorMappingAvailabilityResponsePtrOutput struct{ *pulumi.OutputState }

func (ConnectorMappingAvailabilityResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ConnectorMappingAvailabilityResponse)(nil)).Elem()
}

func (o ConnectorMappingAvailabilityResponsePtrOutput) ToConnectorMappingAvailabilityResponsePtrOutput() ConnectorMappingAvailabilityResponsePtrOutput {
	return o
}

func (o ConnectorMappingAvailabilityResponsePtrOutput) ToConnectorMappingAvailabilityResponsePtrOutputWithContext(ctx context.Context) ConnectorMappingAvailabilityResponsePtrOutput {
	return o
}

func (o ConnectorMappingAvailabilityResponsePtrOutput) Elem() ConnectorMappingAvailabilityResponseOutput {
	return o.ApplyT(func(v *ConnectorMappingAvailabilityResponse) ConnectorMappingAvailabilityResponse { return *v }).(ConnectorMappingAvailabilityResponseOutput)
}

// The frequency to update.
func (o ConnectorMappingAvailabilityResponsePtrOutput) Frequency() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConnectorMappingAvailabilityResponse) *string {
		if v == nil {
			return nil
		}
		return v.Frequency
	}).(pulumi.StringPtrOutput)
}

// The interval of the given frequency to use.
func (o ConnectorMappingAvailabilityResponsePtrOutput) Interval() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ConnectorMappingAvailabilityResponse) *int {
		if v == nil {
			return nil
		}
		return &v.Interval
	}).(pulumi.IntPtrOutput)
}

// The complete operation.
type ConnectorMappingCompleteOperation struct {
	// The type of completion operation.
	CompletionOperationType *string `pulumi:"completionOperationType"`
	// The destination folder where files will be moved to once the import is done.
	DestinationFolder *string `pulumi:"destinationFolder"`
}

// ConnectorMappingCompleteOperationInput is an input type that accepts ConnectorMappingCompleteOperationArgs and ConnectorMappingCompleteOperationOutput values.
// You can construct a concrete instance of `ConnectorMappingCompleteOperationInput` via:
//
//          ConnectorMappingCompleteOperationArgs{...}
type ConnectorMappingCompleteOperationInput interface {
	pulumi.Input

	ToConnectorMappingCompleteOperationOutput() ConnectorMappingCompleteOperationOutput
	ToConnectorMappingCompleteOperationOutputWithContext(context.Context) ConnectorMappingCompleteOperationOutput
}

// The complete operation.
type ConnectorMappingCompleteOperationArgs struct {
	// The type of completion operation.
	CompletionOperationType pulumi.StringPtrInput `pulumi:"completionOperationType"`
	// The destination folder where files will be moved to once the import is done.
	DestinationFolder pulumi.StringPtrInput `pulumi:"destinationFolder"`
}

func (ConnectorMappingCompleteOperationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectorMappingCompleteOperation)(nil)).Elem()
}

func (i ConnectorMappingCompleteOperationArgs) ToConnectorMappingCompleteOperationOutput() ConnectorMappingCompleteOperationOutput {
	return i.ToConnectorMappingCompleteOperationOutputWithContext(context.Background())
}

func (i ConnectorMappingCompleteOperationArgs) ToConnectorMappingCompleteOperationOutputWithContext(ctx context.Context) ConnectorMappingCompleteOperationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectorMappingCompleteOperationOutput)
}

func (i ConnectorMappingCompleteOperationArgs) ToConnectorMappingCompleteOperationPtrOutput() ConnectorMappingCompleteOperationPtrOutput {
	return i.ToConnectorMappingCompleteOperationPtrOutputWithContext(context.Background())
}

func (i ConnectorMappingCompleteOperationArgs) ToConnectorMappingCompleteOperationPtrOutputWithContext(ctx context.Context) ConnectorMappingCompleteOperationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectorMappingCompleteOperationOutput).ToConnectorMappingCompleteOperationPtrOutputWithContext(ctx)
}

// ConnectorMappingCompleteOperationPtrInput is an input type that accepts ConnectorMappingCompleteOperationArgs, ConnectorMappingCompleteOperationPtr and ConnectorMappingCompleteOperationPtrOutput values.
// You can construct a concrete instance of `ConnectorMappingCompleteOperationPtrInput` via:
//
//          ConnectorMappingCompleteOperationArgs{...}
//
//  or:
//
//          nil
type ConnectorMappingCompleteOperationPtrInput interface {
	pulumi.Input

	ToConnectorMappingCompleteOperationPtrOutput() ConnectorMappingCompleteOperationPtrOutput
	ToConnectorMappingCompleteOperationPtrOutputWithContext(context.Context) ConnectorMappingCompleteOperationPtrOutput
}

type connectorMappingCompleteOperationPtrType ConnectorMappingCompleteOperationArgs

func ConnectorMappingCompleteOperationPtr(v *ConnectorMappingCompleteOperationArgs) ConnectorMappingCompleteOperationPtrInput {
	return (*connectorMappingCompleteOperationPtrType)(v)
}

func (*connectorMappingCompleteOperationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ConnectorMappingCompleteOperation)(nil)).Elem()
}

func (i *connectorMappingCompleteOperationPtrType) ToConnectorMappingCompleteOperationPtrOutput() ConnectorMappingCompleteOperationPtrOutput {
	return i.ToConnectorMappingCompleteOperationPtrOutputWithContext(context.Background())
}

func (i *connectorMappingCompleteOperationPtrType) ToConnectorMappingCompleteOperationPtrOutputWithContext(ctx context.Context) ConnectorMappingCompleteOperationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectorMappingCompleteOperationPtrOutput)
}

// The complete operation.
type ConnectorMappingCompleteOperationOutput struct{ *pulumi.OutputState }

func (ConnectorMappingCompleteOperationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectorMappingCompleteOperation)(nil)).Elem()
}

func (o ConnectorMappingCompleteOperationOutput) ToConnectorMappingCompleteOperationOutput() ConnectorMappingCompleteOperationOutput {
	return o
}

func (o ConnectorMappingCompleteOperationOutput) ToConnectorMappingCompleteOperationOutputWithContext(ctx context.Context) ConnectorMappingCompleteOperationOutput {
	return o
}

func (o ConnectorMappingCompleteOperationOutput) ToConnectorMappingCompleteOperationPtrOutput() ConnectorMappingCompleteOperationPtrOutput {
	return o.ToConnectorMappingCompleteOperationPtrOutputWithContext(context.Background())
}

func (o ConnectorMappingCompleteOperationOutput) ToConnectorMappingCompleteOperationPtrOutputWithContext(ctx context.Context) ConnectorMappingCompleteOperationPtrOutput {
	return o.ApplyT(func(v ConnectorMappingCompleteOperation) *ConnectorMappingCompleteOperation {
		return &v
	}).(ConnectorMappingCompleteOperationPtrOutput)
}

// The type of completion operation.
func (o ConnectorMappingCompleteOperationOutput) CompletionOperationType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ConnectorMappingCompleteOperation) *string { return v.CompletionOperationType }).(pulumi.StringPtrOutput)
}

// The destination folder where files will be moved to once the import is done.
func (o ConnectorMappingCompleteOperationOutput) DestinationFolder() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ConnectorMappingCompleteOperation) *string { return v.DestinationFolder }).(pulumi.StringPtrOutput)
}

type ConnectorMappingCompleteOperationPtrOutput struct{ *pulumi.OutputState }

func (ConnectorMappingCompleteOperationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ConnectorMappingCompleteOperation)(nil)).Elem()
}

func (o ConnectorMappingCompleteOperationPtrOutput) ToConnectorMappingCompleteOperationPtrOutput() ConnectorMappingCompleteOperationPtrOutput {
	return o
}

func (o ConnectorMappingCompleteOperationPtrOutput) ToConnectorMappingCompleteOperationPtrOutputWithContext(ctx context.Context) ConnectorMappingCompleteOperationPtrOutput {
	return o
}

func (o ConnectorMappingCompleteOperationPtrOutput) Elem() ConnectorMappingCompleteOperationOutput {
	return o.ApplyT(func(v *ConnectorMappingCompleteOperation) ConnectorMappingCompleteOperation { return *v }).(ConnectorMappingCompleteOperationOutput)
}

// The type of completion operation.
func (o ConnectorMappingCompleteOperationPtrOutput) CompletionOperationType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConnectorMappingCompleteOperation) *string {
		if v == nil {
			return nil
		}
		return v.CompletionOperationType
	}).(pulumi.StringPtrOutput)
}

// The destination folder where files will be moved to once the import is done.
func (o ConnectorMappingCompleteOperationPtrOutput) DestinationFolder() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConnectorMappingCompleteOperation) *string {
		if v == nil {
			return nil
		}
		return v.DestinationFolder
	}).(pulumi.StringPtrOutput)
}

// The complete operation.
type ConnectorMappingCompleteOperationResponse struct {
	// The type of completion operation.
	CompletionOperationType *string `pulumi:"completionOperationType"`
	// The destination folder where files will be moved to once the import is done.
	DestinationFolder *string `pulumi:"destinationFolder"`
}

// ConnectorMappingCompleteOperationResponseInput is an input type that accepts ConnectorMappingCompleteOperationResponseArgs and ConnectorMappingCompleteOperationResponseOutput values.
// You can construct a concrete instance of `ConnectorMappingCompleteOperationResponseInput` via:
//
//          ConnectorMappingCompleteOperationResponseArgs{...}
type ConnectorMappingCompleteOperationResponseInput interface {
	pulumi.Input

	ToConnectorMappingCompleteOperationResponseOutput() ConnectorMappingCompleteOperationResponseOutput
	ToConnectorMappingCompleteOperationResponseOutputWithContext(context.Context) ConnectorMappingCompleteOperationResponseOutput
}

// The complete operation.
type ConnectorMappingCompleteOperationResponseArgs struct {
	// The type of completion operation.
	CompletionOperationType pulumi.StringPtrInput `pulumi:"completionOperationType"`
	// The destination folder where files will be moved to once the import is done.
	DestinationFolder pulumi.StringPtrInput `pulumi:"destinationFolder"`
}

func (ConnectorMappingCompleteOperationResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectorMappingCompleteOperationResponse)(nil)).Elem()
}

func (i ConnectorMappingCompleteOperationResponseArgs) ToConnectorMappingCompleteOperationResponseOutput() ConnectorMappingCompleteOperationResponseOutput {
	return i.ToConnectorMappingCompleteOperationResponseOutputWithContext(context.Background())
}

func (i ConnectorMappingCompleteOperationResponseArgs) ToConnectorMappingCompleteOperationResponseOutputWithContext(ctx context.Context) ConnectorMappingCompleteOperationResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectorMappingCompleteOperationResponseOutput)
}

func (i ConnectorMappingCompleteOperationResponseArgs) ToConnectorMappingCompleteOperationResponsePtrOutput() ConnectorMappingCompleteOperationResponsePtrOutput {
	return i.ToConnectorMappingCompleteOperationResponsePtrOutputWithContext(context.Background())
}

func (i ConnectorMappingCompleteOperationResponseArgs) ToConnectorMappingCompleteOperationResponsePtrOutputWithContext(ctx context.Context) ConnectorMappingCompleteOperationResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectorMappingCompleteOperationResponseOutput).ToConnectorMappingCompleteOperationResponsePtrOutputWithContext(ctx)
}

// ConnectorMappingCompleteOperationResponsePtrInput is an input type that accepts ConnectorMappingCompleteOperationResponseArgs, ConnectorMappingCompleteOperationResponsePtr and ConnectorMappingCompleteOperationResponsePtrOutput values.
// You can construct a concrete instance of `ConnectorMappingCompleteOperationResponsePtrInput` via:
//
//          ConnectorMappingCompleteOperationResponseArgs{...}
//
//  or:
//
//          nil
type ConnectorMappingCompleteOperationResponsePtrInput interface {
	pulumi.Input

	ToConnectorMappingCompleteOperationResponsePtrOutput() ConnectorMappingCompleteOperationResponsePtrOutput
	ToConnectorMappingCompleteOperationResponsePtrOutputWithContext(context.Context) ConnectorMappingCompleteOperationResponsePtrOutput
}

type connectorMappingCompleteOperationResponsePtrType ConnectorMappingCompleteOperationResponseArgs

func ConnectorMappingCompleteOperationResponsePtr(v *ConnectorMappingCompleteOperationResponseArgs) ConnectorMappingCompleteOperationResponsePtrInput {
	return (*connectorMappingCompleteOperationResponsePtrType)(v)
}

func (*connectorMappingCompleteOperationResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ConnectorMappingCompleteOperationResponse)(nil)).Elem()
}

func (i *connectorMappingCompleteOperationResponsePtrType) ToConnectorMappingCompleteOperationResponsePtrOutput() ConnectorMappingCompleteOperationResponsePtrOutput {
	return i.ToConnectorMappingCompleteOperationResponsePtrOutputWithContext(context.Background())
}

func (i *connectorMappingCompleteOperationResponsePtrType) ToConnectorMappingCompleteOperationResponsePtrOutputWithContext(ctx context.Context) ConnectorMappingCompleteOperationResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectorMappingCompleteOperationResponsePtrOutput)
}

// The complete operation.
type ConnectorMappingCompleteOperationResponseOutput struct{ *pulumi.OutputState }

func (ConnectorMappingCompleteOperationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectorMappingCompleteOperationResponse)(nil)).Elem()
}

func (o ConnectorMappingCompleteOperationResponseOutput) ToConnectorMappingCompleteOperationResponseOutput() ConnectorMappingCompleteOperationResponseOutput {
	return o
}

func (o ConnectorMappingCompleteOperationResponseOutput) ToConnectorMappingCompleteOperationResponseOutputWithContext(ctx context.Context) ConnectorMappingCompleteOperationResponseOutput {
	return o
}

func (o ConnectorMappingCompleteOperationResponseOutput) ToConnectorMappingCompleteOperationResponsePtrOutput() ConnectorMappingCompleteOperationResponsePtrOutput {
	return o.ToConnectorMappingCompleteOperationResponsePtrOutputWithContext(context.Background())
}

func (o ConnectorMappingCompleteOperationResponseOutput) ToConnectorMappingCompleteOperationResponsePtrOutputWithContext(ctx context.Context) ConnectorMappingCompleteOperationResponsePtrOutput {
	return o.ApplyT(func(v ConnectorMappingCompleteOperationResponse) *ConnectorMappingCompleteOperationResponse {
		return &v
	}).(ConnectorMappingCompleteOperationResponsePtrOutput)
}

// The type of completion operation.
func (o ConnectorMappingCompleteOperationResponseOutput) CompletionOperationType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ConnectorMappingCompleteOperationResponse) *string { return v.CompletionOperationType }).(pulumi.StringPtrOutput)
}

// The destination folder where files will be moved to once the import is done.
func (o ConnectorMappingCompleteOperationResponseOutput) DestinationFolder() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ConnectorMappingCompleteOperationResponse) *string { return v.DestinationFolder }).(pulumi.StringPtrOutput)
}

type ConnectorMappingCompleteOperationResponsePtrOutput struct{ *pulumi.OutputState }

func (ConnectorMappingCompleteOperationResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ConnectorMappingCompleteOperationResponse)(nil)).Elem()
}

func (o ConnectorMappingCompleteOperationResponsePtrOutput) ToConnectorMappingCompleteOperationResponsePtrOutput() ConnectorMappingCompleteOperationResponsePtrOutput {
	return o
}

func (o ConnectorMappingCompleteOperationResponsePtrOutput) ToConnectorMappingCompleteOperationResponsePtrOutputWithContext(ctx context.Context) ConnectorMappingCompleteOperationResponsePtrOutput {
	return o
}

func (o ConnectorMappingCompleteOperationResponsePtrOutput) Elem() ConnectorMappingCompleteOperationResponseOutput {
	return o.ApplyT(func(v *ConnectorMappingCompleteOperationResponse) ConnectorMappingCompleteOperationResponse {
		return *v
	}).(ConnectorMappingCompleteOperationResponseOutput)
}

// The type of completion operation.
func (o ConnectorMappingCompleteOperationResponsePtrOutput) CompletionOperationType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConnectorMappingCompleteOperationResponse) *string {
		if v == nil {
			return nil
		}
		return v.CompletionOperationType
	}).(pulumi.StringPtrOutput)
}

// The destination folder where files will be moved to once the import is done.
func (o ConnectorMappingCompleteOperationResponsePtrOutput) DestinationFolder() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConnectorMappingCompleteOperationResponse) *string {
		if v == nil {
			return nil
		}
		return v.DestinationFolder
	}).(pulumi.StringPtrOutput)
}

// The error management.
type ConnectorMappingErrorManagement struct {
	// The error limit allowed while importing data.
	ErrorLimit *int `pulumi:"errorLimit"`
	// The type of error management to use for the mapping.
	ErrorManagementType string `pulumi:"errorManagementType"`
}

// ConnectorMappingErrorManagementInput is an input type that accepts ConnectorMappingErrorManagementArgs and ConnectorMappingErrorManagementOutput values.
// You can construct a concrete instance of `ConnectorMappingErrorManagementInput` via:
//
//          ConnectorMappingErrorManagementArgs{...}
type ConnectorMappingErrorManagementInput interface {
	pulumi.Input

	ToConnectorMappingErrorManagementOutput() ConnectorMappingErrorManagementOutput
	ToConnectorMappingErrorManagementOutputWithContext(context.Context) ConnectorMappingErrorManagementOutput
}

// The error management.
type ConnectorMappingErrorManagementArgs struct {
	// The error limit allowed while importing data.
	ErrorLimit pulumi.IntPtrInput `pulumi:"errorLimit"`
	// The type of error management to use for the mapping.
	ErrorManagementType pulumi.StringInput `pulumi:"errorManagementType"`
}

func (ConnectorMappingErrorManagementArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectorMappingErrorManagement)(nil)).Elem()
}

func (i ConnectorMappingErrorManagementArgs) ToConnectorMappingErrorManagementOutput() ConnectorMappingErrorManagementOutput {
	return i.ToConnectorMappingErrorManagementOutputWithContext(context.Background())
}

func (i ConnectorMappingErrorManagementArgs) ToConnectorMappingErrorManagementOutputWithContext(ctx context.Context) ConnectorMappingErrorManagementOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectorMappingErrorManagementOutput)
}

func (i ConnectorMappingErrorManagementArgs) ToConnectorMappingErrorManagementPtrOutput() ConnectorMappingErrorManagementPtrOutput {
	return i.ToConnectorMappingErrorManagementPtrOutputWithContext(context.Background())
}

func (i ConnectorMappingErrorManagementArgs) ToConnectorMappingErrorManagementPtrOutputWithContext(ctx context.Context) ConnectorMappingErrorManagementPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectorMappingErrorManagementOutput).ToConnectorMappingErrorManagementPtrOutputWithContext(ctx)
}

// ConnectorMappingErrorManagementPtrInput is an input type that accepts ConnectorMappingErrorManagementArgs, ConnectorMappingErrorManagementPtr and ConnectorMappingErrorManagementPtrOutput values.
// You can construct a concrete instance of `ConnectorMappingErrorManagementPtrInput` via:
//
//          ConnectorMappingErrorManagementArgs{...}
//
//  or:
//
//          nil
type ConnectorMappingErrorManagementPtrInput interface {
	pulumi.Input

	ToConnectorMappingErrorManagementPtrOutput() ConnectorMappingErrorManagementPtrOutput
	ToConnectorMappingErrorManagementPtrOutputWithContext(context.Context) ConnectorMappingErrorManagementPtrOutput
}

type connectorMappingErrorManagementPtrType ConnectorMappingErrorManagementArgs

func ConnectorMappingErrorManagementPtr(v *ConnectorMappingErrorManagementArgs) ConnectorMappingErrorManagementPtrInput {
	return (*connectorMappingErrorManagementPtrType)(v)
}

func (*connectorMappingErrorManagementPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ConnectorMappingErrorManagement)(nil)).Elem()
}

func (i *connectorMappingErrorManagementPtrType) ToConnectorMappingErrorManagementPtrOutput() ConnectorMappingErrorManagementPtrOutput {
	return i.ToConnectorMappingErrorManagementPtrOutputWithContext(context.Background())
}

func (i *connectorMappingErrorManagementPtrType) ToConnectorMappingErrorManagementPtrOutputWithContext(ctx context.Context) ConnectorMappingErrorManagementPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectorMappingErrorManagementPtrOutput)
}

// The error management.
type ConnectorMappingErrorManagementOutput struct{ *pulumi.OutputState }

func (ConnectorMappingErrorManagementOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectorMappingErrorManagement)(nil)).Elem()
}

func (o ConnectorMappingErrorManagementOutput) ToConnectorMappingErrorManagementOutput() ConnectorMappingErrorManagementOutput {
	return o
}

func (o ConnectorMappingErrorManagementOutput) ToConnectorMappingErrorManagementOutputWithContext(ctx context.Context) ConnectorMappingErrorManagementOutput {
	return o
}

func (o ConnectorMappingErrorManagementOutput) ToConnectorMappingErrorManagementPtrOutput() ConnectorMappingErrorManagementPtrOutput {
	return o.ToConnectorMappingErrorManagementPtrOutputWithContext(context.Background())
}

func (o ConnectorMappingErrorManagementOutput) ToConnectorMappingErrorManagementPtrOutputWithContext(ctx context.Context) ConnectorMappingErrorManagementPtrOutput {
	return o.ApplyT(func(v ConnectorMappingErrorManagement) *ConnectorMappingErrorManagement {
		return &v
	}).(ConnectorMappingErrorManagementPtrOutput)
}

// The error limit allowed while importing data.
func (o ConnectorMappingErrorManagementOutput) ErrorLimit() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ConnectorMappingErrorManagement) *int { return v.ErrorLimit }).(pulumi.IntPtrOutput)
}

// The type of error management to use for the mapping.
func (o ConnectorMappingErrorManagementOutput) ErrorManagementType() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectorMappingErrorManagement) string { return v.ErrorManagementType }).(pulumi.StringOutput)
}

type ConnectorMappingErrorManagementPtrOutput struct{ *pulumi.OutputState }

func (ConnectorMappingErrorManagementPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ConnectorMappingErrorManagement)(nil)).Elem()
}

func (o ConnectorMappingErrorManagementPtrOutput) ToConnectorMappingErrorManagementPtrOutput() ConnectorMappingErrorManagementPtrOutput {
	return o
}

func (o ConnectorMappingErrorManagementPtrOutput) ToConnectorMappingErrorManagementPtrOutputWithContext(ctx context.Context) ConnectorMappingErrorManagementPtrOutput {
	return o
}

func (o ConnectorMappingErrorManagementPtrOutput) Elem() ConnectorMappingErrorManagementOutput {
	return o.ApplyT(func(v *ConnectorMappingErrorManagement) ConnectorMappingErrorManagement { return *v }).(ConnectorMappingErrorManagementOutput)
}

// The error limit allowed while importing data.
func (o ConnectorMappingErrorManagementPtrOutput) ErrorLimit() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ConnectorMappingErrorManagement) *int {
		if v == nil {
			return nil
		}
		return v.ErrorLimit
	}).(pulumi.IntPtrOutput)
}

// The type of error management to use for the mapping.
func (o ConnectorMappingErrorManagementPtrOutput) ErrorManagementType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConnectorMappingErrorManagement) *string {
		if v == nil {
			return nil
		}
		return &v.ErrorManagementType
	}).(pulumi.StringPtrOutput)
}

// The error management.
type ConnectorMappingErrorManagementResponse struct {
	// The error limit allowed while importing data.
	ErrorLimit *int `pulumi:"errorLimit"`
	// The type of error management to use for the mapping.
	ErrorManagementType string `pulumi:"errorManagementType"`
}

// ConnectorMappingErrorManagementResponseInput is an input type that accepts ConnectorMappingErrorManagementResponseArgs and ConnectorMappingErrorManagementResponseOutput values.
// You can construct a concrete instance of `ConnectorMappingErrorManagementResponseInput` via:
//
//          ConnectorMappingErrorManagementResponseArgs{...}
type ConnectorMappingErrorManagementResponseInput interface {
	pulumi.Input

	ToConnectorMappingErrorManagementResponseOutput() ConnectorMappingErrorManagementResponseOutput
	ToConnectorMappingErrorManagementResponseOutputWithContext(context.Context) ConnectorMappingErrorManagementResponseOutput
}

// The error management.
type ConnectorMappingErrorManagementResponseArgs struct {
	// The error limit allowed while importing data.
	ErrorLimit pulumi.IntPtrInput `pulumi:"errorLimit"`
	// The type of error management to use for the mapping.
	ErrorManagementType pulumi.StringInput `pulumi:"errorManagementType"`
}

func (ConnectorMappingErrorManagementResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectorMappingErrorManagementResponse)(nil)).Elem()
}

func (i ConnectorMappingErrorManagementResponseArgs) ToConnectorMappingErrorManagementResponseOutput() ConnectorMappingErrorManagementResponseOutput {
	return i.ToConnectorMappingErrorManagementResponseOutputWithContext(context.Background())
}

func (i ConnectorMappingErrorManagementResponseArgs) ToConnectorMappingErrorManagementResponseOutputWithContext(ctx context.Context) ConnectorMappingErrorManagementResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectorMappingErrorManagementResponseOutput)
}

func (i ConnectorMappingErrorManagementResponseArgs) ToConnectorMappingErrorManagementResponsePtrOutput() ConnectorMappingErrorManagementResponsePtrOutput {
	return i.ToConnectorMappingErrorManagementResponsePtrOutputWithContext(context.Background())
}

func (i ConnectorMappingErrorManagementResponseArgs) ToConnectorMappingErrorManagementResponsePtrOutputWithContext(ctx context.Context) ConnectorMappingErrorManagementResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectorMappingErrorManagementResponseOutput).ToConnectorMappingErrorManagementResponsePtrOutputWithContext(ctx)
}

// ConnectorMappingErrorManagementResponsePtrInput is an input type that accepts ConnectorMappingErrorManagementResponseArgs, ConnectorMappingErrorManagementResponsePtr and ConnectorMappingErrorManagementResponsePtrOutput values.
// You can construct a concrete instance of `ConnectorMappingErrorManagementResponsePtrInput` via:
//
//          ConnectorMappingErrorManagementResponseArgs{...}
//
//  or:
//
//          nil
type ConnectorMappingErrorManagementResponsePtrInput interface {
	pulumi.Input

	ToConnectorMappingErrorManagementResponsePtrOutput() ConnectorMappingErrorManagementResponsePtrOutput
	ToConnectorMappingErrorManagementResponsePtrOutputWithContext(context.Context) ConnectorMappingErrorManagementResponsePtrOutput
}

type connectorMappingErrorManagementResponsePtrType ConnectorMappingErrorManagementResponseArgs

func ConnectorMappingErrorManagementResponsePtr(v *ConnectorMappingErrorManagementResponseArgs) ConnectorMappingErrorManagementResponsePtrInput {
	return (*connectorMappingErrorManagementResponsePtrType)(v)
}

func (*connectorMappingErrorManagementResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ConnectorMappingErrorManagementResponse)(nil)).Elem()
}

func (i *connectorMappingErrorManagementResponsePtrType) ToConnectorMappingErrorManagementResponsePtrOutput() ConnectorMappingErrorManagementResponsePtrOutput {
	return i.ToConnectorMappingErrorManagementResponsePtrOutputWithContext(context.Background())
}

func (i *connectorMappingErrorManagementResponsePtrType) ToConnectorMappingErrorManagementResponsePtrOutputWithContext(ctx context.Context) ConnectorMappingErrorManagementResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectorMappingErrorManagementResponsePtrOutput)
}

// The error management.
type ConnectorMappingErrorManagementResponseOutput struct{ *pulumi.OutputState }

func (ConnectorMappingErrorManagementResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectorMappingErrorManagementResponse)(nil)).Elem()
}

func (o ConnectorMappingErrorManagementResponseOutput) ToConnectorMappingErrorManagementResponseOutput() ConnectorMappingErrorManagementResponseOutput {
	return o
}

func (o ConnectorMappingErrorManagementResponseOutput) ToConnectorMappingErrorManagementResponseOutputWithContext(ctx context.Context) ConnectorMappingErrorManagementResponseOutput {
	return o
}

func (o ConnectorMappingErrorManagementResponseOutput) ToConnectorMappingErrorManagementResponsePtrOutput() ConnectorMappingErrorManagementResponsePtrOutput {
	return o.ToConnectorMappingErrorManagementResponsePtrOutputWithContext(context.Background())
}

func (o ConnectorMappingErrorManagementResponseOutput) ToConnectorMappingErrorManagementResponsePtrOutputWithContext(ctx context.Context) ConnectorMappingErrorManagementResponsePtrOutput {
	return o.ApplyT(func(v ConnectorMappingErrorManagementResponse) *ConnectorMappingErrorManagementResponse {
		return &v
	}).(ConnectorMappingErrorManagementResponsePtrOutput)
}

// The error limit allowed while importing data.
func (o ConnectorMappingErrorManagementResponseOutput) ErrorLimit() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ConnectorMappingErrorManagementResponse) *int { return v.ErrorLimit }).(pulumi.IntPtrOutput)
}

// The type of error management to use for the mapping.
func (o ConnectorMappingErrorManagementResponseOutput) ErrorManagementType() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectorMappingErrorManagementResponse) string { return v.ErrorManagementType }).(pulumi.StringOutput)
}

type ConnectorMappingErrorManagementResponsePtrOutput struct{ *pulumi.OutputState }

func (ConnectorMappingErrorManagementResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ConnectorMappingErrorManagementResponse)(nil)).Elem()
}

func (o ConnectorMappingErrorManagementResponsePtrOutput) ToConnectorMappingErrorManagementResponsePtrOutput() ConnectorMappingErrorManagementResponsePtrOutput {
	return o
}

func (o ConnectorMappingErrorManagementResponsePtrOutput) ToConnectorMappingErrorManagementResponsePtrOutputWithContext(ctx context.Context) ConnectorMappingErrorManagementResponsePtrOutput {
	return o
}

func (o ConnectorMappingErrorManagementResponsePtrOutput) Elem() ConnectorMappingErrorManagementResponseOutput {
	return o.ApplyT(func(v *ConnectorMappingErrorManagementResponse) ConnectorMappingErrorManagementResponse { return *v }).(ConnectorMappingErrorManagementResponseOutput)
}

// The error limit allowed while importing data.
func (o ConnectorMappingErrorManagementResponsePtrOutput) ErrorLimit() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ConnectorMappingErrorManagementResponse) *int {
		if v == nil {
			return nil
		}
		return v.ErrorLimit
	}).(pulumi.IntPtrOutput)
}

// The type of error management to use for the mapping.
func (o ConnectorMappingErrorManagementResponsePtrOutput) ErrorManagementType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConnectorMappingErrorManagementResponse) *string {
		if v == nil {
			return nil
		}
		return &v.ErrorManagementType
	}).(pulumi.StringPtrOutput)
}

// Connector mapping property format.
type ConnectorMappingFormat struct {
	// The oData language.
	AcceptLanguage *string `pulumi:"acceptLanguage"`
	// Character separating array elements.
	ArraySeparator *string `pulumi:"arraySeparator"`
	// The character that signifies a break between columns.
	ColumnDelimiter *string `pulumi:"columnDelimiter"`
	// The type mapping format.
	FormatType string `pulumi:"formatType"`
	// Quote character, used to indicate enquoted fields.
	QuoteCharacter *string `pulumi:"quoteCharacter"`
	// Escape character for quotes, can be the same as the quoteCharacter.
	QuoteEscapeCharacter *string `pulumi:"quoteEscapeCharacter"`
}

// ConnectorMappingFormatInput is an input type that accepts ConnectorMappingFormatArgs and ConnectorMappingFormatOutput values.
// You can construct a concrete instance of `ConnectorMappingFormatInput` via:
//
//          ConnectorMappingFormatArgs{...}
type ConnectorMappingFormatInput interface {
	pulumi.Input

	ToConnectorMappingFormatOutput() ConnectorMappingFormatOutput
	ToConnectorMappingFormatOutputWithContext(context.Context) ConnectorMappingFormatOutput
}

// Connector mapping property format.
type ConnectorMappingFormatArgs struct {
	// The oData language.
	AcceptLanguage pulumi.StringPtrInput `pulumi:"acceptLanguage"`
	// Character separating array elements.
	ArraySeparator pulumi.StringPtrInput `pulumi:"arraySeparator"`
	// The character that signifies a break between columns.
	ColumnDelimiter pulumi.StringPtrInput `pulumi:"columnDelimiter"`
	// The type mapping format.
	FormatType pulumi.StringInput `pulumi:"formatType"`
	// Quote character, used to indicate enquoted fields.
	QuoteCharacter pulumi.StringPtrInput `pulumi:"quoteCharacter"`
	// Escape character for quotes, can be the same as the quoteCharacter.
	QuoteEscapeCharacter pulumi.StringPtrInput `pulumi:"quoteEscapeCharacter"`
}

func (ConnectorMappingFormatArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectorMappingFormat)(nil)).Elem()
}

func (i ConnectorMappingFormatArgs) ToConnectorMappingFormatOutput() ConnectorMappingFormatOutput {
	return i.ToConnectorMappingFormatOutputWithContext(context.Background())
}

func (i ConnectorMappingFormatArgs) ToConnectorMappingFormatOutputWithContext(ctx context.Context) ConnectorMappingFormatOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectorMappingFormatOutput)
}

func (i ConnectorMappingFormatArgs) ToConnectorMappingFormatPtrOutput() ConnectorMappingFormatPtrOutput {
	return i.ToConnectorMappingFormatPtrOutputWithContext(context.Background())
}

func (i ConnectorMappingFormatArgs) ToConnectorMappingFormatPtrOutputWithContext(ctx context.Context) ConnectorMappingFormatPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectorMappingFormatOutput).ToConnectorMappingFormatPtrOutputWithContext(ctx)
}

// ConnectorMappingFormatPtrInput is an input type that accepts ConnectorMappingFormatArgs, ConnectorMappingFormatPtr and ConnectorMappingFormatPtrOutput values.
// You can construct a concrete instance of `ConnectorMappingFormatPtrInput` via:
//
//          ConnectorMappingFormatArgs{...}
//
//  or:
//
//          nil
type ConnectorMappingFormatPtrInput interface {
	pulumi.Input

	ToConnectorMappingFormatPtrOutput() ConnectorMappingFormatPtrOutput
	ToConnectorMappingFormatPtrOutputWithContext(context.Context) ConnectorMappingFormatPtrOutput
}

type connectorMappingFormatPtrType ConnectorMappingFormatArgs

func ConnectorMappingFormatPtr(v *ConnectorMappingFormatArgs) ConnectorMappingFormatPtrInput {
	return (*connectorMappingFormatPtrType)(v)
}

func (*connectorMappingFormatPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ConnectorMappingFormat)(nil)).Elem()
}

func (i *connectorMappingFormatPtrType) ToConnectorMappingFormatPtrOutput() ConnectorMappingFormatPtrOutput {
	return i.ToConnectorMappingFormatPtrOutputWithContext(context.Background())
}

func (i *connectorMappingFormatPtrType) ToConnectorMappingFormatPtrOutputWithContext(ctx context.Context) ConnectorMappingFormatPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectorMappingFormatPtrOutput)
}

// Connector mapping property format.
type ConnectorMappingFormatOutput struct{ *pulumi.OutputState }

func (ConnectorMappingFormatOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectorMappingFormat)(nil)).Elem()
}

func (o ConnectorMappingFormatOutput) ToConnectorMappingFormatOutput() ConnectorMappingFormatOutput {
	return o
}

func (o ConnectorMappingFormatOutput) ToConnectorMappingFormatOutputWithContext(ctx context.Context) ConnectorMappingFormatOutput {
	return o
}

func (o ConnectorMappingFormatOutput) ToConnectorMappingFormatPtrOutput() ConnectorMappingFormatPtrOutput {
	return o.ToConnectorMappingFormatPtrOutputWithContext(context.Background())
}

func (o ConnectorMappingFormatOutput) ToConnectorMappingFormatPtrOutputWithContext(ctx context.Context) ConnectorMappingFormatPtrOutput {
	return o.ApplyT(func(v ConnectorMappingFormat) *ConnectorMappingFormat {
		return &v
	}).(ConnectorMappingFormatPtrOutput)
}

// The oData language.
func (o ConnectorMappingFormatOutput) AcceptLanguage() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ConnectorMappingFormat) *string { return v.AcceptLanguage }).(pulumi.StringPtrOutput)
}

// Character separating array elements.
func (o ConnectorMappingFormatOutput) ArraySeparator() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ConnectorMappingFormat) *string { return v.ArraySeparator }).(pulumi.StringPtrOutput)
}

// The character that signifies a break between columns.
func (o ConnectorMappingFormatOutput) ColumnDelimiter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ConnectorMappingFormat) *string { return v.ColumnDelimiter }).(pulumi.StringPtrOutput)
}

// The type mapping format.
func (o ConnectorMappingFormatOutput) FormatType() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectorMappingFormat) string { return v.FormatType }).(pulumi.StringOutput)
}

// Quote character, used to indicate enquoted fields.
func (o ConnectorMappingFormatOutput) QuoteCharacter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ConnectorMappingFormat) *string { return v.QuoteCharacter }).(pulumi.StringPtrOutput)
}

// Escape character for quotes, can be the same as the quoteCharacter.
func (o ConnectorMappingFormatOutput) QuoteEscapeCharacter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ConnectorMappingFormat) *string { return v.QuoteEscapeCharacter }).(pulumi.StringPtrOutput)
}

type ConnectorMappingFormatPtrOutput struct{ *pulumi.OutputState }

func (ConnectorMappingFormatPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ConnectorMappingFormat)(nil)).Elem()
}

func (o ConnectorMappingFormatPtrOutput) ToConnectorMappingFormatPtrOutput() ConnectorMappingFormatPtrOutput {
	return o
}

func (o ConnectorMappingFormatPtrOutput) ToConnectorMappingFormatPtrOutputWithContext(ctx context.Context) ConnectorMappingFormatPtrOutput {
	return o
}

func (o ConnectorMappingFormatPtrOutput) Elem() ConnectorMappingFormatOutput {
	return o.ApplyT(func(v *ConnectorMappingFormat) ConnectorMappingFormat { return *v }).(ConnectorMappingFormatOutput)
}

// The oData language.
func (o ConnectorMappingFormatPtrOutput) AcceptLanguage() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConnectorMappingFormat) *string {
		if v == nil {
			return nil
		}
		return v.AcceptLanguage
	}).(pulumi.StringPtrOutput)
}

// Character separating array elements.
func (o ConnectorMappingFormatPtrOutput) ArraySeparator() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConnectorMappingFormat) *string {
		if v == nil {
			return nil
		}
		return v.ArraySeparator
	}).(pulumi.StringPtrOutput)
}

// The character that signifies a break between columns.
func (o ConnectorMappingFormatPtrOutput) ColumnDelimiter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConnectorMappingFormat) *string {
		if v == nil {
			return nil
		}
		return v.ColumnDelimiter
	}).(pulumi.StringPtrOutput)
}

// The type mapping format.
func (o ConnectorMappingFormatPtrOutput) FormatType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConnectorMappingFormat) *string {
		if v == nil {
			return nil
		}
		return &v.FormatType
	}).(pulumi.StringPtrOutput)
}

// Quote character, used to indicate enquoted fields.
func (o ConnectorMappingFormatPtrOutput) QuoteCharacter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConnectorMappingFormat) *string {
		if v == nil {
			return nil
		}
		return v.QuoteCharacter
	}).(pulumi.StringPtrOutput)
}

// Escape character for quotes, can be the same as the quoteCharacter.
func (o ConnectorMappingFormatPtrOutput) QuoteEscapeCharacter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConnectorMappingFormat) *string {
		if v == nil {
			return nil
		}
		return v.QuoteEscapeCharacter
	}).(pulumi.StringPtrOutput)
}

// Connector mapping property format.
type ConnectorMappingFormatResponse struct {
	// The oData language.
	AcceptLanguage *string `pulumi:"acceptLanguage"`
	// Character separating array elements.
	ArraySeparator *string `pulumi:"arraySeparator"`
	// The character that signifies a break between columns.
	ColumnDelimiter *string `pulumi:"columnDelimiter"`
	// The type mapping format.
	FormatType string `pulumi:"formatType"`
	// Quote character, used to indicate enquoted fields.
	QuoteCharacter *string `pulumi:"quoteCharacter"`
	// Escape character for quotes, can be the same as the quoteCharacter.
	QuoteEscapeCharacter *string `pulumi:"quoteEscapeCharacter"`
}

// ConnectorMappingFormatResponseInput is an input type that accepts ConnectorMappingFormatResponseArgs and ConnectorMappingFormatResponseOutput values.
// You can construct a concrete instance of `ConnectorMappingFormatResponseInput` via:
//
//          ConnectorMappingFormatResponseArgs{...}
type ConnectorMappingFormatResponseInput interface {
	pulumi.Input

	ToConnectorMappingFormatResponseOutput() ConnectorMappingFormatResponseOutput
	ToConnectorMappingFormatResponseOutputWithContext(context.Context) ConnectorMappingFormatResponseOutput
}

// Connector mapping property format.
type ConnectorMappingFormatResponseArgs struct {
	// The oData language.
	AcceptLanguage pulumi.StringPtrInput `pulumi:"acceptLanguage"`
	// Character separating array elements.
	ArraySeparator pulumi.StringPtrInput `pulumi:"arraySeparator"`
	// The character that signifies a break between columns.
	ColumnDelimiter pulumi.StringPtrInput `pulumi:"columnDelimiter"`
	// The type mapping format.
	FormatType pulumi.StringInput `pulumi:"formatType"`
	// Quote character, used to indicate enquoted fields.
	QuoteCharacter pulumi.StringPtrInput `pulumi:"quoteCharacter"`
	// Escape character for quotes, can be the same as the quoteCharacter.
	QuoteEscapeCharacter pulumi.StringPtrInput `pulumi:"quoteEscapeCharacter"`
}

func (ConnectorMappingFormatResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectorMappingFormatResponse)(nil)).Elem()
}

func (i ConnectorMappingFormatResponseArgs) ToConnectorMappingFormatResponseOutput() ConnectorMappingFormatResponseOutput {
	return i.ToConnectorMappingFormatResponseOutputWithContext(context.Background())
}

func (i ConnectorMappingFormatResponseArgs) ToConnectorMappingFormatResponseOutputWithContext(ctx context.Context) ConnectorMappingFormatResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectorMappingFormatResponseOutput)
}

func (i ConnectorMappingFormatResponseArgs) ToConnectorMappingFormatResponsePtrOutput() ConnectorMappingFormatResponsePtrOutput {
	return i.ToConnectorMappingFormatResponsePtrOutputWithContext(context.Background())
}

func (i ConnectorMappingFormatResponseArgs) ToConnectorMappingFormatResponsePtrOutputWithContext(ctx context.Context) ConnectorMappingFormatResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectorMappingFormatResponseOutput).ToConnectorMappingFormatResponsePtrOutputWithContext(ctx)
}

// ConnectorMappingFormatResponsePtrInput is an input type that accepts ConnectorMappingFormatResponseArgs, ConnectorMappingFormatResponsePtr and ConnectorMappingFormatResponsePtrOutput values.
// You can construct a concrete instance of `ConnectorMappingFormatResponsePtrInput` via:
//
//          ConnectorMappingFormatResponseArgs{...}
//
//  or:
//
//          nil
type ConnectorMappingFormatResponsePtrInput interface {
	pulumi.Input

	ToConnectorMappingFormatResponsePtrOutput() ConnectorMappingFormatResponsePtrOutput
	ToConnectorMappingFormatResponsePtrOutputWithContext(context.Context) ConnectorMappingFormatResponsePtrOutput
}

type connectorMappingFormatResponsePtrType ConnectorMappingFormatResponseArgs

func ConnectorMappingFormatResponsePtr(v *ConnectorMappingFormatResponseArgs) ConnectorMappingFormatResponsePtrInput {
	return (*connectorMappingFormatResponsePtrType)(v)
}

func (*connectorMappingFormatResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ConnectorMappingFormatResponse)(nil)).Elem()
}

func (i *connectorMappingFormatResponsePtrType) ToConnectorMappingFormatResponsePtrOutput() ConnectorMappingFormatResponsePtrOutput {
	return i.ToConnectorMappingFormatResponsePtrOutputWithContext(context.Background())
}

func (i *connectorMappingFormatResponsePtrType) ToConnectorMappingFormatResponsePtrOutputWithContext(ctx context.Context) ConnectorMappingFormatResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectorMappingFormatResponsePtrOutput)
}

// Connector mapping property format.
type ConnectorMappingFormatResponseOutput struct{ *pulumi.OutputState }

func (ConnectorMappingFormatResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectorMappingFormatResponse)(nil)).Elem()
}

func (o ConnectorMappingFormatResponseOutput) ToConnectorMappingFormatResponseOutput() ConnectorMappingFormatResponseOutput {
	return o
}

func (o ConnectorMappingFormatResponseOutput) ToConnectorMappingFormatResponseOutputWithContext(ctx context.Context) ConnectorMappingFormatResponseOutput {
	return o
}

func (o ConnectorMappingFormatResponseOutput) ToConnectorMappingFormatResponsePtrOutput() ConnectorMappingFormatResponsePtrOutput {
	return o.ToConnectorMappingFormatResponsePtrOutputWithContext(context.Background())
}

func (o ConnectorMappingFormatResponseOutput) ToConnectorMappingFormatResponsePtrOutputWithContext(ctx context.Context) ConnectorMappingFormatResponsePtrOutput {
	return o.ApplyT(func(v ConnectorMappingFormatResponse) *ConnectorMappingFormatResponse {
		return &v
	}).(ConnectorMappingFormatResponsePtrOutput)
}

// The oData language.
func (o ConnectorMappingFormatResponseOutput) AcceptLanguage() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ConnectorMappingFormatResponse) *string { return v.AcceptLanguage }).(pulumi.StringPtrOutput)
}

// Character separating array elements.
func (o ConnectorMappingFormatResponseOutput) ArraySeparator() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ConnectorMappingFormatResponse) *string { return v.ArraySeparator }).(pulumi.StringPtrOutput)
}

// The character that signifies a break between columns.
func (o ConnectorMappingFormatResponseOutput) ColumnDelimiter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ConnectorMappingFormatResponse) *string { return v.ColumnDelimiter }).(pulumi.StringPtrOutput)
}

// The type mapping format.
func (o ConnectorMappingFormatResponseOutput) FormatType() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectorMappingFormatResponse) string { return v.FormatType }).(pulumi.StringOutput)
}

// Quote character, used to indicate enquoted fields.
func (o ConnectorMappingFormatResponseOutput) QuoteCharacter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ConnectorMappingFormatResponse) *string { return v.QuoteCharacter }).(pulumi.StringPtrOutput)
}

// Escape character for quotes, can be the same as the quoteCharacter.
func (o ConnectorMappingFormatResponseOutput) QuoteEscapeCharacter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ConnectorMappingFormatResponse) *string { return v.QuoteEscapeCharacter }).(pulumi.StringPtrOutput)
}

type ConnectorMappingFormatResponsePtrOutput struct{ *pulumi.OutputState }

func (ConnectorMappingFormatResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ConnectorMappingFormatResponse)(nil)).Elem()
}

func (o ConnectorMappingFormatResponsePtrOutput) ToConnectorMappingFormatResponsePtrOutput() ConnectorMappingFormatResponsePtrOutput {
	return o
}

func (o ConnectorMappingFormatResponsePtrOutput) ToConnectorMappingFormatResponsePtrOutputWithContext(ctx context.Context) ConnectorMappingFormatResponsePtrOutput {
	return o
}

func (o ConnectorMappingFormatResponsePtrOutput) Elem() ConnectorMappingFormatResponseOutput {
	return o.ApplyT(func(v *ConnectorMappingFormatResponse) ConnectorMappingFormatResponse { return *v }).(ConnectorMappingFormatResponseOutput)
}

// The oData language.
func (o ConnectorMappingFormatResponsePtrOutput) AcceptLanguage() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConnectorMappingFormatResponse) *string {
		if v == nil {
			return nil
		}
		return v.AcceptLanguage
	}).(pulumi.StringPtrOutput)
}

// Character separating array elements.
func (o ConnectorMappingFormatResponsePtrOutput) ArraySeparator() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConnectorMappingFormatResponse) *string {
		if v == nil {
			return nil
		}
		return v.ArraySeparator
	}).(pulumi.StringPtrOutput)
}

// The character that signifies a break between columns.
func (o ConnectorMappingFormatResponsePtrOutput) ColumnDelimiter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConnectorMappingFormatResponse) *string {
		if v == nil {
			return nil
		}
		return v.ColumnDelimiter
	}).(pulumi.StringPtrOutput)
}

// The type mapping format.
func (o ConnectorMappingFormatResponsePtrOutput) FormatType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConnectorMappingFormatResponse) *string {
		if v == nil {
			return nil
		}
		return &v.FormatType
	}).(pulumi.StringPtrOutput)
}

// Quote character, used to indicate enquoted fields.
func (o ConnectorMappingFormatResponsePtrOutput) QuoteCharacter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConnectorMappingFormatResponse) *string {
		if v == nil {
			return nil
		}
		return v.QuoteCharacter
	}).(pulumi.StringPtrOutput)
}

// Escape character for quotes, can be the same as the quoteCharacter.
func (o ConnectorMappingFormatResponsePtrOutput) QuoteEscapeCharacter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConnectorMappingFormatResponse) *string {
		if v == nil {
			return nil
		}
		return v.QuoteEscapeCharacter
	}).(pulumi.StringPtrOutput)
}

// The connector mapping properties.
type ConnectorMappingProperties struct {
	// The availability of mapping property.
	Availability ConnectorMappingAvailability `pulumi:"availability"`
	// The operation after import is done.
	CompleteOperation ConnectorMappingCompleteOperation `pulumi:"completeOperation"`
	// The error management setting for the mapping.
	ErrorManagement ConnectorMappingErrorManagement `pulumi:"errorManagement"`
	// The file filter for the mapping.
	FileFilter *string `pulumi:"fileFilter"`
	// The folder path for the mapping.
	FolderPath *string `pulumi:"folderPath"`
	// The format of mapping property.
	Format ConnectorMappingFormat `pulumi:"format"`
	// If the file contains a header or not.
	HasHeader *bool `pulumi:"hasHeader"`
	// Ingestion mapping information at property level.
	Structure []ConnectorMappingStructure `pulumi:"structure"`
}

// ConnectorMappingPropertiesInput is an input type that accepts ConnectorMappingPropertiesArgs and ConnectorMappingPropertiesOutput values.
// You can construct a concrete instance of `ConnectorMappingPropertiesInput` via:
//
//          ConnectorMappingPropertiesArgs{...}
type ConnectorMappingPropertiesInput interface {
	pulumi.Input

	ToConnectorMappingPropertiesOutput() ConnectorMappingPropertiesOutput
	ToConnectorMappingPropertiesOutputWithContext(context.Context) ConnectorMappingPropertiesOutput
}

// The connector mapping properties.
type ConnectorMappingPropertiesArgs struct {
	// The availability of mapping property.
	Availability ConnectorMappingAvailabilityInput `pulumi:"availability"`
	// The operation after import is done.
	CompleteOperation ConnectorMappingCompleteOperationInput `pulumi:"completeOperation"`
	// The error management setting for the mapping.
	ErrorManagement ConnectorMappingErrorManagementInput `pulumi:"errorManagement"`
	// The file filter for the mapping.
	FileFilter pulumi.StringPtrInput `pulumi:"fileFilter"`
	// The folder path for the mapping.
	FolderPath pulumi.StringPtrInput `pulumi:"folderPath"`
	// The format of mapping property.
	Format ConnectorMappingFormatInput `pulumi:"format"`
	// If the file contains a header or not.
	HasHeader pulumi.BoolPtrInput `pulumi:"hasHeader"`
	// Ingestion mapping information at property level.
	Structure ConnectorMappingStructureArrayInput `pulumi:"structure"`
}

func (ConnectorMappingPropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectorMappingProperties)(nil)).Elem()
}

func (i ConnectorMappingPropertiesArgs) ToConnectorMappingPropertiesOutput() ConnectorMappingPropertiesOutput {
	return i.ToConnectorMappingPropertiesOutputWithContext(context.Background())
}

func (i ConnectorMappingPropertiesArgs) ToConnectorMappingPropertiesOutputWithContext(ctx context.Context) ConnectorMappingPropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectorMappingPropertiesOutput)
}

func (i ConnectorMappingPropertiesArgs) ToConnectorMappingPropertiesPtrOutput() ConnectorMappingPropertiesPtrOutput {
	return i.ToConnectorMappingPropertiesPtrOutputWithContext(context.Background())
}

func (i ConnectorMappingPropertiesArgs) ToConnectorMappingPropertiesPtrOutputWithContext(ctx context.Context) ConnectorMappingPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectorMappingPropertiesOutput).ToConnectorMappingPropertiesPtrOutputWithContext(ctx)
}

// ConnectorMappingPropertiesPtrInput is an input type that accepts ConnectorMappingPropertiesArgs, ConnectorMappingPropertiesPtr and ConnectorMappingPropertiesPtrOutput values.
// You can construct a concrete instance of `ConnectorMappingPropertiesPtrInput` via:
//
//          ConnectorMappingPropertiesArgs{...}
//
//  or:
//
//          nil
type ConnectorMappingPropertiesPtrInput interface {
	pulumi.Input

	ToConnectorMappingPropertiesPtrOutput() ConnectorMappingPropertiesPtrOutput
	ToConnectorMappingPropertiesPtrOutputWithContext(context.Context) ConnectorMappingPropertiesPtrOutput
}

type connectorMappingPropertiesPtrType ConnectorMappingPropertiesArgs

func ConnectorMappingPropertiesPtr(v *ConnectorMappingPropertiesArgs) ConnectorMappingPropertiesPtrInput {
	return (*connectorMappingPropertiesPtrType)(v)
}

func (*connectorMappingPropertiesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ConnectorMappingProperties)(nil)).Elem()
}

func (i *connectorMappingPropertiesPtrType) ToConnectorMappingPropertiesPtrOutput() ConnectorMappingPropertiesPtrOutput {
	return i.ToConnectorMappingPropertiesPtrOutputWithContext(context.Background())
}

func (i *connectorMappingPropertiesPtrType) ToConnectorMappingPropertiesPtrOutputWithContext(ctx context.Context) ConnectorMappingPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectorMappingPropertiesPtrOutput)
}

// The connector mapping properties.
type ConnectorMappingPropertiesOutput struct{ *pulumi.OutputState }

func (ConnectorMappingPropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectorMappingProperties)(nil)).Elem()
}

func (o ConnectorMappingPropertiesOutput) ToConnectorMappingPropertiesOutput() ConnectorMappingPropertiesOutput {
	return o
}

func (o ConnectorMappingPropertiesOutput) ToConnectorMappingPropertiesOutputWithContext(ctx context.Context) ConnectorMappingPropertiesOutput {
	return o
}

func (o ConnectorMappingPropertiesOutput) ToConnectorMappingPropertiesPtrOutput() ConnectorMappingPropertiesPtrOutput {
	return o.ToConnectorMappingPropertiesPtrOutputWithContext(context.Background())
}

func (o ConnectorMappingPropertiesOutput) ToConnectorMappingPropertiesPtrOutputWithContext(ctx context.Context) ConnectorMappingPropertiesPtrOutput {
	return o.ApplyT(func(v ConnectorMappingProperties) *ConnectorMappingProperties {
		return &v
	}).(ConnectorMappingPropertiesPtrOutput)
}

// The availability of mapping property.
func (o ConnectorMappingPropertiesOutput) Availability() ConnectorMappingAvailabilityOutput {
	return o.ApplyT(func(v ConnectorMappingProperties) ConnectorMappingAvailability { return v.Availability }).(ConnectorMappingAvailabilityOutput)
}

// The operation after import is done.
func (o ConnectorMappingPropertiesOutput) CompleteOperation() ConnectorMappingCompleteOperationOutput {
	return o.ApplyT(func(v ConnectorMappingProperties) ConnectorMappingCompleteOperation { return v.CompleteOperation }).(ConnectorMappingCompleteOperationOutput)
}

// The error management setting for the mapping.
func (o ConnectorMappingPropertiesOutput) ErrorManagement() ConnectorMappingErrorManagementOutput {
	return o.ApplyT(func(v ConnectorMappingProperties) ConnectorMappingErrorManagement { return v.ErrorManagement }).(ConnectorMappingErrorManagementOutput)
}

// The file filter for the mapping.
func (o ConnectorMappingPropertiesOutput) FileFilter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ConnectorMappingProperties) *string { return v.FileFilter }).(pulumi.StringPtrOutput)
}

// The folder path for the mapping.
func (o ConnectorMappingPropertiesOutput) FolderPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ConnectorMappingProperties) *string { return v.FolderPath }).(pulumi.StringPtrOutput)
}

// The format of mapping property.
func (o ConnectorMappingPropertiesOutput) Format() ConnectorMappingFormatOutput {
	return o.ApplyT(func(v ConnectorMappingProperties) ConnectorMappingFormat { return v.Format }).(ConnectorMappingFormatOutput)
}

// If the file contains a header or not.
func (o ConnectorMappingPropertiesOutput) HasHeader() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ConnectorMappingProperties) *bool { return v.HasHeader }).(pulumi.BoolPtrOutput)
}

// Ingestion mapping information at property level.
func (o ConnectorMappingPropertiesOutput) Structure() ConnectorMappingStructureArrayOutput {
	return o.ApplyT(func(v ConnectorMappingProperties) []ConnectorMappingStructure { return v.Structure }).(ConnectorMappingStructureArrayOutput)
}

type ConnectorMappingPropertiesPtrOutput struct{ *pulumi.OutputState }

func (ConnectorMappingPropertiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ConnectorMappingProperties)(nil)).Elem()
}

func (o ConnectorMappingPropertiesPtrOutput) ToConnectorMappingPropertiesPtrOutput() ConnectorMappingPropertiesPtrOutput {
	return o
}

func (o ConnectorMappingPropertiesPtrOutput) ToConnectorMappingPropertiesPtrOutputWithContext(ctx context.Context) ConnectorMappingPropertiesPtrOutput {
	return o
}

func (o ConnectorMappingPropertiesPtrOutput) Elem() ConnectorMappingPropertiesOutput {
	return o.ApplyT(func(v *ConnectorMappingProperties) ConnectorMappingProperties { return *v }).(ConnectorMappingPropertiesOutput)
}

// The availability of mapping property.
func (o ConnectorMappingPropertiesPtrOutput) Availability() ConnectorMappingAvailabilityPtrOutput {
	return o.ApplyT(func(v *ConnectorMappingProperties) *ConnectorMappingAvailability {
		if v == nil {
			return nil
		}
		return &v.Availability
	}).(ConnectorMappingAvailabilityPtrOutput)
}

// The operation after import is done.
func (o ConnectorMappingPropertiesPtrOutput) CompleteOperation() ConnectorMappingCompleteOperationPtrOutput {
	return o.ApplyT(func(v *ConnectorMappingProperties) *ConnectorMappingCompleteOperation {
		if v == nil {
			return nil
		}
		return &v.CompleteOperation
	}).(ConnectorMappingCompleteOperationPtrOutput)
}

// The error management setting for the mapping.
func (o ConnectorMappingPropertiesPtrOutput) ErrorManagement() ConnectorMappingErrorManagementPtrOutput {
	return o.ApplyT(func(v *ConnectorMappingProperties) *ConnectorMappingErrorManagement {
		if v == nil {
			return nil
		}
		return &v.ErrorManagement
	}).(ConnectorMappingErrorManagementPtrOutput)
}

// The file filter for the mapping.
func (o ConnectorMappingPropertiesPtrOutput) FileFilter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConnectorMappingProperties) *string {
		if v == nil {
			return nil
		}
		return v.FileFilter
	}).(pulumi.StringPtrOutput)
}

// The folder path for the mapping.
func (o ConnectorMappingPropertiesPtrOutput) FolderPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConnectorMappingProperties) *string {
		if v == nil {
			return nil
		}
		return v.FolderPath
	}).(pulumi.StringPtrOutput)
}

// The format of mapping property.
func (o ConnectorMappingPropertiesPtrOutput) Format() ConnectorMappingFormatPtrOutput {
	return o.ApplyT(func(v *ConnectorMappingProperties) *ConnectorMappingFormat {
		if v == nil {
			return nil
		}
		return &v.Format
	}).(ConnectorMappingFormatPtrOutput)
}

// If the file contains a header or not.
func (o ConnectorMappingPropertiesPtrOutput) HasHeader() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ConnectorMappingProperties) *bool {
		if v == nil {
			return nil
		}
		return v.HasHeader
	}).(pulumi.BoolPtrOutput)
}

// Ingestion mapping information at property level.
func (o ConnectorMappingPropertiesPtrOutput) Structure() ConnectorMappingStructureArrayOutput {
	return o.ApplyT(func(v *ConnectorMappingProperties) []ConnectorMappingStructure {
		if v == nil {
			return nil
		}
		return v.Structure
	}).(ConnectorMappingStructureArrayOutput)
}

// The connector mapping properties.
type ConnectorMappingPropertiesResponse struct {
	// The availability of mapping property.
	Availability ConnectorMappingAvailabilityResponse `pulumi:"availability"`
	// The operation after import is done.
	CompleteOperation ConnectorMappingCompleteOperationResponse `pulumi:"completeOperation"`
	// The error management setting for the mapping.
	ErrorManagement ConnectorMappingErrorManagementResponse `pulumi:"errorManagement"`
	// The file filter for the mapping.
	FileFilter *string `pulumi:"fileFilter"`
	// The folder path for the mapping.
	FolderPath *string `pulumi:"folderPath"`
	// The format of mapping property.
	Format ConnectorMappingFormatResponse `pulumi:"format"`
	// If the file contains a header or not.
	HasHeader *bool `pulumi:"hasHeader"`
	// Ingestion mapping information at property level.
	Structure []ConnectorMappingStructureResponse `pulumi:"structure"`
}

// ConnectorMappingPropertiesResponseInput is an input type that accepts ConnectorMappingPropertiesResponseArgs and ConnectorMappingPropertiesResponseOutput values.
// You can construct a concrete instance of `ConnectorMappingPropertiesResponseInput` via:
//
//          ConnectorMappingPropertiesResponseArgs{...}
type ConnectorMappingPropertiesResponseInput interface {
	pulumi.Input

	ToConnectorMappingPropertiesResponseOutput() ConnectorMappingPropertiesResponseOutput
	ToConnectorMappingPropertiesResponseOutputWithContext(context.Context) ConnectorMappingPropertiesResponseOutput
}

// The connector mapping properties.
type ConnectorMappingPropertiesResponseArgs struct {
	// The availability of mapping property.
	Availability ConnectorMappingAvailabilityResponseInput `pulumi:"availability"`
	// The operation after import is done.
	CompleteOperation ConnectorMappingCompleteOperationResponseInput `pulumi:"completeOperation"`
	// The error management setting for the mapping.
	ErrorManagement ConnectorMappingErrorManagementResponseInput `pulumi:"errorManagement"`
	// The file filter for the mapping.
	FileFilter pulumi.StringPtrInput `pulumi:"fileFilter"`
	// The folder path for the mapping.
	FolderPath pulumi.StringPtrInput `pulumi:"folderPath"`
	// The format of mapping property.
	Format ConnectorMappingFormatResponseInput `pulumi:"format"`
	// If the file contains a header or not.
	HasHeader pulumi.BoolPtrInput `pulumi:"hasHeader"`
	// Ingestion mapping information at property level.
	Structure ConnectorMappingStructureResponseArrayInput `pulumi:"structure"`
}

func (ConnectorMappingPropertiesResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectorMappingPropertiesResponse)(nil)).Elem()
}

func (i ConnectorMappingPropertiesResponseArgs) ToConnectorMappingPropertiesResponseOutput() ConnectorMappingPropertiesResponseOutput {
	return i.ToConnectorMappingPropertiesResponseOutputWithContext(context.Background())
}

func (i ConnectorMappingPropertiesResponseArgs) ToConnectorMappingPropertiesResponseOutputWithContext(ctx context.Context) ConnectorMappingPropertiesResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectorMappingPropertiesResponseOutput)
}

func (i ConnectorMappingPropertiesResponseArgs) ToConnectorMappingPropertiesResponsePtrOutput() ConnectorMappingPropertiesResponsePtrOutput {
	return i.ToConnectorMappingPropertiesResponsePtrOutputWithContext(context.Background())
}

func (i ConnectorMappingPropertiesResponseArgs) ToConnectorMappingPropertiesResponsePtrOutputWithContext(ctx context.Context) ConnectorMappingPropertiesResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectorMappingPropertiesResponseOutput).ToConnectorMappingPropertiesResponsePtrOutputWithContext(ctx)
}

// ConnectorMappingPropertiesResponsePtrInput is an input type that accepts ConnectorMappingPropertiesResponseArgs, ConnectorMappingPropertiesResponsePtr and ConnectorMappingPropertiesResponsePtrOutput values.
// You can construct a concrete instance of `ConnectorMappingPropertiesResponsePtrInput` via:
//
//          ConnectorMappingPropertiesResponseArgs{...}
//
//  or:
//
//          nil
type ConnectorMappingPropertiesResponsePtrInput interface {
	pulumi.Input

	ToConnectorMappingPropertiesResponsePtrOutput() ConnectorMappingPropertiesResponsePtrOutput
	ToConnectorMappingPropertiesResponsePtrOutputWithContext(context.Context) ConnectorMappingPropertiesResponsePtrOutput
}

type connectorMappingPropertiesResponsePtrType ConnectorMappingPropertiesResponseArgs

func ConnectorMappingPropertiesResponsePtr(v *ConnectorMappingPropertiesResponseArgs) ConnectorMappingPropertiesResponsePtrInput {
	return (*connectorMappingPropertiesResponsePtrType)(v)
}

func (*connectorMappingPropertiesResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ConnectorMappingPropertiesResponse)(nil)).Elem()
}

func (i *connectorMappingPropertiesResponsePtrType) ToConnectorMappingPropertiesResponsePtrOutput() ConnectorMappingPropertiesResponsePtrOutput {
	return i.ToConnectorMappingPropertiesResponsePtrOutputWithContext(context.Background())
}

func (i *connectorMappingPropertiesResponsePtrType) ToConnectorMappingPropertiesResponsePtrOutputWithContext(ctx context.Context) ConnectorMappingPropertiesResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectorMappingPropertiesResponsePtrOutput)
}

// The connector mapping properties.
type ConnectorMappingPropertiesResponseOutput struct{ *pulumi.OutputState }

func (ConnectorMappingPropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectorMappingPropertiesResponse)(nil)).Elem()
}

func (o ConnectorMappingPropertiesResponseOutput) ToConnectorMappingPropertiesResponseOutput() ConnectorMappingPropertiesResponseOutput {
	return o
}

func (o ConnectorMappingPropertiesResponseOutput) ToConnectorMappingPropertiesResponseOutputWithContext(ctx context.Context) ConnectorMappingPropertiesResponseOutput {
	return o
}

func (o ConnectorMappingPropertiesResponseOutput) ToConnectorMappingPropertiesResponsePtrOutput() ConnectorMappingPropertiesResponsePtrOutput {
	return o.ToConnectorMappingPropertiesResponsePtrOutputWithContext(context.Background())
}

func (o ConnectorMappingPropertiesResponseOutput) ToConnectorMappingPropertiesResponsePtrOutputWithContext(ctx context.Context) ConnectorMappingPropertiesResponsePtrOutput {
	return o.ApplyT(func(v ConnectorMappingPropertiesResponse) *ConnectorMappingPropertiesResponse {
		return &v
	}).(ConnectorMappingPropertiesResponsePtrOutput)
}

// The availability of mapping property.
func (o ConnectorMappingPropertiesResponseOutput) Availability() ConnectorMappingAvailabilityResponseOutput {
	return o.ApplyT(func(v ConnectorMappingPropertiesResponse) ConnectorMappingAvailabilityResponse { return v.Availability }).(ConnectorMappingAvailabilityResponseOutput)
}

// The operation after import is done.
func (o ConnectorMappingPropertiesResponseOutput) CompleteOperation() ConnectorMappingCompleteOperationResponseOutput {
	return o.ApplyT(func(v ConnectorMappingPropertiesResponse) ConnectorMappingCompleteOperationResponse {
		return v.CompleteOperation
	}).(ConnectorMappingCompleteOperationResponseOutput)
}

// The error management setting for the mapping.
func (o ConnectorMappingPropertiesResponseOutput) ErrorManagement() ConnectorMappingErrorManagementResponseOutput {
	return o.ApplyT(func(v ConnectorMappingPropertiesResponse) ConnectorMappingErrorManagementResponse {
		return v.ErrorManagement
	}).(ConnectorMappingErrorManagementResponseOutput)
}

// The file filter for the mapping.
func (o ConnectorMappingPropertiesResponseOutput) FileFilter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ConnectorMappingPropertiesResponse) *string { return v.FileFilter }).(pulumi.StringPtrOutput)
}

// The folder path for the mapping.
func (o ConnectorMappingPropertiesResponseOutput) FolderPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ConnectorMappingPropertiesResponse) *string { return v.FolderPath }).(pulumi.StringPtrOutput)
}

// The format of mapping property.
func (o ConnectorMappingPropertiesResponseOutput) Format() ConnectorMappingFormatResponseOutput {
	return o.ApplyT(func(v ConnectorMappingPropertiesResponse) ConnectorMappingFormatResponse { return v.Format }).(ConnectorMappingFormatResponseOutput)
}

// If the file contains a header or not.
func (o ConnectorMappingPropertiesResponseOutput) HasHeader() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ConnectorMappingPropertiesResponse) *bool { return v.HasHeader }).(pulumi.BoolPtrOutput)
}

// Ingestion mapping information at property level.
func (o ConnectorMappingPropertiesResponseOutput) Structure() ConnectorMappingStructureResponseArrayOutput {
	return o.ApplyT(func(v ConnectorMappingPropertiesResponse) []ConnectorMappingStructureResponse { return v.Structure }).(ConnectorMappingStructureResponseArrayOutput)
}

type ConnectorMappingPropertiesResponsePtrOutput struct{ *pulumi.OutputState }

func (ConnectorMappingPropertiesResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ConnectorMappingPropertiesResponse)(nil)).Elem()
}

func (o ConnectorMappingPropertiesResponsePtrOutput) ToConnectorMappingPropertiesResponsePtrOutput() ConnectorMappingPropertiesResponsePtrOutput {
	return o
}

func (o ConnectorMappingPropertiesResponsePtrOutput) ToConnectorMappingPropertiesResponsePtrOutputWithContext(ctx context.Context) ConnectorMappingPropertiesResponsePtrOutput {
	return o
}

func (o ConnectorMappingPropertiesResponsePtrOutput) Elem() ConnectorMappingPropertiesResponseOutput {
	return o.ApplyT(func(v *ConnectorMappingPropertiesResponse) ConnectorMappingPropertiesResponse { return *v }).(ConnectorMappingPropertiesResponseOutput)
}

// The availability of mapping property.
func (o ConnectorMappingPropertiesResponsePtrOutput) Availability() ConnectorMappingAvailabilityResponsePtrOutput {
	return o.ApplyT(func(v *ConnectorMappingPropertiesResponse) *ConnectorMappingAvailabilityResponse {
		if v == nil {
			return nil
		}
		return &v.Availability
	}).(ConnectorMappingAvailabilityResponsePtrOutput)
}

// The operation after import is done.
func (o ConnectorMappingPropertiesResponsePtrOutput) CompleteOperation() ConnectorMappingCompleteOperationResponsePtrOutput {
	return o.ApplyT(func(v *ConnectorMappingPropertiesResponse) *ConnectorMappingCompleteOperationResponse {
		if v == nil {
			return nil
		}
		return &v.CompleteOperation
	}).(ConnectorMappingCompleteOperationResponsePtrOutput)
}

// The error management setting for the mapping.
func (o ConnectorMappingPropertiesResponsePtrOutput) ErrorManagement() ConnectorMappingErrorManagementResponsePtrOutput {
	return o.ApplyT(func(v *ConnectorMappingPropertiesResponse) *ConnectorMappingErrorManagementResponse {
		if v == nil {
			return nil
		}
		return &v.ErrorManagement
	}).(ConnectorMappingErrorManagementResponsePtrOutput)
}

// The file filter for the mapping.
func (o ConnectorMappingPropertiesResponsePtrOutput) FileFilter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConnectorMappingPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return v.FileFilter
	}).(pulumi.StringPtrOutput)
}

// The folder path for the mapping.
func (o ConnectorMappingPropertiesResponsePtrOutput) FolderPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConnectorMappingPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return v.FolderPath
	}).(pulumi.StringPtrOutput)
}

// The format of mapping property.
func (o ConnectorMappingPropertiesResponsePtrOutput) Format() ConnectorMappingFormatResponsePtrOutput {
	return o.ApplyT(func(v *ConnectorMappingPropertiesResponse) *ConnectorMappingFormatResponse {
		if v == nil {
			return nil
		}
		return &v.Format
	}).(ConnectorMappingFormatResponsePtrOutput)
}

// If the file contains a header or not.
func (o ConnectorMappingPropertiesResponsePtrOutput) HasHeader() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ConnectorMappingPropertiesResponse) *bool {
		if v == nil {
			return nil
		}
		return v.HasHeader
	}).(pulumi.BoolPtrOutput)
}

// Ingestion mapping information at property level.
func (o ConnectorMappingPropertiesResponsePtrOutput) Structure() ConnectorMappingStructureResponseArrayOutput {
	return o.ApplyT(func(v *ConnectorMappingPropertiesResponse) []ConnectorMappingStructureResponse {
		if v == nil {
			return nil
		}
		return v.Structure
	}).(ConnectorMappingStructureResponseArrayOutput)
}

// The connector mapping definition.
type ConnectorMappingResponse struct {
	// The connector mapping name
	ConnectorMappingName string `pulumi:"connectorMappingName"`
	// The connector name.
	ConnectorName string `pulumi:"connectorName"`
	// Type of connector.
	ConnectorType *string `pulumi:"connectorType"`
	// The created time.
	Created string `pulumi:"created"`
	// The DataFormat ID.
	DataFormatId string `pulumi:"dataFormatId"`
	// The description of the connector mapping.
	Description *string `pulumi:"description"`
	// Display name for the connector mapping.
	DisplayName *string `pulumi:"displayName"`
	// Defines which entity type the file should map to.
	EntityType string `pulumi:"entityType"`
	// The mapping entity name.
	EntityTypeName string `pulumi:"entityTypeName"`
	// The last modified time.
	LastModified string `pulumi:"lastModified"`
	// The properties of the mapping.
	MappingProperties ConnectorMappingPropertiesResponse `pulumi:"mappingProperties"`
	// The next run time based on customer's settings.
	NextRunTime string `pulumi:"nextRunTime"`
	// The RunId.
	RunId string `pulumi:"runId"`
	// State of connector mapping.
	State string `pulumi:"state"`
	// The hub name.
	TenantId string `pulumi:"tenantId"`
}

// ConnectorMappingResponseInput is an input type that accepts ConnectorMappingResponseArgs and ConnectorMappingResponseOutput values.
// You can construct a concrete instance of `ConnectorMappingResponseInput` via:
//
//          ConnectorMappingResponseArgs{...}
type ConnectorMappingResponseInput interface {
	pulumi.Input

	ToConnectorMappingResponseOutput() ConnectorMappingResponseOutput
	ToConnectorMappingResponseOutputWithContext(context.Context) ConnectorMappingResponseOutput
}

// The connector mapping definition.
type ConnectorMappingResponseArgs struct {
	// The connector mapping name
	ConnectorMappingName pulumi.StringInput `pulumi:"connectorMappingName"`
	// The connector name.
	ConnectorName pulumi.StringInput `pulumi:"connectorName"`
	// Type of connector.
	ConnectorType pulumi.StringPtrInput `pulumi:"connectorType"`
	// The created time.
	Created pulumi.StringInput `pulumi:"created"`
	// The DataFormat ID.
	DataFormatId pulumi.StringInput `pulumi:"dataFormatId"`
	// The description of the connector mapping.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Display name for the connector mapping.
	DisplayName pulumi.StringPtrInput `pulumi:"displayName"`
	// Defines which entity type the file should map to.
	EntityType pulumi.StringInput `pulumi:"entityType"`
	// The mapping entity name.
	EntityTypeName pulumi.StringInput `pulumi:"entityTypeName"`
	// The last modified time.
	LastModified pulumi.StringInput `pulumi:"lastModified"`
	// The properties of the mapping.
	MappingProperties ConnectorMappingPropertiesResponseInput `pulumi:"mappingProperties"`
	// The next run time based on customer's settings.
	NextRunTime pulumi.StringInput `pulumi:"nextRunTime"`
	// The RunId.
	RunId pulumi.StringInput `pulumi:"runId"`
	// State of connector mapping.
	State pulumi.StringInput `pulumi:"state"`
	// The hub name.
	TenantId pulumi.StringInput `pulumi:"tenantId"`
}

func (ConnectorMappingResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectorMappingResponse)(nil)).Elem()
}

func (i ConnectorMappingResponseArgs) ToConnectorMappingResponseOutput() ConnectorMappingResponseOutput {
	return i.ToConnectorMappingResponseOutputWithContext(context.Background())
}

func (i ConnectorMappingResponseArgs) ToConnectorMappingResponseOutputWithContext(ctx context.Context) ConnectorMappingResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectorMappingResponseOutput)
}

func (i ConnectorMappingResponseArgs) ToConnectorMappingResponsePtrOutput() ConnectorMappingResponsePtrOutput {
	return i.ToConnectorMappingResponsePtrOutputWithContext(context.Background())
}

func (i ConnectorMappingResponseArgs) ToConnectorMappingResponsePtrOutputWithContext(ctx context.Context) ConnectorMappingResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectorMappingResponseOutput).ToConnectorMappingResponsePtrOutputWithContext(ctx)
}

// ConnectorMappingResponsePtrInput is an input type that accepts ConnectorMappingResponseArgs, ConnectorMappingResponsePtr and ConnectorMappingResponsePtrOutput values.
// You can construct a concrete instance of `ConnectorMappingResponsePtrInput` via:
//
//          ConnectorMappingResponseArgs{...}
//
//  or:
//
//          nil
type ConnectorMappingResponsePtrInput interface {
	pulumi.Input

	ToConnectorMappingResponsePtrOutput() ConnectorMappingResponsePtrOutput
	ToConnectorMappingResponsePtrOutputWithContext(context.Context) ConnectorMappingResponsePtrOutput
}

type connectorMappingResponsePtrType ConnectorMappingResponseArgs

func ConnectorMappingResponsePtr(v *ConnectorMappingResponseArgs) ConnectorMappingResponsePtrInput {
	return (*connectorMappingResponsePtrType)(v)
}

func (*connectorMappingResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ConnectorMappingResponse)(nil)).Elem()
}

func (i *connectorMappingResponsePtrType) ToConnectorMappingResponsePtrOutput() ConnectorMappingResponsePtrOutput {
	return i.ToConnectorMappingResponsePtrOutputWithContext(context.Background())
}

func (i *connectorMappingResponsePtrType) ToConnectorMappingResponsePtrOutputWithContext(ctx context.Context) ConnectorMappingResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectorMappingResponsePtrOutput)
}

// The connector mapping definition.
type ConnectorMappingResponseOutput struct{ *pulumi.OutputState }

func (ConnectorMappingResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectorMappingResponse)(nil)).Elem()
}

func (o ConnectorMappingResponseOutput) ToConnectorMappingResponseOutput() ConnectorMappingResponseOutput {
	return o
}

func (o ConnectorMappingResponseOutput) ToConnectorMappingResponseOutputWithContext(ctx context.Context) ConnectorMappingResponseOutput {
	return o
}

func (o ConnectorMappingResponseOutput) ToConnectorMappingResponsePtrOutput() ConnectorMappingResponsePtrOutput {
	return o.ToConnectorMappingResponsePtrOutputWithContext(context.Background())
}

func (o ConnectorMappingResponseOutput) ToConnectorMappingResponsePtrOutputWithContext(ctx context.Context) ConnectorMappingResponsePtrOutput {
	return o.ApplyT(func(v ConnectorMappingResponse) *ConnectorMappingResponse {
		return &v
	}).(ConnectorMappingResponsePtrOutput)
}

// The connector mapping name
func (o ConnectorMappingResponseOutput) ConnectorMappingName() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectorMappingResponse) string { return v.ConnectorMappingName }).(pulumi.StringOutput)
}

// The connector name.
func (o ConnectorMappingResponseOutput) ConnectorName() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectorMappingResponse) string { return v.ConnectorName }).(pulumi.StringOutput)
}

// Type of connector.
func (o ConnectorMappingResponseOutput) ConnectorType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ConnectorMappingResponse) *string { return v.ConnectorType }).(pulumi.StringPtrOutput)
}

// The created time.
func (o ConnectorMappingResponseOutput) Created() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectorMappingResponse) string { return v.Created }).(pulumi.StringOutput)
}

// The DataFormat ID.
func (o ConnectorMappingResponseOutput) DataFormatId() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectorMappingResponse) string { return v.DataFormatId }).(pulumi.StringOutput)
}

// The description of the connector mapping.
func (o ConnectorMappingResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ConnectorMappingResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Display name for the connector mapping.
func (o ConnectorMappingResponseOutput) DisplayName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ConnectorMappingResponse) *string { return v.DisplayName }).(pulumi.StringPtrOutput)
}

// Defines which entity type the file should map to.
func (o ConnectorMappingResponseOutput) EntityType() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectorMappingResponse) string { return v.EntityType }).(pulumi.StringOutput)
}

// The mapping entity name.
func (o ConnectorMappingResponseOutput) EntityTypeName() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectorMappingResponse) string { return v.EntityTypeName }).(pulumi.StringOutput)
}

// The last modified time.
func (o ConnectorMappingResponseOutput) LastModified() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectorMappingResponse) string { return v.LastModified }).(pulumi.StringOutput)
}

// The properties of the mapping.
func (o ConnectorMappingResponseOutput) MappingProperties() ConnectorMappingPropertiesResponseOutput {
	return o.ApplyT(func(v ConnectorMappingResponse) ConnectorMappingPropertiesResponse { return v.MappingProperties }).(ConnectorMappingPropertiesResponseOutput)
}

// The next run time based on customer's settings.
func (o ConnectorMappingResponseOutput) NextRunTime() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectorMappingResponse) string { return v.NextRunTime }).(pulumi.StringOutput)
}

// The RunId.
func (o ConnectorMappingResponseOutput) RunId() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectorMappingResponse) string { return v.RunId }).(pulumi.StringOutput)
}

// State of connector mapping.
func (o ConnectorMappingResponseOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectorMappingResponse) string { return v.State }).(pulumi.StringOutput)
}

// The hub name.
func (o ConnectorMappingResponseOutput) TenantId() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectorMappingResponse) string { return v.TenantId }).(pulumi.StringOutput)
}

type ConnectorMappingResponsePtrOutput struct{ *pulumi.OutputState }

func (ConnectorMappingResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ConnectorMappingResponse)(nil)).Elem()
}

func (o ConnectorMappingResponsePtrOutput) ToConnectorMappingResponsePtrOutput() ConnectorMappingResponsePtrOutput {
	return o
}

func (o ConnectorMappingResponsePtrOutput) ToConnectorMappingResponsePtrOutputWithContext(ctx context.Context) ConnectorMappingResponsePtrOutput {
	return o
}

func (o ConnectorMappingResponsePtrOutput) Elem() ConnectorMappingResponseOutput {
	return o.ApplyT(func(v *ConnectorMappingResponse) ConnectorMappingResponse { return *v }).(ConnectorMappingResponseOutput)
}

// The connector mapping name
func (o ConnectorMappingResponsePtrOutput) ConnectorMappingName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConnectorMappingResponse) *string {
		if v == nil {
			return nil
		}
		return &v.ConnectorMappingName
	}).(pulumi.StringPtrOutput)
}

// The connector name.
func (o ConnectorMappingResponsePtrOutput) ConnectorName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConnectorMappingResponse) *string {
		if v == nil {
			return nil
		}
		return &v.ConnectorName
	}).(pulumi.StringPtrOutput)
}

// Type of connector.
func (o ConnectorMappingResponsePtrOutput) ConnectorType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConnectorMappingResponse) *string {
		if v == nil {
			return nil
		}
		return v.ConnectorType
	}).(pulumi.StringPtrOutput)
}

// The created time.
func (o ConnectorMappingResponsePtrOutput) Created() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConnectorMappingResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Created
	}).(pulumi.StringPtrOutput)
}

// The DataFormat ID.
func (o ConnectorMappingResponsePtrOutput) DataFormatId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConnectorMappingResponse) *string {
		if v == nil {
			return nil
		}
		return &v.DataFormatId
	}).(pulumi.StringPtrOutput)
}

// The description of the connector mapping.
func (o ConnectorMappingResponsePtrOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConnectorMappingResponse) *string {
		if v == nil {
			return nil
		}
		return v.Description
	}).(pulumi.StringPtrOutput)
}

// Display name for the connector mapping.
func (o ConnectorMappingResponsePtrOutput) DisplayName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConnectorMappingResponse) *string {
		if v == nil {
			return nil
		}
		return v.DisplayName
	}).(pulumi.StringPtrOutput)
}

// Defines which entity type the file should map to.
func (o ConnectorMappingResponsePtrOutput) EntityType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConnectorMappingResponse) *string {
		if v == nil {
			return nil
		}
		return &v.EntityType
	}).(pulumi.StringPtrOutput)
}

// The mapping entity name.
func (o ConnectorMappingResponsePtrOutput) EntityTypeName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConnectorMappingResponse) *string {
		if v == nil {
			return nil
		}
		return &v.EntityTypeName
	}).(pulumi.StringPtrOutput)
}

// The last modified time.
func (o ConnectorMappingResponsePtrOutput) LastModified() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConnectorMappingResponse) *string {
		if v == nil {
			return nil
		}
		return &v.LastModified
	}).(pulumi.StringPtrOutput)
}

// The properties of the mapping.
func (o ConnectorMappingResponsePtrOutput) MappingProperties() ConnectorMappingPropertiesResponsePtrOutput {
	return o.ApplyT(func(v *ConnectorMappingResponse) *ConnectorMappingPropertiesResponse {
		if v == nil {
			return nil
		}
		return &v.MappingProperties
	}).(ConnectorMappingPropertiesResponsePtrOutput)
}

// The next run time based on customer's settings.
func (o ConnectorMappingResponsePtrOutput) NextRunTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConnectorMappingResponse) *string {
		if v == nil {
			return nil
		}
		return &v.NextRunTime
	}).(pulumi.StringPtrOutput)
}

// The RunId.
func (o ConnectorMappingResponsePtrOutput) RunId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConnectorMappingResponse) *string {
		if v == nil {
			return nil
		}
		return &v.RunId
	}).(pulumi.StringPtrOutput)
}

// State of connector mapping.
func (o ConnectorMappingResponsePtrOutput) State() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConnectorMappingResponse) *string {
		if v == nil {
			return nil
		}
		return &v.State
	}).(pulumi.StringPtrOutput)
}

// The hub name.
func (o ConnectorMappingResponsePtrOutput) TenantId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConnectorMappingResponse) *string {
		if v == nil {
			return nil
		}
		return &v.TenantId
	}).(pulumi.StringPtrOutput)
}

// Connector mapping property structure.
type ConnectorMappingStructure struct {
	// The column name of the import file.
	ColumnName string `pulumi:"columnName"`
	// Custom format specifier for input parsing.
	CustomFormatSpecifier *string `pulumi:"customFormatSpecifier"`
	// Indicates if the column is encrypted.
	IsEncrypted *bool `pulumi:"isEncrypted"`
	// The property name of the mapping entity.
	PropertyName string `pulumi:"propertyName"`
}

// ConnectorMappingStructureInput is an input type that accepts ConnectorMappingStructureArgs and ConnectorMappingStructureOutput values.
// You can construct a concrete instance of `ConnectorMappingStructureInput` via:
//
//          ConnectorMappingStructureArgs{...}
type ConnectorMappingStructureInput interface {
	pulumi.Input

	ToConnectorMappingStructureOutput() ConnectorMappingStructureOutput
	ToConnectorMappingStructureOutputWithContext(context.Context) ConnectorMappingStructureOutput
}

// Connector mapping property structure.
type ConnectorMappingStructureArgs struct {
	// The column name of the import file.
	ColumnName pulumi.StringInput `pulumi:"columnName"`
	// Custom format specifier for input parsing.
	CustomFormatSpecifier pulumi.StringPtrInput `pulumi:"customFormatSpecifier"`
	// Indicates if the column is encrypted.
	IsEncrypted pulumi.BoolPtrInput `pulumi:"isEncrypted"`
	// The property name of the mapping entity.
	PropertyName pulumi.StringInput `pulumi:"propertyName"`
}

func (ConnectorMappingStructureArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectorMappingStructure)(nil)).Elem()
}

func (i ConnectorMappingStructureArgs) ToConnectorMappingStructureOutput() ConnectorMappingStructureOutput {
	return i.ToConnectorMappingStructureOutputWithContext(context.Background())
}

func (i ConnectorMappingStructureArgs) ToConnectorMappingStructureOutputWithContext(ctx context.Context) ConnectorMappingStructureOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectorMappingStructureOutput)
}

// ConnectorMappingStructureArrayInput is an input type that accepts ConnectorMappingStructureArray and ConnectorMappingStructureArrayOutput values.
// You can construct a concrete instance of `ConnectorMappingStructureArrayInput` via:
//
//          ConnectorMappingStructureArray{ ConnectorMappingStructureArgs{...} }
type ConnectorMappingStructureArrayInput interface {
	pulumi.Input

	ToConnectorMappingStructureArrayOutput() ConnectorMappingStructureArrayOutput
	ToConnectorMappingStructureArrayOutputWithContext(context.Context) ConnectorMappingStructureArrayOutput
}

type ConnectorMappingStructureArray []ConnectorMappingStructureInput

func (ConnectorMappingStructureArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ConnectorMappingStructure)(nil)).Elem()
}

func (i ConnectorMappingStructureArray) ToConnectorMappingStructureArrayOutput() ConnectorMappingStructureArrayOutput {
	return i.ToConnectorMappingStructureArrayOutputWithContext(context.Background())
}

func (i ConnectorMappingStructureArray) ToConnectorMappingStructureArrayOutputWithContext(ctx context.Context) ConnectorMappingStructureArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectorMappingStructureArrayOutput)
}

// Connector mapping property structure.
type ConnectorMappingStructureOutput struct{ *pulumi.OutputState }

func (ConnectorMappingStructureOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectorMappingStructure)(nil)).Elem()
}

func (o ConnectorMappingStructureOutput) ToConnectorMappingStructureOutput() ConnectorMappingStructureOutput {
	return o
}

func (o ConnectorMappingStructureOutput) ToConnectorMappingStructureOutputWithContext(ctx context.Context) ConnectorMappingStructureOutput {
	return o
}

// The column name of the import file.
func (o ConnectorMappingStructureOutput) ColumnName() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectorMappingStructure) string { return v.ColumnName }).(pulumi.StringOutput)
}

// Custom format specifier for input parsing.
func (o ConnectorMappingStructureOutput) CustomFormatSpecifier() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ConnectorMappingStructure) *string { return v.CustomFormatSpecifier }).(pulumi.StringPtrOutput)
}

// Indicates if the column is encrypted.
func (o ConnectorMappingStructureOutput) IsEncrypted() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ConnectorMappingStructure) *bool { return v.IsEncrypted }).(pulumi.BoolPtrOutput)
}

// The property name of the mapping entity.
func (o ConnectorMappingStructureOutput) PropertyName() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectorMappingStructure) string { return v.PropertyName }).(pulumi.StringOutput)
}

type ConnectorMappingStructureArrayOutput struct{ *pulumi.OutputState }

func (ConnectorMappingStructureArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ConnectorMappingStructure)(nil)).Elem()
}

func (o ConnectorMappingStructureArrayOutput) ToConnectorMappingStructureArrayOutput() ConnectorMappingStructureArrayOutput {
	return o
}

func (o ConnectorMappingStructureArrayOutput) ToConnectorMappingStructureArrayOutputWithContext(ctx context.Context) ConnectorMappingStructureArrayOutput {
	return o
}

func (o ConnectorMappingStructureArrayOutput) Index(i pulumi.IntInput) ConnectorMappingStructureOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ConnectorMappingStructure {
		return vs[0].([]ConnectorMappingStructure)[vs[1].(int)]
	}).(ConnectorMappingStructureOutput)
}

// Connector mapping property structure.
type ConnectorMappingStructureResponse struct {
	// The column name of the import file.
	ColumnName string `pulumi:"columnName"`
	// Custom format specifier for input parsing.
	CustomFormatSpecifier *string `pulumi:"customFormatSpecifier"`
	// Indicates if the column is encrypted.
	IsEncrypted *bool `pulumi:"isEncrypted"`
	// The property name of the mapping entity.
	PropertyName string `pulumi:"propertyName"`
}

// ConnectorMappingStructureResponseInput is an input type that accepts ConnectorMappingStructureResponseArgs and ConnectorMappingStructureResponseOutput values.
// You can construct a concrete instance of `ConnectorMappingStructureResponseInput` via:
//
//          ConnectorMappingStructureResponseArgs{...}
type ConnectorMappingStructureResponseInput interface {
	pulumi.Input

	ToConnectorMappingStructureResponseOutput() ConnectorMappingStructureResponseOutput
	ToConnectorMappingStructureResponseOutputWithContext(context.Context) ConnectorMappingStructureResponseOutput
}

// Connector mapping property structure.
type ConnectorMappingStructureResponseArgs struct {
	// The column name of the import file.
	ColumnName pulumi.StringInput `pulumi:"columnName"`
	// Custom format specifier for input parsing.
	CustomFormatSpecifier pulumi.StringPtrInput `pulumi:"customFormatSpecifier"`
	// Indicates if the column is encrypted.
	IsEncrypted pulumi.BoolPtrInput `pulumi:"isEncrypted"`
	// The property name of the mapping entity.
	PropertyName pulumi.StringInput `pulumi:"propertyName"`
}

func (ConnectorMappingStructureResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectorMappingStructureResponse)(nil)).Elem()
}

func (i ConnectorMappingStructureResponseArgs) ToConnectorMappingStructureResponseOutput() ConnectorMappingStructureResponseOutput {
	return i.ToConnectorMappingStructureResponseOutputWithContext(context.Background())
}

func (i ConnectorMappingStructureResponseArgs) ToConnectorMappingStructureResponseOutputWithContext(ctx context.Context) ConnectorMappingStructureResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectorMappingStructureResponseOutput)
}

// ConnectorMappingStructureResponseArrayInput is an input type that accepts ConnectorMappingStructureResponseArray and ConnectorMappingStructureResponseArrayOutput values.
// You can construct a concrete instance of `ConnectorMappingStructureResponseArrayInput` via:
//
//          ConnectorMappingStructureResponseArray{ ConnectorMappingStructureResponseArgs{...} }
type ConnectorMappingStructureResponseArrayInput interface {
	pulumi.Input

	ToConnectorMappingStructureResponseArrayOutput() ConnectorMappingStructureResponseArrayOutput
	ToConnectorMappingStructureResponseArrayOutputWithContext(context.Context) ConnectorMappingStructureResponseArrayOutput
}

type ConnectorMappingStructureResponseArray []ConnectorMappingStructureResponseInput

func (ConnectorMappingStructureResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ConnectorMappingStructureResponse)(nil)).Elem()
}

func (i ConnectorMappingStructureResponseArray) ToConnectorMappingStructureResponseArrayOutput() ConnectorMappingStructureResponseArrayOutput {
	return i.ToConnectorMappingStructureResponseArrayOutputWithContext(context.Background())
}

func (i ConnectorMappingStructureResponseArray) ToConnectorMappingStructureResponseArrayOutputWithContext(ctx context.Context) ConnectorMappingStructureResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectorMappingStructureResponseArrayOutput)
}

// Connector mapping property structure.
type ConnectorMappingStructureResponseOutput struct{ *pulumi.OutputState }

func (ConnectorMappingStructureResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectorMappingStructureResponse)(nil)).Elem()
}

func (o ConnectorMappingStructureResponseOutput) ToConnectorMappingStructureResponseOutput() ConnectorMappingStructureResponseOutput {
	return o
}

func (o ConnectorMappingStructureResponseOutput) ToConnectorMappingStructureResponseOutputWithContext(ctx context.Context) ConnectorMappingStructureResponseOutput {
	return o
}

// The column name of the import file.
func (o ConnectorMappingStructureResponseOutput) ColumnName() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectorMappingStructureResponse) string { return v.ColumnName }).(pulumi.StringOutput)
}

// Custom format specifier for input parsing.
func (o ConnectorMappingStructureResponseOutput) CustomFormatSpecifier() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ConnectorMappingStructureResponse) *string { return v.CustomFormatSpecifier }).(pulumi.StringPtrOutput)
}

// Indicates if the column is encrypted.
func (o ConnectorMappingStructureResponseOutput) IsEncrypted() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ConnectorMappingStructureResponse) *bool { return v.IsEncrypted }).(pulumi.BoolPtrOutput)
}

// The property name of the mapping entity.
func (o ConnectorMappingStructureResponseOutput) PropertyName() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectorMappingStructureResponse) string { return v.PropertyName }).(pulumi.StringOutput)
}

type ConnectorMappingStructureResponseArrayOutput struct{ *pulumi.OutputState }

func (ConnectorMappingStructureResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ConnectorMappingStructureResponse)(nil)).Elem()
}

func (o ConnectorMappingStructureResponseArrayOutput) ToConnectorMappingStructureResponseArrayOutput() ConnectorMappingStructureResponseArrayOutput {
	return o
}

func (o ConnectorMappingStructureResponseArrayOutput) ToConnectorMappingStructureResponseArrayOutputWithContext(ctx context.Context) ConnectorMappingStructureResponseArrayOutput {
	return o
}

func (o ConnectorMappingStructureResponseArrayOutput) Index(i pulumi.IntInput) ConnectorMappingStructureResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ConnectorMappingStructureResponse {
		return vs[0].([]ConnectorMappingStructureResponse)[vs[1].(int)]
	}).(ConnectorMappingStructureResponseOutput)
}

// Properties of connector.
type ConnectorResponse struct {
	// ID of the connector.
	ConnectorId int `pulumi:"connectorId"`
	// Name of the connector.
	ConnectorName *string `pulumi:"connectorName"`
	// The connector properties.
	ConnectorProperties map[string]map[string]interface{} `pulumi:"connectorProperties"`
	// Type of connector.
	ConnectorType string `pulumi:"connectorType"`
	// The created time.
	Created string `pulumi:"created"`
	// Description of the connector.
	Description *string `pulumi:"description"`
	// Display name of the connector.
	DisplayName *string `pulumi:"displayName"`
	// If this is an internal connector.
	IsInternal *bool `pulumi:"isInternal"`
	// The last modified time.
	LastModified string `pulumi:"lastModified"`
	// State of connector.
	State string `pulumi:"state"`
	// The hub name.
	TenantId string `pulumi:"tenantId"`
}

// ConnectorResponseInput is an input type that accepts ConnectorResponseArgs and ConnectorResponseOutput values.
// You can construct a concrete instance of `ConnectorResponseInput` via:
//
//          ConnectorResponseArgs{...}
type ConnectorResponseInput interface {
	pulumi.Input

	ToConnectorResponseOutput() ConnectorResponseOutput
	ToConnectorResponseOutputWithContext(context.Context) ConnectorResponseOutput
}

// Properties of connector.
type ConnectorResponseArgs struct {
	// ID of the connector.
	ConnectorId pulumi.IntInput `pulumi:"connectorId"`
	// Name of the connector.
	ConnectorName pulumi.StringPtrInput `pulumi:"connectorName"`
	// The connector properties.
	ConnectorProperties pulumi.MapMapInput `pulumi:"connectorProperties"`
	// Type of connector.
	ConnectorType pulumi.StringInput `pulumi:"connectorType"`
	// The created time.
	Created pulumi.StringInput `pulumi:"created"`
	// Description of the connector.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Display name of the connector.
	DisplayName pulumi.StringPtrInput `pulumi:"displayName"`
	// If this is an internal connector.
	IsInternal pulumi.BoolPtrInput `pulumi:"isInternal"`
	// The last modified time.
	LastModified pulumi.StringInput `pulumi:"lastModified"`
	// State of connector.
	State pulumi.StringInput `pulumi:"state"`
	// The hub name.
	TenantId pulumi.StringInput `pulumi:"tenantId"`
}

func (ConnectorResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectorResponse)(nil)).Elem()
}

func (i ConnectorResponseArgs) ToConnectorResponseOutput() ConnectorResponseOutput {
	return i.ToConnectorResponseOutputWithContext(context.Background())
}

func (i ConnectorResponseArgs) ToConnectorResponseOutputWithContext(ctx context.Context) ConnectorResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectorResponseOutput)
}

func (i ConnectorResponseArgs) ToConnectorResponsePtrOutput() ConnectorResponsePtrOutput {
	return i.ToConnectorResponsePtrOutputWithContext(context.Background())
}

func (i ConnectorResponseArgs) ToConnectorResponsePtrOutputWithContext(ctx context.Context) ConnectorResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectorResponseOutput).ToConnectorResponsePtrOutputWithContext(ctx)
}

// ConnectorResponsePtrInput is an input type that accepts ConnectorResponseArgs, ConnectorResponsePtr and ConnectorResponsePtrOutput values.
// You can construct a concrete instance of `ConnectorResponsePtrInput` via:
//
//          ConnectorResponseArgs{...}
//
//  or:
//
//          nil
type ConnectorResponsePtrInput interface {
	pulumi.Input

	ToConnectorResponsePtrOutput() ConnectorResponsePtrOutput
	ToConnectorResponsePtrOutputWithContext(context.Context) ConnectorResponsePtrOutput
}

type connectorResponsePtrType ConnectorResponseArgs

func ConnectorResponsePtr(v *ConnectorResponseArgs) ConnectorResponsePtrInput {
	return (*connectorResponsePtrType)(v)
}

func (*connectorResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ConnectorResponse)(nil)).Elem()
}

func (i *connectorResponsePtrType) ToConnectorResponsePtrOutput() ConnectorResponsePtrOutput {
	return i.ToConnectorResponsePtrOutputWithContext(context.Background())
}

func (i *connectorResponsePtrType) ToConnectorResponsePtrOutputWithContext(ctx context.Context) ConnectorResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectorResponsePtrOutput)
}

// Properties of connector.
type ConnectorResponseOutput struct{ *pulumi.OutputState }

func (ConnectorResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectorResponse)(nil)).Elem()
}

func (o ConnectorResponseOutput) ToConnectorResponseOutput() ConnectorResponseOutput {
	return o
}

func (o ConnectorResponseOutput) ToConnectorResponseOutputWithContext(ctx context.Context) ConnectorResponseOutput {
	return o
}

func (o ConnectorResponseOutput) ToConnectorResponsePtrOutput() ConnectorResponsePtrOutput {
	return o.ToConnectorResponsePtrOutputWithContext(context.Background())
}

func (o ConnectorResponseOutput) ToConnectorResponsePtrOutputWithContext(ctx context.Context) ConnectorResponsePtrOutput {
	return o.ApplyT(func(v ConnectorResponse) *ConnectorResponse {
		return &v
	}).(ConnectorResponsePtrOutput)
}

// ID of the connector.
func (o ConnectorResponseOutput) ConnectorId() pulumi.IntOutput {
	return o.ApplyT(func(v ConnectorResponse) int { return v.ConnectorId }).(pulumi.IntOutput)
}

// Name of the connector.
func (o ConnectorResponseOutput) ConnectorName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ConnectorResponse) *string { return v.ConnectorName }).(pulumi.StringPtrOutput)
}

// The connector properties.
func (o ConnectorResponseOutput) ConnectorProperties() pulumi.MapMapOutput {
	return o.ApplyT(func(v ConnectorResponse) map[string]map[string]interface{} { return v.ConnectorProperties }).(pulumi.MapMapOutput)
}

// Type of connector.
func (o ConnectorResponseOutput) ConnectorType() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectorResponse) string { return v.ConnectorType }).(pulumi.StringOutput)
}

// The created time.
func (o ConnectorResponseOutput) Created() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectorResponse) string { return v.Created }).(pulumi.StringOutput)
}

// Description of the connector.
func (o ConnectorResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ConnectorResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Display name of the connector.
func (o ConnectorResponseOutput) DisplayName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ConnectorResponse) *string { return v.DisplayName }).(pulumi.StringPtrOutput)
}

// If this is an internal connector.
func (o ConnectorResponseOutput) IsInternal() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ConnectorResponse) *bool { return v.IsInternal }).(pulumi.BoolPtrOutput)
}

// The last modified time.
func (o ConnectorResponseOutput) LastModified() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectorResponse) string { return v.LastModified }).(pulumi.StringOutput)
}

// State of connector.
func (o ConnectorResponseOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectorResponse) string { return v.State }).(pulumi.StringOutput)
}

// The hub name.
func (o ConnectorResponseOutput) TenantId() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectorResponse) string { return v.TenantId }).(pulumi.StringOutput)
}

type ConnectorResponsePtrOutput struct{ *pulumi.OutputState }

func (ConnectorResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ConnectorResponse)(nil)).Elem()
}

func (o ConnectorResponsePtrOutput) ToConnectorResponsePtrOutput() ConnectorResponsePtrOutput {
	return o
}

func (o ConnectorResponsePtrOutput) ToConnectorResponsePtrOutputWithContext(ctx context.Context) ConnectorResponsePtrOutput {
	return o
}

func (o ConnectorResponsePtrOutput) Elem() ConnectorResponseOutput {
	return o.ApplyT(func(v *ConnectorResponse) ConnectorResponse { return *v }).(ConnectorResponseOutput)
}

// ID of the connector.
func (o ConnectorResponsePtrOutput) ConnectorId() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ConnectorResponse) *int {
		if v == nil {
			return nil
		}
		return &v.ConnectorId
	}).(pulumi.IntPtrOutput)
}

// Name of the connector.
func (o ConnectorResponsePtrOutput) ConnectorName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConnectorResponse) *string {
		if v == nil {
			return nil
		}
		return v.ConnectorName
	}).(pulumi.StringPtrOutput)
}

// The connector properties.
func (o ConnectorResponsePtrOutput) ConnectorProperties() pulumi.MapMapOutput {
	return o.ApplyT(func(v *ConnectorResponse) map[string]map[string]interface{} {
		if v == nil {
			return nil
		}
		return v.ConnectorProperties
	}).(pulumi.MapMapOutput)
}

// Type of connector.
func (o ConnectorResponsePtrOutput) ConnectorType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConnectorResponse) *string {
		if v == nil {
			return nil
		}
		return &v.ConnectorType
	}).(pulumi.StringPtrOutput)
}

// The created time.
func (o ConnectorResponsePtrOutput) Created() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConnectorResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Created
	}).(pulumi.StringPtrOutput)
}

// Description of the connector.
func (o ConnectorResponsePtrOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConnectorResponse) *string {
		if v == nil {
			return nil
		}
		return v.Description
	}).(pulumi.StringPtrOutput)
}

// Display name of the connector.
func (o ConnectorResponsePtrOutput) DisplayName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConnectorResponse) *string {
		if v == nil {
			return nil
		}
		return v.DisplayName
	}).(pulumi.StringPtrOutput)
}

// If this is an internal connector.
func (o ConnectorResponsePtrOutput) IsInternal() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ConnectorResponse) *bool {
		if v == nil {
			return nil
		}
		return v.IsInternal
	}).(pulumi.BoolPtrOutput)
}

// The last modified time.
func (o ConnectorResponsePtrOutput) LastModified() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConnectorResponse) *string {
		if v == nil {
			return nil
		}
		return &v.LastModified
	}).(pulumi.StringPtrOutput)
}

// State of connector.
func (o ConnectorResponsePtrOutput) State() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConnectorResponse) *string {
		if v == nil {
			return nil
		}
		return &v.State
	}).(pulumi.StringPtrOutput)
}

// The hub name.
func (o ConnectorResponsePtrOutput) TenantId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConnectorResponse) *string {
		if v == nil {
			return nil
		}
		return &v.TenantId
	}).(pulumi.StringPtrOutput)
}

// The data source precedence is a way to know the precedence of each data source.
type DataSourcePrecedenceResponse struct {
	// Data Source is a way for us to know the source of instances. A single type can have data coming in from multiple places. In activities we use this to determine precedence rules.
	DataSource *DataSourceResponse `pulumi:"dataSource"`
	// the precedence value.
	Precedence *int `pulumi:"precedence"`
}

// DataSourcePrecedenceResponseInput is an input type that accepts DataSourcePrecedenceResponseArgs and DataSourcePrecedenceResponseOutput values.
// You can construct a concrete instance of `DataSourcePrecedenceResponseInput` via:
//
//          DataSourcePrecedenceResponseArgs{...}
type DataSourcePrecedenceResponseInput interface {
	pulumi.Input

	ToDataSourcePrecedenceResponseOutput() DataSourcePrecedenceResponseOutput
	ToDataSourcePrecedenceResponseOutputWithContext(context.Context) DataSourcePrecedenceResponseOutput
}

// The data source precedence is a way to know the precedence of each data source.
type DataSourcePrecedenceResponseArgs struct {
	// Data Source is a way for us to know the source of instances. A single type can have data coming in from multiple places. In activities we use this to determine precedence rules.
	DataSource DataSourceResponsePtrInput `pulumi:"dataSource"`
	// the precedence value.
	Precedence pulumi.IntPtrInput `pulumi:"precedence"`
}

func (DataSourcePrecedenceResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSourcePrecedenceResponse)(nil)).Elem()
}

func (i DataSourcePrecedenceResponseArgs) ToDataSourcePrecedenceResponseOutput() DataSourcePrecedenceResponseOutput {
	return i.ToDataSourcePrecedenceResponseOutputWithContext(context.Background())
}

func (i DataSourcePrecedenceResponseArgs) ToDataSourcePrecedenceResponseOutputWithContext(ctx context.Context) DataSourcePrecedenceResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSourcePrecedenceResponseOutput)
}

// DataSourcePrecedenceResponseArrayInput is an input type that accepts DataSourcePrecedenceResponseArray and DataSourcePrecedenceResponseArrayOutput values.
// You can construct a concrete instance of `DataSourcePrecedenceResponseArrayInput` via:
//
//          DataSourcePrecedenceResponseArray{ DataSourcePrecedenceResponseArgs{...} }
type DataSourcePrecedenceResponseArrayInput interface {
	pulumi.Input

	ToDataSourcePrecedenceResponseArrayOutput() DataSourcePrecedenceResponseArrayOutput
	ToDataSourcePrecedenceResponseArrayOutputWithContext(context.Context) DataSourcePrecedenceResponseArrayOutput
}

type DataSourcePrecedenceResponseArray []DataSourcePrecedenceResponseInput

func (DataSourcePrecedenceResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DataSourcePrecedenceResponse)(nil)).Elem()
}

func (i DataSourcePrecedenceResponseArray) ToDataSourcePrecedenceResponseArrayOutput() DataSourcePrecedenceResponseArrayOutput {
	return i.ToDataSourcePrecedenceResponseArrayOutputWithContext(context.Background())
}

func (i DataSourcePrecedenceResponseArray) ToDataSourcePrecedenceResponseArrayOutputWithContext(ctx context.Context) DataSourcePrecedenceResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSourcePrecedenceResponseArrayOutput)
}

// The data source precedence is a way to know the precedence of each data source.
type DataSourcePrecedenceResponseOutput struct{ *pulumi.OutputState }

func (DataSourcePrecedenceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSourcePrecedenceResponse)(nil)).Elem()
}

func (o DataSourcePrecedenceResponseOutput) ToDataSourcePrecedenceResponseOutput() DataSourcePrecedenceResponseOutput {
	return o
}

func (o DataSourcePrecedenceResponseOutput) ToDataSourcePrecedenceResponseOutputWithContext(ctx context.Context) DataSourcePrecedenceResponseOutput {
	return o
}

// Data Source is a way for us to know the source of instances. A single type can have data coming in from multiple places. In activities we use this to determine precedence rules.
func (o DataSourcePrecedenceResponseOutput) DataSource() DataSourceResponsePtrOutput {
	return o.ApplyT(func(v DataSourcePrecedenceResponse) *DataSourceResponse { return v.DataSource }).(DataSourceResponsePtrOutput)
}

// the precedence value.
func (o DataSourcePrecedenceResponseOutput) Precedence() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DataSourcePrecedenceResponse) *int { return v.Precedence }).(pulumi.IntPtrOutput)
}

type DataSourcePrecedenceResponseArrayOutput struct{ *pulumi.OutputState }

func (DataSourcePrecedenceResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DataSourcePrecedenceResponse)(nil)).Elem()
}

func (o DataSourcePrecedenceResponseArrayOutput) ToDataSourcePrecedenceResponseArrayOutput() DataSourcePrecedenceResponseArrayOutput {
	return o
}

func (o DataSourcePrecedenceResponseArrayOutput) ToDataSourcePrecedenceResponseArrayOutputWithContext(ctx context.Context) DataSourcePrecedenceResponseArrayOutput {
	return o
}

func (o DataSourcePrecedenceResponseArrayOutput) Index(i pulumi.IntInput) DataSourcePrecedenceResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DataSourcePrecedenceResponse {
		return vs[0].([]DataSourcePrecedenceResponse)[vs[1].(int)]
	}).(DataSourcePrecedenceResponseOutput)
}

// Data Source is a way for us to know the source of instances. A single type can have data coming in from multiple places. In activities we use this to determine precedence rules.
type DataSourceResponse struct {
	// The data source reference id.
	DataSourceReferenceId string `pulumi:"dataSourceReferenceId"`
	// The data source type.
	DataSourceType string `pulumi:"dataSourceType"`
	// The data source ID.
	Id int `pulumi:"id"`
	// The data source name
	Name string `pulumi:"name"`
	// The data source status.
	Status string `pulumi:"status"`
}

// DataSourceResponseInput is an input type that accepts DataSourceResponseArgs and DataSourceResponseOutput values.
// You can construct a concrete instance of `DataSourceResponseInput` via:
//
//          DataSourceResponseArgs{...}
type DataSourceResponseInput interface {
	pulumi.Input

	ToDataSourceResponseOutput() DataSourceResponseOutput
	ToDataSourceResponseOutputWithContext(context.Context) DataSourceResponseOutput
}

// Data Source is a way for us to know the source of instances. A single type can have data coming in from multiple places. In activities we use this to determine precedence rules.
type DataSourceResponseArgs struct {
	// The data source reference id.
	DataSourceReferenceId pulumi.StringInput `pulumi:"dataSourceReferenceId"`
	// The data source type.
	DataSourceType pulumi.StringInput `pulumi:"dataSourceType"`
	// The data source ID.
	Id pulumi.IntInput `pulumi:"id"`
	// The data source name
	Name pulumi.StringInput `pulumi:"name"`
	// The data source status.
	Status pulumi.StringInput `pulumi:"status"`
}

func (DataSourceResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSourceResponse)(nil)).Elem()
}

func (i DataSourceResponseArgs) ToDataSourceResponseOutput() DataSourceResponseOutput {
	return i.ToDataSourceResponseOutputWithContext(context.Background())
}

func (i DataSourceResponseArgs) ToDataSourceResponseOutputWithContext(ctx context.Context) DataSourceResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSourceResponseOutput)
}

func (i DataSourceResponseArgs) ToDataSourceResponsePtrOutput() DataSourceResponsePtrOutput {
	return i.ToDataSourceResponsePtrOutputWithContext(context.Background())
}

func (i DataSourceResponseArgs) ToDataSourceResponsePtrOutputWithContext(ctx context.Context) DataSourceResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSourceResponseOutput).ToDataSourceResponsePtrOutputWithContext(ctx)
}

// DataSourceResponsePtrInput is an input type that accepts DataSourceResponseArgs, DataSourceResponsePtr and DataSourceResponsePtrOutput values.
// You can construct a concrete instance of `DataSourceResponsePtrInput` via:
//
//          DataSourceResponseArgs{...}
//
//  or:
//
//          nil
type DataSourceResponsePtrInput interface {
	pulumi.Input

	ToDataSourceResponsePtrOutput() DataSourceResponsePtrOutput
	ToDataSourceResponsePtrOutputWithContext(context.Context) DataSourceResponsePtrOutput
}

type dataSourceResponsePtrType DataSourceResponseArgs

func DataSourceResponsePtr(v *DataSourceResponseArgs) DataSourceResponsePtrInput {
	return (*dataSourceResponsePtrType)(v)
}

func (*dataSourceResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DataSourceResponse)(nil)).Elem()
}

func (i *dataSourceResponsePtrType) ToDataSourceResponsePtrOutput() DataSourceResponsePtrOutput {
	return i.ToDataSourceResponsePtrOutputWithContext(context.Background())
}

func (i *dataSourceResponsePtrType) ToDataSourceResponsePtrOutputWithContext(ctx context.Context) DataSourceResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSourceResponsePtrOutput)
}

// Data Source is a way for us to know the source of instances. A single type can have data coming in from multiple places. In activities we use this to determine precedence rules.
type DataSourceResponseOutput struct{ *pulumi.OutputState }

func (DataSourceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSourceResponse)(nil)).Elem()
}

func (o DataSourceResponseOutput) ToDataSourceResponseOutput() DataSourceResponseOutput {
	return o
}

func (o DataSourceResponseOutput) ToDataSourceResponseOutputWithContext(ctx context.Context) DataSourceResponseOutput {
	return o
}

func (o DataSourceResponseOutput) ToDataSourceResponsePtrOutput() DataSourceResponsePtrOutput {
	return o.ToDataSourceResponsePtrOutputWithContext(context.Background())
}

func (o DataSourceResponseOutput) ToDataSourceResponsePtrOutputWithContext(ctx context.Context) DataSourceResponsePtrOutput {
	return o.ApplyT(func(v DataSourceResponse) *DataSourceResponse {
		return &v
	}).(DataSourceResponsePtrOutput)
}

// The data source reference id.
func (o DataSourceResponseOutput) DataSourceReferenceId() pulumi.StringOutput {
	return o.ApplyT(func(v DataSourceResponse) string { return v.DataSourceReferenceId }).(pulumi.StringOutput)
}

// The data source type.
func (o DataSourceResponseOutput) DataSourceType() pulumi.StringOutput {
	return o.ApplyT(func(v DataSourceResponse) string { return v.DataSourceType }).(pulumi.StringOutput)
}

// The data source ID.
func (o DataSourceResponseOutput) Id() pulumi.IntOutput {
	return o.ApplyT(func(v DataSourceResponse) int { return v.Id }).(pulumi.IntOutput)
}

// The data source name
func (o DataSourceResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v DataSourceResponse) string { return v.Name }).(pulumi.StringOutput)
}

// The data source status.
func (o DataSourceResponseOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v DataSourceResponse) string { return v.Status }).(pulumi.StringOutput)
}

type DataSourceResponsePtrOutput struct{ *pulumi.OutputState }

func (DataSourceResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DataSourceResponse)(nil)).Elem()
}

func (o DataSourceResponsePtrOutput) ToDataSourceResponsePtrOutput() DataSourceResponsePtrOutput {
	return o
}

func (o DataSourceResponsePtrOutput) ToDataSourceResponsePtrOutputWithContext(ctx context.Context) DataSourceResponsePtrOutput {
	return o
}

func (o DataSourceResponsePtrOutput) Elem() DataSourceResponseOutput {
	return o.ApplyT(func(v *DataSourceResponse) DataSourceResponse { return *v }).(DataSourceResponseOutput)
}

// The data source reference id.
func (o DataSourceResponsePtrOutput) DataSourceReferenceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DataSourceResponse) *string {
		if v == nil {
			return nil
		}
		return &v.DataSourceReferenceId
	}).(pulumi.StringPtrOutput)
}

// The data source type.
func (o DataSourceResponsePtrOutput) DataSourceType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DataSourceResponse) *string {
		if v == nil {
			return nil
		}
		return &v.DataSourceType
	}).(pulumi.StringPtrOutput)
}

// The data source ID.
func (o DataSourceResponsePtrOutput) Id() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *DataSourceResponse) *int {
		if v == nil {
			return nil
		}
		return &v.Id
	}).(pulumi.IntPtrOutput)
}

// The data source name
func (o DataSourceResponsePtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DataSourceResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Name
	}).(pulumi.StringPtrOutput)
}

// The data source status.
func (o DataSourceResponsePtrOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DataSourceResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Status
	}).(pulumi.StringPtrOutput)
}

// Hub billing info.
type HubBillingInfoFormat struct {
	// The maximum number of units can be used.  One unit is 10,000 Profiles and 100,000 Interactions.
	MaxUnits *int `pulumi:"maxUnits"`
	// The minimum number of units will be billed. One unit is 10,000 Profiles and 100,000 Interactions.
	MinUnits *int `pulumi:"minUnits"`
	// The sku name.
	SkuName *string `pulumi:"skuName"`
}

// HubBillingInfoFormatInput is an input type that accepts HubBillingInfoFormatArgs and HubBillingInfoFormatOutput values.
// You can construct a concrete instance of `HubBillingInfoFormatInput` via:
//
//          HubBillingInfoFormatArgs{...}
type HubBillingInfoFormatInput interface {
	pulumi.Input

	ToHubBillingInfoFormatOutput() HubBillingInfoFormatOutput
	ToHubBillingInfoFormatOutputWithContext(context.Context) HubBillingInfoFormatOutput
}

// Hub billing info.
type HubBillingInfoFormatArgs struct {
	// The maximum number of units can be used.  One unit is 10,000 Profiles and 100,000 Interactions.
	MaxUnits pulumi.IntPtrInput `pulumi:"maxUnits"`
	// The minimum number of units will be billed. One unit is 10,000 Profiles and 100,000 Interactions.
	MinUnits pulumi.IntPtrInput `pulumi:"minUnits"`
	// The sku name.
	SkuName pulumi.StringPtrInput `pulumi:"skuName"`
}

func (HubBillingInfoFormatArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HubBillingInfoFormat)(nil)).Elem()
}

func (i HubBillingInfoFormatArgs) ToHubBillingInfoFormatOutput() HubBillingInfoFormatOutput {
	return i.ToHubBillingInfoFormatOutputWithContext(context.Background())
}

func (i HubBillingInfoFormatArgs) ToHubBillingInfoFormatOutputWithContext(ctx context.Context) HubBillingInfoFormatOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HubBillingInfoFormatOutput)
}

func (i HubBillingInfoFormatArgs) ToHubBillingInfoFormatPtrOutput() HubBillingInfoFormatPtrOutput {
	return i.ToHubBillingInfoFormatPtrOutputWithContext(context.Background())
}

func (i HubBillingInfoFormatArgs) ToHubBillingInfoFormatPtrOutputWithContext(ctx context.Context) HubBillingInfoFormatPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HubBillingInfoFormatOutput).ToHubBillingInfoFormatPtrOutputWithContext(ctx)
}

// HubBillingInfoFormatPtrInput is an input type that accepts HubBillingInfoFormatArgs, HubBillingInfoFormatPtr and HubBillingInfoFormatPtrOutput values.
// You can construct a concrete instance of `HubBillingInfoFormatPtrInput` via:
//
//          HubBillingInfoFormatArgs{...}
//
//  or:
//
//          nil
type HubBillingInfoFormatPtrInput interface {
	pulumi.Input

	ToHubBillingInfoFormatPtrOutput() HubBillingInfoFormatPtrOutput
	ToHubBillingInfoFormatPtrOutputWithContext(context.Context) HubBillingInfoFormatPtrOutput
}

type hubBillingInfoFormatPtrType HubBillingInfoFormatArgs

func HubBillingInfoFormatPtr(v *HubBillingInfoFormatArgs) HubBillingInfoFormatPtrInput {
	return (*hubBillingInfoFormatPtrType)(v)
}

func (*hubBillingInfoFormatPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**HubBillingInfoFormat)(nil)).Elem()
}

func (i *hubBillingInfoFormatPtrType) ToHubBillingInfoFormatPtrOutput() HubBillingInfoFormatPtrOutput {
	return i.ToHubBillingInfoFormatPtrOutputWithContext(context.Background())
}

func (i *hubBillingInfoFormatPtrType) ToHubBillingInfoFormatPtrOutputWithContext(ctx context.Context) HubBillingInfoFormatPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HubBillingInfoFormatPtrOutput)
}

// Hub billing info.
type HubBillingInfoFormatOutput struct{ *pulumi.OutputState }

func (HubBillingInfoFormatOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HubBillingInfoFormat)(nil)).Elem()
}

func (o HubBillingInfoFormatOutput) ToHubBillingInfoFormatOutput() HubBillingInfoFormatOutput {
	return o
}

func (o HubBillingInfoFormatOutput) ToHubBillingInfoFormatOutputWithContext(ctx context.Context) HubBillingInfoFormatOutput {
	return o
}

func (o HubBillingInfoFormatOutput) ToHubBillingInfoFormatPtrOutput() HubBillingInfoFormatPtrOutput {
	return o.ToHubBillingInfoFormatPtrOutputWithContext(context.Background())
}

func (o HubBillingInfoFormatOutput) ToHubBillingInfoFormatPtrOutputWithContext(ctx context.Context) HubBillingInfoFormatPtrOutput {
	return o.ApplyT(func(v HubBillingInfoFormat) *HubBillingInfoFormat {
		return &v
	}).(HubBillingInfoFormatPtrOutput)
}

// The maximum number of units can be used.  One unit is 10,000 Profiles and 100,000 Interactions.
func (o HubBillingInfoFormatOutput) MaxUnits() pulumi.IntPtrOutput {
	return o.ApplyT(func(v HubBillingInfoFormat) *int { return v.MaxUnits }).(pulumi.IntPtrOutput)
}

// The minimum number of units will be billed. One unit is 10,000 Profiles and 100,000 Interactions.
func (o HubBillingInfoFormatOutput) MinUnits() pulumi.IntPtrOutput {
	return o.ApplyT(func(v HubBillingInfoFormat) *int { return v.MinUnits }).(pulumi.IntPtrOutput)
}

// The sku name.
func (o HubBillingInfoFormatOutput) SkuName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HubBillingInfoFormat) *string { return v.SkuName }).(pulumi.StringPtrOutput)
}

type HubBillingInfoFormatPtrOutput struct{ *pulumi.OutputState }

func (HubBillingInfoFormatPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**HubBillingInfoFormat)(nil)).Elem()
}

func (o HubBillingInfoFormatPtrOutput) ToHubBillingInfoFormatPtrOutput() HubBillingInfoFormatPtrOutput {
	return o
}

func (o HubBillingInfoFormatPtrOutput) ToHubBillingInfoFormatPtrOutputWithContext(ctx context.Context) HubBillingInfoFormatPtrOutput {
	return o
}

func (o HubBillingInfoFormatPtrOutput) Elem() HubBillingInfoFormatOutput {
	return o.ApplyT(func(v *HubBillingInfoFormat) HubBillingInfoFormat { return *v }).(HubBillingInfoFormatOutput)
}

// The maximum number of units can be used.  One unit is 10,000 Profiles and 100,000 Interactions.
func (o HubBillingInfoFormatPtrOutput) MaxUnits() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *HubBillingInfoFormat) *int {
		if v == nil {
			return nil
		}
		return v.MaxUnits
	}).(pulumi.IntPtrOutput)
}

// The minimum number of units will be billed. One unit is 10,000 Profiles and 100,000 Interactions.
func (o HubBillingInfoFormatPtrOutput) MinUnits() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *HubBillingInfoFormat) *int {
		if v == nil {
			return nil
		}
		return v.MinUnits
	}).(pulumi.IntPtrOutput)
}

// The sku name.
func (o HubBillingInfoFormatPtrOutput) SkuName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HubBillingInfoFormat) *string {
		if v == nil {
			return nil
		}
		return v.SkuName
	}).(pulumi.StringPtrOutput)
}

// Hub billing info.
type HubBillingInfoFormatResponse struct {
	// The maximum number of units can be used.  One unit is 10,000 Profiles and 100,000 Interactions.
	MaxUnits *int `pulumi:"maxUnits"`
	// The minimum number of units will be billed. One unit is 10,000 Profiles and 100,000 Interactions.
	MinUnits *int `pulumi:"minUnits"`
	// The sku name.
	SkuName *string `pulumi:"skuName"`
}

// HubBillingInfoFormatResponseInput is an input type that accepts HubBillingInfoFormatResponseArgs and HubBillingInfoFormatResponseOutput values.
// You can construct a concrete instance of `HubBillingInfoFormatResponseInput` via:
//
//          HubBillingInfoFormatResponseArgs{...}
type HubBillingInfoFormatResponseInput interface {
	pulumi.Input

	ToHubBillingInfoFormatResponseOutput() HubBillingInfoFormatResponseOutput
	ToHubBillingInfoFormatResponseOutputWithContext(context.Context) HubBillingInfoFormatResponseOutput
}

// Hub billing info.
type HubBillingInfoFormatResponseArgs struct {
	// The maximum number of units can be used.  One unit is 10,000 Profiles and 100,000 Interactions.
	MaxUnits pulumi.IntPtrInput `pulumi:"maxUnits"`
	// The minimum number of units will be billed. One unit is 10,000 Profiles and 100,000 Interactions.
	MinUnits pulumi.IntPtrInput `pulumi:"minUnits"`
	// The sku name.
	SkuName pulumi.StringPtrInput `pulumi:"skuName"`
}

func (HubBillingInfoFormatResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HubBillingInfoFormatResponse)(nil)).Elem()
}

func (i HubBillingInfoFormatResponseArgs) ToHubBillingInfoFormatResponseOutput() HubBillingInfoFormatResponseOutput {
	return i.ToHubBillingInfoFormatResponseOutputWithContext(context.Background())
}

func (i HubBillingInfoFormatResponseArgs) ToHubBillingInfoFormatResponseOutputWithContext(ctx context.Context) HubBillingInfoFormatResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HubBillingInfoFormatResponseOutput)
}

func (i HubBillingInfoFormatResponseArgs) ToHubBillingInfoFormatResponsePtrOutput() HubBillingInfoFormatResponsePtrOutput {
	return i.ToHubBillingInfoFormatResponsePtrOutputWithContext(context.Background())
}

func (i HubBillingInfoFormatResponseArgs) ToHubBillingInfoFormatResponsePtrOutputWithContext(ctx context.Context) HubBillingInfoFormatResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HubBillingInfoFormatResponseOutput).ToHubBillingInfoFormatResponsePtrOutputWithContext(ctx)
}

// HubBillingInfoFormatResponsePtrInput is an input type that accepts HubBillingInfoFormatResponseArgs, HubBillingInfoFormatResponsePtr and HubBillingInfoFormatResponsePtrOutput values.
// You can construct a concrete instance of `HubBillingInfoFormatResponsePtrInput` via:
//
//          HubBillingInfoFormatResponseArgs{...}
//
//  or:
//
//          nil
type HubBillingInfoFormatResponsePtrInput interface {
	pulumi.Input

	ToHubBillingInfoFormatResponsePtrOutput() HubBillingInfoFormatResponsePtrOutput
	ToHubBillingInfoFormatResponsePtrOutputWithContext(context.Context) HubBillingInfoFormatResponsePtrOutput
}

type hubBillingInfoFormatResponsePtrType HubBillingInfoFormatResponseArgs

func HubBillingInfoFormatResponsePtr(v *HubBillingInfoFormatResponseArgs) HubBillingInfoFormatResponsePtrInput {
	return (*hubBillingInfoFormatResponsePtrType)(v)
}

func (*hubBillingInfoFormatResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**HubBillingInfoFormatResponse)(nil)).Elem()
}

func (i *hubBillingInfoFormatResponsePtrType) ToHubBillingInfoFormatResponsePtrOutput() HubBillingInfoFormatResponsePtrOutput {
	return i.ToHubBillingInfoFormatResponsePtrOutputWithContext(context.Background())
}

func (i *hubBillingInfoFormatResponsePtrType) ToHubBillingInfoFormatResponsePtrOutputWithContext(ctx context.Context) HubBillingInfoFormatResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HubBillingInfoFormatResponsePtrOutput)
}

// Hub billing info.
type HubBillingInfoFormatResponseOutput struct{ *pulumi.OutputState }

func (HubBillingInfoFormatResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HubBillingInfoFormatResponse)(nil)).Elem()
}

func (o HubBillingInfoFormatResponseOutput) ToHubBillingInfoFormatResponseOutput() HubBillingInfoFormatResponseOutput {
	return o
}

func (o HubBillingInfoFormatResponseOutput) ToHubBillingInfoFormatResponseOutputWithContext(ctx context.Context) HubBillingInfoFormatResponseOutput {
	return o
}

func (o HubBillingInfoFormatResponseOutput) ToHubBillingInfoFormatResponsePtrOutput() HubBillingInfoFormatResponsePtrOutput {
	return o.ToHubBillingInfoFormatResponsePtrOutputWithContext(context.Background())
}

func (o HubBillingInfoFormatResponseOutput) ToHubBillingInfoFormatResponsePtrOutputWithContext(ctx context.Context) HubBillingInfoFormatResponsePtrOutput {
	return o.ApplyT(func(v HubBillingInfoFormatResponse) *HubBillingInfoFormatResponse {
		return &v
	}).(HubBillingInfoFormatResponsePtrOutput)
}

// The maximum number of units can be used.  One unit is 10,000 Profiles and 100,000 Interactions.
func (o HubBillingInfoFormatResponseOutput) MaxUnits() pulumi.IntPtrOutput {
	return o.ApplyT(func(v HubBillingInfoFormatResponse) *int { return v.MaxUnits }).(pulumi.IntPtrOutput)
}

// The minimum number of units will be billed. One unit is 10,000 Profiles and 100,000 Interactions.
func (o HubBillingInfoFormatResponseOutput) MinUnits() pulumi.IntPtrOutput {
	return o.ApplyT(func(v HubBillingInfoFormatResponse) *int { return v.MinUnits }).(pulumi.IntPtrOutput)
}

// The sku name.
func (o HubBillingInfoFormatResponseOutput) SkuName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HubBillingInfoFormatResponse) *string { return v.SkuName }).(pulumi.StringPtrOutput)
}

type HubBillingInfoFormatResponsePtrOutput struct{ *pulumi.OutputState }

func (HubBillingInfoFormatResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**HubBillingInfoFormatResponse)(nil)).Elem()
}

func (o HubBillingInfoFormatResponsePtrOutput) ToHubBillingInfoFormatResponsePtrOutput() HubBillingInfoFormatResponsePtrOutput {
	return o
}

func (o HubBillingInfoFormatResponsePtrOutput) ToHubBillingInfoFormatResponsePtrOutputWithContext(ctx context.Context) HubBillingInfoFormatResponsePtrOutput {
	return o
}

func (o HubBillingInfoFormatResponsePtrOutput) Elem() HubBillingInfoFormatResponseOutput {
	return o.ApplyT(func(v *HubBillingInfoFormatResponse) HubBillingInfoFormatResponse { return *v }).(HubBillingInfoFormatResponseOutput)
}

// The maximum number of units can be used.  One unit is 10,000 Profiles and 100,000 Interactions.
func (o HubBillingInfoFormatResponsePtrOutput) MaxUnits() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *HubBillingInfoFormatResponse) *int {
		if v == nil {
			return nil
		}
		return v.MaxUnits
	}).(pulumi.IntPtrOutput)
}

// The minimum number of units will be billed. One unit is 10,000 Profiles and 100,000 Interactions.
func (o HubBillingInfoFormatResponsePtrOutput) MinUnits() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *HubBillingInfoFormatResponse) *int {
		if v == nil {
			return nil
		}
		return v.MinUnits
	}).(pulumi.IntPtrOutput)
}

// The sku name.
func (o HubBillingInfoFormatResponsePtrOutput) SkuName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HubBillingInfoFormatResponse) *string {
		if v == nil {
			return nil
		}
		return v.SkuName
	}).(pulumi.StringPtrOutput)
}

// Properties of hub.
type HubPropertiesFormatResponse struct {
	// API endpoint URL of the hub.
	ApiEndpoint string `pulumi:"apiEndpoint"`
	// Billing settings of the hub.
	HubBillingInfo *HubBillingInfoFormatResponse `pulumi:"hubBillingInfo"`
	// Provisioning state of the hub.
	ProvisioningState string `pulumi:"provisioningState"`
	// The bit flags for enabled hub features. Bit 0 is set to 1 indicates graph is enabled, or disabled if set to 0. Bit 1 is set to 1 indicates the hub is disabled, or enabled if set to 0.
	TenantFeatures *int `pulumi:"tenantFeatures"`
	// Web endpoint URL of the hub.
	WebEndpoint string `pulumi:"webEndpoint"`
}

// HubPropertiesFormatResponseInput is an input type that accepts HubPropertiesFormatResponseArgs and HubPropertiesFormatResponseOutput values.
// You can construct a concrete instance of `HubPropertiesFormatResponseInput` via:
//
//          HubPropertiesFormatResponseArgs{...}
type HubPropertiesFormatResponseInput interface {
	pulumi.Input

	ToHubPropertiesFormatResponseOutput() HubPropertiesFormatResponseOutput
	ToHubPropertiesFormatResponseOutputWithContext(context.Context) HubPropertiesFormatResponseOutput
}

// Properties of hub.
type HubPropertiesFormatResponseArgs struct {
	// API endpoint URL of the hub.
	ApiEndpoint pulumi.StringInput `pulumi:"apiEndpoint"`
	// Billing settings of the hub.
	HubBillingInfo HubBillingInfoFormatResponsePtrInput `pulumi:"hubBillingInfo"`
	// Provisioning state of the hub.
	ProvisioningState pulumi.StringInput `pulumi:"provisioningState"`
	// The bit flags for enabled hub features. Bit 0 is set to 1 indicates graph is enabled, or disabled if set to 0. Bit 1 is set to 1 indicates the hub is disabled, or enabled if set to 0.
	TenantFeatures pulumi.IntPtrInput `pulumi:"tenantFeatures"`
	// Web endpoint URL of the hub.
	WebEndpoint pulumi.StringInput `pulumi:"webEndpoint"`
}

func (HubPropertiesFormatResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HubPropertiesFormatResponse)(nil)).Elem()
}

func (i HubPropertiesFormatResponseArgs) ToHubPropertiesFormatResponseOutput() HubPropertiesFormatResponseOutput {
	return i.ToHubPropertiesFormatResponseOutputWithContext(context.Background())
}

func (i HubPropertiesFormatResponseArgs) ToHubPropertiesFormatResponseOutputWithContext(ctx context.Context) HubPropertiesFormatResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HubPropertiesFormatResponseOutput)
}

func (i HubPropertiesFormatResponseArgs) ToHubPropertiesFormatResponsePtrOutput() HubPropertiesFormatResponsePtrOutput {
	return i.ToHubPropertiesFormatResponsePtrOutputWithContext(context.Background())
}

func (i HubPropertiesFormatResponseArgs) ToHubPropertiesFormatResponsePtrOutputWithContext(ctx context.Context) HubPropertiesFormatResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HubPropertiesFormatResponseOutput).ToHubPropertiesFormatResponsePtrOutputWithContext(ctx)
}

// HubPropertiesFormatResponsePtrInput is an input type that accepts HubPropertiesFormatResponseArgs, HubPropertiesFormatResponsePtr and HubPropertiesFormatResponsePtrOutput values.
// You can construct a concrete instance of `HubPropertiesFormatResponsePtrInput` via:
//
//          HubPropertiesFormatResponseArgs{...}
//
//  or:
//
//          nil
type HubPropertiesFormatResponsePtrInput interface {
	pulumi.Input

	ToHubPropertiesFormatResponsePtrOutput() HubPropertiesFormatResponsePtrOutput
	ToHubPropertiesFormatResponsePtrOutputWithContext(context.Context) HubPropertiesFormatResponsePtrOutput
}

type hubPropertiesFormatResponsePtrType HubPropertiesFormatResponseArgs

func HubPropertiesFormatResponsePtr(v *HubPropertiesFormatResponseArgs) HubPropertiesFormatResponsePtrInput {
	return (*hubPropertiesFormatResponsePtrType)(v)
}

func (*hubPropertiesFormatResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**HubPropertiesFormatResponse)(nil)).Elem()
}

func (i *hubPropertiesFormatResponsePtrType) ToHubPropertiesFormatResponsePtrOutput() HubPropertiesFormatResponsePtrOutput {
	return i.ToHubPropertiesFormatResponsePtrOutputWithContext(context.Background())
}

func (i *hubPropertiesFormatResponsePtrType) ToHubPropertiesFormatResponsePtrOutputWithContext(ctx context.Context) HubPropertiesFormatResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HubPropertiesFormatResponsePtrOutput)
}

// Properties of hub.
type HubPropertiesFormatResponseOutput struct{ *pulumi.OutputState }

func (HubPropertiesFormatResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HubPropertiesFormatResponse)(nil)).Elem()
}

func (o HubPropertiesFormatResponseOutput) ToHubPropertiesFormatResponseOutput() HubPropertiesFormatResponseOutput {
	return o
}

func (o HubPropertiesFormatResponseOutput) ToHubPropertiesFormatResponseOutputWithContext(ctx context.Context) HubPropertiesFormatResponseOutput {
	return o
}

func (o HubPropertiesFormatResponseOutput) ToHubPropertiesFormatResponsePtrOutput() HubPropertiesFormatResponsePtrOutput {
	return o.ToHubPropertiesFormatResponsePtrOutputWithContext(context.Background())
}

func (o HubPropertiesFormatResponseOutput) ToHubPropertiesFormatResponsePtrOutputWithContext(ctx context.Context) HubPropertiesFormatResponsePtrOutput {
	return o.ApplyT(func(v HubPropertiesFormatResponse) *HubPropertiesFormatResponse {
		return &v
	}).(HubPropertiesFormatResponsePtrOutput)
}

// API endpoint URL of the hub.
func (o HubPropertiesFormatResponseOutput) ApiEndpoint() pulumi.StringOutput {
	return o.ApplyT(func(v HubPropertiesFormatResponse) string { return v.ApiEndpoint }).(pulumi.StringOutput)
}

// Billing settings of the hub.
func (o HubPropertiesFormatResponseOutput) HubBillingInfo() HubBillingInfoFormatResponsePtrOutput {
	return o.ApplyT(func(v HubPropertiesFormatResponse) *HubBillingInfoFormatResponse { return v.HubBillingInfo }).(HubBillingInfoFormatResponsePtrOutput)
}

// Provisioning state of the hub.
func (o HubPropertiesFormatResponseOutput) ProvisioningState() pulumi.StringOutput {
	return o.ApplyT(func(v HubPropertiesFormatResponse) string { return v.ProvisioningState }).(pulumi.StringOutput)
}

// The bit flags for enabled hub features. Bit 0 is set to 1 indicates graph is enabled, or disabled if set to 0. Bit 1 is set to 1 indicates the hub is disabled, or enabled if set to 0.
func (o HubPropertiesFormatResponseOutput) TenantFeatures() pulumi.IntPtrOutput {
	return o.ApplyT(func(v HubPropertiesFormatResponse) *int { return v.TenantFeatures }).(pulumi.IntPtrOutput)
}

// Web endpoint URL of the hub.
func (o HubPropertiesFormatResponseOutput) WebEndpoint() pulumi.StringOutput {
	return o.ApplyT(func(v HubPropertiesFormatResponse) string { return v.WebEndpoint }).(pulumi.StringOutput)
}

type HubPropertiesFormatResponsePtrOutput struct{ *pulumi.OutputState }

func (HubPropertiesFormatResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**HubPropertiesFormatResponse)(nil)).Elem()
}

func (o HubPropertiesFormatResponsePtrOutput) ToHubPropertiesFormatResponsePtrOutput() HubPropertiesFormatResponsePtrOutput {
	return o
}

func (o HubPropertiesFormatResponsePtrOutput) ToHubPropertiesFormatResponsePtrOutputWithContext(ctx context.Context) HubPropertiesFormatResponsePtrOutput {
	return o
}

func (o HubPropertiesFormatResponsePtrOutput) Elem() HubPropertiesFormatResponseOutput {
	return o.ApplyT(func(v *HubPropertiesFormatResponse) HubPropertiesFormatResponse { return *v }).(HubPropertiesFormatResponseOutput)
}

// API endpoint URL of the hub.
func (o HubPropertiesFormatResponsePtrOutput) ApiEndpoint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HubPropertiesFormatResponse) *string {
		if v == nil {
			return nil
		}
		return &v.ApiEndpoint
	}).(pulumi.StringPtrOutput)
}

// Billing settings of the hub.
func (o HubPropertiesFormatResponsePtrOutput) HubBillingInfo() HubBillingInfoFormatResponsePtrOutput {
	return o.ApplyT(func(v *HubPropertiesFormatResponse) *HubBillingInfoFormatResponse {
		if v == nil {
			return nil
		}
		return v.HubBillingInfo
	}).(HubBillingInfoFormatResponsePtrOutput)
}

// Provisioning state of the hub.
func (o HubPropertiesFormatResponsePtrOutput) ProvisioningState() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HubPropertiesFormatResponse) *string {
		if v == nil {
			return nil
		}
		return &v.ProvisioningState
	}).(pulumi.StringPtrOutput)
}

// The bit flags for enabled hub features. Bit 0 is set to 1 indicates graph is enabled, or disabled if set to 0. Bit 1 is set to 1 indicates the hub is disabled, or enabled if set to 0.
func (o HubPropertiesFormatResponsePtrOutput) TenantFeatures() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *HubPropertiesFormatResponse) *int {
		if v == nil {
			return nil
		}
		return v.TenantFeatures
	}).(pulumi.IntPtrOutput)
}

// Web endpoint URL of the hub.
func (o HubPropertiesFormatResponsePtrOutput) WebEndpoint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HubPropertiesFormatResponse) *string {
		if v == nil {
			return nil
		}
		return &v.WebEndpoint
	}).(pulumi.StringPtrOutput)
}

// The KPI alias.
type KpiAlias struct {
	// KPI alias name.
	AliasName string `pulumi:"aliasName"`
	// The expression.
	Expression string `pulumi:"expression"`
}

// KpiAliasInput is an input type that accepts KpiAliasArgs and KpiAliasOutput values.
// You can construct a concrete instance of `KpiAliasInput` via:
//
//          KpiAliasArgs{...}
type KpiAliasInput interface {
	pulumi.Input

	ToKpiAliasOutput() KpiAliasOutput
	ToKpiAliasOutputWithContext(context.Context) KpiAliasOutput
}

// The KPI alias.
type KpiAliasArgs struct {
	// KPI alias name.
	AliasName pulumi.StringInput `pulumi:"aliasName"`
	// The expression.
	Expression pulumi.StringInput `pulumi:"expression"`
}

func (KpiAliasArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KpiAlias)(nil)).Elem()
}

func (i KpiAliasArgs) ToKpiAliasOutput() KpiAliasOutput {
	return i.ToKpiAliasOutputWithContext(context.Background())
}

func (i KpiAliasArgs) ToKpiAliasOutputWithContext(ctx context.Context) KpiAliasOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KpiAliasOutput)
}

// KpiAliasArrayInput is an input type that accepts KpiAliasArray and KpiAliasArrayOutput values.
// You can construct a concrete instance of `KpiAliasArrayInput` via:
//
//          KpiAliasArray{ KpiAliasArgs{...} }
type KpiAliasArrayInput interface {
	pulumi.Input

	ToKpiAliasArrayOutput() KpiAliasArrayOutput
	ToKpiAliasArrayOutputWithContext(context.Context) KpiAliasArrayOutput
}

type KpiAliasArray []KpiAliasInput

func (KpiAliasArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]KpiAlias)(nil)).Elem()
}

func (i KpiAliasArray) ToKpiAliasArrayOutput() KpiAliasArrayOutput {
	return i.ToKpiAliasArrayOutputWithContext(context.Background())
}

func (i KpiAliasArray) ToKpiAliasArrayOutputWithContext(ctx context.Context) KpiAliasArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KpiAliasArrayOutput)
}

// The KPI alias.
type KpiAliasOutput struct{ *pulumi.OutputState }

func (KpiAliasOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KpiAlias)(nil)).Elem()
}

func (o KpiAliasOutput) ToKpiAliasOutput() KpiAliasOutput {
	return o
}

func (o KpiAliasOutput) ToKpiAliasOutputWithContext(ctx context.Context) KpiAliasOutput {
	return o
}

// KPI alias name.
func (o KpiAliasOutput) AliasName() pulumi.StringOutput {
	return o.ApplyT(func(v KpiAlias) string { return v.AliasName }).(pulumi.StringOutput)
}

// The expression.
func (o KpiAliasOutput) Expression() pulumi.StringOutput {
	return o.ApplyT(func(v KpiAlias) string { return v.Expression }).(pulumi.StringOutput)
}

type KpiAliasArrayOutput struct{ *pulumi.OutputState }

func (KpiAliasArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]KpiAlias)(nil)).Elem()
}

func (o KpiAliasArrayOutput) ToKpiAliasArrayOutput() KpiAliasArrayOutput {
	return o
}

func (o KpiAliasArrayOutput) ToKpiAliasArrayOutputWithContext(ctx context.Context) KpiAliasArrayOutput {
	return o
}

func (o KpiAliasArrayOutput) Index(i pulumi.IntInput) KpiAliasOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) KpiAlias {
		return vs[0].([]KpiAlias)[vs[1].(int)]
	}).(KpiAliasOutput)
}

// The KPI alias.
type KpiAliasResponse struct {
	// KPI alias name.
	AliasName string `pulumi:"aliasName"`
	// The expression.
	Expression string `pulumi:"expression"`
}

// KpiAliasResponseInput is an input type that accepts KpiAliasResponseArgs and KpiAliasResponseOutput values.
// You can construct a concrete instance of `KpiAliasResponseInput` via:
//
//          KpiAliasResponseArgs{...}
type KpiAliasResponseInput interface {
	pulumi.Input

	ToKpiAliasResponseOutput() KpiAliasResponseOutput
	ToKpiAliasResponseOutputWithContext(context.Context) KpiAliasResponseOutput
}

// The KPI alias.
type KpiAliasResponseArgs struct {
	// KPI alias name.
	AliasName pulumi.StringInput `pulumi:"aliasName"`
	// The expression.
	Expression pulumi.StringInput `pulumi:"expression"`
}

func (KpiAliasResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KpiAliasResponse)(nil)).Elem()
}

func (i KpiAliasResponseArgs) ToKpiAliasResponseOutput() KpiAliasResponseOutput {
	return i.ToKpiAliasResponseOutputWithContext(context.Background())
}

func (i KpiAliasResponseArgs) ToKpiAliasResponseOutputWithContext(ctx context.Context) KpiAliasResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KpiAliasResponseOutput)
}

// KpiAliasResponseArrayInput is an input type that accepts KpiAliasResponseArray and KpiAliasResponseArrayOutput values.
// You can construct a concrete instance of `KpiAliasResponseArrayInput` via:
//
//          KpiAliasResponseArray{ KpiAliasResponseArgs{...} }
type KpiAliasResponseArrayInput interface {
	pulumi.Input

	ToKpiAliasResponseArrayOutput() KpiAliasResponseArrayOutput
	ToKpiAliasResponseArrayOutputWithContext(context.Context) KpiAliasResponseArrayOutput
}

type KpiAliasResponseArray []KpiAliasResponseInput

func (KpiAliasResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]KpiAliasResponse)(nil)).Elem()
}

func (i KpiAliasResponseArray) ToKpiAliasResponseArrayOutput() KpiAliasResponseArrayOutput {
	return i.ToKpiAliasResponseArrayOutputWithContext(context.Background())
}

func (i KpiAliasResponseArray) ToKpiAliasResponseArrayOutputWithContext(ctx context.Context) KpiAliasResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KpiAliasResponseArrayOutput)
}

// The KPI alias.
type KpiAliasResponseOutput struct{ *pulumi.OutputState }

func (KpiAliasResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KpiAliasResponse)(nil)).Elem()
}

func (o KpiAliasResponseOutput) ToKpiAliasResponseOutput() KpiAliasResponseOutput {
	return o
}

func (o KpiAliasResponseOutput) ToKpiAliasResponseOutputWithContext(ctx context.Context) KpiAliasResponseOutput {
	return o
}

// KPI alias name.
func (o KpiAliasResponseOutput) AliasName() pulumi.StringOutput {
	return o.ApplyT(func(v KpiAliasResponse) string { return v.AliasName }).(pulumi.StringOutput)
}

// The expression.
func (o KpiAliasResponseOutput) Expression() pulumi.StringOutput {
	return o.ApplyT(func(v KpiAliasResponse) string { return v.Expression }).(pulumi.StringOutput)
}

type KpiAliasResponseArrayOutput struct{ *pulumi.OutputState }

func (KpiAliasResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]KpiAliasResponse)(nil)).Elem()
}

func (o KpiAliasResponseArrayOutput) ToKpiAliasResponseArrayOutput() KpiAliasResponseArrayOutput {
	return o
}

func (o KpiAliasResponseArrayOutput) ToKpiAliasResponseArrayOutputWithContext(ctx context.Context) KpiAliasResponseArrayOutput {
	return o
}

func (o KpiAliasResponseArrayOutput) Index(i pulumi.IntInput) KpiAliasResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) KpiAliasResponse {
		return vs[0].([]KpiAliasResponse)[vs[1].(int)]
	}).(KpiAliasResponseOutput)
}

// Defines the KPI Threshold limits.
type KpiDefinitionResponse struct {
	// The aliases.
	Aliases []KpiAliasResponse `pulumi:"aliases"`
	// The calculation window.
	CalculationWindow string `pulumi:"calculationWindow"`
	// Name of calculation window field.
	CalculationWindowFieldName *string `pulumi:"calculationWindowFieldName"`
	// Localized description for the KPI.
	Description map[string]string `pulumi:"description"`
	// Localized display name for the KPI.
	DisplayName map[string]string `pulumi:"displayName"`
	// The mapping entity type.
	EntityType string `pulumi:"entityType"`
	// The mapping entity name.
	EntityTypeName string `pulumi:"entityTypeName"`
	// The computation expression for the KPI.
	Expression string `pulumi:"expression"`
	// The KPI extracts.
	Extracts []KpiExtractResponse `pulumi:"extracts"`
	// The filter expression for the KPI.
	Filter *string `pulumi:"filter"`
	// The computation function for the KPI.
	Function string `pulumi:"function"`
	// the group by properties for the KPI.
	GroupBy []string `pulumi:"groupBy"`
	// The KPI GroupByMetadata.
	GroupByMetadata []KpiGroupByMetadataResponse `pulumi:"groupByMetadata"`
	// The KPI name.
	KpiName string `pulumi:"kpiName"`
	// The participant profiles.
	ParticipantProfilesMetadata []KpiParticipantProfilesMetadataResponse `pulumi:"participantProfilesMetadata"`
	// Provisioning state.
	ProvisioningState string `pulumi:"provisioningState"`
	// The hub name.
	TenantId string `pulumi:"tenantId"`
	// The KPI thresholds.
	ThresHolds *KpiThresholdsResponse `pulumi:"thresHolds"`
	// The unit of measurement for the KPI.
	Unit *string `pulumi:"unit"`
}

// KpiDefinitionResponseInput is an input type that accepts KpiDefinitionResponseArgs and KpiDefinitionResponseOutput values.
// You can construct a concrete instance of `KpiDefinitionResponseInput` via:
//
//          KpiDefinitionResponseArgs{...}
type KpiDefinitionResponseInput interface {
	pulumi.Input

	ToKpiDefinitionResponseOutput() KpiDefinitionResponseOutput
	ToKpiDefinitionResponseOutputWithContext(context.Context) KpiDefinitionResponseOutput
}

// Defines the KPI Threshold limits.
type KpiDefinitionResponseArgs struct {
	// The aliases.
	Aliases KpiAliasResponseArrayInput `pulumi:"aliases"`
	// The calculation window.
	CalculationWindow pulumi.StringInput `pulumi:"calculationWindow"`
	// Name of calculation window field.
	CalculationWindowFieldName pulumi.StringPtrInput `pulumi:"calculationWindowFieldName"`
	// Localized description for the KPI.
	Description pulumi.StringMapInput `pulumi:"description"`
	// Localized display name for the KPI.
	DisplayName pulumi.StringMapInput `pulumi:"displayName"`
	// The mapping entity type.
	EntityType pulumi.StringInput `pulumi:"entityType"`
	// The mapping entity name.
	EntityTypeName pulumi.StringInput `pulumi:"entityTypeName"`
	// The computation expression for the KPI.
	Expression pulumi.StringInput `pulumi:"expression"`
	// The KPI extracts.
	Extracts KpiExtractResponseArrayInput `pulumi:"extracts"`
	// The filter expression for the KPI.
	Filter pulumi.StringPtrInput `pulumi:"filter"`
	// The computation function for the KPI.
	Function pulumi.StringInput `pulumi:"function"`
	// the group by properties for the KPI.
	GroupBy pulumi.StringArrayInput `pulumi:"groupBy"`
	// The KPI GroupByMetadata.
	GroupByMetadata KpiGroupByMetadataResponseArrayInput `pulumi:"groupByMetadata"`
	// The KPI name.
	KpiName pulumi.StringInput `pulumi:"kpiName"`
	// The participant profiles.
	ParticipantProfilesMetadata KpiParticipantProfilesMetadataResponseArrayInput `pulumi:"participantProfilesMetadata"`
	// Provisioning state.
	ProvisioningState pulumi.StringInput `pulumi:"provisioningState"`
	// The hub name.
	TenantId pulumi.StringInput `pulumi:"tenantId"`
	// The KPI thresholds.
	ThresHolds KpiThresholdsResponsePtrInput `pulumi:"thresHolds"`
	// The unit of measurement for the KPI.
	Unit pulumi.StringPtrInput `pulumi:"unit"`
}

func (KpiDefinitionResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KpiDefinitionResponse)(nil)).Elem()
}

func (i KpiDefinitionResponseArgs) ToKpiDefinitionResponseOutput() KpiDefinitionResponseOutput {
	return i.ToKpiDefinitionResponseOutputWithContext(context.Background())
}

func (i KpiDefinitionResponseArgs) ToKpiDefinitionResponseOutputWithContext(ctx context.Context) KpiDefinitionResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KpiDefinitionResponseOutput)
}

func (i KpiDefinitionResponseArgs) ToKpiDefinitionResponsePtrOutput() KpiDefinitionResponsePtrOutput {
	return i.ToKpiDefinitionResponsePtrOutputWithContext(context.Background())
}

func (i KpiDefinitionResponseArgs) ToKpiDefinitionResponsePtrOutputWithContext(ctx context.Context) KpiDefinitionResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KpiDefinitionResponseOutput).ToKpiDefinitionResponsePtrOutputWithContext(ctx)
}

// KpiDefinitionResponsePtrInput is an input type that accepts KpiDefinitionResponseArgs, KpiDefinitionResponsePtr and KpiDefinitionResponsePtrOutput values.
// You can construct a concrete instance of `KpiDefinitionResponsePtrInput` via:
//
//          KpiDefinitionResponseArgs{...}
//
//  or:
//
//          nil
type KpiDefinitionResponsePtrInput interface {
	pulumi.Input

	ToKpiDefinitionResponsePtrOutput() KpiDefinitionResponsePtrOutput
	ToKpiDefinitionResponsePtrOutputWithContext(context.Context) KpiDefinitionResponsePtrOutput
}

type kpiDefinitionResponsePtrType KpiDefinitionResponseArgs

func KpiDefinitionResponsePtr(v *KpiDefinitionResponseArgs) KpiDefinitionResponsePtrInput {
	return (*kpiDefinitionResponsePtrType)(v)
}

func (*kpiDefinitionResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**KpiDefinitionResponse)(nil)).Elem()
}

func (i *kpiDefinitionResponsePtrType) ToKpiDefinitionResponsePtrOutput() KpiDefinitionResponsePtrOutput {
	return i.ToKpiDefinitionResponsePtrOutputWithContext(context.Background())
}

func (i *kpiDefinitionResponsePtrType) ToKpiDefinitionResponsePtrOutputWithContext(ctx context.Context) KpiDefinitionResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KpiDefinitionResponsePtrOutput)
}

// Defines the KPI Threshold limits.
type KpiDefinitionResponseOutput struct{ *pulumi.OutputState }

func (KpiDefinitionResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KpiDefinitionResponse)(nil)).Elem()
}

func (o KpiDefinitionResponseOutput) ToKpiDefinitionResponseOutput() KpiDefinitionResponseOutput {
	return o
}

func (o KpiDefinitionResponseOutput) ToKpiDefinitionResponseOutputWithContext(ctx context.Context) KpiDefinitionResponseOutput {
	return o
}

func (o KpiDefinitionResponseOutput) ToKpiDefinitionResponsePtrOutput() KpiDefinitionResponsePtrOutput {
	return o.ToKpiDefinitionResponsePtrOutputWithContext(context.Background())
}

func (o KpiDefinitionResponseOutput) ToKpiDefinitionResponsePtrOutputWithContext(ctx context.Context) KpiDefinitionResponsePtrOutput {
	return o.ApplyT(func(v KpiDefinitionResponse) *KpiDefinitionResponse {
		return &v
	}).(KpiDefinitionResponsePtrOutput)
}

// The aliases.
func (o KpiDefinitionResponseOutput) Aliases() KpiAliasResponseArrayOutput {
	return o.ApplyT(func(v KpiDefinitionResponse) []KpiAliasResponse { return v.Aliases }).(KpiAliasResponseArrayOutput)
}

// The calculation window.
func (o KpiDefinitionResponseOutput) CalculationWindow() pulumi.StringOutput {
	return o.ApplyT(func(v KpiDefinitionResponse) string { return v.CalculationWindow }).(pulumi.StringOutput)
}

// Name of calculation window field.
func (o KpiDefinitionResponseOutput) CalculationWindowFieldName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KpiDefinitionResponse) *string { return v.CalculationWindowFieldName }).(pulumi.StringPtrOutput)
}

// Localized description for the KPI.
func (o KpiDefinitionResponseOutput) Description() pulumi.StringMapOutput {
	return o.ApplyT(func(v KpiDefinitionResponse) map[string]string { return v.Description }).(pulumi.StringMapOutput)
}

// Localized display name for the KPI.
func (o KpiDefinitionResponseOutput) DisplayName() pulumi.StringMapOutput {
	return o.ApplyT(func(v KpiDefinitionResponse) map[string]string { return v.DisplayName }).(pulumi.StringMapOutput)
}

// The mapping entity type.
func (o KpiDefinitionResponseOutput) EntityType() pulumi.StringOutput {
	return o.ApplyT(func(v KpiDefinitionResponse) string { return v.EntityType }).(pulumi.StringOutput)
}

// The mapping entity name.
func (o KpiDefinitionResponseOutput) EntityTypeName() pulumi.StringOutput {
	return o.ApplyT(func(v KpiDefinitionResponse) string { return v.EntityTypeName }).(pulumi.StringOutput)
}

// The computation expression for the KPI.
func (o KpiDefinitionResponseOutput) Expression() pulumi.StringOutput {
	return o.ApplyT(func(v KpiDefinitionResponse) string { return v.Expression }).(pulumi.StringOutput)
}

// The KPI extracts.
func (o KpiDefinitionResponseOutput) Extracts() KpiExtractResponseArrayOutput {
	return o.ApplyT(func(v KpiDefinitionResponse) []KpiExtractResponse { return v.Extracts }).(KpiExtractResponseArrayOutput)
}

// The filter expression for the KPI.
func (o KpiDefinitionResponseOutput) Filter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KpiDefinitionResponse) *string { return v.Filter }).(pulumi.StringPtrOutput)
}

// The computation function for the KPI.
func (o KpiDefinitionResponseOutput) Function() pulumi.StringOutput {
	return o.ApplyT(func(v KpiDefinitionResponse) string { return v.Function }).(pulumi.StringOutput)
}

// the group by properties for the KPI.
func (o KpiDefinitionResponseOutput) GroupBy() pulumi.StringArrayOutput {
	return o.ApplyT(func(v KpiDefinitionResponse) []string { return v.GroupBy }).(pulumi.StringArrayOutput)
}

// The KPI GroupByMetadata.
func (o KpiDefinitionResponseOutput) GroupByMetadata() KpiGroupByMetadataResponseArrayOutput {
	return o.ApplyT(func(v KpiDefinitionResponse) []KpiGroupByMetadataResponse { return v.GroupByMetadata }).(KpiGroupByMetadataResponseArrayOutput)
}

// The KPI name.
func (o KpiDefinitionResponseOutput) KpiName() pulumi.StringOutput {
	return o.ApplyT(func(v KpiDefinitionResponse) string { return v.KpiName }).(pulumi.StringOutput)
}

// The participant profiles.
func (o KpiDefinitionResponseOutput) ParticipantProfilesMetadata() KpiParticipantProfilesMetadataResponseArrayOutput {
	return o.ApplyT(func(v KpiDefinitionResponse) []KpiParticipantProfilesMetadataResponse {
		return v.ParticipantProfilesMetadata
	}).(KpiParticipantProfilesMetadataResponseArrayOutput)
}

// Provisioning state.
func (o KpiDefinitionResponseOutput) ProvisioningState() pulumi.StringOutput {
	return o.ApplyT(func(v KpiDefinitionResponse) string { return v.ProvisioningState }).(pulumi.StringOutput)
}

// The hub name.
func (o KpiDefinitionResponseOutput) TenantId() pulumi.StringOutput {
	return o.ApplyT(func(v KpiDefinitionResponse) string { return v.TenantId }).(pulumi.StringOutput)
}

// The KPI thresholds.
func (o KpiDefinitionResponseOutput) ThresHolds() KpiThresholdsResponsePtrOutput {
	return o.ApplyT(func(v KpiDefinitionResponse) *KpiThresholdsResponse { return v.ThresHolds }).(KpiThresholdsResponsePtrOutput)
}

// The unit of measurement for the KPI.
func (o KpiDefinitionResponseOutput) Unit() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KpiDefinitionResponse) *string { return v.Unit }).(pulumi.StringPtrOutput)
}

type KpiDefinitionResponsePtrOutput struct{ *pulumi.OutputState }

func (KpiDefinitionResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KpiDefinitionResponse)(nil)).Elem()
}

func (o KpiDefinitionResponsePtrOutput) ToKpiDefinitionResponsePtrOutput() KpiDefinitionResponsePtrOutput {
	return o
}

func (o KpiDefinitionResponsePtrOutput) ToKpiDefinitionResponsePtrOutputWithContext(ctx context.Context) KpiDefinitionResponsePtrOutput {
	return o
}

func (o KpiDefinitionResponsePtrOutput) Elem() KpiDefinitionResponseOutput {
	return o.ApplyT(func(v *KpiDefinitionResponse) KpiDefinitionResponse { return *v }).(KpiDefinitionResponseOutput)
}

// The aliases.
func (o KpiDefinitionResponsePtrOutput) Aliases() KpiAliasResponseArrayOutput {
	return o.ApplyT(func(v *KpiDefinitionResponse) []KpiAliasResponse {
		if v == nil {
			return nil
		}
		return v.Aliases
	}).(KpiAliasResponseArrayOutput)
}

// The calculation window.
func (o KpiDefinitionResponsePtrOutput) CalculationWindow() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KpiDefinitionResponse) *string {
		if v == nil {
			return nil
		}
		return &v.CalculationWindow
	}).(pulumi.StringPtrOutput)
}

// Name of calculation window field.
func (o KpiDefinitionResponsePtrOutput) CalculationWindowFieldName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KpiDefinitionResponse) *string {
		if v == nil {
			return nil
		}
		return v.CalculationWindowFieldName
	}).(pulumi.StringPtrOutput)
}

// Localized description for the KPI.
func (o KpiDefinitionResponsePtrOutput) Description() pulumi.StringMapOutput {
	return o.ApplyT(func(v *KpiDefinitionResponse) map[string]string {
		if v == nil {
			return nil
		}
		return v.Description
	}).(pulumi.StringMapOutput)
}

// Localized display name for the KPI.
func (o KpiDefinitionResponsePtrOutput) DisplayName() pulumi.StringMapOutput {
	return o.ApplyT(func(v *KpiDefinitionResponse) map[string]string {
		if v == nil {
			return nil
		}
		return v.DisplayName
	}).(pulumi.StringMapOutput)
}

// The mapping entity type.
func (o KpiDefinitionResponsePtrOutput) EntityType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KpiDefinitionResponse) *string {
		if v == nil {
			return nil
		}
		return &v.EntityType
	}).(pulumi.StringPtrOutput)
}

// The mapping entity name.
func (o KpiDefinitionResponsePtrOutput) EntityTypeName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KpiDefinitionResponse) *string {
		if v == nil {
			return nil
		}
		return &v.EntityTypeName
	}).(pulumi.StringPtrOutput)
}

// The computation expression for the KPI.
func (o KpiDefinitionResponsePtrOutput) Expression() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KpiDefinitionResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Expression
	}).(pulumi.StringPtrOutput)
}

// The KPI extracts.
func (o KpiDefinitionResponsePtrOutput) Extracts() KpiExtractResponseArrayOutput {
	return o.ApplyT(func(v *KpiDefinitionResponse) []KpiExtractResponse {
		if v == nil {
			return nil
		}
		return v.Extracts
	}).(KpiExtractResponseArrayOutput)
}

// The filter expression for the KPI.
func (o KpiDefinitionResponsePtrOutput) Filter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KpiDefinitionResponse) *string {
		if v == nil {
			return nil
		}
		return v.Filter
	}).(pulumi.StringPtrOutput)
}

// The computation function for the KPI.
func (o KpiDefinitionResponsePtrOutput) Function() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KpiDefinitionResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Function
	}).(pulumi.StringPtrOutput)
}

// the group by properties for the KPI.
func (o KpiDefinitionResponsePtrOutput) GroupBy() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *KpiDefinitionResponse) []string {
		if v == nil {
			return nil
		}
		return v.GroupBy
	}).(pulumi.StringArrayOutput)
}

// The KPI GroupByMetadata.
func (o KpiDefinitionResponsePtrOutput) GroupByMetadata() KpiGroupByMetadataResponseArrayOutput {
	return o.ApplyT(func(v *KpiDefinitionResponse) []KpiGroupByMetadataResponse {
		if v == nil {
			return nil
		}
		return v.GroupByMetadata
	}).(KpiGroupByMetadataResponseArrayOutput)
}

// The KPI name.
func (o KpiDefinitionResponsePtrOutput) KpiName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KpiDefinitionResponse) *string {
		if v == nil {
			return nil
		}
		return &v.KpiName
	}).(pulumi.StringPtrOutput)
}

// The participant profiles.
func (o KpiDefinitionResponsePtrOutput) ParticipantProfilesMetadata() KpiParticipantProfilesMetadataResponseArrayOutput {
	return o.ApplyT(func(v *KpiDefinitionResponse) []KpiParticipantProfilesMetadataResponse {
		if v == nil {
			return nil
		}
		return v.ParticipantProfilesMetadata
	}).(KpiParticipantProfilesMetadataResponseArrayOutput)
}

// Provisioning state.
func (o KpiDefinitionResponsePtrOutput) ProvisioningState() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KpiDefinitionResponse) *string {
		if v == nil {
			return nil
		}
		return &v.ProvisioningState
	}).(pulumi.StringPtrOutput)
}

// The hub name.
func (o KpiDefinitionResponsePtrOutput) TenantId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KpiDefinitionResponse) *string {
		if v == nil {
			return nil
		}
		return &v.TenantId
	}).(pulumi.StringPtrOutput)
}

// The KPI thresholds.
func (o KpiDefinitionResponsePtrOutput) ThresHolds() KpiThresholdsResponsePtrOutput {
	return o.ApplyT(func(v *KpiDefinitionResponse) *KpiThresholdsResponse {
		if v == nil {
			return nil
		}
		return v.ThresHolds
	}).(KpiThresholdsResponsePtrOutput)
}

// The unit of measurement for the KPI.
func (o KpiDefinitionResponsePtrOutput) Unit() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KpiDefinitionResponse) *string {
		if v == nil {
			return nil
		}
		return v.Unit
	}).(pulumi.StringPtrOutput)
}

// The KPI extract.
type KpiExtract struct {
	// The expression.
	Expression string `pulumi:"expression"`
	// KPI extract name.
	ExtractName string `pulumi:"extractName"`
}

// KpiExtractInput is an input type that accepts KpiExtractArgs and KpiExtractOutput values.
// You can construct a concrete instance of `KpiExtractInput` via:
//
//          KpiExtractArgs{...}
type KpiExtractInput interface {
	pulumi.Input

	ToKpiExtractOutput() KpiExtractOutput
	ToKpiExtractOutputWithContext(context.Context) KpiExtractOutput
}

// The KPI extract.
type KpiExtractArgs struct {
	// The expression.
	Expression pulumi.StringInput `pulumi:"expression"`
	// KPI extract name.
	ExtractName pulumi.StringInput `pulumi:"extractName"`
}

func (KpiExtractArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KpiExtract)(nil)).Elem()
}

func (i KpiExtractArgs) ToKpiExtractOutput() KpiExtractOutput {
	return i.ToKpiExtractOutputWithContext(context.Background())
}

func (i KpiExtractArgs) ToKpiExtractOutputWithContext(ctx context.Context) KpiExtractOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KpiExtractOutput)
}

// KpiExtractArrayInput is an input type that accepts KpiExtractArray and KpiExtractArrayOutput values.
// You can construct a concrete instance of `KpiExtractArrayInput` via:
//
//          KpiExtractArray{ KpiExtractArgs{...} }
type KpiExtractArrayInput interface {
	pulumi.Input

	ToKpiExtractArrayOutput() KpiExtractArrayOutput
	ToKpiExtractArrayOutputWithContext(context.Context) KpiExtractArrayOutput
}

type KpiExtractArray []KpiExtractInput

func (KpiExtractArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]KpiExtract)(nil)).Elem()
}

func (i KpiExtractArray) ToKpiExtractArrayOutput() KpiExtractArrayOutput {
	return i.ToKpiExtractArrayOutputWithContext(context.Background())
}

func (i KpiExtractArray) ToKpiExtractArrayOutputWithContext(ctx context.Context) KpiExtractArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KpiExtractArrayOutput)
}

// The KPI extract.
type KpiExtractOutput struct{ *pulumi.OutputState }

func (KpiExtractOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KpiExtract)(nil)).Elem()
}

func (o KpiExtractOutput) ToKpiExtractOutput() KpiExtractOutput {
	return o
}

func (o KpiExtractOutput) ToKpiExtractOutputWithContext(ctx context.Context) KpiExtractOutput {
	return o
}

// The expression.
func (o KpiExtractOutput) Expression() pulumi.StringOutput {
	return o.ApplyT(func(v KpiExtract) string { return v.Expression }).(pulumi.StringOutput)
}

// KPI extract name.
func (o KpiExtractOutput) ExtractName() pulumi.StringOutput {
	return o.ApplyT(func(v KpiExtract) string { return v.ExtractName }).(pulumi.StringOutput)
}

type KpiExtractArrayOutput struct{ *pulumi.OutputState }

func (KpiExtractArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]KpiExtract)(nil)).Elem()
}

func (o KpiExtractArrayOutput) ToKpiExtractArrayOutput() KpiExtractArrayOutput {
	return o
}

func (o KpiExtractArrayOutput) ToKpiExtractArrayOutputWithContext(ctx context.Context) KpiExtractArrayOutput {
	return o
}

func (o KpiExtractArrayOutput) Index(i pulumi.IntInput) KpiExtractOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) KpiExtract {
		return vs[0].([]KpiExtract)[vs[1].(int)]
	}).(KpiExtractOutput)
}

// The KPI extract.
type KpiExtractResponse struct {
	// The expression.
	Expression string `pulumi:"expression"`
	// KPI extract name.
	ExtractName string `pulumi:"extractName"`
}

// KpiExtractResponseInput is an input type that accepts KpiExtractResponseArgs and KpiExtractResponseOutput values.
// You can construct a concrete instance of `KpiExtractResponseInput` via:
//
//          KpiExtractResponseArgs{...}
type KpiExtractResponseInput interface {
	pulumi.Input

	ToKpiExtractResponseOutput() KpiExtractResponseOutput
	ToKpiExtractResponseOutputWithContext(context.Context) KpiExtractResponseOutput
}

// The KPI extract.
type KpiExtractResponseArgs struct {
	// The expression.
	Expression pulumi.StringInput `pulumi:"expression"`
	// KPI extract name.
	ExtractName pulumi.StringInput `pulumi:"extractName"`
}

func (KpiExtractResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KpiExtractResponse)(nil)).Elem()
}

func (i KpiExtractResponseArgs) ToKpiExtractResponseOutput() KpiExtractResponseOutput {
	return i.ToKpiExtractResponseOutputWithContext(context.Background())
}

func (i KpiExtractResponseArgs) ToKpiExtractResponseOutputWithContext(ctx context.Context) KpiExtractResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KpiExtractResponseOutput)
}

// KpiExtractResponseArrayInput is an input type that accepts KpiExtractResponseArray and KpiExtractResponseArrayOutput values.
// You can construct a concrete instance of `KpiExtractResponseArrayInput` via:
//
//          KpiExtractResponseArray{ KpiExtractResponseArgs{...} }
type KpiExtractResponseArrayInput interface {
	pulumi.Input

	ToKpiExtractResponseArrayOutput() KpiExtractResponseArrayOutput
	ToKpiExtractResponseArrayOutputWithContext(context.Context) KpiExtractResponseArrayOutput
}

type KpiExtractResponseArray []KpiExtractResponseInput

func (KpiExtractResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]KpiExtractResponse)(nil)).Elem()
}

func (i KpiExtractResponseArray) ToKpiExtractResponseArrayOutput() KpiExtractResponseArrayOutput {
	return i.ToKpiExtractResponseArrayOutputWithContext(context.Background())
}

func (i KpiExtractResponseArray) ToKpiExtractResponseArrayOutputWithContext(ctx context.Context) KpiExtractResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KpiExtractResponseArrayOutput)
}

// The KPI extract.
type KpiExtractResponseOutput struct{ *pulumi.OutputState }

func (KpiExtractResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KpiExtractResponse)(nil)).Elem()
}

func (o KpiExtractResponseOutput) ToKpiExtractResponseOutput() KpiExtractResponseOutput {
	return o
}

func (o KpiExtractResponseOutput) ToKpiExtractResponseOutputWithContext(ctx context.Context) KpiExtractResponseOutput {
	return o
}

// The expression.
func (o KpiExtractResponseOutput) Expression() pulumi.StringOutput {
	return o.ApplyT(func(v KpiExtractResponse) string { return v.Expression }).(pulumi.StringOutput)
}

// KPI extract name.
func (o KpiExtractResponseOutput) ExtractName() pulumi.StringOutput {
	return o.ApplyT(func(v KpiExtractResponse) string { return v.ExtractName }).(pulumi.StringOutput)
}

type KpiExtractResponseArrayOutput struct{ *pulumi.OutputState }

func (KpiExtractResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]KpiExtractResponse)(nil)).Elem()
}

func (o KpiExtractResponseArrayOutput) ToKpiExtractResponseArrayOutput() KpiExtractResponseArrayOutput {
	return o
}

func (o KpiExtractResponseArrayOutput) ToKpiExtractResponseArrayOutputWithContext(ctx context.Context) KpiExtractResponseArrayOutput {
	return o
}

func (o KpiExtractResponseArrayOutput) Index(i pulumi.IntInput) KpiExtractResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) KpiExtractResponse {
		return vs[0].([]KpiExtractResponse)[vs[1].(int)]
	}).(KpiExtractResponseOutput)
}

// The KPI GroupBy field metadata.
type KpiGroupByMetadataResponse struct {
	// The display name.
	DisplayName map[string]string `pulumi:"displayName"`
	// The name of the field.
	FieldName *string `pulumi:"fieldName"`
	// The type of the field.
	FieldType *string `pulumi:"fieldType"`
}

// KpiGroupByMetadataResponseInput is an input type that accepts KpiGroupByMetadataResponseArgs and KpiGroupByMetadataResponseOutput values.
// You can construct a concrete instance of `KpiGroupByMetadataResponseInput` via:
//
//          KpiGroupByMetadataResponseArgs{...}
type KpiGroupByMetadataResponseInput interface {
	pulumi.Input

	ToKpiGroupByMetadataResponseOutput() KpiGroupByMetadataResponseOutput
	ToKpiGroupByMetadataResponseOutputWithContext(context.Context) KpiGroupByMetadataResponseOutput
}

// The KPI GroupBy field metadata.
type KpiGroupByMetadataResponseArgs struct {
	// The display name.
	DisplayName pulumi.StringMapInput `pulumi:"displayName"`
	// The name of the field.
	FieldName pulumi.StringPtrInput `pulumi:"fieldName"`
	// The type of the field.
	FieldType pulumi.StringPtrInput `pulumi:"fieldType"`
}

func (KpiGroupByMetadataResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KpiGroupByMetadataResponse)(nil)).Elem()
}

func (i KpiGroupByMetadataResponseArgs) ToKpiGroupByMetadataResponseOutput() KpiGroupByMetadataResponseOutput {
	return i.ToKpiGroupByMetadataResponseOutputWithContext(context.Background())
}

func (i KpiGroupByMetadataResponseArgs) ToKpiGroupByMetadataResponseOutputWithContext(ctx context.Context) KpiGroupByMetadataResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KpiGroupByMetadataResponseOutput)
}

// KpiGroupByMetadataResponseArrayInput is an input type that accepts KpiGroupByMetadataResponseArray and KpiGroupByMetadataResponseArrayOutput values.
// You can construct a concrete instance of `KpiGroupByMetadataResponseArrayInput` via:
//
//          KpiGroupByMetadataResponseArray{ KpiGroupByMetadataResponseArgs{...} }
type KpiGroupByMetadataResponseArrayInput interface {
	pulumi.Input

	ToKpiGroupByMetadataResponseArrayOutput() KpiGroupByMetadataResponseArrayOutput
	ToKpiGroupByMetadataResponseArrayOutputWithContext(context.Context) KpiGroupByMetadataResponseArrayOutput
}

type KpiGroupByMetadataResponseArray []KpiGroupByMetadataResponseInput

func (KpiGroupByMetadataResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]KpiGroupByMetadataResponse)(nil)).Elem()
}

func (i KpiGroupByMetadataResponseArray) ToKpiGroupByMetadataResponseArrayOutput() KpiGroupByMetadataResponseArrayOutput {
	return i.ToKpiGroupByMetadataResponseArrayOutputWithContext(context.Background())
}

func (i KpiGroupByMetadataResponseArray) ToKpiGroupByMetadataResponseArrayOutputWithContext(ctx context.Context) KpiGroupByMetadataResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KpiGroupByMetadataResponseArrayOutput)
}

// The KPI GroupBy field metadata.
type KpiGroupByMetadataResponseOutput struct{ *pulumi.OutputState }

func (KpiGroupByMetadataResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KpiGroupByMetadataResponse)(nil)).Elem()
}

func (o KpiGroupByMetadataResponseOutput) ToKpiGroupByMetadataResponseOutput() KpiGroupByMetadataResponseOutput {
	return o
}

func (o KpiGroupByMetadataResponseOutput) ToKpiGroupByMetadataResponseOutputWithContext(ctx context.Context) KpiGroupByMetadataResponseOutput {
	return o
}

// The display name.
func (o KpiGroupByMetadataResponseOutput) DisplayName() pulumi.StringMapOutput {
	return o.ApplyT(func(v KpiGroupByMetadataResponse) map[string]string { return v.DisplayName }).(pulumi.StringMapOutput)
}

// The name of the field.
func (o KpiGroupByMetadataResponseOutput) FieldName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KpiGroupByMetadataResponse) *string { return v.FieldName }).(pulumi.StringPtrOutput)
}

// The type of the field.
func (o KpiGroupByMetadataResponseOutput) FieldType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KpiGroupByMetadataResponse) *string { return v.FieldType }).(pulumi.StringPtrOutput)
}

type KpiGroupByMetadataResponseArrayOutput struct{ *pulumi.OutputState }

func (KpiGroupByMetadataResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]KpiGroupByMetadataResponse)(nil)).Elem()
}

func (o KpiGroupByMetadataResponseArrayOutput) ToKpiGroupByMetadataResponseArrayOutput() KpiGroupByMetadataResponseArrayOutput {
	return o
}

func (o KpiGroupByMetadataResponseArrayOutput) ToKpiGroupByMetadataResponseArrayOutputWithContext(ctx context.Context) KpiGroupByMetadataResponseArrayOutput {
	return o
}

func (o KpiGroupByMetadataResponseArrayOutput) Index(i pulumi.IntInput) KpiGroupByMetadataResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) KpiGroupByMetadataResponse {
		return vs[0].([]KpiGroupByMetadataResponse)[vs[1].(int)]
	}).(KpiGroupByMetadataResponseOutput)
}

// The KPI participant profile metadata.
type KpiParticipantProfilesMetadataResponse struct {
	// Name of the type.
	TypeName string `pulumi:"typeName"`
}

// KpiParticipantProfilesMetadataResponseInput is an input type that accepts KpiParticipantProfilesMetadataResponseArgs and KpiParticipantProfilesMetadataResponseOutput values.
// You can construct a concrete instance of `KpiParticipantProfilesMetadataResponseInput` via:
//
//          KpiParticipantProfilesMetadataResponseArgs{...}
type KpiParticipantProfilesMetadataResponseInput interface {
	pulumi.Input

	ToKpiParticipantProfilesMetadataResponseOutput() KpiParticipantProfilesMetadataResponseOutput
	ToKpiParticipantProfilesMetadataResponseOutputWithContext(context.Context) KpiParticipantProfilesMetadataResponseOutput
}

// The KPI participant profile metadata.
type KpiParticipantProfilesMetadataResponseArgs struct {
	// Name of the type.
	TypeName pulumi.StringInput `pulumi:"typeName"`
}

func (KpiParticipantProfilesMetadataResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KpiParticipantProfilesMetadataResponse)(nil)).Elem()
}

func (i KpiParticipantProfilesMetadataResponseArgs) ToKpiParticipantProfilesMetadataResponseOutput() KpiParticipantProfilesMetadataResponseOutput {
	return i.ToKpiParticipantProfilesMetadataResponseOutputWithContext(context.Background())
}

func (i KpiParticipantProfilesMetadataResponseArgs) ToKpiParticipantProfilesMetadataResponseOutputWithContext(ctx context.Context) KpiParticipantProfilesMetadataResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KpiParticipantProfilesMetadataResponseOutput)
}

// KpiParticipantProfilesMetadataResponseArrayInput is an input type that accepts KpiParticipantProfilesMetadataResponseArray and KpiParticipantProfilesMetadataResponseArrayOutput values.
// You can construct a concrete instance of `KpiParticipantProfilesMetadataResponseArrayInput` via:
//
//          KpiParticipantProfilesMetadataResponseArray{ KpiParticipantProfilesMetadataResponseArgs{...} }
type KpiParticipantProfilesMetadataResponseArrayInput interface {
	pulumi.Input

	ToKpiParticipantProfilesMetadataResponseArrayOutput() KpiParticipantProfilesMetadataResponseArrayOutput
	ToKpiParticipantProfilesMetadataResponseArrayOutputWithContext(context.Context) KpiParticipantProfilesMetadataResponseArrayOutput
}

type KpiParticipantProfilesMetadataResponseArray []KpiParticipantProfilesMetadataResponseInput

func (KpiParticipantProfilesMetadataResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]KpiParticipantProfilesMetadataResponse)(nil)).Elem()
}

func (i KpiParticipantProfilesMetadataResponseArray) ToKpiParticipantProfilesMetadataResponseArrayOutput() KpiParticipantProfilesMetadataResponseArrayOutput {
	return i.ToKpiParticipantProfilesMetadataResponseArrayOutputWithContext(context.Background())
}

func (i KpiParticipantProfilesMetadataResponseArray) ToKpiParticipantProfilesMetadataResponseArrayOutputWithContext(ctx context.Context) KpiParticipantProfilesMetadataResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KpiParticipantProfilesMetadataResponseArrayOutput)
}

// The KPI participant profile metadata.
type KpiParticipantProfilesMetadataResponseOutput struct{ *pulumi.OutputState }

func (KpiParticipantProfilesMetadataResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KpiParticipantProfilesMetadataResponse)(nil)).Elem()
}

func (o KpiParticipantProfilesMetadataResponseOutput) ToKpiParticipantProfilesMetadataResponseOutput() KpiParticipantProfilesMetadataResponseOutput {
	return o
}

func (o KpiParticipantProfilesMetadataResponseOutput) ToKpiParticipantProfilesMetadataResponseOutputWithContext(ctx context.Context) KpiParticipantProfilesMetadataResponseOutput {
	return o
}

// Name of the type.
func (o KpiParticipantProfilesMetadataResponseOutput) TypeName() pulumi.StringOutput {
	return o.ApplyT(func(v KpiParticipantProfilesMetadataResponse) string { return v.TypeName }).(pulumi.StringOutput)
}

type KpiParticipantProfilesMetadataResponseArrayOutput struct{ *pulumi.OutputState }

func (KpiParticipantProfilesMetadataResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]KpiParticipantProfilesMetadataResponse)(nil)).Elem()
}

func (o KpiParticipantProfilesMetadataResponseArrayOutput) ToKpiParticipantProfilesMetadataResponseArrayOutput() KpiParticipantProfilesMetadataResponseArrayOutput {
	return o
}

func (o KpiParticipantProfilesMetadataResponseArrayOutput) ToKpiParticipantProfilesMetadataResponseArrayOutputWithContext(ctx context.Context) KpiParticipantProfilesMetadataResponseArrayOutput {
	return o
}

func (o KpiParticipantProfilesMetadataResponseArrayOutput) Index(i pulumi.IntInput) KpiParticipantProfilesMetadataResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) KpiParticipantProfilesMetadataResponse {
		return vs[0].([]KpiParticipantProfilesMetadataResponse)[vs[1].(int)]
	}).(KpiParticipantProfilesMetadataResponseOutput)
}

// Defines the KPI Threshold limits.
type KpiThresholds struct {
	// Whether or not the KPI is an increasing KPI.
	IncreasingKpi bool `pulumi:"increasingKpi"`
	// The lower threshold limit.
	LowerLimit float64 `pulumi:"lowerLimit"`
	// The upper threshold limit.
	UpperLimit float64 `pulumi:"upperLimit"`
}

// KpiThresholdsInput is an input type that accepts KpiThresholdsArgs and KpiThresholdsOutput values.
// You can construct a concrete instance of `KpiThresholdsInput` via:
//
//          KpiThresholdsArgs{...}
type KpiThresholdsInput interface {
	pulumi.Input

	ToKpiThresholdsOutput() KpiThresholdsOutput
	ToKpiThresholdsOutputWithContext(context.Context) KpiThresholdsOutput
}

// Defines the KPI Threshold limits.
type KpiThresholdsArgs struct {
	// Whether or not the KPI is an increasing KPI.
	IncreasingKpi pulumi.BoolInput `pulumi:"increasingKpi"`
	// The lower threshold limit.
	LowerLimit pulumi.Float64Input `pulumi:"lowerLimit"`
	// The upper threshold limit.
	UpperLimit pulumi.Float64Input `pulumi:"upperLimit"`
}

func (KpiThresholdsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KpiThresholds)(nil)).Elem()
}

func (i KpiThresholdsArgs) ToKpiThresholdsOutput() KpiThresholdsOutput {
	return i.ToKpiThresholdsOutputWithContext(context.Background())
}

func (i KpiThresholdsArgs) ToKpiThresholdsOutputWithContext(ctx context.Context) KpiThresholdsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KpiThresholdsOutput)
}

func (i KpiThresholdsArgs) ToKpiThresholdsPtrOutput() KpiThresholdsPtrOutput {
	return i.ToKpiThresholdsPtrOutputWithContext(context.Background())
}

func (i KpiThresholdsArgs) ToKpiThresholdsPtrOutputWithContext(ctx context.Context) KpiThresholdsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KpiThresholdsOutput).ToKpiThresholdsPtrOutputWithContext(ctx)
}

// KpiThresholdsPtrInput is an input type that accepts KpiThresholdsArgs, KpiThresholdsPtr and KpiThresholdsPtrOutput values.
// You can construct a concrete instance of `KpiThresholdsPtrInput` via:
//
//          KpiThresholdsArgs{...}
//
//  or:
//
//          nil
type KpiThresholdsPtrInput interface {
	pulumi.Input

	ToKpiThresholdsPtrOutput() KpiThresholdsPtrOutput
	ToKpiThresholdsPtrOutputWithContext(context.Context) KpiThresholdsPtrOutput
}

type kpiThresholdsPtrType KpiThresholdsArgs

func KpiThresholdsPtr(v *KpiThresholdsArgs) KpiThresholdsPtrInput {
	return (*kpiThresholdsPtrType)(v)
}

func (*kpiThresholdsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**KpiThresholds)(nil)).Elem()
}

func (i *kpiThresholdsPtrType) ToKpiThresholdsPtrOutput() KpiThresholdsPtrOutput {
	return i.ToKpiThresholdsPtrOutputWithContext(context.Background())
}

func (i *kpiThresholdsPtrType) ToKpiThresholdsPtrOutputWithContext(ctx context.Context) KpiThresholdsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KpiThresholdsPtrOutput)
}

// Defines the KPI Threshold limits.
type KpiThresholdsOutput struct{ *pulumi.OutputState }

func (KpiThresholdsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KpiThresholds)(nil)).Elem()
}

func (o KpiThresholdsOutput) ToKpiThresholdsOutput() KpiThresholdsOutput {
	return o
}

func (o KpiThresholdsOutput) ToKpiThresholdsOutputWithContext(ctx context.Context) KpiThresholdsOutput {
	return o
}

func (o KpiThresholdsOutput) ToKpiThresholdsPtrOutput() KpiThresholdsPtrOutput {
	return o.ToKpiThresholdsPtrOutputWithContext(context.Background())
}

func (o KpiThresholdsOutput) ToKpiThresholdsPtrOutputWithContext(ctx context.Context) KpiThresholdsPtrOutput {
	return o.ApplyT(func(v KpiThresholds) *KpiThresholds {
		return &v
	}).(KpiThresholdsPtrOutput)
}

// Whether or not the KPI is an increasing KPI.
func (o KpiThresholdsOutput) IncreasingKpi() pulumi.BoolOutput {
	return o.ApplyT(func(v KpiThresholds) bool { return v.IncreasingKpi }).(pulumi.BoolOutput)
}

// The lower threshold limit.
func (o KpiThresholdsOutput) LowerLimit() pulumi.Float64Output {
	return o.ApplyT(func(v KpiThresholds) float64 { return v.LowerLimit }).(pulumi.Float64Output)
}

// The upper threshold limit.
func (o KpiThresholdsOutput) UpperLimit() pulumi.Float64Output {
	return o.ApplyT(func(v KpiThresholds) float64 { return v.UpperLimit }).(pulumi.Float64Output)
}

type KpiThresholdsPtrOutput struct{ *pulumi.OutputState }

func (KpiThresholdsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KpiThresholds)(nil)).Elem()
}

func (o KpiThresholdsPtrOutput) ToKpiThresholdsPtrOutput() KpiThresholdsPtrOutput {
	return o
}

func (o KpiThresholdsPtrOutput) ToKpiThresholdsPtrOutputWithContext(ctx context.Context) KpiThresholdsPtrOutput {
	return o
}

func (o KpiThresholdsPtrOutput) Elem() KpiThresholdsOutput {
	return o.ApplyT(func(v *KpiThresholds) KpiThresholds { return *v }).(KpiThresholdsOutput)
}

// Whether or not the KPI is an increasing KPI.
func (o KpiThresholdsPtrOutput) IncreasingKpi() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *KpiThresholds) *bool {
		if v == nil {
			return nil
		}
		return &v.IncreasingKpi
	}).(pulumi.BoolPtrOutput)
}

// The lower threshold limit.
func (o KpiThresholdsPtrOutput) LowerLimit() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *KpiThresholds) *float64 {
		if v == nil {
			return nil
		}
		return &v.LowerLimit
	}).(pulumi.Float64PtrOutput)
}

// The upper threshold limit.
func (o KpiThresholdsPtrOutput) UpperLimit() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *KpiThresholds) *float64 {
		if v == nil {
			return nil
		}
		return &v.UpperLimit
	}).(pulumi.Float64PtrOutput)
}

// Defines the KPI Threshold limits.
type KpiThresholdsResponse struct {
	// Whether or not the KPI is an increasing KPI.
	IncreasingKpi bool `pulumi:"increasingKpi"`
	// The lower threshold limit.
	LowerLimit float64 `pulumi:"lowerLimit"`
	// The upper threshold limit.
	UpperLimit float64 `pulumi:"upperLimit"`
}

// KpiThresholdsResponseInput is an input type that accepts KpiThresholdsResponseArgs and KpiThresholdsResponseOutput values.
// You can construct a concrete instance of `KpiThresholdsResponseInput` via:
//
//          KpiThresholdsResponseArgs{...}
type KpiThresholdsResponseInput interface {
	pulumi.Input

	ToKpiThresholdsResponseOutput() KpiThresholdsResponseOutput
	ToKpiThresholdsResponseOutputWithContext(context.Context) KpiThresholdsResponseOutput
}

// Defines the KPI Threshold limits.
type KpiThresholdsResponseArgs struct {
	// Whether or not the KPI is an increasing KPI.
	IncreasingKpi pulumi.BoolInput `pulumi:"increasingKpi"`
	// The lower threshold limit.
	LowerLimit pulumi.Float64Input `pulumi:"lowerLimit"`
	// The upper threshold limit.
	UpperLimit pulumi.Float64Input `pulumi:"upperLimit"`
}

func (KpiThresholdsResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KpiThresholdsResponse)(nil)).Elem()
}

func (i KpiThresholdsResponseArgs) ToKpiThresholdsResponseOutput() KpiThresholdsResponseOutput {
	return i.ToKpiThresholdsResponseOutputWithContext(context.Background())
}

func (i KpiThresholdsResponseArgs) ToKpiThresholdsResponseOutputWithContext(ctx context.Context) KpiThresholdsResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KpiThresholdsResponseOutput)
}

func (i KpiThresholdsResponseArgs) ToKpiThresholdsResponsePtrOutput() KpiThresholdsResponsePtrOutput {
	return i.ToKpiThresholdsResponsePtrOutputWithContext(context.Background())
}

func (i KpiThresholdsResponseArgs) ToKpiThresholdsResponsePtrOutputWithContext(ctx context.Context) KpiThresholdsResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KpiThresholdsResponseOutput).ToKpiThresholdsResponsePtrOutputWithContext(ctx)
}

// KpiThresholdsResponsePtrInput is an input type that accepts KpiThresholdsResponseArgs, KpiThresholdsResponsePtr and KpiThresholdsResponsePtrOutput values.
// You can construct a concrete instance of `KpiThresholdsResponsePtrInput` via:
//
//          KpiThresholdsResponseArgs{...}
//
//  or:
//
//          nil
type KpiThresholdsResponsePtrInput interface {
	pulumi.Input

	ToKpiThresholdsResponsePtrOutput() KpiThresholdsResponsePtrOutput
	ToKpiThresholdsResponsePtrOutputWithContext(context.Context) KpiThresholdsResponsePtrOutput
}

type kpiThresholdsResponsePtrType KpiThresholdsResponseArgs

func KpiThresholdsResponsePtr(v *KpiThresholdsResponseArgs) KpiThresholdsResponsePtrInput {
	return (*kpiThresholdsResponsePtrType)(v)
}

func (*kpiThresholdsResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**KpiThresholdsResponse)(nil)).Elem()
}

func (i *kpiThresholdsResponsePtrType) ToKpiThresholdsResponsePtrOutput() KpiThresholdsResponsePtrOutput {
	return i.ToKpiThresholdsResponsePtrOutputWithContext(context.Background())
}

func (i *kpiThresholdsResponsePtrType) ToKpiThresholdsResponsePtrOutputWithContext(ctx context.Context) KpiThresholdsResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KpiThresholdsResponsePtrOutput)
}

// Defines the KPI Threshold limits.
type KpiThresholdsResponseOutput struct{ *pulumi.OutputState }

func (KpiThresholdsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KpiThresholdsResponse)(nil)).Elem()
}

func (o KpiThresholdsResponseOutput) ToKpiThresholdsResponseOutput() KpiThresholdsResponseOutput {
	return o
}

func (o KpiThresholdsResponseOutput) ToKpiThresholdsResponseOutputWithContext(ctx context.Context) KpiThresholdsResponseOutput {
	return o
}

func (o KpiThresholdsResponseOutput) ToKpiThresholdsResponsePtrOutput() KpiThresholdsResponsePtrOutput {
	return o.ToKpiThresholdsResponsePtrOutputWithContext(context.Background())
}

func (o KpiThresholdsResponseOutput) ToKpiThresholdsResponsePtrOutputWithContext(ctx context.Context) KpiThresholdsResponsePtrOutput {
	return o.ApplyT(func(v KpiThresholdsResponse) *KpiThresholdsResponse {
		return &v
	}).(KpiThresholdsResponsePtrOutput)
}

// Whether or not the KPI is an increasing KPI.
func (o KpiThresholdsResponseOutput) IncreasingKpi() pulumi.BoolOutput {
	return o.ApplyT(func(v KpiThresholdsResponse) bool { return v.IncreasingKpi }).(pulumi.BoolOutput)
}

// The lower threshold limit.
func (o KpiThresholdsResponseOutput) LowerLimit() pulumi.Float64Output {
	return o.ApplyT(func(v KpiThresholdsResponse) float64 { return v.LowerLimit }).(pulumi.Float64Output)
}

// The upper threshold limit.
func (o KpiThresholdsResponseOutput) UpperLimit() pulumi.Float64Output {
	return o.ApplyT(func(v KpiThresholdsResponse) float64 { return v.UpperLimit }).(pulumi.Float64Output)
}

type KpiThresholdsResponsePtrOutput struct{ *pulumi.OutputState }

func (KpiThresholdsResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KpiThresholdsResponse)(nil)).Elem()
}

func (o KpiThresholdsResponsePtrOutput) ToKpiThresholdsResponsePtrOutput() KpiThresholdsResponsePtrOutput {
	return o
}

func (o KpiThresholdsResponsePtrOutput) ToKpiThresholdsResponsePtrOutputWithContext(ctx context.Context) KpiThresholdsResponsePtrOutput {
	return o
}

func (o KpiThresholdsResponsePtrOutput) Elem() KpiThresholdsResponseOutput {
	return o.ApplyT(func(v *KpiThresholdsResponse) KpiThresholdsResponse { return *v }).(KpiThresholdsResponseOutput)
}

// Whether or not the KPI is an increasing KPI.
func (o KpiThresholdsResponsePtrOutput) IncreasingKpi() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *KpiThresholdsResponse) *bool {
		if v == nil {
			return nil
		}
		return &v.IncreasingKpi
	}).(pulumi.BoolPtrOutput)
}

// The lower threshold limit.
func (o KpiThresholdsResponsePtrOutput) LowerLimit() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *KpiThresholdsResponse) *float64 {
		if v == nil {
			return nil
		}
		return &v.LowerLimit
	}).(pulumi.Float64PtrOutput)
}

// The upper threshold limit.
func (o KpiThresholdsResponsePtrOutput) UpperLimit() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *KpiThresholdsResponse) *float64 {
		if v == nil {
			return nil
		}
		return &v.UpperLimit
	}).(pulumi.Float64PtrOutput)
}

// The definition of Link.
type LinkDefinitionResponse struct {
	// Localized descriptions for the Link.
	Description map[string]string `pulumi:"description"`
	// Localized display name for the Link.
	DisplayName map[string]string `pulumi:"displayName"`
	// The link name.
	LinkName string `pulumi:"linkName"`
	// The set of properties mappings between the source and target Types.
	Mappings []TypePropertiesMappingResponse `pulumi:"mappings"`
	// Determines whether this link is supposed to create or delete instances if Link is NOT Reference Only.
	OperationType *string `pulumi:"operationType"`
	// The properties that represent the participating profile.
	ParticipantPropertyReferences []ParticipantPropertyReferenceResponse `pulumi:"participantPropertyReferences"`
	// Provisioning state.
	ProvisioningState string `pulumi:"provisioningState"`
	// Indicating whether the link is reference only link. This flag is ignored if the Mappings are defined. If the mappings are not defined and it is set to true, links processing will not create or update profiles.
	ReferenceOnly *bool `pulumi:"referenceOnly"`
	// Type of source entity.
	SourceEntityType string `pulumi:"sourceEntityType"`
	// Name of the source Entity Type.
	SourceEntityTypeName string `pulumi:"sourceEntityTypeName"`
	// Type of target entity.
	TargetEntityType string `pulumi:"targetEntityType"`
	// Name of the target Entity Type.
	TargetEntityTypeName string `pulumi:"targetEntityTypeName"`
	// The hub name.
	TenantId string `pulumi:"tenantId"`
}

// LinkDefinitionResponseInput is an input type that accepts LinkDefinitionResponseArgs and LinkDefinitionResponseOutput values.
// You can construct a concrete instance of `LinkDefinitionResponseInput` via:
//
//          LinkDefinitionResponseArgs{...}
type LinkDefinitionResponseInput interface {
	pulumi.Input

	ToLinkDefinitionResponseOutput() LinkDefinitionResponseOutput
	ToLinkDefinitionResponseOutputWithContext(context.Context) LinkDefinitionResponseOutput
}

// The definition of Link.
type LinkDefinitionResponseArgs struct {
	// Localized descriptions for the Link.
	Description pulumi.StringMapInput `pulumi:"description"`
	// Localized display name for the Link.
	DisplayName pulumi.StringMapInput `pulumi:"displayName"`
	// The link name.
	LinkName pulumi.StringInput `pulumi:"linkName"`
	// The set of properties mappings between the source and target Types.
	Mappings TypePropertiesMappingResponseArrayInput `pulumi:"mappings"`
	// Determines whether this link is supposed to create or delete instances if Link is NOT Reference Only.
	OperationType pulumi.StringPtrInput `pulumi:"operationType"`
	// The properties that represent the participating profile.
	ParticipantPropertyReferences ParticipantPropertyReferenceResponseArrayInput `pulumi:"participantPropertyReferences"`
	// Provisioning state.
	ProvisioningState pulumi.StringInput `pulumi:"provisioningState"`
	// Indicating whether the link is reference only link. This flag is ignored if the Mappings are defined. If the mappings are not defined and it is set to true, links processing will not create or update profiles.
	ReferenceOnly pulumi.BoolPtrInput `pulumi:"referenceOnly"`
	// Type of source entity.
	SourceEntityType pulumi.StringInput `pulumi:"sourceEntityType"`
	// Name of the source Entity Type.
	SourceEntityTypeName pulumi.StringInput `pulumi:"sourceEntityTypeName"`
	// Type of target entity.
	TargetEntityType pulumi.StringInput `pulumi:"targetEntityType"`
	// Name of the target Entity Type.
	TargetEntityTypeName pulumi.StringInput `pulumi:"targetEntityTypeName"`
	// The hub name.
	TenantId pulumi.StringInput `pulumi:"tenantId"`
}

func (LinkDefinitionResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LinkDefinitionResponse)(nil)).Elem()
}

func (i LinkDefinitionResponseArgs) ToLinkDefinitionResponseOutput() LinkDefinitionResponseOutput {
	return i.ToLinkDefinitionResponseOutputWithContext(context.Background())
}

func (i LinkDefinitionResponseArgs) ToLinkDefinitionResponseOutputWithContext(ctx context.Context) LinkDefinitionResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LinkDefinitionResponseOutput)
}

func (i LinkDefinitionResponseArgs) ToLinkDefinitionResponsePtrOutput() LinkDefinitionResponsePtrOutput {
	return i.ToLinkDefinitionResponsePtrOutputWithContext(context.Background())
}

func (i LinkDefinitionResponseArgs) ToLinkDefinitionResponsePtrOutputWithContext(ctx context.Context) LinkDefinitionResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LinkDefinitionResponseOutput).ToLinkDefinitionResponsePtrOutputWithContext(ctx)
}

// LinkDefinitionResponsePtrInput is an input type that accepts LinkDefinitionResponseArgs, LinkDefinitionResponsePtr and LinkDefinitionResponsePtrOutput values.
// You can construct a concrete instance of `LinkDefinitionResponsePtrInput` via:
//
//          LinkDefinitionResponseArgs{...}
//
//  or:
//
//          nil
type LinkDefinitionResponsePtrInput interface {
	pulumi.Input

	ToLinkDefinitionResponsePtrOutput() LinkDefinitionResponsePtrOutput
	ToLinkDefinitionResponsePtrOutputWithContext(context.Context) LinkDefinitionResponsePtrOutput
}

type linkDefinitionResponsePtrType LinkDefinitionResponseArgs

func LinkDefinitionResponsePtr(v *LinkDefinitionResponseArgs) LinkDefinitionResponsePtrInput {
	return (*linkDefinitionResponsePtrType)(v)
}

func (*linkDefinitionResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**LinkDefinitionResponse)(nil)).Elem()
}

func (i *linkDefinitionResponsePtrType) ToLinkDefinitionResponsePtrOutput() LinkDefinitionResponsePtrOutput {
	return i.ToLinkDefinitionResponsePtrOutputWithContext(context.Background())
}

func (i *linkDefinitionResponsePtrType) ToLinkDefinitionResponsePtrOutputWithContext(ctx context.Context) LinkDefinitionResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LinkDefinitionResponsePtrOutput)
}

// The definition of Link.
type LinkDefinitionResponseOutput struct{ *pulumi.OutputState }

func (LinkDefinitionResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LinkDefinitionResponse)(nil)).Elem()
}

func (o LinkDefinitionResponseOutput) ToLinkDefinitionResponseOutput() LinkDefinitionResponseOutput {
	return o
}

func (o LinkDefinitionResponseOutput) ToLinkDefinitionResponseOutputWithContext(ctx context.Context) LinkDefinitionResponseOutput {
	return o
}

func (o LinkDefinitionResponseOutput) ToLinkDefinitionResponsePtrOutput() LinkDefinitionResponsePtrOutput {
	return o.ToLinkDefinitionResponsePtrOutputWithContext(context.Background())
}

func (o LinkDefinitionResponseOutput) ToLinkDefinitionResponsePtrOutputWithContext(ctx context.Context) LinkDefinitionResponsePtrOutput {
	return o.ApplyT(func(v LinkDefinitionResponse) *LinkDefinitionResponse {
		return &v
	}).(LinkDefinitionResponsePtrOutput)
}

// Localized descriptions for the Link.
func (o LinkDefinitionResponseOutput) Description() pulumi.StringMapOutput {
	return o.ApplyT(func(v LinkDefinitionResponse) map[string]string { return v.Description }).(pulumi.StringMapOutput)
}

// Localized display name for the Link.
func (o LinkDefinitionResponseOutput) DisplayName() pulumi.StringMapOutput {
	return o.ApplyT(func(v LinkDefinitionResponse) map[string]string { return v.DisplayName }).(pulumi.StringMapOutput)
}

// The link name.
func (o LinkDefinitionResponseOutput) LinkName() pulumi.StringOutput {
	return o.ApplyT(func(v LinkDefinitionResponse) string { return v.LinkName }).(pulumi.StringOutput)
}

// The set of properties mappings between the source and target Types.
func (o LinkDefinitionResponseOutput) Mappings() TypePropertiesMappingResponseArrayOutput {
	return o.ApplyT(func(v LinkDefinitionResponse) []TypePropertiesMappingResponse { return v.Mappings }).(TypePropertiesMappingResponseArrayOutput)
}

// Determines whether this link is supposed to create or delete instances if Link is NOT Reference Only.
func (o LinkDefinitionResponseOutput) OperationType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LinkDefinitionResponse) *string { return v.OperationType }).(pulumi.StringPtrOutput)
}

// The properties that represent the participating profile.
func (o LinkDefinitionResponseOutput) ParticipantPropertyReferences() ParticipantPropertyReferenceResponseArrayOutput {
	return o.ApplyT(func(v LinkDefinitionResponse) []ParticipantPropertyReferenceResponse {
		return v.ParticipantPropertyReferences
	}).(ParticipantPropertyReferenceResponseArrayOutput)
}

// Provisioning state.
func (o LinkDefinitionResponseOutput) ProvisioningState() pulumi.StringOutput {
	return o.ApplyT(func(v LinkDefinitionResponse) string { return v.ProvisioningState }).(pulumi.StringOutput)
}

// Indicating whether the link is reference only link. This flag is ignored if the Mappings are defined. If the mappings are not defined and it is set to true, links processing will not create or update profiles.
func (o LinkDefinitionResponseOutput) ReferenceOnly() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v LinkDefinitionResponse) *bool { return v.ReferenceOnly }).(pulumi.BoolPtrOutput)
}

// Type of source entity.
func (o LinkDefinitionResponseOutput) SourceEntityType() pulumi.StringOutput {
	return o.ApplyT(func(v LinkDefinitionResponse) string { return v.SourceEntityType }).(pulumi.StringOutput)
}

// Name of the source Entity Type.
func (o LinkDefinitionResponseOutput) SourceEntityTypeName() pulumi.StringOutput {
	return o.ApplyT(func(v LinkDefinitionResponse) string { return v.SourceEntityTypeName }).(pulumi.StringOutput)
}

// Type of target entity.
func (o LinkDefinitionResponseOutput) TargetEntityType() pulumi.StringOutput {
	return o.ApplyT(func(v LinkDefinitionResponse) string { return v.TargetEntityType }).(pulumi.StringOutput)
}

// Name of the target Entity Type.
func (o LinkDefinitionResponseOutput) TargetEntityTypeName() pulumi.StringOutput {
	return o.ApplyT(func(v LinkDefinitionResponse) string { return v.TargetEntityTypeName }).(pulumi.StringOutput)
}

// The hub name.
func (o LinkDefinitionResponseOutput) TenantId() pulumi.StringOutput {
	return o.ApplyT(func(v LinkDefinitionResponse) string { return v.TenantId }).(pulumi.StringOutput)
}

type LinkDefinitionResponsePtrOutput struct{ *pulumi.OutputState }

func (LinkDefinitionResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LinkDefinitionResponse)(nil)).Elem()
}

func (o LinkDefinitionResponsePtrOutput) ToLinkDefinitionResponsePtrOutput() LinkDefinitionResponsePtrOutput {
	return o
}

func (o LinkDefinitionResponsePtrOutput) ToLinkDefinitionResponsePtrOutputWithContext(ctx context.Context) LinkDefinitionResponsePtrOutput {
	return o
}

func (o LinkDefinitionResponsePtrOutput) Elem() LinkDefinitionResponseOutput {
	return o.ApplyT(func(v *LinkDefinitionResponse) LinkDefinitionResponse { return *v }).(LinkDefinitionResponseOutput)
}

// Localized descriptions for the Link.
func (o LinkDefinitionResponsePtrOutput) Description() pulumi.StringMapOutput {
	return o.ApplyT(func(v *LinkDefinitionResponse) map[string]string {
		if v == nil {
			return nil
		}
		return v.Description
	}).(pulumi.StringMapOutput)
}

// Localized display name for the Link.
func (o LinkDefinitionResponsePtrOutput) DisplayName() pulumi.StringMapOutput {
	return o.ApplyT(func(v *LinkDefinitionResponse) map[string]string {
		if v == nil {
			return nil
		}
		return v.DisplayName
	}).(pulumi.StringMapOutput)
}

// The link name.
func (o LinkDefinitionResponsePtrOutput) LinkName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LinkDefinitionResponse) *string {
		if v == nil {
			return nil
		}
		return &v.LinkName
	}).(pulumi.StringPtrOutput)
}

// The set of properties mappings between the source and target Types.
func (o LinkDefinitionResponsePtrOutput) Mappings() TypePropertiesMappingResponseArrayOutput {
	return o.ApplyT(func(v *LinkDefinitionResponse) []TypePropertiesMappingResponse {
		if v == nil {
			return nil
		}
		return v.Mappings
	}).(TypePropertiesMappingResponseArrayOutput)
}

// Determines whether this link is supposed to create or delete instances if Link is NOT Reference Only.
func (o LinkDefinitionResponsePtrOutput) OperationType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LinkDefinitionResponse) *string {
		if v == nil {
			return nil
		}
		return v.OperationType
	}).(pulumi.StringPtrOutput)
}

// The properties that represent the participating profile.
func (o LinkDefinitionResponsePtrOutput) ParticipantPropertyReferences() ParticipantPropertyReferenceResponseArrayOutput {
	return o.ApplyT(func(v *LinkDefinitionResponse) []ParticipantPropertyReferenceResponse {
		if v == nil {
			return nil
		}
		return v.ParticipantPropertyReferences
	}).(ParticipantPropertyReferenceResponseArrayOutput)
}

// Provisioning state.
func (o LinkDefinitionResponsePtrOutput) ProvisioningState() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LinkDefinitionResponse) *string {
		if v == nil {
			return nil
		}
		return &v.ProvisioningState
	}).(pulumi.StringPtrOutput)
}

// Indicating whether the link is reference only link. This flag is ignored if the Mappings are defined. If the mappings are not defined and it is set to true, links processing will not create or update profiles.
func (o LinkDefinitionResponsePtrOutput) ReferenceOnly() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *LinkDefinitionResponse) *bool {
		if v == nil {
			return nil
		}
		return v.ReferenceOnly
	}).(pulumi.BoolPtrOutput)
}

// Type of source entity.
func (o LinkDefinitionResponsePtrOutput) SourceEntityType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LinkDefinitionResponse) *string {
		if v == nil {
			return nil
		}
		return &v.SourceEntityType
	}).(pulumi.StringPtrOutput)
}

// Name of the source Entity Type.
func (o LinkDefinitionResponsePtrOutput) SourceEntityTypeName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LinkDefinitionResponse) *string {
		if v == nil {
			return nil
		}
		return &v.SourceEntityTypeName
	}).(pulumi.StringPtrOutput)
}

// Type of target entity.
func (o LinkDefinitionResponsePtrOutput) TargetEntityType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LinkDefinitionResponse) *string {
		if v == nil {
			return nil
		}
		return &v.TargetEntityType
	}).(pulumi.StringPtrOutput)
}

// Name of the target Entity Type.
func (o LinkDefinitionResponsePtrOutput) TargetEntityTypeName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LinkDefinitionResponse) *string {
		if v == nil {
			return nil
		}
		return &v.TargetEntityTypeName
	}).(pulumi.StringPtrOutput)
}

// The hub name.
func (o LinkDefinitionResponsePtrOutput) TenantId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LinkDefinitionResponse) *string {
		if v == nil {
			return nil
		}
		return &v.TenantId
	}).(pulumi.StringPtrOutput)
}

// The participant profile property reference.
type ParticipantProfilePropertyReference struct {
	// The source interaction property that maps to the target profile property.
	InteractionPropertyName string `pulumi:"interactionPropertyName"`
	// The target profile property that maps to the source interaction property.
	ProfilePropertyName string `pulumi:"profilePropertyName"`
}

// ParticipantProfilePropertyReferenceInput is an input type that accepts ParticipantProfilePropertyReferenceArgs and ParticipantProfilePropertyReferenceOutput values.
// You can construct a concrete instance of `ParticipantProfilePropertyReferenceInput` via:
//
//          ParticipantProfilePropertyReferenceArgs{...}
type ParticipantProfilePropertyReferenceInput interface {
	pulumi.Input

	ToParticipantProfilePropertyReferenceOutput() ParticipantProfilePropertyReferenceOutput
	ToParticipantProfilePropertyReferenceOutputWithContext(context.Context) ParticipantProfilePropertyReferenceOutput
}

// The participant profile property reference.
type ParticipantProfilePropertyReferenceArgs struct {
	// The source interaction property that maps to the target profile property.
	InteractionPropertyName pulumi.StringInput `pulumi:"interactionPropertyName"`
	// The target profile property that maps to the source interaction property.
	ProfilePropertyName pulumi.StringInput `pulumi:"profilePropertyName"`
}

func (ParticipantProfilePropertyReferenceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ParticipantProfilePropertyReference)(nil)).Elem()
}

func (i ParticipantProfilePropertyReferenceArgs) ToParticipantProfilePropertyReferenceOutput() ParticipantProfilePropertyReferenceOutput {
	return i.ToParticipantProfilePropertyReferenceOutputWithContext(context.Background())
}

func (i ParticipantProfilePropertyReferenceArgs) ToParticipantProfilePropertyReferenceOutputWithContext(ctx context.Context) ParticipantProfilePropertyReferenceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ParticipantProfilePropertyReferenceOutput)
}

// ParticipantProfilePropertyReferenceArrayInput is an input type that accepts ParticipantProfilePropertyReferenceArray and ParticipantProfilePropertyReferenceArrayOutput values.
// You can construct a concrete instance of `ParticipantProfilePropertyReferenceArrayInput` via:
//
//          ParticipantProfilePropertyReferenceArray{ ParticipantProfilePropertyReferenceArgs{...} }
type ParticipantProfilePropertyReferenceArrayInput interface {
	pulumi.Input

	ToParticipantProfilePropertyReferenceArrayOutput() ParticipantProfilePropertyReferenceArrayOutput
	ToParticipantProfilePropertyReferenceArrayOutputWithContext(context.Context) ParticipantProfilePropertyReferenceArrayOutput
}

type ParticipantProfilePropertyReferenceArray []ParticipantProfilePropertyReferenceInput

func (ParticipantProfilePropertyReferenceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ParticipantProfilePropertyReference)(nil)).Elem()
}

func (i ParticipantProfilePropertyReferenceArray) ToParticipantProfilePropertyReferenceArrayOutput() ParticipantProfilePropertyReferenceArrayOutput {
	return i.ToParticipantProfilePropertyReferenceArrayOutputWithContext(context.Background())
}

func (i ParticipantProfilePropertyReferenceArray) ToParticipantProfilePropertyReferenceArrayOutputWithContext(ctx context.Context) ParticipantProfilePropertyReferenceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ParticipantProfilePropertyReferenceArrayOutput)
}

// The participant profile property reference.
type ParticipantProfilePropertyReferenceOutput struct{ *pulumi.OutputState }

func (ParticipantProfilePropertyReferenceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ParticipantProfilePropertyReference)(nil)).Elem()
}

func (o ParticipantProfilePropertyReferenceOutput) ToParticipantProfilePropertyReferenceOutput() ParticipantProfilePropertyReferenceOutput {
	return o
}

func (o ParticipantProfilePropertyReferenceOutput) ToParticipantProfilePropertyReferenceOutputWithContext(ctx context.Context) ParticipantProfilePropertyReferenceOutput {
	return o
}

// The source interaction property that maps to the target profile property.
func (o ParticipantProfilePropertyReferenceOutput) InteractionPropertyName() pulumi.StringOutput {
	return o.ApplyT(func(v ParticipantProfilePropertyReference) string { return v.InteractionPropertyName }).(pulumi.StringOutput)
}

// The target profile property that maps to the source interaction property.
func (o ParticipantProfilePropertyReferenceOutput) ProfilePropertyName() pulumi.StringOutput {
	return o.ApplyT(func(v ParticipantProfilePropertyReference) string { return v.ProfilePropertyName }).(pulumi.StringOutput)
}

type ParticipantProfilePropertyReferenceArrayOutput struct{ *pulumi.OutputState }

func (ParticipantProfilePropertyReferenceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ParticipantProfilePropertyReference)(nil)).Elem()
}

func (o ParticipantProfilePropertyReferenceArrayOutput) ToParticipantProfilePropertyReferenceArrayOutput() ParticipantProfilePropertyReferenceArrayOutput {
	return o
}

func (o ParticipantProfilePropertyReferenceArrayOutput) ToParticipantProfilePropertyReferenceArrayOutputWithContext(ctx context.Context) ParticipantProfilePropertyReferenceArrayOutput {
	return o
}

func (o ParticipantProfilePropertyReferenceArrayOutput) Index(i pulumi.IntInput) ParticipantProfilePropertyReferenceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ParticipantProfilePropertyReference {
		return vs[0].([]ParticipantProfilePropertyReference)[vs[1].(int)]
	}).(ParticipantProfilePropertyReferenceOutput)
}

// The participant profile property reference.
type ParticipantProfilePropertyReferenceResponse struct {
	// The source interaction property that maps to the target profile property.
	InteractionPropertyName string `pulumi:"interactionPropertyName"`
	// The target profile property that maps to the source interaction property.
	ProfilePropertyName string `pulumi:"profilePropertyName"`
}

// ParticipantProfilePropertyReferenceResponseInput is an input type that accepts ParticipantProfilePropertyReferenceResponseArgs and ParticipantProfilePropertyReferenceResponseOutput values.
// You can construct a concrete instance of `ParticipantProfilePropertyReferenceResponseInput` via:
//
//          ParticipantProfilePropertyReferenceResponseArgs{...}
type ParticipantProfilePropertyReferenceResponseInput interface {
	pulumi.Input

	ToParticipantProfilePropertyReferenceResponseOutput() ParticipantProfilePropertyReferenceResponseOutput
	ToParticipantProfilePropertyReferenceResponseOutputWithContext(context.Context) ParticipantProfilePropertyReferenceResponseOutput
}

// The participant profile property reference.
type ParticipantProfilePropertyReferenceResponseArgs struct {
	// The source interaction property that maps to the target profile property.
	InteractionPropertyName pulumi.StringInput `pulumi:"interactionPropertyName"`
	// The target profile property that maps to the source interaction property.
	ProfilePropertyName pulumi.StringInput `pulumi:"profilePropertyName"`
}

func (ParticipantProfilePropertyReferenceResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ParticipantProfilePropertyReferenceResponse)(nil)).Elem()
}

func (i ParticipantProfilePropertyReferenceResponseArgs) ToParticipantProfilePropertyReferenceResponseOutput() ParticipantProfilePropertyReferenceResponseOutput {
	return i.ToParticipantProfilePropertyReferenceResponseOutputWithContext(context.Background())
}

func (i ParticipantProfilePropertyReferenceResponseArgs) ToParticipantProfilePropertyReferenceResponseOutputWithContext(ctx context.Context) ParticipantProfilePropertyReferenceResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ParticipantProfilePropertyReferenceResponseOutput)
}

// ParticipantProfilePropertyReferenceResponseArrayInput is an input type that accepts ParticipantProfilePropertyReferenceResponseArray and ParticipantProfilePropertyReferenceResponseArrayOutput values.
// You can construct a concrete instance of `ParticipantProfilePropertyReferenceResponseArrayInput` via:
//
//          ParticipantProfilePropertyReferenceResponseArray{ ParticipantProfilePropertyReferenceResponseArgs{...} }
type ParticipantProfilePropertyReferenceResponseArrayInput interface {
	pulumi.Input

	ToParticipantProfilePropertyReferenceResponseArrayOutput() ParticipantProfilePropertyReferenceResponseArrayOutput
	ToParticipantProfilePropertyReferenceResponseArrayOutputWithContext(context.Context) ParticipantProfilePropertyReferenceResponseArrayOutput
}

type ParticipantProfilePropertyReferenceResponseArray []ParticipantProfilePropertyReferenceResponseInput

func (ParticipantProfilePropertyReferenceResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ParticipantProfilePropertyReferenceResponse)(nil)).Elem()
}

func (i ParticipantProfilePropertyReferenceResponseArray) ToParticipantProfilePropertyReferenceResponseArrayOutput() ParticipantProfilePropertyReferenceResponseArrayOutput {
	return i.ToParticipantProfilePropertyReferenceResponseArrayOutputWithContext(context.Background())
}

func (i ParticipantProfilePropertyReferenceResponseArray) ToParticipantProfilePropertyReferenceResponseArrayOutputWithContext(ctx context.Context) ParticipantProfilePropertyReferenceResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ParticipantProfilePropertyReferenceResponseArrayOutput)
}

// The participant profile property reference.
type ParticipantProfilePropertyReferenceResponseOutput struct{ *pulumi.OutputState }

func (ParticipantProfilePropertyReferenceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ParticipantProfilePropertyReferenceResponse)(nil)).Elem()
}

func (o ParticipantProfilePropertyReferenceResponseOutput) ToParticipantProfilePropertyReferenceResponseOutput() ParticipantProfilePropertyReferenceResponseOutput {
	return o
}

func (o ParticipantProfilePropertyReferenceResponseOutput) ToParticipantProfilePropertyReferenceResponseOutputWithContext(ctx context.Context) ParticipantProfilePropertyReferenceResponseOutput {
	return o
}

// The source interaction property that maps to the target profile property.
func (o ParticipantProfilePropertyReferenceResponseOutput) InteractionPropertyName() pulumi.StringOutput {
	return o.ApplyT(func(v ParticipantProfilePropertyReferenceResponse) string { return v.InteractionPropertyName }).(pulumi.StringOutput)
}

// The target profile property that maps to the source interaction property.
func (o ParticipantProfilePropertyReferenceResponseOutput) ProfilePropertyName() pulumi.StringOutput {
	return o.ApplyT(func(v ParticipantProfilePropertyReferenceResponse) string { return v.ProfilePropertyName }).(pulumi.StringOutput)
}

type ParticipantProfilePropertyReferenceResponseArrayOutput struct{ *pulumi.OutputState }

func (ParticipantProfilePropertyReferenceResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ParticipantProfilePropertyReferenceResponse)(nil)).Elem()
}

func (o ParticipantProfilePropertyReferenceResponseArrayOutput) ToParticipantProfilePropertyReferenceResponseArrayOutput() ParticipantProfilePropertyReferenceResponseArrayOutput {
	return o
}

func (o ParticipantProfilePropertyReferenceResponseArrayOutput) ToParticipantProfilePropertyReferenceResponseArrayOutputWithContext(ctx context.Context) ParticipantProfilePropertyReferenceResponseArrayOutput {
	return o
}

func (o ParticipantProfilePropertyReferenceResponseArrayOutput) Index(i pulumi.IntInput) ParticipantProfilePropertyReferenceResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ParticipantProfilePropertyReferenceResponse {
		return vs[0].([]ParticipantProfilePropertyReferenceResponse)[vs[1].(int)]
	}).(ParticipantProfilePropertyReferenceResponseOutput)
}

// The participant property reference.
type ParticipantPropertyReference struct {
	// The source property that maps to the target property.
	SourcePropertyName string `pulumi:"sourcePropertyName"`
	// The target property that maps to the source property.
	TargetPropertyName string `pulumi:"targetPropertyName"`
}

// ParticipantPropertyReferenceInput is an input type that accepts ParticipantPropertyReferenceArgs and ParticipantPropertyReferenceOutput values.
// You can construct a concrete instance of `ParticipantPropertyReferenceInput` via:
//
//          ParticipantPropertyReferenceArgs{...}
type ParticipantPropertyReferenceInput interface {
	pulumi.Input

	ToParticipantPropertyReferenceOutput() ParticipantPropertyReferenceOutput
	ToParticipantPropertyReferenceOutputWithContext(context.Context) ParticipantPropertyReferenceOutput
}

// The participant property reference.
type ParticipantPropertyReferenceArgs struct {
	// The source property that maps to the target property.
	SourcePropertyName pulumi.StringInput `pulumi:"sourcePropertyName"`
	// The target property that maps to the source property.
	TargetPropertyName pulumi.StringInput `pulumi:"targetPropertyName"`
}

func (ParticipantPropertyReferenceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ParticipantPropertyReference)(nil)).Elem()
}

func (i ParticipantPropertyReferenceArgs) ToParticipantPropertyReferenceOutput() ParticipantPropertyReferenceOutput {
	return i.ToParticipantPropertyReferenceOutputWithContext(context.Background())
}

func (i ParticipantPropertyReferenceArgs) ToParticipantPropertyReferenceOutputWithContext(ctx context.Context) ParticipantPropertyReferenceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ParticipantPropertyReferenceOutput)
}

// ParticipantPropertyReferenceArrayInput is an input type that accepts ParticipantPropertyReferenceArray and ParticipantPropertyReferenceArrayOutput values.
// You can construct a concrete instance of `ParticipantPropertyReferenceArrayInput` via:
//
//          ParticipantPropertyReferenceArray{ ParticipantPropertyReferenceArgs{...} }
type ParticipantPropertyReferenceArrayInput interface {
	pulumi.Input

	ToParticipantPropertyReferenceArrayOutput() ParticipantPropertyReferenceArrayOutput
	ToParticipantPropertyReferenceArrayOutputWithContext(context.Context) ParticipantPropertyReferenceArrayOutput
}

type ParticipantPropertyReferenceArray []ParticipantPropertyReferenceInput

func (ParticipantPropertyReferenceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ParticipantPropertyReference)(nil)).Elem()
}

func (i ParticipantPropertyReferenceArray) ToParticipantPropertyReferenceArrayOutput() ParticipantPropertyReferenceArrayOutput {
	return i.ToParticipantPropertyReferenceArrayOutputWithContext(context.Background())
}

func (i ParticipantPropertyReferenceArray) ToParticipantPropertyReferenceArrayOutputWithContext(ctx context.Context) ParticipantPropertyReferenceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ParticipantPropertyReferenceArrayOutput)
}

// The participant property reference.
type ParticipantPropertyReferenceOutput struct{ *pulumi.OutputState }

func (ParticipantPropertyReferenceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ParticipantPropertyReference)(nil)).Elem()
}

func (o ParticipantPropertyReferenceOutput) ToParticipantPropertyReferenceOutput() ParticipantPropertyReferenceOutput {
	return o
}

func (o ParticipantPropertyReferenceOutput) ToParticipantPropertyReferenceOutputWithContext(ctx context.Context) ParticipantPropertyReferenceOutput {
	return o
}

// The source property that maps to the target property.
func (o ParticipantPropertyReferenceOutput) SourcePropertyName() pulumi.StringOutput {
	return o.ApplyT(func(v ParticipantPropertyReference) string { return v.SourcePropertyName }).(pulumi.StringOutput)
}

// The target property that maps to the source property.
func (o ParticipantPropertyReferenceOutput) TargetPropertyName() pulumi.StringOutput {
	return o.ApplyT(func(v ParticipantPropertyReference) string { return v.TargetPropertyName }).(pulumi.StringOutput)
}

type ParticipantPropertyReferenceArrayOutput struct{ *pulumi.OutputState }

func (ParticipantPropertyReferenceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ParticipantPropertyReference)(nil)).Elem()
}

func (o ParticipantPropertyReferenceArrayOutput) ToParticipantPropertyReferenceArrayOutput() ParticipantPropertyReferenceArrayOutput {
	return o
}

func (o ParticipantPropertyReferenceArrayOutput) ToParticipantPropertyReferenceArrayOutputWithContext(ctx context.Context) ParticipantPropertyReferenceArrayOutput {
	return o
}

func (o ParticipantPropertyReferenceArrayOutput) Index(i pulumi.IntInput) ParticipantPropertyReferenceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ParticipantPropertyReference {
		return vs[0].([]ParticipantPropertyReference)[vs[1].(int)]
	}).(ParticipantPropertyReferenceOutput)
}

// The participant property reference.
type ParticipantPropertyReferenceResponse struct {
	// The source property that maps to the target property.
	SourcePropertyName string `pulumi:"sourcePropertyName"`
	// The target property that maps to the source property.
	TargetPropertyName string `pulumi:"targetPropertyName"`
}

// ParticipantPropertyReferenceResponseInput is an input type that accepts ParticipantPropertyReferenceResponseArgs and ParticipantPropertyReferenceResponseOutput values.
// You can construct a concrete instance of `ParticipantPropertyReferenceResponseInput` via:
//
//          ParticipantPropertyReferenceResponseArgs{...}
type ParticipantPropertyReferenceResponseInput interface {
	pulumi.Input

	ToParticipantPropertyReferenceResponseOutput() ParticipantPropertyReferenceResponseOutput
	ToParticipantPropertyReferenceResponseOutputWithContext(context.Context) ParticipantPropertyReferenceResponseOutput
}

// The participant property reference.
type ParticipantPropertyReferenceResponseArgs struct {
	// The source property that maps to the target property.
	SourcePropertyName pulumi.StringInput `pulumi:"sourcePropertyName"`
	// The target property that maps to the source property.
	TargetPropertyName pulumi.StringInput `pulumi:"targetPropertyName"`
}

func (ParticipantPropertyReferenceResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ParticipantPropertyReferenceResponse)(nil)).Elem()
}

func (i ParticipantPropertyReferenceResponseArgs) ToParticipantPropertyReferenceResponseOutput() ParticipantPropertyReferenceResponseOutput {
	return i.ToParticipantPropertyReferenceResponseOutputWithContext(context.Background())
}

func (i ParticipantPropertyReferenceResponseArgs) ToParticipantPropertyReferenceResponseOutputWithContext(ctx context.Context) ParticipantPropertyReferenceResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ParticipantPropertyReferenceResponseOutput)
}

// ParticipantPropertyReferenceResponseArrayInput is an input type that accepts ParticipantPropertyReferenceResponseArray and ParticipantPropertyReferenceResponseArrayOutput values.
// You can construct a concrete instance of `ParticipantPropertyReferenceResponseArrayInput` via:
//
//          ParticipantPropertyReferenceResponseArray{ ParticipantPropertyReferenceResponseArgs{...} }
type ParticipantPropertyReferenceResponseArrayInput interface {
	pulumi.Input

	ToParticipantPropertyReferenceResponseArrayOutput() ParticipantPropertyReferenceResponseArrayOutput
	ToParticipantPropertyReferenceResponseArrayOutputWithContext(context.Context) ParticipantPropertyReferenceResponseArrayOutput
}

type ParticipantPropertyReferenceResponseArray []ParticipantPropertyReferenceResponseInput

func (ParticipantPropertyReferenceResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ParticipantPropertyReferenceResponse)(nil)).Elem()
}

func (i ParticipantPropertyReferenceResponseArray) ToParticipantPropertyReferenceResponseArrayOutput() ParticipantPropertyReferenceResponseArrayOutput {
	return i.ToParticipantPropertyReferenceResponseArrayOutputWithContext(context.Background())
}

func (i ParticipantPropertyReferenceResponseArray) ToParticipantPropertyReferenceResponseArrayOutputWithContext(ctx context.Context) ParticipantPropertyReferenceResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ParticipantPropertyReferenceResponseArrayOutput)
}

// The participant property reference.
type ParticipantPropertyReferenceResponseOutput struct{ *pulumi.OutputState }

func (ParticipantPropertyReferenceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ParticipantPropertyReferenceResponse)(nil)).Elem()
}

func (o ParticipantPropertyReferenceResponseOutput) ToParticipantPropertyReferenceResponseOutput() ParticipantPropertyReferenceResponseOutput {
	return o
}

func (o ParticipantPropertyReferenceResponseOutput) ToParticipantPropertyReferenceResponseOutputWithContext(ctx context.Context) ParticipantPropertyReferenceResponseOutput {
	return o
}

// The source property that maps to the target property.
func (o ParticipantPropertyReferenceResponseOutput) SourcePropertyName() pulumi.StringOutput {
	return o.ApplyT(func(v ParticipantPropertyReferenceResponse) string { return v.SourcePropertyName }).(pulumi.StringOutput)
}

// The target property that maps to the source property.
func (o ParticipantPropertyReferenceResponseOutput) TargetPropertyName() pulumi.StringOutput {
	return o.ApplyT(func(v ParticipantPropertyReferenceResponse) string { return v.TargetPropertyName }).(pulumi.StringOutput)
}

type ParticipantPropertyReferenceResponseArrayOutput struct{ *pulumi.OutputState }

func (ParticipantPropertyReferenceResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ParticipantPropertyReferenceResponse)(nil)).Elem()
}

func (o ParticipantPropertyReferenceResponseArrayOutput) ToParticipantPropertyReferenceResponseArrayOutput() ParticipantPropertyReferenceResponseArrayOutput {
	return o
}

func (o ParticipantPropertyReferenceResponseArrayOutput) ToParticipantPropertyReferenceResponseArrayOutputWithContext(ctx context.Context) ParticipantPropertyReferenceResponseArrayOutput {
	return o
}

func (o ParticipantPropertyReferenceResponseArrayOutput) Index(i pulumi.IntInput) ParticipantPropertyReferenceResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ParticipantPropertyReferenceResponse {
		return vs[0].([]ParticipantPropertyReferenceResponse)[vs[1].(int)]
	}).(ParticipantPropertyReferenceResponseOutput)
}

// The definition of a prediction grade.
type PredictionGrades struct {
	// Name of the grade.
	GradeName *string `pulumi:"gradeName"`
	// Maximum score threshold.
	MaxScoreThreshold *int `pulumi:"maxScoreThreshold"`
	// Minimum score threshold.
	MinScoreThreshold *int `pulumi:"minScoreThreshold"`
}

// PredictionGradesInput is an input type that accepts PredictionGradesArgs and PredictionGradesOutput values.
// You can construct a concrete instance of `PredictionGradesInput` via:
//
//          PredictionGradesArgs{...}
type PredictionGradesInput interface {
	pulumi.Input

	ToPredictionGradesOutput() PredictionGradesOutput
	ToPredictionGradesOutputWithContext(context.Context) PredictionGradesOutput
}

// The definition of a prediction grade.
type PredictionGradesArgs struct {
	// Name of the grade.
	GradeName pulumi.StringPtrInput `pulumi:"gradeName"`
	// Maximum score threshold.
	MaxScoreThreshold pulumi.IntPtrInput `pulumi:"maxScoreThreshold"`
	// Minimum score threshold.
	MinScoreThreshold pulumi.IntPtrInput `pulumi:"minScoreThreshold"`
}

func (PredictionGradesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PredictionGrades)(nil)).Elem()
}

func (i PredictionGradesArgs) ToPredictionGradesOutput() PredictionGradesOutput {
	return i.ToPredictionGradesOutputWithContext(context.Background())
}

func (i PredictionGradesArgs) ToPredictionGradesOutputWithContext(ctx context.Context) PredictionGradesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PredictionGradesOutput)
}

// PredictionGradesArrayInput is an input type that accepts PredictionGradesArray and PredictionGradesArrayOutput values.
// You can construct a concrete instance of `PredictionGradesArrayInput` via:
//
//          PredictionGradesArray{ PredictionGradesArgs{...} }
type PredictionGradesArrayInput interface {
	pulumi.Input

	ToPredictionGradesArrayOutput() PredictionGradesArrayOutput
	ToPredictionGradesArrayOutputWithContext(context.Context) PredictionGradesArrayOutput
}

type PredictionGradesArray []PredictionGradesInput

func (PredictionGradesArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PredictionGrades)(nil)).Elem()
}

func (i PredictionGradesArray) ToPredictionGradesArrayOutput() PredictionGradesArrayOutput {
	return i.ToPredictionGradesArrayOutputWithContext(context.Background())
}

func (i PredictionGradesArray) ToPredictionGradesArrayOutputWithContext(ctx context.Context) PredictionGradesArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PredictionGradesArrayOutput)
}

// The definition of a prediction grade.
type PredictionGradesOutput struct{ *pulumi.OutputState }

func (PredictionGradesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PredictionGrades)(nil)).Elem()
}

func (o PredictionGradesOutput) ToPredictionGradesOutput() PredictionGradesOutput {
	return o
}

func (o PredictionGradesOutput) ToPredictionGradesOutputWithContext(ctx context.Context) PredictionGradesOutput {
	return o
}

// Name of the grade.
func (o PredictionGradesOutput) GradeName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PredictionGrades) *string { return v.GradeName }).(pulumi.StringPtrOutput)
}

// Maximum score threshold.
func (o PredictionGradesOutput) MaxScoreThreshold() pulumi.IntPtrOutput {
	return o.ApplyT(func(v PredictionGrades) *int { return v.MaxScoreThreshold }).(pulumi.IntPtrOutput)
}

// Minimum score threshold.
func (o PredictionGradesOutput) MinScoreThreshold() pulumi.IntPtrOutput {
	return o.ApplyT(func(v PredictionGrades) *int { return v.MinScoreThreshold }).(pulumi.IntPtrOutput)
}

type PredictionGradesArrayOutput struct{ *pulumi.OutputState }

func (PredictionGradesArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PredictionGrades)(nil)).Elem()
}

func (o PredictionGradesArrayOutput) ToPredictionGradesArrayOutput() PredictionGradesArrayOutput {
	return o
}

func (o PredictionGradesArrayOutput) ToPredictionGradesArrayOutputWithContext(ctx context.Context) PredictionGradesArrayOutput {
	return o
}

func (o PredictionGradesArrayOutput) Index(i pulumi.IntInput) PredictionGradesOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) PredictionGrades {
		return vs[0].([]PredictionGrades)[vs[1].(int)]
	}).(PredictionGradesOutput)
}

// Definition of the link mapping of prediction.
type PredictionMappings struct {
	// The grade of the link mapping.
	Grade string `pulumi:"grade"`
	// The reason of the link mapping.
	Reason string `pulumi:"reason"`
	// The score of the link mapping.
	Score string `pulumi:"score"`
}

// PredictionMappingsInput is an input type that accepts PredictionMappingsArgs and PredictionMappingsOutput values.
// You can construct a concrete instance of `PredictionMappingsInput` via:
//
//          PredictionMappingsArgs{...}
type PredictionMappingsInput interface {
	pulumi.Input

	ToPredictionMappingsOutput() PredictionMappingsOutput
	ToPredictionMappingsOutputWithContext(context.Context) PredictionMappingsOutput
}

// Definition of the link mapping of prediction.
type PredictionMappingsArgs struct {
	// The grade of the link mapping.
	Grade pulumi.StringInput `pulumi:"grade"`
	// The reason of the link mapping.
	Reason pulumi.StringInput `pulumi:"reason"`
	// The score of the link mapping.
	Score pulumi.StringInput `pulumi:"score"`
}

func (PredictionMappingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PredictionMappings)(nil)).Elem()
}

func (i PredictionMappingsArgs) ToPredictionMappingsOutput() PredictionMappingsOutput {
	return i.ToPredictionMappingsOutputWithContext(context.Background())
}

func (i PredictionMappingsArgs) ToPredictionMappingsOutputWithContext(ctx context.Context) PredictionMappingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PredictionMappingsOutput)
}

func (i PredictionMappingsArgs) ToPredictionMappingsPtrOutput() PredictionMappingsPtrOutput {
	return i.ToPredictionMappingsPtrOutputWithContext(context.Background())
}

func (i PredictionMappingsArgs) ToPredictionMappingsPtrOutputWithContext(ctx context.Context) PredictionMappingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PredictionMappingsOutput).ToPredictionMappingsPtrOutputWithContext(ctx)
}

// PredictionMappingsPtrInput is an input type that accepts PredictionMappingsArgs, PredictionMappingsPtr and PredictionMappingsPtrOutput values.
// You can construct a concrete instance of `PredictionMappingsPtrInput` via:
//
//          PredictionMappingsArgs{...}
//
//  or:
//
//          nil
type PredictionMappingsPtrInput interface {
	pulumi.Input

	ToPredictionMappingsPtrOutput() PredictionMappingsPtrOutput
	ToPredictionMappingsPtrOutputWithContext(context.Context) PredictionMappingsPtrOutput
}

type predictionMappingsPtrType PredictionMappingsArgs

func PredictionMappingsPtr(v *PredictionMappingsArgs) PredictionMappingsPtrInput {
	return (*predictionMappingsPtrType)(v)
}

func (*predictionMappingsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PredictionMappings)(nil)).Elem()
}

func (i *predictionMappingsPtrType) ToPredictionMappingsPtrOutput() PredictionMappingsPtrOutput {
	return i.ToPredictionMappingsPtrOutputWithContext(context.Background())
}

func (i *predictionMappingsPtrType) ToPredictionMappingsPtrOutputWithContext(ctx context.Context) PredictionMappingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PredictionMappingsPtrOutput)
}

// Definition of the link mapping of prediction.
type PredictionMappingsOutput struct{ *pulumi.OutputState }

func (PredictionMappingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PredictionMappings)(nil)).Elem()
}

func (o PredictionMappingsOutput) ToPredictionMappingsOutput() PredictionMappingsOutput {
	return o
}

func (o PredictionMappingsOutput) ToPredictionMappingsOutputWithContext(ctx context.Context) PredictionMappingsOutput {
	return o
}

func (o PredictionMappingsOutput) ToPredictionMappingsPtrOutput() PredictionMappingsPtrOutput {
	return o.ToPredictionMappingsPtrOutputWithContext(context.Background())
}

func (o PredictionMappingsOutput) ToPredictionMappingsPtrOutputWithContext(ctx context.Context) PredictionMappingsPtrOutput {
	return o.ApplyT(func(v PredictionMappings) *PredictionMappings {
		return &v
	}).(PredictionMappingsPtrOutput)
}

// The grade of the link mapping.
func (o PredictionMappingsOutput) Grade() pulumi.StringOutput {
	return o.ApplyT(func(v PredictionMappings) string { return v.Grade }).(pulumi.StringOutput)
}

// The reason of the link mapping.
func (o PredictionMappingsOutput) Reason() pulumi.StringOutput {
	return o.ApplyT(func(v PredictionMappings) string { return v.Reason }).(pulumi.StringOutput)
}

// The score of the link mapping.
func (o PredictionMappingsOutput) Score() pulumi.StringOutput {
	return o.ApplyT(func(v PredictionMappings) string { return v.Score }).(pulumi.StringOutput)
}

type PredictionMappingsPtrOutput struct{ *pulumi.OutputState }

func (PredictionMappingsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PredictionMappings)(nil)).Elem()
}

func (o PredictionMappingsPtrOutput) ToPredictionMappingsPtrOutput() PredictionMappingsPtrOutput {
	return o
}

func (o PredictionMappingsPtrOutput) ToPredictionMappingsPtrOutputWithContext(ctx context.Context) PredictionMappingsPtrOutput {
	return o
}

func (o PredictionMappingsPtrOutput) Elem() PredictionMappingsOutput {
	return o.ApplyT(func(v *PredictionMappings) PredictionMappings { return *v }).(PredictionMappingsOutput)
}

// The grade of the link mapping.
func (o PredictionMappingsPtrOutput) Grade() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PredictionMappings) *string {
		if v == nil {
			return nil
		}
		return &v.Grade
	}).(pulumi.StringPtrOutput)
}

// The reason of the link mapping.
func (o PredictionMappingsPtrOutput) Reason() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PredictionMappings) *string {
		if v == nil {
			return nil
		}
		return &v.Reason
	}).(pulumi.StringPtrOutput)
}

// The score of the link mapping.
func (o PredictionMappingsPtrOutput) Score() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PredictionMappings) *string {
		if v == nil {
			return nil
		}
		return &v.Score
	}).(pulumi.StringPtrOutput)
}

// The prediction definition.
type PredictionResponse struct {
	// Whether do auto analyze.
	AutoAnalyze bool `pulumi:"autoAnalyze"`
	// Description of the prediction.
	Description map[string]string `pulumi:"description"`
	// Display name of the prediction.
	DisplayName map[string]string `pulumi:"displayName"`
	// The prediction grades.
	Grades []PredictionResponseGrades `pulumi:"grades"`
	// Interaction types involved in the prediction.
	InvolvedInteractionTypes []string `pulumi:"involvedInteractionTypes"`
	// KPI types involved in the prediction.
	InvolvedKpiTypes []string `pulumi:"involvedKpiTypes"`
	// Relationships involved in the prediction.
	InvolvedRelationships []string `pulumi:"involvedRelationships"`
	// Definition of the link mapping of prediction.
	Mappings PredictionResponseMappings `pulumi:"mappings"`
	// Negative outcome expression.
	NegativeOutcomeExpression string `pulumi:"negativeOutcomeExpression"`
	// Positive outcome expression.
	PositiveOutcomeExpression string `pulumi:"positiveOutcomeExpression"`
	// Name of the prediction.
	PredictionName *string `pulumi:"predictionName"`
	// Primary profile type.
	PrimaryProfileType string `pulumi:"primaryProfileType"`
	// Provisioning state.
	ProvisioningState string `pulumi:"provisioningState"`
	// Scope expression.
	ScopeExpression string `pulumi:"scopeExpression"`
	// Score label.
	ScoreLabel string `pulumi:"scoreLabel"`
	// System generated entities.
	SystemGeneratedEntities PredictionResponseSystemGeneratedEntities `pulumi:"systemGeneratedEntities"`
	// The hub name.
	TenantId string `pulumi:"tenantId"`
}

// PredictionResponseInput is an input type that accepts PredictionResponseArgs and PredictionResponseOutput values.
// You can construct a concrete instance of `PredictionResponseInput` via:
//
//          PredictionResponseArgs{...}
type PredictionResponseInput interface {
	pulumi.Input

	ToPredictionResponseOutput() PredictionResponseOutput
	ToPredictionResponseOutputWithContext(context.Context) PredictionResponseOutput
}

// The prediction definition.
type PredictionResponseArgs struct {
	// Whether do auto analyze.
	AutoAnalyze pulumi.BoolInput `pulumi:"autoAnalyze"`
	// Description of the prediction.
	Description pulumi.StringMapInput `pulumi:"description"`
	// Display name of the prediction.
	DisplayName pulumi.StringMapInput `pulumi:"displayName"`
	// The prediction grades.
	Grades PredictionResponseGradesArrayInput `pulumi:"grades"`
	// Interaction types involved in the prediction.
	InvolvedInteractionTypes pulumi.StringArrayInput `pulumi:"involvedInteractionTypes"`
	// KPI types involved in the prediction.
	InvolvedKpiTypes pulumi.StringArrayInput `pulumi:"involvedKpiTypes"`
	// Relationships involved in the prediction.
	InvolvedRelationships pulumi.StringArrayInput `pulumi:"involvedRelationships"`
	// Definition of the link mapping of prediction.
	Mappings PredictionResponseMappingsInput `pulumi:"mappings"`
	// Negative outcome expression.
	NegativeOutcomeExpression pulumi.StringInput `pulumi:"negativeOutcomeExpression"`
	// Positive outcome expression.
	PositiveOutcomeExpression pulumi.StringInput `pulumi:"positiveOutcomeExpression"`
	// Name of the prediction.
	PredictionName pulumi.StringPtrInput `pulumi:"predictionName"`
	// Primary profile type.
	PrimaryProfileType pulumi.StringInput `pulumi:"primaryProfileType"`
	// Provisioning state.
	ProvisioningState pulumi.StringInput `pulumi:"provisioningState"`
	// Scope expression.
	ScopeExpression pulumi.StringInput `pulumi:"scopeExpression"`
	// Score label.
	ScoreLabel pulumi.StringInput `pulumi:"scoreLabel"`
	// System generated entities.
	SystemGeneratedEntities PredictionResponseSystemGeneratedEntitiesInput `pulumi:"systemGeneratedEntities"`
	// The hub name.
	TenantId pulumi.StringInput `pulumi:"tenantId"`
}

func (PredictionResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PredictionResponse)(nil)).Elem()
}

func (i PredictionResponseArgs) ToPredictionResponseOutput() PredictionResponseOutput {
	return i.ToPredictionResponseOutputWithContext(context.Background())
}

func (i PredictionResponseArgs) ToPredictionResponseOutputWithContext(ctx context.Context) PredictionResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PredictionResponseOutput)
}

func (i PredictionResponseArgs) ToPredictionResponsePtrOutput() PredictionResponsePtrOutput {
	return i.ToPredictionResponsePtrOutputWithContext(context.Background())
}

func (i PredictionResponseArgs) ToPredictionResponsePtrOutputWithContext(ctx context.Context) PredictionResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PredictionResponseOutput).ToPredictionResponsePtrOutputWithContext(ctx)
}

// PredictionResponsePtrInput is an input type that accepts PredictionResponseArgs, PredictionResponsePtr and PredictionResponsePtrOutput values.
// You can construct a concrete instance of `PredictionResponsePtrInput` via:
//
//          PredictionResponseArgs{...}
//
//  or:
//
//          nil
type PredictionResponsePtrInput interface {
	pulumi.Input

	ToPredictionResponsePtrOutput() PredictionResponsePtrOutput
	ToPredictionResponsePtrOutputWithContext(context.Context) PredictionResponsePtrOutput
}

type predictionResponsePtrType PredictionResponseArgs

func PredictionResponsePtr(v *PredictionResponseArgs) PredictionResponsePtrInput {
	return (*predictionResponsePtrType)(v)
}

func (*predictionResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PredictionResponse)(nil)).Elem()
}

func (i *predictionResponsePtrType) ToPredictionResponsePtrOutput() PredictionResponsePtrOutput {
	return i.ToPredictionResponsePtrOutputWithContext(context.Background())
}

func (i *predictionResponsePtrType) ToPredictionResponsePtrOutputWithContext(ctx context.Context) PredictionResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PredictionResponsePtrOutput)
}

// The prediction definition.
type PredictionResponseOutput struct{ *pulumi.OutputState }

func (PredictionResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PredictionResponse)(nil)).Elem()
}

func (o PredictionResponseOutput) ToPredictionResponseOutput() PredictionResponseOutput {
	return o
}

func (o PredictionResponseOutput) ToPredictionResponseOutputWithContext(ctx context.Context) PredictionResponseOutput {
	return o
}

func (o PredictionResponseOutput) ToPredictionResponsePtrOutput() PredictionResponsePtrOutput {
	return o.ToPredictionResponsePtrOutputWithContext(context.Background())
}

func (o PredictionResponseOutput) ToPredictionResponsePtrOutputWithContext(ctx context.Context) PredictionResponsePtrOutput {
	return o.ApplyT(func(v PredictionResponse) *PredictionResponse {
		return &v
	}).(PredictionResponsePtrOutput)
}

// Whether do auto analyze.
func (o PredictionResponseOutput) AutoAnalyze() pulumi.BoolOutput {
	return o.ApplyT(func(v PredictionResponse) bool { return v.AutoAnalyze }).(pulumi.BoolOutput)
}

// Description of the prediction.
func (o PredictionResponseOutput) Description() pulumi.StringMapOutput {
	return o.ApplyT(func(v PredictionResponse) map[string]string { return v.Description }).(pulumi.StringMapOutput)
}

// Display name of the prediction.
func (o PredictionResponseOutput) DisplayName() pulumi.StringMapOutput {
	return o.ApplyT(func(v PredictionResponse) map[string]string { return v.DisplayName }).(pulumi.StringMapOutput)
}

// The prediction grades.
func (o PredictionResponseOutput) Grades() PredictionResponseGradesArrayOutput {
	return o.ApplyT(func(v PredictionResponse) []PredictionResponseGrades { return v.Grades }).(PredictionResponseGradesArrayOutput)
}

// Interaction types involved in the prediction.
func (o PredictionResponseOutput) InvolvedInteractionTypes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v PredictionResponse) []string { return v.InvolvedInteractionTypes }).(pulumi.StringArrayOutput)
}

// KPI types involved in the prediction.
func (o PredictionResponseOutput) InvolvedKpiTypes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v PredictionResponse) []string { return v.InvolvedKpiTypes }).(pulumi.StringArrayOutput)
}

// Relationships involved in the prediction.
func (o PredictionResponseOutput) InvolvedRelationships() pulumi.StringArrayOutput {
	return o.ApplyT(func(v PredictionResponse) []string { return v.InvolvedRelationships }).(pulumi.StringArrayOutput)
}

// Definition of the link mapping of prediction.
func (o PredictionResponseOutput) Mappings() PredictionResponseMappingsOutput {
	return o.ApplyT(func(v PredictionResponse) PredictionResponseMappings { return v.Mappings }).(PredictionResponseMappingsOutput)
}

// Negative outcome expression.
func (o PredictionResponseOutput) NegativeOutcomeExpression() pulumi.StringOutput {
	return o.ApplyT(func(v PredictionResponse) string { return v.NegativeOutcomeExpression }).(pulumi.StringOutput)
}

// Positive outcome expression.
func (o PredictionResponseOutput) PositiveOutcomeExpression() pulumi.StringOutput {
	return o.ApplyT(func(v PredictionResponse) string { return v.PositiveOutcomeExpression }).(pulumi.StringOutput)
}

// Name of the prediction.
func (o PredictionResponseOutput) PredictionName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PredictionResponse) *string { return v.PredictionName }).(pulumi.StringPtrOutput)
}

// Primary profile type.
func (o PredictionResponseOutput) PrimaryProfileType() pulumi.StringOutput {
	return o.ApplyT(func(v PredictionResponse) string { return v.PrimaryProfileType }).(pulumi.StringOutput)
}

// Provisioning state.
func (o PredictionResponseOutput) ProvisioningState() pulumi.StringOutput {
	return o.ApplyT(func(v PredictionResponse) string { return v.ProvisioningState }).(pulumi.StringOutput)
}

// Scope expression.
func (o PredictionResponseOutput) ScopeExpression() pulumi.StringOutput {
	return o.ApplyT(func(v PredictionResponse) string { return v.ScopeExpression }).(pulumi.StringOutput)
}

// Score label.
func (o PredictionResponseOutput) ScoreLabel() pulumi.StringOutput {
	return o.ApplyT(func(v PredictionResponse) string { return v.ScoreLabel }).(pulumi.StringOutput)
}

// System generated entities.
func (o PredictionResponseOutput) SystemGeneratedEntities() PredictionResponseSystemGeneratedEntitiesOutput {
	return o.ApplyT(func(v PredictionResponse) PredictionResponseSystemGeneratedEntities { return v.SystemGeneratedEntities }).(PredictionResponseSystemGeneratedEntitiesOutput)
}

// The hub name.
func (o PredictionResponseOutput) TenantId() pulumi.StringOutput {
	return o.ApplyT(func(v PredictionResponse) string { return v.TenantId }).(pulumi.StringOutput)
}

type PredictionResponsePtrOutput struct{ *pulumi.OutputState }

func (PredictionResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PredictionResponse)(nil)).Elem()
}

func (o PredictionResponsePtrOutput) ToPredictionResponsePtrOutput() PredictionResponsePtrOutput {
	return o
}

func (o PredictionResponsePtrOutput) ToPredictionResponsePtrOutputWithContext(ctx context.Context) PredictionResponsePtrOutput {
	return o
}

func (o PredictionResponsePtrOutput) Elem() PredictionResponseOutput {
	return o.ApplyT(func(v *PredictionResponse) PredictionResponse { return *v }).(PredictionResponseOutput)
}

// Whether do auto analyze.
func (o PredictionResponsePtrOutput) AutoAnalyze() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *PredictionResponse) *bool {
		if v == nil {
			return nil
		}
		return &v.AutoAnalyze
	}).(pulumi.BoolPtrOutput)
}

// Description of the prediction.
func (o PredictionResponsePtrOutput) Description() pulumi.StringMapOutput {
	return o.ApplyT(func(v *PredictionResponse) map[string]string {
		if v == nil {
			return nil
		}
		return v.Description
	}).(pulumi.StringMapOutput)
}

// Display name of the prediction.
func (o PredictionResponsePtrOutput) DisplayName() pulumi.StringMapOutput {
	return o.ApplyT(func(v *PredictionResponse) map[string]string {
		if v == nil {
			return nil
		}
		return v.DisplayName
	}).(pulumi.StringMapOutput)
}

// The prediction grades.
func (o PredictionResponsePtrOutput) Grades() PredictionResponseGradesArrayOutput {
	return o.ApplyT(func(v *PredictionResponse) []PredictionResponseGrades {
		if v == nil {
			return nil
		}
		return v.Grades
	}).(PredictionResponseGradesArrayOutput)
}

// Interaction types involved in the prediction.
func (o PredictionResponsePtrOutput) InvolvedInteractionTypes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *PredictionResponse) []string {
		if v == nil {
			return nil
		}
		return v.InvolvedInteractionTypes
	}).(pulumi.StringArrayOutput)
}

// KPI types involved in the prediction.
func (o PredictionResponsePtrOutput) InvolvedKpiTypes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *PredictionResponse) []string {
		if v == nil {
			return nil
		}
		return v.InvolvedKpiTypes
	}).(pulumi.StringArrayOutput)
}

// Relationships involved in the prediction.
func (o PredictionResponsePtrOutput) InvolvedRelationships() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *PredictionResponse) []string {
		if v == nil {
			return nil
		}
		return v.InvolvedRelationships
	}).(pulumi.StringArrayOutput)
}

// Definition of the link mapping of prediction.
func (o PredictionResponsePtrOutput) Mappings() PredictionResponseMappingsPtrOutput {
	return o.ApplyT(func(v *PredictionResponse) *PredictionResponseMappings {
		if v == nil {
			return nil
		}
		return &v.Mappings
	}).(PredictionResponseMappingsPtrOutput)
}

// Negative outcome expression.
func (o PredictionResponsePtrOutput) NegativeOutcomeExpression() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PredictionResponse) *string {
		if v == nil {
			return nil
		}
		return &v.NegativeOutcomeExpression
	}).(pulumi.StringPtrOutput)
}

// Positive outcome expression.
func (o PredictionResponsePtrOutput) PositiveOutcomeExpression() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PredictionResponse) *string {
		if v == nil {
			return nil
		}
		return &v.PositiveOutcomeExpression
	}).(pulumi.StringPtrOutput)
}

// Name of the prediction.
func (o PredictionResponsePtrOutput) PredictionName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PredictionResponse) *string {
		if v == nil {
			return nil
		}
		return v.PredictionName
	}).(pulumi.StringPtrOutput)
}

// Primary profile type.
func (o PredictionResponsePtrOutput) PrimaryProfileType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PredictionResponse) *string {
		if v == nil {
			return nil
		}
		return &v.PrimaryProfileType
	}).(pulumi.StringPtrOutput)
}

// Provisioning state.
func (o PredictionResponsePtrOutput) ProvisioningState() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PredictionResponse) *string {
		if v == nil {
			return nil
		}
		return &v.ProvisioningState
	}).(pulumi.StringPtrOutput)
}

// Scope expression.
func (o PredictionResponsePtrOutput) ScopeExpression() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PredictionResponse) *string {
		if v == nil {
			return nil
		}
		return &v.ScopeExpression
	}).(pulumi.StringPtrOutput)
}

// Score label.
func (o PredictionResponsePtrOutput) ScoreLabel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PredictionResponse) *string {
		if v == nil {
			return nil
		}
		return &v.ScoreLabel
	}).(pulumi.StringPtrOutput)
}

// System generated entities.
func (o PredictionResponsePtrOutput) SystemGeneratedEntities() PredictionResponseSystemGeneratedEntitiesPtrOutput {
	return o.ApplyT(func(v *PredictionResponse) *PredictionResponseSystemGeneratedEntities {
		if v == nil {
			return nil
		}
		return &v.SystemGeneratedEntities
	}).(PredictionResponseSystemGeneratedEntitiesPtrOutput)
}

// The hub name.
func (o PredictionResponsePtrOutput) TenantId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PredictionResponse) *string {
		if v == nil {
			return nil
		}
		return &v.TenantId
	}).(pulumi.StringPtrOutput)
}

// The definition of a prediction grade.
type PredictionResponseGrades struct {
	// Name of the grade.
	GradeName *string `pulumi:"gradeName"`
	// Maximum score threshold.
	MaxScoreThreshold *int `pulumi:"maxScoreThreshold"`
	// Minimum score threshold.
	MinScoreThreshold *int `pulumi:"minScoreThreshold"`
}

// PredictionResponseGradesInput is an input type that accepts PredictionResponseGradesArgs and PredictionResponseGradesOutput values.
// You can construct a concrete instance of `PredictionResponseGradesInput` via:
//
//          PredictionResponseGradesArgs{...}
type PredictionResponseGradesInput interface {
	pulumi.Input

	ToPredictionResponseGradesOutput() PredictionResponseGradesOutput
	ToPredictionResponseGradesOutputWithContext(context.Context) PredictionResponseGradesOutput
}

// The definition of a prediction grade.
type PredictionResponseGradesArgs struct {
	// Name of the grade.
	GradeName pulumi.StringPtrInput `pulumi:"gradeName"`
	// Maximum score threshold.
	MaxScoreThreshold pulumi.IntPtrInput `pulumi:"maxScoreThreshold"`
	// Minimum score threshold.
	MinScoreThreshold pulumi.IntPtrInput `pulumi:"minScoreThreshold"`
}

func (PredictionResponseGradesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PredictionResponseGrades)(nil)).Elem()
}

func (i PredictionResponseGradesArgs) ToPredictionResponseGradesOutput() PredictionResponseGradesOutput {
	return i.ToPredictionResponseGradesOutputWithContext(context.Background())
}

func (i PredictionResponseGradesArgs) ToPredictionResponseGradesOutputWithContext(ctx context.Context) PredictionResponseGradesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PredictionResponseGradesOutput)
}

// PredictionResponseGradesArrayInput is an input type that accepts PredictionResponseGradesArray and PredictionResponseGradesArrayOutput values.
// You can construct a concrete instance of `PredictionResponseGradesArrayInput` via:
//
//          PredictionResponseGradesArray{ PredictionResponseGradesArgs{...} }
type PredictionResponseGradesArrayInput interface {
	pulumi.Input

	ToPredictionResponseGradesArrayOutput() PredictionResponseGradesArrayOutput
	ToPredictionResponseGradesArrayOutputWithContext(context.Context) PredictionResponseGradesArrayOutput
}

type PredictionResponseGradesArray []PredictionResponseGradesInput

func (PredictionResponseGradesArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PredictionResponseGrades)(nil)).Elem()
}

func (i PredictionResponseGradesArray) ToPredictionResponseGradesArrayOutput() PredictionResponseGradesArrayOutput {
	return i.ToPredictionResponseGradesArrayOutputWithContext(context.Background())
}

func (i PredictionResponseGradesArray) ToPredictionResponseGradesArrayOutputWithContext(ctx context.Context) PredictionResponseGradesArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PredictionResponseGradesArrayOutput)
}

// The definition of a prediction grade.
type PredictionResponseGradesOutput struct{ *pulumi.OutputState }

func (PredictionResponseGradesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PredictionResponseGrades)(nil)).Elem()
}

func (o PredictionResponseGradesOutput) ToPredictionResponseGradesOutput() PredictionResponseGradesOutput {
	return o
}

func (o PredictionResponseGradesOutput) ToPredictionResponseGradesOutputWithContext(ctx context.Context) PredictionResponseGradesOutput {
	return o
}

// Name of the grade.
func (o PredictionResponseGradesOutput) GradeName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PredictionResponseGrades) *string { return v.GradeName }).(pulumi.StringPtrOutput)
}

// Maximum score threshold.
func (o PredictionResponseGradesOutput) MaxScoreThreshold() pulumi.IntPtrOutput {
	return o.ApplyT(func(v PredictionResponseGrades) *int { return v.MaxScoreThreshold }).(pulumi.IntPtrOutput)
}

// Minimum score threshold.
func (o PredictionResponseGradesOutput) MinScoreThreshold() pulumi.IntPtrOutput {
	return o.ApplyT(func(v PredictionResponseGrades) *int { return v.MinScoreThreshold }).(pulumi.IntPtrOutput)
}

type PredictionResponseGradesArrayOutput struct{ *pulumi.OutputState }

func (PredictionResponseGradesArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PredictionResponseGrades)(nil)).Elem()
}

func (o PredictionResponseGradesArrayOutput) ToPredictionResponseGradesArrayOutput() PredictionResponseGradesArrayOutput {
	return o
}

func (o PredictionResponseGradesArrayOutput) ToPredictionResponseGradesArrayOutputWithContext(ctx context.Context) PredictionResponseGradesArrayOutput {
	return o
}

func (o PredictionResponseGradesArrayOutput) Index(i pulumi.IntInput) PredictionResponseGradesOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) PredictionResponseGrades {
		return vs[0].([]PredictionResponseGrades)[vs[1].(int)]
	}).(PredictionResponseGradesOutput)
}

// Definition of the link mapping of prediction.
type PredictionResponseMappings struct {
	// The grade of the link mapping.
	Grade string `pulumi:"grade"`
	// The reason of the link mapping.
	Reason string `pulumi:"reason"`
	// The score of the link mapping.
	Score string `pulumi:"score"`
}

// PredictionResponseMappingsInput is an input type that accepts PredictionResponseMappingsArgs and PredictionResponseMappingsOutput values.
// You can construct a concrete instance of `PredictionResponseMappingsInput` via:
//
//          PredictionResponseMappingsArgs{...}
type PredictionResponseMappingsInput interface {
	pulumi.Input

	ToPredictionResponseMappingsOutput() PredictionResponseMappingsOutput
	ToPredictionResponseMappingsOutputWithContext(context.Context) PredictionResponseMappingsOutput
}

// Definition of the link mapping of prediction.
type PredictionResponseMappingsArgs struct {
	// The grade of the link mapping.
	Grade pulumi.StringInput `pulumi:"grade"`
	// The reason of the link mapping.
	Reason pulumi.StringInput `pulumi:"reason"`
	// The score of the link mapping.
	Score pulumi.StringInput `pulumi:"score"`
}

func (PredictionResponseMappingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PredictionResponseMappings)(nil)).Elem()
}

func (i PredictionResponseMappingsArgs) ToPredictionResponseMappingsOutput() PredictionResponseMappingsOutput {
	return i.ToPredictionResponseMappingsOutputWithContext(context.Background())
}

func (i PredictionResponseMappingsArgs) ToPredictionResponseMappingsOutputWithContext(ctx context.Context) PredictionResponseMappingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PredictionResponseMappingsOutput)
}

func (i PredictionResponseMappingsArgs) ToPredictionResponseMappingsPtrOutput() PredictionResponseMappingsPtrOutput {
	return i.ToPredictionResponseMappingsPtrOutputWithContext(context.Background())
}

func (i PredictionResponseMappingsArgs) ToPredictionResponseMappingsPtrOutputWithContext(ctx context.Context) PredictionResponseMappingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PredictionResponseMappingsOutput).ToPredictionResponseMappingsPtrOutputWithContext(ctx)
}

// PredictionResponseMappingsPtrInput is an input type that accepts PredictionResponseMappingsArgs, PredictionResponseMappingsPtr and PredictionResponseMappingsPtrOutput values.
// You can construct a concrete instance of `PredictionResponseMappingsPtrInput` via:
//
//          PredictionResponseMappingsArgs{...}
//
//  or:
//
//          nil
type PredictionResponseMappingsPtrInput interface {
	pulumi.Input

	ToPredictionResponseMappingsPtrOutput() PredictionResponseMappingsPtrOutput
	ToPredictionResponseMappingsPtrOutputWithContext(context.Context) PredictionResponseMappingsPtrOutput
}

type predictionResponseMappingsPtrType PredictionResponseMappingsArgs

func PredictionResponseMappingsPtr(v *PredictionResponseMappingsArgs) PredictionResponseMappingsPtrInput {
	return (*predictionResponseMappingsPtrType)(v)
}

func (*predictionResponseMappingsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PredictionResponseMappings)(nil)).Elem()
}

func (i *predictionResponseMappingsPtrType) ToPredictionResponseMappingsPtrOutput() PredictionResponseMappingsPtrOutput {
	return i.ToPredictionResponseMappingsPtrOutputWithContext(context.Background())
}

func (i *predictionResponseMappingsPtrType) ToPredictionResponseMappingsPtrOutputWithContext(ctx context.Context) PredictionResponseMappingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PredictionResponseMappingsPtrOutput)
}

// Definition of the link mapping of prediction.
type PredictionResponseMappingsOutput struct{ *pulumi.OutputState }

func (PredictionResponseMappingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PredictionResponseMappings)(nil)).Elem()
}

func (o PredictionResponseMappingsOutput) ToPredictionResponseMappingsOutput() PredictionResponseMappingsOutput {
	return o
}

func (o PredictionResponseMappingsOutput) ToPredictionResponseMappingsOutputWithContext(ctx context.Context) PredictionResponseMappingsOutput {
	return o
}

func (o PredictionResponseMappingsOutput) ToPredictionResponseMappingsPtrOutput() PredictionResponseMappingsPtrOutput {
	return o.ToPredictionResponseMappingsPtrOutputWithContext(context.Background())
}

func (o PredictionResponseMappingsOutput) ToPredictionResponseMappingsPtrOutputWithContext(ctx context.Context) PredictionResponseMappingsPtrOutput {
	return o.ApplyT(func(v PredictionResponseMappings) *PredictionResponseMappings {
		return &v
	}).(PredictionResponseMappingsPtrOutput)
}

// The grade of the link mapping.
func (o PredictionResponseMappingsOutput) Grade() pulumi.StringOutput {
	return o.ApplyT(func(v PredictionResponseMappings) string { return v.Grade }).(pulumi.StringOutput)
}

// The reason of the link mapping.
func (o PredictionResponseMappingsOutput) Reason() pulumi.StringOutput {
	return o.ApplyT(func(v PredictionResponseMappings) string { return v.Reason }).(pulumi.StringOutput)
}

// The score of the link mapping.
func (o PredictionResponseMappingsOutput) Score() pulumi.StringOutput {
	return o.ApplyT(func(v PredictionResponseMappings) string { return v.Score }).(pulumi.StringOutput)
}

type PredictionResponseMappingsPtrOutput struct{ *pulumi.OutputState }

func (PredictionResponseMappingsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PredictionResponseMappings)(nil)).Elem()
}

func (o PredictionResponseMappingsPtrOutput) ToPredictionResponseMappingsPtrOutput() PredictionResponseMappingsPtrOutput {
	return o
}

func (o PredictionResponseMappingsPtrOutput) ToPredictionResponseMappingsPtrOutputWithContext(ctx context.Context) PredictionResponseMappingsPtrOutput {
	return o
}

func (o PredictionResponseMappingsPtrOutput) Elem() PredictionResponseMappingsOutput {
	return o.ApplyT(func(v *PredictionResponseMappings) PredictionResponseMappings { return *v }).(PredictionResponseMappingsOutput)
}

// The grade of the link mapping.
func (o PredictionResponseMappingsPtrOutput) Grade() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PredictionResponseMappings) *string {
		if v == nil {
			return nil
		}
		return &v.Grade
	}).(pulumi.StringPtrOutput)
}

// The reason of the link mapping.
func (o PredictionResponseMappingsPtrOutput) Reason() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PredictionResponseMappings) *string {
		if v == nil {
			return nil
		}
		return &v.Reason
	}).(pulumi.StringPtrOutput)
}

// The score of the link mapping.
func (o PredictionResponseMappingsPtrOutput) Score() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PredictionResponseMappings) *string {
		if v == nil {
			return nil
		}
		return &v.Score
	}).(pulumi.StringPtrOutput)
}

// System generated entities.
type PredictionResponseSystemGeneratedEntities struct {
	// Generated interaction types.
	GeneratedInteractionTypes []string `pulumi:"generatedInteractionTypes"`
	// Generated KPIs.
	GeneratedKpis map[string]string `pulumi:"generatedKpis"`
	// Generated links.
	GeneratedLinks []string `pulumi:"generatedLinks"`
}

// PredictionResponseSystemGeneratedEntitiesInput is an input type that accepts PredictionResponseSystemGeneratedEntitiesArgs and PredictionResponseSystemGeneratedEntitiesOutput values.
// You can construct a concrete instance of `PredictionResponseSystemGeneratedEntitiesInput` via:
//
//          PredictionResponseSystemGeneratedEntitiesArgs{...}
type PredictionResponseSystemGeneratedEntitiesInput interface {
	pulumi.Input

	ToPredictionResponseSystemGeneratedEntitiesOutput() PredictionResponseSystemGeneratedEntitiesOutput
	ToPredictionResponseSystemGeneratedEntitiesOutputWithContext(context.Context) PredictionResponseSystemGeneratedEntitiesOutput
}

// System generated entities.
type PredictionResponseSystemGeneratedEntitiesArgs struct {
	// Generated interaction types.
	GeneratedInteractionTypes pulumi.StringArrayInput `pulumi:"generatedInteractionTypes"`
	// Generated KPIs.
	GeneratedKpis pulumi.StringMapInput `pulumi:"generatedKpis"`
	// Generated links.
	GeneratedLinks pulumi.StringArrayInput `pulumi:"generatedLinks"`
}

func (PredictionResponseSystemGeneratedEntitiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PredictionResponseSystemGeneratedEntities)(nil)).Elem()
}

func (i PredictionResponseSystemGeneratedEntitiesArgs) ToPredictionResponseSystemGeneratedEntitiesOutput() PredictionResponseSystemGeneratedEntitiesOutput {
	return i.ToPredictionResponseSystemGeneratedEntitiesOutputWithContext(context.Background())
}

func (i PredictionResponseSystemGeneratedEntitiesArgs) ToPredictionResponseSystemGeneratedEntitiesOutputWithContext(ctx context.Context) PredictionResponseSystemGeneratedEntitiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PredictionResponseSystemGeneratedEntitiesOutput)
}

func (i PredictionResponseSystemGeneratedEntitiesArgs) ToPredictionResponseSystemGeneratedEntitiesPtrOutput() PredictionResponseSystemGeneratedEntitiesPtrOutput {
	return i.ToPredictionResponseSystemGeneratedEntitiesPtrOutputWithContext(context.Background())
}

func (i PredictionResponseSystemGeneratedEntitiesArgs) ToPredictionResponseSystemGeneratedEntitiesPtrOutputWithContext(ctx context.Context) PredictionResponseSystemGeneratedEntitiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PredictionResponseSystemGeneratedEntitiesOutput).ToPredictionResponseSystemGeneratedEntitiesPtrOutputWithContext(ctx)
}

// PredictionResponseSystemGeneratedEntitiesPtrInput is an input type that accepts PredictionResponseSystemGeneratedEntitiesArgs, PredictionResponseSystemGeneratedEntitiesPtr and PredictionResponseSystemGeneratedEntitiesPtrOutput values.
// You can construct a concrete instance of `PredictionResponseSystemGeneratedEntitiesPtrInput` via:
//
//          PredictionResponseSystemGeneratedEntitiesArgs{...}
//
//  or:
//
//          nil
type PredictionResponseSystemGeneratedEntitiesPtrInput interface {
	pulumi.Input

	ToPredictionResponseSystemGeneratedEntitiesPtrOutput() PredictionResponseSystemGeneratedEntitiesPtrOutput
	ToPredictionResponseSystemGeneratedEntitiesPtrOutputWithContext(context.Context) PredictionResponseSystemGeneratedEntitiesPtrOutput
}

type predictionResponseSystemGeneratedEntitiesPtrType PredictionResponseSystemGeneratedEntitiesArgs

func PredictionResponseSystemGeneratedEntitiesPtr(v *PredictionResponseSystemGeneratedEntitiesArgs) PredictionResponseSystemGeneratedEntitiesPtrInput {
	return (*predictionResponseSystemGeneratedEntitiesPtrType)(v)
}

func (*predictionResponseSystemGeneratedEntitiesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PredictionResponseSystemGeneratedEntities)(nil)).Elem()
}

func (i *predictionResponseSystemGeneratedEntitiesPtrType) ToPredictionResponseSystemGeneratedEntitiesPtrOutput() PredictionResponseSystemGeneratedEntitiesPtrOutput {
	return i.ToPredictionResponseSystemGeneratedEntitiesPtrOutputWithContext(context.Background())
}

func (i *predictionResponseSystemGeneratedEntitiesPtrType) ToPredictionResponseSystemGeneratedEntitiesPtrOutputWithContext(ctx context.Context) PredictionResponseSystemGeneratedEntitiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PredictionResponseSystemGeneratedEntitiesPtrOutput)
}

// System generated entities.
type PredictionResponseSystemGeneratedEntitiesOutput struct{ *pulumi.OutputState }

func (PredictionResponseSystemGeneratedEntitiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PredictionResponseSystemGeneratedEntities)(nil)).Elem()
}

func (o PredictionResponseSystemGeneratedEntitiesOutput) ToPredictionResponseSystemGeneratedEntitiesOutput() PredictionResponseSystemGeneratedEntitiesOutput {
	return o
}

func (o PredictionResponseSystemGeneratedEntitiesOutput) ToPredictionResponseSystemGeneratedEntitiesOutputWithContext(ctx context.Context) PredictionResponseSystemGeneratedEntitiesOutput {
	return o
}

func (o PredictionResponseSystemGeneratedEntitiesOutput) ToPredictionResponseSystemGeneratedEntitiesPtrOutput() PredictionResponseSystemGeneratedEntitiesPtrOutput {
	return o.ToPredictionResponseSystemGeneratedEntitiesPtrOutputWithContext(context.Background())
}

func (o PredictionResponseSystemGeneratedEntitiesOutput) ToPredictionResponseSystemGeneratedEntitiesPtrOutputWithContext(ctx context.Context) PredictionResponseSystemGeneratedEntitiesPtrOutput {
	return o.ApplyT(func(v PredictionResponseSystemGeneratedEntities) *PredictionResponseSystemGeneratedEntities {
		return &v
	}).(PredictionResponseSystemGeneratedEntitiesPtrOutput)
}

// Generated interaction types.
func (o PredictionResponseSystemGeneratedEntitiesOutput) GeneratedInteractionTypes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v PredictionResponseSystemGeneratedEntities) []string { return v.GeneratedInteractionTypes }).(pulumi.StringArrayOutput)
}

// Generated KPIs.
func (o PredictionResponseSystemGeneratedEntitiesOutput) GeneratedKpis() pulumi.StringMapOutput {
	return o.ApplyT(func(v PredictionResponseSystemGeneratedEntities) map[string]string { return v.GeneratedKpis }).(pulumi.StringMapOutput)
}

// Generated links.
func (o PredictionResponseSystemGeneratedEntitiesOutput) GeneratedLinks() pulumi.StringArrayOutput {
	return o.ApplyT(func(v PredictionResponseSystemGeneratedEntities) []string { return v.GeneratedLinks }).(pulumi.StringArrayOutput)
}

type PredictionResponseSystemGeneratedEntitiesPtrOutput struct{ *pulumi.OutputState }

func (PredictionResponseSystemGeneratedEntitiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PredictionResponseSystemGeneratedEntities)(nil)).Elem()
}

func (o PredictionResponseSystemGeneratedEntitiesPtrOutput) ToPredictionResponseSystemGeneratedEntitiesPtrOutput() PredictionResponseSystemGeneratedEntitiesPtrOutput {
	return o
}

func (o PredictionResponseSystemGeneratedEntitiesPtrOutput) ToPredictionResponseSystemGeneratedEntitiesPtrOutputWithContext(ctx context.Context) PredictionResponseSystemGeneratedEntitiesPtrOutput {
	return o
}

func (o PredictionResponseSystemGeneratedEntitiesPtrOutput) Elem() PredictionResponseSystemGeneratedEntitiesOutput {
	return o.ApplyT(func(v *PredictionResponseSystemGeneratedEntities) PredictionResponseSystemGeneratedEntities {
		return *v
	}).(PredictionResponseSystemGeneratedEntitiesOutput)
}

// Generated interaction types.
func (o PredictionResponseSystemGeneratedEntitiesPtrOutput) GeneratedInteractionTypes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *PredictionResponseSystemGeneratedEntities) []string {
		if v == nil {
			return nil
		}
		return v.GeneratedInteractionTypes
	}).(pulumi.StringArrayOutput)
}

// Generated KPIs.
func (o PredictionResponseSystemGeneratedEntitiesPtrOutput) GeneratedKpis() pulumi.StringMapOutput {
	return o.ApplyT(func(v *PredictionResponseSystemGeneratedEntities) map[string]string {
		if v == nil {
			return nil
		}
		return v.GeneratedKpis
	}).(pulumi.StringMapOutput)
}

// Generated links.
func (o PredictionResponseSystemGeneratedEntitiesPtrOutput) GeneratedLinks() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *PredictionResponseSystemGeneratedEntities) []string {
		if v == nil {
			return nil
		}
		return v.GeneratedLinks
	}).(pulumi.StringArrayOutput)
}

// Valid enum values in case of an enum property.
type ProfileEnumValidValuesFormat struct {
	// Localized names of the enum member.
	LocalizedValueNames map[string]string `pulumi:"localizedValueNames"`
	// The integer value of the enum member.
	Value *int `pulumi:"value"`
}

// ProfileEnumValidValuesFormatInput is an input type that accepts ProfileEnumValidValuesFormatArgs and ProfileEnumValidValuesFormatOutput values.
// You can construct a concrete instance of `ProfileEnumValidValuesFormatInput` via:
//
//          ProfileEnumValidValuesFormatArgs{...}
type ProfileEnumValidValuesFormatInput interface {
	pulumi.Input

	ToProfileEnumValidValuesFormatOutput() ProfileEnumValidValuesFormatOutput
	ToProfileEnumValidValuesFormatOutputWithContext(context.Context) ProfileEnumValidValuesFormatOutput
}

// Valid enum values in case of an enum property.
type ProfileEnumValidValuesFormatArgs struct {
	// Localized names of the enum member.
	LocalizedValueNames pulumi.StringMapInput `pulumi:"localizedValueNames"`
	// The integer value of the enum member.
	Value pulumi.IntPtrInput `pulumi:"value"`
}

func (ProfileEnumValidValuesFormatArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ProfileEnumValidValuesFormat)(nil)).Elem()
}

func (i ProfileEnumValidValuesFormatArgs) ToProfileEnumValidValuesFormatOutput() ProfileEnumValidValuesFormatOutput {
	return i.ToProfileEnumValidValuesFormatOutputWithContext(context.Background())
}

func (i ProfileEnumValidValuesFormatArgs) ToProfileEnumValidValuesFormatOutputWithContext(ctx context.Context) ProfileEnumValidValuesFormatOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProfileEnumValidValuesFormatOutput)
}

// ProfileEnumValidValuesFormatArrayInput is an input type that accepts ProfileEnumValidValuesFormatArray and ProfileEnumValidValuesFormatArrayOutput values.
// You can construct a concrete instance of `ProfileEnumValidValuesFormatArrayInput` via:
//
//          ProfileEnumValidValuesFormatArray{ ProfileEnumValidValuesFormatArgs{...} }
type ProfileEnumValidValuesFormatArrayInput interface {
	pulumi.Input

	ToProfileEnumValidValuesFormatArrayOutput() ProfileEnumValidValuesFormatArrayOutput
	ToProfileEnumValidValuesFormatArrayOutputWithContext(context.Context) ProfileEnumValidValuesFormatArrayOutput
}

type ProfileEnumValidValuesFormatArray []ProfileEnumValidValuesFormatInput

func (ProfileEnumValidValuesFormatArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ProfileEnumValidValuesFormat)(nil)).Elem()
}

func (i ProfileEnumValidValuesFormatArray) ToProfileEnumValidValuesFormatArrayOutput() ProfileEnumValidValuesFormatArrayOutput {
	return i.ToProfileEnumValidValuesFormatArrayOutputWithContext(context.Background())
}

func (i ProfileEnumValidValuesFormatArray) ToProfileEnumValidValuesFormatArrayOutputWithContext(ctx context.Context) ProfileEnumValidValuesFormatArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProfileEnumValidValuesFormatArrayOutput)
}

// Valid enum values in case of an enum property.
type ProfileEnumValidValuesFormatOutput struct{ *pulumi.OutputState }

func (ProfileEnumValidValuesFormatOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ProfileEnumValidValuesFormat)(nil)).Elem()
}

func (o ProfileEnumValidValuesFormatOutput) ToProfileEnumValidValuesFormatOutput() ProfileEnumValidValuesFormatOutput {
	return o
}

func (o ProfileEnumValidValuesFormatOutput) ToProfileEnumValidValuesFormatOutputWithContext(ctx context.Context) ProfileEnumValidValuesFormatOutput {
	return o
}

// Localized names of the enum member.
func (o ProfileEnumValidValuesFormatOutput) LocalizedValueNames() pulumi.StringMapOutput {
	return o.ApplyT(func(v ProfileEnumValidValuesFormat) map[string]string { return v.LocalizedValueNames }).(pulumi.StringMapOutput)
}

// The integer value of the enum member.
func (o ProfileEnumValidValuesFormatOutput) Value() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ProfileEnumValidValuesFormat) *int { return v.Value }).(pulumi.IntPtrOutput)
}

type ProfileEnumValidValuesFormatArrayOutput struct{ *pulumi.OutputState }

func (ProfileEnumValidValuesFormatArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ProfileEnumValidValuesFormat)(nil)).Elem()
}

func (o ProfileEnumValidValuesFormatArrayOutput) ToProfileEnumValidValuesFormatArrayOutput() ProfileEnumValidValuesFormatArrayOutput {
	return o
}

func (o ProfileEnumValidValuesFormatArrayOutput) ToProfileEnumValidValuesFormatArrayOutputWithContext(ctx context.Context) ProfileEnumValidValuesFormatArrayOutput {
	return o
}

func (o ProfileEnumValidValuesFormatArrayOutput) Index(i pulumi.IntInput) ProfileEnumValidValuesFormatOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ProfileEnumValidValuesFormat {
		return vs[0].([]ProfileEnumValidValuesFormat)[vs[1].(int)]
	}).(ProfileEnumValidValuesFormatOutput)
}

// Valid enum values in case of an enum property.
type ProfileEnumValidValuesFormatResponse struct {
	// Localized names of the enum member.
	LocalizedValueNames map[string]string `pulumi:"localizedValueNames"`
	// The integer value of the enum member.
	Value *int `pulumi:"value"`
}

// ProfileEnumValidValuesFormatResponseInput is an input type that accepts ProfileEnumValidValuesFormatResponseArgs and ProfileEnumValidValuesFormatResponseOutput values.
// You can construct a concrete instance of `ProfileEnumValidValuesFormatResponseInput` via:
//
//          ProfileEnumValidValuesFormatResponseArgs{...}
type ProfileEnumValidValuesFormatResponseInput interface {
	pulumi.Input

	ToProfileEnumValidValuesFormatResponseOutput() ProfileEnumValidValuesFormatResponseOutput
	ToProfileEnumValidValuesFormatResponseOutputWithContext(context.Context) ProfileEnumValidValuesFormatResponseOutput
}

// Valid enum values in case of an enum property.
type ProfileEnumValidValuesFormatResponseArgs struct {
	// Localized names of the enum member.
	LocalizedValueNames pulumi.StringMapInput `pulumi:"localizedValueNames"`
	// The integer value of the enum member.
	Value pulumi.IntPtrInput `pulumi:"value"`
}

func (ProfileEnumValidValuesFormatResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ProfileEnumValidValuesFormatResponse)(nil)).Elem()
}

func (i ProfileEnumValidValuesFormatResponseArgs) ToProfileEnumValidValuesFormatResponseOutput() ProfileEnumValidValuesFormatResponseOutput {
	return i.ToProfileEnumValidValuesFormatResponseOutputWithContext(context.Background())
}

func (i ProfileEnumValidValuesFormatResponseArgs) ToProfileEnumValidValuesFormatResponseOutputWithContext(ctx context.Context) ProfileEnumValidValuesFormatResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProfileEnumValidValuesFormatResponseOutput)
}

// ProfileEnumValidValuesFormatResponseArrayInput is an input type that accepts ProfileEnumValidValuesFormatResponseArray and ProfileEnumValidValuesFormatResponseArrayOutput values.
// You can construct a concrete instance of `ProfileEnumValidValuesFormatResponseArrayInput` via:
//
//          ProfileEnumValidValuesFormatResponseArray{ ProfileEnumValidValuesFormatResponseArgs{...} }
type ProfileEnumValidValuesFormatResponseArrayInput interface {
	pulumi.Input

	ToProfileEnumValidValuesFormatResponseArrayOutput() ProfileEnumValidValuesFormatResponseArrayOutput
	ToProfileEnumValidValuesFormatResponseArrayOutputWithContext(context.Context) ProfileEnumValidValuesFormatResponseArrayOutput
}

type ProfileEnumValidValuesFormatResponseArray []ProfileEnumValidValuesFormatResponseInput

func (ProfileEnumValidValuesFormatResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ProfileEnumValidValuesFormatResponse)(nil)).Elem()
}

func (i ProfileEnumValidValuesFormatResponseArray) ToProfileEnumValidValuesFormatResponseArrayOutput() ProfileEnumValidValuesFormatResponseArrayOutput {
	return i.ToProfileEnumValidValuesFormatResponseArrayOutputWithContext(context.Background())
}

func (i ProfileEnumValidValuesFormatResponseArray) ToProfileEnumValidValuesFormatResponseArrayOutputWithContext(ctx context.Context) ProfileEnumValidValuesFormatResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProfileEnumValidValuesFormatResponseArrayOutput)
}

// Valid enum values in case of an enum property.
type ProfileEnumValidValuesFormatResponseOutput struct{ *pulumi.OutputState }

func (ProfileEnumValidValuesFormatResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ProfileEnumValidValuesFormatResponse)(nil)).Elem()
}

func (o ProfileEnumValidValuesFormatResponseOutput) ToProfileEnumValidValuesFormatResponseOutput() ProfileEnumValidValuesFormatResponseOutput {
	return o
}

func (o ProfileEnumValidValuesFormatResponseOutput) ToProfileEnumValidValuesFormatResponseOutputWithContext(ctx context.Context) ProfileEnumValidValuesFormatResponseOutput {
	return o
}

// Localized names of the enum member.
func (o ProfileEnumValidValuesFormatResponseOutput) LocalizedValueNames() pulumi.StringMapOutput {
	return o.ApplyT(func(v ProfileEnumValidValuesFormatResponse) map[string]string { return v.LocalizedValueNames }).(pulumi.StringMapOutput)
}

// The integer value of the enum member.
func (o ProfileEnumValidValuesFormatResponseOutput) Value() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ProfileEnumValidValuesFormatResponse) *int { return v.Value }).(pulumi.IntPtrOutput)
}

type ProfileEnumValidValuesFormatResponseArrayOutput struct{ *pulumi.OutputState }

func (ProfileEnumValidValuesFormatResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ProfileEnumValidValuesFormatResponse)(nil)).Elem()
}

func (o ProfileEnumValidValuesFormatResponseArrayOutput) ToProfileEnumValidValuesFormatResponseArrayOutput() ProfileEnumValidValuesFormatResponseArrayOutput {
	return o
}

func (o ProfileEnumValidValuesFormatResponseArrayOutput) ToProfileEnumValidValuesFormatResponseArrayOutputWithContext(ctx context.Context) ProfileEnumValidValuesFormatResponseArrayOutput {
	return o
}

func (o ProfileEnumValidValuesFormatResponseArrayOutput) Index(i pulumi.IntInput) ProfileEnumValidValuesFormatResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ProfileEnumValidValuesFormatResponse {
		return vs[0].([]ProfileEnumValidValuesFormatResponse)[vs[1].(int)]
	}).(ProfileEnumValidValuesFormatResponseOutput)
}

// The profile type definition.
type ProfileTypeDefinitionResponse struct {
	// The api entity set name. This becomes the odata entity set name for the entity Type being referred in this object.
	ApiEntitySetName *string `pulumi:"apiEntitySetName"`
	// The attributes for the Type.
	Attributes map[string][]string `pulumi:"attributes"`
	// Localized descriptions for the property.
	Description map[string]string `pulumi:"description"`
	// Localized display names for the property.
	DisplayName map[string]string `pulumi:"displayName"`
	// Type of entity.
	EntityType *string `pulumi:"entityType"`
	// The properties of the Profile.
	Fields []PropertyDefinitionResponse `pulumi:"fields"`
	// The instance count.
	InstancesCount *int `pulumi:"instancesCount"`
	// Large Image associated with the Property or EntityType.
	LargeImage *string `pulumi:"largeImage"`
	// The last changed time for the type definition.
	LastChangedUtc string `pulumi:"lastChangedUtc"`
	// Any custom localized attributes for the Type.
	LocalizedAttributes map[string]map[string]string `pulumi:"localizedAttributes"`
	// Medium Image associated with the Property or EntityType.
	MediumImage *string `pulumi:"mediumImage"`
	// Provisioning state.
	ProvisioningState string `pulumi:"provisioningState"`
	// The schema org link. This helps ACI identify and suggest semantic models.
	SchemaItemTypeLink *string `pulumi:"schemaItemTypeLink"`
	// Small Image associated with the Property or EntityType.
	SmallImage *string `pulumi:"smallImage"`
	// The strong IDs.
	StrongIds []StrongIdResponse `pulumi:"strongIds"`
	// The hub name.
	TenantId string `pulumi:"tenantId"`
	// The timestamp property name. Represents the time when the interaction or profile update happened.
	TimestampFieldName *string `pulumi:"timestampFieldName"`
	// The name of the entity.
	TypeName *string `pulumi:"typeName"`
}

// ProfileTypeDefinitionResponseInput is an input type that accepts ProfileTypeDefinitionResponseArgs and ProfileTypeDefinitionResponseOutput values.
// You can construct a concrete instance of `ProfileTypeDefinitionResponseInput` via:
//
//          ProfileTypeDefinitionResponseArgs{...}
type ProfileTypeDefinitionResponseInput interface {
	pulumi.Input

	ToProfileTypeDefinitionResponseOutput() ProfileTypeDefinitionResponseOutput
	ToProfileTypeDefinitionResponseOutputWithContext(context.Context) ProfileTypeDefinitionResponseOutput
}

// The profile type definition.
type ProfileTypeDefinitionResponseArgs struct {
	// The api entity set name. This becomes the odata entity set name for the entity Type being referred in this object.
	ApiEntitySetName pulumi.StringPtrInput `pulumi:"apiEntitySetName"`
	// The attributes for the Type.
	Attributes pulumi.StringArrayMapInput `pulumi:"attributes"`
	// Localized descriptions for the property.
	Description pulumi.StringMapInput `pulumi:"description"`
	// Localized display names for the property.
	DisplayName pulumi.StringMapInput `pulumi:"displayName"`
	// Type of entity.
	EntityType pulumi.StringPtrInput `pulumi:"entityType"`
	// The properties of the Profile.
	Fields PropertyDefinitionResponseArrayInput `pulumi:"fields"`
	// The instance count.
	InstancesCount pulumi.IntPtrInput `pulumi:"instancesCount"`
	// Large Image associated with the Property or EntityType.
	LargeImage pulumi.StringPtrInput `pulumi:"largeImage"`
	// The last changed time for the type definition.
	LastChangedUtc pulumi.StringInput `pulumi:"lastChangedUtc"`
	// Any custom localized attributes for the Type.
	LocalizedAttributes pulumi.StringMapMapInput `pulumi:"localizedAttributes"`
	// Medium Image associated with the Property or EntityType.
	MediumImage pulumi.StringPtrInput `pulumi:"mediumImage"`
	// Provisioning state.
	ProvisioningState pulumi.StringInput `pulumi:"provisioningState"`
	// The schema org link. This helps ACI identify and suggest semantic models.
	SchemaItemTypeLink pulumi.StringPtrInput `pulumi:"schemaItemTypeLink"`
	// Small Image associated with the Property or EntityType.
	SmallImage pulumi.StringPtrInput `pulumi:"smallImage"`
	// The strong IDs.
	StrongIds StrongIdResponseArrayInput `pulumi:"strongIds"`
	// The hub name.
	TenantId pulumi.StringInput `pulumi:"tenantId"`
	// The timestamp property name. Represents the time when the interaction or profile update happened.
	TimestampFieldName pulumi.StringPtrInput `pulumi:"timestampFieldName"`
	// The name of the entity.
	TypeName pulumi.StringPtrInput `pulumi:"typeName"`
}

func (ProfileTypeDefinitionResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ProfileTypeDefinitionResponse)(nil)).Elem()
}

func (i ProfileTypeDefinitionResponseArgs) ToProfileTypeDefinitionResponseOutput() ProfileTypeDefinitionResponseOutput {
	return i.ToProfileTypeDefinitionResponseOutputWithContext(context.Background())
}

func (i ProfileTypeDefinitionResponseArgs) ToProfileTypeDefinitionResponseOutputWithContext(ctx context.Context) ProfileTypeDefinitionResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProfileTypeDefinitionResponseOutput)
}

func (i ProfileTypeDefinitionResponseArgs) ToProfileTypeDefinitionResponsePtrOutput() ProfileTypeDefinitionResponsePtrOutput {
	return i.ToProfileTypeDefinitionResponsePtrOutputWithContext(context.Background())
}

func (i ProfileTypeDefinitionResponseArgs) ToProfileTypeDefinitionResponsePtrOutputWithContext(ctx context.Context) ProfileTypeDefinitionResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProfileTypeDefinitionResponseOutput).ToProfileTypeDefinitionResponsePtrOutputWithContext(ctx)
}

// ProfileTypeDefinitionResponsePtrInput is an input type that accepts ProfileTypeDefinitionResponseArgs, ProfileTypeDefinitionResponsePtr and ProfileTypeDefinitionResponsePtrOutput values.
// You can construct a concrete instance of `ProfileTypeDefinitionResponsePtrInput` via:
//
//          ProfileTypeDefinitionResponseArgs{...}
//
//  or:
//
//          nil
type ProfileTypeDefinitionResponsePtrInput interface {
	pulumi.Input

	ToProfileTypeDefinitionResponsePtrOutput() ProfileTypeDefinitionResponsePtrOutput
	ToProfileTypeDefinitionResponsePtrOutputWithContext(context.Context) ProfileTypeDefinitionResponsePtrOutput
}

type profileTypeDefinitionResponsePtrType ProfileTypeDefinitionResponseArgs

func ProfileTypeDefinitionResponsePtr(v *ProfileTypeDefinitionResponseArgs) ProfileTypeDefinitionResponsePtrInput {
	return (*profileTypeDefinitionResponsePtrType)(v)
}

func (*profileTypeDefinitionResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ProfileTypeDefinitionResponse)(nil)).Elem()
}

func (i *profileTypeDefinitionResponsePtrType) ToProfileTypeDefinitionResponsePtrOutput() ProfileTypeDefinitionResponsePtrOutput {
	return i.ToProfileTypeDefinitionResponsePtrOutputWithContext(context.Background())
}

func (i *profileTypeDefinitionResponsePtrType) ToProfileTypeDefinitionResponsePtrOutputWithContext(ctx context.Context) ProfileTypeDefinitionResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProfileTypeDefinitionResponsePtrOutput)
}

// The profile type definition.
type ProfileTypeDefinitionResponseOutput struct{ *pulumi.OutputState }

func (ProfileTypeDefinitionResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ProfileTypeDefinitionResponse)(nil)).Elem()
}

func (o ProfileTypeDefinitionResponseOutput) ToProfileTypeDefinitionResponseOutput() ProfileTypeDefinitionResponseOutput {
	return o
}

func (o ProfileTypeDefinitionResponseOutput) ToProfileTypeDefinitionResponseOutputWithContext(ctx context.Context) ProfileTypeDefinitionResponseOutput {
	return o
}

func (o ProfileTypeDefinitionResponseOutput) ToProfileTypeDefinitionResponsePtrOutput() ProfileTypeDefinitionResponsePtrOutput {
	return o.ToProfileTypeDefinitionResponsePtrOutputWithContext(context.Background())
}

func (o ProfileTypeDefinitionResponseOutput) ToProfileTypeDefinitionResponsePtrOutputWithContext(ctx context.Context) ProfileTypeDefinitionResponsePtrOutput {
	return o.ApplyT(func(v ProfileTypeDefinitionResponse) *ProfileTypeDefinitionResponse {
		return &v
	}).(ProfileTypeDefinitionResponsePtrOutput)
}

// The api entity set name. This becomes the odata entity set name for the entity Type being referred in this object.
func (o ProfileTypeDefinitionResponseOutput) ApiEntitySetName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProfileTypeDefinitionResponse) *string { return v.ApiEntitySetName }).(pulumi.StringPtrOutput)
}

// The attributes for the Type.
func (o ProfileTypeDefinitionResponseOutput) Attributes() pulumi.StringArrayMapOutput {
	return o.ApplyT(func(v ProfileTypeDefinitionResponse) map[string][]string { return v.Attributes }).(pulumi.StringArrayMapOutput)
}

// Localized descriptions for the property.
func (o ProfileTypeDefinitionResponseOutput) Description() pulumi.StringMapOutput {
	return o.ApplyT(func(v ProfileTypeDefinitionResponse) map[string]string { return v.Description }).(pulumi.StringMapOutput)
}

// Localized display names for the property.
func (o ProfileTypeDefinitionResponseOutput) DisplayName() pulumi.StringMapOutput {
	return o.ApplyT(func(v ProfileTypeDefinitionResponse) map[string]string { return v.DisplayName }).(pulumi.StringMapOutput)
}

// Type of entity.
func (o ProfileTypeDefinitionResponseOutput) EntityType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProfileTypeDefinitionResponse) *string { return v.EntityType }).(pulumi.StringPtrOutput)
}

// The properties of the Profile.
func (o ProfileTypeDefinitionResponseOutput) Fields() PropertyDefinitionResponseArrayOutput {
	return o.ApplyT(func(v ProfileTypeDefinitionResponse) []PropertyDefinitionResponse { return v.Fields }).(PropertyDefinitionResponseArrayOutput)
}

// The instance count.
func (o ProfileTypeDefinitionResponseOutput) InstancesCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ProfileTypeDefinitionResponse) *int { return v.InstancesCount }).(pulumi.IntPtrOutput)
}

// Large Image associated with the Property or EntityType.
func (o ProfileTypeDefinitionResponseOutput) LargeImage() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProfileTypeDefinitionResponse) *string { return v.LargeImage }).(pulumi.StringPtrOutput)
}

// The last changed time for the type definition.
func (o ProfileTypeDefinitionResponseOutput) LastChangedUtc() pulumi.StringOutput {
	return o.ApplyT(func(v ProfileTypeDefinitionResponse) string { return v.LastChangedUtc }).(pulumi.StringOutput)
}

// Any custom localized attributes for the Type.
func (o ProfileTypeDefinitionResponseOutput) LocalizedAttributes() pulumi.StringMapMapOutput {
	return o.ApplyT(func(v ProfileTypeDefinitionResponse) map[string]map[string]string { return v.LocalizedAttributes }).(pulumi.StringMapMapOutput)
}

// Medium Image associated with the Property or EntityType.
func (o ProfileTypeDefinitionResponseOutput) MediumImage() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProfileTypeDefinitionResponse) *string { return v.MediumImage }).(pulumi.StringPtrOutput)
}

// Provisioning state.
func (o ProfileTypeDefinitionResponseOutput) ProvisioningState() pulumi.StringOutput {
	return o.ApplyT(func(v ProfileTypeDefinitionResponse) string { return v.ProvisioningState }).(pulumi.StringOutput)
}

// The schema org link. This helps ACI identify and suggest semantic models.
func (o ProfileTypeDefinitionResponseOutput) SchemaItemTypeLink() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProfileTypeDefinitionResponse) *string { return v.SchemaItemTypeLink }).(pulumi.StringPtrOutput)
}

// Small Image associated with the Property or EntityType.
func (o ProfileTypeDefinitionResponseOutput) SmallImage() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProfileTypeDefinitionResponse) *string { return v.SmallImage }).(pulumi.StringPtrOutput)
}

// The strong IDs.
func (o ProfileTypeDefinitionResponseOutput) StrongIds() StrongIdResponseArrayOutput {
	return o.ApplyT(func(v ProfileTypeDefinitionResponse) []StrongIdResponse { return v.StrongIds }).(StrongIdResponseArrayOutput)
}

// The hub name.
func (o ProfileTypeDefinitionResponseOutput) TenantId() pulumi.StringOutput {
	return o.ApplyT(func(v ProfileTypeDefinitionResponse) string { return v.TenantId }).(pulumi.StringOutput)
}

// The timestamp property name. Represents the time when the interaction or profile update happened.
func (o ProfileTypeDefinitionResponseOutput) TimestampFieldName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProfileTypeDefinitionResponse) *string { return v.TimestampFieldName }).(pulumi.StringPtrOutput)
}

// The name of the entity.
func (o ProfileTypeDefinitionResponseOutput) TypeName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProfileTypeDefinitionResponse) *string { return v.TypeName }).(pulumi.StringPtrOutput)
}

type ProfileTypeDefinitionResponsePtrOutput struct{ *pulumi.OutputState }

func (ProfileTypeDefinitionResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ProfileTypeDefinitionResponse)(nil)).Elem()
}

func (o ProfileTypeDefinitionResponsePtrOutput) ToProfileTypeDefinitionResponsePtrOutput() ProfileTypeDefinitionResponsePtrOutput {
	return o
}

func (o ProfileTypeDefinitionResponsePtrOutput) ToProfileTypeDefinitionResponsePtrOutputWithContext(ctx context.Context) ProfileTypeDefinitionResponsePtrOutput {
	return o
}

func (o ProfileTypeDefinitionResponsePtrOutput) Elem() ProfileTypeDefinitionResponseOutput {
	return o.ApplyT(func(v *ProfileTypeDefinitionResponse) ProfileTypeDefinitionResponse { return *v }).(ProfileTypeDefinitionResponseOutput)
}

// The api entity set name. This becomes the odata entity set name for the entity Type being referred in this object.
func (o ProfileTypeDefinitionResponsePtrOutput) ApiEntitySetName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProfileTypeDefinitionResponse) *string {
		if v == nil {
			return nil
		}
		return v.ApiEntitySetName
	}).(pulumi.StringPtrOutput)
}

// The attributes for the Type.
func (o ProfileTypeDefinitionResponsePtrOutput) Attributes() pulumi.StringArrayMapOutput {
	return o.ApplyT(func(v *ProfileTypeDefinitionResponse) map[string][]string {
		if v == nil {
			return nil
		}
		return v.Attributes
	}).(pulumi.StringArrayMapOutput)
}

// Localized descriptions for the property.
func (o ProfileTypeDefinitionResponsePtrOutput) Description() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ProfileTypeDefinitionResponse) map[string]string {
		if v == nil {
			return nil
		}
		return v.Description
	}).(pulumi.StringMapOutput)
}

// Localized display names for the property.
func (o ProfileTypeDefinitionResponsePtrOutput) DisplayName() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ProfileTypeDefinitionResponse) map[string]string {
		if v == nil {
			return nil
		}
		return v.DisplayName
	}).(pulumi.StringMapOutput)
}

// Type of entity.
func (o ProfileTypeDefinitionResponsePtrOutput) EntityType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProfileTypeDefinitionResponse) *string {
		if v == nil {
			return nil
		}
		return v.EntityType
	}).(pulumi.StringPtrOutput)
}

// The properties of the Profile.
func (o ProfileTypeDefinitionResponsePtrOutput) Fields() PropertyDefinitionResponseArrayOutput {
	return o.ApplyT(func(v *ProfileTypeDefinitionResponse) []PropertyDefinitionResponse {
		if v == nil {
			return nil
		}
		return v.Fields
	}).(PropertyDefinitionResponseArrayOutput)
}

// The instance count.
func (o ProfileTypeDefinitionResponsePtrOutput) InstancesCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ProfileTypeDefinitionResponse) *int {
		if v == nil {
			return nil
		}
		return v.InstancesCount
	}).(pulumi.IntPtrOutput)
}

// Large Image associated with the Property or EntityType.
func (o ProfileTypeDefinitionResponsePtrOutput) LargeImage() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProfileTypeDefinitionResponse) *string {
		if v == nil {
			return nil
		}
		return v.LargeImage
	}).(pulumi.StringPtrOutput)
}

// The last changed time for the type definition.
func (o ProfileTypeDefinitionResponsePtrOutput) LastChangedUtc() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProfileTypeDefinitionResponse) *string {
		if v == nil {
			return nil
		}
		return &v.LastChangedUtc
	}).(pulumi.StringPtrOutput)
}

// Any custom localized attributes for the Type.
func (o ProfileTypeDefinitionResponsePtrOutput) LocalizedAttributes() pulumi.StringMapMapOutput {
	return o.ApplyT(func(v *ProfileTypeDefinitionResponse) map[string]map[string]string {
		if v == nil {
			return nil
		}
		return v.LocalizedAttributes
	}).(pulumi.StringMapMapOutput)
}

// Medium Image associated with the Property or EntityType.
func (o ProfileTypeDefinitionResponsePtrOutput) MediumImage() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProfileTypeDefinitionResponse) *string {
		if v == nil {
			return nil
		}
		return v.MediumImage
	}).(pulumi.StringPtrOutput)
}

// Provisioning state.
func (o ProfileTypeDefinitionResponsePtrOutput) ProvisioningState() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProfileTypeDefinitionResponse) *string {
		if v == nil {
			return nil
		}
		return &v.ProvisioningState
	}).(pulumi.StringPtrOutput)
}

// The schema org link. This helps ACI identify and suggest semantic models.
func (o ProfileTypeDefinitionResponsePtrOutput) SchemaItemTypeLink() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProfileTypeDefinitionResponse) *string {
		if v == nil {
			return nil
		}
		return v.SchemaItemTypeLink
	}).(pulumi.StringPtrOutput)
}

// Small Image associated with the Property or EntityType.
func (o ProfileTypeDefinitionResponsePtrOutput) SmallImage() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProfileTypeDefinitionResponse) *string {
		if v == nil {
			return nil
		}
		return v.SmallImage
	}).(pulumi.StringPtrOutput)
}

// The strong IDs.
func (o ProfileTypeDefinitionResponsePtrOutput) StrongIds() StrongIdResponseArrayOutput {
	return o.ApplyT(func(v *ProfileTypeDefinitionResponse) []StrongIdResponse {
		if v == nil {
			return nil
		}
		return v.StrongIds
	}).(StrongIdResponseArrayOutput)
}

// The hub name.
func (o ProfileTypeDefinitionResponsePtrOutput) TenantId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProfileTypeDefinitionResponse) *string {
		if v == nil {
			return nil
		}
		return &v.TenantId
	}).(pulumi.StringPtrOutput)
}

// The timestamp property name. Represents the time when the interaction or profile update happened.
func (o ProfileTypeDefinitionResponsePtrOutput) TimestampFieldName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProfileTypeDefinitionResponse) *string {
		if v == nil {
			return nil
		}
		return v.TimestampFieldName
	}).(pulumi.StringPtrOutput)
}

// The name of the entity.
func (o ProfileTypeDefinitionResponsePtrOutput) TypeName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProfileTypeDefinitionResponse) *string {
		if v == nil {
			return nil
		}
		return v.TypeName
	}).(pulumi.StringPtrOutput)
}

// Property definition.
type PropertyDefinition struct {
	// Array value separator for properties with isArray set.
	ArrayValueSeparator *string `pulumi:"arrayValueSeparator"`
	// Describes valid values for an enum property.
	EnumValidValues []ProfileEnumValidValuesFormat `pulumi:"enumValidValues"`
	// Name of the property.
	FieldName string `pulumi:"fieldName"`
	// Type of the property.
	FieldType string `pulumi:"fieldType"`
	// Indicates if the property is actually an array of the fieldType above on the data api.
	IsArray *bool `pulumi:"isArray"`
	// Whether property is available in graph or not.
	IsAvailableInGraph *bool `pulumi:"isAvailableInGraph"`
	// Indicates if the property is an enum.
	IsEnum *bool `pulumi:"isEnum"`
	// Indicates if the property is an flag enum.
	IsFlagEnum *bool `pulumi:"isFlagEnum"`
	// Whether the property is an Image.
	IsImage *bool `pulumi:"isImage"`
	// Whether the property is a localized string.
	IsLocalizedString *bool `pulumi:"isLocalizedString"`
	// Whether the property is a name or a part of name.
	IsName *bool `pulumi:"isName"`
	// Whether property value is required on instances, IsRequired field only for Interaction. Profile Instance will not check for required field.
	IsRequired *bool `pulumi:"isRequired"`
	// Max length of string. Used only if type is string.
	MaxLength *int `pulumi:"maxLength"`
	// The ID associated with the property.
	PropertyId *string `pulumi:"propertyId"`
	// URL encoded schema.org item prop link for the property.
	SchemaItemPropLink *string `pulumi:"schemaItemPropLink"`
}

// PropertyDefinitionInput is an input type that accepts PropertyDefinitionArgs and PropertyDefinitionOutput values.
// You can construct a concrete instance of `PropertyDefinitionInput` via:
//
//          PropertyDefinitionArgs{...}
type PropertyDefinitionInput interface {
	pulumi.Input

	ToPropertyDefinitionOutput() PropertyDefinitionOutput
	ToPropertyDefinitionOutputWithContext(context.Context) PropertyDefinitionOutput
}

// Property definition.
type PropertyDefinitionArgs struct {
	// Array value separator for properties with isArray set.
	ArrayValueSeparator pulumi.StringPtrInput `pulumi:"arrayValueSeparator"`
	// Describes valid values for an enum property.
	EnumValidValues ProfileEnumValidValuesFormatArrayInput `pulumi:"enumValidValues"`
	// Name of the property.
	FieldName pulumi.StringInput `pulumi:"fieldName"`
	// Type of the property.
	FieldType pulumi.StringInput `pulumi:"fieldType"`
	// Indicates if the property is actually an array of the fieldType above on the data api.
	IsArray pulumi.BoolPtrInput `pulumi:"isArray"`
	// Whether property is available in graph or not.
	IsAvailableInGraph pulumi.BoolPtrInput `pulumi:"isAvailableInGraph"`
	// Indicates if the property is an enum.
	IsEnum pulumi.BoolPtrInput `pulumi:"isEnum"`
	// Indicates if the property is an flag enum.
	IsFlagEnum pulumi.BoolPtrInput `pulumi:"isFlagEnum"`
	// Whether the property is an Image.
	IsImage pulumi.BoolPtrInput `pulumi:"isImage"`
	// Whether the property is a localized string.
	IsLocalizedString pulumi.BoolPtrInput `pulumi:"isLocalizedString"`
	// Whether the property is a name or a part of name.
	IsName pulumi.BoolPtrInput `pulumi:"isName"`
	// Whether property value is required on instances, IsRequired field only for Interaction. Profile Instance will not check for required field.
	IsRequired pulumi.BoolPtrInput `pulumi:"isRequired"`
	// Max length of string. Used only if type is string.
	MaxLength pulumi.IntPtrInput `pulumi:"maxLength"`
	// The ID associated with the property.
	PropertyId pulumi.StringPtrInput `pulumi:"propertyId"`
	// URL encoded schema.org item prop link for the property.
	SchemaItemPropLink pulumi.StringPtrInput `pulumi:"schemaItemPropLink"`
}

func (PropertyDefinitionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PropertyDefinition)(nil)).Elem()
}

func (i PropertyDefinitionArgs) ToPropertyDefinitionOutput() PropertyDefinitionOutput {
	return i.ToPropertyDefinitionOutputWithContext(context.Background())
}

func (i PropertyDefinitionArgs) ToPropertyDefinitionOutputWithContext(ctx context.Context) PropertyDefinitionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PropertyDefinitionOutput)
}

// PropertyDefinitionArrayInput is an input type that accepts PropertyDefinitionArray and PropertyDefinitionArrayOutput values.
// You can construct a concrete instance of `PropertyDefinitionArrayInput` via:
//
//          PropertyDefinitionArray{ PropertyDefinitionArgs{...} }
type PropertyDefinitionArrayInput interface {
	pulumi.Input

	ToPropertyDefinitionArrayOutput() PropertyDefinitionArrayOutput
	ToPropertyDefinitionArrayOutputWithContext(context.Context) PropertyDefinitionArrayOutput
}

type PropertyDefinitionArray []PropertyDefinitionInput

func (PropertyDefinitionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PropertyDefinition)(nil)).Elem()
}

func (i PropertyDefinitionArray) ToPropertyDefinitionArrayOutput() PropertyDefinitionArrayOutput {
	return i.ToPropertyDefinitionArrayOutputWithContext(context.Background())
}

func (i PropertyDefinitionArray) ToPropertyDefinitionArrayOutputWithContext(ctx context.Context) PropertyDefinitionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PropertyDefinitionArrayOutput)
}

// Property definition.
type PropertyDefinitionOutput struct{ *pulumi.OutputState }

func (PropertyDefinitionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PropertyDefinition)(nil)).Elem()
}

func (o PropertyDefinitionOutput) ToPropertyDefinitionOutput() PropertyDefinitionOutput {
	return o
}

func (o PropertyDefinitionOutput) ToPropertyDefinitionOutputWithContext(ctx context.Context) PropertyDefinitionOutput {
	return o
}

// Array value separator for properties with isArray set.
func (o PropertyDefinitionOutput) ArrayValueSeparator() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PropertyDefinition) *string { return v.ArrayValueSeparator }).(pulumi.StringPtrOutput)
}

// Describes valid values for an enum property.
func (o PropertyDefinitionOutput) EnumValidValues() ProfileEnumValidValuesFormatArrayOutput {
	return o.ApplyT(func(v PropertyDefinition) []ProfileEnumValidValuesFormat { return v.EnumValidValues }).(ProfileEnumValidValuesFormatArrayOutput)
}

// Name of the property.
func (o PropertyDefinitionOutput) FieldName() pulumi.StringOutput {
	return o.ApplyT(func(v PropertyDefinition) string { return v.FieldName }).(pulumi.StringOutput)
}

// Type of the property.
func (o PropertyDefinitionOutput) FieldType() pulumi.StringOutput {
	return o.ApplyT(func(v PropertyDefinition) string { return v.FieldType }).(pulumi.StringOutput)
}

// Indicates if the property is actually an array of the fieldType above on the data api.
func (o PropertyDefinitionOutput) IsArray() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v PropertyDefinition) *bool { return v.IsArray }).(pulumi.BoolPtrOutput)
}

// Whether property is available in graph or not.
func (o PropertyDefinitionOutput) IsAvailableInGraph() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v PropertyDefinition) *bool { return v.IsAvailableInGraph }).(pulumi.BoolPtrOutput)
}

// Indicates if the property is an enum.
func (o PropertyDefinitionOutput) IsEnum() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v PropertyDefinition) *bool { return v.IsEnum }).(pulumi.BoolPtrOutput)
}

// Indicates if the property is an flag enum.
func (o PropertyDefinitionOutput) IsFlagEnum() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v PropertyDefinition) *bool { return v.IsFlagEnum }).(pulumi.BoolPtrOutput)
}

// Whether the property is an Image.
func (o PropertyDefinitionOutput) IsImage() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v PropertyDefinition) *bool { return v.IsImage }).(pulumi.BoolPtrOutput)
}

// Whether the property is a localized string.
func (o PropertyDefinitionOutput) IsLocalizedString() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v PropertyDefinition) *bool { return v.IsLocalizedString }).(pulumi.BoolPtrOutput)
}

// Whether the property is a name or a part of name.
func (o PropertyDefinitionOutput) IsName() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v PropertyDefinition) *bool { return v.IsName }).(pulumi.BoolPtrOutput)
}

// Whether property value is required on instances, IsRequired field only for Interaction. Profile Instance will not check for required field.
func (o PropertyDefinitionOutput) IsRequired() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v PropertyDefinition) *bool { return v.IsRequired }).(pulumi.BoolPtrOutput)
}

// Max length of string. Used only if type is string.
func (o PropertyDefinitionOutput) MaxLength() pulumi.IntPtrOutput {
	return o.ApplyT(func(v PropertyDefinition) *int { return v.MaxLength }).(pulumi.IntPtrOutput)
}

// The ID associated with the property.
func (o PropertyDefinitionOutput) PropertyId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PropertyDefinition) *string { return v.PropertyId }).(pulumi.StringPtrOutput)
}

// URL encoded schema.org item prop link for the property.
func (o PropertyDefinitionOutput) SchemaItemPropLink() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PropertyDefinition) *string { return v.SchemaItemPropLink }).(pulumi.StringPtrOutput)
}

type PropertyDefinitionArrayOutput struct{ *pulumi.OutputState }

func (PropertyDefinitionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PropertyDefinition)(nil)).Elem()
}

func (o PropertyDefinitionArrayOutput) ToPropertyDefinitionArrayOutput() PropertyDefinitionArrayOutput {
	return o
}

func (o PropertyDefinitionArrayOutput) ToPropertyDefinitionArrayOutputWithContext(ctx context.Context) PropertyDefinitionArrayOutput {
	return o
}

func (o PropertyDefinitionArrayOutput) Index(i pulumi.IntInput) PropertyDefinitionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) PropertyDefinition {
		return vs[0].([]PropertyDefinition)[vs[1].(int)]
	}).(PropertyDefinitionOutput)
}

// Property definition.
type PropertyDefinitionResponse struct {
	// Array value separator for properties with isArray set.
	ArrayValueSeparator *string `pulumi:"arrayValueSeparator"`
	// This is specific to interactions modeled as activities. Data sources are used to determine where data is stored and also in precedence rules.
	DataSourcePrecedenceRules []DataSourcePrecedenceResponse `pulumi:"dataSourcePrecedenceRules"`
	// Describes valid values for an enum property.
	EnumValidValues []ProfileEnumValidValuesFormatResponse `pulumi:"enumValidValues"`
	// Name of the property.
	FieldName string `pulumi:"fieldName"`
	// Type of the property.
	FieldType string `pulumi:"fieldType"`
	// Indicates if the property is actually an array of the fieldType above on the data api.
	IsArray *bool `pulumi:"isArray"`
	// Whether property is available in graph or not.
	IsAvailableInGraph *bool `pulumi:"isAvailableInGraph"`
	// Indicates if the property is an enum.
	IsEnum *bool `pulumi:"isEnum"`
	// Indicates if the property is an flag enum.
	IsFlagEnum *bool `pulumi:"isFlagEnum"`
	// Whether the property is an Image.
	IsImage *bool `pulumi:"isImage"`
	// Whether the property is a localized string.
	IsLocalizedString *bool `pulumi:"isLocalizedString"`
	// Whether the property is a name or a part of name.
	IsName *bool `pulumi:"isName"`
	// Whether property value is required on instances, IsRequired field only for Interaction. Profile Instance will not check for required field.
	IsRequired *bool `pulumi:"isRequired"`
	// Max length of string. Used only if type is string.
	MaxLength *int `pulumi:"maxLength"`
	// The ID associated with the property.
	PropertyId *string `pulumi:"propertyId"`
	// URL encoded schema.org item prop link for the property.
	SchemaItemPropLink *string `pulumi:"schemaItemPropLink"`
}

// PropertyDefinitionResponseInput is an input type that accepts PropertyDefinitionResponseArgs and PropertyDefinitionResponseOutput values.
// You can construct a concrete instance of `PropertyDefinitionResponseInput` via:
//
//          PropertyDefinitionResponseArgs{...}
type PropertyDefinitionResponseInput interface {
	pulumi.Input

	ToPropertyDefinitionResponseOutput() PropertyDefinitionResponseOutput
	ToPropertyDefinitionResponseOutputWithContext(context.Context) PropertyDefinitionResponseOutput
}

// Property definition.
type PropertyDefinitionResponseArgs struct {
	// Array value separator for properties with isArray set.
	ArrayValueSeparator pulumi.StringPtrInput `pulumi:"arrayValueSeparator"`
	// This is specific to interactions modeled as activities. Data sources are used to determine where data is stored and also in precedence rules.
	DataSourcePrecedenceRules DataSourcePrecedenceResponseArrayInput `pulumi:"dataSourcePrecedenceRules"`
	// Describes valid values for an enum property.
	EnumValidValues ProfileEnumValidValuesFormatResponseArrayInput `pulumi:"enumValidValues"`
	// Name of the property.
	FieldName pulumi.StringInput `pulumi:"fieldName"`
	// Type of the property.
	FieldType pulumi.StringInput `pulumi:"fieldType"`
	// Indicates if the property is actually an array of the fieldType above on the data api.
	IsArray pulumi.BoolPtrInput `pulumi:"isArray"`
	// Whether property is available in graph or not.
	IsAvailableInGraph pulumi.BoolPtrInput `pulumi:"isAvailableInGraph"`
	// Indicates if the property is an enum.
	IsEnum pulumi.BoolPtrInput `pulumi:"isEnum"`
	// Indicates if the property is an flag enum.
	IsFlagEnum pulumi.BoolPtrInput `pulumi:"isFlagEnum"`
	// Whether the property is an Image.
	IsImage pulumi.BoolPtrInput `pulumi:"isImage"`
	// Whether the property is a localized string.
	IsLocalizedString pulumi.BoolPtrInput `pulumi:"isLocalizedString"`
	// Whether the property is a name or a part of name.
	IsName pulumi.BoolPtrInput `pulumi:"isName"`
	// Whether property value is required on instances, IsRequired field only for Interaction. Profile Instance will not check for required field.
	IsRequired pulumi.BoolPtrInput `pulumi:"isRequired"`
	// Max length of string. Used only if type is string.
	MaxLength pulumi.IntPtrInput `pulumi:"maxLength"`
	// The ID associated with the property.
	PropertyId pulumi.StringPtrInput `pulumi:"propertyId"`
	// URL encoded schema.org item prop link for the property.
	SchemaItemPropLink pulumi.StringPtrInput `pulumi:"schemaItemPropLink"`
}

func (PropertyDefinitionResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PropertyDefinitionResponse)(nil)).Elem()
}

func (i PropertyDefinitionResponseArgs) ToPropertyDefinitionResponseOutput() PropertyDefinitionResponseOutput {
	return i.ToPropertyDefinitionResponseOutputWithContext(context.Background())
}

func (i PropertyDefinitionResponseArgs) ToPropertyDefinitionResponseOutputWithContext(ctx context.Context) PropertyDefinitionResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PropertyDefinitionResponseOutput)
}

// PropertyDefinitionResponseArrayInput is an input type that accepts PropertyDefinitionResponseArray and PropertyDefinitionResponseArrayOutput values.
// You can construct a concrete instance of `PropertyDefinitionResponseArrayInput` via:
//
//          PropertyDefinitionResponseArray{ PropertyDefinitionResponseArgs{...} }
type PropertyDefinitionResponseArrayInput interface {
	pulumi.Input

	ToPropertyDefinitionResponseArrayOutput() PropertyDefinitionResponseArrayOutput
	ToPropertyDefinitionResponseArrayOutputWithContext(context.Context) PropertyDefinitionResponseArrayOutput
}

type PropertyDefinitionResponseArray []PropertyDefinitionResponseInput

func (PropertyDefinitionResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PropertyDefinitionResponse)(nil)).Elem()
}

func (i PropertyDefinitionResponseArray) ToPropertyDefinitionResponseArrayOutput() PropertyDefinitionResponseArrayOutput {
	return i.ToPropertyDefinitionResponseArrayOutputWithContext(context.Background())
}

func (i PropertyDefinitionResponseArray) ToPropertyDefinitionResponseArrayOutputWithContext(ctx context.Context) PropertyDefinitionResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PropertyDefinitionResponseArrayOutput)
}

// Property definition.
type PropertyDefinitionResponseOutput struct{ *pulumi.OutputState }

func (PropertyDefinitionResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PropertyDefinitionResponse)(nil)).Elem()
}

func (o PropertyDefinitionResponseOutput) ToPropertyDefinitionResponseOutput() PropertyDefinitionResponseOutput {
	return o
}

func (o PropertyDefinitionResponseOutput) ToPropertyDefinitionResponseOutputWithContext(ctx context.Context) PropertyDefinitionResponseOutput {
	return o
}

// Array value separator for properties with isArray set.
func (o PropertyDefinitionResponseOutput) ArrayValueSeparator() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PropertyDefinitionResponse) *string { return v.ArrayValueSeparator }).(pulumi.StringPtrOutput)
}

// This is specific to interactions modeled as activities. Data sources are used to determine where data is stored and also in precedence rules.
func (o PropertyDefinitionResponseOutput) DataSourcePrecedenceRules() DataSourcePrecedenceResponseArrayOutput {
	return o.ApplyT(func(v PropertyDefinitionResponse) []DataSourcePrecedenceResponse { return v.DataSourcePrecedenceRules }).(DataSourcePrecedenceResponseArrayOutput)
}

// Describes valid values for an enum property.
func (o PropertyDefinitionResponseOutput) EnumValidValues() ProfileEnumValidValuesFormatResponseArrayOutput {
	return o.ApplyT(func(v PropertyDefinitionResponse) []ProfileEnumValidValuesFormatResponse { return v.EnumValidValues }).(ProfileEnumValidValuesFormatResponseArrayOutput)
}

// Name of the property.
func (o PropertyDefinitionResponseOutput) FieldName() pulumi.StringOutput {
	return o.ApplyT(func(v PropertyDefinitionResponse) string { return v.FieldName }).(pulumi.StringOutput)
}

// Type of the property.
func (o PropertyDefinitionResponseOutput) FieldType() pulumi.StringOutput {
	return o.ApplyT(func(v PropertyDefinitionResponse) string { return v.FieldType }).(pulumi.StringOutput)
}

// Indicates if the property is actually an array of the fieldType above on the data api.
func (o PropertyDefinitionResponseOutput) IsArray() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v PropertyDefinitionResponse) *bool { return v.IsArray }).(pulumi.BoolPtrOutput)
}

// Whether property is available in graph or not.
func (o PropertyDefinitionResponseOutput) IsAvailableInGraph() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v PropertyDefinitionResponse) *bool { return v.IsAvailableInGraph }).(pulumi.BoolPtrOutput)
}

// Indicates if the property is an enum.
func (o PropertyDefinitionResponseOutput) IsEnum() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v PropertyDefinitionResponse) *bool { return v.IsEnum }).(pulumi.BoolPtrOutput)
}

// Indicates if the property is an flag enum.
func (o PropertyDefinitionResponseOutput) IsFlagEnum() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v PropertyDefinitionResponse) *bool { return v.IsFlagEnum }).(pulumi.BoolPtrOutput)
}

// Whether the property is an Image.
func (o PropertyDefinitionResponseOutput) IsImage() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v PropertyDefinitionResponse) *bool { return v.IsImage }).(pulumi.BoolPtrOutput)
}

// Whether the property is a localized string.
func (o PropertyDefinitionResponseOutput) IsLocalizedString() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v PropertyDefinitionResponse) *bool { return v.IsLocalizedString }).(pulumi.BoolPtrOutput)
}

// Whether the property is a name or a part of name.
func (o PropertyDefinitionResponseOutput) IsName() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v PropertyDefinitionResponse) *bool { return v.IsName }).(pulumi.BoolPtrOutput)
}

// Whether property value is required on instances, IsRequired field only for Interaction. Profile Instance will not check for required field.
func (o PropertyDefinitionResponseOutput) IsRequired() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v PropertyDefinitionResponse) *bool { return v.IsRequired }).(pulumi.BoolPtrOutput)
}

// Max length of string. Used only if type is string.
func (o PropertyDefinitionResponseOutput) MaxLength() pulumi.IntPtrOutput {
	return o.ApplyT(func(v PropertyDefinitionResponse) *int { return v.MaxLength }).(pulumi.IntPtrOutput)
}

// The ID associated with the property.
func (o PropertyDefinitionResponseOutput) PropertyId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PropertyDefinitionResponse) *string { return v.PropertyId }).(pulumi.StringPtrOutput)
}

// URL encoded schema.org item prop link for the property.
func (o PropertyDefinitionResponseOutput) SchemaItemPropLink() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PropertyDefinitionResponse) *string { return v.SchemaItemPropLink }).(pulumi.StringPtrOutput)
}

type PropertyDefinitionResponseArrayOutput struct{ *pulumi.OutputState }

func (PropertyDefinitionResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PropertyDefinitionResponse)(nil)).Elem()
}

func (o PropertyDefinitionResponseArrayOutput) ToPropertyDefinitionResponseArrayOutput() PropertyDefinitionResponseArrayOutput {
	return o
}

func (o PropertyDefinitionResponseArrayOutput) ToPropertyDefinitionResponseArrayOutputWithContext(ctx context.Context) PropertyDefinitionResponseArrayOutput {
	return o
}

func (o PropertyDefinitionResponseArrayOutput) Index(i pulumi.IntInput) PropertyDefinitionResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) PropertyDefinitionResponse {
		return vs[0].([]PropertyDefinitionResponse)[vs[1].(int)]
	}).(PropertyDefinitionResponseOutput)
}

// The definition of Relationship.
type RelationshipDefinitionResponse struct {
	// The Relationship Cardinality.
	Cardinality *string `pulumi:"cardinality"`
	// Localized descriptions for the Relationship.
	Description map[string]string `pulumi:"description"`
	// Localized display name for the Relationship.
	DisplayName map[string]string `pulumi:"displayName"`
	// The expiry date time in UTC.
	ExpiryDateTimeUtc *string `pulumi:"expiryDateTimeUtc"`
	// The properties of the Relationship.
	Fields []PropertyDefinitionResponse `pulumi:"fields"`
	// Optional property to be used to map fields in profile to their strong ids in related profile.
	LookupMappings []RelationshipTypeMappingResponse `pulumi:"lookupMappings"`
	// Profile type.
	ProfileType string `pulumi:"profileType"`
	// Provisioning state.
	ProvisioningState string `pulumi:"provisioningState"`
	// Related profile being referenced.
	RelatedProfileType string `pulumi:"relatedProfileType"`
	// The relationship guid id.
	RelationshipGuidId string `pulumi:"relationshipGuidId"`
	// The Relationship name.
	RelationshipName string `pulumi:"relationshipName"`
	// The hub name.
	TenantId string `pulumi:"tenantId"`
}

// RelationshipDefinitionResponseInput is an input type that accepts RelationshipDefinitionResponseArgs and RelationshipDefinitionResponseOutput values.
// You can construct a concrete instance of `RelationshipDefinitionResponseInput` via:
//
//          RelationshipDefinitionResponseArgs{...}
type RelationshipDefinitionResponseInput interface {
	pulumi.Input

	ToRelationshipDefinitionResponseOutput() RelationshipDefinitionResponseOutput
	ToRelationshipDefinitionResponseOutputWithContext(context.Context) RelationshipDefinitionResponseOutput
}

// The definition of Relationship.
type RelationshipDefinitionResponseArgs struct {
	// The Relationship Cardinality.
	Cardinality pulumi.StringPtrInput `pulumi:"cardinality"`
	// Localized descriptions for the Relationship.
	Description pulumi.StringMapInput `pulumi:"description"`
	// Localized display name for the Relationship.
	DisplayName pulumi.StringMapInput `pulumi:"displayName"`
	// The expiry date time in UTC.
	ExpiryDateTimeUtc pulumi.StringPtrInput `pulumi:"expiryDateTimeUtc"`
	// The properties of the Relationship.
	Fields PropertyDefinitionResponseArrayInput `pulumi:"fields"`
	// Optional property to be used to map fields in profile to their strong ids in related profile.
	LookupMappings RelationshipTypeMappingResponseArrayInput `pulumi:"lookupMappings"`
	// Profile type.
	ProfileType pulumi.StringInput `pulumi:"profileType"`
	// Provisioning state.
	ProvisioningState pulumi.StringInput `pulumi:"provisioningState"`
	// Related profile being referenced.
	RelatedProfileType pulumi.StringInput `pulumi:"relatedProfileType"`
	// The relationship guid id.
	RelationshipGuidId pulumi.StringInput `pulumi:"relationshipGuidId"`
	// The Relationship name.
	RelationshipName pulumi.StringInput `pulumi:"relationshipName"`
	// The hub name.
	TenantId pulumi.StringInput `pulumi:"tenantId"`
}

func (RelationshipDefinitionResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RelationshipDefinitionResponse)(nil)).Elem()
}

func (i RelationshipDefinitionResponseArgs) ToRelationshipDefinitionResponseOutput() RelationshipDefinitionResponseOutput {
	return i.ToRelationshipDefinitionResponseOutputWithContext(context.Background())
}

func (i RelationshipDefinitionResponseArgs) ToRelationshipDefinitionResponseOutputWithContext(ctx context.Context) RelationshipDefinitionResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RelationshipDefinitionResponseOutput)
}

func (i RelationshipDefinitionResponseArgs) ToRelationshipDefinitionResponsePtrOutput() RelationshipDefinitionResponsePtrOutput {
	return i.ToRelationshipDefinitionResponsePtrOutputWithContext(context.Background())
}

func (i RelationshipDefinitionResponseArgs) ToRelationshipDefinitionResponsePtrOutputWithContext(ctx context.Context) RelationshipDefinitionResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RelationshipDefinitionResponseOutput).ToRelationshipDefinitionResponsePtrOutputWithContext(ctx)
}

// RelationshipDefinitionResponsePtrInput is an input type that accepts RelationshipDefinitionResponseArgs, RelationshipDefinitionResponsePtr and RelationshipDefinitionResponsePtrOutput values.
// You can construct a concrete instance of `RelationshipDefinitionResponsePtrInput` via:
//
//          RelationshipDefinitionResponseArgs{...}
//
//  or:
//
//          nil
type RelationshipDefinitionResponsePtrInput interface {
	pulumi.Input

	ToRelationshipDefinitionResponsePtrOutput() RelationshipDefinitionResponsePtrOutput
	ToRelationshipDefinitionResponsePtrOutputWithContext(context.Context) RelationshipDefinitionResponsePtrOutput
}

type relationshipDefinitionResponsePtrType RelationshipDefinitionResponseArgs

func RelationshipDefinitionResponsePtr(v *RelationshipDefinitionResponseArgs) RelationshipDefinitionResponsePtrInput {
	return (*relationshipDefinitionResponsePtrType)(v)
}

func (*relationshipDefinitionResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RelationshipDefinitionResponse)(nil)).Elem()
}

func (i *relationshipDefinitionResponsePtrType) ToRelationshipDefinitionResponsePtrOutput() RelationshipDefinitionResponsePtrOutput {
	return i.ToRelationshipDefinitionResponsePtrOutputWithContext(context.Background())
}

func (i *relationshipDefinitionResponsePtrType) ToRelationshipDefinitionResponsePtrOutputWithContext(ctx context.Context) RelationshipDefinitionResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RelationshipDefinitionResponsePtrOutput)
}

// The definition of Relationship.
type RelationshipDefinitionResponseOutput struct{ *pulumi.OutputState }

func (RelationshipDefinitionResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RelationshipDefinitionResponse)(nil)).Elem()
}

func (o RelationshipDefinitionResponseOutput) ToRelationshipDefinitionResponseOutput() RelationshipDefinitionResponseOutput {
	return o
}

func (o RelationshipDefinitionResponseOutput) ToRelationshipDefinitionResponseOutputWithContext(ctx context.Context) RelationshipDefinitionResponseOutput {
	return o
}

func (o RelationshipDefinitionResponseOutput) ToRelationshipDefinitionResponsePtrOutput() RelationshipDefinitionResponsePtrOutput {
	return o.ToRelationshipDefinitionResponsePtrOutputWithContext(context.Background())
}

func (o RelationshipDefinitionResponseOutput) ToRelationshipDefinitionResponsePtrOutputWithContext(ctx context.Context) RelationshipDefinitionResponsePtrOutput {
	return o.ApplyT(func(v RelationshipDefinitionResponse) *RelationshipDefinitionResponse {
		return &v
	}).(RelationshipDefinitionResponsePtrOutput)
}

// The Relationship Cardinality.
func (o RelationshipDefinitionResponseOutput) Cardinality() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RelationshipDefinitionResponse) *string { return v.Cardinality }).(pulumi.StringPtrOutput)
}

// Localized descriptions for the Relationship.
func (o RelationshipDefinitionResponseOutput) Description() pulumi.StringMapOutput {
	return o.ApplyT(func(v RelationshipDefinitionResponse) map[string]string { return v.Description }).(pulumi.StringMapOutput)
}

// Localized display name for the Relationship.
func (o RelationshipDefinitionResponseOutput) DisplayName() pulumi.StringMapOutput {
	return o.ApplyT(func(v RelationshipDefinitionResponse) map[string]string { return v.DisplayName }).(pulumi.StringMapOutput)
}

// The expiry date time in UTC.
func (o RelationshipDefinitionResponseOutput) ExpiryDateTimeUtc() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RelationshipDefinitionResponse) *string { return v.ExpiryDateTimeUtc }).(pulumi.StringPtrOutput)
}

// The properties of the Relationship.
func (o RelationshipDefinitionResponseOutput) Fields() PropertyDefinitionResponseArrayOutput {
	return o.ApplyT(func(v RelationshipDefinitionResponse) []PropertyDefinitionResponse { return v.Fields }).(PropertyDefinitionResponseArrayOutput)
}

// Optional property to be used to map fields in profile to their strong ids in related profile.
func (o RelationshipDefinitionResponseOutput) LookupMappings() RelationshipTypeMappingResponseArrayOutput {
	return o.ApplyT(func(v RelationshipDefinitionResponse) []RelationshipTypeMappingResponse { return v.LookupMappings }).(RelationshipTypeMappingResponseArrayOutput)
}

// Profile type.
func (o RelationshipDefinitionResponseOutput) ProfileType() pulumi.StringOutput {
	return o.ApplyT(func(v RelationshipDefinitionResponse) string { return v.ProfileType }).(pulumi.StringOutput)
}

// Provisioning state.
func (o RelationshipDefinitionResponseOutput) ProvisioningState() pulumi.StringOutput {
	return o.ApplyT(func(v RelationshipDefinitionResponse) string { return v.ProvisioningState }).(pulumi.StringOutput)
}

// Related profile being referenced.
func (o RelationshipDefinitionResponseOutput) RelatedProfileType() pulumi.StringOutput {
	return o.ApplyT(func(v RelationshipDefinitionResponse) string { return v.RelatedProfileType }).(pulumi.StringOutput)
}

// The relationship guid id.
func (o RelationshipDefinitionResponseOutput) RelationshipGuidId() pulumi.StringOutput {
	return o.ApplyT(func(v RelationshipDefinitionResponse) string { return v.RelationshipGuidId }).(pulumi.StringOutput)
}

// The Relationship name.
func (o RelationshipDefinitionResponseOutput) RelationshipName() pulumi.StringOutput {
	return o.ApplyT(func(v RelationshipDefinitionResponse) string { return v.RelationshipName }).(pulumi.StringOutput)
}

// The hub name.
func (o RelationshipDefinitionResponseOutput) TenantId() pulumi.StringOutput {
	return o.ApplyT(func(v RelationshipDefinitionResponse) string { return v.TenantId }).(pulumi.StringOutput)
}

type RelationshipDefinitionResponsePtrOutput struct{ *pulumi.OutputState }

func (RelationshipDefinitionResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RelationshipDefinitionResponse)(nil)).Elem()
}

func (o RelationshipDefinitionResponsePtrOutput) ToRelationshipDefinitionResponsePtrOutput() RelationshipDefinitionResponsePtrOutput {
	return o
}

func (o RelationshipDefinitionResponsePtrOutput) ToRelationshipDefinitionResponsePtrOutputWithContext(ctx context.Context) RelationshipDefinitionResponsePtrOutput {
	return o
}

func (o RelationshipDefinitionResponsePtrOutput) Elem() RelationshipDefinitionResponseOutput {
	return o.ApplyT(func(v *RelationshipDefinitionResponse) RelationshipDefinitionResponse { return *v }).(RelationshipDefinitionResponseOutput)
}

// The Relationship Cardinality.
func (o RelationshipDefinitionResponsePtrOutput) Cardinality() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RelationshipDefinitionResponse) *string {
		if v == nil {
			return nil
		}
		return v.Cardinality
	}).(pulumi.StringPtrOutput)
}

// Localized descriptions for the Relationship.
func (o RelationshipDefinitionResponsePtrOutput) Description() pulumi.StringMapOutput {
	return o.ApplyT(func(v *RelationshipDefinitionResponse) map[string]string {
		if v == nil {
			return nil
		}
		return v.Description
	}).(pulumi.StringMapOutput)
}

// Localized display name for the Relationship.
func (o RelationshipDefinitionResponsePtrOutput) DisplayName() pulumi.StringMapOutput {
	return o.ApplyT(func(v *RelationshipDefinitionResponse) map[string]string {
		if v == nil {
			return nil
		}
		return v.DisplayName
	}).(pulumi.StringMapOutput)
}

// The expiry date time in UTC.
func (o RelationshipDefinitionResponsePtrOutput) ExpiryDateTimeUtc() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RelationshipDefinitionResponse) *string {
		if v == nil {
			return nil
		}
		return v.ExpiryDateTimeUtc
	}).(pulumi.StringPtrOutput)
}

// The properties of the Relationship.
func (o RelationshipDefinitionResponsePtrOutput) Fields() PropertyDefinitionResponseArrayOutput {
	return o.ApplyT(func(v *RelationshipDefinitionResponse) []PropertyDefinitionResponse {
		if v == nil {
			return nil
		}
		return v.Fields
	}).(PropertyDefinitionResponseArrayOutput)
}

// Optional property to be used to map fields in profile to their strong ids in related profile.
func (o RelationshipDefinitionResponsePtrOutput) LookupMappings() RelationshipTypeMappingResponseArrayOutput {
	return o.ApplyT(func(v *RelationshipDefinitionResponse) []RelationshipTypeMappingResponse {
		if v == nil {
			return nil
		}
		return v.LookupMappings
	}).(RelationshipTypeMappingResponseArrayOutput)
}

// Profile type.
func (o RelationshipDefinitionResponsePtrOutput) ProfileType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RelationshipDefinitionResponse) *string {
		if v == nil {
			return nil
		}
		return &v.ProfileType
	}).(pulumi.StringPtrOutput)
}

// Provisioning state.
func (o RelationshipDefinitionResponsePtrOutput) ProvisioningState() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RelationshipDefinitionResponse) *string {
		if v == nil {
			return nil
		}
		return &v.ProvisioningState
	}).(pulumi.StringPtrOutput)
}

// Related profile being referenced.
func (o RelationshipDefinitionResponsePtrOutput) RelatedProfileType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RelationshipDefinitionResponse) *string {
		if v == nil {
			return nil
		}
		return &v.RelatedProfileType
	}).(pulumi.StringPtrOutput)
}

// The relationship guid id.
func (o RelationshipDefinitionResponsePtrOutput) RelationshipGuidId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RelationshipDefinitionResponse) *string {
		if v == nil {
			return nil
		}
		return &v.RelationshipGuidId
	}).(pulumi.StringPtrOutput)
}

// The Relationship name.
func (o RelationshipDefinitionResponsePtrOutput) RelationshipName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RelationshipDefinitionResponse) *string {
		if v == nil {
			return nil
		}
		return &v.RelationshipName
	}).(pulumi.StringPtrOutput)
}

// The hub name.
func (o RelationshipDefinitionResponsePtrOutput) TenantId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RelationshipDefinitionResponse) *string {
		if v == nil {
			return nil
		}
		return &v.TenantId
	}).(pulumi.StringPtrOutput)
}

// The definition of relationship link.
type RelationshipLinkDefinitionResponse struct {
	// Localized descriptions for the Relationship Link.
	Description map[string]string `pulumi:"description"`
	// Localized display name for the Relationship Link.
	DisplayName map[string]string `pulumi:"displayName"`
	// The InteractionType associated with the Relationship Link.
	InteractionType string `pulumi:"interactionType"`
	// The name of the Relationship Link.
	LinkName string `pulumi:"linkName"`
	// The mappings between Interaction and Relationship fields.
	Mappings []RelationshipLinkFieldMappingResponse `pulumi:"mappings"`
	// The property references for the Profile of the Relationship.
	ProfilePropertyReferences []ParticipantProfilePropertyReferenceResponse `pulumi:"profilePropertyReferences"`
	// Provisioning state.
	ProvisioningState string `pulumi:"provisioningState"`
	// The property references for the Related Profile of the Relationship.
	RelatedProfilePropertyReferences []ParticipantProfilePropertyReferenceResponse `pulumi:"relatedProfilePropertyReferences"`
	// The relationship guid id.
	RelationshipGuidId string `pulumi:"relationshipGuidId"`
	// The Relationship associated with the Link.
	RelationshipName string `pulumi:"relationshipName"`
	// The hub name.
	TenantId string `pulumi:"tenantId"`
}

// RelationshipLinkDefinitionResponseInput is an input type that accepts RelationshipLinkDefinitionResponseArgs and RelationshipLinkDefinitionResponseOutput values.
// You can construct a concrete instance of `RelationshipLinkDefinitionResponseInput` via:
//
//          RelationshipLinkDefinitionResponseArgs{...}
type RelationshipLinkDefinitionResponseInput interface {
	pulumi.Input

	ToRelationshipLinkDefinitionResponseOutput() RelationshipLinkDefinitionResponseOutput
	ToRelationshipLinkDefinitionResponseOutputWithContext(context.Context) RelationshipLinkDefinitionResponseOutput
}

// The definition of relationship link.
type RelationshipLinkDefinitionResponseArgs struct {
	// Localized descriptions for the Relationship Link.
	Description pulumi.StringMapInput `pulumi:"description"`
	// Localized display name for the Relationship Link.
	DisplayName pulumi.StringMapInput `pulumi:"displayName"`
	// The InteractionType associated with the Relationship Link.
	InteractionType pulumi.StringInput `pulumi:"interactionType"`
	// The name of the Relationship Link.
	LinkName pulumi.StringInput `pulumi:"linkName"`
	// The mappings between Interaction and Relationship fields.
	Mappings RelationshipLinkFieldMappingResponseArrayInput `pulumi:"mappings"`
	// The property references for the Profile of the Relationship.
	ProfilePropertyReferences ParticipantProfilePropertyReferenceResponseArrayInput `pulumi:"profilePropertyReferences"`
	// Provisioning state.
	ProvisioningState pulumi.StringInput `pulumi:"provisioningState"`
	// The property references for the Related Profile of the Relationship.
	RelatedProfilePropertyReferences ParticipantProfilePropertyReferenceResponseArrayInput `pulumi:"relatedProfilePropertyReferences"`
	// The relationship guid id.
	RelationshipGuidId pulumi.StringInput `pulumi:"relationshipGuidId"`
	// The Relationship associated with the Link.
	RelationshipName pulumi.StringInput `pulumi:"relationshipName"`
	// The hub name.
	TenantId pulumi.StringInput `pulumi:"tenantId"`
}

func (RelationshipLinkDefinitionResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RelationshipLinkDefinitionResponse)(nil)).Elem()
}

func (i RelationshipLinkDefinitionResponseArgs) ToRelationshipLinkDefinitionResponseOutput() RelationshipLinkDefinitionResponseOutput {
	return i.ToRelationshipLinkDefinitionResponseOutputWithContext(context.Background())
}

func (i RelationshipLinkDefinitionResponseArgs) ToRelationshipLinkDefinitionResponseOutputWithContext(ctx context.Context) RelationshipLinkDefinitionResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RelationshipLinkDefinitionResponseOutput)
}

func (i RelationshipLinkDefinitionResponseArgs) ToRelationshipLinkDefinitionResponsePtrOutput() RelationshipLinkDefinitionResponsePtrOutput {
	return i.ToRelationshipLinkDefinitionResponsePtrOutputWithContext(context.Background())
}

func (i RelationshipLinkDefinitionResponseArgs) ToRelationshipLinkDefinitionResponsePtrOutputWithContext(ctx context.Context) RelationshipLinkDefinitionResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RelationshipLinkDefinitionResponseOutput).ToRelationshipLinkDefinitionResponsePtrOutputWithContext(ctx)
}

// RelationshipLinkDefinitionResponsePtrInput is an input type that accepts RelationshipLinkDefinitionResponseArgs, RelationshipLinkDefinitionResponsePtr and RelationshipLinkDefinitionResponsePtrOutput values.
// You can construct a concrete instance of `RelationshipLinkDefinitionResponsePtrInput` via:
//
//          RelationshipLinkDefinitionResponseArgs{...}
//
//  or:
//
//          nil
type RelationshipLinkDefinitionResponsePtrInput interface {
	pulumi.Input

	ToRelationshipLinkDefinitionResponsePtrOutput() RelationshipLinkDefinitionResponsePtrOutput
	ToRelationshipLinkDefinitionResponsePtrOutputWithContext(context.Context) RelationshipLinkDefinitionResponsePtrOutput
}

type relationshipLinkDefinitionResponsePtrType RelationshipLinkDefinitionResponseArgs

func RelationshipLinkDefinitionResponsePtr(v *RelationshipLinkDefinitionResponseArgs) RelationshipLinkDefinitionResponsePtrInput {
	return (*relationshipLinkDefinitionResponsePtrType)(v)
}

func (*relationshipLinkDefinitionResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RelationshipLinkDefinitionResponse)(nil)).Elem()
}

func (i *relationshipLinkDefinitionResponsePtrType) ToRelationshipLinkDefinitionResponsePtrOutput() RelationshipLinkDefinitionResponsePtrOutput {
	return i.ToRelationshipLinkDefinitionResponsePtrOutputWithContext(context.Background())
}

func (i *relationshipLinkDefinitionResponsePtrType) ToRelationshipLinkDefinitionResponsePtrOutputWithContext(ctx context.Context) RelationshipLinkDefinitionResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RelationshipLinkDefinitionResponsePtrOutput)
}

// The definition of relationship link.
type RelationshipLinkDefinitionResponseOutput struct{ *pulumi.OutputState }

func (RelationshipLinkDefinitionResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RelationshipLinkDefinitionResponse)(nil)).Elem()
}

func (o RelationshipLinkDefinitionResponseOutput) ToRelationshipLinkDefinitionResponseOutput() RelationshipLinkDefinitionResponseOutput {
	return o
}

func (o RelationshipLinkDefinitionResponseOutput) ToRelationshipLinkDefinitionResponseOutputWithContext(ctx context.Context) RelationshipLinkDefinitionResponseOutput {
	return o
}

func (o RelationshipLinkDefinitionResponseOutput) ToRelationshipLinkDefinitionResponsePtrOutput() RelationshipLinkDefinitionResponsePtrOutput {
	return o.ToRelationshipLinkDefinitionResponsePtrOutputWithContext(context.Background())
}

func (o RelationshipLinkDefinitionResponseOutput) ToRelationshipLinkDefinitionResponsePtrOutputWithContext(ctx context.Context) RelationshipLinkDefinitionResponsePtrOutput {
	return o.ApplyT(func(v RelationshipLinkDefinitionResponse) *RelationshipLinkDefinitionResponse {
		return &v
	}).(RelationshipLinkDefinitionResponsePtrOutput)
}

// Localized descriptions for the Relationship Link.
func (o RelationshipLinkDefinitionResponseOutput) Description() pulumi.StringMapOutput {
	return o.ApplyT(func(v RelationshipLinkDefinitionResponse) map[string]string { return v.Description }).(pulumi.StringMapOutput)
}

// Localized display name for the Relationship Link.
func (o RelationshipLinkDefinitionResponseOutput) DisplayName() pulumi.StringMapOutput {
	return o.ApplyT(func(v RelationshipLinkDefinitionResponse) map[string]string { return v.DisplayName }).(pulumi.StringMapOutput)
}

// The InteractionType associated with the Relationship Link.
func (o RelationshipLinkDefinitionResponseOutput) InteractionType() pulumi.StringOutput {
	return o.ApplyT(func(v RelationshipLinkDefinitionResponse) string { return v.InteractionType }).(pulumi.StringOutput)
}

// The name of the Relationship Link.
func (o RelationshipLinkDefinitionResponseOutput) LinkName() pulumi.StringOutput {
	return o.ApplyT(func(v RelationshipLinkDefinitionResponse) string { return v.LinkName }).(pulumi.StringOutput)
}

// The mappings between Interaction and Relationship fields.
func (o RelationshipLinkDefinitionResponseOutput) Mappings() RelationshipLinkFieldMappingResponseArrayOutput {
	return o.ApplyT(func(v RelationshipLinkDefinitionResponse) []RelationshipLinkFieldMappingResponse { return v.Mappings }).(RelationshipLinkFieldMappingResponseArrayOutput)
}

// The property references for the Profile of the Relationship.
func (o RelationshipLinkDefinitionResponseOutput) ProfilePropertyReferences() ParticipantProfilePropertyReferenceResponseArrayOutput {
	return o.ApplyT(func(v RelationshipLinkDefinitionResponse) []ParticipantProfilePropertyReferenceResponse {
		return v.ProfilePropertyReferences
	}).(ParticipantProfilePropertyReferenceResponseArrayOutput)
}

// Provisioning state.
func (o RelationshipLinkDefinitionResponseOutput) ProvisioningState() pulumi.StringOutput {
	return o.ApplyT(func(v RelationshipLinkDefinitionResponse) string { return v.ProvisioningState }).(pulumi.StringOutput)
}

// The property references for the Related Profile of the Relationship.
func (o RelationshipLinkDefinitionResponseOutput) RelatedProfilePropertyReferences() ParticipantProfilePropertyReferenceResponseArrayOutput {
	return o.ApplyT(func(v RelationshipLinkDefinitionResponse) []ParticipantProfilePropertyReferenceResponse {
		return v.RelatedProfilePropertyReferences
	}).(ParticipantProfilePropertyReferenceResponseArrayOutput)
}

// The relationship guid id.
func (o RelationshipLinkDefinitionResponseOutput) RelationshipGuidId() pulumi.StringOutput {
	return o.ApplyT(func(v RelationshipLinkDefinitionResponse) string { return v.RelationshipGuidId }).(pulumi.StringOutput)
}

// The Relationship associated with the Link.
func (o RelationshipLinkDefinitionResponseOutput) RelationshipName() pulumi.StringOutput {
	return o.ApplyT(func(v RelationshipLinkDefinitionResponse) string { return v.RelationshipName }).(pulumi.StringOutput)
}

// The hub name.
func (o RelationshipLinkDefinitionResponseOutput) TenantId() pulumi.StringOutput {
	return o.ApplyT(func(v RelationshipLinkDefinitionResponse) string { return v.TenantId }).(pulumi.StringOutput)
}

type RelationshipLinkDefinitionResponsePtrOutput struct{ *pulumi.OutputState }

func (RelationshipLinkDefinitionResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RelationshipLinkDefinitionResponse)(nil)).Elem()
}

func (o RelationshipLinkDefinitionResponsePtrOutput) ToRelationshipLinkDefinitionResponsePtrOutput() RelationshipLinkDefinitionResponsePtrOutput {
	return o
}

func (o RelationshipLinkDefinitionResponsePtrOutput) ToRelationshipLinkDefinitionResponsePtrOutputWithContext(ctx context.Context) RelationshipLinkDefinitionResponsePtrOutput {
	return o
}

func (o RelationshipLinkDefinitionResponsePtrOutput) Elem() RelationshipLinkDefinitionResponseOutput {
	return o.ApplyT(func(v *RelationshipLinkDefinitionResponse) RelationshipLinkDefinitionResponse { return *v }).(RelationshipLinkDefinitionResponseOutput)
}

// Localized descriptions for the Relationship Link.
func (o RelationshipLinkDefinitionResponsePtrOutput) Description() pulumi.StringMapOutput {
	return o.ApplyT(func(v *RelationshipLinkDefinitionResponse) map[string]string {
		if v == nil {
			return nil
		}
		return v.Description
	}).(pulumi.StringMapOutput)
}

// Localized display name for the Relationship Link.
func (o RelationshipLinkDefinitionResponsePtrOutput) DisplayName() pulumi.StringMapOutput {
	return o.ApplyT(func(v *RelationshipLinkDefinitionResponse) map[string]string {
		if v == nil {
			return nil
		}
		return v.DisplayName
	}).(pulumi.StringMapOutput)
}

// The InteractionType associated with the Relationship Link.
func (o RelationshipLinkDefinitionResponsePtrOutput) InteractionType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RelationshipLinkDefinitionResponse) *string {
		if v == nil {
			return nil
		}
		return &v.InteractionType
	}).(pulumi.StringPtrOutput)
}

// The name of the Relationship Link.
func (o RelationshipLinkDefinitionResponsePtrOutput) LinkName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RelationshipLinkDefinitionResponse) *string {
		if v == nil {
			return nil
		}
		return &v.LinkName
	}).(pulumi.StringPtrOutput)
}

// The mappings between Interaction and Relationship fields.
func (o RelationshipLinkDefinitionResponsePtrOutput) Mappings() RelationshipLinkFieldMappingResponseArrayOutput {
	return o.ApplyT(func(v *RelationshipLinkDefinitionResponse) []RelationshipLinkFieldMappingResponse {
		if v == nil {
			return nil
		}
		return v.Mappings
	}).(RelationshipLinkFieldMappingResponseArrayOutput)
}

// The property references for the Profile of the Relationship.
func (o RelationshipLinkDefinitionResponsePtrOutput) ProfilePropertyReferences() ParticipantProfilePropertyReferenceResponseArrayOutput {
	return o.ApplyT(func(v *RelationshipLinkDefinitionResponse) []ParticipantProfilePropertyReferenceResponse {
		if v == nil {
			return nil
		}
		return v.ProfilePropertyReferences
	}).(ParticipantProfilePropertyReferenceResponseArrayOutput)
}

// Provisioning state.
func (o RelationshipLinkDefinitionResponsePtrOutput) ProvisioningState() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RelationshipLinkDefinitionResponse) *string {
		if v == nil {
			return nil
		}
		return &v.ProvisioningState
	}).(pulumi.StringPtrOutput)
}

// The property references for the Related Profile of the Relationship.
func (o RelationshipLinkDefinitionResponsePtrOutput) RelatedProfilePropertyReferences() ParticipantProfilePropertyReferenceResponseArrayOutput {
	return o.ApplyT(func(v *RelationshipLinkDefinitionResponse) []ParticipantProfilePropertyReferenceResponse {
		if v == nil {
			return nil
		}
		return v.RelatedProfilePropertyReferences
	}).(ParticipantProfilePropertyReferenceResponseArrayOutput)
}

// The relationship guid id.
func (o RelationshipLinkDefinitionResponsePtrOutput) RelationshipGuidId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RelationshipLinkDefinitionResponse) *string {
		if v == nil {
			return nil
		}
		return &v.RelationshipGuidId
	}).(pulumi.StringPtrOutput)
}

// The Relationship associated with the Link.
func (o RelationshipLinkDefinitionResponsePtrOutput) RelationshipName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RelationshipLinkDefinitionResponse) *string {
		if v == nil {
			return nil
		}
		return &v.RelationshipName
	}).(pulumi.StringPtrOutput)
}

// The hub name.
func (o RelationshipLinkDefinitionResponsePtrOutput) TenantId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RelationshipLinkDefinitionResponse) *string {
		if v == nil {
			return nil
		}
		return &v.TenantId
	}).(pulumi.StringPtrOutput)
}

// The fields mapping for Relationships.
type RelationshipLinkFieldMapping struct {
	// The field name on the Interaction Type.
	InteractionFieldName string `pulumi:"interactionFieldName"`
	// Link type.
	LinkType *string `pulumi:"linkType"`
	// The field name on the Relationship metadata.
	RelationshipFieldName string `pulumi:"relationshipFieldName"`
}

// RelationshipLinkFieldMappingInput is an input type that accepts RelationshipLinkFieldMappingArgs and RelationshipLinkFieldMappingOutput values.
// You can construct a concrete instance of `RelationshipLinkFieldMappingInput` via:
//
//          RelationshipLinkFieldMappingArgs{...}
type RelationshipLinkFieldMappingInput interface {
	pulumi.Input

	ToRelationshipLinkFieldMappingOutput() RelationshipLinkFieldMappingOutput
	ToRelationshipLinkFieldMappingOutputWithContext(context.Context) RelationshipLinkFieldMappingOutput
}

// The fields mapping for Relationships.
type RelationshipLinkFieldMappingArgs struct {
	// The field name on the Interaction Type.
	InteractionFieldName pulumi.StringInput `pulumi:"interactionFieldName"`
	// Link type.
	LinkType pulumi.StringPtrInput `pulumi:"linkType"`
	// The field name on the Relationship metadata.
	RelationshipFieldName pulumi.StringInput `pulumi:"relationshipFieldName"`
}

func (RelationshipLinkFieldMappingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RelationshipLinkFieldMapping)(nil)).Elem()
}

func (i RelationshipLinkFieldMappingArgs) ToRelationshipLinkFieldMappingOutput() RelationshipLinkFieldMappingOutput {
	return i.ToRelationshipLinkFieldMappingOutputWithContext(context.Background())
}

func (i RelationshipLinkFieldMappingArgs) ToRelationshipLinkFieldMappingOutputWithContext(ctx context.Context) RelationshipLinkFieldMappingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RelationshipLinkFieldMappingOutput)
}

// RelationshipLinkFieldMappingArrayInput is an input type that accepts RelationshipLinkFieldMappingArray and RelationshipLinkFieldMappingArrayOutput values.
// You can construct a concrete instance of `RelationshipLinkFieldMappingArrayInput` via:
//
//          RelationshipLinkFieldMappingArray{ RelationshipLinkFieldMappingArgs{...} }
type RelationshipLinkFieldMappingArrayInput interface {
	pulumi.Input

	ToRelationshipLinkFieldMappingArrayOutput() RelationshipLinkFieldMappingArrayOutput
	ToRelationshipLinkFieldMappingArrayOutputWithContext(context.Context) RelationshipLinkFieldMappingArrayOutput
}

type RelationshipLinkFieldMappingArray []RelationshipLinkFieldMappingInput

func (RelationshipLinkFieldMappingArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RelationshipLinkFieldMapping)(nil)).Elem()
}

func (i RelationshipLinkFieldMappingArray) ToRelationshipLinkFieldMappingArrayOutput() RelationshipLinkFieldMappingArrayOutput {
	return i.ToRelationshipLinkFieldMappingArrayOutputWithContext(context.Background())
}

func (i RelationshipLinkFieldMappingArray) ToRelationshipLinkFieldMappingArrayOutputWithContext(ctx context.Context) RelationshipLinkFieldMappingArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RelationshipLinkFieldMappingArrayOutput)
}

// The fields mapping for Relationships.
type RelationshipLinkFieldMappingOutput struct{ *pulumi.OutputState }

func (RelationshipLinkFieldMappingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RelationshipLinkFieldMapping)(nil)).Elem()
}

func (o RelationshipLinkFieldMappingOutput) ToRelationshipLinkFieldMappingOutput() RelationshipLinkFieldMappingOutput {
	return o
}

func (o RelationshipLinkFieldMappingOutput) ToRelationshipLinkFieldMappingOutputWithContext(ctx context.Context) RelationshipLinkFieldMappingOutput {
	return o
}

// The field name on the Interaction Type.
func (o RelationshipLinkFieldMappingOutput) InteractionFieldName() pulumi.StringOutput {
	return o.ApplyT(func(v RelationshipLinkFieldMapping) string { return v.InteractionFieldName }).(pulumi.StringOutput)
}

// Link type.
func (o RelationshipLinkFieldMappingOutput) LinkType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RelationshipLinkFieldMapping) *string { return v.LinkType }).(pulumi.StringPtrOutput)
}

// The field name on the Relationship metadata.
func (o RelationshipLinkFieldMappingOutput) RelationshipFieldName() pulumi.StringOutput {
	return o.ApplyT(func(v RelationshipLinkFieldMapping) string { return v.RelationshipFieldName }).(pulumi.StringOutput)
}

type RelationshipLinkFieldMappingArrayOutput struct{ *pulumi.OutputState }

func (RelationshipLinkFieldMappingArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RelationshipLinkFieldMapping)(nil)).Elem()
}

func (o RelationshipLinkFieldMappingArrayOutput) ToRelationshipLinkFieldMappingArrayOutput() RelationshipLinkFieldMappingArrayOutput {
	return o
}

func (o RelationshipLinkFieldMappingArrayOutput) ToRelationshipLinkFieldMappingArrayOutputWithContext(ctx context.Context) RelationshipLinkFieldMappingArrayOutput {
	return o
}

func (o RelationshipLinkFieldMappingArrayOutput) Index(i pulumi.IntInput) RelationshipLinkFieldMappingOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) RelationshipLinkFieldMapping {
		return vs[0].([]RelationshipLinkFieldMapping)[vs[1].(int)]
	}).(RelationshipLinkFieldMappingOutput)
}

// The fields mapping for Relationships.
type RelationshipLinkFieldMappingResponse struct {
	// The field name on the Interaction Type.
	InteractionFieldName string `pulumi:"interactionFieldName"`
	// Link type.
	LinkType *string `pulumi:"linkType"`
	// The field name on the Relationship metadata.
	RelationshipFieldName string `pulumi:"relationshipFieldName"`
}

// RelationshipLinkFieldMappingResponseInput is an input type that accepts RelationshipLinkFieldMappingResponseArgs and RelationshipLinkFieldMappingResponseOutput values.
// You can construct a concrete instance of `RelationshipLinkFieldMappingResponseInput` via:
//
//          RelationshipLinkFieldMappingResponseArgs{...}
type RelationshipLinkFieldMappingResponseInput interface {
	pulumi.Input

	ToRelationshipLinkFieldMappingResponseOutput() RelationshipLinkFieldMappingResponseOutput
	ToRelationshipLinkFieldMappingResponseOutputWithContext(context.Context) RelationshipLinkFieldMappingResponseOutput
}

// The fields mapping for Relationships.
type RelationshipLinkFieldMappingResponseArgs struct {
	// The field name on the Interaction Type.
	InteractionFieldName pulumi.StringInput `pulumi:"interactionFieldName"`
	// Link type.
	LinkType pulumi.StringPtrInput `pulumi:"linkType"`
	// The field name on the Relationship metadata.
	RelationshipFieldName pulumi.StringInput `pulumi:"relationshipFieldName"`
}

func (RelationshipLinkFieldMappingResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RelationshipLinkFieldMappingResponse)(nil)).Elem()
}

func (i RelationshipLinkFieldMappingResponseArgs) ToRelationshipLinkFieldMappingResponseOutput() RelationshipLinkFieldMappingResponseOutput {
	return i.ToRelationshipLinkFieldMappingResponseOutputWithContext(context.Background())
}

func (i RelationshipLinkFieldMappingResponseArgs) ToRelationshipLinkFieldMappingResponseOutputWithContext(ctx context.Context) RelationshipLinkFieldMappingResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RelationshipLinkFieldMappingResponseOutput)
}

// RelationshipLinkFieldMappingResponseArrayInput is an input type that accepts RelationshipLinkFieldMappingResponseArray and RelationshipLinkFieldMappingResponseArrayOutput values.
// You can construct a concrete instance of `RelationshipLinkFieldMappingResponseArrayInput` via:
//
//          RelationshipLinkFieldMappingResponseArray{ RelationshipLinkFieldMappingResponseArgs{...} }
type RelationshipLinkFieldMappingResponseArrayInput interface {
	pulumi.Input

	ToRelationshipLinkFieldMappingResponseArrayOutput() RelationshipLinkFieldMappingResponseArrayOutput
	ToRelationshipLinkFieldMappingResponseArrayOutputWithContext(context.Context) RelationshipLinkFieldMappingResponseArrayOutput
}

type RelationshipLinkFieldMappingResponseArray []RelationshipLinkFieldMappingResponseInput

func (RelationshipLinkFieldMappingResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RelationshipLinkFieldMappingResponse)(nil)).Elem()
}

func (i RelationshipLinkFieldMappingResponseArray) ToRelationshipLinkFieldMappingResponseArrayOutput() RelationshipLinkFieldMappingResponseArrayOutput {
	return i.ToRelationshipLinkFieldMappingResponseArrayOutputWithContext(context.Background())
}

func (i RelationshipLinkFieldMappingResponseArray) ToRelationshipLinkFieldMappingResponseArrayOutputWithContext(ctx context.Context) RelationshipLinkFieldMappingResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RelationshipLinkFieldMappingResponseArrayOutput)
}

// The fields mapping for Relationships.
type RelationshipLinkFieldMappingResponseOutput struct{ *pulumi.OutputState }

func (RelationshipLinkFieldMappingResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RelationshipLinkFieldMappingResponse)(nil)).Elem()
}

func (o RelationshipLinkFieldMappingResponseOutput) ToRelationshipLinkFieldMappingResponseOutput() RelationshipLinkFieldMappingResponseOutput {
	return o
}

func (o RelationshipLinkFieldMappingResponseOutput) ToRelationshipLinkFieldMappingResponseOutputWithContext(ctx context.Context) RelationshipLinkFieldMappingResponseOutput {
	return o
}

// The field name on the Interaction Type.
func (o RelationshipLinkFieldMappingResponseOutput) InteractionFieldName() pulumi.StringOutput {
	return o.ApplyT(func(v RelationshipLinkFieldMappingResponse) string { return v.InteractionFieldName }).(pulumi.StringOutput)
}

// Link type.
func (o RelationshipLinkFieldMappingResponseOutput) LinkType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RelationshipLinkFieldMappingResponse) *string { return v.LinkType }).(pulumi.StringPtrOutput)
}

// The field name on the Relationship metadata.
func (o RelationshipLinkFieldMappingResponseOutput) RelationshipFieldName() pulumi.StringOutput {
	return o.ApplyT(func(v RelationshipLinkFieldMappingResponse) string { return v.RelationshipFieldName }).(pulumi.StringOutput)
}

type RelationshipLinkFieldMappingResponseArrayOutput struct{ *pulumi.OutputState }

func (RelationshipLinkFieldMappingResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RelationshipLinkFieldMappingResponse)(nil)).Elem()
}

func (o RelationshipLinkFieldMappingResponseArrayOutput) ToRelationshipLinkFieldMappingResponseArrayOutput() RelationshipLinkFieldMappingResponseArrayOutput {
	return o
}

func (o RelationshipLinkFieldMappingResponseArrayOutput) ToRelationshipLinkFieldMappingResponseArrayOutputWithContext(ctx context.Context) RelationshipLinkFieldMappingResponseArrayOutput {
	return o
}

func (o RelationshipLinkFieldMappingResponseArrayOutput) Index(i pulumi.IntInput) RelationshipLinkFieldMappingResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) RelationshipLinkFieldMappingResponse {
		return vs[0].([]RelationshipLinkFieldMappingResponse)[vs[1].(int)]
	}).(RelationshipLinkFieldMappingResponseOutput)
}

// Map a field of profile to its corresponding StrongId in Related Profile.
type RelationshipTypeFieldMapping struct {
	// Specifies the fieldName in profile.
	ProfileFieldName string `pulumi:"profileFieldName"`
	// Specifies the KeyProperty (from StrongId) of the related profile.
	RelatedProfileKeyProperty string `pulumi:"relatedProfileKeyProperty"`
}

// RelationshipTypeFieldMappingInput is an input type that accepts RelationshipTypeFieldMappingArgs and RelationshipTypeFieldMappingOutput values.
// You can construct a concrete instance of `RelationshipTypeFieldMappingInput` via:
//
//          RelationshipTypeFieldMappingArgs{...}
type RelationshipTypeFieldMappingInput interface {
	pulumi.Input

	ToRelationshipTypeFieldMappingOutput() RelationshipTypeFieldMappingOutput
	ToRelationshipTypeFieldMappingOutputWithContext(context.Context) RelationshipTypeFieldMappingOutput
}

// Map a field of profile to its corresponding StrongId in Related Profile.
type RelationshipTypeFieldMappingArgs struct {
	// Specifies the fieldName in profile.
	ProfileFieldName pulumi.StringInput `pulumi:"profileFieldName"`
	// Specifies the KeyProperty (from StrongId) of the related profile.
	RelatedProfileKeyProperty pulumi.StringInput `pulumi:"relatedProfileKeyProperty"`
}

func (RelationshipTypeFieldMappingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RelationshipTypeFieldMapping)(nil)).Elem()
}

func (i RelationshipTypeFieldMappingArgs) ToRelationshipTypeFieldMappingOutput() RelationshipTypeFieldMappingOutput {
	return i.ToRelationshipTypeFieldMappingOutputWithContext(context.Background())
}

func (i RelationshipTypeFieldMappingArgs) ToRelationshipTypeFieldMappingOutputWithContext(ctx context.Context) RelationshipTypeFieldMappingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RelationshipTypeFieldMappingOutput)
}

// RelationshipTypeFieldMappingArrayInput is an input type that accepts RelationshipTypeFieldMappingArray and RelationshipTypeFieldMappingArrayOutput values.
// You can construct a concrete instance of `RelationshipTypeFieldMappingArrayInput` via:
//
//          RelationshipTypeFieldMappingArray{ RelationshipTypeFieldMappingArgs{...} }
type RelationshipTypeFieldMappingArrayInput interface {
	pulumi.Input

	ToRelationshipTypeFieldMappingArrayOutput() RelationshipTypeFieldMappingArrayOutput
	ToRelationshipTypeFieldMappingArrayOutputWithContext(context.Context) RelationshipTypeFieldMappingArrayOutput
}

type RelationshipTypeFieldMappingArray []RelationshipTypeFieldMappingInput

func (RelationshipTypeFieldMappingArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RelationshipTypeFieldMapping)(nil)).Elem()
}

func (i RelationshipTypeFieldMappingArray) ToRelationshipTypeFieldMappingArrayOutput() RelationshipTypeFieldMappingArrayOutput {
	return i.ToRelationshipTypeFieldMappingArrayOutputWithContext(context.Background())
}

func (i RelationshipTypeFieldMappingArray) ToRelationshipTypeFieldMappingArrayOutputWithContext(ctx context.Context) RelationshipTypeFieldMappingArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RelationshipTypeFieldMappingArrayOutput)
}

// Map a field of profile to its corresponding StrongId in Related Profile.
type RelationshipTypeFieldMappingOutput struct{ *pulumi.OutputState }

func (RelationshipTypeFieldMappingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RelationshipTypeFieldMapping)(nil)).Elem()
}

func (o RelationshipTypeFieldMappingOutput) ToRelationshipTypeFieldMappingOutput() RelationshipTypeFieldMappingOutput {
	return o
}

func (o RelationshipTypeFieldMappingOutput) ToRelationshipTypeFieldMappingOutputWithContext(ctx context.Context) RelationshipTypeFieldMappingOutput {
	return o
}

// Specifies the fieldName in profile.
func (o RelationshipTypeFieldMappingOutput) ProfileFieldName() pulumi.StringOutput {
	return o.ApplyT(func(v RelationshipTypeFieldMapping) string { return v.ProfileFieldName }).(pulumi.StringOutput)
}

// Specifies the KeyProperty (from StrongId) of the related profile.
func (o RelationshipTypeFieldMappingOutput) RelatedProfileKeyProperty() pulumi.StringOutput {
	return o.ApplyT(func(v RelationshipTypeFieldMapping) string { return v.RelatedProfileKeyProperty }).(pulumi.StringOutput)
}

type RelationshipTypeFieldMappingArrayOutput struct{ *pulumi.OutputState }

func (RelationshipTypeFieldMappingArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RelationshipTypeFieldMapping)(nil)).Elem()
}

func (o RelationshipTypeFieldMappingArrayOutput) ToRelationshipTypeFieldMappingArrayOutput() RelationshipTypeFieldMappingArrayOutput {
	return o
}

func (o RelationshipTypeFieldMappingArrayOutput) ToRelationshipTypeFieldMappingArrayOutputWithContext(ctx context.Context) RelationshipTypeFieldMappingArrayOutput {
	return o
}

func (o RelationshipTypeFieldMappingArrayOutput) Index(i pulumi.IntInput) RelationshipTypeFieldMappingOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) RelationshipTypeFieldMapping {
		return vs[0].([]RelationshipTypeFieldMapping)[vs[1].(int)]
	}).(RelationshipTypeFieldMappingOutput)
}

// Map a field of profile to its corresponding StrongId in Related Profile.
type RelationshipTypeFieldMappingResponse struct {
	// Specifies the fieldName in profile.
	ProfileFieldName string `pulumi:"profileFieldName"`
	// Specifies the KeyProperty (from StrongId) of the related profile.
	RelatedProfileKeyProperty string `pulumi:"relatedProfileKeyProperty"`
}

// RelationshipTypeFieldMappingResponseInput is an input type that accepts RelationshipTypeFieldMappingResponseArgs and RelationshipTypeFieldMappingResponseOutput values.
// You can construct a concrete instance of `RelationshipTypeFieldMappingResponseInput` via:
//
//          RelationshipTypeFieldMappingResponseArgs{...}
type RelationshipTypeFieldMappingResponseInput interface {
	pulumi.Input

	ToRelationshipTypeFieldMappingResponseOutput() RelationshipTypeFieldMappingResponseOutput
	ToRelationshipTypeFieldMappingResponseOutputWithContext(context.Context) RelationshipTypeFieldMappingResponseOutput
}

// Map a field of profile to its corresponding StrongId in Related Profile.
type RelationshipTypeFieldMappingResponseArgs struct {
	// Specifies the fieldName in profile.
	ProfileFieldName pulumi.StringInput `pulumi:"profileFieldName"`
	// Specifies the KeyProperty (from StrongId) of the related profile.
	RelatedProfileKeyProperty pulumi.StringInput `pulumi:"relatedProfileKeyProperty"`
}

func (RelationshipTypeFieldMappingResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RelationshipTypeFieldMappingResponse)(nil)).Elem()
}

func (i RelationshipTypeFieldMappingResponseArgs) ToRelationshipTypeFieldMappingResponseOutput() RelationshipTypeFieldMappingResponseOutput {
	return i.ToRelationshipTypeFieldMappingResponseOutputWithContext(context.Background())
}

func (i RelationshipTypeFieldMappingResponseArgs) ToRelationshipTypeFieldMappingResponseOutputWithContext(ctx context.Context) RelationshipTypeFieldMappingResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RelationshipTypeFieldMappingResponseOutput)
}

// RelationshipTypeFieldMappingResponseArrayInput is an input type that accepts RelationshipTypeFieldMappingResponseArray and RelationshipTypeFieldMappingResponseArrayOutput values.
// You can construct a concrete instance of `RelationshipTypeFieldMappingResponseArrayInput` via:
//
//          RelationshipTypeFieldMappingResponseArray{ RelationshipTypeFieldMappingResponseArgs{...} }
type RelationshipTypeFieldMappingResponseArrayInput interface {
	pulumi.Input

	ToRelationshipTypeFieldMappingResponseArrayOutput() RelationshipTypeFieldMappingResponseArrayOutput
	ToRelationshipTypeFieldMappingResponseArrayOutputWithContext(context.Context) RelationshipTypeFieldMappingResponseArrayOutput
}

type RelationshipTypeFieldMappingResponseArray []RelationshipTypeFieldMappingResponseInput

func (RelationshipTypeFieldMappingResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RelationshipTypeFieldMappingResponse)(nil)).Elem()
}

func (i RelationshipTypeFieldMappingResponseArray) ToRelationshipTypeFieldMappingResponseArrayOutput() RelationshipTypeFieldMappingResponseArrayOutput {
	return i.ToRelationshipTypeFieldMappingResponseArrayOutputWithContext(context.Background())
}

func (i RelationshipTypeFieldMappingResponseArray) ToRelationshipTypeFieldMappingResponseArrayOutputWithContext(ctx context.Context) RelationshipTypeFieldMappingResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RelationshipTypeFieldMappingResponseArrayOutput)
}

// Map a field of profile to its corresponding StrongId in Related Profile.
type RelationshipTypeFieldMappingResponseOutput struct{ *pulumi.OutputState }

func (RelationshipTypeFieldMappingResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RelationshipTypeFieldMappingResponse)(nil)).Elem()
}

func (o RelationshipTypeFieldMappingResponseOutput) ToRelationshipTypeFieldMappingResponseOutput() RelationshipTypeFieldMappingResponseOutput {
	return o
}

func (o RelationshipTypeFieldMappingResponseOutput) ToRelationshipTypeFieldMappingResponseOutputWithContext(ctx context.Context) RelationshipTypeFieldMappingResponseOutput {
	return o
}

// Specifies the fieldName in profile.
func (o RelationshipTypeFieldMappingResponseOutput) ProfileFieldName() pulumi.StringOutput {
	return o.ApplyT(func(v RelationshipTypeFieldMappingResponse) string { return v.ProfileFieldName }).(pulumi.StringOutput)
}

// Specifies the KeyProperty (from StrongId) of the related profile.
func (o RelationshipTypeFieldMappingResponseOutput) RelatedProfileKeyProperty() pulumi.StringOutput {
	return o.ApplyT(func(v RelationshipTypeFieldMappingResponse) string { return v.RelatedProfileKeyProperty }).(pulumi.StringOutput)
}

type RelationshipTypeFieldMappingResponseArrayOutput struct{ *pulumi.OutputState }

func (RelationshipTypeFieldMappingResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RelationshipTypeFieldMappingResponse)(nil)).Elem()
}

func (o RelationshipTypeFieldMappingResponseArrayOutput) ToRelationshipTypeFieldMappingResponseArrayOutput() RelationshipTypeFieldMappingResponseArrayOutput {
	return o
}

func (o RelationshipTypeFieldMappingResponseArrayOutput) ToRelationshipTypeFieldMappingResponseArrayOutputWithContext(ctx context.Context) RelationshipTypeFieldMappingResponseArrayOutput {
	return o
}

func (o RelationshipTypeFieldMappingResponseArrayOutput) Index(i pulumi.IntInput) RelationshipTypeFieldMappingResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) RelationshipTypeFieldMappingResponse {
		return vs[0].([]RelationshipTypeFieldMappingResponse)[vs[1].(int)]
	}).(RelationshipTypeFieldMappingResponseOutput)
}

// Maps fields in Profile to their corresponding StrongIds in Related Profile.
type RelationshipTypeMapping struct {
	// Maps a profile property with the StrongId of related profile. This is an array to support StrongIds that are composite key as well.
	FieldMappings []RelationshipTypeFieldMapping `pulumi:"fieldMappings"`
}

// RelationshipTypeMappingInput is an input type that accepts RelationshipTypeMappingArgs and RelationshipTypeMappingOutput values.
// You can construct a concrete instance of `RelationshipTypeMappingInput` via:
//
//          RelationshipTypeMappingArgs{...}
type RelationshipTypeMappingInput interface {
	pulumi.Input

	ToRelationshipTypeMappingOutput() RelationshipTypeMappingOutput
	ToRelationshipTypeMappingOutputWithContext(context.Context) RelationshipTypeMappingOutput
}

// Maps fields in Profile to their corresponding StrongIds in Related Profile.
type RelationshipTypeMappingArgs struct {
	// Maps a profile property with the StrongId of related profile. This is an array to support StrongIds that are composite key as well.
	FieldMappings RelationshipTypeFieldMappingArrayInput `pulumi:"fieldMappings"`
}

func (RelationshipTypeMappingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RelationshipTypeMapping)(nil)).Elem()
}

func (i RelationshipTypeMappingArgs) ToRelationshipTypeMappingOutput() RelationshipTypeMappingOutput {
	return i.ToRelationshipTypeMappingOutputWithContext(context.Background())
}

func (i RelationshipTypeMappingArgs) ToRelationshipTypeMappingOutputWithContext(ctx context.Context) RelationshipTypeMappingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RelationshipTypeMappingOutput)
}

// RelationshipTypeMappingArrayInput is an input type that accepts RelationshipTypeMappingArray and RelationshipTypeMappingArrayOutput values.
// You can construct a concrete instance of `RelationshipTypeMappingArrayInput` via:
//
//          RelationshipTypeMappingArray{ RelationshipTypeMappingArgs{...} }
type RelationshipTypeMappingArrayInput interface {
	pulumi.Input

	ToRelationshipTypeMappingArrayOutput() RelationshipTypeMappingArrayOutput
	ToRelationshipTypeMappingArrayOutputWithContext(context.Context) RelationshipTypeMappingArrayOutput
}

type RelationshipTypeMappingArray []RelationshipTypeMappingInput

func (RelationshipTypeMappingArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RelationshipTypeMapping)(nil)).Elem()
}

func (i RelationshipTypeMappingArray) ToRelationshipTypeMappingArrayOutput() RelationshipTypeMappingArrayOutput {
	return i.ToRelationshipTypeMappingArrayOutputWithContext(context.Background())
}

func (i RelationshipTypeMappingArray) ToRelationshipTypeMappingArrayOutputWithContext(ctx context.Context) RelationshipTypeMappingArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RelationshipTypeMappingArrayOutput)
}

// Maps fields in Profile to their corresponding StrongIds in Related Profile.
type RelationshipTypeMappingOutput struct{ *pulumi.OutputState }

func (RelationshipTypeMappingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RelationshipTypeMapping)(nil)).Elem()
}

func (o RelationshipTypeMappingOutput) ToRelationshipTypeMappingOutput() RelationshipTypeMappingOutput {
	return o
}

func (o RelationshipTypeMappingOutput) ToRelationshipTypeMappingOutputWithContext(ctx context.Context) RelationshipTypeMappingOutput {
	return o
}

// Maps a profile property with the StrongId of related profile. This is an array to support StrongIds that are composite key as well.
func (o RelationshipTypeMappingOutput) FieldMappings() RelationshipTypeFieldMappingArrayOutput {
	return o.ApplyT(func(v RelationshipTypeMapping) []RelationshipTypeFieldMapping { return v.FieldMappings }).(RelationshipTypeFieldMappingArrayOutput)
}

type RelationshipTypeMappingArrayOutput struct{ *pulumi.OutputState }

func (RelationshipTypeMappingArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RelationshipTypeMapping)(nil)).Elem()
}

func (o RelationshipTypeMappingArrayOutput) ToRelationshipTypeMappingArrayOutput() RelationshipTypeMappingArrayOutput {
	return o
}

func (o RelationshipTypeMappingArrayOutput) ToRelationshipTypeMappingArrayOutputWithContext(ctx context.Context) RelationshipTypeMappingArrayOutput {
	return o
}

func (o RelationshipTypeMappingArrayOutput) Index(i pulumi.IntInput) RelationshipTypeMappingOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) RelationshipTypeMapping {
		return vs[0].([]RelationshipTypeMapping)[vs[1].(int)]
	}).(RelationshipTypeMappingOutput)
}

// Maps fields in Profile to their corresponding StrongIds in Related Profile.
type RelationshipTypeMappingResponse struct {
	// Maps a profile property with the StrongId of related profile. This is an array to support StrongIds that are composite key as well.
	FieldMappings []RelationshipTypeFieldMappingResponse `pulumi:"fieldMappings"`
}

// RelationshipTypeMappingResponseInput is an input type that accepts RelationshipTypeMappingResponseArgs and RelationshipTypeMappingResponseOutput values.
// You can construct a concrete instance of `RelationshipTypeMappingResponseInput` via:
//
//          RelationshipTypeMappingResponseArgs{...}
type RelationshipTypeMappingResponseInput interface {
	pulumi.Input

	ToRelationshipTypeMappingResponseOutput() RelationshipTypeMappingResponseOutput
	ToRelationshipTypeMappingResponseOutputWithContext(context.Context) RelationshipTypeMappingResponseOutput
}

// Maps fields in Profile to their corresponding StrongIds in Related Profile.
type RelationshipTypeMappingResponseArgs struct {
	// Maps a profile property with the StrongId of related profile. This is an array to support StrongIds that are composite key as well.
	FieldMappings RelationshipTypeFieldMappingResponseArrayInput `pulumi:"fieldMappings"`
}

func (RelationshipTypeMappingResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RelationshipTypeMappingResponse)(nil)).Elem()
}

func (i RelationshipTypeMappingResponseArgs) ToRelationshipTypeMappingResponseOutput() RelationshipTypeMappingResponseOutput {
	return i.ToRelationshipTypeMappingResponseOutputWithContext(context.Background())
}

func (i RelationshipTypeMappingResponseArgs) ToRelationshipTypeMappingResponseOutputWithContext(ctx context.Context) RelationshipTypeMappingResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RelationshipTypeMappingResponseOutput)
}

// RelationshipTypeMappingResponseArrayInput is an input type that accepts RelationshipTypeMappingResponseArray and RelationshipTypeMappingResponseArrayOutput values.
// You can construct a concrete instance of `RelationshipTypeMappingResponseArrayInput` via:
//
//          RelationshipTypeMappingResponseArray{ RelationshipTypeMappingResponseArgs{...} }
type RelationshipTypeMappingResponseArrayInput interface {
	pulumi.Input

	ToRelationshipTypeMappingResponseArrayOutput() RelationshipTypeMappingResponseArrayOutput
	ToRelationshipTypeMappingResponseArrayOutputWithContext(context.Context) RelationshipTypeMappingResponseArrayOutput
}

type RelationshipTypeMappingResponseArray []RelationshipTypeMappingResponseInput

func (RelationshipTypeMappingResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RelationshipTypeMappingResponse)(nil)).Elem()
}

func (i RelationshipTypeMappingResponseArray) ToRelationshipTypeMappingResponseArrayOutput() RelationshipTypeMappingResponseArrayOutput {
	return i.ToRelationshipTypeMappingResponseArrayOutputWithContext(context.Background())
}

func (i RelationshipTypeMappingResponseArray) ToRelationshipTypeMappingResponseArrayOutputWithContext(ctx context.Context) RelationshipTypeMappingResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RelationshipTypeMappingResponseArrayOutput)
}

// Maps fields in Profile to their corresponding StrongIds in Related Profile.
type RelationshipTypeMappingResponseOutput struct{ *pulumi.OutputState }

func (RelationshipTypeMappingResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RelationshipTypeMappingResponse)(nil)).Elem()
}

func (o RelationshipTypeMappingResponseOutput) ToRelationshipTypeMappingResponseOutput() RelationshipTypeMappingResponseOutput {
	return o
}

func (o RelationshipTypeMappingResponseOutput) ToRelationshipTypeMappingResponseOutputWithContext(ctx context.Context) RelationshipTypeMappingResponseOutput {
	return o
}

// Maps a profile property with the StrongId of related profile. This is an array to support StrongIds that are composite key as well.
func (o RelationshipTypeMappingResponseOutput) FieldMappings() RelationshipTypeFieldMappingResponseArrayOutput {
	return o.ApplyT(func(v RelationshipTypeMappingResponse) []RelationshipTypeFieldMappingResponse { return v.FieldMappings }).(RelationshipTypeFieldMappingResponseArrayOutput)
}

type RelationshipTypeMappingResponseArrayOutput struct{ *pulumi.OutputState }

func (RelationshipTypeMappingResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RelationshipTypeMappingResponse)(nil)).Elem()
}

func (o RelationshipTypeMappingResponseArrayOutput) ToRelationshipTypeMappingResponseArrayOutput() RelationshipTypeMappingResponseArrayOutput {
	return o
}

func (o RelationshipTypeMappingResponseArrayOutput) ToRelationshipTypeMappingResponseArrayOutputWithContext(ctx context.Context) RelationshipTypeMappingResponseArrayOutput {
	return o
}

func (o RelationshipTypeMappingResponseArrayOutput) Index(i pulumi.IntInput) RelationshipTypeMappingResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) RelationshipTypeMappingResponse {
		return vs[0].([]RelationshipTypeMappingResponse)[vs[1].(int)]
	}).(RelationshipTypeMappingResponseOutput)
}

// The resource set description.
type ResourceSetDescription struct {
	// The elements included in the set.
	Elements []string `pulumi:"elements"`
	// The elements that are not included in the set, in case elements contains '*' indicating 'all'.
	Exceptions []string `pulumi:"exceptions"`
}

// ResourceSetDescriptionInput is an input type that accepts ResourceSetDescriptionArgs and ResourceSetDescriptionOutput values.
// You can construct a concrete instance of `ResourceSetDescriptionInput` via:
//
//          ResourceSetDescriptionArgs{...}
type ResourceSetDescriptionInput interface {
	pulumi.Input

	ToResourceSetDescriptionOutput() ResourceSetDescriptionOutput
	ToResourceSetDescriptionOutputWithContext(context.Context) ResourceSetDescriptionOutput
}

// The resource set description.
type ResourceSetDescriptionArgs struct {
	// The elements included in the set.
	Elements pulumi.StringArrayInput `pulumi:"elements"`
	// The elements that are not included in the set, in case elements contains '*' indicating 'all'.
	Exceptions pulumi.StringArrayInput `pulumi:"exceptions"`
}

func (ResourceSetDescriptionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceSetDescription)(nil)).Elem()
}

func (i ResourceSetDescriptionArgs) ToResourceSetDescriptionOutput() ResourceSetDescriptionOutput {
	return i.ToResourceSetDescriptionOutputWithContext(context.Background())
}

func (i ResourceSetDescriptionArgs) ToResourceSetDescriptionOutputWithContext(ctx context.Context) ResourceSetDescriptionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceSetDescriptionOutput)
}

func (i ResourceSetDescriptionArgs) ToResourceSetDescriptionPtrOutput() ResourceSetDescriptionPtrOutput {
	return i.ToResourceSetDescriptionPtrOutputWithContext(context.Background())
}

func (i ResourceSetDescriptionArgs) ToResourceSetDescriptionPtrOutputWithContext(ctx context.Context) ResourceSetDescriptionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceSetDescriptionOutput).ToResourceSetDescriptionPtrOutputWithContext(ctx)
}

// ResourceSetDescriptionPtrInput is an input type that accepts ResourceSetDescriptionArgs, ResourceSetDescriptionPtr and ResourceSetDescriptionPtrOutput values.
// You can construct a concrete instance of `ResourceSetDescriptionPtrInput` via:
//
//          ResourceSetDescriptionArgs{...}
//
//  or:
//
//          nil
type ResourceSetDescriptionPtrInput interface {
	pulumi.Input

	ToResourceSetDescriptionPtrOutput() ResourceSetDescriptionPtrOutput
	ToResourceSetDescriptionPtrOutputWithContext(context.Context) ResourceSetDescriptionPtrOutput
}

type resourceSetDescriptionPtrType ResourceSetDescriptionArgs

func ResourceSetDescriptionPtr(v *ResourceSetDescriptionArgs) ResourceSetDescriptionPtrInput {
	return (*resourceSetDescriptionPtrType)(v)
}

func (*resourceSetDescriptionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ResourceSetDescription)(nil)).Elem()
}

func (i *resourceSetDescriptionPtrType) ToResourceSetDescriptionPtrOutput() ResourceSetDescriptionPtrOutput {
	return i.ToResourceSetDescriptionPtrOutputWithContext(context.Background())
}

func (i *resourceSetDescriptionPtrType) ToResourceSetDescriptionPtrOutputWithContext(ctx context.Context) ResourceSetDescriptionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceSetDescriptionPtrOutput)
}

// The resource set description.
type ResourceSetDescriptionOutput struct{ *pulumi.OutputState }

func (ResourceSetDescriptionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceSetDescription)(nil)).Elem()
}

func (o ResourceSetDescriptionOutput) ToResourceSetDescriptionOutput() ResourceSetDescriptionOutput {
	return o
}

func (o ResourceSetDescriptionOutput) ToResourceSetDescriptionOutputWithContext(ctx context.Context) ResourceSetDescriptionOutput {
	return o
}

func (o ResourceSetDescriptionOutput) ToResourceSetDescriptionPtrOutput() ResourceSetDescriptionPtrOutput {
	return o.ToResourceSetDescriptionPtrOutputWithContext(context.Background())
}

func (o ResourceSetDescriptionOutput) ToResourceSetDescriptionPtrOutputWithContext(ctx context.Context) ResourceSetDescriptionPtrOutput {
	return o.ApplyT(func(v ResourceSetDescription) *ResourceSetDescription {
		return &v
	}).(ResourceSetDescriptionPtrOutput)
}

// The elements included in the set.
func (o ResourceSetDescriptionOutput) Elements() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ResourceSetDescription) []string { return v.Elements }).(pulumi.StringArrayOutput)
}

// The elements that are not included in the set, in case elements contains '*' indicating 'all'.
func (o ResourceSetDescriptionOutput) Exceptions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ResourceSetDescription) []string { return v.Exceptions }).(pulumi.StringArrayOutput)
}

type ResourceSetDescriptionPtrOutput struct{ *pulumi.OutputState }

func (ResourceSetDescriptionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ResourceSetDescription)(nil)).Elem()
}

func (o ResourceSetDescriptionPtrOutput) ToResourceSetDescriptionPtrOutput() ResourceSetDescriptionPtrOutput {
	return o
}

func (o ResourceSetDescriptionPtrOutput) ToResourceSetDescriptionPtrOutputWithContext(ctx context.Context) ResourceSetDescriptionPtrOutput {
	return o
}

func (o ResourceSetDescriptionPtrOutput) Elem() ResourceSetDescriptionOutput {
	return o.ApplyT(func(v *ResourceSetDescription) ResourceSetDescription { return *v }).(ResourceSetDescriptionOutput)
}

// The elements included in the set.
func (o ResourceSetDescriptionPtrOutput) Elements() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ResourceSetDescription) []string {
		if v == nil {
			return nil
		}
		return v.Elements
	}).(pulumi.StringArrayOutput)
}

// The elements that are not included in the set, in case elements contains '*' indicating 'all'.
func (o ResourceSetDescriptionPtrOutput) Exceptions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ResourceSetDescription) []string {
		if v == nil {
			return nil
		}
		return v.Exceptions
	}).(pulumi.StringArrayOutput)
}

// The resource set description.
type ResourceSetDescriptionResponse struct {
	// The elements included in the set.
	Elements []string `pulumi:"elements"`
	// The elements that are not included in the set, in case elements contains '*' indicating 'all'.
	Exceptions []string `pulumi:"exceptions"`
}

// ResourceSetDescriptionResponseInput is an input type that accepts ResourceSetDescriptionResponseArgs and ResourceSetDescriptionResponseOutput values.
// You can construct a concrete instance of `ResourceSetDescriptionResponseInput` via:
//
//          ResourceSetDescriptionResponseArgs{...}
type ResourceSetDescriptionResponseInput interface {
	pulumi.Input

	ToResourceSetDescriptionResponseOutput() ResourceSetDescriptionResponseOutput
	ToResourceSetDescriptionResponseOutputWithContext(context.Context) ResourceSetDescriptionResponseOutput
}

// The resource set description.
type ResourceSetDescriptionResponseArgs struct {
	// The elements included in the set.
	Elements pulumi.StringArrayInput `pulumi:"elements"`
	// The elements that are not included in the set, in case elements contains '*' indicating 'all'.
	Exceptions pulumi.StringArrayInput `pulumi:"exceptions"`
}

func (ResourceSetDescriptionResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceSetDescriptionResponse)(nil)).Elem()
}

func (i ResourceSetDescriptionResponseArgs) ToResourceSetDescriptionResponseOutput() ResourceSetDescriptionResponseOutput {
	return i.ToResourceSetDescriptionResponseOutputWithContext(context.Background())
}

func (i ResourceSetDescriptionResponseArgs) ToResourceSetDescriptionResponseOutputWithContext(ctx context.Context) ResourceSetDescriptionResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceSetDescriptionResponseOutput)
}

func (i ResourceSetDescriptionResponseArgs) ToResourceSetDescriptionResponsePtrOutput() ResourceSetDescriptionResponsePtrOutput {
	return i.ToResourceSetDescriptionResponsePtrOutputWithContext(context.Background())
}

func (i ResourceSetDescriptionResponseArgs) ToResourceSetDescriptionResponsePtrOutputWithContext(ctx context.Context) ResourceSetDescriptionResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceSetDescriptionResponseOutput).ToResourceSetDescriptionResponsePtrOutputWithContext(ctx)
}

// ResourceSetDescriptionResponsePtrInput is an input type that accepts ResourceSetDescriptionResponseArgs, ResourceSetDescriptionResponsePtr and ResourceSetDescriptionResponsePtrOutput values.
// You can construct a concrete instance of `ResourceSetDescriptionResponsePtrInput` via:
//
//          ResourceSetDescriptionResponseArgs{...}
//
//  or:
//
//          nil
type ResourceSetDescriptionResponsePtrInput interface {
	pulumi.Input

	ToResourceSetDescriptionResponsePtrOutput() ResourceSetDescriptionResponsePtrOutput
	ToResourceSetDescriptionResponsePtrOutputWithContext(context.Context) ResourceSetDescriptionResponsePtrOutput
}

type resourceSetDescriptionResponsePtrType ResourceSetDescriptionResponseArgs

func ResourceSetDescriptionResponsePtr(v *ResourceSetDescriptionResponseArgs) ResourceSetDescriptionResponsePtrInput {
	return (*resourceSetDescriptionResponsePtrType)(v)
}

func (*resourceSetDescriptionResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ResourceSetDescriptionResponse)(nil)).Elem()
}

func (i *resourceSetDescriptionResponsePtrType) ToResourceSetDescriptionResponsePtrOutput() ResourceSetDescriptionResponsePtrOutput {
	return i.ToResourceSetDescriptionResponsePtrOutputWithContext(context.Background())
}

func (i *resourceSetDescriptionResponsePtrType) ToResourceSetDescriptionResponsePtrOutputWithContext(ctx context.Context) ResourceSetDescriptionResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceSetDescriptionResponsePtrOutput)
}

// The resource set description.
type ResourceSetDescriptionResponseOutput struct{ *pulumi.OutputState }

func (ResourceSetDescriptionResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceSetDescriptionResponse)(nil)).Elem()
}

func (o ResourceSetDescriptionResponseOutput) ToResourceSetDescriptionResponseOutput() ResourceSetDescriptionResponseOutput {
	return o
}

func (o ResourceSetDescriptionResponseOutput) ToResourceSetDescriptionResponseOutputWithContext(ctx context.Context) ResourceSetDescriptionResponseOutput {
	return o
}

func (o ResourceSetDescriptionResponseOutput) ToResourceSetDescriptionResponsePtrOutput() ResourceSetDescriptionResponsePtrOutput {
	return o.ToResourceSetDescriptionResponsePtrOutputWithContext(context.Background())
}

func (o ResourceSetDescriptionResponseOutput) ToResourceSetDescriptionResponsePtrOutputWithContext(ctx context.Context) ResourceSetDescriptionResponsePtrOutput {
	return o.ApplyT(func(v ResourceSetDescriptionResponse) *ResourceSetDescriptionResponse {
		return &v
	}).(ResourceSetDescriptionResponsePtrOutput)
}

// The elements included in the set.
func (o ResourceSetDescriptionResponseOutput) Elements() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ResourceSetDescriptionResponse) []string { return v.Elements }).(pulumi.StringArrayOutput)
}

// The elements that are not included in the set, in case elements contains '*' indicating 'all'.
func (o ResourceSetDescriptionResponseOutput) Exceptions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ResourceSetDescriptionResponse) []string { return v.Exceptions }).(pulumi.StringArrayOutput)
}

type ResourceSetDescriptionResponsePtrOutput struct{ *pulumi.OutputState }

func (ResourceSetDescriptionResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ResourceSetDescriptionResponse)(nil)).Elem()
}

func (o ResourceSetDescriptionResponsePtrOutput) ToResourceSetDescriptionResponsePtrOutput() ResourceSetDescriptionResponsePtrOutput {
	return o
}

func (o ResourceSetDescriptionResponsePtrOutput) ToResourceSetDescriptionResponsePtrOutputWithContext(ctx context.Context) ResourceSetDescriptionResponsePtrOutput {
	return o
}

func (o ResourceSetDescriptionResponsePtrOutput) Elem() ResourceSetDescriptionResponseOutput {
	return o.ApplyT(func(v *ResourceSetDescriptionResponse) ResourceSetDescriptionResponse { return *v }).(ResourceSetDescriptionResponseOutput)
}

// The elements included in the set.
func (o ResourceSetDescriptionResponsePtrOutput) Elements() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ResourceSetDescriptionResponse) []string {
		if v == nil {
			return nil
		}
		return v.Elements
	}).(pulumi.StringArrayOutput)
}

// The elements that are not included in the set, in case elements contains '*' indicating 'all'.
func (o ResourceSetDescriptionResponsePtrOutput) Exceptions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ResourceSetDescriptionResponse) []string {
		if v == nil {
			return nil
		}
		return v.Exceptions
	}).(pulumi.StringArrayOutput)
}

// The Role Assignment definition.
type RoleAssignmentResponse struct {
	// The name of the metadata object.
	AssignmentName string `pulumi:"assignmentName"`
	// Widget types set for the assignment.
	ConflationPolicies *ResourceSetDescriptionResponse `pulumi:"conflationPolicies"`
	// Connectors set for the assignment.
	Connectors *ResourceSetDescriptionResponse `pulumi:"connectors"`
	// Localized description for the metadata.
	Description map[string]string `pulumi:"description"`
	// Localized display names for the metadata.
	DisplayName map[string]string `pulumi:"displayName"`
	// Interactions set for the assignment.
	Interactions *ResourceSetDescriptionResponse `pulumi:"interactions"`
	// Kpis set for the assignment.
	Kpis *ResourceSetDescriptionResponse `pulumi:"kpis"`
	// Links set for the assignment.
	Links *ResourceSetDescriptionResponse `pulumi:"links"`
	// The principals being assigned to.
	Principals []AssignmentPrincipalResponse `pulumi:"principals"`
	// Profiles set for the assignment.
	Profiles *ResourceSetDescriptionResponse `pulumi:"profiles"`
	// Provisioning state.
	ProvisioningState string `pulumi:"provisioningState"`
	// The Role assignments set for the relationship links.
	RelationshipLinks *ResourceSetDescriptionResponse `pulumi:"relationshipLinks"`
	// The Role assignments set for the relationships.
	Relationships *ResourceSetDescriptionResponse `pulumi:"relationships"`
	// Type of roles.
	Role string `pulumi:"role"`
	// The Role assignments set for the assignment.
	RoleAssignments *ResourceSetDescriptionResponse `pulumi:"roleAssignments"`
	// Sas Policies set for the assignment.
	SasPolicies *ResourceSetDescriptionResponse `pulumi:"sasPolicies"`
	// The Role assignments set for the assignment.
	Segments *ResourceSetDescriptionResponse `pulumi:"segments"`
	// The hub name.
	TenantId string `pulumi:"tenantId"`
	// Views set for the assignment.
	Views *ResourceSetDescriptionResponse `pulumi:"views"`
	// Widget types set for the assignment.
	WidgetTypes *ResourceSetDescriptionResponse `pulumi:"widgetTypes"`
}

// RoleAssignmentResponseInput is an input type that accepts RoleAssignmentResponseArgs and RoleAssignmentResponseOutput values.
// You can construct a concrete instance of `RoleAssignmentResponseInput` via:
//
//          RoleAssignmentResponseArgs{...}
type RoleAssignmentResponseInput interface {
	pulumi.Input

	ToRoleAssignmentResponseOutput() RoleAssignmentResponseOutput
	ToRoleAssignmentResponseOutputWithContext(context.Context) RoleAssignmentResponseOutput
}

// The Role Assignment definition.
type RoleAssignmentResponseArgs struct {
	// The name of the metadata object.
	AssignmentName pulumi.StringInput `pulumi:"assignmentName"`
	// Widget types set for the assignment.
	ConflationPolicies ResourceSetDescriptionResponsePtrInput `pulumi:"conflationPolicies"`
	// Connectors set for the assignment.
	Connectors ResourceSetDescriptionResponsePtrInput `pulumi:"connectors"`
	// Localized description for the metadata.
	Description pulumi.StringMapInput `pulumi:"description"`
	// Localized display names for the metadata.
	DisplayName pulumi.StringMapInput `pulumi:"displayName"`
	// Interactions set for the assignment.
	Interactions ResourceSetDescriptionResponsePtrInput `pulumi:"interactions"`
	// Kpis set for the assignment.
	Kpis ResourceSetDescriptionResponsePtrInput `pulumi:"kpis"`
	// Links set for the assignment.
	Links ResourceSetDescriptionResponsePtrInput `pulumi:"links"`
	// The principals being assigned to.
	Principals AssignmentPrincipalResponseArrayInput `pulumi:"principals"`
	// Profiles set for the assignment.
	Profiles ResourceSetDescriptionResponsePtrInput `pulumi:"profiles"`
	// Provisioning state.
	ProvisioningState pulumi.StringInput `pulumi:"provisioningState"`
	// The Role assignments set for the relationship links.
	RelationshipLinks ResourceSetDescriptionResponsePtrInput `pulumi:"relationshipLinks"`
	// The Role assignments set for the relationships.
	Relationships ResourceSetDescriptionResponsePtrInput `pulumi:"relationships"`
	// Type of roles.
	Role pulumi.StringInput `pulumi:"role"`
	// The Role assignments set for the assignment.
	RoleAssignments ResourceSetDescriptionResponsePtrInput `pulumi:"roleAssignments"`
	// Sas Policies set for the assignment.
	SasPolicies ResourceSetDescriptionResponsePtrInput `pulumi:"sasPolicies"`
	// The Role assignments set for the assignment.
	Segments ResourceSetDescriptionResponsePtrInput `pulumi:"segments"`
	// The hub name.
	TenantId pulumi.StringInput `pulumi:"tenantId"`
	// Views set for the assignment.
	Views ResourceSetDescriptionResponsePtrInput `pulumi:"views"`
	// Widget types set for the assignment.
	WidgetTypes ResourceSetDescriptionResponsePtrInput `pulumi:"widgetTypes"`
}

func (RoleAssignmentResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RoleAssignmentResponse)(nil)).Elem()
}

func (i RoleAssignmentResponseArgs) ToRoleAssignmentResponseOutput() RoleAssignmentResponseOutput {
	return i.ToRoleAssignmentResponseOutputWithContext(context.Background())
}

func (i RoleAssignmentResponseArgs) ToRoleAssignmentResponseOutputWithContext(ctx context.Context) RoleAssignmentResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RoleAssignmentResponseOutput)
}

func (i RoleAssignmentResponseArgs) ToRoleAssignmentResponsePtrOutput() RoleAssignmentResponsePtrOutput {
	return i.ToRoleAssignmentResponsePtrOutputWithContext(context.Background())
}

func (i RoleAssignmentResponseArgs) ToRoleAssignmentResponsePtrOutputWithContext(ctx context.Context) RoleAssignmentResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RoleAssignmentResponseOutput).ToRoleAssignmentResponsePtrOutputWithContext(ctx)
}

// RoleAssignmentResponsePtrInput is an input type that accepts RoleAssignmentResponseArgs, RoleAssignmentResponsePtr and RoleAssignmentResponsePtrOutput values.
// You can construct a concrete instance of `RoleAssignmentResponsePtrInput` via:
//
//          RoleAssignmentResponseArgs{...}
//
//  or:
//
//          nil
type RoleAssignmentResponsePtrInput interface {
	pulumi.Input

	ToRoleAssignmentResponsePtrOutput() RoleAssignmentResponsePtrOutput
	ToRoleAssignmentResponsePtrOutputWithContext(context.Context) RoleAssignmentResponsePtrOutput
}

type roleAssignmentResponsePtrType RoleAssignmentResponseArgs

func RoleAssignmentResponsePtr(v *RoleAssignmentResponseArgs) RoleAssignmentResponsePtrInput {
	return (*roleAssignmentResponsePtrType)(v)
}

func (*roleAssignmentResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RoleAssignmentResponse)(nil)).Elem()
}

func (i *roleAssignmentResponsePtrType) ToRoleAssignmentResponsePtrOutput() RoleAssignmentResponsePtrOutput {
	return i.ToRoleAssignmentResponsePtrOutputWithContext(context.Background())
}

func (i *roleAssignmentResponsePtrType) ToRoleAssignmentResponsePtrOutputWithContext(ctx context.Context) RoleAssignmentResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RoleAssignmentResponsePtrOutput)
}

// The Role Assignment definition.
type RoleAssignmentResponseOutput struct{ *pulumi.OutputState }

func (RoleAssignmentResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RoleAssignmentResponse)(nil)).Elem()
}

func (o RoleAssignmentResponseOutput) ToRoleAssignmentResponseOutput() RoleAssignmentResponseOutput {
	return o
}

func (o RoleAssignmentResponseOutput) ToRoleAssignmentResponseOutputWithContext(ctx context.Context) RoleAssignmentResponseOutput {
	return o
}

func (o RoleAssignmentResponseOutput) ToRoleAssignmentResponsePtrOutput() RoleAssignmentResponsePtrOutput {
	return o.ToRoleAssignmentResponsePtrOutputWithContext(context.Background())
}

func (o RoleAssignmentResponseOutput) ToRoleAssignmentResponsePtrOutputWithContext(ctx context.Context) RoleAssignmentResponsePtrOutput {
	return o.ApplyT(func(v RoleAssignmentResponse) *RoleAssignmentResponse {
		return &v
	}).(RoleAssignmentResponsePtrOutput)
}

// The name of the metadata object.
func (o RoleAssignmentResponseOutput) AssignmentName() pulumi.StringOutput {
	return o.ApplyT(func(v RoleAssignmentResponse) string { return v.AssignmentName }).(pulumi.StringOutput)
}

// Widget types set for the assignment.
func (o RoleAssignmentResponseOutput) ConflationPolicies() ResourceSetDescriptionResponsePtrOutput {
	return o.ApplyT(func(v RoleAssignmentResponse) *ResourceSetDescriptionResponse { return v.ConflationPolicies }).(ResourceSetDescriptionResponsePtrOutput)
}

// Connectors set for the assignment.
func (o RoleAssignmentResponseOutput) Connectors() ResourceSetDescriptionResponsePtrOutput {
	return o.ApplyT(func(v RoleAssignmentResponse) *ResourceSetDescriptionResponse { return v.Connectors }).(ResourceSetDescriptionResponsePtrOutput)
}

// Localized description for the metadata.
func (o RoleAssignmentResponseOutput) Description() pulumi.StringMapOutput {
	return o.ApplyT(func(v RoleAssignmentResponse) map[string]string { return v.Description }).(pulumi.StringMapOutput)
}

// Localized display names for the metadata.
func (o RoleAssignmentResponseOutput) DisplayName() pulumi.StringMapOutput {
	return o.ApplyT(func(v RoleAssignmentResponse) map[string]string { return v.DisplayName }).(pulumi.StringMapOutput)
}

// Interactions set for the assignment.
func (o RoleAssignmentResponseOutput) Interactions() ResourceSetDescriptionResponsePtrOutput {
	return o.ApplyT(func(v RoleAssignmentResponse) *ResourceSetDescriptionResponse { return v.Interactions }).(ResourceSetDescriptionResponsePtrOutput)
}

// Kpis set for the assignment.
func (o RoleAssignmentResponseOutput) Kpis() ResourceSetDescriptionResponsePtrOutput {
	return o.ApplyT(func(v RoleAssignmentResponse) *ResourceSetDescriptionResponse { return v.Kpis }).(ResourceSetDescriptionResponsePtrOutput)
}

// Links set for the assignment.
func (o RoleAssignmentResponseOutput) Links() ResourceSetDescriptionResponsePtrOutput {
	return o.ApplyT(func(v RoleAssignmentResponse) *ResourceSetDescriptionResponse { return v.Links }).(ResourceSetDescriptionResponsePtrOutput)
}

// The principals being assigned to.
func (o RoleAssignmentResponseOutput) Principals() AssignmentPrincipalResponseArrayOutput {
	return o.ApplyT(func(v RoleAssignmentResponse) []AssignmentPrincipalResponse { return v.Principals }).(AssignmentPrincipalResponseArrayOutput)
}

// Profiles set for the assignment.
func (o RoleAssignmentResponseOutput) Profiles() ResourceSetDescriptionResponsePtrOutput {
	return o.ApplyT(func(v RoleAssignmentResponse) *ResourceSetDescriptionResponse { return v.Profiles }).(ResourceSetDescriptionResponsePtrOutput)
}

// Provisioning state.
func (o RoleAssignmentResponseOutput) ProvisioningState() pulumi.StringOutput {
	return o.ApplyT(func(v RoleAssignmentResponse) string { return v.ProvisioningState }).(pulumi.StringOutput)
}

// The Role assignments set for the relationship links.
func (o RoleAssignmentResponseOutput) RelationshipLinks() ResourceSetDescriptionResponsePtrOutput {
	return o.ApplyT(func(v RoleAssignmentResponse) *ResourceSetDescriptionResponse { return v.RelationshipLinks }).(ResourceSetDescriptionResponsePtrOutput)
}

// The Role assignments set for the relationships.
func (o RoleAssignmentResponseOutput) Relationships() ResourceSetDescriptionResponsePtrOutput {
	return o.ApplyT(func(v RoleAssignmentResponse) *ResourceSetDescriptionResponse { return v.Relationships }).(ResourceSetDescriptionResponsePtrOutput)
}

// Type of roles.
func (o RoleAssignmentResponseOutput) Role() pulumi.StringOutput {
	return o.ApplyT(func(v RoleAssignmentResponse) string { return v.Role }).(pulumi.StringOutput)
}

// The Role assignments set for the assignment.
func (o RoleAssignmentResponseOutput) RoleAssignments() ResourceSetDescriptionResponsePtrOutput {
	return o.ApplyT(func(v RoleAssignmentResponse) *ResourceSetDescriptionResponse { return v.RoleAssignments }).(ResourceSetDescriptionResponsePtrOutput)
}

// Sas Policies set for the assignment.
func (o RoleAssignmentResponseOutput) SasPolicies() ResourceSetDescriptionResponsePtrOutput {
	return o.ApplyT(func(v RoleAssignmentResponse) *ResourceSetDescriptionResponse { return v.SasPolicies }).(ResourceSetDescriptionResponsePtrOutput)
}

// The Role assignments set for the assignment.
func (o RoleAssignmentResponseOutput) Segments() ResourceSetDescriptionResponsePtrOutput {
	return o.ApplyT(func(v RoleAssignmentResponse) *ResourceSetDescriptionResponse { return v.Segments }).(ResourceSetDescriptionResponsePtrOutput)
}

// The hub name.
func (o RoleAssignmentResponseOutput) TenantId() pulumi.StringOutput {
	return o.ApplyT(func(v RoleAssignmentResponse) string { return v.TenantId }).(pulumi.StringOutput)
}

// Views set for the assignment.
func (o RoleAssignmentResponseOutput) Views() ResourceSetDescriptionResponsePtrOutput {
	return o.ApplyT(func(v RoleAssignmentResponse) *ResourceSetDescriptionResponse { return v.Views }).(ResourceSetDescriptionResponsePtrOutput)
}

// Widget types set for the assignment.
func (o RoleAssignmentResponseOutput) WidgetTypes() ResourceSetDescriptionResponsePtrOutput {
	return o.ApplyT(func(v RoleAssignmentResponse) *ResourceSetDescriptionResponse { return v.WidgetTypes }).(ResourceSetDescriptionResponsePtrOutput)
}

type RoleAssignmentResponsePtrOutput struct{ *pulumi.OutputState }

func (RoleAssignmentResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RoleAssignmentResponse)(nil)).Elem()
}

func (o RoleAssignmentResponsePtrOutput) ToRoleAssignmentResponsePtrOutput() RoleAssignmentResponsePtrOutput {
	return o
}

func (o RoleAssignmentResponsePtrOutput) ToRoleAssignmentResponsePtrOutputWithContext(ctx context.Context) RoleAssignmentResponsePtrOutput {
	return o
}

func (o RoleAssignmentResponsePtrOutput) Elem() RoleAssignmentResponseOutput {
	return o.ApplyT(func(v *RoleAssignmentResponse) RoleAssignmentResponse { return *v }).(RoleAssignmentResponseOutput)
}

// The name of the metadata object.
func (o RoleAssignmentResponsePtrOutput) AssignmentName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RoleAssignmentResponse) *string {
		if v == nil {
			return nil
		}
		return &v.AssignmentName
	}).(pulumi.StringPtrOutput)
}

// Widget types set for the assignment.
func (o RoleAssignmentResponsePtrOutput) ConflationPolicies() ResourceSetDescriptionResponsePtrOutput {
	return o.ApplyT(func(v *RoleAssignmentResponse) *ResourceSetDescriptionResponse {
		if v == nil {
			return nil
		}
		return v.ConflationPolicies
	}).(ResourceSetDescriptionResponsePtrOutput)
}

// Connectors set for the assignment.
func (o RoleAssignmentResponsePtrOutput) Connectors() ResourceSetDescriptionResponsePtrOutput {
	return o.ApplyT(func(v *RoleAssignmentResponse) *ResourceSetDescriptionResponse {
		if v == nil {
			return nil
		}
		return v.Connectors
	}).(ResourceSetDescriptionResponsePtrOutput)
}

// Localized description for the metadata.
func (o RoleAssignmentResponsePtrOutput) Description() pulumi.StringMapOutput {
	return o.ApplyT(func(v *RoleAssignmentResponse) map[string]string {
		if v == nil {
			return nil
		}
		return v.Description
	}).(pulumi.StringMapOutput)
}

// Localized display names for the metadata.
func (o RoleAssignmentResponsePtrOutput) DisplayName() pulumi.StringMapOutput {
	return o.ApplyT(func(v *RoleAssignmentResponse) map[string]string {
		if v == nil {
			return nil
		}
		return v.DisplayName
	}).(pulumi.StringMapOutput)
}

// Interactions set for the assignment.
func (o RoleAssignmentResponsePtrOutput) Interactions() ResourceSetDescriptionResponsePtrOutput {
	return o.ApplyT(func(v *RoleAssignmentResponse) *ResourceSetDescriptionResponse {
		if v == nil {
			return nil
		}
		return v.Interactions
	}).(ResourceSetDescriptionResponsePtrOutput)
}

// Kpis set for the assignment.
func (o RoleAssignmentResponsePtrOutput) Kpis() ResourceSetDescriptionResponsePtrOutput {
	return o.ApplyT(func(v *RoleAssignmentResponse) *ResourceSetDescriptionResponse {
		if v == nil {
			return nil
		}
		return v.Kpis
	}).(ResourceSetDescriptionResponsePtrOutput)
}

// Links set for the assignment.
func (o RoleAssignmentResponsePtrOutput) Links() ResourceSetDescriptionResponsePtrOutput {
	return o.ApplyT(func(v *RoleAssignmentResponse) *ResourceSetDescriptionResponse {
		if v == nil {
			return nil
		}
		return v.Links
	}).(ResourceSetDescriptionResponsePtrOutput)
}

// The principals being assigned to.
func (o RoleAssignmentResponsePtrOutput) Principals() AssignmentPrincipalResponseArrayOutput {
	return o.ApplyT(func(v *RoleAssignmentResponse) []AssignmentPrincipalResponse {
		if v == nil {
			return nil
		}
		return v.Principals
	}).(AssignmentPrincipalResponseArrayOutput)
}

// Profiles set for the assignment.
func (o RoleAssignmentResponsePtrOutput) Profiles() ResourceSetDescriptionResponsePtrOutput {
	return o.ApplyT(func(v *RoleAssignmentResponse) *ResourceSetDescriptionResponse {
		if v == nil {
			return nil
		}
		return v.Profiles
	}).(ResourceSetDescriptionResponsePtrOutput)
}

// Provisioning state.
func (o RoleAssignmentResponsePtrOutput) ProvisioningState() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RoleAssignmentResponse) *string {
		if v == nil {
			return nil
		}
		return &v.ProvisioningState
	}).(pulumi.StringPtrOutput)
}

// The Role assignments set for the relationship links.
func (o RoleAssignmentResponsePtrOutput) RelationshipLinks() ResourceSetDescriptionResponsePtrOutput {
	return o.ApplyT(func(v *RoleAssignmentResponse) *ResourceSetDescriptionResponse {
		if v == nil {
			return nil
		}
		return v.RelationshipLinks
	}).(ResourceSetDescriptionResponsePtrOutput)
}

// The Role assignments set for the relationships.
func (o RoleAssignmentResponsePtrOutput) Relationships() ResourceSetDescriptionResponsePtrOutput {
	return o.ApplyT(func(v *RoleAssignmentResponse) *ResourceSetDescriptionResponse {
		if v == nil {
			return nil
		}
		return v.Relationships
	}).(ResourceSetDescriptionResponsePtrOutput)
}

// Type of roles.
func (o RoleAssignmentResponsePtrOutput) Role() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RoleAssignmentResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Role
	}).(pulumi.StringPtrOutput)
}

// The Role assignments set for the assignment.
func (o RoleAssignmentResponsePtrOutput) RoleAssignments() ResourceSetDescriptionResponsePtrOutput {
	return o.ApplyT(func(v *RoleAssignmentResponse) *ResourceSetDescriptionResponse {
		if v == nil {
			return nil
		}
		return v.RoleAssignments
	}).(ResourceSetDescriptionResponsePtrOutput)
}

// Sas Policies set for the assignment.
func (o RoleAssignmentResponsePtrOutput) SasPolicies() ResourceSetDescriptionResponsePtrOutput {
	return o.ApplyT(func(v *RoleAssignmentResponse) *ResourceSetDescriptionResponse {
		if v == nil {
			return nil
		}
		return v.SasPolicies
	}).(ResourceSetDescriptionResponsePtrOutput)
}

// The Role assignments set for the assignment.
func (o RoleAssignmentResponsePtrOutput) Segments() ResourceSetDescriptionResponsePtrOutput {
	return o.ApplyT(func(v *RoleAssignmentResponse) *ResourceSetDescriptionResponse {
		if v == nil {
			return nil
		}
		return v.Segments
	}).(ResourceSetDescriptionResponsePtrOutput)
}

// The hub name.
func (o RoleAssignmentResponsePtrOutput) TenantId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RoleAssignmentResponse) *string {
		if v == nil {
			return nil
		}
		return &v.TenantId
	}).(pulumi.StringPtrOutput)
}

// Views set for the assignment.
func (o RoleAssignmentResponsePtrOutput) Views() ResourceSetDescriptionResponsePtrOutput {
	return o.ApplyT(func(v *RoleAssignmentResponse) *ResourceSetDescriptionResponse {
		if v == nil {
			return nil
		}
		return v.Views
	}).(ResourceSetDescriptionResponsePtrOutput)
}

// Widget types set for the assignment.
func (o RoleAssignmentResponsePtrOutput) WidgetTypes() ResourceSetDescriptionResponsePtrOutput {
	return o.ApplyT(func(v *RoleAssignmentResponse) *ResourceSetDescriptionResponse {
		if v == nil {
			return nil
		}
		return v.WidgetTypes
	}).(ResourceSetDescriptionResponsePtrOutput)
}

// Property/Properties which represent a unique ID.
type StrongId struct {
	// Localized descriptions.
	Description map[string]string `pulumi:"description"`
	// Localized display name.
	DisplayName map[string]string `pulumi:"displayName"`
	// The properties which make up the unique ID.
	KeyPropertyNames []string `pulumi:"keyPropertyNames"`
	// The Name identifying the strong ID.
	StrongIdName string `pulumi:"strongIdName"`
}

// StrongIdInput is an input type that accepts StrongIdArgs and StrongIdOutput values.
// You can construct a concrete instance of `StrongIdInput` via:
//
//          StrongIdArgs{...}
type StrongIdInput interface {
	pulumi.Input

	ToStrongIdOutput() StrongIdOutput
	ToStrongIdOutputWithContext(context.Context) StrongIdOutput
}

// Property/Properties which represent a unique ID.
type StrongIdArgs struct {
	// Localized descriptions.
	Description pulumi.StringMapInput `pulumi:"description"`
	// Localized display name.
	DisplayName pulumi.StringMapInput `pulumi:"displayName"`
	// The properties which make up the unique ID.
	KeyPropertyNames pulumi.StringArrayInput `pulumi:"keyPropertyNames"`
	// The Name identifying the strong ID.
	StrongIdName pulumi.StringInput `pulumi:"strongIdName"`
}

func (StrongIdArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*StrongId)(nil)).Elem()
}

func (i StrongIdArgs) ToStrongIdOutput() StrongIdOutput {
	return i.ToStrongIdOutputWithContext(context.Background())
}

func (i StrongIdArgs) ToStrongIdOutputWithContext(ctx context.Context) StrongIdOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StrongIdOutput)
}

// StrongIdArrayInput is an input type that accepts StrongIdArray and StrongIdArrayOutput values.
// You can construct a concrete instance of `StrongIdArrayInput` via:
//
//          StrongIdArray{ StrongIdArgs{...} }
type StrongIdArrayInput interface {
	pulumi.Input

	ToStrongIdArrayOutput() StrongIdArrayOutput
	ToStrongIdArrayOutputWithContext(context.Context) StrongIdArrayOutput
}

type StrongIdArray []StrongIdInput

func (StrongIdArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]StrongId)(nil)).Elem()
}

func (i StrongIdArray) ToStrongIdArrayOutput() StrongIdArrayOutput {
	return i.ToStrongIdArrayOutputWithContext(context.Background())
}

func (i StrongIdArray) ToStrongIdArrayOutputWithContext(ctx context.Context) StrongIdArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StrongIdArrayOutput)
}

// Property/Properties which represent a unique ID.
type StrongIdOutput struct{ *pulumi.OutputState }

func (StrongIdOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StrongId)(nil)).Elem()
}

func (o StrongIdOutput) ToStrongIdOutput() StrongIdOutput {
	return o
}

func (o StrongIdOutput) ToStrongIdOutputWithContext(ctx context.Context) StrongIdOutput {
	return o
}

// Localized descriptions.
func (o StrongIdOutput) Description() pulumi.StringMapOutput {
	return o.ApplyT(func(v StrongId) map[string]string { return v.Description }).(pulumi.StringMapOutput)
}

// Localized display name.
func (o StrongIdOutput) DisplayName() pulumi.StringMapOutput {
	return o.ApplyT(func(v StrongId) map[string]string { return v.DisplayName }).(pulumi.StringMapOutput)
}

// The properties which make up the unique ID.
func (o StrongIdOutput) KeyPropertyNames() pulumi.StringArrayOutput {
	return o.ApplyT(func(v StrongId) []string { return v.KeyPropertyNames }).(pulumi.StringArrayOutput)
}

// The Name identifying the strong ID.
func (o StrongIdOutput) StrongIdName() pulumi.StringOutput {
	return o.ApplyT(func(v StrongId) string { return v.StrongIdName }).(pulumi.StringOutput)
}

type StrongIdArrayOutput struct{ *pulumi.OutputState }

func (StrongIdArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]StrongId)(nil)).Elem()
}

func (o StrongIdArrayOutput) ToStrongIdArrayOutput() StrongIdArrayOutput {
	return o
}

func (o StrongIdArrayOutput) ToStrongIdArrayOutputWithContext(ctx context.Context) StrongIdArrayOutput {
	return o
}

func (o StrongIdArrayOutput) Index(i pulumi.IntInput) StrongIdOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) StrongId {
		return vs[0].([]StrongId)[vs[1].(int)]
	}).(StrongIdOutput)
}

// Property/Properties which represent a unique ID.
type StrongIdResponse struct {
	// Localized descriptions.
	Description map[string]string `pulumi:"description"`
	// Localized display name.
	DisplayName map[string]string `pulumi:"displayName"`
	// The properties which make up the unique ID.
	KeyPropertyNames []string `pulumi:"keyPropertyNames"`
	// The Name identifying the strong ID.
	StrongIdName string `pulumi:"strongIdName"`
}

// StrongIdResponseInput is an input type that accepts StrongIdResponseArgs and StrongIdResponseOutput values.
// You can construct a concrete instance of `StrongIdResponseInput` via:
//
//          StrongIdResponseArgs{...}
type StrongIdResponseInput interface {
	pulumi.Input

	ToStrongIdResponseOutput() StrongIdResponseOutput
	ToStrongIdResponseOutputWithContext(context.Context) StrongIdResponseOutput
}

// Property/Properties which represent a unique ID.
type StrongIdResponseArgs struct {
	// Localized descriptions.
	Description pulumi.StringMapInput `pulumi:"description"`
	// Localized display name.
	DisplayName pulumi.StringMapInput `pulumi:"displayName"`
	// The properties which make up the unique ID.
	KeyPropertyNames pulumi.StringArrayInput `pulumi:"keyPropertyNames"`
	// The Name identifying the strong ID.
	StrongIdName pulumi.StringInput `pulumi:"strongIdName"`
}

func (StrongIdResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*StrongIdResponse)(nil)).Elem()
}

func (i StrongIdResponseArgs) ToStrongIdResponseOutput() StrongIdResponseOutput {
	return i.ToStrongIdResponseOutputWithContext(context.Background())
}

func (i StrongIdResponseArgs) ToStrongIdResponseOutputWithContext(ctx context.Context) StrongIdResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StrongIdResponseOutput)
}

// StrongIdResponseArrayInput is an input type that accepts StrongIdResponseArray and StrongIdResponseArrayOutput values.
// You can construct a concrete instance of `StrongIdResponseArrayInput` via:
//
//          StrongIdResponseArray{ StrongIdResponseArgs{...} }
type StrongIdResponseArrayInput interface {
	pulumi.Input

	ToStrongIdResponseArrayOutput() StrongIdResponseArrayOutput
	ToStrongIdResponseArrayOutputWithContext(context.Context) StrongIdResponseArrayOutput
}

type StrongIdResponseArray []StrongIdResponseInput

func (StrongIdResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]StrongIdResponse)(nil)).Elem()
}

func (i StrongIdResponseArray) ToStrongIdResponseArrayOutput() StrongIdResponseArrayOutput {
	return i.ToStrongIdResponseArrayOutputWithContext(context.Background())
}

func (i StrongIdResponseArray) ToStrongIdResponseArrayOutputWithContext(ctx context.Context) StrongIdResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StrongIdResponseArrayOutput)
}

// Property/Properties which represent a unique ID.
type StrongIdResponseOutput struct{ *pulumi.OutputState }

func (StrongIdResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StrongIdResponse)(nil)).Elem()
}

func (o StrongIdResponseOutput) ToStrongIdResponseOutput() StrongIdResponseOutput {
	return o
}

func (o StrongIdResponseOutput) ToStrongIdResponseOutputWithContext(ctx context.Context) StrongIdResponseOutput {
	return o
}

// Localized descriptions.
func (o StrongIdResponseOutput) Description() pulumi.StringMapOutput {
	return o.ApplyT(func(v StrongIdResponse) map[string]string { return v.Description }).(pulumi.StringMapOutput)
}

// Localized display name.
func (o StrongIdResponseOutput) DisplayName() pulumi.StringMapOutput {
	return o.ApplyT(func(v StrongIdResponse) map[string]string { return v.DisplayName }).(pulumi.StringMapOutput)
}

// The properties which make up the unique ID.
func (o StrongIdResponseOutput) KeyPropertyNames() pulumi.StringArrayOutput {
	return o.ApplyT(func(v StrongIdResponse) []string { return v.KeyPropertyNames }).(pulumi.StringArrayOutput)
}

// The Name identifying the strong ID.
func (o StrongIdResponseOutput) StrongIdName() pulumi.StringOutput {
	return o.ApplyT(func(v StrongIdResponse) string { return v.StrongIdName }).(pulumi.StringOutput)
}

type StrongIdResponseArrayOutput struct{ *pulumi.OutputState }

func (StrongIdResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]StrongIdResponse)(nil)).Elem()
}

func (o StrongIdResponseArrayOutput) ToStrongIdResponseArrayOutput() StrongIdResponseArrayOutput {
	return o
}

func (o StrongIdResponseArrayOutput) ToStrongIdResponseArrayOutputWithContext(ctx context.Context) StrongIdResponseArrayOutput {
	return o
}

func (o StrongIdResponseArrayOutput) Index(i pulumi.IntInput) StrongIdResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) StrongIdResponse {
		return vs[0].([]StrongIdResponse)[vs[1].(int)]
	}).(StrongIdResponseOutput)
}

// Metadata for a Link's property mapping.
type TypePropertiesMapping struct {
	// Link type.
	LinkType *string `pulumi:"linkType"`
	//  Property name on the source Entity Type.
	SourcePropertyName string `pulumi:"sourcePropertyName"`
	// Property name on the target Entity Type.
	TargetPropertyName string `pulumi:"targetPropertyName"`
}

// TypePropertiesMappingInput is an input type that accepts TypePropertiesMappingArgs and TypePropertiesMappingOutput values.
// You can construct a concrete instance of `TypePropertiesMappingInput` via:
//
//          TypePropertiesMappingArgs{...}
type TypePropertiesMappingInput interface {
	pulumi.Input

	ToTypePropertiesMappingOutput() TypePropertiesMappingOutput
	ToTypePropertiesMappingOutputWithContext(context.Context) TypePropertiesMappingOutput
}

// Metadata for a Link's property mapping.
type TypePropertiesMappingArgs struct {
	// Link type.
	LinkType pulumi.StringPtrInput `pulumi:"linkType"`
	//  Property name on the source Entity Type.
	SourcePropertyName pulumi.StringInput `pulumi:"sourcePropertyName"`
	// Property name on the target Entity Type.
	TargetPropertyName pulumi.StringInput `pulumi:"targetPropertyName"`
}

func (TypePropertiesMappingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TypePropertiesMapping)(nil)).Elem()
}

func (i TypePropertiesMappingArgs) ToTypePropertiesMappingOutput() TypePropertiesMappingOutput {
	return i.ToTypePropertiesMappingOutputWithContext(context.Background())
}

func (i TypePropertiesMappingArgs) ToTypePropertiesMappingOutputWithContext(ctx context.Context) TypePropertiesMappingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TypePropertiesMappingOutput)
}

// TypePropertiesMappingArrayInput is an input type that accepts TypePropertiesMappingArray and TypePropertiesMappingArrayOutput values.
// You can construct a concrete instance of `TypePropertiesMappingArrayInput` via:
//
//          TypePropertiesMappingArray{ TypePropertiesMappingArgs{...} }
type TypePropertiesMappingArrayInput interface {
	pulumi.Input

	ToTypePropertiesMappingArrayOutput() TypePropertiesMappingArrayOutput
	ToTypePropertiesMappingArrayOutputWithContext(context.Context) TypePropertiesMappingArrayOutput
}

type TypePropertiesMappingArray []TypePropertiesMappingInput

func (TypePropertiesMappingArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TypePropertiesMapping)(nil)).Elem()
}

func (i TypePropertiesMappingArray) ToTypePropertiesMappingArrayOutput() TypePropertiesMappingArrayOutput {
	return i.ToTypePropertiesMappingArrayOutputWithContext(context.Background())
}

func (i TypePropertiesMappingArray) ToTypePropertiesMappingArrayOutputWithContext(ctx context.Context) TypePropertiesMappingArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TypePropertiesMappingArrayOutput)
}

// Metadata for a Link's property mapping.
type TypePropertiesMappingOutput struct{ *pulumi.OutputState }

func (TypePropertiesMappingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TypePropertiesMapping)(nil)).Elem()
}

func (o TypePropertiesMappingOutput) ToTypePropertiesMappingOutput() TypePropertiesMappingOutput {
	return o
}

func (o TypePropertiesMappingOutput) ToTypePropertiesMappingOutputWithContext(ctx context.Context) TypePropertiesMappingOutput {
	return o
}

// Link type.
func (o TypePropertiesMappingOutput) LinkType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TypePropertiesMapping) *string { return v.LinkType }).(pulumi.StringPtrOutput)
}

//  Property name on the source Entity Type.
func (o TypePropertiesMappingOutput) SourcePropertyName() pulumi.StringOutput {
	return o.ApplyT(func(v TypePropertiesMapping) string { return v.SourcePropertyName }).(pulumi.StringOutput)
}

// Property name on the target Entity Type.
func (o TypePropertiesMappingOutput) TargetPropertyName() pulumi.StringOutput {
	return o.ApplyT(func(v TypePropertiesMapping) string { return v.TargetPropertyName }).(pulumi.StringOutput)
}

type TypePropertiesMappingArrayOutput struct{ *pulumi.OutputState }

func (TypePropertiesMappingArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TypePropertiesMapping)(nil)).Elem()
}

func (o TypePropertiesMappingArrayOutput) ToTypePropertiesMappingArrayOutput() TypePropertiesMappingArrayOutput {
	return o
}

func (o TypePropertiesMappingArrayOutput) ToTypePropertiesMappingArrayOutputWithContext(ctx context.Context) TypePropertiesMappingArrayOutput {
	return o
}

func (o TypePropertiesMappingArrayOutput) Index(i pulumi.IntInput) TypePropertiesMappingOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TypePropertiesMapping {
		return vs[0].([]TypePropertiesMapping)[vs[1].(int)]
	}).(TypePropertiesMappingOutput)
}

// Metadata for a Link's property mapping.
type TypePropertiesMappingResponse struct {
	// Link type.
	LinkType *string `pulumi:"linkType"`
	//  Property name on the source Entity Type.
	SourcePropertyName string `pulumi:"sourcePropertyName"`
	// Property name on the target Entity Type.
	TargetPropertyName string `pulumi:"targetPropertyName"`
}

// TypePropertiesMappingResponseInput is an input type that accepts TypePropertiesMappingResponseArgs and TypePropertiesMappingResponseOutput values.
// You can construct a concrete instance of `TypePropertiesMappingResponseInput` via:
//
//          TypePropertiesMappingResponseArgs{...}
type TypePropertiesMappingResponseInput interface {
	pulumi.Input

	ToTypePropertiesMappingResponseOutput() TypePropertiesMappingResponseOutput
	ToTypePropertiesMappingResponseOutputWithContext(context.Context) TypePropertiesMappingResponseOutput
}

// Metadata for a Link's property mapping.
type TypePropertiesMappingResponseArgs struct {
	// Link type.
	LinkType pulumi.StringPtrInput `pulumi:"linkType"`
	//  Property name on the source Entity Type.
	SourcePropertyName pulumi.StringInput `pulumi:"sourcePropertyName"`
	// Property name on the target Entity Type.
	TargetPropertyName pulumi.StringInput `pulumi:"targetPropertyName"`
}

func (TypePropertiesMappingResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TypePropertiesMappingResponse)(nil)).Elem()
}

func (i TypePropertiesMappingResponseArgs) ToTypePropertiesMappingResponseOutput() TypePropertiesMappingResponseOutput {
	return i.ToTypePropertiesMappingResponseOutputWithContext(context.Background())
}

func (i TypePropertiesMappingResponseArgs) ToTypePropertiesMappingResponseOutputWithContext(ctx context.Context) TypePropertiesMappingResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TypePropertiesMappingResponseOutput)
}

// TypePropertiesMappingResponseArrayInput is an input type that accepts TypePropertiesMappingResponseArray and TypePropertiesMappingResponseArrayOutput values.
// You can construct a concrete instance of `TypePropertiesMappingResponseArrayInput` via:
//
//          TypePropertiesMappingResponseArray{ TypePropertiesMappingResponseArgs{...} }
type TypePropertiesMappingResponseArrayInput interface {
	pulumi.Input

	ToTypePropertiesMappingResponseArrayOutput() TypePropertiesMappingResponseArrayOutput
	ToTypePropertiesMappingResponseArrayOutputWithContext(context.Context) TypePropertiesMappingResponseArrayOutput
}

type TypePropertiesMappingResponseArray []TypePropertiesMappingResponseInput

func (TypePropertiesMappingResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TypePropertiesMappingResponse)(nil)).Elem()
}

func (i TypePropertiesMappingResponseArray) ToTypePropertiesMappingResponseArrayOutput() TypePropertiesMappingResponseArrayOutput {
	return i.ToTypePropertiesMappingResponseArrayOutputWithContext(context.Background())
}

func (i TypePropertiesMappingResponseArray) ToTypePropertiesMappingResponseArrayOutputWithContext(ctx context.Context) TypePropertiesMappingResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TypePropertiesMappingResponseArrayOutput)
}

// Metadata for a Link's property mapping.
type TypePropertiesMappingResponseOutput struct{ *pulumi.OutputState }

func (TypePropertiesMappingResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TypePropertiesMappingResponse)(nil)).Elem()
}

func (o TypePropertiesMappingResponseOutput) ToTypePropertiesMappingResponseOutput() TypePropertiesMappingResponseOutput {
	return o
}

func (o TypePropertiesMappingResponseOutput) ToTypePropertiesMappingResponseOutputWithContext(ctx context.Context) TypePropertiesMappingResponseOutput {
	return o
}

// Link type.
func (o TypePropertiesMappingResponseOutput) LinkType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TypePropertiesMappingResponse) *string { return v.LinkType }).(pulumi.StringPtrOutput)
}

//  Property name on the source Entity Type.
func (o TypePropertiesMappingResponseOutput) SourcePropertyName() pulumi.StringOutput {
	return o.ApplyT(func(v TypePropertiesMappingResponse) string { return v.SourcePropertyName }).(pulumi.StringOutput)
}

// Property name on the target Entity Type.
func (o TypePropertiesMappingResponseOutput) TargetPropertyName() pulumi.StringOutput {
	return o.ApplyT(func(v TypePropertiesMappingResponse) string { return v.TargetPropertyName }).(pulumi.StringOutput)
}

type TypePropertiesMappingResponseArrayOutput struct{ *pulumi.OutputState }

func (TypePropertiesMappingResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TypePropertiesMappingResponse)(nil)).Elem()
}

func (o TypePropertiesMappingResponseArrayOutput) ToTypePropertiesMappingResponseArrayOutput() TypePropertiesMappingResponseArrayOutput {
	return o
}

func (o TypePropertiesMappingResponseArrayOutput) ToTypePropertiesMappingResponseArrayOutputWithContext(ctx context.Context) TypePropertiesMappingResponseArrayOutput {
	return o
}

func (o TypePropertiesMappingResponseArrayOutput) Index(i pulumi.IntInput) TypePropertiesMappingResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TypePropertiesMappingResponse {
		return vs[0].([]TypePropertiesMappingResponse)[vs[1].(int)]
	}).(TypePropertiesMappingResponseOutput)
}

// The view in Customer 360 web application.
type ViewResponse struct {
	// Date time when view was last modified.
	Changed string `pulumi:"changed"`
	// Date time when view was created.
	Created string `pulumi:"created"`
	// View definition.
	Definition string `pulumi:"definition"`
	// Localized display name for the view.
	DisplayName map[string]string `pulumi:"displayName"`
	// the hub name.
	TenantId string `pulumi:"tenantId"`
	// the user ID.
	UserId *string `pulumi:"userId"`
	// Name of the view.
	ViewName string `pulumi:"viewName"`
}

// ViewResponseInput is an input type that accepts ViewResponseArgs and ViewResponseOutput values.
// You can construct a concrete instance of `ViewResponseInput` via:
//
//          ViewResponseArgs{...}
type ViewResponseInput interface {
	pulumi.Input

	ToViewResponseOutput() ViewResponseOutput
	ToViewResponseOutputWithContext(context.Context) ViewResponseOutput
}

// The view in Customer 360 web application.
type ViewResponseArgs struct {
	// Date time when view was last modified.
	Changed pulumi.StringInput `pulumi:"changed"`
	// Date time when view was created.
	Created pulumi.StringInput `pulumi:"created"`
	// View definition.
	Definition pulumi.StringInput `pulumi:"definition"`
	// Localized display name for the view.
	DisplayName pulumi.StringMapInput `pulumi:"displayName"`
	// the hub name.
	TenantId pulumi.StringInput `pulumi:"tenantId"`
	// the user ID.
	UserId pulumi.StringPtrInput `pulumi:"userId"`
	// Name of the view.
	ViewName pulumi.StringInput `pulumi:"viewName"`
}

func (ViewResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ViewResponse)(nil)).Elem()
}

func (i ViewResponseArgs) ToViewResponseOutput() ViewResponseOutput {
	return i.ToViewResponseOutputWithContext(context.Background())
}

func (i ViewResponseArgs) ToViewResponseOutputWithContext(ctx context.Context) ViewResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ViewResponseOutput)
}

func (i ViewResponseArgs) ToViewResponsePtrOutput() ViewResponsePtrOutput {
	return i.ToViewResponsePtrOutputWithContext(context.Background())
}

func (i ViewResponseArgs) ToViewResponsePtrOutputWithContext(ctx context.Context) ViewResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ViewResponseOutput).ToViewResponsePtrOutputWithContext(ctx)
}

// ViewResponsePtrInput is an input type that accepts ViewResponseArgs, ViewResponsePtr and ViewResponsePtrOutput values.
// You can construct a concrete instance of `ViewResponsePtrInput` via:
//
//          ViewResponseArgs{...}
//
//  or:
//
//          nil
type ViewResponsePtrInput interface {
	pulumi.Input

	ToViewResponsePtrOutput() ViewResponsePtrOutput
	ToViewResponsePtrOutputWithContext(context.Context) ViewResponsePtrOutput
}

type viewResponsePtrType ViewResponseArgs

func ViewResponsePtr(v *ViewResponseArgs) ViewResponsePtrInput {
	return (*viewResponsePtrType)(v)
}

func (*viewResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ViewResponse)(nil)).Elem()
}

func (i *viewResponsePtrType) ToViewResponsePtrOutput() ViewResponsePtrOutput {
	return i.ToViewResponsePtrOutputWithContext(context.Background())
}

func (i *viewResponsePtrType) ToViewResponsePtrOutputWithContext(ctx context.Context) ViewResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ViewResponsePtrOutput)
}

// The view in Customer 360 web application.
type ViewResponseOutput struct{ *pulumi.OutputState }

func (ViewResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ViewResponse)(nil)).Elem()
}

func (o ViewResponseOutput) ToViewResponseOutput() ViewResponseOutput {
	return o
}

func (o ViewResponseOutput) ToViewResponseOutputWithContext(ctx context.Context) ViewResponseOutput {
	return o
}

func (o ViewResponseOutput) ToViewResponsePtrOutput() ViewResponsePtrOutput {
	return o.ToViewResponsePtrOutputWithContext(context.Background())
}

func (o ViewResponseOutput) ToViewResponsePtrOutputWithContext(ctx context.Context) ViewResponsePtrOutput {
	return o.ApplyT(func(v ViewResponse) *ViewResponse {
		return &v
	}).(ViewResponsePtrOutput)
}

// Date time when view was last modified.
func (o ViewResponseOutput) Changed() pulumi.StringOutput {
	return o.ApplyT(func(v ViewResponse) string { return v.Changed }).(pulumi.StringOutput)
}

// Date time when view was created.
func (o ViewResponseOutput) Created() pulumi.StringOutput {
	return o.ApplyT(func(v ViewResponse) string { return v.Created }).(pulumi.StringOutput)
}

// View definition.
func (o ViewResponseOutput) Definition() pulumi.StringOutput {
	return o.ApplyT(func(v ViewResponse) string { return v.Definition }).(pulumi.StringOutput)
}

// Localized display name for the view.
func (o ViewResponseOutput) DisplayName() pulumi.StringMapOutput {
	return o.ApplyT(func(v ViewResponse) map[string]string { return v.DisplayName }).(pulumi.StringMapOutput)
}

// the hub name.
func (o ViewResponseOutput) TenantId() pulumi.StringOutput {
	return o.ApplyT(func(v ViewResponse) string { return v.TenantId }).(pulumi.StringOutput)
}

// the user ID.
func (o ViewResponseOutput) UserId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ViewResponse) *string { return v.UserId }).(pulumi.StringPtrOutput)
}

// Name of the view.
func (o ViewResponseOutput) ViewName() pulumi.StringOutput {
	return o.ApplyT(func(v ViewResponse) string { return v.ViewName }).(pulumi.StringOutput)
}

type ViewResponsePtrOutput struct{ *pulumi.OutputState }

func (ViewResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ViewResponse)(nil)).Elem()
}

func (o ViewResponsePtrOutput) ToViewResponsePtrOutput() ViewResponsePtrOutput {
	return o
}

func (o ViewResponsePtrOutput) ToViewResponsePtrOutputWithContext(ctx context.Context) ViewResponsePtrOutput {
	return o
}

func (o ViewResponsePtrOutput) Elem() ViewResponseOutput {
	return o.ApplyT(func(v *ViewResponse) ViewResponse { return *v }).(ViewResponseOutput)
}

// Date time when view was last modified.
func (o ViewResponsePtrOutput) Changed() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ViewResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Changed
	}).(pulumi.StringPtrOutput)
}

// Date time when view was created.
func (o ViewResponsePtrOutput) Created() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ViewResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Created
	}).(pulumi.StringPtrOutput)
}

// View definition.
func (o ViewResponsePtrOutput) Definition() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ViewResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Definition
	}).(pulumi.StringPtrOutput)
}

// Localized display name for the view.
func (o ViewResponsePtrOutput) DisplayName() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ViewResponse) map[string]string {
		if v == nil {
			return nil
		}
		return v.DisplayName
	}).(pulumi.StringMapOutput)
}

// the hub name.
func (o ViewResponsePtrOutput) TenantId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ViewResponse) *string {
		if v == nil {
			return nil
		}
		return &v.TenantId
	}).(pulumi.StringPtrOutput)
}

// the user ID.
func (o ViewResponsePtrOutput) UserId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ViewResponse) *string {
		if v == nil {
			return nil
		}
		return v.UserId
	}).(pulumi.StringPtrOutput)
}

// Name of the view.
func (o ViewResponsePtrOutput) ViewName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ViewResponse) *string {
		if v == nil {
			return nil
		}
		return &v.ViewName
	}).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(AssignmentPrincipalOutput{})
	pulumi.RegisterOutputType(AssignmentPrincipalArrayOutput{})
	pulumi.RegisterOutputType(AssignmentPrincipalResponseOutput{})
	pulumi.RegisterOutputType(AssignmentPrincipalResponseArrayOutput{})
	pulumi.RegisterOutputType(ConnectorMappingAvailabilityOutput{})
	pulumi.RegisterOutputType(ConnectorMappingAvailabilityPtrOutput{})
	pulumi.RegisterOutputType(ConnectorMappingAvailabilityResponseOutput{})
	pulumi.RegisterOutputType(ConnectorMappingAvailabilityResponsePtrOutput{})
	pulumi.RegisterOutputType(ConnectorMappingCompleteOperationOutput{})
	pulumi.RegisterOutputType(ConnectorMappingCompleteOperationPtrOutput{})
	pulumi.RegisterOutputType(ConnectorMappingCompleteOperationResponseOutput{})
	pulumi.RegisterOutputType(ConnectorMappingCompleteOperationResponsePtrOutput{})
	pulumi.RegisterOutputType(ConnectorMappingErrorManagementOutput{})
	pulumi.RegisterOutputType(ConnectorMappingErrorManagementPtrOutput{})
	pulumi.RegisterOutputType(ConnectorMappingErrorManagementResponseOutput{})
	pulumi.RegisterOutputType(ConnectorMappingErrorManagementResponsePtrOutput{})
	pulumi.RegisterOutputType(ConnectorMappingFormatOutput{})
	pulumi.RegisterOutputType(ConnectorMappingFormatPtrOutput{})
	pulumi.RegisterOutputType(ConnectorMappingFormatResponseOutput{})
	pulumi.RegisterOutputType(ConnectorMappingFormatResponsePtrOutput{})
	pulumi.RegisterOutputType(ConnectorMappingPropertiesOutput{})
	pulumi.RegisterOutputType(ConnectorMappingPropertiesPtrOutput{})
	pulumi.RegisterOutputType(ConnectorMappingPropertiesResponseOutput{})
	pulumi.RegisterOutputType(ConnectorMappingPropertiesResponsePtrOutput{})
	pulumi.RegisterOutputType(ConnectorMappingResponseOutput{})
	pulumi.RegisterOutputType(ConnectorMappingResponsePtrOutput{})
	pulumi.RegisterOutputType(ConnectorMappingStructureOutput{})
	pulumi.RegisterOutputType(ConnectorMappingStructureArrayOutput{})
	pulumi.RegisterOutputType(ConnectorMappingStructureResponseOutput{})
	pulumi.RegisterOutputType(ConnectorMappingStructureResponseArrayOutput{})
	pulumi.RegisterOutputType(ConnectorResponseOutput{})
	pulumi.RegisterOutputType(ConnectorResponsePtrOutput{})
	pulumi.RegisterOutputType(DataSourcePrecedenceResponseOutput{})
	pulumi.RegisterOutputType(DataSourcePrecedenceResponseArrayOutput{})
	pulumi.RegisterOutputType(DataSourceResponseOutput{})
	pulumi.RegisterOutputType(DataSourceResponsePtrOutput{})
	pulumi.RegisterOutputType(HubBillingInfoFormatOutput{})
	pulumi.RegisterOutputType(HubBillingInfoFormatPtrOutput{})
	pulumi.RegisterOutputType(HubBillingInfoFormatResponseOutput{})
	pulumi.RegisterOutputType(HubBillingInfoFormatResponsePtrOutput{})
	pulumi.RegisterOutputType(HubPropertiesFormatResponseOutput{})
	pulumi.RegisterOutputType(HubPropertiesFormatResponsePtrOutput{})
	pulumi.RegisterOutputType(KpiAliasOutput{})
	pulumi.RegisterOutputType(KpiAliasArrayOutput{})
	pulumi.RegisterOutputType(KpiAliasResponseOutput{})
	pulumi.RegisterOutputType(KpiAliasResponseArrayOutput{})
	pulumi.RegisterOutputType(KpiDefinitionResponseOutput{})
	pulumi.RegisterOutputType(KpiDefinitionResponsePtrOutput{})
	pulumi.RegisterOutputType(KpiExtractOutput{})
	pulumi.RegisterOutputType(KpiExtractArrayOutput{})
	pulumi.RegisterOutputType(KpiExtractResponseOutput{})
	pulumi.RegisterOutputType(KpiExtractResponseArrayOutput{})
	pulumi.RegisterOutputType(KpiGroupByMetadataResponseOutput{})
	pulumi.RegisterOutputType(KpiGroupByMetadataResponseArrayOutput{})
	pulumi.RegisterOutputType(KpiParticipantProfilesMetadataResponseOutput{})
	pulumi.RegisterOutputType(KpiParticipantProfilesMetadataResponseArrayOutput{})
	pulumi.RegisterOutputType(KpiThresholdsOutput{})
	pulumi.RegisterOutputType(KpiThresholdsPtrOutput{})
	pulumi.RegisterOutputType(KpiThresholdsResponseOutput{})
	pulumi.RegisterOutputType(KpiThresholdsResponsePtrOutput{})
	pulumi.RegisterOutputType(LinkDefinitionResponseOutput{})
	pulumi.RegisterOutputType(LinkDefinitionResponsePtrOutput{})
	pulumi.RegisterOutputType(ParticipantProfilePropertyReferenceOutput{})
	pulumi.RegisterOutputType(ParticipantProfilePropertyReferenceArrayOutput{})
	pulumi.RegisterOutputType(ParticipantProfilePropertyReferenceResponseOutput{})
	pulumi.RegisterOutputType(ParticipantProfilePropertyReferenceResponseArrayOutput{})
	pulumi.RegisterOutputType(ParticipantPropertyReferenceOutput{})
	pulumi.RegisterOutputType(ParticipantPropertyReferenceArrayOutput{})
	pulumi.RegisterOutputType(ParticipantPropertyReferenceResponseOutput{})
	pulumi.RegisterOutputType(ParticipantPropertyReferenceResponseArrayOutput{})
	pulumi.RegisterOutputType(PredictionGradesOutput{})
	pulumi.RegisterOutputType(PredictionGradesArrayOutput{})
	pulumi.RegisterOutputType(PredictionMappingsOutput{})
	pulumi.RegisterOutputType(PredictionMappingsPtrOutput{})
	pulumi.RegisterOutputType(PredictionResponseOutput{})
	pulumi.RegisterOutputType(PredictionResponsePtrOutput{})
	pulumi.RegisterOutputType(PredictionResponseGradesOutput{})
	pulumi.RegisterOutputType(PredictionResponseGradesArrayOutput{})
	pulumi.RegisterOutputType(PredictionResponseMappingsOutput{})
	pulumi.RegisterOutputType(PredictionResponseMappingsPtrOutput{})
	pulumi.RegisterOutputType(PredictionResponseSystemGeneratedEntitiesOutput{})
	pulumi.RegisterOutputType(PredictionResponseSystemGeneratedEntitiesPtrOutput{})
	pulumi.RegisterOutputType(ProfileEnumValidValuesFormatOutput{})
	pulumi.RegisterOutputType(ProfileEnumValidValuesFormatArrayOutput{})
	pulumi.RegisterOutputType(ProfileEnumValidValuesFormatResponseOutput{})
	pulumi.RegisterOutputType(ProfileEnumValidValuesFormatResponseArrayOutput{})
	pulumi.RegisterOutputType(ProfileTypeDefinitionResponseOutput{})
	pulumi.RegisterOutputType(ProfileTypeDefinitionResponsePtrOutput{})
	pulumi.RegisterOutputType(PropertyDefinitionOutput{})
	pulumi.RegisterOutputType(PropertyDefinitionArrayOutput{})
	pulumi.RegisterOutputType(PropertyDefinitionResponseOutput{})
	pulumi.RegisterOutputType(PropertyDefinitionResponseArrayOutput{})
	pulumi.RegisterOutputType(RelationshipDefinitionResponseOutput{})
	pulumi.RegisterOutputType(RelationshipDefinitionResponsePtrOutput{})
	pulumi.RegisterOutputType(RelationshipLinkDefinitionResponseOutput{})
	pulumi.RegisterOutputType(RelationshipLinkDefinitionResponsePtrOutput{})
	pulumi.RegisterOutputType(RelationshipLinkFieldMappingOutput{})
	pulumi.RegisterOutputType(RelationshipLinkFieldMappingArrayOutput{})
	pulumi.RegisterOutputType(RelationshipLinkFieldMappingResponseOutput{})
	pulumi.RegisterOutputType(RelationshipLinkFieldMappingResponseArrayOutput{})
	pulumi.RegisterOutputType(RelationshipTypeFieldMappingOutput{})
	pulumi.RegisterOutputType(RelationshipTypeFieldMappingArrayOutput{})
	pulumi.RegisterOutputType(RelationshipTypeFieldMappingResponseOutput{})
	pulumi.RegisterOutputType(RelationshipTypeFieldMappingResponseArrayOutput{})
	pulumi.RegisterOutputType(RelationshipTypeMappingOutput{})
	pulumi.RegisterOutputType(RelationshipTypeMappingArrayOutput{})
	pulumi.RegisterOutputType(RelationshipTypeMappingResponseOutput{})
	pulumi.RegisterOutputType(RelationshipTypeMappingResponseArrayOutput{})
	pulumi.RegisterOutputType(ResourceSetDescriptionOutput{})
	pulumi.RegisterOutputType(ResourceSetDescriptionPtrOutput{})
	pulumi.RegisterOutputType(ResourceSetDescriptionResponseOutput{})
	pulumi.RegisterOutputType(ResourceSetDescriptionResponsePtrOutput{})
	pulumi.RegisterOutputType(RoleAssignmentResponseOutput{})
	pulumi.RegisterOutputType(RoleAssignmentResponsePtrOutput{})
	pulumi.RegisterOutputType(StrongIdOutput{})
	pulumi.RegisterOutputType(StrongIdArrayOutput{})
	pulumi.RegisterOutputType(StrongIdResponseOutput{})
	pulumi.RegisterOutputType(StrongIdResponseArrayOutput{})
	pulumi.RegisterOutputType(TypePropertiesMappingOutput{})
	pulumi.RegisterOutputType(TypePropertiesMappingArrayOutput{})
	pulumi.RegisterOutputType(TypePropertiesMappingResponseOutput{})
	pulumi.RegisterOutputType(TypePropertiesMappingResponseArrayOutput{})
	pulumi.RegisterOutputType(ViewResponseOutput{})
	pulumi.RegisterOutputType(ViewResponsePtrOutput{})
}
