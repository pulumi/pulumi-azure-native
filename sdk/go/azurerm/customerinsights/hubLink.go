// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package customerinsights

import (
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// The link resource format.
type HubLink struct {
	pulumi.CustomResourceState

	// Resource name.
	Name pulumi.StringOutput `pulumi:"name"`
	// The definition of Link.
	Properties LinkDefinitionResponseOutput `pulumi:"properties"`
	// Resource type.
	Type pulumi.StringOutput `pulumi:"type"`
}

// NewHubLink registers a new resource with the given unique name, arguments, and options.
func NewHubLink(ctx *pulumi.Context,
	name string, args *HubLinkArgs, opts ...pulumi.ResourceOption) (*HubLink, error) {
	if args == nil || args.HubName == nil {
		return nil, errors.New("missing required argument 'HubName'")
	}
	if args == nil || args.Name == nil {
		return nil, errors.New("missing required argument 'Name'")
	}
	if args == nil || args.ResourceGroupName == nil {
		return nil, errors.New("missing required argument 'ResourceGroupName'")
	}
	if args == nil {
		args = &HubLinkArgs{}
	}
	var resource HubLink
	err := ctx.RegisterResource("azurerm:customerinsights:HubLink", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetHubLink gets an existing HubLink resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetHubLink(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *HubLinkState, opts ...pulumi.ResourceOption) (*HubLink, error) {
	var resource HubLink
	err := ctx.ReadResource("azurerm:customerinsights:HubLink", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering HubLink resources.
type hubLinkState struct {
	// Resource name.
	Name *string `pulumi:"name"`
	// The definition of Link.
	Properties *LinkDefinitionResponse `pulumi:"properties"`
	// Resource type.
	Type *string `pulumi:"type"`
}

type HubLinkState struct {
	// Resource name.
	Name pulumi.StringPtrInput
	// The definition of Link.
	Properties LinkDefinitionResponsePtrInput
	// Resource type.
	Type pulumi.StringPtrInput
}

func (HubLinkState) ElementType() reflect.Type {
	return reflect.TypeOf((*hubLinkState)(nil)).Elem()
}

type hubLinkArgs struct {
	// The name of the hub.
	HubName string `pulumi:"hubName"`
	// The name of the link.
	Name string `pulumi:"name"`
	// The definition of Link.
	Properties *LinkDefinition `pulumi:"properties"`
	// The name of the resource group.
	ResourceGroupName string `pulumi:"resourceGroupName"`
}

// The set of arguments for constructing a HubLink resource.
type HubLinkArgs struct {
	// The name of the hub.
	HubName pulumi.StringInput
	// The name of the link.
	Name pulumi.StringInput
	// The definition of Link.
	Properties LinkDefinitionPtrInput
	// The name of the resource group.
	ResourceGroupName pulumi.StringInput
}

func (HubLinkArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*hubLinkArgs)(nil)).Elem()
}
