// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package customerinsights

import (
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// The connector resource format.
type HubConnector struct {
	pulumi.CustomResourceState

	// Resource name.
	Name pulumi.StringOutput `pulumi:"name"`
	// Properties of connector.
	Properties ConnectorResponseOutput `pulumi:"properties"`
	// Resource type.
	Type pulumi.StringOutput `pulumi:"type"`
}

// NewHubConnector registers a new resource with the given unique name, arguments, and options.
func NewHubConnector(ctx *pulumi.Context,
	name string, args *HubConnectorArgs, opts ...pulumi.ResourceOption) (*HubConnector, error) {
	if args == nil || args.HubName == nil {
		return nil, errors.New("missing required argument 'HubName'")
	}
	if args == nil || args.Name == nil {
		return nil, errors.New("missing required argument 'Name'")
	}
	if args == nil || args.ResourceGroupName == nil {
		return nil, errors.New("missing required argument 'ResourceGroupName'")
	}
	if args == nil {
		args = &HubConnectorArgs{}
	}
	var resource HubConnector
	err := ctx.RegisterResource("azurerm:customerinsights:HubConnector", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetHubConnector gets an existing HubConnector resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetHubConnector(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *HubConnectorState, opts ...pulumi.ResourceOption) (*HubConnector, error) {
	var resource HubConnector
	err := ctx.ReadResource("azurerm:customerinsights:HubConnector", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering HubConnector resources.
type hubConnectorState struct {
	// Resource name.
	Name *string `pulumi:"name"`
	// Properties of connector.
	Properties *ConnectorResponse `pulumi:"properties"`
	// Resource type.
	Type *string `pulumi:"type"`
}

type HubConnectorState struct {
	// Resource name.
	Name pulumi.StringPtrInput
	// Properties of connector.
	Properties ConnectorResponsePtrInput
	// Resource type.
	Type pulumi.StringPtrInput
}

func (HubConnectorState) ElementType() reflect.Type {
	return reflect.TypeOf((*hubConnectorState)(nil)).Elem()
}

type hubConnectorArgs struct {
	// The name of the hub.
	HubName string `pulumi:"hubName"`
	// The name of the connector.
	Name string `pulumi:"name"`
	// Properties of connector.
	Properties *Connector `pulumi:"properties"`
	// The name of the resource group.
	ResourceGroupName string `pulumi:"resourceGroupName"`
}

// The set of arguments for constructing a HubConnector resource.
type HubConnectorArgs struct {
	// The name of the hub.
	HubName pulumi.StringInput
	// The name of the connector.
	Name pulumi.StringInput
	// Properties of connector.
	Properties ConnectorPtrInput
	// The name of the resource group.
	ResourceGroupName pulumi.StringInput
}

func (HubConnectorArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*hubConnectorArgs)(nil)).Elem()
}
