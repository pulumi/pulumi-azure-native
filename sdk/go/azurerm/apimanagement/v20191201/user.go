// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v20191201

import (
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// User details.
type User struct {
	pulumi.CustomResourceState

	// Resource name.
	Name pulumi.StringOutput `pulumi:"name"`
	// User entity contract properties.
	Properties UserContractPropertiesResponseOutput `pulumi:"properties"`
	// Resource type for API Management resource.
	Type pulumi.StringOutput `pulumi:"type"`
}

// NewUser registers a new resource with the given unique name, arguments, and options.
func NewUser(ctx *pulumi.Context,
	name string, args *UserArgs, opts ...pulumi.ResourceOption) (*User, error) {
	if args == nil || args.Email == nil {
		return nil, errors.New("missing required argument 'Email'")
	}
	if args == nil || args.FirstName == nil {
		return nil, errors.New("missing required argument 'FirstName'")
	}
	if args == nil || args.LastName == nil {
		return nil, errors.New("missing required argument 'LastName'")
	}
	if args == nil || args.Name == nil {
		return nil, errors.New("missing required argument 'Name'")
	}
	if args == nil || args.ResourceGroupName == nil {
		return nil, errors.New("missing required argument 'ResourceGroupName'")
	}
	if args == nil || args.ServiceName == nil {
		return nil, errors.New("missing required argument 'ServiceName'")
	}
	if args == nil {
		args = &UserArgs{}
	}
	var resource User
	err := ctx.RegisterResource("azurerm:apimanagement/v20191201:User", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetUser gets an existing User resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetUser(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *UserState, opts ...pulumi.ResourceOption) (*User, error) {
	var resource User
	err := ctx.ReadResource("azurerm:apimanagement/v20191201:User", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering User resources.
type userState struct {
	// Resource name.
	Name *string `pulumi:"name"`
	// User entity contract properties.
	Properties *UserContractPropertiesResponse `pulumi:"properties"`
	// Resource type for API Management resource.
	Type *string `pulumi:"type"`
}

type UserState struct {
	// Resource name.
	Name pulumi.StringPtrInput
	// User entity contract properties.
	Properties UserContractPropertiesResponsePtrInput
	// Resource type for API Management resource.
	Type pulumi.StringPtrInput
}

func (UserState) ElementType() reflect.Type {
	return reflect.TypeOf((*userState)(nil)).Elem()
}

type userArgs struct {
	// Determines the type of application which send the create user request. Default is legacy portal.
	AppType *string `pulumi:"appType"`
	// Determines the type of confirmation e-mail that will be sent to the newly created user.
	Confirmation *string `pulumi:"confirmation"`
	// Email address. Must not be empty and must be unique within the service instance.
	Email string `pulumi:"email"`
	// First name.
	FirstName string `pulumi:"firstName"`
	// Collection of user identities.
	Identities []UserIdentityContract `pulumi:"identities"`
	// Last name.
	LastName string `pulumi:"lastName"`
	// User identifier. Must be unique in the current API Management service instance.
	Name string `pulumi:"name"`
	// Optional note about a user set by the administrator.
	Note *string `pulumi:"note"`
	// Send an Email notification to the User.
	Notify *bool `pulumi:"notify"`
	// User Password. If no value is provided, a default password is generated.
	Password *string `pulumi:"password"`
	// The name of the resource group.
	ResourceGroupName string `pulumi:"resourceGroupName"`
	// The name of the API Management service.
	ServiceName string `pulumi:"serviceName"`
	// Account state. Specifies whether the user is active or not. Blocked users are unable to sign into the developer portal or call any APIs of subscribed products. Default state is Active.
	State *string `pulumi:"state"`
}

// The set of arguments for constructing a User resource.
type UserArgs struct {
	// Determines the type of application which send the create user request. Default is legacy portal.
	AppType pulumi.StringPtrInput
	// Determines the type of confirmation e-mail that will be sent to the newly created user.
	Confirmation pulumi.StringPtrInput
	// Email address. Must not be empty and must be unique within the service instance.
	Email pulumi.StringInput
	// First name.
	FirstName pulumi.StringInput
	// Collection of user identities.
	Identities UserIdentityContractArrayInput
	// Last name.
	LastName pulumi.StringInput
	// User identifier. Must be unique in the current API Management service instance.
	Name pulumi.StringInput
	// Optional note about a user set by the administrator.
	Note pulumi.StringPtrInput
	// Send an Email notification to the User.
	Notify pulumi.BoolPtrInput
	// User Password. If no value is provided, a default password is generated.
	Password pulumi.StringPtrInput
	// The name of the resource group.
	ResourceGroupName pulumi.StringInput
	// The name of the API Management service.
	ServiceName pulumi.StringInput
	// Account state. Specifies whether the user is active or not. Blocked users are unable to sign into the developer portal or call any APIs of subscribed products. Default state is Active.
	State pulumi.StringPtrInput
}

func (UserArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*userArgs)(nil)).Elem()
}
