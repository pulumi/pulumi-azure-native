// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package servicebus

import (
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// Description of a namespace authorization rule.
type NamespaceQueueAuthorizationRule struct {
	pulumi.CustomResourceState

	// Resource name
	Name pulumi.StringOutput `pulumi:"name"`
	// AuthorizationRule properties.
	Properties SBAuthorizationRuleResponsePropertiesOutput `pulumi:"properties"`
	// Resource type
	Type pulumi.StringOutput `pulumi:"type"`
}

// NewNamespaceQueueAuthorizationRule registers a new resource with the given unique name, arguments, and options.
func NewNamespaceQueueAuthorizationRule(ctx *pulumi.Context,
	name string, args *NamespaceQueueAuthorizationRuleArgs, opts ...pulumi.ResourceOption) (*NamespaceQueueAuthorizationRule, error) {
	if args == nil || args.Name == nil {
		return nil, errors.New("missing required argument 'Name'")
	}
	if args == nil || args.NamespaceName == nil {
		return nil, errors.New("missing required argument 'NamespaceName'")
	}
	if args == nil || args.QueueName == nil {
		return nil, errors.New("missing required argument 'QueueName'")
	}
	if args == nil || args.ResourceGroupName == nil {
		return nil, errors.New("missing required argument 'ResourceGroupName'")
	}
	if args == nil {
		args = &NamespaceQueueAuthorizationRuleArgs{}
	}
	var resource NamespaceQueueAuthorizationRule
	err := ctx.RegisterResource("azurerm:servicebus:NamespaceQueueAuthorizationRule", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetNamespaceQueueAuthorizationRule gets an existing NamespaceQueueAuthorizationRule resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetNamespaceQueueAuthorizationRule(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *NamespaceQueueAuthorizationRuleState, opts ...pulumi.ResourceOption) (*NamespaceQueueAuthorizationRule, error) {
	var resource NamespaceQueueAuthorizationRule
	err := ctx.ReadResource("azurerm:servicebus:NamespaceQueueAuthorizationRule", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering NamespaceQueueAuthorizationRule resources.
type namespaceQueueAuthorizationRuleState struct {
	// Resource name
	Name *string `pulumi:"name"`
	// AuthorizationRule properties.
	Properties *SBAuthorizationRuleResponseProperties `pulumi:"properties"`
	// Resource type
	Type *string `pulumi:"type"`
}

type NamespaceQueueAuthorizationRuleState struct {
	// Resource name
	Name pulumi.StringPtrInput
	// AuthorizationRule properties.
	Properties SBAuthorizationRuleResponsePropertiesPtrInput
	// Resource type
	Type pulumi.StringPtrInput
}

func (NamespaceQueueAuthorizationRuleState) ElementType() reflect.Type {
	return reflect.TypeOf((*namespaceQueueAuthorizationRuleState)(nil)).Elem()
}

type namespaceQueueAuthorizationRuleArgs struct {
	// The authorization rule name.
	Name string `pulumi:"name"`
	// The namespace name
	NamespaceName string `pulumi:"namespaceName"`
	// AuthorizationRule properties.
	Properties *SBAuthorizationRuleProperties `pulumi:"properties"`
	// The queue name.
	QueueName string `pulumi:"queueName"`
	// Name of the Resource group within the Azure subscription.
	ResourceGroupName string `pulumi:"resourceGroupName"`
}

// The set of arguments for constructing a NamespaceQueueAuthorizationRule resource.
type NamespaceQueueAuthorizationRuleArgs struct {
	// The authorization rule name.
	Name pulumi.StringInput
	// The namespace name
	NamespaceName pulumi.StringInput
	// AuthorizationRule properties.
	Properties SBAuthorizationRulePropertiesPtrInput
	// The queue name.
	QueueName pulumi.StringInput
	// Name of the Resource group within the Azure subscription.
	ResourceGroupName pulumi.StringInput
}

func (NamespaceQueueAuthorizationRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*namespaceQueueAuthorizationRuleArgs)(nil)).Elem()
}
