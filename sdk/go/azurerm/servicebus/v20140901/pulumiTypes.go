// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v20140901

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// Message Count Details.
type MessageCountDetails struct {
}

// MessageCountDetailsInput is an input type that accepts MessageCountDetailsArgs and MessageCountDetailsOutput values.
// You can construct a concrete instance of `MessageCountDetailsInput` via:
//
//          MessageCountDetailsArgs{...}
type MessageCountDetailsInput interface {
	pulumi.Input

	ToMessageCountDetailsOutput() MessageCountDetailsOutput
	ToMessageCountDetailsOutputWithContext(context.Context) MessageCountDetailsOutput
}

// Message Count Details.
type MessageCountDetailsArgs struct {
}

func (MessageCountDetailsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MessageCountDetails)(nil)).Elem()
}

func (i MessageCountDetailsArgs) ToMessageCountDetailsOutput() MessageCountDetailsOutput {
	return i.ToMessageCountDetailsOutputWithContext(context.Background())
}

func (i MessageCountDetailsArgs) ToMessageCountDetailsOutputWithContext(ctx context.Context) MessageCountDetailsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MessageCountDetailsOutput)
}

// Message Count Details.
type MessageCountDetailsOutput struct{ *pulumi.OutputState }

func (MessageCountDetailsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MessageCountDetails)(nil)).Elem()
}

func (o MessageCountDetailsOutput) ToMessageCountDetailsOutput() MessageCountDetailsOutput {
	return o
}

func (o MessageCountDetailsOutput) ToMessageCountDetailsOutputWithContext(ctx context.Context) MessageCountDetailsOutput {
	return o
}

// Message Count Details.
type MessageCountDetailsResponse struct {
	// Number of active messages in the queue, topic, or subscription.
	ActiveMessageCount int `pulumi:"activeMessageCount"`
	// Number of messages that are dead lettered.
	DeadLetterMessageCount int `pulumi:"deadLetterMessageCount"`
	// Number of scheduled messages.
	ScheduledMessageCount int `pulumi:"scheduledMessageCount"`
	// Number of messages transferred into dead letters.
	TransferDeadLetterMessageCount int `pulumi:"transferDeadLetterMessageCount"`
	// Number of messages transferred to another queue, topic, or subscription.
	TransferMessageCount int `pulumi:"transferMessageCount"`
}

// MessageCountDetailsResponseInput is an input type that accepts MessageCountDetailsResponseArgs and MessageCountDetailsResponseOutput values.
// You can construct a concrete instance of `MessageCountDetailsResponseInput` via:
//
//          MessageCountDetailsResponseArgs{...}
type MessageCountDetailsResponseInput interface {
	pulumi.Input

	ToMessageCountDetailsResponseOutput() MessageCountDetailsResponseOutput
	ToMessageCountDetailsResponseOutputWithContext(context.Context) MessageCountDetailsResponseOutput
}

// Message Count Details.
type MessageCountDetailsResponseArgs struct {
	// Number of active messages in the queue, topic, or subscription.
	ActiveMessageCount pulumi.IntInput `pulumi:"activeMessageCount"`
	// Number of messages that are dead lettered.
	DeadLetterMessageCount pulumi.IntInput `pulumi:"deadLetterMessageCount"`
	// Number of scheduled messages.
	ScheduledMessageCount pulumi.IntInput `pulumi:"scheduledMessageCount"`
	// Number of messages transferred into dead letters.
	TransferDeadLetterMessageCount pulumi.IntInput `pulumi:"transferDeadLetterMessageCount"`
	// Number of messages transferred to another queue, topic, or subscription.
	TransferMessageCount pulumi.IntInput `pulumi:"transferMessageCount"`
}

func (MessageCountDetailsResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MessageCountDetailsResponse)(nil)).Elem()
}

func (i MessageCountDetailsResponseArgs) ToMessageCountDetailsResponseOutput() MessageCountDetailsResponseOutput {
	return i.ToMessageCountDetailsResponseOutputWithContext(context.Background())
}

func (i MessageCountDetailsResponseArgs) ToMessageCountDetailsResponseOutputWithContext(ctx context.Context) MessageCountDetailsResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MessageCountDetailsResponseOutput)
}

func (i MessageCountDetailsResponseArgs) ToMessageCountDetailsResponsePtrOutput() MessageCountDetailsResponsePtrOutput {
	return i.ToMessageCountDetailsResponsePtrOutputWithContext(context.Background())
}

func (i MessageCountDetailsResponseArgs) ToMessageCountDetailsResponsePtrOutputWithContext(ctx context.Context) MessageCountDetailsResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MessageCountDetailsResponseOutput).ToMessageCountDetailsResponsePtrOutputWithContext(ctx)
}

// MessageCountDetailsResponsePtrInput is an input type that accepts MessageCountDetailsResponseArgs, MessageCountDetailsResponsePtr and MessageCountDetailsResponsePtrOutput values.
// You can construct a concrete instance of `MessageCountDetailsResponsePtrInput` via:
//
//          MessageCountDetailsResponseArgs{...}
//
//  or:
//
//          nil
type MessageCountDetailsResponsePtrInput interface {
	pulumi.Input

	ToMessageCountDetailsResponsePtrOutput() MessageCountDetailsResponsePtrOutput
	ToMessageCountDetailsResponsePtrOutputWithContext(context.Context) MessageCountDetailsResponsePtrOutput
}

type messageCountDetailsResponsePtrType MessageCountDetailsResponseArgs

func MessageCountDetailsResponsePtr(v *MessageCountDetailsResponseArgs) MessageCountDetailsResponsePtrInput {
	return (*messageCountDetailsResponsePtrType)(v)
}

func (*messageCountDetailsResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**MessageCountDetailsResponse)(nil)).Elem()
}

func (i *messageCountDetailsResponsePtrType) ToMessageCountDetailsResponsePtrOutput() MessageCountDetailsResponsePtrOutput {
	return i.ToMessageCountDetailsResponsePtrOutputWithContext(context.Background())
}

func (i *messageCountDetailsResponsePtrType) ToMessageCountDetailsResponsePtrOutputWithContext(ctx context.Context) MessageCountDetailsResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MessageCountDetailsResponsePtrOutput)
}

// Message Count Details.
type MessageCountDetailsResponseOutput struct{ *pulumi.OutputState }

func (MessageCountDetailsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MessageCountDetailsResponse)(nil)).Elem()
}

func (o MessageCountDetailsResponseOutput) ToMessageCountDetailsResponseOutput() MessageCountDetailsResponseOutput {
	return o
}

func (o MessageCountDetailsResponseOutput) ToMessageCountDetailsResponseOutputWithContext(ctx context.Context) MessageCountDetailsResponseOutput {
	return o
}

func (o MessageCountDetailsResponseOutput) ToMessageCountDetailsResponsePtrOutput() MessageCountDetailsResponsePtrOutput {
	return o.ToMessageCountDetailsResponsePtrOutputWithContext(context.Background())
}

func (o MessageCountDetailsResponseOutput) ToMessageCountDetailsResponsePtrOutputWithContext(ctx context.Context) MessageCountDetailsResponsePtrOutput {
	return o.ApplyT(func(v MessageCountDetailsResponse) *MessageCountDetailsResponse {
		return &v
	}).(MessageCountDetailsResponsePtrOutput)
}

// Number of active messages in the queue, topic, or subscription.
func (o MessageCountDetailsResponseOutput) ActiveMessageCount() pulumi.IntOutput {
	return o.ApplyT(func(v MessageCountDetailsResponse) int { return v.ActiveMessageCount }).(pulumi.IntOutput)
}

// Number of messages that are dead lettered.
func (o MessageCountDetailsResponseOutput) DeadLetterMessageCount() pulumi.IntOutput {
	return o.ApplyT(func(v MessageCountDetailsResponse) int { return v.DeadLetterMessageCount }).(pulumi.IntOutput)
}

// Number of scheduled messages.
func (o MessageCountDetailsResponseOutput) ScheduledMessageCount() pulumi.IntOutput {
	return o.ApplyT(func(v MessageCountDetailsResponse) int { return v.ScheduledMessageCount }).(pulumi.IntOutput)
}

// Number of messages transferred into dead letters.
func (o MessageCountDetailsResponseOutput) TransferDeadLetterMessageCount() pulumi.IntOutput {
	return o.ApplyT(func(v MessageCountDetailsResponse) int { return v.TransferDeadLetterMessageCount }).(pulumi.IntOutput)
}

// Number of messages transferred to another queue, topic, or subscription.
func (o MessageCountDetailsResponseOutput) TransferMessageCount() pulumi.IntOutput {
	return o.ApplyT(func(v MessageCountDetailsResponse) int { return v.TransferMessageCount }).(pulumi.IntOutput)
}

type MessageCountDetailsResponsePtrOutput struct{ *pulumi.OutputState }

func (MessageCountDetailsResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MessageCountDetailsResponse)(nil)).Elem()
}

func (o MessageCountDetailsResponsePtrOutput) ToMessageCountDetailsResponsePtrOutput() MessageCountDetailsResponsePtrOutput {
	return o
}

func (o MessageCountDetailsResponsePtrOutput) ToMessageCountDetailsResponsePtrOutputWithContext(ctx context.Context) MessageCountDetailsResponsePtrOutput {
	return o
}

func (o MessageCountDetailsResponsePtrOutput) Elem() MessageCountDetailsResponseOutput {
	return o.ApplyT(func(v *MessageCountDetailsResponse) MessageCountDetailsResponse { return *v }).(MessageCountDetailsResponseOutput)
}

// Number of active messages in the queue, topic, or subscription.
func (o MessageCountDetailsResponsePtrOutput) ActiveMessageCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *MessageCountDetailsResponse) *int {
		if v == nil {
			return nil
		}
		return &v.ActiveMessageCount
	}).(pulumi.IntPtrOutput)
}

// Number of messages that are dead lettered.
func (o MessageCountDetailsResponsePtrOutput) DeadLetterMessageCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *MessageCountDetailsResponse) *int {
		if v == nil {
			return nil
		}
		return &v.DeadLetterMessageCount
	}).(pulumi.IntPtrOutput)
}

// Number of scheduled messages.
func (o MessageCountDetailsResponsePtrOutput) ScheduledMessageCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *MessageCountDetailsResponse) *int {
		if v == nil {
			return nil
		}
		return &v.ScheduledMessageCount
	}).(pulumi.IntPtrOutput)
}

// Number of messages transferred into dead letters.
func (o MessageCountDetailsResponsePtrOutput) TransferDeadLetterMessageCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *MessageCountDetailsResponse) *int {
		if v == nil {
			return nil
		}
		return &v.TransferDeadLetterMessageCount
	}).(pulumi.IntPtrOutput)
}

// Number of messages transferred to another queue, topic, or subscription.
func (o MessageCountDetailsResponsePtrOutput) TransferMessageCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *MessageCountDetailsResponse) *int {
		if v == nil {
			return nil
		}
		return &v.TransferMessageCount
	}).(pulumi.IntPtrOutput)
}

// Description of a namespace resource.
type NamespaceType struct {
	// Resource location.
	Location string `pulumi:"location"`
	// Resource name
	Name string `pulumi:"name"`
	// Properties of the namespace.
	Properties NamespacePropertiesResponse `pulumi:"properties"`
	// SKU of the namespace.
	Sku *SkuResponse `pulumi:"sku"`
	// Resource tags
	Tags map[string]string `pulumi:"tags"`
	// Resource type
	Type string `pulumi:"type"`
}

// NamespaceTypeInput is an input type that accepts NamespaceTypeArgs and NamespaceTypeOutput values.
// You can construct a concrete instance of `NamespaceTypeInput` via:
//
//          NamespaceTypeArgs{...}
type NamespaceTypeInput interface {
	pulumi.Input

	ToNamespaceTypeOutput() NamespaceTypeOutput
	ToNamespaceTypeOutputWithContext(context.Context) NamespaceTypeOutput
}

// Description of a namespace resource.
type NamespaceTypeArgs struct {
	// Resource location.
	Location pulumi.StringInput `pulumi:"location"`
	// Resource name
	Name pulumi.StringInput `pulumi:"name"`
	// Properties of the namespace.
	Properties NamespacePropertiesResponseInput `pulumi:"properties"`
	// SKU of the namespace.
	Sku SkuResponsePtrInput `pulumi:"sku"`
	// Resource tags
	Tags pulumi.StringMapInput `pulumi:"tags"`
	// Resource type
	Type pulumi.StringInput `pulumi:"type"`
}

func (NamespaceTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NamespaceType)(nil)).Elem()
}

func (i NamespaceTypeArgs) ToNamespaceTypeOutput() NamespaceTypeOutput {
	return i.ToNamespaceTypeOutputWithContext(context.Background())
}

func (i NamespaceTypeArgs) ToNamespaceTypeOutputWithContext(ctx context.Context) NamespaceTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NamespaceTypeOutput)
}

// Description of a namespace resource.
type NamespaceTypeOutput struct{ *pulumi.OutputState }

func (NamespaceTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NamespaceType)(nil)).Elem()
}

func (o NamespaceTypeOutput) ToNamespaceTypeOutput() NamespaceTypeOutput {
	return o
}

func (o NamespaceTypeOutput) ToNamespaceTypeOutputWithContext(ctx context.Context) NamespaceTypeOutput {
	return o
}

// Resource location.
func (o NamespaceTypeOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v NamespaceType) string { return v.Location }).(pulumi.StringOutput)
}

// Resource name
func (o NamespaceTypeOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v NamespaceType) string { return v.Name }).(pulumi.StringOutput)
}

// Properties of the namespace.
func (o NamespaceTypeOutput) Properties() NamespacePropertiesResponseOutput {
	return o.ApplyT(func(v NamespaceType) NamespacePropertiesResponse { return v.Properties }).(NamespacePropertiesResponseOutput)
}

// SKU of the namespace.
func (o NamespaceTypeOutput) Sku() SkuResponsePtrOutput {
	return o.ApplyT(func(v NamespaceType) *SkuResponse { return v.Sku }).(SkuResponsePtrOutput)
}

// Resource tags
func (o NamespaceTypeOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v NamespaceType) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

// Resource type
func (o NamespaceTypeOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v NamespaceType) string { return v.Type }).(pulumi.StringOutput)
}

// Description of a namespace authorization rule.
type NamespaceAuthorizationRuleType struct {
	// Resource location.
	Location *string `pulumi:"location"`
	// Resource name
	Name string `pulumi:"name"`
	// AuthorizationRule properties.
	Properties SharedAccessAuthorizationRulePropertiesResponse `pulumi:"properties"`
	// Resource type
	Type string `pulumi:"type"`
}

// NamespaceAuthorizationRuleTypeInput is an input type that accepts NamespaceAuthorizationRuleTypeArgs and NamespaceAuthorizationRuleTypeOutput values.
// You can construct a concrete instance of `NamespaceAuthorizationRuleTypeInput` via:
//
//          NamespaceAuthorizationRuleTypeArgs{...}
type NamespaceAuthorizationRuleTypeInput interface {
	pulumi.Input

	ToNamespaceAuthorizationRuleTypeOutput() NamespaceAuthorizationRuleTypeOutput
	ToNamespaceAuthorizationRuleTypeOutputWithContext(context.Context) NamespaceAuthorizationRuleTypeOutput
}

// Description of a namespace authorization rule.
type NamespaceAuthorizationRuleTypeArgs struct {
	// Resource location.
	Location pulumi.StringPtrInput `pulumi:"location"`
	// Resource name
	Name pulumi.StringInput `pulumi:"name"`
	// AuthorizationRule properties.
	Properties SharedAccessAuthorizationRulePropertiesResponseInput `pulumi:"properties"`
	// Resource type
	Type pulumi.StringInput `pulumi:"type"`
}

func (NamespaceAuthorizationRuleTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NamespaceAuthorizationRuleType)(nil)).Elem()
}

func (i NamespaceAuthorizationRuleTypeArgs) ToNamespaceAuthorizationRuleTypeOutput() NamespaceAuthorizationRuleTypeOutput {
	return i.ToNamespaceAuthorizationRuleTypeOutputWithContext(context.Background())
}

func (i NamespaceAuthorizationRuleTypeArgs) ToNamespaceAuthorizationRuleTypeOutputWithContext(ctx context.Context) NamespaceAuthorizationRuleTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NamespaceAuthorizationRuleTypeOutput)
}

// Description of a namespace authorization rule.
type NamespaceAuthorizationRuleTypeOutput struct{ *pulumi.OutputState }

func (NamespaceAuthorizationRuleTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NamespaceAuthorizationRuleType)(nil)).Elem()
}

func (o NamespaceAuthorizationRuleTypeOutput) ToNamespaceAuthorizationRuleTypeOutput() NamespaceAuthorizationRuleTypeOutput {
	return o
}

func (o NamespaceAuthorizationRuleTypeOutput) ToNamespaceAuthorizationRuleTypeOutputWithContext(ctx context.Context) NamespaceAuthorizationRuleTypeOutput {
	return o
}

// Resource location.
func (o NamespaceAuthorizationRuleTypeOutput) Location() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NamespaceAuthorizationRuleType) *string { return v.Location }).(pulumi.StringPtrOutput)
}

// Resource name
func (o NamespaceAuthorizationRuleTypeOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v NamespaceAuthorizationRuleType) string { return v.Name }).(pulumi.StringOutput)
}

// AuthorizationRule properties.
func (o NamespaceAuthorizationRuleTypeOutput) Properties() SharedAccessAuthorizationRulePropertiesResponseOutput {
	return o.ApplyT(func(v NamespaceAuthorizationRuleType) SharedAccessAuthorizationRulePropertiesResponse {
		return v.Properties
	}).(SharedAccessAuthorizationRulePropertiesResponseOutput)
}

// Resource type
func (o NamespaceAuthorizationRuleTypeOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v NamespaceAuthorizationRuleType) string { return v.Type }).(pulumi.StringOutput)
}

// Properties of the namespace.
type NamespaceProperties struct {
	// Indicates whether to create an ACS namespace.
	CreateACSNamespace *bool `pulumi:"createACSNamespace"`
	// Specifies whether this instance is enabled.
	Enabled *bool `pulumi:"enabled"`
	// State of the namespace.
	Status *string `pulumi:"status"`
}

// NamespacePropertiesInput is an input type that accepts NamespacePropertiesArgs and NamespacePropertiesOutput values.
// You can construct a concrete instance of `NamespacePropertiesInput` via:
//
//          NamespacePropertiesArgs{...}
type NamespacePropertiesInput interface {
	pulumi.Input

	ToNamespacePropertiesOutput() NamespacePropertiesOutput
	ToNamespacePropertiesOutputWithContext(context.Context) NamespacePropertiesOutput
}

// Properties of the namespace.
type NamespacePropertiesArgs struct {
	// Indicates whether to create an ACS namespace.
	CreateACSNamespace pulumi.BoolPtrInput `pulumi:"createACSNamespace"`
	// Specifies whether this instance is enabled.
	Enabled pulumi.BoolPtrInput `pulumi:"enabled"`
	// State of the namespace.
	Status pulumi.StringPtrInput `pulumi:"status"`
}

func (NamespacePropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NamespaceProperties)(nil)).Elem()
}

func (i NamespacePropertiesArgs) ToNamespacePropertiesOutput() NamespacePropertiesOutput {
	return i.ToNamespacePropertiesOutputWithContext(context.Background())
}

func (i NamespacePropertiesArgs) ToNamespacePropertiesOutputWithContext(ctx context.Context) NamespacePropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NamespacePropertiesOutput)
}

func (i NamespacePropertiesArgs) ToNamespacePropertiesPtrOutput() NamespacePropertiesPtrOutput {
	return i.ToNamespacePropertiesPtrOutputWithContext(context.Background())
}

func (i NamespacePropertiesArgs) ToNamespacePropertiesPtrOutputWithContext(ctx context.Context) NamespacePropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NamespacePropertiesOutput).ToNamespacePropertiesPtrOutputWithContext(ctx)
}

// NamespacePropertiesPtrInput is an input type that accepts NamespacePropertiesArgs, NamespacePropertiesPtr and NamespacePropertiesPtrOutput values.
// You can construct a concrete instance of `NamespacePropertiesPtrInput` via:
//
//          NamespacePropertiesArgs{...}
//
//  or:
//
//          nil
type NamespacePropertiesPtrInput interface {
	pulumi.Input

	ToNamespacePropertiesPtrOutput() NamespacePropertiesPtrOutput
	ToNamespacePropertiesPtrOutputWithContext(context.Context) NamespacePropertiesPtrOutput
}

type namespacePropertiesPtrType NamespacePropertiesArgs

func NamespacePropertiesPtr(v *NamespacePropertiesArgs) NamespacePropertiesPtrInput {
	return (*namespacePropertiesPtrType)(v)
}

func (*namespacePropertiesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**NamespaceProperties)(nil)).Elem()
}

func (i *namespacePropertiesPtrType) ToNamespacePropertiesPtrOutput() NamespacePropertiesPtrOutput {
	return i.ToNamespacePropertiesPtrOutputWithContext(context.Background())
}

func (i *namespacePropertiesPtrType) ToNamespacePropertiesPtrOutputWithContext(ctx context.Context) NamespacePropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NamespacePropertiesPtrOutput)
}

// Properties of the namespace.
type NamespacePropertiesOutput struct{ *pulumi.OutputState }

func (NamespacePropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NamespaceProperties)(nil)).Elem()
}

func (o NamespacePropertiesOutput) ToNamespacePropertiesOutput() NamespacePropertiesOutput {
	return o
}

func (o NamespacePropertiesOutput) ToNamespacePropertiesOutputWithContext(ctx context.Context) NamespacePropertiesOutput {
	return o
}

func (o NamespacePropertiesOutput) ToNamespacePropertiesPtrOutput() NamespacePropertiesPtrOutput {
	return o.ToNamespacePropertiesPtrOutputWithContext(context.Background())
}

func (o NamespacePropertiesOutput) ToNamespacePropertiesPtrOutputWithContext(ctx context.Context) NamespacePropertiesPtrOutput {
	return o.ApplyT(func(v NamespaceProperties) *NamespaceProperties {
		return &v
	}).(NamespacePropertiesPtrOutput)
}

// Indicates whether to create an ACS namespace.
func (o NamespacePropertiesOutput) CreateACSNamespace() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v NamespaceProperties) *bool { return v.CreateACSNamespace }).(pulumi.BoolPtrOutput)
}

// Specifies whether this instance is enabled.
func (o NamespacePropertiesOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v NamespaceProperties) *bool { return v.Enabled }).(pulumi.BoolPtrOutput)
}

// State of the namespace.
func (o NamespacePropertiesOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NamespaceProperties) *string { return v.Status }).(pulumi.StringPtrOutput)
}

type NamespacePropertiesPtrOutput struct{ *pulumi.OutputState }

func (NamespacePropertiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NamespaceProperties)(nil)).Elem()
}

func (o NamespacePropertiesPtrOutput) ToNamespacePropertiesPtrOutput() NamespacePropertiesPtrOutput {
	return o
}

func (o NamespacePropertiesPtrOutput) ToNamespacePropertiesPtrOutputWithContext(ctx context.Context) NamespacePropertiesPtrOutput {
	return o
}

func (o NamespacePropertiesPtrOutput) Elem() NamespacePropertiesOutput {
	return o.ApplyT(func(v *NamespaceProperties) NamespaceProperties { return *v }).(NamespacePropertiesOutput)
}

// Indicates whether to create an ACS namespace.
func (o NamespacePropertiesPtrOutput) CreateACSNamespace() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *NamespaceProperties) *bool {
		if v == nil {
			return nil
		}
		return v.CreateACSNamespace
	}).(pulumi.BoolPtrOutput)
}

// Specifies whether this instance is enabled.
func (o NamespacePropertiesPtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *NamespaceProperties) *bool {
		if v == nil {
			return nil
		}
		return v.Enabled
	}).(pulumi.BoolPtrOutput)
}

// State of the namespace.
func (o NamespacePropertiesPtrOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NamespaceProperties) *string {
		if v == nil {
			return nil
		}
		return v.Status
	}).(pulumi.StringPtrOutput)
}

// Properties of the namespace.
type NamespacePropertiesResponse struct {
	// Indicates whether to create an ACS namespace.
	CreateACSNamespace *bool `pulumi:"createACSNamespace"`
	// The time the namespace was created.
	CreatedAt string `pulumi:"createdAt"`
	// Specifies whether this instance is enabled.
	Enabled *bool `pulumi:"enabled"`
	// Provisioning state of the namespace.
	ProvisioningState string `pulumi:"provisioningState"`
	// Endpoint you can use to perform Service Bus operations.
	ServiceBusEndpoint string `pulumi:"serviceBusEndpoint"`
	// State of the namespace.
	Status *string `pulumi:"status"`
	// The time the namespace was updated.
	UpdatedAt string `pulumi:"updatedAt"`
}

// NamespacePropertiesResponseInput is an input type that accepts NamespacePropertiesResponseArgs and NamespacePropertiesResponseOutput values.
// You can construct a concrete instance of `NamespacePropertiesResponseInput` via:
//
//          NamespacePropertiesResponseArgs{...}
type NamespacePropertiesResponseInput interface {
	pulumi.Input

	ToNamespacePropertiesResponseOutput() NamespacePropertiesResponseOutput
	ToNamespacePropertiesResponseOutputWithContext(context.Context) NamespacePropertiesResponseOutput
}

// Properties of the namespace.
type NamespacePropertiesResponseArgs struct {
	// Indicates whether to create an ACS namespace.
	CreateACSNamespace pulumi.BoolPtrInput `pulumi:"createACSNamespace"`
	// The time the namespace was created.
	CreatedAt pulumi.StringInput `pulumi:"createdAt"`
	// Specifies whether this instance is enabled.
	Enabled pulumi.BoolPtrInput `pulumi:"enabled"`
	// Provisioning state of the namespace.
	ProvisioningState pulumi.StringInput `pulumi:"provisioningState"`
	// Endpoint you can use to perform Service Bus operations.
	ServiceBusEndpoint pulumi.StringInput `pulumi:"serviceBusEndpoint"`
	// State of the namespace.
	Status pulumi.StringPtrInput `pulumi:"status"`
	// The time the namespace was updated.
	UpdatedAt pulumi.StringInput `pulumi:"updatedAt"`
}

func (NamespacePropertiesResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NamespacePropertiesResponse)(nil)).Elem()
}

func (i NamespacePropertiesResponseArgs) ToNamespacePropertiesResponseOutput() NamespacePropertiesResponseOutput {
	return i.ToNamespacePropertiesResponseOutputWithContext(context.Background())
}

func (i NamespacePropertiesResponseArgs) ToNamespacePropertiesResponseOutputWithContext(ctx context.Context) NamespacePropertiesResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NamespacePropertiesResponseOutput)
}

func (i NamespacePropertiesResponseArgs) ToNamespacePropertiesResponsePtrOutput() NamespacePropertiesResponsePtrOutput {
	return i.ToNamespacePropertiesResponsePtrOutputWithContext(context.Background())
}

func (i NamespacePropertiesResponseArgs) ToNamespacePropertiesResponsePtrOutputWithContext(ctx context.Context) NamespacePropertiesResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NamespacePropertiesResponseOutput).ToNamespacePropertiesResponsePtrOutputWithContext(ctx)
}

// NamespacePropertiesResponsePtrInput is an input type that accepts NamespacePropertiesResponseArgs, NamespacePropertiesResponsePtr and NamespacePropertiesResponsePtrOutput values.
// You can construct a concrete instance of `NamespacePropertiesResponsePtrInput` via:
//
//          NamespacePropertiesResponseArgs{...}
//
//  or:
//
//          nil
type NamespacePropertiesResponsePtrInput interface {
	pulumi.Input

	ToNamespacePropertiesResponsePtrOutput() NamespacePropertiesResponsePtrOutput
	ToNamespacePropertiesResponsePtrOutputWithContext(context.Context) NamespacePropertiesResponsePtrOutput
}

type namespacePropertiesResponsePtrType NamespacePropertiesResponseArgs

func NamespacePropertiesResponsePtr(v *NamespacePropertiesResponseArgs) NamespacePropertiesResponsePtrInput {
	return (*namespacePropertiesResponsePtrType)(v)
}

func (*namespacePropertiesResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**NamespacePropertiesResponse)(nil)).Elem()
}

func (i *namespacePropertiesResponsePtrType) ToNamespacePropertiesResponsePtrOutput() NamespacePropertiesResponsePtrOutput {
	return i.ToNamespacePropertiesResponsePtrOutputWithContext(context.Background())
}

func (i *namespacePropertiesResponsePtrType) ToNamespacePropertiesResponsePtrOutputWithContext(ctx context.Context) NamespacePropertiesResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NamespacePropertiesResponsePtrOutput)
}

// Properties of the namespace.
type NamespacePropertiesResponseOutput struct{ *pulumi.OutputState }

func (NamespacePropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NamespacePropertiesResponse)(nil)).Elem()
}

func (o NamespacePropertiesResponseOutput) ToNamespacePropertiesResponseOutput() NamespacePropertiesResponseOutput {
	return o
}

func (o NamespacePropertiesResponseOutput) ToNamespacePropertiesResponseOutputWithContext(ctx context.Context) NamespacePropertiesResponseOutput {
	return o
}

func (o NamespacePropertiesResponseOutput) ToNamespacePropertiesResponsePtrOutput() NamespacePropertiesResponsePtrOutput {
	return o.ToNamespacePropertiesResponsePtrOutputWithContext(context.Background())
}

func (o NamespacePropertiesResponseOutput) ToNamespacePropertiesResponsePtrOutputWithContext(ctx context.Context) NamespacePropertiesResponsePtrOutput {
	return o.ApplyT(func(v NamespacePropertiesResponse) *NamespacePropertiesResponse {
		return &v
	}).(NamespacePropertiesResponsePtrOutput)
}

// Indicates whether to create an ACS namespace.
func (o NamespacePropertiesResponseOutput) CreateACSNamespace() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v NamespacePropertiesResponse) *bool { return v.CreateACSNamespace }).(pulumi.BoolPtrOutput)
}

// The time the namespace was created.
func (o NamespacePropertiesResponseOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v NamespacePropertiesResponse) string { return v.CreatedAt }).(pulumi.StringOutput)
}

// Specifies whether this instance is enabled.
func (o NamespacePropertiesResponseOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v NamespacePropertiesResponse) *bool { return v.Enabled }).(pulumi.BoolPtrOutput)
}

// Provisioning state of the namespace.
func (o NamespacePropertiesResponseOutput) ProvisioningState() pulumi.StringOutput {
	return o.ApplyT(func(v NamespacePropertiesResponse) string { return v.ProvisioningState }).(pulumi.StringOutput)
}

// Endpoint you can use to perform Service Bus operations.
func (o NamespacePropertiesResponseOutput) ServiceBusEndpoint() pulumi.StringOutput {
	return o.ApplyT(func(v NamespacePropertiesResponse) string { return v.ServiceBusEndpoint }).(pulumi.StringOutput)
}

// State of the namespace.
func (o NamespacePropertiesResponseOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NamespacePropertiesResponse) *string { return v.Status }).(pulumi.StringPtrOutput)
}

// The time the namespace was updated.
func (o NamespacePropertiesResponseOutput) UpdatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v NamespacePropertiesResponse) string { return v.UpdatedAt }).(pulumi.StringOutput)
}

type NamespacePropertiesResponsePtrOutput struct{ *pulumi.OutputState }

func (NamespacePropertiesResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NamespacePropertiesResponse)(nil)).Elem()
}

func (o NamespacePropertiesResponsePtrOutput) ToNamespacePropertiesResponsePtrOutput() NamespacePropertiesResponsePtrOutput {
	return o
}

func (o NamespacePropertiesResponsePtrOutput) ToNamespacePropertiesResponsePtrOutputWithContext(ctx context.Context) NamespacePropertiesResponsePtrOutput {
	return o
}

func (o NamespacePropertiesResponsePtrOutput) Elem() NamespacePropertiesResponseOutput {
	return o.ApplyT(func(v *NamespacePropertiesResponse) NamespacePropertiesResponse { return *v }).(NamespacePropertiesResponseOutput)
}

// Indicates whether to create an ACS namespace.
func (o NamespacePropertiesResponsePtrOutput) CreateACSNamespace() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *NamespacePropertiesResponse) *bool {
		if v == nil {
			return nil
		}
		return v.CreateACSNamespace
	}).(pulumi.BoolPtrOutput)
}

// The time the namespace was created.
func (o NamespacePropertiesResponsePtrOutput) CreatedAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NamespacePropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return &v.CreatedAt
	}).(pulumi.StringPtrOutput)
}

// Specifies whether this instance is enabled.
func (o NamespacePropertiesResponsePtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *NamespacePropertiesResponse) *bool {
		if v == nil {
			return nil
		}
		return v.Enabled
	}).(pulumi.BoolPtrOutput)
}

// Provisioning state of the namespace.
func (o NamespacePropertiesResponsePtrOutput) ProvisioningState() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NamespacePropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return &v.ProvisioningState
	}).(pulumi.StringPtrOutput)
}

// Endpoint you can use to perform Service Bus operations.
func (o NamespacePropertiesResponsePtrOutput) ServiceBusEndpoint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NamespacePropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return &v.ServiceBusEndpoint
	}).(pulumi.StringPtrOutput)
}

// State of the namespace.
func (o NamespacePropertiesResponsePtrOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NamespacePropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return v.Status
	}).(pulumi.StringPtrOutput)
}

// The time the namespace was updated.
func (o NamespacePropertiesResponsePtrOutput) UpdatedAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NamespacePropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return &v.UpdatedAt
	}).(pulumi.StringPtrOutput)
}

// Description of queue Resource.
type QueueType struct {
	// Resource location.
	Location *string `pulumi:"location"`
	// Resource name
	Name string `pulumi:"name"`
	// The Queue Properties definition.
	Properties QueuePropertiesResponse `pulumi:"properties"`
	// Resource type
	Type string `pulumi:"type"`
}

// QueueTypeInput is an input type that accepts QueueTypeArgs and QueueTypeOutput values.
// You can construct a concrete instance of `QueueTypeInput` via:
//
//          QueueTypeArgs{...}
type QueueTypeInput interface {
	pulumi.Input

	ToQueueTypeOutput() QueueTypeOutput
	ToQueueTypeOutputWithContext(context.Context) QueueTypeOutput
}

// Description of queue Resource.
type QueueTypeArgs struct {
	// Resource location.
	Location pulumi.StringPtrInput `pulumi:"location"`
	// Resource name
	Name pulumi.StringInput `pulumi:"name"`
	// The Queue Properties definition.
	Properties QueuePropertiesResponseInput `pulumi:"properties"`
	// Resource type
	Type pulumi.StringInput `pulumi:"type"`
}

func (QueueTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*QueueType)(nil)).Elem()
}

func (i QueueTypeArgs) ToQueueTypeOutput() QueueTypeOutput {
	return i.ToQueueTypeOutputWithContext(context.Background())
}

func (i QueueTypeArgs) ToQueueTypeOutputWithContext(ctx context.Context) QueueTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(QueueTypeOutput)
}

// Description of queue Resource.
type QueueTypeOutput struct{ *pulumi.OutputState }

func (QueueTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*QueueType)(nil)).Elem()
}

func (o QueueTypeOutput) ToQueueTypeOutput() QueueTypeOutput {
	return o
}

func (o QueueTypeOutput) ToQueueTypeOutputWithContext(ctx context.Context) QueueTypeOutput {
	return o
}

// Resource location.
func (o QueueTypeOutput) Location() pulumi.StringPtrOutput {
	return o.ApplyT(func(v QueueType) *string { return v.Location }).(pulumi.StringPtrOutput)
}

// Resource name
func (o QueueTypeOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v QueueType) string { return v.Name }).(pulumi.StringOutput)
}

// The Queue Properties definition.
func (o QueueTypeOutput) Properties() QueuePropertiesResponseOutput {
	return o.ApplyT(func(v QueueType) QueuePropertiesResponse { return v.Properties }).(QueuePropertiesResponseOutput)
}

// Resource type
func (o QueueTypeOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v QueueType) string { return v.Type }).(pulumi.StringOutput)
}

// Description of a namespace authorization rule.
type QueueAuthorizationRuleType struct {
	// Resource location.
	Location *string `pulumi:"location"`
	// Resource name
	Name string `pulumi:"name"`
	// AuthorizationRule properties.
	Properties SharedAccessAuthorizationRulePropertiesResponse `pulumi:"properties"`
	// Resource type
	Type string `pulumi:"type"`
}

// QueueAuthorizationRuleTypeInput is an input type that accepts QueueAuthorizationRuleTypeArgs and QueueAuthorizationRuleTypeOutput values.
// You can construct a concrete instance of `QueueAuthorizationRuleTypeInput` via:
//
//          QueueAuthorizationRuleTypeArgs{...}
type QueueAuthorizationRuleTypeInput interface {
	pulumi.Input

	ToQueueAuthorizationRuleTypeOutput() QueueAuthorizationRuleTypeOutput
	ToQueueAuthorizationRuleTypeOutputWithContext(context.Context) QueueAuthorizationRuleTypeOutput
}

// Description of a namespace authorization rule.
type QueueAuthorizationRuleTypeArgs struct {
	// Resource location.
	Location pulumi.StringPtrInput `pulumi:"location"`
	// Resource name
	Name pulumi.StringInput `pulumi:"name"`
	// AuthorizationRule properties.
	Properties SharedAccessAuthorizationRulePropertiesResponseInput `pulumi:"properties"`
	// Resource type
	Type pulumi.StringInput `pulumi:"type"`
}

func (QueueAuthorizationRuleTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*QueueAuthorizationRuleType)(nil)).Elem()
}

func (i QueueAuthorizationRuleTypeArgs) ToQueueAuthorizationRuleTypeOutput() QueueAuthorizationRuleTypeOutput {
	return i.ToQueueAuthorizationRuleTypeOutputWithContext(context.Background())
}

func (i QueueAuthorizationRuleTypeArgs) ToQueueAuthorizationRuleTypeOutputWithContext(ctx context.Context) QueueAuthorizationRuleTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(QueueAuthorizationRuleTypeOutput)
}

// Description of a namespace authorization rule.
type QueueAuthorizationRuleTypeOutput struct{ *pulumi.OutputState }

func (QueueAuthorizationRuleTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*QueueAuthorizationRuleType)(nil)).Elem()
}

func (o QueueAuthorizationRuleTypeOutput) ToQueueAuthorizationRuleTypeOutput() QueueAuthorizationRuleTypeOutput {
	return o
}

func (o QueueAuthorizationRuleTypeOutput) ToQueueAuthorizationRuleTypeOutputWithContext(ctx context.Context) QueueAuthorizationRuleTypeOutput {
	return o
}

// Resource location.
func (o QueueAuthorizationRuleTypeOutput) Location() pulumi.StringPtrOutput {
	return o.ApplyT(func(v QueueAuthorizationRuleType) *string { return v.Location }).(pulumi.StringPtrOutput)
}

// Resource name
func (o QueueAuthorizationRuleTypeOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v QueueAuthorizationRuleType) string { return v.Name }).(pulumi.StringOutput)
}

// AuthorizationRule properties.
func (o QueueAuthorizationRuleTypeOutput) Properties() SharedAccessAuthorizationRulePropertiesResponseOutput {
	return o.ApplyT(func(v QueueAuthorizationRuleType) SharedAccessAuthorizationRulePropertiesResponse {
		return v.Properties
	}).(SharedAccessAuthorizationRulePropertiesResponseOutput)
}

// Resource type
func (o QueueAuthorizationRuleTypeOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v QueueAuthorizationRuleType) string { return v.Type }).(pulumi.StringOutput)
}

// The Queue Properties definition.
type QueueProperties struct {
	// the TimeSpan idle interval after which the queue is automatically deleted. The minimum duration is 5 minutes.
	AutoDeleteOnIdle *string `pulumi:"autoDeleteOnIdle"`
	// A value that indicates whether this queue has dead letter support when a message expires.
	DeadLetteringOnMessageExpiration *bool `pulumi:"deadLetteringOnMessageExpiration"`
	// The default message time to live value. This is the duration after which the message expires, starting from when the message is sent to Service Bus. This is the default value used when TimeToLive is not set on a message itself.
	DefaultMessageTimeToLive *string `pulumi:"defaultMessageTimeToLive"`
	// TimeSpan structure that defines the duration of the duplicate detection history. The default value is 10 minutes.
	DuplicateDetectionHistoryTimeWindow *string `pulumi:"duplicateDetectionHistoryTimeWindow"`
	// A value that indicates whether server-side batched operations are enabled.
	EnableBatchedOperations *bool `pulumi:"enableBatchedOperations"`
	// A value that indicates whether Express Entities are enabled. An express queue holds a message in memory temporarily before writing it to persistent storage.
	EnableExpress *bool `pulumi:"enableExpress"`
	// A value that indicates whether the queue is to be partitioned across multiple message brokers.
	EnablePartitioning *bool `pulumi:"enablePartitioning"`
	// Entity availability status for the queue.
	EntityAvailabilityStatus *string `pulumi:"entityAvailabilityStatus"`
	// A value that indicates whether the message is accessible anonymously.
	IsAnonymousAccessible *bool `pulumi:"isAnonymousAccessible"`
	// The duration of a peek-lock; that is, the amount of time that the message is locked for other receivers. The maximum value for LockDuration is 5 minutes; the default value is 1 minute.
	LockDuration *string `pulumi:"lockDuration"`
	// The maximum delivery count. A message is automatically deadlettered after this number of deliveries.
	MaxDeliveryCount *int `pulumi:"maxDeliveryCount"`
	// The maximum size of the queue in megabytes, which is the size of memory allocated for the queue.
	MaxSizeInMegabytes *int `pulumi:"maxSizeInMegabytes"`
	// A value indicating if this queue requires duplicate detection.
	RequiresDuplicateDetection *bool `pulumi:"requiresDuplicateDetection"`
	// A value that indicates whether the queue supports the concept of sessions.
	RequiresSession *bool `pulumi:"requiresSession"`
	// Enumerates the possible values for the status of a messaging entity.
	Status *string `pulumi:"status"`
	// A value that indicates whether the queue supports ordering.
	SupportOrdering *bool `pulumi:"supportOrdering"`
}

// QueuePropertiesInput is an input type that accepts QueuePropertiesArgs and QueuePropertiesOutput values.
// You can construct a concrete instance of `QueuePropertiesInput` via:
//
//          QueuePropertiesArgs{...}
type QueuePropertiesInput interface {
	pulumi.Input

	ToQueuePropertiesOutput() QueuePropertiesOutput
	ToQueuePropertiesOutputWithContext(context.Context) QueuePropertiesOutput
}

// The Queue Properties definition.
type QueuePropertiesArgs struct {
	// the TimeSpan idle interval after which the queue is automatically deleted. The minimum duration is 5 minutes.
	AutoDeleteOnIdle pulumi.StringPtrInput `pulumi:"autoDeleteOnIdle"`
	// A value that indicates whether this queue has dead letter support when a message expires.
	DeadLetteringOnMessageExpiration pulumi.BoolPtrInput `pulumi:"deadLetteringOnMessageExpiration"`
	// The default message time to live value. This is the duration after which the message expires, starting from when the message is sent to Service Bus. This is the default value used when TimeToLive is not set on a message itself.
	DefaultMessageTimeToLive pulumi.StringPtrInput `pulumi:"defaultMessageTimeToLive"`
	// TimeSpan structure that defines the duration of the duplicate detection history. The default value is 10 minutes.
	DuplicateDetectionHistoryTimeWindow pulumi.StringPtrInput `pulumi:"duplicateDetectionHistoryTimeWindow"`
	// A value that indicates whether server-side batched operations are enabled.
	EnableBatchedOperations pulumi.BoolPtrInput `pulumi:"enableBatchedOperations"`
	// A value that indicates whether Express Entities are enabled. An express queue holds a message in memory temporarily before writing it to persistent storage.
	EnableExpress pulumi.BoolPtrInput `pulumi:"enableExpress"`
	// A value that indicates whether the queue is to be partitioned across multiple message brokers.
	EnablePartitioning pulumi.BoolPtrInput `pulumi:"enablePartitioning"`
	// Entity availability status for the queue.
	EntityAvailabilityStatus pulumi.StringPtrInput `pulumi:"entityAvailabilityStatus"`
	// A value that indicates whether the message is accessible anonymously.
	IsAnonymousAccessible pulumi.BoolPtrInput `pulumi:"isAnonymousAccessible"`
	// The duration of a peek-lock; that is, the amount of time that the message is locked for other receivers. The maximum value for LockDuration is 5 minutes; the default value is 1 minute.
	LockDuration pulumi.StringPtrInput `pulumi:"lockDuration"`
	// The maximum delivery count. A message is automatically deadlettered after this number of deliveries.
	MaxDeliveryCount pulumi.IntPtrInput `pulumi:"maxDeliveryCount"`
	// The maximum size of the queue in megabytes, which is the size of memory allocated for the queue.
	MaxSizeInMegabytes pulumi.IntPtrInput `pulumi:"maxSizeInMegabytes"`
	// A value indicating if this queue requires duplicate detection.
	RequiresDuplicateDetection pulumi.BoolPtrInput `pulumi:"requiresDuplicateDetection"`
	// A value that indicates whether the queue supports the concept of sessions.
	RequiresSession pulumi.BoolPtrInput `pulumi:"requiresSession"`
	// Enumerates the possible values for the status of a messaging entity.
	Status pulumi.StringPtrInput `pulumi:"status"`
	// A value that indicates whether the queue supports ordering.
	SupportOrdering pulumi.BoolPtrInput `pulumi:"supportOrdering"`
}

func (QueuePropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*QueueProperties)(nil)).Elem()
}

func (i QueuePropertiesArgs) ToQueuePropertiesOutput() QueuePropertiesOutput {
	return i.ToQueuePropertiesOutputWithContext(context.Background())
}

func (i QueuePropertiesArgs) ToQueuePropertiesOutputWithContext(ctx context.Context) QueuePropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(QueuePropertiesOutput)
}

func (i QueuePropertiesArgs) ToQueuePropertiesPtrOutput() QueuePropertiesPtrOutput {
	return i.ToQueuePropertiesPtrOutputWithContext(context.Background())
}

func (i QueuePropertiesArgs) ToQueuePropertiesPtrOutputWithContext(ctx context.Context) QueuePropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(QueuePropertiesOutput).ToQueuePropertiesPtrOutputWithContext(ctx)
}

// QueuePropertiesPtrInput is an input type that accepts QueuePropertiesArgs, QueuePropertiesPtr and QueuePropertiesPtrOutput values.
// You can construct a concrete instance of `QueuePropertiesPtrInput` via:
//
//          QueuePropertiesArgs{...}
//
//  or:
//
//          nil
type QueuePropertiesPtrInput interface {
	pulumi.Input

	ToQueuePropertiesPtrOutput() QueuePropertiesPtrOutput
	ToQueuePropertiesPtrOutputWithContext(context.Context) QueuePropertiesPtrOutput
}

type queuePropertiesPtrType QueuePropertiesArgs

func QueuePropertiesPtr(v *QueuePropertiesArgs) QueuePropertiesPtrInput {
	return (*queuePropertiesPtrType)(v)
}

func (*queuePropertiesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**QueueProperties)(nil)).Elem()
}

func (i *queuePropertiesPtrType) ToQueuePropertiesPtrOutput() QueuePropertiesPtrOutput {
	return i.ToQueuePropertiesPtrOutputWithContext(context.Background())
}

func (i *queuePropertiesPtrType) ToQueuePropertiesPtrOutputWithContext(ctx context.Context) QueuePropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(QueuePropertiesPtrOutput)
}

// The Queue Properties definition.
type QueuePropertiesOutput struct{ *pulumi.OutputState }

func (QueuePropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*QueueProperties)(nil)).Elem()
}

func (o QueuePropertiesOutput) ToQueuePropertiesOutput() QueuePropertiesOutput {
	return o
}

func (o QueuePropertiesOutput) ToQueuePropertiesOutputWithContext(ctx context.Context) QueuePropertiesOutput {
	return o
}

func (o QueuePropertiesOutput) ToQueuePropertiesPtrOutput() QueuePropertiesPtrOutput {
	return o.ToQueuePropertiesPtrOutputWithContext(context.Background())
}

func (o QueuePropertiesOutput) ToQueuePropertiesPtrOutputWithContext(ctx context.Context) QueuePropertiesPtrOutput {
	return o.ApplyT(func(v QueueProperties) *QueueProperties {
		return &v
	}).(QueuePropertiesPtrOutput)
}

// the TimeSpan idle interval after which the queue is automatically deleted. The minimum duration is 5 minutes.
func (o QueuePropertiesOutput) AutoDeleteOnIdle() pulumi.StringPtrOutput {
	return o.ApplyT(func(v QueueProperties) *string { return v.AutoDeleteOnIdle }).(pulumi.StringPtrOutput)
}

// A value that indicates whether this queue has dead letter support when a message expires.
func (o QueuePropertiesOutput) DeadLetteringOnMessageExpiration() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v QueueProperties) *bool { return v.DeadLetteringOnMessageExpiration }).(pulumi.BoolPtrOutput)
}

// The default message time to live value. This is the duration after which the message expires, starting from when the message is sent to Service Bus. This is the default value used when TimeToLive is not set on a message itself.
func (o QueuePropertiesOutput) DefaultMessageTimeToLive() pulumi.StringPtrOutput {
	return o.ApplyT(func(v QueueProperties) *string { return v.DefaultMessageTimeToLive }).(pulumi.StringPtrOutput)
}

// TimeSpan structure that defines the duration of the duplicate detection history. The default value is 10 minutes.
func (o QueuePropertiesOutput) DuplicateDetectionHistoryTimeWindow() pulumi.StringPtrOutput {
	return o.ApplyT(func(v QueueProperties) *string { return v.DuplicateDetectionHistoryTimeWindow }).(pulumi.StringPtrOutput)
}

// A value that indicates whether server-side batched operations are enabled.
func (o QueuePropertiesOutput) EnableBatchedOperations() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v QueueProperties) *bool { return v.EnableBatchedOperations }).(pulumi.BoolPtrOutput)
}

// A value that indicates whether Express Entities are enabled. An express queue holds a message in memory temporarily before writing it to persistent storage.
func (o QueuePropertiesOutput) EnableExpress() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v QueueProperties) *bool { return v.EnableExpress }).(pulumi.BoolPtrOutput)
}

// A value that indicates whether the queue is to be partitioned across multiple message brokers.
func (o QueuePropertiesOutput) EnablePartitioning() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v QueueProperties) *bool { return v.EnablePartitioning }).(pulumi.BoolPtrOutput)
}

// Entity availability status for the queue.
func (o QueuePropertiesOutput) EntityAvailabilityStatus() pulumi.StringPtrOutput {
	return o.ApplyT(func(v QueueProperties) *string { return v.EntityAvailabilityStatus }).(pulumi.StringPtrOutput)
}

// A value that indicates whether the message is accessible anonymously.
func (o QueuePropertiesOutput) IsAnonymousAccessible() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v QueueProperties) *bool { return v.IsAnonymousAccessible }).(pulumi.BoolPtrOutput)
}

// The duration of a peek-lock; that is, the amount of time that the message is locked for other receivers. The maximum value for LockDuration is 5 minutes; the default value is 1 minute.
func (o QueuePropertiesOutput) LockDuration() pulumi.StringPtrOutput {
	return o.ApplyT(func(v QueueProperties) *string { return v.LockDuration }).(pulumi.StringPtrOutput)
}

// The maximum delivery count. A message is automatically deadlettered after this number of deliveries.
func (o QueuePropertiesOutput) MaxDeliveryCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v QueueProperties) *int { return v.MaxDeliveryCount }).(pulumi.IntPtrOutput)
}

// The maximum size of the queue in megabytes, which is the size of memory allocated for the queue.
func (o QueuePropertiesOutput) MaxSizeInMegabytes() pulumi.IntPtrOutput {
	return o.ApplyT(func(v QueueProperties) *int { return v.MaxSizeInMegabytes }).(pulumi.IntPtrOutput)
}

// A value indicating if this queue requires duplicate detection.
func (o QueuePropertiesOutput) RequiresDuplicateDetection() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v QueueProperties) *bool { return v.RequiresDuplicateDetection }).(pulumi.BoolPtrOutput)
}

// A value that indicates whether the queue supports the concept of sessions.
func (o QueuePropertiesOutput) RequiresSession() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v QueueProperties) *bool { return v.RequiresSession }).(pulumi.BoolPtrOutput)
}

// Enumerates the possible values for the status of a messaging entity.
func (o QueuePropertiesOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v QueueProperties) *string { return v.Status }).(pulumi.StringPtrOutput)
}

// A value that indicates whether the queue supports ordering.
func (o QueuePropertiesOutput) SupportOrdering() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v QueueProperties) *bool { return v.SupportOrdering }).(pulumi.BoolPtrOutput)
}

type QueuePropertiesPtrOutput struct{ *pulumi.OutputState }

func (QueuePropertiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**QueueProperties)(nil)).Elem()
}

func (o QueuePropertiesPtrOutput) ToQueuePropertiesPtrOutput() QueuePropertiesPtrOutput {
	return o
}

func (o QueuePropertiesPtrOutput) ToQueuePropertiesPtrOutputWithContext(ctx context.Context) QueuePropertiesPtrOutput {
	return o
}

func (o QueuePropertiesPtrOutput) Elem() QueuePropertiesOutput {
	return o.ApplyT(func(v *QueueProperties) QueueProperties { return *v }).(QueuePropertiesOutput)
}

// the TimeSpan idle interval after which the queue is automatically deleted. The minimum duration is 5 minutes.
func (o QueuePropertiesPtrOutput) AutoDeleteOnIdle() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *QueueProperties) *string {
		if v == nil {
			return nil
		}
		return v.AutoDeleteOnIdle
	}).(pulumi.StringPtrOutput)
}

// A value that indicates whether this queue has dead letter support when a message expires.
func (o QueuePropertiesPtrOutput) DeadLetteringOnMessageExpiration() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *QueueProperties) *bool {
		if v == nil {
			return nil
		}
		return v.DeadLetteringOnMessageExpiration
	}).(pulumi.BoolPtrOutput)
}

// The default message time to live value. This is the duration after which the message expires, starting from when the message is sent to Service Bus. This is the default value used when TimeToLive is not set on a message itself.
func (o QueuePropertiesPtrOutput) DefaultMessageTimeToLive() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *QueueProperties) *string {
		if v == nil {
			return nil
		}
		return v.DefaultMessageTimeToLive
	}).(pulumi.StringPtrOutput)
}

// TimeSpan structure that defines the duration of the duplicate detection history. The default value is 10 minutes.
func (o QueuePropertiesPtrOutput) DuplicateDetectionHistoryTimeWindow() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *QueueProperties) *string {
		if v == nil {
			return nil
		}
		return v.DuplicateDetectionHistoryTimeWindow
	}).(pulumi.StringPtrOutput)
}

// A value that indicates whether server-side batched operations are enabled.
func (o QueuePropertiesPtrOutput) EnableBatchedOperations() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *QueueProperties) *bool {
		if v == nil {
			return nil
		}
		return v.EnableBatchedOperations
	}).(pulumi.BoolPtrOutput)
}

// A value that indicates whether Express Entities are enabled. An express queue holds a message in memory temporarily before writing it to persistent storage.
func (o QueuePropertiesPtrOutput) EnableExpress() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *QueueProperties) *bool {
		if v == nil {
			return nil
		}
		return v.EnableExpress
	}).(pulumi.BoolPtrOutput)
}

// A value that indicates whether the queue is to be partitioned across multiple message brokers.
func (o QueuePropertiesPtrOutput) EnablePartitioning() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *QueueProperties) *bool {
		if v == nil {
			return nil
		}
		return v.EnablePartitioning
	}).(pulumi.BoolPtrOutput)
}

// Entity availability status for the queue.
func (o QueuePropertiesPtrOutput) EntityAvailabilityStatus() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *QueueProperties) *string {
		if v == nil {
			return nil
		}
		return v.EntityAvailabilityStatus
	}).(pulumi.StringPtrOutput)
}

// A value that indicates whether the message is accessible anonymously.
func (o QueuePropertiesPtrOutput) IsAnonymousAccessible() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *QueueProperties) *bool {
		if v == nil {
			return nil
		}
		return v.IsAnonymousAccessible
	}).(pulumi.BoolPtrOutput)
}

// The duration of a peek-lock; that is, the amount of time that the message is locked for other receivers. The maximum value for LockDuration is 5 minutes; the default value is 1 minute.
func (o QueuePropertiesPtrOutput) LockDuration() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *QueueProperties) *string {
		if v == nil {
			return nil
		}
		return v.LockDuration
	}).(pulumi.StringPtrOutput)
}

// The maximum delivery count. A message is automatically deadlettered after this number of deliveries.
func (o QueuePropertiesPtrOutput) MaxDeliveryCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *QueueProperties) *int {
		if v == nil {
			return nil
		}
		return v.MaxDeliveryCount
	}).(pulumi.IntPtrOutput)
}

// The maximum size of the queue in megabytes, which is the size of memory allocated for the queue.
func (o QueuePropertiesPtrOutput) MaxSizeInMegabytes() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *QueueProperties) *int {
		if v == nil {
			return nil
		}
		return v.MaxSizeInMegabytes
	}).(pulumi.IntPtrOutput)
}

// A value indicating if this queue requires duplicate detection.
func (o QueuePropertiesPtrOutput) RequiresDuplicateDetection() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *QueueProperties) *bool {
		if v == nil {
			return nil
		}
		return v.RequiresDuplicateDetection
	}).(pulumi.BoolPtrOutput)
}

// A value that indicates whether the queue supports the concept of sessions.
func (o QueuePropertiesPtrOutput) RequiresSession() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *QueueProperties) *bool {
		if v == nil {
			return nil
		}
		return v.RequiresSession
	}).(pulumi.BoolPtrOutput)
}

// Enumerates the possible values for the status of a messaging entity.
func (o QueuePropertiesPtrOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *QueueProperties) *string {
		if v == nil {
			return nil
		}
		return v.Status
	}).(pulumi.StringPtrOutput)
}

// A value that indicates whether the queue supports ordering.
func (o QueuePropertiesPtrOutput) SupportOrdering() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *QueueProperties) *bool {
		if v == nil {
			return nil
		}
		return v.SupportOrdering
	}).(pulumi.BoolPtrOutput)
}

// The Queue Properties definition.
type QueuePropertiesResponse struct {
	// Last time a message was sent, or the last time there was a receive request to this queue.
	AccessedAt string `pulumi:"accessedAt"`
	// the TimeSpan idle interval after which the queue is automatically deleted. The minimum duration is 5 minutes.
	AutoDeleteOnIdle *string `pulumi:"autoDeleteOnIdle"`
	// Message Count Details.
	CountDetails MessageCountDetailsResponse `pulumi:"countDetails"`
	// The exact time the message was created.
	CreatedAt string `pulumi:"createdAt"`
	// A value that indicates whether this queue has dead letter support when a message expires.
	DeadLetteringOnMessageExpiration *bool `pulumi:"deadLetteringOnMessageExpiration"`
	// The default message time to live value. This is the duration after which the message expires, starting from when the message is sent to Service Bus. This is the default value used when TimeToLive is not set on a message itself.
	DefaultMessageTimeToLive *string `pulumi:"defaultMessageTimeToLive"`
	// TimeSpan structure that defines the duration of the duplicate detection history. The default value is 10 minutes.
	DuplicateDetectionHistoryTimeWindow *string `pulumi:"duplicateDetectionHistoryTimeWindow"`
	// A value that indicates whether server-side batched operations are enabled.
	EnableBatchedOperations *bool `pulumi:"enableBatchedOperations"`
	// A value that indicates whether Express Entities are enabled. An express queue holds a message in memory temporarily before writing it to persistent storage.
	EnableExpress *bool `pulumi:"enableExpress"`
	// A value that indicates whether the queue is to be partitioned across multiple message brokers.
	EnablePartitioning *bool `pulumi:"enablePartitioning"`
	// Entity availability status for the queue.
	EntityAvailabilityStatus *string `pulumi:"entityAvailabilityStatus"`
	// A value that indicates whether the message is accessible anonymously.
	IsAnonymousAccessible *bool `pulumi:"isAnonymousAccessible"`
	// The duration of a peek-lock; that is, the amount of time that the message is locked for other receivers. The maximum value for LockDuration is 5 minutes; the default value is 1 minute.
	LockDuration *string `pulumi:"lockDuration"`
	// The maximum delivery count. A message is automatically deadlettered after this number of deliveries.
	MaxDeliveryCount *int `pulumi:"maxDeliveryCount"`
	// The maximum size of the queue in megabytes, which is the size of memory allocated for the queue.
	MaxSizeInMegabytes *int `pulumi:"maxSizeInMegabytes"`
	// The number of messages in the queue.
	MessageCount int `pulumi:"messageCount"`
	// A value indicating if this queue requires duplicate detection.
	RequiresDuplicateDetection *bool `pulumi:"requiresDuplicateDetection"`
	// A value that indicates whether the queue supports the concept of sessions.
	RequiresSession *bool `pulumi:"requiresSession"`
	// The size of the queue, in bytes.
	SizeInBytes int `pulumi:"sizeInBytes"`
	// Enumerates the possible values for the status of a messaging entity.
	Status *string `pulumi:"status"`
	// A value that indicates whether the queue supports ordering.
	SupportOrdering *bool `pulumi:"supportOrdering"`
	// The exact time the message was updated.
	UpdatedAt string `pulumi:"updatedAt"`
}

// QueuePropertiesResponseInput is an input type that accepts QueuePropertiesResponseArgs and QueuePropertiesResponseOutput values.
// You can construct a concrete instance of `QueuePropertiesResponseInput` via:
//
//          QueuePropertiesResponseArgs{...}
type QueuePropertiesResponseInput interface {
	pulumi.Input

	ToQueuePropertiesResponseOutput() QueuePropertiesResponseOutput
	ToQueuePropertiesResponseOutputWithContext(context.Context) QueuePropertiesResponseOutput
}

// The Queue Properties definition.
type QueuePropertiesResponseArgs struct {
	// Last time a message was sent, or the last time there was a receive request to this queue.
	AccessedAt pulumi.StringInput `pulumi:"accessedAt"`
	// the TimeSpan idle interval after which the queue is automatically deleted. The minimum duration is 5 minutes.
	AutoDeleteOnIdle pulumi.StringPtrInput `pulumi:"autoDeleteOnIdle"`
	// Message Count Details.
	CountDetails MessageCountDetailsResponseInput `pulumi:"countDetails"`
	// The exact time the message was created.
	CreatedAt pulumi.StringInput `pulumi:"createdAt"`
	// A value that indicates whether this queue has dead letter support when a message expires.
	DeadLetteringOnMessageExpiration pulumi.BoolPtrInput `pulumi:"deadLetteringOnMessageExpiration"`
	// The default message time to live value. This is the duration after which the message expires, starting from when the message is sent to Service Bus. This is the default value used when TimeToLive is not set on a message itself.
	DefaultMessageTimeToLive pulumi.StringPtrInput `pulumi:"defaultMessageTimeToLive"`
	// TimeSpan structure that defines the duration of the duplicate detection history. The default value is 10 minutes.
	DuplicateDetectionHistoryTimeWindow pulumi.StringPtrInput `pulumi:"duplicateDetectionHistoryTimeWindow"`
	// A value that indicates whether server-side batched operations are enabled.
	EnableBatchedOperations pulumi.BoolPtrInput `pulumi:"enableBatchedOperations"`
	// A value that indicates whether Express Entities are enabled. An express queue holds a message in memory temporarily before writing it to persistent storage.
	EnableExpress pulumi.BoolPtrInput `pulumi:"enableExpress"`
	// A value that indicates whether the queue is to be partitioned across multiple message brokers.
	EnablePartitioning pulumi.BoolPtrInput `pulumi:"enablePartitioning"`
	// Entity availability status for the queue.
	EntityAvailabilityStatus pulumi.StringPtrInput `pulumi:"entityAvailabilityStatus"`
	// A value that indicates whether the message is accessible anonymously.
	IsAnonymousAccessible pulumi.BoolPtrInput `pulumi:"isAnonymousAccessible"`
	// The duration of a peek-lock; that is, the amount of time that the message is locked for other receivers. The maximum value for LockDuration is 5 minutes; the default value is 1 minute.
	LockDuration pulumi.StringPtrInput `pulumi:"lockDuration"`
	// The maximum delivery count. A message is automatically deadlettered after this number of deliveries.
	MaxDeliveryCount pulumi.IntPtrInput `pulumi:"maxDeliveryCount"`
	// The maximum size of the queue in megabytes, which is the size of memory allocated for the queue.
	MaxSizeInMegabytes pulumi.IntPtrInput `pulumi:"maxSizeInMegabytes"`
	// The number of messages in the queue.
	MessageCount pulumi.IntInput `pulumi:"messageCount"`
	// A value indicating if this queue requires duplicate detection.
	RequiresDuplicateDetection pulumi.BoolPtrInput `pulumi:"requiresDuplicateDetection"`
	// A value that indicates whether the queue supports the concept of sessions.
	RequiresSession pulumi.BoolPtrInput `pulumi:"requiresSession"`
	// The size of the queue, in bytes.
	SizeInBytes pulumi.IntInput `pulumi:"sizeInBytes"`
	// Enumerates the possible values for the status of a messaging entity.
	Status pulumi.StringPtrInput `pulumi:"status"`
	// A value that indicates whether the queue supports ordering.
	SupportOrdering pulumi.BoolPtrInput `pulumi:"supportOrdering"`
	// The exact time the message was updated.
	UpdatedAt pulumi.StringInput `pulumi:"updatedAt"`
}

func (QueuePropertiesResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*QueuePropertiesResponse)(nil)).Elem()
}

func (i QueuePropertiesResponseArgs) ToQueuePropertiesResponseOutput() QueuePropertiesResponseOutput {
	return i.ToQueuePropertiesResponseOutputWithContext(context.Background())
}

func (i QueuePropertiesResponseArgs) ToQueuePropertiesResponseOutputWithContext(ctx context.Context) QueuePropertiesResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(QueuePropertiesResponseOutput)
}

func (i QueuePropertiesResponseArgs) ToQueuePropertiesResponsePtrOutput() QueuePropertiesResponsePtrOutput {
	return i.ToQueuePropertiesResponsePtrOutputWithContext(context.Background())
}

func (i QueuePropertiesResponseArgs) ToQueuePropertiesResponsePtrOutputWithContext(ctx context.Context) QueuePropertiesResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(QueuePropertiesResponseOutput).ToQueuePropertiesResponsePtrOutputWithContext(ctx)
}

// QueuePropertiesResponsePtrInput is an input type that accepts QueuePropertiesResponseArgs, QueuePropertiesResponsePtr and QueuePropertiesResponsePtrOutput values.
// You can construct a concrete instance of `QueuePropertiesResponsePtrInput` via:
//
//          QueuePropertiesResponseArgs{...}
//
//  or:
//
//          nil
type QueuePropertiesResponsePtrInput interface {
	pulumi.Input

	ToQueuePropertiesResponsePtrOutput() QueuePropertiesResponsePtrOutput
	ToQueuePropertiesResponsePtrOutputWithContext(context.Context) QueuePropertiesResponsePtrOutput
}

type queuePropertiesResponsePtrType QueuePropertiesResponseArgs

func QueuePropertiesResponsePtr(v *QueuePropertiesResponseArgs) QueuePropertiesResponsePtrInput {
	return (*queuePropertiesResponsePtrType)(v)
}

func (*queuePropertiesResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**QueuePropertiesResponse)(nil)).Elem()
}

func (i *queuePropertiesResponsePtrType) ToQueuePropertiesResponsePtrOutput() QueuePropertiesResponsePtrOutput {
	return i.ToQueuePropertiesResponsePtrOutputWithContext(context.Background())
}

func (i *queuePropertiesResponsePtrType) ToQueuePropertiesResponsePtrOutputWithContext(ctx context.Context) QueuePropertiesResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(QueuePropertiesResponsePtrOutput)
}

// The Queue Properties definition.
type QueuePropertiesResponseOutput struct{ *pulumi.OutputState }

func (QueuePropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*QueuePropertiesResponse)(nil)).Elem()
}

func (o QueuePropertiesResponseOutput) ToQueuePropertiesResponseOutput() QueuePropertiesResponseOutput {
	return o
}

func (o QueuePropertiesResponseOutput) ToQueuePropertiesResponseOutputWithContext(ctx context.Context) QueuePropertiesResponseOutput {
	return o
}

func (o QueuePropertiesResponseOutput) ToQueuePropertiesResponsePtrOutput() QueuePropertiesResponsePtrOutput {
	return o.ToQueuePropertiesResponsePtrOutputWithContext(context.Background())
}

func (o QueuePropertiesResponseOutput) ToQueuePropertiesResponsePtrOutputWithContext(ctx context.Context) QueuePropertiesResponsePtrOutput {
	return o.ApplyT(func(v QueuePropertiesResponse) *QueuePropertiesResponse {
		return &v
	}).(QueuePropertiesResponsePtrOutput)
}

// Last time a message was sent, or the last time there was a receive request to this queue.
func (o QueuePropertiesResponseOutput) AccessedAt() pulumi.StringOutput {
	return o.ApplyT(func(v QueuePropertiesResponse) string { return v.AccessedAt }).(pulumi.StringOutput)
}

// the TimeSpan idle interval after which the queue is automatically deleted. The minimum duration is 5 minutes.
func (o QueuePropertiesResponseOutput) AutoDeleteOnIdle() pulumi.StringPtrOutput {
	return o.ApplyT(func(v QueuePropertiesResponse) *string { return v.AutoDeleteOnIdle }).(pulumi.StringPtrOutput)
}

// Message Count Details.
func (o QueuePropertiesResponseOutput) CountDetails() MessageCountDetailsResponseOutput {
	return o.ApplyT(func(v QueuePropertiesResponse) MessageCountDetailsResponse { return v.CountDetails }).(MessageCountDetailsResponseOutput)
}

// The exact time the message was created.
func (o QueuePropertiesResponseOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v QueuePropertiesResponse) string { return v.CreatedAt }).(pulumi.StringOutput)
}

// A value that indicates whether this queue has dead letter support when a message expires.
func (o QueuePropertiesResponseOutput) DeadLetteringOnMessageExpiration() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v QueuePropertiesResponse) *bool { return v.DeadLetteringOnMessageExpiration }).(pulumi.BoolPtrOutput)
}

// The default message time to live value. This is the duration after which the message expires, starting from when the message is sent to Service Bus. This is the default value used when TimeToLive is not set on a message itself.
func (o QueuePropertiesResponseOutput) DefaultMessageTimeToLive() pulumi.StringPtrOutput {
	return o.ApplyT(func(v QueuePropertiesResponse) *string { return v.DefaultMessageTimeToLive }).(pulumi.StringPtrOutput)
}

// TimeSpan structure that defines the duration of the duplicate detection history. The default value is 10 minutes.
func (o QueuePropertiesResponseOutput) DuplicateDetectionHistoryTimeWindow() pulumi.StringPtrOutput {
	return o.ApplyT(func(v QueuePropertiesResponse) *string { return v.DuplicateDetectionHistoryTimeWindow }).(pulumi.StringPtrOutput)
}

// A value that indicates whether server-side batched operations are enabled.
func (o QueuePropertiesResponseOutput) EnableBatchedOperations() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v QueuePropertiesResponse) *bool { return v.EnableBatchedOperations }).(pulumi.BoolPtrOutput)
}

// A value that indicates whether Express Entities are enabled. An express queue holds a message in memory temporarily before writing it to persistent storage.
func (o QueuePropertiesResponseOutput) EnableExpress() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v QueuePropertiesResponse) *bool { return v.EnableExpress }).(pulumi.BoolPtrOutput)
}

// A value that indicates whether the queue is to be partitioned across multiple message brokers.
func (o QueuePropertiesResponseOutput) EnablePartitioning() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v QueuePropertiesResponse) *bool { return v.EnablePartitioning }).(pulumi.BoolPtrOutput)
}

// Entity availability status for the queue.
func (o QueuePropertiesResponseOutput) EntityAvailabilityStatus() pulumi.StringPtrOutput {
	return o.ApplyT(func(v QueuePropertiesResponse) *string { return v.EntityAvailabilityStatus }).(pulumi.StringPtrOutput)
}

// A value that indicates whether the message is accessible anonymously.
func (o QueuePropertiesResponseOutput) IsAnonymousAccessible() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v QueuePropertiesResponse) *bool { return v.IsAnonymousAccessible }).(pulumi.BoolPtrOutput)
}

// The duration of a peek-lock; that is, the amount of time that the message is locked for other receivers. The maximum value for LockDuration is 5 minutes; the default value is 1 minute.
func (o QueuePropertiesResponseOutput) LockDuration() pulumi.StringPtrOutput {
	return o.ApplyT(func(v QueuePropertiesResponse) *string { return v.LockDuration }).(pulumi.StringPtrOutput)
}

// The maximum delivery count. A message is automatically deadlettered after this number of deliveries.
func (o QueuePropertiesResponseOutput) MaxDeliveryCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v QueuePropertiesResponse) *int { return v.MaxDeliveryCount }).(pulumi.IntPtrOutput)
}

// The maximum size of the queue in megabytes, which is the size of memory allocated for the queue.
func (o QueuePropertiesResponseOutput) MaxSizeInMegabytes() pulumi.IntPtrOutput {
	return o.ApplyT(func(v QueuePropertiesResponse) *int { return v.MaxSizeInMegabytes }).(pulumi.IntPtrOutput)
}

// The number of messages in the queue.
func (o QueuePropertiesResponseOutput) MessageCount() pulumi.IntOutput {
	return o.ApplyT(func(v QueuePropertiesResponse) int { return v.MessageCount }).(pulumi.IntOutput)
}

// A value indicating if this queue requires duplicate detection.
func (o QueuePropertiesResponseOutput) RequiresDuplicateDetection() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v QueuePropertiesResponse) *bool { return v.RequiresDuplicateDetection }).(pulumi.BoolPtrOutput)
}

// A value that indicates whether the queue supports the concept of sessions.
func (o QueuePropertiesResponseOutput) RequiresSession() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v QueuePropertiesResponse) *bool { return v.RequiresSession }).(pulumi.BoolPtrOutput)
}

// The size of the queue, in bytes.
func (o QueuePropertiesResponseOutput) SizeInBytes() pulumi.IntOutput {
	return o.ApplyT(func(v QueuePropertiesResponse) int { return v.SizeInBytes }).(pulumi.IntOutput)
}

// Enumerates the possible values for the status of a messaging entity.
func (o QueuePropertiesResponseOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v QueuePropertiesResponse) *string { return v.Status }).(pulumi.StringPtrOutput)
}

// A value that indicates whether the queue supports ordering.
func (o QueuePropertiesResponseOutput) SupportOrdering() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v QueuePropertiesResponse) *bool { return v.SupportOrdering }).(pulumi.BoolPtrOutput)
}

// The exact time the message was updated.
func (o QueuePropertiesResponseOutput) UpdatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v QueuePropertiesResponse) string { return v.UpdatedAt }).(pulumi.StringOutput)
}

type QueuePropertiesResponsePtrOutput struct{ *pulumi.OutputState }

func (QueuePropertiesResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**QueuePropertiesResponse)(nil)).Elem()
}

func (o QueuePropertiesResponsePtrOutput) ToQueuePropertiesResponsePtrOutput() QueuePropertiesResponsePtrOutput {
	return o
}

func (o QueuePropertiesResponsePtrOutput) ToQueuePropertiesResponsePtrOutputWithContext(ctx context.Context) QueuePropertiesResponsePtrOutput {
	return o
}

func (o QueuePropertiesResponsePtrOutput) Elem() QueuePropertiesResponseOutput {
	return o.ApplyT(func(v *QueuePropertiesResponse) QueuePropertiesResponse { return *v }).(QueuePropertiesResponseOutput)
}

// Last time a message was sent, or the last time there was a receive request to this queue.
func (o QueuePropertiesResponsePtrOutput) AccessedAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *QueuePropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return &v.AccessedAt
	}).(pulumi.StringPtrOutput)
}

// the TimeSpan idle interval after which the queue is automatically deleted. The minimum duration is 5 minutes.
func (o QueuePropertiesResponsePtrOutput) AutoDeleteOnIdle() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *QueuePropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return v.AutoDeleteOnIdle
	}).(pulumi.StringPtrOutput)
}

// Message Count Details.
func (o QueuePropertiesResponsePtrOutput) CountDetails() MessageCountDetailsResponsePtrOutput {
	return o.ApplyT(func(v *QueuePropertiesResponse) *MessageCountDetailsResponse {
		if v == nil {
			return nil
		}
		return &v.CountDetails
	}).(MessageCountDetailsResponsePtrOutput)
}

// The exact time the message was created.
func (o QueuePropertiesResponsePtrOutput) CreatedAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *QueuePropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return &v.CreatedAt
	}).(pulumi.StringPtrOutput)
}

// A value that indicates whether this queue has dead letter support when a message expires.
func (o QueuePropertiesResponsePtrOutput) DeadLetteringOnMessageExpiration() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *QueuePropertiesResponse) *bool {
		if v == nil {
			return nil
		}
		return v.DeadLetteringOnMessageExpiration
	}).(pulumi.BoolPtrOutput)
}

// The default message time to live value. This is the duration after which the message expires, starting from when the message is sent to Service Bus. This is the default value used when TimeToLive is not set on a message itself.
func (o QueuePropertiesResponsePtrOutput) DefaultMessageTimeToLive() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *QueuePropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return v.DefaultMessageTimeToLive
	}).(pulumi.StringPtrOutput)
}

// TimeSpan structure that defines the duration of the duplicate detection history. The default value is 10 minutes.
func (o QueuePropertiesResponsePtrOutput) DuplicateDetectionHistoryTimeWindow() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *QueuePropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return v.DuplicateDetectionHistoryTimeWindow
	}).(pulumi.StringPtrOutput)
}

// A value that indicates whether server-side batched operations are enabled.
func (o QueuePropertiesResponsePtrOutput) EnableBatchedOperations() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *QueuePropertiesResponse) *bool {
		if v == nil {
			return nil
		}
		return v.EnableBatchedOperations
	}).(pulumi.BoolPtrOutput)
}

// A value that indicates whether Express Entities are enabled. An express queue holds a message in memory temporarily before writing it to persistent storage.
func (o QueuePropertiesResponsePtrOutput) EnableExpress() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *QueuePropertiesResponse) *bool {
		if v == nil {
			return nil
		}
		return v.EnableExpress
	}).(pulumi.BoolPtrOutput)
}

// A value that indicates whether the queue is to be partitioned across multiple message brokers.
func (o QueuePropertiesResponsePtrOutput) EnablePartitioning() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *QueuePropertiesResponse) *bool {
		if v == nil {
			return nil
		}
		return v.EnablePartitioning
	}).(pulumi.BoolPtrOutput)
}

// Entity availability status for the queue.
func (o QueuePropertiesResponsePtrOutput) EntityAvailabilityStatus() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *QueuePropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return v.EntityAvailabilityStatus
	}).(pulumi.StringPtrOutput)
}

// A value that indicates whether the message is accessible anonymously.
func (o QueuePropertiesResponsePtrOutput) IsAnonymousAccessible() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *QueuePropertiesResponse) *bool {
		if v == nil {
			return nil
		}
		return v.IsAnonymousAccessible
	}).(pulumi.BoolPtrOutput)
}

// The duration of a peek-lock; that is, the amount of time that the message is locked for other receivers. The maximum value for LockDuration is 5 minutes; the default value is 1 minute.
func (o QueuePropertiesResponsePtrOutput) LockDuration() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *QueuePropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return v.LockDuration
	}).(pulumi.StringPtrOutput)
}

// The maximum delivery count. A message is automatically deadlettered after this number of deliveries.
func (o QueuePropertiesResponsePtrOutput) MaxDeliveryCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *QueuePropertiesResponse) *int {
		if v == nil {
			return nil
		}
		return v.MaxDeliveryCount
	}).(pulumi.IntPtrOutput)
}

// The maximum size of the queue in megabytes, which is the size of memory allocated for the queue.
func (o QueuePropertiesResponsePtrOutput) MaxSizeInMegabytes() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *QueuePropertiesResponse) *int {
		if v == nil {
			return nil
		}
		return v.MaxSizeInMegabytes
	}).(pulumi.IntPtrOutput)
}

// The number of messages in the queue.
func (o QueuePropertiesResponsePtrOutput) MessageCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *QueuePropertiesResponse) *int {
		if v == nil {
			return nil
		}
		return &v.MessageCount
	}).(pulumi.IntPtrOutput)
}

// A value indicating if this queue requires duplicate detection.
func (o QueuePropertiesResponsePtrOutput) RequiresDuplicateDetection() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *QueuePropertiesResponse) *bool {
		if v == nil {
			return nil
		}
		return v.RequiresDuplicateDetection
	}).(pulumi.BoolPtrOutput)
}

// A value that indicates whether the queue supports the concept of sessions.
func (o QueuePropertiesResponsePtrOutput) RequiresSession() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *QueuePropertiesResponse) *bool {
		if v == nil {
			return nil
		}
		return v.RequiresSession
	}).(pulumi.BoolPtrOutput)
}

// The size of the queue, in bytes.
func (o QueuePropertiesResponsePtrOutput) SizeInBytes() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *QueuePropertiesResponse) *int {
		if v == nil {
			return nil
		}
		return &v.SizeInBytes
	}).(pulumi.IntPtrOutput)
}

// Enumerates the possible values for the status of a messaging entity.
func (o QueuePropertiesResponsePtrOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *QueuePropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return v.Status
	}).(pulumi.StringPtrOutput)
}

// A value that indicates whether the queue supports ordering.
func (o QueuePropertiesResponsePtrOutput) SupportOrdering() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *QueuePropertiesResponse) *bool {
		if v == nil {
			return nil
		}
		return v.SupportOrdering
	}).(pulumi.BoolPtrOutput)
}

// The exact time the message was updated.
func (o QueuePropertiesResponsePtrOutput) UpdatedAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *QueuePropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return &v.UpdatedAt
	}).(pulumi.StringPtrOutput)
}

// SharedAccessAuthorizationRule properties.
type SharedAccessAuthorizationRuleGetPropertiesResponse struct {
	// The rights associated with the rule.
	Rights []string `pulumi:"rights"`
}

// SharedAccessAuthorizationRuleGetPropertiesResponseInput is an input type that accepts SharedAccessAuthorizationRuleGetPropertiesResponseArgs and SharedAccessAuthorizationRuleGetPropertiesResponseOutput values.
// You can construct a concrete instance of `SharedAccessAuthorizationRuleGetPropertiesResponseInput` via:
//
//          SharedAccessAuthorizationRuleGetPropertiesResponseArgs{...}
type SharedAccessAuthorizationRuleGetPropertiesResponseInput interface {
	pulumi.Input

	ToSharedAccessAuthorizationRuleGetPropertiesResponseOutput() SharedAccessAuthorizationRuleGetPropertiesResponseOutput
	ToSharedAccessAuthorizationRuleGetPropertiesResponseOutputWithContext(context.Context) SharedAccessAuthorizationRuleGetPropertiesResponseOutput
}

// SharedAccessAuthorizationRule properties.
type SharedAccessAuthorizationRuleGetPropertiesResponseArgs struct {
	// The rights associated with the rule.
	Rights pulumi.StringArrayInput `pulumi:"rights"`
}

func (SharedAccessAuthorizationRuleGetPropertiesResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SharedAccessAuthorizationRuleGetPropertiesResponse)(nil)).Elem()
}

func (i SharedAccessAuthorizationRuleGetPropertiesResponseArgs) ToSharedAccessAuthorizationRuleGetPropertiesResponseOutput() SharedAccessAuthorizationRuleGetPropertiesResponseOutput {
	return i.ToSharedAccessAuthorizationRuleGetPropertiesResponseOutputWithContext(context.Background())
}

func (i SharedAccessAuthorizationRuleGetPropertiesResponseArgs) ToSharedAccessAuthorizationRuleGetPropertiesResponseOutputWithContext(ctx context.Context) SharedAccessAuthorizationRuleGetPropertiesResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SharedAccessAuthorizationRuleGetPropertiesResponseOutput)
}

// SharedAccessAuthorizationRule properties.
type SharedAccessAuthorizationRuleGetPropertiesResponseOutput struct{ *pulumi.OutputState }

func (SharedAccessAuthorizationRuleGetPropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SharedAccessAuthorizationRuleGetPropertiesResponse)(nil)).Elem()
}

func (o SharedAccessAuthorizationRuleGetPropertiesResponseOutput) ToSharedAccessAuthorizationRuleGetPropertiesResponseOutput() SharedAccessAuthorizationRuleGetPropertiesResponseOutput {
	return o
}

func (o SharedAccessAuthorizationRuleGetPropertiesResponseOutput) ToSharedAccessAuthorizationRuleGetPropertiesResponseOutputWithContext(ctx context.Context) SharedAccessAuthorizationRuleGetPropertiesResponseOutput {
	return o
}

// The rights associated with the rule.
func (o SharedAccessAuthorizationRuleGetPropertiesResponseOutput) Rights() pulumi.StringArrayOutput {
	return o.ApplyT(func(v SharedAccessAuthorizationRuleGetPropertiesResponse) []string { return v.Rights }).(pulumi.StringArrayOutput)
}

// AuthorizationRule properties.
type SharedAccessAuthorizationRuleProperties struct {
	// A string that describes Claim Type for authorization rule.
	ClaimType *string `pulumi:"claimType"`
	// A string that describes Claim Value of authorization rule.
	ClaimValue *string `pulumi:"claimValue"`
	// A string that describes the Key Name of authorization rule.
	KeyName *string `pulumi:"keyName"`
	// A base64-encoded 256-bit primary key for signing and validating the SAS token.
	PrimaryKey *string `pulumi:"primaryKey"`
	// The rights associated with the rule.
	Rights []string `pulumi:"rights"`
	// A base64-encoded 256-bit primary key for signing and validating the SAS token.
	SecondaryKey *string `pulumi:"secondaryKey"`
}

// SharedAccessAuthorizationRulePropertiesInput is an input type that accepts SharedAccessAuthorizationRulePropertiesArgs and SharedAccessAuthorizationRulePropertiesOutput values.
// You can construct a concrete instance of `SharedAccessAuthorizationRulePropertiesInput` via:
//
//          SharedAccessAuthorizationRulePropertiesArgs{...}
type SharedAccessAuthorizationRulePropertiesInput interface {
	pulumi.Input

	ToSharedAccessAuthorizationRulePropertiesOutput() SharedAccessAuthorizationRulePropertiesOutput
	ToSharedAccessAuthorizationRulePropertiesOutputWithContext(context.Context) SharedAccessAuthorizationRulePropertiesOutput
}

// AuthorizationRule properties.
type SharedAccessAuthorizationRulePropertiesArgs struct {
	// A string that describes Claim Type for authorization rule.
	ClaimType pulumi.StringPtrInput `pulumi:"claimType"`
	// A string that describes Claim Value of authorization rule.
	ClaimValue pulumi.StringPtrInput `pulumi:"claimValue"`
	// A string that describes the Key Name of authorization rule.
	KeyName pulumi.StringPtrInput `pulumi:"keyName"`
	// A base64-encoded 256-bit primary key for signing and validating the SAS token.
	PrimaryKey pulumi.StringPtrInput `pulumi:"primaryKey"`
	// The rights associated with the rule.
	Rights pulumi.StringArrayInput `pulumi:"rights"`
	// A base64-encoded 256-bit primary key for signing and validating the SAS token.
	SecondaryKey pulumi.StringPtrInput `pulumi:"secondaryKey"`
}

func (SharedAccessAuthorizationRulePropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SharedAccessAuthorizationRuleProperties)(nil)).Elem()
}

func (i SharedAccessAuthorizationRulePropertiesArgs) ToSharedAccessAuthorizationRulePropertiesOutput() SharedAccessAuthorizationRulePropertiesOutput {
	return i.ToSharedAccessAuthorizationRulePropertiesOutputWithContext(context.Background())
}

func (i SharedAccessAuthorizationRulePropertiesArgs) ToSharedAccessAuthorizationRulePropertiesOutputWithContext(ctx context.Context) SharedAccessAuthorizationRulePropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SharedAccessAuthorizationRulePropertiesOutput)
}

func (i SharedAccessAuthorizationRulePropertiesArgs) ToSharedAccessAuthorizationRulePropertiesPtrOutput() SharedAccessAuthorizationRulePropertiesPtrOutput {
	return i.ToSharedAccessAuthorizationRulePropertiesPtrOutputWithContext(context.Background())
}

func (i SharedAccessAuthorizationRulePropertiesArgs) ToSharedAccessAuthorizationRulePropertiesPtrOutputWithContext(ctx context.Context) SharedAccessAuthorizationRulePropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SharedAccessAuthorizationRulePropertiesOutput).ToSharedAccessAuthorizationRulePropertiesPtrOutputWithContext(ctx)
}

// SharedAccessAuthorizationRulePropertiesPtrInput is an input type that accepts SharedAccessAuthorizationRulePropertiesArgs, SharedAccessAuthorizationRulePropertiesPtr and SharedAccessAuthorizationRulePropertiesPtrOutput values.
// You can construct a concrete instance of `SharedAccessAuthorizationRulePropertiesPtrInput` via:
//
//          SharedAccessAuthorizationRulePropertiesArgs{...}
//
//  or:
//
//          nil
type SharedAccessAuthorizationRulePropertiesPtrInput interface {
	pulumi.Input

	ToSharedAccessAuthorizationRulePropertiesPtrOutput() SharedAccessAuthorizationRulePropertiesPtrOutput
	ToSharedAccessAuthorizationRulePropertiesPtrOutputWithContext(context.Context) SharedAccessAuthorizationRulePropertiesPtrOutput
}

type sharedAccessAuthorizationRulePropertiesPtrType SharedAccessAuthorizationRulePropertiesArgs

func SharedAccessAuthorizationRulePropertiesPtr(v *SharedAccessAuthorizationRulePropertiesArgs) SharedAccessAuthorizationRulePropertiesPtrInput {
	return (*sharedAccessAuthorizationRulePropertiesPtrType)(v)
}

func (*sharedAccessAuthorizationRulePropertiesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SharedAccessAuthorizationRuleProperties)(nil)).Elem()
}

func (i *sharedAccessAuthorizationRulePropertiesPtrType) ToSharedAccessAuthorizationRulePropertiesPtrOutput() SharedAccessAuthorizationRulePropertiesPtrOutput {
	return i.ToSharedAccessAuthorizationRulePropertiesPtrOutputWithContext(context.Background())
}

func (i *sharedAccessAuthorizationRulePropertiesPtrType) ToSharedAccessAuthorizationRulePropertiesPtrOutputWithContext(ctx context.Context) SharedAccessAuthorizationRulePropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SharedAccessAuthorizationRulePropertiesPtrOutput)
}

// AuthorizationRule properties.
type SharedAccessAuthorizationRulePropertiesOutput struct{ *pulumi.OutputState }

func (SharedAccessAuthorizationRulePropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SharedAccessAuthorizationRuleProperties)(nil)).Elem()
}

func (o SharedAccessAuthorizationRulePropertiesOutput) ToSharedAccessAuthorizationRulePropertiesOutput() SharedAccessAuthorizationRulePropertiesOutput {
	return o
}

func (o SharedAccessAuthorizationRulePropertiesOutput) ToSharedAccessAuthorizationRulePropertiesOutputWithContext(ctx context.Context) SharedAccessAuthorizationRulePropertiesOutput {
	return o
}

func (o SharedAccessAuthorizationRulePropertiesOutput) ToSharedAccessAuthorizationRulePropertiesPtrOutput() SharedAccessAuthorizationRulePropertiesPtrOutput {
	return o.ToSharedAccessAuthorizationRulePropertiesPtrOutputWithContext(context.Background())
}

func (o SharedAccessAuthorizationRulePropertiesOutput) ToSharedAccessAuthorizationRulePropertiesPtrOutputWithContext(ctx context.Context) SharedAccessAuthorizationRulePropertiesPtrOutput {
	return o.ApplyT(func(v SharedAccessAuthorizationRuleProperties) *SharedAccessAuthorizationRuleProperties {
		return &v
	}).(SharedAccessAuthorizationRulePropertiesPtrOutput)
}

// A string that describes Claim Type for authorization rule.
func (o SharedAccessAuthorizationRulePropertiesOutput) ClaimType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SharedAccessAuthorizationRuleProperties) *string { return v.ClaimType }).(pulumi.StringPtrOutput)
}

// A string that describes Claim Value of authorization rule.
func (o SharedAccessAuthorizationRulePropertiesOutput) ClaimValue() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SharedAccessAuthorizationRuleProperties) *string { return v.ClaimValue }).(pulumi.StringPtrOutput)
}

// A string that describes the Key Name of authorization rule.
func (o SharedAccessAuthorizationRulePropertiesOutput) KeyName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SharedAccessAuthorizationRuleProperties) *string { return v.KeyName }).(pulumi.StringPtrOutput)
}

// A base64-encoded 256-bit primary key for signing and validating the SAS token.
func (o SharedAccessAuthorizationRulePropertiesOutput) PrimaryKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SharedAccessAuthorizationRuleProperties) *string { return v.PrimaryKey }).(pulumi.StringPtrOutput)
}

// The rights associated with the rule.
func (o SharedAccessAuthorizationRulePropertiesOutput) Rights() pulumi.StringArrayOutput {
	return o.ApplyT(func(v SharedAccessAuthorizationRuleProperties) []string { return v.Rights }).(pulumi.StringArrayOutput)
}

// A base64-encoded 256-bit primary key for signing and validating the SAS token.
func (o SharedAccessAuthorizationRulePropertiesOutput) SecondaryKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SharedAccessAuthorizationRuleProperties) *string { return v.SecondaryKey }).(pulumi.StringPtrOutput)
}

type SharedAccessAuthorizationRulePropertiesPtrOutput struct{ *pulumi.OutputState }

func (SharedAccessAuthorizationRulePropertiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SharedAccessAuthorizationRuleProperties)(nil)).Elem()
}

func (o SharedAccessAuthorizationRulePropertiesPtrOutput) ToSharedAccessAuthorizationRulePropertiesPtrOutput() SharedAccessAuthorizationRulePropertiesPtrOutput {
	return o
}

func (o SharedAccessAuthorizationRulePropertiesPtrOutput) ToSharedAccessAuthorizationRulePropertiesPtrOutputWithContext(ctx context.Context) SharedAccessAuthorizationRulePropertiesPtrOutput {
	return o
}

func (o SharedAccessAuthorizationRulePropertiesPtrOutput) Elem() SharedAccessAuthorizationRulePropertiesOutput {
	return o.ApplyT(func(v *SharedAccessAuthorizationRuleProperties) SharedAccessAuthorizationRuleProperties { return *v }).(SharedAccessAuthorizationRulePropertiesOutput)
}

// A string that describes Claim Type for authorization rule.
func (o SharedAccessAuthorizationRulePropertiesPtrOutput) ClaimType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SharedAccessAuthorizationRuleProperties) *string {
		if v == nil {
			return nil
		}
		return v.ClaimType
	}).(pulumi.StringPtrOutput)
}

// A string that describes Claim Value of authorization rule.
func (o SharedAccessAuthorizationRulePropertiesPtrOutput) ClaimValue() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SharedAccessAuthorizationRuleProperties) *string {
		if v == nil {
			return nil
		}
		return v.ClaimValue
	}).(pulumi.StringPtrOutput)
}

// A string that describes the Key Name of authorization rule.
func (o SharedAccessAuthorizationRulePropertiesPtrOutput) KeyName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SharedAccessAuthorizationRuleProperties) *string {
		if v == nil {
			return nil
		}
		return v.KeyName
	}).(pulumi.StringPtrOutput)
}

// A base64-encoded 256-bit primary key for signing and validating the SAS token.
func (o SharedAccessAuthorizationRulePropertiesPtrOutput) PrimaryKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SharedAccessAuthorizationRuleProperties) *string {
		if v == nil {
			return nil
		}
		return v.PrimaryKey
	}).(pulumi.StringPtrOutput)
}

// The rights associated with the rule.
func (o SharedAccessAuthorizationRulePropertiesPtrOutput) Rights() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *SharedAccessAuthorizationRuleProperties) []string {
		if v == nil {
			return nil
		}
		return v.Rights
	}).(pulumi.StringArrayOutput)
}

// A base64-encoded 256-bit primary key for signing and validating the SAS token.
func (o SharedAccessAuthorizationRulePropertiesPtrOutput) SecondaryKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SharedAccessAuthorizationRuleProperties) *string {
		if v == nil {
			return nil
		}
		return v.SecondaryKey
	}).(pulumi.StringPtrOutput)
}

// AuthorizationRule properties.
type SharedAccessAuthorizationRulePropertiesResponse struct {
	// A string that describes Claim Type for authorization rule.
	ClaimType *string `pulumi:"claimType"`
	// A string that describes Claim Value of authorization rule.
	ClaimValue *string `pulumi:"claimValue"`
	// The time the namespace was created.
	CreatedTime string `pulumi:"createdTime"`
	// A string that describes the Key Name of authorization rule.
	KeyName *string `pulumi:"keyName"`
	// The time the namespace was updated.
	ModifiedTime string `pulumi:"modifiedTime"`
	// A base64-encoded 256-bit primary key for signing and validating the SAS token.
	PrimaryKey *string `pulumi:"primaryKey"`
	// The rights associated with the rule.
	Rights []string `pulumi:"rights"`
	// A base64-encoded 256-bit primary key for signing and validating the SAS token.
	SecondaryKey *string `pulumi:"secondaryKey"`
}

// SharedAccessAuthorizationRulePropertiesResponseInput is an input type that accepts SharedAccessAuthorizationRulePropertiesResponseArgs and SharedAccessAuthorizationRulePropertiesResponseOutput values.
// You can construct a concrete instance of `SharedAccessAuthorizationRulePropertiesResponseInput` via:
//
//          SharedAccessAuthorizationRulePropertiesResponseArgs{...}
type SharedAccessAuthorizationRulePropertiesResponseInput interface {
	pulumi.Input

	ToSharedAccessAuthorizationRulePropertiesResponseOutput() SharedAccessAuthorizationRulePropertiesResponseOutput
	ToSharedAccessAuthorizationRulePropertiesResponseOutputWithContext(context.Context) SharedAccessAuthorizationRulePropertiesResponseOutput
}

// AuthorizationRule properties.
type SharedAccessAuthorizationRulePropertiesResponseArgs struct {
	// A string that describes Claim Type for authorization rule.
	ClaimType pulumi.StringPtrInput `pulumi:"claimType"`
	// A string that describes Claim Value of authorization rule.
	ClaimValue pulumi.StringPtrInput `pulumi:"claimValue"`
	// The time the namespace was created.
	CreatedTime pulumi.StringInput `pulumi:"createdTime"`
	// A string that describes the Key Name of authorization rule.
	KeyName pulumi.StringPtrInput `pulumi:"keyName"`
	// The time the namespace was updated.
	ModifiedTime pulumi.StringInput `pulumi:"modifiedTime"`
	// A base64-encoded 256-bit primary key for signing and validating the SAS token.
	PrimaryKey pulumi.StringPtrInput `pulumi:"primaryKey"`
	// The rights associated with the rule.
	Rights pulumi.StringArrayInput `pulumi:"rights"`
	// A base64-encoded 256-bit primary key for signing and validating the SAS token.
	SecondaryKey pulumi.StringPtrInput `pulumi:"secondaryKey"`
}

func (SharedAccessAuthorizationRulePropertiesResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SharedAccessAuthorizationRulePropertiesResponse)(nil)).Elem()
}

func (i SharedAccessAuthorizationRulePropertiesResponseArgs) ToSharedAccessAuthorizationRulePropertiesResponseOutput() SharedAccessAuthorizationRulePropertiesResponseOutput {
	return i.ToSharedAccessAuthorizationRulePropertiesResponseOutputWithContext(context.Background())
}

func (i SharedAccessAuthorizationRulePropertiesResponseArgs) ToSharedAccessAuthorizationRulePropertiesResponseOutputWithContext(ctx context.Context) SharedAccessAuthorizationRulePropertiesResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SharedAccessAuthorizationRulePropertiesResponseOutput)
}

func (i SharedAccessAuthorizationRulePropertiesResponseArgs) ToSharedAccessAuthorizationRulePropertiesResponsePtrOutput() SharedAccessAuthorizationRulePropertiesResponsePtrOutput {
	return i.ToSharedAccessAuthorizationRulePropertiesResponsePtrOutputWithContext(context.Background())
}

func (i SharedAccessAuthorizationRulePropertiesResponseArgs) ToSharedAccessAuthorizationRulePropertiesResponsePtrOutputWithContext(ctx context.Context) SharedAccessAuthorizationRulePropertiesResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SharedAccessAuthorizationRulePropertiesResponseOutput).ToSharedAccessAuthorizationRulePropertiesResponsePtrOutputWithContext(ctx)
}

// SharedAccessAuthorizationRulePropertiesResponsePtrInput is an input type that accepts SharedAccessAuthorizationRulePropertiesResponseArgs, SharedAccessAuthorizationRulePropertiesResponsePtr and SharedAccessAuthorizationRulePropertiesResponsePtrOutput values.
// You can construct a concrete instance of `SharedAccessAuthorizationRulePropertiesResponsePtrInput` via:
//
//          SharedAccessAuthorizationRulePropertiesResponseArgs{...}
//
//  or:
//
//          nil
type SharedAccessAuthorizationRulePropertiesResponsePtrInput interface {
	pulumi.Input

	ToSharedAccessAuthorizationRulePropertiesResponsePtrOutput() SharedAccessAuthorizationRulePropertiesResponsePtrOutput
	ToSharedAccessAuthorizationRulePropertiesResponsePtrOutputWithContext(context.Context) SharedAccessAuthorizationRulePropertiesResponsePtrOutput
}

type sharedAccessAuthorizationRulePropertiesResponsePtrType SharedAccessAuthorizationRulePropertiesResponseArgs

func SharedAccessAuthorizationRulePropertiesResponsePtr(v *SharedAccessAuthorizationRulePropertiesResponseArgs) SharedAccessAuthorizationRulePropertiesResponsePtrInput {
	return (*sharedAccessAuthorizationRulePropertiesResponsePtrType)(v)
}

func (*sharedAccessAuthorizationRulePropertiesResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SharedAccessAuthorizationRulePropertiesResponse)(nil)).Elem()
}

func (i *sharedAccessAuthorizationRulePropertiesResponsePtrType) ToSharedAccessAuthorizationRulePropertiesResponsePtrOutput() SharedAccessAuthorizationRulePropertiesResponsePtrOutput {
	return i.ToSharedAccessAuthorizationRulePropertiesResponsePtrOutputWithContext(context.Background())
}

func (i *sharedAccessAuthorizationRulePropertiesResponsePtrType) ToSharedAccessAuthorizationRulePropertiesResponsePtrOutputWithContext(ctx context.Context) SharedAccessAuthorizationRulePropertiesResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SharedAccessAuthorizationRulePropertiesResponsePtrOutput)
}

// AuthorizationRule properties.
type SharedAccessAuthorizationRulePropertiesResponseOutput struct{ *pulumi.OutputState }

func (SharedAccessAuthorizationRulePropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SharedAccessAuthorizationRulePropertiesResponse)(nil)).Elem()
}

func (o SharedAccessAuthorizationRulePropertiesResponseOutput) ToSharedAccessAuthorizationRulePropertiesResponseOutput() SharedAccessAuthorizationRulePropertiesResponseOutput {
	return o
}

func (o SharedAccessAuthorizationRulePropertiesResponseOutput) ToSharedAccessAuthorizationRulePropertiesResponseOutputWithContext(ctx context.Context) SharedAccessAuthorizationRulePropertiesResponseOutput {
	return o
}

func (o SharedAccessAuthorizationRulePropertiesResponseOutput) ToSharedAccessAuthorizationRulePropertiesResponsePtrOutput() SharedAccessAuthorizationRulePropertiesResponsePtrOutput {
	return o.ToSharedAccessAuthorizationRulePropertiesResponsePtrOutputWithContext(context.Background())
}

func (o SharedAccessAuthorizationRulePropertiesResponseOutput) ToSharedAccessAuthorizationRulePropertiesResponsePtrOutputWithContext(ctx context.Context) SharedAccessAuthorizationRulePropertiesResponsePtrOutput {
	return o.ApplyT(func(v SharedAccessAuthorizationRulePropertiesResponse) *SharedAccessAuthorizationRulePropertiesResponse {
		return &v
	}).(SharedAccessAuthorizationRulePropertiesResponsePtrOutput)
}

// A string that describes Claim Type for authorization rule.
func (o SharedAccessAuthorizationRulePropertiesResponseOutput) ClaimType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SharedAccessAuthorizationRulePropertiesResponse) *string { return v.ClaimType }).(pulumi.StringPtrOutput)
}

// A string that describes Claim Value of authorization rule.
func (o SharedAccessAuthorizationRulePropertiesResponseOutput) ClaimValue() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SharedAccessAuthorizationRulePropertiesResponse) *string { return v.ClaimValue }).(pulumi.StringPtrOutput)
}

// The time the namespace was created.
func (o SharedAccessAuthorizationRulePropertiesResponseOutput) CreatedTime() pulumi.StringOutput {
	return o.ApplyT(func(v SharedAccessAuthorizationRulePropertiesResponse) string { return v.CreatedTime }).(pulumi.StringOutput)
}

// A string that describes the Key Name of authorization rule.
func (o SharedAccessAuthorizationRulePropertiesResponseOutput) KeyName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SharedAccessAuthorizationRulePropertiesResponse) *string { return v.KeyName }).(pulumi.StringPtrOutput)
}

// The time the namespace was updated.
func (o SharedAccessAuthorizationRulePropertiesResponseOutput) ModifiedTime() pulumi.StringOutput {
	return o.ApplyT(func(v SharedAccessAuthorizationRulePropertiesResponse) string { return v.ModifiedTime }).(pulumi.StringOutput)
}

// A base64-encoded 256-bit primary key for signing and validating the SAS token.
func (o SharedAccessAuthorizationRulePropertiesResponseOutput) PrimaryKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SharedAccessAuthorizationRulePropertiesResponse) *string { return v.PrimaryKey }).(pulumi.StringPtrOutput)
}

// The rights associated with the rule.
func (o SharedAccessAuthorizationRulePropertiesResponseOutput) Rights() pulumi.StringArrayOutput {
	return o.ApplyT(func(v SharedAccessAuthorizationRulePropertiesResponse) []string { return v.Rights }).(pulumi.StringArrayOutput)
}

// A base64-encoded 256-bit primary key for signing and validating the SAS token.
func (o SharedAccessAuthorizationRulePropertiesResponseOutput) SecondaryKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SharedAccessAuthorizationRulePropertiesResponse) *string { return v.SecondaryKey }).(pulumi.StringPtrOutput)
}

type SharedAccessAuthorizationRulePropertiesResponsePtrOutput struct{ *pulumi.OutputState }

func (SharedAccessAuthorizationRulePropertiesResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SharedAccessAuthorizationRulePropertiesResponse)(nil)).Elem()
}

func (o SharedAccessAuthorizationRulePropertiesResponsePtrOutput) ToSharedAccessAuthorizationRulePropertiesResponsePtrOutput() SharedAccessAuthorizationRulePropertiesResponsePtrOutput {
	return o
}

func (o SharedAccessAuthorizationRulePropertiesResponsePtrOutput) ToSharedAccessAuthorizationRulePropertiesResponsePtrOutputWithContext(ctx context.Context) SharedAccessAuthorizationRulePropertiesResponsePtrOutput {
	return o
}

func (o SharedAccessAuthorizationRulePropertiesResponsePtrOutput) Elem() SharedAccessAuthorizationRulePropertiesResponseOutput {
	return o.ApplyT(func(v *SharedAccessAuthorizationRulePropertiesResponse) SharedAccessAuthorizationRulePropertiesResponse {
		return *v
	}).(SharedAccessAuthorizationRulePropertiesResponseOutput)
}

// A string that describes Claim Type for authorization rule.
func (o SharedAccessAuthorizationRulePropertiesResponsePtrOutput) ClaimType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SharedAccessAuthorizationRulePropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return v.ClaimType
	}).(pulumi.StringPtrOutput)
}

// A string that describes Claim Value of authorization rule.
func (o SharedAccessAuthorizationRulePropertiesResponsePtrOutput) ClaimValue() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SharedAccessAuthorizationRulePropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return v.ClaimValue
	}).(pulumi.StringPtrOutput)
}

// The time the namespace was created.
func (o SharedAccessAuthorizationRulePropertiesResponsePtrOutput) CreatedTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SharedAccessAuthorizationRulePropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return &v.CreatedTime
	}).(pulumi.StringPtrOutput)
}

// A string that describes the Key Name of authorization rule.
func (o SharedAccessAuthorizationRulePropertiesResponsePtrOutput) KeyName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SharedAccessAuthorizationRulePropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return v.KeyName
	}).(pulumi.StringPtrOutput)
}

// The time the namespace was updated.
func (o SharedAccessAuthorizationRulePropertiesResponsePtrOutput) ModifiedTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SharedAccessAuthorizationRulePropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return &v.ModifiedTime
	}).(pulumi.StringPtrOutput)
}

// A base64-encoded 256-bit primary key for signing and validating the SAS token.
func (o SharedAccessAuthorizationRulePropertiesResponsePtrOutput) PrimaryKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SharedAccessAuthorizationRulePropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return v.PrimaryKey
	}).(pulumi.StringPtrOutput)
}

// The rights associated with the rule.
func (o SharedAccessAuthorizationRulePropertiesResponsePtrOutput) Rights() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *SharedAccessAuthorizationRulePropertiesResponse) []string {
		if v == nil {
			return nil
		}
		return v.Rights
	}).(pulumi.StringArrayOutput)
}

// A base64-encoded 256-bit primary key for signing and validating the SAS token.
func (o SharedAccessAuthorizationRulePropertiesResponsePtrOutput) SecondaryKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SharedAccessAuthorizationRulePropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return v.SecondaryKey
	}).(pulumi.StringPtrOutput)
}

// SKU of the namespace.
type Sku struct {
	// The specified messaging units for the tier.
	Capacity *int `pulumi:"capacity"`
	// Name of this SKU.
	Name *string `pulumi:"name"`
	// The billing tier of this particular SKU.
	Tier string `pulumi:"tier"`
}

// SkuInput is an input type that accepts SkuArgs and SkuOutput values.
// You can construct a concrete instance of `SkuInput` via:
//
//          SkuArgs{...}
type SkuInput interface {
	pulumi.Input

	ToSkuOutput() SkuOutput
	ToSkuOutputWithContext(context.Context) SkuOutput
}

// SKU of the namespace.
type SkuArgs struct {
	// The specified messaging units for the tier.
	Capacity pulumi.IntPtrInput `pulumi:"capacity"`
	// Name of this SKU.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// The billing tier of this particular SKU.
	Tier pulumi.StringInput `pulumi:"tier"`
}

func (SkuArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Sku)(nil)).Elem()
}

func (i SkuArgs) ToSkuOutput() SkuOutput {
	return i.ToSkuOutputWithContext(context.Background())
}

func (i SkuArgs) ToSkuOutputWithContext(ctx context.Context) SkuOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SkuOutput)
}

func (i SkuArgs) ToSkuPtrOutput() SkuPtrOutput {
	return i.ToSkuPtrOutputWithContext(context.Background())
}

func (i SkuArgs) ToSkuPtrOutputWithContext(ctx context.Context) SkuPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SkuOutput).ToSkuPtrOutputWithContext(ctx)
}

// SkuPtrInput is an input type that accepts SkuArgs, SkuPtr and SkuPtrOutput values.
// You can construct a concrete instance of `SkuPtrInput` via:
//
//          SkuArgs{...}
//
//  or:
//
//          nil
type SkuPtrInput interface {
	pulumi.Input

	ToSkuPtrOutput() SkuPtrOutput
	ToSkuPtrOutputWithContext(context.Context) SkuPtrOutput
}

type skuPtrType SkuArgs

func SkuPtr(v *SkuArgs) SkuPtrInput {
	return (*skuPtrType)(v)
}

func (*skuPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Sku)(nil)).Elem()
}

func (i *skuPtrType) ToSkuPtrOutput() SkuPtrOutput {
	return i.ToSkuPtrOutputWithContext(context.Background())
}

func (i *skuPtrType) ToSkuPtrOutputWithContext(ctx context.Context) SkuPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SkuPtrOutput)
}

// SKU of the namespace.
type SkuOutput struct{ *pulumi.OutputState }

func (SkuOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Sku)(nil)).Elem()
}

func (o SkuOutput) ToSkuOutput() SkuOutput {
	return o
}

func (o SkuOutput) ToSkuOutputWithContext(ctx context.Context) SkuOutput {
	return o
}

func (o SkuOutput) ToSkuPtrOutput() SkuPtrOutput {
	return o.ToSkuPtrOutputWithContext(context.Background())
}

func (o SkuOutput) ToSkuPtrOutputWithContext(ctx context.Context) SkuPtrOutput {
	return o.ApplyT(func(v Sku) *Sku {
		return &v
	}).(SkuPtrOutput)
}

// The specified messaging units for the tier.
func (o SkuOutput) Capacity() pulumi.IntPtrOutput {
	return o.ApplyT(func(v Sku) *int { return v.Capacity }).(pulumi.IntPtrOutput)
}

// Name of this SKU.
func (o SkuOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Sku) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The billing tier of this particular SKU.
func (o SkuOutput) Tier() pulumi.StringOutput {
	return o.ApplyT(func(v Sku) string { return v.Tier }).(pulumi.StringOutput)
}

type SkuPtrOutput struct{ *pulumi.OutputState }

func (SkuPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Sku)(nil)).Elem()
}

func (o SkuPtrOutput) ToSkuPtrOutput() SkuPtrOutput {
	return o
}

func (o SkuPtrOutput) ToSkuPtrOutputWithContext(ctx context.Context) SkuPtrOutput {
	return o
}

func (o SkuPtrOutput) Elem() SkuOutput {
	return o.ApplyT(func(v *Sku) Sku { return *v }).(SkuOutput)
}

// The specified messaging units for the tier.
func (o SkuPtrOutput) Capacity() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Sku) *int {
		if v == nil {
			return nil
		}
		return v.Capacity
	}).(pulumi.IntPtrOutput)
}

// Name of this SKU.
func (o SkuPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Sku) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// The billing tier of this particular SKU.
func (o SkuPtrOutput) Tier() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Sku) *string {
		if v == nil {
			return nil
		}
		return &v.Tier
	}).(pulumi.StringPtrOutput)
}

// SKU of the namespace.
type SkuResponse struct {
	// The specified messaging units for the tier.
	Capacity *int `pulumi:"capacity"`
	// Name of this SKU.
	Name *string `pulumi:"name"`
	// The billing tier of this particular SKU.
	Tier string `pulumi:"tier"`
}

// SkuResponseInput is an input type that accepts SkuResponseArgs and SkuResponseOutput values.
// You can construct a concrete instance of `SkuResponseInput` via:
//
//          SkuResponseArgs{...}
type SkuResponseInput interface {
	pulumi.Input

	ToSkuResponseOutput() SkuResponseOutput
	ToSkuResponseOutputWithContext(context.Context) SkuResponseOutput
}

// SKU of the namespace.
type SkuResponseArgs struct {
	// The specified messaging units for the tier.
	Capacity pulumi.IntPtrInput `pulumi:"capacity"`
	// Name of this SKU.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// The billing tier of this particular SKU.
	Tier pulumi.StringInput `pulumi:"tier"`
}

func (SkuResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SkuResponse)(nil)).Elem()
}

func (i SkuResponseArgs) ToSkuResponseOutput() SkuResponseOutput {
	return i.ToSkuResponseOutputWithContext(context.Background())
}

func (i SkuResponseArgs) ToSkuResponseOutputWithContext(ctx context.Context) SkuResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SkuResponseOutput)
}

func (i SkuResponseArgs) ToSkuResponsePtrOutput() SkuResponsePtrOutput {
	return i.ToSkuResponsePtrOutputWithContext(context.Background())
}

func (i SkuResponseArgs) ToSkuResponsePtrOutputWithContext(ctx context.Context) SkuResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SkuResponseOutput).ToSkuResponsePtrOutputWithContext(ctx)
}

// SkuResponsePtrInput is an input type that accepts SkuResponseArgs, SkuResponsePtr and SkuResponsePtrOutput values.
// You can construct a concrete instance of `SkuResponsePtrInput` via:
//
//          SkuResponseArgs{...}
//
//  or:
//
//          nil
type SkuResponsePtrInput interface {
	pulumi.Input

	ToSkuResponsePtrOutput() SkuResponsePtrOutput
	ToSkuResponsePtrOutputWithContext(context.Context) SkuResponsePtrOutput
}

type skuResponsePtrType SkuResponseArgs

func SkuResponsePtr(v *SkuResponseArgs) SkuResponsePtrInput {
	return (*skuResponsePtrType)(v)
}

func (*skuResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SkuResponse)(nil)).Elem()
}

func (i *skuResponsePtrType) ToSkuResponsePtrOutput() SkuResponsePtrOutput {
	return i.ToSkuResponsePtrOutputWithContext(context.Background())
}

func (i *skuResponsePtrType) ToSkuResponsePtrOutputWithContext(ctx context.Context) SkuResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SkuResponsePtrOutput)
}

// SKU of the namespace.
type SkuResponseOutput struct{ *pulumi.OutputState }

func (SkuResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SkuResponse)(nil)).Elem()
}

func (o SkuResponseOutput) ToSkuResponseOutput() SkuResponseOutput {
	return o
}

func (o SkuResponseOutput) ToSkuResponseOutputWithContext(ctx context.Context) SkuResponseOutput {
	return o
}

func (o SkuResponseOutput) ToSkuResponsePtrOutput() SkuResponsePtrOutput {
	return o.ToSkuResponsePtrOutputWithContext(context.Background())
}

func (o SkuResponseOutput) ToSkuResponsePtrOutputWithContext(ctx context.Context) SkuResponsePtrOutput {
	return o.ApplyT(func(v SkuResponse) *SkuResponse {
		return &v
	}).(SkuResponsePtrOutput)
}

// The specified messaging units for the tier.
func (o SkuResponseOutput) Capacity() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SkuResponse) *int { return v.Capacity }).(pulumi.IntPtrOutput)
}

// Name of this SKU.
func (o SkuResponseOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SkuResponse) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The billing tier of this particular SKU.
func (o SkuResponseOutput) Tier() pulumi.StringOutput {
	return o.ApplyT(func(v SkuResponse) string { return v.Tier }).(pulumi.StringOutput)
}

type SkuResponsePtrOutput struct{ *pulumi.OutputState }

func (SkuResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SkuResponse)(nil)).Elem()
}

func (o SkuResponsePtrOutput) ToSkuResponsePtrOutput() SkuResponsePtrOutput {
	return o
}

func (o SkuResponsePtrOutput) ToSkuResponsePtrOutputWithContext(ctx context.Context) SkuResponsePtrOutput {
	return o
}

func (o SkuResponsePtrOutput) Elem() SkuResponseOutput {
	return o.ApplyT(func(v *SkuResponse) SkuResponse { return *v }).(SkuResponseOutput)
}

// The specified messaging units for the tier.
func (o SkuResponsePtrOutput) Capacity() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SkuResponse) *int {
		if v == nil {
			return nil
		}
		return v.Capacity
	}).(pulumi.IntPtrOutput)
}

// Name of this SKU.
func (o SkuResponsePtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SkuResponse) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// The billing tier of this particular SKU.
func (o SkuResponsePtrOutput) Tier() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SkuResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Tier
	}).(pulumi.StringPtrOutput)
}

// Description of subscription resource.
type SubscriptionType struct {
	// Resource location.
	Location *string `pulumi:"location"`
	// Resource name
	Name string `pulumi:"name"`
	// Description of Subscription Resource.
	Properties SubscriptionPropertiesResponse `pulumi:"properties"`
	// Resource type
	Type string `pulumi:"type"`
}

// SubscriptionTypeInput is an input type that accepts SubscriptionTypeArgs and SubscriptionTypeOutput values.
// You can construct a concrete instance of `SubscriptionTypeInput` via:
//
//          SubscriptionTypeArgs{...}
type SubscriptionTypeInput interface {
	pulumi.Input

	ToSubscriptionTypeOutput() SubscriptionTypeOutput
	ToSubscriptionTypeOutputWithContext(context.Context) SubscriptionTypeOutput
}

// Description of subscription resource.
type SubscriptionTypeArgs struct {
	// Resource location.
	Location pulumi.StringPtrInput `pulumi:"location"`
	// Resource name
	Name pulumi.StringInput `pulumi:"name"`
	// Description of Subscription Resource.
	Properties SubscriptionPropertiesResponseInput `pulumi:"properties"`
	// Resource type
	Type pulumi.StringInput `pulumi:"type"`
}

func (SubscriptionTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SubscriptionType)(nil)).Elem()
}

func (i SubscriptionTypeArgs) ToSubscriptionTypeOutput() SubscriptionTypeOutput {
	return i.ToSubscriptionTypeOutputWithContext(context.Background())
}

func (i SubscriptionTypeArgs) ToSubscriptionTypeOutputWithContext(ctx context.Context) SubscriptionTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SubscriptionTypeOutput)
}

// Description of subscription resource.
type SubscriptionTypeOutput struct{ *pulumi.OutputState }

func (SubscriptionTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SubscriptionType)(nil)).Elem()
}

func (o SubscriptionTypeOutput) ToSubscriptionTypeOutput() SubscriptionTypeOutput {
	return o
}

func (o SubscriptionTypeOutput) ToSubscriptionTypeOutputWithContext(ctx context.Context) SubscriptionTypeOutput {
	return o
}

// Resource location.
func (o SubscriptionTypeOutput) Location() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SubscriptionType) *string { return v.Location }).(pulumi.StringPtrOutput)
}

// Resource name
func (o SubscriptionTypeOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v SubscriptionType) string { return v.Name }).(pulumi.StringOutput)
}

// Description of Subscription Resource.
func (o SubscriptionTypeOutput) Properties() SubscriptionPropertiesResponseOutput {
	return o.ApplyT(func(v SubscriptionType) SubscriptionPropertiesResponse { return v.Properties }).(SubscriptionPropertiesResponseOutput)
}

// Resource type
func (o SubscriptionTypeOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v SubscriptionType) string { return v.Type }).(pulumi.StringOutput)
}

// Description of Subscription Resource.
type SubscriptionProperties struct {
	// TimeSpan idle interval after which the topic is automatically deleted. The minimum duration is 5 minutes.
	AutoDeleteOnIdle *string `pulumi:"autoDeleteOnIdle"`
	// Value that indicates whether a subscription has dead letter support on filter evaluation exceptions.
	DeadLetteringOnFilterEvaluationExceptions *bool `pulumi:"deadLetteringOnFilterEvaluationExceptions"`
	// Value that indicates whether a subscription has dead letter support when a message expires.
	DeadLetteringOnMessageExpiration *bool `pulumi:"deadLetteringOnMessageExpiration"`
	// Default message time to live value. This is the duration after which the message expires, starting from when the message is sent to Service Bus. This is the default value used when TimeToLive is not set on a message itself.
	DefaultMessageTimeToLive *string `pulumi:"defaultMessageTimeToLive"`
	// Value that indicates whether server-side batched operations are enabled.
	EnableBatchedOperations *bool `pulumi:"enableBatchedOperations"`
	// Entity availability status for the topic.
	EntityAvailabilityStatus *string `pulumi:"entityAvailabilityStatus"`
	// Value that indicates whether the entity description is read-only.
	IsReadOnly *bool `pulumi:"isReadOnly"`
	// The lock duration time span for the subscription.
	LockDuration *string `pulumi:"lockDuration"`
	// Number of maximum deliveries.
	MaxDeliveryCount *int `pulumi:"maxDeliveryCount"`
	// Value indicating if a subscription supports the concept of sessions.
	RequiresSession *bool `pulumi:"requiresSession"`
	// Enumerates the possible values for the status of a messaging entity.
	Status *string `pulumi:"status"`
}

// SubscriptionPropertiesInput is an input type that accepts SubscriptionPropertiesArgs and SubscriptionPropertiesOutput values.
// You can construct a concrete instance of `SubscriptionPropertiesInput` via:
//
//          SubscriptionPropertiesArgs{...}
type SubscriptionPropertiesInput interface {
	pulumi.Input

	ToSubscriptionPropertiesOutput() SubscriptionPropertiesOutput
	ToSubscriptionPropertiesOutputWithContext(context.Context) SubscriptionPropertiesOutput
}

// Description of Subscription Resource.
type SubscriptionPropertiesArgs struct {
	// TimeSpan idle interval after which the topic is automatically deleted. The minimum duration is 5 minutes.
	AutoDeleteOnIdle pulumi.StringPtrInput `pulumi:"autoDeleteOnIdle"`
	// Value that indicates whether a subscription has dead letter support on filter evaluation exceptions.
	DeadLetteringOnFilterEvaluationExceptions pulumi.BoolPtrInput `pulumi:"deadLetteringOnFilterEvaluationExceptions"`
	// Value that indicates whether a subscription has dead letter support when a message expires.
	DeadLetteringOnMessageExpiration pulumi.BoolPtrInput `pulumi:"deadLetteringOnMessageExpiration"`
	// Default message time to live value. This is the duration after which the message expires, starting from when the message is sent to Service Bus. This is the default value used when TimeToLive is not set on a message itself.
	DefaultMessageTimeToLive pulumi.StringPtrInput `pulumi:"defaultMessageTimeToLive"`
	// Value that indicates whether server-side batched operations are enabled.
	EnableBatchedOperations pulumi.BoolPtrInput `pulumi:"enableBatchedOperations"`
	// Entity availability status for the topic.
	EntityAvailabilityStatus pulumi.StringPtrInput `pulumi:"entityAvailabilityStatus"`
	// Value that indicates whether the entity description is read-only.
	IsReadOnly pulumi.BoolPtrInput `pulumi:"isReadOnly"`
	// The lock duration time span for the subscription.
	LockDuration pulumi.StringPtrInput `pulumi:"lockDuration"`
	// Number of maximum deliveries.
	MaxDeliveryCount pulumi.IntPtrInput `pulumi:"maxDeliveryCount"`
	// Value indicating if a subscription supports the concept of sessions.
	RequiresSession pulumi.BoolPtrInput `pulumi:"requiresSession"`
	// Enumerates the possible values for the status of a messaging entity.
	Status pulumi.StringPtrInput `pulumi:"status"`
}

func (SubscriptionPropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SubscriptionProperties)(nil)).Elem()
}

func (i SubscriptionPropertiesArgs) ToSubscriptionPropertiesOutput() SubscriptionPropertiesOutput {
	return i.ToSubscriptionPropertiesOutputWithContext(context.Background())
}

func (i SubscriptionPropertiesArgs) ToSubscriptionPropertiesOutputWithContext(ctx context.Context) SubscriptionPropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SubscriptionPropertiesOutput)
}

func (i SubscriptionPropertiesArgs) ToSubscriptionPropertiesPtrOutput() SubscriptionPropertiesPtrOutput {
	return i.ToSubscriptionPropertiesPtrOutputWithContext(context.Background())
}

func (i SubscriptionPropertiesArgs) ToSubscriptionPropertiesPtrOutputWithContext(ctx context.Context) SubscriptionPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SubscriptionPropertiesOutput).ToSubscriptionPropertiesPtrOutputWithContext(ctx)
}

// SubscriptionPropertiesPtrInput is an input type that accepts SubscriptionPropertiesArgs, SubscriptionPropertiesPtr and SubscriptionPropertiesPtrOutput values.
// You can construct a concrete instance of `SubscriptionPropertiesPtrInput` via:
//
//          SubscriptionPropertiesArgs{...}
//
//  or:
//
//          nil
type SubscriptionPropertiesPtrInput interface {
	pulumi.Input

	ToSubscriptionPropertiesPtrOutput() SubscriptionPropertiesPtrOutput
	ToSubscriptionPropertiesPtrOutputWithContext(context.Context) SubscriptionPropertiesPtrOutput
}

type subscriptionPropertiesPtrType SubscriptionPropertiesArgs

func SubscriptionPropertiesPtr(v *SubscriptionPropertiesArgs) SubscriptionPropertiesPtrInput {
	return (*subscriptionPropertiesPtrType)(v)
}

func (*subscriptionPropertiesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SubscriptionProperties)(nil)).Elem()
}

func (i *subscriptionPropertiesPtrType) ToSubscriptionPropertiesPtrOutput() SubscriptionPropertiesPtrOutput {
	return i.ToSubscriptionPropertiesPtrOutputWithContext(context.Background())
}

func (i *subscriptionPropertiesPtrType) ToSubscriptionPropertiesPtrOutputWithContext(ctx context.Context) SubscriptionPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SubscriptionPropertiesPtrOutput)
}

// Description of Subscription Resource.
type SubscriptionPropertiesOutput struct{ *pulumi.OutputState }

func (SubscriptionPropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SubscriptionProperties)(nil)).Elem()
}

func (o SubscriptionPropertiesOutput) ToSubscriptionPropertiesOutput() SubscriptionPropertiesOutput {
	return o
}

func (o SubscriptionPropertiesOutput) ToSubscriptionPropertiesOutputWithContext(ctx context.Context) SubscriptionPropertiesOutput {
	return o
}

func (o SubscriptionPropertiesOutput) ToSubscriptionPropertiesPtrOutput() SubscriptionPropertiesPtrOutput {
	return o.ToSubscriptionPropertiesPtrOutputWithContext(context.Background())
}

func (o SubscriptionPropertiesOutput) ToSubscriptionPropertiesPtrOutputWithContext(ctx context.Context) SubscriptionPropertiesPtrOutput {
	return o.ApplyT(func(v SubscriptionProperties) *SubscriptionProperties {
		return &v
	}).(SubscriptionPropertiesPtrOutput)
}

// TimeSpan idle interval after which the topic is automatically deleted. The minimum duration is 5 minutes.
func (o SubscriptionPropertiesOutput) AutoDeleteOnIdle() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SubscriptionProperties) *string { return v.AutoDeleteOnIdle }).(pulumi.StringPtrOutput)
}

// Value that indicates whether a subscription has dead letter support on filter evaluation exceptions.
func (o SubscriptionPropertiesOutput) DeadLetteringOnFilterEvaluationExceptions() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SubscriptionProperties) *bool { return v.DeadLetteringOnFilterEvaluationExceptions }).(pulumi.BoolPtrOutput)
}

// Value that indicates whether a subscription has dead letter support when a message expires.
func (o SubscriptionPropertiesOutput) DeadLetteringOnMessageExpiration() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SubscriptionProperties) *bool { return v.DeadLetteringOnMessageExpiration }).(pulumi.BoolPtrOutput)
}

// Default message time to live value. This is the duration after which the message expires, starting from when the message is sent to Service Bus. This is the default value used when TimeToLive is not set on a message itself.
func (o SubscriptionPropertiesOutput) DefaultMessageTimeToLive() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SubscriptionProperties) *string { return v.DefaultMessageTimeToLive }).(pulumi.StringPtrOutput)
}

// Value that indicates whether server-side batched operations are enabled.
func (o SubscriptionPropertiesOutput) EnableBatchedOperations() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SubscriptionProperties) *bool { return v.EnableBatchedOperations }).(pulumi.BoolPtrOutput)
}

// Entity availability status for the topic.
func (o SubscriptionPropertiesOutput) EntityAvailabilityStatus() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SubscriptionProperties) *string { return v.EntityAvailabilityStatus }).(pulumi.StringPtrOutput)
}

// Value that indicates whether the entity description is read-only.
func (o SubscriptionPropertiesOutput) IsReadOnly() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SubscriptionProperties) *bool { return v.IsReadOnly }).(pulumi.BoolPtrOutput)
}

// The lock duration time span for the subscription.
func (o SubscriptionPropertiesOutput) LockDuration() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SubscriptionProperties) *string { return v.LockDuration }).(pulumi.StringPtrOutput)
}

// Number of maximum deliveries.
func (o SubscriptionPropertiesOutput) MaxDeliveryCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SubscriptionProperties) *int { return v.MaxDeliveryCount }).(pulumi.IntPtrOutput)
}

// Value indicating if a subscription supports the concept of sessions.
func (o SubscriptionPropertiesOutput) RequiresSession() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SubscriptionProperties) *bool { return v.RequiresSession }).(pulumi.BoolPtrOutput)
}

// Enumerates the possible values for the status of a messaging entity.
func (o SubscriptionPropertiesOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SubscriptionProperties) *string { return v.Status }).(pulumi.StringPtrOutput)
}

type SubscriptionPropertiesPtrOutput struct{ *pulumi.OutputState }

func (SubscriptionPropertiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SubscriptionProperties)(nil)).Elem()
}

func (o SubscriptionPropertiesPtrOutput) ToSubscriptionPropertiesPtrOutput() SubscriptionPropertiesPtrOutput {
	return o
}

func (o SubscriptionPropertiesPtrOutput) ToSubscriptionPropertiesPtrOutputWithContext(ctx context.Context) SubscriptionPropertiesPtrOutput {
	return o
}

func (o SubscriptionPropertiesPtrOutput) Elem() SubscriptionPropertiesOutput {
	return o.ApplyT(func(v *SubscriptionProperties) SubscriptionProperties { return *v }).(SubscriptionPropertiesOutput)
}

// TimeSpan idle interval after which the topic is automatically deleted. The minimum duration is 5 minutes.
func (o SubscriptionPropertiesPtrOutput) AutoDeleteOnIdle() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SubscriptionProperties) *string {
		if v == nil {
			return nil
		}
		return v.AutoDeleteOnIdle
	}).(pulumi.StringPtrOutput)
}

// Value that indicates whether a subscription has dead letter support on filter evaluation exceptions.
func (o SubscriptionPropertiesPtrOutput) DeadLetteringOnFilterEvaluationExceptions() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SubscriptionProperties) *bool {
		if v == nil {
			return nil
		}
		return v.DeadLetteringOnFilterEvaluationExceptions
	}).(pulumi.BoolPtrOutput)
}

// Value that indicates whether a subscription has dead letter support when a message expires.
func (o SubscriptionPropertiesPtrOutput) DeadLetteringOnMessageExpiration() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SubscriptionProperties) *bool {
		if v == nil {
			return nil
		}
		return v.DeadLetteringOnMessageExpiration
	}).(pulumi.BoolPtrOutput)
}

// Default message time to live value. This is the duration after which the message expires, starting from when the message is sent to Service Bus. This is the default value used when TimeToLive is not set on a message itself.
func (o SubscriptionPropertiesPtrOutput) DefaultMessageTimeToLive() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SubscriptionProperties) *string {
		if v == nil {
			return nil
		}
		return v.DefaultMessageTimeToLive
	}).(pulumi.StringPtrOutput)
}

// Value that indicates whether server-side batched operations are enabled.
func (o SubscriptionPropertiesPtrOutput) EnableBatchedOperations() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SubscriptionProperties) *bool {
		if v == nil {
			return nil
		}
		return v.EnableBatchedOperations
	}).(pulumi.BoolPtrOutput)
}

// Entity availability status for the topic.
func (o SubscriptionPropertiesPtrOutput) EntityAvailabilityStatus() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SubscriptionProperties) *string {
		if v == nil {
			return nil
		}
		return v.EntityAvailabilityStatus
	}).(pulumi.StringPtrOutput)
}

// Value that indicates whether the entity description is read-only.
func (o SubscriptionPropertiesPtrOutput) IsReadOnly() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SubscriptionProperties) *bool {
		if v == nil {
			return nil
		}
		return v.IsReadOnly
	}).(pulumi.BoolPtrOutput)
}

// The lock duration time span for the subscription.
func (o SubscriptionPropertiesPtrOutput) LockDuration() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SubscriptionProperties) *string {
		if v == nil {
			return nil
		}
		return v.LockDuration
	}).(pulumi.StringPtrOutput)
}

// Number of maximum deliveries.
func (o SubscriptionPropertiesPtrOutput) MaxDeliveryCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SubscriptionProperties) *int {
		if v == nil {
			return nil
		}
		return v.MaxDeliveryCount
	}).(pulumi.IntPtrOutput)
}

// Value indicating if a subscription supports the concept of sessions.
func (o SubscriptionPropertiesPtrOutput) RequiresSession() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SubscriptionProperties) *bool {
		if v == nil {
			return nil
		}
		return v.RequiresSession
	}).(pulumi.BoolPtrOutput)
}

// Enumerates the possible values for the status of a messaging entity.
func (o SubscriptionPropertiesPtrOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SubscriptionProperties) *string {
		if v == nil {
			return nil
		}
		return v.Status
	}).(pulumi.StringPtrOutput)
}

// Description of Subscription Resource.
type SubscriptionPropertiesResponse struct {
	// Last time there was a receive request to this subscription.
	AccessedAt string `pulumi:"accessedAt"`
	// TimeSpan idle interval after which the topic is automatically deleted. The minimum duration is 5 minutes.
	AutoDeleteOnIdle *string `pulumi:"autoDeleteOnIdle"`
	// Message Count Details.
	CountDetails MessageCountDetailsResponse `pulumi:"countDetails"`
	// Exact time the message was created.
	CreatedAt string `pulumi:"createdAt"`
	// Value that indicates whether a subscription has dead letter support on filter evaluation exceptions.
	DeadLetteringOnFilterEvaluationExceptions *bool `pulumi:"deadLetteringOnFilterEvaluationExceptions"`
	// Value that indicates whether a subscription has dead letter support when a message expires.
	DeadLetteringOnMessageExpiration *bool `pulumi:"deadLetteringOnMessageExpiration"`
	// Default message time to live value. This is the duration after which the message expires, starting from when the message is sent to Service Bus. This is the default value used when TimeToLive is not set on a message itself.
	DefaultMessageTimeToLive *string `pulumi:"defaultMessageTimeToLive"`
	// Value that indicates whether server-side batched operations are enabled.
	EnableBatchedOperations *bool `pulumi:"enableBatchedOperations"`
	// Entity availability status for the topic.
	EntityAvailabilityStatus *string `pulumi:"entityAvailabilityStatus"`
	// Value that indicates whether the entity description is read-only.
	IsReadOnly *bool `pulumi:"isReadOnly"`
	// The lock duration time span for the subscription.
	LockDuration *string `pulumi:"lockDuration"`
	// Number of maximum deliveries.
	MaxDeliveryCount *int `pulumi:"maxDeliveryCount"`
	// Number of messages.
	MessageCount int `pulumi:"messageCount"`
	// Value indicating if a subscription supports the concept of sessions.
	RequiresSession *bool `pulumi:"requiresSession"`
	// Enumerates the possible values for the status of a messaging entity.
	Status *string `pulumi:"status"`
	// The exact time the message was updated.
	UpdatedAt string `pulumi:"updatedAt"`
}

// SubscriptionPropertiesResponseInput is an input type that accepts SubscriptionPropertiesResponseArgs and SubscriptionPropertiesResponseOutput values.
// You can construct a concrete instance of `SubscriptionPropertiesResponseInput` via:
//
//          SubscriptionPropertiesResponseArgs{...}
type SubscriptionPropertiesResponseInput interface {
	pulumi.Input

	ToSubscriptionPropertiesResponseOutput() SubscriptionPropertiesResponseOutput
	ToSubscriptionPropertiesResponseOutputWithContext(context.Context) SubscriptionPropertiesResponseOutput
}

// Description of Subscription Resource.
type SubscriptionPropertiesResponseArgs struct {
	// Last time there was a receive request to this subscription.
	AccessedAt pulumi.StringInput `pulumi:"accessedAt"`
	// TimeSpan idle interval after which the topic is automatically deleted. The minimum duration is 5 minutes.
	AutoDeleteOnIdle pulumi.StringPtrInput `pulumi:"autoDeleteOnIdle"`
	// Message Count Details.
	CountDetails MessageCountDetailsResponseInput `pulumi:"countDetails"`
	// Exact time the message was created.
	CreatedAt pulumi.StringInput `pulumi:"createdAt"`
	// Value that indicates whether a subscription has dead letter support on filter evaluation exceptions.
	DeadLetteringOnFilterEvaluationExceptions pulumi.BoolPtrInput `pulumi:"deadLetteringOnFilterEvaluationExceptions"`
	// Value that indicates whether a subscription has dead letter support when a message expires.
	DeadLetteringOnMessageExpiration pulumi.BoolPtrInput `pulumi:"deadLetteringOnMessageExpiration"`
	// Default message time to live value. This is the duration after which the message expires, starting from when the message is sent to Service Bus. This is the default value used when TimeToLive is not set on a message itself.
	DefaultMessageTimeToLive pulumi.StringPtrInput `pulumi:"defaultMessageTimeToLive"`
	// Value that indicates whether server-side batched operations are enabled.
	EnableBatchedOperations pulumi.BoolPtrInput `pulumi:"enableBatchedOperations"`
	// Entity availability status for the topic.
	EntityAvailabilityStatus pulumi.StringPtrInput `pulumi:"entityAvailabilityStatus"`
	// Value that indicates whether the entity description is read-only.
	IsReadOnly pulumi.BoolPtrInput `pulumi:"isReadOnly"`
	// The lock duration time span for the subscription.
	LockDuration pulumi.StringPtrInput `pulumi:"lockDuration"`
	// Number of maximum deliveries.
	MaxDeliveryCount pulumi.IntPtrInput `pulumi:"maxDeliveryCount"`
	// Number of messages.
	MessageCount pulumi.IntInput `pulumi:"messageCount"`
	// Value indicating if a subscription supports the concept of sessions.
	RequiresSession pulumi.BoolPtrInput `pulumi:"requiresSession"`
	// Enumerates the possible values for the status of a messaging entity.
	Status pulumi.StringPtrInput `pulumi:"status"`
	// The exact time the message was updated.
	UpdatedAt pulumi.StringInput `pulumi:"updatedAt"`
}

func (SubscriptionPropertiesResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SubscriptionPropertiesResponse)(nil)).Elem()
}

func (i SubscriptionPropertiesResponseArgs) ToSubscriptionPropertiesResponseOutput() SubscriptionPropertiesResponseOutput {
	return i.ToSubscriptionPropertiesResponseOutputWithContext(context.Background())
}

func (i SubscriptionPropertiesResponseArgs) ToSubscriptionPropertiesResponseOutputWithContext(ctx context.Context) SubscriptionPropertiesResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SubscriptionPropertiesResponseOutput)
}

func (i SubscriptionPropertiesResponseArgs) ToSubscriptionPropertiesResponsePtrOutput() SubscriptionPropertiesResponsePtrOutput {
	return i.ToSubscriptionPropertiesResponsePtrOutputWithContext(context.Background())
}

func (i SubscriptionPropertiesResponseArgs) ToSubscriptionPropertiesResponsePtrOutputWithContext(ctx context.Context) SubscriptionPropertiesResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SubscriptionPropertiesResponseOutput).ToSubscriptionPropertiesResponsePtrOutputWithContext(ctx)
}

// SubscriptionPropertiesResponsePtrInput is an input type that accepts SubscriptionPropertiesResponseArgs, SubscriptionPropertiesResponsePtr and SubscriptionPropertiesResponsePtrOutput values.
// You can construct a concrete instance of `SubscriptionPropertiesResponsePtrInput` via:
//
//          SubscriptionPropertiesResponseArgs{...}
//
//  or:
//
//          nil
type SubscriptionPropertiesResponsePtrInput interface {
	pulumi.Input

	ToSubscriptionPropertiesResponsePtrOutput() SubscriptionPropertiesResponsePtrOutput
	ToSubscriptionPropertiesResponsePtrOutputWithContext(context.Context) SubscriptionPropertiesResponsePtrOutput
}

type subscriptionPropertiesResponsePtrType SubscriptionPropertiesResponseArgs

func SubscriptionPropertiesResponsePtr(v *SubscriptionPropertiesResponseArgs) SubscriptionPropertiesResponsePtrInput {
	return (*subscriptionPropertiesResponsePtrType)(v)
}

func (*subscriptionPropertiesResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SubscriptionPropertiesResponse)(nil)).Elem()
}

func (i *subscriptionPropertiesResponsePtrType) ToSubscriptionPropertiesResponsePtrOutput() SubscriptionPropertiesResponsePtrOutput {
	return i.ToSubscriptionPropertiesResponsePtrOutputWithContext(context.Background())
}

func (i *subscriptionPropertiesResponsePtrType) ToSubscriptionPropertiesResponsePtrOutputWithContext(ctx context.Context) SubscriptionPropertiesResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SubscriptionPropertiesResponsePtrOutput)
}

// Description of Subscription Resource.
type SubscriptionPropertiesResponseOutput struct{ *pulumi.OutputState }

func (SubscriptionPropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SubscriptionPropertiesResponse)(nil)).Elem()
}

func (o SubscriptionPropertiesResponseOutput) ToSubscriptionPropertiesResponseOutput() SubscriptionPropertiesResponseOutput {
	return o
}

func (o SubscriptionPropertiesResponseOutput) ToSubscriptionPropertiesResponseOutputWithContext(ctx context.Context) SubscriptionPropertiesResponseOutput {
	return o
}

func (o SubscriptionPropertiesResponseOutput) ToSubscriptionPropertiesResponsePtrOutput() SubscriptionPropertiesResponsePtrOutput {
	return o.ToSubscriptionPropertiesResponsePtrOutputWithContext(context.Background())
}

func (o SubscriptionPropertiesResponseOutput) ToSubscriptionPropertiesResponsePtrOutputWithContext(ctx context.Context) SubscriptionPropertiesResponsePtrOutput {
	return o.ApplyT(func(v SubscriptionPropertiesResponse) *SubscriptionPropertiesResponse {
		return &v
	}).(SubscriptionPropertiesResponsePtrOutput)
}

// Last time there was a receive request to this subscription.
func (o SubscriptionPropertiesResponseOutput) AccessedAt() pulumi.StringOutput {
	return o.ApplyT(func(v SubscriptionPropertiesResponse) string { return v.AccessedAt }).(pulumi.StringOutput)
}

// TimeSpan idle interval after which the topic is automatically deleted. The minimum duration is 5 minutes.
func (o SubscriptionPropertiesResponseOutput) AutoDeleteOnIdle() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SubscriptionPropertiesResponse) *string { return v.AutoDeleteOnIdle }).(pulumi.StringPtrOutput)
}

// Message Count Details.
func (o SubscriptionPropertiesResponseOutput) CountDetails() MessageCountDetailsResponseOutput {
	return o.ApplyT(func(v SubscriptionPropertiesResponse) MessageCountDetailsResponse { return v.CountDetails }).(MessageCountDetailsResponseOutput)
}

// Exact time the message was created.
func (o SubscriptionPropertiesResponseOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v SubscriptionPropertiesResponse) string { return v.CreatedAt }).(pulumi.StringOutput)
}

// Value that indicates whether a subscription has dead letter support on filter evaluation exceptions.
func (o SubscriptionPropertiesResponseOutput) DeadLetteringOnFilterEvaluationExceptions() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SubscriptionPropertiesResponse) *bool { return v.DeadLetteringOnFilterEvaluationExceptions }).(pulumi.BoolPtrOutput)
}

// Value that indicates whether a subscription has dead letter support when a message expires.
func (o SubscriptionPropertiesResponseOutput) DeadLetteringOnMessageExpiration() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SubscriptionPropertiesResponse) *bool { return v.DeadLetteringOnMessageExpiration }).(pulumi.BoolPtrOutput)
}

// Default message time to live value. This is the duration after which the message expires, starting from when the message is sent to Service Bus. This is the default value used when TimeToLive is not set on a message itself.
func (o SubscriptionPropertiesResponseOutput) DefaultMessageTimeToLive() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SubscriptionPropertiesResponse) *string { return v.DefaultMessageTimeToLive }).(pulumi.StringPtrOutput)
}

// Value that indicates whether server-side batched operations are enabled.
func (o SubscriptionPropertiesResponseOutput) EnableBatchedOperations() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SubscriptionPropertiesResponse) *bool { return v.EnableBatchedOperations }).(pulumi.BoolPtrOutput)
}

// Entity availability status for the topic.
func (o SubscriptionPropertiesResponseOutput) EntityAvailabilityStatus() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SubscriptionPropertiesResponse) *string { return v.EntityAvailabilityStatus }).(pulumi.StringPtrOutput)
}

// Value that indicates whether the entity description is read-only.
func (o SubscriptionPropertiesResponseOutput) IsReadOnly() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SubscriptionPropertiesResponse) *bool { return v.IsReadOnly }).(pulumi.BoolPtrOutput)
}

// The lock duration time span for the subscription.
func (o SubscriptionPropertiesResponseOutput) LockDuration() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SubscriptionPropertiesResponse) *string { return v.LockDuration }).(pulumi.StringPtrOutput)
}

// Number of maximum deliveries.
func (o SubscriptionPropertiesResponseOutput) MaxDeliveryCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SubscriptionPropertiesResponse) *int { return v.MaxDeliveryCount }).(pulumi.IntPtrOutput)
}

// Number of messages.
func (o SubscriptionPropertiesResponseOutput) MessageCount() pulumi.IntOutput {
	return o.ApplyT(func(v SubscriptionPropertiesResponse) int { return v.MessageCount }).(pulumi.IntOutput)
}

// Value indicating if a subscription supports the concept of sessions.
func (o SubscriptionPropertiesResponseOutput) RequiresSession() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SubscriptionPropertiesResponse) *bool { return v.RequiresSession }).(pulumi.BoolPtrOutput)
}

// Enumerates the possible values for the status of a messaging entity.
func (o SubscriptionPropertiesResponseOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SubscriptionPropertiesResponse) *string { return v.Status }).(pulumi.StringPtrOutput)
}

// The exact time the message was updated.
func (o SubscriptionPropertiesResponseOutput) UpdatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v SubscriptionPropertiesResponse) string { return v.UpdatedAt }).(pulumi.StringOutput)
}

type SubscriptionPropertiesResponsePtrOutput struct{ *pulumi.OutputState }

func (SubscriptionPropertiesResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SubscriptionPropertiesResponse)(nil)).Elem()
}

func (o SubscriptionPropertiesResponsePtrOutput) ToSubscriptionPropertiesResponsePtrOutput() SubscriptionPropertiesResponsePtrOutput {
	return o
}

func (o SubscriptionPropertiesResponsePtrOutput) ToSubscriptionPropertiesResponsePtrOutputWithContext(ctx context.Context) SubscriptionPropertiesResponsePtrOutput {
	return o
}

func (o SubscriptionPropertiesResponsePtrOutput) Elem() SubscriptionPropertiesResponseOutput {
	return o.ApplyT(func(v *SubscriptionPropertiesResponse) SubscriptionPropertiesResponse { return *v }).(SubscriptionPropertiesResponseOutput)
}

// Last time there was a receive request to this subscription.
func (o SubscriptionPropertiesResponsePtrOutput) AccessedAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SubscriptionPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return &v.AccessedAt
	}).(pulumi.StringPtrOutput)
}

// TimeSpan idle interval after which the topic is automatically deleted. The minimum duration is 5 minutes.
func (o SubscriptionPropertiesResponsePtrOutput) AutoDeleteOnIdle() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SubscriptionPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return v.AutoDeleteOnIdle
	}).(pulumi.StringPtrOutput)
}

// Message Count Details.
func (o SubscriptionPropertiesResponsePtrOutput) CountDetails() MessageCountDetailsResponsePtrOutput {
	return o.ApplyT(func(v *SubscriptionPropertiesResponse) *MessageCountDetailsResponse {
		if v == nil {
			return nil
		}
		return &v.CountDetails
	}).(MessageCountDetailsResponsePtrOutput)
}

// Exact time the message was created.
func (o SubscriptionPropertiesResponsePtrOutput) CreatedAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SubscriptionPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return &v.CreatedAt
	}).(pulumi.StringPtrOutput)
}

// Value that indicates whether a subscription has dead letter support on filter evaluation exceptions.
func (o SubscriptionPropertiesResponsePtrOutput) DeadLetteringOnFilterEvaluationExceptions() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SubscriptionPropertiesResponse) *bool {
		if v == nil {
			return nil
		}
		return v.DeadLetteringOnFilterEvaluationExceptions
	}).(pulumi.BoolPtrOutput)
}

// Value that indicates whether a subscription has dead letter support when a message expires.
func (o SubscriptionPropertiesResponsePtrOutput) DeadLetteringOnMessageExpiration() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SubscriptionPropertiesResponse) *bool {
		if v == nil {
			return nil
		}
		return v.DeadLetteringOnMessageExpiration
	}).(pulumi.BoolPtrOutput)
}

// Default message time to live value. This is the duration after which the message expires, starting from when the message is sent to Service Bus. This is the default value used when TimeToLive is not set on a message itself.
func (o SubscriptionPropertiesResponsePtrOutput) DefaultMessageTimeToLive() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SubscriptionPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return v.DefaultMessageTimeToLive
	}).(pulumi.StringPtrOutput)
}

// Value that indicates whether server-side batched operations are enabled.
func (o SubscriptionPropertiesResponsePtrOutput) EnableBatchedOperations() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SubscriptionPropertiesResponse) *bool {
		if v == nil {
			return nil
		}
		return v.EnableBatchedOperations
	}).(pulumi.BoolPtrOutput)
}

// Entity availability status for the topic.
func (o SubscriptionPropertiesResponsePtrOutput) EntityAvailabilityStatus() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SubscriptionPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return v.EntityAvailabilityStatus
	}).(pulumi.StringPtrOutput)
}

// Value that indicates whether the entity description is read-only.
func (o SubscriptionPropertiesResponsePtrOutput) IsReadOnly() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SubscriptionPropertiesResponse) *bool {
		if v == nil {
			return nil
		}
		return v.IsReadOnly
	}).(pulumi.BoolPtrOutput)
}

// The lock duration time span for the subscription.
func (o SubscriptionPropertiesResponsePtrOutput) LockDuration() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SubscriptionPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return v.LockDuration
	}).(pulumi.StringPtrOutput)
}

// Number of maximum deliveries.
func (o SubscriptionPropertiesResponsePtrOutput) MaxDeliveryCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SubscriptionPropertiesResponse) *int {
		if v == nil {
			return nil
		}
		return v.MaxDeliveryCount
	}).(pulumi.IntPtrOutput)
}

// Number of messages.
func (o SubscriptionPropertiesResponsePtrOutput) MessageCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SubscriptionPropertiesResponse) *int {
		if v == nil {
			return nil
		}
		return &v.MessageCount
	}).(pulumi.IntPtrOutput)
}

// Value indicating if a subscription supports the concept of sessions.
func (o SubscriptionPropertiesResponsePtrOutput) RequiresSession() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SubscriptionPropertiesResponse) *bool {
		if v == nil {
			return nil
		}
		return v.RequiresSession
	}).(pulumi.BoolPtrOutput)
}

// Enumerates the possible values for the status of a messaging entity.
func (o SubscriptionPropertiesResponsePtrOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SubscriptionPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return v.Status
	}).(pulumi.StringPtrOutput)
}

// The exact time the message was updated.
func (o SubscriptionPropertiesResponsePtrOutput) UpdatedAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SubscriptionPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return &v.UpdatedAt
	}).(pulumi.StringPtrOutput)
}

// Description of topic resource.
type TopicType struct {
	// Resource location.
	Location *string `pulumi:"location"`
	// Resource name
	Name string `pulumi:"name"`
	// The Topic Properties definition.
	Properties TopicPropertiesResponse `pulumi:"properties"`
	// Resource type
	Type string `pulumi:"type"`
}

// TopicTypeInput is an input type that accepts TopicTypeArgs and TopicTypeOutput values.
// You can construct a concrete instance of `TopicTypeInput` via:
//
//          TopicTypeArgs{...}
type TopicTypeInput interface {
	pulumi.Input

	ToTopicTypeOutput() TopicTypeOutput
	ToTopicTypeOutputWithContext(context.Context) TopicTypeOutput
}

// Description of topic resource.
type TopicTypeArgs struct {
	// Resource location.
	Location pulumi.StringPtrInput `pulumi:"location"`
	// Resource name
	Name pulumi.StringInput `pulumi:"name"`
	// The Topic Properties definition.
	Properties TopicPropertiesResponseInput `pulumi:"properties"`
	// Resource type
	Type pulumi.StringInput `pulumi:"type"`
}

func (TopicTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TopicType)(nil)).Elem()
}

func (i TopicTypeArgs) ToTopicTypeOutput() TopicTypeOutput {
	return i.ToTopicTypeOutputWithContext(context.Background())
}

func (i TopicTypeArgs) ToTopicTypeOutputWithContext(ctx context.Context) TopicTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TopicTypeOutput)
}

// Description of topic resource.
type TopicTypeOutput struct{ *pulumi.OutputState }

func (TopicTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TopicType)(nil)).Elem()
}

func (o TopicTypeOutput) ToTopicTypeOutput() TopicTypeOutput {
	return o
}

func (o TopicTypeOutput) ToTopicTypeOutputWithContext(ctx context.Context) TopicTypeOutput {
	return o
}

// Resource location.
func (o TopicTypeOutput) Location() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TopicType) *string { return v.Location }).(pulumi.StringPtrOutput)
}

// Resource name
func (o TopicTypeOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v TopicType) string { return v.Name }).(pulumi.StringOutput)
}

// The Topic Properties definition.
func (o TopicTypeOutput) Properties() TopicPropertiesResponseOutput {
	return o.ApplyT(func(v TopicType) TopicPropertiesResponse { return v.Properties }).(TopicPropertiesResponseOutput)
}

// Resource type
func (o TopicTypeOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v TopicType) string { return v.Type }).(pulumi.StringOutput)
}

// Description of a namespace authorization rule.
type TopicAuthorizationRuleType struct {
	// Resource location.
	Location *string `pulumi:"location"`
	// Resource name
	Name string `pulumi:"name"`
	// AuthorizationRule properties.
	Properties SharedAccessAuthorizationRulePropertiesResponse `pulumi:"properties"`
	// Resource type
	Type string `pulumi:"type"`
}

// TopicAuthorizationRuleTypeInput is an input type that accepts TopicAuthorizationRuleTypeArgs and TopicAuthorizationRuleTypeOutput values.
// You can construct a concrete instance of `TopicAuthorizationRuleTypeInput` via:
//
//          TopicAuthorizationRuleTypeArgs{...}
type TopicAuthorizationRuleTypeInput interface {
	pulumi.Input

	ToTopicAuthorizationRuleTypeOutput() TopicAuthorizationRuleTypeOutput
	ToTopicAuthorizationRuleTypeOutputWithContext(context.Context) TopicAuthorizationRuleTypeOutput
}

// Description of a namespace authorization rule.
type TopicAuthorizationRuleTypeArgs struct {
	// Resource location.
	Location pulumi.StringPtrInput `pulumi:"location"`
	// Resource name
	Name pulumi.StringInput `pulumi:"name"`
	// AuthorizationRule properties.
	Properties SharedAccessAuthorizationRulePropertiesResponseInput `pulumi:"properties"`
	// Resource type
	Type pulumi.StringInput `pulumi:"type"`
}

func (TopicAuthorizationRuleTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TopicAuthorizationRuleType)(nil)).Elem()
}

func (i TopicAuthorizationRuleTypeArgs) ToTopicAuthorizationRuleTypeOutput() TopicAuthorizationRuleTypeOutput {
	return i.ToTopicAuthorizationRuleTypeOutputWithContext(context.Background())
}

func (i TopicAuthorizationRuleTypeArgs) ToTopicAuthorizationRuleTypeOutputWithContext(ctx context.Context) TopicAuthorizationRuleTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TopicAuthorizationRuleTypeOutput)
}

// Description of a namespace authorization rule.
type TopicAuthorizationRuleTypeOutput struct{ *pulumi.OutputState }

func (TopicAuthorizationRuleTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TopicAuthorizationRuleType)(nil)).Elem()
}

func (o TopicAuthorizationRuleTypeOutput) ToTopicAuthorizationRuleTypeOutput() TopicAuthorizationRuleTypeOutput {
	return o
}

func (o TopicAuthorizationRuleTypeOutput) ToTopicAuthorizationRuleTypeOutputWithContext(ctx context.Context) TopicAuthorizationRuleTypeOutput {
	return o
}

// Resource location.
func (o TopicAuthorizationRuleTypeOutput) Location() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TopicAuthorizationRuleType) *string { return v.Location }).(pulumi.StringPtrOutput)
}

// Resource name
func (o TopicAuthorizationRuleTypeOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v TopicAuthorizationRuleType) string { return v.Name }).(pulumi.StringOutput)
}

// AuthorizationRule properties.
func (o TopicAuthorizationRuleTypeOutput) Properties() SharedAccessAuthorizationRulePropertiesResponseOutput {
	return o.ApplyT(func(v TopicAuthorizationRuleType) SharedAccessAuthorizationRulePropertiesResponse {
		return v.Properties
	}).(SharedAccessAuthorizationRulePropertiesResponseOutput)
}

// Resource type
func (o TopicAuthorizationRuleTypeOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v TopicAuthorizationRuleType) string { return v.Type }).(pulumi.StringOutput)
}

// The Topic Properties definition.
type TopicProperties struct {
	// TimeSpan idle interval after which the topic is automatically deleted. The minimum duration is 5 minutes.
	AutoDeleteOnIdle *string `pulumi:"autoDeleteOnIdle"`
	// Default message time to live value. This is the duration after which the message expires, starting from when the message is sent to Service Bus. This is the default value used when TimeToLive is not set on a message itself.
	DefaultMessageTimeToLive *string `pulumi:"defaultMessageTimeToLive"`
	// TimeSpan structure that defines the duration of the duplicate detection history. The default value is 10 minutes.
	DuplicateDetectionHistoryTimeWindow *string `pulumi:"duplicateDetectionHistoryTimeWindow"`
	// Value that indicates whether server-side batched operations are enabled.
	EnableBatchedOperations *bool `pulumi:"enableBatchedOperations"`
	// Value that indicates whether Express Entities are enabled. An express topic holds a message in memory temporarily before writing it to persistent storage.
	EnableExpress *bool `pulumi:"enableExpress"`
	// Value that indicates whether the topic to be partitioned across multiple message brokers is enabled.
	EnablePartitioning *bool `pulumi:"enablePartitioning"`
	// Entity availability status for the topic.
	EntityAvailabilityStatus *string `pulumi:"entityAvailabilityStatus"`
	// Whether messages should be filtered before publishing.
	FilteringMessagesBeforePublishing *bool `pulumi:"filteringMessagesBeforePublishing"`
	// Value that indicates whether the message is accessible anonymously.
	IsAnonymousAccessible *bool `pulumi:"isAnonymousAccessible"`
	IsExpress             *bool `pulumi:"isExpress"`
	// Maximum size of the topic in megabytes, which is the size of the memory allocated for the topic.
	MaxSizeInMegabytes *int `pulumi:"maxSizeInMegabytes"`
	// Value indicating if this topic requires duplicate detection.
	RequiresDuplicateDetection *bool `pulumi:"requiresDuplicateDetection"`
	// Enumerates the possible values for the status of a messaging entity.
	Status *string `pulumi:"status"`
	// Value that indicates whether the topic supports ordering.
	SupportOrdering *bool `pulumi:"supportOrdering"`
}

// TopicPropertiesInput is an input type that accepts TopicPropertiesArgs and TopicPropertiesOutput values.
// You can construct a concrete instance of `TopicPropertiesInput` via:
//
//          TopicPropertiesArgs{...}
type TopicPropertiesInput interface {
	pulumi.Input

	ToTopicPropertiesOutput() TopicPropertiesOutput
	ToTopicPropertiesOutputWithContext(context.Context) TopicPropertiesOutput
}

// The Topic Properties definition.
type TopicPropertiesArgs struct {
	// TimeSpan idle interval after which the topic is automatically deleted. The minimum duration is 5 minutes.
	AutoDeleteOnIdle pulumi.StringPtrInput `pulumi:"autoDeleteOnIdle"`
	// Default message time to live value. This is the duration after which the message expires, starting from when the message is sent to Service Bus. This is the default value used when TimeToLive is not set on a message itself.
	DefaultMessageTimeToLive pulumi.StringPtrInput `pulumi:"defaultMessageTimeToLive"`
	// TimeSpan structure that defines the duration of the duplicate detection history. The default value is 10 minutes.
	DuplicateDetectionHistoryTimeWindow pulumi.StringPtrInput `pulumi:"duplicateDetectionHistoryTimeWindow"`
	// Value that indicates whether server-side batched operations are enabled.
	EnableBatchedOperations pulumi.BoolPtrInput `pulumi:"enableBatchedOperations"`
	// Value that indicates whether Express Entities are enabled. An express topic holds a message in memory temporarily before writing it to persistent storage.
	EnableExpress pulumi.BoolPtrInput `pulumi:"enableExpress"`
	// Value that indicates whether the topic to be partitioned across multiple message brokers is enabled.
	EnablePartitioning pulumi.BoolPtrInput `pulumi:"enablePartitioning"`
	// Entity availability status for the topic.
	EntityAvailabilityStatus pulumi.StringPtrInput `pulumi:"entityAvailabilityStatus"`
	// Whether messages should be filtered before publishing.
	FilteringMessagesBeforePublishing pulumi.BoolPtrInput `pulumi:"filteringMessagesBeforePublishing"`
	// Value that indicates whether the message is accessible anonymously.
	IsAnonymousAccessible pulumi.BoolPtrInput `pulumi:"isAnonymousAccessible"`
	IsExpress             pulumi.BoolPtrInput `pulumi:"isExpress"`
	// Maximum size of the topic in megabytes, which is the size of the memory allocated for the topic.
	MaxSizeInMegabytes pulumi.IntPtrInput `pulumi:"maxSizeInMegabytes"`
	// Value indicating if this topic requires duplicate detection.
	RequiresDuplicateDetection pulumi.BoolPtrInput `pulumi:"requiresDuplicateDetection"`
	// Enumerates the possible values for the status of a messaging entity.
	Status pulumi.StringPtrInput `pulumi:"status"`
	// Value that indicates whether the topic supports ordering.
	SupportOrdering pulumi.BoolPtrInput `pulumi:"supportOrdering"`
}

func (TopicPropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TopicProperties)(nil)).Elem()
}

func (i TopicPropertiesArgs) ToTopicPropertiesOutput() TopicPropertiesOutput {
	return i.ToTopicPropertiesOutputWithContext(context.Background())
}

func (i TopicPropertiesArgs) ToTopicPropertiesOutputWithContext(ctx context.Context) TopicPropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TopicPropertiesOutput)
}

func (i TopicPropertiesArgs) ToTopicPropertiesPtrOutput() TopicPropertiesPtrOutput {
	return i.ToTopicPropertiesPtrOutputWithContext(context.Background())
}

func (i TopicPropertiesArgs) ToTopicPropertiesPtrOutputWithContext(ctx context.Context) TopicPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TopicPropertiesOutput).ToTopicPropertiesPtrOutputWithContext(ctx)
}

// TopicPropertiesPtrInput is an input type that accepts TopicPropertiesArgs, TopicPropertiesPtr and TopicPropertiesPtrOutput values.
// You can construct a concrete instance of `TopicPropertiesPtrInput` via:
//
//          TopicPropertiesArgs{...}
//
//  or:
//
//          nil
type TopicPropertiesPtrInput interface {
	pulumi.Input

	ToTopicPropertiesPtrOutput() TopicPropertiesPtrOutput
	ToTopicPropertiesPtrOutputWithContext(context.Context) TopicPropertiesPtrOutput
}

type topicPropertiesPtrType TopicPropertiesArgs

func TopicPropertiesPtr(v *TopicPropertiesArgs) TopicPropertiesPtrInput {
	return (*topicPropertiesPtrType)(v)
}

func (*topicPropertiesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TopicProperties)(nil)).Elem()
}

func (i *topicPropertiesPtrType) ToTopicPropertiesPtrOutput() TopicPropertiesPtrOutput {
	return i.ToTopicPropertiesPtrOutputWithContext(context.Background())
}

func (i *topicPropertiesPtrType) ToTopicPropertiesPtrOutputWithContext(ctx context.Context) TopicPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TopicPropertiesPtrOutput)
}

// The Topic Properties definition.
type TopicPropertiesOutput struct{ *pulumi.OutputState }

func (TopicPropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TopicProperties)(nil)).Elem()
}

func (o TopicPropertiesOutput) ToTopicPropertiesOutput() TopicPropertiesOutput {
	return o
}

func (o TopicPropertiesOutput) ToTopicPropertiesOutputWithContext(ctx context.Context) TopicPropertiesOutput {
	return o
}

func (o TopicPropertiesOutput) ToTopicPropertiesPtrOutput() TopicPropertiesPtrOutput {
	return o.ToTopicPropertiesPtrOutputWithContext(context.Background())
}

func (o TopicPropertiesOutput) ToTopicPropertiesPtrOutputWithContext(ctx context.Context) TopicPropertiesPtrOutput {
	return o.ApplyT(func(v TopicProperties) *TopicProperties {
		return &v
	}).(TopicPropertiesPtrOutput)
}

// TimeSpan idle interval after which the topic is automatically deleted. The minimum duration is 5 minutes.
func (o TopicPropertiesOutput) AutoDeleteOnIdle() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TopicProperties) *string { return v.AutoDeleteOnIdle }).(pulumi.StringPtrOutput)
}

// Default message time to live value. This is the duration after which the message expires, starting from when the message is sent to Service Bus. This is the default value used when TimeToLive is not set on a message itself.
func (o TopicPropertiesOutput) DefaultMessageTimeToLive() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TopicProperties) *string { return v.DefaultMessageTimeToLive }).(pulumi.StringPtrOutput)
}

// TimeSpan structure that defines the duration of the duplicate detection history. The default value is 10 minutes.
func (o TopicPropertiesOutput) DuplicateDetectionHistoryTimeWindow() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TopicProperties) *string { return v.DuplicateDetectionHistoryTimeWindow }).(pulumi.StringPtrOutput)
}

// Value that indicates whether server-side batched operations are enabled.
func (o TopicPropertiesOutput) EnableBatchedOperations() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v TopicProperties) *bool { return v.EnableBatchedOperations }).(pulumi.BoolPtrOutput)
}

// Value that indicates whether Express Entities are enabled. An express topic holds a message in memory temporarily before writing it to persistent storage.
func (o TopicPropertiesOutput) EnableExpress() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v TopicProperties) *bool { return v.EnableExpress }).(pulumi.BoolPtrOutput)
}

// Value that indicates whether the topic to be partitioned across multiple message brokers is enabled.
func (o TopicPropertiesOutput) EnablePartitioning() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v TopicProperties) *bool { return v.EnablePartitioning }).(pulumi.BoolPtrOutput)
}

// Entity availability status for the topic.
func (o TopicPropertiesOutput) EntityAvailabilityStatus() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TopicProperties) *string { return v.EntityAvailabilityStatus }).(pulumi.StringPtrOutput)
}

// Whether messages should be filtered before publishing.
func (o TopicPropertiesOutput) FilteringMessagesBeforePublishing() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v TopicProperties) *bool { return v.FilteringMessagesBeforePublishing }).(pulumi.BoolPtrOutput)
}

// Value that indicates whether the message is accessible anonymously.
func (o TopicPropertiesOutput) IsAnonymousAccessible() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v TopicProperties) *bool { return v.IsAnonymousAccessible }).(pulumi.BoolPtrOutput)
}

func (o TopicPropertiesOutput) IsExpress() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v TopicProperties) *bool { return v.IsExpress }).(pulumi.BoolPtrOutput)
}

// Maximum size of the topic in megabytes, which is the size of the memory allocated for the topic.
func (o TopicPropertiesOutput) MaxSizeInMegabytes() pulumi.IntPtrOutput {
	return o.ApplyT(func(v TopicProperties) *int { return v.MaxSizeInMegabytes }).(pulumi.IntPtrOutput)
}

// Value indicating if this topic requires duplicate detection.
func (o TopicPropertiesOutput) RequiresDuplicateDetection() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v TopicProperties) *bool { return v.RequiresDuplicateDetection }).(pulumi.BoolPtrOutput)
}

// Enumerates the possible values for the status of a messaging entity.
func (o TopicPropertiesOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TopicProperties) *string { return v.Status }).(pulumi.StringPtrOutput)
}

// Value that indicates whether the topic supports ordering.
func (o TopicPropertiesOutput) SupportOrdering() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v TopicProperties) *bool { return v.SupportOrdering }).(pulumi.BoolPtrOutput)
}

type TopicPropertiesPtrOutput struct{ *pulumi.OutputState }

func (TopicPropertiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TopicProperties)(nil)).Elem()
}

func (o TopicPropertiesPtrOutput) ToTopicPropertiesPtrOutput() TopicPropertiesPtrOutput {
	return o
}

func (o TopicPropertiesPtrOutput) ToTopicPropertiesPtrOutputWithContext(ctx context.Context) TopicPropertiesPtrOutput {
	return o
}

func (o TopicPropertiesPtrOutput) Elem() TopicPropertiesOutput {
	return o.ApplyT(func(v *TopicProperties) TopicProperties { return *v }).(TopicPropertiesOutput)
}

// TimeSpan idle interval after which the topic is automatically deleted. The minimum duration is 5 minutes.
func (o TopicPropertiesPtrOutput) AutoDeleteOnIdle() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TopicProperties) *string {
		if v == nil {
			return nil
		}
		return v.AutoDeleteOnIdle
	}).(pulumi.StringPtrOutput)
}

// Default message time to live value. This is the duration after which the message expires, starting from when the message is sent to Service Bus. This is the default value used when TimeToLive is not set on a message itself.
func (o TopicPropertiesPtrOutput) DefaultMessageTimeToLive() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TopicProperties) *string {
		if v == nil {
			return nil
		}
		return v.DefaultMessageTimeToLive
	}).(pulumi.StringPtrOutput)
}

// TimeSpan structure that defines the duration of the duplicate detection history. The default value is 10 minutes.
func (o TopicPropertiesPtrOutput) DuplicateDetectionHistoryTimeWindow() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TopicProperties) *string {
		if v == nil {
			return nil
		}
		return v.DuplicateDetectionHistoryTimeWindow
	}).(pulumi.StringPtrOutput)
}

// Value that indicates whether server-side batched operations are enabled.
func (o TopicPropertiesPtrOutput) EnableBatchedOperations() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *TopicProperties) *bool {
		if v == nil {
			return nil
		}
		return v.EnableBatchedOperations
	}).(pulumi.BoolPtrOutput)
}

// Value that indicates whether Express Entities are enabled. An express topic holds a message in memory temporarily before writing it to persistent storage.
func (o TopicPropertiesPtrOutput) EnableExpress() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *TopicProperties) *bool {
		if v == nil {
			return nil
		}
		return v.EnableExpress
	}).(pulumi.BoolPtrOutput)
}

// Value that indicates whether the topic to be partitioned across multiple message brokers is enabled.
func (o TopicPropertiesPtrOutput) EnablePartitioning() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *TopicProperties) *bool {
		if v == nil {
			return nil
		}
		return v.EnablePartitioning
	}).(pulumi.BoolPtrOutput)
}

// Entity availability status for the topic.
func (o TopicPropertiesPtrOutput) EntityAvailabilityStatus() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TopicProperties) *string {
		if v == nil {
			return nil
		}
		return v.EntityAvailabilityStatus
	}).(pulumi.StringPtrOutput)
}

// Whether messages should be filtered before publishing.
func (o TopicPropertiesPtrOutput) FilteringMessagesBeforePublishing() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *TopicProperties) *bool {
		if v == nil {
			return nil
		}
		return v.FilteringMessagesBeforePublishing
	}).(pulumi.BoolPtrOutput)
}

// Value that indicates whether the message is accessible anonymously.
func (o TopicPropertiesPtrOutput) IsAnonymousAccessible() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *TopicProperties) *bool {
		if v == nil {
			return nil
		}
		return v.IsAnonymousAccessible
	}).(pulumi.BoolPtrOutput)
}

func (o TopicPropertiesPtrOutput) IsExpress() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *TopicProperties) *bool {
		if v == nil {
			return nil
		}
		return v.IsExpress
	}).(pulumi.BoolPtrOutput)
}

// Maximum size of the topic in megabytes, which is the size of the memory allocated for the topic.
func (o TopicPropertiesPtrOutput) MaxSizeInMegabytes() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *TopicProperties) *int {
		if v == nil {
			return nil
		}
		return v.MaxSizeInMegabytes
	}).(pulumi.IntPtrOutput)
}

// Value indicating if this topic requires duplicate detection.
func (o TopicPropertiesPtrOutput) RequiresDuplicateDetection() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *TopicProperties) *bool {
		if v == nil {
			return nil
		}
		return v.RequiresDuplicateDetection
	}).(pulumi.BoolPtrOutput)
}

// Enumerates the possible values for the status of a messaging entity.
func (o TopicPropertiesPtrOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TopicProperties) *string {
		if v == nil {
			return nil
		}
		return v.Status
	}).(pulumi.StringPtrOutput)
}

// Value that indicates whether the topic supports ordering.
func (o TopicPropertiesPtrOutput) SupportOrdering() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *TopicProperties) *bool {
		if v == nil {
			return nil
		}
		return v.SupportOrdering
	}).(pulumi.BoolPtrOutput)
}

// The Topic Properties definition.
type TopicPropertiesResponse struct {
	// Last time the message was sent, or a request was received, for this topic.
	AccessedAt string `pulumi:"accessedAt"`
	// TimeSpan idle interval after which the topic is automatically deleted. The minimum duration is 5 minutes.
	AutoDeleteOnIdle *string `pulumi:"autoDeleteOnIdle"`
	// Message Count Details.
	CountDetails MessageCountDetailsResponse `pulumi:"countDetails"`
	// Exact time the message was created.
	CreatedAt string `pulumi:"createdAt"`
	// Default message time to live value. This is the duration after which the message expires, starting from when the message is sent to Service Bus. This is the default value used when TimeToLive is not set on a message itself.
	DefaultMessageTimeToLive *string `pulumi:"defaultMessageTimeToLive"`
	// TimeSpan structure that defines the duration of the duplicate detection history. The default value is 10 minutes.
	DuplicateDetectionHistoryTimeWindow *string `pulumi:"duplicateDetectionHistoryTimeWindow"`
	// Value that indicates whether server-side batched operations are enabled.
	EnableBatchedOperations *bool `pulumi:"enableBatchedOperations"`
	// Value that indicates whether Express Entities are enabled. An express topic holds a message in memory temporarily before writing it to persistent storage.
	EnableExpress *bool `pulumi:"enableExpress"`
	// Value that indicates whether the topic to be partitioned across multiple message brokers is enabled.
	EnablePartitioning *bool `pulumi:"enablePartitioning"`
	// Entity availability status for the topic.
	EntityAvailabilityStatus *string `pulumi:"entityAvailabilityStatus"`
	// Whether messages should be filtered before publishing.
	FilteringMessagesBeforePublishing *bool `pulumi:"filteringMessagesBeforePublishing"`
	// Value that indicates whether the message is accessible anonymously.
	IsAnonymousAccessible *bool `pulumi:"isAnonymousAccessible"`
	IsExpress             *bool `pulumi:"isExpress"`
	// Maximum size of the topic in megabytes, which is the size of the memory allocated for the topic.
	MaxSizeInMegabytes *int `pulumi:"maxSizeInMegabytes"`
	// Value indicating if this topic requires duplicate detection.
	RequiresDuplicateDetection *bool `pulumi:"requiresDuplicateDetection"`
	// Size of the topic, in bytes.
	SizeInBytes int `pulumi:"sizeInBytes"`
	// Enumerates the possible values for the status of a messaging entity.
	Status *string `pulumi:"status"`
	// Number of subscriptions.
	SubscriptionCount int `pulumi:"subscriptionCount"`
	// Value that indicates whether the topic supports ordering.
	SupportOrdering *bool `pulumi:"supportOrdering"`
	// The exact time the message was updated.
	UpdatedAt string `pulumi:"updatedAt"`
}

// TopicPropertiesResponseInput is an input type that accepts TopicPropertiesResponseArgs and TopicPropertiesResponseOutput values.
// You can construct a concrete instance of `TopicPropertiesResponseInput` via:
//
//          TopicPropertiesResponseArgs{...}
type TopicPropertiesResponseInput interface {
	pulumi.Input

	ToTopicPropertiesResponseOutput() TopicPropertiesResponseOutput
	ToTopicPropertiesResponseOutputWithContext(context.Context) TopicPropertiesResponseOutput
}

// The Topic Properties definition.
type TopicPropertiesResponseArgs struct {
	// Last time the message was sent, or a request was received, for this topic.
	AccessedAt pulumi.StringInput `pulumi:"accessedAt"`
	// TimeSpan idle interval after which the topic is automatically deleted. The minimum duration is 5 minutes.
	AutoDeleteOnIdle pulumi.StringPtrInput `pulumi:"autoDeleteOnIdle"`
	// Message Count Details.
	CountDetails MessageCountDetailsResponseInput `pulumi:"countDetails"`
	// Exact time the message was created.
	CreatedAt pulumi.StringInput `pulumi:"createdAt"`
	// Default message time to live value. This is the duration after which the message expires, starting from when the message is sent to Service Bus. This is the default value used when TimeToLive is not set on a message itself.
	DefaultMessageTimeToLive pulumi.StringPtrInput `pulumi:"defaultMessageTimeToLive"`
	// TimeSpan structure that defines the duration of the duplicate detection history. The default value is 10 minutes.
	DuplicateDetectionHistoryTimeWindow pulumi.StringPtrInput `pulumi:"duplicateDetectionHistoryTimeWindow"`
	// Value that indicates whether server-side batched operations are enabled.
	EnableBatchedOperations pulumi.BoolPtrInput `pulumi:"enableBatchedOperations"`
	// Value that indicates whether Express Entities are enabled. An express topic holds a message in memory temporarily before writing it to persistent storage.
	EnableExpress pulumi.BoolPtrInput `pulumi:"enableExpress"`
	// Value that indicates whether the topic to be partitioned across multiple message brokers is enabled.
	EnablePartitioning pulumi.BoolPtrInput `pulumi:"enablePartitioning"`
	// Entity availability status for the topic.
	EntityAvailabilityStatus pulumi.StringPtrInput `pulumi:"entityAvailabilityStatus"`
	// Whether messages should be filtered before publishing.
	FilteringMessagesBeforePublishing pulumi.BoolPtrInput `pulumi:"filteringMessagesBeforePublishing"`
	// Value that indicates whether the message is accessible anonymously.
	IsAnonymousAccessible pulumi.BoolPtrInput `pulumi:"isAnonymousAccessible"`
	IsExpress             pulumi.BoolPtrInput `pulumi:"isExpress"`
	// Maximum size of the topic in megabytes, which is the size of the memory allocated for the topic.
	MaxSizeInMegabytes pulumi.IntPtrInput `pulumi:"maxSizeInMegabytes"`
	// Value indicating if this topic requires duplicate detection.
	RequiresDuplicateDetection pulumi.BoolPtrInput `pulumi:"requiresDuplicateDetection"`
	// Size of the topic, in bytes.
	SizeInBytes pulumi.IntInput `pulumi:"sizeInBytes"`
	// Enumerates the possible values for the status of a messaging entity.
	Status pulumi.StringPtrInput `pulumi:"status"`
	// Number of subscriptions.
	SubscriptionCount pulumi.IntInput `pulumi:"subscriptionCount"`
	// Value that indicates whether the topic supports ordering.
	SupportOrdering pulumi.BoolPtrInput `pulumi:"supportOrdering"`
	// The exact time the message was updated.
	UpdatedAt pulumi.StringInput `pulumi:"updatedAt"`
}

func (TopicPropertiesResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TopicPropertiesResponse)(nil)).Elem()
}

func (i TopicPropertiesResponseArgs) ToTopicPropertiesResponseOutput() TopicPropertiesResponseOutput {
	return i.ToTopicPropertiesResponseOutputWithContext(context.Background())
}

func (i TopicPropertiesResponseArgs) ToTopicPropertiesResponseOutputWithContext(ctx context.Context) TopicPropertiesResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TopicPropertiesResponseOutput)
}

func (i TopicPropertiesResponseArgs) ToTopicPropertiesResponsePtrOutput() TopicPropertiesResponsePtrOutput {
	return i.ToTopicPropertiesResponsePtrOutputWithContext(context.Background())
}

func (i TopicPropertiesResponseArgs) ToTopicPropertiesResponsePtrOutputWithContext(ctx context.Context) TopicPropertiesResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TopicPropertiesResponseOutput).ToTopicPropertiesResponsePtrOutputWithContext(ctx)
}

// TopicPropertiesResponsePtrInput is an input type that accepts TopicPropertiesResponseArgs, TopicPropertiesResponsePtr and TopicPropertiesResponsePtrOutput values.
// You can construct a concrete instance of `TopicPropertiesResponsePtrInput` via:
//
//          TopicPropertiesResponseArgs{...}
//
//  or:
//
//          nil
type TopicPropertiesResponsePtrInput interface {
	pulumi.Input

	ToTopicPropertiesResponsePtrOutput() TopicPropertiesResponsePtrOutput
	ToTopicPropertiesResponsePtrOutputWithContext(context.Context) TopicPropertiesResponsePtrOutput
}

type topicPropertiesResponsePtrType TopicPropertiesResponseArgs

func TopicPropertiesResponsePtr(v *TopicPropertiesResponseArgs) TopicPropertiesResponsePtrInput {
	return (*topicPropertiesResponsePtrType)(v)
}

func (*topicPropertiesResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TopicPropertiesResponse)(nil)).Elem()
}

func (i *topicPropertiesResponsePtrType) ToTopicPropertiesResponsePtrOutput() TopicPropertiesResponsePtrOutput {
	return i.ToTopicPropertiesResponsePtrOutputWithContext(context.Background())
}

func (i *topicPropertiesResponsePtrType) ToTopicPropertiesResponsePtrOutputWithContext(ctx context.Context) TopicPropertiesResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TopicPropertiesResponsePtrOutput)
}

// The Topic Properties definition.
type TopicPropertiesResponseOutput struct{ *pulumi.OutputState }

func (TopicPropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TopicPropertiesResponse)(nil)).Elem()
}

func (o TopicPropertiesResponseOutput) ToTopicPropertiesResponseOutput() TopicPropertiesResponseOutput {
	return o
}

func (o TopicPropertiesResponseOutput) ToTopicPropertiesResponseOutputWithContext(ctx context.Context) TopicPropertiesResponseOutput {
	return o
}

func (o TopicPropertiesResponseOutput) ToTopicPropertiesResponsePtrOutput() TopicPropertiesResponsePtrOutput {
	return o.ToTopicPropertiesResponsePtrOutputWithContext(context.Background())
}

func (o TopicPropertiesResponseOutput) ToTopicPropertiesResponsePtrOutputWithContext(ctx context.Context) TopicPropertiesResponsePtrOutput {
	return o.ApplyT(func(v TopicPropertiesResponse) *TopicPropertiesResponse {
		return &v
	}).(TopicPropertiesResponsePtrOutput)
}

// Last time the message was sent, or a request was received, for this topic.
func (o TopicPropertiesResponseOutput) AccessedAt() pulumi.StringOutput {
	return o.ApplyT(func(v TopicPropertiesResponse) string { return v.AccessedAt }).(pulumi.StringOutput)
}

// TimeSpan idle interval after which the topic is automatically deleted. The minimum duration is 5 minutes.
func (o TopicPropertiesResponseOutput) AutoDeleteOnIdle() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TopicPropertiesResponse) *string { return v.AutoDeleteOnIdle }).(pulumi.StringPtrOutput)
}

// Message Count Details.
func (o TopicPropertiesResponseOutput) CountDetails() MessageCountDetailsResponseOutput {
	return o.ApplyT(func(v TopicPropertiesResponse) MessageCountDetailsResponse { return v.CountDetails }).(MessageCountDetailsResponseOutput)
}

// Exact time the message was created.
func (o TopicPropertiesResponseOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v TopicPropertiesResponse) string { return v.CreatedAt }).(pulumi.StringOutput)
}

// Default message time to live value. This is the duration after which the message expires, starting from when the message is sent to Service Bus. This is the default value used when TimeToLive is not set on a message itself.
func (o TopicPropertiesResponseOutput) DefaultMessageTimeToLive() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TopicPropertiesResponse) *string { return v.DefaultMessageTimeToLive }).(pulumi.StringPtrOutput)
}

// TimeSpan structure that defines the duration of the duplicate detection history. The default value is 10 minutes.
func (o TopicPropertiesResponseOutput) DuplicateDetectionHistoryTimeWindow() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TopicPropertiesResponse) *string { return v.DuplicateDetectionHistoryTimeWindow }).(pulumi.StringPtrOutput)
}

// Value that indicates whether server-side batched operations are enabled.
func (o TopicPropertiesResponseOutput) EnableBatchedOperations() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v TopicPropertiesResponse) *bool { return v.EnableBatchedOperations }).(pulumi.BoolPtrOutput)
}

// Value that indicates whether Express Entities are enabled. An express topic holds a message in memory temporarily before writing it to persistent storage.
func (o TopicPropertiesResponseOutput) EnableExpress() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v TopicPropertiesResponse) *bool { return v.EnableExpress }).(pulumi.BoolPtrOutput)
}

// Value that indicates whether the topic to be partitioned across multiple message brokers is enabled.
func (o TopicPropertiesResponseOutput) EnablePartitioning() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v TopicPropertiesResponse) *bool { return v.EnablePartitioning }).(pulumi.BoolPtrOutput)
}

// Entity availability status for the topic.
func (o TopicPropertiesResponseOutput) EntityAvailabilityStatus() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TopicPropertiesResponse) *string { return v.EntityAvailabilityStatus }).(pulumi.StringPtrOutput)
}

// Whether messages should be filtered before publishing.
func (o TopicPropertiesResponseOutput) FilteringMessagesBeforePublishing() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v TopicPropertiesResponse) *bool { return v.FilteringMessagesBeforePublishing }).(pulumi.BoolPtrOutput)
}

// Value that indicates whether the message is accessible anonymously.
func (o TopicPropertiesResponseOutput) IsAnonymousAccessible() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v TopicPropertiesResponse) *bool { return v.IsAnonymousAccessible }).(pulumi.BoolPtrOutput)
}

func (o TopicPropertiesResponseOutput) IsExpress() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v TopicPropertiesResponse) *bool { return v.IsExpress }).(pulumi.BoolPtrOutput)
}

// Maximum size of the topic in megabytes, which is the size of the memory allocated for the topic.
func (o TopicPropertiesResponseOutput) MaxSizeInMegabytes() pulumi.IntPtrOutput {
	return o.ApplyT(func(v TopicPropertiesResponse) *int { return v.MaxSizeInMegabytes }).(pulumi.IntPtrOutput)
}

// Value indicating if this topic requires duplicate detection.
func (o TopicPropertiesResponseOutput) RequiresDuplicateDetection() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v TopicPropertiesResponse) *bool { return v.RequiresDuplicateDetection }).(pulumi.BoolPtrOutput)
}

// Size of the topic, in bytes.
func (o TopicPropertiesResponseOutput) SizeInBytes() pulumi.IntOutput {
	return o.ApplyT(func(v TopicPropertiesResponse) int { return v.SizeInBytes }).(pulumi.IntOutput)
}

// Enumerates the possible values for the status of a messaging entity.
func (o TopicPropertiesResponseOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TopicPropertiesResponse) *string { return v.Status }).(pulumi.StringPtrOutput)
}

// Number of subscriptions.
func (o TopicPropertiesResponseOutput) SubscriptionCount() pulumi.IntOutput {
	return o.ApplyT(func(v TopicPropertiesResponse) int { return v.SubscriptionCount }).(pulumi.IntOutput)
}

// Value that indicates whether the topic supports ordering.
func (o TopicPropertiesResponseOutput) SupportOrdering() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v TopicPropertiesResponse) *bool { return v.SupportOrdering }).(pulumi.BoolPtrOutput)
}

// The exact time the message was updated.
func (o TopicPropertiesResponseOutput) UpdatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v TopicPropertiesResponse) string { return v.UpdatedAt }).(pulumi.StringOutput)
}

type TopicPropertiesResponsePtrOutput struct{ *pulumi.OutputState }

func (TopicPropertiesResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TopicPropertiesResponse)(nil)).Elem()
}

func (o TopicPropertiesResponsePtrOutput) ToTopicPropertiesResponsePtrOutput() TopicPropertiesResponsePtrOutput {
	return o
}

func (o TopicPropertiesResponsePtrOutput) ToTopicPropertiesResponsePtrOutputWithContext(ctx context.Context) TopicPropertiesResponsePtrOutput {
	return o
}

func (o TopicPropertiesResponsePtrOutput) Elem() TopicPropertiesResponseOutput {
	return o.ApplyT(func(v *TopicPropertiesResponse) TopicPropertiesResponse { return *v }).(TopicPropertiesResponseOutput)
}

// Last time the message was sent, or a request was received, for this topic.
func (o TopicPropertiesResponsePtrOutput) AccessedAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TopicPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return &v.AccessedAt
	}).(pulumi.StringPtrOutput)
}

// TimeSpan idle interval after which the topic is automatically deleted. The minimum duration is 5 minutes.
func (o TopicPropertiesResponsePtrOutput) AutoDeleteOnIdle() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TopicPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return v.AutoDeleteOnIdle
	}).(pulumi.StringPtrOutput)
}

// Message Count Details.
func (o TopicPropertiesResponsePtrOutput) CountDetails() MessageCountDetailsResponsePtrOutput {
	return o.ApplyT(func(v *TopicPropertiesResponse) *MessageCountDetailsResponse {
		if v == nil {
			return nil
		}
		return &v.CountDetails
	}).(MessageCountDetailsResponsePtrOutput)
}

// Exact time the message was created.
func (o TopicPropertiesResponsePtrOutput) CreatedAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TopicPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return &v.CreatedAt
	}).(pulumi.StringPtrOutput)
}

// Default message time to live value. This is the duration after which the message expires, starting from when the message is sent to Service Bus. This is the default value used when TimeToLive is not set on a message itself.
func (o TopicPropertiesResponsePtrOutput) DefaultMessageTimeToLive() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TopicPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return v.DefaultMessageTimeToLive
	}).(pulumi.StringPtrOutput)
}

// TimeSpan structure that defines the duration of the duplicate detection history. The default value is 10 minutes.
func (o TopicPropertiesResponsePtrOutput) DuplicateDetectionHistoryTimeWindow() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TopicPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return v.DuplicateDetectionHistoryTimeWindow
	}).(pulumi.StringPtrOutput)
}

// Value that indicates whether server-side batched operations are enabled.
func (o TopicPropertiesResponsePtrOutput) EnableBatchedOperations() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *TopicPropertiesResponse) *bool {
		if v == nil {
			return nil
		}
		return v.EnableBatchedOperations
	}).(pulumi.BoolPtrOutput)
}

// Value that indicates whether Express Entities are enabled. An express topic holds a message in memory temporarily before writing it to persistent storage.
func (o TopicPropertiesResponsePtrOutput) EnableExpress() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *TopicPropertiesResponse) *bool {
		if v == nil {
			return nil
		}
		return v.EnableExpress
	}).(pulumi.BoolPtrOutput)
}

// Value that indicates whether the topic to be partitioned across multiple message brokers is enabled.
func (o TopicPropertiesResponsePtrOutput) EnablePartitioning() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *TopicPropertiesResponse) *bool {
		if v == nil {
			return nil
		}
		return v.EnablePartitioning
	}).(pulumi.BoolPtrOutput)
}

// Entity availability status for the topic.
func (o TopicPropertiesResponsePtrOutput) EntityAvailabilityStatus() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TopicPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return v.EntityAvailabilityStatus
	}).(pulumi.StringPtrOutput)
}

// Whether messages should be filtered before publishing.
func (o TopicPropertiesResponsePtrOutput) FilteringMessagesBeforePublishing() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *TopicPropertiesResponse) *bool {
		if v == nil {
			return nil
		}
		return v.FilteringMessagesBeforePublishing
	}).(pulumi.BoolPtrOutput)
}

// Value that indicates whether the message is accessible anonymously.
func (o TopicPropertiesResponsePtrOutput) IsAnonymousAccessible() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *TopicPropertiesResponse) *bool {
		if v == nil {
			return nil
		}
		return v.IsAnonymousAccessible
	}).(pulumi.BoolPtrOutput)
}

func (o TopicPropertiesResponsePtrOutput) IsExpress() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *TopicPropertiesResponse) *bool {
		if v == nil {
			return nil
		}
		return v.IsExpress
	}).(pulumi.BoolPtrOutput)
}

// Maximum size of the topic in megabytes, which is the size of the memory allocated for the topic.
func (o TopicPropertiesResponsePtrOutput) MaxSizeInMegabytes() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *TopicPropertiesResponse) *int {
		if v == nil {
			return nil
		}
		return v.MaxSizeInMegabytes
	}).(pulumi.IntPtrOutput)
}

// Value indicating if this topic requires duplicate detection.
func (o TopicPropertiesResponsePtrOutput) RequiresDuplicateDetection() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *TopicPropertiesResponse) *bool {
		if v == nil {
			return nil
		}
		return v.RequiresDuplicateDetection
	}).(pulumi.BoolPtrOutput)
}

// Size of the topic, in bytes.
func (o TopicPropertiesResponsePtrOutput) SizeInBytes() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *TopicPropertiesResponse) *int {
		if v == nil {
			return nil
		}
		return &v.SizeInBytes
	}).(pulumi.IntPtrOutput)
}

// Enumerates the possible values for the status of a messaging entity.
func (o TopicPropertiesResponsePtrOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TopicPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return v.Status
	}).(pulumi.StringPtrOutput)
}

// Number of subscriptions.
func (o TopicPropertiesResponsePtrOutput) SubscriptionCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *TopicPropertiesResponse) *int {
		if v == nil {
			return nil
		}
		return &v.SubscriptionCount
	}).(pulumi.IntPtrOutput)
}

// Value that indicates whether the topic supports ordering.
func (o TopicPropertiesResponsePtrOutput) SupportOrdering() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *TopicPropertiesResponse) *bool {
		if v == nil {
			return nil
		}
		return v.SupportOrdering
	}).(pulumi.BoolPtrOutput)
}

// The exact time the message was updated.
func (o TopicPropertiesResponsePtrOutput) UpdatedAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TopicPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return &v.UpdatedAt
	}).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(MessageCountDetailsOutput{})
	pulumi.RegisterOutputType(MessageCountDetailsResponseOutput{})
	pulumi.RegisterOutputType(MessageCountDetailsResponsePtrOutput{})
	pulumi.RegisterOutputType(NamespaceTypeOutput{})
	pulumi.RegisterOutputType(NamespaceAuthorizationRuleTypeOutput{})
	pulumi.RegisterOutputType(NamespacePropertiesOutput{})
	pulumi.RegisterOutputType(NamespacePropertiesPtrOutput{})
	pulumi.RegisterOutputType(NamespacePropertiesResponseOutput{})
	pulumi.RegisterOutputType(NamespacePropertiesResponsePtrOutput{})
	pulumi.RegisterOutputType(QueueTypeOutput{})
	pulumi.RegisterOutputType(QueueAuthorizationRuleTypeOutput{})
	pulumi.RegisterOutputType(QueuePropertiesOutput{})
	pulumi.RegisterOutputType(QueuePropertiesPtrOutput{})
	pulumi.RegisterOutputType(QueuePropertiesResponseOutput{})
	pulumi.RegisterOutputType(QueuePropertiesResponsePtrOutput{})
	pulumi.RegisterOutputType(SharedAccessAuthorizationRuleGetPropertiesResponseOutput{})
	pulumi.RegisterOutputType(SharedAccessAuthorizationRulePropertiesOutput{})
	pulumi.RegisterOutputType(SharedAccessAuthorizationRulePropertiesPtrOutput{})
	pulumi.RegisterOutputType(SharedAccessAuthorizationRulePropertiesResponseOutput{})
	pulumi.RegisterOutputType(SharedAccessAuthorizationRulePropertiesResponsePtrOutput{})
	pulumi.RegisterOutputType(SkuOutput{})
	pulumi.RegisterOutputType(SkuPtrOutput{})
	pulumi.RegisterOutputType(SkuResponseOutput{})
	pulumi.RegisterOutputType(SkuResponsePtrOutput{})
	pulumi.RegisterOutputType(SubscriptionTypeOutput{})
	pulumi.RegisterOutputType(SubscriptionPropertiesOutput{})
	pulumi.RegisterOutputType(SubscriptionPropertiesPtrOutput{})
	pulumi.RegisterOutputType(SubscriptionPropertiesResponseOutput{})
	pulumi.RegisterOutputType(SubscriptionPropertiesResponsePtrOutput{})
	pulumi.RegisterOutputType(TopicTypeOutput{})
	pulumi.RegisterOutputType(TopicAuthorizationRuleTypeOutput{})
	pulumi.RegisterOutputType(TopicPropertiesOutput{})
	pulumi.RegisterOutputType(TopicPropertiesPtrOutput{})
	pulumi.RegisterOutputType(TopicPropertiesResponseOutput{})
	pulumi.RegisterOutputType(TopicPropertiesResponsePtrOutput{})
}
