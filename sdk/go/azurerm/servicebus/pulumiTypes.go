// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package servicebus

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// Represents the filter actions which are allowed for the transformation of a message that have been matched by a filter expression.
type Action struct {
	// This property is reserved for future use. An integer value showing the compatibility level, currently hard-coded to 20.
	CompatibilityLevel *int `pulumi:"compatibilityLevel"`
	// Value that indicates whether the rule action requires preprocessing.
	RequiresPreprocessing *bool `pulumi:"requiresPreprocessing"`
	// SQL expression. e.g. MyProperty='ABC'
	SqlExpression *string `pulumi:"sqlExpression"`
}

// ActionInput is an input type that accepts ActionArgs and ActionOutput values.
// You can construct a concrete instance of `ActionInput` via:
//
//          ActionArgs{...}
type ActionInput interface {
	pulumi.Input

	ToActionOutput() ActionOutput
	ToActionOutputWithContext(context.Context) ActionOutput
}

// Represents the filter actions which are allowed for the transformation of a message that have been matched by a filter expression.
type ActionArgs struct {
	// This property is reserved for future use. An integer value showing the compatibility level, currently hard-coded to 20.
	CompatibilityLevel pulumi.IntPtrInput `pulumi:"compatibilityLevel"`
	// Value that indicates whether the rule action requires preprocessing.
	RequiresPreprocessing pulumi.BoolPtrInput `pulumi:"requiresPreprocessing"`
	// SQL expression. e.g. MyProperty='ABC'
	SqlExpression pulumi.StringPtrInput `pulumi:"sqlExpression"`
}

func (ActionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Action)(nil)).Elem()
}

func (i ActionArgs) ToActionOutput() ActionOutput {
	return i.ToActionOutputWithContext(context.Background())
}

func (i ActionArgs) ToActionOutputWithContext(ctx context.Context) ActionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ActionOutput)
}

func (i ActionArgs) ToActionPtrOutput() ActionPtrOutput {
	return i.ToActionPtrOutputWithContext(context.Background())
}

func (i ActionArgs) ToActionPtrOutputWithContext(ctx context.Context) ActionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ActionOutput).ToActionPtrOutputWithContext(ctx)
}

// ActionPtrInput is an input type that accepts ActionArgs, ActionPtr and ActionPtrOutput values.
// You can construct a concrete instance of `ActionPtrInput` via:
//
//          ActionArgs{...}
//
//  or:
//
//          nil
type ActionPtrInput interface {
	pulumi.Input

	ToActionPtrOutput() ActionPtrOutput
	ToActionPtrOutputWithContext(context.Context) ActionPtrOutput
}

type actionPtrType ActionArgs

func ActionPtr(v *ActionArgs) ActionPtrInput {
	return (*actionPtrType)(v)
}

func (*actionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Action)(nil)).Elem()
}

func (i *actionPtrType) ToActionPtrOutput() ActionPtrOutput {
	return i.ToActionPtrOutputWithContext(context.Background())
}

func (i *actionPtrType) ToActionPtrOutputWithContext(ctx context.Context) ActionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ActionPtrOutput)
}

// Represents the filter actions which are allowed for the transformation of a message that have been matched by a filter expression.
type ActionOutput struct{ *pulumi.OutputState }

func (ActionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Action)(nil)).Elem()
}

func (o ActionOutput) ToActionOutput() ActionOutput {
	return o
}

func (o ActionOutput) ToActionOutputWithContext(ctx context.Context) ActionOutput {
	return o
}

func (o ActionOutput) ToActionPtrOutput() ActionPtrOutput {
	return o.ToActionPtrOutputWithContext(context.Background())
}

func (o ActionOutput) ToActionPtrOutputWithContext(ctx context.Context) ActionPtrOutput {
	return o.ApplyT(func(v Action) *Action {
		return &v
	}).(ActionPtrOutput)
}

// This property is reserved for future use. An integer value showing the compatibility level, currently hard-coded to 20.
func (o ActionOutput) CompatibilityLevel() pulumi.IntPtrOutput {
	return o.ApplyT(func(v Action) *int { return v.CompatibilityLevel }).(pulumi.IntPtrOutput)
}

// Value that indicates whether the rule action requires preprocessing.
func (o ActionOutput) RequiresPreprocessing() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v Action) *bool { return v.RequiresPreprocessing }).(pulumi.BoolPtrOutput)
}

// SQL expression. e.g. MyProperty='ABC'
func (o ActionOutput) SqlExpression() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Action) *string { return v.SqlExpression }).(pulumi.StringPtrOutput)
}

type ActionPtrOutput struct{ *pulumi.OutputState }

func (ActionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Action)(nil)).Elem()
}

func (o ActionPtrOutput) ToActionPtrOutput() ActionPtrOutput {
	return o
}

func (o ActionPtrOutput) ToActionPtrOutputWithContext(ctx context.Context) ActionPtrOutput {
	return o
}

func (o ActionPtrOutput) Elem() ActionOutput {
	return o.ApplyT(func(v *Action) Action { return *v }).(ActionOutput)
}

// This property is reserved for future use. An integer value showing the compatibility level, currently hard-coded to 20.
func (o ActionPtrOutput) CompatibilityLevel() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Action) *int {
		if v == nil {
			return nil
		}
		return v.CompatibilityLevel
	}).(pulumi.IntPtrOutput)
}

// Value that indicates whether the rule action requires preprocessing.
func (o ActionPtrOutput) RequiresPreprocessing() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Action) *bool {
		if v == nil {
			return nil
		}
		return v.RequiresPreprocessing
	}).(pulumi.BoolPtrOutput)
}

// SQL expression. e.g. MyProperty='ABC'
func (o ActionPtrOutput) SqlExpression() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Action) *string {
		if v == nil {
			return nil
		}
		return v.SqlExpression
	}).(pulumi.StringPtrOutput)
}

// Represents the filter actions which are allowed for the transformation of a message that have been matched by a filter expression.
type ActionResponse struct {
	// This property is reserved for future use. An integer value showing the compatibility level, currently hard-coded to 20.
	CompatibilityLevel *int `pulumi:"compatibilityLevel"`
	// Value that indicates whether the rule action requires preprocessing.
	RequiresPreprocessing *bool `pulumi:"requiresPreprocessing"`
	// SQL expression. e.g. MyProperty='ABC'
	SqlExpression *string `pulumi:"sqlExpression"`
}

// ActionResponseInput is an input type that accepts ActionResponseArgs and ActionResponseOutput values.
// You can construct a concrete instance of `ActionResponseInput` via:
//
//          ActionResponseArgs{...}
type ActionResponseInput interface {
	pulumi.Input

	ToActionResponseOutput() ActionResponseOutput
	ToActionResponseOutputWithContext(context.Context) ActionResponseOutput
}

// Represents the filter actions which are allowed for the transformation of a message that have been matched by a filter expression.
type ActionResponseArgs struct {
	// This property is reserved for future use. An integer value showing the compatibility level, currently hard-coded to 20.
	CompatibilityLevel pulumi.IntPtrInput `pulumi:"compatibilityLevel"`
	// Value that indicates whether the rule action requires preprocessing.
	RequiresPreprocessing pulumi.BoolPtrInput `pulumi:"requiresPreprocessing"`
	// SQL expression. e.g. MyProperty='ABC'
	SqlExpression pulumi.StringPtrInput `pulumi:"sqlExpression"`
}

func (ActionResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ActionResponse)(nil)).Elem()
}

func (i ActionResponseArgs) ToActionResponseOutput() ActionResponseOutput {
	return i.ToActionResponseOutputWithContext(context.Background())
}

func (i ActionResponseArgs) ToActionResponseOutputWithContext(ctx context.Context) ActionResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ActionResponseOutput)
}

func (i ActionResponseArgs) ToActionResponsePtrOutput() ActionResponsePtrOutput {
	return i.ToActionResponsePtrOutputWithContext(context.Background())
}

func (i ActionResponseArgs) ToActionResponsePtrOutputWithContext(ctx context.Context) ActionResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ActionResponseOutput).ToActionResponsePtrOutputWithContext(ctx)
}

// ActionResponsePtrInput is an input type that accepts ActionResponseArgs, ActionResponsePtr and ActionResponsePtrOutput values.
// You can construct a concrete instance of `ActionResponsePtrInput` via:
//
//          ActionResponseArgs{...}
//
//  or:
//
//          nil
type ActionResponsePtrInput interface {
	pulumi.Input

	ToActionResponsePtrOutput() ActionResponsePtrOutput
	ToActionResponsePtrOutputWithContext(context.Context) ActionResponsePtrOutput
}

type actionResponsePtrType ActionResponseArgs

func ActionResponsePtr(v *ActionResponseArgs) ActionResponsePtrInput {
	return (*actionResponsePtrType)(v)
}

func (*actionResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ActionResponse)(nil)).Elem()
}

func (i *actionResponsePtrType) ToActionResponsePtrOutput() ActionResponsePtrOutput {
	return i.ToActionResponsePtrOutputWithContext(context.Background())
}

func (i *actionResponsePtrType) ToActionResponsePtrOutputWithContext(ctx context.Context) ActionResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ActionResponsePtrOutput)
}

// Represents the filter actions which are allowed for the transformation of a message that have been matched by a filter expression.
type ActionResponseOutput struct{ *pulumi.OutputState }

func (ActionResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ActionResponse)(nil)).Elem()
}

func (o ActionResponseOutput) ToActionResponseOutput() ActionResponseOutput {
	return o
}

func (o ActionResponseOutput) ToActionResponseOutputWithContext(ctx context.Context) ActionResponseOutput {
	return o
}

func (o ActionResponseOutput) ToActionResponsePtrOutput() ActionResponsePtrOutput {
	return o.ToActionResponsePtrOutputWithContext(context.Background())
}

func (o ActionResponseOutput) ToActionResponsePtrOutputWithContext(ctx context.Context) ActionResponsePtrOutput {
	return o.ApplyT(func(v ActionResponse) *ActionResponse {
		return &v
	}).(ActionResponsePtrOutput)
}

// This property is reserved for future use. An integer value showing the compatibility level, currently hard-coded to 20.
func (o ActionResponseOutput) CompatibilityLevel() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ActionResponse) *int { return v.CompatibilityLevel }).(pulumi.IntPtrOutput)
}

// Value that indicates whether the rule action requires preprocessing.
func (o ActionResponseOutput) RequiresPreprocessing() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ActionResponse) *bool { return v.RequiresPreprocessing }).(pulumi.BoolPtrOutput)
}

// SQL expression. e.g. MyProperty='ABC'
func (o ActionResponseOutput) SqlExpression() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ActionResponse) *string { return v.SqlExpression }).(pulumi.StringPtrOutput)
}

type ActionResponsePtrOutput struct{ *pulumi.OutputState }

func (ActionResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ActionResponse)(nil)).Elem()
}

func (o ActionResponsePtrOutput) ToActionResponsePtrOutput() ActionResponsePtrOutput {
	return o
}

func (o ActionResponsePtrOutput) ToActionResponsePtrOutputWithContext(ctx context.Context) ActionResponsePtrOutput {
	return o
}

func (o ActionResponsePtrOutput) Elem() ActionResponseOutput {
	return o.ApplyT(func(v *ActionResponse) ActionResponse { return *v }).(ActionResponseOutput)
}

// This property is reserved for future use. An integer value showing the compatibility level, currently hard-coded to 20.
func (o ActionResponsePtrOutput) CompatibilityLevel() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ActionResponse) *int {
		if v == nil {
			return nil
		}
		return v.CompatibilityLevel
	}).(pulumi.IntPtrOutput)
}

// Value that indicates whether the rule action requires preprocessing.
func (o ActionResponsePtrOutput) RequiresPreprocessing() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ActionResponse) *bool {
		if v == nil {
			return nil
		}
		return v.RequiresPreprocessing
	}).(pulumi.BoolPtrOutput)
}

// SQL expression. e.g. MyProperty='ABC'
func (o ActionResponsePtrOutput) SqlExpression() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ActionResponse) *string {
		if v == nil {
			return nil
		}
		return v.SqlExpression
	}).(pulumi.StringPtrOutput)
}

// Properties required to the Create Or Update Alias(Disaster Recovery configurations)
type ArmDisasterRecoveryProperties struct {
	// Primary/Secondary eventhub namespace name, which is part of GEO DR pairing
	AlternateName *string `pulumi:"alternateName"`
	// ARM Id of the Primary/Secondary eventhub namespace name, which is part of GEO DR pairing
	PartnerNamespace *string `pulumi:"partnerNamespace"`
}

// ArmDisasterRecoveryPropertiesInput is an input type that accepts ArmDisasterRecoveryPropertiesArgs and ArmDisasterRecoveryPropertiesOutput values.
// You can construct a concrete instance of `ArmDisasterRecoveryPropertiesInput` via:
//
//          ArmDisasterRecoveryPropertiesArgs{...}
type ArmDisasterRecoveryPropertiesInput interface {
	pulumi.Input

	ToArmDisasterRecoveryPropertiesOutput() ArmDisasterRecoveryPropertiesOutput
	ToArmDisasterRecoveryPropertiesOutputWithContext(context.Context) ArmDisasterRecoveryPropertiesOutput
}

// Properties required to the Create Or Update Alias(Disaster Recovery configurations)
type ArmDisasterRecoveryPropertiesArgs struct {
	// Primary/Secondary eventhub namespace name, which is part of GEO DR pairing
	AlternateName pulumi.StringPtrInput `pulumi:"alternateName"`
	// ARM Id of the Primary/Secondary eventhub namespace name, which is part of GEO DR pairing
	PartnerNamespace pulumi.StringPtrInput `pulumi:"partnerNamespace"`
}

func (ArmDisasterRecoveryPropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ArmDisasterRecoveryProperties)(nil)).Elem()
}

func (i ArmDisasterRecoveryPropertiesArgs) ToArmDisasterRecoveryPropertiesOutput() ArmDisasterRecoveryPropertiesOutput {
	return i.ToArmDisasterRecoveryPropertiesOutputWithContext(context.Background())
}

func (i ArmDisasterRecoveryPropertiesArgs) ToArmDisasterRecoveryPropertiesOutputWithContext(ctx context.Context) ArmDisasterRecoveryPropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ArmDisasterRecoveryPropertiesOutput)
}

func (i ArmDisasterRecoveryPropertiesArgs) ToArmDisasterRecoveryPropertiesPtrOutput() ArmDisasterRecoveryPropertiesPtrOutput {
	return i.ToArmDisasterRecoveryPropertiesPtrOutputWithContext(context.Background())
}

func (i ArmDisasterRecoveryPropertiesArgs) ToArmDisasterRecoveryPropertiesPtrOutputWithContext(ctx context.Context) ArmDisasterRecoveryPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ArmDisasterRecoveryPropertiesOutput).ToArmDisasterRecoveryPropertiesPtrOutputWithContext(ctx)
}

// ArmDisasterRecoveryPropertiesPtrInput is an input type that accepts ArmDisasterRecoveryPropertiesArgs, ArmDisasterRecoveryPropertiesPtr and ArmDisasterRecoveryPropertiesPtrOutput values.
// You can construct a concrete instance of `ArmDisasterRecoveryPropertiesPtrInput` via:
//
//          ArmDisasterRecoveryPropertiesArgs{...}
//
//  or:
//
//          nil
type ArmDisasterRecoveryPropertiesPtrInput interface {
	pulumi.Input

	ToArmDisasterRecoveryPropertiesPtrOutput() ArmDisasterRecoveryPropertiesPtrOutput
	ToArmDisasterRecoveryPropertiesPtrOutputWithContext(context.Context) ArmDisasterRecoveryPropertiesPtrOutput
}

type armDisasterRecoveryPropertiesPtrType ArmDisasterRecoveryPropertiesArgs

func ArmDisasterRecoveryPropertiesPtr(v *ArmDisasterRecoveryPropertiesArgs) ArmDisasterRecoveryPropertiesPtrInput {
	return (*armDisasterRecoveryPropertiesPtrType)(v)
}

func (*armDisasterRecoveryPropertiesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ArmDisasterRecoveryProperties)(nil)).Elem()
}

func (i *armDisasterRecoveryPropertiesPtrType) ToArmDisasterRecoveryPropertiesPtrOutput() ArmDisasterRecoveryPropertiesPtrOutput {
	return i.ToArmDisasterRecoveryPropertiesPtrOutputWithContext(context.Background())
}

func (i *armDisasterRecoveryPropertiesPtrType) ToArmDisasterRecoveryPropertiesPtrOutputWithContext(ctx context.Context) ArmDisasterRecoveryPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ArmDisasterRecoveryPropertiesPtrOutput)
}

// Properties required to the Create Or Update Alias(Disaster Recovery configurations)
type ArmDisasterRecoveryPropertiesOutput struct{ *pulumi.OutputState }

func (ArmDisasterRecoveryPropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ArmDisasterRecoveryProperties)(nil)).Elem()
}

func (o ArmDisasterRecoveryPropertiesOutput) ToArmDisasterRecoveryPropertiesOutput() ArmDisasterRecoveryPropertiesOutput {
	return o
}

func (o ArmDisasterRecoveryPropertiesOutput) ToArmDisasterRecoveryPropertiesOutputWithContext(ctx context.Context) ArmDisasterRecoveryPropertiesOutput {
	return o
}

func (o ArmDisasterRecoveryPropertiesOutput) ToArmDisasterRecoveryPropertiesPtrOutput() ArmDisasterRecoveryPropertiesPtrOutput {
	return o.ToArmDisasterRecoveryPropertiesPtrOutputWithContext(context.Background())
}

func (o ArmDisasterRecoveryPropertiesOutput) ToArmDisasterRecoveryPropertiesPtrOutputWithContext(ctx context.Context) ArmDisasterRecoveryPropertiesPtrOutput {
	return o.ApplyT(func(v ArmDisasterRecoveryProperties) *ArmDisasterRecoveryProperties {
		return &v
	}).(ArmDisasterRecoveryPropertiesPtrOutput)
}

// Primary/Secondary eventhub namespace name, which is part of GEO DR pairing
func (o ArmDisasterRecoveryPropertiesOutput) AlternateName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ArmDisasterRecoveryProperties) *string { return v.AlternateName }).(pulumi.StringPtrOutput)
}

// ARM Id of the Primary/Secondary eventhub namespace name, which is part of GEO DR pairing
func (o ArmDisasterRecoveryPropertiesOutput) PartnerNamespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ArmDisasterRecoveryProperties) *string { return v.PartnerNamespace }).(pulumi.StringPtrOutput)
}

type ArmDisasterRecoveryPropertiesPtrOutput struct{ *pulumi.OutputState }

func (ArmDisasterRecoveryPropertiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ArmDisasterRecoveryProperties)(nil)).Elem()
}

func (o ArmDisasterRecoveryPropertiesPtrOutput) ToArmDisasterRecoveryPropertiesPtrOutput() ArmDisasterRecoveryPropertiesPtrOutput {
	return o
}

func (o ArmDisasterRecoveryPropertiesPtrOutput) ToArmDisasterRecoveryPropertiesPtrOutputWithContext(ctx context.Context) ArmDisasterRecoveryPropertiesPtrOutput {
	return o
}

func (o ArmDisasterRecoveryPropertiesPtrOutput) Elem() ArmDisasterRecoveryPropertiesOutput {
	return o.ApplyT(func(v *ArmDisasterRecoveryProperties) ArmDisasterRecoveryProperties { return *v }).(ArmDisasterRecoveryPropertiesOutput)
}

// Primary/Secondary eventhub namespace name, which is part of GEO DR pairing
func (o ArmDisasterRecoveryPropertiesPtrOutput) AlternateName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ArmDisasterRecoveryProperties) *string {
		if v == nil {
			return nil
		}
		return v.AlternateName
	}).(pulumi.StringPtrOutput)
}

// ARM Id of the Primary/Secondary eventhub namespace name, which is part of GEO DR pairing
func (o ArmDisasterRecoveryPropertiesPtrOutput) PartnerNamespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ArmDisasterRecoveryProperties) *string {
		if v == nil {
			return nil
		}
		return v.PartnerNamespace
	}).(pulumi.StringPtrOutput)
}

// Properties required to the Create Or Update Alias(Disaster Recovery configurations)
type ArmDisasterRecoveryResponseProperties struct {
	// Primary/Secondary eventhub namespace name, which is part of GEO DR pairing
	AlternateName *string `pulumi:"alternateName"`
	// ARM Id of the Primary/Secondary eventhub namespace name, which is part of GEO DR pairing
	PartnerNamespace *string `pulumi:"partnerNamespace"`
	// Number of entities pending to be replicated.
	PendingReplicationOperationsCount int `pulumi:"pendingReplicationOperationsCount"`
	// Provisioning state of the Alias(Disaster Recovery configuration) - possible values 'Accepted' or 'Succeeded' or 'Failed'
	ProvisioningState string `pulumi:"provisioningState"`
	// role of namespace in GEO DR - possible values 'Primary' or 'PrimaryNotReplicating' or 'Secondary'
	Role string `pulumi:"role"`
}

// ArmDisasterRecoveryResponsePropertiesInput is an input type that accepts ArmDisasterRecoveryResponsePropertiesArgs and ArmDisasterRecoveryResponsePropertiesOutput values.
// You can construct a concrete instance of `ArmDisasterRecoveryResponsePropertiesInput` via:
//
//          ArmDisasterRecoveryResponsePropertiesArgs{...}
type ArmDisasterRecoveryResponsePropertiesInput interface {
	pulumi.Input

	ToArmDisasterRecoveryResponsePropertiesOutput() ArmDisasterRecoveryResponsePropertiesOutput
	ToArmDisasterRecoveryResponsePropertiesOutputWithContext(context.Context) ArmDisasterRecoveryResponsePropertiesOutput
}

// Properties required to the Create Or Update Alias(Disaster Recovery configurations)
type ArmDisasterRecoveryResponsePropertiesArgs struct {
	// Primary/Secondary eventhub namespace name, which is part of GEO DR pairing
	AlternateName pulumi.StringPtrInput `pulumi:"alternateName"`
	// ARM Id of the Primary/Secondary eventhub namespace name, which is part of GEO DR pairing
	PartnerNamespace pulumi.StringPtrInput `pulumi:"partnerNamespace"`
	// Number of entities pending to be replicated.
	PendingReplicationOperationsCount pulumi.IntInput `pulumi:"pendingReplicationOperationsCount"`
	// Provisioning state of the Alias(Disaster Recovery configuration) - possible values 'Accepted' or 'Succeeded' or 'Failed'
	ProvisioningState pulumi.StringInput `pulumi:"provisioningState"`
	// role of namespace in GEO DR - possible values 'Primary' or 'PrimaryNotReplicating' or 'Secondary'
	Role pulumi.StringInput `pulumi:"role"`
}

func (ArmDisasterRecoveryResponsePropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ArmDisasterRecoveryResponseProperties)(nil)).Elem()
}

func (i ArmDisasterRecoveryResponsePropertiesArgs) ToArmDisasterRecoveryResponsePropertiesOutput() ArmDisasterRecoveryResponsePropertiesOutput {
	return i.ToArmDisasterRecoveryResponsePropertiesOutputWithContext(context.Background())
}

func (i ArmDisasterRecoveryResponsePropertiesArgs) ToArmDisasterRecoveryResponsePropertiesOutputWithContext(ctx context.Context) ArmDisasterRecoveryResponsePropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ArmDisasterRecoveryResponsePropertiesOutput)
}

func (i ArmDisasterRecoveryResponsePropertiesArgs) ToArmDisasterRecoveryResponsePropertiesPtrOutput() ArmDisasterRecoveryResponsePropertiesPtrOutput {
	return i.ToArmDisasterRecoveryResponsePropertiesPtrOutputWithContext(context.Background())
}

func (i ArmDisasterRecoveryResponsePropertiesArgs) ToArmDisasterRecoveryResponsePropertiesPtrOutputWithContext(ctx context.Context) ArmDisasterRecoveryResponsePropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ArmDisasterRecoveryResponsePropertiesOutput).ToArmDisasterRecoveryResponsePropertiesPtrOutputWithContext(ctx)
}

// ArmDisasterRecoveryResponsePropertiesPtrInput is an input type that accepts ArmDisasterRecoveryResponsePropertiesArgs, ArmDisasterRecoveryResponsePropertiesPtr and ArmDisasterRecoveryResponsePropertiesPtrOutput values.
// You can construct a concrete instance of `ArmDisasterRecoveryResponsePropertiesPtrInput` via:
//
//          ArmDisasterRecoveryResponsePropertiesArgs{...}
//
//  or:
//
//          nil
type ArmDisasterRecoveryResponsePropertiesPtrInput interface {
	pulumi.Input

	ToArmDisasterRecoveryResponsePropertiesPtrOutput() ArmDisasterRecoveryResponsePropertiesPtrOutput
	ToArmDisasterRecoveryResponsePropertiesPtrOutputWithContext(context.Context) ArmDisasterRecoveryResponsePropertiesPtrOutput
}

type armDisasterRecoveryResponsePropertiesPtrType ArmDisasterRecoveryResponsePropertiesArgs

func ArmDisasterRecoveryResponsePropertiesPtr(v *ArmDisasterRecoveryResponsePropertiesArgs) ArmDisasterRecoveryResponsePropertiesPtrInput {
	return (*armDisasterRecoveryResponsePropertiesPtrType)(v)
}

func (*armDisasterRecoveryResponsePropertiesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ArmDisasterRecoveryResponseProperties)(nil)).Elem()
}

func (i *armDisasterRecoveryResponsePropertiesPtrType) ToArmDisasterRecoveryResponsePropertiesPtrOutput() ArmDisasterRecoveryResponsePropertiesPtrOutput {
	return i.ToArmDisasterRecoveryResponsePropertiesPtrOutputWithContext(context.Background())
}

func (i *armDisasterRecoveryResponsePropertiesPtrType) ToArmDisasterRecoveryResponsePropertiesPtrOutputWithContext(ctx context.Context) ArmDisasterRecoveryResponsePropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ArmDisasterRecoveryResponsePropertiesPtrOutput)
}

// Properties required to the Create Or Update Alias(Disaster Recovery configurations)
type ArmDisasterRecoveryResponsePropertiesOutput struct{ *pulumi.OutputState }

func (ArmDisasterRecoveryResponsePropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ArmDisasterRecoveryResponseProperties)(nil)).Elem()
}

func (o ArmDisasterRecoveryResponsePropertiesOutput) ToArmDisasterRecoveryResponsePropertiesOutput() ArmDisasterRecoveryResponsePropertiesOutput {
	return o
}

func (o ArmDisasterRecoveryResponsePropertiesOutput) ToArmDisasterRecoveryResponsePropertiesOutputWithContext(ctx context.Context) ArmDisasterRecoveryResponsePropertiesOutput {
	return o
}

func (o ArmDisasterRecoveryResponsePropertiesOutput) ToArmDisasterRecoveryResponsePropertiesPtrOutput() ArmDisasterRecoveryResponsePropertiesPtrOutput {
	return o.ToArmDisasterRecoveryResponsePropertiesPtrOutputWithContext(context.Background())
}

func (o ArmDisasterRecoveryResponsePropertiesOutput) ToArmDisasterRecoveryResponsePropertiesPtrOutputWithContext(ctx context.Context) ArmDisasterRecoveryResponsePropertiesPtrOutput {
	return o.ApplyT(func(v ArmDisasterRecoveryResponseProperties) *ArmDisasterRecoveryResponseProperties {
		return &v
	}).(ArmDisasterRecoveryResponsePropertiesPtrOutput)
}

// Primary/Secondary eventhub namespace name, which is part of GEO DR pairing
func (o ArmDisasterRecoveryResponsePropertiesOutput) AlternateName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ArmDisasterRecoveryResponseProperties) *string { return v.AlternateName }).(pulumi.StringPtrOutput)
}

// ARM Id of the Primary/Secondary eventhub namespace name, which is part of GEO DR pairing
func (o ArmDisasterRecoveryResponsePropertiesOutput) PartnerNamespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ArmDisasterRecoveryResponseProperties) *string { return v.PartnerNamespace }).(pulumi.StringPtrOutput)
}

// Number of entities pending to be replicated.
func (o ArmDisasterRecoveryResponsePropertiesOutput) PendingReplicationOperationsCount() pulumi.IntOutput {
	return o.ApplyT(func(v ArmDisasterRecoveryResponseProperties) int { return v.PendingReplicationOperationsCount }).(pulumi.IntOutput)
}

// Provisioning state of the Alias(Disaster Recovery configuration) - possible values 'Accepted' or 'Succeeded' or 'Failed'
func (o ArmDisasterRecoveryResponsePropertiesOutput) ProvisioningState() pulumi.StringOutput {
	return o.ApplyT(func(v ArmDisasterRecoveryResponseProperties) string { return v.ProvisioningState }).(pulumi.StringOutput)
}

// role of namespace in GEO DR - possible values 'Primary' or 'PrimaryNotReplicating' or 'Secondary'
func (o ArmDisasterRecoveryResponsePropertiesOutput) Role() pulumi.StringOutput {
	return o.ApplyT(func(v ArmDisasterRecoveryResponseProperties) string { return v.Role }).(pulumi.StringOutput)
}

type ArmDisasterRecoveryResponsePropertiesPtrOutput struct{ *pulumi.OutputState }

func (ArmDisasterRecoveryResponsePropertiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ArmDisasterRecoveryResponseProperties)(nil)).Elem()
}

func (o ArmDisasterRecoveryResponsePropertiesPtrOutput) ToArmDisasterRecoveryResponsePropertiesPtrOutput() ArmDisasterRecoveryResponsePropertiesPtrOutput {
	return o
}

func (o ArmDisasterRecoveryResponsePropertiesPtrOutput) ToArmDisasterRecoveryResponsePropertiesPtrOutputWithContext(ctx context.Context) ArmDisasterRecoveryResponsePropertiesPtrOutput {
	return o
}

func (o ArmDisasterRecoveryResponsePropertiesPtrOutput) Elem() ArmDisasterRecoveryResponsePropertiesOutput {
	return o.ApplyT(func(v *ArmDisasterRecoveryResponseProperties) ArmDisasterRecoveryResponseProperties { return *v }).(ArmDisasterRecoveryResponsePropertiesOutput)
}

// Primary/Secondary eventhub namespace name, which is part of GEO DR pairing
func (o ArmDisasterRecoveryResponsePropertiesPtrOutput) AlternateName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ArmDisasterRecoveryResponseProperties) *string {
		if v == nil {
			return nil
		}
		return v.AlternateName
	}).(pulumi.StringPtrOutput)
}

// ARM Id of the Primary/Secondary eventhub namespace name, which is part of GEO DR pairing
func (o ArmDisasterRecoveryResponsePropertiesPtrOutput) PartnerNamespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ArmDisasterRecoveryResponseProperties) *string {
		if v == nil {
			return nil
		}
		return v.PartnerNamespace
	}).(pulumi.StringPtrOutput)
}

// Number of entities pending to be replicated.
func (o ArmDisasterRecoveryResponsePropertiesPtrOutput) PendingReplicationOperationsCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ArmDisasterRecoveryResponseProperties) *int {
		if v == nil {
			return nil
		}
		return &v.PendingReplicationOperationsCount
	}).(pulumi.IntPtrOutput)
}

// Provisioning state of the Alias(Disaster Recovery configuration) - possible values 'Accepted' or 'Succeeded' or 'Failed'
func (o ArmDisasterRecoveryResponsePropertiesPtrOutput) ProvisioningState() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ArmDisasterRecoveryResponseProperties) *string {
		if v == nil {
			return nil
		}
		return &v.ProvisioningState
	}).(pulumi.StringPtrOutput)
}

// role of namespace in GEO DR - possible values 'Primary' or 'PrimaryNotReplicating' or 'Secondary'
func (o ArmDisasterRecoveryResponsePropertiesPtrOutput) Role() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ArmDisasterRecoveryResponseProperties) *string {
		if v == nil {
			return nil
		}
		return &v.Role
	}).(pulumi.StringPtrOutput)
}

// Represents the correlation filter expression.
type CorrelationFilter struct {
	// Content type of the message.
	ContentType *string `pulumi:"contentType"`
	// Identifier of the correlation.
	CorrelationId *string `pulumi:"correlationId"`
	// Application specific label.
	Label *string `pulumi:"label"`
	// Identifier of the message.
	MessageId *string `pulumi:"messageId"`
	// dictionary object for custom filters
	Properties map[string]string `pulumi:"properties"`
	// Address of the queue to reply to.
	ReplyTo *string `pulumi:"replyTo"`
	// Session identifier to reply to.
	ReplyToSessionId *string `pulumi:"replyToSessionId"`
	// Value that indicates whether the rule action requires preprocessing.
	RequiresPreprocessing *bool `pulumi:"requiresPreprocessing"`
	// Session identifier.
	SessionId *string `pulumi:"sessionId"`
	// Address to send to.
	To *string `pulumi:"to"`
}

// CorrelationFilterInput is an input type that accepts CorrelationFilterArgs and CorrelationFilterOutput values.
// You can construct a concrete instance of `CorrelationFilterInput` via:
//
//          CorrelationFilterArgs{...}
type CorrelationFilterInput interface {
	pulumi.Input

	ToCorrelationFilterOutput() CorrelationFilterOutput
	ToCorrelationFilterOutputWithContext(context.Context) CorrelationFilterOutput
}

// Represents the correlation filter expression.
type CorrelationFilterArgs struct {
	// Content type of the message.
	ContentType pulumi.StringPtrInput `pulumi:"contentType"`
	// Identifier of the correlation.
	CorrelationId pulumi.StringPtrInput `pulumi:"correlationId"`
	// Application specific label.
	Label pulumi.StringPtrInput `pulumi:"label"`
	// Identifier of the message.
	MessageId pulumi.StringPtrInput `pulumi:"messageId"`
	// dictionary object for custom filters
	Properties pulumi.StringMapInput `pulumi:"properties"`
	// Address of the queue to reply to.
	ReplyTo pulumi.StringPtrInput `pulumi:"replyTo"`
	// Session identifier to reply to.
	ReplyToSessionId pulumi.StringPtrInput `pulumi:"replyToSessionId"`
	// Value that indicates whether the rule action requires preprocessing.
	RequiresPreprocessing pulumi.BoolPtrInput `pulumi:"requiresPreprocessing"`
	// Session identifier.
	SessionId pulumi.StringPtrInput `pulumi:"sessionId"`
	// Address to send to.
	To pulumi.StringPtrInput `pulumi:"to"`
}

func (CorrelationFilterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CorrelationFilter)(nil)).Elem()
}

func (i CorrelationFilterArgs) ToCorrelationFilterOutput() CorrelationFilterOutput {
	return i.ToCorrelationFilterOutputWithContext(context.Background())
}

func (i CorrelationFilterArgs) ToCorrelationFilterOutputWithContext(ctx context.Context) CorrelationFilterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CorrelationFilterOutput)
}

func (i CorrelationFilterArgs) ToCorrelationFilterPtrOutput() CorrelationFilterPtrOutput {
	return i.ToCorrelationFilterPtrOutputWithContext(context.Background())
}

func (i CorrelationFilterArgs) ToCorrelationFilterPtrOutputWithContext(ctx context.Context) CorrelationFilterPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CorrelationFilterOutput).ToCorrelationFilterPtrOutputWithContext(ctx)
}

// CorrelationFilterPtrInput is an input type that accepts CorrelationFilterArgs, CorrelationFilterPtr and CorrelationFilterPtrOutput values.
// You can construct a concrete instance of `CorrelationFilterPtrInput` via:
//
//          CorrelationFilterArgs{...}
//
//  or:
//
//          nil
type CorrelationFilterPtrInput interface {
	pulumi.Input

	ToCorrelationFilterPtrOutput() CorrelationFilterPtrOutput
	ToCorrelationFilterPtrOutputWithContext(context.Context) CorrelationFilterPtrOutput
}

type correlationFilterPtrType CorrelationFilterArgs

func CorrelationFilterPtr(v *CorrelationFilterArgs) CorrelationFilterPtrInput {
	return (*correlationFilterPtrType)(v)
}

func (*correlationFilterPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CorrelationFilter)(nil)).Elem()
}

func (i *correlationFilterPtrType) ToCorrelationFilterPtrOutput() CorrelationFilterPtrOutput {
	return i.ToCorrelationFilterPtrOutputWithContext(context.Background())
}

func (i *correlationFilterPtrType) ToCorrelationFilterPtrOutputWithContext(ctx context.Context) CorrelationFilterPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CorrelationFilterPtrOutput)
}

// Represents the correlation filter expression.
type CorrelationFilterOutput struct{ *pulumi.OutputState }

func (CorrelationFilterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CorrelationFilter)(nil)).Elem()
}

func (o CorrelationFilterOutput) ToCorrelationFilterOutput() CorrelationFilterOutput {
	return o
}

func (o CorrelationFilterOutput) ToCorrelationFilterOutputWithContext(ctx context.Context) CorrelationFilterOutput {
	return o
}

func (o CorrelationFilterOutput) ToCorrelationFilterPtrOutput() CorrelationFilterPtrOutput {
	return o.ToCorrelationFilterPtrOutputWithContext(context.Background())
}

func (o CorrelationFilterOutput) ToCorrelationFilterPtrOutputWithContext(ctx context.Context) CorrelationFilterPtrOutput {
	return o.ApplyT(func(v CorrelationFilter) *CorrelationFilter {
		return &v
	}).(CorrelationFilterPtrOutput)
}

// Content type of the message.
func (o CorrelationFilterOutput) ContentType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CorrelationFilter) *string { return v.ContentType }).(pulumi.StringPtrOutput)
}

// Identifier of the correlation.
func (o CorrelationFilterOutput) CorrelationId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CorrelationFilter) *string { return v.CorrelationId }).(pulumi.StringPtrOutput)
}

// Application specific label.
func (o CorrelationFilterOutput) Label() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CorrelationFilter) *string { return v.Label }).(pulumi.StringPtrOutput)
}

// Identifier of the message.
func (o CorrelationFilterOutput) MessageId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CorrelationFilter) *string { return v.MessageId }).(pulumi.StringPtrOutput)
}

// dictionary object for custom filters
func (o CorrelationFilterOutput) Properties() pulumi.StringMapOutput {
	return o.ApplyT(func(v CorrelationFilter) map[string]string { return v.Properties }).(pulumi.StringMapOutput)
}

// Address of the queue to reply to.
func (o CorrelationFilterOutput) ReplyTo() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CorrelationFilter) *string { return v.ReplyTo }).(pulumi.StringPtrOutput)
}

// Session identifier to reply to.
func (o CorrelationFilterOutput) ReplyToSessionId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CorrelationFilter) *string { return v.ReplyToSessionId }).(pulumi.StringPtrOutput)
}

// Value that indicates whether the rule action requires preprocessing.
func (o CorrelationFilterOutput) RequiresPreprocessing() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v CorrelationFilter) *bool { return v.RequiresPreprocessing }).(pulumi.BoolPtrOutput)
}

// Session identifier.
func (o CorrelationFilterOutput) SessionId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CorrelationFilter) *string { return v.SessionId }).(pulumi.StringPtrOutput)
}

// Address to send to.
func (o CorrelationFilterOutput) To() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CorrelationFilter) *string { return v.To }).(pulumi.StringPtrOutput)
}

type CorrelationFilterPtrOutput struct{ *pulumi.OutputState }

func (CorrelationFilterPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CorrelationFilter)(nil)).Elem()
}

func (o CorrelationFilterPtrOutput) ToCorrelationFilterPtrOutput() CorrelationFilterPtrOutput {
	return o
}

func (o CorrelationFilterPtrOutput) ToCorrelationFilterPtrOutputWithContext(ctx context.Context) CorrelationFilterPtrOutput {
	return o
}

func (o CorrelationFilterPtrOutput) Elem() CorrelationFilterOutput {
	return o.ApplyT(func(v *CorrelationFilter) CorrelationFilter { return *v }).(CorrelationFilterOutput)
}

// Content type of the message.
func (o CorrelationFilterPtrOutput) ContentType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CorrelationFilter) *string {
		if v == nil {
			return nil
		}
		return v.ContentType
	}).(pulumi.StringPtrOutput)
}

// Identifier of the correlation.
func (o CorrelationFilterPtrOutput) CorrelationId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CorrelationFilter) *string {
		if v == nil {
			return nil
		}
		return v.CorrelationId
	}).(pulumi.StringPtrOutput)
}

// Application specific label.
func (o CorrelationFilterPtrOutput) Label() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CorrelationFilter) *string {
		if v == nil {
			return nil
		}
		return v.Label
	}).(pulumi.StringPtrOutput)
}

// Identifier of the message.
func (o CorrelationFilterPtrOutput) MessageId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CorrelationFilter) *string {
		if v == nil {
			return nil
		}
		return v.MessageId
	}).(pulumi.StringPtrOutput)
}

// dictionary object for custom filters
func (o CorrelationFilterPtrOutput) Properties() pulumi.StringMapOutput {
	return o.ApplyT(func(v *CorrelationFilter) map[string]string {
		if v == nil {
			return nil
		}
		return v.Properties
	}).(pulumi.StringMapOutput)
}

// Address of the queue to reply to.
func (o CorrelationFilterPtrOutput) ReplyTo() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CorrelationFilter) *string {
		if v == nil {
			return nil
		}
		return v.ReplyTo
	}).(pulumi.StringPtrOutput)
}

// Session identifier to reply to.
func (o CorrelationFilterPtrOutput) ReplyToSessionId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CorrelationFilter) *string {
		if v == nil {
			return nil
		}
		return v.ReplyToSessionId
	}).(pulumi.StringPtrOutput)
}

// Value that indicates whether the rule action requires preprocessing.
func (o CorrelationFilterPtrOutput) RequiresPreprocessing() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *CorrelationFilter) *bool {
		if v == nil {
			return nil
		}
		return v.RequiresPreprocessing
	}).(pulumi.BoolPtrOutput)
}

// Session identifier.
func (o CorrelationFilterPtrOutput) SessionId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CorrelationFilter) *string {
		if v == nil {
			return nil
		}
		return v.SessionId
	}).(pulumi.StringPtrOutput)
}

// Address to send to.
func (o CorrelationFilterPtrOutput) To() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CorrelationFilter) *string {
		if v == nil {
			return nil
		}
		return v.To
	}).(pulumi.StringPtrOutput)
}

// Represents the correlation filter expression.
type CorrelationFilterResponse struct {
	// Content type of the message.
	ContentType *string `pulumi:"contentType"`
	// Identifier of the correlation.
	CorrelationId *string `pulumi:"correlationId"`
	// Application specific label.
	Label *string `pulumi:"label"`
	// Identifier of the message.
	MessageId *string `pulumi:"messageId"`
	// dictionary object for custom filters
	Properties map[string]string `pulumi:"properties"`
	// Address of the queue to reply to.
	ReplyTo *string `pulumi:"replyTo"`
	// Session identifier to reply to.
	ReplyToSessionId *string `pulumi:"replyToSessionId"`
	// Value that indicates whether the rule action requires preprocessing.
	RequiresPreprocessing *bool `pulumi:"requiresPreprocessing"`
	// Session identifier.
	SessionId *string `pulumi:"sessionId"`
	// Address to send to.
	To *string `pulumi:"to"`
}

// CorrelationFilterResponseInput is an input type that accepts CorrelationFilterResponseArgs and CorrelationFilterResponseOutput values.
// You can construct a concrete instance of `CorrelationFilterResponseInput` via:
//
//          CorrelationFilterResponseArgs{...}
type CorrelationFilterResponseInput interface {
	pulumi.Input

	ToCorrelationFilterResponseOutput() CorrelationFilterResponseOutput
	ToCorrelationFilterResponseOutputWithContext(context.Context) CorrelationFilterResponseOutput
}

// Represents the correlation filter expression.
type CorrelationFilterResponseArgs struct {
	// Content type of the message.
	ContentType pulumi.StringPtrInput `pulumi:"contentType"`
	// Identifier of the correlation.
	CorrelationId pulumi.StringPtrInput `pulumi:"correlationId"`
	// Application specific label.
	Label pulumi.StringPtrInput `pulumi:"label"`
	// Identifier of the message.
	MessageId pulumi.StringPtrInput `pulumi:"messageId"`
	// dictionary object for custom filters
	Properties pulumi.StringMapInput `pulumi:"properties"`
	// Address of the queue to reply to.
	ReplyTo pulumi.StringPtrInput `pulumi:"replyTo"`
	// Session identifier to reply to.
	ReplyToSessionId pulumi.StringPtrInput `pulumi:"replyToSessionId"`
	// Value that indicates whether the rule action requires preprocessing.
	RequiresPreprocessing pulumi.BoolPtrInput `pulumi:"requiresPreprocessing"`
	// Session identifier.
	SessionId pulumi.StringPtrInput `pulumi:"sessionId"`
	// Address to send to.
	To pulumi.StringPtrInput `pulumi:"to"`
}

func (CorrelationFilterResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CorrelationFilterResponse)(nil)).Elem()
}

func (i CorrelationFilterResponseArgs) ToCorrelationFilterResponseOutput() CorrelationFilterResponseOutput {
	return i.ToCorrelationFilterResponseOutputWithContext(context.Background())
}

func (i CorrelationFilterResponseArgs) ToCorrelationFilterResponseOutputWithContext(ctx context.Context) CorrelationFilterResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CorrelationFilterResponseOutput)
}

func (i CorrelationFilterResponseArgs) ToCorrelationFilterResponsePtrOutput() CorrelationFilterResponsePtrOutput {
	return i.ToCorrelationFilterResponsePtrOutputWithContext(context.Background())
}

func (i CorrelationFilterResponseArgs) ToCorrelationFilterResponsePtrOutputWithContext(ctx context.Context) CorrelationFilterResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CorrelationFilterResponseOutput).ToCorrelationFilterResponsePtrOutputWithContext(ctx)
}

// CorrelationFilterResponsePtrInput is an input type that accepts CorrelationFilterResponseArgs, CorrelationFilterResponsePtr and CorrelationFilterResponsePtrOutput values.
// You can construct a concrete instance of `CorrelationFilterResponsePtrInput` via:
//
//          CorrelationFilterResponseArgs{...}
//
//  or:
//
//          nil
type CorrelationFilterResponsePtrInput interface {
	pulumi.Input

	ToCorrelationFilterResponsePtrOutput() CorrelationFilterResponsePtrOutput
	ToCorrelationFilterResponsePtrOutputWithContext(context.Context) CorrelationFilterResponsePtrOutput
}

type correlationFilterResponsePtrType CorrelationFilterResponseArgs

func CorrelationFilterResponsePtr(v *CorrelationFilterResponseArgs) CorrelationFilterResponsePtrInput {
	return (*correlationFilterResponsePtrType)(v)
}

func (*correlationFilterResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CorrelationFilterResponse)(nil)).Elem()
}

func (i *correlationFilterResponsePtrType) ToCorrelationFilterResponsePtrOutput() CorrelationFilterResponsePtrOutput {
	return i.ToCorrelationFilterResponsePtrOutputWithContext(context.Background())
}

func (i *correlationFilterResponsePtrType) ToCorrelationFilterResponsePtrOutputWithContext(ctx context.Context) CorrelationFilterResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CorrelationFilterResponsePtrOutput)
}

// Represents the correlation filter expression.
type CorrelationFilterResponseOutput struct{ *pulumi.OutputState }

func (CorrelationFilterResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CorrelationFilterResponse)(nil)).Elem()
}

func (o CorrelationFilterResponseOutput) ToCorrelationFilterResponseOutput() CorrelationFilterResponseOutput {
	return o
}

func (o CorrelationFilterResponseOutput) ToCorrelationFilterResponseOutputWithContext(ctx context.Context) CorrelationFilterResponseOutput {
	return o
}

func (o CorrelationFilterResponseOutput) ToCorrelationFilterResponsePtrOutput() CorrelationFilterResponsePtrOutput {
	return o.ToCorrelationFilterResponsePtrOutputWithContext(context.Background())
}

func (o CorrelationFilterResponseOutput) ToCorrelationFilterResponsePtrOutputWithContext(ctx context.Context) CorrelationFilterResponsePtrOutput {
	return o.ApplyT(func(v CorrelationFilterResponse) *CorrelationFilterResponse {
		return &v
	}).(CorrelationFilterResponsePtrOutput)
}

// Content type of the message.
func (o CorrelationFilterResponseOutput) ContentType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CorrelationFilterResponse) *string { return v.ContentType }).(pulumi.StringPtrOutput)
}

// Identifier of the correlation.
func (o CorrelationFilterResponseOutput) CorrelationId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CorrelationFilterResponse) *string { return v.CorrelationId }).(pulumi.StringPtrOutput)
}

// Application specific label.
func (o CorrelationFilterResponseOutput) Label() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CorrelationFilterResponse) *string { return v.Label }).(pulumi.StringPtrOutput)
}

// Identifier of the message.
func (o CorrelationFilterResponseOutput) MessageId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CorrelationFilterResponse) *string { return v.MessageId }).(pulumi.StringPtrOutput)
}

// dictionary object for custom filters
func (o CorrelationFilterResponseOutput) Properties() pulumi.StringMapOutput {
	return o.ApplyT(func(v CorrelationFilterResponse) map[string]string { return v.Properties }).(pulumi.StringMapOutput)
}

// Address of the queue to reply to.
func (o CorrelationFilterResponseOutput) ReplyTo() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CorrelationFilterResponse) *string { return v.ReplyTo }).(pulumi.StringPtrOutput)
}

// Session identifier to reply to.
func (o CorrelationFilterResponseOutput) ReplyToSessionId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CorrelationFilterResponse) *string { return v.ReplyToSessionId }).(pulumi.StringPtrOutput)
}

// Value that indicates whether the rule action requires preprocessing.
func (o CorrelationFilterResponseOutput) RequiresPreprocessing() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v CorrelationFilterResponse) *bool { return v.RequiresPreprocessing }).(pulumi.BoolPtrOutput)
}

// Session identifier.
func (o CorrelationFilterResponseOutput) SessionId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CorrelationFilterResponse) *string { return v.SessionId }).(pulumi.StringPtrOutput)
}

// Address to send to.
func (o CorrelationFilterResponseOutput) To() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CorrelationFilterResponse) *string { return v.To }).(pulumi.StringPtrOutput)
}

type CorrelationFilterResponsePtrOutput struct{ *pulumi.OutputState }

func (CorrelationFilterResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CorrelationFilterResponse)(nil)).Elem()
}

func (o CorrelationFilterResponsePtrOutput) ToCorrelationFilterResponsePtrOutput() CorrelationFilterResponsePtrOutput {
	return o
}

func (o CorrelationFilterResponsePtrOutput) ToCorrelationFilterResponsePtrOutputWithContext(ctx context.Context) CorrelationFilterResponsePtrOutput {
	return o
}

func (o CorrelationFilterResponsePtrOutput) Elem() CorrelationFilterResponseOutput {
	return o.ApplyT(func(v *CorrelationFilterResponse) CorrelationFilterResponse { return *v }).(CorrelationFilterResponseOutput)
}

// Content type of the message.
func (o CorrelationFilterResponsePtrOutput) ContentType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CorrelationFilterResponse) *string {
		if v == nil {
			return nil
		}
		return v.ContentType
	}).(pulumi.StringPtrOutput)
}

// Identifier of the correlation.
func (o CorrelationFilterResponsePtrOutput) CorrelationId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CorrelationFilterResponse) *string {
		if v == nil {
			return nil
		}
		return v.CorrelationId
	}).(pulumi.StringPtrOutput)
}

// Application specific label.
func (o CorrelationFilterResponsePtrOutput) Label() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CorrelationFilterResponse) *string {
		if v == nil {
			return nil
		}
		return v.Label
	}).(pulumi.StringPtrOutput)
}

// Identifier of the message.
func (o CorrelationFilterResponsePtrOutput) MessageId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CorrelationFilterResponse) *string {
		if v == nil {
			return nil
		}
		return v.MessageId
	}).(pulumi.StringPtrOutput)
}

// dictionary object for custom filters
func (o CorrelationFilterResponsePtrOutput) Properties() pulumi.StringMapOutput {
	return o.ApplyT(func(v *CorrelationFilterResponse) map[string]string {
		if v == nil {
			return nil
		}
		return v.Properties
	}).(pulumi.StringMapOutput)
}

// Address of the queue to reply to.
func (o CorrelationFilterResponsePtrOutput) ReplyTo() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CorrelationFilterResponse) *string {
		if v == nil {
			return nil
		}
		return v.ReplyTo
	}).(pulumi.StringPtrOutput)
}

// Session identifier to reply to.
func (o CorrelationFilterResponsePtrOutput) ReplyToSessionId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CorrelationFilterResponse) *string {
		if v == nil {
			return nil
		}
		return v.ReplyToSessionId
	}).(pulumi.StringPtrOutput)
}

// Value that indicates whether the rule action requires preprocessing.
func (o CorrelationFilterResponsePtrOutput) RequiresPreprocessing() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *CorrelationFilterResponse) *bool {
		if v == nil {
			return nil
		}
		return v.RequiresPreprocessing
	}).(pulumi.BoolPtrOutput)
}

// Session identifier.
func (o CorrelationFilterResponsePtrOutput) SessionId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CorrelationFilterResponse) *string {
		if v == nil {
			return nil
		}
		return v.SessionId
	}).(pulumi.StringPtrOutput)
}

// Address to send to.
func (o CorrelationFilterResponsePtrOutput) To() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CorrelationFilterResponse) *string {
		if v == nil {
			return nil
		}
		return v.To
	}).(pulumi.StringPtrOutput)
}

// Single item in List or Get Alias(Disaster Recovery configuration) operation
type DisasterRecoveryConfigType struct {
	// Resource name
	Name string `pulumi:"name"`
	// Properties required to the Create Or Update Alias(Disaster Recovery configurations)
	Properties ArmDisasterRecoveryResponseProperties `pulumi:"properties"`
	// Resource type
	Type string `pulumi:"type"`
}

// DisasterRecoveryConfigTypeInput is an input type that accepts DisasterRecoveryConfigTypeArgs and DisasterRecoveryConfigTypeOutput values.
// You can construct a concrete instance of `DisasterRecoveryConfigTypeInput` via:
//
//          DisasterRecoveryConfigTypeArgs{...}
type DisasterRecoveryConfigTypeInput interface {
	pulumi.Input

	ToDisasterRecoveryConfigTypeOutput() DisasterRecoveryConfigTypeOutput
	ToDisasterRecoveryConfigTypeOutputWithContext(context.Context) DisasterRecoveryConfigTypeOutput
}

// Single item in List or Get Alias(Disaster Recovery configuration) operation
type DisasterRecoveryConfigTypeArgs struct {
	// Resource name
	Name pulumi.StringInput `pulumi:"name"`
	// Properties required to the Create Or Update Alias(Disaster Recovery configurations)
	Properties ArmDisasterRecoveryResponsePropertiesInput `pulumi:"properties"`
	// Resource type
	Type pulumi.StringInput `pulumi:"type"`
}

func (DisasterRecoveryConfigTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DisasterRecoveryConfigType)(nil)).Elem()
}

func (i DisasterRecoveryConfigTypeArgs) ToDisasterRecoveryConfigTypeOutput() DisasterRecoveryConfigTypeOutput {
	return i.ToDisasterRecoveryConfigTypeOutputWithContext(context.Background())
}

func (i DisasterRecoveryConfigTypeArgs) ToDisasterRecoveryConfigTypeOutputWithContext(ctx context.Context) DisasterRecoveryConfigTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DisasterRecoveryConfigTypeOutput)
}

// Single item in List or Get Alias(Disaster Recovery configuration) operation
type DisasterRecoveryConfigTypeOutput struct{ *pulumi.OutputState }

func (DisasterRecoveryConfigTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DisasterRecoveryConfigType)(nil)).Elem()
}

func (o DisasterRecoveryConfigTypeOutput) ToDisasterRecoveryConfigTypeOutput() DisasterRecoveryConfigTypeOutput {
	return o
}

func (o DisasterRecoveryConfigTypeOutput) ToDisasterRecoveryConfigTypeOutputWithContext(ctx context.Context) DisasterRecoveryConfigTypeOutput {
	return o
}

// Resource name
func (o DisasterRecoveryConfigTypeOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v DisasterRecoveryConfigType) string { return v.Name }).(pulumi.StringOutput)
}

// Properties required to the Create Or Update Alias(Disaster Recovery configurations)
func (o DisasterRecoveryConfigTypeOutput) Properties() ArmDisasterRecoveryResponsePropertiesOutput {
	return o.ApplyT(func(v DisasterRecoveryConfigType) ArmDisasterRecoveryResponseProperties { return v.Properties }).(ArmDisasterRecoveryResponsePropertiesOutput)
}

// Resource type
func (o DisasterRecoveryConfigTypeOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v DisasterRecoveryConfigType) string { return v.Type }).(pulumi.StringOutput)
}

// Message Count Details.
type MessageCountDetails struct {
}

// MessageCountDetailsInput is an input type that accepts MessageCountDetailsArgs and MessageCountDetailsOutput values.
// You can construct a concrete instance of `MessageCountDetailsInput` via:
//
//          MessageCountDetailsArgs{...}
type MessageCountDetailsInput interface {
	pulumi.Input

	ToMessageCountDetailsOutput() MessageCountDetailsOutput
	ToMessageCountDetailsOutputWithContext(context.Context) MessageCountDetailsOutput
}

// Message Count Details.
type MessageCountDetailsArgs struct {
}

func (MessageCountDetailsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MessageCountDetails)(nil)).Elem()
}

func (i MessageCountDetailsArgs) ToMessageCountDetailsOutput() MessageCountDetailsOutput {
	return i.ToMessageCountDetailsOutputWithContext(context.Background())
}

func (i MessageCountDetailsArgs) ToMessageCountDetailsOutputWithContext(ctx context.Context) MessageCountDetailsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MessageCountDetailsOutput)
}

// Message Count Details.
type MessageCountDetailsOutput struct{ *pulumi.OutputState }

func (MessageCountDetailsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MessageCountDetails)(nil)).Elem()
}

func (o MessageCountDetailsOutput) ToMessageCountDetailsOutput() MessageCountDetailsOutput {
	return o
}

func (o MessageCountDetailsOutput) ToMessageCountDetailsOutputWithContext(ctx context.Context) MessageCountDetailsOutput {
	return o
}

// Message Count Details.
type MessageCountDetailsResponse struct {
	// Number of active messages in the queue, topic, or subscription.
	ActiveMessageCount int `pulumi:"activeMessageCount"`
	// Number of messages that are dead lettered.
	DeadLetterMessageCount int `pulumi:"deadLetterMessageCount"`
	// Number of scheduled messages.
	ScheduledMessageCount int `pulumi:"scheduledMessageCount"`
	// Number of messages transferred into dead letters.
	TransferDeadLetterMessageCount int `pulumi:"transferDeadLetterMessageCount"`
	// Number of messages transferred to another queue, topic, or subscription.
	TransferMessageCount int `pulumi:"transferMessageCount"`
}

// MessageCountDetailsResponseInput is an input type that accepts MessageCountDetailsResponseArgs and MessageCountDetailsResponseOutput values.
// You can construct a concrete instance of `MessageCountDetailsResponseInput` via:
//
//          MessageCountDetailsResponseArgs{...}
type MessageCountDetailsResponseInput interface {
	pulumi.Input

	ToMessageCountDetailsResponseOutput() MessageCountDetailsResponseOutput
	ToMessageCountDetailsResponseOutputWithContext(context.Context) MessageCountDetailsResponseOutput
}

// Message Count Details.
type MessageCountDetailsResponseArgs struct {
	// Number of active messages in the queue, topic, or subscription.
	ActiveMessageCount pulumi.IntInput `pulumi:"activeMessageCount"`
	// Number of messages that are dead lettered.
	DeadLetterMessageCount pulumi.IntInput `pulumi:"deadLetterMessageCount"`
	// Number of scheduled messages.
	ScheduledMessageCount pulumi.IntInput `pulumi:"scheduledMessageCount"`
	// Number of messages transferred into dead letters.
	TransferDeadLetterMessageCount pulumi.IntInput `pulumi:"transferDeadLetterMessageCount"`
	// Number of messages transferred to another queue, topic, or subscription.
	TransferMessageCount pulumi.IntInput `pulumi:"transferMessageCount"`
}

func (MessageCountDetailsResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MessageCountDetailsResponse)(nil)).Elem()
}

func (i MessageCountDetailsResponseArgs) ToMessageCountDetailsResponseOutput() MessageCountDetailsResponseOutput {
	return i.ToMessageCountDetailsResponseOutputWithContext(context.Background())
}

func (i MessageCountDetailsResponseArgs) ToMessageCountDetailsResponseOutputWithContext(ctx context.Context) MessageCountDetailsResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MessageCountDetailsResponseOutput)
}

func (i MessageCountDetailsResponseArgs) ToMessageCountDetailsResponsePtrOutput() MessageCountDetailsResponsePtrOutput {
	return i.ToMessageCountDetailsResponsePtrOutputWithContext(context.Background())
}

func (i MessageCountDetailsResponseArgs) ToMessageCountDetailsResponsePtrOutputWithContext(ctx context.Context) MessageCountDetailsResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MessageCountDetailsResponseOutput).ToMessageCountDetailsResponsePtrOutputWithContext(ctx)
}

// MessageCountDetailsResponsePtrInput is an input type that accepts MessageCountDetailsResponseArgs, MessageCountDetailsResponsePtr and MessageCountDetailsResponsePtrOutput values.
// You can construct a concrete instance of `MessageCountDetailsResponsePtrInput` via:
//
//          MessageCountDetailsResponseArgs{...}
//
//  or:
//
//          nil
type MessageCountDetailsResponsePtrInput interface {
	pulumi.Input

	ToMessageCountDetailsResponsePtrOutput() MessageCountDetailsResponsePtrOutput
	ToMessageCountDetailsResponsePtrOutputWithContext(context.Context) MessageCountDetailsResponsePtrOutput
}

type messageCountDetailsResponsePtrType MessageCountDetailsResponseArgs

func MessageCountDetailsResponsePtr(v *MessageCountDetailsResponseArgs) MessageCountDetailsResponsePtrInput {
	return (*messageCountDetailsResponsePtrType)(v)
}

func (*messageCountDetailsResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**MessageCountDetailsResponse)(nil)).Elem()
}

func (i *messageCountDetailsResponsePtrType) ToMessageCountDetailsResponsePtrOutput() MessageCountDetailsResponsePtrOutput {
	return i.ToMessageCountDetailsResponsePtrOutputWithContext(context.Background())
}

func (i *messageCountDetailsResponsePtrType) ToMessageCountDetailsResponsePtrOutputWithContext(ctx context.Context) MessageCountDetailsResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MessageCountDetailsResponsePtrOutput)
}

// Message Count Details.
type MessageCountDetailsResponseOutput struct{ *pulumi.OutputState }

func (MessageCountDetailsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MessageCountDetailsResponse)(nil)).Elem()
}

func (o MessageCountDetailsResponseOutput) ToMessageCountDetailsResponseOutput() MessageCountDetailsResponseOutput {
	return o
}

func (o MessageCountDetailsResponseOutput) ToMessageCountDetailsResponseOutputWithContext(ctx context.Context) MessageCountDetailsResponseOutput {
	return o
}

func (o MessageCountDetailsResponseOutput) ToMessageCountDetailsResponsePtrOutput() MessageCountDetailsResponsePtrOutput {
	return o.ToMessageCountDetailsResponsePtrOutputWithContext(context.Background())
}

func (o MessageCountDetailsResponseOutput) ToMessageCountDetailsResponsePtrOutputWithContext(ctx context.Context) MessageCountDetailsResponsePtrOutput {
	return o.ApplyT(func(v MessageCountDetailsResponse) *MessageCountDetailsResponse {
		return &v
	}).(MessageCountDetailsResponsePtrOutput)
}

// Number of active messages in the queue, topic, or subscription.
func (o MessageCountDetailsResponseOutput) ActiveMessageCount() pulumi.IntOutput {
	return o.ApplyT(func(v MessageCountDetailsResponse) int { return v.ActiveMessageCount }).(pulumi.IntOutput)
}

// Number of messages that are dead lettered.
func (o MessageCountDetailsResponseOutput) DeadLetterMessageCount() pulumi.IntOutput {
	return o.ApplyT(func(v MessageCountDetailsResponse) int { return v.DeadLetterMessageCount }).(pulumi.IntOutput)
}

// Number of scheduled messages.
func (o MessageCountDetailsResponseOutput) ScheduledMessageCount() pulumi.IntOutput {
	return o.ApplyT(func(v MessageCountDetailsResponse) int { return v.ScheduledMessageCount }).(pulumi.IntOutput)
}

// Number of messages transferred into dead letters.
func (o MessageCountDetailsResponseOutput) TransferDeadLetterMessageCount() pulumi.IntOutput {
	return o.ApplyT(func(v MessageCountDetailsResponse) int { return v.TransferDeadLetterMessageCount }).(pulumi.IntOutput)
}

// Number of messages transferred to another queue, topic, or subscription.
func (o MessageCountDetailsResponseOutput) TransferMessageCount() pulumi.IntOutput {
	return o.ApplyT(func(v MessageCountDetailsResponse) int { return v.TransferMessageCount }).(pulumi.IntOutput)
}

type MessageCountDetailsResponsePtrOutput struct{ *pulumi.OutputState }

func (MessageCountDetailsResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MessageCountDetailsResponse)(nil)).Elem()
}

func (o MessageCountDetailsResponsePtrOutput) ToMessageCountDetailsResponsePtrOutput() MessageCountDetailsResponsePtrOutput {
	return o
}

func (o MessageCountDetailsResponsePtrOutput) ToMessageCountDetailsResponsePtrOutputWithContext(ctx context.Context) MessageCountDetailsResponsePtrOutput {
	return o
}

func (o MessageCountDetailsResponsePtrOutput) Elem() MessageCountDetailsResponseOutput {
	return o.ApplyT(func(v *MessageCountDetailsResponse) MessageCountDetailsResponse { return *v }).(MessageCountDetailsResponseOutput)
}

// Number of active messages in the queue, topic, or subscription.
func (o MessageCountDetailsResponsePtrOutput) ActiveMessageCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *MessageCountDetailsResponse) *int {
		if v == nil {
			return nil
		}
		return &v.ActiveMessageCount
	}).(pulumi.IntPtrOutput)
}

// Number of messages that are dead lettered.
func (o MessageCountDetailsResponsePtrOutput) DeadLetterMessageCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *MessageCountDetailsResponse) *int {
		if v == nil {
			return nil
		}
		return &v.DeadLetterMessageCount
	}).(pulumi.IntPtrOutput)
}

// Number of scheduled messages.
func (o MessageCountDetailsResponsePtrOutput) ScheduledMessageCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *MessageCountDetailsResponse) *int {
		if v == nil {
			return nil
		}
		return &v.ScheduledMessageCount
	}).(pulumi.IntPtrOutput)
}

// Number of messages transferred into dead letters.
func (o MessageCountDetailsResponsePtrOutput) TransferDeadLetterMessageCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *MessageCountDetailsResponse) *int {
		if v == nil {
			return nil
		}
		return &v.TransferDeadLetterMessageCount
	}).(pulumi.IntPtrOutput)
}

// Number of messages transferred to another queue, topic, or subscription.
func (o MessageCountDetailsResponsePtrOutput) TransferMessageCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *MessageCountDetailsResponse) *int {
		if v == nil {
			return nil
		}
		return &v.TransferMessageCount
	}).(pulumi.IntPtrOutput)
}

// Single item in List or Get Migration Config operation
type MigrationConfigType struct {
	// Resource name
	Name string `pulumi:"name"`
	// Properties required to the Create Migration Configuration
	Properties MigrationConfigPropertiesResponseProperties `pulumi:"properties"`
	// Resource type
	Type string `pulumi:"type"`
}

// MigrationConfigTypeInput is an input type that accepts MigrationConfigTypeArgs and MigrationConfigTypeOutput values.
// You can construct a concrete instance of `MigrationConfigTypeInput` via:
//
//          MigrationConfigTypeArgs{...}
type MigrationConfigTypeInput interface {
	pulumi.Input

	ToMigrationConfigTypeOutput() MigrationConfigTypeOutput
	ToMigrationConfigTypeOutputWithContext(context.Context) MigrationConfigTypeOutput
}

// Single item in List or Get Migration Config operation
type MigrationConfigTypeArgs struct {
	// Resource name
	Name pulumi.StringInput `pulumi:"name"`
	// Properties required to the Create Migration Configuration
	Properties MigrationConfigPropertiesResponsePropertiesInput `pulumi:"properties"`
	// Resource type
	Type pulumi.StringInput `pulumi:"type"`
}

func (MigrationConfigTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MigrationConfigType)(nil)).Elem()
}

func (i MigrationConfigTypeArgs) ToMigrationConfigTypeOutput() MigrationConfigTypeOutput {
	return i.ToMigrationConfigTypeOutputWithContext(context.Background())
}

func (i MigrationConfigTypeArgs) ToMigrationConfigTypeOutputWithContext(ctx context.Context) MigrationConfigTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MigrationConfigTypeOutput)
}

// Single item in List or Get Migration Config operation
type MigrationConfigTypeOutput struct{ *pulumi.OutputState }

func (MigrationConfigTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MigrationConfigType)(nil)).Elem()
}

func (o MigrationConfigTypeOutput) ToMigrationConfigTypeOutput() MigrationConfigTypeOutput {
	return o
}

func (o MigrationConfigTypeOutput) ToMigrationConfigTypeOutputWithContext(ctx context.Context) MigrationConfigTypeOutput {
	return o
}

// Resource name
func (o MigrationConfigTypeOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v MigrationConfigType) string { return v.Name }).(pulumi.StringOutput)
}

// Properties required to the Create Migration Configuration
func (o MigrationConfigTypeOutput) Properties() MigrationConfigPropertiesResponsePropertiesOutput {
	return o.ApplyT(func(v MigrationConfigType) MigrationConfigPropertiesResponseProperties { return v.Properties }).(MigrationConfigPropertiesResponsePropertiesOutput)
}

// Resource type
func (o MigrationConfigTypeOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v MigrationConfigType) string { return v.Type }).(pulumi.StringOutput)
}

// Properties required to the Create Migration Configuration
type MigrationConfigPropertiesProperties struct {
	// Name to access Standard Namespace after migration
	PostMigrationName string `pulumi:"postMigrationName"`
	// Existing premium Namespace ARM Id name which has no entities, will be used for migration
	TargetNamespace string `pulumi:"targetNamespace"`
}

// MigrationConfigPropertiesPropertiesInput is an input type that accepts MigrationConfigPropertiesPropertiesArgs and MigrationConfigPropertiesPropertiesOutput values.
// You can construct a concrete instance of `MigrationConfigPropertiesPropertiesInput` via:
//
//          MigrationConfigPropertiesPropertiesArgs{...}
type MigrationConfigPropertiesPropertiesInput interface {
	pulumi.Input

	ToMigrationConfigPropertiesPropertiesOutput() MigrationConfigPropertiesPropertiesOutput
	ToMigrationConfigPropertiesPropertiesOutputWithContext(context.Context) MigrationConfigPropertiesPropertiesOutput
}

// Properties required to the Create Migration Configuration
type MigrationConfigPropertiesPropertiesArgs struct {
	// Name to access Standard Namespace after migration
	PostMigrationName pulumi.StringInput `pulumi:"postMigrationName"`
	// Existing premium Namespace ARM Id name which has no entities, will be used for migration
	TargetNamespace pulumi.StringInput `pulumi:"targetNamespace"`
}

func (MigrationConfigPropertiesPropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MigrationConfigPropertiesProperties)(nil)).Elem()
}

func (i MigrationConfigPropertiesPropertiesArgs) ToMigrationConfigPropertiesPropertiesOutput() MigrationConfigPropertiesPropertiesOutput {
	return i.ToMigrationConfigPropertiesPropertiesOutputWithContext(context.Background())
}

func (i MigrationConfigPropertiesPropertiesArgs) ToMigrationConfigPropertiesPropertiesOutputWithContext(ctx context.Context) MigrationConfigPropertiesPropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MigrationConfigPropertiesPropertiesOutput)
}

func (i MigrationConfigPropertiesPropertiesArgs) ToMigrationConfigPropertiesPropertiesPtrOutput() MigrationConfigPropertiesPropertiesPtrOutput {
	return i.ToMigrationConfigPropertiesPropertiesPtrOutputWithContext(context.Background())
}

func (i MigrationConfigPropertiesPropertiesArgs) ToMigrationConfigPropertiesPropertiesPtrOutputWithContext(ctx context.Context) MigrationConfigPropertiesPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MigrationConfigPropertiesPropertiesOutput).ToMigrationConfigPropertiesPropertiesPtrOutputWithContext(ctx)
}

// MigrationConfigPropertiesPropertiesPtrInput is an input type that accepts MigrationConfigPropertiesPropertiesArgs, MigrationConfigPropertiesPropertiesPtr and MigrationConfigPropertiesPropertiesPtrOutput values.
// You can construct a concrete instance of `MigrationConfigPropertiesPropertiesPtrInput` via:
//
//          MigrationConfigPropertiesPropertiesArgs{...}
//
//  or:
//
//          nil
type MigrationConfigPropertiesPropertiesPtrInput interface {
	pulumi.Input

	ToMigrationConfigPropertiesPropertiesPtrOutput() MigrationConfigPropertiesPropertiesPtrOutput
	ToMigrationConfigPropertiesPropertiesPtrOutputWithContext(context.Context) MigrationConfigPropertiesPropertiesPtrOutput
}

type migrationConfigPropertiesPropertiesPtrType MigrationConfigPropertiesPropertiesArgs

func MigrationConfigPropertiesPropertiesPtr(v *MigrationConfigPropertiesPropertiesArgs) MigrationConfigPropertiesPropertiesPtrInput {
	return (*migrationConfigPropertiesPropertiesPtrType)(v)
}

func (*migrationConfigPropertiesPropertiesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**MigrationConfigPropertiesProperties)(nil)).Elem()
}

func (i *migrationConfigPropertiesPropertiesPtrType) ToMigrationConfigPropertiesPropertiesPtrOutput() MigrationConfigPropertiesPropertiesPtrOutput {
	return i.ToMigrationConfigPropertiesPropertiesPtrOutputWithContext(context.Background())
}

func (i *migrationConfigPropertiesPropertiesPtrType) ToMigrationConfigPropertiesPropertiesPtrOutputWithContext(ctx context.Context) MigrationConfigPropertiesPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MigrationConfigPropertiesPropertiesPtrOutput)
}

// Properties required to the Create Migration Configuration
type MigrationConfigPropertiesPropertiesOutput struct{ *pulumi.OutputState }

func (MigrationConfigPropertiesPropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MigrationConfigPropertiesProperties)(nil)).Elem()
}

func (o MigrationConfigPropertiesPropertiesOutput) ToMigrationConfigPropertiesPropertiesOutput() MigrationConfigPropertiesPropertiesOutput {
	return o
}

func (o MigrationConfigPropertiesPropertiesOutput) ToMigrationConfigPropertiesPropertiesOutputWithContext(ctx context.Context) MigrationConfigPropertiesPropertiesOutput {
	return o
}

func (o MigrationConfigPropertiesPropertiesOutput) ToMigrationConfigPropertiesPropertiesPtrOutput() MigrationConfigPropertiesPropertiesPtrOutput {
	return o.ToMigrationConfigPropertiesPropertiesPtrOutputWithContext(context.Background())
}

func (o MigrationConfigPropertiesPropertiesOutput) ToMigrationConfigPropertiesPropertiesPtrOutputWithContext(ctx context.Context) MigrationConfigPropertiesPropertiesPtrOutput {
	return o.ApplyT(func(v MigrationConfigPropertiesProperties) *MigrationConfigPropertiesProperties {
		return &v
	}).(MigrationConfigPropertiesPropertiesPtrOutput)
}

// Name to access Standard Namespace after migration
func (o MigrationConfigPropertiesPropertiesOutput) PostMigrationName() pulumi.StringOutput {
	return o.ApplyT(func(v MigrationConfigPropertiesProperties) string { return v.PostMigrationName }).(pulumi.StringOutput)
}

// Existing premium Namespace ARM Id name which has no entities, will be used for migration
func (o MigrationConfigPropertiesPropertiesOutput) TargetNamespace() pulumi.StringOutput {
	return o.ApplyT(func(v MigrationConfigPropertiesProperties) string { return v.TargetNamespace }).(pulumi.StringOutput)
}

type MigrationConfigPropertiesPropertiesPtrOutput struct{ *pulumi.OutputState }

func (MigrationConfigPropertiesPropertiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MigrationConfigPropertiesProperties)(nil)).Elem()
}

func (o MigrationConfigPropertiesPropertiesPtrOutput) ToMigrationConfigPropertiesPropertiesPtrOutput() MigrationConfigPropertiesPropertiesPtrOutput {
	return o
}

func (o MigrationConfigPropertiesPropertiesPtrOutput) ToMigrationConfigPropertiesPropertiesPtrOutputWithContext(ctx context.Context) MigrationConfigPropertiesPropertiesPtrOutput {
	return o
}

func (o MigrationConfigPropertiesPropertiesPtrOutput) Elem() MigrationConfigPropertiesPropertiesOutput {
	return o.ApplyT(func(v *MigrationConfigPropertiesProperties) MigrationConfigPropertiesProperties { return *v }).(MigrationConfigPropertiesPropertiesOutput)
}

// Name to access Standard Namespace after migration
func (o MigrationConfigPropertiesPropertiesPtrOutput) PostMigrationName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MigrationConfigPropertiesProperties) *string {
		if v == nil {
			return nil
		}
		return &v.PostMigrationName
	}).(pulumi.StringPtrOutput)
}

// Existing premium Namespace ARM Id name which has no entities, will be used for migration
func (o MigrationConfigPropertiesPropertiesPtrOutput) TargetNamespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MigrationConfigPropertiesProperties) *string {
		if v == nil {
			return nil
		}
		return &v.TargetNamespace
	}).(pulumi.StringPtrOutput)
}

// Properties required to the Create Migration Configuration
type MigrationConfigPropertiesResponseProperties struct {
	// State in which Standard to Premium Migration is, possible values : Unknown, Reverting, Completing, Initiating, Syncing, Active
	MigrationState string `pulumi:"migrationState"`
	// Number of entities pending to be replicated.
	PendingReplicationOperationsCount int `pulumi:"pendingReplicationOperationsCount"`
	// Name to access Standard Namespace after migration
	PostMigrationName string `pulumi:"postMigrationName"`
	// Provisioning state of Migration Configuration
	ProvisioningState string `pulumi:"provisioningState"`
	// Existing premium Namespace ARM Id name which has no entities, will be used for migration
	TargetNamespace string `pulumi:"targetNamespace"`
}

// MigrationConfigPropertiesResponsePropertiesInput is an input type that accepts MigrationConfigPropertiesResponsePropertiesArgs and MigrationConfigPropertiesResponsePropertiesOutput values.
// You can construct a concrete instance of `MigrationConfigPropertiesResponsePropertiesInput` via:
//
//          MigrationConfigPropertiesResponsePropertiesArgs{...}
type MigrationConfigPropertiesResponsePropertiesInput interface {
	pulumi.Input

	ToMigrationConfigPropertiesResponsePropertiesOutput() MigrationConfigPropertiesResponsePropertiesOutput
	ToMigrationConfigPropertiesResponsePropertiesOutputWithContext(context.Context) MigrationConfigPropertiesResponsePropertiesOutput
}

// Properties required to the Create Migration Configuration
type MigrationConfigPropertiesResponsePropertiesArgs struct {
	// State in which Standard to Premium Migration is, possible values : Unknown, Reverting, Completing, Initiating, Syncing, Active
	MigrationState pulumi.StringInput `pulumi:"migrationState"`
	// Number of entities pending to be replicated.
	PendingReplicationOperationsCount pulumi.IntInput `pulumi:"pendingReplicationOperationsCount"`
	// Name to access Standard Namespace after migration
	PostMigrationName pulumi.StringInput `pulumi:"postMigrationName"`
	// Provisioning state of Migration Configuration
	ProvisioningState pulumi.StringInput `pulumi:"provisioningState"`
	// Existing premium Namespace ARM Id name which has no entities, will be used for migration
	TargetNamespace pulumi.StringInput `pulumi:"targetNamespace"`
}

func (MigrationConfigPropertiesResponsePropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MigrationConfigPropertiesResponseProperties)(nil)).Elem()
}

func (i MigrationConfigPropertiesResponsePropertiesArgs) ToMigrationConfigPropertiesResponsePropertiesOutput() MigrationConfigPropertiesResponsePropertiesOutput {
	return i.ToMigrationConfigPropertiesResponsePropertiesOutputWithContext(context.Background())
}

func (i MigrationConfigPropertiesResponsePropertiesArgs) ToMigrationConfigPropertiesResponsePropertiesOutputWithContext(ctx context.Context) MigrationConfigPropertiesResponsePropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MigrationConfigPropertiesResponsePropertiesOutput)
}

func (i MigrationConfigPropertiesResponsePropertiesArgs) ToMigrationConfigPropertiesResponsePropertiesPtrOutput() MigrationConfigPropertiesResponsePropertiesPtrOutput {
	return i.ToMigrationConfigPropertiesResponsePropertiesPtrOutputWithContext(context.Background())
}

func (i MigrationConfigPropertiesResponsePropertiesArgs) ToMigrationConfigPropertiesResponsePropertiesPtrOutputWithContext(ctx context.Context) MigrationConfigPropertiesResponsePropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MigrationConfigPropertiesResponsePropertiesOutput).ToMigrationConfigPropertiesResponsePropertiesPtrOutputWithContext(ctx)
}

// MigrationConfigPropertiesResponsePropertiesPtrInput is an input type that accepts MigrationConfigPropertiesResponsePropertiesArgs, MigrationConfigPropertiesResponsePropertiesPtr and MigrationConfigPropertiesResponsePropertiesPtrOutput values.
// You can construct a concrete instance of `MigrationConfigPropertiesResponsePropertiesPtrInput` via:
//
//          MigrationConfigPropertiesResponsePropertiesArgs{...}
//
//  or:
//
//          nil
type MigrationConfigPropertiesResponsePropertiesPtrInput interface {
	pulumi.Input

	ToMigrationConfigPropertiesResponsePropertiesPtrOutput() MigrationConfigPropertiesResponsePropertiesPtrOutput
	ToMigrationConfigPropertiesResponsePropertiesPtrOutputWithContext(context.Context) MigrationConfigPropertiesResponsePropertiesPtrOutput
}

type migrationConfigPropertiesResponsePropertiesPtrType MigrationConfigPropertiesResponsePropertiesArgs

func MigrationConfigPropertiesResponsePropertiesPtr(v *MigrationConfigPropertiesResponsePropertiesArgs) MigrationConfigPropertiesResponsePropertiesPtrInput {
	return (*migrationConfigPropertiesResponsePropertiesPtrType)(v)
}

func (*migrationConfigPropertiesResponsePropertiesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**MigrationConfigPropertiesResponseProperties)(nil)).Elem()
}

func (i *migrationConfigPropertiesResponsePropertiesPtrType) ToMigrationConfigPropertiesResponsePropertiesPtrOutput() MigrationConfigPropertiesResponsePropertiesPtrOutput {
	return i.ToMigrationConfigPropertiesResponsePropertiesPtrOutputWithContext(context.Background())
}

func (i *migrationConfigPropertiesResponsePropertiesPtrType) ToMigrationConfigPropertiesResponsePropertiesPtrOutputWithContext(ctx context.Context) MigrationConfigPropertiesResponsePropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MigrationConfigPropertiesResponsePropertiesPtrOutput)
}

// Properties required to the Create Migration Configuration
type MigrationConfigPropertiesResponsePropertiesOutput struct{ *pulumi.OutputState }

func (MigrationConfigPropertiesResponsePropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MigrationConfigPropertiesResponseProperties)(nil)).Elem()
}

func (o MigrationConfigPropertiesResponsePropertiesOutput) ToMigrationConfigPropertiesResponsePropertiesOutput() MigrationConfigPropertiesResponsePropertiesOutput {
	return o
}

func (o MigrationConfigPropertiesResponsePropertiesOutput) ToMigrationConfigPropertiesResponsePropertiesOutputWithContext(ctx context.Context) MigrationConfigPropertiesResponsePropertiesOutput {
	return o
}

func (o MigrationConfigPropertiesResponsePropertiesOutput) ToMigrationConfigPropertiesResponsePropertiesPtrOutput() MigrationConfigPropertiesResponsePropertiesPtrOutput {
	return o.ToMigrationConfigPropertiesResponsePropertiesPtrOutputWithContext(context.Background())
}

func (o MigrationConfigPropertiesResponsePropertiesOutput) ToMigrationConfigPropertiesResponsePropertiesPtrOutputWithContext(ctx context.Context) MigrationConfigPropertiesResponsePropertiesPtrOutput {
	return o.ApplyT(func(v MigrationConfigPropertiesResponseProperties) *MigrationConfigPropertiesResponseProperties {
		return &v
	}).(MigrationConfigPropertiesResponsePropertiesPtrOutput)
}

// State in which Standard to Premium Migration is, possible values : Unknown, Reverting, Completing, Initiating, Syncing, Active
func (o MigrationConfigPropertiesResponsePropertiesOutput) MigrationState() pulumi.StringOutput {
	return o.ApplyT(func(v MigrationConfigPropertiesResponseProperties) string { return v.MigrationState }).(pulumi.StringOutput)
}

// Number of entities pending to be replicated.
func (o MigrationConfigPropertiesResponsePropertiesOutput) PendingReplicationOperationsCount() pulumi.IntOutput {
	return o.ApplyT(func(v MigrationConfigPropertiesResponseProperties) int { return v.PendingReplicationOperationsCount }).(pulumi.IntOutput)
}

// Name to access Standard Namespace after migration
func (o MigrationConfigPropertiesResponsePropertiesOutput) PostMigrationName() pulumi.StringOutput {
	return o.ApplyT(func(v MigrationConfigPropertiesResponseProperties) string { return v.PostMigrationName }).(pulumi.StringOutput)
}

// Provisioning state of Migration Configuration
func (o MigrationConfigPropertiesResponsePropertiesOutput) ProvisioningState() pulumi.StringOutput {
	return o.ApplyT(func(v MigrationConfigPropertiesResponseProperties) string { return v.ProvisioningState }).(pulumi.StringOutput)
}

// Existing premium Namespace ARM Id name which has no entities, will be used for migration
func (o MigrationConfigPropertiesResponsePropertiesOutput) TargetNamespace() pulumi.StringOutput {
	return o.ApplyT(func(v MigrationConfigPropertiesResponseProperties) string { return v.TargetNamespace }).(pulumi.StringOutput)
}

type MigrationConfigPropertiesResponsePropertiesPtrOutput struct{ *pulumi.OutputState }

func (MigrationConfigPropertiesResponsePropertiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MigrationConfigPropertiesResponseProperties)(nil)).Elem()
}

func (o MigrationConfigPropertiesResponsePropertiesPtrOutput) ToMigrationConfigPropertiesResponsePropertiesPtrOutput() MigrationConfigPropertiesResponsePropertiesPtrOutput {
	return o
}

func (o MigrationConfigPropertiesResponsePropertiesPtrOutput) ToMigrationConfigPropertiesResponsePropertiesPtrOutputWithContext(ctx context.Context) MigrationConfigPropertiesResponsePropertiesPtrOutput {
	return o
}

func (o MigrationConfigPropertiesResponsePropertiesPtrOutput) Elem() MigrationConfigPropertiesResponsePropertiesOutput {
	return o.ApplyT(func(v *MigrationConfigPropertiesResponseProperties) MigrationConfigPropertiesResponseProperties {
		return *v
	}).(MigrationConfigPropertiesResponsePropertiesOutput)
}

// State in which Standard to Premium Migration is, possible values : Unknown, Reverting, Completing, Initiating, Syncing, Active
func (o MigrationConfigPropertiesResponsePropertiesPtrOutput) MigrationState() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MigrationConfigPropertiesResponseProperties) *string {
		if v == nil {
			return nil
		}
		return &v.MigrationState
	}).(pulumi.StringPtrOutput)
}

// Number of entities pending to be replicated.
func (o MigrationConfigPropertiesResponsePropertiesPtrOutput) PendingReplicationOperationsCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *MigrationConfigPropertiesResponseProperties) *int {
		if v == nil {
			return nil
		}
		return &v.PendingReplicationOperationsCount
	}).(pulumi.IntPtrOutput)
}

// Name to access Standard Namespace after migration
func (o MigrationConfigPropertiesResponsePropertiesPtrOutput) PostMigrationName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MigrationConfigPropertiesResponseProperties) *string {
		if v == nil {
			return nil
		}
		return &v.PostMigrationName
	}).(pulumi.StringPtrOutput)
}

// Provisioning state of Migration Configuration
func (o MigrationConfigPropertiesResponsePropertiesPtrOutput) ProvisioningState() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MigrationConfigPropertiesResponseProperties) *string {
		if v == nil {
			return nil
		}
		return &v.ProvisioningState
	}).(pulumi.StringPtrOutput)
}

// Existing premium Namespace ARM Id name which has no entities, will be used for migration
func (o MigrationConfigPropertiesResponsePropertiesPtrOutput) TargetNamespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MigrationConfigPropertiesResponseProperties) *string {
		if v == nil {
			return nil
		}
		return &v.TargetNamespace
	}).(pulumi.StringPtrOutput)
}

// Description of a namespace resource.
type NamespaceType struct {
	// The Geo-location where the resource lives
	Location string `pulumi:"location"`
	// Resource name
	Name string `pulumi:"name"`
	// Properties of the namespace.
	Properties SBNamespacePropertiesResponse `pulumi:"properties"`
	// Properties of Sku
	Sku *SBSkuResponse `pulumi:"sku"`
	// Resource tags
	Tags map[string]string `pulumi:"tags"`
	// Resource type
	Type string `pulumi:"type"`
}

// NamespaceTypeInput is an input type that accepts NamespaceTypeArgs and NamespaceTypeOutput values.
// You can construct a concrete instance of `NamespaceTypeInput` via:
//
//          NamespaceTypeArgs{...}
type NamespaceTypeInput interface {
	pulumi.Input

	ToNamespaceTypeOutput() NamespaceTypeOutput
	ToNamespaceTypeOutputWithContext(context.Context) NamespaceTypeOutput
}

// Description of a namespace resource.
type NamespaceTypeArgs struct {
	// The Geo-location where the resource lives
	Location pulumi.StringInput `pulumi:"location"`
	// Resource name
	Name pulumi.StringInput `pulumi:"name"`
	// Properties of the namespace.
	Properties SBNamespacePropertiesResponseInput `pulumi:"properties"`
	// Properties of Sku
	Sku SBSkuResponsePtrInput `pulumi:"sku"`
	// Resource tags
	Tags pulumi.StringMapInput `pulumi:"tags"`
	// Resource type
	Type pulumi.StringInput `pulumi:"type"`
}

func (NamespaceTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NamespaceType)(nil)).Elem()
}

func (i NamespaceTypeArgs) ToNamespaceTypeOutput() NamespaceTypeOutput {
	return i.ToNamespaceTypeOutputWithContext(context.Background())
}

func (i NamespaceTypeArgs) ToNamespaceTypeOutputWithContext(ctx context.Context) NamespaceTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NamespaceTypeOutput)
}

// Description of a namespace resource.
type NamespaceTypeOutput struct{ *pulumi.OutputState }

func (NamespaceTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NamespaceType)(nil)).Elem()
}

func (o NamespaceTypeOutput) ToNamespaceTypeOutput() NamespaceTypeOutput {
	return o
}

func (o NamespaceTypeOutput) ToNamespaceTypeOutputWithContext(ctx context.Context) NamespaceTypeOutput {
	return o
}

// The Geo-location where the resource lives
func (o NamespaceTypeOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v NamespaceType) string { return v.Location }).(pulumi.StringOutput)
}

// Resource name
func (o NamespaceTypeOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v NamespaceType) string { return v.Name }).(pulumi.StringOutput)
}

// Properties of the namespace.
func (o NamespaceTypeOutput) Properties() SBNamespacePropertiesResponseOutput {
	return o.ApplyT(func(v NamespaceType) SBNamespacePropertiesResponse { return v.Properties }).(SBNamespacePropertiesResponseOutput)
}

// Properties of Sku
func (o NamespaceTypeOutput) Sku() SBSkuResponsePtrOutput {
	return o.ApplyT(func(v NamespaceType) *SBSkuResponse { return v.Sku }).(SBSkuResponsePtrOutput)
}

// Resource tags
func (o NamespaceTypeOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v NamespaceType) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

// Resource type
func (o NamespaceTypeOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v NamespaceType) string { return v.Type }).(pulumi.StringOutput)
}

// Description of a namespace authorization rule.
type NamespaceAuthorizationRuleType struct {
	// Resource name
	Name string `pulumi:"name"`
	// AuthorizationRule properties.
	Properties SBAuthorizationRuleResponseProperties `pulumi:"properties"`
	// Resource type
	Type string `pulumi:"type"`
}

// NamespaceAuthorizationRuleTypeInput is an input type that accepts NamespaceAuthorizationRuleTypeArgs and NamespaceAuthorizationRuleTypeOutput values.
// You can construct a concrete instance of `NamespaceAuthorizationRuleTypeInput` via:
//
//          NamespaceAuthorizationRuleTypeArgs{...}
type NamespaceAuthorizationRuleTypeInput interface {
	pulumi.Input

	ToNamespaceAuthorizationRuleTypeOutput() NamespaceAuthorizationRuleTypeOutput
	ToNamespaceAuthorizationRuleTypeOutputWithContext(context.Context) NamespaceAuthorizationRuleTypeOutput
}

// Description of a namespace authorization rule.
type NamespaceAuthorizationRuleTypeArgs struct {
	// Resource name
	Name pulumi.StringInput `pulumi:"name"`
	// AuthorizationRule properties.
	Properties SBAuthorizationRuleResponsePropertiesInput `pulumi:"properties"`
	// Resource type
	Type pulumi.StringInput `pulumi:"type"`
}

func (NamespaceAuthorizationRuleTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NamespaceAuthorizationRuleType)(nil)).Elem()
}

func (i NamespaceAuthorizationRuleTypeArgs) ToNamespaceAuthorizationRuleTypeOutput() NamespaceAuthorizationRuleTypeOutput {
	return i.ToNamespaceAuthorizationRuleTypeOutputWithContext(context.Background())
}

func (i NamespaceAuthorizationRuleTypeArgs) ToNamespaceAuthorizationRuleTypeOutputWithContext(ctx context.Context) NamespaceAuthorizationRuleTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NamespaceAuthorizationRuleTypeOutput)
}

// Description of a namespace authorization rule.
type NamespaceAuthorizationRuleTypeOutput struct{ *pulumi.OutputState }

func (NamespaceAuthorizationRuleTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NamespaceAuthorizationRuleType)(nil)).Elem()
}

func (o NamespaceAuthorizationRuleTypeOutput) ToNamespaceAuthorizationRuleTypeOutput() NamespaceAuthorizationRuleTypeOutput {
	return o
}

func (o NamespaceAuthorizationRuleTypeOutput) ToNamespaceAuthorizationRuleTypeOutputWithContext(ctx context.Context) NamespaceAuthorizationRuleTypeOutput {
	return o
}

// Resource name
func (o NamespaceAuthorizationRuleTypeOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v NamespaceAuthorizationRuleType) string { return v.Name }).(pulumi.StringOutput)
}

// AuthorizationRule properties.
func (o NamespaceAuthorizationRuleTypeOutput) Properties() SBAuthorizationRuleResponsePropertiesOutput {
	return o.ApplyT(func(v NamespaceAuthorizationRuleType) SBAuthorizationRuleResponseProperties { return v.Properties }).(SBAuthorizationRuleResponsePropertiesOutput)
}

// Resource type
func (o NamespaceAuthorizationRuleTypeOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v NamespaceAuthorizationRuleType) string { return v.Type }).(pulumi.StringOutput)
}

// Description of queue Resource.
type QueueType struct {
	// Resource name
	Name string `pulumi:"name"`
	// Queue Properties
	Properties SBQueuePropertiesResponse `pulumi:"properties"`
	// Resource type
	Type string `pulumi:"type"`
}

// QueueTypeInput is an input type that accepts QueueTypeArgs and QueueTypeOutput values.
// You can construct a concrete instance of `QueueTypeInput` via:
//
//          QueueTypeArgs{...}
type QueueTypeInput interface {
	pulumi.Input

	ToQueueTypeOutput() QueueTypeOutput
	ToQueueTypeOutputWithContext(context.Context) QueueTypeOutput
}

// Description of queue Resource.
type QueueTypeArgs struct {
	// Resource name
	Name pulumi.StringInput `pulumi:"name"`
	// Queue Properties
	Properties SBQueuePropertiesResponseInput `pulumi:"properties"`
	// Resource type
	Type pulumi.StringInput `pulumi:"type"`
}

func (QueueTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*QueueType)(nil)).Elem()
}

func (i QueueTypeArgs) ToQueueTypeOutput() QueueTypeOutput {
	return i.ToQueueTypeOutputWithContext(context.Background())
}

func (i QueueTypeArgs) ToQueueTypeOutputWithContext(ctx context.Context) QueueTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(QueueTypeOutput)
}

// Description of queue Resource.
type QueueTypeOutput struct{ *pulumi.OutputState }

func (QueueTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*QueueType)(nil)).Elem()
}

func (o QueueTypeOutput) ToQueueTypeOutput() QueueTypeOutput {
	return o
}

func (o QueueTypeOutput) ToQueueTypeOutputWithContext(ctx context.Context) QueueTypeOutput {
	return o
}

// Resource name
func (o QueueTypeOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v QueueType) string { return v.Name }).(pulumi.StringOutput)
}

// Queue Properties
func (o QueueTypeOutput) Properties() SBQueuePropertiesResponseOutput {
	return o.ApplyT(func(v QueueType) SBQueuePropertiesResponse { return v.Properties }).(SBQueuePropertiesResponseOutput)
}

// Resource type
func (o QueueTypeOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v QueueType) string { return v.Type }).(pulumi.StringOutput)
}

// Description of a namespace authorization rule.
type QueueAuthorizationRuleType struct {
	// Resource name
	Name string `pulumi:"name"`
	// AuthorizationRule properties.
	Properties SBAuthorizationRuleResponseProperties `pulumi:"properties"`
	// Resource type
	Type string `pulumi:"type"`
}

// QueueAuthorizationRuleTypeInput is an input type that accepts QueueAuthorizationRuleTypeArgs and QueueAuthorizationRuleTypeOutput values.
// You can construct a concrete instance of `QueueAuthorizationRuleTypeInput` via:
//
//          QueueAuthorizationRuleTypeArgs{...}
type QueueAuthorizationRuleTypeInput interface {
	pulumi.Input

	ToQueueAuthorizationRuleTypeOutput() QueueAuthorizationRuleTypeOutput
	ToQueueAuthorizationRuleTypeOutputWithContext(context.Context) QueueAuthorizationRuleTypeOutput
}

// Description of a namespace authorization rule.
type QueueAuthorizationRuleTypeArgs struct {
	// Resource name
	Name pulumi.StringInput `pulumi:"name"`
	// AuthorizationRule properties.
	Properties SBAuthorizationRuleResponsePropertiesInput `pulumi:"properties"`
	// Resource type
	Type pulumi.StringInput `pulumi:"type"`
}

func (QueueAuthorizationRuleTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*QueueAuthorizationRuleType)(nil)).Elem()
}

func (i QueueAuthorizationRuleTypeArgs) ToQueueAuthorizationRuleTypeOutput() QueueAuthorizationRuleTypeOutput {
	return i.ToQueueAuthorizationRuleTypeOutputWithContext(context.Background())
}

func (i QueueAuthorizationRuleTypeArgs) ToQueueAuthorizationRuleTypeOutputWithContext(ctx context.Context) QueueAuthorizationRuleTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(QueueAuthorizationRuleTypeOutput)
}

// Description of a namespace authorization rule.
type QueueAuthorizationRuleTypeOutput struct{ *pulumi.OutputState }

func (QueueAuthorizationRuleTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*QueueAuthorizationRuleType)(nil)).Elem()
}

func (o QueueAuthorizationRuleTypeOutput) ToQueueAuthorizationRuleTypeOutput() QueueAuthorizationRuleTypeOutput {
	return o
}

func (o QueueAuthorizationRuleTypeOutput) ToQueueAuthorizationRuleTypeOutputWithContext(ctx context.Context) QueueAuthorizationRuleTypeOutput {
	return o
}

// Resource name
func (o QueueAuthorizationRuleTypeOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v QueueAuthorizationRuleType) string { return v.Name }).(pulumi.StringOutput)
}

// AuthorizationRule properties.
func (o QueueAuthorizationRuleTypeOutput) Properties() SBAuthorizationRuleResponsePropertiesOutput {
	return o.ApplyT(func(v QueueAuthorizationRuleType) SBAuthorizationRuleResponseProperties { return v.Properties }).(SBAuthorizationRuleResponsePropertiesOutput)
}

// Resource type
func (o QueueAuthorizationRuleTypeOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v QueueAuthorizationRuleType) string { return v.Type }).(pulumi.StringOutput)
}

// Description of Rule Resource.
type RuleType struct {
	// Resource name
	Name string `pulumi:"name"`
	// Properties of Rule resource
	Properties RulepropertiesResponse `pulumi:"properties"`
	// Resource type
	Type string `pulumi:"type"`
}

// RuleTypeInput is an input type that accepts RuleTypeArgs and RuleTypeOutput values.
// You can construct a concrete instance of `RuleTypeInput` via:
//
//          RuleTypeArgs{...}
type RuleTypeInput interface {
	pulumi.Input

	ToRuleTypeOutput() RuleTypeOutput
	ToRuleTypeOutputWithContext(context.Context) RuleTypeOutput
}

// Description of Rule Resource.
type RuleTypeArgs struct {
	// Resource name
	Name pulumi.StringInput `pulumi:"name"`
	// Properties of Rule resource
	Properties RulepropertiesResponseInput `pulumi:"properties"`
	// Resource type
	Type pulumi.StringInput `pulumi:"type"`
}

func (RuleTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RuleType)(nil)).Elem()
}

func (i RuleTypeArgs) ToRuleTypeOutput() RuleTypeOutput {
	return i.ToRuleTypeOutputWithContext(context.Background())
}

func (i RuleTypeArgs) ToRuleTypeOutputWithContext(ctx context.Context) RuleTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RuleTypeOutput)
}

// Description of Rule Resource.
type RuleTypeOutput struct{ *pulumi.OutputState }

func (RuleTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RuleType)(nil)).Elem()
}

func (o RuleTypeOutput) ToRuleTypeOutput() RuleTypeOutput {
	return o
}

func (o RuleTypeOutput) ToRuleTypeOutputWithContext(ctx context.Context) RuleTypeOutput {
	return o
}

// Resource name
func (o RuleTypeOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v RuleType) string { return v.Name }).(pulumi.StringOutput)
}

// Properties of Rule resource
func (o RuleTypeOutput) Properties() RulepropertiesResponseOutput {
	return o.ApplyT(func(v RuleType) RulepropertiesResponse { return v.Properties }).(RulepropertiesResponseOutput)
}

// Resource type
func (o RuleTypeOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v RuleType) string { return v.Type }).(pulumi.StringOutput)
}

// Description of Rule Resource.
type Ruleproperties struct {
	// Represents the filter actions which are allowed for the transformation of a message that have been matched by a filter expression.
	Action *Action `pulumi:"action"`
	// Properties of correlationFilter
	CorrelationFilter *CorrelationFilter `pulumi:"correlationFilter"`
	// Filter type that is evaluated against a BrokeredMessage.
	FilterType *string `pulumi:"filterType"`
	// Properties of sqlFilter
	SqlFilter *SqlFilter `pulumi:"sqlFilter"`
}

// RulepropertiesInput is an input type that accepts RulepropertiesArgs and RulepropertiesOutput values.
// You can construct a concrete instance of `RulepropertiesInput` via:
//
//          RulepropertiesArgs{...}
type RulepropertiesInput interface {
	pulumi.Input

	ToRulepropertiesOutput() RulepropertiesOutput
	ToRulepropertiesOutputWithContext(context.Context) RulepropertiesOutput
}

// Description of Rule Resource.
type RulepropertiesArgs struct {
	// Represents the filter actions which are allowed for the transformation of a message that have been matched by a filter expression.
	Action ActionPtrInput `pulumi:"action"`
	// Properties of correlationFilter
	CorrelationFilter CorrelationFilterPtrInput `pulumi:"correlationFilter"`
	// Filter type that is evaluated against a BrokeredMessage.
	FilterType pulumi.StringPtrInput `pulumi:"filterType"`
	// Properties of sqlFilter
	SqlFilter SqlFilterPtrInput `pulumi:"sqlFilter"`
}

func (RulepropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Ruleproperties)(nil)).Elem()
}

func (i RulepropertiesArgs) ToRulepropertiesOutput() RulepropertiesOutput {
	return i.ToRulepropertiesOutputWithContext(context.Background())
}

func (i RulepropertiesArgs) ToRulepropertiesOutputWithContext(ctx context.Context) RulepropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RulepropertiesOutput)
}

func (i RulepropertiesArgs) ToRulepropertiesPtrOutput() RulepropertiesPtrOutput {
	return i.ToRulepropertiesPtrOutputWithContext(context.Background())
}

func (i RulepropertiesArgs) ToRulepropertiesPtrOutputWithContext(ctx context.Context) RulepropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RulepropertiesOutput).ToRulepropertiesPtrOutputWithContext(ctx)
}

// RulepropertiesPtrInput is an input type that accepts RulepropertiesArgs, RulepropertiesPtr and RulepropertiesPtrOutput values.
// You can construct a concrete instance of `RulepropertiesPtrInput` via:
//
//          RulepropertiesArgs{...}
//
//  or:
//
//          nil
type RulepropertiesPtrInput interface {
	pulumi.Input

	ToRulepropertiesPtrOutput() RulepropertiesPtrOutput
	ToRulepropertiesPtrOutputWithContext(context.Context) RulepropertiesPtrOutput
}

type rulepropertiesPtrType RulepropertiesArgs

func RulepropertiesPtr(v *RulepropertiesArgs) RulepropertiesPtrInput {
	return (*rulepropertiesPtrType)(v)
}

func (*rulepropertiesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Ruleproperties)(nil)).Elem()
}

func (i *rulepropertiesPtrType) ToRulepropertiesPtrOutput() RulepropertiesPtrOutput {
	return i.ToRulepropertiesPtrOutputWithContext(context.Background())
}

func (i *rulepropertiesPtrType) ToRulepropertiesPtrOutputWithContext(ctx context.Context) RulepropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RulepropertiesPtrOutput)
}

// Description of Rule Resource.
type RulepropertiesOutput struct{ *pulumi.OutputState }

func (RulepropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Ruleproperties)(nil)).Elem()
}

func (o RulepropertiesOutput) ToRulepropertiesOutput() RulepropertiesOutput {
	return o
}

func (o RulepropertiesOutput) ToRulepropertiesOutputWithContext(ctx context.Context) RulepropertiesOutput {
	return o
}

func (o RulepropertiesOutput) ToRulepropertiesPtrOutput() RulepropertiesPtrOutput {
	return o.ToRulepropertiesPtrOutputWithContext(context.Background())
}

func (o RulepropertiesOutput) ToRulepropertiesPtrOutputWithContext(ctx context.Context) RulepropertiesPtrOutput {
	return o.ApplyT(func(v Ruleproperties) *Ruleproperties {
		return &v
	}).(RulepropertiesPtrOutput)
}

// Represents the filter actions which are allowed for the transformation of a message that have been matched by a filter expression.
func (o RulepropertiesOutput) Action() ActionPtrOutput {
	return o.ApplyT(func(v Ruleproperties) *Action { return v.Action }).(ActionPtrOutput)
}

// Properties of correlationFilter
func (o RulepropertiesOutput) CorrelationFilter() CorrelationFilterPtrOutput {
	return o.ApplyT(func(v Ruleproperties) *CorrelationFilter { return v.CorrelationFilter }).(CorrelationFilterPtrOutput)
}

// Filter type that is evaluated against a BrokeredMessage.
func (o RulepropertiesOutput) FilterType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Ruleproperties) *string { return v.FilterType }).(pulumi.StringPtrOutput)
}

// Properties of sqlFilter
func (o RulepropertiesOutput) SqlFilter() SqlFilterPtrOutput {
	return o.ApplyT(func(v Ruleproperties) *SqlFilter { return v.SqlFilter }).(SqlFilterPtrOutput)
}

type RulepropertiesPtrOutput struct{ *pulumi.OutputState }

func (RulepropertiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Ruleproperties)(nil)).Elem()
}

func (o RulepropertiesPtrOutput) ToRulepropertiesPtrOutput() RulepropertiesPtrOutput {
	return o
}

func (o RulepropertiesPtrOutput) ToRulepropertiesPtrOutputWithContext(ctx context.Context) RulepropertiesPtrOutput {
	return o
}

func (o RulepropertiesPtrOutput) Elem() RulepropertiesOutput {
	return o.ApplyT(func(v *Ruleproperties) Ruleproperties { return *v }).(RulepropertiesOutput)
}

// Represents the filter actions which are allowed for the transformation of a message that have been matched by a filter expression.
func (o RulepropertiesPtrOutput) Action() ActionPtrOutput {
	return o.ApplyT(func(v *Ruleproperties) *Action {
		if v == nil {
			return nil
		}
		return v.Action
	}).(ActionPtrOutput)
}

// Properties of correlationFilter
func (o RulepropertiesPtrOutput) CorrelationFilter() CorrelationFilterPtrOutput {
	return o.ApplyT(func(v *Ruleproperties) *CorrelationFilter {
		if v == nil {
			return nil
		}
		return v.CorrelationFilter
	}).(CorrelationFilterPtrOutput)
}

// Filter type that is evaluated against a BrokeredMessage.
func (o RulepropertiesPtrOutput) FilterType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Ruleproperties) *string {
		if v == nil {
			return nil
		}
		return v.FilterType
	}).(pulumi.StringPtrOutput)
}

// Properties of sqlFilter
func (o RulepropertiesPtrOutput) SqlFilter() SqlFilterPtrOutput {
	return o.ApplyT(func(v *Ruleproperties) *SqlFilter {
		if v == nil {
			return nil
		}
		return v.SqlFilter
	}).(SqlFilterPtrOutput)
}

// Description of Rule Resource.
type RulepropertiesResponse struct {
	// Represents the filter actions which are allowed for the transformation of a message that have been matched by a filter expression.
	Action *ActionResponse `pulumi:"action"`
	// Properties of correlationFilter
	CorrelationFilter *CorrelationFilterResponse `pulumi:"correlationFilter"`
	// Filter type that is evaluated against a BrokeredMessage.
	FilterType *string `pulumi:"filterType"`
	// Properties of sqlFilter
	SqlFilter *SqlFilterResponse `pulumi:"sqlFilter"`
}

// RulepropertiesResponseInput is an input type that accepts RulepropertiesResponseArgs and RulepropertiesResponseOutput values.
// You can construct a concrete instance of `RulepropertiesResponseInput` via:
//
//          RulepropertiesResponseArgs{...}
type RulepropertiesResponseInput interface {
	pulumi.Input

	ToRulepropertiesResponseOutput() RulepropertiesResponseOutput
	ToRulepropertiesResponseOutputWithContext(context.Context) RulepropertiesResponseOutput
}

// Description of Rule Resource.
type RulepropertiesResponseArgs struct {
	// Represents the filter actions which are allowed for the transformation of a message that have been matched by a filter expression.
	Action ActionResponsePtrInput `pulumi:"action"`
	// Properties of correlationFilter
	CorrelationFilter CorrelationFilterResponsePtrInput `pulumi:"correlationFilter"`
	// Filter type that is evaluated against a BrokeredMessage.
	FilterType pulumi.StringPtrInput `pulumi:"filterType"`
	// Properties of sqlFilter
	SqlFilter SqlFilterResponsePtrInput `pulumi:"sqlFilter"`
}

func (RulepropertiesResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RulepropertiesResponse)(nil)).Elem()
}

func (i RulepropertiesResponseArgs) ToRulepropertiesResponseOutput() RulepropertiesResponseOutput {
	return i.ToRulepropertiesResponseOutputWithContext(context.Background())
}

func (i RulepropertiesResponseArgs) ToRulepropertiesResponseOutputWithContext(ctx context.Context) RulepropertiesResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RulepropertiesResponseOutput)
}

func (i RulepropertiesResponseArgs) ToRulepropertiesResponsePtrOutput() RulepropertiesResponsePtrOutput {
	return i.ToRulepropertiesResponsePtrOutputWithContext(context.Background())
}

func (i RulepropertiesResponseArgs) ToRulepropertiesResponsePtrOutputWithContext(ctx context.Context) RulepropertiesResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RulepropertiesResponseOutput).ToRulepropertiesResponsePtrOutputWithContext(ctx)
}

// RulepropertiesResponsePtrInput is an input type that accepts RulepropertiesResponseArgs, RulepropertiesResponsePtr and RulepropertiesResponsePtrOutput values.
// You can construct a concrete instance of `RulepropertiesResponsePtrInput` via:
//
//          RulepropertiesResponseArgs{...}
//
//  or:
//
//          nil
type RulepropertiesResponsePtrInput interface {
	pulumi.Input

	ToRulepropertiesResponsePtrOutput() RulepropertiesResponsePtrOutput
	ToRulepropertiesResponsePtrOutputWithContext(context.Context) RulepropertiesResponsePtrOutput
}

type rulepropertiesResponsePtrType RulepropertiesResponseArgs

func RulepropertiesResponsePtr(v *RulepropertiesResponseArgs) RulepropertiesResponsePtrInput {
	return (*rulepropertiesResponsePtrType)(v)
}

func (*rulepropertiesResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RulepropertiesResponse)(nil)).Elem()
}

func (i *rulepropertiesResponsePtrType) ToRulepropertiesResponsePtrOutput() RulepropertiesResponsePtrOutput {
	return i.ToRulepropertiesResponsePtrOutputWithContext(context.Background())
}

func (i *rulepropertiesResponsePtrType) ToRulepropertiesResponsePtrOutputWithContext(ctx context.Context) RulepropertiesResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RulepropertiesResponsePtrOutput)
}

// Description of Rule Resource.
type RulepropertiesResponseOutput struct{ *pulumi.OutputState }

func (RulepropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RulepropertiesResponse)(nil)).Elem()
}

func (o RulepropertiesResponseOutput) ToRulepropertiesResponseOutput() RulepropertiesResponseOutput {
	return o
}

func (o RulepropertiesResponseOutput) ToRulepropertiesResponseOutputWithContext(ctx context.Context) RulepropertiesResponseOutput {
	return o
}

func (o RulepropertiesResponseOutput) ToRulepropertiesResponsePtrOutput() RulepropertiesResponsePtrOutput {
	return o.ToRulepropertiesResponsePtrOutputWithContext(context.Background())
}

func (o RulepropertiesResponseOutput) ToRulepropertiesResponsePtrOutputWithContext(ctx context.Context) RulepropertiesResponsePtrOutput {
	return o.ApplyT(func(v RulepropertiesResponse) *RulepropertiesResponse {
		return &v
	}).(RulepropertiesResponsePtrOutput)
}

// Represents the filter actions which are allowed for the transformation of a message that have been matched by a filter expression.
func (o RulepropertiesResponseOutput) Action() ActionResponsePtrOutput {
	return o.ApplyT(func(v RulepropertiesResponse) *ActionResponse { return v.Action }).(ActionResponsePtrOutput)
}

// Properties of correlationFilter
func (o RulepropertiesResponseOutput) CorrelationFilter() CorrelationFilterResponsePtrOutput {
	return o.ApplyT(func(v RulepropertiesResponse) *CorrelationFilterResponse { return v.CorrelationFilter }).(CorrelationFilterResponsePtrOutput)
}

// Filter type that is evaluated against a BrokeredMessage.
func (o RulepropertiesResponseOutput) FilterType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RulepropertiesResponse) *string { return v.FilterType }).(pulumi.StringPtrOutput)
}

// Properties of sqlFilter
func (o RulepropertiesResponseOutput) SqlFilter() SqlFilterResponsePtrOutput {
	return o.ApplyT(func(v RulepropertiesResponse) *SqlFilterResponse { return v.SqlFilter }).(SqlFilterResponsePtrOutput)
}

type RulepropertiesResponsePtrOutput struct{ *pulumi.OutputState }

func (RulepropertiesResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RulepropertiesResponse)(nil)).Elem()
}

func (o RulepropertiesResponsePtrOutput) ToRulepropertiesResponsePtrOutput() RulepropertiesResponsePtrOutput {
	return o
}

func (o RulepropertiesResponsePtrOutput) ToRulepropertiesResponsePtrOutputWithContext(ctx context.Context) RulepropertiesResponsePtrOutput {
	return o
}

func (o RulepropertiesResponsePtrOutput) Elem() RulepropertiesResponseOutput {
	return o.ApplyT(func(v *RulepropertiesResponse) RulepropertiesResponse { return *v }).(RulepropertiesResponseOutput)
}

// Represents the filter actions which are allowed for the transformation of a message that have been matched by a filter expression.
func (o RulepropertiesResponsePtrOutput) Action() ActionResponsePtrOutput {
	return o.ApplyT(func(v *RulepropertiesResponse) *ActionResponse {
		if v == nil {
			return nil
		}
		return v.Action
	}).(ActionResponsePtrOutput)
}

// Properties of correlationFilter
func (o RulepropertiesResponsePtrOutput) CorrelationFilter() CorrelationFilterResponsePtrOutput {
	return o.ApplyT(func(v *RulepropertiesResponse) *CorrelationFilterResponse {
		if v == nil {
			return nil
		}
		return v.CorrelationFilter
	}).(CorrelationFilterResponsePtrOutput)
}

// Filter type that is evaluated against a BrokeredMessage.
func (o RulepropertiesResponsePtrOutput) FilterType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RulepropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return v.FilterType
	}).(pulumi.StringPtrOutput)
}

// Properties of sqlFilter
func (o RulepropertiesResponsePtrOutput) SqlFilter() SqlFilterResponsePtrOutput {
	return o.ApplyT(func(v *RulepropertiesResponse) *SqlFilterResponse {
		if v == nil {
			return nil
		}
		return v.SqlFilter
	}).(SqlFilterResponsePtrOutput)
}

// AuthorizationRule properties.
type SBAuthorizationRuleProperties struct {
	// The rights associated with the rule.
	Rights []string `pulumi:"rights"`
}

// SBAuthorizationRulePropertiesInput is an input type that accepts SBAuthorizationRulePropertiesArgs and SBAuthorizationRulePropertiesOutput values.
// You can construct a concrete instance of `SBAuthorizationRulePropertiesInput` via:
//
//          SBAuthorizationRulePropertiesArgs{...}
type SBAuthorizationRulePropertiesInput interface {
	pulumi.Input

	ToSBAuthorizationRulePropertiesOutput() SBAuthorizationRulePropertiesOutput
	ToSBAuthorizationRulePropertiesOutputWithContext(context.Context) SBAuthorizationRulePropertiesOutput
}

// AuthorizationRule properties.
type SBAuthorizationRulePropertiesArgs struct {
	// The rights associated with the rule.
	Rights pulumi.StringArrayInput `pulumi:"rights"`
}

func (SBAuthorizationRulePropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SBAuthorizationRuleProperties)(nil)).Elem()
}

func (i SBAuthorizationRulePropertiesArgs) ToSBAuthorizationRulePropertiesOutput() SBAuthorizationRulePropertiesOutput {
	return i.ToSBAuthorizationRulePropertiesOutputWithContext(context.Background())
}

func (i SBAuthorizationRulePropertiesArgs) ToSBAuthorizationRulePropertiesOutputWithContext(ctx context.Context) SBAuthorizationRulePropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SBAuthorizationRulePropertiesOutput)
}

func (i SBAuthorizationRulePropertiesArgs) ToSBAuthorizationRulePropertiesPtrOutput() SBAuthorizationRulePropertiesPtrOutput {
	return i.ToSBAuthorizationRulePropertiesPtrOutputWithContext(context.Background())
}

func (i SBAuthorizationRulePropertiesArgs) ToSBAuthorizationRulePropertiesPtrOutputWithContext(ctx context.Context) SBAuthorizationRulePropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SBAuthorizationRulePropertiesOutput).ToSBAuthorizationRulePropertiesPtrOutputWithContext(ctx)
}

// SBAuthorizationRulePropertiesPtrInput is an input type that accepts SBAuthorizationRulePropertiesArgs, SBAuthorizationRulePropertiesPtr and SBAuthorizationRulePropertiesPtrOutput values.
// You can construct a concrete instance of `SBAuthorizationRulePropertiesPtrInput` via:
//
//          SBAuthorizationRulePropertiesArgs{...}
//
//  or:
//
//          nil
type SBAuthorizationRulePropertiesPtrInput interface {
	pulumi.Input

	ToSBAuthorizationRulePropertiesPtrOutput() SBAuthorizationRulePropertiesPtrOutput
	ToSBAuthorizationRulePropertiesPtrOutputWithContext(context.Context) SBAuthorizationRulePropertiesPtrOutput
}

type sbauthorizationRulePropertiesPtrType SBAuthorizationRulePropertiesArgs

func SBAuthorizationRulePropertiesPtr(v *SBAuthorizationRulePropertiesArgs) SBAuthorizationRulePropertiesPtrInput {
	return (*sbauthorizationRulePropertiesPtrType)(v)
}

func (*sbauthorizationRulePropertiesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SBAuthorizationRuleProperties)(nil)).Elem()
}

func (i *sbauthorizationRulePropertiesPtrType) ToSBAuthorizationRulePropertiesPtrOutput() SBAuthorizationRulePropertiesPtrOutput {
	return i.ToSBAuthorizationRulePropertiesPtrOutputWithContext(context.Background())
}

func (i *sbauthorizationRulePropertiesPtrType) ToSBAuthorizationRulePropertiesPtrOutputWithContext(ctx context.Context) SBAuthorizationRulePropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SBAuthorizationRulePropertiesPtrOutput)
}

// AuthorizationRule properties.
type SBAuthorizationRulePropertiesOutput struct{ *pulumi.OutputState }

func (SBAuthorizationRulePropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SBAuthorizationRuleProperties)(nil)).Elem()
}

func (o SBAuthorizationRulePropertiesOutput) ToSBAuthorizationRulePropertiesOutput() SBAuthorizationRulePropertiesOutput {
	return o
}

func (o SBAuthorizationRulePropertiesOutput) ToSBAuthorizationRulePropertiesOutputWithContext(ctx context.Context) SBAuthorizationRulePropertiesOutput {
	return o
}

func (o SBAuthorizationRulePropertiesOutput) ToSBAuthorizationRulePropertiesPtrOutput() SBAuthorizationRulePropertiesPtrOutput {
	return o.ToSBAuthorizationRulePropertiesPtrOutputWithContext(context.Background())
}

func (o SBAuthorizationRulePropertiesOutput) ToSBAuthorizationRulePropertiesPtrOutputWithContext(ctx context.Context) SBAuthorizationRulePropertiesPtrOutput {
	return o.ApplyT(func(v SBAuthorizationRuleProperties) *SBAuthorizationRuleProperties {
		return &v
	}).(SBAuthorizationRulePropertiesPtrOutput)
}

// The rights associated with the rule.
func (o SBAuthorizationRulePropertiesOutput) Rights() pulumi.StringArrayOutput {
	return o.ApplyT(func(v SBAuthorizationRuleProperties) []string { return v.Rights }).(pulumi.StringArrayOutput)
}

type SBAuthorizationRulePropertiesPtrOutput struct{ *pulumi.OutputState }

func (SBAuthorizationRulePropertiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SBAuthorizationRuleProperties)(nil)).Elem()
}

func (o SBAuthorizationRulePropertiesPtrOutput) ToSBAuthorizationRulePropertiesPtrOutput() SBAuthorizationRulePropertiesPtrOutput {
	return o
}

func (o SBAuthorizationRulePropertiesPtrOutput) ToSBAuthorizationRulePropertiesPtrOutputWithContext(ctx context.Context) SBAuthorizationRulePropertiesPtrOutput {
	return o
}

func (o SBAuthorizationRulePropertiesPtrOutput) Elem() SBAuthorizationRulePropertiesOutput {
	return o.ApplyT(func(v *SBAuthorizationRuleProperties) SBAuthorizationRuleProperties { return *v }).(SBAuthorizationRulePropertiesOutput)
}

// The rights associated with the rule.
func (o SBAuthorizationRulePropertiesPtrOutput) Rights() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *SBAuthorizationRuleProperties) []string {
		if v == nil {
			return nil
		}
		return v.Rights
	}).(pulumi.StringArrayOutput)
}

// AuthorizationRule properties.
type SBAuthorizationRuleResponseProperties struct {
	// The rights associated with the rule.
	Rights []string `pulumi:"rights"`
}

// SBAuthorizationRuleResponsePropertiesInput is an input type that accepts SBAuthorizationRuleResponsePropertiesArgs and SBAuthorizationRuleResponsePropertiesOutput values.
// You can construct a concrete instance of `SBAuthorizationRuleResponsePropertiesInput` via:
//
//          SBAuthorizationRuleResponsePropertiesArgs{...}
type SBAuthorizationRuleResponsePropertiesInput interface {
	pulumi.Input

	ToSBAuthorizationRuleResponsePropertiesOutput() SBAuthorizationRuleResponsePropertiesOutput
	ToSBAuthorizationRuleResponsePropertiesOutputWithContext(context.Context) SBAuthorizationRuleResponsePropertiesOutput
}

// AuthorizationRule properties.
type SBAuthorizationRuleResponsePropertiesArgs struct {
	// The rights associated with the rule.
	Rights pulumi.StringArrayInput `pulumi:"rights"`
}

func (SBAuthorizationRuleResponsePropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SBAuthorizationRuleResponseProperties)(nil)).Elem()
}

func (i SBAuthorizationRuleResponsePropertiesArgs) ToSBAuthorizationRuleResponsePropertiesOutput() SBAuthorizationRuleResponsePropertiesOutput {
	return i.ToSBAuthorizationRuleResponsePropertiesOutputWithContext(context.Background())
}

func (i SBAuthorizationRuleResponsePropertiesArgs) ToSBAuthorizationRuleResponsePropertiesOutputWithContext(ctx context.Context) SBAuthorizationRuleResponsePropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SBAuthorizationRuleResponsePropertiesOutput)
}

func (i SBAuthorizationRuleResponsePropertiesArgs) ToSBAuthorizationRuleResponsePropertiesPtrOutput() SBAuthorizationRuleResponsePropertiesPtrOutput {
	return i.ToSBAuthorizationRuleResponsePropertiesPtrOutputWithContext(context.Background())
}

func (i SBAuthorizationRuleResponsePropertiesArgs) ToSBAuthorizationRuleResponsePropertiesPtrOutputWithContext(ctx context.Context) SBAuthorizationRuleResponsePropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SBAuthorizationRuleResponsePropertiesOutput).ToSBAuthorizationRuleResponsePropertiesPtrOutputWithContext(ctx)
}

// SBAuthorizationRuleResponsePropertiesPtrInput is an input type that accepts SBAuthorizationRuleResponsePropertiesArgs, SBAuthorizationRuleResponsePropertiesPtr and SBAuthorizationRuleResponsePropertiesPtrOutput values.
// You can construct a concrete instance of `SBAuthorizationRuleResponsePropertiesPtrInput` via:
//
//          SBAuthorizationRuleResponsePropertiesArgs{...}
//
//  or:
//
//          nil
type SBAuthorizationRuleResponsePropertiesPtrInput interface {
	pulumi.Input

	ToSBAuthorizationRuleResponsePropertiesPtrOutput() SBAuthorizationRuleResponsePropertiesPtrOutput
	ToSBAuthorizationRuleResponsePropertiesPtrOutputWithContext(context.Context) SBAuthorizationRuleResponsePropertiesPtrOutput
}

type sbauthorizationRuleResponsePropertiesPtrType SBAuthorizationRuleResponsePropertiesArgs

func SBAuthorizationRuleResponsePropertiesPtr(v *SBAuthorizationRuleResponsePropertiesArgs) SBAuthorizationRuleResponsePropertiesPtrInput {
	return (*sbauthorizationRuleResponsePropertiesPtrType)(v)
}

func (*sbauthorizationRuleResponsePropertiesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SBAuthorizationRuleResponseProperties)(nil)).Elem()
}

func (i *sbauthorizationRuleResponsePropertiesPtrType) ToSBAuthorizationRuleResponsePropertiesPtrOutput() SBAuthorizationRuleResponsePropertiesPtrOutput {
	return i.ToSBAuthorizationRuleResponsePropertiesPtrOutputWithContext(context.Background())
}

func (i *sbauthorizationRuleResponsePropertiesPtrType) ToSBAuthorizationRuleResponsePropertiesPtrOutputWithContext(ctx context.Context) SBAuthorizationRuleResponsePropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SBAuthorizationRuleResponsePropertiesPtrOutput)
}

// AuthorizationRule properties.
type SBAuthorizationRuleResponsePropertiesOutput struct{ *pulumi.OutputState }

func (SBAuthorizationRuleResponsePropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SBAuthorizationRuleResponseProperties)(nil)).Elem()
}

func (o SBAuthorizationRuleResponsePropertiesOutput) ToSBAuthorizationRuleResponsePropertiesOutput() SBAuthorizationRuleResponsePropertiesOutput {
	return o
}

func (o SBAuthorizationRuleResponsePropertiesOutput) ToSBAuthorizationRuleResponsePropertiesOutputWithContext(ctx context.Context) SBAuthorizationRuleResponsePropertiesOutput {
	return o
}

func (o SBAuthorizationRuleResponsePropertiesOutput) ToSBAuthorizationRuleResponsePropertiesPtrOutput() SBAuthorizationRuleResponsePropertiesPtrOutput {
	return o.ToSBAuthorizationRuleResponsePropertiesPtrOutputWithContext(context.Background())
}

func (o SBAuthorizationRuleResponsePropertiesOutput) ToSBAuthorizationRuleResponsePropertiesPtrOutputWithContext(ctx context.Context) SBAuthorizationRuleResponsePropertiesPtrOutput {
	return o.ApplyT(func(v SBAuthorizationRuleResponseProperties) *SBAuthorizationRuleResponseProperties {
		return &v
	}).(SBAuthorizationRuleResponsePropertiesPtrOutput)
}

// The rights associated with the rule.
func (o SBAuthorizationRuleResponsePropertiesOutput) Rights() pulumi.StringArrayOutput {
	return o.ApplyT(func(v SBAuthorizationRuleResponseProperties) []string { return v.Rights }).(pulumi.StringArrayOutput)
}

type SBAuthorizationRuleResponsePropertiesPtrOutput struct{ *pulumi.OutputState }

func (SBAuthorizationRuleResponsePropertiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SBAuthorizationRuleResponseProperties)(nil)).Elem()
}

func (o SBAuthorizationRuleResponsePropertiesPtrOutput) ToSBAuthorizationRuleResponsePropertiesPtrOutput() SBAuthorizationRuleResponsePropertiesPtrOutput {
	return o
}

func (o SBAuthorizationRuleResponsePropertiesPtrOutput) ToSBAuthorizationRuleResponsePropertiesPtrOutputWithContext(ctx context.Context) SBAuthorizationRuleResponsePropertiesPtrOutput {
	return o
}

func (o SBAuthorizationRuleResponsePropertiesPtrOutput) Elem() SBAuthorizationRuleResponsePropertiesOutput {
	return o.ApplyT(func(v *SBAuthorizationRuleResponseProperties) SBAuthorizationRuleResponseProperties { return *v }).(SBAuthorizationRuleResponsePropertiesOutput)
}

// The rights associated with the rule.
func (o SBAuthorizationRuleResponsePropertiesPtrOutput) Rights() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *SBAuthorizationRuleResponseProperties) []string {
		if v == nil {
			return nil
		}
		return v.Rights
	}).(pulumi.StringArrayOutput)
}

// Properties of the namespace.
type SBNamespaceProperties struct {
}

// SBNamespacePropertiesInput is an input type that accepts SBNamespacePropertiesArgs and SBNamespacePropertiesOutput values.
// You can construct a concrete instance of `SBNamespacePropertiesInput` via:
//
//          SBNamespacePropertiesArgs{...}
type SBNamespacePropertiesInput interface {
	pulumi.Input

	ToSBNamespacePropertiesOutput() SBNamespacePropertiesOutput
	ToSBNamespacePropertiesOutputWithContext(context.Context) SBNamespacePropertiesOutput
}

// Properties of the namespace.
type SBNamespacePropertiesArgs struct {
}

func (SBNamespacePropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SBNamespaceProperties)(nil)).Elem()
}

func (i SBNamespacePropertiesArgs) ToSBNamespacePropertiesOutput() SBNamespacePropertiesOutput {
	return i.ToSBNamespacePropertiesOutputWithContext(context.Background())
}

func (i SBNamespacePropertiesArgs) ToSBNamespacePropertiesOutputWithContext(ctx context.Context) SBNamespacePropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SBNamespacePropertiesOutput)
}

func (i SBNamespacePropertiesArgs) ToSBNamespacePropertiesPtrOutput() SBNamespacePropertiesPtrOutput {
	return i.ToSBNamespacePropertiesPtrOutputWithContext(context.Background())
}

func (i SBNamespacePropertiesArgs) ToSBNamespacePropertiesPtrOutputWithContext(ctx context.Context) SBNamespacePropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SBNamespacePropertiesOutput).ToSBNamespacePropertiesPtrOutputWithContext(ctx)
}

// SBNamespacePropertiesPtrInput is an input type that accepts SBNamespacePropertiesArgs, SBNamespacePropertiesPtr and SBNamespacePropertiesPtrOutput values.
// You can construct a concrete instance of `SBNamespacePropertiesPtrInput` via:
//
//          SBNamespacePropertiesArgs{...}
//
//  or:
//
//          nil
type SBNamespacePropertiesPtrInput interface {
	pulumi.Input

	ToSBNamespacePropertiesPtrOutput() SBNamespacePropertiesPtrOutput
	ToSBNamespacePropertiesPtrOutputWithContext(context.Context) SBNamespacePropertiesPtrOutput
}

type sbnamespacePropertiesPtrType SBNamespacePropertiesArgs

func SBNamespacePropertiesPtr(v *SBNamespacePropertiesArgs) SBNamespacePropertiesPtrInput {
	return (*sbnamespacePropertiesPtrType)(v)
}

func (*sbnamespacePropertiesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SBNamespaceProperties)(nil)).Elem()
}

func (i *sbnamespacePropertiesPtrType) ToSBNamespacePropertiesPtrOutput() SBNamespacePropertiesPtrOutput {
	return i.ToSBNamespacePropertiesPtrOutputWithContext(context.Background())
}

func (i *sbnamespacePropertiesPtrType) ToSBNamespacePropertiesPtrOutputWithContext(ctx context.Context) SBNamespacePropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SBNamespacePropertiesPtrOutput)
}

// Properties of the namespace.
type SBNamespacePropertiesOutput struct{ *pulumi.OutputState }

func (SBNamespacePropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SBNamespaceProperties)(nil)).Elem()
}

func (o SBNamespacePropertiesOutput) ToSBNamespacePropertiesOutput() SBNamespacePropertiesOutput {
	return o
}

func (o SBNamespacePropertiesOutput) ToSBNamespacePropertiesOutputWithContext(ctx context.Context) SBNamespacePropertiesOutput {
	return o
}

func (o SBNamespacePropertiesOutput) ToSBNamespacePropertiesPtrOutput() SBNamespacePropertiesPtrOutput {
	return o.ToSBNamespacePropertiesPtrOutputWithContext(context.Background())
}

func (o SBNamespacePropertiesOutput) ToSBNamespacePropertiesPtrOutputWithContext(ctx context.Context) SBNamespacePropertiesPtrOutput {
	return o.ApplyT(func(v SBNamespaceProperties) *SBNamespaceProperties {
		return &v
	}).(SBNamespacePropertiesPtrOutput)
}

type SBNamespacePropertiesPtrOutput struct{ *pulumi.OutputState }

func (SBNamespacePropertiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SBNamespaceProperties)(nil)).Elem()
}

func (o SBNamespacePropertiesPtrOutput) ToSBNamespacePropertiesPtrOutput() SBNamespacePropertiesPtrOutput {
	return o
}

func (o SBNamespacePropertiesPtrOutput) ToSBNamespacePropertiesPtrOutputWithContext(ctx context.Context) SBNamespacePropertiesPtrOutput {
	return o
}

func (o SBNamespacePropertiesPtrOutput) Elem() SBNamespacePropertiesOutput {
	return o.ApplyT(func(v *SBNamespaceProperties) SBNamespaceProperties { return *v }).(SBNamespacePropertiesOutput)
}

// Properties of the namespace.
type SBNamespacePropertiesResponse struct {
	// The time the namespace was created.
	CreatedAt string `pulumi:"createdAt"`
	// Identifier for Azure Insights metrics
	MetricId string `pulumi:"metricId"`
	// Provisioning state of the namespace.
	ProvisioningState string `pulumi:"provisioningState"`
	// Endpoint you can use to perform Service Bus operations.
	ServiceBusEndpoint string `pulumi:"serviceBusEndpoint"`
	// The time the namespace was updated.
	UpdatedAt string `pulumi:"updatedAt"`
}

// SBNamespacePropertiesResponseInput is an input type that accepts SBNamespacePropertiesResponseArgs and SBNamespacePropertiesResponseOutput values.
// You can construct a concrete instance of `SBNamespacePropertiesResponseInput` via:
//
//          SBNamespacePropertiesResponseArgs{...}
type SBNamespacePropertiesResponseInput interface {
	pulumi.Input

	ToSBNamespacePropertiesResponseOutput() SBNamespacePropertiesResponseOutput
	ToSBNamespacePropertiesResponseOutputWithContext(context.Context) SBNamespacePropertiesResponseOutput
}

// Properties of the namespace.
type SBNamespacePropertiesResponseArgs struct {
	// The time the namespace was created.
	CreatedAt pulumi.StringInput `pulumi:"createdAt"`
	// Identifier for Azure Insights metrics
	MetricId pulumi.StringInput `pulumi:"metricId"`
	// Provisioning state of the namespace.
	ProvisioningState pulumi.StringInput `pulumi:"provisioningState"`
	// Endpoint you can use to perform Service Bus operations.
	ServiceBusEndpoint pulumi.StringInput `pulumi:"serviceBusEndpoint"`
	// The time the namespace was updated.
	UpdatedAt pulumi.StringInput `pulumi:"updatedAt"`
}

func (SBNamespacePropertiesResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SBNamespacePropertiesResponse)(nil)).Elem()
}

func (i SBNamespacePropertiesResponseArgs) ToSBNamespacePropertiesResponseOutput() SBNamespacePropertiesResponseOutput {
	return i.ToSBNamespacePropertiesResponseOutputWithContext(context.Background())
}

func (i SBNamespacePropertiesResponseArgs) ToSBNamespacePropertiesResponseOutputWithContext(ctx context.Context) SBNamespacePropertiesResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SBNamespacePropertiesResponseOutput)
}

func (i SBNamespacePropertiesResponseArgs) ToSBNamespacePropertiesResponsePtrOutput() SBNamespacePropertiesResponsePtrOutput {
	return i.ToSBNamespacePropertiesResponsePtrOutputWithContext(context.Background())
}

func (i SBNamespacePropertiesResponseArgs) ToSBNamespacePropertiesResponsePtrOutputWithContext(ctx context.Context) SBNamespacePropertiesResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SBNamespacePropertiesResponseOutput).ToSBNamespacePropertiesResponsePtrOutputWithContext(ctx)
}

// SBNamespacePropertiesResponsePtrInput is an input type that accepts SBNamespacePropertiesResponseArgs, SBNamespacePropertiesResponsePtr and SBNamespacePropertiesResponsePtrOutput values.
// You can construct a concrete instance of `SBNamespacePropertiesResponsePtrInput` via:
//
//          SBNamespacePropertiesResponseArgs{...}
//
//  or:
//
//          nil
type SBNamespacePropertiesResponsePtrInput interface {
	pulumi.Input

	ToSBNamespacePropertiesResponsePtrOutput() SBNamespacePropertiesResponsePtrOutput
	ToSBNamespacePropertiesResponsePtrOutputWithContext(context.Context) SBNamespacePropertiesResponsePtrOutput
}

type sbnamespacePropertiesResponsePtrType SBNamespacePropertiesResponseArgs

func SBNamespacePropertiesResponsePtr(v *SBNamespacePropertiesResponseArgs) SBNamespacePropertiesResponsePtrInput {
	return (*sbnamespacePropertiesResponsePtrType)(v)
}

func (*sbnamespacePropertiesResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SBNamespacePropertiesResponse)(nil)).Elem()
}

func (i *sbnamespacePropertiesResponsePtrType) ToSBNamespacePropertiesResponsePtrOutput() SBNamespacePropertiesResponsePtrOutput {
	return i.ToSBNamespacePropertiesResponsePtrOutputWithContext(context.Background())
}

func (i *sbnamespacePropertiesResponsePtrType) ToSBNamespacePropertiesResponsePtrOutputWithContext(ctx context.Context) SBNamespacePropertiesResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SBNamespacePropertiesResponsePtrOutput)
}

// Properties of the namespace.
type SBNamespacePropertiesResponseOutput struct{ *pulumi.OutputState }

func (SBNamespacePropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SBNamespacePropertiesResponse)(nil)).Elem()
}

func (o SBNamespacePropertiesResponseOutput) ToSBNamespacePropertiesResponseOutput() SBNamespacePropertiesResponseOutput {
	return o
}

func (o SBNamespacePropertiesResponseOutput) ToSBNamespacePropertiesResponseOutputWithContext(ctx context.Context) SBNamespacePropertiesResponseOutput {
	return o
}

func (o SBNamespacePropertiesResponseOutput) ToSBNamespacePropertiesResponsePtrOutput() SBNamespacePropertiesResponsePtrOutput {
	return o.ToSBNamespacePropertiesResponsePtrOutputWithContext(context.Background())
}

func (o SBNamespacePropertiesResponseOutput) ToSBNamespacePropertiesResponsePtrOutputWithContext(ctx context.Context) SBNamespacePropertiesResponsePtrOutput {
	return o.ApplyT(func(v SBNamespacePropertiesResponse) *SBNamespacePropertiesResponse {
		return &v
	}).(SBNamespacePropertiesResponsePtrOutput)
}

// The time the namespace was created.
func (o SBNamespacePropertiesResponseOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v SBNamespacePropertiesResponse) string { return v.CreatedAt }).(pulumi.StringOutput)
}

// Identifier for Azure Insights metrics
func (o SBNamespacePropertiesResponseOutput) MetricId() pulumi.StringOutput {
	return o.ApplyT(func(v SBNamespacePropertiesResponse) string { return v.MetricId }).(pulumi.StringOutput)
}

// Provisioning state of the namespace.
func (o SBNamespacePropertiesResponseOutput) ProvisioningState() pulumi.StringOutput {
	return o.ApplyT(func(v SBNamespacePropertiesResponse) string { return v.ProvisioningState }).(pulumi.StringOutput)
}

// Endpoint you can use to perform Service Bus operations.
func (o SBNamespacePropertiesResponseOutput) ServiceBusEndpoint() pulumi.StringOutput {
	return o.ApplyT(func(v SBNamespacePropertiesResponse) string { return v.ServiceBusEndpoint }).(pulumi.StringOutput)
}

// The time the namespace was updated.
func (o SBNamespacePropertiesResponseOutput) UpdatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v SBNamespacePropertiesResponse) string { return v.UpdatedAt }).(pulumi.StringOutput)
}

type SBNamespacePropertiesResponsePtrOutput struct{ *pulumi.OutputState }

func (SBNamespacePropertiesResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SBNamespacePropertiesResponse)(nil)).Elem()
}

func (o SBNamespacePropertiesResponsePtrOutput) ToSBNamespacePropertiesResponsePtrOutput() SBNamespacePropertiesResponsePtrOutput {
	return o
}

func (o SBNamespacePropertiesResponsePtrOutput) ToSBNamespacePropertiesResponsePtrOutputWithContext(ctx context.Context) SBNamespacePropertiesResponsePtrOutput {
	return o
}

func (o SBNamespacePropertiesResponsePtrOutput) Elem() SBNamespacePropertiesResponseOutput {
	return o.ApplyT(func(v *SBNamespacePropertiesResponse) SBNamespacePropertiesResponse { return *v }).(SBNamespacePropertiesResponseOutput)
}

// The time the namespace was created.
func (o SBNamespacePropertiesResponsePtrOutput) CreatedAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SBNamespacePropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return &v.CreatedAt
	}).(pulumi.StringPtrOutput)
}

// Identifier for Azure Insights metrics
func (o SBNamespacePropertiesResponsePtrOutput) MetricId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SBNamespacePropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return &v.MetricId
	}).(pulumi.StringPtrOutput)
}

// Provisioning state of the namespace.
func (o SBNamespacePropertiesResponsePtrOutput) ProvisioningState() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SBNamespacePropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return &v.ProvisioningState
	}).(pulumi.StringPtrOutput)
}

// Endpoint you can use to perform Service Bus operations.
func (o SBNamespacePropertiesResponsePtrOutput) ServiceBusEndpoint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SBNamespacePropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return &v.ServiceBusEndpoint
	}).(pulumi.StringPtrOutput)
}

// The time the namespace was updated.
func (o SBNamespacePropertiesResponsePtrOutput) UpdatedAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SBNamespacePropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return &v.UpdatedAt
	}).(pulumi.StringPtrOutput)
}

// The Queue Properties definition.
type SBQueueProperties struct {
	// ISO 8061 timeSpan idle interval after which the queue is automatically deleted. The minimum duration is 5 minutes.
	AutoDeleteOnIdle *string `pulumi:"autoDeleteOnIdle"`
	// A value that indicates whether this queue has dead letter support when a message expires.
	DeadLetteringOnMessageExpiration *bool `pulumi:"deadLetteringOnMessageExpiration"`
	// ISO 8601 default message timespan to live value. This is the duration after which the message expires, starting from when the message is sent to Service Bus. This is the default value used when TimeToLive is not set on a message itself.
	DefaultMessageTimeToLive *string `pulumi:"defaultMessageTimeToLive"`
	// ISO 8601 timeSpan structure that defines the duration of the duplicate detection history. The default value is 10 minutes.
	DuplicateDetectionHistoryTimeWindow *string `pulumi:"duplicateDetectionHistoryTimeWindow"`
	// Value that indicates whether server-side batched operations are enabled.
	EnableBatchedOperations *bool `pulumi:"enableBatchedOperations"`
	// A value that indicates whether Express Entities are enabled. An express queue holds a message in memory temporarily before writing it to persistent storage.
	EnableExpress *bool `pulumi:"enableExpress"`
	// A value that indicates whether the queue is to be partitioned across multiple message brokers.
	EnablePartitioning *bool `pulumi:"enablePartitioning"`
	// Queue/Topic name to forward the Dead Letter message
	ForwardDeadLetteredMessagesTo *string `pulumi:"forwardDeadLetteredMessagesTo"`
	// Queue/Topic name to forward the messages
	ForwardTo *string `pulumi:"forwardTo"`
	// ISO 8601 timespan duration of a peek-lock; that is, the amount of time that the message is locked for other receivers. The maximum value for LockDuration is 5 minutes; the default value is 1 minute.
	LockDuration *string `pulumi:"lockDuration"`
	// The maximum delivery count. A message is automatically deadlettered after this number of deliveries. default value is 10.
	MaxDeliveryCount *int `pulumi:"maxDeliveryCount"`
	// The maximum size of the queue in megabytes, which is the size of memory allocated for the queue. Default is 1024.
	MaxSizeInMegabytes *int `pulumi:"maxSizeInMegabytes"`
	// A value indicating if this queue requires duplicate detection.
	RequiresDuplicateDetection *bool `pulumi:"requiresDuplicateDetection"`
	// A value that indicates whether the queue supports the concept of sessions.
	RequiresSession *bool `pulumi:"requiresSession"`
	// Enumerates the possible values for the status of a messaging entity.
	Status *string `pulumi:"status"`
}

// SBQueuePropertiesInput is an input type that accepts SBQueuePropertiesArgs and SBQueuePropertiesOutput values.
// You can construct a concrete instance of `SBQueuePropertiesInput` via:
//
//          SBQueuePropertiesArgs{...}
type SBQueuePropertiesInput interface {
	pulumi.Input

	ToSBQueuePropertiesOutput() SBQueuePropertiesOutput
	ToSBQueuePropertiesOutputWithContext(context.Context) SBQueuePropertiesOutput
}

// The Queue Properties definition.
type SBQueuePropertiesArgs struct {
	// ISO 8061 timeSpan idle interval after which the queue is automatically deleted. The minimum duration is 5 minutes.
	AutoDeleteOnIdle pulumi.StringPtrInput `pulumi:"autoDeleteOnIdle"`
	// A value that indicates whether this queue has dead letter support when a message expires.
	DeadLetteringOnMessageExpiration pulumi.BoolPtrInput `pulumi:"deadLetteringOnMessageExpiration"`
	// ISO 8601 default message timespan to live value. This is the duration after which the message expires, starting from when the message is sent to Service Bus. This is the default value used when TimeToLive is not set on a message itself.
	DefaultMessageTimeToLive pulumi.StringPtrInput `pulumi:"defaultMessageTimeToLive"`
	// ISO 8601 timeSpan structure that defines the duration of the duplicate detection history. The default value is 10 minutes.
	DuplicateDetectionHistoryTimeWindow pulumi.StringPtrInput `pulumi:"duplicateDetectionHistoryTimeWindow"`
	// Value that indicates whether server-side batched operations are enabled.
	EnableBatchedOperations pulumi.BoolPtrInput `pulumi:"enableBatchedOperations"`
	// A value that indicates whether Express Entities are enabled. An express queue holds a message in memory temporarily before writing it to persistent storage.
	EnableExpress pulumi.BoolPtrInput `pulumi:"enableExpress"`
	// A value that indicates whether the queue is to be partitioned across multiple message brokers.
	EnablePartitioning pulumi.BoolPtrInput `pulumi:"enablePartitioning"`
	// Queue/Topic name to forward the Dead Letter message
	ForwardDeadLetteredMessagesTo pulumi.StringPtrInput `pulumi:"forwardDeadLetteredMessagesTo"`
	// Queue/Topic name to forward the messages
	ForwardTo pulumi.StringPtrInput `pulumi:"forwardTo"`
	// ISO 8601 timespan duration of a peek-lock; that is, the amount of time that the message is locked for other receivers. The maximum value for LockDuration is 5 minutes; the default value is 1 minute.
	LockDuration pulumi.StringPtrInput `pulumi:"lockDuration"`
	// The maximum delivery count. A message is automatically deadlettered after this number of deliveries. default value is 10.
	MaxDeliveryCount pulumi.IntPtrInput `pulumi:"maxDeliveryCount"`
	// The maximum size of the queue in megabytes, which is the size of memory allocated for the queue. Default is 1024.
	MaxSizeInMegabytes pulumi.IntPtrInput `pulumi:"maxSizeInMegabytes"`
	// A value indicating if this queue requires duplicate detection.
	RequiresDuplicateDetection pulumi.BoolPtrInput `pulumi:"requiresDuplicateDetection"`
	// A value that indicates whether the queue supports the concept of sessions.
	RequiresSession pulumi.BoolPtrInput `pulumi:"requiresSession"`
	// Enumerates the possible values for the status of a messaging entity.
	Status pulumi.StringPtrInput `pulumi:"status"`
}

func (SBQueuePropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SBQueueProperties)(nil)).Elem()
}

func (i SBQueuePropertiesArgs) ToSBQueuePropertiesOutput() SBQueuePropertiesOutput {
	return i.ToSBQueuePropertiesOutputWithContext(context.Background())
}

func (i SBQueuePropertiesArgs) ToSBQueuePropertiesOutputWithContext(ctx context.Context) SBQueuePropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SBQueuePropertiesOutput)
}

func (i SBQueuePropertiesArgs) ToSBQueuePropertiesPtrOutput() SBQueuePropertiesPtrOutput {
	return i.ToSBQueuePropertiesPtrOutputWithContext(context.Background())
}

func (i SBQueuePropertiesArgs) ToSBQueuePropertiesPtrOutputWithContext(ctx context.Context) SBQueuePropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SBQueuePropertiesOutput).ToSBQueuePropertiesPtrOutputWithContext(ctx)
}

// SBQueuePropertiesPtrInput is an input type that accepts SBQueuePropertiesArgs, SBQueuePropertiesPtr and SBQueuePropertiesPtrOutput values.
// You can construct a concrete instance of `SBQueuePropertiesPtrInput` via:
//
//          SBQueuePropertiesArgs{...}
//
//  or:
//
//          nil
type SBQueuePropertiesPtrInput interface {
	pulumi.Input

	ToSBQueuePropertiesPtrOutput() SBQueuePropertiesPtrOutput
	ToSBQueuePropertiesPtrOutputWithContext(context.Context) SBQueuePropertiesPtrOutput
}

type sbqueuePropertiesPtrType SBQueuePropertiesArgs

func SBQueuePropertiesPtr(v *SBQueuePropertiesArgs) SBQueuePropertiesPtrInput {
	return (*sbqueuePropertiesPtrType)(v)
}

func (*sbqueuePropertiesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SBQueueProperties)(nil)).Elem()
}

func (i *sbqueuePropertiesPtrType) ToSBQueuePropertiesPtrOutput() SBQueuePropertiesPtrOutput {
	return i.ToSBQueuePropertiesPtrOutputWithContext(context.Background())
}

func (i *sbqueuePropertiesPtrType) ToSBQueuePropertiesPtrOutputWithContext(ctx context.Context) SBQueuePropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SBQueuePropertiesPtrOutput)
}

// The Queue Properties definition.
type SBQueuePropertiesOutput struct{ *pulumi.OutputState }

func (SBQueuePropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SBQueueProperties)(nil)).Elem()
}

func (o SBQueuePropertiesOutput) ToSBQueuePropertiesOutput() SBQueuePropertiesOutput {
	return o
}

func (o SBQueuePropertiesOutput) ToSBQueuePropertiesOutputWithContext(ctx context.Context) SBQueuePropertiesOutput {
	return o
}

func (o SBQueuePropertiesOutput) ToSBQueuePropertiesPtrOutput() SBQueuePropertiesPtrOutput {
	return o.ToSBQueuePropertiesPtrOutputWithContext(context.Background())
}

func (o SBQueuePropertiesOutput) ToSBQueuePropertiesPtrOutputWithContext(ctx context.Context) SBQueuePropertiesPtrOutput {
	return o.ApplyT(func(v SBQueueProperties) *SBQueueProperties {
		return &v
	}).(SBQueuePropertiesPtrOutput)
}

// ISO 8061 timeSpan idle interval after which the queue is automatically deleted. The minimum duration is 5 minutes.
func (o SBQueuePropertiesOutput) AutoDeleteOnIdle() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SBQueueProperties) *string { return v.AutoDeleteOnIdle }).(pulumi.StringPtrOutput)
}

// A value that indicates whether this queue has dead letter support when a message expires.
func (o SBQueuePropertiesOutput) DeadLetteringOnMessageExpiration() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SBQueueProperties) *bool { return v.DeadLetteringOnMessageExpiration }).(pulumi.BoolPtrOutput)
}

// ISO 8601 default message timespan to live value. This is the duration after which the message expires, starting from when the message is sent to Service Bus. This is the default value used when TimeToLive is not set on a message itself.
func (o SBQueuePropertiesOutput) DefaultMessageTimeToLive() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SBQueueProperties) *string { return v.DefaultMessageTimeToLive }).(pulumi.StringPtrOutput)
}

// ISO 8601 timeSpan structure that defines the duration of the duplicate detection history. The default value is 10 minutes.
func (o SBQueuePropertiesOutput) DuplicateDetectionHistoryTimeWindow() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SBQueueProperties) *string { return v.DuplicateDetectionHistoryTimeWindow }).(pulumi.StringPtrOutput)
}

// Value that indicates whether server-side batched operations are enabled.
func (o SBQueuePropertiesOutput) EnableBatchedOperations() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SBQueueProperties) *bool { return v.EnableBatchedOperations }).(pulumi.BoolPtrOutput)
}

// A value that indicates whether Express Entities are enabled. An express queue holds a message in memory temporarily before writing it to persistent storage.
func (o SBQueuePropertiesOutput) EnableExpress() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SBQueueProperties) *bool { return v.EnableExpress }).(pulumi.BoolPtrOutput)
}

// A value that indicates whether the queue is to be partitioned across multiple message brokers.
func (o SBQueuePropertiesOutput) EnablePartitioning() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SBQueueProperties) *bool { return v.EnablePartitioning }).(pulumi.BoolPtrOutput)
}

// Queue/Topic name to forward the Dead Letter message
func (o SBQueuePropertiesOutput) ForwardDeadLetteredMessagesTo() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SBQueueProperties) *string { return v.ForwardDeadLetteredMessagesTo }).(pulumi.StringPtrOutput)
}

// Queue/Topic name to forward the messages
func (o SBQueuePropertiesOutput) ForwardTo() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SBQueueProperties) *string { return v.ForwardTo }).(pulumi.StringPtrOutput)
}

// ISO 8601 timespan duration of a peek-lock; that is, the amount of time that the message is locked for other receivers. The maximum value for LockDuration is 5 minutes; the default value is 1 minute.
func (o SBQueuePropertiesOutput) LockDuration() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SBQueueProperties) *string { return v.LockDuration }).(pulumi.StringPtrOutput)
}

// The maximum delivery count. A message is automatically deadlettered after this number of deliveries. default value is 10.
func (o SBQueuePropertiesOutput) MaxDeliveryCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SBQueueProperties) *int { return v.MaxDeliveryCount }).(pulumi.IntPtrOutput)
}

// The maximum size of the queue in megabytes, which is the size of memory allocated for the queue. Default is 1024.
func (o SBQueuePropertiesOutput) MaxSizeInMegabytes() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SBQueueProperties) *int { return v.MaxSizeInMegabytes }).(pulumi.IntPtrOutput)
}

// A value indicating if this queue requires duplicate detection.
func (o SBQueuePropertiesOutput) RequiresDuplicateDetection() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SBQueueProperties) *bool { return v.RequiresDuplicateDetection }).(pulumi.BoolPtrOutput)
}

// A value that indicates whether the queue supports the concept of sessions.
func (o SBQueuePropertiesOutput) RequiresSession() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SBQueueProperties) *bool { return v.RequiresSession }).(pulumi.BoolPtrOutput)
}

// Enumerates the possible values for the status of a messaging entity.
func (o SBQueuePropertiesOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SBQueueProperties) *string { return v.Status }).(pulumi.StringPtrOutput)
}

type SBQueuePropertiesPtrOutput struct{ *pulumi.OutputState }

func (SBQueuePropertiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SBQueueProperties)(nil)).Elem()
}

func (o SBQueuePropertiesPtrOutput) ToSBQueuePropertiesPtrOutput() SBQueuePropertiesPtrOutput {
	return o
}

func (o SBQueuePropertiesPtrOutput) ToSBQueuePropertiesPtrOutputWithContext(ctx context.Context) SBQueuePropertiesPtrOutput {
	return o
}

func (o SBQueuePropertiesPtrOutput) Elem() SBQueuePropertiesOutput {
	return o.ApplyT(func(v *SBQueueProperties) SBQueueProperties { return *v }).(SBQueuePropertiesOutput)
}

// ISO 8061 timeSpan idle interval after which the queue is automatically deleted. The minimum duration is 5 minutes.
func (o SBQueuePropertiesPtrOutput) AutoDeleteOnIdle() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SBQueueProperties) *string {
		if v == nil {
			return nil
		}
		return v.AutoDeleteOnIdle
	}).(pulumi.StringPtrOutput)
}

// A value that indicates whether this queue has dead letter support when a message expires.
func (o SBQueuePropertiesPtrOutput) DeadLetteringOnMessageExpiration() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SBQueueProperties) *bool {
		if v == nil {
			return nil
		}
		return v.DeadLetteringOnMessageExpiration
	}).(pulumi.BoolPtrOutput)
}

// ISO 8601 default message timespan to live value. This is the duration after which the message expires, starting from when the message is sent to Service Bus. This is the default value used when TimeToLive is not set on a message itself.
func (o SBQueuePropertiesPtrOutput) DefaultMessageTimeToLive() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SBQueueProperties) *string {
		if v == nil {
			return nil
		}
		return v.DefaultMessageTimeToLive
	}).(pulumi.StringPtrOutput)
}

// ISO 8601 timeSpan structure that defines the duration of the duplicate detection history. The default value is 10 minutes.
func (o SBQueuePropertiesPtrOutput) DuplicateDetectionHistoryTimeWindow() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SBQueueProperties) *string {
		if v == nil {
			return nil
		}
		return v.DuplicateDetectionHistoryTimeWindow
	}).(pulumi.StringPtrOutput)
}

// Value that indicates whether server-side batched operations are enabled.
func (o SBQueuePropertiesPtrOutput) EnableBatchedOperations() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SBQueueProperties) *bool {
		if v == nil {
			return nil
		}
		return v.EnableBatchedOperations
	}).(pulumi.BoolPtrOutput)
}

// A value that indicates whether Express Entities are enabled. An express queue holds a message in memory temporarily before writing it to persistent storage.
func (o SBQueuePropertiesPtrOutput) EnableExpress() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SBQueueProperties) *bool {
		if v == nil {
			return nil
		}
		return v.EnableExpress
	}).(pulumi.BoolPtrOutput)
}

// A value that indicates whether the queue is to be partitioned across multiple message brokers.
func (o SBQueuePropertiesPtrOutput) EnablePartitioning() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SBQueueProperties) *bool {
		if v == nil {
			return nil
		}
		return v.EnablePartitioning
	}).(pulumi.BoolPtrOutput)
}

// Queue/Topic name to forward the Dead Letter message
func (o SBQueuePropertiesPtrOutput) ForwardDeadLetteredMessagesTo() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SBQueueProperties) *string {
		if v == nil {
			return nil
		}
		return v.ForwardDeadLetteredMessagesTo
	}).(pulumi.StringPtrOutput)
}

// Queue/Topic name to forward the messages
func (o SBQueuePropertiesPtrOutput) ForwardTo() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SBQueueProperties) *string {
		if v == nil {
			return nil
		}
		return v.ForwardTo
	}).(pulumi.StringPtrOutput)
}

// ISO 8601 timespan duration of a peek-lock; that is, the amount of time that the message is locked for other receivers. The maximum value for LockDuration is 5 minutes; the default value is 1 minute.
func (o SBQueuePropertiesPtrOutput) LockDuration() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SBQueueProperties) *string {
		if v == nil {
			return nil
		}
		return v.LockDuration
	}).(pulumi.StringPtrOutput)
}

// The maximum delivery count. A message is automatically deadlettered after this number of deliveries. default value is 10.
func (o SBQueuePropertiesPtrOutput) MaxDeliveryCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SBQueueProperties) *int {
		if v == nil {
			return nil
		}
		return v.MaxDeliveryCount
	}).(pulumi.IntPtrOutput)
}

// The maximum size of the queue in megabytes, which is the size of memory allocated for the queue. Default is 1024.
func (o SBQueuePropertiesPtrOutput) MaxSizeInMegabytes() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SBQueueProperties) *int {
		if v == nil {
			return nil
		}
		return v.MaxSizeInMegabytes
	}).(pulumi.IntPtrOutput)
}

// A value indicating if this queue requires duplicate detection.
func (o SBQueuePropertiesPtrOutput) RequiresDuplicateDetection() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SBQueueProperties) *bool {
		if v == nil {
			return nil
		}
		return v.RequiresDuplicateDetection
	}).(pulumi.BoolPtrOutput)
}

// A value that indicates whether the queue supports the concept of sessions.
func (o SBQueuePropertiesPtrOutput) RequiresSession() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SBQueueProperties) *bool {
		if v == nil {
			return nil
		}
		return v.RequiresSession
	}).(pulumi.BoolPtrOutput)
}

// Enumerates the possible values for the status of a messaging entity.
func (o SBQueuePropertiesPtrOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SBQueueProperties) *string {
		if v == nil {
			return nil
		}
		return v.Status
	}).(pulumi.StringPtrOutput)
}

// The Queue Properties definition.
type SBQueuePropertiesResponse struct {
	// Last time a message was sent, or the last time there was a receive request to this queue.
	AccessedAt string `pulumi:"accessedAt"`
	// ISO 8061 timeSpan idle interval after which the queue is automatically deleted. The minimum duration is 5 minutes.
	AutoDeleteOnIdle *string `pulumi:"autoDeleteOnIdle"`
	// Message Count Details.
	CountDetails MessageCountDetailsResponse `pulumi:"countDetails"`
	// The exact time the message was created.
	CreatedAt string `pulumi:"createdAt"`
	// A value that indicates whether this queue has dead letter support when a message expires.
	DeadLetteringOnMessageExpiration *bool `pulumi:"deadLetteringOnMessageExpiration"`
	// ISO 8601 default message timespan to live value. This is the duration after which the message expires, starting from when the message is sent to Service Bus. This is the default value used when TimeToLive is not set on a message itself.
	DefaultMessageTimeToLive *string `pulumi:"defaultMessageTimeToLive"`
	// ISO 8601 timeSpan structure that defines the duration of the duplicate detection history. The default value is 10 minutes.
	DuplicateDetectionHistoryTimeWindow *string `pulumi:"duplicateDetectionHistoryTimeWindow"`
	// Value that indicates whether server-side batched operations are enabled.
	EnableBatchedOperations *bool `pulumi:"enableBatchedOperations"`
	// A value that indicates whether Express Entities are enabled. An express queue holds a message in memory temporarily before writing it to persistent storage.
	EnableExpress *bool `pulumi:"enableExpress"`
	// A value that indicates whether the queue is to be partitioned across multiple message brokers.
	EnablePartitioning *bool `pulumi:"enablePartitioning"`
	// Queue/Topic name to forward the Dead Letter message
	ForwardDeadLetteredMessagesTo *string `pulumi:"forwardDeadLetteredMessagesTo"`
	// Queue/Topic name to forward the messages
	ForwardTo *string `pulumi:"forwardTo"`
	// ISO 8601 timespan duration of a peek-lock; that is, the amount of time that the message is locked for other receivers. The maximum value for LockDuration is 5 minutes; the default value is 1 minute.
	LockDuration *string `pulumi:"lockDuration"`
	// The maximum delivery count. A message is automatically deadlettered after this number of deliveries. default value is 10.
	MaxDeliveryCount *int `pulumi:"maxDeliveryCount"`
	// The maximum size of the queue in megabytes, which is the size of memory allocated for the queue. Default is 1024.
	MaxSizeInMegabytes *int `pulumi:"maxSizeInMegabytes"`
	// The number of messages in the queue.
	MessageCount int `pulumi:"messageCount"`
	// A value indicating if this queue requires duplicate detection.
	RequiresDuplicateDetection *bool `pulumi:"requiresDuplicateDetection"`
	// A value that indicates whether the queue supports the concept of sessions.
	RequiresSession *bool `pulumi:"requiresSession"`
	// The size of the queue, in bytes.
	SizeInBytes int `pulumi:"sizeInBytes"`
	// Enumerates the possible values for the status of a messaging entity.
	Status *string `pulumi:"status"`
	// The exact time the message was updated.
	UpdatedAt string `pulumi:"updatedAt"`
}

// SBQueuePropertiesResponseInput is an input type that accepts SBQueuePropertiesResponseArgs and SBQueuePropertiesResponseOutput values.
// You can construct a concrete instance of `SBQueuePropertiesResponseInput` via:
//
//          SBQueuePropertiesResponseArgs{...}
type SBQueuePropertiesResponseInput interface {
	pulumi.Input

	ToSBQueuePropertiesResponseOutput() SBQueuePropertiesResponseOutput
	ToSBQueuePropertiesResponseOutputWithContext(context.Context) SBQueuePropertiesResponseOutput
}

// The Queue Properties definition.
type SBQueuePropertiesResponseArgs struct {
	// Last time a message was sent, or the last time there was a receive request to this queue.
	AccessedAt pulumi.StringInput `pulumi:"accessedAt"`
	// ISO 8061 timeSpan idle interval after which the queue is automatically deleted. The minimum duration is 5 minutes.
	AutoDeleteOnIdle pulumi.StringPtrInput `pulumi:"autoDeleteOnIdle"`
	// Message Count Details.
	CountDetails MessageCountDetailsResponseInput `pulumi:"countDetails"`
	// The exact time the message was created.
	CreatedAt pulumi.StringInput `pulumi:"createdAt"`
	// A value that indicates whether this queue has dead letter support when a message expires.
	DeadLetteringOnMessageExpiration pulumi.BoolPtrInput `pulumi:"deadLetteringOnMessageExpiration"`
	// ISO 8601 default message timespan to live value. This is the duration after which the message expires, starting from when the message is sent to Service Bus. This is the default value used when TimeToLive is not set on a message itself.
	DefaultMessageTimeToLive pulumi.StringPtrInput `pulumi:"defaultMessageTimeToLive"`
	// ISO 8601 timeSpan structure that defines the duration of the duplicate detection history. The default value is 10 minutes.
	DuplicateDetectionHistoryTimeWindow pulumi.StringPtrInput `pulumi:"duplicateDetectionHistoryTimeWindow"`
	// Value that indicates whether server-side batched operations are enabled.
	EnableBatchedOperations pulumi.BoolPtrInput `pulumi:"enableBatchedOperations"`
	// A value that indicates whether Express Entities are enabled. An express queue holds a message in memory temporarily before writing it to persistent storage.
	EnableExpress pulumi.BoolPtrInput `pulumi:"enableExpress"`
	// A value that indicates whether the queue is to be partitioned across multiple message brokers.
	EnablePartitioning pulumi.BoolPtrInput `pulumi:"enablePartitioning"`
	// Queue/Topic name to forward the Dead Letter message
	ForwardDeadLetteredMessagesTo pulumi.StringPtrInput `pulumi:"forwardDeadLetteredMessagesTo"`
	// Queue/Topic name to forward the messages
	ForwardTo pulumi.StringPtrInput `pulumi:"forwardTo"`
	// ISO 8601 timespan duration of a peek-lock; that is, the amount of time that the message is locked for other receivers. The maximum value for LockDuration is 5 minutes; the default value is 1 minute.
	LockDuration pulumi.StringPtrInput `pulumi:"lockDuration"`
	// The maximum delivery count. A message is automatically deadlettered after this number of deliveries. default value is 10.
	MaxDeliveryCount pulumi.IntPtrInput `pulumi:"maxDeliveryCount"`
	// The maximum size of the queue in megabytes, which is the size of memory allocated for the queue. Default is 1024.
	MaxSizeInMegabytes pulumi.IntPtrInput `pulumi:"maxSizeInMegabytes"`
	// The number of messages in the queue.
	MessageCount pulumi.IntInput `pulumi:"messageCount"`
	// A value indicating if this queue requires duplicate detection.
	RequiresDuplicateDetection pulumi.BoolPtrInput `pulumi:"requiresDuplicateDetection"`
	// A value that indicates whether the queue supports the concept of sessions.
	RequiresSession pulumi.BoolPtrInput `pulumi:"requiresSession"`
	// The size of the queue, in bytes.
	SizeInBytes pulumi.IntInput `pulumi:"sizeInBytes"`
	// Enumerates the possible values for the status of a messaging entity.
	Status pulumi.StringPtrInput `pulumi:"status"`
	// The exact time the message was updated.
	UpdatedAt pulumi.StringInput `pulumi:"updatedAt"`
}

func (SBQueuePropertiesResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SBQueuePropertiesResponse)(nil)).Elem()
}

func (i SBQueuePropertiesResponseArgs) ToSBQueuePropertiesResponseOutput() SBQueuePropertiesResponseOutput {
	return i.ToSBQueuePropertiesResponseOutputWithContext(context.Background())
}

func (i SBQueuePropertiesResponseArgs) ToSBQueuePropertiesResponseOutputWithContext(ctx context.Context) SBQueuePropertiesResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SBQueuePropertiesResponseOutput)
}

func (i SBQueuePropertiesResponseArgs) ToSBQueuePropertiesResponsePtrOutput() SBQueuePropertiesResponsePtrOutput {
	return i.ToSBQueuePropertiesResponsePtrOutputWithContext(context.Background())
}

func (i SBQueuePropertiesResponseArgs) ToSBQueuePropertiesResponsePtrOutputWithContext(ctx context.Context) SBQueuePropertiesResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SBQueuePropertiesResponseOutput).ToSBQueuePropertiesResponsePtrOutputWithContext(ctx)
}

// SBQueuePropertiesResponsePtrInput is an input type that accepts SBQueuePropertiesResponseArgs, SBQueuePropertiesResponsePtr and SBQueuePropertiesResponsePtrOutput values.
// You can construct a concrete instance of `SBQueuePropertiesResponsePtrInput` via:
//
//          SBQueuePropertiesResponseArgs{...}
//
//  or:
//
//          nil
type SBQueuePropertiesResponsePtrInput interface {
	pulumi.Input

	ToSBQueuePropertiesResponsePtrOutput() SBQueuePropertiesResponsePtrOutput
	ToSBQueuePropertiesResponsePtrOutputWithContext(context.Context) SBQueuePropertiesResponsePtrOutput
}

type sbqueuePropertiesResponsePtrType SBQueuePropertiesResponseArgs

func SBQueuePropertiesResponsePtr(v *SBQueuePropertiesResponseArgs) SBQueuePropertiesResponsePtrInput {
	return (*sbqueuePropertiesResponsePtrType)(v)
}

func (*sbqueuePropertiesResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SBQueuePropertiesResponse)(nil)).Elem()
}

func (i *sbqueuePropertiesResponsePtrType) ToSBQueuePropertiesResponsePtrOutput() SBQueuePropertiesResponsePtrOutput {
	return i.ToSBQueuePropertiesResponsePtrOutputWithContext(context.Background())
}

func (i *sbqueuePropertiesResponsePtrType) ToSBQueuePropertiesResponsePtrOutputWithContext(ctx context.Context) SBQueuePropertiesResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SBQueuePropertiesResponsePtrOutput)
}

// The Queue Properties definition.
type SBQueuePropertiesResponseOutput struct{ *pulumi.OutputState }

func (SBQueuePropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SBQueuePropertiesResponse)(nil)).Elem()
}

func (o SBQueuePropertiesResponseOutput) ToSBQueuePropertiesResponseOutput() SBQueuePropertiesResponseOutput {
	return o
}

func (o SBQueuePropertiesResponseOutput) ToSBQueuePropertiesResponseOutputWithContext(ctx context.Context) SBQueuePropertiesResponseOutput {
	return o
}

func (o SBQueuePropertiesResponseOutput) ToSBQueuePropertiesResponsePtrOutput() SBQueuePropertiesResponsePtrOutput {
	return o.ToSBQueuePropertiesResponsePtrOutputWithContext(context.Background())
}

func (o SBQueuePropertiesResponseOutput) ToSBQueuePropertiesResponsePtrOutputWithContext(ctx context.Context) SBQueuePropertiesResponsePtrOutput {
	return o.ApplyT(func(v SBQueuePropertiesResponse) *SBQueuePropertiesResponse {
		return &v
	}).(SBQueuePropertiesResponsePtrOutput)
}

// Last time a message was sent, or the last time there was a receive request to this queue.
func (o SBQueuePropertiesResponseOutput) AccessedAt() pulumi.StringOutput {
	return o.ApplyT(func(v SBQueuePropertiesResponse) string { return v.AccessedAt }).(pulumi.StringOutput)
}

// ISO 8061 timeSpan idle interval after which the queue is automatically deleted. The minimum duration is 5 minutes.
func (o SBQueuePropertiesResponseOutput) AutoDeleteOnIdle() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SBQueuePropertiesResponse) *string { return v.AutoDeleteOnIdle }).(pulumi.StringPtrOutput)
}

// Message Count Details.
func (o SBQueuePropertiesResponseOutput) CountDetails() MessageCountDetailsResponseOutput {
	return o.ApplyT(func(v SBQueuePropertiesResponse) MessageCountDetailsResponse { return v.CountDetails }).(MessageCountDetailsResponseOutput)
}

// The exact time the message was created.
func (o SBQueuePropertiesResponseOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v SBQueuePropertiesResponse) string { return v.CreatedAt }).(pulumi.StringOutput)
}

// A value that indicates whether this queue has dead letter support when a message expires.
func (o SBQueuePropertiesResponseOutput) DeadLetteringOnMessageExpiration() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SBQueuePropertiesResponse) *bool { return v.DeadLetteringOnMessageExpiration }).(pulumi.BoolPtrOutput)
}

// ISO 8601 default message timespan to live value. This is the duration after which the message expires, starting from when the message is sent to Service Bus. This is the default value used when TimeToLive is not set on a message itself.
func (o SBQueuePropertiesResponseOutput) DefaultMessageTimeToLive() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SBQueuePropertiesResponse) *string { return v.DefaultMessageTimeToLive }).(pulumi.StringPtrOutput)
}

// ISO 8601 timeSpan structure that defines the duration of the duplicate detection history. The default value is 10 minutes.
func (o SBQueuePropertiesResponseOutput) DuplicateDetectionHistoryTimeWindow() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SBQueuePropertiesResponse) *string { return v.DuplicateDetectionHistoryTimeWindow }).(pulumi.StringPtrOutput)
}

// Value that indicates whether server-side batched operations are enabled.
func (o SBQueuePropertiesResponseOutput) EnableBatchedOperations() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SBQueuePropertiesResponse) *bool { return v.EnableBatchedOperations }).(pulumi.BoolPtrOutput)
}

// A value that indicates whether Express Entities are enabled. An express queue holds a message in memory temporarily before writing it to persistent storage.
func (o SBQueuePropertiesResponseOutput) EnableExpress() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SBQueuePropertiesResponse) *bool { return v.EnableExpress }).(pulumi.BoolPtrOutput)
}

// A value that indicates whether the queue is to be partitioned across multiple message brokers.
func (o SBQueuePropertiesResponseOutput) EnablePartitioning() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SBQueuePropertiesResponse) *bool { return v.EnablePartitioning }).(pulumi.BoolPtrOutput)
}

// Queue/Topic name to forward the Dead Letter message
func (o SBQueuePropertiesResponseOutput) ForwardDeadLetteredMessagesTo() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SBQueuePropertiesResponse) *string { return v.ForwardDeadLetteredMessagesTo }).(pulumi.StringPtrOutput)
}

// Queue/Topic name to forward the messages
func (o SBQueuePropertiesResponseOutput) ForwardTo() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SBQueuePropertiesResponse) *string { return v.ForwardTo }).(pulumi.StringPtrOutput)
}

// ISO 8601 timespan duration of a peek-lock; that is, the amount of time that the message is locked for other receivers. The maximum value for LockDuration is 5 minutes; the default value is 1 minute.
func (o SBQueuePropertiesResponseOutput) LockDuration() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SBQueuePropertiesResponse) *string { return v.LockDuration }).(pulumi.StringPtrOutput)
}

// The maximum delivery count. A message is automatically deadlettered after this number of deliveries. default value is 10.
func (o SBQueuePropertiesResponseOutput) MaxDeliveryCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SBQueuePropertiesResponse) *int { return v.MaxDeliveryCount }).(pulumi.IntPtrOutput)
}

// The maximum size of the queue in megabytes, which is the size of memory allocated for the queue. Default is 1024.
func (o SBQueuePropertiesResponseOutput) MaxSizeInMegabytes() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SBQueuePropertiesResponse) *int { return v.MaxSizeInMegabytes }).(pulumi.IntPtrOutput)
}

// The number of messages in the queue.
func (o SBQueuePropertiesResponseOutput) MessageCount() pulumi.IntOutput {
	return o.ApplyT(func(v SBQueuePropertiesResponse) int { return v.MessageCount }).(pulumi.IntOutput)
}

// A value indicating if this queue requires duplicate detection.
func (o SBQueuePropertiesResponseOutput) RequiresDuplicateDetection() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SBQueuePropertiesResponse) *bool { return v.RequiresDuplicateDetection }).(pulumi.BoolPtrOutput)
}

// A value that indicates whether the queue supports the concept of sessions.
func (o SBQueuePropertiesResponseOutput) RequiresSession() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SBQueuePropertiesResponse) *bool { return v.RequiresSession }).(pulumi.BoolPtrOutput)
}

// The size of the queue, in bytes.
func (o SBQueuePropertiesResponseOutput) SizeInBytes() pulumi.IntOutput {
	return o.ApplyT(func(v SBQueuePropertiesResponse) int { return v.SizeInBytes }).(pulumi.IntOutput)
}

// Enumerates the possible values for the status of a messaging entity.
func (o SBQueuePropertiesResponseOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SBQueuePropertiesResponse) *string { return v.Status }).(pulumi.StringPtrOutput)
}

// The exact time the message was updated.
func (o SBQueuePropertiesResponseOutput) UpdatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v SBQueuePropertiesResponse) string { return v.UpdatedAt }).(pulumi.StringOutput)
}

type SBQueuePropertiesResponsePtrOutput struct{ *pulumi.OutputState }

func (SBQueuePropertiesResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SBQueuePropertiesResponse)(nil)).Elem()
}

func (o SBQueuePropertiesResponsePtrOutput) ToSBQueuePropertiesResponsePtrOutput() SBQueuePropertiesResponsePtrOutput {
	return o
}

func (o SBQueuePropertiesResponsePtrOutput) ToSBQueuePropertiesResponsePtrOutputWithContext(ctx context.Context) SBQueuePropertiesResponsePtrOutput {
	return o
}

func (o SBQueuePropertiesResponsePtrOutput) Elem() SBQueuePropertiesResponseOutput {
	return o.ApplyT(func(v *SBQueuePropertiesResponse) SBQueuePropertiesResponse { return *v }).(SBQueuePropertiesResponseOutput)
}

// Last time a message was sent, or the last time there was a receive request to this queue.
func (o SBQueuePropertiesResponsePtrOutput) AccessedAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SBQueuePropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return &v.AccessedAt
	}).(pulumi.StringPtrOutput)
}

// ISO 8061 timeSpan idle interval after which the queue is automatically deleted. The minimum duration is 5 minutes.
func (o SBQueuePropertiesResponsePtrOutput) AutoDeleteOnIdle() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SBQueuePropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return v.AutoDeleteOnIdle
	}).(pulumi.StringPtrOutput)
}

// Message Count Details.
func (o SBQueuePropertiesResponsePtrOutput) CountDetails() MessageCountDetailsResponsePtrOutput {
	return o.ApplyT(func(v *SBQueuePropertiesResponse) *MessageCountDetailsResponse {
		if v == nil {
			return nil
		}
		return &v.CountDetails
	}).(MessageCountDetailsResponsePtrOutput)
}

// The exact time the message was created.
func (o SBQueuePropertiesResponsePtrOutput) CreatedAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SBQueuePropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return &v.CreatedAt
	}).(pulumi.StringPtrOutput)
}

// A value that indicates whether this queue has dead letter support when a message expires.
func (o SBQueuePropertiesResponsePtrOutput) DeadLetteringOnMessageExpiration() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SBQueuePropertiesResponse) *bool {
		if v == nil {
			return nil
		}
		return v.DeadLetteringOnMessageExpiration
	}).(pulumi.BoolPtrOutput)
}

// ISO 8601 default message timespan to live value. This is the duration after which the message expires, starting from when the message is sent to Service Bus. This is the default value used when TimeToLive is not set on a message itself.
func (o SBQueuePropertiesResponsePtrOutput) DefaultMessageTimeToLive() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SBQueuePropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return v.DefaultMessageTimeToLive
	}).(pulumi.StringPtrOutput)
}

// ISO 8601 timeSpan structure that defines the duration of the duplicate detection history. The default value is 10 minutes.
func (o SBQueuePropertiesResponsePtrOutput) DuplicateDetectionHistoryTimeWindow() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SBQueuePropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return v.DuplicateDetectionHistoryTimeWindow
	}).(pulumi.StringPtrOutput)
}

// Value that indicates whether server-side batched operations are enabled.
func (o SBQueuePropertiesResponsePtrOutput) EnableBatchedOperations() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SBQueuePropertiesResponse) *bool {
		if v == nil {
			return nil
		}
		return v.EnableBatchedOperations
	}).(pulumi.BoolPtrOutput)
}

// A value that indicates whether Express Entities are enabled. An express queue holds a message in memory temporarily before writing it to persistent storage.
func (o SBQueuePropertiesResponsePtrOutput) EnableExpress() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SBQueuePropertiesResponse) *bool {
		if v == nil {
			return nil
		}
		return v.EnableExpress
	}).(pulumi.BoolPtrOutput)
}

// A value that indicates whether the queue is to be partitioned across multiple message brokers.
func (o SBQueuePropertiesResponsePtrOutput) EnablePartitioning() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SBQueuePropertiesResponse) *bool {
		if v == nil {
			return nil
		}
		return v.EnablePartitioning
	}).(pulumi.BoolPtrOutput)
}

// Queue/Topic name to forward the Dead Letter message
func (o SBQueuePropertiesResponsePtrOutput) ForwardDeadLetteredMessagesTo() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SBQueuePropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return v.ForwardDeadLetteredMessagesTo
	}).(pulumi.StringPtrOutput)
}

// Queue/Topic name to forward the messages
func (o SBQueuePropertiesResponsePtrOutput) ForwardTo() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SBQueuePropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return v.ForwardTo
	}).(pulumi.StringPtrOutput)
}

// ISO 8601 timespan duration of a peek-lock; that is, the amount of time that the message is locked for other receivers. The maximum value for LockDuration is 5 minutes; the default value is 1 minute.
func (o SBQueuePropertiesResponsePtrOutput) LockDuration() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SBQueuePropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return v.LockDuration
	}).(pulumi.StringPtrOutput)
}

// The maximum delivery count. A message is automatically deadlettered after this number of deliveries. default value is 10.
func (o SBQueuePropertiesResponsePtrOutput) MaxDeliveryCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SBQueuePropertiesResponse) *int {
		if v == nil {
			return nil
		}
		return v.MaxDeliveryCount
	}).(pulumi.IntPtrOutput)
}

// The maximum size of the queue in megabytes, which is the size of memory allocated for the queue. Default is 1024.
func (o SBQueuePropertiesResponsePtrOutput) MaxSizeInMegabytes() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SBQueuePropertiesResponse) *int {
		if v == nil {
			return nil
		}
		return v.MaxSizeInMegabytes
	}).(pulumi.IntPtrOutput)
}

// The number of messages in the queue.
func (o SBQueuePropertiesResponsePtrOutput) MessageCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SBQueuePropertiesResponse) *int {
		if v == nil {
			return nil
		}
		return &v.MessageCount
	}).(pulumi.IntPtrOutput)
}

// A value indicating if this queue requires duplicate detection.
func (o SBQueuePropertiesResponsePtrOutput) RequiresDuplicateDetection() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SBQueuePropertiesResponse) *bool {
		if v == nil {
			return nil
		}
		return v.RequiresDuplicateDetection
	}).(pulumi.BoolPtrOutput)
}

// A value that indicates whether the queue supports the concept of sessions.
func (o SBQueuePropertiesResponsePtrOutput) RequiresSession() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SBQueuePropertiesResponse) *bool {
		if v == nil {
			return nil
		}
		return v.RequiresSession
	}).(pulumi.BoolPtrOutput)
}

// The size of the queue, in bytes.
func (o SBQueuePropertiesResponsePtrOutput) SizeInBytes() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SBQueuePropertiesResponse) *int {
		if v == nil {
			return nil
		}
		return &v.SizeInBytes
	}).(pulumi.IntPtrOutput)
}

// Enumerates the possible values for the status of a messaging entity.
func (o SBQueuePropertiesResponsePtrOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SBQueuePropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return v.Status
	}).(pulumi.StringPtrOutput)
}

// The exact time the message was updated.
func (o SBQueuePropertiesResponsePtrOutput) UpdatedAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SBQueuePropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return &v.UpdatedAt
	}).(pulumi.StringPtrOutput)
}

// SKU of the namespace.
type SBSku struct {
	// The specified messaging units for the tier. For Premium tier, capacity are 1,2 and 4.
	Capacity *int `pulumi:"capacity"`
	// Name of this SKU.
	Name string `pulumi:"name"`
	// The billing tier of this particular SKU.
	Tier *string `pulumi:"tier"`
}

// SBSkuInput is an input type that accepts SBSkuArgs and SBSkuOutput values.
// You can construct a concrete instance of `SBSkuInput` via:
//
//          SBSkuArgs{...}
type SBSkuInput interface {
	pulumi.Input

	ToSBSkuOutput() SBSkuOutput
	ToSBSkuOutputWithContext(context.Context) SBSkuOutput
}

// SKU of the namespace.
type SBSkuArgs struct {
	// The specified messaging units for the tier. For Premium tier, capacity are 1,2 and 4.
	Capacity pulumi.IntPtrInput `pulumi:"capacity"`
	// Name of this SKU.
	Name pulumi.StringInput `pulumi:"name"`
	// The billing tier of this particular SKU.
	Tier pulumi.StringPtrInput `pulumi:"tier"`
}

func (SBSkuArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SBSku)(nil)).Elem()
}

func (i SBSkuArgs) ToSBSkuOutput() SBSkuOutput {
	return i.ToSBSkuOutputWithContext(context.Background())
}

func (i SBSkuArgs) ToSBSkuOutputWithContext(ctx context.Context) SBSkuOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SBSkuOutput)
}

func (i SBSkuArgs) ToSBSkuPtrOutput() SBSkuPtrOutput {
	return i.ToSBSkuPtrOutputWithContext(context.Background())
}

func (i SBSkuArgs) ToSBSkuPtrOutputWithContext(ctx context.Context) SBSkuPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SBSkuOutput).ToSBSkuPtrOutputWithContext(ctx)
}

// SBSkuPtrInput is an input type that accepts SBSkuArgs, SBSkuPtr and SBSkuPtrOutput values.
// You can construct a concrete instance of `SBSkuPtrInput` via:
//
//          SBSkuArgs{...}
//
//  or:
//
//          nil
type SBSkuPtrInput interface {
	pulumi.Input

	ToSBSkuPtrOutput() SBSkuPtrOutput
	ToSBSkuPtrOutputWithContext(context.Context) SBSkuPtrOutput
}

type sbskuPtrType SBSkuArgs

func SBSkuPtr(v *SBSkuArgs) SBSkuPtrInput {
	return (*sbskuPtrType)(v)
}

func (*sbskuPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SBSku)(nil)).Elem()
}

func (i *sbskuPtrType) ToSBSkuPtrOutput() SBSkuPtrOutput {
	return i.ToSBSkuPtrOutputWithContext(context.Background())
}

func (i *sbskuPtrType) ToSBSkuPtrOutputWithContext(ctx context.Context) SBSkuPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SBSkuPtrOutput)
}

// SKU of the namespace.
type SBSkuOutput struct{ *pulumi.OutputState }

func (SBSkuOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SBSku)(nil)).Elem()
}

func (o SBSkuOutput) ToSBSkuOutput() SBSkuOutput {
	return o
}

func (o SBSkuOutput) ToSBSkuOutputWithContext(ctx context.Context) SBSkuOutput {
	return o
}

func (o SBSkuOutput) ToSBSkuPtrOutput() SBSkuPtrOutput {
	return o.ToSBSkuPtrOutputWithContext(context.Background())
}

func (o SBSkuOutput) ToSBSkuPtrOutputWithContext(ctx context.Context) SBSkuPtrOutput {
	return o.ApplyT(func(v SBSku) *SBSku {
		return &v
	}).(SBSkuPtrOutput)
}

// The specified messaging units for the tier. For Premium tier, capacity are 1,2 and 4.
func (o SBSkuOutput) Capacity() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SBSku) *int { return v.Capacity }).(pulumi.IntPtrOutput)
}

// Name of this SKU.
func (o SBSkuOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v SBSku) string { return v.Name }).(pulumi.StringOutput)
}

// The billing tier of this particular SKU.
func (o SBSkuOutput) Tier() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SBSku) *string { return v.Tier }).(pulumi.StringPtrOutput)
}

type SBSkuPtrOutput struct{ *pulumi.OutputState }

func (SBSkuPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SBSku)(nil)).Elem()
}

func (o SBSkuPtrOutput) ToSBSkuPtrOutput() SBSkuPtrOutput {
	return o
}

func (o SBSkuPtrOutput) ToSBSkuPtrOutputWithContext(ctx context.Context) SBSkuPtrOutput {
	return o
}

func (o SBSkuPtrOutput) Elem() SBSkuOutput {
	return o.ApplyT(func(v *SBSku) SBSku { return *v }).(SBSkuOutput)
}

// The specified messaging units for the tier. For Premium tier, capacity are 1,2 and 4.
func (o SBSkuPtrOutput) Capacity() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SBSku) *int {
		if v == nil {
			return nil
		}
		return v.Capacity
	}).(pulumi.IntPtrOutput)
}

// Name of this SKU.
func (o SBSkuPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SBSku) *string {
		if v == nil {
			return nil
		}
		return &v.Name
	}).(pulumi.StringPtrOutput)
}

// The billing tier of this particular SKU.
func (o SBSkuPtrOutput) Tier() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SBSku) *string {
		if v == nil {
			return nil
		}
		return v.Tier
	}).(pulumi.StringPtrOutput)
}

// SKU of the namespace.
type SBSkuResponse struct {
	// The specified messaging units for the tier. For Premium tier, capacity are 1,2 and 4.
	Capacity *int `pulumi:"capacity"`
	// Name of this SKU.
	Name string `pulumi:"name"`
	// The billing tier of this particular SKU.
	Tier *string `pulumi:"tier"`
}

// SBSkuResponseInput is an input type that accepts SBSkuResponseArgs and SBSkuResponseOutput values.
// You can construct a concrete instance of `SBSkuResponseInput` via:
//
//          SBSkuResponseArgs{...}
type SBSkuResponseInput interface {
	pulumi.Input

	ToSBSkuResponseOutput() SBSkuResponseOutput
	ToSBSkuResponseOutputWithContext(context.Context) SBSkuResponseOutput
}

// SKU of the namespace.
type SBSkuResponseArgs struct {
	// The specified messaging units for the tier. For Premium tier, capacity are 1,2 and 4.
	Capacity pulumi.IntPtrInput `pulumi:"capacity"`
	// Name of this SKU.
	Name pulumi.StringInput `pulumi:"name"`
	// The billing tier of this particular SKU.
	Tier pulumi.StringPtrInput `pulumi:"tier"`
}

func (SBSkuResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SBSkuResponse)(nil)).Elem()
}

func (i SBSkuResponseArgs) ToSBSkuResponseOutput() SBSkuResponseOutput {
	return i.ToSBSkuResponseOutputWithContext(context.Background())
}

func (i SBSkuResponseArgs) ToSBSkuResponseOutputWithContext(ctx context.Context) SBSkuResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SBSkuResponseOutput)
}

func (i SBSkuResponseArgs) ToSBSkuResponsePtrOutput() SBSkuResponsePtrOutput {
	return i.ToSBSkuResponsePtrOutputWithContext(context.Background())
}

func (i SBSkuResponseArgs) ToSBSkuResponsePtrOutputWithContext(ctx context.Context) SBSkuResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SBSkuResponseOutput).ToSBSkuResponsePtrOutputWithContext(ctx)
}

// SBSkuResponsePtrInput is an input type that accepts SBSkuResponseArgs, SBSkuResponsePtr and SBSkuResponsePtrOutput values.
// You can construct a concrete instance of `SBSkuResponsePtrInput` via:
//
//          SBSkuResponseArgs{...}
//
//  or:
//
//          nil
type SBSkuResponsePtrInput interface {
	pulumi.Input

	ToSBSkuResponsePtrOutput() SBSkuResponsePtrOutput
	ToSBSkuResponsePtrOutputWithContext(context.Context) SBSkuResponsePtrOutput
}

type sbskuResponsePtrType SBSkuResponseArgs

func SBSkuResponsePtr(v *SBSkuResponseArgs) SBSkuResponsePtrInput {
	return (*sbskuResponsePtrType)(v)
}

func (*sbskuResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SBSkuResponse)(nil)).Elem()
}

func (i *sbskuResponsePtrType) ToSBSkuResponsePtrOutput() SBSkuResponsePtrOutput {
	return i.ToSBSkuResponsePtrOutputWithContext(context.Background())
}

func (i *sbskuResponsePtrType) ToSBSkuResponsePtrOutputWithContext(ctx context.Context) SBSkuResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SBSkuResponsePtrOutput)
}

// SKU of the namespace.
type SBSkuResponseOutput struct{ *pulumi.OutputState }

func (SBSkuResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SBSkuResponse)(nil)).Elem()
}

func (o SBSkuResponseOutput) ToSBSkuResponseOutput() SBSkuResponseOutput {
	return o
}

func (o SBSkuResponseOutput) ToSBSkuResponseOutputWithContext(ctx context.Context) SBSkuResponseOutput {
	return o
}

func (o SBSkuResponseOutput) ToSBSkuResponsePtrOutput() SBSkuResponsePtrOutput {
	return o.ToSBSkuResponsePtrOutputWithContext(context.Background())
}

func (o SBSkuResponseOutput) ToSBSkuResponsePtrOutputWithContext(ctx context.Context) SBSkuResponsePtrOutput {
	return o.ApplyT(func(v SBSkuResponse) *SBSkuResponse {
		return &v
	}).(SBSkuResponsePtrOutput)
}

// The specified messaging units for the tier. For Premium tier, capacity are 1,2 and 4.
func (o SBSkuResponseOutput) Capacity() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SBSkuResponse) *int { return v.Capacity }).(pulumi.IntPtrOutput)
}

// Name of this SKU.
func (o SBSkuResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v SBSkuResponse) string { return v.Name }).(pulumi.StringOutput)
}

// The billing tier of this particular SKU.
func (o SBSkuResponseOutput) Tier() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SBSkuResponse) *string { return v.Tier }).(pulumi.StringPtrOutput)
}

type SBSkuResponsePtrOutput struct{ *pulumi.OutputState }

func (SBSkuResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SBSkuResponse)(nil)).Elem()
}

func (o SBSkuResponsePtrOutput) ToSBSkuResponsePtrOutput() SBSkuResponsePtrOutput {
	return o
}

func (o SBSkuResponsePtrOutput) ToSBSkuResponsePtrOutputWithContext(ctx context.Context) SBSkuResponsePtrOutput {
	return o
}

func (o SBSkuResponsePtrOutput) Elem() SBSkuResponseOutput {
	return o.ApplyT(func(v *SBSkuResponse) SBSkuResponse { return *v }).(SBSkuResponseOutput)
}

// The specified messaging units for the tier. For Premium tier, capacity are 1,2 and 4.
func (o SBSkuResponsePtrOutput) Capacity() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SBSkuResponse) *int {
		if v == nil {
			return nil
		}
		return v.Capacity
	}).(pulumi.IntPtrOutput)
}

// Name of this SKU.
func (o SBSkuResponsePtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SBSkuResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Name
	}).(pulumi.StringPtrOutput)
}

// The billing tier of this particular SKU.
func (o SBSkuResponsePtrOutput) Tier() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SBSkuResponse) *string {
		if v == nil {
			return nil
		}
		return v.Tier
	}).(pulumi.StringPtrOutput)
}

// Description of Subscription Resource.
type SBSubscriptionProperties struct {
	// ISO 8061 timeSpan idle interval after which the topic is automatically deleted. The minimum duration is 5 minutes.
	AutoDeleteOnIdle *string `pulumi:"autoDeleteOnIdle"`
	// Value that indicates whether a subscription has dead letter support on filter evaluation exceptions.
	DeadLetteringOnFilterEvaluationExceptions *bool `pulumi:"deadLetteringOnFilterEvaluationExceptions"`
	// Value that indicates whether a subscription has dead letter support when a message expires.
	DeadLetteringOnMessageExpiration *bool `pulumi:"deadLetteringOnMessageExpiration"`
	// ISO 8061 Default message timespan to live value. This is the duration after which the message expires, starting from when the message is sent to Service Bus. This is the default value used when TimeToLive is not set on a message itself.
	DefaultMessageTimeToLive *string `pulumi:"defaultMessageTimeToLive"`
	// ISO 8601 timeSpan structure that defines the duration of the duplicate detection history. The default value is 10 minutes.
	DuplicateDetectionHistoryTimeWindow *string `pulumi:"duplicateDetectionHistoryTimeWindow"`
	// Value that indicates whether server-side batched operations are enabled.
	EnableBatchedOperations *bool `pulumi:"enableBatchedOperations"`
	// Queue/Topic name to forward the Dead Letter message
	ForwardDeadLetteredMessagesTo *string `pulumi:"forwardDeadLetteredMessagesTo"`
	// Queue/Topic name to forward the messages
	ForwardTo *string `pulumi:"forwardTo"`
	// ISO 8061 lock duration timespan for the subscription. The default value is 1 minute.
	LockDuration *string `pulumi:"lockDuration"`
	// Number of maximum deliveries.
	MaxDeliveryCount *int `pulumi:"maxDeliveryCount"`
	// Value indicating if a subscription supports the concept of sessions.
	RequiresSession *bool `pulumi:"requiresSession"`
	// Enumerates the possible values for the status of a messaging entity.
	Status *string `pulumi:"status"`
}

// SBSubscriptionPropertiesInput is an input type that accepts SBSubscriptionPropertiesArgs and SBSubscriptionPropertiesOutput values.
// You can construct a concrete instance of `SBSubscriptionPropertiesInput` via:
//
//          SBSubscriptionPropertiesArgs{...}
type SBSubscriptionPropertiesInput interface {
	pulumi.Input

	ToSBSubscriptionPropertiesOutput() SBSubscriptionPropertiesOutput
	ToSBSubscriptionPropertiesOutputWithContext(context.Context) SBSubscriptionPropertiesOutput
}

// Description of Subscription Resource.
type SBSubscriptionPropertiesArgs struct {
	// ISO 8061 timeSpan idle interval after which the topic is automatically deleted. The minimum duration is 5 minutes.
	AutoDeleteOnIdle pulumi.StringPtrInput `pulumi:"autoDeleteOnIdle"`
	// Value that indicates whether a subscription has dead letter support on filter evaluation exceptions.
	DeadLetteringOnFilterEvaluationExceptions pulumi.BoolPtrInput `pulumi:"deadLetteringOnFilterEvaluationExceptions"`
	// Value that indicates whether a subscription has dead letter support when a message expires.
	DeadLetteringOnMessageExpiration pulumi.BoolPtrInput `pulumi:"deadLetteringOnMessageExpiration"`
	// ISO 8061 Default message timespan to live value. This is the duration after which the message expires, starting from when the message is sent to Service Bus. This is the default value used when TimeToLive is not set on a message itself.
	DefaultMessageTimeToLive pulumi.StringPtrInput `pulumi:"defaultMessageTimeToLive"`
	// ISO 8601 timeSpan structure that defines the duration of the duplicate detection history. The default value is 10 minutes.
	DuplicateDetectionHistoryTimeWindow pulumi.StringPtrInput `pulumi:"duplicateDetectionHistoryTimeWindow"`
	// Value that indicates whether server-side batched operations are enabled.
	EnableBatchedOperations pulumi.BoolPtrInput `pulumi:"enableBatchedOperations"`
	// Queue/Topic name to forward the Dead Letter message
	ForwardDeadLetteredMessagesTo pulumi.StringPtrInput `pulumi:"forwardDeadLetteredMessagesTo"`
	// Queue/Topic name to forward the messages
	ForwardTo pulumi.StringPtrInput `pulumi:"forwardTo"`
	// ISO 8061 lock duration timespan for the subscription. The default value is 1 minute.
	LockDuration pulumi.StringPtrInput `pulumi:"lockDuration"`
	// Number of maximum deliveries.
	MaxDeliveryCount pulumi.IntPtrInput `pulumi:"maxDeliveryCount"`
	// Value indicating if a subscription supports the concept of sessions.
	RequiresSession pulumi.BoolPtrInput `pulumi:"requiresSession"`
	// Enumerates the possible values for the status of a messaging entity.
	Status pulumi.StringPtrInput `pulumi:"status"`
}

func (SBSubscriptionPropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SBSubscriptionProperties)(nil)).Elem()
}

func (i SBSubscriptionPropertiesArgs) ToSBSubscriptionPropertiesOutput() SBSubscriptionPropertiesOutput {
	return i.ToSBSubscriptionPropertiesOutputWithContext(context.Background())
}

func (i SBSubscriptionPropertiesArgs) ToSBSubscriptionPropertiesOutputWithContext(ctx context.Context) SBSubscriptionPropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SBSubscriptionPropertiesOutput)
}

func (i SBSubscriptionPropertiesArgs) ToSBSubscriptionPropertiesPtrOutput() SBSubscriptionPropertiesPtrOutput {
	return i.ToSBSubscriptionPropertiesPtrOutputWithContext(context.Background())
}

func (i SBSubscriptionPropertiesArgs) ToSBSubscriptionPropertiesPtrOutputWithContext(ctx context.Context) SBSubscriptionPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SBSubscriptionPropertiesOutput).ToSBSubscriptionPropertiesPtrOutputWithContext(ctx)
}

// SBSubscriptionPropertiesPtrInput is an input type that accepts SBSubscriptionPropertiesArgs, SBSubscriptionPropertiesPtr and SBSubscriptionPropertiesPtrOutput values.
// You can construct a concrete instance of `SBSubscriptionPropertiesPtrInput` via:
//
//          SBSubscriptionPropertiesArgs{...}
//
//  or:
//
//          nil
type SBSubscriptionPropertiesPtrInput interface {
	pulumi.Input

	ToSBSubscriptionPropertiesPtrOutput() SBSubscriptionPropertiesPtrOutput
	ToSBSubscriptionPropertiesPtrOutputWithContext(context.Context) SBSubscriptionPropertiesPtrOutput
}

type sbsubscriptionPropertiesPtrType SBSubscriptionPropertiesArgs

func SBSubscriptionPropertiesPtr(v *SBSubscriptionPropertiesArgs) SBSubscriptionPropertiesPtrInput {
	return (*sbsubscriptionPropertiesPtrType)(v)
}

func (*sbsubscriptionPropertiesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SBSubscriptionProperties)(nil)).Elem()
}

func (i *sbsubscriptionPropertiesPtrType) ToSBSubscriptionPropertiesPtrOutput() SBSubscriptionPropertiesPtrOutput {
	return i.ToSBSubscriptionPropertiesPtrOutputWithContext(context.Background())
}

func (i *sbsubscriptionPropertiesPtrType) ToSBSubscriptionPropertiesPtrOutputWithContext(ctx context.Context) SBSubscriptionPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SBSubscriptionPropertiesPtrOutput)
}

// Description of Subscription Resource.
type SBSubscriptionPropertiesOutput struct{ *pulumi.OutputState }

func (SBSubscriptionPropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SBSubscriptionProperties)(nil)).Elem()
}

func (o SBSubscriptionPropertiesOutput) ToSBSubscriptionPropertiesOutput() SBSubscriptionPropertiesOutput {
	return o
}

func (o SBSubscriptionPropertiesOutput) ToSBSubscriptionPropertiesOutputWithContext(ctx context.Context) SBSubscriptionPropertiesOutput {
	return o
}

func (o SBSubscriptionPropertiesOutput) ToSBSubscriptionPropertiesPtrOutput() SBSubscriptionPropertiesPtrOutput {
	return o.ToSBSubscriptionPropertiesPtrOutputWithContext(context.Background())
}

func (o SBSubscriptionPropertiesOutput) ToSBSubscriptionPropertiesPtrOutputWithContext(ctx context.Context) SBSubscriptionPropertiesPtrOutput {
	return o.ApplyT(func(v SBSubscriptionProperties) *SBSubscriptionProperties {
		return &v
	}).(SBSubscriptionPropertiesPtrOutput)
}

// ISO 8061 timeSpan idle interval after which the topic is automatically deleted. The minimum duration is 5 minutes.
func (o SBSubscriptionPropertiesOutput) AutoDeleteOnIdle() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SBSubscriptionProperties) *string { return v.AutoDeleteOnIdle }).(pulumi.StringPtrOutput)
}

// Value that indicates whether a subscription has dead letter support on filter evaluation exceptions.
func (o SBSubscriptionPropertiesOutput) DeadLetteringOnFilterEvaluationExceptions() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SBSubscriptionProperties) *bool { return v.DeadLetteringOnFilterEvaluationExceptions }).(pulumi.BoolPtrOutput)
}

// Value that indicates whether a subscription has dead letter support when a message expires.
func (o SBSubscriptionPropertiesOutput) DeadLetteringOnMessageExpiration() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SBSubscriptionProperties) *bool { return v.DeadLetteringOnMessageExpiration }).(pulumi.BoolPtrOutput)
}

// ISO 8061 Default message timespan to live value. This is the duration after which the message expires, starting from when the message is sent to Service Bus. This is the default value used when TimeToLive is not set on a message itself.
func (o SBSubscriptionPropertiesOutput) DefaultMessageTimeToLive() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SBSubscriptionProperties) *string { return v.DefaultMessageTimeToLive }).(pulumi.StringPtrOutput)
}

// ISO 8601 timeSpan structure that defines the duration of the duplicate detection history. The default value is 10 minutes.
func (o SBSubscriptionPropertiesOutput) DuplicateDetectionHistoryTimeWindow() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SBSubscriptionProperties) *string { return v.DuplicateDetectionHistoryTimeWindow }).(pulumi.StringPtrOutput)
}

// Value that indicates whether server-side batched operations are enabled.
func (o SBSubscriptionPropertiesOutput) EnableBatchedOperations() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SBSubscriptionProperties) *bool { return v.EnableBatchedOperations }).(pulumi.BoolPtrOutput)
}

// Queue/Topic name to forward the Dead Letter message
func (o SBSubscriptionPropertiesOutput) ForwardDeadLetteredMessagesTo() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SBSubscriptionProperties) *string { return v.ForwardDeadLetteredMessagesTo }).(pulumi.StringPtrOutput)
}

// Queue/Topic name to forward the messages
func (o SBSubscriptionPropertiesOutput) ForwardTo() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SBSubscriptionProperties) *string { return v.ForwardTo }).(pulumi.StringPtrOutput)
}

// ISO 8061 lock duration timespan for the subscription. The default value is 1 minute.
func (o SBSubscriptionPropertiesOutput) LockDuration() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SBSubscriptionProperties) *string { return v.LockDuration }).(pulumi.StringPtrOutput)
}

// Number of maximum deliveries.
func (o SBSubscriptionPropertiesOutput) MaxDeliveryCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SBSubscriptionProperties) *int { return v.MaxDeliveryCount }).(pulumi.IntPtrOutput)
}

// Value indicating if a subscription supports the concept of sessions.
func (o SBSubscriptionPropertiesOutput) RequiresSession() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SBSubscriptionProperties) *bool { return v.RequiresSession }).(pulumi.BoolPtrOutput)
}

// Enumerates the possible values for the status of a messaging entity.
func (o SBSubscriptionPropertiesOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SBSubscriptionProperties) *string { return v.Status }).(pulumi.StringPtrOutput)
}

type SBSubscriptionPropertiesPtrOutput struct{ *pulumi.OutputState }

func (SBSubscriptionPropertiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SBSubscriptionProperties)(nil)).Elem()
}

func (o SBSubscriptionPropertiesPtrOutput) ToSBSubscriptionPropertiesPtrOutput() SBSubscriptionPropertiesPtrOutput {
	return o
}

func (o SBSubscriptionPropertiesPtrOutput) ToSBSubscriptionPropertiesPtrOutputWithContext(ctx context.Context) SBSubscriptionPropertiesPtrOutput {
	return o
}

func (o SBSubscriptionPropertiesPtrOutput) Elem() SBSubscriptionPropertiesOutput {
	return o.ApplyT(func(v *SBSubscriptionProperties) SBSubscriptionProperties { return *v }).(SBSubscriptionPropertiesOutput)
}

// ISO 8061 timeSpan idle interval after which the topic is automatically deleted. The minimum duration is 5 minutes.
func (o SBSubscriptionPropertiesPtrOutput) AutoDeleteOnIdle() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SBSubscriptionProperties) *string {
		if v == nil {
			return nil
		}
		return v.AutoDeleteOnIdle
	}).(pulumi.StringPtrOutput)
}

// Value that indicates whether a subscription has dead letter support on filter evaluation exceptions.
func (o SBSubscriptionPropertiesPtrOutput) DeadLetteringOnFilterEvaluationExceptions() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SBSubscriptionProperties) *bool {
		if v == nil {
			return nil
		}
		return v.DeadLetteringOnFilterEvaluationExceptions
	}).(pulumi.BoolPtrOutput)
}

// Value that indicates whether a subscription has dead letter support when a message expires.
func (o SBSubscriptionPropertiesPtrOutput) DeadLetteringOnMessageExpiration() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SBSubscriptionProperties) *bool {
		if v == nil {
			return nil
		}
		return v.DeadLetteringOnMessageExpiration
	}).(pulumi.BoolPtrOutput)
}

// ISO 8061 Default message timespan to live value. This is the duration after which the message expires, starting from when the message is sent to Service Bus. This is the default value used when TimeToLive is not set on a message itself.
func (o SBSubscriptionPropertiesPtrOutput) DefaultMessageTimeToLive() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SBSubscriptionProperties) *string {
		if v == nil {
			return nil
		}
		return v.DefaultMessageTimeToLive
	}).(pulumi.StringPtrOutput)
}

// ISO 8601 timeSpan structure that defines the duration of the duplicate detection history. The default value is 10 minutes.
func (o SBSubscriptionPropertiesPtrOutput) DuplicateDetectionHistoryTimeWindow() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SBSubscriptionProperties) *string {
		if v == nil {
			return nil
		}
		return v.DuplicateDetectionHistoryTimeWindow
	}).(pulumi.StringPtrOutput)
}

// Value that indicates whether server-side batched operations are enabled.
func (o SBSubscriptionPropertiesPtrOutput) EnableBatchedOperations() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SBSubscriptionProperties) *bool {
		if v == nil {
			return nil
		}
		return v.EnableBatchedOperations
	}).(pulumi.BoolPtrOutput)
}

// Queue/Topic name to forward the Dead Letter message
func (o SBSubscriptionPropertiesPtrOutput) ForwardDeadLetteredMessagesTo() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SBSubscriptionProperties) *string {
		if v == nil {
			return nil
		}
		return v.ForwardDeadLetteredMessagesTo
	}).(pulumi.StringPtrOutput)
}

// Queue/Topic name to forward the messages
func (o SBSubscriptionPropertiesPtrOutput) ForwardTo() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SBSubscriptionProperties) *string {
		if v == nil {
			return nil
		}
		return v.ForwardTo
	}).(pulumi.StringPtrOutput)
}

// ISO 8061 lock duration timespan for the subscription. The default value is 1 minute.
func (o SBSubscriptionPropertiesPtrOutput) LockDuration() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SBSubscriptionProperties) *string {
		if v == nil {
			return nil
		}
		return v.LockDuration
	}).(pulumi.StringPtrOutput)
}

// Number of maximum deliveries.
func (o SBSubscriptionPropertiesPtrOutput) MaxDeliveryCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SBSubscriptionProperties) *int {
		if v == nil {
			return nil
		}
		return v.MaxDeliveryCount
	}).(pulumi.IntPtrOutput)
}

// Value indicating if a subscription supports the concept of sessions.
func (o SBSubscriptionPropertiesPtrOutput) RequiresSession() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SBSubscriptionProperties) *bool {
		if v == nil {
			return nil
		}
		return v.RequiresSession
	}).(pulumi.BoolPtrOutput)
}

// Enumerates the possible values for the status of a messaging entity.
func (o SBSubscriptionPropertiesPtrOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SBSubscriptionProperties) *string {
		if v == nil {
			return nil
		}
		return v.Status
	}).(pulumi.StringPtrOutput)
}

// Description of Subscription Resource.
type SBSubscriptionPropertiesResponse struct {
	// Last time there was a receive request to this subscription.
	AccessedAt string `pulumi:"accessedAt"`
	// ISO 8061 timeSpan idle interval after which the topic is automatically deleted. The minimum duration is 5 minutes.
	AutoDeleteOnIdle *string `pulumi:"autoDeleteOnIdle"`
	// Message count details
	CountDetails MessageCountDetailsResponse `pulumi:"countDetails"`
	// Exact time the message was created.
	CreatedAt string `pulumi:"createdAt"`
	// Value that indicates whether a subscription has dead letter support on filter evaluation exceptions.
	DeadLetteringOnFilterEvaluationExceptions *bool `pulumi:"deadLetteringOnFilterEvaluationExceptions"`
	// Value that indicates whether a subscription has dead letter support when a message expires.
	DeadLetteringOnMessageExpiration *bool `pulumi:"deadLetteringOnMessageExpiration"`
	// ISO 8061 Default message timespan to live value. This is the duration after which the message expires, starting from when the message is sent to Service Bus. This is the default value used when TimeToLive is not set on a message itself.
	DefaultMessageTimeToLive *string `pulumi:"defaultMessageTimeToLive"`
	// ISO 8601 timeSpan structure that defines the duration of the duplicate detection history. The default value is 10 minutes.
	DuplicateDetectionHistoryTimeWindow *string `pulumi:"duplicateDetectionHistoryTimeWindow"`
	// Value that indicates whether server-side batched operations are enabled.
	EnableBatchedOperations *bool `pulumi:"enableBatchedOperations"`
	// Queue/Topic name to forward the Dead Letter message
	ForwardDeadLetteredMessagesTo *string `pulumi:"forwardDeadLetteredMessagesTo"`
	// Queue/Topic name to forward the messages
	ForwardTo *string `pulumi:"forwardTo"`
	// ISO 8061 lock duration timespan for the subscription. The default value is 1 minute.
	LockDuration *string `pulumi:"lockDuration"`
	// Number of maximum deliveries.
	MaxDeliveryCount *int `pulumi:"maxDeliveryCount"`
	// Number of messages.
	MessageCount int `pulumi:"messageCount"`
	// Value indicating if a subscription supports the concept of sessions.
	RequiresSession *bool `pulumi:"requiresSession"`
	// Enumerates the possible values for the status of a messaging entity.
	Status *string `pulumi:"status"`
	// The exact time the message was updated.
	UpdatedAt string `pulumi:"updatedAt"`
}

// SBSubscriptionPropertiesResponseInput is an input type that accepts SBSubscriptionPropertiesResponseArgs and SBSubscriptionPropertiesResponseOutput values.
// You can construct a concrete instance of `SBSubscriptionPropertiesResponseInput` via:
//
//          SBSubscriptionPropertiesResponseArgs{...}
type SBSubscriptionPropertiesResponseInput interface {
	pulumi.Input

	ToSBSubscriptionPropertiesResponseOutput() SBSubscriptionPropertiesResponseOutput
	ToSBSubscriptionPropertiesResponseOutputWithContext(context.Context) SBSubscriptionPropertiesResponseOutput
}

// Description of Subscription Resource.
type SBSubscriptionPropertiesResponseArgs struct {
	// Last time there was a receive request to this subscription.
	AccessedAt pulumi.StringInput `pulumi:"accessedAt"`
	// ISO 8061 timeSpan idle interval after which the topic is automatically deleted. The minimum duration is 5 minutes.
	AutoDeleteOnIdle pulumi.StringPtrInput `pulumi:"autoDeleteOnIdle"`
	// Message count details
	CountDetails MessageCountDetailsResponseInput `pulumi:"countDetails"`
	// Exact time the message was created.
	CreatedAt pulumi.StringInput `pulumi:"createdAt"`
	// Value that indicates whether a subscription has dead letter support on filter evaluation exceptions.
	DeadLetteringOnFilterEvaluationExceptions pulumi.BoolPtrInput `pulumi:"deadLetteringOnFilterEvaluationExceptions"`
	// Value that indicates whether a subscription has dead letter support when a message expires.
	DeadLetteringOnMessageExpiration pulumi.BoolPtrInput `pulumi:"deadLetteringOnMessageExpiration"`
	// ISO 8061 Default message timespan to live value. This is the duration after which the message expires, starting from when the message is sent to Service Bus. This is the default value used when TimeToLive is not set on a message itself.
	DefaultMessageTimeToLive pulumi.StringPtrInput `pulumi:"defaultMessageTimeToLive"`
	// ISO 8601 timeSpan structure that defines the duration of the duplicate detection history. The default value is 10 minutes.
	DuplicateDetectionHistoryTimeWindow pulumi.StringPtrInput `pulumi:"duplicateDetectionHistoryTimeWindow"`
	// Value that indicates whether server-side batched operations are enabled.
	EnableBatchedOperations pulumi.BoolPtrInput `pulumi:"enableBatchedOperations"`
	// Queue/Topic name to forward the Dead Letter message
	ForwardDeadLetteredMessagesTo pulumi.StringPtrInput `pulumi:"forwardDeadLetteredMessagesTo"`
	// Queue/Topic name to forward the messages
	ForwardTo pulumi.StringPtrInput `pulumi:"forwardTo"`
	// ISO 8061 lock duration timespan for the subscription. The default value is 1 minute.
	LockDuration pulumi.StringPtrInput `pulumi:"lockDuration"`
	// Number of maximum deliveries.
	MaxDeliveryCount pulumi.IntPtrInput `pulumi:"maxDeliveryCount"`
	// Number of messages.
	MessageCount pulumi.IntInput `pulumi:"messageCount"`
	// Value indicating if a subscription supports the concept of sessions.
	RequiresSession pulumi.BoolPtrInput `pulumi:"requiresSession"`
	// Enumerates the possible values for the status of a messaging entity.
	Status pulumi.StringPtrInput `pulumi:"status"`
	// The exact time the message was updated.
	UpdatedAt pulumi.StringInput `pulumi:"updatedAt"`
}

func (SBSubscriptionPropertiesResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SBSubscriptionPropertiesResponse)(nil)).Elem()
}

func (i SBSubscriptionPropertiesResponseArgs) ToSBSubscriptionPropertiesResponseOutput() SBSubscriptionPropertiesResponseOutput {
	return i.ToSBSubscriptionPropertiesResponseOutputWithContext(context.Background())
}

func (i SBSubscriptionPropertiesResponseArgs) ToSBSubscriptionPropertiesResponseOutputWithContext(ctx context.Context) SBSubscriptionPropertiesResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SBSubscriptionPropertiesResponseOutput)
}

func (i SBSubscriptionPropertiesResponseArgs) ToSBSubscriptionPropertiesResponsePtrOutput() SBSubscriptionPropertiesResponsePtrOutput {
	return i.ToSBSubscriptionPropertiesResponsePtrOutputWithContext(context.Background())
}

func (i SBSubscriptionPropertiesResponseArgs) ToSBSubscriptionPropertiesResponsePtrOutputWithContext(ctx context.Context) SBSubscriptionPropertiesResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SBSubscriptionPropertiesResponseOutput).ToSBSubscriptionPropertiesResponsePtrOutputWithContext(ctx)
}

// SBSubscriptionPropertiesResponsePtrInput is an input type that accepts SBSubscriptionPropertiesResponseArgs, SBSubscriptionPropertiesResponsePtr and SBSubscriptionPropertiesResponsePtrOutput values.
// You can construct a concrete instance of `SBSubscriptionPropertiesResponsePtrInput` via:
//
//          SBSubscriptionPropertiesResponseArgs{...}
//
//  or:
//
//          nil
type SBSubscriptionPropertiesResponsePtrInput interface {
	pulumi.Input

	ToSBSubscriptionPropertiesResponsePtrOutput() SBSubscriptionPropertiesResponsePtrOutput
	ToSBSubscriptionPropertiesResponsePtrOutputWithContext(context.Context) SBSubscriptionPropertiesResponsePtrOutput
}

type sbsubscriptionPropertiesResponsePtrType SBSubscriptionPropertiesResponseArgs

func SBSubscriptionPropertiesResponsePtr(v *SBSubscriptionPropertiesResponseArgs) SBSubscriptionPropertiesResponsePtrInput {
	return (*sbsubscriptionPropertiesResponsePtrType)(v)
}

func (*sbsubscriptionPropertiesResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SBSubscriptionPropertiesResponse)(nil)).Elem()
}

func (i *sbsubscriptionPropertiesResponsePtrType) ToSBSubscriptionPropertiesResponsePtrOutput() SBSubscriptionPropertiesResponsePtrOutput {
	return i.ToSBSubscriptionPropertiesResponsePtrOutputWithContext(context.Background())
}

func (i *sbsubscriptionPropertiesResponsePtrType) ToSBSubscriptionPropertiesResponsePtrOutputWithContext(ctx context.Context) SBSubscriptionPropertiesResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SBSubscriptionPropertiesResponsePtrOutput)
}

// Description of Subscription Resource.
type SBSubscriptionPropertiesResponseOutput struct{ *pulumi.OutputState }

func (SBSubscriptionPropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SBSubscriptionPropertiesResponse)(nil)).Elem()
}

func (o SBSubscriptionPropertiesResponseOutput) ToSBSubscriptionPropertiesResponseOutput() SBSubscriptionPropertiesResponseOutput {
	return o
}

func (o SBSubscriptionPropertiesResponseOutput) ToSBSubscriptionPropertiesResponseOutputWithContext(ctx context.Context) SBSubscriptionPropertiesResponseOutput {
	return o
}

func (o SBSubscriptionPropertiesResponseOutput) ToSBSubscriptionPropertiesResponsePtrOutput() SBSubscriptionPropertiesResponsePtrOutput {
	return o.ToSBSubscriptionPropertiesResponsePtrOutputWithContext(context.Background())
}

func (o SBSubscriptionPropertiesResponseOutput) ToSBSubscriptionPropertiesResponsePtrOutputWithContext(ctx context.Context) SBSubscriptionPropertiesResponsePtrOutput {
	return o.ApplyT(func(v SBSubscriptionPropertiesResponse) *SBSubscriptionPropertiesResponse {
		return &v
	}).(SBSubscriptionPropertiesResponsePtrOutput)
}

// Last time there was a receive request to this subscription.
func (o SBSubscriptionPropertiesResponseOutput) AccessedAt() pulumi.StringOutput {
	return o.ApplyT(func(v SBSubscriptionPropertiesResponse) string { return v.AccessedAt }).(pulumi.StringOutput)
}

// ISO 8061 timeSpan idle interval after which the topic is automatically deleted. The minimum duration is 5 minutes.
func (o SBSubscriptionPropertiesResponseOutput) AutoDeleteOnIdle() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SBSubscriptionPropertiesResponse) *string { return v.AutoDeleteOnIdle }).(pulumi.StringPtrOutput)
}

// Message count details
func (o SBSubscriptionPropertiesResponseOutput) CountDetails() MessageCountDetailsResponseOutput {
	return o.ApplyT(func(v SBSubscriptionPropertiesResponse) MessageCountDetailsResponse { return v.CountDetails }).(MessageCountDetailsResponseOutput)
}

// Exact time the message was created.
func (o SBSubscriptionPropertiesResponseOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v SBSubscriptionPropertiesResponse) string { return v.CreatedAt }).(pulumi.StringOutput)
}

// Value that indicates whether a subscription has dead letter support on filter evaluation exceptions.
func (o SBSubscriptionPropertiesResponseOutput) DeadLetteringOnFilterEvaluationExceptions() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SBSubscriptionPropertiesResponse) *bool { return v.DeadLetteringOnFilterEvaluationExceptions }).(pulumi.BoolPtrOutput)
}

// Value that indicates whether a subscription has dead letter support when a message expires.
func (o SBSubscriptionPropertiesResponseOutput) DeadLetteringOnMessageExpiration() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SBSubscriptionPropertiesResponse) *bool { return v.DeadLetteringOnMessageExpiration }).(pulumi.BoolPtrOutput)
}

// ISO 8061 Default message timespan to live value. This is the duration after which the message expires, starting from when the message is sent to Service Bus. This is the default value used when TimeToLive is not set on a message itself.
func (o SBSubscriptionPropertiesResponseOutput) DefaultMessageTimeToLive() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SBSubscriptionPropertiesResponse) *string { return v.DefaultMessageTimeToLive }).(pulumi.StringPtrOutput)
}

// ISO 8601 timeSpan structure that defines the duration of the duplicate detection history. The default value is 10 minutes.
func (o SBSubscriptionPropertiesResponseOutput) DuplicateDetectionHistoryTimeWindow() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SBSubscriptionPropertiesResponse) *string { return v.DuplicateDetectionHistoryTimeWindow }).(pulumi.StringPtrOutput)
}

// Value that indicates whether server-side batched operations are enabled.
func (o SBSubscriptionPropertiesResponseOutput) EnableBatchedOperations() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SBSubscriptionPropertiesResponse) *bool { return v.EnableBatchedOperations }).(pulumi.BoolPtrOutput)
}

// Queue/Topic name to forward the Dead Letter message
func (o SBSubscriptionPropertiesResponseOutput) ForwardDeadLetteredMessagesTo() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SBSubscriptionPropertiesResponse) *string { return v.ForwardDeadLetteredMessagesTo }).(pulumi.StringPtrOutput)
}

// Queue/Topic name to forward the messages
func (o SBSubscriptionPropertiesResponseOutput) ForwardTo() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SBSubscriptionPropertiesResponse) *string { return v.ForwardTo }).(pulumi.StringPtrOutput)
}

// ISO 8061 lock duration timespan for the subscription. The default value is 1 minute.
func (o SBSubscriptionPropertiesResponseOutput) LockDuration() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SBSubscriptionPropertiesResponse) *string { return v.LockDuration }).(pulumi.StringPtrOutput)
}

// Number of maximum deliveries.
func (o SBSubscriptionPropertiesResponseOutput) MaxDeliveryCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SBSubscriptionPropertiesResponse) *int { return v.MaxDeliveryCount }).(pulumi.IntPtrOutput)
}

// Number of messages.
func (o SBSubscriptionPropertiesResponseOutput) MessageCount() pulumi.IntOutput {
	return o.ApplyT(func(v SBSubscriptionPropertiesResponse) int { return v.MessageCount }).(pulumi.IntOutput)
}

// Value indicating if a subscription supports the concept of sessions.
func (o SBSubscriptionPropertiesResponseOutput) RequiresSession() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SBSubscriptionPropertiesResponse) *bool { return v.RequiresSession }).(pulumi.BoolPtrOutput)
}

// Enumerates the possible values for the status of a messaging entity.
func (o SBSubscriptionPropertiesResponseOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SBSubscriptionPropertiesResponse) *string { return v.Status }).(pulumi.StringPtrOutput)
}

// The exact time the message was updated.
func (o SBSubscriptionPropertiesResponseOutput) UpdatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v SBSubscriptionPropertiesResponse) string { return v.UpdatedAt }).(pulumi.StringOutput)
}

type SBSubscriptionPropertiesResponsePtrOutput struct{ *pulumi.OutputState }

func (SBSubscriptionPropertiesResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SBSubscriptionPropertiesResponse)(nil)).Elem()
}

func (o SBSubscriptionPropertiesResponsePtrOutput) ToSBSubscriptionPropertiesResponsePtrOutput() SBSubscriptionPropertiesResponsePtrOutput {
	return o
}

func (o SBSubscriptionPropertiesResponsePtrOutput) ToSBSubscriptionPropertiesResponsePtrOutputWithContext(ctx context.Context) SBSubscriptionPropertiesResponsePtrOutput {
	return o
}

func (o SBSubscriptionPropertiesResponsePtrOutput) Elem() SBSubscriptionPropertiesResponseOutput {
	return o.ApplyT(func(v *SBSubscriptionPropertiesResponse) SBSubscriptionPropertiesResponse { return *v }).(SBSubscriptionPropertiesResponseOutput)
}

// Last time there was a receive request to this subscription.
func (o SBSubscriptionPropertiesResponsePtrOutput) AccessedAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SBSubscriptionPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return &v.AccessedAt
	}).(pulumi.StringPtrOutput)
}

// ISO 8061 timeSpan idle interval after which the topic is automatically deleted. The minimum duration is 5 minutes.
func (o SBSubscriptionPropertiesResponsePtrOutput) AutoDeleteOnIdle() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SBSubscriptionPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return v.AutoDeleteOnIdle
	}).(pulumi.StringPtrOutput)
}

// Message count details
func (o SBSubscriptionPropertiesResponsePtrOutput) CountDetails() MessageCountDetailsResponsePtrOutput {
	return o.ApplyT(func(v *SBSubscriptionPropertiesResponse) *MessageCountDetailsResponse {
		if v == nil {
			return nil
		}
		return &v.CountDetails
	}).(MessageCountDetailsResponsePtrOutput)
}

// Exact time the message was created.
func (o SBSubscriptionPropertiesResponsePtrOutput) CreatedAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SBSubscriptionPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return &v.CreatedAt
	}).(pulumi.StringPtrOutput)
}

// Value that indicates whether a subscription has dead letter support on filter evaluation exceptions.
func (o SBSubscriptionPropertiesResponsePtrOutput) DeadLetteringOnFilterEvaluationExceptions() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SBSubscriptionPropertiesResponse) *bool {
		if v == nil {
			return nil
		}
		return v.DeadLetteringOnFilterEvaluationExceptions
	}).(pulumi.BoolPtrOutput)
}

// Value that indicates whether a subscription has dead letter support when a message expires.
func (o SBSubscriptionPropertiesResponsePtrOutput) DeadLetteringOnMessageExpiration() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SBSubscriptionPropertiesResponse) *bool {
		if v == nil {
			return nil
		}
		return v.DeadLetteringOnMessageExpiration
	}).(pulumi.BoolPtrOutput)
}

// ISO 8061 Default message timespan to live value. This is the duration after which the message expires, starting from when the message is sent to Service Bus. This is the default value used when TimeToLive is not set on a message itself.
func (o SBSubscriptionPropertiesResponsePtrOutput) DefaultMessageTimeToLive() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SBSubscriptionPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return v.DefaultMessageTimeToLive
	}).(pulumi.StringPtrOutput)
}

// ISO 8601 timeSpan structure that defines the duration of the duplicate detection history. The default value is 10 minutes.
func (o SBSubscriptionPropertiesResponsePtrOutput) DuplicateDetectionHistoryTimeWindow() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SBSubscriptionPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return v.DuplicateDetectionHistoryTimeWindow
	}).(pulumi.StringPtrOutput)
}

// Value that indicates whether server-side batched operations are enabled.
func (o SBSubscriptionPropertiesResponsePtrOutput) EnableBatchedOperations() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SBSubscriptionPropertiesResponse) *bool {
		if v == nil {
			return nil
		}
		return v.EnableBatchedOperations
	}).(pulumi.BoolPtrOutput)
}

// Queue/Topic name to forward the Dead Letter message
func (o SBSubscriptionPropertiesResponsePtrOutput) ForwardDeadLetteredMessagesTo() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SBSubscriptionPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return v.ForwardDeadLetteredMessagesTo
	}).(pulumi.StringPtrOutput)
}

// Queue/Topic name to forward the messages
func (o SBSubscriptionPropertiesResponsePtrOutput) ForwardTo() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SBSubscriptionPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return v.ForwardTo
	}).(pulumi.StringPtrOutput)
}

// ISO 8061 lock duration timespan for the subscription. The default value is 1 minute.
func (o SBSubscriptionPropertiesResponsePtrOutput) LockDuration() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SBSubscriptionPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return v.LockDuration
	}).(pulumi.StringPtrOutput)
}

// Number of maximum deliveries.
func (o SBSubscriptionPropertiesResponsePtrOutput) MaxDeliveryCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SBSubscriptionPropertiesResponse) *int {
		if v == nil {
			return nil
		}
		return v.MaxDeliveryCount
	}).(pulumi.IntPtrOutput)
}

// Number of messages.
func (o SBSubscriptionPropertiesResponsePtrOutput) MessageCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SBSubscriptionPropertiesResponse) *int {
		if v == nil {
			return nil
		}
		return &v.MessageCount
	}).(pulumi.IntPtrOutput)
}

// Value indicating if a subscription supports the concept of sessions.
func (o SBSubscriptionPropertiesResponsePtrOutput) RequiresSession() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SBSubscriptionPropertiesResponse) *bool {
		if v == nil {
			return nil
		}
		return v.RequiresSession
	}).(pulumi.BoolPtrOutput)
}

// Enumerates the possible values for the status of a messaging entity.
func (o SBSubscriptionPropertiesResponsePtrOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SBSubscriptionPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return v.Status
	}).(pulumi.StringPtrOutput)
}

// The exact time the message was updated.
func (o SBSubscriptionPropertiesResponsePtrOutput) UpdatedAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SBSubscriptionPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return &v.UpdatedAt
	}).(pulumi.StringPtrOutput)
}

// The Topic Properties definition.
type SBTopicProperties struct {
	// ISO 8601 timespan idle interval after which the topic is automatically deleted. The minimum duration is 5 minutes.
	AutoDeleteOnIdle *string `pulumi:"autoDeleteOnIdle"`
	// ISO 8601 Default message timespan to live value. This is the duration after which the message expires, starting from when the message is sent to Service Bus. This is the default value used when TimeToLive is not set on a message itself.
	DefaultMessageTimeToLive *string `pulumi:"defaultMessageTimeToLive"`
	// ISO8601 timespan structure that defines the duration of the duplicate detection history. The default value is 10 minutes.
	DuplicateDetectionHistoryTimeWindow *string `pulumi:"duplicateDetectionHistoryTimeWindow"`
	// Value that indicates whether server-side batched operations are enabled.
	EnableBatchedOperations *bool `pulumi:"enableBatchedOperations"`
	// Value that indicates whether Express Entities are enabled. An express topic holds a message in memory temporarily before writing it to persistent storage.
	EnableExpress *bool `pulumi:"enableExpress"`
	// Value that indicates whether the topic to be partitioned across multiple message brokers is enabled.
	EnablePartitioning *bool `pulumi:"enablePartitioning"`
	// Maximum size of the topic in megabytes, which is the size of the memory allocated for the topic. Default is 1024.
	MaxSizeInMegabytes *int `pulumi:"maxSizeInMegabytes"`
	// Value indicating if this topic requires duplicate detection.
	RequiresDuplicateDetection *bool `pulumi:"requiresDuplicateDetection"`
	// Enumerates the possible values for the status of a messaging entity.
	Status *string `pulumi:"status"`
	// Value that indicates whether the topic supports ordering.
	SupportOrdering *bool `pulumi:"supportOrdering"`
}

// SBTopicPropertiesInput is an input type that accepts SBTopicPropertiesArgs and SBTopicPropertiesOutput values.
// You can construct a concrete instance of `SBTopicPropertiesInput` via:
//
//          SBTopicPropertiesArgs{...}
type SBTopicPropertiesInput interface {
	pulumi.Input

	ToSBTopicPropertiesOutput() SBTopicPropertiesOutput
	ToSBTopicPropertiesOutputWithContext(context.Context) SBTopicPropertiesOutput
}

// The Topic Properties definition.
type SBTopicPropertiesArgs struct {
	// ISO 8601 timespan idle interval after which the topic is automatically deleted. The minimum duration is 5 minutes.
	AutoDeleteOnIdle pulumi.StringPtrInput `pulumi:"autoDeleteOnIdle"`
	// ISO 8601 Default message timespan to live value. This is the duration after which the message expires, starting from when the message is sent to Service Bus. This is the default value used when TimeToLive is not set on a message itself.
	DefaultMessageTimeToLive pulumi.StringPtrInput `pulumi:"defaultMessageTimeToLive"`
	// ISO8601 timespan structure that defines the duration of the duplicate detection history. The default value is 10 minutes.
	DuplicateDetectionHistoryTimeWindow pulumi.StringPtrInput `pulumi:"duplicateDetectionHistoryTimeWindow"`
	// Value that indicates whether server-side batched operations are enabled.
	EnableBatchedOperations pulumi.BoolPtrInput `pulumi:"enableBatchedOperations"`
	// Value that indicates whether Express Entities are enabled. An express topic holds a message in memory temporarily before writing it to persistent storage.
	EnableExpress pulumi.BoolPtrInput `pulumi:"enableExpress"`
	// Value that indicates whether the topic to be partitioned across multiple message brokers is enabled.
	EnablePartitioning pulumi.BoolPtrInput `pulumi:"enablePartitioning"`
	// Maximum size of the topic in megabytes, which is the size of the memory allocated for the topic. Default is 1024.
	MaxSizeInMegabytes pulumi.IntPtrInput `pulumi:"maxSizeInMegabytes"`
	// Value indicating if this topic requires duplicate detection.
	RequiresDuplicateDetection pulumi.BoolPtrInput `pulumi:"requiresDuplicateDetection"`
	// Enumerates the possible values for the status of a messaging entity.
	Status pulumi.StringPtrInput `pulumi:"status"`
	// Value that indicates whether the topic supports ordering.
	SupportOrdering pulumi.BoolPtrInput `pulumi:"supportOrdering"`
}

func (SBTopicPropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SBTopicProperties)(nil)).Elem()
}

func (i SBTopicPropertiesArgs) ToSBTopicPropertiesOutput() SBTopicPropertiesOutput {
	return i.ToSBTopicPropertiesOutputWithContext(context.Background())
}

func (i SBTopicPropertiesArgs) ToSBTopicPropertiesOutputWithContext(ctx context.Context) SBTopicPropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SBTopicPropertiesOutput)
}

func (i SBTopicPropertiesArgs) ToSBTopicPropertiesPtrOutput() SBTopicPropertiesPtrOutput {
	return i.ToSBTopicPropertiesPtrOutputWithContext(context.Background())
}

func (i SBTopicPropertiesArgs) ToSBTopicPropertiesPtrOutputWithContext(ctx context.Context) SBTopicPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SBTopicPropertiesOutput).ToSBTopicPropertiesPtrOutputWithContext(ctx)
}

// SBTopicPropertiesPtrInput is an input type that accepts SBTopicPropertiesArgs, SBTopicPropertiesPtr and SBTopicPropertiesPtrOutput values.
// You can construct a concrete instance of `SBTopicPropertiesPtrInput` via:
//
//          SBTopicPropertiesArgs{...}
//
//  or:
//
//          nil
type SBTopicPropertiesPtrInput interface {
	pulumi.Input

	ToSBTopicPropertiesPtrOutput() SBTopicPropertiesPtrOutput
	ToSBTopicPropertiesPtrOutputWithContext(context.Context) SBTopicPropertiesPtrOutput
}

type sbtopicPropertiesPtrType SBTopicPropertiesArgs

func SBTopicPropertiesPtr(v *SBTopicPropertiesArgs) SBTopicPropertiesPtrInput {
	return (*sbtopicPropertiesPtrType)(v)
}

func (*sbtopicPropertiesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SBTopicProperties)(nil)).Elem()
}

func (i *sbtopicPropertiesPtrType) ToSBTopicPropertiesPtrOutput() SBTopicPropertiesPtrOutput {
	return i.ToSBTopicPropertiesPtrOutputWithContext(context.Background())
}

func (i *sbtopicPropertiesPtrType) ToSBTopicPropertiesPtrOutputWithContext(ctx context.Context) SBTopicPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SBTopicPropertiesPtrOutput)
}

// The Topic Properties definition.
type SBTopicPropertiesOutput struct{ *pulumi.OutputState }

func (SBTopicPropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SBTopicProperties)(nil)).Elem()
}

func (o SBTopicPropertiesOutput) ToSBTopicPropertiesOutput() SBTopicPropertiesOutput {
	return o
}

func (o SBTopicPropertiesOutput) ToSBTopicPropertiesOutputWithContext(ctx context.Context) SBTopicPropertiesOutput {
	return o
}

func (o SBTopicPropertiesOutput) ToSBTopicPropertiesPtrOutput() SBTopicPropertiesPtrOutput {
	return o.ToSBTopicPropertiesPtrOutputWithContext(context.Background())
}

func (o SBTopicPropertiesOutput) ToSBTopicPropertiesPtrOutputWithContext(ctx context.Context) SBTopicPropertiesPtrOutput {
	return o.ApplyT(func(v SBTopicProperties) *SBTopicProperties {
		return &v
	}).(SBTopicPropertiesPtrOutput)
}

// ISO 8601 timespan idle interval after which the topic is automatically deleted. The minimum duration is 5 minutes.
func (o SBTopicPropertiesOutput) AutoDeleteOnIdle() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SBTopicProperties) *string { return v.AutoDeleteOnIdle }).(pulumi.StringPtrOutput)
}

// ISO 8601 Default message timespan to live value. This is the duration after which the message expires, starting from when the message is sent to Service Bus. This is the default value used when TimeToLive is not set on a message itself.
func (o SBTopicPropertiesOutput) DefaultMessageTimeToLive() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SBTopicProperties) *string { return v.DefaultMessageTimeToLive }).(pulumi.StringPtrOutput)
}

// ISO8601 timespan structure that defines the duration of the duplicate detection history. The default value is 10 minutes.
func (o SBTopicPropertiesOutput) DuplicateDetectionHistoryTimeWindow() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SBTopicProperties) *string { return v.DuplicateDetectionHistoryTimeWindow }).(pulumi.StringPtrOutput)
}

// Value that indicates whether server-side batched operations are enabled.
func (o SBTopicPropertiesOutput) EnableBatchedOperations() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SBTopicProperties) *bool { return v.EnableBatchedOperations }).(pulumi.BoolPtrOutput)
}

// Value that indicates whether Express Entities are enabled. An express topic holds a message in memory temporarily before writing it to persistent storage.
func (o SBTopicPropertiesOutput) EnableExpress() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SBTopicProperties) *bool { return v.EnableExpress }).(pulumi.BoolPtrOutput)
}

// Value that indicates whether the topic to be partitioned across multiple message brokers is enabled.
func (o SBTopicPropertiesOutput) EnablePartitioning() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SBTopicProperties) *bool { return v.EnablePartitioning }).(pulumi.BoolPtrOutput)
}

// Maximum size of the topic in megabytes, which is the size of the memory allocated for the topic. Default is 1024.
func (o SBTopicPropertiesOutput) MaxSizeInMegabytes() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SBTopicProperties) *int { return v.MaxSizeInMegabytes }).(pulumi.IntPtrOutput)
}

// Value indicating if this topic requires duplicate detection.
func (o SBTopicPropertiesOutput) RequiresDuplicateDetection() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SBTopicProperties) *bool { return v.RequiresDuplicateDetection }).(pulumi.BoolPtrOutput)
}

// Enumerates the possible values for the status of a messaging entity.
func (o SBTopicPropertiesOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SBTopicProperties) *string { return v.Status }).(pulumi.StringPtrOutput)
}

// Value that indicates whether the topic supports ordering.
func (o SBTopicPropertiesOutput) SupportOrdering() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SBTopicProperties) *bool { return v.SupportOrdering }).(pulumi.BoolPtrOutput)
}

type SBTopicPropertiesPtrOutput struct{ *pulumi.OutputState }

func (SBTopicPropertiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SBTopicProperties)(nil)).Elem()
}

func (o SBTopicPropertiesPtrOutput) ToSBTopicPropertiesPtrOutput() SBTopicPropertiesPtrOutput {
	return o
}

func (o SBTopicPropertiesPtrOutput) ToSBTopicPropertiesPtrOutputWithContext(ctx context.Context) SBTopicPropertiesPtrOutput {
	return o
}

func (o SBTopicPropertiesPtrOutput) Elem() SBTopicPropertiesOutput {
	return o.ApplyT(func(v *SBTopicProperties) SBTopicProperties { return *v }).(SBTopicPropertiesOutput)
}

// ISO 8601 timespan idle interval after which the topic is automatically deleted. The minimum duration is 5 minutes.
func (o SBTopicPropertiesPtrOutput) AutoDeleteOnIdle() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SBTopicProperties) *string {
		if v == nil {
			return nil
		}
		return v.AutoDeleteOnIdle
	}).(pulumi.StringPtrOutput)
}

// ISO 8601 Default message timespan to live value. This is the duration after which the message expires, starting from when the message is sent to Service Bus. This is the default value used when TimeToLive is not set on a message itself.
func (o SBTopicPropertiesPtrOutput) DefaultMessageTimeToLive() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SBTopicProperties) *string {
		if v == nil {
			return nil
		}
		return v.DefaultMessageTimeToLive
	}).(pulumi.StringPtrOutput)
}

// ISO8601 timespan structure that defines the duration of the duplicate detection history. The default value is 10 minutes.
func (o SBTopicPropertiesPtrOutput) DuplicateDetectionHistoryTimeWindow() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SBTopicProperties) *string {
		if v == nil {
			return nil
		}
		return v.DuplicateDetectionHistoryTimeWindow
	}).(pulumi.StringPtrOutput)
}

// Value that indicates whether server-side batched operations are enabled.
func (o SBTopicPropertiesPtrOutput) EnableBatchedOperations() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SBTopicProperties) *bool {
		if v == nil {
			return nil
		}
		return v.EnableBatchedOperations
	}).(pulumi.BoolPtrOutput)
}

// Value that indicates whether Express Entities are enabled. An express topic holds a message in memory temporarily before writing it to persistent storage.
func (o SBTopicPropertiesPtrOutput) EnableExpress() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SBTopicProperties) *bool {
		if v == nil {
			return nil
		}
		return v.EnableExpress
	}).(pulumi.BoolPtrOutput)
}

// Value that indicates whether the topic to be partitioned across multiple message brokers is enabled.
func (o SBTopicPropertiesPtrOutput) EnablePartitioning() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SBTopicProperties) *bool {
		if v == nil {
			return nil
		}
		return v.EnablePartitioning
	}).(pulumi.BoolPtrOutput)
}

// Maximum size of the topic in megabytes, which is the size of the memory allocated for the topic. Default is 1024.
func (o SBTopicPropertiesPtrOutput) MaxSizeInMegabytes() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SBTopicProperties) *int {
		if v == nil {
			return nil
		}
		return v.MaxSizeInMegabytes
	}).(pulumi.IntPtrOutput)
}

// Value indicating if this topic requires duplicate detection.
func (o SBTopicPropertiesPtrOutput) RequiresDuplicateDetection() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SBTopicProperties) *bool {
		if v == nil {
			return nil
		}
		return v.RequiresDuplicateDetection
	}).(pulumi.BoolPtrOutput)
}

// Enumerates the possible values for the status of a messaging entity.
func (o SBTopicPropertiesPtrOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SBTopicProperties) *string {
		if v == nil {
			return nil
		}
		return v.Status
	}).(pulumi.StringPtrOutput)
}

// Value that indicates whether the topic supports ordering.
func (o SBTopicPropertiesPtrOutput) SupportOrdering() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SBTopicProperties) *bool {
		if v == nil {
			return nil
		}
		return v.SupportOrdering
	}).(pulumi.BoolPtrOutput)
}

// The Topic Properties definition.
type SBTopicPropertiesResponse struct {
	// Last time the message was sent, or a request was received, for this topic.
	AccessedAt string `pulumi:"accessedAt"`
	// ISO 8601 timespan idle interval after which the topic is automatically deleted. The minimum duration is 5 minutes.
	AutoDeleteOnIdle *string `pulumi:"autoDeleteOnIdle"`
	// Message count details
	CountDetails MessageCountDetailsResponse `pulumi:"countDetails"`
	// Exact time the message was created.
	CreatedAt string `pulumi:"createdAt"`
	// ISO 8601 Default message timespan to live value. This is the duration after which the message expires, starting from when the message is sent to Service Bus. This is the default value used when TimeToLive is not set on a message itself.
	DefaultMessageTimeToLive *string `pulumi:"defaultMessageTimeToLive"`
	// ISO8601 timespan structure that defines the duration of the duplicate detection history. The default value is 10 minutes.
	DuplicateDetectionHistoryTimeWindow *string `pulumi:"duplicateDetectionHistoryTimeWindow"`
	// Value that indicates whether server-side batched operations are enabled.
	EnableBatchedOperations *bool `pulumi:"enableBatchedOperations"`
	// Value that indicates whether Express Entities are enabled. An express topic holds a message in memory temporarily before writing it to persistent storage.
	EnableExpress *bool `pulumi:"enableExpress"`
	// Value that indicates whether the topic to be partitioned across multiple message brokers is enabled.
	EnablePartitioning *bool `pulumi:"enablePartitioning"`
	// Maximum size of the topic in megabytes, which is the size of the memory allocated for the topic. Default is 1024.
	MaxSizeInMegabytes *int `pulumi:"maxSizeInMegabytes"`
	// Value indicating if this topic requires duplicate detection.
	RequiresDuplicateDetection *bool `pulumi:"requiresDuplicateDetection"`
	// Size of the topic, in bytes.
	SizeInBytes int `pulumi:"sizeInBytes"`
	// Enumerates the possible values for the status of a messaging entity.
	Status *string `pulumi:"status"`
	// Number of subscriptions.
	SubscriptionCount int `pulumi:"subscriptionCount"`
	// Value that indicates whether the topic supports ordering.
	SupportOrdering *bool `pulumi:"supportOrdering"`
	// The exact time the message was updated.
	UpdatedAt string `pulumi:"updatedAt"`
}

// SBTopicPropertiesResponseInput is an input type that accepts SBTopicPropertiesResponseArgs and SBTopicPropertiesResponseOutput values.
// You can construct a concrete instance of `SBTopicPropertiesResponseInput` via:
//
//          SBTopicPropertiesResponseArgs{...}
type SBTopicPropertiesResponseInput interface {
	pulumi.Input

	ToSBTopicPropertiesResponseOutput() SBTopicPropertiesResponseOutput
	ToSBTopicPropertiesResponseOutputWithContext(context.Context) SBTopicPropertiesResponseOutput
}

// The Topic Properties definition.
type SBTopicPropertiesResponseArgs struct {
	// Last time the message was sent, or a request was received, for this topic.
	AccessedAt pulumi.StringInput `pulumi:"accessedAt"`
	// ISO 8601 timespan idle interval after which the topic is automatically deleted. The minimum duration is 5 minutes.
	AutoDeleteOnIdle pulumi.StringPtrInput `pulumi:"autoDeleteOnIdle"`
	// Message count details
	CountDetails MessageCountDetailsResponseInput `pulumi:"countDetails"`
	// Exact time the message was created.
	CreatedAt pulumi.StringInput `pulumi:"createdAt"`
	// ISO 8601 Default message timespan to live value. This is the duration after which the message expires, starting from when the message is sent to Service Bus. This is the default value used when TimeToLive is not set on a message itself.
	DefaultMessageTimeToLive pulumi.StringPtrInput `pulumi:"defaultMessageTimeToLive"`
	// ISO8601 timespan structure that defines the duration of the duplicate detection history. The default value is 10 minutes.
	DuplicateDetectionHistoryTimeWindow pulumi.StringPtrInput `pulumi:"duplicateDetectionHistoryTimeWindow"`
	// Value that indicates whether server-side batched operations are enabled.
	EnableBatchedOperations pulumi.BoolPtrInput `pulumi:"enableBatchedOperations"`
	// Value that indicates whether Express Entities are enabled. An express topic holds a message in memory temporarily before writing it to persistent storage.
	EnableExpress pulumi.BoolPtrInput `pulumi:"enableExpress"`
	// Value that indicates whether the topic to be partitioned across multiple message brokers is enabled.
	EnablePartitioning pulumi.BoolPtrInput `pulumi:"enablePartitioning"`
	// Maximum size of the topic in megabytes, which is the size of the memory allocated for the topic. Default is 1024.
	MaxSizeInMegabytes pulumi.IntPtrInput `pulumi:"maxSizeInMegabytes"`
	// Value indicating if this topic requires duplicate detection.
	RequiresDuplicateDetection pulumi.BoolPtrInput `pulumi:"requiresDuplicateDetection"`
	// Size of the topic, in bytes.
	SizeInBytes pulumi.IntInput `pulumi:"sizeInBytes"`
	// Enumerates the possible values for the status of a messaging entity.
	Status pulumi.StringPtrInput `pulumi:"status"`
	// Number of subscriptions.
	SubscriptionCount pulumi.IntInput `pulumi:"subscriptionCount"`
	// Value that indicates whether the topic supports ordering.
	SupportOrdering pulumi.BoolPtrInput `pulumi:"supportOrdering"`
	// The exact time the message was updated.
	UpdatedAt pulumi.StringInput `pulumi:"updatedAt"`
}

func (SBTopicPropertiesResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SBTopicPropertiesResponse)(nil)).Elem()
}

func (i SBTopicPropertiesResponseArgs) ToSBTopicPropertiesResponseOutput() SBTopicPropertiesResponseOutput {
	return i.ToSBTopicPropertiesResponseOutputWithContext(context.Background())
}

func (i SBTopicPropertiesResponseArgs) ToSBTopicPropertiesResponseOutputWithContext(ctx context.Context) SBTopicPropertiesResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SBTopicPropertiesResponseOutput)
}

func (i SBTopicPropertiesResponseArgs) ToSBTopicPropertiesResponsePtrOutput() SBTopicPropertiesResponsePtrOutput {
	return i.ToSBTopicPropertiesResponsePtrOutputWithContext(context.Background())
}

func (i SBTopicPropertiesResponseArgs) ToSBTopicPropertiesResponsePtrOutputWithContext(ctx context.Context) SBTopicPropertiesResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SBTopicPropertiesResponseOutput).ToSBTopicPropertiesResponsePtrOutputWithContext(ctx)
}

// SBTopicPropertiesResponsePtrInput is an input type that accepts SBTopicPropertiesResponseArgs, SBTopicPropertiesResponsePtr and SBTopicPropertiesResponsePtrOutput values.
// You can construct a concrete instance of `SBTopicPropertiesResponsePtrInput` via:
//
//          SBTopicPropertiesResponseArgs{...}
//
//  or:
//
//          nil
type SBTopicPropertiesResponsePtrInput interface {
	pulumi.Input

	ToSBTopicPropertiesResponsePtrOutput() SBTopicPropertiesResponsePtrOutput
	ToSBTopicPropertiesResponsePtrOutputWithContext(context.Context) SBTopicPropertiesResponsePtrOutput
}

type sbtopicPropertiesResponsePtrType SBTopicPropertiesResponseArgs

func SBTopicPropertiesResponsePtr(v *SBTopicPropertiesResponseArgs) SBTopicPropertiesResponsePtrInput {
	return (*sbtopicPropertiesResponsePtrType)(v)
}

func (*sbtopicPropertiesResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SBTopicPropertiesResponse)(nil)).Elem()
}

func (i *sbtopicPropertiesResponsePtrType) ToSBTopicPropertiesResponsePtrOutput() SBTopicPropertiesResponsePtrOutput {
	return i.ToSBTopicPropertiesResponsePtrOutputWithContext(context.Background())
}

func (i *sbtopicPropertiesResponsePtrType) ToSBTopicPropertiesResponsePtrOutputWithContext(ctx context.Context) SBTopicPropertiesResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SBTopicPropertiesResponsePtrOutput)
}

// The Topic Properties definition.
type SBTopicPropertiesResponseOutput struct{ *pulumi.OutputState }

func (SBTopicPropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SBTopicPropertiesResponse)(nil)).Elem()
}

func (o SBTopicPropertiesResponseOutput) ToSBTopicPropertiesResponseOutput() SBTopicPropertiesResponseOutput {
	return o
}

func (o SBTopicPropertiesResponseOutput) ToSBTopicPropertiesResponseOutputWithContext(ctx context.Context) SBTopicPropertiesResponseOutput {
	return o
}

func (o SBTopicPropertiesResponseOutput) ToSBTopicPropertiesResponsePtrOutput() SBTopicPropertiesResponsePtrOutput {
	return o.ToSBTopicPropertiesResponsePtrOutputWithContext(context.Background())
}

func (o SBTopicPropertiesResponseOutput) ToSBTopicPropertiesResponsePtrOutputWithContext(ctx context.Context) SBTopicPropertiesResponsePtrOutput {
	return o.ApplyT(func(v SBTopicPropertiesResponse) *SBTopicPropertiesResponse {
		return &v
	}).(SBTopicPropertiesResponsePtrOutput)
}

// Last time the message was sent, or a request was received, for this topic.
func (o SBTopicPropertiesResponseOutput) AccessedAt() pulumi.StringOutput {
	return o.ApplyT(func(v SBTopicPropertiesResponse) string { return v.AccessedAt }).(pulumi.StringOutput)
}

// ISO 8601 timespan idle interval after which the topic is automatically deleted. The minimum duration is 5 minutes.
func (o SBTopicPropertiesResponseOutput) AutoDeleteOnIdle() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SBTopicPropertiesResponse) *string { return v.AutoDeleteOnIdle }).(pulumi.StringPtrOutput)
}

// Message count details
func (o SBTopicPropertiesResponseOutput) CountDetails() MessageCountDetailsResponseOutput {
	return o.ApplyT(func(v SBTopicPropertiesResponse) MessageCountDetailsResponse { return v.CountDetails }).(MessageCountDetailsResponseOutput)
}

// Exact time the message was created.
func (o SBTopicPropertiesResponseOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v SBTopicPropertiesResponse) string { return v.CreatedAt }).(pulumi.StringOutput)
}

// ISO 8601 Default message timespan to live value. This is the duration after which the message expires, starting from when the message is sent to Service Bus. This is the default value used when TimeToLive is not set on a message itself.
func (o SBTopicPropertiesResponseOutput) DefaultMessageTimeToLive() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SBTopicPropertiesResponse) *string { return v.DefaultMessageTimeToLive }).(pulumi.StringPtrOutput)
}

// ISO8601 timespan structure that defines the duration of the duplicate detection history. The default value is 10 minutes.
func (o SBTopicPropertiesResponseOutput) DuplicateDetectionHistoryTimeWindow() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SBTopicPropertiesResponse) *string { return v.DuplicateDetectionHistoryTimeWindow }).(pulumi.StringPtrOutput)
}

// Value that indicates whether server-side batched operations are enabled.
func (o SBTopicPropertiesResponseOutput) EnableBatchedOperations() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SBTopicPropertiesResponse) *bool { return v.EnableBatchedOperations }).(pulumi.BoolPtrOutput)
}

// Value that indicates whether Express Entities are enabled. An express topic holds a message in memory temporarily before writing it to persistent storage.
func (o SBTopicPropertiesResponseOutput) EnableExpress() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SBTopicPropertiesResponse) *bool { return v.EnableExpress }).(pulumi.BoolPtrOutput)
}

// Value that indicates whether the topic to be partitioned across multiple message brokers is enabled.
func (o SBTopicPropertiesResponseOutput) EnablePartitioning() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SBTopicPropertiesResponse) *bool { return v.EnablePartitioning }).(pulumi.BoolPtrOutput)
}

// Maximum size of the topic in megabytes, which is the size of the memory allocated for the topic. Default is 1024.
func (o SBTopicPropertiesResponseOutput) MaxSizeInMegabytes() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SBTopicPropertiesResponse) *int { return v.MaxSizeInMegabytes }).(pulumi.IntPtrOutput)
}

// Value indicating if this topic requires duplicate detection.
func (o SBTopicPropertiesResponseOutput) RequiresDuplicateDetection() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SBTopicPropertiesResponse) *bool { return v.RequiresDuplicateDetection }).(pulumi.BoolPtrOutput)
}

// Size of the topic, in bytes.
func (o SBTopicPropertiesResponseOutput) SizeInBytes() pulumi.IntOutput {
	return o.ApplyT(func(v SBTopicPropertiesResponse) int { return v.SizeInBytes }).(pulumi.IntOutput)
}

// Enumerates the possible values for the status of a messaging entity.
func (o SBTopicPropertiesResponseOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SBTopicPropertiesResponse) *string { return v.Status }).(pulumi.StringPtrOutput)
}

// Number of subscriptions.
func (o SBTopicPropertiesResponseOutput) SubscriptionCount() pulumi.IntOutput {
	return o.ApplyT(func(v SBTopicPropertiesResponse) int { return v.SubscriptionCount }).(pulumi.IntOutput)
}

// Value that indicates whether the topic supports ordering.
func (o SBTopicPropertiesResponseOutput) SupportOrdering() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SBTopicPropertiesResponse) *bool { return v.SupportOrdering }).(pulumi.BoolPtrOutput)
}

// The exact time the message was updated.
func (o SBTopicPropertiesResponseOutput) UpdatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v SBTopicPropertiesResponse) string { return v.UpdatedAt }).(pulumi.StringOutput)
}

type SBTopicPropertiesResponsePtrOutput struct{ *pulumi.OutputState }

func (SBTopicPropertiesResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SBTopicPropertiesResponse)(nil)).Elem()
}

func (o SBTopicPropertiesResponsePtrOutput) ToSBTopicPropertiesResponsePtrOutput() SBTopicPropertiesResponsePtrOutput {
	return o
}

func (o SBTopicPropertiesResponsePtrOutput) ToSBTopicPropertiesResponsePtrOutputWithContext(ctx context.Context) SBTopicPropertiesResponsePtrOutput {
	return o
}

func (o SBTopicPropertiesResponsePtrOutput) Elem() SBTopicPropertiesResponseOutput {
	return o.ApplyT(func(v *SBTopicPropertiesResponse) SBTopicPropertiesResponse { return *v }).(SBTopicPropertiesResponseOutput)
}

// Last time the message was sent, or a request was received, for this topic.
func (o SBTopicPropertiesResponsePtrOutput) AccessedAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SBTopicPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return &v.AccessedAt
	}).(pulumi.StringPtrOutput)
}

// ISO 8601 timespan idle interval after which the topic is automatically deleted. The minimum duration is 5 minutes.
func (o SBTopicPropertiesResponsePtrOutput) AutoDeleteOnIdle() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SBTopicPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return v.AutoDeleteOnIdle
	}).(pulumi.StringPtrOutput)
}

// Message count details
func (o SBTopicPropertiesResponsePtrOutput) CountDetails() MessageCountDetailsResponsePtrOutput {
	return o.ApplyT(func(v *SBTopicPropertiesResponse) *MessageCountDetailsResponse {
		if v == nil {
			return nil
		}
		return &v.CountDetails
	}).(MessageCountDetailsResponsePtrOutput)
}

// Exact time the message was created.
func (o SBTopicPropertiesResponsePtrOutput) CreatedAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SBTopicPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return &v.CreatedAt
	}).(pulumi.StringPtrOutput)
}

// ISO 8601 Default message timespan to live value. This is the duration after which the message expires, starting from when the message is sent to Service Bus. This is the default value used when TimeToLive is not set on a message itself.
func (o SBTopicPropertiesResponsePtrOutput) DefaultMessageTimeToLive() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SBTopicPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return v.DefaultMessageTimeToLive
	}).(pulumi.StringPtrOutput)
}

// ISO8601 timespan structure that defines the duration of the duplicate detection history. The default value is 10 minutes.
func (o SBTopicPropertiesResponsePtrOutput) DuplicateDetectionHistoryTimeWindow() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SBTopicPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return v.DuplicateDetectionHistoryTimeWindow
	}).(pulumi.StringPtrOutput)
}

// Value that indicates whether server-side batched operations are enabled.
func (o SBTopicPropertiesResponsePtrOutput) EnableBatchedOperations() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SBTopicPropertiesResponse) *bool {
		if v == nil {
			return nil
		}
		return v.EnableBatchedOperations
	}).(pulumi.BoolPtrOutput)
}

// Value that indicates whether Express Entities are enabled. An express topic holds a message in memory temporarily before writing it to persistent storage.
func (o SBTopicPropertiesResponsePtrOutput) EnableExpress() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SBTopicPropertiesResponse) *bool {
		if v == nil {
			return nil
		}
		return v.EnableExpress
	}).(pulumi.BoolPtrOutput)
}

// Value that indicates whether the topic to be partitioned across multiple message brokers is enabled.
func (o SBTopicPropertiesResponsePtrOutput) EnablePartitioning() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SBTopicPropertiesResponse) *bool {
		if v == nil {
			return nil
		}
		return v.EnablePartitioning
	}).(pulumi.BoolPtrOutput)
}

// Maximum size of the topic in megabytes, which is the size of the memory allocated for the topic. Default is 1024.
func (o SBTopicPropertiesResponsePtrOutput) MaxSizeInMegabytes() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SBTopicPropertiesResponse) *int {
		if v == nil {
			return nil
		}
		return v.MaxSizeInMegabytes
	}).(pulumi.IntPtrOutput)
}

// Value indicating if this topic requires duplicate detection.
func (o SBTopicPropertiesResponsePtrOutput) RequiresDuplicateDetection() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SBTopicPropertiesResponse) *bool {
		if v == nil {
			return nil
		}
		return v.RequiresDuplicateDetection
	}).(pulumi.BoolPtrOutput)
}

// Size of the topic, in bytes.
func (o SBTopicPropertiesResponsePtrOutput) SizeInBytes() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SBTopicPropertiesResponse) *int {
		if v == nil {
			return nil
		}
		return &v.SizeInBytes
	}).(pulumi.IntPtrOutput)
}

// Enumerates the possible values for the status of a messaging entity.
func (o SBTopicPropertiesResponsePtrOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SBTopicPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return v.Status
	}).(pulumi.StringPtrOutput)
}

// Number of subscriptions.
func (o SBTopicPropertiesResponsePtrOutput) SubscriptionCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SBTopicPropertiesResponse) *int {
		if v == nil {
			return nil
		}
		return &v.SubscriptionCount
	}).(pulumi.IntPtrOutput)
}

// Value that indicates whether the topic supports ordering.
func (o SBTopicPropertiesResponsePtrOutput) SupportOrdering() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SBTopicPropertiesResponse) *bool {
		if v == nil {
			return nil
		}
		return v.SupportOrdering
	}).(pulumi.BoolPtrOutput)
}

// The exact time the message was updated.
func (o SBTopicPropertiesResponsePtrOutput) UpdatedAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SBTopicPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return &v.UpdatedAt
	}).(pulumi.StringPtrOutput)
}

// Represents a filter which is a composition of an expression and an action that is executed in the pub/sub pipeline.
type SqlFilter struct {
	// This property is reserved for future use. An integer value showing the compatibility level, currently hard-coded to 20.
	CompatibilityLevel *int `pulumi:"compatibilityLevel"`
	// Value that indicates whether the rule action requires preprocessing.
	RequiresPreprocessing *bool `pulumi:"requiresPreprocessing"`
	// The SQL expression. e.g. MyProperty='ABC'
	SqlExpression *string `pulumi:"sqlExpression"`
}

// SqlFilterInput is an input type that accepts SqlFilterArgs and SqlFilterOutput values.
// You can construct a concrete instance of `SqlFilterInput` via:
//
//          SqlFilterArgs{...}
type SqlFilterInput interface {
	pulumi.Input

	ToSqlFilterOutput() SqlFilterOutput
	ToSqlFilterOutputWithContext(context.Context) SqlFilterOutput
}

// Represents a filter which is a composition of an expression and an action that is executed in the pub/sub pipeline.
type SqlFilterArgs struct {
	// This property is reserved for future use. An integer value showing the compatibility level, currently hard-coded to 20.
	CompatibilityLevel pulumi.IntPtrInput `pulumi:"compatibilityLevel"`
	// Value that indicates whether the rule action requires preprocessing.
	RequiresPreprocessing pulumi.BoolPtrInput `pulumi:"requiresPreprocessing"`
	// The SQL expression. e.g. MyProperty='ABC'
	SqlExpression pulumi.StringPtrInput `pulumi:"sqlExpression"`
}

func (SqlFilterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SqlFilter)(nil)).Elem()
}

func (i SqlFilterArgs) ToSqlFilterOutput() SqlFilterOutput {
	return i.ToSqlFilterOutputWithContext(context.Background())
}

func (i SqlFilterArgs) ToSqlFilterOutputWithContext(ctx context.Context) SqlFilterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SqlFilterOutput)
}

func (i SqlFilterArgs) ToSqlFilterPtrOutput() SqlFilterPtrOutput {
	return i.ToSqlFilterPtrOutputWithContext(context.Background())
}

func (i SqlFilterArgs) ToSqlFilterPtrOutputWithContext(ctx context.Context) SqlFilterPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SqlFilterOutput).ToSqlFilterPtrOutputWithContext(ctx)
}

// SqlFilterPtrInput is an input type that accepts SqlFilterArgs, SqlFilterPtr and SqlFilterPtrOutput values.
// You can construct a concrete instance of `SqlFilterPtrInput` via:
//
//          SqlFilterArgs{...}
//
//  or:
//
//          nil
type SqlFilterPtrInput interface {
	pulumi.Input

	ToSqlFilterPtrOutput() SqlFilterPtrOutput
	ToSqlFilterPtrOutputWithContext(context.Context) SqlFilterPtrOutput
}

type sqlFilterPtrType SqlFilterArgs

func SqlFilterPtr(v *SqlFilterArgs) SqlFilterPtrInput {
	return (*sqlFilterPtrType)(v)
}

func (*sqlFilterPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SqlFilter)(nil)).Elem()
}

func (i *sqlFilterPtrType) ToSqlFilterPtrOutput() SqlFilterPtrOutput {
	return i.ToSqlFilterPtrOutputWithContext(context.Background())
}

func (i *sqlFilterPtrType) ToSqlFilterPtrOutputWithContext(ctx context.Context) SqlFilterPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SqlFilterPtrOutput)
}

// Represents a filter which is a composition of an expression and an action that is executed in the pub/sub pipeline.
type SqlFilterOutput struct{ *pulumi.OutputState }

func (SqlFilterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SqlFilter)(nil)).Elem()
}

func (o SqlFilterOutput) ToSqlFilterOutput() SqlFilterOutput {
	return o
}

func (o SqlFilterOutput) ToSqlFilterOutputWithContext(ctx context.Context) SqlFilterOutput {
	return o
}

func (o SqlFilterOutput) ToSqlFilterPtrOutput() SqlFilterPtrOutput {
	return o.ToSqlFilterPtrOutputWithContext(context.Background())
}

func (o SqlFilterOutput) ToSqlFilterPtrOutputWithContext(ctx context.Context) SqlFilterPtrOutput {
	return o.ApplyT(func(v SqlFilter) *SqlFilter {
		return &v
	}).(SqlFilterPtrOutput)
}

// This property is reserved for future use. An integer value showing the compatibility level, currently hard-coded to 20.
func (o SqlFilterOutput) CompatibilityLevel() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SqlFilter) *int { return v.CompatibilityLevel }).(pulumi.IntPtrOutput)
}

// Value that indicates whether the rule action requires preprocessing.
func (o SqlFilterOutput) RequiresPreprocessing() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SqlFilter) *bool { return v.RequiresPreprocessing }).(pulumi.BoolPtrOutput)
}

// The SQL expression. e.g. MyProperty='ABC'
func (o SqlFilterOutput) SqlExpression() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SqlFilter) *string { return v.SqlExpression }).(pulumi.StringPtrOutput)
}

type SqlFilterPtrOutput struct{ *pulumi.OutputState }

func (SqlFilterPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SqlFilter)(nil)).Elem()
}

func (o SqlFilterPtrOutput) ToSqlFilterPtrOutput() SqlFilterPtrOutput {
	return o
}

func (o SqlFilterPtrOutput) ToSqlFilterPtrOutputWithContext(ctx context.Context) SqlFilterPtrOutput {
	return o
}

func (o SqlFilterPtrOutput) Elem() SqlFilterOutput {
	return o.ApplyT(func(v *SqlFilter) SqlFilter { return *v }).(SqlFilterOutput)
}

// This property is reserved for future use. An integer value showing the compatibility level, currently hard-coded to 20.
func (o SqlFilterPtrOutput) CompatibilityLevel() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SqlFilter) *int {
		if v == nil {
			return nil
		}
		return v.CompatibilityLevel
	}).(pulumi.IntPtrOutput)
}

// Value that indicates whether the rule action requires preprocessing.
func (o SqlFilterPtrOutput) RequiresPreprocessing() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SqlFilter) *bool {
		if v == nil {
			return nil
		}
		return v.RequiresPreprocessing
	}).(pulumi.BoolPtrOutput)
}

// The SQL expression. e.g. MyProperty='ABC'
func (o SqlFilterPtrOutput) SqlExpression() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SqlFilter) *string {
		if v == nil {
			return nil
		}
		return v.SqlExpression
	}).(pulumi.StringPtrOutput)
}

// Represents a filter which is a composition of an expression and an action that is executed in the pub/sub pipeline.
type SqlFilterResponse struct {
	// This property is reserved for future use. An integer value showing the compatibility level, currently hard-coded to 20.
	CompatibilityLevel *int `pulumi:"compatibilityLevel"`
	// Value that indicates whether the rule action requires preprocessing.
	RequiresPreprocessing *bool `pulumi:"requiresPreprocessing"`
	// The SQL expression. e.g. MyProperty='ABC'
	SqlExpression *string `pulumi:"sqlExpression"`
}

// SqlFilterResponseInput is an input type that accepts SqlFilterResponseArgs and SqlFilterResponseOutput values.
// You can construct a concrete instance of `SqlFilterResponseInput` via:
//
//          SqlFilterResponseArgs{...}
type SqlFilterResponseInput interface {
	pulumi.Input

	ToSqlFilterResponseOutput() SqlFilterResponseOutput
	ToSqlFilterResponseOutputWithContext(context.Context) SqlFilterResponseOutput
}

// Represents a filter which is a composition of an expression and an action that is executed in the pub/sub pipeline.
type SqlFilterResponseArgs struct {
	// This property is reserved for future use. An integer value showing the compatibility level, currently hard-coded to 20.
	CompatibilityLevel pulumi.IntPtrInput `pulumi:"compatibilityLevel"`
	// Value that indicates whether the rule action requires preprocessing.
	RequiresPreprocessing pulumi.BoolPtrInput `pulumi:"requiresPreprocessing"`
	// The SQL expression. e.g. MyProperty='ABC'
	SqlExpression pulumi.StringPtrInput `pulumi:"sqlExpression"`
}

func (SqlFilterResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SqlFilterResponse)(nil)).Elem()
}

func (i SqlFilterResponseArgs) ToSqlFilterResponseOutput() SqlFilterResponseOutput {
	return i.ToSqlFilterResponseOutputWithContext(context.Background())
}

func (i SqlFilterResponseArgs) ToSqlFilterResponseOutputWithContext(ctx context.Context) SqlFilterResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SqlFilterResponseOutput)
}

func (i SqlFilterResponseArgs) ToSqlFilterResponsePtrOutput() SqlFilterResponsePtrOutput {
	return i.ToSqlFilterResponsePtrOutputWithContext(context.Background())
}

func (i SqlFilterResponseArgs) ToSqlFilterResponsePtrOutputWithContext(ctx context.Context) SqlFilterResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SqlFilterResponseOutput).ToSqlFilterResponsePtrOutputWithContext(ctx)
}

// SqlFilterResponsePtrInput is an input type that accepts SqlFilterResponseArgs, SqlFilterResponsePtr and SqlFilterResponsePtrOutput values.
// You can construct a concrete instance of `SqlFilterResponsePtrInput` via:
//
//          SqlFilterResponseArgs{...}
//
//  or:
//
//          nil
type SqlFilterResponsePtrInput interface {
	pulumi.Input

	ToSqlFilterResponsePtrOutput() SqlFilterResponsePtrOutput
	ToSqlFilterResponsePtrOutputWithContext(context.Context) SqlFilterResponsePtrOutput
}

type sqlFilterResponsePtrType SqlFilterResponseArgs

func SqlFilterResponsePtr(v *SqlFilterResponseArgs) SqlFilterResponsePtrInput {
	return (*sqlFilterResponsePtrType)(v)
}

func (*sqlFilterResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SqlFilterResponse)(nil)).Elem()
}

func (i *sqlFilterResponsePtrType) ToSqlFilterResponsePtrOutput() SqlFilterResponsePtrOutput {
	return i.ToSqlFilterResponsePtrOutputWithContext(context.Background())
}

func (i *sqlFilterResponsePtrType) ToSqlFilterResponsePtrOutputWithContext(ctx context.Context) SqlFilterResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SqlFilterResponsePtrOutput)
}

// Represents a filter which is a composition of an expression and an action that is executed in the pub/sub pipeline.
type SqlFilterResponseOutput struct{ *pulumi.OutputState }

func (SqlFilterResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SqlFilterResponse)(nil)).Elem()
}

func (o SqlFilterResponseOutput) ToSqlFilterResponseOutput() SqlFilterResponseOutput {
	return o
}

func (o SqlFilterResponseOutput) ToSqlFilterResponseOutputWithContext(ctx context.Context) SqlFilterResponseOutput {
	return o
}

func (o SqlFilterResponseOutput) ToSqlFilterResponsePtrOutput() SqlFilterResponsePtrOutput {
	return o.ToSqlFilterResponsePtrOutputWithContext(context.Background())
}

func (o SqlFilterResponseOutput) ToSqlFilterResponsePtrOutputWithContext(ctx context.Context) SqlFilterResponsePtrOutput {
	return o.ApplyT(func(v SqlFilterResponse) *SqlFilterResponse {
		return &v
	}).(SqlFilterResponsePtrOutput)
}

// This property is reserved for future use. An integer value showing the compatibility level, currently hard-coded to 20.
func (o SqlFilterResponseOutput) CompatibilityLevel() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SqlFilterResponse) *int { return v.CompatibilityLevel }).(pulumi.IntPtrOutput)
}

// Value that indicates whether the rule action requires preprocessing.
func (o SqlFilterResponseOutput) RequiresPreprocessing() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SqlFilterResponse) *bool { return v.RequiresPreprocessing }).(pulumi.BoolPtrOutput)
}

// The SQL expression. e.g. MyProperty='ABC'
func (o SqlFilterResponseOutput) SqlExpression() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SqlFilterResponse) *string { return v.SqlExpression }).(pulumi.StringPtrOutput)
}

type SqlFilterResponsePtrOutput struct{ *pulumi.OutputState }

func (SqlFilterResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SqlFilterResponse)(nil)).Elem()
}

func (o SqlFilterResponsePtrOutput) ToSqlFilterResponsePtrOutput() SqlFilterResponsePtrOutput {
	return o
}

func (o SqlFilterResponsePtrOutput) ToSqlFilterResponsePtrOutputWithContext(ctx context.Context) SqlFilterResponsePtrOutput {
	return o
}

func (o SqlFilterResponsePtrOutput) Elem() SqlFilterResponseOutput {
	return o.ApplyT(func(v *SqlFilterResponse) SqlFilterResponse { return *v }).(SqlFilterResponseOutput)
}

// This property is reserved for future use. An integer value showing the compatibility level, currently hard-coded to 20.
func (o SqlFilterResponsePtrOutput) CompatibilityLevel() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SqlFilterResponse) *int {
		if v == nil {
			return nil
		}
		return v.CompatibilityLevel
	}).(pulumi.IntPtrOutput)
}

// Value that indicates whether the rule action requires preprocessing.
func (o SqlFilterResponsePtrOutput) RequiresPreprocessing() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SqlFilterResponse) *bool {
		if v == nil {
			return nil
		}
		return v.RequiresPreprocessing
	}).(pulumi.BoolPtrOutput)
}

// The SQL expression. e.g. MyProperty='ABC'
func (o SqlFilterResponsePtrOutput) SqlExpression() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SqlFilterResponse) *string {
		if v == nil {
			return nil
		}
		return v.SqlExpression
	}).(pulumi.StringPtrOutput)
}

// Description of subscription resource.
type SubscriptionType struct {
	// Resource name
	Name string `pulumi:"name"`
	// Properties of subscriptions resource.
	Properties SBSubscriptionPropertiesResponse `pulumi:"properties"`
	// Resource type
	Type string `pulumi:"type"`
}

// SubscriptionTypeInput is an input type that accepts SubscriptionTypeArgs and SubscriptionTypeOutput values.
// You can construct a concrete instance of `SubscriptionTypeInput` via:
//
//          SubscriptionTypeArgs{...}
type SubscriptionTypeInput interface {
	pulumi.Input

	ToSubscriptionTypeOutput() SubscriptionTypeOutput
	ToSubscriptionTypeOutputWithContext(context.Context) SubscriptionTypeOutput
}

// Description of subscription resource.
type SubscriptionTypeArgs struct {
	// Resource name
	Name pulumi.StringInput `pulumi:"name"`
	// Properties of subscriptions resource.
	Properties SBSubscriptionPropertiesResponseInput `pulumi:"properties"`
	// Resource type
	Type pulumi.StringInput `pulumi:"type"`
}

func (SubscriptionTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SubscriptionType)(nil)).Elem()
}

func (i SubscriptionTypeArgs) ToSubscriptionTypeOutput() SubscriptionTypeOutput {
	return i.ToSubscriptionTypeOutputWithContext(context.Background())
}

func (i SubscriptionTypeArgs) ToSubscriptionTypeOutputWithContext(ctx context.Context) SubscriptionTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SubscriptionTypeOutput)
}

// Description of subscription resource.
type SubscriptionTypeOutput struct{ *pulumi.OutputState }

func (SubscriptionTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SubscriptionType)(nil)).Elem()
}

func (o SubscriptionTypeOutput) ToSubscriptionTypeOutput() SubscriptionTypeOutput {
	return o
}

func (o SubscriptionTypeOutput) ToSubscriptionTypeOutputWithContext(ctx context.Context) SubscriptionTypeOutput {
	return o
}

// Resource name
func (o SubscriptionTypeOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v SubscriptionType) string { return v.Name }).(pulumi.StringOutput)
}

// Properties of subscriptions resource.
func (o SubscriptionTypeOutput) Properties() SBSubscriptionPropertiesResponseOutput {
	return o.ApplyT(func(v SubscriptionType) SBSubscriptionPropertiesResponse { return v.Properties }).(SBSubscriptionPropertiesResponseOutput)
}

// Resource type
func (o SubscriptionTypeOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v SubscriptionType) string { return v.Type }).(pulumi.StringOutput)
}

// Description of topic resource.
type TopicType struct {
	// Resource name
	Name string `pulumi:"name"`
	// Properties of topic resource.
	Properties SBTopicPropertiesResponse `pulumi:"properties"`
	// Resource type
	Type string `pulumi:"type"`
}

// TopicTypeInput is an input type that accepts TopicTypeArgs and TopicTypeOutput values.
// You can construct a concrete instance of `TopicTypeInput` via:
//
//          TopicTypeArgs{...}
type TopicTypeInput interface {
	pulumi.Input

	ToTopicTypeOutput() TopicTypeOutput
	ToTopicTypeOutputWithContext(context.Context) TopicTypeOutput
}

// Description of topic resource.
type TopicTypeArgs struct {
	// Resource name
	Name pulumi.StringInput `pulumi:"name"`
	// Properties of topic resource.
	Properties SBTopicPropertiesResponseInput `pulumi:"properties"`
	// Resource type
	Type pulumi.StringInput `pulumi:"type"`
}

func (TopicTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TopicType)(nil)).Elem()
}

func (i TopicTypeArgs) ToTopicTypeOutput() TopicTypeOutput {
	return i.ToTopicTypeOutputWithContext(context.Background())
}

func (i TopicTypeArgs) ToTopicTypeOutputWithContext(ctx context.Context) TopicTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TopicTypeOutput)
}

// Description of topic resource.
type TopicTypeOutput struct{ *pulumi.OutputState }

func (TopicTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TopicType)(nil)).Elem()
}

func (o TopicTypeOutput) ToTopicTypeOutput() TopicTypeOutput {
	return o
}

func (o TopicTypeOutput) ToTopicTypeOutputWithContext(ctx context.Context) TopicTypeOutput {
	return o
}

// Resource name
func (o TopicTypeOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v TopicType) string { return v.Name }).(pulumi.StringOutput)
}

// Properties of topic resource.
func (o TopicTypeOutput) Properties() SBTopicPropertiesResponseOutput {
	return o.ApplyT(func(v TopicType) SBTopicPropertiesResponse { return v.Properties }).(SBTopicPropertiesResponseOutput)
}

// Resource type
func (o TopicTypeOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v TopicType) string { return v.Type }).(pulumi.StringOutput)
}

// Description of a namespace authorization rule.
type TopicAuthorizationRuleType struct {
	// Resource name
	Name string `pulumi:"name"`
	// AuthorizationRule properties.
	Properties SBAuthorizationRuleResponseProperties `pulumi:"properties"`
	// Resource type
	Type string `pulumi:"type"`
}

// TopicAuthorizationRuleTypeInput is an input type that accepts TopicAuthorizationRuleTypeArgs and TopicAuthorizationRuleTypeOutput values.
// You can construct a concrete instance of `TopicAuthorizationRuleTypeInput` via:
//
//          TopicAuthorizationRuleTypeArgs{...}
type TopicAuthorizationRuleTypeInput interface {
	pulumi.Input

	ToTopicAuthorizationRuleTypeOutput() TopicAuthorizationRuleTypeOutput
	ToTopicAuthorizationRuleTypeOutputWithContext(context.Context) TopicAuthorizationRuleTypeOutput
}

// Description of a namespace authorization rule.
type TopicAuthorizationRuleTypeArgs struct {
	// Resource name
	Name pulumi.StringInput `pulumi:"name"`
	// AuthorizationRule properties.
	Properties SBAuthorizationRuleResponsePropertiesInput `pulumi:"properties"`
	// Resource type
	Type pulumi.StringInput `pulumi:"type"`
}

func (TopicAuthorizationRuleTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TopicAuthorizationRuleType)(nil)).Elem()
}

func (i TopicAuthorizationRuleTypeArgs) ToTopicAuthorizationRuleTypeOutput() TopicAuthorizationRuleTypeOutput {
	return i.ToTopicAuthorizationRuleTypeOutputWithContext(context.Background())
}

func (i TopicAuthorizationRuleTypeArgs) ToTopicAuthorizationRuleTypeOutputWithContext(ctx context.Context) TopicAuthorizationRuleTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TopicAuthorizationRuleTypeOutput)
}

// Description of a namespace authorization rule.
type TopicAuthorizationRuleTypeOutput struct{ *pulumi.OutputState }

func (TopicAuthorizationRuleTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TopicAuthorizationRuleType)(nil)).Elem()
}

func (o TopicAuthorizationRuleTypeOutput) ToTopicAuthorizationRuleTypeOutput() TopicAuthorizationRuleTypeOutput {
	return o
}

func (o TopicAuthorizationRuleTypeOutput) ToTopicAuthorizationRuleTypeOutputWithContext(ctx context.Context) TopicAuthorizationRuleTypeOutput {
	return o
}

// Resource name
func (o TopicAuthorizationRuleTypeOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v TopicAuthorizationRuleType) string { return v.Name }).(pulumi.StringOutput)
}

// AuthorizationRule properties.
func (o TopicAuthorizationRuleTypeOutput) Properties() SBAuthorizationRuleResponsePropertiesOutput {
	return o.ApplyT(func(v TopicAuthorizationRuleType) SBAuthorizationRuleResponseProperties { return v.Properties }).(SBAuthorizationRuleResponsePropertiesOutput)
}

// Resource type
func (o TopicAuthorizationRuleTypeOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v TopicAuthorizationRuleType) string { return v.Type }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(ActionOutput{})
	pulumi.RegisterOutputType(ActionPtrOutput{})
	pulumi.RegisterOutputType(ActionResponseOutput{})
	pulumi.RegisterOutputType(ActionResponsePtrOutput{})
	pulumi.RegisterOutputType(ArmDisasterRecoveryPropertiesOutput{})
	pulumi.RegisterOutputType(ArmDisasterRecoveryPropertiesPtrOutput{})
	pulumi.RegisterOutputType(ArmDisasterRecoveryResponsePropertiesOutput{})
	pulumi.RegisterOutputType(ArmDisasterRecoveryResponsePropertiesPtrOutput{})
	pulumi.RegisterOutputType(CorrelationFilterOutput{})
	pulumi.RegisterOutputType(CorrelationFilterPtrOutput{})
	pulumi.RegisterOutputType(CorrelationFilterResponseOutput{})
	pulumi.RegisterOutputType(CorrelationFilterResponsePtrOutput{})
	pulumi.RegisterOutputType(DisasterRecoveryConfigTypeOutput{})
	pulumi.RegisterOutputType(MessageCountDetailsOutput{})
	pulumi.RegisterOutputType(MessageCountDetailsResponseOutput{})
	pulumi.RegisterOutputType(MessageCountDetailsResponsePtrOutput{})
	pulumi.RegisterOutputType(MigrationConfigTypeOutput{})
	pulumi.RegisterOutputType(MigrationConfigPropertiesPropertiesOutput{})
	pulumi.RegisterOutputType(MigrationConfigPropertiesPropertiesPtrOutput{})
	pulumi.RegisterOutputType(MigrationConfigPropertiesResponsePropertiesOutput{})
	pulumi.RegisterOutputType(MigrationConfigPropertiesResponsePropertiesPtrOutput{})
	pulumi.RegisterOutputType(NamespaceTypeOutput{})
	pulumi.RegisterOutputType(NamespaceAuthorizationRuleTypeOutput{})
	pulumi.RegisterOutputType(QueueTypeOutput{})
	pulumi.RegisterOutputType(QueueAuthorizationRuleTypeOutput{})
	pulumi.RegisterOutputType(RuleTypeOutput{})
	pulumi.RegisterOutputType(RulepropertiesOutput{})
	pulumi.RegisterOutputType(RulepropertiesPtrOutput{})
	pulumi.RegisterOutputType(RulepropertiesResponseOutput{})
	pulumi.RegisterOutputType(RulepropertiesResponsePtrOutput{})
	pulumi.RegisterOutputType(SBAuthorizationRulePropertiesOutput{})
	pulumi.RegisterOutputType(SBAuthorizationRulePropertiesPtrOutput{})
	pulumi.RegisterOutputType(SBAuthorizationRuleResponsePropertiesOutput{})
	pulumi.RegisterOutputType(SBAuthorizationRuleResponsePropertiesPtrOutput{})
	pulumi.RegisterOutputType(SBNamespacePropertiesOutput{})
	pulumi.RegisterOutputType(SBNamespacePropertiesPtrOutput{})
	pulumi.RegisterOutputType(SBNamespacePropertiesResponseOutput{})
	pulumi.RegisterOutputType(SBNamespacePropertiesResponsePtrOutput{})
	pulumi.RegisterOutputType(SBQueuePropertiesOutput{})
	pulumi.RegisterOutputType(SBQueuePropertiesPtrOutput{})
	pulumi.RegisterOutputType(SBQueuePropertiesResponseOutput{})
	pulumi.RegisterOutputType(SBQueuePropertiesResponsePtrOutput{})
	pulumi.RegisterOutputType(SBSkuOutput{})
	pulumi.RegisterOutputType(SBSkuPtrOutput{})
	pulumi.RegisterOutputType(SBSkuResponseOutput{})
	pulumi.RegisterOutputType(SBSkuResponsePtrOutput{})
	pulumi.RegisterOutputType(SBSubscriptionPropertiesOutput{})
	pulumi.RegisterOutputType(SBSubscriptionPropertiesPtrOutput{})
	pulumi.RegisterOutputType(SBSubscriptionPropertiesResponseOutput{})
	pulumi.RegisterOutputType(SBSubscriptionPropertiesResponsePtrOutput{})
	pulumi.RegisterOutputType(SBTopicPropertiesOutput{})
	pulumi.RegisterOutputType(SBTopicPropertiesPtrOutput{})
	pulumi.RegisterOutputType(SBTopicPropertiesResponseOutput{})
	pulumi.RegisterOutputType(SBTopicPropertiesResponsePtrOutput{})
	pulumi.RegisterOutputType(SqlFilterOutput{})
	pulumi.RegisterOutputType(SqlFilterPtrOutput{})
	pulumi.RegisterOutputType(SqlFilterResponseOutput{})
	pulumi.RegisterOutputType(SqlFilterResponsePtrOutput{})
	pulumi.RegisterOutputType(SubscriptionTypeOutput{})
	pulumi.RegisterOutputType(TopicTypeOutput{})
	pulumi.RegisterOutputType(TopicAuthorizationRuleTypeOutput{})
}
