// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package servicebus

import (
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// Description of a namespace authorization rule.
type NamespaceTopicAuthorizationRule struct {
	pulumi.CustomResourceState

	// Resource name
	Name pulumi.StringOutput `pulumi:"name"`
	// AuthorizationRule properties.
	Properties SBAuthorizationRuleResponsePropertiesOutput `pulumi:"properties"`
	// Resource type
	Type pulumi.StringOutput `pulumi:"type"`
}

// NewNamespaceTopicAuthorizationRule registers a new resource with the given unique name, arguments, and options.
func NewNamespaceTopicAuthorizationRule(ctx *pulumi.Context,
	name string, args *NamespaceTopicAuthorizationRuleArgs, opts ...pulumi.ResourceOption) (*NamespaceTopicAuthorizationRule, error) {
	if args == nil || args.Name == nil {
		return nil, errors.New("missing required argument 'Name'")
	}
	if args == nil || args.NamespaceName == nil {
		return nil, errors.New("missing required argument 'NamespaceName'")
	}
	if args == nil || args.ResourceGroupName == nil {
		return nil, errors.New("missing required argument 'ResourceGroupName'")
	}
	if args == nil || args.TopicName == nil {
		return nil, errors.New("missing required argument 'TopicName'")
	}
	if args == nil {
		args = &NamespaceTopicAuthorizationRuleArgs{}
	}
	var resource NamespaceTopicAuthorizationRule
	err := ctx.RegisterResource("azurerm:servicebus:NamespaceTopicAuthorizationRule", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetNamespaceTopicAuthorizationRule gets an existing NamespaceTopicAuthorizationRule resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetNamespaceTopicAuthorizationRule(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *NamespaceTopicAuthorizationRuleState, opts ...pulumi.ResourceOption) (*NamespaceTopicAuthorizationRule, error) {
	var resource NamespaceTopicAuthorizationRule
	err := ctx.ReadResource("azurerm:servicebus:NamespaceTopicAuthorizationRule", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering NamespaceTopicAuthorizationRule resources.
type namespaceTopicAuthorizationRuleState struct {
	// Resource name
	Name *string `pulumi:"name"`
	// AuthorizationRule properties.
	Properties *SBAuthorizationRuleResponseProperties `pulumi:"properties"`
	// Resource type
	Type *string `pulumi:"type"`
}

type NamespaceTopicAuthorizationRuleState struct {
	// Resource name
	Name pulumi.StringPtrInput
	// AuthorizationRule properties.
	Properties SBAuthorizationRuleResponsePropertiesPtrInput
	// Resource type
	Type pulumi.StringPtrInput
}

func (NamespaceTopicAuthorizationRuleState) ElementType() reflect.Type {
	return reflect.TypeOf((*namespaceTopicAuthorizationRuleState)(nil)).Elem()
}

type namespaceTopicAuthorizationRuleArgs struct {
	// The authorization rule name.
	Name string `pulumi:"name"`
	// The namespace name
	NamespaceName string `pulumi:"namespaceName"`
	// AuthorizationRule properties.
	Properties *SBAuthorizationRuleProperties `pulumi:"properties"`
	// Name of the Resource group within the Azure subscription.
	ResourceGroupName string `pulumi:"resourceGroupName"`
	// The topic name.
	TopicName string `pulumi:"topicName"`
}

// The set of arguments for constructing a NamespaceTopicAuthorizationRule resource.
type NamespaceTopicAuthorizationRuleArgs struct {
	// The authorization rule name.
	Name pulumi.StringInput
	// The namespace name
	NamespaceName pulumi.StringInput
	// AuthorizationRule properties.
	Properties SBAuthorizationRulePropertiesPtrInput
	// Name of the Resource group within the Azure subscription.
	ResourceGroupName pulumi.StringInput
	// The topic name.
	TopicName pulumi.StringInput
}

func (NamespaceTopicAuthorizationRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*namespaceTopicAuthorizationRuleArgs)(nil)).Elem()
}
