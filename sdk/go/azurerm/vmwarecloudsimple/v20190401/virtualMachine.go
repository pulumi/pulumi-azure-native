// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v20190401

import (
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// Virtual machine model
type VirtualMachine struct {
	pulumi.CustomResourceState

	// Azure region
	Location pulumi.StringOutput `pulumi:"location"`
	// {virtualMachineName}
	Name pulumi.StringOutput `pulumi:"name"`
	// Virtual machine properties
	Properties VirtualMachinePropertiesResponseOutput `pulumi:"properties"`
	// The list of tags
	Tags TagsResponsePtrOutput `pulumi:"tags"`
	// {resourceProviderNamespace}/{resourceType}
	Type pulumi.StringOutput `pulumi:"type"`
}

// NewVirtualMachine registers a new resource with the given unique name, arguments, and options.
func NewVirtualMachine(ctx *pulumi.Context,
	name string, args *VirtualMachineArgs, opts ...pulumi.ResourceOption) (*VirtualMachine, error) {
	if args == nil || args.Referer == nil {
		return nil, errors.New("missing required argument 'Referer'")
	}
	if args == nil || args.AmountOfRam == nil {
		return nil, errors.New("missing required argument 'AmountOfRam'")
	}
	if args == nil || args.Location == nil {
		return nil, errors.New("missing required argument 'Location'")
	}
	if args == nil || args.Name == nil {
		return nil, errors.New("missing required argument 'Name'")
	}
	if args == nil || args.NumberOfCores == nil {
		return nil, errors.New("missing required argument 'NumberOfCores'")
	}
	if args == nil || args.PrivateCloudId == nil {
		return nil, errors.New("missing required argument 'PrivateCloudId'")
	}
	if args == nil || args.ResourceGroupName == nil {
		return nil, errors.New("missing required argument 'ResourceGroupName'")
	}
	if args == nil {
		args = &VirtualMachineArgs{}
	}
	var resource VirtualMachine
	err := ctx.RegisterResource("azurerm:vmwarecloudsimple/v20190401:VirtualMachine", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetVirtualMachine gets an existing VirtualMachine resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetVirtualMachine(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *VirtualMachineState, opts ...pulumi.ResourceOption) (*VirtualMachine, error) {
	var resource VirtualMachine
	err := ctx.ReadResource("azurerm:vmwarecloudsimple/v20190401:VirtualMachine", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering VirtualMachine resources.
type virtualMachineState struct {
	// Azure region
	Location *string `pulumi:"location"`
	// {virtualMachineName}
	Name *string `pulumi:"name"`
	// Virtual machine properties
	Properties *VirtualMachinePropertiesResponse `pulumi:"properties"`
	// The list of tags
	Tags *TagsResponse `pulumi:"tags"`
	// {resourceProviderNamespace}/{resourceType}
	Type *string `pulumi:"type"`
}

type VirtualMachineState struct {
	// Azure region
	Location pulumi.StringPtrInput
	// {virtualMachineName}
	Name pulumi.StringPtrInput
	// Virtual machine properties
	Properties VirtualMachinePropertiesResponsePtrInput
	// The list of tags
	Tags TagsResponsePtrInput
	// {resourceProviderNamespace}/{resourceType}
	Type pulumi.StringPtrInput
}

func (VirtualMachineState) ElementType() reflect.Type {
	return reflect.TypeOf((*virtualMachineState)(nil)).Elem()
}

type virtualMachineArgs struct {
	// referer url
	Referer string `pulumi:"Referer"`
	// The amount of memory
	AmountOfRam int `pulumi:"amountOfRam"`
	// Virtual machine properties
	Customization *GuestOSCustomization `pulumi:"customization"`
	// The list of Virtual Disks
	Disks []VirtualDisk `pulumi:"disks"`
	// Expose Guest OS or not
	ExposeToGuestVM *bool `pulumi:"exposeToGuestVM"`
	// Azure region
	Location string `pulumi:"location"`
	// virtual machine name
	Name string `pulumi:"name"`
	// The list of Virtual NICs
	Nics []VirtualNic `pulumi:"nics"`
	// The number of CPU cores
	NumberOfCores int `pulumi:"numberOfCores"`
	// Password for login. Deprecated - use customization property
	Password *string `pulumi:"password"`
	// Private Cloud Id
	PrivateCloudId string `pulumi:"privateCloudId"`
	// The name of the resource group
	ResourceGroupName string `pulumi:"resourceGroupName"`
	// Virtual Machines Resource Pool
	ResourcePool *ResourcePool `pulumi:"resourcePool"`
	// The list of tags
	Tags *Tags `pulumi:"tags"`
	// Virtual Machine Template Id
	TemplateId *string `pulumi:"templateId"`
	// Username for login. Deprecated - use customization property
	Username *string `pulumi:"username"`
	// The list of Virtual VSphere Networks
	VSphereNetworks []string `pulumi:"vSphereNetworks"`
}

// The set of arguments for constructing a VirtualMachine resource.
type VirtualMachineArgs struct {
	// referer url
	Referer pulumi.StringInput
	// The amount of memory
	AmountOfRam pulumi.IntInput
	// Virtual machine properties
	Customization GuestOSCustomizationPtrInput
	// The list of Virtual Disks
	Disks VirtualDiskArrayInput
	// Expose Guest OS or not
	ExposeToGuestVM pulumi.BoolPtrInput
	// Azure region
	Location pulumi.StringInput
	// virtual machine name
	Name pulumi.StringInput
	// The list of Virtual NICs
	Nics VirtualNicArrayInput
	// The number of CPU cores
	NumberOfCores pulumi.IntInput
	// Password for login. Deprecated - use customization property
	Password pulumi.StringPtrInput
	// Private Cloud Id
	PrivateCloudId pulumi.StringInput
	// The name of the resource group
	ResourceGroupName pulumi.StringInput
	// Virtual Machines Resource Pool
	ResourcePool ResourcePoolPtrInput
	// The list of tags
	Tags TagsPtrInput
	// Virtual Machine Template Id
	TemplateId pulumi.StringPtrInput
	// Username for login. Deprecated - use customization property
	Username pulumi.StringPtrInput
	// The list of Virtual VSphere Networks
	VSphereNetworks pulumi.StringArrayInput
}

func (VirtualMachineArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*virtualMachineArgs)(nil)).Elem()
}
