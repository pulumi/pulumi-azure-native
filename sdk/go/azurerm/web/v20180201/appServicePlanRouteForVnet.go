// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v20180201

import (
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// Virtual Network route contract used to pass routing information for a Virtual Network.
type AppServicePlanRouteForVnet struct {
	pulumi.CustomResourceState

	// Kind of resource.
	Kind pulumi.StringPtrOutput `pulumi:"kind"`
	// Resource Name.
	Name pulumi.StringOutput `pulumi:"name"`
	// VnetRoute resource specific properties
	Properties VnetRouteResponsePropertiesOutput `pulumi:"properties"`
	// Resource type.
	Type pulumi.StringOutput `pulumi:"type"`
}

// NewAppServicePlanRouteForVnet registers a new resource with the given unique name, arguments, and options.
func NewAppServicePlanRouteForVnet(ctx *pulumi.Context,
	name string, args *AppServicePlanRouteForVnetArgs, opts ...pulumi.ResourceOption) (*AppServicePlanRouteForVnet, error) {
	if args == nil || args.Name == nil {
		return nil, errors.New("missing required argument 'Name'")
	}
	if args == nil || args.ResourceGroupName == nil {
		return nil, errors.New("missing required argument 'ResourceGroupName'")
	}
	if args == nil || args.VnetName == nil {
		return nil, errors.New("missing required argument 'VnetName'")
	}
	if args == nil {
		args = &AppServicePlanRouteForVnetArgs{}
	}
	var resource AppServicePlanRouteForVnet
	err := ctx.RegisterResource("azurerm:web/v20180201:AppServicePlanRouteForVnet", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAppServicePlanRouteForVnet gets an existing AppServicePlanRouteForVnet resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAppServicePlanRouteForVnet(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AppServicePlanRouteForVnetState, opts ...pulumi.ResourceOption) (*AppServicePlanRouteForVnet, error) {
	var resource AppServicePlanRouteForVnet
	err := ctx.ReadResource("azurerm:web/v20180201:AppServicePlanRouteForVnet", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering AppServicePlanRouteForVnet resources.
type appServicePlanRouteForVnetState struct {
	// Kind of resource.
	Kind *string `pulumi:"kind"`
	// Resource Name.
	Name *string `pulumi:"name"`
	// VnetRoute resource specific properties
	Properties *VnetRouteResponseProperties `pulumi:"properties"`
	// Resource type.
	Type *string `pulumi:"type"`
}

type AppServicePlanRouteForVnetState struct {
	// Kind of resource.
	Kind pulumi.StringPtrInput
	// Resource Name.
	Name pulumi.StringPtrInput
	// VnetRoute resource specific properties
	Properties VnetRouteResponsePropertiesPtrInput
	// Resource type.
	Type pulumi.StringPtrInput
}

func (AppServicePlanRouteForVnetState) ElementType() reflect.Type {
	return reflect.TypeOf((*appServicePlanRouteForVnetState)(nil)).Elem()
}

type appServicePlanRouteForVnetArgs struct {
	// Kind of resource.
	Kind *string `pulumi:"kind"`
	// Name of the Virtual Network route.
	Name string `pulumi:"name"`
	// VnetRoute resource specific properties
	Properties *VnetRouteProperties `pulumi:"properties"`
	// Name of the resource group to which the resource belongs.
	ResourceGroupName string `pulumi:"resourceGroupName"`
	// Name of the Virtual Network.
	VnetName string `pulumi:"vnetName"`
}

// The set of arguments for constructing a AppServicePlanRouteForVnet resource.
type AppServicePlanRouteForVnetArgs struct {
	// Kind of resource.
	Kind pulumi.StringPtrInput
	// Name of the Virtual Network route.
	Name pulumi.StringInput
	// VnetRoute resource specific properties
	Properties VnetRoutePropertiesPtrInput
	// Name of the resource group to which the resource belongs.
	ResourceGroupName pulumi.StringInput
	// Name of the Virtual Network.
	VnetName pulumi.StringInput
}

func (AppServicePlanRouteForVnetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*appServicePlanRouteForVnetArgs)(nil)).Elem()
}
