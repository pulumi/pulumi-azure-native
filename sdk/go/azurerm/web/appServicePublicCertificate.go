// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package web

import (
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// Public certificate object
type AppServicePublicCertificate struct {
	pulumi.CustomResourceState

	// Kind of resource.
	Kind pulumi.StringPtrOutput `pulumi:"kind"`
	// Resource Name.
	Name pulumi.StringOutput `pulumi:"name"`
	// PublicCertificate resource specific properties
	Properties PublicCertificateResponsePropertiesOutput `pulumi:"properties"`
	// Resource type.
	Type pulumi.StringOutput `pulumi:"type"`
}

// NewAppServicePublicCertificate registers a new resource with the given unique name, arguments, and options.
func NewAppServicePublicCertificate(ctx *pulumi.Context,
	name string, args *AppServicePublicCertificateArgs, opts ...pulumi.ResourceOption) (*AppServicePublicCertificate, error) {
	if args == nil || args.Name == nil {
		return nil, errors.New("missing required argument 'Name'")
	}
	if args == nil || args.PublicCertificateName == nil {
		return nil, errors.New("missing required argument 'PublicCertificateName'")
	}
	if args == nil || args.ResourceGroupName == nil {
		return nil, errors.New("missing required argument 'ResourceGroupName'")
	}
	if args == nil {
		args = &AppServicePublicCertificateArgs{}
	}
	var resource AppServicePublicCertificate
	err := ctx.RegisterResource("azurerm:web:AppServicePublicCertificate", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAppServicePublicCertificate gets an existing AppServicePublicCertificate resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAppServicePublicCertificate(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AppServicePublicCertificateState, opts ...pulumi.ResourceOption) (*AppServicePublicCertificate, error) {
	var resource AppServicePublicCertificate
	err := ctx.ReadResource("azurerm:web:AppServicePublicCertificate", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering AppServicePublicCertificate resources.
type appServicePublicCertificateState struct {
	// Kind of resource.
	Kind *string `pulumi:"kind"`
	// Resource Name.
	Name *string `pulumi:"name"`
	// PublicCertificate resource specific properties
	Properties *PublicCertificateResponseProperties `pulumi:"properties"`
	// Resource type.
	Type *string `pulumi:"type"`
}

type AppServicePublicCertificateState struct {
	// Kind of resource.
	Kind pulumi.StringPtrInput
	// Resource Name.
	Name pulumi.StringPtrInput
	// PublicCertificate resource specific properties
	Properties PublicCertificateResponsePropertiesPtrInput
	// Resource type.
	Type pulumi.StringPtrInput
}

func (AppServicePublicCertificateState) ElementType() reflect.Type {
	return reflect.TypeOf((*appServicePublicCertificateState)(nil)).Elem()
}

type appServicePublicCertificateArgs struct {
	// Kind of resource.
	Kind *string `pulumi:"kind"`
	// Name of the app.
	Name string `pulumi:"name"`
	// PublicCertificate resource specific properties
	Properties *PublicCertificateProperties `pulumi:"properties"`
	// Public certificate name.
	PublicCertificateName string `pulumi:"publicCertificateName"`
	// Name of the resource group to which the resource belongs.
	ResourceGroupName string `pulumi:"resourceGroupName"`
}

// The set of arguments for constructing a AppServicePublicCertificate resource.
type AppServicePublicCertificateArgs struct {
	// Kind of resource.
	Kind pulumi.StringPtrInput
	// Name of the app.
	Name pulumi.StringInput
	// PublicCertificate resource specific properties
	Properties PublicCertificatePropertiesPtrInput
	// Public certificate name.
	PublicCertificateName pulumi.StringInput
	// Name of the resource group to which the resource belongs.
	ResourceGroupName pulumi.StringInput
}

func (AppServicePublicCertificateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*appServicePublicCertificateArgs)(nil)).Elem()
}
