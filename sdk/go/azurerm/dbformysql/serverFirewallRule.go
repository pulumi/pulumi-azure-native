// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package dbformysql

import (
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// Represents a server firewall rule.
type ServerFirewallRule struct {
	pulumi.CustomResourceState

	// The name of the resource
	Name pulumi.StringOutput `pulumi:"name"`
	// The properties of a firewall rule.
	Properties FirewallRulePropertiesResponseOutput `pulumi:"properties"`
	// The type of the resource. Ex- Microsoft.Compute/virtualMachines or Microsoft.Storage/storageAccounts.
	Type pulumi.StringOutput `pulumi:"type"`
}

// NewServerFirewallRule registers a new resource with the given unique name, arguments, and options.
func NewServerFirewallRule(ctx *pulumi.Context,
	name string, args *ServerFirewallRuleArgs, opts ...pulumi.ResourceOption) (*ServerFirewallRule, error) {
	if args == nil || args.Name == nil {
		return nil, errors.New("missing required argument 'Name'")
	}
	if args == nil || args.Properties == nil {
		return nil, errors.New("missing required argument 'Properties'")
	}
	if args == nil || args.ResourceGroupName == nil {
		return nil, errors.New("missing required argument 'ResourceGroupName'")
	}
	if args == nil || args.ServerName == nil {
		return nil, errors.New("missing required argument 'ServerName'")
	}
	if args == nil {
		args = &ServerFirewallRuleArgs{}
	}
	var resource ServerFirewallRule
	err := ctx.RegisterResource("azurerm:dbformysql:ServerFirewallRule", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetServerFirewallRule gets an existing ServerFirewallRule resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetServerFirewallRule(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ServerFirewallRuleState, opts ...pulumi.ResourceOption) (*ServerFirewallRule, error) {
	var resource ServerFirewallRule
	err := ctx.ReadResource("azurerm:dbformysql:ServerFirewallRule", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ServerFirewallRule resources.
type serverFirewallRuleState struct {
	// The name of the resource
	Name *string `pulumi:"name"`
	// The properties of a firewall rule.
	Properties *FirewallRulePropertiesResponse `pulumi:"properties"`
	// The type of the resource. Ex- Microsoft.Compute/virtualMachines or Microsoft.Storage/storageAccounts.
	Type *string `pulumi:"type"`
}

type ServerFirewallRuleState struct {
	// The name of the resource
	Name pulumi.StringPtrInput
	// The properties of a firewall rule.
	Properties FirewallRulePropertiesResponsePtrInput
	// The type of the resource. Ex- Microsoft.Compute/virtualMachines or Microsoft.Storage/storageAccounts.
	Type pulumi.StringPtrInput
}

func (ServerFirewallRuleState) ElementType() reflect.Type {
	return reflect.TypeOf((*serverFirewallRuleState)(nil)).Elem()
}

type serverFirewallRuleArgs struct {
	// The name of the server firewall rule.
	Name string `pulumi:"name"`
	// The properties of a firewall rule.
	Properties FirewallRuleProperties `pulumi:"properties"`
	// The name of the resource group. The name is case insensitive.
	ResourceGroupName string `pulumi:"resourceGroupName"`
	// The name of the server.
	ServerName string `pulumi:"serverName"`
}

// The set of arguments for constructing a ServerFirewallRule resource.
type ServerFirewallRuleArgs struct {
	// The name of the server firewall rule.
	Name pulumi.StringInput
	// The properties of a firewall rule.
	Properties FirewallRulePropertiesInput
	// The name of the resource group. The name is case insensitive.
	ResourceGroupName pulumi.StringInput
	// The name of the server.
	ServerName pulumi.StringInput
}

func (ServerFirewallRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*serverFirewallRuleArgs)(nil)).Elem()
}
