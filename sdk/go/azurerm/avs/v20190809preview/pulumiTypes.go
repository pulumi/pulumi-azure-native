// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v20190809preview

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// An ExpressRoute Circuit
type Circuit struct {
	// Authorizations for the ExpressRoute (Microsoft Colo only)
	Authorizations []ExpressRouteAuthorization `pulumi:"authorizations"`
}

// CircuitInput is an input type that accepts CircuitArgs and CircuitOutput values.
// You can construct a concrete instance of `CircuitInput` via:
//
//          CircuitArgs{...}
type CircuitInput interface {
	pulumi.Input

	ToCircuitOutput() CircuitOutput
	ToCircuitOutputWithContext(context.Context) CircuitOutput
}

// An ExpressRoute Circuit
type CircuitArgs struct {
	// Authorizations for the ExpressRoute (Microsoft Colo only)
	Authorizations ExpressRouteAuthorizationArrayInput `pulumi:"authorizations"`
}

func (CircuitArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Circuit)(nil)).Elem()
}

func (i CircuitArgs) ToCircuitOutput() CircuitOutput {
	return i.ToCircuitOutputWithContext(context.Background())
}

func (i CircuitArgs) ToCircuitOutputWithContext(ctx context.Context) CircuitOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CircuitOutput)
}

func (i CircuitArgs) ToCircuitPtrOutput() CircuitPtrOutput {
	return i.ToCircuitPtrOutputWithContext(context.Background())
}

func (i CircuitArgs) ToCircuitPtrOutputWithContext(ctx context.Context) CircuitPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CircuitOutput).ToCircuitPtrOutputWithContext(ctx)
}

// CircuitPtrInput is an input type that accepts CircuitArgs, CircuitPtr and CircuitPtrOutput values.
// You can construct a concrete instance of `CircuitPtrInput` via:
//
//          CircuitArgs{...}
//
//  or:
//
//          nil
type CircuitPtrInput interface {
	pulumi.Input

	ToCircuitPtrOutput() CircuitPtrOutput
	ToCircuitPtrOutputWithContext(context.Context) CircuitPtrOutput
}

type circuitPtrType CircuitArgs

func CircuitPtr(v *CircuitArgs) CircuitPtrInput {
	return (*circuitPtrType)(v)
}

func (*circuitPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Circuit)(nil)).Elem()
}

func (i *circuitPtrType) ToCircuitPtrOutput() CircuitPtrOutput {
	return i.ToCircuitPtrOutputWithContext(context.Background())
}

func (i *circuitPtrType) ToCircuitPtrOutputWithContext(ctx context.Context) CircuitPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CircuitPtrOutput)
}

// An ExpressRoute Circuit
type CircuitResponse struct {
	// Authorizations for the ExpressRoute (Microsoft Colo only)
	Authorizations []ExpressRouteAuthorizationResponse `pulumi:"authorizations"`
	// Identifier of the ExpressRoute (Microsoft Colo only)
	ExpressRouteID string `pulumi:"expressRouteID"`
	// ExpressRoute private peering identifier
	ExpressRoutePrivatePeeringID string `pulumi:"expressRoutePrivatePeeringID"`
	// CIDR of primary subnet
	PrimarySubnet string `pulumi:"primarySubnet"`
	// CIDR of secondary subnet
	SecondarySubnet string `pulumi:"secondarySubnet"`
}

// An ExpressRoute Circuit
type CircuitResponseOutput struct{ *pulumi.OutputState }

func (CircuitResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CircuitResponse)(nil)).Elem()
}

func (o CircuitResponseOutput) ToCircuitResponseOutput() CircuitResponseOutput {
	return o
}

func (o CircuitResponseOutput) ToCircuitResponseOutputWithContext(ctx context.Context) CircuitResponseOutput {
	return o
}

func (o CircuitResponseOutput) ToCircuitResponsePtrOutput() CircuitResponsePtrOutput {
	return o.ToCircuitResponsePtrOutputWithContext(context.Background())
}

func (o CircuitResponseOutput) ToCircuitResponsePtrOutputWithContext(ctx context.Context) CircuitResponsePtrOutput {
	return o.ApplyT(func(v CircuitResponse) *CircuitResponse {
		return &v
	}).(CircuitResponsePtrOutput)
}

// Authorizations for the ExpressRoute (Microsoft Colo only)
func (o CircuitResponseOutput) Authorizations() ExpressRouteAuthorizationResponseArrayOutput {
	return o.ApplyT(func(v CircuitResponse) []ExpressRouteAuthorizationResponse { return v.Authorizations }).(ExpressRouteAuthorizationResponseArrayOutput)
}

// Identifier of the ExpressRoute (Microsoft Colo only)
func (o CircuitResponseOutput) ExpressRouteID() pulumi.StringOutput {
	return o.ApplyT(func(v CircuitResponse) string { return v.ExpressRouteID }).(pulumi.StringOutput)
}

// ExpressRoute private peering identifier
func (o CircuitResponseOutput) ExpressRoutePrivatePeeringID() pulumi.StringOutput {
	return o.ApplyT(func(v CircuitResponse) string { return v.ExpressRoutePrivatePeeringID }).(pulumi.StringOutput)
}

// CIDR of primary subnet
func (o CircuitResponseOutput) PrimarySubnet() pulumi.StringOutput {
	return o.ApplyT(func(v CircuitResponse) string { return v.PrimarySubnet }).(pulumi.StringOutput)
}

// CIDR of secondary subnet
func (o CircuitResponseOutput) SecondarySubnet() pulumi.StringOutput {
	return o.ApplyT(func(v CircuitResponse) string { return v.SecondarySubnet }).(pulumi.StringOutput)
}

type CircuitResponsePtrOutput struct{ *pulumi.OutputState }

func (CircuitResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CircuitResponse)(nil)).Elem()
}

func (o CircuitResponsePtrOutput) ToCircuitResponsePtrOutput() CircuitResponsePtrOutput {
	return o
}

func (o CircuitResponsePtrOutput) ToCircuitResponsePtrOutputWithContext(ctx context.Context) CircuitResponsePtrOutput {
	return o
}

func (o CircuitResponsePtrOutput) Elem() CircuitResponseOutput {
	return o.ApplyT(func(v *CircuitResponse) CircuitResponse { return *v }).(CircuitResponseOutput)
}

// Authorizations for the ExpressRoute (Microsoft Colo only)
func (o CircuitResponsePtrOutput) Authorizations() ExpressRouteAuthorizationResponseArrayOutput {
	return o.ApplyT(func(v *CircuitResponse) []ExpressRouteAuthorizationResponse {
		if v == nil {
			return nil
		}
		return v.Authorizations
	}).(ExpressRouteAuthorizationResponseArrayOutput)
}

// Identifier of the ExpressRoute (Microsoft Colo only)
func (o CircuitResponsePtrOutput) ExpressRouteID() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CircuitResponse) *string {
		if v == nil {
			return nil
		}
		return &v.ExpressRouteID
	}).(pulumi.StringPtrOutput)
}

// ExpressRoute private peering identifier
func (o CircuitResponsePtrOutput) ExpressRoutePrivatePeeringID() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CircuitResponse) *string {
		if v == nil {
			return nil
		}
		return &v.ExpressRoutePrivatePeeringID
	}).(pulumi.StringPtrOutput)
}

// CIDR of primary subnet
func (o CircuitResponsePtrOutput) PrimarySubnet() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CircuitResponse) *string {
		if v == nil {
			return nil
		}
		return &v.PrimarySubnet
	}).(pulumi.StringPtrOutput)
}

// CIDR of secondary subnet
func (o CircuitResponsePtrOutput) SecondarySubnet() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CircuitResponse) *string {
		if v == nil {
			return nil
		}
		return &v.SecondarySubnet
	}).(pulumi.StringPtrOutput)
}

// The properties of a cluster
type ClusterProperties struct {
	// The cluster size
	ClusterSize *int `pulumi:"clusterSize"`
}

// ClusterPropertiesInput is an input type that accepts ClusterPropertiesArgs and ClusterPropertiesOutput values.
// You can construct a concrete instance of `ClusterPropertiesInput` via:
//
//          ClusterPropertiesArgs{...}
type ClusterPropertiesInput interface {
	pulumi.Input

	ToClusterPropertiesOutput() ClusterPropertiesOutput
	ToClusterPropertiesOutputWithContext(context.Context) ClusterPropertiesOutput
}

// The properties of a cluster
type ClusterPropertiesArgs struct {
	// The cluster size
	ClusterSize pulumi.IntPtrInput `pulumi:"clusterSize"`
}

func (ClusterPropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterProperties)(nil)).Elem()
}

func (i ClusterPropertiesArgs) ToClusterPropertiesOutput() ClusterPropertiesOutput {
	return i.ToClusterPropertiesOutputWithContext(context.Background())
}

func (i ClusterPropertiesArgs) ToClusterPropertiesOutputWithContext(ctx context.Context) ClusterPropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterPropertiesOutput)
}

func (i ClusterPropertiesArgs) ToClusterPropertiesPtrOutput() ClusterPropertiesPtrOutput {
	return i.ToClusterPropertiesPtrOutputWithContext(context.Background())
}

func (i ClusterPropertiesArgs) ToClusterPropertiesPtrOutputWithContext(ctx context.Context) ClusterPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterPropertiesOutput).ToClusterPropertiesPtrOutputWithContext(ctx)
}

// ClusterPropertiesPtrInput is an input type that accepts ClusterPropertiesArgs, ClusterPropertiesPtr and ClusterPropertiesPtrOutput values.
// You can construct a concrete instance of `ClusterPropertiesPtrInput` via:
//
//          ClusterPropertiesArgs{...}
//
//  or:
//
//          nil
type ClusterPropertiesPtrInput interface {
	pulumi.Input

	ToClusterPropertiesPtrOutput() ClusterPropertiesPtrOutput
	ToClusterPropertiesPtrOutputWithContext(context.Context) ClusterPropertiesPtrOutput
}

type clusterPropertiesPtrType ClusterPropertiesArgs

func ClusterPropertiesPtr(v *ClusterPropertiesArgs) ClusterPropertiesPtrInput {
	return (*clusterPropertiesPtrType)(v)
}

func (*clusterPropertiesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ClusterProperties)(nil)).Elem()
}

func (i *clusterPropertiesPtrType) ToClusterPropertiesPtrOutput() ClusterPropertiesPtrOutput {
	return i.ToClusterPropertiesPtrOutputWithContext(context.Background())
}

func (i *clusterPropertiesPtrType) ToClusterPropertiesPtrOutputWithContext(ctx context.Context) ClusterPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterPropertiesPtrOutput)
}

// The properties of a cluster
type ClusterPropertiesResponse struct {
	// The identity
	ClusterId int `pulumi:"clusterId"`
	// The cluster size
	ClusterSize *int `pulumi:"clusterSize"`
	// The hosts
	Hosts []string `pulumi:"hosts"`
	// The state of the cluster provisioning
	ProvisioningState string `pulumi:"provisioningState"`
}

// The properties of a cluster
type ClusterPropertiesResponseOutput struct{ *pulumi.OutputState }

func (ClusterPropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterPropertiesResponse)(nil)).Elem()
}

func (o ClusterPropertiesResponseOutput) ToClusterPropertiesResponseOutput() ClusterPropertiesResponseOutput {
	return o
}

func (o ClusterPropertiesResponseOutput) ToClusterPropertiesResponseOutputWithContext(ctx context.Context) ClusterPropertiesResponseOutput {
	return o
}

func (o ClusterPropertiesResponseOutput) ToClusterPropertiesResponsePtrOutput() ClusterPropertiesResponsePtrOutput {
	return o.ToClusterPropertiesResponsePtrOutputWithContext(context.Background())
}

func (o ClusterPropertiesResponseOutput) ToClusterPropertiesResponsePtrOutputWithContext(ctx context.Context) ClusterPropertiesResponsePtrOutput {
	return o.ApplyT(func(v ClusterPropertiesResponse) *ClusterPropertiesResponse {
		return &v
	}).(ClusterPropertiesResponsePtrOutput)
}

// The identity
func (o ClusterPropertiesResponseOutput) ClusterId() pulumi.IntOutput {
	return o.ApplyT(func(v ClusterPropertiesResponse) int { return v.ClusterId }).(pulumi.IntOutput)
}

// The cluster size
func (o ClusterPropertiesResponseOutput) ClusterSize() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ClusterPropertiesResponse) *int { return v.ClusterSize }).(pulumi.IntPtrOutput)
}

// The hosts
func (o ClusterPropertiesResponseOutput) Hosts() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ClusterPropertiesResponse) []string { return v.Hosts }).(pulumi.StringArrayOutput)
}

// The state of the cluster provisioning
func (o ClusterPropertiesResponseOutput) ProvisioningState() pulumi.StringOutput {
	return o.ApplyT(func(v ClusterPropertiesResponse) string { return v.ProvisioningState }).(pulumi.StringOutput)
}

type ClusterPropertiesResponsePtrOutput struct{ *pulumi.OutputState }

func (ClusterPropertiesResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ClusterPropertiesResponse)(nil)).Elem()
}

func (o ClusterPropertiesResponsePtrOutput) ToClusterPropertiesResponsePtrOutput() ClusterPropertiesResponsePtrOutput {
	return o
}

func (o ClusterPropertiesResponsePtrOutput) ToClusterPropertiesResponsePtrOutputWithContext(ctx context.Context) ClusterPropertiesResponsePtrOutput {
	return o
}

func (o ClusterPropertiesResponsePtrOutput) Elem() ClusterPropertiesResponseOutput {
	return o.ApplyT(func(v *ClusterPropertiesResponse) ClusterPropertiesResponse { return *v }).(ClusterPropertiesResponseOutput)
}

// The identity
func (o ClusterPropertiesResponsePtrOutput) ClusterId() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ClusterPropertiesResponse) *int {
		if v == nil {
			return nil
		}
		return &v.ClusterId
	}).(pulumi.IntPtrOutput)
}

// The cluster size
func (o ClusterPropertiesResponsePtrOutput) ClusterSize() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ClusterPropertiesResponse) *int {
		if v == nil {
			return nil
		}
		return v.ClusterSize
	}).(pulumi.IntPtrOutput)
}

// The hosts
func (o ClusterPropertiesResponsePtrOutput) Hosts() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ClusterPropertiesResponse) []string {
		if v == nil {
			return nil
		}
		return v.Hosts
	}).(pulumi.StringArrayOutput)
}

// The state of the cluster provisioning
func (o ClusterPropertiesResponsePtrOutput) ProvisioningState() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClusterPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return &v.ProvisioningState
	}).(pulumi.StringPtrOutput)
}

// The properties of a default cluster
type DefaultClusterProperties struct {
	// The cluster size
	ClusterSize *int `pulumi:"clusterSize"`
}

// DefaultClusterPropertiesInput is an input type that accepts DefaultClusterPropertiesArgs and DefaultClusterPropertiesOutput values.
// You can construct a concrete instance of `DefaultClusterPropertiesInput` via:
//
//          DefaultClusterPropertiesArgs{...}
type DefaultClusterPropertiesInput interface {
	pulumi.Input

	ToDefaultClusterPropertiesOutput() DefaultClusterPropertiesOutput
	ToDefaultClusterPropertiesOutputWithContext(context.Context) DefaultClusterPropertiesOutput
}

// The properties of a default cluster
type DefaultClusterPropertiesArgs struct {
	// The cluster size
	ClusterSize pulumi.IntPtrInput `pulumi:"clusterSize"`
}

func (DefaultClusterPropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DefaultClusterProperties)(nil)).Elem()
}

func (i DefaultClusterPropertiesArgs) ToDefaultClusterPropertiesOutput() DefaultClusterPropertiesOutput {
	return i.ToDefaultClusterPropertiesOutputWithContext(context.Background())
}

func (i DefaultClusterPropertiesArgs) ToDefaultClusterPropertiesOutputWithContext(ctx context.Context) DefaultClusterPropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DefaultClusterPropertiesOutput)
}

func (i DefaultClusterPropertiesArgs) ToDefaultClusterPropertiesPtrOutput() DefaultClusterPropertiesPtrOutput {
	return i.ToDefaultClusterPropertiesPtrOutputWithContext(context.Background())
}

func (i DefaultClusterPropertiesArgs) ToDefaultClusterPropertiesPtrOutputWithContext(ctx context.Context) DefaultClusterPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DefaultClusterPropertiesOutput).ToDefaultClusterPropertiesPtrOutputWithContext(ctx)
}

// DefaultClusterPropertiesPtrInput is an input type that accepts DefaultClusterPropertiesArgs, DefaultClusterPropertiesPtr and DefaultClusterPropertiesPtrOutput values.
// You can construct a concrete instance of `DefaultClusterPropertiesPtrInput` via:
//
//          DefaultClusterPropertiesArgs{...}
//
//  or:
//
//          nil
type DefaultClusterPropertiesPtrInput interface {
	pulumi.Input

	ToDefaultClusterPropertiesPtrOutput() DefaultClusterPropertiesPtrOutput
	ToDefaultClusterPropertiesPtrOutputWithContext(context.Context) DefaultClusterPropertiesPtrOutput
}

type defaultClusterPropertiesPtrType DefaultClusterPropertiesArgs

func DefaultClusterPropertiesPtr(v *DefaultClusterPropertiesArgs) DefaultClusterPropertiesPtrInput {
	return (*defaultClusterPropertiesPtrType)(v)
}

func (*defaultClusterPropertiesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DefaultClusterProperties)(nil)).Elem()
}

func (i *defaultClusterPropertiesPtrType) ToDefaultClusterPropertiesPtrOutput() DefaultClusterPropertiesPtrOutput {
	return i.ToDefaultClusterPropertiesPtrOutputWithContext(context.Background())
}

func (i *defaultClusterPropertiesPtrType) ToDefaultClusterPropertiesPtrOutputWithContext(ctx context.Context) DefaultClusterPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DefaultClusterPropertiesPtrOutput)
}

// The properties of a default cluster
type DefaultClusterPropertiesResponse struct {
	// The identity
	ClusterId int `pulumi:"clusterId"`
	// The cluster size
	ClusterSize *int `pulumi:"clusterSize"`
	// The hosts
	Hosts []string `pulumi:"hosts"`
}

// The properties of a default cluster
type DefaultClusterPropertiesResponseOutput struct{ *pulumi.OutputState }

func (DefaultClusterPropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DefaultClusterPropertiesResponse)(nil)).Elem()
}

func (o DefaultClusterPropertiesResponseOutput) ToDefaultClusterPropertiesResponseOutput() DefaultClusterPropertiesResponseOutput {
	return o
}

func (o DefaultClusterPropertiesResponseOutput) ToDefaultClusterPropertiesResponseOutputWithContext(ctx context.Context) DefaultClusterPropertiesResponseOutput {
	return o
}

func (o DefaultClusterPropertiesResponseOutput) ToDefaultClusterPropertiesResponsePtrOutput() DefaultClusterPropertiesResponsePtrOutput {
	return o.ToDefaultClusterPropertiesResponsePtrOutputWithContext(context.Background())
}

func (o DefaultClusterPropertiesResponseOutput) ToDefaultClusterPropertiesResponsePtrOutputWithContext(ctx context.Context) DefaultClusterPropertiesResponsePtrOutput {
	return o.ApplyT(func(v DefaultClusterPropertiesResponse) *DefaultClusterPropertiesResponse {
		return &v
	}).(DefaultClusterPropertiesResponsePtrOutput)
}

// The identity
func (o DefaultClusterPropertiesResponseOutput) ClusterId() pulumi.IntOutput {
	return o.ApplyT(func(v DefaultClusterPropertiesResponse) int { return v.ClusterId }).(pulumi.IntOutput)
}

// The cluster size
func (o DefaultClusterPropertiesResponseOutput) ClusterSize() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DefaultClusterPropertiesResponse) *int { return v.ClusterSize }).(pulumi.IntPtrOutput)
}

// The hosts
func (o DefaultClusterPropertiesResponseOutput) Hosts() pulumi.StringArrayOutput {
	return o.ApplyT(func(v DefaultClusterPropertiesResponse) []string { return v.Hosts }).(pulumi.StringArrayOutput)
}

type DefaultClusterPropertiesResponsePtrOutput struct{ *pulumi.OutputState }

func (DefaultClusterPropertiesResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DefaultClusterPropertiesResponse)(nil)).Elem()
}

func (o DefaultClusterPropertiesResponsePtrOutput) ToDefaultClusterPropertiesResponsePtrOutput() DefaultClusterPropertiesResponsePtrOutput {
	return o
}

func (o DefaultClusterPropertiesResponsePtrOutput) ToDefaultClusterPropertiesResponsePtrOutputWithContext(ctx context.Context) DefaultClusterPropertiesResponsePtrOutput {
	return o
}

func (o DefaultClusterPropertiesResponsePtrOutput) Elem() DefaultClusterPropertiesResponseOutput {
	return o.ApplyT(func(v *DefaultClusterPropertiesResponse) DefaultClusterPropertiesResponse { return *v }).(DefaultClusterPropertiesResponseOutput)
}

// The identity
func (o DefaultClusterPropertiesResponsePtrOutput) ClusterId() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *DefaultClusterPropertiesResponse) *int {
		if v == nil {
			return nil
		}
		return &v.ClusterId
	}).(pulumi.IntPtrOutput)
}

// The cluster size
func (o DefaultClusterPropertiesResponsePtrOutput) ClusterSize() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *DefaultClusterPropertiesResponse) *int {
		if v == nil {
			return nil
		}
		return v.ClusterSize
	}).(pulumi.IntPtrOutput)
}

// The hosts
func (o DefaultClusterPropertiesResponsePtrOutput) Hosts() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *DefaultClusterPropertiesResponse) []string {
		if v == nil {
			return nil
		}
		return v.Hosts
	}).(pulumi.StringArrayOutput)
}

// Endpoint addresses
type EndpointsResponse struct {
	// Endpoint for the NSX-T Data Center manager
	NsxtManager string `pulumi:"nsxtManager"`
	// Endpoint for Virtual Center Server Appliance
	Vcsa string `pulumi:"vcsa"`
}

// Endpoint addresses
type EndpointsResponseOutput struct{ *pulumi.OutputState }

func (EndpointsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EndpointsResponse)(nil)).Elem()
}

func (o EndpointsResponseOutput) ToEndpointsResponseOutput() EndpointsResponseOutput {
	return o
}

func (o EndpointsResponseOutput) ToEndpointsResponseOutputWithContext(ctx context.Context) EndpointsResponseOutput {
	return o
}

func (o EndpointsResponseOutput) ToEndpointsResponsePtrOutput() EndpointsResponsePtrOutput {
	return o.ToEndpointsResponsePtrOutputWithContext(context.Background())
}

func (o EndpointsResponseOutput) ToEndpointsResponsePtrOutputWithContext(ctx context.Context) EndpointsResponsePtrOutput {
	return o.ApplyT(func(v EndpointsResponse) *EndpointsResponse {
		return &v
	}).(EndpointsResponsePtrOutput)
}

// Endpoint for the NSX-T Data Center manager
func (o EndpointsResponseOutput) NsxtManager() pulumi.StringOutput {
	return o.ApplyT(func(v EndpointsResponse) string { return v.NsxtManager }).(pulumi.StringOutput)
}

// Endpoint for Virtual Center Server Appliance
func (o EndpointsResponseOutput) Vcsa() pulumi.StringOutput {
	return o.ApplyT(func(v EndpointsResponse) string { return v.Vcsa }).(pulumi.StringOutput)
}

type EndpointsResponsePtrOutput struct{ *pulumi.OutputState }

func (EndpointsResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EndpointsResponse)(nil)).Elem()
}

func (o EndpointsResponsePtrOutput) ToEndpointsResponsePtrOutput() EndpointsResponsePtrOutput {
	return o
}

func (o EndpointsResponsePtrOutput) ToEndpointsResponsePtrOutputWithContext(ctx context.Context) EndpointsResponsePtrOutput {
	return o
}

func (o EndpointsResponsePtrOutput) Elem() EndpointsResponseOutput {
	return o.ApplyT(func(v *EndpointsResponse) EndpointsResponse { return *v }).(EndpointsResponseOutput)
}

// Endpoint for the NSX-T Data Center manager
func (o EndpointsResponsePtrOutput) NsxtManager() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EndpointsResponse) *string {
		if v == nil {
			return nil
		}
		return &v.NsxtManager
	}).(pulumi.StringPtrOutput)
}

// Endpoint for Virtual Center Server Appliance
func (o EndpointsResponsePtrOutput) Vcsa() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EndpointsResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Vcsa
	}).(pulumi.StringPtrOutput)
}

// Authorization for an ExpressRoute
type ExpressRouteAuthorization struct {
	// The name of the ExpressRoute
	Name *string `pulumi:"name"`
}

// ExpressRouteAuthorizationInput is an input type that accepts ExpressRouteAuthorizationArgs and ExpressRouteAuthorizationOutput values.
// You can construct a concrete instance of `ExpressRouteAuthorizationInput` via:
//
//          ExpressRouteAuthorizationArgs{...}
type ExpressRouteAuthorizationInput interface {
	pulumi.Input

	ToExpressRouteAuthorizationOutput() ExpressRouteAuthorizationOutput
	ToExpressRouteAuthorizationOutputWithContext(context.Context) ExpressRouteAuthorizationOutput
}

// Authorization for an ExpressRoute
type ExpressRouteAuthorizationArgs struct {
	// The name of the ExpressRoute
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (ExpressRouteAuthorizationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ExpressRouteAuthorization)(nil)).Elem()
}

func (i ExpressRouteAuthorizationArgs) ToExpressRouteAuthorizationOutput() ExpressRouteAuthorizationOutput {
	return i.ToExpressRouteAuthorizationOutputWithContext(context.Background())
}

func (i ExpressRouteAuthorizationArgs) ToExpressRouteAuthorizationOutputWithContext(ctx context.Context) ExpressRouteAuthorizationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExpressRouteAuthorizationOutput)
}

// ExpressRouteAuthorizationArrayInput is an input type that accepts ExpressRouteAuthorizationArray and ExpressRouteAuthorizationArrayOutput values.
// You can construct a concrete instance of `ExpressRouteAuthorizationArrayInput` via:
//
//          ExpressRouteAuthorizationArray{ ExpressRouteAuthorizationArgs{...} }
type ExpressRouteAuthorizationArrayInput interface {
	pulumi.Input

	ToExpressRouteAuthorizationArrayOutput() ExpressRouteAuthorizationArrayOutput
	ToExpressRouteAuthorizationArrayOutputWithContext(context.Context) ExpressRouteAuthorizationArrayOutput
}

type ExpressRouteAuthorizationArray []ExpressRouteAuthorizationInput

func (ExpressRouteAuthorizationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ExpressRouteAuthorization)(nil)).Elem()
}

func (i ExpressRouteAuthorizationArray) ToExpressRouteAuthorizationArrayOutput() ExpressRouteAuthorizationArrayOutput {
	return i.ToExpressRouteAuthorizationArrayOutputWithContext(context.Background())
}

func (i ExpressRouteAuthorizationArray) ToExpressRouteAuthorizationArrayOutputWithContext(ctx context.Context) ExpressRouteAuthorizationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExpressRouteAuthorizationArrayOutput)
}

// Authorization for an ExpressRoute
type ExpressRouteAuthorizationResponse struct {
	// The ID of the ExpressRoute
	Id string `pulumi:"id"`
	// The key of the ExpressRoute
	Key string `pulumi:"key"`
	// The name of the ExpressRoute
	Name *string `pulumi:"name"`
}

// Authorization for an ExpressRoute
type ExpressRouteAuthorizationResponseOutput struct{ *pulumi.OutputState }

func (ExpressRouteAuthorizationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ExpressRouteAuthorizationResponse)(nil)).Elem()
}

func (o ExpressRouteAuthorizationResponseOutput) ToExpressRouteAuthorizationResponseOutput() ExpressRouteAuthorizationResponseOutput {
	return o
}

func (o ExpressRouteAuthorizationResponseOutput) ToExpressRouteAuthorizationResponseOutputWithContext(ctx context.Context) ExpressRouteAuthorizationResponseOutput {
	return o
}

// The ID of the ExpressRoute
func (o ExpressRouteAuthorizationResponseOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v ExpressRouteAuthorizationResponse) string { return v.Id }).(pulumi.StringOutput)
}

// The key of the ExpressRoute
func (o ExpressRouteAuthorizationResponseOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v ExpressRouteAuthorizationResponse) string { return v.Key }).(pulumi.StringOutput)
}

// The name of the ExpressRoute
func (o ExpressRouteAuthorizationResponseOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ExpressRouteAuthorizationResponse) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type ExpressRouteAuthorizationResponseArrayOutput struct{ *pulumi.OutputState }

func (ExpressRouteAuthorizationResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ExpressRouteAuthorizationResponse)(nil)).Elem()
}

func (o ExpressRouteAuthorizationResponseArrayOutput) ToExpressRouteAuthorizationResponseArrayOutput() ExpressRouteAuthorizationResponseArrayOutput {
	return o
}

func (o ExpressRouteAuthorizationResponseArrayOutput) ToExpressRouteAuthorizationResponseArrayOutputWithContext(ctx context.Context) ExpressRouteAuthorizationResponseArrayOutput {
	return o
}

func (o ExpressRouteAuthorizationResponseArrayOutput) Index(i pulumi.IntInput) ExpressRouteAuthorizationResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ExpressRouteAuthorizationResponse {
		return vs[0].([]ExpressRouteAuthorizationResponse)[vs[1].(int)]
	}).(ExpressRouteAuthorizationResponseOutput)
}

// vCenter Single Sign On Identity Source
type IdentitySource struct {
	// The domain's NetBIOS name
	Alias *string `pulumi:"alias"`
	// The base distinguished name for groups
	BaseGroupDN *string `pulumi:"baseGroupDN"`
	// The base distinguished name for users
	BaseUserDN *string `pulumi:"baseUserDN"`
	// The domain's dns name
	Domain *string `pulumi:"domain"`
	// The name of the identity source
	Name *string `pulumi:"name"`
	// The password of the Active Directory user with a minimum of read-only access to Base DN for users and groups.
	Password *string `pulumi:"password"`
	// Primary server URL
	PrimaryServer *string `pulumi:"primaryServer"`
	// Secondary server URL
	SecondaryServer *string `pulumi:"secondaryServer"`
	// Protect LDAP communication using SSL certificate (LDAPS)
	Ssl *string `pulumi:"ssl"`
	// The ID of an Active Directory user with a minimum of read-only access to Base DN for users and group
	Username *string `pulumi:"username"`
}

// IdentitySourceInput is an input type that accepts IdentitySourceArgs and IdentitySourceOutput values.
// You can construct a concrete instance of `IdentitySourceInput` via:
//
//          IdentitySourceArgs{...}
type IdentitySourceInput interface {
	pulumi.Input

	ToIdentitySourceOutput() IdentitySourceOutput
	ToIdentitySourceOutputWithContext(context.Context) IdentitySourceOutput
}

// vCenter Single Sign On Identity Source
type IdentitySourceArgs struct {
	// The domain's NetBIOS name
	Alias pulumi.StringPtrInput `pulumi:"alias"`
	// The base distinguished name for groups
	BaseGroupDN pulumi.StringPtrInput `pulumi:"baseGroupDN"`
	// The base distinguished name for users
	BaseUserDN pulumi.StringPtrInput `pulumi:"baseUserDN"`
	// The domain's dns name
	Domain pulumi.StringPtrInput `pulumi:"domain"`
	// The name of the identity source
	Name pulumi.StringPtrInput `pulumi:"name"`
	// The password of the Active Directory user with a minimum of read-only access to Base DN for users and groups.
	Password pulumi.StringPtrInput `pulumi:"password"`
	// Primary server URL
	PrimaryServer pulumi.StringPtrInput `pulumi:"primaryServer"`
	// Secondary server URL
	SecondaryServer pulumi.StringPtrInput `pulumi:"secondaryServer"`
	// Protect LDAP communication using SSL certificate (LDAPS)
	Ssl pulumi.StringPtrInput `pulumi:"ssl"`
	// The ID of an Active Directory user with a minimum of read-only access to Base DN for users and group
	Username pulumi.StringPtrInput `pulumi:"username"`
}

func (IdentitySourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*IdentitySource)(nil)).Elem()
}

func (i IdentitySourceArgs) ToIdentitySourceOutput() IdentitySourceOutput {
	return i.ToIdentitySourceOutputWithContext(context.Background())
}

func (i IdentitySourceArgs) ToIdentitySourceOutputWithContext(ctx context.Context) IdentitySourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IdentitySourceOutput)
}

// IdentitySourceArrayInput is an input type that accepts IdentitySourceArray and IdentitySourceArrayOutput values.
// You can construct a concrete instance of `IdentitySourceArrayInput` via:
//
//          IdentitySourceArray{ IdentitySourceArgs{...} }
type IdentitySourceArrayInput interface {
	pulumi.Input

	ToIdentitySourceArrayOutput() IdentitySourceArrayOutput
	ToIdentitySourceArrayOutputWithContext(context.Context) IdentitySourceArrayOutput
}

type IdentitySourceArray []IdentitySourceInput

func (IdentitySourceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]IdentitySource)(nil)).Elem()
}

func (i IdentitySourceArray) ToIdentitySourceArrayOutput() IdentitySourceArrayOutput {
	return i.ToIdentitySourceArrayOutputWithContext(context.Background())
}

func (i IdentitySourceArray) ToIdentitySourceArrayOutputWithContext(ctx context.Context) IdentitySourceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IdentitySourceArrayOutput)
}

// vCenter Single Sign On Identity Source
type IdentitySourceResponse struct {
	// The domain's NetBIOS name
	Alias *string `pulumi:"alias"`
	// The base distinguished name for groups
	BaseGroupDN *string `pulumi:"baseGroupDN"`
	// The base distinguished name for users
	BaseUserDN *string `pulumi:"baseUserDN"`
	// The domain's dns name
	Domain *string `pulumi:"domain"`
	// The name of the identity source
	Name *string `pulumi:"name"`
	// The password of the Active Directory user with a minimum of read-only access to Base DN for users and groups.
	Password *string `pulumi:"password"`
	// Primary server URL
	PrimaryServer *string `pulumi:"primaryServer"`
	// Secondary server URL
	SecondaryServer *string `pulumi:"secondaryServer"`
	// Protect LDAP communication using SSL certificate (LDAPS)
	Ssl *string `pulumi:"ssl"`
	// The ID of an Active Directory user with a minimum of read-only access to Base DN for users and group
	Username *string `pulumi:"username"`
}

// vCenter Single Sign On Identity Source
type IdentitySourceResponseOutput struct{ *pulumi.OutputState }

func (IdentitySourceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IdentitySourceResponse)(nil)).Elem()
}

func (o IdentitySourceResponseOutput) ToIdentitySourceResponseOutput() IdentitySourceResponseOutput {
	return o
}

func (o IdentitySourceResponseOutput) ToIdentitySourceResponseOutputWithContext(ctx context.Context) IdentitySourceResponseOutput {
	return o
}

// The domain's NetBIOS name
func (o IdentitySourceResponseOutput) Alias() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IdentitySourceResponse) *string { return v.Alias }).(pulumi.StringPtrOutput)
}

// The base distinguished name for groups
func (o IdentitySourceResponseOutput) BaseGroupDN() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IdentitySourceResponse) *string { return v.BaseGroupDN }).(pulumi.StringPtrOutput)
}

// The base distinguished name for users
func (o IdentitySourceResponseOutput) BaseUserDN() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IdentitySourceResponse) *string { return v.BaseUserDN }).(pulumi.StringPtrOutput)
}

// The domain's dns name
func (o IdentitySourceResponseOutput) Domain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IdentitySourceResponse) *string { return v.Domain }).(pulumi.StringPtrOutput)
}

// The name of the identity source
func (o IdentitySourceResponseOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IdentitySourceResponse) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The password of the Active Directory user with a minimum of read-only access to Base DN for users and groups.
func (o IdentitySourceResponseOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IdentitySourceResponse) *string { return v.Password }).(pulumi.StringPtrOutput)
}

// Primary server URL
func (o IdentitySourceResponseOutput) PrimaryServer() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IdentitySourceResponse) *string { return v.PrimaryServer }).(pulumi.StringPtrOutput)
}

// Secondary server URL
func (o IdentitySourceResponseOutput) SecondaryServer() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IdentitySourceResponse) *string { return v.SecondaryServer }).(pulumi.StringPtrOutput)
}

// Protect LDAP communication using SSL certificate (LDAPS)
func (o IdentitySourceResponseOutput) Ssl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IdentitySourceResponse) *string { return v.Ssl }).(pulumi.StringPtrOutput)
}

// The ID of an Active Directory user with a minimum of read-only access to Base DN for users and group
func (o IdentitySourceResponseOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IdentitySourceResponse) *string { return v.Username }).(pulumi.StringPtrOutput)
}

type IdentitySourceResponseArrayOutput struct{ *pulumi.OutputState }

func (IdentitySourceResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]IdentitySourceResponse)(nil)).Elem()
}

func (o IdentitySourceResponseArrayOutput) ToIdentitySourceResponseArrayOutput() IdentitySourceResponseArrayOutput {
	return o
}

func (o IdentitySourceResponseArrayOutput) ToIdentitySourceResponseArrayOutputWithContext(ctx context.Context) IdentitySourceResponseArrayOutput {
	return o
}

func (o IdentitySourceResponseArrayOutput) Index(i pulumi.IntInput) IdentitySourceResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) IdentitySourceResponse {
		return vs[0].([]IdentitySourceResponse)[vs[1].(int)]
	}).(IdentitySourceResponseOutput)
}

// The properties of a private cloud resource
type PrivateCloudProperties struct {
	// An ExpressRoute Circuit
	Circuit *Circuit `pulumi:"circuit"`
	// The default cluster used for management
	Cluster *DefaultClusterProperties `pulumi:"cluster"`
	// vCenter Single Sign On Identity Sources
	IdentitySources []IdentitySource `pulumi:"identitySources"`
	// Connectivity to internet is enabled or disabled
	Internet *string `pulumi:"internet"`
	// The block of addresses should be unique across VNet in your subscription as well as on-premise. Make sure the CIDR format is conformed to (A.B.C.D/X) where A,B,C,D are between 0 and 255, and X is between 0 and 22
	NetworkBlock *string `pulumi:"networkBlock"`
	// Optionally, set the NSX-T Manager password when the private cloud is created
	NsxtPassword *string `pulumi:"nsxtPassword"`
	// Optionally, set the vCenter admin password when the private cloud is created
	VcenterPassword *string `pulumi:"vcenterPassword"`
}

// PrivateCloudPropertiesInput is an input type that accepts PrivateCloudPropertiesArgs and PrivateCloudPropertiesOutput values.
// You can construct a concrete instance of `PrivateCloudPropertiesInput` via:
//
//          PrivateCloudPropertiesArgs{...}
type PrivateCloudPropertiesInput interface {
	pulumi.Input

	ToPrivateCloudPropertiesOutput() PrivateCloudPropertiesOutput
	ToPrivateCloudPropertiesOutputWithContext(context.Context) PrivateCloudPropertiesOutput
}

// The properties of a private cloud resource
type PrivateCloudPropertiesArgs struct {
	// An ExpressRoute Circuit
	Circuit CircuitPtrInput `pulumi:"circuit"`
	// The default cluster used for management
	Cluster DefaultClusterPropertiesPtrInput `pulumi:"cluster"`
	// vCenter Single Sign On Identity Sources
	IdentitySources IdentitySourceArrayInput `pulumi:"identitySources"`
	// Connectivity to internet is enabled or disabled
	Internet pulumi.StringPtrInput `pulumi:"internet"`
	// The block of addresses should be unique across VNet in your subscription as well as on-premise. Make sure the CIDR format is conformed to (A.B.C.D/X) where A,B,C,D are between 0 and 255, and X is between 0 and 22
	NetworkBlock pulumi.StringPtrInput `pulumi:"networkBlock"`
	// Optionally, set the NSX-T Manager password when the private cloud is created
	NsxtPassword pulumi.StringPtrInput `pulumi:"nsxtPassword"`
	// Optionally, set the vCenter admin password when the private cloud is created
	VcenterPassword pulumi.StringPtrInput `pulumi:"vcenterPassword"`
}

func (PrivateCloudPropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PrivateCloudProperties)(nil)).Elem()
}

func (i PrivateCloudPropertiesArgs) ToPrivateCloudPropertiesOutput() PrivateCloudPropertiesOutput {
	return i.ToPrivateCloudPropertiesOutputWithContext(context.Background())
}

func (i PrivateCloudPropertiesArgs) ToPrivateCloudPropertiesOutputWithContext(ctx context.Context) PrivateCloudPropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PrivateCloudPropertiesOutput)
}

func (i PrivateCloudPropertiesArgs) ToPrivateCloudPropertiesPtrOutput() PrivateCloudPropertiesPtrOutput {
	return i.ToPrivateCloudPropertiesPtrOutputWithContext(context.Background())
}

func (i PrivateCloudPropertiesArgs) ToPrivateCloudPropertiesPtrOutputWithContext(ctx context.Context) PrivateCloudPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PrivateCloudPropertiesOutput).ToPrivateCloudPropertiesPtrOutputWithContext(ctx)
}

// PrivateCloudPropertiesPtrInput is an input type that accepts PrivateCloudPropertiesArgs, PrivateCloudPropertiesPtr and PrivateCloudPropertiesPtrOutput values.
// You can construct a concrete instance of `PrivateCloudPropertiesPtrInput` via:
//
//          PrivateCloudPropertiesArgs{...}
//
//  or:
//
//          nil
type PrivateCloudPropertiesPtrInput interface {
	pulumi.Input

	ToPrivateCloudPropertiesPtrOutput() PrivateCloudPropertiesPtrOutput
	ToPrivateCloudPropertiesPtrOutputWithContext(context.Context) PrivateCloudPropertiesPtrOutput
}

type privateCloudPropertiesPtrType PrivateCloudPropertiesArgs

func PrivateCloudPropertiesPtr(v *PrivateCloudPropertiesArgs) PrivateCloudPropertiesPtrInput {
	return (*privateCloudPropertiesPtrType)(v)
}

func (*privateCloudPropertiesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PrivateCloudProperties)(nil)).Elem()
}

func (i *privateCloudPropertiesPtrType) ToPrivateCloudPropertiesPtrOutput() PrivateCloudPropertiesPtrOutput {
	return i.ToPrivateCloudPropertiesPtrOutputWithContext(context.Background())
}

func (i *privateCloudPropertiesPtrType) ToPrivateCloudPropertiesPtrOutputWithContext(ctx context.Context) PrivateCloudPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PrivateCloudPropertiesPtrOutput)
}

// The properties of a private cloud resource
type PrivateCloudPropertiesResponse struct {
	// An ExpressRoute Circuit
	Circuit *CircuitResponse `pulumi:"circuit"`
	// The default cluster used for management
	Cluster *DefaultClusterPropertiesResponse `pulumi:"cluster"`
	// The clusters
	Clusters []string `pulumi:"clusters"`
	// The endpoints
	Endpoints EndpointsResponse `pulumi:"endpoints"`
	// vCenter Single Sign On Identity Sources
	IdentitySources []IdentitySourceResponse `pulumi:"identitySources"`
	// Connectivity to internet is enabled or disabled
	Internet *string `pulumi:"internet"`
	// Network used to access vCenter Server and NSX-T Manager
	ManagementNetwork string `pulumi:"managementNetwork"`
	// The block of addresses should be unique across VNet in your subscription as well as on-premise. Make sure the CIDR format is conformed to (A.B.C.D/X) where A,B,C,D are between 0 and 255, and X is between 0 and 22
	NetworkBlock *string `pulumi:"networkBlock"`
	// Thumbprint of the NSX-T Manager SSL certificate
	NsxtCertificateThumbprint string `pulumi:"nsxtCertificateThumbprint"`
	// Optionally, set the NSX-T Manager password when the private cloud is created
	NsxtPassword *string `pulumi:"nsxtPassword"`
	// Used for virtual machine cold migration, cloning, and snapshot migration
	ProvisioningNetwork string `pulumi:"provisioningNetwork"`
	// The provisioning state
	ProvisioningState string `pulumi:"provisioningState"`
	// Thumbprint of the vCenter Server SSL certificate
	VcenterCertificateThumbprint string `pulumi:"vcenterCertificateThumbprint"`
	// Optionally, set the vCenter admin password when the private cloud is created
	VcenterPassword *string `pulumi:"vcenterPassword"`
	// Used for live migration of virtual machines
	VmotionNetwork string `pulumi:"vmotionNetwork"`
}

// The properties of a private cloud resource
type PrivateCloudPropertiesResponseOutput struct{ *pulumi.OutputState }

func (PrivateCloudPropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PrivateCloudPropertiesResponse)(nil)).Elem()
}

func (o PrivateCloudPropertiesResponseOutput) ToPrivateCloudPropertiesResponseOutput() PrivateCloudPropertiesResponseOutput {
	return o
}

func (o PrivateCloudPropertiesResponseOutput) ToPrivateCloudPropertiesResponseOutputWithContext(ctx context.Context) PrivateCloudPropertiesResponseOutput {
	return o
}

func (o PrivateCloudPropertiesResponseOutput) ToPrivateCloudPropertiesResponsePtrOutput() PrivateCloudPropertiesResponsePtrOutput {
	return o.ToPrivateCloudPropertiesResponsePtrOutputWithContext(context.Background())
}

func (o PrivateCloudPropertiesResponseOutput) ToPrivateCloudPropertiesResponsePtrOutputWithContext(ctx context.Context) PrivateCloudPropertiesResponsePtrOutput {
	return o.ApplyT(func(v PrivateCloudPropertiesResponse) *PrivateCloudPropertiesResponse {
		return &v
	}).(PrivateCloudPropertiesResponsePtrOutput)
}

// An ExpressRoute Circuit
func (o PrivateCloudPropertiesResponseOutput) Circuit() CircuitResponsePtrOutput {
	return o.ApplyT(func(v PrivateCloudPropertiesResponse) *CircuitResponse { return v.Circuit }).(CircuitResponsePtrOutput)
}

// The default cluster used for management
func (o PrivateCloudPropertiesResponseOutput) Cluster() DefaultClusterPropertiesResponsePtrOutput {
	return o.ApplyT(func(v PrivateCloudPropertiesResponse) *DefaultClusterPropertiesResponse { return v.Cluster }).(DefaultClusterPropertiesResponsePtrOutput)
}

// The clusters
func (o PrivateCloudPropertiesResponseOutput) Clusters() pulumi.StringArrayOutput {
	return o.ApplyT(func(v PrivateCloudPropertiesResponse) []string { return v.Clusters }).(pulumi.StringArrayOutput)
}

// The endpoints
func (o PrivateCloudPropertiesResponseOutput) Endpoints() EndpointsResponseOutput {
	return o.ApplyT(func(v PrivateCloudPropertiesResponse) EndpointsResponse { return v.Endpoints }).(EndpointsResponseOutput)
}

// vCenter Single Sign On Identity Sources
func (o PrivateCloudPropertiesResponseOutput) IdentitySources() IdentitySourceResponseArrayOutput {
	return o.ApplyT(func(v PrivateCloudPropertiesResponse) []IdentitySourceResponse { return v.IdentitySources }).(IdentitySourceResponseArrayOutput)
}

// Connectivity to internet is enabled or disabled
func (o PrivateCloudPropertiesResponseOutput) Internet() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PrivateCloudPropertiesResponse) *string { return v.Internet }).(pulumi.StringPtrOutput)
}

// Network used to access vCenter Server and NSX-T Manager
func (o PrivateCloudPropertiesResponseOutput) ManagementNetwork() pulumi.StringOutput {
	return o.ApplyT(func(v PrivateCloudPropertiesResponse) string { return v.ManagementNetwork }).(pulumi.StringOutput)
}

// The block of addresses should be unique across VNet in your subscription as well as on-premise. Make sure the CIDR format is conformed to (A.B.C.D/X) where A,B,C,D are between 0 and 255, and X is between 0 and 22
func (o PrivateCloudPropertiesResponseOutput) NetworkBlock() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PrivateCloudPropertiesResponse) *string { return v.NetworkBlock }).(pulumi.StringPtrOutput)
}

// Thumbprint of the NSX-T Manager SSL certificate
func (o PrivateCloudPropertiesResponseOutput) NsxtCertificateThumbprint() pulumi.StringOutput {
	return o.ApplyT(func(v PrivateCloudPropertiesResponse) string { return v.NsxtCertificateThumbprint }).(pulumi.StringOutput)
}

// Optionally, set the NSX-T Manager password when the private cloud is created
func (o PrivateCloudPropertiesResponseOutput) NsxtPassword() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PrivateCloudPropertiesResponse) *string { return v.NsxtPassword }).(pulumi.StringPtrOutput)
}

// Used for virtual machine cold migration, cloning, and snapshot migration
func (o PrivateCloudPropertiesResponseOutput) ProvisioningNetwork() pulumi.StringOutput {
	return o.ApplyT(func(v PrivateCloudPropertiesResponse) string { return v.ProvisioningNetwork }).(pulumi.StringOutput)
}

// The provisioning state
func (o PrivateCloudPropertiesResponseOutput) ProvisioningState() pulumi.StringOutput {
	return o.ApplyT(func(v PrivateCloudPropertiesResponse) string { return v.ProvisioningState }).(pulumi.StringOutput)
}

// Thumbprint of the vCenter Server SSL certificate
func (o PrivateCloudPropertiesResponseOutput) VcenterCertificateThumbprint() pulumi.StringOutput {
	return o.ApplyT(func(v PrivateCloudPropertiesResponse) string { return v.VcenterCertificateThumbprint }).(pulumi.StringOutput)
}

// Optionally, set the vCenter admin password when the private cloud is created
func (o PrivateCloudPropertiesResponseOutput) VcenterPassword() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PrivateCloudPropertiesResponse) *string { return v.VcenterPassword }).(pulumi.StringPtrOutput)
}

// Used for live migration of virtual machines
func (o PrivateCloudPropertiesResponseOutput) VmotionNetwork() pulumi.StringOutput {
	return o.ApplyT(func(v PrivateCloudPropertiesResponse) string { return v.VmotionNetwork }).(pulumi.StringOutput)
}

type PrivateCloudPropertiesResponsePtrOutput struct{ *pulumi.OutputState }

func (PrivateCloudPropertiesResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PrivateCloudPropertiesResponse)(nil)).Elem()
}

func (o PrivateCloudPropertiesResponsePtrOutput) ToPrivateCloudPropertiesResponsePtrOutput() PrivateCloudPropertiesResponsePtrOutput {
	return o
}

func (o PrivateCloudPropertiesResponsePtrOutput) ToPrivateCloudPropertiesResponsePtrOutputWithContext(ctx context.Context) PrivateCloudPropertiesResponsePtrOutput {
	return o
}

func (o PrivateCloudPropertiesResponsePtrOutput) Elem() PrivateCloudPropertiesResponseOutput {
	return o.ApplyT(func(v *PrivateCloudPropertiesResponse) PrivateCloudPropertiesResponse { return *v }).(PrivateCloudPropertiesResponseOutput)
}

// An ExpressRoute Circuit
func (o PrivateCloudPropertiesResponsePtrOutput) Circuit() CircuitResponsePtrOutput {
	return o.ApplyT(func(v *PrivateCloudPropertiesResponse) *CircuitResponse {
		if v == nil {
			return nil
		}
		return v.Circuit
	}).(CircuitResponsePtrOutput)
}

// The default cluster used for management
func (o PrivateCloudPropertiesResponsePtrOutput) Cluster() DefaultClusterPropertiesResponsePtrOutput {
	return o.ApplyT(func(v *PrivateCloudPropertiesResponse) *DefaultClusterPropertiesResponse {
		if v == nil {
			return nil
		}
		return v.Cluster
	}).(DefaultClusterPropertiesResponsePtrOutput)
}

// The clusters
func (o PrivateCloudPropertiesResponsePtrOutput) Clusters() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *PrivateCloudPropertiesResponse) []string {
		if v == nil {
			return nil
		}
		return v.Clusters
	}).(pulumi.StringArrayOutput)
}

// The endpoints
func (o PrivateCloudPropertiesResponsePtrOutput) Endpoints() EndpointsResponsePtrOutput {
	return o.ApplyT(func(v *PrivateCloudPropertiesResponse) *EndpointsResponse {
		if v == nil {
			return nil
		}
		return &v.Endpoints
	}).(EndpointsResponsePtrOutput)
}

// vCenter Single Sign On Identity Sources
func (o PrivateCloudPropertiesResponsePtrOutput) IdentitySources() IdentitySourceResponseArrayOutput {
	return o.ApplyT(func(v *PrivateCloudPropertiesResponse) []IdentitySourceResponse {
		if v == nil {
			return nil
		}
		return v.IdentitySources
	}).(IdentitySourceResponseArrayOutput)
}

// Connectivity to internet is enabled or disabled
func (o PrivateCloudPropertiesResponsePtrOutput) Internet() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PrivateCloudPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return v.Internet
	}).(pulumi.StringPtrOutput)
}

// Network used to access vCenter Server and NSX-T Manager
func (o PrivateCloudPropertiesResponsePtrOutput) ManagementNetwork() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PrivateCloudPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return &v.ManagementNetwork
	}).(pulumi.StringPtrOutput)
}

// The block of addresses should be unique across VNet in your subscription as well as on-premise. Make sure the CIDR format is conformed to (A.B.C.D/X) where A,B,C,D are between 0 and 255, and X is between 0 and 22
func (o PrivateCloudPropertiesResponsePtrOutput) NetworkBlock() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PrivateCloudPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return v.NetworkBlock
	}).(pulumi.StringPtrOutput)
}

// Thumbprint of the NSX-T Manager SSL certificate
func (o PrivateCloudPropertiesResponsePtrOutput) NsxtCertificateThumbprint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PrivateCloudPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return &v.NsxtCertificateThumbprint
	}).(pulumi.StringPtrOutput)
}

// Optionally, set the NSX-T Manager password when the private cloud is created
func (o PrivateCloudPropertiesResponsePtrOutput) NsxtPassword() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PrivateCloudPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return v.NsxtPassword
	}).(pulumi.StringPtrOutput)
}

// Used for virtual machine cold migration, cloning, and snapshot migration
func (o PrivateCloudPropertiesResponsePtrOutput) ProvisioningNetwork() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PrivateCloudPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return &v.ProvisioningNetwork
	}).(pulumi.StringPtrOutput)
}

// The provisioning state
func (o PrivateCloudPropertiesResponsePtrOutput) ProvisioningState() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PrivateCloudPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return &v.ProvisioningState
	}).(pulumi.StringPtrOutput)
}

// Thumbprint of the vCenter Server SSL certificate
func (o PrivateCloudPropertiesResponsePtrOutput) VcenterCertificateThumbprint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PrivateCloudPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return &v.VcenterCertificateThumbprint
	}).(pulumi.StringPtrOutput)
}

// Optionally, set the vCenter admin password when the private cloud is created
func (o PrivateCloudPropertiesResponsePtrOutput) VcenterPassword() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PrivateCloudPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return v.VcenterPassword
	}).(pulumi.StringPtrOutput)
}

// Used for live migration of virtual machines
func (o PrivateCloudPropertiesResponsePtrOutput) VmotionNetwork() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PrivateCloudPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return &v.VmotionNetwork
	}).(pulumi.StringPtrOutput)
}

// The resource model definition representing SKU
type Sku struct {
	// The name of the SKU.
	Name string `pulumi:"name"`
}

// SkuInput is an input type that accepts SkuArgs and SkuOutput values.
// You can construct a concrete instance of `SkuInput` via:
//
//          SkuArgs{...}
type SkuInput interface {
	pulumi.Input

	ToSkuOutput() SkuOutput
	ToSkuOutputWithContext(context.Context) SkuOutput
}

// The resource model definition representing SKU
type SkuArgs struct {
	// The name of the SKU.
	Name pulumi.StringInput `pulumi:"name"`
}

func (SkuArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Sku)(nil)).Elem()
}

func (i SkuArgs) ToSkuOutput() SkuOutput {
	return i.ToSkuOutputWithContext(context.Background())
}

func (i SkuArgs) ToSkuOutputWithContext(ctx context.Context) SkuOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SkuOutput)
}

func (i SkuArgs) ToSkuPtrOutput() SkuPtrOutput {
	return i.ToSkuPtrOutputWithContext(context.Background())
}

func (i SkuArgs) ToSkuPtrOutputWithContext(ctx context.Context) SkuPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SkuOutput).ToSkuPtrOutputWithContext(ctx)
}

// SkuPtrInput is an input type that accepts SkuArgs, SkuPtr and SkuPtrOutput values.
// You can construct a concrete instance of `SkuPtrInput` via:
//
//          SkuArgs{...}
//
//  or:
//
//          nil
type SkuPtrInput interface {
	pulumi.Input

	ToSkuPtrOutput() SkuPtrOutput
	ToSkuPtrOutputWithContext(context.Context) SkuPtrOutput
}

type skuPtrType SkuArgs

func SkuPtr(v *SkuArgs) SkuPtrInput {
	return (*skuPtrType)(v)
}

func (*skuPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Sku)(nil)).Elem()
}

func (i *skuPtrType) ToSkuPtrOutput() SkuPtrOutput {
	return i.ToSkuPtrOutputWithContext(context.Background())
}

func (i *skuPtrType) ToSkuPtrOutputWithContext(ctx context.Context) SkuPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SkuPtrOutput)
}

// The resource model definition representing SKU
type SkuResponse struct {
	// The name of the SKU.
	Name string `pulumi:"name"`
}

// The resource model definition representing SKU
type SkuResponseOutput struct{ *pulumi.OutputState }

func (SkuResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SkuResponse)(nil)).Elem()
}

func (o SkuResponseOutput) ToSkuResponseOutput() SkuResponseOutput {
	return o
}

func (o SkuResponseOutput) ToSkuResponseOutputWithContext(ctx context.Context) SkuResponseOutput {
	return o
}

func (o SkuResponseOutput) ToSkuResponsePtrOutput() SkuResponsePtrOutput {
	return o.ToSkuResponsePtrOutputWithContext(context.Background())
}

func (o SkuResponseOutput) ToSkuResponsePtrOutputWithContext(ctx context.Context) SkuResponsePtrOutput {
	return o.ApplyT(func(v SkuResponse) *SkuResponse {
		return &v
	}).(SkuResponsePtrOutput)
}

// The name of the SKU.
func (o SkuResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v SkuResponse) string { return v.Name }).(pulumi.StringOutput)
}

type SkuResponsePtrOutput struct{ *pulumi.OutputState }

func (SkuResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SkuResponse)(nil)).Elem()
}

func (o SkuResponsePtrOutput) ToSkuResponsePtrOutput() SkuResponsePtrOutput {
	return o
}

func (o SkuResponsePtrOutput) ToSkuResponsePtrOutputWithContext(ctx context.Context) SkuResponsePtrOutput {
	return o
}

func (o SkuResponsePtrOutput) Elem() SkuResponseOutput {
	return o.ApplyT(func(v *SkuResponse) SkuResponse { return *v }).(SkuResponseOutput)
}

// The name of the SKU.
func (o SkuResponsePtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SkuResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Name
	}).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(CircuitOutput{})
	pulumi.RegisterOutputType(CircuitPtrOutput{})
	pulumi.RegisterOutputType(CircuitResponseOutput{})
	pulumi.RegisterOutputType(CircuitResponsePtrOutput{})
	pulumi.RegisterOutputType(ClusterPropertiesOutput{})
	pulumi.RegisterOutputType(ClusterPropertiesPtrOutput{})
	pulumi.RegisterOutputType(ClusterPropertiesResponseOutput{})
	pulumi.RegisterOutputType(ClusterPropertiesResponsePtrOutput{})
	pulumi.RegisterOutputType(DefaultClusterPropertiesOutput{})
	pulumi.RegisterOutputType(DefaultClusterPropertiesPtrOutput{})
	pulumi.RegisterOutputType(DefaultClusterPropertiesResponseOutput{})
	pulumi.RegisterOutputType(DefaultClusterPropertiesResponsePtrOutput{})
	pulumi.RegisterOutputType(EndpointsResponseOutput{})
	pulumi.RegisterOutputType(EndpointsResponsePtrOutput{})
	pulumi.RegisterOutputType(ExpressRouteAuthorizationOutput{})
	pulumi.RegisterOutputType(ExpressRouteAuthorizationArrayOutput{})
	pulumi.RegisterOutputType(ExpressRouteAuthorizationResponseOutput{})
	pulumi.RegisterOutputType(ExpressRouteAuthorizationResponseArrayOutput{})
	pulumi.RegisterOutputType(IdentitySourceOutput{})
	pulumi.RegisterOutputType(IdentitySourceArrayOutput{})
	pulumi.RegisterOutputType(IdentitySourceResponseOutput{})
	pulumi.RegisterOutputType(IdentitySourceResponseArrayOutput{})
	pulumi.RegisterOutputType(PrivateCloudPropertiesOutput{})
	pulumi.RegisterOutputType(PrivateCloudPropertiesPtrOutput{})
	pulumi.RegisterOutputType(PrivateCloudPropertiesResponseOutput{})
	pulumi.RegisterOutputType(PrivateCloudPropertiesResponsePtrOutput{})
	pulumi.RegisterOutputType(SkuOutput{})
	pulumi.RegisterOutputType(SkuPtrOutput{})
	pulumi.RegisterOutputType(SkuResponseOutput{})
	pulumi.RegisterOutputType(SkuResponsePtrOutput{})
}
