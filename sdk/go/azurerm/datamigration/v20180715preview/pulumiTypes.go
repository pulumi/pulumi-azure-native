// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v20180715preview

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// Azure Active Directory Application
type AzureActiveDirectoryApp struct {
	// Key used to authenticate to the Azure Active Directory Application
	AppKey string `pulumi:"appKey"`
	// Application ID of the Azure Active Directory Application
	ApplicationId string `pulumi:"applicationId"`
	// Tenant id of the customer
	TenantId string `pulumi:"tenantId"`
}

// AzureActiveDirectoryAppInput is an input type that accepts AzureActiveDirectoryAppArgs and AzureActiveDirectoryAppOutput values.
// You can construct a concrete instance of `AzureActiveDirectoryAppInput` via:
//
//          AzureActiveDirectoryAppArgs{...}
type AzureActiveDirectoryAppInput interface {
	pulumi.Input

	ToAzureActiveDirectoryAppOutput() AzureActiveDirectoryAppOutput
	ToAzureActiveDirectoryAppOutputWithContext(context.Context) AzureActiveDirectoryAppOutput
}

// Azure Active Directory Application
type AzureActiveDirectoryAppArgs struct {
	// Key used to authenticate to the Azure Active Directory Application
	AppKey pulumi.StringInput `pulumi:"appKey"`
	// Application ID of the Azure Active Directory Application
	ApplicationId pulumi.StringInput `pulumi:"applicationId"`
	// Tenant id of the customer
	TenantId pulumi.StringInput `pulumi:"tenantId"`
}

func (AzureActiveDirectoryAppArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureActiveDirectoryApp)(nil)).Elem()
}

func (i AzureActiveDirectoryAppArgs) ToAzureActiveDirectoryAppOutput() AzureActiveDirectoryAppOutput {
	return i.ToAzureActiveDirectoryAppOutputWithContext(context.Background())
}

func (i AzureActiveDirectoryAppArgs) ToAzureActiveDirectoryAppOutputWithContext(ctx context.Context) AzureActiveDirectoryAppOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzureActiveDirectoryAppOutput)
}

func (i AzureActiveDirectoryAppArgs) ToAzureActiveDirectoryAppPtrOutput() AzureActiveDirectoryAppPtrOutput {
	return i.ToAzureActiveDirectoryAppPtrOutputWithContext(context.Background())
}

func (i AzureActiveDirectoryAppArgs) ToAzureActiveDirectoryAppPtrOutputWithContext(ctx context.Context) AzureActiveDirectoryAppPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzureActiveDirectoryAppOutput).ToAzureActiveDirectoryAppPtrOutputWithContext(ctx)
}

// AzureActiveDirectoryAppPtrInput is an input type that accepts AzureActiveDirectoryAppArgs, AzureActiveDirectoryAppPtr and AzureActiveDirectoryAppPtrOutput values.
// You can construct a concrete instance of `AzureActiveDirectoryAppPtrInput` via:
//
//          AzureActiveDirectoryAppArgs{...}
//
//  or:
//
//          nil
type AzureActiveDirectoryAppPtrInput interface {
	pulumi.Input

	ToAzureActiveDirectoryAppPtrOutput() AzureActiveDirectoryAppPtrOutput
	ToAzureActiveDirectoryAppPtrOutputWithContext(context.Context) AzureActiveDirectoryAppPtrOutput
}

type azureActiveDirectoryAppPtrType AzureActiveDirectoryAppArgs

func AzureActiveDirectoryAppPtr(v *AzureActiveDirectoryAppArgs) AzureActiveDirectoryAppPtrInput {
	return (*azureActiveDirectoryAppPtrType)(v)
}

func (*azureActiveDirectoryAppPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AzureActiveDirectoryApp)(nil)).Elem()
}

func (i *azureActiveDirectoryAppPtrType) ToAzureActiveDirectoryAppPtrOutput() AzureActiveDirectoryAppPtrOutput {
	return i.ToAzureActiveDirectoryAppPtrOutputWithContext(context.Background())
}

func (i *azureActiveDirectoryAppPtrType) ToAzureActiveDirectoryAppPtrOutputWithContext(ctx context.Context) AzureActiveDirectoryAppPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzureActiveDirectoryAppPtrOutput)
}

// Azure Active Directory Application
type AzureActiveDirectoryAppResponse struct {
	// Key used to authenticate to the Azure Active Directory Application
	AppKey string `pulumi:"appKey"`
	// Application ID of the Azure Active Directory Application
	ApplicationId string `pulumi:"applicationId"`
	// Tenant id of the customer
	TenantId string `pulumi:"tenantId"`
}

// Azure Active Directory Application
type AzureActiveDirectoryAppResponseOutput struct{ *pulumi.OutputState }

func (AzureActiveDirectoryAppResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureActiveDirectoryAppResponse)(nil)).Elem()
}

func (o AzureActiveDirectoryAppResponseOutput) ToAzureActiveDirectoryAppResponseOutput() AzureActiveDirectoryAppResponseOutput {
	return o
}

func (o AzureActiveDirectoryAppResponseOutput) ToAzureActiveDirectoryAppResponseOutputWithContext(ctx context.Context) AzureActiveDirectoryAppResponseOutput {
	return o
}

func (o AzureActiveDirectoryAppResponseOutput) ToAzureActiveDirectoryAppResponsePtrOutput() AzureActiveDirectoryAppResponsePtrOutput {
	return o.ToAzureActiveDirectoryAppResponsePtrOutputWithContext(context.Background())
}

func (o AzureActiveDirectoryAppResponseOutput) ToAzureActiveDirectoryAppResponsePtrOutputWithContext(ctx context.Context) AzureActiveDirectoryAppResponsePtrOutput {
	return o.ApplyT(func(v AzureActiveDirectoryAppResponse) *AzureActiveDirectoryAppResponse {
		return &v
	}).(AzureActiveDirectoryAppResponsePtrOutput)
}

// Key used to authenticate to the Azure Active Directory Application
func (o AzureActiveDirectoryAppResponseOutput) AppKey() pulumi.StringOutput {
	return o.ApplyT(func(v AzureActiveDirectoryAppResponse) string { return v.AppKey }).(pulumi.StringOutput)
}

// Application ID of the Azure Active Directory Application
func (o AzureActiveDirectoryAppResponseOutput) ApplicationId() pulumi.StringOutput {
	return o.ApplyT(func(v AzureActiveDirectoryAppResponse) string { return v.ApplicationId }).(pulumi.StringOutput)
}

// Tenant id of the customer
func (o AzureActiveDirectoryAppResponseOutput) TenantId() pulumi.StringOutput {
	return o.ApplyT(func(v AzureActiveDirectoryAppResponse) string { return v.TenantId }).(pulumi.StringOutput)
}

type AzureActiveDirectoryAppResponsePtrOutput struct{ *pulumi.OutputState }

func (AzureActiveDirectoryAppResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AzureActiveDirectoryAppResponse)(nil)).Elem()
}

func (o AzureActiveDirectoryAppResponsePtrOutput) ToAzureActiveDirectoryAppResponsePtrOutput() AzureActiveDirectoryAppResponsePtrOutput {
	return o
}

func (o AzureActiveDirectoryAppResponsePtrOutput) ToAzureActiveDirectoryAppResponsePtrOutputWithContext(ctx context.Context) AzureActiveDirectoryAppResponsePtrOutput {
	return o
}

func (o AzureActiveDirectoryAppResponsePtrOutput) Elem() AzureActiveDirectoryAppResponseOutput {
	return o.ApplyT(func(v *AzureActiveDirectoryAppResponse) AzureActiveDirectoryAppResponse { return *v }).(AzureActiveDirectoryAppResponseOutput)
}

// Key used to authenticate to the Azure Active Directory Application
func (o AzureActiveDirectoryAppResponsePtrOutput) AppKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AzureActiveDirectoryAppResponse) *string {
		if v == nil {
			return nil
		}
		return &v.AppKey
	}).(pulumi.StringPtrOutput)
}

// Application ID of the Azure Active Directory Application
func (o AzureActiveDirectoryAppResponsePtrOutput) ApplicationId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AzureActiveDirectoryAppResponse) *string {
		if v == nil {
			return nil
		}
		return &v.ApplicationId
	}).(pulumi.StringPtrOutput)
}

// Tenant id of the customer
func (o AzureActiveDirectoryAppResponsePtrOutput) TenantId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AzureActiveDirectoryAppResponse) *string {
		if v == nil {
			return nil
		}
		return &v.TenantId
	}).(pulumi.StringPtrOutput)
}

// Information of the backup file
type BackupFileInfoResponse struct {
	// Sequence number of the backup file in the backup set
	FamilySequenceNumber *int `pulumi:"familySequenceNumber"`
	// Location of the backup file in shared folder
	FileLocation *string `pulumi:"fileLocation"`
	// Status of the backup file during migration
	Status *string `pulumi:"status"`
}

// Information of the backup file
type BackupFileInfoResponseOutput struct{ *pulumi.OutputState }

func (BackupFileInfoResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BackupFileInfoResponse)(nil)).Elem()
}

func (o BackupFileInfoResponseOutput) ToBackupFileInfoResponseOutput() BackupFileInfoResponseOutput {
	return o
}

func (o BackupFileInfoResponseOutput) ToBackupFileInfoResponseOutputWithContext(ctx context.Context) BackupFileInfoResponseOutput {
	return o
}

// Sequence number of the backup file in the backup set
func (o BackupFileInfoResponseOutput) FamilySequenceNumber() pulumi.IntPtrOutput {
	return o.ApplyT(func(v BackupFileInfoResponse) *int { return v.FamilySequenceNumber }).(pulumi.IntPtrOutput)
}

// Location of the backup file in shared folder
func (o BackupFileInfoResponseOutput) FileLocation() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BackupFileInfoResponse) *string { return v.FileLocation }).(pulumi.StringPtrOutput)
}

// Status of the backup file during migration
func (o BackupFileInfoResponseOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BackupFileInfoResponse) *string { return v.Status }).(pulumi.StringPtrOutput)
}

type BackupFileInfoResponseArrayOutput struct{ *pulumi.OutputState }

func (BackupFileInfoResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]BackupFileInfoResponse)(nil)).Elem()
}

func (o BackupFileInfoResponseArrayOutput) ToBackupFileInfoResponseArrayOutput() BackupFileInfoResponseArrayOutput {
	return o
}

func (o BackupFileInfoResponseArrayOutput) ToBackupFileInfoResponseArrayOutputWithContext(ctx context.Context) BackupFileInfoResponseArrayOutput {
	return o
}

func (o BackupFileInfoResponseArrayOutput) Index(i pulumi.IntInput) BackupFileInfoResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) BackupFileInfoResponse {
		return vs[0].([]BackupFileInfoResponse)[vs[1].(int)]
	}).(BackupFileInfoResponseOutput)
}

// Information of backup set
type BackupSetInfoResponse struct {
	// Date and time that the backup operation finished
	BackupFinishedDate *string `pulumi:"backupFinishedDate"`
	// Id for the set of backup files
	BackupSetId *string `pulumi:"backupSetId"`
	// Date and time that the backup operation began
	BackupStartDate *string `pulumi:"backupStartDate"`
	// Enum of the different backup types
	BackupType *string `pulumi:"backupType"`
	// Name of the database to which the backup set belongs
	DatabaseName *string `pulumi:"databaseName"`
	// First log sequence number of the backup file
	FirstLsn *string `pulumi:"firstLsn"`
	// Whether the backup set is restored or not
	IsBackupRestored *bool `pulumi:"isBackupRestored"`
	// Last log sequence number of the backup file
	LastLsn *string `pulumi:"lastLsn"`
	// Last modified time of the backup file in share location
	LastModifiedTime *string `pulumi:"lastModifiedTime"`
	// List of files in the backup set
	ListOfBackupFiles []BackupFileInfoResponse `pulumi:"listOfBackupFiles"`
}

// Information of backup set
type BackupSetInfoResponseOutput struct{ *pulumi.OutputState }

func (BackupSetInfoResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BackupSetInfoResponse)(nil)).Elem()
}

func (o BackupSetInfoResponseOutput) ToBackupSetInfoResponseOutput() BackupSetInfoResponseOutput {
	return o
}

func (o BackupSetInfoResponseOutput) ToBackupSetInfoResponseOutputWithContext(ctx context.Context) BackupSetInfoResponseOutput {
	return o
}

// Date and time that the backup operation finished
func (o BackupSetInfoResponseOutput) BackupFinishedDate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BackupSetInfoResponse) *string { return v.BackupFinishedDate }).(pulumi.StringPtrOutput)
}

// Id for the set of backup files
func (o BackupSetInfoResponseOutput) BackupSetId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BackupSetInfoResponse) *string { return v.BackupSetId }).(pulumi.StringPtrOutput)
}

// Date and time that the backup operation began
func (o BackupSetInfoResponseOutput) BackupStartDate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BackupSetInfoResponse) *string { return v.BackupStartDate }).(pulumi.StringPtrOutput)
}

// Enum of the different backup types
func (o BackupSetInfoResponseOutput) BackupType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BackupSetInfoResponse) *string { return v.BackupType }).(pulumi.StringPtrOutput)
}

// Name of the database to which the backup set belongs
func (o BackupSetInfoResponseOutput) DatabaseName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BackupSetInfoResponse) *string { return v.DatabaseName }).(pulumi.StringPtrOutput)
}

// First log sequence number of the backup file
func (o BackupSetInfoResponseOutput) FirstLsn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BackupSetInfoResponse) *string { return v.FirstLsn }).(pulumi.StringPtrOutput)
}

// Whether the backup set is restored or not
func (o BackupSetInfoResponseOutput) IsBackupRestored() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v BackupSetInfoResponse) *bool { return v.IsBackupRestored }).(pulumi.BoolPtrOutput)
}

// Last log sequence number of the backup file
func (o BackupSetInfoResponseOutput) LastLsn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BackupSetInfoResponse) *string { return v.LastLsn }).(pulumi.StringPtrOutput)
}

// Last modified time of the backup file in share location
func (o BackupSetInfoResponseOutput) LastModifiedTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BackupSetInfoResponse) *string { return v.LastModifiedTime }).(pulumi.StringPtrOutput)
}

// List of files in the backup set
func (o BackupSetInfoResponseOutput) ListOfBackupFiles() BackupFileInfoResponseArrayOutput {
	return o.ApplyT(func(v BackupSetInfoResponse) []BackupFileInfoResponse { return v.ListOfBackupFiles }).(BackupFileInfoResponseArrayOutput)
}

type BackupSetInfoResponseArrayOutput struct{ *pulumi.OutputState }

func (BackupSetInfoResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]BackupSetInfoResponse)(nil)).Elem()
}

func (o BackupSetInfoResponseArrayOutput) ToBackupSetInfoResponseArrayOutput() BackupSetInfoResponseArrayOutput {
	return o
}

func (o BackupSetInfoResponseArrayOutput) ToBackupSetInfoResponseArrayOutputWithContext(ctx context.Context) BackupSetInfoResponseArrayOutput {
	return o
}

func (o BackupSetInfoResponseArrayOutput) Index(i pulumi.IntInput) BackupSetInfoResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) BackupSetInfoResponse {
		return vs[0].([]BackupSetInfoResponse)[vs[1].(int)]
	}).(BackupSetInfoResponseOutput)
}

// Blob container storage information.
type BlobShare struct {
	// SAS URI of Azure Storage Account Container.
	SasUri string `pulumi:"sasUri"`
}

// BlobShareInput is an input type that accepts BlobShareArgs and BlobShareOutput values.
// You can construct a concrete instance of `BlobShareInput` via:
//
//          BlobShareArgs{...}
type BlobShareInput interface {
	pulumi.Input

	ToBlobShareOutput() BlobShareOutput
	ToBlobShareOutputWithContext(context.Context) BlobShareOutput
}

// Blob container storage information.
type BlobShareArgs struct {
	// SAS URI of Azure Storage Account Container.
	SasUri pulumi.StringInput `pulumi:"sasUri"`
}

func (BlobShareArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BlobShare)(nil)).Elem()
}

func (i BlobShareArgs) ToBlobShareOutput() BlobShareOutput {
	return i.ToBlobShareOutputWithContext(context.Background())
}

func (i BlobShareArgs) ToBlobShareOutputWithContext(ctx context.Context) BlobShareOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BlobShareOutput)
}

func (i BlobShareArgs) ToBlobSharePtrOutput() BlobSharePtrOutput {
	return i.ToBlobSharePtrOutputWithContext(context.Background())
}

func (i BlobShareArgs) ToBlobSharePtrOutputWithContext(ctx context.Context) BlobSharePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BlobShareOutput).ToBlobSharePtrOutputWithContext(ctx)
}

// BlobSharePtrInput is an input type that accepts BlobShareArgs, BlobSharePtr and BlobSharePtrOutput values.
// You can construct a concrete instance of `BlobSharePtrInput` via:
//
//          BlobShareArgs{...}
//
//  or:
//
//          nil
type BlobSharePtrInput interface {
	pulumi.Input

	ToBlobSharePtrOutput() BlobSharePtrOutput
	ToBlobSharePtrOutputWithContext(context.Context) BlobSharePtrOutput
}

type blobSharePtrType BlobShareArgs

func BlobSharePtr(v *BlobShareArgs) BlobSharePtrInput {
	return (*blobSharePtrType)(v)
}

func (*blobSharePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**BlobShare)(nil)).Elem()
}

func (i *blobSharePtrType) ToBlobSharePtrOutput() BlobSharePtrOutput {
	return i.ToBlobSharePtrOutputWithContext(context.Background())
}

func (i *blobSharePtrType) ToBlobSharePtrOutputWithContext(ctx context.Context) BlobSharePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BlobSharePtrOutput)
}

// Blob container storage information.
type BlobShareResponse struct {
	// SAS URI of Azure Storage Account Container.
	SasUri string `pulumi:"sasUri"`
}

// Blob container storage information.
type BlobShareResponseOutput struct{ *pulumi.OutputState }

func (BlobShareResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BlobShareResponse)(nil)).Elem()
}

func (o BlobShareResponseOutput) ToBlobShareResponseOutput() BlobShareResponseOutput {
	return o
}

func (o BlobShareResponseOutput) ToBlobShareResponseOutputWithContext(ctx context.Context) BlobShareResponseOutput {
	return o
}

func (o BlobShareResponseOutput) ToBlobShareResponsePtrOutput() BlobShareResponsePtrOutput {
	return o.ToBlobShareResponsePtrOutputWithContext(context.Background())
}

func (o BlobShareResponseOutput) ToBlobShareResponsePtrOutputWithContext(ctx context.Context) BlobShareResponsePtrOutput {
	return o.ApplyT(func(v BlobShareResponse) *BlobShareResponse {
		return &v
	}).(BlobShareResponsePtrOutput)
}

// SAS URI of Azure Storage Account Container.
func (o BlobShareResponseOutput) SasUri() pulumi.StringOutput {
	return o.ApplyT(func(v BlobShareResponse) string { return v.SasUri }).(pulumi.StringOutput)
}

type BlobShareResponsePtrOutput struct{ *pulumi.OutputState }

func (BlobShareResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BlobShareResponse)(nil)).Elem()
}

func (o BlobShareResponsePtrOutput) ToBlobShareResponsePtrOutput() BlobShareResponsePtrOutput {
	return o
}

func (o BlobShareResponsePtrOutput) ToBlobShareResponsePtrOutputWithContext(ctx context.Context) BlobShareResponsePtrOutput {
	return o
}

func (o BlobShareResponsePtrOutput) Elem() BlobShareResponseOutput {
	return o.ApplyT(func(v *BlobShareResponse) BlobShareResponse { return *v }).(BlobShareResponseOutput)
}

// SAS URI of Azure Storage Account Container.
func (o BlobShareResponsePtrOutput) SasUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BlobShareResponse) *string {
		if v == nil {
			return nil
		}
		return &v.SasUri
	}).(pulumi.StringPtrOutput)
}

// Properties for the task that validates the connection to and provides information about a MongoDB server
type ConnectToMongoDbTaskProperties struct {
	// Key value pairs of client data to attach meta data information to task
	ClientData map[string]string `pulumi:"clientData"`
	// Describes a connection to a MongoDB data source
	Input *MongoDbConnectionInfo `pulumi:"input"`
	// Task type.
	TaskType string `pulumi:"taskType"`
}

// ConnectToMongoDbTaskPropertiesInput is an input type that accepts ConnectToMongoDbTaskPropertiesArgs and ConnectToMongoDbTaskPropertiesOutput values.
// You can construct a concrete instance of `ConnectToMongoDbTaskPropertiesInput` via:
//
//          ConnectToMongoDbTaskPropertiesArgs{...}
type ConnectToMongoDbTaskPropertiesInput interface {
	pulumi.Input

	ToConnectToMongoDbTaskPropertiesOutput() ConnectToMongoDbTaskPropertiesOutput
	ToConnectToMongoDbTaskPropertiesOutputWithContext(context.Context) ConnectToMongoDbTaskPropertiesOutput
}

// Properties for the task that validates the connection to and provides information about a MongoDB server
type ConnectToMongoDbTaskPropertiesArgs struct {
	// Key value pairs of client data to attach meta data information to task
	ClientData pulumi.StringMapInput `pulumi:"clientData"`
	// Describes a connection to a MongoDB data source
	Input MongoDbConnectionInfoPtrInput `pulumi:"input"`
	// Task type.
	TaskType pulumi.StringInput `pulumi:"taskType"`
}

func (ConnectToMongoDbTaskPropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectToMongoDbTaskProperties)(nil)).Elem()
}

func (i ConnectToMongoDbTaskPropertiesArgs) ToConnectToMongoDbTaskPropertiesOutput() ConnectToMongoDbTaskPropertiesOutput {
	return i.ToConnectToMongoDbTaskPropertiesOutputWithContext(context.Background())
}

func (i ConnectToMongoDbTaskPropertiesArgs) ToConnectToMongoDbTaskPropertiesOutputWithContext(ctx context.Context) ConnectToMongoDbTaskPropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectToMongoDbTaskPropertiesOutput)
}

// Properties for the task that validates the connection to and provides information about a MongoDB server
type ConnectToMongoDbTaskPropertiesResponse struct {
	// Key value pairs of client data to attach meta data information to task
	ClientData map[string]string `pulumi:"clientData"`
	// Array of command properties.
	Commands []interface{} `pulumi:"commands"`
	// Array of errors. This is ignored if submitted.
	Errors []ODataErrorResponse `pulumi:"errors"`
	// Describes a connection to a MongoDB data source
	Input *MongoDbConnectionInfoResponse `pulumi:"input"`
	// An array containing a single MongoDbClusterInfo object
	Output []MongoDbClusterInfoResponse `pulumi:"output"`
	// The state of the task. This is ignored if submitted.
	State string `pulumi:"state"`
	// Task type.
	TaskType string `pulumi:"taskType"`
}

// Properties for the task that validates the connection to and provides information about a MongoDB server
type ConnectToMongoDbTaskPropertiesResponseOutput struct{ *pulumi.OutputState }

func (ConnectToMongoDbTaskPropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectToMongoDbTaskPropertiesResponse)(nil)).Elem()
}

func (o ConnectToMongoDbTaskPropertiesResponseOutput) ToConnectToMongoDbTaskPropertiesResponseOutput() ConnectToMongoDbTaskPropertiesResponseOutput {
	return o
}

func (o ConnectToMongoDbTaskPropertiesResponseOutput) ToConnectToMongoDbTaskPropertiesResponseOutputWithContext(ctx context.Context) ConnectToMongoDbTaskPropertiesResponseOutput {
	return o
}

// Key value pairs of client data to attach meta data information to task
func (o ConnectToMongoDbTaskPropertiesResponseOutput) ClientData() pulumi.StringMapOutput {
	return o.ApplyT(func(v ConnectToMongoDbTaskPropertiesResponse) map[string]string { return v.ClientData }).(pulumi.StringMapOutput)
}

// Array of command properties.
func (o ConnectToMongoDbTaskPropertiesResponseOutput) Commands() pulumi.ArrayOutput {
	return o.ApplyT(func(v ConnectToMongoDbTaskPropertiesResponse) []interface{} { return v.Commands }).(pulumi.ArrayOutput)
}

// Array of errors. This is ignored if submitted.
func (o ConnectToMongoDbTaskPropertiesResponseOutput) Errors() ODataErrorResponseArrayOutput {
	return o.ApplyT(func(v ConnectToMongoDbTaskPropertiesResponse) []ODataErrorResponse { return v.Errors }).(ODataErrorResponseArrayOutput)
}

// Describes a connection to a MongoDB data source
func (o ConnectToMongoDbTaskPropertiesResponseOutput) Input() MongoDbConnectionInfoResponsePtrOutput {
	return o.ApplyT(func(v ConnectToMongoDbTaskPropertiesResponse) *MongoDbConnectionInfoResponse { return v.Input }).(MongoDbConnectionInfoResponsePtrOutput)
}

// An array containing a single MongoDbClusterInfo object
func (o ConnectToMongoDbTaskPropertiesResponseOutput) Output() MongoDbClusterInfoResponseArrayOutput {
	return o.ApplyT(func(v ConnectToMongoDbTaskPropertiesResponse) []MongoDbClusterInfoResponse { return v.Output }).(MongoDbClusterInfoResponseArrayOutput)
}

// The state of the task. This is ignored if submitted.
func (o ConnectToMongoDbTaskPropertiesResponseOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectToMongoDbTaskPropertiesResponse) string { return v.State }).(pulumi.StringOutput)
}

// Task type.
func (o ConnectToMongoDbTaskPropertiesResponseOutput) TaskType() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectToMongoDbTaskPropertiesResponse) string { return v.TaskType }).(pulumi.StringOutput)
}

// Input for the task that validates Oracle database connection
type ConnectToSourceOracleSyncTaskInput struct {
	// Information for connecting to Oracle source
	SourceConnectionInfo OracleConnectionInfo `pulumi:"sourceConnectionInfo"`
}

// ConnectToSourceOracleSyncTaskInputInput is an input type that accepts ConnectToSourceOracleSyncTaskInputArgs and ConnectToSourceOracleSyncTaskInputOutput values.
// You can construct a concrete instance of `ConnectToSourceOracleSyncTaskInputInput` via:
//
//          ConnectToSourceOracleSyncTaskInputArgs{...}
type ConnectToSourceOracleSyncTaskInputInput interface {
	pulumi.Input

	ToConnectToSourceOracleSyncTaskInputOutput() ConnectToSourceOracleSyncTaskInputOutput
	ToConnectToSourceOracleSyncTaskInputOutputWithContext(context.Context) ConnectToSourceOracleSyncTaskInputOutput
}

// Input for the task that validates Oracle database connection
type ConnectToSourceOracleSyncTaskInputArgs struct {
	// Information for connecting to Oracle source
	SourceConnectionInfo OracleConnectionInfoInput `pulumi:"sourceConnectionInfo"`
}

func (ConnectToSourceOracleSyncTaskInputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectToSourceOracleSyncTaskInput)(nil)).Elem()
}

func (i ConnectToSourceOracleSyncTaskInputArgs) ToConnectToSourceOracleSyncTaskInputOutput() ConnectToSourceOracleSyncTaskInputOutput {
	return i.ToConnectToSourceOracleSyncTaskInputOutputWithContext(context.Background())
}

func (i ConnectToSourceOracleSyncTaskInputArgs) ToConnectToSourceOracleSyncTaskInputOutputWithContext(ctx context.Context) ConnectToSourceOracleSyncTaskInputOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectToSourceOracleSyncTaskInputOutput)
}

func (i ConnectToSourceOracleSyncTaskInputArgs) ToConnectToSourceOracleSyncTaskInputPtrOutput() ConnectToSourceOracleSyncTaskInputPtrOutput {
	return i.ToConnectToSourceOracleSyncTaskInputPtrOutputWithContext(context.Background())
}

func (i ConnectToSourceOracleSyncTaskInputArgs) ToConnectToSourceOracleSyncTaskInputPtrOutputWithContext(ctx context.Context) ConnectToSourceOracleSyncTaskInputPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectToSourceOracleSyncTaskInputOutput).ToConnectToSourceOracleSyncTaskInputPtrOutputWithContext(ctx)
}

// ConnectToSourceOracleSyncTaskInputPtrInput is an input type that accepts ConnectToSourceOracleSyncTaskInputArgs, ConnectToSourceOracleSyncTaskInputPtr and ConnectToSourceOracleSyncTaskInputPtrOutput values.
// You can construct a concrete instance of `ConnectToSourceOracleSyncTaskInputPtrInput` via:
//
//          ConnectToSourceOracleSyncTaskInputArgs{...}
//
//  or:
//
//          nil
type ConnectToSourceOracleSyncTaskInputPtrInput interface {
	pulumi.Input

	ToConnectToSourceOracleSyncTaskInputPtrOutput() ConnectToSourceOracleSyncTaskInputPtrOutput
	ToConnectToSourceOracleSyncTaskInputPtrOutputWithContext(context.Context) ConnectToSourceOracleSyncTaskInputPtrOutput
}

type connectToSourceOracleSyncTaskInputPtrType ConnectToSourceOracleSyncTaskInputArgs

func ConnectToSourceOracleSyncTaskInputPtr(v *ConnectToSourceOracleSyncTaskInputArgs) ConnectToSourceOracleSyncTaskInputPtrInput {
	return (*connectToSourceOracleSyncTaskInputPtrType)(v)
}

func (*connectToSourceOracleSyncTaskInputPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ConnectToSourceOracleSyncTaskInput)(nil)).Elem()
}

func (i *connectToSourceOracleSyncTaskInputPtrType) ToConnectToSourceOracleSyncTaskInputPtrOutput() ConnectToSourceOracleSyncTaskInputPtrOutput {
	return i.ToConnectToSourceOracleSyncTaskInputPtrOutputWithContext(context.Background())
}

func (i *connectToSourceOracleSyncTaskInputPtrType) ToConnectToSourceOracleSyncTaskInputPtrOutputWithContext(ctx context.Context) ConnectToSourceOracleSyncTaskInputPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectToSourceOracleSyncTaskInputPtrOutput)
}

// Input for the task that validates Oracle database connection
type ConnectToSourceOracleSyncTaskInputResponse struct {
	// Information for connecting to Oracle source
	SourceConnectionInfo OracleConnectionInfoResponse `pulumi:"sourceConnectionInfo"`
}

// Input for the task that validates Oracle database connection
type ConnectToSourceOracleSyncTaskInputResponseOutput struct{ *pulumi.OutputState }

func (ConnectToSourceOracleSyncTaskInputResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectToSourceOracleSyncTaskInputResponse)(nil)).Elem()
}

func (o ConnectToSourceOracleSyncTaskInputResponseOutput) ToConnectToSourceOracleSyncTaskInputResponseOutput() ConnectToSourceOracleSyncTaskInputResponseOutput {
	return o
}

func (o ConnectToSourceOracleSyncTaskInputResponseOutput) ToConnectToSourceOracleSyncTaskInputResponseOutputWithContext(ctx context.Context) ConnectToSourceOracleSyncTaskInputResponseOutput {
	return o
}

func (o ConnectToSourceOracleSyncTaskInputResponseOutput) ToConnectToSourceOracleSyncTaskInputResponsePtrOutput() ConnectToSourceOracleSyncTaskInputResponsePtrOutput {
	return o.ToConnectToSourceOracleSyncTaskInputResponsePtrOutputWithContext(context.Background())
}

func (o ConnectToSourceOracleSyncTaskInputResponseOutput) ToConnectToSourceOracleSyncTaskInputResponsePtrOutputWithContext(ctx context.Context) ConnectToSourceOracleSyncTaskInputResponsePtrOutput {
	return o.ApplyT(func(v ConnectToSourceOracleSyncTaskInputResponse) *ConnectToSourceOracleSyncTaskInputResponse {
		return &v
	}).(ConnectToSourceOracleSyncTaskInputResponsePtrOutput)
}

// Information for connecting to Oracle source
func (o ConnectToSourceOracleSyncTaskInputResponseOutput) SourceConnectionInfo() OracleConnectionInfoResponseOutput {
	return o.ApplyT(func(v ConnectToSourceOracleSyncTaskInputResponse) OracleConnectionInfoResponse {
		return v.SourceConnectionInfo
	}).(OracleConnectionInfoResponseOutput)
}

type ConnectToSourceOracleSyncTaskInputResponsePtrOutput struct{ *pulumi.OutputState }

func (ConnectToSourceOracleSyncTaskInputResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ConnectToSourceOracleSyncTaskInputResponse)(nil)).Elem()
}

func (o ConnectToSourceOracleSyncTaskInputResponsePtrOutput) ToConnectToSourceOracleSyncTaskInputResponsePtrOutput() ConnectToSourceOracleSyncTaskInputResponsePtrOutput {
	return o
}

func (o ConnectToSourceOracleSyncTaskInputResponsePtrOutput) ToConnectToSourceOracleSyncTaskInputResponsePtrOutputWithContext(ctx context.Context) ConnectToSourceOracleSyncTaskInputResponsePtrOutput {
	return o
}

func (o ConnectToSourceOracleSyncTaskInputResponsePtrOutput) Elem() ConnectToSourceOracleSyncTaskInputResponseOutput {
	return o.ApplyT(func(v *ConnectToSourceOracleSyncTaskInputResponse) ConnectToSourceOracleSyncTaskInputResponse {
		return *v
	}).(ConnectToSourceOracleSyncTaskInputResponseOutput)
}

// Information for connecting to Oracle source
func (o ConnectToSourceOracleSyncTaskInputResponsePtrOutput) SourceConnectionInfo() OracleConnectionInfoResponsePtrOutput {
	return o.ApplyT(func(v *ConnectToSourceOracleSyncTaskInputResponse) *OracleConnectionInfoResponse {
		if v == nil {
			return nil
		}
		return &v.SourceConnectionInfo
	}).(OracleConnectionInfoResponsePtrOutput)
}

// Output for the task that validates Oracle database connection
type ConnectToSourceOracleSyncTaskOutputResponse struct {
	// List of schemas on source server
	Databases []string `pulumi:"databases"`
	// Source server brand version
	SourceServerBrandVersion string `pulumi:"sourceServerBrandVersion"`
	// Version of the source server
	SourceServerVersion string `pulumi:"sourceServerVersion"`
	// Validation errors associated with the task
	ValidationErrors []ReportableExceptionResponse `pulumi:"validationErrors"`
}

// Output for the task that validates Oracle database connection
type ConnectToSourceOracleSyncTaskOutputResponseOutput struct{ *pulumi.OutputState }

func (ConnectToSourceOracleSyncTaskOutputResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectToSourceOracleSyncTaskOutputResponse)(nil)).Elem()
}

func (o ConnectToSourceOracleSyncTaskOutputResponseOutput) ToConnectToSourceOracleSyncTaskOutputResponseOutput() ConnectToSourceOracleSyncTaskOutputResponseOutput {
	return o
}

func (o ConnectToSourceOracleSyncTaskOutputResponseOutput) ToConnectToSourceOracleSyncTaskOutputResponseOutputWithContext(ctx context.Context) ConnectToSourceOracleSyncTaskOutputResponseOutput {
	return o
}

// List of schemas on source server
func (o ConnectToSourceOracleSyncTaskOutputResponseOutput) Databases() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ConnectToSourceOracleSyncTaskOutputResponse) []string { return v.Databases }).(pulumi.StringArrayOutput)
}

// Source server brand version
func (o ConnectToSourceOracleSyncTaskOutputResponseOutput) SourceServerBrandVersion() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectToSourceOracleSyncTaskOutputResponse) string { return v.SourceServerBrandVersion }).(pulumi.StringOutput)
}

// Version of the source server
func (o ConnectToSourceOracleSyncTaskOutputResponseOutput) SourceServerVersion() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectToSourceOracleSyncTaskOutputResponse) string { return v.SourceServerVersion }).(pulumi.StringOutput)
}

// Validation errors associated with the task
func (o ConnectToSourceOracleSyncTaskOutputResponseOutput) ValidationErrors() ReportableExceptionResponseArrayOutput {
	return o.ApplyT(func(v ConnectToSourceOracleSyncTaskOutputResponse) []ReportableExceptionResponse {
		return v.ValidationErrors
	}).(ReportableExceptionResponseArrayOutput)
}

type ConnectToSourceOracleSyncTaskOutputResponseArrayOutput struct{ *pulumi.OutputState }

func (ConnectToSourceOracleSyncTaskOutputResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ConnectToSourceOracleSyncTaskOutputResponse)(nil)).Elem()
}

func (o ConnectToSourceOracleSyncTaskOutputResponseArrayOutput) ToConnectToSourceOracleSyncTaskOutputResponseArrayOutput() ConnectToSourceOracleSyncTaskOutputResponseArrayOutput {
	return o
}

func (o ConnectToSourceOracleSyncTaskOutputResponseArrayOutput) ToConnectToSourceOracleSyncTaskOutputResponseArrayOutputWithContext(ctx context.Context) ConnectToSourceOracleSyncTaskOutputResponseArrayOutput {
	return o
}

func (o ConnectToSourceOracleSyncTaskOutputResponseArrayOutput) Index(i pulumi.IntInput) ConnectToSourceOracleSyncTaskOutputResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ConnectToSourceOracleSyncTaskOutputResponse {
		return vs[0].([]ConnectToSourceOracleSyncTaskOutputResponse)[vs[1].(int)]
	}).(ConnectToSourceOracleSyncTaskOutputResponseOutput)
}

// Properties for the task that validates Oracle database connection
type ConnectToSourceOracleSyncTaskProperties struct {
	// Key value pairs of client data to attach meta data information to task
	ClientData map[string]string `pulumi:"clientData"`
	// Task input
	Input *ConnectToSourceOracleSyncTaskInput `pulumi:"input"`
	// Task type.
	TaskType string `pulumi:"taskType"`
}

// ConnectToSourceOracleSyncTaskPropertiesInput is an input type that accepts ConnectToSourceOracleSyncTaskPropertiesArgs and ConnectToSourceOracleSyncTaskPropertiesOutput values.
// You can construct a concrete instance of `ConnectToSourceOracleSyncTaskPropertiesInput` via:
//
//          ConnectToSourceOracleSyncTaskPropertiesArgs{...}
type ConnectToSourceOracleSyncTaskPropertiesInput interface {
	pulumi.Input

	ToConnectToSourceOracleSyncTaskPropertiesOutput() ConnectToSourceOracleSyncTaskPropertiesOutput
	ToConnectToSourceOracleSyncTaskPropertiesOutputWithContext(context.Context) ConnectToSourceOracleSyncTaskPropertiesOutput
}

// Properties for the task that validates Oracle database connection
type ConnectToSourceOracleSyncTaskPropertiesArgs struct {
	// Key value pairs of client data to attach meta data information to task
	ClientData pulumi.StringMapInput `pulumi:"clientData"`
	// Task input
	Input ConnectToSourceOracleSyncTaskInputPtrInput `pulumi:"input"`
	// Task type.
	TaskType pulumi.StringInput `pulumi:"taskType"`
}

func (ConnectToSourceOracleSyncTaskPropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectToSourceOracleSyncTaskProperties)(nil)).Elem()
}

func (i ConnectToSourceOracleSyncTaskPropertiesArgs) ToConnectToSourceOracleSyncTaskPropertiesOutput() ConnectToSourceOracleSyncTaskPropertiesOutput {
	return i.ToConnectToSourceOracleSyncTaskPropertiesOutputWithContext(context.Background())
}

func (i ConnectToSourceOracleSyncTaskPropertiesArgs) ToConnectToSourceOracleSyncTaskPropertiesOutputWithContext(ctx context.Context) ConnectToSourceOracleSyncTaskPropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectToSourceOracleSyncTaskPropertiesOutput)
}

// Properties for the task that validates Oracle database connection
type ConnectToSourceOracleSyncTaskPropertiesResponse struct {
	// Key value pairs of client data to attach meta data information to task
	ClientData map[string]string `pulumi:"clientData"`
	// Array of command properties.
	Commands []interface{} `pulumi:"commands"`
	// Array of errors. This is ignored if submitted.
	Errors []ODataErrorResponse `pulumi:"errors"`
	// Task input
	Input *ConnectToSourceOracleSyncTaskInputResponse `pulumi:"input"`
	// Task output. This is ignored if submitted.
	Output []ConnectToSourceOracleSyncTaskOutputResponse `pulumi:"output"`
	// The state of the task. This is ignored if submitted.
	State string `pulumi:"state"`
	// Task type.
	TaskType string `pulumi:"taskType"`
}

// Properties for the task that validates Oracle database connection
type ConnectToSourceOracleSyncTaskPropertiesResponseOutput struct{ *pulumi.OutputState }

func (ConnectToSourceOracleSyncTaskPropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectToSourceOracleSyncTaskPropertiesResponse)(nil)).Elem()
}

func (o ConnectToSourceOracleSyncTaskPropertiesResponseOutput) ToConnectToSourceOracleSyncTaskPropertiesResponseOutput() ConnectToSourceOracleSyncTaskPropertiesResponseOutput {
	return o
}

func (o ConnectToSourceOracleSyncTaskPropertiesResponseOutput) ToConnectToSourceOracleSyncTaskPropertiesResponseOutputWithContext(ctx context.Context) ConnectToSourceOracleSyncTaskPropertiesResponseOutput {
	return o
}

// Key value pairs of client data to attach meta data information to task
func (o ConnectToSourceOracleSyncTaskPropertiesResponseOutput) ClientData() pulumi.StringMapOutput {
	return o.ApplyT(func(v ConnectToSourceOracleSyncTaskPropertiesResponse) map[string]string { return v.ClientData }).(pulumi.StringMapOutput)
}

// Array of command properties.
func (o ConnectToSourceOracleSyncTaskPropertiesResponseOutput) Commands() pulumi.ArrayOutput {
	return o.ApplyT(func(v ConnectToSourceOracleSyncTaskPropertiesResponse) []interface{} { return v.Commands }).(pulumi.ArrayOutput)
}

// Array of errors. This is ignored if submitted.
func (o ConnectToSourceOracleSyncTaskPropertiesResponseOutput) Errors() ODataErrorResponseArrayOutput {
	return o.ApplyT(func(v ConnectToSourceOracleSyncTaskPropertiesResponse) []ODataErrorResponse { return v.Errors }).(ODataErrorResponseArrayOutput)
}

// Task input
func (o ConnectToSourceOracleSyncTaskPropertiesResponseOutput) Input() ConnectToSourceOracleSyncTaskInputResponsePtrOutput {
	return o.ApplyT(func(v ConnectToSourceOracleSyncTaskPropertiesResponse) *ConnectToSourceOracleSyncTaskInputResponse {
		return v.Input
	}).(ConnectToSourceOracleSyncTaskInputResponsePtrOutput)
}

// Task output. This is ignored if submitted.
func (o ConnectToSourceOracleSyncTaskPropertiesResponseOutput) Output() ConnectToSourceOracleSyncTaskOutputResponseArrayOutput {
	return o.ApplyT(func(v ConnectToSourceOracleSyncTaskPropertiesResponse) []ConnectToSourceOracleSyncTaskOutputResponse {
		return v.Output
	}).(ConnectToSourceOracleSyncTaskOutputResponseArrayOutput)
}

// The state of the task. This is ignored if submitted.
func (o ConnectToSourceOracleSyncTaskPropertiesResponseOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectToSourceOracleSyncTaskPropertiesResponse) string { return v.State }).(pulumi.StringOutput)
}

// Task type.
func (o ConnectToSourceOracleSyncTaskPropertiesResponseOutput) TaskType() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectToSourceOracleSyncTaskPropertiesResponse) string { return v.TaskType }).(pulumi.StringOutput)
}

// Input for the task that validates connection to PostgreSQL and source server requirements
type ConnectToSourcePostgreSqlSyncTaskInput struct {
	// Connection information for source PostgreSQL server
	SourceConnectionInfo PostgreSqlConnectionInfo `pulumi:"sourceConnectionInfo"`
}

// ConnectToSourcePostgreSqlSyncTaskInputInput is an input type that accepts ConnectToSourcePostgreSqlSyncTaskInputArgs and ConnectToSourcePostgreSqlSyncTaskInputOutput values.
// You can construct a concrete instance of `ConnectToSourcePostgreSqlSyncTaskInputInput` via:
//
//          ConnectToSourcePostgreSqlSyncTaskInputArgs{...}
type ConnectToSourcePostgreSqlSyncTaskInputInput interface {
	pulumi.Input

	ToConnectToSourcePostgreSqlSyncTaskInputOutput() ConnectToSourcePostgreSqlSyncTaskInputOutput
	ToConnectToSourcePostgreSqlSyncTaskInputOutputWithContext(context.Context) ConnectToSourcePostgreSqlSyncTaskInputOutput
}

// Input for the task that validates connection to PostgreSQL and source server requirements
type ConnectToSourcePostgreSqlSyncTaskInputArgs struct {
	// Connection information for source PostgreSQL server
	SourceConnectionInfo PostgreSqlConnectionInfoInput `pulumi:"sourceConnectionInfo"`
}

func (ConnectToSourcePostgreSqlSyncTaskInputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectToSourcePostgreSqlSyncTaskInput)(nil)).Elem()
}

func (i ConnectToSourcePostgreSqlSyncTaskInputArgs) ToConnectToSourcePostgreSqlSyncTaskInputOutput() ConnectToSourcePostgreSqlSyncTaskInputOutput {
	return i.ToConnectToSourcePostgreSqlSyncTaskInputOutputWithContext(context.Background())
}

func (i ConnectToSourcePostgreSqlSyncTaskInputArgs) ToConnectToSourcePostgreSqlSyncTaskInputOutputWithContext(ctx context.Context) ConnectToSourcePostgreSqlSyncTaskInputOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectToSourcePostgreSqlSyncTaskInputOutput)
}

func (i ConnectToSourcePostgreSqlSyncTaskInputArgs) ToConnectToSourcePostgreSqlSyncTaskInputPtrOutput() ConnectToSourcePostgreSqlSyncTaskInputPtrOutput {
	return i.ToConnectToSourcePostgreSqlSyncTaskInputPtrOutputWithContext(context.Background())
}

func (i ConnectToSourcePostgreSqlSyncTaskInputArgs) ToConnectToSourcePostgreSqlSyncTaskInputPtrOutputWithContext(ctx context.Context) ConnectToSourcePostgreSqlSyncTaskInputPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectToSourcePostgreSqlSyncTaskInputOutput).ToConnectToSourcePostgreSqlSyncTaskInputPtrOutputWithContext(ctx)
}

// ConnectToSourcePostgreSqlSyncTaskInputPtrInput is an input type that accepts ConnectToSourcePostgreSqlSyncTaskInputArgs, ConnectToSourcePostgreSqlSyncTaskInputPtr and ConnectToSourcePostgreSqlSyncTaskInputPtrOutput values.
// You can construct a concrete instance of `ConnectToSourcePostgreSqlSyncTaskInputPtrInput` via:
//
//          ConnectToSourcePostgreSqlSyncTaskInputArgs{...}
//
//  or:
//
//          nil
type ConnectToSourcePostgreSqlSyncTaskInputPtrInput interface {
	pulumi.Input

	ToConnectToSourcePostgreSqlSyncTaskInputPtrOutput() ConnectToSourcePostgreSqlSyncTaskInputPtrOutput
	ToConnectToSourcePostgreSqlSyncTaskInputPtrOutputWithContext(context.Context) ConnectToSourcePostgreSqlSyncTaskInputPtrOutput
}

type connectToSourcePostgreSqlSyncTaskInputPtrType ConnectToSourcePostgreSqlSyncTaskInputArgs

func ConnectToSourcePostgreSqlSyncTaskInputPtr(v *ConnectToSourcePostgreSqlSyncTaskInputArgs) ConnectToSourcePostgreSqlSyncTaskInputPtrInput {
	return (*connectToSourcePostgreSqlSyncTaskInputPtrType)(v)
}

func (*connectToSourcePostgreSqlSyncTaskInputPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ConnectToSourcePostgreSqlSyncTaskInput)(nil)).Elem()
}

func (i *connectToSourcePostgreSqlSyncTaskInputPtrType) ToConnectToSourcePostgreSqlSyncTaskInputPtrOutput() ConnectToSourcePostgreSqlSyncTaskInputPtrOutput {
	return i.ToConnectToSourcePostgreSqlSyncTaskInputPtrOutputWithContext(context.Background())
}

func (i *connectToSourcePostgreSqlSyncTaskInputPtrType) ToConnectToSourcePostgreSqlSyncTaskInputPtrOutputWithContext(ctx context.Context) ConnectToSourcePostgreSqlSyncTaskInputPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectToSourcePostgreSqlSyncTaskInputPtrOutput)
}

// Input for the task that validates connection to PostgreSQL and source server requirements
type ConnectToSourcePostgreSqlSyncTaskInputResponse struct {
	// Connection information for source PostgreSQL server
	SourceConnectionInfo PostgreSqlConnectionInfoResponse `pulumi:"sourceConnectionInfo"`
}

// Input for the task that validates connection to PostgreSQL and source server requirements
type ConnectToSourcePostgreSqlSyncTaskInputResponseOutput struct{ *pulumi.OutputState }

func (ConnectToSourcePostgreSqlSyncTaskInputResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectToSourcePostgreSqlSyncTaskInputResponse)(nil)).Elem()
}

func (o ConnectToSourcePostgreSqlSyncTaskInputResponseOutput) ToConnectToSourcePostgreSqlSyncTaskInputResponseOutput() ConnectToSourcePostgreSqlSyncTaskInputResponseOutput {
	return o
}

func (o ConnectToSourcePostgreSqlSyncTaskInputResponseOutput) ToConnectToSourcePostgreSqlSyncTaskInputResponseOutputWithContext(ctx context.Context) ConnectToSourcePostgreSqlSyncTaskInputResponseOutput {
	return o
}

func (o ConnectToSourcePostgreSqlSyncTaskInputResponseOutput) ToConnectToSourcePostgreSqlSyncTaskInputResponsePtrOutput() ConnectToSourcePostgreSqlSyncTaskInputResponsePtrOutput {
	return o.ToConnectToSourcePostgreSqlSyncTaskInputResponsePtrOutputWithContext(context.Background())
}

func (o ConnectToSourcePostgreSqlSyncTaskInputResponseOutput) ToConnectToSourcePostgreSqlSyncTaskInputResponsePtrOutputWithContext(ctx context.Context) ConnectToSourcePostgreSqlSyncTaskInputResponsePtrOutput {
	return o.ApplyT(func(v ConnectToSourcePostgreSqlSyncTaskInputResponse) *ConnectToSourcePostgreSqlSyncTaskInputResponse {
		return &v
	}).(ConnectToSourcePostgreSqlSyncTaskInputResponsePtrOutput)
}

// Connection information for source PostgreSQL server
func (o ConnectToSourcePostgreSqlSyncTaskInputResponseOutput) SourceConnectionInfo() PostgreSqlConnectionInfoResponseOutput {
	return o.ApplyT(func(v ConnectToSourcePostgreSqlSyncTaskInputResponse) PostgreSqlConnectionInfoResponse {
		return v.SourceConnectionInfo
	}).(PostgreSqlConnectionInfoResponseOutput)
}

type ConnectToSourcePostgreSqlSyncTaskInputResponsePtrOutput struct{ *pulumi.OutputState }

func (ConnectToSourcePostgreSqlSyncTaskInputResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ConnectToSourcePostgreSqlSyncTaskInputResponse)(nil)).Elem()
}

func (o ConnectToSourcePostgreSqlSyncTaskInputResponsePtrOutput) ToConnectToSourcePostgreSqlSyncTaskInputResponsePtrOutput() ConnectToSourcePostgreSqlSyncTaskInputResponsePtrOutput {
	return o
}

func (o ConnectToSourcePostgreSqlSyncTaskInputResponsePtrOutput) ToConnectToSourcePostgreSqlSyncTaskInputResponsePtrOutputWithContext(ctx context.Context) ConnectToSourcePostgreSqlSyncTaskInputResponsePtrOutput {
	return o
}

func (o ConnectToSourcePostgreSqlSyncTaskInputResponsePtrOutput) Elem() ConnectToSourcePostgreSqlSyncTaskInputResponseOutput {
	return o.ApplyT(func(v *ConnectToSourcePostgreSqlSyncTaskInputResponse) ConnectToSourcePostgreSqlSyncTaskInputResponse {
		return *v
	}).(ConnectToSourcePostgreSqlSyncTaskInputResponseOutput)
}

// Connection information for source PostgreSQL server
func (o ConnectToSourcePostgreSqlSyncTaskInputResponsePtrOutput) SourceConnectionInfo() PostgreSqlConnectionInfoResponsePtrOutput {
	return o.ApplyT(func(v *ConnectToSourcePostgreSqlSyncTaskInputResponse) *PostgreSqlConnectionInfoResponse {
		if v == nil {
			return nil
		}
		return &v.SourceConnectionInfo
	}).(PostgreSqlConnectionInfoResponsePtrOutput)
}

// Output for the task that validates connection to PostgreSQL and source server requirements
type ConnectToSourcePostgreSqlSyncTaskOutputResponse struct {
	// List of databases on source server
	Databases []string `pulumi:"databases"`
	// Result identifier
	Id string `pulumi:"id"`
	// Source server brand version
	SourceServerBrandVersion string `pulumi:"sourceServerBrandVersion"`
	// Version of the source server
	SourceServerVersion string `pulumi:"sourceServerVersion"`
	// Validation errors associated with the task
	ValidationErrors []ReportableExceptionResponse `pulumi:"validationErrors"`
}

// Output for the task that validates connection to PostgreSQL and source server requirements
type ConnectToSourcePostgreSqlSyncTaskOutputResponseOutput struct{ *pulumi.OutputState }

func (ConnectToSourcePostgreSqlSyncTaskOutputResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectToSourcePostgreSqlSyncTaskOutputResponse)(nil)).Elem()
}

func (o ConnectToSourcePostgreSqlSyncTaskOutputResponseOutput) ToConnectToSourcePostgreSqlSyncTaskOutputResponseOutput() ConnectToSourcePostgreSqlSyncTaskOutputResponseOutput {
	return o
}

func (o ConnectToSourcePostgreSqlSyncTaskOutputResponseOutput) ToConnectToSourcePostgreSqlSyncTaskOutputResponseOutputWithContext(ctx context.Context) ConnectToSourcePostgreSqlSyncTaskOutputResponseOutput {
	return o
}

// List of databases on source server
func (o ConnectToSourcePostgreSqlSyncTaskOutputResponseOutput) Databases() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ConnectToSourcePostgreSqlSyncTaskOutputResponse) []string { return v.Databases }).(pulumi.StringArrayOutput)
}

// Result identifier
func (o ConnectToSourcePostgreSqlSyncTaskOutputResponseOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectToSourcePostgreSqlSyncTaskOutputResponse) string { return v.Id }).(pulumi.StringOutput)
}

// Source server brand version
func (o ConnectToSourcePostgreSqlSyncTaskOutputResponseOutput) SourceServerBrandVersion() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectToSourcePostgreSqlSyncTaskOutputResponse) string { return v.SourceServerBrandVersion }).(pulumi.StringOutput)
}

// Version of the source server
func (o ConnectToSourcePostgreSqlSyncTaskOutputResponseOutput) SourceServerVersion() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectToSourcePostgreSqlSyncTaskOutputResponse) string { return v.SourceServerVersion }).(pulumi.StringOutput)
}

// Validation errors associated with the task
func (o ConnectToSourcePostgreSqlSyncTaskOutputResponseOutput) ValidationErrors() ReportableExceptionResponseArrayOutput {
	return o.ApplyT(func(v ConnectToSourcePostgreSqlSyncTaskOutputResponse) []ReportableExceptionResponse {
		return v.ValidationErrors
	}).(ReportableExceptionResponseArrayOutput)
}

type ConnectToSourcePostgreSqlSyncTaskOutputResponseArrayOutput struct{ *pulumi.OutputState }

func (ConnectToSourcePostgreSqlSyncTaskOutputResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ConnectToSourcePostgreSqlSyncTaskOutputResponse)(nil)).Elem()
}

func (o ConnectToSourcePostgreSqlSyncTaskOutputResponseArrayOutput) ToConnectToSourcePostgreSqlSyncTaskOutputResponseArrayOutput() ConnectToSourcePostgreSqlSyncTaskOutputResponseArrayOutput {
	return o
}

func (o ConnectToSourcePostgreSqlSyncTaskOutputResponseArrayOutput) ToConnectToSourcePostgreSqlSyncTaskOutputResponseArrayOutputWithContext(ctx context.Context) ConnectToSourcePostgreSqlSyncTaskOutputResponseArrayOutput {
	return o
}

func (o ConnectToSourcePostgreSqlSyncTaskOutputResponseArrayOutput) Index(i pulumi.IntInput) ConnectToSourcePostgreSqlSyncTaskOutputResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ConnectToSourcePostgreSqlSyncTaskOutputResponse {
		return vs[0].([]ConnectToSourcePostgreSqlSyncTaskOutputResponse)[vs[1].(int)]
	}).(ConnectToSourcePostgreSqlSyncTaskOutputResponseOutput)
}

// Properties for the task that validates connection to PostgreSQL server and source server requirements for online migration
type ConnectToSourcePostgreSqlSyncTaskProperties struct {
	// Key value pairs of client data to attach meta data information to task
	ClientData map[string]string `pulumi:"clientData"`
	// Task input
	Input *ConnectToSourcePostgreSqlSyncTaskInput `pulumi:"input"`
	// Task type.
	TaskType string `pulumi:"taskType"`
}

// ConnectToSourcePostgreSqlSyncTaskPropertiesInput is an input type that accepts ConnectToSourcePostgreSqlSyncTaskPropertiesArgs and ConnectToSourcePostgreSqlSyncTaskPropertiesOutput values.
// You can construct a concrete instance of `ConnectToSourcePostgreSqlSyncTaskPropertiesInput` via:
//
//          ConnectToSourcePostgreSqlSyncTaskPropertiesArgs{...}
type ConnectToSourcePostgreSqlSyncTaskPropertiesInput interface {
	pulumi.Input

	ToConnectToSourcePostgreSqlSyncTaskPropertiesOutput() ConnectToSourcePostgreSqlSyncTaskPropertiesOutput
	ToConnectToSourcePostgreSqlSyncTaskPropertiesOutputWithContext(context.Context) ConnectToSourcePostgreSqlSyncTaskPropertiesOutput
}

// Properties for the task that validates connection to PostgreSQL server and source server requirements for online migration
type ConnectToSourcePostgreSqlSyncTaskPropertiesArgs struct {
	// Key value pairs of client data to attach meta data information to task
	ClientData pulumi.StringMapInput `pulumi:"clientData"`
	// Task input
	Input ConnectToSourcePostgreSqlSyncTaskInputPtrInput `pulumi:"input"`
	// Task type.
	TaskType pulumi.StringInput `pulumi:"taskType"`
}

func (ConnectToSourcePostgreSqlSyncTaskPropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectToSourcePostgreSqlSyncTaskProperties)(nil)).Elem()
}

func (i ConnectToSourcePostgreSqlSyncTaskPropertiesArgs) ToConnectToSourcePostgreSqlSyncTaskPropertiesOutput() ConnectToSourcePostgreSqlSyncTaskPropertiesOutput {
	return i.ToConnectToSourcePostgreSqlSyncTaskPropertiesOutputWithContext(context.Background())
}

func (i ConnectToSourcePostgreSqlSyncTaskPropertiesArgs) ToConnectToSourcePostgreSqlSyncTaskPropertiesOutputWithContext(ctx context.Context) ConnectToSourcePostgreSqlSyncTaskPropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectToSourcePostgreSqlSyncTaskPropertiesOutput)
}

// Properties for the task that validates connection to PostgreSQL server and source server requirements for online migration
type ConnectToSourcePostgreSqlSyncTaskPropertiesResponse struct {
	// Key value pairs of client data to attach meta data information to task
	ClientData map[string]string `pulumi:"clientData"`
	// Array of command properties.
	Commands []interface{} `pulumi:"commands"`
	// Array of errors. This is ignored if submitted.
	Errors []ODataErrorResponse `pulumi:"errors"`
	// Task input
	Input *ConnectToSourcePostgreSqlSyncTaskInputResponse `pulumi:"input"`
	// Task output. This is ignored if submitted.
	Output []ConnectToSourcePostgreSqlSyncTaskOutputResponse `pulumi:"output"`
	// The state of the task. This is ignored if submitted.
	State string `pulumi:"state"`
	// Task type.
	TaskType string `pulumi:"taskType"`
}

// Properties for the task that validates connection to PostgreSQL server and source server requirements for online migration
type ConnectToSourcePostgreSqlSyncTaskPropertiesResponseOutput struct{ *pulumi.OutputState }

func (ConnectToSourcePostgreSqlSyncTaskPropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectToSourcePostgreSqlSyncTaskPropertiesResponse)(nil)).Elem()
}

func (o ConnectToSourcePostgreSqlSyncTaskPropertiesResponseOutput) ToConnectToSourcePostgreSqlSyncTaskPropertiesResponseOutput() ConnectToSourcePostgreSqlSyncTaskPropertiesResponseOutput {
	return o
}

func (o ConnectToSourcePostgreSqlSyncTaskPropertiesResponseOutput) ToConnectToSourcePostgreSqlSyncTaskPropertiesResponseOutputWithContext(ctx context.Context) ConnectToSourcePostgreSqlSyncTaskPropertiesResponseOutput {
	return o
}

// Key value pairs of client data to attach meta data information to task
func (o ConnectToSourcePostgreSqlSyncTaskPropertiesResponseOutput) ClientData() pulumi.StringMapOutput {
	return o.ApplyT(func(v ConnectToSourcePostgreSqlSyncTaskPropertiesResponse) map[string]string { return v.ClientData }).(pulumi.StringMapOutput)
}

// Array of command properties.
func (o ConnectToSourcePostgreSqlSyncTaskPropertiesResponseOutput) Commands() pulumi.ArrayOutput {
	return o.ApplyT(func(v ConnectToSourcePostgreSqlSyncTaskPropertiesResponse) []interface{} { return v.Commands }).(pulumi.ArrayOutput)
}

// Array of errors. This is ignored if submitted.
func (o ConnectToSourcePostgreSqlSyncTaskPropertiesResponseOutput) Errors() ODataErrorResponseArrayOutput {
	return o.ApplyT(func(v ConnectToSourcePostgreSqlSyncTaskPropertiesResponse) []ODataErrorResponse { return v.Errors }).(ODataErrorResponseArrayOutput)
}

// Task input
func (o ConnectToSourcePostgreSqlSyncTaskPropertiesResponseOutput) Input() ConnectToSourcePostgreSqlSyncTaskInputResponsePtrOutput {
	return o.ApplyT(func(v ConnectToSourcePostgreSqlSyncTaskPropertiesResponse) *ConnectToSourcePostgreSqlSyncTaskInputResponse {
		return v.Input
	}).(ConnectToSourcePostgreSqlSyncTaskInputResponsePtrOutput)
}

// Task output. This is ignored if submitted.
func (o ConnectToSourcePostgreSqlSyncTaskPropertiesResponseOutput) Output() ConnectToSourcePostgreSqlSyncTaskOutputResponseArrayOutput {
	return o.ApplyT(func(v ConnectToSourcePostgreSqlSyncTaskPropertiesResponse) []ConnectToSourcePostgreSqlSyncTaskOutputResponse {
		return v.Output
	}).(ConnectToSourcePostgreSqlSyncTaskOutputResponseArrayOutput)
}

// The state of the task. This is ignored if submitted.
func (o ConnectToSourcePostgreSqlSyncTaskPropertiesResponseOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectToSourcePostgreSqlSyncTaskPropertiesResponse) string { return v.State }).(pulumi.StringOutput)
}

// Task type.
func (o ConnectToSourcePostgreSqlSyncTaskPropertiesResponseOutput) TaskType() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectToSourcePostgreSqlSyncTaskPropertiesResponse) string { return v.TaskType }).(pulumi.StringOutput)
}

// Properties for the task that validates connection to SQL Server and source server requirements for online migration
type ConnectToSourceSqlServerSyncTaskProperties struct {
	// Key value pairs of client data to attach meta data information to task
	ClientData map[string]string `pulumi:"clientData"`
	// Task input
	Input *ConnectToSourceSqlServerTaskInput `pulumi:"input"`
	// Task type.
	TaskType string `pulumi:"taskType"`
}

// ConnectToSourceSqlServerSyncTaskPropertiesInput is an input type that accepts ConnectToSourceSqlServerSyncTaskPropertiesArgs and ConnectToSourceSqlServerSyncTaskPropertiesOutput values.
// You can construct a concrete instance of `ConnectToSourceSqlServerSyncTaskPropertiesInput` via:
//
//          ConnectToSourceSqlServerSyncTaskPropertiesArgs{...}
type ConnectToSourceSqlServerSyncTaskPropertiesInput interface {
	pulumi.Input

	ToConnectToSourceSqlServerSyncTaskPropertiesOutput() ConnectToSourceSqlServerSyncTaskPropertiesOutput
	ToConnectToSourceSqlServerSyncTaskPropertiesOutputWithContext(context.Context) ConnectToSourceSqlServerSyncTaskPropertiesOutput
}

// Properties for the task that validates connection to SQL Server and source server requirements for online migration
type ConnectToSourceSqlServerSyncTaskPropertiesArgs struct {
	// Key value pairs of client data to attach meta data information to task
	ClientData pulumi.StringMapInput `pulumi:"clientData"`
	// Task input
	Input ConnectToSourceSqlServerTaskInputPtrInput `pulumi:"input"`
	// Task type.
	TaskType pulumi.StringInput `pulumi:"taskType"`
}

func (ConnectToSourceSqlServerSyncTaskPropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectToSourceSqlServerSyncTaskProperties)(nil)).Elem()
}

func (i ConnectToSourceSqlServerSyncTaskPropertiesArgs) ToConnectToSourceSqlServerSyncTaskPropertiesOutput() ConnectToSourceSqlServerSyncTaskPropertiesOutput {
	return i.ToConnectToSourceSqlServerSyncTaskPropertiesOutputWithContext(context.Background())
}

func (i ConnectToSourceSqlServerSyncTaskPropertiesArgs) ToConnectToSourceSqlServerSyncTaskPropertiesOutputWithContext(ctx context.Context) ConnectToSourceSqlServerSyncTaskPropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectToSourceSqlServerSyncTaskPropertiesOutput)
}

// Properties for the task that validates connection to SQL Server and source server requirements for online migration
type ConnectToSourceSqlServerSyncTaskPropertiesResponse struct {
	// Key value pairs of client data to attach meta data information to task
	ClientData map[string]string `pulumi:"clientData"`
	// Array of command properties.
	Commands []interface{} `pulumi:"commands"`
	// Array of errors. This is ignored if submitted.
	Errors []ODataErrorResponse `pulumi:"errors"`
	// Task input
	Input *ConnectToSourceSqlServerTaskInputResponse `pulumi:"input"`
	// Task output. This is ignored if submitted.
	Output []interface{} `pulumi:"output"`
	// The state of the task. This is ignored if submitted.
	State string `pulumi:"state"`
	// Task type.
	TaskType string `pulumi:"taskType"`
}

// Properties for the task that validates connection to SQL Server and source server requirements for online migration
type ConnectToSourceSqlServerSyncTaskPropertiesResponseOutput struct{ *pulumi.OutputState }

func (ConnectToSourceSqlServerSyncTaskPropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectToSourceSqlServerSyncTaskPropertiesResponse)(nil)).Elem()
}

func (o ConnectToSourceSqlServerSyncTaskPropertiesResponseOutput) ToConnectToSourceSqlServerSyncTaskPropertiesResponseOutput() ConnectToSourceSqlServerSyncTaskPropertiesResponseOutput {
	return o
}

func (o ConnectToSourceSqlServerSyncTaskPropertiesResponseOutput) ToConnectToSourceSqlServerSyncTaskPropertiesResponseOutputWithContext(ctx context.Context) ConnectToSourceSqlServerSyncTaskPropertiesResponseOutput {
	return o
}

// Key value pairs of client data to attach meta data information to task
func (o ConnectToSourceSqlServerSyncTaskPropertiesResponseOutput) ClientData() pulumi.StringMapOutput {
	return o.ApplyT(func(v ConnectToSourceSqlServerSyncTaskPropertiesResponse) map[string]string { return v.ClientData }).(pulumi.StringMapOutput)
}

// Array of command properties.
func (o ConnectToSourceSqlServerSyncTaskPropertiesResponseOutput) Commands() pulumi.ArrayOutput {
	return o.ApplyT(func(v ConnectToSourceSqlServerSyncTaskPropertiesResponse) []interface{} { return v.Commands }).(pulumi.ArrayOutput)
}

// Array of errors. This is ignored if submitted.
func (o ConnectToSourceSqlServerSyncTaskPropertiesResponseOutput) Errors() ODataErrorResponseArrayOutput {
	return o.ApplyT(func(v ConnectToSourceSqlServerSyncTaskPropertiesResponse) []ODataErrorResponse { return v.Errors }).(ODataErrorResponseArrayOutput)
}

// Task input
func (o ConnectToSourceSqlServerSyncTaskPropertiesResponseOutput) Input() ConnectToSourceSqlServerTaskInputResponsePtrOutput {
	return o.ApplyT(func(v ConnectToSourceSqlServerSyncTaskPropertiesResponse) *ConnectToSourceSqlServerTaskInputResponse {
		return v.Input
	}).(ConnectToSourceSqlServerTaskInputResponsePtrOutput)
}

// Task output. This is ignored if submitted.
func (o ConnectToSourceSqlServerSyncTaskPropertiesResponseOutput) Output() pulumi.ArrayOutput {
	return o.ApplyT(func(v ConnectToSourceSqlServerSyncTaskPropertiesResponse) []interface{} { return v.Output }).(pulumi.ArrayOutput)
}

// The state of the task. This is ignored if submitted.
func (o ConnectToSourceSqlServerSyncTaskPropertiesResponseOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectToSourceSqlServerSyncTaskPropertiesResponse) string { return v.State }).(pulumi.StringOutput)
}

// Task type.
func (o ConnectToSourceSqlServerSyncTaskPropertiesResponseOutput) TaskType() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectToSourceSqlServerSyncTaskPropertiesResponse) string { return v.TaskType }).(pulumi.StringOutput)
}

// Input for the task that validates connection to SQL Server and also validates source server requirements
type ConnectToSourceSqlServerTaskInput struct {
	// Permission group for validations
	CheckPermissionsGroup *string `pulumi:"checkPermissionsGroup"`
	// Flag for whether to collect agent jobs from source server.
	CollectAgentJobs *bool `pulumi:"collectAgentJobs"`
	// Flag for whether to collect databases from source server.
	CollectDatabases *bool `pulumi:"collectDatabases"`
	// Flag for whether to collect logins from source server.
	CollectLogins *bool `pulumi:"collectLogins"`
	// Flag for whether to collect TDE Certificate names from source server.
	CollectTdeCertificateInfo *bool `pulumi:"collectTdeCertificateInfo"`
	// Connection information for Source SQL Server
	SourceConnectionInfo SqlConnectionInfo `pulumi:"sourceConnectionInfo"`
	// Flag for whether to validate SSIS catalog is reachable on the source server.
	ValidateSsisCatalogOnly *bool `pulumi:"validateSsisCatalogOnly"`
}

// ConnectToSourceSqlServerTaskInputInput is an input type that accepts ConnectToSourceSqlServerTaskInputArgs and ConnectToSourceSqlServerTaskInputOutput values.
// You can construct a concrete instance of `ConnectToSourceSqlServerTaskInputInput` via:
//
//          ConnectToSourceSqlServerTaskInputArgs{...}
type ConnectToSourceSqlServerTaskInputInput interface {
	pulumi.Input

	ToConnectToSourceSqlServerTaskInputOutput() ConnectToSourceSqlServerTaskInputOutput
	ToConnectToSourceSqlServerTaskInputOutputWithContext(context.Context) ConnectToSourceSqlServerTaskInputOutput
}

// Input for the task that validates connection to SQL Server and also validates source server requirements
type ConnectToSourceSqlServerTaskInputArgs struct {
	// Permission group for validations
	CheckPermissionsGroup pulumi.StringPtrInput `pulumi:"checkPermissionsGroup"`
	// Flag for whether to collect agent jobs from source server.
	CollectAgentJobs pulumi.BoolPtrInput `pulumi:"collectAgentJobs"`
	// Flag for whether to collect databases from source server.
	CollectDatabases pulumi.BoolPtrInput `pulumi:"collectDatabases"`
	// Flag for whether to collect logins from source server.
	CollectLogins pulumi.BoolPtrInput `pulumi:"collectLogins"`
	// Flag for whether to collect TDE Certificate names from source server.
	CollectTdeCertificateInfo pulumi.BoolPtrInput `pulumi:"collectTdeCertificateInfo"`
	// Connection information for Source SQL Server
	SourceConnectionInfo SqlConnectionInfoInput `pulumi:"sourceConnectionInfo"`
	// Flag for whether to validate SSIS catalog is reachable on the source server.
	ValidateSsisCatalogOnly pulumi.BoolPtrInput `pulumi:"validateSsisCatalogOnly"`
}

func (ConnectToSourceSqlServerTaskInputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectToSourceSqlServerTaskInput)(nil)).Elem()
}

func (i ConnectToSourceSqlServerTaskInputArgs) ToConnectToSourceSqlServerTaskInputOutput() ConnectToSourceSqlServerTaskInputOutput {
	return i.ToConnectToSourceSqlServerTaskInputOutputWithContext(context.Background())
}

func (i ConnectToSourceSqlServerTaskInputArgs) ToConnectToSourceSqlServerTaskInputOutputWithContext(ctx context.Context) ConnectToSourceSqlServerTaskInputOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectToSourceSqlServerTaskInputOutput)
}

func (i ConnectToSourceSqlServerTaskInputArgs) ToConnectToSourceSqlServerTaskInputPtrOutput() ConnectToSourceSqlServerTaskInputPtrOutput {
	return i.ToConnectToSourceSqlServerTaskInputPtrOutputWithContext(context.Background())
}

func (i ConnectToSourceSqlServerTaskInputArgs) ToConnectToSourceSqlServerTaskInputPtrOutputWithContext(ctx context.Context) ConnectToSourceSqlServerTaskInputPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectToSourceSqlServerTaskInputOutput).ToConnectToSourceSqlServerTaskInputPtrOutputWithContext(ctx)
}

// ConnectToSourceSqlServerTaskInputPtrInput is an input type that accepts ConnectToSourceSqlServerTaskInputArgs, ConnectToSourceSqlServerTaskInputPtr and ConnectToSourceSqlServerTaskInputPtrOutput values.
// You can construct a concrete instance of `ConnectToSourceSqlServerTaskInputPtrInput` via:
//
//          ConnectToSourceSqlServerTaskInputArgs{...}
//
//  or:
//
//          nil
type ConnectToSourceSqlServerTaskInputPtrInput interface {
	pulumi.Input

	ToConnectToSourceSqlServerTaskInputPtrOutput() ConnectToSourceSqlServerTaskInputPtrOutput
	ToConnectToSourceSqlServerTaskInputPtrOutputWithContext(context.Context) ConnectToSourceSqlServerTaskInputPtrOutput
}

type connectToSourceSqlServerTaskInputPtrType ConnectToSourceSqlServerTaskInputArgs

func ConnectToSourceSqlServerTaskInputPtr(v *ConnectToSourceSqlServerTaskInputArgs) ConnectToSourceSqlServerTaskInputPtrInput {
	return (*connectToSourceSqlServerTaskInputPtrType)(v)
}

func (*connectToSourceSqlServerTaskInputPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ConnectToSourceSqlServerTaskInput)(nil)).Elem()
}

func (i *connectToSourceSqlServerTaskInputPtrType) ToConnectToSourceSqlServerTaskInputPtrOutput() ConnectToSourceSqlServerTaskInputPtrOutput {
	return i.ToConnectToSourceSqlServerTaskInputPtrOutputWithContext(context.Background())
}

func (i *connectToSourceSqlServerTaskInputPtrType) ToConnectToSourceSqlServerTaskInputPtrOutputWithContext(ctx context.Context) ConnectToSourceSqlServerTaskInputPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectToSourceSqlServerTaskInputPtrOutput)
}

// Input for the task that validates connection to SQL Server and also validates source server requirements
type ConnectToSourceSqlServerTaskInputResponse struct {
	// Permission group for validations
	CheckPermissionsGroup *string `pulumi:"checkPermissionsGroup"`
	// Flag for whether to collect agent jobs from source server.
	CollectAgentJobs *bool `pulumi:"collectAgentJobs"`
	// Flag for whether to collect databases from source server.
	CollectDatabases *bool `pulumi:"collectDatabases"`
	// Flag for whether to collect logins from source server.
	CollectLogins *bool `pulumi:"collectLogins"`
	// Flag for whether to collect TDE Certificate names from source server.
	CollectTdeCertificateInfo *bool `pulumi:"collectTdeCertificateInfo"`
	// Connection information for Source SQL Server
	SourceConnectionInfo SqlConnectionInfoResponse `pulumi:"sourceConnectionInfo"`
	// Flag for whether to validate SSIS catalog is reachable on the source server.
	ValidateSsisCatalogOnly *bool `pulumi:"validateSsisCatalogOnly"`
}

// Input for the task that validates connection to SQL Server and also validates source server requirements
type ConnectToSourceSqlServerTaskInputResponseOutput struct{ *pulumi.OutputState }

func (ConnectToSourceSqlServerTaskInputResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectToSourceSqlServerTaskInputResponse)(nil)).Elem()
}

func (o ConnectToSourceSqlServerTaskInputResponseOutput) ToConnectToSourceSqlServerTaskInputResponseOutput() ConnectToSourceSqlServerTaskInputResponseOutput {
	return o
}

func (o ConnectToSourceSqlServerTaskInputResponseOutput) ToConnectToSourceSqlServerTaskInputResponseOutputWithContext(ctx context.Context) ConnectToSourceSqlServerTaskInputResponseOutput {
	return o
}

func (o ConnectToSourceSqlServerTaskInputResponseOutput) ToConnectToSourceSqlServerTaskInputResponsePtrOutput() ConnectToSourceSqlServerTaskInputResponsePtrOutput {
	return o.ToConnectToSourceSqlServerTaskInputResponsePtrOutputWithContext(context.Background())
}

func (o ConnectToSourceSqlServerTaskInputResponseOutput) ToConnectToSourceSqlServerTaskInputResponsePtrOutputWithContext(ctx context.Context) ConnectToSourceSqlServerTaskInputResponsePtrOutput {
	return o.ApplyT(func(v ConnectToSourceSqlServerTaskInputResponse) *ConnectToSourceSqlServerTaskInputResponse {
		return &v
	}).(ConnectToSourceSqlServerTaskInputResponsePtrOutput)
}

// Permission group for validations
func (o ConnectToSourceSqlServerTaskInputResponseOutput) CheckPermissionsGroup() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ConnectToSourceSqlServerTaskInputResponse) *string { return v.CheckPermissionsGroup }).(pulumi.StringPtrOutput)
}

// Flag for whether to collect agent jobs from source server.
func (o ConnectToSourceSqlServerTaskInputResponseOutput) CollectAgentJobs() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ConnectToSourceSqlServerTaskInputResponse) *bool { return v.CollectAgentJobs }).(pulumi.BoolPtrOutput)
}

// Flag for whether to collect databases from source server.
func (o ConnectToSourceSqlServerTaskInputResponseOutput) CollectDatabases() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ConnectToSourceSqlServerTaskInputResponse) *bool { return v.CollectDatabases }).(pulumi.BoolPtrOutput)
}

// Flag for whether to collect logins from source server.
func (o ConnectToSourceSqlServerTaskInputResponseOutput) CollectLogins() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ConnectToSourceSqlServerTaskInputResponse) *bool { return v.CollectLogins }).(pulumi.BoolPtrOutput)
}

// Flag for whether to collect TDE Certificate names from source server.
func (o ConnectToSourceSqlServerTaskInputResponseOutput) CollectTdeCertificateInfo() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ConnectToSourceSqlServerTaskInputResponse) *bool { return v.CollectTdeCertificateInfo }).(pulumi.BoolPtrOutput)
}

// Connection information for Source SQL Server
func (o ConnectToSourceSqlServerTaskInputResponseOutput) SourceConnectionInfo() SqlConnectionInfoResponseOutput {
	return o.ApplyT(func(v ConnectToSourceSqlServerTaskInputResponse) SqlConnectionInfoResponse {
		return v.SourceConnectionInfo
	}).(SqlConnectionInfoResponseOutput)
}

// Flag for whether to validate SSIS catalog is reachable on the source server.
func (o ConnectToSourceSqlServerTaskInputResponseOutput) ValidateSsisCatalogOnly() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ConnectToSourceSqlServerTaskInputResponse) *bool { return v.ValidateSsisCatalogOnly }).(pulumi.BoolPtrOutput)
}

type ConnectToSourceSqlServerTaskInputResponsePtrOutput struct{ *pulumi.OutputState }

func (ConnectToSourceSqlServerTaskInputResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ConnectToSourceSqlServerTaskInputResponse)(nil)).Elem()
}

func (o ConnectToSourceSqlServerTaskInputResponsePtrOutput) ToConnectToSourceSqlServerTaskInputResponsePtrOutput() ConnectToSourceSqlServerTaskInputResponsePtrOutput {
	return o
}

func (o ConnectToSourceSqlServerTaskInputResponsePtrOutput) ToConnectToSourceSqlServerTaskInputResponsePtrOutputWithContext(ctx context.Context) ConnectToSourceSqlServerTaskInputResponsePtrOutput {
	return o
}

func (o ConnectToSourceSqlServerTaskInputResponsePtrOutput) Elem() ConnectToSourceSqlServerTaskInputResponseOutput {
	return o.ApplyT(func(v *ConnectToSourceSqlServerTaskInputResponse) ConnectToSourceSqlServerTaskInputResponse {
		return *v
	}).(ConnectToSourceSqlServerTaskInputResponseOutput)
}

// Permission group for validations
func (o ConnectToSourceSqlServerTaskInputResponsePtrOutput) CheckPermissionsGroup() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConnectToSourceSqlServerTaskInputResponse) *string {
		if v == nil {
			return nil
		}
		return v.CheckPermissionsGroup
	}).(pulumi.StringPtrOutput)
}

// Flag for whether to collect agent jobs from source server.
func (o ConnectToSourceSqlServerTaskInputResponsePtrOutput) CollectAgentJobs() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ConnectToSourceSqlServerTaskInputResponse) *bool {
		if v == nil {
			return nil
		}
		return v.CollectAgentJobs
	}).(pulumi.BoolPtrOutput)
}

// Flag for whether to collect databases from source server.
func (o ConnectToSourceSqlServerTaskInputResponsePtrOutput) CollectDatabases() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ConnectToSourceSqlServerTaskInputResponse) *bool {
		if v == nil {
			return nil
		}
		return v.CollectDatabases
	}).(pulumi.BoolPtrOutput)
}

// Flag for whether to collect logins from source server.
func (o ConnectToSourceSqlServerTaskInputResponsePtrOutput) CollectLogins() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ConnectToSourceSqlServerTaskInputResponse) *bool {
		if v == nil {
			return nil
		}
		return v.CollectLogins
	}).(pulumi.BoolPtrOutput)
}

// Flag for whether to collect TDE Certificate names from source server.
func (o ConnectToSourceSqlServerTaskInputResponsePtrOutput) CollectTdeCertificateInfo() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ConnectToSourceSqlServerTaskInputResponse) *bool {
		if v == nil {
			return nil
		}
		return v.CollectTdeCertificateInfo
	}).(pulumi.BoolPtrOutput)
}

// Connection information for Source SQL Server
func (o ConnectToSourceSqlServerTaskInputResponsePtrOutput) SourceConnectionInfo() SqlConnectionInfoResponsePtrOutput {
	return o.ApplyT(func(v *ConnectToSourceSqlServerTaskInputResponse) *SqlConnectionInfoResponse {
		if v == nil {
			return nil
		}
		return &v.SourceConnectionInfo
	}).(SqlConnectionInfoResponsePtrOutput)
}

// Flag for whether to validate SSIS catalog is reachable on the source server.
func (o ConnectToSourceSqlServerTaskInputResponsePtrOutput) ValidateSsisCatalogOnly() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ConnectToSourceSqlServerTaskInputResponse) *bool {
		if v == nil {
			return nil
		}
		return v.ValidateSsisCatalogOnly
	}).(pulumi.BoolPtrOutput)
}

// Agent Job level output for the task that validates connection to SQL Server and also validates source server requirements
type ConnectToSourceSqlServerTaskOutputAgentJobLevelResponse struct {
	// Result identifier
	Id string `pulumi:"id"`
	// The state of the original Agent Job.
	IsEnabled bool `pulumi:"isEnabled"`
	// The type of Agent Job.
	JobCategory string `pulumi:"jobCategory"`
	// The owner of the Agent Job
	JobOwner string `pulumi:"jobOwner"`
	// UTC Date and time when the Agent Job was last executed.
	LastExecutedOn string `pulumi:"lastExecutedOn"`
	// Information about eligibility of agent job for migration.
	MigrationEligibility MigrationEligibilityInfoResponse `pulumi:"migrationEligibility"`
	// Agent Job name
	Name string `pulumi:"name"`
	// Type of result - database level or task level
	ResultType string `pulumi:"resultType"`
	// Validation errors
	ValidationErrors []ReportableExceptionResponse `pulumi:"validationErrors"`
}

// Agent Job level output for the task that validates connection to SQL Server and also validates source server requirements
type ConnectToSourceSqlServerTaskOutputAgentJobLevelResponseOutput struct{ *pulumi.OutputState }

func (ConnectToSourceSqlServerTaskOutputAgentJobLevelResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectToSourceSqlServerTaskOutputAgentJobLevelResponse)(nil)).Elem()
}

func (o ConnectToSourceSqlServerTaskOutputAgentJobLevelResponseOutput) ToConnectToSourceSqlServerTaskOutputAgentJobLevelResponseOutput() ConnectToSourceSqlServerTaskOutputAgentJobLevelResponseOutput {
	return o
}

func (o ConnectToSourceSqlServerTaskOutputAgentJobLevelResponseOutput) ToConnectToSourceSqlServerTaskOutputAgentJobLevelResponseOutputWithContext(ctx context.Context) ConnectToSourceSqlServerTaskOutputAgentJobLevelResponseOutput {
	return o
}

// Result identifier
func (o ConnectToSourceSqlServerTaskOutputAgentJobLevelResponseOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectToSourceSqlServerTaskOutputAgentJobLevelResponse) string { return v.Id }).(pulumi.StringOutput)
}

// The state of the original Agent Job.
func (o ConnectToSourceSqlServerTaskOutputAgentJobLevelResponseOutput) IsEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v ConnectToSourceSqlServerTaskOutputAgentJobLevelResponse) bool { return v.IsEnabled }).(pulumi.BoolOutput)
}

// The type of Agent Job.
func (o ConnectToSourceSqlServerTaskOutputAgentJobLevelResponseOutput) JobCategory() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectToSourceSqlServerTaskOutputAgentJobLevelResponse) string { return v.JobCategory }).(pulumi.StringOutput)
}

// The owner of the Agent Job
func (o ConnectToSourceSqlServerTaskOutputAgentJobLevelResponseOutput) JobOwner() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectToSourceSqlServerTaskOutputAgentJobLevelResponse) string { return v.JobOwner }).(pulumi.StringOutput)
}

// UTC Date and time when the Agent Job was last executed.
func (o ConnectToSourceSqlServerTaskOutputAgentJobLevelResponseOutput) LastExecutedOn() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectToSourceSqlServerTaskOutputAgentJobLevelResponse) string { return v.LastExecutedOn }).(pulumi.StringOutput)
}

// Information about eligibility of agent job for migration.
func (o ConnectToSourceSqlServerTaskOutputAgentJobLevelResponseOutput) MigrationEligibility() MigrationEligibilityInfoResponseOutput {
	return o.ApplyT(func(v ConnectToSourceSqlServerTaskOutputAgentJobLevelResponse) MigrationEligibilityInfoResponse {
		return v.MigrationEligibility
	}).(MigrationEligibilityInfoResponseOutput)
}

// Agent Job name
func (o ConnectToSourceSqlServerTaskOutputAgentJobLevelResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectToSourceSqlServerTaskOutputAgentJobLevelResponse) string { return v.Name }).(pulumi.StringOutput)
}

// Type of result - database level or task level
func (o ConnectToSourceSqlServerTaskOutputAgentJobLevelResponseOutput) ResultType() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectToSourceSqlServerTaskOutputAgentJobLevelResponse) string { return v.ResultType }).(pulumi.StringOutput)
}

// Validation errors
func (o ConnectToSourceSqlServerTaskOutputAgentJobLevelResponseOutput) ValidationErrors() ReportableExceptionResponseArrayOutput {
	return o.ApplyT(func(v ConnectToSourceSqlServerTaskOutputAgentJobLevelResponse) []ReportableExceptionResponse {
		return v.ValidationErrors
	}).(ReportableExceptionResponseArrayOutput)
}

// Database level output for the task that validates connection to SQL Server and also validates source server requirements
type ConnectToSourceSqlServerTaskOutputDatabaseLevelResponse struct {
	// SQL Server compatibility level of database
	CompatibilityLevel string `pulumi:"compatibilityLevel"`
	// The list of database files
	DatabaseFiles []DatabaseFileInfoResponse `pulumi:"databaseFiles"`
	// State of the database
	DatabaseState string `pulumi:"databaseState"`
	// Result identifier
	Id string `pulumi:"id"`
	// Database name
	Name string `pulumi:"name"`
	// Type of result - database level or task level
	ResultType string `pulumi:"resultType"`
	// Size of the file in megabytes
	SizeMB float64 `pulumi:"sizeMB"`
}

// Database level output for the task that validates connection to SQL Server and also validates source server requirements
type ConnectToSourceSqlServerTaskOutputDatabaseLevelResponseOutput struct{ *pulumi.OutputState }

func (ConnectToSourceSqlServerTaskOutputDatabaseLevelResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectToSourceSqlServerTaskOutputDatabaseLevelResponse)(nil)).Elem()
}

func (o ConnectToSourceSqlServerTaskOutputDatabaseLevelResponseOutput) ToConnectToSourceSqlServerTaskOutputDatabaseLevelResponseOutput() ConnectToSourceSqlServerTaskOutputDatabaseLevelResponseOutput {
	return o
}

func (o ConnectToSourceSqlServerTaskOutputDatabaseLevelResponseOutput) ToConnectToSourceSqlServerTaskOutputDatabaseLevelResponseOutputWithContext(ctx context.Context) ConnectToSourceSqlServerTaskOutputDatabaseLevelResponseOutput {
	return o
}

// SQL Server compatibility level of database
func (o ConnectToSourceSqlServerTaskOutputDatabaseLevelResponseOutput) CompatibilityLevel() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectToSourceSqlServerTaskOutputDatabaseLevelResponse) string { return v.CompatibilityLevel }).(pulumi.StringOutput)
}

// The list of database files
func (o ConnectToSourceSqlServerTaskOutputDatabaseLevelResponseOutput) DatabaseFiles() DatabaseFileInfoResponseArrayOutput {
	return o.ApplyT(func(v ConnectToSourceSqlServerTaskOutputDatabaseLevelResponse) []DatabaseFileInfoResponse {
		return v.DatabaseFiles
	}).(DatabaseFileInfoResponseArrayOutput)
}

// State of the database
func (o ConnectToSourceSqlServerTaskOutputDatabaseLevelResponseOutput) DatabaseState() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectToSourceSqlServerTaskOutputDatabaseLevelResponse) string { return v.DatabaseState }).(pulumi.StringOutput)
}

// Result identifier
func (o ConnectToSourceSqlServerTaskOutputDatabaseLevelResponseOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectToSourceSqlServerTaskOutputDatabaseLevelResponse) string { return v.Id }).(pulumi.StringOutput)
}

// Database name
func (o ConnectToSourceSqlServerTaskOutputDatabaseLevelResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectToSourceSqlServerTaskOutputDatabaseLevelResponse) string { return v.Name }).(pulumi.StringOutput)
}

// Type of result - database level or task level
func (o ConnectToSourceSqlServerTaskOutputDatabaseLevelResponseOutput) ResultType() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectToSourceSqlServerTaskOutputDatabaseLevelResponse) string { return v.ResultType }).(pulumi.StringOutput)
}

// Size of the file in megabytes
func (o ConnectToSourceSqlServerTaskOutputDatabaseLevelResponseOutput) SizeMB() pulumi.Float64Output {
	return o.ApplyT(func(v ConnectToSourceSqlServerTaskOutputDatabaseLevelResponse) float64 { return v.SizeMB }).(pulumi.Float64Output)
}

// Login level output for the task that validates connection to SQL Server and also validates source server requirements
type ConnectToSourceSqlServerTaskOutputLoginLevelResponse struct {
	// The default database for the login.
	DefaultDatabase string `pulumi:"defaultDatabase"`
	// Result identifier
	Id string `pulumi:"id"`
	// The state of the login.
	IsEnabled bool `pulumi:"isEnabled"`
	// The type of login.
	LoginType string `pulumi:"loginType"`
	// Information about eligibility of login for migration.
	MigrationEligibility MigrationEligibilityInfoResponse `pulumi:"migrationEligibility"`
	// Login name.
	Name string `pulumi:"name"`
	// Type of result - database level or task level
	ResultType string `pulumi:"resultType"`
}

// Login level output for the task that validates connection to SQL Server and also validates source server requirements
type ConnectToSourceSqlServerTaskOutputLoginLevelResponseOutput struct{ *pulumi.OutputState }

func (ConnectToSourceSqlServerTaskOutputLoginLevelResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectToSourceSqlServerTaskOutputLoginLevelResponse)(nil)).Elem()
}

func (o ConnectToSourceSqlServerTaskOutputLoginLevelResponseOutput) ToConnectToSourceSqlServerTaskOutputLoginLevelResponseOutput() ConnectToSourceSqlServerTaskOutputLoginLevelResponseOutput {
	return o
}

func (o ConnectToSourceSqlServerTaskOutputLoginLevelResponseOutput) ToConnectToSourceSqlServerTaskOutputLoginLevelResponseOutputWithContext(ctx context.Context) ConnectToSourceSqlServerTaskOutputLoginLevelResponseOutput {
	return o
}

// The default database for the login.
func (o ConnectToSourceSqlServerTaskOutputLoginLevelResponseOutput) DefaultDatabase() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectToSourceSqlServerTaskOutputLoginLevelResponse) string { return v.DefaultDatabase }).(pulumi.StringOutput)
}

// Result identifier
func (o ConnectToSourceSqlServerTaskOutputLoginLevelResponseOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectToSourceSqlServerTaskOutputLoginLevelResponse) string { return v.Id }).(pulumi.StringOutput)
}

// The state of the login.
func (o ConnectToSourceSqlServerTaskOutputLoginLevelResponseOutput) IsEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v ConnectToSourceSqlServerTaskOutputLoginLevelResponse) bool { return v.IsEnabled }).(pulumi.BoolOutput)
}

// The type of login.
func (o ConnectToSourceSqlServerTaskOutputLoginLevelResponseOutput) LoginType() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectToSourceSqlServerTaskOutputLoginLevelResponse) string { return v.LoginType }).(pulumi.StringOutput)
}

// Information about eligibility of login for migration.
func (o ConnectToSourceSqlServerTaskOutputLoginLevelResponseOutput) MigrationEligibility() MigrationEligibilityInfoResponseOutput {
	return o.ApplyT(func(v ConnectToSourceSqlServerTaskOutputLoginLevelResponse) MigrationEligibilityInfoResponse {
		return v.MigrationEligibility
	}).(MigrationEligibilityInfoResponseOutput)
}

// Login name.
func (o ConnectToSourceSqlServerTaskOutputLoginLevelResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectToSourceSqlServerTaskOutputLoginLevelResponse) string { return v.Name }).(pulumi.StringOutput)
}

// Type of result - database level or task level
func (o ConnectToSourceSqlServerTaskOutputLoginLevelResponseOutput) ResultType() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectToSourceSqlServerTaskOutputLoginLevelResponse) string { return v.ResultType }).(pulumi.StringOutput)
}

// Task level output for the task that validates connection to SQL Server and also validates source server requirements
type ConnectToSourceSqlServerTaskOutputTaskLevelResponse struct {
	// Source agent jobs as a map from agent job name to id.
	AgentJobs string `pulumi:"agentJobs"`
	// Mapping from database name to TDE certificate name, if applicable
	DatabaseTdeCertificateMapping string `pulumi:"databaseTdeCertificateMapping"`
	// Source databases as a map from database name to database id
	Databases string `pulumi:"databases"`
	// Result identifier
	Id string `pulumi:"id"`
	// Source logins as a map from login name to login id.
	Logins string `pulumi:"logins"`
	// Type of result - database level or task level
	ResultType string `pulumi:"resultType"`
	// Source server brand version
	SourceServerBrandVersion string `pulumi:"sourceServerBrandVersion"`
	// Source server version
	SourceServerVersion string `pulumi:"sourceServerVersion"`
	// Validation errors
	ValidationErrors []ReportableExceptionResponse `pulumi:"validationErrors"`
}

// Task level output for the task that validates connection to SQL Server and also validates source server requirements
type ConnectToSourceSqlServerTaskOutputTaskLevelResponseOutput struct{ *pulumi.OutputState }

func (ConnectToSourceSqlServerTaskOutputTaskLevelResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectToSourceSqlServerTaskOutputTaskLevelResponse)(nil)).Elem()
}

func (o ConnectToSourceSqlServerTaskOutputTaskLevelResponseOutput) ToConnectToSourceSqlServerTaskOutputTaskLevelResponseOutput() ConnectToSourceSqlServerTaskOutputTaskLevelResponseOutput {
	return o
}

func (o ConnectToSourceSqlServerTaskOutputTaskLevelResponseOutput) ToConnectToSourceSqlServerTaskOutputTaskLevelResponseOutputWithContext(ctx context.Context) ConnectToSourceSqlServerTaskOutputTaskLevelResponseOutput {
	return o
}

// Source agent jobs as a map from agent job name to id.
func (o ConnectToSourceSqlServerTaskOutputTaskLevelResponseOutput) AgentJobs() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectToSourceSqlServerTaskOutputTaskLevelResponse) string { return v.AgentJobs }).(pulumi.StringOutput)
}

// Mapping from database name to TDE certificate name, if applicable
func (o ConnectToSourceSqlServerTaskOutputTaskLevelResponseOutput) DatabaseTdeCertificateMapping() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectToSourceSqlServerTaskOutputTaskLevelResponse) string {
		return v.DatabaseTdeCertificateMapping
	}).(pulumi.StringOutput)
}

// Source databases as a map from database name to database id
func (o ConnectToSourceSqlServerTaskOutputTaskLevelResponseOutput) Databases() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectToSourceSqlServerTaskOutputTaskLevelResponse) string { return v.Databases }).(pulumi.StringOutput)
}

// Result identifier
func (o ConnectToSourceSqlServerTaskOutputTaskLevelResponseOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectToSourceSqlServerTaskOutputTaskLevelResponse) string { return v.Id }).(pulumi.StringOutput)
}

// Source logins as a map from login name to login id.
func (o ConnectToSourceSqlServerTaskOutputTaskLevelResponseOutput) Logins() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectToSourceSqlServerTaskOutputTaskLevelResponse) string { return v.Logins }).(pulumi.StringOutput)
}

// Type of result - database level or task level
func (o ConnectToSourceSqlServerTaskOutputTaskLevelResponseOutput) ResultType() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectToSourceSqlServerTaskOutputTaskLevelResponse) string { return v.ResultType }).(pulumi.StringOutput)
}

// Source server brand version
func (o ConnectToSourceSqlServerTaskOutputTaskLevelResponseOutput) SourceServerBrandVersion() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectToSourceSqlServerTaskOutputTaskLevelResponse) string { return v.SourceServerBrandVersion }).(pulumi.StringOutput)
}

// Source server version
func (o ConnectToSourceSqlServerTaskOutputTaskLevelResponseOutput) SourceServerVersion() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectToSourceSqlServerTaskOutputTaskLevelResponse) string { return v.SourceServerVersion }).(pulumi.StringOutput)
}

// Validation errors
func (o ConnectToSourceSqlServerTaskOutputTaskLevelResponseOutput) ValidationErrors() ReportableExceptionResponseArrayOutput {
	return o.ApplyT(func(v ConnectToSourceSqlServerTaskOutputTaskLevelResponse) []ReportableExceptionResponse {
		return v.ValidationErrors
	}).(ReportableExceptionResponseArrayOutput)
}

// Properties for the task that validates connection to SQL Server and also validates source server requirements
type ConnectToSourceSqlServerTaskProperties struct {
	// Key value pairs of client data to attach meta data information to task
	ClientData map[string]string `pulumi:"clientData"`
	// Task input
	Input *ConnectToSourceSqlServerTaskInput `pulumi:"input"`
	// Task type.
	TaskType string `pulumi:"taskType"`
}

// ConnectToSourceSqlServerTaskPropertiesInput is an input type that accepts ConnectToSourceSqlServerTaskPropertiesArgs and ConnectToSourceSqlServerTaskPropertiesOutput values.
// You can construct a concrete instance of `ConnectToSourceSqlServerTaskPropertiesInput` via:
//
//          ConnectToSourceSqlServerTaskPropertiesArgs{...}
type ConnectToSourceSqlServerTaskPropertiesInput interface {
	pulumi.Input

	ToConnectToSourceSqlServerTaskPropertiesOutput() ConnectToSourceSqlServerTaskPropertiesOutput
	ToConnectToSourceSqlServerTaskPropertiesOutputWithContext(context.Context) ConnectToSourceSqlServerTaskPropertiesOutput
}

// Properties for the task that validates connection to SQL Server and also validates source server requirements
type ConnectToSourceSqlServerTaskPropertiesArgs struct {
	// Key value pairs of client data to attach meta data information to task
	ClientData pulumi.StringMapInput `pulumi:"clientData"`
	// Task input
	Input ConnectToSourceSqlServerTaskInputPtrInput `pulumi:"input"`
	// Task type.
	TaskType pulumi.StringInput `pulumi:"taskType"`
}

func (ConnectToSourceSqlServerTaskPropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectToSourceSqlServerTaskProperties)(nil)).Elem()
}

func (i ConnectToSourceSqlServerTaskPropertiesArgs) ToConnectToSourceSqlServerTaskPropertiesOutput() ConnectToSourceSqlServerTaskPropertiesOutput {
	return i.ToConnectToSourceSqlServerTaskPropertiesOutputWithContext(context.Background())
}

func (i ConnectToSourceSqlServerTaskPropertiesArgs) ToConnectToSourceSqlServerTaskPropertiesOutputWithContext(ctx context.Context) ConnectToSourceSqlServerTaskPropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectToSourceSqlServerTaskPropertiesOutput)
}

// Properties for the task that validates connection to SQL Server and also validates source server requirements
type ConnectToSourceSqlServerTaskPropertiesResponse struct {
	// Key value pairs of client data to attach meta data information to task
	ClientData map[string]string `pulumi:"clientData"`
	// Array of command properties.
	Commands []interface{} `pulumi:"commands"`
	// Array of errors. This is ignored if submitted.
	Errors []ODataErrorResponse `pulumi:"errors"`
	// Task input
	Input *ConnectToSourceSqlServerTaskInputResponse `pulumi:"input"`
	// Task output. This is ignored if submitted.
	Output []interface{} `pulumi:"output"`
	// The state of the task. This is ignored if submitted.
	State string `pulumi:"state"`
	// Task type.
	TaskType string `pulumi:"taskType"`
}

// Properties for the task that validates connection to SQL Server and also validates source server requirements
type ConnectToSourceSqlServerTaskPropertiesResponseOutput struct{ *pulumi.OutputState }

func (ConnectToSourceSqlServerTaskPropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectToSourceSqlServerTaskPropertiesResponse)(nil)).Elem()
}

func (o ConnectToSourceSqlServerTaskPropertiesResponseOutput) ToConnectToSourceSqlServerTaskPropertiesResponseOutput() ConnectToSourceSqlServerTaskPropertiesResponseOutput {
	return o
}

func (o ConnectToSourceSqlServerTaskPropertiesResponseOutput) ToConnectToSourceSqlServerTaskPropertiesResponseOutputWithContext(ctx context.Context) ConnectToSourceSqlServerTaskPropertiesResponseOutput {
	return o
}

// Key value pairs of client data to attach meta data information to task
func (o ConnectToSourceSqlServerTaskPropertiesResponseOutput) ClientData() pulumi.StringMapOutput {
	return o.ApplyT(func(v ConnectToSourceSqlServerTaskPropertiesResponse) map[string]string { return v.ClientData }).(pulumi.StringMapOutput)
}

// Array of command properties.
func (o ConnectToSourceSqlServerTaskPropertiesResponseOutput) Commands() pulumi.ArrayOutput {
	return o.ApplyT(func(v ConnectToSourceSqlServerTaskPropertiesResponse) []interface{} { return v.Commands }).(pulumi.ArrayOutput)
}

// Array of errors. This is ignored if submitted.
func (o ConnectToSourceSqlServerTaskPropertiesResponseOutput) Errors() ODataErrorResponseArrayOutput {
	return o.ApplyT(func(v ConnectToSourceSqlServerTaskPropertiesResponse) []ODataErrorResponse { return v.Errors }).(ODataErrorResponseArrayOutput)
}

// Task input
func (o ConnectToSourceSqlServerTaskPropertiesResponseOutput) Input() ConnectToSourceSqlServerTaskInputResponsePtrOutput {
	return o.ApplyT(func(v ConnectToSourceSqlServerTaskPropertiesResponse) *ConnectToSourceSqlServerTaskInputResponse {
		return v.Input
	}).(ConnectToSourceSqlServerTaskInputResponsePtrOutput)
}

// Task output. This is ignored if submitted.
func (o ConnectToSourceSqlServerTaskPropertiesResponseOutput) Output() pulumi.ArrayOutput {
	return o.ApplyT(func(v ConnectToSourceSqlServerTaskPropertiesResponse) []interface{} { return v.Output }).(pulumi.ArrayOutput)
}

// The state of the task. This is ignored if submitted.
func (o ConnectToSourceSqlServerTaskPropertiesResponseOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectToSourceSqlServerTaskPropertiesResponse) string { return v.State }).(pulumi.StringOutput)
}

// Task type.
func (o ConnectToSourceSqlServerTaskPropertiesResponseOutput) TaskType() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectToSourceSqlServerTaskPropertiesResponse) string { return v.TaskType }).(pulumi.StringOutput)
}

// Input for the task that validates connection to Azure Database for MySQL and target server requirements
type ConnectToTargetAzureDbForMySqlTaskInput struct {
	// Connection information for source MySQL server
	SourceConnectionInfo MySqlConnectionInfo `pulumi:"sourceConnectionInfo"`
	// Connection information for target Azure Database for MySQL server
	TargetConnectionInfo MySqlConnectionInfo `pulumi:"targetConnectionInfo"`
}

// ConnectToTargetAzureDbForMySqlTaskInputInput is an input type that accepts ConnectToTargetAzureDbForMySqlTaskInputArgs and ConnectToTargetAzureDbForMySqlTaskInputOutput values.
// You can construct a concrete instance of `ConnectToTargetAzureDbForMySqlTaskInputInput` via:
//
//          ConnectToTargetAzureDbForMySqlTaskInputArgs{...}
type ConnectToTargetAzureDbForMySqlTaskInputInput interface {
	pulumi.Input

	ToConnectToTargetAzureDbForMySqlTaskInputOutput() ConnectToTargetAzureDbForMySqlTaskInputOutput
	ToConnectToTargetAzureDbForMySqlTaskInputOutputWithContext(context.Context) ConnectToTargetAzureDbForMySqlTaskInputOutput
}

// Input for the task that validates connection to Azure Database for MySQL and target server requirements
type ConnectToTargetAzureDbForMySqlTaskInputArgs struct {
	// Connection information for source MySQL server
	SourceConnectionInfo MySqlConnectionInfoInput `pulumi:"sourceConnectionInfo"`
	// Connection information for target Azure Database for MySQL server
	TargetConnectionInfo MySqlConnectionInfoInput `pulumi:"targetConnectionInfo"`
}

func (ConnectToTargetAzureDbForMySqlTaskInputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectToTargetAzureDbForMySqlTaskInput)(nil)).Elem()
}

func (i ConnectToTargetAzureDbForMySqlTaskInputArgs) ToConnectToTargetAzureDbForMySqlTaskInputOutput() ConnectToTargetAzureDbForMySqlTaskInputOutput {
	return i.ToConnectToTargetAzureDbForMySqlTaskInputOutputWithContext(context.Background())
}

func (i ConnectToTargetAzureDbForMySqlTaskInputArgs) ToConnectToTargetAzureDbForMySqlTaskInputOutputWithContext(ctx context.Context) ConnectToTargetAzureDbForMySqlTaskInputOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectToTargetAzureDbForMySqlTaskInputOutput)
}

func (i ConnectToTargetAzureDbForMySqlTaskInputArgs) ToConnectToTargetAzureDbForMySqlTaskInputPtrOutput() ConnectToTargetAzureDbForMySqlTaskInputPtrOutput {
	return i.ToConnectToTargetAzureDbForMySqlTaskInputPtrOutputWithContext(context.Background())
}

func (i ConnectToTargetAzureDbForMySqlTaskInputArgs) ToConnectToTargetAzureDbForMySqlTaskInputPtrOutputWithContext(ctx context.Context) ConnectToTargetAzureDbForMySqlTaskInputPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectToTargetAzureDbForMySqlTaskInputOutput).ToConnectToTargetAzureDbForMySqlTaskInputPtrOutputWithContext(ctx)
}

// ConnectToTargetAzureDbForMySqlTaskInputPtrInput is an input type that accepts ConnectToTargetAzureDbForMySqlTaskInputArgs, ConnectToTargetAzureDbForMySqlTaskInputPtr and ConnectToTargetAzureDbForMySqlTaskInputPtrOutput values.
// You can construct a concrete instance of `ConnectToTargetAzureDbForMySqlTaskInputPtrInput` via:
//
//          ConnectToTargetAzureDbForMySqlTaskInputArgs{...}
//
//  or:
//
//          nil
type ConnectToTargetAzureDbForMySqlTaskInputPtrInput interface {
	pulumi.Input

	ToConnectToTargetAzureDbForMySqlTaskInputPtrOutput() ConnectToTargetAzureDbForMySqlTaskInputPtrOutput
	ToConnectToTargetAzureDbForMySqlTaskInputPtrOutputWithContext(context.Context) ConnectToTargetAzureDbForMySqlTaskInputPtrOutput
}

type connectToTargetAzureDbForMySqlTaskInputPtrType ConnectToTargetAzureDbForMySqlTaskInputArgs

func ConnectToTargetAzureDbForMySqlTaskInputPtr(v *ConnectToTargetAzureDbForMySqlTaskInputArgs) ConnectToTargetAzureDbForMySqlTaskInputPtrInput {
	return (*connectToTargetAzureDbForMySqlTaskInputPtrType)(v)
}

func (*connectToTargetAzureDbForMySqlTaskInputPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ConnectToTargetAzureDbForMySqlTaskInput)(nil)).Elem()
}

func (i *connectToTargetAzureDbForMySqlTaskInputPtrType) ToConnectToTargetAzureDbForMySqlTaskInputPtrOutput() ConnectToTargetAzureDbForMySqlTaskInputPtrOutput {
	return i.ToConnectToTargetAzureDbForMySqlTaskInputPtrOutputWithContext(context.Background())
}

func (i *connectToTargetAzureDbForMySqlTaskInputPtrType) ToConnectToTargetAzureDbForMySqlTaskInputPtrOutputWithContext(ctx context.Context) ConnectToTargetAzureDbForMySqlTaskInputPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectToTargetAzureDbForMySqlTaskInputPtrOutput)
}

// Input for the task that validates connection to Azure Database for MySQL and target server requirements
type ConnectToTargetAzureDbForMySqlTaskInputResponse struct {
	// Connection information for source MySQL server
	SourceConnectionInfo MySqlConnectionInfoResponse `pulumi:"sourceConnectionInfo"`
	// Connection information for target Azure Database for MySQL server
	TargetConnectionInfo MySqlConnectionInfoResponse `pulumi:"targetConnectionInfo"`
}

// Input for the task that validates connection to Azure Database for MySQL and target server requirements
type ConnectToTargetAzureDbForMySqlTaskInputResponseOutput struct{ *pulumi.OutputState }

func (ConnectToTargetAzureDbForMySqlTaskInputResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectToTargetAzureDbForMySqlTaskInputResponse)(nil)).Elem()
}

func (o ConnectToTargetAzureDbForMySqlTaskInputResponseOutput) ToConnectToTargetAzureDbForMySqlTaskInputResponseOutput() ConnectToTargetAzureDbForMySqlTaskInputResponseOutput {
	return o
}

func (o ConnectToTargetAzureDbForMySqlTaskInputResponseOutput) ToConnectToTargetAzureDbForMySqlTaskInputResponseOutputWithContext(ctx context.Context) ConnectToTargetAzureDbForMySqlTaskInputResponseOutput {
	return o
}

func (o ConnectToTargetAzureDbForMySqlTaskInputResponseOutput) ToConnectToTargetAzureDbForMySqlTaskInputResponsePtrOutput() ConnectToTargetAzureDbForMySqlTaskInputResponsePtrOutput {
	return o.ToConnectToTargetAzureDbForMySqlTaskInputResponsePtrOutputWithContext(context.Background())
}

func (o ConnectToTargetAzureDbForMySqlTaskInputResponseOutput) ToConnectToTargetAzureDbForMySqlTaskInputResponsePtrOutputWithContext(ctx context.Context) ConnectToTargetAzureDbForMySqlTaskInputResponsePtrOutput {
	return o.ApplyT(func(v ConnectToTargetAzureDbForMySqlTaskInputResponse) *ConnectToTargetAzureDbForMySqlTaskInputResponse {
		return &v
	}).(ConnectToTargetAzureDbForMySqlTaskInputResponsePtrOutput)
}

// Connection information for source MySQL server
func (o ConnectToTargetAzureDbForMySqlTaskInputResponseOutput) SourceConnectionInfo() MySqlConnectionInfoResponseOutput {
	return o.ApplyT(func(v ConnectToTargetAzureDbForMySqlTaskInputResponse) MySqlConnectionInfoResponse {
		return v.SourceConnectionInfo
	}).(MySqlConnectionInfoResponseOutput)
}

// Connection information for target Azure Database for MySQL server
func (o ConnectToTargetAzureDbForMySqlTaskInputResponseOutput) TargetConnectionInfo() MySqlConnectionInfoResponseOutput {
	return o.ApplyT(func(v ConnectToTargetAzureDbForMySqlTaskInputResponse) MySqlConnectionInfoResponse {
		return v.TargetConnectionInfo
	}).(MySqlConnectionInfoResponseOutput)
}

type ConnectToTargetAzureDbForMySqlTaskInputResponsePtrOutput struct{ *pulumi.OutputState }

func (ConnectToTargetAzureDbForMySqlTaskInputResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ConnectToTargetAzureDbForMySqlTaskInputResponse)(nil)).Elem()
}

func (o ConnectToTargetAzureDbForMySqlTaskInputResponsePtrOutput) ToConnectToTargetAzureDbForMySqlTaskInputResponsePtrOutput() ConnectToTargetAzureDbForMySqlTaskInputResponsePtrOutput {
	return o
}

func (o ConnectToTargetAzureDbForMySqlTaskInputResponsePtrOutput) ToConnectToTargetAzureDbForMySqlTaskInputResponsePtrOutputWithContext(ctx context.Context) ConnectToTargetAzureDbForMySqlTaskInputResponsePtrOutput {
	return o
}

func (o ConnectToTargetAzureDbForMySqlTaskInputResponsePtrOutput) Elem() ConnectToTargetAzureDbForMySqlTaskInputResponseOutput {
	return o.ApplyT(func(v *ConnectToTargetAzureDbForMySqlTaskInputResponse) ConnectToTargetAzureDbForMySqlTaskInputResponse {
		return *v
	}).(ConnectToTargetAzureDbForMySqlTaskInputResponseOutput)
}

// Connection information for source MySQL server
func (o ConnectToTargetAzureDbForMySqlTaskInputResponsePtrOutput) SourceConnectionInfo() MySqlConnectionInfoResponsePtrOutput {
	return o.ApplyT(func(v *ConnectToTargetAzureDbForMySqlTaskInputResponse) *MySqlConnectionInfoResponse {
		if v == nil {
			return nil
		}
		return &v.SourceConnectionInfo
	}).(MySqlConnectionInfoResponsePtrOutput)
}

// Connection information for target Azure Database for MySQL server
func (o ConnectToTargetAzureDbForMySqlTaskInputResponsePtrOutput) TargetConnectionInfo() MySqlConnectionInfoResponsePtrOutput {
	return o.ApplyT(func(v *ConnectToTargetAzureDbForMySqlTaskInputResponse) *MySqlConnectionInfoResponse {
		if v == nil {
			return nil
		}
		return &v.TargetConnectionInfo
	}).(MySqlConnectionInfoResponsePtrOutput)
}

// Output for the task that validates connection to Azure Database for MySQL and target server requirements
type ConnectToTargetAzureDbForMySqlTaskOutputResponse struct {
	// List of databases on target server
	Databases []string `pulumi:"databases"`
	// Result identifier
	Id string `pulumi:"id"`
	// Version of the target server
	ServerVersion string `pulumi:"serverVersion"`
	// Target server brand version
	TargetServerBrandVersion string `pulumi:"targetServerBrandVersion"`
	// Validation errors associated with the task
	ValidationErrors []ReportableExceptionResponse `pulumi:"validationErrors"`
}

// Output for the task that validates connection to Azure Database for MySQL and target server requirements
type ConnectToTargetAzureDbForMySqlTaskOutputResponseOutput struct{ *pulumi.OutputState }

func (ConnectToTargetAzureDbForMySqlTaskOutputResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectToTargetAzureDbForMySqlTaskOutputResponse)(nil)).Elem()
}

func (o ConnectToTargetAzureDbForMySqlTaskOutputResponseOutput) ToConnectToTargetAzureDbForMySqlTaskOutputResponseOutput() ConnectToTargetAzureDbForMySqlTaskOutputResponseOutput {
	return o
}

func (o ConnectToTargetAzureDbForMySqlTaskOutputResponseOutput) ToConnectToTargetAzureDbForMySqlTaskOutputResponseOutputWithContext(ctx context.Context) ConnectToTargetAzureDbForMySqlTaskOutputResponseOutput {
	return o
}

// List of databases on target server
func (o ConnectToTargetAzureDbForMySqlTaskOutputResponseOutput) Databases() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ConnectToTargetAzureDbForMySqlTaskOutputResponse) []string { return v.Databases }).(pulumi.StringArrayOutput)
}

// Result identifier
func (o ConnectToTargetAzureDbForMySqlTaskOutputResponseOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectToTargetAzureDbForMySqlTaskOutputResponse) string { return v.Id }).(pulumi.StringOutput)
}

// Version of the target server
func (o ConnectToTargetAzureDbForMySqlTaskOutputResponseOutput) ServerVersion() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectToTargetAzureDbForMySqlTaskOutputResponse) string { return v.ServerVersion }).(pulumi.StringOutput)
}

// Target server brand version
func (o ConnectToTargetAzureDbForMySqlTaskOutputResponseOutput) TargetServerBrandVersion() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectToTargetAzureDbForMySqlTaskOutputResponse) string { return v.TargetServerBrandVersion }).(pulumi.StringOutput)
}

// Validation errors associated with the task
func (o ConnectToTargetAzureDbForMySqlTaskOutputResponseOutput) ValidationErrors() ReportableExceptionResponseArrayOutput {
	return o.ApplyT(func(v ConnectToTargetAzureDbForMySqlTaskOutputResponse) []ReportableExceptionResponse {
		return v.ValidationErrors
	}).(ReportableExceptionResponseArrayOutput)
}

type ConnectToTargetAzureDbForMySqlTaskOutputResponseArrayOutput struct{ *pulumi.OutputState }

func (ConnectToTargetAzureDbForMySqlTaskOutputResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ConnectToTargetAzureDbForMySqlTaskOutputResponse)(nil)).Elem()
}

func (o ConnectToTargetAzureDbForMySqlTaskOutputResponseArrayOutput) ToConnectToTargetAzureDbForMySqlTaskOutputResponseArrayOutput() ConnectToTargetAzureDbForMySqlTaskOutputResponseArrayOutput {
	return o
}

func (o ConnectToTargetAzureDbForMySqlTaskOutputResponseArrayOutput) ToConnectToTargetAzureDbForMySqlTaskOutputResponseArrayOutputWithContext(ctx context.Context) ConnectToTargetAzureDbForMySqlTaskOutputResponseArrayOutput {
	return o
}

func (o ConnectToTargetAzureDbForMySqlTaskOutputResponseArrayOutput) Index(i pulumi.IntInput) ConnectToTargetAzureDbForMySqlTaskOutputResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ConnectToTargetAzureDbForMySqlTaskOutputResponse {
		return vs[0].([]ConnectToTargetAzureDbForMySqlTaskOutputResponse)[vs[1].(int)]
	}).(ConnectToTargetAzureDbForMySqlTaskOutputResponseOutput)
}

// Properties for the task that validates connection to Azure Database for MySQL and target server requirements
type ConnectToTargetAzureDbForMySqlTaskProperties struct {
	// Key value pairs of client data to attach meta data information to task
	ClientData map[string]string `pulumi:"clientData"`
	// Task input
	Input *ConnectToTargetAzureDbForMySqlTaskInput `pulumi:"input"`
	// Task type.
	TaskType string `pulumi:"taskType"`
}

// ConnectToTargetAzureDbForMySqlTaskPropertiesInput is an input type that accepts ConnectToTargetAzureDbForMySqlTaskPropertiesArgs and ConnectToTargetAzureDbForMySqlTaskPropertiesOutput values.
// You can construct a concrete instance of `ConnectToTargetAzureDbForMySqlTaskPropertiesInput` via:
//
//          ConnectToTargetAzureDbForMySqlTaskPropertiesArgs{...}
type ConnectToTargetAzureDbForMySqlTaskPropertiesInput interface {
	pulumi.Input

	ToConnectToTargetAzureDbForMySqlTaskPropertiesOutput() ConnectToTargetAzureDbForMySqlTaskPropertiesOutput
	ToConnectToTargetAzureDbForMySqlTaskPropertiesOutputWithContext(context.Context) ConnectToTargetAzureDbForMySqlTaskPropertiesOutput
}

// Properties for the task that validates connection to Azure Database for MySQL and target server requirements
type ConnectToTargetAzureDbForMySqlTaskPropertiesArgs struct {
	// Key value pairs of client data to attach meta data information to task
	ClientData pulumi.StringMapInput `pulumi:"clientData"`
	// Task input
	Input ConnectToTargetAzureDbForMySqlTaskInputPtrInput `pulumi:"input"`
	// Task type.
	TaskType pulumi.StringInput `pulumi:"taskType"`
}

func (ConnectToTargetAzureDbForMySqlTaskPropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectToTargetAzureDbForMySqlTaskProperties)(nil)).Elem()
}

func (i ConnectToTargetAzureDbForMySqlTaskPropertiesArgs) ToConnectToTargetAzureDbForMySqlTaskPropertiesOutput() ConnectToTargetAzureDbForMySqlTaskPropertiesOutput {
	return i.ToConnectToTargetAzureDbForMySqlTaskPropertiesOutputWithContext(context.Background())
}

func (i ConnectToTargetAzureDbForMySqlTaskPropertiesArgs) ToConnectToTargetAzureDbForMySqlTaskPropertiesOutputWithContext(ctx context.Context) ConnectToTargetAzureDbForMySqlTaskPropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectToTargetAzureDbForMySqlTaskPropertiesOutput)
}

// Properties for the task that validates connection to Azure Database for MySQL and target server requirements
type ConnectToTargetAzureDbForMySqlTaskPropertiesResponse struct {
	// Key value pairs of client data to attach meta data information to task
	ClientData map[string]string `pulumi:"clientData"`
	// Array of command properties.
	Commands []interface{} `pulumi:"commands"`
	// Array of errors. This is ignored if submitted.
	Errors []ODataErrorResponse `pulumi:"errors"`
	// Task input
	Input *ConnectToTargetAzureDbForMySqlTaskInputResponse `pulumi:"input"`
	// Task output. This is ignored if submitted.
	Output []ConnectToTargetAzureDbForMySqlTaskOutputResponse `pulumi:"output"`
	// The state of the task. This is ignored if submitted.
	State string `pulumi:"state"`
	// Task type.
	TaskType string `pulumi:"taskType"`
}

// Properties for the task that validates connection to Azure Database for MySQL and target server requirements
type ConnectToTargetAzureDbForMySqlTaskPropertiesResponseOutput struct{ *pulumi.OutputState }

func (ConnectToTargetAzureDbForMySqlTaskPropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectToTargetAzureDbForMySqlTaskPropertiesResponse)(nil)).Elem()
}

func (o ConnectToTargetAzureDbForMySqlTaskPropertiesResponseOutput) ToConnectToTargetAzureDbForMySqlTaskPropertiesResponseOutput() ConnectToTargetAzureDbForMySqlTaskPropertiesResponseOutput {
	return o
}

func (o ConnectToTargetAzureDbForMySqlTaskPropertiesResponseOutput) ToConnectToTargetAzureDbForMySqlTaskPropertiesResponseOutputWithContext(ctx context.Context) ConnectToTargetAzureDbForMySqlTaskPropertiesResponseOutput {
	return o
}

// Key value pairs of client data to attach meta data information to task
func (o ConnectToTargetAzureDbForMySqlTaskPropertiesResponseOutput) ClientData() pulumi.StringMapOutput {
	return o.ApplyT(func(v ConnectToTargetAzureDbForMySqlTaskPropertiesResponse) map[string]string { return v.ClientData }).(pulumi.StringMapOutput)
}

// Array of command properties.
func (o ConnectToTargetAzureDbForMySqlTaskPropertiesResponseOutput) Commands() pulumi.ArrayOutput {
	return o.ApplyT(func(v ConnectToTargetAzureDbForMySqlTaskPropertiesResponse) []interface{} { return v.Commands }).(pulumi.ArrayOutput)
}

// Array of errors. This is ignored if submitted.
func (o ConnectToTargetAzureDbForMySqlTaskPropertiesResponseOutput) Errors() ODataErrorResponseArrayOutput {
	return o.ApplyT(func(v ConnectToTargetAzureDbForMySqlTaskPropertiesResponse) []ODataErrorResponse { return v.Errors }).(ODataErrorResponseArrayOutput)
}

// Task input
func (o ConnectToTargetAzureDbForMySqlTaskPropertiesResponseOutput) Input() ConnectToTargetAzureDbForMySqlTaskInputResponsePtrOutput {
	return o.ApplyT(func(v ConnectToTargetAzureDbForMySqlTaskPropertiesResponse) *ConnectToTargetAzureDbForMySqlTaskInputResponse {
		return v.Input
	}).(ConnectToTargetAzureDbForMySqlTaskInputResponsePtrOutput)
}

// Task output. This is ignored if submitted.
func (o ConnectToTargetAzureDbForMySqlTaskPropertiesResponseOutput) Output() ConnectToTargetAzureDbForMySqlTaskOutputResponseArrayOutput {
	return o.ApplyT(func(v ConnectToTargetAzureDbForMySqlTaskPropertiesResponse) []ConnectToTargetAzureDbForMySqlTaskOutputResponse {
		return v.Output
	}).(ConnectToTargetAzureDbForMySqlTaskOutputResponseArrayOutput)
}

// The state of the task. This is ignored if submitted.
func (o ConnectToTargetAzureDbForMySqlTaskPropertiesResponseOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectToTargetAzureDbForMySqlTaskPropertiesResponse) string { return v.State }).(pulumi.StringOutput)
}

// Task type.
func (o ConnectToTargetAzureDbForMySqlTaskPropertiesResponseOutput) TaskType() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectToTargetAzureDbForMySqlTaskPropertiesResponse) string { return v.TaskType }).(pulumi.StringOutput)
}

// Input for the task that validates connection to Azure Database for PostgreSQL and target server requirements
type ConnectToTargetAzureDbForPostgreSqlSyncTaskInput struct {
	// Connection information for source PostgreSQL server
	SourceConnectionInfo PostgreSqlConnectionInfo `pulumi:"sourceConnectionInfo"`
	// Connection information for target Azure Database for PostgreSQL server
	TargetConnectionInfo PostgreSqlConnectionInfo `pulumi:"targetConnectionInfo"`
}

// ConnectToTargetAzureDbForPostgreSqlSyncTaskInputInput is an input type that accepts ConnectToTargetAzureDbForPostgreSqlSyncTaskInputArgs and ConnectToTargetAzureDbForPostgreSqlSyncTaskInputOutput values.
// You can construct a concrete instance of `ConnectToTargetAzureDbForPostgreSqlSyncTaskInputInput` via:
//
//          ConnectToTargetAzureDbForPostgreSqlSyncTaskInputArgs{...}
type ConnectToTargetAzureDbForPostgreSqlSyncTaskInputInput interface {
	pulumi.Input

	ToConnectToTargetAzureDbForPostgreSqlSyncTaskInputOutput() ConnectToTargetAzureDbForPostgreSqlSyncTaskInputOutput
	ToConnectToTargetAzureDbForPostgreSqlSyncTaskInputOutputWithContext(context.Context) ConnectToTargetAzureDbForPostgreSqlSyncTaskInputOutput
}

// Input for the task that validates connection to Azure Database for PostgreSQL and target server requirements
type ConnectToTargetAzureDbForPostgreSqlSyncTaskInputArgs struct {
	// Connection information for source PostgreSQL server
	SourceConnectionInfo PostgreSqlConnectionInfoInput `pulumi:"sourceConnectionInfo"`
	// Connection information for target Azure Database for PostgreSQL server
	TargetConnectionInfo PostgreSqlConnectionInfoInput `pulumi:"targetConnectionInfo"`
}

func (ConnectToTargetAzureDbForPostgreSqlSyncTaskInputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectToTargetAzureDbForPostgreSqlSyncTaskInput)(nil)).Elem()
}

func (i ConnectToTargetAzureDbForPostgreSqlSyncTaskInputArgs) ToConnectToTargetAzureDbForPostgreSqlSyncTaskInputOutput() ConnectToTargetAzureDbForPostgreSqlSyncTaskInputOutput {
	return i.ToConnectToTargetAzureDbForPostgreSqlSyncTaskInputOutputWithContext(context.Background())
}

func (i ConnectToTargetAzureDbForPostgreSqlSyncTaskInputArgs) ToConnectToTargetAzureDbForPostgreSqlSyncTaskInputOutputWithContext(ctx context.Context) ConnectToTargetAzureDbForPostgreSqlSyncTaskInputOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectToTargetAzureDbForPostgreSqlSyncTaskInputOutput)
}

func (i ConnectToTargetAzureDbForPostgreSqlSyncTaskInputArgs) ToConnectToTargetAzureDbForPostgreSqlSyncTaskInputPtrOutput() ConnectToTargetAzureDbForPostgreSqlSyncTaskInputPtrOutput {
	return i.ToConnectToTargetAzureDbForPostgreSqlSyncTaskInputPtrOutputWithContext(context.Background())
}

func (i ConnectToTargetAzureDbForPostgreSqlSyncTaskInputArgs) ToConnectToTargetAzureDbForPostgreSqlSyncTaskInputPtrOutputWithContext(ctx context.Context) ConnectToTargetAzureDbForPostgreSqlSyncTaskInputPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectToTargetAzureDbForPostgreSqlSyncTaskInputOutput).ToConnectToTargetAzureDbForPostgreSqlSyncTaskInputPtrOutputWithContext(ctx)
}

// ConnectToTargetAzureDbForPostgreSqlSyncTaskInputPtrInput is an input type that accepts ConnectToTargetAzureDbForPostgreSqlSyncTaskInputArgs, ConnectToTargetAzureDbForPostgreSqlSyncTaskInputPtr and ConnectToTargetAzureDbForPostgreSqlSyncTaskInputPtrOutput values.
// You can construct a concrete instance of `ConnectToTargetAzureDbForPostgreSqlSyncTaskInputPtrInput` via:
//
//          ConnectToTargetAzureDbForPostgreSqlSyncTaskInputArgs{...}
//
//  or:
//
//          nil
type ConnectToTargetAzureDbForPostgreSqlSyncTaskInputPtrInput interface {
	pulumi.Input

	ToConnectToTargetAzureDbForPostgreSqlSyncTaskInputPtrOutput() ConnectToTargetAzureDbForPostgreSqlSyncTaskInputPtrOutput
	ToConnectToTargetAzureDbForPostgreSqlSyncTaskInputPtrOutputWithContext(context.Context) ConnectToTargetAzureDbForPostgreSqlSyncTaskInputPtrOutput
}

type connectToTargetAzureDbForPostgreSqlSyncTaskInputPtrType ConnectToTargetAzureDbForPostgreSqlSyncTaskInputArgs

func ConnectToTargetAzureDbForPostgreSqlSyncTaskInputPtr(v *ConnectToTargetAzureDbForPostgreSqlSyncTaskInputArgs) ConnectToTargetAzureDbForPostgreSqlSyncTaskInputPtrInput {
	return (*connectToTargetAzureDbForPostgreSqlSyncTaskInputPtrType)(v)
}

func (*connectToTargetAzureDbForPostgreSqlSyncTaskInputPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ConnectToTargetAzureDbForPostgreSqlSyncTaskInput)(nil)).Elem()
}

func (i *connectToTargetAzureDbForPostgreSqlSyncTaskInputPtrType) ToConnectToTargetAzureDbForPostgreSqlSyncTaskInputPtrOutput() ConnectToTargetAzureDbForPostgreSqlSyncTaskInputPtrOutput {
	return i.ToConnectToTargetAzureDbForPostgreSqlSyncTaskInputPtrOutputWithContext(context.Background())
}

func (i *connectToTargetAzureDbForPostgreSqlSyncTaskInputPtrType) ToConnectToTargetAzureDbForPostgreSqlSyncTaskInputPtrOutputWithContext(ctx context.Context) ConnectToTargetAzureDbForPostgreSqlSyncTaskInputPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectToTargetAzureDbForPostgreSqlSyncTaskInputPtrOutput)
}

// Input for the task that validates connection to Azure Database for PostgreSQL and target server requirements
type ConnectToTargetAzureDbForPostgreSqlSyncTaskInputResponse struct {
	// Connection information for source PostgreSQL server
	SourceConnectionInfo PostgreSqlConnectionInfoResponse `pulumi:"sourceConnectionInfo"`
	// Connection information for target Azure Database for PostgreSQL server
	TargetConnectionInfo PostgreSqlConnectionInfoResponse `pulumi:"targetConnectionInfo"`
}

// Input for the task that validates connection to Azure Database for PostgreSQL and target server requirements
type ConnectToTargetAzureDbForPostgreSqlSyncTaskInputResponseOutput struct{ *pulumi.OutputState }

func (ConnectToTargetAzureDbForPostgreSqlSyncTaskInputResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectToTargetAzureDbForPostgreSqlSyncTaskInputResponse)(nil)).Elem()
}

func (o ConnectToTargetAzureDbForPostgreSqlSyncTaskInputResponseOutput) ToConnectToTargetAzureDbForPostgreSqlSyncTaskInputResponseOutput() ConnectToTargetAzureDbForPostgreSqlSyncTaskInputResponseOutput {
	return o
}

func (o ConnectToTargetAzureDbForPostgreSqlSyncTaskInputResponseOutput) ToConnectToTargetAzureDbForPostgreSqlSyncTaskInputResponseOutputWithContext(ctx context.Context) ConnectToTargetAzureDbForPostgreSqlSyncTaskInputResponseOutput {
	return o
}

func (o ConnectToTargetAzureDbForPostgreSqlSyncTaskInputResponseOutput) ToConnectToTargetAzureDbForPostgreSqlSyncTaskInputResponsePtrOutput() ConnectToTargetAzureDbForPostgreSqlSyncTaskInputResponsePtrOutput {
	return o.ToConnectToTargetAzureDbForPostgreSqlSyncTaskInputResponsePtrOutputWithContext(context.Background())
}

func (o ConnectToTargetAzureDbForPostgreSqlSyncTaskInputResponseOutput) ToConnectToTargetAzureDbForPostgreSqlSyncTaskInputResponsePtrOutputWithContext(ctx context.Context) ConnectToTargetAzureDbForPostgreSqlSyncTaskInputResponsePtrOutput {
	return o.ApplyT(func(v ConnectToTargetAzureDbForPostgreSqlSyncTaskInputResponse) *ConnectToTargetAzureDbForPostgreSqlSyncTaskInputResponse {
		return &v
	}).(ConnectToTargetAzureDbForPostgreSqlSyncTaskInputResponsePtrOutput)
}

// Connection information for source PostgreSQL server
func (o ConnectToTargetAzureDbForPostgreSqlSyncTaskInputResponseOutput) SourceConnectionInfo() PostgreSqlConnectionInfoResponseOutput {
	return o.ApplyT(func(v ConnectToTargetAzureDbForPostgreSqlSyncTaskInputResponse) PostgreSqlConnectionInfoResponse {
		return v.SourceConnectionInfo
	}).(PostgreSqlConnectionInfoResponseOutput)
}

// Connection information for target Azure Database for PostgreSQL server
func (o ConnectToTargetAzureDbForPostgreSqlSyncTaskInputResponseOutput) TargetConnectionInfo() PostgreSqlConnectionInfoResponseOutput {
	return o.ApplyT(func(v ConnectToTargetAzureDbForPostgreSqlSyncTaskInputResponse) PostgreSqlConnectionInfoResponse {
		return v.TargetConnectionInfo
	}).(PostgreSqlConnectionInfoResponseOutput)
}

type ConnectToTargetAzureDbForPostgreSqlSyncTaskInputResponsePtrOutput struct{ *pulumi.OutputState }

func (ConnectToTargetAzureDbForPostgreSqlSyncTaskInputResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ConnectToTargetAzureDbForPostgreSqlSyncTaskInputResponse)(nil)).Elem()
}

func (o ConnectToTargetAzureDbForPostgreSqlSyncTaskInputResponsePtrOutput) ToConnectToTargetAzureDbForPostgreSqlSyncTaskInputResponsePtrOutput() ConnectToTargetAzureDbForPostgreSqlSyncTaskInputResponsePtrOutput {
	return o
}

func (o ConnectToTargetAzureDbForPostgreSqlSyncTaskInputResponsePtrOutput) ToConnectToTargetAzureDbForPostgreSqlSyncTaskInputResponsePtrOutputWithContext(ctx context.Context) ConnectToTargetAzureDbForPostgreSqlSyncTaskInputResponsePtrOutput {
	return o
}

func (o ConnectToTargetAzureDbForPostgreSqlSyncTaskInputResponsePtrOutput) Elem() ConnectToTargetAzureDbForPostgreSqlSyncTaskInputResponseOutput {
	return o.ApplyT(func(v *ConnectToTargetAzureDbForPostgreSqlSyncTaskInputResponse) ConnectToTargetAzureDbForPostgreSqlSyncTaskInputResponse {
		return *v
	}).(ConnectToTargetAzureDbForPostgreSqlSyncTaskInputResponseOutput)
}

// Connection information for source PostgreSQL server
func (o ConnectToTargetAzureDbForPostgreSqlSyncTaskInputResponsePtrOutput) SourceConnectionInfo() PostgreSqlConnectionInfoResponsePtrOutput {
	return o.ApplyT(func(v *ConnectToTargetAzureDbForPostgreSqlSyncTaskInputResponse) *PostgreSqlConnectionInfoResponse {
		if v == nil {
			return nil
		}
		return &v.SourceConnectionInfo
	}).(PostgreSqlConnectionInfoResponsePtrOutput)
}

// Connection information for target Azure Database for PostgreSQL server
func (o ConnectToTargetAzureDbForPostgreSqlSyncTaskInputResponsePtrOutput) TargetConnectionInfo() PostgreSqlConnectionInfoResponsePtrOutput {
	return o.ApplyT(func(v *ConnectToTargetAzureDbForPostgreSqlSyncTaskInputResponse) *PostgreSqlConnectionInfoResponse {
		if v == nil {
			return nil
		}
		return &v.TargetConnectionInfo
	}).(PostgreSqlConnectionInfoResponsePtrOutput)
}

// Output for the task that validates connection to Azure Database for PostgreSQL and target server requirements
type ConnectToTargetAzureDbForPostgreSqlSyncTaskOutputResponse struct {
	// List of databases on target server
	Databases []string `pulumi:"databases"`
	// Result identifier
	Id string `pulumi:"id"`
	// Target server brand version
	TargetServerBrandVersion string `pulumi:"targetServerBrandVersion"`
	// Version of the target server
	TargetServerVersion string `pulumi:"targetServerVersion"`
	// Validation errors associated with the task
	ValidationErrors []ReportableExceptionResponse `pulumi:"validationErrors"`
}

// Output for the task that validates connection to Azure Database for PostgreSQL and target server requirements
type ConnectToTargetAzureDbForPostgreSqlSyncTaskOutputResponseOutput struct{ *pulumi.OutputState }

func (ConnectToTargetAzureDbForPostgreSqlSyncTaskOutputResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectToTargetAzureDbForPostgreSqlSyncTaskOutputResponse)(nil)).Elem()
}

func (o ConnectToTargetAzureDbForPostgreSqlSyncTaskOutputResponseOutput) ToConnectToTargetAzureDbForPostgreSqlSyncTaskOutputResponseOutput() ConnectToTargetAzureDbForPostgreSqlSyncTaskOutputResponseOutput {
	return o
}

func (o ConnectToTargetAzureDbForPostgreSqlSyncTaskOutputResponseOutput) ToConnectToTargetAzureDbForPostgreSqlSyncTaskOutputResponseOutputWithContext(ctx context.Context) ConnectToTargetAzureDbForPostgreSqlSyncTaskOutputResponseOutput {
	return o
}

// List of databases on target server
func (o ConnectToTargetAzureDbForPostgreSqlSyncTaskOutputResponseOutput) Databases() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ConnectToTargetAzureDbForPostgreSqlSyncTaskOutputResponse) []string { return v.Databases }).(pulumi.StringArrayOutput)
}

// Result identifier
func (o ConnectToTargetAzureDbForPostgreSqlSyncTaskOutputResponseOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectToTargetAzureDbForPostgreSqlSyncTaskOutputResponse) string { return v.Id }).(pulumi.StringOutput)
}

// Target server brand version
func (o ConnectToTargetAzureDbForPostgreSqlSyncTaskOutputResponseOutput) TargetServerBrandVersion() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectToTargetAzureDbForPostgreSqlSyncTaskOutputResponse) string {
		return v.TargetServerBrandVersion
	}).(pulumi.StringOutput)
}

// Version of the target server
func (o ConnectToTargetAzureDbForPostgreSqlSyncTaskOutputResponseOutput) TargetServerVersion() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectToTargetAzureDbForPostgreSqlSyncTaskOutputResponse) string { return v.TargetServerVersion }).(pulumi.StringOutput)
}

// Validation errors associated with the task
func (o ConnectToTargetAzureDbForPostgreSqlSyncTaskOutputResponseOutput) ValidationErrors() ReportableExceptionResponseArrayOutput {
	return o.ApplyT(func(v ConnectToTargetAzureDbForPostgreSqlSyncTaskOutputResponse) []ReportableExceptionResponse {
		return v.ValidationErrors
	}).(ReportableExceptionResponseArrayOutput)
}

type ConnectToTargetAzureDbForPostgreSqlSyncTaskOutputResponseArrayOutput struct{ *pulumi.OutputState }

func (ConnectToTargetAzureDbForPostgreSqlSyncTaskOutputResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ConnectToTargetAzureDbForPostgreSqlSyncTaskOutputResponse)(nil)).Elem()
}

func (o ConnectToTargetAzureDbForPostgreSqlSyncTaskOutputResponseArrayOutput) ToConnectToTargetAzureDbForPostgreSqlSyncTaskOutputResponseArrayOutput() ConnectToTargetAzureDbForPostgreSqlSyncTaskOutputResponseArrayOutput {
	return o
}

func (o ConnectToTargetAzureDbForPostgreSqlSyncTaskOutputResponseArrayOutput) ToConnectToTargetAzureDbForPostgreSqlSyncTaskOutputResponseArrayOutputWithContext(ctx context.Context) ConnectToTargetAzureDbForPostgreSqlSyncTaskOutputResponseArrayOutput {
	return o
}

func (o ConnectToTargetAzureDbForPostgreSqlSyncTaskOutputResponseArrayOutput) Index(i pulumi.IntInput) ConnectToTargetAzureDbForPostgreSqlSyncTaskOutputResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ConnectToTargetAzureDbForPostgreSqlSyncTaskOutputResponse {
		return vs[0].([]ConnectToTargetAzureDbForPostgreSqlSyncTaskOutputResponse)[vs[1].(int)]
	}).(ConnectToTargetAzureDbForPostgreSqlSyncTaskOutputResponseOutput)
}

// Properties for the task that validates connection to Azure Database For PostgreSQL server and target server requirements for online migration
type ConnectToTargetAzureDbForPostgreSqlSyncTaskProperties struct {
	// Key value pairs of client data to attach meta data information to task
	ClientData map[string]string `pulumi:"clientData"`
	// Task input
	Input *ConnectToTargetAzureDbForPostgreSqlSyncTaskInput `pulumi:"input"`
	// Task type.
	TaskType string `pulumi:"taskType"`
}

// ConnectToTargetAzureDbForPostgreSqlSyncTaskPropertiesInput is an input type that accepts ConnectToTargetAzureDbForPostgreSqlSyncTaskPropertiesArgs and ConnectToTargetAzureDbForPostgreSqlSyncTaskPropertiesOutput values.
// You can construct a concrete instance of `ConnectToTargetAzureDbForPostgreSqlSyncTaskPropertiesInput` via:
//
//          ConnectToTargetAzureDbForPostgreSqlSyncTaskPropertiesArgs{...}
type ConnectToTargetAzureDbForPostgreSqlSyncTaskPropertiesInput interface {
	pulumi.Input

	ToConnectToTargetAzureDbForPostgreSqlSyncTaskPropertiesOutput() ConnectToTargetAzureDbForPostgreSqlSyncTaskPropertiesOutput
	ToConnectToTargetAzureDbForPostgreSqlSyncTaskPropertiesOutputWithContext(context.Context) ConnectToTargetAzureDbForPostgreSqlSyncTaskPropertiesOutput
}

// Properties for the task that validates connection to Azure Database For PostgreSQL server and target server requirements for online migration
type ConnectToTargetAzureDbForPostgreSqlSyncTaskPropertiesArgs struct {
	// Key value pairs of client data to attach meta data information to task
	ClientData pulumi.StringMapInput `pulumi:"clientData"`
	// Task input
	Input ConnectToTargetAzureDbForPostgreSqlSyncTaskInputPtrInput `pulumi:"input"`
	// Task type.
	TaskType pulumi.StringInput `pulumi:"taskType"`
}

func (ConnectToTargetAzureDbForPostgreSqlSyncTaskPropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectToTargetAzureDbForPostgreSqlSyncTaskProperties)(nil)).Elem()
}

func (i ConnectToTargetAzureDbForPostgreSqlSyncTaskPropertiesArgs) ToConnectToTargetAzureDbForPostgreSqlSyncTaskPropertiesOutput() ConnectToTargetAzureDbForPostgreSqlSyncTaskPropertiesOutput {
	return i.ToConnectToTargetAzureDbForPostgreSqlSyncTaskPropertiesOutputWithContext(context.Background())
}

func (i ConnectToTargetAzureDbForPostgreSqlSyncTaskPropertiesArgs) ToConnectToTargetAzureDbForPostgreSqlSyncTaskPropertiesOutputWithContext(ctx context.Context) ConnectToTargetAzureDbForPostgreSqlSyncTaskPropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectToTargetAzureDbForPostgreSqlSyncTaskPropertiesOutput)
}

// Properties for the task that validates connection to Azure Database For PostgreSQL server and target server requirements for online migration
type ConnectToTargetAzureDbForPostgreSqlSyncTaskPropertiesResponse struct {
	// Key value pairs of client data to attach meta data information to task
	ClientData map[string]string `pulumi:"clientData"`
	// Array of command properties.
	Commands []interface{} `pulumi:"commands"`
	// Array of errors. This is ignored if submitted.
	Errors []ODataErrorResponse `pulumi:"errors"`
	// Task input
	Input *ConnectToTargetAzureDbForPostgreSqlSyncTaskInputResponse `pulumi:"input"`
	// Task output. This is ignored if submitted.
	Output []ConnectToTargetAzureDbForPostgreSqlSyncTaskOutputResponse `pulumi:"output"`
	// The state of the task. This is ignored if submitted.
	State string `pulumi:"state"`
	// Task type.
	TaskType string `pulumi:"taskType"`
}

// Properties for the task that validates connection to Azure Database For PostgreSQL server and target server requirements for online migration
type ConnectToTargetAzureDbForPostgreSqlSyncTaskPropertiesResponseOutput struct{ *pulumi.OutputState }

func (ConnectToTargetAzureDbForPostgreSqlSyncTaskPropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectToTargetAzureDbForPostgreSqlSyncTaskPropertiesResponse)(nil)).Elem()
}

func (o ConnectToTargetAzureDbForPostgreSqlSyncTaskPropertiesResponseOutput) ToConnectToTargetAzureDbForPostgreSqlSyncTaskPropertiesResponseOutput() ConnectToTargetAzureDbForPostgreSqlSyncTaskPropertiesResponseOutput {
	return o
}

func (o ConnectToTargetAzureDbForPostgreSqlSyncTaskPropertiesResponseOutput) ToConnectToTargetAzureDbForPostgreSqlSyncTaskPropertiesResponseOutputWithContext(ctx context.Context) ConnectToTargetAzureDbForPostgreSqlSyncTaskPropertiesResponseOutput {
	return o
}

// Key value pairs of client data to attach meta data information to task
func (o ConnectToTargetAzureDbForPostgreSqlSyncTaskPropertiesResponseOutput) ClientData() pulumi.StringMapOutput {
	return o.ApplyT(func(v ConnectToTargetAzureDbForPostgreSqlSyncTaskPropertiesResponse) map[string]string {
		return v.ClientData
	}).(pulumi.StringMapOutput)
}

// Array of command properties.
func (o ConnectToTargetAzureDbForPostgreSqlSyncTaskPropertiesResponseOutput) Commands() pulumi.ArrayOutput {
	return o.ApplyT(func(v ConnectToTargetAzureDbForPostgreSqlSyncTaskPropertiesResponse) []interface{} { return v.Commands }).(pulumi.ArrayOutput)
}

// Array of errors. This is ignored if submitted.
func (o ConnectToTargetAzureDbForPostgreSqlSyncTaskPropertiesResponseOutput) Errors() ODataErrorResponseArrayOutput {
	return o.ApplyT(func(v ConnectToTargetAzureDbForPostgreSqlSyncTaskPropertiesResponse) []ODataErrorResponse {
		return v.Errors
	}).(ODataErrorResponseArrayOutput)
}

// Task input
func (o ConnectToTargetAzureDbForPostgreSqlSyncTaskPropertiesResponseOutput) Input() ConnectToTargetAzureDbForPostgreSqlSyncTaskInputResponsePtrOutput {
	return o.ApplyT(func(v ConnectToTargetAzureDbForPostgreSqlSyncTaskPropertiesResponse) *ConnectToTargetAzureDbForPostgreSqlSyncTaskInputResponse {
		return v.Input
	}).(ConnectToTargetAzureDbForPostgreSqlSyncTaskInputResponsePtrOutput)
}

// Task output. This is ignored if submitted.
func (o ConnectToTargetAzureDbForPostgreSqlSyncTaskPropertiesResponseOutput) Output() ConnectToTargetAzureDbForPostgreSqlSyncTaskOutputResponseArrayOutput {
	return o.ApplyT(func(v ConnectToTargetAzureDbForPostgreSqlSyncTaskPropertiesResponse) []ConnectToTargetAzureDbForPostgreSqlSyncTaskOutputResponse {
		return v.Output
	}).(ConnectToTargetAzureDbForPostgreSqlSyncTaskOutputResponseArrayOutput)
}

// The state of the task. This is ignored if submitted.
func (o ConnectToTargetAzureDbForPostgreSqlSyncTaskPropertiesResponseOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectToTargetAzureDbForPostgreSqlSyncTaskPropertiesResponse) string { return v.State }).(pulumi.StringOutput)
}

// Task type.
func (o ConnectToTargetAzureDbForPostgreSqlSyncTaskPropertiesResponseOutput) TaskType() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectToTargetAzureDbForPostgreSqlSyncTaskPropertiesResponse) string { return v.TaskType }).(pulumi.StringOutput)
}

// Input for the task that validates connection to Azure Database for PostgreSQL and target server requirements for Oracle source.
type ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskInput struct {
	// Connection information for target Azure Database for PostgreSQL server
	TargetConnectionInfo PostgreSqlConnectionInfo `pulumi:"targetConnectionInfo"`
}

// ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskInputInput is an input type that accepts ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskInputArgs and ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskInputOutput values.
// You can construct a concrete instance of `ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskInputInput` via:
//
//          ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskInputArgs{...}
type ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskInputInput interface {
	pulumi.Input

	ToConnectToTargetOracleAzureDbForPostgreSqlSyncTaskInputOutput() ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskInputOutput
	ToConnectToTargetOracleAzureDbForPostgreSqlSyncTaskInputOutputWithContext(context.Context) ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskInputOutput
}

// Input for the task that validates connection to Azure Database for PostgreSQL and target server requirements for Oracle source.
type ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskInputArgs struct {
	// Connection information for target Azure Database for PostgreSQL server
	TargetConnectionInfo PostgreSqlConnectionInfoInput `pulumi:"targetConnectionInfo"`
}

func (ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskInputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskInput)(nil)).Elem()
}

func (i ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskInputArgs) ToConnectToTargetOracleAzureDbForPostgreSqlSyncTaskInputOutput() ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskInputOutput {
	return i.ToConnectToTargetOracleAzureDbForPostgreSqlSyncTaskInputOutputWithContext(context.Background())
}

func (i ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskInputArgs) ToConnectToTargetOracleAzureDbForPostgreSqlSyncTaskInputOutputWithContext(ctx context.Context) ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskInputOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskInputOutput)
}

func (i ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskInputArgs) ToConnectToTargetOracleAzureDbForPostgreSqlSyncTaskInputPtrOutput() ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskInputPtrOutput {
	return i.ToConnectToTargetOracleAzureDbForPostgreSqlSyncTaskInputPtrOutputWithContext(context.Background())
}

func (i ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskInputArgs) ToConnectToTargetOracleAzureDbForPostgreSqlSyncTaskInputPtrOutputWithContext(ctx context.Context) ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskInputPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskInputOutput).ToConnectToTargetOracleAzureDbForPostgreSqlSyncTaskInputPtrOutputWithContext(ctx)
}

// ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskInputPtrInput is an input type that accepts ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskInputArgs, ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskInputPtr and ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskInputPtrOutput values.
// You can construct a concrete instance of `ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskInputPtrInput` via:
//
//          ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskInputArgs{...}
//
//  or:
//
//          nil
type ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskInputPtrInput interface {
	pulumi.Input

	ToConnectToTargetOracleAzureDbForPostgreSqlSyncTaskInputPtrOutput() ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskInputPtrOutput
	ToConnectToTargetOracleAzureDbForPostgreSqlSyncTaskInputPtrOutputWithContext(context.Context) ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskInputPtrOutput
}

type connectToTargetOracleAzureDbForPostgreSqlSyncTaskInputPtrType ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskInputArgs

func ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskInputPtr(v *ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskInputArgs) ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskInputPtrInput {
	return (*connectToTargetOracleAzureDbForPostgreSqlSyncTaskInputPtrType)(v)
}

func (*connectToTargetOracleAzureDbForPostgreSqlSyncTaskInputPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskInput)(nil)).Elem()
}

func (i *connectToTargetOracleAzureDbForPostgreSqlSyncTaskInputPtrType) ToConnectToTargetOracleAzureDbForPostgreSqlSyncTaskInputPtrOutput() ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskInputPtrOutput {
	return i.ToConnectToTargetOracleAzureDbForPostgreSqlSyncTaskInputPtrOutputWithContext(context.Background())
}

func (i *connectToTargetOracleAzureDbForPostgreSqlSyncTaskInputPtrType) ToConnectToTargetOracleAzureDbForPostgreSqlSyncTaskInputPtrOutputWithContext(ctx context.Context) ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskInputPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskInputPtrOutput)
}

// Input for the task that validates connection to Azure Database for PostgreSQL and target server requirements for Oracle source.
type ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskInputResponse struct {
	// Connection information for target Azure Database for PostgreSQL server
	TargetConnectionInfo PostgreSqlConnectionInfoResponse `pulumi:"targetConnectionInfo"`
}

// Input for the task that validates connection to Azure Database for PostgreSQL and target server requirements for Oracle source.
type ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskInputResponseOutput struct{ *pulumi.OutputState }

func (ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskInputResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskInputResponse)(nil)).Elem()
}

func (o ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskInputResponseOutput) ToConnectToTargetOracleAzureDbForPostgreSqlSyncTaskInputResponseOutput() ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskInputResponseOutput {
	return o
}

func (o ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskInputResponseOutput) ToConnectToTargetOracleAzureDbForPostgreSqlSyncTaskInputResponseOutputWithContext(ctx context.Context) ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskInputResponseOutput {
	return o
}

func (o ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskInputResponseOutput) ToConnectToTargetOracleAzureDbForPostgreSqlSyncTaskInputResponsePtrOutput() ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskInputResponsePtrOutput {
	return o.ToConnectToTargetOracleAzureDbForPostgreSqlSyncTaskInputResponsePtrOutputWithContext(context.Background())
}

func (o ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskInputResponseOutput) ToConnectToTargetOracleAzureDbForPostgreSqlSyncTaskInputResponsePtrOutputWithContext(ctx context.Context) ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskInputResponsePtrOutput {
	return o.ApplyT(func(v ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskInputResponse) *ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskInputResponse {
		return &v
	}).(ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskInputResponsePtrOutput)
}

// Connection information for target Azure Database for PostgreSQL server
func (o ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskInputResponseOutput) TargetConnectionInfo() PostgreSqlConnectionInfoResponseOutput {
	return o.ApplyT(func(v ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskInputResponse) PostgreSqlConnectionInfoResponse {
		return v.TargetConnectionInfo
	}).(PostgreSqlConnectionInfoResponseOutput)
}

type ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskInputResponsePtrOutput struct{ *pulumi.OutputState }

func (ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskInputResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskInputResponse)(nil)).Elem()
}

func (o ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskInputResponsePtrOutput) ToConnectToTargetOracleAzureDbForPostgreSqlSyncTaskInputResponsePtrOutput() ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskInputResponsePtrOutput {
	return o
}

func (o ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskInputResponsePtrOutput) ToConnectToTargetOracleAzureDbForPostgreSqlSyncTaskInputResponsePtrOutputWithContext(ctx context.Context) ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskInputResponsePtrOutput {
	return o
}

func (o ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskInputResponsePtrOutput) Elem() ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskInputResponseOutput {
	return o.ApplyT(func(v *ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskInputResponse) ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskInputResponse {
		return *v
	}).(ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskInputResponseOutput)
}

// Connection information for target Azure Database for PostgreSQL server
func (o ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskInputResponsePtrOutput) TargetConnectionInfo() PostgreSqlConnectionInfoResponsePtrOutput {
	return o.ApplyT(func(v *ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskInputResponse) *PostgreSqlConnectionInfoResponse {
		if v == nil {
			return nil
		}
		return &v.TargetConnectionInfo
	}).(PostgreSqlConnectionInfoResponsePtrOutput)
}

// Output for the task that validates connection to Azure Database for PostgreSQL and target server requirements for Oracle source.
type ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskOutputResponse struct {
	// Mapping of schemas per database
	DatabaseSchemaMap []ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskOutputResponseDatabaseSchemaMap `pulumi:"databaseSchemaMap"`
	// List of databases on target server
	Databases []string `pulumi:"databases"`
	// Target server brand version
	TargetServerBrandVersion string `pulumi:"targetServerBrandVersion"`
	// Version of the target server
	TargetServerVersion string `pulumi:"targetServerVersion"`
	// Validation errors associated with the task
	ValidationErrors []ReportableExceptionResponse `pulumi:"validationErrors"`
}

// Output for the task that validates connection to Azure Database for PostgreSQL and target server requirements for Oracle source.
type ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskOutputResponseOutput struct{ *pulumi.OutputState }

func (ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskOutputResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskOutputResponse)(nil)).Elem()
}

func (o ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskOutputResponseOutput) ToConnectToTargetOracleAzureDbForPostgreSqlSyncTaskOutputResponseOutput() ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskOutputResponseOutput {
	return o
}

func (o ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskOutputResponseOutput) ToConnectToTargetOracleAzureDbForPostgreSqlSyncTaskOutputResponseOutputWithContext(ctx context.Context) ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskOutputResponseOutput {
	return o
}

// Mapping of schemas per database
func (o ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskOutputResponseOutput) DatabaseSchemaMap() ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskOutputResponseDatabaseSchemaMapArrayOutput {
	return o.ApplyT(func(v ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskOutputResponse) []ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskOutputResponseDatabaseSchemaMap {
		return v.DatabaseSchemaMap
	}).(ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskOutputResponseDatabaseSchemaMapArrayOutput)
}

// List of databases on target server
func (o ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskOutputResponseOutput) Databases() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskOutputResponse) []string { return v.Databases }).(pulumi.StringArrayOutput)
}

// Target server brand version
func (o ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskOutputResponseOutput) TargetServerBrandVersion() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskOutputResponse) string {
		return v.TargetServerBrandVersion
	}).(pulumi.StringOutput)
}

// Version of the target server
func (o ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskOutputResponseOutput) TargetServerVersion() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskOutputResponse) string {
		return v.TargetServerVersion
	}).(pulumi.StringOutput)
}

// Validation errors associated with the task
func (o ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskOutputResponseOutput) ValidationErrors() ReportableExceptionResponseArrayOutput {
	return o.ApplyT(func(v ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskOutputResponse) []ReportableExceptionResponse {
		return v.ValidationErrors
	}).(ReportableExceptionResponseArrayOutput)
}

type ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskOutputResponseArrayOutput struct{ *pulumi.OutputState }

func (ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskOutputResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskOutputResponse)(nil)).Elem()
}

func (o ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskOutputResponseArrayOutput) ToConnectToTargetOracleAzureDbForPostgreSqlSyncTaskOutputResponseArrayOutput() ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskOutputResponseArrayOutput {
	return o
}

func (o ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskOutputResponseArrayOutput) ToConnectToTargetOracleAzureDbForPostgreSqlSyncTaskOutputResponseArrayOutputWithContext(ctx context.Context) ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskOutputResponseArrayOutput {
	return o
}

func (o ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskOutputResponseArrayOutput) Index(i pulumi.IntInput) ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskOutputResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskOutputResponse {
		return vs[0].([]ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskOutputResponse)[vs[1].(int)]
	}).(ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskOutputResponseOutput)
}

type ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskOutputResponseDatabaseSchemaMap struct {
	Database *string  `pulumi:"database"`
	Schemas  []string `pulumi:"schemas"`
}

type ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskOutputResponseDatabaseSchemaMapOutput struct{ *pulumi.OutputState }

func (ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskOutputResponseDatabaseSchemaMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskOutputResponseDatabaseSchemaMap)(nil)).Elem()
}

func (o ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskOutputResponseDatabaseSchemaMapOutput) ToConnectToTargetOracleAzureDbForPostgreSqlSyncTaskOutputResponseDatabaseSchemaMapOutput() ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskOutputResponseDatabaseSchemaMapOutput {
	return o
}

func (o ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskOutputResponseDatabaseSchemaMapOutput) ToConnectToTargetOracleAzureDbForPostgreSqlSyncTaskOutputResponseDatabaseSchemaMapOutputWithContext(ctx context.Context) ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskOutputResponseDatabaseSchemaMapOutput {
	return o
}

func (o ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskOutputResponseDatabaseSchemaMapOutput) Database() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskOutputResponseDatabaseSchemaMap) *string {
		return v.Database
	}).(pulumi.StringPtrOutput)
}

func (o ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskOutputResponseDatabaseSchemaMapOutput) Schemas() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskOutputResponseDatabaseSchemaMap) []string {
		return v.Schemas
	}).(pulumi.StringArrayOutput)
}

type ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskOutputResponseDatabaseSchemaMapArrayOutput struct{ *pulumi.OutputState }

func (ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskOutputResponseDatabaseSchemaMapArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskOutputResponseDatabaseSchemaMap)(nil)).Elem()
}

func (o ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskOutputResponseDatabaseSchemaMapArrayOutput) ToConnectToTargetOracleAzureDbForPostgreSqlSyncTaskOutputResponseDatabaseSchemaMapArrayOutput() ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskOutputResponseDatabaseSchemaMapArrayOutput {
	return o
}

func (o ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskOutputResponseDatabaseSchemaMapArrayOutput) ToConnectToTargetOracleAzureDbForPostgreSqlSyncTaskOutputResponseDatabaseSchemaMapArrayOutputWithContext(ctx context.Context) ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskOutputResponseDatabaseSchemaMapArrayOutput {
	return o
}

func (o ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskOutputResponseDatabaseSchemaMapArrayOutput) Index(i pulumi.IntInput) ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskOutputResponseDatabaseSchemaMapOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskOutputResponseDatabaseSchemaMap {
		return vs[0].([]ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskOutputResponseDatabaseSchemaMap)[vs[1].(int)]
	}).(ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskOutputResponseDatabaseSchemaMapOutput)
}

// Properties for the task that validates connection to Azure Database For PostgreSQL server and target server requirements for online migration for Oracle source.
type ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskProperties struct {
	// Key value pairs of client data to attach meta data information to task
	ClientData map[string]string `pulumi:"clientData"`
	// Task input
	Input *ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskInput `pulumi:"input"`
	// Task type.
	TaskType string `pulumi:"taskType"`
}

// ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskPropertiesInput is an input type that accepts ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskPropertiesArgs and ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskPropertiesOutput values.
// You can construct a concrete instance of `ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskPropertiesInput` via:
//
//          ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskPropertiesArgs{...}
type ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskPropertiesInput interface {
	pulumi.Input

	ToConnectToTargetOracleAzureDbForPostgreSqlSyncTaskPropertiesOutput() ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskPropertiesOutput
	ToConnectToTargetOracleAzureDbForPostgreSqlSyncTaskPropertiesOutputWithContext(context.Context) ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskPropertiesOutput
}

// Properties for the task that validates connection to Azure Database For PostgreSQL server and target server requirements for online migration for Oracle source.
type ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskPropertiesArgs struct {
	// Key value pairs of client data to attach meta data information to task
	ClientData pulumi.StringMapInput `pulumi:"clientData"`
	// Task input
	Input ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskInputPtrInput `pulumi:"input"`
	// Task type.
	TaskType pulumi.StringInput `pulumi:"taskType"`
}

func (ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskPropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskProperties)(nil)).Elem()
}

func (i ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskPropertiesArgs) ToConnectToTargetOracleAzureDbForPostgreSqlSyncTaskPropertiesOutput() ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskPropertiesOutput {
	return i.ToConnectToTargetOracleAzureDbForPostgreSqlSyncTaskPropertiesOutputWithContext(context.Background())
}

func (i ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskPropertiesArgs) ToConnectToTargetOracleAzureDbForPostgreSqlSyncTaskPropertiesOutputWithContext(ctx context.Context) ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskPropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskPropertiesOutput)
}

// Properties for the task that validates connection to Azure Database For PostgreSQL server and target server requirements for online migration for Oracle source.
type ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskPropertiesResponse struct {
	// Key value pairs of client data to attach meta data information to task
	ClientData map[string]string `pulumi:"clientData"`
	// Array of command properties.
	Commands []interface{} `pulumi:"commands"`
	// Array of errors. This is ignored if submitted.
	Errors []ODataErrorResponse `pulumi:"errors"`
	// Task input
	Input *ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskInputResponse `pulumi:"input"`
	// Task output. This is ignored if submitted.
	Output []ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskOutputResponse `pulumi:"output"`
	// The state of the task. This is ignored if submitted.
	State string `pulumi:"state"`
	// Task type.
	TaskType string `pulumi:"taskType"`
}

// Properties for the task that validates connection to Azure Database For PostgreSQL server and target server requirements for online migration for Oracle source.
type ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskPropertiesResponseOutput struct{ *pulumi.OutputState }

func (ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskPropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskPropertiesResponse)(nil)).Elem()
}

func (o ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskPropertiesResponseOutput) ToConnectToTargetOracleAzureDbForPostgreSqlSyncTaskPropertiesResponseOutput() ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskPropertiesResponseOutput {
	return o
}

func (o ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskPropertiesResponseOutput) ToConnectToTargetOracleAzureDbForPostgreSqlSyncTaskPropertiesResponseOutputWithContext(ctx context.Context) ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskPropertiesResponseOutput {
	return o
}

// Key value pairs of client data to attach meta data information to task
func (o ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskPropertiesResponseOutput) ClientData() pulumi.StringMapOutput {
	return o.ApplyT(func(v ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskPropertiesResponse) map[string]string {
		return v.ClientData
	}).(pulumi.StringMapOutput)
}

// Array of command properties.
func (o ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskPropertiesResponseOutput) Commands() pulumi.ArrayOutput {
	return o.ApplyT(func(v ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskPropertiesResponse) []interface{} {
		return v.Commands
	}).(pulumi.ArrayOutput)
}

// Array of errors. This is ignored if submitted.
func (o ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskPropertiesResponseOutput) Errors() ODataErrorResponseArrayOutput {
	return o.ApplyT(func(v ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskPropertiesResponse) []ODataErrorResponse {
		return v.Errors
	}).(ODataErrorResponseArrayOutput)
}

// Task input
func (o ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskPropertiesResponseOutput) Input() ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskInputResponsePtrOutput {
	return o.ApplyT(func(v ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskPropertiesResponse) *ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskInputResponse {
		return v.Input
	}).(ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskInputResponsePtrOutput)
}

// Task output. This is ignored if submitted.
func (o ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskPropertiesResponseOutput) Output() ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskOutputResponseArrayOutput {
	return o.ApplyT(func(v ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskPropertiesResponse) []ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskOutputResponse {
		return v.Output
	}).(ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskOutputResponseArrayOutput)
}

// The state of the task. This is ignored if submitted.
func (o ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskPropertiesResponseOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskPropertiesResponse) string { return v.State }).(pulumi.StringOutput)
}

// Task type.
func (o ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskPropertiesResponseOutput) TaskType() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskPropertiesResponse) string { return v.TaskType }).(pulumi.StringOutput)
}

// Input for the task that validates connection to SQL DB and target server requirements
type ConnectToTargetSqlDbTaskInput struct {
	// Connection information for target SQL DB
	TargetConnectionInfo SqlConnectionInfo `pulumi:"targetConnectionInfo"`
}

// ConnectToTargetSqlDbTaskInputInput is an input type that accepts ConnectToTargetSqlDbTaskInputArgs and ConnectToTargetSqlDbTaskInputOutput values.
// You can construct a concrete instance of `ConnectToTargetSqlDbTaskInputInput` via:
//
//          ConnectToTargetSqlDbTaskInputArgs{...}
type ConnectToTargetSqlDbTaskInputInput interface {
	pulumi.Input

	ToConnectToTargetSqlDbTaskInputOutput() ConnectToTargetSqlDbTaskInputOutput
	ToConnectToTargetSqlDbTaskInputOutputWithContext(context.Context) ConnectToTargetSqlDbTaskInputOutput
}

// Input for the task that validates connection to SQL DB and target server requirements
type ConnectToTargetSqlDbTaskInputArgs struct {
	// Connection information for target SQL DB
	TargetConnectionInfo SqlConnectionInfoInput `pulumi:"targetConnectionInfo"`
}

func (ConnectToTargetSqlDbTaskInputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectToTargetSqlDbTaskInput)(nil)).Elem()
}

func (i ConnectToTargetSqlDbTaskInputArgs) ToConnectToTargetSqlDbTaskInputOutput() ConnectToTargetSqlDbTaskInputOutput {
	return i.ToConnectToTargetSqlDbTaskInputOutputWithContext(context.Background())
}

func (i ConnectToTargetSqlDbTaskInputArgs) ToConnectToTargetSqlDbTaskInputOutputWithContext(ctx context.Context) ConnectToTargetSqlDbTaskInputOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectToTargetSqlDbTaskInputOutput)
}

func (i ConnectToTargetSqlDbTaskInputArgs) ToConnectToTargetSqlDbTaskInputPtrOutput() ConnectToTargetSqlDbTaskInputPtrOutput {
	return i.ToConnectToTargetSqlDbTaskInputPtrOutputWithContext(context.Background())
}

func (i ConnectToTargetSqlDbTaskInputArgs) ToConnectToTargetSqlDbTaskInputPtrOutputWithContext(ctx context.Context) ConnectToTargetSqlDbTaskInputPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectToTargetSqlDbTaskInputOutput).ToConnectToTargetSqlDbTaskInputPtrOutputWithContext(ctx)
}

// ConnectToTargetSqlDbTaskInputPtrInput is an input type that accepts ConnectToTargetSqlDbTaskInputArgs, ConnectToTargetSqlDbTaskInputPtr and ConnectToTargetSqlDbTaskInputPtrOutput values.
// You can construct a concrete instance of `ConnectToTargetSqlDbTaskInputPtrInput` via:
//
//          ConnectToTargetSqlDbTaskInputArgs{...}
//
//  or:
//
//          nil
type ConnectToTargetSqlDbTaskInputPtrInput interface {
	pulumi.Input

	ToConnectToTargetSqlDbTaskInputPtrOutput() ConnectToTargetSqlDbTaskInputPtrOutput
	ToConnectToTargetSqlDbTaskInputPtrOutputWithContext(context.Context) ConnectToTargetSqlDbTaskInputPtrOutput
}

type connectToTargetSqlDbTaskInputPtrType ConnectToTargetSqlDbTaskInputArgs

func ConnectToTargetSqlDbTaskInputPtr(v *ConnectToTargetSqlDbTaskInputArgs) ConnectToTargetSqlDbTaskInputPtrInput {
	return (*connectToTargetSqlDbTaskInputPtrType)(v)
}

func (*connectToTargetSqlDbTaskInputPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ConnectToTargetSqlDbTaskInput)(nil)).Elem()
}

func (i *connectToTargetSqlDbTaskInputPtrType) ToConnectToTargetSqlDbTaskInputPtrOutput() ConnectToTargetSqlDbTaskInputPtrOutput {
	return i.ToConnectToTargetSqlDbTaskInputPtrOutputWithContext(context.Background())
}

func (i *connectToTargetSqlDbTaskInputPtrType) ToConnectToTargetSqlDbTaskInputPtrOutputWithContext(ctx context.Context) ConnectToTargetSqlDbTaskInputPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectToTargetSqlDbTaskInputPtrOutput)
}

// Input for the task that validates connection to SQL DB and target server requirements
type ConnectToTargetSqlDbTaskInputResponse struct {
	// Connection information for target SQL DB
	TargetConnectionInfo SqlConnectionInfoResponse `pulumi:"targetConnectionInfo"`
}

// Input for the task that validates connection to SQL DB and target server requirements
type ConnectToTargetSqlDbTaskInputResponseOutput struct{ *pulumi.OutputState }

func (ConnectToTargetSqlDbTaskInputResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectToTargetSqlDbTaskInputResponse)(nil)).Elem()
}

func (o ConnectToTargetSqlDbTaskInputResponseOutput) ToConnectToTargetSqlDbTaskInputResponseOutput() ConnectToTargetSqlDbTaskInputResponseOutput {
	return o
}

func (o ConnectToTargetSqlDbTaskInputResponseOutput) ToConnectToTargetSqlDbTaskInputResponseOutputWithContext(ctx context.Context) ConnectToTargetSqlDbTaskInputResponseOutput {
	return o
}

func (o ConnectToTargetSqlDbTaskInputResponseOutput) ToConnectToTargetSqlDbTaskInputResponsePtrOutput() ConnectToTargetSqlDbTaskInputResponsePtrOutput {
	return o.ToConnectToTargetSqlDbTaskInputResponsePtrOutputWithContext(context.Background())
}

func (o ConnectToTargetSqlDbTaskInputResponseOutput) ToConnectToTargetSqlDbTaskInputResponsePtrOutputWithContext(ctx context.Context) ConnectToTargetSqlDbTaskInputResponsePtrOutput {
	return o.ApplyT(func(v ConnectToTargetSqlDbTaskInputResponse) *ConnectToTargetSqlDbTaskInputResponse {
		return &v
	}).(ConnectToTargetSqlDbTaskInputResponsePtrOutput)
}

// Connection information for target SQL DB
func (o ConnectToTargetSqlDbTaskInputResponseOutput) TargetConnectionInfo() SqlConnectionInfoResponseOutput {
	return o.ApplyT(func(v ConnectToTargetSqlDbTaskInputResponse) SqlConnectionInfoResponse { return v.TargetConnectionInfo }).(SqlConnectionInfoResponseOutput)
}

type ConnectToTargetSqlDbTaskInputResponsePtrOutput struct{ *pulumi.OutputState }

func (ConnectToTargetSqlDbTaskInputResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ConnectToTargetSqlDbTaskInputResponse)(nil)).Elem()
}

func (o ConnectToTargetSqlDbTaskInputResponsePtrOutput) ToConnectToTargetSqlDbTaskInputResponsePtrOutput() ConnectToTargetSqlDbTaskInputResponsePtrOutput {
	return o
}

func (o ConnectToTargetSqlDbTaskInputResponsePtrOutput) ToConnectToTargetSqlDbTaskInputResponsePtrOutputWithContext(ctx context.Context) ConnectToTargetSqlDbTaskInputResponsePtrOutput {
	return o
}

func (o ConnectToTargetSqlDbTaskInputResponsePtrOutput) Elem() ConnectToTargetSqlDbTaskInputResponseOutput {
	return o.ApplyT(func(v *ConnectToTargetSqlDbTaskInputResponse) ConnectToTargetSqlDbTaskInputResponse { return *v }).(ConnectToTargetSqlDbTaskInputResponseOutput)
}

// Connection information for target SQL DB
func (o ConnectToTargetSqlDbTaskInputResponsePtrOutput) TargetConnectionInfo() SqlConnectionInfoResponsePtrOutput {
	return o.ApplyT(func(v *ConnectToTargetSqlDbTaskInputResponse) *SqlConnectionInfoResponse {
		if v == nil {
			return nil
		}
		return &v.TargetConnectionInfo
	}).(SqlConnectionInfoResponsePtrOutput)
}

// Output for the task that validates connection to SQL DB and target server requirements
type ConnectToTargetSqlDbTaskOutputResponse struct {
	// Source databases as a map from database name to database id
	Databases string `pulumi:"databases"`
	// Result identifier
	Id string `pulumi:"id"`
	// Target server brand version
	TargetServerBrandVersion string `pulumi:"targetServerBrandVersion"`
	// Version of the target server
	TargetServerVersion string `pulumi:"targetServerVersion"`
}

// Output for the task that validates connection to SQL DB and target server requirements
type ConnectToTargetSqlDbTaskOutputResponseOutput struct{ *pulumi.OutputState }

func (ConnectToTargetSqlDbTaskOutputResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectToTargetSqlDbTaskOutputResponse)(nil)).Elem()
}

func (o ConnectToTargetSqlDbTaskOutputResponseOutput) ToConnectToTargetSqlDbTaskOutputResponseOutput() ConnectToTargetSqlDbTaskOutputResponseOutput {
	return o
}

func (o ConnectToTargetSqlDbTaskOutputResponseOutput) ToConnectToTargetSqlDbTaskOutputResponseOutputWithContext(ctx context.Context) ConnectToTargetSqlDbTaskOutputResponseOutput {
	return o
}

// Source databases as a map from database name to database id
func (o ConnectToTargetSqlDbTaskOutputResponseOutput) Databases() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectToTargetSqlDbTaskOutputResponse) string { return v.Databases }).(pulumi.StringOutput)
}

// Result identifier
func (o ConnectToTargetSqlDbTaskOutputResponseOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectToTargetSqlDbTaskOutputResponse) string { return v.Id }).(pulumi.StringOutput)
}

// Target server brand version
func (o ConnectToTargetSqlDbTaskOutputResponseOutput) TargetServerBrandVersion() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectToTargetSqlDbTaskOutputResponse) string { return v.TargetServerBrandVersion }).(pulumi.StringOutput)
}

// Version of the target server
func (o ConnectToTargetSqlDbTaskOutputResponseOutput) TargetServerVersion() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectToTargetSqlDbTaskOutputResponse) string { return v.TargetServerVersion }).(pulumi.StringOutput)
}

type ConnectToTargetSqlDbTaskOutputResponseArrayOutput struct{ *pulumi.OutputState }

func (ConnectToTargetSqlDbTaskOutputResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ConnectToTargetSqlDbTaskOutputResponse)(nil)).Elem()
}

func (o ConnectToTargetSqlDbTaskOutputResponseArrayOutput) ToConnectToTargetSqlDbTaskOutputResponseArrayOutput() ConnectToTargetSqlDbTaskOutputResponseArrayOutput {
	return o
}

func (o ConnectToTargetSqlDbTaskOutputResponseArrayOutput) ToConnectToTargetSqlDbTaskOutputResponseArrayOutputWithContext(ctx context.Context) ConnectToTargetSqlDbTaskOutputResponseArrayOutput {
	return o
}

func (o ConnectToTargetSqlDbTaskOutputResponseArrayOutput) Index(i pulumi.IntInput) ConnectToTargetSqlDbTaskOutputResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ConnectToTargetSqlDbTaskOutputResponse {
		return vs[0].([]ConnectToTargetSqlDbTaskOutputResponse)[vs[1].(int)]
	}).(ConnectToTargetSqlDbTaskOutputResponseOutput)
}

// Properties for the task that validates connection to SQL DB and target server requirements
type ConnectToTargetSqlDbTaskProperties struct {
	// Key value pairs of client data to attach meta data information to task
	ClientData map[string]string `pulumi:"clientData"`
	// Task input
	Input *ConnectToTargetSqlDbTaskInput `pulumi:"input"`
	// Task type.
	TaskType string `pulumi:"taskType"`
}

// ConnectToTargetSqlDbTaskPropertiesInput is an input type that accepts ConnectToTargetSqlDbTaskPropertiesArgs and ConnectToTargetSqlDbTaskPropertiesOutput values.
// You can construct a concrete instance of `ConnectToTargetSqlDbTaskPropertiesInput` via:
//
//          ConnectToTargetSqlDbTaskPropertiesArgs{...}
type ConnectToTargetSqlDbTaskPropertiesInput interface {
	pulumi.Input

	ToConnectToTargetSqlDbTaskPropertiesOutput() ConnectToTargetSqlDbTaskPropertiesOutput
	ToConnectToTargetSqlDbTaskPropertiesOutputWithContext(context.Context) ConnectToTargetSqlDbTaskPropertiesOutput
}

// Properties for the task that validates connection to SQL DB and target server requirements
type ConnectToTargetSqlDbTaskPropertiesArgs struct {
	// Key value pairs of client data to attach meta data information to task
	ClientData pulumi.StringMapInput `pulumi:"clientData"`
	// Task input
	Input ConnectToTargetSqlDbTaskInputPtrInput `pulumi:"input"`
	// Task type.
	TaskType pulumi.StringInput `pulumi:"taskType"`
}

func (ConnectToTargetSqlDbTaskPropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectToTargetSqlDbTaskProperties)(nil)).Elem()
}

func (i ConnectToTargetSqlDbTaskPropertiesArgs) ToConnectToTargetSqlDbTaskPropertiesOutput() ConnectToTargetSqlDbTaskPropertiesOutput {
	return i.ToConnectToTargetSqlDbTaskPropertiesOutputWithContext(context.Background())
}

func (i ConnectToTargetSqlDbTaskPropertiesArgs) ToConnectToTargetSqlDbTaskPropertiesOutputWithContext(ctx context.Context) ConnectToTargetSqlDbTaskPropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectToTargetSqlDbTaskPropertiesOutput)
}

// Properties for the task that validates connection to SQL DB and target server requirements
type ConnectToTargetSqlDbTaskPropertiesResponse struct {
	// Key value pairs of client data to attach meta data information to task
	ClientData map[string]string `pulumi:"clientData"`
	// Array of command properties.
	Commands []interface{} `pulumi:"commands"`
	// Array of errors. This is ignored if submitted.
	Errors []ODataErrorResponse `pulumi:"errors"`
	// Task input
	Input *ConnectToTargetSqlDbTaskInputResponse `pulumi:"input"`
	// Task output. This is ignored if submitted.
	Output []ConnectToTargetSqlDbTaskOutputResponse `pulumi:"output"`
	// The state of the task. This is ignored if submitted.
	State string `pulumi:"state"`
	// Task type.
	TaskType string `pulumi:"taskType"`
}

// Properties for the task that validates connection to SQL DB and target server requirements
type ConnectToTargetSqlDbTaskPropertiesResponseOutput struct{ *pulumi.OutputState }

func (ConnectToTargetSqlDbTaskPropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectToTargetSqlDbTaskPropertiesResponse)(nil)).Elem()
}

func (o ConnectToTargetSqlDbTaskPropertiesResponseOutput) ToConnectToTargetSqlDbTaskPropertiesResponseOutput() ConnectToTargetSqlDbTaskPropertiesResponseOutput {
	return o
}

func (o ConnectToTargetSqlDbTaskPropertiesResponseOutput) ToConnectToTargetSqlDbTaskPropertiesResponseOutputWithContext(ctx context.Context) ConnectToTargetSqlDbTaskPropertiesResponseOutput {
	return o
}

// Key value pairs of client data to attach meta data information to task
func (o ConnectToTargetSqlDbTaskPropertiesResponseOutput) ClientData() pulumi.StringMapOutput {
	return o.ApplyT(func(v ConnectToTargetSqlDbTaskPropertiesResponse) map[string]string { return v.ClientData }).(pulumi.StringMapOutput)
}

// Array of command properties.
func (o ConnectToTargetSqlDbTaskPropertiesResponseOutput) Commands() pulumi.ArrayOutput {
	return o.ApplyT(func(v ConnectToTargetSqlDbTaskPropertiesResponse) []interface{} { return v.Commands }).(pulumi.ArrayOutput)
}

// Array of errors. This is ignored if submitted.
func (o ConnectToTargetSqlDbTaskPropertiesResponseOutput) Errors() ODataErrorResponseArrayOutput {
	return o.ApplyT(func(v ConnectToTargetSqlDbTaskPropertiesResponse) []ODataErrorResponse { return v.Errors }).(ODataErrorResponseArrayOutput)
}

// Task input
func (o ConnectToTargetSqlDbTaskPropertiesResponseOutput) Input() ConnectToTargetSqlDbTaskInputResponsePtrOutput {
	return o.ApplyT(func(v ConnectToTargetSqlDbTaskPropertiesResponse) *ConnectToTargetSqlDbTaskInputResponse {
		return v.Input
	}).(ConnectToTargetSqlDbTaskInputResponsePtrOutput)
}

// Task output. This is ignored if submitted.
func (o ConnectToTargetSqlDbTaskPropertiesResponseOutput) Output() ConnectToTargetSqlDbTaskOutputResponseArrayOutput {
	return o.ApplyT(func(v ConnectToTargetSqlDbTaskPropertiesResponse) []ConnectToTargetSqlDbTaskOutputResponse {
		return v.Output
	}).(ConnectToTargetSqlDbTaskOutputResponseArrayOutput)
}

// The state of the task. This is ignored if submitted.
func (o ConnectToTargetSqlDbTaskPropertiesResponseOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectToTargetSqlDbTaskPropertiesResponse) string { return v.State }).(pulumi.StringOutput)
}

// Task type.
func (o ConnectToTargetSqlDbTaskPropertiesResponseOutput) TaskType() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectToTargetSqlDbTaskPropertiesResponse) string { return v.TaskType }).(pulumi.StringOutput)
}

// Input for the task that validates connection to Azure SQL Database Managed Instance online scenario.
type ConnectToTargetSqlMISyncTaskInput struct {
	// Azure Active Directory Application the DMS instance will use to connect to the target instance of Azure SQL Database Managed Instance and the Azure Storage Account
	AzureApp AzureActiveDirectoryApp `pulumi:"azureApp"`
	// Connection information for Azure SQL Database Managed Instance
	TargetConnectionInfo MiSqlConnectionInfo `pulumi:"targetConnectionInfo"`
}

// ConnectToTargetSqlMISyncTaskInputInput is an input type that accepts ConnectToTargetSqlMISyncTaskInputArgs and ConnectToTargetSqlMISyncTaskInputOutput values.
// You can construct a concrete instance of `ConnectToTargetSqlMISyncTaskInputInput` via:
//
//          ConnectToTargetSqlMISyncTaskInputArgs{...}
type ConnectToTargetSqlMISyncTaskInputInput interface {
	pulumi.Input

	ToConnectToTargetSqlMISyncTaskInputOutput() ConnectToTargetSqlMISyncTaskInputOutput
	ToConnectToTargetSqlMISyncTaskInputOutputWithContext(context.Context) ConnectToTargetSqlMISyncTaskInputOutput
}

// Input for the task that validates connection to Azure SQL Database Managed Instance online scenario.
type ConnectToTargetSqlMISyncTaskInputArgs struct {
	// Azure Active Directory Application the DMS instance will use to connect to the target instance of Azure SQL Database Managed Instance and the Azure Storage Account
	AzureApp AzureActiveDirectoryAppInput `pulumi:"azureApp"`
	// Connection information for Azure SQL Database Managed Instance
	TargetConnectionInfo MiSqlConnectionInfoInput `pulumi:"targetConnectionInfo"`
}

func (ConnectToTargetSqlMISyncTaskInputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectToTargetSqlMISyncTaskInput)(nil)).Elem()
}

func (i ConnectToTargetSqlMISyncTaskInputArgs) ToConnectToTargetSqlMISyncTaskInputOutput() ConnectToTargetSqlMISyncTaskInputOutput {
	return i.ToConnectToTargetSqlMISyncTaskInputOutputWithContext(context.Background())
}

func (i ConnectToTargetSqlMISyncTaskInputArgs) ToConnectToTargetSqlMISyncTaskInputOutputWithContext(ctx context.Context) ConnectToTargetSqlMISyncTaskInputOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectToTargetSqlMISyncTaskInputOutput)
}

func (i ConnectToTargetSqlMISyncTaskInputArgs) ToConnectToTargetSqlMISyncTaskInputPtrOutput() ConnectToTargetSqlMISyncTaskInputPtrOutput {
	return i.ToConnectToTargetSqlMISyncTaskInputPtrOutputWithContext(context.Background())
}

func (i ConnectToTargetSqlMISyncTaskInputArgs) ToConnectToTargetSqlMISyncTaskInputPtrOutputWithContext(ctx context.Context) ConnectToTargetSqlMISyncTaskInputPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectToTargetSqlMISyncTaskInputOutput).ToConnectToTargetSqlMISyncTaskInputPtrOutputWithContext(ctx)
}

// ConnectToTargetSqlMISyncTaskInputPtrInput is an input type that accepts ConnectToTargetSqlMISyncTaskInputArgs, ConnectToTargetSqlMISyncTaskInputPtr and ConnectToTargetSqlMISyncTaskInputPtrOutput values.
// You can construct a concrete instance of `ConnectToTargetSqlMISyncTaskInputPtrInput` via:
//
//          ConnectToTargetSqlMISyncTaskInputArgs{...}
//
//  or:
//
//          nil
type ConnectToTargetSqlMISyncTaskInputPtrInput interface {
	pulumi.Input

	ToConnectToTargetSqlMISyncTaskInputPtrOutput() ConnectToTargetSqlMISyncTaskInputPtrOutput
	ToConnectToTargetSqlMISyncTaskInputPtrOutputWithContext(context.Context) ConnectToTargetSqlMISyncTaskInputPtrOutput
}

type connectToTargetSqlMISyncTaskInputPtrType ConnectToTargetSqlMISyncTaskInputArgs

func ConnectToTargetSqlMISyncTaskInputPtr(v *ConnectToTargetSqlMISyncTaskInputArgs) ConnectToTargetSqlMISyncTaskInputPtrInput {
	return (*connectToTargetSqlMISyncTaskInputPtrType)(v)
}

func (*connectToTargetSqlMISyncTaskInputPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ConnectToTargetSqlMISyncTaskInput)(nil)).Elem()
}

func (i *connectToTargetSqlMISyncTaskInputPtrType) ToConnectToTargetSqlMISyncTaskInputPtrOutput() ConnectToTargetSqlMISyncTaskInputPtrOutput {
	return i.ToConnectToTargetSqlMISyncTaskInputPtrOutputWithContext(context.Background())
}

func (i *connectToTargetSqlMISyncTaskInputPtrType) ToConnectToTargetSqlMISyncTaskInputPtrOutputWithContext(ctx context.Context) ConnectToTargetSqlMISyncTaskInputPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectToTargetSqlMISyncTaskInputPtrOutput)
}

// Input for the task that validates connection to Azure SQL Database Managed Instance online scenario.
type ConnectToTargetSqlMISyncTaskInputResponse struct {
	// Azure Active Directory Application the DMS instance will use to connect to the target instance of Azure SQL Database Managed Instance and the Azure Storage Account
	AzureApp AzureActiveDirectoryAppResponse `pulumi:"azureApp"`
	// Connection information for Azure SQL Database Managed Instance
	TargetConnectionInfo MiSqlConnectionInfoResponse `pulumi:"targetConnectionInfo"`
}

// Input for the task that validates connection to Azure SQL Database Managed Instance online scenario.
type ConnectToTargetSqlMISyncTaskInputResponseOutput struct{ *pulumi.OutputState }

func (ConnectToTargetSqlMISyncTaskInputResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectToTargetSqlMISyncTaskInputResponse)(nil)).Elem()
}

func (o ConnectToTargetSqlMISyncTaskInputResponseOutput) ToConnectToTargetSqlMISyncTaskInputResponseOutput() ConnectToTargetSqlMISyncTaskInputResponseOutput {
	return o
}

func (o ConnectToTargetSqlMISyncTaskInputResponseOutput) ToConnectToTargetSqlMISyncTaskInputResponseOutputWithContext(ctx context.Context) ConnectToTargetSqlMISyncTaskInputResponseOutput {
	return o
}

func (o ConnectToTargetSqlMISyncTaskInputResponseOutput) ToConnectToTargetSqlMISyncTaskInputResponsePtrOutput() ConnectToTargetSqlMISyncTaskInputResponsePtrOutput {
	return o.ToConnectToTargetSqlMISyncTaskInputResponsePtrOutputWithContext(context.Background())
}

func (o ConnectToTargetSqlMISyncTaskInputResponseOutput) ToConnectToTargetSqlMISyncTaskInputResponsePtrOutputWithContext(ctx context.Context) ConnectToTargetSqlMISyncTaskInputResponsePtrOutput {
	return o.ApplyT(func(v ConnectToTargetSqlMISyncTaskInputResponse) *ConnectToTargetSqlMISyncTaskInputResponse {
		return &v
	}).(ConnectToTargetSqlMISyncTaskInputResponsePtrOutput)
}

// Azure Active Directory Application the DMS instance will use to connect to the target instance of Azure SQL Database Managed Instance and the Azure Storage Account
func (o ConnectToTargetSqlMISyncTaskInputResponseOutput) AzureApp() AzureActiveDirectoryAppResponseOutput {
	return o.ApplyT(func(v ConnectToTargetSqlMISyncTaskInputResponse) AzureActiveDirectoryAppResponse { return v.AzureApp }).(AzureActiveDirectoryAppResponseOutput)
}

// Connection information for Azure SQL Database Managed Instance
func (o ConnectToTargetSqlMISyncTaskInputResponseOutput) TargetConnectionInfo() MiSqlConnectionInfoResponseOutput {
	return o.ApplyT(func(v ConnectToTargetSqlMISyncTaskInputResponse) MiSqlConnectionInfoResponse {
		return v.TargetConnectionInfo
	}).(MiSqlConnectionInfoResponseOutput)
}

type ConnectToTargetSqlMISyncTaskInputResponsePtrOutput struct{ *pulumi.OutputState }

func (ConnectToTargetSqlMISyncTaskInputResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ConnectToTargetSqlMISyncTaskInputResponse)(nil)).Elem()
}

func (o ConnectToTargetSqlMISyncTaskInputResponsePtrOutput) ToConnectToTargetSqlMISyncTaskInputResponsePtrOutput() ConnectToTargetSqlMISyncTaskInputResponsePtrOutput {
	return o
}

func (o ConnectToTargetSqlMISyncTaskInputResponsePtrOutput) ToConnectToTargetSqlMISyncTaskInputResponsePtrOutputWithContext(ctx context.Context) ConnectToTargetSqlMISyncTaskInputResponsePtrOutput {
	return o
}

func (o ConnectToTargetSqlMISyncTaskInputResponsePtrOutput) Elem() ConnectToTargetSqlMISyncTaskInputResponseOutput {
	return o.ApplyT(func(v *ConnectToTargetSqlMISyncTaskInputResponse) ConnectToTargetSqlMISyncTaskInputResponse {
		return *v
	}).(ConnectToTargetSqlMISyncTaskInputResponseOutput)
}

// Azure Active Directory Application the DMS instance will use to connect to the target instance of Azure SQL Database Managed Instance and the Azure Storage Account
func (o ConnectToTargetSqlMISyncTaskInputResponsePtrOutput) AzureApp() AzureActiveDirectoryAppResponsePtrOutput {
	return o.ApplyT(func(v *ConnectToTargetSqlMISyncTaskInputResponse) *AzureActiveDirectoryAppResponse {
		if v == nil {
			return nil
		}
		return &v.AzureApp
	}).(AzureActiveDirectoryAppResponsePtrOutput)
}

// Connection information for Azure SQL Database Managed Instance
func (o ConnectToTargetSqlMISyncTaskInputResponsePtrOutput) TargetConnectionInfo() MiSqlConnectionInfoResponsePtrOutput {
	return o.ApplyT(func(v *ConnectToTargetSqlMISyncTaskInputResponse) *MiSqlConnectionInfoResponse {
		if v == nil {
			return nil
		}
		return &v.TargetConnectionInfo
	}).(MiSqlConnectionInfoResponsePtrOutput)
}

// Output for the task that validates connection to Azure SQL Database Managed Instance.
type ConnectToTargetSqlMISyncTaskOutputResponse struct {
	// Target server brand version
	TargetServerBrandVersion string `pulumi:"targetServerBrandVersion"`
	// Target server version
	TargetServerVersion string `pulumi:"targetServerVersion"`
	// Validation errors
	ValidationErrors []ReportableExceptionResponse `pulumi:"validationErrors"`
}

// Output for the task that validates connection to Azure SQL Database Managed Instance.
type ConnectToTargetSqlMISyncTaskOutputResponseOutput struct{ *pulumi.OutputState }

func (ConnectToTargetSqlMISyncTaskOutputResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectToTargetSqlMISyncTaskOutputResponse)(nil)).Elem()
}

func (o ConnectToTargetSqlMISyncTaskOutputResponseOutput) ToConnectToTargetSqlMISyncTaskOutputResponseOutput() ConnectToTargetSqlMISyncTaskOutputResponseOutput {
	return o
}

func (o ConnectToTargetSqlMISyncTaskOutputResponseOutput) ToConnectToTargetSqlMISyncTaskOutputResponseOutputWithContext(ctx context.Context) ConnectToTargetSqlMISyncTaskOutputResponseOutput {
	return o
}

// Target server brand version
func (o ConnectToTargetSqlMISyncTaskOutputResponseOutput) TargetServerBrandVersion() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectToTargetSqlMISyncTaskOutputResponse) string { return v.TargetServerBrandVersion }).(pulumi.StringOutput)
}

// Target server version
func (o ConnectToTargetSqlMISyncTaskOutputResponseOutput) TargetServerVersion() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectToTargetSqlMISyncTaskOutputResponse) string { return v.TargetServerVersion }).(pulumi.StringOutput)
}

// Validation errors
func (o ConnectToTargetSqlMISyncTaskOutputResponseOutput) ValidationErrors() ReportableExceptionResponseArrayOutput {
	return o.ApplyT(func(v ConnectToTargetSqlMISyncTaskOutputResponse) []ReportableExceptionResponse {
		return v.ValidationErrors
	}).(ReportableExceptionResponseArrayOutput)
}

type ConnectToTargetSqlMISyncTaskOutputResponseArrayOutput struct{ *pulumi.OutputState }

func (ConnectToTargetSqlMISyncTaskOutputResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ConnectToTargetSqlMISyncTaskOutputResponse)(nil)).Elem()
}

func (o ConnectToTargetSqlMISyncTaskOutputResponseArrayOutput) ToConnectToTargetSqlMISyncTaskOutputResponseArrayOutput() ConnectToTargetSqlMISyncTaskOutputResponseArrayOutput {
	return o
}

func (o ConnectToTargetSqlMISyncTaskOutputResponseArrayOutput) ToConnectToTargetSqlMISyncTaskOutputResponseArrayOutputWithContext(ctx context.Context) ConnectToTargetSqlMISyncTaskOutputResponseArrayOutput {
	return o
}

func (o ConnectToTargetSqlMISyncTaskOutputResponseArrayOutput) Index(i pulumi.IntInput) ConnectToTargetSqlMISyncTaskOutputResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ConnectToTargetSqlMISyncTaskOutputResponse {
		return vs[0].([]ConnectToTargetSqlMISyncTaskOutputResponse)[vs[1].(int)]
	}).(ConnectToTargetSqlMISyncTaskOutputResponseOutput)
}

// Properties for the task that validates connection to Azure SQL Database Managed Instance
type ConnectToTargetSqlMISyncTaskProperties struct {
	// Key value pairs of client data to attach meta data information to task
	ClientData map[string]string `pulumi:"clientData"`
	// Task input
	Input *ConnectToTargetSqlMISyncTaskInput `pulumi:"input"`
	// Task type.
	TaskType string `pulumi:"taskType"`
}

// ConnectToTargetSqlMISyncTaskPropertiesInput is an input type that accepts ConnectToTargetSqlMISyncTaskPropertiesArgs and ConnectToTargetSqlMISyncTaskPropertiesOutput values.
// You can construct a concrete instance of `ConnectToTargetSqlMISyncTaskPropertiesInput` via:
//
//          ConnectToTargetSqlMISyncTaskPropertiesArgs{...}
type ConnectToTargetSqlMISyncTaskPropertiesInput interface {
	pulumi.Input

	ToConnectToTargetSqlMISyncTaskPropertiesOutput() ConnectToTargetSqlMISyncTaskPropertiesOutput
	ToConnectToTargetSqlMISyncTaskPropertiesOutputWithContext(context.Context) ConnectToTargetSqlMISyncTaskPropertiesOutput
}

// Properties for the task that validates connection to Azure SQL Database Managed Instance
type ConnectToTargetSqlMISyncTaskPropertiesArgs struct {
	// Key value pairs of client data to attach meta data information to task
	ClientData pulumi.StringMapInput `pulumi:"clientData"`
	// Task input
	Input ConnectToTargetSqlMISyncTaskInputPtrInput `pulumi:"input"`
	// Task type.
	TaskType pulumi.StringInput `pulumi:"taskType"`
}

func (ConnectToTargetSqlMISyncTaskPropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectToTargetSqlMISyncTaskProperties)(nil)).Elem()
}

func (i ConnectToTargetSqlMISyncTaskPropertiesArgs) ToConnectToTargetSqlMISyncTaskPropertiesOutput() ConnectToTargetSqlMISyncTaskPropertiesOutput {
	return i.ToConnectToTargetSqlMISyncTaskPropertiesOutputWithContext(context.Background())
}

func (i ConnectToTargetSqlMISyncTaskPropertiesArgs) ToConnectToTargetSqlMISyncTaskPropertiesOutputWithContext(ctx context.Context) ConnectToTargetSqlMISyncTaskPropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectToTargetSqlMISyncTaskPropertiesOutput)
}

// Properties for the task that validates connection to Azure SQL Database Managed Instance
type ConnectToTargetSqlMISyncTaskPropertiesResponse struct {
	// Key value pairs of client data to attach meta data information to task
	ClientData map[string]string `pulumi:"clientData"`
	// Array of command properties.
	Commands []interface{} `pulumi:"commands"`
	// Array of errors. This is ignored if submitted.
	Errors []ODataErrorResponse `pulumi:"errors"`
	// Task input
	Input *ConnectToTargetSqlMISyncTaskInputResponse `pulumi:"input"`
	// Task output. This is ignored if submitted.
	Output []ConnectToTargetSqlMISyncTaskOutputResponse `pulumi:"output"`
	// The state of the task. This is ignored if submitted.
	State string `pulumi:"state"`
	// Task type.
	TaskType string `pulumi:"taskType"`
}

// Properties for the task that validates connection to Azure SQL Database Managed Instance
type ConnectToTargetSqlMISyncTaskPropertiesResponseOutput struct{ *pulumi.OutputState }

func (ConnectToTargetSqlMISyncTaskPropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectToTargetSqlMISyncTaskPropertiesResponse)(nil)).Elem()
}

func (o ConnectToTargetSqlMISyncTaskPropertiesResponseOutput) ToConnectToTargetSqlMISyncTaskPropertiesResponseOutput() ConnectToTargetSqlMISyncTaskPropertiesResponseOutput {
	return o
}

func (o ConnectToTargetSqlMISyncTaskPropertiesResponseOutput) ToConnectToTargetSqlMISyncTaskPropertiesResponseOutputWithContext(ctx context.Context) ConnectToTargetSqlMISyncTaskPropertiesResponseOutput {
	return o
}

// Key value pairs of client data to attach meta data information to task
func (o ConnectToTargetSqlMISyncTaskPropertiesResponseOutput) ClientData() pulumi.StringMapOutput {
	return o.ApplyT(func(v ConnectToTargetSqlMISyncTaskPropertiesResponse) map[string]string { return v.ClientData }).(pulumi.StringMapOutput)
}

// Array of command properties.
func (o ConnectToTargetSqlMISyncTaskPropertiesResponseOutput) Commands() pulumi.ArrayOutput {
	return o.ApplyT(func(v ConnectToTargetSqlMISyncTaskPropertiesResponse) []interface{} { return v.Commands }).(pulumi.ArrayOutput)
}

// Array of errors. This is ignored if submitted.
func (o ConnectToTargetSqlMISyncTaskPropertiesResponseOutput) Errors() ODataErrorResponseArrayOutput {
	return o.ApplyT(func(v ConnectToTargetSqlMISyncTaskPropertiesResponse) []ODataErrorResponse { return v.Errors }).(ODataErrorResponseArrayOutput)
}

// Task input
func (o ConnectToTargetSqlMISyncTaskPropertiesResponseOutput) Input() ConnectToTargetSqlMISyncTaskInputResponsePtrOutput {
	return o.ApplyT(func(v ConnectToTargetSqlMISyncTaskPropertiesResponse) *ConnectToTargetSqlMISyncTaskInputResponse {
		return v.Input
	}).(ConnectToTargetSqlMISyncTaskInputResponsePtrOutput)
}

// Task output. This is ignored if submitted.
func (o ConnectToTargetSqlMISyncTaskPropertiesResponseOutput) Output() ConnectToTargetSqlMISyncTaskOutputResponseArrayOutput {
	return o.ApplyT(func(v ConnectToTargetSqlMISyncTaskPropertiesResponse) []ConnectToTargetSqlMISyncTaskOutputResponse {
		return v.Output
	}).(ConnectToTargetSqlMISyncTaskOutputResponseArrayOutput)
}

// The state of the task. This is ignored if submitted.
func (o ConnectToTargetSqlMISyncTaskPropertiesResponseOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectToTargetSqlMISyncTaskPropertiesResponse) string { return v.State }).(pulumi.StringOutput)
}

// Task type.
func (o ConnectToTargetSqlMISyncTaskPropertiesResponseOutput) TaskType() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectToTargetSqlMISyncTaskPropertiesResponse) string { return v.TaskType }).(pulumi.StringOutput)
}

// Input for the task that validates connection to Azure SQL Database Managed Instance.
type ConnectToTargetSqlMITaskInput struct {
	// Flag for whether to collect agent jobs from target SQL MI server.
	CollectAgentJobs *bool `pulumi:"collectAgentJobs"`
	// Flag for whether to collect logins from target SQL MI server.
	CollectLogins *bool `pulumi:"collectLogins"`
	// Connection information for target SQL Server
	TargetConnectionInfo SqlConnectionInfo `pulumi:"targetConnectionInfo"`
	// Flag for whether to validate SSIS catalog is reachable on the target SQL MI server.
	ValidateSsisCatalogOnly *bool `pulumi:"validateSsisCatalogOnly"`
}

// ConnectToTargetSqlMITaskInputInput is an input type that accepts ConnectToTargetSqlMITaskInputArgs and ConnectToTargetSqlMITaskInputOutput values.
// You can construct a concrete instance of `ConnectToTargetSqlMITaskInputInput` via:
//
//          ConnectToTargetSqlMITaskInputArgs{...}
type ConnectToTargetSqlMITaskInputInput interface {
	pulumi.Input

	ToConnectToTargetSqlMITaskInputOutput() ConnectToTargetSqlMITaskInputOutput
	ToConnectToTargetSqlMITaskInputOutputWithContext(context.Context) ConnectToTargetSqlMITaskInputOutput
}

// Input for the task that validates connection to Azure SQL Database Managed Instance.
type ConnectToTargetSqlMITaskInputArgs struct {
	// Flag for whether to collect agent jobs from target SQL MI server.
	CollectAgentJobs pulumi.BoolPtrInput `pulumi:"collectAgentJobs"`
	// Flag for whether to collect logins from target SQL MI server.
	CollectLogins pulumi.BoolPtrInput `pulumi:"collectLogins"`
	// Connection information for target SQL Server
	TargetConnectionInfo SqlConnectionInfoInput `pulumi:"targetConnectionInfo"`
	// Flag for whether to validate SSIS catalog is reachable on the target SQL MI server.
	ValidateSsisCatalogOnly pulumi.BoolPtrInput `pulumi:"validateSsisCatalogOnly"`
}

func (ConnectToTargetSqlMITaskInputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectToTargetSqlMITaskInput)(nil)).Elem()
}

func (i ConnectToTargetSqlMITaskInputArgs) ToConnectToTargetSqlMITaskInputOutput() ConnectToTargetSqlMITaskInputOutput {
	return i.ToConnectToTargetSqlMITaskInputOutputWithContext(context.Background())
}

func (i ConnectToTargetSqlMITaskInputArgs) ToConnectToTargetSqlMITaskInputOutputWithContext(ctx context.Context) ConnectToTargetSqlMITaskInputOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectToTargetSqlMITaskInputOutput)
}

func (i ConnectToTargetSqlMITaskInputArgs) ToConnectToTargetSqlMITaskInputPtrOutput() ConnectToTargetSqlMITaskInputPtrOutput {
	return i.ToConnectToTargetSqlMITaskInputPtrOutputWithContext(context.Background())
}

func (i ConnectToTargetSqlMITaskInputArgs) ToConnectToTargetSqlMITaskInputPtrOutputWithContext(ctx context.Context) ConnectToTargetSqlMITaskInputPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectToTargetSqlMITaskInputOutput).ToConnectToTargetSqlMITaskInputPtrOutputWithContext(ctx)
}

// ConnectToTargetSqlMITaskInputPtrInput is an input type that accepts ConnectToTargetSqlMITaskInputArgs, ConnectToTargetSqlMITaskInputPtr and ConnectToTargetSqlMITaskInputPtrOutput values.
// You can construct a concrete instance of `ConnectToTargetSqlMITaskInputPtrInput` via:
//
//          ConnectToTargetSqlMITaskInputArgs{...}
//
//  or:
//
//          nil
type ConnectToTargetSqlMITaskInputPtrInput interface {
	pulumi.Input

	ToConnectToTargetSqlMITaskInputPtrOutput() ConnectToTargetSqlMITaskInputPtrOutput
	ToConnectToTargetSqlMITaskInputPtrOutputWithContext(context.Context) ConnectToTargetSqlMITaskInputPtrOutput
}

type connectToTargetSqlMITaskInputPtrType ConnectToTargetSqlMITaskInputArgs

func ConnectToTargetSqlMITaskInputPtr(v *ConnectToTargetSqlMITaskInputArgs) ConnectToTargetSqlMITaskInputPtrInput {
	return (*connectToTargetSqlMITaskInputPtrType)(v)
}

func (*connectToTargetSqlMITaskInputPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ConnectToTargetSqlMITaskInput)(nil)).Elem()
}

func (i *connectToTargetSqlMITaskInputPtrType) ToConnectToTargetSqlMITaskInputPtrOutput() ConnectToTargetSqlMITaskInputPtrOutput {
	return i.ToConnectToTargetSqlMITaskInputPtrOutputWithContext(context.Background())
}

func (i *connectToTargetSqlMITaskInputPtrType) ToConnectToTargetSqlMITaskInputPtrOutputWithContext(ctx context.Context) ConnectToTargetSqlMITaskInputPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectToTargetSqlMITaskInputPtrOutput)
}

// Input for the task that validates connection to Azure SQL Database Managed Instance.
type ConnectToTargetSqlMITaskInputResponse struct {
	// Flag for whether to collect agent jobs from target SQL MI server.
	CollectAgentJobs *bool `pulumi:"collectAgentJobs"`
	// Flag for whether to collect logins from target SQL MI server.
	CollectLogins *bool `pulumi:"collectLogins"`
	// Connection information for target SQL Server
	TargetConnectionInfo SqlConnectionInfoResponse `pulumi:"targetConnectionInfo"`
	// Flag for whether to validate SSIS catalog is reachable on the target SQL MI server.
	ValidateSsisCatalogOnly *bool `pulumi:"validateSsisCatalogOnly"`
}

// Input for the task that validates connection to Azure SQL Database Managed Instance.
type ConnectToTargetSqlMITaskInputResponseOutput struct{ *pulumi.OutputState }

func (ConnectToTargetSqlMITaskInputResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectToTargetSqlMITaskInputResponse)(nil)).Elem()
}

func (o ConnectToTargetSqlMITaskInputResponseOutput) ToConnectToTargetSqlMITaskInputResponseOutput() ConnectToTargetSqlMITaskInputResponseOutput {
	return o
}

func (o ConnectToTargetSqlMITaskInputResponseOutput) ToConnectToTargetSqlMITaskInputResponseOutputWithContext(ctx context.Context) ConnectToTargetSqlMITaskInputResponseOutput {
	return o
}

func (o ConnectToTargetSqlMITaskInputResponseOutput) ToConnectToTargetSqlMITaskInputResponsePtrOutput() ConnectToTargetSqlMITaskInputResponsePtrOutput {
	return o.ToConnectToTargetSqlMITaskInputResponsePtrOutputWithContext(context.Background())
}

func (o ConnectToTargetSqlMITaskInputResponseOutput) ToConnectToTargetSqlMITaskInputResponsePtrOutputWithContext(ctx context.Context) ConnectToTargetSqlMITaskInputResponsePtrOutput {
	return o.ApplyT(func(v ConnectToTargetSqlMITaskInputResponse) *ConnectToTargetSqlMITaskInputResponse {
		return &v
	}).(ConnectToTargetSqlMITaskInputResponsePtrOutput)
}

// Flag for whether to collect agent jobs from target SQL MI server.
func (o ConnectToTargetSqlMITaskInputResponseOutput) CollectAgentJobs() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ConnectToTargetSqlMITaskInputResponse) *bool { return v.CollectAgentJobs }).(pulumi.BoolPtrOutput)
}

// Flag for whether to collect logins from target SQL MI server.
func (o ConnectToTargetSqlMITaskInputResponseOutput) CollectLogins() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ConnectToTargetSqlMITaskInputResponse) *bool { return v.CollectLogins }).(pulumi.BoolPtrOutput)
}

// Connection information for target SQL Server
func (o ConnectToTargetSqlMITaskInputResponseOutput) TargetConnectionInfo() SqlConnectionInfoResponseOutput {
	return o.ApplyT(func(v ConnectToTargetSqlMITaskInputResponse) SqlConnectionInfoResponse { return v.TargetConnectionInfo }).(SqlConnectionInfoResponseOutput)
}

// Flag for whether to validate SSIS catalog is reachable on the target SQL MI server.
func (o ConnectToTargetSqlMITaskInputResponseOutput) ValidateSsisCatalogOnly() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ConnectToTargetSqlMITaskInputResponse) *bool { return v.ValidateSsisCatalogOnly }).(pulumi.BoolPtrOutput)
}

type ConnectToTargetSqlMITaskInputResponsePtrOutput struct{ *pulumi.OutputState }

func (ConnectToTargetSqlMITaskInputResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ConnectToTargetSqlMITaskInputResponse)(nil)).Elem()
}

func (o ConnectToTargetSqlMITaskInputResponsePtrOutput) ToConnectToTargetSqlMITaskInputResponsePtrOutput() ConnectToTargetSqlMITaskInputResponsePtrOutput {
	return o
}

func (o ConnectToTargetSqlMITaskInputResponsePtrOutput) ToConnectToTargetSqlMITaskInputResponsePtrOutputWithContext(ctx context.Context) ConnectToTargetSqlMITaskInputResponsePtrOutput {
	return o
}

func (o ConnectToTargetSqlMITaskInputResponsePtrOutput) Elem() ConnectToTargetSqlMITaskInputResponseOutput {
	return o.ApplyT(func(v *ConnectToTargetSqlMITaskInputResponse) ConnectToTargetSqlMITaskInputResponse { return *v }).(ConnectToTargetSqlMITaskInputResponseOutput)
}

// Flag for whether to collect agent jobs from target SQL MI server.
func (o ConnectToTargetSqlMITaskInputResponsePtrOutput) CollectAgentJobs() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ConnectToTargetSqlMITaskInputResponse) *bool {
		if v == nil {
			return nil
		}
		return v.CollectAgentJobs
	}).(pulumi.BoolPtrOutput)
}

// Flag for whether to collect logins from target SQL MI server.
func (o ConnectToTargetSqlMITaskInputResponsePtrOutput) CollectLogins() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ConnectToTargetSqlMITaskInputResponse) *bool {
		if v == nil {
			return nil
		}
		return v.CollectLogins
	}).(pulumi.BoolPtrOutput)
}

// Connection information for target SQL Server
func (o ConnectToTargetSqlMITaskInputResponsePtrOutput) TargetConnectionInfo() SqlConnectionInfoResponsePtrOutput {
	return o.ApplyT(func(v *ConnectToTargetSqlMITaskInputResponse) *SqlConnectionInfoResponse {
		if v == nil {
			return nil
		}
		return &v.TargetConnectionInfo
	}).(SqlConnectionInfoResponsePtrOutput)
}

// Flag for whether to validate SSIS catalog is reachable on the target SQL MI server.
func (o ConnectToTargetSqlMITaskInputResponsePtrOutput) ValidateSsisCatalogOnly() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ConnectToTargetSqlMITaskInputResponse) *bool {
		if v == nil {
			return nil
		}
		return v.ValidateSsisCatalogOnly
	}).(pulumi.BoolPtrOutput)
}

// Output for the task that validates connection to Azure SQL Database Managed Instance.
type ConnectToTargetSqlMITaskOutputResponse struct {
	// List of agent jobs on the target server.
	AgentJobs []string `pulumi:"agentJobs"`
	// Result identifier
	Id string `pulumi:"id"`
	// List of logins on the target server.
	Logins []string `pulumi:"logins"`
	// Target server brand version
	TargetServerBrandVersion string `pulumi:"targetServerBrandVersion"`
	// Target server version
	TargetServerVersion string `pulumi:"targetServerVersion"`
	// Validation errors
	ValidationErrors []ReportableExceptionResponse `pulumi:"validationErrors"`
}

// Output for the task that validates connection to Azure SQL Database Managed Instance.
type ConnectToTargetSqlMITaskOutputResponseOutput struct{ *pulumi.OutputState }

func (ConnectToTargetSqlMITaskOutputResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectToTargetSqlMITaskOutputResponse)(nil)).Elem()
}

func (o ConnectToTargetSqlMITaskOutputResponseOutput) ToConnectToTargetSqlMITaskOutputResponseOutput() ConnectToTargetSqlMITaskOutputResponseOutput {
	return o
}

func (o ConnectToTargetSqlMITaskOutputResponseOutput) ToConnectToTargetSqlMITaskOutputResponseOutputWithContext(ctx context.Context) ConnectToTargetSqlMITaskOutputResponseOutput {
	return o
}

// List of agent jobs on the target server.
func (o ConnectToTargetSqlMITaskOutputResponseOutput) AgentJobs() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ConnectToTargetSqlMITaskOutputResponse) []string { return v.AgentJobs }).(pulumi.StringArrayOutput)
}

// Result identifier
func (o ConnectToTargetSqlMITaskOutputResponseOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectToTargetSqlMITaskOutputResponse) string { return v.Id }).(pulumi.StringOutput)
}

// List of logins on the target server.
func (o ConnectToTargetSqlMITaskOutputResponseOutput) Logins() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ConnectToTargetSqlMITaskOutputResponse) []string { return v.Logins }).(pulumi.StringArrayOutput)
}

// Target server brand version
func (o ConnectToTargetSqlMITaskOutputResponseOutput) TargetServerBrandVersion() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectToTargetSqlMITaskOutputResponse) string { return v.TargetServerBrandVersion }).(pulumi.StringOutput)
}

// Target server version
func (o ConnectToTargetSqlMITaskOutputResponseOutput) TargetServerVersion() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectToTargetSqlMITaskOutputResponse) string { return v.TargetServerVersion }).(pulumi.StringOutput)
}

// Validation errors
func (o ConnectToTargetSqlMITaskOutputResponseOutput) ValidationErrors() ReportableExceptionResponseArrayOutput {
	return o.ApplyT(func(v ConnectToTargetSqlMITaskOutputResponse) []ReportableExceptionResponse {
		return v.ValidationErrors
	}).(ReportableExceptionResponseArrayOutput)
}

type ConnectToTargetSqlMITaskOutputResponseArrayOutput struct{ *pulumi.OutputState }

func (ConnectToTargetSqlMITaskOutputResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ConnectToTargetSqlMITaskOutputResponse)(nil)).Elem()
}

func (o ConnectToTargetSqlMITaskOutputResponseArrayOutput) ToConnectToTargetSqlMITaskOutputResponseArrayOutput() ConnectToTargetSqlMITaskOutputResponseArrayOutput {
	return o
}

func (o ConnectToTargetSqlMITaskOutputResponseArrayOutput) ToConnectToTargetSqlMITaskOutputResponseArrayOutputWithContext(ctx context.Context) ConnectToTargetSqlMITaskOutputResponseArrayOutput {
	return o
}

func (o ConnectToTargetSqlMITaskOutputResponseArrayOutput) Index(i pulumi.IntInput) ConnectToTargetSqlMITaskOutputResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ConnectToTargetSqlMITaskOutputResponse {
		return vs[0].([]ConnectToTargetSqlMITaskOutputResponse)[vs[1].(int)]
	}).(ConnectToTargetSqlMITaskOutputResponseOutput)
}

// Properties for the task that validates connection to Azure SQL Database Managed Instance
type ConnectToTargetSqlMITaskProperties struct {
	// Key value pairs of client data to attach meta data information to task
	ClientData map[string]string `pulumi:"clientData"`
	// Task input
	Input *ConnectToTargetSqlMITaskInput `pulumi:"input"`
	// Task type.
	TaskType string `pulumi:"taskType"`
}

// ConnectToTargetSqlMITaskPropertiesInput is an input type that accepts ConnectToTargetSqlMITaskPropertiesArgs and ConnectToTargetSqlMITaskPropertiesOutput values.
// You can construct a concrete instance of `ConnectToTargetSqlMITaskPropertiesInput` via:
//
//          ConnectToTargetSqlMITaskPropertiesArgs{...}
type ConnectToTargetSqlMITaskPropertiesInput interface {
	pulumi.Input

	ToConnectToTargetSqlMITaskPropertiesOutput() ConnectToTargetSqlMITaskPropertiesOutput
	ToConnectToTargetSqlMITaskPropertiesOutputWithContext(context.Context) ConnectToTargetSqlMITaskPropertiesOutput
}

// Properties for the task that validates connection to Azure SQL Database Managed Instance
type ConnectToTargetSqlMITaskPropertiesArgs struct {
	// Key value pairs of client data to attach meta data information to task
	ClientData pulumi.StringMapInput `pulumi:"clientData"`
	// Task input
	Input ConnectToTargetSqlMITaskInputPtrInput `pulumi:"input"`
	// Task type.
	TaskType pulumi.StringInput `pulumi:"taskType"`
}

func (ConnectToTargetSqlMITaskPropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectToTargetSqlMITaskProperties)(nil)).Elem()
}

func (i ConnectToTargetSqlMITaskPropertiesArgs) ToConnectToTargetSqlMITaskPropertiesOutput() ConnectToTargetSqlMITaskPropertiesOutput {
	return i.ToConnectToTargetSqlMITaskPropertiesOutputWithContext(context.Background())
}

func (i ConnectToTargetSqlMITaskPropertiesArgs) ToConnectToTargetSqlMITaskPropertiesOutputWithContext(ctx context.Context) ConnectToTargetSqlMITaskPropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectToTargetSqlMITaskPropertiesOutput)
}

// Properties for the task that validates connection to Azure SQL Database Managed Instance
type ConnectToTargetSqlMITaskPropertiesResponse struct {
	// Key value pairs of client data to attach meta data information to task
	ClientData map[string]string `pulumi:"clientData"`
	// Array of command properties.
	Commands []interface{} `pulumi:"commands"`
	// Array of errors. This is ignored if submitted.
	Errors []ODataErrorResponse `pulumi:"errors"`
	// Task input
	Input *ConnectToTargetSqlMITaskInputResponse `pulumi:"input"`
	// Task output. This is ignored if submitted.
	Output []ConnectToTargetSqlMITaskOutputResponse `pulumi:"output"`
	// The state of the task. This is ignored if submitted.
	State string `pulumi:"state"`
	// Task type.
	TaskType string `pulumi:"taskType"`
}

// Properties for the task that validates connection to Azure SQL Database Managed Instance
type ConnectToTargetSqlMITaskPropertiesResponseOutput struct{ *pulumi.OutputState }

func (ConnectToTargetSqlMITaskPropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectToTargetSqlMITaskPropertiesResponse)(nil)).Elem()
}

func (o ConnectToTargetSqlMITaskPropertiesResponseOutput) ToConnectToTargetSqlMITaskPropertiesResponseOutput() ConnectToTargetSqlMITaskPropertiesResponseOutput {
	return o
}

func (o ConnectToTargetSqlMITaskPropertiesResponseOutput) ToConnectToTargetSqlMITaskPropertiesResponseOutputWithContext(ctx context.Context) ConnectToTargetSqlMITaskPropertiesResponseOutput {
	return o
}

// Key value pairs of client data to attach meta data information to task
func (o ConnectToTargetSqlMITaskPropertiesResponseOutput) ClientData() pulumi.StringMapOutput {
	return o.ApplyT(func(v ConnectToTargetSqlMITaskPropertiesResponse) map[string]string { return v.ClientData }).(pulumi.StringMapOutput)
}

// Array of command properties.
func (o ConnectToTargetSqlMITaskPropertiesResponseOutput) Commands() pulumi.ArrayOutput {
	return o.ApplyT(func(v ConnectToTargetSqlMITaskPropertiesResponse) []interface{} { return v.Commands }).(pulumi.ArrayOutput)
}

// Array of errors. This is ignored if submitted.
func (o ConnectToTargetSqlMITaskPropertiesResponseOutput) Errors() ODataErrorResponseArrayOutput {
	return o.ApplyT(func(v ConnectToTargetSqlMITaskPropertiesResponse) []ODataErrorResponse { return v.Errors }).(ODataErrorResponseArrayOutput)
}

// Task input
func (o ConnectToTargetSqlMITaskPropertiesResponseOutput) Input() ConnectToTargetSqlMITaskInputResponsePtrOutput {
	return o.ApplyT(func(v ConnectToTargetSqlMITaskPropertiesResponse) *ConnectToTargetSqlMITaskInputResponse {
		return v.Input
	}).(ConnectToTargetSqlMITaskInputResponsePtrOutput)
}

// Task output. This is ignored if submitted.
func (o ConnectToTargetSqlMITaskPropertiesResponseOutput) Output() ConnectToTargetSqlMITaskOutputResponseArrayOutput {
	return o.ApplyT(func(v ConnectToTargetSqlMITaskPropertiesResponse) []ConnectToTargetSqlMITaskOutputResponse {
		return v.Output
	}).(ConnectToTargetSqlMITaskOutputResponseArrayOutput)
}

// The state of the task. This is ignored if submitted.
func (o ConnectToTargetSqlMITaskPropertiesResponseOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectToTargetSqlMITaskPropertiesResponse) string { return v.State }).(pulumi.StringOutput)
}

// Task type.
func (o ConnectToTargetSqlMITaskPropertiesResponseOutput) TaskType() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectToTargetSqlMITaskPropertiesResponse) string { return v.TaskType }).(pulumi.StringOutput)
}

// Input for the task that validates connection to Azure SQL DB and target server requirements
type ConnectToTargetSqlSqlDbSyncTaskInput struct {
	// Connection information for source SQL Server
	SourceConnectionInfo SqlConnectionInfo `pulumi:"sourceConnectionInfo"`
	// Connection information for target SQL DB
	TargetConnectionInfo SqlConnectionInfo `pulumi:"targetConnectionInfo"`
}

// ConnectToTargetSqlSqlDbSyncTaskInputInput is an input type that accepts ConnectToTargetSqlSqlDbSyncTaskInputArgs and ConnectToTargetSqlSqlDbSyncTaskInputOutput values.
// You can construct a concrete instance of `ConnectToTargetSqlSqlDbSyncTaskInputInput` via:
//
//          ConnectToTargetSqlSqlDbSyncTaskInputArgs{...}
type ConnectToTargetSqlSqlDbSyncTaskInputInput interface {
	pulumi.Input

	ToConnectToTargetSqlSqlDbSyncTaskInputOutput() ConnectToTargetSqlSqlDbSyncTaskInputOutput
	ToConnectToTargetSqlSqlDbSyncTaskInputOutputWithContext(context.Context) ConnectToTargetSqlSqlDbSyncTaskInputOutput
}

// Input for the task that validates connection to Azure SQL DB and target server requirements
type ConnectToTargetSqlSqlDbSyncTaskInputArgs struct {
	// Connection information for source SQL Server
	SourceConnectionInfo SqlConnectionInfoInput `pulumi:"sourceConnectionInfo"`
	// Connection information for target SQL DB
	TargetConnectionInfo SqlConnectionInfoInput `pulumi:"targetConnectionInfo"`
}

func (ConnectToTargetSqlSqlDbSyncTaskInputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectToTargetSqlSqlDbSyncTaskInput)(nil)).Elem()
}

func (i ConnectToTargetSqlSqlDbSyncTaskInputArgs) ToConnectToTargetSqlSqlDbSyncTaskInputOutput() ConnectToTargetSqlSqlDbSyncTaskInputOutput {
	return i.ToConnectToTargetSqlSqlDbSyncTaskInputOutputWithContext(context.Background())
}

func (i ConnectToTargetSqlSqlDbSyncTaskInputArgs) ToConnectToTargetSqlSqlDbSyncTaskInputOutputWithContext(ctx context.Context) ConnectToTargetSqlSqlDbSyncTaskInputOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectToTargetSqlSqlDbSyncTaskInputOutput)
}

func (i ConnectToTargetSqlSqlDbSyncTaskInputArgs) ToConnectToTargetSqlSqlDbSyncTaskInputPtrOutput() ConnectToTargetSqlSqlDbSyncTaskInputPtrOutput {
	return i.ToConnectToTargetSqlSqlDbSyncTaskInputPtrOutputWithContext(context.Background())
}

func (i ConnectToTargetSqlSqlDbSyncTaskInputArgs) ToConnectToTargetSqlSqlDbSyncTaskInputPtrOutputWithContext(ctx context.Context) ConnectToTargetSqlSqlDbSyncTaskInputPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectToTargetSqlSqlDbSyncTaskInputOutput).ToConnectToTargetSqlSqlDbSyncTaskInputPtrOutputWithContext(ctx)
}

// ConnectToTargetSqlSqlDbSyncTaskInputPtrInput is an input type that accepts ConnectToTargetSqlSqlDbSyncTaskInputArgs, ConnectToTargetSqlSqlDbSyncTaskInputPtr and ConnectToTargetSqlSqlDbSyncTaskInputPtrOutput values.
// You can construct a concrete instance of `ConnectToTargetSqlSqlDbSyncTaskInputPtrInput` via:
//
//          ConnectToTargetSqlSqlDbSyncTaskInputArgs{...}
//
//  or:
//
//          nil
type ConnectToTargetSqlSqlDbSyncTaskInputPtrInput interface {
	pulumi.Input

	ToConnectToTargetSqlSqlDbSyncTaskInputPtrOutput() ConnectToTargetSqlSqlDbSyncTaskInputPtrOutput
	ToConnectToTargetSqlSqlDbSyncTaskInputPtrOutputWithContext(context.Context) ConnectToTargetSqlSqlDbSyncTaskInputPtrOutput
}

type connectToTargetSqlSqlDbSyncTaskInputPtrType ConnectToTargetSqlSqlDbSyncTaskInputArgs

func ConnectToTargetSqlSqlDbSyncTaskInputPtr(v *ConnectToTargetSqlSqlDbSyncTaskInputArgs) ConnectToTargetSqlSqlDbSyncTaskInputPtrInput {
	return (*connectToTargetSqlSqlDbSyncTaskInputPtrType)(v)
}

func (*connectToTargetSqlSqlDbSyncTaskInputPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ConnectToTargetSqlSqlDbSyncTaskInput)(nil)).Elem()
}

func (i *connectToTargetSqlSqlDbSyncTaskInputPtrType) ToConnectToTargetSqlSqlDbSyncTaskInputPtrOutput() ConnectToTargetSqlSqlDbSyncTaskInputPtrOutput {
	return i.ToConnectToTargetSqlSqlDbSyncTaskInputPtrOutputWithContext(context.Background())
}

func (i *connectToTargetSqlSqlDbSyncTaskInputPtrType) ToConnectToTargetSqlSqlDbSyncTaskInputPtrOutputWithContext(ctx context.Context) ConnectToTargetSqlSqlDbSyncTaskInputPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectToTargetSqlSqlDbSyncTaskInputPtrOutput)
}

// Input for the task that validates connection to Azure SQL DB and target server requirements
type ConnectToTargetSqlSqlDbSyncTaskInputResponse struct {
	// Connection information for source SQL Server
	SourceConnectionInfo SqlConnectionInfoResponse `pulumi:"sourceConnectionInfo"`
	// Connection information for target SQL DB
	TargetConnectionInfo SqlConnectionInfoResponse `pulumi:"targetConnectionInfo"`
}

// Input for the task that validates connection to Azure SQL DB and target server requirements
type ConnectToTargetSqlSqlDbSyncTaskInputResponseOutput struct{ *pulumi.OutputState }

func (ConnectToTargetSqlSqlDbSyncTaskInputResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectToTargetSqlSqlDbSyncTaskInputResponse)(nil)).Elem()
}

func (o ConnectToTargetSqlSqlDbSyncTaskInputResponseOutput) ToConnectToTargetSqlSqlDbSyncTaskInputResponseOutput() ConnectToTargetSqlSqlDbSyncTaskInputResponseOutput {
	return o
}

func (o ConnectToTargetSqlSqlDbSyncTaskInputResponseOutput) ToConnectToTargetSqlSqlDbSyncTaskInputResponseOutputWithContext(ctx context.Context) ConnectToTargetSqlSqlDbSyncTaskInputResponseOutput {
	return o
}

func (o ConnectToTargetSqlSqlDbSyncTaskInputResponseOutput) ToConnectToTargetSqlSqlDbSyncTaskInputResponsePtrOutput() ConnectToTargetSqlSqlDbSyncTaskInputResponsePtrOutput {
	return o.ToConnectToTargetSqlSqlDbSyncTaskInputResponsePtrOutputWithContext(context.Background())
}

func (o ConnectToTargetSqlSqlDbSyncTaskInputResponseOutput) ToConnectToTargetSqlSqlDbSyncTaskInputResponsePtrOutputWithContext(ctx context.Context) ConnectToTargetSqlSqlDbSyncTaskInputResponsePtrOutput {
	return o.ApplyT(func(v ConnectToTargetSqlSqlDbSyncTaskInputResponse) *ConnectToTargetSqlSqlDbSyncTaskInputResponse {
		return &v
	}).(ConnectToTargetSqlSqlDbSyncTaskInputResponsePtrOutput)
}

// Connection information for source SQL Server
func (o ConnectToTargetSqlSqlDbSyncTaskInputResponseOutput) SourceConnectionInfo() SqlConnectionInfoResponseOutput {
	return o.ApplyT(func(v ConnectToTargetSqlSqlDbSyncTaskInputResponse) SqlConnectionInfoResponse {
		return v.SourceConnectionInfo
	}).(SqlConnectionInfoResponseOutput)
}

// Connection information for target SQL DB
func (o ConnectToTargetSqlSqlDbSyncTaskInputResponseOutput) TargetConnectionInfo() SqlConnectionInfoResponseOutput {
	return o.ApplyT(func(v ConnectToTargetSqlSqlDbSyncTaskInputResponse) SqlConnectionInfoResponse {
		return v.TargetConnectionInfo
	}).(SqlConnectionInfoResponseOutput)
}

type ConnectToTargetSqlSqlDbSyncTaskInputResponsePtrOutput struct{ *pulumi.OutputState }

func (ConnectToTargetSqlSqlDbSyncTaskInputResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ConnectToTargetSqlSqlDbSyncTaskInputResponse)(nil)).Elem()
}

func (o ConnectToTargetSqlSqlDbSyncTaskInputResponsePtrOutput) ToConnectToTargetSqlSqlDbSyncTaskInputResponsePtrOutput() ConnectToTargetSqlSqlDbSyncTaskInputResponsePtrOutput {
	return o
}

func (o ConnectToTargetSqlSqlDbSyncTaskInputResponsePtrOutput) ToConnectToTargetSqlSqlDbSyncTaskInputResponsePtrOutputWithContext(ctx context.Context) ConnectToTargetSqlSqlDbSyncTaskInputResponsePtrOutput {
	return o
}

func (o ConnectToTargetSqlSqlDbSyncTaskInputResponsePtrOutput) Elem() ConnectToTargetSqlSqlDbSyncTaskInputResponseOutput {
	return o.ApplyT(func(v *ConnectToTargetSqlSqlDbSyncTaskInputResponse) ConnectToTargetSqlSqlDbSyncTaskInputResponse {
		return *v
	}).(ConnectToTargetSqlSqlDbSyncTaskInputResponseOutput)
}

// Connection information for source SQL Server
func (o ConnectToTargetSqlSqlDbSyncTaskInputResponsePtrOutput) SourceConnectionInfo() SqlConnectionInfoResponsePtrOutput {
	return o.ApplyT(func(v *ConnectToTargetSqlSqlDbSyncTaskInputResponse) *SqlConnectionInfoResponse {
		if v == nil {
			return nil
		}
		return &v.SourceConnectionInfo
	}).(SqlConnectionInfoResponsePtrOutput)
}

// Connection information for target SQL DB
func (o ConnectToTargetSqlSqlDbSyncTaskInputResponsePtrOutput) TargetConnectionInfo() SqlConnectionInfoResponsePtrOutput {
	return o.ApplyT(func(v *ConnectToTargetSqlSqlDbSyncTaskInputResponse) *SqlConnectionInfoResponse {
		if v == nil {
			return nil
		}
		return &v.TargetConnectionInfo
	}).(SqlConnectionInfoResponsePtrOutput)
}

// Properties for the task that validates connection to SQL DB and target server requirements for online migration
type ConnectToTargetSqlSqlDbSyncTaskProperties struct {
	// Key value pairs of client data to attach meta data information to task
	ClientData map[string]string `pulumi:"clientData"`
	// Task input
	Input *ConnectToTargetSqlSqlDbSyncTaskInput `pulumi:"input"`
	// Task type.
	TaskType string `pulumi:"taskType"`
}

// ConnectToTargetSqlSqlDbSyncTaskPropertiesInput is an input type that accepts ConnectToTargetSqlSqlDbSyncTaskPropertiesArgs and ConnectToTargetSqlSqlDbSyncTaskPropertiesOutput values.
// You can construct a concrete instance of `ConnectToTargetSqlSqlDbSyncTaskPropertiesInput` via:
//
//          ConnectToTargetSqlSqlDbSyncTaskPropertiesArgs{...}
type ConnectToTargetSqlSqlDbSyncTaskPropertiesInput interface {
	pulumi.Input

	ToConnectToTargetSqlSqlDbSyncTaskPropertiesOutput() ConnectToTargetSqlSqlDbSyncTaskPropertiesOutput
	ToConnectToTargetSqlSqlDbSyncTaskPropertiesOutputWithContext(context.Context) ConnectToTargetSqlSqlDbSyncTaskPropertiesOutput
}

// Properties for the task that validates connection to SQL DB and target server requirements for online migration
type ConnectToTargetSqlSqlDbSyncTaskPropertiesArgs struct {
	// Key value pairs of client data to attach meta data information to task
	ClientData pulumi.StringMapInput `pulumi:"clientData"`
	// Task input
	Input ConnectToTargetSqlSqlDbSyncTaskInputPtrInput `pulumi:"input"`
	// Task type.
	TaskType pulumi.StringInput `pulumi:"taskType"`
}

func (ConnectToTargetSqlSqlDbSyncTaskPropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectToTargetSqlSqlDbSyncTaskProperties)(nil)).Elem()
}

func (i ConnectToTargetSqlSqlDbSyncTaskPropertiesArgs) ToConnectToTargetSqlSqlDbSyncTaskPropertiesOutput() ConnectToTargetSqlSqlDbSyncTaskPropertiesOutput {
	return i.ToConnectToTargetSqlSqlDbSyncTaskPropertiesOutputWithContext(context.Background())
}

func (i ConnectToTargetSqlSqlDbSyncTaskPropertiesArgs) ToConnectToTargetSqlSqlDbSyncTaskPropertiesOutputWithContext(ctx context.Context) ConnectToTargetSqlSqlDbSyncTaskPropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectToTargetSqlSqlDbSyncTaskPropertiesOutput)
}

// Properties for the task that validates connection to SQL DB and target server requirements for online migration
type ConnectToTargetSqlSqlDbSyncTaskPropertiesResponse struct {
	// Key value pairs of client data to attach meta data information to task
	ClientData map[string]string `pulumi:"clientData"`
	// Array of command properties.
	Commands []interface{} `pulumi:"commands"`
	// Array of errors. This is ignored if submitted.
	Errors []ODataErrorResponse `pulumi:"errors"`
	// Task input
	Input *ConnectToTargetSqlSqlDbSyncTaskInputResponse `pulumi:"input"`
	// Task output. This is ignored if submitted.
	Output []ConnectToTargetSqlDbTaskOutputResponse `pulumi:"output"`
	// The state of the task. This is ignored if submitted.
	State string `pulumi:"state"`
	// Task type.
	TaskType string `pulumi:"taskType"`
}

// Properties for the task that validates connection to SQL DB and target server requirements for online migration
type ConnectToTargetSqlSqlDbSyncTaskPropertiesResponseOutput struct{ *pulumi.OutputState }

func (ConnectToTargetSqlSqlDbSyncTaskPropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectToTargetSqlSqlDbSyncTaskPropertiesResponse)(nil)).Elem()
}

func (o ConnectToTargetSqlSqlDbSyncTaskPropertiesResponseOutput) ToConnectToTargetSqlSqlDbSyncTaskPropertiesResponseOutput() ConnectToTargetSqlSqlDbSyncTaskPropertiesResponseOutput {
	return o
}

func (o ConnectToTargetSqlSqlDbSyncTaskPropertiesResponseOutput) ToConnectToTargetSqlSqlDbSyncTaskPropertiesResponseOutputWithContext(ctx context.Context) ConnectToTargetSqlSqlDbSyncTaskPropertiesResponseOutput {
	return o
}

// Key value pairs of client data to attach meta data information to task
func (o ConnectToTargetSqlSqlDbSyncTaskPropertiesResponseOutput) ClientData() pulumi.StringMapOutput {
	return o.ApplyT(func(v ConnectToTargetSqlSqlDbSyncTaskPropertiesResponse) map[string]string { return v.ClientData }).(pulumi.StringMapOutput)
}

// Array of command properties.
func (o ConnectToTargetSqlSqlDbSyncTaskPropertiesResponseOutput) Commands() pulumi.ArrayOutput {
	return o.ApplyT(func(v ConnectToTargetSqlSqlDbSyncTaskPropertiesResponse) []interface{} { return v.Commands }).(pulumi.ArrayOutput)
}

// Array of errors. This is ignored if submitted.
func (o ConnectToTargetSqlSqlDbSyncTaskPropertiesResponseOutput) Errors() ODataErrorResponseArrayOutput {
	return o.ApplyT(func(v ConnectToTargetSqlSqlDbSyncTaskPropertiesResponse) []ODataErrorResponse { return v.Errors }).(ODataErrorResponseArrayOutput)
}

// Task input
func (o ConnectToTargetSqlSqlDbSyncTaskPropertiesResponseOutput) Input() ConnectToTargetSqlSqlDbSyncTaskInputResponsePtrOutput {
	return o.ApplyT(func(v ConnectToTargetSqlSqlDbSyncTaskPropertiesResponse) *ConnectToTargetSqlSqlDbSyncTaskInputResponse {
		return v.Input
	}).(ConnectToTargetSqlSqlDbSyncTaskInputResponsePtrOutput)
}

// Task output. This is ignored if submitted.
func (o ConnectToTargetSqlSqlDbSyncTaskPropertiesResponseOutput) Output() ConnectToTargetSqlDbTaskOutputResponseArrayOutput {
	return o.ApplyT(func(v ConnectToTargetSqlSqlDbSyncTaskPropertiesResponse) []ConnectToTargetSqlDbTaskOutputResponse {
		return v.Output
	}).(ConnectToTargetSqlDbTaskOutputResponseArrayOutput)
}

// The state of the task. This is ignored if submitted.
func (o ConnectToTargetSqlSqlDbSyncTaskPropertiesResponseOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectToTargetSqlSqlDbSyncTaskPropertiesResponse) string { return v.State }).(pulumi.StringOutput)
}

// Task type.
func (o ConnectToTargetSqlSqlDbSyncTaskPropertiesResponseOutput) TaskType() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectToTargetSqlSqlDbSyncTaskPropertiesResponse) string { return v.TaskType }).(pulumi.StringOutput)
}

// Information about backup files when existing backup mode is used.
type DatabaseBackupInfoResponse struct {
	// The list of backup files for the current database.
	BackupFiles []string `pulumi:"backupFiles"`
	// Date and time when the backup operation finished.
	BackupFinishDate string `pulumi:"backupFinishDate"`
	// Backup Type.
	BackupType string `pulumi:"backupType"`
	// Database name.
	DatabaseName string `pulumi:"databaseName"`
	// Number of files in the backup set.
	FamilyCount int `pulumi:"familyCount"`
	// Whether the backup set is compressed
	IsCompressed bool `pulumi:"isCompressed"`
	// Database was damaged when backed up, but the backup operation was requested to continue despite errors.
	IsDamaged bool `pulumi:"isDamaged"`
	// Position of current database backup in the file.
	Position int `pulumi:"position"`
}

// Information about backup files when existing backup mode is used.
type DatabaseBackupInfoResponseOutput struct{ *pulumi.OutputState }

func (DatabaseBackupInfoResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DatabaseBackupInfoResponse)(nil)).Elem()
}

func (o DatabaseBackupInfoResponseOutput) ToDatabaseBackupInfoResponseOutput() DatabaseBackupInfoResponseOutput {
	return o
}

func (o DatabaseBackupInfoResponseOutput) ToDatabaseBackupInfoResponseOutputWithContext(ctx context.Context) DatabaseBackupInfoResponseOutput {
	return o
}

func (o DatabaseBackupInfoResponseOutput) ToDatabaseBackupInfoResponsePtrOutput() DatabaseBackupInfoResponsePtrOutput {
	return o.ToDatabaseBackupInfoResponsePtrOutputWithContext(context.Background())
}

func (o DatabaseBackupInfoResponseOutput) ToDatabaseBackupInfoResponsePtrOutputWithContext(ctx context.Context) DatabaseBackupInfoResponsePtrOutput {
	return o.ApplyT(func(v DatabaseBackupInfoResponse) *DatabaseBackupInfoResponse {
		return &v
	}).(DatabaseBackupInfoResponsePtrOutput)
}

// The list of backup files for the current database.
func (o DatabaseBackupInfoResponseOutput) BackupFiles() pulumi.StringArrayOutput {
	return o.ApplyT(func(v DatabaseBackupInfoResponse) []string { return v.BackupFiles }).(pulumi.StringArrayOutput)
}

// Date and time when the backup operation finished.
func (o DatabaseBackupInfoResponseOutput) BackupFinishDate() pulumi.StringOutput {
	return o.ApplyT(func(v DatabaseBackupInfoResponse) string { return v.BackupFinishDate }).(pulumi.StringOutput)
}

// Backup Type.
func (o DatabaseBackupInfoResponseOutput) BackupType() pulumi.StringOutput {
	return o.ApplyT(func(v DatabaseBackupInfoResponse) string { return v.BackupType }).(pulumi.StringOutput)
}

// Database name.
func (o DatabaseBackupInfoResponseOutput) DatabaseName() pulumi.StringOutput {
	return o.ApplyT(func(v DatabaseBackupInfoResponse) string { return v.DatabaseName }).(pulumi.StringOutput)
}

// Number of files in the backup set.
func (o DatabaseBackupInfoResponseOutput) FamilyCount() pulumi.IntOutput {
	return o.ApplyT(func(v DatabaseBackupInfoResponse) int { return v.FamilyCount }).(pulumi.IntOutput)
}

// Whether the backup set is compressed
func (o DatabaseBackupInfoResponseOutput) IsCompressed() pulumi.BoolOutput {
	return o.ApplyT(func(v DatabaseBackupInfoResponse) bool { return v.IsCompressed }).(pulumi.BoolOutput)
}

// Database was damaged when backed up, but the backup operation was requested to continue despite errors.
func (o DatabaseBackupInfoResponseOutput) IsDamaged() pulumi.BoolOutput {
	return o.ApplyT(func(v DatabaseBackupInfoResponse) bool { return v.IsDamaged }).(pulumi.BoolOutput)
}

// Position of current database backup in the file.
func (o DatabaseBackupInfoResponseOutput) Position() pulumi.IntOutput {
	return o.ApplyT(func(v DatabaseBackupInfoResponse) int { return v.Position }).(pulumi.IntOutput)
}

type DatabaseBackupInfoResponsePtrOutput struct{ *pulumi.OutputState }

func (DatabaseBackupInfoResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DatabaseBackupInfoResponse)(nil)).Elem()
}

func (o DatabaseBackupInfoResponsePtrOutput) ToDatabaseBackupInfoResponsePtrOutput() DatabaseBackupInfoResponsePtrOutput {
	return o
}

func (o DatabaseBackupInfoResponsePtrOutput) ToDatabaseBackupInfoResponsePtrOutputWithContext(ctx context.Context) DatabaseBackupInfoResponsePtrOutput {
	return o
}

func (o DatabaseBackupInfoResponsePtrOutput) Elem() DatabaseBackupInfoResponseOutput {
	return o.ApplyT(func(v *DatabaseBackupInfoResponse) DatabaseBackupInfoResponse { return *v }).(DatabaseBackupInfoResponseOutput)
}

// The list of backup files for the current database.
func (o DatabaseBackupInfoResponsePtrOutput) BackupFiles() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *DatabaseBackupInfoResponse) []string {
		if v == nil {
			return nil
		}
		return v.BackupFiles
	}).(pulumi.StringArrayOutput)
}

// Date and time when the backup operation finished.
func (o DatabaseBackupInfoResponsePtrOutput) BackupFinishDate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DatabaseBackupInfoResponse) *string {
		if v == nil {
			return nil
		}
		return &v.BackupFinishDate
	}).(pulumi.StringPtrOutput)
}

// Backup Type.
func (o DatabaseBackupInfoResponsePtrOutput) BackupType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DatabaseBackupInfoResponse) *string {
		if v == nil {
			return nil
		}
		return &v.BackupType
	}).(pulumi.StringPtrOutput)
}

// Database name.
func (o DatabaseBackupInfoResponsePtrOutput) DatabaseName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DatabaseBackupInfoResponse) *string {
		if v == nil {
			return nil
		}
		return &v.DatabaseName
	}).(pulumi.StringPtrOutput)
}

// Number of files in the backup set.
func (o DatabaseBackupInfoResponsePtrOutput) FamilyCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *DatabaseBackupInfoResponse) *int {
		if v == nil {
			return nil
		}
		return &v.FamilyCount
	}).(pulumi.IntPtrOutput)
}

// Whether the backup set is compressed
func (o DatabaseBackupInfoResponsePtrOutput) IsCompressed() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *DatabaseBackupInfoResponse) *bool {
		if v == nil {
			return nil
		}
		return &v.IsCompressed
	}).(pulumi.BoolPtrOutput)
}

// Database was damaged when backed up, but the backup operation was requested to continue despite errors.
func (o DatabaseBackupInfoResponsePtrOutput) IsDamaged() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *DatabaseBackupInfoResponse) *bool {
		if v == nil {
			return nil
		}
		return &v.IsDamaged
	}).(pulumi.BoolPtrOutput)
}

// Position of current database backup in the file.
func (o DatabaseBackupInfoResponsePtrOutput) Position() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *DatabaseBackupInfoResponse) *int {
		if v == nil {
			return nil
		}
		return &v.Position
	}).(pulumi.IntPtrOutput)
}

// Database file specific information
type DatabaseFileInfoResponse struct {
	// Name of the database
	DatabaseName *string `pulumi:"databaseName"`
	// Database file type
	FileType *string `pulumi:"fileType"`
	// Unique identifier for database file
	Id *string `pulumi:"id"`
	// Logical name of the file
	LogicalName *string `pulumi:"logicalName"`
	// Operating-system full path of the file
	PhysicalFullName *string `pulumi:"physicalFullName"`
	// Suggested full path of the file for restoring
	RestoreFullName *string `pulumi:"restoreFullName"`
	// Size of the file in megabytes
	SizeMB *float64 `pulumi:"sizeMB"`
}

// Database file specific information
type DatabaseFileInfoResponseOutput struct{ *pulumi.OutputState }

func (DatabaseFileInfoResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DatabaseFileInfoResponse)(nil)).Elem()
}

func (o DatabaseFileInfoResponseOutput) ToDatabaseFileInfoResponseOutput() DatabaseFileInfoResponseOutput {
	return o
}

func (o DatabaseFileInfoResponseOutput) ToDatabaseFileInfoResponseOutputWithContext(ctx context.Context) DatabaseFileInfoResponseOutput {
	return o
}

// Name of the database
func (o DatabaseFileInfoResponseOutput) DatabaseName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DatabaseFileInfoResponse) *string { return v.DatabaseName }).(pulumi.StringPtrOutput)
}

// Database file type
func (o DatabaseFileInfoResponseOutput) FileType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DatabaseFileInfoResponse) *string { return v.FileType }).(pulumi.StringPtrOutput)
}

// Unique identifier for database file
func (o DatabaseFileInfoResponseOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DatabaseFileInfoResponse) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// Logical name of the file
func (o DatabaseFileInfoResponseOutput) LogicalName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DatabaseFileInfoResponse) *string { return v.LogicalName }).(pulumi.StringPtrOutput)
}

// Operating-system full path of the file
func (o DatabaseFileInfoResponseOutput) PhysicalFullName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DatabaseFileInfoResponse) *string { return v.PhysicalFullName }).(pulumi.StringPtrOutput)
}

// Suggested full path of the file for restoring
func (o DatabaseFileInfoResponseOutput) RestoreFullName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DatabaseFileInfoResponse) *string { return v.RestoreFullName }).(pulumi.StringPtrOutput)
}

// Size of the file in megabytes
func (o DatabaseFileInfoResponseOutput) SizeMB() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v DatabaseFileInfoResponse) *float64 { return v.SizeMB }).(pulumi.Float64PtrOutput)
}

type DatabaseFileInfoResponseArrayOutput struct{ *pulumi.OutputState }

func (DatabaseFileInfoResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DatabaseFileInfoResponse)(nil)).Elem()
}

func (o DatabaseFileInfoResponseArrayOutput) ToDatabaseFileInfoResponseArrayOutput() DatabaseFileInfoResponseArrayOutput {
	return o
}

func (o DatabaseFileInfoResponseArrayOutput) ToDatabaseFileInfoResponseArrayOutputWithContext(ctx context.Context) DatabaseFileInfoResponseArrayOutput {
	return o
}

func (o DatabaseFileInfoResponseArrayOutput) Index(i pulumi.IntInput) DatabaseFileInfoResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DatabaseFileInfoResponse {
		return vs[0].([]DatabaseFileInfoResponse)[vs[1].(int)]
	}).(DatabaseFileInfoResponseOutput)
}

// Project Database Details
type DatabaseInfo struct {
	// Name of the database
	SourceDatabaseName string `pulumi:"sourceDatabaseName"`
}

// DatabaseInfoInput is an input type that accepts DatabaseInfoArgs and DatabaseInfoOutput values.
// You can construct a concrete instance of `DatabaseInfoInput` via:
//
//          DatabaseInfoArgs{...}
type DatabaseInfoInput interface {
	pulumi.Input

	ToDatabaseInfoOutput() DatabaseInfoOutput
	ToDatabaseInfoOutputWithContext(context.Context) DatabaseInfoOutput
}

// Project Database Details
type DatabaseInfoArgs struct {
	// Name of the database
	SourceDatabaseName pulumi.StringInput `pulumi:"sourceDatabaseName"`
}

func (DatabaseInfoArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DatabaseInfo)(nil)).Elem()
}

func (i DatabaseInfoArgs) ToDatabaseInfoOutput() DatabaseInfoOutput {
	return i.ToDatabaseInfoOutputWithContext(context.Background())
}

func (i DatabaseInfoArgs) ToDatabaseInfoOutputWithContext(ctx context.Context) DatabaseInfoOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatabaseInfoOutput)
}

// DatabaseInfoArrayInput is an input type that accepts DatabaseInfoArray and DatabaseInfoArrayOutput values.
// You can construct a concrete instance of `DatabaseInfoArrayInput` via:
//
//          DatabaseInfoArray{ DatabaseInfoArgs{...} }
type DatabaseInfoArrayInput interface {
	pulumi.Input

	ToDatabaseInfoArrayOutput() DatabaseInfoArrayOutput
	ToDatabaseInfoArrayOutputWithContext(context.Context) DatabaseInfoArrayOutput
}

type DatabaseInfoArray []DatabaseInfoInput

func (DatabaseInfoArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DatabaseInfo)(nil)).Elem()
}

func (i DatabaseInfoArray) ToDatabaseInfoArrayOutput() DatabaseInfoArrayOutput {
	return i.ToDatabaseInfoArrayOutputWithContext(context.Background())
}

func (i DatabaseInfoArray) ToDatabaseInfoArrayOutputWithContext(ctx context.Context) DatabaseInfoArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatabaseInfoArrayOutput)
}

// Project Database Details
type DatabaseInfoResponse struct {
	// Name of the database
	SourceDatabaseName string `pulumi:"sourceDatabaseName"`
}

// Project Database Details
type DatabaseInfoResponseOutput struct{ *pulumi.OutputState }

func (DatabaseInfoResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DatabaseInfoResponse)(nil)).Elem()
}

func (o DatabaseInfoResponseOutput) ToDatabaseInfoResponseOutput() DatabaseInfoResponseOutput {
	return o
}

func (o DatabaseInfoResponseOutput) ToDatabaseInfoResponseOutputWithContext(ctx context.Context) DatabaseInfoResponseOutput {
	return o
}

// Name of the database
func (o DatabaseInfoResponseOutput) SourceDatabaseName() pulumi.StringOutput {
	return o.ApplyT(func(v DatabaseInfoResponse) string { return v.SourceDatabaseName }).(pulumi.StringOutput)
}

type DatabaseInfoResponseArrayOutput struct{ *pulumi.OutputState }

func (DatabaseInfoResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DatabaseInfoResponse)(nil)).Elem()
}

func (o DatabaseInfoResponseArrayOutput) ToDatabaseInfoResponseArrayOutput() DatabaseInfoResponseArrayOutput {
	return o
}

func (o DatabaseInfoResponseArrayOutput) ToDatabaseInfoResponseArrayOutputWithContext(ctx context.Context) DatabaseInfoResponseArrayOutput {
	return o
}

func (o DatabaseInfoResponseArrayOutput) Index(i pulumi.IntInput) DatabaseInfoResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DatabaseInfoResponse {
		return vs[0].([]DatabaseInfoResponse)[vs[1].(int)]
	}).(DatabaseInfoResponseOutput)
}

// Table properties
type DatabaseTableResponse struct {
	// Indicates whether table is empty or not
	HasRows bool `pulumi:"hasRows"`
	// Schema-qualified name of the table
	Name string `pulumi:"name"`
}

// Table properties
type DatabaseTableResponseOutput struct{ *pulumi.OutputState }

func (DatabaseTableResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DatabaseTableResponse)(nil)).Elem()
}

func (o DatabaseTableResponseOutput) ToDatabaseTableResponseOutput() DatabaseTableResponseOutput {
	return o
}

func (o DatabaseTableResponseOutput) ToDatabaseTableResponseOutputWithContext(ctx context.Context) DatabaseTableResponseOutput {
	return o
}

// Indicates whether table is empty or not
func (o DatabaseTableResponseOutput) HasRows() pulumi.BoolOutput {
	return o.ApplyT(func(v DatabaseTableResponse) bool { return v.HasRows }).(pulumi.BoolOutput)
}

// Schema-qualified name of the table
func (o DatabaseTableResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v DatabaseTableResponse) string { return v.Name }).(pulumi.StringOutput)
}

type DatabaseTableResponseArrayOutput struct{ *pulumi.OutputState }

func (DatabaseTableResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DatabaseTableResponse)(nil)).Elem()
}

func (o DatabaseTableResponseArrayOutput) ToDatabaseTableResponseArrayOutput() DatabaseTableResponseArrayOutput {
	return o
}

func (o DatabaseTableResponseArrayOutput) ToDatabaseTableResponseArrayOutputWithContext(ctx context.Context) DatabaseTableResponseArrayOutput {
	return o
}

func (o DatabaseTableResponseArrayOutput) Index(i pulumi.IntInput) DatabaseTableResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DatabaseTableResponse {
		return vs[0].([]DatabaseTableResponse)[vs[1].(int)]
	}).(DatabaseTableResponseOutput)
}

// File share information with Path, Username, and Password.
type FileShare struct {
	// Password credential used to connect to the share location.
	Password *string `pulumi:"password"`
	// The folder path for this share.
	Path string `pulumi:"path"`
	// User name credential to connect to the share location
	UserName *string `pulumi:"userName"`
}

// FileShareInput is an input type that accepts FileShareArgs and FileShareOutput values.
// You can construct a concrete instance of `FileShareInput` via:
//
//          FileShareArgs{...}
type FileShareInput interface {
	pulumi.Input

	ToFileShareOutput() FileShareOutput
	ToFileShareOutputWithContext(context.Context) FileShareOutput
}

// File share information with Path, Username, and Password.
type FileShareArgs struct {
	// Password credential used to connect to the share location.
	Password pulumi.StringPtrInput `pulumi:"password"`
	// The folder path for this share.
	Path pulumi.StringInput `pulumi:"path"`
	// User name credential to connect to the share location
	UserName pulumi.StringPtrInput `pulumi:"userName"`
}

func (FileShareArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FileShare)(nil)).Elem()
}

func (i FileShareArgs) ToFileShareOutput() FileShareOutput {
	return i.ToFileShareOutputWithContext(context.Background())
}

func (i FileShareArgs) ToFileShareOutputWithContext(ctx context.Context) FileShareOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FileShareOutput)
}

func (i FileShareArgs) ToFileSharePtrOutput() FileSharePtrOutput {
	return i.ToFileSharePtrOutputWithContext(context.Background())
}

func (i FileShareArgs) ToFileSharePtrOutputWithContext(ctx context.Context) FileSharePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FileShareOutput).ToFileSharePtrOutputWithContext(ctx)
}

// FileSharePtrInput is an input type that accepts FileShareArgs, FileSharePtr and FileSharePtrOutput values.
// You can construct a concrete instance of `FileSharePtrInput` via:
//
//          FileShareArgs{...}
//
//  or:
//
//          nil
type FileSharePtrInput interface {
	pulumi.Input

	ToFileSharePtrOutput() FileSharePtrOutput
	ToFileSharePtrOutputWithContext(context.Context) FileSharePtrOutput
}

type fileSharePtrType FileShareArgs

func FileSharePtr(v *FileShareArgs) FileSharePtrInput {
	return (*fileSharePtrType)(v)
}

func (*fileSharePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**FileShare)(nil)).Elem()
}

func (i *fileSharePtrType) ToFileSharePtrOutput() FileSharePtrOutput {
	return i.ToFileSharePtrOutputWithContext(context.Background())
}

func (i *fileSharePtrType) ToFileSharePtrOutputWithContext(ctx context.Context) FileSharePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FileSharePtrOutput)
}

// File share information with Path, Username, and Password.
type FileShareResponse struct {
	// Password credential used to connect to the share location.
	Password *string `pulumi:"password"`
	// The folder path for this share.
	Path string `pulumi:"path"`
	// User name credential to connect to the share location
	UserName *string `pulumi:"userName"`
}

// File share information with Path, Username, and Password.
type FileShareResponseOutput struct{ *pulumi.OutputState }

func (FileShareResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FileShareResponse)(nil)).Elem()
}

func (o FileShareResponseOutput) ToFileShareResponseOutput() FileShareResponseOutput {
	return o
}

func (o FileShareResponseOutput) ToFileShareResponseOutputWithContext(ctx context.Context) FileShareResponseOutput {
	return o
}

func (o FileShareResponseOutput) ToFileShareResponsePtrOutput() FileShareResponsePtrOutput {
	return o.ToFileShareResponsePtrOutputWithContext(context.Background())
}

func (o FileShareResponseOutput) ToFileShareResponsePtrOutputWithContext(ctx context.Context) FileShareResponsePtrOutput {
	return o.ApplyT(func(v FileShareResponse) *FileShareResponse {
		return &v
	}).(FileShareResponsePtrOutput)
}

// Password credential used to connect to the share location.
func (o FileShareResponseOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FileShareResponse) *string { return v.Password }).(pulumi.StringPtrOutput)
}

// The folder path for this share.
func (o FileShareResponseOutput) Path() pulumi.StringOutput {
	return o.ApplyT(func(v FileShareResponse) string { return v.Path }).(pulumi.StringOutput)
}

// User name credential to connect to the share location
func (o FileShareResponseOutput) UserName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FileShareResponse) *string { return v.UserName }).(pulumi.StringPtrOutput)
}

type FileShareResponsePtrOutput struct{ *pulumi.OutputState }

func (FileShareResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FileShareResponse)(nil)).Elem()
}

func (o FileShareResponsePtrOutput) ToFileShareResponsePtrOutput() FileShareResponsePtrOutput {
	return o
}

func (o FileShareResponsePtrOutput) ToFileShareResponsePtrOutputWithContext(ctx context.Context) FileShareResponsePtrOutput {
	return o
}

func (o FileShareResponsePtrOutput) Elem() FileShareResponseOutput {
	return o.ApplyT(func(v *FileShareResponse) FileShareResponse { return *v }).(FileShareResponseOutput)
}

// Password credential used to connect to the share location.
func (o FileShareResponsePtrOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FileShareResponse) *string {
		if v == nil {
			return nil
		}
		return v.Password
	}).(pulumi.StringPtrOutput)
}

// The folder path for this share.
func (o FileShareResponsePtrOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FileShareResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Path
	}).(pulumi.StringPtrOutput)
}

// User name credential to connect to the share location
func (o FileShareResponsePtrOutput) UserName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FileShareResponse) *string {
		if v == nil {
			return nil
		}
		return v.UserName
	}).(pulumi.StringPtrOutput)
}

// Input for the task that gets TDE certificates in Base64 encoded format.
type GetTdeCertificatesSqlTaskInput struct {
	// Backup file share information for file share to be used for temporarily storing files.
	BackupFileShare FileShare `pulumi:"backupFileShare"`
	// Connection information for SQL Server
	ConnectionInfo SqlConnectionInfo `pulumi:"connectionInfo"`
	// List containing certificate names and corresponding password to use for encrypting the exported certificate.
	SelectedCertificates []SelectedCertificateInput `pulumi:"selectedCertificates"`
}

// GetTdeCertificatesSqlTaskInputInput is an input type that accepts GetTdeCertificatesSqlTaskInputArgs and GetTdeCertificatesSqlTaskInputOutput values.
// You can construct a concrete instance of `GetTdeCertificatesSqlTaskInputInput` via:
//
//          GetTdeCertificatesSqlTaskInputArgs{...}
type GetTdeCertificatesSqlTaskInputInput interface {
	pulumi.Input

	ToGetTdeCertificatesSqlTaskInputOutput() GetTdeCertificatesSqlTaskInputOutput
	ToGetTdeCertificatesSqlTaskInputOutputWithContext(context.Context) GetTdeCertificatesSqlTaskInputOutput
}

// Input for the task that gets TDE certificates in Base64 encoded format.
type GetTdeCertificatesSqlTaskInputArgs struct {
	// Backup file share information for file share to be used for temporarily storing files.
	BackupFileShare FileShareInput `pulumi:"backupFileShare"`
	// Connection information for SQL Server
	ConnectionInfo SqlConnectionInfoInput `pulumi:"connectionInfo"`
	// List containing certificate names and corresponding password to use for encrypting the exported certificate.
	SelectedCertificates SelectedCertificateInputArrayInput `pulumi:"selectedCertificates"`
}

func (GetTdeCertificatesSqlTaskInputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetTdeCertificatesSqlTaskInput)(nil)).Elem()
}

func (i GetTdeCertificatesSqlTaskInputArgs) ToGetTdeCertificatesSqlTaskInputOutput() GetTdeCertificatesSqlTaskInputOutput {
	return i.ToGetTdeCertificatesSqlTaskInputOutputWithContext(context.Background())
}

func (i GetTdeCertificatesSqlTaskInputArgs) ToGetTdeCertificatesSqlTaskInputOutputWithContext(ctx context.Context) GetTdeCertificatesSqlTaskInputOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetTdeCertificatesSqlTaskInputOutput)
}

func (i GetTdeCertificatesSqlTaskInputArgs) ToGetTdeCertificatesSqlTaskInputPtrOutput() GetTdeCertificatesSqlTaskInputPtrOutput {
	return i.ToGetTdeCertificatesSqlTaskInputPtrOutputWithContext(context.Background())
}

func (i GetTdeCertificatesSqlTaskInputArgs) ToGetTdeCertificatesSqlTaskInputPtrOutputWithContext(ctx context.Context) GetTdeCertificatesSqlTaskInputPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetTdeCertificatesSqlTaskInputOutput).ToGetTdeCertificatesSqlTaskInputPtrOutputWithContext(ctx)
}

// GetTdeCertificatesSqlTaskInputPtrInput is an input type that accepts GetTdeCertificatesSqlTaskInputArgs, GetTdeCertificatesSqlTaskInputPtr and GetTdeCertificatesSqlTaskInputPtrOutput values.
// You can construct a concrete instance of `GetTdeCertificatesSqlTaskInputPtrInput` via:
//
//          GetTdeCertificatesSqlTaskInputArgs{...}
//
//  or:
//
//          nil
type GetTdeCertificatesSqlTaskInputPtrInput interface {
	pulumi.Input

	ToGetTdeCertificatesSqlTaskInputPtrOutput() GetTdeCertificatesSqlTaskInputPtrOutput
	ToGetTdeCertificatesSqlTaskInputPtrOutputWithContext(context.Context) GetTdeCertificatesSqlTaskInputPtrOutput
}

type getTdeCertificatesSqlTaskInputPtrType GetTdeCertificatesSqlTaskInputArgs

func GetTdeCertificatesSqlTaskInputPtr(v *GetTdeCertificatesSqlTaskInputArgs) GetTdeCertificatesSqlTaskInputPtrInput {
	return (*getTdeCertificatesSqlTaskInputPtrType)(v)
}

func (*getTdeCertificatesSqlTaskInputPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GetTdeCertificatesSqlTaskInput)(nil)).Elem()
}

func (i *getTdeCertificatesSqlTaskInputPtrType) ToGetTdeCertificatesSqlTaskInputPtrOutput() GetTdeCertificatesSqlTaskInputPtrOutput {
	return i.ToGetTdeCertificatesSqlTaskInputPtrOutputWithContext(context.Background())
}

func (i *getTdeCertificatesSqlTaskInputPtrType) ToGetTdeCertificatesSqlTaskInputPtrOutputWithContext(ctx context.Context) GetTdeCertificatesSqlTaskInputPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetTdeCertificatesSqlTaskInputPtrOutput)
}

// Input for the task that gets TDE certificates in Base64 encoded format.
type GetTdeCertificatesSqlTaskInputResponse struct {
	// Backup file share information for file share to be used for temporarily storing files.
	BackupFileShare FileShareResponse `pulumi:"backupFileShare"`
	// Connection information for SQL Server
	ConnectionInfo SqlConnectionInfoResponse `pulumi:"connectionInfo"`
	// List containing certificate names and corresponding password to use for encrypting the exported certificate.
	SelectedCertificates []SelectedCertificateInputResponse `pulumi:"selectedCertificates"`
}

// Input for the task that gets TDE certificates in Base64 encoded format.
type GetTdeCertificatesSqlTaskInputResponseOutput struct{ *pulumi.OutputState }

func (GetTdeCertificatesSqlTaskInputResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetTdeCertificatesSqlTaskInputResponse)(nil)).Elem()
}

func (o GetTdeCertificatesSqlTaskInputResponseOutput) ToGetTdeCertificatesSqlTaskInputResponseOutput() GetTdeCertificatesSqlTaskInputResponseOutput {
	return o
}

func (o GetTdeCertificatesSqlTaskInputResponseOutput) ToGetTdeCertificatesSqlTaskInputResponseOutputWithContext(ctx context.Context) GetTdeCertificatesSqlTaskInputResponseOutput {
	return o
}

func (o GetTdeCertificatesSqlTaskInputResponseOutput) ToGetTdeCertificatesSqlTaskInputResponsePtrOutput() GetTdeCertificatesSqlTaskInputResponsePtrOutput {
	return o.ToGetTdeCertificatesSqlTaskInputResponsePtrOutputWithContext(context.Background())
}

func (o GetTdeCertificatesSqlTaskInputResponseOutput) ToGetTdeCertificatesSqlTaskInputResponsePtrOutputWithContext(ctx context.Context) GetTdeCertificatesSqlTaskInputResponsePtrOutput {
	return o.ApplyT(func(v GetTdeCertificatesSqlTaskInputResponse) *GetTdeCertificatesSqlTaskInputResponse {
		return &v
	}).(GetTdeCertificatesSqlTaskInputResponsePtrOutput)
}

// Backup file share information for file share to be used for temporarily storing files.
func (o GetTdeCertificatesSqlTaskInputResponseOutput) BackupFileShare() FileShareResponseOutput {
	return o.ApplyT(func(v GetTdeCertificatesSqlTaskInputResponse) FileShareResponse { return v.BackupFileShare }).(FileShareResponseOutput)
}

// Connection information for SQL Server
func (o GetTdeCertificatesSqlTaskInputResponseOutput) ConnectionInfo() SqlConnectionInfoResponseOutput {
	return o.ApplyT(func(v GetTdeCertificatesSqlTaskInputResponse) SqlConnectionInfoResponse { return v.ConnectionInfo }).(SqlConnectionInfoResponseOutput)
}

// List containing certificate names and corresponding password to use for encrypting the exported certificate.
func (o GetTdeCertificatesSqlTaskInputResponseOutput) SelectedCertificates() SelectedCertificateInputResponseArrayOutput {
	return o.ApplyT(func(v GetTdeCertificatesSqlTaskInputResponse) []SelectedCertificateInputResponse {
		return v.SelectedCertificates
	}).(SelectedCertificateInputResponseArrayOutput)
}

type GetTdeCertificatesSqlTaskInputResponsePtrOutput struct{ *pulumi.OutputState }

func (GetTdeCertificatesSqlTaskInputResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GetTdeCertificatesSqlTaskInputResponse)(nil)).Elem()
}

func (o GetTdeCertificatesSqlTaskInputResponsePtrOutput) ToGetTdeCertificatesSqlTaskInputResponsePtrOutput() GetTdeCertificatesSqlTaskInputResponsePtrOutput {
	return o
}

func (o GetTdeCertificatesSqlTaskInputResponsePtrOutput) ToGetTdeCertificatesSqlTaskInputResponsePtrOutputWithContext(ctx context.Context) GetTdeCertificatesSqlTaskInputResponsePtrOutput {
	return o
}

func (o GetTdeCertificatesSqlTaskInputResponsePtrOutput) Elem() GetTdeCertificatesSqlTaskInputResponseOutput {
	return o.ApplyT(func(v *GetTdeCertificatesSqlTaskInputResponse) GetTdeCertificatesSqlTaskInputResponse { return *v }).(GetTdeCertificatesSqlTaskInputResponseOutput)
}

// Backup file share information for file share to be used for temporarily storing files.
func (o GetTdeCertificatesSqlTaskInputResponsePtrOutput) BackupFileShare() FileShareResponsePtrOutput {
	return o.ApplyT(func(v *GetTdeCertificatesSqlTaskInputResponse) *FileShareResponse {
		if v == nil {
			return nil
		}
		return &v.BackupFileShare
	}).(FileShareResponsePtrOutput)
}

// Connection information for SQL Server
func (o GetTdeCertificatesSqlTaskInputResponsePtrOutput) ConnectionInfo() SqlConnectionInfoResponsePtrOutput {
	return o.ApplyT(func(v *GetTdeCertificatesSqlTaskInputResponse) *SqlConnectionInfoResponse {
		if v == nil {
			return nil
		}
		return &v.ConnectionInfo
	}).(SqlConnectionInfoResponsePtrOutput)
}

// List containing certificate names and corresponding password to use for encrypting the exported certificate.
func (o GetTdeCertificatesSqlTaskInputResponsePtrOutput) SelectedCertificates() SelectedCertificateInputResponseArrayOutput {
	return o.ApplyT(func(v *GetTdeCertificatesSqlTaskInputResponse) []SelectedCertificateInputResponse {
		if v == nil {
			return nil
		}
		return v.SelectedCertificates
	}).(SelectedCertificateInputResponseArrayOutput)
}

// Output of the task that gets TDE certificates in Base64 encoded format.
type GetTdeCertificatesSqlTaskOutputResponse struct {
	// Mapping from certificate name to base 64 encoded format.
	Base64EncodedCertificates string `pulumi:"base64EncodedCertificates"`
	// Validation errors
	ValidationErrors []ReportableExceptionResponse `pulumi:"validationErrors"`
}

// Output of the task that gets TDE certificates in Base64 encoded format.
type GetTdeCertificatesSqlTaskOutputResponseOutput struct{ *pulumi.OutputState }

func (GetTdeCertificatesSqlTaskOutputResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetTdeCertificatesSqlTaskOutputResponse)(nil)).Elem()
}

func (o GetTdeCertificatesSqlTaskOutputResponseOutput) ToGetTdeCertificatesSqlTaskOutputResponseOutput() GetTdeCertificatesSqlTaskOutputResponseOutput {
	return o
}

func (o GetTdeCertificatesSqlTaskOutputResponseOutput) ToGetTdeCertificatesSqlTaskOutputResponseOutputWithContext(ctx context.Context) GetTdeCertificatesSqlTaskOutputResponseOutput {
	return o
}

// Mapping from certificate name to base 64 encoded format.
func (o GetTdeCertificatesSqlTaskOutputResponseOutput) Base64EncodedCertificates() pulumi.StringOutput {
	return o.ApplyT(func(v GetTdeCertificatesSqlTaskOutputResponse) string { return v.Base64EncodedCertificates }).(pulumi.StringOutput)
}

// Validation errors
func (o GetTdeCertificatesSqlTaskOutputResponseOutput) ValidationErrors() ReportableExceptionResponseArrayOutput {
	return o.ApplyT(func(v GetTdeCertificatesSqlTaskOutputResponse) []ReportableExceptionResponse {
		return v.ValidationErrors
	}).(ReportableExceptionResponseArrayOutput)
}

type GetTdeCertificatesSqlTaskOutputResponseArrayOutput struct{ *pulumi.OutputState }

func (GetTdeCertificatesSqlTaskOutputResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetTdeCertificatesSqlTaskOutputResponse)(nil)).Elem()
}

func (o GetTdeCertificatesSqlTaskOutputResponseArrayOutput) ToGetTdeCertificatesSqlTaskOutputResponseArrayOutput() GetTdeCertificatesSqlTaskOutputResponseArrayOutput {
	return o
}

func (o GetTdeCertificatesSqlTaskOutputResponseArrayOutput) ToGetTdeCertificatesSqlTaskOutputResponseArrayOutputWithContext(ctx context.Context) GetTdeCertificatesSqlTaskOutputResponseArrayOutput {
	return o
}

func (o GetTdeCertificatesSqlTaskOutputResponseArrayOutput) Index(i pulumi.IntInput) GetTdeCertificatesSqlTaskOutputResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetTdeCertificatesSqlTaskOutputResponse {
		return vs[0].([]GetTdeCertificatesSqlTaskOutputResponse)[vs[1].(int)]
	}).(GetTdeCertificatesSqlTaskOutputResponseOutput)
}

// Properties for the task that gets TDE certificates in Base64 encoded format.
type GetTdeCertificatesSqlTaskProperties struct {
	// Key value pairs of client data to attach meta data information to task
	ClientData map[string]string `pulumi:"clientData"`
	// Task input
	Input *GetTdeCertificatesSqlTaskInput `pulumi:"input"`
	// Task type.
	TaskType string `pulumi:"taskType"`
}

// GetTdeCertificatesSqlTaskPropertiesInput is an input type that accepts GetTdeCertificatesSqlTaskPropertiesArgs and GetTdeCertificatesSqlTaskPropertiesOutput values.
// You can construct a concrete instance of `GetTdeCertificatesSqlTaskPropertiesInput` via:
//
//          GetTdeCertificatesSqlTaskPropertiesArgs{...}
type GetTdeCertificatesSqlTaskPropertiesInput interface {
	pulumi.Input

	ToGetTdeCertificatesSqlTaskPropertiesOutput() GetTdeCertificatesSqlTaskPropertiesOutput
	ToGetTdeCertificatesSqlTaskPropertiesOutputWithContext(context.Context) GetTdeCertificatesSqlTaskPropertiesOutput
}

// Properties for the task that gets TDE certificates in Base64 encoded format.
type GetTdeCertificatesSqlTaskPropertiesArgs struct {
	// Key value pairs of client data to attach meta data information to task
	ClientData pulumi.StringMapInput `pulumi:"clientData"`
	// Task input
	Input GetTdeCertificatesSqlTaskInputPtrInput `pulumi:"input"`
	// Task type.
	TaskType pulumi.StringInput `pulumi:"taskType"`
}

func (GetTdeCertificatesSqlTaskPropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetTdeCertificatesSqlTaskProperties)(nil)).Elem()
}

func (i GetTdeCertificatesSqlTaskPropertiesArgs) ToGetTdeCertificatesSqlTaskPropertiesOutput() GetTdeCertificatesSqlTaskPropertiesOutput {
	return i.ToGetTdeCertificatesSqlTaskPropertiesOutputWithContext(context.Background())
}

func (i GetTdeCertificatesSqlTaskPropertiesArgs) ToGetTdeCertificatesSqlTaskPropertiesOutputWithContext(ctx context.Context) GetTdeCertificatesSqlTaskPropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetTdeCertificatesSqlTaskPropertiesOutput)
}

// Properties for the task that gets TDE certificates in Base64 encoded format.
type GetTdeCertificatesSqlTaskPropertiesResponse struct {
	// Key value pairs of client data to attach meta data information to task
	ClientData map[string]string `pulumi:"clientData"`
	// Array of command properties.
	Commands []interface{} `pulumi:"commands"`
	// Array of errors. This is ignored if submitted.
	Errors []ODataErrorResponse `pulumi:"errors"`
	// Task input
	Input *GetTdeCertificatesSqlTaskInputResponse `pulumi:"input"`
	// Task output. This is ignored if submitted.
	Output []GetTdeCertificatesSqlTaskOutputResponse `pulumi:"output"`
	// The state of the task. This is ignored if submitted.
	State string `pulumi:"state"`
	// Task type.
	TaskType string `pulumi:"taskType"`
}

// Properties for the task that gets TDE certificates in Base64 encoded format.
type GetTdeCertificatesSqlTaskPropertiesResponseOutput struct{ *pulumi.OutputState }

func (GetTdeCertificatesSqlTaskPropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetTdeCertificatesSqlTaskPropertiesResponse)(nil)).Elem()
}

func (o GetTdeCertificatesSqlTaskPropertiesResponseOutput) ToGetTdeCertificatesSqlTaskPropertiesResponseOutput() GetTdeCertificatesSqlTaskPropertiesResponseOutput {
	return o
}

func (o GetTdeCertificatesSqlTaskPropertiesResponseOutput) ToGetTdeCertificatesSqlTaskPropertiesResponseOutputWithContext(ctx context.Context) GetTdeCertificatesSqlTaskPropertiesResponseOutput {
	return o
}

// Key value pairs of client data to attach meta data information to task
func (o GetTdeCertificatesSqlTaskPropertiesResponseOutput) ClientData() pulumi.StringMapOutput {
	return o.ApplyT(func(v GetTdeCertificatesSqlTaskPropertiesResponse) map[string]string { return v.ClientData }).(pulumi.StringMapOutput)
}

// Array of command properties.
func (o GetTdeCertificatesSqlTaskPropertiesResponseOutput) Commands() pulumi.ArrayOutput {
	return o.ApplyT(func(v GetTdeCertificatesSqlTaskPropertiesResponse) []interface{} { return v.Commands }).(pulumi.ArrayOutput)
}

// Array of errors. This is ignored if submitted.
func (o GetTdeCertificatesSqlTaskPropertiesResponseOutput) Errors() ODataErrorResponseArrayOutput {
	return o.ApplyT(func(v GetTdeCertificatesSqlTaskPropertiesResponse) []ODataErrorResponse { return v.Errors }).(ODataErrorResponseArrayOutput)
}

// Task input
func (o GetTdeCertificatesSqlTaskPropertiesResponseOutput) Input() GetTdeCertificatesSqlTaskInputResponsePtrOutput {
	return o.ApplyT(func(v GetTdeCertificatesSqlTaskPropertiesResponse) *GetTdeCertificatesSqlTaskInputResponse {
		return v.Input
	}).(GetTdeCertificatesSqlTaskInputResponsePtrOutput)
}

// Task output. This is ignored if submitted.
func (o GetTdeCertificatesSqlTaskPropertiesResponseOutput) Output() GetTdeCertificatesSqlTaskOutputResponseArrayOutput {
	return o.ApplyT(func(v GetTdeCertificatesSqlTaskPropertiesResponse) []GetTdeCertificatesSqlTaskOutputResponse {
		return v.Output
	}).(GetTdeCertificatesSqlTaskOutputResponseArrayOutput)
}

// The state of the task. This is ignored if submitted.
func (o GetTdeCertificatesSqlTaskPropertiesResponseOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v GetTdeCertificatesSqlTaskPropertiesResponse) string { return v.State }).(pulumi.StringOutput)
}

// Task type.
func (o GetTdeCertificatesSqlTaskPropertiesResponseOutput) TaskType() pulumi.StringOutput {
	return o.ApplyT(func(v GetTdeCertificatesSqlTaskPropertiesResponse) string { return v.TaskType }).(pulumi.StringOutput)
}

// Input for the task that gets the list of tables contained within a provided list of Oracle schemas.
type GetUserTablesOracleTaskInput struct {
	// Information for connecting to Oracle source
	ConnectionInfo OracleConnectionInfo `pulumi:"connectionInfo"`
	// List of Oracle schemas for which to collect tables
	SelectedSchemas []string `pulumi:"selectedSchemas"`
}

// GetUserTablesOracleTaskInputInput is an input type that accepts GetUserTablesOracleTaskInputArgs and GetUserTablesOracleTaskInputOutput values.
// You can construct a concrete instance of `GetUserTablesOracleTaskInputInput` via:
//
//          GetUserTablesOracleTaskInputArgs{...}
type GetUserTablesOracleTaskInputInput interface {
	pulumi.Input

	ToGetUserTablesOracleTaskInputOutput() GetUserTablesOracleTaskInputOutput
	ToGetUserTablesOracleTaskInputOutputWithContext(context.Context) GetUserTablesOracleTaskInputOutput
}

// Input for the task that gets the list of tables contained within a provided list of Oracle schemas.
type GetUserTablesOracleTaskInputArgs struct {
	// Information for connecting to Oracle source
	ConnectionInfo OracleConnectionInfoInput `pulumi:"connectionInfo"`
	// List of Oracle schemas for which to collect tables
	SelectedSchemas pulumi.StringArrayInput `pulumi:"selectedSchemas"`
}

func (GetUserTablesOracleTaskInputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetUserTablesOracleTaskInput)(nil)).Elem()
}

func (i GetUserTablesOracleTaskInputArgs) ToGetUserTablesOracleTaskInputOutput() GetUserTablesOracleTaskInputOutput {
	return i.ToGetUserTablesOracleTaskInputOutputWithContext(context.Background())
}

func (i GetUserTablesOracleTaskInputArgs) ToGetUserTablesOracleTaskInputOutputWithContext(ctx context.Context) GetUserTablesOracleTaskInputOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetUserTablesOracleTaskInputOutput)
}

func (i GetUserTablesOracleTaskInputArgs) ToGetUserTablesOracleTaskInputPtrOutput() GetUserTablesOracleTaskInputPtrOutput {
	return i.ToGetUserTablesOracleTaskInputPtrOutputWithContext(context.Background())
}

func (i GetUserTablesOracleTaskInputArgs) ToGetUserTablesOracleTaskInputPtrOutputWithContext(ctx context.Context) GetUserTablesOracleTaskInputPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetUserTablesOracleTaskInputOutput).ToGetUserTablesOracleTaskInputPtrOutputWithContext(ctx)
}

// GetUserTablesOracleTaskInputPtrInput is an input type that accepts GetUserTablesOracleTaskInputArgs, GetUserTablesOracleTaskInputPtr and GetUserTablesOracleTaskInputPtrOutput values.
// You can construct a concrete instance of `GetUserTablesOracleTaskInputPtrInput` via:
//
//          GetUserTablesOracleTaskInputArgs{...}
//
//  or:
//
//          nil
type GetUserTablesOracleTaskInputPtrInput interface {
	pulumi.Input

	ToGetUserTablesOracleTaskInputPtrOutput() GetUserTablesOracleTaskInputPtrOutput
	ToGetUserTablesOracleTaskInputPtrOutputWithContext(context.Context) GetUserTablesOracleTaskInputPtrOutput
}

type getUserTablesOracleTaskInputPtrType GetUserTablesOracleTaskInputArgs

func GetUserTablesOracleTaskInputPtr(v *GetUserTablesOracleTaskInputArgs) GetUserTablesOracleTaskInputPtrInput {
	return (*getUserTablesOracleTaskInputPtrType)(v)
}

func (*getUserTablesOracleTaskInputPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GetUserTablesOracleTaskInput)(nil)).Elem()
}

func (i *getUserTablesOracleTaskInputPtrType) ToGetUserTablesOracleTaskInputPtrOutput() GetUserTablesOracleTaskInputPtrOutput {
	return i.ToGetUserTablesOracleTaskInputPtrOutputWithContext(context.Background())
}

func (i *getUserTablesOracleTaskInputPtrType) ToGetUserTablesOracleTaskInputPtrOutputWithContext(ctx context.Context) GetUserTablesOracleTaskInputPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetUserTablesOracleTaskInputPtrOutput)
}

// Input for the task that gets the list of tables contained within a provided list of Oracle schemas.
type GetUserTablesOracleTaskInputResponse struct {
	// Information for connecting to Oracle source
	ConnectionInfo OracleConnectionInfoResponse `pulumi:"connectionInfo"`
	// List of Oracle schemas for which to collect tables
	SelectedSchemas []string `pulumi:"selectedSchemas"`
}

// Input for the task that gets the list of tables contained within a provided list of Oracle schemas.
type GetUserTablesOracleTaskInputResponseOutput struct{ *pulumi.OutputState }

func (GetUserTablesOracleTaskInputResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetUserTablesOracleTaskInputResponse)(nil)).Elem()
}

func (o GetUserTablesOracleTaskInputResponseOutput) ToGetUserTablesOracleTaskInputResponseOutput() GetUserTablesOracleTaskInputResponseOutput {
	return o
}

func (o GetUserTablesOracleTaskInputResponseOutput) ToGetUserTablesOracleTaskInputResponseOutputWithContext(ctx context.Context) GetUserTablesOracleTaskInputResponseOutput {
	return o
}

func (o GetUserTablesOracleTaskInputResponseOutput) ToGetUserTablesOracleTaskInputResponsePtrOutput() GetUserTablesOracleTaskInputResponsePtrOutput {
	return o.ToGetUserTablesOracleTaskInputResponsePtrOutputWithContext(context.Background())
}

func (o GetUserTablesOracleTaskInputResponseOutput) ToGetUserTablesOracleTaskInputResponsePtrOutputWithContext(ctx context.Context) GetUserTablesOracleTaskInputResponsePtrOutput {
	return o.ApplyT(func(v GetUserTablesOracleTaskInputResponse) *GetUserTablesOracleTaskInputResponse {
		return &v
	}).(GetUserTablesOracleTaskInputResponsePtrOutput)
}

// Information for connecting to Oracle source
func (o GetUserTablesOracleTaskInputResponseOutput) ConnectionInfo() OracleConnectionInfoResponseOutput {
	return o.ApplyT(func(v GetUserTablesOracleTaskInputResponse) OracleConnectionInfoResponse { return v.ConnectionInfo }).(OracleConnectionInfoResponseOutput)
}

// List of Oracle schemas for which to collect tables
func (o GetUserTablesOracleTaskInputResponseOutput) SelectedSchemas() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetUserTablesOracleTaskInputResponse) []string { return v.SelectedSchemas }).(pulumi.StringArrayOutput)
}

type GetUserTablesOracleTaskInputResponsePtrOutput struct{ *pulumi.OutputState }

func (GetUserTablesOracleTaskInputResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GetUserTablesOracleTaskInputResponse)(nil)).Elem()
}

func (o GetUserTablesOracleTaskInputResponsePtrOutput) ToGetUserTablesOracleTaskInputResponsePtrOutput() GetUserTablesOracleTaskInputResponsePtrOutput {
	return o
}

func (o GetUserTablesOracleTaskInputResponsePtrOutput) ToGetUserTablesOracleTaskInputResponsePtrOutputWithContext(ctx context.Context) GetUserTablesOracleTaskInputResponsePtrOutput {
	return o
}

func (o GetUserTablesOracleTaskInputResponsePtrOutput) Elem() GetUserTablesOracleTaskInputResponseOutput {
	return o.ApplyT(func(v *GetUserTablesOracleTaskInputResponse) GetUserTablesOracleTaskInputResponse { return *v }).(GetUserTablesOracleTaskInputResponseOutput)
}

// Information for connecting to Oracle source
func (o GetUserTablesOracleTaskInputResponsePtrOutput) ConnectionInfo() OracleConnectionInfoResponsePtrOutput {
	return o.ApplyT(func(v *GetUserTablesOracleTaskInputResponse) *OracleConnectionInfoResponse {
		if v == nil {
			return nil
		}
		return &v.ConnectionInfo
	}).(OracleConnectionInfoResponsePtrOutput)
}

// List of Oracle schemas for which to collect tables
func (o GetUserTablesOracleTaskInputResponsePtrOutput) SelectedSchemas() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *GetUserTablesOracleTaskInputResponse) []string {
		if v == nil {
			return nil
		}
		return v.SelectedSchemas
	}).(pulumi.StringArrayOutput)
}

// Output for the task that gets the list of tables contained within a provided list of Oracle schemas.
type GetUserTablesOracleTaskOutputResponse struct {
	// The schema this result is for
	SchemaName string `pulumi:"schemaName"`
	// List of valid tables found for this schema
	Tables []DatabaseTableResponse `pulumi:"tables"`
	// Validation errors associated with the task
	ValidationErrors []ReportableExceptionResponse `pulumi:"validationErrors"`
}

// Output for the task that gets the list of tables contained within a provided list of Oracle schemas.
type GetUserTablesOracleTaskOutputResponseOutput struct{ *pulumi.OutputState }

func (GetUserTablesOracleTaskOutputResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetUserTablesOracleTaskOutputResponse)(nil)).Elem()
}

func (o GetUserTablesOracleTaskOutputResponseOutput) ToGetUserTablesOracleTaskOutputResponseOutput() GetUserTablesOracleTaskOutputResponseOutput {
	return o
}

func (o GetUserTablesOracleTaskOutputResponseOutput) ToGetUserTablesOracleTaskOutputResponseOutputWithContext(ctx context.Context) GetUserTablesOracleTaskOutputResponseOutput {
	return o
}

// The schema this result is for
func (o GetUserTablesOracleTaskOutputResponseOutput) SchemaName() pulumi.StringOutput {
	return o.ApplyT(func(v GetUserTablesOracleTaskOutputResponse) string { return v.SchemaName }).(pulumi.StringOutput)
}

// List of valid tables found for this schema
func (o GetUserTablesOracleTaskOutputResponseOutput) Tables() DatabaseTableResponseArrayOutput {
	return o.ApplyT(func(v GetUserTablesOracleTaskOutputResponse) []DatabaseTableResponse { return v.Tables }).(DatabaseTableResponseArrayOutput)
}

// Validation errors associated with the task
func (o GetUserTablesOracleTaskOutputResponseOutput) ValidationErrors() ReportableExceptionResponseArrayOutput {
	return o.ApplyT(func(v GetUserTablesOracleTaskOutputResponse) []ReportableExceptionResponse { return v.ValidationErrors }).(ReportableExceptionResponseArrayOutput)
}

type GetUserTablesOracleTaskOutputResponseArrayOutput struct{ *pulumi.OutputState }

func (GetUserTablesOracleTaskOutputResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetUserTablesOracleTaskOutputResponse)(nil)).Elem()
}

func (o GetUserTablesOracleTaskOutputResponseArrayOutput) ToGetUserTablesOracleTaskOutputResponseArrayOutput() GetUserTablesOracleTaskOutputResponseArrayOutput {
	return o
}

func (o GetUserTablesOracleTaskOutputResponseArrayOutput) ToGetUserTablesOracleTaskOutputResponseArrayOutputWithContext(ctx context.Context) GetUserTablesOracleTaskOutputResponseArrayOutput {
	return o
}

func (o GetUserTablesOracleTaskOutputResponseArrayOutput) Index(i pulumi.IntInput) GetUserTablesOracleTaskOutputResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetUserTablesOracleTaskOutputResponse {
		return vs[0].([]GetUserTablesOracleTaskOutputResponse)[vs[1].(int)]
	}).(GetUserTablesOracleTaskOutputResponseOutput)
}

// Properties for the task that collects user tables for the given list of Oracle schemas
type GetUserTablesOracleTaskProperties struct {
	// Key value pairs of client data to attach meta data information to task
	ClientData map[string]string `pulumi:"clientData"`
	// Task input
	Input *GetUserTablesOracleTaskInput `pulumi:"input"`
	// Task type.
	TaskType string `pulumi:"taskType"`
}

// GetUserTablesOracleTaskPropertiesInput is an input type that accepts GetUserTablesOracleTaskPropertiesArgs and GetUserTablesOracleTaskPropertiesOutput values.
// You can construct a concrete instance of `GetUserTablesOracleTaskPropertiesInput` via:
//
//          GetUserTablesOracleTaskPropertiesArgs{...}
type GetUserTablesOracleTaskPropertiesInput interface {
	pulumi.Input

	ToGetUserTablesOracleTaskPropertiesOutput() GetUserTablesOracleTaskPropertiesOutput
	ToGetUserTablesOracleTaskPropertiesOutputWithContext(context.Context) GetUserTablesOracleTaskPropertiesOutput
}

// Properties for the task that collects user tables for the given list of Oracle schemas
type GetUserTablesOracleTaskPropertiesArgs struct {
	// Key value pairs of client data to attach meta data information to task
	ClientData pulumi.StringMapInput `pulumi:"clientData"`
	// Task input
	Input GetUserTablesOracleTaskInputPtrInput `pulumi:"input"`
	// Task type.
	TaskType pulumi.StringInput `pulumi:"taskType"`
}

func (GetUserTablesOracleTaskPropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetUserTablesOracleTaskProperties)(nil)).Elem()
}

func (i GetUserTablesOracleTaskPropertiesArgs) ToGetUserTablesOracleTaskPropertiesOutput() GetUserTablesOracleTaskPropertiesOutput {
	return i.ToGetUserTablesOracleTaskPropertiesOutputWithContext(context.Background())
}

func (i GetUserTablesOracleTaskPropertiesArgs) ToGetUserTablesOracleTaskPropertiesOutputWithContext(ctx context.Context) GetUserTablesOracleTaskPropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetUserTablesOracleTaskPropertiesOutput)
}

// Properties for the task that collects user tables for the given list of Oracle schemas
type GetUserTablesOracleTaskPropertiesResponse struct {
	// Key value pairs of client data to attach meta data information to task
	ClientData map[string]string `pulumi:"clientData"`
	// Array of command properties.
	Commands []interface{} `pulumi:"commands"`
	// Array of errors. This is ignored if submitted.
	Errors []ODataErrorResponse `pulumi:"errors"`
	// Task input
	Input *GetUserTablesOracleTaskInputResponse `pulumi:"input"`
	// Task output. This is ignored if submitted.
	Output []GetUserTablesOracleTaskOutputResponse `pulumi:"output"`
	// The state of the task. This is ignored if submitted.
	State string `pulumi:"state"`
	// Task type.
	TaskType string `pulumi:"taskType"`
}

// Properties for the task that collects user tables for the given list of Oracle schemas
type GetUserTablesOracleTaskPropertiesResponseOutput struct{ *pulumi.OutputState }

func (GetUserTablesOracleTaskPropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetUserTablesOracleTaskPropertiesResponse)(nil)).Elem()
}

func (o GetUserTablesOracleTaskPropertiesResponseOutput) ToGetUserTablesOracleTaskPropertiesResponseOutput() GetUserTablesOracleTaskPropertiesResponseOutput {
	return o
}

func (o GetUserTablesOracleTaskPropertiesResponseOutput) ToGetUserTablesOracleTaskPropertiesResponseOutputWithContext(ctx context.Context) GetUserTablesOracleTaskPropertiesResponseOutput {
	return o
}

// Key value pairs of client data to attach meta data information to task
func (o GetUserTablesOracleTaskPropertiesResponseOutput) ClientData() pulumi.StringMapOutput {
	return o.ApplyT(func(v GetUserTablesOracleTaskPropertiesResponse) map[string]string { return v.ClientData }).(pulumi.StringMapOutput)
}

// Array of command properties.
func (o GetUserTablesOracleTaskPropertiesResponseOutput) Commands() pulumi.ArrayOutput {
	return o.ApplyT(func(v GetUserTablesOracleTaskPropertiesResponse) []interface{} { return v.Commands }).(pulumi.ArrayOutput)
}

// Array of errors. This is ignored if submitted.
func (o GetUserTablesOracleTaskPropertiesResponseOutput) Errors() ODataErrorResponseArrayOutput {
	return o.ApplyT(func(v GetUserTablesOracleTaskPropertiesResponse) []ODataErrorResponse { return v.Errors }).(ODataErrorResponseArrayOutput)
}

// Task input
func (o GetUserTablesOracleTaskPropertiesResponseOutput) Input() GetUserTablesOracleTaskInputResponsePtrOutput {
	return o.ApplyT(func(v GetUserTablesOracleTaskPropertiesResponse) *GetUserTablesOracleTaskInputResponse {
		return v.Input
	}).(GetUserTablesOracleTaskInputResponsePtrOutput)
}

// Task output. This is ignored if submitted.
func (o GetUserTablesOracleTaskPropertiesResponseOutput) Output() GetUserTablesOracleTaskOutputResponseArrayOutput {
	return o.ApplyT(func(v GetUserTablesOracleTaskPropertiesResponse) []GetUserTablesOracleTaskOutputResponse {
		return v.Output
	}).(GetUserTablesOracleTaskOutputResponseArrayOutput)
}

// The state of the task. This is ignored if submitted.
func (o GetUserTablesOracleTaskPropertiesResponseOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v GetUserTablesOracleTaskPropertiesResponse) string { return v.State }).(pulumi.StringOutput)
}

// Task type.
func (o GetUserTablesOracleTaskPropertiesResponseOutput) TaskType() pulumi.StringOutput {
	return o.ApplyT(func(v GetUserTablesOracleTaskPropertiesResponse) string { return v.TaskType }).(pulumi.StringOutput)
}

// Input for the task that gets the list of tables for a provided list of PostgreSQL databases.
type GetUserTablesPostgreSqlTaskInput struct {
	// Information for connecting to PostgreSQL source
	ConnectionInfo PostgreSqlConnectionInfo `pulumi:"connectionInfo"`
	// List of PostgreSQL databases for which to collect tables
	SelectedDatabases []string `pulumi:"selectedDatabases"`
}

// GetUserTablesPostgreSqlTaskInputInput is an input type that accepts GetUserTablesPostgreSqlTaskInputArgs and GetUserTablesPostgreSqlTaskInputOutput values.
// You can construct a concrete instance of `GetUserTablesPostgreSqlTaskInputInput` via:
//
//          GetUserTablesPostgreSqlTaskInputArgs{...}
type GetUserTablesPostgreSqlTaskInputInput interface {
	pulumi.Input

	ToGetUserTablesPostgreSqlTaskInputOutput() GetUserTablesPostgreSqlTaskInputOutput
	ToGetUserTablesPostgreSqlTaskInputOutputWithContext(context.Context) GetUserTablesPostgreSqlTaskInputOutput
}

// Input for the task that gets the list of tables for a provided list of PostgreSQL databases.
type GetUserTablesPostgreSqlTaskInputArgs struct {
	// Information for connecting to PostgreSQL source
	ConnectionInfo PostgreSqlConnectionInfoInput `pulumi:"connectionInfo"`
	// List of PostgreSQL databases for which to collect tables
	SelectedDatabases pulumi.StringArrayInput `pulumi:"selectedDatabases"`
}

func (GetUserTablesPostgreSqlTaskInputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetUserTablesPostgreSqlTaskInput)(nil)).Elem()
}

func (i GetUserTablesPostgreSqlTaskInputArgs) ToGetUserTablesPostgreSqlTaskInputOutput() GetUserTablesPostgreSqlTaskInputOutput {
	return i.ToGetUserTablesPostgreSqlTaskInputOutputWithContext(context.Background())
}

func (i GetUserTablesPostgreSqlTaskInputArgs) ToGetUserTablesPostgreSqlTaskInputOutputWithContext(ctx context.Context) GetUserTablesPostgreSqlTaskInputOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetUserTablesPostgreSqlTaskInputOutput)
}

func (i GetUserTablesPostgreSqlTaskInputArgs) ToGetUserTablesPostgreSqlTaskInputPtrOutput() GetUserTablesPostgreSqlTaskInputPtrOutput {
	return i.ToGetUserTablesPostgreSqlTaskInputPtrOutputWithContext(context.Background())
}

func (i GetUserTablesPostgreSqlTaskInputArgs) ToGetUserTablesPostgreSqlTaskInputPtrOutputWithContext(ctx context.Context) GetUserTablesPostgreSqlTaskInputPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetUserTablesPostgreSqlTaskInputOutput).ToGetUserTablesPostgreSqlTaskInputPtrOutputWithContext(ctx)
}

// GetUserTablesPostgreSqlTaskInputPtrInput is an input type that accepts GetUserTablesPostgreSqlTaskInputArgs, GetUserTablesPostgreSqlTaskInputPtr and GetUserTablesPostgreSqlTaskInputPtrOutput values.
// You can construct a concrete instance of `GetUserTablesPostgreSqlTaskInputPtrInput` via:
//
//          GetUserTablesPostgreSqlTaskInputArgs{...}
//
//  or:
//
//          nil
type GetUserTablesPostgreSqlTaskInputPtrInput interface {
	pulumi.Input

	ToGetUserTablesPostgreSqlTaskInputPtrOutput() GetUserTablesPostgreSqlTaskInputPtrOutput
	ToGetUserTablesPostgreSqlTaskInputPtrOutputWithContext(context.Context) GetUserTablesPostgreSqlTaskInputPtrOutput
}

type getUserTablesPostgreSqlTaskInputPtrType GetUserTablesPostgreSqlTaskInputArgs

func GetUserTablesPostgreSqlTaskInputPtr(v *GetUserTablesPostgreSqlTaskInputArgs) GetUserTablesPostgreSqlTaskInputPtrInput {
	return (*getUserTablesPostgreSqlTaskInputPtrType)(v)
}

func (*getUserTablesPostgreSqlTaskInputPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GetUserTablesPostgreSqlTaskInput)(nil)).Elem()
}

func (i *getUserTablesPostgreSqlTaskInputPtrType) ToGetUserTablesPostgreSqlTaskInputPtrOutput() GetUserTablesPostgreSqlTaskInputPtrOutput {
	return i.ToGetUserTablesPostgreSqlTaskInputPtrOutputWithContext(context.Background())
}

func (i *getUserTablesPostgreSqlTaskInputPtrType) ToGetUserTablesPostgreSqlTaskInputPtrOutputWithContext(ctx context.Context) GetUserTablesPostgreSqlTaskInputPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetUserTablesPostgreSqlTaskInputPtrOutput)
}

// Input for the task that gets the list of tables for a provided list of PostgreSQL databases.
type GetUserTablesPostgreSqlTaskInputResponse struct {
	// Information for connecting to PostgreSQL source
	ConnectionInfo PostgreSqlConnectionInfoResponse `pulumi:"connectionInfo"`
	// List of PostgreSQL databases for which to collect tables
	SelectedDatabases []string `pulumi:"selectedDatabases"`
}

// Input for the task that gets the list of tables for a provided list of PostgreSQL databases.
type GetUserTablesPostgreSqlTaskInputResponseOutput struct{ *pulumi.OutputState }

func (GetUserTablesPostgreSqlTaskInputResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetUserTablesPostgreSqlTaskInputResponse)(nil)).Elem()
}

func (o GetUserTablesPostgreSqlTaskInputResponseOutput) ToGetUserTablesPostgreSqlTaskInputResponseOutput() GetUserTablesPostgreSqlTaskInputResponseOutput {
	return o
}

func (o GetUserTablesPostgreSqlTaskInputResponseOutput) ToGetUserTablesPostgreSqlTaskInputResponseOutputWithContext(ctx context.Context) GetUserTablesPostgreSqlTaskInputResponseOutput {
	return o
}

func (o GetUserTablesPostgreSqlTaskInputResponseOutput) ToGetUserTablesPostgreSqlTaskInputResponsePtrOutput() GetUserTablesPostgreSqlTaskInputResponsePtrOutput {
	return o.ToGetUserTablesPostgreSqlTaskInputResponsePtrOutputWithContext(context.Background())
}

func (o GetUserTablesPostgreSqlTaskInputResponseOutput) ToGetUserTablesPostgreSqlTaskInputResponsePtrOutputWithContext(ctx context.Context) GetUserTablesPostgreSqlTaskInputResponsePtrOutput {
	return o.ApplyT(func(v GetUserTablesPostgreSqlTaskInputResponse) *GetUserTablesPostgreSqlTaskInputResponse {
		return &v
	}).(GetUserTablesPostgreSqlTaskInputResponsePtrOutput)
}

// Information for connecting to PostgreSQL source
func (o GetUserTablesPostgreSqlTaskInputResponseOutput) ConnectionInfo() PostgreSqlConnectionInfoResponseOutput {
	return o.ApplyT(func(v GetUserTablesPostgreSqlTaskInputResponse) PostgreSqlConnectionInfoResponse {
		return v.ConnectionInfo
	}).(PostgreSqlConnectionInfoResponseOutput)
}

// List of PostgreSQL databases for which to collect tables
func (o GetUserTablesPostgreSqlTaskInputResponseOutput) SelectedDatabases() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetUserTablesPostgreSqlTaskInputResponse) []string { return v.SelectedDatabases }).(pulumi.StringArrayOutput)
}

type GetUserTablesPostgreSqlTaskInputResponsePtrOutput struct{ *pulumi.OutputState }

func (GetUserTablesPostgreSqlTaskInputResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GetUserTablesPostgreSqlTaskInputResponse)(nil)).Elem()
}

func (o GetUserTablesPostgreSqlTaskInputResponsePtrOutput) ToGetUserTablesPostgreSqlTaskInputResponsePtrOutput() GetUserTablesPostgreSqlTaskInputResponsePtrOutput {
	return o
}

func (o GetUserTablesPostgreSqlTaskInputResponsePtrOutput) ToGetUserTablesPostgreSqlTaskInputResponsePtrOutputWithContext(ctx context.Context) GetUserTablesPostgreSqlTaskInputResponsePtrOutput {
	return o
}

func (o GetUserTablesPostgreSqlTaskInputResponsePtrOutput) Elem() GetUserTablesPostgreSqlTaskInputResponseOutput {
	return o.ApplyT(func(v *GetUserTablesPostgreSqlTaskInputResponse) GetUserTablesPostgreSqlTaskInputResponse { return *v }).(GetUserTablesPostgreSqlTaskInputResponseOutput)
}

// Information for connecting to PostgreSQL source
func (o GetUserTablesPostgreSqlTaskInputResponsePtrOutput) ConnectionInfo() PostgreSqlConnectionInfoResponsePtrOutput {
	return o.ApplyT(func(v *GetUserTablesPostgreSqlTaskInputResponse) *PostgreSqlConnectionInfoResponse {
		if v == nil {
			return nil
		}
		return &v.ConnectionInfo
	}).(PostgreSqlConnectionInfoResponsePtrOutput)
}

// List of PostgreSQL databases for which to collect tables
func (o GetUserTablesPostgreSqlTaskInputResponsePtrOutput) SelectedDatabases() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *GetUserTablesPostgreSqlTaskInputResponse) []string {
		if v == nil {
			return nil
		}
		return v.SelectedDatabases
	}).(pulumi.StringArrayOutput)
}

// Output for the task that gets the list of tables for a provided list of PostgreSQL databases.
type GetUserTablesPostgreSqlTaskOutputResponse struct {
	// The database this result is for
	DatabaseName string `pulumi:"databaseName"`
	// List of valid tables found for this database
	Tables []DatabaseTableResponse `pulumi:"tables"`
	// Validation errors associated with the task
	ValidationErrors []ReportableExceptionResponse `pulumi:"validationErrors"`
}

// Output for the task that gets the list of tables for a provided list of PostgreSQL databases.
type GetUserTablesPostgreSqlTaskOutputResponseOutput struct{ *pulumi.OutputState }

func (GetUserTablesPostgreSqlTaskOutputResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetUserTablesPostgreSqlTaskOutputResponse)(nil)).Elem()
}

func (o GetUserTablesPostgreSqlTaskOutputResponseOutput) ToGetUserTablesPostgreSqlTaskOutputResponseOutput() GetUserTablesPostgreSqlTaskOutputResponseOutput {
	return o
}

func (o GetUserTablesPostgreSqlTaskOutputResponseOutput) ToGetUserTablesPostgreSqlTaskOutputResponseOutputWithContext(ctx context.Context) GetUserTablesPostgreSqlTaskOutputResponseOutput {
	return o
}

// The database this result is for
func (o GetUserTablesPostgreSqlTaskOutputResponseOutput) DatabaseName() pulumi.StringOutput {
	return o.ApplyT(func(v GetUserTablesPostgreSqlTaskOutputResponse) string { return v.DatabaseName }).(pulumi.StringOutput)
}

// List of valid tables found for this database
func (o GetUserTablesPostgreSqlTaskOutputResponseOutput) Tables() DatabaseTableResponseArrayOutput {
	return o.ApplyT(func(v GetUserTablesPostgreSqlTaskOutputResponse) []DatabaseTableResponse { return v.Tables }).(DatabaseTableResponseArrayOutput)
}

// Validation errors associated with the task
func (o GetUserTablesPostgreSqlTaskOutputResponseOutput) ValidationErrors() ReportableExceptionResponseArrayOutput {
	return o.ApplyT(func(v GetUserTablesPostgreSqlTaskOutputResponse) []ReportableExceptionResponse {
		return v.ValidationErrors
	}).(ReportableExceptionResponseArrayOutput)
}

type GetUserTablesPostgreSqlTaskOutputResponseArrayOutput struct{ *pulumi.OutputState }

func (GetUserTablesPostgreSqlTaskOutputResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetUserTablesPostgreSqlTaskOutputResponse)(nil)).Elem()
}

func (o GetUserTablesPostgreSqlTaskOutputResponseArrayOutput) ToGetUserTablesPostgreSqlTaskOutputResponseArrayOutput() GetUserTablesPostgreSqlTaskOutputResponseArrayOutput {
	return o
}

func (o GetUserTablesPostgreSqlTaskOutputResponseArrayOutput) ToGetUserTablesPostgreSqlTaskOutputResponseArrayOutputWithContext(ctx context.Context) GetUserTablesPostgreSqlTaskOutputResponseArrayOutput {
	return o
}

func (o GetUserTablesPostgreSqlTaskOutputResponseArrayOutput) Index(i pulumi.IntInput) GetUserTablesPostgreSqlTaskOutputResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetUserTablesPostgreSqlTaskOutputResponse {
		return vs[0].([]GetUserTablesPostgreSqlTaskOutputResponse)[vs[1].(int)]
	}).(GetUserTablesPostgreSqlTaskOutputResponseOutput)
}

// Properties for the task that collects user tables for the given list of databases
type GetUserTablesPostgreSqlTaskProperties struct {
	// Key value pairs of client data to attach meta data information to task
	ClientData map[string]string `pulumi:"clientData"`
	// Task input
	Input *GetUserTablesPostgreSqlTaskInput `pulumi:"input"`
	// Task type.
	TaskType string `pulumi:"taskType"`
}

// GetUserTablesPostgreSqlTaskPropertiesInput is an input type that accepts GetUserTablesPostgreSqlTaskPropertiesArgs and GetUserTablesPostgreSqlTaskPropertiesOutput values.
// You can construct a concrete instance of `GetUserTablesPostgreSqlTaskPropertiesInput` via:
//
//          GetUserTablesPostgreSqlTaskPropertiesArgs{...}
type GetUserTablesPostgreSqlTaskPropertiesInput interface {
	pulumi.Input

	ToGetUserTablesPostgreSqlTaskPropertiesOutput() GetUserTablesPostgreSqlTaskPropertiesOutput
	ToGetUserTablesPostgreSqlTaskPropertiesOutputWithContext(context.Context) GetUserTablesPostgreSqlTaskPropertiesOutput
}

// Properties for the task that collects user tables for the given list of databases
type GetUserTablesPostgreSqlTaskPropertiesArgs struct {
	// Key value pairs of client data to attach meta data information to task
	ClientData pulumi.StringMapInput `pulumi:"clientData"`
	// Task input
	Input GetUserTablesPostgreSqlTaskInputPtrInput `pulumi:"input"`
	// Task type.
	TaskType pulumi.StringInput `pulumi:"taskType"`
}

func (GetUserTablesPostgreSqlTaskPropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetUserTablesPostgreSqlTaskProperties)(nil)).Elem()
}

func (i GetUserTablesPostgreSqlTaskPropertiesArgs) ToGetUserTablesPostgreSqlTaskPropertiesOutput() GetUserTablesPostgreSqlTaskPropertiesOutput {
	return i.ToGetUserTablesPostgreSqlTaskPropertiesOutputWithContext(context.Background())
}

func (i GetUserTablesPostgreSqlTaskPropertiesArgs) ToGetUserTablesPostgreSqlTaskPropertiesOutputWithContext(ctx context.Context) GetUserTablesPostgreSqlTaskPropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetUserTablesPostgreSqlTaskPropertiesOutput)
}

// Properties for the task that collects user tables for the given list of databases
type GetUserTablesPostgreSqlTaskPropertiesResponse struct {
	// Key value pairs of client data to attach meta data information to task
	ClientData map[string]string `pulumi:"clientData"`
	// Array of command properties.
	Commands []interface{} `pulumi:"commands"`
	// Array of errors. This is ignored if submitted.
	Errors []ODataErrorResponse `pulumi:"errors"`
	// Task input
	Input *GetUserTablesPostgreSqlTaskInputResponse `pulumi:"input"`
	// Task output. This is ignored if submitted.
	Output []GetUserTablesPostgreSqlTaskOutputResponse `pulumi:"output"`
	// The state of the task. This is ignored if submitted.
	State string `pulumi:"state"`
	// Task type.
	TaskType string `pulumi:"taskType"`
}

// Properties for the task that collects user tables for the given list of databases
type GetUserTablesPostgreSqlTaskPropertiesResponseOutput struct{ *pulumi.OutputState }

func (GetUserTablesPostgreSqlTaskPropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetUserTablesPostgreSqlTaskPropertiesResponse)(nil)).Elem()
}

func (o GetUserTablesPostgreSqlTaskPropertiesResponseOutput) ToGetUserTablesPostgreSqlTaskPropertiesResponseOutput() GetUserTablesPostgreSqlTaskPropertiesResponseOutput {
	return o
}

func (o GetUserTablesPostgreSqlTaskPropertiesResponseOutput) ToGetUserTablesPostgreSqlTaskPropertiesResponseOutputWithContext(ctx context.Context) GetUserTablesPostgreSqlTaskPropertiesResponseOutput {
	return o
}

// Key value pairs of client data to attach meta data information to task
func (o GetUserTablesPostgreSqlTaskPropertiesResponseOutput) ClientData() pulumi.StringMapOutput {
	return o.ApplyT(func(v GetUserTablesPostgreSqlTaskPropertiesResponse) map[string]string { return v.ClientData }).(pulumi.StringMapOutput)
}

// Array of command properties.
func (o GetUserTablesPostgreSqlTaskPropertiesResponseOutput) Commands() pulumi.ArrayOutput {
	return o.ApplyT(func(v GetUserTablesPostgreSqlTaskPropertiesResponse) []interface{} { return v.Commands }).(pulumi.ArrayOutput)
}

// Array of errors. This is ignored if submitted.
func (o GetUserTablesPostgreSqlTaskPropertiesResponseOutput) Errors() ODataErrorResponseArrayOutput {
	return o.ApplyT(func(v GetUserTablesPostgreSqlTaskPropertiesResponse) []ODataErrorResponse { return v.Errors }).(ODataErrorResponseArrayOutput)
}

// Task input
func (o GetUserTablesPostgreSqlTaskPropertiesResponseOutput) Input() GetUserTablesPostgreSqlTaskInputResponsePtrOutput {
	return o.ApplyT(func(v GetUserTablesPostgreSqlTaskPropertiesResponse) *GetUserTablesPostgreSqlTaskInputResponse {
		return v.Input
	}).(GetUserTablesPostgreSqlTaskInputResponsePtrOutput)
}

// Task output. This is ignored if submitted.
func (o GetUserTablesPostgreSqlTaskPropertiesResponseOutput) Output() GetUserTablesPostgreSqlTaskOutputResponseArrayOutput {
	return o.ApplyT(func(v GetUserTablesPostgreSqlTaskPropertiesResponse) []GetUserTablesPostgreSqlTaskOutputResponse {
		return v.Output
	}).(GetUserTablesPostgreSqlTaskOutputResponseArrayOutput)
}

// The state of the task. This is ignored if submitted.
func (o GetUserTablesPostgreSqlTaskPropertiesResponseOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v GetUserTablesPostgreSqlTaskPropertiesResponse) string { return v.State }).(pulumi.StringOutput)
}

// Task type.
func (o GetUserTablesPostgreSqlTaskPropertiesResponseOutput) TaskType() pulumi.StringOutput {
	return o.ApplyT(func(v GetUserTablesPostgreSqlTaskPropertiesResponse) string { return v.TaskType }).(pulumi.StringOutput)
}

// Input for the task that collects user tables for the given list of databases
type GetUserTablesSqlSyncTaskInput struct {
	// List of source database names to collect tables for
	SelectedSourceDatabases []string `pulumi:"selectedSourceDatabases"`
	// List of target database names to collect tables for
	SelectedTargetDatabases []string `pulumi:"selectedTargetDatabases"`
	// Connection information for SQL Server
	SourceConnectionInfo SqlConnectionInfo `pulumi:"sourceConnectionInfo"`
	// Connection information for SQL DB
	TargetConnectionInfo SqlConnectionInfo `pulumi:"targetConnectionInfo"`
}

// GetUserTablesSqlSyncTaskInputInput is an input type that accepts GetUserTablesSqlSyncTaskInputArgs and GetUserTablesSqlSyncTaskInputOutput values.
// You can construct a concrete instance of `GetUserTablesSqlSyncTaskInputInput` via:
//
//          GetUserTablesSqlSyncTaskInputArgs{...}
type GetUserTablesSqlSyncTaskInputInput interface {
	pulumi.Input

	ToGetUserTablesSqlSyncTaskInputOutput() GetUserTablesSqlSyncTaskInputOutput
	ToGetUserTablesSqlSyncTaskInputOutputWithContext(context.Context) GetUserTablesSqlSyncTaskInputOutput
}

// Input for the task that collects user tables for the given list of databases
type GetUserTablesSqlSyncTaskInputArgs struct {
	// List of source database names to collect tables for
	SelectedSourceDatabases pulumi.StringArrayInput `pulumi:"selectedSourceDatabases"`
	// List of target database names to collect tables for
	SelectedTargetDatabases pulumi.StringArrayInput `pulumi:"selectedTargetDatabases"`
	// Connection information for SQL Server
	SourceConnectionInfo SqlConnectionInfoInput `pulumi:"sourceConnectionInfo"`
	// Connection information for SQL DB
	TargetConnectionInfo SqlConnectionInfoInput `pulumi:"targetConnectionInfo"`
}

func (GetUserTablesSqlSyncTaskInputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetUserTablesSqlSyncTaskInput)(nil)).Elem()
}

func (i GetUserTablesSqlSyncTaskInputArgs) ToGetUserTablesSqlSyncTaskInputOutput() GetUserTablesSqlSyncTaskInputOutput {
	return i.ToGetUserTablesSqlSyncTaskInputOutputWithContext(context.Background())
}

func (i GetUserTablesSqlSyncTaskInputArgs) ToGetUserTablesSqlSyncTaskInputOutputWithContext(ctx context.Context) GetUserTablesSqlSyncTaskInputOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetUserTablesSqlSyncTaskInputOutput)
}

func (i GetUserTablesSqlSyncTaskInputArgs) ToGetUserTablesSqlSyncTaskInputPtrOutput() GetUserTablesSqlSyncTaskInputPtrOutput {
	return i.ToGetUserTablesSqlSyncTaskInputPtrOutputWithContext(context.Background())
}

func (i GetUserTablesSqlSyncTaskInputArgs) ToGetUserTablesSqlSyncTaskInputPtrOutputWithContext(ctx context.Context) GetUserTablesSqlSyncTaskInputPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetUserTablesSqlSyncTaskInputOutput).ToGetUserTablesSqlSyncTaskInputPtrOutputWithContext(ctx)
}

// GetUserTablesSqlSyncTaskInputPtrInput is an input type that accepts GetUserTablesSqlSyncTaskInputArgs, GetUserTablesSqlSyncTaskInputPtr and GetUserTablesSqlSyncTaskInputPtrOutput values.
// You can construct a concrete instance of `GetUserTablesSqlSyncTaskInputPtrInput` via:
//
//          GetUserTablesSqlSyncTaskInputArgs{...}
//
//  or:
//
//          nil
type GetUserTablesSqlSyncTaskInputPtrInput interface {
	pulumi.Input

	ToGetUserTablesSqlSyncTaskInputPtrOutput() GetUserTablesSqlSyncTaskInputPtrOutput
	ToGetUserTablesSqlSyncTaskInputPtrOutputWithContext(context.Context) GetUserTablesSqlSyncTaskInputPtrOutput
}

type getUserTablesSqlSyncTaskInputPtrType GetUserTablesSqlSyncTaskInputArgs

func GetUserTablesSqlSyncTaskInputPtr(v *GetUserTablesSqlSyncTaskInputArgs) GetUserTablesSqlSyncTaskInputPtrInput {
	return (*getUserTablesSqlSyncTaskInputPtrType)(v)
}

func (*getUserTablesSqlSyncTaskInputPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GetUserTablesSqlSyncTaskInput)(nil)).Elem()
}

func (i *getUserTablesSqlSyncTaskInputPtrType) ToGetUserTablesSqlSyncTaskInputPtrOutput() GetUserTablesSqlSyncTaskInputPtrOutput {
	return i.ToGetUserTablesSqlSyncTaskInputPtrOutputWithContext(context.Background())
}

func (i *getUserTablesSqlSyncTaskInputPtrType) ToGetUserTablesSqlSyncTaskInputPtrOutputWithContext(ctx context.Context) GetUserTablesSqlSyncTaskInputPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetUserTablesSqlSyncTaskInputPtrOutput)
}

// Input for the task that collects user tables for the given list of databases
type GetUserTablesSqlSyncTaskInputResponse struct {
	// List of source database names to collect tables for
	SelectedSourceDatabases []string `pulumi:"selectedSourceDatabases"`
	// List of target database names to collect tables for
	SelectedTargetDatabases []string `pulumi:"selectedTargetDatabases"`
	// Connection information for SQL Server
	SourceConnectionInfo SqlConnectionInfoResponse `pulumi:"sourceConnectionInfo"`
	// Connection information for SQL DB
	TargetConnectionInfo SqlConnectionInfoResponse `pulumi:"targetConnectionInfo"`
}

// Input for the task that collects user tables for the given list of databases
type GetUserTablesSqlSyncTaskInputResponseOutput struct{ *pulumi.OutputState }

func (GetUserTablesSqlSyncTaskInputResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetUserTablesSqlSyncTaskInputResponse)(nil)).Elem()
}

func (o GetUserTablesSqlSyncTaskInputResponseOutput) ToGetUserTablesSqlSyncTaskInputResponseOutput() GetUserTablesSqlSyncTaskInputResponseOutput {
	return o
}

func (o GetUserTablesSqlSyncTaskInputResponseOutput) ToGetUserTablesSqlSyncTaskInputResponseOutputWithContext(ctx context.Context) GetUserTablesSqlSyncTaskInputResponseOutput {
	return o
}

func (o GetUserTablesSqlSyncTaskInputResponseOutput) ToGetUserTablesSqlSyncTaskInputResponsePtrOutput() GetUserTablesSqlSyncTaskInputResponsePtrOutput {
	return o.ToGetUserTablesSqlSyncTaskInputResponsePtrOutputWithContext(context.Background())
}

func (o GetUserTablesSqlSyncTaskInputResponseOutput) ToGetUserTablesSqlSyncTaskInputResponsePtrOutputWithContext(ctx context.Context) GetUserTablesSqlSyncTaskInputResponsePtrOutput {
	return o.ApplyT(func(v GetUserTablesSqlSyncTaskInputResponse) *GetUserTablesSqlSyncTaskInputResponse {
		return &v
	}).(GetUserTablesSqlSyncTaskInputResponsePtrOutput)
}

// List of source database names to collect tables for
func (o GetUserTablesSqlSyncTaskInputResponseOutput) SelectedSourceDatabases() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetUserTablesSqlSyncTaskInputResponse) []string { return v.SelectedSourceDatabases }).(pulumi.StringArrayOutput)
}

// List of target database names to collect tables for
func (o GetUserTablesSqlSyncTaskInputResponseOutput) SelectedTargetDatabases() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetUserTablesSqlSyncTaskInputResponse) []string { return v.SelectedTargetDatabases }).(pulumi.StringArrayOutput)
}

// Connection information for SQL Server
func (o GetUserTablesSqlSyncTaskInputResponseOutput) SourceConnectionInfo() SqlConnectionInfoResponseOutput {
	return o.ApplyT(func(v GetUserTablesSqlSyncTaskInputResponse) SqlConnectionInfoResponse { return v.SourceConnectionInfo }).(SqlConnectionInfoResponseOutput)
}

// Connection information for SQL DB
func (o GetUserTablesSqlSyncTaskInputResponseOutput) TargetConnectionInfo() SqlConnectionInfoResponseOutput {
	return o.ApplyT(func(v GetUserTablesSqlSyncTaskInputResponse) SqlConnectionInfoResponse { return v.TargetConnectionInfo }).(SqlConnectionInfoResponseOutput)
}

type GetUserTablesSqlSyncTaskInputResponsePtrOutput struct{ *pulumi.OutputState }

func (GetUserTablesSqlSyncTaskInputResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GetUserTablesSqlSyncTaskInputResponse)(nil)).Elem()
}

func (o GetUserTablesSqlSyncTaskInputResponsePtrOutput) ToGetUserTablesSqlSyncTaskInputResponsePtrOutput() GetUserTablesSqlSyncTaskInputResponsePtrOutput {
	return o
}

func (o GetUserTablesSqlSyncTaskInputResponsePtrOutput) ToGetUserTablesSqlSyncTaskInputResponsePtrOutputWithContext(ctx context.Context) GetUserTablesSqlSyncTaskInputResponsePtrOutput {
	return o
}

func (o GetUserTablesSqlSyncTaskInputResponsePtrOutput) Elem() GetUserTablesSqlSyncTaskInputResponseOutput {
	return o.ApplyT(func(v *GetUserTablesSqlSyncTaskInputResponse) GetUserTablesSqlSyncTaskInputResponse { return *v }).(GetUserTablesSqlSyncTaskInputResponseOutput)
}

// List of source database names to collect tables for
func (o GetUserTablesSqlSyncTaskInputResponsePtrOutput) SelectedSourceDatabases() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *GetUserTablesSqlSyncTaskInputResponse) []string {
		if v == nil {
			return nil
		}
		return v.SelectedSourceDatabases
	}).(pulumi.StringArrayOutput)
}

// List of target database names to collect tables for
func (o GetUserTablesSqlSyncTaskInputResponsePtrOutput) SelectedTargetDatabases() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *GetUserTablesSqlSyncTaskInputResponse) []string {
		if v == nil {
			return nil
		}
		return v.SelectedTargetDatabases
	}).(pulumi.StringArrayOutput)
}

// Connection information for SQL Server
func (o GetUserTablesSqlSyncTaskInputResponsePtrOutput) SourceConnectionInfo() SqlConnectionInfoResponsePtrOutput {
	return o.ApplyT(func(v *GetUserTablesSqlSyncTaskInputResponse) *SqlConnectionInfoResponse {
		if v == nil {
			return nil
		}
		return &v.SourceConnectionInfo
	}).(SqlConnectionInfoResponsePtrOutput)
}

// Connection information for SQL DB
func (o GetUserTablesSqlSyncTaskInputResponsePtrOutput) TargetConnectionInfo() SqlConnectionInfoResponsePtrOutput {
	return o.ApplyT(func(v *GetUserTablesSqlSyncTaskInputResponse) *SqlConnectionInfoResponse {
		if v == nil {
			return nil
		}
		return &v.TargetConnectionInfo
	}).(SqlConnectionInfoResponsePtrOutput)
}

// Output of the task that collects user tables for the given list of databases
type GetUserTablesSqlSyncTaskOutputResponse struct {
	// Mapping from database name to list of source tables
	DatabasesToSourceTables string `pulumi:"databasesToSourceTables"`
	// Mapping from database name to list of target tables
	DatabasesToTargetTables string `pulumi:"databasesToTargetTables"`
	// Mapping from database name to list of validation errors
	TableValidationErrors string `pulumi:"tableValidationErrors"`
	// Validation errors
	ValidationErrors []ReportableExceptionResponse `pulumi:"validationErrors"`
}

// Output of the task that collects user tables for the given list of databases
type GetUserTablesSqlSyncTaskOutputResponseOutput struct{ *pulumi.OutputState }

func (GetUserTablesSqlSyncTaskOutputResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetUserTablesSqlSyncTaskOutputResponse)(nil)).Elem()
}

func (o GetUserTablesSqlSyncTaskOutputResponseOutput) ToGetUserTablesSqlSyncTaskOutputResponseOutput() GetUserTablesSqlSyncTaskOutputResponseOutput {
	return o
}

func (o GetUserTablesSqlSyncTaskOutputResponseOutput) ToGetUserTablesSqlSyncTaskOutputResponseOutputWithContext(ctx context.Context) GetUserTablesSqlSyncTaskOutputResponseOutput {
	return o
}

// Mapping from database name to list of source tables
func (o GetUserTablesSqlSyncTaskOutputResponseOutput) DatabasesToSourceTables() pulumi.StringOutput {
	return o.ApplyT(func(v GetUserTablesSqlSyncTaskOutputResponse) string { return v.DatabasesToSourceTables }).(pulumi.StringOutput)
}

// Mapping from database name to list of target tables
func (o GetUserTablesSqlSyncTaskOutputResponseOutput) DatabasesToTargetTables() pulumi.StringOutput {
	return o.ApplyT(func(v GetUserTablesSqlSyncTaskOutputResponse) string { return v.DatabasesToTargetTables }).(pulumi.StringOutput)
}

// Mapping from database name to list of validation errors
func (o GetUserTablesSqlSyncTaskOutputResponseOutput) TableValidationErrors() pulumi.StringOutput {
	return o.ApplyT(func(v GetUserTablesSqlSyncTaskOutputResponse) string { return v.TableValidationErrors }).(pulumi.StringOutput)
}

// Validation errors
func (o GetUserTablesSqlSyncTaskOutputResponseOutput) ValidationErrors() ReportableExceptionResponseArrayOutput {
	return o.ApplyT(func(v GetUserTablesSqlSyncTaskOutputResponse) []ReportableExceptionResponse {
		return v.ValidationErrors
	}).(ReportableExceptionResponseArrayOutput)
}

type GetUserTablesSqlSyncTaskOutputResponseArrayOutput struct{ *pulumi.OutputState }

func (GetUserTablesSqlSyncTaskOutputResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetUserTablesSqlSyncTaskOutputResponse)(nil)).Elem()
}

func (o GetUserTablesSqlSyncTaskOutputResponseArrayOutput) ToGetUserTablesSqlSyncTaskOutputResponseArrayOutput() GetUserTablesSqlSyncTaskOutputResponseArrayOutput {
	return o
}

func (o GetUserTablesSqlSyncTaskOutputResponseArrayOutput) ToGetUserTablesSqlSyncTaskOutputResponseArrayOutputWithContext(ctx context.Context) GetUserTablesSqlSyncTaskOutputResponseArrayOutput {
	return o
}

func (o GetUserTablesSqlSyncTaskOutputResponseArrayOutput) Index(i pulumi.IntInput) GetUserTablesSqlSyncTaskOutputResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetUserTablesSqlSyncTaskOutputResponse {
		return vs[0].([]GetUserTablesSqlSyncTaskOutputResponse)[vs[1].(int)]
	}).(GetUserTablesSqlSyncTaskOutputResponseOutput)
}

// Properties for the task that collects user tables for the given list of databases
type GetUserTablesSqlSyncTaskProperties struct {
	// Key value pairs of client data to attach meta data information to task
	ClientData map[string]string `pulumi:"clientData"`
	// Task input
	Input *GetUserTablesSqlSyncTaskInput `pulumi:"input"`
	// Task type.
	TaskType string `pulumi:"taskType"`
}

// GetUserTablesSqlSyncTaskPropertiesInput is an input type that accepts GetUserTablesSqlSyncTaskPropertiesArgs and GetUserTablesSqlSyncTaskPropertiesOutput values.
// You can construct a concrete instance of `GetUserTablesSqlSyncTaskPropertiesInput` via:
//
//          GetUserTablesSqlSyncTaskPropertiesArgs{...}
type GetUserTablesSqlSyncTaskPropertiesInput interface {
	pulumi.Input

	ToGetUserTablesSqlSyncTaskPropertiesOutput() GetUserTablesSqlSyncTaskPropertiesOutput
	ToGetUserTablesSqlSyncTaskPropertiesOutputWithContext(context.Context) GetUserTablesSqlSyncTaskPropertiesOutput
}

// Properties for the task that collects user tables for the given list of databases
type GetUserTablesSqlSyncTaskPropertiesArgs struct {
	// Key value pairs of client data to attach meta data information to task
	ClientData pulumi.StringMapInput `pulumi:"clientData"`
	// Task input
	Input GetUserTablesSqlSyncTaskInputPtrInput `pulumi:"input"`
	// Task type.
	TaskType pulumi.StringInput `pulumi:"taskType"`
}

func (GetUserTablesSqlSyncTaskPropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetUserTablesSqlSyncTaskProperties)(nil)).Elem()
}

func (i GetUserTablesSqlSyncTaskPropertiesArgs) ToGetUserTablesSqlSyncTaskPropertiesOutput() GetUserTablesSqlSyncTaskPropertiesOutput {
	return i.ToGetUserTablesSqlSyncTaskPropertiesOutputWithContext(context.Background())
}

func (i GetUserTablesSqlSyncTaskPropertiesArgs) ToGetUserTablesSqlSyncTaskPropertiesOutputWithContext(ctx context.Context) GetUserTablesSqlSyncTaskPropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetUserTablesSqlSyncTaskPropertiesOutput)
}

// Properties for the task that collects user tables for the given list of databases
type GetUserTablesSqlSyncTaskPropertiesResponse struct {
	// Key value pairs of client data to attach meta data information to task
	ClientData map[string]string `pulumi:"clientData"`
	// Array of command properties.
	Commands []interface{} `pulumi:"commands"`
	// Array of errors. This is ignored if submitted.
	Errors []ODataErrorResponse `pulumi:"errors"`
	// Task input
	Input *GetUserTablesSqlSyncTaskInputResponse `pulumi:"input"`
	// Task output. This is ignored if submitted.
	Output []GetUserTablesSqlSyncTaskOutputResponse `pulumi:"output"`
	// The state of the task. This is ignored if submitted.
	State string `pulumi:"state"`
	// Task type.
	TaskType string `pulumi:"taskType"`
}

// Properties for the task that collects user tables for the given list of databases
type GetUserTablesSqlSyncTaskPropertiesResponseOutput struct{ *pulumi.OutputState }

func (GetUserTablesSqlSyncTaskPropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetUserTablesSqlSyncTaskPropertiesResponse)(nil)).Elem()
}

func (o GetUserTablesSqlSyncTaskPropertiesResponseOutput) ToGetUserTablesSqlSyncTaskPropertiesResponseOutput() GetUserTablesSqlSyncTaskPropertiesResponseOutput {
	return o
}

func (o GetUserTablesSqlSyncTaskPropertiesResponseOutput) ToGetUserTablesSqlSyncTaskPropertiesResponseOutputWithContext(ctx context.Context) GetUserTablesSqlSyncTaskPropertiesResponseOutput {
	return o
}

// Key value pairs of client data to attach meta data information to task
func (o GetUserTablesSqlSyncTaskPropertiesResponseOutput) ClientData() pulumi.StringMapOutput {
	return o.ApplyT(func(v GetUserTablesSqlSyncTaskPropertiesResponse) map[string]string { return v.ClientData }).(pulumi.StringMapOutput)
}

// Array of command properties.
func (o GetUserTablesSqlSyncTaskPropertiesResponseOutput) Commands() pulumi.ArrayOutput {
	return o.ApplyT(func(v GetUserTablesSqlSyncTaskPropertiesResponse) []interface{} { return v.Commands }).(pulumi.ArrayOutput)
}

// Array of errors. This is ignored if submitted.
func (o GetUserTablesSqlSyncTaskPropertiesResponseOutput) Errors() ODataErrorResponseArrayOutput {
	return o.ApplyT(func(v GetUserTablesSqlSyncTaskPropertiesResponse) []ODataErrorResponse { return v.Errors }).(ODataErrorResponseArrayOutput)
}

// Task input
func (o GetUserTablesSqlSyncTaskPropertiesResponseOutput) Input() GetUserTablesSqlSyncTaskInputResponsePtrOutput {
	return o.ApplyT(func(v GetUserTablesSqlSyncTaskPropertiesResponse) *GetUserTablesSqlSyncTaskInputResponse {
		return v.Input
	}).(GetUserTablesSqlSyncTaskInputResponsePtrOutput)
}

// Task output. This is ignored if submitted.
func (o GetUserTablesSqlSyncTaskPropertiesResponseOutput) Output() GetUserTablesSqlSyncTaskOutputResponseArrayOutput {
	return o.ApplyT(func(v GetUserTablesSqlSyncTaskPropertiesResponse) []GetUserTablesSqlSyncTaskOutputResponse {
		return v.Output
	}).(GetUserTablesSqlSyncTaskOutputResponseArrayOutput)
}

// The state of the task. This is ignored if submitted.
func (o GetUserTablesSqlSyncTaskPropertiesResponseOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v GetUserTablesSqlSyncTaskPropertiesResponse) string { return v.State }).(pulumi.StringOutput)
}

// Task type.
func (o GetUserTablesSqlSyncTaskPropertiesResponseOutput) TaskType() pulumi.StringOutput {
	return o.ApplyT(func(v GetUserTablesSqlSyncTaskPropertiesResponse) string { return v.TaskType }).(pulumi.StringOutput)
}

// Input for the task that collects user tables for the given list of databases
type GetUserTablesSqlTaskInput struct {
	// Connection information for SQL Server
	ConnectionInfo SqlConnectionInfo `pulumi:"connectionInfo"`
	// List of database names to collect tables for
	SelectedDatabases []string `pulumi:"selectedDatabases"`
}

// GetUserTablesSqlTaskInputInput is an input type that accepts GetUserTablesSqlTaskInputArgs and GetUserTablesSqlTaskInputOutput values.
// You can construct a concrete instance of `GetUserTablesSqlTaskInputInput` via:
//
//          GetUserTablesSqlTaskInputArgs{...}
type GetUserTablesSqlTaskInputInput interface {
	pulumi.Input

	ToGetUserTablesSqlTaskInputOutput() GetUserTablesSqlTaskInputOutput
	ToGetUserTablesSqlTaskInputOutputWithContext(context.Context) GetUserTablesSqlTaskInputOutput
}

// Input for the task that collects user tables for the given list of databases
type GetUserTablesSqlTaskInputArgs struct {
	// Connection information for SQL Server
	ConnectionInfo SqlConnectionInfoInput `pulumi:"connectionInfo"`
	// List of database names to collect tables for
	SelectedDatabases pulumi.StringArrayInput `pulumi:"selectedDatabases"`
}

func (GetUserTablesSqlTaskInputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetUserTablesSqlTaskInput)(nil)).Elem()
}

func (i GetUserTablesSqlTaskInputArgs) ToGetUserTablesSqlTaskInputOutput() GetUserTablesSqlTaskInputOutput {
	return i.ToGetUserTablesSqlTaskInputOutputWithContext(context.Background())
}

func (i GetUserTablesSqlTaskInputArgs) ToGetUserTablesSqlTaskInputOutputWithContext(ctx context.Context) GetUserTablesSqlTaskInputOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetUserTablesSqlTaskInputOutput)
}

func (i GetUserTablesSqlTaskInputArgs) ToGetUserTablesSqlTaskInputPtrOutput() GetUserTablesSqlTaskInputPtrOutput {
	return i.ToGetUserTablesSqlTaskInputPtrOutputWithContext(context.Background())
}

func (i GetUserTablesSqlTaskInputArgs) ToGetUserTablesSqlTaskInputPtrOutputWithContext(ctx context.Context) GetUserTablesSqlTaskInputPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetUserTablesSqlTaskInputOutput).ToGetUserTablesSqlTaskInputPtrOutputWithContext(ctx)
}

// GetUserTablesSqlTaskInputPtrInput is an input type that accepts GetUserTablesSqlTaskInputArgs, GetUserTablesSqlTaskInputPtr and GetUserTablesSqlTaskInputPtrOutput values.
// You can construct a concrete instance of `GetUserTablesSqlTaskInputPtrInput` via:
//
//          GetUserTablesSqlTaskInputArgs{...}
//
//  or:
//
//          nil
type GetUserTablesSqlTaskInputPtrInput interface {
	pulumi.Input

	ToGetUserTablesSqlTaskInputPtrOutput() GetUserTablesSqlTaskInputPtrOutput
	ToGetUserTablesSqlTaskInputPtrOutputWithContext(context.Context) GetUserTablesSqlTaskInputPtrOutput
}

type getUserTablesSqlTaskInputPtrType GetUserTablesSqlTaskInputArgs

func GetUserTablesSqlTaskInputPtr(v *GetUserTablesSqlTaskInputArgs) GetUserTablesSqlTaskInputPtrInput {
	return (*getUserTablesSqlTaskInputPtrType)(v)
}

func (*getUserTablesSqlTaskInputPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GetUserTablesSqlTaskInput)(nil)).Elem()
}

func (i *getUserTablesSqlTaskInputPtrType) ToGetUserTablesSqlTaskInputPtrOutput() GetUserTablesSqlTaskInputPtrOutput {
	return i.ToGetUserTablesSqlTaskInputPtrOutputWithContext(context.Background())
}

func (i *getUserTablesSqlTaskInputPtrType) ToGetUserTablesSqlTaskInputPtrOutputWithContext(ctx context.Context) GetUserTablesSqlTaskInputPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetUserTablesSqlTaskInputPtrOutput)
}

// Input for the task that collects user tables for the given list of databases
type GetUserTablesSqlTaskInputResponse struct {
	// Connection information for SQL Server
	ConnectionInfo SqlConnectionInfoResponse `pulumi:"connectionInfo"`
	// List of database names to collect tables for
	SelectedDatabases []string `pulumi:"selectedDatabases"`
}

// Input for the task that collects user tables for the given list of databases
type GetUserTablesSqlTaskInputResponseOutput struct{ *pulumi.OutputState }

func (GetUserTablesSqlTaskInputResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetUserTablesSqlTaskInputResponse)(nil)).Elem()
}

func (o GetUserTablesSqlTaskInputResponseOutput) ToGetUserTablesSqlTaskInputResponseOutput() GetUserTablesSqlTaskInputResponseOutput {
	return o
}

func (o GetUserTablesSqlTaskInputResponseOutput) ToGetUserTablesSqlTaskInputResponseOutputWithContext(ctx context.Context) GetUserTablesSqlTaskInputResponseOutput {
	return o
}

func (o GetUserTablesSqlTaskInputResponseOutput) ToGetUserTablesSqlTaskInputResponsePtrOutput() GetUserTablesSqlTaskInputResponsePtrOutput {
	return o.ToGetUserTablesSqlTaskInputResponsePtrOutputWithContext(context.Background())
}

func (o GetUserTablesSqlTaskInputResponseOutput) ToGetUserTablesSqlTaskInputResponsePtrOutputWithContext(ctx context.Context) GetUserTablesSqlTaskInputResponsePtrOutput {
	return o.ApplyT(func(v GetUserTablesSqlTaskInputResponse) *GetUserTablesSqlTaskInputResponse {
		return &v
	}).(GetUserTablesSqlTaskInputResponsePtrOutput)
}

// Connection information for SQL Server
func (o GetUserTablesSqlTaskInputResponseOutput) ConnectionInfo() SqlConnectionInfoResponseOutput {
	return o.ApplyT(func(v GetUserTablesSqlTaskInputResponse) SqlConnectionInfoResponse { return v.ConnectionInfo }).(SqlConnectionInfoResponseOutput)
}

// List of database names to collect tables for
func (o GetUserTablesSqlTaskInputResponseOutput) SelectedDatabases() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetUserTablesSqlTaskInputResponse) []string { return v.SelectedDatabases }).(pulumi.StringArrayOutput)
}

type GetUserTablesSqlTaskInputResponsePtrOutput struct{ *pulumi.OutputState }

func (GetUserTablesSqlTaskInputResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GetUserTablesSqlTaskInputResponse)(nil)).Elem()
}

func (o GetUserTablesSqlTaskInputResponsePtrOutput) ToGetUserTablesSqlTaskInputResponsePtrOutput() GetUserTablesSqlTaskInputResponsePtrOutput {
	return o
}

func (o GetUserTablesSqlTaskInputResponsePtrOutput) ToGetUserTablesSqlTaskInputResponsePtrOutputWithContext(ctx context.Context) GetUserTablesSqlTaskInputResponsePtrOutput {
	return o
}

func (o GetUserTablesSqlTaskInputResponsePtrOutput) Elem() GetUserTablesSqlTaskInputResponseOutput {
	return o.ApplyT(func(v *GetUserTablesSqlTaskInputResponse) GetUserTablesSqlTaskInputResponse { return *v }).(GetUserTablesSqlTaskInputResponseOutput)
}

// Connection information for SQL Server
func (o GetUserTablesSqlTaskInputResponsePtrOutput) ConnectionInfo() SqlConnectionInfoResponsePtrOutput {
	return o.ApplyT(func(v *GetUserTablesSqlTaskInputResponse) *SqlConnectionInfoResponse {
		if v == nil {
			return nil
		}
		return &v.ConnectionInfo
	}).(SqlConnectionInfoResponsePtrOutput)
}

// List of database names to collect tables for
func (o GetUserTablesSqlTaskInputResponsePtrOutput) SelectedDatabases() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *GetUserTablesSqlTaskInputResponse) []string {
		if v == nil {
			return nil
		}
		return v.SelectedDatabases
	}).(pulumi.StringArrayOutput)
}

// Output of the task that collects user tables for the given list of databases
type GetUserTablesSqlTaskOutputResponse struct {
	// Mapping from database name to list of tables
	DatabasesToTables string `pulumi:"databasesToTables"`
	// Result identifier
	Id string `pulumi:"id"`
	// Validation errors
	ValidationErrors []ReportableExceptionResponse `pulumi:"validationErrors"`
}

// Output of the task that collects user tables for the given list of databases
type GetUserTablesSqlTaskOutputResponseOutput struct{ *pulumi.OutputState }

func (GetUserTablesSqlTaskOutputResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetUserTablesSqlTaskOutputResponse)(nil)).Elem()
}

func (o GetUserTablesSqlTaskOutputResponseOutput) ToGetUserTablesSqlTaskOutputResponseOutput() GetUserTablesSqlTaskOutputResponseOutput {
	return o
}

func (o GetUserTablesSqlTaskOutputResponseOutput) ToGetUserTablesSqlTaskOutputResponseOutputWithContext(ctx context.Context) GetUserTablesSqlTaskOutputResponseOutput {
	return o
}

// Mapping from database name to list of tables
func (o GetUserTablesSqlTaskOutputResponseOutput) DatabasesToTables() pulumi.StringOutput {
	return o.ApplyT(func(v GetUserTablesSqlTaskOutputResponse) string { return v.DatabasesToTables }).(pulumi.StringOutput)
}

// Result identifier
func (o GetUserTablesSqlTaskOutputResponseOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetUserTablesSqlTaskOutputResponse) string { return v.Id }).(pulumi.StringOutput)
}

// Validation errors
func (o GetUserTablesSqlTaskOutputResponseOutput) ValidationErrors() ReportableExceptionResponseArrayOutput {
	return o.ApplyT(func(v GetUserTablesSqlTaskOutputResponse) []ReportableExceptionResponse { return v.ValidationErrors }).(ReportableExceptionResponseArrayOutput)
}

type GetUserTablesSqlTaskOutputResponseArrayOutput struct{ *pulumi.OutputState }

func (GetUserTablesSqlTaskOutputResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetUserTablesSqlTaskOutputResponse)(nil)).Elem()
}

func (o GetUserTablesSqlTaskOutputResponseArrayOutput) ToGetUserTablesSqlTaskOutputResponseArrayOutput() GetUserTablesSqlTaskOutputResponseArrayOutput {
	return o
}

func (o GetUserTablesSqlTaskOutputResponseArrayOutput) ToGetUserTablesSqlTaskOutputResponseArrayOutputWithContext(ctx context.Context) GetUserTablesSqlTaskOutputResponseArrayOutput {
	return o
}

func (o GetUserTablesSqlTaskOutputResponseArrayOutput) Index(i pulumi.IntInput) GetUserTablesSqlTaskOutputResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetUserTablesSqlTaskOutputResponse {
		return vs[0].([]GetUserTablesSqlTaskOutputResponse)[vs[1].(int)]
	}).(GetUserTablesSqlTaskOutputResponseOutput)
}

// Properties for the task that collects user tables for the given list of databases
type GetUserTablesSqlTaskProperties struct {
	// Key value pairs of client data to attach meta data information to task
	ClientData map[string]string `pulumi:"clientData"`
	// Task input
	Input *GetUserTablesSqlTaskInput `pulumi:"input"`
	// Task type.
	TaskType string `pulumi:"taskType"`
}

// GetUserTablesSqlTaskPropertiesInput is an input type that accepts GetUserTablesSqlTaskPropertiesArgs and GetUserTablesSqlTaskPropertiesOutput values.
// You can construct a concrete instance of `GetUserTablesSqlTaskPropertiesInput` via:
//
//          GetUserTablesSqlTaskPropertiesArgs{...}
type GetUserTablesSqlTaskPropertiesInput interface {
	pulumi.Input

	ToGetUserTablesSqlTaskPropertiesOutput() GetUserTablesSqlTaskPropertiesOutput
	ToGetUserTablesSqlTaskPropertiesOutputWithContext(context.Context) GetUserTablesSqlTaskPropertiesOutput
}

// Properties for the task that collects user tables for the given list of databases
type GetUserTablesSqlTaskPropertiesArgs struct {
	// Key value pairs of client data to attach meta data information to task
	ClientData pulumi.StringMapInput `pulumi:"clientData"`
	// Task input
	Input GetUserTablesSqlTaskInputPtrInput `pulumi:"input"`
	// Task type.
	TaskType pulumi.StringInput `pulumi:"taskType"`
}

func (GetUserTablesSqlTaskPropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetUserTablesSqlTaskProperties)(nil)).Elem()
}

func (i GetUserTablesSqlTaskPropertiesArgs) ToGetUserTablesSqlTaskPropertiesOutput() GetUserTablesSqlTaskPropertiesOutput {
	return i.ToGetUserTablesSqlTaskPropertiesOutputWithContext(context.Background())
}

func (i GetUserTablesSqlTaskPropertiesArgs) ToGetUserTablesSqlTaskPropertiesOutputWithContext(ctx context.Context) GetUserTablesSqlTaskPropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetUserTablesSqlTaskPropertiesOutput)
}

// Properties for the task that collects user tables for the given list of databases
type GetUserTablesSqlTaskPropertiesResponse struct {
	// Key value pairs of client data to attach meta data information to task
	ClientData map[string]string `pulumi:"clientData"`
	// Array of command properties.
	Commands []interface{} `pulumi:"commands"`
	// Array of errors. This is ignored if submitted.
	Errors []ODataErrorResponse `pulumi:"errors"`
	// Task input
	Input *GetUserTablesSqlTaskInputResponse `pulumi:"input"`
	// Task output. This is ignored if submitted.
	Output []GetUserTablesSqlTaskOutputResponse `pulumi:"output"`
	// The state of the task. This is ignored if submitted.
	State string `pulumi:"state"`
	// Task type.
	TaskType string `pulumi:"taskType"`
}

// Properties for the task that collects user tables for the given list of databases
type GetUserTablesSqlTaskPropertiesResponseOutput struct{ *pulumi.OutputState }

func (GetUserTablesSqlTaskPropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetUserTablesSqlTaskPropertiesResponse)(nil)).Elem()
}

func (o GetUserTablesSqlTaskPropertiesResponseOutput) ToGetUserTablesSqlTaskPropertiesResponseOutput() GetUserTablesSqlTaskPropertiesResponseOutput {
	return o
}

func (o GetUserTablesSqlTaskPropertiesResponseOutput) ToGetUserTablesSqlTaskPropertiesResponseOutputWithContext(ctx context.Context) GetUserTablesSqlTaskPropertiesResponseOutput {
	return o
}

// Key value pairs of client data to attach meta data information to task
func (o GetUserTablesSqlTaskPropertiesResponseOutput) ClientData() pulumi.StringMapOutput {
	return o.ApplyT(func(v GetUserTablesSqlTaskPropertiesResponse) map[string]string { return v.ClientData }).(pulumi.StringMapOutput)
}

// Array of command properties.
func (o GetUserTablesSqlTaskPropertiesResponseOutput) Commands() pulumi.ArrayOutput {
	return o.ApplyT(func(v GetUserTablesSqlTaskPropertiesResponse) []interface{} { return v.Commands }).(pulumi.ArrayOutput)
}

// Array of errors. This is ignored if submitted.
func (o GetUserTablesSqlTaskPropertiesResponseOutput) Errors() ODataErrorResponseArrayOutput {
	return o.ApplyT(func(v GetUserTablesSqlTaskPropertiesResponse) []ODataErrorResponse { return v.Errors }).(ODataErrorResponseArrayOutput)
}

// Task input
func (o GetUserTablesSqlTaskPropertiesResponseOutput) Input() GetUserTablesSqlTaskInputResponsePtrOutput {
	return o.ApplyT(func(v GetUserTablesSqlTaskPropertiesResponse) *GetUserTablesSqlTaskInputResponse { return v.Input }).(GetUserTablesSqlTaskInputResponsePtrOutput)
}

// Task output. This is ignored if submitted.
func (o GetUserTablesSqlTaskPropertiesResponseOutput) Output() GetUserTablesSqlTaskOutputResponseArrayOutput {
	return o.ApplyT(func(v GetUserTablesSqlTaskPropertiesResponse) []GetUserTablesSqlTaskOutputResponse { return v.Output }).(GetUserTablesSqlTaskOutputResponseArrayOutput)
}

// The state of the task. This is ignored if submitted.
func (o GetUserTablesSqlTaskPropertiesResponseOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v GetUserTablesSqlTaskPropertiesResponse) string { return v.State }).(pulumi.StringOutput)
}

// Task type.
func (o GetUserTablesSqlTaskPropertiesResponseOutput) TaskType() pulumi.StringOutput {
	return o.ApplyT(func(v GetUserTablesSqlTaskPropertiesResponse) string { return v.TaskType }).(pulumi.StringOutput)
}

// Properties required to create a connection to Azure SQL database Managed instance
type MiSqlConnectionInfo struct {
	// Resource id for Azure SQL database Managed instance
	ManagedInstanceResourceId string `pulumi:"managedInstanceResourceId"`
	// Password credential.
	Password *string `pulumi:"password"`
	// Type of connection info
	Type string `pulumi:"type"`
	// User name
	UserName *string `pulumi:"userName"`
}

// MiSqlConnectionInfoInput is an input type that accepts MiSqlConnectionInfoArgs and MiSqlConnectionInfoOutput values.
// You can construct a concrete instance of `MiSqlConnectionInfoInput` via:
//
//          MiSqlConnectionInfoArgs{...}
type MiSqlConnectionInfoInput interface {
	pulumi.Input

	ToMiSqlConnectionInfoOutput() MiSqlConnectionInfoOutput
	ToMiSqlConnectionInfoOutputWithContext(context.Context) MiSqlConnectionInfoOutput
}

// Properties required to create a connection to Azure SQL database Managed instance
type MiSqlConnectionInfoArgs struct {
	// Resource id for Azure SQL database Managed instance
	ManagedInstanceResourceId pulumi.StringInput `pulumi:"managedInstanceResourceId"`
	// Password credential.
	Password pulumi.StringPtrInput `pulumi:"password"`
	// Type of connection info
	Type pulumi.StringInput `pulumi:"type"`
	// User name
	UserName pulumi.StringPtrInput `pulumi:"userName"`
}

func (MiSqlConnectionInfoArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MiSqlConnectionInfo)(nil)).Elem()
}

func (i MiSqlConnectionInfoArgs) ToMiSqlConnectionInfoOutput() MiSqlConnectionInfoOutput {
	return i.ToMiSqlConnectionInfoOutputWithContext(context.Background())
}

func (i MiSqlConnectionInfoArgs) ToMiSqlConnectionInfoOutputWithContext(ctx context.Context) MiSqlConnectionInfoOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MiSqlConnectionInfoOutput)
}

func (i MiSqlConnectionInfoArgs) ToMiSqlConnectionInfoPtrOutput() MiSqlConnectionInfoPtrOutput {
	return i.ToMiSqlConnectionInfoPtrOutputWithContext(context.Background())
}

func (i MiSqlConnectionInfoArgs) ToMiSqlConnectionInfoPtrOutputWithContext(ctx context.Context) MiSqlConnectionInfoPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MiSqlConnectionInfoOutput).ToMiSqlConnectionInfoPtrOutputWithContext(ctx)
}

// MiSqlConnectionInfoPtrInput is an input type that accepts MiSqlConnectionInfoArgs, MiSqlConnectionInfoPtr and MiSqlConnectionInfoPtrOutput values.
// You can construct a concrete instance of `MiSqlConnectionInfoPtrInput` via:
//
//          MiSqlConnectionInfoArgs{...}
//
//  or:
//
//          nil
type MiSqlConnectionInfoPtrInput interface {
	pulumi.Input

	ToMiSqlConnectionInfoPtrOutput() MiSqlConnectionInfoPtrOutput
	ToMiSqlConnectionInfoPtrOutputWithContext(context.Context) MiSqlConnectionInfoPtrOutput
}

type miSqlConnectionInfoPtrType MiSqlConnectionInfoArgs

func MiSqlConnectionInfoPtr(v *MiSqlConnectionInfoArgs) MiSqlConnectionInfoPtrInput {
	return (*miSqlConnectionInfoPtrType)(v)
}

func (*miSqlConnectionInfoPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**MiSqlConnectionInfo)(nil)).Elem()
}

func (i *miSqlConnectionInfoPtrType) ToMiSqlConnectionInfoPtrOutput() MiSqlConnectionInfoPtrOutput {
	return i.ToMiSqlConnectionInfoPtrOutputWithContext(context.Background())
}

func (i *miSqlConnectionInfoPtrType) ToMiSqlConnectionInfoPtrOutputWithContext(ctx context.Context) MiSqlConnectionInfoPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MiSqlConnectionInfoPtrOutput)
}

// Properties required to create a connection to Azure SQL database Managed instance
type MiSqlConnectionInfoResponse struct {
	// Resource id for Azure SQL database Managed instance
	ManagedInstanceResourceId string `pulumi:"managedInstanceResourceId"`
	// Password credential.
	Password *string `pulumi:"password"`
	// Type of connection info
	Type string `pulumi:"type"`
	// User name
	UserName *string `pulumi:"userName"`
}

// Properties required to create a connection to Azure SQL database Managed instance
type MiSqlConnectionInfoResponseOutput struct{ *pulumi.OutputState }

func (MiSqlConnectionInfoResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MiSqlConnectionInfoResponse)(nil)).Elem()
}

func (o MiSqlConnectionInfoResponseOutput) ToMiSqlConnectionInfoResponseOutput() MiSqlConnectionInfoResponseOutput {
	return o
}

func (o MiSqlConnectionInfoResponseOutput) ToMiSqlConnectionInfoResponseOutputWithContext(ctx context.Context) MiSqlConnectionInfoResponseOutput {
	return o
}

func (o MiSqlConnectionInfoResponseOutput) ToMiSqlConnectionInfoResponsePtrOutput() MiSqlConnectionInfoResponsePtrOutput {
	return o.ToMiSqlConnectionInfoResponsePtrOutputWithContext(context.Background())
}

func (o MiSqlConnectionInfoResponseOutput) ToMiSqlConnectionInfoResponsePtrOutputWithContext(ctx context.Context) MiSqlConnectionInfoResponsePtrOutput {
	return o.ApplyT(func(v MiSqlConnectionInfoResponse) *MiSqlConnectionInfoResponse {
		return &v
	}).(MiSqlConnectionInfoResponsePtrOutput)
}

// Resource id for Azure SQL database Managed instance
func (o MiSqlConnectionInfoResponseOutput) ManagedInstanceResourceId() pulumi.StringOutput {
	return o.ApplyT(func(v MiSqlConnectionInfoResponse) string { return v.ManagedInstanceResourceId }).(pulumi.StringOutput)
}

// Password credential.
func (o MiSqlConnectionInfoResponseOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MiSqlConnectionInfoResponse) *string { return v.Password }).(pulumi.StringPtrOutput)
}

// Type of connection info
func (o MiSqlConnectionInfoResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v MiSqlConnectionInfoResponse) string { return v.Type }).(pulumi.StringOutput)
}

// User name
func (o MiSqlConnectionInfoResponseOutput) UserName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MiSqlConnectionInfoResponse) *string { return v.UserName }).(pulumi.StringPtrOutput)
}

type MiSqlConnectionInfoResponsePtrOutput struct{ *pulumi.OutputState }

func (MiSqlConnectionInfoResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MiSqlConnectionInfoResponse)(nil)).Elem()
}

func (o MiSqlConnectionInfoResponsePtrOutput) ToMiSqlConnectionInfoResponsePtrOutput() MiSqlConnectionInfoResponsePtrOutput {
	return o
}

func (o MiSqlConnectionInfoResponsePtrOutput) ToMiSqlConnectionInfoResponsePtrOutputWithContext(ctx context.Context) MiSqlConnectionInfoResponsePtrOutput {
	return o
}

func (o MiSqlConnectionInfoResponsePtrOutput) Elem() MiSqlConnectionInfoResponseOutput {
	return o.ApplyT(func(v *MiSqlConnectionInfoResponse) MiSqlConnectionInfoResponse { return *v }).(MiSqlConnectionInfoResponseOutput)
}

// Resource id for Azure SQL database Managed instance
func (o MiSqlConnectionInfoResponsePtrOutput) ManagedInstanceResourceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MiSqlConnectionInfoResponse) *string {
		if v == nil {
			return nil
		}
		return &v.ManagedInstanceResourceId
	}).(pulumi.StringPtrOutput)
}

// Password credential.
func (o MiSqlConnectionInfoResponsePtrOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MiSqlConnectionInfoResponse) *string {
		if v == nil {
			return nil
		}
		return v.Password
	}).(pulumi.StringPtrOutput)
}

// Type of connection info
func (o MiSqlConnectionInfoResponsePtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MiSqlConnectionInfoResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

// User name
func (o MiSqlConnectionInfoResponsePtrOutput) UserName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MiSqlConnectionInfoResponse) *string {
		if v == nil {
			return nil
		}
		return v.UserName
	}).(pulumi.StringPtrOutput)
}

// Input for command that completes online migration for an Azure SQL Database Managed Instance.
type MigrateMISyncCompleteCommandInputResponse struct {
	// Name of managed instance database
	SourceDatabaseName string `pulumi:"sourceDatabaseName"`
}

// Input for command that completes online migration for an Azure SQL Database Managed Instance.
type MigrateMISyncCompleteCommandInputResponseOutput struct{ *pulumi.OutputState }

func (MigrateMISyncCompleteCommandInputResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MigrateMISyncCompleteCommandInputResponse)(nil)).Elem()
}

func (o MigrateMISyncCompleteCommandInputResponseOutput) ToMigrateMISyncCompleteCommandInputResponseOutput() MigrateMISyncCompleteCommandInputResponseOutput {
	return o
}

func (o MigrateMISyncCompleteCommandInputResponseOutput) ToMigrateMISyncCompleteCommandInputResponseOutputWithContext(ctx context.Context) MigrateMISyncCompleteCommandInputResponseOutput {
	return o
}

func (o MigrateMISyncCompleteCommandInputResponseOutput) ToMigrateMISyncCompleteCommandInputResponsePtrOutput() MigrateMISyncCompleteCommandInputResponsePtrOutput {
	return o.ToMigrateMISyncCompleteCommandInputResponsePtrOutputWithContext(context.Background())
}

func (o MigrateMISyncCompleteCommandInputResponseOutput) ToMigrateMISyncCompleteCommandInputResponsePtrOutputWithContext(ctx context.Context) MigrateMISyncCompleteCommandInputResponsePtrOutput {
	return o.ApplyT(func(v MigrateMISyncCompleteCommandInputResponse) *MigrateMISyncCompleteCommandInputResponse {
		return &v
	}).(MigrateMISyncCompleteCommandInputResponsePtrOutput)
}

// Name of managed instance database
func (o MigrateMISyncCompleteCommandInputResponseOutput) SourceDatabaseName() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateMISyncCompleteCommandInputResponse) string { return v.SourceDatabaseName }).(pulumi.StringOutput)
}

type MigrateMISyncCompleteCommandInputResponsePtrOutput struct{ *pulumi.OutputState }

func (MigrateMISyncCompleteCommandInputResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MigrateMISyncCompleteCommandInputResponse)(nil)).Elem()
}

func (o MigrateMISyncCompleteCommandInputResponsePtrOutput) ToMigrateMISyncCompleteCommandInputResponsePtrOutput() MigrateMISyncCompleteCommandInputResponsePtrOutput {
	return o
}

func (o MigrateMISyncCompleteCommandInputResponsePtrOutput) ToMigrateMISyncCompleteCommandInputResponsePtrOutputWithContext(ctx context.Context) MigrateMISyncCompleteCommandInputResponsePtrOutput {
	return o
}

func (o MigrateMISyncCompleteCommandInputResponsePtrOutput) Elem() MigrateMISyncCompleteCommandInputResponseOutput {
	return o.ApplyT(func(v *MigrateMISyncCompleteCommandInputResponse) MigrateMISyncCompleteCommandInputResponse {
		return *v
	}).(MigrateMISyncCompleteCommandInputResponseOutput)
}

// Name of managed instance database
func (o MigrateMISyncCompleteCommandInputResponsePtrOutput) SourceDatabaseName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MigrateMISyncCompleteCommandInputResponse) *string {
		if v == nil {
			return nil
		}
		return &v.SourceDatabaseName
	}).(pulumi.StringPtrOutput)
}

// Output for command that completes online migration for an Azure SQL Database Managed Instance.
type MigrateMISyncCompleteCommandOutputResponse struct {
	// List of errors that happened during the command execution
	Errors []ReportableExceptionResponse `pulumi:"errors"`
}

// Output for command that completes online migration for an Azure SQL Database Managed Instance.
type MigrateMISyncCompleteCommandOutputResponseOutput struct{ *pulumi.OutputState }

func (MigrateMISyncCompleteCommandOutputResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MigrateMISyncCompleteCommandOutputResponse)(nil)).Elem()
}

func (o MigrateMISyncCompleteCommandOutputResponseOutput) ToMigrateMISyncCompleteCommandOutputResponseOutput() MigrateMISyncCompleteCommandOutputResponseOutput {
	return o
}

func (o MigrateMISyncCompleteCommandOutputResponseOutput) ToMigrateMISyncCompleteCommandOutputResponseOutputWithContext(ctx context.Context) MigrateMISyncCompleteCommandOutputResponseOutput {
	return o
}

// List of errors that happened during the command execution
func (o MigrateMISyncCompleteCommandOutputResponseOutput) Errors() ReportableExceptionResponseArrayOutput {
	return o.ApplyT(func(v MigrateMISyncCompleteCommandOutputResponse) []ReportableExceptionResponse { return v.Errors }).(ReportableExceptionResponseArrayOutput)
}

// Properties for the command that completes online migration for an Azure SQL Database Managed Instance.
type MigrateMISyncCompleteCommandPropertiesResponse struct {
	// Command type.
	CommandType string `pulumi:"commandType"`
	// Array of errors. This is ignored if submitted.
	Errors []ODataErrorResponse `pulumi:"errors"`
	// Command input
	Input *MigrateMISyncCompleteCommandInputResponse `pulumi:"input"`
	// Command output. This is ignored if submitted.
	Output MigrateMISyncCompleteCommandOutputResponse `pulumi:"output"`
	// The state of the command. This is ignored if submitted.
	State string `pulumi:"state"`
}

// Properties for the command that completes online migration for an Azure SQL Database Managed Instance.
type MigrateMISyncCompleteCommandPropertiesResponseOutput struct{ *pulumi.OutputState }

func (MigrateMISyncCompleteCommandPropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MigrateMISyncCompleteCommandPropertiesResponse)(nil)).Elem()
}

func (o MigrateMISyncCompleteCommandPropertiesResponseOutput) ToMigrateMISyncCompleteCommandPropertiesResponseOutput() MigrateMISyncCompleteCommandPropertiesResponseOutput {
	return o
}

func (o MigrateMISyncCompleteCommandPropertiesResponseOutput) ToMigrateMISyncCompleteCommandPropertiesResponseOutputWithContext(ctx context.Context) MigrateMISyncCompleteCommandPropertiesResponseOutput {
	return o
}

// Command type.
func (o MigrateMISyncCompleteCommandPropertiesResponseOutput) CommandType() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateMISyncCompleteCommandPropertiesResponse) string { return v.CommandType }).(pulumi.StringOutput)
}

// Array of errors. This is ignored if submitted.
func (o MigrateMISyncCompleteCommandPropertiesResponseOutput) Errors() ODataErrorResponseArrayOutput {
	return o.ApplyT(func(v MigrateMISyncCompleteCommandPropertiesResponse) []ODataErrorResponse { return v.Errors }).(ODataErrorResponseArrayOutput)
}

// Command input
func (o MigrateMISyncCompleteCommandPropertiesResponseOutput) Input() MigrateMISyncCompleteCommandInputResponsePtrOutput {
	return o.ApplyT(func(v MigrateMISyncCompleteCommandPropertiesResponse) *MigrateMISyncCompleteCommandInputResponse {
		return v.Input
	}).(MigrateMISyncCompleteCommandInputResponsePtrOutput)
}

// Command output. This is ignored if submitted.
func (o MigrateMISyncCompleteCommandPropertiesResponseOutput) Output() MigrateMISyncCompleteCommandOutputResponseOutput {
	return o.ApplyT(func(v MigrateMISyncCompleteCommandPropertiesResponse) MigrateMISyncCompleteCommandOutputResponse {
		return v.Output
	}).(MigrateMISyncCompleteCommandOutputResponseOutput)
}

// The state of the command. This is ignored if submitted.
func (o MigrateMISyncCompleteCommandPropertiesResponseOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateMISyncCompleteCommandPropertiesResponse) string { return v.State }).(pulumi.StringOutput)
}

// Properties for the task that migrates data between MongoDB data sources
type MigrateMongoDbTaskProperties struct {
	// Key value pairs of client data to attach meta data information to task
	ClientData map[string]string `pulumi:"clientData"`
	// Describes how a MongoDB data migration should be performed
	Input *MongoDbMigrationSettings `pulumi:"input"`
	// Task type.
	TaskType string `pulumi:"taskType"`
}

// MigrateMongoDbTaskPropertiesInput is an input type that accepts MigrateMongoDbTaskPropertiesArgs and MigrateMongoDbTaskPropertiesOutput values.
// You can construct a concrete instance of `MigrateMongoDbTaskPropertiesInput` via:
//
//          MigrateMongoDbTaskPropertiesArgs{...}
type MigrateMongoDbTaskPropertiesInput interface {
	pulumi.Input

	ToMigrateMongoDbTaskPropertiesOutput() MigrateMongoDbTaskPropertiesOutput
	ToMigrateMongoDbTaskPropertiesOutputWithContext(context.Context) MigrateMongoDbTaskPropertiesOutput
}

// Properties for the task that migrates data between MongoDB data sources
type MigrateMongoDbTaskPropertiesArgs struct {
	// Key value pairs of client data to attach meta data information to task
	ClientData pulumi.StringMapInput `pulumi:"clientData"`
	// Describes how a MongoDB data migration should be performed
	Input MongoDbMigrationSettingsPtrInput `pulumi:"input"`
	// Task type.
	TaskType pulumi.StringInput `pulumi:"taskType"`
}

func (MigrateMongoDbTaskPropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MigrateMongoDbTaskProperties)(nil)).Elem()
}

func (i MigrateMongoDbTaskPropertiesArgs) ToMigrateMongoDbTaskPropertiesOutput() MigrateMongoDbTaskPropertiesOutput {
	return i.ToMigrateMongoDbTaskPropertiesOutputWithContext(context.Background())
}

func (i MigrateMongoDbTaskPropertiesArgs) ToMigrateMongoDbTaskPropertiesOutputWithContext(ctx context.Context) MigrateMongoDbTaskPropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MigrateMongoDbTaskPropertiesOutput)
}

// Properties for the task that migrates data between MongoDB data sources
type MigrateMongoDbTaskPropertiesResponse struct {
	// Key value pairs of client data to attach meta data information to task
	ClientData map[string]string `pulumi:"clientData"`
	// Array of command properties.
	Commands []interface{} `pulumi:"commands"`
	// Array of errors. This is ignored if submitted.
	Errors []ODataErrorResponse `pulumi:"errors"`
	// Describes how a MongoDB data migration should be performed
	Input  *MongoDbMigrationSettingsResponse `pulumi:"input"`
	Output []interface{}                     `pulumi:"output"`
	// The state of the task. This is ignored if submitted.
	State string `pulumi:"state"`
	// Task type.
	TaskType string `pulumi:"taskType"`
}

// Properties for the task that migrates data between MongoDB data sources
type MigrateMongoDbTaskPropertiesResponseOutput struct{ *pulumi.OutputState }

func (MigrateMongoDbTaskPropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MigrateMongoDbTaskPropertiesResponse)(nil)).Elem()
}

func (o MigrateMongoDbTaskPropertiesResponseOutput) ToMigrateMongoDbTaskPropertiesResponseOutput() MigrateMongoDbTaskPropertiesResponseOutput {
	return o
}

func (o MigrateMongoDbTaskPropertiesResponseOutput) ToMigrateMongoDbTaskPropertiesResponseOutputWithContext(ctx context.Context) MigrateMongoDbTaskPropertiesResponseOutput {
	return o
}

// Key value pairs of client data to attach meta data information to task
func (o MigrateMongoDbTaskPropertiesResponseOutput) ClientData() pulumi.StringMapOutput {
	return o.ApplyT(func(v MigrateMongoDbTaskPropertiesResponse) map[string]string { return v.ClientData }).(pulumi.StringMapOutput)
}

// Array of command properties.
func (o MigrateMongoDbTaskPropertiesResponseOutput) Commands() pulumi.ArrayOutput {
	return o.ApplyT(func(v MigrateMongoDbTaskPropertiesResponse) []interface{} { return v.Commands }).(pulumi.ArrayOutput)
}

// Array of errors. This is ignored if submitted.
func (o MigrateMongoDbTaskPropertiesResponseOutput) Errors() ODataErrorResponseArrayOutput {
	return o.ApplyT(func(v MigrateMongoDbTaskPropertiesResponse) []ODataErrorResponse { return v.Errors }).(ODataErrorResponseArrayOutput)
}

// Describes how a MongoDB data migration should be performed
func (o MigrateMongoDbTaskPropertiesResponseOutput) Input() MongoDbMigrationSettingsResponsePtrOutput {
	return o.ApplyT(func(v MigrateMongoDbTaskPropertiesResponse) *MongoDbMigrationSettingsResponse { return v.Input }).(MongoDbMigrationSettingsResponsePtrOutput)
}

func (o MigrateMongoDbTaskPropertiesResponseOutput) Output() pulumi.ArrayOutput {
	return o.ApplyT(func(v MigrateMongoDbTaskPropertiesResponse) []interface{} { return v.Output }).(pulumi.ArrayOutput)
}

// The state of the task. This is ignored if submitted.
func (o MigrateMongoDbTaskPropertiesResponseOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateMongoDbTaskPropertiesResponse) string { return v.State }).(pulumi.StringOutput)
}

// Task type.
func (o MigrateMongoDbTaskPropertiesResponseOutput) TaskType() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateMongoDbTaskPropertiesResponse) string { return v.TaskType }).(pulumi.StringOutput)
}

// Database specific information for MySQL to Azure Database for MySQL migration task inputs
type MigrateMySqlAzureDbForMySqlSyncDatabaseInput struct {
	// Migration settings which tune the migration behavior
	MigrationSetting map[string]string `pulumi:"migrationSetting"`
	// Name of the database
	Name *string `pulumi:"name"`
	// Source settings to tune source endpoint migration behavior
	SourceSetting map[string]string `pulumi:"sourceSetting"`
	// Name of target database. Note: Target database will be truncated before starting migration.
	TargetDatabaseName *string `pulumi:"targetDatabaseName"`
	// Target settings to tune target endpoint migration behavior
	TargetSetting map[string]string `pulumi:"targetSetting"`
}

// MigrateMySqlAzureDbForMySqlSyncDatabaseInputInput is an input type that accepts MigrateMySqlAzureDbForMySqlSyncDatabaseInputArgs and MigrateMySqlAzureDbForMySqlSyncDatabaseInputOutput values.
// You can construct a concrete instance of `MigrateMySqlAzureDbForMySqlSyncDatabaseInputInput` via:
//
//          MigrateMySqlAzureDbForMySqlSyncDatabaseInputArgs{...}
type MigrateMySqlAzureDbForMySqlSyncDatabaseInputInput interface {
	pulumi.Input

	ToMigrateMySqlAzureDbForMySqlSyncDatabaseInputOutput() MigrateMySqlAzureDbForMySqlSyncDatabaseInputOutput
	ToMigrateMySqlAzureDbForMySqlSyncDatabaseInputOutputWithContext(context.Context) MigrateMySqlAzureDbForMySqlSyncDatabaseInputOutput
}

// Database specific information for MySQL to Azure Database for MySQL migration task inputs
type MigrateMySqlAzureDbForMySqlSyncDatabaseInputArgs struct {
	// Migration settings which tune the migration behavior
	MigrationSetting pulumi.StringMapInput `pulumi:"migrationSetting"`
	// Name of the database
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Source settings to tune source endpoint migration behavior
	SourceSetting pulumi.StringMapInput `pulumi:"sourceSetting"`
	// Name of target database. Note: Target database will be truncated before starting migration.
	TargetDatabaseName pulumi.StringPtrInput `pulumi:"targetDatabaseName"`
	// Target settings to tune target endpoint migration behavior
	TargetSetting pulumi.StringMapInput `pulumi:"targetSetting"`
}

func (MigrateMySqlAzureDbForMySqlSyncDatabaseInputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MigrateMySqlAzureDbForMySqlSyncDatabaseInput)(nil)).Elem()
}

func (i MigrateMySqlAzureDbForMySqlSyncDatabaseInputArgs) ToMigrateMySqlAzureDbForMySqlSyncDatabaseInputOutput() MigrateMySqlAzureDbForMySqlSyncDatabaseInputOutput {
	return i.ToMigrateMySqlAzureDbForMySqlSyncDatabaseInputOutputWithContext(context.Background())
}

func (i MigrateMySqlAzureDbForMySqlSyncDatabaseInputArgs) ToMigrateMySqlAzureDbForMySqlSyncDatabaseInputOutputWithContext(ctx context.Context) MigrateMySqlAzureDbForMySqlSyncDatabaseInputOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MigrateMySqlAzureDbForMySqlSyncDatabaseInputOutput)
}

// MigrateMySqlAzureDbForMySqlSyncDatabaseInputArrayInput is an input type that accepts MigrateMySqlAzureDbForMySqlSyncDatabaseInputArray and MigrateMySqlAzureDbForMySqlSyncDatabaseInputArrayOutput values.
// You can construct a concrete instance of `MigrateMySqlAzureDbForMySqlSyncDatabaseInputArrayInput` via:
//
//          MigrateMySqlAzureDbForMySqlSyncDatabaseInputArray{ MigrateMySqlAzureDbForMySqlSyncDatabaseInputArgs{...} }
type MigrateMySqlAzureDbForMySqlSyncDatabaseInputArrayInput interface {
	pulumi.Input

	ToMigrateMySqlAzureDbForMySqlSyncDatabaseInputArrayOutput() MigrateMySqlAzureDbForMySqlSyncDatabaseInputArrayOutput
	ToMigrateMySqlAzureDbForMySqlSyncDatabaseInputArrayOutputWithContext(context.Context) MigrateMySqlAzureDbForMySqlSyncDatabaseInputArrayOutput
}

type MigrateMySqlAzureDbForMySqlSyncDatabaseInputArray []MigrateMySqlAzureDbForMySqlSyncDatabaseInputInput

func (MigrateMySqlAzureDbForMySqlSyncDatabaseInputArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MigrateMySqlAzureDbForMySqlSyncDatabaseInput)(nil)).Elem()
}

func (i MigrateMySqlAzureDbForMySqlSyncDatabaseInputArray) ToMigrateMySqlAzureDbForMySqlSyncDatabaseInputArrayOutput() MigrateMySqlAzureDbForMySqlSyncDatabaseInputArrayOutput {
	return i.ToMigrateMySqlAzureDbForMySqlSyncDatabaseInputArrayOutputWithContext(context.Background())
}

func (i MigrateMySqlAzureDbForMySqlSyncDatabaseInputArray) ToMigrateMySqlAzureDbForMySqlSyncDatabaseInputArrayOutputWithContext(ctx context.Context) MigrateMySqlAzureDbForMySqlSyncDatabaseInputArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MigrateMySqlAzureDbForMySqlSyncDatabaseInputArrayOutput)
}

// Database specific information for MySQL to Azure Database for MySQL migration task inputs
type MigrateMySqlAzureDbForMySqlSyncDatabaseInputResponse struct {
	// Migration settings which tune the migration behavior
	MigrationSetting map[string]string `pulumi:"migrationSetting"`
	// Name of the database
	Name *string `pulumi:"name"`
	// Source settings to tune source endpoint migration behavior
	SourceSetting map[string]string `pulumi:"sourceSetting"`
	// Name of target database. Note: Target database will be truncated before starting migration.
	TargetDatabaseName *string `pulumi:"targetDatabaseName"`
	// Target settings to tune target endpoint migration behavior
	TargetSetting map[string]string `pulumi:"targetSetting"`
}

// Database specific information for MySQL to Azure Database for MySQL migration task inputs
type MigrateMySqlAzureDbForMySqlSyncDatabaseInputResponseOutput struct{ *pulumi.OutputState }

func (MigrateMySqlAzureDbForMySqlSyncDatabaseInputResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MigrateMySqlAzureDbForMySqlSyncDatabaseInputResponse)(nil)).Elem()
}

func (o MigrateMySqlAzureDbForMySqlSyncDatabaseInputResponseOutput) ToMigrateMySqlAzureDbForMySqlSyncDatabaseInputResponseOutput() MigrateMySqlAzureDbForMySqlSyncDatabaseInputResponseOutput {
	return o
}

func (o MigrateMySqlAzureDbForMySqlSyncDatabaseInputResponseOutput) ToMigrateMySqlAzureDbForMySqlSyncDatabaseInputResponseOutputWithContext(ctx context.Context) MigrateMySqlAzureDbForMySqlSyncDatabaseInputResponseOutput {
	return o
}

// Migration settings which tune the migration behavior
func (o MigrateMySqlAzureDbForMySqlSyncDatabaseInputResponseOutput) MigrationSetting() pulumi.StringMapOutput {
	return o.ApplyT(func(v MigrateMySqlAzureDbForMySqlSyncDatabaseInputResponse) map[string]string {
		return v.MigrationSetting
	}).(pulumi.StringMapOutput)
}

// Name of the database
func (o MigrateMySqlAzureDbForMySqlSyncDatabaseInputResponseOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MigrateMySqlAzureDbForMySqlSyncDatabaseInputResponse) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Source settings to tune source endpoint migration behavior
func (o MigrateMySqlAzureDbForMySqlSyncDatabaseInputResponseOutput) SourceSetting() pulumi.StringMapOutput {
	return o.ApplyT(func(v MigrateMySqlAzureDbForMySqlSyncDatabaseInputResponse) map[string]string { return v.SourceSetting }).(pulumi.StringMapOutput)
}

// Name of target database. Note: Target database will be truncated before starting migration.
func (o MigrateMySqlAzureDbForMySqlSyncDatabaseInputResponseOutput) TargetDatabaseName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MigrateMySqlAzureDbForMySqlSyncDatabaseInputResponse) *string { return v.TargetDatabaseName }).(pulumi.StringPtrOutput)
}

// Target settings to tune target endpoint migration behavior
func (o MigrateMySqlAzureDbForMySqlSyncDatabaseInputResponseOutput) TargetSetting() pulumi.StringMapOutput {
	return o.ApplyT(func(v MigrateMySqlAzureDbForMySqlSyncDatabaseInputResponse) map[string]string { return v.TargetSetting }).(pulumi.StringMapOutput)
}

type MigrateMySqlAzureDbForMySqlSyncDatabaseInputResponseArrayOutput struct{ *pulumi.OutputState }

func (MigrateMySqlAzureDbForMySqlSyncDatabaseInputResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MigrateMySqlAzureDbForMySqlSyncDatabaseInputResponse)(nil)).Elem()
}

func (o MigrateMySqlAzureDbForMySqlSyncDatabaseInputResponseArrayOutput) ToMigrateMySqlAzureDbForMySqlSyncDatabaseInputResponseArrayOutput() MigrateMySqlAzureDbForMySqlSyncDatabaseInputResponseArrayOutput {
	return o
}

func (o MigrateMySqlAzureDbForMySqlSyncDatabaseInputResponseArrayOutput) ToMigrateMySqlAzureDbForMySqlSyncDatabaseInputResponseArrayOutputWithContext(ctx context.Context) MigrateMySqlAzureDbForMySqlSyncDatabaseInputResponseArrayOutput {
	return o
}

func (o MigrateMySqlAzureDbForMySqlSyncDatabaseInputResponseArrayOutput) Index(i pulumi.IntInput) MigrateMySqlAzureDbForMySqlSyncDatabaseInputResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) MigrateMySqlAzureDbForMySqlSyncDatabaseInputResponse {
		return vs[0].([]MigrateMySqlAzureDbForMySqlSyncDatabaseInputResponse)[vs[1].(int)]
	}).(MigrateMySqlAzureDbForMySqlSyncDatabaseInputResponseOutput)
}

// Input for the task that migrates MySQL databases to Azure Database for MySQL for online migrations
type MigrateMySqlAzureDbForMySqlSyncTaskInput struct {
	// Databases to migrate
	SelectedDatabases []MigrateMySqlAzureDbForMySqlSyncDatabaseInput `pulumi:"selectedDatabases"`
	// Connection information for source MySQL
	SourceConnectionInfo MySqlConnectionInfo `pulumi:"sourceConnectionInfo"`
	// Connection information for target Azure Database for MySQL
	TargetConnectionInfo MySqlConnectionInfo `pulumi:"targetConnectionInfo"`
}

// MigrateMySqlAzureDbForMySqlSyncTaskInputInput is an input type that accepts MigrateMySqlAzureDbForMySqlSyncTaskInputArgs and MigrateMySqlAzureDbForMySqlSyncTaskInputOutput values.
// You can construct a concrete instance of `MigrateMySqlAzureDbForMySqlSyncTaskInputInput` via:
//
//          MigrateMySqlAzureDbForMySqlSyncTaskInputArgs{...}
type MigrateMySqlAzureDbForMySqlSyncTaskInputInput interface {
	pulumi.Input

	ToMigrateMySqlAzureDbForMySqlSyncTaskInputOutput() MigrateMySqlAzureDbForMySqlSyncTaskInputOutput
	ToMigrateMySqlAzureDbForMySqlSyncTaskInputOutputWithContext(context.Context) MigrateMySqlAzureDbForMySqlSyncTaskInputOutput
}

// Input for the task that migrates MySQL databases to Azure Database for MySQL for online migrations
type MigrateMySqlAzureDbForMySqlSyncTaskInputArgs struct {
	// Databases to migrate
	SelectedDatabases MigrateMySqlAzureDbForMySqlSyncDatabaseInputArrayInput `pulumi:"selectedDatabases"`
	// Connection information for source MySQL
	SourceConnectionInfo MySqlConnectionInfoInput `pulumi:"sourceConnectionInfo"`
	// Connection information for target Azure Database for MySQL
	TargetConnectionInfo MySqlConnectionInfoInput `pulumi:"targetConnectionInfo"`
}

func (MigrateMySqlAzureDbForMySqlSyncTaskInputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MigrateMySqlAzureDbForMySqlSyncTaskInput)(nil)).Elem()
}

func (i MigrateMySqlAzureDbForMySqlSyncTaskInputArgs) ToMigrateMySqlAzureDbForMySqlSyncTaskInputOutput() MigrateMySqlAzureDbForMySqlSyncTaskInputOutput {
	return i.ToMigrateMySqlAzureDbForMySqlSyncTaskInputOutputWithContext(context.Background())
}

func (i MigrateMySqlAzureDbForMySqlSyncTaskInputArgs) ToMigrateMySqlAzureDbForMySqlSyncTaskInputOutputWithContext(ctx context.Context) MigrateMySqlAzureDbForMySqlSyncTaskInputOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MigrateMySqlAzureDbForMySqlSyncTaskInputOutput)
}

func (i MigrateMySqlAzureDbForMySqlSyncTaskInputArgs) ToMigrateMySqlAzureDbForMySqlSyncTaskInputPtrOutput() MigrateMySqlAzureDbForMySqlSyncTaskInputPtrOutput {
	return i.ToMigrateMySqlAzureDbForMySqlSyncTaskInputPtrOutputWithContext(context.Background())
}

func (i MigrateMySqlAzureDbForMySqlSyncTaskInputArgs) ToMigrateMySqlAzureDbForMySqlSyncTaskInputPtrOutputWithContext(ctx context.Context) MigrateMySqlAzureDbForMySqlSyncTaskInputPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MigrateMySqlAzureDbForMySqlSyncTaskInputOutput).ToMigrateMySqlAzureDbForMySqlSyncTaskInputPtrOutputWithContext(ctx)
}

// MigrateMySqlAzureDbForMySqlSyncTaskInputPtrInput is an input type that accepts MigrateMySqlAzureDbForMySqlSyncTaskInputArgs, MigrateMySqlAzureDbForMySqlSyncTaskInputPtr and MigrateMySqlAzureDbForMySqlSyncTaskInputPtrOutput values.
// You can construct a concrete instance of `MigrateMySqlAzureDbForMySqlSyncTaskInputPtrInput` via:
//
//          MigrateMySqlAzureDbForMySqlSyncTaskInputArgs{...}
//
//  or:
//
//          nil
type MigrateMySqlAzureDbForMySqlSyncTaskInputPtrInput interface {
	pulumi.Input

	ToMigrateMySqlAzureDbForMySqlSyncTaskInputPtrOutput() MigrateMySqlAzureDbForMySqlSyncTaskInputPtrOutput
	ToMigrateMySqlAzureDbForMySqlSyncTaskInputPtrOutputWithContext(context.Context) MigrateMySqlAzureDbForMySqlSyncTaskInputPtrOutput
}

type migrateMySqlAzureDbForMySqlSyncTaskInputPtrType MigrateMySqlAzureDbForMySqlSyncTaskInputArgs

func MigrateMySqlAzureDbForMySqlSyncTaskInputPtr(v *MigrateMySqlAzureDbForMySqlSyncTaskInputArgs) MigrateMySqlAzureDbForMySqlSyncTaskInputPtrInput {
	return (*migrateMySqlAzureDbForMySqlSyncTaskInputPtrType)(v)
}

func (*migrateMySqlAzureDbForMySqlSyncTaskInputPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**MigrateMySqlAzureDbForMySqlSyncTaskInput)(nil)).Elem()
}

func (i *migrateMySqlAzureDbForMySqlSyncTaskInputPtrType) ToMigrateMySqlAzureDbForMySqlSyncTaskInputPtrOutput() MigrateMySqlAzureDbForMySqlSyncTaskInputPtrOutput {
	return i.ToMigrateMySqlAzureDbForMySqlSyncTaskInputPtrOutputWithContext(context.Background())
}

func (i *migrateMySqlAzureDbForMySqlSyncTaskInputPtrType) ToMigrateMySqlAzureDbForMySqlSyncTaskInputPtrOutputWithContext(ctx context.Context) MigrateMySqlAzureDbForMySqlSyncTaskInputPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MigrateMySqlAzureDbForMySqlSyncTaskInputPtrOutput)
}

// Input for the task that migrates MySQL databases to Azure Database for MySQL for online migrations
type MigrateMySqlAzureDbForMySqlSyncTaskInputResponse struct {
	// Databases to migrate
	SelectedDatabases []MigrateMySqlAzureDbForMySqlSyncDatabaseInputResponse `pulumi:"selectedDatabases"`
	// Connection information for source MySQL
	SourceConnectionInfo MySqlConnectionInfoResponse `pulumi:"sourceConnectionInfo"`
	// Connection information for target Azure Database for MySQL
	TargetConnectionInfo MySqlConnectionInfoResponse `pulumi:"targetConnectionInfo"`
}

// Input for the task that migrates MySQL databases to Azure Database for MySQL for online migrations
type MigrateMySqlAzureDbForMySqlSyncTaskInputResponseOutput struct{ *pulumi.OutputState }

func (MigrateMySqlAzureDbForMySqlSyncTaskInputResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MigrateMySqlAzureDbForMySqlSyncTaskInputResponse)(nil)).Elem()
}

func (o MigrateMySqlAzureDbForMySqlSyncTaskInputResponseOutput) ToMigrateMySqlAzureDbForMySqlSyncTaskInputResponseOutput() MigrateMySqlAzureDbForMySqlSyncTaskInputResponseOutput {
	return o
}

func (o MigrateMySqlAzureDbForMySqlSyncTaskInputResponseOutput) ToMigrateMySqlAzureDbForMySqlSyncTaskInputResponseOutputWithContext(ctx context.Context) MigrateMySqlAzureDbForMySqlSyncTaskInputResponseOutput {
	return o
}

func (o MigrateMySqlAzureDbForMySqlSyncTaskInputResponseOutput) ToMigrateMySqlAzureDbForMySqlSyncTaskInputResponsePtrOutput() MigrateMySqlAzureDbForMySqlSyncTaskInputResponsePtrOutput {
	return o.ToMigrateMySqlAzureDbForMySqlSyncTaskInputResponsePtrOutputWithContext(context.Background())
}

func (o MigrateMySqlAzureDbForMySqlSyncTaskInputResponseOutput) ToMigrateMySqlAzureDbForMySqlSyncTaskInputResponsePtrOutputWithContext(ctx context.Context) MigrateMySqlAzureDbForMySqlSyncTaskInputResponsePtrOutput {
	return o.ApplyT(func(v MigrateMySqlAzureDbForMySqlSyncTaskInputResponse) *MigrateMySqlAzureDbForMySqlSyncTaskInputResponse {
		return &v
	}).(MigrateMySqlAzureDbForMySqlSyncTaskInputResponsePtrOutput)
}

// Databases to migrate
func (o MigrateMySqlAzureDbForMySqlSyncTaskInputResponseOutput) SelectedDatabases() MigrateMySqlAzureDbForMySqlSyncDatabaseInputResponseArrayOutput {
	return o.ApplyT(func(v MigrateMySqlAzureDbForMySqlSyncTaskInputResponse) []MigrateMySqlAzureDbForMySqlSyncDatabaseInputResponse {
		return v.SelectedDatabases
	}).(MigrateMySqlAzureDbForMySqlSyncDatabaseInputResponseArrayOutput)
}

// Connection information for source MySQL
func (o MigrateMySqlAzureDbForMySqlSyncTaskInputResponseOutput) SourceConnectionInfo() MySqlConnectionInfoResponseOutput {
	return o.ApplyT(func(v MigrateMySqlAzureDbForMySqlSyncTaskInputResponse) MySqlConnectionInfoResponse {
		return v.SourceConnectionInfo
	}).(MySqlConnectionInfoResponseOutput)
}

// Connection information for target Azure Database for MySQL
func (o MigrateMySqlAzureDbForMySqlSyncTaskInputResponseOutput) TargetConnectionInfo() MySqlConnectionInfoResponseOutput {
	return o.ApplyT(func(v MigrateMySqlAzureDbForMySqlSyncTaskInputResponse) MySqlConnectionInfoResponse {
		return v.TargetConnectionInfo
	}).(MySqlConnectionInfoResponseOutput)
}

type MigrateMySqlAzureDbForMySqlSyncTaskInputResponsePtrOutput struct{ *pulumi.OutputState }

func (MigrateMySqlAzureDbForMySqlSyncTaskInputResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MigrateMySqlAzureDbForMySqlSyncTaskInputResponse)(nil)).Elem()
}

func (o MigrateMySqlAzureDbForMySqlSyncTaskInputResponsePtrOutput) ToMigrateMySqlAzureDbForMySqlSyncTaskInputResponsePtrOutput() MigrateMySqlAzureDbForMySqlSyncTaskInputResponsePtrOutput {
	return o
}

func (o MigrateMySqlAzureDbForMySqlSyncTaskInputResponsePtrOutput) ToMigrateMySqlAzureDbForMySqlSyncTaskInputResponsePtrOutputWithContext(ctx context.Context) MigrateMySqlAzureDbForMySqlSyncTaskInputResponsePtrOutput {
	return o
}

func (o MigrateMySqlAzureDbForMySqlSyncTaskInputResponsePtrOutput) Elem() MigrateMySqlAzureDbForMySqlSyncTaskInputResponseOutput {
	return o.ApplyT(func(v *MigrateMySqlAzureDbForMySqlSyncTaskInputResponse) MigrateMySqlAzureDbForMySqlSyncTaskInputResponse {
		return *v
	}).(MigrateMySqlAzureDbForMySqlSyncTaskInputResponseOutput)
}

// Databases to migrate
func (o MigrateMySqlAzureDbForMySqlSyncTaskInputResponsePtrOutput) SelectedDatabases() MigrateMySqlAzureDbForMySqlSyncDatabaseInputResponseArrayOutput {
	return o.ApplyT(func(v *MigrateMySqlAzureDbForMySqlSyncTaskInputResponse) []MigrateMySqlAzureDbForMySqlSyncDatabaseInputResponse {
		if v == nil {
			return nil
		}
		return v.SelectedDatabases
	}).(MigrateMySqlAzureDbForMySqlSyncDatabaseInputResponseArrayOutput)
}

// Connection information for source MySQL
func (o MigrateMySqlAzureDbForMySqlSyncTaskInputResponsePtrOutput) SourceConnectionInfo() MySqlConnectionInfoResponsePtrOutput {
	return o.ApplyT(func(v *MigrateMySqlAzureDbForMySqlSyncTaskInputResponse) *MySqlConnectionInfoResponse {
		if v == nil {
			return nil
		}
		return &v.SourceConnectionInfo
	}).(MySqlConnectionInfoResponsePtrOutput)
}

// Connection information for target Azure Database for MySQL
func (o MigrateMySqlAzureDbForMySqlSyncTaskInputResponsePtrOutput) TargetConnectionInfo() MySqlConnectionInfoResponsePtrOutput {
	return o.ApplyT(func(v *MigrateMySqlAzureDbForMySqlSyncTaskInputResponse) *MySqlConnectionInfoResponse {
		if v == nil {
			return nil
		}
		return &v.TargetConnectionInfo
	}).(MySqlConnectionInfoResponsePtrOutput)
}

type MigrateMySqlAzureDbForMySqlSyncTaskOutputDatabaseErrorResponse struct {
	// Error message
	ErrorMessage *string `pulumi:"errorMessage"`
	// List of error events.
	Events []SyncMigrationDatabaseErrorEventResponse `pulumi:"events"`
	// Result identifier
	Id string `pulumi:"id"`
	// Result type
	ResultType string `pulumi:"resultType"`
}

type MigrateMySqlAzureDbForMySqlSyncTaskOutputDatabaseErrorResponseOutput struct{ *pulumi.OutputState }

func (MigrateMySqlAzureDbForMySqlSyncTaskOutputDatabaseErrorResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MigrateMySqlAzureDbForMySqlSyncTaskOutputDatabaseErrorResponse)(nil)).Elem()
}

func (o MigrateMySqlAzureDbForMySqlSyncTaskOutputDatabaseErrorResponseOutput) ToMigrateMySqlAzureDbForMySqlSyncTaskOutputDatabaseErrorResponseOutput() MigrateMySqlAzureDbForMySqlSyncTaskOutputDatabaseErrorResponseOutput {
	return o
}

func (o MigrateMySqlAzureDbForMySqlSyncTaskOutputDatabaseErrorResponseOutput) ToMigrateMySqlAzureDbForMySqlSyncTaskOutputDatabaseErrorResponseOutputWithContext(ctx context.Context) MigrateMySqlAzureDbForMySqlSyncTaskOutputDatabaseErrorResponseOutput {
	return o
}

// Error message
func (o MigrateMySqlAzureDbForMySqlSyncTaskOutputDatabaseErrorResponseOutput) ErrorMessage() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MigrateMySqlAzureDbForMySqlSyncTaskOutputDatabaseErrorResponse) *string { return v.ErrorMessage }).(pulumi.StringPtrOutput)
}

// List of error events.
func (o MigrateMySqlAzureDbForMySqlSyncTaskOutputDatabaseErrorResponseOutput) Events() SyncMigrationDatabaseErrorEventResponseArrayOutput {
	return o.ApplyT(func(v MigrateMySqlAzureDbForMySqlSyncTaskOutputDatabaseErrorResponse) []SyncMigrationDatabaseErrorEventResponse {
		return v.Events
	}).(SyncMigrationDatabaseErrorEventResponseArrayOutput)
}

// Result identifier
func (o MigrateMySqlAzureDbForMySqlSyncTaskOutputDatabaseErrorResponseOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateMySqlAzureDbForMySqlSyncTaskOutputDatabaseErrorResponse) string { return v.Id }).(pulumi.StringOutput)
}

// Result type
func (o MigrateMySqlAzureDbForMySqlSyncTaskOutputDatabaseErrorResponseOutput) ResultType() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateMySqlAzureDbForMySqlSyncTaskOutputDatabaseErrorResponse) string { return v.ResultType }).(pulumi.StringOutput)
}

type MigrateMySqlAzureDbForMySqlSyncTaskOutputDatabaseLevelResponse struct {
	// Number of applied changes
	AppliedChanges int `pulumi:"appliedChanges"`
	// Number of cdc deletes
	CdcDeleteCounter int `pulumi:"cdcDeleteCounter"`
	// Number of cdc inserts
	CdcInsertCounter int `pulumi:"cdcInsertCounter"`
	// Number of cdc updates
	CdcUpdateCounter int `pulumi:"cdcUpdateCounter"`
	// Name of the database
	DatabaseName string `pulumi:"databaseName"`
	// Migration end time
	EndedOn string `pulumi:"endedOn"`
	// Number of tables completed in full load
	FullLoadCompletedTables int `pulumi:"fullLoadCompletedTables"`
	// Number of tables errored in full load
	FullLoadErroredTables int `pulumi:"fullLoadErroredTables"`
	// Number of tables loading in full load
	FullLoadLoadingTables int `pulumi:"fullLoadLoadingTables"`
	// Number of tables queued in full load
	FullLoadQueuedTables int `pulumi:"fullLoadQueuedTables"`
	// Result identifier
	Id string `pulumi:"id"`
	// Number of incoming changes
	IncomingChanges int `pulumi:"incomingChanges"`
	// Indicates if initial load (full load) has been completed
	InitializationCompleted bool `pulumi:"initializationCompleted"`
	// CDC apply latency
	Latency int `pulumi:"latency"`
	// Migration state that this database is in
	MigrationState string `pulumi:"migrationState"`
	// Result type
	ResultType string `pulumi:"resultType"`
	// Migration start time
	StartedOn string `pulumi:"startedOn"`
}

type MigrateMySqlAzureDbForMySqlSyncTaskOutputDatabaseLevelResponseOutput struct{ *pulumi.OutputState }

func (MigrateMySqlAzureDbForMySqlSyncTaskOutputDatabaseLevelResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MigrateMySqlAzureDbForMySqlSyncTaskOutputDatabaseLevelResponse)(nil)).Elem()
}

func (o MigrateMySqlAzureDbForMySqlSyncTaskOutputDatabaseLevelResponseOutput) ToMigrateMySqlAzureDbForMySqlSyncTaskOutputDatabaseLevelResponseOutput() MigrateMySqlAzureDbForMySqlSyncTaskOutputDatabaseLevelResponseOutput {
	return o
}

func (o MigrateMySqlAzureDbForMySqlSyncTaskOutputDatabaseLevelResponseOutput) ToMigrateMySqlAzureDbForMySqlSyncTaskOutputDatabaseLevelResponseOutputWithContext(ctx context.Context) MigrateMySqlAzureDbForMySqlSyncTaskOutputDatabaseLevelResponseOutput {
	return o
}

// Number of applied changes
func (o MigrateMySqlAzureDbForMySqlSyncTaskOutputDatabaseLevelResponseOutput) AppliedChanges() pulumi.IntOutput {
	return o.ApplyT(func(v MigrateMySqlAzureDbForMySqlSyncTaskOutputDatabaseLevelResponse) int { return v.AppliedChanges }).(pulumi.IntOutput)
}

// Number of cdc deletes
func (o MigrateMySqlAzureDbForMySqlSyncTaskOutputDatabaseLevelResponseOutput) CdcDeleteCounter() pulumi.IntOutput {
	return o.ApplyT(func(v MigrateMySqlAzureDbForMySqlSyncTaskOutputDatabaseLevelResponse) int { return v.CdcDeleteCounter }).(pulumi.IntOutput)
}

// Number of cdc inserts
func (o MigrateMySqlAzureDbForMySqlSyncTaskOutputDatabaseLevelResponseOutput) CdcInsertCounter() pulumi.IntOutput {
	return o.ApplyT(func(v MigrateMySqlAzureDbForMySqlSyncTaskOutputDatabaseLevelResponse) int { return v.CdcInsertCounter }).(pulumi.IntOutput)
}

// Number of cdc updates
func (o MigrateMySqlAzureDbForMySqlSyncTaskOutputDatabaseLevelResponseOutput) CdcUpdateCounter() pulumi.IntOutput {
	return o.ApplyT(func(v MigrateMySqlAzureDbForMySqlSyncTaskOutputDatabaseLevelResponse) int { return v.CdcUpdateCounter }).(pulumi.IntOutput)
}

// Name of the database
func (o MigrateMySqlAzureDbForMySqlSyncTaskOutputDatabaseLevelResponseOutput) DatabaseName() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateMySqlAzureDbForMySqlSyncTaskOutputDatabaseLevelResponse) string { return v.DatabaseName }).(pulumi.StringOutput)
}

// Migration end time
func (o MigrateMySqlAzureDbForMySqlSyncTaskOutputDatabaseLevelResponseOutput) EndedOn() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateMySqlAzureDbForMySqlSyncTaskOutputDatabaseLevelResponse) string { return v.EndedOn }).(pulumi.StringOutput)
}

// Number of tables completed in full load
func (o MigrateMySqlAzureDbForMySqlSyncTaskOutputDatabaseLevelResponseOutput) FullLoadCompletedTables() pulumi.IntOutput {
	return o.ApplyT(func(v MigrateMySqlAzureDbForMySqlSyncTaskOutputDatabaseLevelResponse) int {
		return v.FullLoadCompletedTables
	}).(pulumi.IntOutput)
}

// Number of tables errored in full load
func (o MigrateMySqlAzureDbForMySqlSyncTaskOutputDatabaseLevelResponseOutput) FullLoadErroredTables() pulumi.IntOutput {
	return o.ApplyT(func(v MigrateMySqlAzureDbForMySqlSyncTaskOutputDatabaseLevelResponse) int {
		return v.FullLoadErroredTables
	}).(pulumi.IntOutput)
}

// Number of tables loading in full load
func (o MigrateMySqlAzureDbForMySqlSyncTaskOutputDatabaseLevelResponseOutput) FullLoadLoadingTables() pulumi.IntOutput {
	return o.ApplyT(func(v MigrateMySqlAzureDbForMySqlSyncTaskOutputDatabaseLevelResponse) int {
		return v.FullLoadLoadingTables
	}).(pulumi.IntOutput)
}

// Number of tables queued in full load
func (o MigrateMySqlAzureDbForMySqlSyncTaskOutputDatabaseLevelResponseOutput) FullLoadQueuedTables() pulumi.IntOutput {
	return o.ApplyT(func(v MigrateMySqlAzureDbForMySqlSyncTaskOutputDatabaseLevelResponse) int {
		return v.FullLoadQueuedTables
	}).(pulumi.IntOutput)
}

// Result identifier
func (o MigrateMySqlAzureDbForMySqlSyncTaskOutputDatabaseLevelResponseOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateMySqlAzureDbForMySqlSyncTaskOutputDatabaseLevelResponse) string { return v.Id }).(pulumi.StringOutput)
}

// Number of incoming changes
func (o MigrateMySqlAzureDbForMySqlSyncTaskOutputDatabaseLevelResponseOutput) IncomingChanges() pulumi.IntOutput {
	return o.ApplyT(func(v MigrateMySqlAzureDbForMySqlSyncTaskOutputDatabaseLevelResponse) int { return v.IncomingChanges }).(pulumi.IntOutput)
}

// Indicates if initial load (full load) has been completed
func (o MigrateMySqlAzureDbForMySqlSyncTaskOutputDatabaseLevelResponseOutput) InitializationCompleted() pulumi.BoolOutput {
	return o.ApplyT(func(v MigrateMySqlAzureDbForMySqlSyncTaskOutputDatabaseLevelResponse) bool {
		return v.InitializationCompleted
	}).(pulumi.BoolOutput)
}

// CDC apply latency
func (o MigrateMySqlAzureDbForMySqlSyncTaskOutputDatabaseLevelResponseOutput) Latency() pulumi.IntOutput {
	return o.ApplyT(func(v MigrateMySqlAzureDbForMySqlSyncTaskOutputDatabaseLevelResponse) int { return v.Latency }).(pulumi.IntOutput)
}

// Migration state that this database is in
func (o MigrateMySqlAzureDbForMySqlSyncTaskOutputDatabaseLevelResponseOutput) MigrationState() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateMySqlAzureDbForMySqlSyncTaskOutputDatabaseLevelResponse) string { return v.MigrationState }).(pulumi.StringOutput)
}

// Result type
func (o MigrateMySqlAzureDbForMySqlSyncTaskOutputDatabaseLevelResponseOutput) ResultType() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateMySqlAzureDbForMySqlSyncTaskOutputDatabaseLevelResponse) string { return v.ResultType }).(pulumi.StringOutput)
}

// Migration start time
func (o MigrateMySqlAzureDbForMySqlSyncTaskOutputDatabaseLevelResponseOutput) StartedOn() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateMySqlAzureDbForMySqlSyncTaskOutputDatabaseLevelResponse) string { return v.StartedOn }).(pulumi.StringOutput)
}

type MigrateMySqlAzureDbForMySqlSyncTaskOutputErrorResponse struct {
	// Migration error
	Error ReportableExceptionResponse `pulumi:"error"`
	// Result identifier
	Id string `pulumi:"id"`
	// Result type
	ResultType string `pulumi:"resultType"`
}

type MigrateMySqlAzureDbForMySqlSyncTaskOutputErrorResponseOutput struct{ *pulumi.OutputState }

func (MigrateMySqlAzureDbForMySqlSyncTaskOutputErrorResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MigrateMySqlAzureDbForMySqlSyncTaskOutputErrorResponse)(nil)).Elem()
}

func (o MigrateMySqlAzureDbForMySqlSyncTaskOutputErrorResponseOutput) ToMigrateMySqlAzureDbForMySqlSyncTaskOutputErrorResponseOutput() MigrateMySqlAzureDbForMySqlSyncTaskOutputErrorResponseOutput {
	return o
}

func (o MigrateMySqlAzureDbForMySqlSyncTaskOutputErrorResponseOutput) ToMigrateMySqlAzureDbForMySqlSyncTaskOutputErrorResponseOutputWithContext(ctx context.Context) MigrateMySqlAzureDbForMySqlSyncTaskOutputErrorResponseOutput {
	return o
}

// Migration error
func (o MigrateMySqlAzureDbForMySqlSyncTaskOutputErrorResponseOutput) Error() ReportableExceptionResponseOutput {
	return o.ApplyT(func(v MigrateMySqlAzureDbForMySqlSyncTaskOutputErrorResponse) ReportableExceptionResponse {
		return v.Error
	}).(ReportableExceptionResponseOutput)
}

// Result identifier
func (o MigrateMySqlAzureDbForMySqlSyncTaskOutputErrorResponseOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateMySqlAzureDbForMySqlSyncTaskOutputErrorResponse) string { return v.Id }).(pulumi.StringOutput)
}

// Result type
func (o MigrateMySqlAzureDbForMySqlSyncTaskOutputErrorResponseOutput) ResultType() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateMySqlAzureDbForMySqlSyncTaskOutputErrorResponse) string { return v.ResultType }).(pulumi.StringOutput)
}

type MigrateMySqlAzureDbForMySqlSyncTaskOutputMigrationLevelResponse struct {
	// Migration end time
	EndedOn string `pulumi:"endedOn"`
	// Result identifier
	Id string `pulumi:"id"`
	// Result type
	ResultType string `pulumi:"resultType"`
	// Source server name
	SourceServer string `pulumi:"sourceServer"`
	// Source server version
	SourceServerVersion string `pulumi:"sourceServerVersion"`
	// Migration start time
	StartedOn string `pulumi:"startedOn"`
	// Target server name
	TargetServer string `pulumi:"targetServer"`
	// Target server version
	TargetServerVersion string `pulumi:"targetServerVersion"`
}

type MigrateMySqlAzureDbForMySqlSyncTaskOutputMigrationLevelResponseOutput struct{ *pulumi.OutputState }

func (MigrateMySqlAzureDbForMySqlSyncTaskOutputMigrationLevelResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MigrateMySqlAzureDbForMySqlSyncTaskOutputMigrationLevelResponse)(nil)).Elem()
}

func (o MigrateMySqlAzureDbForMySqlSyncTaskOutputMigrationLevelResponseOutput) ToMigrateMySqlAzureDbForMySqlSyncTaskOutputMigrationLevelResponseOutput() MigrateMySqlAzureDbForMySqlSyncTaskOutputMigrationLevelResponseOutput {
	return o
}

func (o MigrateMySqlAzureDbForMySqlSyncTaskOutputMigrationLevelResponseOutput) ToMigrateMySqlAzureDbForMySqlSyncTaskOutputMigrationLevelResponseOutputWithContext(ctx context.Context) MigrateMySqlAzureDbForMySqlSyncTaskOutputMigrationLevelResponseOutput {
	return o
}

// Migration end time
func (o MigrateMySqlAzureDbForMySqlSyncTaskOutputMigrationLevelResponseOutput) EndedOn() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateMySqlAzureDbForMySqlSyncTaskOutputMigrationLevelResponse) string { return v.EndedOn }).(pulumi.StringOutput)
}

// Result identifier
func (o MigrateMySqlAzureDbForMySqlSyncTaskOutputMigrationLevelResponseOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateMySqlAzureDbForMySqlSyncTaskOutputMigrationLevelResponse) string { return v.Id }).(pulumi.StringOutput)
}

// Result type
func (o MigrateMySqlAzureDbForMySqlSyncTaskOutputMigrationLevelResponseOutput) ResultType() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateMySqlAzureDbForMySqlSyncTaskOutputMigrationLevelResponse) string { return v.ResultType }).(pulumi.StringOutput)
}

// Source server name
func (o MigrateMySqlAzureDbForMySqlSyncTaskOutputMigrationLevelResponseOutput) SourceServer() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateMySqlAzureDbForMySqlSyncTaskOutputMigrationLevelResponse) string { return v.SourceServer }).(pulumi.StringOutput)
}

// Source server version
func (o MigrateMySqlAzureDbForMySqlSyncTaskOutputMigrationLevelResponseOutput) SourceServerVersion() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateMySqlAzureDbForMySqlSyncTaskOutputMigrationLevelResponse) string {
		return v.SourceServerVersion
	}).(pulumi.StringOutput)
}

// Migration start time
func (o MigrateMySqlAzureDbForMySqlSyncTaskOutputMigrationLevelResponseOutput) StartedOn() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateMySqlAzureDbForMySqlSyncTaskOutputMigrationLevelResponse) string { return v.StartedOn }).(pulumi.StringOutput)
}

// Target server name
func (o MigrateMySqlAzureDbForMySqlSyncTaskOutputMigrationLevelResponseOutput) TargetServer() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateMySqlAzureDbForMySqlSyncTaskOutputMigrationLevelResponse) string { return v.TargetServer }).(pulumi.StringOutput)
}

// Target server version
func (o MigrateMySqlAzureDbForMySqlSyncTaskOutputMigrationLevelResponseOutput) TargetServerVersion() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateMySqlAzureDbForMySqlSyncTaskOutputMigrationLevelResponse) string {
		return v.TargetServerVersion
	}).(pulumi.StringOutput)
}

type MigrateMySqlAzureDbForMySqlSyncTaskOutputTableLevelResponse struct {
	// Number of applied deletes
	CdcDeleteCounter string `pulumi:"cdcDeleteCounter"`
	// Number of applied inserts
	CdcInsertCounter string `pulumi:"cdcInsertCounter"`
	// Number of applied updates
	CdcUpdateCounter string `pulumi:"cdcUpdateCounter"`
	// Number of data errors occurred
	DataErrorsCounter int `pulumi:"dataErrorsCounter"`
	// Name of the database
	DatabaseName string `pulumi:"databaseName"`
	// Full load end time
	FullLoadEndedOn string `pulumi:"fullLoadEndedOn"`
	// Estimate to finish full load
	FullLoadEstFinishTime string `pulumi:"fullLoadEstFinishTime"`
	// Full load start time
	FullLoadStartedOn string `pulumi:"fullLoadStartedOn"`
	// Number of rows applied in full load
	FullLoadTotalRows int `pulumi:"fullLoadTotalRows"`
	// Result identifier
	Id string `pulumi:"id"`
	// Last modified time on target
	LastModifiedTime string `pulumi:"lastModifiedTime"`
	// Result type
	ResultType string `pulumi:"resultType"`
	// Current state of the table migration
	State string `pulumi:"state"`
	// Name of the table
	TableName string `pulumi:"tableName"`
	// Total number of applied changes
	TotalChangesApplied int `pulumi:"totalChangesApplied"`
}

type MigrateMySqlAzureDbForMySqlSyncTaskOutputTableLevelResponseOutput struct{ *pulumi.OutputState }

func (MigrateMySqlAzureDbForMySqlSyncTaskOutputTableLevelResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MigrateMySqlAzureDbForMySqlSyncTaskOutputTableLevelResponse)(nil)).Elem()
}

func (o MigrateMySqlAzureDbForMySqlSyncTaskOutputTableLevelResponseOutput) ToMigrateMySqlAzureDbForMySqlSyncTaskOutputTableLevelResponseOutput() MigrateMySqlAzureDbForMySqlSyncTaskOutputTableLevelResponseOutput {
	return o
}

func (o MigrateMySqlAzureDbForMySqlSyncTaskOutputTableLevelResponseOutput) ToMigrateMySqlAzureDbForMySqlSyncTaskOutputTableLevelResponseOutputWithContext(ctx context.Context) MigrateMySqlAzureDbForMySqlSyncTaskOutputTableLevelResponseOutput {
	return o
}

// Number of applied deletes
func (o MigrateMySqlAzureDbForMySqlSyncTaskOutputTableLevelResponseOutput) CdcDeleteCounter() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateMySqlAzureDbForMySqlSyncTaskOutputTableLevelResponse) string { return v.CdcDeleteCounter }).(pulumi.StringOutput)
}

// Number of applied inserts
func (o MigrateMySqlAzureDbForMySqlSyncTaskOutputTableLevelResponseOutput) CdcInsertCounter() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateMySqlAzureDbForMySqlSyncTaskOutputTableLevelResponse) string { return v.CdcInsertCounter }).(pulumi.StringOutput)
}

// Number of applied updates
func (o MigrateMySqlAzureDbForMySqlSyncTaskOutputTableLevelResponseOutput) CdcUpdateCounter() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateMySqlAzureDbForMySqlSyncTaskOutputTableLevelResponse) string { return v.CdcUpdateCounter }).(pulumi.StringOutput)
}

// Number of data errors occurred
func (o MigrateMySqlAzureDbForMySqlSyncTaskOutputTableLevelResponseOutput) DataErrorsCounter() pulumi.IntOutput {
	return o.ApplyT(func(v MigrateMySqlAzureDbForMySqlSyncTaskOutputTableLevelResponse) int { return v.DataErrorsCounter }).(pulumi.IntOutput)
}

// Name of the database
func (o MigrateMySqlAzureDbForMySqlSyncTaskOutputTableLevelResponseOutput) DatabaseName() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateMySqlAzureDbForMySqlSyncTaskOutputTableLevelResponse) string { return v.DatabaseName }).(pulumi.StringOutput)
}

// Full load end time
func (o MigrateMySqlAzureDbForMySqlSyncTaskOutputTableLevelResponseOutput) FullLoadEndedOn() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateMySqlAzureDbForMySqlSyncTaskOutputTableLevelResponse) string { return v.FullLoadEndedOn }).(pulumi.StringOutput)
}

// Estimate to finish full load
func (o MigrateMySqlAzureDbForMySqlSyncTaskOutputTableLevelResponseOutput) FullLoadEstFinishTime() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateMySqlAzureDbForMySqlSyncTaskOutputTableLevelResponse) string {
		return v.FullLoadEstFinishTime
	}).(pulumi.StringOutput)
}

// Full load start time
func (o MigrateMySqlAzureDbForMySqlSyncTaskOutputTableLevelResponseOutput) FullLoadStartedOn() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateMySqlAzureDbForMySqlSyncTaskOutputTableLevelResponse) string { return v.FullLoadStartedOn }).(pulumi.StringOutput)
}

// Number of rows applied in full load
func (o MigrateMySqlAzureDbForMySqlSyncTaskOutputTableLevelResponseOutput) FullLoadTotalRows() pulumi.IntOutput {
	return o.ApplyT(func(v MigrateMySqlAzureDbForMySqlSyncTaskOutputTableLevelResponse) int { return v.FullLoadTotalRows }).(pulumi.IntOutput)
}

// Result identifier
func (o MigrateMySqlAzureDbForMySqlSyncTaskOutputTableLevelResponseOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateMySqlAzureDbForMySqlSyncTaskOutputTableLevelResponse) string { return v.Id }).(pulumi.StringOutput)
}

// Last modified time on target
func (o MigrateMySqlAzureDbForMySqlSyncTaskOutputTableLevelResponseOutput) LastModifiedTime() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateMySqlAzureDbForMySqlSyncTaskOutputTableLevelResponse) string { return v.LastModifiedTime }).(pulumi.StringOutput)
}

// Result type
func (o MigrateMySqlAzureDbForMySqlSyncTaskOutputTableLevelResponseOutput) ResultType() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateMySqlAzureDbForMySqlSyncTaskOutputTableLevelResponse) string { return v.ResultType }).(pulumi.StringOutput)
}

// Current state of the table migration
func (o MigrateMySqlAzureDbForMySqlSyncTaskOutputTableLevelResponseOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateMySqlAzureDbForMySqlSyncTaskOutputTableLevelResponse) string { return v.State }).(pulumi.StringOutput)
}

// Name of the table
func (o MigrateMySqlAzureDbForMySqlSyncTaskOutputTableLevelResponseOutput) TableName() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateMySqlAzureDbForMySqlSyncTaskOutputTableLevelResponse) string { return v.TableName }).(pulumi.StringOutput)
}

// Total number of applied changes
func (o MigrateMySqlAzureDbForMySqlSyncTaskOutputTableLevelResponseOutput) TotalChangesApplied() pulumi.IntOutput {
	return o.ApplyT(func(v MigrateMySqlAzureDbForMySqlSyncTaskOutputTableLevelResponse) int { return v.TotalChangesApplied }).(pulumi.IntOutput)
}

// Properties for the task that migrates MySQL databases to Azure Database for MySQL for online migrations
type MigrateMySqlAzureDbForMySqlSyncTaskProperties struct {
	// Key value pairs of client data to attach meta data information to task
	ClientData map[string]string `pulumi:"clientData"`
	// Task input
	Input *MigrateMySqlAzureDbForMySqlSyncTaskInput `pulumi:"input"`
	// Task type.
	TaskType string `pulumi:"taskType"`
}

// MigrateMySqlAzureDbForMySqlSyncTaskPropertiesInput is an input type that accepts MigrateMySqlAzureDbForMySqlSyncTaskPropertiesArgs and MigrateMySqlAzureDbForMySqlSyncTaskPropertiesOutput values.
// You can construct a concrete instance of `MigrateMySqlAzureDbForMySqlSyncTaskPropertiesInput` via:
//
//          MigrateMySqlAzureDbForMySqlSyncTaskPropertiesArgs{...}
type MigrateMySqlAzureDbForMySqlSyncTaskPropertiesInput interface {
	pulumi.Input

	ToMigrateMySqlAzureDbForMySqlSyncTaskPropertiesOutput() MigrateMySqlAzureDbForMySqlSyncTaskPropertiesOutput
	ToMigrateMySqlAzureDbForMySqlSyncTaskPropertiesOutputWithContext(context.Context) MigrateMySqlAzureDbForMySqlSyncTaskPropertiesOutput
}

// Properties for the task that migrates MySQL databases to Azure Database for MySQL for online migrations
type MigrateMySqlAzureDbForMySqlSyncTaskPropertiesArgs struct {
	// Key value pairs of client data to attach meta data information to task
	ClientData pulumi.StringMapInput `pulumi:"clientData"`
	// Task input
	Input MigrateMySqlAzureDbForMySqlSyncTaskInputPtrInput `pulumi:"input"`
	// Task type.
	TaskType pulumi.StringInput `pulumi:"taskType"`
}

func (MigrateMySqlAzureDbForMySqlSyncTaskPropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MigrateMySqlAzureDbForMySqlSyncTaskProperties)(nil)).Elem()
}

func (i MigrateMySqlAzureDbForMySqlSyncTaskPropertiesArgs) ToMigrateMySqlAzureDbForMySqlSyncTaskPropertiesOutput() MigrateMySqlAzureDbForMySqlSyncTaskPropertiesOutput {
	return i.ToMigrateMySqlAzureDbForMySqlSyncTaskPropertiesOutputWithContext(context.Background())
}

func (i MigrateMySqlAzureDbForMySqlSyncTaskPropertiesArgs) ToMigrateMySqlAzureDbForMySqlSyncTaskPropertiesOutputWithContext(ctx context.Context) MigrateMySqlAzureDbForMySqlSyncTaskPropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MigrateMySqlAzureDbForMySqlSyncTaskPropertiesOutput)
}

// Properties for the task that migrates MySQL databases to Azure Database for MySQL for online migrations
type MigrateMySqlAzureDbForMySqlSyncTaskPropertiesResponse struct {
	// Key value pairs of client data to attach meta data information to task
	ClientData map[string]string `pulumi:"clientData"`
	// Array of command properties.
	Commands []interface{} `pulumi:"commands"`
	// Array of errors. This is ignored if submitted.
	Errors []ODataErrorResponse `pulumi:"errors"`
	// Task input
	Input *MigrateMySqlAzureDbForMySqlSyncTaskInputResponse `pulumi:"input"`
	// Task output. This is ignored if submitted.
	Output []interface{} `pulumi:"output"`
	// The state of the task. This is ignored if submitted.
	State string `pulumi:"state"`
	// Task type.
	TaskType string `pulumi:"taskType"`
}

// Properties for the task that migrates MySQL databases to Azure Database for MySQL for online migrations
type MigrateMySqlAzureDbForMySqlSyncTaskPropertiesResponseOutput struct{ *pulumi.OutputState }

func (MigrateMySqlAzureDbForMySqlSyncTaskPropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MigrateMySqlAzureDbForMySqlSyncTaskPropertiesResponse)(nil)).Elem()
}

func (o MigrateMySqlAzureDbForMySqlSyncTaskPropertiesResponseOutput) ToMigrateMySqlAzureDbForMySqlSyncTaskPropertiesResponseOutput() MigrateMySqlAzureDbForMySqlSyncTaskPropertiesResponseOutput {
	return o
}

func (o MigrateMySqlAzureDbForMySqlSyncTaskPropertiesResponseOutput) ToMigrateMySqlAzureDbForMySqlSyncTaskPropertiesResponseOutputWithContext(ctx context.Context) MigrateMySqlAzureDbForMySqlSyncTaskPropertiesResponseOutput {
	return o
}

// Key value pairs of client data to attach meta data information to task
func (o MigrateMySqlAzureDbForMySqlSyncTaskPropertiesResponseOutput) ClientData() pulumi.StringMapOutput {
	return o.ApplyT(func(v MigrateMySqlAzureDbForMySqlSyncTaskPropertiesResponse) map[string]string { return v.ClientData }).(pulumi.StringMapOutput)
}

// Array of command properties.
func (o MigrateMySqlAzureDbForMySqlSyncTaskPropertiesResponseOutput) Commands() pulumi.ArrayOutput {
	return o.ApplyT(func(v MigrateMySqlAzureDbForMySqlSyncTaskPropertiesResponse) []interface{} { return v.Commands }).(pulumi.ArrayOutput)
}

// Array of errors. This is ignored if submitted.
func (o MigrateMySqlAzureDbForMySqlSyncTaskPropertiesResponseOutput) Errors() ODataErrorResponseArrayOutput {
	return o.ApplyT(func(v MigrateMySqlAzureDbForMySqlSyncTaskPropertiesResponse) []ODataErrorResponse { return v.Errors }).(ODataErrorResponseArrayOutput)
}

// Task input
func (o MigrateMySqlAzureDbForMySqlSyncTaskPropertiesResponseOutput) Input() MigrateMySqlAzureDbForMySqlSyncTaskInputResponsePtrOutput {
	return o.ApplyT(func(v MigrateMySqlAzureDbForMySqlSyncTaskPropertiesResponse) *MigrateMySqlAzureDbForMySqlSyncTaskInputResponse {
		return v.Input
	}).(MigrateMySqlAzureDbForMySqlSyncTaskInputResponsePtrOutput)
}

// Task output. This is ignored if submitted.
func (o MigrateMySqlAzureDbForMySqlSyncTaskPropertiesResponseOutput) Output() pulumi.ArrayOutput {
	return o.ApplyT(func(v MigrateMySqlAzureDbForMySqlSyncTaskPropertiesResponse) []interface{} { return v.Output }).(pulumi.ArrayOutput)
}

// The state of the task. This is ignored if submitted.
func (o MigrateMySqlAzureDbForMySqlSyncTaskPropertiesResponseOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateMySqlAzureDbForMySqlSyncTaskPropertiesResponse) string { return v.State }).(pulumi.StringOutput)
}

// Task type.
func (o MigrateMySqlAzureDbForMySqlSyncTaskPropertiesResponseOutput) TaskType() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateMySqlAzureDbForMySqlSyncTaskPropertiesResponse) string { return v.TaskType }).(pulumi.StringOutput)
}

// Properties for the task that migrates Oracle to Azure Database for PostgreSQL for online migrations
type MigrateOracleAzureDbForPostgreSqlSyncTaskProperties struct {
	// Key value pairs of client data to attach meta data information to task
	ClientData map[string]string `pulumi:"clientData"`
	// Task input
	Input *MigrateOracleAzureDbPostgreSqlSyncTaskInput `pulumi:"input"`
	// Task type.
	TaskType string `pulumi:"taskType"`
}

// MigrateOracleAzureDbForPostgreSqlSyncTaskPropertiesInput is an input type that accepts MigrateOracleAzureDbForPostgreSqlSyncTaskPropertiesArgs and MigrateOracleAzureDbForPostgreSqlSyncTaskPropertiesOutput values.
// You can construct a concrete instance of `MigrateOracleAzureDbForPostgreSqlSyncTaskPropertiesInput` via:
//
//          MigrateOracleAzureDbForPostgreSqlSyncTaskPropertiesArgs{...}
type MigrateOracleAzureDbForPostgreSqlSyncTaskPropertiesInput interface {
	pulumi.Input

	ToMigrateOracleAzureDbForPostgreSqlSyncTaskPropertiesOutput() MigrateOracleAzureDbForPostgreSqlSyncTaskPropertiesOutput
	ToMigrateOracleAzureDbForPostgreSqlSyncTaskPropertiesOutputWithContext(context.Context) MigrateOracleAzureDbForPostgreSqlSyncTaskPropertiesOutput
}

// Properties for the task that migrates Oracle to Azure Database for PostgreSQL for online migrations
type MigrateOracleAzureDbForPostgreSqlSyncTaskPropertiesArgs struct {
	// Key value pairs of client data to attach meta data information to task
	ClientData pulumi.StringMapInput `pulumi:"clientData"`
	// Task input
	Input MigrateOracleAzureDbPostgreSqlSyncTaskInputPtrInput `pulumi:"input"`
	// Task type.
	TaskType pulumi.StringInput `pulumi:"taskType"`
}

func (MigrateOracleAzureDbForPostgreSqlSyncTaskPropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MigrateOracleAzureDbForPostgreSqlSyncTaskProperties)(nil)).Elem()
}

func (i MigrateOracleAzureDbForPostgreSqlSyncTaskPropertiesArgs) ToMigrateOracleAzureDbForPostgreSqlSyncTaskPropertiesOutput() MigrateOracleAzureDbForPostgreSqlSyncTaskPropertiesOutput {
	return i.ToMigrateOracleAzureDbForPostgreSqlSyncTaskPropertiesOutputWithContext(context.Background())
}

func (i MigrateOracleAzureDbForPostgreSqlSyncTaskPropertiesArgs) ToMigrateOracleAzureDbForPostgreSqlSyncTaskPropertiesOutputWithContext(ctx context.Context) MigrateOracleAzureDbForPostgreSqlSyncTaskPropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MigrateOracleAzureDbForPostgreSqlSyncTaskPropertiesOutput)
}

// Properties for the task that migrates Oracle to Azure Database for PostgreSQL for online migrations
type MigrateOracleAzureDbForPostgreSqlSyncTaskPropertiesResponse struct {
	// Key value pairs of client data to attach meta data information to task
	ClientData map[string]string `pulumi:"clientData"`
	// Array of command properties.
	Commands []interface{} `pulumi:"commands"`
	// Array of errors. This is ignored if submitted.
	Errors []ODataErrorResponse `pulumi:"errors"`
	// Task input
	Input *MigrateOracleAzureDbPostgreSqlSyncTaskInputResponse `pulumi:"input"`
	// Task output. This is ignored if submitted.
	Output []interface{} `pulumi:"output"`
	// The state of the task. This is ignored if submitted.
	State string `pulumi:"state"`
	// Task type.
	TaskType string `pulumi:"taskType"`
}

// Properties for the task that migrates Oracle to Azure Database for PostgreSQL for online migrations
type MigrateOracleAzureDbForPostgreSqlSyncTaskPropertiesResponseOutput struct{ *pulumi.OutputState }

func (MigrateOracleAzureDbForPostgreSqlSyncTaskPropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MigrateOracleAzureDbForPostgreSqlSyncTaskPropertiesResponse)(nil)).Elem()
}

func (o MigrateOracleAzureDbForPostgreSqlSyncTaskPropertiesResponseOutput) ToMigrateOracleAzureDbForPostgreSqlSyncTaskPropertiesResponseOutput() MigrateOracleAzureDbForPostgreSqlSyncTaskPropertiesResponseOutput {
	return o
}

func (o MigrateOracleAzureDbForPostgreSqlSyncTaskPropertiesResponseOutput) ToMigrateOracleAzureDbForPostgreSqlSyncTaskPropertiesResponseOutputWithContext(ctx context.Context) MigrateOracleAzureDbForPostgreSqlSyncTaskPropertiesResponseOutput {
	return o
}

// Key value pairs of client data to attach meta data information to task
func (o MigrateOracleAzureDbForPostgreSqlSyncTaskPropertiesResponseOutput) ClientData() pulumi.StringMapOutput {
	return o.ApplyT(func(v MigrateOracleAzureDbForPostgreSqlSyncTaskPropertiesResponse) map[string]string {
		return v.ClientData
	}).(pulumi.StringMapOutput)
}

// Array of command properties.
func (o MigrateOracleAzureDbForPostgreSqlSyncTaskPropertiesResponseOutput) Commands() pulumi.ArrayOutput {
	return o.ApplyT(func(v MigrateOracleAzureDbForPostgreSqlSyncTaskPropertiesResponse) []interface{} { return v.Commands }).(pulumi.ArrayOutput)
}

// Array of errors. This is ignored if submitted.
func (o MigrateOracleAzureDbForPostgreSqlSyncTaskPropertiesResponseOutput) Errors() ODataErrorResponseArrayOutput {
	return o.ApplyT(func(v MigrateOracleAzureDbForPostgreSqlSyncTaskPropertiesResponse) []ODataErrorResponse {
		return v.Errors
	}).(ODataErrorResponseArrayOutput)
}

// Task input
func (o MigrateOracleAzureDbForPostgreSqlSyncTaskPropertiesResponseOutput) Input() MigrateOracleAzureDbPostgreSqlSyncTaskInputResponsePtrOutput {
	return o.ApplyT(func(v MigrateOracleAzureDbForPostgreSqlSyncTaskPropertiesResponse) *MigrateOracleAzureDbPostgreSqlSyncTaskInputResponse {
		return v.Input
	}).(MigrateOracleAzureDbPostgreSqlSyncTaskInputResponsePtrOutput)
}

// Task output. This is ignored if submitted.
func (o MigrateOracleAzureDbForPostgreSqlSyncTaskPropertiesResponseOutput) Output() pulumi.ArrayOutput {
	return o.ApplyT(func(v MigrateOracleAzureDbForPostgreSqlSyncTaskPropertiesResponse) []interface{} { return v.Output }).(pulumi.ArrayOutput)
}

// The state of the task. This is ignored if submitted.
func (o MigrateOracleAzureDbForPostgreSqlSyncTaskPropertiesResponseOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateOracleAzureDbForPostgreSqlSyncTaskPropertiesResponse) string { return v.State }).(pulumi.StringOutput)
}

// Task type.
func (o MigrateOracleAzureDbForPostgreSqlSyncTaskPropertiesResponseOutput) TaskType() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateOracleAzureDbForPostgreSqlSyncTaskPropertiesResponse) string { return v.TaskType }).(pulumi.StringOutput)
}

// Database specific information for Oracle to Azure Database for PostgreSQL migration task inputs
type MigrateOracleAzureDbPostgreSqlSyncDatabaseInput struct {
	// How to handle object name casing: either Preserve or ToLower
	CaseManipulation *string `pulumi:"caseManipulation"`
	// Migration settings which tune the migration behavior
	MigrationSetting map[string]string `pulumi:"migrationSetting"`
	// Name of the migration pipeline
	Name *string `pulumi:"name"`
	// Name of the source schema
	SchemaName *string `pulumi:"schemaName"`
	// Source settings to tune source endpoint migration behavior
	SourceSetting map[string]string `pulumi:"sourceSetting"`
	// Mapping of source to target tables
	TableMap map[string]string `pulumi:"tableMap"`
	// Name of target database. Note: Target database will be truncated before starting migration.
	TargetDatabaseName *string `pulumi:"targetDatabaseName"`
	// Target settings to tune target endpoint migration behavior
	TargetSetting map[string]string `pulumi:"targetSetting"`
}

// MigrateOracleAzureDbPostgreSqlSyncDatabaseInputInput is an input type that accepts MigrateOracleAzureDbPostgreSqlSyncDatabaseInputArgs and MigrateOracleAzureDbPostgreSqlSyncDatabaseInputOutput values.
// You can construct a concrete instance of `MigrateOracleAzureDbPostgreSqlSyncDatabaseInputInput` via:
//
//          MigrateOracleAzureDbPostgreSqlSyncDatabaseInputArgs{...}
type MigrateOracleAzureDbPostgreSqlSyncDatabaseInputInput interface {
	pulumi.Input

	ToMigrateOracleAzureDbPostgreSqlSyncDatabaseInputOutput() MigrateOracleAzureDbPostgreSqlSyncDatabaseInputOutput
	ToMigrateOracleAzureDbPostgreSqlSyncDatabaseInputOutputWithContext(context.Context) MigrateOracleAzureDbPostgreSqlSyncDatabaseInputOutput
}

// Database specific information for Oracle to Azure Database for PostgreSQL migration task inputs
type MigrateOracleAzureDbPostgreSqlSyncDatabaseInputArgs struct {
	// How to handle object name casing: either Preserve or ToLower
	CaseManipulation pulumi.StringPtrInput `pulumi:"caseManipulation"`
	// Migration settings which tune the migration behavior
	MigrationSetting pulumi.StringMapInput `pulumi:"migrationSetting"`
	// Name of the migration pipeline
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Name of the source schema
	SchemaName pulumi.StringPtrInput `pulumi:"schemaName"`
	// Source settings to tune source endpoint migration behavior
	SourceSetting pulumi.StringMapInput `pulumi:"sourceSetting"`
	// Mapping of source to target tables
	TableMap pulumi.StringMapInput `pulumi:"tableMap"`
	// Name of target database. Note: Target database will be truncated before starting migration.
	TargetDatabaseName pulumi.StringPtrInput `pulumi:"targetDatabaseName"`
	// Target settings to tune target endpoint migration behavior
	TargetSetting pulumi.StringMapInput `pulumi:"targetSetting"`
}

func (MigrateOracleAzureDbPostgreSqlSyncDatabaseInputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MigrateOracleAzureDbPostgreSqlSyncDatabaseInput)(nil)).Elem()
}

func (i MigrateOracleAzureDbPostgreSqlSyncDatabaseInputArgs) ToMigrateOracleAzureDbPostgreSqlSyncDatabaseInputOutput() MigrateOracleAzureDbPostgreSqlSyncDatabaseInputOutput {
	return i.ToMigrateOracleAzureDbPostgreSqlSyncDatabaseInputOutputWithContext(context.Background())
}

func (i MigrateOracleAzureDbPostgreSqlSyncDatabaseInputArgs) ToMigrateOracleAzureDbPostgreSqlSyncDatabaseInputOutputWithContext(ctx context.Context) MigrateOracleAzureDbPostgreSqlSyncDatabaseInputOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MigrateOracleAzureDbPostgreSqlSyncDatabaseInputOutput)
}

// MigrateOracleAzureDbPostgreSqlSyncDatabaseInputArrayInput is an input type that accepts MigrateOracleAzureDbPostgreSqlSyncDatabaseInputArray and MigrateOracleAzureDbPostgreSqlSyncDatabaseInputArrayOutput values.
// You can construct a concrete instance of `MigrateOracleAzureDbPostgreSqlSyncDatabaseInputArrayInput` via:
//
//          MigrateOracleAzureDbPostgreSqlSyncDatabaseInputArray{ MigrateOracleAzureDbPostgreSqlSyncDatabaseInputArgs{...} }
type MigrateOracleAzureDbPostgreSqlSyncDatabaseInputArrayInput interface {
	pulumi.Input

	ToMigrateOracleAzureDbPostgreSqlSyncDatabaseInputArrayOutput() MigrateOracleAzureDbPostgreSqlSyncDatabaseInputArrayOutput
	ToMigrateOracleAzureDbPostgreSqlSyncDatabaseInputArrayOutputWithContext(context.Context) MigrateOracleAzureDbPostgreSqlSyncDatabaseInputArrayOutput
}

type MigrateOracleAzureDbPostgreSqlSyncDatabaseInputArray []MigrateOracleAzureDbPostgreSqlSyncDatabaseInputInput

func (MigrateOracleAzureDbPostgreSqlSyncDatabaseInputArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MigrateOracleAzureDbPostgreSqlSyncDatabaseInput)(nil)).Elem()
}

func (i MigrateOracleAzureDbPostgreSqlSyncDatabaseInputArray) ToMigrateOracleAzureDbPostgreSqlSyncDatabaseInputArrayOutput() MigrateOracleAzureDbPostgreSqlSyncDatabaseInputArrayOutput {
	return i.ToMigrateOracleAzureDbPostgreSqlSyncDatabaseInputArrayOutputWithContext(context.Background())
}

func (i MigrateOracleAzureDbPostgreSqlSyncDatabaseInputArray) ToMigrateOracleAzureDbPostgreSqlSyncDatabaseInputArrayOutputWithContext(ctx context.Context) MigrateOracleAzureDbPostgreSqlSyncDatabaseInputArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MigrateOracleAzureDbPostgreSqlSyncDatabaseInputArrayOutput)
}

// Database specific information for Oracle to Azure Database for PostgreSQL migration task inputs
type MigrateOracleAzureDbPostgreSqlSyncDatabaseInputResponse struct {
	// How to handle object name casing: either Preserve or ToLower
	CaseManipulation *string `pulumi:"caseManipulation"`
	// Migration settings which tune the migration behavior
	MigrationSetting map[string]string `pulumi:"migrationSetting"`
	// Name of the migration pipeline
	Name *string `pulumi:"name"`
	// Name of the source schema
	SchemaName *string `pulumi:"schemaName"`
	// Source settings to tune source endpoint migration behavior
	SourceSetting map[string]string `pulumi:"sourceSetting"`
	// Mapping of source to target tables
	TableMap map[string]string `pulumi:"tableMap"`
	// Name of target database. Note: Target database will be truncated before starting migration.
	TargetDatabaseName *string `pulumi:"targetDatabaseName"`
	// Target settings to tune target endpoint migration behavior
	TargetSetting map[string]string `pulumi:"targetSetting"`
}

// Database specific information for Oracle to Azure Database for PostgreSQL migration task inputs
type MigrateOracleAzureDbPostgreSqlSyncDatabaseInputResponseOutput struct{ *pulumi.OutputState }

func (MigrateOracleAzureDbPostgreSqlSyncDatabaseInputResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MigrateOracleAzureDbPostgreSqlSyncDatabaseInputResponse)(nil)).Elem()
}

func (o MigrateOracleAzureDbPostgreSqlSyncDatabaseInputResponseOutput) ToMigrateOracleAzureDbPostgreSqlSyncDatabaseInputResponseOutput() MigrateOracleAzureDbPostgreSqlSyncDatabaseInputResponseOutput {
	return o
}

func (o MigrateOracleAzureDbPostgreSqlSyncDatabaseInputResponseOutput) ToMigrateOracleAzureDbPostgreSqlSyncDatabaseInputResponseOutputWithContext(ctx context.Context) MigrateOracleAzureDbPostgreSqlSyncDatabaseInputResponseOutput {
	return o
}

// How to handle object name casing: either Preserve or ToLower
func (o MigrateOracleAzureDbPostgreSqlSyncDatabaseInputResponseOutput) CaseManipulation() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MigrateOracleAzureDbPostgreSqlSyncDatabaseInputResponse) *string { return v.CaseManipulation }).(pulumi.StringPtrOutput)
}

// Migration settings which tune the migration behavior
func (o MigrateOracleAzureDbPostgreSqlSyncDatabaseInputResponseOutput) MigrationSetting() pulumi.StringMapOutput {
	return o.ApplyT(func(v MigrateOracleAzureDbPostgreSqlSyncDatabaseInputResponse) map[string]string {
		return v.MigrationSetting
	}).(pulumi.StringMapOutput)
}

// Name of the migration pipeline
func (o MigrateOracleAzureDbPostgreSqlSyncDatabaseInputResponseOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MigrateOracleAzureDbPostgreSqlSyncDatabaseInputResponse) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Name of the source schema
func (o MigrateOracleAzureDbPostgreSqlSyncDatabaseInputResponseOutput) SchemaName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MigrateOracleAzureDbPostgreSqlSyncDatabaseInputResponse) *string { return v.SchemaName }).(pulumi.StringPtrOutput)
}

// Source settings to tune source endpoint migration behavior
func (o MigrateOracleAzureDbPostgreSqlSyncDatabaseInputResponseOutput) SourceSetting() pulumi.StringMapOutput {
	return o.ApplyT(func(v MigrateOracleAzureDbPostgreSqlSyncDatabaseInputResponse) map[string]string {
		return v.SourceSetting
	}).(pulumi.StringMapOutput)
}

// Mapping of source to target tables
func (o MigrateOracleAzureDbPostgreSqlSyncDatabaseInputResponseOutput) TableMap() pulumi.StringMapOutput {
	return o.ApplyT(func(v MigrateOracleAzureDbPostgreSqlSyncDatabaseInputResponse) map[string]string { return v.TableMap }).(pulumi.StringMapOutput)
}

// Name of target database. Note: Target database will be truncated before starting migration.
func (o MigrateOracleAzureDbPostgreSqlSyncDatabaseInputResponseOutput) TargetDatabaseName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MigrateOracleAzureDbPostgreSqlSyncDatabaseInputResponse) *string { return v.TargetDatabaseName }).(pulumi.StringPtrOutput)
}

// Target settings to tune target endpoint migration behavior
func (o MigrateOracleAzureDbPostgreSqlSyncDatabaseInputResponseOutput) TargetSetting() pulumi.StringMapOutput {
	return o.ApplyT(func(v MigrateOracleAzureDbPostgreSqlSyncDatabaseInputResponse) map[string]string {
		return v.TargetSetting
	}).(pulumi.StringMapOutput)
}

type MigrateOracleAzureDbPostgreSqlSyncDatabaseInputResponseArrayOutput struct{ *pulumi.OutputState }

func (MigrateOracleAzureDbPostgreSqlSyncDatabaseInputResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MigrateOracleAzureDbPostgreSqlSyncDatabaseInputResponse)(nil)).Elem()
}

func (o MigrateOracleAzureDbPostgreSqlSyncDatabaseInputResponseArrayOutput) ToMigrateOracleAzureDbPostgreSqlSyncDatabaseInputResponseArrayOutput() MigrateOracleAzureDbPostgreSqlSyncDatabaseInputResponseArrayOutput {
	return o
}

func (o MigrateOracleAzureDbPostgreSqlSyncDatabaseInputResponseArrayOutput) ToMigrateOracleAzureDbPostgreSqlSyncDatabaseInputResponseArrayOutputWithContext(ctx context.Context) MigrateOracleAzureDbPostgreSqlSyncDatabaseInputResponseArrayOutput {
	return o
}

func (o MigrateOracleAzureDbPostgreSqlSyncDatabaseInputResponseArrayOutput) Index(i pulumi.IntInput) MigrateOracleAzureDbPostgreSqlSyncDatabaseInputResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) MigrateOracleAzureDbPostgreSqlSyncDatabaseInputResponse {
		return vs[0].([]MigrateOracleAzureDbPostgreSqlSyncDatabaseInputResponse)[vs[1].(int)]
	}).(MigrateOracleAzureDbPostgreSqlSyncDatabaseInputResponseOutput)
}

// Input for the task that migrates Oracle databases to Azure Database for PostgreSQL for online migrations
type MigrateOracleAzureDbPostgreSqlSyncTaskInput struct {
	// Databases to migrate
	SelectedDatabases []MigrateOracleAzureDbPostgreSqlSyncDatabaseInput `pulumi:"selectedDatabases"`
	// Connection information for source Oracle
	SourceConnectionInfo OracleConnectionInfo `pulumi:"sourceConnectionInfo"`
	// Connection information for target Azure Database for PostgreSQL
	TargetConnectionInfo PostgreSqlConnectionInfo `pulumi:"targetConnectionInfo"`
}

// MigrateOracleAzureDbPostgreSqlSyncTaskInputInput is an input type that accepts MigrateOracleAzureDbPostgreSqlSyncTaskInputArgs and MigrateOracleAzureDbPostgreSqlSyncTaskInputOutput values.
// You can construct a concrete instance of `MigrateOracleAzureDbPostgreSqlSyncTaskInputInput` via:
//
//          MigrateOracleAzureDbPostgreSqlSyncTaskInputArgs{...}
type MigrateOracleAzureDbPostgreSqlSyncTaskInputInput interface {
	pulumi.Input

	ToMigrateOracleAzureDbPostgreSqlSyncTaskInputOutput() MigrateOracleAzureDbPostgreSqlSyncTaskInputOutput
	ToMigrateOracleAzureDbPostgreSqlSyncTaskInputOutputWithContext(context.Context) MigrateOracleAzureDbPostgreSqlSyncTaskInputOutput
}

// Input for the task that migrates Oracle databases to Azure Database for PostgreSQL for online migrations
type MigrateOracleAzureDbPostgreSqlSyncTaskInputArgs struct {
	// Databases to migrate
	SelectedDatabases MigrateOracleAzureDbPostgreSqlSyncDatabaseInputArrayInput `pulumi:"selectedDatabases"`
	// Connection information for source Oracle
	SourceConnectionInfo OracleConnectionInfoInput `pulumi:"sourceConnectionInfo"`
	// Connection information for target Azure Database for PostgreSQL
	TargetConnectionInfo PostgreSqlConnectionInfoInput `pulumi:"targetConnectionInfo"`
}

func (MigrateOracleAzureDbPostgreSqlSyncTaskInputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MigrateOracleAzureDbPostgreSqlSyncTaskInput)(nil)).Elem()
}

func (i MigrateOracleAzureDbPostgreSqlSyncTaskInputArgs) ToMigrateOracleAzureDbPostgreSqlSyncTaskInputOutput() MigrateOracleAzureDbPostgreSqlSyncTaskInputOutput {
	return i.ToMigrateOracleAzureDbPostgreSqlSyncTaskInputOutputWithContext(context.Background())
}

func (i MigrateOracleAzureDbPostgreSqlSyncTaskInputArgs) ToMigrateOracleAzureDbPostgreSqlSyncTaskInputOutputWithContext(ctx context.Context) MigrateOracleAzureDbPostgreSqlSyncTaskInputOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MigrateOracleAzureDbPostgreSqlSyncTaskInputOutput)
}

func (i MigrateOracleAzureDbPostgreSqlSyncTaskInputArgs) ToMigrateOracleAzureDbPostgreSqlSyncTaskInputPtrOutput() MigrateOracleAzureDbPostgreSqlSyncTaskInputPtrOutput {
	return i.ToMigrateOracleAzureDbPostgreSqlSyncTaskInputPtrOutputWithContext(context.Background())
}

func (i MigrateOracleAzureDbPostgreSqlSyncTaskInputArgs) ToMigrateOracleAzureDbPostgreSqlSyncTaskInputPtrOutputWithContext(ctx context.Context) MigrateOracleAzureDbPostgreSqlSyncTaskInputPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MigrateOracleAzureDbPostgreSqlSyncTaskInputOutput).ToMigrateOracleAzureDbPostgreSqlSyncTaskInputPtrOutputWithContext(ctx)
}

// MigrateOracleAzureDbPostgreSqlSyncTaskInputPtrInput is an input type that accepts MigrateOracleAzureDbPostgreSqlSyncTaskInputArgs, MigrateOracleAzureDbPostgreSqlSyncTaskInputPtr and MigrateOracleAzureDbPostgreSqlSyncTaskInputPtrOutput values.
// You can construct a concrete instance of `MigrateOracleAzureDbPostgreSqlSyncTaskInputPtrInput` via:
//
//          MigrateOracleAzureDbPostgreSqlSyncTaskInputArgs{...}
//
//  or:
//
//          nil
type MigrateOracleAzureDbPostgreSqlSyncTaskInputPtrInput interface {
	pulumi.Input

	ToMigrateOracleAzureDbPostgreSqlSyncTaskInputPtrOutput() MigrateOracleAzureDbPostgreSqlSyncTaskInputPtrOutput
	ToMigrateOracleAzureDbPostgreSqlSyncTaskInputPtrOutputWithContext(context.Context) MigrateOracleAzureDbPostgreSqlSyncTaskInputPtrOutput
}

type migrateOracleAzureDbPostgreSqlSyncTaskInputPtrType MigrateOracleAzureDbPostgreSqlSyncTaskInputArgs

func MigrateOracleAzureDbPostgreSqlSyncTaskInputPtr(v *MigrateOracleAzureDbPostgreSqlSyncTaskInputArgs) MigrateOracleAzureDbPostgreSqlSyncTaskInputPtrInput {
	return (*migrateOracleAzureDbPostgreSqlSyncTaskInputPtrType)(v)
}

func (*migrateOracleAzureDbPostgreSqlSyncTaskInputPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**MigrateOracleAzureDbPostgreSqlSyncTaskInput)(nil)).Elem()
}

func (i *migrateOracleAzureDbPostgreSqlSyncTaskInputPtrType) ToMigrateOracleAzureDbPostgreSqlSyncTaskInputPtrOutput() MigrateOracleAzureDbPostgreSqlSyncTaskInputPtrOutput {
	return i.ToMigrateOracleAzureDbPostgreSqlSyncTaskInputPtrOutputWithContext(context.Background())
}

func (i *migrateOracleAzureDbPostgreSqlSyncTaskInputPtrType) ToMigrateOracleAzureDbPostgreSqlSyncTaskInputPtrOutputWithContext(ctx context.Context) MigrateOracleAzureDbPostgreSqlSyncTaskInputPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MigrateOracleAzureDbPostgreSqlSyncTaskInputPtrOutput)
}

// Input for the task that migrates Oracle databases to Azure Database for PostgreSQL for online migrations
type MigrateOracleAzureDbPostgreSqlSyncTaskInputResponse struct {
	// Databases to migrate
	SelectedDatabases []MigrateOracleAzureDbPostgreSqlSyncDatabaseInputResponse `pulumi:"selectedDatabases"`
	// Connection information for source Oracle
	SourceConnectionInfo OracleConnectionInfoResponse `pulumi:"sourceConnectionInfo"`
	// Connection information for target Azure Database for PostgreSQL
	TargetConnectionInfo PostgreSqlConnectionInfoResponse `pulumi:"targetConnectionInfo"`
}

// Input for the task that migrates Oracle databases to Azure Database for PostgreSQL for online migrations
type MigrateOracleAzureDbPostgreSqlSyncTaskInputResponseOutput struct{ *pulumi.OutputState }

func (MigrateOracleAzureDbPostgreSqlSyncTaskInputResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MigrateOracleAzureDbPostgreSqlSyncTaskInputResponse)(nil)).Elem()
}

func (o MigrateOracleAzureDbPostgreSqlSyncTaskInputResponseOutput) ToMigrateOracleAzureDbPostgreSqlSyncTaskInputResponseOutput() MigrateOracleAzureDbPostgreSqlSyncTaskInputResponseOutput {
	return o
}

func (o MigrateOracleAzureDbPostgreSqlSyncTaskInputResponseOutput) ToMigrateOracleAzureDbPostgreSqlSyncTaskInputResponseOutputWithContext(ctx context.Context) MigrateOracleAzureDbPostgreSqlSyncTaskInputResponseOutput {
	return o
}

func (o MigrateOracleAzureDbPostgreSqlSyncTaskInputResponseOutput) ToMigrateOracleAzureDbPostgreSqlSyncTaskInputResponsePtrOutput() MigrateOracleAzureDbPostgreSqlSyncTaskInputResponsePtrOutput {
	return o.ToMigrateOracleAzureDbPostgreSqlSyncTaskInputResponsePtrOutputWithContext(context.Background())
}

func (o MigrateOracleAzureDbPostgreSqlSyncTaskInputResponseOutput) ToMigrateOracleAzureDbPostgreSqlSyncTaskInputResponsePtrOutputWithContext(ctx context.Context) MigrateOracleAzureDbPostgreSqlSyncTaskInputResponsePtrOutput {
	return o.ApplyT(func(v MigrateOracleAzureDbPostgreSqlSyncTaskInputResponse) *MigrateOracleAzureDbPostgreSqlSyncTaskInputResponse {
		return &v
	}).(MigrateOracleAzureDbPostgreSqlSyncTaskInputResponsePtrOutput)
}

// Databases to migrate
func (o MigrateOracleAzureDbPostgreSqlSyncTaskInputResponseOutput) SelectedDatabases() MigrateOracleAzureDbPostgreSqlSyncDatabaseInputResponseArrayOutput {
	return o.ApplyT(func(v MigrateOracleAzureDbPostgreSqlSyncTaskInputResponse) []MigrateOracleAzureDbPostgreSqlSyncDatabaseInputResponse {
		return v.SelectedDatabases
	}).(MigrateOracleAzureDbPostgreSqlSyncDatabaseInputResponseArrayOutput)
}

// Connection information for source Oracle
func (o MigrateOracleAzureDbPostgreSqlSyncTaskInputResponseOutput) SourceConnectionInfo() OracleConnectionInfoResponseOutput {
	return o.ApplyT(func(v MigrateOracleAzureDbPostgreSqlSyncTaskInputResponse) OracleConnectionInfoResponse {
		return v.SourceConnectionInfo
	}).(OracleConnectionInfoResponseOutput)
}

// Connection information for target Azure Database for PostgreSQL
func (o MigrateOracleAzureDbPostgreSqlSyncTaskInputResponseOutput) TargetConnectionInfo() PostgreSqlConnectionInfoResponseOutput {
	return o.ApplyT(func(v MigrateOracleAzureDbPostgreSqlSyncTaskInputResponse) PostgreSqlConnectionInfoResponse {
		return v.TargetConnectionInfo
	}).(PostgreSqlConnectionInfoResponseOutput)
}

type MigrateOracleAzureDbPostgreSqlSyncTaskInputResponsePtrOutput struct{ *pulumi.OutputState }

func (MigrateOracleAzureDbPostgreSqlSyncTaskInputResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MigrateOracleAzureDbPostgreSqlSyncTaskInputResponse)(nil)).Elem()
}

func (o MigrateOracleAzureDbPostgreSqlSyncTaskInputResponsePtrOutput) ToMigrateOracleAzureDbPostgreSqlSyncTaskInputResponsePtrOutput() MigrateOracleAzureDbPostgreSqlSyncTaskInputResponsePtrOutput {
	return o
}

func (o MigrateOracleAzureDbPostgreSqlSyncTaskInputResponsePtrOutput) ToMigrateOracleAzureDbPostgreSqlSyncTaskInputResponsePtrOutputWithContext(ctx context.Context) MigrateOracleAzureDbPostgreSqlSyncTaskInputResponsePtrOutput {
	return o
}

func (o MigrateOracleAzureDbPostgreSqlSyncTaskInputResponsePtrOutput) Elem() MigrateOracleAzureDbPostgreSqlSyncTaskInputResponseOutput {
	return o.ApplyT(func(v *MigrateOracleAzureDbPostgreSqlSyncTaskInputResponse) MigrateOracleAzureDbPostgreSqlSyncTaskInputResponse {
		return *v
	}).(MigrateOracleAzureDbPostgreSqlSyncTaskInputResponseOutput)
}

// Databases to migrate
func (o MigrateOracleAzureDbPostgreSqlSyncTaskInputResponsePtrOutput) SelectedDatabases() MigrateOracleAzureDbPostgreSqlSyncDatabaseInputResponseArrayOutput {
	return o.ApplyT(func(v *MigrateOracleAzureDbPostgreSqlSyncTaskInputResponse) []MigrateOracleAzureDbPostgreSqlSyncDatabaseInputResponse {
		if v == nil {
			return nil
		}
		return v.SelectedDatabases
	}).(MigrateOracleAzureDbPostgreSqlSyncDatabaseInputResponseArrayOutput)
}

// Connection information for source Oracle
func (o MigrateOracleAzureDbPostgreSqlSyncTaskInputResponsePtrOutput) SourceConnectionInfo() OracleConnectionInfoResponsePtrOutput {
	return o.ApplyT(func(v *MigrateOracleAzureDbPostgreSqlSyncTaskInputResponse) *OracleConnectionInfoResponse {
		if v == nil {
			return nil
		}
		return &v.SourceConnectionInfo
	}).(OracleConnectionInfoResponsePtrOutput)
}

// Connection information for target Azure Database for PostgreSQL
func (o MigrateOracleAzureDbPostgreSqlSyncTaskInputResponsePtrOutput) TargetConnectionInfo() PostgreSqlConnectionInfoResponsePtrOutput {
	return o.ApplyT(func(v *MigrateOracleAzureDbPostgreSqlSyncTaskInputResponse) *PostgreSqlConnectionInfoResponse {
		if v == nil {
			return nil
		}
		return &v.TargetConnectionInfo
	}).(PostgreSqlConnectionInfoResponsePtrOutput)
}

type MigrateOracleAzureDbPostgreSqlSyncTaskOutputDatabaseErrorResponse struct {
	// Error message
	ErrorMessage *string `pulumi:"errorMessage"`
	// List of error events.
	Events []SyncMigrationDatabaseErrorEventResponse `pulumi:"events"`
	// Result identifier
	Id string `pulumi:"id"`
	// Result type
	ResultType string `pulumi:"resultType"`
}

type MigrateOracleAzureDbPostgreSqlSyncTaskOutputDatabaseErrorResponseOutput struct{ *pulumi.OutputState }

func (MigrateOracleAzureDbPostgreSqlSyncTaskOutputDatabaseErrorResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MigrateOracleAzureDbPostgreSqlSyncTaskOutputDatabaseErrorResponse)(nil)).Elem()
}

func (o MigrateOracleAzureDbPostgreSqlSyncTaskOutputDatabaseErrorResponseOutput) ToMigrateOracleAzureDbPostgreSqlSyncTaskOutputDatabaseErrorResponseOutput() MigrateOracleAzureDbPostgreSqlSyncTaskOutputDatabaseErrorResponseOutput {
	return o
}

func (o MigrateOracleAzureDbPostgreSqlSyncTaskOutputDatabaseErrorResponseOutput) ToMigrateOracleAzureDbPostgreSqlSyncTaskOutputDatabaseErrorResponseOutputWithContext(ctx context.Context) MigrateOracleAzureDbPostgreSqlSyncTaskOutputDatabaseErrorResponseOutput {
	return o
}

// Error message
func (o MigrateOracleAzureDbPostgreSqlSyncTaskOutputDatabaseErrorResponseOutput) ErrorMessage() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MigrateOracleAzureDbPostgreSqlSyncTaskOutputDatabaseErrorResponse) *string {
		return v.ErrorMessage
	}).(pulumi.StringPtrOutput)
}

// List of error events.
func (o MigrateOracleAzureDbPostgreSqlSyncTaskOutputDatabaseErrorResponseOutput) Events() SyncMigrationDatabaseErrorEventResponseArrayOutput {
	return o.ApplyT(func(v MigrateOracleAzureDbPostgreSqlSyncTaskOutputDatabaseErrorResponse) []SyncMigrationDatabaseErrorEventResponse {
		return v.Events
	}).(SyncMigrationDatabaseErrorEventResponseArrayOutput)
}

// Result identifier
func (o MigrateOracleAzureDbPostgreSqlSyncTaskOutputDatabaseErrorResponseOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateOracleAzureDbPostgreSqlSyncTaskOutputDatabaseErrorResponse) string { return v.Id }).(pulumi.StringOutput)
}

// Result type
func (o MigrateOracleAzureDbPostgreSqlSyncTaskOutputDatabaseErrorResponseOutput) ResultType() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateOracleAzureDbPostgreSqlSyncTaskOutputDatabaseErrorResponse) string { return v.ResultType }).(pulumi.StringOutput)
}

type MigrateOracleAzureDbPostgreSqlSyncTaskOutputDatabaseLevelResponse struct {
	// Number of applied changes
	AppliedChanges int `pulumi:"appliedChanges"`
	// Number of cdc deletes
	CdcDeleteCounter int `pulumi:"cdcDeleteCounter"`
	// Number of cdc inserts
	CdcInsertCounter int `pulumi:"cdcInsertCounter"`
	// Number of cdc updates
	CdcUpdateCounter int `pulumi:"cdcUpdateCounter"`
	// Name of the database
	DatabaseName string `pulumi:"databaseName"`
	// Migration end time
	EndedOn string `pulumi:"endedOn"`
	// Number of tables completed in full load
	FullLoadCompletedTables int `pulumi:"fullLoadCompletedTables"`
	// Number of tables errored in full load
	FullLoadErroredTables int `pulumi:"fullLoadErroredTables"`
	// Number of tables loading in full load
	FullLoadLoadingTables int `pulumi:"fullLoadLoadingTables"`
	// Number of tables queued in full load
	FullLoadQueuedTables int `pulumi:"fullLoadQueuedTables"`
	// Result identifier
	Id string `pulumi:"id"`
	// Number of incoming changes
	IncomingChanges int `pulumi:"incomingChanges"`
	// Indicates if initial load (full load) has been completed
	InitializationCompleted bool `pulumi:"initializationCompleted"`
	// CDC apply latency
	Latency int `pulumi:"latency"`
	// Migration state that this database is in
	MigrationState string `pulumi:"migrationState"`
	// Result type
	ResultType string `pulumi:"resultType"`
	// Migration start time
	StartedOn string `pulumi:"startedOn"`
}

type MigrateOracleAzureDbPostgreSqlSyncTaskOutputDatabaseLevelResponseOutput struct{ *pulumi.OutputState }

func (MigrateOracleAzureDbPostgreSqlSyncTaskOutputDatabaseLevelResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MigrateOracleAzureDbPostgreSqlSyncTaskOutputDatabaseLevelResponse)(nil)).Elem()
}

func (o MigrateOracleAzureDbPostgreSqlSyncTaskOutputDatabaseLevelResponseOutput) ToMigrateOracleAzureDbPostgreSqlSyncTaskOutputDatabaseLevelResponseOutput() MigrateOracleAzureDbPostgreSqlSyncTaskOutputDatabaseLevelResponseOutput {
	return o
}

func (o MigrateOracleAzureDbPostgreSqlSyncTaskOutputDatabaseLevelResponseOutput) ToMigrateOracleAzureDbPostgreSqlSyncTaskOutputDatabaseLevelResponseOutputWithContext(ctx context.Context) MigrateOracleAzureDbPostgreSqlSyncTaskOutputDatabaseLevelResponseOutput {
	return o
}

// Number of applied changes
func (o MigrateOracleAzureDbPostgreSqlSyncTaskOutputDatabaseLevelResponseOutput) AppliedChanges() pulumi.IntOutput {
	return o.ApplyT(func(v MigrateOracleAzureDbPostgreSqlSyncTaskOutputDatabaseLevelResponse) int { return v.AppliedChanges }).(pulumi.IntOutput)
}

// Number of cdc deletes
func (o MigrateOracleAzureDbPostgreSqlSyncTaskOutputDatabaseLevelResponseOutput) CdcDeleteCounter() pulumi.IntOutput {
	return o.ApplyT(func(v MigrateOracleAzureDbPostgreSqlSyncTaskOutputDatabaseLevelResponse) int {
		return v.CdcDeleteCounter
	}).(pulumi.IntOutput)
}

// Number of cdc inserts
func (o MigrateOracleAzureDbPostgreSqlSyncTaskOutputDatabaseLevelResponseOutput) CdcInsertCounter() pulumi.IntOutput {
	return o.ApplyT(func(v MigrateOracleAzureDbPostgreSqlSyncTaskOutputDatabaseLevelResponse) int {
		return v.CdcInsertCounter
	}).(pulumi.IntOutput)
}

// Number of cdc updates
func (o MigrateOracleAzureDbPostgreSqlSyncTaskOutputDatabaseLevelResponseOutput) CdcUpdateCounter() pulumi.IntOutput {
	return o.ApplyT(func(v MigrateOracleAzureDbPostgreSqlSyncTaskOutputDatabaseLevelResponse) int {
		return v.CdcUpdateCounter
	}).(pulumi.IntOutput)
}

// Name of the database
func (o MigrateOracleAzureDbPostgreSqlSyncTaskOutputDatabaseLevelResponseOutput) DatabaseName() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateOracleAzureDbPostgreSqlSyncTaskOutputDatabaseLevelResponse) string {
		return v.DatabaseName
	}).(pulumi.StringOutput)
}

// Migration end time
func (o MigrateOracleAzureDbPostgreSqlSyncTaskOutputDatabaseLevelResponseOutput) EndedOn() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateOracleAzureDbPostgreSqlSyncTaskOutputDatabaseLevelResponse) string { return v.EndedOn }).(pulumi.StringOutput)
}

// Number of tables completed in full load
func (o MigrateOracleAzureDbPostgreSqlSyncTaskOutputDatabaseLevelResponseOutput) FullLoadCompletedTables() pulumi.IntOutput {
	return o.ApplyT(func(v MigrateOracleAzureDbPostgreSqlSyncTaskOutputDatabaseLevelResponse) int {
		return v.FullLoadCompletedTables
	}).(pulumi.IntOutput)
}

// Number of tables errored in full load
func (o MigrateOracleAzureDbPostgreSqlSyncTaskOutputDatabaseLevelResponseOutput) FullLoadErroredTables() pulumi.IntOutput {
	return o.ApplyT(func(v MigrateOracleAzureDbPostgreSqlSyncTaskOutputDatabaseLevelResponse) int {
		return v.FullLoadErroredTables
	}).(pulumi.IntOutput)
}

// Number of tables loading in full load
func (o MigrateOracleAzureDbPostgreSqlSyncTaskOutputDatabaseLevelResponseOutput) FullLoadLoadingTables() pulumi.IntOutput {
	return o.ApplyT(func(v MigrateOracleAzureDbPostgreSqlSyncTaskOutputDatabaseLevelResponse) int {
		return v.FullLoadLoadingTables
	}).(pulumi.IntOutput)
}

// Number of tables queued in full load
func (o MigrateOracleAzureDbPostgreSqlSyncTaskOutputDatabaseLevelResponseOutput) FullLoadQueuedTables() pulumi.IntOutput {
	return o.ApplyT(func(v MigrateOracleAzureDbPostgreSqlSyncTaskOutputDatabaseLevelResponse) int {
		return v.FullLoadQueuedTables
	}).(pulumi.IntOutput)
}

// Result identifier
func (o MigrateOracleAzureDbPostgreSqlSyncTaskOutputDatabaseLevelResponseOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateOracleAzureDbPostgreSqlSyncTaskOutputDatabaseLevelResponse) string { return v.Id }).(pulumi.StringOutput)
}

// Number of incoming changes
func (o MigrateOracleAzureDbPostgreSqlSyncTaskOutputDatabaseLevelResponseOutput) IncomingChanges() pulumi.IntOutput {
	return o.ApplyT(func(v MigrateOracleAzureDbPostgreSqlSyncTaskOutputDatabaseLevelResponse) int {
		return v.IncomingChanges
	}).(pulumi.IntOutput)
}

// Indicates if initial load (full load) has been completed
func (o MigrateOracleAzureDbPostgreSqlSyncTaskOutputDatabaseLevelResponseOutput) InitializationCompleted() pulumi.BoolOutput {
	return o.ApplyT(func(v MigrateOracleAzureDbPostgreSqlSyncTaskOutputDatabaseLevelResponse) bool {
		return v.InitializationCompleted
	}).(pulumi.BoolOutput)
}

// CDC apply latency
func (o MigrateOracleAzureDbPostgreSqlSyncTaskOutputDatabaseLevelResponseOutput) Latency() pulumi.IntOutput {
	return o.ApplyT(func(v MigrateOracleAzureDbPostgreSqlSyncTaskOutputDatabaseLevelResponse) int { return v.Latency }).(pulumi.IntOutput)
}

// Migration state that this database is in
func (o MigrateOracleAzureDbPostgreSqlSyncTaskOutputDatabaseLevelResponseOutput) MigrationState() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateOracleAzureDbPostgreSqlSyncTaskOutputDatabaseLevelResponse) string {
		return v.MigrationState
	}).(pulumi.StringOutput)
}

// Result type
func (o MigrateOracleAzureDbPostgreSqlSyncTaskOutputDatabaseLevelResponseOutput) ResultType() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateOracleAzureDbPostgreSqlSyncTaskOutputDatabaseLevelResponse) string { return v.ResultType }).(pulumi.StringOutput)
}

// Migration start time
func (o MigrateOracleAzureDbPostgreSqlSyncTaskOutputDatabaseLevelResponseOutput) StartedOn() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateOracleAzureDbPostgreSqlSyncTaskOutputDatabaseLevelResponse) string { return v.StartedOn }).(pulumi.StringOutput)
}

type MigrateOracleAzureDbPostgreSqlSyncTaskOutputErrorResponse struct {
	// Migration error
	Error ReportableExceptionResponse `pulumi:"error"`
	// Result identifier
	Id string `pulumi:"id"`
	// Result type
	ResultType string `pulumi:"resultType"`
}

type MigrateOracleAzureDbPostgreSqlSyncTaskOutputErrorResponseOutput struct{ *pulumi.OutputState }

func (MigrateOracleAzureDbPostgreSqlSyncTaskOutputErrorResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MigrateOracleAzureDbPostgreSqlSyncTaskOutputErrorResponse)(nil)).Elem()
}

func (o MigrateOracleAzureDbPostgreSqlSyncTaskOutputErrorResponseOutput) ToMigrateOracleAzureDbPostgreSqlSyncTaskOutputErrorResponseOutput() MigrateOracleAzureDbPostgreSqlSyncTaskOutputErrorResponseOutput {
	return o
}

func (o MigrateOracleAzureDbPostgreSqlSyncTaskOutputErrorResponseOutput) ToMigrateOracleAzureDbPostgreSqlSyncTaskOutputErrorResponseOutputWithContext(ctx context.Context) MigrateOracleAzureDbPostgreSqlSyncTaskOutputErrorResponseOutput {
	return o
}

// Migration error
func (o MigrateOracleAzureDbPostgreSqlSyncTaskOutputErrorResponseOutput) Error() ReportableExceptionResponseOutput {
	return o.ApplyT(func(v MigrateOracleAzureDbPostgreSqlSyncTaskOutputErrorResponse) ReportableExceptionResponse {
		return v.Error
	}).(ReportableExceptionResponseOutput)
}

// Result identifier
func (o MigrateOracleAzureDbPostgreSqlSyncTaskOutputErrorResponseOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateOracleAzureDbPostgreSqlSyncTaskOutputErrorResponse) string { return v.Id }).(pulumi.StringOutput)
}

// Result type
func (o MigrateOracleAzureDbPostgreSqlSyncTaskOutputErrorResponseOutput) ResultType() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateOracleAzureDbPostgreSqlSyncTaskOutputErrorResponse) string { return v.ResultType }).(pulumi.StringOutput)
}

type MigrateOracleAzureDbPostgreSqlSyncTaskOutputMigrationLevelResponse struct {
	// Migration end time
	EndedOn string `pulumi:"endedOn"`
	// Result identifier
	Id string `pulumi:"id"`
	// Result type
	ResultType string `pulumi:"resultType"`
	// Source server name
	SourceServer string `pulumi:"sourceServer"`
	// Source server version
	SourceServerVersion string `pulumi:"sourceServerVersion"`
	// Migration start time
	StartedOn string `pulumi:"startedOn"`
	// Target server name
	TargetServer string `pulumi:"targetServer"`
	// Target server version
	TargetServerVersion string `pulumi:"targetServerVersion"`
}

type MigrateOracleAzureDbPostgreSqlSyncTaskOutputMigrationLevelResponseOutput struct{ *pulumi.OutputState }

func (MigrateOracleAzureDbPostgreSqlSyncTaskOutputMigrationLevelResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MigrateOracleAzureDbPostgreSqlSyncTaskOutputMigrationLevelResponse)(nil)).Elem()
}

func (o MigrateOracleAzureDbPostgreSqlSyncTaskOutputMigrationLevelResponseOutput) ToMigrateOracleAzureDbPostgreSqlSyncTaskOutputMigrationLevelResponseOutput() MigrateOracleAzureDbPostgreSqlSyncTaskOutputMigrationLevelResponseOutput {
	return o
}

func (o MigrateOracleAzureDbPostgreSqlSyncTaskOutputMigrationLevelResponseOutput) ToMigrateOracleAzureDbPostgreSqlSyncTaskOutputMigrationLevelResponseOutputWithContext(ctx context.Context) MigrateOracleAzureDbPostgreSqlSyncTaskOutputMigrationLevelResponseOutput {
	return o
}

// Migration end time
func (o MigrateOracleAzureDbPostgreSqlSyncTaskOutputMigrationLevelResponseOutput) EndedOn() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateOracleAzureDbPostgreSqlSyncTaskOutputMigrationLevelResponse) string { return v.EndedOn }).(pulumi.StringOutput)
}

// Result identifier
func (o MigrateOracleAzureDbPostgreSqlSyncTaskOutputMigrationLevelResponseOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateOracleAzureDbPostgreSqlSyncTaskOutputMigrationLevelResponse) string { return v.Id }).(pulumi.StringOutput)
}

// Result type
func (o MigrateOracleAzureDbPostgreSqlSyncTaskOutputMigrationLevelResponseOutput) ResultType() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateOracleAzureDbPostgreSqlSyncTaskOutputMigrationLevelResponse) string { return v.ResultType }).(pulumi.StringOutput)
}

// Source server name
func (o MigrateOracleAzureDbPostgreSqlSyncTaskOutputMigrationLevelResponseOutput) SourceServer() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateOracleAzureDbPostgreSqlSyncTaskOutputMigrationLevelResponse) string {
		return v.SourceServer
	}).(pulumi.StringOutput)
}

// Source server version
func (o MigrateOracleAzureDbPostgreSqlSyncTaskOutputMigrationLevelResponseOutput) SourceServerVersion() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateOracleAzureDbPostgreSqlSyncTaskOutputMigrationLevelResponse) string {
		return v.SourceServerVersion
	}).(pulumi.StringOutput)
}

// Migration start time
func (o MigrateOracleAzureDbPostgreSqlSyncTaskOutputMigrationLevelResponseOutput) StartedOn() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateOracleAzureDbPostgreSqlSyncTaskOutputMigrationLevelResponse) string { return v.StartedOn }).(pulumi.StringOutput)
}

// Target server name
func (o MigrateOracleAzureDbPostgreSqlSyncTaskOutputMigrationLevelResponseOutput) TargetServer() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateOracleAzureDbPostgreSqlSyncTaskOutputMigrationLevelResponse) string {
		return v.TargetServer
	}).(pulumi.StringOutput)
}

// Target server version
func (o MigrateOracleAzureDbPostgreSqlSyncTaskOutputMigrationLevelResponseOutput) TargetServerVersion() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateOracleAzureDbPostgreSqlSyncTaskOutputMigrationLevelResponse) string {
		return v.TargetServerVersion
	}).(pulumi.StringOutput)
}

type MigrateOracleAzureDbPostgreSqlSyncTaskOutputTableLevelResponse struct {
	// Number of applied deletes
	CdcDeleteCounter int `pulumi:"cdcDeleteCounter"`
	// Number of applied inserts
	CdcInsertCounter int `pulumi:"cdcInsertCounter"`
	// Number of applied updates
	CdcUpdateCounter int `pulumi:"cdcUpdateCounter"`
	// Number of data errors occurred
	DataErrorsCounter int `pulumi:"dataErrorsCounter"`
	// Name of the database
	DatabaseName string `pulumi:"databaseName"`
	// Full load end time
	FullLoadEndedOn string `pulumi:"fullLoadEndedOn"`
	// Estimate to finish full load
	FullLoadEstFinishTime string `pulumi:"fullLoadEstFinishTime"`
	// Full load start time
	FullLoadStartedOn string `pulumi:"fullLoadStartedOn"`
	// Number of rows applied in full load
	FullLoadTotalRows int `pulumi:"fullLoadTotalRows"`
	// Result identifier
	Id string `pulumi:"id"`
	// Last modified time on target
	LastModifiedTime string `pulumi:"lastModifiedTime"`
	// Result type
	ResultType string `pulumi:"resultType"`
	// Current state of the table migration
	State string `pulumi:"state"`
	// Name of the table
	TableName string `pulumi:"tableName"`
	// Total number of applied changes
	TotalChangesApplied int `pulumi:"totalChangesApplied"`
}

type MigrateOracleAzureDbPostgreSqlSyncTaskOutputTableLevelResponseOutput struct{ *pulumi.OutputState }

func (MigrateOracleAzureDbPostgreSqlSyncTaskOutputTableLevelResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MigrateOracleAzureDbPostgreSqlSyncTaskOutputTableLevelResponse)(nil)).Elem()
}

func (o MigrateOracleAzureDbPostgreSqlSyncTaskOutputTableLevelResponseOutput) ToMigrateOracleAzureDbPostgreSqlSyncTaskOutputTableLevelResponseOutput() MigrateOracleAzureDbPostgreSqlSyncTaskOutputTableLevelResponseOutput {
	return o
}

func (o MigrateOracleAzureDbPostgreSqlSyncTaskOutputTableLevelResponseOutput) ToMigrateOracleAzureDbPostgreSqlSyncTaskOutputTableLevelResponseOutputWithContext(ctx context.Context) MigrateOracleAzureDbPostgreSqlSyncTaskOutputTableLevelResponseOutput {
	return o
}

// Number of applied deletes
func (o MigrateOracleAzureDbPostgreSqlSyncTaskOutputTableLevelResponseOutput) CdcDeleteCounter() pulumi.IntOutput {
	return o.ApplyT(func(v MigrateOracleAzureDbPostgreSqlSyncTaskOutputTableLevelResponse) int { return v.CdcDeleteCounter }).(pulumi.IntOutput)
}

// Number of applied inserts
func (o MigrateOracleAzureDbPostgreSqlSyncTaskOutputTableLevelResponseOutput) CdcInsertCounter() pulumi.IntOutput {
	return o.ApplyT(func(v MigrateOracleAzureDbPostgreSqlSyncTaskOutputTableLevelResponse) int { return v.CdcInsertCounter }).(pulumi.IntOutput)
}

// Number of applied updates
func (o MigrateOracleAzureDbPostgreSqlSyncTaskOutputTableLevelResponseOutput) CdcUpdateCounter() pulumi.IntOutput {
	return o.ApplyT(func(v MigrateOracleAzureDbPostgreSqlSyncTaskOutputTableLevelResponse) int { return v.CdcUpdateCounter }).(pulumi.IntOutput)
}

// Number of data errors occurred
func (o MigrateOracleAzureDbPostgreSqlSyncTaskOutputTableLevelResponseOutput) DataErrorsCounter() pulumi.IntOutput {
	return o.ApplyT(func(v MigrateOracleAzureDbPostgreSqlSyncTaskOutputTableLevelResponse) int { return v.DataErrorsCounter }).(pulumi.IntOutput)
}

// Name of the database
func (o MigrateOracleAzureDbPostgreSqlSyncTaskOutputTableLevelResponseOutput) DatabaseName() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateOracleAzureDbPostgreSqlSyncTaskOutputTableLevelResponse) string { return v.DatabaseName }).(pulumi.StringOutput)
}

// Full load end time
func (o MigrateOracleAzureDbPostgreSqlSyncTaskOutputTableLevelResponseOutput) FullLoadEndedOn() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateOracleAzureDbPostgreSqlSyncTaskOutputTableLevelResponse) string {
		return v.FullLoadEndedOn
	}).(pulumi.StringOutput)
}

// Estimate to finish full load
func (o MigrateOracleAzureDbPostgreSqlSyncTaskOutputTableLevelResponseOutput) FullLoadEstFinishTime() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateOracleAzureDbPostgreSqlSyncTaskOutputTableLevelResponse) string {
		return v.FullLoadEstFinishTime
	}).(pulumi.StringOutput)
}

// Full load start time
func (o MigrateOracleAzureDbPostgreSqlSyncTaskOutputTableLevelResponseOutput) FullLoadStartedOn() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateOracleAzureDbPostgreSqlSyncTaskOutputTableLevelResponse) string {
		return v.FullLoadStartedOn
	}).(pulumi.StringOutput)
}

// Number of rows applied in full load
func (o MigrateOracleAzureDbPostgreSqlSyncTaskOutputTableLevelResponseOutput) FullLoadTotalRows() pulumi.IntOutput {
	return o.ApplyT(func(v MigrateOracleAzureDbPostgreSqlSyncTaskOutputTableLevelResponse) int { return v.FullLoadTotalRows }).(pulumi.IntOutput)
}

// Result identifier
func (o MigrateOracleAzureDbPostgreSqlSyncTaskOutputTableLevelResponseOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateOracleAzureDbPostgreSqlSyncTaskOutputTableLevelResponse) string { return v.Id }).(pulumi.StringOutput)
}

// Last modified time on target
func (o MigrateOracleAzureDbPostgreSqlSyncTaskOutputTableLevelResponseOutput) LastModifiedTime() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateOracleAzureDbPostgreSqlSyncTaskOutputTableLevelResponse) string {
		return v.LastModifiedTime
	}).(pulumi.StringOutput)
}

// Result type
func (o MigrateOracleAzureDbPostgreSqlSyncTaskOutputTableLevelResponseOutput) ResultType() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateOracleAzureDbPostgreSqlSyncTaskOutputTableLevelResponse) string { return v.ResultType }).(pulumi.StringOutput)
}

// Current state of the table migration
func (o MigrateOracleAzureDbPostgreSqlSyncTaskOutputTableLevelResponseOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateOracleAzureDbPostgreSqlSyncTaskOutputTableLevelResponse) string { return v.State }).(pulumi.StringOutput)
}

// Name of the table
func (o MigrateOracleAzureDbPostgreSqlSyncTaskOutputTableLevelResponseOutput) TableName() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateOracleAzureDbPostgreSqlSyncTaskOutputTableLevelResponse) string { return v.TableName }).(pulumi.StringOutput)
}

// Total number of applied changes
func (o MigrateOracleAzureDbPostgreSqlSyncTaskOutputTableLevelResponseOutput) TotalChangesApplied() pulumi.IntOutput {
	return o.ApplyT(func(v MigrateOracleAzureDbPostgreSqlSyncTaskOutputTableLevelResponse) int {
		return v.TotalChangesApplied
	}).(pulumi.IntOutput)
}

// Database specific information for PostgreSQL to Azure Database for PostgreSQL migration task inputs
type MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseInput struct {
	// Migration settings which tune the migration behavior
	MigrationSetting map[string]string `pulumi:"migrationSetting"`
	// Name of the database
	Name *string `pulumi:"name"`
	// Source settings to tune source endpoint migration behavior
	SourceSetting map[string]string `pulumi:"sourceSetting"`
	// Name of target database. Note: Target database will be truncated before starting migration.
	TargetDatabaseName *string `pulumi:"targetDatabaseName"`
	// Target settings to tune target endpoint migration behavior
	TargetSetting map[string]string `pulumi:"targetSetting"`
}

// MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseInputInput is an input type that accepts MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseInputArgs and MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseInputOutput values.
// You can construct a concrete instance of `MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseInputInput` via:
//
//          MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseInputArgs{...}
type MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseInputInput interface {
	pulumi.Input

	ToMigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseInputOutput() MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseInputOutput
	ToMigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseInputOutputWithContext(context.Context) MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseInputOutput
}

// Database specific information for PostgreSQL to Azure Database for PostgreSQL migration task inputs
type MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseInputArgs struct {
	// Migration settings which tune the migration behavior
	MigrationSetting pulumi.StringMapInput `pulumi:"migrationSetting"`
	// Name of the database
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Source settings to tune source endpoint migration behavior
	SourceSetting pulumi.StringMapInput `pulumi:"sourceSetting"`
	// Name of target database. Note: Target database will be truncated before starting migration.
	TargetDatabaseName pulumi.StringPtrInput `pulumi:"targetDatabaseName"`
	// Target settings to tune target endpoint migration behavior
	TargetSetting pulumi.StringMapInput `pulumi:"targetSetting"`
}

func (MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseInputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseInput)(nil)).Elem()
}

func (i MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseInputArgs) ToMigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseInputOutput() MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseInputOutput {
	return i.ToMigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseInputOutputWithContext(context.Background())
}

func (i MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseInputArgs) ToMigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseInputOutputWithContext(ctx context.Context) MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseInputOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseInputOutput)
}

// MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseInputArrayInput is an input type that accepts MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseInputArray and MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseInputArrayOutput values.
// You can construct a concrete instance of `MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseInputArrayInput` via:
//
//          MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseInputArray{ MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseInputArgs{...} }
type MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseInputArrayInput interface {
	pulumi.Input

	ToMigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseInputArrayOutput() MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseInputArrayOutput
	ToMigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseInputArrayOutputWithContext(context.Context) MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseInputArrayOutput
}

type MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseInputArray []MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseInputInput

func (MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseInputArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseInput)(nil)).Elem()
}

func (i MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseInputArray) ToMigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseInputArrayOutput() MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseInputArrayOutput {
	return i.ToMigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseInputArrayOutputWithContext(context.Background())
}

func (i MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseInputArray) ToMigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseInputArrayOutputWithContext(ctx context.Context) MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseInputArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseInputArrayOutput)
}

// Database specific information for PostgreSQL to Azure Database for PostgreSQL migration task inputs
type MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseInputResponse struct {
	// Migration settings which tune the migration behavior
	MigrationSetting map[string]string `pulumi:"migrationSetting"`
	// Name of the database
	Name *string `pulumi:"name"`
	// Source settings to tune source endpoint migration behavior
	SourceSetting map[string]string `pulumi:"sourceSetting"`
	// Name of target database. Note: Target database will be truncated before starting migration.
	TargetDatabaseName *string `pulumi:"targetDatabaseName"`
	// Target settings to tune target endpoint migration behavior
	TargetSetting map[string]string `pulumi:"targetSetting"`
}

// Database specific information for PostgreSQL to Azure Database for PostgreSQL migration task inputs
type MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseInputResponseOutput struct{ *pulumi.OutputState }

func (MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseInputResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseInputResponse)(nil)).Elem()
}

func (o MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseInputResponseOutput) ToMigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseInputResponseOutput() MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseInputResponseOutput {
	return o
}

func (o MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseInputResponseOutput) ToMigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseInputResponseOutputWithContext(ctx context.Context) MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseInputResponseOutput {
	return o
}

// Migration settings which tune the migration behavior
func (o MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseInputResponseOutput) MigrationSetting() pulumi.StringMapOutput {
	return o.ApplyT(func(v MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseInputResponse) map[string]string {
		return v.MigrationSetting
	}).(pulumi.StringMapOutput)
}

// Name of the database
func (o MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseInputResponseOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseInputResponse) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Source settings to tune source endpoint migration behavior
func (o MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseInputResponseOutput) SourceSetting() pulumi.StringMapOutput {
	return o.ApplyT(func(v MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseInputResponse) map[string]string {
		return v.SourceSetting
	}).(pulumi.StringMapOutput)
}

// Name of target database. Note: Target database will be truncated before starting migration.
func (o MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseInputResponseOutput) TargetDatabaseName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseInputResponse) *string {
		return v.TargetDatabaseName
	}).(pulumi.StringPtrOutput)
}

// Target settings to tune target endpoint migration behavior
func (o MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseInputResponseOutput) TargetSetting() pulumi.StringMapOutput {
	return o.ApplyT(func(v MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseInputResponse) map[string]string {
		return v.TargetSetting
	}).(pulumi.StringMapOutput)
}

type MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseInputResponseArrayOutput struct{ *pulumi.OutputState }

func (MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseInputResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseInputResponse)(nil)).Elem()
}

func (o MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseInputResponseArrayOutput) ToMigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseInputResponseArrayOutput() MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseInputResponseArrayOutput {
	return o
}

func (o MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseInputResponseArrayOutput) ToMigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseInputResponseArrayOutputWithContext(ctx context.Context) MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseInputResponseArrayOutput {
	return o
}

func (o MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseInputResponseArrayOutput) Index(i pulumi.IntInput) MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseInputResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseInputResponse {
		return vs[0].([]MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseInputResponse)[vs[1].(int)]
	}).(MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseInputResponseOutput)
}

// Input for the task that migrates PostgreSQL databases to Azure Database for PostgreSQL for online migrations
type MigratePostgreSqlAzureDbForPostgreSqlSyncTaskInput struct {
	// Databases to migrate
	SelectedDatabases []MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseInput `pulumi:"selectedDatabases"`
	// Connection information for source PostgreSQL
	SourceConnectionInfo PostgreSqlConnectionInfo `pulumi:"sourceConnectionInfo"`
	// Connection information for target Azure Database for PostgreSQL
	TargetConnectionInfo PostgreSqlConnectionInfo `pulumi:"targetConnectionInfo"`
}

// MigratePostgreSqlAzureDbForPostgreSqlSyncTaskInputInput is an input type that accepts MigratePostgreSqlAzureDbForPostgreSqlSyncTaskInputArgs and MigratePostgreSqlAzureDbForPostgreSqlSyncTaskInputOutput values.
// You can construct a concrete instance of `MigratePostgreSqlAzureDbForPostgreSqlSyncTaskInputInput` via:
//
//          MigratePostgreSqlAzureDbForPostgreSqlSyncTaskInputArgs{...}
type MigratePostgreSqlAzureDbForPostgreSqlSyncTaskInputInput interface {
	pulumi.Input

	ToMigratePostgreSqlAzureDbForPostgreSqlSyncTaskInputOutput() MigratePostgreSqlAzureDbForPostgreSqlSyncTaskInputOutput
	ToMigratePostgreSqlAzureDbForPostgreSqlSyncTaskInputOutputWithContext(context.Context) MigratePostgreSqlAzureDbForPostgreSqlSyncTaskInputOutput
}

// Input for the task that migrates PostgreSQL databases to Azure Database for PostgreSQL for online migrations
type MigratePostgreSqlAzureDbForPostgreSqlSyncTaskInputArgs struct {
	// Databases to migrate
	SelectedDatabases MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseInputArrayInput `pulumi:"selectedDatabases"`
	// Connection information for source PostgreSQL
	SourceConnectionInfo PostgreSqlConnectionInfoInput `pulumi:"sourceConnectionInfo"`
	// Connection information for target Azure Database for PostgreSQL
	TargetConnectionInfo PostgreSqlConnectionInfoInput `pulumi:"targetConnectionInfo"`
}

func (MigratePostgreSqlAzureDbForPostgreSqlSyncTaskInputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MigratePostgreSqlAzureDbForPostgreSqlSyncTaskInput)(nil)).Elem()
}

func (i MigratePostgreSqlAzureDbForPostgreSqlSyncTaskInputArgs) ToMigratePostgreSqlAzureDbForPostgreSqlSyncTaskInputOutput() MigratePostgreSqlAzureDbForPostgreSqlSyncTaskInputOutput {
	return i.ToMigratePostgreSqlAzureDbForPostgreSqlSyncTaskInputOutputWithContext(context.Background())
}

func (i MigratePostgreSqlAzureDbForPostgreSqlSyncTaskInputArgs) ToMigratePostgreSqlAzureDbForPostgreSqlSyncTaskInputOutputWithContext(ctx context.Context) MigratePostgreSqlAzureDbForPostgreSqlSyncTaskInputOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MigratePostgreSqlAzureDbForPostgreSqlSyncTaskInputOutput)
}

func (i MigratePostgreSqlAzureDbForPostgreSqlSyncTaskInputArgs) ToMigratePostgreSqlAzureDbForPostgreSqlSyncTaskInputPtrOutput() MigratePostgreSqlAzureDbForPostgreSqlSyncTaskInputPtrOutput {
	return i.ToMigratePostgreSqlAzureDbForPostgreSqlSyncTaskInputPtrOutputWithContext(context.Background())
}

func (i MigratePostgreSqlAzureDbForPostgreSqlSyncTaskInputArgs) ToMigratePostgreSqlAzureDbForPostgreSqlSyncTaskInputPtrOutputWithContext(ctx context.Context) MigratePostgreSqlAzureDbForPostgreSqlSyncTaskInputPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MigratePostgreSqlAzureDbForPostgreSqlSyncTaskInputOutput).ToMigratePostgreSqlAzureDbForPostgreSqlSyncTaskInputPtrOutputWithContext(ctx)
}

// MigratePostgreSqlAzureDbForPostgreSqlSyncTaskInputPtrInput is an input type that accepts MigratePostgreSqlAzureDbForPostgreSqlSyncTaskInputArgs, MigratePostgreSqlAzureDbForPostgreSqlSyncTaskInputPtr and MigratePostgreSqlAzureDbForPostgreSqlSyncTaskInputPtrOutput values.
// You can construct a concrete instance of `MigratePostgreSqlAzureDbForPostgreSqlSyncTaskInputPtrInput` via:
//
//          MigratePostgreSqlAzureDbForPostgreSqlSyncTaskInputArgs{...}
//
//  or:
//
//          nil
type MigratePostgreSqlAzureDbForPostgreSqlSyncTaskInputPtrInput interface {
	pulumi.Input

	ToMigratePostgreSqlAzureDbForPostgreSqlSyncTaskInputPtrOutput() MigratePostgreSqlAzureDbForPostgreSqlSyncTaskInputPtrOutput
	ToMigratePostgreSqlAzureDbForPostgreSqlSyncTaskInputPtrOutputWithContext(context.Context) MigratePostgreSqlAzureDbForPostgreSqlSyncTaskInputPtrOutput
}

type migratePostgreSqlAzureDbForPostgreSqlSyncTaskInputPtrType MigratePostgreSqlAzureDbForPostgreSqlSyncTaskInputArgs

func MigratePostgreSqlAzureDbForPostgreSqlSyncTaskInputPtr(v *MigratePostgreSqlAzureDbForPostgreSqlSyncTaskInputArgs) MigratePostgreSqlAzureDbForPostgreSqlSyncTaskInputPtrInput {
	return (*migratePostgreSqlAzureDbForPostgreSqlSyncTaskInputPtrType)(v)
}

func (*migratePostgreSqlAzureDbForPostgreSqlSyncTaskInputPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**MigratePostgreSqlAzureDbForPostgreSqlSyncTaskInput)(nil)).Elem()
}

func (i *migratePostgreSqlAzureDbForPostgreSqlSyncTaskInputPtrType) ToMigratePostgreSqlAzureDbForPostgreSqlSyncTaskInputPtrOutput() MigratePostgreSqlAzureDbForPostgreSqlSyncTaskInputPtrOutput {
	return i.ToMigratePostgreSqlAzureDbForPostgreSqlSyncTaskInputPtrOutputWithContext(context.Background())
}

func (i *migratePostgreSqlAzureDbForPostgreSqlSyncTaskInputPtrType) ToMigratePostgreSqlAzureDbForPostgreSqlSyncTaskInputPtrOutputWithContext(ctx context.Context) MigratePostgreSqlAzureDbForPostgreSqlSyncTaskInputPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MigratePostgreSqlAzureDbForPostgreSqlSyncTaskInputPtrOutput)
}

// Input for the task that migrates PostgreSQL databases to Azure Database for PostgreSQL for online migrations
type MigratePostgreSqlAzureDbForPostgreSqlSyncTaskInputResponse struct {
	// Databases to migrate
	SelectedDatabases []MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseInputResponse `pulumi:"selectedDatabases"`
	// Connection information for source PostgreSQL
	SourceConnectionInfo PostgreSqlConnectionInfoResponse `pulumi:"sourceConnectionInfo"`
	// Connection information for target Azure Database for PostgreSQL
	TargetConnectionInfo PostgreSqlConnectionInfoResponse `pulumi:"targetConnectionInfo"`
}

// Input for the task that migrates PostgreSQL databases to Azure Database for PostgreSQL for online migrations
type MigratePostgreSqlAzureDbForPostgreSqlSyncTaskInputResponseOutput struct{ *pulumi.OutputState }

func (MigratePostgreSqlAzureDbForPostgreSqlSyncTaskInputResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MigratePostgreSqlAzureDbForPostgreSqlSyncTaskInputResponse)(nil)).Elem()
}

func (o MigratePostgreSqlAzureDbForPostgreSqlSyncTaskInputResponseOutput) ToMigratePostgreSqlAzureDbForPostgreSqlSyncTaskInputResponseOutput() MigratePostgreSqlAzureDbForPostgreSqlSyncTaskInputResponseOutput {
	return o
}

func (o MigratePostgreSqlAzureDbForPostgreSqlSyncTaskInputResponseOutput) ToMigratePostgreSqlAzureDbForPostgreSqlSyncTaskInputResponseOutputWithContext(ctx context.Context) MigratePostgreSqlAzureDbForPostgreSqlSyncTaskInputResponseOutput {
	return o
}

func (o MigratePostgreSqlAzureDbForPostgreSqlSyncTaskInputResponseOutput) ToMigratePostgreSqlAzureDbForPostgreSqlSyncTaskInputResponsePtrOutput() MigratePostgreSqlAzureDbForPostgreSqlSyncTaskInputResponsePtrOutput {
	return o.ToMigratePostgreSqlAzureDbForPostgreSqlSyncTaskInputResponsePtrOutputWithContext(context.Background())
}

func (o MigratePostgreSqlAzureDbForPostgreSqlSyncTaskInputResponseOutput) ToMigratePostgreSqlAzureDbForPostgreSqlSyncTaskInputResponsePtrOutputWithContext(ctx context.Context) MigratePostgreSqlAzureDbForPostgreSqlSyncTaskInputResponsePtrOutput {
	return o.ApplyT(func(v MigratePostgreSqlAzureDbForPostgreSqlSyncTaskInputResponse) *MigratePostgreSqlAzureDbForPostgreSqlSyncTaskInputResponse {
		return &v
	}).(MigratePostgreSqlAzureDbForPostgreSqlSyncTaskInputResponsePtrOutput)
}

// Databases to migrate
func (o MigratePostgreSqlAzureDbForPostgreSqlSyncTaskInputResponseOutput) SelectedDatabases() MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseInputResponseArrayOutput {
	return o.ApplyT(func(v MigratePostgreSqlAzureDbForPostgreSqlSyncTaskInputResponse) []MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseInputResponse {
		return v.SelectedDatabases
	}).(MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseInputResponseArrayOutput)
}

// Connection information for source PostgreSQL
func (o MigratePostgreSqlAzureDbForPostgreSqlSyncTaskInputResponseOutput) SourceConnectionInfo() PostgreSqlConnectionInfoResponseOutput {
	return o.ApplyT(func(v MigratePostgreSqlAzureDbForPostgreSqlSyncTaskInputResponse) PostgreSqlConnectionInfoResponse {
		return v.SourceConnectionInfo
	}).(PostgreSqlConnectionInfoResponseOutput)
}

// Connection information for target Azure Database for PostgreSQL
func (o MigratePostgreSqlAzureDbForPostgreSqlSyncTaskInputResponseOutput) TargetConnectionInfo() PostgreSqlConnectionInfoResponseOutput {
	return o.ApplyT(func(v MigratePostgreSqlAzureDbForPostgreSqlSyncTaskInputResponse) PostgreSqlConnectionInfoResponse {
		return v.TargetConnectionInfo
	}).(PostgreSqlConnectionInfoResponseOutput)
}

type MigratePostgreSqlAzureDbForPostgreSqlSyncTaskInputResponsePtrOutput struct{ *pulumi.OutputState }

func (MigratePostgreSqlAzureDbForPostgreSqlSyncTaskInputResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MigratePostgreSqlAzureDbForPostgreSqlSyncTaskInputResponse)(nil)).Elem()
}

func (o MigratePostgreSqlAzureDbForPostgreSqlSyncTaskInputResponsePtrOutput) ToMigratePostgreSqlAzureDbForPostgreSqlSyncTaskInputResponsePtrOutput() MigratePostgreSqlAzureDbForPostgreSqlSyncTaskInputResponsePtrOutput {
	return o
}

func (o MigratePostgreSqlAzureDbForPostgreSqlSyncTaskInputResponsePtrOutput) ToMigratePostgreSqlAzureDbForPostgreSqlSyncTaskInputResponsePtrOutputWithContext(ctx context.Context) MigratePostgreSqlAzureDbForPostgreSqlSyncTaskInputResponsePtrOutput {
	return o
}

func (o MigratePostgreSqlAzureDbForPostgreSqlSyncTaskInputResponsePtrOutput) Elem() MigratePostgreSqlAzureDbForPostgreSqlSyncTaskInputResponseOutput {
	return o.ApplyT(func(v *MigratePostgreSqlAzureDbForPostgreSqlSyncTaskInputResponse) MigratePostgreSqlAzureDbForPostgreSqlSyncTaskInputResponse {
		return *v
	}).(MigratePostgreSqlAzureDbForPostgreSqlSyncTaskInputResponseOutput)
}

// Databases to migrate
func (o MigratePostgreSqlAzureDbForPostgreSqlSyncTaskInputResponsePtrOutput) SelectedDatabases() MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseInputResponseArrayOutput {
	return o.ApplyT(func(v *MigratePostgreSqlAzureDbForPostgreSqlSyncTaskInputResponse) []MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseInputResponse {
		if v == nil {
			return nil
		}
		return v.SelectedDatabases
	}).(MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseInputResponseArrayOutput)
}

// Connection information for source PostgreSQL
func (o MigratePostgreSqlAzureDbForPostgreSqlSyncTaskInputResponsePtrOutput) SourceConnectionInfo() PostgreSqlConnectionInfoResponsePtrOutput {
	return o.ApplyT(func(v *MigratePostgreSqlAzureDbForPostgreSqlSyncTaskInputResponse) *PostgreSqlConnectionInfoResponse {
		if v == nil {
			return nil
		}
		return &v.SourceConnectionInfo
	}).(PostgreSqlConnectionInfoResponsePtrOutput)
}

// Connection information for target Azure Database for PostgreSQL
func (o MigratePostgreSqlAzureDbForPostgreSqlSyncTaskInputResponsePtrOutput) TargetConnectionInfo() PostgreSqlConnectionInfoResponsePtrOutput {
	return o.ApplyT(func(v *MigratePostgreSqlAzureDbForPostgreSqlSyncTaskInputResponse) *PostgreSqlConnectionInfoResponse {
		if v == nil {
			return nil
		}
		return &v.TargetConnectionInfo
	}).(PostgreSqlConnectionInfoResponsePtrOutput)
}

type MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputDatabaseErrorResponse struct {
	// Error message
	ErrorMessage *string `pulumi:"errorMessage"`
	// List of error events.
	Events []SyncMigrationDatabaseErrorEventResponse `pulumi:"events"`
	// Result identifier
	Id string `pulumi:"id"`
	// Result type
	ResultType string `pulumi:"resultType"`
}

type MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputDatabaseErrorResponseOutput struct{ *pulumi.OutputState }

func (MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputDatabaseErrorResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputDatabaseErrorResponse)(nil)).Elem()
}

func (o MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputDatabaseErrorResponseOutput) ToMigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputDatabaseErrorResponseOutput() MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputDatabaseErrorResponseOutput {
	return o
}

func (o MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputDatabaseErrorResponseOutput) ToMigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputDatabaseErrorResponseOutputWithContext(ctx context.Context) MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputDatabaseErrorResponseOutput {
	return o
}

// Error message
func (o MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputDatabaseErrorResponseOutput) ErrorMessage() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputDatabaseErrorResponse) *string {
		return v.ErrorMessage
	}).(pulumi.StringPtrOutput)
}

// List of error events.
func (o MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputDatabaseErrorResponseOutput) Events() SyncMigrationDatabaseErrorEventResponseArrayOutput {
	return o.ApplyT(func(v MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputDatabaseErrorResponse) []SyncMigrationDatabaseErrorEventResponse {
		return v.Events
	}).(SyncMigrationDatabaseErrorEventResponseArrayOutput)
}

// Result identifier
func (o MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputDatabaseErrorResponseOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputDatabaseErrorResponse) string { return v.Id }).(pulumi.StringOutput)
}

// Result type
func (o MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputDatabaseErrorResponseOutput) ResultType() pulumi.StringOutput {
	return o.ApplyT(func(v MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputDatabaseErrorResponse) string {
		return v.ResultType
	}).(pulumi.StringOutput)
}

type MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputDatabaseLevelResponse struct {
	// Number of applied changes
	AppliedChanges int `pulumi:"appliedChanges"`
	// Number of cdc deletes
	CdcDeleteCounter int `pulumi:"cdcDeleteCounter"`
	// Number of cdc inserts
	CdcInsertCounter int `pulumi:"cdcInsertCounter"`
	// Number of cdc updates
	CdcUpdateCounter int `pulumi:"cdcUpdateCounter"`
	// Name of the database
	DatabaseName string `pulumi:"databaseName"`
	// Migration end time
	EndedOn string `pulumi:"endedOn"`
	// Number of tables completed in full load
	FullLoadCompletedTables int `pulumi:"fullLoadCompletedTables"`
	// Number of tables errored in full load
	FullLoadErroredTables int `pulumi:"fullLoadErroredTables"`
	// Number of tables loading in full load
	FullLoadLoadingTables int `pulumi:"fullLoadLoadingTables"`
	// Number of tables queued in full load
	FullLoadQueuedTables int `pulumi:"fullLoadQueuedTables"`
	// Result identifier
	Id string `pulumi:"id"`
	// Number of incoming changes
	IncomingChanges int `pulumi:"incomingChanges"`
	// Indicates if initial load (full load) has been completed
	InitializationCompleted bool `pulumi:"initializationCompleted"`
	// CDC apply latency
	Latency int `pulumi:"latency"`
	// Migration state that this database is in
	MigrationState string `pulumi:"migrationState"`
	// Result type
	ResultType string `pulumi:"resultType"`
	// Migration start time
	StartedOn string `pulumi:"startedOn"`
}

type MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputDatabaseLevelResponseOutput struct{ *pulumi.OutputState }

func (MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputDatabaseLevelResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputDatabaseLevelResponse)(nil)).Elem()
}

func (o MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputDatabaseLevelResponseOutput) ToMigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputDatabaseLevelResponseOutput() MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputDatabaseLevelResponseOutput {
	return o
}

func (o MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputDatabaseLevelResponseOutput) ToMigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputDatabaseLevelResponseOutputWithContext(ctx context.Context) MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputDatabaseLevelResponseOutput {
	return o
}

// Number of applied changes
func (o MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputDatabaseLevelResponseOutput) AppliedChanges() pulumi.IntOutput {
	return o.ApplyT(func(v MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputDatabaseLevelResponse) int {
		return v.AppliedChanges
	}).(pulumi.IntOutput)
}

// Number of cdc deletes
func (o MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputDatabaseLevelResponseOutput) CdcDeleteCounter() pulumi.IntOutput {
	return o.ApplyT(func(v MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputDatabaseLevelResponse) int {
		return v.CdcDeleteCounter
	}).(pulumi.IntOutput)
}

// Number of cdc inserts
func (o MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputDatabaseLevelResponseOutput) CdcInsertCounter() pulumi.IntOutput {
	return o.ApplyT(func(v MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputDatabaseLevelResponse) int {
		return v.CdcInsertCounter
	}).(pulumi.IntOutput)
}

// Number of cdc updates
func (o MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputDatabaseLevelResponseOutput) CdcUpdateCounter() pulumi.IntOutput {
	return o.ApplyT(func(v MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputDatabaseLevelResponse) int {
		return v.CdcUpdateCounter
	}).(pulumi.IntOutput)
}

// Name of the database
func (o MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputDatabaseLevelResponseOutput) DatabaseName() pulumi.StringOutput {
	return o.ApplyT(func(v MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputDatabaseLevelResponse) string {
		return v.DatabaseName
	}).(pulumi.StringOutput)
}

// Migration end time
func (o MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputDatabaseLevelResponseOutput) EndedOn() pulumi.StringOutput {
	return o.ApplyT(func(v MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputDatabaseLevelResponse) string {
		return v.EndedOn
	}).(pulumi.StringOutput)
}

// Number of tables completed in full load
func (o MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputDatabaseLevelResponseOutput) FullLoadCompletedTables() pulumi.IntOutput {
	return o.ApplyT(func(v MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputDatabaseLevelResponse) int {
		return v.FullLoadCompletedTables
	}).(pulumi.IntOutput)
}

// Number of tables errored in full load
func (o MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputDatabaseLevelResponseOutput) FullLoadErroredTables() pulumi.IntOutput {
	return o.ApplyT(func(v MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputDatabaseLevelResponse) int {
		return v.FullLoadErroredTables
	}).(pulumi.IntOutput)
}

// Number of tables loading in full load
func (o MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputDatabaseLevelResponseOutput) FullLoadLoadingTables() pulumi.IntOutput {
	return o.ApplyT(func(v MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputDatabaseLevelResponse) int {
		return v.FullLoadLoadingTables
	}).(pulumi.IntOutput)
}

// Number of tables queued in full load
func (o MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputDatabaseLevelResponseOutput) FullLoadQueuedTables() pulumi.IntOutput {
	return o.ApplyT(func(v MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputDatabaseLevelResponse) int {
		return v.FullLoadQueuedTables
	}).(pulumi.IntOutput)
}

// Result identifier
func (o MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputDatabaseLevelResponseOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputDatabaseLevelResponse) string { return v.Id }).(pulumi.StringOutput)
}

// Number of incoming changes
func (o MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputDatabaseLevelResponseOutput) IncomingChanges() pulumi.IntOutput {
	return o.ApplyT(func(v MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputDatabaseLevelResponse) int {
		return v.IncomingChanges
	}).(pulumi.IntOutput)
}

// Indicates if initial load (full load) has been completed
func (o MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputDatabaseLevelResponseOutput) InitializationCompleted() pulumi.BoolOutput {
	return o.ApplyT(func(v MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputDatabaseLevelResponse) bool {
		return v.InitializationCompleted
	}).(pulumi.BoolOutput)
}

// CDC apply latency
func (o MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputDatabaseLevelResponseOutput) Latency() pulumi.IntOutput {
	return o.ApplyT(func(v MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputDatabaseLevelResponse) int { return v.Latency }).(pulumi.IntOutput)
}

// Migration state that this database is in
func (o MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputDatabaseLevelResponseOutput) MigrationState() pulumi.StringOutput {
	return o.ApplyT(func(v MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputDatabaseLevelResponse) string {
		return v.MigrationState
	}).(pulumi.StringOutput)
}

// Result type
func (o MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputDatabaseLevelResponseOutput) ResultType() pulumi.StringOutput {
	return o.ApplyT(func(v MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputDatabaseLevelResponse) string {
		return v.ResultType
	}).(pulumi.StringOutput)
}

// Migration start time
func (o MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputDatabaseLevelResponseOutput) StartedOn() pulumi.StringOutput {
	return o.ApplyT(func(v MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputDatabaseLevelResponse) string {
		return v.StartedOn
	}).(pulumi.StringOutput)
}

type MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputErrorResponse struct {
	// Migration error
	Error ReportableExceptionResponse `pulumi:"error"`
	// Result identifier
	Id string `pulumi:"id"`
	// Result type
	ResultType string `pulumi:"resultType"`
}

type MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputErrorResponseOutput struct{ *pulumi.OutputState }

func (MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputErrorResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputErrorResponse)(nil)).Elem()
}

func (o MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputErrorResponseOutput) ToMigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputErrorResponseOutput() MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputErrorResponseOutput {
	return o
}

func (o MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputErrorResponseOutput) ToMigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputErrorResponseOutputWithContext(ctx context.Context) MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputErrorResponseOutput {
	return o
}

// Migration error
func (o MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputErrorResponseOutput) Error() ReportableExceptionResponseOutput {
	return o.ApplyT(func(v MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputErrorResponse) ReportableExceptionResponse {
		return v.Error
	}).(ReportableExceptionResponseOutput)
}

// Result identifier
func (o MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputErrorResponseOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputErrorResponse) string { return v.Id }).(pulumi.StringOutput)
}

// Result type
func (o MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputErrorResponseOutput) ResultType() pulumi.StringOutput {
	return o.ApplyT(func(v MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputErrorResponse) string { return v.ResultType }).(pulumi.StringOutput)
}

type MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputMigrationLevelResponse struct {
	// Migration end time
	EndedOn string `pulumi:"endedOn"`
	// Result identifier
	Id string `pulumi:"id"`
	// Result type
	ResultType string `pulumi:"resultType"`
	// Source server name
	SourceServer string `pulumi:"sourceServer"`
	// Source server type.
	SourceServerType string `pulumi:"sourceServerType"`
	// Source server version
	SourceServerVersion string `pulumi:"sourceServerVersion"`
	// Migration start time
	StartedOn string `pulumi:"startedOn"`
	// Migration status
	State string `pulumi:"state"`
	// Target server name
	TargetServer string `pulumi:"targetServer"`
	// Target server type.
	TargetServerType string `pulumi:"targetServerType"`
	// Target server version
	TargetServerVersion string `pulumi:"targetServerVersion"`
}

type MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputMigrationLevelResponseOutput struct{ *pulumi.OutputState }

func (MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputMigrationLevelResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputMigrationLevelResponse)(nil)).Elem()
}

func (o MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputMigrationLevelResponseOutput) ToMigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputMigrationLevelResponseOutput() MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputMigrationLevelResponseOutput {
	return o
}

func (o MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputMigrationLevelResponseOutput) ToMigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputMigrationLevelResponseOutputWithContext(ctx context.Context) MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputMigrationLevelResponseOutput {
	return o
}

// Migration end time
func (o MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputMigrationLevelResponseOutput) EndedOn() pulumi.StringOutput {
	return o.ApplyT(func(v MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputMigrationLevelResponse) string {
		return v.EndedOn
	}).(pulumi.StringOutput)
}

// Result identifier
func (o MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputMigrationLevelResponseOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputMigrationLevelResponse) string { return v.Id }).(pulumi.StringOutput)
}

// Result type
func (o MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputMigrationLevelResponseOutput) ResultType() pulumi.StringOutput {
	return o.ApplyT(func(v MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputMigrationLevelResponse) string {
		return v.ResultType
	}).(pulumi.StringOutput)
}

// Source server name
func (o MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputMigrationLevelResponseOutput) SourceServer() pulumi.StringOutput {
	return o.ApplyT(func(v MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputMigrationLevelResponse) string {
		return v.SourceServer
	}).(pulumi.StringOutput)
}

// Source server type.
func (o MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputMigrationLevelResponseOutput) SourceServerType() pulumi.StringOutput {
	return o.ApplyT(func(v MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputMigrationLevelResponse) string {
		return v.SourceServerType
	}).(pulumi.StringOutput)
}

// Source server version
func (o MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputMigrationLevelResponseOutput) SourceServerVersion() pulumi.StringOutput {
	return o.ApplyT(func(v MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputMigrationLevelResponse) string {
		return v.SourceServerVersion
	}).(pulumi.StringOutput)
}

// Migration start time
func (o MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputMigrationLevelResponseOutput) StartedOn() pulumi.StringOutput {
	return o.ApplyT(func(v MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputMigrationLevelResponse) string {
		return v.StartedOn
	}).(pulumi.StringOutput)
}

// Migration status
func (o MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputMigrationLevelResponseOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputMigrationLevelResponse) string {
		return v.State
	}).(pulumi.StringOutput)
}

// Target server name
func (o MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputMigrationLevelResponseOutput) TargetServer() pulumi.StringOutput {
	return o.ApplyT(func(v MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputMigrationLevelResponse) string {
		return v.TargetServer
	}).(pulumi.StringOutput)
}

// Target server type.
func (o MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputMigrationLevelResponseOutput) TargetServerType() pulumi.StringOutput {
	return o.ApplyT(func(v MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputMigrationLevelResponse) string {
		return v.TargetServerType
	}).(pulumi.StringOutput)
}

// Target server version
func (o MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputMigrationLevelResponseOutput) TargetServerVersion() pulumi.StringOutput {
	return o.ApplyT(func(v MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputMigrationLevelResponse) string {
		return v.TargetServerVersion
	}).(pulumi.StringOutput)
}

type MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputTableLevelResponse struct {
	// Number of applied deletes
	CdcDeleteCounter int `pulumi:"cdcDeleteCounter"`
	// Number of applied inserts
	CdcInsertCounter int `pulumi:"cdcInsertCounter"`
	// Number of applied updates
	CdcUpdateCounter int `pulumi:"cdcUpdateCounter"`
	// Number of data errors occurred
	DataErrorsCounter int `pulumi:"dataErrorsCounter"`
	// Name of the database
	DatabaseName string `pulumi:"databaseName"`
	// Full load end time
	FullLoadEndedOn string `pulumi:"fullLoadEndedOn"`
	// Estimate to finish full load
	FullLoadEstFinishTime string `pulumi:"fullLoadEstFinishTime"`
	// Full load start time
	FullLoadStartedOn string `pulumi:"fullLoadStartedOn"`
	// Number of rows applied in full load
	FullLoadTotalRows int `pulumi:"fullLoadTotalRows"`
	// Result identifier
	Id string `pulumi:"id"`
	// Last modified time on target
	LastModifiedTime string `pulumi:"lastModifiedTime"`
	// Result type
	ResultType string `pulumi:"resultType"`
	// Current state of the table migration
	State string `pulumi:"state"`
	// Name of the table
	TableName string `pulumi:"tableName"`
	// Total number of applied changes
	TotalChangesApplied int `pulumi:"totalChangesApplied"`
}

type MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputTableLevelResponseOutput struct{ *pulumi.OutputState }

func (MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputTableLevelResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputTableLevelResponse)(nil)).Elem()
}

func (o MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputTableLevelResponseOutput) ToMigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputTableLevelResponseOutput() MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputTableLevelResponseOutput {
	return o
}

func (o MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputTableLevelResponseOutput) ToMigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputTableLevelResponseOutputWithContext(ctx context.Context) MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputTableLevelResponseOutput {
	return o
}

// Number of applied deletes
func (o MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputTableLevelResponseOutput) CdcDeleteCounter() pulumi.IntOutput {
	return o.ApplyT(func(v MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputTableLevelResponse) int {
		return v.CdcDeleteCounter
	}).(pulumi.IntOutput)
}

// Number of applied inserts
func (o MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputTableLevelResponseOutput) CdcInsertCounter() pulumi.IntOutput {
	return o.ApplyT(func(v MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputTableLevelResponse) int {
		return v.CdcInsertCounter
	}).(pulumi.IntOutput)
}

// Number of applied updates
func (o MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputTableLevelResponseOutput) CdcUpdateCounter() pulumi.IntOutput {
	return o.ApplyT(func(v MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputTableLevelResponse) int {
		return v.CdcUpdateCounter
	}).(pulumi.IntOutput)
}

// Number of data errors occurred
func (o MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputTableLevelResponseOutput) DataErrorsCounter() pulumi.IntOutput {
	return o.ApplyT(func(v MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputTableLevelResponse) int {
		return v.DataErrorsCounter
	}).(pulumi.IntOutput)
}

// Name of the database
func (o MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputTableLevelResponseOutput) DatabaseName() pulumi.StringOutput {
	return o.ApplyT(func(v MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputTableLevelResponse) string {
		return v.DatabaseName
	}).(pulumi.StringOutput)
}

// Full load end time
func (o MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputTableLevelResponseOutput) FullLoadEndedOn() pulumi.StringOutput {
	return o.ApplyT(func(v MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputTableLevelResponse) string {
		return v.FullLoadEndedOn
	}).(pulumi.StringOutput)
}

// Estimate to finish full load
func (o MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputTableLevelResponseOutput) FullLoadEstFinishTime() pulumi.StringOutput {
	return o.ApplyT(func(v MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputTableLevelResponse) string {
		return v.FullLoadEstFinishTime
	}).(pulumi.StringOutput)
}

// Full load start time
func (o MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputTableLevelResponseOutput) FullLoadStartedOn() pulumi.StringOutput {
	return o.ApplyT(func(v MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputTableLevelResponse) string {
		return v.FullLoadStartedOn
	}).(pulumi.StringOutput)
}

// Number of rows applied in full load
func (o MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputTableLevelResponseOutput) FullLoadTotalRows() pulumi.IntOutput {
	return o.ApplyT(func(v MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputTableLevelResponse) int {
		return v.FullLoadTotalRows
	}).(pulumi.IntOutput)
}

// Result identifier
func (o MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputTableLevelResponseOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputTableLevelResponse) string { return v.Id }).(pulumi.StringOutput)
}

// Last modified time on target
func (o MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputTableLevelResponseOutput) LastModifiedTime() pulumi.StringOutput {
	return o.ApplyT(func(v MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputTableLevelResponse) string {
		return v.LastModifiedTime
	}).(pulumi.StringOutput)
}

// Result type
func (o MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputTableLevelResponseOutput) ResultType() pulumi.StringOutput {
	return o.ApplyT(func(v MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputTableLevelResponse) string {
		return v.ResultType
	}).(pulumi.StringOutput)
}

// Current state of the table migration
func (o MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputTableLevelResponseOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputTableLevelResponse) string { return v.State }).(pulumi.StringOutput)
}

// Name of the table
func (o MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputTableLevelResponseOutput) TableName() pulumi.StringOutput {
	return o.ApplyT(func(v MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputTableLevelResponse) string {
		return v.TableName
	}).(pulumi.StringOutput)
}

// Total number of applied changes
func (o MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputTableLevelResponseOutput) TotalChangesApplied() pulumi.IntOutput {
	return o.ApplyT(func(v MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputTableLevelResponse) int {
		return v.TotalChangesApplied
	}).(pulumi.IntOutput)
}

// Properties for the task that migrates PostgreSQL databases to Azure Database for PostgreSQL for online migrations
type MigratePostgreSqlAzureDbForPostgreSqlSyncTaskProperties struct {
	// Key value pairs of client data to attach meta data information to task
	ClientData map[string]string `pulumi:"clientData"`
	// Task input
	Input *MigratePostgreSqlAzureDbForPostgreSqlSyncTaskInput `pulumi:"input"`
	// Task type.
	TaskType string `pulumi:"taskType"`
}

// MigratePostgreSqlAzureDbForPostgreSqlSyncTaskPropertiesInput is an input type that accepts MigratePostgreSqlAzureDbForPostgreSqlSyncTaskPropertiesArgs and MigratePostgreSqlAzureDbForPostgreSqlSyncTaskPropertiesOutput values.
// You can construct a concrete instance of `MigratePostgreSqlAzureDbForPostgreSqlSyncTaskPropertiesInput` via:
//
//          MigratePostgreSqlAzureDbForPostgreSqlSyncTaskPropertiesArgs{...}
type MigratePostgreSqlAzureDbForPostgreSqlSyncTaskPropertiesInput interface {
	pulumi.Input

	ToMigratePostgreSqlAzureDbForPostgreSqlSyncTaskPropertiesOutput() MigratePostgreSqlAzureDbForPostgreSqlSyncTaskPropertiesOutput
	ToMigratePostgreSqlAzureDbForPostgreSqlSyncTaskPropertiesOutputWithContext(context.Context) MigratePostgreSqlAzureDbForPostgreSqlSyncTaskPropertiesOutput
}

// Properties for the task that migrates PostgreSQL databases to Azure Database for PostgreSQL for online migrations
type MigratePostgreSqlAzureDbForPostgreSqlSyncTaskPropertiesArgs struct {
	// Key value pairs of client data to attach meta data information to task
	ClientData pulumi.StringMapInput `pulumi:"clientData"`
	// Task input
	Input MigratePostgreSqlAzureDbForPostgreSqlSyncTaskInputPtrInput `pulumi:"input"`
	// Task type.
	TaskType pulumi.StringInput `pulumi:"taskType"`
}

func (MigratePostgreSqlAzureDbForPostgreSqlSyncTaskPropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MigratePostgreSqlAzureDbForPostgreSqlSyncTaskProperties)(nil)).Elem()
}

func (i MigratePostgreSqlAzureDbForPostgreSqlSyncTaskPropertiesArgs) ToMigratePostgreSqlAzureDbForPostgreSqlSyncTaskPropertiesOutput() MigratePostgreSqlAzureDbForPostgreSqlSyncTaskPropertiesOutput {
	return i.ToMigratePostgreSqlAzureDbForPostgreSqlSyncTaskPropertiesOutputWithContext(context.Background())
}

func (i MigratePostgreSqlAzureDbForPostgreSqlSyncTaskPropertiesArgs) ToMigratePostgreSqlAzureDbForPostgreSqlSyncTaskPropertiesOutputWithContext(ctx context.Context) MigratePostgreSqlAzureDbForPostgreSqlSyncTaskPropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MigratePostgreSqlAzureDbForPostgreSqlSyncTaskPropertiesOutput)
}

// Properties for the task that migrates PostgreSQL databases to Azure Database for PostgreSQL for online migrations
type MigratePostgreSqlAzureDbForPostgreSqlSyncTaskPropertiesResponse struct {
	// Key value pairs of client data to attach meta data information to task
	ClientData map[string]string `pulumi:"clientData"`
	// Array of command properties.
	Commands []interface{} `pulumi:"commands"`
	// Array of errors. This is ignored if submitted.
	Errors []ODataErrorResponse `pulumi:"errors"`
	// Task input
	Input *MigratePostgreSqlAzureDbForPostgreSqlSyncTaskInputResponse `pulumi:"input"`
	// Task output. This is ignored if submitted.
	Output []interface{} `pulumi:"output"`
	// The state of the task. This is ignored if submitted.
	State string `pulumi:"state"`
	// Task type.
	TaskType string `pulumi:"taskType"`
}

// Properties for the task that migrates PostgreSQL databases to Azure Database for PostgreSQL for online migrations
type MigratePostgreSqlAzureDbForPostgreSqlSyncTaskPropertiesResponseOutput struct{ *pulumi.OutputState }

func (MigratePostgreSqlAzureDbForPostgreSqlSyncTaskPropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MigratePostgreSqlAzureDbForPostgreSqlSyncTaskPropertiesResponse)(nil)).Elem()
}

func (o MigratePostgreSqlAzureDbForPostgreSqlSyncTaskPropertiesResponseOutput) ToMigratePostgreSqlAzureDbForPostgreSqlSyncTaskPropertiesResponseOutput() MigratePostgreSqlAzureDbForPostgreSqlSyncTaskPropertiesResponseOutput {
	return o
}

func (o MigratePostgreSqlAzureDbForPostgreSqlSyncTaskPropertiesResponseOutput) ToMigratePostgreSqlAzureDbForPostgreSqlSyncTaskPropertiesResponseOutputWithContext(ctx context.Context) MigratePostgreSqlAzureDbForPostgreSqlSyncTaskPropertiesResponseOutput {
	return o
}

// Key value pairs of client data to attach meta data information to task
func (o MigratePostgreSqlAzureDbForPostgreSqlSyncTaskPropertiesResponseOutput) ClientData() pulumi.StringMapOutput {
	return o.ApplyT(func(v MigratePostgreSqlAzureDbForPostgreSqlSyncTaskPropertiesResponse) map[string]string {
		return v.ClientData
	}).(pulumi.StringMapOutput)
}

// Array of command properties.
func (o MigratePostgreSqlAzureDbForPostgreSqlSyncTaskPropertiesResponseOutput) Commands() pulumi.ArrayOutput {
	return o.ApplyT(func(v MigratePostgreSqlAzureDbForPostgreSqlSyncTaskPropertiesResponse) []interface{} {
		return v.Commands
	}).(pulumi.ArrayOutput)
}

// Array of errors. This is ignored if submitted.
func (o MigratePostgreSqlAzureDbForPostgreSqlSyncTaskPropertiesResponseOutput) Errors() ODataErrorResponseArrayOutput {
	return o.ApplyT(func(v MigratePostgreSqlAzureDbForPostgreSqlSyncTaskPropertiesResponse) []ODataErrorResponse {
		return v.Errors
	}).(ODataErrorResponseArrayOutput)
}

// Task input
func (o MigratePostgreSqlAzureDbForPostgreSqlSyncTaskPropertiesResponseOutput) Input() MigratePostgreSqlAzureDbForPostgreSqlSyncTaskInputResponsePtrOutput {
	return o.ApplyT(func(v MigratePostgreSqlAzureDbForPostgreSqlSyncTaskPropertiesResponse) *MigratePostgreSqlAzureDbForPostgreSqlSyncTaskInputResponse {
		return v.Input
	}).(MigratePostgreSqlAzureDbForPostgreSqlSyncTaskInputResponsePtrOutput)
}

// Task output. This is ignored if submitted.
func (o MigratePostgreSqlAzureDbForPostgreSqlSyncTaskPropertiesResponseOutput) Output() pulumi.ArrayOutput {
	return o.ApplyT(func(v MigratePostgreSqlAzureDbForPostgreSqlSyncTaskPropertiesResponse) []interface{} { return v.Output }).(pulumi.ArrayOutput)
}

// The state of the task. This is ignored if submitted.
func (o MigratePostgreSqlAzureDbForPostgreSqlSyncTaskPropertiesResponseOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v MigratePostgreSqlAzureDbForPostgreSqlSyncTaskPropertiesResponse) string { return v.State }).(pulumi.StringOutput)
}

// Task type.
func (o MigratePostgreSqlAzureDbForPostgreSqlSyncTaskPropertiesResponseOutput) TaskType() pulumi.StringOutput {
	return o.ApplyT(func(v MigratePostgreSqlAzureDbForPostgreSqlSyncTaskPropertiesResponse) string { return v.TaskType }).(pulumi.StringOutput)
}

// Database specific information for SQL to Azure SQL DB migration task inputs
type MigrateSqlServerSqlDbDatabaseInput struct {
	// Whether to set database read only before migration
	MakeSourceDbReadOnly *bool `pulumi:"makeSourceDbReadOnly"`
	// Name of the database
	Name *string `pulumi:"name"`
	// Mapping of source to target tables
	TableMap map[string]string `pulumi:"tableMap"`
	// Name of target database. Note: Target database will be truncated before starting migration.
	TargetDatabaseName *string `pulumi:"targetDatabaseName"`
}

// MigrateSqlServerSqlDbDatabaseInputInput is an input type that accepts MigrateSqlServerSqlDbDatabaseInputArgs and MigrateSqlServerSqlDbDatabaseInputOutput values.
// You can construct a concrete instance of `MigrateSqlServerSqlDbDatabaseInputInput` via:
//
//          MigrateSqlServerSqlDbDatabaseInputArgs{...}
type MigrateSqlServerSqlDbDatabaseInputInput interface {
	pulumi.Input

	ToMigrateSqlServerSqlDbDatabaseInputOutput() MigrateSqlServerSqlDbDatabaseInputOutput
	ToMigrateSqlServerSqlDbDatabaseInputOutputWithContext(context.Context) MigrateSqlServerSqlDbDatabaseInputOutput
}

// Database specific information for SQL to Azure SQL DB migration task inputs
type MigrateSqlServerSqlDbDatabaseInputArgs struct {
	// Whether to set database read only before migration
	MakeSourceDbReadOnly pulumi.BoolPtrInput `pulumi:"makeSourceDbReadOnly"`
	// Name of the database
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Mapping of source to target tables
	TableMap pulumi.StringMapInput `pulumi:"tableMap"`
	// Name of target database. Note: Target database will be truncated before starting migration.
	TargetDatabaseName pulumi.StringPtrInput `pulumi:"targetDatabaseName"`
}

func (MigrateSqlServerSqlDbDatabaseInputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MigrateSqlServerSqlDbDatabaseInput)(nil)).Elem()
}

func (i MigrateSqlServerSqlDbDatabaseInputArgs) ToMigrateSqlServerSqlDbDatabaseInputOutput() MigrateSqlServerSqlDbDatabaseInputOutput {
	return i.ToMigrateSqlServerSqlDbDatabaseInputOutputWithContext(context.Background())
}

func (i MigrateSqlServerSqlDbDatabaseInputArgs) ToMigrateSqlServerSqlDbDatabaseInputOutputWithContext(ctx context.Context) MigrateSqlServerSqlDbDatabaseInputOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MigrateSqlServerSqlDbDatabaseInputOutput)
}

// MigrateSqlServerSqlDbDatabaseInputArrayInput is an input type that accepts MigrateSqlServerSqlDbDatabaseInputArray and MigrateSqlServerSqlDbDatabaseInputArrayOutput values.
// You can construct a concrete instance of `MigrateSqlServerSqlDbDatabaseInputArrayInput` via:
//
//          MigrateSqlServerSqlDbDatabaseInputArray{ MigrateSqlServerSqlDbDatabaseInputArgs{...} }
type MigrateSqlServerSqlDbDatabaseInputArrayInput interface {
	pulumi.Input

	ToMigrateSqlServerSqlDbDatabaseInputArrayOutput() MigrateSqlServerSqlDbDatabaseInputArrayOutput
	ToMigrateSqlServerSqlDbDatabaseInputArrayOutputWithContext(context.Context) MigrateSqlServerSqlDbDatabaseInputArrayOutput
}

type MigrateSqlServerSqlDbDatabaseInputArray []MigrateSqlServerSqlDbDatabaseInputInput

func (MigrateSqlServerSqlDbDatabaseInputArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MigrateSqlServerSqlDbDatabaseInput)(nil)).Elem()
}

func (i MigrateSqlServerSqlDbDatabaseInputArray) ToMigrateSqlServerSqlDbDatabaseInputArrayOutput() MigrateSqlServerSqlDbDatabaseInputArrayOutput {
	return i.ToMigrateSqlServerSqlDbDatabaseInputArrayOutputWithContext(context.Background())
}

func (i MigrateSqlServerSqlDbDatabaseInputArray) ToMigrateSqlServerSqlDbDatabaseInputArrayOutputWithContext(ctx context.Context) MigrateSqlServerSqlDbDatabaseInputArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MigrateSqlServerSqlDbDatabaseInputArrayOutput)
}

// Database specific information for SQL to Azure SQL DB migration task inputs
type MigrateSqlServerSqlDbDatabaseInputResponse struct {
	// Whether to set database read only before migration
	MakeSourceDbReadOnly *bool `pulumi:"makeSourceDbReadOnly"`
	// Name of the database
	Name *string `pulumi:"name"`
	// Mapping of source to target tables
	TableMap map[string]string `pulumi:"tableMap"`
	// Name of target database. Note: Target database will be truncated before starting migration.
	TargetDatabaseName *string `pulumi:"targetDatabaseName"`
}

// Database specific information for SQL to Azure SQL DB migration task inputs
type MigrateSqlServerSqlDbDatabaseInputResponseOutput struct{ *pulumi.OutputState }

func (MigrateSqlServerSqlDbDatabaseInputResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MigrateSqlServerSqlDbDatabaseInputResponse)(nil)).Elem()
}

func (o MigrateSqlServerSqlDbDatabaseInputResponseOutput) ToMigrateSqlServerSqlDbDatabaseInputResponseOutput() MigrateSqlServerSqlDbDatabaseInputResponseOutput {
	return o
}

func (o MigrateSqlServerSqlDbDatabaseInputResponseOutput) ToMigrateSqlServerSqlDbDatabaseInputResponseOutputWithContext(ctx context.Context) MigrateSqlServerSqlDbDatabaseInputResponseOutput {
	return o
}

// Whether to set database read only before migration
func (o MigrateSqlServerSqlDbDatabaseInputResponseOutput) MakeSourceDbReadOnly() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbDatabaseInputResponse) *bool { return v.MakeSourceDbReadOnly }).(pulumi.BoolPtrOutput)
}

// Name of the database
func (o MigrateSqlServerSqlDbDatabaseInputResponseOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbDatabaseInputResponse) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Mapping of source to target tables
func (o MigrateSqlServerSqlDbDatabaseInputResponseOutput) TableMap() pulumi.StringMapOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbDatabaseInputResponse) map[string]string { return v.TableMap }).(pulumi.StringMapOutput)
}

// Name of target database. Note: Target database will be truncated before starting migration.
func (o MigrateSqlServerSqlDbDatabaseInputResponseOutput) TargetDatabaseName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbDatabaseInputResponse) *string { return v.TargetDatabaseName }).(pulumi.StringPtrOutput)
}

type MigrateSqlServerSqlDbDatabaseInputResponseArrayOutput struct{ *pulumi.OutputState }

func (MigrateSqlServerSqlDbDatabaseInputResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MigrateSqlServerSqlDbDatabaseInputResponse)(nil)).Elem()
}

func (o MigrateSqlServerSqlDbDatabaseInputResponseArrayOutput) ToMigrateSqlServerSqlDbDatabaseInputResponseArrayOutput() MigrateSqlServerSqlDbDatabaseInputResponseArrayOutput {
	return o
}

func (o MigrateSqlServerSqlDbDatabaseInputResponseArrayOutput) ToMigrateSqlServerSqlDbDatabaseInputResponseArrayOutputWithContext(ctx context.Context) MigrateSqlServerSqlDbDatabaseInputResponseArrayOutput {
	return o
}

func (o MigrateSqlServerSqlDbDatabaseInputResponseArrayOutput) Index(i pulumi.IntInput) MigrateSqlServerSqlDbDatabaseInputResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) MigrateSqlServerSqlDbDatabaseInputResponse {
		return vs[0].([]MigrateSqlServerSqlDbDatabaseInputResponse)[vs[1].(int)]
	}).(MigrateSqlServerSqlDbDatabaseInputResponseOutput)
}

// Database specific information for SQL to Azure SQL DB sync migration task inputs
type MigrateSqlServerSqlDbSyncDatabaseInput struct {
	// Unique identifier for database
	Id *string `pulumi:"id"`
	// Migration settings which tune the migration behavior
	MigrationSetting map[string]string `pulumi:"migrationSetting"`
	// Name of database
	Name *string `pulumi:"name"`
	// Schema name to be migrated
	SchemaName *string `pulumi:"schemaName"`
	// Source settings to tune source endpoint migration behavior
	SourceSetting map[string]string `pulumi:"sourceSetting"`
	// Mapping of source to target tables
	TableMap map[string]string `pulumi:"tableMap"`
	// Target database name
	TargetDatabaseName *string `pulumi:"targetDatabaseName"`
	// Target settings to tune target endpoint migration behavior
	TargetSetting map[string]string `pulumi:"targetSetting"`
}

// MigrateSqlServerSqlDbSyncDatabaseInputInput is an input type that accepts MigrateSqlServerSqlDbSyncDatabaseInputArgs and MigrateSqlServerSqlDbSyncDatabaseInputOutput values.
// You can construct a concrete instance of `MigrateSqlServerSqlDbSyncDatabaseInputInput` via:
//
//          MigrateSqlServerSqlDbSyncDatabaseInputArgs{...}
type MigrateSqlServerSqlDbSyncDatabaseInputInput interface {
	pulumi.Input

	ToMigrateSqlServerSqlDbSyncDatabaseInputOutput() MigrateSqlServerSqlDbSyncDatabaseInputOutput
	ToMigrateSqlServerSqlDbSyncDatabaseInputOutputWithContext(context.Context) MigrateSqlServerSqlDbSyncDatabaseInputOutput
}

// Database specific information for SQL to Azure SQL DB sync migration task inputs
type MigrateSqlServerSqlDbSyncDatabaseInputArgs struct {
	// Unique identifier for database
	Id pulumi.StringPtrInput `pulumi:"id"`
	// Migration settings which tune the migration behavior
	MigrationSetting pulumi.StringMapInput `pulumi:"migrationSetting"`
	// Name of database
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Schema name to be migrated
	SchemaName pulumi.StringPtrInput `pulumi:"schemaName"`
	// Source settings to tune source endpoint migration behavior
	SourceSetting pulumi.StringMapInput `pulumi:"sourceSetting"`
	// Mapping of source to target tables
	TableMap pulumi.StringMapInput `pulumi:"tableMap"`
	// Target database name
	TargetDatabaseName pulumi.StringPtrInput `pulumi:"targetDatabaseName"`
	// Target settings to tune target endpoint migration behavior
	TargetSetting pulumi.StringMapInput `pulumi:"targetSetting"`
}

func (MigrateSqlServerSqlDbSyncDatabaseInputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MigrateSqlServerSqlDbSyncDatabaseInput)(nil)).Elem()
}

func (i MigrateSqlServerSqlDbSyncDatabaseInputArgs) ToMigrateSqlServerSqlDbSyncDatabaseInputOutput() MigrateSqlServerSqlDbSyncDatabaseInputOutput {
	return i.ToMigrateSqlServerSqlDbSyncDatabaseInputOutputWithContext(context.Background())
}

func (i MigrateSqlServerSqlDbSyncDatabaseInputArgs) ToMigrateSqlServerSqlDbSyncDatabaseInputOutputWithContext(ctx context.Context) MigrateSqlServerSqlDbSyncDatabaseInputOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MigrateSqlServerSqlDbSyncDatabaseInputOutput)
}

// MigrateSqlServerSqlDbSyncDatabaseInputArrayInput is an input type that accepts MigrateSqlServerSqlDbSyncDatabaseInputArray and MigrateSqlServerSqlDbSyncDatabaseInputArrayOutput values.
// You can construct a concrete instance of `MigrateSqlServerSqlDbSyncDatabaseInputArrayInput` via:
//
//          MigrateSqlServerSqlDbSyncDatabaseInputArray{ MigrateSqlServerSqlDbSyncDatabaseInputArgs{...} }
type MigrateSqlServerSqlDbSyncDatabaseInputArrayInput interface {
	pulumi.Input

	ToMigrateSqlServerSqlDbSyncDatabaseInputArrayOutput() MigrateSqlServerSqlDbSyncDatabaseInputArrayOutput
	ToMigrateSqlServerSqlDbSyncDatabaseInputArrayOutputWithContext(context.Context) MigrateSqlServerSqlDbSyncDatabaseInputArrayOutput
}

type MigrateSqlServerSqlDbSyncDatabaseInputArray []MigrateSqlServerSqlDbSyncDatabaseInputInput

func (MigrateSqlServerSqlDbSyncDatabaseInputArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MigrateSqlServerSqlDbSyncDatabaseInput)(nil)).Elem()
}

func (i MigrateSqlServerSqlDbSyncDatabaseInputArray) ToMigrateSqlServerSqlDbSyncDatabaseInputArrayOutput() MigrateSqlServerSqlDbSyncDatabaseInputArrayOutput {
	return i.ToMigrateSqlServerSqlDbSyncDatabaseInputArrayOutputWithContext(context.Background())
}

func (i MigrateSqlServerSqlDbSyncDatabaseInputArray) ToMigrateSqlServerSqlDbSyncDatabaseInputArrayOutputWithContext(ctx context.Context) MigrateSqlServerSqlDbSyncDatabaseInputArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MigrateSqlServerSqlDbSyncDatabaseInputArrayOutput)
}

// Database specific information for SQL to Azure SQL DB sync migration task inputs
type MigrateSqlServerSqlDbSyncDatabaseInputResponse struct {
	// Unique identifier for database
	Id *string `pulumi:"id"`
	// Migration settings which tune the migration behavior
	MigrationSetting map[string]string `pulumi:"migrationSetting"`
	// Name of database
	Name *string `pulumi:"name"`
	// Schema name to be migrated
	SchemaName *string `pulumi:"schemaName"`
	// Source settings to tune source endpoint migration behavior
	SourceSetting map[string]string `pulumi:"sourceSetting"`
	// Mapping of source to target tables
	TableMap map[string]string `pulumi:"tableMap"`
	// Target database name
	TargetDatabaseName *string `pulumi:"targetDatabaseName"`
	// Target settings to tune target endpoint migration behavior
	TargetSetting map[string]string `pulumi:"targetSetting"`
}

// Database specific information for SQL to Azure SQL DB sync migration task inputs
type MigrateSqlServerSqlDbSyncDatabaseInputResponseOutput struct{ *pulumi.OutputState }

func (MigrateSqlServerSqlDbSyncDatabaseInputResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MigrateSqlServerSqlDbSyncDatabaseInputResponse)(nil)).Elem()
}

func (o MigrateSqlServerSqlDbSyncDatabaseInputResponseOutput) ToMigrateSqlServerSqlDbSyncDatabaseInputResponseOutput() MigrateSqlServerSqlDbSyncDatabaseInputResponseOutput {
	return o
}

func (o MigrateSqlServerSqlDbSyncDatabaseInputResponseOutput) ToMigrateSqlServerSqlDbSyncDatabaseInputResponseOutputWithContext(ctx context.Context) MigrateSqlServerSqlDbSyncDatabaseInputResponseOutput {
	return o
}

// Unique identifier for database
func (o MigrateSqlServerSqlDbSyncDatabaseInputResponseOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbSyncDatabaseInputResponse) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// Migration settings which tune the migration behavior
func (o MigrateSqlServerSqlDbSyncDatabaseInputResponseOutput) MigrationSetting() pulumi.StringMapOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbSyncDatabaseInputResponse) map[string]string { return v.MigrationSetting }).(pulumi.StringMapOutput)
}

// Name of database
func (o MigrateSqlServerSqlDbSyncDatabaseInputResponseOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbSyncDatabaseInputResponse) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Schema name to be migrated
func (o MigrateSqlServerSqlDbSyncDatabaseInputResponseOutput) SchemaName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbSyncDatabaseInputResponse) *string { return v.SchemaName }).(pulumi.StringPtrOutput)
}

// Source settings to tune source endpoint migration behavior
func (o MigrateSqlServerSqlDbSyncDatabaseInputResponseOutput) SourceSetting() pulumi.StringMapOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbSyncDatabaseInputResponse) map[string]string { return v.SourceSetting }).(pulumi.StringMapOutput)
}

// Mapping of source to target tables
func (o MigrateSqlServerSqlDbSyncDatabaseInputResponseOutput) TableMap() pulumi.StringMapOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbSyncDatabaseInputResponse) map[string]string { return v.TableMap }).(pulumi.StringMapOutput)
}

// Target database name
func (o MigrateSqlServerSqlDbSyncDatabaseInputResponseOutput) TargetDatabaseName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbSyncDatabaseInputResponse) *string { return v.TargetDatabaseName }).(pulumi.StringPtrOutput)
}

// Target settings to tune target endpoint migration behavior
func (o MigrateSqlServerSqlDbSyncDatabaseInputResponseOutput) TargetSetting() pulumi.StringMapOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbSyncDatabaseInputResponse) map[string]string { return v.TargetSetting }).(pulumi.StringMapOutput)
}

type MigrateSqlServerSqlDbSyncDatabaseInputResponseArrayOutput struct{ *pulumi.OutputState }

func (MigrateSqlServerSqlDbSyncDatabaseInputResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MigrateSqlServerSqlDbSyncDatabaseInputResponse)(nil)).Elem()
}

func (o MigrateSqlServerSqlDbSyncDatabaseInputResponseArrayOutput) ToMigrateSqlServerSqlDbSyncDatabaseInputResponseArrayOutput() MigrateSqlServerSqlDbSyncDatabaseInputResponseArrayOutput {
	return o
}

func (o MigrateSqlServerSqlDbSyncDatabaseInputResponseArrayOutput) ToMigrateSqlServerSqlDbSyncDatabaseInputResponseArrayOutputWithContext(ctx context.Context) MigrateSqlServerSqlDbSyncDatabaseInputResponseArrayOutput {
	return o
}

func (o MigrateSqlServerSqlDbSyncDatabaseInputResponseArrayOutput) Index(i pulumi.IntInput) MigrateSqlServerSqlDbSyncDatabaseInputResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) MigrateSqlServerSqlDbSyncDatabaseInputResponse {
		return vs[0].([]MigrateSqlServerSqlDbSyncDatabaseInputResponse)[vs[1].(int)]
	}).(MigrateSqlServerSqlDbSyncDatabaseInputResponseOutput)
}

// Input for the task that migrates on-prem SQL Server databases to Azure SQL Database for online migrations
type MigrateSqlServerSqlDbSyncTaskInput struct {
	// Databases to migrate
	SelectedDatabases []MigrateSqlServerSqlDbSyncDatabaseInput `pulumi:"selectedDatabases"`
	// Information for connecting to source
	SourceConnectionInfo SqlConnectionInfo `pulumi:"sourceConnectionInfo"`
	// Information for connecting to target
	TargetConnectionInfo SqlConnectionInfo `pulumi:"targetConnectionInfo"`
	// Validation options
	ValidationOptions *MigrationValidationOptions `pulumi:"validationOptions"`
}

// MigrateSqlServerSqlDbSyncTaskInputInput is an input type that accepts MigrateSqlServerSqlDbSyncTaskInputArgs and MigrateSqlServerSqlDbSyncTaskInputOutput values.
// You can construct a concrete instance of `MigrateSqlServerSqlDbSyncTaskInputInput` via:
//
//          MigrateSqlServerSqlDbSyncTaskInputArgs{...}
type MigrateSqlServerSqlDbSyncTaskInputInput interface {
	pulumi.Input

	ToMigrateSqlServerSqlDbSyncTaskInputOutput() MigrateSqlServerSqlDbSyncTaskInputOutput
	ToMigrateSqlServerSqlDbSyncTaskInputOutputWithContext(context.Context) MigrateSqlServerSqlDbSyncTaskInputOutput
}

// Input for the task that migrates on-prem SQL Server databases to Azure SQL Database for online migrations
type MigrateSqlServerSqlDbSyncTaskInputArgs struct {
	// Databases to migrate
	SelectedDatabases MigrateSqlServerSqlDbSyncDatabaseInputArrayInput `pulumi:"selectedDatabases"`
	// Information for connecting to source
	SourceConnectionInfo SqlConnectionInfoInput `pulumi:"sourceConnectionInfo"`
	// Information for connecting to target
	TargetConnectionInfo SqlConnectionInfoInput `pulumi:"targetConnectionInfo"`
	// Validation options
	ValidationOptions MigrationValidationOptionsPtrInput `pulumi:"validationOptions"`
}

func (MigrateSqlServerSqlDbSyncTaskInputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MigrateSqlServerSqlDbSyncTaskInput)(nil)).Elem()
}

func (i MigrateSqlServerSqlDbSyncTaskInputArgs) ToMigrateSqlServerSqlDbSyncTaskInputOutput() MigrateSqlServerSqlDbSyncTaskInputOutput {
	return i.ToMigrateSqlServerSqlDbSyncTaskInputOutputWithContext(context.Background())
}

func (i MigrateSqlServerSqlDbSyncTaskInputArgs) ToMigrateSqlServerSqlDbSyncTaskInputOutputWithContext(ctx context.Context) MigrateSqlServerSqlDbSyncTaskInputOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MigrateSqlServerSqlDbSyncTaskInputOutput)
}

func (i MigrateSqlServerSqlDbSyncTaskInputArgs) ToMigrateSqlServerSqlDbSyncTaskInputPtrOutput() MigrateSqlServerSqlDbSyncTaskInputPtrOutput {
	return i.ToMigrateSqlServerSqlDbSyncTaskInputPtrOutputWithContext(context.Background())
}

func (i MigrateSqlServerSqlDbSyncTaskInputArgs) ToMigrateSqlServerSqlDbSyncTaskInputPtrOutputWithContext(ctx context.Context) MigrateSqlServerSqlDbSyncTaskInputPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MigrateSqlServerSqlDbSyncTaskInputOutput).ToMigrateSqlServerSqlDbSyncTaskInputPtrOutputWithContext(ctx)
}

// MigrateSqlServerSqlDbSyncTaskInputPtrInput is an input type that accepts MigrateSqlServerSqlDbSyncTaskInputArgs, MigrateSqlServerSqlDbSyncTaskInputPtr and MigrateSqlServerSqlDbSyncTaskInputPtrOutput values.
// You can construct a concrete instance of `MigrateSqlServerSqlDbSyncTaskInputPtrInput` via:
//
//          MigrateSqlServerSqlDbSyncTaskInputArgs{...}
//
//  or:
//
//          nil
type MigrateSqlServerSqlDbSyncTaskInputPtrInput interface {
	pulumi.Input

	ToMigrateSqlServerSqlDbSyncTaskInputPtrOutput() MigrateSqlServerSqlDbSyncTaskInputPtrOutput
	ToMigrateSqlServerSqlDbSyncTaskInputPtrOutputWithContext(context.Context) MigrateSqlServerSqlDbSyncTaskInputPtrOutput
}

type migrateSqlServerSqlDbSyncTaskInputPtrType MigrateSqlServerSqlDbSyncTaskInputArgs

func MigrateSqlServerSqlDbSyncTaskInputPtr(v *MigrateSqlServerSqlDbSyncTaskInputArgs) MigrateSqlServerSqlDbSyncTaskInputPtrInput {
	return (*migrateSqlServerSqlDbSyncTaskInputPtrType)(v)
}

func (*migrateSqlServerSqlDbSyncTaskInputPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**MigrateSqlServerSqlDbSyncTaskInput)(nil)).Elem()
}

func (i *migrateSqlServerSqlDbSyncTaskInputPtrType) ToMigrateSqlServerSqlDbSyncTaskInputPtrOutput() MigrateSqlServerSqlDbSyncTaskInputPtrOutput {
	return i.ToMigrateSqlServerSqlDbSyncTaskInputPtrOutputWithContext(context.Background())
}

func (i *migrateSqlServerSqlDbSyncTaskInputPtrType) ToMigrateSqlServerSqlDbSyncTaskInputPtrOutputWithContext(ctx context.Context) MigrateSqlServerSqlDbSyncTaskInputPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MigrateSqlServerSqlDbSyncTaskInputPtrOutput)
}

// Input for the task that migrates on-prem SQL Server databases to Azure SQL Database for online migrations
type MigrateSqlServerSqlDbSyncTaskInputResponse struct {
	// Databases to migrate
	SelectedDatabases []MigrateSqlServerSqlDbSyncDatabaseInputResponse `pulumi:"selectedDatabases"`
	// Information for connecting to source
	SourceConnectionInfo SqlConnectionInfoResponse `pulumi:"sourceConnectionInfo"`
	// Information for connecting to target
	TargetConnectionInfo SqlConnectionInfoResponse `pulumi:"targetConnectionInfo"`
	// Validation options
	ValidationOptions *MigrationValidationOptionsResponse `pulumi:"validationOptions"`
}

// Input for the task that migrates on-prem SQL Server databases to Azure SQL Database for online migrations
type MigrateSqlServerSqlDbSyncTaskInputResponseOutput struct{ *pulumi.OutputState }

func (MigrateSqlServerSqlDbSyncTaskInputResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MigrateSqlServerSqlDbSyncTaskInputResponse)(nil)).Elem()
}

func (o MigrateSqlServerSqlDbSyncTaskInputResponseOutput) ToMigrateSqlServerSqlDbSyncTaskInputResponseOutput() MigrateSqlServerSqlDbSyncTaskInputResponseOutput {
	return o
}

func (o MigrateSqlServerSqlDbSyncTaskInputResponseOutput) ToMigrateSqlServerSqlDbSyncTaskInputResponseOutputWithContext(ctx context.Context) MigrateSqlServerSqlDbSyncTaskInputResponseOutput {
	return o
}

func (o MigrateSqlServerSqlDbSyncTaskInputResponseOutput) ToMigrateSqlServerSqlDbSyncTaskInputResponsePtrOutput() MigrateSqlServerSqlDbSyncTaskInputResponsePtrOutput {
	return o.ToMigrateSqlServerSqlDbSyncTaskInputResponsePtrOutputWithContext(context.Background())
}

func (o MigrateSqlServerSqlDbSyncTaskInputResponseOutput) ToMigrateSqlServerSqlDbSyncTaskInputResponsePtrOutputWithContext(ctx context.Context) MigrateSqlServerSqlDbSyncTaskInputResponsePtrOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbSyncTaskInputResponse) *MigrateSqlServerSqlDbSyncTaskInputResponse {
		return &v
	}).(MigrateSqlServerSqlDbSyncTaskInputResponsePtrOutput)
}

// Databases to migrate
func (o MigrateSqlServerSqlDbSyncTaskInputResponseOutput) SelectedDatabases() MigrateSqlServerSqlDbSyncDatabaseInputResponseArrayOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbSyncTaskInputResponse) []MigrateSqlServerSqlDbSyncDatabaseInputResponse {
		return v.SelectedDatabases
	}).(MigrateSqlServerSqlDbSyncDatabaseInputResponseArrayOutput)
}

// Information for connecting to source
func (o MigrateSqlServerSqlDbSyncTaskInputResponseOutput) SourceConnectionInfo() SqlConnectionInfoResponseOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbSyncTaskInputResponse) SqlConnectionInfoResponse {
		return v.SourceConnectionInfo
	}).(SqlConnectionInfoResponseOutput)
}

// Information for connecting to target
func (o MigrateSqlServerSqlDbSyncTaskInputResponseOutput) TargetConnectionInfo() SqlConnectionInfoResponseOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbSyncTaskInputResponse) SqlConnectionInfoResponse {
		return v.TargetConnectionInfo
	}).(SqlConnectionInfoResponseOutput)
}

// Validation options
func (o MigrateSqlServerSqlDbSyncTaskInputResponseOutput) ValidationOptions() MigrationValidationOptionsResponsePtrOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbSyncTaskInputResponse) *MigrationValidationOptionsResponse {
		return v.ValidationOptions
	}).(MigrationValidationOptionsResponsePtrOutput)
}

type MigrateSqlServerSqlDbSyncTaskInputResponsePtrOutput struct{ *pulumi.OutputState }

func (MigrateSqlServerSqlDbSyncTaskInputResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MigrateSqlServerSqlDbSyncTaskInputResponse)(nil)).Elem()
}

func (o MigrateSqlServerSqlDbSyncTaskInputResponsePtrOutput) ToMigrateSqlServerSqlDbSyncTaskInputResponsePtrOutput() MigrateSqlServerSqlDbSyncTaskInputResponsePtrOutput {
	return o
}

func (o MigrateSqlServerSqlDbSyncTaskInputResponsePtrOutput) ToMigrateSqlServerSqlDbSyncTaskInputResponsePtrOutputWithContext(ctx context.Context) MigrateSqlServerSqlDbSyncTaskInputResponsePtrOutput {
	return o
}

func (o MigrateSqlServerSqlDbSyncTaskInputResponsePtrOutput) Elem() MigrateSqlServerSqlDbSyncTaskInputResponseOutput {
	return o.ApplyT(func(v *MigrateSqlServerSqlDbSyncTaskInputResponse) MigrateSqlServerSqlDbSyncTaskInputResponse {
		return *v
	}).(MigrateSqlServerSqlDbSyncTaskInputResponseOutput)
}

// Databases to migrate
func (o MigrateSqlServerSqlDbSyncTaskInputResponsePtrOutput) SelectedDatabases() MigrateSqlServerSqlDbSyncDatabaseInputResponseArrayOutput {
	return o.ApplyT(func(v *MigrateSqlServerSqlDbSyncTaskInputResponse) []MigrateSqlServerSqlDbSyncDatabaseInputResponse {
		if v == nil {
			return nil
		}
		return v.SelectedDatabases
	}).(MigrateSqlServerSqlDbSyncDatabaseInputResponseArrayOutput)
}

// Information for connecting to source
func (o MigrateSqlServerSqlDbSyncTaskInputResponsePtrOutput) SourceConnectionInfo() SqlConnectionInfoResponsePtrOutput {
	return o.ApplyT(func(v *MigrateSqlServerSqlDbSyncTaskInputResponse) *SqlConnectionInfoResponse {
		if v == nil {
			return nil
		}
		return &v.SourceConnectionInfo
	}).(SqlConnectionInfoResponsePtrOutput)
}

// Information for connecting to target
func (o MigrateSqlServerSqlDbSyncTaskInputResponsePtrOutput) TargetConnectionInfo() SqlConnectionInfoResponsePtrOutput {
	return o.ApplyT(func(v *MigrateSqlServerSqlDbSyncTaskInputResponse) *SqlConnectionInfoResponse {
		if v == nil {
			return nil
		}
		return &v.TargetConnectionInfo
	}).(SqlConnectionInfoResponsePtrOutput)
}

// Validation options
func (o MigrateSqlServerSqlDbSyncTaskInputResponsePtrOutput) ValidationOptions() MigrationValidationOptionsResponsePtrOutput {
	return o.ApplyT(func(v *MigrateSqlServerSqlDbSyncTaskInputResponse) *MigrationValidationOptionsResponse {
		if v == nil {
			return nil
		}
		return v.ValidationOptions
	}).(MigrationValidationOptionsResponsePtrOutput)
}

type MigrateSqlServerSqlDbSyncTaskOutputDatabaseErrorResponse struct {
	// Error message
	ErrorMessage *string `pulumi:"errorMessage"`
	// List of error events.
	Events []SyncMigrationDatabaseErrorEventResponse `pulumi:"events"`
	// Result identifier
	Id string `pulumi:"id"`
	// Result type
	ResultType string `pulumi:"resultType"`
}

type MigrateSqlServerSqlDbSyncTaskOutputDatabaseErrorResponseOutput struct{ *pulumi.OutputState }

func (MigrateSqlServerSqlDbSyncTaskOutputDatabaseErrorResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MigrateSqlServerSqlDbSyncTaskOutputDatabaseErrorResponse)(nil)).Elem()
}

func (o MigrateSqlServerSqlDbSyncTaskOutputDatabaseErrorResponseOutput) ToMigrateSqlServerSqlDbSyncTaskOutputDatabaseErrorResponseOutput() MigrateSqlServerSqlDbSyncTaskOutputDatabaseErrorResponseOutput {
	return o
}

func (o MigrateSqlServerSqlDbSyncTaskOutputDatabaseErrorResponseOutput) ToMigrateSqlServerSqlDbSyncTaskOutputDatabaseErrorResponseOutputWithContext(ctx context.Context) MigrateSqlServerSqlDbSyncTaskOutputDatabaseErrorResponseOutput {
	return o
}

// Error message
func (o MigrateSqlServerSqlDbSyncTaskOutputDatabaseErrorResponseOutput) ErrorMessage() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbSyncTaskOutputDatabaseErrorResponse) *string { return v.ErrorMessage }).(pulumi.StringPtrOutput)
}

// List of error events.
func (o MigrateSqlServerSqlDbSyncTaskOutputDatabaseErrorResponseOutput) Events() SyncMigrationDatabaseErrorEventResponseArrayOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbSyncTaskOutputDatabaseErrorResponse) []SyncMigrationDatabaseErrorEventResponse {
		return v.Events
	}).(SyncMigrationDatabaseErrorEventResponseArrayOutput)
}

// Result identifier
func (o MigrateSqlServerSqlDbSyncTaskOutputDatabaseErrorResponseOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbSyncTaskOutputDatabaseErrorResponse) string { return v.Id }).(pulumi.StringOutput)
}

// Result type
func (o MigrateSqlServerSqlDbSyncTaskOutputDatabaseErrorResponseOutput) ResultType() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbSyncTaskOutputDatabaseErrorResponse) string { return v.ResultType }).(pulumi.StringOutput)
}

type MigrateSqlServerSqlDbSyncTaskOutputDatabaseLevelResponse struct {
	// Number of applied changes
	AppliedChanges int `pulumi:"appliedChanges"`
	// Number of cdc deletes
	CdcDeleteCounter int `pulumi:"cdcDeleteCounter"`
	// Number of cdc inserts
	CdcInsertCounter int `pulumi:"cdcInsertCounter"`
	// Number of cdc updates
	CdcUpdateCounter int `pulumi:"cdcUpdateCounter"`
	// Name of the database
	DatabaseName string `pulumi:"databaseName"`
	// Migration end time
	EndedOn string `pulumi:"endedOn"`
	// Number of tables completed in full load
	FullLoadCompletedTables int `pulumi:"fullLoadCompletedTables"`
	// Number of tables errored in full load
	FullLoadErroredTables int `pulumi:"fullLoadErroredTables"`
	// Number of tables loading in full load
	FullLoadLoadingTables int `pulumi:"fullLoadLoadingTables"`
	// Number of tables queued in full load
	FullLoadQueuedTables int `pulumi:"fullLoadQueuedTables"`
	// Result identifier
	Id string `pulumi:"id"`
	// Number of incoming changes
	IncomingChanges int `pulumi:"incomingChanges"`
	// Indicates if initial load (full load) has been completed
	InitializationCompleted bool `pulumi:"initializationCompleted"`
	// CDC apply latency
	Latency int `pulumi:"latency"`
	// Migration state that this database is in
	MigrationState string `pulumi:"migrationState"`
	// Result type
	ResultType string `pulumi:"resultType"`
	// Migration start time
	StartedOn string `pulumi:"startedOn"`
}

type MigrateSqlServerSqlDbSyncTaskOutputDatabaseLevelResponseOutput struct{ *pulumi.OutputState }

func (MigrateSqlServerSqlDbSyncTaskOutputDatabaseLevelResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MigrateSqlServerSqlDbSyncTaskOutputDatabaseLevelResponse)(nil)).Elem()
}

func (o MigrateSqlServerSqlDbSyncTaskOutputDatabaseLevelResponseOutput) ToMigrateSqlServerSqlDbSyncTaskOutputDatabaseLevelResponseOutput() MigrateSqlServerSqlDbSyncTaskOutputDatabaseLevelResponseOutput {
	return o
}

func (o MigrateSqlServerSqlDbSyncTaskOutputDatabaseLevelResponseOutput) ToMigrateSqlServerSqlDbSyncTaskOutputDatabaseLevelResponseOutputWithContext(ctx context.Context) MigrateSqlServerSqlDbSyncTaskOutputDatabaseLevelResponseOutput {
	return o
}

// Number of applied changes
func (o MigrateSqlServerSqlDbSyncTaskOutputDatabaseLevelResponseOutput) AppliedChanges() pulumi.IntOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbSyncTaskOutputDatabaseLevelResponse) int { return v.AppliedChanges }).(pulumi.IntOutput)
}

// Number of cdc deletes
func (o MigrateSqlServerSqlDbSyncTaskOutputDatabaseLevelResponseOutput) CdcDeleteCounter() pulumi.IntOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbSyncTaskOutputDatabaseLevelResponse) int { return v.CdcDeleteCounter }).(pulumi.IntOutput)
}

// Number of cdc inserts
func (o MigrateSqlServerSqlDbSyncTaskOutputDatabaseLevelResponseOutput) CdcInsertCounter() pulumi.IntOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbSyncTaskOutputDatabaseLevelResponse) int { return v.CdcInsertCounter }).(pulumi.IntOutput)
}

// Number of cdc updates
func (o MigrateSqlServerSqlDbSyncTaskOutputDatabaseLevelResponseOutput) CdcUpdateCounter() pulumi.IntOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbSyncTaskOutputDatabaseLevelResponse) int { return v.CdcUpdateCounter }).(pulumi.IntOutput)
}

// Name of the database
func (o MigrateSqlServerSqlDbSyncTaskOutputDatabaseLevelResponseOutput) DatabaseName() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbSyncTaskOutputDatabaseLevelResponse) string { return v.DatabaseName }).(pulumi.StringOutput)
}

// Migration end time
func (o MigrateSqlServerSqlDbSyncTaskOutputDatabaseLevelResponseOutput) EndedOn() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbSyncTaskOutputDatabaseLevelResponse) string { return v.EndedOn }).(pulumi.StringOutput)
}

// Number of tables completed in full load
func (o MigrateSqlServerSqlDbSyncTaskOutputDatabaseLevelResponseOutput) FullLoadCompletedTables() pulumi.IntOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbSyncTaskOutputDatabaseLevelResponse) int { return v.FullLoadCompletedTables }).(pulumi.IntOutput)
}

// Number of tables errored in full load
func (o MigrateSqlServerSqlDbSyncTaskOutputDatabaseLevelResponseOutput) FullLoadErroredTables() pulumi.IntOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbSyncTaskOutputDatabaseLevelResponse) int { return v.FullLoadErroredTables }).(pulumi.IntOutput)
}

// Number of tables loading in full load
func (o MigrateSqlServerSqlDbSyncTaskOutputDatabaseLevelResponseOutput) FullLoadLoadingTables() pulumi.IntOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbSyncTaskOutputDatabaseLevelResponse) int { return v.FullLoadLoadingTables }).(pulumi.IntOutput)
}

// Number of tables queued in full load
func (o MigrateSqlServerSqlDbSyncTaskOutputDatabaseLevelResponseOutput) FullLoadQueuedTables() pulumi.IntOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbSyncTaskOutputDatabaseLevelResponse) int { return v.FullLoadQueuedTables }).(pulumi.IntOutput)
}

// Result identifier
func (o MigrateSqlServerSqlDbSyncTaskOutputDatabaseLevelResponseOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbSyncTaskOutputDatabaseLevelResponse) string { return v.Id }).(pulumi.StringOutput)
}

// Number of incoming changes
func (o MigrateSqlServerSqlDbSyncTaskOutputDatabaseLevelResponseOutput) IncomingChanges() pulumi.IntOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbSyncTaskOutputDatabaseLevelResponse) int { return v.IncomingChanges }).(pulumi.IntOutput)
}

// Indicates if initial load (full load) has been completed
func (o MigrateSqlServerSqlDbSyncTaskOutputDatabaseLevelResponseOutput) InitializationCompleted() pulumi.BoolOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbSyncTaskOutputDatabaseLevelResponse) bool {
		return v.InitializationCompleted
	}).(pulumi.BoolOutput)
}

// CDC apply latency
func (o MigrateSqlServerSqlDbSyncTaskOutputDatabaseLevelResponseOutput) Latency() pulumi.IntOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbSyncTaskOutputDatabaseLevelResponse) int { return v.Latency }).(pulumi.IntOutput)
}

// Migration state that this database is in
func (o MigrateSqlServerSqlDbSyncTaskOutputDatabaseLevelResponseOutput) MigrationState() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbSyncTaskOutputDatabaseLevelResponse) string { return v.MigrationState }).(pulumi.StringOutput)
}

// Result type
func (o MigrateSqlServerSqlDbSyncTaskOutputDatabaseLevelResponseOutput) ResultType() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbSyncTaskOutputDatabaseLevelResponse) string { return v.ResultType }).(pulumi.StringOutput)
}

// Migration start time
func (o MigrateSqlServerSqlDbSyncTaskOutputDatabaseLevelResponseOutput) StartedOn() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbSyncTaskOutputDatabaseLevelResponse) string { return v.StartedOn }).(pulumi.StringOutput)
}

type MigrateSqlServerSqlDbSyncTaskOutputErrorResponse struct {
	// Migration error
	Error ReportableExceptionResponse `pulumi:"error"`
	// Result identifier
	Id string `pulumi:"id"`
	// Result type
	ResultType string `pulumi:"resultType"`
}

type MigrateSqlServerSqlDbSyncTaskOutputErrorResponseOutput struct{ *pulumi.OutputState }

func (MigrateSqlServerSqlDbSyncTaskOutputErrorResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MigrateSqlServerSqlDbSyncTaskOutputErrorResponse)(nil)).Elem()
}

func (o MigrateSqlServerSqlDbSyncTaskOutputErrorResponseOutput) ToMigrateSqlServerSqlDbSyncTaskOutputErrorResponseOutput() MigrateSqlServerSqlDbSyncTaskOutputErrorResponseOutput {
	return o
}

func (o MigrateSqlServerSqlDbSyncTaskOutputErrorResponseOutput) ToMigrateSqlServerSqlDbSyncTaskOutputErrorResponseOutputWithContext(ctx context.Context) MigrateSqlServerSqlDbSyncTaskOutputErrorResponseOutput {
	return o
}

// Migration error
func (o MigrateSqlServerSqlDbSyncTaskOutputErrorResponseOutput) Error() ReportableExceptionResponseOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbSyncTaskOutputErrorResponse) ReportableExceptionResponse { return v.Error }).(ReportableExceptionResponseOutput)
}

// Result identifier
func (o MigrateSqlServerSqlDbSyncTaskOutputErrorResponseOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbSyncTaskOutputErrorResponse) string { return v.Id }).(pulumi.StringOutput)
}

// Result type
func (o MigrateSqlServerSqlDbSyncTaskOutputErrorResponseOutput) ResultType() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbSyncTaskOutputErrorResponse) string { return v.ResultType }).(pulumi.StringOutput)
}

type MigrateSqlServerSqlDbSyncTaskOutputMigrationLevelResponse struct {
	// Count of databases
	DatabaseCount int `pulumi:"databaseCount"`
	// Migration end time
	EndedOn string `pulumi:"endedOn"`
	// Result identifier
	Id string `pulumi:"id"`
	// Result type
	ResultType string `pulumi:"resultType"`
	// Source server name
	SourceServer string `pulumi:"sourceServer"`
	// Source server version
	SourceServerVersion string `pulumi:"sourceServerVersion"`
	// Migration start time
	StartedOn string `pulumi:"startedOn"`
	// Target server name
	TargetServer string `pulumi:"targetServer"`
	// Target server version
	TargetServerVersion string `pulumi:"targetServerVersion"`
}

type MigrateSqlServerSqlDbSyncTaskOutputMigrationLevelResponseOutput struct{ *pulumi.OutputState }

func (MigrateSqlServerSqlDbSyncTaskOutputMigrationLevelResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MigrateSqlServerSqlDbSyncTaskOutputMigrationLevelResponse)(nil)).Elem()
}

func (o MigrateSqlServerSqlDbSyncTaskOutputMigrationLevelResponseOutput) ToMigrateSqlServerSqlDbSyncTaskOutputMigrationLevelResponseOutput() MigrateSqlServerSqlDbSyncTaskOutputMigrationLevelResponseOutput {
	return o
}

func (o MigrateSqlServerSqlDbSyncTaskOutputMigrationLevelResponseOutput) ToMigrateSqlServerSqlDbSyncTaskOutputMigrationLevelResponseOutputWithContext(ctx context.Context) MigrateSqlServerSqlDbSyncTaskOutputMigrationLevelResponseOutput {
	return o
}

// Count of databases
func (o MigrateSqlServerSqlDbSyncTaskOutputMigrationLevelResponseOutput) DatabaseCount() pulumi.IntOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbSyncTaskOutputMigrationLevelResponse) int { return v.DatabaseCount }).(pulumi.IntOutput)
}

// Migration end time
func (o MigrateSqlServerSqlDbSyncTaskOutputMigrationLevelResponseOutput) EndedOn() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbSyncTaskOutputMigrationLevelResponse) string { return v.EndedOn }).(pulumi.StringOutput)
}

// Result identifier
func (o MigrateSqlServerSqlDbSyncTaskOutputMigrationLevelResponseOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbSyncTaskOutputMigrationLevelResponse) string { return v.Id }).(pulumi.StringOutput)
}

// Result type
func (o MigrateSqlServerSqlDbSyncTaskOutputMigrationLevelResponseOutput) ResultType() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbSyncTaskOutputMigrationLevelResponse) string { return v.ResultType }).(pulumi.StringOutput)
}

// Source server name
func (o MigrateSqlServerSqlDbSyncTaskOutputMigrationLevelResponseOutput) SourceServer() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbSyncTaskOutputMigrationLevelResponse) string { return v.SourceServer }).(pulumi.StringOutput)
}

// Source server version
func (o MigrateSqlServerSqlDbSyncTaskOutputMigrationLevelResponseOutput) SourceServerVersion() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbSyncTaskOutputMigrationLevelResponse) string { return v.SourceServerVersion }).(pulumi.StringOutput)
}

// Migration start time
func (o MigrateSqlServerSqlDbSyncTaskOutputMigrationLevelResponseOutput) StartedOn() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbSyncTaskOutputMigrationLevelResponse) string { return v.StartedOn }).(pulumi.StringOutput)
}

// Target server name
func (o MigrateSqlServerSqlDbSyncTaskOutputMigrationLevelResponseOutput) TargetServer() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbSyncTaskOutputMigrationLevelResponse) string { return v.TargetServer }).(pulumi.StringOutput)
}

// Target server version
func (o MigrateSqlServerSqlDbSyncTaskOutputMigrationLevelResponseOutput) TargetServerVersion() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbSyncTaskOutputMigrationLevelResponse) string { return v.TargetServerVersion }).(pulumi.StringOutput)
}

type MigrateSqlServerSqlDbSyncTaskOutputTableLevelResponse struct {
	// Number of applied deletes
	CdcDeleteCounter int `pulumi:"cdcDeleteCounter"`
	// Number of applied inserts
	CdcInsertCounter int `pulumi:"cdcInsertCounter"`
	// Number of applied updates
	CdcUpdateCounter int `pulumi:"cdcUpdateCounter"`
	// Number of data errors occurred
	DataErrorsCounter int `pulumi:"dataErrorsCounter"`
	// Name of the database
	DatabaseName string `pulumi:"databaseName"`
	// Full load end time
	FullLoadEndedOn string `pulumi:"fullLoadEndedOn"`
	// Estimate to finish full load
	FullLoadEstFinishTime string `pulumi:"fullLoadEstFinishTime"`
	// Full load start time
	FullLoadStartedOn string `pulumi:"fullLoadStartedOn"`
	// Number of rows applied in full load
	FullLoadTotalRows int `pulumi:"fullLoadTotalRows"`
	// Result identifier
	Id string `pulumi:"id"`
	// Last modified time on target
	LastModifiedTime string `pulumi:"lastModifiedTime"`
	// Result type
	ResultType string `pulumi:"resultType"`
	// Current state of the table migration
	State string `pulumi:"state"`
	// Name of the table
	TableName string `pulumi:"tableName"`
	// Total number of applied changes
	TotalChangesApplied int `pulumi:"totalChangesApplied"`
}

type MigrateSqlServerSqlDbSyncTaskOutputTableLevelResponseOutput struct{ *pulumi.OutputState }

func (MigrateSqlServerSqlDbSyncTaskOutputTableLevelResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MigrateSqlServerSqlDbSyncTaskOutputTableLevelResponse)(nil)).Elem()
}

func (o MigrateSqlServerSqlDbSyncTaskOutputTableLevelResponseOutput) ToMigrateSqlServerSqlDbSyncTaskOutputTableLevelResponseOutput() MigrateSqlServerSqlDbSyncTaskOutputTableLevelResponseOutput {
	return o
}

func (o MigrateSqlServerSqlDbSyncTaskOutputTableLevelResponseOutput) ToMigrateSqlServerSqlDbSyncTaskOutputTableLevelResponseOutputWithContext(ctx context.Context) MigrateSqlServerSqlDbSyncTaskOutputTableLevelResponseOutput {
	return o
}

// Number of applied deletes
func (o MigrateSqlServerSqlDbSyncTaskOutputTableLevelResponseOutput) CdcDeleteCounter() pulumi.IntOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbSyncTaskOutputTableLevelResponse) int { return v.CdcDeleteCounter }).(pulumi.IntOutput)
}

// Number of applied inserts
func (o MigrateSqlServerSqlDbSyncTaskOutputTableLevelResponseOutput) CdcInsertCounter() pulumi.IntOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbSyncTaskOutputTableLevelResponse) int { return v.CdcInsertCounter }).(pulumi.IntOutput)
}

// Number of applied updates
func (o MigrateSqlServerSqlDbSyncTaskOutputTableLevelResponseOutput) CdcUpdateCounter() pulumi.IntOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbSyncTaskOutputTableLevelResponse) int { return v.CdcUpdateCounter }).(pulumi.IntOutput)
}

// Number of data errors occurred
func (o MigrateSqlServerSqlDbSyncTaskOutputTableLevelResponseOutput) DataErrorsCounter() pulumi.IntOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbSyncTaskOutputTableLevelResponse) int { return v.DataErrorsCounter }).(pulumi.IntOutput)
}

// Name of the database
func (o MigrateSqlServerSqlDbSyncTaskOutputTableLevelResponseOutput) DatabaseName() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbSyncTaskOutputTableLevelResponse) string { return v.DatabaseName }).(pulumi.StringOutput)
}

// Full load end time
func (o MigrateSqlServerSqlDbSyncTaskOutputTableLevelResponseOutput) FullLoadEndedOn() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbSyncTaskOutputTableLevelResponse) string { return v.FullLoadEndedOn }).(pulumi.StringOutput)
}

// Estimate to finish full load
func (o MigrateSqlServerSqlDbSyncTaskOutputTableLevelResponseOutput) FullLoadEstFinishTime() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbSyncTaskOutputTableLevelResponse) string { return v.FullLoadEstFinishTime }).(pulumi.StringOutput)
}

// Full load start time
func (o MigrateSqlServerSqlDbSyncTaskOutputTableLevelResponseOutput) FullLoadStartedOn() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbSyncTaskOutputTableLevelResponse) string { return v.FullLoadStartedOn }).(pulumi.StringOutput)
}

// Number of rows applied in full load
func (o MigrateSqlServerSqlDbSyncTaskOutputTableLevelResponseOutput) FullLoadTotalRows() pulumi.IntOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbSyncTaskOutputTableLevelResponse) int { return v.FullLoadTotalRows }).(pulumi.IntOutput)
}

// Result identifier
func (o MigrateSqlServerSqlDbSyncTaskOutputTableLevelResponseOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbSyncTaskOutputTableLevelResponse) string { return v.Id }).(pulumi.StringOutput)
}

// Last modified time on target
func (o MigrateSqlServerSqlDbSyncTaskOutputTableLevelResponseOutput) LastModifiedTime() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbSyncTaskOutputTableLevelResponse) string { return v.LastModifiedTime }).(pulumi.StringOutput)
}

// Result type
func (o MigrateSqlServerSqlDbSyncTaskOutputTableLevelResponseOutput) ResultType() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbSyncTaskOutputTableLevelResponse) string { return v.ResultType }).(pulumi.StringOutput)
}

// Current state of the table migration
func (o MigrateSqlServerSqlDbSyncTaskOutputTableLevelResponseOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbSyncTaskOutputTableLevelResponse) string { return v.State }).(pulumi.StringOutput)
}

// Name of the table
func (o MigrateSqlServerSqlDbSyncTaskOutputTableLevelResponseOutput) TableName() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbSyncTaskOutputTableLevelResponse) string { return v.TableName }).(pulumi.StringOutput)
}

// Total number of applied changes
func (o MigrateSqlServerSqlDbSyncTaskOutputTableLevelResponseOutput) TotalChangesApplied() pulumi.IntOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbSyncTaskOutputTableLevelResponse) int { return v.TotalChangesApplied }).(pulumi.IntOutput)
}

// Properties for the task that migrates on-prem SQL Server databases to Azure SQL Database for online migrations
type MigrateSqlServerSqlDbSyncTaskProperties struct {
	// Key value pairs of client data to attach meta data information to task
	ClientData map[string]string `pulumi:"clientData"`
	// Task input
	Input *MigrateSqlServerSqlDbSyncTaskInput `pulumi:"input"`
	// Task type.
	TaskType string `pulumi:"taskType"`
}

// MigrateSqlServerSqlDbSyncTaskPropertiesInput is an input type that accepts MigrateSqlServerSqlDbSyncTaskPropertiesArgs and MigrateSqlServerSqlDbSyncTaskPropertiesOutput values.
// You can construct a concrete instance of `MigrateSqlServerSqlDbSyncTaskPropertiesInput` via:
//
//          MigrateSqlServerSqlDbSyncTaskPropertiesArgs{...}
type MigrateSqlServerSqlDbSyncTaskPropertiesInput interface {
	pulumi.Input

	ToMigrateSqlServerSqlDbSyncTaskPropertiesOutput() MigrateSqlServerSqlDbSyncTaskPropertiesOutput
	ToMigrateSqlServerSqlDbSyncTaskPropertiesOutputWithContext(context.Context) MigrateSqlServerSqlDbSyncTaskPropertiesOutput
}

// Properties for the task that migrates on-prem SQL Server databases to Azure SQL Database for online migrations
type MigrateSqlServerSqlDbSyncTaskPropertiesArgs struct {
	// Key value pairs of client data to attach meta data information to task
	ClientData pulumi.StringMapInput `pulumi:"clientData"`
	// Task input
	Input MigrateSqlServerSqlDbSyncTaskInputPtrInput `pulumi:"input"`
	// Task type.
	TaskType pulumi.StringInput `pulumi:"taskType"`
}

func (MigrateSqlServerSqlDbSyncTaskPropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MigrateSqlServerSqlDbSyncTaskProperties)(nil)).Elem()
}

func (i MigrateSqlServerSqlDbSyncTaskPropertiesArgs) ToMigrateSqlServerSqlDbSyncTaskPropertiesOutput() MigrateSqlServerSqlDbSyncTaskPropertiesOutput {
	return i.ToMigrateSqlServerSqlDbSyncTaskPropertiesOutputWithContext(context.Background())
}

func (i MigrateSqlServerSqlDbSyncTaskPropertiesArgs) ToMigrateSqlServerSqlDbSyncTaskPropertiesOutputWithContext(ctx context.Context) MigrateSqlServerSqlDbSyncTaskPropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MigrateSqlServerSqlDbSyncTaskPropertiesOutput)
}

// Properties for the task that migrates on-prem SQL Server databases to Azure SQL Database for online migrations
type MigrateSqlServerSqlDbSyncTaskPropertiesResponse struct {
	// Key value pairs of client data to attach meta data information to task
	ClientData map[string]string `pulumi:"clientData"`
	// Array of command properties.
	Commands []interface{} `pulumi:"commands"`
	// Array of errors. This is ignored if submitted.
	Errors []ODataErrorResponse `pulumi:"errors"`
	// Task input
	Input *MigrateSqlServerSqlDbSyncTaskInputResponse `pulumi:"input"`
	// Task output. This is ignored if submitted.
	Output []interface{} `pulumi:"output"`
	// The state of the task. This is ignored if submitted.
	State string `pulumi:"state"`
	// Task type.
	TaskType string `pulumi:"taskType"`
}

// Properties for the task that migrates on-prem SQL Server databases to Azure SQL Database for online migrations
type MigrateSqlServerSqlDbSyncTaskPropertiesResponseOutput struct{ *pulumi.OutputState }

func (MigrateSqlServerSqlDbSyncTaskPropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MigrateSqlServerSqlDbSyncTaskPropertiesResponse)(nil)).Elem()
}

func (o MigrateSqlServerSqlDbSyncTaskPropertiesResponseOutput) ToMigrateSqlServerSqlDbSyncTaskPropertiesResponseOutput() MigrateSqlServerSqlDbSyncTaskPropertiesResponseOutput {
	return o
}

func (o MigrateSqlServerSqlDbSyncTaskPropertiesResponseOutput) ToMigrateSqlServerSqlDbSyncTaskPropertiesResponseOutputWithContext(ctx context.Context) MigrateSqlServerSqlDbSyncTaskPropertiesResponseOutput {
	return o
}

// Key value pairs of client data to attach meta data information to task
func (o MigrateSqlServerSqlDbSyncTaskPropertiesResponseOutput) ClientData() pulumi.StringMapOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbSyncTaskPropertiesResponse) map[string]string { return v.ClientData }).(pulumi.StringMapOutput)
}

// Array of command properties.
func (o MigrateSqlServerSqlDbSyncTaskPropertiesResponseOutput) Commands() pulumi.ArrayOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbSyncTaskPropertiesResponse) []interface{} { return v.Commands }).(pulumi.ArrayOutput)
}

// Array of errors. This is ignored if submitted.
func (o MigrateSqlServerSqlDbSyncTaskPropertiesResponseOutput) Errors() ODataErrorResponseArrayOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbSyncTaskPropertiesResponse) []ODataErrorResponse { return v.Errors }).(ODataErrorResponseArrayOutput)
}

// Task input
func (o MigrateSqlServerSqlDbSyncTaskPropertiesResponseOutput) Input() MigrateSqlServerSqlDbSyncTaskInputResponsePtrOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbSyncTaskPropertiesResponse) *MigrateSqlServerSqlDbSyncTaskInputResponse {
		return v.Input
	}).(MigrateSqlServerSqlDbSyncTaskInputResponsePtrOutput)
}

// Task output. This is ignored if submitted.
func (o MigrateSqlServerSqlDbSyncTaskPropertiesResponseOutput) Output() pulumi.ArrayOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbSyncTaskPropertiesResponse) []interface{} { return v.Output }).(pulumi.ArrayOutput)
}

// The state of the task. This is ignored if submitted.
func (o MigrateSqlServerSqlDbSyncTaskPropertiesResponseOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbSyncTaskPropertiesResponse) string { return v.State }).(pulumi.StringOutput)
}

// Task type.
func (o MigrateSqlServerSqlDbSyncTaskPropertiesResponseOutput) TaskType() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbSyncTaskPropertiesResponse) string { return v.TaskType }).(pulumi.StringOutput)
}

// Input for the task that migrates on-prem SQL Server databases to Azure SQL Database
type MigrateSqlServerSqlDbTaskInput struct {
	// Databases to migrate
	SelectedDatabases []MigrateSqlServerSqlDbDatabaseInput `pulumi:"selectedDatabases"`
	// Information for connecting to source
	SourceConnectionInfo SqlConnectionInfo `pulumi:"sourceConnectionInfo"`
	// Information for connecting to target
	TargetConnectionInfo SqlConnectionInfo `pulumi:"targetConnectionInfo"`
	// Options for enabling various post migration validations. Available options,
	//  1.) Data Integrity Check: Performs a checksum based comparison on source and target tables after the migration to ensure the correctness of the data.
	//  2.) Schema Validation: Performs a thorough schema comparison between the source and target tables and provides a list of differences between the source and target database, 3.) Query Analysis: Executes a set of queries picked up automatically either from the Query Plan Cache or Query Store and execute them and compares the execution time between the source and target database.
	ValidationOptions *MigrationValidationOptions `pulumi:"validationOptions"`
}

// MigrateSqlServerSqlDbTaskInputInput is an input type that accepts MigrateSqlServerSqlDbTaskInputArgs and MigrateSqlServerSqlDbTaskInputOutput values.
// You can construct a concrete instance of `MigrateSqlServerSqlDbTaskInputInput` via:
//
//          MigrateSqlServerSqlDbTaskInputArgs{...}
type MigrateSqlServerSqlDbTaskInputInput interface {
	pulumi.Input

	ToMigrateSqlServerSqlDbTaskInputOutput() MigrateSqlServerSqlDbTaskInputOutput
	ToMigrateSqlServerSqlDbTaskInputOutputWithContext(context.Context) MigrateSqlServerSqlDbTaskInputOutput
}

// Input for the task that migrates on-prem SQL Server databases to Azure SQL Database
type MigrateSqlServerSqlDbTaskInputArgs struct {
	// Databases to migrate
	SelectedDatabases MigrateSqlServerSqlDbDatabaseInputArrayInput `pulumi:"selectedDatabases"`
	// Information for connecting to source
	SourceConnectionInfo SqlConnectionInfoInput `pulumi:"sourceConnectionInfo"`
	// Information for connecting to target
	TargetConnectionInfo SqlConnectionInfoInput `pulumi:"targetConnectionInfo"`
	// Options for enabling various post migration validations. Available options,
	//  1.) Data Integrity Check: Performs a checksum based comparison on source and target tables after the migration to ensure the correctness of the data.
	//  2.) Schema Validation: Performs a thorough schema comparison between the source and target tables and provides a list of differences between the source and target database, 3.) Query Analysis: Executes a set of queries picked up automatically either from the Query Plan Cache or Query Store and execute them and compares the execution time between the source and target database.
	ValidationOptions MigrationValidationOptionsPtrInput `pulumi:"validationOptions"`
}

func (MigrateSqlServerSqlDbTaskInputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MigrateSqlServerSqlDbTaskInput)(nil)).Elem()
}

func (i MigrateSqlServerSqlDbTaskInputArgs) ToMigrateSqlServerSqlDbTaskInputOutput() MigrateSqlServerSqlDbTaskInputOutput {
	return i.ToMigrateSqlServerSqlDbTaskInputOutputWithContext(context.Background())
}

func (i MigrateSqlServerSqlDbTaskInputArgs) ToMigrateSqlServerSqlDbTaskInputOutputWithContext(ctx context.Context) MigrateSqlServerSqlDbTaskInputOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MigrateSqlServerSqlDbTaskInputOutput)
}

func (i MigrateSqlServerSqlDbTaskInputArgs) ToMigrateSqlServerSqlDbTaskInputPtrOutput() MigrateSqlServerSqlDbTaskInputPtrOutput {
	return i.ToMigrateSqlServerSqlDbTaskInputPtrOutputWithContext(context.Background())
}

func (i MigrateSqlServerSqlDbTaskInputArgs) ToMigrateSqlServerSqlDbTaskInputPtrOutputWithContext(ctx context.Context) MigrateSqlServerSqlDbTaskInputPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MigrateSqlServerSqlDbTaskInputOutput).ToMigrateSqlServerSqlDbTaskInputPtrOutputWithContext(ctx)
}

// MigrateSqlServerSqlDbTaskInputPtrInput is an input type that accepts MigrateSqlServerSqlDbTaskInputArgs, MigrateSqlServerSqlDbTaskInputPtr and MigrateSqlServerSqlDbTaskInputPtrOutput values.
// You can construct a concrete instance of `MigrateSqlServerSqlDbTaskInputPtrInput` via:
//
//          MigrateSqlServerSqlDbTaskInputArgs{...}
//
//  or:
//
//          nil
type MigrateSqlServerSqlDbTaskInputPtrInput interface {
	pulumi.Input

	ToMigrateSqlServerSqlDbTaskInputPtrOutput() MigrateSqlServerSqlDbTaskInputPtrOutput
	ToMigrateSqlServerSqlDbTaskInputPtrOutputWithContext(context.Context) MigrateSqlServerSqlDbTaskInputPtrOutput
}

type migrateSqlServerSqlDbTaskInputPtrType MigrateSqlServerSqlDbTaskInputArgs

func MigrateSqlServerSqlDbTaskInputPtr(v *MigrateSqlServerSqlDbTaskInputArgs) MigrateSqlServerSqlDbTaskInputPtrInput {
	return (*migrateSqlServerSqlDbTaskInputPtrType)(v)
}

func (*migrateSqlServerSqlDbTaskInputPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**MigrateSqlServerSqlDbTaskInput)(nil)).Elem()
}

func (i *migrateSqlServerSqlDbTaskInputPtrType) ToMigrateSqlServerSqlDbTaskInputPtrOutput() MigrateSqlServerSqlDbTaskInputPtrOutput {
	return i.ToMigrateSqlServerSqlDbTaskInputPtrOutputWithContext(context.Background())
}

func (i *migrateSqlServerSqlDbTaskInputPtrType) ToMigrateSqlServerSqlDbTaskInputPtrOutputWithContext(ctx context.Context) MigrateSqlServerSqlDbTaskInputPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MigrateSqlServerSqlDbTaskInputPtrOutput)
}

// Input for the task that migrates on-prem SQL Server databases to Azure SQL Database
type MigrateSqlServerSqlDbTaskInputResponse struct {
	// Databases to migrate
	SelectedDatabases []MigrateSqlServerSqlDbDatabaseInputResponse `pulumi:"selectedDatabases"`
	// Information for connecting to source
	SourceConnectionInfo SqlConnectionInfoResponse `pulumi:"sourceConnectionInfo"`
	// Information for connecting to target
	TargetConnectionInfo SqlConnectionInfoResponse `pulumi:"targetConnectionInfo"`
	// Options for enabling various post migration validations. Available options,
	//  1.) Data Integrity Check: Performs a checksum based comparison on source and target tables after the migration to ensure the correctness of the data.
	//  2.) Schema Validation: Performs a thorough schema comparison between the source and target tables and provides a list of differences between the source and target database, 3.) Query Analysis: Executes a set of queries picked up automatically either from the Query Plan Cache or Query Store and execute them and compares the execution time between the source and target database.
	ValidationOptions *MigrationValidationOptionsResponse `pulumi:"validationOptions"`
}

// Input for the task that migrates on-prem SQL Server databases to Azure SQL Database
type MigrateSqlServerSqlDbTaskInputResponseOutput struct{ *pulumi.OutputState }

func (MigrateSqlServerSqlDbTaskInputResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MigrateSqlServerSqlDbTaskInputResponse)(nil)).Elem()
}

func (o MigrateSqlServerSqlDbTaskInputResponseOutput) ToMigrateSqlServerSqlDbTaskInputResponseOutput() MigrateSqlServerSqlDbTaskInputResponseOutput {
	return o
}

func (o MigrateSqlServerSqlDbTaskInputResponseOutput) ToMigrateSqlServerSqlDbTaskInputResponseOutputWithContext(ctx context.Context) MigrateSqlServerSqlDbTaskInputResponseOutput {
	return o
}

func (o MigrateSqlServerSqlDbTaskInputResponseOutput) ToMigrateSqlServerSqlDbTaskInputResponsePtrOutput() MigrateSqlServerSqlDbTaskInputResponsePtrOutput {
	return o.ToMigrateSqlServerSqlDbTaskInputResponsePtrOutputWithContext(context.Background())
}

func (o MigrateSqlServerSqlDbTaskInputResponseOutput) ToMigrateSqlServerSqlDbTaskInputResponsePtrOutputWithContext(ctx context.Context) MigrateSqlServerSqlDbTaskInputResponsePtrOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbTaskInputResponse) *MigrateSqlServerSqlDbTaskInputResponse {
		return &v
	}).(MigrateSqlServerSqlDbTaskInputResponsePtrOutput)
}

// Databases to migrate
func (o MigrateSqlServerSqlDbTaskInputResponseOutput) SelectedDatabases() MigrateSqlServerSqlDbDatabaseInputResponseArrayOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbTaskInputResponse) []MigrateSqlServerSqlDbDatabaseInputResponse {
		return v.SelectedDatabases
	}).(MigrateSqlServerSqlDbDatabaseInputResponseArrayOutput)
}

// Information for connecting to source
func (o MigrateSqlServerSqlDbTaskInputResponseOutput) SourceConnectionInfo() SqlConnectionInfoResponseOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbTaskInputResponse) SqlConnectionInfoResponse {
		return v.SourceConnectionInfo
	}).(SqlConnectionInfoResponseOutput)
}

// Information for connecting to target
func (o MigrateSqlServerSqlDbTaskInputResponseOutput) TargetConnectionInfo() SqlConnectionInfoResponseOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbTaskInputResponse) SqlConnectionInfoResponse {
		return v.TargetConnectionInfo
	}).(SqlConnectionInfoResponseOutput)
}

// Options for enabling various post migration validations. Available options,
//  1.) Data Integrity Check: Performs a checksum based comparison on source and target tables after the migration to ensure the correctness of the data.
//  2.) Schema Validation: Performs a thorough schema comparison between the source and target tables and provides a list of differences between the source and target database, 3.) Query Analysis: Executes a set of queries picked up automatically either from the Query Plan Cache or Query Store and execute them and compares the execution time between the source and target database.
func (o MigrateSqlServerSqlDbTaskInputResponseOutput) ValidationOptions() MigrationValidationOptionsResponsePtrOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbTaskInputResponse) *MigrationValidationOptionsResponse {
		return v.ValidationOptions
	}).(MigrationValidationOptionsResponsePtrOutput)
}

type MigrateSqlServerSqlDbTaskInputResponsePtrOutput struct{ *pulumi.OutputState }

func (MigrateSqlServerSqlDbTaskInputResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MigrateSqlServerSqlDbTaskInputResponse)(nil)).Elem()
}

func (o MigrateSqlServerSqlDbTaskInputResponsePtrOutput) ToMigrateSqlServerSqlDbTaskInputResponsePtrOutput() MigrateSqlServerSqlDbTaskInputResponsePtrOutput {
	return o
}

func (o MigrateSqlServerSqlDbTaskInputResponsePtrOutput) ToMigrateSqlServerSqlDbTaskInputResponsePtrOutputWithContext(ctx context.Context) MigrateSqlServerSqlDbTaskInputResponsePtrOutput {
	return o
}

func (o MigrateSqlServerSqlDbTaskInputResponsePtrOutput) Elem() MigrateSqlServerSqlDbTaskInputResponseOutput {
	return o.ApplyT(func(v *MigrateSqlServerSqlDbTaskInputResponse) MigrateSqlServerSqlDbTaskInputResponse { return *v }).(MigrateSqlServerSqlDbTaskInputResponseOutput)
}

// Databases to migrate
func (o MigrateSqlServerSqlDbTaskInputResponsePtrOutput) SelectedDatabases() MigrateSqlServerSqlDbDatabaseInputResponseArrayOutput {
	return o.ApplyT(func(v *MigrateSqlServerSqlDbTaskInputResponse) []MigrateSqlServerSqlDbDatabaseInputResponse {
		if v == nil {
			return nil
		}
		return v.SelectedDatabases
	}).(MigrateSqlServerSqlDbDatabaseInputResponseArrayOutput)
}

// Information for connecting to source
func (o MigrateSqlServerSqlDbTaskInputResponsePtrOutput) SourceConnectionInfo() SqlConnectionInfoResponsePtrOutput {
	return o.ApplyT(func(v *MigrateSqlServerSqlDbTaskInputResponse) *SqlConnectionInfoResponse {
		if v == nil {
			return nil
		}
		return &v.SourceConnectionInfo
	}).(SqlConnectionInfoResponsePtrOutput)
}

// Information for connecting to target
func (o MigrateSqlServerSqlDbTaskInputResponsePtrOutput) TargetConnectionInfo() SqlConnectionInfoResponsePtrOutput {
	return o.ApplyT(func(v *MigrateSqlServerSqlDbTaskInputResponse) *SqlConnectionInfoResponse {
		if v == nil {
			return nil
		}
		return &v.TargetConnectionInfo
	}).(SqlConnectionInfoResponsePtrOutput)
}

// Options for enabling various post migration validations. Available options,
//  1.) Data Integrity Check: Performs a checksum based comparison on source and target tables after the migration to ensure the correctness of the data.
//  2.) Schema Validation: Performs a thorough schema comparison between the source and target tables and provides a list of differences between the source and target database, 3.) Query Analysis: Executes a set of queries picked up automatically either from the Query Plan Cache or Query Store and execute them and compares the execution time between the source and target database.
func (o MigrateSqlServerSqlDbTaskInputResponsePtrOutput) ValidationOptions() MigrationValidationOptionsResponsePtrOutput {
	return o.ApplyT(func(v *MigrateSqlServerSqlDbTaskInputResponse) *MigrationValidationOptionsResponse {
		if v == nil {
			return nil
		}
		return v.ValidationOptions
	}).(MigrationValidationOptionsResponsePtrOutput)
}

type MigrateSqlServerSqlDbTaskOutputDatabaseLevelResponse struct {
	// Name of the item
	DatabaseName string `pulumi:"databaseName"`
	// Migration end time
	EndedOn string `pulumi:"endedOn"`
	// Number of database/object errors.
	ErrorCount int `pulumi:"errorCount"`
	// Wildcard string prefix to use for querying all errors of the item
	ErrorPrefix string `pulumi:"errorPrefix"`
	// Migration exceptions and warnings.
	ExceptionsAndWarnings []ReportableExceptionResponse `pulumi:"exceptionsAndWarnings"`
	// Result identifier
	Id string `pulumi:"id"`
	// Migration progress message
	Message string `pulumi:"message"`
	// Number of objects
	NumberOfObjects int `pulumi:"numberOfObjects"`
	// Number of successfully completed objects
	NumberOfObjectsCompleted int `pulumi:"numberOfObjectsCompleted"`
	// Summary of object results in the migration
	ObjectSummary string `pulumi:"objectSummary"`
	// Wildcard string prefix to use for querying all sub-tem results of the item
	ResultPrefix string `pulumi:"resultPrefix"`
	// Result type
	ResultType string `pulumi:"resultType"`
	// Migration stage that this database is in
	Stage string `pulumi:"stage"`
	// Migration start time
	StartedOn string `pulumi:"startedOn"`
	// Current state of migration
	State string `pulumi:"state"`
	// Status message
	StatusMessage string `pulumi:"statusMessage"`
}

type MigrateSqlServerSqlDbTaskOutputDatabaseLevelResponseOutput struct{ *pulumi.OutputState }

func (MigrateSqlServerSqlDbTaskOutputDatabaseLevelResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MigrateSqlServerSqlDbTaskOutputDatabaseLevelResponse)(nil)).Elem()
}

func (o MigrateSqlServerSqlDbTaskOutputDatabaseLevelResponseOutput) ToMigrateSqlServerSqlDbTaskOutputDatabaseLevelResponseOutput() MigrateSqlServerSqlDbTaskOutputDatabaseLevelResponseOutput {
	return o
}

func (o MigrateSqlServerSqlDbTaskOutputDatabaseLevelResponseOutput) ToMigrateSqlServerSqlDbTaskOutputDatabaseLevelResponseOutputWithContext(ctx context.Context) MigrateSqlServerSqlDbTaskOutputDatabaseLevelResponseOutput {
	return o
}

// Name of the item
func (o MigrateSqlServerSqlDbTaskOutputDatabaseLevelResponseOutput) DatabaseName() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbTaskOutputDatabaseLevelResponse) string { return v.DatabaseName }).(pulumi.StringOutput)
}

// Migration end time
func (o MigrateSqlServerSqlDbTaskOutputDatabaseLevelResponseOutput) EndedOn() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbTaskOutputDatabaseLevelResponse) string { return v.EndedOn }).(pulumi.StringOutput)
}

// Number of database/object errors.
func (o MigrateSqlServerSqlDbTaskOutputDatabaseLevelResponseOutput) ErrorCount() pulumi.IntOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbTaskOutputDatabaseLevelResponse) int { return v.ErrorCount }).(pulumi.IntOutput)
}

// Wildcard string prefix to use for querying all errors of the item
func (o MigrateSqlServerSqlDbTaskOutputDatabaseLevelResponseOutput) ErrorPrefix() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbTaskOutputDatabaseLevelResponse) string { return v.ErrorPrefix }).(pulumi.StringOutput)
}

// Migration exceptions and warnings.
func (o MigrateSqlServerSqlDbTaskOutputDatabaseLevelResponseOutput) ExceptionsAndWarnings() ReportableExceptionResponseArrayOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbTaskOutputDatabaseLevelResponse) []ReportableExceptionResponse {
		return v.ExceptionsAndWarnings
	}).(ReportableExceptionResponseArrayOutput)
}

// Result identifier
func (o MigrateSqlServerSqlDbTaskOutputDatabaseLevelResponseOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbTaskOutputDatabaseLevelResponse) string { return v.Id }).(pulumi.StringOutput)
}

// Migration progress message
func (o MigrateSqlServerSqlDbTaskOutputDatabaseLevelResponseOutput) Message() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbTaskOutputDatabaseLevelResponse) string { return v.Message }).(pulumi.StringOutput)
}

// Number of objects
func (o MigrateSqlServerSqlDbTaskOutputDatabaseLevelResponseOutput) NumberOfObjects() pulumi.IntOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbTaskOutputDatabaseLevelResponse) int { return v.NumberOfObjects }).(pulumi.IntOutput)
}

// Number of successfully completed objects
func (o MigrateSqlServerSqlDbTaskOutputDatabaseLevelResponseOutput) NumberOfObjectsCompleted() pulumi.IntOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbTaskOutputDatabaseLevelResponse) int { return v.NumberOfObjectsCompleted }).(pulumi.IntOutput)
}

// Summary of object results in the migration
func (o MigrateSqlServerSqlDbTaskOutputDatabaseLevelResponseOutput) ObjectSummary() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbTaskOutputDatabaseLevelResponse) string { return v.ObjectSummary }).(pulumi.StringOutput)
}

// Wildcard string prefix to use for querying all sub-tem results of the item
func (o MigrateSqlServerSqlDbTaskOutputDatabaseLevelResponseOutput) ResultPrefix() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbTaskOutputDatabaseLevelResponse) string { return v.ResultPrefix }).(pulumi.StringOutput)
}

// Result type
func (o MigrateSqlServerSqlDbTaskOutputDatabaseLevelResponseOutput) ResultType() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbTaskOutputDatabaseLevelResponse) string { return v.ResultType }).(pulumi.StringOutput)
}

// Migration stage that this database is in
func (o MigrateSqlServerSqlDbTaskOutputDatabaseLevelResponseOutput) Stage() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbTaskOutputDatabaseLevelResponse) string { return v.Stage }).(pulumi.StringOutput)
}

// Migration start time
func (o MigrateSqlServerSqlDbTaskOutputDatabaseLevelResponseOutput) StartedOn() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbTaskOutputDatabaseLevelResponse) string { return v.StartedOn }).(pulumi.StringOutput)
}

// Current state of migration
func (o MigrateSqlServerSqlDbTaskOutputDatabaseLevelResponseOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbTaskOutputDatabaseLevelResponse) string { return v.State }).(pulumi.StringOutput)
}

// Status message
func (o MigrateSqlServerSqlDbTaskOutputDatabaseLevelResponseOutput) StatusMessage() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbTaskOutputDatabaseLevelResponse) string { return v.StatusMessage }).(pulumi.StringOutput)
}

type MigrateSqlServerSqlDbTaskOutputDatabaseLevelValidationResultResponse struct {
	// Result identifier
	Id string `pulumi:"id"`
	// Result type
	ResultType string `pulumi:"resultType"`
}

type MigrateSqlServerSqlDbTaskOutputDatabaseLevelValidationResultResponseOutput struct{ *pulumi.OutputState }

func (MigrateSqlServerSqlDbTaskOutputDatabaseLevelValidationResultResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MigrateSqlServerSqlDbTaskOutputDatabaseLevelValidationResultResponse)(nil)).Elem()
}

func (o MigrateSqlServerSqlDbTaskOutputDatabaseLevelValidationResultResponseOutput) ToMigrateSqlServerSqlDbTaskOutputDatabaseLevelValidationResultResponseOutput() MigrateSqlServerSqlDbTaskOutputDatabaseLevelValidationResultResponseOutput {
	return o
}

func (o MigrateSqlServerSqlDbTaskOutputDatabaseLevelValidationResultResponseOutput) ToMigrateSqlServerSqlDbTaskOutputDatabaseLevelValidationResultResponseOutputWithContext(ctx context.Context) MigrateSqlServerSqlDbTaskOutputDatabaseLevelValidationResultResponseOutput {
	return o
}

// Result identifier
func (o MigrateSqlServerSqlDbTaskOutputDatabaseLevelValidationResultResponseOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbTaskOutputDatabaseLevelValidationResultResponse) string { return v.Id }).(pulumi.StringOutput)
}

// Result type
func (o MigrateSqlServerSqlDbTaskOutputDatabaseLevelValidationResultResponseOutput) ResultType() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbTaskOutputDatabaseLevelValidationResultResponse) string {
		return v.ResultType
	}).(pulumi.StringOutput)
}

type MigrateSqlServerSqlDbTaskOutputErrorResponse struct {
	// Migration error
	Error ReportableExceptionResponse `pulumi:"error"`
	// Result identifier
	Id string `pulumi:"id"`
	// Result type
	ResultType string `pulumi:"resultType"`
}

type MigrateSqlServerSqlDbTaskOutputErrorResponseOutput struct{ *pulumi.OutputState }

func (MigrateSqlServerSqlDbTaskOutputErrorResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MigrateSqlServerSqlDbTaskOutputErrorResponse)(nil)).Elem()
}

func (o MigrateSqlServerSqlDbTaskOutputErrorResponseOutput) ToMigrateSqlServerSqlDbTaskOutputErrorResponseOutput() MigrateSqlServerSqlDbTaskOutputErrorResponseOutput {
	return o
}

func (o MigrateSqlServerSqlDbTaskOutputErrorResponseOutput) ToMigrateSqlServerSqlDbTaskOutputErrorResponseOutputWithContext(ctx context.Context) MigrateSqlServerSqlDbTaskOutputErrorResponseOutput {
	return o
}

// Migration error
func (o MigrateSqlServerSqlDbTaskOutputErrorResponseOutput) Error() ReportableExceptionResponseOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbTaskOutputErrorResponse) ReportableExceptionResponse { return v.Error }).(ReportableExceptionResponseOutput)
}

// Result identifier
func (o MigrateSqlServerSqlDbTaskOutputErrorResponseOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbTaskOutputErrorResponse) string { return v.Id }).(pulumi.StringOutput)
}

// Result type
func (o MigrateSqlServerSqlDbTaskOutputErrorResponseOutput) ResultType() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbTaskOutputErrorResponse) string { return v.ResultType }).(pulumi.StringOutput)
}

type MigrateSqlServerSqlDbTaskOutputMigrationLevelResponse struct {
	// Summary of database results in the migration
	DatabaseSummary string `pulumi:"databaseSummary"`
	// Selected databases as a map from database name to database id
	Databases string `pulumi:"databases"`
	// Duration of task execution in seconds.
	DurationInSeconds int `pulumi:"durationInSeconds"`
	// Migration end time
	EndedOn string `pulumi:"endedOn"`
	// Migration exceptions and warnings.
	ExceptionsAndWarnings []ReportableExceptionResponse `pulumi:"exceptionsAndWarnings"`
	// Result identifier
	Id string `pulumi:"id"`
	// Migration progress message
	Message string `pulumi:"message"`
	// Migration Report Result, provides unique url for downloading your migration report.
	MigrationReportResult *MigrationReportResultResponse `pulumi:"migrationReportResult"`
	// Migration Validation Results
	MigrationValidationResult *MigrationValidationResultResponse `pulumi:"migrationValidationResult"`
	// Result type
	ResultType string `pulumi:"resultType"`
	// Source server brand version
	SourceServerBrandVersion string `pulumi:"sourceServerBrandVersion"`
	// Source server version
	SourceServerVersion string `pulumi:"sourceServerVersion"`
	// Migration start time
	StartedOn string `pulumi:"startedOn"`
	// Current status of migration
	Status string `pulumi:"status"`
	// Migration status message
	StatusMessage string `pulumi:"statusMessage"`
	// Target server brand version
	TargetServerBrandVersion string `pulumi:"targetServerBrandVersion"`
	// Target server version
	TargetServerVersion string `pulumi:"targetServerVersion"`
}

type MigrateSqlServerSqlDbTaskOutputMigrationLevelResponseOutput struct{ *pulumi.OutputState }

func (MigrateSqlServerSqlDbTaskOutputMigrationLevelResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MigrateSqlServerSqlDbTaskOutputMigrationLevelResponse)(nil)).Elem()
}

func (o MigrateSqlServerSqlDbTaskOutputMigrationLevelResponseOutput) ToMigrateSqlServerSqlDbTaskOutputMigrationLevelResponseOutput() MigrateSqlServerSqlDbTaskOutputMigrationLevelResponseOutput {
	return o
}

func (o MigrateSqlServerSqlDbTaskOutputMigrationLevelResponseOutput) ToMigrateSqlServerSqlDbTaskOutputMigrationLevelResponseOutputWithContext(ctx context.Context) MigrateSqlServerSqlDbTaskOutputMigrationLevelResponseOutput {
	return o
}

// Summary of database results in the migration
func (o MigrateSqlServerSqlDbTaskOutputMigrationLevelResponseOutput) DatabaseSummary() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbTaskOutputMigrationLevelResponse) string { return v.DatabaseSummary }).(pulumi.StringOutput)
}

// Selected databases as a map from database name to database id
func (o MigrateSqlServerSqlDbTaskOutputMigrationLevelResponseOutput) Databases() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbTaskOutputMigrationLevelResponse) string { return v.Databases }).(pulumi.StringOutput)
}

// Duration of task execution in seconds.
func (o MigrateSqlServerSqlDbTaskOutputMigrationLevelResponseOutput) DurationInSeconds() pulumi.IntOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbTaskOutputMigrationLevelResponse) int { return v.DurationInSeconds }).(pulumi.IntOutput)
}

// Migration end time
func (o MigrateSqlServerSqlDbTaskOutputMigrationLevelResponseOutput) EndedOn() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbTaskOutputMigrationLevelResponse) string { return v.EndedOn }).(pulumi.StringOutput)
}

// Migration exceptions and warnings.
func (o MigrateSqlServerSqlDbTaskOutputMigrationLevelResponseOutput) ExceptionsAndWarnings() ReportableExceptionResponseArrayOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbTaskOutputMigrationLevelResponse) []ReportableExceptionResponse {
		return v.ExceptionsAndWarnings
	}).(ReportableExceptionResponseArrayOutput)
}

// Result identifier
func (o MigrateSqlServerSqlDbTaskOutputMigrationLevelResponseOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbTaskOutputMigrationLevelResponse) string { return v.Id }).(pulumi.StringOutput)
}

// Migration progress message
func (o MigrateSqlServerSqlDbTaskOutputMigrationLevelResponseOutput) Message() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbTaskOutputMigrationLevelResponse) string { return v.Message }).(pulumi.StringOutput)
}

// Migration Report Result, provides unique url for downloading your migration report.
func (o MigrateSqlServerSqlDbTaskOutputMigrationLevelResponseOutput) MigrationReportResult() MigrationReportResultResponsePtrOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbTaskOutputMigrationLevelResponse) *MigrationReportResultResponse {
		return v.MigrationReportResult
	}).(MigrationReportResultResponsePtrOutput)
}

// Migration Validation Results
func (o MigrateSqlServerSqlDbTaskOutputMigrationLevelResponseOutput) MigrationValidationResult() MigrationValidationResultResponsePtrOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbTaskOutputMigrationLevelResponse) *MigrationValidationResultResponse {
		return v.MigrationValidationResult
	}).(MigrationValidationResultResponsePtrOutput)
}

// Result type
func (o MigrateSqlServerSqlDbTaskOutputMigrationLevelResponseOutput) ResultType() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbTaskOutputMigrationLevelResponse) string { return v.ResultType }).(pulumi.StringOutput)
}

// Source server brand version
func (o MigrateSqlServerSqlDbTaskOutputMigrationLevelResponseOutput) SourceServerBrandVersion() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbTaskOutputMigrationLevelResponse) string {
		return v.SourceServerBrandVersion
	}).(pulumi.StringOutput)
}

// Source server version
func (o MigrateSqlServerSqlDbTaskOutputMigrationLevelResponseOutput) SourceServerVersion() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbTaskOutputMigrationLevelResponse) string { return v.SourceServerVersion }).(pulumi.StringOutput)
}

// Migration start time
func (o MigrateSqlServerSqlDbTaskOutputMigrationLevelResponseOutput) StartedOn() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbTaskOutputMigrationLevelResponse) string { return v.StartedOn }).(pulumi.StringOutput)
}

// Current status of migration
func (o MigrateSqlServerSqlDbTaskOutputMigrationLevelResponseOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbTaskOutputMigrationLevelResponse) string { return v.Status }).(pulumi.StringOutput)
}

// Migration status message
func (o MigrateSqlServerSqlDbTaskOutputMigrationLevelResponseOutput) StatusMessage() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbTaskOutputMigrationLevelResponse) string { return v.StatusMessage }).(pulumi.StringOutput)
}

// Target server brand version
func (o MigrateSqlServerSqlDbTaskOutputMigrationLevelResponseOutput) TargetServerBrandVersion() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbTaskOutputMigrationLevelResponse) string {
		return v.TargetServerBrandVersion
	}).(pulumi.StringOutput)
}

// Target server version
func (o MigrateSqlServerSqlDbTaskOutputMigrationLevelResponseOutput) TargetServerVersion() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbTaskOutputMigrationLevelResponse) string { return v.TargetServerVersion }).(pulumi.StringOutput)
}

type MigrateSqlServerSqlDbTaskOutputTableLevelResponse struct {
	// Migration end time
	EndedOn string `pulumi:"endedOn"`
	// Wildcard string prefix to use for querying all errors of the item
	ErrorPrefix string `pulumi:"errorPrefix"`
	// Result identifier
	Id string `pulumi:"id"`
	// Number of successfully completed items
	ItemsCompletedCount int `pulumi:"itemsCompletedCount"`
	// Number of items
	ItemsCount int `pulumi:"itemsCount"`
	// Name of the item
	ObjectName string `pulumi:"objectName"`
	// Wildcard string prefix to use for querying all sub-tem results of the item
	ResultPrefix string `pulumi:"resultPrefix"`
	// Result type
	ResultType string `pulumi:"resultType"`
	// Migration start time
	StartedOn string `pulumi:"startedOn"`
	// Current state of migration
	State string `pulumi:"state"`
	// Status message
	StatusMessage string `pulumi:"statusMessage"`
}

type MigrateSqlServerSqlDbTaskOutputTableLevelResponseOutput struct{ *pulumi.OutputState }

func (MigrateSqlServerSqlDbTaskOutputTableLevelResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MigrateSqlServerSqlDbTaskOutputTableLevelResponse)(nil)).Elem()
}

func (o MigrateSqlServerSqlDbTaskOutputTableLevelResponseOutput) ToMigrateSqlServerSqlDbTaskOutputTableLevelResponseOutput() MigrateSqlServerSqlDbTaskOutputTableLevelResponseOutput {
	return o
}

func (o MigrateSqlServerSqlDbTaskOutputTableLevelResponseOutput) ToMigrateSqlServerSqlDbTaskOutputTableLevelResponseOutputWithContext(ctx context.Context) MigrateSqlServerSqlDbTaskOutputTableLevelResponseOutput {
	return o
}

// Migration end time
func (o MigrateSqlServerSqlDbTaskOutputTableLevelResponseOutput) EndedOn() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbTaskOutputTableLevelResponse) string { return v.EndedOn }).(pulumi.StringOutput)
}

// Wildcard string prefix to use for querying all errors of the item
func (o MigrateSqlServerSqlDbTaskOutputTableLevelResponseOutput) ErrorPrefix() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbTaskOutputTableLevelResponse) string { return v.ErrorPrefix }).(pulumi.StringOutput)
}

// Result identifier
func (o MigrateSqlServerSqlDbTaskOutputTableLevelResponseOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbTaskOutputTableLevelResponse) string { return v.Id }).(pulumi.StringOutput)
}

// Number of successfully completed items
func (o MigrateSqlServerSqlDbTaskOutputTableLevelResponseOutput) ItemsCompletedCount() pulumi.IntOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbTaskOutputTableLevelResponse) int { return v.ItemsCompletedCount }).(pulumi.IntOutput)
}

// Number of items
func (o MigrateSqlServerSqlDbTaskOutputTableLevelResponseOutput) ItemsCount() pulumi.IntOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbTaskOutputTableLevelResponse) int { return v.ItemsCount }).(pulumi.IntOutput)
}

// Name of the item
func (o MigrateSqlServerSqlDbTaskOutputTableLevelResponseOutput) ObjectName() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbTaskOutputTableLevelResponse) string { return v.ObjectName }).(pulumi.StringOutput)
}

// Wildcard string prefix to use for querying all sub-tem results of the item
func (o MigrateSqlServerSqlDbTaskOutputTableLevelResponseOutput) ResultPrefix() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbTaskOutputTableLevelResponse) string { return v.ResultPrefix }).(pulumi.StringOutput)
}

// Result type
func (o MigrateSqlServerSqlDbTaskOutputTableLevelResponseOutput) ResultType() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbTaskOutputTableLevelResponse) string { return v.ResultType }).(pulumi.StringOutput)
}

// Migration start time
func (o MigrateSqlServerSqlDbTaskOutputTableLevelResponseOutput) StartedOn() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbTaskOutputTableLevelResponse) string { return v.StartedOn }).(pulumi.StringOutput)
}

// Current state of migration
func (o MigrateSqlServerSqlDbTaskOutputTableLevelResponseOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbTaskOutputTableLevelResponse) string { return v.State }).(pulumi.StringOutput)
}

// Status message
func (o MigrateSqlServerSqlDbTaskOutputTableLevelResponseOutput) StatusMessage() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbTaskOutputTableLevelResponse) string { return v.StatusMessage }).(pulumi.StringOutput)
}

type MigrateSqlServerSqlDbTaskOutputValidationResultResponse struct {
	// Result identifier
	Id string `pulumi:"id"`
	// Result type
	ResultType string `pulumi:"resultType"`
}

type MigrateSqlServerSqlDbTaskOutputValidationResultResponseOutput struct{ *pulumi.OutputState }

func (MigrateSqlServerSqlDbTaskOutputValidationResultResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MigrateSqlServerSqlDbTaskOutputValidationResultResponse)(nil)).Elem()
}

func (o MigrateSqlServerSqlDbTaskOutputValidationResultResponseOutput) ToMigrateSqlServerSqlDbTaskOutputValidationResultResponseOutput() MigrateSqlServerSqlDbTaskOutputValidationResultResponseOutput {
	return o
}

func (o MigrateSqlServerSqlDbTaskOutputValidationResultResponseOutput) ToMigrateSqlServerSqlDbTaskOutputValidationResultResponseOutputWithContext(ctx context.Context) MigrateSqlServerSqlDbTaskOutputValidationResultResponseOutput {
	return o
}

// Result identifier
func (o MigrateSqlServerSqlDbTaskOutputValidationResultResponseOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbTaskOutputValidationResultResponse) string { return v.Id }).(pulumi.StringOutput)
}

// Result type
func (o MigrateSqlServerSqlDbTaskOutputValidationResultResponseOutput) ResultType() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbTaskOutputValidationResultResponse) string { return v.ResultType }).(pulumi.StringOutput)
}

// Properties for the task that migrates on-prem SQL Server databases to Azure SQL Database
type MigrateSqlServerSqlDbTaskProperties struct {
	// Key value pairs of client data to attach meta data information to task
	ClientData map[string]string `pulumi:"clientData"`
	// Task input
	Input *MigrateSqlServerSqlDbTaskInput `pulumi:"input"`
	// Task type.
	TaskType string `pulumi:"taskType"`
}

// MigrateSqlServerSqlDbTaskPropertiesInput is an input type that accepts MigrateSqlServerSqlDbTaskPropertiesArgs and MigrateSqlServerSqlDbTaskPropertiesOutput values.
// You can construct a concrete instance of `MigrateSqlServerSqlDbTaskPropertiesInput` via:
//
//          MigrateSqlServerSqlDbTaskPropertiesArgs{...}
type MigrateSqlServerSqlDbTaskPropertiesInput interface {
	pulumi.Input

	ToMigrateSqlServerSqlDbTaskPropertiesOutput() MigrateSqlServerSqlDbTaskPropertiesOutput
	ToMigrateSqlServerSqlDbTaskPropertiesOutputWithContext(context.Context) MigrateSqlServerSqlDbTaskPropertiesOutput
}

// Properties for the task that migrates on-prem SQL Server databases to Azure SQL Database
type MigrateSqlServerSqlDbTaskPropertiesArgs struct {
	// Key value pairs of client data to attach meta data information to task
	ClientData pulumi.StringMapInput `pulumi:"clientData"`
	// Task input
	Input MigrateSqlServerSqlDbTaskInputPtrInput `pulumi:"input"`
	// Task type.
	TaskType pulumi.StringInput `pulumi:"taskType"`
}

func (MigrateSqlServerSqlDbTaskPropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MigrateSqlServerSqlDbTaskProperties)(nil)).Elem()
}

func (i MigrateSqlServerSqlDbTaskPropertiesArgs) ToMigrateSqlServerSqlDbTaskPropertiesOutput() MigrateSqlServerSqlDbTaskPropertiesOutput {
	return i.ToMigrateSqlServerSqlDbTaskPropertiesOutputWithContext(context.Background())
}

func (i MigrateSqlServerSqlDbTaskPropertiesArgs) ToMigrateSqlServerSqlDbTaskPropertiesOutputWithContext(ctx context.Context) MigrateSqlServerSqlDbTaskPropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MigrateSqlServerSqlDbTaskPropertiesOutput)
}

// Properties for the task that migrates on-prem SQL Server databases to Azure SQL Database
type MigrateSqlServerSqlDbTaskPropertiesResponse struct {
	// Key value pairs of client data to attach meta data information to task
	ClientData map[string]string `pulumi:"clientData"`
	// Array of command properties.
	Commands []interface{} `pulumi:"commands"`
	// Array of errors. This is ignored if submitted.
	Errors []ODataErrorResponse `pulumi:"errors"`
	// Task input
	Input *MigrateSqlServerSqlDbTaskInputResponse `pulumi:"input"`
	// Task output. This is ignored if submitted.
	Output []interface{} `pulumi:"output"`
	// The state of the task. This is ignored if submitted.
	State string `pulumi:"state"`
	// Task type.
	TaskType string `pulumi:"taskType"`
}

// Properties for the task that migrates on-prem SQL Server databases to Azure SQL Database
type MigrateSqlServerSqlDbTaskPropertiesResponseOutput struct{ *pulumi.OutputState }

func (MigrateSqlServerSqlDbTaskPropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MigrateSqlServerSqlDbTaskPropertiesResponse)(nil)).Elem()
}

func (o MigrateSqlServerSqlDbTaskPropertiesResponseOutput) ToMigrateSqlServerSqlDbTaskPropertiesResponseOutput() MigrateSqlServerSqlDbTaskPropertiesResponseOutput {
	return o
}

func (o MigrateSqlServerSqlDbTaskPropertiesResponseOutput) ToMigrateSqlServerSqlDbTaskPropertiesResponseOutputWithContext(ctx context.Context) MigrateSqlServerSqlDbTaskPropertiesResponseOutput {
	return o
}

// Key value pairs of client data to attach meta data information to task
func (o MigrateSqlServerSqlDbTaskPropertiesResponseOutput) ClientData() pulumi.StringMapOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbTaskPropertiesResponse) map[string]string { return v.ClientData }).(pulumi.StringMapOutput)
}

// Array of command properties.
func (o MigrateSqlServerSqlDbTaskPropertiesResponseOutput) Commands() pulumi.ArrayOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbTaskPropertiesResponse) []interface{} { return v.Commands }).(pulumi.ArrayOutput)
}

// Array of errors. This is ignored if submitted.
func (o MigrateSqlServerSqlDbTaskPropertiesResponseOutput) Errors() ODataErrorResponseArrayOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbTaskPropertiesResponse) []ODataErrorResponse { return v.Errors }).(ODataErrorResponseArrayOutput)
}

// Task input
func (o MigrateSqlServerSqlDbTaskPropertiesResponseOutput) Input() MigrateSqlServerSqlDbTaskInputResponsePtrOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbTaskPropertiesResponse) *MigrateSqlServerSqlDbTaskInputResponse {
		return v.Input
	}).(MigrateSqlServerSqlDbTaskInputResponsePtrOutput)
}

// Task output. This is ignored if submitted.
func (o MigrateSqlServerSqlDbTaskPropertiesResponseOutput) Output() pulumi.ArrayOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbTaskPropertiesResponse) []interface{} { return v.Output }).(pulumi.ArrayOutput)
}

// The state of the task. This is ignored if submitted.
func (o MigrateSqlServerSqlDbTaskPropertiesResponseOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbTaskPropertiesResponse) string { return v.State }).(pulumi.StringOutput)
}

// Task type.
func (o MigrateSqlServerSqlDbTaskPropertiesResponseOutput) TaskType() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbTaskPropertiesResponse) string { return v.TaskType }).(pulumi.StringOutput)
}

// Database specific information for SQL to Azure SQL DB Managed Instance migration task inputs
type MigrateSqlServerSqlMIDatabaseInput struct {
	// The list of backup files to be used in case of existing backups.
	BackupFilePaths []string `pulumi:"backupFilePaths"`
	// Backup file share information for backing up this database.
	BackupFileShare *FileShare `pulumi:"backupFileShare"`
	// Name of the database
	Name string `pulumi:"name"`
	// Name of the database at destination
	RestoreDatabaseName string `pulumi:"restoreDatabaseName"`
}

// MigrateSqlServerSqlMIDatabaseInputInput is an input type that accepts MigrateSqlServerSqlMIDatabaseInputArgs and MigrateSqlServerSqlMIDatabaseInputOutput values.
// You can construct a concrete instance of `MigrateSqlServerSqlMIDatabaseInputInput` via:
//
//          MigrateSqlServerSqlMIDatabaseInputArgs{...}
type MigrateSqlServerSqlMIDatabaseInputInput interface {
	pulumi.Input

	ToMigrateSqlServerSqlMIDatabaseInputOutput() MigrateSqlServerSqlMIDatabaseInputOutput
	ToMigrateSqlServerSqlMIDatabaseInputOutputWithContext(context.Context) MigrateSqlServerSqlMIDatabaseInputOutput
}

// Database specific information for SQL to Azure SQL DB Managed Instance migration task inputs
type MigrateSqlServerSqlMIDatabaseInputArgs struct {
	// The list of backup files to be used in case of existing backups.
	BackupFilePaths pulumi.StringArrayInput `pulumi:"backupFilePaths"`
	// Backup file share information for backing up this database.
	BackupFileShare FileSharePtrInput `pulumi:"backupFileShare"`
	// Name of the database
	Name pulumi.StringInput `pulumi:"name"`
	// Name of the database at destination
	RestoreDatabaseName pulumi.StringInput `pulumi:"restoreDatabaseName"`
}

func (MigrateSqlServerSqlMIDatabaseInputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MigrateSqlServerSqlMIDatabaseInput)(nil)).Elem()
}

func (i MigrateSqlServerSqlMIDatabaseInputArgs) ToMigrateSqlServerSqlMIDatabaseInputOutput() MigrateSqlServerSqlMIDatabaseInputOutput {
	return i.ToMigrateSqlServerSqlMIDatabaseInputOutputWithContext(context.Background())
}

func (i MigrateSqlServerSqlMIDatabaseInputArgs) ToMigrateSqlServerSqlMIDatabaseInputOutputWithContext(ctx context.Context) MigrateSqlServerSqlMIDatabaseInputOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MigrateSqlServerSqlMIDatabaseInputOutput)
}

// MigrateSqlServerSqlMIDatabaseInputArrayInput is an input type that accepts MigrateSqlServerSqlMIDatabaseInputArray and MigrateSqlServerSqlMIDatabaseInputArrayOutput values.
// You can construct a concrete instance of `MigrateSqlServerSqlMIDatabaseInputArrayInput` via:
//
//          MigrateSqlServerSqlMIDatabaseInputArray{ MigrateSqlServerSqlMIDatabaseInputArgs{...} }
type MigrateSqlServerSqlMIDatabaseInputArrayInput interface {
	pulumi.Input

	ToMigrateSqlServerSqlMIDatabaseInputArrayOutput() MigrateSqlServerSqlMIDatabaseInputArrayOutput
	ToMigrateSqlServerSqlMIDatabaseInputArrayOutputWithContext(context.Context) MigrateSqlServerSqlMIDatabaseInputArrayOutput
}

type MigrateSqlServerSqlMIDatabaseInputArray []MigrateSqlServerSqlMIDatabaseInputInput

func (MigrateSqlServerSqlMIDatabaseInputArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MigrateSqlServerSqlMIDatabaseInput)(nil)).Elem()
}

func (i MigrateSqlServerSqlMIDatabaseInputArray) ToMigrateSqlServerSqlMIDatabaseInputArrayOutput() MigrateSqlServerSqlMIDatabaseInputArrayOutput {
	return i.ToMigrateSqlServerSqlMIDatabaseInputArrayOutputWithContext(context.Background())
}

func (i MigrateSqlServerSqlMIDatabaseInputArray) ToMigrateSqlServerSqlMIDatabaseInputArrayOutputWithContext(ctx context.Context) MigrateSqlServerSqlMIDatabaseInputArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MigrateSqlServerSqlMIDatabaseInputArrayOutput)
}

// Database specific information for SQL to Azure SQL DB Managed Instance migration task inputs
type MigrateSqlServerSqlMIDatabaseInputResponse struct {
	// The list of backup files to be used in case of existing backups.
	BackupFilePaths []string `pulumi:"backupFilePaths"`
	// Backup file share information for backing up this database.
	BackupFileShare *FileShareResponse `pulumi:"backupFileShare"`
	// Name of the database
	Name string `pulumi:"name"`
	// Name of the database at destination
	RestoreDatabaseName string `pulumi:"restoreDatabaseName"`
}

// Database specific information for SQL to Azure SQL DB Managed Instance migration task inputs
type MigrateSqlServerSqlMIDatabaseInputResponseOutput struct{ *pulumi.OutputState }

func (MigrateSqlServerSqlMIDatabaseInputResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MigrateSqlServerSqlMIDatabaseInputResponse)(nil)).Elem()
}

func (o MigrateSqlServerSqlMIDatabaseInputResponseOutput) ToMigrateSqlServerSqlMIDatabaseInputResponseOutput() MigrateSqlServerSqlMIDatabaseInputResponseOutput {
	return o
}

func (o MigrateSqlServerSqlMIDatabaseInputResponseOutput) ToMigrateSqlServerSqlMIDatabaseInputResponseOutputWithContext(ctx context.Context) MigrateSqlServerSqlMIDatabaseInputResponseOutput {
	return o
}

// The list of backup files to be used in case of existing backups.
func (o MigrateSqlServerSqlMIDatabaseInputResponseOutput) BackupFilePaths() pulumi.StringArrayOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlMIDatabaseInputResponse) []string { return v.BackupFilePaths }).(pulumi.StringArrayOutput)
}

// Backup file share information for backing up this database.
func (o MigrateSqlServerSqlMIDatabaseInputResponseOutput) BackupFileShare() FileShareResponsePtrOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlMIDatabaseInputResponse) *FileShareResponse { return v.BackupFileShare }).(FileShareResponsePtrOutput)
}

// Name of the database
func (o MigrateSqlServerSqlMIDatabaseInputResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlMIDatabaseInputResponse) string { return v.Name }).(pulumi.StringOutput)
}

// Name of the database at destination
func (o MigrateSqlServerSqlMIDatabaseInputResponseOutput) RestoreDatabaseName() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlMIDatabaseInputResponse) string { return v.RestoreDatabaseName }).(pulumi.StringOutput)
}

type MigrateSqlServerSqlMIDatabaseInputResponseArrayOutput struct{ *pulumi.OutputState }

func (MigrateSqlServerSqlMIDatabaseInputResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MigrateSqlServerSqlMIDatabaseInputResponse)(nil)).Elem()
}

func (o MigrateSqlServerSqlMIDatabaseInputResponseArrayOutput) ToMigrateSqlServerSqlMIDatabaseInputResponseArrayOutput() MigrateSqlServerSqlMIDatabaseInputResponseArrayOutput {
	return o
}

func (o MigrateSqlServerSqlMIDatabaseInputResponseArrayOutput) ToMigrateSqlServerSqlMIDatabaseInputResponseArrayOutputWithContext(ctx context.Context) MigrateSqlServerSqlMIDatabaseInputResponseArrayOutput {
	return o
}

func (o MigrateSqlServerSqlMIDatabaseInputResponseArrayOutput) Index(i pulumi.IntInput) MigrateSqlServerSqlMIDatabaseInputResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) MigrateSqlServerSqlMIDatabaseInputResponse {
		return vs[0].([]MigrateSqlServerSqlMIDatabaseInputResponse)[vs[1].(int)]
	}).(MigrateSqlServerSqlMIDatabaseInputResponseOutput)
}

// Input for task that migrates SQL Server databases to Azure SQL Database Managed Instance online scenario.
type MigrateSqlServerSqlMISyncTaskInput struct {
	// Azure Active Directory Application the DMS instance will use to connect to the target instance of Azure SQL Database Managed Instance and the Azure Storage Account
	AzureApp AzureActiveDirectoryApp `pulumi:"azureApp"`
	// Backup file share information for all selected databases.
	BackupFileShare *FileShare `pulumi:"backupFileShare"`
	// Databases to migrate
	SelectedDatabases []MigrateSqlServerSqlMIDatabaseInput `pulumi:"selectedDatabases"`
	// Connection information for source SQL Server
	SourceConnectionInfo SqlConnectionInfo `pulumi:"sourceConnectionInfo"`
	// Fully qualified resourceId of storage
	StorageResourceId string `pulumi:"storageResourceId"`
	// Connection information for Azure SQL Database Managed Instance
	TargetConnectionInfo MiSqlConnectionInfo `pulumi:"targetConnectionInfo"`
}

// MigrateSqlServerSqlMISyncTaskInputInput is an input type that accepts MigrateSqlServerSqlMISyncTaskInputArgs and MigrateSqlServerSqlMISyncTaskInputOutput values.
// You can construct a concrete instance of `MigrateSqlServerSqlMISyncTaskInputInput` via:
//
//          MigrateSqlServerSqlMISyncTaskInputArgs{...}
type MigrateSqlServerSqlMISyncTaskInputInput interface {
	pulumi.Input

	ToMigrateSqlServerSqlMISyncTaskInputOutput() MigrateSqlServerSqlMISyncTaskInputOutput
	ToMigrateSqlServerSqlMISyncTaskInputOutputWithContext(context.Context) MigrateSqlServerSqlMISyncTaskInputOutput
}

// Input for task that migrates SQL Server databases to Azure SQL Database Managed Instance online scenario.
type MigrateSqlServerSqlMISyncTaskInputArgs struct {
	// Azure Active Directory Application the DMS instance will use to connect to the target instance of Azure SQL Database Managed Instance and the Azure Storage Account
	AzureApp AzureActiveDirectoryAppInput `pulumi:"azureApp"`
	// Backup file share information for all selected databases.
	BackupFileShare FileSharePtrInput `pulumi:"backupFileShare"`
	// Databases to migrate
	SelectedDatabases MigrateSqlServerSqlMIDatabaseInputArrayInput `pulumi:"selectedDatabases"`
	// Connection information for source SQL Server
	SourceConnectionInfo SqlConnectionInfoInput `pulumi:"sourceConnectionInfo"`
	// Fully qualified resourceId of storage
	StorageResourceId pulumi.StringInput `pulumi:"storageResourceId"`
	// Connection information for Azure SQL Database Managed Instance
	TargetConnectionInfo MiSqlConnectionInfoInput `pulumi:"targetConnectionInfo"`
}

func (MigrateSqlServerSqlMISyncTaskInputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MigrateSqlServerSqlMISyncTaskInput)(nil)).Elem()
}

func (i MigrateSqlServerSqlMISyncTaskInputArgs) ToMigrateSqlServerSqlMISyncTaskInputOutput() MigrateSqlServerSqlMISyncTaskInputOutput {
	return i.ToMigrateSqlServerSqlMISyncTaskInputOutputWithContext(context.Background())
}

func (i MigrateSqlServerSqlMISyncTaskInputArgs) ToMigrateSqlServerSqlMISyncTaskInputOutputWithContext(ctx context.Context) MigrateSqlServerSqlMISyncTaskInputOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MigrateSqlServerSqlMISyncTaskInputOutput)
}

func (i MigrateSqlServerSqlMISyncTaskInputArgs) ToMigrateSqlServerSqlMISyncTaskInputPtrOutput() MigrateSqlServerSqlMISyncTaskInputPtrOutput {
	return i.ToMigrateSqlServerSqlMISyncTaskInputPtrOutputWithContext(context.Background())
}

func (i MigrateSqlServerSqlMISyncTaskInputArgs) ToMigrateSqlServerSqlMISyncTaskInputPtrOutputWithContext(ctx context.Context) MigrateSqlServerSqlMISyncTaskInputPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MigrateSqlServerSqlMISyncTaskInputOutput).ToMigrateSqlServerSqlMISyncTaskInputPtrOutputWithContext(ctx)
}

// MigrateSqlServerSqlMISyncTaskInputPtrInput is an input type that accepts MigrateSqlServerSqlMISyncTaskInputArgs, MigrateSqlServerSqlMISyncTaskInputPtr and MigrateSqlServerSqlMISyncTaskInputPtrOutput values.
// You can construct a concrete instance of `MigrateSqlServerSqlMISyncTaskInputPtrInput` via:
//
//          MigrateSqlServerSqlMISyncTaskInputArgs{...}
//
//  or:
//
//          nil
type MigrateSqlServerSqlMISyncTaskInputPtrInput interface {
	pulumi.Input

	ToMigrateSqlServerSqlMISyncTaskInputPtrOutput() MigrateSqlServerSqlMISyncTaskInputPtrOutput
	ToMigrateSqlServerSqlMISyncTaskInputPtrOutputWithContext(context.Context) MigrateSqlServerSqlMISyncTaskInputPtrOutput
}

type migrateSqlServerSqlMISyncTaskInputPtrType MigrateSqlServerSqlMISyncTaskInputArgs

func MigrateSqlServerSqlMISyncTaskInputPtr(v *MigrateSqlServerSqlMISyncTaskInputArgs) MigrateSqlServerSqlMISyncTaskInputPtrInput {
	return (*migrateSqlServerSqlMISyncTaskInputPtrType)(v)
}

func (*migrateSqlServerSqlMISyncTaskInputPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**MigrateSqlServerSqlMISyncTaskInput)(nil)).Elem()
}

func (i *migrateSqlServerSqlMISyncTaskInputPtrType) ToMigrateSqlServerSqlMISyncTaskInputPtrOutput() MigrateSqlServerSqlMISyncTaskInputPtrOutput {
	return i.ToMigrateSqlServerSqlMISyncTaskInputPtrOutputWithContext(context.Background())
}

func (i *migrateSqlServerSqlMISyncTaskInputPtrType) ToMigrateSqlServerSqlMISyncTaskInputPtrOutputWithContext(ctx context.Context) MigrateSqlServerSqlMISyncTaskInputPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MigrateSqlServerSqlMISyncTaskInputPtrOutput)
}

// Input for task that migrates SQL Server databases to Azure SQL Database Managed Instance online scenario.
type MigrateSqlServerSqlMISyncTaskInputResponse struct {
	// Azure Active Directory Application the DMS instance will use to connect to the target instance of Azure SQL Database Managed Instance and the Azure Storage Account
	AzureApp AzureActiveDirectoryAppResponse `pulumi:"azureApp"`
	// Backup file share information for all selected databases.
	BackupFileShare *FileShareResponse `pulumi:"backupFileShare"`
	// Databases to migrate
	SelectedDatabases []MigrateSqlServerSqlMIDatabaseInputResponse `pulumi:"selectedDatabases"`
	// Connection information for source SQL Server
	SourceConnectionInfo SqlConnectionInfoResponse `pulumi:"sourceConnectionInfo"`
	// Fully qualified resourceId of storage
	StorageResourceId string `pulumi:"storageResourceId"`
	// Connection information for Azure SQL Database Managed Instance
	TargetConnectionInfo MiSqlConnectionInfoResponse `pulumi:"targetConnectionInfo"`
}

// Input for task that migrates SQL Server databases to Azure SQL Database Managed Instance online scenario.
type MigrateSqlServerSqlMISyncTaskInputResponseOutput struct{ *pulumi.OutputState }

func (MigrateSqlServerSqlMISyncTaskInputResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MigrateSqlServerSqlMISyncTaskInputResponse)(nil)).Elem()
}

func (o MigrateSqlServerSqlMISyncTaskInputResponseOutput) ToMigrateSqlServerSqlMISyncTaskInputResponseOutput() MigrateSqlServerSqlMISyncTaskInputResponseOutput {
	return o
}

func (o MigrateSqlServerSqlMISyncTaskInputResponseOutput) ToMigrateSqlServerSqlMISyncTaskInputResponseOutputWithContext(ctx context.Context) MigrateSqlServerSqlMISyncTaskInputResponseOutput {
	return o
}

func (o MigrateSqlServerSqlMISyncTaskInputResponseOutput) ToMigrateSqlServerSqlMISyncTaskInputResponsePtrOutput() MigrateSqlServerSqlMISyncTaskInputResponsePtrOutput {
	return o.ToMigrateSqlServerSqlMISyncTaskInputResponsePtrOutputWithContext(context.Background())
}

func (o MigrateSqlServerSqlMISyncTaskInputResponseOutput) ToMigrateSqlServerSqlMISyncTaskInputResponsePtrOutputWithContext(ctx context.Context) MigrateSqlServerSqlMISyncTaskInputResponsePtrOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlMISyncTaskInputResponse) *MigrateSqlServerSqlMISyncTaskInputResponse {
		return &v
	}).(MigrateSqlServerSqlMISyncTaskInputResponsePtrOutput)
}

// Azure Active Directory Application the DMS instance will use to connect to the target instance of Azure SQL Database Managed Instance and the Azure Storage Account
func (o MigrateSqlServerSqlMISyncTaskInputResponseOutput) AzureApp() AzureActiveDirectoryAppResponseOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlMISyncTaskInputResponse) AzureActiveDirectoryAppResponse { return v.AzureApp }).(AzureActiveDirectoryAppResponseOutput)
}

// Backup file share information for all selected databases.
func (o MigrateSqlServerSqlMISyncTaskInputResponseOutput) BackupFileShare() FileShareResponsePtrOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlMISyncTaskInputResponse) *FileShareResponse { return v.BackupFileShare }).(FileShareResponsePtrOutput)
}

// Databases to migrate
func (o MigrateSqlServerSqlMISyncTaskInputResponseOutput) SelectedDatabases() MigrateSqlServerSqlMIDatabaseInputResponseArrayOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlMISyncTaskInputResponse) []MigrateSqlServerSqlMIDatabaseInputResponse {
		return v.SelectedDatabases
	}).(MigrateSqlServerSqlMIDatabaseInputResponseArrayOutput)
}

// Connection information for source SQL Server
func (o MigrateSqlServerSqlMISyncTaskInputResponseOutput) SourceConnectionInfo() SqlConnectionInfoResponseOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlMISyncTaskInputResponse) SqlConnectionInfoResponse {
		return v.SourceConnectionInfo
	}).(SqlConnectionInfoResponseOutput)
}

// Fully qualified resourceId of storage
func (o MigrateSqlServerSqlMISyncTaskInputResponseOutput) StorageResourceId() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlMISyncTaskInputResponse) string { return v.StorageResourceId }).(pulumi.StringOutput)
}

// Connection information for Azure SQL Database Managed Instance
func (o MigrateSqlServerSqlMISyncTaskInputResponseOutput) TargetConnectionInfo() MiSqlConnectionInfoResponseOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlMISyncTaskInputResponse) MiSqlConnectionInfoResponse {
		return v.TargetConnectionInfo
	}).(MiSqlConnectionInfoResponseOutput)
}

type MigrateSqlServerSqlMISyncTaskInputResponsePtrOutput struct{ *pulumi.OutputState }

func (MigrateSqlServerSqlMISyncTaskInputResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MigrateSqlServerSqlMISyncTaskInputResponse)(nil)).Elem()
}

func (o MigrateSqlServerSqlMISyncTaskInputResponsePtrOutput) ToMigrateSqlServerSqlMISyncTaskInputResponsePtrOutput() MigrateSqlServerSqlMISyncTaskInputResponsePtrOutput {
	return o
}

func (o MigrateSqlServerSqlMISyncTaskInputResponsePtrOutput) ToMigrateSqlServerSqlMISyncTaskInputResponsePtrOutputWithContext(ctx context.Context) MigrateSqlServerSqlMISyncTaskInputResponsePtrOutput {
	return o
}

func (o MigrateSqlServerSqlMISyncTaskInputResponsePtrOutput) Elem() MigrateSqlServerSqlMISyncTaskInputResponseOutput {
	return o.ApplyT(func(v *MigrateSqlServerSqlMISyncTaskInputResponse) MigrateSqlServerSqlMISyncTaskInputResponse {
		return *v
	}).(MigrateSqlServerSqlMISyncTaskInputResponseOutput)
}

// Azure Active Directory Application the DMS instance will use to connect to the target instance of Azure SQL Database Managed Instance and the Azure Storage Account
func (o MigrateSqlServerSqlMISyncTaskInputResponsePtrOutput) AzureApp() AzureActiveDirectoryAppResponsePtrOutput {
	return o.ApplyT(func(v *MigrateSqlServerSqlMISyncTaskInputResponse) *AzureActiveDirectoryAppResponse {
		if v == nil {
			return nil
		}
		return &v.AzureApp
	}).(AzureActiveDirectoryAppResponsePtrOutput)
}

// Backup file share information for all selected databases.
func (o MigrateSqlServerSqlMISyncTaskInputResponsePtrOutput) BackupFileShare() FileShareResponsePtrOutput {
	return o.ApplyT(func(v *MigrateSqlServerSqlMISyncTaskInputResponse) *FileShareResponse {
		if v == nil {
			return nil
		}
		return v.BackupFileShare
	}).(FileShareResponsePtrOutput)
}

// Databases to migrate
func (o MigrateSqlServerSqlMISyncTaskInputResponsePtrOutput) SelectedDatabases() MigrateSqlServerSqlMIDatabaseInputResponseArrayOutput {
	return o.ApplyT(func(v *MigrateSqlServerSqlMISyncTaskInputResponse) []MigrateSqlServerSqlMIDatabaseInputResponse {
		if v == nil {
			return nil
		}
		return v.SelectedDatabases
	}).(MigrateSqlServerSqlMIDatabaseInputResponseArrayOutput)
}

// Connection information for source SQL Server
func (o MigrateSqlServerSqlMISyncTaskInputResponsePtrOutput) SourceConnectionInfo() SqlConnectionInfoResponsePtrOutput {
	return o.ApplyT(func(v *MigrateSqlServerSqlMISyncTaskInputResponse) *SqlConnectionInfoResponse {
		if v == nil {
			return nil
		}
		return &v.SourceConnectionInfo
	}).(SqlConnectionInfoResponsePtrOutput)
}

// Fully qualified resourceId of storage
func (o MigrateSqlServerSqlMISyncTaskInputResponsePtrOutput) StorageResourceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MigrateSqlServerSqlMISyncTaskInputResponse) *string {
		if v == nil {
			return nil
		}
		return &v.StorageResourceId
	}).(pulumi.StringPtrOutput)
}

// Connection information for Azure SQL Database Managed Instance
func (o MigrateSqlServerSqlMISyncTaskInputResponsePtrOutput) TargetConnectionInfo() MiSqlConnectionInfoResponsePtrOutput {
	return o.ApplyT(func(v *MigrateSqlServerSqlMISyncTaskInputResponse) *MiSqlConnectionInfoResponse {
		if v == nil {
			return nil
		}
		return &v.TargetConnectionInfo
	}).(MiSqlConnectionInfoResponsePtrOutput)
}

type MigrateSqlServerSqlMISyncTaskOutputDatabaseLevelResponse struct {
	// Backup sets that are currently active (Either being uploaded or getting restored)
	ActiveBackupSets []BackupSetInfoResponse `pulumi:"activeBackupSets"`
	// Name of container created in the Azure Storage account where backups are copied to
	ContainerName string `pulumi:"containerName"`
	// Database migration end time
	EndedOn string `pulumi:"endedOn"`
	// prefix string to use for querying errors for this database
	ErrorPrefix string `pulumi:"errorPrefix"`
	// Migration exceptions and warnings
	ExceptionsAndWarnings []ReportableExceptionResponse `pulumi:"exceptionsAndWarnings"`
	// Details of full backup set
	FullBackupSetInfo BackupSetInfoResponse `pulumi:"fullBackupSetInfo"`
	// Result identifier
	Id string `pulumi:"id"`
	// Whether full backup has been applied to the target database or not
	IsFullBackupRestored bool `pulumi:"isFullBackupRestored"`
	// Last applied backup set information
	LastRestoredBackupSetInfo BackupSetInfoResponse `pulumi:"lastRestoredBackupSetInfo"`
	// Current state of database
	MigrationState string `pulumi:"migrationState"`
	// Result type
	ResultType string `pulumi:"resultType"`
	// Name of the database
	SourceDatabaseName string `pulumi:"sourceDatabaseName"`
	// Database migration start time
	StartedOn string `pulumi:"startedOn"`
}

type MigrateSqlServerSqlMISyncTaskOutputDatabaseLevelResponseOutput struct{ *pulumi.OutputState }

func (MigrateSqlServerSqlMISyncTaskOutputDatabaseLevelResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MigrateSqlServerSqlMISyncTaskOutputDatabaseLevelResponse)(nil)).Elem()
}

func (o MigrateSqlServerSqlMISyncTaskOutputDatabaseLevelResponseOutput) ToMigrateSqlServerSqlMISyncTaskOutputDatabaseLevelResponseOutput() MigrateSqlServerSqlMISyncTaskOutputDatabaseLevelResponseOutput {
	return o
}

func (o MigrateSqlServerSqlMISyncTaskOutputDatabaseLevelResponseOutput) ToMigrateSqlServerSqlMISyncTaskOutputDatabaseLevelResponseOutputWithContext(ctx context.Context) MigrateSqlServerSqlMISyncTaskOutputDatabaseLevelResponseOutput {
	return o
}

// Backup sets that are currently active (Either being uploaded or getting restored)
func (o MigrateSqlServerSqlMISyncTaskOutputDatabaseLevelResponseOutput) ActiveBackupSets() BackupSetInfoResponseArrayOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlMISyncTaskOutputDatabaseLevelResponse) []BackupSetInfoResponse {
		return v.ActiveBackupSets
	}).(BackupSetInfoResponseArrayOutput)
}

// Name of container created in the Azure Storage account where backups are copied to
func (o MigrateSqlServerSqlMISyncTaskOutputDatabaseLevelResponseOutput) ContainerName() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlMISyncTaskOutputDatabaseLevelResponse) string { return v.ContainerName }).(pulumi.StringOutput)
}

// Database migration end time
func (o MigrateSqlServerSqlMISyncTaskOutputDatabaseLevelResponseOutput) EndedOn() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlMISyncTaskOutputDatabaseLevelResponse) string { return v.EndedOn }).(pulumi.StringOutput)
}

// prefix string to use for querying errors for this database
func (o MigrateSqlServerSqlMISyncTaskOutputDatabaseLevelResponseOutput) ErrorPrefix() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlMISyncTaskOutputDatabaseLevelResponse) string { return v.ErrorPrefix }).(pulumi.StringOutput)
}

// Migration exceptions and warnings
func (o MigrateSqlServerSqlMISyncTaskOutputDatabaseLevelResponseOutput) ExceptionsAndWarnings() ReportableExceptionResponseArrayOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlMISyncTaskOutputDatabaseLevelResponse) []ReportableExceptionResponse {
		return v.ExceptionsAndWarnings
	}).(ReportableExceptionResponseArrayOutput)
}

// Details of full backup set
func (o MigrateSqlServerSqlMISyncTaskOutputDatabaseLevelResponseOutput) FullBackupSetInfo() BackupSetInfoResponseOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlMISyncTaskOutputDatabaseLevelResponse) BackupSetInfoResponse {
		return v.FullBackupSetInfo
	}).(BackupSetInfoResponseOutput)
}

// Result identifier
func (o MigrateSqlServerSqlMISyncTaskOutputDatabaseLevelResponseOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlMISyncTaskOutputDatabaseLevelResponse) string { return v.Id }).(pulumi.StringOutput)
}

// Whether full backup has been applied to the target database or not
func (o MigrateSqlServerSqlMISyncTaskOutputDatabaseLevelResponseOutput) IsFullBackupRestored() pulumi.BoolOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlMISyncTaskOutputDatabaseLevelResponse) bool { return v.IsFullBackupRestored }).(pulumi.BoolOutput)
}

// Last applied backup set information
func (o MigrateSqlServerSqlMISyncTaskOutputDatabaseLevelResponseOutput) LastRestoredBackupSetInfo() BackupSetInfoResponseOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlMISyncTaskOutputDatabaseLevelResponse) BackupSetInfoResponse {
		return v.LastRestoredBackupSetInfo
	}).(BackupSetInfoResponseOutput)
}

// Current state of database
func (o MigrateSqlServerSqlMISyncTaskOutputDatabaseLevelResponseOutput) MigrationState() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlMISyncTaskOutputDatabaseLevelResponse) string { return v.MigrationState }).(pulumi.StringOutput)
}

// Result type
func (o MigrateSqlServerSqlMISyncTaskOutputDatabaseLevelResponseOutput) ResultType() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlMISyncTaskOutputDatabaseLevelResponse) string { return v.ResultType }).(pulumi.StringOutput)
}

// Name of the database
func (o MigrateSqlServerSqlMISyncTaskOutputDatabaseLevelResponseOutput) SourceDatabaseName() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlMISyncTaskOutputDatabaseLevelResponse) string { return v.SourceDatabaseName }).(pulumi.StringOutput)
}

// Database migration start time
func (o MigrateSqlServerSqlMISyncTaskOutputDatabaseLevelResponseOutput) StartedOn() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlMISyncTaskOutputDatabaseLevelResponse) string { return v.StartedOn }).(pulumi.StringOutput)
}

type MigrateSqlServerSqlMISyncTaskOutputErrorResponse struct {
	// Migration error
	Error ReportableExceptionResponse `pulumi:"error"`
	// Result identifier
	Id string `pulumi:"id"`
	// Result type
	ResultType string `pulumi:"resultType"`
}

type MigrateSqlServerSqlMISyncTaskOutputErrorResponseOutput struct{ *pulumi.OutputState }

func (MigrateSqlServerSqlMISyncTaskOutputErrorResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MigrateSqlServerSqlMISyncTaskOutputErrorResponse)(nil)).Elem()
}

func (o MigrateSqlServerSqlMISyncTaskOutputErrorResponseOutput) ToMigrateSqlServerSqlMISyncTaskOutputErrorResponseOutput() MigrateSqlServerSqlMISyncTaskOutputErrorResponseOutput {
	return o
}

func (o MigrateSqlServerSqlMISyncTaskOutputErrorResponseOutput) ToMigrateSqlServerSqlMISyncTaskOutputErrorResponseOutputWithContext(ctx context.Context) MigrateSqlServerSqlMISyncTaskOutputErrorResponseOutput {
	return o
}

// Migration error
func (o MigrateSqlServerSqlMISyncTaskOutputErrorResponseOutput) Error() ReportableExceptionResponseOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlMISyncTaskOutputErrorResponse) ReportableExceptionResponse { return v.Error }).(ReportableExceptionResponseOutput)
}

// Result identifier
func (o MigrateSqlServerSqlMISyncTaskOutputErrorResponseOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlMISyncTaskOutputErrorResponse) string { return v.Id }).(pulumi.StringOutput)
}

// Result type
func (o MigrateSqlServerSqlMISyncTaskOutputErrorResponseOutput) ResultType() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlMISyncTaskOutputErrorResponse) string { return v.ResultType }).(pulumi.StringOutput)
}

type MigrateSqlServerSqlMISyncTaskOutputMigrationLevelResponse struct {
	// Count of databases
	DatabaseCount int `pulumi:"databaseCount"`
	// Number of database level errors
	DatabaseErrorCount int `pulumi:"databaseErrorCount"`
	// Migration end time
	EndedOn string `pulumi:"endedOn"`
	// Result identifier
	Id string `pulumi:"id"`
	// Result type
	ResultType string `pulumi:"resultType"`
	// Source server brand version
	SourceServerBrandVersion string `pulumi:"sourceServerBrandVersion"`
	// Source server name
	SourceServerName string `pulumi:"sourceServerName"`
	// Source server version
	SourceServerVersion string `pulumi:"sourceServerVersion"`
	// Migration start time
	StartedOn string `pulumi:"startedOn"`
	// Current state of migration
	State string `pulumi:"state"`
	// Target server brand version
	TargetServerBrandVersion string `pulumi:"targetServerBrandVersion"`
	// Target server name
	TargetServerName string `pulumi:"targetServerName"`
	// Target server version
	TargetServerVersion string `pulumi:"targetServerVersion"`
}

type MigrateSqlServerSqlMISyncTaskOutputMigrationLevelResponseOutput struct{ *pulumi.OutputState }

func (MigrateSqlServerSqlMISyncTaskOutputMigrationLevelResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MigrateSqlServerSqlMISyncTaskOutputMigrationLevelResponse)(nil)).Elem()
}

func (o MigrateSqlServerSqlMISyncTaskOutputMigrationLevelResponseOutput) ToMigrateSqlServerSqlMISyncTaskOutputMigrationLevelResponseOutput() MigrateSqlServerSqlMISyncTaskOutputMigrationLevelResponseOutput {
	return o
}

func (o MigrateSqlServerSqlMISyncTaskOutputMigrationLevelResponseOutput) ToMigrateSqlServerSqlMISyncTaskOutputMigrationLevelResponseOutputWithContext(ctx context.Context) MigrateSqlServerSqlMISyncTaskOutputMigrationLevelResponseOutput {
	return o
}

// Count of databases
func (o MigrateSqlServerSqlMISyncTaskOutputMigrationLevelResponseOutput) DatabaseCount() pulumi.IntOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlMISyncTaskOutputMigrationLevelResponse) int { return v.DatabaseCount }).(pulumi.IntOutput)
}

// Number of database level errors
func (o MigrateSqlServerSqlMISyncTaskOutputMigrationLevelResponseOutput) DatabaseErrorCount() pulumi.IntOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlMISyncTaskOutputMigrationLevelResponse) int { return v.DatabaseErrorCount }).(pulumi.IntOutput)
}

// Migration end time
func (o MigrateSqlServerSqlMISyncTaskOutputMigrationLevelResponseOutput) EndedOn() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlMISyncTaskOutputMigrationLevelResponse) string { return v.EndedOn }).(pulumi.StringOutput)
}

// Result identifier
func (o MigrateSqlServerSqlMISyncTaskOutputMigrationLevelResponseOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlMISyncTaskOutputMigrationLevelResponse) string { return v.Id }).(pulumi.StringOutput)
}

// Result type
func (o MigrateSqlServerSqlMISyncTaskOutputMigrationLevelResponseOutput) ResultType() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlMISyncTaskOutputMigrationLevelResponse) string { return v.ResultType }).(pulumi.StringOutput)
}

// Source server brand version
func (o MigrateSqlServerSqlMISyncTaskOutputMigrationLevelResponseOutput) SourceServerBrandVersion() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlMISyncTaskOutputMigrationLevelResponse) string {
		return v.SourceServerBrandVersion
	}).(pulumi.StringOutput)
}

// Source server name
func (o MigrateSqlServerSqlMISyncTaskOutputMigrationLevelResponseOutput) SourceServerName() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlMISyncTaskOutputMigrationLevelResponse) string { return v.SourceServerName }).(pulumi.StringOutput)
}

// Source server version
func (o MigrateSqlServerSqlMISyncTaskOutputMigrationLevelResponseOutput) SourceServerVersion() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlMISyncTaskOutputMigrationLevelResponse) string { return v.SourceServerVersion }).(pulumi.StringOutput)
}

// Migration start time
func (o MigrateSqlServerSqlMISyncTaskOutputMigrationLevelResponseOutput) StartedOn() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlMISyncTaskOutputMigrationLevelResponse) string { return v.StartedOn }).(pulumi.StringOutput)
}

// Current state of migration
func (o MigrateSqlServerSqlMISyncTaskOutputMigrationLevelResponseOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlMISyncTaskOutputMigrationLevelResponse) string { return v.State }).(pulumi.StringOutput)
}

// Target server brand version
func (o MigrateSqlServerSqlMISyncTaskOutputMigrationLevelResponseOutput) TargetServerBrandVersion() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlMISyncTaskOutputMigrationLevelResponse) string {
		return v.TargetServerBrandVersion
	}).(pulumi.StringOutput)
}

// Target server name
func (o MigrateSqlServerSqlMISyncTaskOutputMigrationLevelResponseOutput) TargetServerName() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlMISyncTaskOutputMigrationLevelResponse) string { return v.TargetServerName }).(pulumi.StringOutput)
}

// Target server version
func (o MigrateSqlServerSqlMISyncTaskOutputMigrationLevelResponseOutput) TargetServerVersion() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlMISyncTaskOutputMigrationLevelResponse) string { return v.TargetServerVersion }).(pulumi.StringOutput)
}

// Properties for task that migrates SQL Server databases to Azure SQL Database Managed Instance sync scenario
type MigrateSqlServerSqlMISyncTaskProperties struct {
	// Key value pairs of client data to attach meta data information to task
	ClientData map[string]string `pulumi:"clientData"`
	// Task input
	Input *MigrateSqlServerSqlMISyncTaskInput `pulumi:"input"`
	// Task type.
	TaskType string `pulumi:"taskType"`
}

// MigrateSqlServerSqlMISyncTaskPropertiesInput is an input type that accepts MigrateSqlServerSqlMISyncTaskPropertiesArgs and MigrateSqlServerSqlMISyncTaskPropertiesOutput values.
// You can construct a concrete instance of `MigrateSqlServerSqlMISyncTaskPropertiesInput` via:
//
//          MigrateSqlServerSqlMISyncTaskPropertiesArgs{...}
type MigrateSqlServerSqlMISyncTaskPropertiesInput interface {
	pulumi.Input

	ToMigrateSqlServerSqlMISyncTaskPropertiesOutput() MigrateSqlServerSqlMISyncTaskPropertiesOutput
	ToMigrateSqlServerSqlMISyncTaskPropertiesOutputWithContext(context.Context) MigrateSqlServerSqlMISyncTaskPropertiesOutput
}

// Properties for task that migrates SQL Server databases to Azure SQL Database Managed Instance sync scenario
type MigrateSqlServerSqlMISyncTaskPropertiesArgs struct {
	// Key value pairs of client data to attach meta data information to task
	ClientData pulumi.StringMapInput `pulumi:"clientData"`
	// Task input
	Input MigrateSqlServerSqlMISyncTaskInputPtrInput `pulumi:"input"`
	// Task type.
	TaskType pulumi.StringInput `pulumi:"taskType"`
}

func (MigrateSqlServerSqlMISyncTaskPropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MigrateSqlServerSqlMISyncTaskProperties)(nil)).Elem()
}

func (i MigrateSqlServerSqlMISyncTaskPropertiesArgs) ToMigrateSqlServerSqlMISyncTaskPropertiesOutput() MigrateSqlServerSqlMISyncTaskPropertiesOutput {
	return i.ToMigrateSqlServerSqlMISyncTaskPropertiesOutputWithContext(context.Background())
}

func (i MigrateSqlServerSqlMISyncTaskPropertiesArgs) ToMigrateSqlServerSqlMISyncTaskPropertiesOutputWithContext(ctx context.Context) MigrateSqlServerSqlMISyncTaskPropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MigrateSqlServerSqlMISyncTaskPropertiesOutput)
}

// Properties for task that migrates SQL Server databases to Azure SQL Database Managed Instance sync scenario
type MigrateSqlServerSqlMISyncTaskPropertiesResponse struct {
	// Key value pairs of client data to attach meta data information to task
	ClientData map[string]string `pulumi:"clientData"`
	// Array of command properties.
	Commands []interface{} `pulumi:"commands"`
	// Array of errors. This is ignored if submitted.
	Errors []ODataErrorResponse `pulumi:"errors"`
	// Task input
	Input *MigrateSqlServerSqlMISyncTaskInputResponse `pulumi:"input"`
	// Task output. This is ignored if submitted.
	Output []interface{} `pulumi:"output"`
	// The state of the task. This is ignored if submitted.
	State string `pulumi:"state"`
	// Task type.
	TaskType string `pulumi:"taskType"`
}

// Properties for task that migrates SQL Server databases to Azure SQL Database Managed Instance sync scenario
type MigrateSqlServerSqlMISyncTaskPropertiesResponseOutput struct{ *pulumi.OutputState }

func (MigrateSqlServerSqlMISyncTaskPropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MigrateSqlServerSqlMISyncTaskPropertiesResponse)(nil)).Elem()
}

func (o MigrateSqlServerSqlMISyncTaskPropertiesResponseOutput) ToMigrateSqlServerSqlMISyncTaskPropertiesResponseOutput() MigrateSqlServerSqlMISyncTaskPropertiesResponseOutput {
	return o
}

func (o MigrateSqlServerSqlMISyncTaskPropertiesResponseOutput) ToMigrateSqlServerSqlMISyncTaskPropertiesResponseOutputWithContext(ctx context.Context) MigrateSqlServerSqlMISyncTaskPropertiesResponseOutput {
	return o
}

// Key value pairs of client data to attach meta data information to task
func (o MigrateSqlServerSqlMISyncTaskPropertiesResponseOutput) ClientData() pulumi.StringMapOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlMISyncTaskPropertiesResponse) map[string]string { return v.ClientData }).(pulumi.StringMapOutput)
}

// Array of command properties.
func (o MigrateSqlServerSqlMISyncTaskPropertiesResponseOutput) Commands() pulumi.ArrayOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlMISyncTaskPropertiesResponse) []interface{} { return v.Commands }).(pulumi.ArrayOutput)
}

// Array of errors. This is ignored if submitted.
func (o MigrateSqlServerSqlMISyncTaskPropertiesResponseOutput) Errors() ODataErrorResponseArrayOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlMISyncTaskPropertiesResponse) []ODataErrorResponse { return v.Errors }).(ODataErrorResponseArrayOutput)
}

// Task input
func (o MigrateSqlServerSqlMISyncTaskPropertiesResponseOutput) Input() MigrateSqlServerSqlMISyncTaskInputResponsePtrOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlMISyncTaskPropertiesResponse) *MigrateSqlServerSqlMISyncTaskInputResponse {
		return v.Input
	}).(MigrateSqlServerSqlMISyncTaskInputResponsePtrOutput)
}

// Task output. This is ignored if submitted.
func (o MigrateSqlServerSqlMISyncTaskPropertiesResponseOutput) Output() pulumi.ArrayOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlMISyncTaskPropertiesResponse) []interface{} { return v.Output }).(pulumi.ArrayOutput)
}

// The state of the task. This is ignored if submitted.
func (o MigrateSqlServerSqlMISyncTaskPropertiesResponseOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlMISyncTaskPropertiesResponse) string { return v.State }).(pulumi.StringOutput)
}

// Task type.
func (o MigrateSqlServerSqlMISyncTaskPropertiesResponseOutput) TaskType() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlMISyncTaskPropertiesResponse) string { return v.TaskType }).(pulumi.StringOutput)
}

// Input for task that migrates SQL Server databases to Azure SQL Database Managed Instance.
type MigrateSqlServerSqlMITaskInput struct {
	// Azure Active Directory domain name in the format of 'contoso.com' for federated Azure AD or 'contoso.onmicrosoft.com' for managed domain, required if and only if Windows logins are selected
	AadDomainName *string `pulumi:"aadDomainName"`
	// SAS URI of Azure Storage Account Container to be used for storing backup files.
	BackupBlobShare BlobShare `pulumi:"backupBlobShare"`
	// Backup file share information for all selected databases.
	BackupFileShare *FileShare `pulumi:"backupFileShare"`
	// Backup Mode to specify whether to use existing backup or create new backup. If using existing backups, backup file paths are required to be provided in selectedDatabases.
	BackupMode *string `pulumi:"backupMode"`
	// Agent Jobs to migrate.
	SelectedAgentJobs []string `pulumi:"selectedAgentJobs"`
	// Databases to migrate
	SelectedDatabases []MigrateSqlServerSqlMIDatabaseInput `pulumi:"selectedDatabases"`
	// Logins to migrate.
	SelectedLogins []string `pulumi:"selectedLogins"`
	// Information for connecting to source
	SourceConnectionInfo SqlConnectionInfo `pulumi:"sourceConnectionInfo"`
	// Information for connecting to target
	TargetConnectionInfo SqlConnectionInfo `pulumi:"targetConnectionInfo"`
}

// MigrateSqlServerSqlMITaskInputInput is an input type that accepts MigrateSqlServerSqlMITaskInputArgs and MigrateSqlServerSqlMITaskInputOutput values.
// You can construct a concrete instance of `MigrateSqlServerSqlMITaskInputInput` via:
//
//          MigrateSqlServerSqlMITaskInputArgs{...}
type MigrateSqlServerSqlMITaskInputInput interface {
	pulumi.Input

	ToMigrateSqlServerSqlMITaskInputOutput() MigrateSqlServerSqlMITaskInputOutput
	ToMigrateSqlServerSqlMITaskInputOutputWithContext(context.Context) MigrateSqlServerSqlMITaskInputOutput
}

// Input for task that migrates SQL Server databases to Azure SQL Database Managed Instance.
type MigrateSqlServerSqlMITaskInputArgs struct {
	// Azure Active Directory domain name in the format of 'contoso.com' for federated Azure AD or 'contoso.onmicrosoft.com' for managed domain, required if and only if Windows logins are selected
	AadDomainName pulumi.StringPtrInput `pulumi:"aadDomainName"`
	// SAS URI of Azure Storage Account Container to be used for storing backup files.
	BackupBlobShare BlobShareInput `pulumi:"backupBlobShare"`
	// Backup file share information for all selected databases.
	BackupFileShare FileSharePtrInput `pulumi:"backupFileShare"`
	// Backup Mode to specify whether to use existing backup or create new backup. If using existing backups, backup file paths are required to be provided in selectedDatabases.
	BackupMode pulumi.StringPtrInput `pulumi:"backupMode"`
	// Agent Jobs to migrate.
	SelectedAgentJobs pulumi.StringArrayInput `pulumi:"selectedAgentJobs"`
	// Databases to migrate
	SelectedDatabases MigrateSqlServerSqlMIDatabaseInputArrayInput `pulumi:"selectedDatabases"`
	// Logins to migrate.
	SelectedLogins pulumi.StringArrayInput `pulumi:"selectedLogins"`
	// Information for connecting to source
	SourceConnectionInfo SqlConnectionInfoInput `pulumi:"sourceConnectionInfo"`
	// Information for connecting to target
	TargetConnectionInfo SqlConnectionInfoInput `pulumi:"targetConnectionInfo"`
}

func (MigrateSqlServerSqlMITaskInputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MigrateSqlServerSqlMITaskInput)(nil)).Elem()
}

func (i MigrateSqlServerSqlMITaskInputArgs) ToMigrateSqlServerSqlMITaskInputOutput() MigrateSqlServerSqlMITaskInputOutput {
	return i.ToMigrateSqlServerSqlMITaskInputOutputWithContext(context.Background())
}

func (i MigrateSqlServerSqlMITaskInputArgs) ToMigrateSqlServerSqlMITaskInputOutputWithContext(ctx context.Context) MigrateSqlServerSqlMITaskInputOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MigrateSqlServerSqlMITaskInputOutput)
}

func (i MigrateSqlServerSqlMITaskInputArgs) ToMigrateSqlServerSqlMITaskInputPtrOutput() MigrateSqlServerSqlMITaskInputPtrOutput {
	return i.ToMigrateSqlServerSqlMITaskInputPtrOutputWithContext(context.Background())
}

func (i MigrateSqlServerSqlMITaskInputArgs) ToMigrateSqlServerSqlMITaskInputPtrOutputWithContext(ctx context.Context) MigrateSqlServerSqlMITaskInputPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MigrateSqlServerSqlMITaskInputOutput).ToMigrateSqlServerSqlMITaskInputPtrOutputWithContext(ctx)
}

// MigrateSqlServerSqlMITaskInputPtrInput is an input type that accepts MigrateSqlServerSqlMITaskInputArgs, MigrateSqlServerSqlMITaskInputPtr and MigrateSqlServerSqlMITaskInputPtrOutput values.
// You can construct a concrete instance of `MigrateSqlServerSqlMITaskInputPtrInput` via:
//
//          MigrateSqlServerSqlMITaskInputArgs{...}
//
//  or:
//
//          nil
type MigrateSqlServerSqlMITaskInputPtrInput interface {
	pulumi.Input

	ToMigrateSqlServerSqlMITaskInputPtrOutput() MigrateSqlServerSqlMITaskInputPtrOutput
	ToMigrateSqlServerSqlMITaskInputPtrOutputWithContext(context.Context) MigrateSqlServerSqlMITaskInputPtrOutput
}

type migrateSqlServerSqlMITaskInputPtrType MigrateSqlServerSqlMITaskInputArgs

func MigrateSqlServerSqlMITaskInputPtr(v *MigrateSqlServerSqlMITaskInputArgs) MigrateSqlServerSqlMITaskInputPtrInput {
	return (*migrateSqlServerSqlMITaskInputPtrType)(v)
}

func (*migrateSqlServerSqlMITaskInputPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**MigrateSqlServerSqlMITaskInput)(nil)).Elem()
}

func (i *migrateSqlServerSqlMITaskInputPtrType) ToMigrateSqlServerSqlMITaskInputPtrOutput() MigrateSqlServerSqlMITaskInputPtrOutput {
	return i.ToMigrateSqlServerSqlMITaskInputPtrOutputWithContext(context.Background())
}

func (i *migrateSqlServerSqlMITaskInputPtrType) ToMigrateSqlServerSqlMITaskInputPtrOutputWithContext(ctx context.Context) MigrateSqlServerSqlMITaskInputPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MigrateSqlServerSqlMITaskInputPtrOutput)
}

// Input for task that migrates SQL Server databases to Azure SQL Database Managed Instance.
type MigrateSqlServerSqlMITaskInputResponse struct {
	// Azure Active Directory domain name in the format of 'contoso.com' for federated Azure AD or 'contoso.onmicrosoft.com' for managed domain, required if and only if Windows logins are selected
	AadDomainName *string `pulumi:"aadDomainName"`
	// SAS URI of Azure Storage Account Container to be used for storing backup files.
	BackupBlobShare BlobShareResponse `pulumi:"backupBlobShare"`
	// Backup file share information for all selected databases.
	BackupFileShare *FileShareResponse `pulumi:"backupFileShare"`
	// Backup Mode to specify whether to use existing backup or create new backup. If using existing backups, backup file paths are required to be provided in selectedDatabases.
	BackupMode *string `pulumi:"backupMode"`
	// Agent Jobs to migrate.
	SelectedAgentJobs []string `pulumi:"selectedAgentJobs"`
	// Databases to migrate
	SelectedDatabases []MigrateSqlServerSqlMIDatabaseInputResponse `pulumi:"selectedDatabases"`
	// Logins to migrate.
	SelectedLogins []string `pulumi:"selectedLogins"`
	// Information for connecting to source
	SourceConnectionInfo SqlConnectionInfoResponse `pulumi:"sourceConnectionInfo"`
	// Information for connecting to target
	TargetConnectionInfo SqlConnectionInfoResponse `pulumi:"targetConnectionInfo"`
}

// Input for task that migrates SQL Server databases to Azure SQL Database Managed Instance.
type MigrateSqlServerSqlMITaskInputResponseOutput struct{ *pulumi.OutputState }

func (MigrateSqlServerSqlMITaskInputResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MigrateSqlServerSqlMITaskInputResponse)(nil)).Elem()
}

func (o MigrateSqlServerSqlMITaskInputResponseOutput) ToMigrateSqlServerSqlMITaskInputResponseOutput() MigrateSqlServerSqlMITaskInputResponseOutput {
	return o
}

func (o MigrateSqlServerSqlMITaskInputResponseOutput) ToMigrateSqlServerSqlMITaskInputResponseOutputWithContext(ctx context.Context) MigrateSqlServerSqlMITaskInputResponseOutput {
	return o
}

func (o MigrateSqlServerSqlMITaskInputResponseOutput) ToMigrateSqlServerSqlMITaskInputResponsePtrOutput() MigrateSqlServerSqlMITaskInputResponsePtrOutput {
	return o.ToMigrateSqlServerSqlMITaskInputResponsePtrOutputWithContext(context.Background())
}

func (o MigrateSqlServerSqlMITaskInputResponseOutput) ToMigrateSqlServerSqlMITaskInputResponsePtrOutputWithContext(ctx context.Context) MigrateSqlServerSqlMITaskInputResponsePtrOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlMITaskInputResponse) *MigrateSqlServerSqlMITaskInputResponse {
		return &v
	}).(MigrateSqlServerSqlMITaskInputResponsePtrOutput)
}

// Azure Active Directory domain name in the format of 'contoso.com' for federated Azure AD or 'contoso.onmicrosoft.com' for managed domain, required if and only if Windows logins are selected
func (o MigrateSqlServerSqlMITaskInputResponseOutput) AadDomainName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlMITaskInputResponse) *string { return v.AadDomainName }).(pulumi.StringPtrOutput)
}

// SAS URI of Azure Storage Account Container to be used for storing backup files.
func (o MigrateSqlServerSqlMITaskInputResponseOutput) BackupBlobShare() BlobShareResponseOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlMITaskInputResponse) BlobShareResponse { return v.BackupBlobShare }).(BlobShareResponseOutput)
}

// Backup file share information for all selected databases.
func (o MigrateSqlServerSqlMITaskInputResponseOutput) BackupFileShare() FileShareResponsePtrOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlMITaskInputResponse) *FileShareResponse { return v.BackupFileShare }).(FileShareResponsePtrOutput)
}

// Backup Mode to specify whether to use existing backup or create new backup. If using existing backups, backup file paths are required to be provided in selectedDatabases.
func (o MigrateSqlServerSqlMITaskInputResponseOutput) BackupMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlMITaskInputResponse) *string { return v.BackupMode }).(pulumi.StringPtrOutput)
}

// Agent Jobs to migrate.
func (o MigrateSqlServerSqlMITaskInputResponseOutput) SelectedAgentJobs() pulumi.StringArrayOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlMITaskInputResponse) []string { return v.SelectedAgentJobs }).(pulumi.StringArrayOutput)
}

// Databases to migrate
func (o MigrateSqlServerSqlMITaskInputResponseOutput) SelectedDatabases() MigrateSqlServerSqlMIDatabaseInputResponseArrayOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlMITaskInputResponse) []MigrateSqlServerSqlMIDatabaseInputResponse {
		return v.SelectedDatabases
	}).(MigrateSqlServerSqlMIDatabaseInputResponseArrayOutput)
}

// Logins to migrate.
func (o MigrateSqlServerSqlMITaskInputResponseOutput) SelectedLogins() pulumi.StringArrayOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlMITaskInputResponse) []string { return v.SelectedLogins }).(pulumi.StringArrayOutput)
}

// Information for connecting to source
func (o MigrateSqlServerSqlMITaskInputResponseOutput) SourceConnectionInfo() SqlConnectionInfoResponseOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlMITaskInputResponse) SqlConnectionInfoResponse {
		return v.SourceConnectionInfo
	}).(SqlConnectionInfoResponseOutput)
}

// Information for connecting to target
func (o MigrateSqlServerSqlMITaskInputResponseOutput) TargetConnectionInfo() SqlConnectionInfoResponseOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlMITaskInputResponse) SqlConnectionInfoResponse {
		return v.TargetConnectionInfo
	}).(SqlConnectionInfoResponseOutput)
}

type MigrateSqlServerSqlMITaskInputResponsePtrOutput struct{ *pulumi.OutputState }

func (MigrateSqlServerSqlMITaskInputResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MigrateSqlServerSqlMITaskInputResponse)(nil)).Elem()
}

func (o MigrateSqlServerSqlMITaskInputResponsePtrOutput) ToMigrateSqlServerSqlMITaskInputResponsePtrOutput() MigrateSqlServerSqlMITaskInputResponsePtrOutput {
	return o
}

func (o MigrateSqlServerSqlMITaskInputResponsePtrOutput) ToMigrateSqlServerSqlMITaskInputResponsePtrOutputWithContext(ctx context.Context) MigrateSqlServerSqlMITaskInputResponsePtrOutput {
	return o
}

func (o MigrateSqlServerSqlMITaskInputResponsePtrOutput) Elem() MigrateSqlServerSqlMITaskInputResponseOutput {
	return o.ApplyT(func(v *MigrateSqlServerSqlMITaskInputResponse) MigrateSqlServerSqlMITaskInputResponse { return *v }).(MigrateSqlServerSqlMITaskInputResponseOutput)
}

// Azure Active Directory domain name in the format of 'contoso.com' for federated Azure AD or 'contoso.onmicrosoft.com' for managed domain, required if and only if Windows logins are selected
func (o MigrateSqlServerSqlMITaskInputResponsePtrOutput) AadDomainName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MigrateSqlServerSqlMITaskInputResponse) *string {
		if v == nil {
			return nil
		}
		return v.AadDomainName
	}).(pulumi.StringPtrOutput)
}

// SAS URI of Azure Storage Account Container to be used for storing backup files.
func (o MigrateSqlServerSqlMITaskInputResponsePtrOutput) BackupBlobShare() BlobShareResponsePtrOutput {
	return o.ApplyT(func(v *MigrateSqlServerSqlMITaskInputResponse) *BlobShareResponse {
		if v == nil {
			return nil
		}
		return &v.BackupBlobShare
	}).(BlobShareResponsePtrOutput)
}

// Backup file share information for all selected databases.
func (o MigrateSqlServerSqlMITaskInputResponsePtrOutput) BackupFileShare() FileShareResponsePtrOutput {
	return o.ApplyT(func(v *MigrateSqlServerSqlMITaskInputResponse) *FileShareResponse {
		if v == nil {
			return nil
		}
		return v.BackupFileShare
	}).(FileShareResponsePtrOutput)
}

// Backup Mode to specify whether to use existing backup or create new backup. If using existing backups, backup file paths are required to be provided in selectedDatabases.
func (o MigrateSqlServerSqlMITaskInputResponsePtrOutput) BackupMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MigrateSqlServerSqlMITaskInputResponse) *string {
		if v == nil {
			return nil
		}
		return v.BackupMode
	}).(pulumi.StringPtrOutput)
}

// Agent Jobs to migrate.
func (o MigrateSqlServerSqlMITaskInputResponsePtrOutput) SelectedAgentJobs() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *MigrateSqlServerSqlMITaskInputResponse) []string {
		if v == nil {
			return nil
		}
		return v.SelectedAgentJobs
	}).(pulumi.StringArrayOutput)
}

// Databases to migrate
func (o MigrateSqlServerSqlMITaskInputResponsePtrOutput) SelectedDatabases() MigrateSqlServerSqlMIDatabaseInputResponseArrayOutput {
	return o.ApplyT(func(v *MigrateSqlServerSqlMITaskInputResponse) []MigrateSqlServerSqlMIDatabaseInputResponse {
		if v == nil {
			return nil
		}
		return v.SelectedDatabases
	}).(MigrateSqlServerSqlMIDatabaseInputResponseArrayOutput)
}

// Logins to migrate.
func (o MigrateSqlServerSqlMITaskInputResponsePtrOutput) SelectedLogins() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *MigrateSqlServerSqlMITaskInputResponse) []string {
		if v == nil {
			return nil
		}
		return v.SelectedLogins
	}).(pulumi.StringArrayOutput)
}

// Information for connecting to source
func (o MigrateSqlServerSqlMITaskInputResponsePtrOutput) SourceConnectionInfo() SqlConnectionInfoResponsePtrOutput {
	return o.ApplyT(func(v *MigrateSqlServerSqlMITaskInputResponse) *SqlConnectionInfoResponse {
		if v == nil {
			return nil
		}
		return &v.SourceConnectionInfo
	}).(SqlConnectionInfoResponsePtrOutput)
}

// Information for connecting to target
func (o MigrateSqlServerSqlMITaskInputResponsePtrOutput) TargetConnectionInfo() SqlConnectionInfoResponsePtrOutput {
	return o.ApplyT(func(v *MigrateSqlServerSqlMITaskInputResponse) *SqlConnectionInfoResponse {
		if v == nil {
			return nil
		}
		return &v.TargetConnectionInfo
	}).(SqlConnectionInfoResponsePtrOutput)
}

type MigrateSqlServerSqlMITaskOutputAgentJobLevelResponse struct {
	// Migration end time
	EndedOn string `pulumi:"endedOn"`
	// Migration errors and warnings per job
	ExceptionsAndWarnings []ReportableExceptionResponse `pulumi:"exceptionsAndWarnings"`
	// Result identifier
	Id string `pulumi:"id"`
	// The state of the original Agent Job.
	IsEnabled bool `pulumi:"isEnabled"`
	// Migration progress message
	Message string `pulumi:"message"`
	// Agent Job name.
	Name string `pulumi:"name"`
	// Result type
	ResultType string `pulumi:"resultType"`
	// Migration start time
	StartedOn string `pulumi:"startedOn"`
	// Current state of migration
	State string `pulumi:"state"`
}

type MigrateSqlServerSqlMITaskOutputAgentJobLevelResponseOutput struct{ *pulumi.OutputState }

func (MigrateSqlServerSqlMITaskOutputAgentJobLevelResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MigrateSqlServerSqlMITaskOutputAgentJobLevelResponse)(nil)).Elem()
}

func (o MigrateSqlServerSqlMITaskOutputAgentJobLevelResponseOutput) ToMigrateSqlServerSqlMITaskOutputAgentJobLevelResponseOutput() MigrateSqlServerSqlMITaskOutputAgentJobLevelResponseOutput {
	return o
}

func (o MigrateSqlServerSqlMITaskOutputAgentJobLevelResponseOutput) ToMigrateSqlServerSqlMITaskOutputAgentJobLevelResponseOutputWithContext(ctx context.Context) MigrateSqlServerSqlMITaskOutputAgentJobLevelResponseOutput {
	return o
}

// Migration end time
func (o MigrateSqlServerSqlMITaskOutputAgentJobLevelResponseOutput) EndedOn() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlMITaskOutputAgentJobLevelResponse) string { return v.EndedOn }).(pulumi.StringOutput)
}

// Migration errors and warnings per job
func (o MigrateSqlServerSqlMITaskOutputAgentJobLevelResponseOutput) ExceptionsAndWarnings() ReportableExceptionResponseArrayOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlMITaskOutputAgentJobLevelResponse) []ReportableExceptionResponse {
		return v.ExceptionsAndWarnings
	}).(ReportableExceptionResponseArrayOutput)
}

// Result identifier
func (o MigrateSqlServerSqlMITaskOutputAgentJobLevelResponseOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlMITaskOutputAgentJobLevelResponse) string { return v.Id }).(pulumi.StringOutput)
}

// The state of the original Agent Job.
func (o MigrateSqlServerSqlMITaskOutputAgentJobLevelResponseOutput) IsEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlMITaskOutputAgentJobLevelResponse) bool { return v.IsEnabled }).(pulumi.BoolOutput)
}

// Migration progress message
func (o MigrateSqlServerSqlMITaskOutputAgentJobLevelResponseOutput) Message() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlMITaskOutputAgentJobLevelResponse) string { return v.Message }).(pulumi.StringOutput)
}

// Agent Job name.
func (o MigrateSqlServerSqlMITaskOutputAgentJobLevelResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlMITaskOutputAgentJobLevelResponse) string { return v.Name }).(pulumi.StringOutput)
}

// Result type
func (o MigrateSqlServerSqlMITaskOutputAgentJobLevelResponseOutput) ResultType() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlMITaskOutputAgentJobLevelResponse) string { return v.ResultType }).(pulumi.StringOutput)
}

// Migration start time
func (o MigrateSqlServerSqlMITaskOutputAgentJobLevelResponseOutput) StartedOn() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlMITaskOutputAgentJobLevelResponse) string { return v.StartedOn }).(pulumi.StringOutput)
}

// Current state of migration
func (o MigrateSqlServerSqlMITaskOutputAgentJobLevelResponseOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlMITaskOutputAgentJobLevelResponse) string { return v.State }).(pulumi.StringOutput)
}

type MigrateSqlServerSqlMITaskOutputDatabaseLevelResponse struct {
	// Name of the database
	DatabaseName string `pulumi:"databaseName"`
	// Migration end time
	EndedOn string `pulumi:"endedOn"`
	// Migration exceptions and warnings
	ExceptionsAndWarnings []ReportableExceptionResponse `pulumi:"exceptionsAndWarnings"`
	// Result identifier
	Id string `pulumi:"id"`
	// Migration progress message
	Message string `pulumi:"message"`
	// Result type
	ResultType string `pulumi:"resultType"`
	// Size of the database in megabytes
	SizeMB float64 `pulumi:"sizeMB"`
	// Current stage of migration
	Stage string `pulumi:"stage"`
	// Migration start time
	StartedOn string `pulumi:"startedOn"`
	// Current state of migration
	State string `pulumi:"state"`
}

type MigrateSqlServerSqlMITaskOutputDatabaseLevelResponseOutput struct{ *pulumi.OutputState }

func (MigrateSqlServerSqlMITaskOutputDatabaseLevelResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MigrateSqlServerSqlMITaskOutputDatabaseLevelResponse)(nil)).Elem()
}

func (o MigrateSqlServerSqlMITaskOutputDatabaseLevelResponseOutput) ToMigrateSqlServerSqlMITaskOutputDatabaseLevelResponseOutput() MigrateSqlServerSqlMITaskOutputDatabaseLevelResponseOutput {
	return o
}

func (o MigrateSqlServerSqlMITaskOutputDatabaseLevelResponseOutput) ToMigrateSqlServerSqlMITaskOutputDatabaseLevelResponseOutputWithContext(ctx context.Context) MigrateSqlServerSqlMITaskOutputDatabaseLevelResponseOutput {
	return o
}

// Name of the database
func (o MigrateSqlServerSqlMITaskOutputDatabaseLevelResponseOutput) DatabaseName() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlMITaskOutputDatabaseLevelResponse) string { return v.DatabaseName }).(pulumi.StringOutput)
}

// Migration end time
func (o MigrateSqlServerSqlMITaskOutputDatabaseLevelResponseOutput) EndedOn() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlMITaskOutputDatabaseLevelResponse) string { return v.EndedOn }).(pulumi.StringOutput)
}

// Migration exceptions and warnings
func (o MigrateSqlServerSqlMITaskOutputDatabaseLevelResponseOutput) ExceptionsAndWarnings() ReportableExceptionResponseArrayOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlMITaskOutputDatabaseLevelResponse) []ReportableExceptionResponse {
		return v.ExceptionsAndWarnings
	}).(ReportableExceptionResponseArrayOutput)
}

// Result identifier
func (o MigrateSqlServerSqlMITaskOutputDatabaseLevelResponseOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlMITaskOutputDatabaseLevelResponse) string { return v.Id }).(pulumi.StringOutput)
}

// Migration progress message
func (o MigrateSqlServerSqlMITaskOutputDatabaseLevelResponseOutput) Message() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlMITaskOutputDatabaseLevelResponse) string { return v.Message }).(pulumi.StringOutput)
}

// Result type
func (o MigrateSqlServerSqlMITaskOutputDatabaseLevelResponseOutput) ResultType() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlMITaskOutputDatabaseLevelResponse) string { return v.ResultType }).(pulumi.StringOutput)
}

// Size of the database in megabytes
func (o MigrateSqlServerSqlMITaskOutputDatabaseLevelResponseOutput) SizeMB() pulumi.Float64Output {
	return o.ApplyT(func(v MigrateSqlServerSqlMITaskOutputDatabaseLevelResponse) float64 { return v.SizeMB }).(pulumi.Float64Output)
}

// Current stage of migration
func (o MigrateSqlServerSqlMITaskOutputDatabaseLevelResponseOutput) Stage() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlMITaskOutputDatabaseLevelResponse) string { return v.Stage }).(pulumi.StringOutput)
}

// Migration start time
func (o MigrateSqlServerSqlMITaskOutputDatabaseLevelResponseOutput) StartedOn() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlMITaskOutputDatabaseLevelResponse) string { return v.StartedOn }).(pulumi.StringOutput)
}

// Current state of migration
func (o MigrateSqlServerSqlMITaskOutputDatabaseLevelResponseOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlMITaskOutputDatabaseLevelResponse) string { return v.State }).(pulumi.StringOutput)
}

type MigrateSqlServerSqlMITaskOutputErrorResponse struct {
	// Migration error
	Error ReportableExceptionResponse `pulumi:"error"`
	// Result identifier
	Id string `pulumi:"id"`
	// Result type
	ResultType string `pulumi:"resultType"`
}

type MigrateSqlServerSqlMITaskOutputErrorResponseOutput struct{ *pulumi.OutputState }

func (MigrateSqlServerSqlMITaskOutputErrorResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MigrateSqlServerSqlMITaskOutputErrorResponse)(nil)).Elem()
}

func (o MigrateSqlServerSqlMITaskOutputErrorResponseOutput) ToMigrateSqlServerSqlMITaskOutputErrorResponseOutput() MigrateSqlServerSqlMITaskOutputErrorResponseOutput {
	return o
}

func (o MigrateSqlServerSqlMITaskOutputErrorResponseOutput) ToMigrateSqlServerSqlMITaskOutputErrorResponseOutputWithContext(ctx context.Context) MigrateSqlServerSqlMITaskOutputErrorResponseOutput {
	return o
}

// Migration error
func (o MigrateSqlServerSqlMITaskOutputErrorResponseOutput) Error() ReportableExceptionResponseOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlMITaskOutputErrorResponse) ReportableExceptionResponse { return v.Error }).(ReportableExceptionResponseOutput)
}

// Result identifier
func (o MigrateSqlServerSqlMITaskOutputErrorResponseOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlMITaskOutputErrorResponse) string { return v.Id }).(pulumi.StringOutput)
}

// Result type
func (o MigrateSqlServerSqlMITaskOutputErrorResponseOutput) ResultType() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlMITaskOutputErrorResponse) string { return v.ResultType }).(pulumi.StringOutput)
}

type MigrateSqlServerSqlMITaskOutputLoginLevelResponse struct {
	// Login migration end time
	EndedOn string `pulumi:"endedOn"`
	// Login migration errors and warnings per login
	ExceptionsAndWarnings []ReportableExceptionResponse `pulumi:"exceptionsAndWarnings"`
	// Result identifier
	Id string `pulumi:"id"`
	// Login name.
	LoginName string `pulumi:"loginName"`
	// Login migration progress message
	Message string `pulumi:"message"`
	// Result type
	ResultType string `pulumi:"resultType"`
	// Current stage of login
	Stage string `pulumi:"stage"`
	// Login migration start time
	StartedOn string `pulumi:"startedOn"`
	// Current state of login
	State string `pulumi:"state"`
}

type MigrateSqlServerSqlMITaskOutputLoginLevelResponseOutput struct{ *pulumi.OutputState }

func (MigrateSqlServerSqlMITaskOutputLoginLevelResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MigrateSqlServerSqlMITaskOutputLoginLevelResponse)(nil)).Elem()
}

func (o MigrateSqlServerSqlMITaskOutputLoginLevelResponseOutput) ToMigrateSqlServerSqlMITaskOutputLoginLevelResponseOutput() MigrateSqlServerSqlMITaskOutputLoginLevelResponseOutput {
	return o
}

func (o MigrateSqlServerSqlMITaskOutputLoginLevelResponseOutput) ToMigrateSqlServerSqlMITaskOutputLoginLevelResponseOutputWithContext(ctx context.Context) MigrateSqlServerSqlMITaskOutputLoginLevelResponseOutput {
	return o
}

// Login migration end time
func (o MigrateSqlServerSqlMITaskOutputLoginLevelResponseOutput) EndedOn() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlMITaskOutputLoginLevelResponse) string { return v.EndedOn }).(pulumi.StringOutput)
}

// Login migration errors and warnings per login
func (o MigrateSqlServerSqlMITaskOutputLoginLevelResponseOutput) ExceptionsAndWarnings() ReportableExceptionResponseArrayOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlMITaskOutputLoginLevelResponse) []ReportableExceptionResponse {
		return v.ExceptionsAndWarnings
	}).(ReportableExceptionResponseArrayOutput)
}

// Result identifier
func (o MigrateSqlServerSqlMITaskOutputLoginLevelResponseOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlMITaskOutputLoginLevelResponse) string { return v.Id }).(pulumi.StringOutput)
}

// Login name.
func (o MigrateSqlServerSqlMITaskOutputLoginLevelResponseOutput) LoginName() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlMITaskOutputLoginLevelResponse) string { return v.LoginName }).(pulumi.StringOutput)
}

// Login migration progress message
func (o MigrateSqlServerSqlMITaskOutputLoginLevelResponseOutput) Message() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlMITaskOutputLoginLevelResponse) string { return v.Message }).(pulumi.StringOutput)
}

// Result type
func (o MigrateSqlServerSqlMITaskOutputLoginLevelResponseOutput) ResultType() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlMITaskOutputLoginLevelResponse) string { return v.ResultType }).(pulumi.StringOutput)
}

// Current stage of login
func (o MigrateSqlServerSqlMITaskOutputLoginLevelResponseOutput) Stage() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlMITaskOutputLoginLevelResponse) string { return v.Stage }).(pulumi.StringOutput)
}

// Login migration start time
func (o MigrateSqlServerSqlMITaskOutputLoginLevelResponseOutput) StartedOn() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlMITaskOutputLoginLevelResponse) string { return v.StartedOn }).(pulumi.StringOutput)
}

// Current state of login
func (o MigrateSqlServerSqlMITaskOutputLoginLevelResponseOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlMITaskOutputLoginLevelResponse) string { return v.State }).(pulumi.StringOutput)
}

type MigrateSqlServerSqlMITaskOutputMigrationLevelResponse struct {
	// Selected agent jobs as a map from name to id
	AgentJobs string `pulumi:"agentJobs"`
	// Selected databases as a map from database name to database id
	Databases string `pulumi:"databases"`
	// Migration end time
	EndedOn string `pulumi:"endedOn"`
	// Migration exceptions and warnings.
	ExceptionsAndWarnings []ReportableExceptionResponse `pulumi:"exceptionsAndWarnings"`
	// Result identifier
	Id string `pulumi:"id"`
	// Selected logins as a map from name to id
	Logins string `pulumi:"logins"`
	// Migration progress message
	Message string `pulumi:"message"`
	// List of orphaned users.
	OrphanedUsersInfo []OrphanedUserInfoResponse `pulumi:"orphanedUsersInfo"`
	// Result type
	ResultType string `pulumi:"resultType"`
	// Map of server role migration results.
	ServerRoleResults string `pulumi:"serverRoleResults"`
	// Source server brand version
	SourceServerBrandVersion string `pulumi:"sourceServerBrandVersion"`
	// Source server version
	SourceServerVersion string `pulumi:"sourceServerVersion"`
	// Migration start time
	StartedOn string `pulumi:"startedOn"`
	// Current state of migration
	State string `pulumi:"state"`
	// Current status of migration
	Status string `pulumi:"status"`
	// Target server brand version
	TargetServerBrandVersion string `pulumi:"targetServerBrandVersion"`
	// Target server version
	TargetServerVersion string `pulumi:"targetServerVersion"`
}

type MigrateSqlServerSqlMITaskOutputMigrationLevelResponseOutput struct{ *pulumi.OutputState }

func (MigrateSqlServerSqlMITaskOutputMigrationLevelResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MigrateSqlServerSqlMITaskOutputMigrationLevelResponse)(nil)).Elem()
}

func (o MigrateSqlServerSqlMITaskOutputMigrationLevelResponseOutput) ToMigrateSqlServerSqlMITaskOutputMigrationLevelResponseOutput() MigrateSqlServerSqlMITaskOutputMigrationLevelResponseOutput {
	return o
}

func (o MigrateSqlServerSqlMITaskOutputMigrationLevelResponseOutput) ToMigrateSqlServerSqlMITaskOutputMigrationLevelResponseOutputWithContext(ctx context.Context) MigrateSqlServerSqlMITaskOutputMigrationLevelResponseOutput {
	return o
}

// Selected agent jobs as a map from name to id
func (o MigrateSqlServerSqlMITaskOutputMigrationLevelResponseOutput) AgentJobs() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlMITaskOutputMigrationLevelResponse) string { return v.AgentJobs }).(pulumi.StringOutput)
}

// Selected databases as a map from database name to database id
func (o MigrateSqlServerSqlMITaskOutputMigrationLevelResponseOutput) Databases() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlMITaskOutputMigrationLevelResponse) string { return v.Databases }).(pulumi.StringOutput)
}

// Migration end time
func (o MigrateSqlServerSqlMITaskOutputMigrationLevelResponseOutput) EndedOn() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlMITaskOutputMigrationLevelResponse) string { return v.EndedOn }).(pulumi.StringOutput)
}

// Migration exceptions and warnings.
func (o MigrateSqlServerSqlMITaskOutputMigrationLevelResponseOutput) ExceptionsAndWarnings() ReportableExceptionResponseArrayOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlMITaskOutputMigrationLevelResponse) []ReportableExceptionResponse {
		return v.ExceptionsAndWarnings
	}).(ReportableExceptionResponseArrayOutput)
}

// Result identifier
func (o MigrateSqlServerSqlMITaskOutputMigrationLevelResponseOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlMITaskOutputMigrationLevelResponse) string { return v.Id }).(pulumi.StringOutput)
}

// Selected logins as a map from name to id
func (o MigrateSqlServerSqlMITaskOutputMigrationLevelResponseOutput) Logins() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlMITaskOutputMigrationLevelResponse) string { return v.Logins }).(pulumi.StringOutput)
}

// Migration progress message
func (o MigrateSqlServerSqlMITaskOutputMigrationLevelResponseOutput) Message() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlMITaskOutputMigrationLevelResponse) string { return v.Message }).(pulumi.StringOutput)
}

// List of orphaned users.
func (o MigrateSqlServerSqlMITaskOutputMigrationLevelResponseOutput) OrphanedUsersInfo() OrphanedUserInfoResponseArrayOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlMITaskOutputMigrationLevelResponse) []OrphanedUserInfoResponse {
		return v.OrphanedUsersInfo
	}).(OrphanedUserInfoResponseArrayOutput)
}

// Result type
func (o MigrateSqlServerSqlMITaskOutputMigrationLevelResponseOutput) ResultType() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlMITaskOutputMigrationLevelResponse) string { return v.ResultType }).(pulumi.StringOutput)
}

// Map of server role migration results.
func (o MigrateSqlServerSqlMITaskOutputMigrationLevelResponseOutput) ServerRoleResults() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlMITaskOutputMigrationLevelResponse) string { return v.ServerRoleResults }).(pulumi.StringOutput)
}

// Source server brand version
func (o MigrateSqlServerSqlMITaskOutputMigrationLevelResponseOutput) SourceServerBrandVersion() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlMITaskOutputMigrationLevelResponse) string {
		return v.SourceServerBrandVersion
	}).(pulumi.StringOutput)
}

// Source server version
func (o MigrateSqlServerSqlMITaskOutputMigrationLevelResponseOutput) SourceServerVersion() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlMITaskOutputMigrationLevelResponse) string { return v.SourceServerVersion }).(pulumi.StringOutput)
}

// Migration start time
func (o MigrateSqlServerSqlMITaskOutputMigrationLevelResponseOutput) StartedOn() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlMITaskOutputMigrationLevelResponse) string { return v.StartedOn }).(pulumi.StringOutput)
}

// Current state of migration
func (o MigrateSqlServerSqlMITaskOutputMigrationLevelResponseOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlMITaskOutputMigrationLevelResponse) string { return v.State }).(pulumi.StringOutput)
}

// Current status of migration
func (o MigrateSqlServerSqlMITaskOutputMigrationLevelResponseOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlMITaskOutputMigrationLevelResponse) string { return v.Status }).(pulumi.StringOutput)
}

// Target server brand version
func (o MigrateSqlServerSqlMITaskOutputMigrationLevelResponseOutput) TargetServerBrandVersion() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlMITaskOutputMigrationLevelResponse) string {
		return v.TargetServerBrandVersion
	}).(pulumi.StringOutput)
}

// Target server version
func (o MigrateSqlServerSqlMITaskOutputMigrationLevelResponseOutput) TargetServerVersion() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlMITaskOutputMigrationLevelResponse) string { return v.TargetServerVersion }).(pulumi.StringOutput)
}

// Properties for task that migrates SQL Server databases to Azure SQL Database Managed Instance
type MigrateSqlServerSqlMITaskProperties struct {
	// Key value pairs of client data to attach meta data information to task
	ClientData map[string]string `pulumi:"clientData"`
	// Task input
	Input *MigrateSqlServerSqlMITaskInput `pulumi:"input"`
	// Task type.
	TaskType string `pulumi:"taskType"`
}

// MigrateSqlServerSqlMITaskPropertiesInput is an input type that accepts MigrateSqlServerSqlMITaskPropertiesArgs and MigrateSqlServerSqlMITaskPropertiesOutput values.
// You can construct a concrete instance of `MigrateSqlServerSqlMITaskPropertiesInput` via:
//
//          MigrateSqlServerSqlMITaskPropertiesArgs{...}
type MigrateSqlServerSqlMITaskPropertiesInput interface {
	pulumi.Input

	ToMigrateSqlServerSqlMITaskPropertiesOutput() MigrateSqlServerSqlMITaskPropertiesOutput
	ToMigrateSqlServerSqlMITaskPropertiesOutputWithContext(context.Context) MigrateSqlServerSqlMITaskPropertiesOutput
}

// Properties for task that migrates SQL Server databases to Azure SQL Database Managed Instance
type MigrateSqlServerSqlMITaskPropertiesArgs struct {
	// Key value pairs of client data to attach meta data information to task
	ClientData pulumi.StringMapInput `pulumi:"clientData"`
	// Task input
	Input MigrateSqlServerSqlMITaskInputPtrInput `pulumi:"input"`
	// Task type.
	TaskType pulumi.StringInput `pulumi:"taskType"`
}

func (MigrateSqlServerSqlMITaskPropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MigrateSqlServerSqlMITaskProperties)(nil)).Elem()
}

func (i MigrateSqlServerSqlMITaskPropertiesArgs) ToMigrateSqlServerSqlMITaskPropertiesOutput() MigrateSqlServerSqlMITaskPropertiesOutput {
	return i.ToMigrateSqlServerSqlMITaskPropertiesOutputWithContext(context.Background())
}

func (i MigrateSqlServerSqlMITaskPropertiesArgs) ToMigrateSqlServerSqlMITaskPropertiesOutputWithContext(ctx context.Context) MigrateSqlServerSqlMITaskPropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MigrateSqlServerSqlMITaskPropertiesOutput)
}

// Properties for task that migrates SQL Server databases to Azure SQL Database Managed Instance
type MigrateSqlServerSqlMITaskPropertiesResponse struct {
	// Key value pairs of client data to attach meta data information to task
	ClientData map[string]string `pulumi:"clientData"`
	// Array of command properties.
	Commands []interface{} `pulumi:"commands"`
	// Array of errors. This is ignored if submitted.
	Errors []ODataErrorResponse `pulumi:"errors"`
	// Task input
	Input *MigrateSqlServerSqlMITaskInputResponse `pulumi:"input"`
	// Task output. This is ignored if submitted.
	Output []interface{} `pulumi:"output"`
	// The state of the task. This is ignored if submitted.
	State string `pulumi:"state"`
	// Task type.
	TaskType string `pulumi:"taskType"`
}

// Properties for task that migrates SQL Server databases to Azure SQL Database Managed Instance
type MigrateSqlServerSqlMITaskPropertiesResponseOutput struct{ *pulumi.OutputState }

func (MigrateSqlServerSqlMITaskPropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MigrateSqlServerSqlMITaskPropertiesResponse)(nil)).Elem()
}

func (o MigrateSqlServerSqlMITaskPropertiesResponseOutput) ToMigrateSqlServerSqlMITaskPropertiesResponseOutput() MigrateSqlServerSqlMITaskPropertiesResponseOutput {
	return o
}

func (o MigrateSqlServerSqlMITaskPropertiesResponseOutput) ToMigrateSqlServerSqlMITaskPropertiesResponseOutputWithContext(ctx context.Context) MigrateSqlServerSqlMITaskPropertiesResponseOutput {
	return o
}

// Key value pairs of client data to attach meta data information to task
func (o MigrateSqlServerSqlMITaskPropertiesResponseOutput) ClientData() pulumi.StringMapOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlMITaskPropertiesResponse) map[string]string { return v.ClientData }).(pulumi.StringMapOutput)
}

// Array of command properties.
func (o MigrateSqlServerSqlMITaskPropertiesResponseOutput) Commands() pulumi.ArrayOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlMITaskPropertiesResponse) []interface{} { return v.Commands }).(pulumi.ArrayOutput)
}

// Array of errors. This is ignored if submitted.
func (o MigrateSqlServerSqlMITaskPropertiesResponseOutput) Errors() ODataErrorResponseArrayOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlMITaskPropertiesResponse) []ODataErrorResponse { return v.Errors }).(ODataErrorResponseArrayOutput)
}

// Task input
func (o MigrateSqlServerSqlMITaskPropertiesResponseOutput) Input() MigrateSqlServerSqlMITaskInputResponsePtrOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlMITaskPropertiesResponse) *MigrateSqlServerSqlMITaskInputResponse {
		return v.Input
	}).(MigrateSqlServerSqlMITaskInputResponsePtrOutput)
}

// Task output. This is ignored if submitted.
func (o MigrateSqlServerSqlMITaskPropertiesResponseOutput) Output() pulumi.ArrayOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlMITaskPropertiesResponse) []interface{} { return v.Output }).(pulumi.ArrayOutput)
}

// The state of the task. This is ignored if submitted.
func (o MigrateSqlServerSqlMITaskPropertiesResponseOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlMITaskPropertiesResponse) string { return v.State }).(pulumi.StringOutput)
}

// Task type.
func (o MigrateSqlServerSqlMITaskPropertiesResponseOutput) TaskType() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlMITaskPropertiesResponse) string { return v.TaskType }).(pulumi.StringOutput)
}

// Input for task that migrates SSIS packages from SQL Server to Azure SQL Database Managed Instance.
type MigrateSsisTaskInput struct {
	// Information for connecting to source
	SourceConnectionInfo SqlConnectionInfo `pulumi:"sourceConnectionInfo"`
	// SSIS package migration information.
	SsisMigrationInfo SsisMigrationInfo `pulumi:"ssisMigrationInfo"`
	// Information for connecting to target
	TargetConnectionInfo SqlConnectionInfo `pulumi:"targetConnectionInfo"`
}

// MigrateSsisTaskInputInput is an input type that accepts MigrateSsisTaskInputArgs and MigrateSsisTaskInputOutput values.
// You can construct a concrete instance of `MigrateSsisTaskInputInput` via:
//
//          MigrateSsisTaskInputArgs{...}
type MigrateSsisTaskInputInput interface {
	pulumi.Input

	ToMigrateSsisTaskInputOutput() MigrateSsisTaskInputOutput
	ToMigrateSsisTaskInputOutputWithContext(context.Context) MigrateSsisTaskInputOutput
}

// Input for task that migrates SSIS packages from SQL Server to Azure SQL Database Managed Instance.
type MigrateSsisTaskInputArgs struct {
	// Information for connecting to source
	SourceConnectionInfo SqlConnectionInfoInput `pulumi:"sourceConnectionInfo"`
	// SSIS package migration information.
	SsisMigrationInfo SsisMigrationInfoInput `pulumi:"ssisMigrationInfo"`
	// Information for connecting to target
	TargetConnectionInfo SqlConnectionInfoInput `pulumi:"targetConnectionInfo"`
}

func (MigrateSsisTaskInputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MigrateSsisTaskInput)(nil)).Elem()
}

func (i MigrateSsisTaskInputArgs) ToMigrateSsisTaskInputOutput() MigrateSsisTaskInputOutput {
	return i.ToMigrateSsisTaskInputOutputWithContext(context.Background())
}

func (i MigrateSsisTaskInputArgs) ToMigrateSsisTaskInputOutputWithContext(ctx context.Context) MigrateSsisTaskInputOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MigrateSsisTaskInputOutput)
}

func (i MigrateSsisTaskInputArgs) ToMigrateSsisTaskInputPtrOutput() MigrateSsisTaskInputPtrOutput {
	return i.ToMigrateSsisTaskInputPtrOutputWithContext(context.Background())
}

func (i MigrateSsisTaskInputArgs) ToMigrateSsisTaskInputPtrOutputWithContext(ctx context.Context) MigrateSsisTaskInputPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MigrateSsisTaskInputOutput).ToMigrateSsisTaskInputPtrOutputWithContext(ctx)
}

// MigrateSsisTaskInputPtrInput is an input type that accepts MigrateSsisTaskInputArgs, MigrateSsisTaskInputPtr and MigrateSsisTaskInputPtrOutput values.
// You can construct a concrete instance of `MigrateSsisTaskInputPtrInput` via:
//
//          MigrateSsisTaskInputArgs{...}
//
//  or:
//
//          nil
type MigrateSsisTaskInputPtrInput interface {
	pulumi.Input

	ToMigrateSsisTaskInputPtrOutput() MigrateSsisTaskInputPtrOutput
	ToMigrateSsisTaskInputPtrOutputWithContext(context.Context) MigrateSsisTaskInputPtrOutput
}

type migrateSsisTaskInputPtrType MigrateSsisTaskInputArgs

func MigrateSsisTaskInputPtr(v *MigrateSsisTaskInputArgs) MigrateSsisTaskInputPtrInput {
	return (*migrateSsisTaskInputPtrType)(v)
}

func (*migrateSsisTaskInputPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**MigrateSsisTaskInput)(nil)).Elem()
}

func (i *migrateSsisTaskInputPtrType) ToMigrateSsisTaskInputPtrOutput() MigrateSsisTaskInputPtrOutput {
	return i.ToMigrateSsisTaskInputPtrOutputWithContext(context.Background())
}

func (i *migrateSsisTaskInputPtrType) ToMigrateSsisTaskInputPtrOutputWithContext(ctx context.Context) MigrateSsisTaskInputPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MigrateSsisTaskInputPtrOutput)
}

// Input for task that migrates SSIS packages from SQL Server to Azure SQL Database Managed Instance.
type MigrateSsisTaskInputResponse struct {
	// Information for connecting to source
	SourceConnectionInfo SqlConnectionInfoResponse `pulumi:"sourceConnectionInfo"`
	// SSIS package migration information.
	SsisMigrationInfo SsisMigrationInfoResponse `pulumi:"ssisMigrationInfo"`
	// Information for connecting to target
	TargetConnectionInfo SqlConnectionInfoResponse `pulumi:"targetConnectionInfo"`
}

// Input for task that migrates SSIS packages from SQL Server to Azure SQL Database Managed Instance.
type MigrateSsisTaskInputResponseOutput struct{ *pulumi.OutputState }

func (MigrateSsisTaskInputResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MigrateSsisTaskInputResponse)(nil)).Elem()
}

func (o MigrateSsisTaskInputResponseOutput) ToMigrateSsisTaskInputResponseOutput() MigrateSsisTaskInputResponseOutput {
	return o
}

func (o MigrateSsisTaskInputResponseOutput) ToMigrateSsisTaskInputResponseOutputWithContext(ctx context.Context) MigrateSsisTaskInputResponseOutput {
	return o
}

func (o MigrateSsisTaskInputResponseOutput) ToMigrateSsisTaskInputResponsePtrOutput() MigrateSsisTaskInputResponsePtrOutput {
	return o.ToMigrateSsisTaskInputResponsePtrOutputWithContext(context.Background())
}

func (o MigrateSsisTaskInputResponseOutput) ToMigrateSsisTaskInputResponsePtrOutputWithContext(ctx context.Context) MigrateSsisTaskInputResponsePtrOutput {
	return o.ApplyT(func(v MigrateSsisTaskInputResponse) *MigrateSsisTaskInputResponse {
		return &v
	}).(MigrateSsisTaskInputResponsePtrOutput)
}

// Information for connecting to source
func (o MigrateSsisTaskInputResponseOutput) SourceConnectionInfo() SqlConnectionInfoResponseOutput {
	return o.ApplyT(func(v MigrateSsisTaskInputResponse) SqlConnectionInfoResponse { return v.SourceConnectionInfo }).(SqlConnectionInfoResponseOutput)
}

// SSIS package migration information.
func (o MigrateSsisTaskInputResponseOutput) SsisMigrationInfo() SsisMigrationInfoResponseOutput {
	return o.ApplyT(func(v MigrateSsisTaskInputResponse) SsisMigrationInfoResponse { return v.SsisMigrationInfo }).(SsisMigrationInfoResponseOutput)
}

// Information for connecting to target
func (o MigrateSsisTaskInputResponseOutput) TargetConnectionInfo() SqlConnectionInfoResponseOutput {
	return o.ApplyT(func(v MigrateSsisTaskInputResponse) SqlConnectionInfoResponse { return v.TargetConnectionInfo }).(SqlConnectionInfoResponseOutput)
}

type MigrateSsisTaskInputResponsePtrOutput struct{ *pulumi.OutputState }

func (MigrateSsisTaskInputResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MigrateSsisTaskInputResponse)(nil)).Elem()
}

func (o MigrateSsisTaskInputResponsePtrOutput) ToMigrateSsisTaskInputResponsePtrOutput() MigrateSsisTaskInputResponsePtrOutput {
	return o
}

func (o MigrateSsisTaskInputResponsePtrOutput) ToMigrateSsisTaskInputResponsePtrOutputWithContext(ctx context.Context) MigrateSsisTaskInputResponsePtrOutput {
	return o
}

func (o MigrateSsisTaskInputResponsePtrOutput) Elem() MigrateSsisTaskInputResponseOutput {
	return o.ApplyT(func(v *MigrateSsisTaskInputResponse) MigrateSsisTaskInputResponse { return *v }).(MigrateSsisTaskInputResponseOutput)
}

// Information for connecting to source
func (o MigrateSsisTaskInputResponsePtrOutput) SourceConnectionInfo() SqlConnectionInfoResponsePtrOutput {
	return o.ApplyT(func(v *MigrateSsisTaskInputResponse) *SqlConnectionInfoResponse {
		if v == nil {
			return nil
		}
		return &v.SourceConnectionInfo
	}).(SqlConnectionInfoResponsePtrOutput)
}

// SSIS package migration information.
func (o MigrateSsisTaskInputResponsePtrOutput) SsisMigrationInfo() SsisMigrationInfoResponsePtrOutput {
	return o.ApplyT(func(v *MigrateSsisTaskInputResponse) *SsisMigrationInfoResponse {
		if v == nil {
			return nil
		}
		return &v.SsisMigrationInfo
	}).(SsisMigrationInfoResponsePtrOutput)
}

// Information for connecting to target
func (o MigrateSsisTaskInputResponsePtrOutput) TargetConnectionInfo() SqlConnectionInfoResponsePtrOutput {
	return o.ApplyT(func(v *MigrateSsisTaskInputResponse) *SqlConnectionInfoResponse {
		if v == nil {
			return nil
		}
		return &v.TargetConnectionInfo
	}).(SqlConnectionInfoResponsePtrOutput)
}

type MigrateSsisTaskOutputMigrationLevelResponse struct {
	// Migration end time
	EndedOn string `pulumi:"endedOn"`
	// Migration exceptions and warnings.
	ExceptionsAndWarnings []ReportableExceptionResponse `pulumi:"exceptionsAndWarnings"`
	// Result identifier
	Id string `pulumi:"id"`
	// Migration progress message
	Message string `pulumi:"message"`
	// Result type
	ResultType string `pulumi:"resultType"`
	// Source server brand version
	SourceServerBrandVersion string `pulumi:"sourceServerBrandVersion"`
	// Source server version
	SourceServerVersion string `pulumi:"sourceServerVersion"`
	// Stage of SSIS migration.
	Stage string `pulumi:"stage"`
	// Migration start time
	StartedOn string `pulumi:"startedOn"`
	// Current status of migration
	Status string `pulumi:"status"`
	// Target server brand version
	TargetServerBrandVersion string `pulumi:"targetServerBrandVersion"`
	// Target server version
	TargetServerVersion string `pulumi:"targetServerVersion"`
}

type MigrateSsisTaskOutputMigrationLevelResponseOutput struct{ *pulumi.OutputState }

func (MigrateSsisTaskOutputMigrationLevelResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MigrateSsisTaskOutputMigrationLevelResponse)(nil)).Elem()
}

func (o MigrateSsisTaskOutputMigrationLevelResponseOutput) ToMigrateSsisTaskOutputMigrationLevelResponseOutput() MigrateSsisTaskOutputMigrationLevelResponseOutput {
	return o
}

func (o MigrateSsisTaskOutputMigrationLevelResponseOutput) ToMigrateSsisTaskOutputMigrationLevelResponseOutputWithContext(ctx context.Context) MigrateSsisTaskOutputMigrationLevelResponseOutput {
	return o
}

// Migration end time
func (o MigrateSsisTaskOutputMigrationLevelResponseOutput) EndedOn() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSsisTaskOutputMigrationLevelResponse) string { return v.EndedOn }).(pulumi.StringOutput)
}

// Migration exceptions and warnings.
func (o MigrateSsisTaskOutputMigrationLevelResponseOutput) ExceptionsAndWarnings() ReportableExceptionResponseArrayOutput {
	return o.ApplyT(func(v MigrateSsisTaskOutputMigrationLevelResponse) []ReportableExceptionResponse {
		return v.ExceptionsAndWarnings
	}).(ReportableExceptionResponseArrayOutput)
}

// Result identifier
func (o MigrateSsisTaskOutputMigrationLevelResponseOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSsisTaskOutputMigrationLevelResponse) string { return v.Id }).(pulumi.StringOutput)
}

// Migration progress message
func (o MigrateSsisTaskOutputMigrationLevelResponseOutput) Message() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSsisTaskOutputMigrationLevelResponse) string { return v.Message }).(pulumi.StringOutput)
}

// Result type
func (o MigrateSsisTaskOutputMigrationLevelResponseOutput) ResultType() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSsisTaskOutputMigrationLevelResponse) string { return v.ResultType }).(pulumi.StringOutput)
}

// Source server brand version
func (o MigrateSsisTaskOutputMigrationLevelResponseOutput) SourceServerBrandVersion() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSsisTaskOutputMigrationLevelResponse) string { return v.SourceServerBrandVersion }).(pulumi.StringOutput)
}

// Source server version
func (o MigrateSsisTaskOutputMigrationLevelResponseOutput) SourceServerVersion() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSsisTaskOutputMigrationLevelResponse) string { return v.SourceServerVersion }).(pulumi.StringOutput)
}

// Stage of SSIS migration.
func (o MigrateSsisTaskOutputMigrationLevelResponseOutput) Stage() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSsisTaskOutputMigrationLevelResponse) string { return v.Stage }).(pulumi.StringOutput)
}

// Migration start time
func (o MigrateSsisTaskOutputMigrationLevelResponseOutput) StartedOn() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSsisTaskOutputMigrationLevelResponse) string { return v.StartedOn }).(pulumi.StringOutput)
}

// Current status of migration
func (o MigrateSsisTaskOutputMigrationLevelResponseOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSsisTaskOutputMigrationLevelResponse) string { return v.Status }).(pulumi.StringOutput)
}

// Target server brand version
func (o MigrateSsisTaskOutputMigrationLevelResponseOutput) TargetServerBrandVersion() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSsisTaskOutputMigrationLevelResponse) string { return v.TargetServerBrandVersion }).(pulumi.StringOutput)
}

// Target server version
func (o MigrateSsisTaskOutputMigrationLevelResponseOutput) TargetServerVersion() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSsisTaskOutputMigrationLevelResponse) string { return v.TargetServerVersion }).(pulumi.StringOutput)
}

type MigrateSsisTaskOutputProjectLevelResponse struct {
	// Migration end time
	EndedOn string `pulumi:"endedOn"`
	// Migration exceptions and warnings
	ExceptionsAndWarnings []ReportableExceptionResponse `pulumi:"exceptionsAndWarnings"`
	// Name of the folder
	FolderName string `pulumi:"folderName"`
	// Result identifier
	Id string `pulumi:"id"`
	// Migration progress message
	Message string `pulumi:"message"`
	// Name of the project
	ProjectName string `pulumi:"projectName"`
	// Result type
	ResultType string `pulumi:"resultType"`
	// Stage of SSIS migration.
	Stage string `pulumi:"stage"`
	// Migration start time
	StartedOn string `pulumi:"startedOn"`
	// Current state of migration
	State string `pulumi:"state"`
}

type MigrateSsisTaskOutputProjectLevelResponseOutput struct{ *pulumi.OutputState }

func (MigrateSsisTaskOutputProjectLevelResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MigrateSsisTaskOutputProjectLevelResponse)(nil)).Elem()
}

func (o MigrateSsisTaskOutputProjectLevelResponseOutput) ToMigrateSsisTaskOutputProjectLevelResponseOutput() MigrateSsisTaskOutputProjectLevelResponseOutput {
	return o
}

func (o MigrateSsisTaskOutputProjectLevelResponseOutput) ToMigrateSsisTaskOutputProjectLevelResponseOutputWithContext(ctx context.Context) MigrateSsisTaskOutputProjectLevelResponseOutput {
	return o
}

// Migration end time
func (o MigrateSsisTaskOutputProjectLevelResponseOutput) EndedOn() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSsisTaskOutputProjectLevelResponse) string { return v.EndedOn }).(pulumi.StringOutput)
}

// Migration exceptions and warnings
func (o MigrateSsisTaskOutputProjectLevelResponseOutput) ExceptionsAndWarnings() ReportableExceptionResponseArrayOutput {
	return o.ApplyT(func(v MigrateSsisTaskOutputProjectLevelResponse) []ReportableExceptionResponse {
		return v.ExceptionsAndWarnings
	}).(ReportableExceptionResponseArrayOutput)
}

// Name of the folder
func (o MigrateSsisTaskOutputProjectLevelResponseOutput) FolderName() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSsisTaskOutputProjectLevelResponse) string { return v.FolderName }).(pulumi.StringOutput)
}

// Result identifier
func (o MigrateSsisTaskOutputProjectLevelResponseOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSsisTaskOutputProjectLevelResponse) string { return v.Id }).(pulumi.StringOutput)
}

// Migration progress message
func (o MigrateSsisTaskOutputProjectLevelResponseOutput) Message() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSsisTaskOutputProjectLevelResponse) string { return v.Message }).(pulumi.StringOutput)
}

// Name of the project
func (o MigrateSsisTaskOutputProjectLevelResponseOutput) ProjectName() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSsisTaskOutputProjectLevelResponse) string { return v.ProjectName }).(pulumi.StringOutput)
}

// Result type
func (o MigrateSsisTaskOutputProjectLevelResponseOutput) ResultType() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSsisTaskOutputProjectLevelResponse) string { return v.ResultType }).(pulumi.StringOutput)
}

// Stage of SSIS migration.
func (o MigrateSsisTaskOutputProjectLevelResponseOutput) Stage() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSsisTaskOutputProjectLevelResponse) string { return v.Stage }).(pulumi.StringOutput)
}

// Migration start time
func (o MigrateSsisTaskOutputProjectLevelResponseOutput) StartedOn() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSsisTaskOutputProjectLevelResponse) string { return v.StartedOn }).(pulumi.StringOutput)
}

// Current state of migration
func (o MigrateSsisTaskOutputProjectLevelResponseOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSsisTaskOutputProjectLevelResponse) string { return v.State }).(pulumi.StringOutput)
}

// Properties for task that migrates SSIS packages from SQL Server databases to Azure SQL Database Managed Instance.
type MigrateSsisTaskProperties struct {
	// Key value pairs of client data to attach meta data information to task
	ClientData map[string]string `pulumi:"clientData"`
	// Task input
	Input *MigrateSsisTaskInput `pulumi:"input"`
	// Task type.
	TaskType string `pulumi:"taskType"`
}

// MigrateSsisTaskPropertiesInput is an input type that accepts MigrateSsisTaskPropertiesArgs and MigrateSsisTaskPropertiesOutput values.
// You can construct a concrete instance of `MigrateSsisTaskPropertiesInput` via:
//
//          MigrateSsisTaskPropertiesArgs{...}
type MigrateSsisTaskPropertiesInput interface {
	pulumi.Input

	ToMigrateSsisTaskPropertiesOutput() MigrateSsisTaskPropertiesOutput
	ToMigrateSsisTaskPropertiesOutputWithContext(context.Context) MigrateSsisTaskPropertiesOutput
}

// Properties for task that migrates SSIS packages from SQL Server databases to Azure SQL Database Managed Instance.
type MigrateSsisTaskPropertiesArgs struct {
	// Key value pairs of client data to attach meta data information to task
	ClientData pulumi.StringMapInput `pulumi:"clientData"`
	// Task input
	Input MigrateSsisTaskInputPtrInput `pulumi:"input"`
	// Task type.
	TaskType pulumi.StringInput `pulumi:"taskType"`
}

func (MigrateSsisTaskPropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MigrateSsisTaskProperties)(nil)).Elem()
}

func (i MigrateSsisTaskPropertiesArgs) ToMigrateSsisTaskPropertiesOutput() MigrateSsisTaskPropertiesOutput {
	return i.ToMigrateSsisTaskPropertiesOutputWithContext(context.Background())
}

func (i MigrateSsisTaskPropertiesArgs) ToMigrateSsisTaskPropertiesOutputWithContext(ctx context.Context) MigrateSsisTaskPropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MigrateSsisTaskPropertiesOutput)
}

// Properties for task that migrates SSIS packages from SQL Server databases to Azure SQL Database Managed Instance.
type MigrateSsisTaskPropertiesResponse struct {
	// Key value pairs of client data to attach meta data information to task
	ClientData map[string]string `pulumi:"clientData"`
	// Array of command properties.
	Commands []interface{} `pulumi:"commands"`
	// Array of errors. This is ignored if submitted.
	Errors []ODataErrorResponse `pulumi:"errors"`
	// Task input
	Input *MigrateSsisTaskInputResponse `pulumi:"input"`
	// Task output. This is ignored if submitted.
	Output []interface{} `pulumi:"output"`
	// The state of the task. This is ignored if submitted.
	State string `pulumi:"state"`
	// Task type.
	TaskType string `pulumi:"taskType"`
}

// Properties for task that migrates SSIS packages from SQL Server databases to Azure SQL Database Managed Instance.
type MigrateSsisTaskPropertiesResponseOutput struct{ *pulumi.OutputState }

func (MigrateSsisTaskPropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MigrateSsisTaskPropertiesResponse)(nil)).Elem()
}

func (o MigrateSsisTaskPropertiesResponseOutput) ToMigrateSsisTaskPropertiesResponseOutput() MigrateSsisTaskPropertiesResponseOutput {
	return o
}

func (o MigrateSsisTaskPropertiesResponseOutput) ToMigrateSsisTaskPropertiesResponseOutputWithContext(ctx context.Context) MigrateSsisTaskPropertiesResponseOutput {
	return o
}

// Key value pairs of client data to attach meta data information to task
func (o MigrateSsisTaskPropertiesResponseOutput) ClientData() pulumi.StringMapOutput {
	return o.ApplyT(func(v MigrateSsisTaskPropertiesResponse) map[string]string { return v.ClientData }).(pulumi.StringMapOutput)
}

// Array of command properties.
func (o MigrateSsisTaskPropertiesResponseOutput) Commands() pulumi.ArrayOutput {
	return o.ApplyT(func(v MigrateSsisTaskPropertiesResponse) []interface{} { return v.Commands }).(pulumi.ArrayOutput)
}

// Array of errors. This is ignored if submitted.
func (o MigrateSsisTaskPropertiesResponseOutput) Errors() ODataErrorResponseArrayOutput {
	return o.ApplyT(func(v MigrateSsisTaskPropertiesResponse) []ODataErrorResponse { return v.Errors }).(ODataErrorResponseArrayOutput)
}

// Task input
func (o MigrateSsisTaskPropertiesResponseOutput) Input() MigrateSsisTaskInputResponsePtrOutput {
	return o.ApplyT(func(v MigrateSsisTaskPropertiesResponse) *MigrateSsisTaskInputResponse { return v.Input }).(MigrateSsisTaskInputResponsePtrOutput)
}

// Task output. This is ignored if submitted.
func (o MigrateSsisTaskPropertiesResponseOutput) Output() pulumi.ArrayOutput {
	return o.ApplyT(func(v MigrateSsisTaskPropertiesResponse) []interface{} { return v.Output }).(pulumi.ArrayOutput)
}

// The state of the task. This is ignored if submitted.
func (o MigrateSsisTaskPropertiesResponseOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSsisTaskPropertiesResponse) string { return v.State }).(pulumi.StringOutput)
}

// Task type.
func (o MigrateSsisTaskPropertiesResponseOutput) TaskType() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSsisTaskPropertiesResponse) string { return v.TaskType }).(pulumi.StringOutput)
}

// Input for command that completes sync migration for a database.
type MigrateSyncCompleteCommandInputResponse struct {
	// Time stamp to complete
	CommitTimeStamp *string `pulumi:"commitTimeStamp"`
	// Name of database
	DatabaseName string `pulumi:"databaseName"`
}

// Input for command that completes sync migration for a database.
type MigrateSyncCompleteCommandInputResponseOutput struct{ *pulumi.OutputState }

func (MigrateSyncCompleteCommandInputResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MigrateSyncCompleteCommandInputResponse)(nil)).Elem()
}

func (o MigrateSyncCompleteCommandInputResponseOutput) ToMigrateSyncCompleteCommandInputResponseOutput() MigrateSyncCompleteCommandInputResponseOutput {
	return o
}

func (o MigrateSyncCompleteCommandInputResponseOutput) ToMigrateSyncCompleteCommandInputResponseOutputWithContext(ctx context.Context) MigrateSyncCompleteCommandInputResponseOutput {
	return o
}

func (o MigrateSyncCompleteCommandInputResponseOutput) ToMigrateSyncCompleteCommandInputResponsePtrOutput() MigrateSyncCompleteCommandInputResponsePtrOutput {
	return o.ToMigrateSyncCompleteCommandInputResponsePtrOutputWithContext(context.Background())
}

func (o MigrateSyncCompleteCommandInputResponseOutput) ToMigrateSyncCompleteCommandInputResponsePtrOutputWithContext(ctx context.Context) MigrateSyncCompleteCommandInputResponsePtrOutput {
	return o.ApplyT(func(v MigrateSyncCompleteCommandInputResponse) *MigrateSyncCompleteCommandInputResponse {
		return &v
	}).(MigrateSyncCompleteCommandInputResponsePtrOutput)
}

// Time stamp to complete
func (o MigrateSyncCompleteCommandInputResponseOutput) CommitTimeStamp() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MigrateSyncCompleteCommandInputResponse) *string { return v.CommitTimeStamp }).(pulumi.StringPtrOutput)
}

// Name of database
func (o MigrateSyncCompleteCommandInputResponseOutput) DatabaseName() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSyncCompleteCommandInputResponse) string { return v.DatabaseName }).(pulumi.StringOutput)
}

type MigrateSyncCompleteCommandInputResponsePtrOutput struct{ *pulumi.OutputState }

func (MigrateSyncCompleteCommandInputResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MigrateSyncCompleteCommandInputResponse)(nil)).Elem()
}

func (o MigrateSyncCompleteCommandInputResponsePtrOutput) ToMigrateSyncCompleteCommandInputResponsePtrOutput() MigrateSyncCompleteCommandInputResponsePtrOutput {
	return o
}

func (o MigrateSyncCompleteCommandInputResponsePtrOutput) ToMigrateSyncCompleteCommandInputResponsePtrOutputWithContext(ctx context.Context) MigrateSyncCompleteCommandInputResponsePtrOutput {
	return o
}

func (o MigrateSyncCompleteCommandInputResponsePtrOutput) Elem() MigrateSyncCompleteCommandInputResponseOutput {
	return o.ApplyT(func(v *MigrateSyncCompleteCommandInputResponse) MigrateSyncCompleteCommandInputResponse { return *v }).(MigrateSyncCompleteCommandInputResponseOutput)
}

// Time stamp to complete
func (o MigrateSyncCompleteCommandInputResponsePtrOutput) CommitTimeStamp() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MigrateSyncCompleteCommandInputResponse) *string {
		if v == nil {
			return nil
		}
		return v.CommitTimeStamp
	}).(pulumi.StringPtrOutput)
}

// Name of database
func (o MigrateSyncCompleteCommandInputResponsePtrOutput) DatabaseName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MigrateSyncCompleteCommandInputResponse) *string {
		if v == nil {
			return nil
		}
		return &v.DatabaseName
	}).(pulumi.StringPtrOutput)
}

// Output for command that completes sync migration for a database.
type MigrateSyncCompleteCommandOutputResponse struct {
	// List of errors that happened during the command execution
	Errors []ReportableExceptionResponse `pulumi:"errors"`
	// Result identifier
	Id string `pulumi:"id"`
}

// Output for command that completes sync migration for a database.
type MigrateSyncCompleteCommandOutputResponseOutput struct{ *pulumi.OutputState }

func (MigrateSyncCompleteCommandOutputResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MigrateSyncCompleteCommandOutputResponse)(nil)).Elem()
}

func (o MigrateSyncCompleteCommandOutputResponseOutput) ToMigrateSyncCompleteCommandOutputResponseOutput() MigrateSyncCompleteCommandOutputResponseOutput {
	return o
}

func (o MigrateSyncCompleteCommandOutputResponseOutput) ToMigrateSyncCompleteCommandOutputResponseOutputWithContext(ctx context.Context) MigrateSyncCompleteCommandOutputResponseOutput {
	return o
}

// List of errors that happened during the command execution
func (o MigrateSyncCompleteCommandOutputResponseOutput) Errors() ReportableExceptionResponseArrayOutput {
	return o.ApplyT(func(v MigrateSyncCompleteCommandOutputResponse) []ReportableExceptionResponse { return v.Errors }).(ReportableExceptionResponseArrayOutput)
}

// Result identifier
func (o MigrateSyncCompleteCommandOutputResponseOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSyncCompleteCommandOutputResponse) string { return v.Id }).(pulumi.StringOutput)
}

// Properties for the command that completes sync migration for a database.
type MigrateSyncCompleteCommandPropertiesResponse struct {
	// Command type.
	CommandType string `pulumi:"commandType"`
	// Array of errors. This is ignored if submitted.
	Errors []ODataErrorResponse `pulumi:"errors"`
	// Command input
	Input *MigrateSyncCompleteCommandInputResponse `pulumi:"input"`
	// Command output. This is ignored if submitted.
	Output MigrateSyncCompleteCommandOutputResponse `pulumi:"output"`
	// The state of the command. This is ignored if submitted.
	State string `pulumi:"state"`
}

// Properties for the command that completes sync migration for a database.
type MigrateSyncCompleteCommandPropertiesResponseOutput struct{ *pulumi.OutputState }

func (MigrateSyncCompleteCommandPropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MigrateSyncCompleteCommandPropertiesResponse)(nil)).Elem()
}

func (o MigrateSyncCompleteCommandPropertiesResponseOutput) ToMigrateSyncCompleteCommandPropertiesResponseOutput() MigrateSyncCompleteCommandPropertiesResponseOutput {
	return o
}

func (o MigrateSyncCompleteCommandPropertiesResponseOutput) ToMigrateSyncCompleteCommandPropertiesResponseOutputWithContext(ctx context.Context) MigrateSyncCompleteCommandPropertiesResponseOutput {
	return o
}

// Command type.
func (o MigrateSyncCompleteCommandPropertiesResponseOutput) CommandType() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSyncCompleteCommandPropertiesResponse) string { return v.CommandType }).(pulumi.StringOutput)
}

// Array of errors. This is ignored if submitted.
func (o MigrateSyncCompleteCommandPropertiesResponseOutput) Errors() ODataErrorResponseArrayOutput {
	return o.ApplyT(func(v MigrateSyncCompleteCommandPropertiesResponse) []ODataErrorResponse { return v.Errors }).(ODataErrorResponseArrayOutput)
}

// Command input
func (o MigrateSyncCompleteCommandPropertiesResponseOutput) Input() MigrateSyncCompleteCommandInputResponsePtrOutput {
	return o.ApplyT(func(v MigrateSyncCompleteCommandPropertiesResponse) *MigrateSyncCompleteCommandInputResponse {
		return v.Input
	}).(MigrateSyncCompleteCommandInputResponsePtrOutput)
}

// Command output. This is ignored if submitted.
func (o MigrateSyncCompleteCommandPropertiesResponseOutput) Output() MigrateSyncCompleteCommandOutputResponseOutput {
	return o.ApplyT(func(v MigrateSyncCompleteCommandPropertiesResponse) MigrateSyncCompleteCommandOutputResponse {
		return v.Output
	}).(MigrateSyncCompleteCommandOutputResponseOutput)
}

// The state of the command. This is ignored if submitted.
func (o MigrateSyncCompleteCommandPropertiesResponseOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSyncCompleteCommandPropertiesResponse) string { return v.State }).(pulumi.StringOutput)
}

// Information about migration eligibility of a server object
type MigrationEligibilityInfoResponse struct {
	// Whether object is eligible for migration or not.
	IsEligibleForMigration bool `pulumi:"isEligibleForMigration"`
	// Information about eligibility failure for the server object.
	ValidationMessages []string `pulumi:"validationMessages"`
}

// Information about migration eligibility of a server object
type MigrationEligibilityInfoResponseOutput struct{ *pulumi.OutputState }

func (MigrationEligibilityInfoResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MigrationEligibilityInfoResponse)(nil)).Elem()
}

func (o MigrationEligibilityInfoResponseOutput) ToMigrationEligibilityInfoResponseOutput() MigrationEligibilityInfoResponseOutput {
	return o
}

func (o MigrationEligibilityInfoResponseOutput) ToMigrationEligibilityInfoResponseOutputWithContext(ctx context.Context) MigrationEligibilityInfoResponseOutput {
	return o
}

// Whether object is eligible for migration or not.
func (o MigrationEligibilityInfoResponseOutput) IsEligibleForMigration() pulumi.BoolOutput {
	return o.ApplyT(func(v MigrationEligibilityInfoResponse) bool { return v.IsEligibleForMigration }).(pulumi.BoolOutput)
}

// Information about eligibility failure for the server object.
func (o MigrationEligibilityInfoResponseOutput) ValidationMessages() pulumi.StringArrayOutput {
	return o.ApplyT(func(v MigrationEligibilityInfoResponse) []string { return v.ValidationMessages }).(pulumi.StringArrayOutput)
}

// Migration validation report result, contains the url for downloading the generated report.
type MigrationReportResultResponse struct {
	// Migration validation result identifier
	Id *string `pulumi:"id"`
	// The url of the report.
	ReportUrl *string `pulumi:"reportUrl"`
}

// Migration validation report result, contains the url for downloading the generated report.
type MigrationReportResultResponseOutput struct{ *pulumi.OutputState }

func (MigrationReportResultResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MigrationReportResultResponse)(nil)).Elem()
}

func (o MigrationReportResultResponseOutput) ToMigrationReportResultResponseOutput() MigrationReportResultResponseOutput {
	return o
}

func (o MigrationReportResultResponseOutput) ToMigrationReportResultResponseOutputWithContext(ctx context.Context) MigrationReportResultResponseOutput {
	return o
}

func (o MigrationReportResultResponseOutput) ToMigrationReportResultResponsePtrOutput() MigrationReportResultResponsePtrOutput {
	return o.ToMigrationReportResultResponsePtrOutputWithContext(context.Background())
}

func (o MigrationReportResultResponseOutput) ToMigrationReportResultResponsePtrOutputWithContext(ctx context.Context) MigrationReportResultResponsePtrOutput {
	return o.ApplyT(func(v MigrationReportResultResponse) *MigrationReportResultResponse {
		return &v
	}).(MigrationReportResultResponsePtrOutput)
}

// Migration validation result identifier
func (o MigrationReportResultResponseOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MigrationReportResultResponse) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// The url of the report.
func (o MigrationReportResultResponseOutput) ReportUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MigrationReportResultResponse) *string { return v.ReportUrl }).(pulumi.StringPtrOutput)
}

type MigrationReportResultResponsePtrOutput struct{ *pulumi.OutputState }

func (MigrationReportResultResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MigrationReportResultResponse)(nil)).Elem()
}

func (o MigrationReportResultResponsePtrOutput) ToMigrationReportResultResponsePtrOutput() MigrationReportResultResponsePtrOutput {
	return o
}

func (o MigrationReportResultResponsePtrOutput) ToMigrationReportResultResponsePtrOutputWithContext(ctx context.Context) MigrationReportResultResponsePtrOutput {
	return o
}

func (o MigrationReportResultResponsePtrOutput) Elem() MigrationReportResultResponseOutput {
	return o.ApplyT(func(v *MigrationReportResultResponse) MigrationReportResultResponse { return *v }).(MigrationReportResultResponseOutput)
}

// Migration validation result identifier
func (o MigrationReportResultResponsePtrOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MigrationReportResultResponse) *string {
		if v == nil {
			return nil
		}
		return v.Id
	}).(pulumi.StringPtrOutput)
}

// The url of the report.
func (o MigrationReportResultResponsePtrOutput) ReportUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MigrationReportResultResponse) *string {
		if v == nil {
			return nil
		}
		return v.ReportUrl
	}).(pulumi.StringPtrOutput)
}

// Migration Validation Database level summary result
type MigrationValidationDatabaseSummaryResultResponse struct {
	// Validation end time
	EndedOn string `pulumi:"endedOn"`
	// Result identifier
	Id string `pulumi:"id"`
	// Migration Identifier
	MigrationId string `pulumi:"migrationId"`
	// Name of the source database
	SourceDatabaseName string `pulumi:"sourceDatabaseName"`
	// Validation start time
	StartedOn string `pulumi:"startedOn"`
	// Current status of validation at the database level
	Status string `pulumi:"status"`
	// Name of the target database
	TargetDatabaseName string `pulumi:"targetDatabaseName"`
}

// Migration Validation Database level summary result
type MigrationValidationDatabaseSummaryResultResponseOutput struct{ *pulumi.OutputState }

func (MigrationValidationDatabaseSummaryResultResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MigrationValidationDatabaseSummaryResultResponse)(nil)).Elem()
}

func (o MigrationValidationDatabaseSummaryResultResponseOutput) ToMigrationValidationDatabaseSummaryResultResponseOutput() MigrationValidationDatabaseSummaryResultResponseOutput {
	return o
}

func (o MigrationValidationDatabaseSummaryResultResponseOutput) ToMigrationValidationDatabaseSummaryResultResponseOutputWithContext(ctx context.Context) MigrationValidationDatabaseSummaryResultResponseOutput {
	return o
}

// Validation end time
func (o MigrationValidationDatabaseSummaryResultResponseOutput) EndedOn() pulumi.StringOutput {
	return o.ApplyT(func(v MigrationValidationDatabaseSummaryResultResponse) string { return v.EndedOn }).(pulumi.StringOutput)
}

// Result identifier
func (o MigrationValidationDatabaseSummaryResultResponseOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v MigrationValidationDatabaseSummaryResultResponse) string { return v.Id }).(pulumi.StringOutput)
}

// Migration Identifier
func (o MigrationValidationDatabaseSummaryResultResponseOutput) MigrationId() pulumi.StringOutput {
	return o.ApplyT(func(v MigrationValidationDatabaseSummaryResultResponse) string { return v.MigrationId }).(pulumi.StringOutput)
}

// Name of the source database
func (o MigrationValidationDatabaseSummaryResultResponseOutput) SourceDatabaseName() pulumi.StringOutput {
	return o.ApplyT(func(v MigrationValidationDatabaseSummaryResultResponse) string { return v.SourceDatabaseName }).(pulumi.StringOutput)
}

// Validation start time
func (o MigrationValidationDatabaseSummaryResultResponseOutput) StartedOn() pulumi.StringOutput {
	return o.ApplyT(func(v MigrationValidationDatabaseSummaryResultResponse) string { return v.StartedOn }).(pulumi.StringOutput)
}

// Current status of validation at the database level
func (o MigrationValidationDatabaseSummaryResultResponseOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v MigrationValidationDatabaseSummaryResultResponse) string { return v.Status }).(pulumi.StringOutput)
}

// Name of the target database
func (o MigrationValidationDatabaseSummaryResultResponseOutput) TargetDatabaseName() pulumi.StringOutput {
	return o.ApplyT(func(v MigrationValidationDatabaseSummaryResultResponse) string { return v.TargetDatabaseName }).(pulumi.StringOutput)
}

type MigrationValidationDatabaseSummaryResultResponseMapOutput struct{ *pulumi.OutputState }

func (MigrationValidationDatabaseSummaryResultResponseMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]MigrationValidationDatabaseSummaryResultResponse)(nil)).Elem()
}

func (o MigrationValidationDatabaseSummaryResultResponseMapOutput) ToMigrationValidationDatabaseSummaryResultResponseMapOutput() MigrationValidationDatabaseSummaryResultResponseMapOutput {
	return o
}

func (o MigrationValidationDatabaseSummaryResultResponseMapOutput) ToMigrationValidationDatabaseSummaryResultResponseMapOutputWithContext(ctx context.Context) MigrationValidationDatabaseSummaryResultResponseMapOutput {
	return o
}

func (o MigrationValidationDatabaseSummaryResultResponseMapOutput) MapIndex(k pulumi.StringInput) MigrationValidationDatabaseSummaryResultResponseOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) MigrationValidationDatabaseSummaryResultResponse {
		return vs[0].(map[string]MigrationValidationDatabaseSummaryResultResponse)[vs[1].(string)]
	}).(MigrationValidationDatabaseSummaryResultResponseOutput)
}

// Types of validations to run after the migration
type MigrationValidationOptions struct {
	// Allows to perform a checksum based data integrity validation between source and target for the selected database / tables .
	EnableDataIntegrityValidation *bool `pulumi:"enableDataIntegrityValidation"`
	// Allows to perform a quick and intelligent query analysis by retrieving queries from the source database and executes them in the target. The result will have execution statistics for executions in source and target databases for the extracted queries.
	EnableQueryAnalysisValidation *bool `pulumi:"enableQueryAnalysisValidation"`
	// Allows to compare the schema information between source and target.
	EnableSchemaValidation *bool `pulumi:"enableSchemaValidation"`
}

// MigrationValidationOptionsInput is an input type that accepts MigrationValidationOptionsArgs and MigrationValidationOptionsOutput values.
// You can construct a concrete instance of `MigrationValidationOptionsInput` via:
//
//          MigrationValidationOptionsArgs{...}
type MigrationValidationOptionsInput interface {
	pulumi.Input

	ToMigrationValidationOptionsOutput() MigrationValidationOptionsOutput
	ToMigrationValidationOptionsOutputWithContext(context.Context) MigrationValidationOptionsOutput
}

// Types of validations to run after the migration
type MigrationValidationOptionsArgs struct {
	// Allows to perform a checksum based data integrity validation between source and target for the selected database / tables .
	EnableDataIntegrityValidation pulumi.BoolPtrInput `pulumi:"enableDataIntegrityValidation"`
	// Allows to perform a quick and intelligent query analysis by retrieving queries from the source database and executes them in the target. The result will have execution statistics for executions in source and target databases for the extracted queries.
	EnableQueryAnalysisValidation pulumi.BoolPtrInput `pulumi:"enableQueryAnalysisValidation"`
	// Allows to compare the schema information between source and target.
	EnableSchemaValidation pulumi.BoolPtrInput `pulumi:"enableSchemaValidation"`
}

func (MigrationValidationOptionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MigrationValidationOptions)(nil)).Elem()
}

func (i MigrationValidationOptionsArgs) ToMigrationValidationOptionsOutput() MigrationValidationOptionsOutput {
	return i.ToMigrationValidationOptionsOutputWithContext(context.Background())
}

func (i MigrationValidationOptionsArgs) ToMigrationValidationOptionsOutputWithContext(ctx context.Context) MigrationValidationOptionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MigrationValidationOptionsOutput)
}

func (i MigrationValidationOptionsArgs) ToMigrationValidationOptionsPtrOutput() MigrationValidationOptionsPtrOutput {
	return i.ToMigrationValidationOptionsPtrOutputWithContext(context.Background())
}

func (i MigrationValidationOptionsArgs) ToMigrationValidationOptionsPtrOutputWithContext(ctx context.Context) MigrationValidationOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MigrationValidationOptionsOutput).ToMigrationValidationOptionsPtrOutputWithContext(ctx)
}

// MigrationValidationOptionsPtrInput is an input type that accepts MigrationValidationOptionsArgs, MigrationValidationOptionsPtr and MigrationValidationOptionsPtrOutput values.
// You can construct a concrete instance of `MigrationValidationOptionsPtrInput` via:
//
//          MigrationValidationOptionsArgs{...}
//
//  or:
//
//          nil
type MigrationValidationOptionsPtrInput interface {
	pulumi.Input

	ToMigrationValidationOptionsPtrOutput() MigrationValidationOptionsPtrOutput
	ToMigrationValidationOptionsPtrOutputWithContext(context.Context) MigrationValidationOptionsPtrOutput
}

type migrationValidationOptionsPtrType MigrationValidationOptionsArgs

func MigrationValidationOptionsPtr(v *MigrationValidationOptionsArgs) MigrationValidationOptionsPtrInput {
	return (*migrationValidationOptionsPtrType)(v)
}

func (*migrationValidationOptionsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**MigrationValidationOptions)(nil)).Elem()
}

func (i *migrationValidationOptionsPtrType) ToMigrationValidationOptionsPtrOutput() MigrationValidationOptionsPtrOutput {
	return i.ToMigrationValidationOptionsPtrOutputWithContext(context.Background())
}

func (i *migrationValidationOptionsPtrType) ToMigrationValidationOptionsPtrOutputWithContext(ctx context.Context) MigrationValidationOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MigrationValidationOptionsPtrOutput)
}

// Types of validations to run after the migration
type MigrationValidationOptionsResponse struct {
	// Allows to perform a checksum based data integrity validation between source and target for the selected database / tables .
	EnableDataIntegrityValidation *bool `pulumi:"enableDataIntegrityValidation"`
	// Allows to perform a quick and intelligent query analysis by retrieving queries from the source database and executes them in the target. The result will have execution statistics for executions in source and target databases for the extracted queries.
	EnableQueryAnalysisValidation *bool `pulumi:"enableQueryAnalysisValidation"`
	// Allows to compare the schema information between source and target.
	EnableSchemaValidation *bool `pulumi:"enableSchemaValidation"`
}

// Types of validations to run after the migration
type MigrationValidationOptionsResponseOutput struct{ *pulumi.OutputState }

func (MigrationValidationOptionsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MigrationValidationOptionsResponse)(nil)).Elem()
}

func (o MigrationValidationOptionsResponseOutput) ToMigrationValidationOptionsResponseOutput() MigrationValidationOptionsResponseOutput {
	return o
}

func (o MigrationValidationOptionsResponseOutput) ToMigrationValidationOptionsResponseOutputWithContext(ctx context.Context) MigrationValidationOptionsResponseOutput {
	return o
}

func (o MigrationValidationOptionsResponseOutput) ToMigrationValidationOptionsResponsePtrOutput() MigrationValidationOptionsResponsePtrOutput {
	return o.ToMigrationValidationOptionsResponsePtrOutputWithContext(context.Background())
}

func (o MigrationValidationOptionsResponseOutput) ToMigrationValidationOptionsResponsePtrOutputWithContext(ctx context.Context) MigrationValidationOptionsResponsePtrOutput {
	return o.ApplyT(func(v MigrationValidationOptionsResponse) *MigrationValidationOptionsResponse {
		return &v
	}).(MigrationValidationOptionsResponsePtrOutput)
}

// Allows to perform a checksum based data integrity validation between source and target for the selected database / tables .
func (o MigrationValidationOptionsResponseOutput) EnableDataIntegrityValidation() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v MigrationValidationOptionsResponse) *bool { return v.EnableDataIntegrityValidation }).(pulumi.BoolPtrOutput)
}

// Allows to perform a quick and intelligent query analysis by retrieving queries from the source database and executes them in the target. The result will have execution statistics for executions in source and target databases for the extracted queries.
func (o MigrationValidationOptionsResponseOutput) EnableQueryAnalysisValidation() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v MigrationValidationOptionsResponse) *bool { return v.EnableQueryAnalysisValidation }).(pulumi.BoolPtrOutput)
}

// Allows to compare the schema information between source and target.
func (o MigrationValidationOptionsResponseOutput) EnableSchemaValidation() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v MigrationValidationOptionsResponse) *bool { return v.EnableSchemaValidation }).(pulumi.BoolPtrOutput)
}

type MigrationValidationOptionsResponsePtrOutput struct{ *pulumi.OutputState }

func (MigrationValidationOptionsResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MigrationValidationOptionsResponse)(nil)).Elem()
}

func (o MigrationValidationOptionsResponsePtrOutput) ToMigrationValidationOptionsResponsePtrOutput() MigrationValidationOptionsResponsePtrOutput {
	return o
}

func (o MigrationValidationOptionsResponsePtrOutput) ToMigrationValidationOptionsResponsePtrOutputWithContext(ctx context.Context) MigrationValidationOptionsResponsePtrOutput {
	return o
}

func (o MigrationValidationOptionsResponsePtrOutput) Elem() MigrationValidationOptionsResponseOutput {
	return o.ApplyT(func(v *MigrationValidationOptionsResponse) MigrationValidationOptionsResponse { return *v }).(MigrationValidationOptionsResponseOutput)
}

// Allows to perform a checksum based data integrity validation between source and target for the selected database / tables .
func (o MigrationValidationOptionsResponsePtrOutput) EnableDataIntegrityValidation() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *MigrationValidationOptionsResponse) *bool {
		if v == nil {
			return nil
		}
		return v.EnableDataIntegrityValidation
	}).(pulumi.BoolPtrOutput)
}

// Allows to perform a quick and intelligent query analysis by retrieving queries from the source database and executes them in the target. The result will have execution statistics for executions in source and target databases for the extracted queries.
func (o MigrationValidationOptionsResponsePtrOutput) EnableQueryAnalysisValidation() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *MigrationValidationOptionsResponse) *bool {
		if v == nil {
			return nil
		}
		return v.EnableQueryAnalysisValidation
	}).(pulumi.BoolPtrOutput)
}

// Allows to compare the schema information between source and target.
func (o MigrationValidationOptionsResponsePtrOutput) EnableSchemaValidation() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *MigrationValidationOptionsResponse) *bool {
		if v == nil {
			return nil
		}
		return v.EnableSchemaValidation
	}).(pulumi.BoolPtrOutput)
}

// Migration Validation Result
type MigrationValidationResultResponse struct {
	// Migration validation result identifier
	Id string `pulumi:"id"`
	// Migration Identifier
	MigrationId string `pulumi:"migrationId"`
	// Current status of validation at the migration level. Status from the database validation result status will be aggregated here.
	Status string `pulumi:"status"`
	// Validation summary results for each database
	SummaryResults map[string]MigrationValidationDatabaseSummaryResultResponse `pulumi:"summaryResults"`
}

// Migration Validation Result
type MigrationValidationResultResponseOutput struct{ *pulumi.OutputState }

func (MigrationValidationResultResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MigrationValidationResultResponse)(nil)).Elem()
}

func (o MigrationValidationResultResponseOutput) ToMigrationValidationResultResponseOutput() MigrationValidationResultResponseOutput {
	return o
}

func (o MigrationValidationResultResponseOutput) ToMigrationValidationResultResponseOutputWithContext(ctx context.Context) MigrationValidationResultResponseOutput {
	return o
}

func (o MigrationValidationResultResponseOutput) ToMigrationValidationResultResponsePtrOutput() MigrationValidationResultResponsePtrOutput {
	return o.ToMigrationValidationResultResponsePtrOutputWithContext(context.Background())
}

func (o MigrationValidationResultResponseOutput) ToMigrationValidationResultResponsePtrOutputWithContext(ctx context.Context) MigrationValidationResultResponsePtrOutput {
	return o.ApplyT(func(v MigrationValidationResultResponse) *MigrationValidationResultResponse {
		return &v
	}).(MigrationValidationResultResponsePtrOutput)
}

// Migration validation result identifier
func (o MigrationValidationResultResponseOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v MigrationValidationResultResponse) string { return v.Id }).(pulumi.StringOutput)
}

// Migration Identifier
func (o MigrationValidationResultResponseOutput) MigrationId() pulumi.StringOutput {
	return o.ApplyT(func(v MigrationValidationResultResponse) string { return v.MigrationId }).(pulumi.StringOutput)
}

// Current status of validation at the migration level. Status from the database validation result status will be aggregated here.
func (o MigrationValidationResultResponseOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v MigrationValidationResultResponse) string { return v.Status }).(pulumi.StringOutput)
}

// Validation summary results for each database
func (o MigrationValidationResultResponseOutput) SummaryResults() MigrationValidationDatabaseSummaryResultResponseMapOutput {
	return o.ApplyT(func(v MigrationValidationResultResponse) map[string]MigrationValidationDatabaseSummaryResultResponse {
		return v.SummaryResults
	}).(MigrationValidationDatabaseSummaryResultResponseMapOutput)
}

type MigrationValidationResultResponsePtrOutput struct{ *pulumi.OutputState }

func (MigrationValidationResultResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MigrationValidationResultResponse)(nil)).Elem()
}

func (o MigrationValidationResultResponsePtrOutput) ToMigrationValidationResultResponsePtrOutput() MigrationValidationResultResponsePtrOutput {
	return o
}

func (o MigrationValidationResultResponsePtrOutput) ToMigrationValidationResultResponsePtrOutputWithContext(ctx context.Context) MigrationValidationResultResponsePtrOutput {
	return o
}

func (o MigrationValidationResultResponsePtrOutput) Elem() MigrationValidationResultResponseOutput {
	return o.ApplyT(func(v *MigrationValidationResultResponse) MigrationValidationResultResponse { return *v }).(MigrationValidationResultResponseOutput)
}

// Migration validation result identifier
func (o MigrationValidationResultResponsePtrOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MigrationValidationResultResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Id
	}).(pulumi.StringPtrOutput)
}

// Migration Identifier
func (o MigrationValidationResultResponsePtrOutput) MigrationId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MigrationValidationResultResponse) *string {
		if v == nil {
			return nil
		}
		return &v.MigrationId
	}).(pulumi.StringPtrOutput)
}

// Current status of validation at the migration level. Status from the database validation result status will be aggregated here.
func (o MigrationValidationResultResponsePtrOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MigrationValidationResultResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Status
	}).(pulumi.StringPtrOutput)
}

// Validation summary results for each database
func (o MigrationValidationResultResponsePtrOutput) SummaryResults() MigrationValidationDatabaseSummaryResultResponseMapOutput {
	return o.ApplyT(func(v *MigrationValidationResultResponse) map[string]MigrationValidationDatabaseSummaryResultResponse {
		if v == nil {
			return nil
		}
		return v.SummaryResults
	}).(MigrationValidationDatabaseSummaryResultResponseMapOutput)
}

// Describes a MongoDB data source
type MongoDbClusterInfoResponse struct {
	// A list of non-system databases in the cluster
	Databases []MongoDbDatabaseInfoResponse `pulumi:"databases"`
	// Whether the cluster supports sharded collections
	SupportsSharding bool `pulumi:"supportsSharding"`
	// The type of data source
	Type string `pulumi:"type"`
	// The version of the data source in the form x.y.z (e.g. 3.6.7). Not used if Type is BlobContainer.
	Version string `pulumi:"version"`
}

// Describes a MongoDB data source
type MongoDbClusterInfoResponseOutput struct{ *pulumi.OutputState }

func (MongoDbClusterInfoResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MongoDbClusterInfoResponse)(nil)).Elem()
}

func (o MongoDbClusterInfoResponseOutput) ToMongoDbClusterInfoResponseOutput() MongoDbClusterInfoResponseOutput {
	return o
}

func (o MongoDbClusterInfoResponseOutput) ToMongoDbClusterInfoResponseOutputWithContext(ctx context.Context) MongoDbClusterInfoResponseOutput {
	return o
}

// A list of non-system databases in the cluster
func (o MongoDbClusterInfoResponseOutput) Databases() MongoDbDatabaseInfoResponseArrayOutput {
	return o.ApplyT(func(v MongoDbClusterInfoResponse) []MongoDbDatabaseInfoResponse { return v.Databases }).(MongoDbDatabaseInfoResponseArrayOutput)
}

// Whether the cluster supports sharded collections
func (o MongoDbClusterInfoResponseOutput) SupportsSharding() pulumi.BoolOutput {
	return o.ApplyT(func(v MongoDbClusterInfoResponse) bool { return v.SupportsSharding }).(pulumi.BoolOutput)
}

// The type of data source
func (o MongoDbClusterInfoResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v MongoDbClusterInfoResponse) string { return v.Type }).(pulumi.StringOutput)
}

// The version of the data source in the form x.y.z (e.g. 3.6.7). Not used if Type is BlobContainer.
func (o MongoDbClusterInfoResponseOutput) Version() pulumi.StringOutput {
	return o.ApplyT(func(v MongoDbClusterInfoResponse) string { return v.Version }).(pulumi.StringOutput)
}

type MongoDbClusterInfoResponseArrayOutput struct{ *pulumi.OutputState }

func (MongoDbClusterInfoResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MongoDbClusterInfoResponse)(nil)).Elem()
}

func (o MongoDbClusterInfoResponseArrayOutput) ToMongoDbClusterInfoResponseArrayOutput() MongoDbClusterInfoResponseArrayOutput {
	return o
}

func (o MongoDbClusterInfoResponseArrayOutput) ToMongoDbClusterInfoResponseArrayOutputWithContext(ctx context.Context) MongoDbClusterInfoResponseArrayOutput {
	return o
}

func (o MongoDbClusterInfoResponseArrayOutput) Index(i pulumi.IntInput) MongoDbClusterInfoResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) MongoDbClusterInfoResponse {
		return vs[0].([]MongoDbClusterInfoResponse)[vs[1].(int)]
	}).(MongoDbClusterInfoResponseOutput)
}

// Describes a supported collection within a MongoDB database
type MongoDbCollectionInfoResponse struct {
	// The average document size, or -1 if the average size is unknown
	AverageDocumentSize int `pulumi:"averageDocumentSize"`
	// The estimated total data size, in bytes, or -1 if the size is unknown.
	DataSize int `pulumi:"dataSize"`
	// The name of the database containing the collection
	DatabaseName string `pulumi:"databaseName"`
	// The estimated total number of documents, or -1 if the document count is unknown
	DocumentCount int `pulumi:"documentCount"`
	// Whether the collection is a capped collection (i.e. whether it has a fixed size and acts like a circular buffer)
	IsCapped bool `pulumi:"isCapped"`
	// Whether the collection is system collection
	IsSystemCollection bool `pulumi:"isSystemCollection"`
	// Whether the collection is a view of another collection
	IsView bool `pulumi:"isView"`
	// The unqualified name of the database or collection
	Name string `pulumi:"name"`
	// The qualified name of the database or collection. For a collection, this is the database-qualified name.
	QualifiedName string `pulumi:"qualifiedName"`
	// The shard key on the collection, or null if the collection is not sharded
	ShardKey *MongoDbShardKeyInfoResponse `pulumi:"shardKey"`
	// Whether the database has sharding enabled. Note that the migration task will enable sharding on the target if necessary.
	SupportsSharding bool `pulumi:"supportsSharding"`
	// The name of the collection that this is a view of, if IsView is true
	ViewOf *string `pulumi:"viewOf"`
}

// Describes a supported collection within a MongoDB database
type MongoDbCollectionInfoResponseOutput struct{ *pulumi.OutputState }

func (MongoDbCollectionInfoResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MongoDbCollectionInfoResponse)(nil)).Elem()
}

func (o MongoDbCollectionInfoResponseOutput) ToMongoDbCollectionInfoResponseOutput() MongoDbCollectionInfoResponseOutput {
	return o
}

func (o MongoDbCollectionInfoResponseOutput) ToMongoDbCollectionInfoResponseOutputWithContext(ctx context.Context) MongoDbCollectionInfoResponseOutput {
	return o
}

// The average document size, or -1 if the average size is unknown
func (o MongoDbCollectionInfoResponseOutput) AverageDocumentSize() pulumi.IntOutput {
	return o.ApplyT(func(v MongoDbCollectionInfoResponse) int { return v.AverageDocumentSize }).(pulumi.IntOutput)
}

// The estimated total data size, in bytes, or -1 if the size is unknown.
func (o MongoDbCollectionInfoResponseOutput) DataSize() pulumi.IntOutput {
	return o.ApplyT(func(v MongoDbCollectionInfoResponse) int { return v.DataSize }).(pulumi.IntOutput)
}

// The name of the database containing the collection
func (o MongoDbCollectionInfoResponseOutput) DatabaseName() pulumi.StringOutput {
	return o.ApplyT(func(v MongoDbCollectionInfoResponse) string { return v.DatabaseName }).(pulumi.StringOutput)
}

// The estimated total number of documents, or -1 if the document count is unknown
func (o MongoDbCollectionInfoResponseOutput) DocumentCount() pulumi.IntOutput {
	return o.ApplyT(func(v MongoDbCollectionInfoResponse) int { return v.DocumentCount }).(pulumi.IntOutput)
}

// Whether the collection is a capped collection (i.e. whether it has a fixed size and acts like a circular buffer)
func (o MongoDbCollectionInfoResponseOutput) IsCapped() pulumi.BoolOutput {
	return o.ApplyT(func(v MongoDbCollectionInfoResponse) bool { return v.IsCapped }).(pulumi.BoolOutput)
}

// Whether the collection is system collection
func (o MongoDbCollectionInfoResponseOutput) IsSystemCollection() pulumi.BoolOutput {
	return o.ApplyT(func(v MongoDbCollectionInfoResponse) bool { return v.IsSystemCollection }).(pulumi.BoolOutput)
}

// Whether the collection is a view of another collection
func (o MongoDbCollectionInfoResponseOutput) IsView() pulumi.BoolOutput {
	return o.ApplyT(func(v MongoDbCollectionInfoResponse) bool { return v.IsView }).(pulumi.BoolOutput)
}

// The unqualified name of the database or collection
func (o MongoDbCollectionInfoResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v MongoDbCollectionInfoResponse) string { return v.Name }).(pulumi.StringOutput)
}

// The qualified name of the database or collection. For a collection, this is the database-qualified name.
func (o MongoDbCollectionInfoResponseOutput) QualifiedName() pulumi.StringOutput {
	return o.ApplyT(func(v MongoDbCollectionInfoResponse) string { return v.QualifiedName }).(pulumi.StringOutput)
}

// The shard key on the collection, or null if the collection is not sharded
func (o MongoDbCollectionInfoResponseOutput) ShardKey() MongoDbShardKeyInfoResponsePtrOutput {
	return o.ApplyT(func(v MongoDbCollectionInfoResponse) *MongoDbShardKeyInfoResponse { return v.ShardKey }).(MongoDbShardKeyInfoResponsePtrOutput)
}

// Whether the database has sharding enabled. Note that the migration task will enable sharding on the target if necessary.
func (o MongoDbCollectionInfoResponseOutput) SupportsSharding() pulumi.BoolOutput {
	return o.ApplyT(func(v MongoDbCollectionInfoResponse) bool { return v.SupportsSharding }).(pulumi.BoolOutput)
}

// The name of the collection that this is a view of, if IsView is true
func (o MongoDbCollectionInfoResponseOutput) ViewOf() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MongoDbCollectionInfoResponse) *string { return v.ViewOf }).(pulumi.StringPtrOutput)
}

type MongoDbCollectionInfoResponseArrayOutput struct{ *pulumi.OutputState }

func (MongoDbCollectionInfoResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MongoDbCollectionInfoResponse)(nil)).Elem()
}

func (o MongoDbCollectionInfoResponseArrayOutput) ToMongoDbCollectionInfoResponseArrayOutput() MongoDbCollectionInfoResponseArrayOutput {
	return o
}

func (o MongoDbCollectionInfoResponseArrayOutput) ToMongoDbCollectionInfoResponseArrayOutputWithContext(ctx context.Context) MongoDbCollectionInfoResponseArrayOutput {
	return o
}

func (o MongoDbCollectionInfoResponseArrayOutput) Index(i pulumi.IntInput) MongoDbCollectionInfoResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) MongoDbCollectionInfoResponse {
		return vs[0].([]MongoDbCollectionInfoResponse)[vs[1].(int)]
	}).(MongoDbCollectionInfoResponseOutput)
}

// Describes the progress of a collection
type MongoDbCollectionProgressResponse struct {
	// The number of document bytes copied during the Copying stage
	BytesCopied int `pulumi:"bytesCopied"`
	// The number of documents copied during the Copying stage
	DocumentsCopied int `pulumi:"documentsCopied"`
	// The elapsed time in the format [ddd.]hh:mm:ss[.fffffff] (i.e. TimeSpan format)
	ElapsedTime string `pulumi:"elapsedTime"`
	// The errors and warnings that have occurred for the current object. The keys are the error codes.
	Errors map[string]MongoDbErrorResponse `pulumi:"errors"`
	// The number of oplog events awaiting replay
	EventsPending int `pulumi:"eventsPending"`
	// The number of oplog events replayed so far
	EventsReplayed int `pulumi:"eventsReplayed"`
	// The timestamp of the last oplog event received, or null if no oplog event has been received yet
	LastEventTime *string `pulumi:"lastEventTime"`
	// The timestamp of the last oplog event replayed, or null if no oplog event has been replayed yet
	LastReplayTime *string `pulumi:"lastReplayTime"`
	// The name of the progress object. For a collection, this is the unqualified collection name. For a database, this is the database name. For the overall migration, this is null.
	Name *string `pulumi:"name"`
	// The qualified name of the progress object. For a collection, this is the database-qualified name. For a database, this is the database name. For the overall migration, this is null.
	QualifiedName *string `pulumi:"qualifiedName"`
	// The type of progress object
	ResultType string `pulumi:"resultType"`
	State      string `pulumi:"state"`
	// The total number of document bytes on the source at the beginning of the Copying stage, or -1 if the total size was unknown
	TotalBytes int `pulumi:"totalBytes"`
	// The total number of documents on the source at the beginning of the Copying stage, or -1 if the total count was unknown
	TotalDocuments int `pulumi:"totalDocuments"`
}

// Describes the progress of a collection
type MongoDbCollectionProgressResponseOutput struct{ *pulumi.OutputState }

func (MongoDbCollectionProgressResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MongoDbCollectionProgressResponse)(nil)).Elem()
}

func (o MongoDbCollectionProgressResponseOutput) ToMongoDbCollectionProgressResponseOutput() MongoDbCollectionProgressResponseOutput {
	return o
}

func (o MongoDbCollectionProgressResponseOutput) ToMongoDbCollectionProgressResponseOutputWithContext(ctx context.Context) MongoDbCollectionProgressResponseOutput {
	return o
}

// The number of document bytes copied during the Copying stage
func (o MongoDbCollectionProgressResponseOutput) BytesCopied() pulumi.IntOutput {
	return o.ApplyT(func(v MongoDbCollectionProgressResponse) int { return v.BytesCopied }).(pulumi.IntOutput)
}

// The number of documents copied during the Copying stage
func (o MongoDbCollectionProgressResponseOutput) DocumentsCopied() pulumi.IntOutput {
	return o.ApplyT(func(v MongoDbCollectionProgressResponse) int { return v.DocumentsCopied }).(pulumi.IntOutput)
}

// The elapsed time in the format [ddd.]hh:mm:ss[.fffffff] (i.e. TimeSpan format)
func (o MongoDbCollectionProgressResponseOutput) ElapsedTime() pulumi.StringOutput {
	return o.ApplyT(func(v MongoDbCollectionProgressResponse) string { return v.ElapsedTime }).(pulumi.StringOutput)
}

// The errors and warnings that have occurred for the current object. The keys are the error codes.
func (o MongoDbCollectionProgressResponseOutput) Errors() MongoDbErrorResponseMapOutput {
	return o.ApplyT(func(v MongoDbCollectionProgressResponse) map[string]MongoDbErrorResponse { return v.Errors }).(MongoDbErrorResponseMapOutput)
}

// The number of oplog events awaiting replay
func (o MongoDbCollectionProgressResponseOutput) EventsPending() pulumi.IntOutput {
	return o.ApplyT(func(v MongoDbCollectionProgressResponse) int { return v.EventsPending }).(pulumi.IntOutput)
}

// The number of oplog events replayed so far
func (o MongoDbCollectionProgressResponseOutput) EventsReplayed() pulumi.IntOutput {
	return o.ApplyT(func(v MongoDbCollectionProgressResponse) int { return v.EventsReplayed }).(pulumi.IntOutput)
}

// The timestamp of the last oplog event received, or null if no oplog event has been received yet
func (o MongoDbCollectionProgressResponseOutput) LastEventTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MongoDbCollectionProgressResponse) *string { return v.LastEventTime }).(pulumi.StringPtrOutput)
}

// The timestamp of the last oplog event replayed, or null if no oplog event has been replayed yet
func (o MongoDbCollectionProgressResponseOutput) LastReplayTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MongoDbCollectionProgressResponse) *string { return v.LastReplayTime }).(pulumi.StringPtrOutput)
}

// The name of the progress object. For a collection, this is the unqualified collection name. For a database, this is the database name. For the overall migration, this is null.
func (o MongoDbCollectionProgressResponseOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MongoDbCollectionProgressResponse) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The qualified name of the progress object. For a collection, this is the database-qualified name. For a database, this is the database name. For the overall migration, this is null.
func (o MongoDbCollectionProgressResponseOutput) QualifiedName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MongoDbCollectionProgressResponse) *string { return v.QualifiedName }).(pulumi.StringPtrOutput)
}

// The type of progress object
func (o MongoDbCollectionProgressResponseOutput) ResultType() pulumi.StringOutput {
	return o.ApplyT(func(v MongoDbCollectionProgressResponse) string { return v.ResultType }).(pulumi.StringOutput)
}

func (o MongoDbCollectionProgressResponseOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v MongoDbCollectionProgressResponse) string { return v.State }).(pulumi.StringOutput)
}

// The total number of document bytes on the source at the beginning of the Copying stage, or -1 if the total size was unknown
func (o MongoDbCollectionProgressResponseOutput) TotalBytes() pulumi.IntOutput {
	return o.ApplyT(func(v MongoDbCollectionProgressResponse) int { return v.TotalBytes }).(pulumi.IntOutput)
}

// The total number of documents on the source at the beginning of the Copying stage, or -1 if the total count was unknown
func (o MongoDbCollectionProgressResponseOutput) TotalDocuments() pulumi.IntOutput {
	return o.ApplyT(func(v MongoDbCollectionProgressResponse) int { return v.TotalDocuments }).(pulumi.IntOutput)
}

type MongoDbCollectionProgressResponseMapOutput struct{ *pulumi.OutputState }

func (MongoDbCollectionProgressResponseMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]MongoDbCollectionProgressResponse)(nil)).Elem()
}

func (o MongoDbCollectionProgressResponseMapOutput) ToMongoDbCollectionProgressResponseMapOutput() MongoDbCollectionProgressResponseMapOutput {
	return o
}

func (o MongoDbCollectionProgressResponseMapOutput) ToMongoDbCollectionProgressResponseMapOutputWithContext(ctx context.Context) MongoDbCollectionProgressResponseMapOutput {
	return o
}

func (o MongoDbCollectionProgressResponseMapOutput) MapIndex(k pulumi.StringInput) MongoDbCollectionProgressResponseOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) MongoDbCollectionProgressResponse {
		return vs[0].(map[string]MongoDbCollectionProgressResponse)[vs[1].(string)]
	}).(MongoDbCollectionProgressResponseOutput)
}

// Describes how an individual MongoDB collection should be migrated
type MongoDbCollectionSettings struct {
	// Whether the migrator is allowed to drop the target collection in the course of performing a migration. The default is true.
	CanDelete *bool `pulumi:"canDelete"`
	// Describes a MongoDB shard key
	ShardKey *MongoDbShardKeySetting `pulumi:"shardKey"`
	// The RUs that should be configured on a CosmosDB target, or null to use the default. This has no effect on non-CosmosDB targets.
	TargetRUs *int `pulumi:"targetRUs"`
}

// MongoDbCollectionSettingsInput is an input type that accepts MongoDbCollectionSettingsArgs and MongoDbCollectionSettingsOutput values.
// You can construct a concrete instance of `MongoDbCollectionSettingsInput` via:
//
//          MongoDbCollectionSettingsArgs{...}
type MongoDbCollectionSettingsInput interface {
	pulumi.Input

	ToMongoDbCollectionSettingsOutput() MongoDbCollectionSettingsOutput
	ToMongoDbCollectionSettingsOutputWithContext(context.Context) MongoDbCollectionSettingsOutput
}

// Describes how an individual MongoDB collection should be migrated
type MongoDbCollectionSettingsArgs struct {
	// Whether the migrator is allowed to drop the target collection in the course of performing a migration. The default is true.
	CanDelete pulumi.BoolPtrInput `pulumi:"canDelete"`
	// Describes a MongoDB shard key
	ShardKey MongoDbShardKeySettingPtrInput `pulumi:"shardKey"`
	// The RUs that should be configured on a CosmosDB target, or null to use the default. This has no effect on non-CosmosDB targets.
	TargetRUs pulumi.IntPtrInput `pulumi:"targetRUs"`
}

func (MongoDbCollectionSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MongoDbCollectionSettings)(nil)).Elem()
}

func (i MongoDbCollectionSettingsArgs) ToMongoDbCollectionSettingsOutput() MongoDbCollectionSettingsOutput {
	return i.ToMongoDbCollectionSettingsOutputWithContext(context.Background())
}

func (i MongoDbCollectionSettingsArgs) ToMongoDbCollectionSettingsOutputWithContext(ctx context.Context) MongoDbCollectionSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MongoDbCollectionSettingsOutput)
}

// MongoDbCollectionSettingsMapInput is an input type that accepts MongoDbCollectionSettingsMap and MongoDbCollectionSettingsMapOutput values.
// You can construct a concrete instance of `MongoDbCollectionSettingsMapInput` via:
//
//          MongoDbCollectionSettingsMap{ "key": MongoDbCollectionSettingsArgs{...} }
type MongoDbCollectionSettingsMapInput interface {
	pulumi.Input

	ToMongoDbCollectionSettingsMapOutput() MongoDbCollectionSettingsMapOutput
	ToMongoDbCollectionSettingsMapOutputWithContext(context.Context) MongoDbCollectionSettingsMapOutput
}

type MongoDbCollectionSettingsMap map[string]MongoDbCollectionSettingsInput

func (MongoDbCollectionSettingsMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]MongoDbCollectionSettings)(nil)).Elem()
}

func (i MongoDbCollectionSettingsMap) ToMongoDbCollectionSettingsMapOutput() MongoDbCollectionSettingsMapOutput {
	return i.ToMongoDbCollectionSettingsMapOutputWithContext(context.Background())
}

func (i MongoDbCollectionSettingsMap) ToMongoDbCollectionSettingsMapOutputWithContext(ctx context.Context) MongoDbCollectionSettingsMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MongoDbCollectionSettingsMapOutput)
}

// Describes how an individual MongoDB collection should be migrated
type MongoDbCollectionSettingsResponse struct {
	// Whether the migrator is allowed to drop the target collection in the course of performing a migration. The default is true.
	CanDelete *bool `pulumi:"canDelete"`
	// Describes a MongoDB shard key
	ShardKey *MongoDbShardKeySettingResponse `pulumi:"shardKey"`
	// The RUs that should be configured on a CosmosDB target, or null to use the default. This has no effect on non-CosmosDB targets.
	TargetRUs *int `pulumi:"targetRUs"`
}

// Describes how an individual MongoDB collection should be migrated
type MongoDbCollectionSettingsResponseOutput struct{ *pulumi.OutputState }

func (MongoDbCollectionSettingsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MongoDbCollectionSettingsResponse)(nil)).Elem()
}

func (o MongoDbCollectionSettingsResponseOutput) ToMongoDbCollectionSettingsResponseOutput() MongoDbCollectionSettingsResponseOutput {
	return o
}

func (o MongoDbCollectionSettingsResponseOutput) ToMongoDbCollectionSettingsResponseOutputWithContext(ctx context.Context) MongoDbCollectionSettingsResponseOutput {
	return o
}

// Whether the migrator is allowed to drop the target collection in the course of performing a migration. The default is true.
func (o MongoDbCollectionSettingsResponseOutput) CanDelete() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v MongoDbCollectionSettingsResponse) *bool { return v.CanDelete }).(pulumi.BoolPtrOutput)
}

// Describes a MongoDB shard key
func (o MongoDbCollectionSettingsResponseOutput) ShardKey() MongoDbShardKeySettingResponsePtrOutput {
	return o.ApplyT(func(v MongoDbCollectionSettingsResponse) *MongoDbShardKeySettingResponse { return v.ShardKey }).(MongoDbShardKeySettingResponsePtrOutput)
}

// The RUs that should be configured on a CosmosDB target, or null to use the default. This has no effect on non-CosmosDB targets.
func (o MongoDbCollectionSettingsResponseOutput) TargetRUs() pulumi.IntPtrOutput {
	return o.ApplyT(func(v MongoDbCollectionSettingsResponse) *int { return v.TargetRUs }).(pulumi.IntPtrOutput)
}

type MongoDbCollectionSettingsResponseMapOutput struct{ *pulumi.OutputState }

func (MongoDbCollectionSettingsResponseMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]MongoDbCollectionSettingsResponse)(nil)).Elem()
}

func (o MongoDbCollectionSettingsResponseMapOutput) ToMongoDbCollectionSettingsResponseMapOutput() MongoDbCollectionSettingsResponseMapOutput {
	return o
}

func (o MongoDbCollectionSettingsResponseMapOutput) ToMongoDbCollectionSettingsResponseMapOutputWithContext(ctx context.Context) MongoDbCollectionSettingsResponseMapOutput {
	return o
}

func (o MongoDbCollectionSettingsResponseMapOutput) MapIndex(k pulumi.StringInput) MongoDbCollectionSettingsResponseOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) MongoDbCollectionSettingsResponse {
		return vs[0].(map[string]MongoDbCollectionSettingsResponse)[vs[1].(string)]
	}).(MongoDbCollectionSettingsResponseOutput)
}

// Describes a connection to a MongoDB data source
type MongoDbConnectionInfo struct {
	// A MongoDB connection string or blob container URL. The user name and password can be specified here or in the userName and password properties
	ConnectionString string `pulumi:"connectionString"`
	// Password credential.
	Password *string `pulumi:"password"`
	// Type of connection info
	Type string `pulumi:"type"`
	// User name
	UserName *string `pulumi:"userName"`
}

// MongoDbConnectionInfoInput is an input type that accepts MongoDbConnectionInfoArgs and MongoDbConnectionInfoOutput values.
// You can construct a concrete instance of `MongoDbConnectionInfoInput` via:
//
//          MongoDbConnectionInfoArgs{...}
type MongoDbConnectionInfoInput interface {
	pulumi.Input

	ToMongoDbConnectionInfoOutput() MongoDbConnectionInfoOutput
	ToMongoDbConnectionInfoOutputWithContext(context.Context) MongoDbConnectionInfoOutput
}

// Describes a connection to a MongoDB data source
type MongoDbConnectionInfoArgs struct {
	// A MongoDB connection string or blob container URL. The user name and password can be specified here or in the userName and password properties
	ConnectionString pulumi.StringInput `pulumi:"connectionString"`
	// Password credential.
	Password pulumi.StringPtrInput `pulumi:"password"`
	// Type of connection info
	Type pulumi.StringInput `pulumi:"type"`
	// User name
	UserName pulumi.StringPtrInput `pulumi:"userName"`
}

func (MongoDbConnectionInfoArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MongoDbConnectionInfo)(nil)).Elem()
}

func (i MongoDbConnectionInfoArgs) ToMongoDbConnectionInfoOutput() MongoDbConnectionInfoOutput {
	return i.ToMongoDbConnectionInfoOutputWithContext(context.Background())
}

func (i MongoDbConnectionInfoArgs) ToMongoDbConnectionInfoOutputWithContext(ctx context.Context) MongoDbConnectionInfoOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MongoDbConnectionInfoOutput)
}

func (i MongoDbConnectionInfoArgs) ToMongoDbConnectionInfoPtrOutput() MongoDbConnectionInfoPtrOutput {
	return i.ToMongoDbConnectionInfoPtrOutputWithContext(context.Background())
}

func (i MongoDbConnectionInfoArgs) ToMongoDbConnectionInfoPtrOutputWithContext(ctx context.Context) MongoDbConnectionInfoPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MongoDbConnectionInfoOutput).ToMongoDbConnectionInfoPtrOutputWithContext(ctx)
}

// MongoDbConnectionInfoPtrInput is an input type that accepts MongoDbConnectionInfoArgs, MongoDbConnectionInfoPtr and MongoDbConnectionInfoPtrOutput values.
// You can construct a concrete instance of `MongoDbConnectionInfoPtrInput` via:
//
//          MongoDbConnectionInfoArgs{...}
//
//  or:
//
//          nil
type MongoDbConnectionInfoPtrInput interface {
	pulumi.Input

	ToMongoDbConnectionInfoPtrOutput() MongoDbConnectionInfoPtrOutput
	ToMongoDbConnectionInfoPtrOutputWithContext(context.Context) MongoDbConnectionInfoPtrOutput
}

type mongoDbConnectionInfoPtrType MongoDbConnectionInfoArgs

func MongoDbConnectionInfoPtr(v *MongoDbConnectionInfoArgs) MongoDbConnectionInfoPtrInput {
	return (*mongoDbConnectionInfoPtrType)(v)
}

func (*mongoDbConnectionInfoPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**MongoDbConnectionInfo)(nil)).Elem()
}

func (i *mongoDbConnectionInfoPtrType) ToMongoDbConnectionInfoPtrOutput() MongoDbConnectionInfoPtrOutput {
	return i.ToMongoDbConnectionInfoPtrOutputWithContext(context.Background())
}

func (i *mongoDbConnectionInfoPtrType) ToMongoDbConnectionInfoPtrOutputWithContext(ctx context.Context) MongoDbConnectionInfoPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MongoDbConnectionInfoPtrOutput)
}

// Describes a connection to a MongoDB data source
type MongoDbConnectionInfoResponse struct {
	// A MongoDB connection string or blob container URL. The user name and password can be specified here or in the userName and password properties
	ConnectionString string `pulumi:"connectionString"`
	// Password credential.
	Password *string `pulumi:"password"`
	// Type of connection info
	Type string `pulumi:"type"`
	// User name
	UserName *string `pulumi:"userName"`
}

// Describes a connection to a MongoDB data source
type MongoDbConnectionInfoResponseOutput struct{ *pulumi.OutputState }

func (MongoDbConnectionInfoResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MongoDbConnectionInfoResponse)(nil)).Elem()
}

func (o MongoDbConnectionInfoResponseOutput) ToMongoDbConnectionInfoResponseOutput() MongoDbConnectionInfoResponseOutput {
	return o
}

func (o MongoDbConnectionInfoResponseOutput) ToMongoDbConnectionInfoResponseOutputWithContext(ctx context.Context) MongoDbConnectionInfoResponseOutput {
	return o
}

func (o MongoDbConnectionInfoResponseOutput) ToMongoDbConnectionInfoResponsePtrOutput() MongoDbConnectionInfoResponsePtrOutput {
	return o.ToMongoDbConnectionInfoResponsePtrOutputWithContext(context.Background())
}

func (o MongoDbConnectionInfoResponseOutput) ToMongoDbConnectionInfoResponsePtrOutputWithContext(ctx context.Context) MongoDbConnectionInfoResponsePtrOutput {
	return o.ApplyT(func(v MongoDbConnectionInfoResponse) *MongoDbConnectionInfoResponse {
		return &v
	}).(MongoDbConnectionInfoResponsePtrOutput)
}

// A MongoDB connection string or blob container URL. The user name and password can be specified here or in the userName and password properties
func (o MongoDbConnectionInfoResponseOutput) ConnectionString() pulumi.StringOutput {
	return o.ApplyT(func(v MongoDbConnectionInfoResponse) string { return v.ConnectionString }).(pulumi.StringOutput)
}

// Password credential.
func (o MongoDbConnectionInfoResponseOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MongoDbConnectionInfoResponse) *string { return v.Password }).(pulumi.StringPtrOutput)
}

// Type of connection info
func (o MongoDbConnectionInfoResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v MongoDbConnectionInfoResponse) string { return v.Type }).(pulumi.StringOutput)
}

// User name
func (o MongoDbConnectionInfoResponseOutput) UserName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MongoDbConnectionInfoResponse) *string { return v.UserName }).(pulumi.StringPtrOutput)
}

type MongoDbConnectionInfoResponsePtrOutput struct{ *pulumi.OutputState }

func (MongoDbConnectionInfoResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MongoDbConnectionInfoResponse)(nil)).Elem()
}

func (o MongoDbConnectionInfoResponsePtrOutput) ToMongoDbConnectionInfoResponsePtrOutput() MongoDbConnectionInfoResponsePtrOutput {
	return o
}

func (o MongoDbConnectionInfoResponsePtrOutput) ToMongoDbConnectionInfoResponsePtrOutputWithContext(ctx context.Context) MongoDbConnectionInfoResponsePtrOutput {
	return o
}

func (o MongoDbConnectionInfoResponsePtrOutput) Elem() MongoDbConnectionInfoResponseOutput {
	return o.ApplyT(func(v *MongoDbConnectionInfoResponse) MongoDbConnectionInfoResponse { return *v }).(MongoDbConnectionInfoResponseOutput)
}

// A MongoDB connection string or blob container URL. The user name and password can be specified here or in the userName and password properties
func (o MongoDbConnectionInfoResponsePtrOutput) ConnectionString() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MongoDbConnectionInfoResponse) *string {
		if v == nil {
			return nil
		}
		return &v.ConnectionString
	}).(pulumi.StringPtrOutput)
}

// Password credential.
func (o MongoDbConnectionInfoResponsePtrOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MongoDbConnectionInfoResponse) *string {
		if v == nil {
			return nil
		}
		return v.Password
	}).(pulumi.StringPtrOutput)
}

// Type of connection info
func (o MongoDbConnectionInfoResponsePtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MongoDbConnectionInfoResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

// User name
func (o MongoDbConnectionInfoResponsePtrOutput) UserName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MongoDbConnectionInfoResponse) *string {
		if v == nil {
			return nil
		}
		return v.UserName
	}).(pulumi.StringPtrOutput)
}

// Describes a database within a MongoDB data source
type MongoDbDatabaseInfoResponse struct {
	// The average document size, or -1 if the average size is unknown
	AverageDocumentSize int `pulumi:"averageDocumentSize"`
	// A list of supported collections in a MongoDB database
	Collections []MongoDbCollectionInfoResponse `pulumi:"collections"`
	// The estimated total data size, in bytes, or -1 if the size is unknown.
	DataSize int `pulumi:"dataSize"`
	// The estimated total number of documents, or -1 if the document count is unknown
	DocumentCount int `pulumi:"documentCount"`
	// The unqualified name of the database or collection
	Name string `pulumi:"name"`
	// The qualified name of the database or collection. For a collection, this is the database-qualified name.
	QualifiedName string `pulumi:"qualifiedName"`
	// Whether the database has sharding enabled. Note that the migration task will enable sharding on the target if necessary.
	SupportsSharding bool `pulumi:"supportsSharding"`
}

// Describes a database within a MongoDB data source
type MongoDbDatabaseInfoResponseOutput struct{ *pulumi.OutputState }

func (MongoDbDatabaseInfoResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MongoDbDatabaseInfoResponse)(nil)).Elem()
}

func (o MongoDbDatabaseInfoResponseOutput) ToMongoDbDatabaseInfoResponseOutput() MongoDbDatabaseInfoResponseOutput {
	return o
}

func (o MongoDbDatabaseInfoResponseOutput) ToMongoDbDatabaseInfoResponseOutputWithContext(ctx context.Context) MongoDbDatabaseInfoResponseOutput {
	return o
}

// The average document size, or -1 if the average size is unknown
func (o MongoDbDatabaseInfoResponseOutput) AverageDocumentSize() pulumi.IntOutput {
	return o.ApplyT(func(v MongoDbDatabaseInfoResponse) int { return v.AverageDocumentSize }).(pulumi.IntOutput)
}

// A list of supported collections in a MongoDB database
func (o MongoDbDatabaseInfoResponseOutput) Collections() MongoDbCollectionInfoResponseArrayOutput {
	return o.ApplyT(func(v MongoDbDatabaseInfoResponse) []MongoDbCollectionInfoResponse { return v.Collections }).(MongoDbCollectionInfoResponseArrayOutput)
}

// The estimated total data size, in bytes, or -1 if the size is unknown.
func (o MongoDbDatabaseInfoResponseOutput) DataSize() pulumi.IntOutput {
	return o.ApplyT(func(v MongoDbDatabaseInfoResponse) int { return v.DataSize }).(pulumi.IntOutput)
}

// The estimated total number of documents, or -1 if the document count is unknown
func (o MongoDbDatabaseInfoResponseOutput) DocumentCount() pulumi.IntOutput {
	return o.ApplyT(func(v MongoDbDatabaseInfoResponse) int { return v.DocumentCount }).(pulumi.IntOutput)
}

// The unqualified name of the database or collection
func (o MongoDbDatabaseInfoResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v MongoDbDatabaseInfoResponse) string { return v.Name }).(pulumi.StringOutput)
}

// The qualified name of the database or collection. For a collection, this is the database-qualified name.
func (o MongoDbDatabaseInfoResponseOutput) QualifiedName() pulumi.StringOutput {
	return o.ApplyT(func(v MongoDbDatabaseInfoResponse) string { return v.QualifiedName }).(pulumi.StringOutput)
}

// Whether the database has sharding enabled. Note that the migration task will enable sharding on the target if necessary.
func (o MongoDbDatabaseInfoResponseOutput) SupportsSharding() pulumi.BoolOutput {
	return o.ApplyT(func(v MongoDbDatabaseInfoResponse) bool { return v.SupportsSharding }).(pulumi.BoolOutput)
}

type MongoDbDatabaseInfoResponseArrayOutput struct{ *pulumi.OutputState }

func (MongoDbDatabaseInfoResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MongoDbDatabaseInfoResponse)(nil)).Elem()
}

func (o MongoDbDatabaseInfoResponseArrayOutput) ToMongoDbDatabaseInfoResponseArrayOutput() MongoDbDatabaseInfoResponseArrayOutput {
	return o
}

func (o MongoDbDatabaseInfoResponseArrayOutput) ToMongoDbDatabaseInfoResponseArrayOutputWithContext(ctx context.Context) MongoDbDatabaseInfoResponseArrayOutput {
	return o
}

func (o MongoDbDatabaseInfoResponseArrayOutput) Index(i pulumi.IntInput) MongoDbDatabaseInfoResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) MongoDbDatabaseInfoResponse {
		return vs[0].([]MongoDbDatabaseInfoResponse)[vs[1].(int)]
	}).(MongoDbDatabaseInfoResponseOutput)
}

// Describes the progress of a database
type MongoDbDatabaseProgressResponse struct {
	// The number of document bytes copied during the Copying stage
	BytesCopied int `pulumi:"bytesCopied"`
	// The progress of the collections in the database. The keys are the unqualified names of the collections
	Collections map[string]MongoDbCollectionProgressResponse `pulumi:"collections"`
	// The number of documents copied during the Copying stage
	DocumentsCopied int `pulumi:"documentsCopied"`
	// The elapsed time in the format [ddd.]hh:mm:ss[.fffffff] (i.e. TimeSpan format)
	ElapsedTime string `pulumi:"elapsedTime"`
	// The errors and warnings that have occurred for the current object. The keys are the error codes.
	Errors map[string]MongoDbErrorResponse `pulumi:"errors"`
	// The number of oplog events awaiting replay
	EventsPending int `pulumi:"eventsPending"`
	// The number of oplog events replayed so far
	EventsReplayed int `pulumi:"eventsReplayed"`
	// The timestamp of the last oplog event received, or null if no oplog event has been received yet
	LastEventTime *string `pulumi:"lastEventTime"`
	// The timestamp of the last oplog event replayed, or null if no oplog event has been replayed yet
	LastReplayTime *string `pulumi:"lastReplayTime"`
	// The name of the progress object. For a collection, this is the unqualified collection name. For a database, this is the database name. For the overall migration, this is null.
	Name *string `pulumi:"name"`
	// The qualified name of the progress object. For a collection, this is the database-qualified name. For a database, this is the database name. For the overall migration, this is null.
	QualifiedName *string `pulumi:"qualifiedName"`
	// The type of progress object
	ResultType string `pulumi:"resultType"`
	State      string `pulumi:"state"`
	// The total number of document bytes on the source at the beginning of the Copying stage, or -1 if the total size was unknown
	TotalBytes int `pulumi:"totalBytes"`
	// The total number of documents on the source at the beginning of the Copying stage, or -1 if the total count was unknown
	TotalDocuments int `pulumi:"totalDocuments"`
}

// Describes the progress of a database
type MongoDbDatabaseProgressResponseOutput struct{ *pulumi.OutputState }

func (MongoDbDatabaseProgressResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MongoDbDatabaseProgressResponse)(nil)).Elem()
}

func (o MongoDbDatabaseProgressResponseOutput) ToMongoDbDatabaseProgressResponseOutput() MongoDbDatabaseProgressResponseOutput {
	return o
}

func (o MongoDbDatabaseProgressResponseOutput) ToMongoDbDatabaseProgressResponseOutputWithContext(ctx context.Context) MongoDbDatabaseProgressResponseOutput {
	return o
}

// The number of document bytes copied during the Copying stage
func (o MongoDbDatabaseProgressResponseOutput) BytesCopied() pulumi.IntOutput {
	return o.ApplyT(func(v MongoDbDatabaseProgressResponse) int { return v.BytesCopied }).(pulumi.IntOutput)
}

// The progress of the collections in the database. The keys are the unqualified names of the collections
func (o MongoDbDatabaseProgressResponseOutput) Collections() MongoDbCollectionProgressResponseMapOutput {
	return o.ApplyT(func(v MongoDbDatabaseProgressResponse) map[string]MongoDbCollectionProgressResponse {
		return v.Collections
	}).(MongoDbCollectionProgressResponseMapOutput)
}

// The number of documents copied during the Copying stage
func (o MongoDbDatabaseProgressResponseOutput) DocumentsCopied() pulumi.IntOutput {
	return o.ApplyT(func(v MongoDbDatabaseProgressResponse) int { return v.DocumentsCopied }).(pulumi.IntOutput)
}

// The elapsed time in the format [ddd.]hh:mm:ss[.fffffff] (i.e. TimeSpan format)
func (o MongoDbDatabaseProgressResponseOutput) ElapsedTime() pulumi.StringOutput {
	return o.ApplyT(func(v MongoDbDatabaseProgressResponse) string { return v.ElapsedTime }).(pulumi.StringOutput)
}

// The errors and warnings that have occurred for the current object. The keys are the error codes.
func (o MongoDbDatabaseProgressResponseOutput) Errors() MongoDbErrorResponseMapOutput {
	return o.ApplyT(func(v MongoDbDatabaseProgressResponse) map[string]MongoDbErrorResponse { return v.Errors }).(MongoDbErrorResponseMapOutput)
}

// The number of oplog events awaiting replay
func (o MongoDbDatabaseProgressResponseOutput) EventsPending() pulumi.IntOutput {
	return o.ApplyT(func(v MongoDbDatabaseProgressResponse) int { return v.EventsPending }).(pulumi.IntOutput)
}

// The number of oplog events replayed so far
func (o MongoDbDatabaseProgressResponseOutput) EventsReplayed() pulumi.IntOutput {
	return o.ApplyT(func(v MongoDbDatabaseProgressResponse) int { return v.EventsReplayed }).(pulumi.IntOutput)
}

// The timestamp of the last oplog event received, or null if no oplog event has been received yet
func (o MongoDbDatabaseProgressResponseOutput) LastEventTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MongoDbDatabaseProgressResponse) *string { return v.LastEventTime }).(pulumi.StringPtrOutput)
}

// The timestamp of the last oplog event replayed, or null if no oplog event has been replayed yet
func (o MongoDbDatabaseProgressResponseOutput) LastReplayTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MongoDbDatabaseProgressResponse) *string { return v.LastReplayTime }).(pulumi.StringPtrOutput)
}

// The name of the progress object. For a collection, this is the unqualified collection name. For a database, this is the database name. For the overall migration, this is null.
func (o MongoDbDatabaseProgressResponseOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MongoDbDatabaseProgressResponse) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The qualified name of the progress object. For a collection, this is the database-qualified name. For a database, this is the database name. For the overall migration, this is null.
func (o MongoDbDatabaseProgressResponseOutput) QualifiedName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MongoDbDatabaseProgressResponse) *string { return v.QualifiedName }).(pulumi.StringPtrOutput)
}

// The type of progress object
func (o MongoDbDatabaseProgressResponseOutput) ResultType() pulumi.StringOutput {
	return o.ApplyT(func(v MongoDbDatabaseProgressResponse) string { return v.ResultType }).(pulumi.StringOutput)
}

func (o MongoDbDatabaseProgressResponseOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v MongoDbDatabaseProgressResponse) string { return v.State }).(pulumi.StringOutput)
}

// The total number of document bytes on the source at the beginning of the Copying stage, or -1 if the total size was unknown
func (o MongoDbDatabaseProgressResponseOutput) TotalBytes() pulumi.IntOutput {
	return o.ApplyT(func(v MongoDbDatabaseProgressResponse) int { return v.TotalBytes }).(pulumi.IntOutput)
}

// The total number of documents on the source at the beginning of the Copying stage, or -1 if the total count was unknown
func (o MongoDbDatabaseProgressResponseOutput) TotalDocuments() pulumi.IntOutput {
	return o.ApplyT(func(v MongoDbDatabaseProgressResponse) int { return v.TotalDocuments }).(pulumi.IntOutput)
}

type MongoDbDatabaseProgressResponseMapOutput struct{ *pulumi.OutputState }

func (MongoDbDatabaseProgressResponseMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]MongoDbDatabaseProgressResponse)(nil)).Elem()
}

func (o MongoDbDatabaseProgressResponseMapOutput) ToMongoDbDatabaseProgressResponseMapOutput() MongoDbDatabaseProgressResponseMapOutput {
	return o
}

func (o MongoDbDatabaseProgressResponseMapOutput) ToMongoDbDatabaseProgressResponseMapOutputWithContext(ctx context.Context) MongoDbDatabaseProgressResponseMapOutput {
	return o
}

func (o MongoDbDatabaseProgressResponseMapOutput) MapIndex(k pulumi.StringInput) MongoDbDatabaseProgressResponseOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) MongoDbDatabaseProgressResponse {
		return vs[0].(map[string]MongoDbDatabaseProgressResponse)[vs[1].(string)]
	}).(MongoDbDatabaseProgressResponseOutput)
}

// Describes how an individual MongoDB database should be migrated
type MongoDbDatabaseSettings struct {
	// The collections on the source database to migrate to the target. The keys are the unqualified names of the collections.
	Collections map[string]MongoDbCollectionSettings `pulumi:"collections"`
	// The RUs that should be configured on a CosmosDB target, or null to use the default, or 0 if throughput should not be provisioned for the database. This has no effect on non-CosmosDB targets.
	TargetRUs *int `pulumi:"targetRUs"`
}

// MongoDbDatabaseSettingsInput is an input type that accepts MongoDbDatabaseSettingsArgs and MongoDbDatabaseSettingsOutput values.
// You can construct a concrete instance of `MongoDbDatabaseSettingsInput` via:
//
//          MongoDbDatabaseSettingsArgs{...}
type MongoDbDatabaseSettingsInput interface {
	pulumi.Input

	ToMongoDbDatabaseSettingsOutput() MongoDbDatabaseSettingsOutput
	ToMongoDbDatabaseSettingsOutputWithContext(context.Context) MongoDbDatabaseSettingsOutput
}

// Describes how an individual MongoDB database should be migrated
type MongoDbDatabaseSettingsArgs struct {
	// The collections on the source database to migrate to the target. The keys are the unqualified names of the collections.
	Collections MongoDbCollectionSettingsMapInput `pulumi:"collections"`
	// The RUs that should be configured on a CosmosDB target, or null to use the default, or 0 if throughput should not be provisioned for the database. This has no effect on non-CosmosDB targets.
	TargetRUs pulumi.IntPtrInput `pulumi:"targetRUs"`
}

func (MongoDbDatabaseSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MongoDbDatabaseSettings)(nil)).Elem()
}

func (i MongoDbDatabaseSettingsArgs) ToMongoDbDatabaseSettingsOutput() MongoDbDatabaseSettingsOutput {
	return i.ToMongoDbDatabaseSettingsOutputWithContext(context.Background())
}

func (i MongoDbDatabaseSettingsArgs) ToMongoDbDatabaseSettingsOutputWithContext(ctx context.Context) MongoDbDatabaseSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MongoDbDatabaseSettingsOutput)
}

// MongoDbDatabaseSettingsMapInput is an input type that accepts MongoDbDatabaseSettingsMap and MongoDbDatabaseSettingsMapOutput values.
// You can construct a concrete instance of `MongoDbDatabaseSettingsMapInput` via:
//
//          MongoDbDatabaseSettingsMap{ "key": MongoDbDatabaseSettingsArgs{...} }
type MongoDbDatabaseSettingsMapInput interface {
	pulumi.Input

	ToMongoDbDatabaseSettingsMapOutput() MongoDbDatabaseSettingsMapOutput
	ToMongoDbDatabaseSettingsMapOutputWithContext(context.Context) MongoDbDatabaseSettingsMapOutput
}

type MongoDbDatabaseSettingsMap map[string]MongoDbDatabaseSettingsInput

func (MongoDbDatabaseSettingsMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]MongoDbDatabaseSettings)(nil)).Elem()
}

func (i MongoDbDatabaseSettingsMap) ToMongoDbDatabaseSettingsMapOutput() MongoDbDatabaseSettingsMapOutput {
	return i.ToMongoDbDatabaseSettingsMapOutputWithContext(context.Background())
}

func (i MongoDbDatabaseSettingsMap) ToMongoDbDatabaseSettingsMapOutputWithContext(ctx context.Context) MongoDbDatabaseSettingsMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MongoDbDatabaseSettingsMapOutput)
}

// Describes how an individual MongoDB database should be migrated
type MongoDbDatabaseSettingsResponse struct {
	// The collections on the source database to migrate to the target. The keys are the unqualified names of the collections.
	Collections map[string]MongoDbCollectionSettingsResponse `pulumi:"collections"`
	// The RUs that should be configured on a CosmosDB target, or null to use the default, or 0 if throughput should not be provisioned for the database. This has no effect on non-CosmosDB targets.
	TargetRUs *int `pulumi:"targetRUs"`
}

// Describes how an individual MongoDB database should be migrated
type MongoDbDatabaseSettingsResponseOutput struct{ *pulumi.OutputState }

func (MongoDbDatabaseSettingsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MongoDbDatabaseSettingsResponse)(nil)).Elem()
}

func (o MongoDbDatabaseSettingsResponseOutput) ToMongoDbDatabaseSettingsResponseOutput() MongoDbDatabaseSettingsResponseOutput {
	return o
}

func (o MongoDbDatabaseSettingsResponseOutput) ToMongoDbDatabaseSettingsResponseOutputWithContext(ctx context.Context) MongoDbDatabaseSettingsResponseOutput {
	return o
}

// The collections on the source database to migrate to the target. The keys are the unqualified names of the collections.
func (o MongoDbDatabaseSettingsResponseOutput) Collections() MongoDbCollectionSettingsResponseMapOutput {
	return o.ApplyT(func(v MongoDbDatabaseSettingsResponse) map[string]MongoDbCollectionSettingsResponse {
		return v.Collections
	}).(MongoDbCollectionSettingsResponseMapOutput)
}

// The RUs that should be configured on a CosmosDB target, or null to use the default, or 0 if throughput should not be provisioned for the database. This has no effect on non-CosmosDB targets.
func (o MongoDbDatabaseSettingsResponseOutput) TargetRUs() pulumi.IntPtrOutput {
	return o.ApplyT(func(v MongoDbDatabaseSettingsResponse) *int { return v.TargetRUs }).(pulumi.IntPtrOutput)
}

type MongoDbDatabaseSettingsResponseMapOutput struct{ *pulumi.OutputState }

func (MongoDbDatabaseSettingsResponseMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]MongoDbDatabaseSettingsResponse)(nil)).Elem()
}

func (o MongoDbDatabaseSettingsResponseMapOutput) ToMongoDbDatabaseSettingsResponseMapOutput() MongoDbDatabaseSettingsResponseMapOutput {
	return o
}

func (o MongoDbDatabaseSettingsResponseMapOutput) ToMongoDbDatabaseSettingsResponseMapOutputWithContext(ctx context.Context) MongoDbDatabaseSettingsResponseMapOutput {
	return o
}

func (o MongoDbDatabaseSettingsResponseMapOutput) MapIndex(k pulumi.StringInput) MongoDbDatabaseSettingsResponseOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) MongoDbDatabaseSettingsResponse {
		return vs[0].(map[string]MongoDbDatabaseSettingsResponse)[vs[1].(string)]
	}).(MongoDbDatabaseSettingsResponseOutput)
}

// Describes an error or warning that occurred during a MongoDB migration
type MongoDbErrorResponse struct {
	// The non-localized, machine-readable code that describes the error or warning
	Code *string `pulumi:"code"`
	// The number of times the error or warning has occurred
	Count *int `pulumi:"count"`
	// The localized, human-readable message that describes the error or warning
	Message *string `pulumi:"message"`
	// The type of error or warning
	Type *string `pulumi:"type"`
}

// Describes an error or warning that occurred during a MongoDB migration
type MongoDbErrorResponseOutput struct{ *pulumi.OutputState }

func (MongoDbErrorResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MongoDbErrorResponse)(nil)).Elem()
}

func (o MongoDbErrorResponseOutput) ToMongoDbErrorResponseOutput() MongoDbErrorResponseOutput {
	return o
}

func (o MongoDbErrorResponseOutput) ToMongoDbErrorResponseOutputWithContext(ctx context.Context) MongoDbErrorResponseOutput {
	return o
}

// The non-localized, machine-readable code that describes the error or warning
func (o MongoDbErrorResponseOutput) Code() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MongoDbErrorResponse) *string { return v.Code }).(pulumi.StringPtrOutput)
}

// The number of times the error or warning has occurred
func (o MongoDbErrorResponseOutput) Count() pulumi.IntPtrOutput {
	return o.ApplyT(func(v MongoDbErrorResponse) *int { return v.Count }).(pulumi.IntPtrOutput)
}

// The localized, human-readable message that describes the error or warning
func (o MongoDbErrorResponseOutput) Message() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MongoDbErrorResponse) *string { return v.Message }).(pulumi.StringPtrOutput)
}

// The type of error or warning
func (o MongoDbErrorResponseOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MongoDbErrorResponse) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type MongoDbErrorResponseMapOutput struct{ *pulumi.OutputState }

func (MongoDbErrorResponseMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]MongoDbErrorResponse)(nil)).Elem()
}

func (o MongoDbErrorResponseMapOutput) ToMongoDbErrorResponseMapOutput() MongoDbErrorResponseMapOutput {
	return o
}

func (o MongoDbErrorResponseMapOutput) ToMongoDbErrorResponseMapOutputWithContext(ctx context.Context) MongoDbErrorResponseMapOutput {
	return o
}

func (o MongoDbErrorResponseMapOutput) MapIndex(k pulumi.StringInput) MongoDbErrorResponseOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) MongoDbErrorResponse {
		return vs[0].(map[string]MongoDbErrorResponse)[vs[1].(string)]
	}).(MongoDbErrorResponseOutput)
}

// Describes the progress of the overall migration
type MongoDbMigrationProgressResponse struct {
	// The number of document bytes copied during the Copying stage
	BytesCopied int `pulumi:"bytesCopied"`
	// The progress of the databases in the migration. The keys are the names of the databases
	Databases map[string]MongoDbDatabaseProgressResponse `pulumi:"databases"`
	// The number of documents copied during the Copying stage
	DocumentsCopied int `pulumi:"documentsCopied"`
	// The elapsed time in the format [ddd.]hh:mm:ss[.fffffff] (i.e. TimeSpan format)
	ElapsedTime string `pulumi:"elapsedTime"`
	// The errors and warnings that have occurred for the current object. The keys are the error codes.
	Errors map[string]MongoDbErrorResponse `pulumi:"errors"`
	// The number of oplog events awaiting replay
	EventsPending int `pulumi:"eventsPending"`
	// The number of oplog events replayed so far
	EventsReplayed int `pulumi:"eventsReplayed"`
	// The timestamp of the last oplog event received, or null if no oplog event has been received yet
	LastEventTime *string `pulumi:"lastEventTime"`
	// The timestamp of the last oplog event replayed, or null if no oplog event has been replayed yet
	LastReplayTime *string `pulumi:"lastReplayTime"`
	// The name of the progress object. For a collection, this is the unqualified collection name. For a database, this is the database name. For the overall migration, this is null.
	Name *string `pulumi:"name"`
	// The qualified name of the progress object. For a collection, this is the database-qualified name. For a database, this is the database name. For the overall migration, this is null.
	QualifiedName *string `pulumi:"qualifiedName"`
	// The type of progress object
	ResultType string `pulumi:"resultType"`
	State      string `pulumi:"state"`
	// The total number of document bytes on the source at the beginning of the Copying stage, or -1 if the total size was unknown
	TotalBytes int `pulumi:"totalBytes"`
	// The total number of documents on the source at the beginning of the Copying stage, or -1 if the total count was unknown
	TotalDocuments int `pulumi:"totalDocuments"`
}

// Describes the progress of the overall migration
type MongoDbMigrationProgressResponseOutput struct{ *pulumi.OutputState }

func (MongoDbMigrationProgressResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MongoDbMigrationProgressResponse)(nil)).Elem()
}

func (o MongoDbMigrationProgressResponseOutput) ToMongoDbMigrationProgressResponseOutput() MongoDbMigrationProgressResponseOutput {
	return o
}

func (o MongoDbMigrationProgressResponseOutput) ToMongoDbMigrationProgressResponseOutputWithContext(ctx context.Context) MongoDbMigrationProgressResponseOutput {
	return o
}

// The number of document bytes copied during the Copying stage
func (o MongoDbMigrationProgressResponseOutput) BytesCopied() pulumi.IntOutput {
	return o.ApplyT(func(v MongoDbMigrationProgressResponse) int { return v.BytesCopied }).(pulumi.IntOutput)
}

// The progress of the databases in the migration. The keys are the names of the databases
func (o MongoDbMigrationProgressResponseOutput) Databases() MongoDbDatabaseProgressResponseMapOutput {
	return o.ApplyT(func(v MongoDbMigrationProgressResponse) map[string]MongoDbDatabaseProgressResponse {
		return v.Databases
	}).(MongoDbDatabaseProgressResponseMapOutput)
}

// The number of documents copied during the Copying stage
func (o MongoDbMigrationProgressResponseOutput) DocumentsCopied() pulumi.IntOutput {
	return o.ApplyT(func(v MongoDbMigrationProgressResponse) int { return v.DocumentsCopied }).(pulumi.IntOutput)
}

// The elapsed time in the format [ddd.]hh:mm:ss[.fffffff] (i.e. TimeSpan format)
func (o MongoDbMigrationProgressResponseOutput) ElapsedTime() pulumi.StringOutput {
	return o.ApplyT(func(v MongoDbMigrationProgressResponse) string { return v.ElapsedTime }).(pulumi.StringOutput)
}

// The errors and warnings that have occurred for the current object. The keys are the error codes.
func (o MongoDbMigrationProgressResponseOutput) Errors() MongoDbErrorResponseMapOutput {
	return o.ApplyT(func(v MongoDbMigrationProgressResponse) map[string]MongoDbErrorResponse { return v.Errors }).(MongoDbErrorResponseMapOutput)
}

// The number of oplog events awaiting replay
func (o MongoDbMigrationProgressResponseOutput) EventsPending() pulumi.IntOutput {
	return o.ApplyT(func(v MongoDbMigrationProgressResponse) int { return v.EventsPending }).(pulumi.IntOutput)
}

// The number of oplog events replayed so far
func (o MongoDbMigrationProgressResponseOutput) EventsReplayed() pulumi.IntOutput {
	return o.ApplyT(func(v MongoDbMigrationProgressResponse) int { return v.EventsReplayed }).(pulumi.IntOutput)
}

// The timestamp of the last oplog event received, or null if no oplog event has been received yet
func (o MongoDbMigrationProgressResponseOutput) LastEventTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MongoDbMigrationProgressResponse) *string { return v.LastEventTime }).(pulumi.StringPtrOutput)
}

// The timestamp of the last oplog event replayed, or null if no oplog event has been replayed yet
func (o MongoDbMigrationProgressResponseOutput) LastReplayTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MongoDbMigrationProgressResponse) *string { return v.LastReplayTime }).(pulumi.StringPtrOutput)
}

// The name of the progress object. For a collection, this is the unqualified collection name. For a database, this is the database name. For the overall migration, this is null.
func (o MongoDbMigrationProgressResponseOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MongoDbMigrationProgressResponse) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The qualified name of the progress object. For a collection, this is the database-qualified name. For a database, this is the database name. For the overall migration, this is null.
func (o MongoDbMigrationProgressResponseOutput) QualifiedName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MongoDbMigrationProgressResponse) *string { return v.QualifiedName }).(pulumi.StringPtrOutput)
}

// The type of progress object
func (o MongoDbMigrationProgressResponseOutput) ResultType() pulumi.StringOutput {
	return o.ApplyT(func(v MongoDbMigrationProgressResponse) string { return v.ResultType }).(pulumi.StringOutput)
}

func (o MongoDbMigrationProgressResponseOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v MongoDbMigrationProgressResponse) string { return v.State }).(pulumi.StringOutput)
}

// The total number of document bytes on the source at the beginning of the Copying stage, or -1 if the total size was unknown
func (o MongoDbMigrationProgressResponseOutput) TotalBytes() pulumi.IntOutput {
	return o.ApplyT(func(v MongoDbMigrationProgressResponse) int { return v.TotalBytes }).(pulumi.IntOutput)
}

// The total number of documents on the source at the beginning of the Copying stage, or -1 if the total count was unknown
func (o MongoDbMigrationProgressResponseOutput) TotalDocuments() pulumi.IntOutput {
	return o.ApplyT(func(v MongoDbMigrationProgressResponse) int { return v.TotalDocuments }).(pulumi.IntOutput)
}

type MongoDbMigrationProgressResponseArrayOutput struct{ *pulumi.OutputState }

func (MongoDbMigrationProgressResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MongoDbMigrationProgressResponse)(nil)).Elem()
}

func (o MongoDbMigrationProgressResponseArrayOutput) ToMongoDbMigrationProgressResponseArrayOutput() MongoDbMigrationProgressResponseArrayOutput {
	return o
}

func (o MongoDbMigrationProgressResponseArrayOutput) ToMongoDbMigrationProgressResponseArrayOutputWithContext(ctx context.Context) MongoDbMigrationProgressResponseArrayOutput {
	return o
}

func (o MongoDbMigrationProgressResponseArrayOutput) Index(i pulumi.IntInput) MongoDbMigrationProgressResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) MongoDbMigrationProgressResponse {
		return vs[0].([]MongoDbMigrationProgressResponse)[vs[1].(int)]
	}).(MongoDbMigrationProgressResponseOutput)
}

// Describes how a MongoDB data migration should be performed
type MongoDbMigrationSettings struct {
	// The RU limit on a CosmosDB target that collections will be temporarily increased to (if lower) during the initial copy of a migration, from 10,000 to 1,000,000, or 0 to use the default boost (which is generally the maximum), or null to not boost the RUs. This setting has no effect on non-CosmosDB targets.
	BoostRUs *int `pulumi:"boostRUs"`
	// The databases on the source cluster to migrate to the target. The keys are the names of the databases.
	Databases map[string]MongoDbDatabaseSettings `pulumi:"databases"`
	// Describes how changes will be replicated from the source to the target. The default is OneTime.
	Replication *string `pulumi:"replication"`
	// Settings used to connect to the source cluster
	Source MongoDbConnectionInfo `pulumi:"source"`
	// Settings used to connect to the target cluster
	Target MongoDbConnectionInfo `pulumi:"target"`
	// Settings used to limit the resource usage of the migration
	Throttling *MongoDbThrottlingSettings `pulumi:"throttling"`
}

// MongoDbMigrationSettingsInput is an input type that accepts MongoDbMigrationSettingsArgs and MongoDbMigrationSettingsOutput values.
// You can construct a concrete instance of `MongoDbMigrationSettingsInput` via:
//
//          MongoDbMigrationSettingsArgs{...}
type MongoDbMigrationSettingsInput interface {
	pulumi.Input

	ToMongoDbMigrationSettingsOutput() MongoDbMigrationSettingsOutput
	ToMongoDbMigrationSettingsOutputWithContext(context.Context) MongoDbMigrationSettingsOutput
}

// Describes how a MongoDB data migration should be performed
type MongoDbMigrationSettingsArgs struct {
	// The RU limit on a CosmosDB target that collections will be temporarily increased to (if lower) during the initial copy of a migration, from 10,000 to 1,000,000, or 0 to use the default boost (which is generally the maximum), or null to not boost the RUs. This setting has no effect on non-CosmosDB targets.
	BoostRUs pulumi.IntPtrInput `pulumi:"boostRUs"`
	// The databases on the source cluster to migrate to the target. The keys are the names of the databases.
	Databases MongoDbDatabaseSettingsMapInput `pulumi:"databases"`
	// Describes how changes will be replicated from the source to the target. The default is OneTime.
	Replication pulumi.StringPtrInput `pulumi:"replication"`
	// Settings used to connect to the source cluster
	Source MongoDbConnectionInfoInput `pulumi:"source"`
	// Settings used to connect to the target cluster
	Target MongoDbConnectionInfoInput `pulumi:"target"`
	// Settings used to limit the resource usage of the migration
	Throttling MongoDbThrottlingSettingsPtrInput `pulumi:"throttling"`
}

func (MongoDbMigrationSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MongoDbMigrationSettings)(nil)).Elem()
}

func (i MongoDbMigrationSettingsArgs) ToMongoDbMigrationSettingsOutput() MongoDbMigrationSettingsOutput {
	return i.ToMongoDbMigrationSettingsOutputWithContext(context.Background())
}

func (i MongoDbMigrationSettingsArgs) ToMongoDbMigrationSettingsOutputWithContext(ctx context.Context) MongoDbMigrationSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MongoDbMigrationSettingsOutput)
}

func (i MongoDbMigrationSettingsArgs) ToMongoDbMigrationSettingsPtrOutput() MongoDbMigrationSettingsPtrOutput {
	return i.ToMongoDbMigrationSettingsPtrOutputWithContext(context.Background())
}

func (i MongoDbMigrationSettingsArgs) ToMongoDbMigrationSettingsPtrOutputWithContext(ctx context.Context) MongoDbMigrationSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MongoDbMigrationSettingsOutput).ToMongoDbMigrationSettingsPtrOutputWithContext(ctx)
}

// MongoDbMigrationSettingsPtrInput is an input type that accepts MongoDbMigrationSettingsArgs, MongoDbMigrationSettingsPtr and MongoDbMigrationSettingsPtrOutput values.
// You can construct a concrete instance of `MongoDbMigrationSettingsPtrInput` via:
//
//          MongoDbMigrationSettingsArgs{...}
//
//  or:
//
//          nil
type MongoDbMigrationSettingsPtrInput interface {
	pulumi.Input

	ToMongoDbMigrationSettingsPtrOutput() MongoDbMigrationSettingsPtrOutput
	ToMongoDbMigrationSettingsPtrOutputWithContext(context.Context) MongoDbMigrationSettingsPtrOutput
}

type mongoDbMigrationSettingsPtrType MongoDbMigrationSettingsArgs

func MongoDbMigrationSettingsPtr(v *MongoDbMigrationSettingsArgs) MongoDbMigrationSettingsPtrInput {
	return (*mongoDbMigrationSettingsPtrType)(v)
}

func (*mongoDbMigrationSettingsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**MongoDbMigrationSettings)(nil)).Elem()
}

func (i *mongoDbMigrationSettingsPtrType) ToMongoDbMigrationSettingsPtrOutput() MongoDbMigrationSettingsPtrOutput {
	return i.ToMongoDbMigrationSettingsPtrOutputWithContext(context.Background())
}

func (i *mongoDbMigrationSettingsPtrType) ToMongoDbMigrationSettingsPtrOutputWithContext(ctx context.Context) MongoDbMigrationSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MongoDbMigrationSettingsPtrOutput)
}

// Describes how a MongoDB data migration should be performed
type MongoDbMigrationSettingsResponse struct {
	// The RU limit on a CosmosDB target that collections will be temporarily increased to (if lower) during the initial copy of a migration, from 10,000 to 1,000,000, or 0 to use the default boost (which is generally the maximum), or null to not boost the RUs. This setting has no effect on non-CosmosDB targets.
	BoostRUs *int `pulumi:"boostRUs"`
	// The databases on the source cluster to migrate to the target. The keys are the names of the databases.
	Databases map[string]MongoDbDatabaseSettingsResponse `pulumi:"databases"`
	// Describes how changes will be replicated from the source to the target. The default is OneTime.
	Replication *string `pulumi:"replication"`
	// Settings used to connect to the source cluster
	Source MongoDbConnectionInfoResponse `pulumi:"source"`
	// Settings used to connect to the target cluster
	Target MongoDbConnectionInfoResponse `pulumi:"target"`
	// Settings used to limit the resource usage of the migration
	Throttling *MongoDbThrottlingSettingsResponse `pulumi:"throttling"`
}

// Describes how a MongoDB data migration should be performed
type MongoDbMigrationSettingsResponseOutput struct{ *pulumi.OutputState }

func (MongoDbMigrationSettingsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MongoDbMigrationSettingsResponse)(nil)).Elem()
}

func (o MongoDbMigrationSettingsResponseOutput) ToMongoDbMigrationSettingsResponseOutput() MongoDbMigrationSettingsResponseOutput {
	return o
}

func (o MongoDbMigrationSettingsResponseOutput) ToMongoDbMigrationSettingsResponseOutputWithContext(ctx context.Context) MongoDbMigrationSettingsResponseOutput {
	return o
}

func (o MongoDbMigrationSettingsResponseOutput) ToMongoDbMigrationSettingsResponsePtrOutput() MongoDbMigrationSettingsResponsePtrOutput {
	return o.ToMongoDbMigrationSettingsResponsePtrOutputWithContext(context.Background())
}

func (o MongoDbMigrationSettingsResponseOutput) ToMongoDbMigrationSettingsResponsePtrOutputWithContext(ctx context.Context) MongoDbMigrationSettingsResponsePtrOutput {
	return o.ApplyT(func(v MongoDbMigrationSettingsResponse) *MongoDbMigrationSettingsResponse {
		return &v
	}).(MongoDbMigrationSettingsResponsePtrOutput)
}

// The RU limit on a CosmosDB target that collections will be temporarily increased to (if lower) during the initial copy of a migration, from 10,000 to 1,000,000, or 0 to use the default boost (which is generally the maximum), or null to not boost the RUs. This setting has no effect on non-CosmosDB targets.
func (o MongoDbMigrationSettingsResponseOutput) BoostRUs() pulumi.IntPtrOutput {
	return o.ApplyT(func(v MongoDbMigrationSettingsResponse) *int { return v.BoostRUs }).(pulumi.IntPtrOutput)
}

// The databases on the source cluster to migrate to the target. The keys are the names of the databases.
func (o MongoDbMigrationSettingsResponseOutput) Databases() MongoDbDatabaseSettingsResponseMapOutput {
	return o.ApplyT(func(v MongoDbMigrationSettingsResponse) map[string]MongoDbDatabaseSettingsResponse {
		return v.Databases
	}).(MongoDbDatabaseSettingsResponseMapOutput)
}

// Describes how changes will be replicated from the source to the target. The default is OneTime.
func (o MongoDbMigrationSettingsResponseOutput) Replication() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MongoDbMigrationSettingsResponse) *string { return v.Replication }).(pulumi.StringPtrOutput)
}

// Settings used to connect to the source cluster
func (o MongoDbMigrationSettingsResponseOutput) Source() MongoDbConnectionInfoResponseOutput {
	return o.ApplyT(func(v MongoDbMigrationSettingsResponse) MongoDbConnectionInfoResponse { return v.Source }).(MongoDbConnectionInfoResponseOutput)
}

// Settings used to connect to the target cluster
func (o MongoDbMigrationSettingsResponseOutput) Target() MongoDbConnectionInfoResponseOutput {
	return o.ApplyT(func(v MongoDbMigrationSettingsResponse) MongoDbConnectionInfoResponse { return v.Target }).(MongoDbConnectionInfoResponseOutput)
}

// Settings used to limit the resource usage of the migration
func (o MongoDbMigrationSettingsResponseOutput) Throttling() MongoDbThrottlingSettingsResponsePtrOutput {
	return o.ApplyT(func(v MongoDbMigrationSettingsResponse) *MongoDbThrottlingSettingsResponse { return v.Throttling }).(MongoDbThrottlingSettingsResponsePtrOutput)
}

type MongoDbMigrationSettingsResponsePtrOutput struct{ *pulumi.OutputState }

func (MongoDbMigrationSettingsResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MongoDbMigrationSettingsResponse)(nil)).Elem()
}

func (o MongoDbMigrationSettingsResponsePtrOutput) ToMongoDbMigrationSettingsResponsePtrOutput() MongoDbMigrationSettingsResponsePtrOutput {
	return o
}

func (o MongoDbMigrationSettingsResponsePtrOutput) ToMongoDbMigrationSettingsResponsePtrOutputWithContext(ctx context.Context) MongoDbMigrationSettingsResponsePtrOutput {
	return o
}

func (o MongoDbMigrationSettingsResponsePtrOutput) Elem() MongoDbMigrationSettingsResponseOutput {
	return o.ApplyT(func(v *MongoDbMigrationSettingsResponse) MongoDbMigrationSettingsResponse { return *v }).(MongoDbMigrationSettingsResponseOutput)
}

// The RU limit on a CosmosDB target that collections will be temporarily increased to (if lower) during the initial copy of a migration, from 10,000 to 1,000,000, or 0 to use the default boost (which is generally the maximum), or null to not boost the RUs. This setting has no effect on non-CosmosDB targets.
func (o MongoDbMigrationSettingsResponsePtrOutput) BoostRUs() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *MongoDbMigrationSettingsResponse) *int {
		if v == nil {
			return nil
		}
		return v.BoostRUs
	}).(pulumi.IntPtrOutput)
}

// The databases on the source cluster to migrate to the target. The keys are the names of the databases.
func (o MongoDbMigrationSettingsResponsePtrOutput) Databases() MongoDbDatabaseSettingsResponseMapOutput {
	return o.ApplyT(func(v *MongoDbMigrationSettingsResponse) map[string]MongoDbDatabaseSettingsResponse {
		if v == nil {
			return nil
		}
		return v.Databases
	}).(MongoDbDatabaseSettingsResponseMapOutput)
}

// Describes how changes will be replicated from the source to the target. The default is OneTime.
func (o MongoDbMigrationSettingsResponsePtrOutput) Replication() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MongoDbMigrationSettingsResponse) *string {
		if v == nil {
			return nil
		}
		return v.Replication
	}).(pulumi.StringPtrOutput)
}

// Settings used to connect to the source cluster
func (o MongoDbMigrationSettingsResponsePtrOutput) Source() MongoDbConnectionInfoResponsePtrOutput {
	return o.ApplyT(func(v *MongoDbMigrationSettingsResponse) *MongoDbConnectionInfoResponse {
		if v == nil {
			return nil
		}
		return &v.Source
	}).(MongoDbConnectionInfoResponsePtrOutput)
}

// Settings used to connect to the target cluster
func (o MongoDbMigrationSettingsResponsePtrOutput) Target() MongoDbConnectionInfoResponsePtrOutput {
	return o.ApplyT(func(v *MongoDbMigrationSettingsResponse) *MongoDbConnectionInfoResponse {
		if v == nil {
			return nil
		}
		return &v.Target
	}).(MongoDbConnectionInfoResponsePtrOutput)
}

// Settings used to limit the resource usage of the migration
func (o MongoDbMigrationSettingsResponsePtrOutput) Throttling() MongoDbThrottlingSettingsResponsePtrOutput {
	return o.ApplyT(func(v *MongoDbMigrationSettingsResponse) *MongoDbThrottlingSettingsResponse {
		if v == nil {
			return nil
		}
		return v.Throttling
	}).(MongoDbThrottlingSettingsResponsePtrOutput)
}

// Describes a field reference within a MongoDB shard key
type MongoDbShardKeyField struct {
	// The name of the field
	Name string `pulumi:"name"`
	// The field ordering
	Order string `pulumi:"order"`
}

// MongoDbShardKeyFieldInput is an input type that accepts MongoDbShardKeyFieldArgs and MongoDbShardKeyFieldOutput values.
// You can construct a concrete instance of `MongoDbShardKeyFieldInput` via:
//
//          MongoDbShardKeyFieldArgs{...}
type MongoDbShardKeyFieldInput interface {
	pulumi.Input

	ToMongoDbShardKeyFieldOutput() MongoDbShardKeyFieldOutput
	ToMongoDbShardKeyFieldOutputWithContext(context.Context) MongoDbShardKeyFieldOutput
}

// Describes a field reference within a MongoDB shard key
type MongoDbShardKeyFieldArgs struct {
	// The name of the field
	Name pulumi.StringInput `pulumi:"name"`
	// The field ordering
	Order pulumi.StringInput `pulumi:"order"`
}

func (MongoDbShardKeyFieldArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MongoDbShardKeyField)(nil)).Elem()
}

func (i MongoDbShardKeyFieldArgs) ToMongoDbShardKeyFieldOutput() MongoDbShardKeyFieldOutput {
	return i.ToMongoDbShardKeyFieldOutputWithContext(context.Background())
}

func (i MongoDbShardKeyFieldArgs) ToMongoDbShardKeyFieldOutputWithContext(ctx context.Context) MongoDbShardKeyFieldOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MongoDbShardKeyFieldOutput)
}

// MongoDbShardKeyFieldArrayInput is an input type that accepts MongoDbShardKeyFieldArray and MongoDbShardKeyFieldArrayOutput values.
// You can construct a concrete instance of `MongoDbShardKeyFieldArrayInput` via:
//
//          MongoDbShardKeyFieldArray{ MongoDbShardKeyFieldArgs{...} }
type MongoDbShardKeyFieldArrayInput interface {
	pulumi.Input

	ToMongoDbShardKeyFieldArrayOutput() MongoDbShardKeyFieldArrayOutput
	ToMongoDbShardKeyFieldArrayOutputWithContext(context.Context) MongoDbShardKeyFieldArrayOutput
}

type MongoDbShardKeyFieldArray []MongoDbShardKeyFieldInput

func (MongoDbShardKeyFieldArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MongoDbShardKeyField)(nil)).Elem()
}

func (i MongoDbShardKeyFieldArray) ToMongoDbShardKeyFieldArrayOutput() MongoDbShardKeyFieldArrayOutput {
	return i.ToMongoDbShardKeyFieldArrayOutputWithContext(context.Background())
}

func (i MongoDbShardKeyFieldArray) ToMongoDbShardKeyFieldArrayOutputWithContext(ctx context.Context) MongoDbShardKeyFieldArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MongoDbShardKeyFieldArrayOutput)
}

// Describes a field reference within a MongoDB shard key
type MongoDbShardKeyFieldResponse struct {
	// The name of the field
	Name string `pulumi:"name"`
	// The field ordering
	Order string `pulumi:"order"`
}

// Describes a field reference within a MongoDB shard key
type MongoDbShardKeyFieldResponseOutput struct{ *pulumi.OutputState }

func (MongoDbShardKeyFieldResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MongoDbShardKeyFieldResponse)(nil)).Elem()
}

func (o MongoDbShardKeyFieldResponseOutput) ToMongoDbShardKeyFieldResponseOutput() MongoDbShardKeyFieldResponseOutput {
	return o
}

func (o MongoDbShardKeyFieldResponseOutput) ToMongoDbShardKeyFieldResponseOutputWithContext(ctx context.Context) MongoDbShardKeyFieldResponseOutput {
	return o
}

// The name of the field
func (o MongoDbShardKeyFieldResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v MongoDbShardKeyFieldResponse) string { return v.Name }).(pulumi.StringOutput)
}

// The field ordering
func (o MongoDbShardKeyFieldResponseOutput) Order() pulumi.StringOutput {
	return o.ApplyT(func(v MongoDbShardKeyFieldResponse) string { return v.Order }).(pulumi.StringOutput)
}

type MongoDbShardKeyFieldResponseArrayOutput struct{ *pulumi.OutputState }

func (MongoDbShardKeyFieldResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MongoDbShardKeyFieldResponse)(nil)).Elem()
}

func (o MongoDbShardKeyFieldResponseArrayOutput) ToMongoDbShardKeyFieldResponseArrayOutput() MongoDbShardKeyFieldResponseArrayOutput {
	return o
}

func (o MongoDbShardKeyFieldResponseArrayOutput) ToMongoDbShardKeyFieldResponseArrayOutputWithContext(ctx context.Context) MongoDbShardKeyFieldResponseArrayOutput {
	return o
}

func (o MongoDbShardKeyFieldResponseArrayOutput) Index(i pulumi.IntInput) MongoDbShardKeyFieldResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) MongoDbShardKeyFieldResponse {
		return vs[0].([]MongoDbShardKeyFieldResponse)[vs[1].(int)]
	}).(MongoDbShardKeyFieldResponseOutput)
}

// Describes a MongoDB shard key
type MongoDbShardKeyInfoResponse struct {
	// The fields within the shard key
	Fields []MongoDbShardKeyFieldResponse `pulumi:"fields"`
	// Whether the shard key is unique
	IsUnique bool `pulumi:"isUnique"`
}

// Describes a MongoDB shard key
type MongoDbShardKeyInfoResponseOutput struct{ *pulumi.OutputState }

func (MongoDbShardKeyInfoResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MongoDbShardKeyInfoResponse)(nil)).Elem()
}

func (o MongoDbShardKeyInfoResponseOutput) ToMongoDbShardKeyInfoResponseOutput() MongoDbShardKeyInfoResponseOutput {
	return o
}

func (o MongoDbShardKeyInfoResponseOutput) ToMongoDbShardKeyInfoResponseOutputWithContext(ctx context.Context) MongoDbShardKeyInfoResponseOutput {
	return o
}

func (o MongoDbShardKeyInfoResponseOutput) ToMongoDbShardKeyInfoResponsePtrOutput() MongoDbShardKeyInfoResponsePtrOutput {
	return o.ToMongoDbShardKeyInfoResponsePtrOutputWithContext(context.Background())
}

func (o MongoDbShardKeyInfoResponseOutput) ToMongoDbShardKeyInfoResponsePtrOutputWithContext(ctx context.Context) MongoDbShardKeyInfoResponsePtrOutput {
	return o.ApplyT(func(v MongoDbShardKeyInfoResponse) *MongoDbShardKeyInfoResponse {
		return &v
	}).(MongoDbShardKeyInfoResponsePtrOutput)
}

// The fields within the shard key
func (o MongoDbShardKeyInfoResponseOutput) Fields() MongoDbShardKeyFieldResponseArrayOutput {
	return o.ApplyT(func(v MongoDbShardKeyInfoResponse) []MongoDbShardKeyFieldResponse { return v.Fields }).(MongoDbShardKeyFieldResponseArrayOutput)
}

// Whether the shard key is unique
func (o MongoDbShardKeyInfoResponseOutput) IsUnique() pulumi.BoolOutput {
	return o.ApplyT(func(v MongoDbShardKeyInfoResponse) bool { return v.IsUnique }).(pulumi.BoolOutput)
}

type MongoDbShardKeyInfoResponsePtrOutput struct{ *pulumi.OutputState }

func (MongoDbShardKeyInfoResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MongoDbShardKeyInfoResponse)(nil)).Elem()
}

func (o MongoDbShardKeyInfoResponsePtrOutput) ToMongoDbShardKeyInfoResponsePtrOutput() MongoDbShardKeyInfoResponsePtrOutput {
	return o
}

func (o MongoDbShardKeyInfoResponsePtrOutput) ToMongoDbShardKeyInfoResponsePtrOutputWithContext(ctx context.Context) MongoDbShardKeyInfoResponsePtrOutput {
	return o
}

func (o MongoDbShardKeyInfoResponsePtrOutput) Elem() MongoDbShardKeyInfoResponseOutput {
	return o.ApplyT(func(v *MongoDbShardKeyInfoResponse) MongoDbShardKeyInfoResponse { return *v }).(MongoDbShardKeyInfoResponseOutput)
}

// The fields within the shard key
func (o MongoDbShardKeyInfoResponsePtrOutput) Fields() MongoDbShardKeyFieldResponseArrayOutput {
	return o.ApplyT(func(v *MongoDbShardKeyInfoResponse) []MongoDbShardKeyFieldResponse {
		if v == nil {
			return nil
		}
		return v.Fields
	}).(MongoDbShardKeyFieldResponseArrayOutput)
}

// Whether the shard key is unique
func (o MongoDbShardKeyInfoResponsePtrOutput) IsUnique() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *MongoDbShardKeyInfoResponse) *bool {
		if v == nil {
			return nil
		}
		return &v.IsUnique
	}).(pulumi.BoolPtrOutput)
}

// Describes a MongoDB shard key
type MongoDbShardKeySetting struct {
	// The fields within the shard key
	Fields []MongoDbShardKeyField `pulumi:"fields"`
	// Whether the shard key is unique
	IsUnique bool `pulumi:"isUnique"`
}

// MongoDbShardKeySettingInput is an input type that accepts MongoDbShardKeySettingArgs and MongoDbShardKeySettingOutput values.
// You can construct a concrete instance of `MongoDbShardKeySettingInput` via:
//
//          MongoDbShardKeySettingArgs{...}
type MongoDbShardKeySettingInput interface {
	pulumi.Input

	ToMongoDbShardKeySettingOutput() MongoDbShardKeySettingOutput
	ToMongoDbShardKeySettingOutputWithContext(context.Context) MongoDbShardKeySettingOutput
}

// Describes a MongoDB shard key
type MongoDbShardKeySettingArgs struct {
	// The fields within the shard key
	Fields MongoDbShardKeyFieldArrayInput `pulumi:"fields"`
	// Whether the shard key is unique
	IsUnique pulumi.BoolInput `pulumi:"isUnique"`
}

func (MongoDbShardKeySettingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MongoDbShardKeySetting)(nil)).Elem()
}

func (i MongoDbShardKeySettingArgs) ToMongoDbShardKeySettingOutput() MongoDbShardKeySettingOutput {
	return i.ToMongoDbShardKeySettingOutputWithContext(context.Background())
}

func (i MongoDbShardKeySettingArgs) ToMongoDbShardKeySettingOutputWithContext(ctx context.Context) MongoDbShardKeySettingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MongoDbShardKeySettingOutput)
}

func (i MongoDbShardKeySettingArgs) ToMongoDbShardKeySettingPtrOutput() MongoDbShardKeySettingPtrOutput {
	return i.ToMongoDbShardKeySettingPtrOutputWithContext(context.Background())
}

func (i MongoDbShardKeySettingArgs) ToMongoDbShardKeySettingPtrOutputWithContext(ctx context.Context) MongoDbShardKeySettingPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MongoDbShardKeySettingOutput).ToMongoDbShardKeySettingPtrOutputWithContext(ctx)
}

// MongoDbShardKeySettingPtrInput is an input type that accepts MongoDbShardKeySettingArgs, MongoDbShardKeySettingPtr and MongoDbShardKeySettingPtrOutput values.
// You can construct a concrete instance of `MongoDbShardKeySettingPtrInput` via:
//
//          MongoDbShardKeySettingArgs{...}
//
//  or:
//
//          nil
type MongoDbShardKeySettingPtrInput interface {
	pulumi.Input

	ToMongoDbShardKeySettingPtrOutput() MongoDbShardKeySettingPtrOutput
	ToMongoDbShardKeySettingPtrOutputWithContext(context.Context) MongoDbShardKeySettingPtrOutput
}

type mongoDbShardKeySettingPtrType MongoDbShardKeySettingArgs

func MongoDbShardKeySettingPtr(v *MongoDbShardKeySettingArgs) MongoDbShardKeySettingPtrInput {
	return (*mongoDbShardKeySettingPtrType)(v)
}

func (*mongoDbShardKeySettingPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**MongoDbShardKeySetting)(nil)).Elem()
}

func (i *mongoDbShardKeySettingPtrType) ToMongoDbShardKeySettingPtrOutput() MongoDbShardKeySettingPtrOutput {
	return i.ToMongoDbShardKeySettingPtrOutputWithContext(context.Background())
}

func (i *mongoDbShardKeySettingPtrType) ToMongoDbShardKeySettingPtrOutputWithContext(ctx context.Context) MongoDbShardKeySettingPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MongoDbShardKeySettingPtrOutput)
}

// Describes a MongoDB shard key
type MongoDbShardKeySettingResponse struct {
	// The fields within the shard key
	Fields []MongoDbShardKeyFieldResponse `pulumi:"fields"`
	// Whether the shard key is unique
	IsUnique bool `pulumi:"isUnique"`
}

// Describes a MongoDB shard key
type MongoDbShardKeySettingResponseOutput struct{ *pulumi.OutputState }

func (MongoDbShardKeySettingResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MongoDbShardKeySettingResponse)(nil)).Elem()
}

func (o MongoDbShardKeySettingResponseOutput) ToMongoDbShardKeySettingResponseOutput() MongoDbShardKeySettingResponseOutput {
	return o
}

func (o MongoDbShardKeySettingResponseOutput) ToMongoDbShardKeySettingResponseOutputWithContext(ctx context.Context) MongoDbShardKeySettingResponseOutput {
	return o
}

func (o MongoDbShardKeySettingResponseOutput) ToMongoDbShardKeySettingResponsePtrOutput() MongoDbShardKeySettingResponsePtrOutput {
	return o.ToMongoDbShardKeySettingResponsePtrOutputWithContext(context.Background())
}

func (o MongoDbShardKeySettingResponseOutput) ToMongoDbShardKeySettingResponsePtrOutputWithContext(ctx context.Context) MongoDbShardKeySettingResponsePtrOutput {
	return o.ApplyT(func(v MongoDbShardKeySettingResponse) *MongoDbShardKeySettingResponse {
		return &v
	}).(MongoDbShardKeySettingResponsePtrOutput)
}

// The fields within the shard key
func (o MongoDbShardKeySettingResponseOutput) Fields() MongoDbShardKeyFieldResponseArrayOutput {
	return o.ApplyT(func(v MongoDbShardKeySettingResponse) []MongoDbShardKeyFieldResponse { return v.Fields }).(MongoDbShardKeyFieldResponseArrayOutput)
}

// Whether the shard key is unique
func (o MongoDbShardKeySettingResponseOutput) IsUnique() pulumi.BoolOutput {
	return o.ApplyT(func(v MongoDbShardKeySettingResponse) bool { return v.IsUnique }).(pulumi.BoolOutput)
}

type MongoDbShardKeySettingResponsePtrOutput struct{ *pulumi.OutputState }

func (MongoDbShardKeySettingResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MongoDbShardKeySettingResponse)(nil)).Elem()
}

func (o MongoDbShardKeySettingResponsePtrOutput) ToMongoDbShardKeySettingResponsePtrOutput() MongoDbShardKeySettingResponsePtrOutput {
	return o
}

func (o MongoDbShardKeySettingResponsePtrOutput) ToMongoDbShardKeySettingResponsePtrOutputWithContext(ctx context.Context) MongoDbShardKeySettingResponsePtrOutput {
	return o
}

func (o MongoDbShardKeySettingResponsePtrOutput) Elem() MongoDbShardKeySettingResponseOutput {
	return o.ApplyT(func(v *MongoDbShardKeySettingResponse) MongoDbShardKeySettingResponse { return *v }).(MongoDbShardKeySettingResponseOutput)
}

// The fields within the shard key
func (o MongoDbShardKeySettingResponsePtrOutput) Fields() MongoDbShardKeyFieldResponseArrayOutput {
	return o.ApplyT(func(v *MongoDbShardKeySettingResponse) []MongoDbShardKeyFieldResponse {
		if v == nil {
			return nil
		}
		return v.Fields
	}).(MongoDbShardKeyFieldResponseArrayOutput)
}

// Whether the shard key is unique
func (o MongoDbShardKeySettingResponsePtrOutput) IsUnique() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *MongoDbShardKeySettingResponse) *bool {
		if v == nil {
			return nil
		}
		return &v.IsUnique
	}).(pulumi.BoolPtrOutput)
}

// Specifies resource limits for the migration
type MongoDbThrottlingSettings struct {
	// The maximum number of work items (e.g. collection copies) that will be processed in parallel
	MaxParallelism *int `pulumi:"maxParallelism"`
	// The percentage of CPU time that the migrator will try to avoid using, from 0 to 100
	MinFreeCpu *int `pulumi:"minFreeCpu"`
	// The number of megabytes of RAM that the migrator will try to avoid using
	MinFreeMemoryMb *int `pulumi:"minFreeMemoryMb"`
}

// MongoDbThrottlingSettingsInput is an input type that accepts MongoDbThrottlingSettingsArgs and MongoDbThrottlingSettingsOutput values.
// You can construct a concrete instance of `MongoDbThrottlingSettingsInput` via:
//
//          MongoDbThrottlingSettingsArgs{...}
type MongoDbThrottlingSettingsInput interface {
	pulumi.Input

	ToMongoDbThrottlingSettingsOutput() MongoDbThrottlingSettingsOutput
	ToMongoDbThrottlingSettingsOutputWithContext(context.Context) MongoDbThrottlingSettingsOutput
}

// Specifies resource limits for the migration
type MongoDbThrottlingSettingsArgs struct {
	// The maximum number of work items (e.g. collection copies) that will be processed in parallel
	MaxParallelism pulumi.IntPtrInput `pulumi:"maxParallelism"`
	// The percentage of CPU time that the migrator will try to avoid using, from 0 to 100
	MinFreeCpu pulumi.IntPtrInput `pulumi:"minFreeCpu"`
	// The number of megabytes of RAM that the migrator will try to avoid using
	MinFreeMemoryMb pulumi.IntPtrInput `pulumi:"minFreeMemoryMb"`
}

func (MongoDbThrottlingSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MongoDbThrottlingSettings)(nil)).Elem()
}

func (i MongoDbThrottlingSettingsArgs) ToMongoDbThrottlingSettingsOutput() MongoDbThrottlingSettingsOutput {
	return i.ToMongoDbThrottlingSettingsOutputWithContext(context.Background())
}

func (i MongoDbThrottlingSettingsArgs) ToMongoDbThrottlingSettingsOutputWithContext(ctx context.Context) MongoDbThrottlingSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MongoDbThrottlingSettingsOutput)
}

func (i MongoDbThrottlingSettingsArgs) ToMongoDbThrottlingSettingsPtrOutput() MongoDbThrottlingSettingsPtrOutput {
	return i.ToMongoDbThrottlingSettingsPtrOutputWithContext(context.Background())
}

func (i MongoDbThrottlingSettingsArgs) ToMongoDbThrottlingSettingsPtrOutputWithContext(ctx context.Context) MongoDbThrottlingSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MongoDbThrottlingSettingsOutput).ToMongoDbThrottlingSettingsPtrOutputWithContext(ctx)
}

// MongoDbThrottlingSettingsPtrInput is an input type that accepts MongoDbThrottlingSettingsArgs, MongoDbThrottlingSettingsPtr and MongoDbThrottlingSettingsPtrOutput values.
// You can construct a concrete instance of `MongoDbThrottlingSettingsPtrInput` via:
//
//          MongoDbThrottlingSettingsArgs{...}
//
//  or:
//
//          nil
type MongoDbThrottlingSettingsPtrInput interface {
	pulumi.Input

	ToMongoDbThrottlingSettingsPtrOutput() MongoDbThrottlingSettingsPtrOutput
	ToMongoDbThrottlingSettingsPtrOutputWithContext(context.Context) MongoDbThrottlingSettingsPtrOutput
}

type mongoDbThrottlingSettingsPtrType MongoDbThrottlingSettingsArgs

func MongoDbThrottlingSettingsPtr(v *MongoDbThrottlingSettingsArgs) MongoDbThrottlingSettingsPtrInput {
	return (*mongoDbThrottlingSettingsPtrType)(v)
}

func (*mongoDbThrottlingSettingsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**MongoDbThrottlingSettings)(nil)).Elem()
}

func (i *mongoDbThrottlingSettingsPtrType) ToMongoDbThrottlingSettingsPtrOutput() MongoDbThrottlingSettingsPtrOutput {
	return i.ToMongoDbThrottlingSettingsPtrOutputWithContext(context.Background())
}

func (i *mongoDbThrottlingSettingsPtrType) ToMongoDbThrottlingSettingsPtrOutputWithContext(ctx context.Context) MongoDbThrottlingSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MongoDbThrottlingSettingsPtrOutput)
}

// Specifies resource limits for the migration
type MongoDbThrottlingSettingsResponse struct {
	// The maximum number of work items (e.g. collection copies) that will be processed in parallel
	MaxParallelism *int `pulumi:"maxParallelism"`
	// The percentage of CPU time that the migrator will try to avoid using, from 0 to 100
	MinFreeCpu *int `pulumi:"minFreeCpu"`
	// The number of megabytes of RAM that the migrator will try to avoid using
	MinFreeMemoryMb *int `pulumi:"minFreeMemoryMb"`
}

// Specifies resource limits for the migration
type MongoDbThrottlingSettingsResponseOutput struct{ *pulumi.OutputState }

func (MongoDbThrottlingSettingsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MongoDbThrottlingSettingsResponse)(nil)).Elem()
}

func (o MongoDbThrottlingSettingsResponseOutput) ToMongoDbThrottlingSettingsResponseOutput() MongoDbThrottlingSettingsResponseOutput {
	return o
}

func (o MongoDbThrottlingSettingsResponseOutput) ToMongoDbThrottlingSettingsResponseOutputWithContext(ctx context.Context) MongoDbThrottlingSettingsResponseOutput {
	return o
}

func (o MongoDbThrottlingSettingsResponseOutput) ToMongoDbThrottlingSettingsResponsePtrOutput() MongoDbThrottlingSettingsResponsePtrOutput {
	return o.ToMongoDbThrottlingSettingsResponsePtrOutputWithContext(context.Background())
}

func (o MongoDbThrottlingSettingsResponseOutput) ToMongoDbThrottlingSettingsResponsePtrOutputWithContext(ctx context.Context) MongoDbThrottlingSettingsResponsePtrOutput {
	return o.ApplyT(func(v MongoDbThrottlingSettingsResponse) *MongoDbThrottlingSettingsResponse {
		return &v
	}).(MongoDbThrottlingSettingsResponsePtrOutput)
}

// The maximum number of work items (e.g. collection copies) that will be processed in parallel
func (o MongoDbThrottlingSettingsResponseOutput) MaxParallelism() pulumi.IntPtrOutput {
	return o.ApplyT(func(v MongoDbThrottlingSettingsResponse) *int { return v.MaxParallelism }).(pulumi.IntPtrOutput)
}

// The percentage of CPU time that the migrator will try to avoid using, from 0 to 100
func (o MongoDbThrottlingSettingsResponseOutput) MinFreeCpu() pulumi.IntPtrOutput {
	return o.ApplyT(func(v MongoDbThrottlingSettingsResponse) *int { return v.MinFreeCpu }).(pulumi.IntPtrOutput)
}

// The number of megabytes of RAM that the migrator will try to avoid using
func (o MongoDbThrottlingSettingsResponseOutput) MinFreeMemoryMb() pulumi.IntPtrOutput {
	return o.ApplyT(func(v MongoDbThrottlingSettingsResponse) *int { return v.MinFreeMemoryMb }).(pulumi.IntPtrOutput)
}

type MongoDbThrottlingSettingsResponsePtrOutput struct{ *pulumi.OutputState }

func (MongoDbThrottlingSettingsResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MongoDbThrottlingSettingsResponse)(nil)).Elem()
}

func (o MongoDbThrottlingSettingsResponsePtrOutput) ToMongoDbThrottlingSettingsResponsePtrOutput() MongoDbThrottlingSettingsResponsePtrOutput {
	return o
}

func (o MongoDbThrottlingSettingsResponsePtrOutput) ToMongoDbThrottlingSettingsResponsePtrOutputWithContext(ctx context.Context) MongoDbThrottlingSettingsResponsePtrOutput {
	return o
}

func (o MongoDbThrottlingSettingsResponsePtrOutput) Elem() MongoDbThrottlingSettingsResponseOutput {
	return o.ApplyT(func(v *MongoDbThrottlingSettingsResponse) MongoDbThrottlingSettingsResponse { return *v }).(MongoDbThrottlingSettingsResponseOutput)
}

// The maximum number of work items (e.g. collection copies) that will be processed in parallel
func (o MongoDbThrottlingSettingsResponsePtrOutput) MaxParallelism() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *MongoDbThrottlingSettingsResponse) *int {
		if v == nil {
			return nil
		}
		return v.MaxParallelism
	}).(pulumi.IntPtrOutput)
}

// The percentage of CPU time that the migrator will try to avoid using, from 0 to 100
func (o MongoDbThrottlingSettingsResponsePtrOutput) MinFreeCpu() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *MongoDbThrottlingSettingsResponse) *int {
		if v == nil {
			return nil
		}
		return v.MinFreeCpu
	}).(pulumi.IntPtrOutput)
}

// The number of megabytes of RAM that the migrator will try to avoid using
func (o MongoDbThrottlingSettingsResponsePtrOutput) MinFreeMemoryMb() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *MongoDbThrottlingSettingsResponse) *int {
		if v == nil {
			return nil
		}
		return v.MinFreeMemoryMb
	}).(pulumi.IntPtrOutput)
}

// Information for connecting to MySQL server
type MySqlConnectionInfo struct {
	// Password credential.
	Password *string `pulumi:"password"`
	// Port for Server
	Port int `pulumi:"port"`
	// Name of the server
	ServerName string `pulumi:"serverName"`
	// Type of connection info
	Type string `pulumi:"type"`
	// User name
	UserName *string `pulumi:"userName"`
}

// MySqlConnectionInfoInput is an input type that accepts MySqlConnectionInfoArgs and MySqlConnectionInfoOutput values.
// You can construct a concrete instance of `MySqlConnectionInfoInput` via:
//
//          MySqlConnectionInfoArgs{...}
type MySqlConnectionInfoInput interface {
	pulumi.Input

	ToMySqlConnectionInfoOutput() MySqlConnectionInfoOutput
	ToMySqlConnectionInfoOutputWithContext(context.Context) MySqlConnectionInfoOutput
}

// Information for connecting to MySQL server
type MySqlConnectionInfoArgs struct {
	// Password credential.
	Password pulumi.StringPtrInput `pulumi:"password"`
	// Port for Server
	Port pulumi.IntInput `pulumi:"port"`
	// Name of the server
	ServerName pulumi.StringInput `pulumi:"serverName"`
	// Type of connection info
	Type pulumi.StringInput `pulumi:"type"`
	// User name
	UserName pulumi.StringPtrInput `pulumi:"userName"`
}

func (MySqlConnectionInfoArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MySqlConnectionInfo)(nil)).Elem()
}

func (i MySqlConnectionInfoArgs) ToMySqlConnectionInfoOutput() MySqlConnectionInfoOutput {
	return i.ToMySqlConnectionInfoOutputWithContext(context.Background())
}

func (i MySqlConnectionInfoArgs) ToMySqlConnectionInfoOutputWithContext(ctx context.Context) MySqlConnectionInfoOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MySqlConnectionInfoOutput)
}

func (i MySqlConnectionInfoArgs) ToMySqlConnectionInfoPtrOutput() MySqlConnectionInfoPtrOutput {
	return i.ToMySqlConnectionInfoPtrOutputWithContext(context.Background())
}

func (i MySqlConnectionInfoArgs) ToMySqlConnectionInfoPtrOutputWithContext(ctx context.Context) MySqlConnectionInfoPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MySqlConnectionInfoOutput).ToMySqlConnectionInfoPtrOutputWithContext(ctx)
}

// MySqlConnectionInfoPtrInput is an input type that accepts MySqlConnectionInfoArgs, MySqlConnectionInfoPtr and MySqlConnectionInfoPtrOutput values.
// You can construct a concrete instance of `MySqlConnectionInfoPtrInput` via:
//
//          MySqlConnectionInfoArgs{...}
//
//  or:
//
//          nil
type MySqlConnectionInfoPtrInput interface {
	pulumi.Input

	ToMySqlConnectionInfoPtrOutput() MySqlConnectionInfoPtrOutput
	ToMySqlConnectionInfoPtrOutputWithContext(context.Context) MySqlConnectionInfoPtrOutput
}

type mySqlConnectionInfoPtrType MySqlConnectionInfoArgs

func MySqlConnectionInfoPtr(v *MySqlConnectionInfoArgs) MySqlConnectionInfoPtrInput {
	return (*mySqlConnectionInfoPtrType)(v)
}

func (*mySqlConnectionInfoPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**MySqlConnectionInfo)(nil)).Elem()
}

func (i *mySqlConnectionInfoPtrType) ToMySqlConnectionInfoPtrOutput() MySqlConnectionInfoPtrOutput {
	return i.ToMySqlConnectionInfoPtrOutputWithContext(context.Background())
}

func (i *mySqlConnectionInfoPtrType) ToMySqlConnectionInfoPtrOutputWithContext(ctx context.Context) MySqlConnectionInfoPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MySqlConnectionInfoPtrOutput)
}

// Information for connecting to MySQL server
type MySqlConnectionInfoResponse struct {
	// Password credential.
	Password *string `pulumi:"password"`
	// Port for Server
	Port int `pulumi:"port"`
	// Name of the server
	ServerName string `pulumi:"serverName"`
	// Type of connection info
	Type string `pulumi:"type"`
	// User name
	UserName *string `pulumi:"userName"`
}

// Information for connecting to MySQL server
type MySqlConnectionInfoResponseOutput struct{ *pulumi.OutputState }

func (MySqlConnectionInfoResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MySqlConnectionInfoResponse)(nil)).Elem()
}

func (o MySqlConnectionInfoResponseOutput) ToMySqlConnectionInfoResponseOutput() MySqlConnectionInfoResponseOutput {
	return o
}

func (o MySqlConnectionInfoResponseOutput) ToMySqlConnectionInfoResponseOutputWithContext(ctx context.Context) MySqlConnectionInfoResponseOutput {
	return o
}

func (o MySqlConnectionInfoResponseOutput) ToMySqlConnectionInfoResponsePtrOutput() MySqlConnectionInfoResponsePtrOutput {
	return o.ToMySqlConnectionInfoResponsePtrOutputWithContext(context.Background())
}

func (o MySqlConnectionInfoResponseOutput) ToMySqlConnectionInfoResponsePtrOutputWithContext(ctx context.Context) MySqlConnectionInfoResponsePtrOutput {
	return o.ApplyT(func(v MySqlConnectionInfoResponse) *MySqlConnectionInfoResponse {
		return &v
	}).(MySqlConnectionInfoResponsePtrOutput)
}

// Password credential.
func (o MySqlConnectionInfoResponseOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MySqlConnectionInfoResponse) *string { return v.Password }).(pulumi.StringPtrOutput)
}

// Port for Server
func (o MySqlConnectionInfoResponseOutput) Port() pulumi.IntOutput {
	return o.ApplyT(func(v MySqlConnectionInfoResponse) int { return v.Port }).(pulumi.IntOutput)
}

// Name of the server
func (o MySqlConnectionInfoResponseOutput) ServerName() pulumi.StringOutput {
	return o.ApplyT(func(v MySqlConnectionInfoResponse) string { return v.ServerName }).(pulumi.StringOutput)
}

// Type of connection info
func (o MySqlConnectionInfoResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v MySqlConnectionInfoResponse) string { return v.Type }).(pulumi.StringOutput)
}

// User name
func (o MySqlConnectionInfoResponseOutput) UserName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MySqlConnectionInfoResponse) *string { return v.UserName }).(pulumi.StringPtrOutput)
}

type MySqlConnectionInfoResponsePtrOutput struct{ *pulumi.OutputState }

func (MySqlConnectionInfoResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MySqlConnectionInfoResponse)(nil)).Elem()
}

func (o MySqlConnectionInfoResponsePtrOutput) ToMySqlConnectionInfoResponsePtrOutput() MySqlConnectionInfoResponsePtrOutput {
	return o
}

func (o MySqlConnectionInfoResponsePtrOutput) ToMySqlConnectionInfoResponsePtrOutputWithContext(ctx context.Context) MySqlConnectionInfoResponsePtrOutput {
	return o
}

func (o MySqlConnectionInfoResponsePtrOutput) Elem() MySqlConnectionInfoResponseOutput {
	return o.ApplyT(func(v *MySqlConnectionInfoResponse) MySqlConnectionInfoResponse { return *v }).(MySqlConnectionInfoResponseOutput)
}

// Password credential.
func (o MySqlConnectionInfoResponsePtrOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MySqlConnectionInfoResponse) *string {
		if v == nil {
			return nil
		}
		return v.Password
	}).(pulumi.StringPtrOutput)
}

// Port for Server
func (o MySqlConnectionInfoResponsePtrOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *MySqlConnectionInfoResponse) *int {
		if v == nil {
			return nil
		}
		return &v.Port
	}).(pulumi.IntPtrOutput)
}

// Name of the server
func (o MySqlConnectionInfoResponsePtrOutput) ServerName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MySqlConnectionInfoResponse) *string {
		if v == nil {
			return nil
		}
		return &v.ServerName
	}).(pulumi.StringPtrOutput)
}

// Type of connection info
func (o MySqlConnectionInfoResponsePtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MySqlConnectionInfoResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

// User name
func (o MySqlConnectionInfoResponsePtrOutput) UserName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MySqlConnectionInfoResponse) *string {
		if v == nil {
			return nil
		}
		return v.UserName
	}).(pulumi.StringPtrOutput)
}

// Error information in OData format.
type ODataErrorResponse struct {
	// The machine-readable description of the error, such as 'InvalidRequest' or 'InternalServerError'
	Code *string `pulumi:"code"`
	// Inner errors that caused this error
	Details []ODataErrorResponse `pulumi:"details"`
	// The human-readable description of the error
	Message *string `pulumi:"message"`
}

// Error information in OData format.
type ODataErrorResponseOutput struct{ *pulumi.OutputState }

func (ODataErrorResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ODataErrorResponse)(nil)).Elem()
}

func (o ODataErrorResponseOutput) ToODataErrorResponseOutput() ODataErrorResponseOutput {
	return o
}

func (o ODataErrorResponseOutput) ToODataErrorResponseOutputWithContext(ctx context.Context) ODataErrorResponseOutput {
	return o
}

// The machine-readable description of the error, such as 'InvalidRequest' or 'InternalServerError'
func (o ODataErrorResponseOutput) Code() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ODataErrorResponse) *string { return v.Code }).(pulumi.StringPtrOutput)
}

// Inner errors that caused this error
func (o ODataErrorResponseOutput) Details() ODataErrorResponseArrayOutput {
	return o.ApplyT(func(v ODataErrorResponse) []ODataErrorResponse { return v.Details }).(ODataErrorResponseArrayOutput)
}

// The human-readable description of the error
func (o ODataErrorResponseOutput) Message() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ODataErrorResponse) *string { return v.Message }).(pulumi.StringPtrOutput)
}

type ODataErrorResponseArrayOutput struct{ *pulumi.OutputState }

func (ODataErrorResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ODataErrorResponse)(nil)).Elem()
}

func (o ODataErrorResponseArrayOutput) ToODataErrorResponseArrayOutput() ODataErrorResponseArrayOutput {
	return o
}

func (o ODataErrorResponseArrayOutput) ToODataErrorResponseArrayOutputWithContext(ctx context.Context) ODataErrorResponseArrayOutput {
	return o
}

func (o ODataErrorResponseArrayOutput) Index(i pulumi.IntInput) ODataErrorResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ODataErrorResponse {
		return vs[0].([]ODataErrorResponse)[vs[1].(int)]
	}).(ODataErrorResponseOutput)
}

// Information for connecting to Oracle server
type OracleConnectionInfo struct {
	// EZConnect or TNSName connection string.
	DataSource string `pulumi:"dataSource"`
	// Password credential.
	Password *string `pulumi:"password"`
	// Type of connection info
	Type string `pulumi:"type"`
	// User name
	UserName *string `pulumi:"userName"`
}

// OracleConnectionInfoInput is an input type that accepts OracleConnectionInfoArgs and OracleConnectionInfoOutput values.
// You can construct a concrete instance of `OracleConnectionInfoInput` via:
//
//          OracleConnectionInfoArgs{...}
type OracleConnectionInfoInput interface {
	pulumi.Input

	ToOracleConnectionInfoOutput() OracleConnectionInfoOutput
	ToOracleConnectionInfoOutputWithContext(context.Context) OracleConnectionInfoOutput
}

// Information for connecting to Oracle server
type OracleConnectionInfoArgs struct {
	// EZConnect or TNSName connection string.
	DataSource pulumi.StringInput `pulumi:"dataSource"`
	// Password credential.
	Password pulumi.StringPtrInput `pulumi:"password"`
	// Type of connection info
	Type pulumi.StringInput `pulumi:"type"`
	// User name
	UserName pulumi.StringPtrInput `pulumi:"userName"`
}

func (OracleConnectionInfoArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OracleConnectionInfo)(nil)).Elem()
}

func (i OracleConnectionInfoArgs) ToOracleConnectionInfoOutput() OracleConnectionInfoOutput {
	return i.ToOracleConnectionInfoOutputWithContext(context.Background())
}

func (i OracleConnectionInfoArgs) ToOracleConnectionInfoOutputWithContext(ctx context.Context) OracleConnectionInfoOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OracleConnectionInfoOutput)
}

func (i OracleConnectionInfoArgs) ToOracleConnectionInfoPtrOutput() OracleConnectionInfoPtrOutput {
	return i.ToOracleConnectionInfoPtrOutputWithContext(context.Background())
}

func (i OracleConnectionInfoArgs) ToOracleConnectionInfoPtrOutputWithContext(ctx context.Context) OracleConnectionInfoPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OracleConnectionInfoOutput).ToOracleConnectionInfoPtrOutputWithContext(ctx)
}

// OracleConnectionInfoPtrInput is an input type that accepts OracleConnectionInfoArgs, OracleConnectionInfoPtr and OracleConnectionInfoPtrOutput values.
// You can construct a concrete instance of `OracleConnectionInfoPtrInput` via:
//
//          OracleConnectionInfoArgs{...}
//
//  or:
//
//          nil
type OracleConnectionInfoPtrInput interface {
	pulumi.Input

	ToOracleConnectionInfoPtrOutput() OracleConnectionInfoPtrOutput
	ToOracleConnectionInfoPtrOutputWithContext(context.Context) OracleConnectionInfoPtrOutput
}

type oracleConnectionInfoPtrType OracleConnectionInfoArgs

func OracleConnectionInfoPtr(v *OracleConnectionInfoArgs) OracleConnectionInfoPtrInput {
	return (*oracleConnectionInfoPtrType)(v)
}

func (*oracleConnectionInfoPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**OracleConnectionInfo)(nil)).Elem()
}

func (i *oracleConnectionInfoPtrType) ToOracleConnectionInfoPtrOutput() OracleConnectionInfoPtrOutput {
	return i.ToOracleConnectionInfoPtrOutputWithContext(context.Background())
}

func (i *oracleConnectionInfoPtrType) ToOracleConnectionInfoPtrOutputWithContext(ctx context.Context) OracleConnectionInfoPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OracleConnectionInfoPtrOutput)
}

// Information for connecting to Oracle server
type OracleConnectionInfoResponse struct {
	// EZConnect or TNSName connection string.
	DataSource string `pulumi:"dataSource"`
	// Password credential.
	Password *string `pulumi:"password"`
	// Type of connection info
	Type string `pulumi:"type"`
	// User name
	UserName *string `pulumi:"userName"`
}

// Information for connecting to Oracle server
type OracleConnectionInfoResponseOutput struct{ *pulumi.OutputState }

func (OracleConnectionInfoResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OracleConnectionInfoResponse)(nil)).Elem()
}

func (o OracleConnectionInfoResponseOutput) ToOracleConnectionInfoResponseOutput() OracleConnectionInfoResponseOutput {
	return o
}

func (o OracleConnectionInfoResponseOutput) ToOracleConnectionInfoResponseOutputWithContext(ctx context.Context) OracleConnectionInfoResponseOutput {
	return o
}

func (o OracleConnectionInfoResponseOutput) ToOracleConnectionInfoResponsePtrOutput() OracleConnectionInfoResponsePtrOutput {
	return o.ToOracleConnectionInfoResponsePtrOutputWithContext(context.Background())
}

func (o OracleConnectionInfoResponseOutput) ToOracleConnectionInfoResponsePtrOutputWithContext(ctx context.Context) OracleConnectionInfoResponsePtrOutput {
	return o.ApplyT(func(v OracleConnectionInfoResponse) *OracleConnectionInfoResponse {
		return &v
	}).(OracleConnectionInfoResponsePtrOutput)
}

// EZConnect or TNSName connection string.
func (o OracleConnectionInfoResponseOutput) DataSource() pulumi.StringOutput {
	return o.ApplyT(func(v OracleConnectionInfoResponse) string { return v.DataSource }).(pulumi.StringOutput)
}

// Password credential.
func (o OracleConnectionInfoResponseOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OracleConnectionInfoResponse) *string { return v.Password }).(pulumi.StringPtrOutput)
}

// Type of connection info
func (o OracleConnectionInfoResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v OracleConnectionInfoResponse) string { return v.Type }).(pulumi.StringOutput)
}

// User name
func (o OracleConnectionInfoResponseOutput) UserName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OracleConnectionInfoResponse) *string { return v.UserName }).(pulumi.StringPtrOutput)
}

type OracleConnectionInfoResponsePtrOutput struct{ *pulumi.OutputState }

func (OracleConnectionInfoResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**OracleConnectionInfoResponse)(nil)).Elem()
}

func (o OracleConnectionInfoResponsePtrOutput) ToOracleConnectionInfoResponsePtrOutput() OracleConnectionInfoResponsePtrOutput {
	return o
}

func (o OracleConnectionInfoResponsePtrOutput) ToOracleConnectionInfoResponsePtrOutputWithContext(ctx context.Context) OracleConnectionInfoResponsePtrOutput {
	return o
}

func (o OracleConnectionInfoResponsePtrOutput) Elem() OracleConnectionInfoResponseOutput {
	return o.ApplyT(func(v *OracleConnectionInfoResponse) OracleConnectionInfoResponse { return *v }).(OracleConnectionInfoResponseOutput)
}

// EZConnect or TNSName connection string.
func (o OracleConnectionInfoResponsePtrOutput) DataSource() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OracleConnectionInfoResponse) *string {
		if v == nil {
			return nil
		}
		return &v.DataSource
	}).(pulumi.StringPtrOutput)
}

// Password credential.
func (o OracleConnectionInfoResponsePtrOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OracleConnectionInfoResponse) *string {
		if v == nil {
			return nil
		}
		return v.Password
	}).(pulumi.StringPtrOutput)
}

// Type of connection info
func (o OracleConnectionInfoResponsePtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OracleConnectionInfoResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

// User name
func (o OracleConnectionInfoResponsePtrOutput) UserName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OracleConnectionInfoResponse) *string {
		if v == nil {
			return nil
		}
		return v.UserName
	}).(pulumi.StringPtrOutput)
}

// Information of orphaned users on the SQL server database.
type OrphanedUserInfoResponse struct {
	// Parent database of the user
	DatabaseName *string `pulumi:"databaseName"`
	// Name of the orphaned user
	Name *string `pulumi:"name"`
}

// Information of orphaned users on the SQL server database.
type OrphanedUserInfoResponseOutput struct{ *pulumi.OutputState }

func (OrphanedUserInfoResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OrphanedUserInfoResponse)(nil)).Elem()
}

func (o OrphanedUserInfoResponseOutput) ToOrphanedUserInfoResponseOutput() OrphanedUserInfoResponseOutput {
	return o
}

func (o OrphanedUserInfoResponseOutput) ToOrphanedUserInfoResponseOutputWithContext(ctx context.Context) OrphanedUserInfoResponseOutput {
	return o
}

// Parent database of the user
func (o OrphanedUserInfoResponseOutput) DatabaseName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OrphanedUserInfoResponse) *string { return v.DatabaseName }).(pulumi.StringPtrOutput)
}

// Name of the orphaned user
func (o OrphanedUserInfoResponseOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OrphanedUserInfoResponse) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type OrphanedUserInfoResponseArrayOutput struct{ *pulumi.OutputState }

func (OrphanedUserInfoResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]OrphanedUserInfoResponse)(nil)).Elem()
}

func (o OrphanedUserInfoResponseArrayOutput) ToOrphanedUserInfoResponseArrayOutput() OrphanedUserInfoResponseArrayOutput {
	return o
}

func (o OrphanedUserInfoResponseArrayOutput) ToOrphanedUserInfoResponseArrayOutputWithContext(ctx context.Context) OrphanedUserInfoResponseArrayOutput {
	return o
}

func (o OrphanedUserInfoResponseArrayOutput) Index(i pulumi.IntInput) OrphanedUserInfoResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) OrphanedUserInfoResponse {
		return vs[0].([]OrphanedUserInfoResponse)[vs[1].(int)]
	}).(OrphanedUserInfoResponseOutput)
}

// Information for connecting to PostgreSQL server
type PostgreSqlConnectionInfo struct {
	// Name of the database
	DatabaseName *string `pulumi:"databaseName"`
	// Whether to encrypt the connection
	EncryptConnection *bool `pulumi:"encryptConnection"`
	// Password credential.
	Password *string `pulumi:"password"`
	// Port for Server
	Port int `pulumi:"port"`
	// Name of the server
	ServerName string `pulumi:"serverName"`
	// Whether to trust the server certificate
	TrustServerCertificate *bool `pulumi:"trustServerCertificate"`
	// Type of connection info
	Type string `pulumi:"type"`
	// User name
	UserName *string `pulumi:"userName"`
}

// PostgreSqlConnectionInfoInput is an input type that accepts PostgreSqlConnectionInfoArgs and PostgreSqlConnectionInfoOutput values.
// You can construct a concrete instance of `PostgreSqlConnectionInfoInput` via:
//
//          PostgreSqlConnectionInfoArgs{...}
type PostgreSqlConnectionInfoInput interface {
	pulumi.Input

	ToPostgreSqlConnectionInfoOutput() PostgreSqlConnectionInfoOutput
	ToPostgreSqlConnectionInfoOutputWithContext(context.Context) PostgreSqlConnectionInfoOutput
}

// Information for connecting to PostgreSQL server
type PostgreSqlConnectionInfoArgs struct {
	// Name of the database
	DatabaseName pulumi.StringPtrInput `pulumi:"databaseName"`
	// Whether to encrypt the connection
	EncryptConnection pulumi.BoolPtrInput `pulumi:"encryptConnection"`
	// Password credential.
	Password pulumi.StringPtrInput `pulumi:"password"`
	// Port for Server
	Port pulumi.IntInput `pulumi:"port"`
	// Name of the server
	ServerName pulumi.StringInput `pulumi:"serverName"`
	// Whether to trust the server certificate
	TrustServerCertificate pulumi.BoolPtrInput `pulumi:"trustServerCertificate"`
	// Type of connection info
	Type pulumi.StringInput `pulumi:"type"`
	// User name
	UserName pulumi.StringPtrInput `pulumi:"userName"`
}

func (PostgreSqlConnectionInfoArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PostgreSqlConnectionInfo)(nil)).Elem()
}

func (i PostgreSqlConnectionInfoArgs) ToPostgreSqlConnectionInfoOutput() PostgreSqlConnectionInfoOutput {
	return i.ToPostgreSqlConnectionInfoOutputWithContext(context.Background())
}

func (i PostgreSqlConnectionInfoArgs) ToPostgreSqlConnectionInfoOutputWithContext(ctx context.Context) PostgreSqlConnectionInfoOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostgreSqlConnectionInfoOutput)
}

func (i PostgreSqlConnectionInfoArgs) ToPostgreSqlConnectionInfoPtrOutput() PostgreSqlConnectionInfoPtrOutput {
	return i.ToPostgreSqlConnectionInfoPtrOutputWithContext(context.Background())
}

func (i PostgreSqlConnectionInfoArgs) ToPostgreSqlConnectionInfoPtrOutputWithContext(ctx context.Context) PostgreSqlConnectionInfoPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostgreSqlConnectionInfoOutput).ToPostgreSqlConnectionInfoPtrOutputWithContext(ctx)
}

// PostgreSqlConnectionInfoPtrInput is an input type that accepts PostgreSqlConnectionInfoArgs, PostgreSqlConnectionInfoPtr and PostgreSqlConnectionInfoPtrOutput values.
// You can construct a concrete instance of `PostgreSqlConnectionInfoPtrInput` via:
//
//          PostgreSqlConnectionInfoArgs{...}
//
//  or:
//
//          nil
type PostgreSqlConnectionInfoPtrInput interface {
	pulumi.Input

	ToPostgreSqlConnectionInfoPtrOutput() PostgreSqlConnectionInfoPtrOutput
	ToPostgreSqlConnectionInfoPtrOutputWithContext(context.Context) PostgreSqlConnectionInfoPtrOutput
}

type postgreSqlConnectionInfoPtrType PostgreSqlConnectionInfoArgs

func PostgreSqlConnectionInfoPtr(v *PostgreSqlConnectionInfoArgs) PostgreSqlConnectionInfoPtrInput {
	return (*postgreSqlConnectionInfoPtrType)(v)
}

func (*postgreSqlConnectionInfoPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PostgreSqlConnectionInfo)(nil)).Elem()
}

func (i *postgreSqlConnectionInfoPtrType) ToPostgreSqlConnectionInfoPtrOutput() PostgreSqlConnectionInfoPtrOutput {
	return i.ToPostgreSqlConnectionInfoPtrOutputWithContext(context.Background())
}

func (i *postgreSqlConnectionInfoPtrType) ToPostgreSqlConnectionInfoPtrOutputWithContext(ctx context.Context) PostgreSqlConnectionInfoPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostgreSqlConnectionInfoPtrOutput)
}

// Information for connecting to PostgreSQL server
type PostgreSqlConnectionInfoResponse struct {
	// Name of the database
	DatabaseName *string `pulumi:"databaseName"`
	// Whether to encrypt the connection
	EncryptConnection *bool `pulumi:"encryptConnection"`
	// Password credential.
	Password *string `pulumi:"password"`
	// Port for Server
	Port int `pulumi:"port"`
	// Name of the server
	ServerName string `pulumi:"serverName"`
	// Whether to trust the server certificate
	TrustServerCertificate *bool `pulumi:"trustServerCertificate"`
	// Type of connection info
	Type string `pulumi:"type"`
	// User name
	UserName *string `pulumi:"userName"`
}

// Information for connecting to PostgreSQL server
type PostgreSqlConnectionInfoResponseOutput struct{ *pulumi.OutputState }

func (PostgreSqlConnectionInfoResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PostgreSqlConnectionInfoResponse)(nil)).Elem()
}

func (o PostgreSqlConnectionInfoResponseOutput) ToPostgreSqlConnectionInfoResponseOutput() PostgreSqlConnectionInfoResponseOutput {
	return o
}

func (o PostgreSqlConnectionInfoResponseOutput) ToPostgreSqlConnectionInfoResponseOutputWithContext(ctx context.Context) PostgreSqlConnectionInfoResponseOutput {
	return o
}

func (o PostgreSqlConnectionInfoResponseOutput) ToPostgreSqlConnectionInfoResponsePtrOutput() PostgreSqlConnectionInfoResponsePtrOutput {
	return o.ToPostgreSqlConnectionInfoResponsePtrOutputWithContext(context.Background())
}

func (o PostgreSqlConnectionInfoResponseOutput) ToPostgreSqlConnectionInfoResponsePtrOutputWithContext(ctx context.Context) PostgreSqlConnectionInfoResponsePtrOutput {
	return o.ApplyT(func(v PostgreSqlConnectionInfoResponse) *PostgreSqlConnectionInfoResponse {
		return &v
	}).(PostgreSqlConnectionInfoResponsePtrOutput)
}

// Name of the database
func (o PostgreSqlConnectionInfoResponseOutput) DatabaseName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PostgreSqlConnectionInfoResponse) *string { return v.DatabaseName }).(pulumi.StringPtrOutput)
}

// Whether to encrypt the connection
func (o PostgreSqlConnectionInfoResponseOutput) EncryptConnection() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v PostgreSqlConnectionInfoResponse) *bool { return v.EncryptConnection }).(pulumi.BoolPtrOutput)
}

// Password credential.
func (o PostgreSqlConnectionInfoResponseOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PostgreSqlConnectionInfoResponse) *string { return v.Password }).(pulumi.StringPtrOutput)
}

// Port for Server
func (o PostgreSqlConnectionInfoResponseOutput) Port() pulumi.IntOutput {
	return o.ApplyT(func(v PostgreSqlConnectionInfoResponse) int { return v.Port }).(pulumi.IntOutput)
}

// Name of the server
func (o PostgreSqlConnectionInfoResponseOutput) ServerName() pulumi.StringOutput {
	return o.ApplyT(func(v PostgreSqlConnectionInfoResponse) string { return v.ServerName }).(pulumi.StringOutput)
}

// Whether to trust the server certificate
func (o PostgreSqlConnectionInfoResponseOutput) TrustServerCertificate() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v PostgreSqlConnectionInfoResponse) *bool { return v.TrustServerCertificate }).(pulumi.BoolPtrOutput)
}

// Type of connection info
func (o PostgreSqlConnectionInfoResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v PostgreSqlConnectionInfoResponse) string { return v.Type }).(pulumi.StringOutput)
}

// User name
func (o PostgreSqlConnectionInfoResponseOutput) UserName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PostgreSqlConnectionInfoResponse) *string { return v.UserName }).(pulumi.StringPtrOutput)
}

type PostgreSqlConnectionInfoResponsePtrOutput struct{ *pulumi.OutputState }

func (PostgreSqlConnectionInfoResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PostgreSqlConnectionInfoResponse)(nil)).Elem()
}

func (o PostgreSqlConnectionInfoResponsePtrOutput) ToPostgreSqlConnectionInfoResponsePtrOutput() PostgreSqlConnectionInfoResponsePtrOutput {
	return o
}

func (o PostgreSqlConnectionInfoResponsePtrOutput) ToPostgreSqlConnectionInfoResponsePtrOutputWithContext(ctx context.Context) PostgreSqlConnectionInfoResponsePtrOutput {
	return o
}

func (o PostgreSqlConnectionInfoResponsePtrOutput) Elem() PostgreSqlConnectionInfoResponseOutput {
	return o.ApplyT(func(v *PostgreSqlConnectionInfoResponse) PostgreSqlConnectionInfoResponse { return *v }).(PostgreSqlConnectionInfoResponseOutput)
}

// Name of the database
func (o PostgreSqlConnectionInfoResponsePtrOutput) DatabaseName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PostgreSqlConnectionInfoResponse) *string {
		if v == nil {
			return nil
		}
		return v.DatabaseName
	}).(pulumi.StringPtrOutput)
}

// Whether to encrypt the connection
func (o PostgreSqlConnectionInfoResponsePtrOutput) EncryptConnection() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *PostgreSqlConnectionInfoResponse) *bool {
		if v == nil {
			return nil
		}
		return v.EncryptConnection
	}).(pulumi.BoolPtrOutput)
}

// Password credential.
func (o PostgreSqlConnectionInfoResponsePtrOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PostgreSqlConnectionInfoResponse) *string {
		if v == nil {
			return nil
		}
		return v.Password
	}).(pulumi.StringPtrOutput)
}

// Port for Server
func (o PostgreSqlConnectionInfoResponsePtrOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *PostgreSqlConnectionInfoResponse) *int {
		if v == nil {
			return nil
		}
		return &v.Port
	}).(pulumi.IntPtrOutput)
}

// Name of the server
func (o PostgreSqlConnectionInfoResponsePtrOutput) ServerName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PostgreSqlConnectionInfoResponse) *string {
		if v == nil {
			return nil
		}
		return &v.ServerName
	}).(pulumi.StringPtrOutput)
}

// Whether to trust the server certificate
func (o PostgreSqlConnectionInfoResponsePtrOutput) TrustServerCertificate() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *PostgreSqlConnectionInfoResponse) *bool {
		if v == nil {
			return nil
		}
		return v.TrustServerCertificate
	}).(pulumi.BoolPtrOutput)
}

// Type of connection info
func (o PostgreSqlConnectionInfoResponsePtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PostgreSqlConnectionInfoResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

// User name
func (o PostgreSqlConnectionInfoResponsePtrOutput) UserName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PostgreSqlConnectionInfoResponse) *string {
		if v == nil {
			return nil
		}
		return v.UserName
	}).(pulumi.StringPtrOutput)
}

// Base class for file properties.
type ProjectFileProperties struct {
	// Optional File extension. If submitted it should not have a leading period and must match the extension from filePath.
	Extension *string `pulumi:"extension"`
	// Relative path of this file resource. This property can be set when creating or updating the file resource.
	FilePath *string `pulumi:"filePath"`
	// File content type. This property can be modified to reflect the file content type.
	MediaType *string `pulumi:"mediaType"`
}

// ProjectFilePropertiesInput is an input type that accepts ProjectFilePropertiesArgs and ProjectFilePropertiesOutput values.
// You can construct a concrete instance of `ProjectFilePropertiesInput` via:
//
//          ProjectFilePropertiesArgs{...}
type ProjectFilePropertiesInput interface {
	pulumi.Input

	ToProjectFilePropertiesOutput() ProjectFilePropertiesOutput
	ToProjectFilePropertiesOutputWithContext(context.Context) ProjectFilePropertiesOutput
}

// Base class for file properties.
type ProjectFilePropertiesArgs struct {
	// Optional File extension. If submitted it should not have a leading period and must match the extension from filePath.
	Extension pulumi.StringPtrInput `pulumi:"extension"`
	// Relative path of this file resource. This property can be set when creating or updating the file resource.
	FilePath pulumi.StringPtrInput `pulumi:"filePath"`
	// File content type. This property can be modified to reflect the file content type.
	MediaType pulumi.StringPtrInput `pulumi:"mediaType"`
}

func (ProjectFilePropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectFileProperties)(nil)).Elem()
}

func (i ProjectFilePropertiesArgs) ToProjectFilePropertiesOutput() ProjectFilePropertiesOutput {
	return i.ToProjectFilePropertiesOutputWithContext(context.Background())
}

func (i ProjectFilePropertiesArgs) ToProjectFilePropertiesOutputWithContext(ctx context.Context) ProjectFilePropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectFilePropertiesOutput)
}

func (i ProjectFilePropertiesArgs) ToProjectFilePropertiesPtrOutput() ProjectFilePropertiesPtrOutput {
	return i.ToProjectFilePropertiesPtrOutputWithContext(context.Background())
}

func (i ProjectFilePropertiesArgs) ToProjectFilePropertiesPtrOutputWithContext(ctx context.Context) ProjectFilePropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectFilePropertiesOutput).ToProjectFilePropertiesPtrOutputWithContext(ctx)
}

// ProjectFilePropertiesPtrInput is an input type that accepts ProjectFilePropertiesArgs, ProjectFilePropertiesPtr and ProjectFilePropertiesPtrOutput values.
// You can construct a concrete instance of `ProjectFilePropertiesPtrInput` via:
//
//          ProjectFilePropertiesArgs{...}
//
//  or:
//
//          nil
type ProjectFilePropertiesPtrInput interface {
	pulumi.Input

	ToProjectFilePropertiesPtrOutput() ProjectFilePropertiesPtrOutput
	ToProjectFilePropertiesPtrOutputWithContext(context.Context) ProjectFilePropertiesPtrOutput
}

type projectFilePropertiesPtrType ProjectFilePropertiesArgs

func ProjectFilePropertiesPtr(v *ProjectFilePropertiesArgs) ProjectFilePropertiesPtrInput {
	return (*projectFilePropertiesPtrType)(v)
}

func (*projectFilePropertiesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ProjectFileProperties)(nil)).Elem()
}

func (i *projectFilePropertiesPtrType) ToProjectFilePropertiesPtrOutput() ProjectFilePropertiesPtrOutput {
	return i.ToProjectFilePropertiesPtrOutputWithContext(context.Background())
}

func (i *projectFilePropertiesPtrType) ToProjectFilePropertiesPtrOutputWithContext(ctx context.Context) ProjectFilePropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectFilePropertiesPtrOutput)
}

// Base class for file properties.
type ProjectFilePropertiesResponse struct {
	// Optional File extension. If submitted it should not have a leading period and must match the extension from filePath.
	Extension *string `pulumi:"extension"`
	// Relative path of this file resource. This property can be set when creating or updating the file resource.
	FilePath *string `pulumi:"filePath"`
	// Modification DateTime.
	LastModified string `pulumi:"lastModified"`
	// File content type. This property can be modified to reflect the file content type.
	MediaType *string `pulumi:"mediaType"`
	// File size.
	Size int `pulumi:"size"`
}

// Base class for file properties.
type ProjectFilePropertiesResponseOutput struct{ *pulumi.OutputState }

func (ProjectFilePropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectFilePropertiesResponse)(nil)).Elem()
}

func (o ProjectFilePropertiesResponseOutput) ToProjectFilePropertiesResponseOutput() ProjectFilePropertiesResponseOutput {
	return o
}

func (o ProjectFilePropertiesResponseOutput) ToProjectFilePropertiesResponseOutputWithContext(ctx context.Context) ProjectFilePropertiesResponseOutput {
	return o
}

func (o ProjectFilePropertiesResponseOutput) ToProjectFilePropertiesResponsePtrOutput() ProjectFilePropertiesResponsePtrOutput {
	return o.ToProjectFilePropertiesResponsePtrOutputWithContext(context.Background())
}

func (o ProjectFilePropertiesResponseOutput) ToProjectFilePropertiesResponsePtrOutputWithContext(ctx context.Context) ProjectFilePropertiesResponsePtrOutput {
	return o.ApplyT(func(v ProjectFilePropertiesResponse) *ProjectFilePropertiesResponse {
		return &v
	}).(ProjectFilePropertiesResponsePtrOutput)
}

// Optional File extension. If submitted it should not have a leading period and must match the extension from filePath.
func (o ProjectFilePropertiesResponseOutput) Extension() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectFilePropertiesResponse) *string { return v.Extension }).(pulumi.StringPtrOutput)
}

// Relative path of this file resource. This property can be set when creating or updating the file resource.
func (o ProjectFilePropertiesResponseOutput) FilePath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectFilePropertiesResponse) *string { return v.FilePath }).(pulumi.StringPtrOutput)
}

// Modification DateTime.
func (o ProjectFilePropertiesResponseOutput) LastModified() pulumi.StringOutput {
	return o.ApplyT(func(v ProjectFilePropertiesResponse) string { return v.LastModified }).(pulumi.StringOutput)
}

// File content type. This property can be modified to reflect the file content type.
func (o ProjectFilePropertiesResponseOutput) MediaType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectFilePropertiesResponse) *string { return v.MediaType }).(pulumi.StringPtrOutput)
}

// File size.
func (o ProjectFilePropertiesResponseOutput) Size() pulumi.IntOutput {
	return o.ApplyT(func(v ProjectFilePropertiesResponse) int { return v.Size }).(pulumi.IntOutput)
}

type ProjectFilePropertiesResponsePtrOutput struct{ *pulumi.OutputState }

func (ProjectFilePropertiesResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ProjectFilePropertiesResponse)(nil)).Elem()
}

func (o ProjectFilePropertiesResponsePtrOutput) ToProjectFilePropertiesResponsePtrOutput() ProjectFilePropertiesResponsePtrOutput {
	return o
}

func (o ProjectFilePropertiesResponsePtrOutput) ToProjectFilePropertiesResponsePtrOutputWithContext(ctx context.Context) ProjectFilePropertiesResponsePtrOutput {
	return o
}

func (o ProjectFilePropertiesResponsePtrOutput) Elem() ProjectFilePropertiesResponseOutput {
	return o.ApplyT(func(v *ProjectFilePropertiesResponse) ProjectFilePropertiesResponse { return *v }).(ProjectFilePropertiesResponseOutput)
}

// Optional File extension. If submitted it should not have a leading period and must match the extension from filePath.
func (o ProjectFilePropertiesResponsePtrOutput) Extension() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProjectFilePropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return v.Extension
	}).(pulumi.StringPtrOutput)
}

// Relative path of this file resource. This property can be set when creating or updating the file resource.
func (o ProjectFilePropertiesResponsePtrOutput) FilePath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProjectFilePropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return v.FilePath
	}).(pulumi.StringPtrOutput)
}

// Modification DateTime.
func (o ProjectFilePropertiesResponsePtrOutput) LastModified() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProjectFilePropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return &v.LastModified
	}).(pulumi.StringPtrOutput)
}

// File content type. This property can be modified to reflect the file content type.
func (o ProjectFilePropertiesResponsePtrOutput) MediaType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProjectFilePropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return v.MediaType
	}).(pulumi.StringPtrOutput)
}

// File size.
func (o ProjectFilePropertiesResponsePtrOutput) Size() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ProjectFilePropertiesResponse) *int {
		if v == nil {
			return nil
		}
		return &v.Size
	}).(pulumi.IntPtrOutput)
}

// Exception object for all custom exceptions
type ReportableExceptionResponse struct {
	// Actionable steps for this exception
	ActionableMessage *string `pulumi:"actionableMessage"`
	// The path to the file where exception occurred
	FilePath *string `pulumi:"filePath"`
	// Coded numerical value that is assigned to a specific exception
	HResult *int `pulumi:"hResult"`
	// The line number where exception occurred
	LineNumber *string `pulumi:"lineNumber"`
	// Error message
	Message *string `pulumi:"message"`
	// Stack trace
	StackTrace *string `pulumi:"stackTrace"`
}

// Exception object for all custom exceptions
type ReportableExceptionResponseOutput struct{ *pulumi.OutputState }

func (ReportableExceptionResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ReportableExceptionResponse)(nil)).Elem()
}

func (o ReportableExceptionResponseOutput) ToReportableExceptionResponseOutput() ReportableExceptionResponseOutput {
	return o
}

func (o ReportableExceptionResponseOutput) ToReportableExceptionResponseOutputWithContext(ctx context.Context) ReportableExceptionResponseOutput {
	return o
}

// Actionable steps for this exception
func (o ReportableExceptionResponseOutput) ActionableMessage() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ReportableExceptionResponse) *string { return v.ActionableMessage }).(pulumi.StringPtrOutput)
}

// The path to the file where exception occurred
func (o ReportableExceptionResponseOutput) FilePath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ReportableExceptionResponse) *string { return v.FilePath }).(pulumi.StringPtrOutput)
}

// Coded numerical value that is assigned to a specific exception
func (o ReportableExceptionResponseOutput) HResult() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ReportableExceptionResponse) *int { return v.HResult }).(pulumi.IntPtrOutput)
}

// The line number where exception occurred
func (o ReportableExceptionResponseOutput) LineNumber() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ReportableExceptionResponse) *string { return v.LineNumber }).(pulumi.StringPtrOutput)
}

// Error message
func (o ReportableExceptionResponseOutput) Message() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ReportableExceptionResponse) *string { return v.Message }).(pulumi.StringPtrOutput)
}

// Stack trace
func (o ReportableExceptionResponseOutput) StackTrace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ReportableExceptionResponse) *string { return v.StackTrace }).(pulumi.StringPtrOutput)
}

type ReportableExceptionResponseArrayOutput struct{ *pulumi.OutputState }

func (ReportableExceptionResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ReportableExceptionResponse)(nil)).Elem()
}

func (o ReportableExceptionResponseArrayOutput) ToReportableExceptionResponseArrayOutput() ReportableExceptionResponseArrayOutput {
	return o
}

func (o ReportableExceptionResponseArrayOutput) ToReportableExceptionResponseArrayOutputWithContext(ctx context.Context) ReportableExceptionResponseArrayOutput {
	return o
}

func (o ReportableExceptionResponseArrayOutput) Index(i pulumi.IntInput) ReportableExceptionResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ReportableExceptionResponse {
		return vs[0].([]ReportableExceptionResponse)[vs[1].(int)]
	}).(ReportableExceptionResponseOutput)
}

// Info for certificate to be exported for TDE enabled databases.
type SelectedCertificateInput struct {
	// Name of certificate to be exported.
	CertificateName string `pulumi:"certificateName"`
	// Password to use for encrypting the exported certificate.
	Password string `pulumi:"password"`
}

// SelectedCertificateInputInput is an input type that accepts SelectedCertificateInputArgs and SelectedCertificateInputOutput values.
// You can construct a concrete instance of `SelectedCertificateInputInput` via:
//
//          SelectedCertificateInputArgs{...}
type SelectedCertificateInputInput interface {
	pulumi.Input

	ToSelectedCertificateInputOutput() SelectedCertificateInputOutput
	ToSelectedCertificateInputOutputWithContext(context.Context) SelectedCertificateInputOutput
}

// Info for certificate to be exported for TDE enabled databases.
type SelectedCertificateInputArgs struct {
	// Name of certificate to be exported.
	CertificateName pulumi.StringInput `pulumi:"certificateName"`
	// Password to use for encrypting the exported certificate.
	Password pulumi.StringInput `pulumi:"password"`
}

func (SelectedCertificateInputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SelectedCertificateInput)(nil)).Elem()
}

func (i SelectedCertificateInputArgs) ToSelectedCertificateInputOutput() SelectedCertificateInputOutput {
	return i.ToSelectedCertificateInputOutputWithContext(context.Background())
}

func (i SelectedCertificateInputArgs) ToSelectedCertificateInputOutputWithContext(ctx context.Context) SelectedCertificateInputOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SelectedCertificateInputOutput)
}

// SelectedCertificateInputArrayInput is an input type that accepts SelectedCertificateInputArray and SelectedCertificateInputArrayOutput values.
// You can construct a concrete instance of `SelectedCertificateInputArrayInput` via:
//
//          SelectedCertificateInputArray{ SelectedCertificateInputArgs{...} }
type SelectedCertificateInputArrayInput interface {
	pulumi.Input

	ToSelectedCertificateInputArrayOutput() SelectedCertificateInputArrayOutput
	ToSelectedCertificateInputArrayOutputWithContext(context.Context) SelectedCertificateInputArrayOutput
}

type SelectedCertificateInputArray []SelectedCertificateInputInput

func (SelectedCertificateInputArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SelectedCertificateInput)(nil)).Elem()
}

func (i SelectedCertificateInputArray) ToSelectedCertificateInputArrayOutput() SelectedCertificateInputArrayOutput {
	return i.ToSelectedCertificateInputArrayOutputWithContext(context.Background())
}

func (i SelectedCertificateInputArray) ToSelectedCertificateInputArrayOutputWithContext(ctx context.Context) SelectedCertificateInputArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SelectedCertificateInputArrayOutput)
}

// Info for certificate to be exported for TDE enabled databases.
type SelectedCertificateInputResponse struct {
	// Name of certificate to be exported.
	CertificateName string `pulumi:"certificateName"`
	// Password to use for encrypting the exported certificate.
	Password string `pulumi:"password"`
}

// Info for certificate to be exported for TDE enabled databases.
type SelectedCertificateInputResponseOutput struct{ *pulumi.OutputState }

func (SelectedCertificateInputResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SelectedCertificateInputResponse)(nil)).Elem()
}

func (o SelectedCertificateInputResponseOutput) ToSelectedCertificateInputResponseOutput() SelectedCertificateInputResponseOutput {
	return o
}

func (o SelectedCertificateInputResponseOutput) ToSelectedCertificateInputResponseOutputWithContext(ctx context.Context) SelectedCertificateInputResponseOutput {
	return o
}

// Name of certificate to be exported.
func (o SelectedCertificateInputResponseOutput) CertificateName() pulumi.StringOutput {
	return o.ApplyT(func(v SelectedCertificateInputResponse) string { return v.CertificateName }).(pulumi.StringOutput)
}

// Password to use for encrypting the exported certificate.
func (o SelectedCertificateInputResponseOutput) Password() pulumi.StringOutput {
	return o.ApplyT(func(v SelectedCertificateInputResponse) string { return v.Password }).(pulumi.StringOutput)
}

type SelectedCertificateInputResponseArrayOutput struct{ *pulumi.OutputState }

func (SelectedCertificateInputResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SelectedCertificateInputResponse)(nil)).Elem()
}

func (o SelectedCertificateInputResponseArrayOutput) ToSelectedCertificateInputResponseArrayOutput() SelectedCertificateInputResponseArrayOutput {
	return o
}

func (o SelectedCertificateInputResponseArrayOutput) ToSelectedCertificateInputResponseArrayOutputWithContext(ctx context.Context) SelectedCertificateInputResponseArrayOutput {
	return o
}

func (o SelectedCertificateInputResponseArrayOutput) Index(i pulumi.IntInput) SelectedCertificateInputResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SelectedCertificateInputResponse {
		return vs[0].([]SelectedCertificateInputResponse)[vs[1].(int)]
	}).(SelectedCertificateInputResponseOutput)
}

// An Azure SKU instance
type ServiceSku struct {
	// The capacity of the SKU, if it supports scaling
	Capacity *int `pulumi:"capacity"`
	// The SKU family, used when the service has multiple performance classes within a tier, such as 'A', 'D', etc. for virtual machines
	Family *string `pulumi:"family"`
	// The unique name of the SKU, such as 'P3'
	Name *string `pulumi:"name"`
	// The size of the SKU, used when the name alone does not denote a service size or when a SKU has multiple performance classes within a family, e.g. 'A1' for virtual machines
	Size *string `pulumi:"size"`
	// The tier of the SKU, such as 'Basic', 'General Purpose', or 'Business Critical'
	Tier *string `pulumi:"tier"`
}

// ServiceSkuInput is an input type that accepts ServiceSkuArgs and ServiceSkuOutput values.
// You can construct a concrete instance of `ServiceSkuInput` via:
//
//          ServiceSkuArgs{...}
type ServiceSkuInput interface {
	pulumi.Input

	ToServiceSkuOutput() ServiceSkuOutput
	ToServiceSkuOutputWithContext(context.Context) ServiceSkuOutput
}

// An Azure SKU instance
type ServiceSkuArgs struct {
	// The capacity of the SKU, if it supports scaling
	Capacity pulumi.IntPtrInput `pulumi:"capacity"`
	// The SKU family, used when the service has multiple performance classes within a tier, such as 'A', 'D', etc. for virtual machines
	Family pulumi.StringPtrInput `pulumi:"family"`
	// The unique name of the SKU, such as 'P3'
	Name pulumi.StringPtrInput `pulumi:"name"`
	// The size of the SKU, used when the name alone does not denote a service size or when a SKU has multiple performance classes within a family, e.g. 'A1' for virtual machines
	Size pulumi.StringPtrInput `pulumi:"size"`
	// The tier of the SKU, such as 'Basic', 'General Purpose', or 'Business Critical'
	Tier pulumi.StringPtrInput `pulumi:"tier"`
}

func (ServiceSkuArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceSku)(nil)).Elem()
}

func (i ServiceSkuArgs) ToServiceSkuOutput() ServiceSkuOutput {
	return i.ToServiceSkuOutputWithContext(context.Background())
}

func (i ServiceSkuArgs) ToServiceSkuOutputWithContext(ctx context.Context) ServiceSkuOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceSkuOutput)
}

func (i ServiceSkuArgs) ToServiceSkuPtrOutput() ServiceSkuPtrOutput {
	return i.ToServiceSkuPtrOutputWithContext(context.Background())
}

func (i ServiceSkuArgs) ToServiceSkuPtrOutputWithContext(ctx context.Context) ServiceSkuPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceSkuOutput).ToServiceSkuPtrOutputWithContext(ctx)
}

// ServiceSkuPtrInput is an input type that accepts ServiceSkuArgs, ServiceSkuPtr and ServiceSkuPtrOutput values.
// You can construct a concrete instance of `ServiceSkuPtrInput` via:
//
//          ServiceSkuArgs{...}
//
//  or:
//
//          nil
type ServiceSkuPtrInput interface {
	pulumi.Input

	ToServiceSkuPtrOutput() ServiceSkuPtrOutput
	ToServiceSkuPtrOutputWithContext(context.Context) ServiceSkuPtrOutput
}

type serviceSkuPtrType ServiceSkuArgs

func ServiceSkuPtr(v *ServiceSkuArgs) ServiceSkuPtrInput {
	return (*serviceSkuPtrType)(v)
}

func (*serviceSkuPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ServiceSku)(nil)).Elem()
}

func (i *serviceSkuPtrType) ToServiceSkuPtrOutput() ServiceSkuPtrOutput {
	return i.ToServiceSkuPtrOutputWithContext(context.Background())
}

func (i *serviceSkuPtrType) ToServiceSkuPtrOutputWithContext(ctx context.Context) ServiceSkuPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceSkuPtrOutput)
}

// An Azure SKU instance
type ServiceSkuResponse struct {
	// The capacity of the SKU, if it supports scaling
	Capacity *int `pulumi:"capacity"`
	// The SKU family, used when the service has multiple performance classes within a tier, such as 'A', 'D', etc. for virtual machines
	Family *string `pulumi:"family"`
	// The unique name of the SKU, such as 'P3'
	Name *string `pulumi:"name"`
	// The size of the SKU, used when the name alone does not denote a service size or when a SKU has multiple performance classes within a family, e.g. 'A1' for virtual machines
	Size *string `pulumi:"size"`
	// The tier of the SKU, such as 'Basic', 'General Purpose', or 'Business Critical'
	Tier *string `pulumi:"tier"`
}

// An Azure SKU instance
type ServiceSkuResponseOutput struct{ *pulumi.OutputState }

func (ServiceSkuResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceSkuResponse)(nil)).Elem()
}

func (o ServiceSkuResponseOutput) ToServiceSkuResponseOutput() ServiceSkuResponseOutput {
	return o
}

func (o ServiceSkuResponseOutput) ToServiceSkuResponseOutputWithContext(ctx context.Context) ServiceSkuResponseOutput {
	return o
}

func (o ServiceSkuResponseOutput) ToServiceSkuResponsePtrOutput() ServiceSkuResponsePtrOutput {
	return o.ToServiceSkuResponsePtrOutputWithContext(context.Background())
}

func (o ServiceSkuResponseOutput) ToServiceSkuResponsePtrOutputWithContext(ctx context.Context) ServiceSkuResponsePtrOutput {
	return o.ApplyT(func(v ServiceSkuResponse) *ServiceSkuResponse {
		return &v
	}).(ServiceSkuResponsePtrOutput)
}

// The capacity of the SKU, if it supports scaling
func (o ServiceSkuResponseOutput) Capacity() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ServiceSkuResponse) *int { return v.Capacity }).(pulumi.IntPtrOutput)
}

// The SKU family, used when the service has multiple performance classes within a tier, such as 'A', 'D', etc. for virtual machines
func (o ServiceSkuResponseOutput) Family() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceSkuResponse) *string { return v.Family }).(pulumi.StringPtrOutput)
}

// The unique name of the SKU, such as 'P3'
func (o ServiceSkuResponseOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceSkuResponse) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The size of the SKU, used when the name alone does not denote a service size or when a SKU has multiple performance classes within a family, e.g. 'A1' for virtual machines
func (o ServiceSkuResponseOutput) Size() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceSkuResponse) *string { return v.Size }).(pulumi.StringPtrOutput)
}

// The tier of the SKU, such as 'Basic', 'General Purpose', or 'Business Critical'
func (o ServiceSkuResponseOutput) Tier() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceSkuResponse) *string { return v.Tier }).(pulumi.StringPtrOutput)
}

type ServiceSkuResponsePtrOutput struct{ *pulumi.OutputState }

func (ServiceSkuResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ServiceSkuResponse)(nil)).Elem()
}

func (o ServiceSkuResponsePtrOutput) ToServiceSkuResponsePtrOutput() ServiceSkuResponsePtrOutput {
	return o
}

func (o ServiceSkuResponsePtrOutput) ToServiceSkuResponsePtrOutputWithContext(ctx context.Context) ServiceSkuResponsePtrOutput {
	return o
}

func (o ServiceSkuResponsePtrOutput) Elem() ServiceSkuResponseOutput {
	return o.ApplyT(func(v *ServiceSkuResponse) ServiceSkuResponse { return *v }).(ServiceSkuResponseOutput)
}

// The capacity of the SKU, if it supports scaling
func (o ServiceSkuResponsePtrOutput) Capacity() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ServiceSkuResponse) *int {
		if v == nil {
			return nil
		}
		return v.Capacity
	}).(pulumi.IntPtrOutput)
}

// The SKU family, used when the service has multiple performance classes within a tier, such as 'A', 'D', etc. for virtual machines
func (o ServiceSkuResponsePtrOutput) Family() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServiceSkuResponse) *string {
		if v == nil {
			return nil
		}
		return v.Family
	}).(pulumi.StringPtrOutput)
}

// The unique name of the SKU, such as 'P3'
func (o ServiceSkuResponsePtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServiceSkuResponse) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// The size of the SKU, used when the name alone does not denote a service size or when a SKU has multiple performance classes within a family, e.g. 'A1' for virtual machines
func (o ServiceSkuResponsePtrOutput) Size() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServiceSkuResponse) *string {
		if v == nil {
			return nil
		}
		return v.Size
	}).(pulumi.StringPtrOutput)
}

// The tier of the SKU, such as 'Basic', 'General Purpose', or 'Business Critical'
func (o ServiceSkuResponsePtrOutput) Tier() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServiceSkuResponse) *string {
		if v == nil {
			return nil
		}
		return v.Tier
	}).(pulumi.StringPtrOutput)
}

// Information for connecting to SQL database server
type SqlConnectionInfo struct {
	// Additional connection settings
	AdditionalSettings *string `pulumi:"additionalSettings"`
	// Authentication type to use for connection
	Authentication *string `pulumi:"authentication"`
	// Data source in the format Protocol:MachineName\SQLServerInstanceName,PortNumber
	DataSource string `pulumi:"dataSource"`
	// Whether to encrypt the connection
	EncryptConnection *bool `pulumi:"encryptConnection"`
	// Password credential.
	Password *string `pulumi:"password"`
	// Server platform type for connection
	Platform *string `pulumi:"platform"`
	// Whether to trust the server certificate
	TrustServerCertificate *bool `pulumi:"trustServerCertificate"`
	// Type of connection info
	Type string `pulumi:"type"`
	// User name
	UserName *string `pulumi:"userName"`
}

// SqlConnectionInfoInput is an input type that accepts SqlConnectionInfoArgs and SqlConnectionInfoOutput values.
// You can construct a concrete instance of `SqlConnectionInfoInput` via:
//
//          SqlConnectionInfoArgs{...}
type SqlConnectionInfoInput interface {
	pulumi.Input

	ToSqlConnectionInfoOutput() SqlConnectionInfoOutput
	ToSqlConnectionInfoOutputWithContext(context.Context) SqlConnectionInfoOutput
}

// Information for connecting to SQL database server
type SqlConnectionInfoArgs struct {
	// Additional connection settings
	AdditionalSettings pulumi.StringPtrInput `pulumi:"additionalSettings"`
	// Authentication type to use for connection
	Authentication pulumi.StringPtrInput `pulumi:"authentication"`
	// Data source in the format Protocol:MachineName\SQLServerInstanceName,PortNumber
	DataSource pulumi.StringInput `pulumi:"dataSource"`
	// Whether to encrypt the connection
	EncryptConnection pulumi.BoolPtrInput `pulumi:"encryptConnection"`
	// Password credential.
	Password pulumi.StringPtrInput `pulumi:"password"`
	// Server platform type for connection
	Platform pulumi.StringPtrInput `pulumi:"platform"`
	// Whether to trust the server certificate
	TrustServerCertificate pulumi.BoolPtrInput `pulumi:"trustServerCertificate"`
	// Type of connection info
	Type pulumi.StringInput `pulumi:"type"`
	// User name
	UserName pulumi.StringPtrInput `pulumi:"userName"`
}

func (SqlConnectionInfoArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SqlConnectionInfo)(nil)).Elem()
}

func (i SqlConnectionInfoArgs) ToSqlConnectionInfoOutput() SqlConnectionInfoOutput {
	return i.ToSqlConnectionInfoOutputWithContext(context.Background())
}

func (i SqlConnectionInfoArgs) ToSqlConnectionInfoOutputWithContext(ctx context.Context) SqlConnectionInfoOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SqlConnectionInfoOutput)
}

func (i SqlConnectionInfoArgs) ToSqlConnectionInfoPtrOutput() SqlConnectionInfoPtrOutput {
	return i.ToSqlConnectionInfoPtrOutputWithContext(context.Background())
}

func (i SqlConnectionInfoArgs) ToSqlConnectionInfoPtrOutputWithContext(ctx context.Context) SqlConnectionInfoPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SqlConnectionInfoOutput).ToSqlConnectionInfoPtrOutputWithContext(ctx)
}

// SqlConnectionInfoPtrInput is an input type that accepts SqlConnectionInfoArgs, SqlConnectionInfoPtr and SqlConnectionInfoPtrOutput values.
// You can construct a concrete instance of `SqlConnectionInfoPtrInput` via:
//
//          SqlConnectionInfoArgs{...}
//
//  or:
//
//          nil
type SqlConnectionInfoPtrInput interface {
	pulumi.Input

	ToSqlConnectionInfoPtrOutput() SqlConnectionInfoPtrOutput
	ToSqlConnectionInfoPtrOutputWithContext(context.Context) SqlConnectionInfoPtrOutput
}

type sqlConnectionInfoPtrType SqlConnectionInfoArgs

func SqlConnectionInfoPtr(v *SqlConnectionInfoArgs) SqlConnectionInfoPtrInput {
	return (*sqlConnectionInfoPtrType)(v)
}

func (*sqlConnectionInfoPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SqlConnectionInfo)(nil)).Elem()
}

func (i *sqlConnectionInfoPtrType) ToSqlConnectionInfoPtrOutput() SqlConnectionInfoPtrOutput {
	return i.ToSqlConnectionInfoPtrOutputWithContext(context.Background())
}

func (i *sqlConnectionInfoPtrType) ToSqlConnectionInfoPtrOutputWithContext(ctx context.Context) SqlConnectionInfoPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SqlConnectionInfoPtrOutput)
}

// Information for connecting to SQL database server
type SqlConnectionInfoResponse struct {
	// Additional connection settings
	AdditionalSettings *string `pulumi:"additionalSettings"`
	// Authentication type to use for connection
	Authentication *string `pulumi:"authentication"`
	// Data source in the format Protocol:MachineName\SQLServerInstanceName,PortNumber
	DataSource string `pulumi:"dataSource"`
	// Whether to encrypt the connection
	EncryptConnection *bool `pulumi:"encryptConnection"`
	// Password credential.
	Password *string `pulumi:"password"`
	// Server platform type for connection
	Platform *string `pulumi:"platform"`
	// Whether to trust the server certificate
	TrustServerCertificate *bool `pulumi:"trustServerCertificate"`
	// Type of connection info
	Type string `pulumi:"type"`
	// User name
	UserName *string `pulumi:"userName"`
}

// Information for connecting to SQL database server
type SqlConnectionInfoResponseOutput struct{ *pulumi.OutputState }

func (SqlConnectionInfoResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SqlConnectionInfoResponse)(nil)).Elem()
}

func (o SqlConnectionInfoResponseOutput) ToSqlConnectionInfoResponseOutput() SqlConnectionInfoResponseOutput {
	return o
}

func (o SqlConnectionInfoResponseOutput) ToSqlConnectionInfoResponseOutputWithContext(ctx context.Context) SqlConnectionInfoResponseOutput {
	return o
}

func (o SqlConnectionInfoResponseOutput) ToSqlConnectionInfoResponsePtrOutput() SqlConnectionInfoResponsePtrOutput {
	return o.ToSqlConnectionInfoResponsePtrOutputWithContext(context.Background())
}

func (o SqlConnectionInfoResponseOutput) ToSqlConnectionInfoResponsePtrOutputWithContext(ctx context.Context) SqlConnectionInfoResponsePtrOutput {
	return o.ApplyT(func(v SqlConnectionInfoResponse) *SqlConnectionInfoResponse {
		return &v
	}).(SqlConnectionInfoResponsePtrOutput)
}

// Additional connection settings
func (o SqlConnectionInfoResponseOutput) AdditionalSettings() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SqlConnectionInfoResponse) *string { return v.AdditionalSettings }).(pulumi.StringPtrOutput)
}

// Authentication type to use for connection
func (o SqlConnectionInfoResponseOutput) Authentication() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SqlConnectionInfoResponse) *string { return v.Authentication }).(pulumi.StringPtrOutput)
}

// Data source in the format Protocol:MachineName\SQLServerInstanceName,PortNumber
func (o SqlConnectionInfoResponseOutput) DataSource() pulumi.StringOutput {
	return o.ApplyT(func(v SqlConnectionInfoResponse) string { return v.DataSource }).(pulumi.StringOutput)
}

// Whether to encrypt the connection
func (o SqlConnectionInfoResponseOutput) EncryptConnection() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SqlConnectionInfoResponse) *bool { return v.EncryptConnection }).(pulumi.BoolPtrOutput)
}

// Password credential.
func (o SqlConnectionInfoResponseOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SqlConnectionInfoResponse) *string { return v.Password }).(pulumi.StringPtrOutput)
}

// Server platform type for connection
func (o SqlConnectionInfoResponseOutput) Platform() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SqlConnectionInfoResponse) *string { return v.Platform }).(pulumi.StringPtrOutput)
}

// Whether to trust the server certificate
func (o SqlConnectionInfoResponseOutput) TrustServerCertificate() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SqlConnectionInfoResponse) *bool { return v.TrustServerCertificate }).(pulumi.BoolPtrOutput)
}

// Type of connection info
func (o SqlConnectionInfoResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v SqlConnectionInfoResponse) string { return v.Type }).(pulumi.StringOutput)
}

// User name
func (o SqlConnectionInfoResponseOutput) UserName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SqlConnectionInfoResponse) *string { return v.UserName }).(pulumi.StringPtrOutput)
}

type SqlConnectionInfoResponsePtrOutput struct{ *pulumi.OutputState }

func (SqlConnectionInfoResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SqlConnectionInfoResponse)(nil)).Elem()
}

func (o SqlConnectionInfoResponsePtrOutput) ToSqlConnectionInfoResponsePtrOutput() SqlConnectionInfoResponsePtrOutput {
	return o
}

func (o SqlConnectionInfoResponsePtrOutput) ToSqlConnectionInfoResponsePtrOutputWithContext(ctx context.Context) SqlConnectionInfoResponsePtrOutput {
	return o
}

func (o SqlConnectionInfoResponsePtrOutput) Elem() SqlConnectionInfoResponseOutput {
	return o.ApplyT(func(v *SqlConnectionInfoResponse) SqlConnectionInfoResponse { return *v }).(SqlConnectionInfoResponseOutput)
}

// Additional connection settings
func (o SqlConnectionInfoResponsePtrOutput) AdditionalSettings() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SqlConnectionInfoResponse) *string {
		if v == nil {
			return nil
		}
		return v.AdditionalSettings
	}).(pulumi.StringPtrOutput)
}

// Authentication type to use for connection
func (o SqlConnectionInfoResponsePtrOutput) Authentication() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SqlConnectionInfoResponse) *string {
		if v == nil {
			return nil
		}
		return v.Authentication
	}).(pulumi.StringPtrOutput)
}

// Data source in the format Protocol:MachineName\SQLServerInstanceName,PortNumber
func (o SqlConnectionInfoResponsePtrOutput) DataSource() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SqlConnectionInfoResponse) *string {
		if v == nil {
			return nil
		}
		return &v.DataSource
	}).(pulumi.StringPtrOutput)
}

// Whether to encrypt the connection
func (o SqlConnectionInfoResponsePtrOutput) EncryptConnection() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SqlConnectionInfoResponse) *bool {
		if v == nil {
			return nil
		}
		return v.EncryptConnection
	}).(pulumi.BoolPtrOutput)
}

// Password credential.
func (o SqlConnectionInfoResponsePtrOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SqlConnectionInfoResponse) *string {
		if v == nil {
			return nil
		}
		return v.Password
	}).(pulumi.StringPtrOutput)
}

// Server platform type for connection
func (o SqlConnectionInfoResponsePtrOutput) Platform() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SqlConnectionInfoResponse) *string {
		if v == nil {
			return nil
		}
		return v.Platform
	}).(pulumi.StringPtrOutput)
}

// Whether to trust the server certificate
func (o SqlConnectionInfoResponsePtrOutput) TrustServerCertificate() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SqlConnectionInfoResponse) *bool {
		if v == nil {
			return nil
		}
		return v.TrustServerCertificate
	}).(pulumi.BoolPtrOutput)
}

// Type of connection info
func (o SqlConnectionInfoResponsePtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SqlConnectionInfoResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

// User name
func (o SqlConnectionInfoResponsePtrOutput) UserName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SqlConnectionInfoResponse) *string {
		if v == nil {
			return nil
		}
		return v.UserName
	}).(pulumi.StringPtrOutput)
}

// SSIS migration info with SSIS store type, overwrite policy.
type SsisMigrationInfo struct {
	// The overwrite option for the SSIS environment migration
	EnvironmentOverwriteOption *string `pulumi:"environmentOverwriteOption"`
	// The overwrite option for the SSIS project migration
	ProjectOverwriteOption *string `pulumi:"projectOverwriteOption"`
	// The SSIS store type of source, only SSIS catalog is supported now in DMS
	SsisStoreType *string `pulumi:"ssisStoreType"`
}

// SsisMigrationInfoInput is an input type that accepts SsisMigrationInfoArgs and SsisMigrationInfoOutput values.
// You can construct a concrete instance of `SsisMigrationInfoInput` via:
//
//          SsisMigrationInfoArgs{...}
type SsisMigrationInfoInput interface {
	pulumi.Input

	ToSsisMigrationInfoOutput() SsisMigrationInfoOutput
	ToSsisMigrationInfoOutputWithContext(context.Context) SsisMigrationInfoOutput
}

// SSIS migration info with SSIS store type, overwrite policy.
type SsisMigrationInfoArgs struct {
	// The overwrite option for the SSIS environment migration
	EnvironmentOverwriteOption pulumi.StringPtrInput `pulumi:"environmentOverwriteOption"`
	// The overwrite option for the SSIS project migration
	ProjectOverwriteOption pulumi.StringPtrInput `pulumi:"projectOverwriteOption"`
	// The SSIS store type of source, only SSIS catalog is supported now in DMS
	SsisStoreType pulumi.StringPtrInput `pulumi:"ssisStoreType"`
}

func (SsisMigrationInfoArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SsisMigrationInfo)(nil)).Elem()
}

func (i SsisMigrationInfoArgs) ToSsisMigrationInfoOutput() SsisMigrationInfoOutput {
	return i.ToSsisMigrationInfoOutputWithContext(context.Background())
}

func (i SsisMigrationInfoArgs) ToSsisMigrationInfoOutputWithContext(ctx context.Context) SsisMigrationInfoOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SsisMigrationInfoOutput)
}

func (i SsisMigrationInfoArgs) ToSsisMigrationInfoPtrOutput() SsisMigrationInfoPtrOutput {
	return i.ToSsisMigrationInfoPtrOutputWithContext(context.Background())
}

func (i SsisMigrationInfoArgs) ToSsisMigrationInfoPtrOutputWithContext(ctx context.Context) SsisMigrationInfoPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SsisMigrationInfoOutput).ToSsisMigrationInfoPtrOutputWithContext(ctx)
}

// SsisMigrationInfoPtrInput is an input type that accepts SsisMigrationInfoArgs, SsisMigrationInfoPtr and SsisMigrationInfoPtrOutput values.
// You can construct a concrete instance of `SsisMigrationInfoPtrInput` via:
//
//          SsisMigrationInfoArgs{...}
//
//  or:
//
//          nil
type SsisMigrationInfoPtrInput interface {
	pulumi.Input

	ToSsisMigrationInfoPtrOutput() SsisMigrationInfoPtrOutput
	ToSsisMigrationInfoPtrOutputWithContext(context.Context) SsisMigrationInfoPtrOutput
}

type ssisMigrationInfoPtrType SsisMigrationInfoArgs

func SsisMigrationInfoPtr(v *SsisMigrationInfoArgs) SsisMigrationInfoPtrInput {
	return (*ssisMigrationInfoPtrType)(v)
}

func (*ssisMigrationInfoPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SsisMigrationInfo)(nil)).Elem()
}

func (i *ssisMigrationInfoPtrType) ToSsisMigrationInfoPtrOutput() SsisMigrationInfoPtrOutput {
	return i.ToSsisMigrationInfoPtrOutputWithContext(context.Background())
}

func (i *ssisMigrationInfoPtrType) ToSsisMigrationInfoPtrOutputWithContext(ctx context.Context) SsisMigrationInfoPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SsisMigrationInfoPtrOutput)
}

// SSIS migration info with SSIS store type, overwrite policy.
type SsisMigrationInfoResponse struct {
	// The overwrite option for the SSIS environment migration
	EnvironmentOverwriteOption *string `pulumi:"environmentOverwriteOption"`
	// The overwrite option for the SSIS project migration
	ProjectOverwriteOption *string `pulumi:"projectOverwriteOption"`
	// The SSIS store type of source, only SSIS catalog is supported now in DMS
	SsisStoreType *string `pulumi:"ssisStoreType"`
}

// SSIS migration info with SSIS store type, overwrite policy.
type SsisMigrationInfoResponseOutput struct{ *pulumi.OutputState }

func (SsisMigrationInfoResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SsisMigrationInfoResponse)(nil)).Elem()
}

func (o SsisMigrationInfoResponseOutput) ToSsisMigrationInfoResponseOutput() SsisMigrationInfoResponseOutput {
	return o
}

func (o SsisMigrationInfoResponseOutput) ToSsisMigrationInfoResponseOutputWithContext(ctx context.Context) SsisMigrationInfoResponseOutput {
	return o
}

func (o SsisMigrationInfoResponseOutput) ToSsisMigrationInfoResponsePtrOutput() SsisMigrationInfoResponsePtrOutput {
	return o.ToSsisMigrationInfoResponsePtrOutputWithContext(context.Background())
}

func (o SsisMigrationInfoResponseOutput) ToSsisMigrationInfoResponsePtrOutputWithContext(ctx context.Context) SsisMigrationInfoResponsePtrOutput {
	return o.ApplyT(func(v SsisMigrationInfoResponse) *SsisMigrationInfoResponse {
		return &v
	}).(SsisMigrationInfoResponsePtrOutput)
}

// The overwrite option for the SSIS environment migration
func (o SsisMigrationInfoResponseOutput) EnvironmentOverwriteOption() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SsisMigrationInfoResponse) *string { return v.EnvironmentOverwriteOption }).(pulumi.StringPtrOutput)
}

// The overwrite option for the SSIS project migration
func (o SsisMigrationInfoResponseOutput) ProjectOverwriteOption() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SsisMigrationInfoResponse) *string { return v.ProjectOverwriteOption }).(pulumi.StringPtrOutput)
}

// The SSIS store type of source, only SSIS catalog is supported now in DMS
func (o SsisMigrationInfoResponseOutput) SsisStoreType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SsisMigrationInfoResponse) *string { return v.SsisStoreType }).(pulumi.StringPtrOutput)
}

type SsisMigrationInfoResponsePtrOutput struct{ *pulumi.OutputState }

func (SsisMigrationInfoResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SsisMigrationInfoResponse)(nil)).Elem()
}

func (o SsisMigrationInfoResponsePtrOutput) ToSsisMigrationInfoResponsePtrOutput() SsisMigrationInfoResponsePtrOutput {
	return o
}

func (o SsisMigrationInfoResponsePtrOutput) ToSsisMigrationInfoResponsePtrOutputWithContext(ctx context.Context) SsisMigrationInfoResponsePtrOutput {
	return o
}

func (o SsisMigrationInfoResponsePtrOutput) Elem() SsisMigrationInfoResponseOutput {
	return o.ApplyT(func(v *SsisMigrationInfoResponse) SsisMigrationInfoResponse { return *v }).(SsisMigrationInfoResponseOutput)
}

// The overwrite option for the SSIS environment migration
func (o SsisMigrationInfoResponsePtrOutput) EnvironmentOverwriteOption() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SsisMigrationInfoResponse) *string {
		if v == nil {
			return nil
		}
		return v.EnvironmentOverwriteOption
	}).(pulumi.StringPtrOutput)
}

// The overwrite option for the SSIS project migration
func (o SsisMigrationInfoResponsePtrOutput) ProjectOverwriteOption() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SsisMigrationInfoResponse) *string {
		if v == nil {
			return nil
		}
		return v.ProjectOverwriteOption
	}).(pulumi.StringPtrOutput)
}

// The SSIS store type of source, only SSIS catalog is supported now in DMS
func (o SsisMigrationInfoResponsePtrOutput) SsisStoreType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SsisMigrationInfoResponse) *string {
		if v == nil {
			return nil
		}
		return v.SsisStoreType
	}).(pulumi.StringPtrOutput)
}

// Database migration errors for online migration
type SyncMigrationDatabaseErrorEventResponse struct {
	// Event text.
	EventText string `pulumi:"eventText"`
	// Event type.
	EventTypeString string `pulumi:"eventTypeString"`
	// String value of timestamp.
	TimestampString string `pulumi:"timestampString"`
}

// Database migration errors for online migration
type SyncMigrationDatabaseErrorEventResponseOutput struct{ *pulumi.OutputState }

func (SyncMigrationDatabaseErrorEventResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SyncMigrationDatabaseErrorEventResponse)(nil)).Elem()
}

func (o SyncMigrationDatabaseErrorEventResponseOutput) ToSyncMigrationDatabaseErrorEventResponseOutput() SyncMigrationDatabaseErrorEventResponseOutput {
	return o
}

func (o SyncMigrationDatabaseErrorEventResponseOutput) ToSyncMigrationDatabaseErrorEventResponseOutputWithContext(ctx context.Context) SyncMigrationDatabaseErrorEventResponseOutput {
	return o
}

// Event text.
func (o SyncMigrationDatabaseErrorEventResponseOutput) EventText() pulumi.StringOutput {
	return o.ApplyT(func(v SyncMigrationDatabaseErrorEventResponse) string { return v.EventText }).(pulumi.StringOutput)
}

// Event type.
func (o SyncMigrationDatabaseErrorEventResponseOutput) EventTypeString() pulumi.StringOutput {
	return o.ApplyT(func(v SyncMigrationDatabaseErrorEventResponse) string { return v.EventTypeString }).(pulumi.StringOutput)
}

// String value of timestamp.
func (o SyncMigrationDatabaseErrorEventResponseOutput) TimestampString() pulumi.StringOutput {
	return o.ApplyT(func(v SyncMigrationDatabaseErrorEventResponse) string { return v.TimestampString }).(pulumi.StringOutput)
}

type SyncMigrationDatabaseErrorEventResponseArrayOutput struct{ *pulumi.OutputState }

func (SyncMigrationDatabaseErrorEventResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SyncMigrationDatabaseErrorEventResponse)(nil)).Elem()
}

func (o SyncMigrationDatabaseErrorEventResponseArrayOutput) ToSyncMigrationDatabaseErrorEventResponseArrayOutput() SyncMigrationDatabaseErrorEventResponseArrayOutput {
	return o
}

func (o SyncMigrationDatabaseErrorEventResponseArrayOutput) ToSyncMigrationDatabaseErrorEventResponseArrayOutputWithContext(ctx context.Context) SyncMigrationDatabaseErrorEventResponseArrayOutput {
	return o
}

func (o SyncMigrationDatabaseErrorEventResponseArrayOutput) Index(i pulumi.IntInput) SyncMigrationDatabaseErrorEventResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SyncMigrationDatabaseErrorEventResponse {
		return vs[0].([]SyncMigrationDatabaseErrorEventResponse)[vs[1].(int)]
	}).(SyncMigrationDatabaseErrorEventResponseOutput)
}

// Properties for task that validates migration input for SQL to Azure SQL DB sync migrations
type ValidateMigrationInputSqlServerSqlDbSyncTaskProperties struct {
	// Key value pairs of client data to attach meta data information to task
	ClientData map[string]string `pulumi:"clientData"`
	// Task input
	Input *ValidateSyncMigrationInputSqlServerTaskInput `pulumi:"input"`
	// Task type.
	TaskType string `pulumi:"taskType"`
}

// ValidateMigrationInputSqlServerSqlDbSyncTaskPropertiesInput is an input type that accepts ValidateMigrationInputSqlServerSqlDbSyncTaskPropertiesArgs and ValidateMigrationInputSqlServerSqlDbSyncTaskPropertiesOutput values.
// You can construct a concrete instance of `ValidateMigrationInputSqlServerSqlDbSyncTaskPropertiesInput` via:
//
//          ValidateMigrationInputSqlServerSqlDbSyncTaskPropertiesArgs{...}
type ValidateMigrationInputSqlServerSqlDbSyncTaskPropertiesInput interface {
	pulumi.Input

	ToValidateMigrationInputSqlServerSqlDbSyncTaskPropertiesOutput() ValidateMigrationInputSqlServerSqlDbSyncTaskPropertiesOutput
	ToValidateMigrationInputSqlServerSqlDbSyncTaskPropertiesOutputWithContext(context.Context) ValidateMigrationInputSqlServerSqlDbSyncTaskPropertiesOutput
}

// Properties for task that validates migration input for SQL to Azure SQL DB sync migrations
type ValidateMigrationInputSqlServerSqlDbSyncTaskPropertiesArgs struct {
	// Key value pairs of client data to attach meta data information to task
	ClientData pulumi.StringMapInput `pulumi:"clientData"`
	// Task input
	Input ValidateSyncMigrationInputSqlServerTaskInputPtrInput `pulumi:"input"`
	// Task type.
	TaskType pulumi.StringInput `pulumi:"taskType"`
}

func (ValidateMigrationInputSqlServerSqlDbSyncTaskPropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ValidateMigrationInputSqlServerSqlDbSyncTaskProperties)(nil)).Elem()
}

func (i ValidateMigrationInputSqlServerSqlDbSyncTaskPropertiesArgs) ToValidateMigrationInputSqlServerSqlDbSyncTaskPropertiesOutput() ValidateMigrationInputSqlServerSqlDbSyncTaskPropertiesOutput {
	return i.ToValidateMigrationInputSqlServerSqlDbSyncTaskPropertiesOutputWithContext(context.Background())
}

func (i ValidateMigrationInputSqlServerSqlDbSyncTaskPropertiesArgs) ToValidateMigrationInputSqlServerSqlDbSyncTaskPropertiesOutputWithContext(ctx context.Context) ValidateMigrationInputSqlServerSqlDbSyncTaskPropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ValidateMigrationInputSqlServerSqlDbSyncTaskPropertiesOutput)
}

// Properties for task that validates migration input for SQL to Azure SQL DB sync migrations
type ValidateMigrationInputSqlServerSqlDbSyncTaskPropertiesResponse struct {
	// Key value pairs of client data to attach meta data information to task
	ClientData map[string]string `pulumi:"clientData"`
	// Array of command properties.
	Commands []interface{} `pulumi:"commands"`
	// Array of errors. This is ignored if submitted.
	Errors []ODataErrorResponse `pulumi:"errors"`
	// Task input
	Input *ValidateSyncMigrationInputSqlServerTaskInputResponse `pulumi:"input"`
	// Task output. This is ignored if submitted.
	Output []ValidateSyncMigrationInputSqlServerTaskOutputResponse `pulumi:"output"`
	// The state of the task. This is ignored if submitted.
	State string `pulumi:"state"`
	// Task type.
	TaskType string `pulumi:"taskType"`
}

// Properties for task that validates migration input for SQL to Azure SQL DB sync migrations
type ValidateMigrationInputSqlServerSqlDbSyncTaskPropertiesResponseOutput struct{ *pulumi.OutputState }

func (ValidateMigrationInputSqlServerSqlDbSyncTaskPropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ValidateMigrationInputSqlServerSqlDbSyncTaskPropertiesResponse)(nil)).Elem()
}

func (o ValidateMigrationInputSqlServerSqlDbSyncTaskPropertiesResponseOutput) ToValidateMigrationInputSqlServerSqlDbSyncTaskPropertiesResponseOutput() ValidateMigrationInputSqlServerSqlDbSyncTaskPropertiesResponseOutput {
	return o
}

func (o ValidateMigrationInputSqlServerSqlDbSyncTaskPropertiesResponseOutput) ToValidateMigrationInputSqlServerSqlDbSyncTaskPropertiesResponseOutputWithContext(ctx context.Context) ValidateMigrationInputSqlServerSqlDbSyncTaskPropertiesResponseOutput {
	return o
}

// Key value pairs of client data to attach meta data information to task
func (o ValidateMigrationInputSqlServerSqlDbSyncTaskPropertiesResponseOutput) ClientData() pulumi.StringMapOutput {
	return o.ApplyT(func(v ValidateMigrationInputSqlServerSqlDbSyncTaskPropertiesResponse) map[string]string {
		return v.ClientData
	}).(pulumi.StringMapOutput)
}

// Array of command properties.
func (o ValidateMigrationInputSqlServerSqlDbSyncTaskPropertiesResponseOutput) Commands() pulumi.ArrayOutput {
	return o.ApplyT(func(v ValidateMigrationInputSqlServerSqlDbSyncTaskPropertiesResponse) []interface{} {
		return v.Commands
	}).(pulumi.ArrayOutput)
}

// Array of errors. This is ignored if submitted.
func (o ValidateMigrationInputSqlServerSqlDbSyncTaskPropertiesResponseOutput) Errors() ODataErrorResponseArrayOutput {
	return o.ApplyT(func(v ValidateMigrationInputSqlServerSqlDbSyncTaskPropertiesResponse) []ODataErrorResponse {
		return v.Errors
	}).(ODataErrorResponseArrayOutput)
}

// Task input
func (o ValidateMigrationInputSqlServerSqlDbSyncTaskPropertiesResponseOutput) Input() ValidateSyncMigrationInputSqlServerTaskInputResponsePtrOutput {
	return o.ApplyT(func(v ValidateMigrationInputSqlServerSqlDbSyncTaskPropertiesResponse) *ValidateSyncMigrationInputSqlServerTaskInputResponse {
		return v.Input
	}).(ValidateSyncMigrationInputSqlServerTaskInputResponsePtrOutput)
}

// Task output. This is ignored if submitted.
func (o ValidateMigrationInputSqlServerSqlDbSyncTaskPropertiesResponseOutput) Output() ValidateSyncMigrationInputSqlServerTaskOutputResponseArrayOutput {
	return o.ApplyT(func(v ValidateMigrationInputSqlServerSqlDbSyncTaskPropertiesResponse) []ValidateSyncMigrationInputSqlServerTaskOutputResponse {
		return v.Output
	}).(ValidateSyncMigrationInputSqlServerTaskOutputResponseArrayOutput)
}

// The state of the task. This is ignored if submitted.
func (o ValidateMigrationInputSqlServerSqlDbSyncTaskPropertiesResponseOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v ValidateMigrationInputSqlServerSqlDbSyncTaskPropertiesResponse) string { return v.State }).(pulumi.StringOutput)
}

// Task type.
func (o ValidateMigrationInputSqlServerSqlDbSyncTaskPropertiesResponseOutput) TaskType() pulumi.StringOutput {
	return o.ApplyT(func(v ValidateMigrationInputSqlServerSqlDbSyncTaskPropertiesResponse) string { return v.TaskType }).(pulumi.StringOutput)
}

// Input for task that migrates SQL Server databases to Azure SQL Database Managed Instance online scenario.
type ValidateMigrationInputSqlServerSqlMISyncTaskInput struct {
	// Azure Active Directory Application the DMS instance will use to connect to the target instance of Azure SQL Database Managed Instance and the Azure Storage Account
	AzureApp AzureActiveDirectoryApp `pulumi:"azureApp"`
	// Backup file share information for all selected databases.
	BackupFileShare *FileShare `pulumi:"backupFileShare"`
	// Databases to migrate
	SelectedDatabases []MigrateSqlServerSqlMIDatabaseInput `pulumi:"selectedDatabases"`
	// Connection information for source SQL Server
	SourceConnectionInfo SqlConnectionInfo `pulumi:"sourceConnectionInfo"`
	// Fully qualified resourceId of storage
	StorageResourceId string `pulumi:"storageResourceId"`
	// Connection information for Azure SQL Database Managed Instance
	TargetConnectionInfo MiSqlConnectionInfo `pulumi:"targetConnectionInfo"`
}

// ValidateMigrationInputSqlServerSqlMISyncTaskInputInput is an input type that accepts ValidateMigrationInputSqlServerSqlMISyncTaskInputArgs and ValidateMigrationInputSqlServerSqlMISyncTaskInputOutput values.
// You can construct a concrete instance of `ValidateMigrationInputSqlServerSqlMISyncTaskInputInput` via:
//
//          ValidateMigrationInputSqlServerSqlMISyncTaskInputArgs{...}
type ValidateMigrationInputSqlServerSqlMISyncTaskInputInput interface {
	pulumi.Input

	ToValidateMigrationInputSqlServerSqlMISyncTaskInputOutput() ValidateMigrationInputSqlServerSqlMISyncTaskInputOutput
	ToValidateMigrationInputSqlServerSqlMISyncTaskInputOutputWithContext(context.Context) ValidateMigrationInputSqlServerSqlMISyncTaskInputOutput
}

// Input for task that migrates SQL Server databases to Azure SQL Database Managed Instance online scenario.
type ValidateMigrationInputSqlServerSqlMISyncTaskInputArgs struct {
	// Azure Active Directory Application the DMS instance will use to connect to the target instance of Azure SQL Database Managed Instance and the Azure Storage Account
	AzureApp AzureActiveDirectoryAppInput `pulumi:"azureApp"`
	// Backup file share information for all selected databases.
	BackupFileShare FileSharePtrInput `pulumi:"backupFileShare"`
	// Databases to migrate
	SelectedDatabases MigrateSqlServerSqlMIDatabaseInputArrayInput `pulumi:"selectedDatabases"`
	// Connection information for source SQL Server
	SourceConnectionInfo SqlConnectionInfoInput `pulumi:"sourceConnectionInfo"`
	// Fully qualified resourceId of storage
	StorageResourceId pulumi.StringInput `pulumi:"storageResourceId"`
	// Connection information for Azure SQL Database Managed Instance
	TargetConnectionInfo MiSqlConnectionInfoInput `pulumi:"targetConnectionInfo"`
}

func (ValidateMigrationInputSqlServerSqlMISyncTaskInputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ValidateMigrationInputSqlServerSqlMISyncTaskInput)(nil)).Elem()
}

func (i ValidateMigrationInputSqlServerSqlMISyncTaskInputArgs) ToValidateMigrationInputSqlServerSqlMISyncTaskInputOutput() ValidateMigrationInputSqlServerSqlMISyncTaskInputOutput {
	return i.ToValidateMigrationInputSqlServerSqlMISyncTaskInputOutputWithContext(context.Background())
}

func (i ValidateMigrationInputSqlServerSqlMISyncTaskInputArgs) ToValidateMigrationInputSqlServerSqlMISyncTaskInputOutputWithContext(ctx context.Context) ValidateMigrationInputSqlServerSqlMISyncTaskInputOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ValidateMigrationInputSqlServerSqlMISyncTaskInputOutput)
}

func (i ValidateMigrationInputSqlServerSqlMISyncTaskInputArgs) ToValidateMigrationInputSqlServerSqlMISyncTaskInputPtrOutput() ValidateMigrationInputSqlServerSqlMISyncTaskInputPtrOutput {
	return i.ToValidateMigrationInputSqlServerSqlMISyncTaskInputPtrOutputWithContext(context.Background())
}

func (i ValidateMigrationInputSqlServerSqlMISyncTaskInputArgs) ToValidateMigrationInputSqlServerSqlMISyncTaskInputPtrOutputWithContext(ctx context.Context) ValidateMigrationInputSqlServerSqlMISyncTaskInputPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ValidateMigrationInputSqlServerSqlMISyncTaskInputOutput).ToValidateMigrationInputSqlServerSqlMISyncTaskInputPtrOutputWithContext(ctx)
}

// ValidateMigrationInputSqlServerSqlMISyncTaskInputPtrInput is an input type that accepts ValidateMigrationInputSqlServerSqlMISyncTaskInputArgs, ValidateMigrationInputSqlServerSqlMISyncTaskInputPtr and ValidateMigrationInputSqlServerSqlMISyncTaskInputPtrOutput values.
// You can construct a concrete instance of `ValidateMigrationInputSqlServerSqlMISyncTaskInputPtrInput` via:
//
//          ValidateMigrationInputSqlServerSqlMISyncTaskInputArgs{...}
//
//  or:
//
//          nil
type ValidateMigrationInputSqlServerSqlMISyncTaskInputPtrInput interface {
	pulumi.Input

	ToValidateMigrationInputSqlServerSqlMISyncTaskInputPtrOutput() ValidateMigrationInputSqlServerSqlMISyncTaskInputPtrOutput
	ToValidateMigrationInputSqlServerSqlMISyncTaskInputPtrOutputWithContext(context.Context) ValidateMigrationInputSqlServerSqlMISyncTaskInputPtrOutput
}

type validateMigrationInputSqlServerSqlMISyncTaskInputPtrType ValidateMigrationInputSqlServerSqlMISyncTaskInputArgs

func ValidateMigrationInputSqlServerSqlMISyncTaskInputPtr(v *ValidateMigrationInputSqlServerSqlMISyncTaskInputArgs) ValidateMigrationInputSqlServerSqlMISyncTaskInputPtrInput {
	return (*validateMigrationInputSqlServerSqlMISyncTaskInputPtrType)(v)
}

func (*validateMigrationInputSqlServerSqlMISyncTaskInputPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ValidateMigrationInputSqlServerSqlMISyncTaskInput)(nil)).Elem()
}

func (i *validateMigrationInputSqlServerSqlMISyncTaskInputPtrType) ToValidateMigrationInputSqlServerSqlMISyncTaskInputPtrOutput() ValidateMigrationInputSqlServerSqlMISyncTaskInputPtrOutput {
	return i.ToValidateMigrationInputSqlServerSqlMISyncTaskInputPtrOutputWithContext(context.Background())
}

func (i *validateMigrationInputSqlServerSqlMISyncTaskInputPtrType) ToValidateMigrationInputSqlServerSqlMISyncTaskInputPtrOutputWithContext(ctx context.Context) ValidateMigrationInputSqlServerSqlMISyncTaskInputPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ValidateMigrationInputSqlServerSqlMISyncTaskInputPtrOutput)
}

// Input for task that migrates SQL Server databases to Azure SQL Database Managed Instance online scenario.
type ValidateMigrationInputSqlServerSqlMISyncTaskInputResponse struct {
	// Azure Active Directory Application the DMS instance will use to connect to the target instance of Azure SQL Database Managed Instance and the Azure Storage Account
	AzureApp AzureActiveDirectoryAppResponse `pulumi:"azureApp"`
	// Backup file share information for all selected databases.
	BackupFileShare *FileShareResponse `pulumi:"backupFileShare"`
	// Databases to migrate
	SelectedDatabases []MigrateSqlServerSqlMIDatabaseInputResponse `pulumi:"selectedDatabases"`
	// Connection information for source SQL Server
	SourceConnectionInfo SqlConnectionInfoResponse `pulumi:"sourceConnectionInfo"`
	// Fully qualified resourceId of storage
	StorageResourceId string `pulumi:"storageResourceId"`
	// Connection information for Azure SQL Database Managed Instance
	TargetConnectionInfo MiSqlConnectionInfoResponse `pulumi:"targetConnectionInfo"`
}

// Input for task that migrates SQL Server databases to Azure SQL Database Managed Instance online scenario.
type ValidateMigrationInputSqlServerSqlMISyncTaskInputResponseOutput struct{ *pulumi.OutputState }

func (ValidateMigrationInputSqlServerSqlMISyncTaskInputResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ValidateMigrationInputSqlServerSqlMISyncTaskInputResponse)(nil)).Elem()
}

func (o ValidateMigrationInputSqlServerSqlMISyncTaskInputResponseOutput) ToValidateMigrationInputSqlServerSqlMISyncTaskInputResponseOutput() ValidateMigrationInputSqlServerSqlMISyncTaskInputResponseOutput {
	return o
}

func (o ValidateMigrationInputSqlServerSqlMISyncTaskInputResponseOutput) ToValidateMigrationInputSqlServerSqlMISyncTaskInputResponseOutputWithContext(ctx context.Context) ValidateMigrationInputSqlServerSqlMISyncTaskInputResponseOutput {
	return o
}

func (o ValidateMigrationInputSqlServerSqlMISyncTaskInputResponseOutput) ToValidateMigrationInputSqlServerSqlMISyncTaskInputResponsePtrOutput() ValidateMigrationInputSqlServerSqlMISyncTaskInputResponsePtrOutput {
	return o.ToValidateMigrationInputSqlServerSqlMISyncTaskInputResponsePtrOutputWithContext(context.Background())
}

func (o ValidateMigrationInputSqlServerSqlMISyncTaskInputResponseOutput) ToValidateMigrationInputSqlServerSqlMISyncTaskInputResponsePtrOutputWithContext(ctx context.Context) ValidateMigrationInputSqlServerSqlMISyncTaskInputResponsePtrOutput {
	return o.ApplyT(func(v ValidateMigrationInputSqlServerSqlMISyncTaskInputResponse) *ValidateMigrationInputSqlServerSqlMISyncTaskInputResponse {
		return &v
	}).(ValidateMigrationInputSqlServerSqlMISyncTaskInputResponsePtrOutput)
}

// Azure Active Directory Application the DMS instance will use to connect to the target instance of Azure SQL Database Managed Instance and the Azure Storage Account
func (o ValidateMigrationInputSqlServerSqlMISyncTaskInputResponseOutput) AzureApp() AzureActiveDirectoryAppResponseOutput {
	return o.ApplyT(func(v ValidateMigrationInputSqlServerSqlMISyncTaskInputResponse) AzureActiveDirectoryAppResponse {
		return v.AzureApp
	}).(AzureActiveDirectoryAppResponseOutput)
}

// Backup file share information for all selected databases.
func (o ValidateMigrationInputSqlServerSqlMISyncTaskInputResponseOutput) BackupFileShare() FileShareResponsePtrOutput {
	return o.ApplyT(func(v ValidateMigrationInputSqlServerSqlMISyncTaskInputResponse) *FileShareResponse {
		return v.BackupFileShare
	}).(FileShareResponsePtrOutput)
}

// Databases to migrate
func (o ValidateMigrationInputSqlServerSqlMISyncTaskInputResponseOutput) SelectedDatabases() MigrateSqlServerSqlMIDatabaseInputResponseArrayOutput {
	return o.ApplyT(func(v ValidateMigrationInputSqlServerSqlMISyncTaskInputResponse) []MigrateSqlServerSqlMIDatabaseInputResponse {
		return v.SelectedDatabases
	}).(MigrateSqlServerSqlMIDatabaseInputResponseArrayOutput)
}

// Connection information for source SQL Server
func (o ValidateMigrationInputSqlServerSqlMISyncTaskInputResponseOutput) SourceConnectionInfo() SqlConnectionInfoResponseOutput {
	return o.ApplyT(func(v ValidateMigrationInputSqlServerSqlMISyncTaskInputResponse) SqlConnectionInfoResponse {
		return v.SourceConnectionInfo
	}).(SqlConnectionInfoResponseOutput)
}

// Fully qualified resourceId of storage
func (o ValidateMigrationInputSqlServerSqlMISyncTaskInputResponseOutput) StorageResourceId() pulumi.StringOutput {
	return o.ApplyT(func(v ValidateMigrationInputSqlServerSqlMISyncTaskInputResponse) string { return v.StorageResourceId }).(pulumi.StringOutput)
}

// Connection information for Azure SQL Database Managed Instance
func (o ValidateMigrationInputSqlServerSqlMISyncTaskInputResponseOutput) TargetConnectionInfo() MiSqlConnectionInfoResponseOutput {
	return o.ApplyT(func(v ValidateMigrationInputSqlServerSqlMISyncTaskInputResponse) MiSqlConnectionInfoResponse {
		return v.TargetConnectionInfo
	}).(MiSqlConnectionInfoResponseOutput)
}

type ValidateMigrationInputSqlServerSqlMISyncTaskInputResponsePtrOutput struct{ *pulumi.OutputState }

func (ValidateMigrationInputSqlServerSqlMISyncTaskInputResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ValidateMigrationInputSqlServerSqlMISyncTaskInputResponse)(nil)).Elem()
}

func (o ValidateMigrationInputSqlServerSqlMISyncTaskInputResponsePtrOutput) ToValidateMigrationInputSqlServerSqlMISyncTaskInputResponsePtrOutput() ValidateMigrationInputSqlServerSqlMISyncTaskInputResponsePtrOutput {
	return o
}

func (o ValidateMigrationInputSqlServerSqlMISyncTaskInputResponsePtrOutput) ToValidateMigrationInputSqlServerSqlMISyncTaskInputResponsePtrOutputWithContext(ctx context.Context) ValidateMigrationInputSqlServerSqlMISyncTaskInputResponsePtrOutput {
	return o
}

func (o ValidateMigrationInputSqlServerSqlMISyncTaskInputResponsePtrOutput) Elem() ValidateMigrationInputSqlServerSqlMISyncTaskInputResponseOutput {
	return o.ApplyT(func(v *ValidateMigrationInputSqlServerSqlMISyncTaskInputResponse) ValidateMigrationInputSqlServerSqlMISyncTaskInputResponse {
		return *v
	}).(ValidateMigrationInputSqlServerSqlMISyncTaskInputResponseOutput)
}

// Azure Active Directory Application the DMS instance will use to connect to the target instance of Azure SQL Database Managed Instance and the Azure Storage Account
func (o ValidateMigrationInputSqlServerSqlMISyncTaskInputResponsePtrOutput) AzureApp() AzureActiveDirectoryAppResponsePtrOutput {
	return o.ApplyT(func(v *ValidateMigrationInputSqlServerSqlMISyncTaskInputResponse) *AzureActiveDirectoryAppResponse {
		if v == nil {
			return nil
		}
		return &v.AzureApp
	}).(AzureActiveDirectoryAppResponsePtrOutput)
}

// Backup file share information for all selected databases.
func (o ValidateMigrationInputSqlServerSqlMISyncTaskInputResponsePtrOutput) BackupFileShare() FileShareResponsePtrOutput {
	return o.ApplyT(func(v *ValidateMigrationInputSqlServerSqlMISyncTaskInputResponse) *FileShareResponse {
		if v == nil {
			return nil
		}
		return v.BackupFileShare
	}).(FileShareResponsePtrOutput)
}

// Databases to migrate
func (o ValidateMigrationInputSqlServerSqlMISyncTaskInputResponsePtrOutput) SelectedDatabases() MigrateSqlServerSqlMIDatabaseInputResponseArrayOutput {
	return o.ApplyT(func(v *ValidateMigrationInputSqlServerSqlMISyncTaskInputResponse) []MigrateSqlServerSqlMIDatabaseInputResponse {
		if v == nil {
			return nil
		}
		return v.SelectedDatabases
	}).(MigrateSqlServerSqlMIDatabaseInputResponseArrayOutput)
}

// Connection information for source SQL Server
func (o ValidateMigrationInputSqlServerSqlMISyncTaskInputResponsePtrOutput) SourceConnectionInfo() SqlConnectionInfoResponsePtrOutput {
	return o.ApplyT(func(v *ValidateMigrationInputSqlServerSqlMISyncTaskInputResponse) *SqlConnectionInfoResponse {
		if v == nil {
			return nil
		}
		return &v.SourceConnectionInfo
	}).(SqlConnectionInfoResponsePtrOutput)
}

// Fully qualified resourceId of storage
func (o ValidateMigrationInputSqlServerSqlMISyncTaskInputResponsePtrOutput) StorageResourceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ValidateMigrationInputSqlServerSqlMISyncTaskInputResponse) *string {
		if v == nil {
			return nil
		}
		return &v.StorageResourceId
	}).(pulumi.StringPtrOutput)
}

// Connection information for Azure SQL Database Managed Instance
func (o ValidateMigrationInputSqlServerSqlMISyncTaskInputResponsePtrOutput) TargetConnectionInfo() MiSqlConnectionInfoResponsePtrOutput {
	return o.ApplyT(func(v *ValidateMigrationInputSqlServerSqlMISyncTaskInputResponse) *MiSqlConnectionInfoResponse {
		if v == nil {
			return nil
		}
		return &v.TargetConnectionInfo
	}).(MiSqlConnectionInfoResponsePtrOutput)
}

// Output for task that validates migration input for Azure SQL Database Managed Instance online migration
type ValidateMigrationInputSqlServerSqlMISyncTaskOutputResponse struct {
	// Database identifier
	Id string `pulumi:"id"`
	// Name of database
	Name string `pulumi:"name"`
	// Errors associated with a selected database object
	ValidationErrors []ReportableExceptionResponse `pulumi:"validationErrors"`
}

// Output for task that validates migration input for Azure SQL Database Managed Instance online migration
type ValidateMigrationInputSqlServerSqlMISyncTaskOutputResponseOutput struct{ *pulumi.OutputState }

func (ValidateMigrationInputSqlServerSqlMISyncTaskOutputResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ValidateMigrationInputSqlServerSqlMISyncTaskOutputResponse)(nil)).Elem()
}

func (o ValidateMigrationInputSqlServerSqlMISyncTaskOutputResponseOutput) ToValidateMigrationInputSqlServerSqlMISyncTaskOutputResponseOutput() ValidateMigrationInputSqlServerSqlMISyncTaskOutputResponseOutput {
	return o
}

func (o ValidateMigrationInputSqlServerSqlMISyncTaskOutputResponseOutput) ToValidateMigrationInputSqlServerSqlMISyncTaskOutputResponseOutputWithContext(ctx context.Context) ValidateMigrationInputSqlServerSqlMISyncTaskOutputResponseOutput {
	return o
}

// Database identifier
func (o ValidateMigrationInputSqlServerSqlMISyncTaskOutputResponseOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v ValidateMigrationInputSqlServerSqlMISyncTaskOutputResponse) string { return v.Id }).(pulumi.StringOutput)
}

// Name of database
func (o ValidateMigrationInputSqlServerSqlMISyncTaskOutputResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ValidateMigrationInputSqlServerSqlMISyncTaskOutputResponse) string { return v.Name }).(pulumi.StringOutput)
}

// Errors associated with a selected database object
func (o ValidateMigrationInputSqlServerSqlMISyncTaskOutputResponseOutput) ValidationErrors() ReportableExceptionResponseArrayOutput {
	return o.ApplyT(func(v ValidateMigrationInputSqlServerSqlMISyncTaskOutputResponse) []ReportableExceptionResponse {
		return v.ValidationErrors
	}).(ReportableExceptionResponseArrayOutput)
}

type ValidateMigrationInputSqlServerSqlMISyncTaskOutputResponseArrayOutput struct{ *pulumi.OutputState }

func (ValidateMigrationInputSqlServerSqlMISyncTaskOutputResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ValidateMigrationInputSqlServerSqlMISyncTaskOutputResponse)(nil)).Elem()
}

func (o ValidateMigrationInputSqlServerSqlMISyncTaskOutputResponseArrayOutput) ToValidateMigrationInputSqlServerSqlMISyncTaskOutputResponseArrayOutput() ValidateMigrationInputSqlServerSqlMISyncTaskOutputResponseArrayOutput {
	return o
}

func (o ValidateMigrationInputSqlServerSqlMISyncTaskOutputResponseArrayOutput) ToValidateMigrationInputSqlServerSqlMISyncTaskOutputResponseArrayOutputWithContext(ctx context.Context) ValidateMigrationInputSqlServerSqlMISyncTaskOutputResponseArrayOutput {
	return o
}

func (o ValidateMigrationInputSqlServerSqlMISyncTaskOutputResponseArrayOutput) Index(i pulumi.IntInput) ValidateMigrationInputSqlServerSqlMISyncTaskOutputResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ValidateMigrationInputSqlServerSqlMISyncTaskOutputResponse {
		return vs[0].([]ValidateMigrationInputSqlServerSqlMISyncTaskOutputResponse)[vs[1].(int)]
	}).(ValidateMigrationInputSqlServerSqlMISyncTaskOutputResponseOutput)
}

// Properties for task that validates migration input for SQL to Azure SQL Database Managed Instance sync scenario
type ValidateMigrationInputSqlServerSqlMISyncTaskProperties struct {
	// Key value pairs of client data to attach meta data information to task
	ClientData map[string]string `pulumi:"clientData"`
	// Task input
	Input *ValidateMigrationInputSqlServerSqlMISyncTaskInput `pulumi:"input"`
	// Task type.
	TaskType string `pulumi:"taskType"`
}

// ValidateMigrationInputSqlServerSqlMISyncTaskPropertiesInput is an input type that accepts ValidateMigrationInputSqlServerSqlMISyncTaskPropertiesArgs and ValidateMigrationInputSqlServerSqlMISyncTaskPropertiesOutput values.
// You can construct a concrete instance of `ValidateMigrationInputSqlServerSqlMISyncTaskPropertiesInput` via:
//
//          ValidateMigrationInputSqlServerSqlMISyncTaskPropertiesArgs{...}
type ValidateMigrationInputSqlServerSqlMISyncTaskPropertiesInput interface {
	pulumi.Input

	ToValidateMigrationInputSqlServerSqlMISyncTaskPropertiesOutput() ValidateMigrationInputSqlServerSqlMISyncTaskPropertiesOutput
	ToValidateMigrationInputSqlServerSqlMISyncTaskPropertiesOutputWithContext(context.Context) ValidateMigrationInputSqlServerSqlMISyncTaskPropertiesOutput
}

// Properties for task that validates migration input for SQL to Azure SQL Database Managed Instance sync scenario
type ValidateMigrationInputSqlServerSqlMISyncTaskPropertiesArgs struct {
	// Key value pairs of client data to attach meta data information to task
	ClientData pulumi.StringMapInput `pulumi:"clientData"`
	// Task input
	Input ValidateMigrationInputSqlServerSqlMISyncTaskInputPtrInput `pulumi:"input"`
	// Task type.
	TaskType pulumi.StringInput `pulumi:"taskType"`
}

func (ValidateMigrationInputSqlServerSqlMISyncTaskPropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ValidateMigrationInputSqlServerSqlMISyncTaskProperties)(nil)).Elem()
}

func (i ValidateMigrationInputSqlServerSqlMISyncTaskPropertiesArgs) ToValidateMigrationInputSqlServerSqlMISyncTaskPropertiesOutput() ValidateMigrationInputSqlServerSqlMISyncTaskPropertiesOutput {
	return i.ToValidateMigrationInputSqlServerSqlMISyncTaskPropertiesOutputWithContext(context.Background())
}

func (i ValidateMigrationInputSqlServerSqlMISyncTaskPropertiesArgs) ToValidateMigrationInputSqlServerSqlMISyncTaskPropertiesOutputWithContext(ctx context.Context) ValidateMigrationInputSqlServerSqlMISyncTaskPropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ValidateMigrationInputSqlServerSqlMISyncTaskPropertiesOutput)
}

// Properties for task that validates migration input for SQL to Azure SQL Database Managed Instance sync scenario
type ValidateMigrationInputSqlServerSqlMISyncTaskPropertiesResponse struct {
	// Key value pairs of client data to attach meta data information to task
	ClientData map[string]string `pulumi:"clientData"`
	// Array of command properties.
	Commands []interface{} `pulumi:"commands"`
	// Array of errors. This is ignored if submitted.
	Errors []ODataErrorResponse `pulumi:"errors"`
	// Task input
	Input *ValidateMigrationInputSqlServerSqlMISyncTaskInputResponse `pulumi:"input"`
	// Task output. This is ignored if submitted.
	Output []ValidateMigrationInputSqlServerSqlMISyncTaskOutputResponse `pulumi:"output"`
	// The state of the task. This is ignored if submitted.
	State string `pulumi:"state"`
	// Task type.
	TaskType string `pulumi:"taskType"`
}

// Properties for task that validates migration input for SQL to Azure SQL Database Managed Instance sync scenario
type ValidateMigrationInputSqlServerSqlMISyncTaskPropertiesResponseOutput struct{ *pulumi.OutputState }

func (ValidateMigrationInputSqlServerSqlMISyncTaskPropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ValidateMigrationInputSqlServerSqlMISyncTaskPropertiesResponse)(nil)).Elem()
}

func (o ValidateMigrationInputSqlServerSqlMISyncTaskPropertiesResponseOutput) ToValidateMigrationInputSqlServerSqlMISyncTaskPropertiesResponseOutput() ValidateMigrationInputSqlServerSqlMISyncTaskPropertiesResponseOutput {
	return o
}

func (o ValidateMigrationInputSqlServerSqlMISyncTaskPropertiesResponseOutput) ToValidateMigrationInputSqlServerSqlMISyncTaskPropertiesResponseOutputWithContext(ctx context.Context) ValidateMigrationInputSqlServerSqlMISyncTaskPropertiesResponseOutput {
	return o
}

// Key value pairs of client data to attach meta data information to task
func (o ValidateMigrationInputSqlServerSqlMISyncTaskPropertiesResponseOutput) ClientData() pulumi.StringMapOutput {
	return o.ApplyT(func(v ValidateMigrationInputSqlServerSqlMISyncTaskPropertiesResponse) map[string]string {
		return v.ClientData
	}).(pulumi.StringMapOutput)
}

// Array of command properties.
func (o ValidateMigrationInputSqlServerSqlMISyncTaskPropertiesResponseOutput) Commands() pulumi.ArrayOutput {
	return o.ApplyT(func(v ValidateMigrationInputSqlServerSqlMISyncTaskPropertiesResponse) []interface{} {
		return v.Commands
	}).(pulumi.ArrayOutput)
}

// Array of errors. This is ignored if submitted.
func (o ValidateMigrationInputSqlServerSqlMISyncTaskPropertiesResponseOutput) Errors() ODataErrorResponseArrayOutput {
	return o.ApplyT(func(v ValidateMigrationInputSqlServerSqlMISyncTaskPropertiesResponse) []ODataErrorResponse {
		return v.Errors
	}).(ODataErrorResponseArrayOutput)
}

// Task input
func (o ValidateMigrationInputSqlServerSqlMISyncTaskPropertiesResponseOutput) Input() ValidateMigrationInputSqlServerSqlMISyncTaskInputResponsePtrOutput {
	return o.ApplyT(func(v ValidateMigrationInputSqlServerSqlMISyncTaskPropertiesResponse) *ValidateMigrationInputSqlServerSqlMISyncTaskInputResponse {
		return v.Input
	}).(ValidateMigrationInputSqlServerSqlMISyncTaskInputResponsePtrOutput)
}

// Task output. This is ignored if submitted.
func (o ValidateMigrationInputSqlServerSqlMISyncTaskPropertiesResponseOutput) Output() ValidateMigrationInputSqlServerSqlMISyncTaskOutputResponseArrayOutput {
	return o.ApplyT(func(v ValidateMigrationInputSqlServerSqlMISyncTaskPropertiesResponse) []ValidateMigrationInputSqlServerSqlMISyncTaskOutputResponse {
		return v.Output
	}).(ValidateMigrationInputSqlServerSqlMISyncTaskOutputResponseArrayOutput)
}

// The state of the task. This is ignored if submitted.
func (o ValidateMigrationInputSqlServerSqlMISyncTaskPropertiesResponseOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v ValidateMigrationInputSqlServerSqlMISyncTaskPropertiesResponse) string { return v.State }).(pulumi.StringOutput)
}

// Task type.
func (o ValidateMigrationInputSqlServerSqlMISyncTaskPropertiesResponseOutput) TaskType() pulumi.StringOutput {
	return o.ApplyT(func(v ValidateMigrationInputSqlServerSqlMISyncTaskPropertiesResponse) string { return v.TaskType }).(pulumi.StringOutput)
}

// Input for task that validates migration input for SQL to Azure SQL Managed Instance
type ValidateMigrationInputSqlServerSqlMITaskInput struct {
	// SAS URI of Azure Storage Account Container to be used for storing backup files.
	BackupBlobShare BlobShare `pulumi:"backupBlobShare"`
	// Backup file share information for all selected databases.
	BackupFileShare *FileShare `pulumi:"backupFileShare"`
	// Backup Mode to specify whether to use existing backup or create new backup.
	BackupMode *string `pulumi:"backupMode"`
	// Databases to migrate
	SelectedDatabases []MigrateSqlServerSqlMIDatabaseInput `pulumi:"selectedDatabases"`
	// Logins to migrate
	SelectedLogins []string `pulumi:"selectedLogins"`
	// Information for connecting to source
	SourceConnectionInfo SqlConnectionInfo `pulumi:"sourceConnectionInfo"`
	// Information for connecting to target
	TargetConnectionInfo SqlConnectionInfo `pulumi:"targetConnectionInfo"`
}

// ValidateMigrationInputSqlServerSqlMITaskInputInput is an input type that accepts ValidateMigrationInputSqlServerSqlMITaskInputArgs and ValidateMigrationInputSqlServerSqlMITaskInputOutput values.
// You can construct a concrete instance of `ValidateMigrationInputSqlServerSqlMITaskInputInput` via:
//
//          ValidateMigrationInputSqlServerSqlMITaskInputArgs{...}
type ValidateMigrationInputSqlServerSqlMITaskInputInput interface {
	pulumi.Input

	ToValidateMigrationInputSqlServerSqlMITaskInputOutput() ValidateMigrationInputSqlServerSqlMITaskInputOutput
	ToValidateMigrationInputSqlServerSqlMITaskInputOutputWithContext(context.Context) ValidateMigrationInputSqlServerSqlMITaskInputOutput
}

// Input for task that validates migration input for SQL to Azure SQL Managed Instance
type ValidateMigrationInputSqlServerSqlMITaskInputArgs struct {
	// SAS URI of Azure Storage Account Container to be used for storing backup files.
	BackupBlobShare BlobShareInput `pulumi:"backupBlobShare"`
	// Backup file share information for all selected databases.
	BackupFileShare FileSharePtrInput `pulumi:"backupFileShare"`
	// Backup Mode to specify whether to use existing backup or create new backup.
	BackupMode pulumi.StringPtrInput `pulumi:"backupMode"`
	// Databases to migrate
	SelectedDatabases MigrateSqlServerSqlMIDatabaseInputArrayInput `pulumi:"selectedDatabases"`
	// Logins to migrate
	SelectedLogins pulumi.StringArrayInput `pulumi:"selectedLogins"`
	// Information for connecting to source
	SourceConnectionInfo SqlConnectionInfoInput `pulumi:"sourceConnectionInfo"`
	// Information for connecting to target
	TargetConnectionInfo SqlConnectionInfoInput `pulumi:"targetConnectionInfo"`
}

func (ValidateMigrationInputSqlServerSqlMITaskInputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ValidateMigrationInputSqlServerSqlMITaskInput)(nil)).Elem()
}

func (i ValidateMigrationInputSqlServerSqlMITaskInputArgs) ToValidateMigrationInputSqlServerSqlMITaskInputOutput() ValidateMigrationInputSqlServerSqlMITaskInputOutput {
	return i.ToValidateMigrationInputSqlServerSqlMITaskInputOutputWithContext(context.Background())
}

func (i ValidateMigrationInputSqlServerSqlMITaskInputArgs) ToValidateMigrationInputSqlServerSqlMITaskInputOutputWithContext(ctx context.Context) ValidateMigrationInputSqlServerSqlMITaskInputOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ValidateMigrationInputSqlServerSqlMITaskInputOutput)
}

func (i ValidateMigrationInputSqlServerSqlMITaskInputArgs) ToValidateMigrationInputSqlServerSqlMITaskInputPtrOutput() ValidateMigrationInputSqlServerSqlMITaskInputPtrOutput {
	return i.ToValidateMigrationInputSqlServerSqlMITaskInputPtrOutputWithContext(context.Background())
}

func (i ValidateMigrationInputSqlServerSqlMITaskInputArgs) ToValidateMigrationInputSqlServerSqlMITaskInputPtrOutputWithContext(ctx context.Context) ValidateMigrationInputSqlServerSqlMITaskInputPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ValidateMigrationInputSqlServerSqlMITaskInputOutput).ToValidateMigrationInputSqlServerSqlMITaskInputPtrOutputWithContext(ctx)
}

// ValidateMigrationInputSqlServerSqlMITaskInputPtrInput is an input type that accepts ValidateMigrationInputSqlServerSqlMITaskInputArgs, ValidateMigrationInputSqlServerSqlMITaskInputPtr and ValidateMigrationInputSqlServerSqlMITaskInputPtrOutput values.
// You can construct a concrete instance of `ValidateMigrationInputSqlServerSqlMITaskInputPtrInput` via:
//
//          ValidateMigrationInputSqlServerSqlMITaskInputArgs{...}
//
//  or:
//
//          nil
type ValidateMigrationInputSqlServerSqlMITaskInputPtrInput interface {
	pulumi.Input

	ToValidateMigrationInputSqlServerSqlMITaskInputPtrOutput() ValidateMigrationInputSqlServerSqlMITaskInputPtrOutput
	ToValidateMigrationInputSqlServerSqlMITaskInputPtrOutputWithContext(context.Context) ValidateMigrationInputSqlServerSqlMITaskInputPtrOutput
}

type validateMigrationInputSqlServerSqlMITaskInputPtrType ValidateMigrationInputSqlServerSqlMITaskInputArgs

func ValidateMigrationInputSqlServerSqlMITaskInputPtr(v *ValidateMigrationInputSqlServerSqlMITaskInputArgs) ValidateMigrationInputSqlServerSqlMITaskInputPtrInput {
	return (*validateMigrationInputSqlServerSqlMITaskInputPtrType)(v)
}

func (*validateMigrationInputSqlServerSqlMITaskInputPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ValidateMigrationInputSqlServerSqlMITaskInput)(nil)).Elem()
}

func (i *validateMigrationInputSqlServerSqlMITaskInputPtrType) ToValidateMigrationInputSqlServerSqlMITaskInputPtrOutput() ValidateMigrationInputSqlServerSqlMITaskInputPtrOutput {
	return i.ToValidateMigrationInputSqlServerSqlMITaskInputPtrOutputWithContext(context.Background())
}

func (i *validateMigrationInputSqlServerSqlMITaskInputPtrType) ToValidateMigrationInputSqlServerSqlMITaskInputPtrOutputWithContext(ctx context.Context) ValidateMigrationInputSqlServerSqlMITaskInputPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ValidateMigrationInputSqlServerSqlMITaskInputPtrOutput)
}

// Input for task that validates migration input for SQL to Azure SQL Managed Instance
type ValidateMigrationInputSqlServerSqlMITaskInputResponse struct {
	// SAS URI of Azure Storage Account Container to be used for storing backup files.
	BackupBlobShare BlobShareResponse `pulumi:"backupBlobShare"`
	// Backup file share information for all selected databases.
	BackupFileShare *FileShareResponse `pulumi:"backupFileShare"`
	// Backup Mode to specify whether to use existing backup or create new backup.
	BackupMode *string `pulumi:"backupMode"`
	// Databases to migrate
	SelectedDatabases []MigrateSqlServerSqlMIDatabaseInputResponse `pulumi:"selectedDatabases"`
	// Logins to migrate
	SelectedLogins []string `pulumi:"selectedLogins"`
	// Information for connecting to source
	SourceConnectionInfo SqlConnectionInfoResponse `pulumi:"sourceConnectionInfo"`
	// Information for connecting to target
	TargetConnectionInfo SqlConnectionInfoResponse `pulumi:"targetConnectionInfo"`
}

// Input for task that validates migration input for SQL to Azure SQL Managed Instance
type ValidateMigrationInputSqlServerSqlMITaskInputResponseOutput struct{ *pulumi.OutputState }

func (ValidateMigrationInputSqlServerSqlMITaskInputResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ValidateMigrationInputSqlServerSqlMITaskInputResponse)(nil)).Elem()
}

func (o ValidateMigrationInputSqlServerSqlMITaskInputResponseOutput) ToValidateMigrationInputSqlServerSqlMITaskInputResponseOutput() ValidateMigrationInputSqlServerSqlMITaskInputResponseOutput {
	return o
}

func (o ValidateMigrationInputSqlServerSqlMITaskInputResponseOutput) ToValidateMigrationInputSqlServerSqlMITaskInputResponseOutputWithContext(ctx context.Context) ValidateMigrationInputSqlServerSqlMITaskInputResponseOutput {
	return o
}

func (o ValidateMigrationInputSqlServerSqlMITaskInputResponseOutput) ToValidateMigrationInputSqlServerSqlMITaskInputResponsePtrOutput() ValidateMigrationInputSqlServerSqlMITaskInputResponsePtrOutput {
	return o.ToValidateMigrationInputSqlServerSqlMITaskInputResponsePtrOutputWithContext(context.Background())
}

func (o ValidateMigrationInputSqlServerSqlMITaskInputResponseOutput) ToValidateMigrationInputSqlServerSqlMITaskInputResponsePtrOutputWithContext(ctx context.Context) ValidateMigrationInputSqlServerSqlMITaskInputResponsePtrOutput {
	return o.ApplyT(func(v ValidateMigrationInputSqlServerSqlMITaskInputResponse) *ValidateMigrationInputSqlServerSqlMITaskInputResponse {
		return &v
	}).(ValidateMigrationInputSqlServerSqlMITaskInputResponsePtrOutput)
}

// SAS URI of Azure Storage Account Container to be used for storing backup files.
func (o ValidateMigrationInputSqlServerSqlMITaskInputResponseOutput) BackupBlobShare() BlobShareResponseOutput {
	return o.ApplyT(func(v ValidateMigrationInputSqlServerSqlMITaskInputResponse) BlobShareResponse {
		return v.BackupBlobShare
	}).(BlobShareResponseOutput)
}

// Backup file share information for all selected databases.
func (o ValidateMigrationInputSqlServerSqlMITaskInputResponseOutput) BackupFileShare() FileShareResponsePtrOutput {
	return o.ApplyT(func(v ValidateMigrationInputSqlServerSqlMITaskInputResponse) *FileShareResponse {
		return v.BackupFileShare
	}).(FileShareResponsePtrOutput)
}

// Backup Mode to specify whether to use existing backup or create new backup.
func (o ValidateMigrationInputSqlServerSqlMITaskInputResponseOutput) BackupMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ValidateMigrationInputSqlServerSqlMITaskInputResponse) *string { return v.BackupMode }).(pulumi.StringPtrOutput)
}

// Databases to migrate
func (o ValidateMigrationInputSqlServerSqlMITaskInputResponseOutput) SelectedDatabases() MigrateSqlServerSqlMIDatabaseInputResponseArrayOutput {
	return o.ApplyT(func(v ValidateMigrationInputSqlServerSqlMITaskInputResponse) []MigrateSqlServerSqlMIDatabaseInputResponse {
		return v.SelectedDatabases
	}).(MigrateSqlServerSqlMIDatabaseInputResponseArrayOutput)
}

// Logins to migrate
func (o ValidateMigrationInputSqlServerSqlMITaskInputResponseOutput) SelectedLogins() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ValidateMigrationInputSqlServerSqlMITaskInputResponse) []string { return v.SelectedLogins }).(pulumi.StringArrayOutput)
}

// Information for connecting to source
func (o ValidateMigrationInputSqlServerSqlMITaskInputResponseOutput) SourceConnectionInfo() SqlConnectionInfoResponseOutput {
	return o.ApplyT(func(v ValidateMigrationInputSqlServerSqlMITaskInputResponse) SqlConnectionInfoResponse {
		return v.SourceConnectionInfo
	}).(SqlConnectionInfoResponseOutput)
}

// Information for connecting to target
func (o ValidateMigrationInputSqlServerSqlMITaskInputResponseOutput) TargetConnectionInfo() SqlConnectionInfoResponseOutput {
	return o.ApplyT(func(v ValidateMigrationInputSqlServerSqlMITaskInputResponse) SqlConnectionInfoResponse {
		return v.TargetConnectionInfo
	}).(SqlConnectionInfoResponseOutput)
}

type ValidateMigrationInputSqlServerSqlMITaskInputResponsePtrOutput struct{ *pulumi.OutputState }

func (ValidateMigrationInputSqlServerSqlMITaskInputResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ValidateMigrationInputSqlServerSqlMITaskInputResponse)(nil)).Elem()
}

func (o ValidateMigrationInputSqlServerSqlMITaskInputResponsePtrOutput) ToValidateMigrationInputSqlServerSqlMITaskInputResponsePtrOutput() ValidateMigrationInputSqlServerSqlMITaskInputResponsePtrOutput {
	return o
}

func (o ValidateMigrationInputSqlServerSqlMITaskInputResponsePtrOutput) ToValidateMigrationInputSqlServerSqlMITaskInputResponsePtrOutputWithContext(ctx context.Context) ValidateMigrationInputSqlServerSqlMITaskInputResponsePtrOutput {
	return o
}

func (o ValidateMigrationInputSqlServerSqlMITaskInputResponsePtrOutput) Elem() ValidateMigrationInputSqlServerSqlMITaskInputResponseOutput {
	return o.ApplyT(func(v *ValidateMigrationInputSqlServerSqlMITaskInputResponse) ValidateMigrationInputSqlServerSqlMITaskInputResponse {
		return *v
	}).(ValidateMigrationInputSqlServerSqlMITaskInputResponseOutput)
}

// SAS URI of Azure Storage Account Container to be used for storing backup files.
func (o ValidateMigrationInputSqlServerSqlMITaskInputResponsePtrOutput) BackupBlobShare() BlobShareResponsePtrOutput {
	return o.ApplyT(func(v *ValidateMigrationInputSqlServerSqlMITaskInputResponse) *BlobShareResponse {
		if v == nil {
			return nil
		}
		return &v.BackupBlobShare
	}).(BlobShareResponsePtrOutput)
}

// Backup file share information for all selected databases.
func (o ValidateMigrationInputSqlServerSqlMITaskInputResponsePtrOutput) BackupFileShare() FileShareResponsePtrOutput {
	return o.ApplyT(func(v *ValidateMigrationInputSqlServerSqlMITaskInputResponse) *FileShareResponse {
		if v == nil {
			return nil
		}
		return v.BackupFileShare
	}).(FileShareResponsePtrOutput)
}

// Backup Mode to specify whether to use existing backup or create new backup.
func (o ValidateMigrationInputSqlServerSqlMITaskInputResponsePtrOutput) BackupMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ValidateMigrationInputSqlServerSqlMITaskInputResponse) *string {
		if v == nil {
			return nil
		}
		return v.BackupMode
	}).(pulumi.StringPtrOutput)
}

// Databases to migrate
func (o ValidateMigrationInputSqlServerSqlMITaskInputResponsePtrOutput) SelectedDatabases() MigrateSqlServerSqlMIDatabaseInputResponseArrayOutput {
	return o.ApplyT(func(v *ValidateMigrationInputSqlServerSqlMITaskInputResponse) []MigrateSqlServerSqlMIDatabaseInputResponse {
		if v == nil {
			return nil
		}
		return v.SelectedDatabases
	}).(MigrateSqlServerSqlMIDatabaseInputResponseArrayOutput)
}

// Logins to migrate
func (o ValidateMigrationInputSqlServerSqlMITaskInputResponsePtrOutput) SelectedLogins() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ValidateMigrationInputSqlServerSqlMITaskInputResponse) []string {
		if v == nil {
			return nil
		}
		return v.SelectedLogins
	}).(pulumi.StringArrayOutput)
}

// Information for connecting to source
func (o ValidateMigrationInputSqlServerSqlMITaskInputResponsePtrOutput) SourceConnectionInfo() SqlConnectionInfoResponsePtrOutput {
	return o.ApplyT(func(v *ValidateMigrationInputSqlServerSqlMITaskInputResponse) *SqlConnectionInfoResponse {
		if v == nil {
			return nil
		}
		return &v.SourceConnectionInfo
	}).(SqlConnectionInfoResponsePtrOutput)
}

// Information for connecting to target
func (o ValidateMigrationInputSqlServerSqlMITaskInputResponsePtrOutput) TargetConnectionInfo() SqlConnectionInfoResponsePtrOutput {
	return o.ApplyT(func(v *ValidateMigrationInputSqlServerSqlMITaskInputResponse) *SqlConnectionInfoResponse {
		if v == nil {
			return nil
		}
		return &v.TargetConnectionInfo
	}).(SqlConnectionInfoResponsePtrOutput)
}

// Output for task that validates migration input for SQL to Azure SQL Managed Instance migrations
type ValidateMigrationInputSqlServerSqlMITaskOutputResponse struct {
	// Errors associated with the BackupFolder path
	BackupFolderErrors []ReportableExceptionResponse `pulumi:"backupFolderErrors"`
	// Errors associated with backup share user name and password credentials
	BackupShareCredentialsErrors []ReportableExceptionResponse `pulumi:"backupShareCredentialsErrors"`
	// Errors associated with the storage account provided.
	BackupStorageAccountErrors []ReportableExceptionResponse `pulumi:"backupStorageAccountErrors"`
	// Information about backup files when existing backup mode is used.
	DatabaseBackupInfo *DatabaseBackupInfoResponse `pulumi:"databaseBackupInfo"`
	// Errors associated with existing backup files.
	ExistingBackupErrors []ReportableExceptionResponse `pulumi:"existingBackupErrors"`
	// Result identifier
	Id string `pulumi:"id"`
	// Name of database
	Name string `pulumi:"name"`
	// Errors associated with the RestoreDatabaseName
	RestoreDatabaseNameErrors []ReportableExceptionResponse `pulumi:"restoreDatabaseNameErrors"`
}

// Output for task that validates migration input for SQL to Azure SQL Managed Instance migrations
type ValidateMigrationInputSqlServerSqlMITaskOutputResponseOutput struct{ *pulumi.OutputState }

func (ValidateMigrationInputSqlServerSqlMITaskOutputResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ValidateMigrationInputSqlServerSqlMITaskOutputResponse)(nil)).Elem()
}

func (o ValidateMigrationInputSqlServerSqlMITaskOutputResponseOutput) ToValidateMigrationInputSqlServerSqlMITaskOutputResponseOutput() ValidateMigrationInputSqlServerSqlMITaskOutputResponseOutput {
	return o
}

func (o ValidateMigrationInputSqlServerSqlMITaskOutputResponseOutput) ToValidateMigrationInputSqlServerSqlMITaskOutputResponseOutputWithContext(ctx context.Context) ValidateMigrationInputSqlServerSqlMITaskOutputResponseOutput {
	return o
}

// Errors associated with the BackupFolder path
func (o ValidateMigrationInputSqlServerSqlMITaskOutputResponseOutput) BackupFolderErrors() ReportableExceptionResponseArrayOutput {
	return o.ApplyT(func(v ValidateMigrationInputSqlServerSqlMITaskOutputResponse) []ReportableExceptionResponse {
		return v.BackupFolderErrors
	}).(ReportableExceptionResponseArrayOutput)
}

// Errors associated with backup share user name and password credentials
func (o ValidateMigrationInputSqlServerSqlMITaskOutputResponseOutput) BackupShareCredentialsErrors() ReportableExceptionResponseArrayOutput {
	return o.ApplyT(func(v ValidateMigrationInputSqlServerSqlMITaskOutputResponse) []ReportableExceptionResponse {
		return v.BackupShareCredentialsErrors
	}).(ReportableExceptionResponseArrayOutput)
}

// Errors associated with the storage account provided.
func (o ValidateMigrationInputSqlServerSqlMITaskOutputResponseOutput) BackupStorageAccountErrors() ReportableExceptionResponseArrayOutput {
	return o.ApplyT(func(v ValidateMigrationInputSqlServerSqlMITaskOutputResponse) []ReportableExceptionResponse {
		return v.BackupStorageAccountErrors
	}).(ReportableExceptionResponseArrayOutput)
}

// Information about backup files when existing backup mode is used.
func (o ValidateMigrationInputSqlServerSqlMITaskOutputResponseOutput) DatabaseBackupInfo() DatabaseBackupInfoResponsePtrOutput {
	return o.ApplyT(func(v ValidateMigrationInputSqlServerSqlMITaskOutputResponse) *DatabaseBackupInfoResponse {
		return v.DatabaseBackupInfo
	}).(DatabaseBackupInfoResponsePtrOutput)
}

// Errors associated with existing backup files.
func (o ValidateMigrationInputSqlServerSqlMITaskOutputResponseOutput) ExistingBackupErrors() ReportableExceptionResponseArrayOutput {
	return o.ApplyT(func(v ValidateMigrationInputSqlServerSqlMITaskOutputResponse) []ReportableExceptionResponse {
		return v.ExistingBackupErrors
	}).(ReportableExceptionResponseArrayOutput)
}

// Result identifier
func (o ValidateMigrationInputSqlServerSqlMITaskOutputResponseOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v ValidateMigrationInputSqlServerSqlMITaskOutputResponse) string { return v.Id }).(pulumi.StringOutput)
}

// Name of database
func (o ValidateMigrationInputSqlServerSqlMITaskOutputResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ValidateMigrationInputSqlServerSqlMITaskOutputResponse) string { return v.Name }).(pulumi.StringOutput)
}

// Errors associated with the RestoreDatabaseName
func (o ValidateMigrationInputSqlServerSqlMITaskOutputResponseOutput) RestoreDatabaseNameErrors() ReportableExceptionResponseArrayOutput {
	return o.ApplyT(func(v ValidateMigrationInputSqlServerSqlMITaskOutputResponse) []ReportableExceptionResponse {
		return v.RestoreDatabaseNameErrors
	}).(ReportableExceptionResponseArrayOutput)
}

type ValidateMigrationInputSqlServerSqlMITaskOutputResponseArrayOutput struct{ *pulumi.OutputState }

func (ValidateMigrationInputSqlServerSqlMITaskOutputResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ValidateMigrationInputSqlServerSqlMITaskOutputResponse)(nil)).Elem()
}

func (o ValidateMigrationInputSqlServerSqlMITaskOutputResponseArrayOutput) ToValidateMigrationInputSqlServerSqlMITaskOutputResponseArrayOutput() ValidateMigrationInputSqlServerSqlMITaskOutputResponseArrayOutput {
	return o
}

func (o ValidateMigrationInputSqlServerSqlMITaskOutputResponseArrayOutput) ToValidateMigrationInputSqlServerSqlMITaskOutputResponseArrayOutputWithContext(ctx context.Context) ValidateMigrationInputSqlServerSqlMITaskOutputResponseArrayOutput {
	return o
}

func (o ValidateMigrationInputSqlServerSqlMITaskOutputResponseArrayOutput) Index(i pulumi.IntInput) ValidateMigrationInputSqlServerSqlMITaskOutputResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ValidateMigrationInputSqlServerSqlMITaskOutputResponse {
		return vs[0].([]ValidateMigrationInputSqlServerSqlMITaskOutputResponse)[vs[1].(int)]
	}).(ValidateMigrationInputSqlServerSqlMITaskOutputResponseOutput)
}

// Properties for task that validates migration input for SQL to Azure SQL Database Managed Instance
type ValidateMigrationInputSqlServerSqlMITaskProperties struct {
	// Key value pairs of client data to attach meta data information to task
	ClientData map[string]string `pulumi:"clientData"`
	// Task input
	Input *ValidateMigrationInputSqlServerSqlMITaskInput `pulumi:"input"`
	// Task type.
	TaskType string `pulumi:"taskType"`
}

// ValidateMigrationInputSqlServerSqlMITaskPropertiesInput is an input type that accepts ValidateMigrationInputSqlServerSqlMITaskPropertiesArgs and ValidateMigrationInputSqlServerSqlMITaskPropertiesOutput values.
// You can construct a concrete instance of `ValidateMigrationInputSqlServerSqlMITaskPropertiesInput` via:
//
//          ValidateMigrationInputSqlServerSqlMITaskPropertiesArgs{...}
type ValidateMigrationInputSqlServerSqlMITaskPropertiesInput interface {
	pulumi.Input

	ToValidateMigrationInputSqlServerSqlMITaskPropertiesOutput() ValidateMigrationInputSqlServerSqlMITaskPropertiesOutput
	ToValidateMigrationInputSqlServerSqlMITaskPropertiesOutputWithContext(context.Context) ValidateMigrationInputSqlServerSqlMITaskPropertiesOutput
}

// Properties for task that validates migration input for SQL to Azure SQL Database Managed Instance
type ValidateMigrationInputSqlServerSqlMITaskPropertiesArgs struct {
	// Key value pairs of client data to attach meta data information to task
	ClientData pulumi.StringMapInput `pulumi:"clientData"`
	// Task input
	Input ValidateMigrationInputSqlServerSqlMITaskInputPtrInput `pulumi:"input"`
	// Task type.
	TaskType pulumi.StringInput `pulumi:"taskType"`
}

func (ValidateMigrationInputSqlServerSqlMITaskPropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ValidateMigrationInputSqlServerSqlMITaskProperties)(nil)).Elem()
}

func (i ValidateMigrationInputSqlServerSqlMITaskPropertiesArgs) ToValidateMigrationInputSqlServerSqlMITaskPropertiesOutput() ValidateMigrationInputSqlServerSqlMITaskPropertiesOutput {
	return i.ToValidateMigrationInputSqlServerSqlMITaskPropertiesOutputWithContext(context.Background())
}

func (i ValidateMigrationInputSqlServerSqlMITaskPropertiesArgs) ToValidateMigrationInputSqlServerSqlMITaskPropertiesOutputWithContext(ctx context.Context) ValidateMigrationInputSqlServerSqlMITaskPropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ValidateMigrationInputSqlServerSqlMITaskPropertiesOutput)
}

// Properties for task that validates migration input for SQL to Azure SQL Database Managed Instance
type ValidateMigrationInputSqlServerSqlMITaskPropertiesResponse struct {
	// Key value pairs of client data to attach meta data information to task
	ClientData map[string]string `pulumi:"clientData"`
	// Array of command properties.
	Commands []interface{} `pulumi:"commands"`
	// Array of errors. This is ignored if submitted.
	Errors []ODataErrorResponse `pulumi:"errors"`
	// Task input
	Input *ValidateMigrationInputSqlServerSqlMITaskInputResponse `pulumi:"input"`
	// Task output. This is ignored if submitted.
	Output []ValidateMigrationInputSqlServerSqlMITaskOutputResponse `pulumi:"output"`
	// The state of the task. This is ignored if submitted.
	State string `pulumi:"state"`
	// Task type.
	TaskType string `pulumi:"taskType"`
}

// Properties for task that validates migration input for SQL to Azure SQL Database Managed Instance
type ValidateMigrationInputSqlServerSqlMITaskPropertiesResponseOutput struct{ *pulumi.OutputState }

func (ValidateMigrationInputSqlServerSqlMITaskPropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ValidateMigrationInputSqlServerSqlMITaskPropertiesResponse)(nil)).Elem()
}

func (o ValidateMigrationInputSqlServerSqlMITaskPropertiesResponseOutput) ToValidateMigrationInputSqlServerSqlMITaskPropertiesResponseOutput() ValidateMigrationInputSqlServerSqlMITaskPropertiesResponseOutput {
	return o
}

func (o ValidateMigrationInputSqlServerSqlMITaskPropertiesResponseOutput) ToValidateMigrationInputSqlServerSqlMITaskPropertiesResponseOutputWithContext(ctx context.Context) ValidateMigrationInputSqlServerSqlMITaskPropertiesResponseOutput {
	return o
}

// Key value pairs of client data to attach meta data information to task
func (o ValidateMigrationInputSqlServerSqlMITaskPropertiesResponseOutput) ClientData() pulumi.StringMapOutput {
	return o.ApplyT(func(v ValidateMigrationInputSqlServerSqlMITaskPropertiesResponse) map[string]string {
		return v.ClientData
	}).(pulumi.StringMapOutput)
}

// Array of command properties.
func (o ValidateMigrationInputSqlServerSqlMITaskPropertiesResponseOutput) Commands() pulumi.ArrayOutput {
	return o.ApplyT(func(v ValidateMigrationInputSqlServerSqlMITaskPropertiesResponse) []interface{} { return v.Commands }).(pulumi.ArrayOutput)
}

// Array of errors. This is ignored if submitted.
func (o ValidateMigrationInputSqlServerSqlMITaskPropertiesResponseOutput) Errors() ODataErrorResponseArrayOutput {
	return o.ApplyT(func(v ValidateMigrationInputSqlServerSqlMITaskPropertiesResponse) []ODataErrorResponse {
		return v.Errors
	}).(ODataErrorResponseArrayOutput)
}

// Task input
func (o ValidateMigrationInputSqlServerSqlMITaskPropertiesResponseOutput) Input() ValidateMigrationInputSqlServerSqlMITaskInputResponsePtrOutput {
	return o.ApplyT(func(v ValidateMigrationInputSqlServerSqlMITaskPropertiesResponse) *ValidateMigrationInputSqlServerSqlMITaskInputResponse {
		return v.Input
	}).(ValidateMigrationInputSqlServerSqlMITaskInputResponsePtrOutput)
}

// Task output. This is ignored if submitted.
func (o ValidateMigrationInputSqlServerSqlMITaskPropertiesResponseOutput) Output() ValidateMigrationInputSqlServerSqlMITaskOutputResponseArrayOutput {
	return o.ApplyT(func(v ValidateMigrationInputSqlServerSqlMITaskPropertiesResponse) []ValidateMigrationInputSqlServerSqlMITaskOutputResponse {
		return v.Output
	}).(ValidateMigrationInputSqlServerSqlMITaskOutputResponseArrayOutput)
}

// The state of the task. This is ignored if submitted.
func (o ValidateMigrationInputSqlServerSqlMITaskPropertiesResponseOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v ValidateMigrationInputSqlServerSqlMITaskPropertiesResponse) string { return v.State }).(pulumi.StringOutput)
}

// Task type.
func (o ValidateMigrationInputSqlServerSqlMITaskPropertiesResponseOutput) TaskType() pulumi.StringOutput {
	return o.ApplyT(func(v ValidateMigrationInputSqlServerSqlMITaskPropertiesResponse) string { return v.TaskType }).(pulumi.StringOutput)
}

// Properties for the task that validates a migration between MongoDB data sources
type ValidateMongoDbTaskProperties struct {
	// Key value pairs of client data to attach meta data information to task
	ClientData map[string]string `pulumi:"clientData"`
	// Describes how a MongoDB data migration should be performed
	Input *MongoDbMigrationSettings `pulumi:"input"`
	// Task type.
	TaskType string `pulumi:"taskType"`
}

// ValidateMongoDbTaskPropertiesInput is an input type that accepts ValidateMongoDbTaskPropertiesArgs and ValidateMongoDbTaskPropertiesOutput values.
// You can construct a concrete instance of `ValidateMongoDbTaskPropertiesInput` via:
//
//          ValidateMongoDbTaskPropertiesArgs{...}
type ValidateMongoDbTaskPropertiesInput interface {
	pulumi.Input

	ToValidateMongoDbTaskPropertiesOutput() ValidateMongoDbTaskPropertiesOutput
	ToValidateMongoDbTaskPropertiesOutputWithContext(context.Context) ValidateMongoDbTaskPropertiesOutput
}

// Properties for the task that validates a migration between MongoDB data sources
type ValidateMongoDbTaskPropertiesArgs struct {
	// Key value pairs of client data to attach meta data information to task
	ClientData pulumi.StringMapInput `pulumi:"clientData"`
	// Describes how a MongoDB data migration should be performed
	Input MongoDbMigrationSettingsPtrInput `pulumi:"input"`
	// Task type.
	TaskType pulumi.StringInput `pulumi:"taskType"`
}

func (ValidateMongoDbTaskPropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ValidateMongoDbTaskProperties)(nil)).Elem()
}

func (i ValidateMongoDbTaskPropertiesArgs) ToValidateMongoDbTaskPropertiesOutput() ValidateMongoDbTaskPropertiesOutput {
	return i.ToValidateMongoDbTaskPropertiesOutputWithContext(context.Background())
}

func (i ValidateMongoDbTaskPropertiesArgs) ToValidateMongoDbTaskPropertiesOutputWithContext(ctx context.Context) ValidateMongoDbTaskPropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ValidateMongoDbTaskPropertiesOutput)
}

// Properties for the task that validates a migration between MongoDB data sources
type ValidateMongoDbTaskPropertiesResponse struct {
	// Key value pairs of client data to attach meta data information to task
	ClientData map[string]string `pulumi:"clientData"`
	// Array of command properties.
	Commands []interface{} `pulumi:"commands"`
	// Array of errors. This is ignored if submitted.
	Errors []ODataErrorResponse `pulumi:"errors"`
	// Describes how a MongoDB data migration should be performed
	Input *MongoDbMigrationSettingsResponse `pulumi:"input"`
	// An array containing a single MongoDbMigrationProgress object
	Output []MongoDbMigrationProgressResponse `pulumi:"output"`
	// The state of the task. This is ignored if submitted.
	State string `pulumi:"state"`
	// Task type.
	TaskType string `pulumi:"taskType"`
}

// Properties for the task that validates a migration between MongoDB data sources
type ValidateMongoDbTaskPropertiesResponseOutput struct{ *pulumi.OutputState }

func (ValidateMongoDbTaskPropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ValidateMongoDbTaskPropertiesResponse)(nil)).Elem()
}

func (o ValidateMongoDbTaskPropertiesResponseOutput) ToValidateMongoDbTaskPropertiesResponseOutput() ValidateMongoDbTaskPropertiesResponseOutput {
	return o
}

func (o ValidateMongoDbTaskPropertiesResponseOutput) ToValidateMongoDbTaskPropertiesResponseOutputWithContext(ctx context.Context) ValidateMongoDbTaskPropertiesResponseOutput {
	return o
}

// Key value pairs of client data to attach meta data information to task
func (o ValidateMongoDbTaskPropertiesResponseOutput) ClientData() pulumi.StringMapOutput {
	return o.ApplyT(func(v ValidateMongoDbTaskPropertiesResponse) map[string]string { return v.ClientData }).(pulumi.StringMapOutput)
}

// Array of command properties.
func (o ValidateMongoDbTaskPropertiesResponseOutput) Commands() pulumi.ArrayOutput {
	return o.ApplyT(func(v ValidateMongoDbTaskPropertiesResponse) []interface{} { return v.Commands }).(pulumi.ArrayOutput)
}

// Array of errors. This is ignored if submitted.
func (o ValidateMongoDbTaskPropertiesResponseOutput) Errors() ODataErrorResponseArrayOutput {
	return o.ApplyT(func(v ValidateMongoDbTaskPropertiesResponse) []ODataErrorResponse { return v.Errors }).(ODataErrorResponseArrayOutput)
}

// Describes how a MongoDB data migration should be performed
func (o ValidateMongoDbTaskPropertiesResponseOutput) Input() MongoDbMigrationSettingsResponsePtrOutput {
	return o.ApplyT(func(v ValidateMongoDbTaskPropertiesResponse) *MongoDbMigrationSettingsResponse { return v.Input }).(MongoDbMigrationSettingsResponsePtrOutput)
}

// An array containing a single MongoDbMigrationProgress object
func (o ValidateMongoDbTaskPropertiesResponseOutput) Output() MongoDbMigrationProgressResponseArrayOutput {
	return o.ApplyT(func(v ValidateMongoDbTaskPropertiesResponse) []MongoDbMigrationProgressResponse { return v.Output }).(MongoDbMigrationProgressResponseArrayOutput)
}

// The state of the task. This is ignored if submitted.
func (o ValidateMongoDbTaskPropertiesResponseOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v ValidateMongoDbTaskPropertiesResponse) string { return v.State }).(pulumi.StringOutput)
}

// Task type.
func (o ValidateMongoDbTaskPropertiesResponseOutput) TaskType() pulumi.StringOutput {
	return o.ApplyT(func(v ValidateMongoDbTaskPropertiesResponse) string { return v.TaskType }).(pulumi.StringOutput)
}

// Properties for the task that validates a migration for Oracle to Azure Database for PostgreSQL for online migrations
type ValidateOracleAzureDbForPostgreSqlSyncTaskProperties struct {
	// Key value pairs of client data to attach meta data information to task
	ClientData map[string]string `pulumi:"clientData"`
	// Input for the task that migrates Oracle databases to Azure Database for PostgreSQL for online migrations
	Input *MigrateOracleAzureDbPostgreSqlSyncTaskInput `pulumi:"input"`
	// Task type.
	TaskType string `pulumi:"taskType"`
}

// ValidateOracleAzureDbForPostgreSqlSyncTaskPropertiesInput is an input type that accepts ValidateOracleAzureDbForPostgreSqlSyncTaskPropertiesArgs and ValidateOracleAzureDbForPostgreSqlSyncTaskPropertiesOutput values.
// You can construct a concrete instance of `ValidateOracleAzureDbForPostgreSqlSyncTaskPropertiesInput` via:
//
//          ValidateOracleAzureDbForPostgreSqlSyncTaskPropertiesArgs{...}
type ValidateOracleAzureDbForPostgreSqlSyncTaskPropertiesInput interface {
	pulumi.Input

	ToValidateOracleAzureDbForPostgreSqlSyncTaskPropertiesOutput() ValidateOracleAzureDbForPostgreSqlSyncTaskPropertiesOutput
	ToValidateOracleAzureDbForPostgreSqlSyncTaskPropertiesOutputWithContext(context.Context) ValidateOracleAzureDbForPostgreSqlSyncTaskPropertiesOutput
}

// Properties for the task that validates a migration for Oracle to Azure Database for PostgreSQL for online migrations
type ValidateOracleAzureDbForPostgreSqlSyncTaskPropertiesArgs struct {
	// Key value pairs of client data to attach meta data information to task
	ClientData pulumi.StringMapInput `pulumi:"clientData"`
	// Input for the task that migrates Oracle databases to Azure Database for PostgreSQL for online migrations
	Input MigrateOracleAzureDbPostgreSqlSyncTaskInputPtrInput `pulumi:"input"`
	// Task type.
	TaskType pulumi.StringInput `pulumi:"taskType"`
}

func (ValidateOracleAzureDbForPostgreSqlSyncTaskPropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ValidateOracleAzureDbForPostgreSqlSyncTaskProperties)(nil)).Elem()
}

func (i ValidateOracleAzureDbForPostgreSqlSyncTaskPropertiesArgs) ToValidateOracleAzureDbForPostgreSqlSyncTaskPropertiesOutput() ValidateOracleAzureDbForPostgreSqlSyncTaskPropertiesOutput {
	return i.ToValidateOracleAzureDbForPostgreSqlSyncTaskPropertiesOutputWithContext(context.Background())
}

func (i ValidateOracleAzureDbForPostgreSqlSyncTaskPropertiesArgs) ToValidateOracleAzureDbForPostgreSqlSyncTaskPropertiesOutputWithContext(ctx context.Context) ValidateOracleAzureDbForPostgreSqlSyncTaskPropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ValidateOracleAzureDbForPostgreSqlSyncTaskPropertiesOutput)
}

// Properties for the task that validates a migration for Oracle to Azure Database for PostgreSQL for online migrations
type ValidateOracleAzureDbForPostgreSqlSyncTaskPropertiesResponse struct {
	// Key value pairs of client data to attach meta data information to task
	ClientData map[string]string `pulumi:"clientData"`
	// Array of command properties.
	Commands []interface{} `pulumi:"commands"`
	// Array of errors. This is ignored if submitted.
	Errors []ODataErrorResponse `pulumi:"errors"`
	// Input for the task that migrates Oracle databases to Azure Database for PostgreSQL for online migrations
	Input *MigrateOracleAzureDbPostgreSqlSyncTaskInputResponse `pulumi:"input"`
	// An array containing a single validation error response object
	Output []ValidateOracleAzureDbPostgreSqlSyncTaskOutputResponse `pulumi:"output"`
	// The state of the task. This is ignored if submitted.
	State string `pulumi:"state"`
	// Task type.
	TaskType string `pulumi:"taskType"`
}

// Properties for the task that validates a migration for Oracle to Azure Database for PostgreSQL for online migrations
type ValidateOracleAzureDbForPostgreSqlSyncTaskPropertiesResponseOutput struct{ *pulumi.OutputState }

func (ValidateOracleAzureDbForPostgreSqlSyncTaskPropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ValidateOracleAzureDbForPostgreSqlSyncTaskPropertiesResponse)(nil)).Elem()
}

func (o ValidateOracleAzureDbForPostgreSqlSyncTaskPropertiesResponseOutput) ToValidateOracleAzureDbForPostgreSqlSyncTaskPropertiesResponseOutput() ValidateOracleAzureDbForPostgreSqlSyncTaskPropertiesResponseOutput {
	return o
}

func (o ValidateOracleAzureDbForPostgreSqlSyncTaskPropertiesResponseOutput) ToValidateOracleAzureDbForPostgreSqlSyncTaskPropertiesResponseOutputWithContext(ctx context.Context) ValidateOracleAzureDbForPostgreSqlSyncTaskPropertiesResponseOutput {
	return o
}

// Key value pairs of client data to attach meta data information to task
func (o ValidateOracleAzureDbForPostgreSqlSyncTaskPropertiesResponseOutput) ClientData() pulumi.StringMapOutput {
	return o.ApplyT(func(v ValidateOracleAzureDbForPostgreSqlSyncTaskPropertiesResponse) map[string]string {
		return v.ClientData
	}).(pulumi.StringMapOutput)
}

// Array of command properties.
func (o ValidateOracleAzureDbForPostgreSqlSyncTaskPropertiesResponseOutput) Commands() pulumi.ArrayOutput {
	return o.ApplyT(func(v ValidateOracleAzureDbForPostgreSqlSyncTaskPropertiesResponse) []interface{} { return v.Commands }).(pulumi.ArrayOutput)
}

// Array of errors. This is ignored if submitted.
func (o ValidateOracleAzureDbForPostgreSqlSyncTaskPropertiesResponseOutput) Errors() ODataErrorResponseArrayOutput {
	return o.ApplyT(func(v ValidateOracleAzureDbForPostgreSqlSyncTaskPropertiesResponse) []ODataErrorResponse {
		return v.Errors
	}).(ODataErrorResponseArrayOutput)
}

// Input for the task that migrates Oracle databases to Azure Database for PostgreSQL for online migrations
func (o ValidateOracleAzureDbForPostgreSqlSyncTaskPropertiesResponseOutput) Input() MigrateOracleAzureDbPostgreSqlSyncTaskInputResponsePtrOutput {
	return o.ApplyT(func(v ValidateOracleAzureDbForPostgreSqlSyncTaskPropertiesResponse) *MigrateOracleAzureDbPostgreSqlSyncTaskInputResponse {
		return v.Input
	}).(MigrateOracleAzureDbPostgreSqlSyncTaskInputResponsePtrOutput)
}

// An array containing a single validation error response object
func (o ValidateOracleAzureDbForPostgreSqlSyncTaskPropertiesResponseOutput) Output() ValidateOracleAzureDbPostgreSqlSyncTaskOutputResponseArrayOutput {
	return o.ApplyT(func(v ValidateOracleAzureDbForPostgreSqlSyncTaskPropertiesResponse) []ValidateOracleAzureDbPostgreSqlSyncTaskOutputResponse {
		return v.Output
	}).(ValidateOracleAzureDbPostgreSqlSyncTaskOutputResponseArrayOutput)
}

// The state of the task. This is ignored if submitted.
func (o ValidateOracleAzureDbForPostgreSqlSyncTaskPropertiesResponseOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v ValidateOracleAzureDbForPostgreSqlSyncTaskPropertiesResponse) string { return v.State }).(pulumi.StringOutput)
}

// Task type.
func (o ValidateOracleAzureDbForPostgreSqlSyncTaskPropertiesResponseOutput) TaskType() pulumi.StringOutput {
	return o.ApplyT(func(v ValidateOracleAzureDbForPostgreSqlSyncTaskPropertiesResponse) string { return v.TaskType }).(pulumi.StringOutput)
}

// Output for task that validates migration input for Oracle to Azure Database for PostgreSQL for online migrations
type ValidateOracleAzureDbPostgreSqlSyncTaskOutputResponse struct {
	// Errors associated with a selected database object
	ValidationErrors []ReportableExceptionResponse `pulumi:"validationErrors"`
}

// Output for task that validates migration input for Oracle to Azure Database for PostgreSQL for online migrations
type ValidateOracleAzureDbPostgreSqlSyncTaskOutputResponseOutput struct{ *pulumi.OutputState }

func (ValidateOracleAzureDbPostgreSqlSyncTaskOutputResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ValidateOracleAzureDbPostgreSqlSyncTaskOutputResponse)(nil)).Elem()
}

func (o ValidateOracleAzureDbPostgreSqlSyncTaskOutputResponseOutput) ToValidateOracleAzureDbPostgreSqlSyncTaskOutputResponseOutput() ValidateOracleAzureDbPostgreSqlSyncTaskOutputResponseOutput {
	return o
}

func (o ValidateOracleAzureDbPostgreSqlSyncTaskOutputResponseOutput) ToValidateOracleAzureDbPostgreSqlSyncTaskOutputResponseOutputWithContext(ctx context.Context) ValidateOracleAzureDbPostgreSqlSyncTaskOutputResponseOutput {
	return o
}

// Errors associated with a selected database object
func (o ValidateOracleAzureDbPostgreSqlSyncTaskOutputResponseOutput) ValidationErrors() ReportableExceptionResponseArrayOutput {
	return o.ApplyT(func(v ValidateOracleAzureDbPostgreSqlSyncTaskOutputResponse) []ReportableExceptionResponse {
		return v.ValidationErrors
	}).(ReportableExceptionResponseArrayOutput)
}

type ValidateOracleAzureDbPostgreSqlSyncTaskOutputResponseArrayOutput struct{ *pulumi.OutputState }

func (ValidateOracleAzureDbPostgreSqlSyncTaskOutputResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ValidateOracleAzureDbPostgreSqlSyncTaskOutputResponse)(nil)).Elem()
}

func (o ValidateOracleAzureDbPostgreSqlSyncTaskOutputResponseArrayOutput) ToValidateOracleAzureDbPostgreSqlSyncTaskOutputResponseArrayOutput() ValidateOracleAzureDbPostgreSqlSyncTaskOutputResponseArrayOutput {
	return o
}

func (o ValidateOracleAzureDbPostgreSqlSyncTaskOutputResponseArrayOutput) ToValidateOracleAzureDbPostgreSqlSyncTaskOutputResponseArrayOutputWithContext(ctx context.Context) ValidateOracleAzureDbPostgreSqlSyncTaskOutputResponseArrayOutput {
	return o
}

func (o ValidateOracleAzureDbPostgreSqlSyncTaskOutputResponseArrayOutput) Index(i pulumi.IntInput) ValidateOracleAzureDbPostgreSqlSyncTaskOutputResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ValidateOracleAzureDbPostgreSqlSyncTaskOutputResponse {
		return vs[0].([]ValidateOracleAzureDbPostgreSqlSyncTaskOutputResponse)[vs[1].(int)]
	}).(ValidateOracleAzureDbPostgreSqlSyncTaskOutputResponseOutput)
}

// Input for task that validates migration input for SQL sync migrations
type ValidateSyncMigrationInputSqlServerTaskInput struct {
	// Databases to migrate
	SelectedDatabases []MigrateSqlServerSqlDbSyncDatabaseInput `pulumi:"selectedDatabases"`
	// Information for connecting to source SQL server
	SourceConnectionInfo SqlConnectionInfo `pulumi:"sourceConnectionInfo"`
	// Information for connecting to target
	TargetConnectionInfo SqlConnectionInfo `pulumi:"targetConnectionInfo"`
}

// ValidateSyncMigrationInputSqlServerTaskInputInput is an input type that accepts ValidateSyncMigrationInputSqlServerTaskInputArgs and ValidateSyncMigrationInputSqlServerTaskInputOutput values.
// You can construct a concrete instance of `ValidateSyncMigrationInputSqlServerTaskInputInput` via:
//
//          ValidateSyncMigrationInputSqlServerTaskInputArgs{...}
type ValidateSyncMigrationInputSqlServerTaskInputInput interface {
	pulumi.Input

	ToValidateSyncMigrationInputSqlServerTaskInputOutput() ValidateSyncMigrationInputSqlServerTaskInputOutput
	ToValidateSyncMigrationInputSqlServerTaskInputOutputWithContext(context.Context) ValidateSyncMigrationInputSqlServerTaskInputOutput
}

// Input for task that validates migration input for SQL sync migrations
type ValidateSyncMigrationInputSqlServerTaskInputArgs struct {
	// Databases to migrate
	SelectedDatabases MigrateSqlServerSqlDbSyncDatabaseInputArrayInput `pulumi:"selectedDatabases"`
	// Information for connecting to source SQL server
	SourceConnectionInfo SqlConnectionInfoInput `pulumi:"sourceConnectionInfo"`
	// Information for connecting to target
	TargetConnectionInfo SqlConnectionInfoInput `pulumi:"targetConnectionInfo"`
}

func (ValidateSyncMigrationInputSqlServerTaskInputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ValidateSyncMigrationInputSqlServerTaskInput)(nil)).Elem()
}

func (i ValidateSyncMigrationInputSqlServerTaskInputArgs) ToValidateSyncMigrationInputSqlServerTaskInputOutput() ValidateSyncMigrationInputSqlServerTaskInputOutput {
	return i.ToValidateSyncMigrationInputSqlServerTaskInputOutputWithContext(context.Background())
}

func (i ValidateSyncMigrationInputSqlServerTaskInputArgs) ToValidateSyncMigrationInputSqlServerTaskInputOutputWithContext(ctx context.Context) ValidateSyncMigrationInputSqlServerTaskInputOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ValidateSyncMigrationInputSqlServerTaskInputOutput)
}

func (i ValidateSyncMigrationInputSqlServerTaskInputArgs) ToValidateSyncMigrationInputSqlServerTaskInputPtrOutput() ValidateSyncMigrationInputSqlServerTaskInputPtrOutput {
	return i.ToValidateSyncMigrationInputSqlServerTaskInputPtrOutputWithContext(context.Background())
}

func (i ValidateSyncMigrationInputSqlServerTaskInputArgs) ToValidateSyncMigrationInputSqlServerTaskInputPtrOutputWithContext(ctx context.Context) ValidateSyncMigrationInputSqlServerTaskInputPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ValidateSyncMigrationInputSqlServerTaskInputOutput).ToValidateSyncMigrationInputSqlServerTaskInputPtrOutputWithContext(ctx)
}

// ValidateSyncMigrationInputSqlServerTaskInputPtrInput is an input type that accepts ValidateSyncMigrationInputSqlServerTaskInputArgs, ValidateSyncMigrationInputSqlServerTaskInputPtr and ValidateSyncMigrationInputSqlServerTaskInputPtrOutput values.
// You can construct a concrete instance of `ValidateSyncMigrationInputSqlServerTaskInputPtrInput` via:
//
//          ValidateSyncMigrationInputSqlServerTaskInputArgs{...}
//
//  or:
//
//          nil
type ValidateSyncMigrationInputSqlServerTaskInputPtrInput interface {
	pulumi.Input

	ToValidateSyncMigrationInputSqlServerTaskInputPtrOutput() ValidateSyncMigrationInputSqlServerTaskInputPtrOutput
	ToValidateSyncMigrationInputSqlServerTaskInputPtrOutputWithContext(context.Context) ValidateSyncMigrationInputSqlServerTaskInputPtrOutput
}

type validateSyncMigrationInputSqlServerTaskInputPtrType ValidateSyncMigrationInputSqlServerTaskInputArgs

func ValidateSyncMigrationInputSqlServerTaskInputPtr(v *ValidateSyncMigrationInputSqlServerTaskInputArgs) ValidateSyncMigrationInputSqlServerTaskInputPtrInput {
	return (*validateSyncMigrationInputSqlServerTaskInputPtrType)(v)
}

func (*validateSyncMigrationInputSqlServerTaskInputPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ValidateSyncMigrationInputSqlServerTaskInput)(nil)).Elem()
}

func (i *validateSyncMigrationInputSqlServerTaskInputPtrType) ToValidateSyncMigrationInputSqlServerTaskInputPtrOutput() ValidateSyncMigrationInputSqlServerTaskInputPtrOutput {
	return i.ToValidateSyncMigrationInputSqlServerTaskInputPtrOutputWithContext(context.Background())
}

func (i *validateSyncMigrationInputSqlServerTaskInputPtrType) ToValidateSyncMigrationInputSqlServerTaskInputPtrOutputWithContext(ctx context.Context) ValidateSyncMigrationInputSqlServerTaskInputPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ValidateSyncMigrationInputSqlServerTaskInputPtrOutput)
}

// Input for task that validates migration input for SQL sync migrations
type ValidateSyncMigrationInputSqlServerTaskInputResponse struct {
	// Databases to migrate
	SelectedDatabases []MigrateSqlServerSqlDbSyncDatabaseInputResponse `pulumi:"selectedDatabases"`
	// Information for connecting to source SQL server
	SourceConnectionInfo SqlConnectionInfoResponse `pulumi:"sourceConnectionInfo"`
	// Information for connecting to target
	TargetConnectionInfo SqlConnectionInfoResponse `pulumi:"targetConnectionInfo"`
}

// Input for task that validates migration input for SQL sync migrations
type ValidateSyncMigrationInputSqlServerTaskInputResponseOutput struct{ *pulumi.OutputState }

func (ValidateSyncMigrationInputSqlServerTaskInputResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ValidateSyncMigrationInputSqlServerTaskInputResponse)(nil)).Elem()
}

func (o ValidateSyncMigrationInputSqlServerTaskInputResponseOutput) ToValidateSyncMigrationInputSqlServerTaskInputResponseOutput() ValidateSyncMigrationInputSqlServerTaskInputResponseOutput {
	return o
}

func (o ValidateSyncMigrationInputSqlServerTaskInputResponseOutput) ToValidateSyncMigrationInputSqlServerTaskInputResponseOutputWithContext(ctx context.Context) ValidateSyncMigrationInputSqlServerTaskInputResponseOutput {
	return o
}

func (o ValidateSyncMigrationInputSqlServerTaskInputResponseOutput) ToValidateSyncMigrationInputSqlServerTaskInputResponsePtrOutput() ValidateSyncMigrationInputSqlServerTaskInputResponsePtrOutput {
	return o.ToValidateSyncMigrationInputSqlServerTaskInputResponsePtrOutputWithContext(context.Background())
}

func (o ValidateSyncMigrationInputSqlServerTaskInputResponseOutput) ToValidateSyncMigrationInputSqlServerTaskInputResponsePtrOutputWithContext(ctx context.Context) ValidateSyncMigrationInputSqlServerTaskInputResponsePtrOutput {
	return o.ApplyT(func(v ValidateSyncMigrationInputSqlServerTaskInputResponse) *ValidateSyncMigrationInputSqlServerTaskInputResponse {
		return &v
	}).(ValidateSyncMigrationInputSqlServerTaskInputResponsePtrOutput)
}

// Databases to migrate
func (o ValidateSyncMigrationInputSqlServerTaskInputResponseOutput) SelectedDatabases() MigrateSqlServerSqlDbSyncDatabaseInputResponseArrayOutput {
	return o.ApplyT(func(v ValidateSyncMigrationInputSqlServerTaskInputResponse) []MigrateSqlServerSqlDbSyncDatabaseInputResponse {
		return v.SelectedDatabases
	}).(MigrateSqlServerSqlDbSyncDatabaseInputResponseArrayOutput)
}

// Information for connecting to source SQL server
func (o ValidateSyncMigrationInputSqlServerTaskInputResponseOutput) SourceConnectionInfo() SqlConnectionInfoResponseOutput {
	return o.ApplyT(func(v ValidateSyncMigrationInputSqlServerTaskInputResponse) SqlConnectionInfoResponse {
		return v.SourceConnectionInfo
	}).(SqlConnectionInfoResponseOutput)
}

// Information for connecting to target
func (o ValidateSyncMigrationInputSqlServerTaskInputResponseOutput) TargetConnectionInfo() SqlConnectionInfoResponseOutput {
	return o.ApplyT(func(v ValidateSyncMigrationInputSqlServerTaskInputResponse) SqlConnectionInfoResponse {
		return v.TargetConnectionInfo
	}).(SqlConnectionInfoResponseOutput)
}

type ValidateSyncMigrationInputSqlServerTaskInputResponsePtrOutput struct{ *pulumi.OutputState }

func (ValidateSyncMigrationInputSqlServerTaskInputResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ValidateSyncMigrationInputSqlServerTaskInputResponse)(nil)).Elem()
}

func (o ValidateSyncMigrationInputSqlServerTaskInputResponsePtrOutput) ToValidateSyncMigrationInputSqlServerTaskInputResponsePtrOutput() ValidateSyncMigrationInputSqlServerTaskInputResponsePtrOutput {
	return o
}

func (o ValidateSyncMigrationInputSqlServerTaskInputResponsePtrOutput) ToValidateSyncMigrationInputSqlServerTaskInputResponsePtrOutputWithContext(ctx context.Context) ValidateSyncMigrationInputSqlServerTaskInputResponsePtrOutput {
	return o
}

func (o ValidateSyncMigrationInputSqlServerTaskInputResponsePtrOutput) Elem() ValidateSyncMigrationInputSqlServerTaskInputResponseOutput {
	return o.ApplyT(func(v *ValidateSyncMigrationInputSqlServerTaskInputResponse) ValidateSyncMigrationInputSqlServerTaskInputResponse {
		return *v
	}).(ValidateSyncMigrationInputSqlServerTaskInputResponseOutput)
}

// Databases to migrate
func (o ValidateSyncMigrationInputSqlServerTaskInputResponsePtrOutput) SelectedDatabases() MigrateSqlServerSqlDbSyncDatabaseInputResponseArrayOutput {
	return o.ApplyT(func(v *ValidateSyncMigrationInputSqlServerTaskInputResponse) []MigrateSqlServerSqlDbSyncDatabaseInputResponse {
		if v == nil {
			return nil
		}
		return v.SelectedDatabases
	}).(MigrateSqlServerSqlDbSyncDatabaseInputResponseArrayOutput)
}

// Information for connecting to source SQL server
func (o ValidateSyncMigrationInputSqlServerTaskInputResponsePtrOutput) SourceConnectionInfo() SqlConnectionInfoResponsePtrOutput {
	return o.ApplyT(func(v *ValidateSyncMigrationInputSqlServerTaskInputResponse) *SqlConnectionInfoResponse {
		if v == nil {
			return nil
		}
		return &v.SourceConnectionInfo
	}).(SqlConnectionInfoResponsePtrOutput)
}

// Information for connecting to target
func (o ValidateSyncMigrationInputSqlServerTaskInputResponsePtrOutput) TargetConnectionInfo() SqlConnectionInfoResponsePtrOutput {
	return o.ApplyT(func(v *ValidateSyncMigrationInputSqlServerTaskInputResponse) *SqlConnectionInfoResponse {
		if v == nil {
			return nil
		}
		return &v.TargetConnectionInfo
	}).(SqlConnectionInfoResponsePtrOutput)
}

// Output for task that validates migration input for SQL sync migrations
type ValidateSyncMigrationInputSqlServerTaskOutputResponse struct {
	// Database identifier
	Id string `pulumi:"id"`
	// Name of database
	Name string `pulumi:"name"`
	// Errors associated with a selected database object
	ValidationErrors []ReportableExceptionResponse `pulumi:"validationErrors"`
}

// Output for task that validates migration input for SQL sync migrations
type ValidateSyncMigrationInputSqlServerTaskOutputResponseOutput struct{ *pulumi.OutputState }

func (ValidateSyncMigrationInputSqlServerTaskOutputResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ValidateSyncMigrationInputSqlServerTaskOutputResponse)(nil)).Elem()
}

func (o ValidateSyncMigrationInputSqlServerTaskOutputResponseOutput) ToValidateSyncMigrationInputSqlServerTaskOutputResponseOutput() ValidateSyncMigrationInputSqlServerTaskOutputResponseOutput {
	return o
}

func (o ValidateSyncMigrationInputSqlServerTaskOutputResponseOutput) ToValidateSyncMigrationInputSqlServerTaskOutputResponseOutputWithContext(ctx context.Context) ValidateSyncMigrationInputSqlServerTaskOutputResponseOutput {
	return o
}

// Database identifier
func (o ValidateSyncMigrationInputSqlServerTaskOutputResponseOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v ValidateSyncMigrationInputSqlServerTaskOutputResponse) string { return v.Id }).(pulumi.StringOutput)
}

// Name of database
func (o ValidateSyncMigrationInputSqlServerTaskOutputResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ValidateSyncMigrationInputSqlServerTaskOutputResponse) string { return v.Name }).(pulumi.StringOutput)
}

// Errors associated with a selected database object
func (o ValidateSyncMigrationInputSqlServerTaskOutputResponseOutput) ValidationErrors() ReportableExceptionResponseArrayOutput {
	return o.ApplyT(func(v ValidateSyncMigrationInputSqlServerTaskOutputResponse) []ReportableExceptionResponse {
		return v.ValidationErrors
	}).(ReportableExceptionResponseArrayOutput)
}

type ValidateSyncMigrationInputSqlServerTaskOutputResponseArrayOutput struct{ *pulumi.OutputState }

func (ValidateSyncMigrationInputSqlServerTaskOutputResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ValidateSyncMigrationInputSqlServerTaskOutputResponse)(nil)).Elem()
}

func (o ValidateSyncMigrationInputSqlServerTaskOutputResponseArrayOutput) ToValidateSyncMigrationInputSqlServerTaskOutputResponseArrayOutput() ValidateSyncMigrationInputSqlServerTaskOutputResponseArrayOutput {
	return o
}

func (o ValidateSyncMigrationInputSqlServerTaskOutputResponseArrayOutput) ToValidateSyncMigrationInputSqlServerTaskOutputResponseArrayOutputWithContext(ctx context.Context) ValidateSyncMigrationInputSqlServerTaskOutputResponseArrayOutput {
	return o
}

func (o ValidateSyncMigrationInputSqlServerTaskOutputResponseArrayOutput) Index(i pulumi.IntInput) ValidateSyncMigrationInputSqlServerTaskOutputResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ValidateSyncMigrationInputSqlServerTaskOutputResponse {
		return vs[0].([]ValidateSyncMigrationInputSqlServerTaskOutputResponse)[vs[1].(int)]
	}).(ValidateSyncMigrationInputSqlServerTaskOutputResponseOutput)
}

func init() {
	pulumi.RegisterOutputType(AzureActiveDirectoryAppOutput{})
	pulumi.RegisterOutputType(AzureActiveDirectoryAppPtrOutput{})
	pulumi.RegisterOutputType(AzureActiveDirectoryAppResponseOutput{})
	pulumi.RegisterOutputType(AzureActiveDirectoryAppResponsePtrOutput{})
	pulumi.RegisterOutputType(BackupFileInfoResponseOutput{})
	pulumi.RegisterOutputType(BackupFileInfoResponseArrayOutput{})
	pulumi.RegisterOutputType(BackupSetInfoResponseOutput{})
	pulumi.RegisterOutputType(BackupSetInfoResponseArrayOutput{})
	pulumi.RegisterOutputType(BlobShareOutput{})
	pulumi.RegisterOutputType(BlobSharePtrOutput{})
	pulumi.RegisterOutputType(BlobShareResponseOutput{})
	pulumi.RegisterOutputType(BlobShareResponsePtrOutput{})
	pulumi.RegisterOutputType(ConnectToMongoDbTaskPropertiesOutput{})
	pulumi.RegisterOutputType(ConnectToMongoDbTaskPropertiesResponseOutput{})
	pulumi.RegisterOutputType(ConnectToSourceOracleSyncTaskInputOutput{})
	pulumi.RegisterOutputType(ConnectToSourceOracleSyncTaskInputPtrOutput{})
	pulumi.RegisterOutputType(ConnectToSourceOracleSyncTaskInputResponseOutput{})
	pulumi.RegisterOutputType(ConnectToSourceOracleSyncTaskInputResponsePtrOutput{})
	pulumi.RegisterOutputType(ConnectToSourceOracleSyncTaskOutputResponseOutput{})
	pulumi.RegisterOutputType(ConnectToSourceOracleSyncTaskOutputResponseArrayOutput{})
	pulumi.RegisterOutputType(ConnectToSourceOracleSyncTaskPropertiesOutput{})
	pulumi.RegisterOutputType(ConnectToSourceOracleSyncTaskPropertiesResponseOutput{})
	pulumi.RegisterOutputType(ConnectToSourcePostgreSqlSyncTaskInputOutput{})
	pulumi.RegisterOutputType(ConnectToSourcePostgreSqlSyncTaskInputPtrOutput{})
	pulumi.RegisterOutputType(ConnectToSourcePostgreSqlSyncTaskInputResponseOutput{})
	pulumi.RegisterOutputType(ConnectToSourcePostgreSqlSyncTaskInputResponsePtrOutput{})
	pulumi.RegisterOutputType(ConnectToSourcePostgreSqlSyncTaskOutputResponseOutput{})
	pulumi.RegisterOutputType(ConnectToSourcePostgreSqlSyncTaskOutputResponseArrayOutput{})
	pulumi.RegisterOutputType(ConnectToSourcePostgreSqlSyncTaskPropertiesOutput{})
	pulumi.RegisterOutputType(ConnectToSourcePostgreSqlSyncTaskPropertiesResponseOutput{})
	pulumi.RegisterOutputType(ConnectToSourceSqlServerSyncTaskPropertiesOutput{})
	pulumi.RegisterOutputType(ConnectToSourceSqlServerSyncTaskPropertiesResponseOutput{})
	pulumi.RegisterOutputType(ConnectToSourceSqlServerTaskInputOutput{})
	pulumi.RegisterOutputType(ConnectToSourceSqlServerTaskInputPtrOutput{})
	pulumi.RegisterOutputType(ConnectToSourceSqlServerTaskInputResponseOutput{})
	pulumi.RegisterOutputType(ConnectToSourceSqlServerTaskInputResponsePtrOutput{})
	pulumi.RegisterOutputType(ConnectToSourceSqlServerTaskOutputAgentJobLevelResponseOutput{})
	pulumi.RegisterOutputType(ConnectToSourceSqlServerTaskOutputDatabaseLevelResponseOutput{})
	pulumi.RegisterOutputType(ConnectToSourceSqlServerTaskOutputLoginLevelResponseOutput{})
	pulumi.RegisterOutputType(ConnectToSourceSqlServerTaskOutputTaskLevelResponseOutput{})
	pulumi.RegisterOutputType(ConnectToSourceSqlServerTaskPropertiesOutput{})
	pulumi.RegisterOutputType(ConnectToSourceSqlServerTaskPropertiesResponseOutput{})
	pulumi.RegisterOutputType(ConnectToTargetAzureDbForMySqlTaskInputOutput{})
	pulumi.RegisterOutputType(ConnectToTargetAzureDbForMySqlTaskInputPtrOutput{})
	pulumi.RegisterOutputType(ConnectToTargetAzureDbForMySqlTaskInputResponseOutput{})
	pulumi.RegisterOutputType(ConnectToTargetAzureDbForMySqlTaskInputResponsePtrOutput{})
	pulumi.RegisterOutputType(ConnectToTargetAzureDbForMySqlTaskOutputResponseOutput{})
	pulumi.RegisterOutputType(ConnectToTargetAzureDbForMySqlTaskOutputResponseArrayOutput{})
	pulumi.RegisterOutputType(ConnectToTargetAzureDbForMySqlTaskPropertiesOutput{})
	pulumi.RegisterOutputType(ConnectToTargetAzureDbForMySqlTaskPropertiesResponseOutput{})
	pulumi.RegisterOutputType(ConnectToTargetAzureDbForPostgreSqlSyncTaskInputOutput{})
	pulumi.RegisterOutputType(ConnectToTargetAzureDbForPostgreSqlSyncTaskInputPtrOutput{})
	pulumi.RegisterOutputType(ConnectToTargetAzureDbForPostgreSqlSyncTaskInputResponseOutput{})
	pulumi.RegisterOutputType(ConnectToTargetAzureDbForPostgreSqlSyncTaskInputResponsePtrOutput{})
	pulumi.RegisterOutputType(ConnectToTargetAzureDbForPostgreSqlSyncTaskOutputResponseOutput{})
	pulumi.RegisterOutputType(ConnectToTargetAzureDbForPostgreSqlSyncTaskOutputResponseArrayOutput{})
	pulumi.RegisterOutputType(ConnectToTargetAzureDbForPostgreSqlSyncTaskPropertiesOutput{})
	pulumi.RegisterOutputType(ConnectToTargetAzureDbForPostgreSqlSyncTaskPropertiesResponseOutput{})
	pulumi.RegisterOutputType(ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskInputOutput{})
	pulumi.RegisterOutputType(ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskInputPtrOutput{})
	pulumi.RegisterOutputType(ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskInputResponseOutput{})
	pulumi.RegisterOutputType(ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskInputResponsePtrOutput{})
	pulumi.RegisterOutputType(ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskOutputResponseOutput{})
	pulumi.RegisterOutputType(ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskOutputResponseArrayOutput{})
	pulumi.RegisterOutputType(ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskOutputResponseDatabaseSchemaMapOutput{})
	pulumi.RegisterOutputType(ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskOutputResponseDatabaseSchemaMapArrayOutput{})
	pulumi.RegisterOutputType(ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskPropertiesOutput{})
	pulumi.RegisterOutputType(ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskPropertiesResponseOutput{})
	pulumi.RegisterOutputType(ConnectToTargetSqlDbTaskInputOutput{})
	pulumi.RegisterOutputType(ConnectToTargetSqlDbTaskInputPtrOutput{})
	pulumi.RegisterOutputType(ConnectToTargetSqlDbTaskInputResponseOutput{})
	pulumi.RegisterOutputType(ConnectToTargetSqlDbTaskInputResponsePtrOutput{})
	pulumi.RegisterOutputType(ConnectToTargetSqlDbTaskOutputResponseOutput{})
	pulumi.RegisterOutputType(ConnectToTargetSqlDbTaskOutputResponseArrayOutput{})
	pulumi.RegisterOutputType(ConnectToTargetSqlDbTaskPropertiesOutput{})
	pulumi.RegisterOutputType(ConnectToTargetSqlDbTaskPropertiesResponseOutput{})
	pulumi.RegisterOutputType(ConnectToTargetSqlMISyncTaskInputOutput{})
	pulumi.RegisterOutputType(ConnectToTargetSqlMISyncTaskInputPtrOutput{})
	pulumi.RegisterOutputType(ConnectToTargetSqlMISyncTaskInputResponseOutput{})
	pulumi.RegisterOutputType(ConnectToTargetSqlMISyncTaskInputResponsePtrOutput{})
	pulumi.RegisterOutputType(ConnectToTargetSqlMISyncTaskOutputResponseOutput{})
	pulumi.RegisterOutputType(ConnectToTargetSqlMISyncTaskOutputResponseArrayOutput{})
	pulumi.RegisterOutputType(ConnectToTargetSqlMISyncTaskPropertiesOutput{})
	pulumi.RegisterOutputType(ConnectToTargetSqlMISyncTaskPropertiesResponseOutput{})
	pulumi.RegisterOutputType(ConnectToTargetSqlMITaskInputOutput{})
	pulumi.RegisterOutputType(ConnectToTargetSqlMITaskInputPtrOutput{})
	pulumi.RegisterOutputType(ConnectToTargetSqlMITaskInputResponseOutput{})
	pulumi.RegisterOutputType(ConnectToTargetSqlMITaskInputResponsePtrOutput{})
	pulumi.RegisterOutputType(ConnectToTargetSqlMITaskOutputResponseOutput{})
	pulumi.RegisterOutputType(ConnectToTargetSqlMITaskOutputResponseArrayOutput{})
	pulumi.RegisterOutputType(ConnectToTargetSqlMITaskPropertiesOutput{})
	pulumi.RegisterOutputType(ConnectToTargetSqlMITaskPropertiesResponseOutput{})
	pulumi.RegisterOutputType(ConnectToTargetSqlSqlDbSyncTaskInputOutput{})
	pulumi.RegisterOutputType(ConnectToTargetSqlSqlDbSyncTaskInputPtrOutput{})
	pulumi.RegisterOutputType(ConnectToTargetSqlSqlDbSyncTaskInputResponseOutput{})
	pulumi.RegisterOutputType(ConnectToTargetSqlSqlDbSyncTaskInputResponsePtrOutput{})
	pulumi.RegisterOutputType(ConnectToTargetSqlSqlDbSyncTaskPropertiesOutput{})
	pulumi.RegisterOutputType(ConnectToTargetSqlSqlDbSyncTaskPropertiesResponseOutput{})
	pulumi.RegisterOutputType(DatabaseBackupInfoResponseOutput{})
	pulumi.RegisterOutputType(DatabaseBackupInfoResponsePtrOutput{})
	pulumi.RegisterOutputType(DatabaseFileInfoResponseOutput{})
	pulumi.RegisterOutputType(DatabaseFileInfoResponseArrayOutput{})
	pulumi.RegisterOutputType(DatabaseInfoOutput{})
	pulumi.RegisterOutputType(DatabaseInfoArrayOutput{})
	pulumi.RegisterOutputType(DatabaseInfoResponseOutput{})
	pulumi.RegisterOutputType(DatabaseInfoResponseArrayOutput{})
	pulumi.RegisterOutputType(DatabaseTableResponseOutput{})
	pulumi.RegisterOutputType(DatabaseTableResponseArrayOutput{})
	pulumi.RegisterOutputType(FileShareOutput{})
	pulumi.RegisterOutputType(FileSharePtrOutput{})
	pulumi.RegisterOutputType(FileShareResponseOutput{})
	pulumi.RegisterOutputType(FileShareResponsePtrOutput{})
	pulumi.RegisterOutputType(GetTdeCertificatesSqlTaskInputOutput{})
	pulumi.RegisterOutputType(GetTdeCertificatesSqlTaskInputPtrOutput{})
	pulumi.RegisterOutputType(GetTdeCertificatesSqlTaskInputResponseOutput{})
	pulumi.RegisterOutputType(GetTdeCertificatesSqlTaskInputResponsePtrOutput{})
	pulumi.RegisterOutputType(GetTdeCertificatesSqlTaskOutputResponseOutput{})
	pulumi.RegisterOutputType(GetTdeCertificatesSqlTaskOutputResponseArrayOutput{})
	pulumi.RegisterOutputType(GetTdeCertificatesSqlTaskPropertiesOutput{})
	pulumi.RegisterOutputType(GetTdeCertificatesSqlTaskPropertiesResponseOutput{})
	pulumi.RegisterOutputType(GetUserTablesOracleTaskInputOutput{})
	pulumi.RegisterOutputType(GetUserTablesOracleTaskInputPtrOutput{})
	pulumi.RegisterOutputType(GetUserTablesOracleTaskInputResponseOutput{})
	pulumi.RegisterOutputType(GetUserTablesOracleTaskInputResponsePtrOutput{})
	pulumi.RegisterOutputType(GetUserTablesOracleTaskOutputResponseOutput{})
	pulumi.RegisterOutputType(GetUserTablesOracleTaskOutputResponseArrayOutput{})
	pulumi.RegisterOutputType(GetUserTablesOracleTaskPropertiesOutput{})
	pulumi.RegisterOutputType(GetUserTablesOracleTaskPropertiesResponseOutput{})
	pulumi.RegisterOutputType(GetUserTablesPostgreSqlTaskInputOutput{})
	pulumi.RegisterOutputType(GetUserTablesPostgreSqlTaskInputPtrOutput{})
	pulumi.RegisterOutputType(GetUserTablesPostgreSqlTaskInputResponseOutput{})
	pulumi.RegisterOutputType(GetUserTablesPostgreSqlTaskInputResponsePtrOutput{})
	pulumi.RegisterOutputType(GetUserTablesPostgreSqlTaskOutputResponseOutput{})
	pulumi.RegisterOutputType(GetUserTablesPostgreSqlTaskOutputResponseArrayOutput{})
	pulumi.RegisterOutputType(GetUserTablesPostgreSqlTaskPropertiesOutput{})
	pulumi.RegisterOutputType(GetUserTablesPostgreSqlTaskPropertiesResponseOutput{})
	pulumi.RegisterOutputType(GetUserTablesSqlSyncTaskInputOutput{})
	pulumi.RegisterOutputType(GetUserTablesSqlSyncTaskInputPtrOutput{})
	pulumi.RegisterOutputType(GetUserTablesSqlSyncTaskInputResponseOutput{})
	pulumi.RegisterOutputType(GetUserTablesSqlSyncTaskInputResponsePtrOutput{})
	pulumi.RegisterOutputType(GetUserTablesSqlSyncTaskOutputResponseOutput{})
	pulumi.RegisterOutputType(GetUserTablesSqlSyncTaskOutputResponseArrayOutput{})
	pulumi.RegisterOutputType(GetUserTablesSqlSyncTaskPropertiesOutput{})
	pulumi.RegisterOutputType(GetUserTablesSqlSyncTaskPropertiesResponseOutput{})
	pulumi.RegisterOutputType(GetUserTablesSqlTaskInputOutput{})
	pulumi.RegisterOutputType(GetUserTablesSqlTaskInputPtrOutput{})
	pulumi.RegisterOutputType(GetUserTablesSqlTaskInputResponseOutput{})
	pulumi.RegisterOutputType(GetUserTablesSqlTaskInputResponsePtrOutput{})
	pulumi.RegisterOutputType(GetUserTablesSqlTaskOutputResponseOutput{})
	pulumi.RegisterOutputType(GetUserTablesSqlTaskOutputResponseArrayOutput{})
	pulumi.RegisterOutputType(GetUserTablesSqlTaskPropertiesOutput{})
	pulumi.RegisterOutputType(GetUserTablesSqlTaskPropertiesResponseOutput{})
	pulumi.RegisterOutputType(MiSqlConnectionInfoOutput{})
	pulumi.RegisterOutputType(MiSqlConnectionInfoPtrOutput{})
	pulumi.RegisterOutputType(MiSqlConnectionInfoResponseOutput{})
	pulumi.RegisterOutputType(MiSqlConnectionInfoResponsePtrOutput{})
	pulumi.RegisterOutputType(MigrateMISyncCompleteCommandInputResponseOutput{})
	pulumi.RegisterOutputType(MigrateMISyncCompleteCommandInputResponsePtrOutput{})
	pulumi.RegisterOutputType(MigrateMISyncCompleteCommandOutputResponseOutput{})
	pulumi.RegisterOutputType(MigrateMISyncCompleteCommandPropertiesResponseOutput{})
	pulumi.RegisterOutputType(MigrateMongoDbTaskPropertiesOutput{})
	pulumi.RegisterOutputType(MigrateMongoDbTaskPropertiesResponseOutput{})
	pulumi.RegisterOutputType(MigrateMySqlAzureDbForMySqlSyncDatabaseInputOutput{})
	pulumi.RegisterOutputType(MigrateMySqlAzureDbForMySqlSyncDatabaseInputArrayOutput{})
	pulumi.RegisterOutputType(MigrateMySqlAzureDbForMySqlSyncDatabaseInputResponseOutput{})
	pulumi.RegisterOutputType(MigrateMySqlAzureDbForMySqlSyncDatabaseInputResponseArrayOutput{})
	pulumi.RegisterOutputType(MigrateMySqlAzureDbForMySqlSyncTaskInputOutput{})
	pulumi.RegisterOutputType(MigrateMySqlAzureDbForMySqlSyncTaskInputPtrOutput{})
	pulumi.RegisterOutputType(MigrateMySqlAzureDbForMySqlSyncTaskInputResponseOutput{})
	pulumi.RegisterOutputType(MigrateMySqlAzureDbForMySqlSyncTaskInputResponsePtrOutput{})
	pulumi.RegisterOutputType(MigrateMySqlAzureDbForMySqlSyncTaskOutputDatabaseErrorResponseOutput{})
	pulumi.RegisterOutputType(MigrateMySqlAzureDbForMySqlSyncTaskOutputDatabaseLevelResponseOutput{})
	pulumi.RegisterOutputType(MigrateMySqlAzureDbForMySqlSyncTaskOutputErrorResponseOutput{})
	pulumi.RegisterOutputType(MigrateMySqlAzureDbForMySqlSyncTaskOutputMigrationLevelResponseOutput{})
	pulumi.RegisterOutputType(MigrateMySqlAzureDbForMySqlSyncTaskOutputTableLevelResponseOutput{})
	pulumi.RegisterOutputType(MigrateMySqlAzureDbForMySqlSyncTaskPropertiesOutput{})
	pulumi.RegisterOutputType(MigrateMySqlAzureDbForMySqlSyncTaskPropertiesResponseOutput{})
	pulumi.RegisterOutputType(MigrateOracleAzureDbForPostgreSqlSyncTaskPropertiesOutput{})
	pulumi.RegisterOutputType(MigrateOracleAzureDbForPostgreSqlSyncTaskPropertiesResponseOutput{})
	pulumi.RegisterOutputType(MigrateOracleAzureDbPostgreSqlSyncDatabaseInputOutput{})
	pulumi.RegisterOutputType(MigrateOracleAzureDbPostgreSqlSyncDatabaseInputArrayOutput{})
	pulumi.RegisterOutputType(MigrateOracleAzureDbPostgreSqlSyncDatabaseInputResponseOutput{})
	pulumi.RegisterOutputType(MigrateOracleAzureDbPostgreSqlSyncDatabaseInputResponseArrayOutput{})
	pulumi.RegisterOutputType(MigrateOracleAzureDbPostgreSqlSyncTaskInputOutput{})
	pulumi.RegisterOutputType(MigrateOracleAzureDbPostgreSqlSyncTaskInputPtrOutput{})
	pulumi.RegisterOutputType(MigrateOracleAzureDbPostgreSqlSyncTaskInputResponseOutput{})
	pulumi.RegisterOutputType(MigrateOracleAzureDbPostgreSqlSyncTaskInputResponsePtrOutput{})
	pulumi.RegisterOutputType(MigrateOracleAzureDbPostgreSqlSyncTaskOutputDatabaseErrorResponseOutput{})
	pulumi.RegisterOutputType(MigrateOracleAzureDbPostgreSqlSyncTaskOutputDatabaseLevelResponseOutput{})
	pulumi.RegisterOutputType(MigrateOracleAzureDbPostgreSqlSyncTaskOutputErrorResponseOutput{})
	pulumi.RegisterOutputType(MigrateOracleAzureDbPostgreSqlSyncTaskOutputMigrationLevelResponseOutput{})
	pulumi.RegisterOutputType(MigrateOracleAzureDbPostgreSqlSyncTaskOutputTableLevelResponseOutput{})
	pulumi.RegisterOutputType(MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseInputOutput{})
	pulumi.RegisterOutputType(MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseInputArrayOutput{})
	pulumi.RegisterOutputType(MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseInputResponseOutput{})
	pulumi.RegisterOutputType(MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseInputResponseArrayOutput{})
	pulumi.RegisterOutputType(MigratePostgreSqlAzureDbForPostgreSqlSyncTaskInputOutput{})
	pulumi.RegisterOutputType(MigratePostgreSqlAzureDbForPostgreSqlSyncTaskInputPtrOutput{})
	pulumi.RegisterOutputType(MigratePostgreSqlAzureDbForPostgreSqlSyncTaskInputResponseOutput{})
	pulumi.RegisterOutputType(MigratePostgreSqlAzureDbForPostgreSqlSyncTaskInputResponsePtrOutput{})
	pulumi.RegisterOutputType(MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputDatabaseErrorResponseOutput{})
	pulumi.RegisterOutputType(MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputDatabaseLevelResponseOutput{})
	pulumi.RegisterOutputType(MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputErrorResponseOutput{})
	pulumi.RegisterOutputType(MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputMigrationLevelResponseOutput{})
	pulumi.RegisterOutputType(MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputTableLevelResponseOutput{})
	pulumi.RegisterOutputType(MigratePostgreSqlAzureDbForPostgreSqlSyncTaskPropertiesOutput{})
	pulumi.RegisterOutputType(MigratePostgreSqlAzureDbForPostgreSqlSyncTaskPropertiesResponseOutput{})
	pulumi.RegisterOutputType(MigrateSqlServerSqlDbDatabaseInputOutput{})
	pulumi.RegisterOutputType(MigrateSqlServerSqlDbDatabaseInputArrayOutput{})
	pulumi.RegisterOutputType(MigrateSqlServerSqlDbDatabaseInputResponseOutput{})
	pulumi.RegisterOutputType(MigrateSqlServerSqlDbDatabaseInputResponseArrayOutput{})
	pulumi.RegisterOutputType(MigrateSqlServerSqlDbSyncDatabaseInputOutput{})
	pulumi.RegisterOutputType(MigrateSqlServerSqlDbSyncDatabaseInputArrayOutput{})
	pulumi.RegisterOutputType(MigrateSqlServerSqlDbSyncDatabaseInputResponseOutput{})
	pulumi.RegisterOutputType(MigrateSqlServerSqlDbSyncDatabaseInputResponseArrayOutput{})
	pulumi.RegisterOutputType(MigrateSqlServerSqlDbSyncTaskInputOutput{})
	pulumi.RegisterOutputType(MigrateSqlServerSqlDbSyncTaskInputPtrOutput{})
	pulumi.RegisterOutputType(MigrateSqlServerSqlDbSyncTaskInputResponseOutput{})
	pulumi.RegisterOutputType(MigrateSqlServerSqlDbSyncTaskInputResponsePtrOutput{})
	pulumi.RegisterOutputType(MigrateSqlServerSqlDbSyncTaskOutputDatabaseErrorResponseOutput{})
	pulumi.RegisterOutputType(MigrateSqlServerSqlDbSyncTaskOutputDatabaseLevelResponseOutput{})
	pulumi.RegisterOutputType(MigrateSqlServerSqlDbSyncTaskOutputErrorResponseOutput{})
	pulumi.RegisterOutputType(MigrateSqlServerSqlDbSyncTaskOutputMigrationLevelResponseOutput{})
	pulumi.RegisterOutputType(MigrateSqlServerSqlDbSyncTaskOutputTableLevelResponseOutput{})
	pulumi.RegisterOutputType(MigrateSqlServerSqlDbSyncTaskPropertiesOutput{})
	pulumi.RegisterOutputType(MigrateSqlServerSqlDbSyncTaskPropertiesResponseOutput{})
	pulumi.RegisterOutputType(MigrateSqlServerSqlDbTaskInputOutput{})
	pulumi.RegisterOutputType(MigrateSqlServerSqlDbTaskInputPtrOutput{})
	pulumi.RegisterOutputType(MigrateSqlServerSqlDbTaskInputResponseOutput{})
	pulumi.RegisterOutputType(MigrateSqlServerSqlDbTaskInputResponsePtrOutput{})
	pulumi.RegisterOutputType(MigrateSqlServerSqlDbTaskOutputDatabaseLevelResponseOutput{})
	pulumi.RegisterOutputType(MigrateSqlServerSqlDbTaskOutputDatabaseLevelValidationResultResponseOutput{})
	pulumi.RegisterOutputType(MigrateSqlServerSqlDbTaskOutputErrorResponseOutput{})
	pulumi.RegisterOutputType(MigrateSqlServerSqlDbTaskOutputMigrationLevelResponseOutput{})
	pulumi.RegisterOutputType(MigrateSqlServerSqlDbTaskOutputTableLevelResponseOutput{})
	pulumi.RegisterOutputType(MigrateSqlServerSqlDbTaskOutputValidationResultResponseOutput{})
	pulumi.RegisterOutputType(MigrateSqlServerSqlDbTaskPropertiesOutput{})
	pulumi.RegisterOutputType(MigrateSqlServerSqlDbTaskPropertiesResponseOutput{})
	pulumi.RegisterOutputType(MigrateSqlServerSqlMIDatabaseInputOutput{})
	pulumi.RegisterOutputType(MigrateSqlServerSqlMIDatabaseInputArrayOutput{})
	pulumi.RegisterOutputType(MigrateSqlServerSqlMIDatabaseInputResponseOutput{})
	pulumi.RegisterOutputType(MigrateSqlServerSqlMIDatabaseInputResponseArrayOutput{})
	pulumi.RegisterOutputType(MigrateSqlServerSqlMISyncTaskInputOutput{})
	pulumi.RegisterOutputType(MigrateSqlServerSqlMISyncTaskInputPtrOutput{})
	pulumi.RegisterOutputType(MigrateSqlServerSqlMISyncTaskInputResponseOutput{})
	pulumi.RegisterOutputType(MigrateSqlServerSqlMISyncTaskInputResponsePtrOutput{})
	pulumi.RegisterOutputType(MigrateSqlServerSqlMISyncTaskOutputDatabaseLevelResponseOutput{})
	pulumi.RegisterOutputType(MigrateSqlServerSqlMISyncTaskOutputErrorResponseOutput{})
	pulumi.RegisterOutputType(MigrateSqlServerSqlMISyncTaskOutputMigrationLevelResponseOutput{})
	pulumi.RegisterOutputType(MigrateSqlServerSqlMISyncTaskPropertiesOutput{})
	pulumi.RegisterOutputType(MigrateSqlServerSqlMISyncTaskPropertiesResponseOutput{})
	pulumi.RegisterOutputType(MigrateSqlServerSqlMITaskInputOutput{})
	pulumi.RegisterOutputType(MigrateSqlServerSqlMITaskInputPtrOutput{})
	pulumi.RegisterOutputType(MigrateSqlServerSqlMITaskInputResponseOutput{})
	pulumi.RegisterOutputType(MigrateSqlServerSqlMITaskInputResponsePtrOutput{})
	pulumi.RegisterOutputType(MigrateSqlServerSqlMITaskOutputAgentJobLevelResponseOutput{})
	pulumi.RegisterOutputType(MigrateSqlServerSqlMITaskOutputDatabaseLevelResponseOutput{})
	pulumi.RegisterOutputType(MigrateSqlServerSqlMITaskOutputErrorResponseOutput{})
	pulumi.RegisterOutputType(MigrateSqlServerSqlMITaskOutputLoginLevelResponseOutput{})
	pulumi.RegisterOutputType(MigrateSqlServerSqlMITaskOutputMigrationLevelResponseOutput{})
	pulumi.RegisterOutputType(MigrateSqlServerSqlMITaskPropertiesOutput{})
	pulumi.RegisterOutputType(MigrateSqlServerSqlMITaskPropertiesResponseOutput{})
	pulumi.RegisterOutputType(MigrateSsisTaskInputOutput{})
	pulumi.RegisterOutputType(MigrateSsisTaskInputPtrOutput{})
	pulumi.RegisterOutputType(MigrateSsisTaskInputResponseOutput{})
	pulumi.RegisterOutputType(MigrateSsisTaskInputResponsePtrOutput{})
	pulumi.RegisterOutputType(MigrateSsisTaskOutputMigrationLevelResponseOutput{})
	pulumi.RegisterOutputType(MigrateSsisTaskOutputProjectLevelResponseOutput{})
	pulumi.RegisterOutputType(MigrateSsisTaskPropertiesOutput{})
	pulumi.RegisterOutputType(MigrateSsisTaskPropertiesResponseOutput{})
	pulumi.RegisterOutputType(MigrateSyncCompleteCommandInputResponseOutput{})
	pulumi.RegisterOutputType(MigrateSyncCompleteCommandInputResponsePtrOutput{})
	pulumi.RegisterOutputType(MigrateSyncCompleteCommandOutputResponseOutput{})
	pulumi.RegisterOutputType(MigrateSyncCompleteCommandPropertiesResponseOutput{})
	pulumi.RegisterOutputType(MigrationEligibilityInfoResponseOutput{})
	pulumi.RegisterOutputType(MigrationReportResultResponseOutput{})
	pulumi.RegisterOutputType(MigrationReportResultResponsePtrOutput{})
	pulumi.RegisterOutputType(MigrationValidationDatabaseSummaryResultResponseOutput{})
	pulumi.RegisterOutputType(MigrationValidationDatabaseSummaryResultResponseMapOutput{})
	pulumi.RegisterOutputType(MigrationValidationOptionsOutput{})
	pulumi.RegisterOutputType(MigrationValidationOptionsPtrOutput{})
	pulumi.RegisterOutputType(MigrationValidationOptionsResponseOutput{})
	pulumi.RegisterOutputType(MigrationValidationOptionsResponsePtrOutput{})
	pulumi.RegisterOutputType(MigrationValidationResultResponseOutput{})
	pulumi.RegisterOutputType(MigrationValidationResultResponsePtrOutput{})
	pulumi.RegisterOutputType(MongoDbClusterInfoResponseOutput{})
	pulumi.RegisterOutputType(MongoDbClusterInfoResponseArrayOutput{})
	pulumi.RegisterOutputType(MongoDbCollectionInfoResponseOutput{})
	pulumi.RegisterOutputType(MongoDbCollectionInfoResponseArrayOutput{})
	pulumi.RegisterOutputType(MongoDbCollectionProgressResponseOutput{})
	pulumi.RegisterOutputType(MongoDbCollectionProgressResponseMapOutput{})
	pulumi.RegisterOutputType(MongoDbCollectionSettingsOutput{})
	pulumi.RegisterOutputType(MongoDbCollectionSettingsMapOutput{})
	pulumi.RegisterOutputType(MongoDbCollectionSettingsResponseOutput{})
	pulumi.RegisterOutputType(MongoDbCollectionSettingsResponseMapOutput{})
	pulumi.RegisterOutputType(MongoDbConnectionInfoOutput{})
	pulumi.RegisterOutputType(MongoDbConnectionInfoPtrOutput{})
	pulumi.RegisterOutputType(MongoDbConnectionInfoResponseOutput{})
	pulumi.RegisterOutputType(MongoDbConnectionInfoResponsePtrOutput{})
	pulumi.RegisterOutputType(MongoDbDatabaseInfoResponseOutput{})
	pulumi.RegisterOutputType(MongoDbDatabaseInfoResponseArrayOutput{})
	pulumi.RegisterOutputType(MongoDbDatabaseProgressResponseOutput{})
	pulumi.RegisterOutputType(MongoDbDatabaseProgressResponseMapOutput{})
	pulumi.RegisterOutputType(MongoDbDatabaseSettingsOutput{})
	pulumi.RegisterOutputType(MongoDbDatabaseSettingsMapOutput{})
	pulumi.RegisterOutputType(MongoDbDatabaseSettingsResponseOutput{})
	pulumi.RegisterOutputType(MongoDbDatabaseSettingsResponseMapOutput{})
	pulumi.RegisterOutputType(MongoDbErrorResponseOutput{})
	pulumi.RegisterOutputType(MongoDbErrorResponseMapOutput{})
	pulumi.RegisterOutputType(MongoDbMigrationProgressResponseOutput{})
	pulumi.RegisterOutputType(MongoDbMigrationProgressResponseArrayOutput{})
	pulumi.RegisterOutputType(MongoDbMigrationSettingsOutput{})
	pulumi.RegisterOutputType(MongoDbMigrationSettingsPtrOutput{})
	pulumi.RegisterOutputType(MongoDbMigrationSettingsResponseOutput{})
	pulumi.RegisterOutputType(MongoDbMigrationSettingsResponsePtrOutput{})
	pulumi.RegisterOutputType(MongoDbShardKeyFieldOutput{})
	pulumi.RegisterOutputType(MongoDbShardKeyFieldArrayOutput{})
	pulumi.RegisterOutputType(MongoDbShardKeyFieldResponseOutput{})
	pulumi.RegisterOutputType(MongoDbShardKeyFieldResponseArrayOutput{})
	pulumi.RegisterOutputType(MongoDbShardKeyInfoResponseOutput{})
	pulumi.RegisterOutputType(MongoDbShardKeyInfoResponsePtrOutput{})
	pulumi.RegisterOutputType(MongoDbShardKeySettingOutput{})
	pulumi.RegisterOutputType(MongoDbShardKeySettingPtrOutput{})
	pulumi.RegisterOutputType(MongoDbShardKeySettingResponseOutput{})
	pulumi.RegisterOutputType(MongoDbShardKeySettingResponsePtrOutput{})
	pulumi.RegisterOutputType(MongoDbThrottlingSettingsOutput{})
	pulumi.RegisterOutputType(MongoDbThrottlingSettingsPtrOutput{})
	pulumi.RegisterOutputType(MongoDbThrottlingSettingsResponseOutput{})
	pulumi.RegisterOutputType(MongoDbThrottlingSettingsResponsePtrOutput{})
	pulumi.RegisterOutputType(MySqlConnectionInfoOutput{})
	pulumi.RegisterOutputType(MySqlConnectionInfoPtrOutput{})
	pulumi.RegisterOutputType(MySqlConnectionInfoResponseOutput{})
	pulumi.RegisterOutputType(MySqlConnectionInfoResponsePtrOutput{})
	pulumi.RegisterOutputType(ODataErrorResponseOutput{})
	pulumi.RegisterOutputType(ODataErrorResponseArrayOutput{})
	pulumi.RegisterOutputType(OracleConnectionInfoOutput{})
	pulumi.RegisterOutputType(OracleConnectionInfoPtrOutput{})
	pulumi.RegisterOutputType(OracleConnectionInfoResponseOutput{})
	pulumi.RegisterOutputType(OracleConnectionInfoResponsePtrOutput{})
	pulumi.RegisterOutputType(OrphanedUserInfoResponseOutput{})
	pulumi.RegisterOutputType(OrphanedUserInfoResponseArrayOutput{})
	pulumi.RegisterOutputType(PostgreSqlConnectionInfoOutput{})
	pulumi.RegisterOutputType(PostgreSqlConnectionInfoPtrOutput{})
	pulumi.RegisterOutputType(PostgreSqlConnectionInfoResponseOutput{})
	pulumi.RegisterOutputType(PostgreSqlConnectionInfoResponsePtrOutput{})
	pulumi.RegisterOutputType(ProjectFilePropertiesOutput{})
	pulumi.RegisterOutputType(ProjectFilePropertiesPtrOutput{})
	pulumi.RegisterOutputType(ProjectFilePropertiesResponseOutput{})
	pulumi.RegisterOutputType(ProjectFilePropertiesResponsePtrOutput{})
	pulumi.RegisterOutputType(ReportableExceptionResponseOutput{})
	pulumi.RegisterOutputType(ReportableExceptionResponseArrayOutput{})
	pulumi.RegisterOutputType(SelectedCertificateInputOutput{})
	pulumi.RegisterOutputType(SelectedCertificateInputArrayOutput{})
	pulumi.RegisterOutputType(SelectedCertificateInputResponseOutput{})
	pulumi.RegisterOutputType(SelectedCertificateInputResponseArrayOutput{})
	pulumi.RegisterOutputType(ServiceSkuOutput{})
	pulumi.RegisterOutputType(ServiceSkuPtrOutput{})
	pulumi.RegisterOutputType(ServiceSkuResponseOutput{})
	pulumi.RegisterOutputType(ServiceSkuResponsePtrOutput{})
	pulumi.RegisterOutputType(SqlConnectionInfoOutput{})
	pulumi.RegisterOutputType(SqlConnectionInfoPtrOutput{})
	pulumi.RegisterOutputType(SqlConnectionInfoResponseOutput{})
	pulumi.RegisterOutputType(SqlConnectionInfoResponsePtrOutput{})
	pulumi.RegisterOutputType(SsisMigrationInfoOutput{})
	pulumi.RegisterOutputType(SsisMigrationInfoPtrOutput{})
	pulumi.RegisterOutputType(SsisMigrationInfoResponseOutput{})
	pulumi.RegisterOutputType(SsisMigrationInfoResponsePtrOutput{})
	pulumi.RegisterOutputType(SyncMigrationDatabaseErrorEventResponseOutput{})
	pulumi.RegisterOutputType(SyncMigrationDatabaseErrorEventResponseArrayOutput{})
	pulumi.RegisterOutputType(ValidateMigrationInputSqlServerSqlDbSyncTaskPropertiesOutput{})
	pulumi.RegisterOutputType(ValidateMigrationInputSqlServerSqlDbSyncTaskPropertiesResponseOutput{})
	pulumi.RegisterOutputType(ValidateMigrationInputSqlServerSqlMISyncTaskInputOutput{})
	pulumi.RegisterOutputType(ValidateMigrationInputSqlServerSqlMISyncTaskInputPtrOutput{})
	pulumi.RegisterOutputType(ValidateMigrationInputSqlServerSqlMISyncTaskInputResponseOutput{})
	pulumi.RegisterOutputType(ValidateMigrationInputSqlServerSqlMISyncTaskInputResponsePtrOutput{})
	pulumi.RegisterOutputType(ValidateMigrationInputSqlServerSqlMISyncTaskOutputResponseOutput{})
	pulumi.RegisterOutputType(ValidateMigrationInputSqlServerSqlMISyncTaskOutputResponseArrayOutput{})
	pulumi.RegisterOutputType(ValidateMigrationInputSqlServerSqlMISyncTaskPropertiesOutput{})
	pulumi.RegisterOutputType(ValidateMigrationInputSqlServerSqlMISyncTaskPropertiesResponseOutput{})
	pulumi.RegisterOutputType(ValidateMigrationInputSqlServerSqlMITaskInputOutput{})
	pulumi.RegisterOutputType(ValidateMigrationInputSqlServerSqlMITaskInputPtrOutput{})
	pulumi.RegisterOutputType(ValidateMigrationInputSqlServerSqlMITaskInputResponseOutput{})
	pulumi.RegisterOutputType(ValidateMigrationInputSqlServerSqlMITaskInputResponsePtrOutput{})
	pulumi.RegisterOutputType(ValidateMigrationInputSqlServerSqlMITaskOutputResponseOutput{})
	pulumi.RegisterOutputType(ValidateMigrationInputSqlServerSqlMITaskOutputResponseArrayOutput{})
	pulumi.RegisterOutputType(ValidateMigrationInputSqlServerSqlMITaskPropertiesOutput{})
	pulumi.RegisterOutputType(ValidateMigrationInputSqlServerSqlMITaskPropertiesResponseOutput{})
	pulumi.RegisterOutputType(ValidateMongoDbTaskPropertiesOutput{})
	pulumi.RegisterOutputType(ValidateMongoDbTaskPropertiesResponseOutput{})
	pulumi.RegisterOutputType(ValidateOracleAzureDbForPostgreSqlSyncTaskPropertiesOutput{})
	pulumi.RegisterOutputType(ValidateOracleAzureDbForPostgreSqlSyncTaskPropertiesResponseOutput{})
	pulumi.RegisterOutputType(ValidateOracleAzureDbPostgreSqlSyncTaskOutputResponseOutput{})
	pulumi.RegisterOutputType(ValidateOracleAzureDbPostgreSqlSyncTaskOutputResponseArrayOutput{})
	pulumi.RegisterOutputType(ValidateSyncMigrationInputSqlServerTaskInputOutput{})
	pulumi.RegisterOutputType(ValidateSyncMigrationInputSqlServerTaskInputPtrOutput{})
	pulumi.RegisterOutputType(ValidateSyncMigrationInputSqlServerTaskInputResponseOutput{})
	pulumi.RegisterOutputType(ValidateSyncMigrationInputSqlServerTaskInputResponsePtrOutput{})
	pulumi.RegisterOutputType(ValidateSyncMigrationInputSqlServerTaskOutputResponseOutput{})
	pulumi.RegisterOutputType(ValidateSyncMigrationInputSqlServerTaskOutputResponseArrayOutput{})
}
