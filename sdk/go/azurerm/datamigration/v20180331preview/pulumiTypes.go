// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v20180331preview

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// Defines the connection properties of a server
type ConnectionInfo struct {
	// Password credential.
	Password *string `pulumi:"password"`
	// Type of connection info
	Type string `pulumi:"type"`
	// User name
	UserName *string `pulumi:"userName"`
}

// ConnectionInfoInput is an input type that accepts ConnectionInfoArgs and ConnectionInfoOutput values.
// You can construct a concrete instance of `ConnectionInfoInput` via:
//
//          ConnectionInfoArgs{...}
type ConnectionInfoInput interface {
	pulumi.Input

	ToConnectionInfoOutput() ConnectionInfoOutput
	ToConnectionInfoOutputWithContext(context.Context) ConnectionInfoOutput
}

// Defines the connection properties of a server
type ConnectionInfoArgs struct {
	// Password credential.
	Password pulumi.StringPtrInput `pulumi:"password"`
	// Type of connection info
	Type pulumi.StringInput `pulumi:"type"`
	// User name
	UserName pulumi.StringPtrInput `pulumi:"userName"`
}

func (ConnectionInfoArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectionInfo)(nil)).Elem()
}

func (i ConnectionInfoArgs) ToConnectionInfoOutput() ConnectionInfoOutput {
	return i.ToConnectionInfoOutputWithContext(context.Background())
}

func (i ConnectionInfoArgs) ToConnectionInfoOutputWithContext(ctx context.Context) ConnectionInfoOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectionInfoOutput)
}

func (i ConnectionInfoArgs) ToConnectionInfoPtrOutput() ConnectionInfoPtrOutput {
	return i.ToConnectionInfoPtrOutputWithContext(context.Background())
}

func (i ConnectionInfoArgs) ToConnectionInfoPtrOutputWithContext(ctx context.Context) ConnectionInfoPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectionInfoOutput).ToConnectionInfoPtrOutputWithContext(ctx)
}

// ConnectionInfoPtrInput is an input type that accepts ConnectionInfoArgs, ConnectionInfoPtr and ConnectionInfoPtrOutput values.
// You can construct a concrete instance of `ConnectionInfoPtrInput` via:
//
//          ConnectionInfoArgs{...}
//
//  or:
//
//          nil
type ConnectionInfoPtrInput interface {
	pulumi.Input

	ToConnectionInfoPtrOutput() ConnectionInfoPtrOutput
	ToConnectionInfoPtrOutputWithContext(context.Context) ConnectionInfoPtrOutput
}

type connectionInfoPtrType ConnectionInfoArgs

func ConnectionInfoPtr(v *ConnectionInfoArgs) ConnectionInfoPtrInput {
	return (*connectionInfoPtrType)(v)
}

func (*connectionInfoPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ConnectionInfo)(nil)).Elem()
}

func (i *connectionInfoPtrType) ToConnectionInfoPtrOutput() ConnectionInfoPtrOutput {
	return i.ToConnectionInfoPtrOutputWithContext(context.Background())
}

func (i *connectionInfoPtrType) ToConnectionInfoPtrOutputWithContext(ctx context.Context) ConnectionInfoPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectionInfoPtrOutput)
}

// Defines the connection properties of a server
type ConnectionInfoOutput struct{ *pulumi.OutputState }

func (ConnectionInfoOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectionInfo)(nil)).Elem()
}

func (o ConnectionInfoOutput) ToConnectionInfoOutput() ConnectionInfoOutput {
	return o
}

func (o ConnectionInfoOutput) ToConnectionInfoOutputWithContext(ctx context.Context) ConnectionInfoOutput {
	return o
}

func (o ConnectionInfoOutput) ToConnectionInfoPtrOutput() ConnectionInfoPtrOutput {
	return o.ToConnectionInfoPtrOutputWithContext(context.Background())
}

func (o ConnectionInfoOutput) ToConnectionInfoPtrOutputWithContext(ctx context.Context) ConnectionInfoPtrOutput {
	return o.ApplyT(func(v ConnectionInfo) *ConnectionInfo {
		return &v
	}).(ConnectionInfoPtrOutput)
}

// Password credential.
func (o ConnectionInfoOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ConnectionInfo) *string { return v.Password }).(pulumi.StringPtrOutput)
}

// Type of connection info
func (o ConnectionInfoOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectionInfo) string { return v.Type }).(pulumi.StringOutput)
}

// User name
func (o ConnectionInfoOutput) UserName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ConnectionInfo) *string { return v.UserName }).(pulumi.StringPtrOutput)
}

type ConnectionInfoPtrOutput struct{ *pulumi.OutputState }

func (ConnectionInfoPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ConnectionInfo)(nil)).Elem()
}

func (o ConnectionInfoPtrOutput) ToConnectionInfoPtrOutput() ConnectionInfoPtrOutput {
	return o
}

func (o ConnectionInfoPtrOutput) ToConnectionInfoPtrOutputWithContext(ctx context.Context) ConnectionInfoPtrOutput {
	return o
}

func (o ConnectionInfoPtrOutput) Elem() ConnectionInfoOutput {
	return o.ApplyT(func(v *ConnectionInfo) ConnectionInfo { return *v }).(ConnectionInfoOutput)
}

// Password credential.
func (o ConnectionInfoPtrOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConnectionInfo) *string {
		if v == nil {
			return nil
		}
		return v.Password
	}).(pulumi.StringPtrOutput)
}

// Type of connection info
func (o ConnectionInfoPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConnectionInfo) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

// User name
func (o ConnectionInfoPtrOutput) UserName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConnectionInfo) *string {
		if v == nil {
			return nil
		}
		return v.UserName
	}).(pulumi.StringPtrOutput)
}

// Defines the connection properties of a server
type ConnectionInfoResponse struct {
	// Password credential.
	Password *string `pulumi:"password"`
	// Type of connection info
	Type string `pulumi:"type"`
	// User name
	UserName *string `pulumi:"userName"`
}

// ConnectionInfoResponseInput is an input type that accepts ConnectionInfoResponseArgs and ConnectionInfoResponseOutput values.
// You can construct a concrete instance of `ConnectionInfoResponseInput` via:
//
//          ConnectionInfoResponseArgs{...}
type ConnectionInfoResponseInput interface {
	pulumi.Input

	ToConnectionInfoResponseOutput() ConnectionInfoResponseOutput
	ToConnectionInfoResponseOutputWithContext(context.Context) ConnectionInfoResponseOutput
}

// Defines the connection properties of a server
type ConnectionInfoResponseArgs struct {
	// Password credential.
	Password pulumi.StringPtrInput `pulumi:"password"`
	// Type of connection info
	Type pulumi.StringInput `pulumi:"type"`
	// User name
	UserName pulumi.StringPtrInput `pulumi:"userName"`
}

func (ConnectionInfoResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectionInfoResponse)(nil)).Elem()
}

func (i ConnectionInfoResponseArgs) ToConnectionInfoResponseOutput() ConnectionInfoResponseOutput {
	return i.ToConnectionInfoResponseOutputWithContext(context.Background())
}

func (i ConnectionInfoResponseArgs) ToConnectionInfoResponseOutputWithContext(ctx context.Context) ConnectionInfoResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectionInfoResponseOutput)
}

func (i ConnectionInfoResponseArgs) ToConnectionInfoResponsePtrOutput() ConnectionInfoResponsePtrOutput {
	return i.ToConnectionInfoResponsePtrOutputWithContext(context.Background())
}

func (i ConnectionInfoResponseArgs) ToConnectionInfoResponsePtrOutputWithContext(ctx context.Context) ConnectionInfoResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectionInfoResponseOutput).ToConnectionInfoResponsePtrOutputWithContext(ctx)
}

// ConnectionInfoResponsePtrInput is an input type that accepts ConnectionInfoResponseArgs, ConnectionInfoResponsePtr and ConnectionInfoResponsePtrOutput values.
// You can construct a concrete instance of `ConnectionInfoResponsePtrInput` via:
//
//          ConnectionInfoResponseArgs{...}
//
//  or:
//
//          nil
type ConnectionInfoResponsePtrInput interface {
	pulumi.Input

	ToConnectionInfoResponsePtrOutput() ConnectionInfoResponsePtrOutput
	ToConnectionInfoResponsePtrOutputWithContext(context.Context) ConnectionInfoResponsePtrOutput
}

type connectionInfoResponsePtrType ConnectionInfoResponseArgs

func ConnectionInfoResponsePtr(v *ConnectionInfoResponseArgs) ConnectionInfoResponsePtrInput {
	return (*connectionInfoResponsePtrType)(v)
}

func (*connectionInfoResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ConnectionInfoResponse)(nil)).Elem()
}

func (i *connectionInfoResponsePtrType) ToConnectionInfoResponsePtrOutput() ConnectionInfoResponsePtrOutput {
	return i.ToConnectionInfoResponsePtrOutputWithContext(context.Background())
}

func (i *connectionInfoResponsePtrType) ToConnectionInfoResponsePtrOutputWithContext(ctx context.Context) ConnectionInfoResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectionInfoResponsePtrOutput)
}

// Defines the connection properties of a server
type ConnectionInfoResponseOutput struct{ *pulumi.OutputState }

func (ConnectionInfoResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectionInfoResponse)(nil)).Elem()
}

func (o ConnectionInfoResponseOutput) ToConnectionInfoResponseOutput() ConnectionInfoResponseOutput {
	return o
}

func (o ConnectionInfoResponseOutput) ToConnectionInfoResponseOutputWithContext(ctx context.Context) ConnectionInfoResponseOutput {
	return o
}

func (o ConnectionInfoResponseOutput) ToConnectionInfoResponsePtrOutput() ConnectionInfoResponsePtrOutput {
	return o.ToConnectionInfoResponsePtrOutputWithContext(context.Background())
}

func (o ConnectionInfoResponseOutput) ToConnectionInfoResponsePtrOutputWithContext(ctx context.Context) ConnectionInfoResponsePtrOutput {
	return o.ApplyT(func(v ConnectionInfoResponse) *ConnectionInfoResponse {
		return &v
	}).(ConnectionInfoResponsePtrOutput)
}

// Password credential.
func (o ConnectionInfoResponseOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ConnectionInfoResponse) *string { return v.Password }).(pulumi.StringPtrOutput)
}

// Type of connection info
func (o ConnectionInfoResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectionInfoResponse) string { return v.Type }).(pulumi.StringOutput)
}

// User name
func (o ConnectionInfoResponseOutput) UserName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ConnectionInfoResponse) *string { return v.UserName }).(pulumi.StringPtrOutput)
}

type ConnectionInfoResponsePtrOutput struct{ *pulumi.OutputState }

func (ConnectionInfoResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ConnectionInfoResponse)(nil)).Elem()
}

func (o ConnectionInfoResponsePtrOutput) ToConnectionInfoResponsePtrOutput() ConnectionInfoResponsePtrOutput {
	return o
}

func (o ConnectionInfoResponsePtrOutput) ToConnectionInfoResponsePtrOutputWithContext(ctx context.Context) ConnectionInfoResponsePtrOutput {
	return o
}

func (o ConnectionInfoResponsePtrOutput) Elem() ConnectionInfoResponseOutput {
	return o.ApplyT(func(v *ConnectionInfoResponse) ConnectionInfoResponse { return *v }).(ConnectionInfoResponseOutput)
}

// Password credential.
func (o ConnectionInfoResponsePtrOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConnectionInfoResponse) *string {
		if v == nil {
			return nil
		}
		return v.Password
	}).(pulumi.StringPtrOutput)
}

// Type of connection info
func (o ConnectionInfoResponsePtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConnectionInfoResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

// User name
func (o ConnectionInfoResponsePtrOutput) UserName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConnectionInfoResponse) *string {
		if v == nil {
			return nil
		}
		return v.UserName
	}).(pulumi.StringPtrOutput)
}

// Project Database Details
type DatabaseInfo struct {
	// Name of the database
	SourceDatabaseName string `pulumi:"sourceDatabaseName"`
}

// DatabaseInfoInput is an input type that accepts DatabaseInfoArgs and DatabaseInfoOutput values.
// You can construct a concrete instance of `DatabaseInfoInput` via:
//
//          DatabaseInfoArgs{...}
type DatabaseInfoInput interface {
	pulumi.Input

	ToDatabaseInfoOutput() DatabaseInfoOutput
	ToDatabaseInfoOutputWithContext(context.Context) DatabaseInfoOutput
}

// Project Database Details
type DatabaseInfoArgs struct {
	// Name of the database
	SourceDatabaseName pulumi.StringInput `pulumi:"sourceDatabaseName"`
}

func (DatabaseInfoArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DatabaseInfo)(nil)).Elem()
}

func (i DatabaseInfoArgs) ToDatabaseInfoOutput() DatabaseInfoOutput {
	return i.ToDatabaseInfoOutputWithContext(context.Background())
}

func (i DatabaseInfoArgs) ToDatabaseInfoOutputWithContext(ctx context.Context) DatabaseInfoOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatabaseInfoOutput)
}

// DatabaseInfoArrayInput is an input type that accepts DatabaseInfoArray and DatabaseInfoArrayOutput values.
// You can construct a concrete instance of `DatabaseInfoArrayInput` via:
//
//          DatabaseInfoArray{ DatabaseInfoArgs{...} }
type DatabaseInfoArrayInput interface {
	pulumi.Input

	ToDatabaseInfoArrayOutput() DatabaseInfoArrayOutput
	ToDatabaseInfoArrayOutputWithContext(context.Context) DatabaseInfoArrayOutput
}

type DatabaseInfoArray []DatabaseInfoInput

func (DatabaseInfoArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DatabaseInfo)(nil)).Elem()
}

func (i DatabaseInfoArray) ToDatabaseInfoArrayOutput() DatabaseInfoArrayOutput {
	return i.ToDatabaseInfoArrayOutputWithContext(context.Background())
}

func (i DatabaseInfoArray) ToDatabaseInfoArrayOutputWithContext(ctx context.Context) DatabaseInfoArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatabaseInfoArrayOutput)
}

// Project Database Details
type DatabaseInfoOutput struct{ *pulumi.OutputState }

func (DatabaseInfoOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DatabaseInfo)(nil)).Elem()
}

func (o DatabaseInfoOutput) ToDatabaseInfoOutput() DatabaseInfoOutput {
	return o
}

func (o DatabaseInfoOutput) ToDatabaseInfoOutputWithContext(ctx context.Context) DatabaseInfoOutput {
	return o
}

// Name of the database
func (o DatabaseInfoOutput) SourceDatabaseName() pulumi.StringOutput {
	return o.ApplyT(func(v DatabaseInfo) string { return v.SourceDatabaseName }).(pulumi.StringOutput)
}

type DatabaseInfoArrayOutput struct{ *pulumi.OutputState }

func (DatabaseInfoArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DatabaseInfo)(nil)).Elem()
}

func (o DatabaseInfoArrayOutput) ToDatabaseInfoArrayOutput() DatabaseInfoArrayOutput {
	return o
}

func (o DatabaseInfoArrayOutput) ToDatabaseInfoArrayOutputWithContext(ctx context.Context) DatabaseInfoArrayOutput {
	return o
}

func (o DatabaseInfoArrayOutput) Index(i pulumi.IntInput) DatabaseInfoOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DatabaseInfo {
		return vs[0].([]DatabaseInfo)[vs[1].(int)]
	}).(DatabaseInfoOutput)
}

// Project Database Details
type DatabaseInfoResponse struct {
	// Name of the database
	SourceDatabaseName string `pulumi:"sourceDatabaseName"`
}

// DatabaseInfoResponseInput is an input type that accepts DatabaseInfoResponseArgs and DatabaseInfoResponseOutput values.
// You can construct a concrete instance of `DatabaseInfoResponseInput` via:
//
//          DatabaseInfoResponseArgs{...}
type DatabaseInfoResponseInput interface {
	pulumi.Input

	ToDatabaseInfoResponseOutput() DatabaseInfoResponseOutput
	ToDatabaseInfoResponseOutputWithContext(context.Context) DatabaseInfoResponseOutput
}

// Project Database Details
type DatabaseInfoResponseArgs struct {
	// Name of the database
	SourceDatabaseName pulumi.StringInput `pulumi:"sourceDatabaseName"`
}

func (DatabaseInfoResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DatabaseInfoResponse)(nil)).Elem()
}

func (i DatabaseInfoResponseArgs) ToDatabaseInfoResponseOutput() DatabaseInfoResponseOutput {
	return i.ToDatabaseInfoResponseOutputWithContext(context.Background())
}

func (i DatabaseInfoResponseArgs) ToDatabaseInfoResponseOutputWithContext(ctx context.Context) DatabaseInfoResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatabaseInfoResponseOutput)
}

// DatabaseInfoResponseArrayInput is an input type that accepts DatabaseInfoResponseArray and DatabaseInfoResponseArrayOutput values.
// You can construct a concrete instance of `DatabaseInfoResponseArrayInput` via:
//
//          DatabaseInfoResponseArray{ DatabaseInfoResponseArgs{...} }
type DatabaseInfoResponseArrayInput interface {
	pulumi.Input

	ToDatabaseInfoResponseArrayOutput() DatabaseInfoResponseArrayOutput
	ToDatabaseInfoResponseArrayOutputWithContext(context.Context) DatabaseInfoResponseArrayOutput
}

type DatabaseInfoResponseArray []DatabaseInfoResponseInput

func (DatabaseInfoResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DatabaseInfoResponse)(nil)).Elem()
}

func (i DatabaseInfoResponseArray) ToDatabaseInfoResponseArrayOutput() DatabaseInfoResponseArrayOutput {
	return i.ToDatabaseInfoResponseArrayOutputWithContext(context.Background())
}

func (i DatabaseInfoResponseArray) ToDatabaseInfoResponseArrayOutputWithContext(ctx context.Context) DatabaseInfoResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatabaseInfoResponseArrayOutput)
}

// Project Database Details
type DatabaseInfoResponseOutput struct{ *pulumi.OutputState }

func (DatabaseInfoResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DatabaseInfoResponse)(nil)).Elem()
}

func (o DatabaseInfoResponseOutput) ToDatabaseInfoResponseOutput() DatabaseInfoResponseOutput {
	return o
}

func (o DatabaseInfoResponseOutput) ToDatabaseInfoResponseOutputWithContext(ctx context.Context) DatabaseInfoResponseOutput {
	return o
}

// Name of the database
func (o DatabaseInfoResponseOutput) SourceDatabaseName() pulumi.StringOutput {
	return o.ApplyT(func(v DatabaseInfoResponse) string { return v.SourceDatabaseName }).(pulumi.StringOutput)
}

type DatabaseInfoResponseArrayOutput struct{ *pulumi.OutputState }

func (DatabaseInfoResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DatabaseInfoResponse)(nil)).Elem()
}

func (o DatabaseInfoResponseArrayOutput) ToDatabaseInfoResponseArrayOutput() DatabaseInfoResponseArrayOutput {
	return o
}

func (o DatabaseInfoResponseArrayOutput) ToDatabaseInfoResponseArrayOutputWithContext(ctx context.Context) DatabaseInfoResponseArrayOutput {
	return o
}

func (o DatabaseInfoResponseArrayOutput) Index(i pulumi.IntInput) DatabaseInfoResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DatabaseInfoResponse {
		return vs[0].([]DatabaseInfoResponse)[vs[1].(int)]
	}).(DatabaseInfoResponseOutput)
}

// Error information in OData format.
type ODataErrorResponse struct {
	// The machine-readable description of the error, such as 'InvalidRequest' or 'InternalServerError'
	Code *string `pulumi:"code"`
	// Inner errors that caused this error
	Details []ODataErrorResponse `pulumi:"details"`
	// The human-readable description of the error
	Message *string `pulumi:"message"`
}

// ODataErrorResponseInput is an input type that accepts ODataErrorResponseArgs and ODataErrorResponseOutput values.
// You can construct a concrete instance of `ODataErrorResponseInput` via:
//
//          ODataErrorResponseArgs{...}
type ODataErrorResponseInput interface {
	pulumi.Input

	ToODataErrorResponseOutput() ODataErrorResponseOutput
	ToODataErrorResponseOutputWithContext(context.Context) ODataErrorResponseOutput
}

// Error information in OData format.
type ODataErrorResponseArgs struct {
	// The machine-readable description of the error, such as 'InvalidRequest' or 'InternalServerError'
	Code pulumi.StringPtrInput `pulumi:"code"`
	// Inner errors that caused this error
	Details ODataErrorResponseArrayInput `pulumi:"details"`
	// The human-readable description of the error
	Message pulumi.StringPtrInput `pulumi:"message"`
}

func (ODataErrorResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ODataErrorResponse)(nil)).Elem()
}

func (i ODataErrorResponseArgs) ToODataErrorResponseOutput() ODataErrorResponseOutput {
	return i.ToODataErrorResponseOutputWithContext(context.Background())
}

func (i ODataErrorResponseArgs) ToODataErrorResponseOutputWithContext(ctx context.Context) ODataErrorResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ODataErrorResponseOutput)
}

// ODataErrorResponseArrayInput is an input type that accepts ODataErrorResponseArray and ODataErrorResponseArrayOutput values.
// You can construct a concrete instance of `ODataErrorResponseArrayInput` via:
//
//          ODataErrorResponseArray{ ODataErrorResponseArgs{...} }
type ODataErrorResponseArrayInput interface {
	pulumi.Input

	ToODataErrorResponseArrayOutput() ODataErrorResponseArrayOutput
	ToODataErrorResponseArrayOutputWithContext(context.Context) ODataErrorResponseArrayOutput
}

type ODataErrorResponseArray []ODataErrorResponseInput

func (ODataErrorResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ODataErrorResponse)(nil)).Elem()
}

func (i ODataErrorResponseArray) ToODataErrorResponseArrayOutput() ODataErrorResponseArrayOutput {
	return i.ToODataErrorResponseArrayOutputWithContext(context.Background())
}

func (i ODataErrorResponseArray) ToODataErrorResponseArrayOutputWithContext(ctx context.Context) ODataErrorResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ODataErrorResponseArrayOutput)
}

// Error information in OData format.
type ODataErrorResponseOutput struct{ *pulumi.OutputState }

func (ODataErrorResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ODataErrorResponse)(nil)).Elem()
}

func (o ODataErrorResponseOutput) ToODataErrorResponseOutput() ODataErrorResponseOutput {
	return o
}

func (o ODataErrorResponseOutput) ToODataErrorResponseOutputWithContext(ctx context.Context) ODataErrorResponseOutput {
	return o
}

// The machine-readable description of the error, such as 'InvalidRequest' or 'InternalServerError'
func (o ODataErrorResponseOutput) Code() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ODataErrorResponse) *string { return v.Code }).(pulumi.StringPtrOutput)
}

// Inner errors that caused this error
func (o ODataErrorResponseOutput) Details() ODataErrorResponseArrayOutput {
	return o.ApplyT(func(v ODataErrorResponse) []ODataErrorResponse { return v.Details }).(ODataErrorResponseArrayOutput)
}

// The human-readable description of the error
func (o ODataErrorResponseOutput) Message() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ODataErrorResponse) *string { return v.Message }).(pulumi.StringPtrOutput)
}

type ODataErrorResponseArrayOutput struct{ *pulumi.OutputState }

func (ODataErrorResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ODataErrorResponse)(nil)).Elem()
}

func (o ODataErrorResponseArrayOutput) ToODataErrorResponseArrayOutput() ODataErrorResponseArrayOutput {
	return o
}

func (o ODataErrorResponseArrayOutput) ToODataErrorResponseArrayOutputWithContext(ctx context.Context) ODataErrorResponseArrayOutput {
	return o
}

func (o ODataErrorResponseArrayOutput) Index(i pulumi.IntInput) ODataErrorResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ODataErrorResponse {
		return vs[0].([]ODataErrorResponse)[vs[1].(int)]
	}).(ODataErrorResponseOutput)
}

// Base class for all types of DMS task properties. If task is not supported by current client, this object is returned.
type ProjectTaskProperties struct {
	// Task type.
	TaskType string `pulumi:"taskType"`
}

// ProjectTaskPropertiesInput is an input type that accepts ProjectTaskPropertiesArgs and ProjectTaskPropertiesOutput values.
// You can construct a concrete instance of `ProjectTaskPropertiesInput` via:
//
//          ProjectTaskPropertiesArgs{...}
type ProjectTaskPropertiesInput interface {
	pulumi.Input

	ToProjectTaskPropertiesOutput() ProjectTaskPropertiesOutput
	ToProjectTaskPropertiesOutputWithContext(context.Context) ProjectTaskPropertiesOutput
}

// Base class for all types of DMS task properties. If task is not supported by current client, this object is returned.
type ProjectTaskPropertiesArgs struct {
	// Task type.
	TaskType pulumi.StringInput `pulumi:"taskType"`
}

func (ProjectTaskPropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectTaskProperties)(nil)).Elem()
}

func (i ProjectTaskPropertiesArgs) ToProjectTaskPropertiesOutput() ProjectTaskPropertiesOutput {
	return i.ToProjectTaskPropertiesOutputWithContext(context.Background())
}

func (i ProjectTaskPropertiesArgs) ToProjectTaskPropertiesOutputWithContext(ctx context.Context) ProjectTaskPropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectTaskPropertiesOutput)
}

func (i ProjectTaskPropertiesArgs) ToProjectTaskPropertiesPtrOutput() ProjectTaskPropertiesPtrOutput {
	return i.ToProjectTaskPropertiesPtrOutputWithContext(context.Background())
}

func (i ProjectTaskPropertiesArgs) ToProjectTaskPropertiesPtrOutputWithContext(ctx context.Context) ProjectTaskPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectTaskPropertiesOutput).ToProjectTaskPropertiesPtrOutputWithContext(ctx)
}

// ProjectTaskPropertiesPtrInput is an input type that accepts ProjectTaskPropertiesArgs, ProjectTaskPropertiesPtr and ProjectTaskPropertiesPtrOutput values.
// You can construct a concrete instance of `ProjectTaskPropertiesPtrInput` via:
//
//          ProjectTaskPropertiesArgs{...}
//
//  or:
//
//          nil
type ProjectTaskPropertiesPtrInput interface {
	pulumi.Input

	ToProjectTaskPropertiesPtrOutput() ProjectTaskPropertiesPtrOutput
	ToProjectTaskPropertiesPtrOutputWithContext(context.Context) ProjectTaskPropertiesPtrOutput
}

type projectTaskPropertiesPtrType ProjectTaskPropertiesArgs

func ProjectTaskPropertiesPtr(v *ProjectTaskPropertiesArgs) ProjectTaskPropertiesPtrInput {
	return (*projectTaskPropertiesPtrType)(v)
}

func (*projectTaskPropertiesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ProjectTaskProperties)(nil)).Elem()
}

func (i *projectTaskPropertiesPtrType) ToProjectTaskPropertiesPtrOutput() ProjectTaskPropertiesPtrOutput {
	return i.ToProjectTaskPropertiesPtrOutputWithContext(context.Background())
}

func (i *projectTaskPropertiesPtrType) ToProjectTaskPropertiesPtrOutputWithContext(ctx context.Context) ProjectTaskPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectTaskPropertiesPtrOutput)
}

// Base class for all types of DMS task properties. If task is not supported by current client, this object is returned.
type ProjectTaskPropertiesOutput struct{ *pulumi.OutputState }

func (ProjectTaskPropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectTaskProperties)(nil)).Elem()
}

func (o ProjectTaskPropertiesOutput) ToProjectTaskPropertiesOutput() ProjectTaskPropertiesOutput {
	return o
}

func (o ProjectTaskPropertiesOutput) ToProjectTaskPropertiesOutputWithContext(ctx context.Context) ProjectTaskPropertiesOutput {
	return o
}

func (o ProjectTaskPropertiesOutput) ToProjectTaskPropertiesPtrOutput() ProjectTaskPropertiesPtrOutput {
	return o.ToProjectTaskPropertiesPtrOutputWithContext(context.Background())
}

func (o ProjectTaskPropertiesOutput) ToProjectTaskPropertiesPtrOutputWithContext(ctx context.Context) ProjectTaskPropertiesPtrOutput {
	return o.ApplyT(func(v ProjectTaskProperties) *ProjectTaskProperties {
		return &v
	}).(ProjectTaskPropertiesPtrOutput)
}

// Task type.
func (o ProjectTaskPropertiesOutput) TaskType() pulumi.StringOutput {
	return o.ApplyT(func(v ProjectTaskProperties) string { return v.TaskType }).(pulumi.StringOutput)
}

type ProjectTaskPropertiesPtrOutput struct{ *pulumi.OutputState }

func (ProjectTaskPropertiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ProjectTaskProperties)(nil)).Elem()
}

func (o ProjectTaskPropertiesPtrOutput) ToProjectTaskPropertiesPtrOutput() ProjectTaskPropertiesPtrOutput {
	return o
}

func (o ProjectTaskPropertiesPtrOutput) ToProjectTaskPropertiesPtrOutputWithContext(ctx context.Context) ProjectTaskPropertiesPtrOutput {
	return o
}

func (o ProjectTaskPropertiesPtrOutput) Elem() ProjectTaskPropertiesOutput {
	return o.ApplyT(func(v *ProjectTaskProperties) ProjectTaskProperties { return *v }).(ProjectTaskPropertiesOutput)
}

// Task type.
func (o ProjectTaskPropertiesPtrOutput) TaskType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProjectTaskProperties) *string {
		if v == nil {
			return nil
		}
		return &v.TaskType
	}).(pulumi.StringPtrOutput)
}

// Base class for all types of DMS task properties. If task is not supported by current client, this object is returned.
type ProjectTaskPropertiesResponse struct {
	// Array of errors. This is ignored if submitted.
	Errors []ODataErrorResponse `pulumi:"errors"`
	// The state of the task. This is ignored if submitted.
	State string `pulumi:"state"`
	// Task type.
	TaskType string `pulumi:"taskType"`
}

// ProjectTaskPropertiesResponseInput is an input type that accepts ProjectTaskPropertiesResponseArgs and ProjectTaskPropertiesResponseOutput values.
// You can construct a concrete instance of `ProjectTaskPropertiesResponseInput` via:
//
//          ProjectTaskPropertiesResponseArgs{...}
type ProjectTaskPropertiesResponseInput interface {
	pulumi.Input

	ToProjectTaskPropertiesResponseOutput() ProjectTaskPropertiesResponseOutput
	ToProjectTaskPropertiesResponseOutputWithContext(context.Context) ProjectTaskPropertiesResponseOutput
}

// Base class for all types of DMS task properties. If task is not supported by current client, this object is returned.
type ProjectTaskPropertiesResponseArgs struct {
	// Array of errors. This is ignored if submitted.
	Errors ODataErrorResponseArrayInput `pulumi:"errors"`
	// The state of the task. This is ignored if submitted.
	State pulumi.StringInput `pulumi:"state"`
	// Task type.
	TaskType pulumi.StringInput `pulumi:"taskType"`
}

func (ProjectTaskPropertiesResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectTaskPropertiesResponse)(nil)).Elem()
}

func (i ProjectTaskPropertiesResponseArgs) ToProjectTaskPropertiesResponseOutput() ProjectTaskPropertiesResponseOutput {
	return i.ToProjectTaskPropertiesResponseOutputWithContext(context.Background())
}

func (i ProjectTaskPropertiesResponseArgs) ToProjectTaskPropertiesResponseOutputWithContext(ctx context.Context) ProjectTaskPropertiesResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectTaskPropertiesResponseOutput)
}

func (i ProjectTaskPropertiesResponseArgs) ToProjectTaskPropertiesResponsePtrOutput() ProjectTaskPropertiesResponsePtrOutput {
	return i.ToProjectTaskPropertiesResponsePtrOutputWithContext(context.Background())
}

func (i ProjectTaskPropertiesResponseArgs) ToProjectTaskPropertiesResponsePtrOutputWithContext(ctx context.Context) ProjectTaskPropertiesResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectTaskPropertiesResponseOutput).ToProjectTaskPropertiesResponsePtrOutputWithContext(ctx)
}

// ProjectTaskPropertiesResponsePtrInput is an input type that accepts ProjectTaskPropertiesResponseArgs, ProjectTaskPropertiesResponsePtr and ProjectTaskPropertiesResponsePtrOutput values.
// You can construct a concrete instance of `ProjectTaskPropertiesResponsePtrInput` via:
//
//          ProjectTaskPropertiesResponseArgs{...}
//
//  or:
//
//          nil
type ProjectTaskPropertiesResponsePtrInput interface {
	pulumi.Input

	ToProjectTaskPropertiesResponsePtrOutput() ProjectTaskPropertiesResponsePtrOutput
	ToProjectTaskPropertiesResponsePtrOutputWithContext(context.Context) ProjectTaskPropertiesResponsePtrOutput
}

type projectTaskPropertiesResponsePtrType ProjectTaskPropertiesResponseArgs

func ProjectTaskPropertiesResponsePtr(v *ProjectTaskPropertiesResponseArgs) ProjectTaskPropertiesResponsePtrInput {
	return (*projectTaskPropertiesResponsePtrType)(v)
}

func (*projectTaskPropertiesResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ProjectTaskPropertiesResponse)(nil)).Elem()
}

func (i *projectTaskPropertiesResponsePtrType) ToProjectTaskPropertiesResponsePtrOutput() ProjectTaskPropertiesResponsePtrOutput {
	return i.ToProjectTaskPropertiesResponsePtrOutputWithContext(context.Background())
}

func (i *projectTaskPropertiesResponsePtrType) ToProjectTaskPropertiesResponsePtrOutputWithContext(ctx context.Context) ProjectTaskPropertiesResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectTaskPropertiesResponsePtrOutput)
}

// Base class for all types of DMS task properties. If task is not supported by current client, this object is returned.
type ProjectTaskPropertiesResponseOutput struct{ *pulumi.OutputState }

func (ProjectTaskPropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectTaskPropertiesResponse)(nil)).Elem()
}

func (o ProjectTaskPropertiesResponseOutput) ToProjectTaskPropertiesResponseOutput() ProjectTaskPropertiesResponseOutput {
	return o
}

func (o ProjectTaskPropertiesResponseOutput) ToProjectTaskPropertiesResponseOutputWithContext(ctx context.Context) ProjectTaskPropertiesResponseOutput {
	return o
}

func (o ProjectTaskPropertiesResponseOutput) ToProjectTaskPropertiesResponsePtrOutput() ProjectTaskPropertiesResponsePtrOutput {
	return o.ToProjectTaskPropertiesResponsePtrOutputWithContext(context.Background())
}

func (o ProjectTaskPropertiesResponseOutput) ToProjectTaskPropertiesResponsePtrOutputWithContext(ctx context.Context) ProjectTaskPropertiesResponsePtrOutput {
	return o.ApplyT(func(v ProjectTaskPropertiesResponse) *ProjectTaskPropertiesResponse {
		return &v
	}).(ProjectTaskPropertiesResponsePtrOutput)
}

// Array of errors. This is ignored if submitted.
func (o ProjectTaskPropertiesResponseOutput) Errors() ODataErrorResponseArrayOutput {
	return o.ApplyT(func(v ProjectTaskPropertiesResponse) []ODataErrorResponse { return v.Errors }).(ODataErrorResponseArrayOutput)
}

// The state of the task. This is ignored if submitted.
func (o ProjectTaskPropertiesResponseOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v ProjectTaskPropertiesResponse) string { return v.State }).(pulumi.StringOutput)
}

// Task type.
func (o ProjectTaskPropertiesResponseOutput) TaskType() pulumi.StringOutput {
	return o.ApplyT(func(v ProjectTaskPropertiesResponse) string { return v.TaskType }).(pulumi.StringOutput)
}

type ProjectTaskPropertiesResponsePtrOutput struct{ *pulumi.OutputState }

func (ProjectTaskPropertiesResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ProjectTaskPropertiesResponse)(nil)).Elem()
}

func (o ProjectTaskPropertiesResponsePtrOutput) ToProjectTaskPropertiesResponsePtrOutput() ProjectTaskPropertiesResponsePtrOutput {
	return o
}

func (o ProjectTaskPropertiesResponsePtrOutput) ToProjectTaskPropertiesResponsePtrOutputWithContext(ctx context.Context) ProjectTaskPropertiesResponsePtrOutput {
	return o
}

func (o ProjectTaskPropertiesResponsePtrOutput) Elem() ProjectTaskPropertiesResponseOutput {
	return o.ApplyT(func(v *ProjectTaskPropertiesResponse) ProjectTaskPropertiesResponse { return *v }).(ProjectTaskPropertiesResponseOutput)
}

// Array of errors. This is ignored if submitted.
func (o ProjectTaskPropertiesResponsePtrOutput) Errors() ODataErrorResponseArrayOutput {
	return o.ApplyT(func(v *ProjectTaskPropertiesResponse) []ODataErrorResponse {
		if v == nil {
			return nil
		}
		return v.Errors
	}).(ODataErrorResponseArrayOutput)
}

// The state of the task. This is ignored if submitted.
func (o ProjectTaskPropertiesResponsePtrOutput) State() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProjectTaskPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return &v.State
	}).(pulumi.StringPtrOutput)
}

// Task type.
func (o ProjectTaskPropertiesResponsePtrOutput) TaskType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProjectTaskPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return &v.TaskType
	}).(pulumi.StringPtrOutput)
}

// An Azure SKU instance
type ServiceSku struct {
	// The capacity of the SKU, if it supports scaling
	Capacity *int `pulumi:"capacity"`
	// The SKU family, used when the service has multiple performance classes within a tier, such as 'A', 'D', etc. for virtual machines
	Family *string `pulumi:"family"`
	// The unique name of the SKU, such as 'P3'
	Name *string `pulumi:"name"`
	// The size of the SKU, used when the name alone does not denote a service size or when a SKU has multiple performance classes within a family, e.g. 'A1' for virtual machines
	Size *string `pulumi:"size"`
	// The tier of the SKU, such as 'Free', 'Basic', 'Standard', or 'Premium'
	Tier *string `pulumi:"tier"`
}

// ServiceSkuInput is an input type that accepts ServiceSkuArgs and ServiceSkuOutput values.
// You can construct a concrete instance of `ServiceSkuInput` via:
//
//          ServiceSkuArgs{...}
type ServiceSkuInput interface {
	pulumi.Input

	ToServiceSkuOutput() ServiceSkuOutput
	ToServiceSkuOutputWithContext(context.Context) ServiceSkuOutput
}

// An Azure SKU instance
type ServiceSkuArgs struct {
	// The capacity of the SKU, if it supports scaling
	Capacity pulumi.IntPtrInput `pulumi:"capacity"`
	// The SKU family, used when the service has multiple performance classes within a tier, such as 'A', 'D', etc. for virtual machines
	Family pulumi.StringPtrInput `pulumi:"family"`
	// The unique name of the SKU, such as 'P3'
	Name pulumi.StringPtrInput `pulumi:"name"`
	// The size of the SKU, used when the name alone does not denote a service size or when a SKU has multiple performance classes within a family, e.g. 'A1' for virtual machines
	Size pulumi.StringPtrInput `pulumi:"size"`
	// The tier of the SKU, such as 'Free', 'Basic', 'Standard', or 'Premium'
	Tier pulumi.StringPtrInput `pulumi:"tier"`
}

func (ServiceSkuArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceSku)(nil)).Elem()
}

func (i ServiceSkuArgs) ToServiceSkuOutput() ServiceSkuOutput {
	return i.ToServiceSkuOutputWithContext(context.Background())
}

func (i ServiceSkuArgs) ToServiceSkuOutputWithContext(ctx context.Context) ServiceSkuOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceSkuOutput)
}

func (i ServiceSkuArgs) ToServiceSkuPtrOutput() ServiceSkuPtrOutput {
	return i.ToServiceSkuPtrOutputWithContext(context.Background())
}

func (i ServiceSkuArgs) ToServiceSkuPtrOutputWithContext(ctx context.Context) ServiceSkuPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceSkuOutput).ToServiceSkuPtrOutputWithContext(ctx)
}

// ServiceSkuPtrInput is an input type that accepts ServiceSkuArgs, ServiceSkuPtr and ServiceSkuPtrOutput values.
// You can construct a concrete instance of `ServiceSkuPtrInput` via:
//
//          ServiceSkuArgs{...}
//
//  or:
//
//          nil
type ServiceSkuPtrInput interface {
	pulumi.Input

	ToServiceSkuPtrOutput() ServiceSkuPtrOutput
	ToServiceSkuPtrOutputWithContext(context.Context) ServiceSkuPtrOutput
}

type serviceSkuPtrType ServiceSkuArgs

func ServiceSkuPtr(v *ServiceSkuArgs) ServiceSkuPtrInput {
	return (*serviceSkuPtrType)(v)
}

func (*serviceSkuPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ServiceSku)(nil)).Elem()
}

func (i *serviceSkuPtrType) ToServiceSkuPtrOutput() ServiceSkuPtrOutput {
	return i.ToServiceSkuPtrOutputWithContext(context.Background())
}

func (i *serviceSkuPtrType) ToServiceSkuPtrOutputWithContext(ctx context.Context) ServiceSkuPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceSkuPtrOutput)
}

// An Azure SKU instance
type ServiceSkuOutput struct{ *pulumi.OutputState }

func (ServiceSkuOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceSku)(nil)).Elem()
}

func (o ServiceSkuOutput) ToServiceSkuOutput() ServiceSkuOutput {
	return o
}

func (o ServiceSkuOutput) ToServiceSkuOutputWithContext(ctx context.Context) ServiceSkuOutput {
	return o
}

func (o ServiceSkuOutput) ToServiceSkuPtrOutput() ServiceSkuPtrOutput {
	return o.ToServiceSkuPtrOutputWithContext(context.Background())
}

func (o ServiceSkuOutput) ToServiceSkuPtrOutputWithContext(ctx context.Context) ServiceSkuPtrOutput {
	return o.ApplyT(func(v ServiceSku) *ServiceSku {
		return &v
	}).(ServiceSkuPtrOutput)
}

// The capacity of the SKU, if it supports scaling
func (o ServiceSkuOutput) Capacity() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ServiceSku) *int { return v.Capacity }).(pulumi.IntPtrOutput)
}

// The SKU family, used when the service has multiple performance classes within a tier, such as 'A', 'D', etc. for virtual machines
func (o ServiceSkuOutput) Family() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceSku) *string { return v.Family }).(pulumi.StringPtrOutput)
}

// The unique name of the SKU, such as 'P3'
func (o ServiceSkuOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceSku) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The size of the SKU, used when the name alone does not denote a service size or when a SKU has multiple performance classes within a family, e.g. 'A1' for virtual machines
func (o ServiceSkuOutput) Size() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceSku) *string { return v.Size }).(pulumi.StringPtrOutput)
}

// The tier of the SKU, such as 'Free', 'Basic', 'Standard', or 'Premium'
func (o ServiceSkuOutput) Tier() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceSku) *string { return v.Tier }).(pulumi.StringPtrOutput)
}

type ServiceSkuPtrOutput struct{ *pulumi.OutputState }

func (ServiceSkuPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ServiceSku)(nil)).Elem()
}

func (o ServiceSkuPtrOutput) ToServiceSkuPtrOutput() ServiceSkuPtrOutput {
	return o
}

func (o ServiceSkuPtrOutput) ToServiceSkuPtrOutputWithContext(ctx context.Context) ServiceSkuPtrOutput {
	return o
}

func (o ServiceSkuPtrOutput) Elem() ServiceSkuOutput {
	return o.ApplyT(func(v *ServiceSku) ServiceSku { return *v }).(ServiceSkuOutput)
}

// The capacity of the SKU, if it supports scaling
func (o ServiceSkuPtrOutput) Capacity() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ServiceSku) *int {
		if v == nil {
			return nil
		}
		return v.Capacity
	}).(pulumi.IntPtrOutput)
}

// The SKU family, used when the service has multiple performance classes within a tier, such as 'A', 'D', etc. for virtual machines
func (o ServiceSkuPtrOutput) Family() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServiceSku) *string {
		if v == nil {
			return nil
		}
		return v.Family
	}).(pulumi.StringPtrOutput)
}

// The unique name of the SKU, such as 'P3'
func (o ServiceSkuPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServiceSku) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// The size of the SKU, used when the name alone does not denote a service size or when a SKU has multiple performance classes within a family, e.g. 'A1' for virtual machines
func (o ServiceSkuPtrOutput) Size() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServiceSku) *string {
		if v == nil {
			return nil
		}
		return v.Size
	}).(pulumi.StringPtrOutput)
}

// The tier of the SKU, such as 'Free', 'Basic', 'Standard', or 'Premium'
func (o ServiceSkuPtrOutput) Tier() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServiceSku) *string {
		if v == nil {
			return nil
		}
		return v.Tier
	}).(pulumi.StringPtrOutput)
}

// An Azure SKU instance
type ServiceSkuResponse struct {
	// The capacity of the SKU, if it supports scaling
	Capacity *int `pulumi:"capacity"`
	// The SKU family, used when the service has multiple performance classes within a tier, such as 'A', 'D', etc. for virtual machines
	Family *string `pulumi:"family"`
	// The unique name of the SKU, such as 'P3'
	Name *string `pulumi:"name"`
	// The size of the SKU, used when the name alone does not denote a service size or when a SKU has multiple performance classes within a family, e.g. 'A1' for virtual machines
	Size *string `pulumi:"size"`
	// The tier of the SKU, such as 'Free', 'Basic', 'Standard', or 'Premium'
	Tier *string `pulumi:"tier"`
}

// ServiceSkuResponseInput is an input type that accepts ServiceSkuResponseArgs and ServiceSkuResponseOutput values.
// You can construct a concrete instance of `ServiceSkuResponseInput` via:
//
//          ServiceSkuResponseArgs{...}
type ServiceSkuResponseInput interface {
	pulumi.Input

	ToServiceSkuResponseOutput() ServiceSkuResponseOutput
	ToServiceSkuResponseOutputWithContext(context.Context) ServiceSkuResponseOutput
}

// An Azure SKU instance
type ServiceSkuResponseArgs struct {
	// The capacity of the SKU, if it supports scaling
	Capacity pulumi.IntPtrInput `pulumi:"capacity"`
	// The SKU family, used when the service has multiple performance classes within a tier, such as 'A', 'D', etc. for virtual machines
	Family pulumi.StringPtrInput `pulumi:"family"`
	// The unique name of the SKU, such as 'P3'
	Name pulumi.StringPtrInput `pulumi:"name"`
	// The size of the SKU, used when the name alone does not denote a service size or when a SKU has multiple performance classes within a family, e.g. 'A1' for virtual machines
	Size pulumi.StringPtrInput `pulumi:"size"`
	// The tier of the SKU, such as 'Free', 'Basic', 'Standard', or 'Premium'
	Tier pulumi.StringPtrInput `pulumi:"tier"`
}

func (ServiceSkuResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceSkuResponse)(nil)).Elem()
}

func (i ServiceSkuResponseArgs) ToServiceSkuResponseOutput() ServiceSkuResponseOutput {
	return i.ToServiceSkuResponseOutputWithContext(context.Background())
}

func (i ServiceSkuResponseArgs) ToServiceSkuResponseOutputWithContext(ctx context.Context) ServiceSkuResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceSkuResponseOutput)
}

func (i ServiceSkuResponseArgs) ToServiceSkuResponsePtrOutput() ServiceSkuResponsePtrOutput {
	return i.ToServiceSkuResponsePtrOutputWithContext(context.Background())
}

func (i ServiceSkuResponseArgs) ToServiceSkuResponsePtrOutputWithContext(ctx context.Context) ServiceSkuResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceSkuResponseOutput).ToServiceSkuResponsePtrOutputWithContext(ctx)
}

// ServiceSkuResponsePtrInput is an input type that accepts ServiceSkuResponseArgs, ServiceSkuResponsePtr and ServiceSkuResponsePtrOutput values.
// You can construct a concrete instance of `ServiceSkuResponsePtrInput` via:
//
//          ServiceSkuResponseArgs{...}
//
//  or:
//
//          nil
type ServiceSkuResponsePtrInput interface {
	pulumi.Input

	ToServiceSkuResponsePtrOutput() ServiceSkuResponsePtrOutput
	ToServiceSkuResponsePtrOutputWithContext(context.Context) ServiceSkuResponsePtrOutput
}

type serviceSkuResponsePtrType ServiceSkuResponseArgs

func ServiceSkuResponsePtr(v *ServiceSkuResponseArgs) ServiceSkuResponsePtrInput {
	return (*serviceSkuResponsePtrType)(v)
}

func (*serviceSkuResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ServiceSkuResponse)(nil)).Elem()
}

func (i *serviceSkuResponsePtrType) ToServiceSkuResponsePtrOutput() ServiceSkuResponsePtrOutput {
	return i.ToServiceSkuResponsePtrOutputWithContext(context.Background())
}

func (i *serviceSkuResponsePtrType) ToServiceSkuResponsePtrOutputWithContext(ctx context.Context) ServiceSkuResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceSkuResponsePtrOutput)
}

// An Azure SKU instance
type ServiceSkuResponseOutput struct{ *pulumi.OutputState }

func (ServiceSkuResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceSkuResponse)(nil)).Elem()
}

func (o ServiceSkuResponseOutput) ToServiceSkuResponseOutput() ServiceSkuResponseOutput {
	return o
}

func (o ServiceSkuResponseOutput) ToServiceSkuResponseOutputWithContext(ctx context.Context) ServiceSkuResponseOutput {
	return o
}

func (o ServiceSkuResponseOutput) ToServiceSkuResponsePtrOutput() ServiceSkuResponsePtrOutput {
	return o.ToServiceSkuResponsePtrOutputWithContext(context.Background())
}

func (o ServiceSkuResponseOutput) ToServiceSkuResponsePtrOutputWithContext(ctx context.Context) ServiceSkuResponsePtrOutput {
	return o.ApplyT(func(v ServiceSkuResponse) *ServiceSkuResponse {
		return &v
	}).(ServiceSkuResponsePtrOutput)
}

// The capacity of the SKU, if it supports scaling
func (o ServiceSkuResponseOutput) Capacity() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ServiceSkuResponse) *int { return v.Capacity }).(pulumi.IntPtrOutput)
}

// The SKU family, used when the service has multiple performance classes within a tier, such as 'A', 'D', etc. for virtual machines
func (o ServiceSkuResponseOutput) Family() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceSkuResponse) *string { return v.Family }).(pulumi.StringPtrOutput)
}

// The unique name of the SKU, such as 'P3'
func (o ServiceSkuResponseOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceSkuResponse) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The size of the SKU, used when the name alone does not denote a service size or when a SKU has multiple performance classes within a family, e.g. 'A1' for virtual machines
func (o ServiceSkuResponseOutput) Size() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceSkuResponse) *string { return v.Size }).(pulumi.StringPtrOutput)
}

// The tier of the SKU, such as 'Free', 'Basic', 'Standard', or 'Premium'
func (o ServiceSkuResponseOutput) Tier() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceSkuResponse) *string { return v.Tier }).(pulumi.StringPtrOutput)
}

type ServiceSkuResponsePtrOutput struct{ *pulumi.OutputState }

func (ServiceSkuResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ServiceSkuResponse)(nil)).Elem()
}

func (o ServiceSkuResponsePtrOutput) ToServiceSkuResponsePtrOutput() ServiceSkuResponsePtrOutput {
	return o
}

func (o ServiceSkuResponsePtrOutput) ToServiceSkuResponsePtrOutputWithContext(ctx context.Context) ServiceSkuResponsePtrOutput {
	return o
}

func (o ServiceSkuResponsePtrOutput) Elem() ServiceSkuResponseOutput {
	return o.ApplyT(func(v *ServiceSkuResponse) ServiceSkuResponse { return *v }).(ServiceSkuResponseOutput)
}

// The capacity of the SKU, if it supports scaling
func (o ServiceSkuResponsePtrOutput) Capacity() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ServiceSkuResponse) *int {
		if v == nil {
			return nil
		}
		return v.Capacity
	}).(pulumi.IntPtrOutput)
}

// The SKU family, used when the service has multiple performance classes within a tier, such as 'A', 'D', etc. for virtual machines
func (o ServiceSkuResponsePtrOutput) Family() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServiceSkuResponse) *string {
		if v == nil {
			return nil
		}
		return v.Family
	}).(pulumi.StringPtrOutput)
}

// The unique name of the SKU, such as 'P3'
func (o ServiceSkuResponsePtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServiceSkuResponse) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// The size of the SKU, used when the name alone does not denote a service size or when a SKU has multiple performance classes within a family, e.g. 'A1' for virtual machines
func (o ServiceSkuResponsePtrOutput) Size() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServiceSkuResponse) *string {
		if v == nil {
			return nil
		}
		return v.Size
	}).(pulumi.StringPtrOutput)
}

// The tier of the SKU, such as 'Free', 'Basic', 'Standard', or 'Premium'
func (o ServiceSkuResponsePtrOutput) Tier() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServiceSkuResponse) *string {
		if v == nil {
			return nil
		}
		return v.Tier
	}).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(ConnectionInfoOutput{})
	pulumi.RegisterOutputType(ConnectionInfoPtrOutput{})
	pulumi.RegisterOutputType(ConnectionInfoResponseOutput{})
	pulumi.RegisterOutputType(ConnectionInfoResponsePtrOutput{})
	pulumi.RegisterOutputType(DatabaseInfoOutput{})
	pulumi.RegisterOutputType(DatabaseInfoArrayOutput{})
	pulumi.RegisterOutputType(DatabaseInfoResponseOutput{})
	pulumi.RegisterOutputType(DatabaseInfoResponseArrayOutput{})
	pulumi.RegisterOutputType(ODataErrorResponseOutput{})
	pulumi.RegisterOutputType(ODataErrorResponseArrayOutput{})
	pulumi.RegisterOutputType(ProjectTaskPropertiesOutput{})
	pulumi.RegisterOutputType(ProjectTaskPropertiesPtrOutput{})
	pulumi.RegisterOutputType(ProjectTaskPropertiesResponseOutput{})
	pulumi.RegisterOutputType(ProjectTaskPropertiesResponsePtrOutput{})
	pulumi.RegisterOutputType(ServiceSkuOutput{})
	pulumi.RegisterOutputType(ServiceSkuPtrOutput{})
	pulumi.RegisterOutputType(ServiceSkuResponseOutput{})
	pulumi.RegisterOutputType(ServiceSkuResponsePtrOutput{})
}
