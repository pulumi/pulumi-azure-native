// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v20180331preview

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// Blob container storage information.
type BlobShare struct {
	// SAS URI of Azure Storage Account Container.
	SasUri string `pulumi:"sasUri"`
}

// BlobShareInput is an input type that accepts BlobShareArgs and BlobShareOutput values.
// You can construct a concrete instance of `BlobShareInput` via:
//
//          BlobShareArgs{...}
type BlobShareInput interface {
	pulumi.Input

	ToBlobShareOutput() BlobShareOutput
	ToBlobShareOutputWithContext(context.Context) BlobShareOutput
}

// Blob container storage information.
type BlobShareArgs struct {
	// SAS URI of Azure Storage Account Container.
	SasUri pulumi.StringInput `pulumi:"sasUri"`
}

func (BlobShareArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BlobShare)(nil)).Elem()
}

func (i BlobShareArgs) ToBlobShareOutput() BlobShareOutput {
	return i.ToBlobShareOutputWithContext(context.Background())
}

func (i BlobShareArgs) ToBlobShareOutputWithContext(ctx context.Context) BlobShareOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BlobShareOutput)
}

func (i BlobShareArgs) ToBlobSharePtrOutput() BlobSharePtrOutput {
	return i.ToBlobSharePtrOutputWithContext(context.Background())
}

func (i BlobShareArgs) ToBlobSharePtrOutputWithContext(ctx context.Context) BlobSharePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BlobShareOutput).ToBlobSharePtrOutputWithContext(ctx)
}

// BlobSharePtrInput is an input type that accepts BlobShareArgs, BlobSharePtr and BlobSharePtrOutput values.
// You can construct a concrete instance of `BlobSharePtrInput` via:
//
//          BlobShareArgs{...}
//
//  or:
//
//          nil
type BlobSharePtrInput interface {
	pulumi.Input

	ToBlobSharePtrOutput() BlobSharePtrOutput
	ToBlobSharePtrOutputWithContext(context.Context) BlobSharePtrOutput
}

type blobSharePtrType BlobShareArgs

func BlobSharePtr(v *BlobShareArgs) BlobSharePtrInput {
	return (*blobSharePtrType)(v)
}

func (*blobSharePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**BlobShare)(nil)).Elem()
}

func (i *blobSharePtrType) ToBlobSharePtrOutput() BlobSharePtrOutput {
	return i.ToBlobSharePtrOutputWithContext(context.Background())
}

func (i *blobSharePtrType) ToBlobSharePtrOutputWithContext(ctx context.Context) BlobSharePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BlobSharePtrOutput)
}

// Blob container storage information.
type BlobShareResponse struct {
	// SAS URI of Azure Storage Account Container.
	SasUri string `pulumi:"sasUri"`
}

// Blob container storage information.
type BlobShareResponseOutput struct{ *pulumi.OutputState }

func (BlobShareResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BlobShareResponse)(nil)).Elem()
}

func (o BlobShareResponseOutput) ToBlobShareResponseOutput() BlobShareResponseOutput {
	return o
}

func (o BlobShareResponseOutput) ToBlobShareResponseOutputWithContext(ctx context.Context) BlobShareResponseOutput {
	return o
}

func (o BlobShareResponseOutput) ToBlobShareResponsePtrOutput() BlobShareResponsePtrOutput {
	return o.ToBlobShareResponsePtrOutputWithContext(context.Background())
}

func (o BlobShareResponseOutput) ToBlobShareResponsePtrOutputWithContext(ctx context.Context) BlobShareResponsePtrOutput {
	return o.ApplyT(func(v BlobShareResponse) *BlobShareResponse {
		return &v
	}).(BlobShareResponsePtrOutput)
}

// SAS URI of Azure Storage Account Container.
func (o BlobShareResponseOutput) SasUri() pulumi.StringOutput {
	return o.ApplyT(func(v BlobShareResponse) string { return v.SasUri }).(pulumi.StringOutput)
}

type BlobShareResponsePtrOutput struct{ *pulumi.OutputState }

func (BlobShareResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BlobShareResponse)(nil)).Elem()
}

func (o BlobShareResponsePtrOutput) ToBlobShareResponsePtrOutput() BlobShareResponsePtrOutput {
	return o
}

func (o BlobShareResponsePtrOutput) ToBlobShareResponsePtrOutputWithContext(ctx context.Context) BlobShareResponsePtrOutput {
	return o
}

func (o BlobShareResponsePtrOutput) Elem() BlobShareResponseOutput {
	return o.ApplyT(func(v *BlobShareResponse) BlobShareResponse { return *v }).(BlobShareResponseOutput)
}

// SAS URI of Azure Storage Account Container.
func (o BlobShareResponsePtrOutput) SasUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BlobShareResponse) *string {
		if v == nil {
			return nil
		}
		return &v.SasUri
	}).(pulumi.StringPtrOutput)
}

// Input for the task that validates connection to SQL Server and also validates source server requirements
type ConnectToSourceSqlServerTaskInput struct {
	// Permission group for validations
	CheckPermissionsGroup *string `pulumi:"checkPermissionsGroup"`
	// Flag for whether to collect agent jobs from source server.
	CollectAgentJobs *bool `pulumi:"collectAgentJobs"`
	// Flag for whether to collect logins from source server.
	CollectLogins *bool `pulumi:"collectLogins"`
	// Connection information for Source SQL Server
	SourceConnectionInfo SqlConnectionInfo `pulumi:"sourceConnectionInfo"`
}

// ConnectToSourceSqlServerTaskInputInput is an input type that accepts ConnectToSourceSqlServerTaskInputArgs and ConnectToSourceSqlServerTaskInputOutput values.
// You can construct a concrete instance of `ConnectToSourceSqlServerTaskInputInput` via:
//
//          ConnectToSourceSqlServerTaskInputArgs{...}
type ConnectToSourceSqlServerTaskInputInput interface {
	pulumi.Input

	ToConnectToSourceSqlServerTaskInputOutput() ConnectToSourceSqlServerTaskInputOutput
	ToConnectToSourceSqlServerTaskInputOutputWithContext(context.Context) ConnectToSourceSqlServerTaskInputOutput
}

// Input for the task that validates connection to SQL Server and also validates source server requirements
type ConnectToSourceSqlServerTaskInputArgs struct {
	// Permission group for validations
	CheckPermissionsGroup pulumi.StringPtrInput `pulumi:"checkPermissionsGroup"`
	// Flag for whether to collect agent jobs from source server.
	CollectAgentJobs pulumi.BoolPtrInput `pulumi:"collectAgentJobs"`
	// Flag for whether to collect logins from source server.
	CollectLogins pulumi.BoolPtrInput `pulumi:"collectLogins"`
	// Connection information for Source SQL Server
	SourceConnectionInfo SqlConnectionInfoInput `pulumi:"sourceConnectionInfo"`
}

func (ConnectToSourceSqlServerTaskInputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectToSourceSqlServerTaskInput)(nil)).Elem()
}

func (i ConnectToSourceSqlServerTaskInputArgs) ToConnectToSourceSqlServerTaskInputOutput() ConnectToSourceSqlServerTaskInputOutput {
	return i.ToConnectToSourceSqlServerTaskInputOutputWithContext(context.Background())
}

func (i ConnectToSourceSqlServerTaskInputArgs) ToConnectToSourceSqlServerTaskInputOutputWithContext(ctx context.Context) ConnectToSourceSqlServerTaskInputOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectToSourceSqlServerTaskInputOutput)
}

func (i ConnectToSourceSqlServerTaskInputArgs) ToConnectToSourceSqlServerTaskInputPtrOutput() ConnectToSourceSqlServerTaskInputPtrOutput {
	return i.ToConnectToSourceSqlServerTaskInputPtrOutputWithContext(context.Background())
}

func (i ConnectToSourceSqlServerTaskInputArgs) ToConnectToSourceSqlServerTaskInputPtrOutputWithContext(ctx context.Context) ConnectToSourceSqlServerTaskInputPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectToSourceSqlServerTaskInputOutput).ToConnectToSourceSqlServerTaskInputPtrOutputWithContext(ctx)
}

// ConnectToSourceSqlServerTaskInputPtrInput is an input type that accepts ConnectToSourceSqlServerTaskInputArgs, ConnectToSourceSqlServerTaskInputPtr and ConnectToSourceSqlServerTaskInputPtrOutput values.
// You can construct a concrete instance of `ConnectToSourceSqlServerTaskInputPtrInput` via:
//
//          ConnectToSourceSqlServerTaskInputArgs{...}
//
//  or:
//
//          nil
type ConnectToSourceSqlServerTaskInputPtrInput interface {
	pulumi.Input

	ToConnectToSourceSqlServerTaskInputPtrOutput() ConnectToSourceSqlServerTaskInputPtrOutput
	ToConnectToSourceSqlServerTaskInputPtrOutputWithContext(context.Context) ConnectToSourceSqlServerTaskInputPtrOutput
}

type connectToSourceSqlServerTaskInputPtrType ConnectToSourceSqlServerTaskInputArgs

func ConnectToSourceSqlServerTaskInputPtr(v *ConnectToSourceSqlServerTaskInputArgs) ConnectToSourceSqlServerTaskInputPtrInput {
	return (*connectToSourceSqlServerTaskInputPtrType)(v)
}

func (*connectToSourceSqlServerTaskInputPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ConnectToSourceSqlServerTaskInput)(nil)).Elem()
}

func (i *connectToSourceSqlServerTaskInputPtrType) ToConnectToSourceSqlServerTaskInputPtrOutput() ConnectToSourceSqlServerTaskInputPtrOutput {
	return i.ToConnectToSourceSqlServerTaskInputPtrOutputWithContext(context.Background())
}

func (i *connectToSourceSqlServerTaskInputPtrType) ToConnectToSourceSqlServerTaskInputPtrOutputWithContext(ctx context.Context) ConnectToSourceSqlServerTaskInputPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectToSourceSqlServerTaskInputPtrOutput)
}

// Input for the task that validates connection to SQL Server and also validates source server requirements
type ConnectToSourceSqlServerTaskInputResponse struct {
	// Permission group for validations
	CheckPermissionsGroup *string `pulumi:"checkPermissionsGroup"`
	// Flag for whether to collect agent jobs from source server.
	CollectAgentJobs *bool `pulumi:"collectAgentJobs"`
	// Flag for whether to collect logins from source server.
	CollectLogins *bool `pulumi:"collectLogins"`
	// Connection information for Source SQL Server
	SourceConnectionInfo SqlConnectionInfoResponse `pulumi:"sourceConnectionInfo"`
}

// Input for the task that validates connection to SQL Server and also validates source server requirements
type ConnectToSourceSqlServerTaskInputResponseOutput struct{ *pulumi.OutputState }

func (ConnectToSourceSqlServerTaskInputResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectToSourceSqlServerTaskInputResponse)(nil)).Elem()
}

func (o ConnectToSourceSqlServerTaskInputResponseOutput) ToConnectToSourceSqlServerTaskInputResponseOutput() ConnectToSourceSqlServerTaskInputResponseOutput {
	return o
}

func (o ConnectToSourceSqlServerTaskInputResponseOutput) ToConnectToSourceSqlServerTaskInputResponseOutputWithContext(ctx context.Context) ConnectToSourceSqlServerTaskInputResponseOutput {
	return o
}

func (o ConnectToSourceSqlServerTaskInputResponseOutput) ToConnectToSourceSqlServerTaskInputResponsePtrOutput() ConnectToSourceSqlServerTaskInputResponsePtrOutput {
	return o.ToConnectToSourceSqlServerTaskInputResponsePtrOutputWithContext(context.Background())
}

func (o ConnectToSourceSqlServerTaskInputResponseOutput) ToConnectToSourceSqlServerTaskInputResponsePtrOutputWithContext(ctx context.Context) ConnectToSourceSqlServerTaskInputResponsePtrOutput {
	return o.ApplyT(func(v ConnectToSourceSqlServerTaskInputResponse) *ConnectToSourceSqlServerTaskInputResponse {
		return &v
	}).(ConnectToSourceSqlServerTaskInputResponsePtrOutput)
}

// Permission group for validations
func (o ConnectToSourceSqlServerTaskInputResponseOutput) CheckPermissionsGroup() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ConnectToSourceSqlServerTaskInputResponse) *string { return v.CheckPermissionsGroup }).(pulumi.StringPtrOutput)
}

// Flag for whether to collect agent jobs from source server.
func (o ConnectToSourceSqlServerTaskInputResponseOutput) CollectAgentJobs() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ConnectToSourceSqlServerTaskInputResponse) *bool { return v.CollectAgentJobs }).(pulumi.BoolPtrOutput)
}

// Flag for whether to collect logins from source server.
func (o ConnectToSourceSqlServerTaskInputResponseOutput) CollectLogins() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ConnectToSourceSqlServerTaskInputResponse) *bool { return v.CollectLogins }).(pulumi.BoolPtrOutput)
}

// Connection information for Source SQL Server
func (o ConnectToSourceSqlServerTaskInputResponseOutput) SourceConnectionInfo() SqlConnectionInfoResponseOutput {
	return o.ApplyT(func(v ConnectToSourceSqlServerTaskInputResponse) SqlConnectionInfoResponse {
		return v.SourceConnectionInfo
	}).(SqlConnectionInfoResponseOutput)
}

type ConnectToSourceSqlServerTaskInputResponsePtrOutput struct{ *pulumi.OutputState }

func (ConnectToSourceSqlServerTaskInputResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ConnectToSourceSqlServerTaskInputResponse)(nil)).Elem()
}

func (o ConnectToSourceSqlServerTaskInputResponsePtrOutput) ToConnectToSourceSqlServerTaskInputResponsePtrOutput() ConnectToSourceSqlServerTaskInputResponsePtrOutput {
	return o
}

func (o ConnectToSourceSqlServerTaskInputResponsePtrOutput) ToConnectToSourceSqlServerTaskInputResponsePtrOutputWithContext(ctx context.Context) ConnectToSourceSqlServerTaskInputResponsePtrOutput {
	return o
}

func (o ConnectToSourceSqlServerTaskInputResponsePtrOutput) Elem() ConnectToSourceSqlServerTaskInputResponseOutput {
	return o.ApplyT(func(v *ConnectToSourceSqlServerTaskInputResponse) ConnectToSourceSqlServerTaskInputResponse {
		return *v
	}).(ConnectToSourceSqlServerTaskInputResponseOutput)
}

// Permission group for validations
func (o ConnectToSourceSqlServerTaskInputResponsePtrOutput) CheckPermissionsGroup() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConnectToSourceSqlServerTaskInputResponse) *string {
		if v == nil {
			return nil
		}
		return v.CheckPermissionsGroup
	}).(pulumi.StringPtrOutput)
}

// Flag for whether to collect agent jobs from source server.
func (o ConnectToSourceSqlServerTaskInputResponsePtrOutput) CollectAgentJobs() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ConnectToSourceSqlServerTaskInputResponse) *bool {
		if v == nil {
			return nil
		}
		return v.CollectAgentJobs
	}).(pulumi.BoolPtrOutput)
}

// Flag for whether to collect logins from source server.
func (o ConnectToSourceSqlServerTaskInputResponsePtrOutput) CollectLogins() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ConnectToSourceSqlServerTaskInputResponse) *bool {
		if v == nil {
			return nil
		}
		return v.CollectLogins
	}).(pulumi.BoolPtrOutput)
}

// Connection information for Source SQL Server
func (o ConnectToSourceSqlServerTaskInputResponsePtrOutput) SourceConnectionInfo() SqlConnectionInfoResponsePtrOutput {
	return o.ApplyT(func(v *ConnectToSourceSqlServerTaskInputResponse) *SqlConnectionInfoResponse {
		if v == nil {
			return nil
		}
		return &v.SourceConnectionInfo
	}).(SqlConnectionInfoResponsePtrOutput)
}

// AgentJob level output for the task that validates connection to SQL Server and also validates source server requirements
type ConnectToSourceSqlServerTaskOutputAgentJobLevelResponse struct {
	// Result identifier
	Id string `pulumi:"id"`
	// The state of the original AgentJob.
	IsEnabled bool `pulumi:"isEnabled"`
	// The type of AgentJob.
	JobCategory string `pulumi:"jobCategory"`
	// The owner of the AgentJob
	JobOwner string `pulumi:"jobOwner"`
	// UTC Date and time when the AgentJob was last executed.
	LastExecutedOn string `pulumi:"lastExecutedOn"`
	// Information about eligibility of agent job for migration.
	MigrationEligibility MigrationEligibilityInfoResponse `pulumi:"migrationEligibility"`
	// AgentJob name
	Name string `pulumi:"name"`
	// Type of result - database level or task level
	ResultType string `pulumi:"resultType"`
}

// AgentJob level output for the task that validates connection to SQL Server and also validates source server requirements
type ConnectToSourceSqlServerTaskOutputAgentJobLevelResponseOutput struct{ *pulumi.OutputState }

func (ConnectToSourceSqlServerTaskOutputAgentJobLevelResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectToSourceSqlServerTaskOutputAgentJobLevelResponse)(nil)).Elem()
}

func (o ConnectToSourceSqlServerTaskOutputAgentJobLevelResponseOutput) ToConnectToSourceSqlServerTaskOutputAgentJobLevelResponseOutput() ConnectToSourceSqlServerTaskOutputAgentJobLevelResponseOutput {
	return o
}

func (o ConnectToSourceSqlServerTaskOutputAgentJobLevelResponseOutput) ToConnectToSourceSqlServerTaskOutputAgentJobLevelResponseOutputWithContext(ctx context.Context) ConnectToSourceSqlServerTaskOutputAgentJobLevelResponseOutput {
	return o
}

// Result identifier
func (o ConnectToSourceSqlServerTaskOutputAgentJobLevelResponseOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectToSourceSqlServerTaskOutputAgentJobLevelResponse) string { return v.Id }).(pulumi.StringOutput)
}

// The state of the original AgentJob.
func (o ConnectToSourceSqlServerTaskOutputAgentJobLevelResponseOutput) IsEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v ConnectToSourceSqlServerTaskOutputAgentJobLevelResponse) bool { return v.IsEnabled }).(pulumi.BoolOutput)
}

// The type of AgentJob.
func (o ConnectToSourceSqlServerTaskOutputAgentJobLevelResponseOutput) JobCategory() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectToSourceSqlServerTaskOutputAgentJobLevelResponse) string { return v.JobCategory }).(pulumi.StringOutput)
}

// The owner of the AgentJob
func (o ConnectToSourceSqlServerTaskOutputAgentJobLevelResponseOutput) JobOwner() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectToSourceSqlServerTaskOutputAgentJobLevelResponse) string { return v.JobOwner }).(pulumi.StringOutput)
}

// UTC Date and time when the AgentJob was last executed.
func (o ConnectToSourceSqlServerTaskOutputAgentJobLevelResponseOutput) LastExecutedOn() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectToSourceSqlServerTaskOutputAgentJobLevelResponse) string { return v.LastExecutedOn }).(pulumi.StringOutput)
}

// Information about eligibility of agent job for migration.
func (o ConnectToSourceSqlServerTaskOutputAgentJobLevelResponseOutput) MigrationEligibility() MigrationEligibilityInfoResponseOutput {
	return o.ApplyT(func(v ConnectToSourceSqlServerTaskOutputAgentJobLevelResponse) MigrationEligibilityInfoResponse {
		return v.MigrationEligibility
	}).(MigrationEligibilityInfoResponseOutput)
}

// AgentJob name
func (o ConnectToSourceSqlServerTaskOutputAgentJobLevelResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectToSourceSqlServerTaskOutputAgentJobLevelResponse) string { return v.Name }).(pulumi.StringOutput)
}

// Type of result - database level or task level
func (o ConnectToSourceSqlServerTaskOutputAgentJobLevelResponseOutput) ResultType() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectToSourceSqlServerTaskOutputAgentJobLevelResponse) string { return v.ResultType }).(pulumi.StringOutput)
}

// Database level output for the task that validates connection to SQL Server and also validates source server requirements
type ConnectToSourceSqlServerTaskOutputDatabaseLevelResponse struct {
	// SQL Server compatibility level of database
	CompatibilityLevel string `pulumi:"compatibilityLevel"`
	// The list of database files
	DatabaseFiles []DatabaseFileInfoResponse `pulumi:"databaseFiles"`
	// State of the database
	DatabaseState string `pulumi:"databaseState"`
	// Result identifier
	Id string `pulumi:"id"`
	// Database name
	Name string `pulumi:"name"`
	// Type of result - database level or task level
	ResultType string `pulumi:"resultType"`
	// Size of the file in megabytes
	SizeMB float64 `pulumi:"sizeMB"`
}

// Database level output for the task that validates connection to SQL Server and also validates source server requirements
type ConnectToSourceSqlServerTaskOutputDatabaseLevelResponseOutput struct{ *pulumi.OutputState }

func (ConnectToSourceSqlServerTaskOutputDatabaseLevelResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectToSourceSqlServerTaskOutputDatabaseLevelResponse)(nil)).Elem()
}

func (o ConnectToSourceSqlServerTaskOutputDatabaseLevelResponseOutput) ToConnectToSourceSqlServerTaskOutputDatabaseLevelResponseOutput() ConnectToSourceSqlServerTaskOutputDatabaseLevelResponseOutput {
	return o
}

func (o ConnectToSourceSqlServerTaskOutputDatabaseLevelResponseOutput) ToConnectToSourceSqlServerTaskOutputDatabaseLevelResponseOutputWithContext(ctx context.Context) ConnectToSourceSqlServerTaskOutputDatabaseLevelResponseOutput {
	return o
}

// SQL Server compatibility level of database
func (o ConnectToSourceSqlServerTaskOutputDatabaseLevelResponseOutput) CompatibilityLevel() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectToSourceSqlServerTaskOutputDatabaseLevelResponse) string { return v.CompatibilityLevel }).(pulumi.StringOutput)
}

// The list of database files
func (o ConnectToSourceSqlServerTaskOutputDatabaseLevelResponseOutput) DatabaseFiles() DatabaseFileInfoResponseArrayOutput {
	return o.ApplyT(func(v ConnectToSourceSqlServerTaskOutputDatabaseLevelResponse) []DatabaseFileInfoResponse {
		return v.DatabaseFiles
	}).(DatabaseFileInfoResponseArrayOutput)
}

// State of the database
func (o ConnectToSourceSqlServerTaskOutputDatabaseLevelResponseOutput) DatabaseState() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectToSourceSqlServerTaskOutputDatabaseLevelResponse) string { return v.DatabaseState }).(pulumi.StringOutput)
}

// Result identifier
func (o ConnectToSourceSqlServerTaskOutputDatabaseLevelResponseOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectToSourceSqlServerTaskOutputDatabaseLevelResponse) string { return v.Id }).(pulumi.StringOutput)
}

// Database name
func (o ConnectToSourceSqlServerTaskOutputDatabaseLevelResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectToSourceSqlServerTaskOutputDatabaseLevelResponse) string { return v.Name }).(pulumi.StringOutput)
}

// Type of result - database level or task level
func (o ConnectToSourceSqlServerTaskOutputDatabaseLevelResponseOutput) ResultType() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectToSourceSqlServerTaskOutputDatabaseLevelResponse) string { return v.ResultType }).(pulumi.StringOutput)
}

// Size of the file in megabytes
func (o ConnectToSourceSqlServerTaskOutputDatabaseLevelResponseOutput) SizeMB() pulumi.Float64Output {
	return o.ApplyT(func(v ConnectToSourceSqlServerTaskOutputDatabaseLevelResponse) float64 { return v.SizeMB }).(pulumi.Float64Output)
}

// Login level output for the task that validates connection to SQL Server and also validates source server requirements
type ConnectToSourceSqlServerTaskOutputLoginLevelResponse struct {
	// The default database for the login.
	DefaultDatabase string `pulumi:"defaultDatabase"`
	// Result identifier
	Id string `pulumi:"id"`
	// The state of the login.
	IsEnabled bool `pulumi:"isEnabled"`
	// The type of login.
	LoginType string `pulumi:"loginType"`
	// Information about eligibility of login for migration.
	MigrationEligibility MigrationEligibilityInfoResponse `pulumi:"migrationEligibility"`
	// Login name.
	Name string `pulumi:"name"`
	// Type of result - database level or task level
	ResultType string `pulumi:"resultType"`
}

// Login level output for the task that validates connection to SQL Server and also validates source server requirements
type ConnectToSourceSqlServerTaskOutputLoginLevelResponseOutput struct{ *pulumi.OutputState }

func (ConnectToSourceSqlServerTaskOutputLoginLevelResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectToSourceSqlServerTaskOutputLoginLevelResponse)(nil)).Elem()
}

func (o ConnectToSourceSqlServerTaskOutputLoginLevelResponseOutput) ToConnectToSourceSqlServerTaskOutputLoginLevelResponseOutput() ConnectToSourceSqlServerTaskOutputLoginLevelResponseOutput {
	return o
}

func (o ConnectToSourceSqlServerTaskOutputLoginLevelResponseOutput) ToConnectToSourceSqlServerTaskOutputLoginLevelResponseOutputWithContext(ctx context.Context) ConnectToSourceSqlServerTaskOutputLoginLevelResponseOutput {
	return o
}

// The default database for the login.
func (o ConnectToSourceSqlServerTaskOutputLoginLevelResponseOutput) DefaultDatabase() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectToSourceSqlServerTaskOutputLoginLevelResponse) string { return v.DefaultDatabase }).(pulumi.StringOutput)
}

// Result identifier
func (o ConnectToSourceSqlServerTaskOutputLoginLevelResponseOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectToSourceSqlServerTaskOutputLoginLevelResponse) string { return v.Id }).(pulumi.StringOutput)
}

// The state of the login.
func (o ConnectToSourceSqlServerTaskOutputLoginLevelResponseOutput) IsEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v ConnectToSourceSqlServerTaskOutputLoginLevelResponse) bool { return v.IsEnabled }).(pulumi.BoolOutput)
}

// The type of login.
func (o ConnectToSourceSqlServerTaskOutputLoginLevelResponseOutput) LoginType() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectToSourceSqlServerTaskOutputLoginLevelResponse) string { return v.LoginType }).(pulumi.StringOutput)
}

// Information about eligibility of login for migration.
func (o ConnectToSourceSqlServerTaskOutputLoginLevelResponseOutput) MigrationEligibility() MigrationEligibilityInfoResponseOutput {
	return o.ApplyT(func(v ConnectToSourceSqlServerTaskOutputLoginLevelResponse) MigrationEligibilityInfoResponse {
		return v.MigrationEligibility
	}).(MigrationEligibilityInfoResponseOutput)
}

// Login name.
func (o ConnectToSourceSqlServerTaskOutputLoginLevelResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectToSourceSqlServerTaskOutputLoginLevelResponse) string { return v.Name }).(pulumi.StringOutput)
}

// Type of result - database level or task level
func (o ConnectToSourceSqlServerTaskOutputLoginLevelResponseOutput) ResultType() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectToSourceSqlServerTaskOutputLoginLevelResponse) string { return v.ResultType }).(pulumi.StringOutput)
}

// Task level output for the task that validates connection to SQL Server and also validates source server requirements
type ConnectToSourceSqlServerTaskOutputTaskLevelResponse struct {
	// Source agent jobs as a map from agent job name to id.
	AgentJobs string `pulumi:"agentJobs"`
	// Source databases as a map from database name to database id
	Databases string `pulumi:"databases"`
	// Result identifier
	Id string `pulumi:"id"`
	// Source logins as a map from login name to login id.
	Logins string `pulumi:"logins"`
	// Type of result - database level or task level
	ResultType string `pulumi:"resultType"`
	// Source server brand version
	SourceServerBrandVersion string `pulumi:"sourceServerBrandVersion"`
	// Source server version
	SourceServerVersion string `pulumi:"sourceServerVersion"`
	// Validation errors
	ValidationErrors []ReportableExceptionResponse `pulumi:"validationErrors"`
}

// Task level output for the task that validates connection to SQL Server and also validates source server requirements
type ConnectToSourceSqlServerTaskOutputTaskLevelResponseOutput struct{ *pulumi.OutputState }

func (ConnectToSourceSqlServerTaskOutputTaskLevelResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectToSourceSqlServerTaskOutputTaskLevelResponse)(nil)).Elem()
}

func (o ConnectToSourceSqlServerTaskOutputTaskLevelResponseOutput) ToConnectToSourceSqlServerTaskOutputTaskLevelResponseOutput() ConnectToSourceSqlServerTaskOutputTaskLevelResponseOutput {
	return o
}

func (o ConnectToSourceSqlServerTaskOutputTaskLevelResponseOutput) ToConnectToSourceSqlServerTaskOutputTaskLevelResponseOutputWithContext(ctx context.Context) ConnectToSourceSqlServerTaskOutputTaskLevelResponseOutput {
	return o
}

// Source agent jobs as a map from agent job name to id.
func (o ConnectToSourceSqlServerTaskOutputTaskLevelResponseOutput) AgentJobs() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectToSourceSqlServerTaskOutputTaskLevelResponse) string { return v.AgentJobs }).(pulumi.StringOutput)
}

// Source databases as a map from database name to database id
func (o ConnectToSourceSqlServerTaskOutputTaskLevelResponseOutput) Databases() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectToSourceSqlServerTaskOutputTaskLevelResponse) string { return v.Databases }).(pulumi.StringOutput)
}

// Result identifier
func (o ConnectToSourceSqlServerTaskOutputTaskLevelResponseOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectToSourceSqlServerTaskOutputTaskLevelResponse) string { return v.Id }).(pulumi.StringOutput)
}

// Source logins as a map from login name to login id.
func (o ConnectToSourceSqlServerTaskOutputTaskLevelResponseOutput) Logins() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectToSourceSqlServerTaskOutputTaskLevelResponse) string { return v.Logins }).(pulumi.StringOutput)
}

// Type of result - database level or task level
func (o ConnectToSourceSqlServerTaskOutputTaskLevelResponseOutput) ResultType() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectToSourceSqlServerTaskOutputTaskLevelResponse) string { return v.ResultType }).(pulumi.StringOutput)
}

// Source server brand version
func (o ConnectToSourceSqlServerTaskOutputTaskLevelResponseOutput) SourceServerBrandVersion() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectToSourceSqlServerTaskOutputTaskLevelResponse) string { return v.SourceServerBrandVersion }).(pulumi.StringOutput)
}

// Source server version
func (o ConnectToSourceSqlServerTaskOutputTaskLevelResponseOutput) SourceServerVersion() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectToSourceSqlServerTaskOutputTaskLevelResponse) string { return v.SourceServerVersion }).(pulumi.StringOutput)
}

// Validation errors
func (o ConnectToSourceSqlServerTaskOutputTaskLevelResponseOutput) ValidationErrors() ReportableExceptionResponseArrayOutput {
	return o.ApplyT(func(v ConnectToSourceSqlServerTaskOutputTaskLevelResponse) []ReportableExceptionResponse {
		return v.ValidationErrors
	}).(ReportableExceptionResponseArrayOutput)
}

// Properties for the task that validates connection to SQL Server and also validates source server requirements
type ConnectToSourceSqlServerTaskProperties struct {
	// Task input
	Input *ConnectToSourceSqlServerTaskInput `pulumi:"input"`
	// Task type.
	TaskType string `pulumi:"taskType"`
}

// ConnectToSourceSqlServerTaskPropertiesInput is an input type that accepts ConnectToSourceSqlServerTaskPropertiesArgs and ConnectToSourceSqlServerTaskPropertiesOutput values.
// You can construct a concrete instance of `ConnectToSourceSqlServerTaskPropertiesInput` via:
//
//          ConnectToSourceSqlServerTaskPropertiesArgs{...}
type ConnectToSourceSqlServerTaskPropertiesInput interface {
	pulumi.Input

	ToConnectToSourceSqlServerTaskPropertiesOutput() ConnectToSourceSqlServerTaskPropertiesOutput
	ToConnectToSourceSqlServerTaskPropertiesOutputWithContext(context.Context) ConnectToSourceSqlServerTaskPropertiesOutput
}

// Properties for the task that validates connection to SQL Server and also validates source server requirements
type ConnectToSourceSqlServerTaskPropertiesArgs struct {
	// Task input
	Input ConnectToSourceSqlServerTaskInputPtrInput `pulumi:"input"`
	// Task type.
	TaskType pulumi.StringInput `pulumi:"taskType"`
}

func (ConnectToSourceSqlServerTaskPropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectToSourceSqlServerTaskProperties)(nil)).Elem()
}

func (i ConnectToSourceSqlServerTaskPropertiesArgs) ToConnectToSourceSqlServerTaskPropertiesOutput() ConnectToSourceSqlServerTaskPropertiesOutput {
	return i.ToConnectToSourceSqlServerTaskPropertiesOutputWithContext(context.Background())
}

func (i ConnectToSourceSqlServerTaskPropertiesArgs) ToConnectToSourceSqlServerTaskPropertiesOutputWithContext(ctx context.Context) ConnectToSourceSqlServerTaskPropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectToSourceSqlServerTaskPropertiesOutput)
}

// Properties for the task that validates connection to SQL Server and also validates source server requirements
type ConnectToSourceSqlServerTaskPropertiesResponse struct {
	// Array of errors. This is ignored if submitted.
	Errors []ODataErrorResponse `pulumi:"errors"`
	// Task input
	Input *ConnectToSourceSqlServerTaskInputResponse `pulumi:"input"`
	// Task output. This is ignored if submitted.
	Output []interface{} `pulumi:"output"`
	// The state of the task. This is ignored if submitted.
	State string `pulumi:"state"`
	// Task type.
	TaskType string `pulumi:"taskType"`
}

// Properties for the task that validates connection to SQL Server and also validates source server requirements
type ConnectToSourceSqlServerTaskPropertiesResponseOutput struct{ *pulumi.OutputState }

func (ConnectToSourceSqlServerTaskPropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectToSourceSqlServerTaskPropertiesResponse)(nil)).Elem()
}

func (o ConnectToSourceSqlServerTaskPropertiesResponseOutput) ToConnectToSourceSqlServerTaskPropertiesResponseOutput() ConnectToSourceSqlServerTaskPropertiesResponseOutput {
	return o
}

func (o ConnectToSourceSqlServerTaskPropertiesResponseOutput) ToConnectToSourceSqlServerTaskPropertiesResponseOutputWithContext(ctx context.Context) ConnectToSourceSqlServerTaskPropertiesResponseOutput {
	return o
}

// Array of errors. This is ignored if submitted.
func (o ConnectToSourceSqlServerTaskPropertiesResponseOutput) Errors() ODataErrorResponseArrayOutput {
	return o.ApplyT(func(v ConnectToSourceSqlServerTaskPropertiesResponse) []ODataErrorResponse { return v.Errors }).(ODataErrorResponseArrayOutput)
}

// Task input
func (o ConnectToSourceSqlServerTaskPropertiesResponseOutput) Input() ConnectToSourceSqlServerTaskInputResponsePtrOutput {
	return o.ApplyT(func(v ConnectToSourceSqlServerTaskPropertiesResponse) *ConnectToSourceSqlServerTaskInputResponse {
		return v.Input
	}).(ConnectToSourceSqlServerTaskInputResponsePtrOutput)
}

// Task output. This is ignored if submitted.
func (o ConnectToSourceSqlServerTaskPropertiesResponseOutput) Output() pulumi.ArrayOutput {
	return o.ApplyT(func(v ConnectToSourceSqlServerTaskPropertiesResponse) []interface{} { return v.Output }).(pulumi.ArrayOutput)
}

// The state of the task. This is ignored if submitted.
func (o ConnectToSourceSqlServerTaskPropertiesResponseOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectToSourceSqlServerTaskPropertiesResponse) string { return v.State }).(pulumi.StringOutput)
}

// Task type.
func (o ConnectToSourceSqlServerTaskPropertiesResponseOutput) TaskType() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectToSourceSqlServerTaskPropertiesResponse) string { return v.TaskType }).(pulumi.StringOutput)
}

// Input for the task that validates connection to SQL DB and target server requirements
type ConnectToTargetSqlDbTaskInput struct {
	// Connection information for target SQL DB
	TargetConnectionInfo SqlConnectionInfo `pulumi:"targetConnectionInfo"`
}

// ConnectToTargetSqlDbTaskInputInput is an input type that accepts ConnectToTargetSqlDbTaskInputArgs and ConnectToTargetSqlDbTaskInputOutput values.
// You can construct a concrete instance of `ConnectToTargetSqlDbTaskInputInput` via:
//
//          ConnectToTargetSqlDbTaskInputArgs{...}
type ConnectToTargetSqlDbTaskInputInput interface {
	pulumi.Input

	ToConnectToTargetSqlDbTaskInputOutput() ConnectToTargetSqlDbTaskInputOutput
	ToConnectToTargetSqlDbTaskInputOutputWithContext(context.Context) ConnectToTargetSqlDbTaskInputOutput
}

// Input for the task that validates connection to SQL DB and target server requirements
type ConnectToTargetSqlDbTaskInputArgs struct {
	// Connection information for target SQL DB
	TargetConnectionInfo SqlConnectionInfoInput `pulumi:"targetConnectionInfo"`
}

func (ConnectToTargetSqlDbTaskInputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectToTargetSqlDbTaskInput)(nil)).Elem()
}

func (i ConnectToTargetSqlDbTaskInputArgs) ToConnectToTargetSqlDbTaskInputOutput() ConnectToTargetSqlDbTaskInputOutput {
	return i.ToConnectToTargetSqlDbTaskInputOutputWithContext(context.Background())
}

func (i ConnectToTargetSqlDbTaskInputArgs) ToConnectToTargetSqlDbTaskInputOutputWithContext(ctx context.Context) ConnectToTargetSqlDbTaskInputOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectToTargetSqlDbTaskInputOutput)
}

func (i ConnectToTargetSqlDbTaskInputArgs) ToConnectToTargetSqlDbTaskInputPtrOutput() ConnectToTargetSqlDbTaskInputPtrOutput {
	return i.ToConnectToTargetSqlDbTaskInputPtrOutputWithContext(context.Background())
}

func (i ConnectToTargetSqlDbTaskInputArgs) ToConnectToTargetSqlDbTaskInputPtrOutputWithContext(ctx context.Context) ConnectToTargetSqlDbTaskInputPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectToTargetSqlDbTaskInputOutput).ToConnectToTargetSqlDbTaskInputPtrOutputWithContext(ctx)
}

// ConnectToTargetSqlDbTaskInputPtrInput is an input type that accepts ConnectToTargetSqlDbTaskInputArgs, ConnectToTargetSqlDbTaskInputPtr and ConnectToTargetSqlDbTaskInputPtrOutput values.
// You can construct a concrete instance of `ConnectToTargetSqlDbTaskInputPtrInput` via:
//
//          ConnectToTargetSqlDbTaskInputArgs{...}
//
//  or:
//
//          nil
type ConnectToTargetSqlDbTaskInputPtrInput interface {
	pulumi.Input

	ToConnectToTargetSqlDbTaskInputPtrOutput() ConnectToTargetSqlDbTaskInputPtrOutput
	ToConnectToTargetSqlDbTaskInputPtrOutputWithContext(context.Context) ConnectToTargetSqlDbTaskInputPtrOutput
}

type connectToTargetSqlDbTaskInputPtrType ConnectToTargetSqlDbTaskInputArgs

func ConnectToTargetSqlDbTaskInputPtr(v *ConnectToTargetSqlDbTaskInputArgs) ConnectToTargetSqlDbTaskInputPtrInput {
	return (*connectToTargetSqlDbTaskInputPtrType)(v)
}

func (*connectToTargetSqlDbTaskInputPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ConnectToTargetSqlDbTaskInput)(nil)).Elem()
}

func (i *connectToTargetSqlDbTaskInputPtrType) ToConnectToTargetSqlDbTaskInputPtrOutput() ConnectToTargetSqlDbTaskInputPtrOutput {
	return i.ToConnectToTargetSqlDbTaskInputPtrOutputWithContext(context.Background())
}

func (i *connectToTargetSqlDbTaskInputPtrType) ToConnectToTargetSqlDbTaskInputPtrOutputWithContext(ctx context.Context) ConnectToTargetSqlDbTaskInputPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectToTargetSqlDbTaskInputPtrOutput)
}

// Input for the task that validates connection to SQL DB and target server requirements
type ConnectToTargetSqlDbTaskInputResponse struct {
	// Connection information for target SQL DB
	TargetConnectionInfo SqlConnectionInfoResponse `pulumi:"targetConnectionInfo"`
}

// Input for the task that validates connection to SQL DB and target server requirements
type ConnectToTargetSqlDbTaskInputResponseOutput struct{ *pulumi.OutputState }

func (ConnectToTargetSqlDbTaskInputResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectToTargetSqlDbTaskInputResponse)(nil)).Elem()
}

func (o ConnectToTargetSqlDbTaskInputResponseOutput) ToConnectToTargetSqlDbTaskInputResponseOutput() ConnectToTargetSqlDbTaskInputResponseOutput {
	return o
}

func (o ConnectToTargetSqlDbTaskInputResponseOutput) ToConnectToTargetSqlDbTaskInputResponseOutputWithContext(ctx context.Context) ConnectToTargetSqlDbTaskInputResponseOutput {
	return o
}

func (o ConnectToTargetSqlDbTaskInputResponseOutput) ToConnectToTargetSqlDbTaskInputResponsePtrOutput() ConnectToTargetSqlDbTaskInputResponsePtrOutput {
	return o.ToConnectToTargetSqlDbTaskInputResponsePtrOutputWithContext(context.Background())
}

func (o ConnectToTargetSqlDbTaskInputResponseOutput) ToConnectToTargetSqlDbTaskInputResponsePtrOutputWithContext(ctx context.Context) ConnectToTargetSqlDbTaskInputResponsePtrOutput {
	return o.ApplyT(func(v ConnectToTargetSqlDbTaskInputResponse) *ConnectToTargetSqlDbTaskInputResponse {
		return &v
	}).(ConnectToTargetSqlDbTaskInputResponsePtrOutput)
}

// Connection information for target SQL DB
func (o ConnectToTargetSqlDbTaskInputResponseOutput) TargetConnectionInfo() SqlConnectionInfoResponseOutput {
	return o.ApplyT(func(v ConnectToTargetSqlDbTaskInputResponse) SqlConnectionInfoResponse { return v.TargetConnectionInfo }).(SqlConnectionInfoResponseOutput)
}

type ConnectToTargetSqlDbTaskInputResponsePtrOutput struct{ *pulumi.OutputState }

func (ConnectToTargetSqlDbTaskInputResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ConnectToTargetSqlDbTaskInputResponse)(nil)).Elem()
}

func (o ConnectToTargetSqlDbTaskInputResponsePtrOutput) ToConnectToTargetSqlDbTaskInputResponsePtrOutput() ConnectToTargetSqlDbTaskInputResponsePtrOutput {
	return o
}

func (o ConnectToTargetSqlDbTaskInputResponsePtrOutput) ToConnectToTargetSqlDbTaskInputResponsePtrOutputWithContext(ctx context.Context) ConnectToTargetSqlDbTaskInputResponsePtrOutput {
	return o
}

func (o ConnectToTargetSqlDbTaskInputResponsePtrOutput) Elem() ConnectToTargetSqlDbTaskInputResponseOutput {
	return o.ApplyT(func(v *ConnectToTargetSqlDbTaskInputResponse) ConnectToTargetSqlDbTaskInputResponse { return *v }).(ConnectToTargetSqlDbTaskInputResponseOutput)
}

// Connection information for target SQL DB
func (o ConnectToTargetSqlDbTaskInputResponsePtrOutput) TargetConnectionInfo() SqlConnectionInfoResponsePtrOutput {
	return o.ApplyT(func(v *ConnectToTargetSqlDbTaskInputResponse) *SqlConnectionInfoResponse {
		if v == nil {
			return nil
		}
		return &v.TargetConnectionInfo
	}).(SqlConnectionInfoResponsePtrOutput)
}

// Output for the task that validates connection to SQL DB and target server requirements
type ConnectToTargetSqlDbTaskOutputResponse struct {
	// Source databases as a map from database name to database id
	Databases string `pulumi:"databases"`
	// Result identifier
	Id string `pulumi:"id"`
	// Target server brand version
	TargetServerBrandVersion string `pulumi:"targetServerBrandVersion"`
	// Version of the target server
	TargetServerVersion string `pulumi:"targetServerVersion"`
}

// Output for the task that validates connection to SQL DB and target server requirements
type ConnectToTargetSqlDbTaskOutputResponseOutput struct{ *pulumi.OutputState }

func (ConnectToTargetSqlDbTaskOutputResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectToTargetSqlDbTaskOutputResponse)(nil)).Elem()
}

func (o ConnectToTargetSqlDbTaskOutputResponseOutput) ToConnectToTargetSqlDbTaskOutputResponseOutput() ConnectToTargetSqlDbTaskOutputResponseOutput {
	return o
}

func (o ConnectToTargetSqlDbTaskOutputResponseOutput) ToConnectToTargetSqlDbTaskOutputResponseOutputWithContext(ctx context.Context) ConnectToTargetSqlDbTaskOutputResponseOutput {
	return o
}

// Source databases as a map from database name to database id
func (o ConnectToTargetSqlDbTaskOutputResponseOutput) Databases() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectToTargetSqlDbTaskOutputResponse) string { return v.Databases }).(pulumi.StringOutput)
}

// Result identifier
func (o ConnectToTargetSqlDbTaskOutputResponseOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectToTargetSqlDbTaskOutputResponse) string { return v.Id }).(pulumi.StringOutput)
}

// Target server brand version
func (o ConnectToTargetSqlDbTaskOutputResponseOutput) TargetServerBrandVersion() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectToTargetSqlDbTaskOutputResponse) string { return v.TargetServerBrandVersion }).(pulumi.StringOutput)
}

// Version of the target server
func (o ConnectToTargetSqlDbTaskOutputResponseOutput) TargetServerVersion() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectToTargetSqlDbTaskOutputResponse) string { return v.TargetServerVersion }).(pulumi.StringOutput)
}

type ConnectToTargetSqlDbTaskOutputResponseArrayOutput struct{ *pulumi.OutputState }

func (ConnectToTargetSqlDbTaskOutputResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ConnectToTargetSqlDbTaskOutputResponse)(nil)).Elem()
}

func (o ConnectToTargetSqlDbTaskOutputResponseArrayOutput) ToConnectToTargetSqlDbTaskOutputResponseArrayOutput() ConnectToTargetSqlDbTaskOutputResponseArrayOutput {
	return o
}

func (o ConnectToTargetSqlDbTaskOutputResponseArrayOutput) ToConnectToTargetSqlDbTaskOutputResponseArrayOutputWithContext(ctx context.Context) ConnectToTargetSqlDbTaskOutputResponseArrayOutput {
	return o
}

func (o ConnectToTargetSqlDbTaskOutputResponseArrayOutput) Index(i pulumi.IntInput) ConnectToTargetSqlDbTaskOutputResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ConnectToTargetSqlDbTaskOutputResponse {
		return vs[0].([]ConnectToTargetSqlDbTaskOutputResponse)[vs[1].(int)]
	}).(ConnectToTargetSqlDbTaskOutputResponseOutput)
}

// Properties for the task that validates connection to SQL DB and target server requirements
type ConnectToTargetSqlDbTaskProperties struct {
	// Task input
	Input *ConnectToTargetSqlDbTaskInput `pulumi:"input"`
	// Task type.
	TaskType string `pulumi:"taskType"`
}

// ConnectToTargetSqlDbTaskPropertiesInput is an input type that accepts ConnectToTargetSqlDbTaskPropertiesArgs and ConnectToTargetSqlDbTaskPropertiesOutput values.
// You can construct a concrete instance of `ConnectToTargetSqlDbTaskPropertiesInput` via:
//
//          ConnectToTargetSqlDbTaskPropertiesArgs{...}
type ConnectToTargetSqlDbTaskPropertiesInput interface {
	pulumi.Input

	ToConnectToTargetSqlDbTaskPropertiesOutput() ConnectToTargetSqlDbTaskPropertiesOutput
	ToConnectToTargetSqlDbTaskPropertiesOutputWithContext(context.Context) ConnectToTargetSqlDbTaskPropertiesOutput
}

// Properties for the task that validates connection to SQL DB and target server requirements
type ConnectToTargetSqlDbTaskPropertiesArgs struct {
	// Task input
	Input ConnectToTargetSqlDbTaskInputPtrInput `pulumi:"input"`
	// Task type.
	TaskType pulumi.StringInput `pulumi:"taskType"`
}

func (ConnectToTargetSqlDbTaskPropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectToTargetSqlDbTaskProperties)(nil)).Elem()
}

func (i ConnectToTargetSqlDbTaskPropertiesArgs) ToConnectToTargetSqlDbTaskPropertiesOutput() ConnectToTargetSqlDbTaskPropertiesOutput {
	return i.ToConnectToTargetSqlDbTaskPropertiesOutputWithContext(context.Background())
}

func (i ConnectToTargetSqlDbTaskPropertiesArgs) ToConnectToTargetSqlDbTaskPropertiesOutputWithContext(ctx context.Context) ConnectToTargetSqlDbTaskPropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectToTargetSqlDbTaskPropertiesOutput)
}

// Properties for the task that validates connection to SQL DB and target server requirements
type ConnectToTargetSqlDbTaskPropertiesResponse struct {
	// Array of errors. This is ignored if submitted.
	Errors []ODataErrorResponse `pulumi:"errors"`
	// Task input
	Input *ConnectToTargetSqlDbTaskInputResponse `pulumi:"input"`
	// Task output. This is ignored if submitted.
	Output []ConnectToTargetSqlDbTaskOutputResponse `pulumi:"output"`
	// The state of the task. This is ignored if submitted.
	State string `pulumi:"state"`
	// Task type.
	TaskType string `pulumi:"taskType"`
}

// Properties for the task that validates connection to SQL DB and target server requirements
type ConnectToTargetSqlDbTaskPropertiesResponseOutput struct{ *pulumi.OutputState }

func (ConnectToTargetSqlDbTaskPropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectToTargetSqlDbTaskPropertiesResponse)(nil)).Elem()
}

func (o ConnectToTargetSqlDbTaskPropertiesResponseOutput) ToConnectToTargetSqlDbTaskPropertiesResponseOutput() ConnectToTargetSqlDbTaskPropertiesResponseOutput {
	return o
}

func (o ConnectToTargetSqlDbTaskPropertiesResponseOutput) ToConnectToTargetSqlDbTaskPropertiesResponseOutputWithContext(ctx context.Context) ConnectToTargetSqlDbTaskPropertiesResponseOutput {
	return o
}

// Array of errors. This is ignored if submitted.
func (o ConnectToTargetSqlDbTaskPropertiesResponseOutput) Errors() ODataErrorResponseArrayOutput {
	return o.ApplyT(func(v ConnectToTargetSqlDbTaskPropertiesResponse) []ODataErrorResponse { return v.Errors }).(ODataErrorResponseArrayOutput)
}

// Task input
func (o ConnectToTargetSqlDbTaskPropertiesResponseOutput) Input() ConnectToTargetSqlDbTaskInputResponsePtrOutput {
	return o.ApplyT(func(v ConnectToTargetSqlDbTaskPropertiesResponse) *ConnectToTargetSqlDbTaskInputResponse {
		return v.Input
	}).(ConnectToTargetSqlDbTaskInputResponsePtrOutput)
}

// Task output. This is ignored if submitted.
func (o ConnectToTargetSqlDbTaskPropertiesResponseOutput) Output() ConnectToTargetSqlDbTaskOutputResponseArrayOutput {
	return o.ApplyT(func(v ConnectToTargetSqlDbTaskPropertiesResponse) []ConnectToTargetSqlDbTaskOutputResponse {
		return v.Output
	}).(ConnectToTargetSqlDbTaskOutputResponseArrayOutput)
}

// The state of the task. This is ignored if submitted.
func (o ConnectToTargetSqlDbTaskPropertiesResponseOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectToTargetSqlDbTaskPropertiesResponse) string { return v.State }).(pulumi.StringOutput)
}

// Task type.
func (o ConnectToTargetSqlDbTaskPropertiesResponseOutput) TaskType() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectToTargetSqlDbTaskPropertiesResponse) string { return v.TaskType }).(pulumi.StringOutput)
}

// Input for the task that validates connection to Azure SQL Database Managed Instance.
type ConnectToTargetSqlMITaskInput struct {
	// Connection information for target SQL Server
	TargetConnectionInfo SqlConnectionInfo `pulumi:"targetConnectionInfo"`
}

// ConnectToTargetSqlMITaskInputInput is an input type that accepts ConnectToTargetSqlMITaskInputArgs and ConnectToTargetSqlMITaskInputOutput values.
// You can construct a concrete instance of `ConnectToTargetSqlMITaskInputInput` via:
//
//          ConnectToTargetSqlMITaskInputArgs{...}
type ConnectToTargetSqlMITaskInputInput interface {
	pulumi.Input

	ToConnectToTargetSqlMITaskInputOutput() ConnectToTargetSqlMITaskInputOutput
	ToConnectToTargetSqlMITaskInputOutputWithContext(context.Context) ConnectToTargetSqlMITaskInputOutput
}

// Input for the task that validates connection to Azure SQL Database Managed Instance.
type ConnectToTargetSqlMITaskInputArgs struct {
	// Connection information for target SQL Server
	TargetConnectionInfo SqlConnectionInfoInput `pulumi:"targetConnectionInfo"`
}

func (ConnectToTargetSqlMITaskInputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectToTargetSqlMITaskInput)(nil)).Elem()
}

func (i ConnectToTargetSqlMITaskInputArgs) ToConnectToTargetSqlMITaskInputOutput() ConnectToTargetSqlMITaskInputOutput {
	return i.ToConnectToTargetSqlMITaskInputOutputWithContext(context.Background())
}

func (i ConnectToTargetSqlMITaskInputArgs) ToConnectToTargetSqlMITaskInputOutputWithContext(ctx context.Context) ConnectToTargetSqlMITaskInputOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectToTargetSqlMITaskInputOutput)
}

func (i ConnectToTargetSqlMITaskInputArgs) ToConnectToTargetSqlMITaskInputPtrOutput() ConnectToTargetSqlMITaskInputPtrOutput {
	return i.ToConnectToTargetSqlMITaskInputPtrOutputWithContext(context.Background())
}

func (i ConnectToTargetSqlMITaskInputArgs) ToConnectToTargetSqlMITaskInputPtrOutputWithContext(ctx context.Context) ConnectToTargetSqlMITaskInputPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectToTargetSqlMITaskInputOutput).ToConnectToTargetSqlMITaskInputPtrOutputWithContext(ctx)
}

// ConnectToTargetSqlMITaskInputPtrInput is an input type that accepts ConnectToTargetSqlMITaskInputArgs, ConnectToTargetSqlMITaskInputPtr and ConnectToTargetSqlMITaskInputPtrOutput values.
// You can construct a concrete instance of `ConnectToTargetSqlMITaskInputPtrInput` via:
//
//          ConnectToTargetSqlMITaskInputArgs{...}
//
//  or:
//
//          nil
type ConnectToTargetSqlMITaskInputPtrInput interface {
	pulumi.Input

	ToConnectToTargetSqlMITaskInputPtrOutput() ConnectToTargetSqlMITaskInputPtrOutput
	ToConnectToTargetSqlMITaskInputPtrOutputWithContext(context.Context) ConnectToTargetSqlMITaskInputPtrOutput
}

type connectToTargetSqlMITaskInputPtrType ConnectToTargetSqlMITaskInputArgs

func ConnectToTargetSqlMITaskInputPtr(v *ConnectToTargetSqlMITaskInputArgs) ConnectToTargetSqlMITaskInputPtrInput {
	return (*connectToTargetSqlMITaskInputPtrType)(v)
}

func (*connectToTargetSqlMITaskInputPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ConnectToTargetSqlMITaskInput)(nil)).Elem()
}

func (i *connectToTargetSqlMITaskInputPtrType) ToConnectToTargetSqlMITaskInputPtrOutput() ConnectToTargetSqlMITaskInputPtrOutput {
	return i.ToConnectToTargetSqlMITaskInputPtrOutputWithContext(context.Background())
}

func (i *connectToTargetSqlMITaskInputPtrType) ToConnectToTargetSqlMITaskInputPtrOutputWithContext(ctx context.Context) ConnectToTargetSqlMITaskInputPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectToTargetSqlMITaskInputPtrOutput)
}

// Input for the task that validates connection to Azure SQL Database Managed Instance.
type ConnectToTargetSqlMITaskInputResponse struct {
	// Connection information for target SQL Server
	TargetConnectionInfo SqlConnectionInfoResponse `pulumi:"targetConnectionInfo"`
}

// Input for the task that validates connection to Azure SQL Database Managed Instance.
type ConnectToTargetSqlMITaskInputResponseOutput struct{ *pulumi.OutputState }

func (ConnectToTargetSqlMITaskInputResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectToTargetSqlMITaskInputResponse)(nil)).Elem()
}

func (o ConnectToTargetSqlMITaskInputResponseOutput) ToConnectToTargetSqlMITaskInputResponseOutput() ConnectToTargetSqlMITaskInputResponseOutput {
	return o
}

func (o ConnectToTargetSqlMITaskInputResponseOutput) ToConnectToTargetSqlMITaskInputResponseOutputWithContext(ctx context.Context) ConnectToTargetSqlMITaskInputResponseOutput {
	return o
}

func (o ConnectToTargetSqlMITaskInputResponseOutput) ToConnectToTargetSqlMITaskInputResponsePtrOutput() ConnectToTargetSqlMITaskInputResponsePtrOutput {
	return o.ToConnectToTargetSqlMITaskInputResponsePtrOutputWithContext(context.Background())
}

func (o ConnectToTargetSqlMITaskInputResponseOutput) ToConnectToTargetSqlMITaskInputResponsePtrOutputWithContext(ctx context.Context) ConnectToTargetSqlMITaskInputResponsePtrOutput {
	return o.ApplyT(func(v ConnectToTargetSqlMITaskInputResponse) *ConnectToTargetSqlMITaskInputResponse {
		return &v
	}).(ConnectToTargetSqlMITaskInputResponsePtrOutput)
}

// Connection information for target SQL Server
func (o ConnectToTargetSqlMITaskInputResponseOutput) TargetConnectionInfo() SqlConnectionInfoResponseOutput {
	return o.ApplyT(func(v ConnectToTargetSqlMITaskInputResponse) SqlConnectionInfoResponse { return v.TargetConnectionInfo }).(SqlConnectionInfoResponseOutput)
}

type ConnectToTargetSqlMITaskInputResponsePtrOutput struct{ *pulumi.OutputState }

func (ConnectToTargetSqlMITaskInputResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ConnectToTargetSqlMITaskInputResponse)(nil)).Elem()
}

func (o ConnectToTargetSqlMITaskInputResponsePtrOutput) ToConnectToTargetSqlMITaskInputResponsePtrOutput() ConnectToTargetSqlMITaskInputResponsePtrOutput {
	return o
}

func (o ConnectToTargetSqlMITaskInputResponsePtrOutput) ToConnectToTargetSqlMITaskInputResponsePtrOutputWithContext(ctx context.Context) ConnectToTargetSqlMITaskInputResponsePtrOutput {
	return o
}

func (o ConnectToTargetSqlMITaskInputResponsePtrOutput) Elem() ConnectToTargetSqlMITaskInputResponseOutput {
	return o.ApplyT(func(v *ConnectToTargetSqlMITaskInputResponse) ConnectToTargetSqlMITaskInputResponse { return *v }).(ConnectToTargetSqlMITaskInputResponseOutput)
}

// Connection information for target SQL Server
func (o ConnectToTargetSqlMITaskInputResponsePtrOutput) TargetConnectionInfo() SqlConnectionInfoResponsePtrOutput {
	return o.ApplyT(func(v *ConnectToTargetSqlMITaskInputResponse) *SqlConnectionInfoResponse {
		if v == nil {
			return nil
		}
		return &v.TargetConnectionInfo
	}).(SqlConnectionInfoResponsePtrOutput)
}

// Output for the task that validates connection to Azure SQL Database Managed Instance.
type ConnectToTargetSqlMITaskOutputResponse struct {
	// List of agent jobs on the target server.
	AgentJobs []string `pulumi:"agentJobs"`
	// Result identifier
	Id string `pulumi:"id"`
	// List of logins on the target server.
	Logins []string `pulumi:"logins"`
	// Target server brand version
	TargetServerBrandVersion string `pulumi:"targetServerBrandVersion"`
	// Target server version
	TargetServerVersion string `pulumi:"targetServerVersion"`
	// Validation errors
	ValidationErrors []ReportableExceptionResponse `pulumi:"validationErrors"`
}

// Output for the task that validates connection to Azure SQL Database Managed Instance.
type ConnectToTargetSqlMITaskOutputResponseOutput struct{ *pulumi.OutputState }

func (ConnectToTargetSqlMITaskOutputResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectToTargetSqlMITaskOutputResponse)(nil)).Elem()
}

func (o ConnectToTargetSqlMITaskOutputResponseOutput) ToConnectToTargetSqlMITaskOutputResponseOutput() ConnectToTargetSqlMITaskOutputResponseOutput {
	return o
}

func (o ConnectToTargetSqlMITaskOutputResponseOutput) ToConnectToTargetSqlMITaskOutputResponseOutputWithContext(ctx context.Context) ConnectToTargetSqlMITaskOutputResponseOutput {
	return o
}

// List of agent jobs on the target server.
func (o ConnectToTargetSqlMITaskOutputResponseOutput) AgentJobs() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ConnectToTargetSqlMITaskOutputResponse) []string { return v.AgentJobs }).(pulumi.StringArrayOutput)
}

// Result identifier
func (o ConnectToTargetSqlMITaskOutputResponseOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectToTargetSqlMITaskOutputResponse) string { return v.Id }).(pulumi.StringOutput)
}

// List of logins on the target server.
func (o ConnectToTargetSqlMITaskOutputResponseOutput) Logins() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ConnectToTargetSqlMITaskOutputResponse) []string { return v.Logins }).(pulumi.StringArrayOutput)
}

// Target server brand version
func (o ConnectToTargetSqlMITaskOutputResponseOutput) TargetServerBrandVersion() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectToTargetSqlMITaskOutputResponse) string { return v.TargetServerBrandVersion }).(pulumi.StringOutput)
}

// Target server version
func (o ConnectToTargetSqlMITaskOutputResponseOutput) TargetServerVersion() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectToTargetSqlMITaskOutputResponse) string { return v.TargetServerVersion }).(pulumi.StringOutput)
}

// Validation errors
func (o ConnectToTargetSqlMITaskOutputResponseOutput) ValidationErrors() ReportableExceptionResponseArrayOutput {
	return o.ApplyT(func(v ConnectToTargetSqlMITaskOutputResponse) []ReportableExceptionResponse {
		return v.ValidationErrors
	}).(ReportableExceptionResponseArrayOutput)
}

type ConnectToTargetSqlMITaskOutputResponseArrayOutput struct{ *pulumi.OutputState }

func (ConnectToTargetSqlMITaskOutputResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ConnectToTargetSqlMITaskOutputResponse)(nil)).Elem()
}

func (o ConnectToTargetSqlMITaskOutputResponseArrayOutput) ToConnectToTargetSqlMITaskOutputResponseArrayOutput() ConnectToTargetSqlMITaskOutputResponseArrayOutput {
	return o
}

func (o ConnectToTargetSqlMITaskOutputResponseArrayOutput) ToConnectToTargetSqlMITaskOutputResponseArrayOutputWithContext(ctx context.Context) ConnectToTargetSqlMITaskOutputResponseArrayOutput {
	return o
}

func (o ConnectToTargetSqlMITaskOutputResponseArrayOutput) Index(i pulumi.IntInput) ConnectToTargetSqlMITaskOutputResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ConnectToTargetSqlMITaskOutputResponse {
		return vs[0].([]ConnectToTargetSqlMITaskOutputResponse)[vs[1].(int)]
	}).(ConnectToTargetSqlMITaskOutputResponseOutput)
}

// Properties for the task that validates connection to Azure SQL Database Managed Instance
type ConnectToTargetSqlMITaskProperties struct {
	// Task input
	Input *ConnectToTargetSqlMITaskInput `pulumi:"input"`
	// Task type.
	TaskType string `pulumi:"taskType"`
}

// ConnectToTargetSqlMITaskPropertiesInput is an input type that accepts ConnectToTargetSqlMITaskPropertiesArgs and ConnectToTargetSqlMITaskPropertiesOutput values.
// You can construct a concrete instance of `ConnectToTargetSqlMITaskPropertiesInput` via:
//
//          ConnectToTargetSqlMITaskPropertiesArgs{...}
type ConnectToTargetSqlMITaskPropertiesInput interface {
	pulumi.Input

	ToConnectToTargetSqlMITaskPropertiesOutput() ConnectToTargetSqlMITaskPropertiesOutput
	ToConnectToTargetSqlMITaskPropertiesOutputWithContext(context.Context) ConnectToTargetSqlMITaskPropertiesOutput
}

// Properties for the task that validates connection to Azure SQL Database Managed Instance
type ConnectToTargetSqlMITaskPropertiesArgs struct {
	// Task input
	Input ConnectToTargetSqlMITaskInputPtrInput `pulumi:"input"`
	// Task type.
	TaskType pulumi.StringInput `pulumi:"taskType"`
}

func (ConnectToTargetSqlMITaskPropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectToTargetSqlMITaskProperties)(nil)).Elem()
}

func (i ConnectToTargetSqlMITaskPropertiesArgs) ToConnectToTargetSqlMITaskPropertiesOutput() ConnectToTargetSqlMITaskPropertiesOutput {
	return i.ToConnectToTargetSqlMITaskPropertiesOutputWithContext(context.Background())
}

func (i ConnectToTargetSqlMITaskPropertiesArgs) ToConnectToTargetSqlMITaskPropertiesOutputWithContext(ctx context.Context) ConnectToTargetSqlMITaskPropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectToTargetSqlMITaskPropertiesOutput)
}

// Properties for the task that validates connection to Azure SQL Database Managed Instance
type ConnectToTargetSqlMITaskPropertiesResponse struct {
	// Array of errors. This is ignored if submitted.
	Errors []ODataErrorResponse `pulumi:"errors"`
	// Task input
	Input *ConnectToTargetSqlMITaskInputResponse `pulumi:"input"`
	// Task output. This is ignored if submitted.
	Output []ConnectToTargetSqlMITaskOutputResponse `pulumi:"output"`
	// The state of the task. This is ignored if submitted.
	State string `pulumi:"state"`
	// Task type.
	TaskType string `pulumi:"taskType"`
}

// Properties for the task that validates connection to Azure SQL Database Managed Instance
type ConnectToTargetSqlMITaskPropertiesResponseOutput struct{ *pulumi.OutputState }

func (ConnectToTargetSqlMITaskPropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectToTargetSqlMITaskPropertiesResponse)(nil)).Elem()
}

func (o ConnectToTargetSqlMITaskPropertiesResponseOutput) ToConnectToTargetSqlMITaskPropertiesResponseOutput() ConnectToTargetSqlMITaskPropertiesResponseOutput {
	return o
}

func (o ConnectToTargetSqlMITaskPropertiesResponseOutput) ToConnectToTargetSqlMITaskPropertiesResponseOutputWithContext(ctx context.Context) ConnectToTargetSqlMITaskPropertiesResponseOutput {
	return o
}

// Array of errors. This is ignored if submitted.
func (o ConnectToTargetSqlMITaskPropertiesResponseOutput) Errors() ODataErrorResponseArrayOutput {
	return o.ApplyT(func(v ConnectToTargetSqlMITaskPropertiesResponse) []ODataErrorResponse { return v.Errors }).(ODataErrorResponseArrayOutput)
}

// Task input
func (o ConnectToTargetSqlMITaskPropertiesResponseOutput) Input() ConnectToTargetSqlMITaskInputResponsePtrOutput {
	return o.ApplyT(func(v ConnectToTargetSqlMITaskPropertiesResponse) *ConnectToTargetSqlMITaskInputResponse {
		return v.Input
	}).(ConnectToTargetSqlMITaskInputResponsePtrOutput)
}

// Task output. This is ignored if submitted.
func (o ConnectToTargetSqlMITaskPropertiesResponseOutput) Output() ConnectToTargetSqlMITaskOutputResponseArrayOutput {
	return o.ApplyT(func(v ConnectToTargetSqlMITaskPropertiesResponse) []ConnectToTargetSqlMITaskOutputResponse {
		return v.Output
	}).(ConnectToTargetSqlMITaskOutputResponseArrayOutput)
}

// The state of the task. This is ignored if submitted.
func (o ConnectToTargetSqlMITaskPropertiesResponseOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectToTargetSqlMITaskPropertiesResponse) string { return v.State }).(pulumi.StringOutput)
}

// Task type.
func (o ConnectToTargetSqlMITaskPropertiesResponseOutput) TaskType() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectToTargetSqlMITaskPropertiesResponse) string { return v.TaskType }).(pulumi.StringOutput)
}

// Database file specific information
type DatabaseFileInfoResponse struct {
	// Name of the database
	DatabaseName *string `pulumi:"databaseName"`
	// Database file type
	FileType *string `pulumi:"fileType"`
	// Unique identifier for database file
	Id *string `pulumi:"id"`
	// Logical name of the file
	LogicalName *string `pulumi:"logicalName"`
	// Operating-system full path of the file
	PhysicalFullName *string `pulumi:"physicalFullName"`
	// Suggested full path of the file for restoring
	RestoreFullName *string `pulumi:"restoreFullName"`
	// Size of the file in megabytes
	SizeMB *float64 `pulumi:"sizeMB"`
}

// Database file specific information
type DatabaseFileInfoResponseOutput struct{ *pulumi.OutputState }

func (DatabaseFileInfoResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DatabaseFileInfoResponse)(nil)).Elem()
}

func (o DatabaseFileInfoResponseOutput) ToDatabaseFileInfoResponseOutput() DatabaseFileInfoResponseOutput {
	return o
}

func (o DatabaseFileInfoResponseOutput) ToDatabaseFileInfoResponseOutputWithContext(ctx context.Context) DatabaseFileInfoResponseOutput {
	return o
}

// Name of the database
func (o DatabaseFileInfoResponseOutput) DatabaseName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DatabaseFileInfoResponse) *string { return v.DatabaseName }).(pulumi.StringPtrOutput)
}

// Database file type
func (o DatabaseFileInfoResponseOutput) FileType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DatabaseFileInfoResponse) *string { return v.FileType }).(pulumi.StringPtrOutput)
}

// Unique identifier for database file
func (o DatabaseFileInfoResponseOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DatabaseFileInfoResponse) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// Logical name of the file
func (o DatabaseFileInfoResponseOutput) LogicalName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DatabaseFileInfoResponse) *string { return v.LogicalName }).(pulumi.StringPtrOutput)
}

// Operating-system full path of the file
func (o DatabaseFileInfoResponseOutput) PhysicalFullName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DatabaseFileInfoResponse) *string { return v.PhysicalFullName }).(pulumi.StringPtrOutput)
}

// Suggested full path of the file for restoring
func (o DatabaseFileInfoResponseOutput) RestoreFullName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DatabaseFileInfoResponse) *string { return v.RestoreFullName }).(pulumi.StringPtrOutput)
}

// Size of the file in megabytes
func (o DatabaseFileInfoResponseOutput) SizeMB() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v DatabaseFileInfoResponse) *float64 { return v.SizeMB }).(pulumi.Float64PtrOutput)
}

type DatabaseFileInfoResponseArrayOutput struct{ *pulumi.OutputState }

func (DatabaseFileInfoResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DatabaseFileInfoResponse)(nil)).Elem()
}

func (o DatabaseFileInfoResponseArrayOutput) ToDatabaseFileInfoResponseArrayOutput() DatabaseFileInfoResponseArrayOutput {
	return o
}

func (o DatabaseFileInfoResponseArrayOutput) ToDatabaseFileInfoResponseArrayOutputWithContext(ctx context.Context) DatabaseFileInfoResponseArrayOutput {
	return o
}

func (o DatabaseFileInfoResponseArrayOutput) Index(i pulumi.IntInput) DatabaseFileInfoResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DatabaseFileInfoResponse {
		return vs[0].([]DatabaseFileInfoResponse)[vs[1].(int)]
	}).(DatabaseFileInfoResponseOutput)
}

// Project Database Details
type DatabaseInfo struct {
	// Name of the database
	SourceDatabaseName string `pulumi:"sourceDatabaseName"`
}

// DatabaseInfoInput is an input type that accepts DatabaseInfoArgs and DatabaseInfoOutput values.
// You can construct a concrete instance of `DatabaseInfoInput` via:
//
//          DatabaseInfoArgs{...}
type DatabaseInfoInput interface {
	pulumi.Input

	ToDatabaseInfoOutput() DatabaseInfoOutput
	ToDatabaseInfoOutputWithContext(context.Context) DatabaseInfoOutput
}

// Project Database Details
type DatabaseInfoArgs struct {
	// Name of the database
	SourceDatabaseName pulumi.StringInput `pulumi:"sourceDatabaseName"`
}

func (DatabaseInfoArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DatabaseInfo)(nil)).Elem()
}

func (i DatabaseInfoArgs) ToDatabaseInfoOutput() DatabaseInfoOutput {
	return i.ToDatabaseInfoOutputWithContext(context.Background())
}

func (i DatabaseInfoArgs) ToDatabaseInfoOutputWithContext(ctx context.Context) DatabaseInfoOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatabaseInfoOutput)
}

// DatabaseInfoArrayInput is an input type that accepts DatabaseInfoArray and DatabaseInfoArrayOutput values.
// You can construct a concrete instance of `DatabaseInfoArrayInput` via:
//
//          DatabaseInfoArray{ DatabaseInfoArgs{...} }
type DatabaseInfoArrayInput interface {
	pulumi.Input

	ToDatabaseInfoArrayOutput() DatabaseInfoArrayOutput
	ToDatabaseInfoArrayOutputWithContext(context.Context) DatabaseInfoArrayOutput
}

type DatabaseInfoArray []DatabaseInfoInput

func (DatabaseInfoArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DatabaseInfo)(nil)).Elem()
}

func (i DatabaseInfoArray) ToDatabaseInfoArrayOutput() DatabaseInfoArrayOutput {
	return i.ToDatabaseInfoArrayOutputWithContext(context.Background())
}

func (i DatabaseInfoArray) ToDatabaseInfoArrayOutputWithContext(ctx context.Context) DatabaseInfoArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatabaseInfoArrayOutput)
}

// Project Database Details
type DatabaseInfoResponse struct {
	// Name of the database
	SourceDatabaseName string `pulumi:"sourceDatabaseName"`
}

// Project Database Details
type DatabaseInfoResponseOutput struct{ *pulumi.OutputState }

func (DatabaseInfoResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DatabaseInfoResponse)(nil)).Elem()
}

func (o DatabaseInfoResponseOutput) ToDatabaseInfoResponseOutput() DatabaseInfoResponseOutput {
	return o
}

func (o DatabaseInfoResponseOutput) ToDatabaseInfoResponseOutputWithContext(ctx context.Context) DatabaseInfoResponseOutput {
	return o
}

// Name of the database
func (o DatabaseInfoResponseOutput) SourceDatabaseName() pulumi.StringOutput {
	return o.ApplyT(func(v DatabaseInfoResponse) string { return v.SourceDatabaseName }).(pulumi.StringOutput)
}

type DatabaseInfoResponseArrayOutput struct{ *pulumi.OutputState }

func (DatabaseInfoResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DatabaseInfoResponse)(nil)).Elem()
}

func (o DatabaseInfoResponseArrayOutput) ToDatabaseInfoResponseArrayOutput() DatabaseInfoResponseArrayOutput {
	return o
}

func (o DatabaseInfoResponseArrayOutput) ToDatabaseInfoResponseArrayOutputWithContext(ctx context.Context) DatabaseInfoResponseArrayOutput {
	return o
}

func (o DatabaseInfoResponseArrayOutput) Index(i pulumi.IntInput) DatabaseInfoResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DatabaseInfoResponse {
		return vs[0].([]DatabaseInfoResponse)[vs[1].(int)]
	}).(DatabaseInfoResponseOutput)
}

// File share information with Path, Username, and Password.
type FileShare struct {
	// Password credential used to connect to the share location.
	Password *string `pulumi:"password"`
	// The folder path for this share.
	Path string `pulumi:"path"`
	// User name credential to connect to the share location
	UserName *string `pulumi:"userName"`
}

// FileShareInput is an input type that accepts FileShareArgs and FileShareOutput values.
// You can construct a concrete instance of `FileShareInput` via:
//
//          FileShareArgs{...}
type FileShareInput interface {
	pulumi.Input

	ToFileShareOutput() FileShareOutput
	ToFileShareOutputWithContext(context.Context) FileShareOutput
}

// File share information with Path, Username, and Password.
type FileShareArgs struct {
	// Password credential used to connect to the share location.
	Password pulumi.StringPtrInput `pulumi:"password"`
	// The folder path for this share.
	Path pulumi.StringInput `pulumi:"path"`
	// User name credential to connect to the share location
	UserName pulumi.StringPtrInput `pulumi:"userName"`
}

func (FileShareArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FileShare)(nil)).Elem()
}

func (i FileShareArgs) ToFileShareOutput() FileShareOutput {
	return i.ToFileShareOutputWithContext(context.Background())
}

func (i FileShareArgs) ToFileShareOutputWithContext(ctx context.Context) FileShareOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FileShareOutput)
}

func (i FileShareArgs) ToFileSharePtrOutput() FileSharePtrOutput {
	return i.ToFileSharePtrOutputWithContext(context.Background())
}

func (i FileShareArgs) ToFileSharePtrOutputWithContext(ctx context.Context) FileSharePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FileShareOutput).ToFileSharePtrOutputWithContext(ctx)
}

// FileSharePtrInput is an input type that accepts FileShareArgs, FileSharePtr and FileSharePtrOutput values.
// You can construct a concrete instance of `FileSharePtrInput` via:
//
//          FileShareArgs{...}
//
//  or:
//
//          nil
type FileSharePtrInput interface {
	pulumi.Input

	ToFileSharePtrOutput() FileSharePtrOutput
	ToFileSharePtrOutputWithContext(context.Context) FileSharePtrOutput
}

type fileSharePtrType FileShareArgs

func FileSharePtr(v *FileShareArgs) FileSharePtrInput {
	return (*fileSharePtrType)(v)
}

func (*fileSharePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**FileShare)(nil)).Elem()
}

func (i *fileSharePtrType) ToFileSharePtrOutput() FileSharePtrOutput {
	return i.ToFileSharePtrOutputWithContext(context.Background())
}

func (i *fileSharePtrType) ToFileSharePtrOutputWithContext(ctx context.Context) FileSharePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FileSharePtrOutput)
}

// File share information with Path, Username, and Password.
type FileShareResponse struct {
	// Password credential used to connect to the share location.
	Password *string `pulumi:"password"`
	// The folder path for this share.
	Path string `pulumi:"path"`
	// User name credential to connect to the share location
	UserName *string `pulumi:"userName"`
}

// File share information with Path, Username, and Password.
type FileShareResponseOutput struct{ *pulumi.OutputState }

func (FileShareResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FileShareResponse)(nil)).Elem()
}

func (o FileShareResponseOutput) ToFileShareResponseOutput() FileShareResponseOutput {
	return o
}

func (o FileShareResponseOutput) ToFileShareResponseOutputWithContext(ctx context.Context) FileShareResponseOutput {
	return o
}

func (o FileShareResponseOutput) ToFileShareResponsePtrOutput() FileShareResponsePtrOutput {
	return o.ToFileShareResponsePtrOutputWithContext(context.Background())
}

func (o FileShareResponseOutput) ToFileShareResponsePtrOutputWithContext(ctx context.Context) FileShareResponsePtrOutput {
	return o.ApplyT(func(v FileShareResponse) *FileShareResponse {
		return &v
	}).(FileShareResponsePtrOutput)
}

// Password credential used to connect to the share location.
func (o FileShareResponseOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FileShareResponse) *string { return v.Password }).(pulumi.StringPtrOutput)
}

// The folder path for this share.
func (o FileShareResponseOutput) Path() pulumi.StringOutput {
	return o.ApplyT(func(v FileShareResponse) string { return v.Path }).(pulumi.StringOutput)
}

// User name credential to connect to the share location
func (o FileShareResponseOutput) UserName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FileShareResponse) *string { return v.UserName }).(pulumi.StringPtrOutput)
}

type FileShareResponsePtrOutput struct{ *pulumi.OutputState }

func (FileShareResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FileShareResponse)(nil)).Elem()
}

func (o FileShareResponsePtrOutput) ToFileShareResponsePtrOutput() FileShareResponsePtrOutput {
	return o
}

func (o FileShareResponsePtrOutput) ToFileShareResponsePtrOutputWithContext(ctx context.Context) FileShareResponsePtrOutput {
	return o
}

func (o FileShareResponsePtrOutput) Elem() FileShareResponseOutput {
	return o.ApplyT(func(v *FileShareResponse) FileShareResponse { return *v }).(FileShareResponseOutput)
}

// Password credential used to connect to the share location.
func (o FileShareResponsePtrOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FileShareResponse) *string {
		if v == nil {
			return nil
		}
		return v.Password
	}).(pulumi.StringPtrOutput)
}

// The folder path for this share.
func (o FileShareResponsePtrOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FileShareResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Path
	}).(pulumi.StringPtrOutput)
}

// User name credential to connect to the share location
func (o FileShareResponsePtrOutput) UserName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FileShareResponse) *string {
		if v == nil {
			return nil
		}
		return v.UserName
	}).(pulumi.StringPtrOutput)
}

// Input for the task that collects user tables for the given list of databases
type GetUserTablesSqlTaskInput struct {
	// Connection information for SQL Server
	ConnectionInfo SqlConnectionInfo `pulumi:"connectionInfo"`
	// List of database names to collect tables for
	SelectedDatabases []string `pulumi:"selectedDatabases"`
}

// GetUserTablesSqlTaskInputInput is an input type that accepts GetUserTablesSqlTaskInputArgs and GetUserTablesSqlTaskInputOutput values.
// You can construct a concrete instance of `GetUserTablesSqlTaskInputInput` via:
//
//          GetUserTablesSqlTaskInputArgs{...}
type GetUserTablesSqlTaskInputInput interface {
	pulumi.Input

	ToGetUserTablesSqlTaskInputOutput() GetUserTablesSqlTaskInputOutput
	ToGetUserTablesSqlTaskInputOutputWithContext(context.Context) GetUserTablesSqlTaskInputOutput
}

// Input for the task that collects user tables for the given list of databases
type GetUserTablesSqlTaskInputArgs struct {
	// Connection information for SQL Server
	ConnectionInfo SqlConnectionInfoInput `pulumi:"connectionInfo"`
	// List of database names to collect tables for
	SelectedDatabases pulumi.StringArrayInput `pulumi:"selectedDatabases"`
}

func (GetUserTablesSqlTaskInputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetUserTablesSqlTaskInput)(nil)).Elem()
}

func (i GetUserTablesSqlTaskInputArgs) ToGetUserTablesSqlTaskInputOutput() GetUserTablesSqlTaskInputOutput {
	return i.ToGetUserTablesSqlTaskInputOutputWithContext(context.Background())
}

func (i GetUserTablesSqlTaskInputArgs) ToGetUserTablesSqlTaskInputOutputWithContext(ctx context.Context) GetUserTablesSqlTaskInputOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetUserTablesSqlTaskInputOutput)
}

func (i GetUserTablesSqlTaskInputArgs) ToGetUserTablesSqlTaskInputPtrOutput() GetUserTablesSqlTaskInputPtrOutput {
	return i.ToGetUserTablesSqlTaskInputPtrOutputWithContext(context.Background())
}

func (i GetUserTablesSqlTaskInputArgs) ToGetUserTablesSqlTaskInputPtrOutputWithContext(ctx context.Context) GetUserTablesSqlTaskInputPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetUserTablesSqlTaskInputOutput).ToGetUserTablesSqlTaskInputPtrOutputWithContext(ctx)
}

// GetUserTablesSqlTaskInputPtrInput is an input type that accepts GetUserTablesSqlTaskInputArgs, GetUserTablesSqlTaskInputPtr and GetUserTablesSqlTaskInputPtrOutput values.
// You can construct a concrete instance of `GetUserTablesSqlTaskInputPtrInput` via:
//
//          GetUserTablesSqlTaskInputArgs{...}
//
//  or:
//
//          nil
type GetUserTablesSqlTaskInputPtrInput interface {
	pulumi.Input

	ToGetUserTablesSqlTaskInputPtrOutput() GetUserTablesSqlTaskInputPtrOutput
	ToGetUserTablesSqlTaskInputPtrOutputWithContext(context.Context) GetUserTablesSqlTaskInputPtrOutput
}

type getUserTablesSqlTaskInputPtrType GetUserTablesSqlTaskInputArgs

func GetUserTablesSqlTaskInputPtr(v *GetUserTablesSqlTaskInputArgs) GetUserTablesSqlTaskInputPtrInput {
	return (*getUserTablesSqlTaskInputPtrType)(v)
}

func (*getUserTablesSqlTaskInputPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GetUserTablesSqlTaskInput)(nil)).Elem()
}

func (i *getUserTablesSqlTaskInputPtrType) ToGetUserTablesSqlTaskInputPtrOutput() GetUserTablesSqlTaskInputPtrOutput {
	return i.ToGetUserTablesSqlTaskInputPtrOutputWithContext(context.Background())
}

func (i *getUserTablesSqlTaskInputPtrType) ToGetUserTablesSqlTaskInputPtrOutputWithContext(ctx context.Context) GetUserTablesSqlTaskInputPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetUserTablesSqlTaskInputPtrOutput)
}

// Input for the task that collects user tables for the given list of databases
type GetUserTablesSqlTaskInputResponse struct {
	// Connection information for SQL Server
	ConnectionInfo SqlConnectionInfoResponse `pulumi:"connectionInfo"`
	// List of database names to collect tables for
	SelectedDatabases []string `pulumi:"selectedDatabases"`
}

// Input for the task that collects user tables for the given list of databases
type GetUserTablesSqlTaskInputResponseOutput struct{ *pulumi.OutputState }

func (GetUserTablesSqlTaskInputResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetUserTablesSqlTaskInputResponse)(nil)).Elem()
}

func (o GetUserTablesSqlTaskInputResponseOutput) ToGetUserTablesSqlTaskInputResponseOutput() GetUserTablesSqlTaskInputResponseOutput {
	return o
}

func (o GetUserTablesSqlTaskInputResponseOutput) ToGetUserTablesSqlTaskInputResponseOutputWithContext(ctx context.Context) GetUserTablesSqlTaskInputResponseOutput {
	return o
}

func (o GetUserTablesSqlTaskInputResponseOutput) ToGetUserTablesSqlTaskInputResponsePtrOutput() GetUserTablesSqlTaskInputResponsePtrOutput {
	return o.ToGetUserTablesSqlTaskInputResponsePtrOutputWithContext(context.Background())
}

func (o GetUserTablesSqlTaskInputResponseOutput) ToGetUserTablesSqlTaskInputResponsePtrOutputWithContext(ctx context.Context) GetUserTablesSqlTaskInputResponsePtrOutput {
	return o.ApplyT(func(v GetUserTablesSqlTaskInputResponse) *GetUserTablesSqlTaskInputResponse {
		return &v
	}).(GetUserTablesSqlTaskInputResponsePtrOutput)
}

// Connection information for SQL Server
func (o GetUserTablesSqlTaskInputResponseOutput) ConnectionInfo() SqlConnectionInfoResponseOutput {
	return o.ApplyT(func(v GetUserTablesSqlTaskInputResponse) SqlConnectionInfoResponse { return v.ConnectionInfo }).(SqlConnectionInfoResponseOutput)
}

// List of database names to collect tables for
func (o GetUserTablesSqlTaskInputResponseOutput) SelectedDatabases() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetUserTablesSqlTaskInputResponse) []string { return v.SelectedDatabases }).(pulumi.StringArrayOutput)
}

type GetUserTablesSqlTaskInputResponsePtrOutput struct{ *pulumi.OutputState }

func (GetUserTablesSqlTaskInputResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GetUserTablesSqlTaskInputResponse)(nil)).Elem()
}

func (o GetUserTablesSqlTaskInputResponsePtrOutput) ToGetUserTablesSqlTaskInputResponsePtrOutput() GetUserTablesSqlTaskInputResponsePtrOutput {
	return o
}

func (o GetUserTablesSqlTaskInputResponsePtrOutput) ToGetUserTablesSqlTaskInputResponsePtrOutputWithContext(ctx context.Context) GetUserTablesSqlTaskInputResponsePtrOutput {
	return o
}

func (o GetUserTablesSqlTaskInputResponsePtrOutput) Elem() GetUserTablesSqlTaskInputResponseOutput {
	return o.ApplyT(func(v *GetUserTablesSqlTaskInputResponse) GetUserTablesSqlTaskInputResponse { return *v }).(GetUserTablesSqlTaskInputResponseOutput)
}

// Connection information for SQL Server
func (o GetUserTablesSqlTaskInputResponsePtrOutput) ConnectionInfo() SqlConnectionInfoResponsePtrOutput {
	return o.ApplyT(func(v *GetUserTablesSqlTaskInputResponse) *SqlConnectionInfoResponse {
		if v == nil {
			return nil
		}
		return &v.ConnectionInfo
	}).(SqlConnectionInfoResponsePtrOutput)
}

// List of database names to collect tables for
func (o GetUserTablesSqlTaskInputResponsePtrOutput) SelectedDatabases() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *GetUserTablesSqlTaskInputResponse) []string {
		if v == nil {
			return nil
		}
		return v.SelectedDatabases
	}).(pulumi.StringArrayOutput)
}

// Output of the task that collects user tables for the given list of databases
type GetUserTablesSqlTaskOutputResponse struct {
	// Mapping from database name to list of tables
	DatabasesToTables string `pulumi:"databasesToTables"`
	// Result identifier
	Id string `pulumi:"id"`
	// Validation errors
	ValidationErrors []ReportableExceptionResponse `pulumi:"validationErrors"`
}

// Output of the task that collects user tables for the given list of databases
type GetUserTablesSqlTaskOutputResponseOutput struct{ *pulumi.OutputState }

func (GetUserTablesSqlTaskOutputResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetUserTablesSqlTaskOutputResponse)(nil)).Elem()
}

func (o GetUserTablesSqlTaskOutputResponseOutput) ToGetUserTablesSqlTaskOutputResponseOutput() GetUserTablesSqlTaskOutputResponseOutput {
	return o
}

func (o GetUserTablesSqlTaskOutputResponseOutput) ToGetUserTablesSqlTaskOutputResponseOutputWithContext(ctx context.Context) GetUserTablesSqlTaskOutputResponseOutput {
	return o
}

// Mapping from database name to list of tables
func (o GetUserTablesSqlTaskOutputResponseOutput) DatabasesToTables() pulumi.StringOutput {
	return o.ApplyT(func(v GetUserTablesSqlTaskOutputResponse) string { return v.DatabasesToTables }).(pulumi.StringOutput)
}

// Result identifier
func (o GetUserTablesSqlTaskOutputResponseOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetUserTablesSqlTaskOutputResponse) string { return v.Id }).(pulumi.StringOutput)
}

// Validation errors
func (o GetUserTablesSqlTaskOutputResponseOutput) ValidationErrors() ReportableExceptionResponseArrayOutput {
	return o.ApplyT(func(v GetUserTablesSqlTaskOutputResponse) []ReportableExceptionResponse { return v.ValidationErrors }).(ReportableExceptionResponseArrayOutput)
}

type GetUserTablesSqlTaskOutputResponseArrayOutput struct{ *pulumi.OutputState }

func (GetUserTablesSqlTaskOutputResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetUserTablesSqlTaskOutputResponse)(nil)).Elem()
}

func (o GetUserTablesSqlTaskOutputResponseArrayOutput) ToGetUserTablesSqlTaskOutputResponseArrayOutput() GetUserTablesSqlTaskOutputResponseArrayOutput {
	return o
}

func (o GetUserTablesSqlTaskOutputResponseArrayOutput) ToGetUserTablesSqlTaskOutputResponseArrayOutputWithContext(ctx context.Context) GetUserTablesSqlTaskOutputResponseArrayOutput {
	return o
}

func (o GetUserTablesSqlTaskOutputResponseArrayOutput) Index(i pulumi.IntInput) GetUserTablesSqlTaskOutputResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetUserTablesSqlTaskOutputResponse {
		return vs[0].([]GetUserTablesSqlTaskOutputResponse)[vs[1].(int)]
	}).(GetUserTablesSqlTaskOutputResponseOutput)
}

// Properties for the task that collects user tables for the given list of databases
type GetUserTablesSqlTaskProperties struct {
	// Task input
	Input *GetUserTablesSqlTaskInput `pulumi:"input"`
	// Task type.
	TaskType string `pulumi:"taskType"`
}

// GetUserTablesSqlTaskPropertiesInput is an input type that accepts GetUserTablesSqlTaskPropertiesArgs and GetUserTablesSqlTaskPropertiesOutput values.
// You can construct a concrete instance of `GetUserTablesSqlTaskPropertiesInput` via:
//
//          GetUserTablesSqlTaskPropertiesArgs{...}
type GetUserTablesSqlTaskPropertiesInput interface {
	pulumi.Input

	ToGetUserTablesSqlTaskPropertiesOutput() GetUserTablesSqlTaskPropertiesOutput
	ToGetUserTablesSqlTaskPropertiesOutputWithContext(context.Context) GetUserTablesSqlTaskPropertiesOutput
}

// Properties for the task that collects user tables for the given list of databases
type GetUserTablesSqlTaskPropertiesArgs struct {
	// Task input
	Input GetUserTablesSqlTaskInputPtrInput `pulumi:"input"`
	// Task type.
	TaskType pulumi.StringInput `pulumi:"taskType"`
}

func (GetUserTablesSqlTaskPropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetUserTablesSqlTaskProperties)(nil)).Elem()
}

func (i GetUserTablesSqlTaskPropertiesArgs) ToGetUserTablesSqlTaskPropertiesOutput() GetUserTablesSqlTaskPropertiesOutput {
	return i.ToGetUserTablesSqlTaskPropertiesOutputWithContext(context.Background())
}

func (i GetUserTablesSqlTaskPropertiesArgs) ToGetUserTablesSqlTaskPropertiesOutputWithContext(ctx context.Context) GetUserTablesSqlTaskPropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetUserTablesSqlTaskPropertiesOutput)
}

// Properties for the task that collects user tables for the given list of databases
type GetUserTablesSqlTaskPropertiesResponse struct {
	// Array of errors. This is ignored if submitted.
	Errors []ODataErrorResponse `pulumi:"errors"`
	// Task input
	Input *GetUserTablesSqlTaskInputResponse `pulumi:"input"`
	// Task output. This is ignored if submitted.
	Output []GetUserTablesSqlTaskOutputResponse `pulumi:"output"`
	// The state of the task. This is ignored if submitted.
	State string `pulumi:"state"`
	// Task type.
	TaskType string `pulumi:"taskType"`
}

// Properties for the task that collects user tables for the given list of databases
type GetUserTablesSqlTaskPropertiesResponseOutput struct{ *pulumi.OutputState }

func (GetUserTablesSqlTaskPropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetUserTablesSqlTaskPropertiesResponse)(nil)).Elem()
}

func (o GetUserTablesSqlTaskPropertiesResponseOutput) ToGetUserTablesSqlTaskPropertiesResponseOutput() GetUserTablesSqlTaskPropertiesResponseOutput {
	return o
}

func (o GetUserTablesSqlTaskPropertiesResponseOutput) ToGetUserTablesSqlTaskPropertiesResponseOutputWithContext(ctx context.Context) GetUserTablesSqlTaskPropertiesResponseOutput {
	return o
}

// Array of errors. This is ignored if submitted.
func (o GetUserTablesSqlTaskPropertiesResponseOutput) Errors() ODataErrorResponseArrayOutput {
	return o.ApplyT(func(v GetUserTablesSqlTaskPropertiesResponse) []ODataErrorResponse { return v.Errors }).(ODataErrorResponseArrayOutput)
}

// Task input
func (o GetUserTablesSqlTaskPropertiesResponseOutput) Input() GetUserTablesSqlTaskInputResponsePtrOutput {
	return o.ApplyT(func(v GetUserTablesSqlTaskPropertiesResponse) *GetUserTablesSqlTaskInputResponse { return v.Input }).(GetUserTablesSqlTaskInputResponsePtrOutput)
}

// Task output. This is ignored if submitted.
func (o GetUserTablesSqlTaskPropertiesResponseOutput) Output() GetUserTablesSqlTaskOutputResponseArrayOutput {
	return o.ApplyT(func(v GetUserTablesSqlTaskPropertiesResponse) []GetUserTablesSqlTaskOutputResponse { return v.Output }).(GetUserTablesSqlTaskOutputResponseArrayOutput)
}

// The state of the task. This is ignored if submitted.
func (o GetUserTablesSqlTaskPropertiesResponseOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v GetUserTablesSqlTaskPropertiesResponse) string { return v.State }).(pulumi.StringOutput)
}

// Task type.
func (o GetUserTablesSqlTaskPropertiesResponseOutput) TaskType() pulumi.StringOutput {
	return o.ApplyT(func(v GetUserTablesSqlTaskPropertiesResponse) string { return v.TaskType }).(pulumi.StringOutput)
}

// Database specific information for SQL to Azure SQL DB migration task inputs
type MigrateSqlServerSqlDbDatabaseInput struct {
	// Whether to set database read only before migration
	MakeSourceDbReadOnly *bool `pulumi:"makeSourceDbReadOnly"`
	// Name of the database
	Name *string `pulumi:"name"`
	// Mapping of source to target tables
	TableMap map[string]string `pulumi:"tableMap"`
	// Name of target database. Note: Target database will be truncated before starting migration.
	TargetDatabaseName *string `pulumi:"targetDatabaseName"`
}

// MigrateSqlServerSqlDbDatabaseInputInput is an input type that accepts MigrateSqlServerSqlDbDatabaseInputArgs and MigrateSqlServerSqlDbDatabaseInputOutput values.
// You can construct a concrete instance of `MigrateSqlServerSqlDbDatabaseInputInput` via:
//
//          MigrateSqlServerSqlDbDatabaseInputArgs{...}
type MigrateSqlServerSqlDbDatabaseInputInput interface {
	pulumi.Input

	ToMigrateSqlServerSqlDbDatabaseInputOutput() MigrateSqlServerSqlDbDatabaseInputOutput
	ToMigrateSqlServerSqlDbDatabaseInputOutputWithContext(context.Context) MigrateSqlServerSqlDbDatabaseInputOutput
}

// Database specific information for SQL to Azure SQL DB migration task inputs
type MigrateSqlServerSqlDbDatabaseInputArgs struct {
	// Whether to set database read only before migration
	MakeSourceDbReadOnly pulumi.BoolPtrInput `pulumi:"makeSourceDbReadOnly"`
	// Name of the database
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Mapping of source to target tables
	TableMap pulumi.StringMapInput `pulumi:"tableMap"`
	// Name of target database. Note: Target database will be truncated before starting migration.
	TargetDatabaseName pulumi.StringPtrInput `pulumi:"targetDatabaseName"`
}

func (MigrateSqlServerSqlDbDatabaseInputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MigrateSqlServerSqlDbDatabaseInput)(nil)).Elem()
}

func (i MigrateSqlServerSqlDbDatabaseInputArgs) ToMigrateSqlServerSqlDbDatabaseInputOutput() MigrateSqlServerSqlDbDatabaseInputOutput {
	return i.ToMigrateSqlServerSqlDbDatabaseInputOutputWithContext(context.Background())
}

func (i MigrateSqlServerSqlDbDatabaseInputArgs) ToMigrateSqlServerSqlDbDatabaseInputOutputWithContext(ctx context.Context) MigrateSqlServerSqlDbDatabaseInputOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MigrateSqlServerSqlDbDatabaseInputOutput)
}

// MigrateSqlServerSqlDbDatabaseInputArrayInput is an input type that accepts MigrateSqlServerSqlDbDatabaseInputArray and MigrateSqlServerSqlDbDatabaseInputArrayOutput values.
// You can construct a concrete instance of `MigrateSqlServerSqlDbDatabaseInputArrayInput` via:
//
//          MigrateSqlServerSqlDbDatabaseInputArray{ MigrateSqlServerSqlDbDatabaseInputArgs{...} }
type MigrateSqlServerSqlDbDatabaseInputArrayInput interface {
	pulumi.Input

	ToMigrateSqlServerSqlDbDatabaseInputArrayOutput() MigrateSqlServerSqlDbDatabaseInputArrayOutput
	ToMigrateSqlServerSqlDbDatabaseInputArrayOutputWithContext(context.Context) MigrateSqlServerSqlDbDatabaseInputArrayOutput
}

type MigrateSqlServerSqlDbDatabaseInputArray []MigrateSqlServerSqlDbDatabaseInputInput

func (MigrateSqlServerSqlDbDatabaseInputArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MigrateSqlServerSqlDbDatabaseInput)(nil)).Elem()
}

func (i MigrateSqlServerSqlDbDatabaseInputArray) ToMigrateSqlServerSqlDbDatabaseInputArrayOutput() MigrateSqlServerSqlDbDatabaseInputArrayOutput {
	return i.ToMigrateSqlServerSqlDbDatabaseInputArrayOutputWithContext(context.Background())
}

func (i MigrateSqlServerSqlDbDatabaseInputArray) ToMigrateSqlServerSqlDbDatabaseInputArrayOutputWithContext(ctx context.Context) MigrateSqlServerSqlDbDatabaseInputArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MigrateSqlServerSqlDbDatabaseInputArrayOutput)
}

// Database specific information for SQL to Azure SQL DB migration task inputs
type MigrateSqlServerSqlDbDatabaseInputResponse struct {
	// Whether to set database read only before migration
	MakeSourceDbReadOnly *bool `pulumi:"makeSourceDbReadOnly"`
	// Name of the database
	Name *string `pulumi:"name"`
	// Mapping of source to target tables
	TableMap map[string]string `pulumi:"tableMap"`
	// Name of target database. Note: Target database will be truncated before starting migration.
	TargetDatabaseName *string `pulumi:"targetDatabaseName"`
}

// Database specific information for SQL to Azure SQL DB migration task inputs
type MigrateSqlServerSqlDbDatabaseInputResponseOutput struct{ *pulumi.OutputState }

func (MigrateSqlServerSqlDbDatabaseInputResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MigrateSqlServerSqlDbDatabaseInputResponse)(nil)).Elem()
}

func (o MigrateSqlServerSqlDbDatabaseInputResponseOutput) ToMigrateSqlServerSqlDbDatabaseInputResponseOutput() MigrateSqlServerSqlDbDatabaseInputResponseOutput {
	return o
}

func (o MigrateSqlServerSqlDbDatabaseInputResponseOutput) ToMigrateSqlServerSqlDbDatabaseInputResponseOutputWithContext(ctx context.Context) MigrateSqlServerSqlDbDatabaseInputResponseOutput {
	return o
}

// Whether to set database read only before migration
func (o MigrateSqlServerSqlDbDatabaseInputResponseOutput) MakeSourceDbReadOnly() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbDatabaseInputResponse) *bool { return v.MakeSourceDbReadOnly }).(pulumi.BoolPtrOutput)
}

// Name of the database
func (o MigrateSqlServerSqlDbDatabaseInputResponseOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbDatabaseInputResponse) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Mapping of source to target tables
func (o MigrateSqlServerSqlDbDatabaseInputResponseOutput) TableMap() pulumi.StringMapOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbDatabaseInputResponse) map[string]string { return v.TableMap }).(pulumi.StringMapOutput)
}

// Name of target database. Note: Target database will be truncated before starting migration.
func (o MigrateSqlServerSqlDbDatabaseInputResponseOutput) TargetDatabaseName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbDatabaseInputResponse) *string { return v.TargetDatabaseName }).(pulumi.StringPtrOutput)
}

type MigrateSqlServerSqlDbDatabaseInputResponseArrayOutput struct{ *pulumi.OutputState }

func (MigrateSqlServerSqlDbDatabaseInputResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MigrateSqlServerSqlDbDatabaseInputResponse)(nil)).Elem()
}

func (o MigrateSqlServerSqlDbDatabaseInputResponseArrayOutput) ToMigrateSqlServerSqlDbDatabaseInputResponseArrayOutput() MigrateSqlServerSqlDbDatabaseInputResponseArrayOutput {
	return o
}

func (o MigrateSqlServerSqlDbDatabaseInputResponseArrayOutput) ToMigrateSqlServerSqlDbDatabaseInputResponseArrayOutputWithContext(ctx context.Context) MigrateSqlServerSqlDbDatabaseInputResponseArrayOutput {
	return o
}

func (o MigrateSqlServerSqlDbDatabaseInputResponseArrayOutput) Index(i pulumi.IntInput) MigrateSqlServerSqlDbDatabaseInputResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) MigrateSqlServerSqlDbDatabaseInputResponse {
		return vs[0].([]MigrateSqlServerSqlDbDatabaseInputResponse)[vs[1].(int)]
	}).(MigrateSqlServerSqlDbDatabaseInputResponseOutput)
}

// Input for the task that migrates on-prem SQL Server databases to Azure SQL Database
type MigrateSqlServerSqlDbTaskInput struct {
	// Databases to migrate
	SelectedDatabases []MigrateSqlServerSqlDbDatabaseInput `pulumi:"selectedDatabases"`
	// Information for connecting to source
	SourceConnectionInfo SqlConnectionInfo `pulumi:"sourceConnectionInfo"`
	// Information for connecting to target
	TargetConnectionInfo SqlConnectionInfo `pulumi:"targetConnectionInfo"`
	// Options for enabling various post migration validations. Available options,
	//  1.) Data Integrity Check: Performs a checksum based comparison on source and target tables after the migration to ensure the correctness of the data.
	//  2.) Schema Validation: Performs a thorough schema comparison between the source and target tables and provides a list of differences between the source and target database, 3.) Query Analysis: Executes a set of queries picked up automatically either from the Query Plan Cache or Query Store and execute them and compares the execution time between the source and target database.
	ValidationOptions *MigrationValidationOptions `pulumi:"validationOptions"`
}

// MigrateSqlServerSqlDbTaskInputInput is an input type that accepts MigrateSqlServerSqlDbTaskInputArgs and MigrateSqlServerSqlDbTaskInputOutput values.
// You can construct a concrete instance of `MigrateSqlServerSqlDbTaskInputInput` via:
//
//          MigrateSqlServerSqlDbTaskInputArgs{...}
type MigrateSqlServerSqlDbTaskInputInput interface {
	pulumi.Input

	ToMigrateSqlServerSqlDbTaskInputOutput() MigrateSqlServerSqlDbTaskInputOutput
	ToMigrateSqlServerSqlDbTaskInputOutputWithContext(context.Context) MigrateSqlServerSqlDbTaskInputOutput
}

// Input for the task that migrates on-prem SQL Server databases to Azure SQL Database
type MigrateSqlServerSqlDbTaskInputArgs struct {
	// Databases to migrate
	SelectedDatabases MigrateSqlServerSqlDbDatabaseInputArrayInput `pulumi:"selectedDatabases"`
	// Information for connecting to source
	SourceConnectionInfo SqlConnectionInfoInput `pulumi:"sourceConnectionInfo"`
	// Information for connecting to target
	TargetConnectionInfo SqlConnectionInfoInput `pulumi:"targetConnectionInfo"`
	// Options for enabling various post migration validations. Available options,
	//  1.) Data Integrity Check: Performs a checksum based comparison on source and target tables after the migration to ensure the correctness of the data.
	//  2.) Schema Validation: Performs a thorough schema comparison between the source and target tables and provides a list of differences between the source and target database, 3.) Query Analysis: Executes a set of queries picked up automatically either from the Query Plan Cache or Query Store and execute them and compares the execution time between the source and target database.
	ValidationOptions MigrationValidationOptionsPtrInput `pulumi:"validationOptions"`
}

func (MigrateSqlServerSqlDbTaskInputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MigrateSqlServerSqlDbTaskInput)(nil)).Elem()
}

func (i MigrateSqlServerSqlDbTaskInputArgs) ToMigrateSqlServerSqlDbTaskInputOutput() MigrateSqlServerSqlDbTaskInputOutput {
	return i.ToMigrateSqlServerSqlDbTaskInputOutputWithContext(context.Background())
}

func (i MigrateSqlServerSqlDbTaskInputArgs) ToMigrateSqlServerSqlDbTaskInputOutputWithContext(ctx context.Context) MigrateSqlServerSqlDbTaskInputOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MigrateSqlServerSqlDbTaskInputOutput)
}

func (i MigrateSqlServerSqlDbTaskInputArgs) ToMigrateSqlServerSqlDbTaskInputPtrOutput() MigrateSqlServerSqlDbTaskInputPtrOutput {
	return i.ToMigrateSqlServerSqlDbTaskInputPtrOutputWithContext(context.Background())
}

func (i MigrateSqlServerSqlDbTaskInputArgs) ToMigrateSqlServerSqlDbTaskInputPtrOutputWithContext(ctx context.Context) MigrateSqlServerSqlDbTaskInputPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MigrateSqlServerSqlDbTaskInputOutput).ToMigrateSqlServerSqlDbTaskInputPtrOutputWithContext(ctx)
}

// MigrateSqlServerSqlDbTaskInputPtrInput is an input type that accepts MigrateSqlServerSqlDbTaskInputArgs, MigrateSqlServerSqlDbTaskInputPtr and MigrateSqlServerSqlDbTaskInputPtrOutput values.
// You can construct a concrete instance of `MigrateSqlServerSqlDbTaskInputPtrInput` via:
//
//          MigrateSqlServerSqlDbTaskInputArgs{...}
//
//  or:
//
//          nil
type MigrateSqlServerSqlDbTaskInputPtrInput interface {
	pulumi.Input

	ToMigrateSqlServerSqlDbTaskInputPtrOutput() MigrateSqlServerSqlDbTaskInputPtrOutput
	ToMigrateSqlServerSqlDbTaskInputPtrOutputWithContext(context.Context) MigrateSqlServerSqlDbTaskInputPtrOutput
}

type migrateSqlServerSqlDbTaskInputPtrType MigrateSqlServerSqlDbTaskInputArgs

func MigrateSqlServerSqlDbTaskInputPtr(v *MigrateSqlServerSqlDbTaskInputArgs) MigrateSqlServerSqlDbTaskInputPtrInput {
	return (*migrateSqlServerSqlDbTaskInputPtrType)(v)
}

func (*migrateSqlServerSqlDbTaskInputPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**MigrateSqlServerSqlDbTaskInput)(nil)).Elem()
}

func (i *migrateSqlServerSqlDbTaskInputPtrType) ToMigrateSqlServerSqlDbTaskInputPtrOutput() MigrateSqlServerSqlDbTaskInputPtrOutput {
	return i.ToMigrateSqlServerSqlDbTaskInputPtrOutputWithContext(context.Background())
}

func (i *migrateSqlServerSqlDbTaskInputPtrType) ToMigrateSqlServerSqlDbTaskInputPtrOutputWithContext(ctx context.Context) MigrateSqlServerSqlDbTaskInputPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MigrateSqlServerSqlDbTaskInputPtrOutput)
}

// Input for the task that migrates on-prem SQL Server databases to Azure SQL Database
type MigrateSqlServerSqlDbTaskInputResponse struct {
	// Databases to migrate
	SelectedDatabases []MigrateSqlServerSqlDbDatabaseInputResponse `pulumi:"selectedDatabases"`
	// Information for connecting to source
	SourceConnectionInfo SqlConnectionInfoResponse `pulumi:"sourceConnectionInfo"`
	// Information for connecting to target
	TargetConnectionInfo SqlConnectionInfoResponse `pulumi:"targetConnectionInfo"`
	// Options for enabling various post migration validations. Available options,
	//  1.) Data Integrity Check: Performs a checksum based comparison on source and target tables after the migration to ensure the correctness of the data.
	//  2.) Schema Validation: Performs a thorough schema comparison between the source and target tables and provides a list of differences between the source and target database, 3.) Query Analysis: Executes a set of queries picked up automatically either from the Query Plan Cache or Query Store and execute them and compares the execution time between the source and target database.
	ValidationOptions *MigrationValidationOptionsResponse `pulumi:"validationOptions"`
}

// Input for the task that migrates on-prem SQL Server databases to Azure SQL Database
type MigrateSqlServerSqlDbTaskInputResponseOutput struct{ *pulumi.OutputState }

func (MigrateSqlServerSqlDbTaskInputResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MigrateSqlServerSqlDbTaskInputResponse)(nil)).Elem()
}

func (o MigrateSqlServerSqlDbTaskInputResponseOutput) ToMigrateSqlServerSqlDbTaskInputResponseOutput() MigrateSqlServerSqlDbTaskInputResponseOutput {
	return o
}

func (o MigrateSqlServerSqlDbTaskInputResponseOutput) ToMigrateSqlServerSqlDbTaskInputResponseOutputWithContext(ctx context.Context) MigrateSqlServerSqlDbTaskInputResponseOutput {
	return o
}

func (o MigrateSqlServerSqlDbTaskInputResponseOutput) ToMigrateSqlServerSqlDbTaskInputResponsePtrOutput() MigrateSqlServerSqlDbTaskInputResponsePtrOutput {
	return o.ToMigrateSqlServerSqlDbTaskInputResponsePtrOutputWithContext(context.Background())
}

func (o MigrateSqlServerSqlDbTaskInputResponseOutput) ToMigrateSqlServerSqlDbTaskInputResponsePtrOutputWithContext(ctx context.Context) MigrateSqlServerSqlDbTaskInputResponsePtrOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbTaskInputResponse) *MigrateSqlServerSqlDbTaskInputResponse {
		return &v
	}).(MigrateSqlServerSqlDbTaskInputResponsePtrOutput)
}

// Databases to migrate
func (o MigrateSqlServerSqlDbTaskInputResponseOutput) SelectedDatabases() MigrateSqlServerSqlDbDatabaseInputResponseArrayOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbTaskInputResponse) []MigrateSqlServerSqlDbDatabaseInputResponse {
		return v.SelectedDatabases
	}).(MigrateSqlServerSqlDbDatabaseInputResponseArrayOutput)
}

// Information for connecting to source
func (o MigrateSqlServerSqlDbTaskInputResponseOutput) SourceConnectionInfo() SqlConnectionInfoResponseOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbTaskInputResponse) SqlConnectionInfoResponse {
		return v.SourceConnectionInfo
	}).(SqlConnectionInfoResponseOutput)
}

// Information for connecting to target
func (o MigrateSqlServerSqlDbTaskInputResponseOutput) TargetConnectionInfo() SqlConnectionInfoResponseOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbTaskInputResponse) SqlConnectionInfoResponse {
		return v.TargetConnectionInfo
	}).(SqlConnectionInfoResponseOutput)
}

// Options for enabling various post migration validations. Available options,
//  1.) Data Integrity Check: Performs a checksum based comparison on source and target tables after the migration to ensure the correctness of the data.
//  2.) Schema Validation: Performs a thorough schema comparison between the source and target tables and provides a list of differences between the source and target database, 3.) Query Analysis: Executes a set of queries picked up automatically either from the Query Plan Cache or Query Store and execute them and compares the execution time between the source and target database.
func (o MigrateSqlServerSqlDbTaskInputResponseOutput) ValidationOptions() MigrationValidationOptionsResponsePtrOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbTaskInputResponse) *MigrationValidationOptionsResponse {
		return v.ValidationOptions
	}).(MigrationValidationOptionsResponsePtrOutput)
}

type MigrateSqlServerSqlDbTaskInputResponsePtrOutput struct{ *pulumi.OutputState }

func (MigrateSqlServerSqlDbTaskInputResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MigrateSqlServerSqlDbTaskInputResponse)(nil)).Elem()
}

func (o MigrateSqlServerSqlDbTaskInputResponsePtrOutput) ToMigrateSqlServerSqlDbTaskInputResponsePtrOutput() MigrateSqlServerSqlDbTaskInputResponsePtrOutput {
	return o
}

func (o MigrateSqlServerSqlDbTaskInputResponsePtrOutput) ToMigrateSqlServerSqlDbTaskInputResponsePtrOutputWithContext(ctx context.Context) MigrateSqlServerSqlDbTaskInputResponsePtrOutput {
	return o
}

func (o MigrateSqlServerSqlDbTaskInputResponsePtrOutput) Elem() MigrateSqlServerSqlDbTaskInputResponseOutput {
	return o.ApplyT(func(v *MigrateSqlServerSqlDbTaskInputResponse) MigrateSqlServerSqlDbTaskInputResponse { return *v }).(MigrateSqlServerSqlDbTaskInputResponseOutput)
}

// Databases to migrate
func (o MigrateSqlServerSqlDbTaskInputResponsePtrOutput) SelectedDatabases() MigrateSqlServerSqlDbDatabaseInputResponseArrayOutput {
	return o.ApplyT(func(v *MigrateSqlServerSqlDbTaskInputResponse) []MigrateSqlServerSqlDbDatabaseInputResponse {
		if v == nil {
			return nil
		}
		return v.SelectedDatabases
	}).(MigrateSqlServerSqlDbDatabaseInputResponseArrayOutput)
}

// Information for connecting to source
func (o MigrateSqlServerSqlDbTaskInputResponsePtrOutput) SourceConnectionInfo() SqlConnectionInfoResponsePtrOutput {
	return o.ApplyT(func(v *MigrateSqlServerSqlDbTaskInputResponse) *SqlConnectionInfoResponse {
		if v == nil {
			return nil
		}
		return &v.SourceConnectionInfo
	}).(SqlConnectionInfoResponsePtrOutput)
}

// Information for connecting to target
func (o MigrateSqlServerSqlDbTaskInputResponsePtrOutput) TargetConnectionInfo() SqlConnectionInfoResponsePtrOutput {
	return o.ApplyT(func(v *MigrateSqlServerSqlDbTaskInputResponse) *SqlConnectionInfoResponse {
		if v == nil {
			return nil
		}
		return &v.TargetConnectionInfo
	}).(SqlConnectionInfoResponsePtrOutput)
}

// Options for enabling various post migration validations. Available options,
//  1.) Data Integrity Check: Performs a checksum based comparison on source and target tables after the migration to ensure the correctness of the data.
//  2.) Schema Validation: Performs a thorough schema comparison between the source and target tables and provides a list of differences between the source and target database, 3.) Query Analysis: Executes a set of queries picked up automatically either from the Query Plan Cache or Query Store and execute them and compares the execution time between the source and target database.
func (o MigrateSqlServerSqlDbTaskInputResponsePtrOutput) ValidationOptions() MigrationValidationOptionsResponsePtrOutput {
	return o.ApplyT(func(v *MigrateSqlServerSqlDbTaskInputResponse) *MigrationValidationOptionsResponse {
		if v == nil {
			return nil
		}
		return v.ValidationOptions
	}).(MigrationValidationOptionsResponsePtrOutput)
}

type MigrateSqlServerSqlDbTaskOutputDatabaseLevelResponse struct {
	// Name of the item
	DatabaseName string `pulumi:"databaseName"`
	// Migration end time
	EndedOn string `pulumi:"endedOn"`
	// Number of database/object errors.
	ErrorCount int `pulumi:"errorCount"`
	// Wildcard string prefix to use for querying all errors of the item
	ErrorPrefix string `pulumi:"errorPrefix"`
	// Migration exceptions and warnings.
	ExceptionsAndWarnings []ReportableExceptionResponse `pulumi:"exceptionsAndWarnings"`
	// Result identifier
	Id string `pulumi:"id"`
	// Migration progress message
	Message string `pulumi:"message"`
	// Number of objects
	NumberOfObjects int `pulumi:"numberOfObjects"`
	// Number of successfully completed objects
	NumberOfObjectsCompleted int `pulumi:"numberOfObjectsCompleted"`
	// Summary of object results in the migration
	ObjectSummary string `pulumi:"objectSummary"`
	// Wildcard string prefix to use for querying all sub-tem results of the item
	ResultPrefix string `pulumi:"resultPrefix"`
	// Result type
	ResultType string `pulumi:"resultType"`
	// Migration stage that this database is in
	Stage string `pulumi:"stage"`
	// Migration start time
	StartedOn string `pulumi:"startedOn"`
	// Current state of migration
	State string `pulumi:"state"`
	// Status message
	StatusMessage string `pulumi:"statusMessage"`
}

type MigrateSqlServerSqlDbTaskOutputDatabaseLevelResponseOutput struct{ *pulumi.OutputState }

func (MigrateSqlServerSqlDbTaskOutputDatabaseLevelResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MigrateSqlServerSqlDbTaskOutputDatabaseLevelResponse)(nil)).Elem()
}

func (o MigrateSqlServerSqlDbTaskOutputDatabaseLevelResponseOutput) ToMigrateSqlServerSqlDbTaskOutputDatabaseLevelResponseOutput() MigrateSqlServerSqlDbTaskOutputDatabaseLevelResponseOutput {
	return o
}

func (o MigrateSqlServerSqlDbTaskOutputDatabaseLevelResponseOutput) ToMigrateSqlServerSqlDbTaskOutputDatabaseLevelResponseOutputWithContext(ctx context.Context) MigrateSqlServerSqlDbTaskOutputDatabaseLevelResponseOutput {
	return o
}

// Name of the item
func (o MigrateSqlServerSqlDbTaskOutputDatabaseLevelResponseOutput) DatabaseName() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbTaskOutputDatabaseLevelResponse) string { return v.DatabaseName }).(pulumi.StringOutput)
}

// Migration end time
func (o MigrateSqlServerSqlDbTaskOutputDatabaseLevelResponseOutput) EndedOn() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbTaskOutputDatabaseLevelResponse) string { return v.EndedOn }).(pulumi.StringOutput)
}

// Number of database/object errors.
func (o MigrateSqlServerSqlDbTaskOutputDatabaseLevelResponseOutput) ErrorCount() pulumi.IntOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbTaskOutputDatabaseLevelResponse) int { return v.ErrorCount }).(pulumi.IntOutput)
}

// Wildcard string prefix to use for querying all errors of the item
func (o MigrateSqlServerSqlDbTaskOutputDatabaseLevelResponseOutput) ErrorPrefix() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbTaskOutputDatabaseLevelResponse) string { return v.ErrorPrefix }).(pulumi.StringOutput)
}

// Migration exceptions and warnings.
func (o MigrateSqlServerSqlDbTaskOutputDatabaseLevelResponseOutput) ExceptionsAndWarnings() ReportableExceptionResponseArrayOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbTaskOutputDatabaseLevelResponse) []ReportableExceptionResponse {
		return v.ExceptionsAndWarnings
	}).(ReportableExceptionResponseArrayOutput)
}

// Result identifier
func (o MigrateSqlServerSqlDbTaskOutputDatabaseLevelResponseOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbTaskOutputDatabaseLevelResponse) string { return v.Id }).(pulumi.StringOutput)
}

// Migration progress message
func (o MigrateSqlServerSqlDbTaskOutputDatabaseLevelResponseOutput) Message() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbTaskOutputDatabaseLevelResponse) string { return v.Message }).(pulumi.StringOutput)
}

// Number of objects
func (o MigrateSqlServerSqlDbTaskOutputDatabaseLevelResponseOutput) NumberOfObjects() pulumi.IntOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbTaskOutputDatabaseLevelResponse) int { return v.NumberOfObjects }).(pulumi.IntOutput)
}

// Number of successfully completed objects
func (o MigrateSqlServerSqlDbTaskOutputDatabaseLevelResponseOutput) NumberOfObjectsCompleted() pulumi.IntOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbTaskOutputDatabaseLevelResponse) int { return v.NumberOfObjectsCompleted }).(pulumi.IntOutput)
}

// Summary of object results in the migration
func (o MigrateSqlServerSqlDbTaskOutputDatabaseLevelResponseOutput) ObjectSummary() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbTaskOutputDatabaseLevelResponse) string { return v.ObjectSummary }).(pulumi.StringOutput)
}

// Wildcard string prefix to use for querying all sub-tem results of the item
func (o MigrateSqlServerSqlDbTaskOutputDatabaseLevelResponseOutput) ResultPrefix() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbTaskOutputDatabaseLevelResponse) string { return v.ResultPrefix }).(pulumi.StringOutput)
}

// Result type
func (o MigrateSqlServerSqlDbTaskOutputDatabaseLevelResponseOutput) ResultType() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbTaskOutputDatabaseLevelResponse) string { return v.ResultType }).(pulumi.StringOutput)
}

// Migration stage that this database is in
func (o MigrateSqlServerSqlDbTaskOutputDatabaseLevelResponseOutput) Stage() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbTaskOutputDatabaseLevelResponse) string { return v.Stage }).(pulumi.StringOutput)
}

// Migration start time
func (o MigrateSqlServerSqlDbTaskOutputDatabaseLevelResponseOutput) StartedOn() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbTaskOutputDatabaseLevelResponse) string { return v.StartedOn }).(pulumi.StringOutput)
}

// Current state of migration
func (o MigrateSqlServerSqlDbTaskOutputDatabaseLevelResponseOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbTaskOutputDatabaseLevelResponse) string { return v.State }).(pulumi.StringOutput)
}

// Status message
func (o MigrateSqlServerSqlDbTaskOutputDatabaseLevelResponseOutput) StatusMessage() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbTaskOutputDatabaseLevelResponse) string { return v.StatusMessage }).(pulumi.StringOutput)
}

type MigrateSqlServerSqlDbTaskOutputDatabaseLevelValidationResultResponse struct {
	// Result identifier
	Id string `pulumi:"id"`
	// Result type
	ResultType string `pulumi:"resultType"`
}

type MigrateSqlServerSqlDbTaskOutputDatabaseLevelValidationResultResponseOutput struct{ *pulumi.OutputState }

func (MigrateSqlServerSqlDbTaskOutputDatabaseLevelValidationResultResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MigrateSqlServerSqlDbTaskOutputDatabaseLevelValidationResultResponse)(nil)).Elem()
}

func (o MigrateSqlServerSqlDbTaskOutputDatabaseLevelValidationResultResponseOutput) ToMigrateSqlServerSqlDbTaskOutputDatabaseLevelValidationResultResponseOutput() MigrateSqlServerSqlDbTaskOutputDatabaseLevelValidationResultResponseOutput {
	return o
}

func (o MigrateSqlServerSqlDbTaskOutputDatabaseLevelValidationResultResponseOutput) ToMigrateSqlServerSqlDbTaskOutputDatabaseLevelValidationResultResponseOutputWithContext(ctx context.Context) MigrateSqlServerSqlDbTaskOutputDatabaseLevelValidationResultResponseOutput {
	return o
}

// Result identifier
func (o MigrateSqlServerSqlDbTaskOutputDatabaseLevelValidationResultResponseOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbTaskOutputDatabaseLevelValidationResultResponse) string { return v.Id }).(pulumi.StringOutput)
}

// Result type
func (o MigrateSqlServerSqlDbTaskOutputDatabaseLevelValidationResultResponseOutput) ResultType() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbTaskOutputDatabaseLevelValidationResultResponse) string {
		return v.ResultType
	}).(pulumi.StringOutput)
}

type MigrateSqlServerSqlDbTaskOutputErrorResponse struct {
	// Migration error
	Error ReportableExceptionResponse `pulumi:"error"`
	// Result identifier
	Id string `pulumi:"id"`
	// Result type
	ResultType string `pulumi:"resultType"`
}

type MigrateSqlServerSqlDbTaskOutputErrorResponseOutput struct{ *pulumi.OutputState }

func (MigrateSqlServerSqlDbTaskOutputErrorResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MigrateSqlServerSqlDbTaskOutputErrorResponse)(nil)).Elem()
}

func (o MigrateSqlServerSqlDbTaskOutputErrorResponseOutput) ToMigrateSqlServerSqlDbTaskOutputErrorResponseOutput() MigrateSqlServerSqlDbTaskOutputErrorResponseOutput {
	return o
}

func (o MigrateSqlServerSqlDbTaskOutputErrorResponseOutput) ToMigrateSqlServerSqlDbTaskOutputErrorResponseOutputWithContext(ctx context.Context) MigrateSqlServerSqlDbTaskOutputErrorResponseOutput {
	return o
}

// Migration error
func (o MigrateSqlServerSqlDbTaskOutputErrorResponseOutput) Error() ReportableExceptionResponseOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbTaskOutputErrorResponse) ReportableExceptionResponse { return v.Error }).(ReportableExceptionResponseOutput)
}

// Result identifier
func (o MigrateSqlServerSqlDbTaskOutputErrorResponseOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbTaskOutputErrorResponse) string { return v.Id }).(pulumi.StringOutput)
}

// Result type
func (o MigrateSqlServerSqlDbTaskOutputErrorResponseOutput) ResultType() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbTaskOutputErrorResponse) string { return v.ResultType }).(pulumi.StringOutput)
}

type MigrateSqlServerSqlDbTaskOutputMigrationLevelResponse struct {
	// Summary of database results in the migration
	DatabaseSummary string `pulumi:"databaseSummary"`
	// Selected databases as a map from database name to database id
	Databases string `pulumi:"databases"`
	// Duration of task execution in seconds.
	DurationInSeconds int `pulumi:"durationInSeconds"`
	// Migration end time
	EndedOn string `pulumi:"endedOn"`
	// Migration exceptions and warnings.
	ExceptionsAndWarnings []ReportableExceptionResponse `pulumi:"exceptionsAndWarnings"`
	// Result identifier
	Id string `pulumi:"id"`
	// Migration progress message
	Message string `pulumi:"message"`
	// Migration Report Result, provides unique url for downloading your migration report.
	MigrationReportResult *MigrationReportResultResponse `pulumi:"migrationReportResult"`
	// Result type
	ResultType string `pulumi:"resultType"`
	// Source server brand version
	SourceServerBrandVersion string `pulumi:"sourceServerBrandVersion"`
	// Source server version
	SourceServerVersion string `pulumi:"sourceServerVersion"`
	// Migration start time
	StartedOn string `pulumi:"startedOn"`
	// Current status of migration
	Status string `pulumi:"status"`
	// Migration status message
	StatusMessage string `pulumi:"statusMessage"`
	// Target server brand version
	TargetServerBrandVersion string `pulumi:"targetServerBrandVersion"`
	// Target server version
	TargetServerVersion string `pulumi:"targetServerVersion"`
}

type MigrateSqlServerSqlDbTaskOutputMigrationLevelResponseOutput struct{ *pulumi.OutputState }

func (MigrateSqlServerSqlDbTaskOutputMigrationLevelResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MigrateSqlServerSqlDbTaskOutputMigrationLevelResponse)(nil)).Elem()
}

func (o MigrateSqlServerSqlDbTaskOutputMigrationLevelResponseOutput) ToMigrateSqlServerSqlDbTaskOutputMigrationLevelResponseOutput() MigrateSqlServerSqlDbTaskOutputMigrationLevelResponseOutput {
	return o
}

func (o MigrateSqlServerSqlDbTaskOutputMigrationLevelResponseOutput) ToMigrateSqlServerSqlDbTaskOutputMigrationLevelResponseOutputWithContext(ctx context.Context) MigrateSqlServerSqlDbTaskOutputMigrationLevelResponseOutput {
	return o
}

// Summary of database results in the migration
func (o MigrateSqlServerSqlDbTaskOutputMigrationLevelResponseOutput) DatabaseSummary() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbTaskOutputMigrationLevelResponse) string { return v.DatabaseSummary }).(pulumi.StringOutput)
}

// Selected databases as a map from database name to database id
func (o MigrateSqlServerSqlDbTaskOutputMigrationLevelResponseOutput) Databases() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbTaskOutputMigrationLevelResponse) string { return v.Databases }).(pulumi.StringOutput)
}

// Duration of task execution in seconds.
func (o MigrateSqlServerSqlDbTaskOutputMigrationLevelResponseOutput) DurationInSeconds() pulumi.IntOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbTaskOutputMigrationLevelResponse) int { return v.DurationInSeconds }).(pulumi.IntOutput)
}

// Migration end time
func (o MigrateSqlServerSqlDbTaskOutputMigrationLevelResponseOutput) EndedOn() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbTaskOutputMigrationLevelResponse) string { return v.EndedOn }).(pulumi.StringOutput)
}

// Migration exceptions and warnings.
func (o MigrateSqlServerSqlDbTaskOutputMigrationLevelResponseOutput) ExceptionsAndWarnings() ReportableExceptionResponseArrayOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbTaskOutputMigrationLevelResponse) []ReportableExceptionResponse {
		return v.ExceptionsAndWarnings
	}).(ReportableExceptionResponseArrayOutput)
}

// Result identifier
func (o MigrateSqlServerSqlDbTaskOutputMigrationLevelResponseOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbTaskOutputMigrationLevelResponse) string { return v.Id }).(pulumi.StringOutput)
}

// Migration progress message
func (o MigrateSqlServerSqlDbTaskOutputMigrationLevelResponseOutput) Message() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbTaskOutputMigrationLevelResponse) string { return v.Message }).(pulumi.StringOutput)
}

// Migration Report Result, provides unique url for downloading your migration report.
func (o MigrateSqlServerSqlDbTaskOutputMigrationLevelResponseOutput) MigrationReportResult() MigrationReportResultResponsePtrOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbTaskOutputMigrationLevelResponse) *MigrationReportResultResponse {
		return v.MigrationReportResult
	}).(MigrationReportResultResponsePtrOutput)
}

// Result type
func (o MigrateSqlServerSqlDbTaskOutputMigrationLevelResponseOutput) ResultType() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbTaskOutputMigrationLevelResponse) string { return v.ResultType }).(pulumi.StringOutput)
}

// Source server brand version
func (o MigrateSqlServerSqlDbTaskOutputMigrationLevelResponseOutput) SourceServerBrandVersion() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbTaskOutputMigrationLevelResponse) string {
		return v.SourceServerBrandVersion
	}).(pulumi.StringOutput)
}

// Source server version
func (o MigrateSqlServerSqlDbTaskOutputMigrationLevelResponseOutput) SourceServerVersion() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbTaskOutputMigrationLevelResponse) string { return v.SourceServerVersion }).(pulumi.StringOutput)
}

// Migration start time
func (o MigrateSqlServerSqlDbTaskOutputMigrationLevelResponseOutput) StartedOn() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbTaskOutputMigrationLevelResponse) string { return v.StartedOn }).(pulumi.StringOutput)
}

// Current status of migration
func (o MigrateSqlServerSqlDbTaskOutputMigrationLevelResponseOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbTaskOutputMigrationLevelResponse) string { return v.Status }).(pulumi.StringOutput)
}

// Migration status message
func (o MigrateSqlServerSqlDbTaskOutputMigrationLevelResponseOutput) StatusMessage() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbTaskOutputMigrationLevelResponse) string { return v.StatusMessage }).(pulumi.StringOutput)
}

// Target server brand version
func (o MigrateSqlServerSqlDbTaskOutputMigrationLevelResponseOutput) TargetServerBrandVersion() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbTaskOutputMigrationLevelResponse) string {
		return v.TargetServerBrandVersion
	}).(pulumi.StringOutput)
}

// Target server version
func (o MigrateSqlServerSqlDbTaskOutputMigrationLevelResponseOutput) TargetServerVersion() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbTaskOutputMigrationLevelResponse) string { return v.TargetServerVersion }).(pulumi.StringOutput)
}

type MigrateSqlServerSqlDbTaskOutputTableLevelResponse struct {
	// Migration end time
	EndedOn string `pulumi:"endedOn"`
	// Wildcard string prefix to use for querying all errors of the item
	ErrorPrefix string `pulumi:"errorPrefix"`
	// Result identifier
	Id string `pulumi:"id"`
	// Number of successfully completed items
	ItemsCompletedCount int `pulumi:"itemsCompletedCount"`
	// Number of items
	ItemsCount int `pulumi:"itemsCount"`
	// Name of the item
	ObjectName string `pulumi:"objectName"`
	// Wildcard string prefix to use for querying all sub-tem results of the item
	ResultPrefix string `pulumi:"resultPrefix"`
	// Result type
	ResultType string `pulumi:"resultType"`
	// Migration start time
	StartedOn string `pulumi:"startedOn"`
	// Current state of migration
	State string `pulumi:"state"`
	// Status message
	StatusMessage string `pulumi:"statusMessage"`
}

type MigrateSqlServerSqlDbTaskOutputTableLevelResponseOutput struct{ *pulumi.OutputState }

func (MigrateSqlServerSqlDbTaskOutputTableLevelResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MigrateSqlServerSqlDbTaskOutputTableLevelResponse)(nil)).Elem()
}

func (o MigrateSqlServerSqlDbTaskOutputTableLevelResponseOutput) ToMigrateSqlServerSqlDbTaskOutputTableLevelResponseOutput() MigrateSqlServerSqlDbTaskOutputTableLevelResponseOutput {
	return o
}

func (o MigrateSqlServerSqlDbTaskOutputTableLevelResponseOutput) ToMigrateSqlServerSqlDbTaskOutputTableLevelResponseOutputWithContext(ctx context.Context) MigrateSqlServerSqlDbTaskOutputTableLevelResponseOutput {
	return o
}

// Migration end time
func (o MigrateSqlServerSqlDbTaskOutputTableLevelResponseOutput) EndedOn() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbTaskOutputTableLevelResponse) string { return v.EndedOn }).(pulumi.StringOutput)
}

// Wildcard string prefix to use for querying all errors of the item
func (o MigrateSqlServerSqlDbTaskOutputTableLevelResponseOutput) ErrorPrefix() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbTaskOutputTableLevelResponse) string { return v.ErrorPrefix }).(pulumi.StringOutput)
}

// Result identifier
func (o MigrateSqlServerSqlDbTaskOutputTableLevelResponseOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbTaskOutputTableLevelResponse) string { return v.Id }).(pulumi.StringOutput)
}

// Number of successfully completed items
func (o MigrateSqlServerSqlDbTaskOutputTableLevelResponseOutput) ItemsCompletedCount() pulumi.IntOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbTaskOutputTableLevelResponse) int { return v.ItemsCompletedCount }).(pulumi.IntOutput)
}

// Number of items
func (o MigrateSqlServerSqlDbTaskOutputTableLevelResponseOutput) ItemsCount() pulumi.IntOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbTaskOutputTableLevelResponse) int { return v.ItemsCount }).(pulumi.IntOutput)
}

// Name of the item
func (o MigrateSqlServerSqlDbTaskOutputTableLevelResponseOutput) ObjectName() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbTaskOutputTableLevelResponse) string { return v.ObjectName }).(pulumi.StringOutput)
}

// Wildcard string prefix to use for querying all sub-tem results of the item
func (o MigrateSqlServerSqlDbTaskOutputTableLevelResponseOutput) ResultPrefix() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbTaskOutputTableLevelResponse) string { return v.ResultPrefix }).(pulumi.StringOutput)
}

// Result type
func (o MigrateSqlServerSqlDbTaskOutputTableLevelResponseOutput) ResultType() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbTaskOutputTableLevelResponse) string { return v.ResultType }).(pulumi.StringOutput)
}

// Migration start time
func (o MigrateSqlServerSqlDbTaskOutputTableLevelResponseOutput) StartedOn() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbTaskOutputTableLevelResponse) string { return v.StartedOn }).(pulumi.StringOutput)
}

// Current state of migration
func (o MigrateSqlServerSqlDbTaskOutputTableLevelResponseOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbTaskOutputTableLevelResponse) string { return v.State }).(pulumi.StringOutput)
}

// Status message
func (o MigrateSqlServerSqlDbTaskOutputTableLevelResponseOutput) StatusMessage() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbTaskOutputTableLevelResponse) string { return v.StatusMessage }).(pulumi.StringOutput)
}

type MigrateSqlServerSqlDbTaskOutputValidationResultResponse struct {
	// Result identifier
	Id string `pulumi:"id"`
	// Result type
	ResultType string `pulumi:"resultType"`
}

type MigrateSqlServerSqlDbTaskOutputValidationResultResponseOutput struct{ *pulumi.OutputState }

func (MigrateSqlServerSqlDbTaskOutputValidationResultResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MigrateSqlServerSqlDbTaskOutputValidationResultResponse)(nil)).Elem()
}

func (o MigrateSqlServerSqlDbTaskOutputValidationResultResponseOutput) ToMigrateSqlServerSqlDbTaskOutputValidationResultResponseOutput() MigrateSqlServerSqlDbTaskOutputValidationResultResponseOutput {
	return o
}

func (o MigrateSqlServerSqlDbTaskOutputValidationResultResponseOutput) ToMigrateSqlServerSqlDbTaskOutputValidationResultResponseOutputWithContext(ctx context.Context) MigrateSqlServerSqlDbTaskOutputValidationResultResponseOutput {
	return o
}

// Result identifier
func (o MigrateSqlServerSqlDbTaskOutputValidationResultResponseOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbTaskOutputValidationResultResponse) string { return v.Id }).(pulumi.StringOutput)
}

// Result type
func (o MigrateSqlServerSqlDbTaskOutputValidationResultResponseOutput) ResultType() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbTaskOutputValidationResultResponse) string { return v.ResultType }).(pulumi.StringOutput)
}

// Properties for the task that migrates on-prem SQL Server databases to Azure SQL Database
type MigrateSqlServerSqlDbTaskProperties struct {
	// Task input
	Input *MigrateSqlServerSqlDbTaskInput `pulumi:"input"`
	// Task type.
	TaskType string `pulumi:"taskType"`
}

// MigrateSqlServerSqlDbTaskPropertiesInput is an input type that accepts MigrateSqlServerSqlDbTaskPropertiesArgs and MigrateSqlServerSqlDbTaskPropertiesOutput values.
// You can construct a concrete instance of `MigrateSqlServerSqlDbTaskPropertiesInput` via:
//
//          MigrateSqlServerSqlDbTaskPropertiesArgs{...}
type MigrateSqlServerSqlDbTaskPropertiesInput interface {
	pulumi.Input

	ToMigrateSqlServerSqlDbTaskPropertiesOutput() MigrateSqlServerSqlDbTaskPropertiesOutput
	ToMigrateSqlServerSqlDbTaskPropertiesOutputWithContext(context.Context) MigrateSqlServerSqlDbTaskPropertiesOutput
}

// Properties for the task that migrates on-prem SQL Server databases to Azure SQL Database
type MigrateSqlServerSqlDbTaskPropertiesArgs struct {
	// Task input
	Input MigrateSqlServerSqlDbTaskInputPtrInput `pulumi:"input"`
	// Task type.
	TaskType pulumi.StringInput `pulumi:"taskType"`
}

func (MigrateSqlServerSqlDbTaskPropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MigrateSqlServerSqlDbTaskProperties)(nil)).Elem()
}

func (i MigrateSqlServerSqlDbTaskPropertiesArgs) ToMigrateSqlServerSqlDbTaskPropertiesOutput() MigrateSqlServerSqlDbTaskPropertiesOutput {
	return i.ToMigrateSqlServerSqlDbTaskPropertiesOutputWithContext(context.Background())
}

func (i MigrateSqlServerSqlDbTaskPropertiesArgs) ToMigrateSqlServerSqlDbTaskPropertiesOutputWithContext(ctx context.Context) MigrateSqlServerSqlDbTaskPropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MigrateSqlServerSqlDbTaskPropertiesOutput)
}

// Properties for the task that migrates on-prem SQL Server databases to Azure SQL Database
type MigrateSqlServerSqlDbTaskPropertiesResponse struct {
	// Array of errors. This is ignored if submitted.
	Errors []ODataErrorResponse `pulumi:"errors"`
	// Task input
	Input *MigrateSqlServerSqlDbTaskInputResponse `pulumi:"input"`
	// Task output. This is ignored if submitted.
	Output []interface{} `pulumi:"output"`
	// The state of the task. This is ignored if submitted.
	State string `pulumi:"state"`
	// Task type.
	TaskType string `pulumi:"taskType"`
}

// Properties for the task that migrates on-prem SQL Server databases to Azure SQL Database
type MigrateSqlServerSqlDbTaskPropertiesResponseOutput struct{ *pulumi.OutputState }

func (MigrateSqlServerSqlDbTaskPropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MigrateSqlServerSqlDbTaskPropertiesResponse)(nil)).Elem()
}

func (o MigrateSqlServerSqlDbTaskPropertiesResponseOutput) ToMigrateSqlServerSqlDbTaskPropertiesResponseOutput() MigrateSqlServerSqlDbTaskPropertiesResponseOutput {
	return o
}

func (o MigrateSqlServerSqlDbTaskPropertiesResponseOutput) ToMigrateSqlServerSqlDbTaskPropertiesResponseOutputWithContext(ctx context.Context) MigrateSqlServerSqlDbTaskPropertiesResponseOutput {
	return o
}

// Array of errors. This is ignored if submitted.
func (o MigrateSqlServerSqlDbTaskPropertiesResponseOutput) Errors() ODataErrorResponseArrayOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbTaskPropertiesResponse) []ODataErrorResponse { return v.Errors }).(ODataErrorResponseArrayOutput)
}

// Task input
func (o MigrateSqlServerSqlDbTaskPropertiesResponseOutput) Input() MigrateSqlServerSqlDbTaskInputResponsePtrOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbTaskPropertiesResponse) *MigrateSqlServerSqlDbTaskInputResponse {
		return v.Input
	}).(MigrateSqlServerSqlDbTaskInputResponsePtrOutput)
}

// Task output. This is ignored if submitted.
func (o MigrateSqlServerSqlDbTaskPropertiesResponseOutput) Output() pulumi.ArrayOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbTaskPropertiesResponse) []interface{} { return v.Output }).(pulumi.ArrayOutput)
}

// The state of the task. This is ignored if submitted.
func (o MigrateSqlServerSqlDbTaskPropertiesResponseOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbTaskPropertiesResponse) string { return v.State }).(pulumi.StringOutput)
}

// Task type.
func (o MigrateSqlServerSqlDbTaskPropertiesResponseOutput) TaskType() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlDbTaskPropertiesResponse) string { return v.TaskType }).(pulumi.StringOutput)
}

// Database specific information for SQL to Azure SQL DB Managed Instance migration task inputs
type MigrateSqlServerSqlMIDatabaseInput struct {
	// Backup file share information for backing up this database.
	BackupFileShare *FileShare `pulumi:"backupFileShare"`
	// Name of the database
	Name string `pulumi:"name"`
	// Name of the database at destination
	RestoreDatabaseName string `pulumi:"restoreDatabaseName"`
}

// MigrateSqlServerSqlMIDatabaseInputInput is an input type that accepts MigrateSqlServerSqlMIDatabaseInputArgs and MigrateSqlServerSqlMIDatabaseInputOutput values.
// You can construct a concrete instance of `MigrateSqlServerSqlMIDatabaseInputInput` via:
//
//          MigrateSqlServerSqlMIDatabaseInputArgs{...}
type MigrateSqlServerSqlMIDatabaseInputInput interface {
	pulumi.Input

	ToMigrateSqlServerSqlMIDatabaseInputOutput() MigrateSqlServerSqlMIDatabaseInputOutput
	ToMigrateSqlServerSqlMIDatabaseInputOutputWithContext(context.Context) MigrateSqlServerSqlMIDatabaseInputOutput
}

// Database specific information for SQL to Azure SQL DB Managed Instance migration task inputs
type MigrateSqlServerSqlMIDatabaseInputArgs struct {
	// Backup file share information for backing up this database.
	BackupFileShare FileSharePtrInput `pulumi:"backupFileShare"`
	// Name of the database
	Name pulumi.StringInput `pulumi:"name"`
	// Name of the database at destination
	RestoreDatabaseName pulumi.StringInput `pulumi:"restoreDatabaseName"`
}

func (MigrateSqlServerSqlMIDatabaseInputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MigrateSqlServerSqlMIDatabaseInput)(nil)).Elem()
}

func (i MigrateSqlServerSqlMIDatabaseInputArgs) ToMigrateSqlServerSqlMIDatabaseInputOutput() MigrateSqlServerSqlMIDatabaseInputOutput {
	return i.ToMigrateSqlServerSqlMIDatabaseInputOutputWithContext(context.Background())
}

func (i MigrateSqlServerSqlMIDatabaseInputArgs) ToMigrateSqlServerSqlMIDatabaseInputOutputWithContext(ctx context.Context) MigrateSqlServerSqlMIDatabaseInputOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MigrateSqlServerSqlMIDatabaseInputOutput)
}

// MigrateSqlServerSqlMIDatabaseInputArrayInput is an input type that accepts MigrateSqlServerSqlMIDatabaseInputArray and MigrateSqlServerSqlMIDatabaseInputArrayOutput values.
// You can construct a concrete instance of `MigrateSqlServerSqlMIDatabaseInputArrayInput` via:
//
//          MigrateSqlServerSqlMIDatabaseInputArray{ MigrateSqlServerSqlMIDatabaseInputArgs{...} }
type MigrateSqlServerSqlMIDatabaseInputArrayInput interface {
	pulumi.Input

	ToMigrateSqlServerSqlMIDatabaseInputArrayOutput() MigrateSqlServerSqlMIDatabaseInputArrayOutput
	ToMigrateSqlServerSqlMIDatabaseInputArrayOutputWithContext(context.Context) MigrateSqlServerSqlMIDatabaseInputArrayOutput
}

type MigrateSqlServerSqlMIDatabaseInputArray []MigrateSqlServerSqlMIDatabaseInputInput

func (MigrateSqlServerSqlMIDatabaseInputArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MigrateSqlServerSqlMIDatabaseInput)(nil)).Elem()
}

func (i MigrateSqlServerSqlMIDatabaseInputArray) ToMigrateSqlServerSqlMIDatabaseInputArrayOutput() MigrateSqlServerSqlMIDatabaseInputArrayOutput {
	return i.ToMigrateSqlServerSqlMIDatabaseInputArrayOutputWithContext(context.Background())
}

func (i MigrateSqlServerSqlMIDatabaseInputArray) ToMigrateSqlServerSqlMIDatabaseInputArrayOutputWithContext(ctx context.Context) MigrateSqlServerSqlMIDatabaseInputArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MigrateSqlServerSqlMIDatabaseInputArrayOutput)
}

// Database specific information for SQL to Azure SQL DB Managed Instance migration task inputs
type MigrateSqlServerSqlMIDatabaseInputResponse struct {
	// Backup file share information for backing up this database.
	BackupFileShare *FileShareResponse `pulumi:"backupFileShare"`
	// Name of the database
	Name string `pulumi:"name"`
	// Name of the database at destination
	RestoreDatabaseName string `pulumi:"restoreDatabaseName"`
}

// Database specific information for SQL to Azure SQL DB Managed Instance migration task inputs
type MigrateSqlServerSqlMIDatabaseInputResponseOutput struct{ *pulumi.OutputState }

func (MigrateSqlServerSqlMIDatabaseInputResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MigrateSqlServerSqlMIDatabaseInputResponse)(nil)).Elem()
}

func (o MigrateSqlServerSqlMIDatabaseInputResponseOutput) ToMigrateSqlServerSqlMIDatabaseInputResponseOutput() MigrateSqlServerSqlMIDatabaseInputResponseOutput {
	return o
}

func (o MigrateSqlServerSqlMIDatabaseInputResponseOutput) ToMigrateSqlServerSqlMIDatabaseInputResponseOutputWithContext(ctx context.Context) MigrateSqlServerSqlMIDatabaseInputResponseOutput {
	return o
}

// Backup file share information for backing up this database.
func (o MigrateSqlServerSqlMIDatabaseInputResponseOutput) BackupFileShare() FileShareResponsePtrOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlMIDatabaseInputResponse) *FileShareResponse { return v.BackupFileShare }).(FileShareResponsePtrOutput)
}

// Name of the database
func (o MigrateSqlServerSqlMIDatabaseInputResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlMIDatabaseInputResponse) string { return v.Name }).(pulumi.StringOutput)
}

// Name of the database at destination
func (o MigrateSqlServerSqlMIDatabaseInputResponseOutput) RestoreDatabaseName() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlMIDatabaseInputResponse) string { return v.RestoreDatabaseName }).(pulumi.StringOutput)
}

type MigrateSqlServerSqlMIDatabaseInputResponseArrayOutput struct{ *pulumi.OutputState }

func (MigrateSqlServerSqlMIDatabaseInputResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MigrateSqlServerSqlMIDatabaseInputResponse)(nil)).Elem()
}

func (o MigrateSqlServerSqlMIDatabaseInputResponseArrayOutput) ToMigrateSqlServerSqlMIDatabaseInputResponseArrayOutput() MigrateSqlServerSqlMIDatabaseInputResponseArrayOutput {
	return o
}

func (o MigrateSqlServerSqlMIDatabaseInputResponseArrayOutput) ToMigrateSqlServerSqlMIDatabaseInputResponseArrayOutputWithContext(ctx context.Context) MigrateSqlServerSqlMIDatabaseInputResponseArrayOutput {
	return o
}

func (o MigrateSqlServerSqlMIDatabaseInputResponseArrayOutput) Index(i pulumi.IntInput) MigrateSqlServerSqlMIDatabaseInputResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) MigrateSqlServerSqlMIDatabaseInputResponse {
		return vs[0].([]MigrateSqlServerSqlMIDatabaseInputResponse)[vs[1].(int)]
	}).(MigrateSqlServerSqlMIDatabaseInputResponseOutput)
}

// Input for task that migrates SQL Server databases to Azure SQL Database Managed Instance.
type MigrateSqlServerSqlMITaskInput struct {
	// SAS URI of Azure Storage Account Container to be used for storing backup files.
	BackupBlobShare BlobShare `pulumi:"backupBlobShare"`
	// Backup file share information for all selected databases.
	BackupFileShare *FileShare `pulumi:"backupFileShare"`
	// Agent Jobs to migrate.
	SelectedAgentJobs []string `pulumi:"selectedAgentJobs"`
	// Databases to migrate
	SelectedDatabases []MigrateSqlServerSqlMIDatabaseInput `pulumi:"selectedDatabases"`
	// Logins to migrate.
	SelectedLogins []string `pulumi:"selectedLogins"`
	// Information for connecting to source
	SourceConnectionInfo SqlConnectionInfo `pulumi:"sourceConnectionInfo"`
	// Information for connecting to target
	TargetConnectionInfo SqlConnectionInfo `pulumi:"targetConnectionInfo"`
}

// MigrateSqlServerSqlMITaskInputInput is an input type that accepts MigrateSqlServerSqlMITaskInputArgs and MigrateSqlServerSqlMITaskInputOutput values.
// You can construct a concrete instance of `MigrateSqlServerSqlMITaskInputInput` via:
//
//          MigrateSqlServerSqlMITaskInputArgs{...}
type MigrateSqlServerSqlMITaskInputInput interface {
	pulumi.Input

	ToMigrateSqlServerSqlMITaskInputOutput() MigrateSqlServerSqlMITaskInputOutput
	ToMigrateSqlServerSqlMITaskInputOutputWithContext(context.Context) MigrateSqlServerSqlMITaskInputOutput
}

// Input for task that migrates SQL Server databases to Azure SQL Database Managed Instance.
type MigrateSqlServerSqlMITaskInputArgs struct {
	// SAS URI of Azure Storage Account Container to be used for storing backup files.
	BackupBlobShare BlobShareInput `pulumi:"backupBlobShare"`
	// Backup file share information for all selected databases.
	BackupFileShare FileSharePtrInput `pulumi:"backupFileShare"`
	// Agent Jobs to migrate.
	SelectedAgentJobs pulumi.StringArrayInput `pulumi:"selectedAgentJobs"`
	// Databases to migrate
	SelectedDatabases MigrateSqlServerSqlMIDatabaseInputArrayInput `pulumi:"selectedDatabases"`
	// Logins to migrate.
	SelectedLogins pulumi.StringArrayInput `pulumi:"selectedLogins"`
	// Information for connecting to source
	SourceConnectionInfo SqlConnectionInfoInput `pulumi:"sourceConnectionInfo"`
	// Information for connecting to target
	TargetConnectionInfo SqlConnectionInfoInput `pulumi:"targetConnectionInfo"`
}

func (MigrateSqlServerSqlMITaskInputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MigrateSqlServerSqlMITaskInput)(nil)).Elem()
}

func (i MigrateSqlServerSqlMITaskInputArgs) ToMigrateSqlServerSqlMITaskInputOutput() MigrateSqlServerSqlMITaskInputOutput {
	return i.ToMigrateSqlServerSqlMITaskInputOutputWithContext(context.Background())
}

func (i MigrateSqlServerSqlMITaskInputArgs) ToMigrateSqlServerSqlMITaskInputOutputWithContext(ctx context.Context) MigrateSqlServerSqlMITaskInputOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MigrateSqlServerSqlMITaskInputOutput)
}

func (i MigrateSqlServerSqlMITaskInputArgs) ToMigrateSqlServerSqlMITaskInputPtrOutput() MigrateSqlServerSqlMITaskInputPtrOutput {
	return i.ToMigrateSqlServerSqlMITaskInputPtrOutputWithContext(context.Background())
}

func (i MigrateSqlServerSqlMITaskInputArgs) ToMigrateSqlServerSqlMITaskInputPtrOutputWithContext(ctx context.Context) MigrateSqlServerSqlMITaskInputPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MigrateSqlServerSqlMITaskInputOutput).ToMigrateSqlServerSqlMITaskInputPtrOutputWithContext(ctx)
}

// MigrateSqlServerSqlMITaskInputPtrInput is an input type that accepts MigrateSqlServerSqlMITaskInputArgs, MigrateSqlServerSqlMITaskInputPtr and MigrateSqlServerSqlMITaskInputPtrOutput values.
// You can construct a concrete instance of `MigrateSqlServerSqlMITaskInputPtrInput` via:
//
//          MigrateSqlServerSqlMITaskInputArgs{...}
//
//  or:
//
//          nil
type MigrateSqlServerSqlMITaskInputPtrInput interface {
	pulumi.Input

	ToMigrateSqlServerSqlMITaskInputPtrOutput() MigrateSqlServerSqlMITaskInputPtrOutput
	ToMigrateSqlServerSqlMITaskInputPtrOutputWithContext(context.Context) MigrateSqlServerSqlMITaskInputPtrOutput
}

type migrateSqlServerSqlMITaskInputPtrType MigrateSqlServerSqlMITaskInputArgs

func MigrateSqlServerSqlMITaskInputPtr(v *MigrateSqlServerSqlMITaskInputArgs) MigrateSqlServerSqlMITaskInputPtrInput {
	return (*migrateSqlServerSqlMITaskInputPtrType)(v)
}

func (*migrateSqlServerSqlMITaskInputPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**MigrateSqlServerSqlMITaskInput)(nil)).Elem()
}

func (i *migrateSqlServerSqlMITaskInputPtrType) ToMigrateSqlServerSqlMITaskInputPtrOutput() MigrateSqlServerSqlMITaskInputPtrOutput {
	return i.ToMigrateSqlServerSqlMITaskInputPtrOutputWithContext(context.Background())
}

func (i *migrateSqlServerSqlMITaskInputPtrType) ToMigrateSqlServerSqlMITaskInputPtrOutputWithContext(ctx context.Context) MigrateSqlServerSqlMITaskInputPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MigrateSqlServerSqlMITaskInputPtrOutput)
}

// Input for task that migrates SQL Server databases to Azure SQL Database Managed Instance.
type MigrateSqlServerSqlMITaskInputResponse struct {
	// SAS URI of Azure Storage Account Container to be used for storing backup files.
	BackupBlobShare BlobShareResponse `pulumi:"backupBlobShare"`
	// Backup file share information for all selected databases.
	BackupFileShare *FileShareResponse `pulumi:"backupFileShare"`
	// Agent Jobs to migrate.
	SelectedAgentJobs []string `pulumi:"selectedAgentJobs"`
	// Databases to migrate
	SelectedDatabases []MigrateSqlServerSqlMIDatabaseInputResponse `pulumi:"selectedDatabases"`
	// Logins to migrate.
	SelectedLogins []string `pulumi:"selectedLogins"`
	// Information for connecting to source
	SourceConnectionInfo SqlConnectionInfoResponse `pulumi:"sourceConnectionInfo"`
	// Information for connecting to target
	TargetConnectionInfo SqlConnectionInfoResponse `pulumi:"targetConnectionInfo"`
}

// Input for task that migrates SQL Server databases to Azure SQL Database Managed Instance.
type MigrateSqlServerSqlMITaskInputResponseOutput struct{ *pulumi.OutputState }

func (MigrateSqlServerSqlMITaskInputResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MigrateSqlServerSqlMITaskInputResponse)(nil)).Elem()
}

func (o MigrateSqlServerSqlMITaskInputResponseOutput) ToMigrateSqlServerSqlMITaskInputResponseOutput() MigrateSqlServerSqlMITaskInputResponseOutput {
	return o
}

func (o MigrateSqlServerSqlMITaskInputResponseOutput) ToMigrateSqlServerSqlMITaskInputResponseOutputWithContext(ctx context.Context) MigrateSqlServerSqlMITaskInputResponseOutput {
	return o
}

func (o MigrateSqlServerSqlMITaskInputResponseOutput) ToMigrateSqlServerSqlMITaskInputResponsePtrOutput() MigrateSqlServerSqlMITaskInputResponsePtrOutput {
	return o.ToMigrateSqlServerSqlMITaskInputResponsePtrOutputWithContext(context.Background())
}

func (o MigrateSqlServerSqlMITaskInputResponseOutput) ToMigrateSqlServerSqlMITaskInputResponsePtrOutputWithContext(ctx context.Context) MigrateSqlServerSqlMITaskInputResponsePtrOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlMITaskInputResponse) *MigrateSqlServerSqlMITaskInputResponse {
		return &v
	}).(MigrateSqlServerSqlMITaskInputResponsePtrOutput)
}

// SAS URI of Azure Storage Account Container to be used for storing backup files.
func (o MigrateSqlServerSqlMITaskInputResponseOutput) BackupBlobShare() BlobShareResponseOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlMITaskInputResponse) BlobShareResponse { return v.BackupBlobShare }).(BlobShareResponseOutput)
}

// Backup file share information for all selected databases.
func (o MigrateSqlServerSqlMITaskInputResponseOutput) BackupFileShare() FileShareResponsePtrOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlMITaskInputResponse) *FileShareResponse { return v.BackupFileShare }).(FileShareResponsePtrOutput)
}

// Agent Jobs to migrate.
func (o MigrateSqlServerSqlMITaskInputResponseOutput) SelectedAgentJobs() pulumi.StringArrayOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlMITaskInputResponse) []string { return v.SelectedAgentJobs }).(pulumi.StringArrayOutput)
}

// Databases to migrate
func (o MigrateSqlServerSqlMITaskInputResponseOutput) SelectedDatabases() MigrateSqlServerSqlMIDatabaseInputResponseArrayOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlMITaskInputResponse) []MigrateSqlServerSqlMIDatabaseInputResponse {
		return v.SelectedDatabases
	}).(MigrateSqlServerSqlMIDatabaseInputResponseArrayOutput)
}

// Logins to migrate.
func (o MigrateSqlServerSqlMITaskInputResponseOutput) SelectedLogins() pulumi.StringArrayOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlMITaskInputResponse) []string { return v.SelectedLogins }).(pulumi.StringArrayOutput)
}

// Information for connecting to source
func (o MigrateSqlServerSqlMITaskInputResponseOutput) SourceConnectionInfo() SqlConnectionInfoResponseOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlMITaskInputResponse) SqlConnectionInfoResponse {
		return v.SourceConnectionInfo
	}).(SqlConnectionInfoResponseOutput)
}

// Information for connecting to target
func (o MigrateSqlServerSqlMITaskInputResponseOutput) TargetConnectionInfo() SqlConnectionInfoResponseOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlMITaskInputResponse) SqlConnectionInfoResponse {
		return v.TargetConnectionInfo
	}).(SqlConnectionInfoResponseOutput)
}

type MigrateSqlServerSqlMITaskInputResponsePtrOutput struct{ *pulumi.OutputState }

func (MigrateSqlServerSqlMITaskInputResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MigrateSqlServerSqlMITaskInputResponse)(nil)).Elem()
}

func (o MigrateSqlServerSqlMITaskInputResponsePtrOutput) ToMigrateSqlServerSqlMITaskInputResponsePtrOutput() MigrateSqlServerSqlMITaskInputResponsePtrOutput {
	return o
}

func (o MigrateSqlServerSqlMITaskInputResponsePtrOutput) ToMigrateSqlServerSqlMITaskInputResponsePtrOutputWithContext(ctx context.Context) MigrateSqlServerSqlMITaskInputResponsePtrOutput {
	return o
}

func (o MigrateSqlServerSqlMITaskInputResponsePtrOutput) Elem() MigrateSqlServerSqlMITaskInputResponseOutput {
	return o.ApplyT(func(v *MigrateSqlServerSqlMITaskInputResponse) MigrateSqlServerSqlMITaskInputResponse { return *v }).(MigrateSqlServerSqlMITaskInputResponseOutput)
}

// SAS URI of Azure Storage Account Container to be used for storing backup files.
func (o MigrateSqlServerSqlMITaskInputResponsePtrOutput) BackupBlobShare() BlobShareResponsePtrOutput {
	return o.ApplyT(func(v *MigrateSqlServerSqlMITaskInputResponse) *BlobShareResponse {
		if v == nil {
			return nil
		}
		return &v.BackupBlobShare
	}).(BlobShareResponsePtrOutput)
}

// Backup file share information for all selected databases.
func (o MigrateSqlServerSqlMITaskInputResponsePtrOutput) BackupFileShare() FileShareResponsePtrOutput {
	return o.ApplyT(func(v *MigrateSqlServerSqlMITaskInputResponse) *FileShareResponse {
		if v == nil {
			return nil
		}
		return v.BackupFileShare
	}).(FileShareResponsePtrOutput)
}

// Agent Jobs to migrate.
func (o MigrateSqlServerSqlMITaskInputResponsePtrOutput) SelectedAgentJobs() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *MigrateSqlServerSqlMITaskInputResponse) []string {
		if v == nil {
			return nil
		}
		return v.SelectedAgentJobs
	}).(pulumi.StringArrayOutput)
}

// Databases to migrate
func (o MigrateSqlServerSqlMITaskInputResponsePtrOutput) SelectedDatabases() MigrateSqlServerSqlMIDatabaseInputResponseArrayOutput {
	return o.ApplyT(func(v *MigrateSqlServerSqlMITaskInputResponse) []MigrateSqlServerSqlMIDatabaseInputResponse {
		if v == nil {
			return nil
		}
		return v.SelectedDatabases
	}).(MigrateSqlServerSqlMIDatabaseInputResponseArrayOutput)
}

// Logins to migrate.
func (o MigrateSqlServerSqlMITaskInputResponsePtrOutput) SelectedLogins() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *MigrateSqlServerSqlMITaskInputResponse) []string {
		if v == nil {
			return nil
		}
		return v.SelectedLogins
	}).(pulumi.StringArrayOutput)
}

// Information for connecting to source
func (o MigrateSqlServerSqlMITaskInputResponsePtrOutput) SourceConnectionInfo() SqlConnectionInfoResponsePtrOutput {
	return o.ApplyT(func(v *MigrateSqlServerSqlMITaskInputResponse) *SqlConnectionInfoResponse {
		if v == nil {
			return nil
		}
		return &v.SourceConnectionInfo
	}).(SqlConnectionInfoResponsePtrOutput)
}

// Information for connecting to target
func (o MigrateSqlServerSqlMITaskInputResponsePtrOutput) TargetConnectionInfo() SqlConnectionInfoResponsePtrOutput {
	return o.ApplyT(func(v *MigrateSqlServerSqlMITaskInputResponse) *SqlConnectionInfoResponse {
		if v == nil {
			return nil
		}
		return &v.TargetConnectionInfo
	}).(SqlConnectionInfoResponsePtrOutput)
}

type MigrateSqlServerSqlMITaskOutputAgentJobLevelResponse struct {
	// Migration end time
	EndedOn string `pulumi:"endedOn"`
	// Migration errors and warnings per job
	ExceptionsAndWarnings []ReportableExceptionResponse `pulumi:"exceptionsAndWarnings"`
	// Result identifier
	Id string `pulumi:"id"`
	// The state of the original AgentJob.
	IsEnabled bool `pulumi:"isEnabled"`
	// Migration progress message
	Message string `pulumi:"message"`
	// AgentJob name.
	Name string `pulumi:"name"`
	// Result type
	ResultType string `pulumi:"resultType"`
	// Migration start time
	StartedOn string `pulumi:"startedOn"`
	// Current state of migration
	State string `pulumi:"state"`
}

type MigrateSqlServerSqlMITaskOutputAgentJobLevelResponseOutput struct{ *pulumi.OutputState }

func (MigrateSqlServerSqlMITaskOutputAgentJobLevelResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MigrateSqlServerSqlMITaskOutputAgentJobLevelResponse)(nil)).Elem()
}

func (o MigrateSqlServerSqlMITaskOutputAgentJobLevelResponseOutput) ToMigrateSqlServerSqlMITaskOutputAgentJobLevelResponseOutput() MigrateSqlServerSqlMITaskOutputAgentJobLevelResponseOutput {
	return o
}

func (o MigrateSqlServerSqlMITaskOutputAgentJobLevelResponseOutput) ToMigrateSqlServerSqlMITaskOutputAgentJobLevelResponseOutputWithContext(ctx context.Context) MigrateSqlServerSqlMITaskOutputAgentJobLevelResponseOutput {
	return o
}

// Migration end time
func (o MigrateSqlServerSqlMITaskOutputAgentJobLevelResponseOutput) EndedOn() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlMITaskOutputAgentJobLevelResponse) string { return v.EndedOn }).(pulumi.StringOutput)
}

// Migration errors and warnings per job
func (o MigrateSqlServerSqlMITaskOutputAgentJobLevelResponseOutput) ExceptionsAndWarnings() ReportableExceptionResponseArrayOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlMITaskOutputAgentJobLevelResponse) []ReportableExceptionResponse {
		return v.ExceptionsAndWarnings
	}).(ReportableExceptionResponseArrayOutput)
}

// Result identifier
func (o MigrateSqlServerSqlMITaskOutputAgentJobLevelResponseOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlMITaskOutputAgentJobLevelResponse) string { return v.Id }).(pulumi.StringOutput)
}

// The state of the original AgentJob.
func (o MigrateSqlServerSqlMITaskOutputAgentJobLevelResponseOutput) IsEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlMITaskOutputAgentJobLevelResponse) bool { return v.IsEnabled }).(pulumi.BoolOutput)
}

// Migration progress message
func (o MigrateSqlServerSqlMITaskOutputAgentJobLevelResponseOutput) Message() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlMITaskOutputAgentJobLevelResponse) string { return v.Message }).(pulumi.StringOutput)
}

// AgentJob name.
func (o MigrateSqlServerSqlMITaskOutputAgentJobLevelResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlMITaskOutputAgentJobLevelResponse) string { return v.Name }).(pulumi.StringOutput)
}

// Result type
func (o MigrateSqlServerSqlMITaskOutputAgentJobLevelResponseOutput) ResultType() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlMITaskOutputAgentJobLevelResponse) string { return v.ResultType }).(pulumi.StringOutput)
}

// Migration start time
func (o MigrateSqlServerSqlMITaskOutputAgentJobLevelResponseOutput) StartedOn() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlMITaskOutputAgentJobLevelResponse) string { return v.StartedOn }).(pulumi.StringOutput)
}

// Current state of migration
func (o MigrateSqlServerSqlMITaskOutputAgentJobLevelResponseOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlMITaskOutputAgentJobLevelResponse) string { return v.State }).(pulumi.StringOutput)
}

type MigrateSqlServerSqlMITaskOutputDatabaseLevelResponse struct {
	// Name of the database
	DatabaseName string `pulumi:"databaseName"`
	// Migration end time
	EndedOn string `pulumi:"endedOn"`
	// Migration exceptions and warnings
	ExceptionsAndWarnings []ReportableExceptionResponse `pulumi:"exceptionsAndWarnings"`
	// Result identifier
	Id string `pulumi:"id"`
	// Migration progress message
	Message string `pulumi:"message"`
	// Result type
	ResultType string `pulumi:"resultType"`
	// Size of the database in megabytes
	SizeMB float64 `pulumi:"sizeMB"`
	// Current stage of migration
	Stage string `pulumi:"stage"`
	// Migration start time
	StartedOn string `pulumi:"startedOn"`
	// Current state of migration
	State string `pulumi:"state"`
}

type MigrateSqlServerSqlMITaskOutputDatabaseLevelResponseOutput struct{ *pulumi.OutputState }

func (MigrateSqlServerSqlMITaskOutputDatabaseLevelResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MigrateSqlServerSqlMITaskOutputDatabaseLevelResponse)(nil)).Elem()
}

func (o MigrateSqlServerSqlMITaskOutputDatabaseLevelResponseOutput) ToMigrateSqlServerSqlMITaskOutputDatabaseLevelResponseOutput() MigrateSqlServerSqlMITaskOutputDatabaseLevelResponseOutput {
	return o
}

func (o MigrateSqlServerSqlMITaskOutputDatabaseLevelResponseOutput) ToMigrateSqlServerSqlMITaskOutputDatabaseLevelResponseOutputWithContext(ctx context.Context) MigrateSqlServerSqlMITaskOutputDatabaseLevelResponseOutput {
	return o
}

// Name of the database
func (o MigrateSqlServerSqlMITaskOutputDatabaseLevelResponseOutput) DatabaseName() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlMITaskOutputDatabaseLevelResponse) string { return v.DatabaseName }).(pulumi.StringOutput)
}

// Migration end time
func (o MigrateSqlServerSqlMITaskOutputDatabaseLevelResponseOutput) EndedOn() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlMITaskOutputDatabaseLevelResponse) string { return v.EndedOn }).(pulumi.StringOutput)
}

// Migration exceptions and warnings
func (o MigrateSqlServerSqlMITaskOutputDatabaseLevelResponseOutput) ExceptionsAndWarnings() ReportableExceptionResponseArrayOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlMITaskOutputDatabaseLevelResponse) []ReportableExceptionResponse {
		return v.ExceptionsAndWarnings
	}).(ReportableExceptionResponseArrayOutput)
}

// Result identifier
func (o MigrateSqlServerSqlMITaskOutputDatabaseLevelResponseOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlMITaskOutputDatabaseLevelResponse) string { return v.Id }).(pulumi.StringOutput)
}

// Migration progress message
func (o MigrateSqlServerSqlMITaskOutputDatabaseLevelResponseOutput) Message() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlMITaskOutputDatabaseLevelResponse) string { return v.Message }).(pulumi.StringOutput)
}

// Result type
func (o MigrateSqlServerSqlMITaskOutputDatabaseLevelResponseOutput) ResultType() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlMITaskOutputDatabaseLevelResponse) string { return v.ResultType }).(pulumi.StringOutput)
}

// Size of the database in megabytes
func (o MigrateSqlServerSqlMITaskOutputDatabaseLevelResponseOutput) SizeMB() pulumi.Float64Output {
	return o.ApplyT(func(v MigrateSqlServerSqlMITaskOutputDatabaseLevelResponse) float64 { return v.SizeMB }).(pulumi.Float64Output)
}

// Current stage of migration
func (o MigrateSqlServerSqlMITaskOutputDatabaseLevelResponseOutput) Stage() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlMITaskOutputDatabaseLevelResponse) string { return v.Stage }).(pulumi.StringOutput)
}

// Migration start time
func (o MigrateSqlServerSqlMITaskOutputDatabaseLevelResponseOutput) StartedOn() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlMITaskOutputDatabaseLevelResponse) string { return v.StartedOn }).(pulumi.StringOutput)
}

// Current state of migration
func (o MigrateSqlServerSqlMITaskOutputDatabaseLevelResponseOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlMITaskOutputDatabaseLevelResponse) string { return v.State }).(pulumi.StringOutput)
}

type MigrateSqlServerSqlMITaskOutputErrorResponse struct {
	// Migration error
	Error ReportableExceptionResponse `pulumi:"error"`
	// Result identifier
	Id string `pulumi:"id"`
	// Result type
	ResultType string `pulumi:"resultType"`
}

type MigrateSqlServerSqlMITaskOutputErrorResponseOutput struct{ *pulumi.OutputState }

func (MigrateSqlServerSqlMITaskOutputErrorResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MigrateSqlServerSqlMITaskOutputErrorResponse)(nil)).Elem()
}

func (o MigrateSqlServerSqlMITaskOutputErrorResponseOutput) ToMigrateSqlServerSqlMITaskOutputErrorResponseOutput() MigrateSqlServerSqlMITaskOutputErrorResponseOutput {
	return o
}

func (o MigrateSqlServerSqlMITaskOutputErrorResponseOutput) ToMigrateSqlServerSqlMITaskOutputErrorResponseOutputWithContext(ctx context.Context) MigrateSqlServerSqlMITaskOutputErrorResponseOutput {
	return o
}

// Migration error
func (o MigrateSqlServerSqlMITaskOutputErrorResponseOutput) Error() ReportableExceptionResponseOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlMITaskOutputErrorResponse) ReportableExceptionResponse { return v.Error }).(ReportableExceptionResponseOutput)
}

// Result identifier
func (o MigrateSqlServerSqlMITaskOutputErrorResponseOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlMITaskOutputErrorResponse) string { return v.Id }).(pulumi.StringOutput)
}

// Result type
func (o MigrateSqlServerSqlMITaskOutputErrorResponseOutput) ResultType() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlMITaskOutputErrorResponse) string { return v.ResultType }).(pulumi.StringOutput)
}

type MigrateSqlServerSqlMITaskOutputLoginLevelResponse struct {
	// Login migration end time
	EndedOn string `pulumi:"endedOn"`
	// Login migration errors and warnings per login
	ExceptionsAndWarnings []ReportableExceptionResponse `pulumi:"exceptionsAndWarnings"`
	// Result identifier
	Id string `pulumi:"id"`
	// Login name.
	LoginName string `pulumi:"loginName"`
	// Login migration progress message
	Message string `pulumi:"message"`
	// Result type
	ResultType string `pulumi:"resultType"`
	// Current stage of login
	Stage string `pulumi:"stage"`
	// Login migration start time
	StartedOn string `pulumi:"startedOn"`
	// Current state of login
	State string `pulumi:"state"`
}

type MigrateSqlServerSqlMITaskOutputLoginLevelResponseOutput struct{ *pulumi.OutputState }

func (MigrateSqlServerSqlMITaskOutputLoginLevelResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MigrateSqlServerSqlMITaskOutputLoginLevelResponse)(nil)).Elem()
}

func (o MigrateSqlServerSqlMITaskOutputLoginLevelResponseOutput) ToMigrateSqlServerSqlMITaskOutputLoginLevelResponseOutput() MigrateSqlServerSqlMITaskOutputLoginLevelResponseOutput {
	return o
}

func (o MigrateSqlServerSqlMITaskOutputLoginLevelResponseOutput) ToMigrateSqlServerSqlMITaskOutputLoginLevelResponseOutputWithContext(ctx context.Context) MigrateSqlServerSqlMITaskOutputLoginLevelResponseOutput {
	return o
}

// Login migration end time
func (o MigrateSqlServerSqlMITaskOutputLoginLevelResponseOutput) EndedOn() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlMITaskOutputLoginLevelResponse) string { return v.EndedOn }).(pulumi.StringOutput)
}

// Login migration errors and warnings per login
func (o MigrateSqlServerSqlMITaskOutputLoginLevelResponseOutput) ExceptionsAndWarnings() ReportableExceptionResponseArrayOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlMITaskOutputLoginLevelResponse) []ReportableExceptionResponse {
		return v.ExceptionsAndWarnings
	}).(ReportableExceptionResponseArrayOutput)
}

// Result identifier
func (o MigrateSqlServerSqlMITaskOutputLoginLevelResponseOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlMITaskOutputLoginLevelResponse) string { return v.Id }).(pulumi.StringOutput)
}

// Login name.
func (o MigrateSqlServerSqlMITaskOutputLoginLevelResponseOutput) LoginName() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlMITaskOutputLoginLevelResponse) string { return v.LoginName }).(pulumi.StringOutput)
}

// Login migration progress message
func (o MigrateSqlServerSqlMITaskOutputLoginLevelResponseOutput) Message() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlMITaskOutputLoginLevelResponse) string { return v.Message }).(pulumi.StringOutput)
}

// Result type
func (o MigrateSqlServerSqlMITaskOutputLoginLevelResponseOutput) ResultType() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlMITaskOutputLoginLevelResponse) string { return v.ResultType }).(pulumi.StringOutput)
}

// Current stage of login
func (o MigrateSqlServerSqlMITaskOutputLoginLevelResponseOutput) Stage() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlMITaskOutputLoginLevelResponse) string { return v.Stage }).(pulumi.StringOutput)
}

// Login migration start time
func (o MigrateSqlServerSqlMITaskOutputLoginLevelResponseOutput) StartedOn() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlMITaskOutputLoginLevelResponse) string { return v.StartedOn }).(pulumi.StringOutput)
}

// Current state of login
func (o MigrateSqlServerSqlMITaskOutputLoginLevelResponseOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlMITaskOutputLoginLevelResponse) string { return v.State }).(pulumi.StringOutput)
}

type MigrateSqlServerSqlMITaskOutputMigrationLevelResponse struct {
	// Selected agent jobs as a map from name to id
	AgentJobs string `pulumi:"agentJobs"`
	// Selected databases as a map from database name to database id
	Databases string `pulumi:"databases"`
	// Migration end time
	EndedOn string `pulumi:"endedOn"`
	// Migration exceptions and warnings.
	ExceptionsAndWarnings []ReportableExceptionResponse `pulumi:"exceptionsAndWarnings"`
	// Result identifier
	Id string `pulumi:"id"`
	// Selected logins as a map from name to id
	Logins string `pulumi:"logins"`
	// Migration progress message
	Message string `pulumi:"message"`
	// Map of users to database name of orphaned users.
	OrphanedUsers string `pulumi:"orphanedUsers"`
	// Result type
	ResultType string `pulumi:"resultType"`
	// Map of server role migration results.
	ServerRoleResults string `pulumi:"serverRoleResults"`
	// Source server brand version
	SourceServerBrandVersion string `pulumi:"sourceServerBrandVersion"`
	// Source server version
	SourceServerVersion string `pulumi:"sourceServerVersion"`
	// Migration start time
	StartedOn string `pulumi:"startedOn"`
	// Current state of migration
	State string `pulumi:"state"`
	// Current status of migration
	Status string `pulumi:"status"`
	// Target server brand version
	TargetServerBrandVersion string `pulumi:"targetServerBrandVersion"`
	// Target server version
	TargetServerVersion string `pulumi:"targetServerVersion"`
}

type MigrateSqlServerSqlMITaskOutputMigrationLevelResponseOutput struct{ *pulumi.OutputState }

func (MigrateSqlServerSqlMITaskOutputMigrationLevelResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MigrateSqlServerSqlMITaskOutputMigrationLevelResponse)(nil)).Elem()
}

func (o MigrateSqlServerSqlMITaskOutputMigrationLevelResponseOutput) ToMigrateSqlServerSqlMITaskOutputMigrationLevelResponseOutput() MigrateSqlServerSqlMITaskOutputMigrationLevelResponseOutput {
	return o
}

func (o MigrateSqlServerSqlMITaskOutputMigrationLevelResponseOutput) ToMigrateSqlServerSqlMITaskOutputMigrationLevelResponseOutputWithContext(ctx context.Context) MigrateSqlServerSqlMITaskOutputMigrationLevelResponseOutput {
	return o
}

// Selected agent jobs as a map from name to id
func (o MigrateSqlServerSqlMITaskOutputMigrationLevelResponseOutput) AgentJobs() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlMITaskOutputMigrationLevelResponse) string { return v.AgentJobs }).(pulumi.StringOutput)
}

// Selected databases as a map from database name to database id
func (o MigrateSqlServerSqlMITaskOutputMigrationLevelResponseOutput) Databases() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlMITaskOutputMigrationLevelResponse) string { return v.Databases }).(pulumi.StringOutput)
}

// Migration end time
func (o MigrateSqlServerSqlMITaskOutputMigrationLevelResponseOutput) EndedOn() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlMITaskOutputMigrationLevelResponse) string { return v.EndedOn }).(pulumi.StringOutput)
}

// Migration exceptions and warnings.
func (o MigrateSqlServerSqlMITaskOutputMigrationLevelResponseOutput) ExceptionsAndWarnings() ReportableExceptionResponseArrayOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlMITaskOutputMigrationLevelResponse) []ReportableExceptionResponse {
		return v.ExceptionsAndWarnings
	}).(ReportableExceptionResponseArrayOutput)
}

// Result identifier
func (o MigrateSqlServerSqlMITaskOutputMigrationLevelResponseOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlMITaskOutputMigrationLevelResponse) string { return v.Id }).(pulumi.StringOutput)
}

// Selected logins as a map from name to id
func (o MigrateSqlServerSqlMITaskOutputMigrationLevelResponseOutput) Logins() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlMITaskOutputMigrationLevelResponse) string { return v.Logins }).(pulumi.StringOutput)
}

// Migration progress message
func (o MigrateSqlServerSqlMITaskOutputMigrationLevelResponseOutput) Message() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlMITaskOutputMigrationLevelResponse) string { return v.Message }).(pulumi.StringOutput)
}

// Map of users to database name of orphaned users.
func (o MigrateSqlServerSqlMITaskOutputMigrationLevelResponseOutput) OrphanedUsers() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlMITaskOutputMigrationLevelResponse) string { return v.OrphanedUsers }).(pulumi.StringOutput)
}

// Result type
func (o MigrateSqlServerSqlMITaskOutputMigrationLevelResponseOutput) ResultType() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlMITaskOutputMigrationLevelResponse) string { return v.ResultType }).(pulumi.StringOutput)
}

// Map of server role migration results.
func (o MigrateSqlServerSqlMITaskOutputMigrationLevelResponseOutput) ServerRoleResults() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlMITaskOutputMigrationLevelResponse) string { return v.ServerRoleResults }).(pulumi.StringOutput)
}

// Source server brand version
func (o MigrateSqlServerSqlMITaskOutputMigrationLevelResponseOutput) SourceServerBrandVersion() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlMITaskOutputMigrationLevelResponse) string {
		return v.SourceServerBrandVersion
	}).(pulumi.StringOutput)
}

// Source server version
func (o MigrateSqlServerSqlMITaskOutputMigrationLevelResponseOutput) SourceServerVersion() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlMITaskOutputMigrationLevelResponse) string { return v.SourceServerVersion }).(pulumi.StringOutput)
}

// Migration start time
func (o MigrateSqlServerSqlMITaskOutputMigrationLevelResponseOutput) StartedOn() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlMITaskOutputMigrationLevelResponse) string { return v.StartedOn }).(pulumi.StringOutput)
}

// Current state of migration
func (o MigrateSqlServerSqlMITaskOutputMigrationLevelResponseOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlMITaskOutputMigrationLevelResponse) string { return v.State }).(pulumi.StringOutput)
}

// Current status of migration
func (o MigrateSqlServerSqlMITaskOutputMigrationLevelResponseOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlMITaskOutputMigrationLevelResponse) string { return v.Status }).(pulumi.StringOutput)
}

// Target server brand version
func (o MigrateSqlServerSqlMITaskOutputMigrationLevelResponseOutput) TargetServerBrandVersion() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlMITaskOutputMigrationLevelResponse) string {
		return v.TargetServerBrandVersion
	}).(pulumi.StringOutput)
}

// Target server version
func (o MigrateSqlServerSqlMITaskOutputMigrationLevelResponseOutput) TargetServerVersion() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlMITaskOutputMigrationLevelResponse) string { return v.TargetServerVersion }).(pulumi.StringOutput)
}

// Properties for task that migrates SQL Server databases to Azure SQL Database Managed Instance
type MigrateSqlServerSqlMITaskProperties struct {
	// Task input
	Input *MigrateSqlServerSqlMITaskInput `pulumi:"input"`
	// Task type.
	TaskType string `pulumi:"taskType"`
}

// MigrateSqlServerSqlMITaskPropertiesInput is an input type that accepts MigrateSqlServerSqlMITaskPropertiesArgs and MigrateSqlServerSqlMITaskPropertiesOutput values.
// You can construct a concrete instance of `MigrateSqlServerSqlMITaskPropertiesInput` via:
//
//          MigrateSqlServerSqlMITaskPropertiesArgs{...}
type MigrateSqlServerSqlMITaskPropertiesInput interface {
	pulumi.Input

	ToMigrateSqlServerSqlMITaskPropertiesOutput() MigrateSqlServerSqlMITaskPropertiesOutput
	ToMigrateSqlServerSqlMITaskPropertiesOutputWithContext(context.Context) MigrateSqlServerSqlMITaskPropertiesOutput
}

// Properties for task that migrates SQL Server databases to Azure SQL Database Managed Instance
type MigrateSqlServerSqlMITaskPropertiesArgs struct {
	// Task input
	Input MigrateSqlServerSqlMITaskInputPtrInput `pulumi:"input"`
	// Task type.
	TaskType pulumi.StringInput `pulumi:"taskType"`
}

func (MigrateSqlServerSqlMITaskPropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MigrateSqlServerSqlMITaskProperties)(nil)).Elem()
}

func (i MigrateSqlServerSqlMITaskPropertiesArgs) ToMigrateSqlServerSqlMITaskPropertiesOutput() MigrateSqlServerSqlMITaskPropertiesOutput {
	return i.ToMigrateSqlServerSqlMITaskPropertiesOutputWithContext(context.Background())
}

func (i MigrateSqlServerSqlMITaskPropertiesArgs) ToMigrateSqlServerSqlMITaskPropertiesOutputWithContext(ctx context.Context) MigrateSqlServerSqlMITaskPropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MigrateSqlServerSqlMITaskPropertiesOutput)
}

// Properties for task that migrates SQL Server databases to Azure SQL Database Managed Instance
type MigrateSqlServerSqlMITaskPropertiesResponse struct {
	// Array of errors. This is ignored if submitted.
	Errors []ODataErrorResponse `pulumi:"errors"`
	// Task input
	Input *MigrateSqlServerSqlMITaskInputResponse `pulumi:"input"`
	// Task output. This is ignored if submitted.
	Output []interface{} `pulumi:"output"`
	// The state of the task. This is ignored if submitted.
	State string `pulumi:"state"`
	// Task type.
	TaskType string `pulumi:"taskType"`
}

// Properties for task that migrates SQL Server databases to Azure SQL Database Managed Instance
type MigrateSqlServerSqlMITaskPropertiesResponseOutput struct{ *pulumi.OutputState }

func (MigrateSqlServerSqlMITaskPropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MigrateSqlServerSqlMITaskPropertiesResponse)(nil)).Elem()
}

func (o MigrateSqlServerSqlMITaskPropertiesResponseOutput) ToMigrateSqlServerSqlMITaskPropertiesResponseOutput() MigrateSqlServerSqlMITaskPropertiesResponseOutput {
	return o
}

func (o MigrateSqlServerSqlMITaskPropertiesResponseOutput) ToMigrateSqlServerSqlMITaskPropertiesResponseOutputWithContext(ctx context.Context) MigrateSqlServerSqlMITaskPropertiesResponseOutput {
	return o
}

// Array of errors. This is ignored if submitted.
func (o MigrateSqlServerSqlMITaskPropertiesResponseOutput) Errors() ODataErrorResponseArrayOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlMITaskPropertiesResponse) []ODataErrorResponse { return v.Errors }).(ODataErrorResponseArrayOutput)
}

// Task input
func (o MigrateSqlServerSqlMITaskPropertiesResponseOutput) Input() MigrateSqlServerSqlMITaskInputResponsePtrOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlMITaskPropertiesResponse) *MigrateSqlServerSqlMITaskInputResponse {
		return v.Input
	}).(MigrateSqlServerSqlMITaskInputResponsePtrOutput)
}

// Task output. This is ignored if submitted.
func (o MigrateSqlServerSqlMITaskPropertiesResponseOutput) Output() pulumi.ArrayOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlMITaskPropertiesResponse) []interface{} { return v.Output }).(pulumi.ArrayOutput)
}

// The state of the task. This is ignored if submitted.
func (o MigrateSqlServerSqlMITaskPropertiesResponseOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlMITaskPropertiesResponse) string { return v.State }).(pulumi.StringOutput)
}

// Task type.
func (o MigrateSqlServerSqlMITaskPropertiesResponseOutput) TaskType() pulumi.StringOutput {
	return o.ApplyT(func(v MigrateSqlServerSqlMITaskPropertiesResponse) string { return v.TaskType }).(pulumi.StringOutput)
}

// Information about migration eligibility of a server object
type MigrationEligibilityInfoResponse struct {
	// Whether object is eligible for migration or not.
	IsEligibleForMigration bool `pulumi:"isEligibleForMigration"`
	// Information about eligibility failure for the server object.
	ValidationMessages []string `pulumi:"validationMessages"`
}

// Information about migration eligibility of a server object
type MigrationEligibilityInfoResponseOutput struct{ *pulumi.OutputState }

func (MigrationEligibilityInfoResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MigrationEligibilityInfoResponse)(nil)).Elem()
}

func (o MigrationEligibilityInfoResponseOutput) ToMigrationEligibilityInfoResponseOutput() MigrationEligibilityInfoResponseOutput {
	return o
}

func (o MigrationEligibilityInfoResponseOutput) ToMigrationEligibilityInfoResponseOutputWithContext(ctx context.Context) MigrationEligibilityInfoResponseOutput {
	return o
}

// Whether object is eligible for migration or not.
func (o MigrationEligibilityInfoResponseOutput) IsEligibleForMigration() pulumi.BoolOutput {
	return o.ApplyT(func(v MigrationEligibilityInfoResponse) bool { return v.IsEligibleForMigration }).(pulumi.BoolOutput)
}

// Information about eligibility failure for the server object.
func (o MigrationEligibilityInfoResponseOutput) ValidationMessages() pulumi.StringArrayOutput {
	return o.ApplyT(func(v MigrationEligibilityInfoResponse) []string { return v.ValidationMessages }).(pulumi.StringArrayOutput)
}

// Migration validation report result, contains the url for downloading the generated report.
type MigrationReportResultResponse struct {
	// Migration validation result identifier
	Id *string `pulumi:"id"`
	// The url of the report.
	ReportUrl *string `pulumi:"reportUrl"`
}

// Migration validation report result, contains the url for downloading the generated report.
type MigrationReportResultResponseOutput struct{ *pulumi.OutputState }

func (MigrationReportResultResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MigrationReportResultResponse)(nil)).Elem()
}

func (o MigrationReportResultResponseOutput) ToMigrationReportResultResponseOutput() MigrationReportResultResponseOutput {
	return o
}

func (o MigrationReportResultResponseOutput) ToMigrationReportResultResponseOutputWithContext(ctx context.Context) MigrationReportResultResponseOutput {
	return o
}

func (o MigrationReportResultResponseOutput) ToMigrationReportResultResponsePtrOutput() MigrationReportResultResponsePtrOutput {
	return o.ToMigrationReportResultResponsePtrOutputWithContext(context.Background())
}

func (o MigrationReportResultResponseOutput) ToMigrationReportResultResponsePtrOutputWithContext(ctx context.Context) MigrationReportResultResponsePtrOutput {
	return o.ApplyT(func(v MigrationReportResultResponse) *MigrationReportResultResponse {
		return &v
	}).(MigrationReportResultResponsePtrOutput)
}

// Migration validation result identifier
func (o MigrationReportResultResponseOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MigrationReportResultResponse) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// The url of the report.
func (o MigrationReportResultResponseOutput) ReportUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MigrationReportResultResponse) *string { return v.ReportUrl }).(pulumi.StringPtrOutput)
}

type MigrationReportResultResponsePtrOutput struct{ *pulumi.OutputState }

func (MigrationReportResultResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MigrationReportResultResponse)(nil)).Elem()
}

func (o MigrationReportResultResponsePtrOutput) ToMigrationReportResultResponsePtrOutput() MigrationReportResultResponsePtrOutput {
	return o
}

func (o MigrationReportResultResponsePtrOutput) ToMigrationReportResultResponsePtrOutputWithContext(ctx context.Context) MigrationReportResultResponsePtrOutput {
	return o
}

func (o MigrationReportResultResponsePtrOutput) Elem() MigrationReportResultResponseOutput {
	return o.ApplyT(func(v *MigrationReportResultResponse) MigrationReportResultResponse { return *v }).(MigrationReportResultResponseOutput)
}

// Migration validation result identifier
func (o MigrationReportResultResponsePtrOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MigrationReportResultResponse) *string {
		if v == nil {
			return nil
		}
		return v.Id
	}).(pulumi.StringPtrOutput)
}

// The url of the report.
func (o MigrationReportResultResponsePtrOutput) ReportUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MigrationReportResultResponse) *string {
		if v == nil {
			return nil
		}
		return v.ReportUrl
	}).(pulumi.StringPtrOutput)
}

// Types of validations to run after the migration
type MigrationValidationOptions struct {
	// Allows to perform a checksum based data integrity validation between source and target for the selected database / tables .
	EnableDataIntegrityValidation *bool `pulumi:"enableDataIntegrityValidation"`
	// Allows to perform a quick and intelligent query analysis by retrieving queries from the source database and executes them in the target. The result will have execution statistics for executions in source and target databases for the extracted queries.
	EnableQueryAnalysisValidation *bool `pulumi:"enableQueryAnalysisValidation"`
	// Allows to compare the schema information between source and target.
	EnableSchemaValidation *bool `pulumi:"enableSchemaValidation"`
}

// MigrationValidationOptionsInput is an input type that accepts MigrationValidationOptionsArgs and MigrationValidationOptionsOutput values.
// You can construct a concrete instance of `MigrationValidationOptionsInput` via:
//
//          MigrationValidationOptionsArgs{...}
type MigrationValidationOptionsInput interface {
	pulumi.Input

	ToMigrationValidationOptionsOutput() MigrationValidationOptionsOutput
	ToMigrationValidationOptionsOutputWithContext(context.Context) MigrationValidationOptionsOutput
}

// Types of validations to run after the migration
type MigrationValidationOptionsArgs struct {
	// Allows to perform a checksum based data integrity validation between source and target for the selected database / tables .
	EnableDataIntegrityValidation pulumi.BoolPtrInput `pulumi:"enableDataIntegrityValidation"`
	// Allows to perform a quick and intelligent query analysis by retrieving queries from the source database and executes them in the target. The result will have execution statistics for executions in source and target databases for the extracted queries.
	EnableQueryAnalysisValidation pulumi.BoolPtrInput `pulumi:"enableQueryAnalysisValidation"`
	// Allows to compare the schema information between source and target.
	EnableSchemaValidation pulumi.BoolPtrInput `pulumi:"enableSchemaValidation"`
}

func (MigrationValidationOptionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MigrationValidationOptions)(nil)).Elem()
}

func (i MigrationValidationOptionsArgs) ToMigrationValidationOptionsOutput() MigrationValidationOptionsOutput {
	return i.ToMigrationValidationOptionsOutputWithContext(context.Background())
}

func (i MigrationValidationOptionsArgs) ToMigrationValidationOptionsOutputWithContext(ctx context.Context) MigrationValidationOptionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MigrationValidationOptionsOutput)
}

func (i MigrationValidationOptionsArgs) ToMigrationValidationOptionsPtrOutput() MigrationValidationOptionsPtrOutput {
	return i.ToMigrationValidationOptionsPtrOutputWithContext(context.Background())
}

func (i MigrationValidationOptionsArgs) ToMigrationValidationOptionsPtrOutputWithContext(ctx context.Context) MigrationValidationOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MigrationValidationOptionsOutput).ToMigrationValidationOptionsPtrOutputWithContext(ctx)
}

// MigrationValidationOptionsPtrInput is an input type that accepts MigrationValidationOptionsArgs, MigrationValidationOptionsPtr and MigrationValidationOptionsPtrOutput values.
// You can construct a concrete instance of `MigrationValidationOptionsPtrInput` via:
//
//          MigrationValidationOptionsArgs{...}
//
//  or:
//
//          nil
type MigrationValidationOptionsPtrInput interface {
	pulumi.Input

	ToMigrationValidationOptionsPtrOutput() MigrationValidationOptionsPtrOutput
	ToMigrationValidationOptionsPtrOutputWithContext(context.Context) MigrationValidationOptionsPtrOutput
}

type migrationValidationOptionsPtrType MigrationValidationOptionsArgs

func MigrationValidationOptionsPtr(v *MigrationValidationOptionsArgs) MigrationValidationOptionsPtrInput {
	return (*migrationValidationOptionsPtrType)(v)
}

func (*migrationValidationOptionsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**MigrationValidationOptions)(nil)).Elem()
}

func (i *migrationValidationOptionsPtrType) ToMigrationValidationOptionsPtrOutput() MigrationValidationOptionsPtrOutput {
	return i.ToMigrationValidationOptionsPtrOutputWithContext(context.Background())
}

func (i *migrationValidationOptionsPtrType) ToMigrationValidationOptionsPtrOutputWithContext(ctx context.Context) MigrationValidationOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MigrationValidationOptionsPtrOutput)
}

// Types of validations to run after the migration
type MigrationValidationOptionsResponse struct {
	// Allows to perform a checksum based data integrity validation between source and target for the selected database / tables .
	EnableDataIntegrityValidation *bool `pulumi:"enableDataIntegrityValidation"`
	// Allows to perform a quick and intelligent query analysis by retrieving queries from the source database and executes them in the target. The result will have execution statistics for executions in source and target databases for the extracted queries.
	EnableQueryAnalysisValidation *bool `pulumi:"enableQueryAnalysisValidation"`
	// Allows to compare the schema information between source and target.
	EnableSchemaValidation *bool `pulumi:"enableSchemaValidation"`
}

// Types of validations to run after the migration
type MigrationValidationOptionsResponseOutput struct{ *pulumi.OutputState }

func (MigrationValidationOptionsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MigrationValidationOptionsResponse)(nil)).Elem()
}

func (o MigrationValidationOptionsResponseOutput) ToMigrationValidationOptionsResponseOutput() MigrationValidationOptionsResponseOutput {
	return o
}

func (o MigrationValidationOptionsResponseOutput) ToMigrationValidationOptionsResponseOutputWithContext(ctx context.Context) MigrationValidationOptionsResponseOutput {
	return o
}

func (o MigrationValidationOptionsResponseOutput) ToMigrationValidationOptionsResponsePtrOutput() MigrationValidationOptionsResponsePtrOutput {
	return o.ToMigrationValidationOptionsResponsePtrOutputWithContext(context.Background())
}

func (o MigrationValidationOptionsResponseOutput) ToMigrationValidationOptionsResponsePtrOutputWithContext(ctx context.Context) MigrationValidationOptionsResponsePtrOutput {
	return o.ApplyT(func(v MigrationValidationOptionsResponse) *MigrationValidationOptionsResponse {
		return &v
	}).(MigrationValidationOptionsResponsePtrOutput)
}

// Allows to perform a checksum based data integrity validation between source and target for the selected database / tables .
func (o MigrationValidationOptionsResponseOutput) EnableDataIntegrityValidation() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v MigrationValidationOptionsResponse) *bool { return v.EnableDataIntegrityValidation }).(pulumi.BoolPtrOutput)
}

// Allows to perform a quick and intelligent query analysis by retrieving queries from the source database and executes them in the target. The result will have execution statistics for executions in source and target databases for the extracted queries.
func (o MigrationValidationOptionsResponseOutput) EnableQueryAnalysisValidation() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v MigrationValidationOptionsResponse) *bool { return v.EnableQueryAnalysisValidation }).(pulumi.BoolPtrOutput)
}

// Allows to compare the schema information between source and target.
func (o MigrationValidationOptionsResponseOutput) EnableSchemaValidation() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v MigrationValidationOptionsResponse) *bool { return v.EnableSchemaValidation }).(pulumi.BoolPtrOutput)
}

type MigrationValidationOptionsResponsePtrOutput struct{ *pulumi.OutputState }

func (MigrationValidationOptionsResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MigrationValidationOptionsResponse)(nil)).Elem()
}

func (o MigrationValidationOptionsResponsePtrOutput) ToMigrationValidationOptionsResponsePtrOutput() MigrationValidationOptionsResponsePtrOutput {
	return o
}

func (o MigrationValidationOptionsResponsePtrOutput) ToMigrationValidationOptionsResponsePtrOutputWithContext(ctx context.Context) MigrationValidationOptionsResponsePtrOutput {
	return o
}

func (o MigrationValidationOptionsResponsePtrOutput) Elem() MigrationValidationOptionsResponseOutput {
	return o.ApplyT(func(v *MigrationValidationOptionsResponse) MigrationValidationOptionsResponse { return *v }).(MigrationValidationOptionsResponseOutput)
}

// Allows to perform a checksum based data integrity validation between source and target for the selected database / tables .
func (o MigrationValidationOptionsResponsePtrOutput) EnableDataIntegrityValidation() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *MigrationValidationOptionsResponse) *bool {
		if v == nil {
			return nil
		}
		return v.EnableDataIntegrityValidation
	}).(pulumi.BoolPtrOutput)
}

// Allows to perform a quick and intelligent query analysis by retrieving queries from the source database and executes them in the target. The result will have execution statistics for executions in source and target databases for the extracted queries.
func (o MigrationValidationOptionsResponsePtrOutput) EnableQueryAnalysisValidation() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *MigrationValidationOptionsResponse) *bool {
		if v == nil {
			return nil
		}
		return v.EnableQueryAnalysisValidation
	}).(pulumi.BoolPtrOutput)
}

// Allows to compare the schema information between source and target.
func (o MigrationValidationOptionsResponsePtrOutput) EnableSchemaValidation() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *MigrationValidationOptionsResponse) *bool {
		if v == nil {
			return nil
		}
		return v.EnableSchemaValidation
	}).(pulumi.BoolPtrOutput)
}

// Error information in OData format.
type ODataErrorResponse struct {
	// The machine-readable description of the error, such as 'InvalidRequest' or 'InternalServerError'
	Code *string `pulumi:"code"`
	// Inner errors that caused this error
	Details []ODataErrorResponse `pulumi:"details"`
	// The human-readable description of the error
	Message *string `pulumi:"message"`
}

// Error information in OData format.
type ODataErrorResponseOutput struct{ *pulumi.OutputState }

func (ODataErrorResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ODataErrorResponse)(nil)).Elem()
}

func (o ODataErrorResponseOutput) ToODataErrorResponseOutput() ODataErrorResponseOutput {
	return o
}

func (o ODataErrorResponseOutput) ToODataErrorResponseOutputWithContext(ctx context.Context) ODataErrorResponseOutput {
	return o
}

// The machine-readable description of the error, such as 'InvalidRequest' or 'InternalServerError'
func (o ODataErrorResponseOutput) Code() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ODataErrorResponse) *string { return v.Code }).(pulumi.StringPtrOutput)
}

// Inner errors that caused this error
func (o ODataErrorResponseOutput) Details() ODataErrorResponseArrayOutput {
	return o.ApplyT(func(v ODataErrorResponse) []ODataErrorResponse { return v.Details }).(ODataErrorResponseArrayOutput)
}

// The human-readable description of the error
func (o ODataErrorResponseOutput) Message() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ODataErrorResponse) *string { return v.Message }).(pulumi.StringPtrOutput)
}

type ODataErrorResponseArrayOutput struct{ *pulumi.OutputState }

func (ODataErrorResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ODataErrorResponse)(nil)).Elem()
}

func (o ODataErrorResponseArrayOutput) ToODataErrorResponseArrayOutput() ODataErrorResponseArrayOutput {
	return o
}

func (o ODataErrorResponseArrayOutput) ToODataErrorResponseArrayOutputWithContext(ctx context.Context) ODataErrorResponseArrayOutput {
	return o
}

func (o ODataErrorResponseArrayOutput) Index(i pulumi.IntInput) ODataErrorResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ODataErrorResponse {
		return vs[0].([]ODataErrorResponse)[vs[1].(int)]
	}).(ODataErrorResponseOutput)
}

// Exception object for all custom exceptions
type ReportableExceptionResponse struct {
	// The path to the file where exception occurred
	FilePath *string `pulumi:"filePath"`
	// Coded numerical value that is assigned to a specific exception
	HResult *int `pulumi:"hResult"`
	// The line number where exception occurred
	LineNumber *string `pulumi:"lineNumber"`
	// Error message
	Message *string `pulumi:"message"`
	// Stack trace
	StackTrace *string `pulumi:"stackTrace"`
}

// Exception object for all custom exceptions
type ReportableExceptionResponseOutput struct{ *pulumi.OutputState }

func (ReportableExceptionResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ReportableExceptionResponse)(nil)).Elem()
}

func (o ReportableExceptionResponseOutput) ToReportableExceptionResponseOutput() ReportableExceptionResponseOutput {
	return o
}

func (o ReportableExceptionResponseOutput) ToReportableExceptionResponseOutputWithContext(ctx context.Context) ReportableExceptionResponseOutput {
	return o
}

// The path to the file where exception occurred
func (o ReportableExceptionResponseOutput) FilePath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ReportableExceptionResponse) *string { return v.FilePath }).(pulumi.StringPtrOutput)
}

// Coded numerical value that is assigned to a specific exception
func (o ReportableExceptionResponseOutput) HResult() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ReportableExceptionResponse) *int { return v.HResult }).(pulumi.IntPtrOutput)
}

// The line number where exception occurred
func (o ReportableExceptionResponseOutput) LineNumber() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ReportableExceptionResponse) *string { return v.LineNumber }).(pulumi.StringPtrOutput)
}

// Error message
func (o ReportableExceptionResponseOutput) Message() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ReportableExceptionResponse) *string { return v.Message }).(pulumi.StringPtrOutput)
}

// Stack trace
func (o ReportableExceptionResponseOutput) StackTrace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ReportableExceptionResponse) *string { return v.StackTrace }).(pulumi.StringPtrOutput)
}

type ReportableExceptionResponseArrayOutput struct{ *pulumi.OutputState }

func (ReportableExceptionResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ReportableExceptionResponse)(nil)).Elem()
}

func (o ReportableExceptionResponseArrayOutput) ToReportableExceptionResponseArrayOutput() ReportableExceptionResponseArrayOutput {
	return o
}

func (o ReportableExceptionResponseArrayOutput) ToReportableExceptionResponseArrayOutputWithContext(ctx context.Context) ReportableExceptionResponseArrayOutput {
	return o
}

func (o ReportableExceptionResponseArrayOutput) Index(i pulumi.IntInput) ReportableExceptionResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ReportableExceptionResponse {
		return vs[0].([]ReportableExceptionResponse)[vs[1].(int)]
	}).(ReportableExceptionResponseOutput)
}

// An Azure SKU instance
type ServiceSku struct {
	// The capacity of the SKU, if it supports scaling
	Capacity *int `pulumi:"capacity"`
	// The SKU family, used when the service has multiple performance classes within a tier, such as 'A', 'D', etc. for virtual machines
	Family *string `pulumi:"family"`
	// The unique name of the SKU, such as 'P3'
	Name *string `pulumi:"name"`
	// The size of the SKU, used when the name alone does not denote a service size or when a SKU has multiple performance classes within a family, e.g. 'A1' for virtual machines
	Size *string `pulumi:"size"`
	// The tier of the SKU, such as 'Free', 'Basic', 'Standard', or 'Premium'
	Tier *string `pulumi:"tier"`
}

// ServiceSkuInput is an input type that accepts ServiceSkuArgs and ServiceSkuOutput values.
// You can construct a concrete instance of `ServiceSkuInput` via:
//
//          ServiceSkuArgs{...}
type ServiceSkuInput interface {
	pulumi.Input

	ToServiceSkuOutput() ServiceSkuOutput
	ToServiceSkuOutputWithContext(context.Context) ServiceSkuOutput
}

// An Azure SKU instance
type ServiceSkuArgs struct {
	// The capacity of the SKU, if it supports scaling
	Capacity pulumi.IntPtrInput `pulumi:"capacity"`
	// The SKU family, used when the service has multiple performance classes within a tier, such as 'A', 'D', etc. for virtual machines
	Family pulumi.StringPtrInput `pulumi:"family"`
	// The unique name of the SKU, such as 'P3'
	Name pulumi.StringPtrInput `pulumi:"name"`
	// The size of the SKU, used when the name alone does not denote a service size or when a SKU has multiple performance classes within a family, e.g. 'A1' for virtual machines
	Size pulumi.StringPtrInput `pulumi:"size"`
	// The tier of the SKU, such as 'Free', 'Basic', 'Standard', or 'Premium'
	Tier pulumi.StringPtrInput `pulumi:"tier"`
}

func (ServiceSkuArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceSku)(nil)).Elem()
}

func (i ServiceSkuArgs) ToServiceSkuOutput() ServiceSkuOutput {
	return i.ToServiceSkuOutputWithContext(context.Background())
}

func (i ServiceSkuArgs) ToServiceSkuOutputWithContext(ctx context.Context) ServiceSkuOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceSkuOutput)
}

func (i ServiceSkuArgs) ToServiceSkuPtrOutput() ServiceSkuPtrOutput {
	return i.ToServiceSkuPtrOutputWithContext(context.Background())
}

func (i ServiceSkuArgs) ToServiceSkuPtrOutputWithContext(ctx context.Context) ServiceSkuPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceSkuOutput).ToServiceSkuPtrOutputWithContext(ctx)
}

// ServiceSkuPtrInput is an input type that accepts ServiceSkuArgs, ServiceSkuPtr and ServiceSkuPtrOutput values.
// You can construct a concrete instance of `ServiceSkuPtrInput` via:
//
//          ServiceSkuArgs{...}
//
//  or:
//
//          nil
type ServiceSkuPtrInput interface {
	pulumi.Input

	ToServiceSkuPtrOutput() ServiceSkuPtrOutput
	ToServiceSkuPtrOutputWithContext(context.Context) ServiceSkuPtrOutput
}

type serviceSkuPtrType ServiceSkuArgs

func ServiceSkuPtr(v *ServiceSkuArgs) ServiceSkuPtrInput {
	return (*serviceSkuPtrType)(v)
}

func (*serviceSkuPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ServiceSku)(nil)).Elem()
}

func (i *serviceSkuPtrType) ToServiceSkuPtrOutput() ServiceSkuPtrOutput {
	return i.ToServiceSkuPtrOutputWithContext(context.Background())
}

func (i *serviceSkuPtrType) ToServiceSkuPtrOutputWithContext(ctx context.Context) ServiceSkuPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceSkuPtrOutput)
}

// An Azure SKU instance
type ServiceSkuResponse struct {
	// The capacity of the SKU, if it supports scaling
	Capacity *int `pulumi:"capacity"`
	// The SKU family, used when the service has multiple performance classes within a tier, such as 'A', 'D', etc. for virtual machines
	Family *string `pulumi:"family"`
	// The unique name of the SKU, such as 'P3'
	Name *string `pulumi:"name"`
	// The size of the SKU, used when the name alone does not denote a service size or when a SKU has multiple performance classes within a family, e.g. 'A1' for virtual machines
	Size *string `pulumi:"size"`
	// The tier of the SKU, such as 'Free', 'Basic', 'Standard', or 'Premium'
	Tier *string `pulumi:"tier"`
}

// An Azure SKU instance
type ServiceSkuResponseOutput struct{ *pulumi.OutputState }

func (ServiceSkuResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceSkuResponse)(nil)).Elem()
}

func (o ServiceSkuResponseOutput) ToServiceSkuResponseOutput() ServiceSkuResponseOutput {
	return o
}

func (o ServiceSkuResponseOutput) ToServiceSkuResponseOutputWithContext(ctx context.Context) ServiceSkuResponseOutput {
	return o
}

func (o ServiceSkuResponseOutput) ToServiceSkuResponsePtrOutput() ServiceSkuResponsePtrOutput {
	return o.ToServiceSkuResponsePtrOutputWithContext(context.Background())
}

func (o ServiceSkuResponseOutput) ToServiceSkuResponsePtrOutputWithContext(ctx context.Context) ServiceSkuResponsePtrOutput {
	return o.ApplyT(func(v ServiceSkuResponse) *ServiceSkuResponse {
		return &v
	}).(ServiceSkuResponsePtrOutput)
}

// The capacity of the SKU, if it supports scaling
func (o ServiceSkuResponseOutput) Capacity() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ServiceSkuResponse) *int { return v.Capacity }).(pulumi.IntPtrOutput)
}

// The SKU family, used when the service has multiple performance classes within a tier, such as 'A', 'D', etc. for virtual machines
func (o ServiceSkuResponseOutput) Family() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceSkuResponse) *string { return v.Family }).(pulumi.StringPtrOutput)
}

// The unique name of the SKU, such as 'P3'
func (o ServiceSkuResponseOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceSkuResponse) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The size of the SKU, used when the name alone does not denote a service size or when a SKU has multiple performance classes within a family, e.g. 'A1' for virtual machines
func (o ServiceSkuResponseOutput) Size() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceSkuResponse) *string { return v.Size }).(pulumi.StringPtrOutput)
}

// The tier of the SKU, such as 'Free', 'Basic', 'Standard', or 'Premium'
func (o ServiceSkuResponseOutput) Tier() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceSkuResponse) *string { return v.Tier }).(pulumi.StringPtrOutput)
}

type ServiceSkuResponsePtrOutput struct{ *pulumi.OutputState }

func (ServiceSkuResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ServiceSkuResponse)(nil)).Elem()
}

func (o ServiceSkuResponsePtrOutput) ToServiceSkuResponsePtrOutput() ServiceSkuResponsePtrOutput {
	return o
}

func (o ServiceSkuResponsePtrOutput) ToServiceSkuResponsePtrOutputWithContext(ctx context.Context) ServiceSkuResponsePtrOutput {
	return o
}

func (o ServiceSkuResponsePtrOutput) Elem() ServiceSkuResponseOutput {
	return o.ApplyT(func(v *ServiceSkuResponse) ServiceSkuResponse { return *v }).(ServiceSkuResponseOutput)
}

// The capacity of the SKU, if it supports scaling
func (o ServiceSkuResponsePtrOutput) Capacity() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ServiceSkuResponse) *int {
		if v == nil {
			return nil
		}
		return v.Capacity
	}).(pulumi.IntPtrOutput)
}

// The SKU family, used when the service has multiple performance classes within a tier, such as 'A', 'D', etc. for virtual machines
func (o ServiceSkuResponsePtrOutput) Family() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServiceSkuResponse) *string {
		if v == nil {
			return nil
		}
		return v.Family
	}).(pulumi.StringPtrOutput)
}

// The unique name of the SKU, such as 'P3'
func (o ServiceSkuResponsePtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServiceSkuResponse) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// The size of the SKU, used when the name alone does not denote a service size or when a SKU has multiple performance classes within a family, e.g. 'A1' for virtual machines
func (o ServiceSkuResponsePtrOutput) Size() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServiceSkuResponse) *string {
		if v == nil {
			return nil
		}
		return v.Size
	}).(pulumi.StringPtrOutput)
}

// The tier of the SKU, such as 'Free', 'Basic', 'Standard', or 'Premium'
func (o ServiceSkuResponsePtrOutput) Tier() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServiceSkuResponse) *string {
		if v == nil {
			return nil
		}
		return v.Tier
	}).(pulumi.StringPtrOutput)
}

// Information for connecting to SQL database server
type SqlConnectionInfo struct {
	// Additional connection settings
	AdditionalSettings *string `pulumi:"additionalSettings"`
	// Authentication type to use for connection
	Authentication *string `pulumi:"authentication"`
	// Data source in the format Protocol:MachineName\SQLServerInstanceName,PortNumber
	DataSource string `pulumi:"dataSource"`
	// Whether to encrypt the connection
	EncryptConnection *bool `pulumi:"encryptConnection"`
	// Password credential.
	Password *string `pulumi:"password"`
	// Whether to trust the server certificate
	TrustServerCertificate *bool `pulumi:"trustServerCertificate"`
	// Type of connection info
	Type string `pulumi:"type"`
	// User name
	UserName *string `pulumi:"userName"`
}

// SqlConnectionInfoInput is an input type that accepts SqlConnectionInfoArgs and SqlConnectionInfoOutput values.
// You can construct a concrete instance of `SqlConnectionInfoInput` via:
//
//          SqlConnectionInfoArgs{...}
type SqlConnectionInfoInput interface {
	pulumi.Input

	ToSqlConnectionInfoOutput() SqlConnectionInfoOutput
	ToSqlConnectionInfoOutputWithContext(context.Context) SqlConnectionInfoOutput
}

// Information for connecting to SQL database server
type SqlConnectionInfoArgs struct {
	// Additional connection settings
	AdditionalSettings pulumi.StringPtrInput `pulumi:"additionalSettings"`
	// Authentication type to use for connection
	Authentication pulumi.StringPtrInput `pulumi:"authentication"`
	// Data source in the format Protocol:MachineName\SQLServerInstanceName,PortNumber
	DataSource pulumi.StringInput `pulumi:"dataSource"`
	// Whether to encrypt the connection
	EncryptConnection pulumi.BoolPtrInput `pulumi:"encryptConnection"`
	// Password credential.
	Password pulumi.StringPtrInput `pulumi:"password"`
	// Whether to trust the server certificate
	TrustServerCertificate pulumi.BoolPtrInput `pulumi:"trustServerCertificate"`
	// Type of connection info
	Type pulumi.StringInput `pulumi:"type"`
	// User name
	UserName pulumi.StringPtrInput `pulumi:"userName"`
}

func (SqlConnectionInfoArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SqlConnectionInfo)(nil)).Elem()
}

func (i SqlConnectionInfoArgs) ToSqlConnectionInfoOutput() SqlConnectionInfoOutput {
	return i.ToSqlConnectionInfoOutputWithContext(context.Background())
}

func (i SqlConnectionInfoArgs) ToSqlConnectionInfoOutputWithContext(ctx context.Context) SqlConnectionInfoOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SqlConnectionInfoOutput)
}

func (i SqlConnectionInfoArgs) ToSqlConnectionInfoPtrOutput() SqlConnectionInfoPtrOutput {
	return i.ToSqlConnectionInfoPtrOutputWithContext(context.Background())
}

func (i SqlConnectionInfoArgs) ToSqlConnectionInfoPtrOutputWithContext(ctx context.Context) SqlConnectionInfoPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SqlConnectionInfoOutput).ToSqlConnectionInfoPtrOutputWithContext(ctx)
}

// SqlConnectionInfoPtrInput is an input type that accepts SqlConnectionInfoArgs, SqlConnectionInfoPtr and SqlConnectionInfoPtrOutput values.
// You can construct a concrete instance of `SqlConnectionInfoPtrInput` via:
//
//          SqlConnectionInfoArgs{...}
//
//  or:
//
//          nil
type SqlConnectionInfoPtrInput interface {
	pulumi.Input

	ToSqlConnectionInfoPtrOutput() SqlConnectionInfoPtrOutput
	ToSqlConnectionInfoPtrOutputWithContext(context.Context) SqlConnectionInfoPtrOutput
}

type sqlConnectionInfoPtrType SqlConnectionInfoArgs

func SqlConnectionInfoPtr(v *SqlConnectionInfoArgs) SqlConnectionInfoPtrInput {
	return (*sqlConnectionInfoPtrType)(v)
}

func (*sqlConnectionInfoPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SqlConnectionInfo)(nil)).Elem()
}

func (i *sqlConnectionInfoPtrType) ToSqlConnectionInfoPtrOutput() SqlConnectionInfoPtrOutput {
	return i.ToSqlConnectionInfoPtrOutputWithContext(context.Background())
}

func (i *sqlConnectionInfoPtrType) ToSqlConnectionInfoPtrOutputWithContext(ctx context.Context) SqlConnectionInfoPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SqlConnectionInfoPtrOutput)
}

// Information for connecting to SQL database server
type SqlConnectionInfoResponse struct {
	// Additional connection settings
	AdditionalSettings *string `pulumi:"additionalSettings"`
	// Authentication type to use for connection
	Authentication *string `pulumi:"authentication"`
	// Data source in the format Protocol:MachineName\SQLServerInstanceName,PortNumber
	DataSource string `pulumi:"dataSource"`
	// Whether to encrypt the connection
	EncryptConnection *bool `pulumi:"encryptConnection"`
	// Password credential.
	Password *string `pulumi:"password"`
	// Whether to trust the server certificate
	TrustServerCertificate *bool `pulumi:"trustServerCertificate"`
	// Type of connection info
	Type string `pulumi:"type"`
	// User name
	UserName *string `pulumi:"userName"`
}

// Information for connecting to SQL database server
type SqlConnectionInfoResponseOutput struct{ *pulumi.OutputState }

func (SqlConnectionInfoResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SqlConnectionInfoResponse)(nil)).Elem()
}

func (o SqlConnectionInfoResponseOutput) ToSqlConnectionInfoResponseOutput() SqlConnectionInfoResponseOutput {
	return o
}

func (o SqlConnectionInfoResponseOutput) ToSqlConnectionInfoResponseOutputWithContext(ctx context.Context) SqlConnectionInfoResponseOutput {
	return o
}

func (o SqlConnectionInfoResponseOutput) ToSqlConnectionInfoResponsePtrOutput() SqlConnectionInfoResponsePtrOutput {
	return o.ToSqlConnectionInfoResponsePtrOutputWithContext(context.Background())
}

func (o SqlConnectionInfoResponseOutput) ToSqlConnectionInfoResponsePtrOutputWithContext(ctx context.Context) SqlConnectionInfoResponsePtrOutput {
	return o.ApplyT(func(v SqlConnectionInfoResponse) *SqlConnectionInfoResponse {
		return &v
	}).(SqlConnectionInfoResponsePtrOutput)
}

// Additional connection settings
func (o SqlConnectionInfoResponseOutput) AdditionalSettings() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SqlConnectionInfoResponse) *string { return v.AdditionalSettings }).(pulumi.StringPtrOutput)
}

// Authentication type to use for connection
func (o SqlConnectionInfoResponseOutput) Authentication() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SqlConnectionInfoResponse) *string { return v.Authentication }).(pulumi.StringPtrOutput)
}

// Data source in the format Protocol:MachineName\SQLServerInstanceName,PortNumber
func (o SqlConnectionInfoResponseOutput) DataSource() pulumi.StringOutput {
	return o.ApplyT(func(v SqlConnectionInfoResponse) string { return v.DataSource }).(pulumi.StringOutput)
}

// Whether to encrypt the connection
func (o SqlConnectionInfoResponseOutput) EncryptConnection() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SqlConnectionInfoResponse) *bool { return v.EncryptConnection }).(pulumi.BoolPtrOutput)
}

// Password credential.
func (o SqlConnectionInfoResponseOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SqlConnectionInfoResponse) *string { return v.Password }).(pulumi.StringPtrOutput)
}

// Whether to trust the server certificate
func (o SqlConnectionInfoResponseOutput) TrustServerCertificate() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SqlConnectionInfoResponse) *bool { return v.TrustServerCertificate }).(pulumi.BoolPtrOutput)
}

// Type of connection info
func (o SqlConnectionInfoResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v SqlConnectionInfoResponse) string { return v.Type }).(pulumi.StringOutput)
}

// User name
func (o SqlConnectionInfoResponseOutput) UserName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SqlConnectionInfoResponse) *string { return v.UserName }).(pulumi.StringPtrOutput)
}

type SqlConnectionInfoResponsePtrOutput struct{ *pulumi.OutputState }

func (SqlConnectionInfoResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SqlConnectionInfoResponse)(nil)).Elem()
}

func (o SqlConnectionInfoResponsePtrOutput) ToSqlConnectionInfoResponsePtrOutput() SqlConnectionInfoResponsePtrOutput {
	return o
}

func (o SqlConnectionInfoResponsePtrOutput) ToSqlConnectionInfoResponsePtrOutputWithContext(ctx context.Context) SqlConnectionInfoResponsePtrOutput {
	return o
}

func (o SqlConnectionInfoResponsePtrOutput) Elem() SqlConnectionInfoResponseOutput {
	return o.ApplyT(func(v *SqlConnectionInfoResponse) SqlConnectionInfoResponse { return *v }).(SqlConnectionInfoResponseOutput)
}

// Additional connection settings
func (o SqlConnectionInfoResponsePtrOutput) AdditionalSettings() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SqlConnectionInfoResponse) *string {
		if v == nil {
			return nil
		}
		return v.AdditionalSettings
	}).(pulumi.StringPtrOutput)
}

// Authentication type to use for connection
func (o SqlConnectionInfoResponsePtrOutput) Authentication() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SqlConnectionInfoResponse) *string {
		if v == nil {
			return nil
		}
		return v.Authentication
	}).(pulumi.StringPtrOutput)
}

// Data source in the format Protocol:MachineName\SQLServerInstanceName,PortNumber
func (o SqlConnectionInfoResponsePtrOutput) DataSource() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SqlConnectionInfoResponse) *string {
		if v == nil {
			return nil
		}
		return &v.DataSource
	}).(pulumi.StringPtrOutput)
}

// Whether to encrypt the connection
func (o SqlConnectionInfoResponsePtrOutput) EncryptConnection() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SqlConnectionInfoResponse) *bool {
		if v == nil {
			return nil
		}
		return v.EncryptConnection
	}).(pulumi.BoolPtrOutput)
}

// Password credential.
func (o SqlConnectionInfoResponsePtrOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SqlConnectionInfoResponse) *string {
		if v == nil {
			return nil
		}
		return v.Password
	}).(pulumi.StringPtrOutput)
}

// Whether to trust the server certificate
func (o SqlConnectionInfoResponsePtrOutput) TrustServerCertificate() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SqlConnectionInfoResponse) *bool {
		if v == nil {
			return nil
		}
		return v.TrustServerCertificate
	}).(pulumi.BoolPtrOutput)
}

// Type of connection info
func (o SqlConnectionInfoResponsePtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SqlConnectionInfoResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

// User name
func (o SqlConnectionInfoResponsePtrOutput) UserName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SqlConnectionInfoResponse) *string {
		if v == nil {
			return nil
		}
		return v.UserName
	}).(pulumi.StringPtrOutput)
}

// Input for task that validates migration input for SQL to Azure SQL Managed Instance
type ValidateMigrationInputSqlServerSqlMITaskInput struct {
	// SAS URI of Azure Storage Account Container to be used for storing backup files.
	BackupBlobShare BlobShare `pulumi:"backupBlobShare"`
	// Backup file share information for all selected databases.
	BackupFileShare *FileShare `pulumi:"backupFileShare"`
	// Databases to migrate
	SelectedDatabases []MigrateSqlServerSqlMIDatabaseInput `pulumi:"selectedDatabases"`
	// Information for connecting to target
	TargetConnectionInfo SqlConnectionInfo `pulumi:"targetConnectionInfo"`
}

// ValidateMigrationInputSqlServerSqlMITaskInputInput is an input type that accepts ValidateMigrationInputSqlServerSqlMITaskInputArgs and ValidateMigrationInputSqlServerSqlMITaskInputOutput values.
// You can construct a concrete instance of `ValidateMigrationInputSqlServerSqlMITaskInputInput` via:
//
//          ValidateMigrationInputSqlServerSqlMITaskInputArgs{...}
type ValidateMigrationInputSqlServerSqlMITaskInputInput interface {
	pulumi.Input

	ToValidateMigrationInputSqlServerSqlMITaskInputOutput() ValidateMigrationInputSqlServerSqlMITaskInputOutput
	ToValidateMigrationInputSqlServerSqlMITaskInputOutputWithContext(context.Context) ValidateMigrationInputSqlServerSqlMITaskInputOutput
}

// Input for task that validates migration input for SQL to Azure SQL Managed Instance
type ValidateMigrationInputSqlServerSqlMITaskInputArgs struct {
	// SAS URI of Azure Storage Account Container to be used for storing backup files.
	BackupBlobShare BlobShareInput `pulumi:"backupBlobShare"`
	// Backup file share information for all selected databases.
	BackupFileShare FileSharePtrInput `pulumi:"backupFileShare"`
	// Databases to migrate
	SelectedDatabases MigrateSqlServerSqlMIDatabaseInputArrayInput `pulumi:"selectedDatabases"`
	// Information for connecting to target
	TargetConnectionInfo SqlConnectionInfoInput `pulumi:"targetConnectionInfo"`
}

func (ValidateMigrationInputSqlServerSqlMITaskInputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ValidateMigrationInputSqlServerSqlMITaskInput)(nil)).Elem()
}

func (i ValidateMigrationInputSqlServerSqlMITaskInputArgs) ToValidateMigrationInputSqlServerSqlMITaskInputOutput() ValidateMigrationInputSqlServerSqlMITaskInputOutput {
	return i.ToValidateMigrationInputSqlServerSqlMITaskInputOutputWithContext(context.Background())
}

func (i ValidateMigrationInputSqlServerSqlMITaskInputArgs) ToValidateMigrationInputSqlServerSqlMITaskInputOutputWithContext(ctx context.Context) ValidateMigrationInputSqlServerSqlMITaskInputOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ValidateMigrationInputSqlServerSqlMITaskInputOutput)
}

func (i ValidateMigrationInputSqlServerSqlMITaskInputArgs) ToValidateMigrationInputSqlServerSqlMITaskInputPtrOutput() ValidateMigrationInputSqlServerSqlMITaskInputPtrOutput {
	return i.ToValidateMigrationInputSqlServerSqlMITaskInputPtrOutputWithContext(context.Background())
}

func (i ValidateMigrationInputSqlServerSqlMITaskInputArgs) ToValidateMigrationInputSqlServerSqlMITaskInputPtrOutputWithContext(ctx context.Context) ValidateMigrationInputSqlServerSqlMITaskInputPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ValidateMigrationInputSqlServerSqlMITaskInputOutput).ToValidateMigrationInputSqlServerSqlMITaskInputPtrOutputWithContext(ctx)
}

// ValidateMigrationInputSqlServerSqlMITaskInputPtrInput is an input type that accepts ValidateMigrationInputSqlServerSqlMITaskInputArgs, ValidateMigrationInputSqlServerSqlMITaskInputPtr and ValidateMigrationInputSqlServerSqlMITaskInputPtrOutput values.
// You can construct a concrete instance of `ValidateMigrationInputSqlServerSqlMITaskInputPtrInput` via:
//
//          ValidateMigrationInputSqlServerSqlMITaskInputArgs{...}
//
//  or:
//
//          nil
type ValidateMigrationInputSqlServerSqlMITaskInputPtrInput interface {
	pulumi.Input

	ToValidateMigrationInputSqlServerSqlMITaskInputPtrOutput() ValidateMigrationInputSqlServerSqlMITaskInputPtrOutput
	ToValidateMigrationInputSqlServerSqlMITaskInputPtrOutputWithContext(context.Context) ValidateMigrationInputSqlServerSqlMITaskInputPtrOutput
}

type validateMigrationInputSqlServerSqlMITaskInputPtrType ValidateMigrationInputSqlServerSqlMITaskInputArgs

func ValidateMigrationInputSqlServerSqlMITaskInputPtr(v *ValidateMigrationInputSqlServerSqlMITaskInputArgs) ValidateMigrationInputSqlServerSqlMITaskInputPtrInput {
	return (*validateMigrationInputSqlServerSqlMITaskInputPtrType)(v)
}

func (*validateMigrationInputSqlServerSqlMITaskInputPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ValidateMigrationInputSqlServerSqlMITaskInput)(nil)).Elem()
}

func (i *validateMigrationInputSqlServerSqlMITaskInputPtrType) ToValidateMigrationInputSqlServerSqlMITaskInputPtrOutput() ValidateMigrationInputSqlServerSqlMITaskInputPtrOutput {
	return i.ToValidateMigrationInputSqlServerSqlMITaskInputPtrOutputWithContext(context.Background())
}

func (i *validateMigrationInputSqlServerSqlMITaskInputPtrType) ToValidateMigrationInputSqlServerSqlMITaskInputPtrOutputWithContext(ctx context.Context) ValidateMigrationInputSqlServerSqlMITaskInputPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ValidateMigrationInputSqlServerSqlMITaskInputPtrOutput)
}

// Input for task that validates migration input for SQL to Azure SQL Managed Instance
type ValidateMigrationInputSqlServerSqlMITaskInputResponse struct {
	// SAS URI of Azure Storage Account Container to be used for storing backup files.
	BackupBlobShare BlobShareResponse `pulumi:"backupBlobShare"`
	// Backup file share information for all selected databases.
	BackupFileShare *FileShareResponse `pulumi:"backupFileShare"`
	// Databases to migrate
	SelectedDatabases []MigrateSqlServerSqlMIDatabaseInputResponse `pulumi:"selectedDatabases"`
	// Information for connecting to target
	TargetConnectionInfo SqlConnectionInfoResponse `pulumi:"targetConnectionInfo"`
}

// Input for task that validates migration input for SQL to Azure SQL Managed Instance
type ValidateMigrationInputSqlServerSqlMITaskInputResponseOutput struct{ *pulumi.OutputState }

func (ValidateMigrationInputSqlServerSqlMITaskInputResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ValidateMigrationInputSqlServerSqlMITaskInputResponse)(nil)).Elem()
}

func (o ValidateMigrationInputSqlServerSqlMITaskInputResponseOutput) ToValidateMigrationInputSqlServerSqlMITaskInputResponseOutput() ValidateMigrationInputSqlServerSqlMITaskInputResponseOutput {
	return o
}

func (o ValidateMigrationInputSqlServerSqlMITaskInputResponseOutput) ToValidateMigrationInputSqlServerSqlMITaskInputResponseOutputWithContext(ctx context.Context) ValidateMigrationInputSqlServerSqlMITaskInputResponseOutput {
	return o
}

func (o ValidateMigrationInputSqlServerSqlMITaskInputResponseOutput) ToValidateMigrationInputSqlServerSqlMITaskInputResponsePtrOutput() ValidateMigrationInputSqlServerSqlMITaskInputResponsePtrOutput {
	return o.ToValidateMigrationInputSqlServerSqlMITaskInputResponsePtrOutputWithContext(context.Background())
}

func (o ValidateMigrationInputSqlServerSqlMITaskInputResponseOutput) ToValidateMigrationInputSqlServerSqlMITaskInputResponsePtrOutputWithContext(ctx context.Context) ValidateMigrationInputSqlServerSqlMITaskInputResponsePtrOutput {
	return o.ApplyT(func(v ValidateMigrationInputSqlServerSqlMITaskInputResponse) *ValidateMigrationInputSqlServerSqlMITaskInputResponse {
		return &v
	}).(ValidateMigrationInputSqlServerSqlMITaskInputResponsePtrOutput)
}

// SAS URI of Azure Storage Account Container to be used for storing backup files.
func (o ValidateMigrationInputSqlServerSqlMITaskInputResponseOutput) BackupBlobShare() BlobShareResponseOutput {
	return o.ApplyT(func(v ValidateMigrationInputSqlServerSqlMITaskInputResponse) BlobShareResponse {
		return v.BackupBlobShare
	}).(BlobShareResponseOutput)
}

// Backup file share information for all selected databases.
func (o ValidateMigrationInputSqlServerSqlMITaskInputResponseOutput) BackupFileShare() FileShareResponsePtrOutput {
	return o.ApplyT(func(v ValidateMigrationInputSqlServerSqlMITaskInputResponse) *FileShareResponse {
		return v.BackupFileShare
	}).(FileShareResponsePtrOutput)
}

// Databases to migrate
func (o ValidateMigrationInputSqlServerSqlMITaskInputResponseOutput) SelectedDatabases() MigrateSqlServerSqlMIDatabaseInputResponseArrayOutput {
	return o.ApplyT(func(v ValidateMigrationInputSqlServerSqlMITaskInputResponse) []MigrateSqlServerSqlMIDatabaseInputResponse {
		return v.SelectedDatabases
	}).(MigrateSqlServerSqlMIDatabaseInputResponseArrayOutput)
}

// Information for connecting to target
func (o ValidateMigrationInputSqlServerSqlMITaskInputResponseOutput) TargetConnectionInfo() SqlConnectionInfoResponseOutput {
	return o.ApplyT(func(v ValidateMigrationInputSqlServerSqlMITaskInputResponse) SqlConnectionInfoResponse {
		return v.TargetConnectionInfo
	}).(SqlConnectionInfoResponseOutput)
}

type ValidateMigrationInputSqlServerSqlMITaskInputResponsePtrOutput struct{ *pulumi.OutputState }

func (ValidateMigrationInputSqlServerSqlMITaskInputResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ValidateMigrationInputSqlServerSqlMITaskInputResponse)(nil)).Elem()
}

func (o ValidateMigrationInputSqlServerSqlMITaskInputResponsePtrOutput) ToValidateMigrationInputSqlServerSqlMITaskInputResponsePtrOutput() ValidateMigrationInputSqlServerSqlMITaskInputResponsePtrOutput {
	return o
}

func (o ValidateMigrationInputSqlServerSqlMITaskInputResponsePtrOutput) ToValidateMigrationInputSqlServerSqlMITaskInputResponsePtrOutputWithContext(ctx context.Context) ValidateMigrationInputSqlServerSqlMITaskInputResponsePtrOutput {
	return o
}

func (o ValidateMigrationInputSqlServerSqlMITaskInputResponsePtrOutput) Elem() ValidateMigrationInputSqlServerSqlMITaskInputResponseOutput {
	return o.ApplyT(func(v *ValidateMigrationInputSqlServerSqlMITaskInputResponse) ValidateMigrationInputSqlServerSqlMITaskInputResponse {
		return *v
	}).(ValidateMigrationInputSqlServerSqlMITaskInputResponseOutput)
}

// SAS URI of Azure Storage Account Container to be used for storing backup files.
func (o ValidateMigrationInputSqlServerSqlMITaskInputResponsePtrOutput) BackupBlobShare() BlobShareResponsePtrOutput {
	return o.ApplyT(func(v *ValidateMigrationInputSqlServerSqlMITaskInputResponse) *BlobShareResponse {
		if v == nil {
			return nil
		}
		return &v.BackupBlobShare
	}).(BlobShareResponsePtrOutput)
}

// Backup file share information for all selected databases.
func (o ValidateMigrationInputSqlServerSqlMITaskInputResponsePtrOutput) BackupFileShare() FileShareResponsePtrOutput {
	return o.ApplyT(func(v *ValidateMigrationInputSqlServerSqlMITaskInputResponse) *FileShareResponse {
		if v == nil {
			return nil
		}
		return v.BackupFileShare
	}).(FileShareResponsePtrOutput)
}

// Databases to migrate
func (o ValidateMigrationInputSqlServerSqlMITaskInputResponsePtrOutput) SelectedDatabases() MigrateSqlServerSqlMIDatabaseInputResponseArrayOutput {
	return o.ApplyT(func(v *ValidateMigrationInputSqlServerSqlMITaskInputResponse) []MigrateSqlServerSqlMIDatabaseInputResponse {
		if v == nil {
			return nil
		}
		return v.SelectedDatabases
	}).(MigrateSqlServerSqlMIDatabaseInputResponseArrayOutput)
}

// Information for connecting to target
func (o ValidateMigrationInputSqlServerSqlMITaskInputResponsePtrOutput) TargetConnectionInfo() SqlConnectionInfoResponsePtrOutput {
	return o.ApplyT(func(v *ValidateMigrationInputSqlServerSqlMITaskInputResponse) *SqlConnectionInfoResponse {
		if v == nil {
			return nil
		}
		return &v.TargetConnectionInfo
	}).(SqlConnectionInfoResponsePtrOutput)
}

// Output for task that validates migration input for SQL to Azure SQL Managed Instance migrations
type ValidateMigrationInputSqlServerSqlMITaskOutputResponse struct {
	// Errors associated with the BackupFolder path
	BackupFolderErrors []ReportableExceptionResponse `pulumi:"backupFolderErrors"`
	// Errors associated with backup share user name and password credentials
	BackupShareCredentialsErrors []ReportableExceptionResponse `pulumi:"backupShareCredentialsErrors"`
	// Errors associated with the storage account provided.
	BackupStorageAccountErrors []ReportableExceptionResponse `pulumi:"backupStorageAccountErrors"`
	// Result identifier
	Id string `pulumi:"id"`
	// Name of database
	Name string `pulumi:"name"`
	// Errors associated with the RestoreDatabaseName
	RestoreDatabaseNameErrors []ReportableExceptionResponse `pulumi:"restoreDatabaseNameErrors"`
}

// Output for task that validates migration input for SQL to Azure SQL Managed Instance migrations
type ValidateMigrationInputSqlServerSqlMITaskOutputResponseOutput struct{ *pulumi.OutputState }

func (ValidateMigrationInputSqlServerSqlMITaskOutputResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ValidateMigrationInputSqlServerSqlMITaskOutputResponse)(nil)).Elem()
}

func (o ValidateMigrationInputSqlServerSqlMITaskOutputResponseOutput) ToValidateMigrationInputSqlServerSqlMITaskOutputResponseOutput() ValidateMigrationInputSqlServerSqlMITaskOutputResponseOutput {
	return o
}

func (o ValidateMigrationInputSqlServerSqlMITaskOutputResponseOutput) ToValidateMigrationInputSqlServerSqlMITaskOutputResponseOutputWithContext(ctx context.Context) ValidateMigrationInputSqlServerSqlMITaskOutputResponseOutput {
	return o
}

// Errors associated with the BackupFolder path
func (o ValidateMigrationInputSqlServerSqlMITaskOutputResponseOutput) BackupFolderErrors() ReportableExceptionResponseArrayOutput {
	return o.ApplyT(func(v ValidateMigrationInputSqlServerSqlMITaskOutputResponse) []ReportableExceptionResponse {
		return v.BackupFolderErrors
	}).(ReportableExceptionResponseArrayOutput)
}

// Errors associated with backup share user name and password credentials
func (o ValidateMigrationInputSqlServerSqlMITaskOutputResponseOutput) BackupShareCredentialsErrors() ReportableExceptionResponseArrayOutput {
	return o.ApplyT(func(v ValidateMigrationInputSqlServerSqlMITaskOutputResponse) []ReportableExceptionResponse {
		return v.BackupShareCredentialsErrors
	}).(ReportableExceptionResponseArrayOutput)
}

// Errors associated with the storage account provided.
func (o ValidateMigrationInputSqlServerSqlMITaskOutputResponseOutput) BackupStorageAccountErrors() ReportableExceptionResponseArrayOutput {
	return o.ApplyT(func(v ValidateMigrationInputSqlServerSqlMITaskOutputResponse) []ReportableExceptionResponse {
		return v.BackupStorageAccountErrors
	}).(ReportableExceptionResponseArrayOutput)
}

// Result identifier
func (o ValidateMigrationInputSqlServerSqlMITaskOutputResponseOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v ValidateMigrationInputSqlServerSqlMITaskOutputResponse) string { return v.Id }).(pulumi.StringOutput)
}

// Name of database
func (o ValidateMigrationInputSqlServerSqlMITaskOutputResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ValidateMigrationInputSqlServerSqlMITaskOutputResponse) string { return v.Name }).(pulumi.StringOutput)
}

// Errors associated with the RestoreDatabaseName
func (o ValidateMigrationInputSqlServerSqlMITaskOutputResponseOutput) RestoreDatabaseNameErrors() ReportableExceptionResponseArrayOutput {
	return o.ApplyT(func(v ValidateMigrationInputSqlServerSqlMITaskOutputResponse) []ReportableExceptionResponse {
		return v.RestoreDatabaseNameErrors
	}).(ReportableExceptionResponseArrayOutput)
}

type ValidateMigrationInputSqlServerSqlMITaskOutputResponseArrayOutput struct{ *pulumi.OutputState }

func (ValidateMigrationInputSqlServerSqlMITaskOutputResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ValidateMigrationInputSqlServerSqlMITaskOutputResponse)(nil)).Elem()
}

func (o ValidateMigrationInputSqlServerSqlMITaskOutputResponseArrayOutput) ToValidateMigrationInputSqlServerSqlMITaskOutputResponseArrayOutput() ValidateMigrationInputSqlServerSqlMITaskOutputResponseArrayOutput {
	return o
}

func (o ValidateMigrationInputSqlServerSqlMITaskOutputResponseArrayOutput) ToValidateMigrationInputSqlServerSqlMITaskOutputResponseArrayOutputWithContext(ctx context.Context) ValidateMigrationInputSqlServerSqlMITaskOutputResponseArrayOutput {
	return o
}

func (o ValidateMigrationInputSqlServerSqlMITaskOutputResponseArrayOutput) Index(i pulumi.IntInput) ValidateMigrationInputSqlServerSqlMITaskOutputResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ValidateMigrationInputSqlServerSqlMITaskOutputResponse {
		return vs[0].([]ValidateMigrationInputSqlServerSqlMITaskOutputResponse)[vs[1].(int)]
	}).(ValidateMigrationInputSqlServerSqlMITaskOutputResponseOutput)
}

// Properties for task that validates migration input for SQL to Azure SQL Database Managed Instance
type ValidateMigrationInputSqlServerSqlMITaskProperties struct {
	// Task input
	Input *ValidateMigrationInputSqlServerSqlMITaskInput `pulumi:"input"`
	// Task type.
	TaskType string `pulumi:"taskType"`
}

// ValidateMigrationInputSqlServerSqlMITaskPropertiesInput is an input type that accepts ValidateMigrationInputSqlServerSqlMITaskPropertiesArgs and ValidateMigrationInputSqlServerSqlMITaskPropertiesOutput values.
// You can construct a concrete instance of `ValidateMigrationInputSqlServerSqlMITaskPropertiesInput` via:
//
//          ValidateMigrationInputSqlServerSqlMITaskPropertiesArgs{...}
type ValidateMigrationInputSqlServerSqlMITaskPropertiesInput interface {
	pulumi.Input

	ToValidateMigrationInputSqlServerSqlMITaskPropertiesOutput() ValidateMigrationInputSqlServerSqlMITaskPropertiesOutput
	ToValidateMigrationInputSqlServerSqlMITaskPropertiesOutputWithContext(context.Context) ValidateMigrationInputSqlServerSqlMITaskPropertiesOutput
}

// Properties for task that validates migration input for SQL to Azure SQL Database Managed Instance
type ValidateMigrationInputSqlServerSqlMITaskPropertiesArgs struct {
	// Task input
	Input ValidateMigrationInputSqlServerSqlMITaskInputPtrInput `pulumi:"input"`
	// Task type.
	TaskType pulumi.StringInput `pulumi:"taskType"`
}

func (ValidateMigrationInputSqlServerSqlMITaskPropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ValidateMigrationInputSqlServerSqlMITaskProperties)(nil)).Elem()
}

func (i ValidateMigrationInputSqlServerSqlMITaskPropertiesArgs) ToValidateMigrationInputSqlServerSqlMITaskPropertiesOutput() ValidateMigrationInputSqlServerSqlMITaskPropertiesOutput {
	return i.ToValidateMigrationInputSqlServerSqlMITaskPropertiesOutputWithContext(context.Background())
}

func (i ValidateMigrationInputSqlServerSqlMITaskPropertiesArgs) ToValidateMigrationInputSqlServerSqlMITaskPropertiesOutputWithContext(ctx context.Context) ValidateMigrationInputSqlServerSqlMITaskPropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ValidateMigrationInputSqlServerSqlMITaskPropertiesOutput)
}

// Properties for task that validates migration input for SQL to Azure SQL Database Managed Instance
type ValidateMigrationInputSqlServerSqlMITaskPropertiesResponse struct {
	// Array of errors. This is ignored if submitted.
	Errors []ODataErrorResponse `pulumi:"errors"`
	// Task input
	Input *ValidateMigrationInputSqlServerSqlMITaskInputResponse `pulumi:"input"`
	// Task output. This is ignored if submitted.
	Output []ValidateMigrationInputSqlServerSqlMITaskOutputResponse `pulumi:"output"`
	// The state of the task. This is ignored if submitted.
	State string `pulumi:"state"`
	// Task type.
	TaskType string `pulumi:"taskType"`
}

// Properties for task that validates migration input for SQL to Azure SQL Database Managed Instance
type ValidateMigrationInputSqlServerSqlMITaskPropertiesResponseOutput struct{ *pulumi.OutputState }

func (ValidateMigrationInputSqlServerSqlMITaskPropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ValidateMigrationInputSqlServerSqlMITaskPropertiesResponse)(nil)).Elem()
}

func (o ValidateMigrationInputSqlServerSqlMITaskPropertiesResponseOutput) ToValidateMigrationInputSqlServerSqlMITaskPropertiesResponseOutput() ValidateMigrationInputSqlServerSqlMITaskPropertiesResponseOutput {
	return o
}

func (o ValidateMigrationInputSqlServerSqlMITaskPropertiesResponseOutput) ToValidateMigrationInputSqlServerSqlMITaskPropertiesResponseOutputWithContext(ctx context.Context) ValidateMigrationInputSqlServerSqlMITaskPropertiesResponseOutput {
	return o
}

// Array of errors. This is ignored if submitted.
func (o ValidateMigrationInputSqlServerSqlMITaskPropertiesResponseOutput) Errors() ODataErrorResponseArrayOutput {
	return o.ApplyT(func(v ValidateMigrationInputSqlServerSqlMITaskPropertiesResponse) []ODataErrorResponse {
		return v.Errors
	}).(ODataErrorResponseArrayOutput)
}

// Task input
func (o ValidateMigrationInputSqlServerSqlMITaskPropertiesResponseOutput) Input() ValidateMigrationInputSqlServerSqlMITaskInputResponsePtrOutput {
	return o.ApplyT(func(v ValidateMigrationInputSqlServerSqlMITaskPropertiesResponse) *ValidateMigrationInputSqlServerSqlMITaskInputResponse {
		return v.Input
	}).(ValidateMigrationInputSqlServerSqlMITaskInputResponsePtrOutput)
}

// Task output. This is ignored if submitted.
func (o ValidateMigrationInputSqlServerSqlMITaskPropertiesResponseOutput) Output() ValidateMigrationInputSqlServerSqlMITaskOutputResponseArrayOutput {
	return o.ApplyT(func(v ValidateMigrationInputSqlServerSqlMITaskPropertiesResponse) []ValidateMigrationInputSqlServerSqlMITaskOutputResponse {
		return v.Output
	}).(ValidateMigrationInputSqlServerSqlMITaskOutputResponseArrayOutput)
}

// The state of the task. This is ignored if submitted.
func (o ValidateMigrationInputSqlServerSqlMITaskPropertiesResponseOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v ValidateMigrationInputSqlServerSqlMITaskPropertiesResponse) string { return v.State }).(pulumi.StringOutput)
}

// Task type.
func (o ValidateMigrationInputSqlServerSqlMITaskPropertiesResponseOutput) TaskType() pulumi.StringOutput {
	return o.ApplyT(func(v ValidateMigrationInputSqlServerSqlMITaskPropertiesResponse) string { return v.TaskType }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(BlobShareOutput{})
	pulumi.RegisterOutputType(BlobSharePtrOutput{})
	pulumi.RegisterOutputType(BlobShareResponseOutput{})
	pulumi.RegisterOutputType(BlobShareResponsePtrOutput{})
	pulumi.RegisterOutputType(ConnectToSourceSqlServerTaskInputOutput{})
	pulumi.RegisterOutputType(ConnectToSourceSqlServerTaskInputPtrOutput{})
	pulumi.RegisterOutputType(ConnectToSourceSqlServerTaskInputResponseOutput{})
	pulumi.RegisterOutputType(ConnectToSourceSqlServerTaskInputResponsePtrOutput{})
	pulumi.RegisterOutputType(ConnectToSourceSqlServerTaskOutputAgentJobLevelResponseOutput{})
	pulumi.RegisterOutputType(ConnectToSourceSqlServerTaskOutputDatabaseLevelResponseOutput{})
	pulumi.RegisterOutputType(ConnectToSourceSqlServerTaskOutputLoginLevelResponseOutput{})
	pulumi.RegisterOutputType(ConnectToSourceSqlServerTaskOutputTaskLevelResponseOutput{})
	pulumi.RegisterOutputType(ConnectToSourceSqlServerTaskPropertiesOutput{})
	pulumi.RegisterOutputType(ConnectToSourceSqlServerTaskPropertiesResponseOutput{})
	pulumi.RegisterOutputType(ConnectToTargetSqlDbTaskInputOutput{})
	pulumi.RegisterOutputType(ConnectToTargetSqlDbTaskInputPtrOutput{})
	pulumi.RegisterOutputType(ConnectToTargetSqlDbTaskInputResponseOutput{})
	pulumi.RegisterOutputType(ConnectToTargetSqlDbTaskInputResponsePtrOutput{})
	pulumi.RegisterOutputType(ConnectToTargetSqlDbTaskOutputResponseOutput{})
	pulumi.RegisterOutputType(ConnectToTargetSqlDbTaskOutputResponseArrayOutput{})
	pulumi.RegisterOutputType(ConnectToTargetSqlDbTaskPropertiesOutput{})
	pulumi.RegisterOutputType(ConnectToTargetSqlDbTaskPropertiesResponseOutput{})
	pulumi.RegisterOutputType(ConnectToTargetSqlMITaskInputOutput{})
	pulumi.RegisterOutputType(ConnectToTargetSqlMITaskInputPtrOutput{})
	pulumi.RegisterOutputType(ConnectToTargetSqlMITaskInputResponseOutput{})
	pulumi.RegisterOutputType(ConnectToTargetSqlMITaskInputResponsePtrOutput{})
	pulumi.RegisterOutputType(ConnectToTargetSqlMITaskOutputResponseOutput{})
	pulumi.RegisterOutputType(ConnectToTargetSqlMITaskOutputResponseArrayOutput{})
	pulumi.RegisterOutputType(ConnectToTargetSqlMITaskPropertiesOutput{})
	pulumi.RegisterOutputType(ConnectToTargetSqlMITaskPropertiesResponseOutput{})
	pulumi.RegisterOutputType(DatabaseFileInfoResponseOutput{})
	pulumi.RegisterOutputType(DatabaseFileInfoResponseArrayOutput{})
	pulumi.RegisterOutputType(DatabaseInfoOutput{})
	pulumi.RegisterOutputType(DatabaseInfoArrayOutput{})
	pulumi.RegisterOutputType(DatabaseInfoResponseOutput{})
	pulumi.RegisterOutputType(DatabaseInfoResponseArrayOutput{})
	pulumi.RegisterOutputType(FileShareOutput{})
	pulumi.RegisterOutputType(FileSharePtrOutput{})
	pulumi.RegisterOutputType(FileShareResponseOutput{})
	pulumi.RegisterOutputType(FileShareResponsePtrOutput{})
	pulumi.RegisterOutputType(GetUserTablesSqlTaskInputOutput{})
	pulumi.RegisterOutputType(GetUserTablesSqlTaskInputPtrOutput{})
	pulumi.RegisterOutputType(GetUserTablesSqlTaskInputResponseOutput{})
	pulumi.RegisterOutputType(GetUserTablesSqlTaskInputResponsePtrOutput{})
	pulumi.RegisterOutputType(GetUserTablesSqlTaskOutputResponseOutput{})
	pulumi.RegisterOutputType(GetUserTablesSqlTaskOutputResponseArrayOutput{})
	pulumi.RegisterOutputType(GetUserTablesSqlTaskPropertiesOutput{})
	pulumi.RegisterOutputType(GetUserTablesSqlTaskPropertiesResponseOutput{})
	pulumi.RegisterOutputType(MigrateSqlServerSqlDbDatabaseInputOutput{})
	pulumi.RegisterOutputType(MigrateSqlServerSqlDbDatabaseInputArrayOutput{})
	pulumi.RegisterOutputType(MigrateSqlServerSqlDbDatabaseInputResponseOutput{})
	pulumi.RegisterOutputType(MigrateSqlServerSqlDbDatabaseInputResponseArrayOutput{})
	pulumi.RegisterOutputType(MigrateSqlServerSqlDbTaskInputOutput{})
	pulumi.RegisterOutputType(MigrateSqlServerSqlDbTaskInputPtrOutput{})
	pulumi.RegisterOutputType(MigrateSqlServerSqlDbTaskInputResponseOutput{})
	pulumi.RegisterOutputType(MigrateSqlServerSqlDbTaskInputResponsePtrOutput{})
	pulumi.RegisterOutputType(MigrateSqlServerSqlDbTaskOutputDatabaseLevelResponseOutput{})
	pulumi.RegisterOutputType(MigrateSqlServerSqlDbTaskOutputDatabaseLevelValidationResultResponseOutput{})
	pulumi.RegisterOutputType(MigrateSqlServerSqlDbTaskOutputErrorResponseOutput{})
	pulumi.RegisterOutputType(MigrateSqlServerSqlDbTaskOutputMigrationLevelResponseOutput{})
	pulumi.RegisterOutputType(MigrateSqlServerSqlDbTaskOutputTableLevelResponseOutput{})
	pulumi.RegisterOutputType(MigrateSqlServerSqlDbTaskOutputValidationResultResponseOutput{})
	pulumi.RegisterOutputType(MigrateSqlServerSqlDbTaskPropertiesOutput{})
	pulumi.RegisterOutputType(MigrateSqlServerSqlDbTaskPropertiesResponseOutput{})
	pulumi.RegisterOutputType(MigrateSqlServerSqlMIDatabaseInputOutput{})
	pulumi.RegisterOutputType(MigrateSqlServerSqlMIDatabaseInputArrayOutput{})
	pulumi.RegisterOutputType(MigrateSqlServerSqlMIDatabaseInputResponseOutput{})
	pulumi.RegisterOutputType(MigrateSqlServerSqlMIDatabaseInputResponseArrayOutput{})
	pulumi.RegisterOutputType(MigrateSqlServerSqlMITaskInputOutput{})
	pulumi.RegisterOutputType(MigrateSqlServerSqlMITaskInputPtrOutput{})
	pulumi.RegisterOutputType(MigrateSqlServerSqlMITaskInputResponseOutput{})
	pulumi.RegisterOutputType(MigrateSqlServerSqlMITaskInputResponsePtrOutput{})
	pulumi.RegisterOutputType(MigrateSqlServerSqlMITaskOutputAgentJobLevelResponseOutput{})
	pulumi.RegisterOutputType(MigrateSqlServerSqlMITaskOutputDatabaseLevelResponseOutput{})
	pulumi.RegisterOutputType(MigrateSqlServerSqlMITaskOutputErrorResponseOutput{})
	pulumi.RegisterOutputType(MigrateSqlServerSqlMITaskOutputLoginLevelResponseOutput{})
	pulumi.RegisterOutputType(MigrateSqlServerSqlMITaskOutputMigrationLevelResponseOutput{})
	pulumi.RegisterOutputType(MigrateSqlServerSqlMITaskPropertiesOutput{})
	pulumi.RegisterOutputType(MigrateSqlServerSqlMITaskPropertiesResponseOutput{})
	pulumi.RegisterOutputType(MigrationEligibilityInfoResponseOutput{})
	pulumi.RegisterOutputType(MigrationReportResultResponseOutput{})
	pulumi.RegisterOutputType(MigrationReportResultResponsePtrOutput{})
	pulumi.RegisterOutputType(MigrationValidationOptionsOutput{})
	pulumi.RegisterOutputType(MigrationValidationOptionsPtrOutput{})
	pulumi.RegisterOutputType(MigrationValidationOptionsResponseOutput{})
	pulumi.RegisterOutputType(MigrationValidationOptionsResponsePtrOutput{})
	pulumi.RegisterOutputType(ODataErrorResponseOutput{})
	pulumi.RegisterOutputType(ODataErrorResponseArrayOutput{})
	pulumi.RegisterOutputType(ReportableExceptionResponseOutput{})
	pulumi.RegisterOutputType(ReportableExceptionResponseArrayOutput{})
	pulumi.RegisterOutputType(ServiceSkuOutput{})
	pulumi.RegisterOutputType(ServiceSkuPtrOutput{})
	pulumi.RegisterOutputType(ServiceSkuResponseOutput{})
	pulumi.RegisterOutputType(ServiceSkuResponsePtrOutput{})
	pulumi.RegisterOutputType(SqlConnectionInfoOutput{})
	pulumi.RegisterOutputType(SqlConnectionInfoPtrOutput{})
	pulumi.RegisterOutputType(SqlConnectionInfoResponseOutput{})
	pulumi.RegisterOutputType(SqlConnectionInfoResponsePtrOutput{})
	pulumi.RegisterOutputType(ValidateMigrationInputSqlServerSqlMITaskInputOutput{})
	pulumi.RegisterOutputType(ValidateMigrationInputSqlServerSqlMITaskInputPtrOutput{})
	pulumi.RegisterOutputType(ValidateMigrationInputSqlServerSqlMITaskInputResponseOutput{})
	pulumi.RegisterOutputType(ValidateMigrationInputSqlServerSqlMITaskInputResponsePtrOutput{})
	pulumi.RegisterOutputType(ValidateMigrationInputSqlServerSqlMITaskOutputResponseOutput{})
	pulumi.RegisterOutputType(ValidateMigrationInputSqlServerSqlMITaskOutputResponseArrayOutput{})
	pulumi.RegisterOutputType(ValidateMigrationInputSqlServerSqlMITaskPropertiesOutput{})
	pulumi.RegisterOutputType(ValidateMigrationInputSqlServerSqlMITaskPropertiesResponseOutput{})
}
