// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v20180419

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// Base class for all types of DMS command properties. If command is not supported by current client, this object is returned.
type CommandProperties struct {
	// Command type.
	CommandType string `pulumi:"commandType"`
}

// CommandPropertiesInput is an input type that accepts CommandPropertiesArgs and CommandPropertiesOutput values.
// You can construct a concrete instance of `CommandPropertiesInput` via:
//
//          CommandPropertiesArgs{...}
type CommandPropertiesInput interface {
	pulumi.Input

	ToCommandPropertiesOutput() CommandPropertiesOutput
	ToCommandPropertiesOutputWithContext(context.Context) CommandPropertiesOutput
}

// Base class for all types of DMS command properties. If command is not supported by current client, this object is returned.
type CommandPropertiesArgs struct {
	// Command type.
	CommandType pulumi.StringInput `pulumi:"commandType"`
}

func (CommandPropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CommandProperties)(nil)).Elem()
}

func (i CommandPropertiesArgs) ToCommandPropertiesOutput() CommandPropertiesOutput {
	return i.ToCommandPropertiesOutputWithContext(context.Background())
}

func (i CommandPropertiesArgs) ToCommandPropertiesOutputWithContext(ctx context.Context) CommandPropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CommandPropertiesOutput)
}

// Base class for all types of DMS command properties. If command is not supported by current client, this object is returned.
type CommandPropertiesOutput struct{ *pulumi.OutputState }

func (CommandPropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CommandProperties)(nil)).Elem()
}

func (o CommandPropertiesOutput) ToCommandPropertiesOutput() CommandPropertiesOutput {
	return o
}

func (o CommandPropertiesOutput) ToCommandPropertiesOutputWithContext(ctx context.Context) CommandPropertiesOutput {
	return o
}

// Command type.
func (o CommandPropertiesOutput) CommandType() pulumi.StringOutput {
	return o.ApplyT(func(v CommandProperties) string { return v.CommandType }).(pulumi.StringOutput)
}

// Base class for all types of DMS command properties. If command is not supported by current client, this object is returned.
type CommandPropertiesResponse struct {
	// Command type.
	CommandType string `pulumi:"commandType"`
	// Array of errors. This is ignored if submitted.
	Errors []ODataErrorResponse `pulumi:"errors"`
	// The state of the command. This is ignored if submitted.
	State string `pulumi:"state"`
}

// CommandPropertiesResponseInput is an input type that accepts CommandPropertiesResponseArgs and CommandPropertiesResponseOutput values.
// You can construct a concrete instance of `CommandPropertiesResponseInput` via:
//
//          CommandPropertiesResponseArgs{...}
type CommandPropertiesResponseInput interface {
	pulumi.Input

	ToCommandPropertiesResponseOutput() CommandPropertiesResponseOutput
	ToCommandPropertiesResponseOutputWithContext(context.Context) CommandPropertiesResponseOutput
}

// Base class for all types of DMS command properties. If command is not supported by current client, this object is returned.
type CommandPropertiesResponseArgs struct {
	// Command type.
	CommandType pulumi.StringInput `pulumi:"commandType"`
	// Array of errors. This is ignored if submitted.
	Errors ODataErrorResponseArrayInput `pulumi:"errors"`
	// The state of the command. This is ignored if submitted.
	State pulumi.StringInput `pulumi:"state"`
}

func (CommandPropertiesResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CommandPropertiesResponse)(nil)).Elem()
}

func (i CommandPropertiesResponseArgs) ToCommandPropertiesResponseOutput() CommandPropertiesResponseOutput {
	return i.ToCommandPropertiesResponseOutputWithContext(context.Background())
}

func (i CommandPropertiesResponseArgs) ToCommandPropertiesResponseOutputWithContext(ctx context.Context) CommandPropertiesResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CommandPropertiesResponseOutput)
}

// CommandPropertiesResponseArrayInput is an input type that accepts CommandPropertiesResponseArray and CommandPropertiesResponseArrayOutput values.
// You can construct a concrete instance of `CommandPropertiesResponseArrayInput` via:
//
//          CommandPropertiesResponseArray{ CommandPropertiesResponseArgs{...} }
type CommandPropertiesResponseArrayInput interface {
	pulumi.Input

	ToCommandPropertiesResponseArrayOutput() CommandPropertiesResponseArrayOutput
	ToCommandPropertiesResponseArrayOutputWithContext(context.Context) CommandPropertiesResponseArrayOutput
}

type CommandPropertiesResponseArray []CommandPropertiesResponseInput

func (CommandPropertiesResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CommandPropertiesResponse)(nil)).Elem()
}

func (i CommandPropertiesResponseArray) ToCommandPropertiesResponseArrayOutput() CommandPropertiesResponseArrayOutput {
	return i.ToCommandPropertiesResponseArrayOutputWithContext(context.Background())
}

func (i CommandPropertiesResponseArray) ToCommandPropertiesResponseArrayOutputWithContext(ctx context.Context) CommandPropertiesResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CommandPropertiesResponseArrayOutput)
}

// Base class for all types of DMS command properties. If command is not supported by current client, this object is returned.
type CommandPropertiesResponseOutput struct{ *pulumi.OutputState }

func (CommandPropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CommandPropertiesResponse)(nil)).Elem()
}

func (o CommandPropertiesResponseOutput) ToCommandPropertiesResponseOutput() CommandPropertiesResponseOutput {
	return o
}

func (o CommandPropertiesResponseOutput) ToCommandPropertiesResponseOutputWithContext(ctx context.Context) CommandPropertiesResponseOutput {
	return o
}

// Command type.
func (o CommandPropertiesResponseOutput) CommandType() pulumi.StringOutput {
	return o.ApplyT(func(v CommandPropertiesResponse) string { return v.CommandType }).(pulumi.StringOutput)
}

// Array of errors. This is ignored if submitted.
func (o CommandPropertiesResponseOutput) Errors() ODataErrorResponseArrayOutput {
	return o.ApplyT(func(v CommandPropertiesResponse) []ODataErrorResponse { return v.Errors }).(ODataErrorResponseArrayOutput)
}

// The state of the command. This is ignored if submitted.
func (o CommandPropertiesResponseOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v CommandPropertiesResponse) string { return v.State }).(pulumi.StringOutput)
}

type CommandPropertiesResponseArrayOutput struct{ *pulumi.OutputState }

func (CommandPropertiesResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CommandPropertiesResponse)(nil)).Elem()
}

func (o CommandPropertiesResponseArrayOutput) ToCommandPropertiesResponseArrayOutput() CommandPropertiesResponseArrayOutput {
	return o
}

func (o CommandPropertiesResponseArrayOutput) ToCommandPropertiesResponseArrayOutputWithContext(ctx context.Context) CommandPropertiesResponseArrayOutput {
	return o
}

func (o CommandPropertiesResponseArrayOutput) Index(i pulumi.IntInput) CommandPropertiesResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) CommandPropertiesResponse {
		return vs[0].([]CommandPropertiesResponse)[vs[1].(int)]
	}).(CommandPropertiesResponseOutput)
}

// Defines the connection properties of a server
type ConnectionInfo struct {
	// Password credential.
	Password *string `pulumi:"password"`
	// Type of connection info
	Type string `pulumi:"type"`
	// User name
	UserName *string `pulumi:"userName"`
}

// ConnectionInfoInput is an input type that accepts ConnectionInfoArgs and ConnectionInfoOutput values.
// You can construct a concrete instance of `ConnectionInfoInput` via:
//
//          ConnectionInfoArgs{...}
type ConnectionInfoInput interface {
	pulumi.Input

	ToConnectionInfoOutput() ConnectionInfoOutput
	ToConnectionInfoOutputWithContext(context.Context) ConnectionInfoOutput
}

// Defines the connection properties of a server
type ConnectionInfoArgs struct {
	// Password credential.
	Password pulumi.StringPtrInput `pulumi:"password"`
	// Type of connection info
	Type pulumi.StringInput `pulumi:"type"`
	// User name
	UserName pulumi.StringPtrInput `pulumi:"userName"`
}

func (ConnectionInfoArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectionInfo)(nil)).Elem()
}

func (i ConnectionInfoArgs) ToConnectionInfoOutput() ConnectionInfoOutput {
	return i.ToConnectionInfoOutputWithContext(context.Background())
}

func (i ConnectionInfoArgs) ToConnectionInfoOutputWithContext(ctx context.Context) ConnectionInfoOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectionInfoOutput)
}

func (i ConnectionInfoArgs) ToConnectionInfoPtrOutput() ConnectionInfoPtrOutput {
	return i.ToConnectionInfoPtrOutputWithContext(context.Background())
}

func (i ConnectionInfoArgs) ToConnectionInfoPtrOutputWithContext(ctx context.Context) ConnectionInfoPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectionInfoOutput).ToConnectionInfoPtrOutputWithContext(ctx)
}

// ConnectionInfoPtrInput is an input type that accepts ConnectionInfoArgs, ConnectionInfoPtr and ConnectionInfoPtrOutput values.
// You can construct a concrete instance of `ConnectionInfoPtrInput` via:
//
//          ConnectionInfoArgs{...}
//
//  or:
//
//          nil
type ConnectionInfoPtrInput interface {
	pulumi.Input

	ToConnectionInfoPtrOutput() ConnectionInfoPtrOutput
	ToConnectionInfoPtrOutputWithContext(context.Context) ConnectionInfoPtrOutput
}

type connectionInfoPtrType ConnectionInfoArgs

func ConnectionInfoPtr(v *ConnectionInfoArgs) ConnectionInfoPtrInput {
	return (*connectionInfoPtrType)(v)
}

func (*connectionInfoPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ConnectionInfo)(nil)).Elem()
}

func (i *connectionInfoPtrType) ToConnectionInfoPtrOutput() ConnectionInfoPtrOutput {
	return i.ToConnectionInfoPtrOutputWithContext(context.Background())
}

func (i *connectionInfoPtrType) ToConnectionInfoPtrOutputWithContext(ctx context.Context) ConnectionInfoPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectionInfoPtrOutput)
}

// Defines the connection properties of a server
type ConnectionInfoOutput struct{ *pulumi.OutputState }

func (ConnectionInfoOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectionInfo)(nil)).Elem()
}

func (o ConnectionInfoOutput) ToConnectionInfoOutput() ConnectionInfoOutput {
	return o
}

func (o ConnectionInfoOutput) ToConnectionInfoOutputWithContext(ctx context.Context) ConnectionInfoOutput {
	return o
}

func (o ConnectionInfoOutput) ToConnectionInfoPtrOutput() ConnectionInfoPtrOutput {
	return o.ToConnectionInfoPtrOutputWithContext(context.Background())
}

func (o ConnectionInfoOutput) ToConnectionInfoPtrOutputWithContext(ctx context.Context) ConnectionInfoPtrOutput {
	return o.ApplyT(func(v ConnectionInfo) *ConnectionInfo {
		return &v
	}).(ConnectionInfoPtrOutput)
}

// Password credential.
func (o ConnectionInfoOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ConnectionInfo) *string { return v.Password }).(pulumi.StringPtrOutput)
}

// Type of connection info
func (o ConnectionInfoOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectionInfo) string { return v.Type }).(pulumi.StringOutput)
}

// User name
func (o ConnectionInfoOutput) UserName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ConnectionInfo) *string { return v.UserName }).(pulumi.StringPtrOutput)
}

type ConnectionInfoPtrOutput struct{ *pulumi.OutputState }

func (ConnectionInfoPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ConnectionInfo)(nil)).Elem()
}

func (o ConnectionInfoPtrOutput) ToConnectionInfoPtrOutput() ConnectionInfoPtrOutput {
	return o
}

func (o ConnectionInfoPtrOutput) ToConnectionInfoPtrOutputWithContext(ctx context.Context) ConnectionInfoPtrOutput {
	return o
}

func (o ConnectionInfoPtrOutput) Elem() ConnectionInfoOutput {
	return o.ApplyT(func(v *ConnectionInfo) ConnectionInfo { return *v }).(ConnectionInfoOutput)
}

// Password credential.
func (o ConnectionInfoPtrOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConnectionInfo) *string {
		if v == nil {
			return nil
		}
		return v.Password
	}).(pulumi.StringPtrOutput)
}

// Type of connection info
func (o ConnectionInfoPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConnectionInfo) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

// User name
func (o ConnectionInfoPtrOutput) UserName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConnectionInfo) *string {
		if v == nil {
			return nil
		}
		return v.UserName
	}).(pulumi.StringPtrOutput)
}

// Defines the connection properties of a server
type ConnectionInfoResponse struct {
	// Password credential.
	Password *string `pulumi:"password"`
	// Type of connection info
	Type string `pulumi:"type"`
	// User name
	UserName *string `pulumi:"userName"`
}

// ConnectionInfoResponseInput is an input type that accepts ConnectionInfoResponseArgs and ConnectionInfoResponseOutput values.
// You can construct a concrete instance of `ConnectionInfoResponseInput` via:
//
//          ConnectionInfoResponseArgs{...}
type ConnectionInfoResponseInput interface {
	pulumi.Input

	ToConnectionInfoResponseOutput() ConnectionInfoResponseOutput
	ToConnectionInfoResponseOutputWithContext(context.Context) ConnectionInfoResponseOutput
}

// Defines the connection properties of a server
type ConnectionInfoResponseArgs struct {
	// Password credential.
	Password pulumi.StringPtrInput `pulumi:"password"`
	// Type of connection info
	Type pulumi.StringInput `pulumi:"type"`
	// User name
	UserName pulumi.StringPtrInput `pulumi:"userName"`
}

func (ConnectionInfoResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectionInfoResponse)(nil)).Elem()
}

func (i ConnectionInfoResponseArgs) ToConnectionInfoResponseOutput() ConnectionInfoResponseOutput {
	return i.ToConnectionInfoResponseOutputWithContext(context.Background())
}

func (i ConnectionInfoResponseArgs) ToConnectionInfoResponseOutputWithContext(ctx context.Context) ConnectionInfoResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectionInfoResponseOutput)
}

func (i ConnectionInfoResponseArgs) ToConnectionInfoResponsePtrOutput() ConnectionInfoResponsePtrOutput {
	return i.ToConnectionInfoResponsePtrOutputWithContext(context.Background())
}

func (i ConnectionInfoResponseArgs) ToConnectionInfoResponsePtrOutputWithContext(ctx context.Context) ConnectionInfoResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectionInfoResponseOutput).ToConnectionInfoResponsePtrOutputWithContext(ctx)
}

// ConnectionInfoResponsePtrInput is an input type that accepts ConnectionInfoResponseArgs, ConnectionInfoResponsePtr and ConnectionInfoResponsePtrOutput values.
// You can construct a concrete instance of `ConnectionInfoResponsePtrInput` via:
//
//          ConnectionInfoResponseArgs{...}
//
//  or:
//
//          nil
type ConnectionInfoResponsePtrInput interface {
	pulumi.Input

	ToConnectionInfoResponsePtrOutput() ConnectionInfoResponsePtrOutput
	ToConnectionInfoResponsePtrOutputWithContext(context.Context) ConnectionInfoResponsePtrOutput
}

type connectionInfoResponsePtrType ConnectionInfoResponseArgs

func ConnectionInfoResponsePtr(v *ConnectionInfoResponseArgs) ConnectionInfoResponsePtrInput {
	return (*connectionInfoResponsePtrType)(v)
}

func (*connectionInfoResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ConnectionInfoResponse)(nil)).Elem()
}

func (i *connectionInfoResponsePtrType) ToConnectionInfoResponsePtrOutput() ConnectionInfoResponsePtrOutput {
	return i.ToConnectionInfoResponsePtrOutputWithContext(context.Background())
}

func (i *connectionInfoResponsePtrType) ToConnectionInfoResponsePtrOutputWithContext(ctx context.Context) ConnectionInfoResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectionInfoResponsePtrOutput)
}

// Defines the connection properties of a server
type ConnectionInfoResponseOutput struct{ *pulumi.OutputState }

func (ConnectionInfoResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectionInfoResponse)(nil)).Elem()
}

func (o ConnectionInfoResponseOutput) ToConnectionInfoResponseOutput() ConnectionInfoResponseOutput {
	return o
}

func (o ConnectionInfoResponseOutput) ToConnectionInfoResponseOutputWithContext(ctx context.Context) ConnectionInfoResponseOutput {
	return o
}

func (o ConnectionInfoResponseOutput) ToConnectionInfoResponsePtrOutput() ConnectionInfoResponsePtrOutput {
	return o.ToConnectionInfoResponsePtrOutputWithContext(context.Background())
}

func (o ConnectionInfoResponseOutput) ToConnectionInfoResponsePtrOutputWithContext(ctx context.Context) ConnectionInfoResponsePtrOutput {
	return o.ApplyT(func(v ConnectionInfoResponse) *ConnectionInfoResponse {
		return &v
	}).(ConnectionInfoResponsePtrOutput)
}

// Password credential.
func (o ConnectionInfoResponseOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ConnectionInfoResponse) *string { return v.Password }).(pulumi.StringPtrOutput)
}

// Type of connection info
func (o ConnectionInfoResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectionInfoResponse) string { return v.Type }).(pulumi.StringOutput)
}

// User name
func (o ConnectionInfoResponseOutput) UserName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ConnectionInfoResponse) *string { return v.UserName }).(pulumi.StringPtrOutput)
}

type ConnectionInfoResponsePtrOutput struct{ *pulumi.OutputState }

func (ConnectionInfoResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ConnectionInfoResponse)(nil)).Elem()
}

func (o ConnectionInfoResponsePtrOutput) ToConnectionInfoResponsePtrOutput() ConnectionInfoResponsePtrOutput {
	return o
}

func (o ConnectionInfoResponsePtrOutput) ToConnectionInfoResponsePtrOutputWithContext(ctx context.Context) ConnectionInfoResponsePtrOutput {
	return o
}

func (o ConnectionInfoResponsePtrOutput) Elem() ConnectionInfoResponseOutput {
	return o.ApplyT(func(v *ConnectionInfoResponse) ConnectionInfoResponse { return *v }).(ConnectionInfoResponseOutput)
}

// Password credential.
func (o ConnectionInfoResponsePtrOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConnectionInfoResponse) *string {
		if v == nil {
			return nil
		}
		return v.Password
	}).(pulumi.StringPtrOutput)
}

// Type of connection info
func (o ConnectionInfoResponsePtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConnectionInfoResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

// User name
func (o ConnectionInfoResponsePtrOutput) UserName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConnectionInfoResponse) *string {
		if v == nil {
			return nil
		}
		return v.UserName
	}).(pulumi.StringPtrOutput)
}

// Properties of the Data Migration service instance
type DataMigrationServiceProperties struct {
	// The public key of the service, used to encrypt secrets sent to the service
	PublicKey *string `pulumi:"publicKey"`
	// The ID of the Microsoft.Network/virtualNetworks/subnets resource to which the service should be joined
	VirtualSubnetId string `pulumi:"virtualSubnetId"`
}

// DataMigrationServicePropertiesInput is an input type that accepts DataMigrationServicePropertiesArgs and DataMigrationServicePropertiesOutput values.
// You can construct a concrete instance of `DataMigrationServicePropertiesInput` via:
//
//          DataMigrationServicePropertiesArgs{...}
type DataMigrationServicePropertiesInput interface {
	pulumi.Input

	ToDataMigrationServicePropertiesOutput() DataMigrationServicePropertiesOutput
	ToDataMigrationServicePropertiesOutputWithContext(context.Context) DataMigrationServicePropertiesOutput
}

// Properties of the Data Migration service instance
type DataMigrationServicePropertiesArgs struct {
	// The public key of the service, used to encrypt secrets sent to the service
	PublicKey pulumi.StringPtrInput `pulumi:"publicKey"`
	// The ID of the Microsoft.Network/virtualNetworks/subnets resource to which the service should be joined
	VirtualSubnetId pulumi.StringInput `pulumi:"virtualSubnetId"`
}

func (DataMigrationServicePropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DataMigrationServiceProperties)(nil)).Elem()
}

func (i DataMigrationServicePropertiesArgs) ToDataMigrationServicePropertiesOutput() DataMigrationServicePropertiesOutput {
	return i.ToDataMigrationServicePropertiesOutputWithContext(context.Background())
}

func (i DataMigrationServicePropertiesArgs) ToDataMigrationServicePropertiesOutputWithContext(ctx context.Context) DataMigrationServicePropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataMigrationServicePropertiesOutput)
}

// Properties of the Data Migration service instance
type DataMigrationServicePropertiesOutput struct{ *pulumi.OutputState }

func (DataMigrationServicePropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataMigrationServiceProperties)(nil)).Elem()
}

func (o DataMigrationServicePropertiesOutput) ToDataMigrationServicePropertiesOutput() DataMigrationServicePropertiesOutput {
	return o
}

func (o DataMigrationServicePropertiesOutput) ToDataMigrationServicePropertiesOutputWithContext(ctx context.Context) DataMigrationServicePropertiesOutput {
	return o
}

// The public key of the service, used to encrypt secrets sent to the service
func (o DataMigrationServicePropertiesOutput) PublicKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DataMigrationServiceProperties) *string { return v.PublicKey }).(pulumi.StringPtrOutput)
}

// The ID of the Microsoft.Network/virtualNetworks/subnets resource to which the service should be joined
func (o DataMigrationServicePropertiesOutput) VirtualSubnetId() pulumi.StringOutput {
	return o.ApplyT(func(v DataMigrationServiceProperties) string { return v.VirtualSubnetId }).(pulumi.StringOutput)
}

// Properties of the Data Migration service instance
type DataMigrationServicePropertiesResponse struct {
	// The resource's provisioning state
	ProvisioningState string `pulumi:"provisioningState"`
	// The public key of the service, used to encrypt secrets sent to the service
	PublicKey *string `pulumi:"publicKey"`
	// The ID of the Microsoft.Network/virtualNetworks/subnets resource to which the service should be joined
	VirtualSubnetId string `pulumi:"virtualSubnetId"`
}

// DataMigrationServicePropertiesResponseInput is an input type that accepts DataMigrationServicePropertiesResponseArgs and DataMigrationServicePropertiesResponseOutput values.
// You can construct a concrete instance of `DataMigrationServicePropertiesResponseInput` via:
//
//          DataMigrationServicePropertiesResponseArgs{...}
type DataMigrationServicePropertiesResponseInput interface {
	pulumi.Input

	ToDataMigrationServicePropertiesResponseOutput() DataMigrationServicePropertiesResponseOutput
	ToDataMigrationServicePropertiesResponseOutputWithContext(context.Context) DataMigrationServicePropertiesResponseOutput
}

// Properties of the Data Migration service instance
type DataMigrationServicePropertiesResponseArgs struct {
	// The resource's provisioning state
	ProvisioningState pulumi.StringInput `pulumi:"provisioningState"`
	// The public key of the service, used to encrypt secrets sent to the service
	PublicKey pulumi.StringPtrInput `pulumi:"publicKey"`
	// The ID of the Microsoft.Network/virtualNetworks/subnets resource to which the service should be joined
	VirtualSubnetId pulumi.StringInput `pulumi:"virtualSubnetId"`
}

func (DataMigrationServicePropertiesResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DataMigrationServicePropertiesResponse)(nil)).Elem()
}

func (i DataMigrationServicePropertiesResponseArgs) ToDataMigrationServicePropertiesResponseOutput() DataMigrationServicePropertiesResponseOutput {
	return i.ToDataMigrationServicePropertiesResponseOutputWithContext(context.Background())
}

func (i DataMigrationServicePropertiesResponseArgs) ToDataMigrationServicePropertiesResponseOutputWithContext(ctx context.Context) DataMigrationServicePropertiesResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataMigrationServicePropertiesResponseOutput)
}

// Properties of the Data Migration service instance
type DataMigrationServicePropertiesResponseOutput struct{ *pulumi.OutputState }

func (DataMigrationServicePropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataMigrationServicePropertiesResponse)(nil)).Elem()
}

func (o DataMigrationServicePropertiesResponseOutput) ToDataMigrationServicePropertiesResponseOutput() DataMigrationServicePropertiesResponseOutput {
	return o
}

func (o DataMigrationServicePropertiesResponseOutput) ToDataMigrationServicePropertiesResponseOutputWithContext(ctx context.Context) DataMigrationServicePropertiesResponseOutput {
	return o
}

// The resource's provisioning state
func (o DataMigrationServicePropertiesResponseOutput) ProvisioningState() pulumi.StringOutput {
	return o.ApplyT(func(v DataMigrationServicePropertiesResponse) string { return v.ProvisioningState }).(pulumi.StringOutput)
}

// The public key of the service, used to encrypt secrets sent to the service
func (o DataMigrationServicePropertiesResponseOutput) PublicKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DataMigrationServicePropertiesResponse) *string { return v.PublicKey }).(pulumi.StringPtrOutput)
}

// The ID of the Microsoft.Network/virtualNetworks/subnets resource to which the service should be joined
func (o DataMigrationServicePropertiesResponseOutput) VirtualSubnetId() pulumi.StringOutput {
	return o.ApplyT(func(v DataMigrationServicePropertiesResponse) string { return v.VirtualSubnetId }).(pulumi.StringOutput)
}

// Project Database Details
type DatabaseInfo struct {
	// Name of the database
	SourceDatabaseName string `pulumi:"sourceDatabaseName"`
}

// DatabaseInfoInput is an input type that accepts DatabaseInfoArgs and DatabaseInfoOutput values.
// You can construct a concrete instance of `DatabaseInfoInput` via:
//
//          DatabaseInfoArgs{...}
type DatabaseInfoInput interface {
	pulumi.Input

	ToDatabaseInfoOutput() DatabaseInfoOutput
	ToDatabaseInfoOutputWithContext(context.Context) DatabaseInfoOutput
}

// Project Database Details
type DatabaseInfoArgs struct {
	// Name of the database
	SourceDatabaseName pulumi.StringInput `pulumi:"sourceDatabaseName"`
}

func (DatabaseInfoArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DatabaseInfo)(nil)).Elem()
}

func (i DatabaseInfoArgs) ToDatabaseInfoOutput() DatabaseInfoOutput {
	return i.ToDatabaseInfoOutputWithContext(context.Background())
}

func (i DatabaseInfoArgs) ToDatabaseInfoOutputWithContext(ctx context.Context) DatabaseInfoOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatabaseInfoOutput)
}

// DatabaseInfoArrayInput is an input type that accepts DatabaseInfoArray and DatabaseInfoArrayOutput values.
// You can construct a concrete instance of `DatabaseInfoArrayInput` via:
//
//          DatabaseInfoArray{ DatabaseInfoArgs{...} }
type DatabaseInfoArrayInput interface {
	pulumi.Input

	ToDatabaseInfoArrayOutput() DatabaseInfoArrayOutput
	ToDatabaseInfoArrayOutputWithContext(context.Context) DatabaseInfoArrayOutput
}

type DatabaseInfoArray []DatabaseInfoInput

func (DatabaseInfoArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DatabaseInfo)(nil)).Elem()
}

func (i DatabaseInfoArray) ToDatabaseInfoArrayOutput() DatabaseInfoArrayOutput {
	return i.ToDatabaseInfoArrayOutputWithContext(context.Background())
}

func (i DatabaseInfoArray) ToDatabaseInfoArrayOutputWithContext(ctx context.Context) DatabaseInfoArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatabaseInfoArrayOutput)
}

// Project Database Details
type DatabaseInfoOutput struct{ *pulumi.OutputState }

func (DatabaseInfoOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DatabaseInfo)(nil)).Elem()
}

func (o DatabaseInfoOutput) ToDatabaseInfoOutput() DatabaseInfoOutput {
	return o
}

func (o DatabaseInfoOutput) ToDatabaseInfoOutputWithContext(ctx context.Context) DatabaseInfoOutput {
	return o
}

// Name of the database
func (o DatabaseInfoOutput) SourceDatabaseName() pulumi.StringOutput {
	return o.ApplyT(func(v DatabaseInfo) string { return v.SourceDatabaseName }).(pulumi.StringOutput)
}

type DatabaseInfoArrayOutput struct{ *pulumi.OutputState }

func (DatabaseInfoArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DatabaseInfo)(nil)).Elem()
}

func (o DatabaseInfoArrayOutput) ToDatabaseInfoArrayOutput() DatabaseInfoArrayOutput {
	return o
}

func (o DatabaseInfoArrayOutput) ToDatabaseInfoArrayOutputWithContext(ctx context.Context) DatabaseInfoArrayOutput {
	return o
}

func (o DatabaseInfoArrayOutput) Index(i pulumi.IntInput) DatabaseInfoOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DatabaseInfo {
		return vs[0].([]DatabaseInfo)[vs[1].(int)]
	}).(DatabaseInfoOutput)
}

// Project Database Details
type DatabaseInfoResponse struct {
	// Name of the database
	SourceDatabaseName string `pulumi:"sourceDatabaseName"`
}

// DatabaseInfoResponseInput is an input type that accepts DatabaseInfoResponseArgs and DatabaseInfoResponseOutput values.
// You can construct a concrete instance of `DatabaseInfoResponseInput` via:
//
//          DatabaseInfoResponseArgs{...}
type DatabaseInfoResponseInput interface {
	pulumi.Input

	ToDatabaseInfoResponseOutput() DatabaseInfoResponseOutput
	ToDatabaseInfoResponseOutputWithContext(context.Context) DatabaseInfoResponseOutput
}

// Project Database Details
type DatabaseInfoResponseArgs struct {
	// Name of the database
	SourceDatabaseName pulumi.StringInput `pulumi:"sourceDatabaseName"`
}

func (DatabaseInfoResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DatabaseInfoResponse)(nil)).Elem()
}

func (i DatabaseInfoResponseArgs) ToDatabaseInfoResponseOutput() DatabaseInfoResponseOutput {
	return i.ToDatabaseInfoResponseOutputWithContext(context.Background())
}

func (i DatabaseInfoResponseArgs) ToDatabaseInfoResponseOutputWithContext(ctx context.Context) DatabaseInfoResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatabaseInfoResponseOutput)
}

// DatabaseInfoResponseArrayInput is an input type that accepts DatabaseInfoResponseArray and DatabaseInfoResponseArrayOutput values.
// You can construct a concrete instance of `DatabaseInfoResponseArrayInput` via:
//
//          DatabaseInfoResponseArray{ DatabaseInfoResponseArgs{...} }
type DatabaseInfoResponseArrayInput interface {
	pulumi.Input

	ToDatabaseInfoResponseArrayOutput() DatabaseInfoResponseArrayOutput
	ToDatabaseInfoResponseArrayOutputWithContext(context.Context) DatabaseInfoResponseArrayOutput
}

type DatabaseInfoResponseArray []DatabaseInfoResponseInput

func (DatabaseInfoResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DatabaseInfoResponse)(nil)).Elem()
}

func (i DatabaseInfoResponseArray) ToDatabaseInfoResponseArrayOutput() DatabaseInfoResponseArrayOutput {
	return i.ToDatabaseInfoResponseArrayOutputWithContext(context.Background())
}

func (i DatabaseInfoResponseArray) ToDatabaseInfoResponseArrayOutputWithContext(ctx context.Context) DatabaseInfoResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatabaseInfoResponseArrayOutput)
}

// Project Database Details
type DatabaseInfoResponseOutput struct{ *pulumi.OutputState }

func (DatabaseInfoResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DatabaseInfoResponse)(nil)).Elem()
}

func (o DatabaseInfoResponseOutput) ToDatabaseInfoResponseOutput() DatabaseInfoResponseOutput {
	return o
}

func (o DatabaseInfoResponseOutput) ToDatabaseInfoResponseOutputWithContext(ctx context.Context) DatabaseInfoResponseOutput {
	return o
}

// Name of the database
func (o DatabaseInfoResponseOutput) SourceDatabaseName() pulumi.StringOutput {
	return o.ApplyT(func(v DatabaseInfoResponse) string { return v.SourceDatabaseName }).(pulumi.StringOutput)
}

type DatabaseInfoResponseArrayOutput struct{ *pulumi.OutputState }

func (DatabaseInfoResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DatabaseInfoResponse)(nil)).Elem()
}

func (o DatabaseInfoResponseArrayOutput) ToDatabaseInfoResponseArrayOutput() DatabaseInfoResponseArrayOutput {
	return o
}

func (o DatabaseInfoResponseArrayOutput) ToDatabaseInfoResponseArrayOutputWithContext(ctx context.Context) DatabaseInfoResponseArrayOutput {
	return o
}

func (o DatabaseInfoResponseArrayOutput) Index(i pulumi.IntInput) DatabaseInfoResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DatabaseInfoResponse {
		return vs[0].([]DatabaseInfoResponse)[vs[1].(int)]
	}).(DatabaseInfoResponseOutput)
}

// Error information in OData format.
type ODataError struct {
}

// ODataErrorInput is an input type that accepts ODataErrorArgs and ODataErrorOutput values.
// You can construct a concrete instance of `ODataErrorInput` via:
//
//          ODataErrorArgs{...}
type ODataErrorInput interface {
	pulumi.Input

	ToODataErrorOutput() ODataErrorOutput
	ToODataErrorOutputWithContext(context.Context) ODataErrorOutput
}

// Error information in OData format.
type ODataErrorArgs struct {
}

func (ODataErrorArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ODataError)(nil)).Elem()
}

func (i ODataErrorArgs) ToODataErrorOutput() ODataErrorOutput {
	return i.ToODataErrorOutputWithContext(context.Background())
}

func (i ODataErrorArgs) ToODataErrorOutputWithContext(ctx context.Context) ODataErrorOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ODataErrorOutput)
}

// Error information in OData format.
type ODataErrorOutput struct{ *pulumi.OutputState }

func (ODataErrorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ODataError)(nil)).Elem()
}

func (o ODataErrorOutput) ToODataErrorOutput() ODataErrorOutput {
	return o
}

func (o ODataErrorOutput) ToODataErrorOutputWithContext(ctx context.Context) ODataErrorOutput {
	return o
}

// Error information in OData format.
type ODataErrorResponse struct {
	// The machine-readable description of the error, such as 'InvalidRequest' or 'InternalServerError'
	Code string `pulumi:"code"`
	// Inner errors that caused this error
	Details []ODataErrorResponse `pulumi:"details"`
	// The human-readable description of the error
	Message string `pulumi:"message"`
}

// ODataErrorResponseInput is an input type that accepts ODataErrorResponseArgs and ODataErrorResponseOutput values.
// You can construct a concrete instance of `ODataErrorResponseInput` via:
//
//          ODataErrorResponseArgs{...}
type ODataErrorResponseInput interface {
	pulumi.Input

	ToODataErrorResponseOutput() ODataErrorResponseOutput
	ToODataErrorResponseOutputWithContext(context.Context) ODataErrorResponseOutput
}

// Error information in OData format.
type ODataErrorResponseArgs struct {
	// The machine-readable description of the error, such as 'InvalidRequest' or 'InternalServerError'
	Code pulumi.StringInput `pulumi:"code"`
	// Inner errors that caused this error
	Details ODataErrorResponseArrayInput `pulumi:"details"`
	// The human-readable description of the error
	Message pulumi.StringInput `pulumi:"message"`
}

func (ODataErrorResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ODataErrorResponse)(nil)).Elem()
}

func (i ODataErrorResponseArgs) ToODataErrorResponseOutput() ODataErrorResponseOutput {
	return i.ToODataErrorResponseOutputWithContext(context.Background())
}

func (i ODataErrorResponseArgs) ToODataErrorResponseOutputWithContext(ctx context.Context) ODataErrorResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ODataErrorResponseOutput)
}

// ODataErrorResponseArrayInput is an input type that accepts ODataErrorResponseArray and ODataErrorResponseArrayOutput values.
// You can construct a concrete instance of `ODataErrorResponseArrayInput` via:
//
//          ODataErrorResponseArray{ ODataErrorResponseArgs{...} }
type ODataErrorResponseArrayInput interface {
	pulumi.Input

	ToODataErrorResponseArrayOutput() ODataErrorResponseArrayOutput
	ToODataErrorResponseArrayOutputWithContext(context.Context) ODataErrorResponseArrayOutput
}

type ODataErrorResponseArray []ODataErrorResponseInput

func (ODataErrorResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ODataErrorResponse)(nil)).Elem()
}

func (i ODataErrorResponseArray) ToODataErrorResponseArrayOutput() ODataErrorResponseArrayOutput {
	return i.ToODataErrorResponseArrayOutputWithContext(context.Background())
}

func (i ODataErrorResponseArray) ToODataErrorResponseArrayOutputWithContext(ctx context.Context) ODataErrorResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ODataErrorResponseArrayOutput)
}

// Error information in OData format.
type ODataErrorResponseOutput struct{ *pulumi.OutputState }

func (ODataErrorResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ODataErrorResponse)(nil)).Elem()
}

func (o ODataErrorResponseOutput) ToODataErrorResponseOutput() ODataErrorResponseOutput {
	return o
}

func (o ODataErrorResponseOutput) ToODataErrorResponseOutputWithContext(ctx context.Context) ODataErrorResponseOutput {
	return o
}

// The machine-readable description of the error, such as 'InvalidRequest' or 'InternalServerError'
func (o ODataErrorResponseOutput) Code() pulumi.StringOutput {
	return o.ApplyT(func(v ODataErrorResponse) string { return v.Code }).(pulumi.StringOutput)
}

// Inner errors that caused this error
func (o ODataErrorResponseOutput) Details() ODataErrorResponseArrayOutput {
	return o.ApplyT(func(v ODataErrorResponse) []ODataErrorResponse { return v.Details }).(ODataErrorResponseArrayOutput)
}

// The human-readable description of the error
func (o ODataErrorResponseOutput) Message() pulumi.StringOutput {
	return o.ApplyT(func(v ODataErrorResponse) string { return v.Message }).(pulumi.StringOutput)
}

type ODataErrorResponseArrayOutput struct{ *pulumi.OutputState }

func (ODataErrorResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ODataErrorResponse)(nil)).Elem()
}

func (o ODataErrorResponseArrayOutput) ToODataErrorResponseArrayOutput() ODataErrorResponseArrayOutput {
	return o
}

func (o ODataErrorResponseArrayOutput) ToODataErrorResponseArrayOutputWithContext(ctx context.Context) ODataErrorResponseArrayOutput {
	return o
}

func (o ODataErrorResponseArrayOutput) Index(i pulumi.IntInput) ODataErrorResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ODataErrorResponse {
		return vs[0].([]ODataErrorResponse)[vs[1].(int)]
	}).(ODataErrorResponseOutput)
}

// Project-specific properties
type ProjectProperties struct {
	// List of DatabaseInfo
	DatabasesInfo []DatabaseInfo `pulumi:"databasesInfo"`
	// Information for connecting to source
	SourceConnectionInfo *ConnectionInfo `pulumi:"sourceConnectionInfo"`
	// Source platform for the project
	SourcePlatform string `pulumi:"sourcePlatform"`
	// Information for connecting to target
	TargetConnectionInfo *ConnectionInfo `pulumi:"targetConnectionInfo"`
	// Target platform for the project
	TargetPlatform string `pulumi:"targetPlatform"`
}

// ProjectPropertiesInput is an input type that accepts ProjectPropertiesArgs and ProjectPropertiesOutput values.
// You can construct a concrete instance of `ProjectPropertiesInput` via:
//
//          ProjectPropertiesArgs{...}
type ProjectPropertiesInput interface {
	pulumi.Input

	ToProjectPropertiesOutput() ProjectPropertiesOutput
	ToProjectPropertiesOutputWithContext(context.Context) ProjectPropertiesOutput
}

// Project-specific properties
type ProjectPropertiesArgs struct {
	// List of DatabaseInfo
	DatabasesInfo DatabaseInfoArrayInput `pulumi:"databasesInfo"`
	// Information for connecting to source
	SourceConnectionInfo ConnectionInfoPtrInput `pulumi:"sourceConnectionInfo"`
	// Source platform for the project
	SourcePlatform pulumi.StringInput `pulumi:"sourcePlatform"`
	// Information for connecting to target
	TargetConnectionInfo ConnectionInfoPtrInput `pulumi:"targetConnectionInfo"`
	// Target platform for the project
	TargetPlatform pulumi.StringInput `pulumi:"targetPlatform"`
}

func (ProjectPropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectProperties)(nil)).Elem()
}

func (i ProjectPropertiesArgs) ToProjectPropertiesOutput() ProjectPropertiesOutput {
	return i.ToProjectPropertiesOutputWithContext(context.Background())
}

func (i ProjectPropertiesArgs) ToProjectPropertiesOutputWithContext(ctx context.Context) ProjectPropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectPropertiesOutput)
}

// Project-specific properties
type ProjectPropertiesOutput struct{ *pulumi.OutputState }

func (ProjectPropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectProperties)(nil)).Elem()
}

func (o ProjectPropertiesOutput) ToProjectPropertiesOutput() ProjectPropertiesOutput {
	return o
}

func (o ProjectPropertiesOutput) ToProjectPropertiesOutputWithContext(ctx context.Context) ProjectPropertiesOutput {
	return o
}

// List of DatabaseInfo
func (o ProjectPropertiesOutput) DatabasesInfo() DatabaseInfoArrayOutput {
	return o.ApplyT(func(v ProjectProperties) []DatabaseInfo { return v.DatabasesInfo }).(DatabaseInfoArrayOutput)
}

// Information for connecting to source
func (o ProjectPropertiesOutput) SourceConnectionInfo() ConnectionInfoPtrOutput {
	return o.ApplyT(func(v ProjectProperties) *ConnectionInfo { return v.SourceConnectionInfo }).(ConnectionInfoPtrOutput)
}

// Source platform for the project
func (o ProjectPropertiesOutput) SourcePlatform() pulumi.StringOutput {
	return o.ApplyT(func(v ProjectProperties) string { return v.SourcePlatform }).(pulumi.StringOutput)
}

// Information for connecting to target
func (o ProjectPropertiesOutput) TargetConnectionInfo() ConnectionInfoPtrOutput {
	return o.ApplyT(func(v ProjectProperties) *ConnectionInfo { return v.TargetConnectionInfo }).(ConnectionInfoPtrOutput)
}

// Target platform for the project
func (o ProjectPropertiesOutput) TargetPlatform() pulumi.StringOutput {
	return o.ApplyT(func(v ProjectProperties) string { return v.TargetPlatform }).(pulumi.StringOutput)
}

// Project-specific properties
type ProjectPropertiesResponse struct {
	// UTC Date and time when project was created
	CreationTime string `pulumi:"creationTime"`
	// List of DatabaseInfo
	DatabasesInfo []DatabaseInfoResponse `pulumi:"databasesInfo"`
	// The project's provisioning state
	ProvisioningState string `pulumi:"provisioningState"`
	// Information for connecting to source
	SourceConnectionInfo *ConnectionInfoResponse `pulumi:"sourceConnectionInfo"`
	// Source platform for the project
	SourcePlatform string `pulumi:"sourcePlatform"`
	// Information for connecting to target
	TargetConnectionInfo *ConnectionInfoResponse `pulumi:"targetConnectionInfo"`
	// Target platform for the project
	TargetPlatform string `pulumi:"targetPlatform"`
}

// ProjectPropertiesResponseInput is an input type that accepts ProjectPropertiesResponseArgs and ProjectPropertiesResponseOutput values.
// You can construct a concrete instance of `ProjectPropertiesResponseInput` via:
//
//          ProjectPropertiesResponseArgs{...}
type ProjectPropertiesResponseInput interface {
	pulumi.Input

	ToProjectPropertiesResponseOutput() ProjectPropertiesResponseOutput
	ToProjectPropertiesResponseOutputWithContext(context.Context) ProjectPropertiesResponseOutput
}

// Project-specific properties
type ProjectPropertiesResponseArgs struct {
	// UTC Date and time when project was created
	CreationTime pulumi.StringInput `pulumi:"creationTime"`
	// List of DatabaseInfo
	DatabasesInfo DatabaseInfoResponseArrayInput `pulumi:"databasesInfo"`
	// The project's provisioning state
	ProvisioningState pulumi.StringInput `pulumi:"provisioningState"`
	// Information for connecting to source
	SourceConnectionInfo ConnectionInfoResponsePtrInput `pulumi:"sourceConnectionInfo"`
	// Source platform for the project
	SourcePlatform pulumi.StringInput `pulumi:"sourcePlatform"`
	// Information for connecting to target
	TargetConnectionInfo ConnectionInfoResponsePtrInput `pulumi:"targetConnectionInfo"`
	// Target platform for the project
	TargetPlatform pulumi.StringInput `pulumi:"targetPlatform"`
}

func (ProjectPropertiesResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectPropertiesResponse)(nil)).Elem()
}

func (i ProjectPropertiesResponseArgs) ToProjectPropertiesResponseOutput() ProjectPropertiesResponseOutput {
	return i.ToProjectPropertiesResponseOutputWithContext(context.Background())
}

func (i ProjectPropertiesResponseArgs) ToProjectPropertiesResponseOutputWithContext(ctx context.Context) ProjectPropertiesResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectPropertiesResponseOutput)
}

// Project-specific properties
type ProjectPropertiesResponseOutput struct{ *pulumi.OutputState }

func (ProjectPropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectPropertiesResponse)(nil)).Elem()
}

func (o ProjectPropertiesResponseOutput) ToProjectPropertiesResponseOutput() ProjectPropertiesResponseOutput {
	return o
}

func (o ProjectPropertiesResponseOutput) ToProjectPropertiesResponseOutputWithContext(ctx context.Context) ProjectPropertiesResponseOutput {
	return o
}

// UTC Date and time when project was created
func (o ProjectPropertiesResponseOutput) CreationTime() pulumi.StringOutput {
	return o.ApplyT(func(v ProjectPropertiesResponse) string { return v.CreationTime }).(pulumi.StringOutput)
}

// List of DatabaseInfo
func (o ProjectPropertiesResponseOutput) DatabasesInfo() DatabaseInfoResponseArrayOutput {
	return o.ApplyT(func(v ProjectPropertiesResponse) []DatabaseInfoResponse { return v.DatabasesInfo }).(DatabaseInfoResponseArrayOutput)
}

// The project's provisioning state
func (o ProjectPropertiesResponseOutput) ProvisioningState() pulumi.StringOutput {
	return o.ApplyT(func(v ProjectPropertiesResponse) string { return v.ProvisioningState }).(pulumi.StringOutput)
}

// Information for connecting to source
func (o ProjectPropertiesResponseOutput) SourceConnectionInfo() ConnectionInfoResponsePtrOutput {
	return o.ApplyT(func(v ProjectPropertiesResponse) *ConnectionInfoResponse { return v.SourceConnectionInfo }).(ConnectionInfoResponsePtrOutput)
}

// Source platform for the project
func (o ProjectPropertiesResponseOutput) SourcePlatform() pulumi.StringOutput {
	return o.ApplyT(func(v ProjectPropertiesResponse) string { return v.SourcePlatform }).(pulumi.StringOutput)
}

// Information for connecting to target
func (o ProjectPropertiesResponseOutput) TargetConnectionInfo() ConnectionInfoResponsePtrOutput {
	return o.ApplyT(func(v ProjectPropertiesResponse) *ConnectionInfoResponse { return v.TargetConnectionInfo }).(ConnectionInfoResponsePtrOutput)
}

// Target platform for the project
func (o ProjectPropertiesResponseOutput) TargetPlatform() pulumi.StringOutput {
	return o.ApplyT(func(v ProjectPropertiesResponse) string { return v.TargetPlatform }).(pulumi.StringOutput)
}

// Base class for all types of DMS task properties. If task is not supported by current client, this object is returned.
type ProjectTaskProperties struct {
	// Task type.
	TaskType string `pulumi:"taskType"`
}

// ProjectTaskPropertiesInput is an input type that accepts ProjectTaskPropertiesArgs and ProjectTaskPropertiesOutput values.
// You can construct a concrete instance of `ProjectTaskPropertiesInput` via:
//
//          ProjectTaskPropertiesArgs{...}
type ProjectTaskPropertiesInput interface {
	pulumi.Input

	ToProjectTaskPropertiesOutput() ProjectTaskPropertiesOutput
	ToProjectTaskPropertiesOutputWithContext(context.Context) ProjectTaskPropertiesOutput
}

// Base class for all types of DMS task properties. If task is not supported by current client, this object is returned.
type ProjectTaskPropertiesArgs struct {
	// Task type.
	TaskType pulumi.StringInput `pulumi:"taskType"`
}

func (ProjectTaskPropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectTaskProperties)(nil)).Elem()
}

func (i ProjectTaskPropertiesArgs) ToProjectTaskPropertiesOutput() ProjectTaskPropertiesOutput {
	return i.ToProjectTaskPropertiesOutputWithContext(context.Background())
}

func (i ProjectTaskPropertiesArgs) ToProjectTaskPropertiesOutputWithContext(ctx context.Context) ProjectTaskPropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectTaskPropertiesOutput)
}

// Base class for all types of DMS task properties. If task is not supported by current client, this object is returned.
type ProjectTaskPropertiesOutput struct{ *pulumi.OutputState }

func (ProjectTaskPropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectTaskProperties)(nil)).Elem()
}

func (o ProjectTaskPropertiesOutput) ToProjectTaskPropertiesOutput() ProjectTaskPropertiesOutput {
	return o
}

func (o ProjectTaskPropertiesOutput) ToProjectTaskPropertiesOutputWithContext(ctx context.Context) ProjectTaskPropertiesOutput {
	return o
}

// Task type.
func (o ProjectTaskPropertiesOutput) TaskType() pulumi.StringOutput {
	return o.ApplyT(func(v ProjectTaskProperties) string { return v.TaskType }).(pulumi.StringOutput)
}

// Base class for all types of DMS task properties. If task is not supported by current client, this object is returned.
type ProjectTaskPropertiesResponse struct {
	// Array of command properties.
	Commands []CommandPropertiesResponse `pulumi:"commands"`
	// Array of errors. This is ignored if submitted.
	Errors []ODataErrorResponse `pulumi:"errors"`
	// The state of the task. This is ignored if submitted.
	State string `pulumi:"state"`
	// Task type.
	TaskType string `pulumi:"taskType"`
}

// ProjectTaskPropertiesResponseInput is an input type that accepts ProjectTaskPropertiesResponseArgs and ProjectTaskPropertiesResponseOutput values.
// You can construct a concrete instance of `ProjectTaskPropertiesResponseInput` via:
//
//          ProjectTaskPropertiesResponseArgs{...}
type ProjectTaskPropertiesResponseInput interface {
	pulumi.Input

	ToProjectTaskPropertiesResponseOutput() ProjectTaskPropertiesResponseOutput
	ToProjectTaskPropertiesResponseOutputWithContext(context.Context) ProjectTaskPropertiesResponseOutput
}

// Base class for all types of DMS task properties. If task is not supported by current client, this object is returned.
type ProjectTaskPropertiesResponseArgs struct {
	// Array of command properties.
	Commands CommandPropertiesResponseArrayInput `pulumi:"commands"`
	// Array of errors. This is ignored if submitted.
	Errors ODataErrorResponseArrayInput `pulumi:"errors"`
	// The state of the task. This is ignored if submitted.
	State pulumi.StringInput `pulumi:"state"`
	// Task type.
	TaskType pulumi.StringInput `pulumi:"taskType"`
}

func (ProjectTaskPropertiesResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectTaskPropertiesResponse)(nil)).Elem()
}

func (i ProjectTaskPropertiesResponseArgs) ToProjectTaskPropertiesResponseOutput() ProjectTaskPropertiesResponseOutput {
	return i.ToProjectTaskPropertiesResponseOutputWithContext(context.Background())
}

func (i ProjectTaskPropertiesResponseArgs) ToProjectTaskPropertiesResponseOutputWithContext(ctx context.Context) ProjectTaskPropertiesResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectTaskPropertiesResponseOutput)
}

// Base class for all types of DMS task properties. If task is not supported by current client, this object is returned.
type ProjectTaskPropertiesResponseOutput struct{ *pulumi.OutputState }

func (ProjectTaskPropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectTaskPropertiesResponse)(nil)).Elem()
}

func (o ProjectTaskPropertiesResponseOutput) ToProjectTaskPropertiesResponseOutput() ProjectTaskPropertiesResponseOutput {
	return o
}

func (o ProjectTaskPropertiesResponseOutput) ToProjectTaskPropertiesResponseOutputWithContext(ctx context.Context) ProjectTaskPropertiesResponseOutput {
	return o
}

// Array of command properties.
func (o ProjectTaskPropertiesResponseOutput) Commands() CommandPropertiesResponseArrayOutput {
	return o.ApplyT(func(v ProjectTaskPropertiesResponse) []CommandPropertiesResponse { return v.Commands }).(CommandPropertiesResponseArrayOutput)
}

// Array of errors. This is ignored if submitted.
func (o ProjectTaskPropertiesResponseOutput) Errors() ODataErrorResponseArrayOutput {
	return o.ApplyT(func(v ProjectTaskPropertiesResponse) []ODataErrorResponse { return v.Errors }).(ODataErrorResponseArrayOutput)
}

// The state of the task. This is ignored if submitted.
func (o ProjectTaskPropertiesResponseOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v ProjectTaskPropertiesResponse) string { return v.State }).(pulumi.StringOutput)
}

// Task type.
func (o ProjectTaskPropertiesResponseOutput) TaskType() pulumi.StringOutput {
	return o.ApplyT(func(v ProjectTaskPropertiesResponse) string { return v.TaskType }).(pulumi.StringOutput)
}

// An Azure SKU instance
type ServiceSku struct {
	// The capacity of the SKU, if it supports scaling
	Capacity *int `pulumi:"capacity"`
	// The SKU family, used when the service has multiple performance classes within a tier, such as 'A', 'D', etc. for virtual machines
	Family *string `pulumi:"family"`
	// The unique name of the SKU, such as 'P3'
	Name *string `pulumi:"name"`
	// The size of the SKU, used when the name alone does not denote a service size or when a SKU has multiple performance classes within a family, e.g. 'A1' for virtual machines
	Size *string `pulumi:"size"`
	// The tier of the SKU, such as 'Free', 'Basic', 'Standard', or 'Premium'
	Tier *string `pulumi:"tier"`
}

// ServiceSkuInput is an input type that accepts ServiceSkuArgs and ServiceSkuOutput values.
// You can construct a concrete instance of `ServiceSkuInput` via:
//
//          ServiceSkuArgs{...}
type ServiceSkuInput interface {
	pulumi.Input

	ToServiceSkuOutput() ServiceSkuOutput
	ToServiceSkuOutputWithContext(context.Context) ServiceSkuOutput
}

// An Azure SKU instance
type ServiceSkuArgs struct {
	// The capacity of the SKU, if it supports scaling
	Capacity pulumi.IntPtrInput `pulumi:"capacity"`
	// The SKU family, used when the service has multiple performance classes within a tier, such as 'A', 'D', etc. for virtual machines
	Family pulumi.StringPtrInput `pulumi:"family"`
	// The unique name of the SKU, such as 'P3'
	Name pulumi.StringPtrInput `pulumi:"name"`
	// The size of the SKU, used when the name alone does not denote a service size or when a SKU has multiple performance classes within a family, e.g. 'A1' for virtual machines
	Size pulumi.StringPtrInput `pulumi:"size"`
	// The tier of the SKU, such as 'Free', 'Basic', 'Standard', or 'Premium'
	Tier pulumi.StringPtrInput `pulumi:"tier"`
}

func (ServiceSkuArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceSku)(nil)).Elem()
}

func (i ServiceSkuArgs) ToServiceSkuOutput() ServiceSkuOutput {
	return i.ToServiceSkuOutputWithContext(context.Background())
}

func (i ServiceSkuArgs) ToServiceSkuOutputWithContext(ctx context.Context) ServiceSkuOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceSkuOutput)
}

// An Azure SKU instance
type ServiceSkuOutput struct{ *pulumi.OutputState }

func (ServiceSkuOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceSku)(nil)).Elem()
}

func (o ServiceSkuOutput) ToServiceSkuOutput() ServiceSkuOutput {
	return o
}

func (o ServiceSkuOutput) ToServiceSkuOutputWithContext(ctx context.Context) ServiceSkuOutput {
	return o
}

// The capacity of the SKU, if it supports scaling
func (o ServiceSkuOutput) Capacity() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ServiceSku) *int { return v.Capacity }).(pulumi.IntPtrOutput)
}

// The SKU family, used when the service has multiple performance classes within a tier, such as 'A', 'D', etc. for virtual machines
func (o ServiceSkuOutput) Family() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceSku) *string { return v.Family }).(pulumi.StringPtrOutput)
}

// The unique name of the SKU, such as 'P3'
func (o ServiceSkuOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceSku) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The size of the SKU, used when the name alone does not denote a service size or when a SKU has multiple performance classes within a family, e.g. 'A1' for virtual machines
func (o ServiceSkuOutput) Size() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceSku) *string { return v.Size }).(pulumi.StringPtrOutput)
}

// The tier of the SKU, such as 'Free', 'Basic', 'Standard', or 'Premium'
func (o ServiceSkuOutput) Tier() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceSku) *string { return v.Tier }).(pulumi.StringPtrOutput)
}

// An Azure SKU instance
type ServiceSkuResponse struct {
	// The capacity of the SKU, if it supports scaling
	Capacity *int `pulumi:"capacity"`
	// The SKU family, used when the service has multiple performance classes within a tier, such as 'A', 'D', etc. for virtual machines
	Family *string `pulumi:"family"`
	// The unique name of the SKU, such as 'P3'
	Name *string `pulumi:"name"`
	// The size of the SKU, used when the name alone does not denote a service size or when a SKU has multiple performance classes within a family, e.g. 'A1' for virtual machines
	Size *string `pulumi:"size"`
	// The tier of the SKU, such as 'Free', 'Basic', 'Standard', or 'Premium'
	Tier *string `pulumi:"tier"`
}

// ServiceSkuResponseInput is an input type that accepts ServiceSkuResponseArgs and ServiceSkuResponseOutput values.
// You can construct a concrete instance of `ServiceSkuResponseInput` via:
//
//          ServiceSkuResponseArgs{...}
type ServiceSkuResponseInput interface {
	pulumi.Input

	ToServiceSkuResponseOutput() ServiceSkuResponseOutput
	ToServiceSkuResponseOutputWithContext(context.Context) ServiceSkuResponseOutput
}

// An Azure SKU instance
type ServiceSkuResponseArgs struct {
	// The capacity of the SKU, if it supports scaling
	Capacity pulumi.IntPtrInput `pulumi:"capacity"`
	// The SKU family, used when the service has multiple performance classes within a tier, such as 'A', 'D', etc. for virtual machines
	Family pulumi.StringPtrInput `pulumi:"family"`
	// The unique name of the SKU, such as 'P3'
	Name pulumi.StringPtrInput `pulumi:"name"`
	// The size of the SKU, used when the name alone does not denote a service size or when a SKU has multiple performance classes within a family, e.g. 'A1' for virtual machines
	Size pulumi.StringPtrInput `pulumi:"size"`
	// The tier of the SKU, such as 'Free', 'Basic', 'Standard', or 'Premium'
	Tier pulumi.StringPtrInput `pulumi:"tier"`
}

func (ServiceSkuResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceSkuResponse)(nil)).Elem()
}

func (i ServiceSkuResponseArgs) ToServiceSkuResponseOutput() ServiceSkuResponseOutput {
	return i.ToServiceSkuResponseOutputWithContext(context.Background())
}

func (i ServiceSkuResponseArgs) ToServiceSkuResponseOutputWithContext(ctx context.Context) ServiceSkuResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceSkuResponseOutput)
}

// An Azure SKU instance
type ServiceSkuResponseOutput struct{ *pulumi.OutputState }

func (ServiceSkuResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceSkuResponse)(nil)).Elem()
}

func (o ServiceSkuResponseOutput) ToServiceSkuResponseOutput() ServiceSkuResponseOutput {
	return o
}

func (o ServiceSkuResponseOutput) ToServiceSkuResponseOutputWithContext(ctx context.Context) ServiceSkuResponseOutput {
	return o
}

// The capacity of the SKU, if it supports scaling
func (o ServiceSkuResponseOutput) Capacity() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ServiceSkuResponse) *int { return v.Capacity }).(pulumi.IntPtrOutput)
}

// The SKU family, used when the service has multiple performance classes within a tier, such as 'A', 'D', etc. for virtual machines
func (o ServiceSkuResponseOutput) Family() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceSkuResponse) *string { return v.Family }).(pulumi.StringPtrOutput)
}

// The unique name of the SKU, such as 'P3'
func (o ServiceSkuResponseOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceSkuResponse) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The size of the SKU, used when the name alone does not denote a service size or when a SKU has multiple performance classes within a family, e.g. 'A1' for virtual machines
func (o ServiceSkuResponseOutput) Size() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceSkuResponse) *string { return v.Size }).(pulumi.StringPtrOutput)
}

// The tier of the SKU, such as 'Free', 'Basic', 'Standard', or 'Premium'
func (o ServiceSkuResponseOutput) Tier() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceSkuResponse) *string { return v.Tier }).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(CommandPropertiesOutput{})
	pulumi.RegisterOutputType(CommandPropertiesResponseOutput{})
	pulumi.RegisterOutputType(CommandPropertiesResponseArrayOutput{})
	pulumi.RegisterOutputType(ConnectionInfoOutput{})
	pulumi.RegisterOutputType(ConnectionInfoPtrOutput{})
	pulumi.RegisterOutputType(ConnectionInfoResponseOutput{})
	pulumi.RegisterOutputType(ConnectionInfoResponsePtrOutput{})
	pulumi.RegisterOutputType(DataMigrationServicePropertiesOutput{})
	pulumi.RegisterOutputType(DataMigrationServicePropertiesResponseOutput{})
	pulumi.RegisterOutputType(DatabaseInfoOutput{})
	pulumi.RegisterOutputType(DatabaseInfoArrayOutput{})
	pulumi.RegisterOutputType(DatabaseInfoResponseOutput{})
	pulumi.RegisterOutputType(DatabaseInfoResponseArrayOutput{})
	pulumi.RegisterOutputType(ODataErrorOutput{})
	pulumi.RegisterOutputType(ODataErrorResponseOutput{})
	pulumi.RegisterOutputType(ODataErrorResponseArrayOutput{})
	pulumi.RegisterOutputType(ProjectPropertiesOutput{})
	pulumi.RegisterOutputType(ProjectPropertiesResponseOutput{})
	pulumi.RegisterOutputType(ProjectTaskPropertiesOutput{})
	pulumi.RegisterOutputType(ProjectTaskPropertiesResponseOutput{})
	pulumi.RegisterOutputType(ServiceSkuOutput{})
	pulumi.RegisterOutputType(ServiceSkuResponseOutput{})
}
