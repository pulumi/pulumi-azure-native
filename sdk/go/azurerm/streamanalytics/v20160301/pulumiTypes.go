// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v20160301

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// Condition applicable to the resource, or to the job overall, that warrant customer attention.
type DiagnosticConditionResponse struct {
	// The opaque diagnostic code.
	Code string `pulumi:"code"`
	// The human-readable message describing the condition in detail. Localized in the Accept-Language of the client request.
	Message string `pulumi:"message"`
	// The UTC timestamp of when the condition started. Customers should be able to find a corresponding event in the ops log around this time.
	Since string `pulumi:"since"`
}

// DiagnosticConditionResponseInput is an input type that accepts DiagnosticConditionResponseArgs and DiagnosticConditionResponseOutput values.
// You can construct a concrete instance of `DiagnosticConditionResponseInput` via:
//
//          DiagnosticConditionResponseArgs{...}
type DiagnosticConditionResponseInput interface {
	pulumi.Input

	ToDiagnosticConditionResponseOutput() DiagnosticConditionResponseOutput
	ToDiagnosticConditionResponseOutputWithContext(context.Context) DiagnosticConditionResponseOutput
}

// Condition applicable to the resource, or to the job overall, that warrant customer attention.
type DiagnosticConditionResponseArgs struct {
	// The opaque diagnostic code.
	Code pulumi.StringInput `pulumi:"code"`
	// The human-readable message describing the condition in detail. Localized in the Accept-Language of the client request.
	Message pulumi.StringInput `pulumi:"message"`
	// The UTC timestamp of when the condition started. Customers should be able to find a corresponding event in the ops log around this time.
	Since pulumi.StringInput `pulumi:"since"`
}

func (DiagnosticConditionResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DiagnosticConditionResponse)(nil)).Elem()
}

func (i DiagnosticConditionResponseArgs) ToDiagnosticConditionResponseOutput() DiagnosticConditionResponseOutput {
	return i.ToDiagnosticConditionResponseOutputWithContext(context.Background())
}

func (i DiagnosticConditionResponseArgs) ToDiagnosticConditionResponseOutputWithContext(ctx context.Context) DiagnosticConditionResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DiagnosticConditionResponseOutput)
}

// DiagnosticConditionResponseArrayInput is an input type that accepts DiagnosticConditionResponseArray and DiagnosticConditionResponseArrayOutput values.
// You can construct a concrete instance of `DiagnosticConditionResponseArrayInput` via:
//
//          DiagnosticConditionResponseArray{ DiagnosticConditionResponseArgs{...} }
type DiagnosticConditionResponseArrayInput interface {
	pulumi.Input

	ToDiagnosticConditionResponseArrayOutput() DiagnosticConditionResponseArrayOutput
	ToDiagnosticConditionResponseArrayOutputWithContext(context.Context) DiagnosticConditionResponseArrayOutput
}

type DiagnosticConditionResponseArray []DiagnosticConditionResponseInput

func (DiagnosticConditionResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DiagnosticConditionResponse)(nil)).Elem()
}

func (i DiagnosticConditionResponseArray) ToDiagnosticConditionResponseArrayOutput() DiagnosticConditionResponseArrayOutput {
	return i.ToDiagnosticConditionResponseArrayOutputWithContext(context.Background())
}

func (i DiagnosticConditionResponseArray) ToDiagnosticConditionResponseArrayOutputWithContext(ctx context.Context) DiagnosticConditionResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DiagnosticConditionResponseArrayOutput)
}

// Condition applicable to the resource, or to the job overall, that warrant customer attention.
type DiagnosticConditionResponseOutput struct{ *pulumi.OutputState }

func (DiagnosticConditionResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DiagnosticConditionResponse)(nil)).Elem()
}

func (o DiagnosticConditionResponseOutput) ToDiagnosticConditionResponseOutput() DiagnosticConditionResponseOutput {
	return o
}

func (o DiagnosticConditionResponseOutput) ToDiagnosticConditionResponseOutputWithContext(ctx context.Context) DiagnosticConditionResponseOutput {
	return o
}

// The opaque diagnostic code.
func (o DiagnosticConditionResponseOutput) Code() pulumi.StringOutput {
	return o.ApplyT(func(v DiagnosticConditionResponse) string { return v.Code }).(pulumi.StringOutput)
}

// The human-readable message describing the condition in detail. Localized in the Accept-Language of the client request.
func (o DiagnosticConditionResponseOutput) Message() pulumi.StringOutput {
	return o.ApplyT(func(v DiagnosticConditionResponse) string { return v.Message }).(pulumi.StringOutput)
}

// The UTC timestamp of when the condition started. Customers should be able to find a corresponding event in the ops log around this time.
func (o DiagnosticConditionResponseOutput) Since() pulumi.StringOutput {
	return o.ApplyT(func(v DiagnosticConditionResponse) string { return v.Since }).(pulumi.StringOutput)
}

type DiagnosticConditionResponseArrayOutput struct{ *pulumi.OutputState }

func (DiagnosticConditionResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DiagnosticConditionResponse)(nil)).Elem()
}

func (o DiagnosticConditionResponseArrayOutput) ToDiagnosticConditionResponseArrayOutput() DiagnosticConditionResponseArrayOutput {
	return o
}

func (o DiagnosticConditionResponseArrayOutput) ToDiagnosticConditionResponseArrayOutputWithContext(ctx context.Context) DiagnosticConditionResponseArrayOutput {
	return o
}

func (o DiagnosticConditionResponseArrayOutput) Index(i pulumi.IntInput) DiagnosticConditionResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DiagnosticConditionResponse {
		return vs[0].([]DiagnosticConditionResponse)[vs[1].(int)]
	}).(DiagnosticConditionResponseOutput)
}

// Describes conditions applicable to the Input, Output, or the job overall, that warrant customer attention.
type DiagnosticsResponse struct {
	// A collection of zero or more conditions applicable to the resource, or to the job overall, that warrant customer attention.
	Conditions []DiagnosticConditionResponse `pulumi:"conditions"`
}

// DiagnosticsResponseInput is an input type that accepts DiagnosticsResponseArgs and DiagnosticsResponseOutput values.
// You can construct a concrete instance of `DiagnosticsResponseInput` via:
//
//          DiagnosticsResponseArgs{...}
type DiagnosticsResponseInput interface {
	pulumi.Input

	ToDiagnosticsResponseOutput() DiagnosticsResponseOutput
	ToDiagnosticsResponseOutputWithContext(context.Context) DiagnosticsResponseOutput
}

// Describes conditions applicable to the Input, Output, or the job overall, that warrant customer attention.
type DiagnosticsResponseArgs struct {
	// A collection of zero or more conditions applicable to the resource, or to the job overall, that warrant customer attention.
	Conditions DiagnosticConditionResponseArrayInput `pulumi:"conditions"`
}

func (DiagnosticsResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DiagnosticsResponse)(nil)).Elem()
}

func (i DiagnosticsResponseArgs) ToDiagnosticsResponseOutput() DiagnosticsResponseOutput {
	return i.ToDiagnosticsResponseOutputWithContext(context.Background())
}

func (i DiagnosticsResponseArgs) ToDiagnosticsResponseOutputWithContext(ctx context.Context) DiagnosticsResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DiagnosticsResponseOutput)
}

func (i DiagnosticsResponseArgs) ToDiagnosticsResponsePtrOutput() DiagnosticsResponsePtrOutput {
	return i.ToDiagnosticsResponsePtrOutputWithContext(context.Background())
}

func (i DiagnosticsResponseArgs) ToDiagnosticsResponsePtrOutputWithContext(ctx context.Context) DiagnosticsResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DiagnosticsResponseOutput).ToDiagnosticsResponsePtrOutputWithContext(ctx)
}

// DiagnosticsResponsePtrInput is an input type that accepts DiagnosticsResponseArgs, DiagnosticsResponsePtr and DiagnosticsResponsePtrOutput values.
// You can construct a concrete instance of `DiagnosticsResponsePtrInput` via:
//
//          DiagnosticsResponseArgs{...}
//
//  or:
//
//          nil
type DiagnosticsResponsePtrInput interface {
	pulumi.Input

	ToDiagnosticsResponsePtrOutput() DiagnosticsResponsePtrOutput
	ToDiagnosticsResponsePtrOutputWithContext(context.Context) DiagnosticsResponsePtrOutput
}

type diagnosticsResponsePtrType DiagnosticsResponseArgs

func DiagnosticsResponsePtr(v *DiagnosticsResponseArgs) DiagnosticsResponsePtrInput {
	return (*diagnosticsResponsePtrType)(v)
}

func (*diagnosticsResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DiagnosticsResponse)(nil)).Elem()
}

func (i *diagnosticsResponsePtrType) ToDiagnosticsResponsePtrOutput() DiagnosticsResponsePtrOutput {
	return i.ToDiagnosticsResponsePtrOutputWithContext(context.Background())
}

func (i *diagnosticsResponsePtrType) ToDiagnosticsResponsePtrOutputWithContext(ctx context.Context) DiagnosticsResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DiagnosticsResponsePtrOutput)
}

// Describes conditions applicable to the Input, Output, or the job overall, that warrant customer attention.
type DiagnosticsResponseOutput struct{ *pulumi.OutputState }

func (DiagnosticsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DiagnosticsResponse)(nil)).Elem()
}

func (o DiagnosticsResponseOutput) ToDiagnosticsResponseOutput() DiagnosticsResponseOutput {
	return o
}

func (o DiagnosticsResponseOutput) ToDiagnosticsResponseOutputWithContext(ctx context.Context) DiagnosticsResponseOutput {
	return o
}

func (o DiagnosticsResponseOutput) ToDiagnosticsResponsePtrOutput() DiagnosticsResponsePtrOutput {
	return o.ToDiagnosticsResponsePtrOutputWithContext(context.Background())
}

func (o DiagnosticsResponseOutput) ToDiagnosticsResponsePtrOutputWithContext(ctx context.Context) DiagnosticsResponsePtrOutput {
	return o.ApplyT(func(v DiagnosticsResponse) *DiagnosticsResponse {
		return &v
	}).(DiagnosticsResponsePtrOutput)
}

// A collection of zero or more conditions applicable to the resource, or to the job overall, that warrant customer attention.
func (o DiagnosticsResponseOutput) Conditions() DiagnosticConditionResponseArrayOutput {
	return o.ApplyT(func(v DiagnosticsResponse) []DiagnosticConditionResponse { return v.Conditions }).(DiagnosticConditionResponseArrayOutput)
}

type DiagnosticsResponsePtrOutput struct{ *pulumi.OutputState }

func (DiagnosticsResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DiagnosticsResponse)(nil)).Elem()
}

func (o DiagnosticsResponsePtrOutput) ToDiagnosticsResponsePtrOutput() DiagnosticsResponsePtrOutput {
	return o
}

func (o DiagnosticsResponsePtrOutput) ToDiagnosticsResponsePtrOutputWithContext(ctx context.Context) DiagnosticsResponsePtrOutput {
	return o
}

func (o DiagnosticsResponsePtrOutput) Elem() DiagnosticsResponseOutput {
	return o.ApplyT(func(v *DiagnosticsResponse) DiagnosticsResponse { return *v }).(DiagnosticsResponseOutput)
}

// A collection of zero or more conditions applicable to the resource, or to the job overall, that warrant customer attention.
func (o DiagnosticsResponsePtrOutput) Conditions() DiagnosticConditionResponseArrayOutput {
	return o.ApplyT(func(v *DiagnosticsResponse) []DiagnosticConditionResponse {
		if v == nil {
			return nil
		}
		return v.Conditions
	}).(DiagnosticConditionResponseArrayOutput)
}

// A function object, containing all information associated with the named function. All functions are contained under a streaming job.
type FunctionType struct {
	// Resource name
	Name *string `pulumi:"name"`
	// The properties that are associated with a function.
	Properties *FunctionProperties `pulumi:"properties"`
}

// FunctionTypeInput is an input type that accepts FunctionTypeArgs and FunctionTypeOutput values.
// You can construct a concrete instance of `FunctionTypeInput` via:
//
//          FunctionTypeArgs{...}
type FunctionTypeInput interface {
	pulumi.Input

	ToFunctionTypeOutput() FunctionTypeOutput
	ToFunctionTypeOutputWithContext(context.Context) FunctionTypeOutput
}

// A function object, containing all information associated with the named function. All functions are contained under a streaming job.
type FunctionTypeArgs struct {
	// Resource name
	Name pulumi.StringPtrInput `pulumi:"name"`
	// The properties that are associated with a function.
	Properties FunctionPropertiesPtrInput `pulumi:"properties"`
}

func (FunctionTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FunctionType)(nil)).Elem()
}

func (i FunctionTypeArgs) ToFunctionTypeOutput() FunctionTypeOutput {
	return i.ToFunctionTypeOutputWithContext(context.Background())
}

func (i FunctionTypeArgs) ToFunctionTypeOutputWithContext(ctx context.Context) FunctionTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FunctionTypeOutput)
}

// FunctionTypeArrayInput is an input type that accepts FunctionTypeArray and FunctionTypeArrayOutput values.
// You can construct a concrete instance of `FunctionTypeArrayInput` via:
//
//          FunctionTypeArray{ FunctionTypeArgs{...} }
type FunctionTypeArrayInput interface {
	pulumi.Input

	ToFunctionTypeArrayOutput() FunctionTypeArrayOutput
	ToFunctionTypeArrayOutputWithContext(context.Context) FunctionTypeArrayOutput
}

type FunctionTypeArray []FunctionTypeInput

func (FunctionTypeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FunctionType)(nil)).Elem()
}

func (i FunctionTypeArray) ToFunctionTypeArrayOutput() FunctionTypeArrayOutput {
	return i.ToFunctionTypeArrayOutputWithContext(context.Background())
}

func (i FunctionTypeArray) ToFunctionTypeArrayOutputWithContext(ctx context.Context) FunctionTypeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FunctionTypeArrayOutput)
}

// A function object, containing all information associated with the named function. All functions are contained under a streaming job.
type FunctionTypeOutput struct{ *pulumi.OutputState }

func (FunctionTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FunctionType)(nil)).Elem()
}

func (o FunctionTypeOutput) ToFunctionTypeOutput() FunctionTypeOutput {
	return o
}

func (o FunctionTypeOutput) ToFunctionTypeOutputWithContext(ctx context.Context) FunctionTypeOutput {
	return o
}

// Resource name
func (o FunctionTypeOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FunctionType) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The properties that are associated with a function.
func (o FunctionTypeOutput) Properties() FunctionPropertiesPtrOutput {
	return o.ApplyT(func(v FunctionType) *FunctionProperties { return v.Properties }).(FunctionPropertiesPtrOutput)
}

type FunctionTypeArrayOutput struct{ *pulumi.OutputState }

func (FunctionTypeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FunctionType)(nil)).Elem()
}

func (o FunctionTypeArrayOutput) ToFunctionTypeArrayOutput() FunctionTypeArrayOutput {
	return o
}

func (o FunctionTypeArrayOutput) ToFunctionTypeArrayOutputWithContext(ctx context.Context) FunctionTypeArrayOutput {
	return o
}

func (o FunctionTypeArrayOutput) Index(i pulumi.IntInput) FunctionTypeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) FunctionType {
		return vs[0].([]FunctionType)[vs[1].(int)]
	}).(FunctionTypeOutput)
}

// The properties that are associated with a function.
type FunctionProperties struct {
	// Indicates the type of function.
	Type *string `pulumi:"type"`
}

// FunctionPropertiesInput is an input type that accepts FunctionPropertiesArgs and FunctionPropertiesOutput values.
// You can construct a concrete instance of `FunctionPropertiesInput` via:
//
//          FunctionPropertiesArgs{...}
type FunctionPropertiesInput interface {
	pulumi.Input

	ToFunctionPropertiesOutput() FunctionPropertiesOutput
	ToFunctionPropertiesOutputWithContext(context.Context) FunctionPropertiesOutput
}

// The properties that are associated with a function.
type FunctionPropertiesArgs struct {
	// Indicates the type of function.
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (FunctionPropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FunctionProperties)(nil)).Elem()
}

func (i FunctionPropertiesArgs) ToFunctionPropertiesOutput() FunctionPropertiesOutput {
	return i.ToFunctionPropertiesOutputWithContext(context.Background())
}

func (i FunctionPropertiesArgs) ToFunctionPropertiesOutputWithContext(ctx context.Context) FunctionPropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FunctionPropertiesOutput)
}

func (i FunctionPropertiesArgs) ToFunctionPropertiesPtrOutput() FunctionPropertiesPtrOutput {
	return i.ToFunctionPropertiesPtrOutputWithContext(context.Background())
}

func (i FunctionPropertiesArgs) ToFunctionPropertiesPtrOutputWithContext(ctx context.Context) FunctionPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FunctionPropertiesOutput).ToFunctionPropertiesPtrOutputWithContext(ctx)
}

// FunctionPropertiesPtrInput is an input type that accepts FunctionPropertiesArgs, FunctionPropertiesPtr and FunctionPropertiesPtrOutput values.
// You can construct a concrete instance of `FunctionPropertiesPtrInput` via:
//
//          FunctionPropertiesArgs{...}
//
//  or:
//
//          nil
type FunctionPropertiesPtrInput interface {
	pulumi.Input

	ToFunctionPropertiesPtrOutput() FunctionPropertiesPtrOutput
	ToFunctionPropertiesPtrOutputWithContext(context.Context) FunctionPropertiesPtrOutput
}

type functionPropertiesPtrType FunctionPropertiesArgs

func FunctionPropertiesPtr(v *FunctionPropertiesArgs) FunctionPropertiesPtrInput {
	return (*functionPropertiesPtrType)(v)
}

func (*functionPropertiesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**FunctionProperties)(nil)).Elem()
}

func (i *functionPropertiesPtrType) ToFunctionPropertiesPtrOutput() FunctionPropertiesPtrOutput {
	return i.ToFunctionPropertiesPtrOutputWithContext(context.Background())
}

func (i *functionPropertiesPtrType) ToFunctionPropertiesPtrOutputWithContext(ctx context.Context) FunctionPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FunctionPropertiesPtrOutput)
}

// The properties that are associated with a function.
type FunctionPropertiesOutput struct{ *pulumi.OutputState }

func (FunctionPropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FunctionProperties)(nil)).Elem()
}

func (o FunctionPropertiesOutput) ToFunctionPropertiesOutput() FunctionPropertiesOutput {
	return o
}

func (o FunctionPropertiesOutput) ToFunctionPropertiesOutputWithContext(ctx context.Context) FunctionPropertiesOutput {
	return o
}

func (o FunctionPropertiesOutput) ToFunctionPropertiesPtrOutput() FunctionPropertiesPtrOutput {
	return o.ToFunctionPropertiesPtrOutputWithContext(context.Background())
}

func (o FunctionPropertiesOutput) ToFunctionPropertiesPtrOutputWithContext(ctx context.Context) FunctionPropertiesPtrOutput {
	return o.ApplyT(func(v FunctionProperties) *FunctionProperties {
		return &v
	}).(FunctionPropertiesPtrOutput)
}

// Indicates the type of function.
func (o FunctionPropertiesOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FunctionProperties) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type FunctionPropertiesPtrOutput struct{ *pulumi.OutputState }

func (FunctionPropertiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FunctionProperties)(nil)).Elem()
}

func (o FunctionPropertiesPtrOutput) ToFunctionPropertiesPtrOutput() FunctionPropertiesPtrOutput {
	return o
}

func (o FunctionPropertiesPtrOutput) ToFunctionPropertiesPtrOutputWithContext(ctx context.Context) FunctionPropertiesPtrOutput {
	return o
}

func (o FunctionPropertiesPtrOutput) Elem() FunctionPropertiesOutput {
	return o.ApplyT(func(v *FunctionProperties) FunctionProperties { return *v }).(FunctionPropertiesOutput)
}

// Indicates the type of function.
func (o FunctionPropertiesPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FunctionProperties) *string {
		if v == nil {
			return nil
		}
		return v.Type
	}).(pulumi.StringPtrOutput)
}

// The properties that are associated with a function.
type FunctionPropertiesResponse struct {
	// The current entity tag for the function. This is an opaque string. You can use it to detect whether the resource has changed between requests. You can also use it in the If-Match or If-None-Match headers for write operations for optimistic concurrency.
	Etag string `pulumi:"etag"`
	// Indicates the type of function.
	Type *string `pulumi:"type"`
}

// FunctionPropertiesResponseInput is an input type that accepts FunctionPropertiesResponseArgs and FunctionPropertiesResponseOutput values.
// You can construct a concrete instance of `FunctionPropertiesResponseInput` via:
//
//          FunctionPropertiesResponseArgs{...}
type FunctionPropertiesResponseInput interface {
	pulumi.Input

	ToFunctionPropertiesResponseOutput() FunctionPropertiesResponseOutput
	ToFunctionPropertiesResponseOutputWithContext(context.Context) FunctionPropertiesResponseOutput
}

// The properties that are associated with a function.
type FunctionPropertiesResponseArgs struct {
	// The current entity tag for the function. This is an opaque string. You can use it to detect whether the resource has changed between requests. You can also use it in the If-Match or If-None-Match headers for write operations for optimistic concurrency.
	Etag pulumi.StringInput `pulumi:"etag"`
	// Indicates the type of function.
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (FunctionPropertiesResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FunctionPropertiesResponse)(nil)).Elem()
}

func (i FunctionPropertiesResponseArgs) ToFunctionPropertiesResponseOutput() FunctionPropertiesResponseOutput {
	return i.ToFunctionPropertiesResponseOutputWithContext(context.Background())
}

func (i FunctionPropertiesResponseArgs) ToFunctionPropertiesResponseOutputWithContext(ctx context.Context) FunctionPropertiesResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FunctionPropertiesResponseOutput)
}

func (i FunctionPropertiesResponseArgs) ToFunctionPropertiesResponsePtrOutput() FunctionPropertiesResponsePtrOutput {
	return i.ToFunctionPropertiesResponsePtrOutputWithContext(context.Background())
}

func (i FunctionPropertiesResponseArgs) ToFunctionPropertiesResponsePtrOutputWithContext(ctx context.Context) FunctionPropertiesResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FunctionPropertiesResponseOutput).ToFunctionPropertiesResponsePtrOutputWithContext(ctx)
}

// FunctionPropertiesResponsePtrInput is an input type that accepts FunctionPropertiesResponseArgs, FunctionPropertiesResponsePtr and FunctionPropertiesResponsePtrOutput values.
// You can construct a concrete instance of `FunctionPropertiesResponsePtrInput` via:
//
//          FunctionPropertiesResponseArgs{...}
//
//  or:
//
//          nil
type FunctionPropertiesResponsePtrInput interface {
	pulumi.Input

	ToFunctionPropertiesResponsePtrOutput() FunctionPropertiesResponsePtrOutput
	ToFunctionPropertiesResponsePtrOutputWithContext(context.Context) FunctionPropertiesResponsePtrOutput
}

type functionPropertiesResponsePtrType FunctionPropertiesResponseArgs

func FunctionPropertiesResponsePtr(v *FunctionPropertiesResponseArgs) FunctionPropertiesResponsePtrInput {
	return (*functionPropertiesResponsePtrType)(v)
}

func (*functionPropertiesResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**FunctionPropertiesResponse)(nil)).Elem()
}

func (i *functionPropertiesResponsePtrType) ToFunctionPropertiesResponsePtrOutput() FunctionPropertiesResponsePtrOutput {
	return i.ToFunctionPropertiesResponsePtrOutputWithContext(context.Background())
}

func (i *functionPropertiesResponsePtrType) ToFunctionPropertiesResponsePtrOutputWithContext(ctx context.Context) FunctionPropertiesResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FunctionPropertiesResponsePtrOutput)
}

// The properties that are associated with a function.
type FunctionPropertiesResponseOutput struct{ *pulumi.OutputState }

func (FunctionPropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FunctionPropertiesResponse)(nil)).Elem()
}

func (o FunctionPropertiesResponseOutput) ToFunctionPropertiesResponseOutput() FunctionPropertiesResponseOutput {
	return o
}

func (o FunctionPropertiesResponseOutput) ToFunctionPropertiesResponseOutputWithContext(ctx context.Context) FunctionPropertiesResponseOutput {
	return o
}

func (o FunctionPropertiesResponseOutput) ToFunctionPropertiesResponsePtrOutput() FunctionPropertiesResponsePtrOutput {
	return o.ToFunctionPropertiesResponsePtrOutputWithContext(context.Background())
}

func (o FunctionPropertiesResponseOutput) ToFunctionPropertiesResponsePtrOutputWithContext(ctx context.Context) FunctionPropertiesResponsePtrOutput {
	return o.ApplyT(func(v FunctionPropertiesResponse) *FunctionPropertiesResponse {
		return &v
	}).(FunctionPropertiesResponsePtrOutput)
}

// The current entity tag for the function. This is an opaque string. You can use it to detect whether the resource has changed between requests. You can also use it in the If-Match or If-None-Match headers for write operations for optimistic concurrency.
func (o FunctionPropertiesResponseOutput) Etag() pulumi.StringOutput {
	return o.ApplyT(func(v FunctionPropertiesResponse) string { return v.Etag }).(pulumi.StringOutput)
}

// Indicates the type of function.
func (o FunctionPropertiesResponseOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FunctionPropertiesResponse) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type FunctionPropertiesResponsePtrOutput struct{ *pulumi.OutputState }

func (FunctionPropertiesResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FunctionPropertiesResponse)(nil)).Elem()
}

func (o FunctionPropertiesResponsePtrOutput) ToFunctionPropertiesResponsePtrOutput() FunctionPropertiesResponsePtrOutput {
	return o
}

func (o FunctionPropertiesResponsePtrOutput) ToFunctionPropertiesResponsePtrOutputWithContext(ctx context.Context) FunctionPropertiesResponsePtrOutput {
	return o
}

func (o FunctionPropertiesResponsePtrOutput) Elem() FunctionPropertiesResponseOutput {
	return o.ApplyT(func(v *FunctionPropertiesResponse) FunctionPropertiesResponse { return *v }).(FunctionPropertiesResponseOutput)
}

// The current entity tag for the function. This is an opaque string. You can use it to detect whether the resource has changed between requests. You can also use it in the If-Match or If-None-Match headers for write operations for optimistic concurrency.
func (o FunctionPropertiesResponsePtrOutput) Etag() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FunctionPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Etag
	}).(pulumi.StringPtrOutput)
}

// Indicates the type of function.
func (o FunctionPropertiesResponsePtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FunctionPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return v.Type
	}).(pulumi.StringPtrOutput)
}

// A function object, containing all information associated with the named function. All functions are contained under a streaming job.
type FunctionResponse struct {
	// Resource Id
	Id string `pulumi:"id"`
	// Resource name
	Name *string `pulumi:"name"`
	// The properties that are associated with a function.
	Properties *FunctionPropertiesResponse `pulumi:"properties"`
	// Resource type
	Type string `pulumi:"type"`
}

// FunctionResponseInput is an input type that accepts FunctionResponseArgs and FunctionResponseOutput values.
// You can construct a concrete instance of `FunctionResponseInput` via:
//
//          FunctionResponseArgs{...}
type FunctionResponseInput interface {
	pulumi.Input

	ToFunctionResponseOutput() FunctionResponseOutput
	ToFunctionResponseOutputWithContext(context.Context) FunctionResponseOutput
}

// A function object, containing all information associated with the named function. All functions are contained under a streaming job.
type FunctionResponseArgs struct {
	// Resource Id
	Id pulumi.StringInput `pulumi:"id"`
	// Resource name
	Name pulumi.StringPtrInput `pulumi:"name"`
	// The properties that are associated with a function.
	Properties FunctionPropertiesResponsePtrInput `pulumi:"properties"`
	// Resource type
	Type pulumi.StringInput `pulumi:"type"`
}

func (FunctionResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FunctionResponse)(nil)).Elem()
}

func (i FunctionResponseArgs) ToFunctionResponseOutput() FunctionResponseOutput {
	return i.ToFunctionResponseOutputWithContext(context.Background())
}

func (i FunctionResponseArgs) ToFunctionResponseOutputWithContext(ctx context.Context) FunctionResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FunctionResponseOutput)
}

// FunctionResponseArrayInput is an input type that accepts FunctionResponseArray and FunctionResponseArrayOutput values.
// You can construct a concrete instance of `FunctionResponseArrayInput` via:
//
//          FunctionResponseArray{ FunctionResponseArgs{...} }
type FunctionResponseArrayInput interface {
	pulumi.Input

	ToFunctionResponseArrayOutput() FunctionResponseArrayOutput
	ToFunctionResponseArrayOutputWithContext(context.Context) FunctionResponseArrayOutput
}

type FunctionResponseArray []FunctionResponseInput

func (FunctionResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FunctionResponse)(nil)).Elem()
}

func (i FunctionResponseArray) ToFunctionResponseArrayOutput() FunctionResponseArrayOutput {
	return i.ToFunctionResponseArrayOutputWithContext(context.Background())
}

func (i FunctionResponseArray) ToFunctionResponseArrayOutputWithContext(ctx context.Context) FunctionResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FunctionResponseArrayOutput)
}

// A function object, containing all information associated with the named function. All functions are contained under a streaming job.
type FunctionResponseOutput struct{ *pulumi.OutputState }

func (FunctionResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FunctionResponse)(nil)).Elem()
}

func (o FunctionResponseOutput) ToFunctionResponseOutput() FunctionResponseOutput {
	return o
}

func (o FunctionResponseOutput) ToFunctionResponseOutputWithContext(ctx context.Context) FunctionResponseOutput {
	return o
}

// Resource Id
func (o FunctionResponseOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v FunctionResponse) string { return v.Id }).(pulumi.StringOutput)
}

// Resource name
func (o FunctionResponseOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FunctionResponse) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The properties that are associated with a function.
func (o FunctionResponseOutput) Properties() FunctionPropertiesResponsePtrOutput {
	return o.ApplyT(func(v FunctionResponse) *FunctionPropertiesResponse { return v.Properties }).(FunctionPropertiesResponsePtrOutput)
}

// Resource type
func (o FunctionResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v FunctionResponse) string { return v.Type }).(pulumi.StringOutput)
}

type FunctionResponseArrayOutput struct{ *pulumi.OutputState }

func (FunctionResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FunctionResponse)(nil)).Elem()
}

func (o FunctionResponseArrayOutput) ToFunctionResponseArrayOutput() FunctionResponseArrayOutput {
	return o
}

func (o FunctionResponseArrayOutput) ToFunctionResponseArrayOutputWithContext(ctx context.Context) FunctionResponseArrayOutput {
	return o
}

func (o FunctionResponseArrayOutput) Index(i pulumi.IntInput) FunctionResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) FunctionResponse {
		return vs[0].([]FunctionResponse)[vs[1].(int)]
	}).(FunctionResponseOutput)
}

// An input object, containing all information associated with the named input. All inputs are contained under a streaming job.
type InputType struct {
	// Resource name
	Name *string `pulumi:"name"`
	// The properties that are associated with an input. Required on PUT (CreateOrReplace) requests.
	Properties *InputProperties `pulumi:"properties"`
}

// InputTypeInput is an input type that accepts InputTypeArgs and InputTypeOutput values.
// You can construct a concrete instance of `InputTypeInput` via:
//
//          InputTypeArgs{...}
type InputTypeInput interface {
	pulumi.Input

	ToInputTypeOutput() InputTypeOutput
	ToInputTypeOutputWithContext(context.Context) InputTypeOutput
}

// An input object, containing all information associated with the named input. All inputs are contained under a streaming job.
type InputTypeArgs struct {
	// Resource name
	Name pulumi.StringPtrInput `pulumi:"name"`
	// The properties that are associated with an input. Required on PUT (CreateOrReplace) requests.
	Properties InputPropertiesPtrInput `pulumi:"properties"`
}

func (InputTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InputType)(nil)).Elem()
}

func (i InputTypeArgs) ToInputTypeOutput() InputTypeOutput {
	return i.ToInputTypeOutputWithContext(context.Background())
}

func (i InputTypeArgs) ToInputTypeOutputWithContext(ctx context.Context) InputTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InputTypeOutput)
}

// InputTypeArrayInput is an input type that accepts InputTypeArray and InputTypeArrayOutput values.
// You can construct a concrete instance of `InputTypeArrayInput` via:
//
//          InputTypeArray{ InputTypeArgs{...} }
type InputTypeArrayInput interface {
	pulumi.Input

	ToInputTypeArrayOutput() InputTypeArrayOutput
	ToInputTypeArrayOutputWithContext(context.Context) InputTypeArrayOutput
}

type InputTypeArray []InputTypeInput

func (InputTypeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InputType)(nil)).Elem()
}

func (i InputTypeArray) ToInputTypeArrayOutput() InputTypeArrayOutput {
	return i.ToInputTypeArrayOutputWithContext(context.Background())
}

func (i InputTypeArray) ToInputTypeArrayOutputWithContext(ctx context.Context) InputTypeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InputTypeArrayOutput)
}

// An input object, containing all information associated with the named input. All inputs are contained under a streaming job.
type InputTypeOutput struct{ *pulumi.OutputState }

func (InputTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InputType)(nil)).Elem()
}

func (o InputTypeOutput) ToInputTypeOutput() InputTypeOutput {
	return o
}

func (o InputTypeOutput) ToInputTypeOutputWithContext(ctx context.Context) InputTypeOutput {
	return o
}

// Resource name
func (o InputTypeOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InputType) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The properties that are associated with an input. Required on PUT (CreateOrReplace) requests.
func (o InputTypeOutput) Properties() InputPropertiesPtrOutput {
	return o.ApplyT(func(v InputType) *InputProperties { return v.Properties }).(InputPropertiesPtrOutput)
}

type InputTypeArrayOutput struct{ *pulumi.OutputState }

func (InputTypeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InputType)(nil)).Elem()
}

func (o InputTypeArrayOutput) ToInputTypeArrayOutput() InputTypeArrayOutput {
	return o
}

func (o InputTypeArrayOutput) ToInputTypeArrayOutputWithContext(ctx context.Context) InputTypeArrayOutput {
	return o
}

func (o InputTypeArrayOutput) Index(i pulumi.IntInput) InputTypeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) InputType {
		return vs[0].([]InputType)[vs[1].(int)]
	}).(InputTypeOutput)
}

// The properties that are associated with an input.
type InputProperties struct {
	// Describes how data from an input is serialized or how data is serialized when written to an output. Required on PUT (CreateOrReplace) requests.
	Serialization *Serialization `pulumi:"serialization"`
	// Indicates whether the input is a source of reference data or stream data. Required on PUT (CreateOrReplace) requests.
	Type *string `pulumi:"type"`
}

// InputPropertiesInput is an input type that accepts InputPropertiesArgs and InputPropertiesOutput values.
// You can construct a concrete instance of `InputPropertiesInput` via:
//
//          InputPropertiesArgs{...}
type InputPropertiesInput interface {
	pulumi.Input

	ToInputPropertiesOutput() InputPropertiesOutput
	ToInputPropertiesOutputWithContext(context.Context) InputPropertiesOutput
}

// The properties that are associated with an input.
type InputPropertiesArgs struct {
	// Describes how data from an input is serialized or how data is serialized when written to an output. Required on PUT (CreateOrReplace) requests.
	Serialization SerializationPtrInput `pulumi:"serialization"`
	// Indicates whether the input is a source of reference data or stream data. Required on PUT (CreateOrReplace) requests.
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (InputPropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InputProperties)(nil)).Elem()
}

func (i InputPropertiesArgs) ToInputPropertiesOutput() InputPropertiesOutput {
	return i.ToInputPropertiesOutputWithContext(context.Background())
}

func (i InputPropertiesArgs) ToInputPropertiesOutputWithContext(ctx context.Context) InputPropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InputPropertiesOutput)
}

func (i InputPropertiesArgs) ToInputPropertiesPtrOutput() InputPropertiesPtrOutput {
	return i.ToInputPropertiesPtrOutputWithContext(context.Background())
}

func (i InputPropertiesArgs) ToInputPropertiesPtrOutputWithContext(ctx context.Context) InputPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InputPropertiesOutput).ToInputPropertiesPtrOutputWithContext(ctx)
}

// InputPropertiesPtrInput is an input type that accepts InputPropertiesArgs, InputPropertiesPtr and InputPropertiesPtrOutput values.
// You can construct a concrete instance of `InputPropertiesPtrInput` via:
//
//          InputPropertiesArgs{...}
//
//  or:
//
//          nil
type InputPropertiesPtrInput interface {
	pulumi.Input

	ToInputPropertiesPtrOutput() InputPropertiesPtrOutput
	ToInputPropertiesPtrOutputWithContext(context.Context) InputPropertiesPtrOutput
}

type inputPropertiesPtrType InputPropertiesArgs

func InputPropertiesPtr(v *InputPropertiesArgs) InputPropertiesPtrInput {
	return (*inputPropertiesPtrType)(v)
}

func (*inputPropertiesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**InputProperties)(nil)).Elem()
}

func (i *inputPropertiesPtrType) ToInputPropertiesPtrOutput() InputPropertiesPtrOutput {
	return i.ToInputPropertiesPtrOutputWithContext(context.Background())
}

func (i *inputPropertiesPtrType) ToInputPropertiesPtrOutputWithContext(ctx context.Context) InputPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InputPropertiesPtrOutput)
}

// The properties that are associated with an input.
type InputPropertiesOutput struct{ *pulumi.OutputState }

func (InputPropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InputProperties)(nil)).Elem()
}

func (o InputPropertiesOutput) ToInputPropertiesOutput() InputPropertiesOutput {
	return o
}

func (o InputPropertiesOutput) ToInputPropertiesOutputWithContext(ctx context.Context) InputPropertiesOutput {
	return o
}

func (o InputPropertiesOutput) ToInputPropertiesPtrOutput() InputPropertiesPtrOutput {
	return o.ToInputPropertiesPtrOutputWithContext(context.Background())
}

func (o InputPropertiesOutput) ToInputPropertiesPtrOutputWithContext(ctx context.Context) InputPropertiesPtrOutput {
	return o.ApplyT(func(v InputProperties) *InputProperties {
		return &v
	}).(InputPropertiesPtrOutput)
}

// Describes how data from an input is serialized or how data is serialized when written to an output. Required on PUT (CreateOrReplace) requests.
func (o InputPropertiesOutput) Serialization() SerializationPtrOutput {
	return o.ApplyT(func(v InputProperties) *Serialization { return v.Serialization }).(SerializationPtrOutput)
}

// Indicates whether the input is a source of reference data or stream data. Required on PUT (CreateOrReplace) requests.
func (o InputPropertiesOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InputProperties) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type InputPropertiesPtrOutput struct{ *pulumi.OutputState }

func (InputPropertiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**InputProperties)(nil)).Elem()
}

func (o InputPropertiesPtrOutput) ToInputPropertiesPtrOutput() InputPropertiesPtrOutput {
	return o
}

func (o InputPropertiesPtrOutput) ToInputPropertiesPtrOutputWithContext(ctx context.Context) InputPropertiesPtrOutput {
	return o
}

func (o InputPropertiesPtrOutput) Elem() InputPropertiesOutput {
	return o.ApplyT(func(v *InputProperties) InputProperties { return *v }).(InputPropertiesOutput)
}

// Describes how data from an input is serialized or how data is serialized when written to an output. Required on PUT (CreateOrReplace) requests.
func (o InputPropertiesPtrOutput) Serialization() SerializationPtrOutput {
	return o.ApplyT(func(v *InputProperties) *Serialization {
		if v == nil {
			return nil
		}
		return v.Serialization
	}).(SerializationPtrOutput)
}

// Indicates whether the input is a source of reference data or stream data. Required on PUT (CreateOrReplace) requests.
func (o InputPropertiesPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *InputProperties) *string {
		if v == nil {
			return nil
		}
		return v.Type
	}).(pulumi.StringPtrOutput)
}

// The properties that are associated with an input.
type InputPropertiesResponse struct {
	// Describes conditions applicable to the Input, Output, or the job overall, that warrant customer attention.
	Diagnostics DiagnosticsResponse `pulumi:"diagnostics"`
	// The current entity tag for the input. This is an opaque string. You can use it to detect whether the resource has changed between requests. You can also use it in the If-Match or If-None-Match headers for write operations for optimistic concurrency.
	Etag string `pulumi:"etag"`
	// Describes how data from an input is serialized or how data is serialized when written to an output. Required on PUT (CreateOrReplace) requests.
	Serialization *SerializationResponse `pulumi:"serialization"`
	// Indicates whether the input is a source of reference data or stream data. Required on PUT (CreateOrReplace) requests.
	Type *string `pulumi:"type"`
}

// InputPropertiesResponseInput is an input type that accepts InputPropertiesResponseArgs and InputPropertiesResponseOutput values.
// You can construct a concrete instance of `InputPropertiesResponseInput` via:
//
//          InputPropertiesResponseArgs{...}
type InputPropertiesResponseInput interface {
	pulumi.Input

	ToInputPropertiesResponseOutput() InputPropertiesResponseOutput
	ToInputPropertiesResponseOutputWithContext(context.Context) InputPropertiesResponseOutput
}

// The properties that are associated with an input.
type InputPropertiesResponseArgs struct {
	// Describes conditions applicable to the Input, Output, or the job overall, that warrant customer attention.
	Diagnostics DiagnosticsResponseInput `pulumi:"diagnostics"`
	// The current entity tag for the input. This is an opaque string. You can use it to detect whether the resource has changed between requests. You can also use it in the If-Match or If-None-Match headers for write operations for optimistic concurrency.
	Etag pulumi.StringInput `pulumi:"etag"`
	// Describes how data from an input is serialized or how data is serialized when written to an output. Required on PUT (CreateOrReplace) requests.
	Serialization SerializationResponsePtrInput `pulumi:"serialization"`
	// Indicates whether the input is a source of reference data or stream data. Required on PUT (CreateOrReplace) requests.
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (InputPropertiesResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InputPropertiesResponse)(nil)).Elem()
}

func (i InputPropertiesResponseArgs) ToInputPropertiesResponseOutput() InputPropertiesResponseOutput {
	return i.ToInputPropertiesResponseOutputWithContext(context.Background())
}

func (i InputPropertiesResponseArgs) ToInputPropertiesResponseOutputWithContext(ctx context.Context) InputPropertiesResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InputPropertiesResponseOutput)
}

func (i InputPropertiesResponseArgs) ToInputPropertiesResponsePtrOutput() InputPropertiesResponsePtrOutput {
	return i.ToInputPropertiesResponsePtrOutputWithContext(context.Background())
}

func (i InputPropertiesResponseArgs) ToInputPropertiesResponsePtrOutputWithContext(ctx context.Context) InputPropertiesResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InputPropertiesResponseOutput).ToInputPropertiesResponsePtrOutputWithContext(ctx)
}

// InputPropertiesResponsePtrInput is an input type that accepts InputPropertiesResponseArgs, InputPropertiesResponsePtr and InputPropertiesResponsePtrOutput values.
// You can construct a concrete instance of `InputPropertiesResponsePtrInput` via:
//
//          InputPropertiesResponseArgs{...}
//
//  or:
//
//          nil
type InputPropertiesResponsePtrInput interface {
	pulumi.Input

	ToInputPropertiesResponsePtrOutput() InputPropertiesResponsePtrOutput
	ToInputPropertiesResponsePtrOutputWithContext(context.Context) InputPropertiesResponsePtrOutput
}

type inputPropertiesResponsePtrType InputPropertiesResponseArgs

func InputPropertiesResponsePtr(v *InputPropertiesResponseArgs) InputPropertiesResponsePtrInput {
	return (*inputPropertiesResponsePtrType)(v)
}

func (*inputPropertiesResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**InputPropertiesResponse)(nil)).Elem()
}

func (i *inputPropertiesResponsePtrType) ToInputPropertiesResponsePtrOutput() InputPropertiesResponsePtrOutput {
	return i.ToInputPropertiesResponsePtrOutputWithContext(context.Background())
}

func (i *inputPropertiesResponsePtrType) ToInputPropertiesResponsePtrOutputWithContext(ctx context.Context) InputPropertiesResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InputPropertiesResponsePtrOutput)
}

// The properties that are associated with an input.
type InputPropertiesResponseOutput struct{ *pulumi.OutputState }

func (InputPropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InputPropertiesResponse)(nil)).Elem()
}

func (o InputPropertiesResponseOutput) ToInputPropertiesResponseOutput() InputPropertiesResponseOutput {
	return o
}

func (o InputPropertiesResponseOutput) ToInputPropertiesResponseOutputWithContext(ctx context.Context) InputPropertiesResponseOutput {
	return o
}

func (o InputPropertiesResponseOutput) ToInputPropertiesResponsePtrOutput() InputPropertiesResponsePtrOutput {
	return o.ToInputPropertiesResponsePtrOutputWithContext(context.Background())
}

func (o InputPropertiesResponseOutput) ToInputPropertiesResponsePtrOutputWithContext(ctx context.Context) InputPropertiesResponsePtrOutput {
	return o.ApplyT(func(v InputPropertiesResponse) *InputPropertiesResponse {
		return &v
	}).(InputPropertiesResponsePtrOutput)
}

// Describes conditions applicable to the Input, Output, or the job overall, that warrant customer attention.
func (o InputPropertiesResponseOutput) Diagnostics() DiagnosticsResponseOutput {
	return o.ApplyT(func(v InputPropertiesResponse) DiagnosticsResponse { return v.Diagnostics }).(DiagnosticsResponseOutput)
}

// The current entity tag for the input. This is an opaque string. You can use it to detect whether the resource has changed between requests. You can also use it in the If-Match or If-None-Match headers for write operations for optimistic concurrency.
func (o InputPropertiesResponseOutput) Etag() pulumi.StringOutput {
	return o.ApplyT(func(v InputPropertiesResponse) string { return v.Etag }).(pulumi.StringOutput)
}

// Describes how data from an input is serialized or how data is serialized when written to an output. Required on PUT (CreateOrReplace) requests.
func (o InputPropertiesResponseOutput) Serialization() SerializationResponsePtrOutput {
	return o.ApplyT(func(v InputPropertiesResponse) *SerializationResponse { return v.Serialization }).(SerializationResponsePtrOutput)
}

// Indicates whether the input is a source of reference data or stream data. Required on PUT (CreateOrReplace) requests.
func (o InputPropertiesResponseOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InputPropertiesResponse) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type InputPropertiesResponsePtrOutput struct{ *pulumi.OutputState }

func (InputPropertiesResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**InputPropertiesResponse)(nil)).Elem()
}

func (o InputPropertiesResponsePtrOutput) ToInputPropertiesResponsePtrOutput() InputPropertiesResponsePtrOutput {
	return o
}

func (o InputPropertiesResponsePtrOutput) ToInputPropertiesResponsePtrOutputWithContext(ctx context.Context) InputPropertiesResponsePtrOutput {
	return o
}

func (o InputPropertiesResponsePtrOutput) Elem() InputPropertiesResponseOutput {
	return o.ApplyT(func(v *InputPropertiesResponse) InputPropertiesResponse { return *v }).(InputPropertiesResponseOutput)
}

// Describes conditions applicable to the Input, Output, or the job overall, that warrant customer attention.
func (o InputPropertiesResponsePtrOutput) Diagnostics() DiagnosticsResponsePtrOutput {
	return o.ApplyT(func(v *InputPropertiesResponse) *DiagnosticsResponse {
		if v == nil {
			return nil
		}
		return &v.Diagnostics
	}).(DiagnosticsResponsePtrOutput)
}

// The current entity tag for the input. This is an opaque string. You can use it to detect whether the resource has changed between requests. You can also use it in the If-Match or If-None-Match headers for write operations for optimistic concurrency.
func (o InputPropertiesResponsePtrOutput) Etag() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *InputPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Etag
	}).(pulumi.StringPtrOutput)
}

// Describes how data from an input is serialized or how data is serialized when written to an output. Required on PUT (CreateOrReplace) requests.
func (o InputPropertiesResponsePtrOutput) Serialization() SerializationResponsePtrOutput {
	return o.ApplyT(func(v *InputPropertiesResponse) *SerializationResponse {
		if v == nil {
			return nil
		}
		return v.Serialization
	}).(SerializationResponsePtrOutput)
}

// Indicates whether the input is a source of reference data or stream data. Required on PUT (CreateOrReplace) requests.
func (o InputPropertiesResponsePtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *InputPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return v.Type
	}).(pulumi.StringPtrOutput)
}

// An input object, containing all information associated with the named input. All inputs are contained under a streaming job.
type InputResponse struct {
	// Resource Id
	Id string `pulumi:"id"`
	// Resource name
	Name *string `pulumi:"name"`
	// The properties that are associated with an input. Required on PUT (CreateOrReplace) requests.
	Properties *InputPropertiesResponse `pulumi:"properties"`
	// Resource type
	Type string `pulumi:"type"`
}

// InputResponseInput is an input type that accepts InputResponseArgs and InputResponseOutput values.
// You can construct a concrete instance of `InputResponseInput` via:
//
//          InputResponseArgs{...}
type InputResponseInput interface {
	pulumi.Input

	ToInputResponseOutput() InputResponseOutput
	ToInputResponseOutputWithContext(context.Context) InputResponseOutput
}

// An input object, containing all information associated with the named input. All inputs are contained under a streaming job.
type InputResponseArgs struct {
	// Resource Id
	Id pulumi.StringInput `pulumi:"id"`
	// Resource name
	Name pulumi.StringPtrInput `pulumi:"name"`
	// The properties that are associated with an input. Required on PUT (CreateOrReplace) requests.
	Properties InputPropertiesResponsePtrInput `pulumi:"properties"`
	// Resource type
	Type pulumi.StringInput `pulumi:"type"`
}

func (InputResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InputResponse)(nil)).Elem()
}

func (i InputResponseArgs) ToInputResponseOutput() InputResponseOutput {
	return i.ToInputResponseOutputWithContext(context.Background())
}

func (i InputResponseArgs) ToInputResponseOutputWithContext(ctx context.Context) InputResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InputResponseOutput)
}

// InputResponseArrayInput is an input type that accepts InputResponseArray and InputResponseArrayOutput values.
// You can construct a concrete instance of `InputResponseArrayInput` via:
//
//          InputResponseArray{ InputResponseArgs{...} }
type InputResponseArrayInput interface {
	pulumi.Input

	ToInputResponseArrayOutput() InputResponseArrayOutput
	ToInputResponseArrayOutputWithContext(context.Context) InputResponseArrayOutput
}

type InputResponseArray []InputResponseInput

func (InputResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InputResponse)(nil)).Elem()
}

func (i InputResponseArray) ToInputResponseArrayOutput() InputResponseArrayOutput {
	return i.ToInputResponseArrayOutputWithContext(context.Background())
}

func (i InputResponseArray) ToInputResponseArrayOutputWithContext(ctx context.Context) InputResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InputResponseArrayOutput)
}

// An input object, containing all information associated with the named input. All inputs are contained under a streaming job.
type InputResponseOutput struct{ *pulumi.OutputState }

func (InputResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InputResponse)(nil)).Elem()
}

func (o InputResponseOutput) ToInputResponseOutput() InputResponseOutput {
	return o
}

func (o InputResponseOutput) ToInputResponseOutputWithContext(ctx context.Context) InputResponseOutput {
	return o
}

// Resource Id
func (o InputResponseOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v InputResponse) string { return v.Id }).(pulumi.StringOutput)
}

// Resource name
func (o InputResponseOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InputResponse) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The properties that are associated with an input. Required on PUT (CreateOrReplace) requests.
func (o InputResponseOutput) Properties() InputPropertiesResponsePtrOutput {
	return o.ApplyT(func(v InputResponse) *InputPropertiesResponse { return v.Properties }).(InputPropertiesResponsePtrOutput)
}

// Resource type
func (o InputResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v InputResponse) string { return v.Type }).(pulumi.StringOutput)
}

type InputResponseArrayOutput struct{ *pulumi.OutputState }

func (InputResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InputResponse)(nil)).Elem()
}

func (o InputResponseArrayOutput) ToInputResponseArrayOutput() InputResponseArrayOutput {
	return o
}

func (o InputResponseArrayOutput) ToInputResponseArrayOutputWithContext(ctx context.Context) InputResponseArrayOutput {
	return o
}

func (o InputResponseArrayOutput) Index(i pulumi.IntInput) InputResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) InputResponse {
		return vs[0].([]InputResponse)[vs[1].(int)]
	}).(InputResponseOutput)
}

// An output object, containing all information associated with the named output. All outputs are contained under a streaming job.
type OutputType struct {
	// Describes the data source that output will be written to. Required on PUT (CreateOrReplace) requests.
	Datasource *OutputDataSource `pulumi:"datasource"`
	// Resource name
	Name *string `pulumi:"name"`
	// Describes how data from an input is serialized or how data is serialized when written to an output. Required on PUT (CreateOrReplace) requests.
	Serialization *Serialization `pulumi:"serialization"`
}

// OutputTypeInput is an input type that accepts OutputTypeArgs and OutputTypeOutput values.
// You can construct a concrete instance of `OutputTypeInput` via:
//
//          OutputTypeArgs{...}
type OutputTypeInput interface {
	pulumi.Input

	ToOutputTypeOutput() OutputTypeOutput
	ToOutputTypeOutputWithContext(context.Context) OutputTypeOutput
}

// An output object, containing all information associated with the named output. All outputs are contained under a streaming job.
type OutputTypeArgs struct {
	// Describes the data source that output will be written to. Required on PUT (CreateOrReplace) requests.
	Datasource OutputDataSourcePtrInput `pulumi:"datasource"`
	// Resource name
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Describes how data from an input is serialized or how data is serialized when written to an output. Required on PUT (CreateOrReplace) requests.
	Serialization SerializationPtrInput `pulumi:"serialization"`
}

func (OutputTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OutputType)(nil)).Elem()
}

func (i OutputTypeArgs) ToOutputTypeOutput() OutputTypeOutput {
	return i.ToOutputTypeOutputWithContext(context.Background())
}

func (i OutputTypeArgs) ToOutputTypeOutputWithContext(ctx context.Context) OutputTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OutputTypeOutput)
}

// OutputTypeArrayInput is an input type that accepts OutputTypeArray and OutputTypeArrayOutput values.
// You can construct a concrete instance of `OutputTypeArrayInput` via:
//
//          OutputTypeArray{ OutputTypeArgs{...} }
type OutputTypeArrayInput interface {
	pulumi.Input

	ToOutputTypeArrayOutput() OutputTypeArrayOutput
	ToOutputTypeArrayOutputWithContext(context.Context) OutputTypeArrayOutput
}

type OutputTypeArray []OutputTypeInput

func (OutputTypeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]OutputType)(nil)).Elem()
}

func (i OutputTypeArray) ToOutputTypeArrayOutput() OutputTypeArrayOutput {
	return i.ToOutputTypeArrayOutputWithContext(context.Background())
}

func (i OutputTypeArray) ToOutputTypeArrayOutputWithContext(ctx context.Context) OutputTypeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OutputTypeArrayOutput)
}

// An output object, containing all information associated with the named output. All outputs are contained under a streaming job.
type OutputTypeOutput struct{ *pulumi.OutputState }

func (OutputTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OutputType)(nil)).Elem()
}

func (o OutputTypeOutput) ToOutputTypeOutput() OutputTypeOutput {
	return o
}

func (o OutputTypeOutput) ToOutputTypeOutputWithContext(ctx context.Context) OutputTypeOutput {
	return o
}

// Describes the data source that output will be written to. Required on PUT (CreateOrReplace) requests.
func (o OutputTypeOutput) Datasource() OutputDataSourcePtrOutput {
	return o.ApplyT(func(v OutputType) *OutputDataSource { return v.Datasource }).(OutputDataSourcePtrOutput)
}

// Resource name
func (o OutputTypeOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OutputType) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Describes how data from an input is serialized or how data is serialized when written to an output. Required on PUT (CreateOrReplace) requests.
func (o OutputTypeOutput) Serialization() SerializationPtrOutput {
	return o.ApplyT(func(v OutputType) *Serialization { return v.Serialization }).(SerializationPtrOutput)
}

type OutputTypeArrayOutput struct{ *pulumi.OutputState }

func (OutputTypeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]OutputType)(nil)).Elem()
}

func (o OutputTypeArrayOutput) ToOutputTypeArrayOutput() OutputTypeArrayOutput {
	return o
}

func (o OutputTypeArrayOutput) ToOutputTypeArrayOutputWithContext(ctx context.Context) OutputTypeArrayOutput {
	return o
}

func (o OutputTypeArrayOutput) Index(i pulumi.IntInput) OutputTypeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) OutputType {
		return vs[0].([]OutputType)[vs[1].(int)]
	}).(OutputTypeOutput)
}

// Describes the data source that output will be written to.
type OutputDataSource struct {
	// Indicates the type of data source output will be written to. Required on PUT (CreateOrReplace) requests.
	Type *string `pulumi:"type"`
}

// OutputDataSourceInput is an input type that accepts OutputDataSourceArgs and OutputDataSourceOutput values.
// You can construct a concrete instance of `OutputDataSourceInput` via:
//
//          OutputDataSourceArgs{...}
type OutputDataSourceInput interface {
	pulumi.Input

	ToOutputDataSourceOutput() OutputDataSourceOutput
	ToOutputDataSourceOutputWithContext(context.Context) OutputDataSourceOutput
}

// Describes the data source that output will be written to.
type OutputDataSourceArgs struct {
	// Indicates the type of data source output will be written to. Required on PUT (CreateOrReplace) requests.
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (OutputDataSourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OutputDataSource)(nil)).Elem()
}

func (i OutputDataSourceArgs) ToOutputDataSourceOutput() OutputDataSourceOutput {
	return i.ToOutputDataSourceOutputWithContext(context.Background())
}

func (i OutputDataSourceArgs) ToOutputDataSourceOutputWithContext(ctx context.Context) OutputDataSourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OutputDataSourceOutput)
}

func (i OutputDataSourceArgs) ToOutputDataSourcePtrOutput() OutputDataSourcePtrOutput {
	return i.ToOutputDataSourcePtrOutputWithContext(context.Background())
}

func (i OutputDataSourceArgs) ToOutputDataSourcePtrOutputWithContext(ctx context.Context) OutputDataSourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OutputDataSourceOutput).ToOutputDataSourcePtrOutputWithContext(ctx)
}

// OutputDataSourcePtrInput is an input type that accepts OutputDataSourceArgs, OutputDataSourcePtr and OutputDataSourcePtrOutput values.
// You can construct a concrete instance of `OutputDataSourcePtrInput` via:
//
//          OutputDataSourceArgs{...}
//
//  or:
//
//          nil
type OutputDataSourcePtrInput interface {
	pulumi.Input

	ToOutputDataSourcePtrOutput() OutputDataSourcePtrOutput
	ToOutputDataSourcePtrOutputWithContext(context.Context) OutputDataSourcePtrOutput
}

type outputDataSourcePtrType OutputDataSourceArgs

func OutputDataSourcePtr(v *OutputDataSourceArgs) OutputDataSourcePtrInput {
	return (*outputDataSourcePtrType)(v)
}

func (*outputDataSourcePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**OutputDataSource)(nil)).Elem()
}

func (i *outputDataSourcePtrType) ToOutputDataSourcePtrOutput() OutputDataSourcePtrOutput {
	return i.ToOutputDataSourcePtrOutputWithContext(context.Background())
}

func (i *outputDataSourcePtrType) ToOutputDataSourcePtrOutputWithContext(ctx context.Context) OutputDataSourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OutputDataSourcePtrOutput)
}

// Describes the data source that output will be written to.
type OutputDataSourceOutput struct{ *pulumi.OutputState }

func (OutputDataSourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OutputDataSource)(nil)).Elem()
}

func (o OutputDataSourceOutput) ToOutputDataSourceOutput() OutputDataSourceOutput {
	return o
}

func (o OutputDataSourceOutput) ToOutputDataSourceOutputWithContext(ctx context.Context) OutputDataSourceOutput {
	return o
}

func (o OutputDataSourceOutput) ToOutputDataSourcePtrOutput() OutputDataSourcePtrOutput {
	return o.ToOutputDataSourcePtrOutputWithContext(context.Background())
}

func (o OutputDataSourceOutput) ToOutputDataSourcePtrOutputWithContext(ctx context.Context) OutputDataSourcePtrOutput {
	return o.ApplyT(func(v OutputDataSource) *OutputDataSource {
		return &v
	}).(OutputDataSourcePtrOutput)
}

// Indicates the type of data source output will be written to. Required on PUT (CreateOrReplace) requests.
func (o OutputDataSourceOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OutputDataSource) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type OutputDataSourcePtrOutput struct{ *pulumi.OutputState }

func (OutputDataSourcePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**OutputDataSource)(nil)).Elem()
}

func (o OutputDataSourcePtrOutput) ToOutputDataSourcePtrOutput() OutputDataSourcePtrOutput {
	return o
}

func (o OutputDataSourcePtrOutput) ToOutputDataSourcePtrOutputWithContext(ctx context.Context) OutputDataSourcePtrOutput {
	return o
}

func (o OutputDataSourcePtrOutput) Elem() OutputDataSourceOutput {
	return o.ApplyT(func(v *OutputDataSource) OutputDataSource { return *v }).(OutputDataSourceOutput)
}

// Indicates the type of data source output will be written to. Required on PUT (CreateOrReplace) requests.
func (o OutputDataSourcePtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OutputDataSource) *string {
		if v == nil {
			return nil
		}
		return v.Type
	}).(pulumi.StringPtrOutput)
}

// Describes the data source that output will be written to.
type OutputDataSourceResponse struct {
	// Indicates the type of data source output will be written to. Required on PUT (CreateOrReplace) requests.
	Type *string `pulumi:"type"`
}

// OutputDataSourceResponseInput is an input type that accepts OutputDataSourceResponseArgs and OutputDataSourceResponseOutput values.
// You can construct a concrete instance of `OutputDataSourceResponseInput` via:
//
//          OutputDataSourceResponseArgs{...}
type OutputDataSourceResponseInput interface {
	pulumi.Input

	ToOutputDataSourceResponseOutput() OutputDataSourceResponseOutput
	ToOutputDataSourceResponseOutputWithContext(context.Context) OutputDataSourceResponseOutput
}

// Describes the data source that output will be written to.
type OutputDataSourceResponseArgs struct {
	// Indicates the type of data source output will be written to. Required on PUT (CreateOrReplace) requests.
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (OutputDataSourceResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OutputDataSourceResponse)(nil)).Elem()
}

func (i OutputDataSourceResponseArgs) ToOutputDataSourceResponseOutput() OutputDataSourceResponseOutput {
	return i.ToOutputDataSourceResponseOutputWithContext(context.Background())
}

func (i OutputDataSourceResponseArgs) ToOutputDataSourceResponseOutputWithContext(ctx context.Context) OutputDataSourceResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OutputDataSourceResponseOutput)
}

func (i OutputDataSourceResponseArgs) ToOutputDataSourceResponsePtrOutput() OutputDataSourceResponsePtrOutput {
	return i.ToOutputDataSourceResponsePtrOutputWithContext(context.Background())
}

func (i OutputDataSourceResponseArgs) ToOutputDataSourceResponsePtrOutputWithContext(ctx context.Context) OutputDataSourceResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OutputDataSourceResponseOutput).ToOutputDataSourceResponsePtrOutputWithContext(ctx)
}

// OutputDataSourceResponsePtrInput is an input type that accepts OutputDataSourceResponseArgs, OutputDataSourceResponsePtr and OutputDataSourceResponsePtrOutput values.
// You can construct a concrete instance of `OutputDataSourceResponsePtrInput` via:
//
//          OutputDataSourceResponseArgs{...}
//
//  or:
//
//          nil
type OutputDataSourceResponsePtrInput interface {
	pulumi.Input

	ToOutputDataSourceResponsePtrOutput() OutputDataSourceResponsePtrOutput
	ToOutputDataSourceResponsePtrOutputWithContext(context.Context) OutputDataSourceResponsePtrOutput
}

type outputDataSourceResponsePtrType OutputDataSourceResponseArgs

func OutputDataSourceResponsePtr(v *OutputDataSourceResponseArgs) OutputDataSourceResponsePtrInput {
	return (*outputDataSourceResponsePtrType)(v)
}

func (*outputDataSourceResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**OutputDataSourceResponse)(nil)).Elem()
}

func (i *outputDataSourceResponsePtrType) ToOutputDataSourceResponsePtrOutput() OutputDataSourceResponsePtrOutput {
	return i.ToOutputDataSourceResponsePtrOutputWithContext(context.Background())
}

func (i *outputDataSourceResponsePtrType) ToOutputDataSourceResponsePtrOutputWithContext(ctx context.Context) OutputDataSourceResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OutputDataSourceResponsePtrOutput)
}

// Describes the data source that output will be written to.
type OutputDataSourceResponseOutput struct{ *pulumi.OutputState }

func (OutputDataSourceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OutputDataSourceResponse)(nil)).Elem()
}

func (o OutputDataSourceResponseOutput) ToOutputDataSourceResponseOutput() OutputDataSourceResponseOutput {
	return o
}

func (o OutputDataSourceResponseOutput) ToOutputDataSourceResponseOutputWithContext(ctx context.Context) OutputDataSourceResponseOutput {
	return o
}

func (o OutputDataSourceResponseOutput) ToOutputDataSourceResponsePtrOutput() OutputDataSourceResponsePtrOutput {
	return o.ToOutputDataSourceResponsePtrOutputWithContext(context.Background())
}

func (o OutputDataSourceResponseOutput) ToOutputDataSourceResponsePtrOutputWithContext(ctx context.Context) OutputDataSourceResponsePtrOutput {
	return o.ApplyT(func(v OutputDataSourceResponse) *OutputDataSourceResponse {
		return &v
	}).(OutputDataSourceResponsePtrOutput)
}

// Indicates the type of data source output will be written to. Required on PUT (CreateOrReplace) requests.
func (o OutputDataSourceResponseOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OutputDataSourceResponse) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type OutputDataSourceResponsePtrOutput struct{ *pulumi.OutputState }

func (OutputDataSourceResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**OutputDataSourceResponse)(nil)).Elem()
}

func (o OutputDataSourceResponsePtrOutput) ToOutputDataSourceResponsePtrOutput() OutputDataSourceResponsePtrOutput {
	return o
}

func (o OutputDataSourceResponsePtrOutput) ToOutputDataSourceResponsePtrOutputWithContext(ctx context.Context) OutputDataSourceResponsePtrOutput {
	return o
}

func (o OutputDataSourceResponsePtrOutput) Elem() OutputDataSourceResponseOutput {
	return o.ApplyT(func(v *OutputDataSourceResponse) OutputDataSourceResponse { return *v }).(OutputDataSourceResponseOutput)
}

// Indicates the type of data source output will be written to. Required on PUT (CreateOrReplace) requests.
func (o OutputDataSourceResponsePtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OutputDataSourceResponse) *string {
		if v == nil {
			return nil
		}
		return v.Type
	}).(pulumi.StringPtrOutput)
}

// An output object, containing all information associated with the named output. All outputs are contained under a streaming job.
type OutputResponse struct {
	// Describes the data source that output will be written to. Required on PUT (CreateOrReplace) requests.
	Datasource *OutputDataSourceResponse `pulumi:"datasource"`
	// Describes conditions applicable to the Input, Output, or the job overall, that warrant customer attention.
	Diagnostics DiagnosticsResponse `pulumi:"diagnostics"`
	// The current entity tag for the output. This is an opaque string. You can use it to detect whether the resource has changed between requests. You can also use it in the If-Match or If-None-Match headers for write operations for optimistic concurrency.
	Etag string `pulumi:"etag"`
	// Resource Id
	Id string `pulumi:"id"`
	// Resource name
	Name *string `pulumi:"name"`
	// Describes how data from an input is serialized or how data is serialized when written to an output. Required on PUT (CreateOrReplace) requests.
	Serialization *SerializationResponse `pulumi:"serialization"`
	// Resource type
	Type string `pulumi:"type"`
}

// OutputResponseInput is an input type that accepts OutputResponseArgs and OutputResponseOutput values.
// You can construct a concrete instance of `OutputResponseInput` via:
//
//          OutputResponseArgs{...}
type OutputResponseInput interface {
	pulumi.Input

	ToOutputResponseOutput() OutputResponseOutput
	ToOutputResponseOutputWithContext(context.Context) OutputResponseOutput
}

// An output object, containing all information associated with the named output. All outputs are contained under a streaming job.
type OutputResponseArgs struct {
	// Describes the data source that output will be written to. Required on PUT (CreateOrReplace) requests.
	Datasource OutputDataSourceResponsePtrInput `pulumi:"datasource"`
	// Describes conditions applicable to the Input, Output, or the job overall, that warrant customer attention.
	Diagnostics DiagnosticsResponseInput `pulumi:"diagnostics"`
	// The current entity tag for the output. This is an opaque string. You can use it to detect whether the resource has changed between requests. You can also use it in the If-Match or If-None-Match headers for write operations for optimistic concurrency.
	Etag pulumi.StringInput `pulumi:"etag"`
	// Resource Id
	Id pulumi.StringInput `pulumi:"id"`
	// Resource name
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Describes how data from an input is serialized or how data is serialized when written to an output. Required on PUT (CreateOrReplace) requests.
	Serialization SerializationResponsePtrInput `pulumi:"serialization"`
	// Resource type
	Type pulumi.StringInput `pulumi:"type"`
}

func (OutputResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OutputResponse)(nil)).Elem()
}

func (i OutputResponseArgs) ToOutputResponseOutput() OutputResponseOutput {
	return i.ToOutputResponseOutputWithContext(context.Background())
}

func (i OutputResponseArgs) ToOutputResponseOutputWithContext(ctx context.Context) OutputResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OutputResponseOutput)
}

// OutputResponseArrayInput is an input type that accepts OutputResponseArray and OutputResponseArrayOutput values.
// You can construct a concrete instance of `OutputResponseArrayInput` via:
//
//          OutputResponseArray{ OutputResponseArgs{...} }
type OutputResponseArrayInput interface {
	pulumi.Input

	ToOutputResponseArrayOutput() OutputResponseArrayOutput
	ToOutputResponseArrayOutputWithContext(context.Context) OutputResponseArrayOutput
}

type OutputResponseArray []OutputResponseInput

func (OutputResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]OutputResponse)(nil)).Elem()
}

func (i OutputResponseArray) ToOutputResponseArrayOutput() OutputResponseArrayOutput {
	return i.ToOutputResponseArrayOutputWithContext(context.Background())
}

func (i OutputResponseArray) ToOutputResponseArrayOutputWithContext(ctx context.Context) OutputResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OutputResponseArrayOutput)
}

// An output object, containing all information associated with the named output. All outputs are contained under a streaming job.
type OutputResponseOutput struct{ *pulumi.OutputState }

func (OutputResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OutputResponse)(nil)).Elem()
}

func (o OutputResponseOutput) ToOutputResponseOutput() OutputResponseOutput {
	return o
}

func (o OutputResponseOutput) ToOutputResponseOutputWithContext(ctx context.Context) OutputResponseOutput {
	return o
}

// Describes the data source that output will be written to. Required on PUT (CreateOrReplace) requests.
func (o OutputResponseOutput) Datasource() OutputDataSourceResponsePtrOutput {
	return o.ApplyT(func(v OutputResponse) *OutputDataSourceResponse { return v.Datasource }).(OutputDataSourceResponsePtrOutput)
}

// Describes conditions applicable to the Input, Output, or the job overall, that warrant customer attention.
func (o OutputResponseOutput) Diagnostics() DiagnosticsResponseOutput {
	return o.ApplyT(func(v OutputResponse) DiagnosticsResponse { return v.Diagnostics }).(DiagnosticsResponseOutput)
}

// The current entity tag for the output. This is an opaque string. You can use it to detect whether the resource has changed between requests. You can also use it in the If-Match or If-None-Match headers for write operations for optimistic concurrency.
func (o OutputResponseOutput) Etag() pulumi.StringOutput {
	return o.ApplyT(func(v OutputResponse) string { return v.Etag }).(pulumi.StringOutput)
}

// Resource Id
func (o OutputResponseOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v OutputResponse) string { return v.Id }).(pulumi.StringOutput)
}

// Resource name
func (o OutputResponseOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OutputResponse) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Describes how data from an input is serialized or how data is serialized when written to an output. Required on PUT (CreateOrReplace) requests.
func (o OutputResponseOutput) Serialization() SerializationResponsePtrOutput {
	return o.ApplyT(func(v OutputResponse) *SerializationResponse { return v.Serialization }).(SerializationResponsePtrOutput)
}

// Resource type
func (o OutputResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v OutputResponse) string { return v.Type }).(pulumi.StringOutput)
}

type OutputResponseArrayOutput struct{ *pulumi.OutputState }

func (OutputResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]OutputResponse)(nil)).Elem()
}

func (o OutputResponseArrayOutput) ToOutputResponseArrayOutput() OutputResponseArrayOutput {
	return o
}

func (o OutputResponseArrayOutput) ToOutputResponseArrayOutputWithContext(ctx context.Context) OutputResponseArrayOutput {
	return o
}

func (o OutputResponseArrayOutput) Index(i pulumi.IntInput) OutputResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) OutputResponse {
		return vs[0].([]OutputResponse)[vs[1].(int)]
	}).(OutputResponseOutput)
}

// Describes how data from an input is serialized or how data is serialized when written to an output.
type Serialization struct {
	// Indicates the type of serialization that the input or output uses. Required on PUT (CreateOrReplace) requests.
	Type *string `pulumi:"type"`
}

// SerializationInput is an input type that accepts SerializationArgs and SerializationOutput values.
// You can construct a concrete instance of `SerializationInput` via:
//
//          SerializationArgs{...}
type SerializationInput interface {
	pulumi.Input

	ToSerializationOutput() SerializationOutput
	ToSerializationOutputWithContext(context.Context) SerializationOutput
}

// Describes how data from an input is serialized or how data is serialized when written to an output.
type SerializationArgs struct {
	// Indicates the type of serialization that the input or output uses. Required on PUT (CreateOrReplace) requests.
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (SerializationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Serialization)(nil)).Elem()
}

func (i SerializationArgs) ToSerializationOutput() SerializationOutput {
	return i.ToSerializationOutputWithContext(context.Background())
}

func (i SerializationArgs) ToSerializationOutputWithContext(ctx context.Context) SerializationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SerializationOutput)
}

func (i SerializationArgs) ToSerializationPtrOutput() SerializationPtrOutput {
	return i.ToSerializationPtrOutputWithContext(context.Background())
}

func (i SerializationArgs) ToSerializationPtrOutputWithContext(ctx context.Context) SerializationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SerializationOutput).ToSerializationPtrOutputWithContext(ctx)
}

// SerializationPtrInput is an input type that accepts SerializationArgs, SerializationPtr and SerializationPtrOutput values.
// You can construct a concrete instance of `SerializationPtrInput` via:
//
//          SerializationArgs{...}
//
//  or:
//
//          nil
type SerializationPtrInput interface {
	pulumi.Input

	ToSerializationPtrOutput() SerializationPtrOutput
	ToSerializationPtrOutputWithContext(context.Context) SerializationPtrOutput
}

type serializationPtrType SerializationArgs

func SerializationPtr(v *SerializationArgs) SerializationPtrInput {
	return (*serializationPtrType)(v)
}

func (*serializationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Serialization)(nil)).Elem()
}

func (i *serializationPtrType) ToSerializationPtrOutput() SerializationPtrOutput {
	return i.ToSerializationPtrOutputWithContext(context.Background())
}

func (i *serializationPtrType) ToSerializationPtrOutputWithContext(ctx context.Context) SerializationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SerializationPtrOutput)
}

// Describes how data from an input is serialized or how data is serialized when written to an output.
type SerializationOutput struct{ *pulumi.OutputState }

func (SerializationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Serialization)(nil)).Elem()
}

func (o SerializationOutput) ToSerializationOutput() SerializationOutput {
	return o
}

func (o SerializationOutput) ToSerializationOutputWithContext(ctx context.Context) SerializationOutput {
	return o
}

func (o SerializationOutput) ToSerializationPtrOutput() SerializationPtrOutput {
	return o.ToSerializationPtrOutputWithContext(context.Background())
}

func (o SerializationOutput) ToSerializationPtrOutputWithContext(ctx context.Context) SerializationPtrOutput {
	return o.ApplyT(func(v Serialization) *Serialization {
		return &v
	}).(SerializationPtrOutput)
}

// Indicates the type of serialization that the input or output uses. Required on PUT (CreateOrReplace) requests.
func (o SerializationOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Serialization) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type SerializationPtrOutput struct{ *pulumi.OutputState }

func (SerializationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Serialization)(nil)).Elem()
}

func (o SerializationPtrOutput) ToSerializationPtrOutput() SerializationPtrOutput {
	return o
}

func (o SerializationPtrOutput) ToSerializationPtrOutputWithContext(ctx context.Context) SerializationPtrOutput {
	return o
}

func (o SerializationPtrOutput) Elem() SerializationOutput {
	return o.ApplyT(func(v *Serialization) Serialization { return *v }).(SerializationOutput)
}

// Indicates the type of serialization that the input or output uses. Required on PUT (CreateOrReplace) requests.
func (o SerializationPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Serialization) *string {
		if v == nil {
			return nil
		}
		return v.Type
	}).(pulumi.StringPtrOutput)
}

// Describes how data from an input is serialized or how data is serialized when written to an output.
type SerializationResponse struct {
	// Indicates the type of serialization that the input or output uses. Required on PUT (CreateOrReplace) requests.
	Type *string `pulumi:"type"`
}

// SerializationResponseInput is an input type that accepts SerializationResponseArgs and SerializationResponseOutput values.
// You can construct a concrete instance of `SerializationResponseInput` via:
//
//          SerializationResponseArgs{...}
type SerializationResponseInput interface {
	pulumi.Input

	ToSerializationResponseOutput() SerializationResponseOutput
	ToSerializationResponseOutputWithContext(context.Context) SerializationResponseOutput
}

// Describes how data from an input is serialized or how data is serialized when written to an output.
type SerializationResponseArgs struct {
	// Indicates the type of serialization that the input or output uses. Required on PUT (CreateOrReplace) requests.
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (SerializationResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SerializationResponse)(nil)).Elem()
}

func (i SerializationResponseArgs) ToSerializationResponseOutput() SerializationResponseOutput {
	return i.ToSerializationResponseOutputWithContext(context.Background())
}

func (i SerializationResponseArgs) ToSerializationResponseOutputWithContext(ctx context.Context) SerializationResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SerializationResponseOutput)
}

func (i SerializationResponseArgs) ToSerializationResponsePtrOutput() SerializationResponsePtrOutput {
	return i.ToSerializationResponsePtrOutputWithContext(context.Background())
}

func (i SerializationResponseArgs) ToSerializationResponsePtrOutputWithContext(ctx context.Context) SerializationResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SerializationResponseOutput).ToSerializationResponsePtrOutputWithContext(ctx)
}

// SerializationResponsePtrInput is an input type that accepts SerializationResponseArgs, SerializationResponsePtr and SerializationResponsePtrOutput values.
// You can construct a concrete instance of `SerializationResponsePtrInput` via:
//
//          SerializationResponseArgs{...}
//
//  or:
//
//          nil
type SerializationResponsePtrInput interface {
	pulumi.Input

	ToSerializationResponsePtrOutput() SerializationResponsePtrOutput
	ToSerializationResponsePtrOutputWithContext(context.Context) SerializationResponsePtrOutput
}

type serializationResponsePtrType SerializationResponseArgs

func SerializationResponsePtr(v *SerializationResponseArgs) SerializationResponsePtrInput {
	return (*serializationResponsePtrType)(v)
}

func (*serializationResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SerializationResponse)(nil)).Elem()
}

func (i *serializationResponsePtrType) ToSerializationResponsePtrOutput() SerializationResponsePtrOutput {
	return i.ToSerializationResponsePtrOutputWithContext(context.Background())
}

func (i *serializationResponsePtrType) ToSerializationResponsePtrOutputWithContext(ctx context.Context) SerializationResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SerializationResponsePtrOutput)
}

// Describes how data from an input is serialized or how data is serialized when written to an output.
type SerializationResponseOutput struct{ *pulumi.OutputState }

func (SerializationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SerializationResponse)(nil)).Elem()
}

func (o SerializationResponseOutput) ToSerializationResponseOutput() SerializationResponseOutput {
	return o
}

func (o SerializationResponseOutput) ToSerializationResponseOutputWithContext(ctx context.Context) SerializationResponseOutput {
	return o
}

func (o SerializationResponseOutput) ToSerializationResponsePtrOutput() SerializationResponsePtrOutput {
	return o.ToSerializationResponsePtrOutputWithContext(context.Background())
}

func (o SerializationResponseOutput) ToSerializationResponsePtrOutputWithContext(ctx context.Context) SerializationResponsePtrOutput {
	return o.ApplyT(func(v SerializationResponse) *SerializationResponse {
		return &v
	}).(SerializationResponsePtrOutput)
}

// Indicates the type of serialization that the input or output uses. Required on PUT (CreateOrReplace) requests.
func (o SerializationResponseOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SerializationResponse) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type SerializationResponsePtrOutput struct{ *pulumi.OutputState }

func (SerializationResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SerializationResponse)(nil)).Elem()
}

func (o SerializationResponsePtrOutput) ToSerializationResponsePtrOutput() SerializationResponsePtrOutput {
	return o
}

func (o SerializationResponsePtrOutput) ToSerializationResponsePtrOutputWithContext(ctx context.Context) SerializationResponsePtrOutput {
	return o
}

func (o SerializationResponsePtrOutput) Elem() SerializationResponseOutput {
	return o.ApplyT(func(v *SerializationResponse) SerializationResponse { return *v }).(SerializationResponseOutput)
}

// Indicates the type of serialization that the input or output uses. Required on PUT (CreateOrReplace) requests.
func (o SerializationResponsePtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SerializationResponse) *string {
		if v == nil {
			return nil
		}
		return v.Type
	}).(pulumi.StringPtrOutput)
}

// The properties that are associated with a SKU.
type Sku struct {
	// The name of the SKU. Required on PUT (CreateOrReplace) requests.
	Name *string `pulumi:"name"`
}

// SkuInput is an input type that accepts SkuArgs and SkuOutput values.
// You can construct a concrete instance of `SkuInput` via:
//
//          SkuArgs{...}
type SkuInput interface {
	pulumi.Input

	ToSkuOutput() SkuOutput
	ToSkuOutputWithContext(context.Context) SkuOutput
}

// The properties that are associated with a SKU.
type SkuArgs struct {
	// The name of the SKU. Required on PUT (CreateOrReplace) requests.
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (SkuArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Sku)(nil)).Elem()
}

func (i SkuArgs) ToSkuOutput() SkuOutput {
	return i.ToSkuOutputWithContext(context.Background())
}

func (i SkuArgs) ToSkuOutputWithContext(ctx context.Context) SkuOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SkuOutput)
}

func (i SkuArgs) ToSkuPtrOutput() SkuPtrOutput {
	return i.ToSkuPtrOutputWithContext(context.Background())
}

func (i SkuArgs) ToSkuPtrOutputWithContext(ctx context.Context) SkuPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SkuOutput).ToSkuPtrOutputWithContext(ctx)
}

// SkuPtrInput is an input type that accepts SkuArgs, SkuPtr and SkuPtrOutput values.
// You can construct a concrete instance of `SkuPtrInput` via:
//
//          SkuArgs{...}
//
//  or:
//
//          nil
type SkuPtrInput interface {
	pulumi.Input

	ToSkuPtrOutput() SkuPtrOutput
	ToSkuPtrOutputWithContext(context.Context) SkuPtrOutput
}

type skuPtrType SkuArgs

func SkuPtr(v *SkuArgs) SkuPtrInput {
	return (*skuPtrType)(v)
}

func (*skuPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Sku)(nil)).Elem()
}

func (i *skuPtrType) ToSkuPtrOutput() SkuPtrOutput {
	return i.ToSkuPtrOutputWithContext(context.Background())
}

func (i *skuPtrType) ToSkuPtrOutputWithContext(ctx context.Context) SkuPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SkuPtrOutput)
}

// The properties that are associated with a SKU.
type SkuOutput struct{ *pulumi.OutputState }

func (SkuOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Sku)(nil)).Elem()
}

func (o SkuOutput) ToSkuOutput() SkuOutput {
	return o
}

func (o SkuOutput) ToSkuOutputWithContext(ctx context.Context) SkuOutput {
	return o
}

func (o SkuOutput) ToSkuPtrOutput() SkuPtrOutput {
	return o.ToSkuPtrOutputWithContext(context.Background())
}

func (o SkuOutput) ToSkuPtrOutputWithContext(ctx context.Context) SkuPtrOutput {
	return o.ApplyT(func(v Sku) *Sku {
		return &v
	}).(SkuPtrOutput)
}

// The name of the SKU. Required on PUT (CreateOrReplace) requests.
func (o SkuOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Sku) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type SkuPtrOutput struct{ *pulumi.OutputState }

func (SkuPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Sku)(nil)).Elem()
}

func (o SkuPtrOutput) ToSkuPtrOutput() SkuPtrOutput {
	return o
}

func (o SkuPtrOutput) ToSkuPtrOutputWithContext(ctx context.Context) SkuPtrOutput {
	return o
}

func (o SkuPtrOutput) Elem() SkuOutput {
	return o.ApplyT(func(v *Sku) Sku { return *v }).(SkuOutput)
}

// The name of the SKU. Required on PUT (CreateOrReplace) requests.
func (o SkuPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Sku) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// The properties that are associated with a SKU.
type SkuResponse struct {
	// The name of the SKU. Required on PUT (CreateOrReplace) requests.
	Name *string `pulumi:"name"`
}

// SkuResponseInput is an input type that accepts SkuResponseArgs and SkuResponseOutput values.
// You can construct a concrete instance of `SkuResponseInput` via:
//
//          SkuResponseArgs{...}
type SkuResponseInput interface {
	pulumi.Input

	ToSkuResponseOutput() SkuResponseOutput
	ToSkuResponseOutputWithContext(context.Context) SkuResponseOutput
}

// The properties that are associated with a SKU.
type SkuResponseArgs struct {
	// The name of the SKU. Required on PUT (CreateOrReplace) requests.
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (SkuResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SkuResponse)(nil)).Elem()
}

func (i SkuResponseArgs) ToSkuResponseOutput() SkuResponseOutput {
	return i.ToSkuResponseOutputWithContext(context.Background())
}

func (i SkuResponseArgs) ToSkuResponseOutputWithContext(ctx context.Context) SkuResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SkuResponseOutput)
}

func (i SkuResponseArgs) ToSkuResponsePtrOutput() SkuResponsePtrOutput {
	return i.ToSkuResponsePtrOutputWithContext(context.Background())
}

func (i SkuResponseArgs) ToSkuResponsePtrOutputWithContext(ctx context.Context) SkuResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SkuResponseOutput).ToSkuResponsePtrOutputWithContext(ctx)
}

// SkuResponsePtrInput is an input type that accepts SkuResponseArgs, SkuResponsePtr and SkuResponsePtrOutput values.
// You can construct a concrete instance of `SkuResponsePtrInput` via:
//
//          SkuResponseArgs{...}
//
//  or:
//
//          nil
type SkuResponsePtrInput interface {
	pulumi.Input

	ToSkuResponsePtrOutput() SkuResponsePtrOutput
	ToSkuResponsePtrOutputWithContext(context.Context) SkuResponsePtrOutput
}

type skuResponsePtrType SkuResponseArgs

func SkuResponsePtr(v *SkuResponseArgs) SkuResponsePtrInput {
	return (*skuResponsePtrType)(v)
}

func (*skuResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SkuResponse)(nil)).Elem()
}

func (i *skuResponsePtrType) ToSkuResponsePtrOutput() SkuResponsePtrOutput {
	return i.ToSkuResponsePtrOutputWithContext(context.Background())
}

func (i *skuResponsePtrType) ToSkuResponsePtrOutputWithContext(ctx context.Context) SkuResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SkuResponsePtrOutput)
}

// The properties that are associated with a SKU.
type SkuResponseOutput struct{ *pulumi.OutputState }

func (SkuResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SkuResponse)(nil)).Elem()
}

func (o SkuResponseOutput) ToSkuResponseOutput() SkuResponseOutput {
	return o
}

func (o SkuResponseOutput) ToSkuResponseOutputWithContext(ctx context.Context) SkuResponseOutput {
	return o
}

func (o SkuResponseOutput) ToSkuResponsePtrOutput() SkuResponsePtrOutput {
	return o.ToSkuResponsePtrOutputWithContext(context.Background())
}

func (o SkuResponseOutput) ToSkuResponsePtrOutputWithContext(ctx context.Context) SkuResponsePtrOutput {
	return o.ApplyT(func(v SkuResponse) *SkuResponse {
		return &v
	}).(SkuResponsePtrOutput)
}

// The name of the SKU. Required on PUT (CreateOrReplace) requests.
func (o SkuResponseOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SkuResponse) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type SkuResponsePtrOutput struct{ *pulumi.OutputState }

func (SkuResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SkuResponse)(nil)).Elem()
}

func (o SkuResponsePtrOutput) ToSkuResponsePtrOutput() SkuResponsePtrOutput {
	return o
}

func (o SkuResponsePtrOutput) ToSkuResponsePtrOutputWithContext(ctx context.Context) SkuResponsePtrOutput {
	return o
}

func (o SkuResponsePtrOutput) Elem() SkuResponseOutput {
	return o.ApplyT(func(v *SkuResponse) SkuResponse { return *v }).(SkuResponseOutput)
}

// The name of the SKU. Required on PUT (CreateOrReplace) requests.
func (o SkuResponsePtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SkuResponse) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// A transformation object, containing all information associated with the named transformation. All transformations are contained under a streaming job.
type Transformation struct {
	// Resource name
	Name *string `pulumi:"name"`
	// Specifies the query that will be run in the streaming job. You can learn more about the Stream Analytics Query Language (SAQL) here: https://msdn.microsoft.com/library/azure/dn834998 . Required on PUT (CreateOrReplace) requests.
	Query *string `pulumi:"query"`
	// Specifies the number of streaming units that the streaming job uses.
	StreamingUnits *int `pulumi:"streamingUnits"`
}

// TransformationInput is an input type that accepts TransformationArgs and TransformationOutput values.
// You can construct a concrete instance of `TransformationInput` via:
//
//          TransformationArgs{...}
type TransformationInput interface {
	pulumi.Input

	ToTransformationOutput() TransformationOutput
	ToTransformationOutputWithContext(context.Context) TransformationOutput
}

// A transformation object, containing all information associated with the named transformation. All transformations are contained under a streaming job.
type TransformationArgs struct {
	// Resource name
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Specifies the query that will be run in the streaming job. You can learn more about the Stream Analytics Query Language (SAQL) here: https://msdn.microsoft.com/library/azure/dn834998 . Required on PUT (CreateOrReplace) requests.
	Query pulumi.StringPtrInput `pulumi:"query"`
	// Specifies the number of streaming units that the streaming job uses.
	StreamingUnits pulumi.IntPtrInput `pulumi:"streamingUnits"`
}

func (TransformationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Transformation)(nil)).Elem()
}

func (i TransformationArgs) ToTransformationOutput() TransformationOutput {
	return i.ToTransformationOutputWithContext(context.Background())
}

func (i TransformationArgs) ToTransformationOutputWithContext(ctx context.Context) TransformationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TransformationOutput)
}

func (i TransformationArgs) ToTransformationPtrOutput() TransformationPtrOutput {
	return i.ToTransformationPtrOutputWithContext(context.Background())
}

func (i TransformationArgs) ToTransformationPtrOutputWithContext(ctx context.Context) TransformationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TransformationOutput).ToTransformationPtrOutputWithContext(ctx)
}

// TransformationPtrInput is an input type that accepts TransformationArgs, TransformationPtr and TransformationPtrOutput values.
// You can construct a concrete instance of `TransformationPtrInput` via:
//
//          TransformationArgs{...}
//
//  or:
//
//          nil
type TransformationPtrInput interface {
	pulumi.Input

	ToTransformationPtrOutput() TransformationPtrOutput
	ToTransformationPtrOutputWithContext(context.Context) TransformationPtrOutput
}

type transformationPtrType TransformationArgs

func TransformationPtr(v *TransformationArgs) TransformationPtrInput {
	return (*transformationPtrType)(v)
}

func (*transformationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Transformation)(nil)).Elem()
}

func (i *transformationPtrType) ToTransformationPtrOutput() TransformationPtrOutput {
	return i.ToTransformationPtrOutputWithContext(context.Background())
}

func (i *transformationPtrType) ToTransformationPtrOutputWithContext(ctx context.Context) TransformationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TransformationPtrOutput)
}

// A transformation object, containing all information associated with the named transformation. All transformations are contained under a streaming job.
type TransformationOutput struct{ *pulumi.OutputState }

func (TransformationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Transformation)(nil)).Elem()
}

func (o TransformationOutput) ToTransformationOutput() TransformationOutput {
	return o
}

func (o TransformationOutput) ToTransformationOutputWithContext(ctx context.Context) TransformationOutput {
	return o
}

func (o TransformationOutput) ToTransformationPtrOutput() TransformationPtrOutput {
	return o.ToTransformationPtrOutputWithContext(context.Background())
}

func (o TransformationOutput) ToTransformationPtrOutputWithContext(ctx context.Context) TransformationPtrOutput {
	return o.ApplyT(func(v Transformation) *Transformation {
		return &v
	}).(TransformationPtrOutput)
}

// Resource name
func (o TransformationOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Transformation) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Specifies the query that will be run in the streaming job. You can learn more about the Stream Analytics Query Language (SAQL) here: https://msdn.microsoft.com/library/azure/dn834998 . Required on PUT (CreateOrReplace) requests.
func (o TransformationOutput) Query() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Transformation) *string { return v.Query }).(pulumi.StringPtrOutput)
}

// Specifies the number of streaming units that the streaming job uses.
func (o TransformationOutput) StreamingUnits() pulumi.IntPtrOutput {
	return o.ApplyT(func(v Transformation) *int { return v.StreamingUnits }).(pulumi.IntPtrOutput)
}

type TransformationPtrOutput struct{ *pulumi.OutputState }

func (TransformationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Transformation)(nil)).Elem()
}

func (o TransformationPtrOutput) ToTransformationPtrOutput() TransformationPtrOutput {
	return o
}

func (o TransformationPtrOutput) ToTransformationPtrOutputWithContext(ctx context.Context) TransformationPtrOutput {
	return o
}

func (o TransformationPtrOutput) Elem() TransformationOutput {
	return o.ApplyT(func(v *Transformation) Transformation { return *v }).(TransformationOutput)
}

// Resource name
func (o TransformationPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Transformation) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// Specifies the query that will be run in the streaming job. You can learn more about the Stream Analytics Query Language (SAQL) here: https://msdn.microsoft.com/library/azure/dn834998 . Required on PUT (CreateOrReplace) requests.
func (o TransformationPtrOutput) Query() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Transformation) *string {
		if v == nil {
			return nil
		}
		return v.Query
	}).(pulumi.StringPtrOutput)
}

// Specifies the number of streaming units that the streaming job uses.
func (o TransformationPtrOutput) StreamingUnits() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Transformation) *int {
		if v == nil {
			return nil
		}
		return v.StreamingUnits
	}).(pulumi.IntPtrOutput)
}

// A transformation object, containing all information associated with the named transformation. All transformations are contained under a streaming job.
type TransformationResponse struct {
	// The current entity tag for the transformation. This is an opaque string. You can use it to detect whether the resource has changed between requests. You can also use it in the If-Match or If-None-Match headers for write operations for optimistic concurrency.
	Etag string `pulumi:"etag"`
	// Resource Id
	Id string `pulumi:"id"`
	// Resource name
	Name *string `pulumi:"name"`
	// Specifies the query that will be run in the streaming job. You can learn more about the Stream Analytics Query Language (SAQL) here: https://msdn.microsoft.com/library/azure/dn834998 . Required on PUT (CreateOrReplace) requests.
	Query *string `pulumi:"query"`
	// Specifies the number of streaming units that the streaming job uses.
	StreamingUnits *int `pulumi:"streamingUnits"`
	// Resource type
	Type string `pulumi:"type"`
}

// TransformationResponseInput is an input type that accepts TransformationResponseArgs and TransformationResponseOutput values.
// You can construct a concrete instance of `TransformationResponseInput` via:
//
//          TransformationResponseArgs{...}
type TransformationResponseInput interface {
	pulumi.Input

	ToTransformationResponseOutput() TransformationResponseOutput
	ToTransformationResponseOutputWithContext(context.Context) TransformationResponseOutput
}

// A transformation object, containing all information associated with the named transformation. All transformations are contained under a streaming job.
type TransformationResponseArgs struct {
	// The current entity tag for the transformation. This is an opaque string. You can use it to detect whether the resource has changed between requests. You can also use it in the If-Match or If-None-Match headers for write operations for optimistic concurrency.
	Etag pulumi.StringInput `pulumi:"etag"`
	// Resource Id
	Id pulumi.StringInput `pulumi:"id"`
	// Resource name
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Specifies the query that will be run in the streaming job. You can learn more about the Stream Analytics Query Language (SAQL) here: https://msdn.microsoft.com/library/azure/dn834998 . Required on PUT (CreateOrReplace) requests.
	Query pulumi.StringPtrInput `pulumi:"query"`
	// Specifies the number of streaming units that the streaming job uses.
	StreamingUnits pulumi.IntPtrInput `pulumi:"streamingUnits"`
	// Resource type
	Type pulumi.StringInput `pulumi:"type"`
}

func (TransformationResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TransformationResponse)(nil)).Elem()
}

func (i TransformationResponseArgs) ToTransformationResponseOutput() TransformationResponseOutput {
	return i.ToTransformationResponseOutputWithContext(context.Background())
}

func (i TransformationResponseArgs) ToTransformationResponseOutputWithContext(ctx context.Context) TransformationResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TransformationResponseOutput)
}

func (i TransformationResponseArgs) ToTransformationResponsePtrOutput() TransformationResponsePtrOutput {
	return i.ToTransformationResponsePtrOutputWithContext(context.Background())
}

func (i TransformationResponseArgs) ToTransformationResponsePtrOutputWithContext(ctx context.Context) TransformationResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TransformationResponseOutput).ToTransformationResponsePtrOutputWithContext(ctx)
}

// TransformationResponsePtrInput is an input type that accepts TransformationResponseArgs, TransformationResponsePtr and TransformationResponsePtrOutput values.
// You can construct a concrete instance of `TransformationResponsePtrInput` via:
//
//          TransformationResponseArgs{...}
//
//  or:
//
//          nil
type TransformationResponsePtrInput interface {
	pulumi.Input

	ToTransformationResponsePtrOutput() TransformationResponsePtrOutput
	ToTransformationResponsePtrOutputWithContext(context.Context) TransformationResponsePtrOutput
}

type transformationResponsePtrType TransformationResponseArgs

func TransformationResponsePtr(v *TransformationResponseArgs) TransformationResponsePtrInput {
	return (*transformationResponsePtrType)(v)
}

func (*transformationResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TransformationResponse)(nil)).Elem()
}

func (i *transformationResponsePtrType) ToTransformationResponsePtrOutput() TransformationResponsePtrOutput {
	return i.ToTransformationResponsePtrOutputWithContext(context.Background())
}

func (i *transformationResponsePtrType) ToTransformationResponsePtrOutputWithContext(ctx context.Context) TransformationResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TransformationResponsePtrOutput)
}

// A transformation object, containing all information associated with the named transformation. All transformations are contained under a streaming job.
type TransformationResponseOutput struct{ *pulumi.OutputState }

func (TransformationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TransformationResponse)(nil)).Elem()
}

func (o TransformationResponseOutput) ToTransformationResponseOutput() TransformationResponseOutput {
	return o
}

func (o TransformationResponseOutput) ToTransformationResponseOutputWithContext(ctx context.Context) TransformationResponseOutput {
	return o
}

func (o TransformationResponseOutput) ToTransformationResponsePtrOutput() TransformationResponsePtrOutput {
	return o.ToTransformationResponsePtrOutputWithContext(context.Background())
}

func (o TransformationResponseOutput) ToTransformationResponsePtrOutputWithContext(ctx context.Context) TransformationResponsePtrOutput {
	return o.ApplyT(func(v TransformationResponse) *TransformationResponse {
		return &v
	}).(TransformationResponsePtrOutput)
}

// The current entity tag for the transformation. This is an opaque string. You can use it to detect whether the resource has changed between requests. You can also use it in the If-Match or If-None-Match headers for write operations for optimistic concurrency.
func (o TransformationResponseOutput) Etag() pulumi.StringOutput {
	return o.ApplyT(func(v TransformationResponse) string { return v.Etag }).(pulumi.StringOutput)
}

// Resource Id
func (o TransformationResponseOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v TransformationResponse) string { return v.Id }).(pulumi.StringOutput)
}

// Resource name
func (o TransformationResponseOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TransformationResponse) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Specifies the query that will be run in the streaming job. You can learn more about the Stream Analytics Query Language (SAQL) here: https://msdn.microsoft.com/library/azure/dn834998 . Required on PUT (CreateOrReplace) requests.
func (o TransformationResponseOutput) Query() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TransformationResponse) *string { return v.Query }).(pulumi.StringPtrOutput)
}

// Specifies the number of streaming units that the streaming job uses.
func (o TransformationResponseOutput) StreamingUnits() pulumi.IntPtrOutput {
	return o.ApplyT(func(v TransformationResponse) *int { return v.StreamingUnits }).(pulumi.IntPtrOutput)
}

// Resource type
func (o TransformationResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v TransformationResponse) string { return v.Type }).(pulumi.StringOutput)
}

type TransformationResponsePtrOutput struct{ *pulumi.OutputState }

func (TransformationResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TransformationResponse)(nil)).Elem()
}

func (o TransformationResponsePtrOutput) ToTransformationResponsePtrOutput() TransformationResponsePtrOutput {
	return o
}

func (o TransformationResponsePtrOutput) ToTransformationResponsePtrOutputWithContext(ctx context.Context) TransformationResponsePtrOutput {
	return o
}

func (o TransformationResponsePtrOutput) Elem() TransformationResponseOutput {
	return o.ApplyT(func(v *TransformationResponse) TransformationResponse { return *v }).(TransformationResponseOutput)
}

// The current entity tag for the transformation. This is an opaque string. You can use it to detect whether the resource has changed between requests. You can also use it in the If-Match or If-None-Match headers for write operations for optimistic concurrency.
func (o TransformationResponsePtrOutput) Etag() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TransformationResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Etag
	}).(pulumi.StringPtrOutput)
}

// Resource Id
func (o TransformationResponsePtrOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TransformationResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Id
	}).(pulumi.StringPtrOutput)
}

// Resource name
func (o TransformationResponsePtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TransformationResponse) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// Specifies the query that will be run in the streaming job. You can learn more about the Stream Analytics Query Language (SAQL) here: https://msdn.microsoft.com/library/azure/dn834998 . Required on PUT (CreateOrReplace) requests.
func (o TransformationResponsePtrOutput) Query() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TransformationResponse) *string {
		if v == nil {
			return nil
		}
		return v.Query
	}).(pulumi.StringPtrOutput)
}

// Specifies the number of streaming units that the streaming job uses.
func (o TransformationResponsePtrOutput) StreamingUnits() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *TransformationResponse) *int {
		if v == nil {
			return nil
		}
		return v.StreamingUnits
	}).(pulumi.IntPtrOutput)
}

// Resource type
func (o TransformationResponsePtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TransformationResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(DiagnosticConditionResponseOutput{})
	pulumi.RegisterOutputType(DiagnosticConditionResponseArrayOutput{})
	pulumi.RegisterOutputType(DiagnosticsResponseOutput{})
	pulumi.RegisterOutputType(DiagnosticsResponsePtrOutput{})
	pulumi.RegisterOutputType(FunctionTypeOutput{})
	pulumi.RegisterOutputType(FunctionTypeArrayOutput{})
	pulumi.RegisterOutputType(FunctionPropertiesOutput{})
	pulumi.RegisterOutputType(FunctionPropertiesPtrOutput{})
	pulumi.RegisterOutputType(FunctionPropertiesResponseOutput{})
	pulumi.RegisterOutputType(FunctionPropertiesResponsePtrOutput{})
	pulumi.RegisterOutputType(FunctionResponseOutput{})
	pulumi.RegisterOutputType(FunctionResponseArrayOutput{})
	pulumi.RegisterOutputType(InputTypeOutput{})
	pulumi.RegisterOutputType(InputTypeArrayOutput{})
	pulumi.RegisterOutputType(InputPropertiesOutput{})
	pulumi.RegisterOutputType(InputPropertiesPtrOutput{})
	pulumi.RegisterOutputType(InputPropertiesResponseOutput{})
	pulumi.RegisterOutputType(InputPropertiesResponsePtrOutput{})
	pulumi.RegisterOutputType(InputResponseOutput{})
	pulumi.RegisterOutputType(InputResponseArrayOutput{})
	pulumi.RegisterOutputType(OutputTypeOutput{})
	pulumi.RegisterOutputType(OutputTypeArrayOutput{})
	pulumi.RegisterOutputType(OutputDataSourceOutput{})
	pulumi.RegisterOutputType(OutputDataSourcePtrOutput{})
	pulumi.RegisterOutputType(OutputDataSourceResponseOutput{})
	pulumi.RegisterOutputType(OutputDataSourceResponsePtrOutput{})
	pulumi.RegisterOutputType(OutputResponseOutput{})
	pulumi.RegisterOutputType(OutputResponseArrayOutput{})
	pulumi.RegisterOutputType(SerializationOutput{})
	pulumi.RegisterOutputType(SerializationPtrOutput{})
	pulumi.RegisterOutputType(SerializationResponseOutput{})
	pulumi.RegisterOutputType(SerializationResponsePtrOutput{})
	pulumi.RegisterOutputType(SkuOutput{})
	pulumi.RegisterOutputType(SkuPtrOutput{})
	pulumi.RegisterOutputType(SkuResponseOutput{})
	pulumi.RegisterOutputType(SkuResponsePtrOutput{})
	pulumi.RegisterOutputType(TransformationOutput{})
	pulumi.RegisterOutputType(TransformationPtrOutput{})
	pulumi.RegisterOutputType(TransformationResponseOutput{})
	pulumi.RegisterOutputType(TransformationResponsePtrOutput{})
}
