// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v20150819

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// Identity for the resource.
type Identity struct {
	// The identity type.
	Type string `pulumi:"type"`
}

// IdentityInput is an input type that accepts IdentityArgs and IdentityOutput values.
// You can construct a concrete instance of `IdentityInput` via:
//
//          IdentityArgs{...}
type IdentityInput interface {
	pulumi.Input

	ToIdentityOutput() IdentityOutput
	ToIdentityOutputWithContext(context.Context) IdentityOutput
}

// Identity for the resource.
type IdentityArgs struct {
	// The identity type.
	Type pulumi.StringInput `pulumi:"type"`
}

func (IdentityArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Identity)(nil)).Elem()
}

func (i IdentityArgs) ToIdentityOutput() IdentityOutput {
	return i.ToIdentityOutputWithContext(context.Background())
}

func (i IdentityArgs) ToIdentityOutputWithContext(ctx context.Context) IdentityOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IdentityOutput)
}

func (i IdentityArgs) ToIdentityPtrOutput() IdentityPtrOutput {
	return i.ToIdentityPtrOutputWithContext(context.Background())
}

func (i IdentityArgs) ToIdentityPtrOutputWithContext(ctx context.Context) IdentityPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IdentityOutput).ToIdentityPtrOutputWithContext(ctx)
}

// IdentityPtrInput is an input type that accepts IdentityArgs, IdentityPtr and IdentityPtrOutput values.
// You can construct a concrete instance of `IdentityPtrInput` via:
//
//          IdentityArgs{...}
//
//  or:
//
//          nil
type IdentityPtrInput interface {
	pulumi.Input

	ToIdentityPtrOutput() IdentityPtrOutput
	ToIdentityPtrOutputWithContext(context.Context) IdentityPtrOutput
}

type identityPtrType IdentityArgs

func IdentityPtr(v *IdentityArgs) IdentityPtrInput {
	return (*identityPtrType)(v)
}

func (*identityPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Identity)(nil)).Elem()
}

func (i *identityPtrType) ToIdentityPtrOutput() IdentityPtrOutput {
	return i.ToIdentityPtrOutputWithContext(context.Background())
}

func (i *identityPtrType) ToIdentityPtrOutputWithContext(ctx context.Context) IdentityPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IdentityPtrOutput)
}

// Identity for the resource.
type IdentityOutput struct{ *pulumi.OutputState }

func (IdentityOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Identity)(nil)).Elem()
}

func (o IdentityOutput) ToIdentityOutput() IdentityOutput {
	return o
}

func (o IdentityOutput) ToIdentityOutputWithContext(ctx context.Context) IdentityOutput {
	return o
}

func (o IdentityOutput) ToIdentityPtrOutput() IdentityPtrOutput {
	return o.ToIdentityPtrOutputWithContext(context.Background())
}

func (o IdentityOutput) ToIdentityPtrOutputWithContext(ctx context.Context) IdentityPtrOutput {
	return o.ApplyT(func(v Identity) *Identity {
		return &v
	}).(IdentityPtrOutput)
}

// The identity type.
func (o IdentityOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v Identity) string { return v.Type }).(pulumi.StringOutput)
}

type IdentityPtrOutput struct{ *pulumi.OutputState }

func (IdentityPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Identity)(nil)).Elem()
}

func (o IdentityPtrOutput) ToIdentityPtrOutput() IdentityPtrOutput {
	return o
}

func (o IdentityPtrOutput) ToIdentityPtrOutputWithContext(ctx context.Context) IdentityPtrOutput {
	return o
}

func (o IdentityPtrOutput) Elem() IdentityOutput {
	return o.ApplyT(func(v *Identity) Identity { return *v }).(IdentityOutput)
}

// The identity type.
func (o IdentityPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Identity) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

// Identity for the resource.
type IdentityResponse struct {
	// The principal ID of resource identity.
	PrincipalId string `pulumi:"principalId"`
	// The tenant ID of resource.
	TenantId string `pulumi:"tenantId"`
	// The identity type.
	Type string `pulumi:"type"`
}

// IdentityResponseInput is an input type that accepts IdentityResponseArgs and IdentityResponseOutput values.
// You can construct a concrete instance of `IdentityResponseInput` via:
//
//          IdentityResponseArgs{...}
type IdentityResponseInput interface {
	pulumi.Input

	ToIdentityResponseOutput() IdentityResponseOutput
	ToIdentityResponseOutputWithContext(context.Context) IdentityResponseOutput
}

// Identity for the resource.
type IdentityResponseArgs struct {
	// The principal ID of resource identity.
	PrincipalId pulumi.StringInput `pulumi:"principalId"`
	// The tenant ID of resource.
	TenantId pulumi.StringInput `pulumi:"tenantId"`
	// The identity type.
	Type pulumi.StringInput `pulumi:"type"`
}

func (IdentityResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*IdentityResponse)(nil)).Elem()
}

func (i IdentityResponseArgs) ToIdentityResponseOutput() IdentityResponseOutput {
	return i.ToIdentityResponseOutputWithContext(context.Background())
}

func (i IdentityResponseArgs) ToIdentityResponseOutputWithContext(ctx context.Context) IdentityResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IdentityResponseOutput)
}

func (i IdentityResponseArgs) ToIdentityResponsePtrOutput() IdentityResponsePtrOutput {
	return i.ToIdentityResponsePtrOutputWithContext(context.Background())
}

func (i IdentityResponseArgs) ToIdentityResponsePtrOutputWithContext(ctx context.Context) IdentityResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IdentityResponseOutput).ToIdentityResponsePtrOutputWithContext(ctx)
}

// IdentityResponsePtrInput is an input type that accepts IdentityResponseArgs, IdentityResponsePtr and IdentityResponsePtrOutput values.
// You can construct a concrete instance of `IdentityResponsePtrInput` via:
//
//          IdentityResponseArgs{...}
//
//  or:
//
//          nil
type IdentityResponsePtrInput interface {
	pulumi.Input

	ToIdentityResponsePtrOutput() IdentityResponsePtrOutput
	ToIdentityResponsePtrOutputWithContext(context.Context) IdentityResponsePtrOutput
}

type identityResponsePtrType IdentityResponseArgs

func IdentityResponsePtr(v *IdentityResponseArgs) IdentityResponsePtrInput {
	return (*identityResponsePtrType)(v)
}

func (*identityResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**IdentityResponse)(nil)).Elem()
}

func (i *identityResponsePtrType) ToIdentityResponsePtrOutput() IdentityResponsePtrOutput {
	return i.ToIdentityResponsePtrOutputWithContext(context.Background())
}

func (i *identityResponsePtrType) ToIdentityResponsePtrOutputWithContext(ctx context.Context) IdentityResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IdentityResponsePtrOutput)
}

// Identity for the resource.
type IdentityResponseOutput struct{ *pulumi.OutputState }

func (IdentityResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IdentityResponse)(nil)).Elem()
}

func (o IdentityResponseOutput) ToIdentityResponseOutput() IdentityResponseOutput {
	return o
}

func (o IdentityResponseOutput) ToIdentityResponseOutputWithContext(ctx context.Context) IdentityResponseOutput {
	return o
}

func (o IdentityResponseOutput) ToIdentityResponsePtrOutput() IdentityResponsePtrOutput {
	return o.ToIdentityResponsePtrOutputWithContext(context.Background())
}

func (o IdentityResponseOutput) ToIdentityResponsePtrOutputWithContext(ctx context.Context) IdentityResponsePtrOutput {
	return o.ApplyT(func(v IdentityResponse) *IdentityResponse {
		return &v
	}).(IdentityResponsePtrOutput)
}

// The principal ID of resource identity.
func (o IdentityResponseOutput) PrincipalId() pulumi.StringOutput {
	return o.ApplyT(func(v IdentityResponse) string { return v.PrincipalId }).(pulumi.StringOutput)
}

// The tenant ID of resource.
func (o IdentityResponseOutput) TenantId() pulumi.StringOutput {
	return o.ApplyT(func(v IdentityResponse) string { return v.TenantId }).(pulumi.StringOutput)
}

// The identity type.
func (o IdentityResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v IdentityResponse) string { return v.Type }).(pulumi.StringOutput)
}

type IdentityResponsePtrOutput struct{ *pulumi.OutputState }

func (IdentityResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**IdentityResponse)(nil)).Elem()
}

func (o IdentityResponsePtrOutput) ToIdentityResponsePtrOutput() IdentityResponsePtrOutput {
	return o
}

func (o IdentityResponsePtrOutput) ToIdentityResponsePtrOutputWithContext(ctx context.Context) IdentityResponsePtrOutput {
	return o
}

func (o IdentityResponsePtrOutput) Elem() IdentityResponseOutput {
	return o.ApplyT(func(v *IdentityResponse) IdentityResponse { return *v }).(IdentityResponseOutput)
}

// The principal ID of resource identity.
func (o IdentityResponsePtrOutput) PrincipalId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IdentityResponse) *string {
		if v == nil {
			return nil
		}
		return &v.PrincipalId
	}).(pulumi.StringPtrOutput)
}

// The tenant ID of resource.
func (o IdentityResponsePtrOutput) TenantId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IdentityResponse) *string {
		if v == nil {
			return nil
		}
		return &v.TenantId
	}).(pulumi.StringPtrOutput)
}

// The identity type.
func (o IdentityResponsePtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IdentityResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

// Describes an API key for a given Azure Cognitive Search service that has permissions for query operations only.
type QueryKeyResponse struct {
	// The value of the query API key.
	Key string `pulumi:"key"`
	// The name of the query API key; may be empty.
	Name string `pulumi:"name"`
}

// QueryKeyResponseInput is an input type that accepts QueryKeyResponseArgs and QueryKeyResponseOutput values.
// You can construct a concrete instance of `QueryKeyResponseInput` via:
//
//          QueryKeyResponseArgs{...}
type QueryKeyResponseInput interface {
	pulumi.Input

	ToQueryKeyResponseOutput() QueryKeyResponseOutput
	ToQueryKeyResponseOutputWithContext(context.Context) QueryKeyResponseOutput
}

// Describes an API key for a given Azure Cognitive Search service that has permissions for query operations only.
type QueryKeyResponseArgs struct {
	// The value of the query API key.
	Key pulumi.StringInput `pulumi:"key"`
	// The name of the query API key; may be empty.
	Name pulumi.StringInput `pulumi:"name"`
}

func (QueryKeyResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*QueryKeyResponse)(nil)).Elem()
}

func (i QueryKeyResponseArgs) ToQueryKeyResponseOutput() QueryKeyResponseOutput {
	return i.ToQueryKeyResponseOutputWithContext(context.Background())
}

func (i QueryKeyResponseArgs) ToQueryKeyResponseOutputWithContext(ctx context.Context) QueryKeyResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(QueryKeyResponseOutput)
}

// QueryKeyResponseArrayInput is an input type that accepts QueryKeyResponseArray and QueryKeyResponseArrayOutput values.
// You can construct a concrete instance of `QueryKeyResponseArrayInput` via:
//
//          QueryKeyResponseArray{ QueryKeyResponseArgs{...} }
type QueryKeyResponseArrayInput interface {
	pulumi.Input

	ToQueryKeyResponseArrayOutput() QueryKeyResponseArrayOutput
	ToQueryKeyResponseArrayOutputWithContext(context.Context) QueryKeyResponseArrayOutput
}

type QueryKeyResponseArray []QueryKeyResponseInput

func (QueryKeyResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]QueryKeyResponse)(nil)).Elem()
}

func (i QueryKeyResponseArray) ToQueryKeyResponseArrayOutput() QueryKeyResponseArrayOutput {
	return i.ToQueryKeyResponseArrayOutputWithContext(context.Background())
}

func (i QueryKeyResponseArray) ToQueryKeyResponseArrayOutputWithContext(ctx context.Context) QueryKeyResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(QueryKeyResponseArrayOutput)
}

// Describes an API key for a given Azure Cognitive Search service that has permissions for query operations only.
type QueryKeyResponseOutput struct{ *pulumi.OutputState }

func (QueryKeyResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*QueryKeyResponse)(nil)).Elem()
}

func (o QueryKeyResponseOutput) ToQueryKeyResponseOutput() QueryKeyResponseOutput {
	return o
}

func (o QueryKeyResponseOutput) ToQueryKeyResponseOutputWithContext(ctx context.Context) QueryKeyResponseOutput {
	return o
}

// The value of the query API key.
func (o QueryKeyResponseOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v QueryKeyResponse) string { return v.Key }).(pulumi.StringOutput)
}

// The name of the query API key; may be empty.
func (o QueryKeyResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v QueryKeyResponse) string { return v.Name }).(pulumi.StringOutput)
}

type QueryKeyResponseArrayOutput struct{ *pulumi.OutputState }

func (QueryKeyResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]QueryKeyResponse)(nil)).Elem()
}

func (o QueryKeyResponseArrayOutput) ToQueryKeyResponseArrayOutput() QueryKeyResponseArrayOutput {
	return o
}

func (o QueryKeyResponseArrayOutput) ToQueryKeyResponseArrayOutputWithContext(ctx context.Context) QueryKeyResponseArrayOutput {
	return o
}

func (o QueryKeyResponseArrayOutput) Index(i pulumi.IntInput) QueryKeyResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) QueryKeyResponse {
		return vs[0].([]QueryKeyResponse)[vs[1].(int)]
	}).(QueryKeyResponseOutput)
}

// Properties of the Search service.
type SearchServicePropertiesResponse struct {
	// Applicable only for the standard3 SKU. You can set this property to enable up to 3 high density partitions that allow up to 1000 indexes, which is much higher than the maximum indexes allowed for any other SKU. For the standard3 SKU, the value is either 'default' or 'highDensity'. For all other SKUs, this value must be 'default'.
	HostingMode *string `pulumi:"hostingMode"`
	// The number of partitions in the Search service; if specified, it can be 1, 2, 3, 4, 6, or 12. Values greater than 1 are only valid for standard SKUs. For 'standard3' services with hostingMode set to 'highDensity', the allowed values are between 1 and 3.
	PartitionCount *int `pulumi:"partitionCount"`
	// The state of the last provisioning operation performed on the Search service. Provisioning is an intermediate state that occurs while service capacity is being established. After capacity is set up, provisioningState changes to either 'succeeded' or 'failed'. Client applications can poll provisioning status (the recommended polling interval is from 30 seconds to one minute) by using the Get Search Service operation to see when an operation is completed. If you are using the free service, this value tends to come back as 'succeeded' directly in the call to Create Search service. This is because the free service uses capacity that is already set up.
	ProvisioningState string `pulumi:"provisioningState"`
	// The number of replicas in the Search service. If specified, it must be a value between 1 and 12 inclusive for standard SKUs or between 1 and 3 inclusive for basic SKU.
	ReplicaCount *int `pulumi:"replicaCount"`
	// The status of the Search service. Possible values include: 'running': The Search service is running and no provisioning operations are underway. 'provisioning': The Search service is being provisioned or scaled up or down. 'deleting': The Search service is being deleted. 'degraded': The Search service is degraded. This can occur when the underlying search units are not healthy. The Search service is most likely operational, but performance might be slow and some requests might be dropped. 'disabled': The Search service is disabled. In this state, the service will reject all API requests. 'error': The Search service is in an error state. If your service is in the degraded, disabled, or error states, it means the Azure Cognitive Search team is actively investigating the underlying issue. Dedicated services in these states are still chargeable based on the number of search units provisioned.
	Status string `pulumi:"status"`
	// The details of the Search service status.
	StatusDetails string `pulumi:"statusDetails"`
}

// SearchServicePropertiesResponseInput is an input type that accepts SearchServicePropertiesResponseArgs and SearchServicePropertiesResponseOutput values.
// You can construct a concrete instance of `SearchServicePropertiesResponseInput` via:
//
//          SearchServicePropertiesResponseArgs{...}
type SearchServicePropertiesResponseInput interface {
	pulumi.Input

	ToSearchServicePropertiesResponseOutput() SearchServicePropertiesResponseOutput
	ToSearchServicePropertiesResponseOutputWithContext(context.Context) SearchServicePropertiesResponseOutput
}

// Properties of the Search service.
type SearchServicePropertiesResponseArgs struct {
	// Applicable only for the standard3 SKU. You can set this property to enable up to 3 high density partitions that allow up to 1000 indexes, which is much higher than the maximum indexes allowed for any other SKU. For the standard3 SKU, the value is either 'default' or 'highDensity'. For all other SKUs, this value must be 'default'.
	HostingMode pulumi.StringPtrInput `pulumi:"hostingMode"`
	// The number of partitions in the Search service; if specified, it can be 1, 2, 3, 4, 6, or 12. Values greater than 1 are only valid for standard SKUs. For 'standard3' services with hostingMode set to 'highDensity', the allowed values are between 1 and 3.
	PartitionCount pulumi.IntPtrInput `pulumi:"partitionCount"`
	// The state of the last provisioning operation performed on the Search service. Provisioning is an intermediate state that occurs while service capacity is being established. After capacity is set up, provisioningState changes to either 'succeeded' or 'failed'. Client applications can poll provisioning status (the recommended polling interval is from 30 seconds to one minute) by using the Get Search Service operation to see when an operation is completed. If you are using the free service, this value tends to come back as 'succeeded' directly in the call to Create Search service. This is because the free service uses capacity that is already set up.
	ProvisioningState pulumi.StringInput `pulumi:"provisioningState"`
	// The number of replicas in the Search service. If specified, it must be a value between 1 and 12 inclusive for standard SKUs or between 1 and 3 inclusive for basic SKU.
	ReplicaCount pulumi.IntPtrInput `pulumi:"replicaCount"`
	// The status of the Search service. Possible values include: 'running': The Search service is running and no provisioning operations are underway. 'provisioning': The Search service is being provisioned or scaled up or down. 'deleting': The Search service is being deleted. 'degraded': The Search service is degraded. This can occur when the underlying search units are not healthy. The Search service is most likely operational, but performance might be slow and some requests might be dropped. 'disabled': The Search service is disabled. In this state, the service will reject all API requests. 'error': The Search service is in an error state. If your service is in the degraded, disabled, or error states, it means the Azure Cognitive Search team is actively investigating the underlying issue. Dedicated services in these states are still chargeable based on the number of search units provisioned.
	Status pulumi.StringInput `pulumi:"status"`
	// The details of the Search service status.
	StatusDetails pulumi.StringInput `pulumi:"statusDetails"`
}

func (SearchServicePropertiesResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SearchServicePropertiesResponse)(nil)).Elem()
}

func (i SearchServicePropertiesResponseArgs) ToSearchServicePropertiesResponseOutput() SearchServicePropertiesResponseOutput {
	return i.ToSearchServicePropertiesResponseOutputWithContext(context.Background())
}

func (i SearchServicePropertiesResponseArgs) ToSearchServicePropertiesResponseOutputWithContext(ctx context.Context) SearchServicePropertiesResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SearchServicePropertiesResponseOutput)
}

func (i SearchServicePropertiesResponseArgs) ToSearchServicePropertiesResponsePtrOutput() SearchServicePropertiesResponsePtrOutput {
	return i.ToSearchServicePropertiesResponsePtrOutputWithContext(context.Background())
}

func (i SearchServicePropertiesResponseArgs) ToSearchServicePropertiesResponsePtrOutputWithContext(ctx context.Context) SearchServicePropertiesResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SearchServicePropertiesResponseOutput).ToSearchServicePropertiesResponsePtrOutputWithContext(ctx)
}

// SearchServicePropertiesResponsePtrInput is an input type that accepts SearchServicePropertiesResponseArgs, SearchServicePropertiesResponsePtr and SearchServicePropertiesResponsePtrOutput values.
// You can construct a concrete instance of `SearchServicePropertiesResponsePtrInput` via:
//
//          SearchServicePropertiesResponseArgs{...}
//
//  or:
//
//          nil
type SearchServicePropertiesResponsePtrInput interface {
	pulumi.Input

	ToSearchServicePropertiesResponsePtrOutput() SearchServicePropertiesResponsePtrOutput
	ToSearchServicePropertiesResponsePtrOutputWithContext(context.Context) SearchServicePropertiesResponsePtrOutput
}

type searchServicePropertiesResponsePtrType SearchServicePropertiesResponseArgs

func SearchServicePropertiesResponsePtr(v *SearchServicePropertiesResponseArgs) SearchServicePropertiesResponsePtrInput {
	return (*searchServicePropertiesResponsePtrType)(v)
}

func (*searchServicePropertiesResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SearchServicePropertiesResponse)(nil)).Elem()
}

func (i *searchServicePropertiesResponsePtrType) ToSearchServicePropertiesResponsePtrOutput() SearchServicePropertiesResponsePtrOutput {
	return i.ToSearchServicePropertiesResponsePtrOutputWithContext(context.Background())
}

func (i *searchServicePropertiesResponsePtrType) ToSearchServicePropertiesResponsePtrOutputWithContext(ctx context.Context) SearchServicePropertiesResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SearchServicePropertiesResponsePtrOutput)
}

// Properties of the Search service.
type SearchServicePropertiesResponseOutput struct{ *pulumi.OutputState }

func (SearchServicePropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SearchServicePropertiesResponse)(nil)).Elem()
}

func (o SearchServicePropertiesResponseOutput) ToSearchServicePropertiesResponseOutput() SearchServicePropertiesResponseOutput {
	return o
}

func (o SearchServicePropertiesResponseOutput) ToSearchServicePropertiesResponseOutputWithContext(ctx context.Context) SearchServicePropertiesResponseOutput {
	return o
}

func (o SearchServicePropertiesResponseOutput) ToSearchServicePropertiesResponsePtrOutput() SearchServicePropertiesResponsePtrOutput {
	return o.ToSearchServicePropertiesResponsePtrOutputWithContext(context.Background())
}

func (o SearchServicePropertiesResponseOutput) ToSearchServicePropertiesResponsePtrOutputWithContext(ctx context.Context) SearchServicePropertiesResponsePtrOutput {
	return o.ApplyT(func(v SearchServicePropertiesResponse) *SearchServicePropertiesResponse {
		return &v
	}).(SearchServicePropertiesResponsePtrOutput)
}

// Applicable only for the standard3 SKU. You can set this property to enable up to 3 high density partitions that allow up to 1000 indexes, which is much higher than the maximum indexes allowed for any other SKU. For the standard3 SKU, the value is either 'default' or 'highDensity'. For all other SKUs, this value must be 'default'.
func (o SearchServicePropertiesResponseOutput) HostingMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SearchServicePropertiesResponse) *string { return v.HostingMode }).(pulumi.StringPtrOutput)
}

// The number of partitions in the Search service; if specified, it can be 1, 2, 3, 4, 6, or 12. Values greater than 1 are only valid for standard SKUs. For 'standard3' services with hostingMode set to 'highDensity', the allowed values are between 1 and 3.
func (o SearchServicePropertiesResponseOutput) PartitionCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SearchServicePropertiesResponse) *int { return v.PartitionCount }).(pulumi.IntPtrOutput)
}

// The state of the last provisioning operation performed on the Search service. Provisioning is an intermediate state that occurs while service capacity is being established. After capacity is set up, provisioningState changes to either 'succeeded' or 'failed'. Client applications can poll provisioning status (the recommended polling interval is from 30 seconds to one minute) by using the Get Search Service operation to see when an operation is completed. If you are using the free service, this value tends to come back as 'succeeded' directly in the call to Create Search service. This is because the free service uses capacity that is already set up.
func (o SearchServicePropertiesResponseOutput) ProvisioningState() pulumi.StringOutput {
	return o.ApplyT(func(v SearchServicePropertiesResponse) string { return v.ProvisioningState }).(pulumi.StringOutput)
}

// The number of replicas in the Search service. If specified, it must be a value between 1 and 12 inclusive for standard SKUs or between 1 and 3 inclusive for basic SKU.
func (o SearchServicePropertiesResponseOutput) ReplicaCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SearchServicePropertiesResponse) *int { return v.ReplicaCount }).(pulumi.IntPtrOutput)
}

// The status of the Search service. Possible values include: 'running': The Search service is running and no provisioning operations are underway. 'provisioning': The Search service is being provisioned or scaled up or down. 'deleting': The Search service is being deleted. 'degraded': The Search service is degraded. This can occur when the underlying search units are not healthy. The Search service is most likely operational, but performance might be slow and some requests might be dropped. 'disabled': The Search service is disabled. In this state, the service will reject all API requests. 'error': The Search service is in an error state. If your service is in the degraded, disabled, or error states, it means the Azure Cognitive Search team is actively investigating the underlying issue. Dedicated services in these states are still chargeable based on the number of search units provisioned.
func (o SearchServicePropertiesResponseOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v SearchServicePropertiesResponse) string { return v.Status }).(pulumi.StringOutput)
}

// The details of the Search service status.
func (o SearchServicePropertiesResponseOutput) StatusDetails() pulumi.StringOutput {
	return o.ApplyT(func(v SearchServicePropertiesResponse) string { return v.StatusDetails }).(pulumi.StringOutput)
}

type SearchServicePropertiesResponsePtrOutput struct{ *pulumi.OutputState }

func (SearchServicePropertiesResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SearchServicePropertiesResponse)(nil)).Elem()
}

func (o SearchServicePropertiesResponsePtrOutput) ToSearchServicePropertiesResponsePtrOutput() SearchServicePropertiesResponsePtrOutput {
	return o
}

func (o SearchServicePropertiesResponsePtrOutput) ToSearchServicePropertiesResponsePtrOutputWithContext(ctx context.Context) SearchServicePropertiesResponsePtrOutput {
	return o
}

func (o SearchServicePropertiesResponsePtrOutput) Elem() SearchServicePropertiesResponseOutput {
	return o.ApplyT(func(v *SearchServicePropertiesResponse) SearchServicePropertiesResponse { return *v }).(SearchServicePropertiesResponseOutput)
}

// Applicable only for the standard3 SKU. You can set this property to enable up to 3 high density partitions that allow up to 1000 indexes, which is much higher than the maximum indexes allowed for any other SKU. For the standard3 SKU, the value is either 'default' or 'highDensity'. For all other SKUs, this value must be 'default'.
func (o SearchServicePropertiesResponsePtrOutput) HostingMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SearchServicePropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return v.HostingMode
	}).(pulumi.StringPtrOutput)
}

// The number of partitions in the Search service; if specified, it can be 1, 2, 3, 4, 6, or 12. Values greater than 1 are only valid for standard SKUs. For 'standard3' services with hostingMode set to 'highDensity', the allowed values are between 1 and 3.
func (o SearchServicePropertiesResponsePtrOutput) PartitionCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SearchServicePropertiesResponse) *int {
		if v == nil {
			return nil
		}
		return v.PartitionCount
	}).(pulumi.IntPtrOutput)
}

// The state of the last provisioning operation performed on the Search service. Provisioning is an intermediate state that occurs while service capacity is being established. After capacity is set up, provisioningState changes to either 'succeeded' or 'failed'. Client applications can poll provisioning status (the recommended polling interval is from 30 seconds to one minute) by using the Get Search Service operation to see when an operation is completed. If you are using the free service, this value tends to come back as 'succeeded' directly in the call to Create Search service. This is because the free service uses capacity that is already set up.
func (o SearchServicePropertiesResponsePtrOutput) ProvisioningState() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SearchServicePropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return &v.ProvisioningState
	}).(pulumi.StringPtrOutput)
}

// The number of replicas in the Search service. If specified, it must be a value between 1 and 12 inclusive for standard SKUs or between 1 and 3 inclusive for basic SKU.
func (o SearchServicePropertiesResponsePtrOutput) ReplicaCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SearchServicePropertiesResponse) *int {
		if v == nil {
			return nil
		}
		return v.ReplicaCount
	}).(pulumi.IntPtrOutput)
}

// The status of the Search service. Possible values include: 'running': The Search service is running and no provisioning operations are underway. 'provisioning': The Search service is being provisioned or scaled up or down. 'deleting': The Search service is being deleted. 'degraded': The Search service is degraded. This can occur when the underlying search units are not healthy. The Search service is most likely operational, but performance might be slow and some requests might be dropped. 'disabled': The Search service is disabled. In this state, the service will reject all API requests. 'error': The Search service is in an error state. If your service is in the degraded, disabled, or error states, it means the Azure Cognitive Search team is actively investigating the underlying issue. Dedicated services in these states are still chargeable based on the number of search units provisioned.
func (o SearchServicePropertiesResponsePtrOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SearchServicePropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Status
	}).(pulumi.StringPtrOutput)
}

// The details of the Search service status.
func (o SearchServicePropertiesResponsePtrOutput) StatusDetails() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SearchServicePropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return &v.StatusDetails
	}).(pulumi.StringPtrOutput)
}

// Defines the SKU of an Azure Cognitive Search Service, which determines price tier and capacity limits.
type Sku struct {
	// The SKU of the Search service. Valid values include: 'free': Shared service. 'basic': Dedicated service with up to 3 replicas. 'standard': Dedicated service with up to 12 partitions and 12 replicas. 'standard2': Similar to standard, but with more capacity per search unit. 'standard3': The largest Standard offering with up to 12 partitions and 12 replicas (or up to 3 partitions with more indexes if you also set the hostingMode property to 'highDensity'). 'storage_optimized_l1': Supports 1TB per partition, up to 12 partitions. 'storage_optimized_l2': Supports 2TB per partition, up to 12 partitions.'
	Name *string `pulumi:"name"`
}

// SkuInput is an input type that accepts SkuArgs and SkuOutput values.
// You can construct a concrete instance of `SkuInput` via:
//
//          SkuArgs{...}
type SkuInput interface {
	pulumi.Input

	ToSkuOutput() SkuOutput
	ToSkuOutputWithContext(context.Context) SkuOutput
}

// Defines the SKU of an Azure Cognitive Search Service, which determines price tier and capacity limits.
type SkuArgs struct {
	// The SKU of the Search service. Valid values include: 'free': Shared service. 'basic': Dedicated service with up to 3 replicas. 'standard': Dedicated service with up to 12 partitions and 12 replicas. 'standard2': Similar to standard, but with more capacity per search unit. 'standard3': The largest Standard offering with up to 12 partitions and 12 replicas (or up to 3 partitions with more indexes if you also set the hostingMode property to 'highDensity'). 'storage_optimized_l1': Supports 1TB per partition, up to 12 partitions. 'storage_optimized_l2': Supports 2TB per partition, up to 12 partitions.'
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (SkuArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Sku)(nil)).Elem()
}

func (i SkuArgs) ToSkuOutput() SkuOutput {
	return i.ToSkuOutputWithContext(context.Background())
}

func (i SkuArgs) ToSkuOutputWithContext(ctx context.Context) SkuOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SkuOutput)
}

func (i SkuArgs) ToSkuPtrOutput() SkuPtrOutput {
	return i.ToSkuPtrOutputWithContext(context.Background())
}

func (i SkuArgs) ToSkuPtrOutputWithContext(ctx context.Context) SkuPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SkuOutput).ToSkuPtrOutputWithContext(ctx)
}

// SkuPtrInput is an input type that accepts SkuArgs, SkuPtr and SkuPtrOutput values.
// You can construct a concrete instance of `SkuPtrInput` via:
//
//          SkuArgs{...}
//
//  or:
//
//          nil
type SkuPtrInput interface {
	pulumi.Input

	ToSkuPtrOutput() SkuPtrOutput
	ToSkuPtrOutputWithContext(context.Context) SkuPtrOutput
}

type skuPtrType SkuArgs

func SkuPtr(v *SkuArgs) SkuPtrInput {
	return (*skuPtrType)(v)
}

func (*skuPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Sku)(nil)).Elem()
}

func (i *skuPtrType) ToSkuPtrOutput() SkuPtrOutput {
	return i.ToSkuPtrOutputWithContext(context.Background())
}

func (i *skuPtrType) ToSkuPtrOutputWithContext(ctx context.Context) SkuPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SkuPtrOutput)
}

// Defines the SKU of an Azure Cognitive Search Service, which determines price tier and capacity limits.
type SkuOutput struct{ *pulumi.OutputState }

func (SkuOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Sku)(nil)).Elem()
}

func (o SkuOutput) ToSkuOutput() SkuOutput {
	return o
}

func (o SkuOutput) ToSkuOutputWithContext(ctx context.Context) SkuOutput {
	return o
}

func (o SkuOutput) ToSkuPtrOutput() SkuPtrOutput {
	return o.ToSkuPtrOutputWithContext(context.Background())
}

func (o SkuOutput) ToSkuPtrOutputWithContext(ctx context.Context) SkuPtrOutput {
	return o.ApplyT(func(v Sku) *Sku {
		return &v
	}).(SkuPtrOutput)
}

// The SKU of the Search service. Valid values include: 'free': Shared service. 'basic': Dedicated service with up to 3 replicas. 'standard': Dedicated service with up to 12 partitions and 12 replicas. 'standard2': Similar to standard, but with more capacity per search unit. 'standard3': The largest Standard offering with up to 12 partitions and 12 replicas (or up to 3 partitions with more indexes if you also set the hostingMode property to 'highDensity'). 'storage_optimized_l1': Supports 1TB per partition, up to 12 partitions. 'storage_optimized_l2': Supports 2TB per partition, up to 12 partitions.'
func (o SkuOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Sku) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type SkuPtrOutput struct{ *pulumi.OutputState }

func (SkuPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Sku)(nil)).Elem()
}

func (o SkuPtrOutput) ToSkuPtrOutput() SkuPtrOutput {
	return o
}

func (o SkuPtrOutput) ToSkuPtrOutputWithContext(ctx context.Context) SkuPtrOutput {
	return o
}

func (o SkuPtrOutput) Elem() SkuOutput {
	return o.ApplyT(func(v *Sku) Sku { return *v }).(SkuOutput)
}

// The SKU of the Search service. Valid values include: 'free': Shared service. 'basic': Dedicated service with up to 3 replicas. 'standard': Dedicated service with up to 12 partitions and 12 replicas. 'standard2': Similar to standard, but with more capacity per search unit. 'standard3': The largest Standard offering with up to 12 partitions and 12 replicas (or up to 3 partitions with more indexes if you also set the hostingMode property to 'highDensity'). 'storage_optimized_l1': Supports 1TB per partition, up to 12 partitions. 'storage_optimized_l2': Supports 2TB per partition, up to 12 partitions.'
func (o SkuPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Sku) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// Defines the SKU of an Azure Cognitive Search Service, which determines price tier and capacity limits.
type SkuResponse struct {
	// The SKU of the Search service. Valid values include: 'free': Shared service. 'basic': Dedicated service with up to 3 replicas. 'standard': Dedicated service with up to 12 partitions and 12 replicas. 'standard2': Similar to standard, but with more capacity per search unit. 'standard3': The largest Standard offering with up to 12 partitions and 12 replicas (or up to 3 partitions with more indexes if you also set the hostingMode property to 'highDensity'). 'storage_optimized_l1': Supports 1TB per partition, up to 12 partitions. 'storage_optimized_l2': Supports 2TB per partition, up to 12 partitions.'
	Name *string `pulumi:"name"`
}

// SkuResponseInput is an input type that accepts SkuResponseArgs and SkuResponseOutput values.
// You can construct a concrete instance of `SkuResponseInput` via:
//
//          SkuResponseArgs{...}
type SkuResponseInput interface {
	pulumi.Input

	ToSkuResponseOutput() SkuResponseOutput
	ToSkuResponseOutputWithContext(context.Context) SkuResponseOutput
}

// Defines the SKU of an Azure Cognitive Search Service, which determines price tier and capacity limits.
type SkuResponseArgs struct {
	// The SKU of the Search service. Valid values include: 'free': Shared service. 'basic': Dedicated service with up to 3 replicas. 'standard': Dedicated service with up to 12 partitions and 12 replicas. 'standard2': Similar to standard, but with more capacity per search unit. 'standard3': The largest Standard offering with up to 12 partitions and 12 replicas (or up to 3 partitions with more indexes if you also set the hostingMode property to 'highDensity'). 'storage_optimized_l1': Supports 1TB per partition, up to 12 partitions. 'storage_optimized_l2': Supports 2TB per partition, up to 12 partitions.'
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (SkuResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SkuResponse)(nil)).Elem()
}

func (i SkuResponseArgs) ToSkuResponseOutput() SkuResponseOutput {
	return i.ToSkuResponseOutputWithContext(context.Background())
}

func (i SkuResponseArgs) ToSkuResponseOutputWithContext(ctx context.Context) SkuResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SkuResponseOutput)
}

func (i SkuResponseArgs) ToSkuResponsePtrOutput() SkuResponsePtrOutput {
	return i.ToSkuResponsePtrOutputWithContext(context.Background())
}

func (i SkuResponseArgs) ToSkuResponsePtrOutputWithContext(ctx context.Context) SkuResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SkuResponseOutput).ToSkuResponsePtrOutputWithContext(ctx)
}

// SkuResponsePtrInput is an input type that accepts SkuResponseArgs, SkuResponsePtr and SkuResponsePtrOutput values.
// You can construct a concrete instance of `SkuResponsePtrInput` via:
//
//          SkuResponseArgs{...}
//
//  or:
//
//          nil
type SkuResponsePtrInput interface {
	pulumi.Input

	ToSkuResponsePtrOutput() SkuResponsePtrOutput
	ToSkuResponsePtrOutputWithContext(context.Context) SkuResponsePtrOutput
}

type skuResponsePtrType SkuResponseArgs

func SkuResponsePtr(v *SkuResponseArgs) SkuResponsePtrInput {
	return (*skuResponsePtrType)(v)
}

func (*skuResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SkuResponse)(nil)).Elem()
}

func (i *skuResponsePtrType) ToSkuResponsePtrOutput() SkuResponsePtrOutput {
	return i.ToSkuResponsePtrOutputWithContext(context.Background())
}

func (i *skuResponsePtrType) ToSkuResponsePtrOutputWithContext(ctx context.Context) SkuResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SkuResponsePtrOutput)
}

// Defines the SKU of an Azure Cognitive Search Service, which determines price tier and capacity limits.
type SkuResponseOutput struct{ *pulumi.OutputState }

func (SkuResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SkuResponse)(nil)).Elem()
}

func (o SkuResponseOutput) ToSkuResponseOutput() SkuResponseOutput {
	return o
}

func (o SkuResponseOutput) ToSkuResponseOutputWithContext(ctx context.Context) SkuResponseOutput {
	return o
}

func (o SkuResponseOutput) ToSkuResponsePtrOutput() SkuResponsePtrOutput {
	return o.ToSkuResponsePtrOutputWithContext(context.Background())
}

func (o SkuResponseOutput) ToSkuResponsePtrOutputWithContext(ctx context.Context) SkuResponsePtrOutput {
	return o.ApplyT(func(v SkuResponse) *SkuResponse {
		return &v
	}).(SkuResponsePtrOutput)
}

// The SKU of the Search service. Valid values include: 'free': Shared service. 'basic': Dedicated service with up to 3 replicas. 'standard': Dedicated service with up to 12 partitions and 12 replicas. 'standard2': Similar to standard, but with more capacity per search unit. 'standard3': The largest Standard offering with up to 12 partitions and 12 replicas (or up to 3 partitions with more indexes if you also set the hostingMode property to 'highDensity'). 'storage_optimized_l1': Supports 1TB per partition, up to 12 partitions. 'storage_optimized_l2': Supports 2TB per partition, up to 12 partitions.'
func (o SkuResponseOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SkuResponse) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type SkuResponsePtrOutput struct{ *pulumi.OutputState }

func (SkuResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SkuResponse)(nil)).Elem()
}

func (o SkuResponsePtrOutput) ToSkuResponsePtrOutput() SkuResponsePtrOutput {
	return o
}

func (o SkuResponsePtrOutput) ToSkuResponsePtrOutputWithContext(ctx context.Context) SkuResponsePtrOutput {
	return o
}

func (o SkuResponsePtrOutput) Elem() SkuResponseOutput {
	return o.ApplyT(func(v *SkuResponse) SkuResponse { return *v }).(SkuResponseOutput)
}

// The SKU of the Search service. Valid values include: 'free': Shared service. 'basic': Dedicated service with up to 3 replicas. 'standard': Dedicated service with up to 12 partitions and 12 replicas. 'standard2': Similar to standard, but with more capacity per search unit. 'standard3': The largest Standard offering with up to 12 partitions and 12 replicas (or up to 3 partitions with more indexes if you also set the hostingMode property to 'highDensity'). 'storage_optimized_l1': Supports 1TB per partition, up to 12 partitions. 'storage_optimized_l2': Supports 2TB per partition, up to 12 partitions.'
func (o SkuResponsePtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SkuResponse) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(IdentityOutput{})
	pulumi.RegisterOutputType(IdentityPtrOutput{})
	pulumi.RegisterOutputType(IdentityResponseOutput{})
	pulumi.RegisterOutputType(IdentityResponsePtrOutput{})
	pulumi.RegisterOutputType(QueryKeyResponseOutput{})
	pulumi.RegisterOutputType(QueryKeyResponseArrayOutput{})
	pulumi.RegisterOutputType(SearchServicePropertiesResponseOutput{})
	pulumi.RegisterOutputType(SearchServicePropertiesResponsePtrOutput{})
	pulumi.RegisterOutputType(SkuOutput{})
	pulumi.RegisterOutputType(SkuPtrOutput{})
	pulumi.RegisterOutputType(SkuResponseOutput{})
	pulumi.RegisterOutputType(SkuResponsePtrOutput{})
}
