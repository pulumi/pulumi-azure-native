// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v20200201

import (
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// Settings defined at the Management Group scope.
type HierarchySetting struct {
	pulumi.CustomResourceState

	// The name of the object. In this case, default.
	Name pulumi.StringOutput `pulumi:"name"`
	// The generic properties of hierarchy settings.
	Properties HierarchySettingsPropertiesResponseOutput `pulumi:"properties"`
	// The type of the resource.  For example, Microsoft.Management/managementGroups/settings.
	Type pulumi.StringOutput `pulumi:"type"`
}

// NewHierarchySetting registers a new resource with the given unique name, arguments, and options.
func NewHierarchySetting(ctx *pulumi.Context,
	name string, args *HierarchySettingArgs, opts ...pulumi.ResourceOption) (*HierarchySetting, error) {
	if args == nil || args.Name == nil {
		return nil, errors.New("missing required argument 'Name'")
	}
	if args == nil {
		args = &HierarchySettingArgs{}
	}
	var resource HierarchySetting
	err := ctx.RegisterResource("azurerm:management/v20200201:HierarchySetting", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetHierarchySetting gets an existing HierarchySetting resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetHierarchySetting(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *HierarchySettingState, opts ...pulumi.ResourceOption) (*HierarchySetting, error) {
	var resource HierarchySetting
	err := ctx.ReadResource("azurerm:management/v20200201:HierarchySetting", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering HierarchySetting resources.
type hierarchySettingState struct {
	// The name of the object. In this case, default.
	Name *string `pulumi:"name"`
	// The generic properties of hierarchy settings.
	Properties *HierarchySettingsPropertiesResponse `pulumi:"properties"`
	// The type of the resource.  For example, Microsoft.Management/managementGroups/settings.
	Type *string `pulumi:"type"`
}

type HierarchySettingState struct {
	// The name of the object. In this case, default.
	Name pulumi.StringPtrInput
	// The generic properties of hierarchy settings.
	Properties HierarchySettingsPropertiesResponsePtrInput
	// The type of the resource.  For example, Microsoft.Management/managementGroups/settings.
	Type pulumi.StringPtrInput
}

func (HierarchySettingState) ElementType() reflect.Type {
	return reflect.TypeOf((*hierarchySettingState)(nil)).Elem()
}

type hierarchySettingArgs struct {
	// Settings that sets the default Management Group under which new subscriptions get added in this tenant. For example, /providers/Microsoft.Management/managementGroups/defaultGroup
	DefaultManagementGroup *string `pulumi:"defaultManagementGroup"`
	// Management Group ID.
	Name string `pulumi:"name"`
	// Indicates whether RBAC access is required upon group creation under the root Management Group. If set to true, user will require Microsoft.Management/managementGroups/write action on the root Management Group scope in order to create new Groups directly under the root. This will prevent new users from creating new Management Groups, unless they are given access.
	RequireAuthorizationForGroupCreation *bool `pulumi:"requireAuthorizationForGroupCreation"`
}

// The set of arguments for constructing a HierarchySetting resource.
type HierarchySettingArgs struct {
	// Settings that sets the default Management Group under which new subscriptions get added in this tenant. For example, /providers/Microsoft.Management/managementGroups/defaultGroup
	DefaultManagementGroup pulumi.StringPtrInput
	// Management Group ID.
	Name pulumi.StringInput
	// Indicates whether RBAC access is required upon group creation under the root Management Group. If set to true, user will require Microsoft.Management/managementGroups/write action on the root Management Group scope in order to create new Groups directly under the root. This will prevent new users from creating new Management Groups, unless they are given access.
	RequireAuthorizationForGroupCreation pulumi.BoolPtrInput
}

func (HierarchySettingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*hierarchySettingArgs)(nil)).Elem()
}
