// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v20191001preview

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Subscription Information with the alias.
//
// Deprecated: Version 2019-10-01-preview will be removed in v2 of the provider.
type SubscriptionAlias struct {
	pulumi.CustomResourceState

	// Alias ID.
	Name pulumi.StringOutput `pulumi:"name"`
	// Put Alias response properties.
	Properties PutAliasResponsePropertiesResponseOutput `pulumi:"properties"`
	// Resource type, Microsoft.Subscription/aliases.
	Type pulumi.StringOutput `pulumi:"type"`
}

// NewSubscriptionAlias registers a new resource with the given unique name, arguments, and options.
func NewSubscriptionAlias(ctx *pulumi.Context,
	name string, args *SubscriptionAliasArgs, opts ...pulumi.ResourceOption) (*SubscriptionAlias, error) {
	if args == nil {
		args = &SubscriptionAliasArgs{}
	}

	aliases := pulumi.Aliases([]pulumi.Alias{
		{
			Type: pulumi.String("azure-native:subscription:SubscriptionAlias"),
		},
		{
			Type: pulumi.String("azure-native:subscription/v20200901:SubscriptionAlias"),
		},
		{
			Type: pulumi.String("azure-native:subscription/v20211001:SubscriptionAlias"),
		},
	})
	opts = append(opts, aliases)
	var resource SubscriptionAlias
	err := ctx.RegisterResource("azure-native:subscription/v20191001preview:SubscriptionAlias", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSubscriptionAlias gets an existing SubscriptionAlias resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSubscriptionAlias(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SubscriptionAliasState, opts ...pulumi.ResourceOption) (*SubscriptionAlias, error) {
	var resource SubscriptionAlias
	err := ctx.ReadResource("azure-native:subscription/v20191001preview:SubscriptionAlias", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SubscriptionAlias resources.
type subscriptionAliasState struct {
}

type SubscriptionAliasState struct {
}

func (SubscriptionAliasState) ElementType() reflect.Type {
	return reflect.TypeOf((*subscriptionAliasState)(nil)).Elem()
}

type subscriptionAliasArgs struct {
	// Name for this subscription creation request also known as alias. Note that this is not the same as subscription name and this doesn’t have any other lifecycle need beyond the request for subscription creation.
	AliasName *string `pulumi:"aliasName"`
	// Put alias request properties.
	Properties *PutAliasRequestProperties `pulumi:"properties"`
}

// The set of arguments for constructing a SubscriptionAlias resource.
type SubscriptionAliasArgs struct {
	// Name for this subscription creation request also known as alias. Note that this is not the same as subscription name and this doesn’t have any other lifecycle need beyond the request for subscription creation.
	AliasName pulumi.StringPtrInput
	// Put alias request properties.
	Properties PutAliasRequestPropertiesPtrInput
}

func (SubscriptionAliasArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*subscriptionAliasArgs)(nil)).Elem()
}

type SubscriptionAliasInput interface {
	pulumi.Input

	ToSubscriptionAliasOutput() SubscriptionAliasOutput
	ToSubscriptionAliasOutputWithContext(ctx context.Context) SubscriptionAliasOutput
}

func (*SubscriptionAlias) ElementType() reflect.Type {
	return reflect.TypeOf((**SubscriptionAlias)(nil)).Elem()
}

func (i *SubscriptionAlias) ToSubscriptionAliasOutput() SubscriptionAliasOutput {
	return i.ToSubscriptionAliasOutputWithContext(context.Background())
}

func (i *SubscriptionAlias) ToSubscriptionAliasOutputWithContext(ctx context.Context) SubscriptionAliasOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SubscriptionAliasOutput)
}

type SubscriptionAliasOutput struct{ *pulumi.OutputState }

func (SubscriptionAliasOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SubscriptionAlias)(nil)).Elem()
}

func (o SubscriptionAliasOutput) ToSubscriptionAliasOutput() SubscriptionAliasOutput {
	return o
}

func (o SubscriptionAliasOutput) ToSubscriptionAliasOutputWithContext(ctx context.Context) SubscriptionAliasOutput {
	return o
}

// Alias ID.
func (o SubscriptionAliasOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *SubscriptionAlias) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Put Alias response properties.
func (o SubscriptionAliasOutput) Properties() PutAliasResponsePropertiesResponseOutput {
	return o.ApplyT(func(v *SubscriptionAlias) PutAliasResponsePropertiesResponseOutput { return v.Properties }).(PutAliasResponsePropertiesResponseOutput)
}

// Resource type, Microsoft.Subscription/aliases.
func (o SubscriptionAliasOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *SubscriptionAlias) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(SubscriptionAliasOutput{})
}
