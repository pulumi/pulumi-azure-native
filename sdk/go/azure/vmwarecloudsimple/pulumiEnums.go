// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package vmwarecloudsimple

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Disk's independence mode type
type DiskIndependenceMode string

const (
	DiskIndependenceModePersistent                 = DiskIndependenceMode("persistent")
	DiskIndependenceMode_Independent_persistent    = DiskIndependenceMode("independent_persistent")
	DiskIndependenceMode_Independent_nonpersistent = DiskIndependenceMode("independent_nonpersistent")
)

func (DiskIndependenceMode) ElementType() reflect.Type {
	return reflect.TypeOf((*DiskIndependenceMode)(nil)).Elem()
}

func (e DiskIndependenceMode) ToDiskIndependenceModeOutput() DiskIndependenceModeOutput {
	return pulumi.ToOutput(e).(DiskIndependenceModeOutput)
}

func (e DiskIndependenceMode) ToDiskIndependenceModeOutputWithContext(ctx context.Context) DiskIndependenceModeOutput {
	return pulumi.ToOutputWithContext(ctx, e).(DiskIndependenceModeOutput)
}

func (e DiskIndependenceMode) ToDiskIndependenceModePtrOutput() DiskIndependenceModePtrOutput {
	return e.ToDiskIndependenceModePtrOutputWithContext(context.Background())
}

func (e DiskIndependenceMode) ToDiskIndependenceModePtrOutputWithContext(ctx context.Context) DiskIndependenceModePtrOutput {
	return DiskIndependenceMode(e).ToDiskIndependenceModeOutputWithContext(ctx).ToDiskIndependenceModePtrOutputWithContext(ctx)
}

func (e DiskIndependenceMode) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e DiskIndependenceMode) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e DiskIndependenceMode) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e DiskIndependenceMode) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type DiskIndependenceModeOutput struct{ *pulumi.OutputState }

func (DiskIndependenceModeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DiskIndependenceMode)(nil)).Elem()
}

func (o DiskIndependenceModeOutput) ToDiskIndependenceModeOutput() DiskIndependenceModeOutput {
	return o
}

func (o DiskIndependenceModeOutput) ToDiskIndependenceModeOutputWithContext(ctx context.Context) DiskIndependenceModeOutput {
	return o
}

func (o DiskIndependenceModeOutput) ToDiskIndependenceModePtrOutput() DiskIndependenceModePtrOutput {
	return o.ToDiskIndependenceModePtrOutputWithContext(context.Background())
}

func (o DiskIndependenceModeOutput) ToDiskIndependenceModePtrOutputWithContext(ctx context.Context) DiskIndependenceModePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DiskIndependenceMode) *DiskIndependenceMode {
		return &v
	}).(DiskIndependenceModePtrOutput)
}

func (o DiskIndependenceModeOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o DiskIndependenceModeOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e DiskIndependenceMode) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o DiskIndependenceModeOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o DiskIndependenceModeOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e DiskIndependenceMode) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type DiskIndependenceModePtrOutput struct{ *pulumi.OutputState }

func (DiskIndependenceModePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DiskIndependenceMode)(nil)).Elem()
}

func (o DiskIndependenceModePtrOutput) ToDiskIndependenceModePtrOutput() DiskIndependenceModePtrOutput {
	return o
}

func (o DiskIndependenceModePtrOutput) ToDiskIndependenceModePtrOutputWithContext(ctx context.Context) DiskIndependenceModePtrOutput {
	return o
}

func (o DiskIndependenceModePtrOutput) Elem() DiskIndependenceModeOutput {
	return o.ApplyT(func(v *DiskIndependenceMode) DiskIndependenceMode {
		if v != nil {
			return *v
		}
		var ret DiskIndependenceMode
		return ret
	}).(DiskIndependenceModeOutput)
}

func (o DiskIndependenceModePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o DiskIndependenceModePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *DiskIndependenceMode) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// DiskIndependenceModeInput is an input type that accepts DiskIndependenceModeArgs and DiskIndependenceModeOutput values.
// You can construct a concrete instance of `DiskIndependenceModeInput` via:
//
//	DiskIndependenceModeArgs{...}
type DiskIndependenceModeInput interface {
	pulumi.Input

	ToDiskIndependenceModeOutput() DiskIndependenceModeOutput
	ToDiskIndependenceModeOutputWithContext(context.Context) DiskIndependenceModeOutput
}

var diskIndependenceModePtrType = reflect.TypeOf((**DiskIndependenceMode)(nil)).Elem()

type DiskIndependenceModePtrInput interface {
	pulumi.Input

	ToDiskIndependenceModePtrOutput() DiskIndependenceModePtrOutput
	ToDiskIndependenceModePtrOutputWithContext(context.Context) DiskIndependenceModePtrOutput
}

type diskIndependenceModePtr string

func DiskIndependenceModePtr(v string) DiskIndependenceModePtrInput {
	return (*diskIndependenceModePtr)(&v)
}

func (*diskIndependenceModePtr) ElementType() reflect.Type {
	return diskIndependenceModePtrType
}

func (in *diskIndependenceModePtr) ToDiskIndependenceModePtrOutput() DiskIndependenceModePtrOutput {
	return pulumi.ToOutput(in).(DiskIndependenceModePtrOutput)
}

func (in *diskIndependenceModePtr) ToDiskIndependenceModePtrOutputWithContext(ctx context.Context) DiskIndependenceModePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(DiskIndependenceModePtrOutput)
}

// NIC type
type NICType string

const (
	NICTypeE1000   = NICType("E1000")
	NICTypeE1000E  = NICType("E1000E")
	NICTypePCNET32 = NICType("PCNET32")
	NICTypeVMXNET  = NICType("VMXNET")
	NICTypeVMXNET2 = NICType("VMXNET2")
	NICTypeVMXNET3 = NICType("VMXNET3")
)

func (NICType) ElementType() reflect.Type {
	return reflect.TypeOf((*NICType)(nil)).Elem()
}

func (e NICType) ToNICTypeOutput() NICTypeOutput {
	return pulumi.ToOutput(e).(NICTypeOutput)
}

func (e NICType) ToNICTypeOutputWithContext(ctx context.Context) NICTypeOutput {
	return pulumi.ToOutputWithContext(ctx, e).(NICTypeOutput)
}

func (e NICType) ToNICTypePtrOutput() NICTypePtrOutput {
	return e.ToNICTypePtrOutputWithContext(context.Background())
}

func (e NICType) ToNICTypePtrOutputWithContext(ctx context.Context) NICTypePtrOutput {
	return NICType(e).ToNICTypeOutputWithContext(ctx).ToNICTypePtrOutputWithContext(ctx)
}

func (e NICType) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e NICType) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e NICType) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e NICType) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type NICTypeOutput struct{ *pulumi.OutputState }

func (NICTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NICType)(nil)).Elem()
}

func (o NICTypeOutput) ToNICTypeOutput() NICTypeOutput {
	return o
}

func (o NICTypeOutput) ToNICTypeOutputWithContext(ctx context.Context) NICTypeOutput {
	return o
}

func (o NICTypeOutput) ToNICTypePtrOutput() NICTypePtrOutput {
	return o.ToNICTypePtrOutputWithContext(context.Background())
}

func (o NICTypeOutput) ToNICTypePtrOutputWithContext(ctx context.Context) NICTypePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v NICType) *NICType {
		return &v
	}).(NICTypePtrOutput)
}

func (o NICTypeOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o NICTypeOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e NICType) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o NICTypeOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o NICTypeOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e NICType) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type NICTypePtrOutput struct{ *pulumi.OutputState }

func (NICTypePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NICType)(nil)).Elem()
}

func (o NICTypePtrOutput) ToNICTypePtrOutput() NICTypePtrOutput {
	return o
}

func (o NICTypePtrOutput) ToNICTypePtrOutputWithContext(ctx context.Context) NICTypePtrOutput {
	return o
}

func (o NICTypePtrOutput) Elem() NICTypeOutput {
	return o.ApplyT(func(v *NICType) NICType {
		if v != nil {
			return *v
		}
		var ret NICType
		return ret
	}).(NICTypeOutput)
}

func (o NICTypePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o NICTypePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *NICType) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// NICTypeInput is an input type that accepts NICTypeArgs and NICTypeOutput values.
// You can construct a concrete instance of `NICTypeInput` via:
//
//	NICTypeArgs{...}
type NICTypeInput interface {
	pulumi.Input

	ToNICTypeOutput() NICTypeOutput
	ToNICTypeOutputWithContext(context.Context) NICTypeOutput
}

var nictypePtrType = reflect.TypeOf((**NICType)(nil)).Elem()

type NICTypePtrInput interface {
	pulumi.Input

	ToNICTypePtrOutput() NICTypePtrOutput
	ToNICTypePtrOutputWithContext(context.Context) NICTypePtrOutput
}

type nictypePtr string

func NICTypePtr(v string) NICTypePtrInput {
	return (*nictypePtr)(&v)
}

func (*nictypePtr) ElementType() reflect.Type {
	return nictypePtrType
}

func (in *nictypePtr) ToNICTypePtrOutput() NICTypePtrOutput {
	return pulumi.ToOutput(in).(NICTypePtrOutput)
}

func (in *nictypePtr) ToNICTypePtrOutputWithContext(ctx context.Context) NICTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(NICTypePtrOutput)
}

func init() {
	pulumi.RegisterOutputType(DiskIndependenceModeOutput{})
	pulumi.RegisterOutputType(DiskIndependenceModePtrOutput{})
	pulumi.RegisterOutputType(NICTypeOutput{})
	pulumi.RegisterOutputType(NICTypePtrOutput{})
}
