// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v20220501

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Linker of source and target resource
type Linker struct {
	pulumi.CustomResourceState

	// The authentication type.
	AuthInfo pulumi.AnyOutput `pulumi:"authInfo"`
	// The application client type
	ClientType pulumi.StringPtrOutput `pulumi:"clientType"`
	// The name of the resource
	Name pulumi.StringOutput `pulumi:"name"`
	// The provisioning state.
	ProvisioningState pulumi.StringOutput `pulumi:"provisioningState"`
	// connection scope in source service.
	Scope pulumi.StringPtrOutput `pulumi:"scope"`
	// An option to store secret value in secure place
	SecretStore SecretStoreResponsePtrOutput `pulumi:"secretStore"`
	// The system data.
	SystemData SystemDataResponseOutput `pulumi:"systemData"`
	// The target service properties
	TargetService pulumi.AnyOutput `pulumi:"targetService"`
	// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
	Type pulumi.StringOutput `pulumi:"type"`
	// The VNet solution.
	VNetSolution VNetSolutionResponsePtrOutput `pulumi:"vNetSolution"`
}

// NewLinker registers a new resource with the given unique name, arguments, and options.
func NewLinker(ctx *pulumi.Context,
	name string, args *LinkerArgs, opts ...pulumi.ResourceOption) (*Linker, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ResourceUri == nil {
		return nil, errors.New("invalid value for required argument 'ResourceUri'")
	}
	aliases := pulumi.Aliases([]pulumi.Alias{
		{
			Type: pulumi.String("azure-native:servicelinker:Linker"),
		},
		{
			Type: pulumi.String("azure-native:servicelinker/v20211101preview:Linker"),
		},
		{
			Type: pulumi.String("azure-native:servicelinker/v20220101preview:Linker"),
		},
	})
	opts = append(opts, aliases)
	var resource Linker
	err := ctx.RegisterResource("azure-native:servicelinker/v20220501:Linker", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetLinker gets an existing Linker resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetLinker(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *LinkerState, opts ...pulumi.ResourceOption) (*Linker, error) {
	var resource Linker
	err := ctx.ReadResource("azure-native:servicelinker/v20220501:Linker", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Linker resources.
type linkerState struct {
}

type LinkerState struct {
}

func (LinkerState) ElementType() reflect.Type {
	return reflect.TypeOf((*linkerState)(nil)).Elem()
}

type linkerArgs struct {
	// The authentication type.
	AuthInfo interface{} `pulumi:"authInfo"`
	// The application client type
	ClientType *string `pulumi:"clientType"`
	// The name Linker resource.
	LinkerName *string `pulumi:"linkerName"`
	// The fully qualified Azure Resource manager identifier of the resource to be connected.
	ResourceUri string `pulumi:"resourceUri"`
	// connection scope in source service.
	Scope *string `pulumi:"scope"`
	// An option to store secret value in secure place
	SecretStore *SecretStore `pulumi:"secretStore"`
	// The target service properties
	TargetService interface{} `pulumi:"targetService"`
	// The VNet solution.
	VNetSolution *VNetSolution `pulumi:"vNetSolution"`
}

// The set of arguments for constructing a Linker resource.
type LinkerArgs struct {
	// The authentication type.
	AuthInfo pulumi.Input
	// The application client type
	ClientType pulumi.StringPtrInput
	// The name Linker resource.
	LinkerName pulumi.StringPtrInput
	// The fully qualified Azure Resource manager identifier of the resource to be connected.
	ResourceUri pulumi.StringInput
	// connection scope in source service.
	Scope pulumi.StringPtrInput
	// An option to store secret value in secure place
	SecretStore SecretStorePtrInput
	// The target service properties
	TargetService pulumi.Input
	// The VNet solution.
	VNetSolution VNetSolutionPtrInput
}

func (LinkerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*linkerArgs)(nil)).Elem()
}

type LinkerInput interface {
	pulumi.Input

	ToLinkerOutput() LinkerOutput
	ToLinkerOutputWithContext(ctx context.Context) LinkerOutput
}

func (*Linker) ElementType() reflect.Type {
	return reflect.TypeOf((**Linker)(nil)).Elem()
}

func (i *Linker) ToLinkerOutput() LinkerOutput {
	return i.ToLinkerOutputWithContext(context.Background())
}

func (i *Linker) ToLinkerOutputWithContext(ctx context.Context) LinkerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LinkerOutput)
}

type LinkerOutput struct{ *pulumi.OutputState }

func (LinkerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Linker)(nil)).Elem()
}

func (o LinkerOutput) ToLinkerOutput() LinkerOutput {
	return o
}

func (o LinkerOutput) ToLinkerOutputWithContext(ctx context.Context) LinkerOutput {
	return o
}

// The authentication type.
func (o LinkerOutput) AuthInfo() pulumi.AnyOutput {
	return o.ApplyT(func(v *Linker) pulumi.AnyOutput { return v.AuthInfo }).(pulumi.AnyOutput)
}

// The application client type
func (o LinkerOutput) ClientType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Linker) pulumi.StringPtrOutput { return v.ClientType }).(pulumi.StringPtrOutput)
}

// The name of the resource
func (o LinkerOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Linker) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The provisioning state.
func (o LinkerOutput) ProvisioningState() pulumi.StringOutput {
	return o.ApplyT(func(v *Linker) pulumi.StringOutput { return v.ProvisioningState }).(pulumi.StringOutput)
}

// connection scope in source service.
func (o LinkerOutput) Scope() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Linker) pulumi.StringPtrOutput { return v.Scope }).(pulumi.StringPtrOutput)
}

// An option to store secret value in secure place
func (o LinkerOutput) SecretStore() SecretStoreResponsePtrOutput {
	return o.ApplyT(func(v *Linker) SecretStoreResponsePtrOutput { return v.SecretStore }).(SecretStoreResponsePtrOutput)
}

// The system data.
func (o LinkerOutput) SystemData() SystemDataResponseOutput {
	return o.ApplyT(func(v *Linker) SystemDataResponseOutput { return v.SystemData }).(SystemDataResponseOutput)
}

// The target service properties
func (o LinkerOutput) TargetService() pulumi.AnyOutput {
	return o.ApplyT(func(v *Linker) pulumi.AnyOutput { return v.TargetService }).(pulumi.AnyOutput)
}

// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
func (o LinkerOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *Linker) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

// The VNet solution.
func (o LinkerOutput) VNetSolution() VNetSolutionResponsePtrOutput {
	return o.ApplyT(func(v *Linker) VNetSolutionResponsePtrOutput { return v.VNetSolution }).(VNetSolutionResponsePtrOutput)
}

func init() {
	pulumi.RegisterOutputType(LinkerOutput{})
}
