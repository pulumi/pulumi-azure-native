// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package devtestlab

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// A container for a managed identity to execute DevTest lab services.
// API Version: 2018-09-15.
type ServiceRunner struct {
	pulumi.CustomResourceState

	// The identity of the resource.
	Identity IdentityPropertiesResponsePtrOutput `pulumi:"identity"`
	// The location of the resource.
	Location pulumi.StringPtrOutput `pulumi:"location"`
	// The name of the resource.
	Name pulumi.StringOutput `pulumi:"name"`
	// The tags of the resource.
	Tags pulumi.StringMapOutput `pulumi:"tags"`
	// The type of the resource.
	Type pulumi.StringOutput `pulumi:"type"`
}

// NewServiceRunner registers a new resource with the given unique name, arguments, and options.
func NewServiceRunner(ctx *pulumi.Context,
	name string, args *ServiceRunnerArgs, opts ...pulumi.ResourceOption) (*ServiceRunner, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.LabName == nil {
		return nil, errors.New("invalid value for required argument 'LabName'")
	}
	if args.ResourceGroupName == nil {
		return nil, errors.New("invalid value for required argument 'ResourceGroupName'")
	}
	aliases := pulumi.Aliases([]pulumi.Alias{
		{
			Type: pulumi.String("azure-native:devtestlab/v20160515:ServiceRunner"),
		},
		{
			Type: pulumi.String("azure-native:devtestlab/v20180915:ServiceRunner"),
		},
	})
	opts = append(opts, aliases)
	var resource ServiceRunner
	err := ctx.RegisterResource("azure-native:devtestlab:ServiceRunner", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetServiceRunner gets an existing ServiceRunner resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetServiceRunner(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ServiceRunnerState, opts ...pulumi.ResourceOption) (*ServiceRunner, error) {
	var resource ServiceRunner
	err := ctx.ReadResource("azure-native:devtestlab:ServiceRunner", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ServiceRunner resources.
type serviceRunnerState struct {
}

type ServiceRunnerState struct {
}

func (ServiceRunnerState) ElementType() reflect.Type {
	return reflect.TypeOf((*serviceRunnerState)(nil)).Elem()
}

type serviceRunnerArgs struct {
	// The identity of the resource.
	Identity *IdentityProperties `pulumi:"identity"`
	// The name of the lab.
	LabName string `pulumi:"labName"`
	// The location of the resource.
	Location *string `pulumi:"location"`
	// The name of the service runner.
	Name *string `pulumi:"name"`
	// The name of the resource group.
	ResourceGroupName string `pulumi:"resourceGroupName"`
	// The tags of the resource.
	Tags map[string]string `pulumi:"tags"`
}

// The set of arguments for constructing a ServiceRunner resource.
type ServiceRunnerArgs struct {
	// The identity of the resource.
	Identity IdentityPropertiesPtrInput
	// The name of the lab.
	LabName pulumi.StringInput
	// The location of the resource.
	Location pulumi.StringPtrInput
	// The name of the service runner.
	Name pulumi.StringPtrInput
	// The name of the resource group.
	ResourceGroupName pulumi.StringInput
	// The tags of the resource.
	Tags pulumi.StringMapInput
}

func (ServiceRunnerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*serviceRunnerArgs)(nil)).Elem()
}

type ServiceRunnerInput interface {
	pulumi.Input

	ToServiceRunnerOutput() ServiceRunnerOutput
	ToServiceRunnerOutputWithContext(ctx context.Context) ServiceRunnerOutput
}

func (*ServiceRunner) ElementType() reflect.Type {
	return reflect.TypeOf((**ServiceRunner)(nil)).Elem()
}

func (i *ServiceRunner) ToServiceRunnerOutput() ServiceRunnerOutput {
	return i.ToServiceRunnerOutputWithContext(context.Background())
}

func (i *ServiceRunner) ToServiceRunnerOutputWithContext(ctx context.Context) ServiceRunnerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceRunnerOutput)
}

type ServiceRunnerOutput struct{ *pulumi.OutputState }

func (ServiceRunnerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ServiceRunner)(nil)).Elem()
}

func (o ServiceRunnerOutput) ToServiceRunnerOutput() ServiceRunnerOutput {
	return o
}

func (o ServiceRunnerOutput) ToServiceRunnerOutputWithContext(ctx context.Context) ServiceRunnerOutput {
	return o
}

// The identity of the resource.
func (o ServiceRunnerOutput) Identity() IdentityPropertiesResponsePtrOutput {
	return o.ApplyT(func(v *ServiceRunner) IdentityPropertiesResponsePtrOutput { return v.Identity }).(IdentityPropertiesResponsePtrOutput)
}

// The location of the resource.
func (o ServiceRunnerOutput) Location() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServiceRunner) pulumi.StringPtrOutput { return v.Location }).(pulumi.StringPtrOutput)
}

// The name of the resource.
func (o ServiceRunnerOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *ServiceRunner) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The tags of the resource.
func (o ServiceRunnerOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ServiceRunner) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

// The type of the resource.
func (o ServiceRunnerOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *ServiceRunner) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(ServiceRunnerOutput{})
}
