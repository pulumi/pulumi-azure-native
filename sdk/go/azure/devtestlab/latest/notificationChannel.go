// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package latest

import (
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// A notification.
type NotificationChannel struct {
	pulumi.CustomResourceState

	// The creation date of the notification channel.
	CreatedDate pulumi.StringOutput `pulumi:"createdDate"`
	// Description of notification.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// The email recipient to send notifications to (can be a list of semi-colon separated email addresses).
	EmailRecipient pulumi.StringPtrOutput `pulumi:"emailRecipient"`
	// The list of event for which this notification is enabled.
	Events EventResponseArrayOutput `pulumi:"events"`
	// The location of the resource.
	Location pulumi.StringPtrOutput `pulumi:"location"`
	// The name of the resource.
	Name pulumi.StringOutput `pulumi:"name"`
	// The locale to use when sending a notification (fallback for unsupported languages is EN).
	NotificationLocale pulumi.StringPtrOutput `pulumi:"notificationLocale"`
	// The provisioning status of the resource.
	ProvisioningState pulumi.StringOutput `pulumi:"provisioningState"`
	// The tags of the resource.
	Tags pulumi.StringMapOutput `pulumi:"tags"`
	// The type of the resource.
	Type pulumi.StringOutput `pulumi:"type"`
	// The unique immutable identifier of a resource (Guid).
	UniqueIdentifier pulumi.StringOutput `pulumi:"uniqueIdentifier"`
	// The webhook URL to send notifications to.
	WebHookUrl pulumi.StringPtrOutput `pulumi:"webHookUrl"`
}

// NewNotificationChannel registers a new resource with the given unique name, arguments, and options.
func NewNotificationChannel(ctx *pulumi.Context,
	name string, args *NotificationChannelArgs, opts ...pulumi.ResourceOption) (*NotificationChannel, error) {
	if args == nil || args.LabName == nil {
		return nil, errors.New("missing required argument 'LabName'")
	}
	if args == nil || args.Name == nil {
		return nil, errors.New("missing required argument 'Name'")
	}
	if args == nil || args.ResourceGroupName == nil {
		return nil, errors.New("missing required argument 'ResourceGroupName'")
	}
	if args == nil {
		args = &NotificationChannelArgs{}
	}
	aliases := pulumi.Aliases([]pulumi.Alias{
		{
			Type: pulumi.String("azure-nextgen:devtestlab/v20160515:NotificationChannel"),
		},
		{
			Type: pulumi.String("azure-nextgen:devtestlab/v20180915:NotificationChannel"),
		},
	})
	opts = append(opts, aliases)
	var resource NotificationChannel
	err := ctx.RegisterResource("azure-nextgen:devtestlab/latest:NotificationChannel", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetNotificationChannel gets an existing NotificationChannel resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetNotificationChannel(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *NotificationChannelState, opts ...pulumi.ResourceOption) (*NotificationChannel, error) {
	var resource NotificationChannel
	err := ctx.ReadResource("azure-nextgen:devtestlab/latest:NotificationChannel", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering NotificationChannel resources.
type notificationChannelState struct {
	// The creation date of the notification channel.
	CreatedDate *string `pulumi:"createdDate"`
	// Description of notification.
	Description *string `pulumi:"description"`
	// The email recipient to send notifications to (can be a list of semi-colon separated email addresses).
	EmailRecipient *string `pulumi:"emailRecipient"`
	// The list of event for which this notification is enabled.
	Events []EventResponse `pulumi:"events"`
	// The location of the resource.
	Location *string `pulumi:"location"`
	// The name of the resource.
	Name *string `pulumi:"name"`
	// The locale to use when sending a notification (fallback for unsupported languages is EN).
	NotificationLocale *string `pulumi:"notificationLocale"`
	// The provisioning status of the resource.
	ProvisioningState *string `pulumi:"provisioningState"`
	// The tags of the resource.
	Tags map[string]string `pulumi:"tags"`
	// The type of the resource.
	Type *string `pulumi:"type"`
	// The unique immutable identifier of a resource (Guid).
	UniqueIdentifier *string `pulumi:"uniqueIdentifier"`
	// The webhook URL to send notifications to.
	WebHookUrl *string `pulumi:"webHookUrl"`
}

type NotificationChannelState struct {
	// The creation date of the notification channel.
	CreatedDate pulumi.StringPtrInput
	// Description of notification.
	Description pulumi.StringPtrInput
	// The email recipient to send notifications to (can be a list of semi-colon separated email addresses).
	EmailRecipient pulumi.StringPtrInput
	// The list of event for which this notification is enabled.
	Events EventResponseArrayInput
	// The location of the resource.
	Location pulumi.StringPtrInput
	// The name of the resource.
	Name pulumi.StringPtrInput
	// The locale to use when sending a notification (fallback for unsupported languages is EN).
	NotificationLocale pulumi.StringPtrInput
	// The provisioning status of the resource.
	ProvisioningState pulumi.StringPtrInput
	// The tags of the resource.
	Tags pulumi.StringMapInput
	// The type of the resource.
	Type pulumi.StringPtrInput
	// The unique immutable identifier of a resource (Guid).
	UniqueIdentifier pulumi.StringPtrInput
	// The webhook URL to send notifications to.
	WebHookUrl pulumi.StringPtrInput
}

func (NotificationChannelState) ElementType() reflect.Type {
	return reflect.TypeOf((*notificationChannelState)(nil)).Elem()
}

type notificationChannelArgs struct {
	// Description of notification.
	Description *string `pulumi:"description"`
	// The email recipient to send notifications to (can be a list of semi-colon separated email addresses).
	EmailRecipient *string `pulumi:"emailRecipient"`
	// The list of event for which this notification is enabled.
	Events []Event `pulumi:"events"`
	// The name of the lab.
	LabName string `pulumi:"labName"`
	// The location of the resource.
	Location *string `pulumi:"location"`
	// The name of the notification channel.
	Name string `pulumi:"name"`
	// The locale to use when sending a notification (fallback for unsupported languages is EN).
	NotificationLocale *string `pulumi:"notificationLocale"`
	// The name of the resource group.
	ResourceGroupName string `pulumi:"resourceGroupName"`
	// The tags of the resource.
	Tags map[string]string `pulumi:"tags"`
	// The webhook URL to send notifications to.
	WebHookUrl *string `pulumi:"webHookUrl"`
}

// The set of arguments for constructing a NotificationChannel resource.
type NotificationChannelArgs struct {
	// Description of notification.
	Description pulumi.StringPtrInput
	// The email recipient to send notifications to (can be a list of semi-colon separated email addresses).
	EmailRecipient pulumi.StringPtrInput
	// The list of event for which this notification is enabled.
	Events EventArrayInput
	// The name of the lab.
	LabName pulumi.StringInput
	// The location of the resource.
	Location pulumi.StringPtrInput
	// The name of the notification channel.
	Name pulumi.StringInput
	// The locale to use when sending a notification (fallback for unsupported languages is EN).
	NotificationLocale pulumi.StringPtrInput
	// The name of the resource group.
	ResourceGroupName pulumi.StringInput
	// The tags of the resource.
	Tags pulumi.StringMapInput
	// The webhook URL to send notifications to.
	WebHookUrl pulumi.StringPtrInput
}

func (NotificationChannelArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*notificationChannelArgs)(nil)).Elem()
}
