// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v20160331

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// Cosmos DB capability object
type Capability struct {
	// Name of the Cosmos DB capability. For example, "name": "EnableCassandra". Current values also include "EnableTable" and "EnableGremlin".
	Name *string `pulumi:"name"`
}

// CapabilityInput is an input type that accepts CapabilityArgs and CapabilityOutput values.
// You can construct a concrete instance of `CapabilityInput` via:
//
//          CapabilityArgs{...}
type CapabilityInput interface {
	pulumi.Input

	ToCapabilityOutput() CapabilityOutput
	ToCapabilityOutputWithContext(context.Context) CapabilityOutput
}

// Cosmos DB capability object
type CapabilityArgs struct {
	// Name of the Cosmos DB capability. For example, "name": "EnableCassandra". Current values also include "EnableTable" and "EnableGremlin".
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (CapabilityArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Capability)(nil)).Elem()
}

func (i CapabilityArgs) ToCapabilityOutput() CapabilityOutput {
	return i.ToCapabilityOutputWithContext(context.Background())
}

func (i CapabilityArgs) ToCapabilityOutputWithContext(ctx context.Context) CapabilityOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CapabilityOutput)
}

// CapabilityArrayInput is an input type that accepts CapabilityArray and CapabilityArrayOutput values.
// You can construct a concrete instance of `CapabilityArrayInput` via:
//
//          CapabilityArray{ CapabilityArgs{...} }
type CapabilityArrayInput interface {
	pulumi.Input

	ToCapabilityArrayOutput() CapabilityArrayOutput
	ToCapabilityArrayOutputWithContext(context.Context) CapabilityArrayOutput
}

type CapabilityArray []CapabilityInput

func (CapabilityArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Capability)(nil)).Elem()
}

func (i CapabilityArray) ToCapabilityArrayOutput() CapabilityArrayOutput {
	return i.ToCapabilityArrayOutputWithContext(context.Background())
}

func (i CapabilityArray) ToCapabilityArrayOutputWithContext(ctx context.Context) CapabilityArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CapabilityArrayOutput)
}

// Cosmos DB capability object
type CapabilityOutput struct{ *pulumi.OutputState }

func (CapabilityOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Capability)(nil)).Elem()
}

func (o CapabilityOutput) ToCapabilityOutput() CapabilityOutput {
	return o
}

func (o CapabilityOutput) ToCapabilityOutputWithContext(ctx context.Context) CapabilityOutput {
	return o
}

// Name of the Cosmos DB capability. For example, "name": "EnableCassandra". Current values also include "EnableTable" and "EnableGremlin".
func (o CapabilityOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Capability) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type CapabilityArrayOutput struct{ *pulumi.OutputState }

func (CapabilityArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Capability)(nil)).Elem()
}

func (o CapabilityArrayOutput) ToCapabilityArrayOutput() CapabilityArrayOutput {
	return o
}

func (o CapabilityArrayOutput) ToCapabilityArrayOutputWithContext(ctx context.Context) CapabilityArrayOutput {
	return o
}

func (o CapabilityArrayOutput) Index(i pulumi.IntInput) CapabilityOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) Capability {
		return vs[0].([]Capability)[vs[1].(int)]
	}).(CapabilityOutput)
}

// Cosmos DB capability object
type CapabilityResponse struct {
	// Name of the Cosmos DB capability. For example, "name": "EnableCassandra". Current values also include "EnableTable" and "EnableGremlin".
	Name *string `pulumi:"name"`
}

// CapabilityResponseInput is an input type that accepts CapabilityResponseArgs and CapabilityResponseOutput values.
// You can construct a concrete instance of `CapabilityResponseInput` via:
//
//          CapabilityResponseArgs{...}
type CapabilityResponseInput interface {
	pulumi.Input

	ToCapabilityResponseOutput() CapabilityResponseOutput
	ToCapabilityResponseOutputWithContext(context.Context) CapabilityResponseOutput
}

// Cosmos DB capability object
type CapabilityResponseArgs struct {
	// Name of the Cosmos DB capability. For example, "name": "EnableCassandra". Current values also include "EnableTable" and "EnableGremlin".
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (CapabilityResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CapabilityResponse)(nil)).Elem()
}

func (i CapabilityResponseArgs) ToCapabilityResponseOutput() CapabilityResponseOutput {
	return i.ToCapabilityResponseOutputWithContext(context.Background())
}

func (i CapabilityResponseArgs) ToCapabilityResponseOutputWithContext(ctx context.Context) CapabilityResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CapabilityResponseOutput)
}

// CapabilityResponseArrayInput is an input type that accepts CapabilityResponseArray and CapabilityResponseArrayOutput values.
// You can construct a concrete instance of `CapabilityResponseArrayInput` via:
//
//          CapabilityResponseArray{ CapabilityResponseArgs{...} }
type CapabilityResponseArrayInput interface {
	pulumi.Input

	ToCapabilityResponseArrayOutput() CapabilityResponseArrayOutput
	ToCapabilityResponseArrayOutputWithContext(context.Context) CapabilityResponseArrayOutput
}

type CapabilityResponseArray []CapabilityResponseInput

func (CapabilityResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CapabilityResponse)(nil)).Elem()
}

func (i CapabilityResponseArray) ToCapabilityResponseArrayOutput() CapabilityResponseArrayOutput {
	return i.ToCapabilityResponseArrayOutputWithContext(context.Background())
}

func (i CapabilityResponseArray) ToCapabilityResponseArrayOutputWithContext(ctx context.Context) CapabilityResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CapabilityResponseArrayOutput)
}

// Cosmos DB capability object
type CapabilityResponseOutput struct{ *pulumi.OutputState }

func (CapabilityResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CapabilityResponse)(nil)).Elem()
}

func (o CapabilityResponseOutput) ToCapabilityResponseOutput() CapabilityResponseOutput {
	return o
}

func (o CapabilityResponseOutput) ToCapabilityResponseOutputWithContext(ctx context.Context) CapabilityResponseOutput {
	return o
}

// Name of the Cosmos DB capability. For example, "name": "EnableCassandra". Current values also include "EnableTable" and "EnableGremlin".
func (o CapabilityResponseOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CapabilityResponse) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type CapabilityResponseArrayOutput struct{ *pulumi.OutputState }

func (CapabilityResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CapabilityResponse)(nil)).Elem()
}

func (o CapabilityResponseArrayOutput) ToCapabilityResponseArrayOutput() CapabilityResponseArrayOutput {
	return o
}

func (o CapabilityResponseArrayOutput) ToCapabilityResponseArrayOutputWithContext(ctx context.Context) CapabilityResponseArrayOutput {
	return o
}

func (o CapabilityResponseArrayOutput) Index(i pulumi.IntInput) CapabilityResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) CapabilityResponse {
		return vs[0].([]CapabilityResponse)[vs[1].(int)]
	}).(CapabilityResponseOutput)
}

// Cosmos DB Cassandra keyspace id object
type CassandraKeyspaceResource struct {
	// Name of the Cosmos DB Cassandra keyspace
	Id string `pulumi:"id"`
}

// CassandraKeyspaceResourceInput is an input type that accepts CassandraKeyspaceResourceArgs and CassandraKeyspaceResourceOutput values.
// You can construct a concrete instance of `CassandraKeyspaceResourceInput` via:
//
//          CassandraKeyspaceResourceArgs{...}
type CassandraKeyspaceResourceInput interface {
	pulumi.Input

	ToCassandraKeyspaceResourceOutput() CassandraKeyspaceResourceOutput
	ToCassandraKeyspaceResourceOutputWithContext(context.Context) CassandraKeyspaceResourceOutput
}

// Cosmos DB Cassandra keyspace id object
type CassandraKeyspaceResourceArgs struct {
	// Name of the Cosmos DB Cassandra keyspace
	Id pulumi.StringInput `pulumi:"id"`
}

func (CassandraKeyspaceResourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CassandraKeyspaceResource)(nil)).Elem()
}

func (i CassandraKeyspaceResourceArgs) ToCassandraKeyspaceResourceOutput() CassandraKeyspaceResourceOutput {
	return i.ToCassandraKeyspaceResourceOutputWithContext(context.Background())
}

func (i CassandraKeyspaceResourceArgs) ToCassandraKeyspaceResourceOutputWithContext(ctx context.Context) CassandraKeyspaceResourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CassandraKeyspaceResourceOutput)
}

func (i CassandraKeyspaceResourceArgs) ToCassandraKeyspaceResourcePtrOutput() CassandraKeyspaceResourcePtrOutput {
	return i.ToCassandraKeyspaceResourcePtrOutputWithContext(context.Background())
}

func (i CassandraKeyspaceResourceArgs) ToCassandraKeyspaceResourcePtrOutputWithContext(ctx context.Context) CassandraKeyspaceResourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CassandraKeyspaceResourceOutput).ToCassandraKeyspaceResourcePtrOutputWithContext(ctx)
}

// CassandraKeyspaceResourcePtrInput is an input type that accepts CassandraKeyspaceResourceArgs, CassandraKeyspaceResourcePtr and CassandraKeyspaceResourcePtrOutput values.
// You can construct a concrete instance of `CassandraKeyspaceResourcePtrInput` via:
//
//          CassandraKeyspaceResourceArgs{...}
//
//  or:
//
//          nil
type CassandraKeyspaceResourcePtrInput interface {
	pulumi.Input

	ToCassandraKeyspaceResourcePtrOutput() CassandraKeyspaceResourcePtrOutput
	ToCassandraKeyspaceResourcePtrOutputWithContext(context.Context) CassandraKeyspaceResourcePtrOutput
}

type cassandraKeyspaceResourcePtrType CassandraKeyspaceResourceArgs

func CassandraKeyspaceResourcePtr(v *CassandraKeyspaceResourceArgs) CassandraKeyspaceResourcePtrInput {
	return (*cassandraKeyspaceResourcePtrType)(v)
}

func (*cassandraKeyspaceResourcePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CassandraKeyspaceResource)(nil)).Elem()
}

func (i *cassandraKeyspaceResourcePtrType) ToCassandraKeyspaceResourcePtrOutput() CassandraKeyspaceResourcePtrOutput {
	return i.ToCassandraKeyspaceResourcePtrOutputWithContext(context.Background())
}

func (i *cassandraKeyspaceResourcePtrType) ToCassandraKeyspaceResourcePtrOutputWithContext(ctx context.Context) CassandraKeyspaceResourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CassandraKeyspaceResourcePtrOutput)
}

// Cosmos DB Cassandra keyspace id object
type CassandraKeyspaceResourceOutput struct{ *pulumi.OutputState }

func (CassandraKeyspaceResourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CassandraKeyspaceResource)(nil)).Elem()
}

func (o CassandraKeyspaceResourceOutput) ToCassandraKeyspaceResourceOutput() CassandraKeyspaceResourceOutput {
	return o
}

func (o CassandraKeyspaceResourceOutput) ToCassandraKeyspaceResourceOutputWithContext(ctx context.Context) CassandraKeyspaceResourceOutput {
	return o
}

func (o CassandraKeyspaceResourceOutput) ToCassandraKeyspaceResourcePtrOutput() CassandraKeyspaceResourcePtrOutput {
	return o.ToCassandraKeyspaceResourcePtrOutputWithContext(context.Background())
}

func (o CassandraKeyspaceResourceOutput) ToCassandraKeyspaceResourcePtrOutputWithContext(ctx context.Context) CassandraKeyspaceResourcePtrOutput {
	return o.ApplyT(func(v CassandraKeyspaceResource) *CassandraKeyspaceResource {
		return &v
	}).(CassandraKeyspaceResourcePtrOutput)
}

// Name of the Cosmos DB Cassandra keyspace
func (o CassandraKeyspaceResourceOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v CassandraKeyspaceResource) string { return v.Id }).(pulumi.StringOutput)
}

type CassandraKeyspaceResourcePtrOutput struct{ *pulumi.OutputState }

func (CassandraKeyspaceResourcePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CassandraKeyspaceResource)(nil)).Elem()
}

func (o CassandraKeyspaceResourcePtrOutput) ToCassandraKeyspaceResourcePtrOutput() CassandraKeyspaceResourcePtrOutput {
	return o
}

func (o CassandraKeyspaceResourcePtrOutput) ToCassandraKeyspaceResourcePtrOutputWithContext(ctx context.Context) CassandraKeyspaceResourcePtrOutput {
	return o
}

func (o CassandraKeyspaceResourcePtrOutput) Elem() CassandraKeyspaceResourceOutput {
	return o.ApplyT(func(v *CassandraKeyspaceResource) CassandraKeyspaceResource { return *v }).(CassandraKeyspaceResourceOutput)
}

// Name of the Cosmos DB Cassandra keyspace
func (o CassandraKeyspaceResourcePtrOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CassandraKeyspaceResource) *string {
		if v == nil {
			return nil
		}
		return &v.Id
	}).(pulumi.StringPtrOutput)
}

// Cosmos DB Cassandra table partition key
type CassandraPartitionKey struct {
	// Name of the Cosmos DB Cassandra table partition key
	Name *string `pulumi:"name"`
}

// CassandraPartitionKeyInput is an input type that accepts CassandraPartitionKeyArgs and CassandraPartitionKeyOutput values.
// You can construct a concrete instance of `CassandraPartitionKeyInput` via:
//
//          CassandraPartitionKeyArgs{...}
type CassandraPartitionKeyInput interface {
	pulumi.Input

	ToCassandraPartitionKeyOutput() CassandraPartitionKeyOutput
	ToCassandraPartitionKeyOutputWithContext(context.Context) CassandraPartitionKeyOutput
}

// Cosmos DB Cassandra table partition key
type CassandraPartitionKeyArgs struct {
	// Name of the Cosmos DB Cassandra table partition key
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (CassandraPartitionKeyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CassandraPartitionKey)(nil)).Elem()
}

func (i CassandraPartitionKeyArgs) ToCassandraPartitionKeyOutput() CassandraPartitionKeyOutput {
	return i.ToCassandraPartitionKeyOutputWithContext(context.Background())
}

func (i CassandraPartitionKeyArgs) ToCassandraPartitionKeyOutputWithContext(ctx context.Context) CassandraPartitionKeyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CassandraPartitionKeyOutput)
}

// CassandraPartitionKeyArrayInput is an input type that accepts CassandraPartitionKeyArray and CassandraPartitionKeyArrayOutput values.
// You can construct a concrete instance of `CassandraPartitionKeyArrayInput` via:
//
//          CassandraPartitionKeyArray{ CassandraPartitionKeyArgs{...} }
type CassandraPartitionKeyArrayInput interface {
	pulumi.Input

	ToCassandraPartitionKeyArrayOutput() CassandraPartitionKeyArrayOutput
	ToCassandraPartitionKeyArrayOutputWithContext(context.Context) CassandraPartitionKeyArrayOutput
}

type CassandraPartitionKeyArray []CassandraPartitionKeyInput

func (CassandraPartitionKeyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CassandraPartitionKey)(nil)).Elem()
}

func (i CassandraPartitionKeyArray) ToCassandraPartitionKeyArrayOutput() CassandraPartitionKeyArrayOutput {
	return i.ToCassandraPartitionKeyArrayOutputWithContext(context.Background())
}

func (i CassandraPartitionKeyArray) ToCassandraPartitionKeyArrayOutputWithContext(ctx context.Context) CassandraPartitionKeyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CassandraPartitionKeyArrayOutput)
}

// Cosmos DB Cassandra table partition key
type CassandraPartitionKeyOutput struct{ *pulumi.OutputState }

func (CassandraPartitionKeyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CassandraPartitionKey)(nil)).Elem()
}

func (o CassandraPartitionKeyOutput) ToCassandraPartitionKeyOutput() CassandraPartitionKeyOutput {
	return o
}

func (o CassandraPartitionKeyOutput) ToCassandraPartitionKeyOutputWithContext(ctx context.Context) CassandraPartitionKeyOutput {
	return o
}

// Name of the Cosmos DB Cassandra table partition key
func (o CassandraPartitionKeyOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CassandraPartitionKey) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type CassandraPartitionKeyArrayOutput struct{ *pulumi.OutputState }

func (CassandraPartitionKeyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CassandraPartitionKey)(nil)).Elem()
}

func (o CassandraPartitionKeyArrayOutput) ToCassandraPartitionKeyArrayOutput() CassandraPartitionKeyArrayOutput {
	return o
}

func (o CassandraPartitionKeyArrayOutput) ToCassandraPartitionKeyArrayOutputWithContext(ctx context.Context) CassandraPartitionKeyArrayOutput {
	return o
}

func (o CassandraPartitionKeyArrayOutput) Index(i pulumi.IntInput) CassandraPartitionKeyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) CassandraPartitionKey {
		return vs[0].([]CassandraPartitionKey)[vs[1].(int)]
	}).(CassandraPartitionKeyOutput)
}

// Cosmos DB Cassandra table partition key
type CassandraPartitionKeyResponse struct {
	// Name of the Cosmos DB Cassandra table partition key
	Name *string `pulumi:"name"`
}

// CassandraPartitionKeyResponseInput is an input type that accepts CassandraPartitionKeyResponseArgs and CassandraPartitionKeyResponseOutput values.
// You can construct a concrete instance of `CassandraPartitionKeyResponseInput` via:
//
//          CassandraPartitionKeyResponseArgs{...}
type CassandraPartitionKeyResponseInput interface {
	pulumi.Input

	ToCassandraPartitionKeyResponseOutput() CassandraPartitionKeyResponseOutput
	ToCassandraPartitionKeyResponseOutputWithContext(context.Context) CassandraPartitionKeyResponseOutput
}

// Cosmos DB Cassandra table partition key
type CassandraPartitionKeyResponseArgs struct {
	// Name of the Cosmos DB Cassandra table partition key
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (CassandraPartitionKeyResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CassandraPartitionKeyResponse)(nil)).Elem()
}

func (i CassandraPartitionKeyResponseArgs) ToCassandraPartitionKeyResponseOutput() CassandraPartitionKeyResponseOutput {
	return i.ToCassandraPartitionKeyResponseOutputWithContext(context.Background())
}

func (i CassandraPartitionKeyResponseArgs) ToCassandraPartitionKeyResponseOutputWithContext(ctx context.Context) CassandraPartitionKeyResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CassandraPartitionKeyResponseOutput)
}

// CassandraPartitionKeyResponseArrayInput is an input type that accepts CassandraPartitionKeyResponseArray and CassandraPartitionKeyResponseArrayOutput values.
// You can construct a concrete instance of `CassandraPartitionKeyResponseArrayInput` via:
//
//          CassandraPartitionKeyResponseArray{ CassandraPartitionKeyResponseArgs{...} }
type CassandraPartitionKeyResponseArrayInput interface {
	pulumi.Input

	ToCassandraPartitionKeyResponseArrayOutput() CassandraPartitionKeyResponseArrayOutput
	ToCassandraPartitionKeyResponseArrayOutputWithContext(context.Context) CassandraPartitionKeyResponseArrayOutput
}

type CassandraPartitionKeyResponseArray []CassandraPartitionKeyResponseInput

func (CassandraPartitionKeyResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CassandraPartitionKeyResponse)(nil)).Elem()
}

func (i CassandraPartitionKeyResponseArray) ToCassandraPartitionKeyResponseArrayOutput() CassandraPartitionKeyResponseArrayOutput {
	return i.ToCassandraPartitionKeyResponseArrayOutputWithContext(context.Background())
}

func (i CassandraPartitionKeyResponseArray) ToCassandraPartitionKeyResponseArrayOutputWithContext(ctx context.Context) CassandraPartitionKeyResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CassandraPartitionKeyResponseArrayOutput)
}

// Cosmos DB Cassandra table partition key
type CassandraPartitionKeyResponseOutput struct{ *pulumi.OutputState }

func (CassandraPartitionKeyResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CassandraPartitionKeyResponse)(nil)).Elem()
}

func (o CassandraPartitionKeyResponseOutput) ToCassandraPartitionKeyResponseOutput() CassandraPartitionKeyResponseOutput {
	return o
}

func (o CassandraPartitionKeyResponseOutput) ToCassandraPartitionKeyResponseOutputWithContext(ctx context.Context) CassandraPartitionKeyResponseOutput {
	return o
}

// Name of the Cosmos DB Cassandra table partition key
func (o CassandraPartitionKeyResponseOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CassandraPartitionKeyResponse) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type CassandraPartitionKeyResponseArrayOutput struct{ *pulumi.OutputState }

func (CassandraPartitionKeyResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CassandraPartitionKeyResponse)(nil)).Elem()
}

func (o CassandraPartitionKeyResponseArrayOutput) ToCassandraPartitionKeyResponseArrayOutput() CassandraPartitionKeyResponseArrayOutput {
	return o
}

func (o CassandraPartitionKeyResponseArrayOutput) ToCassandraPartitionKeyResponseArrayOutputWithContext(ctx context.Context) CassandraPartitionKeyResponseArrayOutput {
	return o
}

func (o CassandraPartitionKeyResponseArrayOutput) Index(i pulumi.IntInput) CassandraPartitionKeyResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) CassandraPartitionKeyResponse {
		return vs[0].([]CassandraPartitionKeyResponse)[vs[1].(int)]
	}).(CassandraPartitionKeyResponseOutput)
}

// Cosmos DB Cassandra table schema
type CassandraSchema struct {
	// List of cluster key.
	ClusterKeys []ClusterKey `pulumi:"clusterKeys"`
	// List of Cassandra table columns.
	Columns []Column `pulumi:"columns"`
	// List of partition key.
	PartitionKeys []CassandraPartitionKey `pulumi:"partitionKeys"`
}

// CassandraSchemaInput is an input type that accepts CassandraSchemaArgs and CassandraSchemaOutput values.
// You can construct a concrete instance of `CassandraSchemaInput` via:
//
//          CassandraSchemaArgs{...}
type CassandraSchemaInput interface {
	pulumi.Input

	ToCassandraSchemaOutput() CassandraSchemaOutput
	ToCassandraSchemaOutputWithContext(context.Context) CassandraSchemaOutput
}

// Cosmos DB Cassandra table schema
type CassandraSchemaArgs struct {
	// List of cluster key.
	ClusterKeys ClusterKeyArrayInput `pulumi:"clusterKeys"`
	// List of Cassandra table columns.
	Columns ColumnArrayInput `pulumi:"columns"`
	// List of partition key.
	PartitionKeys CassandraPartitionKeyArrayInput `pulumi:"partitionKeys"`
}

func (CassandraSchemaArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CassandraSchema)(nil)).Elem()
}

func (i CassandraSchemaArgs) ToCassandraSchemaOutput() CassandraSchemaOutput {
	return i.ToCassandraSchemaOutputWithContext(context.Background())
}

func (i CassandraSchemaArgs) ToCassandraSchemaOutputWithContext(ctx context.Context) CassandraSchemaOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CassandraSchemaOutput)
}

func (i CassandraSchemaArgs) ToCassandraSchemaPtrOutput() CassandraSchemaPtrOutput {
	return i.ToCassandraSchemaPtrOutputWithContext(context.Background())
}

func (i CassandraSchemaArgs) ToCassandraSchemaPtrOutputWithContext(ctx context.Context) CassandraSchemaPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CassandraSchemaOutput).ToCassandraSchemaPtrOutputWithContext(ctx)
}

// CassandraSchemaPtrInput is an input type that accepts CassandraSchemaArgs, CassandraSchemaPtr and CassandraSchemaPtrOutput values.
// You can construct a concrete instance of `CassandraSchemaPtrInput` via:
//
//          CassandraSchemaArgs{...}
//
//  or:
//
//          nil
type CassandraSchemaPtrInput interface {
	pulumi.Input

	ToCassandraSchemaPtrOutput() CassandraSchemaPtrOutput
	ToCassandraSchemaPtrOutputWithContext(context.Context) CassandraSchemaPtrOutput
}

type cassandraSchemaPtrType CassandraSchemaArgs

func CassandraSchemaPtr(v *CassandraSchemaArgs) CassandraSchemaPtrInput {
	return (*cassandraSchemaPtrType)(v)
}

func (*cassandraSchemaPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CassandraSchema)(nil)).Elem()
}

func (i *cassandraSchemaPtrType) ToCassandraSchemaPtrOutput() CassandraSchemaPtrOutput {
	return i.ToCassandraSchemaPtrOutputWithContext(context.Background())
}

func (i *cassandraSchemaPtrType) ToCassandraSchemaPtrOutputWithContext(ctx context.Context) CassandraSchemaPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CassandraSchemaPtrOutput)
}

// Cosmos DB Cassandra table schema
type CassandraSchemaOutput struct{ *pulumi.OutputState }

func (CassandraSchemaOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CassandraSchema)(nil)).Elem()
}

func (o CassandraSchemaOutput) ToCassandraSchemaOutput() CassandraSchemaOutput {
	return o
}

func (o CassandraSchemaOutput) ToCassandraSchemaOutputWithContext(ctx context.Context) CassandraSchemaOutput {
	return o
}

func (o CassandraSchemaOutput) ToCassandraSchemaPtrOutput() CassandraSchemaPtrOutput {
	return o.ToCassandraSchemaPtrOutputWithContext(context.Background())
}

func (o CassandraSchemaOutput) ToCassandraSchemaPtrOutputWithContext(ctx context.Context) CassandraSchemaPtrOutput {
	return o.ApplyT(func(v CassandraSchema) *CassandraSchema {
		return &v
	}).(CassandraSchemaPtrOutput)
}

// List of cluster key.
func (o CassandraSchemaOutput) ClusterKeys() ClusterKeyArrayOutput {
	return o.ApplyT(func(v CassandraSchema) []ClusterKey { return v.ClusterKeys }).(ClusterKeyArrayOutput)
}

// List of Cassandra table columns.
func (o CassandraSchemaOutput) Columns() ColumnArrayOutput {
	return o.ApplyT(func(v CassandraSchema) []Column { return v.Columns }).(ColumnArrayOutput)
}

// List of partition key.
func (o CassandraSchemaOutput) PartitionKeys() CassandraPartitionKeyArrayOutput {
	return o.ApplyT(func(v CassandraSchema) []CassandraPartitionKey { return v.PartitionKeys }).(CassandraPartitionKeyArrayOutput)
}

type CassandraSchemaPtrOutput struct{ *pulumi.OutputState }

func (CassandraSchemaPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CassandraSchema)(nil)).Elem()
}

func (o CassandraSchemaPtrOutput) ToCassandraSchemaPtrOutput() CassandraSchemaPtrOutput {
	return o
}

func (o CassandraSchemaPtrOutput) ToCassandraSchemaPtrOutputWithContext(ctx context.Context) CassandraSchemaPtrOutput {
	return o
}

func (o CassandraSchemaPtrOutput) Elem() CassandraSchemaOutput {
	return o.ApplyT(func(v *CassandraSchema) CassandraSchema { return *v }).(CassandraSchemaOutput)
}

// List of cluster key.
func (o CassandraSchemaPtrOutput) ClusterKeys() ClusterKeyArrayOutput {
	return o.ApplyT(func(v *CassandraSchema) []ClusterKey {
		if v == nil {
			return nil
		}
		return v.ClusterKeys
	}).(ClusterKeyArrayOutput)
}

// List of Cassandra table columns.
func (o CassandraSchemaPtrOutput) Columns() ColumnArrayOutput {
	return o.ApplyT(func(v *CassandraSchema) []Column {
		if v == nil {
			return nil
		}
		return v.Columns
	}).(ColumnArrayOutput)
}

// List of partition key.
func (o CassandraSchemaPtrOutput) PartitionKeys() CassandraPartitionKeyArrayOutput {
	return o.ApplyT(func(v *CassandraSchema) []CassandraPartitionKey {
		if v == nil {
			return nil
		}
		return v.PartitionKeys
	}).(CassandraPartitionKeyArrayOutput)
}

// Cosmos DB Cassandra table schema
type CassandraSchemaResponse struct {
	// List of cluster key.
	ClusterKeys []ClusterKeyResponse `pulumi:"clusterKeys"`
	// List of Cassandra table columns.
	Columns []ColumnResponse `pulumi:"columns"`
	// List of partition key.
	PartitionKeys []CassandraPartitionKeyResponse `pulumi:"partitionKeys"`
}

// CassandraSchemaResponseInput is an input type that accepts CassandraSchemaResponseArgs and CassandraSchemaResponseOutput values.
// You can construct a concrete instance of `CassandraSchemaResponseInput` via:
//
//          CassandraSchemaResponseArgs{...}
type CassandraSchemaResponseInput interface {
	pulumi.Input

	ToCassandraSchemaResponseOutput() CassandraSchemaResponseOutput
	ToCassandraSchemaResponseOutputWithContext(context.Context) CassandraSchemaResponseOutput
}

// Cosmos DB Cassandra table schema
type CassandraSchemaResponseArgs struct {
	// List of cluster key.
	ClusterKeys ClusterKeyResponseArrayInput `pulumi:"clusterKeys"`
	// List of Cassandra table columns.
	Columns ColumnResponseArrayInput `pulumi:"columns"`
	// List of partition key.
	PartitionKeys CassandraPartitionKeyResponseArrayInput `pulumi:"partitionKeys"`
}

func (CassandraSchemaResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CassandraSchemaResponse)(nil)).Elem()
}

func (i CassandraSchemaResponseArgs) ToCassandraSchemaResponseOutput() CassandraSchemaResponseOutput {
	return i.ToCassandraSchemaResponseOutputWithContext(context.Background())
}

func (i CassandraSchemaResponseArgs) ToCassandraSchemaResponseOutputWithContext(ctx context.Context) CassandraSchemaResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CassandraSchemaResponseOutput)
}

func (i CassandraSchemaResponseArgs) ToCassandraSchemaResponsePtrOutput() CassandraSchemaResponsePtrOutput {
	return i.ToCassandraSchemaResponsePtrOutputWithContext(context.Background())
}

func (i CassandraSchemaResponseArgs) ToCassandraSchemaResponsePtrOutputWithContext(ctx context.Context) CassandraSchemaResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CassandraSchemaResponseOutput).ToCassandraSchemaResponsePtrOutputWithContext(ctx)
}

// CassandraSchemaResponsePtrInput is an input type that accepts CassandraSchemaResponseArgs, CassandraSchemaResponsePtr and CassandraSchemaResponsePtrOutput values.
// You can construct a concrete instance of `CassandraSchemaResponsePtrInput` via:
//
//          CassandraSchemaResponseArgs{...}
//
//  or:
//
//          nil
type CassandraSchemaResponsePtrInput interface {
	pulumi.Input

	ToCassandraSchemaResponsePtrOutput() CassandraSchemaResponsePtrOutput
	ToCassandraSchemaResponsePtrOutputWithContext(context.Context) CassandraSchemaResponsePtrOutput
}

type cassandraSchemaResponsePtrType CassandraSchemaResponseArgs

func CassandraSchemaResponsePtr(v *CassandraSchemaResponseArgs) CassandraSchemaResponsePtrInput {
	return (*cassandraSchemaResponsePtrType)(v)
}

func (*cassandraSchemaResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CassandraSchemaResponse)(nil)).Elem()
}

func (i *cassandraSchemaResponsePtrType) ToCassandraSchemaResponsePtrOutput() CassandraSchemaResponsePtrOutput {
	return i.ToCassandraSchemaResponsePtrOutputWithContext(context.Background())
}

func (i *cassandraSchemaResponsePtrType) ToCassandraSchemaResponsePtrOutputWithContext(ctx context.Context) CassandraSchemaResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CassandraSchemaResponsePtrOutput)
}

// Cosmos DB Cassandra table schema
type CassandraSchemaResponseOutput struct{ *pulumi.OutputState }

func (CassandraSchemaResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CassandraSchemaResponse)(nil)).Elem()
}

func (o CassandraSchemaResponseOutput) ToCassandraSchemaResponseOutput() CassandraSchemaResponseOutput {
	return o
}

func (o CassandraSchemaResponseOutput) ToCassandraSchemaResponseOutputWithContext(ctx context.Context) CassandraSchemaResponseOutput {
	return o
}

func (o CassandraSchemaResponseOutput) ToCassandraSchemaResponsePtrOutput() CassandraSchemaResponsePtrOutput {
	return o.ToCassandraSchemaResponsePtrOutputWithContext(context.Background())
}

func (o CassandraSchemaResponseOutput) ToCassandraSchemaResponsePtrOutputWithContext(ctx context.Context) CassandraSchemaResponsePtrOutput {
	return o.ApplyT(func(v CassandraSchemaResponse) *CassandraSchemaResponse {
		return &v
	}).(CassandraSchemaResponsePtrOutput)
}

// List of cluster key.
func (o CassandraSchemaResponseOutput) ClusterKeys() ClusterKeyResponseArrayOutput {
	return o.ApplyT(func(v CassandraSchemaResponse) []ClusterKeyResponse { return v.ClusterKeys }).(ClusterKeyResponseArrayOutput)
}

// List of Cassandra table columns.
func (o CassandraSchemaResponseOutput) Columns() ColumnResponseArrayOutput {
	return o.ApplyT(func(v CassandraSchemaResponse) []ColumnResponse { return v.Columns }).(ColumnResponseArrayOutput)
}

// List of partition key.
func (o CassandraSchemaResponseOutput) PartitionKeys() CassandraPartitionKeyResponseArrayOutput {
	return o.ApplyT(func(v CassandraSchemaResponse) []CassandraPartitionKeyResponse { return v.PartitionKeys }).(CassandraPartitionKeyResponseArrayOutput)
}

type CassandraSchemaResponsePtrOutput struct{ *pulumi.OutputState }

func (CassandraSchemaResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CassandraSchemaResponse)(nil)).Elem()
}

func (o CassandraSchemaResponsePtrOutput) ToCassandraSchemaResponsePtrOutput() CassandraSchemaResponsePtrOutput {
	return o
}

func (o CassandraSchemaResponsePtrOutput) ToCassandraSchemaResponsePtrOutputWithContext(ctx context.Context) CassandraSchemaResponsePtrOutput {
	return o
}

func (o CassandraSchemaResponsePtrOutput) Elem() CassandraSchemaResponseOutput {
	return o.ApplyT(func(v *CassandraSchemaResponse) CassandraSchemaResponse { return *v }).(CassandraSchemaResponseOutput)
}

// List of cluster key.
func (o CassandraSchemaResponsePtrOutput) ClusterKeys() ClusterKeyResponseArrayOutput {
	return o.ApplyT(func(v *CassandraSchemaResponse) []ClusterKeyResponse {
		if v == nil {
			return nil
		}
		return v.ClusterKeys
	}).(ClusterKeyResponseArrayOutput)
}

// List of Cassandra table columns.
func (o CassandraSchemaResponsePtrOutput) Columns() ColumnResponseArrayOutput {
	return o.ApplyT(func(v *CassandraSchemaResponse) []ColumnResponse {
		if v == nil {
			return nil
		}
		return v.Columns
	}).(ColumnResponseArrayOutput)
}

// List of partition key.
func (o CassandraSchemaResponsePtrOutput) PartitionKeys() CassandraPartitionKeyResponseArrayOutput {
	return o.ApplyT(func(v *CassandraSchemaResponse) []CassandraPartitionKeyResponse {
		if v == nil {
			return nil
		}
		return v.PartitionKeys
	}).(CassandraPartitionKeyResponseArrayOutput)
}

// Cosmos DB Cassandra table id object
type CassandraTableResource struct {
	// Time to live of the Cosmos DB Cassandra table
	DefaultTtl *int `pulumi:"defaultTtl"`
	// Name of the Cosmos DB Cassandra table
	Id string `pulumi:"id"`
	// Schema of the Cosmos DB Cassandra table
	Schema *CassandraSchema `pulumi:"schema"`
}

// CassandraTableResourceInput is an input type that accepts CassandraTableResourceArgs and CassandraTableResourceOutput values.
// You can construct a concrete instance of `CassandraTableResourceInput` via:
//
//          CassandraTableResourceArgs{...}
type CassandraTableResourceInput interface {
	pulumi.Input

	ToCassandraTableResourceOutput() CassandraTableResourceOutput
	ToCassandraTableResourceOutputWithContext(context.Context) CassandraTableResourceOutput
}

// Cosmos DB Cassandra table id object
type CassandraTableResourceArgs struct {
	// Time to live of the Cosmos DB Cassandra table
	DefaultTtl pulumi.IntPtrInput `pulumi:"defaultTtl"`
	// Name of the Cosmos DB Cassandra table
	Id pulumi.StringInput `pulumi:"id"`
	// Schema of the Cosmos DB Cassandra table
	Schema CassandraSchemaPtrInput `pulumi:"schema"`
}

func (CassandraTableResourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CassandraTableResource)(nil)).Elem()
}

func (i CassandraTableResourceArgs) ToCassandraTableResourceOutput() CassandraTableResourceOutput {
	return i.ToCassandraTableResourceOutputWithContext(context.Background())
}

func (i CassandraTableResourceArgs) ToCassandraTableResourceOutputWithContext(ctx context.Context) CassandraTableResourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CassandraTableResourceOutput)
}

func (i CassandraTableResourceArgs) ToCassandraTableResourcePtrOutput() CassandraTableResourcePtrOutput {
	return i.ToCassandraTableResourcePtrOutputWithContext(context.Background())
}

func (i CassandraTableResourceArgs) ToCassandraTableResourcePtrOutputWithContext(ctx context.Context) CassandraTableResourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CassandraTableResourceOutput).ToCassandraTableResourcePtrOutputWithContext(ctx)
}

// CassandraTableResourcePtrInput is an input type that accepts CassandraTableResourceArgs, CassandraTableResourcePtr and CassandraTableResourcePtrOutput values.
// You can construct a concrete instance of `CassandraTableResourcePtrInput` via:
//
//          CassandraTableResourceArgs{...}
//
//  or:
//
//          nil
type CassandraTableResourcePtrInput interface {
	pulumi.Input

	ToCassandraTableResourcePtrOutput() CassandraTableResourcePtrOutput
	ToCassandraTableResourcePtrOutputWithContext(context.Context) CassandraTableResourcePtrOutput
}

type cassandraTableResourcePtrType CassandraTableResourceArgs

func CassandraTableResourcePtr(v *CassandraTableResourceArgs) CassandraTableResourcePtrInput {
	return (*cassandraTableResourcePtrType)(v)
}

func (*cassandraTableResourcePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CassandraTableResource)(nil)).Elem()
}

func (i *cassandraTableResourcePtrType) ToCassandraTableResourcePtrOutput() CassandraTableResourcePtrOutput {
	return i.ToCassandraTableResourcePtrOutputWithContext(context.Background())
}

func (i *cassandraTableResourcePtrType) ToCassandraTableResourcePtrOutputWithContext(ctx context.Context) CassandraTableResourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CassandraTableResourcePtrOutput)
}

// Cosmos DB Cassandra table id object
type CassandraTableResourceOutput struct{ *pulumi.OutputState }

func (CassandraTableResourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CassandraTableResource)(nil)).Elem()
}

func (o CassandraTableResourceOutput) ToCassandraTableResourceOutput() CassandraTableResourceOutput {
	return o
}

func (o CassandraTableResourceOutput) ToCassandraTableResourceOutputWithContext(ctx context.Context) CassandraTableResourceOutput {
	return o
}

func (o CassandraTableResourceOutput) ToCassandraTableResourcePtrOutput() CassandraTableResourcePtrOutput {
	return o.ToCassandraTableResourcePtrOutputWithContext(context.Background())
}

func (o CassandraTableResourceOutput) ToCassandraTableResourcePtrOutputWithContext(ctx context.Context) CassandraTableResourcePtrOutput {
	return o.ApplyT(func(v CassandraTableResource) *CassandraTableResource {
		return &v
	}).(CassandraTableResourcePtrOutput)
}

// Time to live of the Cosmos DB Cassandra table
func (o CassandraTableResourceOutput) DefaultTtl() pulumi.IntPtrOutput {
	return o.ApplyT(func(v CassandraTableResource) *int { return v.DefaultTtl }).(pulumi.IntPtrOutput)
}

// Name of the Cosmos DB Cassandra table
func (o CassandraTableResourceOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v CassandraTableResource) string { return v.Id }).(pulumi.StringOutput)
}

// Schema of the Cosmos DB Cassandra table
func (o CassandraTableResourceOutput) Schema() CassandraSchemaPtrOutput {
	return o.ApplyT(func(v CassandraTableResource) *CassandraSchema { return v.Schema }).(CassandraSchemaPtrOutput)
}

type CassandraTableResourcePtrOutput struct{ *pulumi.OutputState }

func (CassandraTableResourcePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CassandraTableResource)(nil)).Elem()
}

func (o CassandraTableResourcePtrOutput) ToCassandraTableResourcePtrOutput() CassandraTableResourcePtrOutput {
	return o
}

func (o CassandraTableResourcePtrOutput) ToCassandraTableResourcePtrOutputWithContext(ctx context.Context) CassandraTableResourcePtrOutput {
	return o
}

func (o CassandraTableResourcePtrOutput) Elem() CassandraTableResourceOutput {
	return o.ApplyT(func(v *CassandraTableResource) CassandraTableResource { return *v }).(CassandraTableResourceOutput)
}

// Time to live of the Cosmos DB Cassandra table
func (o CassandraTableResourcePtrOutput) DefaultTtl() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *CassandraTableResource) *int {
		if v == nil {
			return nil
		}
		return v.DefaultTtl
	}).(pulumi.IntPtrOutput)
}

// Name of the Cosmos DB Cassandra table
func (o CassandraTableResourcePtrOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CassandraTableResource) *string {
		if v == nil {
			return nil
		}
		return &v.Id
	}).(pulumi.StringPtrOutput)
}

// Schema of the Cosmos DB Cassandra table
func (o CassandraTableResourcePtrOutput) Schema() CassandraSchemaPtrOutput {
	return o.ApplyT(func(v *CassandraTableResource) *CassandraSchema {
		if v == nil {
			return nil
		}
		return v.Schema
	}).(CassandraSchemaPtrOutput)
}

// Cosmos DB Cassandra table cluster key
type ClusterKey struct {
	// Name of the Cosmos DB Cassandra table cluster key
	Name *string `pulumi:"name"`
	// Order of the Cosmos DB Cassandra table cluster key, only support "Asc" and "Desc"
	OrderBy *string `pulumi:"orderBy"`
}

// ClusterKeyInput is an input type that accepts ClusterKeyArgs and ClusterKeyOutput values.
// You can construct a concrete instance of `ClusterKeyInput` via:
//
//          ClusterKeyArgs{...}
type ClusterKeyInput interface {
	pulumi.Input

	ToClusterKeyOutput() ClusterKeyOutput
	ToClusterKeyOutputWithContext(context.Context) ClusterKeyOutput
}

// Cosmos DB Cassandra table cluster key
type ClusterKeyArgs struct {
	// Name of the Cosmos DB Cassandra table cluster key
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Order of the Cosmos DB Cassandra table cluster key, only support "Asc" and "Desc"
	OrderBy pulumi.StringPtrInput `pulumi:"orderBy"`
}

func (ClusterKeyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterKey)(nil)).Elem()
}

func (i ClusterKeyArgs) ToClusterKeyOutput() ClusterKeyOutput {
	return i.ToClusterKeyOutputWithContext(context.Background())
}

func (i ClusterKeyArgs) ToClusterKeyOutputWithContext(ctx context.Context) ClusterKeyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterKeyOutput)
}

// ClusterKeyArrayInput is an input type that accepts ClusterKeyArray and ClusterKeyArrayOutput values.
// You can construct a concrete instance of `ClusterKeyArrayInput` via:
//
//          ClusterKeyArray{ ClusterKeyArgs{...} }
type ClusterKeyArrayInput interface {
	pulumi.Input

	ToClusterKeyArrayOutput() ClusterKeyArrayOutput
	ToClusterKeyArrayOutputWithContext(context.Context) ClusterKeyArrayOutput
}

type ClusterKeyArray []ClusterKeyInput

func (ClusterKeyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ClusterKey)(nil)).Elem()
}

func (i ClusterKeyArray) ToClusterKeyArrayOutput() ClusterKeyArrayOutput {
	return i.ToClusterKeyArrayOutputWithContext(context.Background())
}

func (i ClusterKeyArray) ToClusterKeyArrayOutputWithContext(ctx context.Context) ClusterKeyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterKeyArrayOutput)
}

// Cosmos DB Cassandra table cluster key
type ClusterKeyOutput struct{ *pulumi.OutputState }

func (ClusterKeyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterKey)(nil)).Elem()
}

func (o ClusterKeyOutput) ToClusterKeyOutput() ClusterKeyOutput {
	return o
}

func (o ClusterKeyOutput) ToClusterKeyOutputWithContext(ctx context.Context) ClusterKeyOutput {
	return o
}

// Name of the Cosmos DB Cassandra table cluster key
func (o ClusterKeyOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClusterKey) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Order of the Cosmos DB Cassandra table cluster key, only support "Asc" and "Desc"
func (o ClusterKeyOutput) OrderBy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClusterKey) *string { return v.OrderBy }).(pulumi.StringPtrOutput)
}

type ClusterKeyArrayOutput struct{ *pulumi.OutputState }

func (ClusterKeyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ClusterKey)(nil)).Elem()
}

func (o ClusterKeyArrayOutput) ToClusterKeyArrayOutput() ClusterKeyArrayOutput {
	return o
}

func (o ClusterKeyArrayOutput) ToClusterKeyArrayOutputWithContext(ctx context.Context) ClusterKeyArrayOutput {
	return o
}

func (o ClusterKeyArrayOutput) Index(i pulumi.IntInput) ClusterKeyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ClusterKey {
		return vs[0].([]ClusterKey)[vs[1].(int)]
	}).(ClusterKeyOutput)
}

// Cosmos DB Cassandra table cluster key
type ClusterKeyResponse struct {
	// Name of the Cosmos DB Cassandra table cluster key
	Name *string `pulumi:"name"`
	// Order of the Cosmos DB Cassandra table cluster key, only support "Asc" and "Desc"
	OrderBy *string `pulumi:"orderBy"`
}

// ClusterKeyResponseInput is an input type that accepts ClusterKeyResponseArgs and ClusterKeyResponseOutput values.
// You can construct a concrete instance of `ClusterKeyResponseInput` via:
//
//          ClusterKeyResponseArgs{...}
type ClusterKeyResponseInput interface {
	pulumi.Input

	ToClusterKeyResponseOutput() ClusterKeyResponseOutput
	ToClusterKeyResponseOutputWithContext(context.Context) ClusterKeyResponseOutput
}

// Cosmos DB Cassandra table cluster key
type ClusterKeyResponseArgs struct {
	// Name of the Cosmos DB Cassandra table cluster key
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Order of the Cosmos DB Cassandra table cluster key, only support "Asc" and "Desc"
	OrderBy pulumi.StringPtrInput `pulumi:"orderBy"`
}

func (ClusterKeyResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterKeyResponse)(nil)).Elem()
}

func (i ClusterKeyResponseArgs) ToClusterKeyResponseOutput() ClusterKeyResponseOutput {
	return i.ToClusterKeyResponseOutputWithContext(context.Background())
}

func (i ClusterKeyResponseArgs) ToClusterKeyResponseOutputWithContext(ctx context.Context) ClusterKeyResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterKeyResponseOutput)
}

// ClusterKeyResponseArrayInput is an input type that accepts ClusterKeyResponseArray and ClusterKeyResponseArrayOutput values.
// You can construct a concrete instance of `ClusterKeyResponseArrayInput` via:
//
//          ClusterKeyResponseArray{ ClusterKeyResponseArgs{...} }
type ClusterKeyResponseArrayInput interface {
	pulumi.Input

	ToClusterKeyResponseArrayOutput() ClusterKeyResponseArrayOutput
	ToClusterKeyResponseArrayOutputWithContext(context.Context) ClusterKeyResponseArrayOutput
}

type ClusterKeyResponseArray []ClusterKeyResponseInput

func (ClusterKeyResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ClusterKeyResponse)(nil)).Elem()
}

func (i ClusterKeyResponseArray) ToClusterKeyResponseArrayOutput() ClusterKeyResponseArrayOutput {
	return i.ToClusterKeyResponseArrayOutputWithContext(context.Background())
}

func (i ClusterKeyResponseArray) ToClusterKeyResponseArrayOutputWithContext(ctx context.Context) ClusterKeyResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterKeyResponseArrayOutput)
}

// Cosmos DB Cassandra table cluster key
type ClusterKeyResponseOutput struct{ *pulumi.OutputState }

func (ClusterKeyResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterKeyResponse)(nil)).Elem()
}

func (o ClusterKeyResponseOutput) ToClusterKeyResponseOutput() ClusterKeyResponseOutput {
	return o
}

func (o ClusterKeyResponseOutput) ToClusterKeyResponseOutputWithContext(ctx context.Context) ClusterKeyResponseOutput {
	return o
}

// Name of the Cosmos DB Cassandra table cluster key
func (o ClusterKeyResponseOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClusterKeyResponse) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Order of the Cosmos DB Cassandra table cluster key, only support "Asc" and "Desc"
func (o ClusterKeyResponseOutput) OrderBy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClusterKeyResponse) *string { return v.OrderBy }).(pulumi.StringPtrOutput)
}

type ClusterKeyResponseArrayOutput struct{ *pulumi.OutputState }

func (ClusterKeyResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ClusterKeyResponse)(nil)).Elem()
}

func (o ClusterKeyResponseArrayOutput) ToClusterKeyResponseArrayOutput() ClusterKeyResponseArrayOutput {
	return o
}

func (o ClusterKeyResponseArrayOutput) ToClusterKeyResponseArrayOutputWithContext(ctx context.Context) ClusterKeyResponseArrayOutput {
	return o
}

func (o ClusterKeyResponseArrayOutput) Index(i pulumi.IntInput) ClusterKeyResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ClusterKeyResponse {
		return vs[0].([]ClusterKeyResponse)[vs[1].(int)]
	}).(ClusterKeyResponseOutput)
}

// Cosmos DB Cassandra table column
type Column struct {
	// Name of the Cosmos DB Cassandra table column
	Name *string `pulumi:"name"`
	// Type of the Cosmos DB Cassandra table column
	Type *string `pulumi:"type"`
}

// ColumnInput is an input type that accepts ColumnArgs and ColumnOutput values.
// You can construct a concrete instance of `ColumnInput` via:
//
//          ColumnArgs{...}
type ColumnInput interface {
	pulumi.Input

	ToColumnOutput() ColumnOutput
	ToColumnOutputWithContext(context.Context) ColumnOutput
}

// Cosmos DB Cassandra table column
type ColumnArgs struct {
	// Name of the Cosmos DB Cassandra table column
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Type of the Cosmos DB Cassandra table column
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (ColumnArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Column)(nil)).Elem()
}

func (i ColumnArgs) ToColumnOutput() ColumnOutput {
	return i.ToColumnOutputWithContext(context.Background())
}

func (i ColumnArgs) ToColumnOutputWithContext(ctx context.Context) ColumnOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ColumnOutput)
}

// ColumnArrayInput is an input type that accepts ColumnArray and ColumnArrayOutput values.
// You can construct a concrete instance of `ColumnArrayInput` via:
//
//          ColumnArray{ ColumnArgs{...} }
type ColumnArrayInput interface {
	pulumi.Input

	ToColumnArrayOutput() ColumnArrayOutput
	ToColumnArrayOutputWithContext(context.Context) ColumnArrayOutput
}

type ColumnArray []ColumnInput

func (ColumnArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Column)(nil)).Elem()
}

func (i ColumnArray) ToColumnArrayOutput() ColumnArrayOutput {
	return i.ToColumnArrayOutputWithContext(context.Background())
}

func (i ColumnArray) ToColumnArrayOutputWithContext(ctx context.Context) ColumnArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ColumnArrayOutput)
}

// Cosmos DB Cassandra table column
type ColumnOutput struct{ *pulumi.OutputState }

func (ColumnOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Column)(nil)).Elem()
}

func (o ColumnOutput) ToColumnOutput() ColumnOutput {
	return o
}

func (o ColumnOutput) ToColumnOutputWithContext(ctx context.Context) ColumnOutput {
	return o
}

// Name of the Cosmos DB Cassandra table column
func (o ColumnOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Column) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Type of the Cosmos DB Cassandra table column
func (o ColumnOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Column) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type ColumnArrayOutput struct{ *pulumi.OutputState }

func (ColumnArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Column)(nil)).Elem()
}

func (o ColumnArrayOutput) ToColumnArrayOutput() ColumnArrayOutput {
	return o
}

func (o ColumnArrayOutput) ToColumnArrayOutputWithContext(ctx context.Context) ColumnArrayOutput {
	return o
}

func (o ColumnArrayOutput) Index(i pulumi.IntInput) ColumnOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) Column {
		return vs[0].([]Column)[vs[1].(int)]
	}).(ColumnOutput)
}

// Cosmos DB Cassandra table column
type ColumnResponse struct {
	// Name of the Cosmos DB Cassandra table column
	Name *string `pulumi:"name"`
	// Type of the Cosmos DB Cassandra table column
	Type *string `pulumi:"type"`
}

// ColumnResponseInput is an input type that accepts ColumnResponseArgs and ColumnResponseOutput values.
// You can construct a concrete instance of `ColumnResponseInput` via:
//
//          ColumnResponseArgs{...}
type ColumnResponseInput interface {
	pulumi.Input

	ToColumnResponseOutput() ColumnResponseOutput
	ToColumnResponseOutputWithContext(context.Context) ColumnResponseOutput
}

// Cosmos DB Cassandra table column
type ColumnResponseArgs struct {
	// Name of the Cosmos DB Cassandra table column
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Type of the Cosmos DB Cassandra table column
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (ColumnResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ColumnResponse)(nil)).Elem()
}

func (i ColumnResponseArgs) ToColumnResponseOutput() ColumnResponseOutput {
	return i.ToColumnResponseOutputWithContext(context.Background())
}

func (i ColumnResponseArgs) ToColumnResponseOutputWithContext(ctx context.Context) ColumnResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ColumnResponseOutput)
}

// ColumnResponseArrayInput is an input type that accepts ColumnResponseArray and ColumnResponseArrayOutput values.
// You can construct a concrete instance of `ColumnResponseArrayInput` via:
//
//          ColumnResponseArray{ ColumnResponseArgs{...} }
type ColumnResponseArrayInput interface {
	pulumi.Input

	ToColumnResponseArrayOutput() ColumnResponseArrayOutput
	ToColumnResponseArrayOutputWithContext(context.Context) ColumnResponseArrayOutput
}

type ColumnResponseArray []ColumnResponseInput

func (ColumnResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ColumnResponse)(nil)).Elem()
}

func (i ColumnResponseArray) ToColumnResponseArrayOutput() ColumnResponseArrayOutput {
	return i.ToColumnResponseArrayOutputWithContext(context.Background())
}

func (i ColumnResponseArray) ToColumnResponseArrayOutputWithContext(ctx context.Context) ColumnResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ColumnResponseArrayOutput)
}

// Cosmos DB Cassandra table column
type ColumnResponseOutput struct{ *pulumi.OutputState }

func (ColumnResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ColumnResponse)(nil)).Elem()
}

func (o ColumnResponseOutput) ToColumnResponseOutput() ColumnResponseOutput {
	return o
}

func (o ColumnResponseOutput) ToColumnResponseOutputWithContext(ctx context.Context) ColumnResponseOutput {
	return o
}

// Name of the Cosmos DB Cassandra table column
func (o ColumnResponseOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ColumnResponse) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Type of the Cosmos DB Cassandra table column
func (o ColumnResponseOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ColumnResponse) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type ColumnResponseArrayOutput struct{ *pulumi.OutputState }

func (ColumnResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ColumnResponse)(nil)).Elem()
}

func (o ColumnResponseArrayOutput) ToColumnResponseArrayOutput() ColumnResponseArrayOutput {
	return o
}

func (o ColumnResponseArrayOutput) ToColumnResponseArrayOutputWithContext(ctx context.Context) ColumnResponseArrayOutput {
	return o
}

func (o ColumnResponseArrayOutput) Index(i pulumi.IntInput) ColumnResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ColumnResponse {
		return vs[0].([]ColumnResponse)[vs[1].(int)]
	}).(ColumnResponseOutput)
}

// The conflict resolution policy for the container.
type ConflictResolutionPolicy struct {
	// The conflict resolution path in the case of LastWriterWins mode.
	ConflictResolutionPath *string `pulumi:"conflictResolutionPath"`
	// The procedure to resolve conflicts in the case of custom mode.
	ConflictResolutionProcedure *string `pulumi:"conflictResolutionProcedure"`
	// Indicates the conflict resolution mode.
	Mode *string `pulumi:"mode"`
}

// ConflictResolutionPolicyInput is an input type that accepts ConflictResolutionPolicyArgs and ConflictResolutionPolicyOutput values.
// You can construct a concrete instance of `ConflictResolutionPolicyInput` via:
//
//          ConflictResolutionPolicyArgs{...}
type ConflictResolutionPolicyInput interface {
	pulumi.Input

	ToConflictResolutionPolicyOutput() ConflictResolutionPolicyOutput
	ToConflictResolutionPolicyOutputWithContext(context.Context) ConflictResolutionPolicyOutput
}

// The conflict resolution policy for the container.
type ConflictResolutionPolicyArgs struct {
	// The conflict resolution path in the case of LastWriterWins mode.
	ConflictResolutionPath pulumi.StringPtrInput `pulumi:"conflictResolutionPath"`
	// The procedure to resolve conflicts in the case of custom mode.
	ConflictResolutionProcedure pulumi.StringPtrInput `pulumi:"conflictResolutionProcedure"`
	// Indicates the conflict resolution mode.
	Mode pulumi.StringPtrInput `pulumi:"mode"`
}

func (ConflictResolutionPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ConflictResolutionPolicy)(nil)).Elem()
}

func (i ConflictResolutionPolicyArgs) ToConflictResolutionPolicyOutput() ConflictResolutionPolicyOutput {
	return i.ToConflictResolutionPolicyOutputWithContext(context.Background())
}

func (i ConflictResolutionPolicyArgs) ToConflictResolutionPolicyOutputWithContext(ctx context.Context) ConflictResolutionPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConflictResolutionPolicyOutput)
}

func (i ConflictResolutionPolicyArgs) ToConflictResolutionPolicyPtrOutput() ConflictResolutionPolicyPtrOutput {
	return i.ToConflictResolutionPolicyPtrOutputWithContext(context.Background())
}

func (i ConflictResolutionPolicyArgs) ToConflictResolutionPolicyPtrOutputWithContext(ctx context.Context) ConflictResolutionPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConflictResolutionPolicyOutput).ToConflictResolutionPolicyPtrOutputWithContext(ctx)
}

// ConflictResolutionPolicyPtrInput is an input type that accepts ConflictResolutionPolicyArgs, ConflictResolutionPolicyPtr and ConflictResolutionPolicyPtrOutput values.
// You can construct a concrete instance of `ConflictResolutionPolicyPtrInput` via:
//
//          ConflictResolutionPolicyArgs{...}
//
//  or:
//
//          nil
type ConflictResolutionPolicyPtrInput interface {
	pulumi.Input

	ToConflictResolutionPolicyPtrOutput() ConflictResolutionPolicyPtrOutput
	ToConflictResolutionPolicyPtrOutputWithContext(context.Context) ConflictResolutionPolicyPtrOutput
}

type conflictResolutionPolicyPtrType ConflictResolutionPolicyArgs

func ConflictResolutionPolicyPtr(v *ConflictResolutionPolicyArgs) ConflictResolutionPolicyPtrInput {
	return (*conflictResolutionPolicyPtrType)(v)
}

func (*conflictResolutionPolicyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ConflictResolutionPolicy)(nil)).Elem()
}

func (i *conflictResolutionPolicyPtrType) ToConflictResolutionPolicyPtrOutput() ConflictResolutionPolicyPtrOutput {
	return i.ToConflictResolutionPolicyPtrOutputWithContext(context.Background())
}

func (i *conflictResolutionPolicyPtrType) ToConflictResolutionPolicyPtrOutputWithContext(ctx context.Context) ConflictResolutionPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConflictResolutionPolicyPtrOutput)
}

// The conflict resolution policy for the container.
type ConflictResolutionPolicyOutput struct{ *pulumi.OutputState }

func (ConflictResolutionPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConflictResolutionPolicy)(nil)).Elem()
}

func (o ConflictResolutionPolicyOutput) ToConflictResolutionPolicyOutput() ConflictResolutionPolicyOutput {
	return o
}

func (o ConflictResolutionPolicyOutput) ToConflictResolutionPolicyOutputWithContext(ctx context.Context) ConflictResolutionPolicyOutput {
	return o
}

func (o ConflictResolutionPolicyOutput) ToConflictResolutionPolicyPtrOutput() ConflictResolutionPolicyPtrOutput {
	return o.ToConflictResolutionPolicyPtrOutputWithContext(context.Background())
}

func (o ConflictResolutionPolicyOutput) ToConflictResolutionPolicyPtrOutputWithContext(ctx context.Context) ConflictResolutionPolicyPtrOutput {
	return o.ApplyT(func(v ConflictResolutionPolicy) *ConflictResolutionPolicy {
		return &v
	}).(ConflictResolutionPolicyPtrOutput)
}

// The conflict resolution path in the case of LastWriterWins mode.
func (o ConflictResolutionPolicyOutput) ConflictResolutionPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ConflictResolutionPolicy) *string { return v.ConflictResolutionPath }).(pulumi.StringPtrOutput)
}

// The procedure to resolve conflicts in the case of custom mode.
func (o ConflictResolutionPolicyOutput) ConflictResolutionProcedure() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ConflictResolutionPolicy) *string { return v.ConflictResolutionProcedure }).(pulumi.StringPtrOutput)
}

// Indicates the conflict resolution mode.
func (o ConflictResolutionPolicyOutput) Mode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ConflictResolutionPolicy) *string { return v.Mode }).(pulumi.StringPtrOutput)
}

type ConflictResolutionPolicyPtrOutput struct{ *pulumi.OutputState }

func (ConflictResolutionPolicyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ConflictResolutionPolicy)(nil)).Elem()
}

func (o ConflictResolutionPolicyPtrOutput) ToConflictResolutionPolicyPtrOutput() ConflictResolutionPolicyPtrOutput {
	return o
}

func (o ConflictResolutionPolicyPtrOutput) ToConflictResolutionPolicyPtrOutputWithContext(ctx context.Context) ConflictResolutionPolicyPtrOutput {
	return o
}

func (o ConflictResolutionPolicyPtrOutput) Elem() ConflictResolutionPolicyOutput {
	return o.ApplyT(func(v *ConflictResolutionPolicy) ConflictResolutionPolicy { return *v }).(ConflictResolutionPolicyOutput)
}

// The conflict resolution path in the case of LastWriterWins mode.
func (o ConflictResolutionPolicyPtrOutput) ConflictResolutionPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConflictResolutionPolicy) *string {
		if v == nil {
			return nil
		}
		return v.ConflictResolutionPath
	}).(pulumi.StringPtrOutput)
}

// The procedure to resolve conflicts in the case of custom mode.
func (o ConflictResolutionPolicyPtrOutput) ConflictResolutionProcedure() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConflictResolutionPolicy) *string {
		if v == nil {
			return nil
		}
		return v.ConflictResolutionProcedure
	}).(pulumi.StringPtrOutput)
}

// Indicates the conflict resolution mode.
func (o ConflictResolutionPolicyPtrOutput) Mode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConflictResolutionPolicy) *string {
		if v == nil {
			return nil
		}
		return v.Mode
	}).(pulumi.StringPtrOutput)
}

// The conflict resolution policy for the container.
type ConflictResolutionPolicyResponse struct {
	// The conflict resolution path in the case of LastWriterWins mode.
	ConflictResolutionPath *string `pulumi:"conflictResolutionPath"`
	// The procedure to resolve conflicts in the case of custom mode.
	ConflictResolutionProcedure *string `pulumi:"conflictResolutionProcedure"`
	// Indicates the conflict resolution mode.
	Mode *string `pulumi:"mode"`
}

// ConflictResolutionPolicyResponseInput is an input type that accepts ConflictResolutionPolicyResponseArgs and ConflictResolutionPolicyResponseOutput values.
// You can construct a concrete instance of `ConflictResolutionPolicyResponseInput` via:
//
//          ConflictResolutionPolicyResponseArgs{...}
type ConflictResolutionPolicyResponseInput interface {
	pulumi.Input

	ToConflictResolutionPolicyResponseOutput() ConflictResolutionPolicyResponseOutput
	ToConflictResolutionPolicyResponseOutputWithContext(context.Context) ConflictResolutionPolicyResponseOutput
}

// The conflict resolution policy for the container.
type ConflictResolutionPolicyResponseArgs struct {
	// The conflict resolution path in the case of LastWriterWins mode.
	ConflictResolutionPath pulumi.StringPtrInput `pulumi:"conflictResolutionPath"`
	// The procedure to resolve conflicts in the case of custom mode.
	ConflictResolutionProcedure pulumi.StringPtrInput `pulumi:"conflictResolutionProcedure"`
	// Indicates the conflict resolution mode.
	Mode pulumi.StringPtrInput `pulumi:"mode"`
}

func (ConflictResolutionPolicyResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ConflictResolutionPolicyResponse)(nil)).Elem()
}

func (i ConflictResolutionPolicyResponseArgs) ToConflictResolutionPolicyResponseOutput() ConflictResolutionPolicyResponseOutput {
	return i.ToConflictResolutionPolicyResponseOutputWithContext(context.Background())
}

func (i ConflictResolutionPolicyResponseArgs) ToConflictResolutionPolicyResponseOutputWithContext(ctx context.Context) ConflictResolutionPolicyResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConflictResolutionPolicyResponseOutput)
}

func (i ConflictResolutionPolicyResponseArgs) ToConflictResolutionPolicyResponsePtrOutput() ConflictResolutionPolicyResponsePtrOutput {
	return i.ToConflictResolutionPolicyResponsePtrOutputWithContext(context.Background())
}

func (i ConflictResolutionPolicyResponseArgs) ToConflictResolutionPolicyResponsePtrOutputWithContext(ctx context.Context) ConflictResolutionPolicyResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConflictResolutionPolicyResponseOutput).ToConflictResolutionPolicyResponsePtrOutputWithContext(ctx)
}

// ConflictResolutionPolicyResponsePtrInput is an input type that accepts ConflictResolutionPolicyResponseArgs, ConflictResolutionPolicyResponsePtr and ConflictResolutionPolicyResponsePtrOutput values.
// You can construct a concrete instance of `ConflictResolutionPolicyResponsePtrInput` via:
//
//          ConflictResolutionPolicyResponseArgs{...}
//
//  or:
//
//          nil
type ConflictResolutionPolicyResponsePtrInput interface {
	pulumi.Input

	ToConflictResolutionPolicyResponsePtrOutput() ConflictResolutionPolicyResponsePtrOutput
	ToConflictResolutionPolicyResponsePtrOutputWithContext(context.Context) ConflictResolutionPolicyResponsePtrOutput
}

type conflictResolutionPolicyResponsePtrType ConflictResolutionPolicyResponseArgs

func ConflictResolutionPolicyResponsePtr(v *ConflictResolutionPolicyResponseArgs) ConflictResolutionPolicyResponsePtrInput {
	return (*conflictResolutionPolicyResponsePtrType)(v)
}

func (*conflictResolutionPolicyResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ConflictResolutionPolicyResponse)(nil)).Elem()
}

func (i *conflictResolutionPolicyResponsePtrType) ToConflictResolutionPolicyResponsePtrOutput() ConflictResolutionPolicyResponsePtrOutput {
	return i.ToConflictResolutionPolicyResponsePtrOutputWithContext(context.Background())
}

func (i *conflictResolutionPolicyResponsePtrType) ToConflictResolutionPolicyResponsePtrOutputWithContext(ctx context.Context) ConflictResolutionPolicyResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConflictResolutionPolicyResponsePtrOutput)
}

// The conflict resolution policy for the container.
type ConflictResolutionPolicyResponseOutput struct{ *pulumi.OutputState }

func (ConflictResolutionPolicyResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConflictResolutionPolicyResponse)(nil)).Elem()
}

func (o ConflictResolutionPolicyResponseOutput) ToConflictResolutionPolicyResponseOutput() ConflictResolutionPolicyResponseOutput {
	return o
}

func (o ConflictResolutionPolicyResponseOutput) ToConflictResolutionPolicyResponseOutputWithContext(ctx context.Context) ConflictResolutionPolicyResponseOutput {
	return o
}

func (o ConflictResolutionPolicyResponseOutput) ToConflictResolutionPolicyResponsePtrOutput() ConflictResolutionPolicyResponsePtrOutput {
	return o.ToConflictResolutionPolicyResponsePtrOutputWithContext(context.Background())
}

func (o ConflictResolutionPolicyResponseOutput) ToConflictResolutionPolicyResponsePtrOutputWithContext(ctx context.Context) ConflictResolutionPolicyResponsePtrOutput {
	return o.ApplyT(func(v ConflictResolutionPolicyResponse) *ConflictResolutionPolicyResponse {
		return &v
	}).(ConflictResolutionPolicyResponsePtrOutput)
}

// The conflict resolution path in the case of LastWriterWins mode.
func (o ConflictResolutionPolicyResponseOutput) ConflictResolutionPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ConflictResolutionPolicyResponse) *string { return v.ConflictResolutionPath }).(pulumi.StringPtrOutput)
}

// The procedure to resolve conflicts in the case of custom mode.
func (o ConflictResolutionPolicyResponseOutput) ConflictResolutionProcedure() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ConflictResolutionPolicyResponse) *string { return v.ConflictResolutionProcedure }).(pulumi.StringPtrOutput)
}

// Indicates the conflict resolution mode.
func (o ConflictResolutionPolicyResponseOutput) Mode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ConflictResolutionPolicyResponse) *string { return v.Mode }).(pulumi.StringPtrOutput)
}

type ConflictResolutionPolicyResponsePtrOutput struct{ *pulumi.OutputState }

func (ConflictResolutionPolicyResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ConflictResolutionPolicyResponse)(nil)).Elem()
}

func (o ConflictResolutionPolicyResponsePtrOutput) ToConflictResolutionPolicyResponsePtrOutput() ConflictResolutionPolicyResponsePtrOutput {
	return o
}

func (o ConflictResolutionPolicyResponsePtrOutput) ToConflictResolutionPolicyResponsePtrOutputWithContext(ctx context.Context) ConflictResolutionPolicyResponsePtrOutput {
	return o
}

func (o ConflictResolutionPolicyResponsePtrOutput) Elem() ConflictResolutionPolicyResponseOutput {
	return o.ApplyT(func(v *ConflictResolutionPolicyResponse) ConflictResolutionPolicyResponse { return *v }).(ConflictResolutionPolicyResponseOutput)
}

// The conflict resolution path in the case of LastWriterWins mode.
func (o ConflictResolutionPolicyResponsePtrOutput) ConflictResolutionPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConflictResolutionPolicyResponse) *string {
		if v == nil {
			return nil
		}
		return v.ConflictResolutionPath
	}).(pulumi.StringPtrOutput)
}

// The procedure to resolve conflicts in the case of custom mode.
func (o ConflictResolutionPolicyResponsePtrOutput) ConflictResolutionProcedure() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConflictResolutionPolicyResponse) *string {
		if v == nil {
			return nil
		}
		return v.ConflictResolutionProcedure
	}).(pulumi.StringPtrOutput)
}

// Indicates the conflict resolution mode.
func (o ConflictResolutionPolicyResponsePtrOutput) Mode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConflictResolutionPolicyResponse) *string {
		if v == nil {
			return nil
		}
		return v.Mode
	}).(pulumi.StringPtrOutput)
}

// The consistency policy for the Cosmos DB database account.
type ConsistencyPolicy struct {
	// The default consistency level and configuration settings of the Cosmos DB account.
	DefaultConsistencyLevel string `pulumi:"defaultConsistencyLevel"`
	// When used with the Bounded Staleness consistency level, this value represents the time amount of staleness (in seconds) tolerated. Accepted range for this value is 5 - 86400. Required when defaultConsistencyPolicy is set to 'BoundedStaleness'.
	MaxIntervalInSeconds *int `pulumi:"maxIntervalInSeconds"`
	// When used with the Bounded Staleness consistency level, this value represents the number of stale requests tolerated. Accepted range for this value is 1 – 2,147,483,647. Required when defaultConsistencyPolicy is set to 'BoundedStaleness'.
	MaxStalenessPrefix *int `pulumi:"maxStalenessPrefix"`
}

// ConsistencyPolicyInput is an input type that accepts ConsistencyPolicyArgs and ConsistencyPolicyOutput values.
// You can construct a concrete instance of `ConsistencyPolicyInput` via:
//
//          ConsistencyPolicyArgs{...}
type ConsistencyPolicyInput interface {
	pulumi.Input

	ToConsistencyPolicyOutput() ConsistencyPolicyOutput
	ToConsistencyPolicyOutputWithContext(context.Context) ConsistencyPolicyOutput
}

// The consistency policy for the Cosmos DB database account.
type ConsistencyPolicyArgs struct {
	// The default consistency level and configuration settings of the Cosmos DB account.
	DefaultConsistencyLevel pulumi.StringInput `pulumi:"defaultConsistencyLevel"`
	// When used with the Bounded Staleness consistency level, this value represents the time amount of staleness (in seconds) tolerated. Accepted range for this value is 5 - 86400. Required when defaultConsistencyPolicy is set to 'BoundedStaleness'.
	MaxIntervalInSeconds pulumi.IntPtrInput `pulumi:"maxIntervalInSeconds"`
	// When used with the Bounded Staleness consistency level, this value represents the number of stale requests tolerated. Accepted range for this value is 1 – 2,147,483,647. Required when defaultConsistencyPolicy is set to 'BoundedStaleness'.
	MaxStalenessPrefix pulumi.IntPtrInput `pulumi:"maxStalenessPrefix"`
}

func (ConsistencyPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ConsistencyPolicy)(nil)).Elem()
}

func (i ConsistencyPolicyArgs) ToConsistencyPolicyOutput() ConsistencyPolicyOutput {
	return i.ToConsistencyPolicyOutputWithContext(context.Background())
}

func (i ConsistencyPolicyArgs) ToConsistencyPolicyOutputWithContext(ctx context.Context) ConsistencyPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConsistencyPolicyOutput)
}

func (i ConsistencyPolicyArgs) ToConsistencyPolicyPtrOutput() ConsistencyPolicyPtrOutput {
	return i.ToConsistencyPolicyPtrOutputWithContext(context.Background())
}

func (i ConsistencyPolicyArgs) ToConsistencyPolicyPtrOutputWithContext(ctx context.Context) ConsistencyPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConsistencyPolicyOutput).ToConsistencyPolicyPtrOutputWithContext(ctx)
}

// ConsistencyPolicyPtrInput is an input type that accepts ConsistencyPolicyArgs, ConsistencyPolicyPtr and ConsistencyPolicyPtrOutput values.
// You can construct a concrete instance of `ConsistencyPolicyPtrInput` via:
//
//          ConsistencyPolicyArgs{...}
//
//  or:
//
//          nil
type ConsistencyPolicyPtrInput interface {
	pulumi.Input

	ToConsistencyPolicyPtrOutput() ConsistencyPolicyPtrOutput
	ToConsistencyPolicyPtrOutputWithContext(context.Context) ConsistencyPolicyPtrOutput
}

type consistencyPolicyPtrType ConsistencyPolicyArgs

func ConsistencyPolicyPtr(v *ConsistencyPolicyArgs) ConsistencyPolicyPtrInput {
	return (*consistencyPolicyPtrType)(v)
}

func (*consistencyPolicyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ConsistencyPolicy)(nil)).Elem()
}

func (i *consistencyPolicyPtrType) ToConsistencyPolicyPtrOutput() ConsistencyPolicyPtrOutput {
	return i.ToConsistencyPolicyPtrOutputWithContext(context.Background())
}

func (i *consistencyPolicyPtrType) ToConsistencyPolicyPtrOutputWithContext(ctx context.Context) ConsistencyPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConsistencyPolicyPtrOutput)
}

// The consistency policy for the Cosmos DB database account.
type ConsistencyPolicyOutput struct{ *pulumi.OutputState }

func (ConsistencyPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConsistencyPolicy)(nil)).Elem()
}

func (o ConsistencyPolicyOutput) ToConsistencyPolicyOutput() ConsistencyPolicyOutput {
	return o
}

func (o ConsistencyPolicyOutput) ToConsistencyPolicyOutputWithContext(ctx context.Context) ConsistencyPolicyOutput {
	return o
}

func (o ConsistencyPolicyOutput) ToConsistencyPolicyPtrOutput() ConsistencyPolicyPtrOutput {
	return o.ToConsistencyPolicyPtrOutputWithContext(context.Background())
}

func (o ConsistencyPolicyOutput) ToConsistencyPolicyPtrOutputWithContext(ctx context.Context) ConsistencyPolicyPtrOutput {
	return o.ApplyT(func(v ConsistencyPolicy) *ConsistencyPolicy {
		return &v
	}).(ConsistencyPolicyPtrOutput)
}

// The default consistency level and configuration settings of the Cosmos DB account.
func (o ConsistencyPolicyOutput) DefaultConsistencyLevel() pulumi.StringOutput {
	return o.ApplyT(func(v ConsistencyPolicy) string { return v.DefaultConsistencyLevel }).(pulumi.StringOutput)
}

// When used with the Bounded Staleness consistency level, this value represents the time amount of staleness (in seconds) tolerated. Accepted range for this value is 5 - 86400. Required when defaultConsistencyPolicy is set to 'BoundedStaleness'.
func (o ConsistencyPolicyOutput) MaxIntervalInSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ConsistencyPolicy) *int { return v.MaxIntervalInSeconds }).(pulumi.IntPtrOutput)
}

// When used with the Bounded Staleness consistency level, this value represents the number of stale requests tolerated. Accepted range for this value is 1 – 2,147,483,647. Required when defaultConsistencyPolicy is set to 'BoundedStaleness'.
func (o ConsistencyPolicyOutput) MaxStalenessPrefix() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ConsistencyPolicy) *int { return v.MaxStalenessPrefix }).(pulumi.IntPtrOutput)
}

type ConsistencyPolicyPtrOutput struct{ *pulumi.OutputState }

func (ConsistencyPolicyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ConsistencyPolicy)(nil)).Elem()
}

func (o ConsistencyPolicyPtrOutput) ToConsistencyPolicyPtrOutput() ConsistencyPolicyPtrOutput {
	return o
}

func (o ConsistencyPolicyPtrOutput) ToConsistencyPolicyPtrOutputWithContext(ctx context.Context) ConsistencyPolicyPtrOutput {
	return o
}

func (o ConsistencyPolicyPtrOutput) Elem() ConsistencyPolicyOutput {
	return o.ApplyT(func(v *ConsistencyPolicy) ConsistencyPolicy { return *v }).(ConsistencyPolicyOutput)
}

// The default consistency level and configuration settings of the Cosmos DB account.
func (o ConsistencyPolicyPtrOutput) DefaultConsistencyLevel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConsistencyPolicy) *string {
		if v == nil {
			return nil
		}
		return &v.DefaultConsistencyLevel
	}).(pulumi.StringPtrOutput)
}

// When used with the Bounded Staleness consistency level, this value represents the time amount of staleness (in seconds) tolerated. Accepted range for this value is 5 - 86400. Required when defaultConsistencyPolicy is set to 'BoundedStaleness'.
func (o ConsistencyPolicyPtrOutput) MaxIntervalInSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ConsistencyPolicy) *int {
		if v == nil {
			return nil
		}
		return v.MaxIntervalInSeconds
	}).(pulumi.IntPtrOutput)
}

// When used with the Bounded Staleness consistency level, this value represents the number of stale requests tolerated. Accepted range for this value is 1 – 2,147,483,647. Required when defaultConsistencyPolicy is set to 'BoundedStaleness'.
func (o ConsistencyPolicyPtrOutput) MaxStalenessPrefix() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ConsistencyPolicy) *int {
		if v == nil {
			return nil
		}
		return v.MaxStalenessPrefix
	}).(pulumi.IntPtrOutput)
}

// The consistency policy for the Cosmos DB database account.
type ConsistencyPolicyResponse struct {
	// The default consistency level and configuration settings of the Cosmos DB account.
	DefaultConsistencyLevel string `pulumi:"defaultConsistencyLevel"`
	// When used with the Bounded Staleness consistency level, this value represents the time amount of staleness (in seconds) tolerated. Accepted range for this value is 5 - 86400. Required when defaultConsistencyPolicy is set to 'BoundedStaleness'.
	MaxIntervalInSeconds *int `pulumi:"maxIntervalInSeconds"`
	// When used with the Bounded Staleness consistency level, this value represents the number of stale requests tolerated. Accepted range for this value is 1 – 2,147,483,647. Required when defaultConsistencyPolicy is set to 'BoundedStaleness'.
	MaxStalenessPrefix *int `pulumi:"maxStalenessPrefix"`
}

// ConsistencyPolicyResponseInput is an input type that accepts ConsistencyPolicyResponseArgs and ConsistencyPolicyResponseOutput values.
// You can construct a concrete instance of `ConsistencyPolicyResponseInput` via:
//
//          ConsistencyPolicyResponseArgs{...}
type ConsistencyPolicyResponseInput interface {
	pulumi.Input

	ToConsistencyPolicyResponseOutput() ConsistencyPolicyResponseOutput
	ToConsistencyPolicyResponseOutputWithContext(context.Context) ConsistencyPolicyResponseOutput
}

// The consistency policy for the Cosmos DB database account.
type ConsistencyPolicyResponseArgs struct {
	// The default consistency level and configuration settings of the Cosmos DB account.
	DefaultConsistencyLevel pulumi.StringInput `pulumi:"defaultConsistencyLevel"`
	// When used with the Bounded Staleness consistency level, this value represents the time amount of staleness (in seconds) tolerated. Accepted range for this value is 5 - 86400. Required when defaultConsistencyPolicy is set to 'BoundedStaleness'.
	MaxIntervalInSeconds pulumi.IntPtrInput `pulumi:"maxIntervalInSeconds"`
	// When used with the Bounded Staleness consistency level, this value represents the number of stale requests tolerated. Accepted range for this value is 1 – 2,147,483,647. Required when defaultConsistencyPolicy is set to 'BoundedStaleness'.
	MaxStalenessPrefix pulumi.IntPtrInput `pulumi:"maxStalenessPrefix"`
}

func (ConsistencyPolicyResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ConsistencyPolicyResponse)(nil)).Elem()
}

func (i ConsistencyPolicyResponseArgs) ToConsistencyPolicyResponseOutput() ConsistencyPolicyResponseOutput {
	return i.ToConsistencyPolicyResponseOutputWithContext(context.Background())
}

func (i ConsistencyPolicyResponseArgs) ToConsistencyPolicyResponseOutputWithContext(ctx context.Context) ConsistencyPolicyResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConsistencyPolicyResponseOutput)
}

func (i ConsistencyPolicyResponseArgs) ToConsistencyPolicyResponsePtrOutput() ConsistencyPolicyResponsePtrOutput {
	return i.ToConsistencyPolicyResponsePtrOutputWithContext(context.Background())
}

func (i ConsistencyPolicyResponseArgs) ToConsistencyPolicyResponsePtrOutputWithContext(ctx context.Context) ConsistencyPolicyResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConsistencyPolicyResponseOutput).ToConsistencyPolicyResponsePtrOutputWithContext(ctx)
}

// ConsistencyPolicyResponsePtrInput is an input type that accepts ConsistencyPolicyResponseArgs, ConsistencyPolicyResponsePtr and ConsistencyPolicyResponsePtrOutput values.
// You can construct a concrete instance of `ConsistencyPolicyResponsePtrInput` via:
//
//          ConsistencyPolicyResponseArgs{...}
//
//  or:
//
//          nil
type ConsistencyPolicyResponsePtrInput interface {
	pulumi.Input

	ToConsistencyPolicyResponsePtrOutput() ConsistencyPolicyResponsePtrOutput
	ToConsistencyPolicyResponsePtrOutputWithContext(context.Context) ConsistencyPolicyResponsePtrOutput
}

type consistencyPolicyResponsePtrType ConsistencyPolicyResponseArgs

func ConsistencyPolicyResponsePtr(v *ConsistencyPolicyResponseArgs) ConsistencyPolicyResponsePtrInput {
	return (*consistencyPolicyResponsePtrType)(v)
}

func (*consistencyPolicyResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ConsistencyPolicyResponse)(nil)).Elem()
}

func (i *consistencyPolicyResponsePtrType) ToConsistencyPolicyResponsePtrOutput() ConsistencyPolicyResponsePtrOutput {
	return i.ToConsistencyPolicyResponsePtrOutputWithContext(context.Background())
}

func (i *consistencyPolicyResponsePtrType) ToConsistencyPolicyResponsePtrOutputWithContext(ctx context.Context) ConsistencyPolicyResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConsistencyPolicyResponsePtrOutput)
}

// The consistency policy for the Cosmos DB database account.
type ConsistencyPolicyResponseOutput struct{ *pulumi.OutputState }

func (ConsistencyPolicyResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConsistencyPolicyResponse)(nil)).Elem()
}

func (o ConsistencyPolicyResponseOutput) ToConsistencyPolicyResponseOutput() ConsistencyPolicyResponseOutput {
	return o
}

func (o ConsistencyPolicyResponseOutput) ToConsistencyPolicyResponseOutputWithContext(ctx context.Context) ConsistencyPolicyResponseOutput {
	return o
}

func (o ConsistencyPolicyResponseOutput) ToConsistencyPolicyResponsePtrOutput() ConsistencyPolicyResponsePtrOutput {
	return o.ToConsistencyPolicyResponsePtrOutputWithContext(context.Background())
}

func (o ConsistencyPolicyResponseOutput) ToConsistencyPolicyResponsePtrOutputWithContext(ctx context.Context) ConsistencyPolicyResponsePtrOutput {
	return o.ApplyT(func(v ConsistencyPolicyResponse) *ConsistencyPolicyResponse {
		return &v
	}).(ConsistencyPolicyResponsePtrOutput)
}

// The default consistency level and configuration settings of the Cosmos DB account.
func (o ConsistencyPolicyResponseOutput) DefaultConsistencyLevel() pulumi.StringOutput {
	return o.ApplyT(func(v ConsistencyPolicyResponse) string { return v.DefaultConsistencyLevel }).(pulumi.StringOutput)
}

// When used with the Bounded Staleness consistency level, this value represents the time amount of staleness (in seconds) tolerated. Accepted range for this value is 5 - 86400. Required when defaultConsistencyPolicy is set to 'BoundedStaleness'.
func (o ConsistencyPolicyResponseOutput) MaxIntervalInSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ConsistencyPolicyResponse) *int { return v.MaxIntervalInSeconds }).(pulumi.IntPtrOutput)
}

// When used with the Bounded Staleness consistency level, this value represents the number of stale requests tolerated. Accepted range for this value is 1 – 2,147,483,647. Required when defaultConsistencyPolicy is set to 'BoundedStaleness'.
func (o ConsistencyPolicyResponseOutput) MaxStalenessPrefix() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ConsistencyPolicyResponse) *int { return v.MaxStalenessPrefix }).(pulumi.IntPtrOutput)
}

type ConsistencyPolicyResponsePtrOutput struct{ *pulumi.OutputState }

func (ConsistencyPolicyResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ConsistencyPolicyResponse)(nil)).Elem()
}

func (o ConsistencyPolicyResponsePtrOutput) ToConsistencyPolicyResponsePtrOutput() ConsistencyPolicyResponsePtrOutput {
	return o
}

func (o ConsistencyPolicyResponsePtrOutput) ToConsistencyPolicyResponsePtrOutputWithContext(ctx context.Context) ConsistencyPolicyResponsePtrOutput {
	return o
}

func (o ConsistencyPolicyResponsePtrOutput) Elem() ConsistencyPolicyResponseOutput {
	return o.ApplyT(func(v *ConsistencyPolicyResponse) ConsistencyPolicyResponse { return *v }).(ConsistencyPolicyResponseOutput)
}

// The default consistency level and configuration settings of the Cosmos DB account.
func (o ConsistencyPolicyResponsePtrOutput) DefaultConsistencyLevel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConsistencyPolicyResponse) *string {
		if v == nil {
			return nil
		}
		return &v.DefaultConsistencyLevel
	}).(pulumi.StringPtrOutput)
}

// When used with the Bounded Staleness consistency level, this value represents the time amount of staleness (in seconds) tolerated. Accepted range for this value is 5 - 86400. Required when defaultConsistencyPolicy is set to 'BoundedStaleness'.
func (o ConsistencyPolicyResponsePtrOutput) MaxIntervalInSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ConsistencyPolicyResponse) *int {
		if v == nil {
			return nil
		}
		return v.MaxIntervalInSeconds
	}).(pulumi.IntPtrOutput)
}

// When used with the Bounded Staleness consistency level, this value represents the number of stale requests tolerated. Accepted range for this value is 1 – 2,147,483,647. Required when defaultConsistencyPolicy is set to 'BoundedStaleness'.
func (o ConsistencyPolicyResponsePtrOutput) MaxStalenessPrefix() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ConsistencyPolicyResponse) *int {
		if v == nil {
			return nil
		}
		return v.MaxStalenessPrefix
	}).(pulumi.IntPtrOutput)
}

// The configuration of the partition key to be used for partitioning data into multiple partitions
type ContainerPartitionKey struct {
	// Indicates the kind of algorithm used for partitioning
	Kind *string `pulumi:"kind"`
	// List of paths using which data within the container can be partitioned
	Paths []string `pulumi:"paths"`
}

// ContainerPartitionKeyInput is an input type that accepts ContainerPartitionKeyArgs and ContainerPartitionKeyOutput values.
// You can construct a concrete instance of `ContainerPartitionKeyInput` via:
//
//          ContainerPartitionKeyArgs{...}
type ContainerPartitionKeyInput interface {
	pulumi.Input

	ToContainerPartitionKeyOutput() ContainerPartitionKeyOutput
	ToContainerPartitionKeyOutputWithContext(context.Context) ContainerPartitionKeyOutput
}

// The configuration of the partition key to be used for partitioning data into multiple partitions
type ContainerPartitionKeyArgs struct {
	// Indicates the kind of algorithm used for partitioning
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// List of paths using which data within the container can be partitioned
	Paths pulumi.StringArrayInput `pulumi:"paths"`
}

func (ContainerPartitionKeyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ContainerPartitionKey)(nil)).Elem()
}

func (i ContainerPartitionKeyArgs) ToContainerPartitionKeyOutput() ContainerPartitionKeyOutput {
	return i.ToContainerPartitionKeyOutputWithContext(context.Background())
}

func (i ContainerPartitionKeyArgs) ToContainerPartitionKeyOutputWithContext(ctx context.Context) ContainerPartitionKeyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerPartitionKeyOutput)
}

func (i ContainerPartitionKeyArgs) ToContainerPartitionKeyPtrOutput() ContainerPartitionKeyPtrOutput {
	return i.ToContainerPartitionKeyPtrOutputWithContext(context.Background())
}

func (i ContainerPartitionKeyArgs) ToContainerPartitionKeyPtrOutputWithContext(ctx context.Context) ContainerPartitionKeyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerPartitionKeyOutput).ToContainerPartitionKeyPtrOutputWithContext(ctx)
}

// ContainerPartitionKeyPtrInput is an input type that accepts ContainerPartitionKeyArgs, ContainerPartitionKeyPtr and ContainerPartitionKeyPtrOutput values.
// You can construct a concrete instance of `ContainerPartitionKeyPtrInput` via:
//
//          ContainerPartitionKeyArgs{...}
//
//  or:
//
//          nil
type ContainerPartitionKeyPtrInput interface {
	pulumi.Input

	ToContainerPartitionKeyPtrOutput() ContainerPartitionKeyPtrOutput
	ToContainerPartitionKeyPtrOutputWithContext(context.Context) ContainerPartitionKeyPtrOutput
}

type containerPartitionKeyPtrType ContainerPartitionKeyArgs

func ContainerPartitionKeyPtr(v *ContainerPartitionKeyArgs) ContainerPartitionKeyPtrInput {
	return (*containerPartitionKeyPtrType)(v)
}

func (*containerPartitionKeyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ContainerPartitionKey)(nil)).Elem()
}

func (i *containerPartitionKeyPtrType) ToContainerPartitionKeyPtrOutput() ContainerPartitionKeyPtrOutput {
	return i.ToContainerPartitionKeyPtrOutputWithContext(context.Background())
}

func (i *containerPartitionKeyPtrType) ToContainerPartitionKeyPtrOutputWithContext(ctx context.Context) ContainerPartitionKeyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerPartitionKeyPtrOutput)
}

// The configuration of the partition key to be used for partitioning data into multiple partitions
type ContainerPartitionKeyOutput struct{ *pulumi.OutputState }

func (ContainerPartitionKeyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ContainerPartitionKey)(nil)).Elem()
}

func (o ContainerPartitionKeyOutput) ToContainerPartitionKeyOutput() ContainerPartitionKeyOutput {
	return o
}

func (o ContainerPartitionKeyOutput) ToContainerPartitionKeyOutputWithContext(ctx context.Context) ContainerPartitionKeyOutput {
	return o
}

func (o ContainerPartitionKeyOutput) ToContainerPartitionKeyPtrOutput() ContainerPartitionKeyPtrOutput {
	return o.ToContainerPartitionKeyPtrOutputWithContext(context.Background())
}

func (o ContainerPartitionKeyOutput) ToContainerPartitionKeyPtrOutputWithContext(ctx context.Context) ContainerPartitionKeyPtrOutput {
	return o.ApplyT(func(v ContainerPartitionKey) *ContainerPartitionKey {
		return &v
	}).(ContainerPartitionKeyPtrOutput)
}

// Indicates the kind of algorithm used for partitioning
func (o ContainerPartitionKeyOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContainerPartitionKey) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// List of paths using which data within the container can be partitioned
func (o ContainerPartitionKeyOutput) Paths() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ContainerPartitionKey) []string { return v.Paths }).(pulumi.StringArrayOutput)
}

type ContainerPartitionKeyPtrOutput struct{ *pulumi.OutputState }

func (ContainerPartitionKeyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ContainerPartitionKey)(nil)).Elem()
}

func (o ContainerPartitionKeyPtrOutput) ToContainerPartitionKeyPtrOutput() ContainerPartitionKeyPtrOutput {
	return o
}

func (o ContainerPartitionKeyPtrOutput) ToContainerPartitionKeyPtrOutputWithContext(ctx context.Context) ContainerPartitionKeyPtrOutput {
	return o
}

func (o ContainerPartitionKeyPtrOutput) Elem() ContainerPartitionKeyOutput {
	return o.ApplyT(func(v *ContainerPartitionKey) ContainerPartitionKey { return *v }).(ContainerPartitionKeyOutput)
}

// Indicates the kind of algorithm used for partitioning
func (o ContainerPartitionKeyPtrOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ContainerPartitionKey) *string {
		if v == nil {
			return nil
		}
		return v.Kind
	}).(pulumi.StringPtrOutput)
}

// List of paths using which data within the container can be partitioned
func (o ContainerPartitionKeyPtrOutput) Paths() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ContainerPartitionKey) []string {
		if v == nil {
			return nil
		}
		return v.Paths
	}).(pulumi.StringArrayOutput)
}

// The configuration of the partition key to be used for partitioning data into multiple partitions
type ContainerPartitionKeyResponse struct {
	// Indicates the kind of algorithm used for partitioning
	Kind *string `pulumi:"kind"`
	// List of paths using which data within the container can be partitioned
	Paths []string `pulumi:"paths"`
}

// ContainerPartitionKeyResponseInput is an input type that accepts ContainerPartitionKeyResponseArgs and ContainerPartitionKeyResponseOutput values.
// You can construct a concrete instance of `ContainerPartitionKeyResponseInput` via:
//
//          ContainerPartitionKeyResponseArgs{...}
type ContainerPartitionKeyResponseInput interface {
	pulumi.Input

	ToContainerPartitionKeyResponseOutput() ContainerPartitionKeyResponseOutput
	ToContainerPartitionKeyResponseOutputWithContext(context.Context) ContainerPartitionKeyResponseOutput
}

// The configuration of the partition key to be used for partitioning data into multiple partitions
type ContainerPartitionKeyResponseArgs struct {
	// Indicates the kind of algorithm used for partitioning
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// List of paths using which data within the container can be partitioned
	Paths pulumi.StringArrayInput `pulumi:"paths"`
}

func (ContainerPartitionKeyResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ContainerPartitionKeyResponse)(nil)).Elem()
}

func (i ContainerPartitionKeyResponseArgs) ToContainerPartitionKeyResponseOutput() ContainerPartitionKeyResponseOutput {
	return i.ToContainerPartitionKeyResponseOutputWithContext(context.Background())
}

func (i ContainerPartitionKeyResponseArgs) ToContainerPartitionKeyResponseOutputWithContext(ctx context.Context) ContainerPartitionKeyResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerPartitionKeyResponseOutput)
}

func (i ContainerPartitionKeyResponseArgs) ToContainerPartitionKeyResponsePtrOutput() ContainerPartitionKeyResponsePtrOutput {
	return i.ToContainerPartitionKeyResponsePtrOutputWithContext(context.Background())
}

func (i ContainerPartitionKeyResponseArgs) ToContainerPartitionKeyResponsePtrOutputWithContext(ctx context.Context) ContainerPartitionKeyResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerPartitionKeyResponseOutput).ToContainerPartitionKeyResponsePtrOutputWithContext(ctx)
}

// ContainerPartitionKeyResponsePtrInput is an input type that accepts ContainerPartitionKeyResponseArgs, ContainerPartitionKeyResponsePtr and ContainerPartitionKeyResponsePtrOutput values.
// You can construct a concrete instance of `ContainerPartitionKeyResponsePtrInput` via:
//
//          ContainerPartitionKeyResponseArgs{...}
//
//  or:
//
//          nil
type ContainerPartitionKeyResponsePtrInput interface {
	pulumi.Input

	ToContainerPartitionKeyResponsePtrOutput() ContainerPartitionKeyResponsePtrOutput
	ToContainerPartitionKeyResponsePtrOutputWithContext(context.Context) ContainerPartitionKeyResponsePtrOutput
}

type containerPartitionKeyResponsePtrType ContainerPartitionKeyResponseArgs

func ContainerPartitionKeyResponsePtr(v *ContainerPartitionKeyResponseArgs) ContainerPartitionKeyResponsePtrInput {
	return (*containerPartitionKeyResponsePtrType)(v)
}

func (*containerPartitionKeyResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ContainerPartitionKeyResponse)(nil)).Elem()
}

func (i *containerPartitionKeyResponsePtrType) ToContainerPartitionKeyResponsePtrOutput() ContainerPartitionKeyResponsePtrOutput {
	return i.ToContainerPartitionKeyResponsePtrOutputWithContext(context.Background())
}

func (i *containerPartitionKeyResponsePtrType) ToContainerPartitionKeyResponsePtrOutputWithContext(ctx context.Context) ContainerPartitionKeyResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerPartitionKeyResponsePtrOutput)
}

// The configuration of the partition key to be used for partitioning data into multiple partitions
type ContainerPartitionKeyResponseOutput struct{ *pulumi.OutputState }

func (ContainerPartitionKeyResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ContainerPartitionKeyResponse)(nil)).Elem()
}

func (o ContainerPartitionKeyResponseOutput) ToContainerPartitionKeyResponseOutput() ContainerPartitionKeyResponseOutput {
	return o
}

func (o ContainerPartitionKeyResponseOutput) ToContainerPartitionKeyResponseOutputWithContext(ctx context.Context) ContainerPartitionKeyResponseOutput {
	return o
}

func (o ContainerPartitionKeyResponseOutput) ToContainerPartitionKeyResponsePtrOutput() ContainerPartitionKeyResponsePtrOutput {
	return o.ToContainerPartitionKeyResponsePtrOutputWithContext(context.Background())
}

func (o ContainerPartitionKeyResponseOutput) ToContainerPartitionKeyResponsePtrOutputWithContext(ctx context.Context) ContainerPartitionKeyResponsePtrOutput {
	return o.ApplyT(func(v ContainerPartitionKeyResponse) *ContainerPartitionKeyResponse {
		return &v
	}).(ContainerPartitionKeyResponsePtrOutput)
}

// Indicates the kind of algorithm used for partitioning
func (o ContainerPartitionKeyResponseOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContainerPartitionKeyResponse) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// List of paths using which data within the container can be partitioned
func (o ContainerPartitionKeyResponseOutput) Paths() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ContainerPartitionKeyResponse) []string { return v.Paths }).(pulumi.StringArrayOutput)
}

type ContainerPartitionKeyResponsePtrOutput struct{ *pulumi.OutputState }

func (ContainerPartitionKeyResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ContainerPartitionKeyResponse)(nil)).Elem()
}

func (o ContainerPartitionKeyResponsePtrOutput) ToContainerPartitionKeyResponsePtrOutput() ContainerPartitionKeyResponsePtrOutput {
	return o
}

func (o ContainerPartitionKeyResponsePtrOutput) ToContainerPartitionKeyResponsePtrOutputWithContext(ctx context.Context) ContainerPartitionKeyResponsePtrOutput {
	return o
}

func (o ContainerPartitionKeyResponsePtrOutput) Elem() ContainerPartitionKeyResponseOutput {
	return o.ApplyT(func(v *ContainerPartitionKeyResponse) ContainerPartitionKeyResponse { return *v }).(ContainerPartitionKeyResponseOutput)
}

// Indicates the kind of algorithm used for partitioning
func (o ContainerPartitionKeyResponsePtrOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ContainerPartitionKeyResponse) *string {
		if v == nil {
			return nil
		}
		return v.Kind
	}).(pulumi.StringPtrOutput)
}

// List of paths using which data within the container can be partitioned
func (o ContainerPartitionKeyResponsePtrOutput) Paths() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ContainerPartitionKeyResponse) []string {
		if v == nil {
			return nil
		}
		return v.Paths
	}).(pulumi.StringArrayOutput)
}

// Connection string for the Cosmos DB account
type DatabaseAccountConnectionStringResponse struct {
	// Value of the connection string
	ConnectionString string `pulumi:"connectionString"`
	// Description of the connection string
	Description string `pulumi:"description"`
}

// DatabaseAccountConnectionStringResponseInput is an input type that accepts DatabaseAccountConnectionStringResponseArgs and DatabaseAccountConnectionStringResponseOutput values.
// You can construct a concrete instance of `DatabaseAccountConnectionStringResponseInput` via:
//
//          DatabaseAccountConnectionStringResponseArgs{...}
type DatabaseAccountConnectionStringResponseInput interface {
	pulumi.Input

	ToDatabaseAccountConnectionStringResponseOutput() DatabaseAccountConnectionStringResponseOutput
	ToDatabaseAccountConnectionStringResponseOutputWithContext(context.Context) DatabaseAccountConnectionStringResponseOutput
}

// Connection string for the Cosmos DB account
type DatabaseAccountConnectionStringResponseArgs struct {
	// Value of the connection string
	ConnectionString pulumi.StringInput `pulumi:"connectionString"`
	// Description of the connection string
	Description pulumi.StringInput `pulumi:"description"`
}

func (DatabaseAccountConnectionStringResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DatabaseAccountConnectionStringResponse)(nil)).Elem()
}

func (i DatabaseAccountConnectionStringResponseArgs) ToDatabaseAccountConnectionStringResponseOutput() DatabaseAccountConnectionStringResponseOutput {
	return i.ToDatabaseAccountConnectionStringResponseOutputWithContext(context.Background())
}

func (i DatabaseAccountConnectionStringResponseArgs) ToDatabaseAccountConnectionStringResponseOutputWithContext(ctx context.Context) DatabaseAccountConnectionStringResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatabaseAccountConnectionStringResponseOutput)
}

// DatabaseAccountConnectionStringResponseArrayInput is an input type that accepts DatabaseAccountConnectionStringResponseArray and DatabaseAccountConnectionStringResponseArrayOutput values.
// You can construct a concrete instance of `DatabaseAccountConnectionStringResponseArrayInput` via:
//
//          DatabaseAccountConnectionStringResponseArray{ DatabaseAccountConnectionStringResponseArgs{...} }
type DatabaseAccountConnectionStringResponseArrayInput interface {
	pulumi.Input

	ToDatabaseAccountConnectionStringResponseArrayOutput() DatabaseAccountConnectionStringResponseArrayOutput
	ToDatabaseAccountConnectionStringResponseArrayOutputWithContext(context.Context) DatabaseAccountConnectionStringResponseArrayOutput
}

type DatabaseAccountConnectionStringResponseArray []DatabaseAccountConnectionStringResponseInput

func (DatabaseAccountConnectionStringResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DatabaseAccountConnectionStringResponse)(nil)).Elem()
}

func (i DatabaseAccountConnectionStringResponseArray) ToDatabaseAccountConnectionStringResponseArrayOutput() DatabaseAccountConnectionStringResponseArrayOutput {
	return i.ToDatabaseAccountConnectionStringResponseArrayOutputWithContext(context.Background())
}

func (i DatabaseAccountConnectionStringResponseArray) ToDatabaseAccountConnectionStringResponseArrayOutputWithContext(ctx context.Context) DatabaseAccountConnectionStringResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatabaseAccountConnectionStringResponseArrayOutput)
}

// Connection string for the Cosmos DB account
type DatabaseAccountConnectionStringResponseOutput struct{ *pulumi.OutputState }

func (DatabaseAccountConnectionStringResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DatabaseAccountConnectionStringResponse)(nil)).Elem()
}

func (o DatabaseAccountConnectionStringResponseOutput) ToDatabaseAccountConnectionStringResponseOutput() DatabaseAccountConnectionStringResponseOutput {
	return o
}

func (o DatabaseAccountConnectionStringResponseOutput) ToDatabaseAccountConnectionStringResponseOutputWithContext(ctx context.Context) DatabaseAccountConnectionStringResponseOutput {
	return o
}

// Value of the connection string
func (o DatabaseAccountConnectionStringResponseOutput) ConnectionString() pulumi.StringOutput {
	return o.ApplyT(func(v DatabaseAccountConnectionStringResponse) string { return v.ConnectionString }).(pulumi.StringOutput)
}

// Description of the connection string
func (o DatabaseAccountConnectionStringResponseOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v DatabaseAccountConnectionStringResponse) string { return v.Description }).(pulumi.StringOutput)
}

type DatabaseAccountConnectionStringResponseArrayOutput struct{ *pulumi.OutputState }

func (DatabaseAccountConnectionStringResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DatabaseAccountConnectionStringResponse)(nil)).Elem()
}

func (o DatabaseAccountConnectionStringResponseArrayOutput) ToDatabaseAccountConnectionStringResponseArrayOutput() DatabaseAccountConnectionStringResponseArrayOutput {
	return o
}

func (o DatabaseAccountConnectionStringResponseArrayOutput) ToDatabaseAccountConnectionStringResponseArrayOutputWithContext(ctx context.Context) DatabaseAccountConnectionStringResponseArrayOutput {
	return o
}

func (o DatabaseAccountConnectionStringResponseArrayOutput) Index(i pulumi.IntInput) DatabaseAccountConnectionStringResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DatabaseAccountConnectionStringResponse {
		return vs[0].([]DatabaseAccountConnectionStringResponse)[vs[1].(int)]
	}).(DatabaseAccountConnectionStringResponseOutput)
}

type ExcludedPath struct {
	// The path for which the indexing behavior applies to. Index paths typically start with root and end with wildcard (/path/*)
	Path *string `pulumi:"path"`
}

// ExcludedPathInput is an input type that accepts ExcludedPathArgs and ExcludedPathOutput values.
// You can construct a concrete instance of `ExcludedPathInput` via:
//
//          ExcludedPathArgs{...}
type ExcludedPathInput interface {
	pulumi.Input

	ToExcludedPathOutput() ExcludedPathOutput
	ToExcludedPathOutputWithContext(context.Context) ExcludedPathOutput
}

type ExcludedPathArgs struct {
	// The path for which the indexing behavior applies to. Index paths typically start with root and end with wildcard (/path/*)
	Path pulumi.StringPtrInput `pulumi:"path"`
}

func (ExcludedPathArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ExcludedPath)(nil)).Elem()
}

func (i ExcludedPathArgs) ToExcludedPathOutput() ExcludedPathOutput {
	return i.ToExcludedPathOutputWithContext(context.Background())
}

func (i ExcludedPathArgs) ToExcludedPathOutputWithContext(ctx context.Context) ExcludedPathOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExcludedPathOutput)
}

// ExcludedPathArrayInput is an input type that accepts ExcludedPathArray and ExcludedPathArrayOutput values.
// You can construct a concrete instance of `ExcludedPathArrayInput` via:
//
//          ExcludedPathArray{ ExcludedPathArgs{...} }
type ExcludedPathArrayInput interface {
	pulumi.Input

	ToExcludedPathArrayOutput() ExcludedPathArrayOutput
	ToExcludedPathArrayOutputWithContext(context.Context) ExcludedPathArrayOutput
}

type ExcludedPathArray []ExcludedPathInput

func (ExcludedPathArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ExcludedPath)(nil)).Elem()
}

func (i ExcludedPathArray) ToExcludedPathArrayOutput() ExcludedPathArrayOutput {
	return i.ToExcludedPathArrayOutputWithContext(context.Background())
}

func (i ExcludedPathArray) ToExcludedPathArrayOutputWithContext(ctx context.Context) ExcludedPathArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExcludedPathArrayOutput)
}

type ExcludedPathOutput struct{ *pulumi.OutputState }

func (ExcludedPathOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ExcludedPath)(nil)).Elem()
}

func (o ExcludedPathOutput) ToExcludedPathOutput() ExcludedPathOutput {
	return o
}

func (o ExcludedPathOutput) ToExcludedPathOutputWithContext(ctx context.Context) ExcludedPathOutput {
	return o
}

// The path for which the indexing behavior applies to. Index paths typically start with root and end with wildcard (/path/*)
func (o ExcludedPathOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ExcludedPath) *string { return v.Path }).(pulumi.StringPtrOutput)
}

type ExcludedPathArrayOutput struct{ *pulumi.OutputState }

func (ExcludedPathArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ExcludedPath)(nil)).Elem()
}

func (o ExcludedPathArrayOutput) ToExcludedPathArrayOutput() ExcludedPathArrayOutput {
	return o
}

func (o ExcludedPathArrayOutput) ToExcludedPathArrayOutputWithContext(ctx context.Context) ExcludedPathArrayOutput {
	return o
}

func (o ExcludedPathArrayOutput) Index(i pulumi.IntInput) ExcludedPathOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ExcludedPath {
		return vs[0].([]ExcludedPath)[vs[1].(int)]
	}).(ExcludedPathOutput)
}

type ExcludedPathResponse struct {
	// The path for which the indexing behavior applies to. Index paths typically start with root and end with wildcard (/path/*)
	Path *string `pulumi:"path"`
}

// ExcludedPathResponseInput is an input type that accepts ExcludedPathResponseArgs and ExcludedPathResponseOutput values.
// You can construct a concrete instance of `ExcludedPathResponseInput` via:
//
//          ExcludedPathResponseArgs{...}
type ExcludedPathResponseInput interface {
	pulumi.Input

	ToExcludedPathResponseOutput() ExcludedPathResponseOutput
	ToExcludedPathResponseOutputWithContext(context.Context) ExcludedPathResponseOutput
}

type ExcludedPathResponseArgs struct {
	// The path for which the indexing behavior applies to. Index paths typically start with root and end with wildcard (/path/*)
	Path pulumi.StringPtrInput `pulumi:"path"`
}

func (ExcludedPathResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ExcludedPathResponse)(nil)).Elem()
}

func (i ExcludedPathResponseArgs) ToExcludedPathResponseOutput() ExcludedPathResponseOutput {
	return i.ToExcludedPathResponseOutputWithContext(context.Background())
}

func (i ExcludedPathResponseArgs) ToExcludedPathResponseOutputWithContext(ctx context.Context) ExcludedPathResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExcludedPathResponseOutput)
}

// ExcludedPathResponseArrayInput is an input type that accepts ExcludedPathResponseArray and ExcludedPathResponseArrayOutput values.
// You can construct a concrete instance of `ExcludedPathResponseArrayInput` via:
//
//          ExcludedPathResponseArray{ ExcludedPathResponseArgs{...} }
type ExcludedPathResponseArrayInput interface {
	pulumi.Input

	ToExcludedPathResponseArrayOutput() ExcludedPathResponseArrayOutput
	ToExcludedPathResponseArrayOutputWithContext(context.Context) ExcludedPathResponseArrayOutput
}

type ExcludedPathResponseArray []ExcludedPathResponseInput

func (ExcludedPathResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ExcludedPathResponse)(nil)).Elem()
}

func (i ExcludedPathResponseArray) ToExcludedPathResponseArrayOutput() ExcludedPathResponseArrayOutput {
	return i.ToExcludedPathResponseArrayOutputWithContext(context.Background())
}

func (i ExcludedPathResponseArray) ToExcludedPathResponseArrayOutputWithContext(ctx context.Context) ExcludedPathResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExcludedPathResponseArrayOutput)
}

type ExcludedPathResponseOutput struct{ *pulumi.OutputState }

func (ExcludedPathResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ExcludedPathResponse)(nil)).Elem()
}

func (o ExcludedPathResponseOutput) ToExcludedPathResponseOutput() ExcludedPathResponseOutput {
	return o
}

func (o ExcludedPathResponseOutput) ToExcludedPathResponseOutputWithContext(ctx context.Context) ExcludedPathResponseOutput {
	return o
}

// The path for which the indexing behavior applies to. Index paths typically start with root and end with wildcard (/path/*)
func (o ExcludedPathResponseOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ExcludedPathResponse) *string { return v.Path }).(pulumi.StringPtrOutput)
}

type ExcludedPathResponseArrayOutput struct{ *pulumi.OutputState }

func (ExcludedPathResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ExcludedPathResponse)(nil)).Elem()
}

func (o ExcludedPathResponseArrayOutput) ToExcludedPathResponseArrayOutput() ExcludedPathResponseArrayOutput {
	return o
}

func (o ExcludedPathResponseArrayOutput) ToExcludedPathResponseArrayOutputWithContext(ctx context.Context) ExcludedPathResponseArrayOutput {
	return o
}

func (o ExcludedPathResponseArrayOutput) Index(i pulumi.IntInput) ExcludedPathResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ExcludedPathResponse {
		return vs[0].([]ExcludedPathResponse)[vs[1].(int)]
	}).(ExcludedPathResponseOutput)
}

// The failover policy for a given region of a database account.
type FailoverPolicyResponse struct {
	// The failover priority of the region. A failover priority of 0 indicates a write region. The maximum value for a failover priority = (total number of regions - 1). Failover priority values must be unique for each of the regions in which the database account exists.
	FailoverPriority *int `pulumi:"failoverPriority"`
	// The unique identifier of the region in which the database account replicates to. Example: &lt;accountName&gt;-&lt;locationName&gt;.
	Id string `pulumi:"id"`
	// The name of the region in which the database account exists.
	LocationName *string `pulumi:"locationName"`
}

// FailoverPolicyResponseInput is an input type that accepts FailoverPolicyResponseArgs and FailoverPolicyResponseOutput values.
// You can construct a concrete instance of `FailoverPolicyResponseInput` via:
//
//          FailoverPolicyResponseArgs{...}
type FailoverPolicyResponseInput interface {
	pulumi.Input

	ToFailoverPolicyResponseOutput() FailoverPolicyResponseOutput
	ToFailoverPolicyResponseOutputWithContext(context.Context) FailoverPolicyResponseOutput
}

// The failover policy for a given region of a database account.
type FailoverPolicyResponseArgs struct {
	// The failover priority of the region. A failover priority of 0 indicates a write region. The maximum value for a failover priority = (total number of regions - 1). Failover priority values must be unique for each of the regions in which the database account exists.
	FailoverPriority pulumi.IntPtrInput `pulumi:"failoverPriority"`
	// The unique identifier of the region in which the database account replicates to. Example: &lt;accountName&gt;-&lt;locationName&gt;.
	Id pulumi.StringInput `pulumi:"id"`
	// The name of the region in which the database account exists.
	LocationName pulumi.StringPtrInput `pulumi:"locationName"`
}

func (FailoverPolicyResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FailoverPolicyResponse)(nil)).Elem()
}

func (i FailoverPolicyResponseArgs) ToFailoverPolicyResponseOutput() FailoverPolicyResponseOutput {
	return i.ToFailoverPolicyResponseOutputWithContext(context.Background())
}

func (i FailoverPolicyResponseArgs) ToFailoverPolicyResponseOutputWithContext(ctx context.Context) FailoverPolicyResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FailoverPolicyResponseOutput)
}

// FailoverPolicyResponseArrayInput is an input type that accepts FailoverPolicyResponseArray and FailoverPolicyResponseArrayOutput values.
// You can construct a concrete instance of `FailoverPolicyResponseArrayInput` via:
//
//          FailoverPolicyResponseArray{ FailoverPolicyResponseArgs{...} }
type FailoverPolicyResponseArrayInput interface {
	pulumi.Input

	ToFailoverPolicyResponseArrayOutput() FailoverPolicyResponseArrayOutput
	ToFailoverPolicyResponseArrayOutputWithContext(context.Context) FailoverPolicyResponseArrayOutput
}

type FailoverPolicyResponseArray []FailoverPolicyResponseInput

func (FailoverPolicyResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FailoverPolicyResponse)(nil)).Elem()
}

func (i FailoverPolicyResponseArray) ToFailoverPolicyResponseArrayOutput() FailoverPolicyResponseArrayOutput {
	return i.ToFailoverPolicyResponseArrayOutputWithContext(context.Background())
}

func (i FailoverPolicyResponseArray) ToFailoverPolicyResponseArrayOutputWithContext(ctx context.Context) FailoverPolicyResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FailoverPolicyResponseArrayOutput)
}

// The failover policy for a given region of a database account.
type FailoverPolicyResponseOutput struct{ *pulumi.OutputState }

func (FailoverPolicyResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FailoverPolicyResponse)(nil)).Elem()
}

func (o FailoverPolicyResponseOutput) ToFailoverPolicyResponseOutput() FailoverPolicyResponseOutput {
	return o
}

func (o FailoverPolicyResponseOutput) ToFailoverPolicyResponseOutputWithContext(ctx context.Context) FailoverPolicyResponseOutput {
	return o
}

// The failover priority of the region. A failover priority of 0 indicates a write region. The maximum value for a failover priority = (total number of regions - 1). Failover priority values must be unique for each of the regions in which the database account exists.
func (o FailoverPolicyResponseOutput) FailoverPriority() pulumi.IntPtrOutput {
	return o.ApplyT(func(v FailoverPolicyResponse) *int { return v.FailoverPriority }).(pulumi.IntPtrOutput)
}

// The unique identifier of the region in which the database account replicates to. Example: &lt;accountName&gt;-&lt;locationName&gt;.
func (o FailoverPolicyResponseOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v FailoverPolicyResponse) string { return v.Id }).(pulumi.StringOutput)
}

// The name of the region in which the database account exists.
func (o FailoverPolicyResponseOutput) LocationName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FailoverPolicyResponse) *string { return v.LocationName }).(pulumi.StringPtrOutput)
}

type FailoverPolicyResponseArrayOutput struct{ *pulumi.OutputState }

func (FailoverPolicyResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FailoverPolicyResponse)(nil)).Elem()
}

func (o FailoverPolicyResponseArrayOutput) ToFailoverPolicyResponseArrayOutput() FailoverPolicyResponseArrayOutput {
	return o
}

func (o FailoverPolicyResponseArrayOutput) ToFailoverPolicyResponseArrayOutputWithContext(ctx context.Context) FailoverPolicyResponseArrayOutput {
	return o
}

func (o FailoverPolicyResponseArrayOutput) Index(i pulumi.IntInput) FailoverPolicyResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) FailoverPolicyResponse {
		return vs[0].([]FailoverPolicyResponse)[vs[1].(int)]
	}).(FailoverPolicyResponseOutput)
}

// Cosmos DB Gremlin database id object
type GremlinDatabaseResource struct {
	// Name of the Cosmos DB Gremlin database
	Id string `pulumi:"id"`
}

// GremlinDatabaseResourceInput is an input type that accepts GremlinDatabaseResourceArgs and GremlinDatabaseResourceOutput values.
// You can construct a concrete instance of `GremlinDatabaseResourceInput` via:
//
//          GremlinDatabaseResourceArgs{...}
type GremlinDatabaseResourceInput interface {
	pulumi.Input

	ToGremlinDatabaseResourceOutput() GremlinDatabaseResourceOutput
	ToGremlinDatabaseResourceOutputWithContext(context.Context) GremlinDatabaseResourceOutput
}

// Cosmos DB Gremlin database id object
type GremlinDatabaseResourceArgs struct {
	// Name of the Cosmos DB Gremlin database
	Id pulumi.StringInput `pulumi:"id"`
}

func (GremlinDatabaseResourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GremlinDatabaseResource)(nil)).Elem()
}

func (i GremlinDatabaseResourceArgs) ToGremlinDatabaseResourceOutput() GremlinDatabaseResourceOutput {
	return i.ToGremlinDatabaseResourceOutputWithContext(context.Background())
}

func (i GremlinDatabaseResourceArgs) ToGremlinDatabaseResourceOutputWithContext(ctx context.Context) GremlinDatabaseResourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GremlinDatabaseResourceOutput)
}

func (i GremlinDatabaseResourceArgs) ToGremlinDatabaseResourcePtrOutput() GremlinDatabaseResourcePtrOutput {
	return i.ToGremlinDatabaseResourcePtrOutputWithContext(context.Background())
}

func (i GremlinDatabaseResourceArgs) ToGremlinDatabaseResourcePtrOutputWithContext(ctx context.Context) GremlinDatabaseResourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GremlinDatabaseResourceOutput).ToGremlinDatabaseResourcePtrOutputWithContext(ctx)
}

// GremlinDatabaseResourcePtrInput is an input type that accepts GremlinDatabaseResourceArgs, GremlinDatabaseResourcePtr and GremlinDatabaseResourcePtrOutput values.
// You can construct a concrete instance of `GremlinDatabaseResourcePtrInput` via:
//
//          GremlinDatabaseResourceArgs{...}
//
//  or:
//
//          nil
type GremlinDatabaseResourcePtrInput interface {
	pulumi.Input

	ToGremlinDatabaseResourcePtrOutput() GremlinDatabaseResourcePtrOutput
	ToGremlinDatabaseResourcePtrOutputWithContext(context.Context) GremlinDatabaseResourcePtrOutput
}

type gremlinDatabaseResourcePtrType GremlinDatabaseResourceArgs

func GremlinDatabaseResourcePtr(v *GremlinDatabaseResourceArgs) GremlinDatabaseResourcePtrInput {
	return (*gremlinDatabaseResourcePtrType)(v)
}

func (*gremlinDatabaseResourcePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GremlinDatabaseResource)(nil)).Elem()
}

func (i *gremlinDatabaseResourcePtrType) ToGremlinDatabaseResourcePtrOutput() GremlinDatabaseResourcePtrOutput {
	return i.ToGremlinDatabaseResourcePtrOutputWithContext(context.Background())
}

func (i *gremlinDatabaseResourcePtrType) ToGremlinDatabaseResourcePtrOutputWithContext(ctx context.Context) GremlinDatabaseResourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GremlinDatabaseResourcePtrOutput)
}

// Cosmos DB Gremlin database id object
type GremlinDatabaseResourceOutput struct{ *pulumi.OutputState }

func (GremlinDatabaseResourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GremlinDatabaseResource)(nil)).Elem()
}

func (o GremlinDatabaseResourceOutput) ToGremlinDatabaseResourceOutput() GremlinDatabaseResourceOutput {
	return o
}

func (o GremlinDatabaseResourceOutput) ToGremlinDatabaseResourceOutputWithContext(ctx context.Context) GremlinDatabaseResourceOutput {
	return o
}

func (o GremlinDatabaseResourceOutput) ToGremlinDatabaseResourcePtrOutput() GremlinDatabaseResourcePtrOutput {
	return o.ToGremlinDatabaseResourcePtrOutputWithContext(context.Background())
}

func (o GremlinDatabaseResourceOutput) ToGremlinDatabaseResourcePtrOutputWithContext(ctx context.Context) GremlinDatabaseResourcePtrOutput {
	return o.ApplyT(func(v GremlinDatabaseResource) *GremlinDatabaseResource {
		return &v
	}).(GremlinDatabaseResourcePtrOutput)
}

// Name of the Cosmos DB Gremlin database
func (o GremlinDatabaseResourceOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GremlinDatabaseResource) string { return v.Id }).(pulumi.StringOutput)
}

type GremlinDatabaseResourcePtrOutput struct{ *pulumi.OutputState }

func (GremlinDatabaseResourcePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GremlinDatabaseResource)(nil)).Elem()
}

func (o GremlinDatabaseResourcePtrOutput) ToGremlinDatabaseResourcePtrOutput() GremlinDatabaseResourcePtrOutput {
	return o
}

func (o GremlinDatabaseResourcePtrOutput) ToGremlinDatabaseResourcePtrOutputWithContext(ctx context.Context) GremlinDatabaseResourcePtrOutput {
	return o
}

func (o GremlinDatabaseResourcePtrOutput) Elem() GremlinDatabaseResourceOutput {
	return o.ApplyT(func(v *GremlinDatabaseResource) GremlinDatabaseResource { return *v }).(GremlinDatabaseResourceOutput)
}

// Name of the Cosmos DB Gremlin database
func (o GremlinDatabaseResourcePtrOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GremlinDatabaseResource) *string {
		if v == nil {
			return nil
		}
		return &v.Id
	}).(pulumi.StringPtrOutput)
}

// Cosmos DB Gremlin graph resource object
type GremlinGraphResource struct {
	// The conflict resolution policy for the graph.
	ConflictResolutionPolicy *ConflictResolutionPolicy `pulumi:"conflictResolutionPolicy"`
	// Default time to live
	DefaultTtl *int `pulumi:"defaultTtl"`
	// Name of the Cosmos DB Gremlin graph
	Id string `pulumi:"id"`
	// The configuration of the indexing policy. By default, the indexing is automatic for all document paths within the graph
	IndexingPolicy *IndexingPolicy `pulumi:"indexingPolicy"`
	// The configuration of the partition key to be used for partitioning data into multiple partitions
	PartitionKey *ContainerPartitionKey `pulumi:"partitionKey"`
	// The unique key policy configuration for specifying uniqueness constraints on documents in the collection in the Azure Cosmos DB service.
	UniqueKeyPolicy *UniqueKeyPolicy `pulumi:"uniqueKeyPolicy"`
}

// GremlinGraphResourceInput is an input type that accepts GremlinGraphResourceArgs and GremlinGraphResourceOutput values.
// You can construct a concrete instance of `GremlinGraphResourceInput` via:
//
//          GremlinGraphResourceArgs{...}
type GremlinGraphResourceInput interface {
	pulumi.Input

	ToGremlinGraphResourceOutput() GremlinGraphResourceOutput
	ToGremlinGraphResourceOutputWithContext(context.Context) GremlinGraphResourceOutput
}

// Cosmos DB Gremlin graph resource object
type GremlinGraphResourceArgs struct {
	// The conflict resolution policy for the graph.
	ConflictResolutionPolicy ConflictResolutionPolicyPtrInput `pulumi:"conflictResolutionPolicy"`
	// Default time to live
	DefaultTtl pulumi.IntPtrInput `pulumi:"defaultTtl"`
	// Name of the Cosmos DB Gremlin graph
	Id pulumi.StringInput `pulumi:"id"`
	// The configuration of the indexing policy. By default, the indexing is automatic for all document paths within the graph
	IndexingPolicy IndexingPolicyPtrInput `pulumi:"indexingPolicy"`
	// The configuration of the partition key to be used for partitioning data into multiple partitions
	PartitionKey ContainerPartitionKeyPtrInput `pulumi:"partitionKey"`
	// The unique key policy configuration for specifying uniqueness constraints on documents in the collection in the Azure Cosmos DB service.
	UniqueKeyPolicy UniqueKeyPolicyPtrInput `pulumi:"uniqueKeyPolicy"`
}

func (GremlinGraphResourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GremlinGraphResource)(nil)).Elem()
}

func (i GremlinGraphResourceArgs) ToGremlinGraphResourceOutput() GremlinGraphResourceOutput {
	return i.ToGremlinGraphResourceOutputWithContext(context.Background())
}

func (i GremlinGraphResourceArgs) ToGremlinGraphResourceOutputWithContext(ctx context.Context) GremlinGraphResourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GremlinGraphResourceOutput)
}

func (i GremlinGraphResourceArgs) ToGremlinGraphResourcePtrOutput() GremlinGraphResourcePtrOutput {
	return i.ToGremlinGraphResourcePtrOutputWithContext(context.Background())
}

func (i GremlinGraphResourceArgs) ToGremlinGraphResourcePtrOutputWithContext(ctx context.Context) GremlinGraphResourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GremlinGraphResourceOutput).ToGremlinGraphResourcePtrOutputWithContext(ctx)
}

// GremlinGraphResourcePtrInput is an input type that accepts GremlinGraphResourceArgs, GremlinGraphResourcePtr and GremlinGraphResourcePtrOutput values.
// You can construct a concrete instance of `GremlinGraphResourcePtrInput` via:
//
//          GremlinGraphResourceArgs{...}
//
//  or:
//
//          nil
type GremlinGraphResourcePtrInput interface {
	pulumi.Input

	ToGremlinGraphResourcePtrOutput() GremlinGraphResourcePtrOutput
	ToGremlinGraphResourcePtrOutputWithContext(context.Context) GremlinGraphResourcePtrOutput
}

type gremlinGraphResourcePtrType GremlinGraphResourceArgs

func GremlinGraphResourcePtr(v *GremlinGraphResourceArgs) GremlinGraphResourcePtrInput {
	return (*gremlinGraphResourcePtrType)(v)
}

func (*gremlinGraphResourcePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GremlinGraphResource)(nil)).Elem()
}

func (i *gremlinGraphResourcePtrType) ToGremlinGraphResourcePtrOutput() GremlinGraphResourcePtrOutput {
	return i.ToGremlinGraphResourcePtrOutputWithContext(context.Background())
}

func (i *gremlinGraphResourcePtrType) ToGremlinGraphResourcePtrOutputWithContext(ctx context.Context) GremlinGraphResourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GremlinGraphResourcePtrOutput)
}

// Cosmos DB Gremlin graph resource object
type GremlinGraphResourceOutput struct{ *pulumi.OutputState }

func (GremlinGraphResourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GremlinGraphResource)(nil)).Elem()
}

func (o GremlinGraphResourceOutput) ToGremlinGraphResourceOutput() GremlinGraphResourceOutput {
	return o
}

func (o GremlinGraphResourceOutput) ToGremlinGraphResourceOutputWithContext(ctx context.Context) GremlinGraphResourceOutput {
	return o
}

func (o GremlinGraphResourceOutput) ToGremlinGraphResourcePtrOutput() GremlinGraphResourcePtrOutput {
	return o.ToGremlinGraphResourcePtrOutputWithContext(context.Background())
}

func (o GremlinGraphResourceOutput) ToGremlinGraphResourcePtrOutputWithContext(ctx context.Context) GremlinGraphResourcePtrOutput {
	return o.ApplyT(func(v GremlinGraphResource) *GremlinGraphResource {
		return &v
	}).(GremlinGraphResourcePtrOutput)
}

// The conflict resolution policy for the graph.
func (o GremlinGraphResourceOutput) ConflictResolutionPolicy() ConflictResolutionPolicyPtrOutput {
	return o.ApplyT(func(v GremlinGraphResource) *ConflictResolutionPolicy { return v.ConflictResolutionPolicy }).(ConflictResolutionPolicyPtrOutput)
}

// Default time to live
func (o GremlinGraphResourceOutput) DefaultTtl() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GremlinGraphResource) *int { return v.DefaultTtl }).(pulumi.IntPtrOutput)
}

// Name of the Cosmos DB Gremlin graph
func (o GremlinGraphResourceOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GremlinGraphResource) string { return v.Id }).(pulumi.StringOutput)
}

// The configuration of the indexing policy. By default, the indexing is automatic for all document paths within the graph
func (o GremlinGraphResourceOutput) IndexingPolicy() IndexingPolicyPtrOutput {
	return o.ApplyT(func(v GremlinGraphResource) *IndexingPolicy { return v.IndexingPolicy }).(IndexingPolicyPtrOutput)
}

// The configuration of the partition key to be used for partitioning data into multiple partitions
func (o GremlinGraphResourceOutput) PartitionKey() ContainerPartitionKeyPtrOutput {
	return o.ApplyT(func(v GremlinGraphResource) *ContainerPartitionKey { return v.PartitionKey }).(ContainerPartitionKeyPtrOutput)
}

// The unique key policy configuration for specifying uniqueness constraints on documents in the collection in the Azure Cosmos DB service.
func (o GremlinGraphResourceOutput) UniqueKeyPolicy() UniqueKeyPolicyPtrOutput {
	return o.ApplyT(func(v GremlinGraphResource) *UniqueKeyPolicy { return v.UniqueKeyPolicy }).(UniqueKeyPolicyPtrOutput)
}

type GremlinGraphResourcePtrOutput struct{ *pulumi.OutputState }

func (GremlinGraphResourcePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GremlinGraphResource)(nil)).Elem()
}

func (o GremlinGraphResourcePtrOutput) ToGremlinGraphResourcePtrOutput() GremlinGraphResourcePtrOutput {
	return o
}

func (o GremlinGraphResourcePtrOutput) ToGremlinGraphResourcePtrOutputWithContext(ctx context.Context) GremlinGraphResourcePtrOutput {
	return o
}

func (o GremlinGraphResourcePtrOutput) Elem() GremlinGraphResourceOutput {
	return o.ApplyT(func(v *GremlinGraphResource) GremlinGraphResource { return *v }).(GremlinGraphResourceOutput)
}

// The conflict resolution policy for the graph.
func (o GremlinGraphResourcePtrOutput) ConflictResolutionPolicy() ConflictResolutionPolicyPtrOutput {
	return o.ApplyT(func(v *GremlinGraphResource) *ConflictResolutionPolicy {
		if v == nil {
			return nil
		}
		return v.ConflictResolutionPolicy
	}).(ConflictResolutionPolicyPtrOutput)
}

// Default time to live
func (o GremlinGraphResourcePtrOutput) DefaultTtl() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *GremlinGraphResource) *int {
		if v == nil {
			return nil
		}
		return v.DefaultTtl
	}).(pulumi.IntPtrOutput)
}

// Name of the Cosmos DB Gremlin graph
func (o GremlinGraphResourcePtrOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GremlinGraphResource) *string {
		if v == nil {
			return nil
		}
		return &v.Id
	}).(pulumi.StringPtrOutput)
}

// The configuration of the indexing policy. By default, the indexing is automatic for all document paths within the graph
func (o GremlinGraphResourcePtrOutput) IndexingPolicy() IndexingPolicyPtrOutput {
	return o.ApplyT(func(v *GremlinGraphResource) *IndexingPolicy {
		if v == nil {
			return nil
		}
		return v.IndexingPolicy
	}).(IndexingPolicyPtrOutput)
}

// The configuration of the partition key to be used for partitioning data into multiple partitions
func (o GremlinGraphResourcePtrOutput) PartitionKey() ContainerPartitionKeyPtrOutput {
	return o.ApplyT(func(v *GremlinGraphResource) *ContainerPartitionKey {
		if v == nil {
			return nil
		}
		return v.PartitionKey
	}).(ContainerPartitionKeyPtrOutput)
}

// The unique key policy configuration for specifying uniqueness constraints on documents in the collection in the Azure Cosmos DB service.
func (o GremlinGraphResourcePtrOutput) UniqueKeyPolicy() UniqueKeyPolicyPtrOutput {
	return o.ApplyT(func(v *GremlinGraphResource) *UniqueKeyPolicy {
		if v == nil {
			return nil
		}
		return v.UniqueKeyPolicy
	}).(UniqueKeyPolicyPtrOutput)
}

// The paths that are included in indexing
type IncludedPath struct {
	// List of indexes for this path
	Indexes []Indexes `pulumi:"indexes"`
	// The path for which the indexing behavior applies to. Index paths typically start with root and end with wildcard (/path/*)
	Path *string `pulumi:"path"`
}

// IncludedPathInput is an input type that accepts IncludedPathArgs and IncludedPathOutput values.
// You can construct a concrete instance of `IncludedPathInput` via:
//
//          IncludedPathArgs{...}
type IncludedPathInput interface {
	pulumi.Input

	ToIncludedPathOutput() IncludedPathOutput
	ToIncludedPathOutputWithContext(context.Context) IncludedPathOutput
}

// The paths that are included in indexing
type IncludedPathArgs struct {
	// List of indexes for this path
	Indexes IndexesArrayInput `pulumi:"indexes"`
	// The path for which the indexing behavior applies to. Index paths typically start with root and end with wildcard (/path/*)
	Path pulumi.StringPtrInput `pulumi:"path"`
}

func (IncludedPathArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*IncludedPath)(nil)).Elem()
}

func (i IncludedPathArgs) ToIncludedPathOutput() IncludedPathOutput {
	return i.ToIncludedPathOutputWithContext(context.Background())
}

func (i IncludedPathArgs) ToIncludedPathOutputWithContext(ctx context.Context) IncludedPathOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IncludedPathOutput)
}

// IncludedPathArrayInput is an input type that accepts IncludedPathArray and IncludedPathArrayOutput values.
// You can construct a concrete instance of `IncludedPathArrayInput` via:
//
//          IncludedPathArray{ IncludedPathArgs{...} }
type IncludedPathArrayInput interface {
	pulumi.Input

	ToIncludedPathArrayOutput() IncludedPathArrayOutput
	ToIncludedPathArrayOutputWithContext(context.Context) IncludedPathArrayOutput
}

type IncludedPathArray []IncludedPathInput

func (IncludedPathArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]IncludedPath)(nil)).Elem()
}

func (i IncludedPathArray) ToIncludedPathArrayOutput() IncludedPathArrayOutput {
	return i.ToIncludedPathArrayOutputWithContext(context.Background())
}

func (i IncludedPathArray) ToIncludedPathArrayOutputWithContext(ctx context.Context) IncludedPathArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IncludedPathArrayOutput)
}

// The paths that are included in indexing
type IncludedPathOutput struct{ *pulumi.OutputState }

func (IncludedPathOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IncludedPath)(nil)).Elem()
}

func (o IncludedPathOutput) ToIncludedPathOutput() IncludedPathOutput {
	return o
}

func (o IncludedPathOutput) ToIncludedPathOutputWithContext(ctx context.Context) IncludedPathOutput {
	return o
}

// List of indexes for this path
func (o IncludedPathOutput) Indexes() IndexesArrayOutput {
	return o.ApplyT(func(v IncludedPath) []Indexes { return v.Indexes }).(IndexesArrayOutput)
}

// The path for which the indexing behavior applies to. Index paths typically start with root and end with wildcard (/path/*)
func (o IncludedPathOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IncludedPath) *string { return v.Path }).(pulumi.StringPtrOutput)
}

type IncludedPathArrayOutput struct{ *pulumi.OutputState }

func (IncludedPathArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]IncludedPath)(nil)).Elem()
}

func (o IncludedPathArrayOutput) ToIncludedPathArrayOutput() IncludedPathArrayOutput {
	return o
}

func (o IncludedPathArrayOutput) ToIncludedPathArrayOutputWithContext(ctx context.Context) IncludedPathArrayOutput {
	return o
}

func (o IncludedPathArrayOutput) Index(i pulumi.IntInput) IncludedPathOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) IncludedPath {
		return vs[0].([]IncludedPath)[vs[1].(int)]
	}).(IncludedPathOutput)
}

// The paths that are included in indexing
type IncludedPathResponse struct {
	// List of indexes for this path
	Indexes []IndexesResponse `pulumi:"indexes"`
	// The path for which the indexing behavior applies to. Index paths typically start with root and end with wildcard (/path/*)
	Path *string `pulumi:"path"`
}

// IncludedPathResponseInput is an input type that accepts IncludedPathResponseArgs and IncludedPathResponseOutput values.
// You can construct a concrete instance of `IncludedPathResponseInput` via:
//
//          IncludedPathResponseArgs{...}
type IncludedPathResponseInput interface {
	pulumi.Input

	ToIncludedPathResponseOutput() IncludedPathResponseOutput
	ToIncludedPathResponseOutputWithContext(context.Context) IncludedPathResponseOutput
}

// The paths that are included in indexing
type IncludedPathResponseArgs struct {
	// List of indexes for this path
	Indexes IndexesResponseArrayInput `pulumi:"indexes"`
	// The path for which the indexing behavior applies to. Index paths typically start with root and end with wildcard (/path/*)
	Path pulumi.StringPtrInput `pulumi:"path"`
}

func (IncludedPathResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*IncludedPathResponse)(nil)).Elem()
}

func (i IncludedPathResponseArgs) ToIncludedPathResponseOutput() IncludedPathResponseOutput {
	return i.ToIncludedPathResponseOutputWithContext(context.Background())
}

func (i IncludedPathResponseArgs) ToIncludedPathResponseOutputWithContext(ctx context.Context) IncludedPathResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IncludedPathResponseOutput)
}

// IncludedPathResponseArrayInput is an input type that accepts IncludedPathResponseArray and IncludedPathResponseArrayOutput values.
// You can construct a concrete instance of `IncludedPathResponseArrayInput` via:
//
//          IncludedPathResponseArray{ IncludedPathResponseArgs{...} }
type IncludedPathResponseArrayInput interface {
	pulumi.Input

	ToIncludedPathResponseArrayOutput() IncludedPathResponseArrayOutput
	ToIncludedPathResponseArrayOutputWithContext(context.Context) IncludedPathResponseArrayOutput
}

type IncludedPathResponseArray []IncludedPathResponseInput

func (IncludedPathResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]IncludedPathResponse)(nil)).Elem()
}

func (i IncludedPathResponseArray) ToIncludedPathResponseArrayOutput() IncludedPathResponseArrayOutput {
	return i.ToIncludedPathResponseArrayOutputWithContext(context.Background())
}

func (i IncludedPathResponseArray) ToIncludedPathResponseArrayOutputWithContext(ctx context.Context) IncludedPathResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IncludedPathResponseArrayOutput)
}

// The paths that are included in indexing
type IncludedPathResponseOutput struct{ *pulumi.OutputState }

func (IncludedPathResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IncludedPathResponse)(nil)).Elem()
}

func (o IncludedPathResponseOutput) ToIncludedPathResponseOutput() IncludedPathResponseOutput {
	return o
}

func (o IncludedPathResponseOutput) ToIncludedPathResponseOutputWithContext(ctx context.Context) IncludedPathResponseOutput {
	return o
}

// List of indexes for this path
func (o IncludedPathResponseOutput) Indexes() IndexesResponseArrayOutput {
	return o.ApplyT(func(v IncludedPathResponse) []IndexesResponse { return v.Indexes }).(IndexesResponseArrayOutput)
}

// The path for which the indexing behavior applies to. Index paths typically start with root and end with wildcard (/path/*)
func (o IncludedPathResponseOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IncludedPathResponse) *string { return v.Path }).(pulumi.StringPtrOutput)
}

type IncludedPathResponseArrayOutput struct{ *pulumi.OutputState }

func (IncludedPathResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]IncludedPathResponse)(nil)).Elem()
}

func (o IncludedPathResponseArrayOutput) ToIncludedPathResponseArrayOutput() IncludedPathResponseArrayOutput {
	return o
}

func (o IncludedPathResponseArrayOutput) ToIncludedPathResponseArrayOutputWithContext(ctx context.Context) IncludedPathResponseArrayOutput {
	return o
}

func (o IncludedPathResponseArrayOutput) Index(i pulumi.IntInput) IncludedPathResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) IncludedPathResponse {
		return vs[0].([]IncludedPathResponse)[vs[1].(int)]
	}).(IncludedPathResponseOutput)
}

// The indexes for the path.
type Indexes struct {
	// The datatype for which the indexing behavior is applied to.
	DataType *string `pulumi:"dataType"`
	// Indicates the type of index.
	Kind *string `pulumi:"kind"`
	// The precision of the index. -1 is maximum precision.
	Precision *int `pulumi:"precision"`
}

// IndexesInput is an input type that accepts IndexesArgs and IndexesOutput values.
// You can construct a concrete instance of `IndexesInput` via:
//
//          IndexesArgs{...}
type IndexesInput interface {
	pulumi.Input

	ToIndexesOutput() IndexesOutput
	ToIndexesOutputWithContext(context.Context) IndexesOutput
}

// The indexes for the path.
type IndexesArgs struct {
	// The datatype for which the indexing behavior is applied to.
	DataType pulumi.StringPtrInput `pulumi:"dataType"`
	// Indicates the type of index.
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// The precision of the index. -1 is maximum precision.
	Precision pulumi.IntPtrInput `pulumi:"precision"`
}

func (IndexesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Indexes)(nil)).Elem()
}

func (i IndexesArgs) ToIndexesOutput() IndexesOutput {
	return i.ToIndexesOutputWithContext(context.Background())
}

func (i IndexesArgs) ToIndexesOutputWithContext(ctx context.Context) IndexesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IndexesOutput)
}

// IndexesArrayInput is an input type that accepts IndexesArray and IndexesArrayOutput values.
// You can construct a concrete instance of `IndexesArrayInput` via:
//
//          IndexesArray{ IndexesArgs{...} }
type IndexesArrayInput interface {
	pulumi.Input

	ToIndexesArrayOutput() IndexesArrayOutput
	ToIndexesArrayOutputWithContext(context.Context) IndexesArrayOutput
}

type IndexesArray []IndexesInput

func (IndexesArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Indexes)(nil)).Elem()
}

func (i IndexesArray) ToIndexesArrayOutput() IndexesArrayOutput {
	return i.ToIndexesArrayOutputWithContext(context.Background())
}

func (i IndexesArray) ToIndexesArrayOutputWithContext(ctx context.Context) IndexesArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IndexesArrayOutput)
}

// The indexes for the path.
type IndexesOutput struct{ *pulumi.OutputState }

func (IndexesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Indexes)(nil)).Elem()
}

func (o IndexesOutput) ToIndexesOutput() IndexesOutput {
	return o
}

func (o IndexesOutput) ToIndexesOutputWithContext(ctx context.Context) IndexesOutput {
	return o
}

// The datatype for which the indexing behavior is applied to.
func (o IndexesOutput) DataType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Indexes) *string { return v.DataType }).(pulumi.StringPtrOutput)
}

// Indicates the type of index.
func (o IndexesOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Indexes) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// The precision of the index. -1 is maximum precision.
func (o IndexesOutput) Precision() pulumi.IntPtrOutput {
	return o.ApplyT(func(v Indexes) *int { return v.Precision }).(pulumi.IntPtrOutput)
}

type IndexesArrayOutput struct{ *pulumi.OutputState }

func (IndexesArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Indexes)(nil)).Elem()
}

func (o IndexesArrayOutput) ToIndexesArrayOutput() IndexesArrayOutput {
	return o
}

func (o IndexesArrayOutput) ToIndexesArrayOutputWithContext(ctx context.Context) IndexesArrayOutput {
	return o
}

func (o IndexesArrayOutput) Index(i pulumi.IntInput) IndexesOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) Indexes {
		return vs[0].([]Indexes)[vs[1].(int)]
	}).(IndexesOutput)
}

// The indexes for the path.
type IndexesResponse struct {
	// The datatype for which the indexing behavior is applied to.
	DataType *string `pulumi:"dataType"`
	// Indicates the type of index.
	Kind *string `pulumi:"kind"`
	// The precision of the index. -1 is maximum precision.
	Precision *int `pulumi:"precision"`
}

// IndexesResponseInput is an input type that accepts IndexesResponseArgs and IndexesResponseOutput values.
// You can construct a concrete instance of `IndexesResponseInput` via:
//
//          IndexesResponseArgs{...}
type IndexesResponseInput interface {
	pulumi.Input

	ToIndexesResponseOutput() IndexesResponseOutput
	ToIndexesResponseOutputWithContext(context.Context) IndexesResponseOutput
}

// The indexes for the path.
type IndexesResponseArgs struct {
	// The datatype for which the indexing behavior is applied to.
	DataType pulumi.StringPtrInput `pulumi:"dataType"`
	// Indicates the type of index.
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// The precision of the index. -1 is maximum precision.
	Precision pulumi.IntPtrInput `pulumi:"precision"`
}

func (IndexesResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*IndexesResponse)(nil)).Elem()
}

func (i IndexesResponseArgs) ToIndexesResponseOutput() IndexesResponseOutput {
	return i.ToIndexesResponseOutputWithContext(context.Background())
}

func (i IndexesResponseArgs) ToIndexesResponseOutputWithContext(ctx context.Context) IndexesResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IndexesResponseOutput)
}

// IndexesResponseArrayInput is an input type that accepts IndexesResponseArray and IndexesResponseArrayOutput values.
// You can construct a concrete instance of `IndexesResponseArrayInput` via:
//
//          IndexesResponseArray{ IndexesResponseArgs{...} }
type IndexesResponseArrayInput interface {
	pulumi.Input

	ToIndexesResponseArrayOutput() IndexesResponseArrayOutput
	ToIndexesResponseArrayOutputWithContext(context.Context) IndexesResponseArrayOutput
}

type IndexesResponseArray []IndexesResponseInput

func (IndexesResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]IndexesResponse)(nil)).Elem()
}

func (i IndexesResponseArray) ToIndexesResponseArrayOutput() IndexesResponseArrayOutput {
	return i.ToIndexesResponseArrayOutputWithContext(context.Background())
}

func (i IndexesResponseArray) ToIndexesResponseArrayOutputWithContext(ctx context.Context) IndexesResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IndexesResponseArrayOutput)
}

// The indexes for the path.
type IndexesResponseOutput struct{ *pulumi.OutputState }

func (IndexesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IndexesResponse)(nil)).Elem()
}

func (o IndexesResponseOutput) ToIndexesResponseOutput() IndexesResponseOutput {
	return o
}

func (o IndexesResponseOutput) ToIndexesResponseOutputWithContext(ctx context.Context) IndexesResponseOutput {
	return o
}

// The datatype for which the indexing behavior is applied to.
func (o IndexesResponseOutput) DataType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IndexesResponse) *string { return v.DataType }).(pulumi.StringPtrOutput)
}

// Indicates the type of index.
func (o IndexesResponseOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IndexesResponse) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// The precision of the index. -1 is maximum precision.
func (o IndexesResponseOutput) Precision() pulumi.IntPtrOutput {
	return o.ApplyT(func(v IndexesResponse) *int { return v.Precision }).(pulumi.IntPtrOutput)
}

type IndexesResponseArrayOutput struct{ *pulumi.OutputState }

func (IndexesResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]IndexesResponse)(nil)).Elem()
}

func (o IndexesResponseArrayOutput) ToIndexesResponseArrayOutput() IndexesResponseArrayOutput {
	return o
}

func (o IndexesResponseArrayOutput) ToIndexesResponseArrayOutputWithContext(ctx context.Context) IndexesResponseArrayOutput {
	return o
}

func (o IndexesResponseArrayOutput) Index(i pulumi.IntInput) IndexesResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) IndexesResponse {
		return vs[0].([]IndexesResponse)[vs[1].(int)]
	}).(IndexesResponseOutput)
}

// Cosmos DB indexing policy
type IndexingPolicy struct {
	// Indicates if the indexing policy is automatic
	Automatic *bool `pulumi:"automatic"`
	// List of paths to exclude from indexing
	ExcludedPaths []ExcludedPath `pulumi:"excludedPaths"`
	// List of paths to include in the indexing
	IncludedPaths []IncludedPath `pulumi:"includedPaths"`
	// Indicates the indexing mode.
	IndexingMode *string `pulumi:"indexingMode"`
}

// IndexingPolicyInput is an input type that accepts IndexingPolicyArgs and IndexingPolicyOutput values.
// You can construct a concrete instance of `IndexingPolicyInput` via:
//
//          IndexingPolicyArgs{...}
type IndexingPolicyInput interface {
	pulumi.Input

	ToIndexingPolicyOutput() IndexingPolicyOutput
	ToIndexingPolicyOutputWithContext(context.Context) IndexingPolicyOutput
}

// Cosmos DB indexing policy
type IndexingPolicyArgs struct {
	// Indicates if the indexing policy is automatic
	Automatic pulumi.BoolPtrInput `pulumi:"automatic"`
	// List of paths to exclude from indexing
	ExcludedPaths ExcludedPathArrayInput `pulumi:"excludedPaths"`
	// List of paths to include in the indexing
	IncludedPaths IncludedPathArrayInput `pulumi:"includedPaths"`
	// Indicates the indexing mode.
	IndexingMode pulumi.StringPtrInput `pulumi:"indexingMode"`
}

func (IndexingPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*IndexingPolicy)(nil)).Elem()
}

func (i IndexingPolicyArgs) ToIndexingPolicyOutput() IndexingPolicyOutput {
	return i.ToIndexingPolicyOutputWithContext(context.Background())
}

func (i IndexingPolicyArgs) ToIndexingPolicyOutputWithContext(ctx context.Context) IndexingPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IndexingPolicyOutput)
}

func (i IndexingPolicyArgs) ToIndexingPolicyPtrOutput() IndexingPolicyPtrOutput {
	return i.ToIndexingPolicyPtrOutputWithContext(context.Background())
}

func (i IndexingPolicyArgs) ToIndexingPolicyPtrOutputWithContext(ctx context.Context) IndexingPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IndexingPolicyOutput).ToIndexingPolicyPtrOutputWithContext(ctx)
}

// IndexingPolicyPtrInput is an input type that accepts IndexingPolicyArgs, IndexingPolicyPtr and IndexingPolicyPtrOutput values.
// You can construct a concrete instance of `IndexingPolicyPtrInput` via:
//
//          IndexingPolicyArgs{...}
//
//  or:
//
//          nil
type IndexingPolicyPtrInput interface {
	pulumi.Input

	ToIndexingPolicyPtrOutput() IndexingPolicyPtrOutput
	ToIndexingPolicyPtrOutputWithContext(context.Context) IndexingPolicyPtrOutput
}

type indexingPolicyPtrType IndexingPolicyArgs

func IndexingPolicyPtr(v *IndexingPolicyArgs) IndexingPolicyPtrInput {
	return (*indexingPolicyPtrType)(v)
}

func (*indexingPolicyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**IndexingPolicy)(nil)).Elem()
}

func (i *indexingPolicyPtrType) ToIndexingPolicyPtrOutput() IndexingPolicyPtrOutput {
	return i.ToIndexingPolicyPtrOutputWithContext(context.Background())
}

func (i *indexingPolicyPtrType) ToIndexingPolicyPtrOutputWithContext(ctx context.Context) IndexingPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IndexingPolicyPtrOutput)
}

// Cosmos DB indexing policy
type IndexingPolicyOutput struct{ *pulumi.OutputState }

func (IndexingPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IndexingPolicy)(nil)).Elem()
}

func (o IndexingPolicyOutput) ToIndexingPolicyOutput() IndexingPolicyOutput {
	return o
}

func (o IndexingPolicyOutput) ToIndexingPolicyOutputWithContext(ctx context.Context) IndexingPolicyOutput {
	return o
}

func (o IndexingPolicyOutput) ToIndexingPolicyPtrOutput() IndexingPolicyPtrOutput {
	return o.ToIndexingPolicyPtrOutputWithContext(context.Background())
}

func (o IndexingPolicyOutput) ToIndexingPolicyPtrOutputWithContext(ctx context.Context) IndexingPolicyPtrOutput {
	return o.ApplyT(func(v IndexingPolicy) *IndexingPolicy {
		return &v
	}).(IndexingPolicyPtrOutput)
}

// Indicates if the indexing policy is automatic
func (o IndexingPolicyOutput) Automatic() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v IndexingPolicy) *bool { return v.Automatic }).(pulumi.BoolPtrOutput)
}

// List of paths to exclude from indexing
func (o IndexingPolicyOutput) ExcludedPaths() ExcludedPathArrayOutput {
	return o.ApplyT(func(v IndexingPolicy) []ExcludedPath { return v.ExcludedPaths }).(ExcludedPathArrayOutput)
}

// List of paths to include in the indexing
func (o IndexingPolicyOutput) IncludedPaths() IncludedPathArrayOutput {
	return o.ApplyT(func(v IndexingPolicy) []IncludedPath { return v.IncludedPaths }).(IncludedPathArrayOutput)
}

// Indicates the indexing mode.
func (o IndexingPolicyOutput) IndexingMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IndexingPolicy) *string { return v.IndexingMode }).(pulumi.StringPtrOutput)
}

type IndexingPolicyPtrOutput struct{ *pulumi.OutputState }

func (IndexingPolicyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**IndexingPolicy)(nil)).Elem()
}

func (o IndexingPolicyPtrOutput) ToIndexingPolicyPtrOutput() IndexingPolicyPtrOutput {
	return o
}

func (o IndexingPolicyPtrOutput) ToIndexingPolicyPtrOutputWithContext(ctx context.Context) IndexingPolicyPtrOutput {
	return o
}

func (o IndexingPolicyPtrOutput) Elem() IndexingPolicyOutput {
	return o.ApplyT(func(v *IndexingPolicy) IndexingPolicy { return *v }).(IndexingPolicyOutput)
}

// Indicates if the indexing policy is automatic
func (o IndexingPolicyPtrOutput) Automatic() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *IndexingPolicy) *bool {
		if v == nil {
			return nil
		}
		return v.Automatic
	}).(pulumi.BoolPtrOutput)
}

// List of paths to exclude from indexing
func (o IndexingPolicyPtrOutput) ExcludedPaths() ExcludedPathArrayOutput {
	return o.ApplyT(func(v *IndexingPolicy) []ExcludedPath {
		if v == nil {
			return nil
		}
		return v.ExcludedPaths
	}).(ExcludedPathArrayOutput)
}

// List of paths to include in the indexing
func (o IndexingPolicyPtrOutput) IncludedPaths() IncludedPathArrayOutput {
	return o.ApplyT(func(v *IndexingPolicy) []IncludedPath {
		if v == nil {
			return nil
		}
		return v.IncludedPaths
	}).(IncludedPathArrayOutput)
}

// Indicates the indexing mode.
func (o IndexingPolicyPtrOutput) IndexingMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IndexingPolicy) *string {
		if v == nil {
			return nil
		}
		return v.IndexingMode
	}).(pulumi.StringPtrOutput)
}

// Cosmos DB indexing policy
type IndexingPolicyResponse struct {
	// Indicates if the indexing policy is automatic
	Automatic *bool `pulumi:"automatic"`
	// List of paths to exclude from indexing
	ExcludedPaths []ExcludedPathResponse `pulumi:"excludedPaths"`
	// List of paths to include in the indexing
	IncludedPaths []IncludedPathResponse `pulumi:"includedPaths"`
	// Indicates the indexing mode.
	IndexingMode *string `pulumi:"indexingMode"`
}

// IndexingPolicyResponseInput is an input type that accepts IndexingPolicyResponseArgs and IndexingPolicyResponseOutput values.
// You can construct a concrete instance of `IndexingPolicyResponseInput` via:
//
//          IndexingPolicyResponseArgs{...}
type IndexingPolicyResponseInput interface {
	pulumi.Input

	ToIndexingPolicyResponseOutput() IndexingPolicyResponseOutput
	ToIndexingPolicyResponseOutputWithContext(context.Context) IndexingPolicyResponseOutput
}

// Cosmos DB indexing policy
type IndexingPolicyResponseArgs struct {
	// Indicates if the indexing policy is automatic
	Automatic pulumi.BoolPtrInput `pulumi:"automatic"`
	// List of paths to exclude from indexing
	ExcludedPaths ExcludedPathResponseArrayInput `pulumi:"excludedPaths"`
	// List of paths to include in the indexing
	IncludedPaths IncludedPathResponseArrayInput `pulumi:"includedPaths"`
	// Indicates the indexing mode.
	IndexingMode pulumi.StringPtrInput `pulumi:"indexingMode"`
}

func (IndexingPolicyResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*IndexingPolicyResponse)(nil)).Elem()
}

func (i IndexingPolicyResponseArgs) ToIndexingPolicyResponseOutput() IndexingPolicyResponseOutput {
	return i.ToIndexingPolicyResponseOutputWithContext(context.Background())
}

func (i IndexingPolicyResponseArgs) ToIndexingPolicyResponseOutputWithContext(ctx context.Context) IndexingPolicyResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IndexingPolicyResponseOutput)
}

func (i IndexingPolicyResponseArgs) ToIndexingPolicyResponsePtrOutput() IndexingPolicyResponsePtrOutput {
	return i.ToIndexingPolicyResponsePtrOutputWithContext(context.Background())
}

func (i IndexingPolicyResponseArgs) ToIndexingPolicyResponsePtrOutputWithContext(ctx context.Context) IndexingPolicyResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IndexingPolicyResponseOutput).ToIndexingPolicyResponsePtrOutputWithContext(ctx)
}

// IndexingPolicyResponsePtrInput is an input type that accepts IndexingPolicyResponseArgs, IndexingPolicyResponsePtr and IndexingPolicyResponsePtrOutput values.
// You can construct a concrete instance of `IndexingPolicyResponsePtrInput` via:
//
//          IndexingPolicyResponseArgs{...}
//
//  or:
//
//          nil
type IndexingPolicyResponsePtrInput interface {
	pulumi.Input

	ToIndexingPolicyResponsePtrOutput() IndexingPolicyResponsePtrOutput
	ToIndexingPolicyResponsePtrOutputWithContext(context.Context) IndexingPolicyResponsePtrOutput
}

type indexingPolicyResponsePtrType IndexingPolicyResponseArgs

func IndexingPolicyResponsePtr(v *IndexingPolicyResponseArgs) IndexingPolicyResponsePtrInput {
	return (*indexingPolicyResponsePtrType)(v)
}

func (*indexingPolicyResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**IndexingPolicyResponse)(nil)).Elem()
}

func (i *indexingPolicyResponsePtrType) ToIndexingPolicyResponsePtrOutput() IndexingPolicyResponsePtrOutput {
	return i.ToIndexingPolicyResponsePtrOutputWithContext(context.Background())
}

func (i *indexingPolicyResponsePtrType) ToIndexingPolicyResponsePtrOutputWithContext(ctx context.Context) IndexingPolicyResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IndexingPolicyResponsePtrOutput)
}

// Cosmos DB indexing policy
type IndexingPolicyResponseOutput struct{ *pulumi.OutputState }

func (IndexingPolicyResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IndexingPolicyResponse)(nil)).Elem()
}

func (o IndexingPolicyResponseOutput) ToIndexingPolicyResponseOutput() IndexingPolicyResponseOutput {
	return o
}

func (o IndexingPolicyResponseOutput) ToIndexingPolicyResponseOutputWithContext(ctx context.Context) IndexingPolicyResponseOutput {
	return o
}

func (o IndexingPolicyResponseOutput) ToIndexingPolicyResponsePtrOutput() IndexingPolicyResponsePtrOutput {
	return o.ToIndexingPolicyResponsePtrOutputWithContext(context.Background())
}

func (o IndexingPolicyResponseOutput) ToIndexingPolicyResponsePtrOutputWithContext(ctx context.Context) IndexingPolicyResponsePtrOutput {
	return o.ApplyT(func(v IndexingPolicyResponse) *IndexingPolicyResponse {
		return &v
	}).(IndexingPolicyResponsePtrOutput)
}

// Indicates if the indexing policy is automatic
func (o IndexingPolicyResponseOutput) Automatic() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v IndexingPolicyResponse) *bool { return v.Automatic }).(pulumi.BoolPtrOutput)
}

// List of paths to exclude from indexing
func (o IndexingPolicyResponseOutput) ExcludedPaths() ExcludedPathResponseArrayOutput {
	return o.ApplyT(func(v IndexingPolicyResponse) []ExcludedPathResponse { return v.ExcludedPaths }).(ExcludedPathResponseArrayOutput)
}

// List of paths to include in the indexing
func (o IndexingPolicyResponseOutput) IncludedPaths() IncludedPathResponseArrayOutput {
	return o.ApplyT(func(v IndexingPolicyResponse) []IncludedPathResponse { return v.IncludedPaths }).(IncludedPathResponseArrayOutput)
}

// Indicates the indexing mode.
func (o IndexingPolicyResponseOutput) IndexingMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IndexingPolicyResponse) *string { return v.IndexingMode }).(pulumi.StringPtrOutput)
}

type IndexingPolicyResponsePtrOutput struct{ *pulumi.OutputState }

func (IndexingPolicyResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**IndexingPolicyResponse)(nil)).Elem()
}

func (o IndexingPolicyResponsePtrOutput) ToIndexingPolicyResponsePtrOutput() IndexingPolicyResponsePtrOutput {
	return o
}

func (o IndexingPolicyResponsePtrOutput) ToIndexingPolicyResponsePtrOutputWithContext(ctx context.Context) IndexingPolicyResponsePtrOutput {
	return o
}

func (o IndexingPolicyResponsePtrOutput) Elem() IndexingPolicyResponseOutput {
	return o.ApplyT(func(v *IndexingPolicyResponse) IndexingPolicyResponse { return *v }).(IndexingPolicyResponseOutput)
}

// Indicates if the indexing policy is automatic
func (o IndexingPolicyResponsePtrOutput) Automatic() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *IndexingPolicyResponse) *bool {
		if v == nil {
			return nil
		}
		return v.Automatic
	}).(pulumi.BoolPtrOutput)
}

// List of paths to exclude from indexing
func (o IndexingPolicyResponsePtrOutput) ExcludedPaths() ExcludedPathResponseArrayOutput {
	return o.ApplyT(func(v *IndexingPolicyResponse) []ExcludedPathResponse {
		if v == nil {
			return nil
		}
		return v.ExcludedPaths
	}).(ExcludedPathResponseArrayOutput)
}

// List of paths to include in the indexing
func (o IndexingPolicyResponsePtrOutput) IncludedPaths() IncludedPathResponseArrayOutput {
	return o.ApplyT(func(v *IndexingPolicyResponse) []IncludedPathResponse {
		if v == nil {
			return nil
		}
		return v.IncludedPaths
	}).(IncludedPathResponseArrayOutput)
}

// Indicates the indexing mode.
func (o IndexingPolicyResponsePtrOutput) IndexingMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IndexingPolicyResponse) *string {
		if v == nil {
			return nil
		}
		return v.IndexingMode
	}).(pulumi.StringPtrOutput)
}

// A region in which the Azure Cosmos DB database account is deployed.
type Location struct {
	// The failover priority of the region. A failover priority of 0 indicates a write region. The maximum value for a failover priority = (total number of regions - 1). Failover priority values must be unique for each of the regions in which the database account exists.
	FailoverPriority *int `pulumi:"failoverPriority"`
	// Flag to indicate whether or not this region is an AvailabilityZone region
	IsZoneRedundant *bool `pulumi:"isZoneRedundant"`
	// The name of the region.
	LocationName *string `pulumi:"locationName"`
}

// LocationInput is an input type that accepts LocationArgs and LocationOutput values.
// You can construct a concrete instance of `LocationInput` via:
//
//          LocationArgs{...}
type LocationInput interface {
	pulumi.Input

	ToLocationOutput() LocationOutput
	ToLocationOutputWithContext(context.Context) LocationOutput
}

// A region in which the Azure Cosmos DB database account is deployed.
type LocationArgs struct {
	// The failover priority of the region. A failover priority of 0 indicates a write region. The maximum value for a failover priority = (total number of regions - 1). Failover priority values must be unique for each of the regions in which the database account exists.
	FailoverPriority pulumi.IntPtrInput `pulumi:"failoverPriority"`
	// Flag to indicate whether or not this region is an AvailabilityZone region
	IsZoneRedundant pulumi.BoolPtrInput `pulumi:"isZoneRedundant"`
	// The name of the region.
	LocationName pulumi.StringPtrInput `pulumi:"locationName"`
}

func (LocationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Location)(nil)).Elem()
}

func (i LocationArgs) ToLocationOutput() LocationOutput {
	return i.ToLocationOutputWithContext(context.Background())
}

func (i LocationArgs) ToLocationOutputWithContext(ctx context.Context) LocationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LocationOutput)
}

// LocationArrayInput is an input type that accepts LocationArray and LocationArrayOutput values.
// You can construct a concrete instance of `LocationArrayInput` via:
//
//          LocationArray{ LocationArgs{...} }
type LocationArrayInput interface {
	pulumi.Input

	ToLocationArrayOutput() LocationArrayOutput
	ToLocationArrayOutputWithContext(context.Context) LocationArrayOutput
}

type LocationArray []LocationInput

func (LocationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Location)(nil)).Elem()
}

func (i LocationArray) ToLocationArrayOutput() LocationArrayOutput {
	return i.ToLocationArrayOutputWithContext(context.Background())
}

func (i LocationArray) ToLocationArrayOutputWithContext(ctx context.Context) LocationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LocationArrayOutput)
}

// A region in which the Azure Cosmos DB database account is deployed.
type LocationOutput struct{ *pulumi.OutputState }

func (LocationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Location)(nil)).Elem()
}

func (o LocationOutput) ToLocationOutput() LocationOutput {
	return o
}

func (o LocationOutput) ToLocationOutputWithContext(ctx context.Context) LocationOutput {
	return o
}

// The failover priority of the region. A failover priority of 0 indicates a write region. The maximum value for a failover priority = (total number of regions - 1). Failover priority values must be unique for each of the regions in which the database account exists.
func (o LocationOutput) FailoverPriority() pulumi.IntPtrOutput {
	return o.ApplyT(func(v Location) *int { return v.FailoverPriority }).(pulumi.IntPtrOutput)
}

// Flag to indicate whether or not this region is an AvailabilityZone region
func (o LocationOutput) IsZoneRedundant() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v Location) *bool { return v.IsZoneRedundant }).(pulumi.BoolPtrOutput)
}

// The name of the region.
func (o LocationOutput) LocationName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Location) *string { return v.LocationName }).(pulumi.StringPtrOutput)
}

type LocationArrayOutput struct{ *pulumi.OutputState }

func (LocationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Location)(nil)).Elem()
}

func (o LocationArrayOutput) ToLocationArrayOutput() LocationArrayOutput {
	return o
}

func (o LocationArrayOutput) ToLocationArrayOutputWithContext(ctx context.Context) LocationArrayOutput {
	return o
}

func (o LocationArrayOutput) Index(i pulumi.IntInput) LocationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) Location {
		return vs[0].([]Location)[vs[1].(int)]
	}).(LocationOutput)
}

// A region in which the Azure Cosmos DB database account is deployed.
type LocationResponse struct {
	// The connection endpoint for the specific region. Example: https://&lt;accountName&gt;-&lt;locationName&gt;.documents.azure.com:443/
	DocumentEndpoint string `pulumi:"documentEndpoint"`
	// The failover priority of the region. A failover priority of 0 indicates a write region. The maximum value for a failover priority = (total number of regions - 1). Failover priority values must be unique for each of the regions in which the database account exists.
	FailoverPriority *int `pulumi:"failoverPriority"`
	// The unique identifier of the region within the database account. Example: &lt;accountName&gt;-&lt;locationName&gt;.
	Id string `pulumi:"id"`
	// Flag to indicate whether or not this region is an AvailabilityZone region
	IsZoneRedundant *bool `pulumi:"isZoneRedundant"`
	// The name of the region.
	LocationName *string `pulumi:"locationName"`
	// The status of the Cosmos DB account at the time the operation was called. The status can be one of following. 'Creating' – the Cosmos DB account is being created. When an account is in Creating state, only properties that are specified as input for the Create Cosmos DB account operation are returned. 'Succeeded' – the Cosmos DB account is active for use. 'Updating' – the Cosmos DB account is being updated. 'Deleting' – the Cosmos DB account is being deleted. 'Failed' – the Cosmos DB account failed creation. 'Offline' - the Cosmos DB account is not active. 'DeletionFailed' – the Cosmos DB account deletion failed.
	ProvisioningState string `pulumi:"provisioningState"`
}

// LocationResponseInput is an input type that accepts LocationResponseArgs and LocationResponseOutput values.
// You can construct a concrete instance of `LocationResponseInput` via:
//
//          LocationResponseArgs{...}
type LocationResponseInput interface {
	pulumi.Input

	ToLocationResponseOutput() LocationResponseOutput
	ToLocationResponseOutputWithContext(context.Context) LocationResponseOutput
}

// A region in which the Azure Cosmos DB database account is deployed.
type LocationResponseArgs struct {
	// The connection endpoint for the specific region. Example: https://&lt;accountName&gt;-&lt;locationName&gt;.documents.azure.com:443/
	DocumentEndpoint pulumi.StringInput `pulumi:"documentEndpoint"`
	// The failover priority of the region. A failover priority of 0 indicates a write region. The maximum value for a failover priority = (total number of regions - 1). Failover priority values must be unique for each of the regions in which the database account exists.
	FailoverPriority pulumi.IntPtrInput `pulumi:"failoverPriority"`
	// The unique identifier of the region within the database account. Example: &lt;accountName&gt;-&lt;locationName&gt;.
	Id pulumi.StringInput `pulumi:"id"`
	// Flag to indicate whether or not this region is an AvailabilityZone region
	IsZoneRedundant pulumi.BoolPtrInput `pulumi:"isZoneRedundant"`
	// The name of the region.
	LocationName pulumi.StringPtrInput `pulumi:"locationName"`
	// The status of the Cosmos DB account at the time the operation was called. The status can be one of following. 'Creating' – the Cosmos DB account is being created. When an account is in Creating state, only properties that are specified as input for the Create Cosmos DB account operation are returned. 'Succeeded' – the Cosmos DB account is active for use. 'Updating' – the Cosmos DB account is being updated. 'Deleting' – the Cosmos DB account is being deleted. 'Failed' – the Cosmos DB account failed creation. 'Offline' - the Cosmos DB account is not active. 'DeletionFailed' – the Cosmos DB account deletion failed.
	ProvisioningState pulumi.StringInput `pulumi:"provisioningState"`
}

func (LocationResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LocationResponse)(nil)).Elem()
}

func (i LocationResponseArgs) ToLocationResponseOutput() LocationResponseOutput {
	return i.ToLocationResponseOutputWithContext(context.Background())
}

func (i LocationResponseArgs) ToLocationResponseOutputWithContext(ctx context.Context) LocationResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LocationResponseOutput)
}

// LocationResponseArrayInput is an input type that accepts LocationResponseArray and LocationResponseArrayOutput values.
// You can construct a concrete instance of `LocationResponseArrayInput` via:
//
//          LocationResponseArray{ LocationResponseArgs{...} }
type LocationResponseArrayInput interface {
	pulumi.Input

	ToLocationResponseArrayOutput() LocationResponseArrayOutput
	ToLocationResponseArrayOutputWithContext(context.Context) LocationResponseArrayOutput
}

type LocationResponseArray []LocationResponseInput

func (LocationResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]LocationResponse)(nil)).Elem()
}

func (i LocationResponseArray) ToLocationResponseArrayOutput() LocationResponseArrayOutput {
	return i.ToLocationResponseArrayOutputWithContext(context.Background())
}

func (i LocationResponseArray) ToLocationResponseArrayOutputWithContext(ctx context.Context) LocationResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LocationResponseArrayOutput)
}

// A region in which the Azure Cosmos DB database account is deployed.
type LocationResponseOutput struct{ *pulumi.OutputState }

func (LocationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LocationResponse)(nil)).Elem()
}

func (o LocationResponseOutput) ToLocationResponseOutput() LocationResponseOutput {
	return o
}

func (o LocationResponseOutput) ToLocationResponseOutputWithContext(ctx context.Context) LocationResponseOutput {
	return o
}

// The connection endpoint for the specific region. Example: https://&lt;accountName&gt;-&lt;locationName&gt;.documents.azure.com:443/
func (o LocationResponseOutput) DocumentEndpoint() pulumi.StringOutput {
	return o.ApplyT(func(v LocationResponse) string { return v.DocumentEndpoint }).(pulumi.StringOutput)
}

// The failover priority of the region. A failover priority of 0 indicates a write region. The maximum value for a failover priority = (total number of regions - 1). Failover priority values must be unique for each of the regions in which the database account exists.
func (o LocationResponseOutput) FailoverPriority() pulumi.IntPtrOutput {
	return o.ApplyT(func(v LocationResponse) *int { return v.FailoverPriority }).(pulumi.IntPtrOutput)
}

// The unique identifier of the region within the database account. Example: &lt;accountName&gt;-&lt;locationName&gt;.
func (o LocationResponseOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LocationResponse) string { return v.Id }).(pulumi.StringOutput)
}

// Flag to indicate whether or not this region is an AvailabilityZone region
func (o LocationResponseOutput) IsZoneRedundant() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v LocationResponse) *bool { return v.IsZoneRedundant }).(pulumi.BoolPtrOutput)
}

// The name of the region.
func (o LocationResponseOutput) LocationName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LocationResponse) *string { return v.LocationName }).(pulumi.StringPtrOutput)
}

// The status of the Cosmos DB account at the time the operation was called. The status can be one of following. 'Creating' – the Cosmos DB account is being created. When an account is in Creating state, only properties that are specified as input for the Create Cosmos DB account operation are returned. 'Succeeded' – the Cosmos DB account is active for use. 'Updating' – the Cosmos DB account is being updated. 'Deleting' – the Cosmos DB account is being deleted. 'Failed' – the Cosmos DB account failed creation. 'Offline' - the Cosmos DB account is not active. 'DeletionFailed' – the Cosmos DB account deletion failed.
func (o LocationResponseOutput) ProvisioningState() pulumi.StringOutput {
	return o.ApplyT(func(v LocationResponse) string { return v.ProvisioningState }).(pulumi.StringOutput)
}

type LocationResponseArrayOutput struct{ *pulumi.OutputState }

func (LocationResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]LocationResponse)(nil)).Elem()
}

func (o LocationResponseArrayOutput) ToLocationResponseArrayOutput() LocationResponseArrayOutput {
	return o
}

func (o LocationResponseArrayOutput) ToLocationResponseArrayOutputWithContext(ctx context.Context) LocationResponseArrayOutput {
	return o
}

func (o LocationResponseArrayOutput) Index(i pulumi.IntInput) LocationResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) LocationResponse {
		return vs[0].([]LocationResponse)[vs[1].(int)]
	}).(LocationResponseOutput)
}

// Cosmos DB MongoDB collection resource object
type MongoDBCollectionResource struct {
	// Name of the Cosmos DB MongoDB collection
	Id string `pulumi:"id"`
	// List of index keys
	Indexes []MongoIndex `pulumi:"indexes"`
	// A key-value pair of shard keys to be applied for the request.
	ShardKey map[string]string `pulumi:"shardKey"`
}

// MongoDBCollectionResourceInput is an input type that accepts MongoDBCollectionResourceArgs and MongoDBCollectionResourceOutput values.
// You can construct a concrete instance of `MongoDBCollectionResourceInput` via:
//
//          MongoDBCollectionResourceArgs{...}
type MongoDBCollectionResourceInput interface {
	pulumi.Input

	ToMongoDBCollectionResourceOutput() MongoDBCollectionResourceOutput
	ToMongoDBCollectionResourceOutputWithContext(context.Context) MongoDBCollectionResourceOutput
}

// Cosmos DB MongoDB collection resource object
type MongoDBCollectionResourceArgs struct {
	// Name of the Cosmos DB MongoDB collection
	Id pulumi.StringInput `pulumi:"id"`
	// List of index keys
	Indexes MongoIndexArrayInput `pulumi:"indexes"`
	// A key-value pair of shard keys to be applied for the request.
	ShardKey pulumi.StringMapInput `pulumi:"shardKey"`
}

func (MongoDBCollectionResourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MongoDBCollectionResource)(nil)).Elem()
}

func (i MongoDBCollectionResourceArgs) ToMongoDBCollectionResourceOutput() MongoDBCollectionResourceOutput {
	return i.ToMongoDBCollectionResourceOutputWithContext(context.Background())
}

func (i MongoDBCollectionResourceArgs) ToMongoDBCollectionResourceOutputWithContext(ctx context.Context) MongoDBCollectionResourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MongoDBCollectionResourceOutput)
}

func (i MongoDBCollectionResourceArgs) ToMongoDBCollectionResourcePtrOutput() MongoDBCollectionResourcePtrOutput {
	return i.ToMongoDBCollectionResourcePtrOutputWithContext(context.Background())
}

func (i MongoDBCollectionResourceArgs) ToMongoDBCollectionResourcePtrOutputWithContext(ctx context.Context) MongoDBCollectionResourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MongoDBCollectionResourceOutput).ToMongoDBCollectionResourcePtrOutputWithContext(ctx)
}

// MongoDBCollectionResourcePtrInput is an input type that accepts MongoDBCollectionResourceArgs, MongoDBCollectionResourcePtr and MongoDBCollectionResourcePtrOutput values.
// You can construct a concrete instance of `MongoDBCollectionResourcePtrInput` via:
//
//          MongoDBCollectionResourceArgs{...}
//
//  or:
//
//          nil
type MongoDBCollectionResourcePtrInput interface {
	pulumi.Input

	ToMongoDBCollectionResourcePtrOutput() MongoDBCollectionResourcePtrOutput
	ToMongoDBCollectionResourcePtrOutputWithContext(context.Context) MongoDBCollectionResourcePtrOutput
}

type mongoDBCollectionResourcePtrType MongoDBCollectionResourceArgs

func MongoDBCollectionResourcePtr(v *MongoDBCollectionResourceArgs) MongoDBCollectionResourcePtrInput {
	return (*mongoDBCollectionResourcePtrType)(v)
}

func (*mongoDBCollectionResourcePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**MongoDBCollectionResource)(nil)).Elem()
}

func (i *mongoDBCollectionResourcePtrType) ToMongoDBCollectionResourcePtrOutput() MongoDBCollectionResourcePtrOutput {
	return i.ToMongoDBCollectionResourcePtrOutputWithContext(context.Background())
}

func (i *mongoDBCollectionResourcePtrType) ToMongoDBCollectionResourcePtrOutputWithContext(ctx context.Context) MongoDBCollectionResourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MongoDBCollectionResourcePtrOutput)
}

// Cosmos DB MongoDB collection resource object
type MongoDBCollectionResourceOutput struct{ *pulumi.OutputState }

func (MongoDBCollectionResourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MongoDBCollectionResource)(nil)).Elem()
}

func (o MongoDBCollectionResourceOutput) ToMongoDBCollectionResourceOutput() MongoDBCollectionResourceOutput {
	return o
}

func (o MongoDBCollectionResourceOutput) ToMongoDBCollectionResourceOutputWithContext(ctx context.Context) MongoDBCollectionResourceOutput {
	return o
}

func (o MongoDBCollectionResourceOutput) ToMongoDBCollectionResourcePtrOutput() MongoDBCollectionResourcePtrOutput {
	return o.ToMongoDBCollectionResourcePtrOutputWithContext(context.Background())
}

func (o MongoDBCollectionResourceOutput) ToMongoDBCollectionResourcePtrOutputWithContext(ctx context.Context) MongoDBCollectionResourcePtrOutput {
	return o.ApplyT(func(v MongoDBCollectionResource) *MongoDBCollectionResource {
		return &v
	}).(MongoDBCollectionResourcePtrOutput)
}

// Name of the Cosmos DB MongoDB collection
func (o MongoDBCollectionResourceOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v MongoDBCollectionResource) string { return v.Id }).(pulumi.StringOutput)
}

// List of index keys
func (o MongoDBCollectionResourceOutput) Indexes() MongoIndexArrayOutput {
	return o.ApplyT(func(v MongoDBCollectionResource) []MongoIndex { return v.Indexes }).(MongoIndexArrayOutput)
}

// A key-value pair of shard keys to be applied for the request.
func (o MongoDBCollectionResourceOutput) ShardKey() pulumi.StringMapOutput {
	return o.ApplyT(func(v MongoDBCollectionResource) map[string]string { return v.ShardKey }).(pulumi.StringMapOutput)
}

type MongoDBCollectionResourcePtrOutput struct{ *pulumi.OutputState }

func (MongoDBCollectionResourcePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MongoDBCollectionResource)(nil)).Elem()
}

func (o MongoDBCollectionResourcePtrOutput) ToMongoDBCollectionResourcePtrOutput() MongoDBCollectionResourcePtrOutput {
	return o
}

func (o MongoDBCollectionResourcePtrOutput) ToMongoDBCollectionResourcePtrOutputWithContext(ctx context.Context) MongoDBCollectionResourcePtrOutput {
	return o
}

func (o MongoDBCollectionResourcePtrOutput) Elem() MongoDBCollectionResourceOutput {
	return o.ApplyT(func(v *MongoDBCollectionResource) MongoDBCollectionResource { return *v }).(MongoDBCollectionResourceOutput)
}

// Name of the Cosmos DB MongoDB collection
func (o MongoDBCollectionResourcePtrOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MongoDBCollectionResource) *string {
		if v == nil {
			return nil
		}
		return &v.Id
	}).(pulumi.StringPtrOutput)
}

// List of index keys
func (o MongoDBCollectionResourcePtrOutput) Indexes() MongoIndexArrayOutput {
	return o.ApplyT(func(v *MongoDBCollectionResource) []MongoIndex {
		if v == nil {
			return nil
		}
		return v.Indexes
	}).(MongoIndexArrayOutput)
}

// A key-value pair of shard keys to be applied for the request.
func (o MongoDBCollectionResourcePtrOutput) ShardKey() pulumi.StringMapOutput {
	return o.ApplyT(func(v *MongoDBCollectionResource) map[string]string {
		if v == nil {
			return nil
		}
		return v.ShardKey
	}).(pulumi.StringMapOutput)
}

// Cosmos DB MongoDB database id object
type MongoDBDatabaseResource struct {
	// Name of the Cosmos DB MongoDB database
	Id string `pulumi:"id"`
}

// MongoDBDatabaseResourceInput is an input type that accepts MongoDBDatabaseResourceArgs and MongoDBDatabaseResourceOutput values.
// You can construct a concrete instance of `MongoDBDatabaseResourceInput` via:
//
//          MongoDBDatabaseResourceArgs{...}
type MongoDBDatabaseResourceInput interface {
	pulumi.Input

	ToMongoDBDatabaseResourceOutput() MongoDBDatabaseResourceOutput
	ToMongoDBDatabaseResourceOutputWithContext(context.Context) MongoDBDatabaseResourceOutput
}

// Cosmos DB MongoDB database id object
type MongoDBDatabaseResourceArgs struct {
	// Name of the Cosmos DB MongoDB database
	Id pulumi.StringInput `pulumi:"id"`
}

func (MongoDBDatabaseResourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MongoDBDatabaseResource)(nil)).Elem()
}

func (i MongoDBDatabaseResourceArgs) ToMongoDBDatabaseResourceOutput() MongoDBDatabaseResourceOutput {
	return i.ToMongoDBDatabaseResourceOutputWithContext(context.Background())
}

func (i MongoDBDatabaseResourceArgs) ToMongoDBDatabaseResourceOutputWithContext(ctx context.Context) MongoDBDatabaseResourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MongoDBDatabaseResourceOutput)
}

func (i MongoDBDatabaseResourceArgs) ToMongoDBDatabaseResourcePtrOutput() MongoDBDatabaseResourcePtrOutput {
	return i.ToMongoDBDatabaseResourcePtrOutputWithContext(context.Background())
}

func (i MongoDBDatabaseResourceArgs) ToMongoDBDatabaseResourcePtrOutputWithContext(ctx context.Context) MongoDBDatabaseResourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MongoDBDatabaseResourceOutput).ToMongoDBDatabaseResourcePtrOutputWithContext(ctx)
}

// MongoDBDatabaseResourcePtrInput is an input type that accepts MongoDBDatabaseResourceArgs, MongoDBDatabaseResourcePtr and MongoDBDatabaseResourcePtrOutput values.
// You can construct a concrete instance of `MongoDBDatabaseResourcePtrInput` via:
//
//          MongoDBDatabaseResourceArgs{...}
//
//  or:
//
//          nil
type MongoDBDatabaseResourcePtrInput interface {
	pulumi.Input

	ToMongoDBDatabaseResourcePtrOutput() MongoDBDatabaseResourcePtrOutput
	ToMongoDBDatabaseResourcePtrOutputWithContext(context.Context) MongoDBDatabaseResourcePtrOutput
}

type mongoDBDatabaseResourcePtrType MongoDBDatabaseResourceArgs

func MongoDBDatabaseResourcePtr(v *MongoDBDatabaseResourceArgs) MongoDBDatabaseResourcePtrInput {
	return (*mongoDBDatabaseResourcePtrType)(v)
}

func (*mongoDBDatabaseResourcePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**MongoDBDatabaseResource)(nil)).Elem()
}

func (i *mongoDBDatabaseResourcePtrType) ToMongoDBDatabaseResourcePtrOutput() MongoDBDatabaseResourcePtrOutput {
	return i.ToMongoDBDatabaseResourcePtrOutputWithContext(context.Background())
}

func (i *mongoDBDatabaseResourcePtrType) ToMongoDBDatabaseResourcePtrOutputWithContext(ctx context.Context) MongoDBDatabaseResourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MongoDBDatabaseResourcePtrOutput)
}

// Cosmos DB MongoDB database id object
type MongoDBDatabaseResourceOutput struct{ *pulumi.OutputState }

func (MongoDBDatabaseResourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MongoDBDatabaseResource)(nil)).Elem()
}

func (o MongoDBDatabaseResourceOutput) ToMongoDBDatabaseResourceOutput() MongoDBDatabaseResourceOutput {
	return o
}

func (o MongoDBDatabaseResourceOutput) ToMongoDBDatabaseResourceOutputWithContext(ctx context.Context) MongoDBDatabaseResourceOutput {
	return o
}

func (o MongoDBDatabaseResourceOutput) ToMongoDBDatabaseResourcePtrOutput() MongoDBDatabaseResourcePtrOutput {
	return o.ToMongoDBDatabaseResourcePtrOutputWithContext(context.Background())
}

func (o MongoDBDatabaseResourceOutput) ToMongoDBDatabaseResourcePtrOutputWithContext(ctx context.Context) MongoDBDatabaseResourcePtrOutput {
	return o.ApplyT(func(v MongoDBDatabaseResource) *MongoDBDatabaseResource {
		return &v
	}).(MongoDBDatabaseResourcePtrOutput)
}

// Name of the Cosmos DB MongoDB database
func (o MongoDBDatabaseResourceOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v MongoDBDatabaseResource) string { return v.Id }).(pulumi.StringOutput)
}

type MongoDBDatabaseResourcePtrOutput struct{ *pulumi.OutputState }

func (MongoDBDatabaseResourcePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MongoDBDatabaseResource)(nil)).Elem()
}

func (o MongoDBDatabaseResourcePtrOutput) ToMongoDBDatabaseResourcePtrOutput() MongoDBDatabaseResourcePtrOutput {
	return o
}

func (o MongoDBDatabaseResourcePtrOutput) ToMongoDBDatabaseResourcePtrOutputWithContext(ctx context.Context) MongoDBDatabaseResourcePtrOutput {
	return o
}

func (o MongoDBDatabaseResourcePtrOutput) Elem() MongoDBDatabaseResourceOutput {
	return o.ApplyT(func(v *MongoDBDatabaseResource) MongoDBDatabaseResource { return *v }).(MongoDBDatabaseResourceOutput)
}

// Name of the Cosmos DB MongoDB database
func (o MongoDBDatabaseResourcePtrOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MongoDBDatabaseResource) *string {
		if v == nil {
			return nil
		}
		return &v.Id
	}).(pulumi.StringPtrOutput)
}

// Cosmos DB MongoDB collection index key
type MongoIndex struct {
	// Cosmos DB MongoDB collection index keys
	Key *MongoIndexKeys `pulumi:"key"`
	// Cosmos DB MongoDB collection index key options
	Options *MongoIndexOptions `pulumi:"options"`
}

// MongoIndexInput is an input type that accepts MongoIndexArgs and MongoIndexOutput values.
// You can construct a concrete instance of `MongoIndexInput` via:
//
//          MongoIndexArgs{...}
type MongoIndexInput interface {
	pulumi.Input

	ToMongoIndexOutput() MongoIndexOutput
	ToMongoIndexOutputWithContext(context.Context) MongoIndexOutput
}

// Cosmos DB MongoDB collection index key
type MongoIndexArgs struct {
	// Cosmos DB MongoDB collection index keys
	Key MongoIndexKeysPtrInput `pulumi:"key"`
	// Cosmos DB MongoDB collection index key options
	Options MongoIndexOptionsPtrInput `pulumi:"options"`
}

func (MongoIndexArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MongoIndex)(nil)).Elem()
}

func (i MongoIndexArgs) ToMongoIndexOutput() MongoIndexOutput {
	return i.ToMongoIndexOutputWithContext(context.Background())
}

func (i MongoIndexArgs) ToMongoIndexOutputWithContext(ctx context.Context) MongoIndexOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MongoIndexOutput)
}

// MongoIndexArrayInput is an input type that accepts MongoIndexArray and MongoIndexArrayOutput values.
// You can construct a concrete instance of `MongoIndexArrayInput` via:
//
//          MongoIndexArray{ MongoIndexArgs{...} }
type MongoIndexArrayInput interface {
	pulumi.Input

	ToMongoIndexArrayOutput() MongoIndexArrayOutput
	ToMongoIndexArrayOutputWithContext(context.Context) MongoIndexArrayOutput
}

type MongoIndexArray []MongoIndexInput

func (MongoIndexArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MongoIndex)(nil)).Elem()
}

func (i MongoIndexArray) ToMongoIndexArrayOutput() MongoIndexArrayOutput {
	return i.ToMongoIndexArrayOutputWithContext(context.Background())
}

func (i MongoIndexArray) ToMongoIndexArrayOutputWithContext(ctx context.Context) MongoIndexArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MongoIndexArrayOutput)
}

// Cosmos DB MongoDB collection index key
type MongoIndexOutput struct{ *pulumi.OutputState }

func (MongoIndexOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MongoIndex)(nil)).Elem()
}

func (o MongoIndexOutput) ToMongoIndexOutput() MongoIndexOutput {
	return o
}

func (o MongoIndexOutput) ToMongoIndexOutputWithContext(ctx context.Context) MongoIndexOutput {
	return o
}

// Cosmos DB MongoDB collection index keys
func (o MongoIndexOutput) Key() MongoIndexKeysPtrOutput {
	return o.ApplyT(func(v MongoIndex) *MongoIndexKeys { return v.Key }).(MongoIndexKeysPtrOutput)
}

// Cosmos DB MongoDB collection index key options
func (o MongoIndexOutput) Options() MongoIndexOptionsPtrOutput {
	return o.ApplyT(func(v MongoIndex) *MongoIndexOptions { return v.Options }).(MongoIndexOptionsPtrOutput)
}

type MongoIndexArrayOutput struct{ *pulumi.OutputState }

func (MongoIndexArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MongoIndex)(nil)).Elem()
}

func (o MongoIndexArrayOutput) ToMongoIndexArrayOutput() MongoIndexArrayOutput {
	return o
}

func (o MongoIndexArrayOutput) ToMongoIndexArrayOutputWithContext(ctx context.Context) MongoIndexArrayOutput {
	return o
}

func (o MongoIndexArrayOutput) Index(i pulumi.IntInput) MongoIndexOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) MongoIndex {
		return vs[0].([]MongoIndex)[vs[1].(int)]
	}).(MongoIndexOutput)
}

// Cosmos DB MongoDB collection resource object
type MongoIndexKeys struct {
	// List of keys for each MongoDB collection in the Azure Cosmos DB service
	Keys []string `pulumi:"keys"`
}

// MongoIndexKeysInput is an input type that accepts MongoIndexKeysArgs and MongoIndexKeysOutput values.
// You can construct a concrete instance of `MongoIndexKeysInput` via:
//
//          MongoIndexKeysArgs{...}
type MongoIndexKeysInput interface {
	pulumi.Input

	ToMongoIndexKeysOutput() MongoIndexKeysOutput
	ToMongoIndexKeysOutputWithContext(context.Context) MongoIndexKeysOutput
}

// Cosmos DB MongoDB collection resource object
type MongoIndexKeysArgs struct {
	// List of keys for each MongoDB collection in the Azure Cosmos DB service
	Keys pulumi.StringArrayInput `pulumi:"keys"`
}

func (MongoIndexKeysArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MongoIndexKeys)(nil)).Elem()
}

func (i MongoIndexKeysArgs) ToMongoIndexKeysOutput() MongoIndexKeysOutput {
	return i.ToMongoIndexKeysOutputWithContext(context.Background())
}

func (i MongoIndexKeysArgs) ToMongoIndexKeysOutputWithContext(ctx context.Context) MongoIndexKeysOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MongoIndexKeysOutput)
}

func (i MongoIndexKeysArgs) ToMongoIndexKeysPtrOutput() MongoIndexKeysPtrOutput {
	return i.ToMongoIndexKeysPtrOutputWithContext(context.Background())
}

func (i MongoIndexKeysArgs) ToMongoIndexKeysPtrOutputWithContext(ctx context.Context) MongoIndexKeysPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MongoIndexKeysOutput).ToMongoIndexKeysPtrOutputWithContext(ctx)
}

// MongoIndexKeysPtrInput is an input type that accepts MongoIndexKeysArgs, MongoIndexKeysPtr and MongoIndexKeysPtrOutput values.
// You can construct a concrete instance of `MongoIndexKeysPtrInput` via:
//
//          MongoIndexKeysArgs{...}
//
//  or:
//
//          nil
type MongoIndexKeysPtrInput interface {
	pulumi.Input

	ToMongoIndexKeysPtrOutput() MongoIndexKeysPtrOutput
	ToMongoIndexKeysPtrOutputWithContext(context.Context) MongoIndexKeysPtrOutput
}

type mongoIndexKeysPtrType MongoIndexKeysArgs

func MongoIndexKeysPtr(v *MongoIndexKeysArgs) MongoIndexKeysPtrInput {
	return (*mongoIndexKeysPtrType)(v)
}

func (*mongoIndexKeysPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**MongoIndexKeys)(nil)).Elem()
}

func (i *mongoIndexKeysPtrType) ToMongoIndexKeysPtrOutput() MongoIndexKeysPtrOutput {
	return i.ToMongoIndexKeysPtrOutputWithContext(context.Background())
}

func (i *mongoIndexKeysPtrType) ToMongoIndexKeysPtrOutputWithContext(ctx context.Context) MongoIndexKeysPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MongoIndexKeysPtrOutput)
}

// Cosmos DB MongoDB collection resource object
type MongoIndexKeysOutput struct{ *pulumi.OutputState }

func (MongoIndexKeysOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MongoIndexKeys)(nil)).Elem()
}

func (o MongoIndexKeysOutput) ToMongoIndexKeysOutput() MongoIndexKeysOutput {
	return o
}

func (o MongoIndexKeysOutput) ToMongoIndexKeysOutputWithContext(ctx context.Context) MongoIndexKeysOutput {
	return o
}

func (o MongoIndexKeysOutput) ToMongoIndexKeysPtrOutput() MongoIndexKeysPtrOutput {
	return o.ToMongoIndexKeysPtrOutputWithContext(context.Background())
}

func (o MongoIndexKeysOutput) ToMongoIndexKeysPtrOutputWithContext(ctx context.Context) MongoIndexKeysPtrOutput {
	return o.ApplyT(func(v MongoIndexKeys) *MongoIndexKeys {
		return &v
	}).(MongoIndexKeysPtrOutput)
}

// List of keys for each MongoDB collection in the Azure Cosmos DB service
func (o MongoIndexKeysOutput) Keys() pulumi.StringArrayOutput {
	return o.ApplyT(func(v MongoIndexKeys) []string { return v.Keys }).(pulumi.StringArrayOutput)
}

type MongoIndexKeysPtrOutput struct{ *pulumi.OutputState }

func (MongoIndexKeysPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MongoIndexKeys)(nil)).Elem()
}

func (o MongoIndexKeysPtrOutput) ToMongoIndexKeysPtrOutput() MongoIndexKeysPtrOutput {
	return o
}

func (o MongoIndexKeysPtrOutput) ToMongoIndexKeysPtrOutputWithContext(ctx context.Context) MongoIndexKeysPtrOutput {
	return o
}

func (o MongoIndexKeysPtrOutput) Elem() MongoIndexKeysOutput {
	return o.ApplyT(func(v *MongoIndexKeys) MongoIndexKeys { return *v }).(MongoIndexKeysOutput)
}

// List of keys for each MongoDB collection in the Azure Cosmos DB service
func (o MongoIndexKeysPtrOutput) Keys() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *MongoIndexKeys) []string {
		if v == nil {
			return nil
		}
		return v.Keys
	}).(pulumi.StringArrayOutput)
}

// Cosmos DB MongoDB collection resource object
type MongoIndexKeysResponse struct {
	// List of keys for each MongoDB collection in the Azure Cosmos DB service
	Keys []string `pulumi:"keys"`
}

// MongoIndexKeysResponseInput is an input type that accepts MongoIndexKeysResponseArgs and MongoIndexKeysResponseOutput values.
// You can construct a concrete instance of `MongoIndexKeysResponseInput` via:
//
//          MongoIndexKeysResponseArgs{...}
type MongoIndexKeysResponseInput interface {
	pulumi.Input

	ToMongoIndexKeysResponseOutput() MongoIndexKeysResponseOutput
	ToMongoIndexKeysResponseOutputWithContext(context.Context) MongoIndexKeysResponseOutput
}

// Cosmos DB MongoDB collection resource object
type MongoIndexKeysResponseArgs struct {
	// List of keys for each MongoDB collection in the Azure Cosmos DB service
	Keys pulumi.StringArrayInput `pulumi:"keys"`
}

func (MongoIndexKeysResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MongoIndexKeysResponse)(nil)).Elem()
}

func (i MongoIndexKeysResponseArgs) ToMongoIndexKeysResponseOutput() MongoIndexKeysResponseOutput {
	return i.ToMongoIndexKeysResponseOutputWithContext(context.Background())
}

func (i MongoIndexKeysResponseArgs) ToMongoIndexKeysResponseOutputWithContext(ctx context.Context) MongoIndexKeysResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MongoIndexKeysResponseOutput)
}

func (i MongoIndexKeysResponseArgs) ToMongoIndexKeysResponsePtrOutput() MongoIndexKeysResponsePtrOutput {
	return i.ToMongoIndexKeysResponsePtrOutputWithContext(context.Background())
}

func (i MongoIndexKeysResponseArgs) ToMongoIndexKeysResponsePtrOutputWithContext(ctx context.Context) MongoIndexKeysResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MongoIndexKeysResponseOutput).ToMongoIndexKeysResponsePtrOutputWithContext(ctx)
}

// MongoIndexKeysResponsePtrInput is an input type that accepts MongoIndexKeysResponseArgs, MongoIndexKeysResponsePtr and MongoIndexKeysResponsePtrOutput values.
// You can construct a concrete instance of `MongoIndexKeysResponsePtrInput` via:
//
//          MongoIndexKeysResponseArgs{...}
//
//  or:
//
//          nil
type MongoIndexKeysResponsePtrInput interface {
	pulumi.Input

	ToMongoIndexKeysResponsePtrOutput() MongoIndexKeysResponsePtrOutput
	ToMongoIndexKeysResponsePtrOutputWithContext(context.Context) MongoIndexKeysResponsePtrOutput
}

type mongoIndexKeysResponsePtrType MongoIndexKeysResponseArgs

func MongoIndexKeysResponsePtr(v *MongoIndexKeysResponseArgs) MongoIndexKeysResponsePtrInput {
	return (*mongoIndexKeysResponsePtrType)(v)
}

func (*mongoIndexKeysResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**MongoIndexKeysResponse)(nil)).Elem()
}

func (i *mongoIndexKeysResponsePtrType) ToMongoIndexKeysResponsePtrOutput() MongoIndexKeysResponsePtrOutput {
	return i.ToMongoIndexKeysResponsePtrOutputWithContext(context.Background())
}

func (i *mongoIndexKeysResponsePtrType) ToMongoIndexKeysResponsePtrOutputWithContext(ctx context.Context) MongoIndexKeysResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MongoIndexKeysResponsePtrOutput)
}

// Cosmos DB MongoDB collection resource object
type MongoIndexKeysResponseOutput struct{ *pulumi.OutputState }

func (MongoIndexKeysResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MongoIndexKeysResponse)(nil)).Elem()
}

func (o MongoIndexKeysResponseOutput) ToMongoIndexKeysResponseOutput() MongoIndexKeysResponseOutput {
	return o
}

func (o MongoIndexKeysResponseOutput) ToMongoIndexKeysResponseOutputWithContext(ctx context.Context) MongoIndexKeysResponseOutput {
	return o
}

func (o MongoIndexKeysResponseOutput) ToMongoIndexKeysResponsePtrOutput() MongoIndexKeysResponsePtrOutput {
	return o.ToMongoIndexKeysResponsePtrOutputWithContext(context.Background())
}

func (o MongoIndexKeysResponseOutput) ToMongoIndexKeysResponsePtrOutputWithContext(ctx context.Context) MongoIndexKeysResponsePtrOutput {
	return o.ApplyT(func(v MongoIndexKeysResponse) *MongoIndexKeysResponse {
		return &v
	}).(MongoIndexKeysResponsePtrOutput)
}

// List of keys for each MongoDB collection in the Azure Cosmos DB service
func (o MongoIndexKeysResponseOutput) Keys() pulumi.StringArrayOutput {
	return o.ApplyT(func(v MongoIndexKeysResponse) []string { return v.Keys }).(pulumi.StringArrayOutput)
}

type MongoIndexKeysResponsePtrOutput struct{ *pulumi.OutputState }

func (MongoIndexKeysResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MongoIndexKeysResponse)(nil)).Elem()
}

func (o MongoIndexKeysResponsePtrOutput) ToMongoIndexKeysResponsePtrOutput() MongoIndexKeysResponsePtrOutput {
	return o
}

func (o MongoIndexKeysResponsePtrOutput) ToMongoIndexKeysResponsePtrOutputWithContext(ctx context.Context) MongoIndexKeysResponsePtrOutput {
	return o
}

func (o MongoIndexKeysResponsePtrOutput) Elem() MongoIndexKeysResponseOutput {
	return o.ApplyT(func(v *MongoIndexKeysResponse) MongoIndexKeysResponse { return *v }).(MongoIndexKeysResponseOutput)
}

// List of keys for each MongoDB collection in the Azure Cosmos DB service
func (o MongoIndexKeysResponsePtrOutput) Keys() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *MongoIndexKeysResponse) []string {
		if v == nil {
			return nil
		}
		return v.Keys
	}).(pulumi.StringArrayOutput)
}

// Cosmos DB MongoDB collection index options
type MongoIndexOptions struct {
	// Expire after seconds
	ExpireAfterSeconds *int `pulumi:"expireAfterSeconds"`
	// Is unique or not
	Unique *bool `pulumi:"unique"`
}

// MongoIndexOptionsInput is an input type that accepts MongoIndexOptionsArgs and MongoIndexOptionsOutput values.
// You can construct a concrete instance of `MongoIndexOptionsInput` via:
//
//          MongoIndexOptionsArgs{...}
type MongoIndexOptionsInput interface {
	pulumi.Input

	ToMongoIndexOptionsOutput() MongoIndexOptionsOutput
	ToMongoIndexOptionsOutputWithContext(context.Context) MongoIndexOptionsOutput
}

// Cosmos DB MongoDB collection index options
type MongoIndexOptionsArgs struct {
	// Expire after seconds
	ExpireAfterSeconds pulumi.IntPtrInput `pulumi:"expireAfterSeconds"`
	// Is unique or not
	Unique pulumi.BoolPtrInput `pulumi:"unique"`
}

func (MongoIndexOptionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MongoIndexOptions)(nil)).Elem()
}

func (i MongoIndexOptionsArgs) ToMongoIndexOptionsOutput() MongoIndexOptionsOutput {
	return i.ToMongoIndexOptionsOutputWithContext(context.Background())
}

func (i MongoIndexOptionsArgs) ToMongoIndexOptionsOutputWithContext(ctx context.Context) MongoIndexOptionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MongoIndexOptionsOutput)
}

func (i MongoIndexOptionsArgs) ToMongoIndexOptionsPtrOutput() MongoIndexOptionsPtrOutput {
	return i.ToMongoIndexOptionsPtrOutputWithContext(context.Background())
}

func (i MongoIndexOptionsArgs) ToMongoIndexOptionsPtrOutputWithContext(ctx context.Context) MongoIndexOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MongoIndexOptionsOutput).ToMongoIndexOptionsPtrOutputWithContext(ctx)
}

// MongoIndexOptionsPtrInput is an input type that accepts MongoIndexOptionsArgs, MongoIndexOptionsPtr and MongoIndexOptionsPtrOutput values.
// You can construct a concrete instance of `MongoIndexOptionsPtrInput` via:
//
//          MongoIndexOptionsArgs{...}
//
//  or:
//
//          nil
type MongoIndexOptionsPtrInput interface {
	pulumi.Input

	ToMongoIndexOptionsPtrOutput() MongoIndexOptionsPtrOutput
	ToMongoIndexOptionsPtrOutputWithContext(context.Context) MongoIndexOptionsPtrOutput
}

type mongoIndexOptionsPtrType MongoIndexOptionsArgs

func MongoIndexOptionsPtr(v *MongoIndexOptionsArgs) MongoIndexOptionsPtrInput {
	return (*mongoIndexOptionsPtrType)(v)
}

func (*mongoIndexOptionsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**MongoIndexOptions)(nil)).Elem()
}

func (i *mongoIndexOptionsPtrType) ToMongoIndexOptionsPtrOutput() MongoIndexOptionsPtrOutput {
	return i.ToMongoIndexOptionsPtrOutputWithContext(context.Background())
}

func (i *mongoIndexOptionsPtrType) ToMongoIndexOptionsPtrOutputWithContext(ctx context.Context) MongoIndexOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MongoIndexOptionsPtrOutput)
}

// Cosmos DB MongoDB collection index options
type MongoIndexOptionsOutput struct{ *pulumi.OutputState }

func (MongoIndexOptionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MongoIndexOptions)(nil)).Elem()
}

func (o MongoIndexOptionsOutput) ToMongoIndexOptionsOutput() MongoIndexOptionsOutput {
	return o
}

func (o MongoIndexOptionsOutput) ToMongoIndexOptionsOutputWithContext(ctx context.Context) MongoIndexOptionsOutput {
	return o
}

func (o MongoIndexOptionsOutput) ToMongoIndexOptionsPtrOutput() MongoIndexOptionsPtrOutput {
	return o.ToMongoIndexOptionsPtrOutputWithContext(context.Background())
}

func (o MongoIndexOptionsOutput) ToMongoIndexOptionsPtrOutputWithContext(ctx context.Context) MongoIndexOptionsPtrOutput {
	return o.ApplyT(func(v MongoIndexOptions) *MongoIndexOptions {
		return &v
	}).(MongoIndexOptionsPtrOutput)
}

// Expire after seconds
func (o MongoIndexOptionsOutput) ExpireAfterSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v MongoIndexOptions) *int { return v.ExpireAfterSeconds }).(pulumi.IntPtrOutput)
}

// Is unique or not
func (o MongoIndexOptionsOutput) Unique() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v MongoIndexOptions) *bool { return v.Unique }).(pulumi.BoolPtrOutput)
}

type MongoIndexOptionsPtrOutput struct{ *pulumi.OutputState }

func (MongoIndexOptionsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MongoIndexOptions)(nil)).Elem()
}

func (o MongoIndexOptionsPtrOutput) ToMongoIndexOptionsPtrOutput() MongoIndexOptionsPtrOutput {
	return o
}

func (o MongoIndexOptionsPtrOutput) ToMongoIndexOptionsPtrOutputWithContext(ctx context.Context) MongoIndexOptionsPtrOutput {
	return o
}

func (o MongoIndexOptionsPtrOutput) Elem() MongoIndexOptionsOutput {
	return o.ApplyT(func(v *MongoIndexOptions) MongoIndexOptions { return *v }).(MongoIndexOptionsOutput)
}

// Expire after seconds
func (o MongoIndexOptionsPtrOutput) ExpireAfterSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *MongoIndexOptions) *int {
		if v == nil {
			return nil
		}
		return v.ExpireAfterSeconds
	}).(pulumi.IntPtrOutput)
}

// Is unique or not
func (o MongoIndexOptionsPtrOutput) Unique() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *MongoIndexOptions) *bool {
		if v == nil {
			return nil
		}
		return v.Unique
	}).(pulumi.BoolPtrOutput)
}

// Cosmos DB MongoDB collection index options
type MongoIndexOptionsResponse struct {
	// Expire after seconds
	ExpireAfterSeconds *int `pulumi:"expireAfterSeconds"`
	// Is unique or not
	Unique *bool `pulumi:"unique"`
}

// MongoIndexOptionsResponseInput is an input type that accepts MongoIndexOptionsResponseArgs and MongoIndexOptionsResponseOutput values.
// You can construct a concrete instance of `MongoIndexOptionsResponseInput` via:
//
//          MongoIndexOptionsResponseArgs{...}
type MongoIndexOptionsResponseInput interface {
	pulumi.Input

	ToMongoIndexOptionsResponseOutput() MongoIndexOptionsResponseOutput
	ToMongoIndexOptionsResponseOutputWithContext(context.Context) MongoIndexOptionsResponseOutput
}

// Cosmos DB MongoDB collection index options
type MongoIndexOptionsResponseArgs struct {
	// Expire after seconds
	ExpireAfterSeconds pulumi.IntPtrInput `pulumi:"expireAfterSeconds"`
	// Is unique or not
	Unique pulumi.BoolPtrInput `pulumi:"unique"`
}

func (MongoIndexOptionsResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MongoIndexOptionsResponse)(nil)).Elem()
}

func (i MongoIndexOptionsResponseArgs) ToMongoIndexOptionsResponseOutput() MongoIndexOptionsResponseOutput {
	return i.ToMongoIndexOptionsResponseOutputWithContext(context.Background())
}

func (i MongoIndexOptionsResponseArgs) ToMongoIndexOptionsResponseOutputWithContext(ctx context.Context) MongoIndexOptionsResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MongoIndexOptionsResponseOutput)
}

func (i MongoIndexOptionsResponseArgs) ToMongoIndexOptionsResponsePtrOutput() MongoIndexOptionsResponsePtrOutput {
	return i.ToMongoIndexOptionsResponsePtrOutputWithContext(context.Background())
}

func (i MongoIndexOptionsResponseArgs) ToMongoIndexOptionsResponsePtrOutputWithContext(ctx context.Context) MongoIndexOptionsResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MongoIndexOptionsResponseOutput).ToMongoIndexOptionsResponsePtrOutputWithContext(ctx)
}

// MongoIndexOptionsResponsePtrInput is an input type that accepts MongoIndexOptionsResponseArgs, MongoIndexOptionsResponsePtr and MongoIndexOptionsResponsePtrOutput values.
// You can construct a concrete instance of `MongoIndexOptionsResponsePtrInput` via:
//
//          MongoIndexOptionsResponseArgs{...}
//
//  or:
//
//          nil
type MongoIndexOptionsResponsePtrInput interface {
	pulumi.Input

	ToMongoIndexOptionsResponsePtrOutput() MongoIndexOptionsResponsePtrOutput
	ToMongoIndexOptionsResponsePtrOutputWithContext(context.Context) MongoIndexOptionsResponsePtrOutput
}

type mongoIndexOptionsResponsePtrType MongoIndexOptionsResponseArgs

func MongoIndexOptionsResponsePtr(v *MongoIndexOptionsResponseArgs) MongoIndexOptionsResponsePtrInput {
	return (*mongoIndexOptionsResponsePtrType)(v)
}

func (*mongoIndexOptionsResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**MongoIndexOptionsResponse)(nil)).Elem()
}

func (i *mongoIndexOptionsResponsePtrType) ToMongoIndexOptionsResponsePtrOutput() MongoIndexOptionsResponsePtrOutput {
	return i.ToMongoIndexOptionsResponsePtrOutputWithContext(context.Background())
}

func (i *mongoIndexOptionsResponsePtrType) ToMongoIndexOptionsResponsePtrOutputWithContext(ctx context.Context) MongoIndexOptionsResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MongoIndexOptionsResponsePtrOutput)
}

// Cosmos DB MongoDB collection index options
type MongoIndexOptionsResponseOutput struct{ *pulumi.OutputState }

func (MongoIndexOptionsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MongoIndexOptionsResponse)(nil)).Elem()
}

func (o MongoIndexOptionsResponseOutput) ToMongoIndexOptionsResponseOutput() MongoIndexOptionsResponseOutput {
	return o
}

func (o MongoIndexOptionsResponseOutput) ToMongoIndexOptionsResponseOutputWithContext(ctx context.Context) MongoIndexOptionsResponseOutput {
	return o
}

func (o MongoIndexOptionsResponseOutput) ToMongoIndexOptionsResponsePtrOutput() MongoIndexOptionsResponsePtrOutput {
	return o.ToMongoIndexOptionsResponsePtrOutputWithContext(context.Background())
}

func (o MongoIndexOptionsResponseOutput) ToMongoIndexOptionsResponsePtrOutputWithContext(ctx context.Context) MongoIndexOptionsResponsePtrOutput {
	return o.ApplyT(func(v MongoIndexOptionsResponse) *MongoIndexOptionsResponse {
		return &v
	}).(MongoIndexOptionsResponsePtrOutput)
}

// Expire after seconds
func (o MongoIndexOptionsResponseOutput) ExpireAfterSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v MongoIndexOptionsResponse) *int { return v.ExpireAfterSeconds }).(pulumi.IntPtrOutput)
}

// Is unique or not
func (o MongoIndexOptionsResponseOutput) Unique() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v MongoIndexOptionsResponse) *bool { return v.Unique }).(pulumi.BoolPtrOutput)
}

type MongoIndexOptionsResponsePtrOutput struct{ *pulumi.OutputState }

func (MongoIndexOptionsResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MongoIndexOptionsResponse)(nil)).Elem()
}

func (o MongoIndexOptionsResponsePtrOutput) ToMongoIndexOptionsResponsePtrOutput() MongoIndexOptionsResponsePtrOutput {
	return o
}

func (o MongoIndexOptionsResponsePtrOutput) ToMongoIndexOptionsResponsePtrOutputWithContext(ctx context.Context) MongoIndexOptionsResponsePtrOutput {
	return o
}

func (o MongoIndexOptionsResponsePtrOutput) Elem() MongoIndexOptionsResponseOutput {
	return o.ApplyT(func(v *MongoIndexOptionsResponse) MongoIndexOptionsResponse { return *v }).(MongoIndexOptionsResponseOutput)
}

// Expire after seconds
func (o MongoIndexOptionsResponsePtrOutput) ExpireAfterSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *MongoIndexOptionsResponse) *int {
		if v == nil {
			return nil
		}
		return v.ExpireAfterSeconds
	}).(pulumi.IntPtrOutput)
}

// Is unique or not
func (o MongoIndexOptionsResponsePtrOutput) Unique() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *MongoIndexOptionsResponse) *bool {
		if v == nil {
			return nil
		}
		return v.Unique
	}).(pulumi.BoolPtrOutput)
}

// Cosmos DB MongoDB collection index key
type MongoIndexResponse struct {
	// Cosmos DB MongoDB collection index keys
	Key *MongoIndexKeysResponse `pulumi:"key"`
	// Cosmos DB MongoDB collection index key options
	Options *MongoIndexOptionsResponse `pulumi:"options"`
}

// MongoIndexResponseInput is an input type that accepts MongoIndexResponseArgs and MongoIndexResponseOutput values.
// You can construct a concrete instance of `MongoIndexResponseInput` via:
//
//          MongoIndexResponseArgs{...}
type MongoIndexResponseInput interface {
	pulumi.Input

	ToMongoIndexResponseOutput() MongoIndexResponseOutput
	ToMongoIndexResponseOutputWithContext(context.Context) MongoIndexResponseOutput
}

// Cosmos DB MongoDB collection index key
type MongoIndexResponseArgs struct {
	// Cosmos DB MongoDB collection index keys
	Key MongoIndexKeysResponsePtrInput `pulumi:"key"`
	// Cosmos DB MongoDB collection index key options
	Options MongoIndexOptionsResponsePtrInput `pulumi:"options"`
}

func (MongoIndexResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MongoIndexResponse)(nil)).Elem()
}

func (i MongoIndexResponseArgs) ToMongoIndexResponseOutput() MongoIndexResponseOutput {
	return i.ToMongoIndexResponseOutputWithContext(context.Background())
}

func (i MongoIndexResponseArgs) ToMongoIndexResponseOutputWithContext(ctx context.Context) MongoIndexResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MongoIndexResponseOutput)
}

// MongoIndexResponseArrayInput is an input type that accepts MongoIndexResponseArray and MongoIndexResponseArrayOutput values.
// You can construct a concrete instance of `MongoIndexResponseArrayInput` via:
//
//          MongoIndexResponseArray{ MongoIndexResponseArgs{...} }
type MongoIndexResponseArrayInput interface {
	pulumi.Input

	ToMongoIndexResponseArrayOutput() MongoIndexResponseArrayOutput
	ToMongoIndexResponseArrayOutputWithContext(context.Context) MongoIndexResponseArrayOutput
}

type MongoIndexResponseArray []MongoIndexResponseInput

func (MongoIndexResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MongoIndexResponse)(nil)).Elem()
}

func (i MongoIndexResponseArray) ToMongoIndexResponseArrayOutput() MongoIndexResponseArrayOutput {
	return i.ToMongoIndexResponseArrayOutputWithContext(context.Background())
}

func (i MongoIndexResponseArray) ToMongoIndexResponseArrayOutputWithContext(ctx context.Context) MongoIndexResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MongoIndexResponseArrayOutput)
}

// Cosmos DB MongoDB collection index key
type MongoIndexResponseOutput struct{ *pulumi.OutputState }

func (MongoIndexResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MongoIndexResponse)(nil)).Elem()
}

func (o MongoIndexResponseOutput) ToMongoIndexResponseOutput() MongoIndexResponseOutput {
	return o
}

func (o MongoIndexResponseOutput) ToMongoIndexResponseOutputWithContext(ctx context.Context) MongoIndexResponseOutput {
	return o
}

// Cosmos DB MongoDB collection index keys
func (o MongoIndexResponseOutput) Key() MongoIndexKeysResponsePtrOutput {
	return o.ApplyT(func(v MongoIndexResponse) *MongoIndexKeysResponse { return v.Key }).(MongoIndexKeysResponsePtrOutput)
}

// Cosmos DB MongoDB collection index key options
func (o MongoIndexResponseOutput) Options() MongoIndexOptionsResponsePtrOutput {
	return o.ApplyT(func(v MongoIndexResponse) *MongoIndexOptionsResponse { return v.Options }).(MongoIndexOptionsResponsePtrOutput)
}

type MongoIndexResponseArrayOutput struct{ *pulumi.OutputState }

func (MongoIndexResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MongoIndexResponse)(nil)).Elem()
}

func (o MongoIndexResponseArrayOutput) ToMongoIndexResponseArrayOutput() MongoIndexResponseArrayOutput {
	return o
}

func (o MongoIndexResponseArrayOutput) ToMongoIndexResponseArrayOutputWithContext(ctx context.Context) MongoIndexResponseArrayOutput {
	return o
}

func (o MongoIndexResponseArrayOutput) Index(i pulumi.IntInput) MongoIndexResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) MongoIndexResponse {
		return vs[0].([]MongoIndexResponse)[vs[1].(int)]
	}).(MongoIndexResponseOutput)
}

// Cosmos DB SQL container resource object
type SqlContainerResource struct {
	// The conflict resolution policy for the container.
	ConflictResolutionPolicy *ConflictResolutionPolicy `pulumi:"conflictResolutionPolicy"`
	// Default time to live
	DefaultTtl *int `pulumi:"defaultTtl"`
	// Name of the Cosmos DB SQL container
	Id string `pulumi:"id"`
	// The configuration of the indexing policy. By default, the indexing is automatic for all document paths within the container
	IndexingPolicy *IndexingPolicy `pulumi:"indexingPolicy"`
	// The configuration of the partition key to be used for partitioning data into multiple partitions
	PartitionKey *ContainerPartitionKey `pulumi:"partitionKey"`
	// The unique key policy configuration for specifying uniqueness constraints on documents in the collection in the Azure Cosmos DB service.
	UniqueKeyPolicy *UniqueKeyPolicy `pulumi:"uniqueKeyPolicy"`
}

// SqlContainerResourceInput is an input type that accepts SqlContainerResourceArgs and SqlContainerResourceOutput values.
// You can construct a concrete instance of `SqlContainerResourceInput` via:
//
//          SqlContainerResourceArgs{...}
type SqlContainerResourceInput interface {
	pulumi.Input

	ToSqlContainerResourceOutput() SqlContainerResourceOutput
	ToSqlContainerResourceOutputWithContext(context.Context) SqlContainerResourceOutput
}

// Cosmos DB SQL container resource object
type SqlContainerResourceArgs struct {
	// The conflict resolution policy for the container.
	ConflictResolutionPolicy ConflictResolutionPolicyPtrInput `pulumi:"conflictResolutionPolicy"`
	// Default time to live
	DefaultTtl pulumi.IntPtrInput `pulumi:"defaultTtl"`
	// Name of the Cosmos DB SQL container
	Id pulumi.StringInput `pulumi:"id"`
	// The configuration of the indexing policy. By default, the indexing is automatic for all document paths within the container
	IndexingPolicy IndexingPolicyPtrInput `pulumi:"indexingPolicy"`
	// The configuration of the partition key to be used for partitioning data into multiple partitions
	PartitionKey ContainerPartitionKeyPtrInput `pulumi:"partitionKey"`
	// The unique key policy configuration for specifying uniqueness constraints on documents in the collection in the Azure Cosmos DB service.
	UniqueKeyPolicy UniqueKeyPolicyPtrInput `pulumi:"uniqueKeyPolicy"`
}

func (SqlContainerResourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SqlContainerResource)(nil)).Elem()
}

func (i SqlContainerResourceArgs) ToSqlContainerResourceOutput() SqlContainerResourceOutput {
	return i.ToSqlContainerResourceOutputWithContext(context.Background())
}

func (i SqlContainerResourceArgs) ToSqlContainerResourceOutputWithContext(ctx context.Context) SqlContainerResourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SqlContainerResourceOutput)
}

func (i SqlContainerResourceArgs) ToSqlContainerResourcePtrOutput() SqlContainerResourcePtrOutput {
	return i.ToSqlContainerResourcePtrOutputWithContext(context.Background())
}

func (i SqlContainerResourceArgs) ToSqlContainerResourcePtrOutputWithContext(ctx context.Context) SqlContainerResourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SqlContainerResourceOutput).ToSqlContainerResourcePtrOutputWithContext(ctx)
}

// SqlContainerResourcePtrInput is an input type that accepts SqlContainerResourceArgs, SqlContainerResourcePtr and SqlContainerResourcePtrOutput values.
// You can construct a concrete instance of `SqlContainerResourcePtrInput` via:
//
//          SqlContainerResourceArgs{...}
//
//  or:
//
//          nil
type SqlContainerResourcePtrInput interface {
	pulumi.Input

	ToSqlContainerResourcePtrOutput() SqlContainerResourcePtrOutput
	ToSqlContainerResourcePtrOutputWithContext(context.Context) SqlContainerResourcePtrOutput
}

type sqlContainerResourcePtrType SqlContainerResourceArgs

func SqlContainerResourcePtr(v *SqlContainerResourceArgs) SqlContainerResourcePtrInput {
	return (*sqlContainerResourcePtrType)(v)
}

func (*sqlContainerResourcePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SqlContainerResource)(nil)).Elem()
}

func (i *sqlContainerResourcePtrType) ToSqlContainerResourcePtrOutput() SqlContainerResourcePtrOutput {
	return i.ToSqlContainerResourcePtrOutputWithContext(context.Background())
}

func (i *sqlContainerResourcePtrType) ToSqlContainerResourcePtrOutputWithContext(ctx context.Context) SqlContainerResourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SqlContainerResourcePtrOutput)
}

// Cosmos DB SQL container resource object
type SqlContainerResourceOutput struct{ *pulumi.OutputState }

func (SqlContainerResourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SqlContainerResource)(nil)).Elem()
}

func (o SqlContainerResourceOutput) ToSqlContainerResourceOutput() SqlContainerResourceOutput {
	return o
}

func (o SqlContainerResourceOutput) ToSqlContainerResourceOutputWithContext(ctx context.Context) SqlContainerResourceOutput {
	return o
}

func (o SqlContainerResourceOutput) ToSqlContainerResourcePtrOutput() SqlContainerResourcePtrOutput {
	return o.ToSqlContainerResourcePtrOutputWithContext(context.Background())
}

func (o SqlContainerResourceOutput) ToSqlContainerResourcePtrOutputWithContext(ctx context.Context) SqlContainerResourcePtrOutput {
	return o.ApplyT(func(v SqlContainerResource) *SqlContainerResource {
		return &v
	}).(SqlContainerResourcePtrOutput)
}

// The conflict resolution policy for the container.
func (o SqlContainerResourceOutput) ConflictResolutionPolicy() ConflictResolutionPolicyPtrOutput {
	return o.ApplyT(func(v SqlContainerResource) *ConflictResolutionPolicy { return v.ConflictResolutionPolicy }).(ConflictResolutionPolicyPtrOutput)
}

// Default time to live
func (o SqlContainerResourceOutput) DefaultTtl() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SqlContainerResource) *int { return v.DefaultTtl }).(pulumi.IntPtrOutput)
}

// Name of the Cosmos DB SQL container
func (o SqlContainerResourceOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v SqlContainerResource) string { return v.Id }).(pulumi.StringOutput)
}

// The configuration of the indexing policy. By default, the indexing is automatic for all document paths within the container
func (o SqlContainerResourceOutput) IndexingPolicy() IndexingPolicyPtrOutput {
	return o.ApplyT(func(v SqlContainerResource) *IndexingPolicy { return v.IndexingPolicy }).(IndexingPolicyPtrOutput)
}

// The configuration of the partition key to be used for partitioning data into multiple partitions
func (o SqlContainerResourceOutput) PartitionKey() ContainerPartitionKeyPtrOutput {
	return o.ApplyT(func(v SqlContainerResource) *ContainerPartitionKey { return v.PartitionKey }).(ContainerPartitionKeyPtrOutput)
}

// The unique key policy configuration for specifying uniqueness constraints on documents in the collection in the Azure Cosmos DB service.
func (o SqlContainerResourceOutput) UniqueKeyPolicy() UniqueKeyPolicyPtrOutput {
	return o.ApplyT(func(v SqlContainerResource) *UniqueKeyPolicy { return v.UniqueKeyPolicy }).(UniqueKeyPolicyPtrOutput)
}

type SqlContainerResourcePtrOutput struct{ *pulumi.OutputState }

func (SqlContainerResourcePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SqlContainerResource)(nil)).Elem()
}

func (o SqlContainerResourcePtrOutput) ToSqlContainerResourcePtrOutput() SqlContainerResourcePtrOutput {
	return o
}

func (o SqlContainerResourcePtrOutput) ToSqlContainerResourcePtrOutputWithContext(ctx context.Context) SqlContainerResourcePtrOutput {
	return o
}

func (o SqlContainerResourcePtrOutput) Elem() SqlContainerResourceOutput {
	return o.ApplyT(func(v *SqlContainerResource) SqlContainerResource { return *v }).(SqlContainerResourceOutput)
}

// The conflict resolution policy for the container.
func (o SqlContainerResourcePtrOutput) ConflictResolutionPolicy() ConflictResolutionPolicyPtrOutput {
	return o.ApplyT(func(v *SqlContainerResource) *ConflictResolutionPolicy {
		if v == nil {
			return nil
		}
		return v.ConflictResolutionPolicy
	}).(ConflictResolutionPolicyPtrOutput)
}

// Default time to live
func (o SqlContainerResourcePtrOutput) DefaultTtl() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SqlContainerResource) *int {
		if v == nil {
			return nil
		}
		return v.DefaultTtl
	}).(pulumi.IntPtrOutput)
}

// Name of the Cosmos DB SQL container
func (o SqlContainerResourcePtrOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SqlContainerResource) *string {
		if v == nil {
			return nil
		}
		return &v.Id
	}).(pulumi.StringPtrOutput)
}

// The configuration of the indexing policy. By default, the indexing is automatic for all document paths within the container
func (o SqlContainerResourcePtrOutput) IndexingPolicy() IndexingPolicyPtrOutput {
	return o.ApplyT(func(v *SqlContainerResource) *IndexingPolicy {
		if v == nil {
			return nil
		}
		return v.IndexingPolicy
	}).(IndexingPolicyPtrOutput)
}

// The configuration of the partition key to be used for partitioning data into multiple partitions
func (o SqlContainerResourcePtrOutput) PartitionKey() ContainerPartitionKeyPtrOutput {
	return o.ApplyT(func(v *SqlContainerResource) *ContainerPartitionKey {
		if v == nil {
			return nil
		}
		return v.PartitionKey
	}).(ContainerPartitionKeyPtrOutput)
}

// The unique key policy configuration for specifying uniqueness constraints on documents in the collection in the Azure Cosmos DB service.
func (o SqlContainerResourcePtrOutput) UniqueKeyPolicy() UniqueKeyPolicyPtrOutput {
	return o.ApplyT(func(v *SqlContainerResource) *UniqueKeyPolicy {
		if v == nil {
			return nil
		}
		return v.UniqueKeyPolicy
	}).(UniqueKeyPolicyPtrOutput)
}

// Cosmos DB SQL database id object
type SqlDatabaseResource struct {
	// Name of the Cosmos DB SQL database
	Id string `pulumi:"id"`
}

// SqlDatabaseResourceInput is an input type that accepts SqlDatabaseResourceArgs and SqlDatabaseResourceOutput values.
// You can construct a concrete instance of `SqlDatabaseResourceInput` via:
//
//          SqlDatabaseResourceArgs{...}
type SqlDatabaseResourceInput interface {
	pulumi.Input

	ToSqlDatabaseResourceOutput() SqlDatabaseResourceOutput
	ToSqlDatabaseResourceOutputWithContext(context.Context) SqlDatabaseResourceOutput
}

// Cosmos DB SQL database id object
type SqlDatabaseResourceArgs struct {
	// Name of the Cosmos DB SQL database
	Id pulumi.StringInput `pulumi:"id"`
}

func (SqlDatabaseResourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SqlDatabaseResource)(nil)).Elem()
}

func (i SqlDatabaseResourceArgs) ToSqlDatabaseResourceOutput() SqlDatabaseResourceOutput {
	return i.ToSqlDatabaseResourceOutputWithContext(context.Background())
}

func (i SqlDatabaseResourceArgs) ToSqlDatabaseResourceOutputWithContext(ctx context.Context) SqlDatabaseResourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SqlDatabaseResourceOutput)
}

func (i SqlDatabaseResourceArgs) ToSqlDatabaseResourcePtrOutput() SqlDatabaseResourcePtrOutput {
	return i.ToSqlDatabaseResourcePtrOutputWithContext(context.Background())
}

func (i SqlDatabaseResourceArgs) ToSqlDatabaseResourcePtrOutputWithContext(ctx context.Context) SqlDatabaseResourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SqlDatabaseResourceOutput).ToSqlDatabaseResourcePtrOutputWithContext(ctx)
}

// SqlDatabaseResourcePtrInput is an input type that accepts SqlDatabaseResourceArgs, SqlDatabaseResourcePtr and SqlDatabaseResourcePtrOutput values.
// You can construct a concrete instance of `SqlDatabaseResourcePtrInput` via:
//
//          SqlDatabaseResourceArgs{...}
//
//  or:
//
//          nil
type SqlDatabaseResourcePtrInput interface {
	pulumi.Input

	ToSqlDatabaseResourcePtrOutput() SqlDatabaseResourcePtrOutput
	ToSqlDatabaseResourcePtrOutputWithContext(context.Context) SqlDatabaseResourcePtrOutput
}

type sqlDatabaseResourcePtrType SqlDatabaseResourceArgs

func SqlDatabaseResourcePtr(v *SqlDatabaseResourceArgs) SqlDatabaseResourcePtrInput {
	return (*sqlDatabaseResourcePtrType)(v)
}

func (*sqlDatabaseResourcePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SqlDatabaseResource)(nil)).Elem()
}

func (i *sqlDatabaseResourcePtrType) ToSqlDatabaseResourcePtrOutput() SqlDatabaseResourcePtrOutput {
	return i.ToSqlDatabaseResourcePtrOutputWithContext(context.Background())
}

func (i *sqlDatabaseResourcePtrType) ToSqlDatabaseResourcePtrOutputWithContext(ctx context.Context) SqlDatabaseResourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SqlDatabaseResourcePtrOutput)
}

// Cosmos DB SQL database id object
type SqlDatabaseResourceOutput struct{ *pulumi.OutputState }

func (SqlDatabaseResourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SqlDatabaseResource)(nil)).Elem()
}

func (o SqlDatabaseResourceOutput) ToSqlDatabaseResourceOutput() SqlDatabaseResourceOutput {
	return o
}

func (o SqlDatabaseResourceOutput) ToSqlDatabaseResourceOutputWithContext(ctx context.Context) SqlDatabaseResourceOutput {
	return o
}

func (o SqlDatabaseResourceOutput) ToSqlDatabaseResourcePtrOutput() SqlDatabaseResourcePtrOutput {
	return o.ToSqlDatabaseResourcePtrOutputWithContext(context.Background())
}

func (o SqlDatabaseResourceOutput) ToSqlDatabaseResourcePtrOutputWithContext(ctx context.Context) SqlDatabaseResourcePtrOutput {
	return o.ApplyT(func(v SqlDatabaseResource) *SqlDatabaseResource {
		return &v
	}).(SqlDatabaseResourcePtrOutput)
}

// Name of the Cosmos DB SQL database
func (o SqlDatabaseResourceOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v SqlDatabaseResource) string { return v.Id }).(pulumi.StringOutput)
}

type SqlDatabaseResourcePtrOutput struct{ *pulumi.OutputState }

func (SqlDatabaseResourcePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SqlDatabaseResource)(nil)).Elem()
}

func (o SqlDatabaseResourcePtrOutput) ToSqlDatabaseResourcePtrOutput() SqlDatabaseResourcePtrOutput {
	return o
}

func (o SqlDatabaseResourcePtrOutput) ToSqlDatabaseResourcePtrOutputWithContext(ctx context.Context) SqlDatabaseResourcePtrOutput {
	return o
}

func (o SqlDatabaseResourcePtrOutput) Elem() SqlDatabaseResourceOutput {
	return o.ApplyT(func(v *SqlDatabaseResource) SqlDatabaseResource { return *v }).(SqlDatabaseResourceOutput)
}

// Name of the Cosmos DB SQL database
func (o SqlDatabaseResourcePtrOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SqlDatabaseResource) *string {
		if v == nil {
			return nil
		}
		return &v.Id
	}).(pulumi.StringPtrOutput)
}

// Cosmos DB table id object
type TableResource struct {
	// Name of the Cosmos DB table
	Id string `pulumi:"id"`
}

// TableResourceInput is an input type that accepts TableResourceArgs and TableResourceOutput values.
// You can construct a concrete instance of `TableResourceInput` via:
//
//          TableResourceArgs{...}
type TableResourceInput interface {
	pulumi.Input

	ToTableResourceOutput() TableResourceOutput
	ToTableResourceOutputWithContext(context.Context) TableResourceOutput
}

// Cosmos DB table id object
type TableResourceArgs struct {
	// Name of the Cosmos DB table
	Id pulumi.StringInput `pulumi:"id"`
}

func (TableResourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TableResource)(nil)).Elem()
}

func (i TableResourceArgs) ToTableResourceOutput() TableResourceOutput {
	return i.ToTableResourceOutputWithContext(context.Background())
}

func (i TableResourceArgs) ToTableResourceOutputWithContext(ctx context.Context) TableResourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TableResourceOutput)
}

func (i TableResourceArgs) ToTableResourcePtrOutput() TableResourcePtrOutput {
	return i.ToTableResourcePtrOutputWithContext(context.Background())
}

func (i TableResourceArgs) ToTableResourcePtrOutputWithContext(ctx context.Context) TableResourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TableResourceOutput).ToTableResourcePtrOutputWithContext(ctx)
}

// TableResourcePtrInput is an input type that accepts TableResourceArgs, TableResourcePtr and TableResourcePtrOutput values.
// You can construct a concrete instance of `TableResourcePtrInput` via:
//
//          TableResourceArgs{...}
//
//  or:
//
//          nil
type TableResourcePtrInput interface {
	pulumi.Input

	ToTableResourcePtrOutput() TableResourcePtrOutput
	ToTableResourcePtrOutputWithContext(context.Context) TableResourcePtrOutput
}

type tableResourcePtrType TableResourceArgs

func TableResourcePtr(v *TableResourceArgs) TableResourcePtrInput {
	return (*tableResourcePtrType)(v)
}

func (*tableResourcePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TableResource)(nil)).Elem()
}

func (i *tableResourcePtrType) ToTableResourcePtrOutput() TableResourcePtrOutput {
	return i.ToTableResourcePtrOutputWithContext(context.Background())
}

func (i *tableResourcePtrType) ToTableResourcePtrOutputWithContext(ctx context.Context) TableResourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TableResourcePtrOutput)
}

// Cosmos DB table id object
type TableResourceOutput struct{ *pulumi.OutputState }

func (TableResourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TableResource)(nil)).Elem()
}

func (o TableResourceOutput) ToTableResourceOutput() TableResourceOutput {
	return o
}

func (o TableResourceOutput) ToTableResourceOutputWithContext(ctx context.Context) TableResourceOutput {
	return o
}

func (o TableResourceOutput) ToTableResourcePtrOutput() TableResourcePtrOutput {
	return o.ToTableResourcePtrOutputWithContext(context.Background())
}

func (o TableResourceOutput) ToTableResourcePtrOutputWithContext(ctx context.Context) TableResourcePtrOutput {
	return o.ApplyT(func(v TableResource) *TableResource {
		return &v
	}).(TableResourcePtrOutput)
}

// Name of the Cosmos DB table
func (o TableResourceOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v TableResource) string { return v.Id }).(pulumi.StringOutput)
}

type TableResourcePtrOutput struct{ *pulumi.OutputState }

func (TableResourcePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TableResource)(nil)).Elem()
}

func (o TableResourcePtrOutput) ToTableResourcePtrOutput() TableResourcePtrOutput {
	return o
}

func (o TableResourcePtrOutput) ToTableResourcePtrOutputWithContext(ctx context.Context) TableResourcePtrOutput {
	return o
}

func (o TableResourcePtrOutput) Elem() TableResourceOutput {
	return o.ApplyT(func(v *TableResource) TableResource { return *v }).(TableResourceOutput)
}

// Name of the Cosmos DB table
func (o TableResourcePtrOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TableResource) *string {
		if v == nil {
			return nil
		}
		return &v.Id
	}).(pulumi.StringPtrOutput)
}

// The unique key on that enforces uniqueness constraint on documents in the collection in the Azure Cosmos DB service.
type UniqueKey struct {
	// List of paths must be unique for each document in the Azure Cosmos DB service
	Paths []string `pulumi:"paths"`
}

// UniqueKeyInput is an input type that accepts UniqueKeyArgs and UniqueKeyOutput values.
// You can construct a concrete instance of `UniqueKeyInput` via:
//
//          UniqueKeyArgs{...}
type UniqueKeyInput interface {
	pulumi.Input

	ToUniqueKeyOutput() UniqueKeyOutput
	ToUniqueKeyOutputWithContext(context.Context) UniqueKeyOutput
}

// The unique key on that enforces uniqueness constraint on documents in the collection in the Azure Cosmos DB service.
type UniqueKeyArgs struct {
	// List of paths must be unique for each document in the Azure Cosmos DB service
	Paths pulumi.StringArrayInput `pulumi:"paths"`
}

func (UniqueKeyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*UniqueKey)(nil)).Elem()
}

func (i UniqueKeyArgs) ToUniqueKeyOutput() UniqueKeyOutput {
	return i.ToUniqueKeyOutputWithContext(context.Background())
}

func (i UniqueKeyArgs) ToUniqueKeyOutputWithContext(ctx context.Context) UniqueKeyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UniqueKeyOutput)
}

// UniqueKeyArrayInput is an input type that accepts UniqueKeyArray and UniqueKeyArrayOutput values.
// You can construct a concrete instance of `UniqueKeyArrayInput` via:
//
//          UniqueKeyArray{ UniqueKeyArgs{...} }
type UniqueKeyArrayInput interface {
	pulumi.Input

	ToUniqueKeyArrayOutput() UniqueKeyArrayOutput
	ToUniqueKeyArrayOutputWithContext(context.Context) UniqueKeyArrayOutput
}

type UniqueKeyArray []UniqueKeyInput

func (UniqueKeyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]UniqueKey)(nil)).Elem()
}

func (i UniqueKeyArray) ToUniqueKeyArrayOutput() UniqueKeyArrayOutput {
	return i.ToUniqueKeyArrayOutputWithContext(context.Background())
}

func (i UniqueKeyArray) ToUniqueKeyArrayOutputWithContext(ctx context.Context) UniqueKeyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UniqueKeyArrayOutput)
}

// The unique key on that enforces uniqueness constraint on documents in the collection in the Azure Cosmos DB service.
type UniqueKeyOutput struct{ *pulumi.OutputState }

func (UniqueKeyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*UniqueKey)(nil)).Elem()
}

func (o UniqueKeyOutput) ToUniqueKeyOutput() UniqueKeyOutput {
	return o
}

func (o UniqueKeyOutput) ToUniqueKeyOutputWithContext(ctx context.Context) UniqueKeyOutput {
	return o
}

// List of paths must be unique for each document in the Azure Cosmos DB service
func (o UniqueKeyOutput) Paths() pulumi.StringArrayOutput {
	return o.ApplyT(func(v UniqueKey) []string { return v.Paths }).(pulumi.StringArrayOutput)
}

type UniqueKeyArrayOutput struct{ *pulumi.OutputState }

func (UniqueKeyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]UniqueKey)(nil)).Elem()
}

func (o UniqueKeyArrayOutput) ToUniqueKeyArrayOutput() UniqueKeyArrayOutput {
	return o
}

func (o UniqueKeyArrayOutput) ToUniqueKeyArrayOutputWithContext(ctx context.Context) UniqueKeyArrayOutput {
	return o
}

func (o UniqueKeyArrayOutput) Index(i pulumi.IntInput) UniqueKeyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) UniqueKey {
		return vs[0].([]UniqueKey)[vs[1].(int)]
	}).(UniqueKeyOutput)
}

// The unique key policy configuration for specifying uniqueness constraints on documents in the collection in the Azure Cosmos DB service.
type UniqueKeyPolicy struct {
	// List of unique keys on that enforces uniqueness constraint on documents in the collection in the Azure Cosmos DB service.
	UniqueKeys []UniqueKey `pulumi:"uniqueKeys"`
}

// UniqueKeyPolicyInput is an input type that accepts UniqueKeyPolicyArgs and UniqueKeyPolicyOutput values.
// You can construct a concrete instance of `UniqueKeyPolicyInput` via:
//
//          UniqueKeyPolicyArgs{...}
type UniqueKeyPolicyInput interface {
	pulumi.Input

	ToUniqueKeyPolicyOutput() UniqueKeyPolicyOutput
	ToUniqueKeyPolicyOutputWithContext(context.Context) UniqueKeyPolicyOutput
}

// The unique key policy configuration for specifying uniqueness constraints on documents in the collection in the Azure Cosmos DB service.
type UniqueKeyPolicyArgs struct {
	// List of unique keys on that enforces uniqueness constraint on documents in the collection in the Azure Cosmos DB service.
	UniqueKeys UniqueKeyArrayInput `pulumi:"uniqueKeys"`
}

func (UniqueKeyPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*UniqueKeyPolicy)(nil)).Elem()
}

func (i UniqueKeyPolicyArgs) ToUniqueKeyPolicyOutput() UniqueKeyPolicyOutput {
	return i.ToUniqueKeyPolicyOutputWithContext(context.Background())
}

func (i UniqueKeyPolicyArgs) ToUniqueKeyPolicyOutputWithContext(ctx context.Context) UniqueKeyPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UniqueKeyPolicyOutput)
}

func (i UniqueKeyPolicyArgs) ToUniqueKeyPolicyPtrOutput() UniqueKeyPolicyPtrOutput {
	return i.ToUniqueKeyPolicyPtrOutputWithContext(context.Background())
}

func (i UniqueKeyPolicyArgs) ToUniqueKeyPolicyPtrOutputWithContext(ctx context.Context) UniqueKeyPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UniqueKeyPolicyOutput).ToUniqueKeyPolicyPtrOutputWithContext(ctx)
}

// UniqueKeyPolicyPtrInput is an input type that accepts UniqueKeyPolicyArgs, UniqueKeyPolicyPtr and UniqueKeyPolicyPtrOutput values.
// You can construct a concrete instance of `UniqueKeyPolicyPtrInput` via:
//
//          UniqueKeyPolicyArgs{...}
//
//  or:
//
//          nil
type UniqueKeyPolicyPtrInput interface {
	pulumi.Input

	ToUniqueKeyPolicyPtrOutput() UniqueKeyPolicyPtrOutput
	ToUniqueKeyPolicyPtrOutputWithContext(context.Context) UniqueKeyPolicyPtrOutput
}

type uniqueKeyPolicyPtrType UniqueKeyPolicyArgs

func UniqueKeyPolicyPtr(v *UniqueKeyPolicyArgs) UniqueKeyPolicyPtrInput {
	return (*uniqueKeyPolicyPtrType)(v)
}

func (*uniqueKeyPolicyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**UniqueKeyPolicy)(nil)).Elem()
}

func (i *uniqueKeyPolicyPtrType) ToUniqueKeyPolicyPtrOutput() UniqueKeyPolicyPtrOutput {
	return i.ToUniqueKeyPolicyPtrOutputWithContext(context.Background())
}

func (i *uniqueKeyPolicyPtrType) ToUniqueKeyPolicyPtrOutputWithContext(ctx context.Context) UniqueKeyPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UniqueKeyPolicyPtrOutput)
}

// The unique key policy configuration for specifying uniqueness constraints on documents in the collection in the Azure Cosmos DB service.
type UniqueKeyPolicyOutput struct{ *pulumi.OutputState }

func (UniqueKeyPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*UniqueKeyPolicy)(nil)).Elem()
}

func (o UniqueKeyPolicyOutput) ToUniqueKeyPolicyOutput() UniqueKeyPolicyOutput {
	return o
}

func (o UniqueKeyPolicyOutput) ToUniqueKeyPolicyOutputWithContext(ctx context.Context) UniqueKeyPolicyOutput {
	return o
}

func (o UniqueKeyPolicyOutput) ToUniqueKeyPolicyPtrOutput() UniqueKeyPolicyPtrOutput {
	return o.ToUniqueKeyPolicyPtrOutputWithContext(context.Background())
}

func (o UniqueKeyPolicyOutput) ToUniqueKeyPolicyPtrOutputWithContext(ctx context.Context) UniqueKeyPolicyPtrOutput {
	return o.ApplyT(func(v UniqueKeyPolicy) *UniqueKeyPolicy {
		return &v
	}).(UniqueKeyPolicyPtrOutput)
}

// List of unique keys on that enforces uniqueness constraint on documents in the collection in the Azure Cosmos DB service.
func (o UniqueKeyPolicyOutput) UniqueKeys() UniqueKeyArrayOutput {
	return o.ApplyT(func(v UniqueKeyPolicy) []UniqueKey { return v.UniqueKeys }).(UniqueKeyArrayOutput)
}

type UniqueKeyPolicyPtrOutput struct{ *pulumi.OutputState }

func (UniqueKeyPolicyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**UniqueKeyPolicy)(nil)).Elem()
}

func (o UniqueKeyPolicyPtrOutput) ToUniqueKeyPolicyPtrOutput() UniqueKeyPolicyPtrOutput {
	return o
}

func (o UniqueKeyPolicyPtrOutput) ToUniqueKeyPolicyPtrOutputWithContext(ctx context.Context) UniqueKeyPolicyPtrOutput {
	return o
}

func (o UniqueKeyPolicyPtrOutput) Elem() UniqueKeyPolicyOutput {
	return o.ApplyT(func(v *UniqueKeyPolicy) UniqueKeyPolicy { return *v }).(UniqueKeyPolicyOutput)
}

// List of unique keys on that enforces uniqueness constraint on documents in the collection in the Azure Cosmos DB service.
func (o UniqueKeyPolicyPtrOutput) UniqueKeys() UniqueKeyArrayOutput {
	return o.ApplyT(func(v *UniqueKeyPolicy) []UniqueKey {
		if v == nil {
			return nil
		}
		return v.UniqueKeys
	}).(UniqueKeyArrayOutput)
}

// The unique key policy configuration for specifying uniqueness constraints on documents in the collection in the Azure Cosmos DB service.
type UniqueKeyPolicyResponse struct {
	// List of unique keys on that enforces uniqueness constraint on documents in the collection in the Azure Cosmos DB service.
	UniqueKeys []UniqueKeyResponse `pulumi:"uniqueKeys"`
}

// UniqueKeyPolicyResponseInput is an input type that accepts UniqueKeyPolicyResponseArgs and UniqueKeyPolicyResponseOutput values.
// You can construct a concrete instance of `UniqueKeyPolicyResponseInput` via:
//
//          UniqueKeyPolicyResponseArgs{...}
type UniqueKeyPolicyResponseInput interface {
	pulumi.Input

	ToUniqueKeyPolicyResponseOutput() UniqueKeyPolicyResponseOutput
	ToUniqueKeyPolicyResponseOutputWithContext(context.Context) UniqueKeyPolicyResponseOutput
}

// The unique key policy configuration for specifying uniqueness constraints on documents in the collection in the Azure Cosmos DB service.
type UniqueKeyPolicyResponseArgs struct {
	// List of unique keys on that enforces uniqueness constraint on documents in the collection in the Azure Cosmos DB service.
	UniqueKeys UniqueKeyResponseArrayInput `pulumi:"uniqueKeys"`
}

func (UniqueKeyPolicyResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*UniqueKeyPolicyResponse)(nil)).Elem()
}

func (i UniqueKeyPolicyResponseArgs) ToUniqueKeyPolicyResponseOutput() UniqueKeyPolicyResponseOutput {
	return i.ToUniqueKeyPolicyResponseOutputWithContext(context.Background())
}

func (i UniqueKeyPolicyResponseArgs) ToUniqueKeyPolicyResponseOutputWithContext(ctx context.Context) UniqueKeyPolicyResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UniqueKeyPolicyResponseOutput)
}

func (i UniqueKeyPolicyResponseArgs) ToUniqueKeyPolicyResponsePtrOutput() UniqueKeyPolicyResponsePtrOutput {
	return i.ToUniqueKeyPolicyResponsePtrOutputWithContext(context.Background())
}

func (i UniqueKeyPolicyResponseArgs) ToUniqueKeyPolicyResponsePtrOutputWithContext(ctx context.Context) UniqueKeyPolicyResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UniqueKeyPolicyResponseOutput).ToUniqueKeyPolicyResponsePtrOutputWithContext(ctx)
}

// UniqueKeyPolicyResponsePtrInput is an input type that accepts UniqueKeyPolicyResponseArgs, UniqueKeyPolicyResponsePtr and UniqueKeyPolicyResponsePtrOutput values.
// You can construct a concrete instance of `UniqueKeyPolicyResponsePtrInput` via:
//
//          UniqueKeyPolicyResponseArgs{...}
//
//  or:
//
//          nil
type UniqueKeyPolicyResponsePtrInput interface {
	pulumi.Input

	ToUniqueKeyPolicyResponsePtrOutput() UniqueKeyPolicyResponsePtrOutput
	ToUniqueKeyPolicyResponsePtrOutputWithContext(context.Context) UniqueKeyPolicyResponsePtrOutput
}

type uniqueKeyPolicyResponsePtrType UniqueKeyPolicyResponseArgs

func UniqueKeyPolicyResponsePtr(v *UniqueKeyPolicyResponseArgs) UniqueKeyPolicyResponsePtrInput {
	return (*uniqueKeyPolicyResponsePtrType)(v)
}

func (*uniqueKeyPolicyResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**UniqueKeyPolicyResponse)(nil)).Elem()
}

func (i *uniqueKeyPolicyResponsePtrType) ToUniqueKeyPolicyResponsePtrOutput() UniqueKeyPolicyResponsePtrOutput {
	return i.ToUniqueKeyPolicyResponsePtrOutputWithContext(context.Background())
}

func (i *uniqueKeyPolicyResponsePtrType) ToUniqueKeyPolicyResponsePtrOutputWithContext(ctx context.Context) UniqueKeyPolicyResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UniqueKeyPolicyResponsePtrOutput)
}

// The unique key policy configuration for specifying uniqueness constraints on documents in the collection in the Azure Cosmos DB service.
type UniqueKeyPolicyResponseOutput struct{ *pulumi.OutputState }

func (UniqueKeyPolicyResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*UniqueKeyPolicyResponse)(nil)).Elem()
}

func (o UniqueKeyPolicyResponseOutput) ToUniqueKeyPolicyResponseOutput() UniqueKeyPolicyResponseOutput {
	return o
}

func (o UniqueKeyPolicyResponseOutput) ToUniqueKeyPolicyResponseOutputWithContext(ctx context.Context) UniqueKeyPolicyResponseOutput {
	return o
}

func (o UniqueKeyPolicyResponseOutput) ToUniqueKeyPolicyResponsePtrOutput() UniqueKeyPolicyResponsePtrOutput {
	return o.ToUniqueKeyPolicyResponsePtrOutputWithContext(context.Background())
}

func (o UniqueKeyPolicyResponseOutput) ToUniqueKeyPolicyResponsePtrOutputWithContext(ctx context.Context) UniqueKeyPolicyResponsePtrOutput {
	return o.ApplyT(func(v UniqueKeyPolicyResponse) *UniqueKeyPolicyResponse {
		return &v
	}).(UniqueKeyPolicyResponsePtrOutput)
}

// List of unique keys on that enforces uniqueness constraint on documents in the collection in the Azure Cosmos DB service.
func (o UniqueKeyPolicyResponseOutput) UniqueKeys() UniqueKeyResponseArrayOutput {
	return o.ApplyT(func(v UniqueKeyPolicyResponse) []UniqueKeyResponse { return v.UniqueKeys }).(UniqueKeyResponseArrayOutput)
}

type UniqueKeyPolicyResponsePtrOutput struct{ *pulumi.OutputState }

func (UniqueKeyPolicyResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**UniqueKeyPolicyResponse)(nil)).Elem()
}

func (o UniqueKeyPolicyResponsePtrOutput) ToUniqueKeyPolicyResponsePtrOutput() UniqueKeyPolicyResponsePtrOutput {
	return o
}

func (o UniqueKeyPolicyResponsePtrOutput) ToUniqueKeyPolicyResponsePtrOutputWithContext(ctx context.Context) UniqueKeyPolicyResponsePtrOutput {
	return o
}

func (o UniqueKeyPolicyResponsePtrOutput) Elem() UniqueKeyPolicyResponseOutput {
	return o.ApplyT(func(v *UniqueKeyPolicyResponse) UniqueKeyPolicyResponse { return *v }).(UniqueKeyPolicyResponseOutput)
}

// List of unique keys on that enforces uniqueness constraint on documents in the collection in the Azure Cosmos DB service.
func (o UniqueKeyPolicyResponsePtrOutput) UniqueKeys() UniqueKeyResponseArrayOutput {
	return o.ApplyT(func(v *UniqueKeyPolicyResponse) []UniqueKeyResponse {
		if v == nil {
			return nil
		}
		return v.UniqueKeys
	}).(UniqueKeyResponseArrayOutput)
}

// The unique key on that enforces uniqueness constraint on documents in the collection in the Azure Cosmos DB service.
type UniqueKeyResponse struct {
	// List of paths must be unique for each document in the Azure Cosmos DB service
	Paths []string `pulumi:"paths"`
}

// UniqueKeyResponseInput is an input type that accepts UniqueKeyResponseArgs and UniqueKeyResponseOutput values.
// You can construct a concrete instance of `UniqueKeyResponseInput` via:
//
//          UniqueKeyResponseArgs{...}
type UniqueKeyResponseInput interface {
	pulumi.Input

	ToUniqueKeyResponseOutput() UniqueKeyResponseOutput
	ToUniqueKeyResponseOutputWithContext(context.Context) UniqueKeyResponseOutput
}

// The unique key on that enforces uniqueness constraint on documents in the collection in the Azure Cosmos DB service.
type UniqueKeyResponseArgs struct {
	// List of paths must be unique for each document in the Azure Cosmos DB service
	Paths pulumi.StringArrayInput `pulumi:"paths"`
}

func (UniqueKeyResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*UniqueKeyResponse)(nil)).Elem()
}

func (i UniqueKeyResponseArgs) ToUniqueKeyResponseOutput() UniqueKeyResponseOutput {
	return i.ToUniqueKeyResponseOutputWithContext(context.Background())
}

func (i UniqueKeyResponseArgs) ToUniqueKeyResponseOutputWithContext(ctx context.Context) UniqueKeyResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UniqueKeyResponseOutput)
}

// UniqueKeyResponseArrayInput is an input type that accepts UniqueKeyResponseArray and UniqueKeyResponseArrayOutput values.
// You can construct a concrete instance of `UniqueKeyResponseArrayInput` via:
//
//          UniqueKeyResponseArray{ UniqueKeyResponseArgs{...} }
type UniqueKeyResponseArrayInput interface {
	pulumi.Input

	ToUniqueKeyResponseArrayOutput() UniqueKeyResponseArrayOutput
	ToUniqueKeyResponseArrayOutputWithContext(context.Context) UniqueKeyResponseArrayOutput
}

type UniqueKeyResponseArray []UniqueKeyResponseInput

func (UniqueKeyResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]UniqueKeyResponse)(nil)).Elem()
}

func (i UniqueKeyResponseArray) ToUniqueKeyResponseArrayOutput() UniqueKeyResponseArrayOutput {
	return i.ToUniqueKeyResponseArrayOutputWithContext(context.Background())
}

func (i UniqueKeyResponseArray) ToUniqueKeyResponseArrayOutputWithContext(ctx context.Context) UniqueKeyResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UniqueKeyResponseArrayOutput)
}

// The unique key on that enforces uniqueness constraint on documents in the collection in the Azure Cosmos DB service.
type UniqueKeyResponseOutput struct{ *pulumi.OutputState }

func (UniqueKeyResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*UniqueKeyResponse)(nil)).Elem()
}

func (o UniqueKeyResponseOutput) ToUniqueKeyResponseOutput() UniqueKeyResponseOutput {
	return o
}

func (o UniqueKeyResponseOutput) ToUniqueKeyResponseOutputWithContext(ctx context.Context) UniqueKeyResponseOutput {
	return o
}

// List of paths must be unique for each document in the Azure Cosmos DB service
func (o UniqueKeyResponseOutput) Paths() pulumi.StringArrayOutput {
	return o.ApplyT(func(v UniqueKeyResponse) []string { return v.Paths }).(pulumi.StringArrayOutput)
}

type UniqueKeyResponseArrayOutput struct{ *pulumi.OutputState }

func (UniqueKeyResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]UniqueKeyResponse)(nil)).Elem()
}

func (o UniqueKeyResponseArrayOutput) ToUniqueKeyResponseArrayOutput() UniqueKeyResponseArrayOutput {
	return o
}

func (o UniqueKeyResponseArrayOutput) ToUniqueKeyResponseArrayOutputWithContext(ctx context.Context) UniqueKeyResponseArrayOutput {
	return o
}

func (o UniqueKeyResponseArrayOutput) Index(i pulumi.IntInput) UniqueKeyResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) UniqueKeyResponse {
		return vs[0].([]UniqueKeyResponse)[vs[1].(int)]
	}).(UniqueKeyResponseOutput)
}

// Virtual Network ACL Rule object
type VirtualNetworkRule struct {
	// Resource ID of a subnet, for example: /subscriptions/{subscriptionId}/resourceGroups/{groupName}/providers/Microsoft.Network/virtualNetworks/{virtualNetworkName}/subnets/{subnetName}.
	Id *string `pulumi:"id"`
	// Create firewall rule before the virtual network has vnet service endpoint enabled.
	IgnoreMissingVNetServiceEndpoint *bool `pulumi:"ignoreMissingVNetServiceEndpoint"`
}

// VirtualNetworkRuleInput is an input type that accepts VirtualNetworkRuleArgs and VirtualNetworkRuleOutput values.
// You can construct a concrete instance of `VirtualNetworkRuleInput` via:
//
//          VirtualNetworkRuleArgs{...}
type VirtualNetworkRuleInput interface {
	pulumi.Input

	ToVirtualNetworkRuleOutput() VirtualNetworkRuleOutput
	ToVirtualNetworkRuleOutputWithContext(context.Context) VirtualNetworkRuleOutput
}

// Virtual Network ACL Rule object
type VirtualNetworkRuleArgs struct {
	// Resource ID of a subnet, for example: /subscriptions/{subscriptionId}/resourceGroups/{groupName}/providers/Microsoft.Network/virtualNetworks/{virtualNetworkName}/subnets/{subnetName}.
	Id pulumi.StringPtrInput `pulumi:"id"`
	// Create firewall rule before the virtual network has vnet service endpoint enabled.
	IgnoreMissingVNetServiceEndpoint pulumi.BoolPtrInput `pulumi:"ignoreMissingVNetServiceEndpoint"`
}

func (VirtualNetworkRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualNetworkRule)(nil)).Elem()
}

func (i VirtualNetworkRuleArgs) ToVirtualNetworkRuleOutput() VirtualNetworkRuleOutput {
	return i.ToVirtualNetworkRuleOutputWithContext(context.Background())
}

func (i VirtualNetworkRuleArgs) ToVirtualNetworkRuleOutputWithContext(ctx context.Context) VirtualNetworkRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualNetworkRuleOutput)
}

// VirtualNetworkRuleArrayInput is an input type that accepts VirtualNetworkRuleArray and VirtualNetworkRuleArrayOutput values.
// You can construct a concrete instance of `VirtualNetworkRuleArrayInput` via:
//
//          VirtualNetworkRuleArray{ VirtualNetworkRuleArgs{...} }
type VirtualNetworkRuleArrayInput interface {
	pulumi.Input

	ToVirtualNetworkRuleArrayOutput() VirtualNetworkRuleArrayOutput
	ToVirtualNetworkRuleArrayOutputWithContext(context.Context) VirtualNetworkRuleArrayOutput
}

type VirtualNetworkRuleArray []VirtualNetworkRuleInput

func (VirtualNetworkRuleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]VirtualNetworkRule)(nil)).Elem()
}

func (i VirtualNetworkRuleArray) ToVirtualNetworkRuleArrayOutput() VirtualNetworkRuleArrayOutput {
	return i.ToVirtualNetworkRuleArrayOutputWithContext(context.Background())
}

func (i VirtualNetworkRuleArray) ToVirtualNetworkRuleArrayOutputWithContext(ctx context.Context) VirtualNetworkRuleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualNetworkRuleArrayOutput)
}

// Virtual Network ACL Rule object
type VirtualNetworkRuleOutput struct{ *pulumi.OutputState }

func (VirtualNetworkRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualNetworkRule)(nil)).Elem()
}

func (o VirtualNetworkRuleOutput) ToVirtualNetworkRuleOutput() VirtualNetworkRuleOutput {
	return o
}

func (o VirtualNetworkRuleOutput) ToVirtualNetworkRuleOutputWithContext(ctx context.Context) VirtualNetworkRuleOutput {
	return o
}

// Resource ID of a subnet, for example: /subscriptions/{subscriptionId}/resourceGroups/{groupName}/providers/Microsoft.Network/virtualNetworks/{virtualNetworkName}/subnets/{subnetName}.
func (o VirtualNetworkRuleOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VirtualNetworkRule) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// Create firewall rule before the virtual network has vnet service endpoint enabled.
func (o VirtualNetworkRuleOutput) IgnoreMissingVNetServiceEndpoint() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v VirtualNetworkRule) *bool { return v.IgnoreMissingVNetServiceEndpoint }).(pulumi.BoolPtrOutput)
}

type VirtualNetworkRuleArrayOutput struct{ *pulumi.OutputState }

func (VirtualNetworkRuleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]VirtualNetworkRule)(nil)).Elem()
}

func (o VirtualNetworkRuleArrayOutput) ToVirtualNetworkRuleArrayOutput() VirtualNetworkRuleArrayOutput {
	return o
}

func (o VirtualNetworkRuleArrayOutput) ToVirtualNetworkRuleArrayOutputWithContext(ctx context.Context) VirtualNetworkRuleArrayOutput {
	return o
}

func (o VirtualNetworkRuleArrayOutput) Index(i pulumi.IntInput) VirtualNetworkRuleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) VirtualNetworkRule {
		return vs[0].([]VirtualNetworkRule)[vs[1].(int)]
	}).(VirtualNetworkRuleOutput)
}

// Virtual Network ACL Rule object
type VirtualNetworkRuleResponse struct {
	// Resource ID of a subnet, for example: /subscriptions/{subscriptionId}/resourceGroups/{groupName}/providers/Microsoft.Network/virtualNetworks/{virtualNetworkName}/subnets/{subnetName}.
	Id *string `pulumi:"id"`
	// Create firewall rule before the virtual network has vnet service endpoint enabled.
	IgnoreMissingVNetServiceEndpoint *bool `pulumi:"ignoreMissingVNetServiceEndpoint"`
}

// VirtualNetworkRuleResponseInput is an input type that accepts VirtualNetworkRuleResponseArgs and VirtualNetworkRuleResponseOutput values.
// You can construct a concrete instance of `VirtualNetworkRuleResponseInput` via:
//
//          VirtualNetworkRuleResponseArgs{...}
type VirtualNetworkRuleResponseInput interface {
	pulumi.Input

	ToVirtualNetworkRuleResponseOutput() VirtualNetworkRuleResponseOutput
	ToVirtualNetworkRuleResponseOutputWithContext(context.Context) VirtualNetworkRuleResponseOutput
}

// Virtual Network ACL Rule object
type VirtualNetworkRuleResponseArgs struct {
	// Resource ID of a subnet, for example: /subscriptions/{subscriptionId}/resourceGroups/{groupName}/providers/Microsoft.Network/virtualNetworks/{virtualNetworkName}/subnets/{subnetName}.
	Id pulumi.StringPtrInput `pulumi:"id"`
	// Create firewall rule before the virtual network has vnet service endpoint enabled.
	IgnoreMissingVNetServiceEndpoint pulumi.BoolPtrInput `pulumi:"ignoreMissingVNetServiceEndpoint"`
}

func (VirtualNetworkRuleResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualNetworkRuleResponse)(nil)).Elem()
}

func (i VirtualNetworkRuleResponseArgs) ToVirtualNetworkRuleResponseOutput() VirtualNetworkRuleResponseOutput {
	return i.ToVirtualNetworkRuleResponseOutputWithContext(context.Background())
}

func (i VirtualNetworkRuleResponseArgs) ToVirtualNetworkRuleResponseOutputWithContext(ctx context.Context) VirtualNetworkRuleResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualNetworkRuleResponseOutput)
}

// VirtualNetworkRuleResponseArrayInput is an input type that accepts VirtualNetworkRuleResponseArray and VirtualNetworkRuleResponseArrayOutput values.
// You can construct a concrete instance of `VirtualNetworkRuleResponseArrayInput` via:
//
//          VirtualNetworkRuleResponseArray{ VirtualNetworkRuleResponseArgs{...} }
type VirtualNetworkRuleResponseArrayInput interface {
	pulumi.Input

	ToVirtualNetworkRuleResponseArrayOutput() VirtualNetworkRuleResponseArrayOutput
	ToVirtualNetworkRuleResponseArrayOutputWithContext(context.Context) VirtualNetworkRuleResponseArrayOutput
}

type VirtualNetworkRuleResponseArray []VirtualNetworkRuleResponseInput

func (VirtualNetworkRuleResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]VirtualNetworkRuleResponse)(nil)).Elem()
}

func (i VirtualNetworkRuleResponseArray) ToVirtualNetworkRuleResponseArrayOutput() VirtualNetworkRuleResponseArrayOutput {
	return i.ToVirtualNetworkRuleResponseArrayOutputWithContext(context.Background())
}

func (i VirtualNetworkRuleResponseArray) ToVirtualNetworkRuleResponseArrayOutputWithContext(ctx context.Context) VirtualNetworkRuleResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualNetworkRuleResponseArrayOutput)
}

// Virtual Network ACL Rule object
type VirtualNetworkRuleResponseOutput struct{ *pulumi.OutputState }

func (VirtualNetworkRuleResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualNetworkRuleResponse)(nil)).Elem()
}

func (o VirtualNetworkRuleResponseOutput) ToVirtualNetworkRuleResponseOutput() VirtualNetworkRuleResponseOutput {
	return o
}

func (o VirtualNetworkRuleResponseOutput) ToVirtualNetworkRuleResponseOutputWithContext(ctx context.Context) VirtualNetworkRuleResponseOutput {
	return o
}

// Resource ID of a subnet, for example: /subscriptions/{subscriptionId}/resourceGroups/{groupName}/providers/Microsoft.Network/virtualNetworks/{virtualNetworkName}/subnets/{subnetName}.
func (o VirtualNetworkRuleResponseOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VirtualNetworkRuleResponse) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// Create firewall rule before the virtual network has vnet service endpoint enabled.
func (o VirtualNetworkRuleResponseOutput) IgnoreMissingVNetServiceEndpoint() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v VirtualNetworkRuleResponse) *bool { return v.IgnoreMissingVNetServiceEndpoint }).(pulumi.BoolPtrOutput)
}

type VirtualNetworkRuleResponseArrayOutput struct{ *pulumi.OutputState }

func (VirtualNetworkRuleResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]VirtualNetworkRuleResponse)(nil)).Elem()
}

func (o VirtualNetworkRuleResponseArrayOutput) ToVirtualNetworkRuleResponseArrayOutput() VirtualNetworkRuleResponseArrayOutput {
	return o
}

func (o VirtualNetworkRuleResponseArrayOutput) ToVirtualNetworkRuleResponseArrayOutputWithContext(ctx context.Context) VirtualNetworkRuleResponseArrayOutput {
	return o
}

func (o VirtualNetworkRuleResponseArrayOutput) Index(i pulumi.IntInput) VirtualNetworkRuleResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) VirtualNetworkRuleResponse {
		return vs[0].([]VirtualNetworkRuleResponse)[vs[1].(int)]
	}).(VirtualNetworkRuleResponseOutput)
}

func init() {
	pulumi.RegisterOutputType(CapabilityOutput{})
	pulumi.RegisterOutputType(CapabilityArrayOutput{})
	pulumi.RegisterOutputType(CapabilityResponseOutput{})
	pulumi.RegisterOutputType(CapabilityResponseArrayOutput{})
	pulumi.RegisterOutputType(CassandraKeyspaceResourceOutput{})
	pulumi.RegisterOutputType(CassandraKeyspaceResourcePtrOutput{})
	pulumi.RegisterOutputType(CassandraPartitionKeyOutput{})
	pulumi.RegisterOutputType(CassandraPartitionKeyArrayOutput{})
	pulumi.RegisterOutputType(CassandraPartitionKeyResponseOutput{})
	pulumi.RegisterOutputType(CassandraPartitionKeyResponseArrayOutput{})
	pulumi.RegisterOutputType(CassandraSchemaOutput{})
	pulumi.RegisterOutputType(CassandraSchemaPtrOutput{})
	pulumi.RegisterOutputType(CassandraSchemaResponseOutput{})
	pulumi.RegisterOutputType(CassandraSchemaResponsePtrOutput{})
	pulumi.RegisterOutputType(CassandraTableResourceOutput{})
	pulumi.RegisterOutputType(CassandraTableResourcePtrOutput{})
	pulumi.RegisterOutputType(ClusterKeyOutput{})
	pulumi.RegisterOutputType(ClusterKeyArrayOutput{})
	pulumi.RegisterOutputType(ClusterKeyResponseOutput{})
	pulumi.RegisterOutputType(ClusterKeyResponseArrayOutput{})
	pulumi.RegisterOutputType(ColumnOutput{})
	pulumi.RegisterOutputType(ColumnArrayOutput{})
	pulumi.RegisterOutputType(ColumnResponseOutput{})
	pulumi.RegisterOutputType(ColumnResponseArrayOutput{})
	pulumi.RegisterOutputType(ConflictResolutionPolicyOutput{})
	pulumi.RegisterOutputType(ConflictResolutionPolicyPtrOutput{})
	pulumi.RegisterOutputType(ConflictResolutionPolicyResponseOutput{})
	pulumi.RegisterOutputType(ConflictResolutionPolicyResponsePtrOutput{})
	pulumi.RegisterOutputType(ConsistencyPolicyOutput{})
	pulumi.RegisterOutputType(ConsistencyPolicyPtrOutput{})
	pulumi.RegisterOutputType(ConsistencyPolicyResponseOutput{})
	pulumi.RegisterOutputType(ConsistencyPolicyResponsePtrOutput{})
	pulumi.RegisterOutputType(ContainerPartitionKeyOutput{})
	pulumi.RegisterOutputType(ContainerPartitionKeyPtrOutput{})
	pulumi.RegisterOutputType(ContainerPartitionKeyResponseOutput{})
	pulumi.RegisterOutputType(ContainerPartitionKeyResponsePtrOutput{})
	pulumi.RegisterOutputType(DatabaseAccountConnectionStringResponseOutput{})
	pulumi.RegisterOutputType(DatabaseAccountConnectionStringResponseArrayOutput{})
	pulumi.RegisterOutputType(ExcludedPathOutput{})
	pulumi.RegisterOutputType(ExcludedPathArrayOutput{})
	pulumi.RegisterOutputType(ExcludedPathResponseOutput{})
	pulumi.RegisterOutputType(ExcludedPathResponseArrayOutput{})
	pulumi.RegisterOutputType(FailoverPolicyResponseOutput{})
	pulumi.RegisterOutputType(FailoverPolicyResponseArrayOutput{})
	pulumi.RegisterOutputType(GremlinDatabaseResourceOutput{})
	pulumi.RegisterOutputType(GremlinDatabaseResourcePtrOutput{})
	pulumi.RegisterOutputType(GremlinGraphResourceOutput{})
	pulumi.RegisterOutputType(GremlinGraphResourcePtrOutput{})
	pulumi.RegisterOutputType(IncludedPathOutput{})
	pulumi.RegisterOutputType(IncludedPathArrayOutput{})
	pulumi.RegisterOutputType(IncludedPathResponseOutput{})
	pulumi.RegisterOutputType(IncludedPathResponseArrayOutput{})
	pulumi.RegisterOutputType(IndexesOutput{})
	pulumi.RegisterOutputType(IndexesArrayOutput{})
	pulumi.RegisterOutputType(IndexesResponseOutput{})
	pulumi.RegisterOutputType(IndexesResponseArrayOutput{})
	pulumi.RegisterOutputType(IndexingPolicyOutput{})
	pulumi.RegisterOutputType(IndexingPolicyPtrOutput{})
	pulumi.RegisterOutputType(IndexingPolicyResponseOutput{})
	pulumi.RegisterOutputType(IndexingPolicyResponsePtrOutput{})
	pulumi.RegisterOutputType(LocationOutput{})
	pulumi.RegisterOutputType(LocationArrayOutput{})
	pulumi.RegisterOutputType(LocationResponseOutput{})
	pulumi.RegisterOutputType(LocationResponseArrayOutput{})
	pulumi.RegisterOutputType(MongoDBCollectionResourceOutput{})
	pulumi.RegisterOutputType(MongoDBCollectionResourcePtrOutput{})
	pulumi.RegisterOutputType(MongoDBDatabaseResourceOutput{})
	pulumi.RegisterOutputType(MongoDBDatabaseResourcePtrOutput{})
	pulumi.RegisterOutputType(MongoIndexOutput{})
	pulumi.RegisterOutputType(MongoIndexArrayOutput{})
	pulumi.RegisterOutputType(MongoIndexKeysOutput{})
	pulumi.RegisterOutputType(MongoIndexKeysPtrOutput{})
	pulumi.RegisterOutputType(MongoIndexKeysResponseOutput{})
	pulumi.RegisterOutputType(MongoIndexKeysResponsePtrOutput{})
	pulumi.RegisterOutputType(MongoIndexOptionsOutput{})
	pulumi.RegisterOutputType(MongoIndexOptionsPtrOutput{})
	pulumi.RegisterOutputType(MongoIndexOptionsResponseOutput{})
	pulumi.RegisterOutputType(MongoIndexOptionsResponsePtrOutput{})
	pulumi.RegisterOutputType(MongoIndexResponseOutput{})
	pulumi.RegisterOutputType(MongoIndexResponseArrayOutput{})
	pulumi.RegisterOutputType(SqlContainerResourceOutput{})
	pulumi.RegisterOutputType(SqlContainerResourcePtrOutput{})
	pulumi.RegisterOutputType(SqlDatabaseResourceOutput{})
	pulumi.RegisterOutputType(SqlDatabaseResourcePtrOutput{})
	pulumi.RegisterOutputType(TableResourceOutput{})
	pulumi.RegisterOutputType(TableResourcePtrOutput{})
	pulumi.RegisterOutputType(UniqueKeyOutput{})
	pulumi.RegisterOutputType(UniqueKeyArrayOutput{})
	pulumi.RegisterOutputType(UniqueKeyPolicyOutput{})
	pulumi.RegisterOutputType(UniqueKeyPolicyPtrOutput{})
	pulumi.RegisterOutputType(UniqueKeyPolicyResponseOutput{})
	pulumi.RegisterOutputType(UniqueKeyPolicyResponsePtrOutput{})
	pulumi.RegisterOutputType(UniqueKeyResponseOutput{})
	pulumi.RegisterOutputType(UniqueKeyResponseArrayOutput{})
	pulumi.RegisterOutputType(VirtualNetworkRuleOutput{})
	pulumi.RegisterOutputType(VirtualNetworkRuleArrayOutput{})
	pulumi.RegisterOutputType(VirtualNetworkRuleResponseOutput{})
	pulumi.RegisterOutputType(VirtualNetworkRuleResponseArrayOutput{})
}
