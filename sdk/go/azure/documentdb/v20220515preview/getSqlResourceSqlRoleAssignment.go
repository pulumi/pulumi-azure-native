// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v20220515preview

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// An Azure Cosmos DB Role Assignment
func LookupSqlResourceSqlRoleAssignment(ctx *pulumi.Context, args *LookupSqlResourceSqlRoleAssignmentArgs, opts ...pulumi.InvokeOption) (*LookupSqlResourceSqlRoleAssignmentResult, error) {
	var rv LookupSqlResourceSqlRoleAssignmentResult
	err := ctx.Invoke("azure-native:documentdb/v20220515preview:getSqlResourceSqlRoleAssignment", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type LookupSqlResourceSqlRoleAssignmentArgs struct {
	// Cosmos DB database account name.
	AccountName string `pulumi:"accountName"`
	// The name of the resource group. The name is case insensitive.
	ResourceGroupName string `pulumi:"resourceGroupName"`
	// The GUID for the Role Assignment.
	RoleAssignmentId string `pulumi:"roleAssignmentId"`
}

// An Azure Cosmos DB Role Assignment
type LookupSqlResourceSqlRoleAssignmentResult struct {
	// The unique resource identifier of the database account.
	Id string `pulumi:"id"`
	// The name of the database account.
	Name string `pulumi:"name"`
	// The unique identifier for the associated AAD principal in the AAD graph to which access is being granted through this Role Assignment. Tenant ID for the principal is inferred using the tenant associated with the subscription.
	PrincipalId *string `pulumi:"principalId"`
	// The unique identifier for the associated Role Definition.
	RoleDefinitionId *string `pulumi:"roleDefinitionId"`
	// The data plane resource path for which access is being granted through this Role Assignment.
	Scope *string `pulumi:"scope"`
	// The type of Azure resource.
	Type string `pulumi:"type"`
}

func LookupSqlResourceSqlRoleAssignmentOutput(ctx *pulumi.Context, args LookupSqlResourceSqlRoleAssignmentOutputArgs, opts ...pulumi.InvokeOption) LookupSqlResourceSqlRoleAssignmentResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupSqlResourceSqlRoleAssignmentResult, error) {
			args := v.(LookupSqlResourceSqlRoleAssignmentArgs)
			r, err := LookupSqlResourceSqlRoleAssignment(ctx, &args, opts...)
			var s LookupSqlResourceSqlRoleAssignmentResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupSqlResourceSqlRoleAssignmentResultOutput)
}

type LookupSqlResourceSqlRoleAssignmentOutputArgs struct {
	// Cosmos DB database account name.
	AccountName pulumi.StringInput `pulumi:"accountName"`
	// The name of the resource group. The name is case insensitive.
	ResourceGroupName pulumi.StringInput `pulumi:"resourceGroupName"`
	// The GUID for the Role Assignment.
	RoleAssignmentId pulumi.StringInput `pulumi:"roleAssignmentId"`
}

func (LookupSqlResourceSqlRoleAssignmentOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupSqlResourceSqlRoleAssignmentArgs)(nil)).Elem()
}

// An Azure Cosmos DB Role Assignment
type LookupSqlResourceSqlRoleAssignmentResultOutput struct{ *pulumi.OutputState }

func (LookupSqlResourceSqlRoleAssignmentResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupSqlResourceSqlRoleAssignmentResult)(nil)).Elem()
}

func (o LookupSqlResourceSqlRoleAssignmentResultOutput) ToLookupSqlResourceSqlRoleAssignmentResultOutput() LookupSqlResourceSqlRoleAssignmentResultOutput {
	return o
}

func (o LookupSqlResourceSqlRoleAssignmentResultOutput) ToLookupSqlResourceSqlRoleAssignmentResultOutputWithContext(ctx context.Context) LookupSqlResourceSqlRoleAssignmentResultOutput {
	return o
}

// The unique resource identifier of the database account.
func (o LookupSqlResourceSqlRoleAssignmentResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSqlResourceSqlRoleAssignmentResult) string { return v.Id }).(pulumi.StringOutput)
}

// The name of the database account.
func (o LookupSqlResourceSqlRoleAssignmentResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSqlResourceSqlRoleAssignmentResult) string { return v.Name }).(pulumi.StringOutput)
}

// The unique identifier for the associated AAD principal in the AAD graph to which access is being granted through this Role Assignment. Tenant ID for the principal is inferred using the tenant associated with the subscription.
func (o LookupSqlResourceSqlRoleAssignmentResultOutput) PrincipalId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupSqlResourceSqlRoleAssignmentResult) *string { return v.PrincipalId }).(pulumi.StringPtrOutput)
}

// The unique identifier for the associated Role Definition.
func (o LookupSqlResourceSqlRoleAssignmentResultOutput) RoleDefinitionId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupSqlResourceSqlRoleAssignmentResult) *string { return v.RoleDefinitionId }).(pulumi.StringPtrOutput)
}

// The data plane resource path for which access is being granted through this Role Assignment.
func (o LookupSqlResourceSqlRoleAssignmentResultOutput) Scope() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupSqlResourceSqlRoleAssignmentResult) *string { return v.Scope }).(pulumi.StringPtrOutput)
}

// The type of Azure resource.
func (o LookupSqlResourceSqlRoleAssignmentResultOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSqlResourceSqlRoleAssignmentResult) string { return v.Type }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupSqlResourceSqlRoleAssignmentResultOutput{})
}
