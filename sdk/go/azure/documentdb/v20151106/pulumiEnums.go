// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v20151106

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type ConflictResolutionMode string

const (
	ConflictResolutionModeLastWriterWins = ConflictResolutionMode("LastWriterWins")
	ConflictResolutionModeCustom         = ConflictResolutionMode("Custom")
)

func (ConflictResolutionMode) ElementType() reflect.Type {
	return reflect.TypeOf((*ConflictResolutionMode)(nil)).Elem()
}

func (e ConflictResolutionMode) ToConflictResolutionModeOutput() ConflictResolutionModeOutput {
	return pulumi.ToOutput(e).(ConflictResolutionModeOutput)
}

func (e ConflictResolutionMode) ToConflictResolutionModeOutputWithContext(ctx context.Context) ConflictResolutionModeOutput {
	return pulumi.ToOutputWithContext(ctx, e).(ConflictResolutionModeOutput)
}

func (e ConflictResolutionMode) ToConflictResolutionModePtrOutput() ConflictResolutionModePtrOutput {
	return e.ToConflictResolutionModePtrOutputWithContext(context.Background())
}

func (e ConflictResolutionMode) ToConflictResolutionModePtrOutputWithContext(ctx context.Context) ConflictResolutionModePtrOutput {
	return ConflictResolutionMode(e).ToConflictResolutionModeOutputWithContext(ctx).ToConflictResolutionModePtrOutputWithContext(ctx)
}

func (e ConflictResolutionMode) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e ConflictResolutionMode) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e ConflictResolutionMode) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e ConflictResolutionMode) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type ConflictResolutionModeOutput struct{ *pulumi.OutputState }

func (ConflictResolutionModeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConflictResolutionMode)(nil)).Elem()
}

func (o ConflictResolutionModeOutput) ToConflictResolutionModeOutput() ConflictResolutionModeOutput {
	return o
}

func (o ConflictResolutionModeOutput) ToConflictResolutionModeOutputWithContext(ctx context.Context) ConflictResolutionModeOutput {
	return o
}

func (o ConflictResolutionModeOutput) ToConflictResolutionModePtrOutput() ConflictResolutionModePtrOutput {
	return o.ToConflictResolutionModePtrOutputWithContext(context.Background())
}

func (o ConflictResolutionModeOutput) ToConflictResolutionModePtrOutputWithContext(ctx context.Context) ConflictResolutionModePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ConflictResolutionMode) *ConflictResolutionMode {
		return &v
	}).(ConflictResolutionModePtrOutput)
}

func (o ConflictResolutionModeOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o ConflictResolutionModeOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e ConflictResolutionMode) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o ConflictResolutionModeOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o ConflictResolutionModeOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e ConflictResolutionMode) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type ConflictResolutionModePtrOutput struct{ *pulumi.OutputState }

func (ConflictResolutionModePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ConflictResolutionMode)(nil)).Elem()
}

func (o ConflictResolutionModePtrOutput) ToConflictResolutionModePtrOutput() ConflictResolutionModePtrOutput {
	return o
}

func (o ConflictResolutionModePtrOutput) ToConflictResolutionModePtrOutputWithContext(ctx context.Context) ConflictResolutionModePtrOutput {
	return o
}

func (o ConflictResolutionModePtrOutput) Elem() ConflictResolutionModeOutput {
	return o.ApplyT(func(v *ConflictResolutionMode) ConflictResolutionMode {
		if v != nil {
			return *v
		}
		var ret ConflictResolutionMode
		return ret
	}).(ConflictResolutionModeOutput)
}

func (o ConflictResolutionModePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o ConflictResolutionModePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *ConflictResolutionMode) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// ConflictResolutionModeInput is an input type that accepts ConflictResolutionModeArgs and ConflictResolutionModeOutput values.
// You can construct a concrete instance of `ConflictResolutionModeInput` via:
//
//          ConflictResolutionModeArgs{...}
type ConflictResolutionModeInput interface {
	pulumi.Input

	ToConflictResolutionModeOutput() ConflictResolutionModeOutput
	ToConflictResolutionModeOutputWithContext(context.Context) ConflictResolutionModeOutput
}

var conflictResolutionModePtrType = reflect.TypeOf((**ConflictResolutionMode)(nil)).Elem()

type ConflictResolutionModePtrInput interface {
	pulumi.Input

	ToConflictResolutionModePtrOutput() ConflictResolutionModePtrOutput
	ToConflictResolutionModePtrOutputWithContext(context.Context) ConflictResolutionModePtrOutput
}

type conflictResolutionModePtr string

func ConflictResolutionModePtr(v string) ConflictResolutionModePtrInput {
	return (*conflictResolutionModePtr)(&v)
}

func (*conflictResolutionModePtr) ElementType() reflect.Type {
	return conflictResolutionModePtrType
}

func (in *conflictResolutionModePtr) ToConflictResolutionModePtrOutput() ConflictResolutionModePtrOutput {
	return pulumi.ToOutput(in).(ConflictResolutionModePtrOutput)
}

func (in *conflictResolutionModePtr) ToConflictResolutionModePtrOutputWithContext(ctx context.Context) ConflictResolutionModePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(ConflictResolutionModePtrOutput)
}

type ConnectorOffer string

const (
	ConnectorOfferSmall = ConnectorOffer("Small")
)

func (ConnectorOffer) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectorOffer)(nil)).Elem()
}

func (e ConnectorOffer) ToConnectorOfferOutput() ConnectorOfferOutput {
	return pulumi.ToOutput(e).(ConnectorOfferOutput)
}

func (e ConnectorOffer) ToConnectorOfferOutputWithContext(ctx context.Context) ConnectorOfferOutput {
	return pulumi.ToOutputWithContext(ctx, e).(ConnectorOfferOutput)
}

func (e ConnectorOffer) ToConnectorOfferPtrOutput() ConnectorOfferPtrOutput {
	return e.ToConnectorOfferPtrOutputWithContext(context.Background())
}

func (e ConnectorOffer) ToConnectorOfferPtrOutputWithContext(ctx context.Context) ConnectorOfferPtrOutput {
	return ConnectorOffer(e).ToConnectorOfferOutputWithContext(ctx).ToConnectorOfferPtrOutputWithContext(ctx)
}

func (e ConnectorOffer) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e ConnectorOffer) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e ConnectorOffer) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e ConnectorOffer) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type ConnectorOfferOutput struct{ *pulumi.OutputState }

func (ConnectorOfferOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectorOffer)(nil)).Elem()
}

func (o ConnectorOfferOutput) ToConnectorOfferOutput() ConnectorOfferOutput {
	return o
}

func (o ConnectorOfferOutput) ToConnectorOfferOutputWithContext(ctx context.Context) ConnectorOfferOutput {
	return o
}

func (o ConnectorOfferOutput) ToConnectorOfferPtrOutput() ConnectorOfferPtrOutput {
	return o.ToConnectorOfferPtrOutputWithContext(context.Background())
}

func (o ConnectorOfferOutput) ToConnectorOfferPtrOutputWithContext(ctx context.Context) ConnectorOfferPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ConnectorOffer) *ConnectorOffer {
		return &v
	}).(ConnectorOfferPtrOutput)
}

func (o ConnectorOfferOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o ConnectorOfferOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e ConnectorOffer) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o ConnectorOfferOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o ConnectorOfferOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e ConnectorOffer) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type ConnectorOfferPtrOutput struct{ *pulumi.OutputState }

func (ConnectorOfferPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ConnectorOffer)(nil)).Elem()
}

func (o ConnectorOfferPtrOutput) ToConnectorOfferPtrOutput() ConnectorOfferPtrOutput {
	return o
}

func (o ConnectorOfferPtrOutput) ToConnectorOfferPtrOutputWithContext(ctx context.Context) ConnectorOfferPtrOutput {
	return o
}

func (o ConnectorOfferPtrOutput) Elem() ConnectorOfferOutput {
	return o.ApplyT(func(v *ConnectorOffer) ConnectorOffer {
		if v != nil {
			return *v
		}
		var ret ConnectorOffer
		return ret
	}).(ConnectorOfferOutput)
}

func (o ConnectorOfferPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o ConnectorOfferPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *ConnectorOffer) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// ConnectorOfferInput is an input type that accepts ConnectorOfferArgs and ConnectorOfferOutput values.
// You can construct a concrete instance of `ConnectorOfferInput` via:
//
//          ConnectorOfferArgs{...}
type ConnectorOfferInput interface {
	pulumi.Input

	ToConnectorOfferOutput() ConnectorOfferOutput
	ToConnectorOfferOutputWithContext(context.Context) ConnectorOfferOutput
}

var connectorOfferPtrType = reflect.TypeOf((**ConnectorOffer)(nil)).Elem()

type ConnectorOfferPtrInput interface {
	pulumi.Input

	ToConnectorOfferPtrOutput() ConnectorOfferPtrOutput
	ToConnectorOfferPtrOutputWithContext(context.Context) ConnectorOfferPtrOutput
}

type connectorOfferPtr string

func ConnectorOfferPtr(v string) ConnectorOfferPtrInput {
	return (*connectorOfferPtr)(&v)
}

func (*connectorOfferPtr) ElementType() reflect.Type {
	return connectorOfferPtrType
}

func (in *connectorOfferPtr) ToConnectorOfferPtrOutput() ConnectorOfferPtrOutput {
	return pulumi.ToOutput(in).(ConnectorOfferPtrOutput)
}

func (in *connectorOfferPtr) ToConnectorOfferPtrOutputWithContext(ctx context.Context) ConnectorOfferPtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(ConnectorOfferPtrOutput)
}

type DataType string

const (
	DataTypeString       = DataType("String")
	DataTypeNumber       = DataType("Number")
	DataTypePoint        = DataType("Point")
	DataTypePolygon      = DataType("Polygon")
	DataTypeLineString   = DataType("LineString")
	DataTypeMultiPolygon = DataType("MultiPolygon")
)

func (DataType) ElementType() reflect.Type {
	return reflect.TypeOf((*DataType)(nil)).Elem()
}

func (e DataType) ToDataTypeOutput() DataTypeOutput {
	return pulumi.ToOutput(e).(DataTypeOutput)
}

func (e DataType) ToDataTypeOutputWithContext(ctx context.Context) DataTypeOutput {
	return pulumi.ToOutputWithContext(ctx, e).(DataTypeOutput)
}

func (e DataType) ToDataTypePtrOutput() DataTypePtrOutput {
	return e.ToDataTypePtrOutputWithContext(context.Background())
}

func (e DataType) ToDataTypePtrOutputWithContext(ctx context.Context) DataTypePtrOutput {
	return DataType(e).ToDataTypeOutputWithContext(ctx).ToDataTypePtrOutputWithContext(ctx)
}

func (e DataType) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e DataType) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e DataType) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e DataType) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type DataTypeOutput struct{ *pulumi.OutputState }

func (DataTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataType)(nil)).Elem()
}

func (o DataTypeOutput) ToDataTypeOutput() DataTypeOutput {
	return o
}

func (o DataTypeOutput) ToDataTypeOutputWithContext(ctx context.Context) DataTypeOutput {
	return o
}

func (o DataTypeOutput) ToDataTypePtrOutput() DataTypePtrOutput {
	return o.ToDataTypePtrOutputWithContext(context.Background())
}

func (o DataTypeOutput) ToDataTypePtrOutputWithContext(ctx context.Context) DataTypePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DataType) *DataType {
		return &v
	}).(DataTypePtrOutput)
}

func (o DataTypeOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o DataTypeOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e DataType) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o DataTypeOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o DataTypeOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e DataType) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type DataTypePtrOutput struct{ *pulumi.OutputState }

func (DataTypePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DataType)(nil)).Elem()
}

func (o DataTypePtrOutput) ToDataTypePtrOutput() DataTypePtrOutput {
	return o
}

func (o DataTypePtrOutput) ToDataTypePtrOutputWithContext(ctx context.Context) DataTypePtrOutput {
	return o
}

func (o DataTypePtrOutput) Elem() DataTypeOutput {
	return o.ApplyT(func(v *DataType) DataType {
		if v != nil {
			return *v
		}
		var ret DataType
		return ret
	}).(DataTypeOutput)
}

func (o DataTypePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o DataTypePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *DataType) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// DataTypeInput is an input type that accepts DataTypeArgs and DataTypeOutput values.
// You can construct a concrete instance of `DataTypeInput` via:
//
//          DataTypeArgs{...}
type DataTypeInput interface {
	pulumi.Input

	ToDataTypeOutput() DataTypeOutput
	ToDataTypeOutputWithContext(context.Context) DataTypeOutput
}

var dataTypePtrType = reflect.TypeOf((**DataType)(nil)).Elem()

type DataTypePtrInput interface {
	pulumi.Input

	ToDataTypePtrOutput() DataTypePtrOutput
	ToDataTypePtrOutputWithContext(context.Context) DataTypePtrOutput
}

type dataTypePtr string

func DataTypePtr(v string) DataTypePtrInput {
	return (*dataTypePtr)(&v)
}

func (*dataTypePtr) ElementType() reflect.Type {
	return dataTypePtrType
}

func (in *dataTypePtr) ToDataTypePtrOutput() DataTypePtrOutput {
	return pulumi.ToOutput(in).(DataTypePtrOutput)
}

func (in *dataTypePtr) ToDataTypePtrOutputWithContext(ctx context.Context) DataTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(DataTypePtrOutput)
}

type DatabaseAccountKind string

const (
	DatabaseAccountKindGlobalDocumentDB = DatabaseAccountKind("GlobalDocumentDB")
	DatabaseAccountKindMongoDB          = DatabaseAccountKind("MongoDB")
	DatabaseAccountKindParse            = DatabaseAccountKind("Parse")
)

func (DatabaseAccountKind) ElementType() reflect.Type {
	return reflect.TypeOf((*DatabaseAccountKind)(nil)).Elem()
}

func (e DatabaseAccountKind) ToDatabaseAccountKindOutput() DatabaseAccountKindOutput {
	return pulumi.ToOutput(e).(DatabaseAccountKindOutput)
}

func (e DatabaseAccountKind) ToDatabaseAccountKindOutputWithContext(ctx context.Context) DatabaseAccountKindOutput {
	return pulumi.ToOutputWithContext(ctx, e).(DatabaseAccountKindOutput)
}

func (e DatabaseAccountKind) ToDatabaseAccountKindPtrOutput() DatabaseAccountKindPtrOutput {
	return e.ToDatabaseAccountKindPtrOutputWithContext(context.Background())
}

func (e DatabaseAccountKind) ToDatabaseAccountKindPtrOutputWithContext(ctx context.Context) DatabaseAccountKindPtrOutput {
	return DatabaseAccountKind(e).ToDatabaseAccountKindOutputWithContext(ctx).ToDatabaseAccountKindPtrOutputWithContext(ctx)
}

func (e DatabaseAccountKind) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e DatabaseAccountKind) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e DatabaseAccountKind) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e DatabaseAccountKind) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type DatabaseAccountKindOutput struct{ *pulumi.OutputState }

func (DatabaseAccountKindOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DatabaseAccountKind)(nil)).Elem()
}

func (o DatabaseAccountKindOutput) ToDatabaseAccountKindOutput() DatabaseAccountKindOutput {
	return o
}

func (o DatabaseAccountKindOutput) ToDatabaseAccountKindOutputWithContext(ctx context.Context) DatabaseAccountKindOutput {
	return o
}

func (o DatabaseAccountKindOutput) ToDatabaseAccountKindPtrOutput() DatabaseAccountKindPtrOutput {
	return o.ToDatabaseAccountKindPtrOutputWithContext(context.Background())
}

func (o DatabaseAccountKindOutput) ToDatabaseAccountKindPtrOutputWithContext(ctx context.Context) DatabaseAccountKindPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DatabaseAccountKind) *DatabaseAccountKind {
		return &v
	}).(DatabaseAccountKindPtrOutput)
}

func (o DatabaseAccountKindOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o DatabaseAccountKindOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e DatabaseAccountKind) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o DatabaseAccountKindOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o DatabaseAccountKindOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e DatabaseAccountKind) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type DatabaseAccountKindPtrOutput struct{ *pulumi.OutputState }

func (DatabaseAccountKindPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DatabaseAccountKind)(nil)).Elem()
}

func (o DatabaseAccountKindPtrOutput) ToDatabaseAccountKindPtrOutput() DatabaseAccountKindPtrOutput {
	return o
}

func (o DatabaseAccountKindPtrOutput) ToDatabaseAccountKindPtrOutputWithContext(ctx context.Context) DatabaseAccountKindPtrOutput {
	return o
}

func (o DatabaseAccountKindPtrOutput) Elem() DatabaseAccountKindOutput {
	return o.ApplyT(func(v *DatabaseAccountKind) DatabaseAccountKind {
		if v != nil {
			return *v
		}
		var ret DatabaseAccountKind
		return ret
	}).(DatabaseAccountKindOutput)
}

func (o DatabaseAccountKindPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o DatabaseAccountKindPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *DatabaseAccountKind) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// DatabaseAccountKindInput is an input type that accepts DatabaseAccountKindArgs and DatabaseAccountKindOutput values.
// You can construct a concrete instance of `DatabaseAccountKindInput` via:
//
//          DatabaseAccountKindArgs{...}
type DatabaseAccountKindInput interface {
	pulumi.Input

	ToDatabaseAccountKindOutput() DatabaseAccountKindOutput
	ToDatabaseAccountKindOutputWithContext(context.Context) DatabaseAccountKindOutput
}

var databaseAccountKindPtrType = reflect.TypeOf((**DatabaseAccountKind)(nil)).Elem()

type DatabaseAccountKindPtrInput interface {
	pulumi.Input

	ToDatabaseAccountKindPtrOutput() DatabaseAccountKindPtrOutput
	ToDatabaseAccountKindPtrOutputWithContext(context.Context) DatabaseAccountKindPtrOutput
}

type databaseAccountKindPtr string

func DatabaseAccountKindPtr(v string) DatabaseAccountKindPtrInput {
	return (*databaseAccountKindPtr)(&v)
}

func (*databaseAccountKindPtr) ElementType() reflect.Type {
	return databaseAccountKindPtrType
}

func (in *databaseAccountKindPtr) ToDatabaseAccountKindPtrOutput() DatabaseAccountKindPtrOutput {
	return pulumi.ToOutput(in).(DatabaseAccountKindPtrOutput)
}

func (in *databaseAccountKindPtr) ToDatabaseAccountKindPtrOutputWithContext(ctx context.Context) DatabaseAccountKindPtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(DatabaseAccountKindPtrOutput)
}

type DatabaseAccountOfferType string

const (
	DatabaseAccountOfferTypeStandard = DatabaseAccountOfferType("Standard")
)

func (DatabaseAccountOfferType) ElementType() reflect.Type {
	return reflect.TypeOf((*DatabaseAccountOfferType)(nil)).Elem()
}

func (e DatabaseAccountOfferType) ToDatabaseAccountOfferTypeOutput() DatabaseAccountOfferTypeOutput {
	return pulumi.ToOutput(e).(DatabaseAccountOfferTypeOutput)
}

func (e DatabaseAccountOfferType) ToDatabaseAccountOfferTypeOutputWithContext(ctx context.Context) DatabaseAccountOfferTypeOutput {
	return pulumi.ToOutputWithContext(ctx, e).(DatabaseAccountOfferTypeOutput)
}

func (e DatabaseAccountOfferType) ToDatabaseAccountOfferTypePtrOutput() DatabaseAccountOfferTypePtrOutput {
	return e.ToDatabaseAccountOfferTypePtrOutputWithContext(context.Background())
}

func (e DatabaseAccountOfferType) ToDatabaseAccountOfferTypePtrOutputWithContext(ctx context.Context) DatabaseAccountOfferTypePtrOutput {
	return DatabaseAccountOfferType(e).ToDatabaseAccountOfferTypeOutputWithContext(ctx).ToDatabaseAccountOfferTypePtrOutputWithContext(ctx)
}

func (e DatabaseAccountOfferType) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e DatabaseAccountOfferType) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e DatabaseAccountOfferType) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e DatabaseAccountOfferType) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type DatabaseAccountOfferTypeOutput struct{ *pulumi.OutputState }

func (DatabaseAccountOfferTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DatabaseAccountOfferType)(nil)).Elem()
}

func (o DatabaseAccountOfferTypeOutput) ToDatabaseAccountOfferTypeOutput() DatabaseAccountOfferTypeOutput {
	return o
}

func (o DatabaseAccountOfferTypeOutput) ToDatabaseAccountOfferTypeOutputWithContext(ctx context.Context) DatabaseAccountOfferTypeOutput {
	return o
}

func (o DatabaseAccountOfferTypeOutput) ToDatabaseAccountOfferTypePtrOutput() DatabaseAccountOfferTypePtrOutput {
	return o.ToDatabaseAccountOfferTypePtrOutputWithContext(context.Background())
}

func (o DatabaseAccountOfferTypeOutput) ToDatabaseAccountOfferTypePtrOutputWithContext(ctx context.Context) DatabaseAccountOfferTypePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DatabaseAccountOfferType) *DatabaseAccountOfferType {
		return &v
	}).(DatabaseAccountOfferTypePtrOutput)
}

func (o DatabaseAccountOfferTypeOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o DatabaseAccountOfferTypeOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e DatabaseAccountOfferType) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o DatabaseAccountOfferTypeOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o DatabaseAccountOfferTypeOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e DatabaseAccountOfferType) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type DatabaseAccountOfferTypePtrOutput struct{ *pulumi.OutputState }

func (DatabaseAccountOfferTypePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DatabaseAccountOfferType)(nil)).Elem()
}

func (o DatabaseAccountOfferTypePtrOutput) ToDatabaseAccountOfferTypePtrOutput() DatabaseAccountOfferTypePtrOutput {
	return o
}

func (o DatabaseAccountOfferTypePtrOutput) ToDatabaseAccountOfferTypePtrOutputWithContext(ctx context.Context) DatabaseAccountOfferTypePtrOutput {
	return o
}

func (o DatabaseAccountOfferTypePtrOutput) Elem() DatabaseAccountOfferTypeOutput {
	return o.ApplyT(func(v *DatabaseAccountOfferType) DatabaseAccountOfferType {
		if v != nil {
			return *v
		}
		var ret DatabaseAccountOfferType
		return ret
	}).(DatabaseAccountOfferTypeOutput)
}

func (o DatabaseAccountOfferTypePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o DatabaseAccountOfferTypePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *DatabaseAccountOfferType) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// DatabaseAccountOfferTypeInput is an input type that accepts DatabaseAccountOfferTypeArgs and DatabaseAccountOfferTypeOutput values.
// You can construct a concrete instance of `DatabaseAccountOfferTypeInput` via:
//
//          DatabaseAccountOfferTypeArgs{...}
type DatabaseAccountOfferTypeInput interface {
	pulumi.Input

	ToDatabaseAccountOfferTypeOutput() DatabaseAccountOfferTypeOutput
	ToDatabaseAccountOfferTypeOutputWithContext(context.Context) DatabaseAccountOfferTypeOutput
}

var databaseAccountOfferTypePtrType = reflect.TypeOf((**DatabaseAccountOfferType)(nil)).Elem()

type DatabaseAccountOfferTypePtrInput interface {
	pulumi.Input

	ToDatabaseAccountOfferTypePtrOutput() DatabaseAccountOfferTypePtrOutput
	ToDatabaseAccountOfferTypePtrOutputWithContext(context.Context) DatabaseAccountOfferTypePtrOutput
}

type databaseAccountOfferTypePtr string

func DatabaseAccountOfferTypePtr(v string) DatabaseAccountOfferTypePtrInput {
	return (*databaseAccountOfferTypePtr)(&v)
}

func (*databaseAccountOfferTypePtr) ElementType() reflect.Type {
	return databaseAccountOfferTypePtrType
}

func (in *databaseAccountOfferTypePtr) ToDatabaseAccountOfferTypePtrOutput() DatabaseAccountOfferTypePtrOutput {
	return pulumi.ToOutput(in).(DatabaseAccountOfferTypePtrOutput)
}

func (in *databaseAccountOfferTypePtr) ToDatabaseAccountOfferTypePtrOutputWithContext(ctx context.Context) DatabaseAccountOfferTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(DatabaseAccountOfferTypePtrOutput)
}

type DefaultConsistencyLevel string

const (
	DefaultConsistencyLevelEventual         = DefaultConsistencyLevel("Eventual")
	DefaultConsistencyLevelSession          = DefaultConsistencyLevel("Session")
	DefaultConsistencyLevelBoundedStaleness = DefaultConsistencyLevel("BoundedStaleness")
	DefaultConsistencyLevelStrong           = DefaultConsistencyLevel("Strong")
	DefaultConsistencyLevelConsistentPrefix = DefaultConsistencyLevel("ConsistentPrefix")
)

func (DefaultConsistencyLevel) ElementType() reflect.Type {
	return reflect.TypeOf((*DefaultConsistencyLevel)(nil)).Elem()
}

func (e DefaultConsistencyLevel) ToDefaultConsistencyLevelOutput() DefaultConsistencyLevelOutput {
	return pulumi.ToOutput(e).(DefaultConsistencyLevelOutput)
}

func (e DefaultConsistencyLevel) ToDefaultConsistencyLevelOutputWithContext(ctx context.Context) DefaultConsistencyLevelOutput {
	return pulumi.ToOutputWithContext(ctx, e).(DefaultConsistencyLevelOutput)
}

func (e DefaultConsistencyLevel) ToDefaultConsistencyLevelPtrOutput() DefaultConsistencyLevelPtrOutput {
	return e.ToDefaultConsistencyLevelPtrOutputWithContext(context.Background())
}

func (e DefaultConsistencyLevel) ToDefaultConsistencyLevelPtrOutputWithContext(ctx context.Context) DefaultConsistencyLevelPtrOutput {
	return DefaultConsistencyLevel(e).ToDefaultConsistencyLevelOutputWithContext(ctx).ToDefaultConsistencyLevelPtrOutputWithContext(ctx)
}

func (e DefaultConsistencyLevel) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e DefaultConsistencyLevel) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e DefaultConsistencyLevel) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e DefaultConsistencyLevel) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type DefaultConsistencyLevelOutput struct{ *pulumi.OutputState }

func (DefaultConsistencyLevelOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DefaultConsistencyLevel)(nil)).Elem()
}

func (o DefaultConsistencyLevelOutput) ToDefaultConsistencyLevelOutput() DefaultConsistencyLevelOutput {
	return o
}

func (o DefaultConsistencyLevelOutput) ToDefaultConsistencyLevelOutputWithContext(ctx context.Context) DefaultConsistencyLevelOutput {
	return o
}

func (o DefaultConsistencyLevelOutput) ToDefaultConsistencyLevelPtrOutput() DefaultConsistencyLevelPtrOutput {
	return o.ToDefaultConsistencyLevelPtrOutputWithContext(context.Background())
}

func (o DefaultConsistencyLevelOutput) ToDefaultConsistencyLevelPtrOutputWithContext(ctx context.Context) DefaultConsistencyLevelPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DefaultConsistencyLevel) *DefaultConsistencyLevel {
		return &v
	}).(DefaultConsistencyLevelPtrOutput)
}

func (o DefaultConsistencyLevelOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o DefaultConsistencyLevelOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e DefaultConsistencyLevel) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o DefaultConsistencyLevelOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o DefaultConsistencyLevelOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e DefaultConsistencyLevel) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type DefaultConsistencyLevelPtrOutput struct{ *pulumi.OutputState }

func (DefaultConsistencyLevelPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DefaultConsistencyLevel)(nil)).Elem()
}

func (o DefaultConsistencyLevelPtrOutput) ToDefaultConsistencyLevelPtrOutput() DefaultConsistencyLevelPtrOutput {
	return o
}

func (o DefaultConsistencyLevelPtrOutput) ToDefaultConsistencyLevelPtrOutputWithContext(ctx context.Context) DefaultConsistencyLevelPtrOutput {
	return o
}

func (o DefaultConsistencyLevelPtrOutput) Elem() DefaultConsistencyLevelOutput {
	return o.ApplyT(func(v *DefaultConsistencyLevel) DefaultConsistencyLevel {
		if v != nil {
			return *v
		}
		var ret DefaultConsistencyLevel
		return ret
	}).(DefaultConsistencyLevelOutput)
}

func (o DefaultConsistencyLevelPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o DefaultConsistencyLevelPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *DefaultConsistencyLevel) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// DefaultConsistencyLevelInput is an input type that accepts DefaultConsistencyLevelArgs and DefaultConsistencyLevelOutput values.
// You can construct a concrete instance of `DefaultConsistencyLevelInput` via:
//
//          DefaultConsistencyLevelArgs{...}
type DefaultConsistencyLevelInput interface {
	pulumi.Input

	ToDefaultConsistencyLevelOutput() DefaultConsistencyLevelOutput
	ToDefaultConsistencyLevelOutputWithContext(context.Context) DefaultConsistencyLevelOutput
}

var defaultConsistencyLevelPtrType = reflect.TypeOf((**DefaultConsistencyLevel)(nil)).Elem()

type DefaultConsistencyLevelPtrInput interface {
	pulumi.Input

	ToDefaultConsistencyLevelPtrOutput() DefaultConsistencyLevelPtrOutput
	ToDefaultConsistencyLevelPtrOutputWithContext(context.Context) DefaultConsistencyLevelPtrOutput
}

type defaultConsistencyLevelPtr string

func DefaultConsistencyLevelPtr(v string) DefaultConsistencyLevelPtrInput {
	return (*defaultConsistencyLevelPtr)(&v)
}

func (*defaultConsistencyLevelPtr) ElementType() reflect.Type {
	return defaultConsistencyLevelPtrType
}

func (in *defaultConsistencyLevelPtr) ToDefaultConsistencyLevelPtrOutput() DefaultConsistencyLevelPtrOutput {
	return pulumi.ToOutput(in).(DefaultConsistencyLevelPtrOutput)
}

func (in *defaultConsistencyLevelPtr) ToDefaultConsistencyLevelPtrOutputWithContext(ctx context.Context) DefaultConsistencyLevelPtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(DefaultConsistencyLevelPtrOutput)
}

type IndexKind string

const (
	IndexKindHash    = IndexKind("Hash")
	IndexKindRange   = IndexKind("Range")
	IndexKindSpatial = IndexKind("Spatial")
)

func (IndexKind) ElementType() reflect.Type {
	return reflect.TypeOf((*IndexKind)(nil)).Elem()
}

func (e IndexKind) ToIndexKindOutput() IndexKindOutput {
	return pulumi.ToOutput(e).(IndexKindOutput)
}

func (e IndexKind) ToIndexKindOutputWithContext(ctx context.Context) IndexKindOutput {
	return pulumi.ToOutputWithContext(ctx, e).(IndexKindOutput)
}

func (e IndexKind) ToIndexKindPtrOutput() IndexKindPtrOutput {
	return e.ToIndexKindPtrOutputWithContext(context.Background())
}

func (e IndexKind) ToIndexKindPtrOutputWithContext(ctx context.Context) IndexKindPtrOutput {
	return IndexKind(e).ToIndexKindOutputWithContext(ctx).ToIndexKindPtrOutputWithContext(ctx)
}

func (e IndexKind) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e IndexKind) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e IndexKind) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e IndexKind) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type IndexKindOutput struct{ *pulumi.OutputState }

func (IndexKindOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IndexKind)(nil)).Elem()
}

func (o IndexKindOutput) ToIndexKindOutput() IndexKindOutput {
	return o
}

func (o IndexKindOutput) ToIndexKindOutputWithContext(ctx context.Context) IndexKindOutput {
	return o
}

func (o IndexKindOutput) ToIndexKindPtrOutput() IndexKindPtrOutput {
	return o.ToIndexKindPtrOutputWithContext(context.Background())
}

func (o IndexKindOutput) ToIndexKindPtrOutputWithContext(ctx context.Context) IndexKindPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v IndexKind) *IndexKind {
		return &v
	}).(IndexKindPtrOutput)
}

func (o IndexKindOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o IndexKindOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e IndexKind) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o IndexKindOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o IndexKindOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e IndexKind) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type IndexKindPtrOutput struct{ *pulumi.OutputState }

func (IndexKindPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**IndexKind)(nil)).Elem()
}

func (o IndexKindPtrOutput) ToIndexKindPtrOutput() IndexKindPtrOutput {
	return o
}

func (o IndexKindPtrOutput) ToIndexKindPtrOutputWithContext(ctx context.Context) IndexKindPtrOutput {
	return o
}

func (o IndexKindPtrOutput) Elem() IndexKindOutput {
	return o.ApplyT(func(v *IndexKind) IndexKind {
		if v != nil {
			return *v
		}
		var ret IndexKind
		return ret
	}).(IndexKindOutput)
}

func (o IndexKindPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o IndexKindPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *IndexKind) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// IndexKindInput is an input type that accepts IndexKindArgs and IndexKindOutput values.
// You can construct a concrete instance of `IndexKindInput` via:
//
//          IndexKindArgs{...}
type IndexKindInput interface {
	pulumi.Input

	ToIndexKindOutput() IndexKindOutput
	ToIndexKindOutputWithContext(context.Context) IndexKindOutput
}

var indexKindPtrType = reflect.TypeOf((**IndexKind)(nil)).Elem()

type IndexKindPtrInput interface {
	pulumi.Input

	ToIndexKindPtrOutput() IndexKindPtrOutput
	ToIndexKindPtrOutputWithContext(context.Context) IndexKindPtrOutput
}

type indexKindPtr string

func IndexKindPtr(v string) IndexKindPtrInput {
	return (*indexKindPtr)(&v)
}

func (*indexKindPtr) ElementType() reflect.Type {
	return indexKindPtrType
}

func (in *indexKindPtr) ToIndexKindPtrOutput() IndexKindPtrOutput {
	return pulumi.ToOutput(in).(IndexKindPtrOutput)
}

func (in *indexKindPtr) ToIndexKindPtrOutputWithContext(ctx context.Context) IndexKindPtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(IndexKindPtrOutput)
}

type IndexingMode string

const (
	IndexingModeConsistent = IndexingMode("Consistent")
	IndexingModeLazy       = IndexingMode("Lazy")
	IndexingModeNone       = IndexingMode("None")
)

func (IndexingMode) ElementType() reflect.Type {
	return reflect.TypeOf((*IndexingMode)(nil)).Elem()
}

func (e IndexingMode) ToIndexingModeOutput() IndexingModeOutput {
	return pulumi.ToOutput(e).(IndexingModeOutput)
}

func (e IndexingMode) ToIndexingModeOutputWithContext(ctx context.Context) IndexingModeOutput {
	return pulumi.ToOutputWithContext(ctx, e).(IndexingModeOutput)
}

func (e IndexingMode) ToIndexingModePtrOutput() IndexingModePtrOutput {
	return e.ToIndexingModePtrOutputWithContext(context.Background())
}

func (e IndexingMode) ToIndexingModePtrOutputWithContext(ctx context.Context) IndexingModePtrOutput {
	return IndexingMode(e).ToIndexingModeOutputWithContext(ctx).ToIndexingModePtrOutputWithContext(ctx)
}

func (e IndexingMode) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e IndexingMode) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e IndexingMode) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e IndexingMode) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type IndexingModeOutput struct{ *pulumi.OutputState }

func (IndexingModeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IndexingMode)(nil)).Elem()
}

func (o IndexingModeOutput) ToIndexingModeOutput() IndexingModeOutput {
	return o
}

func (o IndexingModeOutput) ToIndexingModeOutputWithContext(ctx context.Context) IndexingModeOutput {
	return o
}

func (o IndexingModeOutput) ToIndexingModePtrOutput() IndexingModePtrOutput {
	return o.ToIndexingModePtrOutputWithContext(context.Background())
}

func (o IndexingModeOutput) ToIndexingModePtrOutputWithContext(ctx context.Context) IndexingModePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v IndexingMode) *IndexingMode {
		return &v
	}).(IndexingModePtrOutput)
}

func (o IndexingModeOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o IndexingModeOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e IndexingMode) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o IndexingModeOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o IndexingModeOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e IndexingMode) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type IndexingModePtrOutput struct{ *pulumi.OutputState }

func (IndexingModePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**IndexingMode)(nil)).Elem()
}

func (o IndexingModePtrOutput) ToIndexingModePtrOutput() IndexingModePtrOutput {
	return o
}

func (o IndexingModePtrOutput) ToIndexingModePtrOutputWithContext(ctx context.Context) IndexingModePtrOutput {
	return o
}

func (o IndexingModePtrOutput) Elem() IndexingModeOutput {
	return o.ApplyT(func(v *IndexingMode) IndexingMode {
		if v != nil {
			return *v
		}
		var ret IndexingMode
		return ret
	}).(IndexingModeOutput)
}

func (o IndexingModePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o IndexingModePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *IndexingMode) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// IndexingModeInput is an input type that accepts IndexingModeArgs and IndexingModeOutput values.
// You can construct a concrete instance of `IndexingModeInput` via:
//
//          IndexingModeArgs{...}
type IndexingModeInput interface {
	pulumi.Input

	ToIndexingModeOutput() IndexingModeOutput
	ToIndexingModeOutputWithContext(context.Context) IndexingModeOutput
}

var indexingModePtrType = reflect.TypeOf((**IndexingMode)(nil)).Elem()

type IndexingModePtrInput interface {
	pulumi.Input

	ToIndexingModePtrOutput() IndexingModePtrOutput
	ToIndexingModePtrOutputWithContext(context.Context) IndexingModePtrOutput
}

type indexingModePtr string

func IndexingModePtr(v string) IndexingModePtrInput {
	return (*indexingModePtr)(&v)
}

func (*indexingModePtr) ElementType() reflect.Type {
	return indexingModePtrType
}

func (in *indexingModePtr) ToIndexingModePtrOutput() IndexingModePtrOutput {
	return pulumi.ToOutput(in).(IndexingModePtrOutput)
}

func (in *indexingModePtr) ToIndexingModePtrOutputWithContext(ctx context.Context) IndexingModePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(IndexingModePtrOutput)
}

type PartitionKind string

const (
	PartitionKindHash  = PartitionKind("Hash")
	PartitionKindRange = PartitionKind("Range")
)

func (PartitionKind) ElementType() reflect.Type {
	return reflect.TypeOf((*PartitionKind)(nil)).Elem()
}

func (e PartitionKind) ToPartitionKindOutput() PartitionKindOutput {
	return pulumi.ToOutput(e).(PartitionKindOutput)
}

func (e PartitionKind) ToPartitionKindOutputWithContext(ctx context.Context) PartitionKindOutput {
	return pulumi.ToOutputWithContext(ctx, e).(PartitionKindOutput)
}

func (e PartitionKind) ToPartitionKindPtrOutput() PartitionKindPtrOutput {
	return e.ToPartitionKindPtrOutputWithContext(context.Background())
}

func (e PartitionKind) ToPartitionKindPtrOutputWithContext(ctx context.Context) PartitionKindPtrOutput {
	return PartitionKind(e).ToPartitionKindOutputWithContext(ctx).ToPartitionKindPtrOutputWithContext(ctx)
}

func (e PartitionKind) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e PartitionKind) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e PartitionKind) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e PartitionKind) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type PartitionKindOutput struct{ *pulumi.OutputState }

func (PartitionKindOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PartitionKind)(nil)).Elem()
}

func (o PartitionKindOutput) ToPartitionKindOutput() PartitionKindOutput {
	return o
}

func (o PartitionKindOutput) ToPartitionKindOutputWithContext(ctx context.Context) PartitionKindOutput {
	return o
}

func (o PartitionKindOutput) ToPartitionKindPtrOutput() PartitionKindPtrOutput {
	return o.ToPartitionKindPtrOutputWithContext(context.Background())
}

func (o PartitionKindOutput) ToPartitionKindPtrOutputWithContext(ctx context.Context) PartitionKindPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PartitionKind) *PartitionKind {
		return &v
	}).(PartitionKindPtrOutput)
}

func (o PartitionKindOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o PartitionKindOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e PartitionKind) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o PartitionKindOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o PartitionKindOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e PartitionKind) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type PartitionKindPtrOutput struct{ *pulumi.OutputState }

func (PartitionKindPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PartitionKind)(nil)).Elem()
}

func (o PartitionKindPtrOutput) ToPartitionKindPtrOutput() PartitionKindPtrOutput {
	return o
}

func (o PartitionKindPtrOutput) ToPartitionKindPtrOutputWithContext(ctx context.Context) PartitionKindPtrOutput {
	return o
}

func (o PartitionKindPtrOutput) Elem() PartitionKindOutput {
	return o.ApplyT(func(v *PartitionKind) PartitionKind {
		if v != nil {
			return *v
		}
		var ret PartitionKind
		return ret
	}).(PartitionKindOutput)
}

func (o PartitionKindPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o PartitionKindPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *PartitionKind) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// PartitionKindInput is an input type that accepts PartitionKindArgs and PartitionKindOutput values.
// You can construct a concrete instance of `PartitionKindInput` via:
//
//          PartitionKindArgs{...}
type PartitionKindInput interface {
	pulumi.Input

	ToPartitionKindOutput() PartitionKindOutput
	ToPartitionKindOutputWithContext(context.Context) PartitionKindOutput
}

var partitionKindPtrType = reflect.TypeOf((**PartitionKind)(nil)).Elem()

type PartitionKindPtrInput interface {
	pulumi.Input

	ToPartitionKindPtrOutput() PartitionKindPtrOutput
	ToPartitionKindPtrOutputWithContext(context.Context) PartitionKindPtrOutput
}

type partitionKindPtr string

func PartitionKindPtr(v string) PartitionKindPtrInput {
	return (*partitionKindPtr)(&v)
}

func (*partitionKindPtr) ElementType() reflect.Type {
	return partitionKindPtrType
}

func (in *partitionKindPtr) ToPartitionKindPtrOutput() PartitionKindPtrOutput {
	return pulumi.ToOutput(in).(PartitionKindPtrOutput)
}

func (in *partitionKindPtr) ToPartitionKindPtrOutputWithContext(ctx context.Context) PartitionKindPtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(PartitionKindPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(ConflictResolutionModeOutput{})
	pulumi.RegisterOutputType(ConflictResolutionModePtrOutput{})
	pulumi.RegisterOutputType(ConnectorOfferOutput{})
	pulumi.RegisterOutputType(ConnectorOfferPtrOutput{})
	pulumi.RegisterOutputType(DataTypeOutput{})
	pulumi.RegisterOutputType(DataTypePtrOutput{})
	pulumi.RegisterOutputType(DatabaseAccountKindOutput{})
	pulumi.RegisterOutputType(DatabaseAccountKindPtrOutput{})
	pulumi.RegisterOutputType(DatabaseAccountOfferTypeOutput{})
	pulumi.RegisterOutputType(DatabaseAccountOfferTypePtrOutput{})
	pulumi.RegisterOutputType(DefaultConsistencyLevelOutput{})
	pulumi.RegisterOutputType(DefaultConsistencyLevelPtrOutput{})
	pulumi.RegisterOutputType(IndexKindOutput{})
	pulumi.RegisterOutputType(IndexKindPtrOutput{})
	pulumi.RegisterOutputType(IndexingModeOutput{})
	pulumi.RegisterOutputType(IndexingModePtrOutput{})
	pulumi.RegisterOutputType(PartitionKindOutput{})
	pulumi.RegisterOutputType(PartitionKindPtrOutput{})
}
