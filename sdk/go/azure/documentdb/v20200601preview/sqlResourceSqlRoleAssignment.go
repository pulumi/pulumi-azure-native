// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v20200601preview

import (
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// An Azure Cosmos DB Role Assignment
type SqlResourceSqlRoleAssignment struct {
	pulumi.CustomResourceState

	// The name of the database account.
	Name pulumi.StringOutput `pulumi:"name"`
	// The unique identifier for the associated AAD principal in the AAD graph to which access is being granted through this Role Assignment. Tenant ID for the principal is inferred using the tenant associated with the subscription.
	PrincipalId pulumi.StringPtrOutput `pulumi:"principalId"`
	// The unique identifier for the associated Role Definition.
	RoleDefinitionId pulumi.StringPtrOutput `pulumi:"roleDefinitionId"`
	// The data plane resource path for which access is being granted through this Role Assignment.
	Scope pulumi.StringPtrOutput `pulumi:"scope"`
	// The type of Azure resource.
	Type pulumi.StringOutput `pulumi:"type"`
}

// NewSqlResourceSqlRoleAssignment registers a new resource with the given unique name, arguments, and options.
func NewSqlResourceSqlRoleAssignment(ctx *pulumi.Context,
	name string, args *SqlResourceSqlRoleAssignmentArgs, opts ...pulumi.ResourceOption) (*SqlResourceSqlRoleAssignment, error) {
	if args == nil || args.AccountName == nil {
		return nil, errors.New("missing required argument 'AccountName'")
	}
	if args == nil || args.ResourceGroupName == nil {
		return nil, errors.New("missing required argument 'ResourceGroupName'")
	}
	if args == nil || args.RoleAssignmentId == nil {
		return nil, errors.New("missing required argument 'RoleAssignmentId'")
	}
	if args == nil {
		args = &SqlResourceSqlRoleAssignmentArgs{}
	}
	var resource SqlResourceSqlRoleAssignment
	err := ctx.RegisterResource("azure-nextgen:documentdb/v20200601preview:SqlResourceSqlRoleAssignment", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSqlResourceSqlRoleAssignment gets an existing SqlResourceSqlRoleAssignment resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSqlResourceSqlRoleAssignment(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SqlResourceSqlRoleAssignmentState, opts ...pulumi.ResourceOption) (*SqlResourceSqlRoleAssignment, error) {
	var resource SqlResourceSqlRoleAssignment
	err := ctx.ReadResource("azure-nextgen:documentdb/v20200601preview:SqlResourceSqlRoleAssignment", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SqlResourceSqlRoleAssignment resources.
type sqlResourceSqlRoleAssignmentState struct {
	// The name of the database account.
	Name *string `pulumi:"name"`
	// The unique identifier for the associated AAD principal in the AAD graph to which access is being granted through this Role Assignment. Tenant ID for the principal is inferred using the tenant associated with the subscription.
	PrincipalId *string `pulumi:"principalId"`
	// The unique identifier for the associated Role Definition.
	RoleDefinitionId *string `pulumi:"roleDefinitionId"`
	// The data plane resource path for which access is being granted through this Role Assignment.
	Scope *string `pulumi:"scope"`
	// The type of Azure resource.
	Type *string `pulumi:"type"`
}

type SqlResourceSqlRoleAssignmentState struct {
	// The name of the database account.
	Name pulumi.StringPtrInput
	// The unique identifier for the associated AAD principal in the AAD graph to which access is being granted through this Role Assignment. Tenant ID for the principal is inferred using the tenant associated with the subscription.
	PrincipalId pulumi.StringPtrInput
	// The unique identifier for the associated Role Definition.
	RoleDefinitionId pulumi.StringPtrInput
	// The data plane resource path for which access is being granted through this Role Assignment.
	Scope pulumi.StringPtrInput
	// The type of Azure resource.
	Type pulumi.StringPtrInput
}

func (SqlResourceSqlRoleAssignmentState) ElementType() reflect.Type {
	return reflect.TypeOf((*sqlResourceSqlRoleAssignmentState)(nil)).Elem()
}

type sqlResourceSqlRoleAssignmentArgs struct {
	// Cosmos DB database account name.
	AccountName string `pulumi:"accountName"`
	// The unique identifier for the associated AAD principal in the AAD graph to which access is being granted through this Role Assignment. Tenant ID for the principal is inferred using the tenant associated with the subscription.
	PrincipalId *string `pulumi:"principalId"`
	// The name of the resource group. The name is case insensitive.
	ResourceGroupName string `pulumi:"resourceGroupName"`
	// The GUID for the Role Assignment.
	RoleAssignmentId string `pulumi:"roleAssignmentId"`
	// The unique identifier for the associated Role Definition.
	RoleDefinitionId *string `pulumi:"roleDefinitionId"`
	// The data plane resource path for which access is being granted through this Role Assignment.
	Scope *string `pulumi:"scope"`
}

// The set of arguments for constructing a SqlResourceSqlRoleAssignment resource.
type SqlResourceSqlRoleAssignmentArgs struct {
	// Cosmos DB database account name.
	AccountName pulumi.StringInput
	// The unique identifier for the associated AAD principal in the AAD graph to which access is being granted through this Role Assignment. Tenant ID for the principal is inferred using the tenant associated with the subscription.
	PrincipalId pulumi.StringPtrInput
	// The name of the resource group. The name is case insensitive.
	ResourceGroupName pulumi.StringInput
	// The GUID for the Role Assignment.
	RoleAssignmentId pulumi.StringInput
	// The unique identifier for the associated Role Definition.
	RoleDefinitionId pulumi.StringPtrInput
	// The data plane resource path for which access is being granted through this Role Assignment.
	Scope pulumi.StringPtrInput
}

func (SqlResourceSqlRoleAssignmentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*sqlResourceSqlRoleAssignmentArgs)(nil)).Elem()
}
