// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v20210301preview

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Representation of a managed Cassandra cluster.
func LookupCassandraCluster(ctx *pulumi.Context, args *LookupCassandraClusterArgs, opts ...pulumi.InvokeOption) (*LookupCassandraClusterResult, error) {
	var rv LookupCassandraClusterResult
	err := ctx.Invoke("azure-native:documentdb/v20210301preview:getCassandraCluster", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type LookupCassandraClusterArgs struct {
	// Managed Cassandra cluster name.
	ClusterName string `pulumi:"clusterName"`
	// The name of the resource group. The name is case insensitive.
	ResourceGroupName string `pulumi:"resourceGroupName"`
}

// Representation of a managed Cassandra cluster.
type LookupCassandraClusterResult struct {
	// The unique resource identifier of the ARM resource.
	Id string `pulumi:"id"`
	// Identity for the resource.
	Identity *ManagedServiceIdentityResponse `pulumi:"identity"`
	// The location of the resource group to which the resource belongs.
	Location *string `pulumi:"location"`
	// The name of the ARM resource.
	Name string `pulumi:"name"`
	// Properties of a managed Cassandra cluster.
	Properties ClusterResourceResponseProperties `pulumi:"properties"`
	// Tags are a list of key-value pairs that describe the resource. These tags can be used in viewing and grouping this resource (across resource groups). A maximum of 15 tags can be provided for a resource. Each tag must have a key no greater than 128 characters and value no greater than 256 characters. For example, the default experience for a template type is set with "defaultExperience": "Cassandra". Current "defaultExperience" values also include "Table", "Graph", "DocumentDB", and "MongoDB".
	Tags map[string]string `pulumi:"tags"`
	// The type of Azure resource.
	Type string `pulumi:"type"`
}

func LookupCassandraClusterOutput(ctx *pulumi.Context, args LookupCassandraClusterOutputArgs, opts ...pulumi.InvokeOption) LookupCassandraClusterResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupCassandraClusterResult, error) {
			args := v.(LookupCassandraClusterArgs)
			r, err := LookupCassandraCluster(ctx, &args, opts...)
			var s LookupCassandraClusterResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupCassandraClusterResultOutput)
}

type LookupCassandraClusterOutputArgs struct {
	// Managed Cassandra cluster name.
	ClusterName pulumi.StringInput `pulumi:"clusterName"`
	// The name of the resource group. The name is case insensitive.
	ResourceGroupName pulumi.StringInput `pulumi:"resourceGroupName"`
}

func (LookupCassandraClusterOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupCassandraClusterArgs)(nil)).Elem()
}

// Representation of a managed Cassandra cluster.
type LookupCassandraClusterResultOutput struct{ *pulumi.OutputState }

func (LookupCassandraClusterResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupCassandraClusterResult)(nil)).Elem()
}

func (o LookupCassandraClusterResultOutput) ToLookupCassandraClusterResultOutput() LookupCassandraClusterResultOutput {
	return o
}

func (o LookupCassandraClusterResultOutput) ToLookupCassandraClusterResultOutputWithContext(ctx context.Context) LookupCassandraClusterResultOutput {
	return o
}

// The unique resource identifier of the ARM resource.
func (o LookupCassandraClusterResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCassandraClusterResult) string { return v.Id }).(pulumi.StringOutput)
}

// Identity for the resource.
func (o LookupCassandraClusterResultOutput) Identity() ManagedServiceIdentityResponsePtrOutput {
	return o.ApplyT(func(v LookupCassandraClusterResult) *ManagedServiceIdentityResponse { return v.Identity }).(ManagedServiceIdentityResponsePtrOutput)
}

// The location of the resource group to which the resource belongs.
func (o LookupCassandraClusterResultOutput) Location() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupCassandraClusterResult) *string { return v.Location }).(pulumi.StringPtrOutput)
}

// The name of the ARM resource.
func (o LookupCassandraClusterResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCassandraClusterResult) string { return v.Name }).(pulumi.StringOutput)
}

// Properties of a managed Cassandra cluster.
func (o LookupCassandraClusterResultOutput) Properties() ClusterResourceResponsePropertiesOutput {
	return o.ApplyT(func(v LookupCassandraClusterResult) ClusterResourceResponseProperties { return v.Properties }).(ClusterResourceResponsePropertiesOutput)
}

// Tags are a list of key-value pairs that describe the resource. These tags can be used in viewing and grouping this resource (across resource groups). A maximum of 15 tags can be provided for a resource. Each tag must have a key no greater than 128 characters and value no greater than 256 characters. For example, the default experience for a template type is set with "defaultExperience": "Cassandra". Current "defaultExperience" values also include "Table", "Graph", "DocumentDB", and "MongoDB".
func (o LookupCassandraClusterResultOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v LookupCassandraClusterResult) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

// The type of Azure resource.
func (o LookupCassandraClusterResultOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCassandraClusterResult) string { return v.Type }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupCassandraClusterResultOutput{})
}
