// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v20220215preview

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// An Azure Cosmos DB Cassandra view.
type CassandraResourceCassandraView struct {
	pulumi.CustomResourceState

	// Identity for the resource.
	Identity ManagedServiceIdentityResponsePtrOutput `pulumi:"identity"`
	// The location of the resource group to which the resource belongs.
	Location pulumi.StringPtrOutput `pulumi:"location"`
	// The name of the ARM resource.
	Name     pulumi.StringOutput                                 `pulumi:"name"`
	Options  CassandraViewGetPropertiesResponseOptionsPtrOutput  `pulumi:"options"`
	Resource CassandraViewGetPropertiesResponseResourcePtrOutput `pulumi:"resource"`
	// Tags are a list of key-value pairs that describe the resource. These tags can be used in viewing and grouping this resource (across resource groups). A maximum of 15 tags can be provided for a resource. Each tag must have a key no greater than 128 characters and value no greater than 256 characters. For example, the default experience for a template type is set with "defaultExperience": "Cassandra". Current "defaultExperience" values also include "Table", "Graph", "DocumentDB", and "MongoDB".
	Tags pulumi.StringMapOutput `pulumi:"tags"`
	// The type of Azure resource.
	Type pulumi.StringOutput `pulumi:"type"`
}

// NewCassandraResourceCassandraView registers a new resource with the given unique name, arguments, and options.
func NewCassandraResourceCassandraView(ctx *pulumi.Context,
	name string, args *CassandraResourceCassandraViewArgs, opts ...pulumi.ResourceOption) (*CassandraResourceCassandraView, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AccountName == nil {
		return nil, errors.New("invalid value for required argument 'AccountName'")
	}
	if args.KeyspaceName == nil {
		return nil, errors.New("invalid value for required argument 'KeyspaceName'")
	}
	if args.Resource == nil {
		return nil, errors.New("invalid value for required argument 'Resource'")
	}
	if args.ResourceGroupName == nil {
		return nil, errors.New("invalid value for required argument 'ResourceGroupName'")
	}
	aliases := pulumi.Aliases([]pulumi.Alias{
		{
			Type: pulumi.String("azure-native:documentdb:CassandraResourceCassandraView"),
		},
		{
			Type: pulumi.String("azure-native:documentdb/v20210701preview:CassandraResourceCassandraView"),
		},
		{
			Type: pulumi.String("azure-native:documentdb/v20211015preview:CassandraResourceCassandraView"),
		},
		{
			Type: pulumi.String("azure-native:documentdb/v20211115preview:CassandraResourceCassandraView"),
		},
		{
			Type: pulumi.String("azure-native:documentdb/v20220515preview:CassandraResourceCassandraView"),
		},
	})
	opts = append(opts, aliases)
	var resource CassandraResourceCassandraView
	err := ctx.RegisterResource("azure-native:documentdb/v20220215preview:CassandraResourceCassandraView", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetCassandraResourceCassandraView gets an existing CassandraResourceCassandraView resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCassandraResourceCassandraView(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *CassandraResourceCassandraViewState, opts ...pulumi.ResourceOption) (*CassandraResourceCassandraView, error) {
	var resource CassandraResourceCassandraView
	err := ctx.ReadResource("azure-native:documentdb/v20220215preview:CassandraResourceCassandraView", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering CassandraResourceCassandraView resources.
type cassandraResourceCassandraViewState struct {
}

type CassandraResourceCassandraViewState struct {
}

func (CassandraResourceCassandraViewState) ElementType() reflect.Type {
	return reflect.TypeOf((*cassandraResourceCassandraViewState)(nil)).Elem()
}

type cassandraResourceCassandraViewArgs struct {
	// Cosmos DB database account name.
	AccountName string `pulumi:"accountName"`
	// Identity for the resource.
	Identity *ManagedServiceIdentity `pulumi:"identity"`
	// Cosmos DB keyspace name.
	KeyspaceName string `pulumi:"keyspaceName"`
	// The location of the resource group to which the resource belongs.
	Location *string `pulumi:"location"`
	// A key-value pair of options to be applied for the request. This corresponds to the headers sent with the request.
	Options *CreateUpdateOptions `pulumi:"options"`
	// The standard JSON format of a Cassandra view
	Resource CassandraViewResource `pulumi:"resource"`
	// The name of the resource group. The name is case insensitive.
	ResourceGroupName string `pulumi:"resourceGroupName"`
	// Tags are a list of key-value pairs that describe the resource. These tags can be used in viewing and grouping this resource (across resource groups). A maximum of 15 tags can be provided for a resource. Each tag must have a key no greater than 128 characters and value no greater than 256 characters. For example, the default experience for a template type is set with "defaultExperience": "Cassandra". Current "defaultExperience" values also include "Table", "Graph", "DocumentDB", and "MongoDB".
	Tags map[string]string `pulumi:"tags"`
	// Cosmos DB view name.
	ViewName *string `pulumi:"viewName"`
}

// The set of arguments for constructing a CassandraResourceCassandraView resource.
type CassandraResourceCassandraViewArgs struct {
	// Cosmos DB database account name.
	AccountName pulumi.StringInput
	// Identity for the resource.
	Identity ManagedServiceIdentityPtrInput
	// Cosmos DB keyspace name.
	KeyspaceName pulumi.StringInput
	// The location of the resource group to which the resource belongs.
	Location pulumi.StringPtrInput
	// A key-value pair of options to be applied for the request. This corresponds to the headers sent with the request.
	Options CreateUpdateOptionsPtrInput
	// The standard JSON format of a Cassandra view
	Resource CassandraViewResourceInput
	// The name of the resource group. The name is case insensitive.
	ResourceGroupName pulumi.StringInput
	// Tags are a list of key-value pairs that describe the resource. These tags can be used in viewing and grouping this resource (across resource groups). A maximum of 15 tags can be provided for a resource. Each tag must have a key no greater than 128 characters and value no greater than 256 characters. For example, the default experience for a template type is set with "defaultExperience": "Cassandra". Current "defaultExperience" values also include "Table", "Graph", "DocumentDB", and "MongoDB".
	Tags pulumi.StringMapInput
	// Cosmos DB view name.
	ViewName pulumi.StringPtrInput
}

func (CassandraResourceCassandraViewArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*cassandraResourceCassandraViewArgs)(nil)).Elem()
}

type CassandraResourceCassandraViewInput interface {
	pulumi.Input

	ToCassandraResourceCassandraViewOutput() CassandraResourceCassandraViewOutput
	ToCassandraResourceCassandraViewOutputWithContext(ctx context.Context) CassandraResourceCassandraViewOutput
}

func (*CassandraResourceCassandraView) ElementType() reflect.Type {
	return reflect.TypeOf((**CassandraResourceCassandraView)(nil)).Elem()
}

func (i *CassandraResourceCassandraView) ToCassandraResourceCassandraViewOutput() CassandraResourceCassandraViewOutput {
	return i.ToCassandraResourceCassandraViewOutputWithContext(context.Background())
}

func (i *CassandraResourceCassandraView) ToCassandraResourceCassandraViewOutputWithContext(ctx context.Context) CassandraResourceCassandraViewOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CassandraResourceCassandraViewOutput)
}

type CassandraResourceCassandraViewOutput struct{ *pulumi.OutputState }

func (CassandraResourceCassandraViewOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CassandraResourceCassandraView)(nil)).Elem()
}

func (o CassandraResourceCassandraViewOutput) ToCassandraResourceCassandraViewOutput() CassandraResourceCassandraViewOutput {
	return o
}

func (o CassandraResourceCassandraViewOutput) ToCassandraResourceCassandraViewOutputWithContext(ctx context.Context) CassandraResourceCassandraViewOutput {
	return o
}

// Identity for the resource.
func (o CassandraResourceCassandraViewOutput) Identity() ManagedServiceIdentityResponsePtrOutput {
	return o.ApplyT(func(v *CassandraResourceCassandraView) ManagedServiceIdentityResponsePtrOutput { return v.Identity }).(ManagedServiceIdentityResponsePtrOutput)
}

// The location of the resource group to which the resource belongs.
func (o CassandraResourceCassandraViewOutput) Location() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CassandraResourceCassandraView) pulumi.StringPtrOutput { return v.Location }).(pulumi.StringPtrOutput)
}

// The name of the ARM resource.
func (o CassandraResourceCassandraViewOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *CassandraResourceCassandraView) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o CassandraResourceCassandraViewOutput) Options() CassandraViewGetPropertiesResponseOptionsPtrOutput {
	return o.ApplyT(func(v *CassandraResourceCassandraView) CassandraViewGetPropertiesResponseOptionsPtrOutput {
		return v.Options
	}).(CassandraViewGetPropertiesResponseOptionsPtrOutput)
}

func (o CassandraResourceCassandraViewOutput) Resource() CassandraViewGetPropertiesResponseResourcePtrOutput {
	return o.ApplyT(func(v *CassandraResourceCassandraView) CassandraViewGetPropertiesResponseResourcePtrOutput {
		return v.Resource
	}).(CassandraViewGetPropertiesResponseResourcePtrOutput)
}

// Tags are a list of key-value pairs that describe the resource. These tags can be used in viewing and grouping this resource (across resource groups). A maximum of 15 tags can be provided for a resource. Each tag must have a key no greater than 128 characters and value no greater than 256 characters. For example, the default experience for a template type is set with "defaultExperience": "Cassandra". Current "defaultExperience" values also include "Table", "Graph", "DocumentDB", and "MongoDB".
func (o CassandraResourceCassandraViewOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *CassandraResourceCassandraView) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

// The type of Azure resource.
func (o CassandraResourceCassandraViewOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *CassandraResourceCassandraView) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(CassandraResourceCassandraViewOutput{})
}
