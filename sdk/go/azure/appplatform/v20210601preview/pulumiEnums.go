// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v20210601preview

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type ManagedIdentityType string

const (
	ManagedIdentityTypeNone                         = ManagedIdentityType("None")
	ManagedIdentityTypeSystemAssigned               = ManagedIdentityType("SystemAssigned")
	ManagedIdentityTypeUserAssigned                 = ManagedIdentityType("UserAssigned")
	ManagedIdentityType_SystemAssigned_UserAssigned = ManagedIdentityType("SystemAssigned,UserAssigned")
)

func (ManagedIdentityType) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedIdentityType)(nil)).Elem()
}

func (e ManagedIdentityType) ToManagedIdentityTypeOutput() ManagedIdentityTypeOutput {
	return pulumi.ToOutput(e).(ManagedIdentityTypeOutput)
}

func (e ManagedIdentityType) ToManagedIdentityTypeOutputWithContext(ctx context.Context) ManagedIdentityTypeOutput {
	return pulumi.ToOutputWithContext(ctx, e).(ManagedIdentityTypeOutput)
}

func (e ManagedIdentityType) ToManagedIdentityTypePtrOutput() ManagedIdentityTypePtrOutput {
	return e.ToManagedIdentityTypePtrOutputWithContext(context.Background())
}

func (e ManagedIdentityType) ToManagedIdentityTypePtrOutputWithContext(ctx context.Context) ManagedIdentityTypePtrOutput {
	return ManagedIdentityType(e).ToManagedIdentityTypeOutputWithContext(ctx).ToManagedIdentityTypePtrOutputWithContext(ctx)
}

func (e ManagedIdentityType) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e ManagedIdentityType) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e ManagedIdentityType) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e ManagedIdentityType) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type ManagedIdentityTypeOutput struct{ *pulumi.OutputState }

func (ManagedIdentityTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedIdentityType)(nil)).Elem()
}

func (o ManagedIdentityTypeOutput) ToManagedIdentityTypeOutput() ManagedIdentityTypeOutput {
	return o
}

func (o ManagedIdentityTypeOutput) ToManagedIdentityTypeOutputWithContext(ctx context.Context) ManagedIdentityTypeOutput {
	return o
}

func (o ManagedIdentityTypeOutput) ToManagedIdentityTypePtrOutput() ManagedIdentityTypePtrOutput {
	return o.ToManagedIdentityTypePtrOutputWithContext(context.Background())
}

func (o ManagedIdentityTypeOutput) ToManagedIdentityTypePtrOutputWithContext(ctx context.Context) ManagedIdentityTypePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ManagedIdentityType) *ManagedIdentityType {
		return &v
	}).(ManagedIdentityTypePtrOutput)
}

func (o ManagedIdentityTypeOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o ManagedIdentityTypeOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e ManagedIdentityType) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o ManagedIdentityTypeOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o ManagedIdentityTypeOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e ManagedIdentityType) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type ManagedIdentityTypePtrOutput struct{ *pulumi.OutputState }

func (ManagedIdentityTypePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ManagedIdentityType)(nil)).Elem()
}

func (o ManagedIdentityTypePtrOutput) ToManagedIdentityTypePtrOutput() ManagedIdentityTypePtrOutput {
	return o
}

func (o ManagedIdentityTypePtrOutput) ToManagedIdentityTypePtrOutputWithContext(ctx context.Context) ManagedIdentityTypePtrOutput {
	return o
}

func (o ManagedIdentityTypePtrOutput) Elem() ManagedIdentityTypeOutput {
	return o.ApplyT(func(v *ManagedIdentityType) ManagedIdentityType {
		if v != nil {
			return *v
		}
		var ret ManagedIdentityType
		return ret
	}).(ManagedIdentityTypeOutput)
}

func (o ManagedIdentityTypePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o ManagedIdentityTypePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *ManagedIdentityType) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// ManagedIdentityTypeInput is an input type that accepts ManagedIdentityTypeArgs and ManagedIdentityTypeOutput values.
// You can construct a concrete instance of `ManagedIdentityTypeInput` via:
//
//          ManagedIdentityTypeArgs{...}
type ManagedIdentityTypeInput interface {
	pulumi.Input

	ToManagedIdentityTypeOutput() ManagedIdentityTypeOutput
	ToManagedIdentityTypeOutputWithContext(context.Context) ManagedIdentityTypeOutput
}

var managedIdentityTypePtrType = reflect.TypeOf((**ManagedIdentityType)(nil)).Elem()

type ManagedIdentityTypePtrInput interface {
	pulumi.Input

	ToManagedIdentityTypePtrOutput() ManagedIdentityTypePtrOutput
	ToManagedIdentityTypePtrOutputWithContext(context.Context) ManagedIdentityTypePtrOutput
}

type managedIdentityTypePtr string

func ManagedIdentityTypePtr(v string) ManagedIdentityTypePtrInput {
	return (*managedIdentityTypePtr)(&v)
}

func (*managedIdentityTypePtr) ElementType() reflect.Type {
	return managedIdentityTypePtrType
}

func (in *managedIdentityTypePtr) ToManagedIdentityTypePtrOutput() ManagedIdentityTypePtrOutput {
	return pulumi.ToOutput(in).(ManagedIdentityTypePtrOutput)
}

func (in *managedIdentityTypePtr) ToManagedIdentityTypePtrOutputWithContext(ctx context.Context) ManagedIdentityTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(ManagedIdentityTypePtrOutput)
}

type RuntimeVersion string

const (
	RuntimeVersion_Java_8     = RuntimeVersion("Java_8")
	RuntimeVersion_Java_11    = RuntimeVersion("Java_11")
	RuntimeVersion_NetCore_31 = RuntimeVersion("NetCore_31")
)

func (RuntimeVersion) ElementType() reflect.Type {
	return reflect.TypeOf((*RuntimeVersion)(nil)).Elem()
}

func (e RuntimeVersion) ToRuntimeVersionOutput() RuntimeVersionOutput {
	return pulumi.ToOutput(e).(RuntimeVersionOutput)
}

func (e RuntimeVersion) ToRuntimeVersionOutputWithContext(ctx context.Context) RuntimeVersionOutput {
	return pulumi.ToOutputWithContext(ctx, e).(RuntimeVersionOutput)
}

func (e RuntimeVersion) ToRuntimeVersionPtrOutput() RuntimeVersionPtrOutput {
	return e.ToRuntimeVersionPtrOutputWithContext(context.Background())
}

func (e RuntimeVersion) ToRuntimeVersionPtrOutputWithContext(ctx context.Context) RuntimeVersionPtrOutput {
	return RuntimeVersion(e).ToRuntimeVersionOutputWithContext(ctx).ToRuntimeVersionPtrOutputWithContext(ctx)
}

func (e RuntimeVersion) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e RuntimeVersion) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e RuntimeVersion) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e RuntimeVersion) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type RuntimeVersionOutput struct{ *pulumi.OutputState }

func (RuntimeVersionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RuntimeVersion)(nil)).Elem()
}

func (o RuntimeVersionOutput) ToRuntimeVersionOutput() RuntimeVersionOutput {
	return o
}

func (o RuntimeVersionOutput) ToRuntimeVersionOutputWithContext(ctx context.Context) RuntimeVersionOutput {
	return o
}

func (o RuntimeVersionOutput) ToRuntimeVersionPtrOutput() RuntimeVersionPtrOutput {
	return o.ToRuntimeVersionPtrOutputWithContext(context.Background())
}

func (o RuntimeVersionOutput) ToRuntimeVersionPtrOutputWithContext(ctx context.Context) RuntimeVersionPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RuntimeVersion) *RuntimeVersion {
		return &v
	}).(RuntimeVersionPtrOutput)
}

func (o RuntimeVersionOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o RuntimeVersionOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e RuntimeVersion) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o RuntimeVersionOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o RuntimeVersionOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e RuntimeVersion) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type RuntimeVersionPtrOutput struct{ *pulumi.OutputState }

func (RuntimeVersionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RuntimeVersion)(nil)).Elem()
}

func (o RuntimeVersionPtrOutput) ToRuntimeVersionPtrOutput() RuntimeVersionPtrOutput {
	return o
}

func (o RuntimeVersionPtrOutput) ToRuntimeVersionPtrOutputWithContext(ctx context.Context) RuntimeVersionPtrOutput {
	return o
}

func (o RuntimeVersionPtrOutput) Elem() RuntimeVersionOutput {
	return o.ApplyT(func(v *RuntimeVersion) RuntimeVersion {
		if v != nil {
			return *v
		}
		var ret RuntimeVersion
		return ret
	}).(RuntimeVersionOutput)
}

func (o RuntimeVersionPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o RuntimeVersionPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *RuntimeVersion) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// RuntimeVersionInput is an input type that accepts RuntimeVersionArgs and RuntimeVersionOutput values.
// You can construct a concrete instance of `RuntimeVersionInput` via:
//
//          RuntimeVersionArgs{...}
type RuntimeVersionInput interface {
	pulumi.Input

	ToRuntimeVersionOutput() RuntimeVersionOutput
	ToRuntimeVersionOutputWithContext(context.Context) RuntimeVersionOutput
}

var runtimeVersionPtrType = reflect.TypeOf((**RuntimeVersion)(nil)).Elem()

type RuntimeVersionPtrInput interface {
	pulumi.Input

	ToRuntimeVersionPtrOutput() RuntimeVersionPtrOutput
	ToRuntimeVersionPtrOutputWithContext(context.Context) RuntimeVersionPtrOutput
}

type runtimeVersionPtr string

func RuntimeVersionPtr(v string) RuntimeVersionPtrInput {
	return (*runtimeVersionPtr)(&v)
}

func (*runtimeVersionPtr) ElementType() reflect.Type {
	return runtimeVersionPtrType
}

func (in *runtimeVersionPtr) ToRuntimeVersionPtrOutput() RuntimeVersionPtrOutput {
	return pulumi.ToOutput(in).(RuntimeVersionPtrOutput)
}

func (in *runtimeVersionPtr) ToRuntimeVersionPtrOutputWithContext(ctx context.Context) RuntimeVersionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(RuntimeVersionPtrOutput)
}

type UserSourceType string

const (
	UserSourceTypeJar        = UserSourceType("Jar")
	UserSourceTypeNetCoreZip = UserSourceType("NetCoreZip")
	UserSourceTypeSource     = UserSourceType("Source")
	UserSourceTypeContainer  = UserSourceType("Container")
)

func (UserSourceType) ElementType() reflect.Type {
	return reflect.TypeOf((*UserSourceType)(nil)).Elem()
}

func (e UserSourceType) ToUserSourceTypeOutput() UserSourceTypeOutput {
	return pulumi.ToOutput(e).(UserSourceTypeOutput)
}

func (e UserSourceType) ToUserSourceTypeOutputWithContext(ctx context.Context) UserSourceTypeOutput {
	return pulumi.ToOutputWithContext(ctx, e).(UserSourceTypeOutput)
}

func (e UserSourceType) ToUserSourceTypePtrOutput() UserSourceTypePtrOutput {
	return e.ToUserSourceTypePtrOutputWithContext(context.Background())
}

func (e UserSourceType) ToUserSourceTypePtrOutputWithContext(ctx context.Context) UserSourceTypePtrOutput {
	return UserSourceType(e).ToUserSourceTypeOutputWithContext(ctx).ToUserSourceTypePtrOutputWithContext(ctx)
}

func (e UserSourceType) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e UserSourceType) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e UserSourceType) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e UserSourceType) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type UserSourceTypeOutput struct{ *pulumi.OutputState }

func (UserSourceTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*UserSourceType)(nil)).Elem()
}

func (o UserSourceTypeOutput) ToUserSourceTypeOutput() UserSourceTypeOutput {
	return o
}

func (o UserSourceTypeOutput) ToUserSourceTypeOutputWithContext(ctx context.Context) UserSourceTypeOutput {
	return o
}

func (o UserSourceTypeOutput) ToUserSourceTypePtrOutput() UserSourceTypePtrOutput {
	return o.ToUserSourceTypePtrOutputWithContext(context.Background())
}

func (o UserSourceTypeOutput) ToUserSourceTypePtrOutputWithContext(ctx context.Context) UserSourceTypePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v UserSourceType) *UserSourceType {
		return &v
	}).(UserSourceTypePtrOutput)
}

func (o UserSourceTypeOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o UserSourceTypeOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e UserSourceType) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o UserSourceTypeOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o UserSourceTypeOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e UserSourceType) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type UserSourceTypePtrOutput struct{ *pulumi.OutputState }

func (UserSourceTypePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**UserSourceType)(nil)).Elem()
}

func (o UserSourceTypePtrOutput) ToUserSourceTypePtrOutput() UserSourceTypePtrOutput {
	return o
}

func (o UserSourceTypePtrOutput) ToUserSourceTypePtrOutputWithContext(ctx context.Context) UserSourceTypePtrOutput {
	return o
}

func (o UserSourceTypePtrOutput) Elem() UserSourceTypeOutput {
	return o.ApplyT(func(v *UserSourceType) UserSourceType {
		if v != nil {
			return *v
		}
		var ret UserSourceType
		return ret
	}).(UserSourceTypeOutput)
}

func (o UserSourceTypePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o UserSourceTypePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *UserSourceType) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// UserSourceTypeInput is an input type that accepts UserSourceTypeArgs and UserSourceTypeOutput values.
// You can construct a concrete instance of `UserSourceTypeInput` via:
//
//          UserSourceTypeArgs{...}
type UserSourceTypeInput interface {
	pulumi.Input

	ToUserSourceTypeOutput() UserSourceTypeOutput
	ToUserSourceTypeOutputWithContext(context.Context) UserSourceTypeOutput
}

var userSourceTypePtrType = reflect.TypeOf((**UserSourceType)(nil)).Elem()

type UserSourceTypePtrInput interface {
	pulumi.Input

	ToUserSourceTypePtrOutput() UserSourceTypePtrOutput
	ToUserSourceTypePtrOutputWithContext(context.Context) UserSourceTypePtrOutput
}

type userSourceTypePtr string

func UserSourceTypePtr(v string) UserSourceTypePtrInput {
	return (*userSourceTypePtr)(&v)
}

func (*userSourceTypePtr) ElementType() reflect.Type {
	return userSourceTypePtrType
}

func (in *userSourceTypePtr) ToUserSourceTypePtrOutput() UserSourceTypePtrOutput {
	return pulumi.ToOutput(in).(UserSourceTypePtrOutput)
}

func (in *userSourceTypePtr) ToUserSourceTypePtrOutputWithContext(ctx context.Context) UserSourceTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(UserSourceTypePtrOutput)
}

func init() {
	pulumi.RegisterOutputType(ManagedIdentityTypeOutput{})
	pulumi.RegisterOutputType(ManagedIdentityTypePtrOutput{})
	pulumi.RegisterOutputType(RuntimeVersionOutput{})
	pulumi.RegisterOutputType(RuntimeVersionPtrOutput{})
	pulumi.RegisterOutputType(UserSourceTypeOutput{})
	pulumi.RegisterOutputType(UserSourceTypePtrOutput{})
}
