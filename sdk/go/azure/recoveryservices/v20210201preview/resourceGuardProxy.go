// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v20210201preview

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type ResourceGuardProxy struct {
	pulumi.CustomResourceState

	// Optional ETag.
	ETag pulumi.StringPtrOutput `pulumi:"eTag"`
	// Resource location.
	Location pulumi.StringPtrOutput `pulumi:"location"`
	// Resource name associated with the resource.
	Name pulumi.StringOutput `pulumi:"name"`
	// ResourceGuardProxyBaseResource properties
	Properties ResourceGuardProxyBaseResponseOutput `pulumi:"properties"`
	// Resource tags.
	Tags pulumi.StringMapOutput `pulumi:"tags"`
	// Resource type represents the complete path of the form Namespace/ResourceType/ResourceType/...
	Type pulumi.StringOutput `pulumi:"type"`
}

// NewResourceGuardProxy registers a new resource with the given unique name, arguments, and options.
func NewResourceGuardProxy(ctx *pulumi.Context,
	name string, args *ResourceGuardProxyArgs, opts ...pulumi.ResourceOption) (*ResourceGuardProxy, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ResourceGroupName == nil {
		return nil, errors.New("invalid value for required argument 'ResourceGroupName'")
	}
	if args.VaultName == nil {
		return nil, errors.New("invalid value for required argument 'VaultName'")
	}
	aliases := pulumi.Aliases([]pulumi.Alias{
		{
			Type: pulumi.String("azure-nextgen:recoveryservices/v20210201preview:ResourceGuardProxy"),
		},
		{
			Type: pulumi.String("azure-native:recoveryservices:ResourceGuardProxy"),
		},
		{
			Type: pulumi.String("azure-nextgen:recoveryservices:ResourceGuardProxy"),
		},
	})
	opts = append(opts, aliases)
	var resource ResourceGuardProxy
	err := ctx.RegisterResource("azure-native:recoveryservices/v20210201preview:ResourceGuardProxy", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetResourceGuardProxy gets an existing ResourceGuardProxy resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetResourceGuardProxy(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ResourceGuardProxyState, opts ...pulumi.ResourceOption) (*ResourceGuardProxy, error) {
	var resource ResourceGuardProxy
	err := ctx.ReadResource("azure-native:recoveryservices/v20210201preview:ResourceGuardProxy", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ResourceGuardProxy resources.
type resourceGuardProxyState struct {
	// Optional ETag.
	ETag *string `pulumi:"eTag"`
	// Resource location.
	Location *string `pulumi:"location"`
	// Resource name associated with the resource.
	Name *string `pulumi:"name"`
	// ResourceGuardProxyBaseResource properties
	Properties *ResourceGuardProxyBaseResponse `pulumi:"properties"`
	// Resource tags.
	Tags map[string]string `pulumi:"tags"`
	// Resource type represents the complete path of the form Namespace/ResourceType/ResourceType/...
	Type *string `pulumi:"type"`
}

type ResourceGuardProxyState struct {
	// Optional ETag.
	ETag pulumi.StringPtrInput
	// Resource location.
	Location pulumi.StringPtrInput
	// Resource name associated with the resource.
	Name pulumi.StringPtrInput
	// ResourceGuardProxyBaseResource properties
	Properties ResourceGuardProxyBaseResponsePtrInput
	// Resource tags.
	Tags pulumi.StringMapInput
	// Resource type represents the complete path of the form Namespace/ResourceType/ResourceType/...
	Type pulumi.StringPtrInput
}

func (ResourceGuardProxyState) ElementType() reflect.Type {
	return reflect.TypeOf((*resourceGuardProxyState)(nil)).Elem()
}

type resourceGuardProxyArgs struct {
	// The name of the resource group where the recovery services vault is present.
	ResourceGroupName      string  `pulumi:"resourceGroupName"`
	ResourceGuardProxyName *string `pulumi:"resourceGuardProxyName"`
	// The name of the recovery services vault.
	VaultName string `pulumi:"vaultName"`
}

// The set of arguments for constructing a ResourceGuardProxy resource.
type ResourceGuardProxyArgs struct {
	// The name of the resource group where the recovery services vault is present.
	ResourceGroupName      pulumi.StringInput
	ResourceGuardProxyName pulumi.StringPtrInput
	// The name of the recovery services vault.
	VaultName pulumi.StringInput
}

func (ResourceGuardProxyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*resourceGuardProxyArgs)(nil)).Elem()
}

type ResourceGuardProxyInput interface {
	pulumi.Input

	ToResourceGuardProxyOutput() ResourceGuardProxyOutput
	ToResourceGuardProxyOutputWithContext(ctx context.Context) ResourceGuardProxyOutput
}

func (*ResourceGuardProxy) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceGuardProxy)(nil))
}

func (i *ResourceGuardProxy) ToResourceGuardProxyOutput() ResourceGuardProxyOutput {
	return i.ToResourceGuardProxyOutputWithContext(context.Background())
}

func (i *ResourceGuardProxy) ToResourceGuardProxyOutputWithContext(ctx context.Context) ResourceGuardProxyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceGuardProxyOutput)
}

type ResourceGuardProxyOutput struct {
	*pulumi.OutputState
}

func (ResourceGuardProxyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceGuardProxy)(nil))
}

func (o ResourceGuardProxyOutput) ToResourceGuardProxyOutput() ResourceGuardProxyOutput {
	return o
}

func (o ResourceGuardProxyOutput) ToResourceGuardProxyOutputWithContext(ctx context.Context) ResourceGuardProxyOutput {
	return o
}

func init() {
	pulumi.RegisterOutputType(ResourceGuardProxyOutput{})
}
