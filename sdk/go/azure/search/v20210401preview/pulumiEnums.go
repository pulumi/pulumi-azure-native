// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v20210401preview

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Describes what response the data plane API of a Search service would send for requests that failed authentication.
type AadAuthFailureMode string

const (
	// Indicates that requests that failed authentication should be presented with an HTTP status code of 403 (Forbidden).
	AadAuthFailureModeHttp403 = AadAuthFailureMode("http403")
	// Indicates that requests that failed authentication should be presented with an HTTP status code of 401 (Unauthorized) and present a Bearer Challenge.
	AadAuthFailureModeHttp401WithBearerChallenge = AadAuthFailureMode("http401WithBearerChallenge")
)

func (AadAuthFailureMode) ElementType() reflect.Type {
	return reflect.TypeOf((*AadAuthFailureMode)(nil)).Elem()
}

func (e AadAuthFailureMode) ToAadAuthFailureModeOutput() AadAuthFailureModeOutput {
	return pulumi.ToOutput(e).(AadAuthFailureModeOutput)
}

func (e AadAuthFailureMode) ToAadAuthFailureModeOutputWithContext(ctx context.Context) AadAuthFailureModeOutput {
	return pulumi.ToOutputWithContext(ctx, e).(AadAuthFailureModeOutput)
}

func (e AadAuthFailureMode) ToAadAuthFailureModePtrOutput() AadAuthFailureModePtrOutput {
	return e.ToAadAuthFailureModePtrOutputWithContext(context.Background())
}

func (e AadAuthFailureMode) ToAadAuthFailureModePtrOutputWithContext(ctx context.Context) AadAuthFailureModePtrOutput {
	return AadAuthFailureMode(e).ToAadAuthFailureModeOutputWithContext(ctx).ToAadAuthFailureModePtrOutputWithContext(ctx)
}

func (e AadAuthFailureMode) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e AadAuthFailureMode) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e AadAuthFailureMode) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e AadAuthFailureMode) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type AadAuthFailureModeOutput struct{ *pulumi.OutputState }

func (AadAuthFailureModeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AadAuthFailureMode)(nil)).Elem()
}

func (o AadAuthFailureModeOutput) ToAadAuthFailureModeOutput() AadAuthFailureModeOutput {
	return o
}

func (o AadAuthFailureModeOutput) ToAadAuthFailureModeOutputWithContext(ctx context.Context) AadAuthFailureModeOutput {
	return o
}

func (o AadAuthFailureModeOutput) ToAadAuthFailureModePtrOutput() AadAuthFailureModePtrOutput {
	return o.ToAadAuthFailureModePtrOutputWithContext(context.Background())
}

func (o AadAuthFailureModeOutput) ToAadAuthFailureModePtrOutputWithContext(ctx context.Context) AadAuthFailureModePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v AadAuthFailureMode) *AadAuthFailureMode {
		return &v
	}).(AadAuthFailureModePtrOutput)
}

func (o AadAuthFailureModeOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o AadAuthFailureModeOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e AadAuthFailureMode) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o AadAuthFailureModeOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o AadAuthFailureModeOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e AadAuthFailureMode) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type AadAuthFailureModePtrOutput struct{ *pulumi.OutputState }

func (AadAuthFailureModePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AadAuthFailureMode)(nil)).Elem()
}

func (o AadAuthFailureModePtrOutput) ToAadAuthFailureModePtrOutput() AadAuthFailureModePtrOutput {
	return o
}

func (o AadAuthFailureModePtrOutput) ToAadAuthFailureModePtrOutputWithContext(ctx context.Context) AadAuthFailureModePtrOutput {
	return o
}

func (o AadAuthFailureModePtrOutput) Elem() AadAuthFailureModeOutput {
	return o.ApplyT(func(v *AadAuthFailureMode) AadAuthFailureMode {
		if v != nil {
			return *v
		}
		var ret AadAuthFailureMode
		return ret
	}).(AadAuthFailureModeOutput)
}

func (o AadAuthFailureModePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o AadAuthFailureModePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *AadAuthFailureMode) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// AadAuthFailureModeInput is an input type that accepts AadAuthFailureModeArgs and AadAuthFailureModeOutput values.
// You can construct a concrete instance of `AadAuthFailureModeInput` via:
//
//	AadAuthFailureModeArgs{...}
type AadAuthFailureModeInput interface {
	pulumi.Input

	ToAadAuthFailureModeOutput() AadAuthFailureModeOutput
	ToAadAuthFailureModeOutputWithContext(context.Context) AadAuthFailureModeOutput
}

var aadAuthFailureModePtrType = reflect.TypeOf((**AadAuthFailureMode)(nil)).Elem()

type AadAuthFailureModePtrInput interface {
	pulumi.Input

	ToAadAuthFailureModePtrOutput() AadAuthFailureModePtrOutput
	ToAadAuthFailureModePtrOutputWithContext(context.Context) AadAuthFailureModePtrOutput
}

type aadAuthFailureModePtr string

func AadAuthFailureModePtr(v string) AadAuthFailureModePtrInput {
	return (*aadAuthFailureModePtr)(&v)
}

func (*aadAuthFailureModePtr) ElementType() reflect.Type {
	return aadAuthFailureModePtrType
}

func (in *aadAuthFailureModePtr) ToAadAuthFailureModePtrOutput() AadAuthFailureModePtrOutput {
	return pulumi.ToOutput(in).(AadAuthFailureModePtrOutput)
}

func (in *aadAuthFailureModePtr) ToAadAuthFailureModePtrOutputWithContext(ctx context.Context) AadAuthFailureModePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(AadAuthFailureModePtrOutput)
}

// Applicable only for the standard3 SKU. You can set this property to enable up to 3 high density partitions that allow up to 1000 indexes, which is much higher than the maximum indexes allowed for any other SKU. For the standard3 SKU, the value is either 'default' or 'highDensity'. For all other SKUs, this value must be 'default'.
type HostingMode string

const (
	// The limit on number of indexes is determined by the default limits for the SKU.
	HostingModeDefault = HostingMode("default")
	// Only application for standard3 SKU, where the search service can have up to 1000 indexes.
	HostingModeHighDensity = HostingMode("highDensity")
)

func (HostingMode) ElementType() reflect.Type {
	return reflect.TypeOf((*HostingMode)(nil)).Elem()
}

func (e HostingMode) ToHostingModeOutput() HostingModeOutput {
	return pulumi.ToOutput(e).(HostingModeOutput)
}

func (e HostingMode) ToHostingModeOutputWithContext(ctx context.Context) HostingModeOutput {
	return pulumi.ToOutputWithContext(ctx, e).(HostingModeOutput)
}

func (e HostingMode) ToHostingModePtrOutput() HostingModePtrOutput {
	return e.ToHostingModePtrOutputWithContext(context.Background())
}

func (e HostingMode) ToHostingModePtrOutputWithContext(ctx context.Context) HostingModePtrOutput {
	return HostingMode(e).ToHostingModeOutputWithContext(ctx).ToHostingModePtrOutputWithContext(ctx)
}

func (e HostingMode) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e HostingMode) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e HostingMode) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e HostingMode) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type HostingModeOutput struct{ *pulumi.OutputState }

func (HostingModeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HostingMode)(nil)).Elem()
}

func (o HostingModeOutput) ToHostingModeOutput() HostingModeOutput {
	return o
}

func (o HostingModeOutput) ToHostingModeOutputWithContext(ctx context.Context) HostingModeOutput {
	return o
}

func (o HostingModeOutput) ToHostingModePtrOutput() HostingModePtrOutput {
	return o.ToHostingModePtrOutputWithContext(context.Background())
}

func (o HostingModeOutput) ToHostingModePtrOutputWithContext(ctx context.Context) HostingModePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v HostingMode) *HostingMode {
		return &v
	}).(HostingModePtrOutput)
}

func (o HostingModeOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o HostingModeOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e HostingMode) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o HostingModeOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o HostingModeOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e HostingMode) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type HostingModePtrOutput struct{ *pulumi.OutputState }

func (HostingModePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**HostingMode)(nil)).Elem()
}

func (o HostingModePtrOutput) ToHostingModePtrOutput() HostingModePtrOutput {
	return o
}

func (o HostingModePtrOutput) ToHostingModePtrOutputWithContext(ctx context.Context) HostingModePtrOutput {
	return o
}

func (o HostingModePtrOutput) Elem() HostingModeOutput {
	return o.ApplyT(func(v *HostingMode) HostingMode {
		if v != nil {
			return *v
		}
		var ret HostingMode
		return ret
	}).(HostingModeOutput)
}

func (o HostingModePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o HostingModePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *HostingMode) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// HostingModeInput is an input type that accepts HostingModeArgs and HostingModeOutput values.
// You can construct a concrete instance of `HostingModeInput` via:
//
//	HostingModeArgs{...}
type HostingModeInput interface {
	pulumi.Input

	ToHostingModeOutput() HostingModeOutput
	ToHostingModeOutputWithContext(context.Context) HostingModeOutput
}

var hostingModePtrType = reflect.TypeOf((**HostingMode)(nil)).Elem()

type HostingModePtrInput interface {
	pulumi.Input

	ToHostingModePtrOutput() HostingModePtrOutput
	ToHostingModePtrOutputWithContext(context.Context) HostingModePtrOutput
}

type hostingModePtr string

func HostingModePtr(v string) HostingModePtrInput {
	return (*hostingModePtr)(&v)
}

func (*hostingModePtr) ElementType() reflect.Type {
	return hostingModePtrType
}

func (in *hostingModePtr) ToHostingModePtrOutput() HostingModePtrOutput {
	return pulumi.ToOutput(in).(HostingModePtrOutput)
}

func (in *hostingModePtr) ToHostingModePtrOutputWithContext(ctx context.Context) HostingModePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(HostingModePtrOutput)
}

// The type of identity used for the resource. The type 'SystemAssigned, UserAssigned' includes both an identity created by the system and a set of user assigned identities. The type 'None' will remove all identities from the service.
type IdentityType string

const (
	// Indicates that any identity associated with the search service needs to be removed.
	IdentityTypeNone = IdentityType("None")
	// Indicates that system-assigned identity for the search service will be enabled.
	IdentityTypeSystemAssigned = IdentityType("SystemAssigned")
	// Indicates that one or more user assigned identities will be assigned to the search service.
	IdentityTypeUserAssigned = IdentityType("UserAssigned")
	// Indicates that system-assigned identity for the search service will be enabled along with the assignment of one or more user assigned identities.
	IdentityType_SystemAssigned_UserAssigned = IdentityType("SystemAssigned, UserAssigned")
)

// Status of the the private link service connection. Can be Pending, Approved, Rejected, or Disconnected.
type PrivateLinkServiceConnectionStatus string

const (
	// The private endpoint connection has been created and is pending approval.
	PrivateLinkServiceConnectionStatusPending = PrivateLinkServiceConnectionStatus("Pending")
	// The private endpoint connection is approved and is ready for use.
	PrivateLinkServiceConnectionStatusApproved = PrivateLinkServiceConnectionStatus("Approved")
	// The private endpoint connection has been rejected and cannot be used.
	PrivateLinkServiceConnectionStatusRejected = PrivateLinkServiceConnectionStatus("Rejected")
	// The private endpoint connection has been removed from the service.
	PrivateLinkServiceConnectionStatusDisconnected = PrivateLinkServiceConnectionStatus("Disconnected")
)

func (PrivateLinkServiceConnectionStatus) ElementType() reflect.Type {
	return reflect.TypeOf((*PrivateLinkServiceConnectionStatus)(nil)).Elem()
}

func (e PrivateLinkServiceConnectionStatus) ToPrivateLinkServiceConnectionStatusOutput() PrivateLinkServiceConnectionStatusOutput {
	return pulumi.ToOutput(e).(PrivateLinkServiceConnectionStatusOutput)
}

func (e PrivateLinkServiceConnectionStatus) ToPrivateLinkServiceConnectionStatusOutputWithContext(ctx context.Context) PrivateLinkServiceConnectionStatusOutput {
	return pulumi.ToOutputWithContext(ctx, e).(PrivateLinkServiceConnectionStatusOutput)
}

func (e PrivateLinkServiceConnectionStatus) ToPrivateLinkServiceConnectionStatusPtrOutput() PrivateLinkServiceConnectionStatusPtrOutput {
	return e.ToPrivateLinkServiceConnectionStatusPtrOutputWithContext(context.Background())
}

func (e PrivateLinkServiceConnectionStatus) ToPrivateLinkServiceConnectionStatusPtrOutputWithContext(ctx context.Context) PrivateLinkServiceConnectionStatusPtrOutput {
	return PrivateLinkServiceConnectionStatus(e).ToPrivateLinkServiceConnectionStatusOutputWithContext(ctx).ToPrivateLinkServiceConnectionStatusPtrOutputWithContext(ctx)
}

func (e PrivateLinkServiceConnectionStatus) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e PrivateLinkServiceConnectionStatus) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e PrivateLinkServiceConnectionStatus) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e PrivateLinkServiceConnectionStatus) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type PrivateLinkServiceConnectionStatusOutput struct{ *pulumi.OutputState }

func (PrivateLinkServiceConnectionStatusOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PrivateLinkServiceConnectionStatus)(nil)).Elem()
}

func (o PrivateLinkServiceConnectionStatusOutput) ToPrivateLinkServiceConnectionStatusOutput() PrivateLinkServiceConnectionStatusOutput {
	return o
}

func (o PrivateLinkServiceConnectionStatusOutput) ToPrivateLinkServiceConnectionStatusOutputWithContext(ctx context.Context) PrivateLinkServiceConnectionStatusOutput {
	return o
}

func (o PrivateLinkServiceConnectionStatusOutput) ToPrivateLinkServiceConnectionStatusPtrOutput() PrivateLinkServiceConnectionStatusPtrOutput {
	return o.ToPrivateLinkServiceConnectionStatusPtrOutputWithContext(context.Background())
}

func (o PrivateLinkServiceConnectionStatusOutput) ToPrivateLinkServiceConnectionStatusPtrOutputWithContext(ctx context.Context) PrivateLinkServiceConnectionStatusPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PrivateLinkServiceConnectionStatus) *PrivateLinkServiceConnectionStatus {
		return &v
	}).(PrivateLinkServiceConnectionStatusPtrOutput)
}

func (o PrivateLinkServiceConnectionStatusOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o PrivateLinkServiceConnectionStatusOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e PrivateLinkServiceConnectionStatus) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o PrivateLinkServiceConnectionStatusOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o PrivateLinkServiceConnectionStatusOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e PrivateLinkServiceConnectionStatus) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type PrivateLinkServiceConnectionStatusPtrOutput struct{ *pulumi.OutputState }

func (PrivateLinkServiceConnectionStatusPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PrivateLinkServiceConnectionStatus)(nil)).Elem()
}

func (o PrivateLinkServiceConnectionStatusPtrOutput) ToPrivateLinkServiceConnectionStatusPtrOutput() PrivateLinkServiceConnectionStatusPtrOutput {
	return o
}

func (o PrivateLinkServiceConnectionStatusPtrOutput) ToPrivateLinkServiceConnectionStatusPtrOutputWithContext(ctx context.Context) PrivateLinkServiceConnectionStatusPtrOutput {
	return o
}

func (o PrivateLinkServiceConnectionStatusPtrOutput) Elem() PrivateLinkServiceConnectionStatusOutput {
	return o.ApplyT(func(v *PrivateLinkServiceConnectionStatus) PrivateLinkServiceConnectionStatus {
		if v != nil {
			return *v
		}
		var ret PrivateLinkServiceConnectionStatus
		return ret
	}).(PrivateLinkServiceConnectionStatusOutput)
}

func (o PrivateLinkServiceConnectionStatusPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o PrivateLinkServiceConnectionStatusPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *PrivateLinkServiceConnectionStatus) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// PrivateLinkServiceConnectionStatusInput is an input type that accepts PrivateLinkServiceConnectionStatusArgs and PrivateLinkServiceConnectionStatusOutput values.
// You can construct a concrete instance of `PrivateLinkServiceConnectionStatusInput` via:
//
//	PrivateLinkServiceConnectionStatusArgs{...}
type PrivateLinkServiceConnectionStatusInput interface {
	pulumi.Input

	ToPrivateLinkServiceConnectionStatusOutput() PrivateLinkServiceConnectionStatusOutput
	ToPrivateLinkServiceConnectionStatusOutputWithContext(context.Context) PrivateLinkServiceConnectionStatusOutput
}

var privateLinkServiceConnectionStatusPtrType = reflect.TypeOf((**PrivateLinkServiceConnectionStatus)(nil)).Elem()

type PrivateLinkServiceConnectionStatusPtrInput interface {
	pulumi.Input

	ToPrivateLinkServiceConnectionStatusPtrOutput() PrivateLinkServiceConnectionStatusPtrOutput
	ToPrivateLinkServiceConnectionStatusPtrOutputWithContext(context.Context) PrivateLinkServiceConnectionStatusPtrOutput
}

type privateLinkServiceConnectionStatusPtr string

func PrivateLinkServiceConnectionStatusPtr(v string) PrivateLinkServiceConnectionStatusPtrInput {
	return (*privateLinkServiceConnectionStatusPtr)(&v)
}

func (*privateLinkServiceConnectionStatusPtr) ElementType() reflect.Type {
	return privateLinkServiceConnectionStatusPtrType
}

func (in *privateLinkServiceConnectionStatusPtr) ToPrivateLinkServiceConnectionStatusPtrOutput() PrivateLinkServiceConnectionStatusPtrOutput {
	return pulumi.ToOutput(in).(PrivateLinkServiceConnectionStatusPtrOutput)
}

func (in *privateLinkServiceConnectionStatusPtr) ToPrivateLinkServiceConnectionStatusPtrOutputWithContext(ctx context.Context) PrivateLinkServiceConnectionStatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(PrivateLinkServiceConnectionStatusPtrOutput)
}

// This value can be set to 'enabled' to avoid breaking changes on existing customer resources and templates. If set to 'disabled', traffic over public interface is not allowed, and private endpoint connections would be the exclusive access method.
type PublicNetworkAccess string

const (
	// The search service is accessible from traffic originating from the public internet.
	PublicNetworkAccessEnabled = PublicNetworkAccess("enabled")
	// The search service is not accessible from traffic originating from the public internet. Access is only permitted over approved private endpoint connections.
	PublicNetworkAccessDisabled = PublicNetworkAccess("disabled")
)

// Possible origins of inbound traffic that can bypass the rules defined in the 'ipRules' section.
type SearchBypass string

const (
	// Indicates that no origin can bypass the rules defined in the 'ipRules' section. This is the default.
	SearchBypassNone = SearchBypass("None")
	// Indicates that requests originating from the Azure portal can bypass the rules defined in the 'ipRules' section.
	SearchBypassAzurePortal = SearchBypass("AzurePortal")
)

// A specific data exfiltration scenario that is disabled for the service.
type SearchDisabledDataExfiltrationOption string

const (
	// Indicates that all data exfiltration scenarios are disabled.
	SearchDisabledDataExfiltrationOptionAll = SearchDisabledDataExfiltrationOption("All")
)

// Describes how a search service should enforce having one or more non customer encrypted resources.
type SearchEncryptionWithCmk string

const (
	// No enforcement will be made and the search service can have non customer encrypted resources.
	SearchEncryptionWithCmkDisabled = SearchEncryptionWithCmk("Disabled")
	// Search service will be marked as non-compliant if there are one or more non customer encrypted resources.
	SearchEncryptionWithCmkEnabled = SearchEncryptionWithCmk("Enabled")
	// Enforcement policy is not explicitly specified, with the behavior being the same as if it were set to 'Disabled'.
	SearchEncryptionWithCmkUnspecified = SearchEncryptionWithCmk("Unspecified")
)

func (SearchEncryptionWithCmk) ElementType() reflect.Type {
	return reflect.TypeOf((*SearchEncryptionWithCmk)(nil)).Elem()
}

func (e SearchEncryptionWithCmk) ToSearchEncryptionWithCmkOutput() SearchEncryptionWithCmkOutput {
	return pulumi.ToOutput(e).(SearchEncryptionWithCmkOutput)
}

func (e SearchEncryptionWithCmk) ToSearchEncryptionWithCmkOutputWithContext(ctx context.Context) SearchEncryptionWithCmkOutput {
	return pulumi.ToOutputWithContext(ctx, e).(SearchEncryptionWithCmkOutput)
}

func (e SearchEncryptionWithCmk) ToSearchEncryptionWithCmkPtrOutput() SearchEncryptionWithCmkPtrOutput {
	return e.ToSearchEncryptionWithCmkPtrOutputWithContext(context.Background())
}

func (e SearchEncryptionWithCmk) ToSearchEncryptionWithCmkPtrOutputWithContext(ctx context.Context) SearchEncryptionWithCmkPtrOutput {
	return SearchEncryptionWithCmk(e).ToSearchEncryptionWithCmkOutputWithContext(ctx).ToSearchEncryptionWithCmkPtrOutputWithContext(ctx)
}

func (e SearchEncryptionWithCmk) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e SearchEncryptionWithCmk) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e SearchEncryptionWithCmk) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e SearchEncryptionWithCmk) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type SearchEncryptionWithCmkOutput struct{ *pulumi.OutputState }

func (SearchEncryptionWithCmkOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SearchEncryptionWithCmk)(nil)).Elem()
}

func (o SearchEncryptionWithCmkOutput) ToSearchEncryptionWithCmkOutput() SearchEncryptionWithCmkOutput {
	return o
}

func (o SearchEncryptionWithCmkOutput) ToSearchEncryptionWithCmkOutputWithContext(ctx context.Context) SearchEncryptionWithCmkOutput {
	return o
}

func (o SearchEncryptionWithCmkOutput) ToSearchEncryptionWithCmkPtrOutput() SearchEncryptionWithCmkPtrOutput {
	return o.ToSearchEncryptionWithCmkPtrOutputWithContext(context.Background())
}

func (o SearchEncryptionWithCmkOutput) ToSearchEncryptionWithCmkPtrOutputWithContext(ctx context.Context) SearchEncryptionWithCmkPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SearchEncryptionWithCmk) *SearchEncryptionWithCmk {
		return &v
	}).(SearchEncryptionWithCmkPtrOutput)
}

func (o SearchEncryptionWithCmkOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o SearchEncryptionWithCmkOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e SearchEncryptionWithCmk) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o SearchEncryptionWithCmkOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o SearchEncryptionWithCmkOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e SearchEncryptionWithCmk) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type SearchEncryptionWithCmkPtrOutput struct{ *pulumi.OutputState }

func (SearchEncryptionWithCmkPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SearchEncryptionWithCmk)(nil)).Elem()
}

func (o SearchEncryptionWithCmkPtrOutput) ToSearchEncryptionWithCmkPtrOutput() SearchEncryptionWithCmkPtrOutput {
	return o
}

func (o SearchEncryptionWithCmkPtrOutput) ToSearchEncryptionWithCmkPtrOutputWithContext(ctx context.Context) SearchEncryptionWithCmkPtrOutput {
	return o
}

func (o SearchEncryptionWithCmkPtrOutput) Elem() SearchEncryptionWithCmkOutput {
	return o.ApplyT(func(v *SearchEncryptionWithCmk) SearchEncryptionWithCmk {
		if v != nil {
			return *v
		}
		var ret SearchEncryptionWithCmk
		return ret
	}).(SearchEncryptionWithCmkOutput)
}

func (o SearchEncryptionWithCmkPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o SearchEncryptionWithCmkPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *SearchEncryptionWithCmk) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// SearchEncryptionWithCmkInput is an input type that accepts SearchEncryptionWithCmkArgs and SearchEncryptionWithCmkOutput values.
// You can construct a concrete instance of `SearchEncryptionWithCmkInput` via:
//
//	SearchEncryptionWithCmkArgs{...}
type SearchEncryptionWithCmkInput interface {
	pulumi.Input

	ToSearchEncryptionWithCmkOutput() SearchEncryptionWithCmkOutput
	ToSearchEncryptionWithCmkOutputWithContext(context.Context) SearchEncryptionWithCmkOutput
}

var searchEncryptionWithCmkPtrType = reflect.TypeOf((**SearchEncryptionWithCmk)(nil)).Elem()

type SearchEncryptionWithCmkPtrInput interface {
	pulumi.Input

	ToSearchEncryptionWithCmkPtrOutput() SearchEncryptionWithCmkPtrOutput
	ToSearchEncryptionWithCmkPtrOutputWithContext(context.Context) SearchEncryptionWithCmkPtrOutput
}

type searchEncryptionWithCmkPtr string

func SearchEncryptionWithCmkPtr(v string) SearchEncryptionWithCmkPtrInput {
	return (*searchEncryptionWithCmkPtr)(&v)
}

func (*searchEncryptionWithCmkPtr) ElementType() reflect.Type {
	return searchEncryptionWithCmkPtrType
}

func (in *searchEncryptionWithCmkPtr) ToSearchEncryptionWithCmkPtrOutput() SearchEncryptionWithCmkPtrOutput {
	return pulumi.ToOutput(in).(SearchEncryptionWithCmkPtrOutput)
}

func (in *searchEncryptionWithCmkPtr) ToSearchEncryptionWithCmkPtrOutputWithContext(ctx context.Context) SearchEncryptionWithCmkPtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(SearchEncryptionWithCmkPtrOutput)
}

// Sets options that control the availability of semantic search. This configuration is only possible for certain Azure Cognitive Search SKUs in certain locations.
type SearchSemanticSearch string

const (
	// Indicates that semantic search is disabled for the search service. This is the default.
	SearchSemanticSearchDisabled = SearchSemanticSearch("disabled")
	// Enables semantic search on a search service and indicates that it is to be used within the limits of the free tier. This would cap the volume of semantic search requests and is offered at no extra charge.
	SearchSemanticSearchFree = SearchSemanticSearch("free")
	// Enables semantic search on a search service as a billable feature, with higher throughput and volume of semantic search queries.
	SearchSemanticSearchStandard = SearchSemanticSearch("standard")
)

// The provisioning state of the shared private link resource. Can be Updating, Deleting, Failed, Succeeded, Incomplete or other yet to be documented value.
type SharedPrivateLinkResourceProvisioningState string

const (
	// The shared private link resource is in the process of being created along with other resources for it to be fully functional.
	SharedPrivateLinkResourceProvisioningStateUpdating = SharedPrivateLinkResourceProvisioningState("Updating")
	// The shared private link resource is in the process of being deleted.
	SharedPrivateLinkResourceProvisioningStateDeleting = SharedPrivateLinkResourceProvisioningState("Deleting")
	// The shared private link resource has failed to be provisioned or deleted.
	SharedPrivateLinkResourceProvisioningStateFailed = SharedPrivateLinkResourceProvisioningState("Failed")
	// The shared private link resource has finished provisioning and is ready for approval.
	SharedPrivateLinkResourceProvisioningStateSucceeded = SharedPrivateLinkResourceProvisioningState("Succeeded")
	// Provisioning request for the shared private link resource has been accepted but the process of creation has not commenced yet.
	SharedPrivateLinkResourceProvisioningStateIncomplete = SharedPrivateLinkResourceProvisioningState("Incomplete")
)

// Status of the shared private link resource. Can be Pending, Approved, Rejected, Disconnected or other yet to be documented value.
type SharedPrivateLinkResourceStatus string

const (
	// The shared private link resource has been created and is pending approval.
	SharedPrivateLinkResourceStatusPending = SharedPrivateLinkResourceStatus("Pending")
	// The shared private link resource is approved and is ready for use.
	SharedPrivateLinkResourceStatusApproved = SharedPrivateLinkResourceStatus("Approved")
	// The shared private link resource has been rejected and cannot be used.
	SharedPrivateLinkResourceStatusRejected = SharedPrivateLinkResourceStatus("Rejected")
	// The shared private link resource has been removed from the service.
	SharedPrivateLinkResourceStatusDisconnected = SharedPrivateLinkResourceStatus("Disconnected")
)

// The SKU of the search service. Valid values include: 'free': Shared service. 'basic': Dedicated service with up to 3 replicas. 'standard': Dedicated service with up to 12 partitions and 12 replicas. 'standard2': Similar to standard, but with more capacity per search unit. 'standard3': The largest Standard offering with up to 12 partitions and 12 replicas (or up to 3 partitions with more indexes if you also set the hostingMode property to 'highDensity'). 'storage_optimized_l1': Supports 1TB per partition, up to 12 partitions. 'storage_optimized_l2': Supports 2TB per partition, up to 12 partitions.'
type SkuName string

const (
	// Free tier, with no SLA guarantees and a subset of features offered to paid tiers.
	SkuNameFree = SkuName("free")
	// Paid tier dedicated service with up to 3 replicas.
	SkuNameBasic = SkuName("basic")
	// Paid tier dedicated service with up to 12 partitions and 12 replicas.
	SkuNameStandard = SkuName("standard")
	// Similar to 'standard', but with more capacity per search unit.
	SkuNameStandard2 = SkuName("standard2")
	//  The largest Standard offering with up to 12 partitions and 12 replicas (or up to 3 partitions with more indexes if you also set the hostingMode property to 'highDensity').
	SkuNameStandard3 = SkuName("standard3")
	// Paid tier dedicated service that supports 1TB per partition, up to 12 partitions.
	SkuNameStorageOptimizedL1 = SkuName("storage_optimized_l1")
	// Paid tier dedicated service that supports 2TB per partition, up to 12 partitions.
	SkuNameStorageOptimizedL2 = SkuName("storage_optimized_l2")
)

func init() {
	pulumi.RegisterOutputType(AadAuthFailureModeOutput{})
	pulumi.RegisterOutputType(AadAuthFailureModePtrOutput{})
	pulumi.RegisterOutputType(HostingModeOutput{})
	pulumi.RegisterOutputType(HostingModePtrOutput{})
	pulumi.RegisterOutputType(PrivateLinkServiceConnectionStatusOutput{})
	pulumi.RegisterOutputType(PrivateLinkServiceConnectionStatusPtrOutput{})
	pulumi.RegisterOutputType(SearchEncryptionWithCmkOutput{})
	pulumi.RegisterOutputType(SearchEncryptionWithCmkPtrOutput{})
}
