// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v20200501

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// SpatialAnchorsAccount Response.
type SpatialAnchorsAccount struct {
	pulumi.CustomResourceState

	// Correspond domain name of certain Spatial Anchors Account
	AccountDomain pulumi.StringOutput `pulumi:"accountDomain"`
	// unique id of certain account.
	AccountId pulumi.StringOutput `pulumi:"accountId"`
	// The identity associated with this account
	Identity IdentityResponsePtrOutput `pulumi:"identity"`
	// The kind of account, if supported
	Kind SkuResponsePtrOutput `pulumi:"kind"`
	// The geo-location where the resource lives
	Location pulumi.StringOutput `pulumi:"location"`
	// The name of the resource
	Name pulumi.StringOutput `pulumi:"name"`
	// The plan associated with this account
	Plan IdentityResponsePtrOutput `pulumi:"plan"`
	// The sku associated with this account
	Sku SkuResponsePtrOutput `pulumi:"sku"`
	// The name of the storage account associated with this accountId
	StorageAccountName pulumi.StringPtrOutput `pulumi:"storageAccountName"`
	// System metadata for this account
	SystemData SystemDataResponseOutput `pulumi:"systemData"`
	// Resource tags.
	Tags pulumi.StringMapOutput `pulumi:"tags"`
	// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
	Type pulumi.StringOutput `pulumi:"type"`
}

// NewSpatialAnchorsAccount registers a new resource with the given unique name, arguments, and options.
func NewSpatialAnchorsAccount(ctx *pulumi.Context,
	name string, args *SpatialAnchorsAccountArgs, opts ...pulumi.ResourceOption) (*SpatialAnchorsAccount, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AccountName == nil {
		return nil, errors.New("invalid value for required argument 'AccountName'")
	}
	if args.ResourceGroupName == nil {
		return nil, errors.New("invalid value for required argument 'ResourceGroupName'")
	}
	aliases := pulumi.Aliases([]pulumi.Alias{
		{
			Type: pulumi.String("azure-nextgen:mixedreality:SpatialAnchorsAccount"),
		},
		{
			Type: pulumi.String("azure-nextgen:mixedreality/latest:SpatialAnchorsAccount"),
		},
		{
			Type: pulumi.String("azure-nextgen:mixedreality/v20190228preview:SpatialAnchorsAccount"),
		},
		{
			Type: pulumi.String("azure-nextgen:mixedreality/v20191202preview:SpatialAnchorsAccount"),
		},
		{
			Type: pulumi.String("azure-nextgen:mixedreality/v20210101:SpatialAnchorsAccount"),
		},
		{
			Type: pulumi.String("azure-nextgen:mixedreality/v20210301preview:SpatialAnchorsAccount"),
		},
	})
	opts = append(opts, aliases)
	var resource SpatialAnchorsAccount
	err := ctx.RegisterResource("azure-nextgen:mixedreality/v20200501:SpatialAnchorsAccount", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSpatialAnchorsAccount gets an existing SpatialAnchorsAccount resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSpatialAnchorsAccount(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SpatialAnchorsAccountState, opts ...pulumi.ResourceOption) (*SpatialAnchorsAccount, error) {
	var resource SpatialAnchorsAccount
	err := ctx.ReadResource("azure-nextgen:mixedreality/v20200501:SpatialAnchorsAccount", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SpatialAnchorsAccount resources.
type spatialAnchorsAccountState struct {
	// Correspond domain name of certain Spatial Anchors Account
	AccountDomain *string `pulumi:"accountDomain"`
	// unique id of certain account.
	AccountId *string `pulumi:"accountId"`
	// The identity associated with this account
	Identity *IdentityResponse `pulumi:"identity"`
	// The kind of account, if supported
	Kind *SkuResponse `pulumi:"kind"`
	// The geo-location where the resource lives
	Location *string `pulumi:"location"`
	// The name of the resource
	Name *string `pulumi:"name"`
	// The plan associated with this account
	Plan *IdentityResponse `pulumi:"plan"`
	// The sku associated with this account
	Sku *SkuResponse `pulumi:"sku"`
	// The name of the storage account associated with this accountId
	StorageAccountName *string `pulumi:"storageAccountName"`
	// System metadata for this account
	SystemData *SystemDataResponse `pulumi:"systemData"`
	// Resource tags.
	Tags map[string]string `pulumi:"tags"`
	// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
	Type *string `pulumi:"type"`
}

type SpatialAnchorsAccountState struct {
	// Correspond domain name of certain Spatial Anchors Account
	AccountDomain pulumi.StringPtrInput
	// unique id of certain account.
	AccountId pulumi.StringPtrInput
	// The identity associated with this account
	Identity IdentityResponsePtrInput
	// The kind of account, if supported
	Kind SkuResponsePtrInput
	// The geo-location where the resource lives
	Location pulumi.StringPtrInput
	// The name of the resource
	Name pulumi.StringPtrInput
	// The plan associated with this account
	Plan IdentityResponsePtrInput
	// The sku associated with this account
	Sku SkuResponsePtrInput
	// The name of the storage account associated with this accountId
	StorageAccountName pulumi.StringPtrInput
	// System metadata for this account
	SystemData SystemDataResponsePtrInput
	// Resource tags.
	Tags pulumi.StringMapInput
	// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
	Type pulumi.StringPtrInput
}

func (SpatialAnchorsAccountState) ElementType() reflect.Type {
	return reflect.TypeOf((*spatialAnchorsAccountState)(nil)).Elem()
}

type spatialAnchorsAccountArgs struct {
	// Name of an Mixed Reality Account.
	AccountName string `pulumi:"accountName"`
	// The identity associated with this account
	Identity *Identity `pulumi:"identity"`
	// The kind of account, if supported
	Kind *Sku `pulumi:"kind"`
	// The geo-location where the resource lives
	Location *string `pulumi:"location"`
	// The plan associated with this account
	Plan *Identity `pulumi:"plan"`
	// Name of an Azure resource group.
	ResourceGroupName string `pulumi:"resourceGroupName"`
	// The sku associated with this account
	Sku *Sku `pulumi:"sku"`
	// The name of the storage account associated with this accountId
	StorageAccountName *string `pulumi:"storageAccountName"`
	// Resource tags.
	Tags map[string]string `pulumi:"tags"`
}

// The set of arguments for constructing a SpatialAnchorsAccount resource.
type SpatialAnchorsAccountArgs struct {
	// Name of an Mixed Reality Account.
	AccountName pulumi.StringInput
	// The identity associated with this account
	Identity IdentityPtrInput
	// The kind of account, if supported
	Kind SkuPtrInput
	// The geo-location where the resource lives
	Location pulumi.StringPtrInput
	// The plan associated with this account
	Plan IdentityPtrInput
	// Name of an Azure resource group.
	ResourceGroupName pulumi.StringInput
	// The sku associated with this account
	Sku SkuPtrInput
	// The name of the storage account associated with this accountId
	StorageAccountName pulumi.StringPtrInput
	// Resource tags.
	Tags pulumi.StringMapInput
}

func (SpatialAnchorsAccountArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*spatialAnchorsAccountArgs)(nil)).Elem()
}

type SpatialAnchorsAccountInput interface {
	pulumi.Input

	ToSpatialAnchorsAccountOutput() SpatialAnchorsAccountOutput
	ToSpatialAnchorsAccountOutputWithContext(ctx context.Context) SpatialAnchorsAccountOutput
}

func (*SpatialAnchorsAccount) ElementType() reflect.Type {
	return reflect.TypeOf((*SpatialAnchorsAccount)(nil))
}

func (i *SpatialAnchorsAccount) ToSpatialAnchorsAccountOutput() SpatialAnchorsAccountOutput {
	return i.ToSpatialAnchorsAccountOutputWithContext(context.Background())
}

func (i *SpatialAnchorsAccount) ToSpatialAnchorsAccountOutputWithContext(ctx context.Context) SpatialAnchorsAccountOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SpatialAnchorsAccountOutput)
}

type SpatialAnchorsAccountOutput struct {
	*pulumi.OutputState
}

func (SpatialAnchorsAccountOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SpatialAnchorsAccount)(nil))
}

func (o SpatialAnchorsAccountOutput) ToSpatialAnchorsAccountOutput() SpatialAnchorsAccountOutput {
	return o
}

func (o SpatialAnchorsAccountOutput) ToSpatialAnchorsAccountOutputWithContext(ctx context.Context) SpatialAnchorsAccountOutput {
	return o
}

func init() {
	pulumi.RegisterOutputType(SpatialAnchorsAccountOutput{})
}
