// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v20191202preview

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// SpatialAnchorsAccount Response.
//
// Deprecated: Version 2019-12-02-preview will be removed in v2 of the provider.
func LookupSpatialAnchorsAccount(ctx *pulumi.Context, args *LookupSpatialAnchorsAccountArgs, opts ...pulumi.InvokeOption) (*LookupSpatialAnchorsAccountResult, error) {
	var rv LookupSpatialAnchorsAccountResult
	err := ctx.Invoke("azure-native:mixedreality/v20191202preview:getSpatialAnchorsAccount", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type LookupSpatialAnchorsAccountArgs struct {
	// Name of an Mixed Reality Account.
	AccountName string `pulumi:"accountName"`
	// Name of an Azure resource group.
	ResourceGroupName string `pulumi:"resourceGroupName"`
}

// SpatialAnchorsAccount Response.
type LookupSpatialAnchorsAccountResult struct {
	// Correspond domain name of certain Spatial Anchors Account
	AccountDomain string `pulumi:"accountDomain"`
	// unique id of certain account.
	AccountId string `pulumi:"accountId"`
	// Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
	Id string `pulumi:"id"`
	// The identity associated with this account
	Identity *IdentityResponse `pulumi:"identity"`
	// The geo-location where the resource lives
	Location string `pulumi:"location"`
	// The name of the resource
	Name string `pulumi:"name"`
	// Resource tags.
	Tags map[string]string `pulumi:"tags"`
	// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
	Type string `pulumi:"type"`
}

func LookupSpatialAnchorsAccountOutput(ctx *pulumi.Context, args LookupSpatialAnchorsAccountOutputArgs, opts ...pulumi.InvokeOption) LookupSpatialAnchorsAccountResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupSpatialAnchorsAccountResult, error) {
			args := v.(LookupSpatialAnchorsAccountArgs)
			r, err := LookupSpatialAnchorsAccount(ctx, &args, opts...)
			var s LookupSpatialAnchorsAccountResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupSpatialAnchorsAccountResultOutput)
}

type LookupSpatialAnchorsAccountOutputArgs struct {
	// Name of an Mixed Reality Account.
	AccountName pulumi.StringInput `pulumi:"accountName"`
	// Name of an Azure resource group.
	ResourceGroupName pulumi.StringInput `pulumi:"resourceGroupName"`
}

func (LookupSpatialAnchorsAccountOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupSpatialAnchorsAccountArgs)(nil)).Elem()
}

// SpatialAnchorsAccount Response.
type LookupSpatialAnchorsAccountResultOutput struct{ *pulumi.OutputState }

func (LookupSpatialAnchorsAccountResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupSpatialAnchorsAccountResult)(nil)).Elem()
}

func (o LookupSpatialAnchorsAccountResultOutput) ToLookupSpatialAnchorsAccountResultOutput() LookupSpatialAnchorsAccountResultOutput {
	return o
}

func (o LookupSpatialAnchorsAccountResultOutput) ToLookupSpatialAnchorsAccountResultOutputWithContext(ctx context.Context) LookupSpatialAnchorsAccountResultOutput {
	return o
}

// Correspond domain name of certain Spatial Anchors Account
func (o LookupSpatialAnchorsAccountResultOutput) AccountDomain() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSpatialAnchorsAccountResult) string { return v.AccountDomain }).(pulumi.StringOutput)
}

// unique id of certain account.
func (o LookupSpatialAnchorsAccountResultOutput) AccountId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSpatialAnchorsAccountResult) string { return v.AccountId }).(pulumi.StringOutput)
}

// Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
func (o LookupSpatialAnchorsAccountResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSpatialAnchorsAccountResult) string { return v.Id }).(pulumi.StringOutput)
}

// The identity associated with this account
func (o LookupSpatialAnchorsAccountResultOutput) Identity() IdentityResponsePtrOutput {
	return o.ApplyT(func(v LookupSpatialAnchorsAccountResult) *IdentityResponse { return v.Identity }).(IdentityResponsePtrOutput)
}

// The geo-location where the resource lives
func (o LookupSpatialAnchorsAccountResultOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSpatialAnchorsAccountResult) string { return v.Location }).(pulumi.StringOutput)
}

// The name of the resource
func (o LookupSpatialAnchorsAccountResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSpatialAnchorsAccountResult) string { return v.Name }).(pulumi.StringOutput)
}

// Resource tags.
func (o LookupSpatialAnchorsAccountResultOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v LookupSpatialAnchorsAccountResult) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
func (o LookupSpatialAnchorsAccountResultOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSpatialAnchorsAccountResult) string { return v.Type }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupSpatialAnchorsAccountResultOutput{})
}
