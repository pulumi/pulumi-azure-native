// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package openenergyplatform

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// API Version: 2022-04-04-preview.
type EnergyService struct {
	pulumi.CustomResourceState

	// Geo-location where the resource lives.
	Location pulumi.StringOutput `pulumi:"location"`
	// The name of the resource
	Name       pulumi.StringOutput                   `pulumi:"name"`
	Properties EnergyServicePropertiesResponseOutput `pulumi:"properties"`
	// Azure Resource Manager metadata containing createdBy and modifiedBy information.
	SystemData SystemDataResponseOutput `pulumi:"systemData"`
	// Resource tags.
	Tags pulumi.StringMapOutput `pulumi:"tags"`
	// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
	Type pulumi.StringOutput `pulumi:"type"`
}

// NewEnergyService registers a new resource with the given unique name, arguments, and options.
func NewEnergyService(ctx *pulumi.Context,
	name string, args *EnergyServiceArgs, opts ...pulumi.ResourceOption) (*EnergyService, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ResourceGroupName == nil {
		return nil, errors.New("invalid value for required argument 'ResourceGroupName'")
	}
	aliases := pulumi.Aliases([]pulumi.Alias{
		{
			Type: pulumi.String("azure-native:openenergyplatform/v20210601preview:EnergyService"),
		},
		{
			Type: pulumi.String("azure-native:openenergyplatform/v20220404preview:EnergyService"),
		},
	})
	opts = append(opts, aliases)
	var resource EnergyService
	err := ctx.RegisterResource("azure-native:openenergyplatform:EnergyService", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetEnergyService gets an existing EnergyService resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetEnergyService(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *EnergyServiceState, opts ...pulumi.ResourceOption) (*EnergyService, error) {
	var resource EnergyService
	err := ctx.ReadResource("azure-native:openenergyplatform:EnergyService", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering EnergyService resources.
type energyServiceState struct {
}

type EnergyServiceState struct {
}

func (EnergyServiceState) ElementType() reflect.Type {
	return reflect.TypeOf((*energyServiceState)(nil)).Elem()
}

type energyServiceArgs struct {
	// Geo-location where the resource lives.
	Location   *string                  `pulumi:"location"`
	Properties *EnergyServiceProperties `pulumi:"properties"`
	// The name of the resource group. The name is case insensitive.
	ResourceGroupName string `pulumi:"resourceGroupName"`
	// The resource name.
	ResourceName *string `pulumi:"resourceName"`
	// Resource tags.
	Tags map[string]string `pulumi:"tags"`
}

// The set of arguments for constructing a EnergyService resource.
type EnergyServiceArgs struct {
	// Geo-location where the resource lives.
	Location   pulumi.StringPtrInput
	Properties EnergyServicePropertiesPtrInput
	// The name of the resource group. The name is case insensitive.
	ResourceGroupName pulumi.StringInput
	// The resource name.
	ResourceName pulumi.StringPtrInput
	// Resource tags.
	Tags pulumi.StringMapInput
}

func (EnergyServiceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*energyServiceArgs)(nil)).Elem()
}

type EnergyServiceInput interface {
	pulumi.Input

	ToEnergyServiceOutput() EnergyServiceOutput
	ToEnergyServiceOutputWithContext(ctx context.Context) EnergyServiceOutput
}

func (*EnergyService) ElementType() reflect.Type {
	return reflect.TypeOf((**EnergyService)(nil)).Elem()
}

func (i *EnergyService) ToEnergyServiceOutput() EnergyServiceOutput {
	return i.ToEnergyServiceOutputWithContext(context.Background())
}

func (i *EnergyService) ToEnergyServiceOutputWithContext(ctx context.Context) EnergyServiceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EnergyServiceOutput)
}

type EnergyServiceOutput struct{ *pulumi.OutputState }

func (EnergyServiceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EnergyService)(nil)).Elem()
}

func (o EnergyServiceOutput) ToEnergyServiceOutput() EnergyServiceOutput {
	return o
}

func (o EnergyServiceOutput) ToEnergyServiceOutputWithContext(ctx context.Context) EnergyServiceOutput {
	return o
}

// Geo-location where the resource lives.
func (o EnergyServiceOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *EnergyService) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// The name of the resource
func (o EnergyServiceOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *EnergyService) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o EnergyServiceOutput) Properties() EnergyServicePropertiesResponseOutput {
	return o.ApplyT(func(v *EnergyService) EnergyServicePropertiesResponseOutput { return v.Properties }).(EnergyServicePropertiesResponseOutput)
}

// Azure Resource Manager metadata containing createdBy and modifiedBy information.
func (o EnergyServiceOutput) SystemData() SystemDataResponseOutput {
	return o.ApplyT(func(v *EnergyService) SystemDataResponseOutput { return v.SystemData }).(SystemDataResponseOutput)
}

// Resource tags.
func (o EnergyServiceOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *EnergyService) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
func (o EnergyServiceOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *EnergyService) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(EnergyServiceOutput{})
}
