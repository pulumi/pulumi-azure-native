// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package desktopvirtualization

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Represents a SessionHostConfiguration definition.
// API Version: 2021-05-13-preview.
type SessionHostConfiguration struct {
	pulumi.CustomResourceState

	// The disk type used by virtual machine in hostpool session host.
	DiskType pulumi.StringPtrOutput `pulumi:"diskType"`
	// Domain configurations of session hosts.
	DomainInfo DomainInfoPropertiesResponsePtrOutput `pulumi:"domainInfo"`
	// Image configurations of HostPool.
	ImageInfo ImageInfoPropertiesResponsePtrOutput `pulumi:"imageInfo"`
	// The name of the resource
	Name pulumi.StringOutput `pulumi:"name"`
	// Metadata pertaining to creation and last modification of the resource.
	SystemData SystemDataResponseOutput `pulumi:"systemData"`
	// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
	Type pulumi.StringOutput `pulumi:"type"`
	// The id of the size of a virtual machine connected to a hostpool.
	VMSizeId pulumi.StringPtrOutput `pulumi:"vMSizeId"`
	// The time when session host configuration was last modified and something was changed.
	Version pulumi.StringOutput `pulumi:"version"`
	// The uri to the storage blob containing scripts to be run on the virtual machine after provisioning.
	VmCustomConfigurationUri pulumi.StringPtrOutput `pulumi:"vmCustomConfigurationUri"`
}

// NewSessionHostConfiguration registers a new resource with the given unique name, arguments, and options.
func NewSessionHostConfiguration(ctx *pulumi.Context,
	name string, args *SessionHostConfigurationArgs, opts ...pulumi.ResourceOption) (*SessionHostConfiguration, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.HostPoolName == nil {
		return nil, errors.New("invalid value for required argument 'HostPoolName'")
	}
	if args.ResourceGroupName == nil {
		return nil, errors.New("invalid value for required argument 'ResourceGroupName'")
	}
	aliases := pulumi.Aliases([]pulumi.Alias{
		{
			Type: pulumi.String("azure-nextgen:desktopvirtualization:SessionHostConfiguration"),
		},
		{
			Type: pulumi.String("azure-native:desktopvirtualization/v20210513preview:SessionHostConfiguration"),
		},
		{
			Type: pulumi.String("azure-nextgen:desktopvirtualization/v20210513preview:SessionHostConfiguration"),
		},
	})
	opts = append(opts, aliases)
	var resource SessionHostConfiguration
	err := ctx.RegisterResource("azure-native:desktopvirtualization:SessionHostConfiguration", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSessionHostConfiguration gets an existing SessionHostConfiguration resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSessionHostConfiguration(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SessionHostConfigurationState, opts ...pulumi.ResourceOption) (*SessionHostConfiguration, error) {
	var resource SessionHostConfiguration
	err := ctx.ReadResource("azure-native:desktopvirtualization:SessionHostConfiguration", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SessionHostConfiguration resources.
type sessionHostConfigurationState struct {
}

type SessionHostConfigurationState struct {
}

func (SessionHostConfigurationState) ElementType() reflect.Type {
	return reflect.TypeOf((*sessionHostConfigurationState)(nil)).Elem()
}

type sessionHostConfigurationArgs struct {
	// The disk type used by virtual machine in hostpool session host.
	DiskType *string `pulumi:"diskType"`
	// Domain configurations of session hosts.
	DomainInfo *DomainInfoProperties `pulumi:"domainInfo"`
	// The name of the host pool within the specified resource group
	HostPoolName string `pulumi:"hostPoolName"`
	// Image configurations of HostPool.
	ImageInfo *ImageInfoProperties `pulumi:"imageInfo"`
	// The name of the resource group. The name is case insensitive.
	ResourceGroupName string `pulumi:"resourceGroupName"`
	// The id of the size of a virtual machine connected to a hostpool.
	VMSizeId *string `pulumi:"vMSizeId"`
	// The uri to the storage blob containing scripts to be run on the virtual machine after provisioning.
	VmCustomConfigurationUri *string `pulumi:"vmCustomConfigurationUri"`
}

// The set of arguments for constructing a SessionHostConfiguration resource.
type SessionHostConfigurationArgs struct {
	// The disk type used by virtual machine in hostpool session host.
	DiskType pulumi.StringPtrInput
	// Domain configurations of session hosts.
	DomainInfo DomainInfoPropertiesPtrInput
	// The name of the host pool within the specified resource group
	HostPoolName pulumi.StringInput
	// Image configurations of HostPool.
	ImageInfo ImageInfoPropertiesPtrInput
	// The name of the resource group. The name is case insensitive.
	ResourceGroupName pulumi.StringInput
	// The id of the size of a virtual machine connected to a hostpool.
	VMSizeId pulumi.StringPtrInput
	// The uri to the storage blob containing scripts to be run on the virtual machine after provisioning.
	VmCustomConfigurationUri pulumi.StringPtrInput
}

func (SessionHostConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*sessionHostConfigurationArgs)(nil)).Elem()
}

type SessionHostConfigurationInput interface {
	pulumi.Input

	ToSessionHostConfigurationOutput() SessionHostConfigurationOutput
	ToSessionHostConfigurationOutputWithContext(ctx context.Context) SessionHostConfigurationOutput
}

func (*SessionHostConfiguration) ElementType() reflect.Type {
	return reflect.TypeOf((*SessionHostConfiguration)(nil))
}

func (i *SessionHostConfiguration) ToSessionHostConfigurationOutput() SessionHostConfigurationOutput {
	return i.ToSessionHostConfigurationOutputWithContext(context.Background())
}

func (i *SessionHostConfiguration) ToSessionHostConfigurationOutputWithContext(ctx context.Context) SessionHostConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SessionHostConfigurationOutput)
}

type SessionHostConfigurationOutput struct {
	*pulumi.OutputState
}

func (SessionHostConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SessionHostConfiguration)(nil))
}

func (o SessionHostConfigurationOutput) ToSessionHostConfigurationOutput() SessionHostConfigurationOutput {
	return o
}

func (o SessionHostConfigurationOutput) ToSessionHostConfigurationOutputWithContext(ctx context.Context) SessionHostConfigurationOutput {
	return o
}

func init() {
	pulumi.RegisterOutputType(SessionHostConfigurationOutput{})
}
