// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package desktopvirtualization

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type Application struct {
	pulumi.CustomResourceState

	ApplicationType          pulumi.StringPtrOutput `pulumi:"applicationType"`
	CommandLineArguments     pulumi.StringPtrOutput `pulumi:"commandLineArguments"`
	CommandLineSetting       pulumi.StringOutput    `pulumi:"commandLineSetting"`
	Description              pulumi.StringPtrOutput `pulumi:"description"`
	FilePath                 pulumi.StringPtrOutput `pulumi:"filePath"`
	FriendlyName             pulumi.StringPtrOutput `pulumi:"friendlyName"`
	IconContent              pulumi.StringOutput    `pulumi:"iconContent"`
	IconHash                 pulumi.StringOutput    `pulumi:"iconHash"`
	IconIndex                pulumi.IntPtrOutput    `pulumi:"iconIndex"`
	IconPath                 pulumi.StringPtrOutput `pulumi:"iconPath"`
	MsixPackageApplicationId pulumi.StringPtrOutput `pulumi:"msixPackageApplicationId"`
	MsixPackageFamilyName    pulumi.StringPtrOutput `pulumi:"msixPackageFamilyName"`
	Name                     pulumi.StringOutput    `pulumi:"name"`
	ObjectId                 pulumi.StringOutput    `pulumi:"objectId"`
	ShowInPortal             pulumi.BoolPtrOutput   `pulumi:"showInPortal"`
	Type                     pulumi.StringOutput    `pulumi:"type"`
}

// NewApplication registers a new resource with the given unique name, arguments, and options.
func NewApplication(ctx *pulumi.Context,
	name string, args *ApplicationArgs, opts ...pulumi.ResourceOption) (*Application, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ApplicationGroupName == nil {
		return nil, errors.New("invalid value for required argument 'ApplicationGroupName'")
	}
	if args.CommandLineSetting == nil {
		return nil, errors.New("invalid value for required argument 'CommandLineSetting'")
	}
	if args.ResourceGroupName == nil {
		return nil, errors.New("invalid value for required argument 'ResourceGroupName'")
	}
	aliases := pulumi.Aliases([]pulumi.Alias{
		{
			Type: pulumi.String("azure-nextgen:desktopvirtualization:Application"),
		},
		{
			Type: pulumi.String("azure-native:desktopvirtualization/v20190123preview:Application"),
		},
		{
			Type: pulumi.String("azure-nextgen:desktopvirtualization/v20190123preview:Application"),
		},
		{
			Type: pulumi.String("azure-native:desktopvirtualization/v20190924preview:Application"),
		},
		{
			Type: pulumi.String("azure-nextgen:desktopvirtualization/v20190924preview:Application"),
		},
		{
			Type: pulumi.String("azure-native:desktopvirtualization/v20191210preview:Application"),
		},
		{
			Type: pulumi.String("azure-nextgen:desktopvirtualization/v20191210preview:Application"),
		},
		{
			Type: pulumi.String("azure-native:desktopvirtualization/v20200921preview:Application"),
		},
		{
			Type: pulumi.String("azure-nextgen:desktopvirtualization/v20200921preview:Application"),
		},
		{
			Type: pulumi.String("azure-native:desktopvirtualization/v20201019preview:Application"),
		},
		{
			Type: pulumi.String("azure-nextgen:desktopvirtualization/v20201019preview:Application"),
		},
		{
			Type: pulumi.String("azure-native:desktopvirtualization/v20201102preview:Application"),
		},
		{
			Type: pulumi.String("azure-nextgen:desktopvirtualization/v20201102preview:Application"),
		},
		{
			Type: pulumi.String("azure-native:desktopvirtualization/v20201110preview:Application"),
		},
		{
			Type: pulumi.String("azure-nextgen:desktopvirtualization/v20201110preview:Application"),
		},
		{
			Type: pulumi.String("azure-native:desktopvirtualization/v20210114preview:Application"),
		},
		{
			Type: pulumi.String("azure-nextgen:desktopvirtualization/v20210114preview:Application"),
		},
		{
			Type: pulumi.String("azure-native:desktopvirtualization/v20210201preview:Application"),
		},
		{
			Type: pulumi.String("azure-nextgen:desktopvirtualization/v20210201preview:Application"),
		},
		{
			Type: pulumi.String("azure-native:desktopvirtualization/v20210309preview:Application"),
		},
		{
			Type: pulumi.String("azure-nextgen:desktopvirtualization/v20210309preview:Application"),
		},
		{
			Type: pulumi.String("azure-native:desktopvirtualization/v20210401preview:Application"),
		},
		{
			Type: pulumi.String("azure-nextgen:desktopvirtualization/v20210401preview:Application"),
		},
		{
			Type: pulumi.String("azure-native:desktopvirtualization/v20210712:Application"),
		},
		{
			Type: pulumi.String("azure-nextgen:desktopvirtualization/v20210712:Application"),
		},
		{
			Type: pulumi.String("azure-native:desktopvirtualization/v20210903preview:Application"),
		},
		{
			Type: pulumi.String("azure-nextgen:desktopvirtualization/v20210903preview:Application"),
		},
	})
	opts = append(opts, aliases)
	var resource Application
	err := ctx.RegisterResource("azure-native:desktopvirtualization:Application", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetApplication gets an existing Application resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetApplication(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ApplicationState, opts ...pulumi.ResourceOption) (*Application, error) {
	var resource Application
	err := ctx.ReadResource("azure-native:desktopvirtualization:Application", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Application resources.
type applicationState struct {
}

type ApplicationState struct {
}

func (ApplicationState) ElementType() reflect.Type {
	return reflect.TypeOf((*applicationState)(nil)).Elem()
}

type applicationArgs struct {
	ApplicationGroupName     string  `pulumi:"applicationGroupName"`
	ApplicationName          *string `pulumi:"applicationName"`
	ApplicationType          *string `pulumi:"applicationType"`
	CommandLineArguments     *string `pulumi:"commandLineArguments"`
	CommandLineSetting       string  `pulumi:"commandLineSetting"`
	Description              *string `pulumi:"description"`
	FilePath                 *string `pulumi:"filePath"`
	FriendlyName             *string `pulumi:"friendlyName"`
	IconIndex                *int    `pulumi:"iconIndex"`
	IconPath                 *string `pulumi:"iconPath"`
	MsixPackageApplicationId *string `pulumi:"msixPackageApplicationId"`
	MsixPackageFamilyName    *string `pulumi:"msixPackageFamilyName"`
	ResourceGroupName        string  `pulumi:"resourceGroupName"`
	ShowInPortal             *bool   `pulumi:"showInPortal"`
}

// The set of arguments for constructing a Application resource.
type ApplicationArgs struct {
	ApplicationGroupName     pulumi.StringInput
	ApplicationName          pulumi.StringPtrInput
	ApplicationType          pulumi.StringPtrInput
	CommandLineArguments     pulumi.StringPtrInput
	CommandLineSetting       pulumi.StringInput
	Description              pulumi.StringPtrInput
	FilePath                 pulumi.StringPtrInput
	FriendlyName             pulumi.StringPtrInput
	IconIndex                pulumi.IntPtrInput
	IconPath                 pulumi.StringPtrInput
	MsixPackageApplicationId pulumi.StringPtrInput
	MsixPackageFamilyName    pulumi.StringPtrInput
	ResourceGroupName        pulumi.StringInput
	ShowInPortal             pulumi.BoolPtrInput
}

func (ApplicationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*applicationArgs)(nil)).Elem()
}

type ApplicationInput interface {
	pulumi.Input

	ToApplicationOutput() ApplicationOutput
	ToApplicationOutputWithContext(ctx context.Context) ApplicationOutput
}

func (*Application) ElementType() reflect.Type {
	return reflect.TypeOf((*Application)(nil))
}

func (i *Application) ToApplicationOutput() ApplicationOutput {
	return i.ToApplicationOutputWithContext(context.Background())
}

func (i *Application) ToApplicationOutputWithContext(ctx context.Context) ApplicationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationOutput)
}

type ApplicationOutput struct{ *pulumi.OutputState }

func (ApplicationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Application)(nil))
}

func (o ApplicationOutput) ToApplicationOutput() ApplicationOutput {
	return o
}

func (o ApplicationOutput) ToApplicationOutputWithContext(ctx context.Context) ApplicationOutput {
	return o
}

func init() {
	pulumi.RegisterOutputType(ApplicationOutput{})
}
