// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v20200921preview

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// Schema for MSIX Package Application properties.
type MsixPackageApplications struct {
	// Package Application Id, found in appxmanifest.xml.
	AppId *string `pulumi:"appId"`
	// Used to activate Package Application. Consists of Package Name and ApplicationID. Found in appxmanifest.xml.
	AppUserModelID *string `pulumi:"appUserModelID"`
	// Description of Package Application.
	Description *string `pulumi:"description"`
	// User friendly name.
	FriendlyName *string `pulumi:"friendlyName"`
	// User friendly name.
	IconImageName *string `pulumi:"iconImageName"`
	// the icon a 64 bit string as a byte array.
	RawIcon *string `pulumi:"rawIcon"`
	// the icon a 64 bit string as a byte array.
	RawPng *string `pulumi:"rawPng"`
}

// MsixPackageApplicationsInput is an input type that accepts MsixPackageApplicationsArgs and MsixPackageApplicationsOutput values.
// You can construct a concrete instance of `MsixPackageApplicationsInput` via:
//
//          MsixPackageApplicationsArgs{...}
type MsixPackageApplicationsInput interface {
	pulumi.Input

	ToMsixPackageApplicationsOutput() MsixPackageApplicationsOutput
	ToMsixPackageApplicationsOutputWithContext(context.Context) MsixPackageApplicationsOutput
}

// Schema for MSIX Package Application properties.
type MsixPackageApplicationsArgs struct {
	// Package Application Id, found in appxmanifest.xml.
	AppId pulumi.StringPtrInput `pulumi:"appId"`
	// Used to activate Package Application. Consists of Package Name and ApplicationID. Found in appxmanifest.xml.
	AppUserModelID pulumi.StringPtrInput `pulumi:"appUserModelID"`
	// Description of Package Application.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// User friendly name.
	FriendlyName pulumi.StringPtrInput `pulumi:"friendlyName"`
	// User friendly name.
	IconImageName pulumi.StringPtrInput `pulumi:"iconImageName"`
	// the icon a 64 bit string as a byte array.
	RawIcon pulumi.StringPtrInput `pulumi:"rawIcon"`
	// the icon a 64 bit string as a byte array.
	RawPng pulumi.StringPtrInput `pulumi:"rawPng"`
}

func (MsixPackageApplicationsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MsixPackageApplications)(nil)).Elem()
}

func (i MsixPackageApplicationsArgs) ToMsixPackageApplicationsOutput() MsixPackageApplicationsOutput {
	return i.ToMsixPackageApplicationsOutputWithContext(context.Background())
}

func (i MsixPackageApplicationsArgs) ToMsixPackageApplicationsOutputWithContext(ctx context.Context) MsixPackageApplicationsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MsixPackageApplicationsOutput)
}

// MsixPackageApplicationsArrayInput is an input type that accepts MsixPackageApplicationsArray and MsixPackageApplicationsArrayOutput values.
// You can construct a concrete instance of `MsixPackageApplicationsArrayInput` via:
//
//          MsixPackageApplicationsArray{ MsixPackageApplicationsArgs{...} }
type MsixPackageApplicationsArrayInput interface {
	pulumi.Input

	ToMsixPackageApplicationsArrayOutput() MsixPackageApplicationsArrayOutput
	ToMsixPackageApplicationsArrayOutputWithContext(context.Context) MsixPackageApplicationsArrayOutput
}

type MsixPackageApplicationsArray []MsixPackageApplicationsInput

func (MsixPackageApplicationsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MsixPackageApplications)(nil)).Elem()
}

func (i MsixPackageApplicationsArray) ToMsixPackageApplicationsArrayOutput() MsixPackageApplicationsArrayOutput {
	return i.ToMsixPackageApplicationsArrayOutputWithContext(context.Background())
}

func (i MsixPackageApplicationsArray) ToMsixPackageApplicationsArrayOutputWithContext(ctx context.Context) MsixPackageApplicationsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MsixPackageApplicationsArrayOutput)
}

// Schema for MSIX Package Application properties.
type MsixPackageApplicationsOutput struct{ *pulumi.OutputState }

func (MsixPackageApplicationsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MsixPackageApplications)(nil)).Elem()
}

func (o MsixPackageApplicationsOutput) ToMsixPackageApplicationsOutput() MsixPackageApplicationsOutput {
	return o
}

func (o MsixPackageApplicationsOutput) ToMsixPackageApplicationsOutputWithContext(ctx context.Context) MsixPackageApplicationsOutput {
	return o
}

// Package Application Id, found in appxmanifest.xml.
func (o MsixPackageApplicationsOutput) AppId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MsixPackageApplications) *string { return v.AppId }).(pulumi.StringPtrOutput)
}

// Used to activate Package Application. Consists of Package Name and ApplicationID. Found in appxmanifest.xml.
func (o MsixPackageApplicationsOutput) AppUserModelID() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MsixPackageApplications) *string { return v.AppUserModelID }).(pulumi.StringPtrOutput)
}

// Description of Package Application.
func (o MsixPackageApplicationsOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MsixPackageApplications) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// User friendly name.
func (o MsixPackageApplicationsOutput) FriendlyName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MsixPackageApplications) *string { return v.FriendlyName }).(pulumi.StringPtrOutput)
}

// User friendly name.
func (o MsixPackageApplicationsOutput) IconImageName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MsixPackageApplications) *string { return v.IconImageName }).(pulumi.StringPtrOutput)
}

// the icon a 64 bit string as a byte array.
func (o MsixPackageApplicationsOutput) RawIcon() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MsixPackageApplications) *string { return v.RawIcon }).(pulumi.StringPtrOutput)
}

// the icon a 64 bit string as a byte array.
func (o MsixPackageApplicationsOutput) RawPng() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MsixPackageApplications) *string { return v.RawPng }).(pulumi.StringPtrOutput)
}

type MsixPackageApplicationsArrayOutput struct{ *pulumi.OutputState }

func (MsixPackageApplicationsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MsixPackageApplications)(nil)).Elem()
}

func (o MsixPackageApplicationsArrayOutput) ToMsixPackageApplicationsArrayOutput() MsixPackageApplicationsArrayOutput {
	return o
}

func (o MsixPackageApplicationsArrayOutput) ToMsixPackageApplicationsArrayOutputWithContext(ctx context.Context) MsixPackageApplicationsArrayOutput {
	return o
}

func (o MsixPackageApplicationsArrayOutput) Index(i pulumi.IntInput) MsixPackageApplicationsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) MsixPackageApplications {
		return vs[0].([]MsixPackageApplications)[vs[1].(int)]
	}).(MsixPackageApplicationsOutput)
}

// Schema for MSIX Package Application properties.
type MsixPackageApplicationsResponse struct {
	// Package Application Id, found in appxmanifest.xml.
	AppId *string `pulumi:"appId"`
	// Used to activate Package Application. Consists of Package Name and ApplicationID. Found in appxmanifest.xml.
	AppUserModelID *string `pulumi:"appUserModelID"`
	// Description of Package Application.
	Description *string `pulumi:"description"`
	// User friendly name.
	FriendlyName *string `pulumi:"friendlyName"`
	// User friendly name.
	IconImageName *string `pulumi:"iconImageName"`
	// the icon a 64 bit string as a byte array.
	RawIcon *string `pulumi:"rawIcon"`
	// the icon a 64 bit string as a byte array.
	RawPng *string `pulumi:"rawPng"`
}

// MsixPackageApplicationsResponseInput is an input type that accepts MsixPackageApplicationsResponseArgs and MsixPackageApplicationsResponseOutput values.
// You can construct a concrete instance of `MsixPackageApplicationsResponseInput` via:
//
//          MsixPackageApplicationsResponseArgs{...}
type MsixPackageApplicationsResponseInput interface {
	pulumi.Input

	ToMsixPackageApplicationsResponseOutput() MsixPackageApplicationsResponseOutput
	ToMsixPackageApplicationsResponseOutputWithContext(context.Context) MsixPackageApplicationsResponseOutput
}

// Schema for MSIX Package Application properties.
type MsixPackageApplicationsResponseArgs struct {
	// Package Application Id, found in appxmanifest.xml.
	AppId pulumi.StringPtrInput `pulumi:"appId"`
	// Used to activate Package Application. Consists of Package Name and ApplicationID. Found in appxmanifest.xml.
	AppUserModelID pulumi.StringPtrInput `pulumi:"appUserModelID"`
	// Description of Package Application.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// User friendly name.
	FriendlyName pulumi.StringPtrInput `pulumi:"friendlyName"`
	// User friendly name.
	IconImageName pulumi.StringPtrInput `pulumi:"iconImageName"`
	// the icon a 64 bit string as a byte array.
	RawIcon pulumi.StringPtrInput `pulumi:"rawIcon"`
	// the icon a 64 bit string as a byte array.
	RawPng pulumi.StringPtrInput `pulumi:"rawPng"`
}

func (MsixPackageApplicationsResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MsixPackageApplicationsResponse)(nil)).Elem()
}

func (i MsixPackageApplicationsResponseArgs) ToMsixPackageApplicationsResponseOutput() MsixPackageApplicationsResponseOutput {
	return i.ToMsixPackageApplicationsResponseOutputWithContext(context.Background())
}

func (i MsixPackageApplicationsResponseArgs) ToMsixPackageApplicationsResponseOutputWithContext(ctx context.Context) MsixPackageApplicationsResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MsixPackageApplicationsResponseOutput)
}

// MsixPackageApplicationsResponseArrayInput is an input type that accepts MsixPackageApplicationsResponseArray and MsixPackageApplicationsResponseArrayOutput values.
// You can construct a concrete instance of `MsixPackageApplicationsResponseArrayInput` via:
//
//          MsixPackageApplicationsResponseArray{ MsixPackageApplicationsResponseArgs{...} }
type MsixPackageApplicationsResponseArrayInput interface {
	pulumi.Input

	ToMsixPackageApplicationsResponseArrayOutput() MsixPackageApplicationsResponseArrayOutput
	ToMsixPackageApplicationsResponseArrayOutputWithContext(context.Context) MsixPackageApplicationsResponseArrayOutput
}

type MsixPackageApplicationsResponseArray []MsixPackageApplicationsResponseInput

func (MsixPackageApplicationsResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MsixPackageApplicationsResponse)(nil)).Elem()
}

func (i MsixPackageApplicationsResponseArray) ToMsixPackageApplicationsResponseArrayOutput() MsixPackageApplicationsResponseArrayOutput {
	return i.ToMsixPackageApplicationsResponseArrayOutputWithContext(context.Background())
}

func (i MsixPackageApplicationsResponseArray) ToMsixPackageApplicationsResponseArrayOutputWithContext(ctx context.Context) MsixPackageApplicationsResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MsixPackageApplicationsResponseArrayOutput)
}

// Schema for MSIX Package Application properties.
type MsixPackageApplicationsResponseOutput struct{ *pulumi.OutputState }

func (MsixPackageApplicationsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MsixPackageApplicationsResponse)(nil)).Elem()
}

func (o MsixPackageApplicationsResponseOutput) ToMsixPackageApplicationsResponseOutput() MsixPackageApplicationsResponseOutput {
	return o
}

func (o MsixPackageApplicationsResponseOutput) ToMsixPackageApplicationsResponseOutputWithContext(ctx context.Context) MsixPackageApplicationsResponseOutput {
	return o
}

// Package Application Id, found in appxmanifest.xml.
func (o MsixPackageApplicationsResponseOutput) AppId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MsixPackageApplicationsResponse) *string { return v.AppId }).(pulumi.StringPtrOutput)
}

// Used to activate Package Application. Consists of Package Name and ApplicationID. Found in appxmanifest.xml.
func (o MsixPackageApplicationsResponseOutput) AppUserModelID() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MsixPackageApplicationsResponse) *string { return v.AppUserModelID }).(pulumi.StringPtrOutput)
}

// Description of Package Application.
func (o MsixPackageApplicationsResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MsixPackageApplicationsResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// User friendly name.
func (o MsixPackageApplicationsResponseOutput) FriendlyName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MsixPackageApplicationsResponse) *string { return v.FriendlyName }).(pulumi.StringPtrOutput)
}

// User friendly name.
func (o MsixPackageApplicationsResponseOutput) IconImageName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MsixPackageApplicationsResponse) *string { return v.IconImageName }).(pulumi.StringPtrOutput)
}

// the icon a 64 bit string as a byte array.
func (o MsixPackageApplicationsResponseOutput) RawIcon() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MsixPackageApplicationsResponse) *string { return v.RawIcon }).(pulumi.StringPtrOutput)
}

// the icon a 64 bit string as a byte array.
func (o MsixPackageApplicationsResponseOutput) RawPng() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MsixPackageApplicationsResponse) *string { return v.RawPng }).(pulumi.StringPtrOutput)
}

type MsixPackageApplicationsResponseArrayOutput struct{ *pulumi.OutputState }

func (MsixPackageApplicationsResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MsixPackageApplicationsResponse)(nil)).Elem()
}

func (o MsixPackageApplicationsResponseArrayOutput) ToMsixPackageApplicationsResponseArrayOutput() MsixPackageApplicationsResponseArrayOutput {
	return o
}

func (o MsixPackageApplicationsResponseArrayOutput) ToMsixPackageApplicationsResponseArrayOutputWithContext(ctx context.Context) MsixPackageApplicationsResponseArrayOutput {
	return o
}

func (o MsixPackageApplicationsResponseArrayOutput) Index(i pulumi.IntInput) MsixPackageApplicationsResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) MsixPackageApplicationsResponse {
		return vs[0].([]MsixPackageApplicationsResponse)[vs[1].(int)]
	}).(MsixPackageApplicationsResponseOutput)
}

// Schema for MSIX Package Dependencies properties.
type MsixPackageDependencies struct {
	// Name of package dependency.
	DependencyName *string `pulumi:"dependencyName"`
	// Dependency version required.
	MinVersion *string `pulumi:"minVersion"`
	// Name of dependency publisher.
	Publisher *string `pulumi:"publisher"`
}

// MsixPackageDependenciesInput is an input type that accepts MsixPackageDependenciesArgs and MsixPackageDependenciesOutput values.
// You can construct a concrete instance of `MsixPackageDependenciesInput` via:
//
//          MsixPackageDependenciesArgs{...}
type MsixPackageDependenciesInput interface {
	pulumi.Input

	ToMsixPackageDependenciesOutput() MsixPackageDependenciesOutput
	ToMsixPackageDependenciesOutputWithContext(context.Context) MsixPackageDependenciesOutput
}

// Schema for MSIX Package Dependencies properties.
type MsixPackageDependenciesArgs struct {
	// Name of package dependency.
	DependencyName pulumi.StringPtrInput `pulumi:"dependencyName"`
	// Dependency version required.
	MinVersion pulumi.StringPtrInput `pulumi:"minVersion"`
	// Name of dependency publisher.
	Publisher pulumi.StringPtrInput `pulumi:"publisher"`
}

func (MsixPackageDependenciesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MsixPackageDependencies)(nil)).Elem()
}

func (i MsixPackageDependenciesArgs) ToMsixPackageDependenciesOutput() MsixPackageDependenciesOutput {
	return i.ToMsixPackageDependenciesOutputWithContext(context.Background())
}

func (i MsixPackageDependenciesArgs) ToMsixPackageDependenciesOutputWithContext(ctx context.Context) MsixPackageDependenciesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MsixPackageDependenciesOutput)
}

// MsixPackageDependenciesArrayInput is an input type that accepts MsixPackageDependenciesArray and MsixPackageDependenciesArrayOutput values.
// You can construct a concrete instance of `MsixPackageDependenciesArrayInput` via:
//
//          MsixPackageDependenciesArray{ MsixPackageDependenciesArgs{...} }
type MsixPackageDependenciesArrayInput interface {
	pulumi.Input

	ToMsixPackageDependenciesArrayOutput() MsixPackageDependenciesArrayOutput
	ToMsixPackageDependenciesArrayOutputWithContext(context.Context) MsixPackageDependenciesArrayOutput
}

type MsixPackageDependenciesArray []MsixPackageDependenciesInput

func (MsixPackageDependenciesArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MsixPackageDependencies)(nil)).Elem()
}

func (i MsixPackageDependenciesArray) ToMsixPackageDependenciesArrayOutput() MsixPackageDependenciesArrayOutput {
	return i.ToMsixPackageDependenciesArrayOutputWithContext(context.Background())
}

func (i MsixPackageDependenciesArray) ToMsixPackageDependenciesArrayOutputWithContext(ctx context.Context) MsixPackageDependenciesArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MsixPackageDependenciesArrayOutput)
}

// Schema for MSIX Package Dependencies properties.
type MsixPackageDependenciesOutput struct{ *pulumi.OutputState }

func (MsixPackageDependenciesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MsixPackageDependencies)(nil)).Elem()
}

func (o MsixPackageDependenciesOutput) ToMsixPackageDependenciesOutput() MsixPackageDependenciesOutput {
	return o
}

func (o MsixPackageDependenciesOutput) ToMsixPackageDependenciesOutputWithContext(ctx context.Context) MsixPackageDependenciesOutput {
	return o
}

// Name of package dependency.
func (o MsixPackageDependenciesOutput) DependencyName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MsixPackageDependencies) *string { return v.DependencyName }).(pulumi.StringPtrOutput)
}

// Dependency version required.
func (o MsixPackageDependenciesOutput) MinVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MsixPackageDependencies) *string { return v.MinVersion }).(pulumi.StringPtrOutput)
}

// Name of dependency publisher.
func (o MsixPackageDependenciesOutput) Publisher() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MsixPackageDependencies) *string { return v.Publisher }).(pulumi.StringPtrOutput)
}

type MsixPackageDependenciesArrayOutput struct{ *pulumi.OutputState }

func (MsixPackageDependenciesArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MsixPackageDependencies)(nil)).Elem()
}

func (o MsixPackageDependenciesArrayOutput) ToMsixPackageDependenciesArrayOutput() MsixPackageDependenciesArrayOutput {
	return o
}

func (o MsixPackageDependenciesArrayOutput) ToMsixPackageDependenciesArrayOutputWithContext(ctx context.Context) MsixPackageDependenciesArrayOutput {
	return o
}

func (o MsixPackageDependenciesArrayOutput) Index(i pulumi.IntInput) MsixPackageDependenciesOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) MsixPackageDependencies {
		return vs[0].([]MsixPackageDependencies)[vs[1].(int)]
	}).(MsixPackageDependenciesOutput)
}

// Schema for MSIX Package Dependencies properties.
type MsixPackageDependenciesResponse struct {
	// Name of package dependency.
	DependencyName *string `pulumi:"dependencyName"`
	// Dependency version required.
	MinVersion *string `pulumi:"minVersion"`
	// Name of dependency publisher.
	Publisher *string `pulumi:"publisher"`
}

// MsixPackageDependenciesResponseInput is an input type that accepts MsixPackageDependenciesResponseArgs and MsixPackageDependenciesResponseOutput values.
// You can construct a concrete instance of `MsixPackageDependenciesResponseInput` via:
//
//          MsixPackageDependenciesResponseArgs{...}
type MsixPackageDependenciesResponseInput interface {
	pulumi.Input

	ToMsixPackageDependenciesResponseOutput() MsixPackageDependenciesResponseOutput
	ToMsixPackageDependenciesResponseOutputWithContext(context.Context) MsixPackageDependenciesResponseOutput
}

// Schema for MSIX Package Dependencies properties.
type MsixPackageDependenciesResponseArgs struct {
	// Name of package dependency.
	DependencyName pulumi.StringPtrInput `pulumi:"dependencyName"`
	// Dependency version required.
	MinVersion pulumi.StringPtrInput `pulumi:"minVersion"`
	// Name of dependency publisher.
	Publisher pulumi.StringPtrInput `pulumi:"publisher"`
}

func (MsixPackageDependenciesResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MsixPackageDependenciesResponse)(nil)).Elem()
}

func (i MsixPackageDependenciesResponseArgs) ToMsixPackageDependenciesResponseOutput() MsixPackageDependenciesResponseOutput {
	return i.ToMsixPackageDependenciesResponseOutputWithContext(context.Background())
}

func (i MsixPackageDependenciesResponseArgs) ToMsixPackageDependenciesResponseOutputWithContext(ctx context.Context) MsixPackageDependenciesResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MsixPackageDependenciesResponseOutput)
}

// MsixPackageDependenciesResponseArrayInput is an input type that accepts MsixPackageDependenciesResponseArray and MsixPackageDependenciesResponseArrayOutput values.
// You can construct a concrete instance of `MsixPackageDependenciesResponseArrayInput` via:
//
//          MsixPackageDependenciesResponseArray{ MsixPackageDependenciesResponseArgs{...} }
type MsixPackageDependenciesResponseArrayInput interface {
	pulumi.Input

	ToMsixPackageDependenciesResponseArrayOutput() MsixPackageDependenciesResponseArrayOutput
	ToMsixPackageDependenciesResponseArrayOutputWithContext(context.Context) MsixPackageDependenciesResponseArrayOutput
}

type MsixPackageDependenciesResponseArray []MsixPackageDependenciesResponseInput

func (MsixPackageDependenciesResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MsixPackageDependenciesResponse)(nil)).Elem()
}

func (i MsixPackageDependenciesResponseArray) ToMsixPackageDependenciesResponseArrayOutput() MsixPackageDependenciesResponseArrayOutput {
	return i.ToMsixPackageDependenciesResponseArrayOutputWithContext(context.Background())
}

func (i MsixPackageDependenciesResponseArray) ToMsixPackageDependenciesResponseArrayOutputWithContext(ctx context.Context) MsixPackageDependenciesResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MsixPackageDependenciesResponseArrayOutput)
}

// Schema for MSIX Package Dependencies properties.
type MsixPackageDependenciesResponseOutput struct{ *pulumi.OutputState }

func (MsixPackageDependenciesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MsixPackageDependenciesResponse)(nil)).Elem()
}

func (o MsixPackageDependenciesResponseOutput) ToMsixPackageDependenciesResponseOutput() MsixPackageDependenciesResponseOutput {
	return o
}

func (o MsixPackageDependenciesResponseOutput) ToMsixPackageDependenciesResponseOutputWithContext(ctx context.Context) MsixPackageDependenciesResponseOutput {
	return o
}

// Name of package dependency.
func (o MsixPackageDependenciesResponseOutput) DependencyName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MsixPackageDependenciesResponse) *string { return v.DependencyName }).(pulumi.StringPtrOutput)
}

// Dependency version required.
func (o MsixPackageDependenciesResponseOutput) MinVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MsixPackageDependenciesResponse) *string { return v.MinVersion }).(pulumi.StringPtrOutput)
}

// Name of dependency publisher.
func (o MsixPackageDependenciesResponseOutput) Publisher() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MsixPackageDependenciesResponse) *string { return v.Publisher }).(pulumi.StringPtrOutput)
}

type MsixPackageDependenciesResponseArrayOutput struct{ *pulumi.OutputState }

func (MsixPackageDependenciesResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MsixPackageDependenciesResponse)(nil)).Elem()
}

func (o MsixPackageDependenciesResponseArrayOutput) ToMsixPackageDependenciesResponseArrayOutput() MsixPackageDependenciesResponseArrayOutput {
	return o
}

func (o MsixPackageDependenciesResponseArrayOutput) ToMsixPackageDependenciesResponseArrayOutputWithContext(ctx context.Context) MsixPackageDependenciesResponseArrayOutput {
	return o
}

func (o MsixPackageDependenciesResponseArrayOutput) Index(i pulumi.IntInput) MsixPackageDependenciesResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) MsixPackageDependenciesResponse {
		return vs[0].([]MsixPackageDependenciesResponse)[vs[1].(int)]
	}).(MsixPackageDependenciesResponseOutput)
}

// Represents a RegistrationInfo definition.
type RegistrationInfo struct {
	// Expiration time of registration token.
	ExpirationTime *string `pulumi:"expirationTime"`
	// The type of resetting the token.
	RegistrationTokenOperation *string `pulumi:"registrationTokenOperation"`
	// The registration token base64 encoded string.
	Token *string `pulumi:"token"`
}

// RegistrationInfoInput is an input type that accepts RegistrationInfoArgs and RegistrationInfoOutput values.
// You can construct a concrete instance of `RegistrationInfoInput` via:
//
//          RegistrationInfoArgs{...}
type RegistrationInfoInput interface {
	pulumi.Input

	ToRegistrationInfoOutput() RegistrationInfoOutput
	ToRegistrationInfoOutputWithContext(context.Context) RegistrationInfoOutput
}

// Represents a RegistrationInfo definition.
type RegistrationInfoArgs struct {
	// Expiration time of registration token.
	ExpirationTime pulumi.StringPtrInput `pulumi:"expirationTime"`
	// The type of resetting the token.
	RegistrationTokenOperation pulumi.StringPtrInput `pulumi:"registrationTokenOperation"`
	// The registration token base64 encoded string.
	Token pulumi.StringPtrInput `pulumi:"token"`
}

func (RegistrationInfoArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RegistrationInfo)(nil)).Elem()
}

func (i RegistrationInfoArgs) ToRegistrationInfoOutput() RegistrationInfoOutput {
	return i.ToRegistrationInfoOutputWithContext(context.Background())
}

func (i RegistrationInfoArgs) ToRegistrationInfoOutputWithContext(ctx context.Context) RegistrationInfoOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegistrationInfoOutput)
}

func (i RegistrationInfoArgs) ToRegistrationInfoPtrOutput() RegistrationInfoPtrOutput {
	return i.ToRegistrationInfoPtrOutputWithContext(context.Background())
}

func (i RegistrationInfoArgs) ToRegistrationInfoPtrOutputWithContext(ctx context.Context) RegistrationInfoPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegistrationInfoOutput).ToRegistrationInfoPtrOutputWithContext(ctx)
}

// RegistrationInfoPtrInput is an input type that accepts RegistrationInfoArgs, RegistrationInfoPtr and RegistrationInfoPtrOutput values.
// You can construct a concrete instance of `RegistrationInfoPtrInput` via:
//
//          RegistrationInfoArgs{...}
//
//  or:
//
//          nil
type RegistrationInfoPtrInput interface {
	pulumi.Input

	ToRegistrationInfoPtrOutput() RegistrationInfoPtrOutput
	ToRegistrationInfoPtrOutputWithContext(context.Context) RegistrationInfoPtrOutput
}

type registrationInfoPtrType RegistrationInfoArgs

func RegistrationInfoPtr(v *RegistrationInfoArgs) RegistrationInfoPtrInput {
	return (*registrationInfoPtrType)(v)
}

func (*registrationInfoPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RegistrationInfo)(nil)).Elem()
}

func (i *registrationInfoPtrType) ToRegistrationInfoPtrOutput() RegistrationInfoPtrOutput {
	return i.ToRegistrationInfoPtrOutputWithContext(context.Background())
}

func (i *registrationInfoPtrType) ToRegistrationInfoPtrOutputWithContext(ctx context.Context) RegistrationInfoPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegistrationInfoPtrOutput)
}

// Represents a RegistrationInfo definition.
type RegistrationInfoOutput struct{ *pulumi.OutputState }

func (RegistrationInfoOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RegistrationInfo)(nil)).Elem()
}

func (o RegistrationInfoOutput) ToRegistrationInfoOutput() RegistrationInfoOutput {
	return o
}

func (o RegistrationInfoOutput) ToRegistrationInfoOutputWithContext(ctx context.Context) RegistrationInfoOutput {
	return o
}

func (o RegistrationInfoOutput) ToRegistrationInfoPtrOutput() RegistrationInfoPtrOutput {
	return o.ToRegistrationInfoPtrOutputWithContext(context.Background())
}

func (o RegistrationInfoOutput) ToRegistrationInfoPtrOutputWithContext(ctx context.Context) RegistrationInfoPtrOutput {
	return o.ApplyT(func(v RegistrationInfo) *RegistrationInfo {
		return &v
	}).(RegistrationInfoPtrOutput)
}

// Expiration time of registration token.
func (o RegistrationInfoOutput) ExpirationTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RegistrationInfo) *string { return v.ExpirationTime }).(pulumi.StringPtrOutput)
}

// The type of resetting the token.
func (o RegistrationInfoOutput) RegistrationTokenOperation() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RegistrationInfo) *string { return v.RegistrationTokenOperation }).(pulumi.StringPtrOutput)
}

// The registration token base64 encoded string.
func (o RegistrationInfoOutput) Token() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RegistrationInfo) *string { return v.Token }).(pulumi.StringPtrOutput)
}

type RegistrationInfoPtrOutput struct{ *pulumi.OutputState }

func (RegistrationInfoPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RegistrationInfo)(nil)).Elem()
}

func (o RegistrationInfoPtrOutput) ToRegistrationInfoPtrOutput() RegistrationInfoPtrOutput {
	return o
}

func (o RegistrationInfoPtrOutput) ToRegistrationInfoPtrOutputWithContext(ctx context.Context) RegistrationInfoPtrOutput {
	return o
}

func (o RegistrationInfoPtrOutput) Elem() RegistrationInfoOutput {
	return o.ApplyT(func(v *RegistrationInfo) RegistrationInfo { return *v }).(RegistrationInfoOutput)
}

// Expiration time of registration token.
func (o RegistrationInfoPtrOutput) ExpirationTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RegistrationInfo) *string {
		if v == nil {
			return nil
		}
		return v.ExpirationTime
	}).(pulumi.StringPtrOutput)
}

// The type of resetting the token.
func (o RegistrationInfoPtrOutput) RegistrationTokenOperation() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RegistrationInfo) *string {
		if v == nil {
			return nil
		}
		return v.RegistrationTokenOperation
	}).(pulumi.StringPtrOutput)
}

// The registration token base64 encoded string.
func (o RegistrationInfoPtrOutput) Token() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RegistrationInfo) *string {
		if v == nil {
			return nil
		}
		return v.Token
	}).(pulumi.StringPtrOutput)
}

// Represents a RegistrationInfo definition.
type RegistrationInfoResponse struct {
	// Expiration time of registration token.
	ExpirationTime *string `pulumi:"expirationTime"`
	// The type of resetting the token.
	RegistrationTokenOperation *string `pulumi:"registrationTokenOperation"`
	// The registration token base64 encoded string.
	Token *string `pulumi:"token"`
}

// RegistrationInfoResponseInput is an input type that accepts RegistrationInfoResponseArgs and RegistrationInfoResponseOutput values.
// You can construct a concrete instance of `RegistrationInfoResponseInput` via:
//
//          RegistrationInfoResponseArgs{...}
type RegistrationInfoResponseInput interface {
	pulumi.Input

	ToRegistrationInfoResponseOutput() RegistrationInfoResponseOutput
	ToRegistrationInfoResponseOutputWithContext(context.Context) RegistrationInfoResponseOutput
}

// Represents a RegistrationInfo definition.
type RegistrationInfoResponseArgs struct {
	// Expiration time of registration token.
	ExpirationTime pulumi.StringPtrInput `pulumi:"expirationTime"`
	// The type of resetting the token.
	RegistrationTokenOperation pulumi.StringPtrInput `pulumi:"registrationTokenOperation"`
	// The registration token base64 encoded string.
	Token pulumi.StringPtrInput `pulumi:"token"`
}

func (RegistrationInfoResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RegistrationInfoResponse)(nil)).Elem()
}

func (i RegistrationInfoResponseArgs) ToRegistrationInfoResponseOutput() RegistrationInfoResponseOutput {
	return i.ToRegistrationInfoResponseOutputWithContext(context.Background())
}

func (i RegistrationInfoResponseArgs) ToRegistrationInfoResponseOutputWithContext(ctx context.Context) RegistrationInfoResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegistrationInfoResponseOutput)
}

func (i RegistrationInfoResponseArgs) ToRegistrationInfoResponsePtrOutput() RegistrationInfoResponsePtrOutput {
	return i.ToRegistrationInfoResponsePtrOutputWithContext(context.Background())
}

func (i RegistrationInfoResponseArgs) ToRegistrationInfoResponsePtrOutputWithContext(ctx context.Context) RegistrationInfoResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegistrationInfoResponseOutput).ToRegistrationInfoResponsePtrOutputWithContext(ctx)
}

// RegistrationInfoResponsePtrInput is an input type that accepts RegistrationInfoResponseArgs, RegistrationInfoResponsePtr and RegistrationInfoResponsePtrOutput values.
// You can construct a concrete instance of `RegistrationInfoResponsePtrInput` via:
//
//          RegistrationInfoResponseArgs{...}
//
//  or:
//
//          nil
type RegistrationInfoResponsePtrInput interface {
	pulumi.Input

	ToRegistrationInfoResponsePtrOutput() RegistrationInfoResponsePtrOutput
	ToRegistrationInfoResponsePtrOutputWithContext(context.Context) RegistrationInfoResponsePtrOutput
}

type registrationInfoResponsePtrType RegistrationInfoResponseArgs

func RegistrationInfoResponsePtr(v *RegistrationInfoResponseArgs) RegistrationInfoResponsePtrInput {
	return (*registrationInfoResponsePtrType)(v)
}

func (*registrationInfoResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RegistrationInfoResponse)(nil)).Elem()
}

func (i *registrationInfoResponsePtrType) ToRegistrationInfoResponsePtrOutput() RegistrationInfoResponsePtrOutput {
	return i.ToRegistrationInfoResponsePtrOutputWithContext(context.Background())
}

func (i *registrationInfoResponsePtrType) ToRegistrationInfoResponsePtrOutputWithContext(ctx context.Context) RegistrationInfoResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegistrationInfoResponsePtrOutput)
}

// Represents a RegistrationInfo definition.
type RegistrationInfoResponseOutput struct{ *pulumi.OutputState }

func (RegistrationInfoResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RegistrationInfoResponse)(nil)).Elem()
}

func (o RegistrationInfoResponseOutput) ToRegistrationInfoResponseOutput() RegistrationInfoResponseOutput {
	return o
}

func (o RegistrationInfoResponseOutput) ToRegistrationInfoResponseOutputWithContext(ctx context.Context) RegistrationInfoResponseOutput {
	return o
}

func (o RegistrationInfoResponseOutput) ToRegistrationInfoResponsePtrOutput() RegistrationInfoResponsePtrOutput {
	return o.ToRegistrationInfoResponsePtrOutputWithContext(context.Background())
}

func (o RegistrationInfoResponseOutput) ToRegistrationInfoResponsePtrOutputWithContext(ctx context.Context) RegistrationInfoResponsePtrOutput {
	return o.ApplyT(func(v RegistrationInfoResponse) *RegistrationInfoResponse {
		return &v
	}).(RegistrationInfoResponsePtrOutput)
}

// Expiration time of registration token.
func (o RegistrationInfoResponseOutput) ExpirationTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RegistrationInfoResponse) *string { return v.ExpirationTime }).(pulumi.StringPtrOutput)
}

// The type of resetting the token.
func (o RegistrationInfoResponseOutput) RegistrationTokenOperation() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RegistrationInfoResponse) *string { return v.RegistrationTokenOperation }).(pulumi.StringPtrOutput)
}

// The registration token base64 encoded string.
func (o RegistrationInfoResponseOutput) Token() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RegistrationInfoResponse) *string { return v.Token }).(pulumi.StringPtrOutput)
}

type RegistrationInfoResponsePtrOutput struct{ *pulumi.OutputState }

func (RegistrationInfoResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RegistrationInfoResponse)(nil)).Elem()
}

func (o RegistrationInfoResponsePtrOutput) ToRegistrationInfoResponsePtrOutput() RegistrationInfoResponsePtrOutput {
	return o
}

func (o RegistrationInfoResponsePtrOutput) ToRegistrationInfoResponsePtrOutputWithContext(ctx context.Context) RegistrationInfoResponsePtrOutput {
	return o
}

func (o RegistrationInfoResponsePtrOutput) Elem() RegistrationInfoResponseOutput {
	return o.ApplyT(func(v *RegistrationInfoResponse) RegistrationInfoResponse { return *v }).(RegistrationInfoResponseOutput)
}

// Expiration time of registration token.
func (o RegistrationInfoResponsePtrOutput) ExpirationTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RegistrationInfoResponse) *string {
		if v == nil {
			return nil
		}
		return v.ExpirationTime
	}).(pulumi.StringPtrOutput)
}

// The type of resetting the token.
func (o RegistrationInfoResponsePtrOutput) RegistrationTokenOperation() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RegistrationInfoResponse) *string {
		if v == nil {
			return nil
		}
		return v.RegistrationTokenOperation
	}).(pulumi.StringPtrOutput)
}

// The registration token base64 encoded string.
func (o RegistrationInfoResponsePtrOutput) Token() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RegistrationInfoResponse) *string {
		if v == nil {
			return nil
		}
		return v.Token
	}).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(MsixPackageApplicationsOutput{})
	pulumi.RegisterOutputType(MsixPackageApplicationsArrayOutput{})
	pulumi.RegisterOutputType(MsixPackageApplicationsResponseOutput{})
	pulumi.RegisterOutputType(MsixPackageApplicationsResponseArrayOutput{})
	pulumi.RegisterOutputType(MsixPackageDependenciesOutput{})
	pulumi.RegisterOutputType(MsixPackageDependenciesArrayOutput{})
	pulumi.RegisterOutputType(MsixPackageDependenciesResponseOutput{})
	pulumi.RegisterOutputType(MsixPackageDependenciesResponseArrayOutput{})
	pulumi.RegisterOutputType(RegistrationInfoOutput{})
	pulumi.RegisterOutputType(RegistrationInfoPtrOutput{})
	pulumi.RegisterOutputType(RegistrationInfoResponseOutput{})
	pulumi.RegisterOutputType(RegistrationInfoResponsePtrOutput{})
}
