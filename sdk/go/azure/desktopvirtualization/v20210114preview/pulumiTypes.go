// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v20210114preview

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// Schema for MSIX Package Application properties.
type MsixPackageApplications struct {
	// Package Application Id, found in appxmanifest.xml.
	AppId *string `pulumi:"appId"`
	// Used to activate Package Application. Consists of Package Name and ApplicationID. Found in appxmanifest.xml.
	AppUserModelID *string `pulumi:"appUserModelID"`
	// Description of Package Application.
	Description *string `pulumi:"description"`
	// User friendly name.
	FriendlyName *string `pulumi:"friendlyName"`
	// User friendly name.
	IconImageName *string `pulumi:"iconImageName"`
	// the icon a 64 bit string as a byte array.
	RawIcon *string `pulumi:"rawIcon"`
	// the icon a 64 bit string as a byte array.
	RawPng *string `pulumi:"rawPng"`
}

// MsixPackageApplicationsInput is an input type that accepts MsixPackageApplicationsArgs and MsixPackageApplicationsOutput values.
// You can construct a concrete instance of `MsixPackageApplicationsInput` via:
//
//          MsixPackageApplicationsArgs{...}
type MsixPackageApplicationsInput interface {
	pulumi.Input

	ToMsixPackageApplicationsOutput() MsixPackageApplicationsOutput
	ToMsixPackageApplicationsOutputWithContext(context.Context) MsixPackageApplicationsOutput
}

// Schema for MSIX Package Application properties.
type MsixPackageApplicationsArgs struct {
	// Package Application Id, found in appxmanifest.xml.
	AppId pulumi.StringPtrInput `pulumi:"appId"`
	// Used to activate Package Application. Consists of Package Name and ApplicationID. Found in appxmanifest.xml.
	AppUserModelID pulumi.StringPtrInput `pulumi:"appUserModelID"`
	// Description of Package Application.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// User friendly name.
	FriendlyName pulumi.StringPtrInput `pulumi:"friendlyName"`
	// User friendly name.
	IconImageName pulumi.StringPtrInput `pulumi:"iconImageName"`
	// the icon a 64 bit string as a byte array.
	RawIcon pulumi.StringPtrInput `pulumi:"rawIcon"`
	// the icon a 64 bit string as a byte array.
	RawPng pulumi.StringPtrInput `pulumi:"rawPng"`
}

func (MsixPackageApplicationsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MsixPackageApplications)(nil)).Elem()
}

func (i MsixPackageApplicationsArgs) ToMsixPackageApplicationsOutput() MsixPackageApplicationsOutput {
	return i.ToMsixPackageApplicationsOutputWithContext(context.Background())
}

func (i MsixPackageApplicationsArgs) ToMsixPackageApplicationsOutputWithContext(ctx context.Context) MsixPackageApplicationsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MsixPackageApplicationsOutput)
}

// MsixPackageApplicationsArrayInput is an input type that accepts MsixPackageApplicationsArray and MsixPackageApplicationsArrayOutput values.
// You can construct a concrete instance of `MsixPackageApplicationsArrayInput` via:
//
//          MsixPackageApplicationsArray{ MsixPackageApplicationsArgs{...} }
type MsixPackageApplicationsArrayInput interface {
	pulumi.Input

	ToMsixPackageApplicationsArrayOutput() MsixPackageApplicationsArrayOutput
	ToMsixPackageApplicationsArrayOutputWithContext(context.Context) MsixPackageApplicationsArrayOutput
}

type MsixPackageApplicationsArray []MsixPackageApplicationsInput

func (MsixPackageApplicationsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MsixPackageApplications)(nil)).Elem()
}

func (i MsixPackageApplicationsArray) ToMsixPackageApplicationsArrayOutput() MsixPackageApplicationsArrayOutput {
	return i.ToMsixPackageApplicationsArrayOutputWithContext(context.Background())
}

func (i MsixPackageApplicationsArray) ToMsixPackageApplicationsArrayOutputWithContext(ctx context.Context) MsixPackageApplicationsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MsixPackageApplicationsArrayOutput)
}

// Schema for MSIX Package Application properties.
type MsixPackageApplicationsOutput struct{ *pulumi.OutputState }

func (MsixPackageApplicationsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MsixPackageApplications)(nil)).Elem()
}

func (o MsixPackageApplicationsOutput) ToMsixPackageApplicationsOutput() MsixPackageApplicationsOutput {
	return o
}

func (o MsixPackageApplicationsOutput) ToMsixPackageApplicationsOutputWithContext(ctx context.Context) MsixPackageApplicationsOutput {
	return o
}

// Package Application Id, found in appxmanifest.xml.
func (o MsixPackageApplicationsOutput) AppId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MsixPackageApplications) *string { return v.AppId }).(pulumi.StringPtrOutput)
}

// Used to activate Package Application. Consists of Package Name and ApplicationID. Found in appxmanifest.xml.
func (o MsixPackageApplicationsOutput) AppUserModelID() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MsixPackageApplications) *string { return v.AppUserModelID }).(pulumi.StringPtrOutput)
}

// Description of Package Application.
func (o MsixPackageApplicationsOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MsixPackageApplications) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// User friendly name.
func (o MsixPackageApplicationsOutput) FriendlyName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MsixPackageApplications) *string { return v.FriendlyName }).(pulumi.StringPtrOutput)
}

// User friendly name.
func (o MsixPackageApplicationsOutput) IconImageName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MsixPackageApplications) *string { return v.IconImageName }).(pulumi.StringPtrOutput)
}

// the icon a 64 bit string as a byte array.
func (o MsixPackageApplicationsOutput) RawIcon() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MsixPackageApplications) *string { return v.RawIcon }).(pulumi.StringPtrOutput)
}

// the icon a 64 bit string as a byte array.
func (o MsixPackageApplicationsOutput) RawPng() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MsixPackageApplications) *string { return v.RawPng }).(pulumi.StringPtrOutput)
}

type MsixPackageApplicationsArrayOutput struct{ *pulumi.OutputState }

func (MsixPackageApplicationsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MsixPackageApplications)(nil)).Elem()
}

func (o MsixPackageApplicationsArrayOutput) ToMsixPackageApplicationsArrayOutput() MsixPackageApplicationsArrayOutput {
	return o
}

func (o MsixPackageApplicationsArrayOutput) ToMsixPackageApplicationsArrayOutputWithContext(ctx context.Context) MsixPackageApplicationsArrayOutput {
	return o
}

func (o MsixPackageApplicationsArrayOutput) Index(i pulumi.IntInput) MsixPackageApplicationsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) MsixPackageApplications {
		return vs[0].([]MsixPackageApplications)[vs[1].(int)]
	}).(MsixPackageApplicationsOutput)
}

// Schema for MSIX Package Application properties.
type MsixPackageApplicationsInvokeResponse struct {
	// Package Application Id, found in appxmanifest.xml.
	AppId *string `pulumi:"appId"`
	// Used to activate Package Application. Consists of Package Name and ApplicationID. Found in appxmanifest.xml.
	AppUserModelID *string `pulumi:"appUserModelID"`
	// Description of Package Application.
	Description *string `pulumi:"description"`
	// User friendly name.
	FriendlyName *string `pulumi:"friendlyName"`
	// User friendly name.
	IconImageName *string `pulumi:"iconImageName"`
	// the icon a 64 bit string as a byte array.
	RawIcon *string `pulumi:"rawIcon"`
	// the icon a 64 bit string as a byte array.
	RawPng *string `pulumi:"rawPng"`
}

// MsixPackageApplicationsInvokeResponseInput is an input type that accepts MsixPackageApplicationsInvokeResponseArgs and MsixPackageApplicationsInvokeResponseOutput values.
// You can construct a concrete instance of `MsixPackageApplicationsInvokeResponseInput` via:
//
//          MsixPackageApplicationsInvokeResponseArgs{...}
type MsixPackageApplicationsInvokeResponseInput interface {
	pulumi.Input

	ToMsixPackageApplicationsInvokeResponseOutput() MsixPackageApplicationsInvokeResponseOutput
	ToMsixPackageApplicationsInvokeResponseOutputWithContext(context.Context) MsixPackageApplicationsInvokeResponseOutput
}

// Schema for MSIX Package Application properties.
type MsixPackageApplicationsInvokeResponseArgs struct {
	// Package Application Id, found in appxmanifest.xml.
	AppId pulumi.StringPtrInput `pulumi:"appId"`
	// Used to activate Package Application. Consists of Package Name and ApplicationID. Found in appxmanifest.xml.
	AppUserModelID pulumi.StringPtrInput `pulumi:"appUserModelID"`
	// Description of Package Application.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// User friendly name.
	FriendlyName pulumi.StringPtrInput `pulumi:"friendlyName"`
	// User friendly name.
	IconImageName pulumi.StringPtrInput `pulumi:"iconImageName"`
	// the icon a 64 bit string as a byte array.
	RawIcon pulumi.StringPtrInput `pulumi:"rawIcon"`
	// the icon a 64 bit string as a byte array.
	RawPng pulumi.StringPtrInput `pulumi:"rawPng"`
}

func (MsixPackageApplicationsInvokeResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MsixPackageApplicationsInvokeResponse)(nil)).Elem()
}

func (i MsixPackageApplicationsInvokeResponseArgs) ToMsixPackageApplicationsInvokeResponseOutput() MsixPackageApplicationsInvokeResponseOutput {
	return i.ToMsixPackageApplicationsInvokeResponseOutputWithContext(context.Background())
}

func (i MsixPackageApplicationsInvokeResponseArgs) ToMsixPackageApplicationsInvokeResponseOutputWithContext(ctx context.Context) MsixPackageApplicationsInvokeResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MsixPackageApplicationsInvokeResponseOutput)
}

// MsixPackageApplicationsInvokeResponseArrayInput is an input type that accepts MsixPackageApplicationsInvokeResponseArray and MsixPackageApplicationsInvokeResponseArrayOutput values.
// You can construct a concrete instance of `MsixPackageApplicationsInvokeResponseArrayInput` via:
//
//          MsixPackageApplicationsInvokeResponseArray{ MsixPackageApplicationsInvokeResponseArgs{...} }
type MsixPackageApplicationsInvokeResponseArrayInput interface {
	pulumi.Input

	ToMsixPackageApplicationsInvokeResponseArrayOutput() MsixPackageApplicationsInvokeResponseArrayOutput
	ToMsixPackageApplicationsInvokeResponseArrayOutputWithContext(context.Context) MsixPackageApplicationsInvokeResponseArrayOutput
}

type MsixPackageApplicationsInvokeResponseArray []MsixPackageApplicationsInvokeResponseInput

func (MsixPackageApplicationsInvokeResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MsixPackageApplicationsInvokeResponse)(nil)).Elem()
}

func (i MsixPackageApplicationsInvokeResponseArray) ToMsixPackageApplicationsInvokeResponseArrayOutput() MsixPackageApplicationsInvokeResponseArrayOutput {
	return i.ToMsixPackageApplicationsInvokeResponseArrayOutputWithContext(context.Background())
}

func (i MsixPackageApplicationsInvokeResponseArray) ToMsixPackageApplicationsInvokeResponseArrayOutputWithContext(ctx context.Context) MsixPackageApplicationsInvokeResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MsixPackageApplicationsInvokeResponseArrayOutput)
}

// Schema for MSIX Package Application properties.
type MsixPackageApplicationsInvokeResponseOutput struct{ *pulumi.OutputState }

func (MsixPackageApplicationsInvokeResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MsixPackageApplicationsInvokeResponse)(nil)).Elem()
}

func (o MsixPackageApplicationsInvokeResponseOutput) ToMsixPackageApplicationsInvokeResponseOutput() MsixPackageApplicationsInvokeResponseOutput {
	return o
}

func (o MsixPackageApplicationsInvokeResponseOutput) ToMsixPackageApplicationsInvokeResponseOutputWithContext(ctx context.Context) MsixPackageApplicationsInvokeResponseOutput {
	return o
}

// Package Application Id, found in appxmanifest.xml.
func (o MsixPackageApplicationsInvokeResponseOutput) AppId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MsixPackageApplicationsInvokeResponse) *string { return v.AppId }).(pulumi.StringPtrOutput)
}

// Used to activate Package Application. Consists of Package Name and ApplicationID. Found in appxmanifest.xml.
func (o MsixPackageApplicationsInvokeResponseOutput) AppUserModelID() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MsixPackageApplicationsInvokeResponse) *string { return v.AppUserModelID }).(pulumi.StringPtrOutput)
}

// Description of Package Application.
func (o MsixPackageApplicationsInvokeResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MsixPackageApplicationsInvokeResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// User friendly name.
func (o MsixPackageApplicationsInvokeResponseOutput) FriendlyName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MsixPackageApplicationsInvokeResponse) *string { return v.FriendlyName }).(pulumi.StringPtrOutput)
}

// User friendly name.
func (o MsixPackageApplicationsInvokeResponseOutput) IconImageName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MsixPackageApplicationsInvokeResponse) *string { return v.IconImageName }).(pulumi.StringPtrOutput)
}

// the icon a 64 bit string as a byte array.
func (o MsixPackageApplicationsInvokeResponseOutput) RawIcon() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MsixPackageApplicationsInvokeResponse) *string { return v.RawIcon }).(pulumi.StringPtrOutput)
}

// the icon a 64 bit string as a byte array.
func (o MsixPackageApplicationsInvokeResponseOutput) RawPng() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MsixPackageApplicationsInvokeResponse) *string { return v.RawPng }).(pulumi.StringPtrOutput)
}

type MsixPackageApplicationsInvokeResponseArrayOutput struct{ *pulumi.OutputState }

func (MsixPackageApplicationsInvokeResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MsixPackageApplicationsInvokeResponse)(nil)).Elem()
}

func (o MsixPackageApplicationsInvokeResponseArrayOutput) ToMsixPackageApplicationsInvokeResponseArrayOutput() MsixPackageApplicationsInvokeResponseArrayOutput {
	return o
}

func (o MsixPackageApplicationsInvokeResponseArrayOutput) ToMsixPackageApplicationsInvokeResponseArrayOutputWithContext(ctx context.Context) MsixPackageApplicationsInvokeResponseArrayOutput {
	return o
}

func (o MsixPackageApplicationsInvokeResponseArrayOutput) Index(i pulumi.IntInput) MsixPackageApplicationsInvokeResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) MsixPackageApplicationsInvokeResponse {
		return vs[0].([]MsixPackageApplicationsInvokeResponse)[vs[1].(int)]
	}).(MsixPackageApplicationsInvokeResponseOutput)
}

// Schema for MSIX Package Application properties.
type MsixPackageApplicationsResponse struct {
	// Package Application Id, found in appxmanifest.xml.
	AppId *string `pulumi:"appId"`
	// Used to activate Package Application. Consists of Package Name and ApplicationID. Found in appxmanifest.xml.
	AppUserModelID *string `pulumi:"appUserModelID"`
	// Description of Package Application.
	Description *string `pulumi:"description"`
	// User friendly name.
	FriendlyName *string `pulumi:"friendlyName"`
	// User friendly name.
	IconImageName *string `pulumi:"iconImageName"`
	// the icon a 64 bit string as a byte array.
	RawIcon *string `pulumi:"rawIcon"`
	// the icon a 64 bit string as a byte array.
	RawPng *string `pulumi:"rawPng"`
}

// MsixPackageApplicationsResponseInput is an input type that accepts MsixPackageApplicationsResponseArgs and MsixPackageApplicationsResponseOutput values.
// You can construct a concrete instance of `MsixPackageApplicationsResponseInput` via:
//
//          MsixPackageApplicationsResponseArgs{...}
type MsixPackageApplicationsResponseInput interface {
	pulumi.Input

	ToMsixPackageApplicationsResponseOutput() MsixPackageApplicationsResponseOutput
	ToMsixPackageApplicationsResponseOutputWithContext(context.Context) MsixPackageApplicationsResponseOutput
}

// Schema for MSIX Package Application properties.
type MsixPackageApplicationsResponseArgs struct {
	// Package Application Id, found in appxmanifest.xml.
	AppId pulumi.StringPtrInput `pulumi:"appId"`
	// Used to activate Package Application. Consists of Package Name and ApplicationID. Found in appxmanifest.xml.
	AppUserModelID pulumi.StringPtrInput `pulumi:"appUserModelID"`
	// Description of Package Application.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// User friendly name.
	FriendlyName pulumi.StringPtrInput `pulumi:"friendlyName"`
	// User friendly name.
	IconImageName pulumi.StringPtrInput `pulumi:"iconImageName"`
	// the icon a 64 bit string as a byte array.
	RawIcon pulumi.StringPtrInput `pulumi:"rawIcon"`
	// the icon a 64 bit string as a byte array.
	RawPng pulumi.StringPtrInput `pulumi:"rawPng"`
}

func (MsixPackageApplicationsResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MsixPackageApplicationsResponse)(nil)).Elem()
}

func (i MsixPackageApplicationsResponseArgs) ToMsixPackageApplicationsResponseOutput() MsixPackageApplicationsResponseOutput {
	return i.ToMsixPackageApplicationsResponseOutputWithContext(context.Background())
}

func (i MsixPackageApplicationsResponseArgs) ToMsixPackageApplicationsResponseOutputWithContext(ctx context.Context) MsixPackageApplicationsResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MsixPackageApplicationsResponseOutput)
}

// MsixPackageApplicationsResponseArrayInput is an input type that accepts MsixPackageApplicationsResponseArray and MsixPackageApplicationsResponseArrayOutput values.
// You can construct a concrete instance of `MsixPackageApplicationsResponseArrayInput` via:
//
//          MsixPackageApplicationsResponseArray{ MsixPackageApplicationsResponseArgs{...} }
type MsixPackageApplicationsResponseArrayInput interface {
	pulumi.Input

	ToMsixPackageApplicationsResponseArrayOutput() MsixPackageApplicationsResponseArrayOutput
	ToMsixPackageApplicationsResponseArrayOutputWithContext(context.Context) MsixPackageApplicationsResponseArrayOutput
}

type MsixPackageApplicationsResponseArray []MsixPackageApplicationsResponseInput

func (MsixPackageApplicationsResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MsixPackageApplicationsResponse)(nil)).Elem()
}

func (i MsixPackageApplicationsResponseArray) ToMsixPackageApplicationsResponseArrayOutput() MsixPackageApplicationsResponseArrayOutput {
	return i.ToMsixPackageApplicationsResponseArrayOutputWithContext(context.Background())
}

func (i MsixPackageApplicationsResponseArray) ToMsixPackageApplicationsResponseArrayOutputWithContext(ctx context.Context) MsixPackageApplicationsResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MsixPackageApplicationsResponseArrayOutput)
}

// Schema for MSIX Package Application properties.
type MsixPackageApplicationsResponseOutput struct{ *pulumi.OutputState }

func (MsixPackageApplicationsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MsixPackageApplicationsResponse)(nil)).Elem()
}

func (o MsixPackageApplicationsResponseOutput) ToMsixPackageApplicationsResponseOutput() MsixPackageApplicationsResponseOutput {
	return o
}

func (o MsixPackageApplicationsResponseOutput) ToMsixPackageApplicationsResponseOutputWithContext(ctx context.Context) MsixPackageApplicationsResponseOutput {
	return o
}

// Package Application Id, found in appxmanifest.xml.
func (o MsixPackageApplicationsResponseOutput) AppId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MsixPackageApplicationsResponse) *string { return v.AppId }).(pulumi.StringPtrOutput)
}

// Used to activate Package Application. Consists of Package Name and ApplicationID. Found in appxmanifest.xml.
func (o MsixPackageApplicationsResponseOutput) AppUserModelID() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MsixPackageApplicationsResponse) *string { return v.AppUserModelID }).(pulumi.StringPtrOutput)
}

// Description of Package Application.
func (o MsixPackageApplicationsResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MsixPackageApplicationsResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// User friendly name.
func (o MsixPackageApplicationsResponseOutput) FriendlyName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MsixPackageApplicationsResponse) *string { return v.FriendlyName }).(pulumi.StringPtrOutput)
}

// User friendly name.
func (o MsixPackageApplicationsResponseOutput) IconImageName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MsixPackageApplicationsResponse) *string { return v.IconImageName }).(pulumi.StringPtrOutput)
}

// the icon a 64 bit string as a byte array.
func (o MsixPackageApplicationsResponseOutput) RawIcon() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MsixPackageApplicationsResponse) *string { return v.RawIcon }).(pulumi.StringPtrOutput)
}

// the icon a 64 bit string as a byte array.
func (o MsixPackageApplicationsResponseOutput) RawPng() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MsixPackageApplicationsResponse) *string { return v.RawPng }).(pulumi.StringPtrOutput)
}

type MsixPackageApplicationsResponseArrayOutput struct{ *pulumi.OutputState }

func (MsixPackageApplicationsResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MsixPackageApplicationsResponse)(nil)).Elem()
}

func (o MsixPackageApplicationsResponseArrayOutput) ToMsixPackageApplicationsResponseArrayOutput() MsixPackageApplicationsResponseArrayOutput {
	return o
}

func (o MsixPackageApplicationsResponseArrayOutput) ToMsixPackageApplicationsResponseArrayOutputWithContext(ctx context.Context) MsixPackageApplicationsResponseArrayOutput {
	return o
}

func (o MsixPackageApplicationsResponseArrayOutput) Index(i pulumi.IntInput) MsixPackageApplicationsResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) MsixPackageApplicationsResponse {
		return vs[0].([]MsixPackageApplicationsResponse)[vs[1].(int)]
	}).(MsixPackageApplicationsResponseOutput)
}

// Schema for MSIX Package Dependencies properties.
type MsixPackageDependencies struct {
	// Name of package dependency.
	DependencyName *string `pulumi:"dependencyName"`
	// Dependency version required.
	MinVersion *string `pulumi:"minVersion"`
	// Name of dependency publisher.
	Publisher *string `pulumi:"publisher"`
}

// MsixPackageDependenciesInput is an input type that accepts MsixPackageDependenciesArgs and MsixPackageDependenciesOutput values.
// You can construct a concrete instance of `MsixPackageDependenciesInput` via:
//
//          MsixPackageDependenciesArgs{...}
type MsixPackageDependenciesInput interface {
	pulumi.Input

	ToMsixPackageDependenciesOutput() MsixPackageDependenciesOutput
	ToMsixPackageDependenciesOutputWithContext(context.Context) MsixPackageDependenciesOutput
}

// Schema for MSIX Package Dependencies properties.
type MsixPackageDependenciesArgs struct {
	// Name of package dependency.
	DependencyName pulumi.StringPtrInput `pulumi:"dependencyName"`
	// Dependency version required.
	MinVersion pulumi.StringPtrInput `pulumi:"minVersion"`
	// Name of dependency publisher.
	Publisher pulumi.StringPtrInput `pulumi:"publisher"`
}

func (MsixPackageDependenciesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MsixPackageDependencies)(nil)).Elem()
}

func (i MsixPackageDependenciesArgs) ToMsixPackageDependenciesOutput() MsixPackageDependenciesOutput {
	return i.ToMsixPackageDependenciesOutputWithContext(context.Background())
}

func (i MsixPackageDependenciesArgs) ToMsixPackageDependenciesOutputWithContext(ctx context.Context) MsixPackageDependenciesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MsixPackageDependenciesOutput)
}

// MsixPackageDependenciesArrayInput is an input type that accepts MsixPackageDependenciesArray and MsixPackageDependenciesArrayOutput values.
// You can construct a concrete instance of `MsixPackageDependenciesArrayInput` via:
//
//          MsixPackageDependenciesArray{ MsixPackageDependenciesArgs{...} }
type MsixPackageDependenciesArrayInput interface {
	pulumi.Input

	ToMsixPackageDependenciesArrayOutput() MsixPackageDependenciesArrayOutput
	ToMsixPackageDependenciesArrayOutputWithContext(context.Context) MsixPackageDependenciesArrayOutput
}

type MsixPackageDependenciesArray []MsixPackageDependenciesInput

func (MsixPackageDependenciesArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MsixPackageDependencies)(nil)).Elem()
}

func (i MsixPackageDependenciesArray) ToMsixPackageDependenciesArrayOutput() MsixPackageDependenciesArrayOutput {
	return i.ToMsixPackageDependenciesArrayOutputWithContext(context.Background())
}

func (i MsixPackageDependenciesArray) ToMsixPackageDependenciesArrayOutputWithContext(ctx context.Context) MsixPackageDependenciesArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MsixPackageDependenciesArrayOutput)
}

// Schema for MSIX Package Dependencies properties.
type MsixPackageDependenciesOutput struct{ *pulumi.OutputState }

func (MsixPackageDependenciesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MsixPackageDependencies)(nil)).Elem()
}

func (o MsixPackageDependenciesOutput) ToMsixPackageDependenciesOutput() MsixPackageDependenciesOutput {
	return o
}

func (o MsixPackageDependenciesOutput) ToMsixPackageDependenciesOutputWithContext(ctx context.Context) MsixPackageDependenciesOutput {
	return o
}

// Name of package dependency.
func (o MsixPackageDependenciesOutput) DependencyName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MsixPackageDependencies) *string { return v.DependencyName }).(pulumi.StringPtrOutput)
}

// Dependency version required.
func (o MsixPackageDependenciesOutput) MinVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MsixPackageDependencies) *string { return v.MinVersion }).(pulumi.StringPtrOutput)
}

// Name of dependency publisher.
func (o MsixPackageDependenciesOutput) Publisher() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MsixPackageDependencies) *string { return v.Publisher }).(pulumi.StringPtrOutput)
}

type MsixPackageDependenciesArrayOutput struct{ *pulumi.OutputState }

func (MsixPackageDependenciesArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MsixPackageDependencies)(nil)).Elem()
}

func (o MsixPackageDependenciesArrayOutput) ToMsixPackageDependenciesArrayOutput() MsixPackageDependenciesArrayOutput {
	return o
}

func (o MsixPackageDependenciesArrayOutput) ToMsixPackageDependenciesArrayOutputWithContext(ctx context.Context) MsixPackageDependenciesArrayOutput {
	return o
}

func (o MsixPackageDependenciesArrayOutput) Index(i pulumi.IntInput) MsixPackageDependenciesOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) MsixPackageDependencies {
		return vs[0].([]MsixPackageDependencies)[vs[1].(int)]
	}).(MsixPackageDependenciesOutput)
}

// Schema for MSIX Package Dependencies properties.
type MsixPackageDependenciesInvokeResponse struct {
	// Name of package dependency.
	DependencyName *string `pulumi:"dependencyName"`
	// Dependency version required.
	MinVersion *string `pulumi:"minVersion"`
	// Name of dependency publisher.
	Publisher *string `pulumi:"publisher"`
}

// MsixPackageDependenciesInvokeResponseInput is an input type that accepts MsixPackageDependenciesInvokeResponseArgs and MsixPackageDependenciesInvokeResponseOutput values.
// You can construct a concrete instance of `MsixPackageDependenciesInvokeResponseInput` via:
//
//          MsixPackageDependenciesInvokeResponseArgs{...}
type MsixPackageDependenciesInvokeResponseInput interface {
	pulumi.Input

	ToMsixPackageDependenciesInvokeResponseOutput() MsixPackageDependenciesInvokeResponseOutput
	ToMsixPackageDependenciesInvokeResponseOutputWithContext(context.Context) MsixPackageDependenciesInvokeResponseOutput
}

// Schema for MSIX Package Dependencies properties.
type MsixPackageDependenciesInvokeResponseArgs struct {
	// Name of package dependency.
	DependencyName pulumi.StringPtrInput `pulumi:"dependencyName"`
	// Dependency version required.
	MinVersion pulumi.StringPtrInput `pulumi:"minVersion"`
	// Name of dependency publisher.
	Publisher pulumi.StringPtrInput `pulumi:"publisher"`
}

func (MsixPackageDependenciesInvokeResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MsixPackageDependenciesInvokeResponse)(nil)).Elem()
}

func (i MsixPackageDependenciesInvokeResponseArgs) ToMsixPackageDependenciesInvokeResponseOutput() MsixPackageDependenciesInvokeResponseOutput {
	return i.ToMsixPackageDependenciesInvokeResponseOutputWithContext(context.Background())
}

func (i MsixPackageDependenciesInvokeResponseArgs) ToMsixPackageDependenciesInvokeResponseOutputWithContext(ctx context.Context) MsixPackageDependenciesInvokeResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MsixPackageDependenciesInvokeResponseOutput)
}

// MsixPackageDependenciesInvokeResponseArrayInput is an input type that accepts MsixPackageDependenciesInvokeResponseArray and MsixPackageDependenciesInvokeResponseArrayOutput values.
// You can construct a concrete instance of `MsixPackageDependenciesInvokeResponseArrayInput` via:
//
//          MsixPackageDependenciesInvokeResponseArray{ MsixPackageDependenciesInvokeResponseArgs{...} }
type MsixPackageDependenciesInvokeResponseArrayInput interface {
	pulumi.Input

	ToMsixPackageDependenciesInvokeResponseArrayOutput() MsixPackageDependenciesInvokeResponseArrayOutput
	ToMsixPackageDependenciesInvokeResponseArrayOutputWithContext(context.Context) MsixPackageDependenciesInvokeResponseArrayOutput
}

type MsixPackageDependenciesInvokeResponseArray []MsixPackageDependenciesInvokeResponseInput

func (MsixPackageDependenciesInvokeResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MsixPackageDependenciesInvokeResponse)(nil)).Elem()
}

func (i MsixPackageDependenciesInvokeResponseArray) ToMsixPackageDependenciesInvokeResponseArrayOutput() MsixPackageDependenciesInvokeResponseArrayOutput {
	return i.ToMsixPackageDependenciesInvokeResponseArrayOutputWithContext(context.Background())
}

func (i MsixPackageDependenciesInvokeResponseArray) ToMsixPackageDependenciesInvokeResponseArrayOutputWithContext(ctx context.Context) MsixPackageDependenciesInvokeResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MsixPackageDependenciesInvokeResponseArrayOutput)
}

// Schema for MSIX Package Dependencies properties.
type MsixPackageDependenciesInvokeResponseOutput struct{ *pulumi.OutputState }

func (MsixPackageDependenciesInvokeResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MsixPackageDependenciesInvokeResponse)(nil)).Elem()
}

func (o MsixPackageDependenciesInvokeResponseOutput) ToMsixPackageDependenciesInvokeResponseOutput() MsixPackageDependenciesInvokeResponseOutput {
	return o
}

func (o MsixPackageDependenciesInvokeResponseOutput) ToMsixPackageDependenciesInvokeResponseOutputWithContext(ctx context.Context) MsixPackageDependenciesInvokeResponseOutput {
	return o
}

// Name of package dependency.
func (o MsixPackageDependenciesInvokeResponseOutput) DependencyName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MsixPackageDependenciesInvokeResponse) *string { return v.DependencyName }).(pulumi.StringPtrOutput)
}

// Dependency version required.
func (o MsixPackageDependenciesInvokeResponseOutput) MinVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MsixPackageDependenciesInvokeResponse) *string { return v.MinVersion }).(pulumi.StringPtrOutput)
}

// Name of dependency publisher.
func (o MsixPackageDependenciesInvokeResponseOutput) Publisher() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MsixPackageDependenciesInvokeResponse) *string { return v.Publisher }).(pulumi.StringPtrOutput)
}

type MsixPackageDependenciesInvokeResponseArrayOutput struct{ *pulumi.OutputState }

func (MsixPackageDependenciesInvokeResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MsixPackageDependenciesInvokeResponse)(nil)).Elem()
}

func (o MsixPackageDependenciesInvokeResponseArrayOutput) ToMsixPackageDependenciesInvokeResponseArrayOutput() MsixPackageDependenciesInvokeResponseArrayOutput {
	return o
}

func (o MsixPackageDependenciesInvokeResponseArrayOutput) ToMsixPackageDependenciesInvokeResponseArrayOutputWithContext(ctx context.Context) MsixPackageDependenciesInvokeResponseArrayOutput {
	return o
}

func (o MsixPackageDependenciesInvokeResponseArrayOutput) Index(i pulumi.IntInput) MsixPackageDependenciesInvokeResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) MsixPackageDependenciesInvokeResponse {
		return vs[0].([]MsixPackageDependenciesInvokeResponse)[vs[1].(int)]
	}).(MsixPackageDependenciesInvokeResponseOutput)
}

// Schema for MSIX Package Dependencies properties.
type MsixPackageDependenciesResponse struct {
	// Name of package dependency.
	DependencyName *string `pulumi:"dependencyName"`
	// Dependency version required.
	MinVersion *string `pulumi:"minVersion"`
	// Name of dependency publisher.
	Publisher *string `pulumi:"publisher"`
}

// MsixPackageDependenciesResponseInput is an input type that accepts MsixPackageDependenciesResponseArgs and MsixPackageDependenciesResponseOutput values.
// You can construct a concrete instance of `MsixPackageDependenciesResponseInput` via:
//
//          MsixPackageDependenciesResponseArgs{...}
type MsixPackageDependenciesResponseInput interface {
	pulumi.Input

	ToMsixPackageDependenciesResponseOutput() MsixPackageDependenciesResponseOutput
	ToMsixPackageDependenciesResponseOutputWithContext(context.Context) MsixPackageDependenciesResponseOutput
}

// Schema for MSIX Package Dependencies properties.
type MsixPackageDependenciesResponseArgs struct {
	// Name of package dependency.
	DependencyName pulumi.StringPtrInput `pulumi:"dependencyName"`
	// Dependency version required.
	MinVersion pulumi.StringPtrInput `pulumi:"minVersion"`
	// Name of dependency publisher.
	Publisher pulumi.StringPtrInput `pulumi:"publisher"`
}

func (MsixPackageDependenciesResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MsixPackageDependenciesResponse)(nil)).Elem()
}

func (i MsixPackageDependenciesResponseArgs) ToMsixPackageDependenciesResponseOutput() MsixPackageDependenciesResponseOutput {
	return i.ToMsixPackageDependenciesResponseOutputWithContext(context.Background())
}

func (i MsixPackageDependenciesResponseArgs) ToMsixPackageDependenciesResponseOutputWithContext(ctx context.Context) MsixPackageDependenciesResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MsixPackageDependenciesResponseOutput)
}

// MsixPackageDependenciesResponseArrayInput is an input type that accepts MsixPackageDependenciesResponseArray and MsixPackageDependenciesResponseArrayOutput values.
// You can construct a concrete instance of `MsixPackageDependenciesResponseArrayInput` via:
//
//          MsixPackageDependenciesResponseArray{ MsixPackageDependenciesResponseArgs{...} }
type MsixPackageDependenciesResponseArrayInput interface {
	pulumi.Input

	ToMsixPackageDependenciesResponseArrayOutput() MsixPackageDependenciesResponseArrayOutput
	ToMsixPackageDependenciesResponseArrayOutputWithContext(context.Context) MsixPackageDependenciesResponseArrayOutput
}

type MsixPackageDependenciesResponseArray []MsixPackageDependenciesResponseInput

func (MsixPackageDependenciesResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MsixPackageDependenciesResponse)(nil)).Elem()
}

func (i MsixPackageDependenciesResponseArray) ToMsixPackageDependenciesResponseArrayOutput() MsixPackageDependenciesResponseArrayOutput {
	return i.ToMsixPackageDependenciesResponseArrayOutputWithContext(context.Background())
}

func (i MsixPackageDependenciesResponseArray) ToMsixPackageDependenciesResponseArrayOutputWithContext(ctx context.Context) MsixPackageDependenciesResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MsixPackageDependenciesResponseArrayOutput)
}

// Schema for MSIX Package Dependencies properties.
type MsixPackageDependenciesResponseOutput struct{ *pulumi.OutputState }

func (MsixPackageDependenciesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MsixPackageDependenciesResponse)(nil)).Elem()
}

func (o MsixPackageDependenciesResponseOutput) ToMsixPackageDependenciesResponseOutput() MsixPackageDependenciesResponseOutput {
	return o
}

func (o MsixPackageDependenciesResponseOutput) ToMsixPackageDependenciesResponseOutputWithContext(ctx context.Context) MsixPackageDependenciesResponseOutput {
	return o
}

// Name of package dependency.
func (o MsixPackageDependenciesResponseOutput) DependencyName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MsixPackageDependenciesResponse) *string { return v.DependencyName }).(pulumi.StringPtrOutput)
}

// Dependency version required.
func (o MsixPackageDependenciesResponseOutput) MinVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MsixPackageDependenciesResponse) *string { return v.MinVersion }).(pulumi.StringPtrOutput)
}

// Name of dependency publisher.
func (o MsixPackageDependenciesResponseOutput) Publisher() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MsixPackageDependenciesResponse) *string { return v.Publisher }).(pulumi.StringPtrOutput)
}

type MsixPackageDependenciesResponseArrayOutput struct{ *pulumi.OutputState }

func (MsixPackageDependenciesResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MsixPackageDependenciesResponse)(nil)).Elem()
}

func (o MsixPackageDependenciesResponseArrayOutput) ToMsixPackageDependenciesResponseArrayOutput() MsixPackageDependenciesResponseArrayOutput {
	return o
}

func (o MsixPackageDependenciesResponseArrayOutput) ToMsixPackageDependenciesResponseArrayOutputWithContext(ctx context.Context) MsixPackageDependenciesResponseArrayOutput {
	return o
}

func (o MsixPackageDependenciesResponseArrayOutput) Index(i pulumi.IntInput) MsixPackageDependenciesResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) MsixPackageDependenciesResponse {
		return vs[0].([]MsixPackageDependenciesResponse)[vs[1].(int)]
	}).(MsixPackageDependenciesResponseOutput)
}

// Represents a RegistrationInfo definition.
type RegistrationInfo struct {
	// Expiration time of registration token.
	ExpirationTime *string `pulumi:"expirationTime"`
	// The type of resetting the token.
	RegistrationTokenOperation *string `pulumi:"registrationTokenOperation"`
	// The registration token base64 encoded string.
	Token *string `pulumi:"token"`
}

// RegistrationInfoInput is an input type that accepts RegistrationInfoArgs and RegistrationInfoOutput values.
// You can construct a concrete instance of `RegistrationInfoInput` via:
//
//          RegistrationInfoArgs{...}
type RegistrationInfoInput interface {
	pulumi.Input

	ToRegistrationInfoOutput() RegistrationInfoOutput
	ToRegistrationInfoOutputWithContext(context.Context) RegistrationInfoOutput
}

// Represents a RegistrationInfo definition.
type RegistrationInfoArgs struct {
	// Expiration time of registration token.
	ExpirationTime pulumi.StringPtrInput `pulumi:"expirationTime"`
	// The type of resetting the token.
	RegistrationTokenOperation pulumi.StringPtrInput `pulumi:"registrationTokenOperation"`
	// The registration token base64 encoded string.
	Token pulumi.StringPtrInput `pulumi:"token"`
}

func (RegistrationInfoArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RegistrationInfo)(nil)).Elem()
}

func (i RegistrationInfoArgs) ToRegistrationInfoOutput() RegistrationInfoOutput {
	return i.ToRegistrationInfoOutputWithContext(context.Background())
}

func (i RegistrationInfoArgs) ToRegistrationInfoOutputWithContext(ctx context.Context) RegistrationInfoOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegistrationInfoOutput)
}

func (i RegistrationInfoArgs) ToRegistrationInfoPtrOutput() RegistrationInfoPtrOutput {
	return i.ToRegistrationInfoPtrOutputWithContext(context.Background())
}

func (i RegistrationInfoArgs) ToRegistrationInfoPtrOutputWithContext(ctx context.Context) RegistrationInfoPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegistrationInfoOutput).ToRegistrationInfoPtrOutputWithContext(ctx)
}

// RegistrationInfoPtrInput is an input type that accepts RegistrationInfoArgs, RegistrationInfoPtr and RegistrationInfoPtrOutput values.
// You can construct a concrete instance of `RegistrationInfoPtrInput` via:
//
//          RegistrationInfoArgs{...}
//
//  or:
//
//          nil
type RegistrationInfoPtrInput interface {
	pulumi.Input

	ToRegistrationInfoPtrOutput() RegistrationInfoPtrOutput
	ToRegistrationInfoPtrOutputWithContext(context.Context) RegistrationInfoPtrOutput
}

type registrationInfoPtrType RegistrationInfoArgs

func RegistrationInfoPtr(v *RegistrationInfoArgs) RegistrationInfoPtrInput {
	return (*registrationInfoPtrType)(v)
}

func (*registrationInfoPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RegistrationInfo)(nil)).Elem()
}

func (i *registrationInfoPtrType) ToRegistrationInfoPtrOutput() RegistrationInfoPtrOutput {
	return i.ToRegistrationInfoPtrOutputWithContext(context.Background())
}

func (i *registrationInfoPtrType) ToRegistrationInfoPtrOutputWithContext(ctx context.Context) RegistrationInfoPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegistrationInfoPtrOutput)
}

// Represents a RegistrationInfo definition.
type RegistrationInfoOutput struct{ *pulumi.OutputState }

func (RegistrationInfoOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RegistrationInfo)(nil)).Elem()
}

func (o RegistrationInfoOutput) ToRegistrationInfoOutput() RegistrationInfoOutput {
	return o
}

func (o RegistrationInfoOutput) ToRegistrationInfoOutputWithContext(ctx context.Context) RegistrationInfoOutput {
	return o
}

func (o RegistrationInfoOutput) ToRegistrationInfoPtrOutput() RegistrationInfoPtrOutput {
	return o.ToRegistrationInfoPtrOutputWithContext(context.Background())
}

func (o RegistrationInfoOutput) ToRegistrationInfoPtrOutputWithContext(ctx context.Context) RegistrationInfoPtrOutput {
	return o.ApplyT(func(v RegistrationInfo) *RegistrationInfo {
		return &v
	}).(RegistrationInfoPtrOutput)
}

// Expiration time of registration token.
func (o RegistrationInfoOutput) ExpirationTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RegistrationInfo) *string { return v.ExpirationTime }).(pulumi.StringPtrOutput)
}

// The type of resetting the token.
func (o RegistrationInfoOutput) RegistrationTokenOperation() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RegistrationInfo) *string { return v.RegistrationTokenOperation }).(pulumi.StringPtrOutput)
}

// The registration token base64 encoded string.
func (o RegistrationInfoOutput) Token() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RegistrationInfo) *string { return v.Token }).(pulumi.StringPtrOutput)
}

type RegistrationInfoPtrOutput struct{ *pulumi.OutputState }

func (RegistrationInfoPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RegistrationInfo)(nil)).Elem()
}

func (o RegistrationInfoPtrOutput) ToRegistrationInfoPtrOutput() RegistrationInfoPtrOutput {
	return o
}

func (o RegistrationInfoPtrOutput) ToRegistrationInfoPtrOutputWithContext(ctx context.Context) RegistrationInfoPtrOutput {
	return o
}

func (o RegistrationInfoPtrOutput) Elem() RegistrationInfoOutput {
	return o.ApplyT(func(v *RegistrationInfo) RegistrationInfo { return *v }).(RegistrationInfoOutput)
}

// Expiration time of registration token.
func (o RegistrationInfoPtrOutput) ExpirationTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RegistrationInfo) *string {
		if v == nil {
			return nil
		}
		return v.ExpirationTime
	}).(pulumi.StringPtrOutput)
}

// The type of resetting the token.
func (o RegistrationInfoPtrOutput) RegistrationTokenOperation() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RegistrationInfo) *string {
		if v == nil {
			return nil
		}
		return v.RegistrationTokenOperation
	}).(pulumi.StringPtrOutput)
}

// The registration token base64 encoded string.
func (o RegistrationInfoPtrOutput) Token() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RegistrationInfo) *string {
		if v == nil {
			return nil
		}
		return v.Token
	}).(pulumi.StringPtrOutput)
}

// Represents a RegistrationInfo definition.
type RegistrationInfoInvokeResponse struct {
	// Expiration time of registration token.
	ExpirationTime *string `pulumi:"expirationTime"`
	// The type of resetting the token.
	RegistrationTokenOperation *string `pulumi:"registrationTokenOperation"`
	// The registration token base64 encoded string.
	Token *string `pulumi:"token"`
}

// RegistrationInfoInvokeResponseInput is an input type that accepts RegistrationInfoInvokeResponseArgs and RegistrationInfoInvokeResponseOutput values.
// You can construct a concrete instance of `RegistrationInfoInvokeResponseInput` via:
//
//          RegistrationInfoInvokeResponseArgs{...}
type RegistrationInfoInvokeResponseInput interface {
	pulumi.Input

	ToRegistrationInfoInvokeResponseOutput() RegistrationInfoInvokeResponseOutput
	ToRegistrationInfoInvokeResponseOutputWithContext(context.Context) RegistrationInfoInvokeResponseOutput
}

// Represents a RegistrationInfo definition.
type RegistrationInfoInvokeResponseArgs struct {
	// Expiration time of registration token.
	ExpirationTime pulumi.StringPtrInput `pulumi:"expirationTime"`
	// The type of resetting the token.
	RegistrationTokenOperation pulumi.StringPtrInput `pulumi:"registrationTokenOperation"`
	// The registration token base64 encoded string.
	Token pulumi.StringPtrInput `pulumi:"token"`
}

func (RegistrationInfoInvokeResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RegistrationInfoInvokeResponse)(nil)).Elem()
}

func (i RegistrationInfoInvokeResponseArgs) ToRegistrationInfoInvokeResponseOutput() RegistrationInfoInvokeResponseOutput {
	return i.ToRegistrationInfoInvokeResponseOutputWithContext(context.Background())
}

func (i RegistrationInfoInvokeResponseArgs) ToRegistrationInfoInvokeResponseOutputWithContext(ctx context.Context) RegistrationInfoInvokeResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegistrationInfoInvokeResponseOutput)
}

// Represents a RegistrationInfo definition.
type RegistrationInfoInvokeResponseOutput struct{ *pulumi.OutputState }

func (RegistrationInfoInvokeResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RegistrationInfoInvokeResponse)(nil)).Elem()
}

func (o RegistrationInfoInvokeResponseOutput) ToRegistrationInfoInvokeResponseOutput() RegistrationInfoInvokeResponseOutput {
	return o
}

func (o RegistrationInfoInvokeResponseOutput) ToRegistrationInfoInvokeResponseOutputWithContext(ctx context.Context) RegistrationInfoInvokeResponseOutput {
	return o
}

// Expiration time of registration token.
func (o RegistrationInfoInvokeResponseOutput) ExpirationTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RegistrationInfoInvokeResponse) *string { return v.ExpirationTime }).(pulumi.StringPtrOutput)
}

// The type of resetting the token.
func (o RegistrationInfoInvokeResponseOutput) RegistrationTokenOperation() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RegistrationInfoInvokeResponse) *string { return v.RegistrationTokenOperation }).(pulumi.StringPtrOutput)
}

// The registration token base64 encoded string.
func (o RegistrationInfoInvokeResponseOutput) Token() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RegistrationInfoInvokeResponse) *string { return v.Token }).(pulumi.StringPtrOutput)
}

// Represents a RegistrationInfo definition.
type RegistrationInfoResponse struct {
	// Expiration time of registration token.
	ExpirationTime *string `pulumi:"expirationTime"`
	// The type of resetting the token.
	RegistrationTokenOperation *string `pulumi:"registrationTokenOperation"`
	// The registration token base64 encoded string.
	Token *string `pulumi:"token"`
}

// RegistrationInfoResponseInput is an input type that accepts RegistrationInfoResponseArgs and RegistrationInfoResponseOutput values.
// You can construct a concrete instance of `RegistrationInfoResponseInput` via:
//
//          RegistrationInfoResponseArgs{...}
type RegistrationInfoResponseInput interface {
	pulumi.Input

	ToRegistrationInfoResponseOutput() RegistrationInfoResponseOutput
	ToRegistrationInfoResponseOutputWithContext(context.Context) RegistrationInfoResponseOutput
}

// Represents a RegistrationInfo definition.
type RegistrationInfoResponseArgs struct {
	// Expiration time of registration token.
	ExpirationTime pulumi.StringPtrInput `pulumi:"expirationTime"`
	// The type of resetting the token.
	RegistrationTokenOperation pulumi.StringPtrInput `pulumi:"registrationTokenOperation"`
	// The registration token base64 encoded string.
	Token pulumi.StringPtrInput `pulumi:"token"`
}

func (RegistrationInfoResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RegistrationInfoResponse)(nil)).Elem()
}

func (i RegistrationInfoResponseArgs) ToRegistrationInfoResponseOutput() RegistrationInfoResponseOutput {
	return i.ToRegistrationInfoResponseOutputWithContext(context.Background())
}

func (i RegistrationInfoResponseArgs) ToRegistrationInfoResponseOutputWithContext(ctx context.Context) RegistrationInfoResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegistrationInfoResponseOutput)
}

func (i RegistrationInfoResponseArgs) ToRegistrationInfoResponsePtrOutput() RegistrationInfoResponsePtrOutput {
	return i.ToRegistrationInfoResponsePtrOutputWithContext(context.Background())
}

func (i RegistrationInfoResponseArgs) ToRegistrationInfoResponsePtrOutputWithContext(ctx context.Context) RegistrationInfoResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegistrationInfoResponseOutput).ToRegistrationInfoResponsePtrOutputWithContext(ctx)
}

// RegistrationInfoResponsePtrInput is an input type that accepts RegistrationInfoResponseArgs, RegistrationInfoResponsePtr and RegistrationInfoResponsePtrOutput values.
// You can construct a concrete instance of `RegistrationInfoResponsePtrInput` via:
//
//          RegistrationInfoResponseArgs{...}
//
//  or:
//
//          nil
type RegistrationInfoResponsePtrInput interface {
	pulumi.Input

	ToRegistrationInfoResponsePtrOutput() RegistrationInfoResponsePtrOutput
	ToRegistrationInfoResponsePtrOutputWithContext(context.Context) RegistrationInfoResponsePtrOutput
}

type registrationInfoResponsePtrType RegistrationInfoResponseArgs

func RegistrationInfoResponsePtr(v *RegistrationInfoResponseArgs) RegistrationInfoResponsePtrInput {
	return (*registrationInfoResponsePtrType)(v)
}

func (*registrationInfoResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RegistrationInfoResponse)(nil)).Elem()
}

func (i *registrationInfoResponsePtrType) ToRegistrationInfoResponsePtrOutput() RegistrationInfoResponsePtrOutput {
	return i.ToRegistrationInfoResponsePtrOutputWithContext(context.Background())
}

func (i *registrationInfoResponsePtrType) ToRegistrationInfoResponsePtrOutputWithContext(ctx context.Context) RegistrationInfoResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegistrationInfoResponsePtrOutput)
}

// Represents a RegistrationInfo definition.
type RegistrationInfoResponseOutput struct{ *pulumi.OutputState }

func (RegistrationInfoResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RegistrationInfoResponse)(nil)).Elem()
}

func (o RegistrationInfoResponseOutput) ToRegistrationInfoResponseOutput() RegistrationInfoResponseOutput {
	return o
}

func (o RegistrationInfoResponseOutput) ToRegistrationInfoResponseOutputWithContext(ctx context.Context) RegistrationInfoResponseOutput {
	return o
}

func (o RegistrationInfoResponseOutput) ToRegistrationInfoResponsePtrOutput() RegistrationInfoResponsePtrOutput {
	return o.ToRegistrationInfoResponsePtrOutputWithContext(context.Background())
}

func (o RegistrationInfoResponseOutput) ToRegistrationInfoResponsePtrOutputWithContext(ctx context.Context) RegistrationInfoResponsePtrOutput {
	return o.ApplyT(func(v RegistrationInfoResponse) *RegistrationInfoResponse {
		return &v
	}).(RegistrationInfoResponsePtrOutput)
}

// Expiration time of registration token.
func (o RegistrationInfoResponseOutput) ExpirationTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RegistrationInfoResponse) *string { return v.ExpirationTime }).(pulumi.StringPtrOutput)
}

// The type of resetting the token.
func (o RegistrationInfoResponseOutput) RegistrationTokenOperation() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RegistrationInfoResponse) *string { return v.RegistrationTokenOperation }).(pulumi.StringPtrOutput)
}

// The registration token base64 encoded string.
func (o RegistrationInfoResponseOutput) Token() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RegistrationInfoResponse) *string { return v.Token }).(pulumi.StringPtrOutput)
}

type RegistrationInfoResponsePtrOutput struct{ *pulumi.OutputState }

func (RegistrationInfoResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RegistrationInfoResponse)(nil)).Elem()
}

func (o RegistrationInfoResponsePtrOutput) ToRegistrationInfoResponsePtrOutput() RegistrationInfoResponsePtrOutput {
	return o
}

func (o RegistrationInfoResponsePtrOutput) ToRegistrationInfoResponsePtrOutputWithContext(ctx context.Context) RegistrationInfoResponsePtrOutput {
	return o
}

func (o RegistrationInfoResponsePtrOutput) Elem() RegistrationInfoResponseOutput {
	return o.ApplyT(func(v *RegistrationInfoResponse) RegistrationInfoResponse { return *v }).(RegistrationInfoResponseOutput)
}

// Expiration time of registration token.
func (o RegistrationInfoResponsePtrOutput) ExpirationTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RegistrationInfoResponse) *string {
		if v == nil {
			return nil
		}
		return v.ExpirationTime
	}).(pulumi.StringPtrOutput)
}

// The type of resetting the token.
func (o RegistrationInfoResponsePtrOutput) RegistrationTokenOperation() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RegistrationInfoResponse) *string {
		if v == nil {
			return nil
		}
		return v.RegistrationTokenOperation
	}).(pulumi.StringPtrOutput)
}

// The registration token base64 encoded string.
func (o RegistrationInfoResponsePtrOutput) Token() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RegistrationInfoResponse) *string {
		if v == nil {
			return nil
		}
		return v.Token
	}).(pulumi.StringPtrOutput)
}

// Scaling plan reference to hostpool.
type ScalingHostPoolReference struct {
	// Arm path of referenced hostpool.
	HostPoolArmPath *string `pulumi:"hostPoolArmPath"`
	// Is the scaling plan enabled for this hostpool.
	ScalingPlanEnabled *bool `pulumi:"scalingPlanEnabled"`
}

// ScalingHostPoolReferenceInput is an input type that accepts ScalingHostPoolReferenceArgs and ScalingHostPoolReferenceOutput values.
// You can construct a concrete instance of `ScalingHostPoolReferenceInput` via:
//
//          ScalingHostPoolReferenceArgs{...}
type ScalingHostPoolReferenceInput interface {
	pulumi.Input

	ToScalingHostPoolReferenceOutput() ScalingHostPoolReferenceOutput
	ToScalingHostPoolReferenceOutputWithContext(context.Context) ScalingHostPoolReferenceOutput
}

// Scaling plan reference to hostpool.
type ScalingHostPoolReferenceArgs struct {
	// Arm path of referenced hostpool.
	HostPoolArmPath pulumi.StringPtrInput `pulumi:"hostPoolArmPath"`
	// Is the scaling plan enabled for this hostpool.
	ScalingPlanEnabled pulumi.BoolPtrInput `pulumi:"scalingPlanEnabled"`
}

func (ScalingHostPoolReferenceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ScalingHostPoolReference)(nil)).Elem()
}

func (i ScalingHostPoolReferenceArgs) ToScalingHostPoolReferenceOutput() ScalingHostPoolReferenceOutput {
	return i.ToScalingHostPoolReferenceOutputWithContext(context.Background())
}

func (i ScalingHostPoolReferenceArgs) ToScalingHostPoolReferenceOutputWithContext(ctx context.Context) ScalingHostPoolReferenceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScalingHostPoolReferenceOutput)
}

// ScalingHostPoolReferenceArrayInput is an input type that accepts ScalingHostPoolReferenceArray and ScalingHostPoolReferenceArrayOutput values.
// You can construct a concrete instance of `ScalingHostPoolReferenceArrayInput` via:
//
//          ScalingHostPoolReferenceArray{ ScalingHostPoolReferenceArgs{...} }
type ScalingHostPoolReferenceArrayInput interface {
	pulumi.Input

	ToScalingHostPoolReferenceArrayOutput() ScalingHostPoolReferenceArrayOutput
	ToScalingHostPoolReferenceArrayOutputWithContext(context.Context) ScalingHostPoolReferenceArrayOutput
}

type ScalingHostPoolReferenceArray []ScalingHostPoolReferenceInput

func (ScalingHostPoolReferenceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ScalingHostPoolReference)(nil)).Elem()
}

func (i ScalingHostPoolReferenceArray) ToScalingHostPoolReferenceArrayOutput() ScalingHostPoolReferenceArrayOutput {
	return i.ToScalingHostPoolReferenceArrayOutputWithContext(context.Background())
}

func (i ScalingHostPoolReferenceArray) ToScalingHostPoolReferenceArrayOutputWithContext(ctx context.Context) ScalingHostPoolReferenceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScalingHostPoolReferenceArrayOutput)
}

// Scaling plan reference to hostpool.
type ScalingHostPoolReferenceOutput struct{ *pulumi.OutputState }

func (ScalingHostPoolReferenceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ScalingHostPoolReference)(nil)).Elem()
}

func (o ScalingHostPoolReferenceOutput) ToScalingHostPoolReferenceOutput() ScalingHostPoolReferenceOutput {
	return o
}

func (o ScalingHostPoolReferenceOutput) ToScalingHostPoolReferenceOutputWithContext(ctx context.Context) ScalingHostPoolReferenceOutput {
	return o
}

// Arm path of referenced hostpool.
func (o ScalingHostPoolReferenceOutput) HostPoolArmPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ScalingHostPoolReference) *string { return v.HostPoolArmPath }).(pulumi.StringPtrOutput)
}

// Is the scaling plan enabled for this hostpool.
func (o ScalingHostPoolReferenceOutput) ScalingPlanEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ScalingHostPoolReference) *bool { return v.ScalingPlanEnabled }).(pulumi.BoolPtrOutput)
}

type ScalingHostPoolReferenceArrayOutput struct{ *pulumi.OutputState }

func (ScalingHostPoolReferenceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ScalingHostPoolReference)(nil)).Elem()
}

func (o ScalingHostPoolReferenceArrayOutput) ToScalingHostPoolReferenceArrayOutput() ScalingHostPoolReferenceArrayOutput {
	return o
}

func (o ScalingHostPoolReferenceArrayOutput) ToScalingHostPoolReferenceArrayOutputWithContext(ctx context.Context) ScalingHostPoolReferenceArrayOutput {
	return o
}

func (o ScalingHostPoolReferenceArrayOutput) Index(i pulumi.IntInput) ScalingHostPoolReferenceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ScalingHostPoolReference {
		return vs[0].([]ScalingHostPoolReference)[vs[1].(int)]
	}).(ScalingHostPoolReferenceOutput)
}

// Scaling plan reference to hostpool.
type ScalingHostPoolReferenceInvokeResponse struct {
	// Arm path of referenced hostpool.
	HostPoolArmPath *string `pulumi:"hostPoolArmPath"`
	// Is the scaling plan enabled for this hostpool.
	ScalingPlanEnabled *bool `pulumi:"scalingPlanEnabled"`
}

// ScalingHostPoolReferenceInvokeResponseInput is an input type that accepts ScalingHostPoolReferenceInvokeResponseArgs and ScalingHostPoolReferenceInvokeResponseOutput values.
// You can construct a concrete instance of `ScalingHostPoolReferenceInvokeResponseInput` via:
//
//          ScalingHostPoolReferenceInvokeResponseArgs{...}
type ScalingHostPoolReferenceInvokeResponseInput interface {
	pulumi.Input

	ToScalingHostPoolReferenceInvokeResponseOutput() ScalingHostPoolReferenceInvokeResponseOutput
	ToScalingHostPoolReferenceInvokeResponseOutputWithContext(context.Context) ScalingHostPoolReferenceInvokeResponseOutput
}

// Scaling plan reference to hostpool.
type ScalingHostPoolReferenceInvokeResponseArgs struct {
	// Arm path of referenced hostpool.
	HostPoolArmPath pulumi.StringPtrInput `pulumi:"hostPoolArmPath"`
	// Is the scaling plan enabled for this hostpool.
	ScalingPlanEnabled pulumi.BoolPtrInput `pulumi:"scalingPlanEnabled"`
}

func (ScalingHostPoolReferenceInvokeResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ScalingHostPoolReferenceInvokeResponse)(nil)).Elem()
}

func (i ScalingHostPoolReferenceInvokeResponseArgs) ToScalingHostPoolReferenceInvokeResponseOutput() ScalingHostPoolReferenceInvokeResponseOutput {
	return i.ToScalingHostPoolReferenceInvokeResponseOutputWithContext(context.Background())
}

func (i ScalingHostPoolReferenceInvokeResponseArgs) ToScalingHostPoolReferenceInvokeResponseOutputWithContext(ctx context.Context) ScalingHostPoolReferenceInvokeResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScalingHostPoolReferenceInvokeResponseOutput)
}

// ScalingHostPoolReferenceInvokeResponseArrayInput is an input type that accepts ScalingHostPoolReferenceInvokeResponseArray and ScalingHostPoolReferenceInvokeResponseArrayOutput values.
// You can construct a concrete instance of `ScalingHostPoolReferenceInvokeResponseArrayInput` via:
//
//          ScalingHostPoolReferenceInvokeResponseArray{ ScalingHostPoolReferenceInvokeResponseArgs{...} }
type ScalingHostPoolReferenceInvokeResponseArrayInput interface {
	pulumi.Input

	ToScalingHostPoolReferenceInvokeResponseArrayOutput() ScalingHostPoolReferenceInvokeResponseArrayOutput
	ToScalingHostPoolReferenceInvokeResponseArrayOutputWithContext(context.Context) ScalingHostPoolReferenceInvokeResponseArrayOutput
}

type ScalingHostPoolReferenceInvokeResponseArray []ScalingHostPoolReferenceInvokeResponseInput

func (ScalingHostPoolReferenceInvokeResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ScalingHostPoolReferenceInvokeResponse)(nil)).Elem()
}

func (i ScalingHostPoolReferenceInvokeResponseArray) ToScalingHostPoolReferenceInvokeResponseArrayOutput() ScalingHostPoolReferenceInvokeResponseArrayOutput {
	return i.ToScalingHostPoolReferenceInvokeResponseArrayOutputWithContext(context.Background())
}

func (i ScalingHostPoolReferenceInvokeResponseArray) ToScalingHostPoolReferenceInvokeResponseArrayOutputWithContext(ctx context.Context) ScalingHostPoolReferenceInvokeResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScalingHostPoolReferenceInvokeResponseArrayOutput)
}

// Scaling plan reference to hostpool.
type ScalingHostPoolReferenceInvokeResponseOutput struct{ *pulumi.OutputState }

func (ScalingHostPoolReferenceInvokeResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ScalingHostPoolReferenceInvokeResponse)(nil)).Elem()
}

func (o ScalingHostPoolReferenceInvokeResponseOutput) ToScalingHostPoolReferenceInvokeResponseOutput() ScalingHostPoolReferenceInvokeResponseOutput {
	return o
}

func (o ScalingHostPoolReferenceInvokeResponseOutput) ToScalingHostPoolReferenceInvokeResponseOutputWithContext(ctx context.Context) ScalingHostPoolReferenceInvokeResponseOutput {
	return o
}

// Arm path of referenced hostpool.
func (o ScalingHostPoolReferenceInvokeResponseOutput) HostPoolArmPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ScalingHostPoolReferenceInvokeResponse) *string { return v.HostPoolArmPath }).(pulumi.StringPtrOutput)
}

// Is the scaling plan enabled for this hostpool.
func (o ScalingHostPoolReferenceInvokeResponseOutput) ScalingPlanEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ScalingHostPoolReferenceInvokeResponse) *bool { return v.ScalingPlanEnabled }).(pulumi.BoolPtrOutput)
}

type ScalingHostPoolReferenceInvokeResponseArrayOutput struct{ *pulumi.OutputState }

func (ScalingHostPoolReferenceInvokeResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ScalingHostPoolReferenceInvokeResponse)(nil)).Elem()
}

func (o ScalingHostPoolReferenceInvokeResponseArrayOutput) ToScalingHostPoolReferenceInvokeResponseArrayOutput() ScalingHostPoolReferenceInvokeResponseArrayOutput {
	return o
}

func (o ScalingHostPoolReferenceInvokeResponseArrayOutput) ToScalingHostPoolReferenceInvokeResponseArrayOutputWithContext(ctx context.Context) ScalingHostPoolReferenceInvokeResponseArrayOutput {
	return o
}

func (o ScalingHostPoolReferenceInvokeResponseArrayOutput) Index(i pulumi.IntInput) ScalingHostPoolReferenceInvokeResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ScalingHostPoolReferenceInvokeResponse {
		return vs[0].([]ScalingHostPoolReferenceInvokeResponse)[vs[1].(int)]
	}).(ScalingHostPoolReferenceInvokeResponseOutput)
}

// Scaling plan reference to hostpool.
type ScalingHostPoolReferenceResponse struct {
	// Arm path of referenced hostpool.
	HostPoolArmPath *string `pulumi:"hostPoolArmPath"`
	// Is the scaling plan enabled for this hostpool.
	ScalingPlanEnabled *bool `pulumi:"scalingPlanEnabled"`
}

// ScalingHostPoolReferenceResponseInput is an input type that accepts ScalingHostPoolReferenceResponseArgs and ScalingHostPoolReferenceResponseOutput values.
// You can construct a concrete instance of `ScalingHostPoolReferenceResponseInput` via:
//
//          ScalingHostPoolReferenceResponseArgs{...}
type ScalingHostPoolReferenceResponseInput interface {
	pulumi.Input

	ToScalingHostPoolReferenceResponseOutput() ScalingHostPoolReferenceResponseOutput
	ToScalingHostPoolReferenceResponseOutputWithContext(context.Context) ScalingHostPoolReferenceResponseOutput
}

// Scaling plan reference to hostpool.
type ScalingHostPoolReferenceResponseArgs struct {
	// Arm path of referenced hostpool.
	HostPoolArmPath pulumi.StringPtrInput `pulumi:"hostPoolArmPath"`
	// Is the scaling plan enabled for this hostpool.
	ScalingPlanEnabled pulumi.BoolPtrInput `pulumi:"scalingPlanEnabled"`
}

func (ScalingHostPoolReferenceResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ScalingHostPoolReferenceResponse)(nil)).Elem()
}

func (i ScalingHostPoolReferenceResponseArgs) ToScalingHostPoolReferenceResponseOutput() ScalingHostPoolReferenceResponseOutput {
	return i.ToScalingHostPoolReferenceResponseOutputWithContext(context.Background())
}

func (i ScalingHostPoolReferenceResponseArgs) ToScalingHostPoolReferenceResponseOutputWithContext(ctx context.Context) ScalingHostPoolReferenceResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScalingHostPoolReferenceResponseOutput)
}

// ScalingHostPoolReferenceResponseArrayInput is an input type that accepts ScalingHostPoolReferenceResponseArray and ScalingHostPoolReferenceResponseArrayOutput values.
// You can construct a concrete instance of `ScalingHostPoolReferenceResponseArrayInput` via:
//
//          ScalingHostPoolReferenceResponseArray{ ScalingHostPoolReferenceResponseArgs{...} }
type ScalingHostPoolReferenceResponseArrayInput interface {
	pulumi.Input

	ToScalingHostPoolReferenceResponseArrayOutput() ScalingHostPoolReferenceResponseArrayOutput
	ToScalingHostPoolReferenceResponseArrayOutputWithContext(context.Context) ScalingHostPoolReferenceResponseArrayOutput
}

type ScalingHostPoolReferenceResponseArray []ScalingHostPoolReferenceResponseInput

func (ScalingHostPoolReferenceResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ScalingHostPoolReferenceResponse)(nil)).Elem()
}

func (i ScalingHostPoolReferenceResponseArray) ToScalingHostPoolReferenceResponseArrayOutput() ScalingHostPoolReferenceResponseArrayOutput {
	return i.ToScalingHostPoolReferenceResponseArrayOutputWithContext(context.Background())
}

func (i ScalingHostPoolReferenceResponseArray) ToScalingHostPoolReferenceResponseArrayOutputWithContext(ctx context.Context) ScalingHostPoolReferenceResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScalingHostPoolReferenceResponseArrayOutput)
}

// Scaling plan reference to hostpool.
type ScalingHostPoolReferenceResponseOutput struct{ *pulumi.OutputState }

func (ScalingHostPoolReferenceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ScalingHostPoolReferenceResponse)(nil)).Elem()
}

func (o ScalingHostPoolReferenceResponseOutput) ToScalingHostPoolReferenceResponseOutput() ScalingHostPoolReferenceResponseOutput {
	return o
}

func (o ScalingHostPoolReferenceResponseOutput) ToScalingHostPoolReferenceResponseOutputWithContext(ctx context.Context) ScalingHostPoolReferenceResponseOutput {
	return o
}

// Arm path of referenced hostpool.
func (o ScalingHostPoolReferenceResponseOutput) HostPoolArmPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ScalingHostPoolReferenceResponse) *string { return v.HostPoolArmPath }).(pulumi.StringPtrOutput)
}

// Is the scaling plan enabled for this hostpool.
func (o ScalingHostPoolReferenceResponseOutput) ScalingPlanEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ScalingHostPoolReferenceResponse) *bool { return v.ScalingPlanEnabled }).(pulumi.BoolPtrOutput)
}

type ScalingHostPoolReferenceResponseArrayOutput struct{ *pulumi.OutputState }

func (ScalingHostPoolReferenceResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ScalingHostPoolReferenceResponse)(nil)).Elem()
}

func (o ScalingHostPoolReferenceResponseArrayOutput) ToScalingHostPoolReferenceResponseArrayOutput() ScalingHostPoolReferenceResponseArrayOutput {
	return o
}

func (o ScalingHostPoolReferenceResponseArrayOutput) ToScalingHostPoolReferenceResponseArrayOutputWithContext(ctx context.Context) ScalingHostPoolReferenceResponseArrayOutput {
	return o
}

func (o ScalingHostPoolReferenceResponseArrayOutput) Index(i pulumi.IntInput) ScalingHostPoolReferenceResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ScalingHostPoolReferenceResponse {
		return vs[0].([]ScalingHostPoolReferenceResponse)[vs[1].(int)]
	}).(ScalingHostPoolReferenceResponseOutput)
}

// Scaling plan schedule.
type ScalingSchedule struct {
	// Set of days of the week on which this schedule is active.
	DaysOfWeek []string `pulumi:"daysOfWeek"`
	// Name of the scaling schedule.
	Name *string `pulumi:"name"`
	// Load balancing algorithm for off-peak period.
	OffPeakLoadBalancingAlgorithm *string `pulumi:"offPeakLoadBalancingAlgorithm"`
	// Starting time for off-peak period.
	OffPeakStartTime *string `pulumi:"offPeakStartTime"`
	// Load balancing algorithm for peak period.
	PeakLoadBalancingAlgorithm *string `pulumi:"peakLoadBalancingAlgorithm"`
	// Starting time for peak period.
	PeakStartTime *string `pulumi:"peakStartTime"`
	// Capacity threshold for ramp down period.
	RampDownCapacityThresholdPct *int `pulumi:"rampDownCapacityThresholdPct"`
	// Should users be logged off forcefully from hosts.
	RampDownForceLogoffUsers *bool `pulumi:"rampDownForceLogoffUsers"`
	// Load balancing algorithm for ramp down period.
	RampDownLoadBalancingAlgorithm *string `pulumi:"rampDownLoadBalancingAlgorithm"`
	// Minimum host percentage for ramp down period.
	RampDownMinimumHostsPct *int `pulumi:"rampDownMinimumHostsPct"`
	// Notification message for users during ramp down period.
	RampDownNotificationMessage *string `pulumi:"rampDownNotificationMessage"`
	// Number of minutes to wait to stop hosts during ramp down period.
	RampDownNotificationMinutes *int `pulumi:"rampDownNotificationMinutes"`
	// Starting time for ramp down period.
	RampDownStartTime *string `pulumi:"rampDownStartTime"`
	// Specifies when to stop hosts during ramp down period.
	RampDownStopHostsWhen *string `pulumi:"rampDownStopHostsWhen"`
	// Load balancing algorithm for ramp up period.
	RampUpAlgorithm *string `pulumi:"rampUpAlgorithm"`
	// Capacity threshold for ramp up period.
	RampUpCapacityThresholdPct *int `pulumi:"rampUpCapacityThresholdPct"`
	// Minimum host percentage for ramp up period.
	RampUpMinimumHostPct *int `pulumi:"rampUpMinimumHostPct"`
	// Starting time for ramp up period.
	RampUpStartTime *string `pulumi:"rampUpStartTime"`
}

// ScalingScheduleInput is an input type that accepts ScalingScheduleArgs and ScalingScheduleOutput values.
// You can construct a concrete instance of `ScalingScheduleInput` via:
//
//          ScalingScheduleArgs{...}
type ScalingScheduleInput interface {
	pulumi.Input

	ToScalingScheduleOutput() ScalingScheduleOutput
	ToScalingScheduleOutputWithContext(context.Context) ScalingScheduleOutput
}

// Scaling plan schedule.
type ScalingScheduleArgs struct {
	// Set of days of the week on which this schedule is active.
	DaysOfWeek pulumi.StringArrayInput `pulumi:"daysOfWeek"`
	// Name of the scaling schedule.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Load balancing algorithm for off-peak period.
	OffPeakLoadBalancingAlgorithm pulumi.StringPtrInput `pulumi:"offPeakLoadBalancingAlgorithm"`
	// Starting time for off-peak period.
	OffPeakStartTime pulumi.StringPtrInput `pulumi:"offPeakStartTime"`
	// Load balancing algorithm for peak period.
	PeakLoadBalancingAlgorithm pulumi.StringPtrInput `pulumi:"peakLoadBalancingAlgorithm"`
	// Starting time for peak period.
	PeakStartTime pulumi.StringPtrInput `pulumi:"peakStartTime"`
	// Capacity threshold for ramp down period.
	RampDownCapacityThresholdPct pulumi.IntPtrInput `pulumi:"rampDownCapacityThresholdPct"`
	// Should users be logged off forcefully from hosts.
	RampDownForceLogoffUsers pulumi.BoolPtrInput `pulumi:"rampDownForceLogoffUsers"`
	// Load balancing algorithm for ramp down period.
	RampDownLoadBalancingAlgorithm pulumi.StringPtrInput `pulumi:"rampDownLoadBalancingAlgorithm"`
	// Minimum host percentage for ramp down period.
	RampDownMinimumHostsPct pulumi.IntPtrInput `pulumi:"rampDownMinimumHostsPct"`
	// Notification message for users during ramp down period.
	RampDownNotificationMessage pulumi.StringPtrInput `pulumi:"rampDownNotificationMessage"`
	// Number of minutes to wait to stop hosts during ramp down period.
	RampDownNotificationMinutes pulumi.IntPtrInput `pulumi:"rampDownNotificationMinutes"`
	// Starting time for ramp down period.
	RampDownStartTime pulumi.StringPtrInput `pulumi:"rampDownStartTime"`
	// Specifies when to stop hosts during ramp down period.
	RampDownStopHostsWhen pulumi.StringPtrInput `pulumi:"rampDownStopHostsWhen"`
	// Load balancing algorithm for ramp up period.
	RampUpAlgorithm pulumi.StringPtrInput `pulumi:"rampUpAlgorithm"`
	// Capacity threshold for ramp up period.
	RampUpCapacityThresholdPct pulumi.IntPtrInput `pulumi:"rampUpCapacityThresholdPct"`
	// Minimum host percentage for ramp up period.
	RampUpMinimumHostPct pulumi.IntPtrInput `pulumi:"rampUpMinimumHostPct"`
	// Starting time for ramp up period.
	RampUpStartTime pulumi.StringPtrInput `pulumi:"rampUpStartTime"`
}

func (ScalingScheduleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ScalingSchedule)(nil)).Elem()
}

func (i ScalingScheduleArgs) ToScalingScheduleOutput() ScalingScheduleOutput {
	return i.ToScalingScheduleOutputWithContext(context.Background())
}

func (i ScalingScheduleArgs) ToScalingScheduleOutputWithContext(ctx context.Context) ScalingScheduleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScalingScheduleOutput)
}

// ScalingScheduleArrayInput is an input type that accepts ScalingScheduleArray and ScalingScheduleArrayOutput values.
// You can construct a concrete instance of `ScalingScheduleArrayInput` via:
//
//          ScalingScheduleArray{ ScalingScheduleArgs{...} }
type ScalingScheduleArrayInput interface {
	pulumi.Input

	ToScalingScheduleArrayOutput() ScalingScheduleArrayOutput
	ToScalingScheduleArrayOutputWithContext(context.Context) ScalingScheduleArrayOutput
}

type ScalingScheduleArray []ScalingScheduleInput

func (ScalingScheduleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ScalingSchedule)(nil)).Elem()
}

func (i ScalingScheduleArray) ToScalingScheduleArrayOutput() ScalingScheduleArrayOutput {
	return i.ToScalingScheduleArrayOutputWithContext(context.Background())
}

func (i ScalingScheduleArray) ToScalingScheduleArrayOutputWithContext(ctx context.Context) ScalingScheduleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScalingScheduleArrayOutput)
}

// Scaling plan schedule.
type ScalingScheduleOutput struct{ *pulumi.OutputState }

func (ScalingScheduleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ScalingSchedule)(nil)).Elem()
}

func (o ScalingScheduleOutput) ToScalingScheduleOutput() ScalingScheduleOutput {
	return o
}

func (o ScalingScheduleOutput) ToScalingScheduleOutputWithContext(ctx context.Context) ScalingScheduleOutput {
	return o
}

// Set of days of the week on which this schedule is active.
func (o ScalingScheduleOutput) DaysOfWeek() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ScalingSchedule) []string { return v.DaysOfWeek }).(pulumi.StringArrayOutput)
}

// Name of the scaling schedule.
func (o ScalingScheduleOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ScalingSchedule) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Load balancing algorithm for off-peak period.
func (o ScalingScheduleOutput) OffPeakLoadBalancingAlgorithm() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ScalingSchedule) *string { return v.OffPeakLoadBalancingAlgorithm }).(pulumi.StringPtrOutput)
}

// Starting time for off-peak period.
func (o ScalingScheduleOutput) OffPeakStartTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ScalingSchedule) *string { return v.OffPeakStartTime }).(pulumi.StringPtrOutput)
}

// Load balancing algorithm for peak period.
func (o ScalingScheduleOutput) PeakLoadBalancingAlgorithm() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ScalingSchedule) *string { return v.PeakLoadBalancingAlgorithm }).(pulumi.StringPtrOutput)
}

// Starting time for peak period.
func (o ScalingScheduleOutput) PeakStartTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ScalingSchedule) *string { return v.PeakStartTime }).(pulumi.StringPtrOutput)
}

// Capacity threshold for ramp down period.
func (o ScalingScheduleOutput) RampDownCapacityThresholdPct() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ScalingSchedule) *int { return v.RampDownCapacityThresholdPct }).(pulumi.IntPtrOutput)
}

// Should users be logged off forcefully from hosts.
func (o ScalingScheduleOutput) RampDownForceLogoffUsers() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ScalingSchedule) *bool { return v.RampDownForceLogoffUsers }).(pulumi.BoolPtrOutput)
}

// Load balancing algorithm for ramp down period.
func (o ScalingScheduleOutput) RampDownLoadBalancingAlgorithm() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ScalingSchedule) *string { return v.RampDownLoadBalancingAlgorithm }).(pulumi.StringPtrOutput)
}

// Minimum host percentage for ramp down period.
func (o ScalingScheduleOutput) RampDownMinimumHostsPct() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ScalingSchedule) *int { return v.RampDownMinimumHostsPct }).(pulumi.IntPtrOutput)
}

// Notification message for users during ramp down period.
func (o ScalingScheduleOutput) RampDownNotificationMessage() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ScalingSchedule) *string { return v.RampDownNotificationMessage }).(pulumi.StringPtrOutput)
}

// Number of minutes to wait to stop hosts during ramp down period.
func (o ScalingScheduleOutput) RampDownNotificationMinutes() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ScalingSchedule) *int { return v.RampDownNotificationMinutes }).(pulumi.IntPtrOutput)
}

// Starting time for ramp down period.
func (o ScalingScheduleOutput) RampDownStartTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ScalingSchedule) *string { return v.RampDownStartTime }).(pulumi.StringPtrOutput)
}

// Specifies when to stop hosts during ramp down period.
func (o ScalingScheduleOutput) RampDownStopHostsWhen() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ScalingSchedule) *string { return v.RampDownStopHostsWhen }).(pulumi.StringPtrOutput)
}

// Load balancing algorithm for ramp up period.
func (o ScalingScheduleOutput) RampUpAlgorithm() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ScalingSchedule) *string { return v.RampUpAlgorithm }).(pulumi.StringPtrOutput)
}

// Capacity threshold for ramp up period.
func (o ScalingScheduleOutput) RampUpCapacityThresholdPct() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ScalingSchedule) *int { return v.RampUpCapacityThresholdPct }).(pulumi.IntPtrOutput)
}

// Minimum host percentage for ramp up period.
func (o ScalingScheduleOutput) RampUpMinimumHostPct() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ScalingSchedule) *int { return v.RampUpMinimumHostPct }).(pulumi.IntPtrOutput)
}

// Starting time for ramp up period.
func (o ScalingScheduleOutput) RampUpStartTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ScalingSchedule) *string { return v.RampUpStartTime }).(pulumi.StringPtrOutput)
}

type ScalingScheduleArrayOutput struct{ *pulumi.OutputState }

func (ScalingScheduleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ScalingSchedule)(nil)).Elem()
}

func (o ScalingScheduleArrayOutput) ToScalingScheduleArrayOutput() ScalingScheduleArrayOutput {
	return o
}

func (o ScalingScheduleArrayOutput) ToScalingScheduleArrayOutputWithContext(ctx context.Context) ScalingScheduleArrayOutput {
	return o
}

func (o ScalingScheduleArrayOutput) Index(i pulumi.IntInput) ScalingScheduleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ScalingSchedule {
		return vs[0].([]ScalingSchedule)[vs[1].(int)]
	}).(ScalingScheduleOutput)
}

// Scaling plan schedule.
type ScalingScheduleInvokeResponse struct {
	// Set of days of the week on which this schedule is active.
	DaysOfWeek []string `pulumi:"daysOfWeek"`
	// Name of the scaling schedule.
	Name *string `pulumi:"name"`
	// Load balancing algorithm for off-peak period.
	OffPeakLoadBalancingAlgorithm *string `pulumi:"offPeakLoadBalancingAlgorithm"`
	// Starting time for off-peak period.
	OffPeakStartTime *string `pulumi:"offPeakStartTime"`
	// Load balancing algorithm for peak period.
	PeakLoadBalancingAlgorithm *string `pulumi:"peakLoadBalancingAlgorithm"`
	// Starting time for peak period.
	PeakStartTime *string `pulumi:"peakStartTime"`
	// Capacity threshold for ramp down period.
	RampDownCapacityThresholdPct *int `pulumi:"rampDownCapacityThresholdPct"`
	// Should users be logged off forcefully from hosts.
	RampDownForceLogoffUsers *bool `pulumi:"rampDownForceLogoffUsers"`
	// Load balancing algorithm for ramp down period.
	RampDownLoadBalancingAlgorithm *string `pulumi:"rampDownLoadBalancingAlgorithm"`
	// Minimum host percentage for ramp down period.
	RampDownMinimumHostsPct *int `pulumi:"rampDownMinimumHostsPct"`
	// Notification message for users during ramp down period.
	RampDownNotificationMessage *string `pulumi:"rampDownNotificationMessage"`
	// Number of minutes to wait to stop hosts during ramp down period.
	RampDownNotificationMinutes *int `pulumi:"rampDownNotificationMinutes"`
	// Starting time for ramp down period.
	RampDownStartTime *string `pulumi:"rampDownStartTime"`
	// Specifies when to stop hosts during ramp down period.
	RampDownStopHostsWhen *string `pulumi:"rampDownStopHostsWhen"`
	// Load balancing algorithm for ramp up period.
	RampUpAlgorithm *string `pulumi:"rampUpAlgorithm"`
	// Capacity threshold for ramp up period.
	RampUpCapacityThresholdPct *int `pulumi:"rampUpCapacityThresholdPct"`
	// Minimum host percentage for ramp up period.
	RampUpMinimumHostPct *int `pulumi:"rampUpMinimumHostPct"`
	// Starting time for ramp up period.
	RampUpStartTime *string `pulumi:"rampUpStartTime"`
}

// ScalingScheduleInvokeResponseInput is an input type that accepts ScalingScheduleInvokeResponseArgs and ScalingScheduleInvokeResponseOutput values.
// You can construct a concrete instance of `ScalingScheduleInvokeResponseInput` via:
//
//          ScalingScheduleInvokeResponseArgs{...}
type ScalingScheduleInvokeResponseInput interface {
	pulumi.Input

	ToScalingScheduleInvokeResponseOutput() ScalingScheduleInvokeResponseOutput
	ToScalingScheduleInvokeResponseOutputWithContext(context.Context) ScalingScheduleInvokeResponseOutput
}

// Scaling plan schedule.
type ScalingScheduleInvokeResponseArgs struct {
	// Set of days of the week on which this schedule is active.
	DaysOfWeek pulumi.StringArrayInput `pulumi:"daysOfWeek"`
	// Name of the scaling schedule.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Load balancing algorithm for off-peak period.
	OffPeakLoadBalancingAlgorithm pulumi.StringPtrInput `pulumi:"offPeakLoadBalancingAlgorithm"`
	// Starting time for off-peak period.
	OffPeakStartTime pulumi.StringPtrInput `pulumi:"offPeakStartTime"`
	// Load balancing algorithm for peak period.
	PeakLoadBalancingAlgorithm pulumi.StringPtrInput `pulumi:"peakLoadBalancingAlgorithm"`
	// Starting time for peak period.
	PeakStartTime pulumi.StringPtrInput `pulumi:"peakStartTime"`
	// Capacity threshold for ramp down period.
	RampDownCapacityThresholdPct pulumi.IntPtrInput `pulumi:"rampDownCapacityThresholdPct"`
	// Should users be logged off forcefully from hosts.
	RampDownForceLogoffUsers pulumi.BoolPtrInput `pulumi:"rampDownForceLogoffUsers"`
	// Load balancing algorithm for ramp down period.
	RampDownLoadBalancingAlgorithm pulumi.StringPtrInput `pulumi:"rampDownLoadBalancingAlgorithm"`
	// Minimum host percentage for ramp down period.
	RampDownMinimumHostsPct pulumi.IntPtrInput `pulumi:"rampDownMinimumHostsPct"`
	// Notification message for users during ramp down period.
	RampDownNotificationMessage pulumi.StringPtrInput `pulumi:"rampDownNotificationMessage"`
	// Number of minutes to wait to stop hosts during ramp down period.
	RampDownNotificationMinutes pulumi.IntPtrInput `pulumi:"rampDownNotificationMinutes"`
	// Starting time for ramp down period.
	RampDownStartTime pulumi.StringPtrInput `pulumi:"rampDownStartTime"`
	// Specifies when to stop hosts during ramp down period.
	RampDownStopHostsWhen pulumi.StringPtrInput `pulumi:"rampDownStopHostsWhen"`
	// Load balancing algorithm for ramp up period.
	RampUpAlgorithm pulumi.StringPtrInput `pulumi:"rampUpAlgorithm"`
	// Capacity threshold for ramp up period.
	RampUpCapacityThresholdPct pulumi.IntPtrInput `pulumi:"rampUpCapacityThresholdPct"`
	// Minimum host percentage for ramp up period.
	RampUpMinimumHostPct pulumi.IntPtrInput `pulumi:"rampUpMinimumHostPct"`
	// Starting time for ramp up period.
	RampUpStartTime pulumi.StringPtrInput `pulumi:"rampUpStartTime"`
}

func (ScalingScheduleInvokeResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ScalingScheduleInvokeResponse)(nil)).Elem()
}

func (i ScalingScheduleInvokeResponseArgs) ToScalingScheduleInvokeResponseOutput() ScalingScheduleInvokeResponseOutput {
	return i.ToScalingScheduleInvokeResponseOutputWithContext(context.Background())
}

func (i ScalingScheduleInvokeResponseArgs) ToScalingScheduleInvokeResponseOutputWithContext(ctx context.Context) ScalingScheduleInvokeResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScalingScheduleInvokeResponseOutput)
}

// ScalingScheduleInvokeResponseArrayInput is an input type that accepts ScalingScheduleInvokeResponseArray and ScalingScheduleInvokeResponseArrayOutput values.
// You can construct a concrete instance of `ScalingScheduleInvokeResponseArrayInput` via:
//
//          ScalingScheduleInvokeResponseArray{ ScalingScheduleInvokeResponseArgs{...} }
type ScalingScheduleInvokeResponseArrayInput interface {
	pulumi.Input

	ToScalingScheduleInvokeResponseArrayOutput() ScalingScheduleInvokeResponseArrayOutput
	ToScalingScheduleInvokeResponseArrayOutputWithContext(context.Context) ScalingScheduleInvokeResponseArrayOutput
}

type ScalingScheduleInvokeResponseArray []ScalingScheduleInvokeResponseInput

func (ScalingScheduleInvokeResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ScalingScheduleInvokeResponse)(nil)).Elem()
}

func (i ScalingScheduleInvokeResponseArray) ToScalingScheduleInvokeResponseArrayOutput() ScalingScheduleInvokeResponseArrayOutput {
	return i.ToScalingScheduleInvokeResponseArrayOutputWithContext(context.Background())
}

func (i ScalingScheduleInvokeResponseArray) ToScalingScheduleInvokeResponseArrayOutputWithContext(ctx context.Context) ScalingScheduleInvokeResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScalingScheduleInvokeResponseArrayOutput)
}

// Scaling plan schedule.
type ScalingScheduleInvokeResponseOutput struct{ *pulumi.OutputState }

func (ScalingScheduleInvokeResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ScalingScheduleInvokeResponse)(nil)).Elem()
}

func (o ScalingScheduleInvokeResponseOutput) ToScalingScheduleInvokeResponseOutput() ScalingScheduleInvokeResponseOutput {
	return o
}

func (o ScalingScheduleInvokeResponseOutput) ToScalingScheduleInvokeResponseOutputWithContext(ctx context.Context) ScalingScheduleInvokeResponseOutput {
	return o
}

// Set of days of the week on which this schedule is active.
func (o ScalingScheduleInvokeResponseOutput) DaysOfWeek() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ScalingScheduleInvokeResponse) []string { return v.DaysOfWeek }).(pulumi.StringArrayOutput)
}

// Name of the scaling schedule.
func (o ScalingScheduleInvokeResponseOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ScalingScheduleInvokeResponse) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Load balancing algorithm for off-peak period.
func (o ScalingScheduleInvokeResponseOutput) OffPeakLoadBalancingAlgorithm() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ScalingScheduleInvokeResponse) *string { return v.OffPeakLoadBalancingAlgorithm }).(pulumi.StringPtrOutput)
}

// Starting time for off-peak period.
func (o ScalingScheduleInvokeResponseOutput) OffPeakStartTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ScalingScheduleInvokeResponse) *string { return v.OffPeakStartTime }).(pulumi.StringPtrOutput)
}

// Load balancing algorithm for peak period.
func (o ScalingScheduleInvokeResponseOutput) PeakLoadBalancingAlgorithm() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ScalingScheduleInvokeResponse) *string { return v.PeakLoadBalancingAlgorithm }).(pulumi.StringPtrOutput)
}

// Starting time for peak period.
func (o ScalingScheduleInvokeResponseOutput) PeakStartTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ScalingScheduleInvokeResponse) *string { return v.PeakStartTime }).(pulumi.StringPtrOutput)
}

// Capacity threshold for ramp down period.
func (o ScalingScheduleInvokeResponseOutput) RampDownCapacityThresholdPct() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ScalingScheduleInvokeResponse) *int { return v.RampDownCapacityThresholdPct }).(pulumi.IntPtrOutput)
}

// Should users be logged off forcefully from hosts.
func (o ScalingScheduleInvokeResponseOutput) RampDownForceLogoffUsers() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ScalingScheduleInvokeResponse) *bool { return v.RampDownForceLogoffUsers }).(pulumi.BoolPtrOutput)
}

// Load balancing algorithm for ramp down period.
func (o ScalingScheduleInvokeResponseOutput) RampDownLoadBalancingAlgorithm() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ScalingScheduleInvokeResponse) *string { return v.RampDownLoadBalancingAlgorithm }).(pulumi.StringPtrOutput)
}

// Minimum host percentage for ramp down period.
func (o ScalingScheduleInvokeResponseOutput) RampDownMinimumHostsPct() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ScalingScheduleInvokeResponse) *int { return v.RampDownMinimumHostsPct }).(pulumi.IntPtrOutput)
}

// Notification message for users during ramp down period.
func (o ScalingScheduleInvokeResponseOutput) RampDownNotificationMessage() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ScalingScheduleInvokeResponse) *string { return v.RampDownNotificationMessage }).(pulumi.StringPtrOutput)
}

// Number of minutes to wait to stop hosts during ramp down period.
func (o ScalingScheduleInvokeResponseOutput) RampDownNotificationMinutes() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ScalingScheduleInvokeResponse) *int { return v.RampDownNotificationMinutes }).(pulumi.IntPtrOutput)
}

// Starting time for ramp down period.
func (o ScalingScheduleInvokeResponseOutput) RampDownStartTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ScalingScheduleInvokeResponse) *string { return v.RampDownStartTime }).(pulumi.StringPtrOutput)
}

// Specifies when to stop hosts during ramp down period.
func (o ScalingScheduleInvokeResponseOutput) RampDownStopHostsWhen() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ScalingScheduleInvokeResponse) *string { return v.RampDownStopHostsWhen }).(pulumi.StringPtrOutput)
}

// Load balancing algorithm for ramp up period.
func (o ScalingScheduleInvokeResponseOutput) RampUpAlgorithm() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ScalingScheduleInvokeResponse) *string { return v.RampUpAlgorithm }).(pulumi.StringPtrOutput)
}

// Capacity threshold for ramp up period.
func (o ScalingScheduleInvokeResponseOutput) RampUpCapacityThresholdPct() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ScalingScheduleInvokeResponse) *int { return v.RampUpCapacityThresholdPct }).(pulumi.IntPtrOutput)
}

// Minimum host percentage for ramp up period.
func (o ScalingScheduleInvokeResponseOutput) RampUpMinimumHostPct() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ScalingScheduleInvokeResponse) *int { return v.RampUpMinimumHostPct }).(pulumi.IntPtrOutput)
}

// Starting time for ramp up period.
func (o ScalingScheduleInvokeResponseOutput) RampUpStartTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ScalingScheduleInvokeResponse) *string { return v.RampUpStartTime }).(pulumi.StringPtrOutput)
}

type ScalingScheduleInvokeResponseArrayOutput struct{ *pulumi.OutputState }

func (ScalingScheduleInvokeResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ScalingScheduleInvokeResponse)(nil)).Elem()
}

func (o ScalingScheduleInvokeResponseArrayOutput) ToScalingScheduleInvokeResponseArrayOutput() ScalingScheduleInvokeResponseArrayOutput {
	return o
}

func (o ScalingScheduleInvokeResponseArrayOutput) ToScalingScheduleInvokeResponseArrayOutputWithContext(ctx context.Context) ScalingScheduleInvokeResponseArrayOutput {
	return o
}

func (o ScalingScheduleInvokeResponseArrayOutput) Index(i pulumi.IntInput) ScalingScheduleInvokeResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ScalingScheduleInvokeResponse {
		return vs[0].([]ScalingScheduleInvokeResponse)[vs[1].(int)]
	}).(ScalingScheduleInvokeResponseOutput)
}

// Scaling plan schedule.
type ScalingScheduleResponse struct {
	// Set of days of the week on which this schedule is active.
	DaysOfWeek []string `pulumi:"daysOfWeek"`
	// Name of the scaling schedule.
	Name *string `pulumi:"name"`
	// Load balancing algorithm for off-peak period.
	OffPeakLoadBalancingAlgorithm *string `pulumi:"offPeakLoadBalancingAlgorithm"`
	// Starting time for off-peak period.
	OffPeakStartTime *string `pulumi:"offPeakStartTime"`
	// Load balancing algorithm for peak period.
	PeakLoadBalancingAlgorithm *string `pulumi:"peakLoadBalancingAlgorithm"`
	// Starting time for peak period.
	PeakStartTime *string `pulumi:"peakStartTime"`
	// Capacity threshold for ramp down period.
	RampDownCapacityThresholdPct *int `pulumi:"rampDownCapacityThresholdPct"`
	// Should users be logged off forcefully from hosts.
	RampDownForceLogoffUsers *bool `pulumi:"rampDownForceLogoffUsers"`
	// Load balancing algorithm for ramp down period.
	RampDownLoadBalancingAlgorithm *string `pulumi:"rampDownLoadBalancingAlgorithm"`
	// Minimum host percentage for ramp down period.
	RampDownMinimumHostsPct *int `pulumi:"rampDownMinimumHostsPct"`
	// Notification message for users during ramp down period.
	RampDownNotificationMessage *string `pulumi:"rampDownNotificationMessage"`
	// Number of minutes to wait to stop hosts during ramp down period.
	RampDownNotificationMinutes *int `pulumi:"rampDownNotificationMinutes"`
	// Starting time for ramp down period.
	RampDownStartTime *string `pulumi:"rampDownStartTime"`
	// Specifies when to stop hosts during ramp down period.
	RampDownStopHostsWhen *string `pulumi:"rampDownStopHostsWhen"`
	// Load balancing algorithm for ramp up period.
	RampUpAlgorithm *string `pulumi:"rampUpAlgorithm"`
	// Capacity threshold for ramp up period.
	RampUpCapacityThresholdPct *int `pulumi:"rampUpCapacityThresholdPct"`
	// Minimum host percentage for ramp up period.
	RampUpMinimumHostPct *int `pulumi:"rampUpMinimumHostPct"`
	// Starting time for ramp up period.
	RampUpStartTime *string `pulumi:"rampUpStartTime"`
}

// ScalingScheduleResponseInput is an input type that accepts ScalingScheduleResponseArgs and ScalingScheduleResponseOutput values.
// You can construct a concrete instance of `ScalingScheduleResponseInput` via:
//
//          ScalingScheduleResponseArgs{...}
type ScalingScheduleResponseInput interface {
	pulumi.Input

	ToScalingScheduleResponseOutput() ScalingScheduleResponseOutput
	ToScalingScheduleResponseOutputWithContext(context.Context) ScalingScheduleResponseOutput
}

// Scaling plan schedule.
type ScalingScheduleResponseArgs struct {
	// Set of days of the week on which this schedule is active.
	DaysOfWeek pulumi.StringArrayInput `pulumi:"daysOfWeek"`
	// Name of the scaling schedule.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Load balancing algorithm for off-peak period.
	OffPeakLoadBalancingAlgorithm pulumi.StringPtrInput `pulumi:"offPeakLoadBalancingAlgorithm"`
	// Starting time for off-peak period.
	OffPeakStartTime pulumi.StringPtrInput `pulumi:"offPeakStartTime"`
	// Load balancing algorithm for peak period.
	PeakLoadBalancingAlgorithm pulumi.StringPtrInput `pulumi:"peakLoadBalancingAlgorithm"`
	// Starting time for peak period.
	PeakStartTime pulumi.StringPtrInput `pulumi:"peakStartTime"`
	// Capacity threshold for ramp down period.
	RampDownCapacityThresholdPct pulumi.IntPtrInput `pulumi:"rampDownCapacityThresholdPct"`
	// Should users be logged off forcefully from hosts.
	RampDownForceLogoffUsers pulumi.BoolPtrInput `pulumi:"rampDownForceLogoffUsers"`
	// Load balancing algorithm for ramp down period.
	RampDownLoadBalancingAlgorithm pulumi.StringPtrInput `pulumi:"rampDownLoadBalancingAlgorithm"`
	// Minimum host percentage for ramp down period.
	RampDownMinimumHostsPct pulumi.IntPtrInput `pulumi:"rampDownMinimumHostsPct"`
	// Notification message for users during ramp down period.
	RampDownNotificationMessage pulumi.StringPtrInput `pulumi:"rampDownNotificationMessage"`
	// Number of minutes to wait to stop hosts during ramp down period.
	RampDownNotificationMinutes pulumi.IntPtrInput `pulumi:"rampDownNotificationMinutes"`
	// Starting time for ramp down period.
	RampDownStartTime pulumi.StringPtrInput `pulumi:"rampDownStartTime"`
	// Specifies when to stop hosts during ramp down period.
	RampDownStopHostsWhen pulumi.StringPtrInput `pulumi:"rampDownStopHostsWhen"`
	// Load balancing algorithm for ramp up period.
	RampUpAlgorithm pulumi.StringPtrInput `pulumi:"rampUpAlgorithm"`
	// Capacity threshold for ramp up period.
	RampUpCapacityThresholdPct pulumi.IntPtrInput `pulumi:"rampUpCapacityThresholdPct"`
	// Minimum host percentage for ramp up period.
	RampUpMinimumHostPct pulumi.IntPtrInput `pulumi:"rampUpMinimumHostPct"`
	// Starting time for ramp up period.
	RampUpStartTime pulumi.StringPtrInput `pulumi:"rampUpStartTime"`
}

func (ScalingScheduleResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ScalingScheduleResponse)(nil)).Elem()
}

func (i ScalingScheduleResponseArgs) ToScalingScheduleResponseOutput() ScalingScheduleResponseOutput {
	return i.ToScalingScheduleResponseOutputWithContext(context.Background())
}

func (i ScalingScheduleResponseArgs) ToScalingScheduleResponseOutputWithContext(ctx context.Context) ScalingScheduleResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScalingScheduleResponseOutput)
}

// ScalingScheduleResponseArrayInput is an input type that accepts ScalingScheduleResponseArray and ScalingScheduleResponseArrayOutput values.
// You can construct a concrete instance of `ScalingScheduleResponseArrayInput` via:
//
//          ScalingScheduleResponseArray{ ScalingScheduleResponseArgs{...} }
type ScalingScheduleResponseArrayInput interface {
	pulumi.Input

	ToScalingScheduleResponseArrayOutput() ScalingScheduleResponseArrayOutput
	ToScalingScheduleResponseArrayOutputWithContext(context.Context) ScalingScheduleResponseArrayOutput
}

type ScalingScheduleResponseArray []ScalingScheduleResponseInput

func (ScalingScheduleResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ScalingScheduleResponse)(nil)).Elem()
}

func (i ScalingScheduleResponseArray) ToScalingScheduleResponseArrayOutput() ScalingScheduleResponseArrayOutput {
	return i.ToScalingScheduleResponseArrayOutputWithContext(context.Background())
}

func (i ScalingScheduleResponseArray) ToScalingScheduleResponseArrayOutputWithContext(ctx context.Context) ScalingScheduleResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScalingScheduleResponseArrayOutput)
}

// Scaling plan schedule.
type ScalingScheduleResponseOutput struct{ *pulumi.OutputState }

func (ScalingScheduleResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ScalingScheduleResponse)(nil)).Elem()
}

func (o ScalingScheduleResponseOutput) ToScalingScheduleResponseOutput() ScalingScheduleResponseOutput {
	return o
}

func (o ScalingScheduleResponseOutput) ToScalingScheduleResponseOutputWithContext(ctx context.Context) ScalingScheduleResponseOutput {
	return o
}

// Set of days of the week on which this schedule is active.
func (o ScalingScheduleResponseOutput) DaysOfWeek() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ScalingScheduleResponse) []string { return v.DaysOfWeek }).(pulumi.StringArrayOutput)
}

// Name of the scaling schedule.
func (o ScalingScheduleResponseOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ScalingScheduleResponse) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Load balancing algorithm for off-peak period.
func (o ScalingScheduleResponseOutput) OffPeakLoadBalancingAlgorithm() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ScalingScheduleResponse) *string { return v.OffPeakLoadBalancingAlgorithm }).(pulumi.StringPtrOutput)
}

// Starting time for off-peak period.
func (o ScalingScheduleResponseOutput) OffPeakStartTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ScalingScheduleResponse) *string { return v.OffPeakStartTime }).(pulumi.StringPtrOutput)
}

// Load balancing algorithm for peak period.
func (o ScalingScheduleResponseOutput) PeakLoadBalancingAlgorithm() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ScalingScheduleResponse) *string { return v.PeakLoadBalancingAlgorithm }).(pulumi.StringPtrOutput)
}

// Starting time for peak period.
func (o ScalingScheduleResponseOutput) PeakStartTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ScalingScheduleResponse) *string { return v.PeakStartTime }).(pulumi.StringPtrOutput)
}

// Capacity threshold for ramp down period.
func (o ScalingScheduleResponseOutput) RampDownCapacityThresholdPct() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ScalingScheduleResponse) *int { return v.RampDownCapacityThresholdPct }).(pulumi.IntPtrOutput)
}

// Should users be logged off forcefully from hosts.
func (o ScalingScheduleResponseOutput) RampDownForceLogoffUsers() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ScalingScheduleResponse) *bool { return v.RampDownForceLogoffUsers }).(pulumi.BoolPtrOutput)
}

// Load balancing algorithm for ramp down period.
func (o ScalingScheduleResponseOutput) RampDownLoadBalancingAlgorithm() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ScalingScheduleResponse) *string { return v.RampDownLoadBalancingAlgorithm }).(pulumi.StringPtrOutput)
}

// Minimum host percentage for ramp down period.
func (o ScalingScheduleResponseOutput) RampDownMinimumHostsPct() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ScalingScheduleResponse) *int { return v.RampDownMinimumHostsPct }).(pulumi.IntPtrOutput)
}

// Notification message for users during ramp down period.
func (o ScalingScheduleResponseOutput) RampDownNotificationMessage() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ScalingScheduleResponse) *string { return v.RampDownNotificationMessage }).(pulumi.StringPtrOutput)
}

// Number of minutes to wait to stop hosts during ramp down period.
func (o ScalingScheduleResponseOutput) RampDownNotificationMinutes() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ScalingScheduleResponse) *int { return v.RampDownNotificationMinutes }).(pulumi.IntPtrOutput)
}

// Starting time for ramp down period.
func (o ScalingScheduleResponseOutput) RampDownStartTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ScalingScheduleResponse) *string { return v.RampDownStartTime }).(pulumi.StringPtrOutput)
}

// Specifies when to stop hosts during ramp down period.
func (o ScalingScheduleResponseOutput) RampDownStopHostsWhen() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ScalingScheduleResponse) *string { return v.RampDownStopHostsWhen }).(pulumi.StringPtrOutput)
}

// Load balancing algorithm for ramp up period.
func (o ScalingScheduleResponseOutput) RampUpAlgorithm() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ScalingScheduleResponse) *string { return v.RampUpAlgorithm }).(pulumi.StringPtrOutput)
}

// Capacity threshold for ramp up period.
func (o ScalingScheduleResponseOutput) RampUpCapacityThresholdPct() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ScalingScheduleResponse) *int { return v.RampUpCapacityThresholdPct }).(pulumi.IntPtrOutput)
}

// Minimum host percentage for ramp up period.
func (o ScalingScheduleResponseOutput) RampUpMinimumHostPct() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ScalingScheduleResponse) *int { return v.RampUpMinimumHostPct }).(pulumi.IntPtrOutput)
}

// Starting time for ramp up period.
func (o ScalingScheduleResponseOutput) RampUpStartTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ScalingScheduleResponse) *string { return v.RampUpStartTime }).(pulumi.StringPtrOutput)
}

type ScalingScheduleResponseArrayOutput struct{ *pulumi.OutputState }

func (ScalingScheduleResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ScalingScheduleResponse)(nil)).Elem()
}

func (o ScalingScheduleResponseArrayOutput) ToScalingScheduleResponseArrayOutput() ScalingScheduleResponseArrayOutput {
	return o
}

func (o ScalingScheduleResponseArrayOutput) ToScalingScheduleResponseArrayOutputWithContext(ctx context.Context) ScalingScheduleResponseArrayOutput {
	return o
}

func (o ScalingScheduleResponseArrayOutput) Index(i pulumi.IntInput) ScalingScheduleResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ScalingScheduleResponse {
		return vs[0].([]ScalingScheduleResponse)[vs[1].(int)]
	}).(ScalingScheduleResponseOutput)
}

func init() {
	pulumi.RegisterOutputType(MsixPackageApplicationsOutput{})
	pulumi.RegisterOutputType(MsixPackageApplicationsArrayOutput{})
	pulumi.RegisterOutputType(MsixPackageApplicationsInvokeResponseOutput{})
	pulumi.RegisterOutputType(MsixPackageApplicationsInvokeResponseArrayOutput{})
	pulumi.RegisterOutputType(MsixPackageApplicationsResponseOutput{})
	pulumi.RegisterOutputType(MsixPackageApplicationsResponseArrayOutput{})
	pulumi.RegisterOutputType(MsixPackageDependenciesOutput{})
	pulumi.RegisterOutputType(MsixPackageDependenciesArrayOutput{})
	pulumi.RegisterOutputType(MsixPackageDependenciesInvokeResponseOutput{})
	pulumi.RegisterOutputType(MsixPackageDependenciesInvokeResponseArrayOutput{})
	pulumi.RegisterOutputType(MsixPackageDependenciesResponseOutput{})
	pulumi.RegisterOutputType(MsixPackageDependenciesResponseArrayOutput{})
	pulumi.RegisterOutputType(RegistrationInfoOutput{})
	pulumi.RegisterOutputType(RegistrationInfoPtrOutput{})
	pulumi.RegisterOutputType(RegistrationInfoInvokeResponseOutput{})
	pulumi.RegisterOutputType(RegistrationInfoResponseOutput{})
	pulumi.RegisterOutputType(RegistrationInfoResponsePtrOutput{})
	pulumi.RegisterOutputType(ScalingHostPoolReferenceOutput{})
	pulumi.RegisterOutputType(ScalingHostPoolReferenceArrayOutput{})
	pulumi.RegisterOutputType(ScalingHostPoolReferenceInvokeResponseOutput{})
	pulumi.RegisterOutputType(ScalingHostPoolReferenceInvokeResponseArrayOutput{})
	pulumi.RegisterOutputType(ScalingHostPoolReferenceResponseOutput{})
	pulumi.RegisterOutputType(ScalingHostPoolReferenceResponseArrayOutput{})
	pulumi.RegisterOutputType(ScalingScheduleOutput{})
	pulumi.RegisterOutputType(ScalingScheduleArrayOutput{})
	pulumi.RegisterOutputType(ScalingScheduleInvokeResponseOutput{})
	pulumi.RegisterOutputType(ScalingScheduleInvokeResponseArrayOutput{})
	pulumi.RegisterOutputType(ScalingScheduleResponseOutput{})
	pulumi.RegisterOutputType(ScalingScheduleResponseArrayOutput{})
}
