// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v20220102preview

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// A node pool snapshot resource.
type Snapshot struct {
	pulumi.CustomResourceState

	// CreationData to be used to specify the source agent pool resource ID to create this snapshot.
	CreationData CreationDataResponsePtrOutput `pulumi:"creationData"`
	// Whether to use a FIPS-enabled OS.
	EnableFIPS pulumi.BoolOutput `pulumi:"enableFIPS"`
	// The version of Kubernetes.
	KubernetesVersion pulumi.StringOutput `pulumi:"kubernetesVersion"`
	// Resource location
	Location pulumi.StringOutput `pulumi:"location"`
	// Resource name
	Name pulumi.StringOutput `pulumi:"name"`
	// The version of node image.
	NodeImageVersion pulumi.StringOutput `pulumi:"nodeImageVersion"`
	// Specifies an OS SKU. This value must not be specified if OSType is Windows.
	OsSku pulumi.StringOutput `pulumi:"osSku"`
	// The operating system type. The default is Linux.
	OsType pulumi.StringOutput `pulumi:"osType"`
	// The type of a snapshot. The default is NodePool.
	SnapshotType pulumi.StringPtrOutput `pulumi:"snapshotType"`
	// The system metadata relating to this snapshot.
	SystemData SystemDataResponseOutput `pulumi:"systemData"`
	// Resource tags
	Tags pulumi.StringMapOutput `pulumi:"tags"`
	// Resource type
	Type pulumi.StringOutput `pulumi:"type"`
	// The size of the VM.
	VmSize pulumi.StringOutput `pulumi:"vmSize"`
}

// NewSnapshot registers a new resource with the given unique name, arguments, and options.
func NewSnapshot(ctx *pulumi.Context,
	name string, args *SnapshotArgs, opts ...pulumi.ResourceOption) (*Snapshot, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ResourceGroupName == nil {
		return nil, errors.New("invalid value for required argument 'ResourceGroupName'")
	}
	aliases := pulumi.Aliases([]pulumi.Alias{
		{
			Type: pulumi.String("azure-native:containerservice:Snapshot"),
		},
		{
			Type: pulumi.String("azure-native:containerservice/v20210801:Snapshot"),
		},
		{
			Type: pulumi.String("azure-native:containerservice/v20210901:Snapshot"),
		},
		{
			Type: pulumi.String("azure-native:containerservice/v20211001:Snapshot"),
		},
		{
			Type: pulumi.String("azure-native:containerservice/v20211101preview:Snapshot"),
		},
		{
			Type: pulumi.String("azure-native:containerservice/v20220101:Snapshot"),
		},
		{
			Type: pulumi.String("azure-native:containerservice/v20220201:Snapshot"),
		},
		{
			Type: pulumi.String("azure-native:containerservice/v20220202preview:Snapshot"),
		},
		{
			Type: pulumi.String("azure-native:containerservice/v20220301:Snapshot"),
		},
		{
			Type: pulumi.String("azure-native:containerservice/v20220302preview:Snapshot"),
		},
		{
			Type: pulumi.String("azure-native:containerservice/v20220401:Snapshot"),
		},
		{
			Type: pulumi.String("azure-native:containerservice/v20220402preview:Snapshot"),
		},
	})
	opts = append(opts, aliases)
	var resource Snapshot
	err := ctx.RegisterResource("azure-native:containerservice/v20220102preview:Snapshot", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSnapshot gets an existing Snapshot resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSnapshot(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SnapshotState, opts ...pulumi.ResourceOption) (*Snapshot, error) {
	var resource Snapshot
	err := ctx.ReadResource("azure-native:containerservice/v20220102preview:Snapshot", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Snapshot resources.
type snapshotState struct {
}

type SnapshotState struct {
}

func (SnapshotState) ElementType() reflect.Type {
	return reflect.TypeOf((*snapshotState)(nil)).Elem()
}

type snapshotArgs struct {
	// CreationData to be used to specify the source agent pool resource ID to create this snapshot.
	CreationData *CreationData `pulumi:"creationData"`
	// Resource location
	Location *string `pulumi:"location"`
	// The name of the resource group.
	ResourceGroupName string `pulumi:"resourceGroupName"`
	// The name of the managed cluster resource.
	ResourceName *string `pulumi:"resourceName"`
	// The type of a snapshot. The default is NodePool.
	SnapshotType *string `pulumi:"snapshotType"`
	// Resource tags
	Tags map[string]string `pulumi:"tags"`
}

// The set of arguments for constructing a Snapshot resource.
type SnapshotArgs struct {
	// CreationData to be used to specify the source agent pool resource ID to create this snapshot.
	CreationData CreationDataPtrInput
	// Resource location
	Location pulumi.StringPtrInput
	// The name of the resource group.
	ResourceGroupName pulumi.StringInput
	// The name of the managed cluster resource.
	ResourceName pulumi.StringPtrInput
	// The type of a snapshot. The default is NodePool.
	SnapshotType pulumi.StringPtrInput
	// Resource tags
	Tags pulumi.StringMapInput
}

func (SnapshotArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*snapshotArgs)(nil)).Elem()
}

type SnapshotInput interface {
	pulumi.Input

	ToSnapshotOutput() SnapshotOutput
	ToSnapshotOutputWithContext(ctx context.Context) SnapshotOutput
}

func (*Snapshot) ElementType() reflect.Type {
	return reflect.TypeOf((**Snapshot)(nil)).Elem()
}

func (i *Snapshot) ToSnapshotOutput() SnapshotOutput {
	return i.ToSnapshotOutputWithContext(context.Background())
}

func (i *Snapshot) ToSnapshotOutputWithContext(ctx context.Context) SnapshotOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SnapshotOutput)
}

type SnapshotOutput struct{ *pulumi.OutputState }

func (SnapshotOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Snapshot)(nil)).Elem()
}

func (o SnapshotOutput) ToSnapshotOutput() SnapshotOutput {
	return o
}

func (o SnapshotOutput) ToSnapshotOutputWithContext(ctx context.Context) SnapshotOutput {
	return o
}

// CreationData to be used to specify the source agent pool resource ID to create this snapshot.
func (o SnapshotOutput) CreationData() CreationDataResponsePtrOutput {
	return o.ApplyT(func(v *Snapshot) CreationDataResponsePtrOutput { return v.CreationData }).(CreationDataResponsePtrOutput)
}

// Whether to use a FIPS-enabled OS.
func (o SnapshotOutput) EnableFIPS() pulumi.BoolOutput {
	return o.ApplyT(func(v *Snapshot) pulumi.BoolOutput { return v.EnableFIPS }).(pulumi.BoolOutput)
}

// The version of Kubernetes.
func (o SnapshotOutput) KubernetesVersion() pulumi.StringOutput {
	return o.ApplyT(func(v *Snapshot) pulumi.StringOutput { return v.KubernetesVersion }).(pulumi.StringOutput)
}

// Resource location
func (o SnapshotOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *Snapshot) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// Resource name
func (o SnapshotOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Snapshot) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The version of node image.
func (o SnapshotOutput) NodeImageVersion() pulumi.StringOutput {
	return o.ApplyT(func(v *Snapshot) pulumi.StringOutput { return v.NodeImageVersion }).(pulumi.StringOutput)
}

// Specifies an OS SKU. This value must not be specified if OSType is Windows.
func (o SnapshotOutput) OsSku() pulumi.StringOutput {
	return o.ApplyT(func(v *Snapshot) pulumi.StringOutput { return v.OsSku }).(pulumi.StringOutput)
}

// The operating system type. The default is Linux.
func (o SnapshotOutput) OsType() pulumi.StringOutput {
	return o.ApplyT(func(v *Snapshot) pulumi.StringOutput { return v.OsType }).(pulumi.StringOutput)
}

// The type of a snapshot. The default is NodePool.
func (o SnapshotOutput) SnapshotType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Snapshot) pulumi.StringPtrOutput { return v.SnapshotType }).(pulumi.StringPtrOutput)
}

// The system metadata relating to this snapshot.
func (o SnapshotOutput) SystemData() SystemDataResponseOutput {
	return o.ApplyT(func(v *Snapshot) SystemDataResponseOutput { return v.SystemData }).(SystemDataResponseOutput)
}

// Resource tags
func (o SnapshotOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Snapshot) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

// Resource type
func (o SnapshotOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *Snapshot) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

// The size of the VM.
func (o SnapshotOutput) VmSize() pulumi.StringOutput {
	return o.ApplyT(func(v *Snapshot) pulumi.StringOutput { return v.VmSize }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(SnapshotOutput{})
}
