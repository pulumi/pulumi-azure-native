// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v20170701

import (
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// Container service.
type ContainerService struct {
	pulumi.CustomResourceState

	// Properties of the agent pool.
	AgentPoolProfiles ContainerServiceAgentPoolProfileResponseArrayOutput `pulumi:"agentPoolProfiles"`
	// Properties to configure a custom container service cluster.
	CustomProfile ContainerServiceCustomProfileResponsePtrOutput `pulumi:"customProfile"`
	// Profile for diagnostics in the container service cluster.
	DiagnosticsProfile ContainerServiceDiagnosticsProfileResponsePtrOutput `pulumi:"diagnosticsProfile"`
	// Profile for Linux VMs in the container service cluster.
	LinuxProfile ContainerServiceLinuxProfileResponseOutput `pulumi:"linuxProfile"`
	// Resource location
	Location pulumi.StringOutput `pulumi:"location"`
	// Profile for the container service master.
	MasterProfile ContainerServiceMasterProfileResponseOutput `pulumi:"masterProfile"`
	// Resource name
	Name pulumi.StringOutput `pulumi:"name"`
	// Profile for the container service orchestrator.
	OrchestratorProfile ContainerServiceOrchestratorProfileResponseOutput `pulumi:"orchestratorProfile"`
	// The current deployment or provisioning state, which only appears in the response.
	ProvisioningState pulumi.StringOutput `pulumi:"provisioningState"`
	// Information about a service principal identity for the cluster to use for manipulating Azure APIs. Exact one of secret or keyVaultSecretRef need to be specified.
	ServicePrincipalProfile ContainerServiceServicePrincipalProfileResponsePtrOutput `pulumi:"servicePrincipalProfile"`
	// Resource tags
	Tags pulumi.StringMapOutput `pulumi:"tags"`
	// Resource type
	Type pulumi.StringOutput `pulumi:"type"`
	// Profile for Windows VMs in the container service cluster.
	WindowsProfile ContainerServiceWindowsProfileResponsePtrOutput `pulumi:"windowsProfile"`
}

// NewContainerService registers a new resource with the given unique name, arguments, and options.
func NewContainerService(ctx *pulumi.Context,
	name string, args *ContainerServiceArgs, opts ...pulumi.ResourceOption) (*ContainerService, error) {
	if args == nil || args.ContainerServiceName == nil {
		return nil, errors.New("missing required argument 'ContainerServiceName'")
	}
	if args == nil || args.LinuxProfile == nil {
		return nil, errors.New("missing required argument 'LinuxProfile'")
	}
	if args == nil || args.Location == nil {
		return nil, errors.New("missing required argument 'Location'")
	}
	if args == nil || args.MasterProfile == nil {
		return nil, errors.New("missing required argument 'MasterProfile'")
	}
	if args == nil || args.OrchestratorProfile == nil {
		return nil, errors.New("missing required argument 'OrchestratorProfile'")
	}
	if args == nil || args.ResourceGroupName == nil {
		return nil, errors.New("missing required argument 'ResourceGroupName'")
	}
	if args == nil {
		args = &ContainerServiceArgs{}
	}
	aliases := pulumi.Aliases([]pulumi.Alias{
		{
			Type: pulumi.String("azure-nextgen:containerservice/latest:ContainerService"),
		},
		{
			Type: pulumi.String("azure-nextgen:containerservice/v20151101preview:ContainerService"),
		},
		{
			Type: pulumi.String("azure-nextgen:containerservice/v20160330:ContainerService"),
		},
		{
			Type: pulumi.String("azure-nextgen:containerservice/v20160930:ContainerService"),
		},
		{
			Type: pulumi.String("azure-nextgen:containerservice/v20170131:ContainerService"),
		},
	})
	opts = append(opts, aliases)
	var resource ContainerService
	err := ctx.RegisterResource("azure-nextgen:containerservice/v20170701:ContainerService", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetContainerService gets an existing ContainerService resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetContainerService(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ContainerServiceState, opts ...pulumi.ResourceOption) (*ContainerService, error) {
	var resource ContainerService
	err := ctx.ReadResource("azure-nextgen:containerservice/v20170701:ContainerService", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ContainerService resources.
type containerServiceState struct {
	// Properties of the agent pool.
	AgentPoolProfiles []ContainerServiceAgentPoolProfileResponse `pulumi:"agentPoolProfiles"`
	// Properties to configure a custom container service cluster.
	CustomProfile *ContainerServiceCustomProfileResponse `pulumi:"customProfile"`
	// Profile for diagnostics in the container service cluster.
	DiagnosticsProfile *ContainerServiceDiagnosticsProfileResponse `pulumi:"diagnosticsProfile"`
	// Profile for Linux VMs in the container service cluster.
	LinuxProfile *ContainerServiceLinuxProfileResponse `pulumi:"linuxProfile"`
	// Resource location
	Location *string `pulumi:"location"`
	// Profile for the container service master.
	MasterProfile *ContainerServiceMasterProfileResponse `pulumi:"masterProfile"`
	// Resource name
	Name *string `pulumi:"name"`
	// Profile for the container service orchestrator.
	OrchestratorProfile *ContainerServiceOrchestratorProfileResponse `pulumi:"orchestratorProfile"`
	// The current deployment or provisioning state, which only appears in the response.
	ProvisioningState *string `pulumi:"provisioningState"`
	// Information about a service principal identity for the cluster to use for manipulating Azure APIs. Exact one of secret or keyVaultSecretRef need to be specified.
	ServicePrincipalProfile *ContainerServiceServicePrincipalProfileResponse `pulumi:"servicePrincipalProfile"`
	// Resource tags
	Tags map[string]string `pulumi:"tags"`
	// Resource type
	Type *string `pulumi:"type"`
	// Profile for Windows VMs in the container service cluster.
	WindowsProfile *ContainerServiceWindowsProfileResponse `pulumi:"windowsProfile"`
}

type ContainerServiceState struct {
	// Properties of the agent pool.
	AgentPoolProfiles ContainerServiceAgentPoolProfileResponseArrayInput
	// Properties to configure a custom container service cluster.
	CustomProfile ContainerServiceCustomProfileResponsePtrInput
	// Profile for diagnostics in the container service cluster.
	DiagnosticsProfile ContainerServiceDiagnosticsProfileResponsePtrInput
	// Profile for Linux VMs in the container service cluster.
	LinuxProfile ContainerServiceLinuxProfileResponsePtrInput
	// Resource location
	Location pulumi.StringPtrInput
	// Profile for the container service master.
	MasterProfile ContainerServiceMasterProfileResponsePtrInput
	// Resource name
	Name pulumi.StringPtrInput
	// Profile for the container service orchestrator.
	OrchestratorProfile ContainerServiceOrchestratorProfileResponsePtrInput
	// The current deployment or provisioning state, which only appears in the response.
	ProvisioningState pulumi.StringPtrInput
	// Information about a service principal identity for the cluster to use for manipulating Azure APIs. Exact one of secret or keyVaultSecretRef need to be specified.
	ServicePrincipalProfile ContainerServiceServicePrincipalProfileResponsePtrInput
	// Resource tags
	Tags pulumi.StringMapInput
	// Resource type
	Type pulumi.StringPtrInput
	// Profile for Windows VMs in the container service cluster.
	WindowsProfile ContainerServiceWindowsProfileResponsePtrInput
}

func (ContainerServiceState) ElementType() reflect.Type {
	return reflect.TypeOf((*containerServiceState)(nil)).Elem()
}

type containerServiceArgs struct {
	// Properties of the agent pool.
	AgentPoolProfiles []ContainerServiceAgentPoolProfile `pulumi:"agentPoolProfiles"`
	// The name of the container service in the specified subscription and resource group.
	ContainerServiceName string `pulumi:"containerServiceName"`
	// Properties to configure a custom container service cluster.
	CustomProfile *ContainerServiceCustomProfile `pulumi:"customProfile"`
	// Profile for diagnostics in the container service cluster.
	DiagnosticsProfile *ContainerServiceDiagnosticsProfile `pulumi:"diagnosticsProfile"`
	// Profile for Linux VMs in the container service cluster.
	LinuxProfile ContainerServiceLinuxProfile `pulumi:"linuxProfile"`
	// Resource location
	Location string `pulumi:"location"`
	// Profile for the container service master.
	MasterProfile ContainerServiceMasterProfile `pulumi:"masterProfile"`
	// Profile for the container service orchestrator.
	OrchestratorProfile ContainerServiceOrchestratorProfile `pulumi:"orchestratorProfile"`
	// The name of the resource group.
	ResourceGroupName string `pulumi:"resourceGroupName"`
	// Information about a service principal identity for the cluster to use for manipulating Azure APIs. Exact one of secret or keyVaultSecretRef need to be specified.
	ServicePrincipalProfile *ContainerServiceServicePrincipalProfile `pulumi:"servicePrincipalProfile"`
	// Resource tags
	Tags map[string]string `pulumi:"tags"`
	// Profile for Windows VMs in the container service cluster.
	WindowsProfile *ContainerServiceWindowsProfile `pulumi:"windowsProfile"`
}

// The set of arguments for constructing a ContainerService resource.
type ContainerServiceArgs struct {
	// Properties of the agent pool.
	AgentPoolProfiles ContainerServiceAgentPoolProfileArrayInput
	// The name of the container service in the specified subscription and resource group.
	ContainerServiceName pulumi.StringInput
	// Properties to configure a custom container service cluster.
	CustomProfile ContainerServiceCustomProfilePtrInput
	// Profile for diagnostics in the container service cluster.
	DiagnosticsProfile ContainerServiceDiagnosticsProfilePtrInput
	// Profile for Linux VMs in the container service cluster.
	LinuxProfile ContainerServiceLinuxProfileInput
	// Resource location
	Location pulumi.StringInput
	// Profile for the container service master.
	MasterProfile ContainerServiceMasterProfileInput
	// Profile for the container service orchestrator.
	OrchestratorProfile ContainerServiceOrchestratorProfileInput
	// The name of the resource group.
	ResourceGroupName pulumi.StringInput
	// Information about a service principal identity for the cluster to use for manipulating Azure APIs. Exact one of secret or keyVaultSecretRef need to be specified.
	ServicePrincipalProfile ContainerServiceServicePrincipalProfilePtrInput
	// Resource tags
	Tags pulumi.StringMapInput
	// Profile for Windows VMs in the container service cluster.
	WindowsProfile ContainerServiceWindowsProfilePtrInput
}

func (ContainerServiceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*containerServiceArgs)(nil)).Elem()
}
