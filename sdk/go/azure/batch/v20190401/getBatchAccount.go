// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v20190401

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Contains information about an Azure Batch account.
//
// Deprecated: Version 2019-04-01 will be removed in v2 of the provider.
func LookupBatchAccount(ctx *pulumi.Context, args *LookupBatchAccountArgs, opts ...pulumi.InvokeOption) (*LookupBatchAccountResult, error) {
	var rv LookupBatchAccountResult
	err := ctx.Invoke("azure-native:batch/v20190401:getBatchAccount", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type LookupBatchAccountArgs struct {
	// The name of the Batch account.
	AccountName string `pulumi:"accountName"`
	// The name of the resource group that contains the Batch account.
	ResourceGroupName string `pulumi:"resourceGroupName"`
}

// Contains information about an Azure Batch account.
type LookupBatchAccountResult struct {
	// The account endpoint used to interact with the Batch service.
	AccountEndpoint              string `pulumi:"accountEndpoint"`
	ActiveJobAndJobScheduleQuota int    `pulumi:"activeJobAndJobScheduleQuota"`
	// Contains information about the auto-storage account associated with a Batch account.
	AutoStorage AutoStoragePropertiesResponse `pulumi:"autoStorage"`
	// For accounts with PoolAllocationMode set to UserSubscription, quota is managed on the subscription so this value is not returned.
	DedicatedCoreQuota int `pulumi:"dedicatedCoreQuota"`
	// A list of the dedicated core quota per Virtual Machine family for the Batch account. For accounts with PoolAllocationMode set to UserSubscription, quota is managed on the subscription so this value is not returned.
	DedicatedCoreQuotaPerVMFamily []VirtualMachineFamilyCoreQuotaResponse `pulumi:"dedicatedCoreQuotaPerVMFamily"`
	// Batch is transitioning its core quota system for dedicated cores to be enforced per Virtual Machine family. During this transitional phase, the dedicated core quota per Virtual Machine family may not yet be enforced. If this flag is false, dedicated core quota is enforced via the old dedicatedCoreQuota property on the account and does not consider Virtual Machine family. If this flag is true, dedicated core quota is enforced via the dedicatedCoreQuotaPerVMFamily property on the account, and the old dedicatedCoreQuota does not apply.
	DedicatedCoreQuotaPerVMFamilyEnforced bool `pulumi:"dedicatedCoreQuotaPerVMFamilyEnforced"`
	// The ID of the resource.
	Id string `pulumi:"id"`
	// Identifies the Azure key vault associated with a Batch account.
	KeyVaultReference KeyVaultReferenceResponse `pulumi:"keyVaultReference"`
	// The location of the resource.
	Location string `pulumi:"location"`
	// For accounts with PoolAllocationMode set to UserSubscription, quota is managed on the subscription so this value is not returned.
	LowPriorityCoreQuota int `pulumi:"lowPriorityCoreQuota"`
	// The name of the resource.
	Name string `pulumi:"name"`
	// The allocation mode for creating pools in the Batch account.
	PoolAllocationMode string `pulumi:"poolAllocationMode"`
	PoolQuota          int    `pulumi:"poolQuota"`
	// The provisioned state of the resource
	ProvisioningState string `pulumi:"provisioningState"`
	// The tags of the resource.
	Tags map[string]string `pulumi:"tags"`
	// The type of the resource.
	Type string `pulumi:"type"`
}

func LookupBatchAccountOutput(ctx *pulumi.Context, args LookupBatchAccountOutputArgs, opts ...pulumi.InvokeOption) LookupBatchAccountResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupBatchAccountResult, error) {
			args := v.(LookupBatchAccountArgs)
			r, err := LookupBatchAccount(ctx, &args, opts...)
			var s LookupBatchAccountResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupBatchAccountResultOutput)
}

type LookupBatchAccountOutputArgs struct {
	// The name of the Batch account.
	AccountName pulumi.StringInput `pulumi:"accountName"`
	// The name of the resource group that contains the Batch account.
	ResourceGroupName pulumi.StringInput `pulumi:"resourceGroupName"`
}

func (LookupBatchAccountOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupBatchAccountArgs)(nil)).Elem()
}

// Contains information about an Azure Batch account.
type LookupBatchAccountResultOutput struct{ *pulumi.OutputState }

func (LookupBatchAccountResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupBatchAccountResult)(nil)).Elem()
}

func (o LookupBatchAccountResultOutput) ToLookupBatchAccountResultOutput() LookupBatchAccountResultOutput {
	return o
}

func (o LookupBatchAccountResultOutput) ToLookupBatchAccountResultOutputWithContext(ctx context.Context) LookupBatchAccountResultOutput {
	return o
}

// The account endpoint used to interact with the Batch service.
func (o LookupBatchAccountResultOutput) AccountEndpoint() pulumi.StringOutput {
	return o.ApplyT(func(v LookupBatchAccountResult) string { return v.AccountEndpoint }).(pulumi.StringOutput)
}

func (o LookupBatchAccountResultOutput) ActiveJobAndJobScheduleQuota() pulumi.IntOutput {
	return o.ApplyT(func(v LookupBatchAccountResult) int { return v.ActiveJobAndJobScheduleQuota }).(pulumi.IntOutput)
}

// Contains information about the auto-storage account associated with a Batch account.
func (o LookupBatchAccountResultOutput) AutoStorage() AutoStoragePropertiesResponseOutput {
	return o.ApplyT(func(v LookupBatchAccountResult) AutoStoragePropertiesResponse { return v.AutoStorage }).(AutoStoragePropertiesResponseOutput)
}

// For accounts with PoolAllocationMode set to UserSubscription, quota is managed on the subscription so this value is not returned.
func (o LookupBatchAccountResultOutput) DedicatedCoreQuota() pulumi.IntOutput {
	return o.ApplyT(func(v LookupBatchAccountResult) int { return v.DedicatedCoreQuota }).(pulumi.IntOutput)
}

// A list of the dedicated core quota per Virtual Machine family for the Batch account. For accounts with PoolAllocationMode set to UserSubscription, quota is managed on the subscription so this value is not returned.
func (o LookupBatchAccountResultOutput) DedicatedCoreQuotaPerVMFamily() VirtualMachineFamilyCoreQuotaResponseArrayOutput {
	return o.ApplyT(func(v LookupBatchAccountResult) []VirtualMachineFamilyCoreQuotaResponse {
		return v.DedicatedCoreQuotaPerVMFamily
	}).(VirtualMachineFamilyCoreQuotaResponseArrayOutput)
}

// Batch is transitioning its core quota system for dedicated cores to be enforced per Virtual Machine family. During this transitional phase, the dedicated core quota per Virtual Machine family may not yet be enforced. If this flag is false, dedicated core quota is enforced via the old dedicatedCoreQuota property on the account and does not consider Virtual Machine family. If this flag is true, dedicated core quota is enforced via the dedicatedCoreQuotaPerVMFamily property on the account, and the old dedicatedCoreQuota does not apply.
func (o LookupBatchAccountResultOutput) DedicatedCoreQuotaPerVMFamilyEnforced() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupBatchAccountResult) bool { return v.DedicatedCoreQuotaPerVMFamilyEnforced }).(pulumi.BoolOutput)
}

// The ID of the resource.
func (o LookupBatchAccountResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupBatchAccountResult) string { return v.Id }).(pulumi.StringOutput)
}

// Identifies the Azure key vault associated with a Batch account.
func (o LookupBatchAccountResultOutput) KeyVaultReference() KeyVaultReferenceResponseOutput {
	return o.ApplyT(func(v LookupBatchAccountResult) KeyVaultReferenceResponse { return v.KeyVaultReference }).(KeyVaultReferenceResponseOutput)
}

// The location of the resource.
func (o LookupBatchAccountResultOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v LookupBatchAccountResult) string { return v.Location }).(pulumi.StringOutput)
}

// For accounts with PoolAllocationMode set to UserSubscription, quota is managed on the subscription so this value is not returned.
func (o LookupBatchAccountResultOutput) LowPriorityCoreQuota() pulumi.IntOutput {
	return o.ApplyT(func(v LookupBatchAccountResult) int { return v.LowPriorityCoreQuota }).(pulumi.IntOutput)
}

// The name of the resource.
func (o LookupBatchAccountResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupBatchAccountResult) string { return v.Name }).(pulumi.StringOutput)
}

// The allocation mode for creating pools in the Batch account.
func (o LookupBatchAccountResultOutput) PoolAllocationMode() pulumi.StringOutput {
	return o.ApplyT(func(v LookupBatchAccountResult) string { return v.PoolAllocationMode }).(pulumi.StringOutput)
}

func (o LookupBatchAccountResultOutput) PoolQuota() pulumi.IntOutput {
	return o.ApplyT(func(v LookupBatchAccountResult) int { return v.PoolQuota }).(pulumi.IntOutput)
}

// The provisioned state of the resource
func (o LookupBatchAccountResultOutput) ProvisioningState() pulumi.StringOutput {
	return o.ApplyT(func(v LookupBatchAccountResult) string { return v.ProvisioningState }).(pulumi.StringOutput)
}

// The tags of the resource.
func (o LookupBatchAccountResultOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v LookupBatchAccountResult) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

// The type of the resource.
func (o LookupBatchAccountResultOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v LookupBatchAccountResult) string { return v.Type }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupBatchAccountResultOutput{})
}
