// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v20170101

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Contains information about an application in a Batch account.
//
// Deprecated: Version 2017-01-01 will be removed in v2 of the provider.
func LookupApplication(ctx *pulumi.Context, args *LookupApplicationArgs, opts ...pulumi.InvokeOption) (*LookupApplicationResult, error) {
	var rv LookupApplicationResult
	err := ctx.Invoke("azure-native:batch/v20170101:getApplication", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type LookupApplicationArgs struct {
	// The name of the Batch account.
	AccountName string `pulumi:"accountName"`
	// The ID of the application.
	ApplicationId string `pulumi:"applicationId"`
	// The name of the resource group that contains the Batch account.
	ResourceGroupName string `pulumi:"resourceGroupName"`
}

// Contains information about an application in a Batch account.
type LookupApplicationResult struct {
	// A value indicating whether packages within the application may be overwritten using the same version string.
	AllowUpdates *bool `pulumi:"allowUpdates"`
	// The package to use if a client requests the application but does not specify a version.
	DefaultVersion *string `pulumi:"defaultVersion"`
	// The display name for the application.
	DisplayName *string `pulumi:"displayName"`
	// A string that uniquely identifies the application within the account.
	Id *string `pulumi:"id"`
	// The list of packages under this application.
	Packages []ApplicationPackageResponse `pulumi:"packages"`
}

func LookupApplicationOutput(ctx *pulumi.Context, args LookupApplicationOutputArgs, opts ...pulumi.InvokeOption) LookupApplicationResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupApplicationResult, error) {
			args := v.(LookupApplicationArgs)
			r, err := LookupApplication(ctx, &args, opts...)
			var s LookupApplicationResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupApplicationResultOutput)
}

type LookupApplicationOutputArgs struct {
	// The name of the Batch account.
	AccountName pulumi.StringInput `pulumi:"accountName"`
	// The ID of the application.
	ApplicationId pulumi.StringInput `pulumi:"applicationId"`
	// The name of the resource group that contains the Batch account.
	ResourceGroupName pulumi.StringInput `pulumi:"resourceGroupName"`
}

func (LookupApplicationOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupApplicationArgs)(nil)).Elem()
}

// Contains information about an application in a Batch account.
type LookupApplicationResultOutput struct{ *pulumi.OutputState }

func (LookupApplicationResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupApplicationResult)(nil)).Elem()
}

func (o LookupApplicationResultOutput) ToLookupApplicationResultOutput() LookupApplicationResultOutput {
	return o
}

func (o LookupApplicationResultOutput) ToLookupApplicationResultOutputWithContext(ctx context.Context) LookupApplicationResultOutput {
	return o
}

// A value indicating whether packages within the application may be overwritten using the same version string.
func (o LookupApplicationResultOutput) AllowUpdates() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v LookupApplicationResult) *bool { return v.AllowUpdates }).(pulumi.BoolPtrOutput)
}

// The package to use if a client requests the application but does not specify a version.
func (o LookupApplicationResultOutput) DefaultVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupApplicationResult) *string { return v.DefaultVersion }).(pulumi.StringPtrOutput)
}

// The display name for the application.
func (o LookupApplicationResultOutput) DisplayName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupApplicationResult) *string { return v.DisplayName }).(pulumi.StringPtrOutput)
}

// A string that uniquely identifies the application within the account.
func (o LookupApplicationResultOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupApplicationResult) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// The list of packages under this application.
func (o LookupApplicationResultOutput) Packages() ApplicationPackageResponseArrayOutput {
	return o.ApplyT(func(v LookupApplicationResult) []ApplicationPackageResponse { return v.Packages }).(ApplicationPackageResponseArrayOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupApplicationResultOutput{})
}
