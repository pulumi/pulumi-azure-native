// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v20170901

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// An application package which represents a particular version of an application.
//
// Deprecated: Version 2017-09-01 will be removed in v2 of the provider.
func LookupApplicationPackage(ctx *pulumi.Context, args *LookupApplicationPackageArgs, opts ...pulumi.InvokeOption) (*LookupApplicationPackageResult, error) {
	var rv LookupApplicationPackageResult
	err := ctx.Invoke("azure-native:batch/v20170901:getApplicationPackage", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type LookupApplicationPackageArgs struct {
	// The name of the Batch account.
	AccountName string `pulumi:"accountName"`
	// The ID of the application.
	ApplicationId string `pulumi:"applicationId"`
	// The name of the resource group that contains the Batch account.
	ResourceGroupName string `pulumi:"resourceGroupName"`
	// The version of the application.
	Version string `pulumi:"version"`
}

// An application package which represents a particular version of an application.
type LookupApplicationPackageResult struct {
	// The format of the application package, if the package is active.
	Format string `pulumi:"format"`
	// The ID of the application.
	Id string `pulumi:"id"`
	// The time at which the package was last activated, if the package is active.
	LastActivationTime string `pulumi:"lastActivationTime"`
	// The current state of the application package.
	State string `pulumi:"state"`
	// The URL for the application package in Azure Storage.
	StorageUrl string `pulumi:"storageUrl"`
	// The UTC time at which the Azure Storage URL will expire.
	StorageUrlExpiry string `pulumi:"storageUrlExpiry"`
	// The version of the application package.
	Version string `pulumi:"version"`
}

func LookupApplicationPackageOutput(ctx *pulumi.Context, args LookupApplicationPackageOutputArgs, opts ...pulumi.InvokeOption) LookupApplicationPackageResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupApplicationPackageResult, error) {
			args := v.(LookupApplicationPackageArgs)
			r, err := LookupApplicationPackage(ctx, &args, opts...)
			var s LookupApplicationPackageResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupApplicationPackageResultOutput)
}

type LookupApplicationPackageOutputArgs struct {
	// The name of the Batch account.
	AccountName pulumi.StringInput `pulumi:"accountName"`
	// The ID of the application.
	ApplicationId pulumi.StringInput `pulumi:"applicationId"`
	// The name of the resource group that contains the Batch account.
	ResourceGroupName pulumi.StringInput `pulumi:"resourceGroupName"`
	// The version of the application.
	Version pulumi.StringInput `pulumi:"version"`
}

func (LookupApplicationPackageOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupApplicationPackageArgs)(nil)).Elem()
}

// An application package which represents a particular version of an application.
type LookupApplicationPackageResultOutput struct{ *pulumi.OutputState }

func (LookupApplicationPackageResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupApplicationPackageResult)(nil)).Elem()
}

func (o LookupApplicationPackageResultOutput) ToLookupApplicationPackageResultOutput() LookupApplicationPackageResultOutput {
	return o
}

func (o LookupApplicationPackageResultOutput) ToLookupApplicationPackageResultOutputWithContext(ctx context.Context) LookupApplicationPackageResultOutput {
	return o
}

// The format of the application package, if the package is active.
func (o LookupApplicationPackageResultOutput) Format() pulumi.StringOutput {
	return o.ApplyT(func(v LookupApplicationPackageResult) string { return v.Format }).(pulumi.StringOutput)
}

// The ID of the application.
func (o LookupApplicationPackageResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupApplicationPackageResult) string { return v.Id }).(pulumi.StringOutput)
}

// The time at which the package was last activated, if the package is active.
func (o LookupApplicationPackageResultOutput) LastActivationTime() pulumi.StringOutput {
	return o.ApplyT(func(v LookupApplicationPackageResult) string { return v.LastActivationTime }).(pulumi.StringOutput)
}

// The current state of the application package.
func (o LookupApplicationPackageResultOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v LookupApplicationPackageResult) string { return v.State }).(pulumi.StringOutput)
}

// The URL for the application package in Azure Storage.
func (o LookupApplicationPackageResultOutput) StorageUrl() pulumi.StringOutput {
	return o.ApplyT(func(v LookupApplicationPackageResult) string { return v.StorageUrl }).(pulumi.StringOutput)
}

// The UTC time at which the Azure Storage URL will expire.
func (o LookupApplicationPackageResultOutput) StorageUrlExpiry() pulumi.StringOutput {
	return o.ApplyT(func(v LookupApplicationPackageResult) string { return v.StorageUrlExpiry }).(pulumi.StringOutput)
}

// The version of the application package.
func (o LookupApplicationPackageResultOutput) Version() pulumi.StringOutput {
	return o.ApplyT(func(v LookupApplicationPackageResult) string { return v.Version }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupApplicationPackageResultOutput{})
}
