// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package latest

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

type ApplicationPackageReference struct {
	Id string `pulumi:"id"`
	// If this is omitted, and no default version is specified for this application, the request fails with the error code InvalidApplicationPackageReferences. If you are calling the REST API directly, the HTTP status code is 409.
	Version *string `pulumi:"version"`
}

// ApplicationPackageReferenceInput is an input type that accepts ApplicationPackageReferenceArgs and ApplicationPackageReferenceOutput values.
// You can construct a concrete instance of `ApplicationPackageReferenceInput` via:
//
//          ApplicationPackageReferenceArgs{...}
type ApplicationPackageReferenceInput interface {
	pulumi.Input

	ToApplicationPackageReferenceOutput() ApplicationPackageReferenceOutput
	ToApplicationPackageReferenceOutputWithContext(context.Context) ApplicationPackageReferenceOutput
}

type ApplicationPackageReferenceArgs struct {
	Id pulumi.StringInput `pulumi:"id"`
	// If this is omitted, and no default version is specified for this application, the request fails with the error code InvalidApplicationPackageReferences. If you are calling the REST API directly, the HTTP status code is 409.
	Version pulumi.StringPtrInput `pulumi:"version"`
}

func (ApplicationPackageReferenceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationPackageReference)(nil)).Elem()
}

func (i ApplicationPackageReferenceArgs) ToApplicationPackageReferenceOutput() ApplicationPackageReferenceOutput {
	return i.ToApplicationPackageReferenceOutputWithContext(context.Background())
}

func (i ApplicationPackageReferenceArgs) ToApplicationPackageReferenceOutputWithContext(ctx context.Context) ApplicationPackageReferenceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationPackageReferenceOutput)
}

// ApplicationPackageReferenceArrayInput is an input type that accepts ApplicationPackageReferenceArray and ApplicationPackageReferenceArrayOutput values.
// You can construct a concrete instance of `ApplicationPackageReferenceArrayInput` via:
//
//          ApplicationPackageReferenceArray{ ApplicationPackageReferenceArgs{...} }
type ApplicationPackageReferenceArrayInput interface {
	pulumi.Input

	ToApplicationPackageReferenceArrayOutput() ApplicationPackageReferenceArrayOutput
	ToApplicationPackageReferenceArrayOutputWithContext(context.Context) ApplicationPackageReferenceArrayOutput
}

type ApplicationPackageReferenceArray []ApplicationPackageReferenceInput

func (ApplicationPackageReferenceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ApplicationPackageReference)(nil)).Elem()
}

func (i ApplicationPackageReferenceArray) ToApplicationPackageReferenceArrayOutput() ApplicationPackageReferenceArrayOutput {
	return i.ToApplicationPackageReferenceArrayOutputWithContext(context.Background())
}

func (i ApplicationPackageReferenceArray) ToApplicationPackageReferenceArrayOutputWithContext(ctx context.Context) ApplicationPackageReferenceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationPackageReferenceArrayOutput)
}

type ApplicationPackageReferenceOutput struct{ *pulumi.OutputState }

func (ApplicationPackageReferenceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationPackageReference)(nil)).Elem()
}

func (o ApplicationPackageReferenceOutput) ToApplicationPackageReferenceOutput() ApplicationPackageReferenceOutput {
	return o
}

func (o ApplicationPackageReferenceOutput) ToApplicationPackageReferenceOutputWithContext(ctx context.Context) ApplicationPackageReferenceOutput {
	return o
}

func (o ApplicationPackageReferenceOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v ApplicationPackageReference) string { return v.Id }).(pulumi.StringOutput)
}

// If this is omitted, and no default version is specified for this application, the request fails with the error code InvalidApplicationPackageReferences. If you are calling the REST API directly, the HTTP status code is 409.
func (o ApplicationPackageReferenceOutput) Version() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApplicationPackageReference) *string { return v.Version }).(pulumi.StringPtrOutput)
}

type ApplicationPackageReferenceArrayOutput struct{ *pulumi.OutputState }

func (ApplicationPackageReferenceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ApplicationPackageReference)(nil)).Elem()
}

func (o ApplicationPackageReferenceArrayOutput) ToApplicationPackageReferenceArrayOutput() ApplicationPackageReferenceArrayOutput {
	return o
}

func (o ApplicationPackageReferenceArrayOutput) ToApplicationPackageReferenceArrayOutputWithContext(ctx context.Context) ApplicationPackageReferenceArrayOutput {
	return o
}

func (o ApplicationPackageReferenceArrayOutput) Index(i pulumi.IntInput) ApplicationPackageReferenceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ApplicationPackageReference {
		return vs[0].([]ApplicationPackageReference)[vs[1].(int)]
	}).(ApplicationPackageReferenceOutput)
}

type ApplicationPackageReferenceResponse struct {
	Id string `pulumi:"id"`
	// If this is omitted, and no default version is specified for this application, the request fails with the error code InvalidApplicationPackageReferences. If you are calling the REST API directly, the HTTP status code is 409.
	Version *string `pulumi:"version"`
}

// ApplicationPackageReferenceResponseInput is an input type that accepts ApplicationPackageReferenceResponseArgs and ApplicationPackageReferenceResponseOutput values.
// You can construct a concrete instance of `ApplicationPackageReferenceResponseInput` via:
//
//          ApplicationPackageReferenceResponseArgs{...}
type ApplicationPackageReferenceResponseInput interface {
	pulumi.Input

	ToApplicationPackageReferenceResponseOutput() ApplicationPackageReferenceResponseOutput
	ToApplicationPackageReferenceResponseOutputWithContext(context.Context) ApplicationPackageReferenceResponseOutput
}

type ApplicationPackageReferenceResponseArgs struct {
	Id pulumi.StringInput `pulumi:"id"`
	// If this is omitted, and no default version is specified for this application, the request fails with the error code InvalidApplicationPackageReferences. If you are calling the REST API directly, the HTTP status code is 409.
	Version pulumi.StringPtrInput `pulumi:"version"`
}

func (ApplicationPackageReferenceResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationPackageReferenceResponse)(nil)).Elem()
}

func (i ApplicationPackageReferenceResponseArgs) ToApplicationPackageReferenceResponseOutput() ApplicationPackageReferenceResponseOutput {
	return i.ToApplicationPackageReferenceResponseOutputWithContext(context.Background())
}

func (i ApplicationPackageReferenceResponseArgs) ToApplicationPackageReferenceResponseOutputWithContext(ctx context.Context) ApplicationPackageReferenceResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationPackageReferenceResponseOutput)
}

// ApplicationPackageReferenceResponseArrayInput is an input type that accepts ApplicationPackageReferenceResponseArray and ApplicationPackageReferenceResponseArrayOutput values.
// You can construct a concrete instance of `ApplicationPackageReferenceResponseArrayInput` via:
//
//          ApplicationPackageReferenceResponseArray{ ApplicationPackageReferenceResponseArgs{...} }
type ApplicationPackageReferenceResponseArrayInput interface {
	pulumi.Input

	ToApplicationPackageReferenceResponseArrayOutput() ApplicationPackageReferenceResponseArrayOutput
	ToApplicationPackageReferenceResponseArrayOutputWithContext(context.Context) ApplicationPackageReferenceResponseArrayOutput
}

type ApplicationPackageReferenceResponseArray []ApplicationPackageReferenceResponseInput

func (ApplicationPackageReferenceResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ApplicationPackageReferenceResponse)(nil)).Elem()
}

func (i ApplicationPackageReferenceResponseArray) ToApplicationPackageReferenceResponseArrayOutput() ApplicationPackageReferenceResponseArrayOutput {
	return i.ToApplicationPackageReferenceResponseArrayOutputWithContext(context.Background())
}

func (i ApplicationPackageReferenceResponseArray) ToApplicationPackageReferenceResponseArrayOutputWithContext(ctx context.Context) ApplicationPackageReferenceResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationPackageReferenceResponseArrayOutput)
}

type ApplicationPackageReferenceResponseOutput struct{ *pulumi.OutputState }

func (ApplicationPackageReferenceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationPackageReferenceResponse)(nil)).Elem()
}

func (o ApplicationPackageReferenceResponseOutput) ToApplicationPackageReferenceResponseOutput() ApplicationPackageReferenceResponseOutput {
	return o
}

func (o ApplicationPackageReferenceResponseOutput) ToApplicationPackageReferenceResponseOutputWithContext(ctx context.Context) ApplicationPackageReferenceResponseOutput {
	return o
}

func (o ApplicationPackageReferenceResponseOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v ApplicationPackageReferenceResponse) string { return v.Id }).(pulumi.StringOutput)
}

// If this is omitted, and no default version is specified for this application, the request fails with the error code InvalidApplicationPackageReferences. If you are calling the REST API directly, the HTTP status code is 409.
func (o ApplicationPackageReferenceResponseOutput) Version() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApplicationPackageReferenceResponse) *string { return v.Version }).(pulumi.StringPtrOutput)
}

type ApplicationPackageReferenceResponseArrayOutput struct{ *pulumi.OutputState }

func (ApplicationPackageReferenceResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ApplicationPackageReferenceResponse)(nil)).Elem()
}

func (o ApplicationPackageReferenceResponseArrayOutput) ToApplicationPackageReferenceResponseArrayOutput() ApplicationPackageReferenceResponseArrayOutput {
	return o
}

func (o ApplicationPackageReferenceResponseArrayOutput) ToApplicationPackageReferenceResponseArrayOutputWithContext(ctx context.Context) ApplicationPackageReferenceResponseArrayOutput {
	return o
}

func (o ApplicationPackageReferenceResponseArrayOutput) Index(i pulumi.IntInput) ApplicationPackageReferenceResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ApplicationPackageReferenceResponse {
		return vs[0].([]ApplicationPackageReferenceResponse)[vs[1].(int)]
	}).(ApplicationPackageReferenceResponseOutput)
}

type AutoScaleRunErrorResponse struct {
	// An identifier for the error. Codes are invariant and are intended to be consumed programmatically.
	Code    string                      `pulumi:"code"`
	Details []AutoScaleRunErrorResponse `pulumi:"details"`
	// A message describing the error, intended to be suitable for display in a user interface.
	Message string `pulumi:"message"`
}

// AutoScaleRunErrorResponseInput is an input type that accepts AutoScaleRunErrorResponseArgs and AutoScaleRunErrorResponseOutput values.
// You can construct a concrete instance of `AutoScaleRunErrorResponseInput` via:
//
//          AutoScaleRunErrorResponseArgs{...}
type AutoScaleRunErrorResponseInput interface {
	pulumi.Input

	ToAutoScaleRunErrorResponseOutput() AutoScaleRunErrorResponseOutput
	ToAutoScaleRunErrorResponseOutputWithContext(context.Context) AutoScaleRunErrorResponseOutput
}

type AutoScaleRunErrorResponseArgs struct {
	// An identifier for the error. Codes are invariant and are intended to be consumed programmatically.
	Code    pulumi.StringInput                  `pulumi:"code"`
	Details AutoScaleRunErrorResponseArrayInput `pulumi:"details"`
	// A message describing the error, intended to be suitable for display in a user interface.
	Message pulumi.StringInput `pulumi:"message"`
}

func (AutoScaleRunErrorResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AutoScaleRunErrorResponse)(nil)).Elem()
}

func (i AutoScaleRunErrorResponseArgs) ToAutoScaleRunErrorResponseOutput() AutoScaleRunErrorResponseOutput {
	return i.ToAutoScaleRunErrorResponseOutputWithContext(context.Background())
}

func (i AutoScaleRunErrorResponseArgs) ToAutoScaleRunErrorResponseOutputWithContext(ctx context.Context) AutoScaleRunErrorResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AutoScaleRunErrorResponseOutput)
}

func (i AutoScaleRunErrorResponseArgs) ToAutoScaleRunErrorResponsePtrOutput() AutoScaleRunErrorResponsePtrOutput {
	return i.ToAutoScaleRunErrorResponsePtrOutputWithContext(context.Background())
}

func (i AutoScaleRunErrorResponseArgs) ToAutoScaleRunErrorResponsePtrOutputWithContext(ctx context.Context) AutoScaleRunErrorResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AutoScaleRunErrorResponseOutput).ToAutoScaleRunErrorResponsePtrOutputWithContext(ctx)
}

// AutoScaleRunErrorResponsePtrInput is an input type that accepts AutoScaleRunErrorResponseArgs, AutoScaleRunErrorResponsePtr and AutoScaleRunErrorResponsePtrOutput values.
// You can construct a concrete instance of `AutoScaleRunErrorResponsePtrInput` via:
//
//          AutoScaleRunErrorResponseArgs{...}
//
//  or:
//
//          nil
type AutoScaleRunErrorResponsePtrInput interface {
	pulumi.Input

	ToAutoScaleRunErrorResponsePtrOutput() AutoScaleRunErrorResponsePtrOutput
	ToAutoScaleRunErrorResponsePtrOutputWithContext(context.Context) AutoScaleRunErrorResponsePtrOutput
}

type autoScaleRunErrorResponsePtrType AutoScaleRunErrorResponseArgs

func AutoScaleRunErrorResponsePtr(v *AutoScaleRunErrorResponseArgs) AutoScaleRunErrorResponsePtrInput {
	return (*autoScaleRunErrorResponsePtrType)(v)
}

func (*autoScaleRunErrorResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AutoScaleRunErrorResponse)(nil)).Elem()
}

func (i *autoScaleRunErrorResponsePtrType) ToAutoScaleRunErrorResponsePtrOutput() AutoScaleRunErrorResponsePtrOutput {
	return i.ToAutoScaleRunErrorResponsePtrOutputWithContext(context.Background())
}

func (i *autoScaleRunErrorResponsePtrType) ToAutoScaleRunErrorResponsePtrOutputWithContext(ctx context.Context) AutoScaleRunErrorResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AutoScaleRunErrorResponsePtrOutput)
}

// AutoScaleRunErrorResponseArrayInput is an input type that accepts AutoScaleRunErrorResponseArray and AutoScaleRunErrorResponseArrayOutput values.
// You can construct a concrete instance of `AutoScaleRunErrorResponseArrayInput` via:
//
//          AutoScaleRunErrorResponseArray{ AutoScaleRunErrorResponseArgs{...} }
type AutoScaleRunErrorResponseArrayInput interface {
	pulumi.Input

	ToAutoScaleRunErrorResponseArrayOutput() AutoScaleRunErrorResponseArrayOutput
	ToAutoScaleRunErrorResponseArrayOutputWithContext(context.Context) AutoScaleRunErrorResponseArrayOutput
}

type AutoScaleRunErrorResponseArray []AutoScaleRunErrorResponseInput

func (AutoScaleRunErrorResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AutoScaleRunErrorResponse)(nil)).Elem()
}

func (i AutoScaleRunErrorResponseArray) ToAutoScaleRunErrorResponseArrayOutput() AutoScaleRunErrorResponseArrayOutput {
	return i.ToAutoScaleRunErrorResponseArrayOutputWithContext(context.Background())
}

func (i AutoScaleRunErrorResponseArray) ToAutoScaleRunErrorResponseArrayOutputWithContext(ctx context.Context) AutoScaleRunErrorResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AutoScaleRunErrorResponseArrayOutput)
}

type AutoScaleRunErrorResponseOutput struct{ *pulumi.OutputState }

func (AutoScaleRunErrorResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AutoScaleRunErrorResponse)(nil)).Elem()
}

func (o AutoScaleRunErrorResponseOutput) ToAutoScaleRunErrorResponseOutput() AutoScaleRunErrorResponseOutput {
	return o
}

func (o AutoScaleRunErrorResponseOutput) ToAutoScaleRunErrorResponseOutputWithContext(ctx context.Context) AutoScaleRunErrorResponseOutput {
	return o
}

func (o AutoScaleRunErrorResponseOutput) ToAutoScaleRunErrorResponsePtrOutput() AutoScaleRunErrorResponsePtrOutput {
	return o.ToAutoScaleRunErrorResponsePtrOutputWithContext(context.Background())
}

func (o AutoScaleRunErrorResponseOutput) ToAutoScaleRunErrorResponsePtrOutputWithContext(ctx context.Context) AutoScaleRunErrorResponsePtrOutput {
	return o.ApplyT(func(v AutoScaleRunErrorResponse) *AutoScaleRunErrorResponse {
		return &v
	}).(AutoScaleRunErrorResponsePtrOutput)
}

// An identifier for the error. Codes are invariant and are intended to be consumed programmatically.
func (o AutoScaleRunErrorResponseOutput) Code() pulumi.StringOutput {
	return o.ApplyT(func(v AutoScaleRunErrorResponse) string { return v.Code }).(pulumi.StringOutput)
}

func (o AutoScaleRunErrorResponseOutput) Details() AutoScaleRunErrorResponseArrayOutput {
	return o.ApplyT(func(v AutoScaleRunErrorResponse) []AutoScaleRunErrorResponse { return v.Details }).(AutoScaleRunErrorResponseArrayOutput)
}

// A message describing the error, intended to be suitable for display in a user interface.
func (o AutoScaleRunErrorResponseOutput) Message() pulumi.StringOutput {
	return o.ApplyT(func(v AutoScaleRunErrorResponse) string { return v.Message }).(pulumi.StringOutput)
}

type AutoScaleRunErrorResponsePtrOutput struct{ *pulumi.OutputState }

func (AutoScaleRunErrorResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AutoScaleRunErrorResponse)(nil)).Elem()
}

func (o AutoScaleRunErrorResponsePtrOutput) ToAutoScaleRunErrorResponsePtrOutput() AutoScaleRunErrorResponsePtrOutput {
	return o
}

func (o AutoScaleRunErrorResponsePtrOutput) ToAutoScaleRunErrorResponsePtrOutputWithContext(ctx context.Context) AutoScaleRunErrorResponsePtrOutput {
	return o
}

func (o AutoScaleRunErrorResponsePtrOutput) Elem() AutoScaleRunErrorResponseOutput {
	return o.ApplyT(func(v *AutoScaleRunErrorResponse) AutoScaleRunErrorResponse { return *v }).(AutoScaleRunErrorResponseOutput)
}

// An identifier for the error. Codes are invariant and are intended to be consumed programmatically.
func (o AutoScaleRunErrorResponsePtrOutput) Code() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AutoScaleRunErrorResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Code
	}).(pulumi.StringPtrOutput)
}

func (o AutoScaleRunErrorResponsePtrOutput) Details() AutoScaleRunErrorResponseArrayOutput {
	return o.ApplyT(func(v *AutoScaleRunErrorResponse) []AutoScaleRunErrorResponse {
		if v == nil {
			return nil
		}
		return v.Details
	}).(AutoScaleRunErrorResponseArrayOutput)
}

// A message describing the error, intended to be suitable for display in a user interface.
func (o AutoScaleRunErrorResponsePtrOutput) Message() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AutoScaleRunErrorResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Message
	}).(pulumi.StringPtrOutput)
}

type AutoScaleRunErrorResponseArrayOutput struct{ *pulumi.OutputState }

func (AutoScaleRunErrorResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AutoScaleRunErrorResponse)(nil)).Elem()
}

func (o AutoScaleRunErrorResponseArrayOutput) ToAutoScaleRunErrorResponseArrayOutput() AutoScaleRunErrorResponseArrayOutput {
	return o
}

func (o AutoScaleRunErrorResponseArrayOutput) ToAutoScaleRunErrorResponseArrayOutputWithContext(ctx context.Context) AutoScaleRunErrorResponseArrayOutput {
	return o
}

func (o AutoScaleRunErrorResponseArrayOutput) Index(i pulumi.IntInput) AutoScaleRunErrorResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AutoScaleRunErrorResponse {
		return vs[0].([]AutoScaleRunErrorResponse)[vs[1].(int)]
	}).(AutoScaleRunErrorResponseOutput)
}

type AutoScaleRunResponse struct {
	Error          *AutoScaleRunErrorResponse `pulumi:"error"`
	EvaluationTime string                     `pulumi:"evaluationTime"`
	// Each variable value is returned in the form $variable=value, and variables are separated by semicolons.
	Results *string `pulumi:"results"`
}

// AutoScaleRunResponseInput is an input type that accepts AutoScaleRunResponseArgs and AutoScaleRunResponseOutput values.
// You can construct a concrete instance of `AutoScaleRunResponseInput` via:
//
//          AutoScaleRunResponseArgs{...}
type AutoScaleRunResponseInput interface {
	pulumi.Input

	ToAutoScaleRunResponseOutput() AutoScaleRunResponseOutput
	ToAutoScaleRunResponseOutputWithContext(context.Context) AutoScaleRunResponseOutput
}

type AutoScaleRunResponseArgs struct {
	Error          AutoScaleRunErrorResponsePtrInput `pulumi:"error"`
	EvaluationTime pulumi.StringInput                `pulumi:"evaluationTime"`
	// Each variable value is returned in the form $variable=value, and variables are separated by semicolons.
	Results pulumi.StringPtrInput `pulumi:"results"`
}

func (AutoScaleRunResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AutoScaleRunResponse)(nil)).Elem()
}

func (i AutoScaleRunResponseArgs) ToAutoScaleRunResponseOutput() AutoScaleRunResponseOutput {
	return i.ToAutoScaleRunResponseOutputWithContext(context.Background())
}

func (i AutoScaleRunResponseArgs) ToAutoScaleRunResponseOutputWithContext(ctx context.Context) AutoScaleRunResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AutoScaleRunResponseOutput)
}

func (i AutoScaleRunResponseArgs) ToAutoScaleRunResponsePtrOutput() AutoScaleRunResponsePtrOutput {
	return i.ToAutoScaleRunResponsePtrOutputWithContext(context.Background())
}

func (i AutoScaleRunResponseArgs) ToAutoScaleRunResponsePtrOutputWithContext(ctx context.Context) AutoScaleRunResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AutoScaleRunResponseOutput).ToAutoScaleRunResponsePtrOutputWithContext(ctx)
}

// AutoScaleRunResponsePtrInput is an input type that accepts AutoScaleRunResponseArgs, AutoScaleRunResponsePtr and AutoScaleRunResponsePtrOutput values.
// You can construct a concrete instance of `AutoScaleRunResponsePtrInput` via:
//
//          AutoScaleRunResponseArgs{...}
//
//  or:
//
//          nil
type AutoScaleRunResponsePtrInput interface {
	pulumi.Input

	ToAutoScaleRunResponsePtrOutput() AutoScaleRunResponsePtrOutput
	ToAutoScaleRunResponsePtrOutputWithContext(context.Context) AutoScaleRunResponsePtrOutput
}

type autoScaleRunResponsePtrType AutoScaleRunResponseArgs

func AutoScaleRunResponsePtr(v *AutoScaleRunResponseArgs) AutoScaleRunResponsePtrInput {
	return (*autoScaleRunResponsePtrType)(v)
}

func (*autoScaleRunResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AutoScaleRunResponse)(nil)).Elem()
}

func (i *autoScaleRunResponsePtrType) ToAutoScaleRunResponsePtrOutput() AutoScaleRunResponsePtrOutput {
	return i.ToAutoScaleRunResponsePtrOutputWithContext(context.Background())
}

func (i *autoScaleRunResponsePtrType) ToAutoScaleRunResponsePtrOutputWithContext(ctx context.Context) AutoScaleRunResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AutoScaleRunResponsePtrOutput)
}

type AutoScaleRunResponseOutput struct{ *pulumi.OutputState }

func (AutoScaleRunResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AutoScaleRunResponse)(nil)).Elem()
}

func (o AutoScaleRunResponseOutput) ToAutoScaleRunResponseOutput() AutoScaleRunResponseOutput {
	return o
}

func (o AutoScaleRunResponseOutput) ToAutoScaleRunResponseOutputWithContext(ctx context.Context) AutoScaleRunResponseOutput {
	return o
}

func (o AutoScaleRunResponseOutput) ToAutoScaleRunResponsePtrOutput() AutoScaleRunResponsePtrOutput {
	return o.ToAutoScaleRunResponsePtrOutputWithContext(context.Background())
}

func (o AutoScaleRunResponseOutput) ToAutoScaleRunResponsePtrOutputWithContext(ctx context.Context) AutoScaleRunResponsePtrOutput {
	return o.ApplyT(func(v AutoScaleRunResponse) *AutoScaleRunResponse {
		return &v
	}).(AutoScaleRunResponsePtrOutput)
}
func (o AutoScaleRunResponseOutput) Error() AutoScaleRunErrorResponsePtrOutput {
	return o.ApplyT(func(v AutoScaleRunResponse) *AutoScaleRunErrorResponse { return v.Error }).(AutoScaleRunErrorResponsePtrOutput)
}

func (o AutoScaleRunResponseOutput) EvaluationTime() pulumi.StringOutput {
	return o.ApplyT(func(v AutoScaleRunResponse) string { return v.EvaluationTime }).(pulumi.StringOutput)
}

// Each variable value is returned in the form $variable=value, and variables are separated by semicolons.
func (o AutoScaleRunResponseOutput) Results() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AutoScaleRunResponse) *string { return v.Results }).(pulumi.StringPtrOutput)
}

type AutoScaleRunResponsePtrOutput struct{ *pulumi.OutputState }

func (AutoScaleRunResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AutoScaleRunResponse)(nil)).Elem()
}

func (o AutoScaleRunResponsePtrOutput) ToAutoScaleRunResponsePtrOutput() AutoScaleRunResponsePtrOutput {
	return o
}

func (o AutoScaleRunResponsePtrOutput) ToAutoScaleRunResponsePtrOutputWithContext(ctx context.Context) AutoScaleRunResponsePtrOutput {
	return o
}

func (o AutoScaleRunResponsePtrOutput) Elem() AutoScaleRunResponseOutput {
	return o.ApplyT(func(v *AutoScaleRunResponse) AutoScaleRunResponse { return *v }).(AutoScaleRunResponseOutput)
}

func (o AutoScaleRunResponsePtrOutput) Error() AutoScaleRunErrorResponsePtrOutput {
	return o.ApplyT(func(v *AutoScaleRunResponse) *AutoScaleRunErrorResponse {
		if v == nil {
			return nil
		}
		return v.Error
	}).(AutoScaleRunErrorResponsePtrOutput)
}

func (o AutoScaleRunResponsePtrOutput) EvaluationTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AutoScaleRunResponse) *string {
		if v == nil {
			return nil
		}
		return &v.EvaluationTime
	}).(pulumi.StringPtrOutput)
}

// Each variable value is returned in the form $variable=value, and variables are separated by semicolons.
func (o AutoScaleRunResponsePtrOutput) Results() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AutoScaleRunResponse) *string {
		if v == nil {
			return nil
		}
		return v.Results
	}).(pulumi.StringPtrOutput)
}

type AutoScaleSettings struct {
	// If omitted, the default value is 15 minutes (PT15M).
	EvaluationInterval *string `pulumi:"evaluationInterval"`
	Formula            string  `pulumi:"formula"`
}

// AutoScaleSettingsInput is an input type that accepts AutoScaleSettingsArgs and AutoScaleSettingsOutput values.
// You can construct a concrete instance of `AutoScaleSettingsInput` via:
//
//          AutoScaleSettingsArgs{...}
type AutoScaleSettingsInput interface {
	pulumi.Input

	ToAutoScaleSettingsOutput() AutoScaleSettingsOutput
	ToAutoScaleSettingsOutputWithContext(context.Context) AutoScaleSettingsOutput
}

type AutoScaleSettingsArgs struct {
	// If omitted, the default value is 15 minutes (PT15M).
	EvaluationInterval pulumi.StringPtrInput `pulumi:"evaluationInterval"`
	Formula            pulumi.StringInput    `pulumi:"formula"`
}

func (AutoScaleSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AutoScaleSettings)(nil)).Elem()
}

func (i AutoScaleSettingsArgs) ToAutoScaleSettingsOutput() AutoScaleSettingsOutput {
	return i.ToAutoScaleSettingsOutputWithContext(context.Background())
}

func (i AutoScaleSettingsArgs) ToAutoScaleSettingsOutputWithContext(ctx context.Context) AutoScaleSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AutoScaleSettingsOutput)
}

func (i AutoScaleSettingsArgs) ToAutoScaleSettingsPtrOutput() AutoScaleSettingsPtrOutput {
	return i.ToAutoScaleSettingsPtrOutputWithContext(context.Background())
}

func (i AutoScaleSettingsArgs) ToAutoScaleSettingsPtrOutputWithContext(ctx context.Context) AutoScaleSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AutoScaleSettingsOutput).ToAutoScaleSettingsPtrOutputWithContext(ctx)
}

// AutoScaleSettingsPtrInput is an input type that accepts AutoScaleSettingsArgs, AutoScaleSettingsPtr and AutoScaleSettingsPtrOutput values.
// You can construct a concrete instance of `AutoScaleSettingsPtrInput` via:
//
//          AutoScaleSettingsArgs{...}
//
//  or:
//
//          nil
type AutoScaleSettingsPtrInput interface {
	pulumi.Input

	ToAutoScaleSettingsPtrOutput() AutoScaleSettingsPtrOutput
	ToAutoScaleSettingsPtrOutputWithContext(context.Context) AutoScaleSettingsPtrOutput
}

type autoScaleSettingsPtrType AutoScaleSettingsArgs

func AutoScaleSettingsPtr(v *AutoScaleSettingsArgs) AutoScaleSettingsPtrInput {
	return (*autoScaleSettingsPtrType)(v)
}

func (*autoScaleSettingsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AutoScaleSettings)(nil)).Elem()
}

func (i *autoScaleSettingsPtrType) ToAutoScaleSettingsPtrOutput() AutoScaleSettingsPtrOutput {
	return i.ToAutoScaleSettingsPtrOutputWithContext(context.Background())
}

func (i *autoScaleSettingsPtrType) ToAutoScaleSettingsPtrOutputWithContext(ctx context.Context) AutoScaleSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AutoScaleSettingsPtrOutput)
}

type AutoScaleSettingsOutput struct{ *pulumi.OutputState }

func (AutoScaleSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AutoScaleSettings)(nil)).Elem()
}

func (o AutoScaleSettingsOutput) ToAutoScaleSettingsOutput() AutoScaleSettingsOutput {
	return o
}

func (o AutoScaleSettingsOutput) ToAutoScaleSettingsOutputWithContext(ctx context.Context) AutoScaleSettingsOutput {
	return o
}

func (o AutoScaleSettingsOutput) ToAutoScaleSettingsPtrOutput() AutoScaleSettingsPtrOutput {
	return o.ToAutoScaleSettingsPtrOutputWithContext(context.Background())
}

func (o AutoScaleSettingsOutput) ToAutoScaleSettingsPtrOutputWithContext(ctx context.Context) AutoScaleSettingsPtrOutput {
	return o.ApplyT(func(v AutoScaleSettings) *AutoScaleSettings {
		return &v
	}).(AutoScaleSettingsPtrOutput)
}

// If omitted, the default value is 15 minutes (PT15M).
func (o AutoScaleSettingsOutput) EvaluationInterval() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AutoScaleSettings) *string { return v.EvaluationInterval }).(pulumi.StringPtrOutput)
}

func (o AutoScaleSettingsOutput) Formula() pulumi.StringOutput {
	return o.ApplyT(func(v AutoScaleSettings) string { return v.Formula }).(pulumi.StringOutput)
}

type AutoScaleSettingsPtrOutput struct{ *pulumi.OutputState }

func (AutoScaleSettingsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AutoScaleSettings)(nil)).Elem()
}

func (o AutoScaleSettingsPtrOutput) ToAutoScaleSettingsPtrOutput() AutoScaleSettingsPtrOutput {
	return o
}

func (o AutoScaleSettingsPtrOutput) ToAutoScaleSettingsPtrOutputWithContext(ctx context.Context) AutoScaleSettingsPtrOutput {
	return o
}

func (o AutoScaleSettingsPtrOutput) Elem() AutoScaleSettingsOutput {
	return o.ApplyT(func(v *AutoScaleSettings) AutoScaleSettings { return *v }).(AutoScaleSettingsOutput)
}

// If omitted, the default value is 15 minutes (PT15M).
func (o AutoScaleSettingsPtrOutput) EvaluationInterval() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AutoScaleSettings) *string {
		if v == nil {
			return nil
		}
		return v.EvaluationInterval
	}).(pulumi.StringPtrOutput)
}

func (o AutoScaleSettingsPtrOutput) Formula() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AutoScaleSettings) *string {
		if v == nil {
			return nil
		}
		return &v.Formula
	}).(pulumi.StringPtrOutput)
}

type AutoScaleSettingsResponse struct {
	// If omitted, the default value is 15 minutes (PT15M).
	EvaluationInterval *string `pulumi:"evaluationInterval"`
	Formula            string  `pulumi:"formula"`
}

// AutoScaleSettingsResponseInput is an input type that accepts AutoScaleSettingsResponseArgs and AutoScaleSettingsResponseOutput values.
// You can construct a concrete instance of `AutoScaleSettingsResponseInput` via:
//
//          AutoScaleSettingsResponseArgs{...}
type AutoScaleSettingsResponseInput interface {
	pulumi.Input

	ToAutoScaleSettingsResponseOutput() AutoScaleSettingsResponseOutput
	ToAutoScaleSettingsResponseOutputWithContext(context.Context) AutoScaleSettingsResponseOutput
}

type AutoScaleSettingsResponseArgs struct {
	// If omitted, the default value is 15 minutes (PT15M).
	EvaluationInterval pulumi.StringPtrInput `pulumi:"evaluationInterval"`
	Formula            pulumi.StringInput    `pulumi:"formula"`
}

func (AutoScaleSettingsResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AutoScaleSettingsResponse)(nil)).Elem()
}

func (i AutoScaleSettingsResponseArgs) ToAutoScaleSettingsResponseOutput() AutoScaleSettingsResponseOutput {
	return i.ToAutoScaleSettingsResponseOutputWithContext(context.Background())
}

func (i AutoScaleSettingsResponseArgs) ToAutoScaleSettingsResponseOutputWithContext(ctx context.Context) AutoScaleSettingsResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AutoScaleSettingsResponseOutput)
}

func (i AutoScaleSettingsResponseArgs) ToAutoScaleSettingsResponsePtrOutput() AutoScaleSettingsResponsePtrOutput {
	return i.ToAutoScaleSettingsResponsePtrOutputWithContext(context.Background())
}

func (i AutoScaleSettingsResponseArgs) ToAutoScaleSettingsResponsePtrOutputWithContext(ctx context.Context) AutoScaleSettingsResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AutoScaleSettingsResponseOutput).ToAutoScaleSettingsResponsePtrOutputWithContext(ctx)
}

// AutoScaleSettingsResponsePtrInput is an input type that accepts AutoScaleSettingsResponseArgs, AutoScaleSettingsResponsePtr and AutoScaleSettingsResponsePtrOutput values.
// You can construct a concrete instance of `AutoScaleSettingsResponsePtrInput` via:
//
//          AutoScaleSettingsResponseArgs{...}
//
//  or:
//
//          nil
type AutoScaleSettingsResponsePtrInput interface {
	pulumi.Input

	ToAutoScaleSettingsResponsePtrOutput() AutoScaleSettingsResponsePtrOutput
	ToAutoScaleSettingsResponsePtrOutputWithContext(context.Context) AutoScaleSettingsResponsePtrOutput
}

type autoScaleSettingsResponsePtrType AutoScaleSettingsResponseArgs

func AutoScaleSettingsResponsePtr(v *AutoScaleSettingsResponseArgs) AutoScaleSettingsResponsePtrInput {
	return (*autoScaleSettingsResponsePtrType)(v)
}

func (*autoScaleSettingsResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AutoScaleSettingsResponse)(nil)).Elem()
}

func (i *autoScaleSettingsResponsePtrType) ToAutoScaleSettingsResponsePtrOutput() AutoScaleSettingsResponsePtrOutput {
	return i.ToAutoScaleSettingsResponsePtrOutputWithContext(context.Background())
}

func (i *autoScaleSettingsResponsePtrType) ToAutoScaleSettingsResponsePtrOutputWithContext(ctx context.Context) AutoScaleSettingsResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AutoScaleSettingsResponsePtrOutput)
}

type AutoScaleSettingsResponseOutput struct{ *pulumi.OutputState }

func (AutoScaleSettingsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AutoScaleSettingsResponse)(nil)).Elem()
}

func (o AutoScaleSettingsResponseOutput) ToAutoScaleSettingsResponseOutput() AutoScaleSettingsResponseOutput {
	return o
}

func (o AutoScaleSettingsResponseOutput) ToAutoScaleSettingsResponseOutputWithContext(ctx context.Context) AutoScaleSettingsResponseOutput {
	return o
}

func (o AutoScaleSettingsResponseOutput) ToAutoScaleSettingsResponsePtrOutput() AutoScaleSettingsResponsePtrOutput {
	return o.ToAutoScaleSettingsResponsePtrOutputWithContext(context.Background())
}

func (o AutoScaleSettingsResponseOutput) ToAutoScaleSettingsResponsePtrOutputWithContext(ctx context.Context) AutoScaleSettingsResponsePtrOutput {
	return o.ApplyT(func(v AutoScaleSettingsResponse) *AutoScaleSettingsResponse {
		return &v
	}).(AutoScaleSettingsResponsePtrOutput)
}

// If omitted, the default value is 15 minutes (PT15M).
func (o AutoScaleSettingsResponseOutput) EvaluationInterval() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AutoScaleSettingsResponse) *string { return v.EvaluationInterval }).(pulumi.StringPtrOutput)
}

func (o AutoScaleSettingsResponseOutput) Formula() pulumi.StringOutput {
	return o.ApplyT(func(v AutoScaleSettingsResponse) string { return v.Formula }).(pulumi.StringOutput)
}

type AutoScaleSettingsResponsePtrOutput struct{ *pulumi.OutputState }

func (AutoScaleSettingsResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AutoScaleSettingsResponse)(nil)).Elem()
}

func (o AutoScaleSettingsResponsePtrOutput) ToAutoScaleSettingsResponsePtrOutput() AutoScaleSettingsResponsePtrOutput {
	return o
}

func (o AutoScaleSettingsResponsePtrOutput) ToAutoScaleSettingsResponsePtrOutputWithContext(ctx context.Context) AutoScaleSettingsResponsePtrOutput {
	return o
}

func (o AutoScaleSettingsResponsePtrOutput) Elem() AutoScaleSettingsResponseOutput {
	return o.ApplyT(func(v *AutoScaleSettingsResponse) AutoScaleSettingsResponse { return *v }).(AutoScaleSettingsResponseOutput)
}

// If omitted, the default value is 15 minutes (PT15M).
func (o AutoScaleSettingsResponsePtrOutput) EvaluationInterval() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AutoScaleSettingsResponse) *string {
		if v == nil {
			return nil
		}
		return v.EvaluationInterval
	}).(pulumi.StringPtrOutput)
}

func (o AutoScaleSettingsResponsePtrOutput) Formula() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AutoScaleSettingsResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Formula
	}).(pulumi.StringPtrOutput)
}

// The properties related to the auto-storage account.
type AutoStorageBaseProperties struct {
	// The resource ID of the storage account to be used for auto-storage account.
	StorageAccountId string `pulumi:"storageAccountId"`
}

// AutoStorageBasePropertiesInput is an input type that accepts AutoStorageBasePropertiesArgs and AutoStorageBasePropertiesOutput values.
// You can construct a concrete instance of `AutoStorageBasePropertiesInput` via:
//
//          AutoStorageBasePropertiesArgs{...}
type AutoStorageBasePropertiesInput interface {
	pulumi.Input

	ToAutoStorageBasePropertiesOutput() AutoStorageBasePropertiesOutput
	ToAutoStorageBasePropertiesOutputWithContext(context.Context) AutoStorageBasePropertiesOutput
}

// The properties related to the auto-storage account.
type AutoStorageBasePropertiesArgs struct {
	// The resource ID of the storage account to be used for auto-storage account.
	StorageAccountId pulumi.StringInput `pulumi:"storageAccountId"`
}

func (AutoStorageBasePropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AutoStorageBaseProperties)(nil)).Elem()
}

func (i AutoStorageBasePropertiesArgs) ToAutoStorageBasePropertiesOutput() AutoStorageBasePropertiesOutput {
	return i.ToAutoStorageBasePropertiesOutputWithContext(context.Background())
}

func (i AutoStorageBasePropertiesArgs) ToAutoStorageBasePropertiesOutputWithContext(ctx context.Context) AutoStorageBasePropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AutoStorageBasePropertiesOutput)
}

func (i AutoStorageBasePropertiesArgs) ToAutoStorageBasePropertiesPtrOutput() AutoStorageBasePropertiesPtrOutput {
	return i.ToAutoStorageBasePropertiesPtrOutputWithContext(context.Background())
}

func (i AutoStorageBasePropertiesArgs) ToAutoStorageBasePropertiesPtrOutputWithContext(ctx context.Context) AutoStorageBasePropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AutoStorageBasePropertiesOutput).ToAutoStorageBasePropertiesPtrOutputWithContext(ctx)
}

// AutoStorageBasePropertiesPtrInput is an input type that accepts AutoStorageBasePropertiesArgs, AutoStorageBasePropertiesPtr and AutoStorageBasePropertiesPtrOutput values.
// You can construct a concrete instance of `AutoStorageBasePropertiesPtrInput` via:
//
//          AutoStorageBasePropertiesArgs{...}
//
//  or:
//
//          nil
type AutoStorageBasePropertiesPtrInput interface {
	pulumi.Input

	ToAutoStorageBasePropertiesPtrOutput() AutoStorageBasePropertiesPtrOutput
	ToAutoStorageBasePropertiesPtrOutputWithContext(context.Context) AutoStorageBasePropertiesPtrOutput
}

type autoStorageBasePropertiesPtrType AutoStorageBasePropertiesArgs

func AutoStorageBasePropertiesPtr(v *AutoStorageBasePropertiesArgs) AutoStorageBasePropertiesPtrInput {
	return (*autoStorageBasePropertiesPtrType)(v)
}

func (*autoStorageBasePropertiesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AutoStorageBaseProperties)(nil)).Elem()
}

func (i *autoStorageBasePropertiesPtrType) ToAutoStorageBasePropertiesPtrOutput() AutoStorageBasePropertiesPtrOutput {
	return i.ToAutoStorageBasePropertiesPtrOutputWithContext(context.Background())
}

func (i *autoStorageBasePropertiesPtrType) ToAutoStorageBasePropertiesPtrOutputWithContext(ctx context.Context) AutoStorageBasePropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AutoStorageBasePropertiesPtrOutput)
}

// The properties related to the auto-storage account.
type AutoStorageBasePropertiesOutput struct{ *pulumi.OutputState }

func (AutoStorageBasePropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AutoStorageBaseProperties)(nil)).Elem()
}

func (o AutoStorageBasePropertiesOutput) ToAutoStorageBasePropertiesOutput() AutoStorageBasePropertiesOutput {
	return o
}

func (o AutoStorageBasePropertiesOutput) ToAutoStorageBasePropertiesOutputWithContext(ctx context.Context) AutoStorageBasePropertiesOutput {
	return o
}

func (o AutoStorageBasePropertiesOutput) ToAutoStorageBasePropertiesPtrOutput() AutoStorageBasePropertiesPtrOutput {
	return o.ToAutoStorageBasePropertiesPtrOutputWithContext(context.Background())
}

func (o AutoStorageBasePropertiesOutput) ToAutoStorageBasePropertiesPtrOutputWithContext(ctx context.Context) AutoStorageBasePropertiesPtrOutput {
	return o.ApplyT(func(v AutoStorageBaseProperties) *AutoStorageBaseProperties {
		return &v
	}).(AutoStorageBasePropertiesPtrOutput)
}

// The resource ID of the storage account to be used for auto-storage account.
func (o AutoStorageBasePropertiesOutput) StorageAccountId() pulumi.StringOutput {
	return o.ApplyT(func(v AutoStorageBaseProperties) string { return v.StorageAccountId }).(pulumi.StringOutput)
}

type AutoStorageBasePropertiesPtrOutput struct{ *pulumi.OutputState }

func (AutoStorageBasePropertiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AutoStorageBaseProperties)(nil)).Elem()
}

func (o AutoStorageBasePropertiesPtrOutput) ToAutoStorageBasePropertiesPtrOutput() AutoStorageBasePropertiesPtrOutput {
	return o
}

func (o AutoStorageBasePropertiesPtrOutput) ToAutoStorageBasePropertiesPtrOutputWithContext(ctx context.Context) AutoStorageBasePropertiesPtrOutput {
	return o
}

func (o AutoStorageBasePropertiesPtrOutput) Elem() AutoStorageBasePropertiesOutput {
	return o.ApplyT(func(v *AutoStorageBaseProperties) AutoStorageBaseProperties { return *v }).(AutoStorageBasePropertiesOutput)
}

// The resource ID of the storage account to be used for auto-storage account.
func (o AutoStorageBasePropertiesPtrOutput) StorageAccountId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AutoStorageBaseProperties) *string {
		if v == nil {
			return nil
		}
		return &v.StorageAccountId
	}).(pulumi.StringPtrOutput)
}

// Contains information about the auto-storage account associated with a Batch account.
type AutoStoragePropertiesResponse struct {
	// The UTC time at which storage keys were last synchronized with the Batch account.
	LastKeySync string `pulumi:"lastKeySync"`
	// The resource ID of the storage account to be used for auto-storage account.
	StorageAccountId string `pulumi:"storageAccountId"`
}

// AutoStoragePropertiesResponseInput is an input type that accepts AutoStoragePropertiesResponseArgs and AutoStoragePropertiesResponseOutput values.
// You can construct a concrete instance of `AutoStoragePropertiesResponseInput` via:
//
//          AutoStoragePropertiesResponseArgs{...}
type AutoStoragePropertiesResponseInput interface {
	pulumi.Input

	ToAutoStoragePropertiesResponseOutput() AutoStoragePropertiesResponseOutput
	ToAutoStoragePropertiesResponseOutputWithContext(context.Context) AutoStoragePropertiesResponseOutput
}

// Contains information about the auto-storage account associated with a Batch account.
type AutoStoragePropertiesResponseArgs struct {
	// The UTC time at which storage keys were last synchronized with the Batch account.
	LastKeySync pulumi.StringInput `pulumi:"lastKeySync"`
	// The resource ID of the storage account to be used for auto-storage account.
	StorageAccountId pulumi.StringInput `pulumi:"storageAccountId"`
}

func (AutoStoragePropertiesResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AutoStoragePropertiesResponse)(nil)).Elem()
}

func (i AutoStoragePropertiesResponseArgs) ToAutoStoragePropertiesResponseOutput() AutoStoragePropertiesResponseOutput {
	return i.ToAutoStoragePropertiesResponseOutputWithContext(context.Background())
}

func (i AutoStoragePropertiesResponseArgs) ToAutoStoragePropertiesResponseOutputWithContext(ctx context.Context) AutoStoragePropertiesResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AutoStoragePropertiesResponseOutput)
}

func (i AutoStoragePropertiesResponseArgs) ToAutoStoragePropertiesResponsePtrOutput() AutoStoragePropertiesResponsePtrOutput {
	return i.ToAutoStoragePropertiesResponsePtrOutputWithContext(context.Background())
}

func (i AutoStoragePropertiesResponseArgs) ToAutoStoragePropertiesResponsePtrOutputWithContext(ctx context.Context) AutoStoragePropertiesResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AutoStoragePropertiesResponseOutput).ToAutoStoragePropertiesResponsePtrOutputWithContext(ctx)
}

// AutoStoragePropertiesResponsePtrInput is an input type that accepts AutoStoragePropertiesResponseArgs, AutoStoragePropertiesResponsePtr and AutoStoragePropertiesResponsePtrOutput values.
// You can construct a concrete instance of `AutoStoragePropertiesResponsePtrInput` via:
//
//          AutoStoragePropertiesResponseArgs{...}
//
//  or:
//
//          nil
type AutoStoragePropertiesResponsePtrInput interface {
	pulumi.Input

	ToAutoStoragePropertiesResponsePtrOutput() AutoStoragePropertiesResponsePtrOutput
	ToAutoStoragePropertiesResponsePtrOutputWithContext(context.Context) AutoStoragePropertiesResponsePtrOutput
}

type autoStoragePropertiesResponsePtrType AutoStoragePropertiesResponseArgs

func AutoStoragePropertiesResponsePtr(v *AutoStoragePropertiesResponseArgs) AutoStoragePropertiesResponsePtrInput {
	return (*autoStoragePropertiesResponsePtrType)(v)
}

func (*autoStoragePropertiesResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AutoStoragePropertiesResponse)(nil)).Elem()
}

func (i *autoStoragePropertiesResponsePtrType) ToAutoStoragePropertiesResponsePtrOutput() AutoStoragePropertiesResponsePtrOutput {
	return i.ToAutoStoragePropertiesResponsePtrOutputWithContext(context.Background())
}

func (i *autoStoragePropertiesResponsePtrType) ToAutoStoragePropertiesResponsePtrOutputWithContext(ctx context.Context) AutoStoragePropertiesResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AutoStoragePropertiesResponsePtrOutput)
}

// Contains information about the auto-storage account associated with a Batch account.
type AutoStoragePropertiesResponseOutput struct{ *pulumi.OutputState }

func (AutoStoragePropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AutoStoragePropertiesResponse)(nil)).Elem()
}

func (o AutoStoragePropertiesResponseOutput) ToAutoStoragePropertiesResponseOutput() AutoStoragePropertiesResponseOutput {
	return o
}

func (o AutoStoragePropertiesResponseOutput) ToAutoStoragePropertiesResponseOutputWithContext(ctx context.Context) AutoStoragePropertiesResponseOutput {
	return o
}

func (o AutoStoragePropertiesResponseOutput) ToAutoStoragePropertiesResponsePtrOutput() AutoStoragePropertiesResponsePtrOutput {
	return o.ToAutoStoragePropertiesResponsePtrOutputWithContext(context.Background())
}

func (o AutoStoragePropertiesResponseOutput) ToAutoStoragePropertiesResponsePtrOutputWithContext(ctx context.Context) AutoStoragePropertiesResponsePtrOutput {
	return o.ApplyT(func(v AutoStoragePropertiesResponse) *AutoStoragePropertiesResponse {
		return &v
	}).(AutoStoragePropertiesResponsePtrOutput)
}

// The UTC time at which storage keys were last synchronized with the Batch account.
func (o AutoStoragePropertiesResponseOutput) LastKeySync() pulumi.StringOutput {
	return o.ApplyT(func(v AutoStoragePropertiesResponse) string { return v.LastKeySync }).(pulumi.StringOutput)
}

// The resource ID of the storage account to be used for auto-storage account.
func (o AutoStoragePropertiesResponseOutput) StorageAccountId() pulumi.StringOutput {
	return o.ApplyT(func(v AutoStoragePropertiesResponse) string { return v.StorageAccountId }).(pulumi.StringOutput)
}

type AutoStoragePropertiesResponsePtrOutput struct{ *pulumi.OutputState }

func (AutoStoragePropertiesResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AutoStoragePropertiesResponse)(nil)).Elem()
}

func (o AutoStoragePropertiesResponsePtrOutput) ToAutoStoragePropertiesResponsePtrOutput() AutoStoragePropertiesResponsePtrOutput {
	return o
}

func (o AutoStoragePropertiesResponsePtrOutput) ToAutoStoragePropertiesResponsePtrOutputWithContext(ctx context.Context) AutoStoragePropertiesResponsePtrOutput {
	return o
}

func (o AutoStoragePropertiesResponsePtrOutput) Elem() AutoStoragePropertiesResponseOutput {
	return o.ApplyT(func(v *AutoStoragePropertiesResponse) AutoStoragePropertiesResponse { return *v }).(AutoStoragePropertiesResponseOutput)
}

// The UTC time at which storage keys were last synchronized with the Batch account.
func (o AutoStoragePropertiesResponsePtrOutput) LastKeySync() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AutoStoragePropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return &v.LastKeySync
	}).(pulumi.StringPtrOutput)
}

// The resource ID of the storage account to be used for auto-storage account.
func (o AutoStoragePropertiesResponsePtrOutput) StorageAccountId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AutoStoragePropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return &v.StorageAccountId
	}).(pulumi.StringPtrOutput)
}

type AutoUserSpecification struct {
	// The default value is nonAdmin.
	ElevationLevel *string `pulumi:"elevationLevel"`
	// The default value is Pool. If the pool is running Windows a value of Task should be specified if stricter isolation between tasks is required. For example, if the task mutates the registry in a way which could impact other tasks, or if certificates have been specified on the pool which should not be accessible by normal tasks but should be accessible by start tasks.
	Scope *string `pulumi:"scope"`
}

// AutoUserSpecificationInput is an input type that accepts AutoUserSpecificationArgs and AutoUserSpecificationOutput values.
// You can construct a concrete instance of `AutoUserSpecificationInput` via:
//
//          AutoUserSpecificationArgs{...}
type AutoUserSpecificationInput interface {
	pulumi.Input

	ToAutoUserSpecificationOutput() AutoUserSpecificationOutput
	ToAutoUserSpecificationOutputWithContext(context.Context) AutoUserSpecificationOutput
}

type AutoUserSpecificationArgs struct {
	// The default value is nonAdmin.
	ElevationLevel pulumi.StringPtrInput `pulumi:"elevationLevel"`
	// The default value is Pool. If the pool is running Windows a value of Task should be specified if stricter isolation between tasks is required. For example, if the task mutates the registry in a way which could impact other tasks, or if certificates have been specified on the pool which should not be accessible by normal tasks but should be accessible by start tasks.
	Scope pulumi.StringPtrInput `pulumi:"scope"`
}

func (AutoUserSpecificationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AutoUserSpecification)(nil)).Elem()
}

func (i AutoUserSpecificationArgs) ToAutoUserSpecificationOutput() AutoUserSpecificationOutput {
	return i.ToAutoUserSpecificationOutputWithContext(context.Background())
}

func (i AutoUserSpecificationArgs) ToAutoUserSpecificationOutputWithContext(ctx context.Context) AutoUserSpecificationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AutoUserSpecificationOutput)
}

func (i AutoUserSpecificationArgs) ToAutoUserSpecificationPtrOutput() AutoUserSpecificationPtrOutput {
	return i.ToAutoUserSpecificationPtrOutputWithContext(context.Background())
}

func (i AutoUserSpecificationArgs) ToAutoUserSpecificationPtrOutputWithContext(ctx context.Context) AutoUserSpecificationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AutoUserSpecificationOutput).ToAutoUserSpecificationPtrOutputWithContext(ctx)
}

// AutoUserSpecificationPtrInput is an input type that accepts AutoUserSpecificationArgs, AutoUserSpecificationPtr and AutoUserSpecificationPtrOutput values.
// You can construct a concrete instance of `AutoUserSpecificationPtrInput` via:
//
//          AutoUserSpecificationArgs{...}
//
//  or:
//
//          nil
type AutoUserSpecificationPtrInput interface {
	pulumi.Input

	ToAutoUserSpecificationPtrOutput() AutoUserSpecificationPtrOutput
	ToAutoUserSpecificationPtrOutputWithContext(context.Context) AutoUserSpecificationPtrOutput
}

type autoUserSpecificationPtrType AutoUserSpecificationArgs

func AutoUserSpecificationPtr(v *AutoUserSpecificationArgs) AutoUserSpecificationPtrInput {
	return (*autoUserSpecificationPtrType)(v)
}

func (*autoUserSpecificationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AutoUserSpecification)(nil)).Elem()
}

func (i *autoUserSpecificationPtrType) ToAutoUserSpecificationPtrOutput() AutoUserSpecificationPtrOutput {
	return i.ToAutoUserSpecificationPtrOutputWithContext(context.Background())
}

func (i *autoUserSpecificationPtrType) ToAutoUserSpecificationPtrOutputWithContext(ctx context.Context) AutoUserSpecificationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AutoUserSpecificationPtrOutput)
}

type AutoUserSpecificationOutput struct{ *pulumi.OutputState }

func (AutoUserSpecificationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AutoUserSpecification)(nil)).Elem()
}

func (o AutoUserSpecificationOutput) ToAutoUserSpecificationOutput() AutoUserSpecificationOutput {
	return o
}

func (o AutoUserSpecificationOutput) ToAutoUserSpecificationOutputWithContext(ctx context.Context) AutoUserSpecificationOutput {
	return o
}

func (o AutoUserSpecificationOutput) ToAutoUserSpecificationPtrOutput() AutoUserSpecificationPtrOutput {
	return o.ToAutoUserSpecificationPtrOutputWithContext(context.Background())
}

func (o AutoUserSpecificationOutput) ToAutoUserSpecificationPtrOutputWithContext(ctx context.Context) AutoUserSpecificationPtrOutput {
	return o.ApplyT(func(v AutoUserSpecification) *AutoUserSpecification {
		return &v
	}).(AutoUserSpecificationPtrOutput)
}

// The default value is nonAdmin.
func (o AutoUserSpecificationOutput) ElevationLevel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AutoUserSpecification) *string { return v.ElevationLevel }).(pulumi.StringPtrOutput)
}

// The default value is Pool. If the pool is running Windows a value of Task should be specified if stricter isolation between tasks is required. For example, if the task mutates the registry in a way which could impact other tasks, or if certificates have been specified on the pool which should not be accessible by normal tasks but should be accessible by start tasks.
func (o AutoUserSpecificationOutput) Scope() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AutoUserSpecification) *string { return v.Scope }).(pulumi.StringPtrOutput)
}

type AutoUserSpecificationPtrOutput struct{ *pulumi.OutputState }

func (AutoUserSpecificationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AutoUserSpecification)(nil)).Elem()
}

func (o AutoUserSpecificationPtrOutput) ToAutoUserSpecificationPtrOutput() AutoUserSpecificationPtrOutput {
	return o
}

func (o AutoUserSpecificationPtrOutput) ToAutoUserSpecificationPtrOutputWithContext(ctx context.Context) AutoUserSpecificationPtrOutput {
	return o
}

func (o AutoUserSpecificationPtrOutput) Elem() AutoUserSpecificationOutput {
	return o.ApplyT(func(v *AutoUserSpecification) AutoUserSpecification { return *v }).(AutoUserSpecificationOutput)
}

// The default value is nonAdmin.
func (o AutoUserSpecificationPtrOutput) ElevationLevel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AutoUserSpecification) *string {
		if v == nil {
			return nil
		}
		return v.ElevationLevel
	}).(pulumi.StringPtrOutput)
}

// The default value is Pool. If the pool is running Windows a value of Task should be specified if stricter isolation between tasks is required. For example, if the task mutates the registry in a way which could impact other tasks, or if certificates have been specified on the pool which should not be accessible by normal tasks but should be accessible by start tasks.
func (o AutoUserSpecificationPtrOutput) Scope() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AutoUserSpecification) *string {
		if v == nil {
			return nil
		}
		return v.Scope
	}).(pulumi.StringPtrOutput)
}

type AutoUserSpecificationResponse struct {
	// The default value is nonAdmin.
	ElevationLevel *string `pulumi:"elevationLevel"`
	// The default value is Pool. If the pool is running Windows a value of Task should be specified if stricter isolation between tasks is required. For example, if the task mutates the registry in a way which could impact other tasks, or if certificates have been specified on the pool which should not be accessible by normal tasks but should be accessible by start tasks.
	Scope *string `pulumi:"scope"`
}

// AutoUserSpecificationResponseInput is an input type that accepts AutoUserSpecificationResponseArgs and AutoUserSpecificationResponseOutput values.
// You can construct a concrete instance of `AutoUserSpecificationResponseInput` via:
//
//          AutoUserSpecificationResponseArgs{...}
type AutoUserSpecificationResponseInput interface {
	pulumi.Input

	ToAutoUserSpecificationResponseOutput() AutoUserSpecificationResponseOutput
	ToAutoUserSpecificationResponseOutputWithContext(context.Context) AutoUserSpecificationResponseOutput
}

type AutoUserSpecificationResponseArgs struct {
	// The default value is nonAdmin.
	ElevationLevel pulumi.StringPtrInput `pulumi:"elevationLevel"`
	// The default value is Pool. If the pool is running Windows a value of Task should be specified if stricter isolation between tasks is required. For example, if the task mutates the registry in a way which could impact other tasks, or if certificates have been specified on the pool which should not be accessible by normal tasks but should be accessible by start tasks.
	Scope pulumi.StringPtrInput `pulumi:"scope"`
}

func (AutoUserSpecificationResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AutoUserSpecificationResponse)(nil)).Elem()
}

func (i AutoUserSpecificationResponseArgs) ToAutoUserSpecificationResponseOutput() AutoUserSpecificationResponseOutput {
	return i.ToAutoUserSpecificationResponseOutputWithContext(context.Background())
}

func (i AutoUserSpecificationResponseArgs) ToAutoUserSpecificationResponseOutputWithContext(ctx context.Context) AutoUserSpecificationResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AutoUserSpecificationResponseOutput)
}

func (i AutoUserSpecificationResponseArgs) ToAutoUserSpecificationResponsePtrOutput() AutoUserSpecificationResponsePtrOutput {
	return i.ToAutoUserSpecificationResponsePtrOutputWithContext(context.Background())
}

func (i AutoUserSpecificationResponseArgs) ToAutoUserSpecificationResponsePtrOutputWithContext(ctx context.Context) AutoUserSpecificationResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AutoUserSpecificationResponseOutput).ToAutoUserSpecificationResponsePtrOutputWithContext(ctx)
}

// AutoUserSpecificationResponsePtrInput is an input type that accepts AutoUserSpecificationResponseArgs, AutoUserSpecificationResponsePtr and AutoUserSpecificationResponsePtrOutput values.
// You can construct a concrete instance of `AutoUserSpecificationResponsePtrInput` via:
//
//          AutoUserSpecificationResponseArgs{...}
//
//  or:
//
//          nil
type AutoUserSpecificationResponsePtrInput interface {
	pulumi.Input

	ToAutoUserSpecificationResponsePtrOutput() AutoUserSpecificationResponsePtrOutput
	ToAutoUserSpecificationResponsePtrOutputWithContext(context.Context) AutoUserSpecificationResponsePtrOutput
}

type autoUserSpecificationResponsePtrType AutoUserSpecificationResponseArgs

func AutoUserSpecificationResponsePtr(v *AutoUserSpecificationResponseArgs) AutoUserSpecificationResponsePtrInput {
	return (*autoUserSpecificationResponsePtrType)(v)
}

func (*autoUserSpecificationResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AutoUserSpecificationResponse)(nil)).Elem()
}

func (i *autoUserSpecificationResponsePtrType) ToAutoUserSpecificationResponsePtrOutput() AutoUserSpecificationResponsePtrOutput {
	return i.ToAutoUserSpecificationResponsePtrOutputWithContext(context.Background())
}

func (i *autoUserSpecificationResponsePtrType) ToAutoUserSpecificationResponsePtrOutputWithContext(ctx context.Context) AutoUserSpecificationResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AutoUserSpecificationResponsePtrOutput)
}

type AutoUserSpecificationResponseOutput struct{ *pulumi.OutputState }

func (AutoUserSpecificationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AutoUserSpecificationResponse)(nil)).Elem()
}

func (o AutoUserSpecificationResponseOutput) ToAutoUserSpecificationResponseOutput() AutoUserSpecificationResponseOutput {
	return o
}

func (o AutoUserSpecificationResponseOutput) ToAutoUserSpecificationResponseOutputWithContext(ctx context.Context) AutoUserSpecificationResponseOutput {
	return o
}

func (o AutoUserSpecificationResponseOutput) ToAutoUserSpecificationResponsePtrOutput() AutoUserSpecificationResponsePtrOutput {
	return o.ToAutoUserSpecificationResponsePtrOutputWithContext(context.Background())
}

func (o AutoUserSpecificationResponseOutput) ToAutoUserSpecificationResponsePtrOutputWithContext(ctx context.Context) AutoUserSpecificationResponsePtrOutput {
	return o.ApplyT(func(v AutoUserSpecificationResponse) *AutoUserSpecificationResponse {
		return &v
	}).(AutoUserSpecificationResponsePtrOutput)
}

// The default value is nonAdmin.
func (o AutoUserSpecificationResponseOutput) ElevationLevel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AutoUserSpecificationResponse) *string { return v.ElevationLevel }).(pulumi.StringPtrOutput)
}

// The default value is Pool. If the pool is running Windows a value of Task should be specified if stricter isolation between tasks is required. For example, if the task mutates the registry in a way which could impact other tasks, or if certificates have been specified on the pool which should not be accessible by normal tasks but should be accessible by start tasks.
func (o AutoUserSpecificationResponseOutput) Scope() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AutoUserSpecificationResponse) *string { return v.Scope }).(pulumi.StringPtrOutput)
}

type AutoUserSpecificationResponsePtrOutput struct{ *pulumi.OutputState }

func (AutoUserSpecificationResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AutoUserSpecificationResponse)(nil)).Elem()
}

func (o AutoUserSpecificationResponsePtrOutput) ToAutoUserSpecificationResponsePtrOutput() AutoUserSpecificationResponsePtrOutput {
	return o
}

func (o AutoUserSpecificationResponsePtrOutput) ToAutoUserSpecificationResponsePtrOutputWithContext(ctx context.Context) AutoUserSpecificationResponsePtrOutput {
	return o
}

func (o AutoUserSpecificationResponsePtrOutput) Elem() AutoUserSpecificationResponseOutput {
	return o.ApplyT(func(v *AutoUserSpecificationResponse) AutoUserSpecificationResponse { return *v }).(AutoUserSpecificationResponseOutput)
}

// The default value is nonAdmin.
func (o AutoUserSpecificationResponsePtrOutput) ElevationLevel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AutoUserSpecificationResponse) *string {
		if v == nil {
			return nil
		}
		return v.ElevationLevel
	}).(pulumi.StringPtrOutput)
}

// The default value is Pool. If the pool is running Windows a value of Task should be specified if stricter isolation between tasks is required. For example, if the task mutates the registry in a way which could impact other tasks, or if certificates have been specified on the pool which should not be accessible by normal tasks but should be accessible by start tasks.
func (o AutoUserSpecificationResponsePtrOutput) Scope() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AutoUserSpecificationResponse) *string {
		if v == nil {
			return nil
		}
		return v.Scope
	}).(pulumi.StringPtrOutput)
}

type AzureBlobFileSystemConfiguration struct {
	// This property is mutually exclusive with sasKey and one must be specified.
	AccountKey  *string `pulumi:"accountKey"`
	AccountName string  `pulumi:"accountName"`
	// These are 'net use' options in Windows and 'mount' options in Linux.
	BlobfuseOptions *string `pulumi:"blobfuseOptions"`
	ContainerName   string  `pulumi:"containerName"`
	// All file systems are mounted relative to the Batch mounts directory, accessible via the AZ_BATCH_NODE_MOUNTS_DIR environment variable.
	RelativeMountPath string `pulumi:"relativeMountPath"`
	// This property is mutually exclusive with accountKey and one must be specified.
	SasKey *string `pulumi:"sasKey"`
}

// AzureBlobFileSystemConfigurationInput is an input type that accepts AzureBlobFileSystemConfigurationArgs and AzureBlobFileSystemConfigurationOutput values.
// You can construct a concrete instance of `AzureBlobFileSystemConfigurationInput` via:
//
//          AzureBlobFileSystemConfigurationArgs{...}
type AzureBlobFileSystemConfigurationInput interface {
	pulumi.Input

	ToAzureBlobFileSystemConfigurationOutput() AzureBlobFileSystemConfigurationOutput
	ToAzureBlobFileSystemConfigurationOutputWithContext(context.Context) AzureBlobFileSystemConfigurationOutput
}

type AzureBlobFileSystemConfigurationArgs struct {
	// This property is mutually exclusive with sasKey and one must be specified.
	AccountKey  pulumi.StringPtrInput `pulumi:"accountKey"`
	AccountName pulumi.StringInput    `pulumi:"accountName"`
	// These are 'net use' options in Windows and 'mount' options in Linux.
	BlobfuseOptions pulumi.StringPtrInput `pulumi:"blobfuseOptions"`
	ContainerName   pulumi.StringInput    `pulumi:"containerName"`
	// All file systems are mounted relative to the Batch mounts directory, accessible via the AZ_BATCH_NODE_MOUNTS_DIR environment variable.
	RelativeMountPath pulumi.StringInput `pulumi:"relativeMountPath"`
	// This property is mutually exclusive with accountKey and one must be specified.
	SasKey pulumi.StringPtrInput `pulumi:"sasKey"`
}

func (AzureBlobFileSystemConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureBlobFileSystemConfiguration)(nil)).Elem()
}

func (i AzureBlobFileSystemConfigurationArgs) ToAzureBlobFileSystemConfigurationOutput() AzureBlobFileSystemConfigurationOutput {
	return i.ToAzureBlobFileSystemConfigurationOutputWithContext(context.Background())
}

func (i AzureBlobFileSystemConfigurationArgs) ToAzureBlobFileSystemConfigurationOutputWithContext(ctx context.Context) AzureBlobFileSystemConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzureBlobFileSystemConfigurationOutput)
}

func (i AzureBlobFileSystemConfigurationArgs) ToAzureBlobFileSystemConfigurationPtrOutput() AzureBlobFileSystemConfigurationPtrOutput {
	return i.ToAzureBlobFileSystemConfigurationPtrOutputWithContext(context.Background())
}

func (i AzureBlobFileSystemConfigurationArgs) ToAzureBlobFileSystemConfigurationPtrOutputWithContext(ctx context.Context) AzureBlobFileSystemConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzureBlobFileSystemConfigurationOutput).ToAzureBlobFileSystemConfigurationPtrOutputWithContext(ctx)
}

// AzureBlobFileSystemConfigurationPtrInput is an input type that accepts AzureBlobFileSystemConfigurationArgs, AzureBlobFileSystemConfigurationPtr and AzureBlobFileSystemConfigurationPtrOutput values.
// You can construct a concrete instance of `AzureBlobFileSystemConfigurationPtrInput` via:
//
//          AzureBlobFileSystemConfigurationArgs{...}
//
//  or:
//
//          nil
type AzureBlobFileSystemConfigurationPtrInput interface {
	pulumi.Input

	ToAzureBlobFileSystemConfigurationPtrOutput() AzureBlobFileSystemConfigurationPtrOutput
	ToAzureBlobFileSystemConfigurationPtrOutputWithContext(context.Context) AzureBlobFileSystemConfigurationPtrOutput
}

type azureBlobFileSystemConfigurationPtrType AzureBlobFileSystemConfigurationArgs

func AzureBlobFileSystemConfigurationPtr(v *AzureBlobFileSystemConfigurationArgs) AzureBlobFileSystemConfigurationPtrInput {
	return (*azureBlobFileSystemConfigurationPtrType)(v)
}

func (*azureBlobFileSystemConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AzureBlobFileSystemConfiguration)(nil)).Elem()
}

func (i *azureBlobFileSystemConfigurationPtrType) ToAzureBlobFileSystemConfigurationPtrOutput() AzureBlobFileSystemConfigurationPtrOutput {
	return i.ToAzureBlobFileSystemConfigurationPtrOutputWithContext(context.Background())
}

func (i *azureBlobFileSystemConfigurationPtrType) ToAzureBlobFileSystemConfigurationPtrOutputWithContext(ctx context.Context) AzureBlobFileSystemConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzureBlobFileSystemConfigurationPtrOutput)
}

type AzureBlobFileSystemConfigurationOutput struct{ *pulumi.OutputState }

func (AzureBlobFileSystemConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureBlobFileSystemConfiguration)(nil)).Elem()
}

func (o AzureBlobFileSystemConfigurationOutput) ToAzureBlobFileSystemConfigurationOutput() AzureBlobFileSystemConfigurationOutput {
	return o
}

func (o AzureBlobFileSystemConfigurationOutput) ToAzureBlobFileSystemConfigurationOutputWithContext(ctx context.Context) AzureBlobFileSystemConfigurationOutput {
	return o
}

func (o AzureBlobFileSystemConfigurationOutput) ToAzureBlobFileSystemConfigurationPtrOutput() AzureBlobFileSystemConfigurationPtrOutput {
	return o.ToAzureBlobFileSystemConfigurationPtrOutputWithContext(context.Background())
}

func (o AzureBlobFileSystemConfigurationOutput) ToAzureBlobFileSystemConfigurationPtrOutputWithContext(ctx context.Context) AzureBlobFileSystemConfigurationPtrOutput {
	return o.ApplyT(func(v AzureBlobFileSystemConfiguration) *AzureBlobFileSystemConfiguration {
		return &v
	}).(AzureBlobFileSystemConfigurationPtrOutput)
}

// This property is mutually exclusive with sasKey and one must be specified.
func (o AzureBlobFileSystemConfigurationOutput) AccountKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureBlobFileSystemConfiguration) *string { return v.AccountKey }).(pulumi.StringPtrOutput)
}

func (o AzureBlobFileSystemConfigurationOutput) AccountName() pulumi.StringOutput {
	return o.ApplyT(func(v AzureBlobFileSystemConfiguration) string { return v.AccountName }).(pulumi.StringOutput)
}

// These are 'net use' options in Windows and 'mount' options in Linux.
func (o AzureBlobFileSystemConfigurationOutput) BlobfuseOptions() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureBlobFileSystemConfiguration) *string { return v.BlobfuseOptions }).(pulumi.StringPtrOutput)
}

func (o AzureBlobFileSystemConfigurationOutput) ContainerName() pulumi.StringOutput {
	return o.ApplyT(func(v AzureBlobFileSystemConfiguration) string { return v.ContainerName }).(pulumi.StringOutput)
}

// All file systems are mounted relative to the Batch mounts directory, accessible via the AZ_BATCH_NODE_MOUNTS_DIR environment variable.
func (o AzureBlobFileSystemConfigurationOutput) RelativeMountPath() pulumi.StringOutput {
	return o.ApplyT(func(v AzureBlobFileSystemConfiguration) string { return v.RelativeMountPath }).(pulumi.StringOutput)
}

// This property is mutually exclusive with accountKey and one must be specified.
func (o AzureBlobFileSystemConfigurationOutput) SasKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureBlobFileSystemConfiguration) *string { return v.SasKey }).(pulumi.StringPtrOutput)
}

type AzureBlobFileSystemConfigurationPtrOutput struct{ *pulumi.OutputState }

func (AzureBlobFileSystemConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AzureBlobFileSystemConfiguration)(nil)).Elem()
}

func (o AzureBlobFileSystemConfigurationPtrOutput) ToAzureBlobFileSystemConfigurationPtrOutput() AzureBlobFileSystemConfigurationPtrOutput {
	return o
}

func (o AzureBlobFileSystemConfigurationPtrOutput) ToAzureBlobFileSystemConfigurationPtrOutputWithContext(ctx context.Context) AzureBlobFileSystemConfigurationPtrOutput {
	return o
}

func (o AzureBlobFileSystemConfigurationPtrOutput) Elem() AzureBlobFileSystemConfigurationOutput {
	return o.ApplyT(func(v *AzureBlobFileSystemConfiguration) AzureBlobFileSystemConfiguration { return *v }).(AzureBlobFileSystemConfigurationOutput)
}

// This property is mutually exclusive with sasKey and one must be specified.
func (o AzureBlobFileSystemConfigurationPtrOutput) AccountKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AzureBlobFileSystemConfiguration) *string {
		if v == nil {
			return nil
		}
		return v.AccountKey
	}).(pulumi.StringPtrOutput)
}

func (o AzureBlobFileSystemConfigurationPtrOutput) AccountName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AzureBlobFileSystemConfiguration) *string {
		if v == nil {
			return nil
		}
		return &v.AccountName
	}).(pulumi.StringPtrOutput)
}

// These are 'net use' options in Windows and 'mount' options in Linux.
func (o AzureBlobFileSystemConfigurationPtrOutput) BlobfuseOptions() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AzureBlobFileSystemConfiguration) *string {
		if v == nil {
			return nil
		}
		return v.BlobfuseOptions
	}).(pulumi.StringPtrOutput)
}

func (o AzureBlobFileSystemConfigurationPtrOutput) ContainerName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AzureBlobFileSystemConfiguration) *string {
		if v == nil {
			return nil
		}
		return &v.ContainerName
	}).(pulumi.StringPtrOutput)
}

// All file systems are mounted relative to the Batch mounts directory, accessible via the AZ_BATCH_NODE_MOUNTS_DIR environment variable.
func (o AzureBlobFileSystemConfigurationPtrOutput) RelativeMountPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AzureBlobFileSystemConfiguration) *string {
		if v == nil {
			return nil
		}
		return &v.RelativeMountPath
	}).(pulumi.StringPtrOutput)
}

// This property is mutually exclusive with accountKey and one must be specified.
func (o AzureBlobFileSystemConfigurationPtrOutput) SasKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AzureBlobFileSystemConfiguration) *string {
		if v == nil {
			return nil
		}
		return v.SasKey
	}).(pulumi.StringPtrOutput)
}

type AzureBlobFileSystemConfigurationResponse struct {
	// This property is mutually exclusive with sasKey and one must be specified.
	AccountKey  *string `pulumi:"accountKey"`
	AccountName string  `pulumi:"accountName"`
	// These are 'net use' options in Windows and 'mount' options in Linux.
	BlobfuseOptions *string `pulumi:"blobfuseOptions"`
	ContainerName   string  `pulumi:"containerName"`
	// All file systems are mounted relative to the Batch mounts directory, accessible via the AZ_BATCH_NODE_MOUNTS_DIR environment variable.
	RelativeMountPath string `pulumi:"relativeMountPath"`
	// This property is mutually exclusive with accountKey and one must be specified.
	SasKey *string `pulumi:"sasKey"`
}

// AzureBlobFileSystemConfigurationResponseInput is an input type that accepts AzureBlobFileSystemConfigurationResponseArgs and AzureBlobFileSystemConfigurationResponseOutput values.
// You can construct a concrete instance of `AzureBlobFileSystemConfigurationResponseInput` via:
//
//          AzureBlobFileSystemConfigurationResponseArgs{...}
type AzureBlobFileSystemConfigurationResponseInput interface {
	pulumi.Input

	ToAzureBlobFileSystemConfigurationResponseOutput() AzureBlobFileSystemConfigurationResponseOutput
	ToAzureBlobFileSystemConfigurationResponseOutputWithContext(context.Context) AzureBlobFileSystemConfigurationResponseOutput
}

type AzureBlobFileSystemConfigurationResponseArgs struct {
	// This property is mutually exclusive with sasKey and one must be specified.
	AccountKey  pulumi.StringPtrInput `pulumi:"accountKey"`
	AccountName pulumi.StringInput    `pulumi:"accountName"`
	// These are 'net use' options in Windows and 'mount' options in Linux.
	BlobfuseOptions pulumi.StringPtrInput `pulumi:"blobfuseOptions"`
	ContainerName   pulumi.StringInput    `pulumi:"containerName"`
	// All file systems are mounted relative to the Batch mounts directory, accessible via the AZ_BATCH_NODE_MOUNTS_DIR environment variable.
	RelativeMountPath pulumi.StringInput `pulumi:"relativeMountPath"`
	// This property is mutually exclusive with accountKey and one must be specified.
	SasKey pulumi.StringPtrInput `pulumi:"sasKey"`
}

func (AzureBlobFileSystemConfigurationResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureBlobFileSystemConfigurationResponse)(nil)).Elem()
}

func (i AzureBlobFileSystemConfigurationResponseArgs) ToAzureBlobFileSystemConfigurationResponseOutput() AzureBlobFileSystemConfigurationResponseOutput {
	return i.ToAzureBlobFileSystemConfigurationResponseOutputWithContext(context.Background())
}

func (i AzureBlobFileSystemConfigurationResponseArgs) ToAzureBlobFileSystemConfigurationResponseOutputWithContext(ctx context.Context) AzureBlobFileSystemConfigurationResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzureBlobFileSystemConfigurationResponseOutput)
}

func (i AzureBlobFileSystemConfigurationResponseArgs) ToAzureBlobFileSystemConfigurationResponsePtrOutput() AzureBlobFileSystemConfigurationResponsePtrOutput {
	return i.ToAzureBlobFileSystemConfigurationResponsePtrOutputWithContext(context.Background())
}

func (i AzureBlobFileSystemConfigurationResponseArgs) ToAzureBlobFileSystemConfigurationResponsePtrOutputWithContext(ctx context.Context) AzureBlobFileSystemConfigurationResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzureBlobFileSystemConfigurationResponseOutput).ToAzureBlobFileSystemConfigurationResponsePtrOutputWithContext(ctx)
}

// AzureBlobFileSystemConfigurationResponsePtrInput is an input type that accepts AzureBlobFileSystemConfigurationResponseArgs, AzureBlobFileSystemConfigurationResponsePtr and AzureBlobFileSystemConfigurationResponsePtrOutput values.
// You can construct a concrete instance of `AzureBlobFileSystemConfigurationResponsePtrInput` via:
//
//          AzureBlobFileSystemConfigurationResponseArgs{...}
//
//  or:
//
//          nil
type AzureBlobFileSystemConfigurationResponsePtrInput interface {
	pulumi.Input

	ToAzureBlobFileSystemConfigurationResponsePtrOutput() AzureBlobFileSystemConfigurationResponsePtrOutput
	ToAzureBlobFileSystemConfigurationResponsePtrOutputWithContext(context.Context) AzureBlobFileSystemConfigurationResponsePtrOutput
}

type azureBlobFileSystemConfigurationResponsePtrType AzureBlobFileSystemConfigurationResponseArgs

func AzureBlobFileSystemConfigurationResponsePtr(v *AzureBlobFileSystemConfigurationResponseArgs) AzureBlobFileSystemConfigurationResponsePtrInput {
	return (*azureBlobFileSystemConfigurationResponsePtrType)(v)
}

func (*azureBlobFileSystemConfigurationResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AzureBlobFileSystemConfigurationResponse)(nil)).Elem()
}

func (i *azureBlobFileSystemConfigurationResponsePtrType) ToAzureBlobFileSystemConfigurationResponsePtrOutput() AzureBlobFileSystemConfigurationResponsePtrOutput {
	return i.ToAzureBlobFileSystemConfigurationResponsePtrOutputWithContext(context.Background())
}

func (i *azureBlobFileSystemConfigurationResponsePtrType) ToAzureBlobFileSystemConfigurationResponsePtrOutputWithContext(ctx context.Context) AzureBlobFileSystemConfigurationResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzureBlobFileSystemConfigurationResponsePtrOutput)
}

type AzureBlobFileSystemConfigurationResponseOutput struct{ *pulumi.OutputState }

func (AzureBlobFileSystemConfigurationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureBlobFileSystemConfigurationResponse)(nil)).Elem()
}

func (o AzureBlobFileSystemConfigurationResponseOutput) ToAzureBlobFileSystemConfigurationResponseOutput() AzureBlobFileSystemConfigurationResponseOutput {
	return o
}

func (o AzureBlobFileSystemConfigurationResponseOutput) ToAzureBlobFileSystemConfigurationResponseOutputWithContext(ctx context.Context) AzureBlobFileSystemConfigurationResponseOutput {
	return o
}

func (o AzureBlobFileSystemConfigurationResponseOutput) ToAzureBlobFileSystemConfigurationResponsePtrOutput() AzureBlobFileSystemConfigurationResponsePtrOutput {
	return o.ToAzureBlobFileSystemConfigurationResponsePtrOutputWithContext(context.Background())
}

func (o AzureBlobFileSystemConfigurationResponseOutput) ToAzureBlobFileSystemConfigurationResponsePtrOutputWithContext(ctx context.Context) AzureBlobFileSystemConfigurationResponsePtrOutput {
	return o.ApplyT(func(v AzureBlobFileSystemConfigurationResponse) *AzureBlobFileSystemConfigurationResponse {
		return &v
	}).(AzureBlobFileSystemConfigurationResponsePtrOutput)
}

// This property is mutually exclusive with sasKey and one must be specified.
func (o AzureBlobFileSystemConfigurationResponseOutput) AccountKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureBlobFileSystemConfigurationResponse) *string { return v.AccountKey }).(pulumi.StringPtrOutput)
}

func (o AzureBlobFileSystemConfigurationResponseOutput) AccountName() pulumi.StringOutput {
	return o.ApplyT(func(v AzureBlobFileSystemConfigurationResponse) string { return v.AccountName }).(pulumi.StringOutput)
}

// These are 'net use' options in Windows and 'mount' options in Linux.
func (o AzureBlobFileSystemConfigurationResponseOutput) BlobfuseOptions() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureBlobFileSystemConfigurationResponse) *string { return v.BlobfuseOptions }).(pulumi.StringPtrOutput)
}

func (o AzureBlobFileSystemConfigurationResponseOutput) ContainerName() pulumi.StringOutput {
	return o.ApplyT(func(v AzureBlobFileSystemConfigurationResponse) string { return v.ContainerName }).(pulumi.StringOutput)
}

// All file systems are mounted relative to the Batch mounts directory, accessible via the AZ_BATCH_NODE_MOUNTS_DIR environment variable.
func (o AzureBlobFileSystemConfigurationResponseOutput) RelativeMountPath() pulumi.StringOutput {
	return o.ApplyT(func(v AzureBlobFileSystemConfigurationResponse) string { return v.RelativeMountPath }).(pulumi.StringOutput)
}

// This property is mutually exclusive with accountKey and one must be specified.
func (o AzureBlobFileSystemConfigurationResponseOutput) SasKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureBlobFileSystemConfigurationResponse) *string { return v.SasKey }).(pulumi.StringPtrOutput)
}

type AzureBlobFileSystemConfigurationResponsePtrOutput struct{ *pulumi.OutputState }

func (AzureBlobFileSystemConfigurationResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AzureBlobFileSystemConfigurationResponse)(nil)).Elem()
}

func (o AzureBlobFileSystemConfigurationResponsePtrOutput) ToAzureBlobFileSystemConfigurationResponsePtrOutput() AzureBlobFileSystemConfigurationResponsePtrOutput {
	return o
}

func (o AzureBlobFileSystemConfigurationResponsePtrOutput) ToAzureBlobFileSystemConfigurationResponsePtrOutputWithContext(ctx context.Context) AzureBlobFileSystemConfigurationResponsePtrOutput {
	return o
}

func (o AzureBlobFileSystemConfigurationResponsePtrOutput) Elem() AzureBlobFileSystemConfigurationResponseOutput {
	return o.ApplyT(func(v *AzureBlobFileSystemConfigurationResponse) AzureBlobFileSystemConfigurationResponse { return *v }).(AzureBlobFileSystemConfigurationResponseOutput)
}

// This property is mutually exclusive with sasKey and one must be specified.
func (o AzureBlobFileSystemConfigurationResponsePtrOutput) AccountKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AzureBlobFileSystemConfigurationResponse) *string {
		if v == nil {
			return nil
		}
		return v.AccountKey
	}).(pulumi.StringPtrOutput)
}

func (o AzureBlobFileSystemConfigurationResponsePtrOutput) AccountName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AzureBlobFileSystemConfigurationResponse) *string {
		if v == nil {
			return nil
		}
		return &v.AccountName
	}).(pulumi.StringPtrOutput)
}

// These are 'net use' options in Windows and 'mount' options in Linux.
func (o AzureBlobFileSystemConfigurationResponsePtrOutput) BlobfuseOptions() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AzureBlobFileSystemConfigurationResponse) *string {
		if v == nil {
			return nil
		}
		return v.BlobfuseOptions
	}).(pulumi.StringPtrOutput)
}

func (o AzureBlobFileSystemConfigurationResponsePtrOutput) ContainerName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AzureBlobFileSystemConfigurationResponse) *string {
		if v == nil {
			return nil
		}
		return &v.ContainerName
	}).(pulumi.StringPtrOutput)
}

// All file systems are mounted relative to the Batch mounts directory, accessible via the AZ_BATCH_NODE_MOUNTS_DIR environment variable.
func (o AzureBlobFileSystemConfigurationResponsePtrOutput) RelativeMountPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AzureBlobFileSystemConfigurationResponse) *string {
		if v == nil {
			return nil
		}
		return &v.RelativeMountPath
	}).(pulumi.StringPtrOutput)
}

// This property is mutually exclusive with accountKey and one must be specified.
func (o AzureBlobFileSystemConfigurationResponsePtrOutput) SasKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AzureBlobFileSystemConfigurationResponse) *string {
		if v == nil {
			return nil
		}
		return v.SasKey
	}).(pulumi.StringPtrOutput)
}

type AzureFileShareConfiguration struct {
	AccountKey  string `pulumi:"accountKey"`
	AccountName string `pulumi:"accountName"`
	// This is of the form 'https://{account}.file.core.windows.net/'.
	AzureFileUrl string `pulumi:"azureFileUrl"`
	// These are 'net use' options in Windows and 'mount' options in Linux.
	MountOptions *string `pulumi:"mountOptions"`
	// All file systems are mounted relative to the Batch mounts directory, accessible via the AZ_BATCH_NODE_MOUNTS_DIR environment variable.
	RelativeMountPath string `pulumi:"relativeMountPath"`
}

// AzureFileShareConfigurationInput is an input type that accepts AzureFileShareConfigurationArgs and AzureFileShareConfigurationOutput values.
// You can construct a concrete instance of `AzureFileShareConfigurationInput` via:
//
//          AzureFileShareConfigurationArgs{...}
type AzureFileShareConfigurationInput interface {
	pulumi.Input

	ToAzureFileShareConfigurationOutput() AzureFileShareConfigurationOutput
	ToAzureFileShareConfigurationOutputWithContext(context.Context) AzureFileShareConfigurationOutput
}

type AzureFileShareConfigurationArgs struct {
	AccountKey  pulumi.StringInput `pulumi:"accountKey"`
	AccountName pulumi.StringInput `pulumi:"accountName"`
	// This is of the form 'https://{account}.file.core.windows.net/'.
	AzureFileUrl pulumi.StringInput `pulumi:"azureFileUrl"`
	// These are 'net use' options in Windows and 'mount' options in Linux.
	MountOptions pulumi.StringPtrInput `pulumi:"mountOptions"`
	// All file systems are mounted relative to the Batch mounts directory, accessible via the AZ_BATCH_NODE_MOUNTS_DIR environment variable.
	RelativeMountPath pulumi.StringInput `pulumi:"relativeMountPath"`
}

func (AzureFileShareConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureFileShareConfiguration)(nil)).Elem()
}

func (i AzureFileShareConfigurationArgs) ToAzureFileShareConfigurationOutput() AzureFileShareConfigurationOutput {
	return i.ToAzureFileShareConfigurationOutputWithContext(context.Background())
}

func (i AzureFileShareConfigurationArgs) ToAzureFileShareConfigurationOutputWithContext(ctx context.Context) AzureFileShareConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzureFileShareConfigurationOutput)
}

func (i AzureFileShareConfigurationArgs) ToAzureFileShareConfigurationPtrOutput() AzureFileShareConfigurationPtrOutput {
	return i.ToAzureFileShareConfigurationPtrOutputWithContext(context.Background())
}

func (i AzureFileShareConfigurationArgs) ToAzureFileShareConfigurationPtrOutputWithContext(ctx context.Context) AzureFileShareConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzureFileShareConfigurationOutput).ToAzureFileShareConfigurationPtrOutputWithContext(ctx)
}

// AzureFileShareConfigurationPtrInput is an input type that accepts AzureFileShareConfigurationArgs, AzureFileShareConfigurationPtr and AzureFileShareConfigurationPtrOutput values.
// You can construct a concrete instance of `AzureFileShareConfigurationPtrInput` via:
//
//          AzureFileShareConfigurationArgs{...}
//
//  or:
//
//          nil
type AzureFileShareConfigurationPtrInput interface {
	pulumi.Input

	ToAzureFileShareConfigurationPtrOutput() AzureFileShareConfigurationPtrOutput
	ToAzureFileShareConfigurationPtrOutputWithContext(context.Context) AzureFileShareConfigurationPtrOutput
}

type azureFileShareConfigurationPtrType AzureFileShareConfigurationArgs

func AzureFileShareConfigurationPtr(v *AzureFileShareConfigurationArgs) AzureFileShareConfigurationPtrInput {
	return (*azureFileShareConfigurationPtrType)(v)
}

func (*azureFileShareConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AzureFileShareConfiguration)(nil)).Elem()
}

func (i *azureFileShareConfigurationPtrType) ToAzureFileShareConfigurationPtrOutput() AzureFileShareConfigurationPtrOutput {
	return i.ToAzureFileShareConfigurationPtrOutputWithContext(context.Background())
}

func (i *azureFileShareConfigurationPtrType) ToAzureFileShareConfigurationPtrOutputWithContext(ctx context.Context) AzureFileShareConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzureFileShareConfigurationPtrOutput)
}

type AzureFileShareConfigurationOutput struct{ *pulumi.OutputState }

func (AzureFileShareConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureFileShareConfiguration)(nil)).Elem()
}

func (o AzureFileShareConfigurationOutput) ToAzureFileShareConfigurationOutput() AzureFileShareConfigurationOutput {
	return o
}

func (o AzureFileShareConfigurationOutput) ToAzureFileShareConfigurationOutputWithContext(ctx context.Context) AzureFileShareConfigurationOutput {
	return o
}

func (o AzureFileShareConfigurationOutput) ToAzureFileShareConfigurationPtrOutput() AzureFileShareConfigurationPtrOutput {
	return o.ToAzureFileShareConfigurationPtrOutputWithContext(context.Background())
}

func (o AzureFileShareConfigurationOutput) ToAzureFileShareConfigurationPtrOutputWithContext(ctx context.Context) AzureFileShareConfigurationPtrOutput {
	return o.ApplyT(func(v AzureFileShareConfiguration) *AzureFileShareConfiguration {
		return &v
	}).(AzureFileShareConfigurationPtrOutput)
}
func (o AzureFileShareConfigurationOutput) AccountKey() pulumi.StringOutput {
	return o.ApplyT(func(v AzureFileShareConfiguration) string { return v.AccountKey }).(pulumi.StringOutput)
}

func (o AzureFileShareConfigurationOutput) AccountName() pulumi.StringOutput {
	return o.ApplyT(func(v AzureFileShareConfiguration) string { return v.AccountName }).(pulumi.StringOutput)
}

// This is of the form 'https://{account}.file.core.windows.net/'.
func (o AzureFileShareConfigurationOutput) AzureFileUrl() pulumi.StringOutput {
	return o.ApplyT(func(v AzureFileShareConfiguration) string { return v.AzureFileUrl }).(pulumi.StringOutput)
}

// These are 'net use' options in Windows and 'mount' options in Linux.
func (o AzureFileShareConfigurationOutput) MountOptions() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureFileShareConfiguration) *string { return v.MountOptions }).(pulumi.StringPtrOutput)
}

// All file systems are mounted relative to the Batch mounts directory, accessible via the AZ_BATCH_NODE_MOUNTS_DIR environment variable.
func (o AzureFileShareConfigurationOutput) RelativeMountPath() pulumi.StringOutput {
	return o.ApplyT(func(v AzureFileShareConfiguration) string { return v.RelativeMountPath }).(pulumi.StringOutput)
}

type AzureFileShareConfigurationPtrOutput struct{ *pulumi.OutputState }

func (AzureFileShareConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AzureFileShareConfiguration)(nil)).Elem()
}

func (o AzureFileShareConfigurationPtrOutput) ToAzureFileShareConfigurationPtrOutput() AzureFileShareConfigurationPtrOutput {
	return o
}

func (o AzureFileShareConfigurationPtrOutput) ToAzureFileShareConfigurationPtrOutputWithContext(ctx context.Context) AzureFileShareConfigurationPtrOutput {
	return o
}

func (o AzureFileShareConfigurationPtrOutput) Elem() AzureFileShareConfigurationOutput {
	return o.ApplyT(func(v *AzureFileShareConfiguration) AzureFileShareConfiguration { return *v }).(AzureFileShareConfigurationOutput)
}

func (o AzureFileShareConfigurationPtrOutput) AccountKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AzureFileShareConfiguration) *string {
		if v == nil {
			return nil
		}
		return &v.AccountKey
	}).(pulumi.StringPtrOutput)
}

func (o AzureFileShareConfigurationPtrOutput) AccountName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AzureFileShareConfiguration) *string {
		if v == nil {
			return nil
		}
		return &v.AccountName
	}).(pulumi.StringPtrOutput)
}

// This is of the form 'https://{account}.file.core.windows.net/'.
func (o AzureFileShareConfigurationPtrOutput) AzureFileUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AzureFileShareConfiguration) *string {
		if v == nil {
			return nil
		}
		return &v.AzureFileUrl
	}).(pulumi.StringPtrOutput)
}

// These are 'net use' options in Windows and 'mount' options in Linux.
func (o AzureFileShareConfigurationPtrOutput) MountOptions() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AzureFileShareConfiguration) *string {
		if v == nil {
			return nil
		}
		return v.MountOptions
	}).(pulumi.StringPtrOutput)
}

// All file systems are mounted relative to the Batch mounts directory, accessible via the AZ_BATCH_NODE_MOUNTS_DIR environment variable.
func (o AzureFileShareConfigurationPtrOutput) RelativeMountPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AzureFileShareConfiguration) *string {
		if v == nil {
			return nil
		}
		return &v.RelativeMountPath
	}).(pulumi.StringPtrOutput)
}

type AzureFileShareConfigurationResponse struct {
	AccountKey  string `pulumi:"accountKey"`
	AccountName string `pulumi:"accountName"`
	// This is of the form 'https://{account}.file.core.windows.net/'.
	AzureFileUrl string `pulumi:"azureFileUrl"`
	// These are 'net use' options in Windows and 'mount' options in Linux.
	MountOptions *string `pulumi:"mountOptions"`
	// All file systems are mounted relative to the Batch mounts directory, accessible via the AZ_BATCH_NODE_MOUNTS_DIR environment variable.
	RelativeMountPath string `pulumi:"relativeMountPath"`
}

// AzureFileShareConfigurationResponseInput is an input type that accepts AzureFileShareConfigurationResponseArgs and AzureFileShareConfigurationResponseOutput values.
// You can construct a concrete instance of `AzureFileShareConfigurationResponseInput` via:
//
//          AzureFileShareConfigurationResponseArgs{...}
type AzureFileShareConfigurationResponseInput interface {
	pulumi.Input

	ToAzureFileShareConfigurationResponseOutput() AzureFileShareConfigurationResponseOutput
	ToAzureFileShareConfigurationResponseOutputWithContext(context.Context) AzureFileShareConfigurationResponseOutput
}

type AzureFileShareConfigurationResponseArgs struct {
	AccountKey  pulumi.StringInput `pulumi:"accountKey"`
	AccountName pulumi.StringInput `pulumi:"accountName"`
	// This is of the form 'https://{account}.file.core.windows.net/'.
	AzureFileUrl pulumi.StringInput `pulumi:"azureFileUrl"`
	// These are 'net use' options in Windows and 'mount' options in Linux.
	MountOptions pulumi.StringPtrInput `pulumi:"mountOptions"`
	// All file systems are mounted relative to the Batch mounts directory, accessible via the AZ_BATCH_NODE_MOUNTS_DIR environment variable.
	RelativeMountPath pulumi.StringInput `pulumi:"relativeMountPath"`
}

func (AzureFileShareConfigurationResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureFileShareConfigurationResponse)(nil)).Elem()
}

func (i AzureFileShareConfigurationResponseArgs) ToAzureFileShareConfigurationResponseOutput() AzureFileShareConfigurationResponseOutput {
	return i.ToAzureFileShareConfigurationResponseOutputWithContext(context.Background())
}

func (i AzureFileShareConfigurationResponseArgs) ToAzureFileShareConfigurationResponseOutputWithContext(ctx context.Context) AzureFileShareConfigurationResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzureFileShareConfigurationResponseOutput)
}

func (i AzureFileShareConfigurationResponseArgs) ToAzureFileShareConfigurationResponsePtrOutput() AzureFileShareConfigurationResponsePtrOutput {
	return i.ToAzureFileShareConfigurationResponsePtrOutputWithContext(context.Background())
}

func (i AzureFileShareConfigurationResponseArgs) ToAzureFileShareConfigurationResponsePtrOutputWithContext(ctx context.Context) AzureFileShareConfigurationResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzureFileShareConfigurationResponseOutput).ToAzureFileShareConfigurationResponsePtrOutputWithContext(ctx)
}

// AzureFileShareConfigurationResponsePtrInput is an input type that accepts AzureFileShareConfigurationResponseArgs, AzureFileShareConfigurationResponsePtr and AzureFileShareConfigurationResponsePtrOutput values.
// You can construct a concrete instance of `AzureFileShareConfigurationResponsePtrInput` via:
//
//          AzureFileShareConfigurationResponseArgs{...}
//
//  or:
//
//          nil
type AzureFileShareConfigurationResponsePtrInput interface {
	pulumi.Input

	ToAzureFileShareConfigurationResponsePtrOutput() AzureFileShareConfigurationResponsePtrOutput
	ToAzureFileShareConfigurationResponsePtrOutputWithContext(context.Context) AzureFileShareConfigurationResponsePtrOutput
}

type azureFileShareConfigurationResponsePtrType AzureFileShareConfigurationResponseArgs

func AzureFileShareConfigurationResponsePtr(v *AzureFileShareConfigurationResponseArgs) AzureFileShareConfigurationResponsePtrInput {
	return (*azureFileShareConfigurationResponsePtrType)(v)
}

func (*azureFileShareConfigurationResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AzureFileShareConfigurationResponse)(nil)).Elem()
}

func (i *azureFileShareConfigurationResponsePtrType) ToAzureFileShareConfigurationResponsePtrOutput() AzureFileShareConfigurationResponsePtrOutput {
	return i.ToAzureFileShareConfigurationResponsePtrOutputWithContext(context.Background())
}

func (i *azureFileShareConfigurationResponsePtrType) ToAzureFileShareConfigurationResponsePtrOutputWithContext(ctx context.Context) AzureFileShareConfigurationResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzureFileShareConfigurationResponsePtrOutput)
}

type AzureFileShareConfigurationResponseOutput struct{ *pulumi.OutputState }

func (AzureFileShareConfigurationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureFileShareConfigurationResponse)(nil)).Elem()
}

func (o AzureFileShareConfigurationResponseOutput) ToAzureFileShareConfigurationResponseOutput() AzureFileShareConfigurationResponseOutput {
	return o
}

func (o AzureFileShareConfigurationResponseOutput) ToAzureFileShareConfigurationResponseOutputWithContext(ctx context.Context) AzureFileShareConfigurationResponseOutput {
	return o
}

func (o AzureFileShareConfigurationResponseOutput) ToAzureFileShareConfigurationResponsePtrOutput() AzureFileShareConfigurationResponsePtrOutput {
	return o.ToAzureFileShareConfigurationResponsePtrOutputWithContext(context.Background())
}

func (o AzureFileShareConfigurationResponseOutput) ToAzureFileShareConfigurationResponsePtrOutputWithContext(ctx context.Context) AzureFileShareConfigurationResponsePtrOutput {
	return o.ApplyT(func(v AzureFileShareConfigurationResponse) *AzureFileShareConfigurationResponse {
		return &v
	}).(AzureFileShareConfigurationResponsePtrOutput)
}
func (o AzureFileShareConfigurationResponseOutput) AccountKey() pulumi.StringOutput {
	return o.ApplyT(func(v AzureFileShareConfigurationResponse) string { return v.AccountKey }).(pulumi.StringOutput)
}

func (o AzureFileShareConfigurationResponseOutput) AccountName() pulumi.StringOutput {
	return o.ApplyT(func(v AzureFileShareConfigurationResponse) string { return v.AccountName }).(pulumi.StringOutput)
}

// This is of the form 'https://{account}.file.core.windows.net/'.
func (o AzureFileShareConfigurationResponseOutput) AzureFileUrl() pulumi.StringOutput {
	return o.ApplyT(func(v AzureFileShareConfigurationResponse) string { return v.AzureFileUrl }).(pulumi.StringOutput)
}

// These are 'net use' options in Windows and 'mount' options in Linux.
func (o AzureFileShareConfigurationResponseOutput) MountOptions() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureFileShareConfigurationResponse) *string { return v.MountOptions }).(pulumi.StringPtrOutput)
}

// All file systems are mounted relative to the Batch mounts directory, accessible via the AZ_BATCH_NODE_MOUNTS_DIR environment variable.
func (o AzureFileShareConfigurationResponseOutput) RelativeMountPath() pulumi.StringOutput {
	return o.ApplyT(func(v AzureFileShareConfigurationResponse) string { return v.RelativeMountPath }).(pulumi.StringOutput)
}

type AzureFileShareConfigurationResponsePtrOutput struct{ *pulumi.OutputState }

func (AzureFileShareConfigurationResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AzureFileShareConfigurationResponse)(nil)).Elem()
}

func (o AzureFileShareConfigurationResponsePtrOutput) ToAzureFileShareConfigurationResponsePtrOutput() AzureFileShareConfigurationResponsePtrOutput {
	return o
}

func (o AzureFileShareConfigurationResponsePtrOutput) ToAzureFileShareConfigurationResponsePtrOutputWithContext(ctx context.Context) AzureFileShareConfigurationResponsePtrOutput {
	return o
}

func (o AzureFileShareConfigurationResponsePtrOutput) Elem() AzureFileShareConfigurationResponseOutput {
	return o.ApplyT(func(v *AzureFileShareConfigurationResponse) AzureFileShareConfigurationResponse { return *v }).(AzureFileShareConfigurationResponseOutput)
}

func (o AzureFileShareConfigurationResponsePtrOutput) AccountKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AzureFileShareConfigurationResponse) *string {
		if v == nil {
			return nil
		}
		return &v.AccountKey
	}).(pulumi.StringPtrOutput)
}

func (o AzureFileShareConfigurationResponsePtrOutput) AccountName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AzureFileShareConfigurationResponse) *string {
		if v == nil {
			return nil
		}
		return &v.AccountName
	}).(pulumi.StringPtrOutput)
}

// This is of the form 'https://{account}.file.core.windows.net/'.
func (o AzureFileShareConfigurationResponsePtrOutput) AzureFileUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AzureFileShareConfigurationResponse) *string {
		if v == nil {
			return nil
		}
		return &v.AzureFileUrl
	}).(pulumi.StringPtrOutput)
}

// These are 'net use' options in Windows and 'mount' options in Linux.
func (o AzureFileShareConfigurationResponsePtrOutput) MountOptions() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AzureFileShareConfigurationResponse) *string {
		if v == nil {
			return nil
		}
		return v.MountOptions
	}).(pulumi.StringPtrOutput)
}

// All file systems are mounted relative to the Batch mounts directory, accessible via the AZ_BATCH_NODE_MOUNTS_DIR environment variable.
func (o AzureFileShareConfigurationResponsePtrOutput) RelativeMountPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AzureFileShareConfigurationResponse) *string {
		if v == nil {
			return nil
		}
		return &v.RelativeMountPath
	}).(pulumi.StringPtrOutput)
}

// The identity of the Batch account, if configured. This is only used when the user specifies 'Microsoft.KeyVault' as their Batch account encryption configuration.
type BatchAccountIdentity struct {
	// The type of identity used for the Batch account.
	Type string `pulumi:"type"`
}

// BatchAccountIdentityInput is an input type that accepts BatchAccountIdentityArgs and BatchAccountIdentityOutput values.
// You can construct a concrete instance of `BatchAccountIdentityInput` via:
//
//          BatchAccountIdentityArgs{...}
type BatchAccountIdentityInput interface {
	pulumi.Input

	ToBatchAccountIdentityOutput() BatchAccountIdentityOutput
	ToBatchAccountIdentityOutputWithContext(context.Context) BatchAccountIdentityOutput
}

// The identity of the Batch account, if configured. This is only used when the user specifies 'Microsoft.KeyVault' as their Batch account encryption configuration.
type BatchAccountIdentityArgs struct {
	// The type of identity used for the Batch account.
	Type pulumi.StringInput `pulumi:"type"`
}

func (BatchAccountIdentityArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BatchAccountIdentity)(nil)).Elem()
}

func (i BatchAccountIdentityArgs) ToBatchAccountIdentityOutput() BatchAccountIdentityOutput {
	return i.ToBatchAccountIdentityOutputWithContext(context.Background())
}

func (i BatchAccountIdentityArgs) ToBatchAccountIdentityOutputWithContext(ctx context.Context) BatchAccountIdentityOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BatchAccountIdentityOutput)
}

func (i BatchAccountIdentityArgs) ToBatchAccountIdentityPtrOutput() BatchAccountIdentityPtrOutput {
	return i.ToBatchAccountIdentityPtrOutputWithContext(context.Background())
}

func (i BatchAccountIdentityArgs) ToBatchAccountIdentityPtrOutputWithContext(ctx context.Context) BatchAccountIdentityPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BatchAccountIdentityOutput).ToBatchAccountIdentityPtrOutputWithContext(ctx)
}

// BatchAccountIdentityPtrInput is an input type that accepts BatchAccountIdentityArgs, BatchAccountIdentityPtr and BatchAccountIdentityPtrOutput values.
// You can construct a concrete instance of `BatchAccountIdentityPtrInput` via:
//
//          BatchAccountIdentityArgs{...}
//
//  or:
//
//          nil
type BatchAccountIdentityPtrInput interface {
	pulumi.Input

	ToBatchAccountIdentityPtrOutput() BatchAccountIdentityPtrOutput
	ToBatchAccountIdentityPtrOutputWithContext(context.Context) BatchAccountIdentityPtrOutput
}

type batchAccountIdentityPtrType BatchAccountIdentityArgs

func BatchAccountIdentityPtr(v *BatchAccountIdentityArgs) BatchAccountIdentityPtrInput {
	return (*batchAccountIdentityPtrType)(v)
}

func (*batchAccountIdentityPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**BatchAccountIdentity)(nil)).Elem()
}

func (i *batchAccountIdentityPtrType) ToBatchAccountIdentityPtrOutput() BatchAccountIdentityPtrOutput {
	return i.ToBatchAccountIdentityPtrOutputWithContext(context.Background())
}

func (i *batchAccountIdentityPtrType) ToBatchAccountIdentityPtrOutputWithContext(ctx context.Context) BatchAccountIdentityPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BatchAccountIdentityPtrOutput)
}

// The identity of the Batch account, if configured. This is only used when the user specifies 'Microsoft.KeyVault' as their Batch account encryption configuration.
type BatchAccountIdentityOutput struct{ *pulumi.OutputState }

func (BatchAccountIdentityOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BatchAccountIdentity)(nil)).Elem()
}

func (o BatchAccountIdentityOutput) ToBatchAccountIdentityOutput() BatchAccountIdentityOutput {
	return o
}

func (o BatchAccountIdentityOutput) ToBatchAccountIdentityOutputWithContext(ctx context.Context) BatchAccountIdentityOutput {
	return o
}

func (o BatchAccountIdentityOutput) ToBatchAccountIdentityPtrOutput() BatchAccountIdentityPtrOutput {
	return o.ToBatchAccountIdentityPtrOutputWithContext(context.Background())
}

func (o BatchAccountIdentityOutput) ToBatchAccountIdentityPtrOutputWithContext(ctx context.Context) BatchAccountIdentityPtrOutput {
	return o.ApplyT(func(v BatchAccountIdentity) *BatchAccountIdentity {
		return &v
	}).(BatchAccountIdentityPtrOutput)
}

// The type of identity used for the Batch account.
func (o BatchAccountIdentityOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v BatchAccountIdentity) string { return v.Type }).(pulumi.StringOutput)
}

type BatchAccountIdentityPtrOutput struct{ *pulumi.OutputState }

func (BatchAccountIdentityPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BatchAccountIdentity)(nil)).Elem()
}

func (o BatchAccountIdentityPtrOutput) ToBatchAccountIdentityPtrOutput() BatchAccountIdentityPtrOutput {
	return o
}

func (o BatchAccountIdentityPtrOutput) ToBatchAccountIdentityPtrOutputWithContext(ctx context.Context) BatchAccountIdentityPtrOutput {
	return o
}

func (o BatchAccountIdentityPtrOutput) Elem() BatchAccountIdentityOutput {
	return o.ApplyT(func(v *BatchAccountIdentity) BatchAccountIdentity { return *v }).(BatchAccountIdentityOutput)
}

// The type of identity used for the Batch account.
func (o BatchAccountIdentityPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BatchAccountIdentity) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

// The identity of the Batch account, if configured. This is only used when the user specifies 'Microsoft.KeyVault' as their Batch account encryption configuration.
type BatchAccountIdentityResponse struct {
	// The principal id of the Batch account. This property will only be provided for a system assigned identity.
	PrincipalId string `pulumi:"principalId"`
	// The tenant id associated with the Batch account. This property will only be provided for a system assigned identity.
	TenantId string `pulumi:"tenantId"`
	// The type of identity used for the Batch account.
	Type string `pulumi:"type"`
}

// BatchAccountIdentityResponseInput is an input type that accepts BatchAccountIdentityResponseArgs and BatchAccountIdentityResponseOutput values.
// You can construct a concrete instance of `BatchAccountIdentityResponseInput` via:
//
//          BatchAccountIdentityResponseArgs{...}
type BatchAccountIdentityResponseInput interface {
	pulumi.Input

	ToBatchAccountIdentityResponseOutput() BatchAccountIdentityResponseOutput
	ToBatchAccountIdentityResponseOutputWithContext(context.Context) BatchAccountIdentityResponseOutput
}

// The identity of the Batch account, if configured. This is only used when the user specifies 'Microsoft.KeyVault' as their Batch account encryption configuration.
type BatchAccountIdentityResponseArgs struct {
	// The principal id of the Batch account. This property will only be provided for a system assigned identity.
	PrincipalId pulumi.StringInput `pulumi:"principalId"`
	// The tenant id associated with the Batch account. This property will only be provided for a system assigned identity.
	TenantId pulumi.StringInput `pulumi:"tenantId"`
	// The type of identity used for the Batch account.
	Type pulumi.StringInput `pulumi:"type"`
}

func (BatchAccountIdentityResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BatchAccountIdentityResponse)(nil)).Elem()
}

func (i BatchAccountIdentityResponseArgs) ToBatchAccountIdentityResponseOutput() BatchAccountIdentityResponseOutput {
	return i.ToBatchAccountIdentityResponseOutputWithContext(context.Background())
}

func (i BatchAccountIdentityResponseArgs) ToBatchAccountIdentityResponseOutputWithContext(ctx context.Context) BatchAccountIdentityResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BatchAccountIdentityResponseOutput)
}

func (i BatchAccountIdentityResponseArgs) ToBatchAccountIdentityResponsePtrOutput() BatchAccountIdentityResponsePtrOutput {
	return i.ToBatchAccountIdentityResponsePtrOutputWithContext(context.Background())
}

func (i BatchAccountIdentityResponseArgs) ToBatchAccountIdentityResponsePtrOutputWithContext(ctx context.Context) BatchAccountIdentityResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BatchAccountIdentityResponseOutput).ToBatchAccountIdentityResponsePtrOutputWithContext(ctx)
}

// BatchAccountIdentityResponsePtrInput is an input type that accepts BatchAccountIdentityResponseArgs, BatchAccountIdentityResponsePtr and BatchAccountIdentityResponsePtrOutput values.
// You can construct a concrete instance of `BatchAccountIdentityResponsePtrInput` via:
//
//          BatchAccountIdentityResponseArgs{...}
//
//  or:
//
//          nil
type BatchAccountIdentityResponsePtrInput interface {
	pulumi.Input

	ToBatchAccountIdentityResponsePtrOutput() BatchAccountIdentityResponsePtrOutput
	ToBatchAccountIdentityResponsePtrOutputWithContext(context.Context) BatchAccountIdentityResponsePtrOutput
}

type batchAccountIdentityResponsePtrType BatchAccountIdentityResponseArgs

func BatchAccountIdentityResponsePtr(v *BatchAccountIdentityResponseArgs) BatchAccountIdentityResponsePtrInput {
	return (*batchAccountIdentityResponsePtrType)(v)
}

func (*batchAccountIdentityResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**BatchAccountIdentityResponse)(nil)).Elem()
}

func (i *batchAccountIdentityResponsePtrType) ToBatchAccountIdentityResponsePtrOutput() BatchAccountIdentityResponsePtrOutput {
	return i.ToBatchAccountIdentityResponsePtrOutputWithContext(context.Background())
}

func (i *batchAccountIdentityResponsePtrType) ToBatchAccountIdentityResponsePtrOutputWithContext(ctx context.Context) BatchAccountIdentityResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BatchAccountIdentityResponsePtrOutput)
}

// The identity of the Batch account, if configured. This is only used when the user specifies 'Microsoft.KeyVault' as their Batch account encryption configuration.
type BatchAccountIdentityResponseOutput struct{ *pulumi.OutputState }

func (BatchAccountIdentityResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BatchAccountIdentityResponse)(nil)).Elem()
}

func (o BatchAccountIdentityResponseOutput) ToBatchAccountIdentityResponseOutput() BatchAccountIdentityResponseOutput {
	return o
}

func (o BatchAccountIdentityResponseOutput) ToBatchAccountIdentityResponseOutputWithContext(ctx context.Context) BatchAccountIdentityResponseOutput {
	return o
}

func (o BatchAccountIdentityResponseOutput) ToBatchAccountIdentityResponsePtrOutput() BatchAccountIdentityResponsePtrOutput {
	return o.ToBatchAccountIdentityResponsePtrOutputWithContext(context.Background())
}

func (o BatchAccountIdentityResponseOutput) ToBatchAccountIdentityResponsePtrOutputWithContext(ctx context.Context) BatchAccountIdentityResponsePtrOutput {
	return o.ApplyT(func(v BatchAccountIdentityResponse) *BatchAccountIdentityResponse {
		return &v
	}).(BatchAccountIdentityResponsePtrOutput)
}

// The principal id of the Batch account. This property will only be provided for a system assigned identity.
func (o BatchAccountIdentityResponseOutput) PrincipalId() pulumi.StringOutput {
	return o.ApplyT(func(v BatchAccountIdentityResponse) string { return v.PrincipalId }).(pulumi.StringOutput)
}

// The tenant id associated with the Batch account. This property will only be provided for a system assigned identity.
func (o BatchAccountIdentityResponseOutput) TenantId() pulumi.StringOutput {
	return o.ApplyT(func(v BatchAccountIdentityResponse) string { return v.TenantId }).(pulumi.StringOutput)
}

// The type of identity used for the Batch account.
func (o BatchAccountIdentityResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v BatchAccountIdentityResponse) string { return v.Type }).(pulumi.StringOutput)
}

type BatchAccountIdentityResponsePtrOutput struct{ *pulumi.OutputState }

func (BatchAccountIdentityResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BatchAccountIdentityResponse)(nil)).Elem()
}

func (o BatchAccountIdentityResponsePtrOutput) ToBatchAccountIdentityResponsePtrOutput() BatchAccountIdentityResponsePtrOutput {
	return o
}

func (o BatchAccountIdentityResponsePtrOutput) ToBatchAccountIdentityResponsePtrOutputWithContext(ctx context.Context) BatchAccountIdentityResponsePtrOutput {
	return o
}

func (o BatchAccountIdentityResponsePtrOutput) Elem() BatchAccountIdentityResponseOutput {
	return o.ApplyT(func(v *BatchAccountIdentityResponse) BatchAccountIdentityResponse { return *v }).(BatchAccountIdentityResponseOutput)
}

// The principal id of the Batch account. This property will only be provided for a system assigned identity.
func (o BatchAccountIdentityResponsePtrOutput) PrincipalId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BatchAccountIdentityResponse) *string {
		if v == nil {
			return nil
		}
		return &v.PrincipalId
	}).(pulumi.StringPtrOutput)
}

// The tenant id associated with the Batch account. This property will only be provided for a system assigned identity.
func (o BatchAccountIdentityResponsePtrOutput) TenantId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BatchAccountIdentityResponse) *string {
		if v == nil {
			return nil
		}
		return &v.TenantId
	}).(pulumi.StringPtrOutput)
}

// The type of identity used for the Batch account.
func (o BatchAccountIdentityResponsePtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BatchAccountIdentityResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

type CIFSMountConfiguration struct {
	// These are 'net use' options in Windows and 'mount' options in Linux.
	MountOptions *string `pulumi:"mountOptions"`
	Password     string  `pulumi:"password"`
	// All file systems are mounted relative to the Batch mounts directory, accessible via the AZ_BATCH_NODE_MOUNTS_DIR environment variable.
	RelativeMountPath string `pulumi:"relativeMountPath"`
	Source            string `pulumi:"source"`
	Username          string `pulumi:"username"`
}

// CIFSMountConfigurationInput is an input type that accepts CIFSMountConfigurationArgs and CIFSMountConfigurationOutput values.
// You can construct a concrete instance of `CIFSMountConfigurationInput` via:
//
//          CIFSMountConfigurationArgs{...}
type CIFSMountConfigurationInput interface {
	pulumi.Input

	ToCIFSMountConfigurationOutput() CIFSMountConfigurationOutput
	ToCIFSMountConfigurationOutputWithContext(context.Context) CIFSMountConfigurationOutput
}

type CIFSMountConfigurationArgs struct {
	// These are 'net use' options in Windows and 'mount' options in Linux.
	MountOptions pulumi.StringPtrInput `pulumi:"mountOptions"`
	Password     pulumi.StringInput    `pulumi:"password"`
	// All file systems are mounted relative to the Batch mounts directory, accessible via the AZ_BATCH_NODE_MOUNTS_DIR environment variable.
	RelativeMountPath pulumi.StringInput `pulumi:"relativeMountPath"`
	Source            pulumi.StringInput `pulumi:"source"`
	Username          pulumi.StringInput `pulumi:"username"`
}

func (CIFSMountConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CIFSMountConfiguration)(nil)).Elem()
}

func (i CIFSMountConfigurationArgs) ToCIFSMountConfigurationOutput() CIFSMountConfigurationOutput {
	return i.ToCIFSMountConfigurationOutputWithContext(context.Background())
}

func (i CIFSMountConfigurationArgs) ToCIFSMountConfigurationOutputWithContext(ctx context.Context) CIFSMountConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CIFSMountConfigurationOutput)
}

func (i CIFSMountConfigurationArgs) ToCIFSMountConfigurationPtrOutput() CIFSMountConfigurationPtrOutput {
	return i.ToCIFSMountConfigurationPtrOutputWithContext(context.Background())
}

func (i CIFSMountConfigurationArgs) ToCIFSMountConfigurationPtrOutputWithContext(ctx context.Context) CIFSMountConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CIFSMountConfigurationOutput).ToCIFSMountConfigurationPtrOutputWithContext(ctx)
}

// CIFSMountConfigurationPtrInput is an input type that accepts CIFSMountConfigurationArgs, CIFSMountConfigurationPtr and CIFSMountConfigurationPtrOutput values.
// You can construct a concrete instance of `CIFSMountConfigurationPtrInput` via:
//
//          CIFSMountConfigurationArgs{...}
//
//  or:
//
//          nil
type CIFSMountConfigurationPtrInput interface {
	pulumi.Input

	ToCIFSMountConfigurationPtrOutput() CIFSMountConfigurationPtrOutput
	ToCIFSMountConfigurationPtrOutputWithContext(context.Context) CIFSMountConfigurationPtrOutput
}

type cifsmountConfigurationPtrType CIFSMountConfigurationArgs

func CIFSMountConfigurationPtr(v *CIFSMountConfigurationArgs) CIFSMountConfigurationPtrInput {
	return (*cifsmountConfigurationPtrType)(v)
}

func (*cifsmountConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CIFSMountConfiguration)(nil)).Elem()
}

func (i *cifsmountConfigurationPtrType) ToCIFSMountConfigurationPtrOutput() CIFSMountConfigurationPtrOutput {
	return i.ToCIFSMountConfigurationPtrOutputWithContext(context.Background())
}

func (i *cifsmountConfigurationPtrType) ToCIFSMountConfigurationPtrOutputWithContext(ctx context.Context) CIFSMountConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CIFSMountConfigurationPtrOutput)
}

type CIFSMountConfigurationOutput struct{ *pulumi.OutputState }

func (CIFSMountConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CIFSMountConfiguration)(nil)).Elem()
}

func (o CIFSMountConfigurationOutput) ToCIFSMountConfigurationOutput() CIFSMountConfigurationOutput {
	return o
}

func (o CIFSMountConfigurationOutput) ToCIFSMountConfigurationOutputWithContext(ctx context.Context) CIFSMountConfigurationOutput {
	return o
}

func (o CIFSMountConfigurationOutput) ToCIFSMountConfigurationPtrOutput() CIFSMountConfigurationPtrOutput {
	return o.ToCIFSMountConfigurationPtrOutputWithContext(context.Background())
}

func (o CIFSMountConfigurationOutput) ToCIFSMountConfigurationPtrOutputWithContext(ctx context.Context) CIFSMountConfigurationPtrOutput {
	return o.ApplyT(func(v CIFSMountConfiguration) *CIFSMountConfiguration {
		return &v
	}).(CIFSMountConfigurationPtrOutput)
}

// These are 'net use' options in Windows and 'mount' options in Linux.
func (o CIFSMountConfigurationOutput) MountOptions() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CIFSMountConfiguration) *string { return v.MountOptions }).(pulumi.StringPtrOutput)
}

func (o CIFSMountConfigurationOutput) Password() pulumi.StringOutput {
	return o.ApplyT(func(v CIFSMountConfiguration) string { return v.Password }).(pulumi.StringOutput)
}

// All file systems are mounted relative to the Batch mounts directory, accessible via the AZ_BATCH_NODE_MOUNTS_DIR environment variable.
func (o CIFSMountConfigurationOutput) RelativeMountPath() pulumi.StringOutput {
	return o.ApplyT(func(v CIFSMountConfiguration) string { return v.RelativeMountPath }).(pulumi.StringOutput)
}

func (o CIFSMountConfigurationOutput) Source() pulumi.StringOutput {
	return o.ApplyT(func(v CIFSMountConfiguration) string { return v.Source }).(pulumi.StringOutput)
}

func (o CIFSMountConfigurationOutput) Username() pulumi.StringOutput {
	return o.ApplyT(func(v CIFSMountConfiguration) string { return v.Username }).(pulumi.StringOutput)
}

type CIFSMountConfigurationPtrOutput struct{ *pulumi.OutputState }

func (CIFSMountConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CIFSMountConfiguration)(nil)).Elem()
}

func (o CIFSMountConfigurationPtrOutput) ToCIFSMountConfigurationPtrOutput() CIFSMountConfigurationPtrOutput {
	return o
}

func (o CIFSMountConfigurationPtrOutput) ToCIFSMountConfigurationPtrOutputWithContext(ctx context.Context) CIFSMountConfigurationPtrOutput {
	return o
}

func (o CIFSMountConfigurationPtrOutput) Elem() CIFSMountConfigurationOutput {
	return o.ApplyT(func(v *CIFSMountConfiguration) CIFSMountConfiguration { return *v }).(CIFSMountConfigurationOutput)
}

// These are 'net use' options in Windows and 'mount' options in Linux.
func (o CIFSMountConfigurationPtrOutput) MountOptions() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CIFSMountConfiguration) *string {
		if v == nil {
			return nil
		}
		return v.MountOptions
	}).(pulumi.StringPtrOutput)
}

func (o CIFSMountConfigurationPtrOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CIFSMountConfiguration) *string {
		if v == nil {
			return nil
		}
		return &v.Password
	}).(pulumi.StringPtrOutput)
}

// All file systems are mounted relative to the Batch mounts directory, accessible via the AZ_BATCH_NODE_MOUNTS_DIR environment variable.
func (o CIFSMountConfigurationPtrOutput) RelativeMountPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CIFSMountConfiguration) *string {
		if v == nil {
			return nil
		}
		return &v.RelativeMountPath
	}).(pulumi.StringPtrOutput)
}

func (o CIFSMountConfigurationPtrOutput) Source() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CIFSMountConfiguration) *string {
		if v == nil {
			return nil
		}
		return &v.Source
	}).(pulumi.StringPtrOutput)
}

func (o CIFSMountConfigurationPtrOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CIFSMountConfiguration) *string {
		if v == nil {
			return nil
		}
		return &v.Username
	}).(pulumi.StringPtrOutput)
}

type CIFSMountConfigurationResponse struct {
	// These are 'net use' options in Windows and 'mount' options in Linux.
	MountOptions *string `pulumi:"mountOptions"`
	Password     string  `pulumi:"password"`
	// All file systems are mounted relative to the Batch mounts directory, accessible via the AZ_BATCH_NODE_MOUNTS_DIR environment variable.
	RelativeMountPath string `pulumi:"relativeMountPath"`
	Source            string `pulumi:"source"`
	Username          string `pulumi:"username"`
}

// CIFSMountConfigurationResponseInput is an input type that accepts CIFSMountConfigurationResponseArgs and CIFSMountConfigurationResponseOutput values.
// You can construct a concrete instance of `CIFSMountConfigurationResponseInput` via:
//
//          CIFSMountConfigurationResponseArgs{...}
type CIFSMountConfigurationResponseInput interface {
	pulumi.Input

	ToCIFSMountConfigurationResponseOutput() CIFSMountConfigurationResponseOutput
	ToCIFSMountConfigurationResponseOutputWithContext(context.Context) CIFSMountConfigurationResponseOutput
}

type CIFSMountConfigurationResponseArgs struct {
	// These are 'net use' options in Windows and 'mount' options in Linux.
	MountOptions pulumi.StringPtrInput `pulumi:"mountOptions"`
	Password     pulumi.StringInput    `pulumi:"password"`
	// All file systems are mounted relative to the Batch mounts directory, accessible via the AZ_BATCH_NODE_MOUNTS_DIR environment variable.
	RelativeMountPath pulumi.StringInput `pulumi:"relativeMountPath"`
	Source            pulumi.StringInput `pulumi:"source"`
	Username          pulumi.StringInput `pulumi:"username"`
}

func (CIFSMountConfigurationResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CIFSMountConfigurationResponse)(nil)).Elem()
}

func (i CIFSMountConfigurationResponseArgs) ToCIFSMountConfigurationResponseOutput() CIFSMountConfigurationResponseOutput {
	return i.ToCIFSMountConfigurationResponseOutputWithContext(context.Background())
}

func (i CIFSMountConfigurationResponseArgs) ToCIFSMountConfigurationResponseOutputWithContext(ctx context.Context) CIFSMountConfigurationResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CIFSMountConfigurationResponseOutput)
}

func (i CIFSMountConfigurationResponseArgs) ToCIFSMountConfigurationResponsePtrOutput() CIFSMountConfigurationResponsePtrOutput {
	return i.ToCIFSMountConfigurationResponsePtrOutputWithContext(context.Background())
}

func (i CIFSMountConfigurationResponseArgs) ToCIFSMountConfigurationResponsePtrOutputWithContext(ctx context.Context) CIFSMountConfigurationResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CIFSMountConfigurationResponseOutput).ToCIFSMountConfigurationResponsePtrOutputWithContext(ctx)
}

// CIFSMountConfigurationResponsePtrInput is an input type that accepts CIFSMountConfigurationResponseArgs, CIFSMountConfigurationResponsePtr and CIFSMountConfigurationResponsePtrOutput values.
// You can construct a concrete instance of `CIFSMountConfigurationResponsePtrInput` via:
//
//          CIFSMountConfigurationResponseArgs{...}
//
//  or:
//
//          nil
type CIFSMountConfigurationResponsePtrInput interface {
	pulumi.Input

	ToCIFSMountConfigurationResponsePtrOutput() CIFSMountConfigurationResponsePtrOutput
	ToCIFSMountConfigurationResponsePtrOutputWithContext(context.Context) CIFSMountConfigurationResponsePtrOutput
}

type cifsmountConfigurationResponsePtrType CIFSMountConfigurationResponseArgs

func CIFSMountConfigurationResponsePtr(v *CIFSMountConfigurationResponseArgs) CIFSMountConfigurationResponsePtrInput {
	return (*cifsmountConfigurationResponsePtrType)(v)
}

func (*cifsmountConfigurationResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CIFSMountConfigurationResponse)(nil)).Elem()
}

func (i *cifsmountConfigurationResponsePtrType) ToCIFSMountConfigurationResponsePtrOutput() CIFSMountConfigurationResponsePtrOutput {
	return i.ToCIFSMountConfigurationResponsePtrOutputWithContext(context.Background())
}

func (i *cifsmountConfigurationResponsePtrType) ToCIFSMountConfigurationResponsePtrOutputWithContext(ctx context.Context) CIFSMountConfigurationResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CIFSMountConfigurationResponsePtrOutput)
}

type CIFSMountConfigurationResponseOutput struct{ *pulumi.OutputState }

func (CIFSMountConfigurationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CIFSMountConfigurationResponse)(nil)).Elem()
}

func (o CIFSMountConfigurationResponseOutput) ToCIFSMountConfigurationResponseOutput() CIFSMountConfigurationResponseOutput {
	return o
}

func (o CIFSMountConfigurationResponseOutput) ToCIFSMountConfigurationResponseOutputWithContext(ctx context.Context) CIFSMountConfigurationResponseOutput {
	return o
}

func (o CIFSMountConfigurationResponseOutput) ToCIFSMountConfigurationResponsePtrOutput() CIFSMountConfigurationResponsePtrOutput {
	return o.ToCIFSMountConfigurationResponsePtrOutputWithContext(context.Background())
}

func (o CIFSMountConfigurationResponseOutput) ToCIFSMountConfigurationResponsePtrOutputWithContext(ctx context.Context) CIFSMountConfigurationResponsePtrOutput {
	return o.ApplyT(func(v CIFSMountConfigurationResponse) *CIFSMountConfigurationResponse {
		return &v
	}).(CIFSMountConfigurationResponsePtrOutput)
}

// These are 'net use' options in Windows and 'mount' options in Linux.
func (o CIFSMountConfigurationResponseOutput) MountOptions() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CIFSMountConfigurationResponse) *string { return v.MountOptions }).(pulumi.StringPtrOutput)
}

func (o CIFSMountConfigurationResponseOutput) Password() pulumi.StringOutput {
	return o.ApplyT(func(v CIFSMountConfigurationResponse) string { return v.Password }).(pulumi.StringOutput)
}

// All file systems are mounted relative to the Batch mounts directory, accessible via the AZ_BATCH_NODE_MOUNTS_DIR environment variable.
func (o CIFSMountConfigurationResponseOutput) RelativeMountPath() pulumi.StringOutput {
	return o.ApplyT(func(v CIFSMountConfigurationResponse) string { return v.RelativeMountPath }).(pulumi.StringOutput)
}

func (o CIFSMountConfigurationResponseOutput) Source() pulumi.StringOutput {
	return o.ApplyT(func(v CIFSMountConfigurationResponse) string { return v.Source }).(pulumi.StringOutput)
}

func (o CIFSMountConfigurationResponseOutput) Username() pulumi.StringOutput {
	return o.ApplyT(func(v CIFSMountConfigurationResponse) string { return v.Username }).(pulumi.StringOutput)
}

type CIFSMountConfigurationResponsePtrOutput struct{ *pulumi.OutputState }

func (CIFSMountConfigurationResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CIFSMountConfigurationResponse)(nil)).Elem()
}

func (o CIFSMountConfigurationResponsePtrOutput) ToCIFSMountConfigurationResponsePtrOutput() CIFSMountConfigurationResponsePtrOutput {
	return o
}

func (o CIFSMountConfigurationResponsePtrOutput) ToCIFSMountConfigurationResponsePtrOutputWithContext(ctx context.Context) CIFSMountConfigurationResponsePtrOutput {
	return o
}

func (o CIFSMountConfigurationResponsePtrOutput) Elem() CIFSMountConfigurationResponseOutput {
	return o.ApplyT(func(v *CIFSMountConfigurationResponse) CIFSMountConfigurationResponse { return *v }).(CIFSMountConfigurationResponseOutput)
}

// These are 'net use' options in Windows and 'mount' options in Linux.
func (o CIFSMountConfigurationResponsePtrOutput) MountOptions() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CIFSMountConfigurationResponse) *string {
		if v == nil {
			return nil
		}
		return v.MountOptions
	}).(pulumi.StringPtrOutput)
}

func (o CIFSMountConfigurationResponsePtrOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CIFSMountConfigurationResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Password
	}).(pulumi.StringPtrOutput)
}

// All file systems are mounted relative to the Batch mounts directory, accessible via the AZ_BATCH_NODE_MOUNTS_DIR environment variable.
func (o CIFSMountConfigurationResponsePtrOutput) RelativeMountPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CIFSMountConfigurationResponse) *string {
		if v == nil {
			return nil
		}
		return &v.RelativeMountPath
	}).(pulumi.StringPtrOutput)
}

func (o CIFSMountConfigurationResponsePtrOutput) Source() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CIFSMountConfigurationResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Source
	}).(pulumi.StringPtrOutput)
}

func (o CIFSMountConfigurationResponsePtrOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CIFSMountConfigurationResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Username
	}).(pulumi.StringPtrOutput)
}

type CertificateReference struct {
	Id string `pulumi:"id"`
	// The default value is currentUser. This property is applicable only for pools configured with Windows nodes (that is, created with cloudServiceConfiguration, or with virtualMachineConfiguration using a Windows image reference). For Linux compute nodes, the certificates are stored in a directory inside the task working directory and an environment variable AZ_BATCH_CERTIFICATES_DIR is supplied to the task to query for this location. For certificates with visibility of 'remoteUser', a 'certs' directory is created in the user's home directory (e.g., /home/{user-name}/certs) and certificates are placed in that directory.
	StoreLocation *string `pulumi:"storeLocation"`
	// This property is applicable only for pools configured with Windows nodes (that is, created with cloudServiceConfiguration, or with virtualMachineConfiguration using a Windows image reference). Common store names include: My, Root, CA, Trust, Disallowed, TrustedPeople, TrustedPublisher, AuthRoot, AddressBook, but any custom store name can also be used. The default value is My.
	StoreName  *string  `pulumi:"storeName"`
	Visibility []string `pulumi:"visibility"`
}

// CertificateReferenceInput is an input type that accepts CertificateReferenceArgs and CertificateReferenceOutput values.
// You can construct a concrete instance of `CertificateReferenceInput` via:
//
//          CertificateReferenceArgs{...}
type CertificateReferenceInput interface {
	pulumi.Input

	ToCertificateReferenceOutput() CertificateReferenceOutput
	ToCertificateReferenceOutputWithContext(context.Context) CertificateReferenceOutput
}

type CertificateReferenceArgs struct {
	Id pulumi.StringInput `pulumi:"id"`
	// The default value is currentUser. This property is applicable only for pools configured with Windows nodes (that is, created with cloudServiceConfiguration, or with virtualMachineConfiguration using a Windows image reference). For Linux compute nodes, the certificates are stored in a directory inside the task working directory and an environment variable AZ_BATCH_CERTIFICATES_DIR is supplied to the task to query for this location. For certificates with visibility of 'remoteUser', a 'certs' directory is created in the user's home directory (e.g., /home/{user-name}/certs) and certificates are placed in that directory.
	StoreLocation pulumi.StringPtrInput `pulumi:"storeLocation"`
	// This property is applicable only for pools configured with Windows nodes (that is, created with cloudServiceConfiguration, or with virtualMachineConfiguration using a Windows image reference). Common store names include: My, Root, CA, Trust, Disallowed, TrustedPeople, TrustedPublisher, AuthRoot, AddressBook, but any custom store name can also be used. The default value is My.
	StoreName  pulumi.StringPtrInput   `pulumi:"storeName"`
	Visibility pulumi.StringArrayInput `pulumi:"visibility"`
}

func (CertificateReferenceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CertificateReference)(nil)).Elem()
}

func (i CertificateReferenceArgs) ToCertificateReferenceOutput() CertificateReferenceOutput {
	return i.ToCertificateReferenceOutputWithContext(context.Background())
}

func (i CertificateReferenceArgs) ToCertificateReferenceOutputWithContext(ctx context.Context) CertificateReferenceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CertificateReferenceOutput)
}

// CertificateReferenceArrayInput is an input type that accepts CertificateReferenceArray and CertificateReferenceArrayOutput values.
// You can construct a concrete instance of `CertificateReferenceArrayInput` via:
//
//          CertificateReferenceArray{ CertificateReferenceArgs{...} }
type CertificateReferenceArrayInput interface {
	pulumi.Input

	ToCertificateReferenceArrayOutput() CertificateReferenceArrayOutput
	ToCertificateReferenceArrayOutputWithContext(context.Context) CertificateReferenceArrayOutput
}

type CertificateReferenceArray []CertificateReferenceInput

func (CertificateReferenceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CertificateReference)(nil)).Elem()
}

func (i CertificateReferenceArray) ToCertificateReferenceArrayOutput() CertificateReferenceArrayOutput {
	return i.ToCertificateReferenceArrayOutputWithContext(context.Background())
}

func (i CertificateReferenceArray) ToCertificateReferenceArrayOutputWithContext(ctx context.Context) CertificateReferenceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CertificateReferenceArrayOutput)
}

type CertificateReferenceOutput struct{ *pulumi.OutputState }

func (CertificateReferenceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CertificateReference)(nil)).Elem()
}

func (o CertificateReferenceOutput) ToCertificateReferenceOutput() CertificateReferenceOutput {
	return o
}

func (o CertificateReferenceOutput) ToCertificateReferenceOutputWithContext(ctx context.Context) CertificateReferenceOutput {
	return o
}

func (o CertificateReferenceOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v CertificateReference) string { return v.Id }).(pulumi.StringOutput)
}

// The default value is currentUser. This property is applicable only for pools configured with Windows nodes (that is, created with cloudServiceConfiguration, or with virtualMachineConfiguration using a Windows image reference). For Linux compute nodes, the certificates are stored in a directory inside the task working directory and an environment variable AZ_BATCH_CERTIFICATES_DIR is supplied to the task to query for this location. For certificates with visibility of 'remoteUser', a 'certs' directory is created in the user's home directory (e.g., /home/{user-name}/certs) and certificates are placed in that directory.
func (o CertificateReferenceOutput) StoreLocation() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CertificateReference) *string { return v.StoreLocation }).(pulumi.StringPtrOutput)
}

// This property is applicable only for pools configured with Windows nodes (that is, created with cloudServiceConfiguration, or with virtualMachineConfiguration using a Windows image reference). Common store names include: My, Root, CA, Trust, Disallowed, TrustedPeople, TrustedPublisher, AuthRoot, AddressBook, but any custom store name can also be used. The default value is My.
func (o CertificateReferenceOutput) StoreName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CertificateReference) *string { return v.StoreName }).(pulumi.StringPtrOutput)
}

func (o CertificateReferenceOutput) Visibility() pulumi.StringArrayOutput {
	return o.ApplyT(func(v CertificateReference) []string { return v.Visibility }).(pulumi.StringArrayOutput)
}

type CertificateReferenceArrayOutput struct{ *pulumi.OutputState }

func (CertificateReferenceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CertificateReference)(nil)).Elem()
}

func (o CertificateReferenceArrayOutput) ToCertificateReferenceArrayOutput() CertificateReferenceArrayOutput {
	return o
}

func (o CertificateReferenceArrayOutput) ToCertificateReferenceArrayOutputWithContext(ctx context.Context) CertificateReferenceArrayOutput {
	return o
}

func (o CertificateReferenceArrayOutput) Index(i pulumi.IntInput) CertificateReferenceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) CertificateReference {
		return vs[0].([]CertificateReference)[vs[1].(int)]
	}).(CertificateReferenceOutput)
}

type CertificateReferenceResponse struct {
	Id string `pulumi:"id"`
	// The default value is currentUser. This property is applicable only for pools configured with Windows nodes (that is, created with cloudServiceConfiguration, or with virtualMachineConfiguration using a Windows image reference). For Linux compute nodes, the certificates are stored in a directory inside the task working directory and an environment variable AZ_BATCH_CERTIFICATES_DIR is supplied to the task to query for this location. For certificates with visibility of 'remoteUser', a 'certs' directory is created in the user's home directory (e.g., /home/{user-name}/certs) and certificates are placed in that directory.
	StoreLocation *string `pulumi:"storeLocation"`
	// This property is applicable only for pools configured with Windows nodes (that is, created with cloudServiceConfiguration, or with virtualMachineConfiguration using a Windows image reference). Common store names include: My, Root, CA, Trust, Disallowed, TrustedPeople, TrustedPublisher, AuthRoot, AddressBook, but any custom store name can also be used. The default value is My.
	StoreName  *string  `pulumi:"storeName"`
	Visibility []string `pulumi:"visibility"`
}

// CertificateReferenceResponseInput is an input type that accepts CertificateReferenceResponseArgs and CertificateReferenceResponseOutput values.
// You can construct a concrete instance of `CertificateReferenceResponseInput` via:
//
//          CertificateReferenceResponseArgs{...}
type CertificateReferenceResponseInput interface {
	pulumi.Input

	ToCertificateReferenceResponseOutput() CertificateReferenceResponseOutput
	ToCertificateReferenceResponseOutputWithContext(context.Context) CertificateReferenceResponseOutput
}

type CertificateReferenceResponseArgs struct {
	Id pulumi.StringInput `pulumi:"id"`
	// The default value is currentUser. This property is applicable only for pools configured with Windows nodes (that is, created with cloudServiceConfiguration, or with virtualMachineConfiguration using a Windows image reference). For Linux compute nodes, the certificates are stored in a directory inside the task working directory and an environment variable AZ_BATCH_CERTIFICATES_DIR is supplied to the task to query for this location. For certificates with visibility of 'remoteUser', a 'certs' directory is created in the user's home directory (e.g., /home/{user-name}/certs) and certificates are placed in that directory.
	StoreLocation pulumi.StringPtrInput `pulumi:"storeLocation"`
	// This property is applicable only for pools configured with Windows nodes (that is, created with cloudServiceConfiguration, or with virtualMachineConfiguration using a Windows image reference). Common store names include: My, Root, CA, Trust, Disallowed, TrustedPeople, TrustedPublisher, AuthRoot, AddressBook, but any custom store name can also be used. The default value is My.
	StoreName  pulumi.StringPtrInput   `pulumi:"storeName"`
	Visibility pulumi.StringArrayInput `pulumi:"visibility"`
}

func (CertificateReferenceResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CertificateReferenceResponse)(nil)).Elem()
}

func (i CertificateReferenceResponseArgs) ToCertificateReferenceResponseOutput() CertificateReferenceResponseOutput {
	return i.ToCertificateReferenceResponseOutputWithContext(context.Background())
}

func (i CertificateReferenceResponseArgs) ToCertificateReferenceResponseOutputWithContext(ctx context.Context) CertificateReferenceResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CertificateReferenceResponseOutput)
}

// CertificateReferenceResponseArrayInput is an input type that accepts CertificateReferenceResponseArray and CertificateReferenceResponseArrayOutput values.
// You can construct a concrete instance of `CertificateReferenceResponseArrayInput` via:
//
//          CertificateReferenceResponseArray{ CertificateReferenceResponseArgs{...} }
type CertificateReferenceResponseArrayInput interface {
	pulumi.Input

	ToCertificateReferenceResponseArrayOutput() CertificateReferenceResponseArrayOutput
	ToCertificateReferenceResponseArrayOutputWithContext(context.Context) CertificateReferenceResponseArrayOutput
}

type CertificateReferenceResponseArray []CertificateReferenceResponseInput

func (CertificateReferenceResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CertificateReferenceResponse)(nil)).Elem()
}

func (i CertificateReferenceResponseArray) ToCertificateReferenceResponseArrayOutput() CertificateReferenceResponseArrayOutput {
	return i.ToCertificateReferenceResponseArrayOutputWithContext(context.Background())
}

func (i CertificateReferenceResponseArray) ToCertificateReferenceResponseArrayOutputWithContext(ctx context.Context) CertificateReferenceResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CertificateReferenceResponseArrayOutput)
}

type CertificateReferenceResponseOutput struct{ *pulumi.OutputState }

func (CertificateReferenceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CertificateReferenceResponse)(nil)).Elem()
}

func (o CertificateReferenceResponseOutput) ToCertificateReferenceResponseOutput() CertificateReferenceResponseOutput {
	return o
}

func (o CertificateReferenceResponseOutput) ToCertificateReferenceResponseOutputWithContext(ctx context.Context) CertificateReferenceResponseOutput {
	return o
}

func (o CertificateReferenceResponseOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v CertificateReferenceResponse) string { return v.Id }).(pulumi.StringOutput)
}

// The default value is currentUser. This property is applicable only for pools configured with Windows nodes (that is, created with cloudServiceConfiguration, or with virtualMachineConfiguration using a Windows image reference). For Linux compute nodes, the certificates are stored in a directory inside the task working directory and an environment variable AZ_BATCH_CERTIFICATES_DIR is supplied to the task to query for this location. For certificates with visibility of 'remoteUser', a 'certs' directory is created in the user's home directory (e.g., /home/{user-name}/certs) and certificates are placed in that directory.
func (o CertificateReferenceResponseOutput) StoreLocation() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CertificateReferenceResponse) *string { return v.StoreLocation }).(pulumi.StringPtrOutput)
}

// This property is applicable only for pools configured with Windows nodes (that is, created with cloudServiceConfiguration, or with virtualMachineConfiguration using a Windows image reference). Common store names include: My, Root, CA, Trust, Disallowed, TrustedPeople, TrustedPublisher, AuthRoot, AddressBook, but any custom store name can also be used. The default value is My.
func (o CertificateReferenceResponseOutput) StoreName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CertificateReferenceResponse) *string { return v.StoreName }).(pulumi.StringPtrOutput)
}

func (o CertificateReferenceResponseOutput) Visibility() pulumi.StringArrayOutput {
	return o.ApplyT(func(v CertificateReferenceResponse) []string { return v.Visibility }).(pulumi.StringArrayOutput)
}

type CertificateReferenceResponseArrayOutput struct{ *pulumi.OutputState }

func (CertificateReferenceResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CertificateReferenceResponse)(nil)).Elem()
}

func (o CertificateReferenceResponseArrayOutput) ToCertificateReferenceResponseArrayOutput() CertificateReferenceResponseArrayOutput {
	return o
}

func (o CertificateReferenceResponseArrayOutput) ToCertificateReferenceResponseArrayOutputWithContext(ctx context.Context) CertificateReferenceResponseArrayOutput {
	return o
}

func (o CertificateReferenceResponseArrayOutput) Index(i pulumi.IntInput) CertificateReferenceResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) CertificateReferenceResponse {
		return vs[0].([]CertificateReferenceResponse)[vs[1].(int)]
	}).(CertificateReferenceResponseOutput)
}

type CloudServiceConfiguration struct {
	// Possible values are: 2 - OS Family 2, equivalent to Windows Server 2008 R2 SP1. 3 - OS Family 3, equivalent to Windows Server 2012. 4 - OS Family 4, equivalent to Windows Server 2012 R2. 5 - OS Family 5, equivalent to Windows Server 2016. 6 - OS Family 6, equivalent to Windows Server 2019. For more information, see Azure Guest OS Releases (https://azure.microsoft.com/documentation/articles/cloud-services-guestos-update-matrix/#releases).
	OsFamily string `pulumi:"osFamily"`
	// The default value is * which specifies the latest operating system version for the specified OS family.
	OsVersion *string `pulumi:"osVersion"`
}

// CloudServiceConfigurationInput is an input type that accepts CloudServiceConfigurationArgs and CloudServiceConfigurationOutput values.
// You can construct a concrete instance of `CloudServiceConfigurationInput` via:
//
//          CloudServiceConfigurationArgs{...}
type CloudServiceConfigurationInput interface {
	pulumi.Input

	ToCloudServiceConfigurationOutput() CloudServiceConfigurationOutput
	ToCloudServiceConfigurationOutputWithContext(context.Context) CloudServiceConfigurationOutput
}

type CloudServiceConfigurationArgs struct {
	// Possible values are: 2 - OS Family 2, equivalent to Windows Server 2008 R2 SP1. 3 - OS Family 3, equivalent to Windows Server 2012. 4 - OS Family 4, equivalent to Windows Server 2012 R2. 5 - OS Family 5, equivalent to Windows Server 2016. 6 - OS Family 6, equivalent to Windows Server 2019. For more information, see Azure Guest OS Releases (https://azure.microsoft.com/documentation/articles/cloud-services-guestos-update-matrix/#releases).
	OsFamily pulumi.StringInput `pulumi:"osFamily"`
	// The default value is * which specifies the latest operating system version for the specified OS family.
	OsVersion pulumi.StringPtrInput `pulumi:"osVersion"`
}

func (CloudServiceConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CloudServiceConfiguration)(nil)).Elem()
}

func (i CloudServiceConfigurationArgs) ToCloudServiceConfigurationOutput() CloudServiceConfigurationOutput {
	return i.ToCloudServiceConfigurationOutputWithContext(context.Background())
}

func (i CloudServiceConfigurationArgs) ToCloudServiceConfigurationOutputWithContext(ctx context.Context) CloudServiceConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CloudServiceConfigurationOutput)
}

func (i CloudServiceConfigurationArgs) ToCloudServiceConfigurationPtrOutput() CloudServiceConfigurationPtrOutput {
	return i.ToCloudServiceConfigurationPtrOutputWithContext(context.Background())
}

func (i CloudServiceConfigurationArgs) ToCloudServiceConfigurationPtrOutputWithContext(ctx context.Context) CloudServiceConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CloudServiceConfigurationOutput).ToCloudServiceConfigurationPtrOutputWithContext(ctx)
}

// CloudServiceConfigurationPtrInput is an input type that accepts CloudServiceConfigurationArgs, CloudServiceConfigurationPtr and CloudServiceConfigurationPtrOutput values.
// You can construct a concrete instance of `CloudServiceConfigurationPtrInput` via:
//
//          CloudServiceConfigurationArgs{...}
//
//  or:
//
//          nil
type CloudServiceConfigurationPtrInput interface {
	pulumi.Input

	ToCloudServiceConfigurationPtrOutput() CloudServiceConfigurationPtrOutput
	ToCloudServiceConfigurationPtrOutputWithContext(context.Context) CloudServiceConfigurationPtrOutput
}

type cloudServiceConfigurationPtrType CloudServiceConfigurationArgs

func CloudServiceConfigurationPtr(v *CloudServiceConfigurationArgs) CloudServiceConfigurationPtrInput {
	return (*cloudServiceConfigurationPtrType)(v)
}

func (*cloudServiceConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CloudServiceConfiguration)(nil)).Elem()
}

func (i *cloudServiceConfigurationPtrType) ToCloudServiceConfigurationPtrOutput() CloudServiceConfigurationPtrOutput {
	return i.ToCloudServiceConfigurationPtrOutputWithContext(context.Background())
}

func (i *cloudServiceConfigurationPtrType) ToCloudServiceConfigurationPtrOutputWithContext(ctx context.Context) CloudServiceConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CloudServiceConfigurationPtrOutput)
}

type CloudServiceConfigurationOutput struct{ *pulumi.OutputState }

func (CloudServiceConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CloudServiceConfiguration)(nil)).Elem()
}

func (o CloudServiceConfigurationOutput) ToCloudServiceConfigurationOutput() CloudServiceConfigurationOutput {
	return o
}

func (o CloudServiceConfigurationOutput) ToCloudServiceConfigurationOutputWithContext(ctx context.Context) CloudServiceConfigurationOutput {
	return o
}

func (o CloudServiceConfigurationOutput) ToCloudServiceConfigurationPtrOutput() CloudServiceConfigurationPtrOutput {
	return o.ToCloudServiceConfigurationPtrOutputWithContext(context.Background())
}

func (o CloudServiceConfigurationOutput) ToCloudServiceConfigurationPtrOutputWithContext(ctx context.Context) CloudServiceConfigurationPtrOutput {
	return o.ApplyT(func(v CloudServiceConfiguration) *CloudServiceConfiguration {
		return &v
	}).(CloudServiceConfigurationPtrOutput)
}

// Possible values are: 2 - OS Family 2, equivalent to Windows Server 2008 R2 SP1. 3 - OS Family 3, equivalent to Windows Server 2012. 4 - OS Family 4, equivalent to Windows Server 2012 R2. 5 - OS Family 5, equivalent to Windows Server 2016. 6 - OS Family 6, equivalent to Windows Server 2019. For more information, see Azure Guest OS Releases (https://azure.microsoft.com/documentation/articles/cloud-services-guestos-update-matrix/#releases).
func (o CloudServiceConfigurationOutput) OsFamily() pulumi.StringOutput {
	return o.ApplyT(func(v CloudServiceConfiguration) string { return v.OsFamily }).(pulumi.StringOutput)
}

// The default value is * which specifies the latest operating system version for the specified OS family.
func (o CloudServiceConfigurationOutput) OsVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CloudServiceConfiguration) *string { return v.OsVersion }).(pulumi.StringPtrOutput)
}

type CloudServiceConfigurationPtrOutput struct{ *pulumi.OutputState }

func (CloudServiceConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CloudServiceConfiguration)(nil)).Elem()
}

func (o CloudServiceConfigurationPtrOutput) ToCloudServiceConfigurationPtrOutput() CloudServiceConfigurationPtrOutput {
	return o
}

func (o CloudServiceConfigurationPtrOutput) ToCloudServiceConfigurationPtrOutputWithContext(ctx context.Context) CloudServiceConfigurationPtrOutput {
	return o
}

func (o CloudServiceConfigurationPtrOutput) Elem() CloudServiceConfigurationOutput {
	return o.ApplyT(func(v *CloudServiceConfiguration) CloudServiceConfiguration { return *v }).(CloudServiceConfigurationOutput)
}

// Possible values are: 2 - OS Family 2, equivalent to Windows Server 2008 R2 SP1. 3 - OS Family 3, equivalent to Windows Server 2012. 4 - OS Family 4, equivalent to Windows Server 2012 R2. 5 - OS Family 5, equivalent to Windows Server 2016. 6 - OS Family 6, equivalent to Windows Server 2019. For more information, see Azure Guest OS Releases (https://azure.microsoft.com/documentation/articles/cloud-services-guestos-update-matrix/#releases).
func (o CloudServiceConfigurationPtrOutput) OsFamily() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CloudServiceConfiguration) *string {
		if v == nil {
			return nil
		}
		return &v.OsFamily
	}).(pulumi.StringPtrOutput)
}

// The default value is * which specifies the latest operating system version for the specified OS family.
func (o CloudServiceConfigurationPtrOutput) OsVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CloudServiceConfiguration) *string {
		if v == nil {
			return nil
		}
		return v.OsVersion
	}).(pulumi.StringPtrOutput)
}

type CloudServiceConfigurationResponse struct {
	// Possible values are: 2 - OS Family 2, equivalent to Windows Server 2008 R2 SP1. 3 - OS Family 3, equivalent to Windows Server 2012. 4 - OS Family 4, equivalent to Windows Server 2012 R2. 5 - OS Family 5, equivalent to Windows Server 2016. 6 - OS Family 6, equivalent to Windows Server 2019. For more information, see Azure Guest OS Releases (https://azure.microsoft.com/documentation/articles/cloud-services-guestos-update-matrix/#releases).
	OsFamily string `pulumi:"osFamily"`
	// The default value is * which specifies the latest operating system version for the specified OS family.
	OsVersion *string `pulumi:"osVersion"`
}

// CloudServiceConfigurationResponseInput is an input type that accepts CloudServiceConfigurationResponseArgs and CloudServiceConfigurationResponseOutput values.
// You can construct a concrete instance of `CloudServiceConfigurationResponseInput` via:
//
//          CloudServiceConfigurationResponseArgs{...}
type CloudServiceConfigurationResponseInput interface {
	pulumi.Input

	ToCloudServiceConfigurationResponseOutput() CloudServiceConfigurationResponseOutput
	ToCloudServiceConfigurationResponseOutputWithContext(context.Context) CloudServiceConfigurationResponseOutput
}

type CloudServiceConfigurationResponseArgs struct {
	// Possible values are: 2 - OS Family 2, equivalent to Windows Server 2008 R2 SP1. 3 - OS Family 3, equivalent to Windows Server 2012. 4 - OS Family 4, equivalent to Windows Server 2012 R2. 5 - OS Family 5, equivalent to Windows Server 2016. 6 - OS Family 6, equivalent to Windows Server 2019. For more information, see Azure Guest OS Releases (https://azure.microsoft.com/documentation/articles/cloud-services-guestos-update-matrix/#releases).
	OsFamily pulumi.StringInput `pulumi:"osFamily"`
	// The default value is * which specifies the latest operating system version for the specified OS family.
	OsVersion pulumi.StringPtrInput `pulumi:"osVersion"`
}

func (CloudServiceConfigurationResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CloudServiceConfigurationResponse)(nil)).Elem()
}

func (i CloudServiceConfigurationResponseArgs) ToCloudServiceConfigurationResponseOutput() CloudServiceConfigurationResponseOutput {
	return i.ToCloudServiceConfigurationResponseOutputWithContext(context.Background())
}

func (i CloudServiceConfigurationResponseArgs) ToCloudServiceConfigurationResponseOutputWithContext(ctx context.Context) CloudServiceConfigurationResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CloudServiceConfigurationResponseOutput)
}

func (i CloudServiceConfigurationResponseArgs) ToCloudServiceConfigurationResponsePtrOutput() CloudServiceConfigurationResponsePtrOutput {
	return i.ToCloudServiceConfigurationResponsePtrOutputWithContext(context.Background())
}

func (i CloudServiceConfigurationResponseArgs) ToCloudServiceConfigurationResponsePtrOutputWithContext(ctx context.Context) CloudServiceConfigurationResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CloudServiceConfigurationResponseOutput).ToCloudServiceConfigurationResponsePtrOutputWithContext(ctx)
}

// CloudServiceConfigurationResponsePtrInput is an input type that accepts CloudServiceConfigurationResponseArgs, CloudServiceConfigurationResponsePtr and CloudServiceConfigurationResponsePtrOutput values.
// You can construct a concrete instance of `CloudServiceConfigurationResponsePtrInput` via:
//
//          CloudServiceConfigurationResponseArgs{...}
//
//  or:
//
//          nil
type CloudServiceConfigurationResponsePtrInput interface {
	pulumi.Input

	ToCloudServiceConfigurationResponsePtrOutput() CloudServiceConfigurationResponsePtrOutput
	ToCloudServiceConfigurationResponsePtrOutputWithContext(context.Context) CloudServiceConfigurationResponsePtrOutput
}

type cloudServiceConfigurationResponsePtrType CloudServiceConfigurationResponseArgs

func CloudServiceConfigurationResponsePtr(v *CloudServiceConfigurationResponseArgs) CloudServiceConfigurationResponsePtrInput {
	return (*cloudServiceConfigurationResponsePtrType)(v)
}

func (*cloudServiceConfigurationResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CloudServiceConfigurationResponse)(nil)).Elem()
}

func (i *cloudServiceConfigurationResponsePtrType) ToCloudServiceConfigurationResponsePtrOutput() CloudServiceConfigurationResponsePtrOutput {
	return i.ToCloudServiceConfigurationResponsePtrOutputWithContext(context.Background())
}

func (i *cloudServiceConfigurationResponsePtrType) ToCloudServiceConfigurationResponsePtrOutputWithContext(ctx context.Context) CloudServiceConfigurationResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CloudServiceConfigurationResponsePtrOutput)
}

type CloudServiceConfigurationResponseOutput struct{ *pulumi.OutputState }

func (CloudServiceConfigurationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CloudServiceConfigurationResponse)(nil)).Elem()
}

func (o CloudServiceConfigurationResponseOutput) ToCloudServiceConfigurationResponseOutput() CloudServiceConfigurationResponseOutput {
	return o
}

func (o CloudServiceConfigurationResponseOutput) ToCloudServiceConfigurationResponseOutputWithContext(ctx context.Context) CloudServiceConfigurationResponseOutput {
	return o
}

func (o CloudServiceConfigurationResponseOutput) ToCloudServiceConfigurationResponsePtrOutput() CloudServiceConfigurationResponsePtrOutput {
	return o.ToCloudServiceConfigurationResponsePtrOutputWithContext(context.Background())
}

func (o CloudServiceConfigurationResponseOutput) ToCloudServiceConfigurationResponsePtrOutputWithContext(ctx context.Context) CloudServiceConfigurationResponsePtrOutput {
	return o.ApplyT(func(v CloudServiceConfigurationResponse) *CloudServiceConfigurationResponse {
		return &v
	}).(CloudServiceConfigurationResponsePtrOutput)
}

// Possible values are: 2 - OS Family 2, equivalent to Windows Server 2008 R2 SP1. 3 - OS Family 3, equivalent to Windows Server 2012. 4 - OS Family 4, equivalent to Windows Server 2012 R2. 5 - OS Family 5, equivalent to Windows Server 2016. 6 - OS Family 6, equivalent to Windows Server 2019. For more information, see Azure Guest OS Releases (https://azure.microsoft.com/documentation/articles/cloud-services-guestos-update-matrix/#releases).
func (o CloudServiceConfigurationResponseOutput) OsFamily() pulumi.StringOutput {
	return o.ApplyT(func(v CloudServiceConfigurationResponse) string { return v.OsFamily }).(pulumi.StringOutput)
}

// The default value is * which specifies the latest operating system version for the specified OS family.
func (o CloudServiceConfigurationResponseOutput) OsVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CloudServiceConfigurationResponse) *string { return v.OsVersion }).(pulumi.StringPtrOutput)
}

type CloudServiceConfigurationResponsePtrOutput struct{ *pulumi.OutputState }

func (CloudServiceConfigurationResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CloudServiceConfigurationResponse)(nil)).Elem()
}

func (o CloudServiceConfigurationResponsePtrOutput) ToCloudServiceConfigurationResponsePtrOutput() CloudServiceConfigurationResponsePtrOutput {
	return o
}

func (o CloudServiceConfigurationResponsePtrOutput) ToCloudServiceConfigurationResponsePtrOutputWithContext(ctx context.Context) CloudServiceConfigurationResponsePtrOutput {
	return o
}

func (o CloudServiceConfigurationResponsePtrOutput) Elem() CloudServiceConfigurationResponseOutput {
	return o.ApplyT(func(v *CloudServiceConfigurationResponse) CloudServiceConfigurationResponse { return *v }).(CloudServiceConfigurationResponseOutput)
}

// Possible values are: 2 - OS Family 2, equivalent to Windows Server 2008 R2 SP1. 3 - OS Family 3, equivalent to Windows Server 2012. 4 - OS Family 4, equivalent to Windows Server 2012 R2. 5 - OS Family 5, equivalent to Windows Server 2016. 6 - OS Family 6, equivalent to Windows Server 2019. For more information, see Azure Guest OS Releases (https://azure.microsoft.com/documentation/articles/cloud-services-guestos-update-matrix/#releases).
func (o CloudServiceConfigurationResponsePtrOutput) OsFamily() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CloudServiceConfigurationResponse) *string {
		if v == nil {
			return nil
		}
		return &v.OsFamily
	}).(pulumi.StringPtrOutput)
}

// The default value is * which specifies the latest operating system version for the specified OS family.
func (o CloudServiceConfigurationResponsePtrOutput) OsVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CloudServiceConfigurationResponse) *string {
		if v == nil {
			return nil
		}
		return v.OsVersion
	}).(pulumi.StringPtrOutput)
}

type ContainerConfiguration struct {
	// This is the full image reference, as would be specified to "docker pull". An image will be sourced from the default Docker registry unless the image is fully qualified with an alternative registry.
	ContainerImageNames []string `pulumi:"containerImageNames"`
	// If any images must be downloaded from a private registry which requires credentials, then those credentials must be provided here.
	ContainerRegistries []ContainerRegistry `pulumi:"containerRegistries"`
	Type                string              `pulumi:"type"`
}

// ContainerConfigurationInput is an input type that accepts ContainerConfigurationArgs and ContainerConfigurationOutput values.
// You can construct a concrete instance of `ContainerConfigurationInput` via:
//
//          ContainerConfigurationArgs{...}
type ContainerConfigurationInput interface {
	pulumi.Input

	ToContainerConfigurationOutput() ContainerConfigurationOutput
	ToContainerConfigurationOutputWithContext(context.Context) ContainerConfigurationOutput
}

type ContainerConfigurationArgs struct {
	// This is the full image reference, as would be specified to "docker pull". An image will be sourced from the default Docker registry unless the image is fully qualified with an alternative registry.
	ContainerImageNames pulumi.StringArrayInput `pulumi:"containerImageNames"`
	// If any images must be downloaded from a private registry which requires credentials, then those credentials must be provided here.
	ContainerRegistries ContainerRegistryArrayInput `pulumi:"containerRegistries"`
	Type                pulumi.StringInput          `pulumi:"type"`
}

func (ContainerConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ContainerConfiguration)(nil)).Elem()
}

func (i ContainerConfigurationArgs) ToContainerConfigurationOutput() ContainerConfigurationOutput {
	return i.ToContainerConfigurationOutputWithContext(context.Background())
}

func (i ContainerConfigurationArgs) ToContainerConfigurationOutputWithContext(ctx context.Context) ContainerConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerConfigurationOutput)
}

func (i ContainerConfigurationArgs) ToContainerConfigurationPtrOutput() ContainerConfigurationPtrOutput {
	return i.ToContainerConfigurationPtrOutputWithContext(context.Background())
}

func (i ContainerConfigurationArgs) ToContainerConfigurationPtrOutputWithContext(ctx context.Context) ContainerConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerConfigurationOutput).ToContainerConfigurationPtrOutputWithContext(ctx)
}

// ContainerConfigurationPtrInput is an input type that accepts ContainerConfigurationArgs, ContainerConfigurationPtr and ContainerConfigurationPtrOutput values.
// You can construct a concrete instance of `ContainerConfigurationPtrInput` via:
//
//          ContainerConfigurationArgs{...}
//
//  or:
//
//          nil
type ContainerConfigurationPtrInput interface {
	pulumi.Input

	ToContainerConfigurationPtrOutput() ContainerConfigurationPtrOutput
	ToContainerConfigurationPtrOutputWithContext(context.Context) ContainerConfigurationPtrOutput
}

type containerConfigurationPtrType ContainerConfigurationArgs

func ContainerConfigurationPtr(v *ContainerConfigurationArgs) ContainerConfigurationPtrInput {
	return (*containerConfigurationPtrType)(v)
}

func (*containerConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ContainerConfiguration)(nil)).Elem()
}

func (i *containerConfigurationPtrType) ToContainerConfigurationPtrOutput() ContainerConfigurationPtrOutput {
	return i.ToContainerConfigurationPtrOutputWithContext(context.Background())
}

func (i *containerConfigurationPtrType) ToContainerConfigurationPtrOutputWithContext(ctx context.Context) ContainerConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerConfigurationPtrOutput)
}

type ContainerConfigurationOutput struct{ *pulumi.OutputState }

func (ContainerConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ContainerConfiguration)(nil)).Elem()
}

func (o ContainerConfigurationOutput) ToContainerConfigurationOutput() ContainerConfigurationOutput {
	return o
}

func (o ContainerConfigurationOutput) ToContainerConfigurationOutputWithContext(ctx context.Context) ContainerConfigurationOutput {
	return o
}

func (o ContainerConfigurationOutput) ToContainerConfigurationPtrOutput() ContainerConfigurationPtrOutput {
	return o.ToContainerConfigurationPtrOutputWithContext(context.Background())
}

func (o ContainerConfigurationOutput) ToContainerConfigurationPtrOutputWithContext(ctx context.Context) ContainerConfigurationPtrOutput {
	return o.ApplyT(func(v ContainerConfiguration) *ContainerConfiguration {
		return &v
	}).(ContainerConfigurationPtrOutput)
}

// This is the full image reference, as would be specified to "docker pull". An image will be sourced from the default Docker registry unless the image is fully qualified with an alternative registry.
func (o ContainerConfigurationOutput) ContainerImageNames() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ContainerConfiguration) []string { return v.ContainerImageNames }).(pulumi.StringArrayOutput)
}

// If any images must be downloaded from a private registry which requires credentials, then those credentials must be provided here.
func (o ContainerConfigurationOutput) ContainerRegistries() ContainerRegistryArrayOutput {
	return o.ApplyT(func(v ContainerConfiguration) []ContainerRegistry { return v.ContainerRegistries }).(ContainerRegistryArrayOutput)
}

func (o ContainerConfigurationOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ContainerConfiguration) string { return v.Type }).(pulumi.StringOutput)
}

type ContainerConfigurationPtrOutput struct{ *pulumi.OutputState }

func (ContainerConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ContainerConfiguration)(nil)).Elem()
}

func (o ContainerConfigurationPtrOutput) ToContainerConfigurationPtrOutput() ContainerConfigurationPtrOutput {
	return o
}

func (o ContainerConfigurationPtrOutput) ToContainerConfigurationPtrOutputWithContext(ctx context.Context) ContainerConfigurationPtrOutput {
	return o
}

func (o ContainerConfigurationPtrOutput) Elem() ContainerConfigurationOutput {
	return o.ApplyT(func(v *ContainerConfiguration) ContainerConfiguration { return *v }).(ContainerConfigurationOutput)
}

// This is the full image reference, as would be specified to "docker pull". An image will be sourced from the default Docker registry unless the image is fully qualified with an alternative registry.
func (o ContainerConfigurationPtrOutput) ContainerImageNames() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ContainerConfiguration) []string {
		if v == nil {
			return nil
		}
		return v.ContainerImageNames
	}).(pulumi.StringArrayOutput)
}

// If any images must be downloaded from a private registry which requires credentials, then those credentials must be provided here.
func (o ContainerConfigurationPtrOutput) ContainerRegistries() ContainerRegistryArrayOutput {
	return o.ApplyT(func(v *ContainerConfiguration) []ContainerRegistry {
		if v == nil {
			return nil
		}
		return v.ContainerRegistries
	}).(ContainerRegistryArrayOutput)
}

func (o ContainerConfigurationPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ContainerConfiguration) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

type ContainerConfigurationResponse struct {
	// This is the full image reference, as would be specified to "docker pull". An image will be sourced from the default Docker registry unless the image is fully qualified with an alternative registry.
	ContainerImageNames []string `pulumi:"containerImageNames"`
	// If any images must be downloaded from a private registry which requires credentials, then those credentials must be provided here.
	ContainerRegistries []ContainerRegistryResponse `pulumi:"containerRegistries"`
	Type                string                      `pulumi:"type"`
}

// ContainerConfigurationResponseInput is an input type that accepts ContainerConfigurationResponseArgs and ContainerConfigurationResponseOutput values.
// You can construct a concrete instance of `ContainerConfigurationResponseInput` via:
//
//          ContainerConfigurationResponseArgs{...}
type ContainerConfigurationResponseInput interface {
	pulumi.Input

	ToContainerConfigurationResponseOutput() ContainerConfigurationResponseOutput
	ToContainerConfigurationResponseOutputWithContext(context.Context) ContainerConfigurationResponseOutput
}

type ContainerConfigurationResponseArgs struct {
	// This is the full image reference, as would be specified to "docker pull". An image will be sourced from the default Docker registry unless the image is fully qualified with an alternative registry.
	ContainerImageNames pulumi.StringArrayInput `pulumi:"containerImageNames"`
	// If any images must be downloaded from a private registry which requires credentials, then those credentials must be provided here.
	ContainerRegistries ContainerRegistryResponseArrayInput `pulumi:"containerRegistries"`
	Type                pulumi.StringInput                  `pulumi:"type"`
}

func (ContainerConfigurationResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ContainerConfigurationResponse)(nil)).Elem()
}

func (i ContainerConfigurationResponseArgs) ToContainerConfigurationResponseOutput() ContainerConfigurationResponseOutput {
	return i.ToContainerConfigurationResponseOutputWithContext(context.Background())
}

func (i ContainerConfigurationResponseArgs) ToContainerConfigurationResponseOutputWithContext(ctx context.Context) ContainerConfigurationResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerConfigurationResponseOutput)
}

func (i ContainerConfigurationResponseArgs) ToContainerConfigurationResponsePtrOutput() ContainerConfigurationResponsePtrOutput {
	return i.ToContainerConfigurationResponsePtrOutputWithContext(context.Background())
}

func (i ContainerConfigurationResponseArgs) ToContainerConfigurationResponsePtrOutputWithContext(ctx context.Context) ContainerConfigurationResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerConfigurationResponseOutput).ToContainerConfigurationResponsePtrOutputWithContext(ctx)
}

// ContainerConfigurationResponsePtrInput is an input type that accepts ContainerConfigurationResponseArgs, ContainerConfigurationResponsePtr and ContainerConfigurationResponsePtrOutput values.
// You can construct a concrete instance of `ContainerConfigurationResponsePtrInput` via:
//
//          ContainerConfigurationResponseArgs{...}
//
//  or:
//
//          nil
type ContainerConfigurationResponsePtrInput interface {
	pulumi.Input

	ToContainerConfigurationResponsePtrOutput() ContainerConfigurationResponsePtrOutput
	ToContainerConfigurationResponsePtrOutputWithContext(context.Context) ContainerConfigurationResponsePtrOutput
}

type containerConfigurationResponsePtrType ContainerConfigurationResponseArgs

func ContainerConfigurationResponsePtr(v *ContainerConfigurationResponseArgs) ContainerConfigurationResponsePtrInput {
	return (*containerConfigurationResponsePtrType)(v)
}

func (*containerConfigurationResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ContainerConfigurationResponse)(nil)).Elem()
}

func (i *containerConfigurationResponsePtrType) ToContainerConfigurationResponsePtrOutput() ContainerConfigurationResponsePtrOutput {
	return i.ToContainerConfigurationResponsePtrOutputWithContext(context.Background())
}

func (i *containerConfigurationResponsePtrType) ToContainerConfigurationResponsePtrOutputWithContext(ctx context.Context) ContainerConfigurationResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerConfigurationResponsePtrOutput)
}

type ContainerConfigurationResponseOutput struct{ *pulumi.OutputState }

func (ContainerConfigurationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ContainerConfigurationResponse)(nil)).Elem()
}

func (o ContainerConfigurationResponseOutput) ToContainerConfigurationResponseOutput() ContainerConfigurationResponseOutput {
	return o
}

func (o ContainerConfigurationResponseOutput) ToContainerConfigurationResponseOutputWithContext(ctx context.Context) ContainerConfigurationResponseOutput {
	return o
}

func (o ContainerConfigurationResponseOutput) ToContainerConfigurationResponsePtrOutput() ContainerConfigurationResponsePtrOutput {
	return o.ToContainerConfigurationResponsePtrOutputWithContext(context.Background())
}

func (o ContainerConfigurationResponseOutput) ToContainerConfigurationResponsePtrOutputWithContext(ctx context.Context) ContainerConfigurationResponsePtrOutput {
	return o.ApplyT(func(v ContainerConfigurationResponse) *ContainerConfigurationResponse {
		return &v
	}).(ContainerConfigurationResponsePtrOutput)
}

// This is the full image reference, as would be specified to "docker pull". An image will be sourced from the default Docker registry unless the image is fully qualified with an alternative registry.
func (o ContainerConfigurationResponseOutput) ContainerImageNames() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ContainerConfigurationResponse) []string { return v.ContainerImageNames }).(pulumi.StringArrayOutput)
}

// If any images must be downloaded from a private registry which requires credentials, then those credentials must be provided here.
func (o ContainerConfigurationResponseOutput) ContainerRegistries() ContainerRegistryResponseArrayOutput {
	return o.ApplyT(func(v ContainerConfigurationResponse) []ContainerRegistryResponse { return v.ContainerRegistries }).(ContainerRegistryResponseArrayOutput)
}

func (o ContainerConfigurationResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ContainerConfigurationResponse) string { return v.Type }).(pulumi.StringOutput)
}

type ContainerConfigurationResponsePtrOutput struct{ *pulumi.OutputState }

func (ContainerConfigurationResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ContainerConfigurationResponse)(nil)).Elem()
}

func (o ContainerConfigurationResponsePtrOutput) ToContainerConfigurationResponsePtrOutput() ContainerConfigurationResponsePtrOutput {
	return o
}

func (o ContainerConfigurationResponsePtrOutput) ToContainerConfigurationResponsePtrOutputWithContext(ctx context.Context) ContainerConfigurationResponsePtrOutput {
	return o
}

func (o ContainerConfigurationResponsePtrOutput) Elem() ContainerConfigurationResponseOutput {
	return o.ApplyT(func(v *ContainerConfigurationResponse) ContainerConfigurationResponse { return *v }).(ContainerConfigurationResponseOutput)
}

// This is the full image reference, as would be specified to "docker pull". An image will be sourced from the default Docker registry unless the image is fully qualified with an alternative registry.
func (o ContainerConfigurationResponsePtrOutput) ContainerImageNames() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ContainerConfigurationResponse) []string {
		if v == nil {
			return nil
		}
		return v.ContainerImageNames
	}).(pulumi.StringArrayOutput)
}

// If any images must be downloaded from a private registry which requires credentials, then those credentials must be provided here.
func (o ContainerConfigurationResponsePtrOutput) ContainerRegistries() ContainerRegistryResponseArrayOutput {
	return o.ApplyT(func(v *ContainerConfigurationResponse) []ContainerRegistryResponse {
		if v == nil {
			return nil
		}
		return v.ContainerRegistries
	}).(ContainerRegistryResponseArrayOutput)
}

func (o ContainerConfigurationResponsePtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ContainerConfigurationResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

type ContainerRegistry struct {
	Password string `pulumi:"password"`
	// If omitted, the default is "docker.io".
	RegistryServer *string `pulumi:"registryServer"`
	UserName       string  `pulumi:"userName"`
}

// ContainerRegistryInput is an input type that accepts ContainerRegistryArgs and ContainerRegistryOutput values.
// You can construct a concrete instance of `ContainerRegistryInput` via:
//
//          ContainerRegistryArgs{...}
type ContainerRegistryInput interface {
	pulumi.Input

	ToContainerRegistryOutput() ContainerRegistryOutput
	ToContainerRegistryOutputWithContext(context.Context) ContainerRegistryOutput
}

type ContainerRegistryArgs struct {
	Password pulumi.StringInput `pulumi:"password"`
	// If omitted, the default is "docker.io".
	RegistryServer pulumi.StringPtrInput `pulumi:"registryServer"`
	UserName       pulumi.StringInput    `pulumi:"userName"`
}

func (ContainerRegistryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ContainerRegistry)(nil)).Elem()
}

func (i ContainerRegistryArgs) ToContainerRegistryOutput() ContainerRegistryOutput {
	return i.ToContainerRegistryOutputWithContext(context.Background())
}

func (i ContainerRegistryArgs) ToContainerRegistryOutputWithContext(ctx context.Context) ContainerRegistryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerRegistryOutput)
}

func (i ContainerRegistryArgs) ToContainerRegistryPtrOutput() ContainerRegistryPtrOutput {
	return i.ToContainerRegistryPtrOutputWithContext(context.Background())
}

func (i ContainerRegistryArgs) ToContainerRegistryPtrOutputWithContext(ctx context.Context) ContainerRegistryPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerRegistryOutput).ToContainerRegistryPtrOutputWithContext(ctx)
}

// ContainerRegistryPtrInput is an input type that accepts ContainerRegistryArgs, ContainerRegistryPtr and ContainerRegistryPtrOutput values.
// You can construct a concrete instance of `ContainerRegistryPtrInput` via:
//
//          ContainerRegistryArgs{...}
//
//  or:
//
//          nil
type ContainerRegistryPtrInput interface {
	pulumi.Input

	ToContainerRegistryPtrOutput() ContainerRegistryPtrOutput
	ToContainerRegistryPtrOutputWithContext(context.Context) ContainerRegistryPtrOutput
}

type containerRegistryPtrType ContainerRegistryArgs

func ContainerRegistryPtr(v *ContainerRegistryArgs) ContainerRegistryPtrInput {
	return (*containerRegistryPtrType)(v)
}

func (*containerRegistryPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ContainerRegistry)(nil)).Elem()
}

func (i *containerRegistryPtrType) ToContainerRegistryPtrOutput() ContainerRegistryPtrOutput {
	return i.ToContainerRegistryPtrOutputWithContext(context.Background())
}

func (i *containerRegistryPtrType) ToContainerRegistryPtrOutputWithContext(ctx context.Context) ContainerRegistryPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerRegistryPtrOutput)
}

// ContainerRegistryArrayInput is an input type that accepts ContainerRegistryArray and ContainerRegistryArrayOutput values.
// You can construct a concrete instance of `ContainerRegistryArrayInput` via:
//
//          ContainerRegistryArray{ ContainerRegistryArgs{...} }
type ContainerRegistryArrayInput interface {
	pulumi.Input

	ToContainerRegistryArrayOutput() ContainerRegistryArrayOutput
	ToContainerRegistryArrayOutputWithContext(context.Context) ContainerRegistryArrayOutput
}

type ContainerRegistryArray []ContainerRegistryInput

func (ContainerRegistryArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ContainerRegistry)(nil)).Elem()
}

func (i ContainerRegistryArray) ToContainerRegistryArrayOutput() ContainerRegistryArrayOutput {
	return i.ToContainerRegistryArrayOutputWithContext(context.Background())
}

func (i ContainerRegistryArray) ToContainerRegistryArrayOutputWithContext(ctx context.Context) ContainerRegistryArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerRegistryArrayOutput)
}

type ContainerRegistryOutput struct{ *pulumi.OutputState }

func (ContainerRegistryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ContainerRegistry)(nil)).Elem()
}

func (o ContainerRegistryOutput) ToContainerRegistryOutput() ContainerRegistryOutput {
	return o
}

func (o ContainerRegistryOutput) ToContainerRegistryOutputWithContext(ctx context.Context) ContainerRegistryOutput {
	return o
}

func (o ContainerRegistryOutput) ToContainerRegistryPtrOutput() ContainerRegistryPtrOutput {
	return o.ToContainerRegistryPtrOutputWithContext(context.Background())
}

func (o ContainerRegistryOutput) ToContainerRegistryPtrOutputWithContext(ctx context.Context) ContainerRegistryPtrOutput {
	return o.ApplyT(func(v ContainerRegistry) *ContainerRegistry {
		return &v
	}).(ContainerRegistryPtrOutput)
}
func (o ContainerRegistryOutput) Password() pulumi.StringOutput {
	return o.ApplyT(func(v ContainerRegistry) string { return v.Password }).(pulumi.StringOutput)
}

// If omitted, the default is "docker.io".
func (o ContainerRegistryOutput) RegistryServer() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContainerRegistry) *string { return v.RegistryServer }).(pulumi.StringPtrOutput)
}

func (o ContainerRegistryOutput) UserName() pulumi.StringOutput {
	return o.ApplyT(func(v ContainerRegistry) string { return v.UserName }).(pulumi.StringOutput)
}

type ContainerRegistryPtrOutput struct{ *pulumi.OutputState }

func (ContainerRegistryPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ContainerRegistry)(nil)).Elem()
}

func (o ContainerRegistryPtrOutput) ToContainerRegistryPtrOutput() ContainerRegistryPtrOutput {
	return o
}

func (o ContainerRegistryPtrOutput) ToContainerRegistryPtrOutputWithContext(ctx context.Context) ContainerRegistryPtrOutput {
	return o
}

func (o ContainerRegistryPtrOutput) Elem() ContainerRegistryOutput {
	return o.ApplyT(func(v *ContainerRegistry) ContainerRegistry { return *v }).(ContainerRegistryOutput)
}

func (o ContainerRegistryPtrOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ContainerRegistry) *string {
		if v == nil {
			return nil
		}
		return &v.Password
	}).(pulumi.StringPtrOutput)
}

// If omitted, the default is "docker.io".
func (o ContainerRegistryPtrOutput) RegistryServer() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ContainerRegistry) *string {
		if v == nil {
			return nil
		}
		return v.RegistryServer
	}).(pulumi.StringPtrOutput)
}

func (o ContainerRegistryPtrOutput) UserName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ContainerRegistry) *string {
		if v == nil {
			return nil
		}
		return &v.UserName
	}).(pulumi.StringPtrOutput)
}

type ContainerRegistryArrayOutput struct{ *pulumi.OutputState }

func (ContainerRegistryArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ContainerRegistry)(nil)).Elem()
}

func (o ContainerRegistryArrayOutput) ToContainerRegistryArrayOutput() ContainerRegistryArrayOutput {
	return o
}

func (o ContainerRegistryArrayOutput) ToContainerRegistryArrayOutputWithContext(ctx context.Context) ContainerRegistryArrayOutput {
	return o
}

func (o ContainerRegistryArrayOutput) Index(i pulumi.IntInput) ContainerRegistryOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ContainerRegistry {
		return vs[0].([]ContainerRegistry)[vs[1].(int)]
	}).(ContainerRegistryOutput)
}

type ContainerRegistryResponse struct {
	Password string `pulumi:"password"`
	// If omitted, the default is "docker.io".
	RegistryServer *string `pulumi:"registryServer"`
	UserName       string  `pulumi:"userName"`
}

// ContainerRegistryResponseInput is an input type that accepts ContainerRegistryResponseArgs and ContainerRegistryResponseOutput values.
// You can construct a concrete instance of `ContainerRegistryResponseInput` via:
//
//          ContainerRegistryResponseArgs{...}
type ContainerRegistryResponseInput interface {
	pulumi.Input

	ToContainerRegistryResponseOutput() ContainerRegistryResponseOutput
	ToContainerRegistryResponseOutputWithContext(context.Context) ContainerRegistryResponseOutput
}

type ContainerRegistryResponseArgs struct {
	Password pulumi.StringInput `pulumi:"password"`
	// If omitted, the default is "docker.io".
	RegistryServer pulumi.StringPtrInput `pulumi:"registryServer"`
	UserName       pulumi.StringInput    `pulumi:"userName"`
}

func (ContainerRegistryResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ContainerRegistryResponse)(nil)).Elem()
}

func (i ContainerRegistryResponseArgs) ToContainerRegistryResponseOutput() ContainerRegistryResponseOutput {
	return i.ToContainerRegistryResponseOutputWithContext(context.Background())
}

func (i ContainerRegistryResponseArgs) ToContainerRegistryResponseOutputWithContext(ctx context.Context) ContainerRegistryResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerRegistryResponseOutput)
}

func (i ContainerRegistryResponseArgs) ToContainerRegistryResponsePtrOutput() ContainerRegistryResponsePtrOutput {
	return i.ToContainerRegistryResponsePtrOutputWithContext(context.Background())
}

func (i ContainerRegistryResponseArgs) ToContainerRegistryResponsePtrOutputWithContext(ctx context.Context) ContainerRegistryResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerRegistryResponseOutput).ToContainerRegistryResponsePtrOutputWithContext(ctx)
}

// ContainerRegistryResponsePtrInput is an input type that accepts ContainerRegistryResponseArgs, ContainerRegistryResponsePtr and ContainerRegistryResponsePtrOutput values.
// You can construct a concrete instance of `ContainerRegistryResponsePtrInput` via:
//
//          ContainerRegistryResponseArgs{...}
//
//  or:
//
//          nil
type ContainerRegistryResponsePtrInput interface {
	pulumi.Input

	ToContainerRegistryResponsePtrOutput() ContainerRegistryResponsePtrOutput
	ToContainerRegistryResponsePtrOutputWithContext(context.Context) ContainerRegistryResponsePtrOutput
}

type containerRegistryResponsePtrType ContainerRegistryResponseArgs

func ContainerRegistryResponsePtr(v *ContainerRegistryResponseArgs) ContainerRegistryResponsePtrInput {
	return (*containerRegistryResponsePtrType)(v)
}

func (*containerRegistryResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ContainerRegistryResponse)(nil)).Elem()
}

func (i *containerRegistryResponsePtrType) ToContainerRegistryResponsePtrOutput() ContainerRegistryResponsePtrOutput {
	return i.ToContainerRegistryResponsePtrOutputWithContext(context.Background())
}

func (i *containerRegistryResponsePtrType) ToContainerRegistryResponsePtrOutputWithContext(ctx context.Context) ContainerRegistryResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerRegistryResponsePtrOutput)
}

// ContainerRegistryResponseArrayInput is an input type that accepts ContainerRegistryResponseArray and ContainerRegistryResponseArrayOutput values.
// You can construct a concrete instance of `ContainerRegistryResponseArrayInput` via:
//
//          ContainerRegistryResponseArray{ ContainerRegistryResponseArgs{...} }
type ContainerRegistryResponseArrayInput interface {
	pulumi.Input

	ToContainerRegistryResponseArrayOutput() ContainerRegistryResponseArrayOutput
	ToContainerRegistryResponseArrayOutputWithContext(context.Context) ContainerRegistryResponseArrayOutput
}

type ContainerRegistryResponseArray []ContainerRegistryResponseInput

func (ContainerRegistryResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ContainerRegistryResponse)(nil)).Elem()
}

func (i ContainerRegistryResponseArray) ToContainerRegistryResponseArrayOutput() ContainerRegistryResponseArrayOutput {
	return i.ToContainerRegistryResponseArrayOutputWithContext(context.Background())
}

func (i ContainerRegistryResponseArray) ToContainerRegistryResponseArrayOutputWithContext(ctx context.Context) ContainerRegistryResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerRegistryResponseArrayOutput)
}

type ContainerRegistryResponseOutput struct{ *pulumi.OutputState }

func (ContainerRegistryResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ContainerRegistryResponse)(nil)).Elem()
}

func (o ContainerRegistryResponseOutput) ToContainerRegistryResponseOutput() ContainerRegistryResponseOutput {
	return o
}

func (o ContainerRegistryResponseOutput) ToContainerRegistryResponseOutputWithContext(ctx context.Context) ContainerRegistryResponseOutput {
	return o
}

func (o ContainerRegistryResponseOutput) ToContainerRegistryResponsePtrOutput() ContainerRegistryResponsePtrOutput {
	return o.ToContainerRegistryResponsePtrOutputWithContext(context.Background())
}

func (o ContainerRegistryResponseOutput) ToContainerRegistryResponsePtrOutputWithContext(ctx context.Context) ContainerRegistryResponsePtrOutput {
	return o.ApplyT(func(v ContainerRegistryResponse) *ContainerRegistryResponse {
		return &v
	}).(ContainerRegistryResponsePtrOutput)
}
func (o ContainerRegistryResponseOutput) Password() pulumi.StringOutput {
	return o.ApplyT(func(v ContainerRegistryResponse) string { return v.Password }).(pulumi.StringOutput)
}

// If omitted, the default is "docker.io".
func (o ContainerRegistryResponseOutput) RegistryServer() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContainerRegistryResponse) *string { return v.RegistryServer }).(pulumi.StringPtrOutput)
}

func (o ContainerRegistryResponseOutput) UserName() pulumi.StringOutput {
	return o.ApplyT(func(v ContainerRegistryResponse) string { return v.UserName }).(pulumi.StringOutput)
}

type ContainerRegistryResponsePtrOutput struct{ *pulumi.OutputState }

func (ContainerRegistryResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ContainerRegistryResponse)(nil)).Elem()
}

func (o ContainerRegistryResponsePtrOutput) ToContainerRegistryResponsePtrOutput() ContainerRegistryResponsePtrOutput {
	return o
}

func (o ContainerRegistryResponsePtrOutput) ToContainerRegistryResponsePtrOutputWithContext(ctx context.Context) ContainerRegistryResponsePtrOutput {
	return o
}

func (o ContainerRegistryResponsePtrOutput) Elem() ContainerRegistryResponseOutput {
	return o.ApplyT(func(v *ContainerRegistryResponse) ContainerRegistryResponse { return *v }).(ContainerRegistryResponseOutput)
}

func (o ContainerRegistryResponsePtrOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ContainerRegistryResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Password
	}).(pulumi.StringPtrOutput)
}

// If omitted, the default is "docker.io".
func (o ContainerRegistryResponsePtrOutput) RegistryServer() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ContainerRegistryResponse) *string {
		if v == nil {
			return nil
		}
		return v.RegistryServer
	}).(pulumi.StringPtrOutput)
}

func (o ContainerRegistryResponsePtrOutput) UserName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ContainerRegistryResponse) *string {
		if v == nil {
			return nil
		}
		return &v.UserName
	}).(pulumi.StringPtrOutput)
}

type ContainerRegistryResponseArrayOutput struct{ *pulumi.OutputState }

func (ContainerRegistryResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ContainerRegistryResponse)(nil)).Elem()
}

func (o ContainerRegistryResponseArrayOutput) ToContainerRegistryResponseArrayOutput() ContainerRegistryResponseArrayOutput {
	return o
}

func (o ContainerRegistryResponseArrayOutput) ToContainerRegistryResponseArrayOutputWithContext(ctx context.Context) ContainerRegistryResponseArrayOutput {
	return o
}

func (o ContainerRegistryResponseArrayOutput) Index(i pulumi.IntInput) ContainerRegistryResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ContainerRegistryResponse {
		return vs[0].([]ContainerRegistryResponse)[vs[1].(int)]
	}).(ContainerRegistryResponseOutput)
}

// Settings which will be used by the data disks associated to Compute Nodes in the Pool. When using attached data disks, you need to mount and format the disks from within a VM to use them.
type DataDisk struct {
	// Values are:
	//
	//  none - The caching mode for the disk is not enabled.
	//  readOnly - The caching mode for the disk is read only.
	//  readWrite - The caching mode for the disk is read and write.
	//
	//  The default value for caching is none. For information about the caching options see: https://blogs.msdn.microsoft.com/windowsazurestorage/2012/06/27/exploring-windows-azure-drives-disks-and-images/.
	Caching    *string `pulumi:"caching"`
	DiskSizeGB int     `pulumi:"diskSizeGB"`
	// The lun is used to uniquely identify each data disk. If attaching multiple disks, each should have a distinct lun. The value must be between 0 and 63, inclusive.
	Lun int `pulumi:"lun"`
	// If omitted, the default is "Standard_LRS". Values are:
	//
	//  Standard_LRS - The data disk should use standard locally redundant storage.
	//  Premium_LRS - The data disk should use premium locally redundant storage.
	StorageAccountType *string `pulumi:"storageAccountType"`
}

// DataDiskInput is an input type that accepts DataDiskArgs and DataDiskOutput values.
// You can construct a concrete instance of `DataDiskInput` via:
//
//          DataDiskArgs{...}
type DataDiskInput interface {
	pulumi.Input

	ToDataDiskOutput() DataDiskOutput
	ToDataDiskOutputWithContext(context.Context) DataDiskOutput
}

// Settings which will be used by the data disks associated to Compute Nodes in the Pool. When using attached data disks, you need to mount and format the disks from within a VM to use them.
type DataDiskArgs struct {
	// Values are:
	//
	//  none - The caching mode for the disk is not enabled.
	//  readOnly - The caching mode for the disk is read only.
	//  readWrite - The caching mode for the disk is read and write.
	//
	//  The default value for caching is none. For information about the caching options see: https://blogs.msdn.microsoft.com/windowsazurestorage/2012/06/27/exploring-windows-azure-drives-disks-and-images/.
	Caching    pulumi.StringPtrInput `pulumi:"caching"`
	DiskSizeGB pulumi.IntInput       `pulumi:"diskSizeGB"`
	// The lun is used to uniquely identify each data disk. If attaching multiple disks, each should have a distinct lun. The value must be between 0 and 63, inclusive.
	Lun pulumi.IntInput `pulumi:"lun"`
	// If omitted, the default is "Standard_LRS". Values are:
	//
	//  Standard_LRS - The data disk should use standard locally redundant storage.
	//  Premium_LRS - The data disk should use premium locally redundant storage.
	StorageAccountType pulumi.StringPtrInput `pulumi:"storageAccountType"`
}

func (DataDiskArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DataDisk)(nil)).Elem()
}

func (i DataDiskArgs) ToDataDiskOutput() DataDiskOutput {
	return i.ToDataDiskOutputWithContext(context.Background())
}

func (i DataDiskArgs) ToDataDiskOutputWithContext(ctx context.Context) DataDiskOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataDiskOutput)
}

// DataDiskArrayInput is an input type that accepts DataDiskArray and DataDiskArrayOutput values.
// You can construct a concrete instance of `DataDiskArrayInput` via:
//
//          DataDiskArray{ DataDiskArgs{...} }
type DataDiskArrayInput interface {
	pulumi.Input

	ToDataDiskArrayOutput() DataDiskArrayOutput
	ToDataDiskArrayOutputWithContext(context.Context) DataDiskArrayOutput
}

type DataDiskArray []DataDiskInput

func (DataDiskArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DataDisk)(nil)).Elem()
}

func (i DataDiskArray) ToDataDiskArrayOutput() DataDiskArrayOutput {
	return i.ToDataDiskArrayOutputWithContext(context.Background())
}

func (i DataDiskArray) ToDataDiskArrayOutputWithContext(ctx context.Context) DataDiskArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataDiskArrayOutput)
}

// Settings which will be used by the data disks associated to Compute Nodes in the Pool. When using attached data disks, you need to mount and format the disks from within a VM to use them.
type DataDiskOutput struct{ *pulumi.OutputState }

func (DataDiskOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataDisk)(nil)).Elem()
}

func (o DataDiskOutput) ToDataDiskOutput() DataDiskOutput {
	return o
}

func (o DataDiskOutput) ToDataDiskOutputWithContext(ctx context.Context) DataDiskOutput {
	return o
}

// Values are:
//
//  none - The caching mode for the disk is not enabled.
//  readOnly - The caching mode for the disk is read only.
//  readWrite - The caching mode for the disk is read and write.
//
//  The default value for caching is none. For information about the caching options see: https://blogs.msdn.microsoft.com/windowsazurestorage/2012/06/27/exploring-windows-azure-drives-disks-and-images/.
func (o DataDiskOutput) Caching() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DataDisk) *string { return v.Caching }).(pulumi.StringPtrOutput)
}

func (o DataDiskOutput) DiskSizeGB() pulumi.IntOutput {
	return o.ApplyT(func(v DataDisk) int { return v.DiskSizeGB }).(pulumi.IntOutput)
}

// The lun is used to uniquely identify each data disk. If attaching multiple disks, each should have a distinct lun. The value must be between 0 and 63, inclusive.
func (o DataDiskOutput) Lun() pulumi.IntOutput {
	return o.ApplyT(func(v DataDisk) int { return v.Lun }).(pulumi.IntOutput)
}

// If omitted, the default is "Standard_LRS". Values are:
//
//  Standard_LRS - The data disk should use standard locally redundant storage.
//  Premium_LRS - The data disk should use premium locally redundant storage.
func (o DataDiskOutput) StorageAccountType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DataDisk) *string { return v.StorageAccountType }).(pulumi.StringPtrOutput)
}

type DataDiskArrayOutput struct{ *pulumi.OutputState }

func (DataDiskArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DataDisk)(nil)).Elem()
}

func (o DataDiskArrayOutput) ToDataDiskArrayOutput() DataDiskArrayOutput {
	return o
}

func (o DataDiskArrayOutput) ToDataDiskArrayOutputWithContext(ctx context.Context) DataDiskArrayOutput {
	return o
}

func (o DataDiskArrayOutput) Index(i pulumi.IntInput) DataDiskOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DataDisk {
		return vs[0].([]DataDisk)[vs[1].(int)]
	}).(DataDiskOutput)
}

// Settings which will be used by the data disks associated to Compute Nodes in the Pool. When using attached data disks, you need to mount and format the disks from within a VM to use them.
type DataDiskResponse struct {
	// Values are:
	//
	//  none - The caching mode for the disk is not enabled.
	//  readOnly - The caching mode for the disk is read only.
	//  readWrite - The caching mode for the disk is read and write.
	//
	//  The default value for caching is none. For information about the caching options see: https://blogs.msdn.microsoft.com/windowsazurestorage/2012/06/27/exploring-windows-azure-drives-disks-and-images/.
	Caching    *string `pulumi:"caching"`
	DiskSizeGB int     `pulumi:"diskSizeGB"`
	// The lun is used to uniquely identify each data disk. If attaching multiple disks, each should have a distinct lun. The value must be between 0 and 63, inclusive.
	Lun int `pulumi:"lun"`
	// If omitted, the default is "Standard_LRS". Values are:
	//
	//  Standard_LRS - The data disk should use standard locally redundant storage.
	//  Premium_LRS - The data disk should use premium locally redundant storage.
	StorageAccountType *string `pulumi:"storageAccountType"`
}

// DataDiskResponseInput is an input type that accepts DataDiskResponseArgs and DataDiskResponseOutput values.
// You can construct a concrete instance of `DataDiskResponseInput` via:
//
//          DataDiskResponseArgs{...}
type DataDiskResponseInput interface {
	pulumi.Input

	ToDataDiskResponseOutput() DataDiskResponseOutput
	ToDataDiskResponseOutputWithContext(context.Context) DataDiskResponseOutput
}

// Settings which will be used by the data disks associated to Compute Nodes in the Pool. When using attached data disks, you need to mount and format the disks from within a VM to use them.
type DataDiskResponseArgs struct {
	// Values are:
	//
	//  none - The caching mode for the disk is not enabled.
	//  readOnly - The caching mode for the disk is read only.
	//  readWrite - The caching mode for the disk is read and write.
	//
	//  The default value for caching is none. For information about the caching options see: https://blogs.msdn.microsoft.com/windowsazurestorage/2012/06/27/exploring-windows-azure-drives-disks-and-images/.
	Caching    pulumi.StringPtrInput `pulumi:"caching"`
	DiskSizeGB pulumi.IntInput       `pulumi:"diskSizeGB"`
	// The lun is used to uniquely identify each data disk. If attaching multiple disks, each should have a distinct lun. The value must be between 0 and 63, inclusive.
	Lun pulumi.IntInput `pulumi:"lun"`
	// If omitted, the default is "Standard_LRS". Values are:
	//
	//  Standard_LRS - The data disk should use standard locally redundant storage.
	//  Premium_LRS - The data disk should use premium locally redundant storage.
	StorageAccountType pulumi.StringPtrInput `pulumi:"storageAccountType"`
}

func (DataDiskResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DataDiskResponse)(nil)).Elem()
}

func (i DataDiskResponseArgs) ToDataDiskResponseOutput() DataDiskResponseOutput {
	return i.ToDataDiskResponseOutputWithContext(context.Background())
}

func (i DataDiskResponseArgs) ToDataDiskResponseOutputWithContext(ctx context.Context) DataDiskResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataDiskResponseOutput)
}

// DataDiskResponseArrayInput is an input type that accepts DataDiskResponseArray and DataDiskResponseArrayOutput values.
// You can construct a concrete instance of `DataDiskResponseArrayInput` via:
//
//          DataDiskResponseArray{ DataDiskResponseArgs{...} }
type DataDiskResponseArrayInput interface {
	pulumi.Input

	ToDataDiskResponseArrayOutput() DataDiskResponseArrayOutput
	ToDataDiskResponseArrayOutputWithContext(context.Context) DataDiskResponseArrayOutput
}

type DataDiskResponseArray []DataDiskResponseInput

func (DataDiskResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DataDiskResponse)(nil)).Elem()
}

func (i DataDiskResponseArray) ToDataDiskResponseArrayOutput() DataDiskResponseArrayOutput {
	return i.ToDataDiskResponseArrayOutputWithContext(context.Background())
}

func (i DataDiskResponseArray) ToDataDiskResponseArrayOutputWithContext(ctx context.Context) DataDiskResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataDiskResponseArrayOutput)
}

// Settings which will be used by the data disks associated to Compute Nodes in the Pool. When using attached data disks, you need to mount and format the disks from within a VM to use them.
type DataDiskResponseOutput struct{ *pulumi.OutputState }

func (DataDiskResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataDiskResponse)(nil)).Elem()
}

func (o DataDiskResponseOutput) ToDataDiskResponseOutput() DataDiskResponseOutput {
	return o
}

func (o DataDiskResponseOutput) ToDataDiskResponseOutputWithContext(ctx context.Context) DataDiskResponseOutput {
	return o
}

// Values are:
//
//  none - The caching mode for the disk is not enabled.
//  readOnly - The caching mode for the disk is read only.
//  readWrite - The caching mode for the disk is read and write.
//
//  The default value for caching is none. For information about the caching options see: https://blogs.msdn.microsoft.com/windowsazurestorage/2012/06/27/exploring-windows-azure-drives-disks-and-images/.
func (o DataDiskResponseOutput) Caching() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DataDiskResponse) *string { return v.Caching }).(pulumi.StringPtrOutput)
}

func (o DataDiskResponseOutput) DiskSizeGB() pulumi.IntOutput {
	return o.ApplyT(func(v DataDiskResponse) int { return v.DiskSizeGB }).(pulumi.IntOutput)
}

// The lun is used to uniquely identify each data disk. If attaching multiple disks, each should have a distinct lun. The value must be between 0 and 63, inclusive.
func (o DataDiskResponseOutput) Lun() pulumi.IntOutput {
	return o.ApplyT(func(v DataDiskResponse) int { return v.Lun }).(pulumi.IntOutput)
}

// If omitted, the default is "Standard_LRS". Values are:
//
//  Standard_LRS - The data disk should use standard locally redundant storage.
//  Premium_LRS - The data disk should use premium locally redundant storage.
func (o DataDiskResponseOutput) StorageAccountType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DataDiskResponse) *string { return v.StorageAccountType }).(pulumi.StringPtrOutput)
}

type DataDiskResponseArrayOutput struct{ *pulumi.OutputState }

func (DataDiskResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DataDiskResponse)(nil)).Elem()
}

func (o DataDiskResponseArrayOutput) ToDataDiskResponseArrayOutput() DataDiskResponseArrayOutput {
	return o
}

func (o DataDiskResponseArrayOutput) ToDataDiskResponseArrayOutputWithContext(ctx context.Context) DataDiskResponseArrayOutput {
	return o
}

func (o DataDiskResponseArrayOutput) Index(i pulumi.IntInput) DataDiskResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DataDiskResponse {
		return vs[0].([]DataDiskResponse)[vs[1].(int)]
	}).(DataDiskResponseOutput)
}

// An error response from the Batch service.
type DeleteCertificateErrorResponse struct {
	// An identifier for the error. Codes are invariant and are intended to be consumed programmatically.
	Code string `pulumi:"code"`
	// A list of additional details about the error.
	Details []DeleteCertificateErrorResponse `pulumi:"details"`
	// A message describing the error, intended to be suitable for display in a user interface.
	Message string `pulumi:"message"`
	// The target of the particular error. For example, the name of the property in error.
	Target *string `pulumi:"target"`
}

// DeleteCertificateErrorResponseInput is an input type that accepts DeleteCertificateErrorResponseArgs and DeleteCertificateErrorResponseOutput values.
// You can construct a concrete instance of `DeleteCertificateErrorResponseInput` via:
//
//          DeleteCertificateErrorResponseArgs{...}
type DeleteCertificateErrorResponseInput interface {
	pulumi.Input

	ToDeleteCertificateErrorResponseOutput() DeleteCertificateErrorResponseOutput
	ToDeleteCertificateErrorResponseOutputWithContext(context.Context) DeleteCertificateErrorResponseOutput
}

// An error response from the Batch service.
type DeleteCertificateErrorResponseArgs struct {
	// An identifier for the error. Codes are invariant and are intended to be consumed programmatically.
	Code pulumi.StringInput `pulumi:"code"`
	// A list of additional details about the error.
	Details DeleteCertificateErrorResponseArrayInput `pulumi:"details"`
	// A message describing the error, intended to be suitable for display in a user interface.
	Message pulumi.StringInput `pulumi:"message"`
	// The target of the particular error. For example, the name of the property in error.
	Target pulumi.StringPtrInput `pulumi:"target"`
}

func (DeleteCertificateErrorResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DeleteCertificateErrorResponse)(nil)).Elem()
}

func (i DeleteCertificateErrorResponseArgs) ToDeleteCertificateErrorResponseOutput() DeleteCertificateErrorResponseOutput {
	return i.ToDeleteCertificateErrorResponseOutputWithContext(context.Background())
}

func (i DeleteCertificateErrorResponseArgs) ToDeleteCertificateErrorResponseOutputWithContext(ctx context.Context) DeleteCertificateErrorResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeleteCertificateErrorResponseOutput)
}

func (i DeleteCertificateErrorResponseArgs) ToDeleteCertificateErrorResponsePtrOutput() DeleteCertificateErrorResponsePtrOutput {
	return i.ToDeleteCertificateErrorResponsePtrOutputWithContext(context.Background())
}

func (i DeleteCertificateErrorResponseArgs) ToDeleteCertificateErrorResponsePtrOutputWithContext(ctx context.Context) DeleteCertificateErrorResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeleteCertificateErrorResponseOutput).ToDeleteCertificateErrorResponsePtrOutputWithContext(ctx)
}

// DeleteCertificateErrorResponsePtrInput is an input type that accepts DeleteCertificateErrorResponseArgs, DeleteCertificateErrorResponsePtr and DeleteCertificateErrorResponsePtrOutput values.
// You can construct a concrete instance of `DeleteCertificateErrorResponsePtrInput` via:
//
//          DeleteCertificateErrorResponseArgs{...}
//
//  or:
//
//          nil
type DeleteCertificateErrorResponsePtrInput interface {
	pulumi.Input

	ToDeleteCertificateErrorResponsePtrOutput() DeleteCertificateErrorResponsePtrOutput
	ToDeleteCertificateErrorResponsePtrOutputWithContext(context.Context) DeleteCertificateErrorResponsePtrOutput
}

type deleteCertificateErrorResponsePtrType DeleteCertificateErrorResponseArgs

func DeleteCertificateErrorResponsePtr(v *DeleteCertificateErrorResponseArgs) DeleteCertificateErrorResponsePtrInput {
	return (*deleteCertificateErrorResponsePtrType)(v)
}

func (*deleteCertificateErrorResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DeleteCertificateErrorResponse)(nil)).Elem()
}

func (i *deleteCertificateErrorResponsePtrType) ToDeleteCertificateErrorResponsePtrOutput() DeleteCertificateErrorResponsePtrOutput {
	return i.ToDeleteCertificateErrorResponsePtrOutputWithContext(context.Background())
}

func (i *deleteCertificateErrorResponsePtrType) ToDeleteCertificateErrorResponsePtrOutputWithContext(ctx context.Context) DeleteCertificateErrorResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeleteCertificateErrorResponsePtrOutput)
}

// DeleteCertificateErrorResponseArrayInput is an input type that accepts DeleteCertificateErrorResponseArray and DeleteCertificateErrorResponseArrayOutput values.
// You can construct a concrete instance of `DeleteCertificateErrorResponseArrayInput` via:
//
//          DeleteCertificateErrorResponseArray{ DeleteCertificateErrorResponseArgs{...} }
type DeleteCertificateErrorResponseArrayInput interface {
	pulumi.Input

	ToDeleteCertificateErrorResponseArrayOutput() DeleteCertificateErrorResponseArrayOutput
	ToDeleteCertificateErrorResponseArrayOutputWithContext(context.Context) DeleteCertificateErrorResponseArrayOutput
}

type DeleteCertificateErrorResponseArray []DeleteCertificateErrorResponseInput

func (DeleteCertificateErrorResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DeleteCertificateErrorResponse)(nil)).Elem()
}

func (i DeleteCertificateErrorResponseArray) ToDeleteCertificateErrorResponseArrayOutput() DeleteCertificateErrorResponseArrayOutput {
	return i.ToDeleteCertificateErrorResponseArrayOutputWithContext(context.Background())
}

func (i DeleteCertificateErrorResponseArray) ToDeleteCertificateErrorResponseArrayOutputWithContext(ctx context.Context) DeleteCertificateErrorResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeleteCertificateErrorResponseArrayOutput)
}

// An error response from the Batch service.
type DeleteCertificateErrorResponseOutput struct{ *pulumi.OutputState }

func (DeleteCertificateErrorResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DeleteCertificateErrorResponse)(nil)).Elem()
}

func (o DeleteCertificateErrorResponseOutput) ToDeleteCertificateErrorResponseOutput() DeleteCertificateErrorResponseOutput {
	return o
}

func (o DeleteCertificateErrorResponseOutput) ToDeleteCertificateErrorResponseOutputWithContext(ctx context.Context) DeleteCertificateErrorResponseOutput {
	return o
}

func (o DeleteCertificateErrorResponseOutput) ToDeleteCertificateErrorResponsePtrOutput() DeleteCertificateErrorResponsePtrOutput {
	return o.ToDeleteCertificateErrorResponsePtrOutputWithContext(context.Background())
}

func (o DeleteCertificateErrorResponseOutput) ToDeleteCertificateErrorResponsePtrOutputWithContext(ctx context.Context) DeleteCertificateErrorResponsePtrOutput {
	return o.ApplyT(func(v DeleteCertificateErrorResponse) *DeleteCertificateErrorResponse {
		return &v
	}).(DeleteCertificateErrorResponsePtrOutput)
}

// An identifier for the error. Codes are invariant and are intended to be consumed programmatically.
func (o DeleteCertificateErrorResponseOutput) Code() pulumi.StringOutput {
	return o.ApplyT(func(v DeleteCertificateErrorResponse) string { return v.Code }).(pulumi.StringOutput)
}

// A list of additional details about the error.
func (o DeleteCertificateErrorResponseOutput) Details() DeleteCertificateErrorResponseArrayOutput {
	return o.ApplyT(func(v DeleteCertificateErrorResponse) []DeleteCertificateErrorResponse { return v.Details }).(DeleteCertificateErrorResponseArrayOutput)
}

// A message describing the error, intended to be suitable for display in a user interface.
func (o DeleteCertificateErrorResponseOutput) Message() pulumi.StringOutput {
	return o.ApplyT(func(v DeleteCertificateErrorResponse) string { return v.Message }).(pulumi.StringOutput)
}

// The target of the particular error. For example, the name of the property in error.
func (o DeleteCertificateErrorResponseOutput) Target() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DeleteCertificateErrorResponse) *string { return v.Target }).(pulumi.StringPtrOutput)
}

type DeleteCertificateErrorResponsePtrOutput struct{ *pulumi.OutputState }

func (DeleteCertificateErrorResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DeleteCertificateErrorResponse)(nil)).Elem()
}

func (o DeleteCertificateErrorResponsePtrOutput) ToDeleteCertificateErrorResponsePtrOutput() DeleteCertificateErrorResponsePtrOutput {
	return o
}

func (o DeleteCertificateErrorResponsePtrOutput) ToDeleteCertificateErrorResponsePtrOutputWithContext(ctx context.Context) DeleteCertificateErrorResponsePtrOutput {
	return o
}

func (o DeleteCertificateErrorResponsePtrOutput) Elem() DeleteCertificateErrorResponseOutput {
	return o.ApplyT(func(v *DeleteCertificateErrorResponse) DeleteCertificateErrorResponse { return *v }).(DeleteCertificateErrorResponseOutput)
}

// An identifier for the error. Codes are invariant and are intended to be consumed programmatically.
func (o DeleteCertificateErrorResponsePtrOutput) Code() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DeleteCertificateErrorResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Code
	}).(pulumi.StringPtrOutput)
}

// A list of additional details about the error.
func (o DeleteCertificateErrorResponsePtrOutput) Details() DeleteCertificateErrorResponseArrayOutput {
	return o.ApplyT(func(v *DeleteCertificateErrorResponse) []DeleteCertificateErrorResponse {
		if v == nil {
			return nil
		}
		return v.Details
	}).(DeleteCertificateErrorResponseArrayOutput)
}

// A message describing the error, intended to be suitable for display in a user interface.
func (o DeleteCertificateErrorResponsePtrOutput) Message() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DeleteCertificateErrorResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Message
	}).(pulumi.StringPtrOutput)
}

// The target of the particular error. For example, the name of the property in error.
func (o DeleteCertificateErrorResponsePtrOutput) Target() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DeleteCertificateErrorResponse) *string {
		if v == nil {
			return nil
		}
		return v.Target
	}).(pulumi.StringPtrOutput)
}

type DeleteCertificateErrorResponseArrayOutput struct{ *pulumi.OutputState }

func (DeleteCertificateErrorResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DeleteCertificateErrorResponse)(nil)).Elem()
}

func (o DeleteCertificateErrorResponseArrayOutput) ToDeleteCertificateErrorResponseArrayOutput() DeleteCertificateErrorResponseArrayOutput {
	return o
}

func (o DeleteCertificateErrorResponseArrayOutput) ToDeleteCertificateErrorResponseArrayOutputWithContext(ctx context.Context) DeleteCertificateErrorResponseArrayOutput {
	return o
}

func (o DeleteCertificateErrorResponseArrayOutput) Index(i pulumi.IntInput) DeleteCertificateErrorResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DeleteCertificateErrorResponse {
		return vs[0].([]DeleteCertificateErrorResponse)[vs[1].(int)]
	}).(DeleteCertificateErrorResponseOutput)
}

type DeploymentConfiguration struct {
	// This property and virtualMachineConfiguration are mutually exclusive and one of the properties must be specified. This property cannot be specified if the Batch account was created with its poolAllocationMode property set to 'UserSubscription'.
	CloudServiceConfiguration *CloudServiceConfiguration `pulumi:"cloudServiceConfiguration"`
	// This property and cloudServiceConfiguration are mutually exclusive and one of the properties must be specified.
	VirtualMachineConfiguration *VirtualMachineConfiguration `pulumi:"virtualMachineConfiguration"`
}

// DeploymentConfigurationInput is an input type that accepts DeploymentConfigurationArgs and DeploymentConfigurationOutput values.
// You can construct a concrete instance of `DeploymentConfigurationInput` via:
//
//          DeploymentConfigurationArgs{...}
type DeploymentConfigurationInput interface {
	pulumi.Input

	ToDeploymentConfigurationOutput() DeploymentConfigurationOutput
	ToDeploymentConfigurationOutputWithContext(context.Context) DeploymentConfigurationOutput
}

type DeploymentConfigurationArgs struct {
	// This property and virtualMachineConfiguration are mutually exclusive and one of the properties must be specified. This property cannot be specified if the Batch account was created with its poolAllocationMode property set to 'UserSubscription'.
	CloudServiceConfiguration CloudServiceConfigurationPtrInput `pulumi:"cloudServiceConfiguration"`
	// This property and cloudServiceConfiguration are mutually exclusive and one of the properties must be specified.
	VirtualMachineConfiguration VirtualMachineConfigurationPtrInput `pulumi:"virtualMachineConfiguration"`
}

func (DeploymentConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DeploymentConfiguration)(nil)).Elem()
}

func (i DeploymentConfigurationArgs) ToDeploymentConfigurationOutput() DeploymentConfigurationOutput {
	return i.ToDeploymentConfigurationOutputWithContext(context.Background())
}

func (i DeploymentConfigurationArgs) ToDeploymentConfigurationOutputWithContext(ctx context.Context) DeploymentConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeploymentConfigurationOutput)
}

func (i DeploymentConfigurationArgs) ToDeploymentConfigurationPtrOutput() DeploymentConfigurationPtrOutput {
	return i.ToDeploymentConfigurationPtrOutputWithContext(context.Background())
}

func (i DeploymentConfigurationArgs) ToDeploymentConfigurationPtrOutputWithContext(ctx context.Context) DeploymentConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeploymentConfigurationOutput).ToDeploymentConfigurationPtrOutputWithContext(ctx)
}

// DeploymentConfigurationPtrInput is an input type that accepts DeploymentConfigurationArgs, DeploymentConfigurationPtr and DeploymentConfigurationPtrOutput values.
// You can construct a concrete instance of `DeploymentConfigurationPtrInput` via:
//
//          DeploymentConfigurationArgs{...}
//
//  or:
//
//          nil
type DeploymentConfigurationPtrInput interface {
	pulumi.Input

	ToDeploymentConfigurationPtrOutput() DeploymentConfigurationPtrOutput
	ToDeploymentConfigurationPtrOutputWithContext(context.Context) DeploymentConfigurationPtrOutput
}

type deploymentConfigurationPtrType DeploymentConfigurationArgs

func DeploymentConfigurationPtr(v *DeploymentConfigurationArgs) DeploymentConfigurationPtrInput {
	return (*deploymentConfigurationPtrType)(v)
}

func (*deploymentConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DeploymentConfiguration)(nil)).Elem()
}

func (i *deploymentConfigurationPtrType) ToDeploymentConfigurationPtrOutput() DeploymentConfigurationPtrOutput {
	return i.ToDeploymentConfigurationPtrOutputWithContext(context.Background())
}

func (i *deploymentConfigurationPtrType) ToDeploymentConfigurationPtrOutputWithContext(ctx context.Context) DeploymentConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeploymentConfigurationPtrOutput)
}

type DeploymentConfigurationOutput struct{ *pulumi.OutputState }

func (DeploymentConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DeploymentConfiguration)(nil)).Elem()
}

func (o DeploymentConfigurationOutput) ToDeploymentConfigurationOutput() DeploymentConfigurationOutput {
	return o
}

func (o DeploymentConfigurationOutput) ToDeploymentConfigurationOutputWithContext(ctx context.Context) DeploymentConfigurationOutput {
	return o
}

func (o DeploymentConfigurationOutput) ToDeploymentConfigurationPtrOutput() DeploymentConfigurationPtrOutput {
	return o.ToDeploymentConfigurationPtrOutputWithContext(context.Background())
}

func (o DeploymentConfigurationOutput) ToDeploymentConfigurationPtrOutputWithContext(ctx context.Context) DeploymentConfigurationPtrOutput {
	return o.ApplyT(func(v DeploymentConfiguration) *DeploymentConfiguration {
		return &v
	}).(DeploymentConfigurationPtrOutput)
}

// This property and virtualMachineConfiguration are mutually exclusive and one of the properties must be specified. This property cannot be specified if the Batch account was created with its poolAllocationMode property set to 'UserSubscription'.
func (o DeploymentConfigurationOutput) CloudServiceConfiguration() CloudServiceConfigurationPtrOutput {
	return o.ApplyT(func(v DeploymentConfiguration) *CloudServiceConfiguration { return v.CloudServiceConfiguration }).(CloudServiceConfigurationPtrOutput)
}

// This property and cloudServiceConfiguration are mutually exclusive and one of the properties must be specified.
func (o DeploymentConfigurationOutput) VirtualMachineConfiguration() VirtualMachineConfigurationPtrOutput {
	return o.ApplyT(func(v DeploymentConfiguration) *VirtualMachineConfiguration { return v.VirtualMachineConfiguration }).(VirtualMachineConfigurationPtrOutput)
}

type DeploymentConfigurationPtrOutput struct{ *pulumi.OutputState }

func (DeploymentConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DeploymentConfiguration)(nil)).Elem()
}

func (o DeploymentConfigurationPtrOutput) ToDeploymentConfigurationPtrOutput() DeploymentConfigurationPtrOutput {
	return o
}

func (o DeploymentConfigurationPtrOutput) ToDeploymentConfigurationPtrOutputWithContext(ctx context.Context) DeploymentConfigurationPtrOutput {
	return o
}

func (o DeploymentConfigurationPtrOutput) Elem() DeploymentConfigurationOutput {
	return o.ApplyT(func(v *DeploymentConfiguration) DeploymentConfiguration { return *v }).(DeploymentConfigurationOutput)
}

// This property and virtualMachineConfiguration are mutually exclusive and one of the properties must be specified. This property cannot be specified if the Batch account was created with its poolAllocationMode property set to 'UserSubscription'.
func (o DeploymentConfigurationPtrOutput) CloudServiceConfiguration() CloudServiceConfigurationPtrOutput {
	return o.ApplyT(func(v *DeploymentConfiguration) *CloudServiceConfiguration {
		if v == nil {
			return nil
		}
		return v.CloudServiceConfiguration
	}).(CloudServiceConfigurationPtrOutput)
}

// This property and cloudServiceConfiguration are mutually exclusive and one of the properties must be specified.
func (o DeploymentConfigurationPtrOutput) VirtualMachineConfiguration() VirtualMachineConfigurationPtrOutput {
	return o.ApplyT(func(v *DeploymentConfiguration) *VirtualMachineConfiguration {
		if v == nil {
			return nil
		}
		return v.VirtualMachineConfiguration
	}).(VirtualMachineConfigurationPtrOutput)
}

type DeploymentConfigurationResponse struct {
	// This property and virtualMachineConfiguration are mutually exclusive and one of the properties must be specified. This property cannot be specified if the Batch account was created with its poolAllocationMode property set to 'UserSubscription'.
	CloudServiceConfiguration *CloudServiceConfigurationResponse `pulumi:"cloudServiceConfiguration"`
	// This property and cloudServiceConfiguration are mutually exclusive and one of the properties must be specified.
	VirtualMachineConfiguration *VirtualMachineConfigurationResponse `pulumi:"virtualMachineConfiguration"`
}

// DeploymentConfigurationResponseInput is an input type that accepts DeploymentConfigurationResponseArgs and DeploymentConfigurationResponseOutput values.
// You can construct a concrete instance of `DeploymentConfigurationResponseInput` via:
//
//          DeploymentConfigurationResponseArgs{...}
type DeploymentConfigurationResponseInput interface {
	pulumi.Input

	ToDeploymentConfigurationResponseOutput() DeploymentConfigurationResponseOutput
	ToDeploymentConfigurationResponseOutputWithContext(context.Context) DeploymentConfigurationResponseOutput
}

type DeploymentConfigurationResponseArgs struct {
	// This property and virtualMachineConfiguration are mutually exclusive and one of the properties must be specified. This property cannot be specified if the Batch account was created with its poolAllocationMode property set to 'UserSubscription'.
	CloudServiceConfiguration CloudServiceConfigurationResponsePtrInput `pulumi:"cloudServiceConfiguration"`
	// This property and cloudServiceConfiguration are mutually exclusive and one of the properties must be specified.
	VirtualMachineConfiguration VirtualMachineConfigurationResponsePtrInput `pulumi:"virtualMachineConfiguration"`
}

func (DeploymentConfigurationResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DeploymentConfigurationResponse)(nil)).Elem()
}

func (i DeploymentConfigurationResponseArgs) ToDeploymentConfigurationResponseOutput() DeploymentConfigurationResponseOutput {
	return i.ToDeploymentConfigurationResponseOutputWithContext(context.Background())
}

func (i DeploymentConfigurationResponseArgs) ToDeploymentConfigurationResponseOutputWithContext(ctx context.Context) DeploymentConfigurationResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeploymentConfigurationResponseOutput)
}

func (i DeploymentConfigurationResponseArgs) ToDeploymentConfigurationResponsePtrOutput() DeploymentConfigurationResponsePtrOutput {
	return i.ToDeploymentConfigurationResponsePtrOutputWithContext(context.Background())
}

func (i DeploymentConfigurationResponseArgs) ToDeploymentConfigurationResponsePtrOutputWithContext(ctx context.Context) DeploymentConfigurationResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeploymentConfigurationResponseOutput).ToDeploymentConfigurationResponsePtrOutputWithContext(ctx)
}

// DeploymentConfigurationResponsePtrInput is an input type that accepts DeploymentConfigurationResponseArgs, DeploymentConfigurationResponsePtr and DeploymentConfigurationResponsePtrOutput values.
// You can construct a concrete instance of `DeploymentConfigurationResponsePtrInput` via:
//
//          DeploymentConfigurationResponseArgs{...}
//
//  or:
//
//          nil
type DeploymentConfigurationResponsePtrInput interface {
	pulumi.Input

	ToDeploymentConfigurationResponsePtrOutput() DeploymentConfigurationResponsePtrOutput
	ToDeploymentConfigurationResponsePtrOutputWithContext(context.Context) DeploymentConfigurationResponsePtrOutput
}

type deploymentConfigurationResponsePtrType DeploymentConfigurationResponseArgs

func DeploymentConfigurationResponsePtr(v *DeploymentConfigurationResponseArgs) DeploymentConfigurationResponsePtrInput {
	return (*deploymentConfigurationResponsePtrType)(v)
}

func (*deploymentConfigurationResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DeploymentConfigurationResponse)(nil)).Elem()
}

func (i *deploymentConfigurationResponsePtrType) ToDeploymentConfigurationResponsePtrOutput() DeploymentConfigurationResponsePtrOutput {
	return i.ToDeploymentConfigurationResponsePtrOutputWithContext(context.Background())
}

func (i *deploymentConfigurationResponsePtrType) ToDeploymentConfigurationResponsePtrOutputWithContext(ctx context.Context) DeploymentConfigurationResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeploymentConfigurationResponsePtrOutput)
}

type DeploymentConfigurationResponseOutput struct{ *pulumi.OutputState }

func (DeploymentConfigurationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DeploymentConfigurationResponse)(nil)).Elem()
}

func (o DeploymentConfigurationResponseOutput) ToDeploymentConfigurationResponseOutput() DeploymentConfigurationResponseOutput {
	return o
}

func (o DeploymentConfigurationResponseOutput) ToDeploymentConfigurationResponseOutputWithContext(ctx context.Context) DeploymentConfigurationResponseOutput {
	return o
}

func (o DeploymentConfigurationResponseOutput) ToDeploymentConfigurationResponsePtrOutput() DeploymentConfigurationResponsePtrOutput {
	return o.ToDeploymentConfigurationResponsePtrOutputWithContext(context.Background())
}

func (o DeploymentConfigurationResponseOutput) ToDeploymentConfigurationResponsePtrOutputWithContext(ctx context.Context) DeploymentConfigurationResponsePtrOutput {
	return o.ApplyT(func(v DeploymentConfigurationResponse) *DeploymentConfigurationResponse {
		return &v
	}).(DeploymentConfigurationResponsePtrOutput)
}

// This property and virtualMachineConfiguration are mutually exclusive and one of the properties must be specified. This property cannot be specified if the Batch account was created with its poolAllocationMode property set to 'UserSubscription'.
func (o DeploymentConfigurationResponseOutput) CloudServiceConfiguration() CloudServiceConfigurationResponsePtrOutput {
	return o.ApplyT(func(v DeploymentConfigurationResponse) *CloudServiceConfigurationResponse {
		return v.CloudServiceConfiguration
	}).(CloudServiceConfigurationResponsePtrOutput)
}

// This property and cloudServiceConfiguration are mutually exclusive and one of the properties must be specified.
func (o DeploymentConfigurationResponseOutput) VirtualMachineConfiguration() VirtualMachineConfigurationResponsePtrOutput {
	return o.ApplyT(func(v DeploymentConfigurationResponse) *VirtualMachineConfigurationResponse {
		return v.VirtualMachineConfiguration
	}).(VirtualMachineConfigurationResponsePtrOutput)
}

type DeploymentConfigurationResponsePtrOutput struct{ *pulumi.OutputState }

func (DeploymentConfigurationResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DeploymentConfigurationResponse)(nil)).Elem()
}

func (o DeploymentConfigurationResponsePtrOutput) ToDeploymentConfigurationResponsePtrOutput() DeploymentConfigurationResponsePtrOutput {
	return o
}

func (o DeploymentConfigurationResponsePtrOutput) ToDeploymentConfigurationResponsePtrOutputWithContext(ctx context.Context) DeploymentConfigurationResponsePtrOutput {
	return o
}

func (o DeploymentConfigurationResponsePtrOutput) Elem() DeploymentConfigurationResponseOutput {
	return o.ApplyT(func(v *DeploymentConfigurationResponse) DeploymentConfigurationResponse { return *v }).(DeploymentConfigurationResponseOutput)
}

// This property and virtualMachineConfiguration are mutually exclusive and one of the properties must be specified. This property cannot be specified if the Batch account was created with its poolAllocationMode property set to 'UserSubscription'.
func (o DeploymentConfigurationResponsePtrOutput) CloudServiceConfiguration() CloudServiceConfigurationResponsePtrOutput {
	return o.ApplyT(func(v *DeploymentConfigurationResponse) *CloudServiceConfigurationResponse {
		if v == nil {
			return nil
		}
		return v.CloudServiceConfiguration
	}).(CloudServiceConfigurationResponsePtrOutput)
}

// This property and cloudServiceConfiguration are mutually exclusive and one of the properties must be specified.
func (o DeploymentConfigurationResponsePtrOutput) VirtualMachineConfiguration() VirtualMachineConfigurationResponsePtrOutput {
	return o.ApplyT(func(v *DeploymentConfigurationResponse) *VirtualMachineConfigurationResponse {
		if v == nil {
			return nil
		}
		return v.VirtualMachineConfiguration
	}).(VirtualMachineConfigurationResponsePtrOutput)
}

// The disk encryption configuration applied on compute nodes in the pool. Disk encryption configuration is not supported on Linux pool created with Virtual Machine Image or Shared Image Gallery Image.
type DiskEncryptionConfiguration struct {
	// On Linux pool, only "TemporaryDisk" is supported; on Windows pool, "OsDisk" and "TemporaryDisk" must be specified.
	Targets []string `pulumi:"targets"`
}

// DiskEncryptionConfigurationInput is an input type that accepts DiskEncryptionConfigurationArgs and DiskEncryptionConfigurationOutput values.
// You can construct a concrete instance of `DiskEncryptionConfigurationInput` via:
//
//          DiskEncryptionConfigurationArgs{...}
type DiskEncryptionConfigurationInput interface {
	pulumi.Input

	ToDiskEncryptionConfigurationOutput() DiskEncryptionConfigurationOutput
	ToDiskEncryptionConfigurationOutputWithContext(context.Context) DiskEncryptionConfigurationOutput
}

// The disk encryption configuration applied on compute nodes in the pool. Disk encryption configuration is not supported on Linux pool created with Virtual Machine Image or Shared Image Gallery Image.
type DiskEncryptionConfigurationArgs struct {
	// On Linux pool, only "TemporaryDisk" is supported; on Windows pool, "OsDisk" and "TemporaryDisk" must be specified.
	Targets pulumi.StringArrayInput `pulumi:"targets"`
}

func (DiskEncryptionConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DiskEncryptionConfiguration)(nil)).Elem()
}

func (i DiskEncryptionConfigurationArgs) ToDiskEncryptionConfigurationOutput() DiskEncryptionConfigurationOutput {
	return i.ToDiskEncryptionConfigurationOutputWithContext(context.Background())
}

func (i DiskEncryptionConfigurationArgs) ToDiskEncryptionConfigurationOutputWithContext(ctx context.Context) DiskEncryptionConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DiskEncryptionConfigurationOutput)
}

func (i DiskEncryptionConfigurationArgs) ToDiskEncryptionConfigurationPtrOutput() DiskEncryptionConfigurationPtrOutput {
	return i.ToDiskEncryptionConfigurationPtrOutputWithContext(context.Background())
}

func (i DiskEncryptionConfigurationArgs) ToDiskEncryptionConfigurationPtrOutputWithContext(ctx context.Context) DiskEncryptionConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DiskEncryptionConfigurationOutput).ToDiskEncryptionConfigurationPtrOutputWithContext(ctx)
}

// DiskEncryptionConfigurationPtrInput is an input type that accepts DiskEncryptionConfigurationArgs, DiskEncryptionConfigurationPtr and DiskEncryptionConfigurationPtrOutput values.
// You can construct a concrete instance of `DiskEncryptionConfigurationPtrInput` via:
//
//          DiskEncryptionConfigurationArgs{...}
//
//  or:
//
//          nil
type DiskEncryptionConfigurationPtrInput interface {
	pulumi.Input

	ToDiskEncryptionConfigurationPtrOutput() DiskEncryptionConfigurationPtrOutput
	ToDiskEncryptionConfigurationPtrOutputWithContext(context.Context) DiskEncryptionConfigurationPtrOutput
}

type diskEncryptionConfigurationPtrType DiskEncryptionConfigurationArgs

func DiskEncryptionConfigurationPtr(v *DiskEncryptionConfigurationArgs) DiskEncryptionConfigurationPtrInput {
	return (*diskEncryptionConfigurationPtrType)(v)
}

func (*diskEncryptionConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DiskEncryptionConfiguration)(nil)).Elem()
}

func (i *diskEncryptionConfigurationPtrType) ToDiskEncryptionConfigurationPtrOutput() DiskEncryptionConfigurationPtrOutput {
	return i.ToDiskEncryptionConfigurationPtrOutputWithContext(context.Background())
}

func (i *diskEncryptionConfigurationPtrType) ToDiskEncryptionConfigurationPtrOutputWithContext(ctx context.Context) DiskEncryptionConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DiskEncryptionConfigurationPtrOutput)
}

// The disk encryption configuration applied on compute nodes in the pool. Disk encryption configuration is not supported on Linux pool created with Virtual Machine Image or Shared Image Gallery Image.
type DiskEncryptionConfigurationOutput struct{ *pulumi.OutputState }

func (DiskEncryptionConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DiskEncryptionConfiguration)(nil)).Elem()
}

func (o DiskEncryptionConfigurationOutput) ToDiskEncryptionConfigurationOutput() DiskEncryptionConfigurationOutput {
	return o
}

func (o DiskEncryptionConfigurationOutput) ToDiskEncryptionConfigurationOutputWithContext(ctx context.Context) DiskEncryptionConfigurationOutput {
	return o
}

func (o DiskEncryptionConfigurationOutput) ToDiskEncryptionConfigurationPtrOutput() DiskEncryptionConfigurationPtrOutput {
	return o.ToDiskEncryptionConfigurationPtrOutputWithContext(context.Background())
}

func (o DiskEncryptionConfigurationOutput) ToDiskEncryptionConfigurationPtrOutputWithContext(ctx context.Context) DiskEncryptionConfigurationPtrOutput {
	return o.ApplyT(func(v DiskEncryptionConfiguration) *DiskEncryptionConfiguration {
		return &v
	}).(DiskEncryptionConfigurationPtrOutput)
}

// On Linux pool, only "TemporaryDisk" is supported; on Windows pool, "OsDisk" and "TemporaryDisk" must be specified.
func (o DiskEncryptionConfigurationOutput) Targets() pulumi.StringArrayOutput {
	return o.ApplyT(func(v DiskEncryptionConfiguration) []string { return v.Targets }).(pulumi.StringArrayOutput)
}

type DiskEncryptionConfigurationPtrOutput struct{ *pulumi.OutputState }

func (DiskEncryptionConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DiskEncryptionConfiguration)(nil)).Elem()
}

func (o DiskEncryptionConfigurationPtrOutput) ToDiskEncryptionConfigurationPtrOutput() DiskEncryptionConfigurationPtrOutput {
	return o
}

func (o DiskEncryptionConfigurationPtrOutput) ToDiskEncryptionConfigurationPtrOutputWithContext(ctx context.Context) DiskEncryptionConfigurationPtrOutput {
	return o
}

func (o DiskEncryptionConfigurationPtrOutput) Elem() DiskEncryptionConfigurationOutput {
	return o.ApplyT(func(v *DiskEncryptionConfiguration) DiskEncryptionConfiguration { return *v }).(DiskEncryptionConfigurationOutput)
}

// On Linux pool, only "TemporaryDisk" is supported; on Windows pool, "OsDisk" and "TemporaryDisk" must be specified.
func (o DiskEncryptionConfigurationPtrOutput) Targets() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *DiskEncryptionConfiguration) []string {
		if v == nil {
			return nil
		}
		return v.Targets
	}).(pulumi.StringArrayOutput)
}

// The disk encryption configuration applied on compute nodes in the pool. Disk encryption configuration is not supported on Linux pool created with Virtual Machine Image or Shared Image Gallery Image.
type DiskEncryptionConfigurationResponse struct {
	// On Linux pool, only "TemporaryDisk" is supported; on Windows pool, "OsDisk" and "TemporaryDisk" must be specified.
	Targets []string `pulumi:"targets"`
}

// DiskEncryptionConfigurationResponseInput is an input type that accepts DiskEncryptionConfigurationResponseArgs and DiskEncryptionConfigurationResponseOutput values.
// You can construct a concrete instance of `DiskEncryptionConfigurationResponseInput` via:
//
//          DiskEncryptionConfigurationResponseArgs{...}
type DiskEncryptionConfigurationResponseInput interface {
	pulumi.Input

	ToDiskEncryptionConfigurationResponseOutput() DiskEncryptionConfigurationResponseOutput
	ToDiskEncryptionConfigurationResponseOutputWithContext(context.Context) DiskEncryptionConfigurationResponseOutput
}

// The disk encryption configuration applied on compute nodes in the pool. Disk encryption configuration is not supported on Linux pool created with Virtual Machine Image or Shared Image Gallery Image.
type DiskEncryptionConfigurationResponseArgs struct {
	// On Linux pool, only "TemporaryDisk" is supported; on Windows pool, "OsDisk" and "TemporaryDisk" must be specified.
	Targets pulumi.StringArrayInput `pulumi:"targets"`
}

func (DiskEncryptionConfigurationResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DiskEncryptionConfigurationResponse)(nil)).Elem()
}

func (i DiskEncryptionConfigurationResponseArgs) ToDiskEncryptionConfigurationResponseOutput() DiskEncryptionConfigurationResponseOutput {
	return i.ToDiskEncryptionConfigurationResponseOutputWithContext(context.Background())
}

func (i DiskEncryptionConfigurationResponseArgs) ToDiskEncryptionConfigurationResponseOutputWithContext(ctx context.Context) DiskEncryptionConfigurationResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DiskEncryptionConfigurationResponseOutput)
}

func (i DiskEncryptionConfigurationResponseArgs) ToDiskEncryptionConfigurationResponsePtrOutput() DiskEncryptionConfigurationResponsePtrOutput {
	return i.ToDiskEncryptionConfigurationResponsePtrOutputWithContext(context.Background())
}

func (i DiskEncryptionConfigurationResponseArgs) ToDiskEncryptionConfigurationResponsePtrOutputWithContext(ctx context.Context) DiskEncryptionConfigurationResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DiskEncryptionConfigurationResponseOutput).ToDiskEncryptionConfigurationResponsePtrOutputWithContext(ctx)
}

// DiskEncryptionConfigurationResponsePtrInput is an input type that accepts DiskEncryptionConfigurationResponseArgs, DiskEncryptionConfigurationResponsePtr and DiskEncryptionConfigurationResponsePtrOutput values.
// You can construct a concrete instance of `DiskEncryptionConfigurationResponsePtrInput` via:
//
//          DiskEncryptionConfigurationResponseArgs{...}
//
//  or:
//
//          nil
type DiskEncryptionConfigurationResponsePtrInput interface {
	pulumi.Input

	ToDiskEncryptionConfigurationResponsePtrOutput() DiskEncryptionConfigurationResponsePtrOutput
	ToDiskEncryptionConfigurationResponsePtrOutputWithContext(context.Context) DiskEncryptionConfigurationResponsePtrOutput
}

type diskEncryptionConfigurationResponsePtrType DiskEncryptionConfigurationResponseArgs

func DiskEncryptionConfigurationResponsePtr(v *DiskEncryptionConfigurationResponseArgs) DiskEncryptionConfigurationResponsePtrInput {
	return (*diskEncryptionConfigurationResponsePtrType)(v)
}

func (*diskEncryptionConfigurationResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DiskEncryptionConfigurationResponse)(nil)).Elem()
}

func (i *diskEncryptionConfigurationResponsePtrType) ToDiskEncryptionConfigurationResponsePtrOutput() DiskEncryptionConfigurationResponsePtrOutput {
	return i.ToDiskEncryptionConfigurationResponsePtrOutputWithContext(context.Background())
}

func (i *diskEncryptionConfigurationResponsePtrType) ToDiskEncryptionConfigurationResponsePtrOutputWithContext(ctx context.Context) DiskEncryptionConfigurationResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DiskEncryptionConfigurationResponsePtrOutput)
}

// The disk encryption configuration applied on compute nodes in the pool. Disk encryption configuration is not supported on Linux pool created with Virtual Machine Image or Shared Image Gallery Image.
type DiskEncryptionConfigurationResponseOutput struct{ *pulumi.OutputState }

func (DiskEncryptionConfigurationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DiskEncryptionConfigurationResponse)(nil)).Elem()
}

func (o DiskEncryptionConfigurationResponseOutput) ToDiskEncryptionConfigurationResponseOutput() DiskEncryptionConfigurationResponseOutput {
	return o
}

func (o DiskEncryptionConfigurationResponseOutput) ToDiskEncryptionConfigurationResponseOutputWithContext(ctx context.Context) DiskEncryptionConfigurationResponseOutput {
	return o
}

func (o DiskEncryptionConfigurationResponseOutput) ToDiskEncryptionConfigurationResponsePtrOutput() DiskEncryptionConfigurationResponsePtrOutput {
	return o.ToDiskEncryptionConfigurationResponsePtrOutputWithContext(context.Background())
}

func (o DiskEncryptionConfigurationResponseOutput) ToDiskEncryptionConfigurationResponsePtrOutputWithContext(ctx context.Context) DiskEncryptionConfigurationResponsePtrOutput {
	return o.ApplyT(func(v DiskEncryptionConfigurationResponse) *DiskEncryptionConfigurationResponse {
		return &v
	}).(DiskEncryptionConfigurationResponsePtrOutput)
}

// On Linux pool, only "TemporaryDisk" is supported; on Windows pool, "OsDisk" and "TemporaryDisk" must be specified.
func (o DiskEncryptionConfigurationResponseOutput) Targets() pulumi.StringArrayOutput {
	return o.ApplyT(func(v DiskEncryptionConfigurationResponse) []string { return v.Targets }).(pulumi.StringArrayOutput)
}

type DiskEncryptionConfigurationResponsePtrOutput struct{ *pulumi.OutputState }

func (DiskEncryptionConfigurationResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DiskEncryptionConfigurationResponse)(nil)).Elem()
}

func (o DiskEncryptionConfigurationResponsePtrOutput) ToDiskEncryptionConfigurationResponsePtrOutput() DiskEncryptionConfigurationResponsePtrOutput {
	return o
}

func (o DiskEncryptionConfigurationResponsePtrOutput) ToDiskEncryptionConfigurationResponsePtrOutputWithContext(ctx context.Context) DiskEncryptionConfigurationResponsePtrOutput {
	return o
}

func (o DiskEncryptionConfigurationResponsePtrOutput) Elem() DiskEncryptionConfigurationResponseOutput {
	return o.ApplyT(func(v *DiskEncryptionConfigurationResponse) DiskEncryptionConfigurationResponse { return *v }).(DiskEncryptionConfigurationResponseOutput)
}

// On Linux pool, only "TemporaryDisk" is supported; on Windows pool, "OsDisk" and "TemporaryDisk" must be specified.
func (o DiskEncryptionConfigurationResponsePtrOutput) Targets() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *DiskEncryptionConfigurationResponse) []string {
		if v == nil {
			return nil
		}
		return v.Targets
	}).(pulumi.StringArrayOutput)
}

// Configures how customer data is encrypted inside the Batch account. By default, accounts are encrypted using a Microsoft managed key. For additional control, a customer-managed key can be used instead.
type EncryptionProperties struct {
	// Type of the key source.
	KeySource *string `pulumi:"keySource"`
	// Additional details when using Microsoft.KeyVault
	KeyVaultProperties *KeyVaultProperties `pulumi:"keyVaultProperties"`
}

// EncryptionPropertiesInput is an input type that accepts EncryptionPropertiesArgs and EncryptionPropertiesOutput values.
// You can construct a concrete instance of `EncryptionPropertiesInput` via:
//
//          EncryptionPropertiesArgs{...}
type EncryptionPropertiesInput interface {
	pulumi.Input

	ToEncryptionPropertiesOutput() EncryptionPropertiesOutput
	ToEncryptionPropertiesOutputWithContext(context.Context) EncryptionPropertiesOutput
}

// Configures how customer data is encrypted inside the Batch account. By default, accounts are encrypted using a Microsoft managed key. For additional control, a customer-managed key can be used instead.
type EncryptionPropertiesArgs struct {
	// Type of the key source.
	KeySource pulumi.StringPtrInput `pulumi:"keySource"`
	// Additional details when using Microsoft.KeyVault
	KeyVaultProperties KeyVaultPropertiesPtrInput `pulumi:"keyVaultProperties"`
}

func (EncryptionPropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EncryptionProperties)(nil)).Elem()
}

func (i EncryptionPropertiesArgs) ToEncryptionPropertiesOutput() EncryptionPropertiesOutput {
	return i.ToEncryptionPropertiesOutputWithContext(context.Background())
}

func (i EncryptionPropertiesArgs) ToEncryptionPropertiesOutputWithContext(ctx context.Context) EncryptionPropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EncryptionPropertiesOutput)
}

func (i EncryptionPropertiesArgs) ToEncryptionPropertiesPtrOutput() EncryptionPropertiesPtrOutput {
	return i.ToEncryptionPropertiesPtrOutputWithContext(context.Background())
}

func (i EncryptionPropertiesArgs) ToEncryptionPropertiesPtrOutputWithContext(ctx context.Context) EncryptionPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EncryptionPropertiesOutput).ToEncryptionPropertiesPtrOutputWithContext(ctx)
}

// EncryptionPropertiesPtrInput is an input type that accepts EncryptionPropertiesArgs, EncryptionPropertiesPtr and EncryptionPropertiesPtrOutput values.
// You can construct a concrete instance of `EncryptionPropertiesPtrInput` via:
//
//          EncryptionPropertiesArgs{...}
//
//  or:
//
//          nil
type EncryptionPropertiesPtrInput interface {
	pulumi.Input

	ToEncryptionPropertiesPtrOutput() EncryptionPropertiesPtrOutput
	ToEncryptionPropertiesPtrOutputWithContext(context.Context) EncryptionPropertiesPtrOutput
}

type encryptionPropertiesPtrType EncryptionPropertiesArgs

func EncryptionPropertiesPtr(v *EncryptionPropertiesArgs) EncryptionPropertiesPtrInput {
	return (*encryptionPropertiesPtrType)(v)
}

func (*encryptionPropertiesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**EncryptionProperties)(nil)).Elem()
}

func (i *encryptionPropertiesPtrType) ToEncryptionPropertiesPtrOutput() EncryptionPropertiesPtrOutput {
	return i.ToEncryptionPropertiesPtrOutputWithContext(context.Background())
}

func (i *encryptionPropertiesPtrType) ToEncryptionPropertiesPtrOutputWithContext(ctx context.Context) EncryptionPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EncryptionPropertiesPtrOutput)
}

// Configures how customer data is encrypted inside the Batch account. By default, accounts are encrypted using a Microsoft managed key. For additional control, a customer-managed key can be used instead.
type EncryptionPropertiesOutput struct{ *pulumi.OutputState }

func (EncryptionPropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EncryptionProperties)(nil)).Elem()
}

func (o EncryptionPropertiesOutput) ToEncryptionPropertiesOutput() EncryptionPropertiesOutput {
	return o
}

func (o EncryptionPropertiesOutput) ToEncryptionPropertiesOutputWithContext(ctx context.Context) EncryptionPropertiesOutput {
	return o
}

func (o EncryptionPropertiesOutput) ToEncryptionPropertiesPtrOutput() EncryptionPropertiesPtrOutput {
	return o.ToEncryptionPropertiesPtrOutputWithContext(context.Background())
}

func (o EncryptionPropertiesOutput) ToEncryptionPropertiesPtrOutputWithContext(ctx context.Context) EncryptionPropertiesPtrOutput {
	return o.ApplyT(func(v EncryptionProperties) *EncryptionProperties {
		return &v
	}).(EncryptionPropertiesPtrOutput)
}

// Type of the key source.
func (o EncryptionPropertiesOutput) KeySource() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EncryptionProperties) *string { return v.KeySource }).(pulumi.StringPtrOutput)
}

// Additional details when using Microsoft.KeyVault
func (o EncryptionPropertiesOutput) KeyVaultProperties() KeyVaultPropertiesPtrOutput {
	return o.ApplyT(func(v EncryptionProperties) *KeyVaultProperties { return v.KeyVaultProperties }).(KeyVaultPropertiesPtrOutput)
}

type EncryptionPropertiesPtrOutput struct{ *pulumi.OutputState }

func (EncryptionPropertiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EncryptionProperties)(nil)).Elem()
}

func (o EncryptionPropertiesPtrOutput) ToEncryptionPropertiesPtrOutput() EncryptionPropertiesPtrOutput {
	return o
}

func (o EncryptionPropertiesPtrOutput) ToEncryptionPropertiesPtrOutputWithContext(ctx context.Context) EncryptionPropertiesPtrOutput {
	return o
}

func (o EncryptionPropertiesPtrOutput) Elem() EncryptionPropertiesOutput {
	return o.ApplyT(func(v *EncryptionProperties) EncryptionProperties { return *v }).(EncryptionPropertiesOutput)
}

// Type of the key source.
func (o EncryptionPropertiesPtrOutput) KeySource() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EncryptionProperties) *string {
		if v == nil {
			return nil
		}
		return v.KeySource
	}).(pulumi.StringPtrOutput)
}

// Additional details when using Microsoft.KeyVault
func (o EncryptionPropertiesPtrOutput) KeyVaultProperties() KeyVaultPropertiesPtrOutput {
	return o.ApplyT(func(v *EncryptionProperties) *KeyVaultProperties {
		if v == nil {
			return nil
		}
		return v.KeyVaultProperties
	}).(KeyVaultPropertiesPtrOutput)
}

// Configures how customer data is encrypted inside the Batch account. By default, accounts are encrypted using a Microsoft managed key. For additional control, a customer-managed key can be used instead.
type EncryptionPropertiesResponse struct {
	// Type of the key source.
	KeySource *string `pulumi:"keySource"`
	// Additional details when using Microsoft.KeyVault
	KeyVaultProperties *KeyVaultPropertiesResponse `pulumi:"keyVaultProperties"`
}

// EncryptionPropertiesResponseInput is an input type that accepts EncryptionPropertiesResponseArgs and EncryptionPropertiesResponseOutput values.
// You can construct a concrete instance of `EncryptionPropertiesResponseInput` via:
//
//          EncryptionPropertiesResponseArgs{...}
type EncryptionPropertiesResponseInput interface {
	pulumi.Input

	ToEncryptionPropertiesResponseOutput() EncryptionPropertiesResponseOutput
	ToEncryptionPropertiesResponseOutputWithContext(context.Context) EncryptionPropertiesResponseOutput
}

// Configures how customer data is encrypted inside the Batch account. By default, accounts are encrypted using a Microsoft managed key. For additional control, a customer-managed key can be used instead.
type EncryptionPropertiesResponseArgs struct {
	// Type of the key source.
	KeySource pulumi.StringPtrInput `pulumi:"keySource"`
	// Additional details when using Microsoft.KeyVault
	KeyVaultProperties KeyVaultPropertiesResponsePtrInput `pulumi:"keyVaultProperties"`
}

func (EncryptionPropertiesResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EncryptionPropertiesResponse)(nil)).Elem()
}

func (i EncryptionPropertiesResponseArgs) ToEncryptionPropertiesResponseOutput() EncryptionPropertiesResponseOutput {
	return i.ToEncryptionPropertiesResponseOutputWithContext(context.Background())
}

func (i EncryptionPropertiesResponseArgs) ToEncryptionPropertiesResponseOutputWithContext(ctx context.Context) EncryptionPropertiesResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EncryptionPropertiesResponseOutput)
}

func (i EncryptionPropertiesResponseArgs) ToEncryptionPropertiesResponsePtrOutput() EncryptionPropertiesResponsePtrOutput {
	return i.ToEncryptionPropertiesResponsePtrOutputWithContext(context.Background())
}

func (i EncryptionPropertiesResponseArgs) ToEncryptionPropertiesResponsePtrOutputWithContext(ctx context.Context) EncryptionPropertiesResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EncryptionPropertiesResponseOutput).ToEncryptionPropertiesResponsePtrOutputWithContext(ctx)
}

// EncryptionPropertiesResponsePtrInput is an input type that accepts EncryptionPropertiesResponseArgs, EncryptionPropertiesResponsePtr and EncryptionPropertiesResponsePtrOutput values.
// You can construct a concrete instance of `EncryptionPropertiesResponsePtrInput` via:
//
//          EncryptionPropertiesResponseArgs{...}
//
//  or:
//
//          nil
type EncryptionPropertiesResponsePtrInput interface {
	pulumi.Input

	ToEncryptionPropertiesResponsePtrOutput() EncryptionPropertiesResponsePtrOutput
	ToEncryptionPropertiesResponsePtrOutputWithContext(context.Context) EncryptionPropertiesResponsePtrOutput
}

type encryptionPropertiesResponsePtrType EncryptionPropertiesResponseArgs

func EncryptionPropertiesResponsePtr(v *EncryptionPropertiesResponseArgs) EncryptionPropertiesResponsePtrInput {
	return (*encryptionPropertiesResponsePtrType)(v)
}

func (*encryptionPropertiesResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**EncryptionPropertiesResponse)(nil)).Elem()
}

func (i *encryptionPropertiesResponsePtrType) ToEncryptionPropertiesResponsePtrOutput() EncryptionPropertiesResponsePtrOutput {
	return i.ToEncryptionPropertiesResponsePtrOutputWithContext(context.Background())
}

func (i *encryptionPropertiesResponsePtrType) ToEncryptionPropertiesResponsePtrOutputWithContext(ctx context.Context) EncryptionPropertiesResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EncryptionPropertiesResponsePtrOutput)
}

// Configures how customer data is encrypted inside the Batch account. By default, accounts are encrypted using a Microsoft managed key. For additional control, a customer-managed key can be used instead.
type EncryptionPropertiesResponseOutput struct{ *pulumi.OutputState }

func (EncryptionPropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EncryptionPropertiesResponse)(nil)).Elem()
}

func (o EncryptionPropertiesResponseOutput) ToEncryptionPropertiesResponseOutput() EncryptionPropertiesResponseOutput {
	return o
}

func (o EncryptionPropertiesResponseOutput) ToEncryptionPropertiesResponseOutputWithContext(ctx context.Context) EncryptionPropertiesResponseOutput {
	return o
}

func (o EncryptionPropertiesResponseOutput) ToEncryptionPropertiesResponsePtrOutput() EncryptionPropertiesResponsePtrOutput {
	return o.ToEncryptionPropertiesResponsePtrOutputWithContext(context.Background())
}

func (o EncryptionPropertiesResponseOutput) ToEncryptionPropertiesResponsePtrOutputWithContext(ctx context.Context) EncryptionPropertiesResponsePtrOutput {
	return o.ApplyT(func(v EncryptionPropertiesResponse) *EncryptionPropertiesResponse {
		return &v
	}).(EncryptionPropertiesResponsePtrOutput)
}

// Type of the key source.
func (o EncryptionPropertiesResponseOutput) KeySource() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EncryptionPropertiesResponse) *string { return v.KeySource }).(pulumi.StringPtrOutput)
}

// Additional details when using Microsoft.KeyVault
func (o EncryptionPropertiesResponseOutput) KeyVaultProperties() KeyVaultPropertiesResponsePtrOutput {
	return o.ApplyT(func(v EncryptionPropertiesResponse) *KeyVaultPropertiesResponse { return v.KeyVaultProperties }).(KeyVaultPropertiesResponsePtrOutput)
}

type EncryptionPropertiesResponsePtrOutput struct{ *pulumi.OutputState }

func (EncryptionPropertiesResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EncryptionPropertiesResponse)(nil)).Elem()
}

func (o EncryptionPropertiesResponsePtrOutput) ToEncryptionPropertiesResponsePtrOutput() EncryptionPropertiesResponsePtrOutput {
	return o
}

func (o EncryptionPropertiesResponsePtrOutput) ToEncryptionPropertiesResponsePtrOutputWithContext(ctx context.Context) EncryptionPropertiesResponsePtrOutput {
	return o
}

func (o EncryptionPropertiesResponsePtrOutput) Elem() EncryptionPropertiesResponseOutput {
	return o.ApplyT(func(v *EncryptionPropertiesResponse) EncryptionPropertiesResponse { return *v }).(EncryptionPropertiesResponseOutput)
}

// Type of the key source.
func (o EncryptionPropertiesResponsePtrOutput) KeySource() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EncryptionPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return v.KeySource
	}).(pulumi.StringPtrOutput)
}

// Additional details when using Microsoft.KeyVault
func (o EncryptionPropertiesResponsePtrOutput) KeyVaultProperties() KeyVaultPropertiesResponsePtrOutput {
	return o.ApplyT(func(v *EncryptionPropertiesResponse) *KeyVaultPropertiesResponse {
		if v == nil {
			return nil
		}
		return v.KeyVaultProperties
	}).(KeyVaultPropertiesResponsePtrOutput)
}

type EnvironmentSetting struct {
	Name  string  `pulumi:"name"`
	Value *string `pulumi:"value"`
}

// EnvironmentSettingInput is an input type that accepts EnvironmentSettingArgs and EnvironmentSettingOutput values.
// You can construct a concrete instance of `EnvironmentSettingInput` via:
//
//          EnvironmentSettingArgs{...}
type EnvironmentSettingInput interface {
	pulumi.Input

	ToEnvironmentSettingOutput() EnvironmentSettingOutput
	ToEnvironmentSettingOutputWithContext(context.Context) EnvironmentSettingOutput
}

type EnvironmentSettingArgs struct {
	Name  pulumi.StringInput    `pulumi:"name"`
	Value pulumi.StringPtrInput `pulumi:"value"`
}

func (EnvironmentSettingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EnvironmentSetting)(nil)).Elem()
}

func (i EnvironmentSettingArgs) ToEnvironmentSettingOutput() EnvironmentSettingOutput {
	return i.ToEnvironmentSettingOutputWithContext(context.Background())
}

func (i EnvironmentSettingArgs) ToEnvironmentSettingOutputWithContext(ctx context.Context) EnvironmentSettingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EnvironmentSettingOutput)
}

// EnvironmentSettingArrayInput is an input type that accepts EnvironmentSettingArray and EnvironmentSettingArrayOutput values.
// You can construct a concrete instance of `EnvironmentSettingArrayInput` via:
//
//          EnvironmentSettingArray{ EnvironmentSettingArgs{...} }
type EnvironmentSettingArrayInput interface {
	pulumi.Input

	ToEnvironmentSettingArrayOutput() EnvironmentSettingArrayOutput
	ToEnvironmentSettingArrayOutputWithContext(context.Context) EnvironmentSettingArrayOutput
}

type EnvironmentSettingArray []EnvironmentSettingInput

func (EnvironmentSettingArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EnvironmentSetting)(nil)).Elem()
}

func (i EnvironmentSettingArray) ToEnvironmentSettingArrayOutput() EnvironmentSettingArrayOutput {
	return i.ToEnvironmentSettingArrayOutputWithContext(context.Background())
}

func (i EnvironmentSettingArray) ToEnvironmentSettingArrayOutputWithContext(ctx context.Context) EnvironmentSettingArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EnvironmentSettingArrayOutput)
}

type EnvironmentSettingOutput struct{ *pulumi.OutputState }

func (EnvironmentSettingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EnvironmentSetting)(nil)).Elem()
}

func (o EnvironmentSettingOutput) ToEnvironmentSettingOutput() EnvironmentSettingOutput {
	return o
}

func (o EnvironmentSettingOutput) ToEnvironmentSettingOutputWithContext(ctx context.Context) EnvironmentSettingOutput {
	return o
}

func (o EnvironmentSettingOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v EnvironmentSetting) string { return v.Name }).(pulumi.StringOutput)
}

func (o EnvironmentSettingOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EnvironmentSetting) *string { return v.Value }).(pulumi.StringPtrOutput)
}

type EnvironmentSettingArrayOutput struct{ *pulumi.OutputState }

func (EnvironmentSettingArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EnvironmentSetting)(nil)).Elem()
}

func (o EnvironmentSettingArrayOutput) ToEnvironmentSettingArrayOutput() EnvironmentSettingArrayOutput {
	return o
}

func (o EnvironmentSettingArrayOutput) ToEnvironmentSettingArrayOutputWithContext(ctx context.Context) EnvironmentSettingArrayOutput {
	return o
}

func (o EnvironmentSettingArrayOutput) Index(i pulumi.IntInput) EnvironmentSettingOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) EnvironmentSetting {
		return vs[0].([]EnvironmentSetting)[vs[1].(int)]
	}).(EnvironmentSettingOutput)
}

type EnvironmentSettingResponse struct {
	Name  string  `pulumi:"name"`
	Value *string `pulumi:"value"`
}

// EnvironmentSettingResponseInput is an input type that accepts EnvironmentSettingResponseArgs and EnvironmentSettingResponseOutput values.
// You can construct a concrete instance of `EnvironmentSettingResponseInput` via:
//
//          EnvironmentSettingResponseArgs{...}
type EnvironmentSettingResponseInput interface {
	pulumi.Input

	ToEnvironmentSettingResponseOutput() EnvironmentSettingResponseOutput
	ToEnvironmentSettingResponseOutputWithContext(context.Context) EnvironmentSettingResponseOutput
}

type EnvironmentSettingResponseArgs struct {
	Name  pulumi.StringInput    `pulumi:"name"`
	Value pulumi.StringPtrInput `pulumi:"value"`
}

func (EnvironmentSettingResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EnvironmentSettingResponse)(nil)).Elem()
}

func (i EnvironmentSettingResponseArgs) ToEnvironmentSettingResponseOutput() EnvironmentSettingResponseOutput {
	return i.ToEnvironmentSettingResponseOutputWithContext(context.Background())
}

func (i EnvironmentSettingResponseArgs) ToEnvironmentSettingResponseOutputWithContext(ctx context.Context) EnvironmentSettingResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EnvironmentSettingResponseOutput)
}

// EnvironmentSettingResponseArrayInput is an input type that accepts EnvironmentSettingResponseArray and EnvironmentSettingResponseArrayOutput values.
// You can construct a concrete instance of `EnvironmentSettingResponseArrayInput` via:
//
//          EnvironmentSettingResponseArray{ EnvironmentSettingResponseArgs{...} }
type EnvironmentSettingResponseArrayInput interface {
	pulumi.Input

	ToEnvironmentSettingResponseArrayOutput() EnvironmentSettingResponseArrayOutput
	ToEnvironmentSettingResponseArrayOutputWithContext(context.Context) EnvironmentSettingResponseArrayOutput
}

type EnvironmentSettingResponseArray []EnvironmentSettingResponseInput

func (EnvironmentSettingResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EnvironmentSettingResponse)(nil)).Elem()
}

func (i EnvironmentSettingResponseArray) ToEnvironmentSettingResponseArrayOutput() EnvironmentSettingResponseArrayOutput {
	return i.ToEnvironmentSettingResponseArrayOutputWithContext(context.Background())
}

func (i EnvironmentSettingResponseArray) ToEnvironmentSettingResponseArrayOutputWithContext(ctx context.Context) EnvironmentSettingResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EnvironmentSettingResponseArrayOutput)
}

type EnvironmentSettingResponseOutput struct{ *pulumi.OutputState }

func (EnvironmentSettingResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EnvironmentSettingResponse)(nil)).Elem()
}

func (o EnvironmentSettingResponseOutput) ToEnvironmentSettingResponseOutput() EnvironmentSettingResponseOutput {
	return o
}

func (o EnvironmentSettingResponseOutput) ToEnvironmentSettingResponseOutputWithContext(ctx context.Context) EnvironmentSettingResponseOutput {
	return o
}

func (o EnvironmentSettingResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v EnvironmentSettingResponse) string { return v.Name }).(pulumi.StringOutput)
}

func (o EnvironmentSettingResponseOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EnvironmentSettingResponse) *string { return v.Value }).(pulumi.StringPtrOutput)
}

type EnvironmentSettingResponseArrayOutput struct{ *pulumi.OutputState }

func (EnvironmentSettingResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EnvironmentSettingResponse)(nil)).Elem()
}

func (o EnvironmentSettingResponseArrayOutput) ToEnvironmentSettingResponseArrayOutput() EnvironmentSettingResponseArrayOutput {
	return o
}

func (o EnvironmentSettingResponseArrayOutput) ToEnvironmentSettingResponseArrayOutputWithContext(ctx context.Context) EnvironmentSettingResponseArrayOutput {
	return o
}

func (o EnvironmentSettingResponseArrayOutput) Index(i pulumi.IntInput) EnvironmentSettingResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) EnvironmentSettingResponse {
		return vs[0].([]EnvironmentSettingResponse)[vs[1].(int)]
	}).(EnvironmentSettingResponseOutput)
}

type FixedScaleSettings struct {
	// If omitted, the default value is Requeue.
	NodeDeallocationOption *string `pulumi:"nodeDeallocationOption"`
	// The default value is 15 minutes. Timeout values use ISO 8601 format. For example, use PT10M for 10 minutes. The minimum value is 5 minutes. If you specify a value less than 5 minutes, the Batch service rejects the request with an error; if you are calling the REST API directly, the HTTP status code is 400 (Bad Request).
	ResizeTimeout *string `pulumi:"resizeTimeout"`
	// At least one of targetDedicatedNodes, targetLowPriorityNodes must be set.
	TargetDedicatedNodes *int `pulumi:"targetDedicatedNodes"`
	// At least one of targetDedicatedNodes, targetLowPriorityNodes must be set.
	TargetLowPriorityNodes *int `pulumi:"targetLowPriorityNodes"`
}

// FixedScaleSettingsInput is an input type that accepts FixedScaleSettingsArgs and FixedScaleSettingsOutput values.
// You can construct a concrete instance of `FixedScaleSettingsInput` via:
//
//          FixedScaleSettingsArgs{...}
type FixedScaleSettingsInput interface {
	pulumi.Input

	ToFixedScaleSettingsOutput() FixedScaleSettingsOutput
	ToFixedScaleSettingsOutputWithContext(context.Context) FixedScaleSettingsOutput
}

type FixedScaleSettingsArgs struct {
	// If omitted, the default value is Requeue.
	NodeDeallocationOption pulumi.StringPtrInput `pulumi:"nodeDeallocationOption"`
	// The default value is 15 minutes. Timeout values use ISO 8601 format. For example, use PT10M for 10 minutes. The minimum value is 5 minutes. If you specify a value less than 5 minutes, the Batch service rejects the request with an error; if you are calling the REST API directly, the HTTP status code is 400 (Bad Request).
	ResizeTimeout pulumi.StringPtrInput `pulumi:"resizeTimeout"`
	// At least one of targetDedicatedNodes, targetLowPriorityNodes must be set.
	TargetDedicatedNodes pulumi.IntPtrInput `pulumi:"targetDedicatedNodes"`
	// At least one of targetDedicatedNodes, targetLowPriorityNodes must be set.
	TargetLowPriorityNodes pulumi.IntPtrInput `pulumi:"targetLowPriorityNodes"`
}

func (FixedScaleSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FixedScaleSettings)(nil)).Elem()
}

func (i FixedScaleSettingsArgs) ToFixedScaleSettingsOutput() FixedScaleSettingsOutput {
	return i.ToFixedScaleSettingsOutputWithContext(context.Background())
}

func (i FixedScaleSettingsArgs) ToFixedScaleSettingsOutputWithContext(ctx context.Context) FixedScaleSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FixedScaleSettingsOutput)
}

func (i FixedScaleSettingsArgs) ToFixedScaleSettingsPtrOutput() FixedScaleSettingsPtrOutput {
	return i.ToFixedScaleSettingsPtrOutputWithContext(context.Background())
}

func (i FixedScaleSettingsArgs) ToFixedScaleSettingsPtrOutputWithContext(ctx context.Context) FixedScaleSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FixedScaleSettingsOutput).ToFixedScaleSettingsPtrOutputWithContext(ctx)
}

// FixedScaleSettingsPtrInput is an input type that accepts FixedScaleSettingsArgs, FixedScaleSettingsPtr and FixedScaleSettingsPtrOutput values.
// You can construct a concrete instance of `FixedScaleSettingsPtrInput` via:
//
//          FixedScaleSettingsArgs{...}
//
//  or:
//
//          nil
type FixedScaleSettingsPtrInput interface {
	pulumi.Input

	ToFixedScaleSettingsPtrOutput() FixedScaleSettingsPtrOutput
	ToFixedScaleSettingsPtrOutputWithContext(context.Context) FixedScaleSettingsPtrOutput
}

type fixedScaleSettingsPtrType FixedScaleSettingsArgs

func FixedScaleSettingsPtr(v *FixedScaleSettingsArgs) FixedScaleSettingsPtrInput {
	return (*fixedScaleSettingsPtrType)(v)
}

func (*fixedScaleSettingsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**FixedScaleSettings)(nil)).Elem()
}

func (i *fixedScaleSettingsPtrType) ToFixedScaleSettingsPtrOutput() FixedScaleSettingsPtrOutput {
	return i.ToFixedScaleSettingsPtrOutputWithContext(context.Background())
}

func (i *fixedScaleSettingsPtrType) ToFixedScaleSettingsPtrOutputWithContext(ctx context.Context) FixedScaleSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FixedScaleSettingsPtrOutput)
}

type FixedScaleSettingsOutput struct{ *pulumi.OutputState }

func (FixedScaleSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FixedScaleSettings)(nil)).Elem()
}

func (o FixedScaleSettingsOutput) ToFixedScaleSettingsOutput() FixedScaleSettingsOutput {
	return o
}

func (o FixedScaleSettingsOutput) ToFixedScaleSettingsOutputWithContext(ctx context.Context) FixedScaleSettingsOutput {
	return o
}

func (o FixedScaleSettingsOutput) ToFixedScaleSettingsPtrOutput() FixedScaleSettingsPtrOutput {
	return o.ToFixedScaleSettingsPtrOutputWithContext(context.Background())
}

func (o FixedScaleSettingsOutput) ToFixedScaleSettingsPtrOutputWithContext(ctx context.Context) FixedScaleSettingsPtrOutput {
	return o.ApplyT(func(v FixedScaleSettings) *FixedScaleSettings {
		return &v
	}).(FixedScaleSettingsPtrOutput)
}

// If omitted, the default value is Requeue.
func (o FixedScaleSettingsOutput) NodeDeallocationOption() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FixedScaleSettings) *string { return v.NodeDeallocationOption }).(pulumi.StringPtrOutput)
}

// The default value is 15 minutes. Timeout values use ISO 8601 format. For example, use PT10M for 10 minutes. The minimum value is 5 minutes. If you specify a value less than 5 minutes, the Batch service rejects the request with an error; if you are calling the REST API directly, the HTTP status code is 400 (Bad Request).
func (o FixedScaleSettingsOutput) ResizeTimeout() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FixedScaleSettings) *string { return v.ResizeTimeout }).(pulumi.StringPtrOutput)
}

// At least one of targetDedicatedNodes, targetLowPriorityNodes must be set.
func (o FixedScaleSettingsOutput) TargetDedicatedNodes() pulumi.IntPtrOutput {
	return o.ApplyT(func(v FixedScaleSettings) *int { return v.TargetDedicatedNodes }).(pulumi.IntPtrOutput)
}

// At least one of targetDedicatedNodes, targetLowPriorityNodes must be set.
func (o FixedScaleSettingsOutput) TargetLowPriorityNodes() pulumi.IntPtrOutput {
	return o.ApplyT(func(v FixedScaleSettings) *int { return v.TargetLowPriorityNodes }).(pulumi.IntPtrOutput)
}

type FixedScaleSettingsPtrOutput struct{ *pulumi.OutputState }

func (FixedScaleSettingsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FixedScaleSettings)(nil)).Elem()
}

func (o FixedScaleSettingsPtrOutput) ToFixedScaleSettingsPtrOutput() FixedScaleSettingsPtrOutput {
	return o
}

func (o FixedScaleSettingsPtrOutput) ToFixedScaleSettingsPtrOutputWithContext(ctx context.Context) FixedScaleSettingsPtrOutput {
	return o
}

func (o FixedScaleSettingsPtrOutput) Elem() FixedScaleSettingsOutput {
	return o.ApplyT(func(v *FixedScaleSettings) FixedScaleSettings { return *v }).(FixedScaleSettingsOutput)
}

// If omitted, the default value is Requeue.
func (o FixedScaleSettingsPtrOutput) NodeDeallocationOption() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FixedScaleSettings) *string {
		if v == nil {
			return nil
		}
		return v.NodeDeallocationOption
	}).(pulumi.StringPtrOutput)
}

// The default value is 15 minutes. Timeout values use ISO 8601 format. For example, use PT10M for 10 minutes. The minimum value is 5 minutes. If you specify a value less than 5 minutes, the Batch service rejects the request with an error; if you are calling the REST API directly, the HTTP status code is 400 (Bad Request).
func (o FixedScaleSettingsPtrOutput) ResizeTimeout() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FixedScaleSettings) *string {
		if v == nil {
			return nil
		}
		return v.ResizeTimeout
	}).(pulumi.StringPtrOutput)
}

// At least one of targetDedicatedNodes, targetLowPriorityNodes must be set.
func (o FixedScaleSettingsPtrOutput) TargetDedicatedNodes() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *FixedScaleSettings) *int {
		if v == nil {
			return nil
		}
		return v.TargetDedicatedNodes
	}).(pulumi.IntPtrOutput)
}

// At least one of targetDedicatedNodes, targetLowPriorityNodes must be set.
func (o FixedScaleSettingsPtrOutput) TargetLowPriorityNodes() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *FixedScaleSettings) *int {
		if v == nil {
			return nil
		}
		return v.TargetLowPriorityNodes
	}).(pulumi.IntPtrOutput)
}

type FixedScaleSettingsResponse struct {
	// If omitted, the default value is Requeue.
	NodeDeallocationOption *string `pulumi:"nodeDeallocationOption"`
	// The default value is 15 minutes. Timeout values use ISO 8601 format. For example, use PT10M for 10 minutes. The minimum value is 5 minutes. If you specify a value less than 5 minutes, the Batch service rejects the request with an error; if you are calling the REST API directly, the HTTP status code is 400 (Bad Request).
	ResizeTimeout *string `pulumi:"resizeTimeout"`
	// At least one of targetDedicatedNodes, targetLowPriorityNodes must be set.
	TargetDedicatedNodes *int `pulumi:"targetDedicatedNodes"`
	// At least one of targetDedicatedNodes, targetLowPriorityNodes must be set.
	TargetLowPriorityNodes *int `pulumi:"targetLowPriorityNodes"`
}

// FixedScaleSettingsResponseInput is an input type that accepts FixedScaleSettingsResponseArgs and FixedScaleSettingsResponseOutput values.
// You can construct a concrete instance of `FixedScaleSettingsResponseInput` via:
//
//          FixedScaleSettingsResponseArgs{...}
type FixedScaleSettingsResponseInput interface {
	pulumi.Input

	ToFixedScaleSettingsResponseOutput() FixedScaleSettingsResponseOutput
	ToFixedScaleSettingsResponseOutputWithContext(context.Context) FixedScaleSettingsResponseOutput
}

type FixedScaleSettingsResponseArgs struct {
	// If omitted, the default value is Requeue.
	NodeDeallocationOption pulumi.StringPtrInput `pulumi:"nodeDeallocationOption"`
	// The default value is 15 minutes. Timeout values use ISO 8601 format. For example, use PT10M for 10 minutes. The minimum value is 5 minutes. If you specify a value less than 5 minutes, the Batch service rejects the request with an error; if you are calling the REST API directly, the HTTP status code is 400 (Bad Request).
	ResizeTimeout pulumi.StringPtrInput `pulumi:"resizeTimeout"`
	// At least one of targetDedicatedNodes, targetLowPriorityNodes must be set.
	TargetDedicatedNodes pulumi.IntPtrInput `pulumi:"targetDedicatedNodes"`
	// At least one of targetDedicatedNodes, targetLowPriorityNodes must be set.
	TargetLowPriorityNodes pulumi.IntPtrInput `pulumi:"targetLowPriorityNodes"`
}

func (FixedScaleSettingsResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FixedScaleSettingsResponse)(nil)).Elem()
}

func (i FixedScaleSettingsResponseArgs) ToFixedScaleSettingsResponseOutput() FixedScaleSettingsResponseOutput {
	return i.ToFixedScaleSettingsResponseOutputWithContext(context.Background())
}

func (i FixedScaleSettingsResponseArgs) ToFixedScaleSettingsResponseOutputWithContext(ctx context.Context) FixedScaleSettingsResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FixedScaleSettingsResponseOutput)
}

func (i FixedScaleSettingsResponseArgs) ToFixedScaleSettingsResponsePtrOutput() FixedScaleSettingsResponsePtrOutput {
	return i.ToFixedScaleSettingsResponsePtrOutputWithContext(context.Background())
}

func (i FixedScaleSettingsResponseArgs) ToFixedScaleSettingsResponsePtrOutputWithContext(ctx context.Context) FixedScaleSettingsResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FixedScaleSettingsResponseOutput).ToFixedScaleSettingsResponsePtrOutputWithContext(ctx)
}

// FixedScaleSettingsResponsePtrInput is an input type that accepts FixedScaleSettingsResponseArgs, FixedScaleSettingsResponsePtr and FixedScaleSettingsResponsePtrOutput values.
// You can construct a concrete instance of `FixedScaleSettingsResponsePtrInput` via:
//
//          FixedScaleSettingsResponseArgs{...}
//
//  or:
//
//          nil
type FixedScaleSettingsResponsePtrInput interface {
	pulumi.Input

	ToFixedScaleSettingsResponsePtrOutput() FixedScaleSettingsResponsePtrOutput
	ToFixedScaleSettingsResponsePtrOutputWithContext(context.Context) FixedScaleSettingsResponsePtrOutput
}

type fixedScaleSettingsResponsePtrType FixedScaleSettingsResponseArgs

func FixedScaleSettingsResponsePtr(v *FixedScaleSettingsResponseArgs) FixedScaleSettingsResponsePtrInput {
	return (*fixedScaleSettingsResponsePtrType)(v)
}

func (*fixedScaleSettingsResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**FixedScaleSettingsResponse)(nil)).Elem()
}

func (i *fixedScaleSettingsResponsePtrType) ToFixedScaleSettingsResponsePtrOutput() FixedScaleSettingsResponsePtrOutput {
	return i.ToFixedScaleSettingsResponsePtrOutputWithContext(context.Background())
}

func (i *fixedScaleSettingsResponsePtrType) ToFixedScaleSettingsResponsePtrOutputWithContext(ctx context.Context) FixedScaleSettingsResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FixedScaleSettingsResponsePtrOutput)
}

type FixedScaleSettingsResponseOutput struct{ *pulumi.OutputState }

func (FixedScaleSettingsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FixedScaleSettingsResponse)(nil)).Elem()
}

func (o FixedScaleSettingsResponseOutput) ToFixedScaleSettingsResponseOutput() FixedScaleSettingsResponseOutput {
	return o
}

func (o FixedScaleSettingsResponseOutput) ToFixedScaleSettingsResponseOutputWithContext(ctx context.Context) FixedScaleSettingsResponseOutput {
	return o
}

func (o FixedScaleSettingsResponseOutput) ToFixedScaleSettingsResponsePtrOutput() FixedScaleSettingsResponsePtrOutput {
	return o.ToFixedScaleSettingsResponsePtrOutputWithContext(context.Background())
}

func (o FixedScaleSettingsResponseOutput) ToFixedScaleSettingsResponsePtrOutputWithContext(ctx context.Context) FixedScaleSettingsResponsePtrOutput {
	return o.ApplyT(func(v FixedScaleSettingsResponse) *FixedScaleSettingsResponse {
		return &v
	}).(FixedScaleSettingsResponsePtrOutput)
}

// If omitted, the default value is Requeue.
func (o FixedScaleSettingsResponseOutput) NodeDeallocationOption() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FixedScaleSettingsResponse) *string { return v.NodeDeallocationOption }).(pulumi.StringPtrOutput)
}

// The default value is 15 minutes. Timeout values use ISO 8601 format. For example, use PT10M for 10 minutes. The minimum value is 5 minutes. If you specify a value less than 5 minutes, the Batch service rejects the request with an error; if you are calling the REST API directly, the HTTP status code is 400 (Bad Request).
func (o FixedScaleSettingsResponseOutput) ResizeTimeout() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FixedScaleSettingsResponse) *string { return v.ResizeTimeout }).(pulumi.StringPtrOutput)
}

// At least one of targetDedicatedNodes, targetLowPriorityNodes must be set.
func (o FixedScaleSettingsResponseOutput) TargetDedicatedNodes() pulumi.IntPtrOutput {
	return o.ApplyT(func(v FixedScaleSettingsResponse) *int { return v.TargetDedicatedNodes }).(pulumi.IntPtrOutput)
}

// At least one of targetDedicatedNodes, targetLowPriorityNodes must be set.
func (o FixedScaleSettingsResponseOutput) TargetLowPriorityNodes() pulumi.IntPtrOutput {
	return o.ApplyT(func(v FixedScaleSettingsResponse) *int { return v.TargetLowPriorityNodes }).(pulumi.IntPtrOutput)
}

type FixedScaleSettingsResponsePtrOutput struct{ *pulumi.OutputState }

func (FixedScaleSettingsResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FixedScaleSettingsResponse)(nil)).Elem()
}

func (o FixedScaleSettingsResponsePtrOutput) ToFixedScaleSettingsResponsePtrOutput() FixedScaleSettingsResponsePtrOutput {
	return o
}

func (o FixedScaleSettingsResponsePtrOutput) ToFixedScaleSettingsResponsePtrOutputWithContext(ctx context.Context) FixedScaleSettingsResponsePtrOutput {
	return o
}

func (o FixedScaleSettingsResponsePtrOutput) Elem() FixedScaleSettingsResponseOutput {
	return o.ApplyT(func(v *FixedScaleSettingsResponse) FixedScaleSettingsResponse { return *v }).(FixedScaleSettingsResponseOutput)
}

// If omitted, the default value is Requeue.
func (o FixedScaleSettingsResponsePtrOutput) NodeDeallocationOption() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FixedScaleSettingsResponse) *string {
		if v == nil {
			return nil
		}
		return v.NodeDeallocationOption
	}).(pulumi.StringPtrOutput)
}

// The default value is 15 minutes. Timeout values use ISO 8601 format. For example, use PT10M for 10 minutes. The minimum value is 5 minutes. If you specify a value less than 5 minutes, the Batch service rejects the request with an error; if you are calling the REST API directly, the HTTP status code is 400 (Bad Request).
func (o FixedScaleSettingsResponsePtrOutput) ResizeTimeout() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FixedScaleSettingsResponse) *string {
		if v == nil {
			return nil
		}
		return v.ResizeTimeout
	}).(pulumi.StringPtrOutput)
}

// At least one of targetDedicatedNodes, targetLowPriorityNodes must be set.
func (o FixedScaleSettingsResponsePtrOutput) TargetDedicatedNodes() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *FixedScaleSettingsResponse) *int {
		if v == nil {
			return nil
		}
		return v.TargetDedicatedNodes
	}).(pulumi.IntPtrOutput)
}

// At least one of targetDedicatedNodes, targetLowPriorityNodes must be set.
func (o FixedScaleSettingsResponsePtrOutput) TargetLowPriorityNodes() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *FixedScaleSettingsResponse) *int {
		if v == nil {
			return nil
		}
		return v.TargetLowPriorityNodes
	}).(pulumi.IntPtrOutput)
}

type ImageReference struct {
	// This property is mutually exclusive with other properties. The Shared Image Gallery image must have replicas in the same region as the Azure Batch account. For information about the firewall settings for the Batch node agent to communicate with the Batch service see https://docs.microsoft.com/en-us/azure/batch/batch-api-basics#virtual-network-vnet-and-firewall-configuration.
	Id *string `pulumi:"id"`
	// For example, UbuntuServer or WindowsServer.
	Offer *string `pulumi:"offer"`
	// For example, Canonical or MicrosoftWindowsServer.
	Publisher *string `pulumi:"publisher"`
	// For example, 18.04-LTS or 2019-Datacenter.
	Sku *string `pulumi:"sku"`
	// A value of 'latest' can be specified to select the latest version of an image. If omitted, the default is 'latest'.
	Version *string `pulumi:"version"`
}

// ImageReferenceInput is an input type that accepts ImageReferenceArgs and ImageReferenceOutput values.
// You can construct a concrete instance of `ImageReferenceInput` via:
//
//          ImageReferenceArgs{...}
type ImageReferenceInput interface {
	pulumi.Input

	ToImageReferenceOutput() ImageReferenceOutput
	ToImageReferenceOutputWithContext(context.Context) ImageReferenceOutput
}

type ImageReferenceArgs struct {
	// This property is mutually exclusive with other properties. The Shared Image Gallery image must have replicas in the same region as the Azure Batch account. For information about the firewall settings for the Batch node agent to communicate with the Batch service see https://docs.microsoft.com/en-us/azure/batch/batch-api-basics#virtual-network-vnet-and-firewall-configuration.
	Id pulumi.StringPtrInput `pulumi:"id"`
	// For example, UbuntuServer or WindowsServer.
	Offer pulumi.StringPtrInput `pulumi:"offer"`
	// For example, Canonical or MicrosoftWindowsServer.
	Publisher pulumi.StringPtrInput `pulumi:"publisher"`
	// For example, 18.04-LTS or 2019-Datacenter.
	Sku pulumi.StringPtrInput `pulumi:"sku"`
	// A value of 'latest' can be specified to select the latest version of an image. If omitted, the default is 'latest'.
	Version pulumi.StringPtrInput `pulumi:"version"`
}

func (ImageReferenceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ImageReference)(nil)).Elem()
}

func (i ImageReferenceArgs) ToImageReferenceOutput() ImageReferenceOutput {
	return i.ToImageReferenceOutputWithContext(context.Background())
}

func (i ImageReferenceArgs) ToImageReferenceOutputWithContext(ctx context.Context) ImageReferenceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageReferenceOutput)
}

func (i ImageReferenceArgs) ToImageReferencePtrOutput() ImageReferencePtrOutput {
	return i.ToImageReferencePtrOutputWithContext(context.Background())
}

func (i ImageReferenceArgs) ToImageReferencePtrOutputWithContext(ctx context.Context) ImageReferencePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageReferenceOutput).ToImageReferencePtrOutputWithContext(ctx)
}

// ImageReferencePtrInput is an input type that accepts ImageReferenceArgs, ImageReferencePtr and ImageReferencePtrOutput values.
// You can construct a concrete instance of `ImageReferencePtrInput` via:
//
//          ImageReferenceArgs{...}
//
//  or:
//
//          nil
type ImageReferencePtrInput interface {
	pulumi.Input

	ToImageReferencePtrOutput() ImageReferencePtrOutput
	ToImageReferencePtrOutputWithContext(context.Context) ImageReferencePtrOutput
}

type imageReferencePtrType ImageReferenceArgs

func ImageReferencePtr(v *ImageReferenceArgs) ImageReferencePtrInput {
	return (*imageReferencePtrType)(v)
}

func (*imageReferencePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ImageReference)(nil)).Elem()
}

func (i *imageReferencePtrType) ToImageReferencePtrOutput() ImageReferencePtrOutput {
	return i.ToImageReferencePtrOutputWithContext(context.Background())
}

func (i *imageReferencePtrType) ToImageReferencePtrOutputWithContext(ctx context.Context) ImageReferencePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageReferencePtrOutput)
}

type ImageReferenceOutput struct{ *pulumi.OutputState }

func (ImageReferenceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ImageReference)(nil)).Elem()
}

func (o ImageReferenceOutput) ToImageReferenceOutput() ImageReferenceOutput {
	return o
}

func (o ImageReferenceOutput) ToImageReferenceOutputWithContext(ctx context.Context) ImageReferenceOutput {
	return o
}

func (o ImageReferenceOutput) ToImageReferencePtrOutput() ImageReferencePtrOutput {
	return o.ToImageReferencePtrOutputWithContext(context.Background())
}

func (o ImageReferenceOutput) ToImageReferencePtrOutputWithContext(ctx context.Context) ImageReferencePtrOutput {
	return o.ApplyT(func(v ImageReference) *ImageReference {
		return &v
	}).(ImageReferencePtrOutput)
}

// This property is mutually exclusive with other properties. The Shared Image Gallery image must have replicas in the same region as the Azure Batch account. For information about the firewall settings for the Batch node agent to communicate with the Batch service see https://docs.microsoft.com/en-us/azure/batch/batch-api-basics#virtual-network-vnet-and-firewall-configuration.
func (o ImageReferenceOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageReference) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// For example, UbuntuServer or WindowsServer.
func (o ImageReferenceOutput) Offer() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageReference) *string { return v.Offer }).(pulumi.StringPtrOutput)
}

// For example, Canonical or MicrosoftWindowsServer.
func (o ImageReferenceOutput) Publisher() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageReference) *string { return v.Publisher }).(pulumi.StringPtrOutput)
}

// For example, 18.04-LTS or 2019-Datacenter.
func (o ImageReferenceOutput) Sku() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageReference) *string { return v.Sku }).(pulumi.StringPtrOutput)
}

// A value of 'latest' can be specified to select the latest version of an image. If omitted, the default is 'latest'.
func (o ImageReferenceOutput) Version() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageReference) *string { return v.Version }).(pulumi.StringPtrOutput)
}

type ImageReferencePtrOutput struct{ *pulumi.OutputState }

func (ImageReferencePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ImageReference)(nil)).Elem()
}

func (o ImageReferencePtrOutput) ToImageReferencePtrOutput() ImageReferencePtrOutput {
	return o
}

func (o ImageReferencePtrOutput) ToImageReferencePtrOutputWithContext(ctx context.Context) ImageReferencePtrOutput {
	return o
}

func (o ImageReferencePtrOutput) Elem() ImageReferenceOutput {
	return o.ApplyT(func(v *ImageReference) ImageReference { return *v }).(ImageReferenceOutput)
}

// This property is mutually exclusive with other properties. The Shared Image Gallery image must have replicas in the same region as the Azure Batch account. For information about the firewall settings for the Batch node agent to communicate with the Batch service see https://docs.microsoft.com/en-us/azure/batch/batch-api-basics#virtual-network-vnet-and-firewall-configuration.
func (o ImageReferencePtrOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ImageReference) *string {
		if v == nil {
			return nil
		}
		return v.Id
	}).(pulumi.StringPtrOutput)
}

// For example, UbuntuServer or WindowsServer.
func (o ImageReferencePtrOutput) Offer() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ImageReference) *string {
		if v == nil {
			return nil
		}
		return v.Offer
	}).(pulumi.StringPtrOutput)
}

// For example, Canonical or MicrosoftWindowsServer.
func (o ImageReferencePtrOutput) Publisher() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ImageReference) *string {
		if v == nil {
			return nil
		}
		return v.Publisher
	}).(pulumi.StringPtrOutput)
}

// For example, 18.04-LTS or 2019-Datacenter.
func (o ImageReferencePtrOutput) Sku() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ImageReference) *string {
		if v == nil {
			return nil
		}
		return v.Sku
	}).(pulumi.StringPtrOutput)
}

// A value of 'latest' can be specified to select the latest version of an image. If omitted, the default is 'latest'.
func (o ImageReferencePtrOutput) Version() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ImageReference) *string {
		if v == nil {
			return nil
		}
		return v.Version
	}).(pulumi.StringPtrOutput)
}

type ImageReferenceResponse struct {
	// This property is mutually exclusive with other properties. The Shared Image Gallery image must have replicas in the same region as the Azure Batch account. For information about the firewall settings for the Batch node agent to communicate with the Batch service see https://docs.microsoft.com/en-us/azure/batch/batch-api-basics#virtual-network-vnet-and-firewall-configuration.
	Id *string `pulumi:"id"`
	// For example, UbuntuServer or WindowsServer.
	Offer *string `pulumi:"offer"`
	// For example, Canonical or MicrosoftWindowsServer.
	Publisher *string `pulumi:"publisher"`
	// For example, 18.04-LTS or 2019-Datacenter.
	Sku *string `pulumi:"sku"`
	// A value of 'latest' can be specified to select the latest version of an image. If omitted, the default is 'latest'.
	Version *string `pulumi:"version"`
}

// ImageReferenceResponseInput is an input type that accepts ImageReferenceResponseArgs and ImageReferenceResponseOutput values.
// You can construct a concrete instance of `ImageReferenceResponseInput` via:
//
//          ImageReferenceResponseArgs{...}
type ImageReferenceResponseInput interface {
	pulumi.Input

	ToImageReferenceResponseOutput() ImageReferenceResponseOutput
	ToImageReferenceResponseOutputWithContext(context.Context) ImageReferenceResponseOutput
}

type ImageReferenceResponseArgs struct {
	// This property is mutually exclusive with other properties. The Shared Image Gallery image must have replicas in the same region as the Azure Batch account. For information about the firewall settings for the Batch node agent to communicate with the Batch service see https://docs.microsoft.com/en-us/azure/batch/batch-api-basics#virtual-network-vnet-and-firewall-configuration.
	Id pulumi.StringPtrInput `pulumi:"id"`
	// For example, UbuntuServer or WindowsServer.
	Offer pulumi.StringPtrInput `pulumi:"offer"`
	// For example, Canonical or MicrosoftWindowsServer.
	Publisher pulumi.StringPtrInput `pulumi:"publisher"`
	// For example, 18.04-LTS or 2019-Datacenter.
	Sku pulumi.StringPtrInput `pulumi:"sku"`
	// A value of 'latest' can be specified to select the latest version of an image. If omitted, the default is 'latest'.
	Version pulumi.StringPtrInput `pulumi:"version"`
}

func (ImageReferenceResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ImageReferenceResponse)(nil)).Elem()
}

func (i ImageReferenceResponseArgs) ToImageReferenceResponseOutput() ImageReferenceResponseOutput {
	return i.ToImageReferenceResponseOutputWithContext(context.Background())
}

func (i ImageReferenceResponseArgs) ToImageReferenceResponseOutputWithContext(ctx context.Context) ImageReferenceResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageReferenceResponseOutput)
}

func (i ImageReferenceResponseArgs) ToImageReferenceResponsePtrOutput() ImageReferenceResponsePtrOutput {
	return i.ToImageReferenceResponsePtrOutputWithContext(context.Background())
}

func (i ImageReferenceResponseArgs) ToImageReferenceResponsePtrOutputWithContext(ctx context.Context) ImageReferenceResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageReferenceResponseOutput).ToImageReferenceResponsePtrOutputWithContext(ctx)
}

// ImageReferenceResponsePtrInput is an input type that accepts ImageReferenceResponseArgs, ImageReferenceResponsePtr and ImageReferenceResponsePtrOutput values.
// You can construct a concrete instance of `ImageReferenceResponsePtrInput` via:
//
//          ImageReferenceResponseArgs{...}
//
//  or:
//
//          nil
type ImageReferenceResponsePtrInput interface {
	pulumi.Input

	ToImageReferenceResponsePtrOutput() ImageReferenceResponsePtrOutput
	ToImageReferenceResponsePtrOutputWithContext(context.Context) ImageReferenceResponsePtrOutput
}

type imageReferenceResponsePtrType ImageReferenceResponseArgs

func ImageReferenceResponsePtr(v *ImageReferenceResponseArgs) ImageReferenceResponsePtrInput {
	return (*imageReferenceResponsePtrType)(v)
}

func (*imageReferenceResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ImageReferenceResponse)(nil)).Elem()
}

func (i *imageReferenceResponsePtrType) ToImageReferenceResponsePtrOutput() ImageReferenceResponsePtrOutput {
	return i.ToImageReferenceResponsePtrOutputWithContext(context.Background())
}

func (i *imageReferenceResponsePtrType) ToImageReferenceResponsePtrOutputWithContext(ctx context.Context) ImageReferenceResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageReferenceResponsePtrOutput)
}

type ImageReferenceResponseOutput struct{ *pulumi.OutputState }

func (ImageReferenceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ImageReferenceResponse)(nil)).Elem()
}

func (o ImageReferenceResponseOutput) ToImageReferenceResponseOutput() ImageReferenceResponseOutput {
	return o
}

func (o ImageReferenceResponseOutput) ToImageReferenceResponseOutputWithContext(ctx context.Context) ImageReferenceResponseOutput {
	return o
}

func (o ImageReferenceResponseOutput) ToImageReferenceResponsePtrOutput() ImageReferenceResponsePtrOutput {
	return o.ToImageReferenceResponsePtrOutputWithContext(context.Background())
}

func (o ImageReferenceResponseOutput) ToImageReferenceResponsePtrOutputWithContext(ctx context.Context) ImageReferenceResponsePtrOutput {
	return o.ApplyT(func(v ImageReferenceResponse) *ImageReferenceResponse {
		return &v
	}).(ImageReferenceResponsePtrOutput)
}

// This property is mutually exclusive with other properties. The Shared Image Gallery image must have replicas in the same region as the Azure Batch account. For information about the firewall settings for the Batch node agent to communicate with the Batch service see https://docs.microsoft.com/en-us/azure/batch/batch-api-basics#virtual-network-vnet-and-firewall-configuration.
func (o ImageReferenceResponseOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageReferenceResponse) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// For example, UbuntuServer or WindowsServer.
func (o ImageReferenceResponseOutput) Offer() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageReferenceResponse) *string { return v.Offer }).(pulumi.StringPtrOutput)
}

// For example, Canonical or MicrosoftWindowsServer.
func (o ImageReferenceResponseOutput) Publisher() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageReferenceResponse) *string { return v.Publisher }).(pulumi.StringPtrOutput)
}

// For example, 18.04-LTS or 2019-Datacenter.
func (o ImageReferenceResponseOutput) Sku() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageReferenceResponse) *string { return v.Sku }).(pulumi.StringPtrOutput)
}

// A value of 'latest' can be specified to select the latest version of an image. If omitted, the default is 'latest'.
func (o ImageReferenceResponseOutput) Version() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageReferenceResponse) *string { return v.Version }).(pulumi.StringPtrOutput)
}

type ImageReferenceResponsePtrOutput struct{ *pulumi.OutputState }

func (ImageReferenceResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ImageReferenceResponse)(nil)).Elem()
}

func (o ImageReferenceResponsePtrOutput) ToImageReferenceResponsePtrOutput() ImageReferenceResponsePtrOutput {
	return o
}

func (o ImageReferenceResponsePtrOutput) ToImageReferenceResponsePtrOutputWithContext(ctx context.Context) ImageReferenceResponsePtrOutput {
	return o
}

func (o ImageReferenceResponsePtrOutput) Elem() ImageReferenceResponseOutput {
	return o.ApplyT(func(v *ImageReferenceResponse) ImageReferenceResponse { return *v }).(ImageReferenceResponseOutput)
}

// This property is mutually exclusive with other properties. The Shared Image Gallery image must have replicas in the same region as the Azure Batch account. For information about the firewall settings for the Batch node agent to communicate with the Batch service see https://docs.microsoft.com/en-us/azure/batch/batch-api-basics#virtual-network-vnet-and-firewall-configuration.
func (o ImageReferenceResponsePtrOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ImageReferenceResponse) *string {
		if v == nil {
			return nil
		}
		return v.Id
	}).(pulumi.StringPtrOutput)
}

// For example, UbuntuServer or WindowsServer.
func (o ImageReferenceResponsePtrOutput) Offer() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ImageReferenceResponse) *string {
		if v == nil {
			return nil
		}
		return v.Offer
	}).(pulumi.StringPtrOutput)
}

// For example, Canonical or MicrosoftWindowsServer.
func (o ImageReferenceResponsePtrOutput) Publisher() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ImageReferenceResponse) *string {
		if v == nil {
			return nil
		}
		return v.Publisher
	}).(pulumi.StringPtrOutput)
}

// For example, 18.04-LTS or 2019-Datacenter.
func (o ImageReferenceResponsePtrOutput) Sku() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ImageReferenceResponse) *string {
		if v == nil {
			return nil
		}
		return v.Sku
	}).(pulumi.StringPtrOutput)
}

// A value of 'latest' can be specified to select the latest version of an image. If omitted, the default is 'latest'.
func (o ImageReferenceResponsePtrOutput) Version() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ImageReferenceResponse) *string {
		if v == nil {
			return nil
		}
		return v.Version
	}).(pulumi.StringPtrOutput)
}

type InboundNatPool struct {
	// This must be unique within a Batch pool. Acceptable values are between 1 and 65535 except for 22, 3389, 29876 and 29877 as these are reserved. If any reserved values are provided the request fails with HTTP status code 400.
	BackendPort int `pulumi:"backendPort"`
	// Acceptable values range between 1 and 65534 except ports from 50000 to 55000 which are reserved by the Batch service. All ranges within a pool must be distinct and cannot overlap. If any reserved or overlapping values are provided the request fails with HTTP status code 400.
	FrontendPortRangeEnd int `pulumi:"frontendPortRangeEnd"`
	// Acceptable values range between 1 and 65534 except ports from 50000 to 55000 which are reserved. All ranges within a pool must be distinct and cannot overlap. If any reserved or overlapping values are provided the request fails with HTTP status code 400.
	FrontendPortRangeStart int `pulumi:"frontendPortRangeStart"`
	// The name must be unique within a Batch pool, can contain letters, numbers, underscores, periods, and hyphens. Names must start with a letter or number, must end with a letter, number, or underscore, and cannot exceed 77 characters.  If any invalid values are provided the request fails with HTTP status code 400.
	Name string `pulumi:"name"`
	// The maximum number of rules that can be specified across all the endpoints on a Batch pool is 25. If no network security group rules are specified, a default rule will be created to allow inbound access to the specified backendPort. If the maximum number of network security group rules is exceeded the request fails with HTTP status code 400.
	NetworkSecurityGroupRules []NetworkSecurityGroupRule `pulumi:"networkSecurityGroupRules"`
	Protocol                  string                     `pulumi:"protocol"`
}

// InboundNatPoolInput is an input type that accepts InboundNatPoolArgs and InboundNatPoolOutput values.
// You can construct a concrete instance of `InboundNatPoolInput` via:
//
//          InboundNatPoolArgs{...}
type InboundNatPoolInput interface {
	pulumi.Input

	ToInboundNatPoolOutput() InboundNatPoolOutput
	ToInboundNatPoolOutputWithContext(context.Context) InboundNatPoolOutput
}

type InboundNatPoolArgs struct {
	// This must be unique within a Batch pool. Acceptable values are between 1 and 65535 except for 22, 3389, 29876 and 29877 as these are reserved. If any reserved values are provided the request fails with HTTP status code 400.
	BackendPort pulumi.IntInput `pulumi:"backendPort"`
	// Acceptable values range between 1 and 65534 except ports from 50000 to 55000 which are reserved by the Batch service. All ranges within a pool must be distinct and cannot overlap. If any reserved or overlapping values are provided the request fails with HTTP status code 400.
	FrontendPortRangeEnd pulumi.IntInput `pulumi:"frontendPortRangeEnd"`
	// Acceptable values range between 1 and 65534 except ports from 50000 to 55000 which are reserved. All ranges within a pool must be distinct and cannot overlap. If any reserved or overlapping values are provided the request fails with HTTP status code 400.
	FrontendPortRangeStart pulumi.IntInput `pulumi:"frontendPortRangeStart"`
	// The name must be unique within a Batch pool, can contain letters, numbers, underscores, periods, and hyphens. Names must start with a letter or number, must end with a letter, number, or underscore, and cannot exceed 77 characters.  If any invalid values are provided the request fails with HTTP status code 400.
	Name pulumi.StringInput `pulumi:"name"`
	// The maximum number of rules that can be specified across all the endpoints on a Batch pool is 25. If no network security group rules are specified, a default rule will be created to allow inbound access to the specified backendPort. If the maximum number of network security group rules is exceeded the request fails with HTTP status code 400.
	NetworkSecurityGroupRules NetworkSecurityGroupRuleArrayInput `pulumi:"networkSecurityGroupRules"`
	Protocol                  pulumi.StringInput                 `pulumi:"protocol"`
}

func (InboundNatPoolArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InboundNatPool)(nil)).Elem()
}

func (i InboundNatPoolArgs) ToInboundNatPoolOutput() InboundNatPoolOutput {
	return i.ToInboundNatPoolOutputWithContext(context.Background())
}

func (i InboundNatPoolArgs) ToInboundNatPoolOutputWithContext(ctx context.Context) InboundNatPoolOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InboundNatPoolOutput)
}

// InboundNatPoolArrayInput is an input type that accepts InboundNatPoolArray and InboundNatPoolArrayOutput values.
// You can construct a concrete instance of `InboundNatPoolArrayInput` via:
//
//          InboundNatPoolArray{ InboundNatPoolArgs{...} }
type InboundNatPoolArrayInput interface {
	pulumi.Input

	ToInboundNatPoolArrayOutput() InboundNatPoolArrayOutput
	ToInboundNatPoolArrayOutputWithContext(context.Context) InboundNatPoolArrayOutput
}

type InboundNatPoolArray []InboundNatPoolInput

func (InboundNatPoolArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InboundNatPool)(nil)).Elem()
}

func (i InboundNatPoolArray) ToInboundNatPoolArrayOutput() InboundNatPoolArrayOutput {
	return i.ToInboundNatPoolArrayOutputWithContext(context.Background())
}

func (i InboundNatPoolArray) ToInboundNatPoolArrayOutputWithContext(ctx context.Context) InboundNatPoolArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InboundNatPoolArrayOutput)
}

type InboundNatPoolOutput struct{ *pulumi.OutputState }

func (InboundNatPoolOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InboundNatPool)(nil)).Elem()
}

func (o InboundNatPoolOutput) ToInboundNatPoolOutput() InboundNatPoolOutput {
	return o
}

func (o InboundNatPoolOutput) ToInboundNatPoolOutputWithContext(ctx context.Context) InboundNatPoolOutput {
	return o
}

// This must be unique within a Batch pool. Acceptable values are between 1 and 65535 except for 22, 3389, 29876 and 29877 as these are reserved. If any reserved values are provided the request fails with HTTP status code 400.
func (o InboundNatPoolOutput) BackendPort() pulumi.IntOutput {
	return o.ApplyT(func(v InboundNatPool) int { return v.BackendPort }).(pulumi.IntOutput)
}

// Acceptable values range between 1 and 65534 except ports from 50000 to 55000 which are reserved by the Batch service. All ranges within a pool must be distinct and cannot overlap. If any reserved or overlapping values are provided the request fails with HTTP status code 400.
func (o InboundNatPoolOutput) FrontendPortRangeEnd() pulumi.IntOutput {
	return o.ApplyT(func(v InboundNatPool) int { return v.FrontendPortRangeEnd }).(pulumi.IntOutput)
}

// Acceptable values range between 1 and 65534 except ports from 50000 to 55000 which are reserved. All ranges within a pool must be distinct and cannot overlap. If any reserved or overlapping values are provided the request fails with HTTP status code 400.
func (o InboundNatPoolOutput) FrontendPortRangeStart() pulumi.IntOutput {
	return o.ApplyT(func(v InboundNatPool) int { return v.FrontendPortRangeStart }).(pulumi.IntOutput)
}

// The name must be unique within a Batch pool, can contain letters, numbers, underscores, periods, and hyphens. Names must start with a letter or number, must end with a letter, number, or underscore, and cannot exceed 77 characters.  If any invalid values are provided the request fails with HTTP status code 400.
func (o InboundNatPoolOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v InboundNatPool) string { return v.Name }).(pulumi.StringOutput)
}

// The maximum number of rules that can be specified across all the endpoints on a Batch pool is 25. If no network security group rules are specified, a default rule will be created to allow inbound access to the specified backendPort. If the maximum number of network security group rules is exceeded the request fails with HTTP status code 400.
func (o InboundNatPoolOutput) NetworkSecurityGroupRules() NetworkSecurityGroupRuleArrayOutput {
	return o.ApplyT(func(v InboundNatPool) []NetworkSecurityGroupRule { return v.NetworkSecurityGroupRules }).(NetworkSecurityGroupRuleArrayOutput)
}

func (o InboundNatPoolOutput) Protocol() pulumi.StringOutput {
	return o.ApplyT(func(v InboundNatPool) string { return v.Protocol }).(pulumi.StringOutput)
}

type InboundNatPoolArrayOutput struct{ *pulumi.OutputState }

func (InboundNatPoolArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InboundNatPool)(nil)).Elem()
}

func (o InboundNatPoolArrayOutput) ToInboundNatPoolArrayOutput() InboundNatPoolArrayOutput {
	return o
}

func (o InboundNatPoolArrayOutput) ToInboundNatPoolArrayOutputWithContext(ctx context.Context) InboundNatPoolArrayOutput {
	return o
}

func (o InboundNatPoolArrayOutput) Index(i pulumi.IntInput) InboundNatPoolOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) InboundNatPool {
		return vs[0].([]InboundNatPool)[vs[1].(int)]
	}).(InboundNatPoolOutput)
}

type InboundNatPoolResponse struct {
	// This must be unique within a Batch pool. Acceptable values are between 1 and 65535 except for 22, 3389, 29876 and 29877 as these are reserved. If any reserved values are provided the request fails with HTTP status code 400.
	BackendPort int `pulumi:"backendPort"`
	// Acceptable values range between 1 and 65534 except ports from 50000 to 55000 which are reserved by the Batch service. All ranges within a pool must be distinct and cannot overlap. If any reserved or overlapping values are provided the request fails with HTTP status code 400.
	FrontendPortRangeEnd int `pulumi:"frontendPortRangeEnd"`
	// Acceptable values range between 1 and 65534 except ports from 50000 to 55000 which are reserved. All ranges within a pool must be distinct and cannot overlap. If any reserved or overlapping values are provided the request fails with HTTP status code 400.
	FrontendPortRangeStart int `pulumi:"frontendPortRangeStart"`
	// The name must be unique within a Batch pool, can contain letters, numbers, underscores, periods, and hyphens. Names must start with a letter or number, must end with a letter, number, or underscore, and cannot exceed 77 characters.  If any invalid values are provided the request fails with HTTP status code 400.
	Name string `pulumi:"name"`
	// The maximum number of rules that can be specified across all the endpoints on a Batch pool is 25. If no network security group rules are specified, a default rule will be created to allow inbound access to the specified backendPort. If the maximum number of network security group rules is exceeded the request fails with HTTP status code 400.
	NetworkSecurityGroupRules []NetworkSecurityGroupRuleResponse `pulumi:"networkSecurityGroupRules"`
	Protocol                  string                             `pulumi:"protocol"`
}

// InboundNatPoolResponseInput is an input type that accepts InboundNatPoolResponseArgs and InboundNatPoolResponseOutput values.
// You can construct a concrete instance of `InboundNatPoolResponseInput` via:
//
//          InboundNatPoolResponseArgs{...}
type InboundNatPoolResponseInput interface {
	pulumi.Input

	ToInboundNatPoolResponseOutput() InboundNatPoolResponseOutput
	ToInboundNatPoolResponseOutputWithContext(context.Context) InboundNatPoolResponseOutput
}

type InboundNatPoolResponseArgs struct {
	// This must be unique within a Batch pool. Acceptable values are between 1 and 65535 except for 22, 3389, 29876 and 29877 as these are reserved. If any reserved values are provided the request fails with HTTP status code 400.
	BackendPort pulumi.IntInput `pulumi:"backendPort"`
	// Acceptable values range between 1 and 65534 except ports from 50000 to 55000 which are reserved by the Batch service. All ranges within a pool must be distinct and cannot overlap. If any reserved or overlapping values are provided the request fails with HTTP status code 400.
	FrontendPortRangeEnd pulumi.IntInput `pulumi:"frontendPortRangeEnd"`
	// Acceptable values range between 1 and 65534 except ports from 50000 to 55000 which are reserved. All ranges within a pool must be distinct and cannot overlap. If any reserved or overlapping values are provided the request fails with HTTP status code 400.
	FrontendPortRangeStart pulumi.IntInput `pulumi:"frontendPortRangeStart"`
	// The name must be unique within a Batch pool, can contain letters, numbers, underscores, periods, and hyphens. Names must start with a letter or number, must end with a letter, number, or underscore, and cannot exceed 77 characters.  If any invalid values are provided the request fails with HTTP status code 400.
	Name pulumi.StringInput `pulumi:"name"`
	// The maximum number of rules that can be specified across all the endpoints on a Batch pool is 25. If no network security group rules are specified, a default rule will be created to allow inbound access to the specified backendPort. If the maximum number of network security group rules is exceeded the request fails with HTTP status code 400.
	NetworkSecurityGroupRules NetworkSecurityGroupRuleResponseArrayInput `pulumi:"networkSecurityGroupRules"`
	Protocol                  pulumi.StringInput                         `pulumi:"protocol"`
}

func (InboundNatPoolResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InboundNatPoolResponse)(nil)).Elem()
}

func (i InboundNatPoolResponseArgs) ToInboundNatPoolResponseOutput() InboundNatPoolResponseOutput {
	return i.ToInboundNatPoolResponseOutputWithContext(context.Background())
}

func (i InboundNatPoolResponseArgs) ToInboundNatPoolResponseOutputWithContext(ctx context.Context) InboundNatPoolResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InboundNatPoolResponseOutput)
}

// InboundNatPoolResponseArrayInput is an input type that accepts InboundNatPoolResponseArray and InboundNatPoolResponseArrayOutput values.
// You can construct a concrete instance of `InboundNatPoolResponseArrayInput` via:
//
//          InboundNatPoolResponseArray{ InboundNatPoolResponseArgs{...} }
type InboundNatPoolResponseArrayInput interface {
	pulumi.Input

	ToInboundNatPoolResponseArrayOutput() InboundNatPoolResponseArrayOutput
	ToInboundNatPoolResponseArrayOutputWithContext(context.Context) InboundNatPoolResponseArrayOutput
}

type InboundNatPoolResponseArray []InboundNatPoolResponseInput

func (InboundNatPoolResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InboundNatPoolResponse)(nil)).Elem()
}

func (i InboundNatPoolResponseArray) ToInboundNatPoolResponseArrayOutput() InboundNatPoolResponseArrayOutput {
	return i.ToInboundNatPoolResponseArrayOutputWithContext(context.Background())
}

func (i InboundNatPoolResponseArray) ToInboundNatPoolResponseArrayOutputWithContext(ctx context.Context) InboundNatPoolResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InboundNatPoolResponseArrayOutput)
}

type InboundNatPoolResponseOutput struct{ *pulumi.OutputState }

func (InboundNatPoolResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InboundNatPoolResponse)(nil)).Elem()
}

func (o InboundNatPoolResponseOutput) ToInboundNatPoolResponseOutput() InboundNatPoolResponseOutput {
	return o
}

func (o InboundNatPoolResponseOutput) ToInboundNatPoolResponseOutputWithContext(ctx context.Context) InboundNatPoolResponseOutput {
	return o
}

// This must be unique within a Batch pool. Acceptable values are between 1 and 65535 except for 22, 3389, 29876 and 29877 as these are reserved. If any reserved values are provided the request fails with HTTP status code 400.
func (o InboundNatPoolResponseOutput) BackendPort() pulumi.IntOutput {
	return o.ApplyT(func(v InboundNatPoolResponse) int { return v.BackendPort }).(pulumi.IntOutput)
}

// Acceptable values range between 1 and 65534 except ports from 50000 to 55000 which are reserved by the Batch service. All ranges within a pool must be distinct and cannot overlap. If any reserved or overlapping values are provided the request fails with HTTP status code 400.
func (o InboundNatPoolResponseOutput) FrontendPortRangeEnd() pulumi.IntOutput {
	return o.ApplyT(func(v InboundNatPoolResponse) int { return v.FrontendPortRangeEnd }).(pulumi.IntOutput)
}

// Acceptable values range between 1 and 65534 except ports from 50000 to 55000 which are reserved. All ranges within a pool must be distinct and cannot overlap. If any reserved or overlapping values are provided the request fails with HTTP status code 400.
func (o InboundNatPoolResponseOutput) FrontendPortRangeStart() pulumi.IntOutput {
	return o.ApplyT(func(v InboundNatPoolResponse) int { return v.FrontendPortRangeStart }).(pulumi.IntOutput)
}

// The name must be unique within a Batch pool, can contain letters, numbers, underscores, periods, and hyphens. Names must start with a letter or number, must end with a letter, number, or underscore, and cannot exceed 77 characters.  If any invalid values are provided the request fails with HTTP status code 400.
func (o InboundNatPoolResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v InboundNatPoolResponse) string { return v.Name }).(pulumi.StringOutput)
}

// The maximum number of rules that can be specified across all the endpoints on a Batch pool is 25. If no network security group rules are specified, a default rule will be created to allow inbound access to the specified backendPort. If the maximum number of network security group rules is exceeded the request fails with HTTP status code 400.
func (o InboundNatPoolResponseOutput) NetworkSecurityGroupRules() NetworkSecurityGroupRuleResponseArrayOutput {
	return o.ApplyT(func(v InboundNatPoolResponse) []NetworkSecurityGroupRuleResponse { return v.NetworkSecurityGroupRules }).(NetworkSecurityGroupRuleResponseArrayOutput)
}

func (o InboundNatPoolResponseOutput) Protocol() pulumi.StringOutput {
	return o.ApplyT(func(v InboundNatPoolResponse) string { return v.Protocol }).(pulumi.StringOutput)
}

type InboundNatPoolResponseArrayOutput struct{ *pulumi.OutputState }

func (InboundNatPoolResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InboundNatPoolResponse)(nil)).Elem()
}

func (o InboundNatPoolResponseArrayOutput) ToInboundNatPoolResponseArrayOutput() InboundNatPoolResponseArrayOutput {
	return o
}

func (o InboundNatPoolResponseArrayOutput) ToInboundNatPoolResponseArrayOutputWithContext(ctx context.Context) InboundNatPoolResponseArrayOutput {
	return o
}

func (o InboundNatPoolResponseArrayOutput) Index(i pulumi.IntInput) InboundNatPoolResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) InboundNatPoolResponse {
		return vs[0].([]InboundNatPoolResponse)[vs[1].(int)]
	}).(InboundNatPoolResponseOutput)
}

// KeyVault configuration when using an encryption KeySource of Microsoft.KeyVault.
type KeyVaultProperties struct {
	// Full path to the versioned secret. Example https://mykeyvault.vault.azure.net/keys/testkey/6e34a81fef704045975661e297a4c053. To be usable the following prerequisites must be met:
	//
	//  The Batch Account has a System Assigned identity
	//  The account identity has been granted Key/Get, Key/Unwrap and Key/Wrap permissions
	//  The KeyVault has soft-delete and purge protection enabled
	KeyIdentifier *string `pulumi:"keyIdentifier"`
}

// KeyVaultPropertiesInput is an input type that accepts KeyVaultPropertiesArgs and KeyVaultPropertiesOutput values.
// You can construct a concrete instance of `KeyVaultPropertiesInput` via:
//
//          KeyVaultPropertiesArgs{...}
type KeyVaultPropertiesInput interface {
	pulumi.Input

	ToKeyVaultPropertiesOutput() KeyVaultPropertiesOutput
	ToKeyVaultPropertiesOutputWithContext(context.Context) KeyVaultPropertiesOutput
}

// KeyVault configuration when using an encryption KeySource of Microsoft.KeyVault.
type KeyVaultPropertiesArgs struct {
	// Full path to the versioned secret. Example https://mykeyvault.vault.azure.net/keys/testkey/6e34a81fef704045975661e297a4c053. To be usable the following prerequisites must be met:
	//
	//  The Batch Account has a System Assigned identity
	//  The account identity has been granted Key/Get, Key/Unwrap and Key/Wrap permissions
	//  The KeyVault has soft-delete and purge protection enabled
	KeyIdentifier pulumi.StringPtrInput `pulumi:"keyIdentifier"`
}

func (KeyVaultPropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KeyVaultProperties)(nil)).Elem()
}

func (i KeyVaultPropertiesArgs) ToKeyVaultPropertiesOutput() KeyVaultPropertiesOutput {
	return i.ToKeyVaultPropertiesOutputWithContext(context.Background())
}

func (i KeyVaultPropertiesArgs) ToKeyVaultPropertiesOutputWithContext(ctx context.Context) KeyVaultPropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KeyVaultPropertiesOutput)
}

func (i KeyVaultPropertiesArgs) ToKeyVaultPropertiesPtrOutput() KeyVaultPropertiesPtrOutput {
	return i.ToKeyVaultPropertiesPtrOutputWithContext(context.Background())
}

func (i KeyVaultPropertiesArgs) ToKeyVaultPropertiesPtrOutputWithContext(ctx context.Context) KeyVaultPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KeyVaultPropertiesOutput).ToKeyVaultPropertiesPtrOutputWithContext(ctx)
}

// KeyVaultPropertiesPtrInput is an input type that accepts KeyVaultPropertiesArgs, KeyVaultPropertiesPtr and KeyVaultPropertiesPtrOutput values.
// You can construct a concrete instance of `KeyVaultPropertiesPtrInput` via:
//
//          KeyVaultPropertiesArgs{...}
//
//  or:
//
//          nil
type KeyVaultPropertiesPtrInput interface {
	pulumi.Input

	ToKeyVaultPropertiesPtrOutput() KeyVaultPropertiesPtrOutput
	ToKeyVaultPropertiesPtrOutputWithContext(context.Context) KeyVaultPropertiesPtrOutput
}

type keyVaultPropertiesPtrType KeyVaultPropertiesArgs

func KeyVaultPropertiesPtr(v *KeyVaultPropertiesArgs) KeyVaultPropertiesPtrInput {
	return (*keyVaultPropertiesPtrType)(v)
}

func (*keyVaultPropertiesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**KeyVaultProperties)(nil)).Elem()
}

func (i *keyVaultPropertiesPtrType) ToKeyVaultPropertiesPtrOutput() KeyVaultPropertiesPtrOutput {
	return i.ToKeyVaultPropertiesPtrOutputWithContext(context.Background())
}

func (i *keyVaultPropertiesPtrType) ToKeyVaultPropertiesPtrOutputWithContext(ctx context.Context) KeyVaultPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KeyVaultPropertiesPtrOutput)
}

// KeyVault configuration when using an encryption KeySource of Microsoft.KeyVault.
type KeyVaultPropertiesOutput struct{ *pulumi.OutputState }

func (KeyVaultPropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KeyVaultProperties)(nil)).Elem()
}

func (o KeyVaultPropertiesOutput) ToKeyVaultPropertiesOutput() KeyVaultPropertiesOutput {
	return o
}

func (o KeyVaultPropertiesOutput) ToKeyVaultPropertiesOutputWithContext(ctx context.Context) KeyVaultPropertiesOutput {
	return o
}

func (o KeyVaultPropertiesOutput) ToKeyVaultPropertiesPtrOutput() KeyVaultPropertiesPtrOutput {
	return o.ToKeyVaultPropertiesPtrOutputWithContext(context.Background())
}

func (o KeyVaultPropertiesOutput) ToKeyVaultPropertiesPtrOutputWithContext(ctx context.Context) KeyVaultPropertiesPtrOutput {
	return o.ApplyT(func(v KeyVaultProperties) *KeyVaultProperties {
		return &v
	}).(KeyVaultPropertiesPtrOutput)
}

// Full path to the versioned secret. Example https://mykeyvault.vault.azure.net/keys/testkey/6e34a81fef704045975661e297a4c053. To be usable the following prerequisites must be met:
//
//  The Batch Account has a System Assigned identity
//  The account identity has been granted Key/Get, Key/Unwrap and Key/Wrap permissions
//  The KeyVault has soft-delete and purge protection enabled
func (o KeyVaultPropertiesOutput) KeyIdentifier() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KeyVaultProperties) *string { return v.KeyIdentifier }).(pulumi.StringPtrOutput)
}

type KeyVaultPropertiesPtrOutput struct{ *pulumi.OutputState }

func (KeyVaultPropertiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KeyVaultProperties)(nil)).Elem()
}

func (o KeyVaultPropertiesPtrOutput) ToKeyVaultPropertiesPtrOutput() KeyVaultPropertiesPtrOutput {
	return o
}

func (o KeyVaultPropertiesPtrOutput) ToKeyVaultPropertiesPtrOutputWithContext(ctx context.Context) KeyVaultPropertiesPtrOutput {
	return o
}

func (o KeyVaultPropertiesPtrOutput) Elem() KeyVaultPropertiesOutput {
	return o.ApplyT(func(v *KeyVaultProperties) KeyVaultProperties { return *v }).(KeyVaultPropertiesOutput)
}

// Full path to the versioned secret. Example https://mykeyvault.vault.azure.net/keys/testkey/6e34a81fef704045975661e297a4c053. To be usable the following prerequisites must be met:
//
//  The Batch Account has a System Assigned identity
//  The account identity has been granted Key/Get, Key/Unwrap and Key/Wrap permissions
//  The KeyVault has soft-delete and purge protection enabled
func (o KeyVaultPropertiesPtrOutput) KeyIdentifier() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KeyVaultProperties) *string {
		if v == nil {
			return nil
		}
		return v.KeyIdentifier
	}).(pulumi.StringPtrOutput)
}

// KeyVault configuration when using an encryption KeySource of Microsoft.KeyVault.
type KeyVaultPropertiesResponse struct {
	// Full path to the versioned secret. Example https://mykeyvault.vault.azure.net/keys/testkey/6e34a81fef704045975661e297a4c053. To be usable the following prerequisites must be met:
	//
	//  The Batch Account has a System Assigned identity
	//  The account identity has been granted Key/Get, Key/Unwrap and Key/Wrap permissions
	//  The KeyVault has soft-delete and purge protection enabled
	KeyIdentifier *string `pulumi:"keyIdentifier"`
}

// KeyVaultPropertiesResponseInput is an input type that accepts KeyVaultPropertiesResponseArgs and KeyVaultPropertiesResponseOutput values.
// You can construct a concrete instance of `KeyVaultPropertiesResponseInput` via:
//
//          KeyVaultPropertiesResponseArgs{...}
type KeyVaultPropertiesResponseInput interface {
	pulumi.Input

	ToKeyVaultPropertiesResponseOutput() KeyVaultPropertiesResponseOutput
	ToKeyVaultPropertiesResponseOutputWithContext(context.Context) KeyVaultPropertiesResponseOutput
}

// KeyVault configuration when using an encryption KeySource of Microsoft.KeyVault.
type KeyVaultPropertiesResponseArgs struct {
	// Full path to the versioned secret. Example https://mykeyvault.vault.azure.net/keys/testkey/6e34a81fef704045975661e297a4c053. To be usable the following prerequisites must be met:
	//
	//  The Batch Account has a System Assigned identity
	//  The account identity has been granted Key/Get, Key/Unwrap and Key/Wrap permissions
	//  The KeyVault has soft-delete and purge protection enabled
	KeyIdentifier pulumi.StringPtrInput `pulumi:"keyIdentifier"`
}

func (KeyVaultPropertiesResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KeyVaultPropertiesResponse)(nil)).Elem()
}

func (i KeyVaultPropertiesResponseArgs) ToKeyVaultPropertiesResponseOutput() KeyVaultPropertiesResponseOutput {
	return i.ToKeyVaultPropertiesResponseOutputWithContext(context.Background())
}

func (i KeyVaultPropertiesResponseArgs) ToKeyVaultPropertiesResponseOutputWithContext(ctx context.Context) KeyVaultPropertiesResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KeyVaultPropertiesResponseOutput)
}

func (i KeyVaultPropertiesResponseArgs) ToKeyVaultPropertiesResponsePtrOutput() KeyVaultPropertiesResponsePtrOutput {
	return i.ToKeyVaultPropertiesResponsePtrOutputWithContext(context.Background())
}

func (i KeyVaultPropertiesResponseArgs) ToKeyVaultPropertiesResponsePtrOutputWithContext(ctx context.Context) KeyVaultPropertiesResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KeyVaultPropertiesResponseOutput).ToKeyVaultPropertiesResponsePtrOutputWithContext(ctx)
}

// KeyVaultPropertiesResponsePtrInput is an input type that accepts KeyVaultPropertiesResponseArgs, KeyVaultPropertiesResponsePtr and KeyVaultPropertiesResponsePtrOutput values.
// You can construct a concrete instance of `KeyVaultPropertiesResponsePtrInput` via:
//
//          KeyVaultPropertiesResponseArgs{...}
//
//  or:
//
//          nil
type KeyVaultPropertiesResponsePtrInput interface {
	pulumi.Input

	ToKeyVaultPropertiesResponsePtrOutput() KeyVaultPropertiesResponsePtrOutput
	ToKeyVaultPropertiesResponsePtrOutputWithContext(context.Context) KeyVaultPropertiesResponsePtrOutput
}

type keyVaultPropertiesResponsePtrType KeyVaultPropertiesResponseArgs

func KeyVaultPropertiesResponsePtr(v *KeyVaultPropertiesResponseArgs) KeyVaultPropertiesResponsePtrInput {
	return (*keyVaultPropertiesResponsePtrType)(v)
}

func (*keyVaultPropertiesResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**KeyVaultPropertiesResponse)(nil)).Elem()
}

func (i *keyVaultPropertiesResponsePtrType) ToKeyVaultPropertiesResponsePtrOutput() KeyVaultPropertiesResponsePtrOutput {
	return i.ToKeyVaultPropertiesResponsePtrOutputWithContext(context.Background())
}

func (i *keyVaultPropertiesResponsePtrType) ToKeyVaultPropertiesResponsePtrOutputWithContext(ctx context.Context) KeyVaultPropertiesResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KeyVaultPropertiesResponsePtrOutput)
}

// KeyVault configuration when using an encryption KeySource of Microsoft.KeyVault.
type KeyVaultPropertiesResponseOutput struct{ *pulumi.OutputState }

func (KeyVaultPropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KeyVaultPropertiesResponse)(nil)).Elem()
}

func (o KeyVaultPropertiesResponseOutput) ToKeyVaultPropertiesResponseOutput() KeyVaultPropertiesResponseOutput {
	return o
}

func (o KeyVaultPropertiesResponseOutput) ToKeyVaultPropertiesResponseOutputWithContext(ctx context.Context) KeyVaultPropertiesResponseOutput {
	return o
}

func (o KeyVaultPropertiesResponseOutput) ToKeyVaultPropertiesResponsePtrOutput() KeyVaultPropertiesResponsePtrOutput {
	return o.ToKeyVaultPropertiesResponsePtrOutputWithContext(context.Background())
}

func (o KeyVaultPropertiesResponseOutput) ToKeyVaultPropertiesResponsePtrOutputWithContext(ctx context.Context) KeyVaultPropertiesResponsePtrOutput {
	return o.ApplyT(func(v KeyVaultPropertiesResponse) *KeyVaultPropertiesResponse {
		return &v
	}).(KeyVaultPropertiesResponsePtrOutput)
}

// Full path to the versioned secret. Example https://mykeyvault.vault.azure.net/keys/testkey/6e34a81fef704045975661e297a4c053. To be usable the following prerequisites must be met:
//
//  The Batch Account has a System Assigned identity
//  The account identity has been granted Key/Get, Key/Unwrap and Key/Wrap permissions
//  The KeyVault has soft-delete and purge protection enabled
func (o KeyVaultPropertiesResponseOutput) KeyIdentifier() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KeyVaultPropertiesResponse) *string { return v.KeyIdentifier }).(pulumi.StringPtrOutput)
}

type KeyVaultPropertiesResponsePtrOutput struct{ *pulumi.OutputState }

func (KeyVaultPropertiesResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KeyVaultPropertiesResponse)(nil)).Elem()
}

func (o KeyVaultPropertiesResponsePtrOutput) ToKeyVaultPropertiesResponsePtrOutput() KeyVaultPropertiesResponsePtrOutput {
	return o
}

func (o KeyVaultPropertiesResponsePtrOutput) ToKeyVaultPropertiesResponsePtrOutputWithContext(ctx context.Context) KeyVaultPropertiesResponsePtrOutput {
	return o
}

func (o KeyVaultPropertiesResponsePtrOutput) Elem() KeyVaultPropertiesResponseOutput {
	return o.ApplyT(func(v *KeyVaultPropertiesResponse) KeyVaultPropertiesResponse { return *v }).(KeyVaultPropertiesResponseOutput)
}

// Full path to the versioned secret. Example https://mykeyvault.vault.azure.net/keys/testkey/6e34a81fef704045975661e297a4c053. To be usable the following prerequisites must be met:
//
//  The Batch Account has a System Assigned identity
//  The account identity has been granted Key/Get, Key/Unwrap and Key/Wrap permissions
//  The KeyVault has soft-delete and purge protection enabled
func (o KeyVaultPropertiesResponsePtrOutput) KeyIdentifier() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KeyVaultPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return v.KeyIdentifier
	}).(pulumi.StringPtrOutput)
}

// Identifies the Azure key vault associated with a Batch account.
type KeyVaultReference struct {
	// The resource ID of the Azure key vault associated with the Batch account.
	Id string `pulumi:"id"`
	// The URL of the Azure key vault associated with the Batch account.
	Url string `pulumi:"url"`
}

// KeyVaultReferenceInput is an input type that accepts KeyVaultReferenceArgs and KeyVaultReferenceOutput values.
// You can construct a concrete instance of `KeyVaultReferenceInput` via:
//
//          KeyVaultReferenceArgs{...}
type KeyVaultReferenceInput interface {
	pulumi.Input

	ToKeyVaultReferenceOutput() KeyVaultReferenceOutput
	ToKeyVaultReferenceOutputWithContext(context.Context) KeyVaultReferenceOutput
}

// Identifies the Azure key vault associated with a Batch account.
type KeyVaultReferenceArgs struct {
	// The resource ID of the Azure key vault associated with the Batch account.
	Id pulumi.StringInput `pulumi:"id"`
	// The URL of the Azure key vault associated with the Batch account.
	Url pulumi.StringInput `pulumi:"url"`
}

func (KeyVaultReferenceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KeyVaultReference)(nil)).Elem()
}

func (i KeyVaultReferenceArgs) ToKeyVaultReferenceOutput() KeyVaultReferenceOutput {
	return i.ToKeyVaultReferenceOutputWithContext(context.Background())
}

func (i KeyVaultReferenceArgs) ToKeyVaultReferenceOutputWithContext(ctx context.Context) KeyVaultReferenceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KeyVaultReferenceOutput)
}

func (i KeyVaultReferenceArgs) ToKeyVaultReferencePtrOutput() KeyVaultReferencePtrOutput {
	return i.ToKeyVaultReferencePtrOutputWithContext(context.Background())
}

func (i KeyVaultReferenceArgs) ToKeyVaultReferencePtrOutputWithContext(ctx context.Context) KeyVaultReferencePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KeyVaultReferenceOutput).ToKeyVaultReferencePtrOutputWithContext(ctx)
}

// KeyVaultReferencePtrInput is an input type that accepts KeyVaultReferenceArgs, KeyVaultReferencePtr and KeyVaultReferencePtrOutput values.
// You can construct a concrete instance of `KeyVaultReferencePtrInput` via:
//
//          KeyVaultReferenceArgs{...}
//
//  or:
//
//          nil
type KeyVaultReferencePtrInput interface {
	pulumi.Input

	ToKeyVaultReferencePtrOutput() KeyVaultReferencePtrOutput
	ToKeyVaultReferencePtrOutputWithContext(context.Context) KeyVaultReferencePtrOutput
}

type keyVaultReferencePtrType KeyVaultReferenceArgs

func KeyVaultReferencePtr(v *KeyVaultReferenceArgs) KeyVaultReferencePtrInput {
	return (*keyVaultReferencePtrType)(v)
}

func (*keyVaultReferencePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**KeyVaultReference)(nil)).Elem()
}

func (i *keyVaultReferencePtrType) ToKeyVaultReferencePtrOutput() KeyVaultReferencePtrOutput {
	return i.ToKeyVaultReferencePtrOutputWithContext(context.Background())
}

func (i *keyVaultReferencePtrType) ToKeyVaultReferencePtrOutputWithContext(ctx context.Context) KeyVaultReferencePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KeyVaultReferencePtrOutput)
}

// Identifies the Azure key vault associated with a Batch account.
type KeyVaultReferenceOutput struct{ *pulumi.OutputState }

func (KeyVaultReferenceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KeyVaultReference)(nil)).Elem()
}

func (o KeyVaultReferenceOutput) ToKeyVaultReferenceOutput() KeyVaultReferenceOutput {
	return o
}

func (o KeyVaultReferenceOutput) ToKeyVaultReferenceOutputWithContext(ctx context.Context) KeyVaultReferenceOutput {
	return o
}

func (o KeyVaultReferenceOutput) ToKeyVaultReferencePtrOutput() KeyVaultReferencePtrOutput {
	return o.ToKeyVaultReferencePtrOutputWithContext(context.Background())
}

func (o KeyVaultReferenceOutput) ToKeyVaultReferencePtrOutputWithContext(ctx context.Context) KeyVaultReferencePtrOutput {
	return o.ApplyT(func(v KeyVaultReference) *KeyVaultReference {
		return &v
	}).(KeyVaultReferencePtrOutput)
}

// The resource ID of the Azure key vault associated with the Batch account.
func (o KeyVaultReferenceOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v KeyVaultReference) string { return v.Id }).(pulumi.StringOutput)
}

// The URL of the Azure key vault associated with the Batch account.
func (o KeyVaultReferenceOutput) Url() pulumi.StringOutput {
	return o.ApplyT(func(v KeyVaultReference) string { return v.Url }).(pulumi.StringOutput)
}

type KeyVaultReferencePtrOutput struct{ *pulumi.OutputState }

func (KeyVaultReferencePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KeyVaultReference)(nil)).Elem()
}

func (o KeyVaultReferencePtrOutput) ToKeyVaultReferencePtrOutput() KeyVaultReferencePtrOutput {
	return o
}

func (o KeyVaultReferencePtrOutput) ToKeyVaultReferencePtrOutputWithContext(ctx context.Context) KeyVaultReferencePtrOutput {
	return o
}

func (o KeyVaultReferencePtrOutput) Elem() KeyVaultReferenceOutput {
	return o.ApplyT(func(v *KeyVaultReference) KeyVaultReference { return *v }).(KeyVaultReferenceOutput)
}

// The resource ID of the Azure key vault associated with the Batch account.
func (o KeyVaultReferencePtrOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KeyVaultReference) *string {
		if v == nil {
			return nil
		}
		return &v.Id
	}).(pulumi.StringPtrOutput)
}

// The URL of the Azure key vault associated with the Batch account.
func (o KeyVaultReferencePtrOutput) Url() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KeyVaultReference) *string {
		if v == nil {
			return nil
		}
		return &v.Url
	}).(pulumi.StringPtrOutput)
}

// Identifies the Azure key vault associated with a Batch account.
type KeyVaultReferenceResponse struct {
	// The resource ID of the Azure key vault associated with the Batch account.
	Id string `pulumi:"id"`
	// The URL of the Azure key vault associated with the Batch account.
	Url string `pulumi:"url"`
}

// KeyVaultReferenceResponseInput is an input type that accepts KeyVaultReferenceResponseArgs and KeyVaultReferenceResponseOutput values.
// You can construct a concrete instance of `KeyVaultReferenceResponseInput` via:
//
//          KeyVaultReferenceResponseArgs{...}
type KeyVaultReferenceResponseInput interface {
	pulumi.Input

	ToKeyVaultReferenceResponseOutput() KeyVaultReferenceResponseOutput
	ToKeyVaultReferenceResponseOutputWithContext(context.Context) KeyVaultReferenceResponseOutput
}

// Identifies the Azure key vault associated with a Batch account.
type KeyVaultReferenceResponseArgs struct {
	// The resource ID of the Azure key vault associated with the Batch account.
	Id pulumi.StringInput `pulumi:"id"`
	// The URL of the Azure key vault associated with the Batch account.
	Url pulumi.StringInput `pulumi:"url"`
}

func (KeyVaultReferenceResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KeyVaultReferenceResponse)(nil)).Elem()
}

func (i KeyVaultReferenceResponseArgs) ToKeyVaultReferenceResponseOutput() KeyVaultReferenceResponseOutput {
	return i.ToKeyVaultReferenceResponseOutputWithContext(context.Background())
}

func (i KeyVaultReferenceResponseArgs) ToKeyVaultReferenceResponseOutputWithContext(ctx context.Context) KeyVaultReferenceResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KeyVaultReferenceResponseOutput)
}

func (i KeyVaultReferenceResponseArgs) ToKeyVaultReferenceResponsePtrOutput() KeyVaultReferenceResponsePtrOutput {
	return i.ToKeyVaultReferenceResponsePtrOutputWithContext(context.Background())
}

func (i KeyVaultReferenceResponseArgs) ToKeyVaultReferenceResponsePtrOutputWithContext(ctx context.Context) KeyVaultReferenceResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KeyVaultReferenceResponseOutput).ToKeyVaultReferenceResponsePtrOutputWithContext(ctx)
}

// KeyVaultReferenceResponsePtrInput is an input type that accepts KeyVaultReferenceResponseArgs, KeyVaultReferenceResponsePtr and KeyVaultReferenceResponsePtrOutput values.
// You can construct a concrete instance of `KeyVaultReferenceResponsePtrInput` via:
//
//          KeyVaultReferenceResponseArgs{...}
//
//  or:
//
//          nil
type KeyVaultReferenceResponsePtrInput interface {
	pulumi.Input

	ToKeyVaultReferenceResponsePtrOutput() KeyVaultReferenceResponsePtrOutput
	ToKeyVaultReferenceResponsePtrOutputWithContext(context.Context) KeyVaultReferenceResponsePtrOutput
}

type keyVaultReferenceResponsePtrType KeyVaultReferenceResponseArgs

func KeyVaultReferenceResponsePtr(v *KeyVaultReferenceResponseArgs) KeyVaultReferenceResponsePtrInput {
	return (*keyVaultReferenceResponsePtrType)(v)
}

func (*keyVaultReferenceResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**KeyVaultReferenceResponse)(nil)).Elem()
}

func (i *keyVaultReferenceResponsePtrType) ToKeyVaultReferenceResponsePtrOutput() KeyVaultReferenceResponsePtrOutput {
	return i.ToKeyVaultReferenceResponsePtrOutputWithContext(context.Background())
}

func (i *keyVaultReferenceResponsePtrType) ToKeyVaultReferenceResponsePtrOutputWithContext(ctx context.Context) KeyVaultReferenceResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KeyVaultReferenceResponsePtrOutput)
}

// Identifies the Azure key vault associated with a Batch account.
type KeyVaultReferenceResponseOutput struct{ *pulumi.OutputState }

func (KeyVaultReferenceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KeyVaultReferenceResponse)(nil)).Elem()
}

func (o KeyVaultReferenceResponseOutput) ToKeyVaultReferenceResponseOutput() KeyVaultReferenceResponseOutput {
	return o
}

func (o KeyVaultReferenceResponseOutput) ToKeyVaultReferenceResponseOutputWithContext(ctx context.Context) KeyVaultReferenceResponseOutput {
	return o
}

func (o KeyVaultReferenceResponseOutput) ToKeyVaultReferenceResponsePtrOutput() KeyVaultReferenceResponsePtrOutput {
	return o.ToKeyVaultReferenceResponsePtrOutputWithContext(context.Background())
}

func (o KeyVaultReferenceResponseOutput) ToKeyVaultReferenceResponsePtrOutputWithContext(ctx context.Context) KeyVaultReferenceResponsePtrOutput {
	return o.ApplyT(func(v KeyVaultReferenceResponse) *KeyVaultReferenceResponse {
		return &v
	}).(KeyVaultReferenceResponsePtrOutput)
}

// The resource ID of the Azure key vault associated with the Batch account.
func (o KeyVaultReferenceResponseOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v KeyVaultReferenceResponse) string { return v.Id }).(pulumi.StringOutput)
}

// The URL of the Azure key vault associated with the Batch account.
func (o KeyVaultReferenceResponseOutput) Url() pulumi.StringOutput {
	return o.ApplyT(func(v KeyVaultReferenceResponse) string { return v.Url }).(pulumi.StringOutput)
}

type KeyVaultReferenceResponsePtrOutput struct{ *pulumi.OutputState }

func (KeyVaultReferenceResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KeyVaultReferenceResponse)(nil)).Elem()
}

func (o KeyVaultReferenceResponsePtrOutput) ToKeyVaultReferenceResponsePtrOutput() KeyVaultReferenceResponsePtrOutput {
	return o
}

func (o KeyVaultReferenceResponsePtrOutput) ToKeyVaultReferenceResponsePtrOutputWithContext(ctx context.Context) KeyVaultReferenceResponsePtrOutput {
	return o
}

func (o KeyVaultReferenceResponsePtrOutput) Elem() KeyVaultReferenceResponseOutput {
	return o.ApplyT(func(v *KeyVaultReferenceResponse) KeyVaultReferenceResponse { return *v }).(KeyVaultReferenceResponseOutput)
}

// The resource ID of the Azure key vault associated with the Batch account.
func (o KeyVaultReferenceResponsePtrOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KeyVaultReferenceResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Id
	}).(pulumi.StringPtrOutput)
}

// The URL of the Azure key vault associated with the Batch account.
func (o KeyVaultReferenceResponsePtrOutput) Url() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KeyVaultReferenceResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Url
	}).(pulumi.StringPtrOutput)
}

type LinuxUserConfiguration struct {
	// The uid and gid properties must be specified together or not at all. If not specified the underlying operating system picks the gid.
	Gid *int `pulumi:"gid"`
	// The private key must not be password protected. The private key is used to automatically configure asymmetric-key based authentication for SSH between nodes in a Linux pool when the pool's enableInterNodeCommunication property is true (it is ignored if enableInterNodeCommunication is false). It does this by placing the key pair into the user's .ssh directory. If not specified, password-less SSH is not configured between nodes (no modification of the user's .ssh directory is done).
	SshPrivateKey *string `pulumi:"sshPrivateKey"`
	// The uid and gid properties must be specified together or not at all. If not specified the underlying operating system picks the uid.
	Uid *int `pulumi:"uid"`
}

// LinuxUserConfigurationInput is an input type that accepts LinuxUserConfigurationArgs and LinuxUserConfigurationOutput values.
// You can construct a concrete instance of `LinuxUserConfigurationInput` via:
//
//          LinuxUserConfigurationArgs{...}
type LinuxUserConfigurationInput interface {
	pulumi.Input

	ToLinuxUserConfigurationOutput() LinuxUserConfigurationOutput
	ToLinuxUserConfigurationOutputWithContext(context.Context) LinuxUserConfigurationOutput
}

type LinuxUserConfigurationArgs struct {
	// The uid and gid properties must be specified together or not at all. If not specified the underlying operating system picks the gid.
	Gid pulumi.IntPtrInput `pulumi:"gid"`
	// The private key must not be password protected. The private key is used to automatically configure asymmetric-key based authentication for SSH between nodes in a Linux pool when the pool's enableInterNodeCommunication property is true (it is ignored if enableInterNodeCommunication is false). It does this by placing the key pair into the user's .ssh directory. If not specified, password-less SSH is not configured between nodes (no modification of the user's .ssh directory is done).
	SshPrivateKey pulumi.StringPtrInput `pulumi:"sshPrivateKey"`
	// The uid and gid properties must be specified together or not at all. If not specified the underlying operating system picks the uid.
	Uid pulumi.IntPtrInput `pulumi:"uid"`
}

func (LinuxUserConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LinuxUserConfiguration)(nil)).Elem()
}

func (i LinuxUserConfigurationArgs) ToLinuxUserConfigurationOutput() LinuxUserConfigurationOutput {
	return i.ToLinuxUserConfigurationOutputWithContext(context.Background())
}

func (i LinuxUserConfigurationArgs) ToLinuxUserConfigurationOutputWithContext(ctx context.Context) LinuxUserConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LinuxUserConfigurationOutput)
}

func (i LinuxUserConfigurationArgs) ToLinuxUserConfigurationPtrOutput() LinuxUserConfigurationPtrOutput {
	return i.ToLinuxUserConfigurationPtrOutputWithContext(context.Background())
}

func (i LinuxUserConfigurationArgs) ToLinuxUserConfigurationPtrOutputWithContext(ctx context.Context) LinuxUserConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LinuxUserConfigurationOutput).ToLinuxUserConfigurationPtrOutputWithContext(ctx)
}

// LinuxUserConfigurationPtrInput is an input type that accepts LinuxUserConfigurationArgs, LinuxUserConfigurationPtr and LinuxUserConfigurationPtrOutput values.
// You can construct a concrete instance of `LinuxUserConfigurationPtrInput` via:
//
//          LinuxUserConfigurationArgs{...}
//
//  or:
//
//          nil
type LinuxUserConfigurationPtrInput interface {
	pulumi.Input

	ToLinuxUserConfigurationPtrOutput() LinuxUserConfigurationPtrOutput
	ToLinuxUserConfigurationPtrOutputWithContext(context.Context) LinuxUserConfigurationPtrOutput
}

type linuxUserConfigurationPtrType LinuxUserConfigurationArgs

func LinuxUserConfigurationPtr(v *LinuxUserConfigurationArgs) LinuxUserConfigurationPtrInput {
	return (*linuxUserConfigurationPtrType)(v)
}

func (*linuxUserConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**LinuxUserConfiguration)(nil)).Elem()
}

func (i *linuxUserConfigurationPtrType) ToLinuxUserConfigurationPtrOutput() LinuxUserConfigurationPtrOutput {
	return i.ToLinuxUserConfigurationPtrOutputWithContext(context.Background())
}

func (i *linuxUserConfigurationPtrType) ToLinuxUserConfigurationPtrOutputWithContext(ctx context.Context) LinuxUserConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LinuxUserConfigurationPtrOutput)
}

type LinuxUserConfigurationOutput struct{ *pulumi.OutputState }

func (LinuxUserConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LinuxUserConfiguration)(nil)).Elem()
}

func (o LinuxUserConfigurationOutput) ToLinuxUserConfigurationOutput() LinuxUserConfigurationOutput {
	return o
}

func (o LinuxUserConfigurationOutput) ToLinuxUserConfigurationOutputWithContext(ctx context.Context) LinuxUserConfigurationOutput {
	return o
}

func (o LinuxUserConfigurationOutput) ToLinuxUserConfigurationPtrOutput() LinuxUserConfigurationPtrOutput {
	return o.ToLinuxUserConfigurationPtrOutputWithContext(context.Background())
}

func (o LinuxUserConfigurationOutput) ToLinuxUserConfigurationPtrOutputWithContext(ctx context.Context) LinuxUserConfigurationPtrOutput {
	return o.ApplyT(func(v LinuxUserConfiguration) *LinuxUserConfiguration {
		return &v
	}).(LinuxUserConfigurationPtrOutput)
}

// The uid and gid properties must be specified together or not at all. If not specified the underlying operating system picks the gid.
func (o LinuxUserConfigurationOutput) Gid() pulumi.IntPtrOutput {
	return o.ApplyT(func(v LinuxUserConfiguration) *int { return v.Gid }).(pulumi.IntPtrOutput)
}

// The private key must not be password protected. The private key is used to automatically configure asymmetric-key based authentication for SSH between nodes in a Linux pool when the pool's enableInterNodeCommunication property is true (it is ignored if enableInterNodeCommunication is false). It does this by placing the key pair into the user's .ssh directory. If not specified, password-less SSH is not configured between nodes (no modification of the user's .ssh directory is done).
func (o LinuxUserConfigurationOutput) SshPrivateKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LinuxUserConfiguration) *string { return v.SshPrivateKey }).(pulumi.StringPtrOutput)
}

// The uid and gid properties must be specified together or not at all. If not specified the underlying operating system picks the uid.
func (o LinuxUserConfigurationOutput) Uid() pulumi.IntPtrOutput {
	return o.ApplyT(func(v LinuxUserConfiguration) *int { return v.Uid }).(pulumi.IntPtrOutput)
}

type LinuxUserConfigurationPtrOutput struct{ *pulumi.OutputState }

func (LinuxUserConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LinuxUserConfiguration)(nil)).Elem()
}

func (o LinuxUserConfigurationPtrOutput) ToLinuxUserConfigurationPtrOutput() LinuxUserConfigurationPtrOutput {
	return o
}

func (o LinuxUserConfigurationPtrOutput) ToLinuxUserConfigurationPtrOutputWithContext(ctx context.Context) LinuxUserConfigurationPtrOutput {
	return o
}

func (o LinuxUserConfigurationPtrOutput) Elem() LinuxUserConfigurationOutput {
	return o.ApplyT(func(v *LinuxUserConfiguration) LinuxUserConfiguration { return *v }).(LinuxUserConfigurationOutput)
}

// The uid and gid properties must be specified together or not at all. If not specified the underlying operating system picks the gid.
func (o LinuxUserConfigurationPtrOutput) Gid() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *LinuxUserConfiguration) *int {
		if v == nil {
			return nil
		}
		return v.Gid
	}).(pulumi.IntPtrOutput)
}

// The private key must not be password protected. The private key is used to automatically configure asymmetric-key based authentication for SSH between nodes in a Linux pool when the pool's enableInterNodeCommunication property is true (it is ignored if enableInterNodeCommunication is false). It does this by placing the key pair into the user's .ssh directory. If not specified, password-less SSH is not configured between nodes (no modification of the user's .ssh directory is done).
func (o LinuxUserConfigurationPtrOutput) SshPrivateKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LinuxUserConfiguration) *string {
		if v == nil {
			return nil
		}
		return v.SshPrivateKey
	}).(pulumi.StringPtrOutput)
}

// The uid and gid properties must be specified together or not at all. If not specified the underlying operating system picks the uid.
func (o LinuxUserConfigurationPtrOutput) Uid() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *LinuxUserConfiguration) *int {
		if v == nil {
			return nil
		}
		return v.Uid
	}).(pulumi.IntPtrOutput)
}

type LinuxUserConfigurationResponse struct {
	// The uid and gid properties must be specified together or not at all. If not specified the underlying operating system picks the gid.
	Gid *int `pulumi:"gid"`
	// The private key must not be password protected. The private key is used to automatically configure asymmetric-key based authentication for SSH between nodes in a Linux pool when the pool's enableInterNodeCommunication property is true (it is ignored if enableInterNodeCommunication is false). It does this by placing the key pair into the user's .ssh directory. If not specified, password-less SSH is not configured between nodes (no modification of the user's .ssh directory is done).
	SshPrivateKey *string `pulumi:"sshPrivateKey"`
	// The uid and gid properties must be specified together or not at all. If not specified the underlying operating system picks the uid.
	Uid *int `pulumi:"uid"`
}

// LinuxUserConfigurationResponseInput is an input type that accepts LinuxUserConfigurationResponseArgs and LinuxUserConfigurationResponseOutput values.
// You can construct a concrete instance of `LinuxUserConfigurationResponseInput` via:
//
//          LinuxUserConfigurationResponseArgs{...}
type LinuxUserConfigurationResponseInput interface {
	pulumi.Input

	ToLinuxUserConfigurationResponseOutput() LinuxUserConfigurationResponseOutput
	ToLinuxUserConfigurationResponseOutputWithContext(context.Context) LinuxUserConfigurationResponseOutput
}

type LinuxUserConfigurationResponseArgs struct {
	// The uid and gid properties must be specified together or not at all. If not specified the underlying operating system picks the gid.
	Gid pulumi.IntPtrInput `pulumi:"gid"`
	// The private key must not be password protected. The private key is used to automatically configure asymmetric-key based authentication for SSH between nodes in a Linux pool when the pool's enableInterNodeCommunication property is true (it is ignored if enableInterNodeCommunication is false). It does this by placing the key pair into the user's .ssh directory. If not specified, password-less SSH is not configured between nodes (no modification of the user's .ssh directory is done).
	SshPrivateKey pulumi.StringPtrInput `pulumi:"sshPrivateKey"`
	// The uid and gid properties must be specified together or not at all. If not specified the underlying operating system picks the uid.
	Uid pulumi.IntPtrInput `pulumi:"uid"`
}

func (LinuxUserConfigurationResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LinuxUserConfigurationResponse)(nil)).Elem()
}

func (i LinuxUserConfigurationResponseArgs) ToLinuxUserConfigurationResponseOutput() LinuxUserConfigurationResponseOutput {
	return i.ToLinuxUserConfigurationResponseOutputWithContext(context.Background())
}

func (i LinuxUserConfigurationResponseArgs) ToLinuxUserConfigurationResponseOutputWithContext(ctx context.Context) LinuxUserConfigurationResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LinuxUserConfigurationResponseOutput)
}

func (i LinuxUserConfigurationResponseArgs) ToLinuxUserConfigurationResponsePtrOutput() LinuxUserConfigurationResponsePtrOutput {
	return i.ToLinuxUserConfigurationResponsePtrOutputWithContext(context.Background())
}

func (i LinuxUserConfigurationResponseArgs) ToLinuxUserConfigurationResponsePtrOutputWithContext(ctx context.Context) LinuxUserConfigurationResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LinuxUserConfigurationResponseOutput).ToLinuxUserConfigurationResponsePtrOutputWithContext(ctx)
}

// LinuxUserConfigurationResponsePtrInput is an input type that accepts LinuxUserConfigurationResponseArgs, LinuxUserConfigurationResponsePtr and LinuxUserConfigurationResponsePtrOutput values.
// You can construct a concrete instance of `LinuxUserConfigurationResponsePtrInput` via:
//
//          LinuxUserConfigurationResponseArgs{...}
//
//  or:
//
//          nil
type LinuxUserConfigurationResponsePtrInput interface {
	pulumi.Input

	ToLinuxUserConfigurationResponsePtrOutput() LinuxUserConfigurationResponsePtrOutput
	ToLinuxUserConfigurationResponsePtrOutputWithContext(context.Context) LinuxUserConfigurationResponsePtrOutput
}

type linuxUserConfigurationResponsePtrType LinuxUserConfigurationResponseArgs

func LinuxUserConfigurationResponsePtr(v *LinuxUserConfigurationResponseArgs) LinuxUserConfigurationResponsePtrInput {
	return (*linuxUserConfigurationResponsePtrType)(v)
}

func (*linuxUserConfigurationResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**LinuxUserConfigurationResponse)(nil)).Elem()
}

func (i *linuxUserConfigurationResponsePtrType) ToLinuxUserConfigurationResponsePtrOutput() LinuxUserConfigurationResponsePtrOutput {
	return i.ToLinuxUserConfigurationResponsePtrOutputWithContext(context.Background())
}

func (i *linuxUserConfigurationResponsePtrType) ToLinuxUserConfigurationResponsePtrOutputWithContext(ctx context.Context) LinuxUserConfigurationResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LinuxUserConfigurationResponsePtrOutput)
}

type LinuxUserConfigurationResponseOutput struct{ *pulumi.OutputState }

func (LinuxUserConfigurationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LinuxUserConfigurationResponse)(nil)).Elem()
}

func (o LinuxUserConfigurationResponseOutput) ToLinuxUserConfigurationResponseOutput() LinuxUserConfigurationResponseOutput {
	return o
}

func (o LinuxUserConfigurationResponseOutput) ToLinuxUserConfigurationResponseOutputWithContext(ctx context.Context) LinuxUserConfigurationResponseOutput {
	return o
}

func (o LinuxUserConfigurationResponseOutput) ToLinuxUserConfigurationResponsePtrOutput() LinuxUserConfigurationResponsePtrOutput {
	return o.ToLinuxUserConfigurationResponsePtrOutputWithContext(context.Background())
}

func (o LinuxUserConfigurationResponseOutput) ToLinuxUserConfigurationResponsePtrOutputWithContext(ctx context.Context) LinuxUserConfigurationResponsePtrOutput {
	return o.ApplyT(func(v LinuxUserConfigurationResponse) *LinuxUserConfigurationResponse {
		return &v
	}).(LinuxUserConfigurationResponsePtrOutput)
}

// The uid and gid properties must be specified together or not at all. If not specified the underlying operating system picks the gid.
func (o LinuxUserConfigurationResponseOutput) Gid() pulumi.IntPtrOutput {
	return o.ApplyT(func(v LinuxUserConfigurationResponse) *int { return v.Gid }).(pulumi.IntPtrOutput)
}

// The private key must not be password protected. The private key is used to automatically configure asymmetric-key based authentication for SSH between nodes in a Linux pool when the pool's enableInterNodeCommunication property is true (it is ignored if enableInterNodeCommunication is false). It does this by placing the key pair into the user's .ssh directory. If not specified, password-less SSH is not configured between nodes (no modification of the user's .ssh directory is done).
func (o LinuxUserConfigurationResponseOutput) SshPrivateKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LinuxUserConfigurationResponse) *string { return v.SshPrivateKey }).(pulumi.StringPtrOutput)
}

// The uid and gid properties must be specified together or not at all. If not specified the underlying operating system picks the uid.
func (o LinuxUserConfigurationResponseOutput) Uid() pulumi.IntPtrOutput {
	return o.ApplyT(func(v LinuxUserConfigurationResponse) *int { return v.Uid }).(pulumi.IntPtrOutput)
}

type LinuxUserConfigurationResponsePtrOutput struct{ *pulumi.OutputState }

func (LinuxUserConfigurationResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LinuxUserConfigurationResponse)(nil)).Elem()
}

func (o LinuxUserConfigurationResponsePtrOutput) ToLinuxUserConfigurationResponsePtrOutput() LinuxUserConfigurationResponsePtrOutput {
	return o
}

func (o LinuxUserConfigurationResponsePtrOutput) ToLinuxUserConfigurationResponsePtrOutputWithContext(ctx context.Context) LinuxUserConfigurationResponsePtrOutput {
	return o
}

func (o LinuxUserConfigurationResponsePtrOutput) Elem() LinuxUserConfigurationResponseOutput {
	return o.ApplyT(func(v *LinuxUserConfigurationResponse) LinuxUserConfigurationResponse { return *v }).(LinuxUserConfigurationResponseOutput)
}

// The uid and gid properties must be specified together or not at all. If not specified the underlying operating system picks the gid.
func (o LinuxUserConfigurationResponsePtrOutput) Gid() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *LinuxUserConfigurationResponse) *int {
		if v == nil {
			return nil
		}
		return v.Gid
	}).(pulumi.IntPtrOutput)
}

// The private key must not be password protected. The private key is used to automatically configure asymmetric-key based authentication for SSH between nodes in a Linux pool when the pool's enableInterNodeCommunication property is true (it is ignored if enableInterNodeCommunication is false). It does this by placing the key pair into the user's .ssh directory. If not specified, password-less SSH is not configured between nodes (no modification of the user's .ssh directory is done).
func (o LinuxUserConfigurationResponsePtrOutput) SshPrivateKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LinuxUserConfigurationResponse) *string {
		if v == nil {
			return nil
		}
		return v.SshPrivateKey
	}).(pulumi.StringPtrOutput)
}

// The uid and gid properties must be specified together or not at all. If not specified the underlying operating system picks the uid.
func (o LinuxUserConfigurationResponsePtrOutput) Uid() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *LinuxUserConfigurationResponse) *int {
		if v == nil {
			return nil
		}
		return v.Uid
	}).(pulumi.IntPtrOutput)
}

// The Batch service does not assign any meaning to this metadata; it is solely for the use of user code.
type MetadataItem struct {
	Name  string `pulumi:"name"`
	Value string `pulumi:"value"`
}

// MetadataItemInput is an input type that accepts MetadataItemArgs and MetadataItemOutput values.
// You can construct a concrete instance of `MetadataItemInput` via:
//
//          MetadataItemArgs{...}
type MetadataItemInput interface {
	pulumi.Input

	ToMetadataItemOutput() MetadataItemOutput
	ToMetadataItemOutputWithContext(context.Context) MetadataItemOutput
}

// The Batch service does not assign any meaning to this metadata; it is solely for the use of user code.
type MetadataItemArgs struct {
	Name  pulumi.StringInput `pulumi:"name"`
	Value pulumi.StringInput `pulumi:"value"`
}

func (MetadataItemArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MetadataItem)(nil)).Elem()
}

func (i MetadataItemArgs) ToMetadataItemOutput() MetadataItemOutput {
	return i.ToMetadataItemOutputWithContext(context.Background())
}

func (i MetadataItemArgs) ToMetadataItemOutputWithContext(ctx context.Context) MetadataItemOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MetadataItemOutput)
}

// MetadataItemArrayInput is an input type that accepts MetadataItemArray and MetadataItemArrayOutput values.
// You can construct a concrete instance of `MetadataItemArrayInput` via:
//
//          MetadataItemArray{ MetadataItemArgs{...} }
type MetadataItemArrayInput interface {
	pulumi.Input

	ToMetadataItemArrayOutput() MetadataItemArrayOutput
	ToMetadataItemArrayOutputWithContext(context.Context) MetadataItemArrayOutput
}

type MetadataItemArray []MetadataItemInput

func (MetadataItemArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MetadataItem)(nil)).Elem()
}

func (i MetadataItemArray) ToMetadataItemArrayOutput() MetadataItemArrayOutput {
	return i.ToMetadataItemArrayOutputWithContext(context.Background())
}

func (i MetadataItemArray) ToMetadataItemArrayOutputWithContext(ctx context.Context) MetadataItemArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MetadataItemArrayOutput)
}

// The Batch service does not assign any meaning to this metadata; it is solely for the use of user code.
type MetadataItemOutput struct{ *pulumi.OutputState }

func (MetadataItemOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MetadataItem)(nil)).Elem()
}

func (o MetadataItemOutput) ToMetadataItemOutput() MetadataItemOutput {
	return o
}

func (o MetadataItemOutput) ToMetadataItemOutputWithContext(ctx context.Context) MetadataItemOutput {
	return o
}

func (o MetadataItemOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v MetadataItem) string { return v.Name }).(pulumi.StringOutput)
}

func (o MetadataItemOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v MetadataItem) string { return v.Value }).(pulumi.StringOutput)
}

type MetadataItemArrayOutput struct{ *pulumi.OutputState }

func (MetadataItemArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MetadataItem)(nil)).Elem()
}

func (o MetadataItemArrayOutput) ToMetadataItemArrayOutput() MetadataItemArrayOutput {
	return o
}

func (o MetadataItemArrayOutput) ToMetadataItemArrayOutputWithContext(ctx context.Context) MetadataItemArrayOutput {
	return o
}

func (o MetadataItemArrayOutput) Index(i pulumi.IntInput) MetadataItemOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) MetadataItem {
		return vs[0].([]MetadataItem)[vs[1].(int)]
	}).(MetadataItemOutput)
}

// The Batch service does not assign any meaning to this metadata; it is solely for the use of user code.
type MetadataItemResponse struct {
	Name  string `pulumi:"name"`
	Value string `pulumi:"value"`
}

// MetadataItemResponseInput is an input type that accepts MetadataItemResponseArgs and MetadataItemResponseOutput values.
// You can construct a concrete instance of `MetadataItemResponseInput` via:
//
//          MetadataItemResponseArgs{...}
type MetadataItemResponseInput interface {
	pulumi.Input

	ToMetadataItemResponseOutput() MetadataItemResponseOutput
	ToMetadataItemResponseOutputWithContext(context.Context) MetadataItemResponseOutput
}

// The Batch service does not assign any meaning to this metadata; it is solely for the use of user code.
type MetadataItemResponseArgs struct {
	Name  pulumi.StringInput `pulumi:"name"`
	Value pulumi.StringInput `pulumi:"value"`
}

func (MetadataItemResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MetadataItemResponse)(nil)).Elem()
}

func (i MetadataItemResponseArgs) ToMetadataItemResponseOutput() MetadataItemResponseOutput {
	return i.ToMetadataItemResponseOutputWithContext(context.Background())
}

func (i MetadataItemResponseArgs) ToMetadataItemResponseOutputWithContext(ctx context.Context) MetadataItemResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MetadataItemResponseOutput)
}

// MetadataItemResponseArrayInput is an input type that accepts MetadataItemResponseArray and MetadataItemResponseArrayOutput values.
// You can construct a concrete instance of `MetadataItemResponseArrayInput` via:
//
//          MetadataItemResponseArray{ MetadataItemResponseArgs{...} }
type MetadataItemResponseArrayInput interface {
	pulumi.Input

	ToMetadataItemResponseArrayOutput() MetadataItemResponseArrayOutput
	ToMetadataItemResponseArrayOutputWithContext(context.Context) MetadataItemResponseArrayOutput
}

type MetadataItemResponseArray []MetadataItemResponseInput

func (MetadataItemResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MetadataItemResponse)(nil)).Elem()
}

func (i MetadataItemResponseArray) ToMetadataItemResponseArrayOutput() MetadataItemResponseArrayOutput {
	return i.ToMetadataItemResponseArrayOutputWithContext(context.Background())
}

func (i MetadataItemResponseArray) ToMetadataItemResponseArrayOutputWithContext(ctx context.Context) MetadataItemResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MetadataItemResponseArrayOutput)
}

// The Batch service does not assign any meaning to this metadata; it is solely for the use of user code.
type MetadataItemResponseOutput struct{ *pulumi.OutputState }

func (MetadataItemResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MetadataItemResponse)(nil)).Elem()
}

func (o MetadataItemResponseOutput) ToMetadataItemResponseOutput() MetadataItemResponseOutput {
	return o
}

func (o MetadataItemResponseOutput) ToMetadataItemResponseOutputWithContext(ctx context.Context) MetadataItemResponseOutput {
	return o
}

func (o MetadataItemResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v MetadataItemResponse) string { return v.Name }).(pulumi.StringOutput)
}

func (o MetadataItemResponseOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v MetadataItemResponse) string { return v.Value }).(pulumi.StringOutput)
}

type MetadataItemResponseArrayOutput struct{ *pulumi.OutputState }

func (MetadataItemResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MetadataItemResponse)(nil)).Elem()
}

func (o MetadataItemResponseArrayOutput) ToMetadataItemResponseArrayOutput() MetadataItemResponseArrayOutput {
	return o
}

func (o MetadataItemResponseArrayOutput) ToMetadataItemResponseArrayOutputWithContext(ctx context.Context) MetadataItemResponseArrayOutput {
	return o
}

func (o MetadataItemResponseArrayOutput) Index(i pulumi.IntInput) MetadataItemResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) MetadataItemResponse {
		return vs[0].([]MetadataItemResponse)[vs[1].(int)]
	}).(MetadataItemResponseOutput)
}

type MountConfiguration struct {
	// This property is mutually exclusive with all other properties.
	AzureBlobFileSystemConfiguration *AzureBlobFileSystemConfiguration `pulumi:"azureBlobFileSystemConfiguration"`
	// This property is mutually exclusive with all other properties.
	AzureFileShareConfiguration *AzureFileShareConfiguration `pulumi:"azureFileShareConfiguration"`
	// This property is mutually exclusive with all other properties.
	CifsMountConfiguration *CIFSMountConfiguration `pulumi:"cifsMountConfiguration"`
	// This property is mutually exclusive with all other properties.
	NfsMountConfiguration *NFSMountConfiguration `pulumi:"nfsMountConfiguration"`
}

// MountConfigurationInput is an input type that accepts MountConfigurationArgs and MountConfigurationOutput values.
// You can construct a concrete instance of `MountConfigurationInput` via:
//
//          MountConfigurationArgs{...}
type MountConfigurationInput interface {
	pulumi.Input

	ToMountConfigurationOutput() MountConfigurationOutput
	ToMountConfigurationOutputWithContext(context.Context) MountConfigurationOutput
}

type MountConfigurationArgs struct {
	// This property is mutually exclusive with all other properties.
	AzureBlobFileSystemConfiguration AzureBlobFileSystemConfigurationPtrInput `pulumi:"azureBlobFileSystemConfiguration"`
	// This property is mutually exclusive with all other properties.
	AzureFileShareConfiguration AzureFileShareConfigurationPtrInput `pulumi:"azureFileShareConfiguration"`
	// This property is mutually exclusive with all other properties.
	CifsMountConfiguration CIFSMountConfigurationPtrInput `pulumi:"cifsMountConfiguration"`
	// This property is mutually exclusive with all other properties.
	NfsMountConfiguration NFSMountConfigurationPtrInput `pulumi:"nfsMountConfiguration"`
}

func (MountConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MountConfiguration)(nil)).Elem()
}

func (i MountConfigurationArgs) ToMountConfigurationOutput() MountConfigurationOutput {
	return i.ToMountConfigurationOutputWithContext(context.Background())
}

func (i MountConfigurationArgs) ToMountConfigurationOutputWithContext(ctx context.Context) MountConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MountConfigurationOutput)
}

// MountConfigurationArrayInput is an input type that accepts MountConfigurationArray and MountConfigurationArrayOutput values.
// You can construct a concrete instance of `MountConfigurationArrayInput` via:
//
//          MountConfigurationArray{ MountConfigurationArgs{...} }
type MountConfigurationArrayInput interface {
	pulumi.Input

	ToMountConfigurationArrayOutput() MountConfigurationArrayOutput
	ToMountConfigurationArrayOutputWithContext(context.Context) MountConfigurationArrayOutput
}

type MountConfigurationArray []MountConfigurationInput

func (MountConfigurationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MountConfiguration)(nil)).Elem()
}

func (i MountConfigurationArray) ToMountConfigurationArrayOutput() MountConfigurationArrayOutput {
	return i.ToMountConfigurationArrayOutputWithContext(context.Background())
}

func (i MountConfigurationArray) ToMountConfigurationArrayOutputWithContext(ctx context.Context) MountConfigurationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MountConfigurationArrayOutput)
}

type MountConfigurationOutput struct{ *pulumi.OutputState }

func (MountConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MountConfiguration)(nil)).Elem()
}

func (o MountConfigurationOutput) ToMountConfigurationOutput() MountConfigurationOutput {
	return o
}

func (o MountConfigurationOutput) ToMountConfigurationOutputWithContext(ctx context.Context) MountConfigurationOutput {
	return o
}

// This property is mutually exclusive with all other properties.
func (o MountConfigurationOutput) AzureBlobFileSystemConfiguration() AzureBlobFileSystemConfigurationPtrOutput {
	return o.ApplyT(func(v MountConfiguration) *AzureBlobFileSystemConfiguration {
		return v.AzureBlobFileSystemConfiguration
	}).(AzureBlobFileSystemConfigurationPtrOutput)
}

// This property is mutually exclusive with all other properties.
func (o MountConfigurationOutput) AzureFileShareConfiguration() AzureFileShareConfigurationPtrOutput {
	return o.ApplyT(func(v MountConfiguration) *AzureFileShareConfiguration { return v.AzureFileShareConfiguration }).(AzureFileShareConfigurationPtrOutput)
}

// This property is mutually exclusive with all other properties.
func (o MountConfigurationOutput) CifsMountConfiguration() CIFSMountConfigurationPtrOutput {
	return o.ApplyT(func(v MountConfiguration) *CIFSMountConfiguration { return v.CifsMountConfiguration }).(CIFSMountConfigurationPtrOutput)
}

// This property is mutually exclusive with all other properties.
func (o MountConfigurationOutput) NfsMountConfiguration() NFSMountConfigurationPtrOutput {
	return o.ApplyT(func(v MountConfiguration) *NFSMountConfiguration { return v.NfsMountConfiguration }).(NFSMountConfigurationPtrOutput)
}

type MountConfigurationArrayOutput struct{ *pulumi.OutputState }

func (MountConfigurationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MountConfiguration)(nil)).Elem()
}

func (o MountConfigurationArrayOutput) ToMountConfigurationArrayOutput() MountConfigurationArrayOutput {
	return o
}

func (o MountConfigurationArrayOutput) ToMountConfigurationArrayOutputWithContext(ctx context.Context) MountConfigurationArrayOutput {
	return o
}

func (o MountConfigurationArrayOutput) Index(i pulumi.IntInput) MountConfigurationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) MountConfiguration {
		return vs[0].([]MountConfiguration)[vs[1].(int)]
	}).(MountConfigurationOutput)
}

type MountConfigurationResponse struct {
	// This property is mutually exclusive with all other properties.
	AzureBlobFileSystemConfiguration *AzureBlobFileSystemConfigurationResponse `pulumi:"azureBlobFileSystemConfiguration"`
	// This property is mutually exclusive with all other properties.
	AzureFileShareConfiguration *AzureFileShareConfigurationResponse `pulumi:"azureFileShareConfiguration"`
	// This property is mutually exclusive with all other properties.
	CifsMountConfiguration *CIFSMountConfigurationResponse `pulumi:"cifsMountConfiguration"`
	// This property is mutually exclusive with all other properties.
	NfsMountConfiguration *NFSMountConfigurationResponse `pulumi:"nfsMountConfiguration"`
}

// MountConfigurationResponseInput is an input type that accepts MountConfigurationResponseArgs and MountConfigurationResponseOutput values.
// You can construct a concrete instance of `MountConfigurationResponseInput` via:
//
//          MountConfigurationResponseArgs{...}
type MountConfigurationResponseInput interface {
	pulumi.Input

	ToMountConfigurationResponseOutput() MountConfigurationResponseOutput
	ToMountConfigurationResponseOutputWithContext(context.Context) MountConfigurationResponseOutput
}

type MountConfigurationResponseArgs struct {
	// This property is mutually exclusive with all other properties.
	AzureBlobFileSystemConfiguration AzureBlobFileSystemConfigurationResponsePtrInput `pulumi:"azureBlobFileSystemConfiguration"`
	// This property is mutually exclusive with all other properties.
	AzureFileShareConfiguration AzureFileShareConfigurationResponsePtrInput `pulumi:"azureFileShareConfiguration"`
	// This property is mutually exclusive with all other properties.
	CifsMountConfiguration CIFSMountConfigurationResponsePtrInput `pulumi:"cifsMountConfiguration"`
	// This property is mutually exclusive with all other properties.
	NfsMountConfiguration NFSMountConfigurationResponsePtrInput `pulumi:"nfsMountConfiguration"`
}

func (MountConfigurationResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MountConfigurationResponse)(nil)).Elem()
}

func (i MountConfigurationResponseArgs) ToMountConfigurationResponseOutput() MountConfigurationResponseOutput {
	return i.ToMountConfigurationResponseOutputWithContext(context.Background())
}

func (i MountConfigurationResponseArgs) ToMountConfigurationResponseOutputWithContext(ctx context.Context) MountConfigurationResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MountConfigurationResponseOutput)
}

// MountConfigurationResponseArrayInput is an input type that accepts MountConfigurationResponseArray and MountConfigurationResponseArrayOutput values.
// You can construct a concrete instance of `MountConfigurationResponseArrayInput` via:
//
//          MountConfigurationResponseArray{ MountConfigurationResponseArgs{...} }
type MountConfigurationResponseArrayInput interface {
	pulumi.Input

	ToMountConfigurationResponseArrayOutput() MountConfigurationResponseArrayOutput
	ToMountConfigurationResponseArrayOutputWithContext(context.Context) MountConfigurationResponseArrayOutput
}

type MountConfigurationResponseArray []MountConfigurationResponseInput

func (MountConfigurationResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MountConfigurationResponse)(nil)).Elem()
}

func (i MountConfigurationResponseArray) ToMountConfigurationResponseArrayOutput() MountConfigurationResponseArrayOutput {
	return i.ToMountConfigurationResponseArrayOutputWithContext(context.Background())
}

func (i MountConfigurationResponseArray) ToMountConfigurationResponseArrayOutputWithContext(ctx context.Context) MountConfigurationResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MountConfigurationResponseArrayOutput)
}

type MountConfigurationResponseOutput struct{ *pulumi.OutputState }

func (MountConfigurationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MountConfigurationResponse)(nil)).Elem()
}

func (o MountConfigurationResponseOutput) ToMountConfigurationResponseOutput() MountConfigurationResponseOutput {
	return o
}

func (o MountConfigurationResponseOutput) ToMountConfigurationResponseOutputWithContext(ctx context.Context) MountConfigurationResponseOutput {
	return o
}

// This property is mutually exclusive with all other properties.
func (o MountConfigurationResponseOutput) AzureBlobFileSystemConfiguration() AzureBlobFileSystemConfigurationResponsePtrOutput {
	return o.ApplyT(func(v MountConfigurationResponse) *AzureBlobFileSystemConfigurationResponse {
		return v.AzureBlobFileSystemConfiguration
	}).(AzureBlobFileSystemConfigurationResponsePtrOutput)
}

// This property is mutually exclusive with all other properties.
func (o MountConfigurationResponseOutput) AzureFileShareConfiguration() AzureFileShareConfigurationResponsePtrOutput {
	return o.ApplyT(func(v MountConfigurationResponse) *AzureFileShareConfigurationResponse {
		return v.AzureFileShareConfiguration
	}).(AzureFileShareConfigurationResponsePtrOutput)
}

// This property is mutually exclusive with all other properties.
func (o MountConfigurationResponseOutput) CifsMountConfiguration() CIFSMountConfigurationResponsePtrOutput {
	return o.ApplyT(func(v MountConfigurationResponse) *CIFSMountConfigurationResponse { return v.CifsMountConfiguration }).(CIFSMountConfigurationResponsePtrOutput)
}

// This property is mutually exclusive with all other properties.
func (o MountConfigurationResponseOutput) NfsMountConfiguration() NFSMountConfigurationResponsePtrOutput {
	return o.ApplyT(func(v MountConfigurationResponse) *NFSMountConfigurationResponse { return v.NfsMountConfiguration }).(NFSMountConfigurationResponsePtrOutput)
}

type MountConfigurationResponseArrayOutput struct{ *pulumi.OutputState }

func (MountConfigurationResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MountConfigurationResponse)(nil)).Elem()
}

func (o MountConfigurationResponseArrayOutput) ToMountConfigurationResponseArrayOutput() MountConfigurationResponseArrayOutput {
	return o
}

func (o MountConfigurationResponseArrayOutput) ToMountConfigurationResponseArrayOutputWithContext(ctx context.Context) MountConfigurationResponseArrayOutput {
	return o
}

func (o MountConfigurationResponseArrayOutput) Index(i pulumi.IntInput) MountConfigurationResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) MountConfigurationResponse {
		return vs[0].([]MountConfigurationResponse)[vs[1].(int)]
	}).(MountConfigurationResponseOutput)
}

type NFSMountConfiguration struct {
	// These are 'net use' options in Windows and 'mount' options in Linux.
	MountOptions *string `pulumi:"mountOptions"`
	// All file systems are mounted relative to the Batch mounts directory, accessible via the AZ_BATCH_NODE_MOUNTS_DIR environment variable.
	RelativeMountPath string `pulumi:"relativeMountPath"`
	Source            string `pulumi:"source"`
}

// NFSMountConfigurationInput is an input type that accepts NFSMountConfigurationArgs and NFSMountConfigurationOutput values.
// You can construct a concrete instance of `NFSMountConfigurationInput` via:
//
//          NFSMountConfigurationArgs{...}
type NFSMountConfigurationInput interface {
	pulumi.Input

	ToNFSMountConfigurationOutput() NFSMountConfigurationOutput
	ToNFSMountConfigurationOutputWithContext(context.Context) NFSMountConfigurationOutput
}

type NFSMountConfigurationArgs struct {
	// These are 'net use' options in Windows and 'mount' options in Linux.
	MountOptions pulumi.StringPtrInput `pulumi:"mountOptions"`
	// All file systems are mounted relative to the Batch mounts directory, accessible via the AZ_BATCH_NODE_MOUNTS_DIR environment variable.
	RelativeMountPath pulumi.StringInput `pulumi:"relativeMountPath"`
	Source            pulumi.StringInput `pulumi:"source"`
}

func (NFSMountConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NFSMountConfiguration)(nil)).Elem()
}

func (i NFSMountConfigurationArgs) ToNFSMountConfigurationOutput() NFSMountConfigurationOutput {
	return i.ToNFSMountConfigurationOutputWithContext(context.Background())
}

func (i NFSMountConfigurationArgs) ToNFSMountConfigurationOutputWithContext(ctx context.Context) NFSMountConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NFSMountConfigurationOutput)
}

func (i NFSMountConfigurationArgs) ToNFSMountConfigurationPtrOutput() NFSMountConfigurationPtrOutput {
	return i.ToNFSMountConfigurationPtrOutputWithContext(context.Background())
}

func (i NFSMountConfigurationArgs) ToNFSMountConfigurationPtrOutputWithContext(ctx context.Context) NFSMountConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NFSMountConfigurationOutput).ToNFSMountConfigurationPtrOutputWithContext(ctx)
}

// NFSMountConfigurationPtrInput is an input type that accepts NFSMountConfigurationArgs, NFSMountConfigurationPtr and NFSMountConfigurationPtrOutput values.
// You can construct a concrete instance of `NFSMountConfigurationPtrInput` via:
//
//          NFSMountConfigurationArgs{...}
//
//  or:
//
//          nil
type NFSMountConfigurationPtrInput interface {
	pulumi.Input

	ToNFSMountConfigurationPtrOutput() NFSMountConfigurationPtrOutput
	ToNFSMountConfigurationPtrOutputWithContext(context.Context) NFSMountConfigurationPtrOutput
}

type nfsmountConfigurationPtrType NFSMountConfigurationArgs

func NFSMountConfigurationPtr(v *NFSMountConfigurationArgs) NFSMountConfigurationPtrInput {
	return (*nfsmountConfigurationPtrType)(v)
}

func (*nfsmountConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**NFSMountConfiguration)(nil)).Elem()
}

func (i *nfsmountConfigurationPtrType) ToNFSMountConfigurationPtrOutput() NFSMountConfigurationPtrOutput {
	return i.ToNFSMountConfigurationPtrOutputWithContext(context.Background())
}

func (i *nfsmountConfigurationPtrType) ToNFSMountConfigurationPtrOutputWithContext(ctx context.Context) NFSMountConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NFSMountConfigurationPtrOutput)
}

type NFSMountConfigurationOutput struct{ *pulumi.OutputState }

func (NFSMountConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NFSMountConfiguration)(nil)).Elem()
}

func (o NFSMountConfigurationOutput) ToNFSMountConfigurationOutput() NFSMountConfigurationOutput {
	return o
}

func (o NFSMountConfigurationOutput) ToNFSMountConfigurationOutputWithContext(ctx context.Context) NFSMountConfigurationOutput {
	return o
}

func (o NFSMountConfigurationOutput) ToNFSMountConfigurationPtrOutput() NFSMountConfigurationPtrOutput {
	return o.ToNFSMountConfigurationPtrOutputWithContext(context.Background())
}

func (o NFSMountConfigurationOutput) ToNFSMountConfigurationPtrOutputWithContext(ctx context.Context) NFSMountConfigurationPtrOutput {
	return o.ApplyT(func(v NFSMountConfiguration) *NFSMountConfiguration {
		return &v
	}).(NFSMountConfigurationPtrOutput)
}

// These are 'net use' options in Windows and 'mount' options in Linux.
func (o NFSMountConfigurationOutput) MountOptions() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NFSMountConfiguration) *string { return v.MountOptions }).(pulumi.StringPtrOutput)
}

// All file systems are mounted relative to the Batch mounts directory, accessible via the AZ_BATCH_NODE_MOUNTS_DIR environment variable.
func (o NFSMountConfigurationOutput) RelativeMountPath() pulumi.StringOutput {
	return o.ApplyT(func(v NFSMountConfiguration) string { return v.RelativeMountPath }).(pulumi.StringOutput)
}

func (o NFSMountConfigurationOutput) Source() pulumi.StringOutput {
	return o.ApplyT(func(v NFSMountConfiguration) string { return v.Source }).(pulumi.StringOutput)
}

type NFSMountConfigurationPtrOutput struct{ *pulumi.OutputState }

func (NFSMountConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NFSMountConfiguration)(nil)).Elem()
}

func (o NFSMountConfigurationPtrOutput) ToNFSMountConfigurationPtrOutput() NFSMountConfigurationPtrOutput {
	return o
}

func (o NFSMountConfigurationPtrOutput) ToNFSMountConfigurationPtrOutputWithContext(ctx context.Context) NFSMountConfigurationPtrOutput {
	return o
}

func (o NFSMountConfigurationPtrOutput) Elem() NFSMountConfigurationOutput {
	return o.ApplyT(func(v *NFSMountConfiguration) NFSMountConfiguration { return *v }).(NFSMountConfigurationOutput)
}

// These are 'net use' options in Windows and 'mount' options in Linux.
func (o NFSMountConfigurationPtrOutput) MountOptions() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NFSMountConfiguration) *string {
		if v == nil {
			return nil
		}
		return v.MountOptions
	}).(pulumi.StringPtrOutput)
}

// All file systems are mounted relative to the Batch mounts directory, accessible via the AZ_BATCH_NODE_MOUNTS_DIR environment variable.
func (o NFSMountConfigurationPtrOutput) RelativeMountPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NFSMountConfiguration) *string {
		if v == nil {
			return nil
		}
		return &v.RelativeMountPath
	}).(pulumi.StringPtrOutput)
}

func (o NFSMountConfigurationPtrOutput) Source() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NFSMountConfiguration) *string {
		if v == nil {
			return nil
		}
		return &v.Source
	}).(pulumi.StringPtrOutput)
}

type NFSMountConfigurationResponse struct {
	// These are 'net use' options in Windows and 'mount' options in Linux.
	MountOptions *string `pulumi:"mountOptions"`
	// All file systems are mounted relative to the Batch mounts directory, accessible via the AZ_BATCH_NODE_MOUNTS_DIR environment variable.
	RelativeMountPath string `pulumi:"relativeMountPath"`
	Source            string `pulumi:"source"`
}

// NFSMountConfigurationResponseInput is an input type that accepts NFSMountConfigurationResponseArgs and NFSMountConfigurationResponseOutput values.
// You can construct a concrete instance of `NFSMountConfigurationResponseInput` via:
//
//          NFSMountConfigurationResponseArgs{...}
type NFSMountConfigurationResponseInput interface {
	pulumi.Input

	ToNFSMountConfigurationResponseOutput() NFSMountConfigurationResponseOutput
	ToNFSMountConfigurationResponseOutputWithContext(context.Context) NFSMountConfigurationResponseOutput
}

type NFSMountConfigurationResponseArgs struct {
	// These are 'net use' options in Windows and 'mount' options in Linux.
	MountOptions pulumi.StringPtrInput `pulumi:"mountOptions"`
	// All file systems are mounted relative to the Batch mounts directory, accessible via the AZ_BATCH_NODE_MOUNTS_DIR environment variable.
	RelativeMountPath pulumi.StringInput `pulumi:"relativeMountPath"`
	Source            pulumi.StringInput `pulumi:"source"`
}

func (NFSMountConfigurationResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NFSMountConfigurationResponse)(nil)).Elem()
}

func (i NFSMountConfigurationResponseArgs) ToNFSMountConfigurationResponseOutput() NFSMountConfigurationResponseOutput {
	return i.ToNFSMountConfigurationResponseOutputWithContext(context.Background())
}

func (i NFSMountConfigurationResponseArgs) ToNFSMountConfigurationResponseOutputWithContext(ctx context.Context) NFSMountConfigurationResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NFSMountConfigurationResponseOutput)
}

func (i NFSMountConfigurationResponseArgs) ToNFSMountConfigurationResponsePtrOutput() NFSMountConfigurationResponsePtrOutput {
	return i.ToNFSMountConfigurationResponsePtrOutputWithContext(context.Background())
}

func (i NFSMountConfigurationResponseArgs) ToNFSMountConfigurationResponsePtrOutputWithContext(ctx context.Context) NFSMountConfigurationResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NFSMountConfigurationResponseOutput).ToNFSMountConfigurationResponsePtrOutputWithContext(ctx)
}

// NFSMountConfigurationResponsePtrInput is an input type that accepts NFSMountConfigurationResponseArgs, NFSMountConfigurationResponsePtr and NFSMountConfigurationResponsePtrOutput values.
// You can construct a concrete instance of `NFSMountConfigurationResponsePtrInput` via:
//
//          NFSMountConfigurationResponseArgs{...}
//
//  or:
//
//          nil
type NFSMountConfigurationResponsePtrInput interface {
	pulumi.Input

	ToNFSMountConfigurationResponsePtrOutput() NFSMountConfigurationResponsePtrOutput
	ToNFSMountConfigurationResponsePtrOutputWithContext(context.Context) NFSMountConfigurationResponsePtrOutput
}

type nfsmountConfigurationResponsePtrType NFSMountConfigurationResponseArgs

func NFSMountConfigurationResponsePtr(v *NFSMountConfigurationResponseArgs) NFSMountConfigurationResponsePtrInput {
	return (*nfsmountConfigurationResponsePtrType)(v)
}

func (*nfsmountConfigurationResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**NFSMountConfigurationResponse)(nil)).Elem()
}

func (i *nfsmountConfigurationResponsePtrType) ToNFSMountConfigurationResponsePtrOutput() NFSMountConfigurationResponsePtrOutput {
	return i.ToNFSMountConfigurationResponsePtrOutputWithContext(context.Background())
}

func (i *nfsmountConfigurationResponsePtrType) ToNFSMountConfigurationResponsePtrOutputWithContext(ctx context.Context) NFSMountConfigurationResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NFSMountConfigurationResponsePtrOutput)
}

type NFSMountConfigurationResponseOutput struct{ *pulumi.OutputState }

func (NFSMountConfigurationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NFSMountConfigurationResponse)(nil)).Elem()
}

func (o NFSMountConfigurationResponseOutput) ToNFSMountConfigurationResponseOutput() NFSMountConfigurationResponseOutput {
	return o
}

func (o NFSMountConfigurationResponseOutput) ToNFSMountConfigurationResponseOutputWithContext(ctx context.Context) NFSMountConfigurationResponseOutput {
	return o
}

func (o NFSMountConfigurationResponseOutput) ToNFSMountConfigurationResponsePtrOutput() NFSMountConfigurationResponsePtrOutput {
	return o.ToNFSMountConfigurationResponsePtrOutputWithContext(context.Background())
}

func (o NFSMountConfigurationResponseOutput) ToNFSMountConfigurationResponsePtrOutputWithContext(ctx context.Context) NFSMountConfigurationResponsePtrOutput {
	return o.ApplyT(func(v NFSMountConfigurationResponse) *NFSMountConfigurationResponse {
		return &v
	}).(NFSMountConfigurationResponsePtrOutput)
}

// These are 'net use' options in Windows and 'mount' options in Linux.
func (o NFSMountConfigurationResponseOutput) MountOptions() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NFSMountConfigurationResponse) *string { return v.MountOptions }).(pulumi.StringPtrOutput)
}

// All file systems are mounted relative to the Batch mounts directory, accessible via the AZ_BATCH_NODE_MOUNTS_DIR environment variable.
func (o NFSMountConfigurationResponseOutput) RelativeMountPath() pulumi.StringOutput {
	return o.ApplyT(func(v NFSMountConfigurationResponse) string { return v.RelativeMountPath }).(pulumi.StringOutput)
}

func (o NFSMountConfigurationResponseOutput) Source() pulumi.StringOutput {
	return o.ApplyT(func(v NFSMountConfigurationResponse) string { return v.Source }).(pulumi.StringOutput)
}

type NFSMountConfigurationResponsePtrOutput struct{ *pulumi.OutputState }

func (NFSMountConfigurationResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NFSMountConfigurationResponse)(nil)).Elem()
}

func (o NFSMountConfigurationResponsePtrOutput) ToNFSMountConfigurationResponsePtrOutput() NFSMountConfigurationResponsePtrOutput {
	return o
}

func (o NFSMountConfigurationResponsePtrOutput) ToNFSMountConfigurationResponsePtrOutputWithContext(ctx context.Context) NFSMountConfigurationResponsePtrOutput {
	return o
}

func (o NFSMountConfigurationResponsePtrOutput) Elem() NFSMountConfigurationResponseOutput {
	return o.ApplyT(func(v *NFSMountConfigurationResponse) NFSMountConfigurationResponse { return *v }).(NFSMountConfigurationResponseOutput)
}

// These are 'net use' options in Windows and 'mount' options in Linux.
func (o NFSMountConfigurationResponsePtrOutput) MountOptions() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NFSMountConfigurationResponse) *string {
		if v == nil {
			return nil
		}
		return v.MountOptions
	}).(pulumi.StringPtrOutput)
}

// All file systems are mounted relative to the Batch mounts directory, accessible via the AZ_BATCH_NODE_MOUNTS_DIR environment variable.
func (o NFSMountConfigurationResponsePtrOutput) RelativeMountPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NFSMountConfigurationResponse) *string {
		if v == nil {
			return nil
		}
		return &v.RelativeMountPath
	}).(pulumi.StringPtrOutput)
}

func (o NFSMountConfigurationResponsePtrOutput) Source() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NFSMountConfigurationResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Source
	}).(pulumi.StringPtrOutput)
}

// The network configuration for a pool.
type NetworkConfiguration struct {
	// Pool endpoint configuration is only supported on pools with the virtualMachineConfiguration property.
	EndpointConfiguration *PoolEndpointConfiguration `pulumi:"endpointConfiguration"`
	// This property is only supported on Pools with the virtualMachineConfiguration property.
	PublicIPAddressConfiguration *PublicIPAddressConfiguration `pulumi:"publicIPAddressConfiguration"`
	// The virtual network must be in the same region and subscription as the Azure Batch account. The specified subnet should have enough free IP addresses to accommodate the number of nodes in the pool. If the subnet doesn't have enough free IP addresses, the pool will partially allocate compute nodes and a resize error will occur. The 'MicrosoftAzureBatch' service principal must have the 'Classic Virtual Machine Contributor' Role-Based Access Control (RBAC) role for the specified VNet. The specified subnet must allow communication from the Azure Batch service to be able to schedule tasks on the compute nodes. This can be verified by checking if the specified VNet has any associated Network Security Groups (NSG). If communication to the compute nodes in the specified subnet is denied by an NSG, then the Batch service will set the state of the compute nodes to unusable. If the specified VNet has any associated Network Security Groups (NSG), then a few reserved system ports must be enabled for inbound communication. For pools created with a virtual machine configuration, enable ports 29876 and 29877, as well as port 22 for Linux and port 3389 for Windows. For pools created with a cloud service configuration, enable ports 10100, 20100, and 30100. Also enable outbound connections to Azure Storage on port 443. For cloudServiceConfiguration pools, only 'classic' VNETs are supported. For more details see: https://docs.microsoft.com/en-us/azure/batch/batch-api-basics#virtual-network-vnet-and-firewall-configuration
	SubnetId *string `pulumi:"subnetId"`
}

// NetworkConfigurationInput is an input type that accepts NetworkConfigurationArgs and NetworkConfigurationOutput values.
// You can construct a concrete instance of `NetworkConfigurationInput` via:
//
//          NetworkConfigurationArgs{...}
type NetworkConfigurationInput interface {
	pulumi.Input

	ToNetworkConfigurationOutput() NetworkConfigurationOutput
	ToNetworkConfigurationOutputWithContext(context.Context) NetworkConfigurationOutput
}

// The network configuration for a pool.
type NetworkConfigurationArgs struct {
	// Pool endpoint configuration is only supported on pools with the virtualMachineConfiguration property.
	EndpointConfiguration PoolEndpointConfigurationPtrInput `pulumi:"endpointConfiguration"`
	// This property is only supported on Pools with the virtualMachineConfiguration property.
	PublicIPAddressConfiguration PublicIPAddressConfigurationPtrInput `pulumi:"publicIPAddressConfiguration"`
	// The virtual network must be in the same region and subscription as the Azure Batch account. The specified subnet should have enough free IP addresses to accommodate the number of nodes in the pool. If the subnet doesn't have enough free IP addresses, the pool will partially allocate compute nodes and a resize error will occur. The 'MicrosoftAzureBatch' service principal must have the 'Classic Virtual Machine Contributor' Role-Based Access Control (RBAC) role for the specified VNet. The specified subnet must allow communication from the Azure Batch service to be able to schedule tasks on the compute nodes. This can be verified by checking if the specified VNet has any associated Network Security Groups (NSG). If communication to the compute nodes in the specified subnet is denied by an NSG, then the Batch service will set the state of the compute nodes to unusable. If the specified VNet has any associated Network Security Groups (NSG), then a few reserved system ports must be enabled for inbound communication. For pools created with a virtual machine configuration, enable ports 29876 and 29877, as well as port 22 for Linux and port 3389 for Windows. For pools created with a cloud service configuration, enable ports 10100, 20100, and 30100. Also enable outbound connections to Azure Storage on port 443. For cloudServiceConfiguration pools, only 'classic' VNETs are supported. For more details see: https://docs.microsoft.com/en-us/azure/batch/batch-api-basics#virtual-network-vnet-and-firewall-configuration
	SubnetId pulumi.StringPtrInput `pulumi:"subnetId"`
}

func (NetworkConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworkConfiguration)(nil)).Elem()
}

func (i NetworkConfigurationArgs) ToNetworkConfigurationOutput() NetworkConfigurationOutput {
	return i.ToNetworkConfigurationOutputWithContext(context.Background())
}

func (i NetworkConfigurationArgs) ToNetworkConfigurationOutputWithContext(ctx context.Context) NetworkConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkConfigurationOutput)
}

func (i NetworkConfigurationArgs) ToNetworkConfigurationPtrOutput() NetworkConfigurationPtrOutput {
	return i.ToNetworkConfigurationPtrOutputWithContext(context.Background())
}

func (i NetworkConfigurationArgs) ToNetworkConfigurationPtrOutputWithContext(ctx context.Context) NetworkConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkConfigurationOutput).ToNetworkConfigurationPtrOutputWithContext(ctx)
}

// NetworkConfigurationPtrInput is an input type that accepts NetworkConfigurationArgs, NetworkConfigurationPtr and NetworkConfigurationPtrOutput values.
// You can construct a concrete instance of `NetworkConfigurationPtrInput` via:
//
//          NetworkConfigurationArgs{...}
//
//  or:
//
//          nil
type NetworkConfigurationPtrInput interface {
	pulumi.Input

	ToNetworkConfigurationPtrOutput() NetworkConfigurationPtrOutput
	ToNetworkConfigurationPtrOutputWithContext(context.Context) NetworkConfigurationPtrOutput
}

type networkConfigurationPtrType NetworkConfigurationArgs

func NetworkConfigurationPtr(v *NetworkConfigurationArgs) NetworkConfigurationPtrInput {
	return (*networkConfigurationPtrType)(v)
}

func (*networkConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**NetworkConfiguration)(nil)).Elem()
}

func (i *networkConfigurationPtrType) ToNetworkConfigurationPtrOutput() NetworkConfigurationPtrOutput {
	return i.ToNetworkConfigurationPtrOutputWithContext(context.Background())
}

func (i *networkConfigurationPtrType) ToNetworkConfigurationPtrOutputWithContext(ctx context.Context) NetworkConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkConfigurationPtrOutput)
}

// The network configuration for a pool.
type NetworkConfigurationOutput struct{ *pulumi.OutputState }

func (NetworkConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworkConfiguration)(nil)).Elem()
}

func (o NetworkConfigurationOutput) ToNetworkConfigurationOutput() NetworkConfigurationOutput {
	return o
}

func (o NetworkConfigurationOutput) ToNetworkConfigurationOutputWithContext(ctx context.Context) NetworkConfigurationOutput {
	return o
}

func (o NetworkConfigurationOutput) ToNetworkConfigurationPtrOutput() NetworkConfigurationPtrOutput {
	return o.ToNetworkConfigurationPtrOutputWithContext(context.Background())
}

func (o NetworkConfigurationOutput) ToNetworkConfigurationPtrOutputWithContext(ctx context.Context) NetworkConfigurationPtrOutput {
	return o.ApplyT(func(v NetworkConfiguration) *NetworkConfiguration {
		return &v
	}).(NetworkConfigurationPtrOutput)
}

// Pool endpoint configuration is only supported on pools with the virtualMachineConfiguration property.
func (o NetworkConfigurationOutput) EndpointConfiguration() PoolEndpointConfigurationPtrOutput {
	return o.ApplyT(func(v NetworkConfiguration) *PoolEndpointConfiguration { return v.EndpointConfiguration }).(PoolEndpointConfigurationPtrOutput)
}

// This property is only supported on Pools with the virtualMachineConfiguration property.
func (o NetworkConfigurationOutput) PublicIPAddressConfiguration() PublicIPAddressConfigurationPtrOutput {
	return o.ApplyT(func(v NetworkConfiguration) *PublicIPAddressConfiguration { return v.PublicIPAddressConfiguration }).(PublicIPAddressConfigurationPtrOutput)
}

// The virtual network must be in the same region and subscription as the Azure Batch account. The specified subnet should have enough free IP addresses to accommodate the number of nodes in the pool. If the subnet doesn't have enough free IP addresses, the pool will partially allocate compute nodes and a resize error will occur. The 'MicrosoftAzureBatch' service principal must have the 'Classic Virtual Machine Contributor' Role-Based Access Control (RBAC) role for the specified VNet. The specified subnet must allow communication from the Azure Batch service to be able to schedule tasks on the compute nodes. This can be verified by checking if the specified VNet has any associated Network Security Groups (NSG). If communication to the compute nodes in the specified subnet is denied by an NSG, then the Batch service will set the state of the compute nodes to unusable. If the specified VNet has any associated Network Security Groups (NSG), then a few reserved system ports must be enabled for inbound communication. For pools created with a virtual machine configuration, enable ports 29876 and 29877, as well as port 22 for Linux and port 3389 for Windows. For pools created with a cloud service configuration, enable ports 10100, 20100, and 30100. Also enable outbound connections to Azure Storage on port 443. For cloudServiceConfiguration pools, only 'classic' VNETs are supported. For more details see: https://docs.microsoft.com/en-us/azure/batch/batch-api-basics#virtual-network-vnet-and-firewall-configuration
func (o NetworkConfigurationOutput) SubnetId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworkConfiguration) *string { return v.SubnetId }).(pulumi.StringPtrOutput)
}

type NetworkConfigurationPtrOutput struct{ *pulumi.OutputState }

func (NetworkConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NetworkConfiguration)(nil)).Elem()
}

func (o NetworkConfigurationPtrOutput) ToNetworkConfigurationPtrOutput() NetworkConfigurationPtrOutput {
	return o
}

func (o NetworkConfigurationPtrOutput) ToNetworkConfigurationPtrOutputWithContext(ctx context.Context) NetworkConfigurationPtrOutput {
	return o
}

func (o NetworkConfigurationPtrOutput) Elem() NetworkConfigurationOutput {
	return o.ApplyT(func(v *NetworkConfiguration) NetworkConfiguration { return *v }).(NetworkConfigurationOutput)
}

// Pool endpoint configuration is only supported on pools with the virtualMachineConfiguration property.
func (o NetworkConfigurationPtrOutput) EndpointConfiguration() PoolEndpointConfigurationPtrOutput {
	return o.ApplyT(func(v *NetworkConfiguration) *PoolEndpointConfiguration {
		if v == nil {
			return nil
		}
		return v.EndpointConfiguration
	}).(PoolEndpointConfigurationPtrOutput)
}

// This property is only supported on Pools with the virtualMachineConfiguration property.
func (o NetworkConfigurationPtrOutput) PublicIPAddressConfiguration() PublicIPAddressConfigurationPtrOutput {
	return o.ApplyT(func(v *NetworkConfiguration) *PublicIPAddressConfiguration {
		if v == nil {
			return nil
		}
		return v.PublicIPAddressConfiguration
	}).(PublicIPAddressConfigurationPtrOutput)
}

// The virtual network must be in the same region and subscription as the Azure Batch account. The specified subnet should have enough free IP addresses to accommodate the number of nodes in the pool. If the subnet doesn't have enough free IP addresses, the pool will partially allocate compute nodes and a resize error will occur. The 'MicrosoftAzureBatch' service principal must have the 'Classic Virtual Machine Contributor' Role-Based Access Control (RBAC) role for the specified VNet. The specified subnet must allow communication from the Azure Batch service to be able to schedule tasks on the compute nodes. This can be verified by checking if the specified VNet has any associated Network Security Groups (NSG). If communication to the compute nodes in the specified subnet is denied by an NSG, then the Batch service will set the state of the compute nodes to unusable. If the specified VNet has any associated Network Security Groups (NSG), then a few reserved system ports must be enabled for inbound communication. For pools created with a virtual machine configuration, enable ports 29876 and 29877, as well as port 22 for Linux and port 3389 for Windows. For pools created with a cloud service configuration, enable ports 10100, 20100, and 30100. Also enable outbound connections to Azure Storage on port 443. For cloudServiceConfiguration pools, only 'classic' VNETs are supported. For more details see: https://docs.microsoft.com/en-us/azure/batch/batch-api-basics#virtual-network-vnet-and-firewall-configuration
func (o NetworkConfigurationPtrOutput) SubnetId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NetworkConfiguration) *string {
		if v == nil {
			return nil
		}
		return v.SubnetId
	}).(pulumi.StringPtrOutput)
}

// The network configuration for a pool.
type NetworkConfigurationResponse struct {
	// Pool endpoint configuration is only supported on pools with the virtualMachineConfiguration property.
	EndpointConfiguration *PoolEndpointConfigurationResponse `pulumi:"endpointConfiguration"`
	// This property is only supported on Pools with the virtualMachineConfiguration property.
	PublicIPAddressConfiguration *PublicIPAddressConfigurationResponse `pulumi:"publicIPAddressConfiguration"`
	// The virtual network must be in the same region and subscription as the Azure Batch account. The specified subnet should have enough free IP addresses to accommodate the number of nodes in the pool. If the subnet doesn't have enough free IP addresses, the pool will partially allocate compute nodes and a resize error will occur. The 'MicrosoftAzureBatch' service principal must have the 'Classic Virtual Machine Contributor' Role-Based Access Control (RBAC) role for the specified VNet. The specified subnet must allow communication from the Azure Batch service to be able to schedule tasks on the compute nodes. This can be verified by checking if the specified VNet has any associated Network Security Groups (NSG). If communication to the compute nodes in the specified subnet is denied by an NSG, then the Batch service will set the state of the compute nodes to unusable. If the specified VNet has any associated Network Security Groups (NSG), then a few reserved system ports must be enabled for inbound communication. For pools created with a virtual machine configuration, enable ports 29876 and 29877, as well as port 22 for Linux and port 3389 for Windows. For pools created with a cloud service configuration, enable ports 10100, 20100, and 30100. Also enable outbound connections to Azure Storage on port 443. For cloudServiceConfiguration pools, only 'classic' VNETs are supported. For more details see: https://docs.microsoft.com/en-us/azure/batch/batch-api-basics#virtual-network-vnet-and-firewall-configuration
	SubnetId *string `pulumi:"subnetId"`
}

// NetworkConfigurationResponseInput is an input type that accepts NetworkConfigurationResponseArgs and NetworkConfigurationResponseOutput values.
// You can construct a concrete instance of `NetworkConfigurationResponseInput` via:
//
//          NetworkConfigurationResponseArgs{...}
type NetworkConfigurationResponseInput interface {
	pulumi.Input

	ToNetworkConfigurationResponseOutput() NetworkConfigurationResponseOutput
	ToNetworkConfigurationResponseOutputWithContext(context.Context) NetworkConfigurationResponseOutput
}

// The network configuration for a pool.
type NetworkConfigurationResponseArgs struct {
	// Pool endpoint configuration is only supported on pools with the virtualMachineConfiguration property.
	EndpointConfiguration PoolEndpointConfigurationResponsePtrInput `pulumi:"endpointConfiguration"`
	// This property is only supported on Pools with the virtualMachineConfiguration property.
	PublicIPAddressConfiguration PublicIPAddressConfigurationResponsePtrInput `pulumi:"publicIPAddressConfiguration"`
	// The virtual network must be in the same region and subscription as the Azure Batch account. The specified subnet should have enough free IP addresses to accommodate the number of nodes in the pool. If the subnet doesn't have enough free IP addresses, the pool will partially allocate compute nodes and a resize error will occur. The 'MicrosoftAzureBatch' service principal must have the 'Classic Virtual Machine Contributor' Role-Based Access Control (RBAC) role for the specified VNet. The specified subnet must allow communication from the Azure Batch service to be able to schedule tasks on the compute nodes. This can be verified by checking if the specified VNet has any associated Network Security Groups (NSG). If communication to the compute nodes in the specified subnet is denied by an NSG, then the Batch service will set the state of the compute nodes to unusable. If the specified VNet has any associated Network Security Groups (NSG), then a few reserved system ports must be enabled for inbound communication. For pools created with a virtual machine configuration, enable ports 29876 and 29877, as well as port 22 for Linux and port 3389 for Windows. For pools created with a cloud service configuration, enable ports 10100, 20100, and 30100. Also enable outbound connections to Azure Storage on port 443. For cloudServiceConfiguration pools, only 'classic' VNETs are supported. For more details see: https://docs.microsoft.com/en-us/azure/batch/batch-api-basics#virtual-network-vnet-and-firewall-configuration
	SubnetId pulumi.StringPtrInput `pulumi:"subnetId"`
}

func (NetworkConfigurationResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworkConfigurationResponse)(nil)).Elem()
}

func (i NetworkConfigurationResponseArgs) ToNetworkConfigurationResponseOutput() NetworkConfigurationResponseOutput {
	return i.ToNetworkConfigurationResponseOutputWithContext(context.Background())
}

func (i NetworkConfigurationResponseArgs) ToNetworkConfigurationResponseOutputWithContext(ctx context.Context) NetworkConfigurationResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkConfigurationResponseOutput)
}

func (i NetworkConfigurationResponseArgs) ToNetworkConfigurationResponsePtrOutput() NetworkConfigurationResponsePtrOutput {
	return i.ToNetworkConfigurationResponsePtrOutputWithContext(context.Background())
}

func (i NetworkConfigurationResponseArgs) ToNetworkConfigurationResponsePtrOutputWithContext(ctx context.Context) NetworkConfigurationResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkConfigurationResponseOutput).ToNetworkConfigurationResponsePtrOutputWithContext(ctx)
}

// NetworkConfigurationResponsePtrInput is an input type that accepts NetworkConfigurationResponseArgs, NetworkConfigurationResponsePtr and NetworkConfigurationResponsePtrOutput values.
// You can construct a concrete instance of `NetworkConfigurationResponsePtrInput` via:
//
//          NetworkConfigurationResponseArgs{...}
//
//  or:
//
//          nil
type NetworkConfigurationResponsePtrInput interface {
	pulumi.Input

	ToNetworkConfigurationResponsePtrOutput() NetworkConfigurationResponsePtrOutput
	ToNetworkConfigurationResponsePtrOutputWithContext(context.Context) NetworkConfigurationResponsePtrOutput
}

type networkConfigurationResponsePtrType NetworkConfigurationResponseArgs

func NetworkConfigurationResponsePtr(v *NetworkConfigurationResponseArgs) NetworkConfigurationResponsePtrInput {
	return (*networkConfigurationResponsePtrType)(v)
}

func (*networkConfigurationResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**NetworkConfigurationResponse)(nil)).Elem()
}

func (i *networkConfigurationResponsePtrType) ToNetworkConfigurationResponsePtrOutput() NetworkConfigurationResponsePtrOutput {
	return i.ToNetworkConfigurationResponsePtrOutputWithContext(context.Background())
}

func (i *networkConfigurationResponsePtrType) ToNetworkConfigurationResponsePtrOutputWithContext(ctx context.Context) NetworkConfigurationResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkConfigurationResponsePtrOutput)
}

// The network configuration for a pool.
type NetworkConfigurationResponseOutput struct{ *pulumi.OutputState }

func (NetworkConfigurationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworkConfigurationResponse)(nil)).Elem()
}

func (o NetworkConfigurationResponseOutput) ToNetworkConfigurationResponseOutput() NetworkConfigurationResponseOutput {
	return o
}

func (o NetworkConfigurationResponseOutput) ToNetworkConfigurationResponseOutputWithContext(ctx context.Context) NetworkConfigurationResponseOutput {
	return o
}

func (o NetworkConfigurationResponseOutput) ToNetworkConfigurationResponsePtrOutput() NetworkConfigurationResponsePtrOutput {
	return o.ToNetworkConfigurationResponsePtrOutputWithContext(context.Background())
}

func (o NetworkConfigurationResponseOutput) ToNetworkConfigurationResponsePtrOutputWithContext(ctx context.Context) NetworkConfigurationResponsePtrOutput {
	return o.ApplyT(func(v NetworkConfigurationResponse) *NetworkConfigurationResponse {
		return &v
	}).(NetworkConfigurationResponsePtrOutput)
}

// Pool endpoint configuration is only supported on pools with the virtualMachineConfiguration property.
func (o NetworkConfigurationResponseOutput) EndpointConfiguration() PoolEndpointConfigurationResponsePtrOutput {
	return o.ApplyT(func(v NetworkConfigurationResponse) *PoolEndpointConfigurationResponse {
		return v.EndpointConfiguration
	}).(PoolEndpointConfigurationResponsePtrOutput)
}

// This property is only supported on Pools with the virtualMachineConfiguration property.
func (o NetworkConfigurationResponseOutput) PublicIPAddressConfiguration() PublicIPAddressConfigurationResponsePtrOutput {
	return o.ApplyT(func(v NetworkConfigurationResponse) *PublicIPAddressConfigurationResponse {
		return v.PublicIPAddressConfiguration
	}).(PublicIPAddressConfigurationResponsePtrOutput)
}

// The virtual network must be in the same region and subscription as the Azure Batch account. The specified subnet should have enough free IP addresses to accommodate the number of nodes in the pool. If the subnet doesn't have enough free IP addresses, the pool will partially allocate compute nodes and a resize error will occur. The 'MicrosoftAzureBatch' service principal must have the 'Classic Virtual Machine Contributor' Role-Based Access Control (RBAC) role for the specified VNet. The specified subnet must allow communication from the Azure Batch service to be able to schedule tasks on the compute nodes. This can be verified by checking if the specified VNet has any associated Network Security Groups (NSG). If communication to the compute nodes in the specified subnet is denied by an NSG, then the Batch service will set the state of the compute nodes to unusable. If the specified VNet has any associated Network Security Groups (NSG), then a few reserved system ports must be enabled for inbound communication. For pools created with a virtual machine configuration, enable ports 29876 and 29877, as well as port 22 for Linux and port 3389 for Windows. For pools created with a cloud service configuration, enable ports 10100, 20100, and 30100. Also enable outbound connections to Azure Storage on port 443. For cloudServiceConfiguration pools, only 'classic' VNETs are supported. For more details see: https://docs.microsoft.com/en-us/azure/batch/batch-api-basics#virtual-network-vnet-and-firewall-configuration
func (o NetworkConfigurationResponseOutput) SubnetId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworkConfigurationResponse) *string { return v.SubnetId }).(pulumi.StringPtrOutput)
}

type NetworkConfigurationResponsePtrOutput struct{ *pulumi.OutputState }

func (NetworkConfigurationResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NetworkConfigurationResponse)(nil)).Elem()
}

func (o NetworkConfigurationResponsePtrOutput) ToNetworkConfigurationResponsePtrOutput() NetworkConfigurationResponsePtrOutput {
	return o
}

func (o NetworkConfigurationResponsePtrOutput) ToNetworkConfigurationResponsePtrOutputWithContext(ctx context.Context) NetworkConfigurationResponsePtrOutput {
	return o
}

func (o NetworkConfigurationResponsePtrOutput) Elem() NetworkConfigurationResponseOutput {
	return o.ApplyT(func(v *NetworkConfigurationResponse) NetworkConfigurationResponse { return *v }).(NetworkConfigurationResponseOutput)
}

// Pool endpoint configuration is only supported on pools with the virtualMachineConfiguration property.
func (o NetworkConfigurationResponsePtrOutput) EndpointConfiguration() PoolEndpointConfigurationResponsePtrOutput {
	return o.ApplyT(func(v *NetworkConfigurationResponse) *PoolEndpointConfigurationResponse {
		if v == nil {
			return nil
		}
		return v.EndpointConfiguration
	}).(PoolEndpointConfigurationResponsePtrOutput)
}

// This property is only supported on Pools with the virtualMachineConfiguration property.
func (o NetworkConfigurationResponsePtrOutput) PublicIPAddressConfiguration() PublicIPAddressConfigurationResponsePtrOutput {
	return o.ApplyT(func(v *NetworkConfigurationResponse) *PublicIPAddressConfigurationResponse {
		if v == nil {
			return nil
		}
		return v.PublicIPAddressConfiguration
	}).(PublicIPAddressConfigurationResponsePtrOutput)
}

// The virtual network must be in the same region and subscription as the Azure Batch account. The specified subnet should have enough free IP addresses to accommodate the number of nodes in the pool. If the subnet doesn't have enough free IP addresses, the pool will partially allocate compute nodes and a resize error will occur. The 'MicrosoftAzureBatch' service principal must have the 'Classic Virtual Machine Contributor' Role-Based Access Control (RBAC) role for the specified VNet. The specified subnet must allow communication from the Azure Batch service to be able to schedule tasks on the compute nodes. This can be verified by checking if the specified VNet has any associated Network Security Groups (NSG). If communication to the compute nodes in the specified subnet is denied by an NSG, then the Batch service will set the state of the compute nodes to unusable. If the specified VNet has any associated Network Security Groups (NSG), then a few reserved system ports must be enabled for inbound communication. For pools created with a virtual machine configuration, enable ports 29876 and 29877, as well as port 22 for Linux and port 3389 for Windows. For pools created with a cloud service configuration, enable ports 10100, 20100, and 30100. Also enable outbound connections to Azure Storage on port 443. For cloudServiceConfiguration pools, only 'classic' VNETs are supported. For more details see: https://docs.microsoft.com/en-us/azure/batch/batch-api-basics#virtual-network-vnet-and-firewall-configuration
func (o NetworkConfigurationResponsePtrOutput) SubnetId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NetworkConfigurationResponse) *string {
		if v == nil {
			return nil
		}
		return v.SubnetId
	}).(pulumi.StringPtrOutput)
}

type NetworkSecurityGroupRule struct {
	Access string `pulumi:"access"`
	// Priorities within a pool must be unique and are evaluated in order of priority. The lower the number the higher the priority. For example, rules could be specified with order numbers of 150, 250, and 350. The rule with the order number of 150 takes precedence over the rule that has an order of 250. Allowed priorities are 150 to 4096. If any reserved or duplicate values are provided the request fails with HTTP status code 400.
	Priority int `pulumi:"priority"`
	// Valid values are a single IP address (i.e. 10.10.10.10), IP subnet (i.e. 192.168.1.0/24), default tag, or * (for all addresses).  If any other values are provided the request fails with HTTP status code 400.
	SourceAddressPrefix string `pulumi:"sourceAddressPrefix"`
	// Valid values are '*' (for all ports 0 - 65535) or arrays of ports or port ranges (i.e. 100-200). The ports should in the range of 0 to 65535 and the port ranges or ports can't overlap. If any other values are provided the request fails with HTTP status code 400. Default value will be *.
	SourcePortRanges []string `pulumi:"sourcePortRanges"`
}

// NetworkSecurityGroupRuleInput is an input type that accepts NetworkSecurityGroupRuleArgs and NetworkSecurityGroupRuleOutput values.
// You can construct a concrete instance of `NetworkSecurityGroupRuleInput` via:
//
//          NetworkSecurityGroupRuleArgs{...}
type NetworkSecurityGroupRuleInput interface {
	pulumi.Input

	ToNetworkSecurityGroupRuleOutput() NetworkSecurityGroupRuleOutput
	ToNetworkSecurityGroupRuleOutputWithContext(context.Context) NetworkSecurityGroupRuleOutput
}

type NetworkSecurityGroupRuleArgs struct {
	Access pulumi.StringInput `pulumi:"access"`
	// Priorities within a pool must be unique and are evaluated in order of priority. The lower the number the higher the priority. For example, rules could be specified with order numbers of 150, 250, and 350. The rule with the order number of 150 takes precedence over the rule that has an order of 250. Allowed priorities are 150 to 4096. If any reserved or duplicate values are provided the request fails with HTTP status code 400.
	Priority pulumi.IntInput `pulumi:"priority"`
	// Valid values are a single IP address (i.e. 10.10.10.10), IP subnet (i.e. 192.168.1.0/24), default tag, or * (for all addresses).  If any other values are provided the request fails with HTTP status code 400.
	SourceAddressPrefix pulumi.StringInput `pulumi:"sourceAddressPrefix"`
	// Valid values are '*' (for all ports 0 - 65535) or arrays of ports or port ranges (i.e. 100-200). The ports should in the range of 0 to 65535 and the port ranges or ports can't overlap. If any other values are provided the request fails with HTTP status code 400. Default value will be *.
	SourcePortRanges pulumi.StringArrayInput `pulumi:"sourcePortRanges"`
}

func (NetworkSecurityGroupRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworkSecurityGroupRule)(nil)).Elem()
}

func (i NetworkSecurityGroupRuleArgs) ToNetworkSecurityGroupRuleOutput() NetworkSecurityGroupRuleOutput {
	return i.ToNetworkSecurityGroupRuleOutputWithContext(context.Background())
}

func (i NetworkSecurityGroupRuleArgs) ToNetworkSecurityGroupRuleOutputWithContext(ctx context.Context) NetworkSecurityGroupRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkSecurityGroupRuleOutput)
}

// NetworkSecurityGroupRuleArrayInput is an input type that accepts NetworkSecurityGroupRuleArray and NetworkSecurityGroupRuleArrayOutput values.
// You can construct a concrete instance of `NetworkSecurityGroupRuleArrayInput` via:
//
//          NetworkSecurityGroupRuleArray{ NetworkSecurityGroupRuleArgs{...} }
type NetworkSecurityGroupRuleArrayInput interface {
	pulumi.Input

	ToNetworkSecurityGroupRuleArrayOutput() NetworkSecurityGroupRuleArrayOutput
	ToNetworkSecurityGroupRuleArrayOutputWithContext(context.Context) NetworkSecurityGroupRuleArrayOutput
}

type NetworkSecurityGroupRuleArray []NetworkSecurityGroupRuleInput

func (NetworkSecurityGroupRuleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NetworkSecurityGroupRule)(nil)).Elem()
}

func (i NetworkSecurityGroupRuleArray) ToNetworkSecurityGroupRuleArrayOutput() NetworkSecurityGroupRuleArrayOutput {
	return i.ToNetworkSecurityGroupRuleArrayOutputWithContext(context.Background())
}

func (i NetworkSecurityGroupRuleArray) ToNetworkSecurityGroupRuleArrayOutputWithContext(ctx context.Context) NetworkSecurityGroupRuleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkSecurityGroupRuleArrayOutput)
}

type NetworkSecurityGroupRuleOutput struct{ *pulumi.OutputState }

func (NetworkSecurityGroupRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworkSecurityGroupRule)(nil)).Elem()
}

func (o NetworkSecurityGroupRuleOutput) ToNetworkSecurityGroupRuleOutput() NetworkSecurityGroupRuleOutput {
	return o
}

func (o NetworkSecurityGroupRuleOutput) ToNetworkSecurityGroupRuleOutputWithContext(ctx context.Context) NetworkSecurityGroupRuleOutput {
	return o
}

func (o NetworkSecurityGroupRuleOutput) Access() pulumi.StringOutput {
	return o.ApplyT(func(v NetworkSecurityGroupRule) string { return v.Access }).(pulumi.StringOutput)
}

// Priorities within a pool must be unique and are evaluated in order of priority. The lower the number the higher the priority. For example, rules could be specified with order numbers of 150, 250, and 350. The rule with the order number of 150 takes precedence over the rule that has an order of 250. Allowed priorities are 150 to 4096. If any reserved or duplicate values are provided the request fails with HTTP status code 400.
func (o NetworkSecurityGroupRuleOutput) Priority() pulumi.IntOutput {
	return o.ApplyT(func(v NetworkSecurityGroupRule) int { return v.Priority }).(pulumi.IntOutput)
}

// Valid values are a single IP address (i.e. 10.10.10.10), IP subnet (i.e. 192.168.1.0/24), default tag, or * (for all addresses).  If any other values are provided the request fails with HTTP status code 400.
func (o NetworkSecurityGroupRuleOutput) SourceAddressPrefix() pulumi.StringOutput {
	return o.ApplyT(func(v NetworkSecurityGroupRule) string { return v.SourceAddressPrefix }).(pulumi.StringOutput)
}

// Valid values are '*' (for all ports 0 - 65535) or arrays of ports or port ranges (i.e. 100-200). The ports should in the range of 0 to 65535 and the port ranges or ports can't overlap. If any other values are provided the request fails with HTTP status code 400. Default value will be *.
func (o NetworkSecurityGroupRuleOutput) SourcePortRanges() pulumi.StringArrayOutput {
	return o.ApplyT(func(v NetworkSecurityGroupRule) []string { return v.SourcePortRanges }).(pulumi.StringArrayOutput)
}

type NetworkSecurityGroupRuleArrayOutput struct{ *pulumi.OutputState }

func (NetworkSecurityGroupRuleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NetworkSecurityGroupRule)(nil)).Elem()
}

func (o NetworkSecurityGroupRuleArrayOutput) ToNetworkSecurityGroupRuleArrayOutput() NetworkSecurityGroupRuleArrayOutput {
	return o
}

func (o NetworkSecurityGroupRuleArrayOutput) ToNetworkSecurityGroupRuleArrayOutputWithContext(ctx context.Context) NetworkSecurityGroupRuleArrayOutput {
	return o
}

func (o NetworkSecurityGroupRuleArrayOutput) Index(i pulumi.IntInput) NetworkSecurityGroupRuleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) NetworkSecurityGroupRule {
		return vs[0].([]NetworkSecurityGroupRule)[vs[1].(int)]
	}).(NetworkSecurityGroupRuleOutput)
}

type NetworkSecurityGroupRuleResponse struct {
	Access string `pulumi:"access"`
	// Priorities within a pool must be unique and are evaluated in order of priority. The lower the number the higher the priority. For example, rules could be specified with order numbers of 150, 250, and 350. The rule with the order number of 150 takes precedence over the rule that has an order of 250. Allowed priorities are 150 to 4096. If any reserved or duplicate values are provided the request fails with HTTP status code 400.
	Priority int `pulumi:"priority"`
	// Valid values are a single IP address (i.e. 10.10.10.10), IP subnet (i.e. 192.168.1.0/24), default tag, or * (for all addresses).  If any other values are provided the request fails with HTTP status code 400.
	SourceAddressPrefix string `pulumi:"sourceAddressPrefix"`
	// Valid values are '*' (for all ports 0 - 65535) or arrays of ports or port ranges (i.e. 100-200). The ports should in the range of 0 to 65535 and the port ranges or ports can't overlap. If any other values are provided the request fails with HTTP status code 400. Default value will be *.
	SourcePortRanges []string `pulumi:"sourcePortRanges"`
}

// NetworkSecurityGroupRuleResponseInput is an input type that accepts NetworkSecurityGroupRuleResponseArgs and NetworkSecurityGroupRuleResponseOutput values.
// You can construct a concrete instance of `NetworkSecurityGroupRuleResponseInput` via:
//
//          NetworkSecurityGroupRuleResponseArgs{...}
type NetworkSecurityGroupRuleResponseInput interface {
	pulumi.Input

	ToNetworkSecurityGroupRuleResponseOutput() NetworkSecurityGroupRuleResponseOutput
	ToNetworkSecurityGroupRuleResponseOutputWithContext(context.Context) NetworkSecurityGroupRuleResponseOutput
}

type NetworkSecurityGroupRuleResponseArgs struct {
	Access pulumi.StringInput `pulumi:"access"`
	// Priorities within a pool must be unique and are evaluated in order of priority. The lower the number the higher the priority. For example, rules could be specified with order numbers of 150, 250, and 350. The rule with the order number of 150 takes precedence over the rule that has an order of 250. Allowed priorities are 150 to 4096. If any reserved or duplicate values are provided the request fails with HTTP status code 400.
	Priority pulumi.IntInput `pulumi:"priority"`
	// Valid values are a single IP address (i.e. 10.10.10.10), IP subnet (i.e. 192.168.1.0/24), default tag, or * (for all addresses).  If any other values are provided the request fails with HTTP status code 400.
	SourceAddressPrefix pulumi.StringInput `pulumi:"sourceAddressPrefix"`
	// Valid values are '*' (for all ports 0 - 65535) or arrays of ports or port ranges (i.e. 100-200). The ports should in the range of 0 to 65535 and the port ranges or ports can't overlap. If any other values are provided the request fails with HTTP status code 400. Default value will be *.
	SourcePortRanges pulumi.StringArrayInput `pulumi:"sourcePortRanges"`
}

func (NetworkSecurityGroupRuleResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworkSecurityGroupRuleResponse)(nil)).Elem()
}

func (i NetworkSecurityGroupRuleResponseArgs) ToNetworkSecurityGroupRuleResponseOutput() NetworkSecurityGroupRuleResponseOutput {
	return i.ToNetworkSecurityGroupRuleResponseOutputWithContext(context.Background())
}

func (i NetworkSecurityGroupRuleResponseArgs) ToNetworkSecurityGroupRuleResponseOutputWithContext(ctx context.Context) NetworkSecurityGroupRuleResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkSecurityGroupRuleResponseOutput)
}

// NetworkSecurityGroupRuleResponseArrayInput is an input type that accepts NetworkSecurityGroupRuleResponseArray and NetworkSecurityGroupRuleResponseArrayOutput values.
// You can construct a concrete instance of `NetworkSecurityGroupRuleResponseArrayInput` via:
//
//          NetworkSecurityGroupRuleResponseArray{ NetworkSecurityGroupRuleResponseArgs{...} }
type NetworkSecurityGroupRuleResponseArrayInput interface {
	pulumi.Input

	ToNetworkSecurityGroupRuleResponseArrayOutput() NetworkSecurityGroupRuleResponseArrayOutput
	ToNetworkSecurityGroupRuleResponseArrayOutputWithContext(context.Context) NetworkSecurityGroupRuleResponseArrayOutput
}

type NetworkSecurityGroupRuleResponseArray []NetworkSecurityGroupRuleResponseInput

func (NetworkSecurityGroupRuleResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NetworkSecurityGroupRuleResponse)(nil)).Elem()
}

func (i NetworkSecurityGroupRuleResponseArray) ToNetworkSecurityGroupRuleResponseArrayOutput() NetworkSecurityGroupRuleResponseArrayOutput {
	return i.ToNetworkSecurityGroupRuleResponseArrayOutputWithContext(context.Background())
}

func (i NetworkSecurityGroupRuleResponseArray) ToNetworkSecurityGroupRuleResponseArrayOutputWithContext(ctx context.Context) NetworkSecurityGroupRuleResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkSecurityGroupRuleResponseArrayOutput)
}

type NetworkSecurityGroupRuleResponseOutput struct{ *pulumi.OutputState }

func (NetworkSecurityGroupRuleResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworkSecurityGroupRuleResponse)(nil)).Elem()
}

func (o NetworkSecurityGroupRuleResponseOutput) ToNetworkSecurityGroupRuleResponseOutput() NetworkSecurityGroupRuleResponseOutput {
	return o
}

func (o NetworkSecurityGroupRuleResponseOutput) ToNetworkSecurityGroupRuleResponseOutputWithContext(ctx context.Context) NetworkSecurityGroupRuleResponseOutput {
	return o
}

func (o NetworkSecurityGroupRuleResponseOutput) Access() pulumi.StringOutput {
	return o.ApplyT(func(v NetworkSecurityGroupRuleResponse) string { return v.Access }).(pulumi.StringOutput)
}

// Priorities within a pool must be unique and are evaluated in order of priority. The lower the number the higher the priority. For example, rules could be specified with order numbers of 150, 250, and 350. The rule with the order number of 150 takes precedence over the rule that has an order of 250. Allowed priorities are 150 to 4096. If any reserved or duplicate values are provided the request fails with HTTP status code 400.
func (o NetworkSecurityGroupRuleResponseOutput) Priority() pulumi.IntOutput {
	return o.ApplyT(func(v NetworkSecurityGroupRuleResponse) int { return v.Priority }).(pulumi.IntOutput)
}

// Valid values are a single IP address (i.e. 10.10.10.10), IP subnet (i.e. 192.168.1.0/24), default tag, or * (for all addresses).  If any other values are provided the request fails with HTTP status code 400.
func (o NetworkSecurityGroupRuleResponseOutput) SourceAddressPrefix() pulumi.StringOutput {
	return o.ApplyT(func(v NetworkSecurityGroupRuleResponse) string { return v.SourceAddressPrefix }).(pulumi.StringOutput)
}

// Valid values are '*' (for all ports 0 - 65535) or arrays of ports or port ranges (i.e. 100-200). The ports should in the range of 0 to 65535 and the port ranges or ports can't overlap. If any other values are provided the request fails with HTTP status code 400. Default value will be *.
func (o NetworkSecurityGroupRuleResponseOutput) SourcePortRanges() pulumi.StringArrayOutput {
	return o.ApplyT(func(v NetworkSecurityGroupRuleResponse) []string { return v.SourcePortRanges }).(pulumi.StringArrayOutput)
}

type NetworkSecurityGroupRuleResponseArrayOutput struct{ *pulumi.OutputState }

func (NetworkSecurityGroupRuleResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NetworkSecurityGroupRuleResponse)(nil)).Elem()
}

func (o NetworkSecurityGroupRuleResponseArrayOutput) ToNetworkSecurityGroupRuleResponseArrayOutput() NetworkSecurityGroupRuleResponseArrayOutput {
	return o
}

func (o NetworkSecurityGroupRuleResponseArrayOutput) ToNetworkSecurityGroupRuleResponseArrayOutputWithContext(ctx context.Context) NetworkSecurityGroupRuleResponseArrayOutput {
	return o
}

func (o NetworkSecurityGroupRuleResponseArrayOutput) Index(i pulumi.IntInput) NetworkSecurityGroupRuleResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) NetworkSecurityGroupRuleResponse {
		return vs[0].([]NetworkSecurityGroupRuleResponse)[vs[1].(int)]
	}).(NetworkSecurityGroupRuleResponseOutput)
}

type PoolEndpointConfiguration struct {
	// The maximum number of inbound NAT pools per Batch pool is 5. If the maximum number of inbound NAT pools is exceeded the request fails with HTTP status code 400. This cannot be specified if the IPAddressProvisioningType is NoPublicIPAddresses.
	InboundNatPools []InboundNatPool `pulumi:"inboundNatPools"`
}

// PoolEndpointConfigurationInput is an input type that accepts PoolEndpointConfigurationArgs and PoolEndpointConfigurationOutput values.
// You can construct a concrete instance of `PoolEndpointConfigurationInput` via:
//
//          PoolEndpointConfigurationArgs{...}
type PoolEndpointConfigurationInput interface {
	pulumi.Input

	ToPoolEndpointConfigurationOutput() PoolEndpointConfigurationOutput
	ToPoolEndpointConfigurationOutputWithContext(context.Context) PoolEndpointConfigurationOutput
}

type PoolEndpointConfigurationArgs struct {
	// The maximum number of inbound NAT pools per Batch pool is 5. If the maximum number of inbound NAT pools is exceeded the request fails with HTTP status code 400. This cannot be specified if the IPAddressProvisioningType is NoPublicIPAddresses.
	InboundNatPools InboundNatPoolArrayInput `pulumi:"inboundNatPools"`
}

func (PoolEndpointConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PoolEndpointConfiguration)(nil)).Elem()
}

func (i PoolEndpointConfigurationArgs) ToPoolEndpointConfigurationOutput() PoolEndpointConfigurationOutput {
	return i.ToPoolEndpointConfigurationOutputWithContext(context.Background())
}

func (i PoolEndpointConfigurationArgs) ToPoolEndpointConfigurationOutputWithContext(ctx context.Context) PoolEndpointConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PoolEndpointConfigurationOutput)
}

func (i PoolEndpointConfigurationArgs) ToPoolEndpointConfigurationPtrOutput() PoolEndpointConfigurationPtrOutput {
	return i.ToPoolEndpointConfigurationPtrOutputWithContext(context.Background())
}

func (i PoolEndpointConfigurationArgs) ToPoolEndpointConfigurationPtrOutputWithContext(ctx context.Context) PoolEndpointConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PoolEndpointConfigurationOutput).ToPoolEndpointConfigurationPtrOutputWithContext(ctx)
}

// PoolEndpointConfigurationPtrInput is an input type that accepts PoolEndpointConfigurationArgs, PoolEndpointConfigurationPtr and PoolEndpointConfigurationPtrOutput values.
// You can construct a concrete instance of `PoolEndpointConfigurationPtrInput` via:
//
//          PoolEndpointConfigurationArgs{...}
//
//  or:
//
//          nil
type PoolEndpointConfigurationPtrInput interface {
	pulumi.Input

	ToPoolEndpointConfigurationPtrOutput() PoolEndpointConfigurationPtrOutput
	ToPoolEndpointConfigurationPtrOutputWithContext(context.Context) PoolEndpointConfigurationPtrOutput
}

type poolEndpointConfigurationPtrType PoolEndpointConfigurationArgs

func PoolEndpointConfigurationPtr(v *PoolEndpointConfigurationArgs) PoolEndpointConfigurationPtrInput {
	return (*poolEndpointConfigurationPtrType)(v)
}

func (*poolEndpointConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PoolEndpointConfiguration)(nil)).Elem()
}

func (i *poolEndpointConfigurationPtrType) ToPoolEndpointConfigurationPtrOutput() PoolEndpointConfigurationPtrOutput {
	return i.ToPoolEndpointConfigurationPtrOutputWithContext(context.Background())
}

func (i *poolEndpointConfigurationPtrType) ToPoolEndpointConfigurationPtrOutputWithContext(ctx context.Context) PoolEndpointConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PoolEndpointConfigurationPtrOutput)
}

type PoolEndpointConfigurationOutput struct{ *pulumi.OutputState }

func (PoolEndpointConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PoolEndpointConfiguration)(nil)).Elem()
}

func (o PoolEndpointConfigurationOutput) ToPoolEndpointConfigurationOutput() PoolEndpointConfigurationOutput {
	return o
}

func (o PoolEndpointConfigurationOutput) ToPoolEndpointConfigurationOutputWithContext(ctx context.Context) PoolEndpointConfigurationOutput {
	return o
}

func (o PoolEndpointConfigurationOutput) ToPoolEndpointConfigurationPtrOutput() PoolEndpointConfigurationPtrOutput {
	return o.ToPoolEndpointConfigurationPtrOutputWithContext(context.Background())
}

func (o PoolEndpointConfigurationOutput) ToPoolEndpointConfigurationPtrOutputWithContext(ctx context.Context) PoolEndpointConfigurationPtrOutput {
	return o.ApplyT(func(v PoolEndpointConfiguration) *PoolEndpointConfiguration {
		return &v
	}).(PoolEndpointConfigurationPtrOutput)
}

// The maximum number of inbound NAT pools per Batch pool is 5. If the maximum number of inbound NAT pools is exceeded the request fails with HTTP status code 400. This cannot be specified if the IPAddressProvisioningType is NoPublicIPAddresses.
func (o PoolEndpointConfigurationOutput) InboundNatPools() InboundNatPoolArrayOutput {
	return o.ApplyT(func(v PoolEndpointConfiguration) []InboundNatPool { return v.InboundNatPools }).(InboundNatPoolArrayOutput)
}

type PoolEndpointConfigurationPtrOutput struct{ *pulumi.OutputState }

func (PoolEndpointConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PoolEndpointConfiguration)(nil)).Elem()
}

func (o PoolEndpointConfigurationPtrOutput) ToPoolEndpointConfigurationPtrOutput() PoolEndpointConfigurationPtrOutput {
	return o
}

func (o PoolEndpointConfigurationPtrOutput) ToPoolEndpointConfigurationPtrOutputWithContext(ctx context.Context) PoolEndpointConfigurationPtrOutput {
	return o
}

func (o PoolEndpointConfigurationPtrOutput) Elem() PoolEndpointConfigurationOutput {
	return o.ApplyT(func(v *PoolEndpointConfiguration) PoolEndpointConfiguration { return *v }).(PoolEndpointConfigurationOutput)
}

// The maximum number of inbound NAT pools per Batch pool is 5. If the maximum number of inbound NAT pools is exceeded the request fails with HTTP status code 400. This cannot be specified if the IPAddressProvisioningType is NoPublicIPAddresses.
func (o PoolEndpointConfigurationPtrOutput) InboundNatPools() InboundNatPoolArrayOutput {
	return o.ApplyT(func(v *PoolEndpointConfiguration) []InboundNatPool {
		if v == nil {
			return nil
		}
		return v.InboundNatPools
	}).(InboundNatPoolArrayOutput)
}

type PoolEndpointConfigurationResponse struct {
	// The maximum number of inbound NAT pools per Batch pool is 5. If the maximum number of inbound NAT pools is exceeded the request fails with HTTP status code 400. This cannot be specified if the IPAddressProvisioningType is NoPublicIPAddresses.
	InboundNatPools []InboundNatPoolResponse `pulumi:"inboundNatPools"`
}

// PoolEndpointConfigurationResponseInput is an input type that accepts PoolEndpointConfigurationResponseArgs and PoolEndpointConfigurationResponseOutput values.
// You can construct a concrete instance of `PoolEndpointConfigurationResponseInput` via:
//
//          PoolEndpointConfigurationResponseArgs{...}
type PoolEndpointConfigurationResponseInput interface {
	pulumi.Input

	ToPoolEndpointConfigurationResponseOutput() PoolEndpointConfigurationResponseOutput
	ToPoolEndpointConfigurationResponseOutputWithContext(context.Context) PoolEndpointConfigurationResponseOutput
}

type PoolEndpointConfigurationResponseArgs struct {
	// The maximum number of inbound NAT pools per Batch pool is 5. If the maximum number of inbound NAT pools is exceeded the request fails with HTTP status code 400. This cannot be specified if the IPAddressProvisioningType is NoPublicIPAddresses.
	InboundNatPools InboundNatPoolResponseArrayInput `pulumi:"inboundNatPools"`
}

func (PoolEndpointConfigurationResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PoolEndpointConfigurationResponse)(nil)).Elem()
}

func (i PoolEndpointConfigurationResponseArgs) ToPoolEndpointConfigurationResponseOutput() PoolEndpointConfigurationResponseOutput {
	return i.ToPoolEndpointConfigurationResponseOutputWithContext(context.Background())
}

func (i PoolEndpointConfigurationResponseArgs) ToPoolEndpointConfigurationResponseOutputWithContext(ctx context.Context) PoolEndpointConfigurationResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PoolEndpointConfigurationResponseOutput)
}

func (i PoolEndpointConfigurationResponseArgs) ToPoolEndpointConfigurationResponsePtrOutput() PoolEndpointConfigurationResponsePtrOutput {
	return i.ToPoolEndpointConfigurationResponsePtrOutputWithContext(context.Background())
}

func (i PoolEndpointConfigurationResponseArgs) ToPoolEndpointConfigurationResponsePtrOutputWithContext(ctx context.Context) PoolEndpointConfigurationResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PoolEndpointConfigurationResponseOutput).ToPoolEndpointConfigurationResponsePtrOutputWithContext(ctx)
}

// PoolEndpointConfigurationResponsePtrInput is an input type that accepts PoolEndpointConfigurationResponseArgs, PoolEndpointConfigurationResponsePtr and PoolEndpointConfigurationResponsePtrOutput values.
// You can construct a concrete instance of `PoolEndpointConfigurationResponsePtrInput` via:
//
//          PoolEndpointConfigurationResponseArgs{...}
//
//  or:
//
//          nil
type PoolEndpointConfigurationResponsePtrInput interface {
	pulumi.Input

	ToPoolEndpointConfigurationResponsePtrOutput() PoolEndpointConfigurationResponsePtrOutput
	ToPoolEndpointConfigurationResponsePtrOutputWithContext(context.Context) PoolEndpointConfigurationResponsePtrOutput
}

type poolEndpointConfigurationResponsePtrType PoolEndpointConfigurationResponseArgs

func PoolEndpointConfigurationResponsePtr(v *PoolEndpointConfigurationResponseArgs) PoolEndpointConfigurationResponsePtrInput {
	return (*poolEndpointConfigurationResponsePtrType)(v)
}

func (*poolEndpointConfigurationResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PoolEndpointConfigurationResponse)(nil)).Elem()
}

func (i *poolEndpointConfigurationResponsePtrType) ToPoolEndpointConfigurationResponsePtrOutput() PoolEndpointConfigurationResponsePtrOutput {
	return i.ToPoolEndpointConfigurationResponsePtrOutputWithContext(context.Background())
}

func (i *poolEndpointConfigurationResponsePtrType) ToPoolEndpointConfigurationResponsePtrOutputWithContext(ctx context.Context) PoolEndpointConfigurationResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PoolEndpointConfigurationResponsePtrOutput)
}

type PoolEndpointConfigurationResponseOutput struct{ *pulumi.OutputState }

func (PoolEndpointConfigurationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PoolEndpointConfigurationResponse)(nil)).Elem()
}

func (o PoolEndpointConfigurationResponseOutput) ToPoolEndpointConfigurationResponseOutput() PoolEndpointConfigurationResponseOutput {
	return o
}

func (o PoolEndpointConfigurationResponseOutput) ToPoolEndpointConfigurationResponseOutputWithContext(ctx context.Context) PoolEndpointConfigurationResponseOutput {
	return o
}

func (o PoolEndpointConfigurationResponseOutput) ToPoolEndpointConfigurationResponsePtrOutput() PoolEndpointConfigurationResponsePtrOutput {
	return o.ToPoolEndpointConfigurationResponsePtrOutputWithContext(context.Background())
}

func (o PoolEndpointConfigurationResponseOutput) ToPoolEndpointConfigurationResponsePtrOutputWithContext(ctx context.Context) PoolEndpointConfigurationResponsePtrOutput {
	return o.ApplyT(func(v PoolEndpointConfigurationResponse) *PoolEndpointConfigurationResponse {
		return &v
	}).(PoolEndpointConfigurationResponsePtrOutput)
}

// The maximum number of inbound NAT pools per Batch pool is 5. If the maximum number of inbound NAT pools is exceeded the request fails with HTTP status code 400. This cannot be specified if the IPAddressProvisioningType is NoPublicIPAddresses.
func (o PoolEndpointConfigurationResponseOutput) InboundNatPools() InboundNatPoolResponseArrayOutput {
	return o.ApplyT(func(v PoolEndpointConfigurationResponse) []InboundNatPoolResponse { return v.InboundNatPools }).(InboundNatPoolResponseArrayOutput)
}

type PoolEndpointConfigurationResponsePtrOutput struct{ *pulumi.OutputState }

func (PoolEndpointConfigurationResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PoolEndpointConfigurationResponse)(nil)).Elem()
}

func (o PoolEndpointConfigurationResponsePtrOutput) ToPoolEndpointConfigurationResponsePtrOutput() PoolEndpointConfigurationResponsePtrOutput {
	return o
}

func (o PoolEndpointConfigurationResponsePtrOutput) ToPoolEndpointConfigurationResponsePtrOutputWithContext(ctx context.Context) PoolEndpointConfigurationResponsePtrOutput {
	return o
}

func (o PoolEndpointConfigurationResponsePtrOutput) Elem() PoolEndpointConfigurationResponseOutput {
	return o.ApplyT(func(v *PoolEndpointConfigurationResponse) PoolEndpointConfigurationResponse { return *v }).(PoolEndpointConfigurationResponseOutput)
}

// The maximum number of inbound NAT pools per Batch pool is 5. If the maximum number of inbound NAT pools is exceeded the request fails with HTTP status code 400. This cannot be specified if the IPAddressProvisioningType is NoPublicIPAddresses.
func (o PoolEndpointConfigurationResponsePtrOutput) InboundNatPools() InboundNatPoolResponseArrayOutput {
	return o.ApplyT(func(v *PoolEndpointConfigurationResponse) []InboundNatPoolResponse {
		if v == nil {
			return nil
		}
		return v.InboundNatPools
	}).(InboundNatPoolResponseArrayOutput)
}

// Contains information about a private link resource.
type PrivateEndpointConnectionResponse struct {
	// The ETag of the resource, used for concurrency statements.
	Etag string `pulumi:"etag"`
	// The ID of the resource.
	Id string `pulumi:"id"`
	// The name of the resource.
	Name string `pulumi:"name"`
	// The private endpoint of the private endpoint connection.
	PrivateEndpoint *PrivateEndpointResponse `pulumi:"privateEndpoint"`
	// The private link service connection state of the private endpoint connection
	PrivateLinkServiceConnectionState *PrivateLinkServiceConnectionStateResponse `pulumi:"privateLinkServiceConnectionState"`
	ProvisioningState                 string                                     `pulumi:"provisioningState"`
	// The type of the resource.
	Type string `pulumi:"type"`
}

// PrivateEndpointConnectionResponseInput is an input type that accepts PrivateEndpointConnectionResponseArgs and PrivateEndpointConnectionResponseOutput values.
// You can construct a concrete instance of `PrivateEndpointConnectionResponseInput` via:
//
//          PrivateEndpointConnectionResponseArgs{...}
type PrivateEndpointConnectionResponseInput interface {
	pulumi.Input

	ToPrivateEndpointConnectionResponseOutput() PrivateEndpointConnectionResponseOutput
	ToPrivateEndpointConnectionResponseOutputWithContext(context.Context) PrivateEndpointConnectionResponseOutput
}

// Contains information about a private link resource.
type PrivateEndpointConnectionResponseArgs struct {
	// The ETag of the resource, used for concurrency statements.
	Etag pulumi.StringInput `pulumi:"etag"`
	// The ID of the resource.
	Id pulumi.StringInput `pulumi:"id"`
	// The name of the resource.
	Name pulumi.StringInput `pulumi:"name"`
	// The private endpoint of the private endpoint connection.
	PrivateEndpoint PrivateEndpointResponsePtrInput `pulumi:"privateEndpoint"`
	// The private link service connection state of the private endpoint connection
	PrivateLinkServiceConnectionState PrivateLinkServiceConnectionStateResponsePtrInput `pulumi:"privateLinkServiceConnectionState"`
	ProvisioningState                 pulumi.StringInput                                `pulumi:"provisioningState"`
	// The type of the resource.
	Type pulumi.StringInput `pulumi:"type"`
}

func (PrivateEndpointConnectionResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PrivateEndpointConnectionResponse)(nil)).Elem()
}

func (i PrivateEndpointConnectionResponseArgs) ToPrivateEndpointConnectionResponseOutput() PrivateEndpointConnectionResponseOutput {
	return i.ToPrivateEndpointConnectionResponseOutputWithContext(context.Background())
}

func (i PrivateEndpointConnectionResponseArgs) ToPrivateEndpointConnectionResponseOutputWithContext(ctx context.Context) PrivateEndpointConnectionResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PrivateEndpointConnectionResponseOutput)
}

// PrivateEndpointConnectionResponseArrayInput is an input type that accepts PrivateEndpointConnectionResponseArray and PrivateEndpointConnectionResponseArrayOutput values.
// You can construct a concrete instance of `PrivateEndpointConnectionResponseArrayInput` via:
//
//          PrivateEndpointConnectionResponseArray{ PrivateEndpointConnectionResponseArgs{...} }
type PrivateEndpointConnectionResponseArrayInput interface {
	pulumi.Input

	ToPrivateEndpointConnectionResponseArrayOutput() PrivateEndpointConnectionResponseArrayOutput
	ToPrivateEndpointConnectionResponseArrayOutputWithContext(context.Context) PrivateEndpointConnectionResponseArrayOutput
}

type PrivateEndpointConnectionResponseArray []PrivateEndpointConnectionResponseInput

func (PrivateEndpointConnectionResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PrivateEndpointConnectionResponse)(nil)).Elem()
}

func (i PrivateEndpointConnectionResponseArray) ToPrivateEndpointConnectionResponseArrayOutput() PrivateEndpointConnectionResponseArrayOutput {
	return i.ToPrivateEndpointConnectionResponseArrayOutputWithContext(context.Background())
}

func (i PrivateEndpointConnectionResponseArray) ToPrivateEndpointConnectionResponseArrayOutputWithContext(ctx context.Context) PrivateEndpointConnectionResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PrivateEndpointConnectionResponseArrayOutput)
}

// Contains information about a private link resource.
type PrivateEndpointConnectionResponseOutput struct{ *pulumi.OutputState }

func (PrivateEndpointConnectionResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PrivateEndpointConnectionResponse)(nil)).Elem()
}

func (o PrivateEndpointConnectionResponseOutput) ToPrivateEndpointConnectionResponseOutput() PrivateEndpointConnectionResponseOutput {
	return o
}

func (o PrivateEndpointConnectionResponseOutput) ToPrivateEndpointConnectionResponseOutputWithContext(ctx context.Context) PrivateEndpointConnectionResponseOutput {
	return o
}

// The ETag of the resource, used for concurrency statements.
func (o PrivateEndpointConnectionResponseOutput) Etag() pulumi.StringOutput {
	return o.ApplyT(func(v PrivateEndpointConnectionResponse) string { return v.Etag }).(pulumi.StringOutput)
}

// The ID of the resource.
func (o PrivateEndpointConnectionResponseOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v PrivateEndpointConnectionResponse) string { return v.Id }).(pulumi.StringOutput)
}

// The name of the resource.
func (o PrivateEndpointConnectionResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v PrivateEndpointConnectionResponse) string { return v.Name }).(pulumi.StringOutput)
}

// The private endpoint of the private endpoint connection.
func (o PrivateEndpointConnectionResponseOutput) PrivateEndpoint() PrivateEndpointResponsePtrOutput {
	return o.ApplyT(func(v PrivateEndpointConnectionResponse) *PrivateEndpointResponse { return v.PrivateEndpoint }).(PrivateEndpointResponsePtrOutput)
}

// The private link service connection state of the private endpoint connection
func (o PrivateEndpointConnectionResponseOutput) PrivateLinkServiceConnectionState() PrivateLinkServiceConnectionStateResponsePtrOutput {
	return o.ApplyT(func(v PrivateEndpointConnectionResponse) *PrivateLinkServiceConnectionStateResponse {
		return v.PrivateLinkServiceConnectionState
	}).(PrivateLinkServiceConnectionStateResponsePtrOutput)
}

func (o PrivateEndpointConnectionResponseOutput) ProvisioningState() pulumi.StringOutput {
	return o.ApplyT(func(v PrivateEndpointConnectionResponse) string { return v.ProvisioningState }).(pulumi.StringOutput)
}

// The type of the resource.
func (o PrivateEndpointConnectionResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v PrivateEndpointConnectionResponse) string { return v.Type }).(pulumi.StringOutput)
}

type PrivateEndpointConnectionResponseArrayOutput struct{ *pulumi.OutputState }

func (PrivateEndpointConnectionResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PrivateEndpointConnectionResponse)(nil)).Elem()
}

func (o PrivateEndpointConnectionResponseArrayOutput) ToPrivateEndpointConnectionResponseArrayOutput() PrivateEndpointConnectionResponseArrayOutput {
	return o
}

func (o PrivateEndpointConnectionResponseArrayOutput) ToPrivateEndpointConnectionResponseArrayOutputWithContext(ctx context.Context) PrivateEndpointConnectionResponseArrayOutput {
	return o
}

func (o PrivateEndpointConnectionResponseArrayOutput) Index(i pulumi.IntInput) PrivateEndpointConnectionResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) PrivateEndpointConnectionResponse {
		return vs[0].([]PrivateEndpointConnectionResponse)[vs[1].(int)]
	}).(PrivateEndpointConnectionResponseOutput)
}

// The private endpoint of the private endpoint connection.
type PrivateEndpointResponse struct {
	Id string `pulumi:"id"`
}

// PrivateEndpointResponseInput is an input type that accepts PrivateEndpointResponseArgs and PrivateEndpointResponseOutput values.
// You can construct a concrete instance of `PrivateEndpointResponseInput` via:
//
//          PrivateEndpointResponseArgs{...}
type PrivateEndpointResponseInput interface {
	pulumi.Input

	ToPrivateEndpointResponseOutput() PrivateEndpointResponseOutput
	ToPrivateEndpointResponseOutputWithContext(context.Context) PrivateEndpointResponseOutput
}

// The private endpoint of the private endpoint connection.
type PrivateEndpointResponseArgs struct {
	Id pulumi.StringInput `pulumi:"id"`
}

func (PrivateEndpointResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PrivateEndpointResponse)(nil)).Elem()
}

func (i PrivateEndpointResponseArgs) ToPrivateEndpointResponseOutput() PrivateEndpointResponseOutput {
	return i.ToPrivateEndpointResponseOutputWithContext(context.Background())
}

func (i PrivateEndpointResponseArgs) ToPrivateEndpointResponseOutputWithContext(ctx context.Context) PrivateEndpointResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PrivateEndpointResponseOutput)
}

func (i PrivateEndpointResponseArgs) ToPrivateEndpointResponsePtrOutput() PrivateEndpointResponsePtrOutput {
	return i.ToPrivateEndpointResponsePtrOutputWithContext(context.Background())
}

func (i PrivateEndpointResponseArgs) ToPrivateEndpointResponsePtrOutputWithContext(ctx context.Context) PrivateEndpointResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PrivateEndpointResponseOutput).ToPrivateEndpointResponsePtrOutputWithContext(ctx)
}

// PrivateEndpointResponsePtrInput is an input type that accepts PrivateEndpointResponseArgs, PrivateEndpointResponsePtr and PrivateEndpointResponsePtrOutput values.
// You can construct a concrete instance of `PrivateEndpointResponsePtrInput` via:
//
//          PrivateEndpointResponseArgs{...}
//
//  or:
//
//          nil
type PrivateEndpointResponsePtrInput interface {
	pulumi.Input

	ToPrivateEndpointResponsePtrOutput() PrivateEndpointResponsePtrOutput
	ToPrivateEndpointResponsePtrOutputWithContext(context.Context) PrivateEndpointResponsePtrOutput
}

type privateEndpointResponsePtrType PrivateEndpointResponseArgs

func PrivateEndpointResponsePtr(v *PrivateEndpointResponseArgs) PrivateEndpointResponsePtrInput {
	return (*privateEndpointResponsePtrType)(v)
}

func (*privateEndpointResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PrivateEndpointResponse)(nil)).Elem()
}

func (i *privateEndpointResponsePtrType) ToPrivateEndpointResponsePtrOutput() PrivateEndpointResponsePtrOutput {
	return i.ToPrivateEndpointResponsePtrOutputWithContext(context.Background())
}

func (i *privateEndpointResponsePtrType) ToPrivateEndpointResponsePtrOutputWithContext(ctx context.Context) PrivateEndpointResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PrivateEndpointResponsePtrOutput)
}

// The private endpoint of the private endpoint connection.
type PrivateEndpointResponseOutput struct{ *pulumi.OutputState }

func (PrivateEndpointResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PrivateEndpointResponse)(nil)).Elem()
}

func (o PrivateEndpointResponseOutput) ToPrivateEndpointResponseOutput() PrivateEndpointResponseOutput {
	return o
}

func (o PrivateEndpointResponseOutput) ToPrivateEndpointResponseOutputWithContext(ctx context.Context) PrivateEndpointResponseOutput {
	return o
}

func (o PrivateEndpointResponseOutput) ToPrivateEndpointResponsePtrOutput() PrivateEndpointResponsePtrOutput {
	return o.ToPrivateEndpointResponsePtrOutputWithContext(context.Background())
}

func (o PrivateEndpointResponseOutput) ToPrivateEndpointResponsePtrOutputWithContext(ctx context.Context) PrivateEndpointResponsePtrOutput {
	return o.ApplyT(func(v PrivateEndpointResponse) *PrivateEndpointResponse {
		return &v
	}).(PrivateEndpointResponsePtrOutput)
}
func (o PrivateEndpointResponseOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v PrivateEndpointResponse) string { return v.Id }).(pulumi.StringOutput)
}

type PrivateEndpointResponsePtrOutput struct{ *pulumi.OutputState }

func (PrivateEndpointResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PrivateEndpointResponse)(nil)).Elem()
}

func (o PrivateEndpointResponsePtrOutput) ToPrivateEndpointResponsePtrOutput() PrivateEndpointResponsePtrOutput {
	return o
}

func (o PrivateEndpointResponsePtrOutput) ToPrivateEndpointResponsePtrOutputWithContext(ctx context.Context) PrivateEndpointResponsePtrOutput {
	return o
}

func (o PrivateEndpointResponsePtrOutput) Elem() PrivateEndpointResponseOutput {
	return o.ApplyT(func(v *PrivateEndpointResponse) PrivateEndpointResponse { return *v }).(PrivateEndpointResponseOutput)
}

func (o PrivateEndpointResponsePtrOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PrivateEndpointResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Id
	}).(pulumi.StringPtrOutput)
}

// The private link service connection state of the private endpoint connection
type PrivateLinkServiceConnectionStateResponse struct {
	ActionRequired string  `pulumi:"actionRequired"`
	Description    *string `pulumi:"description"`
	Status         string  `pulumi:"status"`
}

// PrivateLinkServiceConnectionStateResponseInput is an input type that accepts PrivateLinkServiceConnectionStateResponseArgs and PrivateLinkServiceConnectionStateResponseOutput values.
// You can construct a concrete instance of `PrivateLinkServiceConnectionStateResponseInput` via:
//
//          PrivateLinkServiceConnectionStateResponseArgs{...}
type PrivateLinkServiceConnectionStateResponseInput interface {
	pulumi.Input

	ToPrivateLinkServiceConnectionStateResponseOutput() PrivateLinkServiceConnectionStateResponseOutput
	ToPrivateLinkServiceConnectionStateResponseOutputWithContext(context.Context) PrivateLinkServiceConnectionStateResponseOutput
}

// The private link service connection state of the private endpoint connection
type PrivateLinkServiceConnectionStateResponseArgs struct {
	ActionRequired pulumi.StringInput    `pulumi:"actionRequired"`
	Description    pulumi.StringPtrInput `pulumi:"description"`
	Status         pulumi.StringInput    `pulumi:"status"`
}

func (PrivateLinkServiceConnectionStateResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PrivateLinkServiceConnectionStateResponse)(nil)).Elem()
}

func (i PrivateLinkServiceConnectionStateResponseArgs) ToPrivateLinkServiceConnectionStateResponseOutput() PrivateLinkServiceConnectionStateResponseOutput {
	return i.ToPrivateLinkServiceConnectionStateResponseOutputWithContext(context.Background())
}

func (i PrivateLinkServiceConnectionStateResponseArgs) ToPrivateLinkServiceConnectionStateResponseOutputWithContext(ctx context.Context) PrivateLinkServiceConnectionStateResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PrivateLinkServiceConnectionStateResponseOutput)
}

func (i PrivateLinkServiceConnectionStateResponseArgs) ToPrivateLinkServiceConnectionStateResponsePtrOutput() PrivateLinkServiceConnectionStateResponsePtrOutput {
	return i.ToPrivateLinkServiceConnectionStateResponsePtrOutputWithContext(context.Background())
}

func (i PrivateLinkServiceConnectionStateResponseArgs) ToPrivateLinkServiceConnectionStateResponsePtrOutputWithContext(ctx context.Context) PrivateLinkServiceConnectionStateResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PrivateLinkServiceConnectionStateResponseOutput).ToPrivateLinkServiceConnectionStateResponsePtrOutputWithContext(ctx)
}

// PrivateLinkServiceConnectionStateResponsePtrInput is an input type that accepts PrivateLinkServiceConnectionStateResponseArgs, PrivateLinkServiceConnectionStateResponsePtr and PrivateLinkServiceConnectionStateResponsePtrOutput values.
// You can construct a concrete instance of `PrivateLinkServiceConnectionStateResponsePtrInput` via:
//
//          PrivateLinkServiceConnectionStateResponseArgs{...}
//
//  or:
//
//          nil
type PrivateLinkServiceConnectionStateResponsePtrInput interface {
	pulumi.Input

	ToPrivateLinkServiceConnectionStateResponsePtrOutput() PrivateLinkServiceConnectionStateResponsePtrOutput
	ToPrivateLinkServiceConnectionStateResponsePtrOutputWithContext(context.Context) PrivateLinkServiceConnectionStateResponsePtrOutput
}

type privateLinkServiceConnectionStateResponsePtrType PrivateLinkServiceConnectionStateResponseArgs

func PrivateLinkServiceConnectionStateResponsePtr(v *PrivateLinkServiceConnectionStateResponseArgs) PrivateLinkServiceConnectionStateResponsePtrInput {
	return (*privateLinkServiceConnectionStateResponsePtrType)(v)
}

func (*privateLinkServiceConnectionStateResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PrivateLinkServiceConnectionStateResponse)(nil)).Elem()
}

func (i *privateLinkServiceConnectionStateResponsePtrType) ToPrivateLinkServiceConnectionStateResponsePtrOutput() PrivateLinkServiceConnectionStateResponsePtrOutput {
	return i.ToPrivateLinkServiceConnectionStateResponsePtrOutputWithContext(context.Background())
}

func (i *privateLinkServiceConnectionStateResponsePtrType) ToPrivateLinkServiceConnectionStateResponsePtrOutputWithContext(ctx context.Context) PrivateLinkServiceConnectionStateResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PrivateLinkServiceConnectionStateResponsePtrOutput)
}

// The private link service connection state of the private endpoint connection
type PrivateLinkServiceConnectionStateResponseOutput struct{ *pulumi.OutputState }

func (PrivateLinkServiceConnectionStateResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PrivateLinkServiceConnectionStateResponse)(nil)).Elem()
}

func (o PrivateLinkServiceConnectionStateResponseOutput) ToPrivateLinkServiceConnectionStateResponseOutput() PrivateLinkServiceConnectionStateResponseOutput {
	return o
}

func (o PrivateLinkServiceConnectionStateResponseOutput) ToPrivateLinkServiceConnectionStateResponseOutputWithContext(ctx context.Context) PrivateLinkServiceConnectionStateResponseOutput {
	return o
}

func (o PrivateLinkServiceConnectionStateResponseOutput) ToPrivateLinkServiceConnectionStateResponsePtrOutput() PrivateLinkServiceConnectionStateResponsePtrOutput {
	return o.ToPrivateLinkServiceConnectionStateResponsePtrOutputWithContext(context.Background())
}

func (o PrivateLinkServiceConnectionStateResponseOutput) ToPrivateLinkServiceConnectionStateResponsePtrOutputWithContext(ctx context.Context) PrivateLinkServiceConnectionStateResponsePtrOutput {
	return o.ApplyT(func(v PrivateLinkServiceConnectionStateResponse) *PrivateLinkServiceConnectionStateResponse {
		return &v
	}).(PrivateLinkServiceConnectionStateResponsePtrOutput)
}
func (o PrivateLinkServiceConnectionStateResponseOutput) ActionRequired() pulumi.StringOutput {
	return o.ApplyT(func(v PrivateLinkServiceConnectionStateResponse) string { return v.ActionRequired }).(pulumi.StringOutput)
}

func (o PrivateLinkServiceConnectionStateResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PrivateLinkServiceConnectionStateResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

func (o PrivateLinkServiceConnectionStateResponseOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v PrivateLinkServiceConnectionStateResponse) string { return v.Status }).(pulumi.StringOutput)
}

type PrivateLinkServiceConnectionStateResponsePtrOutput struct{ *pulumi.OutputState }

func (PrivateLinkServiceConnectionStateResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PrivateLinkServiceConnectionStateResponse)(nil)).Elem()
}

func (o PrivateLinkServiceConnectionStateResponsePtrOutput) ToPrivateLinkServiceConnectionStateResponsePtrOutput() PrivateLinkServiceConnectionStateResponsePtrOutput {
	return o
}

func (o PrivateLinkServiceConnectionStateResponsePtrOutput) ToPrivateLinkServiceConnectionStateResponsePtrOutputWithContext(ctx context.Context) PrivateLinkServiceConnectionStateResponsePtrOutput {
	return o
}

func (o PrivateLinkServiceConnectionStateResponsePtrOutput) Elem() PrivateLinkServiceConnectionStateResponseOutput {
	return o.ApplyT(func(v *PrivateLinkServiceConnectionStateResponse) PrivateLinkServiceConnectionStateResponse {
		return *v
	}).(PrivateLinkServiceConnectionStateResponseOutput)
}

func (o PrivateLinkServiceConnectionStateResponsePtrOutput) ActionRequired() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PrivateLinkServiceConnectionStateResponse) *string {
		if v == nil {
			return nil
		}
		return &v.ActionRequired
	}).(pulumi.StringPtrOutput)
}

func (o PrivateLinkServiceConnectionStateResponsePtrOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PrivateLinkServiceConnectionStateResponse) *string {
		if v == nil {
			return nil
		}
		return v.Description
	}).(pulumi.StringPtrOutput)
}

func (o PrivateLinkServiceConnectionStateResponsePtrOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PrivateLinkServiceConnectionStateResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Status
	}).(pulumi.StringPtrOutput)
}

// The public IP Address configuration of the networking configuration of a Pool.
type PublicIPAddressConfiguration struct {
	// The number of IPs specified here limits the maximum size of the Pool - 100 dedicated nodes or 100 low-priority nodes can be allocated for each public IP. For example, a pool needing 250 dedicated VMs would need at least 3 public IPs specified. Each element of this collection is of the form: /subscriptions/{subscription}/resourceGroups/{group}/providers/Microsoft.Network/publicIPAddresses/{ip}.
	IpAddressIds []string `pulumi:"ipAddressIds"`
	// The default value is BatchManaged
	Provision *string `pulumi:"provision"`
}

// PublicIPAddressConfigurationInput is an input type that accepts PublicIPAddressConfigurationArgs and PublicIPAddressConfigurationOutput values.
// You can construct a concrete instance of `PublicIPAddressConfigurationInput` via:
//
//          PublicIPAddressConfigurationArgs{...}
type PublicIPAddressConfigurationInput interface {
	pulumi.Input

	ToPublicIPAddressConfigurationOutput() PublicIPAddressConfigurationOutput
	ToPublicIPAddressConfigurationOutputWithContext(context.Context) PublicIPAddressConfigurationOutput
}

// The public IP Address configuration of the networking configuration of a Pool.
type PublicIPAddressConfigurationArgs struct {
	// The number of IPs specified here limits the maximum size of the Pool - 100 dedicated nodes or 100 low-priority nodes can be allocated for each public IP. For example, a pool needing 250 dedicated VMs would need at least 3 public IPs specified. Each element of this collection is of the form: /subscriptions/{subscription}/resourceGroups/{group}/providers/Microsoft.Network/publicIPAddresses/{ip}.
	IpAddressIds pulumi.StringArrayInput `pulumi:"ipAddressIds"`
	// The default value is BatchManaged
	Provision pulumi.StringPtrInput `pulumi:"provision"`
}

func (PublicIPAddressConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PublicIPAddressConfiguration)(nil)).Elem()
}

func (i PublicIPAddressConfigurationArgs) ToPublicIPAddressConfigurationOutput() PublicIPAddressConfigurationOutput {
	return i.ToPublicIPAddressConfigurationOutputWithContext(context.Background())
}

func (i PublicIPAddressConfigurationArgs) ToPublicIPAddressConfigurationOutputWithContext(ctx context.Context) PublicIPAddressConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PublicIPAddressConfigurationOutput)
}

func (i PublicIPAddressConfigurationArgs) ToPublicIPAddressConfigurationPtrOutput() PublicIPAddressConfigurationPtrOutput {
	return i.ToPublicIPAddressConfigurationPtrOutputWithContext(context.Background())
}

func (i PublicIPAddressConfigurationArgs) ToPublicIPAddressConfigurationPtrOutputWithContext(ctx context.Context) PublicIPAddressConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PublicIPAddressConfigurationOutput).ToPublicIPAddressConfigurationPtrOutputWithContext(ctx)
}

// PublicIPAddressConfigurationPtrInput is an input type that accepts PublicIPAddressConfigurationArgs, PublicIPAddressConfigurationPtr and PublicIPAddressConfigurationPtrOutput values.
// You can construct a concrete instance of `PublicIPAddressConfigurationPtrInput` via:
//
//          PublicIPAddressConfigurationArgs{...}
//
//  or:
//
//          nil
type PublicIPAddressConfigurationPtrInput interface {
	pulumi.Input

	ToPublicIPAddressConfigurationPtrOutput() PublicIPAddressConfigurationPtrOutput
	ToPublicIPAddressConfigurationPtrOutputWithContext(context.Context) PublicIPAddressConfigurationPtrOutput
}

type publicIPAddressConfigurationPtrType PublicIPAddressConfigurationArgs

func PublicIPAddressConfigurationPtr(v *PublicIPAddressConfigurationArgs) PublicIPAddressConfigurationPtrInput {
	return (*publicIPAddressConfigurationPtrType)(v)
}

func (*publicIPAddressConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PublicIPAddressConfiguration)(nil)).Elem()
}

func (i *publicIPAddressConfigurationPtrType) ToPublicIPAddressConfigurationPtrOutput() PublicIPAddressConfigurationPtrOutput {
	return i.ToPublicIPAddressConfigurationPtrOutputWithContext(context.Background())
}

func (i *publicIPAddressConfigurationPtrType) ToPublicIPAddressConfigurationPtrOutputWithContext(ctx context.Context) PublicIPAddressConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PublicIPAddressConfigurationPtrOutput)
}

// The public IP Address configuration of the networking configuration of a Pool.
type PublicIPAddressConfigurationOutput struct{ *pulumi.OutputState }

func (PublicIPAddressConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PublicIPAddressConfiguration)(nil)).Elem()
}

func (o PublicIPAddressConfigurationOutput) ToPublicIPAddressConfigurationOutput() PublicIPAddressConfigurationOutput {
	return o
}

func (o PublicIPAddressConfigurationOutput) ToPublicIPAddressConfigurationOutputWithContext(ctx context.Context) PublicIPAddressConfigurationOutput {
	return o
}

func (o PublicIPAddressConfigurationOutput) ToPublicIPAddressConfigurationPtrOutput() PublicIPAddressConfigurationPtrOutput {
	return o.ToPublicIPAddressConfigurationPtrOutputWithContext(context.Background())
}

func (o PublicIPAddressConfigurationOutput) ToPublicIPAddressConfigurationPtrOutputWithContext(ctx context.Context) PublicIPAddressConfigurationPtrOutput {
	return o.ApplyT(func(v PublicIPAddressConfiguration) *PublicIPAddressConfiguration {
		return &v
	}).(PublicIPAddressConfigurationPtrOutput)
}

// The number of IPs specified here limits the maximum size of the Pool - 100 dedicated nodes or 100 low-priority nodes can be allocated for each public IP. For example, a pool needing 250 dedicated VMs would need at least 3 public IPs specified. Each element of this collection is of the form: /subscriptions/{subscription}/resourceGroups/{group}/providers/Microsoft.Network/publicIPAddresses/{ip}.
func (o PublicIPAddressConfigurationOutput) IpAddressIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v PublicIPAddressConfiguration) []string { return v.IpAddressIds }).(pulumi.StringArrayOutput)
}

// The default value is BatchManaged
func (o PublicIPAddressConfigurationOutput) Provision() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PublicIPAddressConfiguration) *string { return v.Provision }).(pulumi.StringPtrOutput)
}

type PublicIPAddressConfigurationPtrOutput struct{ *pulumi.OutputState }

func (PublicIPAddressConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PublicIPAddressConfiguration)(nil)).Elem()
}

func (o PublicIPAddressConfigurationPtrOutput) ToPublicIPAddressConfigurationPtrOutput() PublicIPAddressConfigurationPtrOutput {
	return o
}

func (o PublicIPAddressConfigurationPtrOutput) ToPublicIPAddressConfigurationPtrOutputWithContext(ctx context.Context) PublicIPAddressConfigurationPtrOutput {
	return o
}

func (o PublicIPAddressConfigurationPtrOutput) Elem() PublicIPAddressConfigurationOutput {
	return o.ApplyT(func(v *PublicIPAddressConfiguration) PublicIPAddressConfiguration { return *v }).(PublicIPAddressConfigurationOutput)
}

// The number of IPs specified here limits the maximum size of the Pool - 100 dedicated nodes or 100 low-priority nodes can be allocated for each public IP. For example, a pool needing 250 dedicated VMs would need at least 3 public IPs specified. Each element of this collection is of the form: /subscriptions/{subscription}/resourceGroups/{group}/providers/Microsoft.Network/publicIPAddresses/{ip}.
func (o PublicIPAddressConfigurationPtrOutput) IpAddressIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *PublicIPAddressConfiguration) []string {
		if v == nil {
			return nil
		}
		return v.IpAddressIds
	}).(pulumi.StringArrayOutput)
}

// The default value is BatchManaged
func (o PublicIPAddressConfigurationPtrOutput) Provision() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PublicIPAddressConfiguration) *string {
		if v == nil {
			return nil
		}
		return v.Provision
	}).(pulumi.StringPtrOutput)
}

// The public IP Address configuration of the networking configuration of a Pool.
type PublicIPAddressConfigurationResponse struct {
	// The number of IPs specified here limits the maximum size of the Pool - 100 dedicated nodes or 100 low-priority nodes can be allocated for each public IP. For example, a pool needing 250 dedicated VMs would need at least 3 public IPs specified. Each element of this collection is of the form: /subscriptions/{subscription}/resourceGroups/{group}/providers/Microsoft.Network/publicIPAddresses/{ip}.
	IpAddressIds []string `pulumi:"ipAddressIds"`
	// The default value is BatchManaged
	Provision *string `pulumi:"provision"`
}

// PublicIPAddressConfigurationResponseInput is an input type that accepts PublicIPAddressConfigurationResponseArgs and PublicIPAddressConfigurationResponseOutput values.
// You can construct a concrete instance of `PublicIPAddressConfigurationResponseInput` via:
//
//          PublicIPAddressConfigurationResponseArgs{...}
type PublicIPAddressConfigurationResponseInput interface {
	pulumi.Input

	ToPublicIPAddressConfigurationResponseOutput() PublicIPAddressConfigurationResponseOutput
	ToPublicIPAddressConfigurationResponseOutputWithContext(context.Context) PublicIPAddressConfigurationResponseOutput
}

// The public IP Address configuration of the networking configuration of a Pool.
type PublicIPAddressConfigurationResponseArgs struct {
	// The number of IPs specified here limits the maximum size of the Pool - 100 dedicated nodes or 100 low-priority nodes can be allocated for each public IP. For example, a pool needing 250 dedicated VMs would need at least 3 public IPs specified. Each element of this collection is of the form: /subscriptions/{subscription}/resourceGroups/{group}/providers/Microsoft.Network/publicIPAddresses/{ip}.
	IpAddressIds pulumi.StringArrayInput `pulumi:"ipAddressIds"`
	// The default value is BatchManaged
	Provision pulumi.StringPtrInput `pulumi:"provision"`
}

func (PublicIPAddressConfigurationResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PublicIPAddressConfigurationResponse)(nil)).Elem()
}

func (i PublicIPAddressConfigurationResponseArgs) ToPublicIPAddressConfigurationResponseOutput() PublicIPAddressConfigurationResponseOutput {
	return i.ToPublicIPAddressConfigurationResponseOutputWithContext(context.Background())
}

func (i PublicIPAddressConfigurationResponseArgs) ToPublicIPAddressConfigurationResponseOutputWithContext(ctx context.Context) PublicIPAddressConfigurationResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PublicIPAddressConfigurationResponseOutput)
}

func (i PublicIPAddressConfigurationResponseArgs) ToPublicIPAddressConfigurationResponsePtrOutput() PublicIPAddressConfigurationResponsePtrOutput {
	return i.ToPublicIPAddressConfigurationResponsePtrOutputWithContext(context.Background())
}

func (i PublicIPAddressConfigurationResponseArgs) ToPublicIPAddressConfigurationResponsePtrOutputWithContext(ctx context.Context) PublicIPAddressConfigurationResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PublicIPAddressConfigurationResponseOutput).ToPublicIPAddressConfigurationResponsePtrOutputWithContext(ctx)
}

// PublicIPAddressConfigurationResponsePtrInput is an input type that accepts PublicIPAddressConfigurationResponseArgs, PublicIPAddressConfigurationResponsePtr and PublicIPAddressConfigurationResponsePtrOutput values.
// You can construct a concrete instance of `PublicIPAddressConfigurationResponsePtrInput` via:
//
//          PublicIPAddressConfigurationResponseArgs{...}
//
//  or:
//
//          nil
type PublicIPAddressConfigurationResponsePtrInput interface {
	pulumi.Input

	ToPublicIPAddressConfigurationResponsePtrOutput() PublicIPAddressConfigurationResponsePtrOutput
	ToPublicIPAddressConfigurationResponsePtrOutputWithContext(context.Context) PublicIPAddressConfigurationResponsePtrOutput
}

type publicIPAddressConfigurationResponsePtrType PublicIPAddressConfigurationResponseArgs

func PublicIPAddressConfigurationResponsePtr(v *PublicIPAddressConfigurationResponseArgs) PublicIPAddressConfigurationResponsePtrInput {
	return (*publicIPAddressConfigurationResponsePtrType)(v)
}

func (*publicIPAddressConfigurationResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PublicIPAddressConfigurationResponse)(nil)).Elem()
}

func (i *publicIPAddressConfigurationResponsePtrType) ToPublicIPAddressConfigurationResponsePtrOutput() PublicIPAddressConfigurationResponsePtrOutput {
	return i.ToPublicIPAddressConfigurationResponsePtrOutputWithContext(context.Background())
}

func (i *publicIPAddressConfigurationResponsePtrType) ToPublicIPAddressConfigurationResponsePtrOutputWithContext(ctx context.Context) PublicIPAddressConfigurationResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PublicIPAddressConfigurationResponsePtrOutput)
}

// The public IP Address configuration of the networking configuration of a Pool.
type PublicIPAddressConfigurationResponseOutput struct{ *pulumi.OutputState }

func (PublicIPAddressConfigurationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PublicIPAddressConfigurationResponse)(nil)).Elem()
}

func (o PublicIPAddressConfigurationResponseOutput) ToPublicIPAddressConfigurationResponseOutput() PublicIPAddressConfigurationResponseOutput {
	return o
}

func (o PublicIPAddressConfigurationResponseOutput) ToPublicIPAddressConfigurationResponseOutputWithContext(ctx context.Context) PublicIPAddressConfigurationResponseOutput {
	return o
}

func (o PublicIPAddressConfigurationResponseOutput) ToPublicIPAddressConfigurationResponsePtrOutput() PublicIPAddressConfigurationResponsePtrOutput {
	return o.ToPublicIPAddressConfigurationResponsePtrOutputWithContext(context.Background())
}

func (o PublicIPAddressConfigurationResponseOutput) ToPublicIPAddressConfigurationResponsePtrOutputWithContext(ctx context.Context) PublicIPAddressConfigurationResponsePtrOutput {
	return o.ApplyT(func(v PublicIPAddressConfigurationResponse) *PublicIPAddressConfigurationResponse {
		return &v
	}).(PublicIPAddressConfigurationResponsePtrOutput)
}

// The number of IPs specified here limits the maximum size of the Pool - 100 dedicated nodes or 100 low-priority nodes can be allocated for each public IP. For example, a pool needing 250 dedicated VMs would need at least 3 public IPs specified. Each element of this collection is of the form: /subscriptions/{subscription}/resourceGroups/{group}/providers/Microsoft.Network/publicIPAddresses/{ip}.
func (o PublicIPAddressConfigurationResponseOutput) IpAddressIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v PublicIPAddressConfigurationResponse) []string { return v.IpAddressIds }).(pulumi.StringArrayOutput)
}

// The default value is BatchManaged
func (o PublicIPAddressConfigurationResponseOutput) Provision() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PublicIPAddressConfigurationResponse) *string { return v.Provision }).(pulumi.StringPtrOutput)
}

type PublicIPAddressConfigurationResponsePtrOutput struct{ *pulumi.OutputState }

func (PublicIPAddressConfigurationResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PublicIPAddressConfigurationResponse)(nil)).Elem()
}

func (o PublicIPAddressConfigurationResponsePtrOutput) ToPublicIPAddressConfigurationResponsePtrOutput() PublicIPAddressConfigurationResponsePtrOutput {
	return o
}

func (o PublicIPAddressConfigurationResponsePtrOutput) ToPublicIPAddressConfigurationResponsePtrOutputWithContext(ctx context.Context) PublicIPAddressConfigurationResponsePtrOutput {
	return o
}

func (o PublicIPAddressConfigurationResponsePtrOutput) Elem() PublicIPAddressConfigurationResponseOutput {
	return o.ApplyT(func(v *PublicIPAddressConfigurationResponse) PublicIPAddressConfigurationResponse { return *v }).(PublicIPAddressConfigurationResponseOutput)
}

// The number of IPs specified here limits the maximum size of the Pool - 100 dedicated nodes or 100 low-priority nodes can be allocated for each public IP. For example, a pool needing 250 dedicated VMs would need at least 3 public IPs specified. Each element of this collection is of the form: /subscriptions/{subscription}/resourceGroups/{group}/providers/Microsoft.Network/publicIPAddresses/{ip}.
func (o PublicIPAddressConfigurationResponsePtrOutput) IpAddressIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *PublicIPAddressConfigurationResponse) []string {
		if v == nil {
			return nil
		}
		return v.IpAddressIds
	}).(pulumi.StringArrayOutput)
}

// The default value is BatchManaged
func (o PublicIPAddressConfigurationResponsePtrOutput) Provision() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PublicIPAddressConfigurationResponse) *string {
		if v == nil {
			return nil
		}
		return v.Provision
	}).(pulumi.StringPtrOutput)
}

type ResizeErrorResponse struct {
	// An identifier for the error. Codes are invariant and are intended to be consumed programmatically.
	Code    string                `pulumi:"code"`
	Details []ResizeErrorResponse `pulumi:"details"`
	// A message describing the error, intended to be suitable for display in a user interface.
	Message string `pulumi:"message"`
}

// ResizeErrorResponseInput is an input type that accepts ResizeErrorResponseArgs and ResizeErrorResponseOutput values.
// You can construct a concrete instance of `ResizeErrorResponseInput` via:
//
//          ResizeErrorResponseArgs{...}
type ResizeErrorResponseInput interface {
	pulumi.Input

	ToResizeErrorResponseOutput() ResizeErrorResponseOutput
	ToResizeErrorResponseOutputWithContext(context.Context) ResizeErrorResponseOutput
}

type ResizeErrorResponseArgs struct {
	// An identifier for the error. Codes are invariant and are intended to be consumed programmatically.
	Code    pulumi.StringInput            `pulumi:"code"`
	Details ResizeErrorResponseArrayInput `pulumi:"details"`
	// A message describing the error, intended to be suitable for display in a user interface.
	Message pulumi.StringInput `pulumi:"message"`
}

func (ResizeErrorResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ResizeErrorResponse)(nil)).Elem()
}

func (i ResizeErrorResponseArgs) ToResizeErrorResponseOutput() ResizeErrorResponseOutput {
	return i.ToResizeErrorResponseOutputWithContext(context.Background())
}

func (i ResizeErrorResponseArgs) ToResizeErrorResponseOutputWithContext(ctx context.Context) ResizeErrorResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResizeErrorResponseOutput)
}

// ResizeErrorResponseArrayInput is an input type that accepts ResizeErrorResponseArray and ResizeErrorResponseArrayOutput values.
// You can construct a concrete instance of `ResizeErrorResponseArrayInput` via:
//
//          ResizeErrorResponseArray{ ResizeErrorResponseArgs{...} }
type ResizeErrorResponseArrayInput interface {
	pulumi.Input

	ToResizeErrorResponseArrayOutput() ResizeErrorResponseArrayOutput
	ToResizeErrorResponseArrayOutputWithContext(context.Context) ResizeErrorResponseArrayOutput
}

type ResizeErrorResponseArray []ResizeErrorResponseInput

func (ResizeErrorResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ResizeErrorResponse)(nil)).Elem()
}

func (i ResizeErrorResponseArray) ToResizeErrorResponseArrayOutput() ResizeErrorResponseArrayOutput {
	return i.ToResizeErrorResponseArrayOutputWithContext(context.Background())
}

func (i ResizeErrorResponseArray) ToResizeErrorResponseArrayOutputWithContext(ctx context.Context) ResizeErrorResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResizeErrorResponseArrayOutput)
}

type ResizeErrorResponseOutput struct{ *pulumi.OutputState }

func (ResizeErrorResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ResizeErrorResponse)(nil)).Elem()
}

func (o ResizeErrorResponseOutput) ToResizeErrorResponseOutput() ResizeErrorResponseOutput {
	return o
}

func (o ResizeErrorResponseOutput) ToResizeErrorResponseOutputWithContext(ctx context.Context) ResizeErrorResponseOutput {
	return o
}

// An identifier for the error. Codes are invariant and are intended to be consumed programmatically.
func (o ResizeErrorResponseOutput) Code() pulumi.StringOutput {
	return o.ApplyT(func(v ResizeErrorResponse) string { return v.Code }).(pulumi.StringOutput)
}

func (o ResizeErrorResponseOutput) Details() ResizeErrorResponseArrayOutput {
	return o.ApplyT(func(v ResizeErrorResponse) []ResizeErrorResponse { return v.Details }).(ResizeErrorResponseArrayOutput)
}

// A message describing the error, intended to be suitable for display in a user interface.
func (o ResizeErrorResponseOutput) Message() pulumi.StringOutput {
	return o.ApplyT(func(v ResizeErrorResponse) string { return v.Message }).(pulumi.StringOutput)
}

type ResizeErrorResponseArrayOutput struct{ *pulumi.OutputState }

func (ResizeErrorResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ResizeErrorResponse)(nil)).Elem()
}

func (o ResizeErrorResponseArrayOutput) ToResizeErrorResponseArrayOutput() ResizeErrorResponseArrayOutput {
	return o
}

func (o ResizeErrorResponseArrayOutput) ToResizeErrorResponseArrayOutputWithContext(ctx context.Context) ResizeErrorResponseArrayOutput {
	return o
}

func (o ResizeErrorResponseArrayOutput) Index(i pulumi.IntInput) ResizeErrorResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ResizeErrorResponse {
		return vs[0].([]ResizeErrorResponse)[vs[1].(int)]
	}).(ResizeErrorResponseOutput)
}

// Describes either the current operation (if the pool AllocationState is Resizing) or the previously completed operation (if the AllocationState is Steady).
type ResizeOperationStatusResponse struct {
	// This property is set only if an error occurred during the last pool resize, and only when the pool allocationState is Steady.
	Errors []ResizeErrorResponse `pulumi:"errors"`
	// The default value is requeue.
	NodeDeallocationOption *string `pulumi:"nodeDeallocationOption"`
	// The default value is 15 minutes. The minimum value is 5 minutes. If you specify a value less than 5 minutes, the Batch service returns an error; if you are calling the REST API directly, the HTTP status code is 400 (Bad Request).
	ResizeTimeout          *string `pulumi:"resizeTimeout"`
	StartTime              *string `pulumi:"startTime"`
	TargetDedicatedNodes   *int    `pulumi:"targetDedicatedNodes"`
	TargetLowPriorityNodes *int    `pulumi:"targetLowPriorityNodes"`
}

// ResizeOperationStatusResponseInput is an input type that accepts ResizeOperationStatusResponseArgs and ResizeOperationStatusResponseOutput values.
// You can construct a concrete instance of `ResizeOperationStatusResponseInput` via:
//
//          ResizeOperationStatusResponseArgs{...}
type ResizeOperationStatusResponseInput interface {
	pulumi.Input

	ToResizeOperationStatusResponseOutput() ResizeOperationStatusResponseOutput
	ToResizeOperationStatusResponseOutputWithContext(context.Context) ResizeOperationStatusResponseOutput
}

// Describes either the current operation (if the pool AllocationState is Resizing) or the previously completed operation (if the AllocationState is Steady).
type ResizeOperationStatusResponseArgs struct {
	// This property is set only if an error occurred during the last pool resize, and only when the pool allocationState is Steady.
	Errors ResizeErrorResponseArrayInput `pulumi:"errors"`
	// The default value is requeue.
	NodeDeallocationOption pulumi.StringPtrInput `pulumi:"nodeDeallocationOption"`
	// The default value is 15 minutes. The minimum value is 5 minutes. If you specify a value less than 5 minutes, the Batch service returns an error; if you are calling the REST API directly, the HTTP status code is 400 (Bad Request).
	ResizeTimeout          pulumi.StringPtrInput `pulumi:"resizeTimeout"`
	StartTime              pulumi.StringPtrInput `pulumi:"startTime"`
	TargetDedicatedNodes   pulumi.IntPtrInput    `pulumi:"targetDedicatedNodes"`
	TargetLowPriorityNodes pulumi.IntPtrInput    `pulumi:"targetLowPriorityNodes"`
}

func (ResizeOperationStatusResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ResizeOperationStatusResponse)(nil)).Elem()
}

func (i ResizeOperationStatusResponseArgs) ToResizeOperationStatusResponseOutput() ResizeOperationStatusResponseOutput {
	return i.ToResizeOperationStatusResponseOutputWithContext(context.Background())
}

func (i ResizeOperationStatusResponseArgs) ToResizeOperationStatusResponseOutputWithContext(ctx context.Context) ResizeOperationStatusResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResizeOperationStatusResponseOutput)
}

func (i ResizeOperationStatusResponseArgs) ToResizeOperationStatusResponsePtrOutput() ResizeOperationStatusResponsePtrOutput {
	return i.ToResizeOperationStatusResponsePtrOutputWithContext(context.Background())
}

func (i ResizeOperationStatusResponseArgs) ToResizeOperationStatusResponsePtrOutputWithContext(ctx context.Context) ResizeOperationStatusResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResizeOperationStatusResponseOutput).ToResizeOperationStatusResponsePtrOutputWithContext(ctx)
}

// ResizeOperationStatusResponsePtrInput is an input type that accepts ResizeOperationStatusResponseArgs, ResizeOperationStatusResponsePtr and ResizeOperationStatusResponsePtrOutput values.
// You can construct a concrete instance of `ResizeOperationStatusResponsePtrInput` via:
//
//          ResizeOperationStatusResponseArgs{...}
//
//  or:
//
//          nil
type ResizeOperationStatusResponsePtrInput interface {
	pulumi.Input

	ToResizeOperationStatusResponsePtrOutput() ResizeOperationStatusResponsePtrOutput
	ToResizeOperationStatusResponsePtrOutputWithContext(context.Context) ResizeOperationStatusResponsePtrOutput
}

type resizeOperationStatusResponsePtrType ResizeOperationStatusResponseArgs

func ResizeOperationStatusResponsePtr(v *ResizeOperationStatusResponseArgs) ResizeOperationStatusResponsePtrInput {
	return (*resizeOperationStatusResponsePtrType)(v)
}

func (*resizeOperationStatusResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ResizeOperationStatusResponse)(nil)).Elem()
}

func (i *resizeOperationStatusResponsePtrType) ToResizeOperationStatusResponsePtrOutput() ResizeOperationStatusResponsePtrOutput {
	return i.ToResizeOperationStatusResponsePtrOutputWithContext(context.Background())
}

func (i *resizeOperationStatusResponsePtrType) ToResizeOperationStatusResponsePtrOutputWithContext(ctx context.Context) ResizeOperationStatusResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResizeOperationStatusResponsePtrOutput)
}

// Describes either the current operation (if the pool AllocationState is Resizing) or the previously completed operation (if the AllocationState is Steady).
type ResizeOperationStatusResponseOutput struct{ *pulumi.OutputState }

func (ResizeOperationStatusResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ResizeOperationStatusResponse)(nil)).Elem()
}

func (o ResizeOperationStatusResponseOutput) ToResizeOperationStatusResponseOutput() ResizeOperationStatusResponseOutput {
	return o
}

func (o ResizeOperationStatusResponseOutput) ToResizeOperationStatusResponseOutputWithContext(ctx context.Context) ResizeOperationStatusResponseOutput {
	return o
}

func (o ResizeOperationStatusResponseOutput) ToResizeOperationStatusResponsePtrOutput() ResizeOperationStatusResponsePtrOutput {
	return o.ToResizeOperationStatusResponsePtrOutputWithContext(context.Background())
}

func (o ResizeOperationStatusResponseOutput) ToResizeOperationStatusResponsePtrOutputWithContext(ctx context.Context) ResizeOperationStatusResponsePtrOutput {
	return o.ApplyT(func(v ResizeOperationStatusResponse) *ResizeOperationStatusResponse {
		return &v
	}).(ResizeOperationStatusResponsePtrOutput)
}

// This property is set only if an error occurred during the last pool resize, and only when the pool allocationState is Steady.
func (o ResizeOperationStatusResponseOutput) Errors() ResizeErrorResponseArrayOutput {
	return o.ApplyT(func(v ResizeOperationStatusResponse) []ResizeErrorResponse { return v.Errors }).(ResizeErrorResponseArrayOutput)
}

// The default value is requeue.
func (o ResizeOperationStatusResponseOutput) NodeDeallocationOption() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResizeOperationStatusResponse) *string { return v.NodeDeallocationOption }).(pulumi.StringPtrOutput)
}

// The default value is 15 minutes. The minimum value is 5 minutes. If you specify a value less than 5 minutes, the Batch service returns an error; if you are calling the REST API directly, the HTTP status code is 400 (Bad Request).
func (o ResizeOperationStatusResponseOutput) ResizeTimeout() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResizeOperationStatusResponse) *string { return v.ResizeTimeout }).(pulumi.StringPtrOutput)
}

func (o ResizeOperationStatusResponseOutput) StartTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResizeOperationStatusResponse) *string { return v.StartTime }).(pulumi.StringPtrOutput)
}

func (o ResizeOperationStatusResponseOutput) TargetDedicatedNodes() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ResizeOperationStatusResponse) *int { return v.TargetDedicatedNodes }).(pulumi.IntPtrOutput)
}

func (o ResizeOperationStatusResponseOutput) TargetLowPriorityNodes() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ResizeOperationStatusResponse) *int { return v.TargetLowPriorityNodes }).(pulumi.IntPtrOutput)
}

type ResizeOperationStatusResponsePtrOutput struct{ *pulumi.OutputState }

func (ResizeOperationStatusResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ResizeOperationStatusResponse)(nil)).Elem()
}

func (o ResizeOperationStatusResponsePtrOutput) ToResizeOperationStatusResponsePtrOutput() ResizeOperationStatusResponsePtrOutput {
	return o
}

func (o ResizeOperationStatusResponsePtrOutput) ToResizeOperationStatusResponsePtrOutputWithContext(ctx context.Context) ResizeOperationStatusResponsePtrOutput {
	return o
}

func (o ResizeOperationStatusResponsePtrOutput) Elem() ResizeOperationStatusResponseOutput {
	return o.ApplyT(func(v *ResizeOperationStatusResponse) ResizeOperationStatusResponse { return *v }).(ResizeOperationStatusResponseOutput)
}

// This property is set only if an error occurred during the last pool resize, and only when the pool allocationState is Steady.
func (o ResizeOperationStatusResponsePtrOutput) Errors() ResizeErrorResponseArrayOutput {
	return o.ApplyT(func(v *ResizeOperationStatusResponse) []ResizeErrorResponse {
		if v == nil {
			return nil
		}
		return v.Errors
	}).(ResizeErrorResponseArrayOutput)
}

// The default value is requeue.
func (o ResizeOperationStatusResponsePtrOutput) NodeDeallocationOption() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResizeOperationStatusResponse) *string {
		if v == nil {
			return nil
		}
		return v.NodeDeallocationOption
	}).(pulumi.StringPtrOutput)
}

// The default value is 15 minutes. The minimum value is 5 minutes. If you specify a value less than 5 minutes, the Batch service returns an error; if you are calling the REST API directly, the HTTP status code is 400 (Bad Request).
func (o ResizeOperationStatusResponsePtrOutput) ResizeTimeout() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResizeOperationStatusResponse) *string {
		if v == nil {
			return nil
		}
		return v.ResizeTimeout
	}).(pulumi.StringPtrOutput)
}

func (o ResizeOperationStatusResponsePtrOutput) StartTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResizeOperationStatusResponse) *string {
		if v == nil {
			return nil
		}
		return v.StartTime
	}).(pulumi.StringPtrOutput)
}

func (o ResizeOperationStatusResponsePtrOutput) TargetDedicatedNodes() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ResizeOperationStatusResponse) *int {
		if v == nil {
			return nil
		}
		return v.TargetDedicatedNodes
	}).(pulumi.IntPtrOutput)
}

func (o ResizeOperationStatusResponsePtrOutput) TargetLowPriorityNodes() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ResizeOperationStatusResponse) *int {
		if v == nil {
			return nil
		}
		return v.TargetLowPriorityNodes
	}).(pulumi.IntPtrOutput)
}

type ResourceFile struct {
	// The autoStorageContainerName, storageContainerUrl and httpUrl properties are mutually exclusive and one of them must be specified.
	AutoStorageContainerName *string `pulumi:"autoStorageContainerName"`
	// The property is valid only when autoStorageContainerName or storageContainerUrl is used. This prefix can be a partial filename or a subdirectory. If a prefix is not specified, all the files in the container will be downloaded.
	BlobPrefix *string `pulumi:"blobPrefix"`
	// This property applies only to files being downloaded to Linux compute nodes. It will be ignored if it is specified for a resourceFile which will be downloaded to a Windows node. If this property is not specified for a Linux node, then a default value of 0770 is applied to the file.
	FileMode *string `pulumi:"fileMode"`
	// If the httpUrl property is specified, the filePath is required and describes the path which the file will be downloaded to, including the filename. Otherwise, if the autoStorageContainerName or storageContainerUrl property is specified, filePath is optional and is the directory to download the files to. In the case where filePath is used as a directory, any directory structure already associated with the input data will be retained in full and appended to the specified filePath directory. The specified relative path cannot break out of the task's working directory (for example by using '..').
	FilePath *string `pulumi:"filePath"`
	// The autoStorageContainerName, storageContainerUrl and httpUrl properties are mutually exclusive and one of them must be specified. If the URL is Azure Blob Storage, it must be readable using anonymous access; that is, the Batch service does not present any credentials when downloading the blob. There are two ways to get such a URL for a blob in Azure storage: include a Shared Access Signature (SAS) granting read permissions on the blob, or set the ACL for the blob or its container to allow public access.
	HttpUrl *string `pulumi:"httpUrl"`
	// The autoStorageContainerName, storageContainerUrl and httpUrl properties are mutually exclusive and one of them must be specified. This URL must be readable and listable using anonymous access; that is, the Batch service does not present any credentials when downloading the blob. There are two ways to get such a URL for a blob in Azure storage: include a Shared Access Signature (SAS) granting read and list permissions on the blob, or set the ACL for the blob or its container to allow public access.
	StorageContainerUrl *string `pulumi:"storageContainerUrl"`
}

// ResourceFileInput is an input type that accepts ResourceFileArgs and ResourceFileOutput values.
// You can construct a concrete instance of `ResourceFileInput` via:
//
//          ResourceFileArgs{...}
type ResourceFileInput interface {
	pulumi.Input

	ToResourceFileOutput() ResourceFileOutput
	ToResourceFileOutputWithContext(context.Context) ResourceFileOutput
}

type ResourceFileArgs struct {
	// The autoStorageContainerName, storageContainerUrl and httpUrl properties are mutually exclusive and one of them must be specified.
	AutoStorageContainerName pulumi.StringPtrInput `pulumi:"autoStorageContainerName"`
	// The property is valid only when autoStorageContainerName or storageContainerUrl is used. This prefix can be a partial filename or a subdirectory. If a prefix is not specified, all the files in the container will be downloaded.
	BlobPrefix pulumi.StringPtrInput `pulumi:"blobPrefix"`
	// This property applies only to files being downloaded to Linux compute nodes. It will be ignored if it is specified for a resourceFile which will be downloaded to a Windows node. If this property is not specified for a Linux node, then a default value of 0770 is applied to the file.
	FileMode pulumi.StringPtrInput `pulumi:"fileMode"`
	// If the httpUrl property is specified, the filePath is required and describes the path which the file will be downloaded to, including the filename. Otherwise, if the autoStorageContainerName or storageContainerUrl property is specified, filePath is optional and is the directory to download the files to. In the case where filePath is used as a directory, any directory structure already associated with the input data will be retained in full and appended to the specified filePath directory. The specified relative path cannot break out of the task's working directory (for example by using '..').
	FilePath pulumi.StringPtrInput `pulumi:"filePath"`
	// The autoStorageContainerName, storageContainerUrl and httpUrl properties are mutually exclusive and one of them must be specified. If the URL is Azure Blob Storage, it must be readable using anonymous access; that is, the Batch service does not present any credentials when downloading the blob. There are two ways to get such a URL for a blob in Azure storage: include a Shared Access Signature (SAS) granting read permissions on the blob, or set the ACL for the blob or its container to allow public access.
	HttpUrl pulumi.StringPtrInput `pulumi:"httpUrl"`
	// The autoStorageContainerName, storageContainerUrl and httpUrl properties are mutually exclusive and one of them must be specified. This URL must be readable and listable using anonymous access; that is, the Batch service does not present any credentials when downloading the blob. There are two ways to get such a URL for a blob in Azure storage: include a Shared Access Signature (SAS) granting read and list permissions on the blob, or set the ACL for the blob or its container to allow public access.
	StorageContainerUrl pulumi.StringPtrInput `pulumi:"storageContainerUrl"`
}

func (ResourceFileArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceFile)(nil)).Elem()
}

func (i ResourceFileArgs) ToResourceFileOutput() ResourceFileOutput {
	return i.ToResourceFileOutputWithContext(context.Background())
}

func (i ResourceFileArgs) ToResourceFileOutputWithContext(ctx context.Context) ResourceFileOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceFileOutput)
}

// ResourceFileArrayInput is an input type that accepts ResourceFileArray and ResourceFileArrayOutput values.
// You can construct a concrete instance of `ResourceFileArrayInput` via:
//
//          ResourceFileArray{ ResourceFileArgs{...} }
type ResourceFileArrayInput interface {
	pulumi.Input

	ToResourceFileArrayOutput() ResourceFileArrayOutput
	ToResourceFileArrayOutputWithContext(context.Context) ResourceFileArrayOutput
}

type ResourceFileArray []ResourceFileInput

func (ResourceFileArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ResourceFile)(nil)).Elem()
}

func (i ResourceFileArray) ToResourceFileArrayOutput() ResourceFileArrayOutput {
	return i.ToResourceFileArrayOutputWithContext(context.Background())
}

func (i ResourceFileArray) ToResourceFileArrayOutputWithContext(ctx context.Context) ResourceFileArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceFileArrayOutput)
}

type ResourceFileOutput struct{ *pulumi.OutputState }

func (ResourceFileOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceFile)(nil)).Elem()
}

func (o ResourceFileOutput) ToResourceFileOutput() ResourceFileOutput {
	return o
}

func (o ResourceFileOutput) ToResourceFileOutputWithContext(ctx context.Context) ResourceFileOutput {
	return o
}

// The autoStorageContainerName, storageContainerUrl and httpUrl properties are mutually exclusive and one of them must be specified.
func (o ResourceFileOutput) AutoStorageContainerName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceFile) *string { return v.AutoStorageContainerName }).(pulumi.StringPtrOutput)
}

// The property is valid only when autoStorageContainerName or storageContainerUrl is used. This prefix can be a partial filename or a subdirectory. If a prefix is not specified, all the files in the container will be downloaded.
func (o ResourceFileOutput) BlobPrefix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceFile) *string { return v.BlobPrefix }).(pulumi.StringPtrOutput)
}

// This property applies only to files being downloaded to Linux compute nodes. It will be ignored if it is specified for a resourceFile which will be downloaded to a Windows node. If this property is not specified for a Linux node, then a default value of 0770 is applied to the file.
func (o ResourceFileOutput) FileMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceFile) *string { return v.FileMode }).(pulumi.StringPtrOutput)
}

// If the httpUrl property is specified, the filePath is required and describes the path which the file will be downloaded to, including the filename. Otherwise, if the autoStorageContainerName or storageContainerUrl property is specified, filePath is optional and is the directory to download the files to. In the case where filePath is used as a directory, any directory structure already associated with the input data will be retained in full and appended to the specified filePath directory. The specified relative path cannot break out of the task's working directory (for example by using '..').
func (o ResourceFileOutput) FilePath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceFile) *string { return v.FilePath }).(pulumi.StringPtrOutput)
}

// The autoStorageContainerName, storageContainerUrl and httpUrl properties are mutually exclusive and one of them must be specified. If the URL is Azure Blob Storage, it must be readable using anonymous access; that is, the Batch service does not present any credentials when downloading the blob. There are two ways to get such a URL for a blob in Azure storage: include a Shared Access Signature (SAS) granting read permissions on the blob, or set the ACL for the blob or its container to allow public access.
func (o ResourceFileOutput) HttpUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceFile) *string { return v.HttpUrl }).(pulumi.StringPtrOutput)
}

// The autoStorageContainerName, storageContainerUrl and httpUrl properties are mutually exclusive and one of them must be specified. This URL must be readable and listable using anonymous access; that is, the Batch service does not present any credentials when downloading the blob. There are two ways to get such a URL for a blob in Azure storage: include a Shared Access Signature (SAS) granting read and list permissions on the blob, or set the ACL for the blob or its container to allow public access.
func (o ResourceFileOutput) StorageContainerUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceFile) *string { return v.StorageContainerUrl }).(pulumi.StringPtrOutput)
}

type ResourceFileArrayOutput struct{ *pulumi.OutputState }

func (ResourceFileArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ResourceFile)(nil)).Elem()
}

func (o ResourceFileArrayOutput) ToResourceFileArrayOutput() ResourceFileArrayOutput {
	return o
}

func (o ResourceFileArrayOutput) ToResourceFileArrayOutputWithContext(ctx context.Context) ResourceFileArrayOutput {
	return o
}

func (o ResourceFileArrayOutput) Index(i pulumi.IntInput) ResourceFileOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ResourceFile {
		return vs[0].([]ResourceFile)[vs[1].(int)]
	}).(ResourceFileOutput)
}

type ResourceFileResponse struct {
	// The autoStorageContainerName, storageContainerUrl and httpUrl properties are mutually exclusive and one of them must be specified.
	AutoStorageContainerName *string `pulumi:"autoStorageContainerName"`
	// The property is valid only when autoStorageContainerName or storageContainerUrl is used. This prefix can be a partial filename or a subdirectory. If a prefix is not specified, all the files in the container will be downloaded.
	BlobPrefix *string `pulumi:"blobPrefix"`
	// This property applies only to files being downloaded to Linux compute nodes. It will be ignored if it is specified for a resourceFile which will be downloaded to a Windows node. If this property is not specified for a Linux node, then a default value of 0770 is applied to the file.
	FileMode *string `pulumi:"fileMode"`
	// If the httpUrl property is specified, the filePath is required and describes the path which the file will be downloaded to, including the filename. Otherwise, if the autoStorageContainerName or storageContainerUrl property is specified, filePath is optional and is the directory to download the files to. In the case where filePath is used as a directory, any directory structure already associated with the input data will be retained in full and appended to the specified filePath directory. The specified relative path cannot break out of the task's working directory (for example by using '..').
	FilePath *string `pulumi:"filePath"`
	// The autoStorageContainerName, storageContainerUrl and httpUrl properties are mutually exclusive and one of them must be specified. If the URL is Azure Blob Storage, it must be readable using anonymous access; that is, the Batch service does not present any credentials when downloading the blob. There are two ways to get such a URL for a blob in Azure storage: include a Shared Access Signature (SAS) granting read permissions on the blob, or set the ACL for the blob or its container to allow public access.
	HttpUrl *string `pulumi:"httpUrl"`
	// The autoStorageContainerName, storageContainerUrl and httpUrl properties are mutually exclusive and one of them must be specified. This URL must be readable and listable using anonymous access; that is, the Batch service does not present any credentials when downloading the blob. There are two ways to get such a URL for a blob in Azure storage: include a Shared Access Signature (SAS) granting read and list permissions on the blob, or set the ACL for the blob or its container to allow public access.
	StorageContainerUrl *string `pulumi:"storageContainerUrl"`
}

// ResourceFileResponseInput is an input type that accepts ResourceFileResponseArgs and ResourceFileResponseOutput values.
// You can construct a concrete instance of `ResourceFileResponseInput` via:
//
//          ResourceFileResponseArgs{...}
type ResourceFileResponseInput interface {
	pulumi.Input

	ToResourceFileResponseOutput() ResourceFileResponseOutput
	ToResourceFileResponseOutputWithContext(context.Context) ResourceFileResponseOutput
}

type ResourceFileResponseArgs struct {
	// The autoStorageContainerName, storageContainerUrl and httpUrl properties are mutually exclusive and one of them must be specified.
	AutoStorageContainerName pulumi.StringPtrInput `pulumi:"autoStorageContainerName"`
	// The property is valid only when autoStorageContainerName or storageContainerUrl is used. This prefix can be a partial filename or a subdirectory. If a prefix is not specified, all the files in the container will be downloaded.
	BlobPrefix pulumi.StringPtrInput `pulumi:"blobPrefix"`
	// This property applies only to files being downloaded to Linux compute nodes. It will be ignored if it is specified for a resourceFile which will be downloaded to a Windows node. If this property is not specified for a Linux node, then a default value of 0770 is applied to the file.
	FileMode pulumi.StringPtrInput `pulumi:"fileMode"`
	// If the httpUrl property is specified, the filePath is required and describes the path which the file will be downloaded to, including the filename. Otherwise, if the autoStorageContainerName or storageContainerUrl property is specified, filePath is optional and is the directory to download the files to. In the case where filePath is used as a directory, any directory structure already associated with the input data will be retained in full and appended to the specified filePath directory. The specified relative path cannot break out of the task's working directory (for example by using '..').
	FilePath pulumi.StringPtrInput `pulumi:"filePath"`
	// The autoStorageContainerName, storageContainerUrl and httpUrl properties are mutually exclusive and one of them must be specified. If the URL is Azure Blob Storage, it must be readable using anonymous access; that is, the Batch service does not present any credentials when downloading the blob. There are two ways to get such a URL for a blob in Azure storage: include a Shared Access Signature (SAS) granting read permissions on the blob, or set the ACL for the blob or its container to allow public access.
	HttpUrl pulumi.StringPtrInput `pulumi:"httpUrl"`
	// The autoStorageContainerName, storageContainerUrl and httpUrl properties are mutually exclusive and one of them must be specified. This URL must be readable and listable using anonymous access; that is, the Batch service does not present any credentials when downloading the blob. There are two ways to get such a URL for a blob in Azure storage: include a Shared Access Signature (SAS) granting read and list permissions on the blob, or set the ACL for the blob or its container to allow public access.
	StorageContainerUrl pulumi.StringPtrInput `pulumi:"storageContainerUrl"`
}

func (ResourceFileResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceFileResponse)(nil)).Elem()
}

func (i ResourceFileResponseArgs) ToResourceFileResponseOutput() ResourceFileResponseOutput {
	return i.ToResourceFileResponseOutputWithContext(context.Background())
}

func (i ResourceFileResponseArgs) ToResourceFileResponseOutputWithContext(ctx context.Context) ResourceFileResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceFileResponseOutput)
}

// ResourceFileResponseArrayInput is an input type that accepts ResourceFileResponseArray and ResourceFileResponseArrayOutput values.
// You can construct a concrete instance of `ResourceFileResponseArrayInput` via:
//
//          ResourceFileResponseArray{ ResourceFileResponseArgs{...} }
type ResourceFileResponseArrayInput interface {
	pulumi.Input

	ToResourceFileResponseArrayOutput() ResourceFileResponseArrayOutput
	ToResourceFileResponseArrayOutputWithContext(context.Context) ResourceFileResponseArrayOutput
}

type ResourceFileResponseArray []ResourceFileResponseInput

func (ResourceFileResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ResourceFileResponse)(nil)).Elem()
}

func (i ResourceFileResponseArray) ToResourceFileResponseArrayOutput() ResourceFileResponseArrayOutput {
	return i.ToResourceFileResponseArrayOutputWithContext(context.Background())
}

func (i ResourceFileResponseArray) ToResourceFileResponseArrayOutputWithContext(ctx context.Context) ResourceFileResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceFileResponseArrayOutput)
}

type ResourceFileResponseOutput struct{ *pulumi.OutputState }

func (ResourceFileResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceFileResponse)(nil)).Elem()
}

func (o ResourceFileResponseOutput) ToResourceFileResponseOutput() ResourceFileResponseOutput {
	return o
}

func (o ResourceFileResponseOutput) ToResourceFileResponseOutputWithContext(ctx context.Context) ResourceFileResponseOutput {
	return o
}

// The autoStorageContainerName, storageContainerUrl and httpUrl properties are mutually exclusive and one of them must be specified.
func (o ResourceFileResponseOutput) AutoStorageContainerName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceFileResponse) *string { return v.AutoStorageContainerName }).(pulumi.StringPtrOutput)
}

// The property is valid only when autoStorageContainerName or storageContainerUrl is used. This prefix can be a partial filename or a subdirectory. If a prefix is not specified, all the files in the container will be downloaded.
func (o ResourceFileResponseOutput) BlobPrefix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceFileResponse) *string { return v.BlobPrefix }).(pulumi.StringPtrOutput)
}

// This property applies only to files being downloaded to Linux compute nodes. It will be ignored if it is specified for a resourceFile which will be downloaded to a Windows node. If this property is not specified for a Linux node, then a default value of 0770 is applied to the file.
func (o ResourceFileResponseOutput) FileMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceFileResponse) *string { return v.FileMode }).(pulumi.StringPtrOutput)
}

// If the httpUrl property is specified, the filePath is required and describes the path which the file will be downloaded to, including the filename. Otherwise, if the autoStorageContainerName or storageContainerUrl property is specified, filePath is optional and is the directory to download the files to. In the case where filePath is used as a directory, any directory structure already associated with the input data will be retained in full and appended to the specified filePath directory. The specified relative path cannot break out of the task's working directory (for example by using '..').
func (o ResourceFileResponseOutput) FilePath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceFileResponse) *string { return v.FilePath }).(pulumi.StringPtrOutput)
}

// The autoStorageContainerName, storageContainerUrl and httpUrl properties are mutually exclusive and one of them must be specified. If the URL is Azure Blob Storage, it must be readable using anonymous access; that is, the Batch service does not present any credentials when downloading the blob. There are two ways to get such a URL for a blob in Azure storage: include a Shared Access Signature (SAS) granting read permissions on the blob, or set the ACL for the blob or its container to allow public access.
func (o ResourceFileResponseOutput) HttpUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceFileResponse) *string { return v.HttpUrl }).(pulumi.StringPtrOutput)
}

// The autoStorageContainerName, storageContainerUrl and httpUrl properties are mutually exclusive and one of them must be specified. This URL must be readable and listable using anonymous access; that is, the Batch service does not present any credentials when downloading the blob. There are two ways to get such a URL for a blob in Azure storage: include a Shared Access Signature (SAS) granting read and list permissions on the blob, or set the ACL for the blob or its container to allow public access.
func (o ResourceFileResponseOutput) StorageContainerUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceFileResponse) *string { return v.StorageContainerUrl }).(pulumi.StringPtrOutput)
}

type ResourceFileResponseArrayOutput struct{ *pulumi.OutputState }

func (ResourceFileResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ResourceFileResponse)(nil)).Elem()
}

func (o ResourceFileResponseArrayOutput) ToResourceFileResponseArrayOutput() ResourceFileResponseArrayOutput {
	return o
}

func (o ResourceFileResponseArrayOutput) ToResourceFileResponseArrayOutputWithContext(ctx context.Context) ResourceFileResponseArrayOutput {
	return o
}

func (o ResourceFileResponseArrayOutput) Index(i pulumi.IntInput) ResourceFileResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ResourceFileResponse {
		return vs[0].([]ResourceFileResponse)[vs[1].(int)]
	}).(ResourceFileResponseOutput)
}

// Defines the desired size of the pool. This can either be 'fixedScale' where the requested targetDedicatedNodes is specified, or 'autoScale' which defines a formula which is periodically reevaluated. If this property is not specified, the pool will have a fixed scale with 0 targetDedicatedNodes.
type ScaleSettings struct {
	// This property and fixedScale are mutually exclusive and one of the properties must be specified.
	AutoScale *AutoScaleSettings `pulumi:"autoScale"`
	// This property and autoScale are mutually exclusive and one of the properties must be specified.
	FixedScale *FixedScaleSettings `pulumi:"fixedScale"`
}

// ScaleSettingsInput is an input type that accepts ScaleSettingsArgs and ScaleSettingsOutput values.
// You can construct a concrete instance of `ScaleSettingsInput` via:
//
//          ScaleSettingsArgs{...}
type ScaleSettingsInput interface {
	pulumi.Input

	ToScaleSettingsOutput() ScaleSettingsOutput
	ToScaleSettingsOutputWithContext(context.Context) ScaleSettingsOutput
}

// Defines the desired size of the pool. This can either be 'fixedScale' where the requested targetDedicatedNodes is specified, or 'autoScale' which defines a formula which is periodically reevaluated. If this property is not specified, the pool will have a fixed scale with 0 targetDedicatedNodes.
type ScaleSettingsArgs struct {
	// This property and fixedScale are mutually exclusive and one of the properties must be specified.
	AutoScale AutoScaleSettingsPtrInput `pulumi:"autoScale"`
	// This property and autoScale are mutually exclusive and one of the properties must be specified.
	FixedScale FixedScaleSettingsPtrInput `pulumi:"fixedScale"`
}

func (ScaleSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ScaleSettings)(nil)).Elem()
}

func (i ScaleSettingsArgs) ToScaleSettingsOutput() ScaleSettingsOutput {
	return i.ToScaleSettingsOutputWithContext(context.Background())
}

func (i ScaleSettingsArgs) ToScaleSettingsOutputWithContext(ctx context.Context) ScaleSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScaleSettingsOutput)
}

func (i ScaleSettingsArgs) ToScaleSettingsPtrOutput() ScaleSettingsPtrOutput {
	return i.ToScaleSettingsPtrOutputWithContext(context.Background())
}

func (i ScaleSettingsArgs) ToScaleSettingsPtrOutputWithContext(ctx context.Context) ScaleSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScaleSettingsOutput).ToScaleSettingsPtrOutputWithContext(ctx)
}

// ScaleSettingsPtrInput is an input type that accepts ScaleSettingsArgs, ScaleSettingsPtr and ScaleSettingsPtrOutput values.
// You can construct a concrete instance of `ScaleSettingsPtrInput` via:
//
//          ScaleSettingsArgs{...}
//
//  or:
//
//          nil
type ScaleSettingsPtrInput interface {
	pulumi.Input

	ToScaleSettingsPtrOutput() ScaleSettingsPtrOutput
	ToScaleSettingsPtrOutputWithContext(context.Context) ScaleSettingsPtrOutput
}

type scaleSettingsPtrType ScaleSettingsArgs

func ScaleSettingsPtr(v *ScaleSettingsArgs) ScaleSettingsPtrInput {
	return (*scaleSettingsPtrType)(v)
}

func (*scaleSettingsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ScaleSettings)(nil)).Elem()
}

func (i *scaleSettingsPtrType) ToScaleSettingsPtrOutput() ScaleSettingsPtrOutput {
	return i.ToScaleSettingsPtrOutputWithContext(context.Background())
}

func (i *scaleSettingsPtrType) ToScaleSettingsPtrOutputWithContext(ctx context.Context) ScaleSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScaleSettingsPtrOutput)
}

// Defines the desired size of the pool. This can either be 'fixedScale' where the requested targetDedicatedNodes is specified, or 'autoScale' which defines a formula which is periodically reevaluated. If this property is not specified, the pool will have a fixed scale with 0 targetDedicatedNodes.
type ScaleSettingsOutput struct{ *pulumi.OutputState }

func (ScaleSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ScaleSettings)(nil)).Elem()
}

func (o ScaleSettingsOutput) ToScaleSettingsOutput() ScaleSettingsOutput {
	return o
}

func (o ScaleSettingsOutput) ToScaleSettingsOutputWithContext(ctx context.Context) ScaleSettingsOutput {
	return o
}

func (o ScaleSettingsOutput) ToScaleSettingsPtrOutput() ScaleSettingsPtrOutput {
	return o.ToScaleSettingsPtrOutputWithContext(context.Background())
}

func (o ScaleSettingsOutput) ToScaleSettingsPtrOutputWithContext(ctx context.Context) ScaleSettingsPtrOutput {
	return o.ApplyT(func(v ScaleSettings) *ScaleSettings {
		return &v
	}).(ScaleSettingsPtrOutput)
}

// This property and fixedScale are mutually exclusive and one of the properties must be specified.
func (o ScaleSettingsOutput) AutoScale() AutoScaleSettingsPtrOutput {
	return o.ApplyT(func(v ScaleSettings) *AutoScaleSettings { return v.AutoScale }).(AutoScaleSettingsPtrOutput)
}

// This property and autoScale are mutually exclusive and one of the properties must be specified.
func (o ScaleSettingsOutput) FixedScale() FixedScaleSettingsPtrOutput {
	return o.ApplyT(func(v ScaleSettings) *FixedScaleSettings { return v.FixedScale }).(FixedScaleSettingsPtrOutput)
}

type ScaleSettingsPtrOutput struct{ *pulumi.OutputState }

func (ScaleSettingsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ScaleSettings)(nil)).Elem()
}

func (o ScaleSettingsPtrOutput) ToScaleSettingsPtrOutput() ScaleSettingsPtrOutput {
	return o
}

func (o ScaleSettingsPtrOutput) ToScaleSettingsPtrOutputWithContext(ctx context.Context) ScaleSettingsPtrOutput {
	return o
}

func (o ScaleSettingsPtrOutput) Elem() ScaleSettingsOutput {
	return o.ApplyT(func(v *ScaleSettings) ScaleSettings { return *v }).(ScaleSettingsOutput)
}

// This property and fixedScale are mutually exclusive and one of the properties must be specified.
func (o ScaleSettingsPtrOutput) AutoScale() AutoScaleSettingsPtrOutput {
	return o.ApplyT(func(v *ScaleSettings) *AutoScaleSettings {
		if v == nil {
			return nil
		}
		return v.AutoScale
	}).(AutoScaleSettingsPtrOutput)
}

// This property and autoScale are mutually exclusive and one of the properties must be specified.
func (o ScaleSettingsPtrOutput) FixedScale() FixedScaleSettingsPtrOutput {
	return o.ApplyT(func(v *ScaleSettings) *FixedScaleSettings {
		if v == nil {
			return nil
		}
		return v.FixedScale
	}).(FixedScaleSettingsPtrOutput)
}

// Defines the desired size of the pool. This can either be 'fixedScale' where the requested targetDedicatedNodes is specified, or 'autoScale' which defines a formula which is periodically reevaluated. If this property is not specified, the pool will have a fixed scale with 0 targetDedicatedNodes.
type ScaleSettingsResponse struct {
	// This property and fixedScale are mutually exclusive and one of the properties must be specified.
	AutoScale *AutoScaleSettingsResponse `pulumi:"autoScale"`
	// This property and autoScale are mutually exclusive and one of the properties must be specified.
	FixedScale *FixedScaleSettingsResponse `pulumi:"fixedScale"`
}

// ScaleSettingsResponseInput is an input type that accepts ScaleSettingsResponseArgs and ScaleSettingsResponseOutput values.
// You can construct a concrete instance of `ScaleSettingsResponseInput` via:
//
//          ScaleSettingsResponseArgs{...}
type ScaleSettingsResponseInput interface {
	pulumi.Input

	ToScaleSettingsResponseOutput() ScaleSettingsResponseOutput
	ToScaleSettingsResponseOutputWithContext(context.Context) ScaleSettingsResponseOutput
}

// Defines the desired size of the pool. This can either be 'fixedScale' where the requested targetDedicatedNodes is specified, or 'autoScale' which defines a formula which is periodically reevaluated. If this property is not specified, the pool will have a fixed scale with 0 targetDedicatedNodes.
type ScaleSettingsResponseArgs struct {
	// This property and fixedScale are mutually exclusive and one of the properties must be specified.
	AutoScale AutoScaleSettingsResponsePtrInput `pulumi:"autoScale"`
	// This property and autoScale are mutually exclusive and one of the properties must be specified.
	FixedScale FixedScaleSettingsResponsePtrInput `pulumi:"fixedScale"`
}

func (ScaleSettingsResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ScaleSettingsResponse)(nil)).Elem()
}

func (i ScaleSettingsResponseArgs) ToScaleSettingsResponseOutput() ScaleSettingsResponseOutput {
	return i.ToScaleSettingsResponseOutputWithContext(context.Background())
}

func (i ScaleSettingsResponseArgs) ToScaleSettingsResponseOutputWithContext(ctx context.Context) ScaleSettingsResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScaleSettingsResponseOutput)
}

func (i ScaleSettingsResponseArgs) ToScaleSettingsResponsePtrOutput() ScaleSettingsResponsePtrOutput {
	return i.ToScaleSettingsResponsePtrOutputWithContext(context.Background())
}

func (i ScaleSettingsResponseArgs) ToScaleSettingsResponsePtrOutputWithContext(ctx context.Context) ScaleSettingsResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScaleSettingsResponseOutput).ToScaleSettingsResponsePtrOutputWithContext(ctx)
}

// ScaleSettingsResponsePtrInput is an input type that accepts ScaleSettingsResponseArgs, ScaleSettingsResponsePtr and ScaleSettingsResponsePtrOutput values.
// You can construct a concrete instance of `ScaleSettingsResponsePtrInput` via:
//
//          ScaleSettingsResponseArgs{...}
//
//  or:
//
//          nil
type ScaleSettingsResponsePtrInput interface {
	pulumi.Input

	ToScaleSettingsResponsePtrOutput() ScaleSettingsResponsePtrOutput
	ToScaleSettingsResponsePtrOutputWithContext(context.Context) ScaleSettingsResponsePtrOutput
}

type scaleSettingsResponsePtrType ScaleSettingsResponseArgs

func ScaleSettingsResponsePtr(v *ScaleSettingsResponseArgs) ScaleSettingsResponsePtrInput {
	return (*scaleSettingsResponsePtrType)(v)
}

func (*scaleSettingsResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ScaleSettingsResponse)(nil)).Elem()
}

func (i *scaleSettingsResponsePtrType) ToScaleSettingsResponsePtrOutput() ScaleSettingsResponsePtrOutput {
	return i.ToScaleSettingsResponsePtrOutputWithContext(context.Background())
}

func (i *scaleSettingsResponsePtrType) ToScaleSettingsResponsePtrOutputWithContext(ctx context.Context) ScaleSettingsResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScaleSettingsResponsePtrOutput)
}

// Defines the desired size of the pool. This can either be 'fixedScale' where the requested targetDedicatedNodes is specified, or 'autoScale' which defines a formula which is periodically reevaluated. If this property is not specified, the pool will have a fixed scale with 0 targetDedicatedNodes.
type ScaleSettingsResponseOutput struct{ *pulumi.OutputState }

func (ScaleSettingsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ScaleSettingsResponse)(nil)).Elem()
}

func (o ScaleSettingsResponseOutput) ToScaleSettingsResponseOutput() ScaleSettingsResponseOutput {
	return o
}

func (o ScaleSettingsResponseOutput) ToScaleSettingsResponseOutputWithContext(ctx context.Context) ScaleSettingsResponseOutput {
	return o
}

func (o ScaleSettingsResponseOutput) ToScaleSettingsResponsePtrOutput() ScaleSettingsResponsePtrOutput {
	return o.ToScaleSettingsResponsePtrOutputWithContext(context.Background())
}

func (o ScaleSettingsResponseOutput) ToScaleSettingsResponsePtrOutputWithContext(ctx context.Context) ScaleSettingsResponsePtrOutput {
	return o.ApplyT(func(v ScaleSettingsResponse) *ScaleSettingsResponse {
		return &v
	}).(ScaleSettingsResponsePtrOutput)
}

// This property and fixedScale are mutually exclusive and one of the properties must be specified.
func (o ScaleSettingsResponseOutput) AutoScale() AutoScaleSettingsResponsePtrOutput {
	return o.ApplyT(func(v ScaleSettingsResponse) *AutoScaleSettingsResponse { return v.AutoScale }).(AutoScaleSettingsResponsePtrOutput)
}

// This property and autoScale are mutually exclusive and one of the properties must be specified.
func (o ScaleSettingsResponseOutput) FixedScale() FixedScaleSettingsResponsePtrOutput {
	return o.ApplyT(func(v ScaleSettingsResponse) *FixedScaleSettingsResponse { return v.FixedScale }).(FixedScaleSettingsResponsePtrOutput)
}

type ScaleSettingsResponsePtrOutput struct{ *pulumi.OutputState }

func (ScaleSettingsResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ScaleSettingsResponse)(nil)).Elem()
}

func (o ScaleSettingsResponsePtrOutput) ToScaleSettingsResponsePtrOutput() ScaleSettingsResponsePtrOutput {
	return o
}

func (o ScaleSettingsResponsePtrOutput) ToScaleSettingsResponsePtrOutputWithContext(ctx context.Context) ScaleSettingsResponsePtrOutput {
	return o
}

func (o ScaleSettingsResponsePtrOutput) Elem() ScaleSettingsResponseOutput {
	return o.ApplyT(func(v *ScaleSettingsResponse) ScaleSettingsResponse { return *v }).(ScaleSettingsResponseOutput)
}

// This property and fixedScale are mutually exclusive and one of the properties must be specified.
func (o ScaleSettingsResponsePtrOutput) AutoScale() AutoScaleSettingsResponsePtrOutput {
	return o.ApplyT(func(v *ScaleSettingsResponse) *AutoScaleSettingsResponse {
		if v == nil {
			return nil
		}
		return v.AutoScale
	}).(AutoScaleSettingsResponsePtrOutput)
}

// This property and autoScale are mutually exclusive and one of the properties must be specified.
func (o ScaleSettingsResponsePtrOutput) FixedScale() FixedScaleSettingsResponsePtrOutput {
	return o.ApplyT(func(v *ScaleSettingsResponse) *FixedScaleSettingsResponse {
		if v == nil {
			return nil
		}
		return v.FixedScale
	}).(FixedScaleSettingsResponsePtrOutput)
}

// In some cases the start task may be re-run even though the node was not rebooted. Due to this, start tasks should be idempotent and exit gracefully if the setup they're performing has already been done. Special care should be taken to avoid start tasks which create breakaway process or install/launch services from the start task working directory, as this will block Batch from being able to re-run the start task.
type StartTask struct {
	// The command line does not run under a shell, and therefore cannot take advantage of shell features such as environment variable expansion. If you want to take advantage of such features, you should invoke the shell in the command line, for example using "cmd /c MyCommand" in Windows or "/bin/sh -c MyCommand" in Linux. Required if any other properties of the startTask are specified.
	CommandLine *string `pulumi:"commandLine"`
	// When this is specified, all directories recursively below the AZ_BATCH_NODE_ROOT_DIR (the root of Azure Batch directories on the node) are mapped into the container, all task environment variables are mapped into the container, and the task command line is executed in the container.
	ContainerSettings   *TaskContainerSettings `pulumi:"containerSettings"`
	EnvironmentSettings []EnvironmentSetting   `pulumi:"environmentSettings"`
	// The Batch service retries a task if its exit code is nonzero. Note that this value specifically controls the number of retries. The Batch service will try the task once, and may then retry up to this limit. For example, if the maximum retry count is 3, Batch tries the task up to 4 times (one initial try and 3 retries). If the maximum retry count is 0, the Batch service does not retry the task. If the maximum retry count is -1, the Batch service retries the task without limit.
	MaxTaskRetryCount *int           `pulumi:"maxTaskRetryCount"`
	ResourceFiles     []ResourceFile `pulumi:"resourceFiles"`
	// If omitted, the task runs as a non-administrative user unique to the task.
	UserIdentity *UserIdentity `pulumi:"userIdentity"`
	// If true and the start task fails on a compute node, the Batch service retries the start task up to its maximum retry count (maxTaskRetryCount). If the task has still not completed successfully after all retries, then the Batch service marks the compute node unusable, and will not schedule tasks to it. This condition can be detected via the node state and scheduling error detail. If false, the Batch service will not wait for the start task to complete. In this case, other tasks can start executing on the compute node while the start task is still running; and even if the start task fails, new tasks will continue to be scheduled on the node. The default is true.
	WaitForSuccess *bool `pulumi:"waitForSuccess"`
}

// StartTaskInput is an input type that accepts StartTaskArgs and StartTaskOutput values.
// You can construct a concrete instance of `StartTaskInput` via:
//
//          StartTaskArgs{...}
type StartTaskInput interface {
	pulumi.Input

	ToStartTaskOutput() StartTaskOutput
	ToStartTaskOutputWithContext(context.Context) StartTaskOutput
}

// In some cases the start task may be re-run even though the node was not rebooted. Due to this, start tasks should be idempotent and exit gracefully if the setup they're performing has already been done. Special care should be taken to avoid start tasks which create breakaway process or install/launch services from the start task working directory, as this will block Batch from being able to re-run the start task.
type StartTaskArgs struct {
	// The command line does not run under a shell, and therefore cannot take advantage of shell features such as environment variable expansion. If you want to take advantage of such features, you should invoke the shell in the command line, for example using "cmd /c MyCommand" in Windows or "/bin/sh -c MyCommand" in Linux. Required if any other properties of the startTask are specified.
	CommandLine pulumi.StringPtrInput `pulumi:"commandLine"`
	// When this is specified, all directories recursively below the AZ_BATCH_NODE_ROOT_DIR (the root of Azure Batch directories on the node) are mapped into the container, all task environment variables are mapped into the container, and the task command line is executed in the container.
	ContainerSettings   TaskContainerSettingsPtrInput `pulumi:"containerSettings"`
	EnvironmentSettings EnvironmentSettingArrayInput  `pulumi:"environmentSettings"`
	// The Batch service retries a task if its exit code is nonzero. Note that this value specifically controls the number of retries. The Batch service will try the task once, and may then retry up to this limit. For example, if the maximum retry count is 3, Batch tries the task up to 4 times (one initial try and 3 retries). If the maximum retry count is 0, the Batch service does not retry the task. If the maximum retry count is -1, the Batch service retries the task without limit.
	MaxTaskRetryCount pulumi.IntPtrInput     `pulumi:"maxTaskRetryCount"`
	ResourceFiles     ResourceFileArrayInput `pulumi:"resourceFiles"`
	// If omitted, the task runs as a non-administrative user unique to the task.
	UserIdentity UserIdentityPtrInput `pulumi:"userIdentity"`
	// If true and the start task fails on a compute node, the Batch service retries the start task up to its maximum retry count (maxTaskRetryCount). If the task has still not completed successfully after all retries, then the Batch service marks the compute node unusable, and will not schedule tasks to it. This condition can be detected via the node state and scheduling error detail. If false, the Batch service will not wait for the start task to complete. In this case, other tasks can start executing on the compute node while the start task is still running; and even if the start task fails, new tasks will continue to be scheduled on the node. The default is true.
	WaitForSuccess pulumi.BoolPtrInput `pulumi:"waitForSuccess"`
}

func (StartTaskArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*StartTask)(nil)).Elem()
}

func (i StartTaskArgs) ToStartTaskOutput() StartTaskOutput {
	return i.ToStartTaskOutputWithContext(context.Background())
}

func (i StartTaskArgs) ToStartTaskOutputWithContext(ctx context.Context) StartTaskOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StartTaskOutput)
}

func (i StartTaskArgs) ToStartTaskPtrOutput() StartTaskPtrOutput {
	return i.ToStartTaskPtrOutputWithContext(context.Background())
}

func (i StartTaskArgs) ToStartTaskPtrOutputWithContext(ctx context.Context) StartTaskPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StartTaskOutput).ToStartTaskPtrOutputWithContext(ctx)
}

// StartTaskPtrInput is an input type that accepts StartTaskArgs, StartTaskPtr and StartTaskPtrOutput values.
// You can construct a concrete instance of `StartTaskPtrInput` via:
//
//          StartTaskArgs{...}
//
//  or:
//
//          nil
type StartTaskPtrInput interface {
	pulumi.Input

	ToStartTaskPtrOutput() StartTaskPtrOutput
	ToStartTaskPtrOutputWithContext(context.Context) StartTaskPtrOutput
}

type startTaskPtrType StartTaskArgs

func StartTaskPtr(v *StartTaskArgs) StartTaskPtrInput {
	return (*startTaskPtrType)(v)
}

func (*startTaskPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**StartTask)(nil)).Elem()
}

func (i *startTaskPtrType) ToStartTaskPtrOutput() StartTaskPtrOutput {
	return i.ToStartTaskPtrOutputWithContext(context.Background())
}

func (i *startTaskPtrType) ToStartTaskPtrOutputWithContext(ctx context.Context) StartTaskPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StartTaskPtrOutput)
}

// In some cases the start task may be re-run even though the node was not rebooted. Due to this, start tasks should be idempotent and exit gracefully if the setup they're performing has already been done. Special care should be taken to avoid start tasks which create breakaway process or install/launch services from the start task working directory, as this will block Batch from being able to re-run the start task.
type StartTaskOutput struct{ *pulumi.OutputState }

func (StartTaskOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StartTask)(nil)).Elem()
}

func (o StartTaskOutput) ToStartTaskOutput() StartTaskOutput {
	return o
}

func (o StartTaskOutput) ToStartTaskOutputWithContext(ctx context.Context) StartTaskOutput {
	return o
}

func (o StartTaskOutput) ToStartTaskPtrOutput() StartTaskPtrOutput {
	return o.ToStartTaskPtrOutputWithContext(context.Background())
}

func (o StartTaskOutput) ToStartTaskPtrOutputWithContext(ctx context.Context) StartTaskPtrOutput {
	return o.ApplyT(func(v StartTask) *StartTask {
		return &v
	}).(StartTaskPtrOutput)
}

// The command line does not run under a shell, and therefore cannot take advantage of shell features such as environment variable expansion. If you want to take advantage of such features, you should invoke the shell in the command line, for example using "cmd /c MyCommand" in Windows or "/bin/sh -c MyCommand" in Linux. Required if any other properties of the startTask are specified.
func (o StartTaskOutput) CommandLine() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StartTask) *string { return v.CommandLine }).(pulumi.StringPtrOutput)
}

// When this is specified, all directories recursively below the AZ_BATCH_NODE_ROOT_DIR (the root of Azure Batch directories on the node) are mapped into the container, all task environment variables are mapped into the container, and the task command line is executed in the container.
func (o StartTaskOutput) ContainerSettings() TaskContainerSettingsPtrOutput {
	return o.ApplyT(func(v StartTask) *TaskContainerSettings { return v.ContainerSettings }).(TaskContainerSettingsPtrOutput)
}

func (o StartTaskOutput) EnvironmentSettings() EnvironmentSettingArrayOutput {
	return o.ApplyT(func(v StartTask) []EnvironmentSetting { return v.EnvironmentSettings }).(EnvironmentSettingArrayOutput)
}

// The Batch service retries a task if its exit code is nonzero. Note that this value specifically controls the number of retries. The Batch service will try the task once, and may then retry up to this limit. For example, if the maximum retry count is 3, Batch tries the task up to 4 times (one initial try and 3 retries). If the maximum retry count is 0, the Batch service does not retry the task. If the maximum retry count is -1, the Batch service retries the task without limit.
func (o StartTaskOutput) MaxTaskRetryCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v StartTask) *int { return v.MaxTaskRetryCount }).(pulumi.IntPtrOutput)
}

func (o StartTaskOutput) ResourceFiles() ResourceFileArrayOutput {
	return o.ApplyT(func(v StartTask) []ResourceFile { return v.ResourceFiles }).(ResourceFileArrayOutput)
}

// If omitted, the task runs as a non-administrative user unique to the task.
func (o StartTaskOutput) UserIdentity() UserIdentityPtrOutput {
	return o.ApplyT(func(v StartTask) *UserIdentity { return v.UserIdentity }).(UserIdentityPtrOutput)
}

// If true and the start task fails on a compute node, the Batch service retries the start task up to its maximum retry count (maxTaskRetryCount). If the task has still not completed successfully after all retries, then the Batch service marks the compute node unusable, and will not schedule tasks to it. This condition can be detected via the node state and scheduling error detail. If false, the Batch service will not wait for the start task to complete. In this case, other tasks can start executing on the compute node while the start task is still running; and even if the start task fails, new tasks will continue to be scheduled on the node. The default is true.
func (o StartTaskOutput) WaitForSuccess() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v StartTask) *bool { return v.WaitForSuccess }).(pulumi.BoolPtrOutput)
}

type StartTaskPtrOutput struct{ *pulumi.OutputState }

func (StartTaskPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**StartTask)(nil)).Elem()
}

func (o StartTaskPtrOutput) ToStartTaskPtrOutput() StartTaskPtrOutput {
	return o
}

func (o StartTaskPtrOutput) ToStartTaskPtrOutputWithContext(ctx context.Context) StartTaskPtrOutput {
	return o
}

func (o StartTaskPtrOutput) Elem() StartTaskOutput {
	return o.ApplyT(func(v *StartTask) StartTask { return *v }).(StartTaskOutput)
}

// The command line does not run under a shell, and therefore cannot take advantage of shell features such as environment variable expansion. If you want to take advantage of such features, you should invoke the shell in the command line, for example using "cmd /c MyCommand" in Windows or "/bin/sh -c MyCommand" in Linux. Required if any other properties of the startTask are specified.
func (o StartTaskPtrOutput) CommandLine() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *StartTask) *string {
		if v == nil {
			return nil
		}
		return v.CommandLine
	}).(pulumi.StringPtrOutput)
}

// When this is specified, all directories recursively below the AZ_BATCH_NODE_ROOT_DIR (the root of Azure Batch directories on the node) are mapped into the container, all task environment variables are mapped into the container, and the task command line is executed in the container.
func (o StartTaskPtrOutput) ContainerSettings() TaskContainerSettingsPtrOutput {
	return o.ApplyT(func(v *StartTask) *TaskContainerSettings {
		if v == nil {
			return nil
		}
		return v.ContainerSettings
	}).(TaskContainerSettingsPtrOutput)
}

func (o StartTaskPtrOutput) EnvironmentSettings() EnvironmentSettingArrayOutput {
	return o.ApplyT(func(v *StartTask) []EnvironmentSetting {
		if v == nil {
			return nil
		}
		return v.EnvironmentSettings
	}).(EnvironmentSettingArrayOutput)
}

// The Batch service retries a task if its exit code is nonzero. Note that this value specifically controls the number of retries. The Batch service will try the task once, and may then retry up to this limit. For example, if the maximum retry count is 3, Batch tries the task up to 4 times (one initial try and 3 retries). If the maximum retry count is 0, the Batch service does not retry the task. If the maximum retry count is -1, the Batch service retries the task without limit.
func (o StartTaskPtrOutput) MaxTaskRetryCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *StartTask) *int {
		if v == nil {
			return nil
		}
		return v.MaxTaskRetryCount
	}).(pulumi.IntPtrOutput)
}

func (o StartTaskPtrOutput) ResourceFiles() ResourceFileArrayOutput {
	return o.ApplyT(func(v *StartTask) []ResourceFile {
		if v == nil {
			return nil
		}
		return v.ResourceFiles
	}).(ResourceFileArrayOutput)
}

// If omitted, the task runs as a non-administrative user unique to the task.
func (o StartTaskPtrOutput) UserIdentity() UserIdentityPtrOutput {
	return o.ApplyT(func(v *StartTask) *UserIdentity {
		if v == nil {
			return nil
		}
		return v.UserIdentity
	}).(UserIdentityPtrOutput)
}

// If true and the start task fails on a compute node, the Batch service retries the start task up to its maximum retry count (maxTaskRetryCount). If the task has still not completed successfully after all retries, then the Batch service marks the compute node unusable, and will not schedule tasks to it. This condition can be detected via the node state and scheduling error detail. If false, the Batch service will not wait for the start task to complete. In this case, other tasks can start executing on the compute node while the start task is still running; and even if the start task fails, new tasks will continue to be scheduled on the node. The default is true.
func (o StartTaskPtrOutput) WaitForSuccess() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *StartTask) *bool {
		if v == nil {
			return nil
		}
		return v.WaitForSuccess
	}).(pulumi.BoolPtrOutput)
}

// In some cases the start task may be re-run even though the node was not rebooted. Due to this, start tasks should be idempotent and exit gracefully if the setup they're performing has already been done. Special care should be taken to avoid start tasks which create breakaway process or install/launch services from the start task working directory, as this will block Batch from being able to re-run the start task.
type StartTaskResponse struct {
	// The command line does not run under a shell, and therefore cannot take advantage of shell features such as environment variable expansion. If you want to take advantage of such features, you should invoke the shell in the command line, for example using "cmd /c MyCommand" in Windows or "/bin/sh -c MyCommand" in Linux. Required if any other properties of the startTask are specified.
	CommandLine *string `pulumi:"commandLine"`
	// When this is specified, all directories recursively below the AZ_BATCH_NODE_ROOT_DIR (the root of Azure Batch directories on the node) are mapped into the container, all task environment variables are mapped into the container, and the task command line is executed in the container.
	ContainerSettings   *TaskContainerSettingsResponse `pulumi:"containerSettings"`
	EnvironmentSettings []EnvironmentSettingResponse   `pulumi:"environmentSettings"`
	// The Batch service retries a task if its exit code is nonzero. Note that this value specifically controls the number of retries. The Batch service will try the task once, and may then retry up to this limit. For example, if the maximum retry count is 3, Batch tries the task up to 4 times (one initial try and 3 retries). If the maximum retry count is 0, the Batch service does not retry the task. If the maximum retry count is -1, the Batch service retries the task without limit.
	MaxTaskRetryCount *int                   `pulumi:"maxTaskRetryCount"`
	ResourceFiles     []ResourceFileResponse `pulumi:"resourceFiles"`
	// If omitted, the task runs as a non-administrative user unique to the task.
	UserIdentity *UserIdentityResponse `pulumi:"userIdentity"`
	// If true and the start task fails on a compute node, the Batch service retries the start task up to its maximum retry count (maxTaskRetryCount). If the task has still not completed successfully after all retries, then the Batch service marks the compute node unusable, and will not schedule tasks to it. This condition can be detected via the node state and scheduling error detail. If false, the Batch service will not wait for the start task to complete. In this case, other tasks can start executing on the compute node while the start task is still running; and even if the start task fails, new tasks will continue to be scheduled on the node. The default is true.
	WaitForSuccess *bool `pulumi:"waitForSuccess"`
}

// StartTaskResponseInput is an input type that accepts StartTaskResponseArgs and StartTaskResponseOutput values.
// You can construct a concrete instance of `StartTaskResponseInput` via:
//
//          StartTaskResponseArgs{...}
type StartTaskResponseInput interface {
	pulumi.Input

	ToStartTaskResponseOutput() StartTaskResponseOutput
	ToStartTaskResponseOutputWithContext(context.Context) StartTaskResponseOutput
}

// In some cases the start task may be re-run even though the node was not rebooted. Due to this, start tasks should be idempotent and exit gracefully if the setup they're performing has already been done. Special care should be taken to avoid start tasks which create breakaway process or install/launch services from the start task working directory, as this will block Batch from being able to re-run the start task.
type StartTaskResponseArgs struct {
	// The command line does not run under a shell, and therefore cannot take advantage of shell features such as environment variable expansion. If you want to take advantage of such features, you should invoke the shell in the command line, for example using "cmd /c MyCommand" in Windows or "/bin/sh -c MyCommand" in Linux. Required if any other properties of the startTask are specified.
	CommandLine pulumi.StringPtrInput `pulumi:"commandLine"`
	// When this is specified, all directories recursively below the AZ_BATCH_NODE_ROOT_DIR (the root of Azure Batch directories on the node) are mapped into the container, all task environment variables are mapped into the container, and the task command line is executed in the container.
	ContainerSettings   TaskContainerSettingsResponsePtrInput `pulumi:"containerSettings"`
	EnvironmentSettings EnvironmentSettingResponseArrayInput  `pulumi:"environmentSettings"`
	// The Batch service retries a task if its exit code is nonzero. Note that this value specifically controls the number of retries. The Batch service will try the task once, and may then retry up to this limit. For example, if the maximum retry count is 3, Batch tries the task up to 4 times (one initial try and 3 retries). If the maximum retry count is 0, the Batch service does not retry the task. If the maximum retry count is -1, the Batch service retries the task without limit.
	MaxTaskRetryCount pulumi.IntPtrInput             `pulumi:"maxTaskRetryCount"`
	ResourceFiles     ResourceFileResponseArrayInput `pulumi:"resourceFiles"`
	// If omitted, the task runs as a non-administrative user unique to the task.
	UserIdentity UserIdentityResponsePtrInput `pulumi:"userIdentity"`
	// If true and the start task fails on a compute node, the Batch service retries the start task up to its maximum retry count (maxTaskRetryCount). If the task has still not completed successfully after all retries, then the Batch service marks the compute node unusable, and will not schedule tasks to it. This condition can be detected via the node state and scheduling error detail. If false, the Batch service will not wait for the start task to complete. In this case, other tasks can start executing on the compute node while the start task is still running; and even if the start task fails, new tasks will continue to be scheduled on the node. The default is true.
	WaitForSuccess pulumi.BoolPtrInput `pulumi:"waitForSuccess"`
}

func (StartTaskResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*StartTaskResponse)(nil)).Elem()
}

func (i StartTaskResponseArgs) ToStartTaskResponseOutput() StartTaskResponseOutput {
	return i.ToStartTaskResponseOutputWithContext(context.Background())
}

func (i StartTaskResponseArgs) ToStartTaskResponseOutputWithContext(ctx context.Context) StartTaskResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StartTaskResponseOutput)
}

func (i StartTaskResponseArgs) ToStartTaskResponsePtrOutput() StartTaskResponsePtrOutput {
	return i.ToStartTaskResponsePtrOutputWithContext(context.Background())
}

func (i StartTaskResponseArgs) ToStartTaskResponsePtrOutputWithContext(ctx context.Context) StartTaskResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StartTaskResponseOutput).ToStartTaskResponsePtrOutputWithContext(ctx)
}

// StartTaskResponsePtrInput is an input type that accepts StartTaskResponseArgs, StartTaskResponsePtr and StartTaskResponsePtrOutput values.
// You can construct a concrete instance of `StartTaskResponsePtrInput` via:
//
//          StartTaskResponseArgs{...}
//
//  or:
//
//          nil
type StartTaskResponsePtrInput interface {
	pulumi.Input

	ToStartTaskResponsePtrOutput() StartTaskResponsePtrOutput
	ToStartTaskResponsePtrOutputWithContext(context.Context) StartTaskResponsePtrOutput
}

type startTaskResponsePtrType StartTaskResponseArgs

func StartTaskResponsePtr(v *StartTaskResponseArgs) StartTaskResponsePtrInput {
	return (*startTaskResponsePtrType)(v)
}

func (*startTaskResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**StartTaskResponse)(nil)).Elem()
}

func (i *startTaskResponsePtrType) ToStartTaskResponsePtrOutput() StartTaskResponsePtrOutput {
	return i.ToStartTaskResponsePtrOutputWithContext(context.Background())
}

func (i *startTaskResponsePtrType) ToStartTaskResponsePtrOutputWithContext(ctx context.Context) StartTaskResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StartTaskResponsePtrOutput)
}

// In some cases the start task may be re-run even though the node was not rebooted. Due to this, start tasks should be idempotent and exit gracefully if the setup they're performing has already been done. Special care should be taken to avoid start tasks which create breakaway process or install/launch services from the start task working directory, as this will block Batch from being able to re-run the start task.
type StartTaskResponseOutput struct{ *pulumi.OutputState }

func (StartTaskResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StartTaskResponse)(nil)).Elem()
}

func (o StartTaskResponseOutput) ToStartTaskResponseOutput() StartTaskResponseOutput {
	return o
}

func (o StartTaskResponseOutput) ToStartTaskResponseOutputWithContext(ctx context.Context) StartTaskResponseOutput {
	return o
}

func (o StartTaskResponseOutput) ToStartTaskResponsePtrOutput() StartTaskResponsePtrOutput {
	return o.ToStartTaskResponsePtrOutputWithContext(context.Background())
}

func (o StartTaskResponseOutput) ToStartTaskResponsePtrOutputWithContext(ctx context.Context) StartTaskResponsePtrOutput {
	return o.ApplyT(func(v StartTaskResponse) *StartTaskResponse {
		return &v
	}).(StartTaskResponsePtrOutput)
}

// The command line does not run under a shell, and therefore cannot take advantage of shell features such as environment variable expansion. If you want to take advantage of such features, you should invoke the shell in the command line, for example using "cmd /c MyCommand" in Windows or "/bin/sh -c MyCommand" in Linux. Required if any other properties of the startTask are specified.
func (o StartTaskResponseOutput) CommandLine() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StartTaskResponse) *string { return v.CommandLine }).(pulumi.StringPtrOutput)
}

// When this is specified, all directories recursively below the AZ_BATCH_NODE_ROOT_DIR (the root of Azure Batch directories on the node) are mapped into the container, all task environment variables are mapped into the container, and the task command line is executed in the container.
func (o StartTaskResponseOutput) ContainerSettings() TaskContainerSettingsResponsePtrOutput {
	return o.ApplyT(func(v StartTaskResponse) *TaskContainerSettingsResponse { return v.ContainerSettings }).(TaskContainerSettingsResponsePtrOutput)
}

func (o StartTaskResponseOutput) EnvironmentSettings() EnvironmentSettingResponseArrayOutput {
	return o.ApplyT(func(v StartTaskResponse) []EnvironmentSettingResponse { return v.EnvironmentSettings }).(EnvironmentSettingResponseArrayOutput)
}

// The Batch service retries a task if its exit code is nonzero. Note that this value specifically controls the number of retries. The Batch service will try the task once, and may then retry up to this limit. For example, if the maximum retry count is 3, Batch tries the task up to 4 times (one initial try and 3 retries). If the maximum retry count is 0, the Batch service does not retry the task. If the maximum retry count is -1, the Batch service retries the task without limit.
func (o StartTaskResponseOutput) MaxTaskRetryCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v StartTaskResponse) *int { return v.MaxTaskRetryCount }).(pulumi.IntPtrOutput)
}

func (o StartTaskResponseOutput) ResourceFiles() ResourceFileResponseArrayOutput {
	return o.ApplyT(func(v StartTaskResponse) []ResourceFileResponse { return v.ResourceFiles }).(ResourceFileResponseArrayOutput)
}

// If omitted, the task runs as a non-administrative user unique to the task.
func (o StartTaskResponseOutput) UserIdentity() UserIdentityResponsePtrOutput {
	return o.ApplyT(func(v StartTaskResponse) *UserIdentityResponse { return v.UserIdentity }).(UserIdentityResponsePtrOutput)
}

// If true and the start task fails on a compute node, the Batch service retries the start task up to its maximum retry count (maxTaskRetryCount). If the task has still not completed successfully after all retries, then the Batch service marks the compute node unusable, and will not schedule tasks to it. This condition can be detected via the node state and scheduling error detail. If false, the Batch service will not wait for the start task to complete. In this case, other tasks can start executing on the compute node while the start task is still running; and even if the start task fails, new tasks will continue to be scheduled on the node. The default is true.
func (o StartTaskResponseOutput) WaitForSuccess() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v StartTaskResponse) *bool { return v.WaitForSuccess }).(pulumi.BoolPtrOutput)
}

type StartTaskResponsePtrOutput struct{ *pulumi.OutputState }

func (StartTaskResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**StartTaskResponse)(nil)).Elem()
}

func (o StartTaskResponsePtrOutput) ToStartTaskResponsePtrOutput() StartTaskResponsePtrOutput {
	return o
}

func (o StartTaskResponsePtrOutput) ToStartTaskResponsePtrOutputWithContext(ctx context.Context) StartTaskResponsePtrOutput {
	return o
}

func (o StartTaskResponsePtrOutput) Elem() StartTaskResponseOutput {
	return o.ApplyT(func(v *StartTaskResponse) StartTaskResponse { return *v }).(StartTaskResponseOutput)
}

// The command line does not run under a shell, and therefore cannot take advantage of shell features such as environment variable expansion. If you want to take advantage of such features, you should invoke the shell in the command line, for example using "cmd /c MyCommand" in Windows or "/bin/sh -c MyCommand" in Linux. Required if any other properties of the startTask are specified.
func (o StartTaskResponsePtrOutput) CommandLine() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *StartTaskResponse) *string {
		if v == nil {
			return nil
		}
		return v.CommandLine
	}).(pulumi.StringPtrOutput)
}

// When this is specified, all directories recursively below the AZ_BATCH_NODE_ROOT_DIR (the root of Azure Batch directories on the node) are mapped into the container, all task environment variables are mapped into the container, and the task command line is executed in the container.
func (o StartTaskResponsePtrOutput) ContainerSettings() TaskContainerSettingsResponsePtrOutput {
	return o.ApplyT(func(v *StartTaskResponse) *TaskContainerSettingsResponse {
		if v == nil {
			return nil
		}
		return v.ContainerSettings
	}).(TaskContainerSettingsResponsePtrOutput)
}

func (o StartTaskResponsePtrOutput) EnvironmentSettings() EnvironmentSettingResponseArrayOutput {
	return o.ApplyT(func(v *StartTaskResponse) []EnvironmentSettingResponse {
		if v == nil {
			return nil
		}
		return v.EnvironmentSettings
	}).(EnvironmentSettingResponseArrayOutput)
}

// The Batch service retries a task if its exit code is nonzero. Note that this value specifically controls the number of retries. The Batch service will try the task once, and may then retry up to this limit. For example, if the maximum retry count is 3, Batch tries the task up to 4 times (one initial try and 3 retries). If the maximum retry count is 0, the Batch service does not retry the task. If the maximum retry count is -1, the Batch service retries the task without limit.
func (o StartTaskResponsePtrOutput) MaxTaskRetryCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *StartTaskResponse) *int {
		if v == nil {
			return nil
		}
		return v.MaxTaskRetryCount
	}).(pulumi.IntPtrOutput)
}

func (o StartTaskResponsePtrOutput) ResourceFiles() ResourceFileResponseArrayOutput {
	return o.ApplyT(func(v *StartTaskResponse) []ResourceFileResponse {
		if v == nil {
			return nil
		}
		return v.ResourceFiles
	}).(ResourceFileResponseArrayOutput)
}

// If omitted, the task runs as a non-administrative user unique to the task.
func (o StartTaskResponsePtrOutput) UserIdentity() UserIdentityResponsePtrOutput {
	return o.ApplyT(func(v *StartTaskResponse) *UserIdentityResponse {
		if v == nil {
			return nil
		}
		return v.UserIdentity
	}).(UserIdentityResponsePtrOutput)
}

// If true and the start task fails on a compute node, the Batch service retries the start task up to its maximum retry count (maxTaskRetryCount). If the task has still not completed successfully after all retries, then the Batch service marks the compute node unusable, and will not schedule tasks to it. This condition can be detected via the node state and scheduling error detail. If false, the Batch service will not wait for the start task to complete. In this case, other tasks can start executing on the compute node while the start task is still running; and even if the start task fails, new tasks will continue to be scheduled on the node. The default is true.
func (o StartTaskResponsePtrOutput) WaitForSuccess() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *StartTaskResponse) *bool {
		if v == nil {
			return nil
		}
		return v.WaitForSuccess
	}).(pulumi.BoolPtrOutput)
}

type TaskContainerSettings struct {
	// These additional options are supplied as arguments to the "docker create" command, in addition to those controlled by the Batch Service.
	ContainerRunOptions *string `pulumi:"containerRunOptions"`
	// This is the full image reference, as would be specified to "docker pull". If no tag is provided as part of the image name, the tag ":latest" is used as a default.
	ImageName string `pulumi:"imageName"`
	// This setting can be omitted if was already provided at pool creation.
	Registry         *ContainerRegistry `pulumi:"registry"`
	WorkingDirectory *string            `pulumi:"workingDirectory"`
}

// TaskContainerSettingsInput is an input type that accepts TaskContainerSettingsArgs and TaskContainerSettingsOutput values.
// You can construct a concrete instance of `TaskContainerSettingsInput` via:
//
//          TaskContainerSettingsArgs{...}
type TaskContainerSettingsInput interface {
	pulumi.Input

	ToTaskContainerSettingsOutput() TaskContainerSettingsOutput
	ToTaskContainerSettingsOutputWithContext(context.Context) TaskContainerSettingsOutput
}

type TaskContainerSettingsArgs struct {
	// These additional options are supplied as arguments to the "docker create" command, in addition to those controlled by the Batch Service.
	ContainerRunOptions pulumi.StringPtrInput `pulumi:"containerRunOptions"`
	// This is the full image reference, as would be specified to "docker pull". If no tag is provided as part of the image name, the tag ":latest" is used as a default.
	ImageName pulumi.StringInput `pulumi:"imageName"`
	// This setting can be omitted if was already provided at pool creation.
	Registry         ContainerRegistryPtrInput `pulumi:"registry"`
	WorkingDirectory pulumi.StringPtrInput     `pulumi:"workingDirectory"`
}

func (TaskContainerSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TaskContainerSettings)(nil)).Elem()
}

func (i TaskContainerSettingsArgs) ToTaskContainerSettingsOutput() TaskContainerSettingsOutput {
	return i.ToTaskContainerSettingsOutputWithContext(context.Background())
}

func (i TaskContainerSettingsArgs) ToTaskContainerSettingsOutputWithContext(ctx context.Context) TaskContainerSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TaskContainerSettingsOutput)
}

func (i TaskContainerSettingsArgs) ToTaskContainerSettingsPtrOutput() TaskContainerSettingsPtrOutput {
	return i.ToTaskContainerSettingsPtrOutputWithContext(context.Background())
}

func (i TaskContainerSettingsArgs) ToTaskContainerSettingsPtrOutputWithContext(ctx context.Context) TaskContainerSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TaskContainerSettingsOutput).ToTaskContainerSettingsPtrOutputWithContext(ctx)
}

// TaskContainerSettingsPtrInput is an input type that accepts TaskContainerSettingsArgs, TaskContainerSettingsPtr and TaskContainerSettingsPtrOutput values.
// You can construct a concrete instance of `TaskContainerSettingsPtrInput` via:
//
//          TaskContainerSettingsArgs{...}
//
//  or:
//
//          nil
type TaskContainerSettingsPtrInput interface {
	pulumi.Input

	ToTaskContainerSettingsPtrOutput() TaskContainerSettingsPtrOutput
	ToTaskContainerSettingsPtrOutputWithContext(context.Context) TaskContainerSettingsPtrOutput
}

type taskContainerSettingsPtrType TaskContainerSettingsArgs

func TaskContainerSettingsPtr(v *TaskContainerSettingsArgs) TaskContainerSettingsPtrInput {
	return (*taskContainerSettingsPtrType)(v)
}

func (*taskContainerSettingsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TaskContainerSettings)(nil)).Elem()
}

func (i *taskContainerSettingsPtrType) ToTaskContainerSettingsPtrOutput() TaskContainerSettingsPtrOutput {
	return i.ToTaskContainerSettingsPtrOutputWithContext(context.Background())
}

func (i *taskContainerSettingsPtrType) ToTaskContainerSettingsPtrOutputWithContext(ctx context.Context) TaskContainerSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TaskContainerSettingsPtrOutput)
}

type TaskContainerSettingsOutput struct{ *pulumi.OutputState }

func (TaskContainerSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TaskContainerSettings)(nil)).Elem()
}

func (o TaskContainerSettingsOutput) ToTaskContainerSettingsOutput() TaskContainerSettingsOutput {
	return o
}

func (o TaskContainerSettingsOutput) ToTaskContainerSettingsOutputWithContext(ctx context.Context) TaskContainerSettingsOutput {
	return o
}

func (o TaskContainerSettingsOutput) ToTaskContainerSettingsPtrOutput() TaskContainerSettingsPtrOutput {
	return o.ToTaskContainerSettingsPtrOutputWithContext(context.Background())
}

func (o TaskContainerSettingsOutput) ToTaskContainerSettingsPtrOutputWithContext(ctx context.Context) TaskContainerSettingsPtrOutput {
	return o.ApplyT(func(v TaskContainerSettings) *TaskContainerSettings {
		return &v
	}).(TaskContainerSettingsPtrOutput)
}

// These additional options are supplied as arguments to the "docker create" command, in addition to those controlled by the Batch Service.
func (o TaskContainerSettingsOutput) ContainerRunOptions() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TaskContainerSettings) *string { return v.ContainerRunOptions }).(pulumi.StringPtrOutput)
}

// This is the full image reference, as would be specified to "docker pull". If no tag is provided as part of the image name, the tag ":latest" is used as a default.
func (o TaskContainerSettingsOutput) ImageName() pulumi.StringOutput {
	return o.ApplyT(func(v TaskContainerSettings) string { return v.ImageName }).(pulumi.StringOutput)
}

// This setting can be omitted if was already provided at pool creation.
func (o TaskContainerSettingsOutput) Registry() ContainerRegistryPtrOutput {
	return o.ApplyT(func(v TaskContainerSettings) *ContainerRegistry { return v.Registry }).(ContainerRegistryPtrOutput)
}

func (o TaskContainerSettingsOutput) WorkingDirectory() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TaskContainerSettings) *string { return v.WorkingDirectory }).(pulumi.StringPtrOutput)
}

type TaskContainerSettingsPtrOutput struct{ *pulumi.OutputState }

func (TaskContainerSettingsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TaskContainerSettings)(nil)).Elem()
}

func (o TaskContainerSettingsPtrOutput) ToTaskContainerSettingsPtrOutput() TaskContainerSettingsPtrOutput {
	return o
}

func (o TaskContainerSettingsPtrOutput) ToTaskContainerSettingsPtrOutputWithContext(ctx context.Context) TaskContainerSettingsPtrOutput {
	return o
}

func (o TaskContainerSettingsPtrOutput) Elem() TaskContainerSettingsOutput {
	return o.ApplyT(func(v *TaskContainerSettings) TaskContainerSettings { return *v }).(TaskContainerSettingsOutput)
}

// These additional options are supplied as arguments to the "docker create" command, in addition to those controlled by the Batch Service.
func (o TaskContainerSettingsPtrOutput) ContainerRunOptions() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TaskContainerSettings) *string {
		if v == nil {
			return nil
		}
		return v.ContainerRunOptions
	}).(pulumi.StringPtrOutput)
}

// This is the full image reference, as would be specified to "docker pull". If no tag is provided as part of the image name, the tag ":latest" is used as a default.
func (o TaskContainerSettingsPtrOutput) ImageName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TaskContainerSettings) *string {
		if v == nil {
			return nil
		}
		return &v.ImageName
	}).(pulumi.StringPtrOutput)
}

// This setting can be omitted if was already provided at pool creation.
func (o TaskContainerSettingsPtrOutput) Registry() ContainerRegistryPtrOutput {
	return o.ApplyT(func(v *TaskContainerSettings) *ContainerRegistry {
		if v == nil {
			return nil
		}
		return v.Registry
	}).(ContainerRegistryPtrOutput)
}

func (o TaskContainerSettingsPtrOutput) WorkingDirectory() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TaskContainerSettings) *string {
		if v == nil {
			return nil
		}
		return v.WorkingDirectory
	}).(pulumi.StringPtrOutput)
}

type TaskContainerSettingsResponse struct {
	// These additional options are supplied as arguments to the "docker create" command, in addition to those controlled by the Batch Service.
	ContainerRunOptions *string `pulumi:"containerRunOptions"`
	// This is the full image reference, as would be specified to "docker pull". If no tag is provided as part of the image name, the tag ":latest" is used as a default.
	ImageName string `pulumi:"imageName"`
	// This setting can be omitted if was already provided at pool creation.
	Registry         *ContainerRegistryResponse `pulumi:"registry"`
	WorkingDirectory *string                    `pulumi:"workingDirectory"`
}

// TaskContainerSettingsResponseInput is an input type that accepts TaskContainerSettingsResponseArgs and TaskContainerSettingsResponseOutput values.
// You can construct a concrete instance of `TaskContainerSettingsResponseInput` via:
//
//          TaskContainerSettingsResponseArgs{...}
type TaskContainerSettingsResponseInput interface {
	pulumi.Input

	ToTaskContainerSettingsResponseOutput() TaskContainerSettingsResponseOutput
	ToTaskContainerSettingsResponseOutputWithContext(context.Context) TaskContainerSettingsResponseOutput
}

type TaskContainerSettingsResponseArgs struct {
	// These additional options are supplied as arguments to the "docker create" command, in addition to those controlled by the Batch Service.
	ContainerRunOptions pulumi.StringPtrInput `pulumi:"containerRunOptions"`
	// This is the full image reference, as would be specified to "docker pull". If no tag is provided as part of the image name, the tag ":latest" is used as a default.
	ImageName pulumi.StringInput `pulumi:"imageName"`
	// This setting can be omitted if was already provided at pool creation.
	Registry         ContainerRegistryResponsePtrInput `pulumi:"registry"`
	WorkingDirectory pulumi.StringPtrInput             `pulumi:"workingDirectory"`
}

func (TaskContainerSettingsResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TaskContainerSettingsResponse)(nil)).Elem()
}

func (i TaskContainerSettingsResponseArgs) ToTaskContainerSettingsResponseOutput() TaskContainerSettingsResponseOutput {
	return i.ToTaskContainerSettingsResponseOutputWithContext(context.Background())
}

func (i TaskContainerSettingsResponseArgs) ToTaskContainerSettingsResponseOutputWithContext(ctx context.Context) TaskContainerSettingsResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TaskContainerSettingsResponseOutput)
}

func (i TaskContainerSettingsResponseArgs) ToTaskContainerSettingsResponsePtrOutput() TaskContainerSettingsResponsePtrOutput {
	return i.ToTaskContainerSettingsResponsePtrOutputWithContext(context.Background())
}

func (i TaskContainerSettingsResponseArgs) ToTaskContainerSettingsResponsePtrOutputWithContext(ctx context.Context) TaskContainerSettingsResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TaskContainerSettingsResponseOutput).ToTaskContainerSettingsResponsePtrOutputWithContext(ctx)
}

// TaskContainerSettingsResponsePtrInput is an input type that accepts TaskContainerSettingsResponseArgs, TaskContainerSettingsResponsePtr and TaskContainerSettingsResponsePtrOutput values.
// You can construct a concrete instance of `TaskContainerSettingsResponsePtrInput` via:
//
//          TaskContainerSettingsResponseArgs{...}
//
//  or:
//
//          nil
type TaskContainerSettingsResponsePtrInput interface {
	pulumi.Input

	ToTaskContainerSettingsResponsePtrOutput() TaskContainerSettingsResponsePtrOutput
	ToTaskContainerSettingsResponsePtrOutputWithContext(context.Context) TaskContainerSettingsResponsePtrOutput
}

type taskContainerSettingsResponsePtrType TaskContainerSettingsResponseArgs

func TaskContainerSettingsResponsePtr(v *TaskContainerSettingsResponseArgs) TaskContainerSettingsResponsePtrInput {
	return (*taskContainerSettingsResponsePtrType)(v)
}

func (*taskContainerSettingsResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TaskContainerSettingsResponse)(nil)).Elem()
}

func (i *taskContainerSettingsResponsePtrType) ToTaskContainerSettingsResponsePtrOutput() TaskContainerSettingsResponsePtrOutput {
	return i.ToTaskContainerSettingsResponsePtrOutputWithContext(context.Background())
}

func (i *taskContainerSettingsResponsePtrType) ToTaskContainerSettingsResponsePtrOutputWithContext(ctx context.Context) TaskContainerSettingsResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TaskContainerSettingsResponsePtrOutput)
}

type TaskContainerSettingsResponseOutput struct{ *pulumi.OutputState }

func (TaskContainerSettingsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TaskContainerSettingsResponse)(nil)).Elem()
}

func (o TaskContainerSettingsResponseOutput) ToTaskContainerSettingsResponseOutput() TaskContainerSettingsResponseOutput {
	return o
}

func (o TaskContainerSettingsResponseOutput) ToTaskContainerSettingsResponseOutputWithContext(ctx context.Context) TaskContainerSettingsResponseOutput {
	return o
}

func (o TaskContainerSettingsResponseOutput) ToTaskContainerSettingsResponsePtrOutput() TaskContainerSettingsResponsePtrOutput {
	return o.ToTaskContainerSettingsResponsePtrOutputWithContext(context.Background())
}

func (o TaskContainerSettingsResponseOutput) ToTaskContainerSettingsResponsePtrOutputWithContext(ctx context.Context) TaskContainerSettingsResponsePtrOutput {
	return o.ApplyT(func(v TaskContainerSettingsResponse) *TaskContainerSettingsResponse {
		return &v
	}).(TaskContainerSettingsResponsePtrOutput)
}

// These additional options are supplied as arguments to the "docker create" command, in addition to those controlled by the Batch Service.
func (o TaskContainerSettingsResponseOutput) ContainerRunOptions() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TaskContainerSettingsResponse) *string { return v.ContainerRunOptions }).(pulumi.StringPtrOutput)
}

// This is the full image reference, as would be specified to "docker pull". If no tag is provided as part of the image name, the tag ":latest" is used as a default.
func (o TaskContainerSettingsResponseOutput) ImageName() pulumi.StringOutput {
	return o.ApplyT(func(v TaskContainerSettingsResponse) string { return v.ImageName }).(pulumi.StringOutput)
}

// This setting can be omitted if was already provided at pool creation.
func (o TaskContainerSettingsResponseOutput) Registry() ContainerRegistryResponsePtrOutput {
	return o.ApplyT(func(v TaskContainerSettingsResponse) *ContainerRegistryResponse { return v.Registry }).(ContainerRegistryResponsePtrOutput)
}

func (o TaskContainerSettingsResponseOutput) WorkingDirectory() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TaskContainerSettingsResponse) *string { return v.WorkingDirectory }).(pulumi.StringPtrOutput)
}

type TaskContainerSettingsResponsePtrOutput struct{ *pulumi.OutputState }

func (TaskContainerSettingsResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TaskContainerSettingsResponse)(nil)).Elem()
}

func (o TaskContainerSettingsResponsePtrOutput) ToTaskContainerSettingsResponsePtrOutput() TaskContainerSettingsResponsePtrOutput {
	return o
}

func (o TaskContainerSettingsResponsePtrOutput) ToTaskContainerSettingsResponsePtrOutputWithContext(ctx context.Context) TaskContainerSettingsResponsePtrOutput {
	return o
}

func (o TaskContainerSettingsResponsePtrOutput) Elem() TaskContainerSettingsResponseOutput {
	return o.ApplyT(func(v *TaskContainerSettingsResponse) TaskContainerSettingsResponse { return *v }).(TaskContainerSettingsResponseOutput)
}

// These additional options are supplied as arguments to the "docker create" command, in addition to those controlled by the Batch Service.
func (o TaskContainerSettingsResponsePtrOutput) ContainerRunOptions() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TaskContainerSettingsResponse) *string {
		if v == nil {
			return nil
		}
		return v.ContainerRunOptions
	}).(pulumi.StringPtrOutput)
}

// This is the full image reference, as would be specified to "docker pull". If no tag is provided as part of the image name, the tag ":latest" is used as a default.
func (o TaskContainerSettingsResponsePtrOutput) ImageName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TaskContainerSettingsResponse) *string {
		if v == nil {
			return nil
		}
		return &v.ImageName
	}).(pulumi.StringPtrOutput)
}

// This setting can be omitted if was already provided at pool creation.
func (o TaskContainerSettingsResponsePtrOutput) Registry() ContainerRegistryResponsePtrOutput {
	return o.ApplyT(func(v *TaskContainerSettingsResponse) *ContainerRegistryResponse {
		if v == nil {
			return nil
		}
		return v.Registry
	}).(ContainerRegistryResponsePtrOutput)
}

func (o TaskContainerSettingsResponsePtrOutput) WorkingDirectory() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TaskContainerSettingsResponse) *string {
		if v == nil {
			return nil
		}
		return v.WorkingDirectory
	}).(pulumi.StringPtrOutput)
}

type TaskSchedulingPolicy struct {
	NodeFillType string `pulumi:"nodeFillType"`
}

// TaskSchedulingPolicyInput is an input type that accepts TaskSchedulingPolicyArgs and TaskSchedulingPolicyOutput values.
// You can construct a concrete instance of `TaskSchedulingPolicyInput` via:
//
//          TaskSchedulingPolicyArgs{...}
type TaskSchedulingPolicyInput interface {
	pulumi.Input

	ToTaskSchedulingPolicyOutput() TaskSchedulingPolicyOutput
	ToTaskSchedulingPolicyOutputWithContext(context.Context) TaskSchedulingPolicyOutput
}

type TaskSchedulingPolicyArgs struct {
	NodeFillType pulumi.StringInput `pulumi:"nodeFillType"`
}

func (TaskSchedulingPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TaskSchedulingPolicy)(nil)).Elem()
}

func (i TaskSchedulingPolicyArgs) ToTaskSchedulingPolicyOutput() TaskSchedulingPolicyOutput {
	return i.ToTaskSchedulingPolicyOutputWithContext(context.Background())
}

func (i TaskSchedulingPolicyArgs) ToTaskSchedulingPolicyOutputWithContext(ctx context.Context) TaskSchedulingPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TaskSchedulingPolicyOutput)
}

func (i TaskSchedulingPolicyArgs) ToTaskSchedulingPolicyPtrOutput() TaskSchedulingPolicyPtrOutput {
	return i.ToTaskSchedulingPolicyPtrOutputWithContext(context.Background())
}

func (i TaskSchedulingPolicyArgs) ToTaskSchedulingPolicyPtrOutputWithContext(ctx context.Context) TaskSchedulingPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TaskSchedulingPolicyOutput).ToTaskSchedulingPolicyPtrOutputWithContext(ctx)
}

// TaskSchedulingPolicyPtrInput is an input type that accepts TaskSchedulingPolicyArgs, TaskSchedulingPolicyPtr and TaskSchedulingPolicyPtrOutput values.
// You can construct a concrete instance of `TaskSchedulingPolicyPtrInput` via:
//
//          TaskSchedulingPolicyArgs{...}
//
//  or:
//
//          nil
type TaskSchedulingPolicyPtrInput interface {
	pulumi.Input

	ToTaskSchedulingPolicyPtrOutput() TaskSchedulingPolicyPtrOutput
	ToTaskSchedulingPolicyPtrOutputWithContext(context.Context) TaskSchedulingPolicyPtrOutput
}

type taskSchedulingPolicyPtrType TaskSchedulingPolicyArgs

func TaskSchedulingPolicyPtr(v *TaskSchedulingPolicyArgs) TaskSchedulingPolicyPtrInput {
	return (*taskSchedulingPolicyPtrType)(v)
}

func (*taskSchedulingPolicyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TaskSchedulingPolicy)(nil)).Elem()
}

func (i *taskSchedulingPolicyPtrType) ToTaskSchedulingPolicyPtrOutput() TaskSchedulingPolicyPtrOutput {
	return i.ToTaskSchedulingPolicyPtrOutputWithContext(context.Background())
}

func (i *taskSchedulingPolicyPtrType) ToTaskSchedulingPolicyPtrOutputWithContext(ctx context.Context) TaskSchedulingPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TaskSchedulingPolicyPtrOutput)
}

type TaskSchedulingPolicyOutput struct{ *pulumi.OutputState }

func (TaskSchedulingPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TaskSchedulingPolicy)(nil)).Elem()
}

func (o TaskSchedulingPolicyOutput) ToTaskSchedulingPolicyOutput() TaskSchedulingPolicyOutput {
	return o
}

func (o TaskSchedulingPolicyOutput) ToTaskSchedulingPolicyOutputWithContext(ctx context.Context) TaskSchedulingPolicyOutput {
	return o
}

func (o TaskSchedulingPolicyOutput) ToTaskSchedulingPolicyPtrOutput() TaskSchedulingPolicyPtrOutput {
	return o.ToTaskSchedulingPolicyPtrOutputWithContext(context.Background())
}

func (o TaskSchedulingPolicyOutput) ToTaskSchedulingPolicyPtrOutputWithContext(ctx context.Context) TaskSchedulingPolicyPtrOutput {
	return o.ApplyT(func(v TaskSchedulingPolicy) *TaskSchedulingPolicy {
		return &v
	}).(TaskSchedulingPolicyPtrOutput)
}
func (o TaskSchedulingPolicyOutput) NodeFillType() pulumi.StringOutput {
	return o.ApplyT(func(v TaskSchedulingPolicy) string { return v.NodeFillType }).(pulumi.StringOutput)
}

type TaskSchedulingPolicyPtrOutput struct{ *pulumi.OutputState }

func (TaskSchedulingPolicyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TaskSchedulingPolicy)(nil)).Elem()
}

func (o TaskSchedulingPolicyPtrOutput) ToTaskSchedulingPolicyPtrOutput() TaskSchedulingPolicyPtrOutput {
	return o
}

func (o TaskSchedulingPolicyPtrOutput) ToTaskSchedulingPolicyPtrOutputWithContext(ctx context.Context) TaskSchedulingPolicyPtrOutput {
	return o
}

func (o TaskSchedulingPolicyPtrOutput) Elem() TaskSchedulingPolicyOutput {
	return o.ApplyT(func(v *TaskSchedulingPolicy) TaskSchedulingPolicy { return *v }).(TaskSchedulingPolicyOutput)
}

func (o TaskSchedulingPolicyPtrOutput) NodeFillType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TaskSchedulingPolicy) *string {
		if v == nil {
			return nil
		}
		return &v.NodeFillType
	}).(pulumi.StringPtrOutput)
}

type TaskSchedulingPolicyResponse struct {
	NodeFillType string `pulumi:"nodeFillType"`
}

// TaskSchedulingPolicyResponseInput is an input type that accepts TaskSchedulingPolicyResponseArgs and TaskSchedulingPolicyResponseOutput values.
// You can construct a concrete instance of `TaskSchedulingPolicyResponseInput` via:
//
//          TaskSchedulingPolicyResponseArgs{...}
type TaskSchedulingPolicyResponseInput interface {
	pulumi.Input

	ToTaskSchedulingPolicyResponseOutput() TaskSchedulingPolicyResponseOutput
	ToTaskSchedulingPolicyResponseOutputWithContext(context.Context) TaskSchedulingPolicyResponseOutput
}

type TaskSchedulingPolicyResponseArgs struct {
	NodeFillType pulumi.StringInput `pulumi:"nodeFillType"`
}

func (TaskSchedulingPolicyResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TaskSchedulingPolicyResponse)(nil)).Elem()
}

func (i TaskSchedulingPolicyResponseArgs) ToTaskSchedulingPolicyResponseOutput() TaskSchedulingPolicyResponseOutput {
	return i.ToTaskSchedulingPolicyResponseOutputWithContext(context.Background())
}

func (i TaskSchedulingPolicyResponseArgs) ToTaskSchedulingPolicyResponseOutputWithContext(ctx context.Context) TaskSchedulingPolicyResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TaskSchedulingPolicyResponseOutput)
}

func (i TaskSchedulingPolicyResponseArgs) ToTaskSchedulingPolicyResponsePtrOutput() TaskSchedulingPolicyResponsePtrOutput {
	return i.ToTaskSchedulingPolicyResponsePtrOutputWithContext(context.Background())
}

func (i TaskSchedulingPolicyResponseArgs) ToTaskSchedulingPolicyResponsePtrOutputWithContext(ctx context.Context) TaskSchedulingPolicyResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TaskSchedulingPolicyResponseOutput).ToTaskSchedulingPolicyResponsePtrOutputWithContext(ctx)
}

// TaskSchedulingPolicyResponsePtrInput is an input type that accepts TaskSchedulingPolicyResponseArgs, TaskSchedulingPolicyResponsePtr and TaskSchedulingPolicyResponsePtrOutput values.
// You can construct a concrete instance of `TaskSchedulingPolicyResponsePtrInput` via:
//
//          TaskSchedulingPolicyResponseArgs{...}
//
//  or:
//
//          nil
type TaskSchedulingPolicyResponsePtrInput interface {
	pulumi.Input

	ToTaskSchedulingPolicyResponsePtrOutput() TaskSchedulingPolicyResponsePtrOutput
	ToTaskSchedulingPolicyResponsePtrOutputWithContext(context.Context) TaskSchedulingPolicyResponsePtrOutput
}

type taskSchedulingPolicyResponsePtrType TaskSchedulingPolicyResponseArgs

func TaskSchedulingPolicyResponsePtr(v *TaskSchedulingPolicyResponseArgs) TaskSchedulingPolicyResponsePtrInput {
	return (*taskSchedulingPolicyResponsePtrType)(v)
}

func (*taskSchedulingPolicyResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TaskSchedulingPolicyResponse)(nil)).Elem()
}

func (i *taskSchedulingPolicyResponsePtrType) ToTaskSchedulingPolicyResponsePtrOutput() TaskSchedulingPolicyResponsePtrOutput {
	return i.ToTaskSchedulingPolicyResponsePtrOutputWithContext(context.Background())
}

func (i *taskSchedulingPolicyResponsePtrType) ToTaskSchedulingPolicyResponsePtrOutputWithContext(ctx context.Context) TaskSchedulingPolicyResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TaskSchedulingPolicyResponsePtrOutput)
}

type TaskSchedulingPolicyResponseOutput struct{ *pulumi.OutputState }

func (TaskSchedulingPolicyResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TaskSchedulingPolicyResponse)(nil)).Elem()
}

func (o TaskSchedulingPolicyResponseOutput) ToTaskSchedulingPolicyResponseOutput() TaskSchedulingPolicyResponseOutput {
	return o
}

func (o TaskSchedulingPolicyResponseOutput) ToTaskSchedulingPolicyResponseOutputWithContext(ctx context.Context) TaskSchedulingPolicyResponseOutput {
	return o
}

func (o TaskSchedulingPolicyResponseOutput) ToTaskSchedulingPolicyResponsePtrOutput() TaskSchedulingPolicyResponsePtrOutput {
	return o.ToTaskSchedulingPolicyResponsePtrOutputWithContext(context.Background())
}

func (o TaskSchedulingPolicyResponseOutput) ToTaskSchedulingPolicyResponsePtrOutputWithContext(ctx context.Context) TaskSchedulingPolicyResponsePtrOutput {
	return o.ApplyT(func(v TaskSchedulingPolicyResponse) *TaskSchedulingPolicyResponse {
		return &v
	}).(TaskSchedulingPolicyResponsePtrOutput)
}
func (o TaskSchedulingPolicyResponseOutput) NodeFillType() pulumi.StringOutput {
	return o.ApplyT(func(v TaskSchedulingPolicyResponse) string { return v.NodeFillType }).(pulumi.StringOutput)
}

type TaskSchedulingPolicyResponsePtrOutput struct{ *pulumi.OutputState }

func (TaskSchedulingPolicyResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TaskSchedulingPolicyResponse)(nil)).Elem()
}

func (o TaskSchedulingPolicyResponsePtrOutput) ToTaskSchedulingPolicyResponsePtrOutput() TaskSchedulingPolicyResponsePtrOutput {
	return o
}

func (o TaskSchedulingPolicyResponsePtrOutput) ToTaskSchedulingPolicyResponsePtrOutputWithContext(ctx context.Context) TaskSchedulingPolicyResponsePtrOutput {
	return o
}

func (o TaskSchedulingPolicyResponsePtrOutput) Elem() TaskSchedulingPolicyResponseOutput {
	return o.ApplyT(func(v *TaskSchedulingPolicyResponse) TaskSchedulingPolicyResponse { return *v }).(TaskSchedulingPolicyResponseOutput)
}

func (o TaskSchedulingPolicyResponsePtrOutput) NodeFillType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TaskSchedulingPolicyResponse) *string {
		if v == nil {
			return nil
		}
		return &v.NodeFillType
	}).(pulumi.StringPtrOutput)
}

type UserAccount struct {
	// nonAdmin - The auto user is a standard user without elevated access. admin - The auto user is a user with elevated access and operates with full Administrator permissions. The default value is nonAdmin.
	ElevationLevel *string `pulumi:"elevationLevel"`
	// This property is ignored if specified on a Windows pool. If not specified, the user is created with the default options.
	LinuxUserConfiguration *LinuxUserConfiguration `pulumi:"linuxUserConfiguration"`
	Name                   string                  `pulumi:"name"`
	Password               string                  `pulumi:"password"`
	// This property can only be specified if the user is on a Windows pool. If not specified and on a Windows pool, the user is created with the default options.
	WindowsUserConfiguration *WindowsUserConfiguration `pulumi:"windowsUserConfiguration"`
}

// UserAccountInput is an input type that accepts UserAccountArgs and UserAccountOutput values.
// You can construct a concrete instance of `UserAccountInput` via:
//
//          UserAccountArgs{...}
type UserAccountInput interface {
	pulumi.Input

	ToUserAccountOutput() UserAccountOutput
	ToUserAccountOutputWithContext(context.Context) UserAccountOutput
}

type UserAccountArgs struct {
	// nonAdmin - The auto user is a standard user without elevated access. admin - The auto user is a user with elevated access and operates with full Administrator permissions. The default value is nonAdmin.
	ElevationLevel pulumi.StringPtrInput `pulumi:"elevationLevel"`
	// This property is ignored if specified on a Windows pool. If not specified, the user is created with the default options.
	LinuxUserConfiguration LinuxUserConfigurationPtrInput `pulumi:"linuxUserConfiguration"`
	Name                   pulumi.StringInput             `pulumi:"name"`
	Password               pulumi.StringInput             `pulumi:"password"`
	// This property can only be specified if the user is on a Windows pool. If not specified and on a Windows pool, the user is created with the default options.
	WindowsUserConfiguration WindowsUserConfigurationPtrInput `pulumi:"windowsUserConfiguration"`
}

func (UserAccountArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*UserAccount)(nil)).Elem()
}

func (i UserAccountArgs) ToUserAccountOutput() UserAccountOutput {
	return i.ToUserAccountOutputWithContext(context.Background())
}

func (i UserAccountArgs) ToUserAccountOutputWithContext(ctx context.Context) UserAccountOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserAccountOutput)
}

// UserAccountArrayInput is an input type that accepts UserAccountArray and UserAccountArrayOutput values.
// You can construct a concrete instance of `UserAccountArrayInput` via:
//
//          UserAccountArray{ UserAccountArgs{...} }
type UserAccountArrayInput interface {
	pulumi.Input

	ToUserAccountArrayOutput() UserAccountArrayOutput
	ToUserAccountArrayOutputWithContext(context.Context) UserAccountArrayOutput
}

type UserAccountArray []UserAccountInput

func (UserAccountArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]UserAccount)(nil)).Elem()
}

func (i UserAccountArray) ToUserAccountArrayOutput() UserAccountArrayOutput {
	return i.ToUserAccountArrayOutputWithContext(context.Background())
}

func (i UserAccountArray) ToUserAccountArrayOutputWithContext(ctx context.Context) UserAccountArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserAccountArrayOutput)
}

type UserAccountOutput struct{ *pulumi.OutputState }

func (UserAccountOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*UserAccount)(nil)).Elem()
}

func (o UserAccountOutput) ToUserAccountOutput() UserAccountOutput {
	return o
}

func (o UserAccountOutput) ToUserAccountOutputWithContext(ctx context.Context) UserAccountOutput {
	return o
}

// nonAdmin - The auto user is a standard user without elevated access. admin - The auto user is a user with elevated access and operates with full Administrator permissions. The default value is nonAdmin.
func (o UserAccountOutput) ElevationLevel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v UserAccount) *string { return v.ElevationLevel }).(pulumi.StringPtrOutput)
}

// This property is ignored if specified on a Windows pool. If not specified, the user is created with the default options.
func (o UserAccountOutput) LinuxUserConfiguration() LinuxUserConfigurationPtrOutput {
	return o.ApplyT(func(v UserAccount) *LinuxUserConfiguration { return v.LinuxUserConfiguration }).(LinuxUserConfigurationPtrOutput)
}

func (o UserAccountOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v UserAccount) string { return v.Name }).(pulumi.StringOutput)
}

func (o UserAccountOutput) Password() pulumi.StringOutput {
	return o.ApplyT(func(v UserAccount) string { return v.Password }).(pulumi.StringOutput)
}

// This property can only be specified if the user is on a Windows pool. If not specified and on a Windows pool, the user is created with the default options.
func (o UserAccountOutput) WindowsUserConfiguration() WindowsUserConfigurationPtrOutput {
	return o.ApplyT(func(v UserAccount) *WindowsUserConfiguration { return v.WindowsUserConfiguration }).(WindowsUserConfigurationPtrOutput)
}

type UserAccountArrayOutput struct{ *pulumi.OutputState }

func (UserAccountArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]UserAccount)(nil)).Elem()
}

func (o UserAccountArrayOutput) ToUserAccountArrayOutput() UserAccountArrayOutput {
	return o
}

func (o UserAccountArrayOutput) ToUserAccountArrayOutputWithContext(ctx context.Context) UserAccountArrayOutput {
	return o
}

func (o UserAccountArrayOutput) Index(i pulumi.IntInput) UserAccountOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) UserAccount {
		return vs[0].([]UserAccount)[vs[1].(int)]
	}).(UserAccountOutput)
}

type UserAccountResponse struct {
	// nonAdmin - The auto user is a standard user without elevated access. admin - The auto user is a user with elevated access and operates with full Administrator permissions. The default value is nonAdmin.
	ElevationLevel *string `pulumi:"elevationLevel"`
	// This property is ignored if specified on a Windows pool. If not specified, the user is created with the default options.
	LinuxUserConfiguration *LinuxUserConfigurationResponse `pulumi:"linuxUserConfiguration"`
	Name                   string                          `pulumi:"name"`
	Password               string                          `pulumi:"password"`
	// This property can only be specified if the user is on a Windows pool. If not specified and on a Windows pool, the user is created with the default options.
	WindowsUserConfiguration *WindowsUserConfigurationResponse `pulumi:"windowsUserConfiguration"`
}

// UserAccountResponseInput is an input type that accepts UserAccountResponseArgs and UserAccountResponseOutput values.
// You can construct a concrete instance of `UserAccountResponseInput` via:
//
//          UserAccountResponseArgs{...}
type UserAccountResponseInput interface {
	pulumi.Input

	ToUserAccountResponseOutput() UserAccountResponseOutput
	ToUserAccountResponseOutputWithContext(context.Context) UserAccountResponseOutput
}

type UserAccountResponseArgs struct {
	// nonAdmin - The auto user is a standard user without elevated access. admin - The auto user is a user with elevated access and operates with full Administrator permissions. The default value is nonAdmin.
	ElevationLevel pulumi.StringPtrInput `pulumi:"elevationLevel"`
	// This property is ignored if specified on a Windows pool. If not specified, the user is created with the default options.
	LinuxUserConfiguration LinuxUserConfigurationResponsePtrInput `pulumi:"linuxUserConfiguration"`
	Name                   pulumi.StringInput                     `pulumi:"name"`
	Password               pulumi.StringInput                     `pulumi:"password"`
	// This property can only be specified if the user is on a Windows pool. If not specified and on a Windows pool, the user is created with the default options.
	WindowsUserConfiguration WindowsUserConfigurationResponsePtrInput `pulumi:"windowsUserConfiguration"`
}

func (UserAccountResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*UserAccountResponse)(nil)).Elem()
}

func (i UserAccountResponseArgs) ToUserAccountResponseOutput() UserAccountResponseOutput {
	return i.ToUserAccountResponseOutputWithContext(context.Background())
}

func (i UserAccountResponseArgs) ToUserAccountResponseOutputWithContext(ctx context.Context) UserAccountResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserAccountResponseOutput)
}

// UserAccountResponseArrayInput is an input type that accepts UserAccountResponseArray and UserAccountResponseArrayOutput values.
// You can construct a concrete instance of `UserAccountResponseArrayInput` via:
//
//          UserAccountResponseArray{ UserAccountResponseArgs{...} }
type UserAccountResponseArrayInput interface {
	pulumi.Input

	ToUserAccountResponseArrayOutput() UserAccountResponseArrayOutput
	ToUserAccountResponseArrayOutputWithContext(context.Context) UserAccountResponseArrayOutput
}

type UserAccountResponseArray []UserAccountResponseInput

func (UserAccountResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]UserAccountResponse)(nil)).Elem()
}

func (i UserAccountResponseArray) ToUserAccountResponseArrayOutput() UserAccountResponseArrayOutput {
	return i.ToUserAccountResponseArrayOutputWithContext(context.Background())
}

func (i UserAccountResponseArray) ToUserAccountResponseArrayOutputWithContext(ctx context.Context) UserAccountResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserAccountResponseArrayOutput)
}

type UserAccountResponseOutput struct{ *pulumi.OutputState }

func (UserAccountResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*UserAccountResponse)(nil)).Elem()
}

func (o UserAccountResponseOutput) ToUserAccountResponseOutput() UserAccountResponseOutput {
	return o
}

func (o UserAccountResponseOutput) ToUserAccountResponseOutputWithContext(ctx context.Context) UserAccountResponseOutput {
	return o
}

// nonAdmin - The auto user is a standard user without elevated access. admin - The auto user is a user with elevated access and operates with full Administrator permissions. The default value is nonAdmin.
func (o UserAccountResponseOutput) ElevationLevel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v UserAccountResponse) *string { return v.ElevationLevel }).(pulumi.StringPtrOutput)
}

// This property is ignored if specified on a Windows pool. If not specified, the user is created with the default options.
func (o UserAccountResponseOutput) LinuxUserConfiguration() LinuxUserConfigurationResponsePtrOutput {
	return o.ApplyT(func(v UserAccountResponse) *LinuxUserConfigurationResponse { return v.LinuxUserConfiguration }).(LinuxUserConfigurationResponsePtrOutput)
}

func (o UserAccountResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v UserAccountResponse) string { return v.Name }).(pulumi.StringOutput)
}

func (o UserAccountResponseOutput) Password() pulumi.StringOutput {
	return o.ApplyT(func(v UserAccountResponse) string { return v.Password }).(pulumi.StringOutput)
}

// This property can only be specified if the user is on a Windows pool. If not specified and on a Windows pool, the user is created with the default options.
func (o UserAccountResponseOutput) WindowsUserConfiguration() WindowsUserConfigurationResponsePtrOutput {
	return o.ApplyT(func(v UserAccountResponse) *WindowsUserConfigurationResponse { return v.WindowsUserConfiguration }).(WindowsUserConfigurationResponsePtrOutput)
}

type UserAccountResponseArrayOutput struct{ *pulumi.OutputState }

func (UserAccountResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]UserAccountResponse)(nil)).Elem()
}

func (o UserAccountResponseArrayOutput) ToUserAccountResponseArrayOutput() UserAccountResponseArrayOutput {
	return o
}

func (o UserAccountResponseArrayOutput) ToUserAccountResponseArrayOutputWithContext(ctx context.Context) UserAccountResponseArrayOutput {
	return o
}

func (o UserAccountResponseArrayOutput) Index(i pulumi.IntInput) UserAccountResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) UserAccountResponse {
		return vs[0].([]UserAccountResponse)[vs[1].(int)]
	}).(UserAccountResponseOutput)
}

// Specify either the userName or autoUser property, but not both.
type UserIdentity struct {
	// The userName and autoUser properties are mutually exclusive; you must specify one but not both.
	AutoUser *AutoUserSpecification `pulumi:"autoUser"`
	// The userName and autoUser properties are mutually exclusive; you must specify one but not both.
	UserName *string `pulumi:"userName"`
}

// UserIdentityInput is an input type that accepts UserIdentityArgs and UserIdentityOutput values.
// You can construct a concrete instance of `UserIdentityInput` via:
//
//          UserIdentityArgs{...}
type UserIdentityInput interface {
	pulumi.Input

	ToUserIdentityOutput() UserIdentityOutput
	ToUserIdentityOutputWithContext(context.Context) UserIdentityOutput
}

// Specify either the userName or autoUser property, but not both.
type UserIdentityArgs struct {
	// The userName and autoUser properties are mutually exclusive; you must specify one but not both.
	AutoUser AutoUserSpecificationPtrInput `pulumi:"autoUser"`
	// The userName and autoUser properties are mutually exclusive; you must specify one but not both.
	UserName pulumi.StringPtrInput `pulumi:"userName"`
}

func (UserIdentityArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*UserIdentity)(nil)).Elem()
}

func (i UserIdentityArgs) ToUserIdentityOutput() UserIdentityOutput {
	return i.ToUserIdentityOutputWithContext(context.Background())
}

func (i UserIdentityArgs) ToUserIdentityOutputWithContext(ctx context.Context) UserIdentityOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserIdentityOutput)
}

func (i UserIdentityArgs) ToUserIdentityPtrOutput() UserIdentityPtrOutput {
	return i.ToUserIdentityPtrOutputWithContext(context.Background())
}

func (i UserIdentityArgs) ToUserIdentityPtrOutputWithContext(ctx context.Context) UserIdentityPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserIdentityOutput).ToUserIdentityPtrOutputWithContext(ctx)
}

// UserIdentityPtrInput is an input type that accepts UserIdentityArgs, UserIdentityPtr and UserIdentityPtrOutput values.
// You can construct a concrete instance of `UserIdentityPtrInput` via:
//
//          UserIdentityArgs{...}
//
//  or:
//
//          nil
type UserIdentityPtrInput interface {
	pulumi.Input

	ToUserIdentityPtrOutput() UserIdentityPtrOutput
	ToUserIdentityPtrOutputWithContext(context.Context) UserIdentityPtrOutput
}

type userIdentityPtrType UserIdentityArgs

func UserIdentityPtr(v *UserIdentityArgs) UserIdentityPtrInput {
	return (*userIdentityPtrType)(v)
}

func (*userIdentityPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**UserIdentity)(nil)).Elem()
}

func (i *userIdentityPtrType) ToUserIdentityPtrOutput() UserIdentityPtrOutput {
	return i.ToUserIdentityPtrOutputWithContext(context.Background())
}

func (i *userIdentityPtrType) ToUserIdentityPtrOutputWithContext(ctx context.Context) UserIdentityPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserIdentityPtrOutput)
}

// Specify either the userName or autoUser property, but not both.
type UserIdentityOutput struct{ *pulumi.OutputState }

func (UserIdentityOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*UserIdentity)(nil)).Elem()
}

func (o UserIdentityOutput) ToUserIdentityOutput() UserIdentityOutput {
	return o
}

func (o UserIdentityOutput) ToUserIdentityOutputWithContext(ctx context.Context) UserIdentityOutput {
	return o
}

func (o UserIdentityOutput) ToUserIdentityPtrOutput() UserIdentityPtrOutput {
	return o.ToUserIdentityPtrOutputWithContext(context.Background())
}

func (o UserIdentityOutput) ToUserIdentityPtrOutputWithContext(ctx context.Context) UserIdentityPtrOutput {
	return o.ApplyT(func(v UserIdentity) *UserIdentity {
		return &v
	}).(UserIdentityPtrOutput)
}

// The userName and autoUser properties are mutually exclusive; you must specify one but not both.
func (o UserIdentityOutput) AutoUser() AutoUserSpecificationPtrOutput {
	return o.ApplyT(func(v UserIdentity) *AutoUserSpecification { return v.AutoUser }).(AutoUserSpecificationPtrOutput)
}

// The userName and autoUser properties are mutually exclusive; you must specify one but not both.
func (o UserIdentityOutput) UserName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v UserIdentity) *string { return v.UserName }).(pulumi.StringPtrOutput)
}

type UserIdentityPtrOutput struct{ *pulumi.OutputState }

func (UserIdentityPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**UserIdentity)(nil)).Elem()
}

func (o UserIdentityPtrOutput) ToUserIdentityPtrOutput() UserIdentityPtrOutput {
	return o
}

func (o UserIdentityPtrOutput) ToUserIdentityPtrOutputWithContext(ctx context.Context) UserIdentityPtrOutput {
	return o
}

func (o UserIdentityPtrOutput) Elem() UserIdentityOutput {
	return o.ApplyT(func(v *UserIdentity) UserIdentity { return *v }).(UserIdentityOutput)
}

// The userName and autoUser properties are mutually exclusive; you must specify one but not both.
func (o UserIdentityPtrOutput) AutoUser() AutoUserSpecificationPtrOutput {
	return o.ApplyT(func(v *UserIdentity) *AutoUserSpecification {
		if v == nil {
			return nil
		}
		return v.AutoUser
	}).(AutoUserSpecificationPtrOutput)
}

// The userName and autoUser properties are mutually exclusive; you must specify one but not both.
func (o UserIdentityPtrOutput) UserName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *UserIdentity) *string {
		if v == nil {
			return nil
		}
		return v.UserName
	}).(pulumi.StringPtrOutput)
}

// Specify either the userName or autoUser property, but not both.
type UserIdentityResponse struct {
	// The userName and autoUser properties are mutually exclusive; you must specify one but not both.
	AutoUser *AutoUserSpecificationResponse `pulumi:"autoUser"`
	// The userName and autoUser properties are mutually exclusive; you must specify one but not both.
	UserName *string `pulumi:"userName"`
}

// UserIdentityResponseInput is an input type that accepts UserIdentityResponseArgs and UserIdentityResponseOutput values.
// You can construct a concrete instance of `UserIdentityResponseInput` via:
//
//          UserIdentityResponseArgs{...}
type UserIdentityResponseInput interface {
	pulumi.Input

	ToUserIdentityResponseOutput() UserIdentityResponseOutput
	ToUserIdentityResponseOutputWithContext(context.Context) UserIdentityResponseOutput
}

// Specify either the userName or autoUser property, but not both.
type UserIdentityResponseArgs struct {
	// The userName and autoUser properties are mutually exclusive; you must specify one but not both.
	AutoUser AutoUserSpecificationResponsePtrInput `pulumi:"autoUser"`
	// The userName and autoUser properties are mutually exclusive; you must specify one but not both.
	UserName pulumi.StringPtrInput `pulumi:"userName"`
}

func (UserIdentityResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*UserIdentityResponse)(nil)).Elem()
}

func (i UserIdentityResponseArgs) ToUserIdentityResponseOutput() UserIdentityResponseOutput {
	return i.ToUserIdentityResponseOutputWithContext(context.Background())
}

func (i UserIdentityResponseArgs) ToUserIdentityResponseOutputWithContext(ctx context.Context) UserIdentityResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserIdentityResponseOutput)
}

func (i UserIdentityResponseArgs) ToUserIdentityResponsePtrOutput() UserIdentityResponsePtrOutput {
	return i.ToUserIdentityResponsePtrOutputWithContext(context.Background())
}

func (i UserIdentityResponseArgs) ToUserIdentityResponsePtrOutputWithContext(ctx context.Context) UserIdentityResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserIdentityResponseOutput).ToUserIdentityResponsePtrOutputWithContext(ctx)
}

// UserIdentityResponsePtrInput is an input type that accepts UserIdentityResponseArgs, UserIdentityResponsePtr and UserIdentityResponsePtrOutput values.
// You can construct a concrete instance of `UserIdentityResponsePtrInput` via:
//
//          UserIdentityResponseArgs{...}
//
//  or:
//
//          nil
type UserIdentityResponsePtrInput interface {
	pulumi.Input

	ToUserIdentityResponsePtrOutput() UserIdentityResponsePtrOutput
	ToUserIdentityResponsePtrOutputWithContext(context.Context) UserIdentityResponsePtrOutput
}

type userIdentityResponsePtrType UserIdentityResponseArgs

func UserIdentityResponsePtr(v *UserIdentityResponseArgs) UserIdentityResponsePtrInput {
	return (*userIdentityResponsePtrType)(v)
}

func (*userIdentityResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**UserIdentityResponse)(nil)).Elem()
}

func (i *userIdentityResponsePtrType) ToUserIdentityResponsePtrOutput() UserIdentityResponsePtrOutput {
	return i.ToUserIdentityResponsePtrOutputWithContext(context.Background())
}

func (i *userIdentityResponsePtrType) ToUserIdentityResponsePtrOutputWithContext(ctx context.Context) UserIdentityResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserIdentityResponsePtrOutput)
}

// Specify either the userName or autoUser property, but not both.
type UserIdentityResponseOutput struct{ *pulumi.OutputState }

func (UserIdentityResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*UserIdentityResponse)(nil)).Elem()
}

func (o UserIdentityResponseOutput) ToUserIdentityResponseOutput() UserIdentityResponseOutput {
	return o
}

func (o UserIdentityResponseOutput) ToUserIdentityResponseOutputWithContext(ctx context.Context) UserIdentityResponseOutput {
	return o
}

func (o UserIdentityResponseOutput) ToUserIdentityResponsePtrOutput() UserIdentityResponsePtrOutput {
	return o.ToUserIdentityResponsePtrOutputWithContext(context.Background())
}

func (o UserIdentityResponseOutput) ToUserIdentityResponsePtrOutputWithContext(ctx context.Context) UserIdentityResponsePtrOutput {
	return o.ApplyT(func(v UserIdentityResponse) *UserIdentityResponse {
		return &v
	}).(UserIdentityResponsePtrOutput)
}

// The userName and autoUser properties are mutually exclusive; you must specify one but not both.
func (o UserIdentityResponseOutput) AutoUser() AutoUserSpecificationResponsePtrOutput {
	return o.ApplyT(func(v UserIdentityResponse) *AutoUserSpecificationResponse { return v.AutoUser }).(AutoUserSpecificationResponsePtrOutput)
}

// The userName and autoUser properties are mutually exclusive; you must specify one but not both.
func (o UserIdentityResponseOutput) UserName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v UserIdentityResponse) *string { return v.UserName }).(pulumi.StringPtrOutput)
}

type UserIdentityResponsePtrOutput struct{ *pulumi.OutputState }

func (UserIdentityResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**UserIdentityResponse)(nil)).Elem()
}

func (o UserIdentityResponsePtrOutput) ToUserIdentityResponsePtrOutput() UserIdentityResponsePtrOutput {
	return o
}

func (o UserIdentityResponsePtrOutput) ToUserIdentityResponsePtrOutputWithContext(ctx context.Context) UserIdentityResponsePtrOutput {
	return o
}

func (o UserIdentityResponsePtrOutput) Elem() UserIdentityResponseOutput {
	return o.ApplyT(func(v *UserIdentityResponse) UserIdentityResponse { return *v }).(UserIdentityResponseOutput)
}

// The userName and autoUser properties are mutually exclusive; you must specify one but not both.
func (o UserIdentityResponsePtrOutput) AutoUser() AutoUserSpecificationResponsePtrOutput {
	return o.ApplyT(func(v *UserIdentityResponse) *AutoUserSpecificationResponse {
		if v == nil {
			return nil
		}
		return v.AutoUser
	}).(AutoUserSpecificationResponsePtrOutput)
}

// The userName and autoUser properties are mutually exclusive; you must specify one but not both.
func (o UserIdentityResponsePtrOutput) UserName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *UserIdentityResponse) *string {
		if v == nil {
			return nil
		}
		return v.UserName
	}).(pulumi.StringPtrOutput)
}

type VirtualMachineConfiguration struct {
	// If specified, setup is performed on each node in the pool to allow tasks to run in containers. All regular tasks and job manager tasks run on this pool must specify the containerSettings property, and all other tasks may specify it.
	ContainerConfiguration *ContainerConfiguration `pulumi:"containerConfiguration"`
	// This property must be specified if the compute nodes in the pool need to have empty data disks attached to them.
	DataDisks []DataDisk `pulumi:"dataDisks"`
	// If specified, encryption is performed on each node in the pool during node provisioning.
	DiskEncryptionConfiguration *DiskEncryptionConfiguration `pulumi:"diskEncryptionConfiguration"`
	ImageReference              ImageReference               `pulumi:"imageReference"`
	// This only applies to images that contain the Windows operating system, and should only be used when you hold valid on-premises licenses for the nodes which will be deployed. If omitted, no on-premises licensing discount is applied. Values are:
	//
	//  Windows_Server - The on-premises license is for Windows Server.
	//  Windows_Client - The on-premises license is for Windows Client.
	LicenseType *string `pulumi:"licenseType"`
	// The Batch node agent is a program that runs on each node in the pool, and provides the command-and-control interface between the node and the Batch service. There are different implementations of the node agent, known as SKUs, for different operating systems. You must specify a node agent SKU which matches the selected image reference. To get the list of supported node agent SKUs along with their list of verified image references, see the 'List supported node agent SKUs' operation.
	NodeAgentSkuId string `pulumi:"nodeAgentSkuId"`
	// This property must not be specified if the imageReference specifies a Linux OS image.
	WindowsConfiguration *WindowsConfiguration `pulumi:"windowsConfiguration"`
}

// VirtualMachineConfigurationInput is an input type that accepts VirtualMachineConfigurationArgs and VirtualMachineConfigurationOutput values.
// You can construct a concrete instance of `VirtualMachineConfigurationInput` via:
//
//          VirtualMachineConfigurationArgs{...}
type VirtualMachineConfigurationInput interface {
	pulumi.Input

	ToVirtualMachineConfigurationOutput() VirtualMachineConfigurationOutput
	ToVirtualMachineConfigurationOutputWithContext(context.Context) VirtualMachineConfigurationOutput
}

type VirtualMachineConfigurationArgs struct {
	// If specified, setup is performed on each node in the pool to allow tasks to run in containers. All regular tasks and job manager tasks run on this pool must specify the containerSettings property, and all other tasks may specify it.
	ContainerConfiguration ContainerConfigurationPtrInput `pulumi:"containerConfiguration"`
	// This property must be specified if the compute nodes in the pool need to have empty data disks attached to them.
	DataDisks DataDiskArrayInput `pulumi:"dataDisks"`
	// If specified, encryption is performed on each node in the pool during node provisioning.
	DiskEncryptionConfiguration DiskEncryptionConfigurationPtrInput `pulumi:"diskEncryptionConfiguration"`
	ImageReference              ImageReferenceInput                 `pulumi:"imageReference"`
	// This only applies to images that contain the Windows operating system, and should only be used when you hold valid on-premises licenses for the nodes which will be deployed. If omitted, no on-premises licensing discount is applied. Values are:
	//
	//  Windows_Server - The on-premises license is for Windows Server.
	//  Windows_Client - The on-premises license is for Windows Client.
	LicenseType pulumi.StringPtrInput `pulumi:"licenseType"`
	// The Batch node agent is a program that runs on each node in the pool, and provides the command-and-control interface between the node and the Batch service. There are different implementations of the node agent, known as SKUs, for different operating systems. You must specify a node agent SKU which matches the selected image reference. To get the list of supported node agent SKUs along with their list of verified image references, see the 'List supported node agent SKUs' operation.
	NodeAgentSkuId pulumi.StringInput `pulumi:"nodeAgentSkuId"`
	// This property must not be specified if the imageReference specifies a Linux OS image.
	WindowsConfiguration WindowsConfigurationPtrInput `pulumi:"windowsConfiguration"`
}

func (VirtualMachineConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualMachineConfiguration)(nil)).Elem()
}

func (i VirtualMachineConfigurationArgs) ToVirtualMachineConfigurationOutput() VirtualMachineConfigurationOutput {
	return i.ToVirtualMachineConfigurationOutputWithContext(context.Background())
}

func (i VirtualMachineConfigurationArgs) ToVirtualMachineConfigurationOutputWithContext(ctx context.Context) VirtualMachineConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualMachineConfigurationOutput)
}

func (i VirtualMachineConfigurationArgs) ToVirtualMachineConfigurationPtrOutput() VirtualMachineConfigurationPtrOutput {
	return i.ToVirtualMachineConfigurationPtrOutputWithContext(context.Background())
}

func (i VirtualMachineConfigurationArgs) ToVirtualMachineConfigurationPtrOutputWithContext(ctx context.Context) VirtualMachineConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualMachineConfigurationOutput).ToVirtualMachineConfigurationPtrOutputWithContext(ctx)
}

// VirtualMachineConfigurationPtrInput is an input type that accepts VirtualMachineConfigurationArgs, VirtualMachineConfigurationPtr and VirtualMachineConfigurationPtrOutput values.
// You can construct a concrete instance of `VirtualMachineConfigurationPtrInput` via:
//
//          VirtualMachineConfigurationArgs{...}
//
//  or:
//
//          nil
type VirtualMachineConfigurationPtrInput interface {
	pulumi.Input

	ToVirtualMachineConfigurationPtrOutput() VirtualMachineConfigurationPtrOutput
	ToVirtualMachineConfigurationPtrOutputWithContext(context.Context) VirtualMachineConfigurationPtrOutput
}

type virtualMachineConfigurationPtrType VirtualMachineConfigurationArgs

func VirtualMachineConfigurationPtr(v *VirtualMachineConfigurationArgs) VirtualMachineConfigurationPtrInput {
	return (*virtualMachineConfigurationPtrType)(v)
}

func (*virtualMachineConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**VirtualMachineConfiguration)(nil)).Elem()
}

func (i *virtualMachineConfigurationPtrType) ToVirtualMachineConfigurationPtrOutput() VirtualMachineConfigurationPtrOutput {
	return i.ToVirtualMachineConfigurationPtrOutputWithContext(context.Background())
}

func (i *virtualMachineConfigurationPtrType) ToVirtualMachineConfigurationPtrOutputWithContext(ctx context.Context) VirtualMachineConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualMachineConfigurationPtrOutput)
}

type VirtualMachineConfigurationOutput struct{ *pulumi.OutputState }

func (VirtualMachineConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualMachineConfiguration)(nil)).Elem()
}

func (o VirtualMachineConfigurationOutput) ToVirtualMachineConfigurationOutput() VirtualMachineConfigurationOutput {
	return o
}

func (o VirtualMachineConfigurationOutput) ToVirtualMachineConfigurationOutputWithContext(ctx context.Context) VirtualMachineConfigurationOutput {
	return o
}

func (o VirtualMachineConfigurationOutput) ToVirtualMachineConfigurationPtrOutput() VirtualMachineConfigurationPtrOutput {
	return o.ToVirtualMachineConfigurationPtrOutputWithContext(context.Background())
}

func (o VirtualMachineConfigurationOutput) ToVirtualMachineConfigurationPtrOutputWithContext(ctx context.Context) VirtualMachineConfigurationPtrOutput {
	return o.ApplyT(func(v VirtualMachineConfiguration) *VirtualMachineConfiguration {
		return &v
	}).(VirtualMachineConfigurationPtrOutput)
}

// If specified, setup is performed on each node in the pool to allow tasks to run in containers. All regular tasks and job manager tasks run on this pool must specify the containerSettings property, and all other tasks may specify it.
func (o VirtualMachineConfigurationOutput) ContainerConfiguration() ContainerConfigurationPtrOutput {
	return o.ApplyT(func(v VirtualMachineConfiguration) *ContainerConfiguration { return v.ContainerConfiguration }).(ContainerConfigurationPtrOutput)
}

// This property must be specified if the compute nodes in the pool need to have empty data disks attached to them.
func (o VirtualMachineConfigurationOutput) DataDisks() DataDiskArrayOutput {
	return o.ApplyT(func(v VirtualMachineConfiguration) []DataDisk { return v.DataDisks }).(DataDiskArrayOutput)
}

// If specified, encryption is performed on each node in the pool during node provisioning.
func (o VirtualMachineConfigurationOutput) DiskEncryptionConfiguration() DiskEncryptionConfigurationPtrOutput {
	return o.ApplyT(func(v VirtualMachineConfiguration) *DiskEncryptionConfiguration { return v.DiskEncryptionConfiguration }).(DiskEncryptionConfigurationPtrOutput)
}

func (o VirtualMachineConfigurationOutput) ImageReference() ImageReferenceOutput {
	return o.ApplyT(func(v VirtualMachineConfiguration) ImageReference { return v.ImageReference }).(ImageReferenceOutput)
}

// This only applies to images that contain the Windows operating system, and should only be used when you hold valid on-premises licenses for the nodes which will be deployed. If omitted, no on-premises licensing discount is applied. Values are:
//
//  Windows_Server - The on-premises license is for Windows Server.
//  Windows_Client - The on-premises license is for Windows Client.
func (o VirtualMachineConfigurationOutput) LicenseType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VirtualMachineConfiguration) *string { return v.LicenseType }).(pulumi.StringPtrOutput)
}

// The Batch node agent is a program that runs on each node in the pool, and provides the command-and-control interface between the node and the Batch service. There are different implementations of the node agent, known as SKUs, for different operating systems. You must specify a node agent SKU which matches the selected image reference. To get the list of supported node agent SKUs along with their list of verified image references, see the 'List supported node agent SKUs' operation.
func (o VirtualMachineConfigurationOutput) NodeAgentSkuId() pulumi.StringOutput {
	return o.ApplyT(func(v VirtualMachineConfiguration) string { return v.NodeAgentSkuId }).(pulumi.StringOutput)
}

// This property must not be specified if the imageReference specifies a Linux OS image.
func (o VirtualMachineConfigurationOutput) WindowsConfiguration() WindowsConfigurationPtrOutput {
	return o.ApplyT(func(v VirtualMachineConfiguration) *WindowsConfiguration { return v.WindowsConfiguration }).(WindowsConfigurationPtrOutput)
}

type VirtualMachineConfigurationPtrOutput struct{ *pulumi.OutputState }

func (VirtualMachineConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VirtualMachineConfiguration)(nil)).Elem()
}

func (o VirtualMachineConfigurationPtrOutput) ToVirtualMachineConfigurationPtrOutput() VirtualMachineConfigurationPtrOutput {
	return o
}

func (o VirtualMachineConfigurationPtrOutput) ToVirtualMachineConfigurationPtrOutputWithContext(ctx context.Context) VirtualMachineConfigurationPtrOutput {
	return o
}

func (o VirtualMachineConfigurationPtrOutput) Elem() VirtualMachineConfigurationOutput {
	return o.ApplyT(func(v *VirtualMachineConfiguration) VirtualMachineConfiguration { return *v }).(VirtualMachineConfigurationOutput)
}

// If specified, setup is performed on each node in the pool to allow tasks to run in containers. All regular tasks and job manager tasks run on this pool must specify the containerSettings property, and all other tasks may specify it.
func (o VirtualMachineConfigurationPtrOutput) ContainerConfiguration() ContainerConfigurationPtrOutput {
	return o.ApplyT(func(v *VirtualMachineConfiguration) *ContainerConfiguration {
		if v == nil {
			return nil
		}
		return v.ContainerConfiguration
	}).(ContainerConfigurationPtrOutput)
}

// This property must be specified if the compute nodes in the pool need to have empty data disks attached to them.
func (o VirtualMachineConfigurationPtrOutput) DataDisks() DataDiskArrayOutput {
	return o.ApplyT(func(v *VirtualMachineConfiguration) []DataDisk {
		if v == nil {
			return nil
		}
		return v.DataDisks
	}).(DataDiskArrayOutput)
}

// If specified, encryption is performed on each node in the pool during node provisioning.
func (o VirtualMachineConfigurationPtrOutput) DiskEncryptionConfiguration() DiskEncryptionConfigurationPtrOutput {
	return o.ApplyT(func(v *VirtualMachineConfiguration) *DiskEncryptionConfiguration {
		if v == nil {
			return nil
		}
		return v.DiskEncryptionConfiguration
	}).(DiskEncryptionConfigurationPtrOutput)
}

func (o VirtualMachineConfigurationPtrOutput) ImageReference() ImageReferencePtrOutput {
	return o.ApplyT(func(v *VirtualMachineConfiguration) *ImageReference {
		if v == nil {
			return nil
		}
		return &v.ImageReference
	}).(ImageReferencePtrOutput)
}

// This only applies to images that contain the Windows operating system, and should only be used when you hold valid on-premises licenses for the nodes which will be deployed. If omitted, no on-premises licensing discount is applied. Values are:
//
//  Windows_Server - The on-premises license is for Windows Server.
//  Windows_Client - The on-premises license is for Windows Client.
func (o VirtualMachineConfigurationPtrOutput) LicenseType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VirtualMachineConfiguration) *string {
		if v == nil {
			return nil
		}
		return v.LicenseType
	}).(pulumi.StringPtrOutput)
}

// The Batch node agent is a program that runs on each node in the pool, and provides the command-and-control interface between the node and the Batch service. There are different implementations of the node agent, known as SKUs, for different operating systems. You must specify a node agent SKU which matches the selected image reference. To get the list of supported node agent SKUs along with their list of verified image references, see the 'List supported node agent SKUs' operation.
func (o VirtualMachineConfigurationPtrOutput) NodeAgentSkuId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VirtualMachineConfiguration) *string {
		if v == nil {
			return nil
		}
		return &v.NodeAgentSkuId
	}).(pulumi.StringPtrOutput)
}

// This property must not be specified if the imageReference specifies a Linux OS image.
func (o VirtualMachineConfigurationPtrOutput) WindowsConfiguration() WindowsConfigurationPtrOutput {
	return o.ApplyT(func(v *VirtualMachineConfiguration) *WindowsConfiguration {
		if v == nil {
			return nil
		}
		return v.WindowsConfiguration
	}).(WindowsConfigurationPtrOutput)
}

type VirtualMachineConfigurationResponse struct {
	// If specified, setup is performed on each node in the pool to allow tasks to run in containers. All regular tasks and job manager tasks run on this pool must specify the containerSettings property, and all other tasks may specify it.
	ContainerConfiguration *ContainerConfigurationResponse `pulumi:"containerConfiguration"`
	// This property must be specified if the compute nodes in the pool need to have empty data disks attached to them.
	DataDisks []DataDiskResponse `pulumi:"dataDisks"`
	// If specified, encryption is performed on each node in the pool during node provisioning.
	DiskEncryptionConfiguration *DiskEncryptionConfigurationResponse `pulumi:"diskEncryptionConfiguration"`
	ImageReference              ImageReferenceResponse               `pulumi:"imageReference"`
	// This only applies to images that contain the Windows operating system, and should only be used when you hold valid on-premises licenses for the nodes which will be deployed. If omitted, no on-premises licensing discount is applied. Values are:
	//
	//  Windows_Server - The on-premises license is for Windows Server.
	//  Windows_Client - The on-premises license is for Windows Client.
	LicenseType *string `pulumi:"licenseType"`
	// The Batch node agent is a program that runs on each node in the pool, and provides the command-and-control interface between the node and the Batch service. There are different implementations of the node agent, known as SKUs, for different operating systems. You must specify a node agent SKU which matches the selected image reference. To get the list of supported node agent SKUs along with their list of verified image references, see the 'List supported node agent SKUs' operation.
	NodeAgentSkuId string `pulumi:"nodeAgentSkuId"`
	// This property must not be specified if the imageReference specifies a Linux OS image.
	WindowsConfiguration *WindowsConfigurationResponse `pulumi:"windowsConfiguration"`
}

// VirtualMachineConfigurationResponseInput is an input type that accepts VirtualMachineConfigurationResponseArgs and VirtualMachineConfigurationResponseOutput values.
// You can construct a concrete instance of `VirtualMachineConfigurationResponseInput` via:
//
//          VirtualMachineConfigurationResponseArgs{...}
type VirtualMachineConfigurationResponseInput interface {
	pulumi.Input

	ToVirtualMachineConfigurationResponseOutput() VirtualMachineConfigurationResponseOutput
	ToVirtualMachineConfigurationResponseOutputWithContext(context.Context) VirtualMachineConfigurationResponseOutput
}

type VirtualMachineConfigurationResponseArgs struct {
	// If specified, setup is performed on each node in the pool to allow tasks to run in containers. All regular tasks and job manager tasks run on this pool must specify the containerSettings property, and all other tasks may specify it.
	ContainerConfiguration ContainerConfigurationResponsePtrInput `pulumi:"containerConfiguration"`
	// This property must be specified if the compute nodes in the pool need to have empty data disks attached to them.
	DataDisks DataDiskResponseArrayInput `pulumi:"dataDisks"`
	// If specified, encryption is performed on each node in the pool during node provisioning.
	DiskEncryptionConfiguration DiskEncryptionConfigurationResponsePtrInput `pulumi:"diskEncryptionConfiguration"`
	ImageReference              ImageReferenceResponseInput                 `pulumi:"imageReference"`
	// This only applies to images that contain the Windows operating system, and should only be used when you hold valid on-premises licenses for the nodes which will be deployed. If omitted, no on-premises licensing discount is applied. Values are:
	//
	//  Windows_Server - The on-premises license is for Windows Server.
	//  Windows_Client - The on-premises license is for Windows Client.
	LicenseType pulumi.StringPtrInput `pulumi:"licenseType"`
	// The Batch node agent is a program that runs on each node in the pool, and provides the command-and-control interface between the node and the Batch service. There are different implementations of the node agent, known as SKUs, for different operating systems. You must specify a node agent SKU which matches the selected image reference. To get the list of supported node agent SKUs along with their list of verified image references, see the 'List supported node agent SKUs' operation.
	NodeAgentSkuId pulumi.StringInput `pulumi:"nodeAgentSkuId"`
	// This property must not be specified if the imageReference specifies a Linux OS image.
	WindowsConfiguration WindowsConfigurationResponsePtrInput `pulumi:"windowsConfiguration"`
}

func (VirtualMachineConfigurationResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualMachineConfigurationResponse)(nil)).Elem()
}

func (i VirtualMachineConfigurationResponseArgs) ToVirtualMachineConfigurationResponseOutput() VirtualMachineConfigurationResponseOutput {
	return i.ToVirtualMachineConfigurationResponseOutputWithContext(context.Background())
}

func (i VirtualMachineConfigurationResponseArgs) ToVirtualMachineConfigurationResponseOutputWithContext(ctx context.Context) VirtualMachineConfigurationResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualMachineConfigurationResponseOutput)
}

func (i VirtualMachineConfigurationResponseArgs) ToVirtualMachineConfigurationResponsePtrOutput() VirtualMachineConfigurationResponsePtrOutput {
	return i.ToVirtualMachineConfigurationResponsePtrOutputWithContext(context.Background())
}

func (i VirtualMachineConfigurationResponseArgs) ToVirtualMachineConfigurationResponsePtrOutputWithContext(ctx context.Context) VirtualMachineConfigurationResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualMachineConfigurationResponseOutput).ToVirtualMachineConfigurationResponsePtrOutputWithContext(ctx)
}

// VirtualMachineConfigurationResponsePtrInput is an input type that accepts VirtualMachineConfigurationResponseArgs, VirtualMachineConfigurationResponsePtr and VirtualMachineConfigurationResponsePtrOutput values.
// You can construct a concrete instance of `VirtualMachineConfigurationResponsePtrInput` via:
//
//          VirtualMachineConfigurationResponseArgs{...}
//
//  or:
//
//          nil
type VirtualMachineConfigurationResponsePtrInput interface {
	pulumi.Input

	ToVirtualMachineConfigurationResponsePtrOutput() VirtualMachineConfigurationResponsePtrOutput
	ToVirtualMachineConfigurationResponsePtrOutputWithContext(context.Context) VirtualMachineConfigurationResponsePtrOutput
}

type virtualMachineConfigurationResponsePtrType VirtualMachineConfigurationResponseArgs

func VirtualMachineConfigurationResponsePtr(v *VirtualMachineConfigurationResponseArgs) VirtualMachineConfigurationResponsePtrInput {
	return (*virtualMachineConfigurationResponsePtrType)(v)
}

func (*virtualMachineConfigurationResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**VirtualMachineConfigurationResponse)(nil)).Elem()
}

func (i *virtualMachineConfigurationResponsePtrType) ToVirtualMachineConfigurationResponsePtrOutput() VirtualMachineConfigurationResponsePtrOutput {
	return i.ToVirtualMachineConfigurationResponsePtrOutputWithContext(context.Background())
}

func (i *virtualMachineConfigurationResponsePtrType) ToVirtualMachineConfigurationResponsePtrOutputWithContext(ctx context.Context) VirtualMachineConfigurationResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualMachineConfigurationResponsePtrOutput)
}

type VirtualMachineConfigurationResponseOutput struct{ *pulumi.OutputState }

func (VirtualMachineConfigurationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualMachineConfigurationResponse)(nil)).Elem()
}

func (o VirtualMachineConfigurationResponseOutput) ToVirtualMachineConfigurationResponseOutput() VirtualMachineConfigurationResponseOutput {
	return o
}

func (o VirtualMachineConfigurationResponseOutput) ToVirtualMachineConfigurationResponseOutputWithContext(ctx context.Context) VirtualMachineConfigurationResponseOutput {
	return o
}

func (o VirtualMachineConfigurationResponseOutput) ToVirtualMachineConfigurationResponsePtrOutput() VirtualMachineConfigurationResponsePtrOutput {
	return o.ToVirtualMachineConfigurationResponsePtrOutputWithContext(context.Background())
}

func (o VirtualMachineConfigurationResponseOutput) ToVirtualMachineConfigurationResponsePtrOutputWithContext(ctx context.Context) VirtualMachineConfigurationResponsePtrOutput {
	return o.ApplyT(func(v VirtualMachineConfigurationResponse) *VirtualMachineConfigurationResponse {
		return &v
	}).(VirtualMachineConfigurationResponsePtrOutput)
}

// If specified, setup is performed on each node in the pool to allow tasks to run in containers. All regular tasks and job manager tasks run on this pool must specify the containerSettings property, and all other tasks may specify it.
func (o VirtualMachineConfigurationResponseOutput) ContainerConfiguration() ContainerConfigurationResponsePtrOutput {
	return o.ApplyT(func(v VirtualMachineConfigurationResponse) *ContainerConfigurationResponse {
		return v.ContainerConfiguration
	}).(ContainerConfigurationResponsePtrOutput)
}

// This property must be specified if the compute nodes in the pool need to have empty data disks attached to them.
func (o VirtualMachineConfigurationResponseOutput) DataDisks() DataDiskResponseArrayOutput {
	return o.ApplyT(func(v VirtualMachineConfigurationResponse) []DataDiskResponse { return v.DataDisks }).(DataDiskResponseArrayOutput)
}

// If specified, encryption is performed on each node in the pool during node provisioning.
func (o VirtualMachineConfigurationResponseOutput) DiskEncryptionConfiguration() DiskEncryptionConfigurationResponsePtrOutput {
	return o.ApplyT(func(v VirtualMachineConfigurationResponse) *DiskEncryptionConfigurationResponse {
		return v.DiskEncryptionConfiguration
	}).(DiskEncryptionConfigurationResponsePtrOutput)
}

func (o VirtualMachineConfigurationResponseOutput) ImageReference() ImageReferenceResponseOutput {
	return o.ApplyT(func(v VirtualMachineConfigurationResponse) ImageReferenceResponse { return v.ImageReference }).(ImageReferenceResponseOutput)
}

// This only applies to images that contain the Windows operating system, and should only be used when you hold valid on-premises licenses for the nodes which will be deployed. If omitted, no on-premises licensing discount is applied. Values are:
//
//  Windows_Server - The on-premises license is for Windows Server.
//  Windows_Client - The on-premises license is for Windows Client.
func (o VirtualMachineConfigurationResponseOutput) LicenseType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VirtualMachineConfigurationResponse) *string { return v.LicenseType }).(pulumi.StringPtrOutput)
}

// The Batch node agent is a program that runs on each node in the pool, and provides the command-and-control interface between the node and the Batch service. There are different implementations of the node agent, known as SKUs, for different operating systems. You must specify a node agent SKU which matches the selected image reference. To get the list of supported node agent SKUs along with their list of verified image references, see the 'List supported node agent SKUs' operation.
func (o VirtualMachineConfigurationResponseOutput) NodeAgentSkuId() pulumi.StringOutput {
	return o.ApplyT(func(v VirtualMachineConfigurationResponse) string { return v.NodeAgentSkuId }).(pulumi.StringOutput)
}

// This property must not be specified if the imageReference specifies a Linux OS image.
func (o VirtualMachineConfigurationResponseOutput) WindowsConfiguration() WindowsConfigurationResponsePtrOutput {
	return o.ApplyT(func(v VirtualMachineConfigurationResponse) *WindowsConfigurationResponse {
		return v.WindowsConfiguration
	}).(WindowsConfigurationResponsePtrOutput)
}

type VirtualMachineConfigurationResponsePtrOutput struct{ *pulumi.OutputState }

func (VirtualMachineConfigurationResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VirtualMachineConfigurationResponse)(nil)).Elem()
}

func (o VirtualMachineConfigurationResponsePtrOutput) ToVirtualMachineConfigurationResponsePtrOutput() VirtualMachineConfigurationResponsePtrOutput {
	return o
}

func (o VirtualMachineConfigurationResponsePtrOutput) ToVirtualMachineConfigurationResponsePtrOutputWithContext(ctx context.Context) VirtualMachineConfigurationResponsePtrOutput {
	return o
}

func (o VirtualMachineConfigurationResponsePtrOutput) Elem() VirtualMachineConfigurationResponseOutput {
	return o.ApplyT(func(v *VirtualMachineConfigurationResponse) VirtualMachineConfigurationResponse { return *v }).(VirtualMachineConfigurationResponseOutput)
}

// If specified, setup is performed on each node in the pool to allow tasks to run in containers. All regular tasks and job manager tasks run on this pool must specify the containerSettings property, and all other tasks may specify it.
func (o VirtualMachineConfigurationResponsePtrOutput) ContainerConfiguration() ContainerConfigurationResponsePtrOutput {
	return o.ApplyT(func(v *VirtualMachineConfigurationResponse) *ContainerConfigurationResponse {
		if v == nil {
			return nil
		}
		return v.ContainerConfiguration
	}).(ContainerConfigurationResponsePtrOutput)
}

// This property must be specified if the compute nodes in the pool need to have empty data disks attached to them.
func (o VirtualMachineConfigurationResponsePtrOutput) DataDisks() DataDiskResponseArrayOutput {
	return o.ApplyT(func(v *VirtualMachineConfigurationResponse) []DataDiskResponse {
		if v == nil {
			return nil
		}
		return v.DataDisks
	}).(DataDiskResponseArrayOutput)
}

// If specified, encryption is performed on each node in the pool during node provisioning.
func (o VirtualMachineConfigurationResponsePtrOutput) DiskEncryptionConfiguration() DiskEncryptionConfigurationResponsePtrOutput {
	return o.ApplyT(func(v *VirtualMachineConfigurationResponse) *DiskEncryptionConfigurationResponse {
		if v == nil {
			return nil
		}
		return v.DiskEncryptionConfiguration
	}).(DiskEncryptionConfigurationResponsePtrOutput)
}

func (o VirtualMachineConfigurationResponsePtrOutput) ImageReference() ImageReferenceResponsePtrOutput {
	return o.ApplyT(func(v *VirtualMachineConfigurationResponse) *ImageReferenceResponse {
		if v == nil {
			return nil
		}
		return &v.ImageReference
	}).(ImageReferenceResponsePtrOutput)
}

// This only applies to images that contain the Windows operating system, and should only be used when you hold valid on-premises licenses for the nodes which will be deployed. If omitted, no on-premises licensing discount is applied. Values are:
//
//  Windows_Server - The on-premises license is for Windows Server.
//  Windows_Client - The on-premises license is for Windows Client.
func (o VirtualMachineConfigurationResponsePtrOutput) LicenseType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VirtualMachineConfigurationResponse) *string {
		if v == nil {
			return nil
		}
		return v.LicenseType
	}).(pulumi.StringPtrOutput)
}

// The Batch node agent is a program that runs on each node in the pool, and provides the command-and-control interface between the node and the Batch service. There are different implementations of the node agent, known as SKUs, for different operating systems. You must specify a node agent SKU which matches the selected image reference. To get the list of supported node agent SKUs along with their list of verified image references, see the 'List supported node agent SKUs' operation.
func (o VirtualMachineConfigurationResponsePtrOutput) NodeAgentSkuId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VirtualMachineConfigurationResponse) *string {
		if v == nil {
			return nil
		}
		return &v.NodeAgentSkuId
	}).(pulumi.StringPtrOutput)
}

// This property must not be specified if the imageReference specifies a Linux OS image.
func (o VirtualMachineConfigurationResponsePtrOutput) WindowsConfiguration() WindowsConfigurationResponsePtrOutput {
	return o.ApplyT(func(v *VirtualMachineConfigurationResponse) *WindowsConfigurationResponse {
		if v == nil {
			return nil
		}
		return v.WindowsConfiguration
	}).(WindowsConfigurationResponsePtrOutput)
}

// A VM Family and its associated core quota for the Batch account.
type VirtualMachineFamilyCoreQuotaResponse struct {
	// The core quota for the VM family for the Batch account.
	CoreQuota int `pulumi:"coreQuota"`
	// The Virtual Machine family name.
	Name string `pulumi:"name"`
}

// VirtualMachineFamilyCoreQuotaResponseInput is an input type that accepts VirtualMachineFamilyCoreQuotaResponseArgs and VirtualMachineFamilyCoreQuotaResponseOutput values.
// You can construct a concrete instance of `VirtualMachineFamilyCoreQuotaResponseInput` via:
//
//          VirtualMachineFamilyCoreQuotaResponseArgs{...}
type VirtualMachineFamilyCoreQuotaResponseInput interface {
	pulumi.Input

	ToVirtualMachineFamilyCoreQuotaResponseOutput() VirtualMachineFamilyCoreQuotaResponseOutput
	ToVirtualMachineFamilyCoreQuotaResponseOutputWithContext(context.Context) VirtualMachineFamilyCoreQuotaResponseOutput
}

// A VM Family and its associated core quota for the Batch account.
type VirtualMachineFamilyCoreQuotaResponseArgs struct {
	// The core quota for the VM family for the Batch account.
	CoreQuota pulumi.IntInput `pulumi:"coreQuota"`
	// The Virtual Machine family name.
	Name pulumi.StringInput `pulumi:"name"`
}

func (VirtualMachineFamilyCoreQuotaResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualMachineFamilyCoreQuotaResponse)(nil)).Elem()
}

func (i VirtualMachineFamilyCoreQuotaResponseArgs) ToVirtualMachineFamilyCoreQuotaResponseOutput() VirtualMachineFamilyCoreQuotaResponseOutput {
	return i.ToVirtualMachineFamilyCoreQuotaResponseOutputWithContext(context.Background())
}

func (i VirtualMachineFamilyCoreQuotaResponseArgs) ToVirtualMachineFamilyCoreQuotaResponseOutputWithContext(ctx context.Context) VirtualMachineFamilyCoreQuotaResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualMachineFamilyCoreQuotaResponseOutput)
}

// VirtualMachineFamilyCoreQuotaResponseArrayInput is an input type that accepts VirtualMachineFamilyCoreQuotaResponseArray and VirtualMachineFamilyCoreQuotaResponseArrayOutput values.
// You can construct a concrete instance of `VirtualMachineFamilyCoreQuotaResponseArrayInput` via:
//
//          VirtualMachineFamilyCoreQuotaResponseArray{ VirtualMachineFamilyCoreQuotaResponseArgs{...} }
type VirtualMachineFamilyCoreQuotaResponseArrayInput interface {
	pulumi.Input

	ToVirtualMachineFamilyCoreQuotaResponseArrayOutput() VirtualMachineFamilyCoreQuotaResponseArrayOutput
	ToVirtualMachineFamilyCoreQuotaResponseArrayOutputWithContext(context.Context) VirtualMachineFamilyCoreQuotaResponseArrayOutput
}

type VirtualMachineFamilyCoreQuotaResponseArray []VirtualMachineFamilyCoreQuotaResponseInput

func (VirtualMachineFamilyCoreQuotaResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]VirtualMachineFamilyCoreQuotaResponse)(nil)).Elem()
}

func (i VirtualMachineFamilyCoreQuotaResponseArray) ToVirtualMachineFamilyCoreQuotaResponseArrayOutput() VirtualMachineFamilyCoreQuotaResponseArrayOutput {
	return i.ToVirtualMachineFamilyCoreQuotaResponseArrayOutputWithContext(context.Background())
}

func (i VirtualMachineFamilyCoreQuotaResponseArray) ToVirtualMachineFamilyCoreQuotaResponseArrayOutputWithContext(ctx context.Context) VirtualMachineFamilyCoreQuotaResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualMachineFamilyCoreQuotaResponseArrayOutput)
}

// A VM Family and its associated core quota for the Batch account.
type VirtualMachineFamilyCoreQuotaResponseOutput struct{ *pulumi.OutputState }

func (VirtualMachineFamilyCoreQuotaResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualMachineFamilyCoreQuotaResponse)(nil)).Elem()
}

func (o VirtualMachineFamilyCoreQuotaResponseOutput) ToVirtualMachineFamilyCoreQuotaResponseOutput() VirtualMachineFamilyCoreQuotaResponseOutput {
	return o
}

func (o VirtualMachineFamilyCoreQuotaResponseOutput) ToVirtualMachineFamilyCoreQuotaResponseOutputWithContext(ctx context.Context) VirtualMachineFamilyCoreQuotaResponseOutput {
	return o
}

// The core quota for the VM family for the Batch account.
func (o VirtualMachineFamilyCoreQuotaResponseOutput) CoreQuota() pulumi.IntOutput {
	return o.ApplyT(func(v VirtualMachineFamilyCoreQuotaResponse) int { return v.CoreQuota }).(pulumi.IntOutput)
}

// The Virtual Machine family name.
func (o VirtualMachineFamilyCoreQuotaResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v VirtualMachineFamilyCoreQuotaResponse) string { return v.Name }).(pulumi.StringOutput)
}

type VirtualMachineFamilyCoreQuotaResponseArrayOutput struct{ *pulumi.OutputState }

func (VirtualMachineFamilyCoreQuotaResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]VirtualMachineFamilyCoreQuotaResponse)(nil)).Elem()
}

func (o VirtualMachineFamilyCoreQuotaResponseArrayOutput) ToVirtualMachineFamilyCoreQuotaResponseArrayOutput() VirtualMachineFamilyCoreQuotaResponseArrayOutput {
	return o
}

func (o VirtualMachineFamilyCoreQuotaResponseArrayOutput) ToVirtualMachineFamilyCoreQuotaResponseArrayOutputWithContext(ctx context.Context) VirtualMachineFamilyCoreQuotaResponseArrayOutput {
	return o
}

func (o VirtualMachineFamilyCoreQuotaResponseArrayOutput) Index(i pulumi.IntInput) VirtualMachineFamilyCoreQuotaResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) VirtualMachineFamilyCoreQuotaResponse {
		return vs[0].([]VirtualMachineFamilyCoreQuotaResponse)[vs[1].(int)]
	}).(VirtualMachineFamilyCoreQuotaResponseOutput)
}

type WindowsConfiguration struct {
	// If omitted, the default value is true.
	EnableAutomaticUpdates *bool `pulumi:"enableAutomaticUpdates"`
}

// WindowsConfigurationInput is an input type that accepts WindowsConfigurationArgs and WindowsConfigurationOutput values.
// You can construct a concrete instance of `WindowsConfigurationInput` via:
//
//          WindowsConfigurationArgs{...}
type WindowsConfigurationInput interface {
	pulumi.Input

	ToWindowsConfigurationOutput() WindowsConfigurationOutput
	ToWindowsConfigurationOutputWithContext(context.Context) WindowsConfigurationOutput
}

type WindowsConfigurationArgs struct {
	// If omitted, the default value is true.
	EnableAutomaticUpdates pulumi.BoolPtrInput `pulumi:"enableAutomaticUpdates"`
}

func (WindowsConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*WindowsConfiguration)(nil)).Elem()
}

func (i WindowsConfigurationArgs) ToWindowsConfigurationOutput() WindowsConfigurationOutput {
	return i.ToWindowsConfigurationOutputWithContext(context.Background())
}

func (i WindowsConfigurationArgs) ToWindowsConfigurationOutputWithContext(ctx context.Context) WindowsConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WindowsConfigurationOutput)
}

func (i WindowsConfigurationArgs) ToWindowsConfigurationPtrOutput() WindowsConfigurationPtrOutput {
	return i.ToWindowsConfigurationPtrOutputWithContext(context.Background())
}

func (i WindowsConfigurationArgs) ToWindowsConfigurationPtrOutputWithContext(ctx context.Context) WindowsConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WindowsConfigurationOutput).ToWindowsConfigurationPtrOutputWithContext(ctx)
}

// WindowsConfigurationPtrInput is an input type that accepts WindowsConfigurationArgs, WindowsConfigurationPtr and WindowsConfigurationPtrOutput values.
// You can construct a concrete instance of `WindowsConfigurationPtrInput` via:
//
//          WindowsConfigurationArgs{...}
//
//  or:
//
//          nil
type WindowsConfigurationPtrInput interface {
	pulumi.Input

	ToWindowsConfigurationPtrOutput() WindowsConfigurationPtrOutput
	ToWindowsConfigurationPtrOutputWithContext(context.Context) WindowsConfigurationPtrOutput
}

type windowsConfigurationPtrType WindowsConfigurationArgs

func WindowsConfigurationPtr(v *WindowsConfigurationArgs) WindowsConfigurationPtrInput {
	return (*windowsConfigurationPtrType)(v)
}

func (*windowsConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**WindowsConfiguration)(nil)).Elem()
}

func (i *windowsConfigurationPtrType) ToWindowsConfigurationPtrOutput() WindowsConfigurationPtrOutput {
	return i.ToWindowsConfigurationPtrOutputWithContext(context.Background())
}

func (i *windowsConfigurationPtrType) ToWindowsConfigurationPtrOutputWithContext(ctx context.Context) WindowsConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WindowsConfigurationPtrOutput)
}

type WindowsConfigurationOutput struct{ *pulumi.OutputState }

func (WindowsConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WindowsConfiguration)(nil)).Elem()
}

func (o WindowsConfigurationOutput) ToWindowsConfigurationOutput() WindowsConfigurationOutput {
	return o
}

func (o WindowsConfigurationOutput) ToWindowsConfigurationOutputWithContext(ctx context.Context) WindowsConfigurationOutput {
	return o
}

func (o WindowsConfigurationOutput) ToWindowsConfigurationPtrOutput() WindowsConfigurationPtrOutput {
	return o.ToWindowsConfigurationPtrOutputWithContext(context.Background())
}

func (o WindowsConfigurationOutput) ToWindowsConfigurationPtrOutputWithContext(ctx context.Context) WindowsConfigurationPtrOutput {
	return o.ApplyT(func(v WindowsConfiguration) *WindowsConfiguration {
		return &v
	}).(WindowsConfigurationPtrOutput)
}

// If omitted, the default value is true.
func (o WindowsConfigurationOutput) EnableAutomaticUpdates() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v WindowsConfiguration) *bool { return v.EnableAutomaticUpdates }).(pulumi.BoolPtrOutput)
}

type WindowsConfigurationPtrOutput struct{ *pulumi.OutputState }

func (WindowsConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**WindowsConfiguration)(nil)).Elem()
}

func (o WindowsConfigurationPtrOutput) ToWindowsConfigurationPtrOutput() WindowsConfigurationPtrOutput {
	return o
}

func (o WindowsConfigurationPtrOutput) ToWindowsConfigurationPtrOutputWithContext(ctx context.Context) WindowsConfigurationPtrOutput {
	return o
}

func (o WindowsConfigurationPtrOutput) Elem() WindowsConfigurationOutput {
	return o.ApplyT(func(v *WindowsConfiguration) WindowsConfiguration { return *v }).(WindowsConfigurationOutput)
}

// If omitted, the default value is true.
func (o WindowsConfigurationPtrOutput) EnableAutomaticUpdates() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *WindowsConfiguration) *bool {
		if v == nil {
			return nil
		}
		return v.EnableAutomaticUpdates
	}).(pulumi.BoolPtrOutput)
}

type WindowsConfigurationResponse struct {
	// If omitted, the default value is true.
	EnableAutomaticUpdates *bool `pulumi:"enableAutomaticUpdates"`
}

// WindowsConfigurationResponseInput is an input type that accepts WindowsConfigurationResponseArgs and WindowsConfigurationResponseOutput values.
// You can construct a concrete instance of `WindowsConfigurationResponseInput` via:
//
//          WindowsConfigurationResponseArgs{...}
type WindowsConfigurationResponseInput interface {
	pulumi.Input

	ToWindowsConfigurationResponseOutput() WindowsConfigurationResponseOutput
	ToWindowsConfigurationResponseOutputWithContext(context.Context) WindowsConfigurationResponseOutput
}

type WindowsConfigurationResponseArgs struct {
	// If omitted, the default value is true.
	EnableAutomaticUpdates pulumi.BoolPtrInput `pulumi:"enableAutomaticUpdates"`
}

func (WindowsConfigurationResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*WindowsConfigurationResponse)(nil)).Elem()
}

func (i WindowsConfigurationResponseArgs) ToWindowsConfigurationResponseOutput() WindowsConfigurationResponseOutput {
	return i.ToWindowsConfigurationResponseOutputWithContext(context.Background())
}

func (i WindowsConfigurationResponseArgs) ToWindowsConfigurationResponseOutputWithContext(ctx context.Context) WindowsConfigurationResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WindowsConfigurationResponseOutput)
}

func (i WindowsConfigurationResponseArgs) ToWindowsConfigurationResponsePtrOutput() WindowsConfigurationResponsePtrOutput {
	return i.ToWindowsConfigurationResponsePtrOutputWithContext(context.Background())
}

func (i WindowsConfigurationResponseArgs) ToWindowsConfigurationResponsePtrOutputWithContext(ctx context.Context) WindowsConfigurationResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WindowsConfigurationResponseOutput).ToWindowsConfigurationResponsePtrOutputWithContext(ctx)
}

// WindowsConfigurationResponsePtrInput is an input type that accepts WindowsConfigurationResponseArgs, WindowsConfigurationResponsePtr and WindowsConfigurationResponsePtrOutput values.
// You can construct a concrete instance of `WindowsConfigurationResponsePtrInput` via:
//
//          WindowsConfigurationResponseArgs{...}
//
//  or:
//
//          nil
type WindowsConfigurationResponsePtrInput interface {
	pulumi.Input

	ToWindowsConfigurationResponsePtrOutput() WindowsConfigurationResponsePtrOutput
	ToWindowsConfigurationResponsePtrOutputWithContext(context.Context) WindowsConfigurationResponsePtrOutput
}

type windowsConfigurationResponsePtrType WindowsConfigurationResponseArgs

func WindowsConfigurationResponsePtr(v *WindowsConfigurationResponseArgs) WindowsConfigurationResponsePtrInput {
	return (*windowsConfigurationResponsePtrType)(v)
}

func (*windowsConfigurationResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**WindowsConfigurationResponse)(nil)).Elem()
}

func (i *windowsConfigurationResponsePtrType) ToWindowsConfigurationResponsePtrOutput() WindowsConfigurationResponsePtrOutput {
	return i.ToWindowsConfigurationResponsePtrOutputWithContext(context.Background())
}

func (i *windowsConfigurationResponsePtrType) ToWindowsConfigurationResponsePtrOutputWithContext(ctx context.Context) WindowsConfigurationResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WindowsConfigurationResponsePtrOutput)
}

type WindowsConfigurationResponseOutput struct{ *pulumi.OutputState }

func (WindowsConfigurationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WindowsConfigurationResponse)(nil)).Elem()
}

func (o WindowsConfigurationResponseOutput) ToWindowsConfigurationResponseOutput() WindowsConfigurationResponseOutput {
	return o
}

func (o WindowsConfigurationResponseOutput) ToWindowsConfigurationResponseOutputWithContext(ctx context.Context) WindowsConfigurationResponseOutput {
	return o
}

func (o WindowsConfigurationResponseOutput) ToWindowsConfigurationResponsePtrOutput() WindowsConfigurationResponsePtrOutput {
	return o.ToWindowsConfigurationResponsePtrOutputWithContext(context.Background())
}

func (o WindowsConfigurationResponseOutput) ToWindowsConfigurationResponsePtrOutputWithContext(ctx context.Context) WindowsConfigurationResponsePtrOutput {
	return o.ApplyT(func(v WindowsConfigurationResponse) *WindowsConfigurationResponse {
		return &v
	}).(WindowsConfigurationResponsePtrOutput)
}

// If omitted, the default value is true.
func (o WindowsConfigurationResponseOutput) EnableAutomaticUpdates() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v WindowsConfigurationResponse) *bool { return v.EnableAutomaticUpdates }).(pulumi.BoolPtrOutput)
}

type WindowsConfigurationResponsePtrOutput struct{ *pulumi.OutputState }

func (WindowsConfigurationResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**WindowsConfigurationResponse)(nil)).Elem()
}

func (o WindowsConfigurationResponsePtrOutput) ToWindowsConfigurationResponsePtrOutput() WindowsConfigurationResponsePtrOutput {
	return o
}

func (o WindowsConfigurationResponsePtrOutput) ToWindowsConfigurationResponsePtrOutputWithContext(ctx context.Context) WindowsConfigurationResponsePtrOutput {
	return o
}

func (o WindowsConfigurationResponsePtrOutput) Elem() WindowsConfigurationResponseOutput {
	return o.ApplyT(func(v *WindowsConfigurationResponse) WindowsConfigurationResponse { return *v }).(WindowsConfigurationResponseOutput)
}

// If omitted, the default value is true.
func (o WindowsConfigurationResponsePtrOutput) EnableAutomaticUpdates() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *WindowsConfigurationResponse) *bool {
		if v == nil {
			return nil
		}
		return v.EnableAutomaticUpdates
	}).(pulumi.BoolPtrOutput)
}

type WindowsUserConfiguration struct {
	// Specifies login mode for the user. The default value for VirtualMachineConfiguration pools is interactive mode and for CloudServiceConfiguration pools is batch mode.
	LoginMode *string `pulumi:"loginMode"`
}

// WindowsUserConfigurationInput is an input type that accepts WindowsUserConfigurationArgs and WindowsUserConfigurationOutput values.
// You can construct a concrete instance of `WindowsUserConfigurationInput` via:
//
//          WindowsUserConfigurationArgs{...}
type WindowsUserConfigurationInput interface {
	pulumi.Input

	ToWindowsUserConfigurationOutput() WindowsUserConfigurationOutput
	ToWindowsUserConfigurationOutputWithContext(context.Context) WindowsUserConfigurationOutput
}

type WindowsUserConfigurationArgs struct {
	// Specifies login mode for the user. The default value for VirtualMachineConfiguration pools is interactive mode and for CloudServiceConfiguration pools is batch mode.
	LoginMode pulumi.StringPtrInput `pulumi:"loginMode"`
}

func (WindowsUserConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*WindowsUserConfiguration)(nil)).Elem()
}

func (i WindowsUserConfigurationArgs) ToWindowsUserConfigurationOutput() WindowsUserConfigurationOutput {
	return i.ToWindowsUserConfigurationOutputWithContext(context.Background())
}

func (i WindowsUserConfigurationArgs) ToWindowsUserConfigurationOutputWithContext(ctx context.Context) WindowsUserConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WindowsUserConfigurationOutput)
}

func (i WindowsUserConfigurationArgs) ToWindowsUserConfigurationPtrOutput() WindowsUserConfigurationPtrOutput {
	return i.ToWindowsUserConfigurationPtrOutputWithContext(context.Background())
}

func (i WindowsUserConfigurationArgs) ToWindowsUserConfigurationPtrOutputWithContext(ctx context.Context) WindowsUserConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WindowsUserConfigurationOutput).ToWindowsUserConfigurationPtrOutputWithContext(ctx)
}

// WindowsUserConfigurationPtrInput is an input type that accepts WindowsUserConfigurationArgs, WindowsUserConfigurationPtr and WindowsUserConfigurationPtrOutput values.
// You can construct a concrete instance of `WindowsUserConfigurationPtrInput` via:
//
//          WindowsUserConfigurationArgs{...}
//
//  or:
//
//          nil
type WindowsUserConfigurationPtrInput interface {
	pulumi.Input

	ToWindowsUserConfigurationPtrOutput() WindowsUserConfigurationPtrOutput
	ToWindowsUserConfigurationPtrOutputWithContext(context.Context) WindowsUserConfigurationPtrOutput
}

type windowsUserConfigurationPtrType WindowsUserConfigurationArgs

func WindowsUserConfigurationPtr(v *WindowsUserConfigurationArgs) WindowsUserConfigurationPtrInput {
	return (*windowsUserConfigurationPtrType)(v)
}

func (*windowsUserConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**WindowsUserConfiguration)(nil)).Elem()
}

func (i *windowsUserConfigurationPtrType) ToWindowsUserConfigurationPtrOutput() WindowsUserConfigurationPtrOutput {
	return i.ToWindowsUserConfigurationPtrOutputWithContext(context.Background())
}

func (i *windowsUserConfigurationPtrType) ToWindowsUserConfigurationPtrOutputWithContext(ctx context.Context) WindowsUserConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WindowsUserConfigurationPtrOutput)
}

type WindowsUserConfigurationOutput struct{ *pulumi.OutputState }

func (WindowsUserConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WindowsUserConfiguration)(nil)).Elem()
}

func (o WindowsUserConfigurationOutput) ToWindowsUserConfigurationOutput() WindowsUserConfigurationOutput {
	return o
}

func (o WindowsUserConfigurationOutput) ToWindowsUserConfigurationOutputWithContext(ctx context.Context) WindowsUserConfigurationOutput {
	return o
}

func (o WindowsUserConfigurationOutput) ToWindowsUserConfigurationPtrOutput() WindowsUserConfigurationPtrOutput {
	return o.ToWindowsUserConfigurationPtrOutputWithContext(context.Background())
}

func (o WindowsUserConfigurationOutput) ToWindowsUserConfigurationPtrOutputWithContext(ctx context.Context) WindowsUserConfigurationPtrOutput {
	return o.ApplyT(func(v WindowsUserConfiguration) *WindowsUserConfiguration {
		return &v
	}).(WindowsUserConfigurationPtrOutput)
}

// Specifies login mode for the user. The default value for VirtualMachineConfiguration pools is interactive mode and for CloudServiceConfiguration pools is batch mode.
func (o WindowsUserConfigurationOutput) LoginMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WindowsUserConfiguration) *string { return v.LoginMode }).(pulumi.StringPtrOutput)
}

type WindowsUserConfigurationPtrOutput struct{ *pulumi.OutputState }

func (WindowsUserConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**WindowsUserConfiguration)(nil)).Elem()
}

func (o WindowsUserConfigurationPtrOutput) ToWindowsUserConfigurationPtrOutput() WindowsUserConfigurationPtrOutput {
	return o
}

func (o WindowsUserConfigurationPtrOutput) ToWindowsUserConfigurationPtrOutputWithContext(ctx context.Context) WindowsUserConfigurationPtrOutput {
	return o
}

func (o WindowsUserConfigurationPtrOutput) Elem() WindowsUserConfigurationOutput {
	return o.ApplyT(func(v *WindowsUserConfiguration) WindowsUserConfiguration { return *v }).(WindowsUserConfigurationOutput)
}

// Specifies login mode for the user. The default value for VirtualMachineConfiguration pools is interactive mode and for CloudServiceConfiguration pools is batch mode.
func (o WindowsUserConfigurationPtrOutput) LoginMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WindowsUserConfiguration) *string {
		if v == nil {
			return nil
		}
		return v.LoginMode
	}).(pulumi.StringPtrOutput)
}

type WindowsUserConfigurationResponse struct {
	// Specifies login mode for the user. The default value for VirtualMachineConfiguration pools is interactive mode and for CloudServiceConfiguration pools is batch mode.
	LoginMode *string `pulumi:"loginMode"`
}

// WindowsUserConfigurationResponseInput is an input type that accepts WindowsUserConfigurationResponseArgs and WindowsUserConfigurationResponseOutput values.
// You can construct a concrete instance of `WindowsUserConfigurationResponseInput` via:
//
//          WindowsUserConfigurationResponseArgs{...}
type WindowsUserConfigurationResponseInput interface {
	pulumi.Input

	ToWindowsUserConfigurationResponseOutput() WindowsUserConfigurationResponseOutput
	ToWindowsUserConfigurationResponseOutputWithContext(context.Context) WindowsUserConfigurationResponseOutput
}

type WindowsUserConfigurationResponseArgs struct {
	// Specifies login mode for the user. The default value for VirtualMachineConfiguration pools is interactive mode and for CloudServiceConfiguration pools is batch mode.
	LoginMode pulumi.StringPtrInput `pulumi:"loginMode"`
}

func (WindowsUserConfigurationResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*WindowsUserConfigurationResponse)(nil)).Elem()
}

func (i WindowsUserConfigurationResponseArgs) ToWindowsUserConfigurationResponseOutput() WindowsUserConfigurationResponseOutput {
	return i.ToWindowsUserConfigurationResponseOutputWithContext(context.Background())
}

func (i WindowsUserConfigurationResponseArgs) ToWindowsUserConfigurationResponseOutputWithContext(ctx context.Context) WindowsUserConfigurationResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WindowsUserConfigurationResponseOutput)
}

func (i WindowsUserConfigurationResponseArgs) ToWindowsUserConfigurationResponsePtrOutput() WindowsUserConfigurationResponsePtrOutput {
	return i.ToWindowsUserConfigurationResponsePtrOutputWithContext(context.Background())
}

func (i WindowsUserConfigurationResponseArgs) ToWindowsUserConfigurationResponsePtrOutputWithContext(ctx context.Context) WindowsUserConfigurationResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WindowsUserConfigurationResponseOutput).ToWindowsUserConfigurationResponsePtrOutputWithContext(ctx)
}

// WindowsUserConfigurationResponsePtrInput is an input type that accepts WindowsUserConfigurationResponseArgs, WindowsUserConfigurationResponsePtr and WindowsUserConfigurationResponsePtrOutput values.
// You can construct a concrete instance of `WindowsUserConfigurationResponsePtrInput` via:
//
//          WindowsUserConfigurationResponseArgs{...}
//
//  or:
//
//          nil
type WindowsUserConfigurationResponsePtrInput interface {
	pulumi.Input

	ToWindowsUserConfigurationResponsePtrOutput() WindowsUserConfigurationResponsePtrOutput
	ToWindowsUserConfigurationResponsePtrOutputWithContext(context.Context) WindowsUserConfigurationResponsePtrOutput
}

type windowsUserConfigurationResponsePtrType WindowsUserConfigurationResponseArgs

func WindowsUserConfigurationResponsePtr(v *WindowsUserConfigurationResponseArgs) WindowsUserConfigurationResponsePtrInput {
	return (*windowsUserConfigurationResponsePtrType)(v)
}

func (*windowsUserConfigurationResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**WindowsUserConfigurationResponse)(nil)).Elem()
}

func (i *windowsUserConfigurationResponsePtrType) ToWindowsUserConfigurationResponsePtrOutput() WindowsUserConfigurationResponsePtrOutput {
	return i.ToWindowsUserConfigurationResponsePtrOutputWithContext(context.Background())
}

func (i *windowsUserConfigurationResponsePtrType) ToWindowsUserConfigurationResponsePtrOutputWithContext(ctx context.Context) WindowsUserConfigurationResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WindowsUserConfigurationResponsePtrOutput)
}

type WindowsUserConfigurationResponseOutput struct{ *pulumi.OutputState }

func (WindowsUserConfigurationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WindowsUserConfigurationResponse)(nil)).Elem()
}

func (o WindowsUserConfigurationResponseOutput) ToWindowsUserConfigurationResponseOutput() WindowsUserConfigurationResponseOutput {
	return o
}

func (o WindowsUserConfigurationResponseOutput) ToWindowsUserConfigurationResponseOutputWithContext(ctx context.Context) WindowsUserConfigurationResponseOutput {
	return o
}

func (o WindowsUserConfigurationResponseOutput) ToWindowsUserConfigurationResponsePtrOutput() WindowsUserConfigurationResponsePtrOutput {
	return o.ToWindowsUserConfigurationResponsePtrOutputWithContext(context.Background())
}

func (o WindowsUserConfigurationResponseOutput) ToWindowsUserConfigurationResponsePtrOutputWithContext(ctx context.Context) WindowsUserConfigurationResponsePtrOutput {
	return o.ApplyT(func(v WindowsUserConfigurationResponse) *WindowsUserConfigurationResponse {
		return &v
	}).(WindowsUserConfigurationResponsePtrOutput)
}

// Specifies login mode for the user. The default value for VirtualMachineConfiguration pools is interactive mode and for CloudServiceConfiguration pools is batch mode.
func (o WindowsUserConfigurationResponseOutput) LoginMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WindowsUserConfigurationResponse) *string { return v.LoginMode }).(pulumi.StringPtrOutput)
}

type WindowsUserConfigurationResponsePtrOutput struct{ *pulumi.OutputState }

func (WindowsUserConfigurationResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**WindowsUserConfigurationResponse)(nil)).Elem()
}

func (o WindowsUserConfigurationResponsePtrOutput) ToWindowsUserConfigurationResponsePtrOutput() WindowsUserConfigurationResponsePtrOutput {
	return o
}

func (o WindowsUserConfigurationResponsePtrOutput) ToWindowsUserConfigurationResponsePtrOutputWithContext(ctx context.Context) WindowsUserConfigurationResponsePtrOutput {
	return o
}

func (o WindowsUserConfigurationResponsePtrOutput) Elem() WindowsUserConfigurationResponseOutput {
	return o.ApplyT(func(v *WindowsUserConfigurationResponse) WindowsUserConfigurationResponse { return *v }).(WindowsUserConfigurationResponseOutput)
}

// Specifies login mode for the user. The default value for VirtualMachineConfiguration pools is interactive mode and for CloudServiceConfiguration pools is batch mode.
func (o WindowsUserConfigurationResponsePtrOutput) LoginMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WindowsUserConfigurationResponse) *string {
		if v == nil {
			return nil
		}
		return v.LoginMode
	}).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(ApplicationPackageReferenceOutput{})
	pulumi.RegisterOutputType(ApplicationPackageReferenceArrayOutput{})
	pulumi.RegisterOutputType(ApplicationPackageReferenceResponseOutput{})
	pulumi.RegisterOutputType(ApplicationPackageReferenceResponseArrayOutput{})
	pulumi.RegisterOutputType(AutoScaleRunErrorResponseOutput{})
	pulumi.RegisterOutputType(AutoScaleRunErrorResponsePtrOutput{})
	pulumi.RegisterOutputType(AutoScaleRunErrorResponseArrayOutput{})
	pulumi.RegisterOutputType(AutoScaleRunResponseOutput{})
	pulumi.RegisterOutputType(AutoScaleRunResponsePtrOutput{})
	pulumi.RegisterOutputType(AutoScaleSettingsOutput{})
	pulumi.RegisterOutputType(AutoScaleSettingsPtrOutput{})
	pulumi.RegisterOutputType(AutoScaleSettingsResponseOutput{})
	pulumi.RegisterOutputType(AutoScaleSettingsResponsePtrOutput{})
	pulumi.RegisterOutputType(AutoStorageBasePropertiesOutput{})
	pulumi.RegisterOutputType(AutoStorageBasePropertiesPtrOutput{})
	pulumi.RegisterOutputType(AutoStoragePropertiesResponseOutput{})
	pulumi.RegisterOutputType(AutoStoragePropertiesResponsePtrOutput{})
	pulumi.RegisterOutputType(AutoUserSpecificationOutput{})
	pulumi.RegisterOutputType(AutoUserSpecificationPtrOutput{})
	pulumi.RegisterOutputType(AutoUserSpecificationResponseOutput{})
	pulumi.RegisterOutputType(AutoUserSpecificationResponsePtrOutput{})
	pulumi.RegisterOutputType(AzureBlobFileSystemConfigurationOutput{})
	pulumi.RegisterOutputType(AzureBlobFileSystemConfigurationPtrOutput{})
	pulumi.RegisterOutputType(AzureBlobFileSystemConfigurationResponseOutput{})
	pulumi.RegisterOutputType(AzureBlobFileSystemConfigurationResponsePtrOutput{})
	pulumi.RegisterOutputType(AzureFileShareConfigurationOutput{})
	pulumi.RegisterOutputType(AzureFileShareConfigurationPtrOutput{})
	pulumi.RegisterOutputType(AzureFileShareConfigurationResponseOutput{})
	pulumi.RegisterOutputType(AzureFileShareConfigurationResponsePtrOutput{})
	pulumi.RegisterOutputType(BatchAccountIdentityOutput{})
	pulumi.RegisterOutputType(BatchAccountIdentityPtrOutput{})
	pulumi.RegisterOutputType(BatchAccountIdentityResponseOutput{})
	pulumi.RegisterOutputType(BatchAccountIdentityResponsePtrOutput{})
	pulumi.RegisterOutputType(CIFSMountConfigurationOutput{})
	pulumi.RegisterOutputType(CIFSMountConfigurationPtrOutput{})
	pulumi.RegisterOutputType(CIFSMountConfigurationResponseOutput{})
	pulumi.RegisterOutputType(CIFSMountConfigurationResponsePtrOutput{})
	pulumi.RegisterOutputType(CertificateReferenceOutput{})
	pulumi.RegisterOutputType(CertificateReferenceArrayOutput{})
	pulumi.RegisterOutputType(CertificateReferenceResponseOutput{})
	pulumi.RegisterOutputType(CertificateReferenceResponseArrayOutput{})
	pulumi.RegisterOutputType(CloudServiceConfigurationOutput{})
	pulumi.RegisterOutputType(CloudServiceConfigurationPtrOutput{})
	pulumi.RegisterOutputType(CloudServiceConfigurationResponseOutput{})
	pulumi.RegisterOutputType(CloudServiceConfigurationResponsePtrOutput{})
	pulumi.RegisterOutputType(ContainerConfigurationOutput{})
	pulumi.RegisterOutputType(ContainerConfigurationPtrOutput{})
	pulumi.RegisterOutputType(ContainerConfigurationResponseOutput{})
	pulumi.RegisterOutputType(ContainerConfigurationResponsePtrOutput{})
	pulumi.RegisterOutputType(ContainerRegistryOutput{})
	pulumi.RegisterOutputType(ContainerRegistryPtrOutput{})
	pulumi.RegisterOutputType(ContainerRegistryArrayOutput{})
	pulumi.RegisterOutputType(ContainerRegistryResponseOutput{})
	pulumi.RegisterOutputType(ContainerRegistryResponsePtrOutput{})
	pulumi.RegisterOutputType(ContainerRegistryResponseArrayOutput{})
	pulumi.RegisterOutputType(DataDiskOutput{})
	pulumi.RegisterOutputType(DataDiskArrayOutput{})
	pulumi.RegisterOutputType(DataDiskResponseOutput{})
	pulumi.RegisterOutputType(DataDiskResponseArrayOutput{})
	pulumi.RegisterOutputType(DeleteCertificateErrorResponseOutput{})
	pulumi.RegisterOutputType(DeleteCertificateErrorResponsePtrOutput{})
	pulumi.RegisterOutputType(DeleteCertificateErrorResponseArrayOutput{})
	pulumi.RegisterOutputType(DeploymentConfigurationOutput{})
	pulumi.RegisterOutputType(DeploymentConfigurationPtrOutput{})
	pulumi.RegisterOutputType(DeploymentConfigurationResponseOutput{})
	pulumi.RegisterOutputType(DeploymentConfigurationResponsePtrOutput{})
	pulumi.RegisterOutputType(DiskEncryptionConfigurationOutput{})
	pulumi.RegisterOutputType(DiskEncryptionConfigurationPtrOutput{})
	pulumi.RegisterOutputType(DiskEncryptionConfigurationResponseOutput{})
	pulumi.RegisterOutputType(DiskEncryptionConfigurationResponsePtrOutput{})
	pulumi.RegisterOutputType(EncryptionPropertiesOutput{})
	pulumi.RegisterOutputType(EncryptionPropertiesPtrOutput{})
	pulumi.RegisterOutputType(EncryptionPropertiesResponseOutput{})
	pulumi.RegisterOutputType(EncryptionPropertiesResponsePtrOutput{})
	pulumi.RegisterOutputType(EnvironmentSettingOutput{})
	pulumi.RegisterOutputType(EnvironmentSettingArrayOutput{})
	pulumi.RegisterOutputType(EnvironmentSettingResponseOutput{})
	pulumi.RegisterOutputType(EnvironmentSettingResponseArrayOutput{})
	pulumi.RegisterOutputType(FixedScaleSettingsOutput{})
	pulumi.RegisterOutputType(FixedScaleSettingsPtrOutput{})
	pulumi.RegisterOutputType(FixedScaleSettingsResponseOutput{})
	pulumi.RegisterOutputType(FixedScaleSettingsResponsePtrOutput{})
	pulumi.RegisterOutputType(ImageReferenceOutput{})
	pulumi.RegisterOutputType(ImageReferencePtrOutput{})
	pulumi.RegisterOutputType(ImageReferenceResponseOutput{})
	pulumi.RegisterOutputType(ImageReferenceResponsePtrOutput{})
	pulumi.RegisterOutputType(InboundNatPoolOutput{})
	pulumi.RegisterOutputType(InboundNatPoolArrayOutput{})
	pulumi.RegisterOutputType(InboundNatPoolResponseOutput{})
	pulumi.RegisterOutputType(InboundNatPoolResponseArrayOutput{})
	pulumi.RegisterOutputType(KeyVaultPropertiesOutput{})
	pulumi.RegisterOutputType(KeyVaultPropertiesPtrOutput{})
	pulumi.RegisterOutputType(KeyVaultPropertiesResponseOutput{})
	pulumi.RegisterOutputType(KeyVaultPropertiesResponsePtrOutput{})
	pulumi.RegisterOutputType(KeyVaultReferenceOutput{})
	pulumi.RegisterOutputType(KeyVaultReferencePtrOutput{})
	pulumi.RegisterOutputType(KeyVaultReferenceResponseOutput{})
	pulumi.RegisterOutputType(KeyVaultReferenceResponsePtrOutput{})
	pulumi.RegisterOutputType(LinuxUserConfigurationOutput{})
	pulumi.RegisterOutputType(LinuxUserConfigurationPtrOutput{})
	pulumi.RegisterOutputType(LinuxUserConfigurationResponseOutput{})
	pulumi.RegisterOutputType(LinuxUserConfigurationResponsePtrOutput{})
	pulumi.RegisterOutputType(MetadataItemOutput{})
	pulumi.RegisterOutputType(MetadataItemArrayOutput{})
	pulumi.RegisterOutputType(MetadataItemResponseOutput{})
	pulumi.RegisterOutputType(MetadataItemResponseArrayOutput{})
	pulumi.RegisterOutputType(MountConfigurationOutput{})
	pulumi.RegisterOutputType(MountConfigurationArrayOutput{})
	pulumi.RegisterOutputType(MountConfigurationResponseOutput{})
	pulumi.RegisterOutputType(MountConfigurationResponseArrayOutput{})
	pulumi.RegisterOutputType(NFSMountConfigurationOutput{})
	pulumi.RegisterOutputType(NFSMountConfigurationPtrOutput{})
	pulumi.RegisterOutputType(NFSMountConfigurationResponseOutput{})
	pulumi.RegisterOutputType(NFSMountConfigurationResponsePtrOutput{})
	pulumi.RegisterOutputType(NetworkConfigurationOutput{})
	pulumi.RegisterOutputType(NetworkConfigurationPtrOutput{})
	pulumi.RegisterOutputType(NetworkConfigurationResponseOutput{})
	pulumi.RegisterOutputType(NetworkConfigurationResponsePtrOutput{})
	pulumi.RegisterOutputType(NetworkSecurityGroupRuleOutput{})
	pulumi.RegisterOutputType(NetworkSecurityGroupRuleArrayOutput{})
	pulumi.RegisterOutputType(NetworkSecurityGroupRuleResponseOutput{})
	pulumi.RegisterOutputType(NetworkSecurityGroupRuleResponseArrayOutput{})
	pulumi.RegisterOutputType(PoolEndpointConfigurationOutput{})
	pulumi.RegisterOutputType(PoolEndpointConfigurationPtrOutput{})
	pulumi.RegisterOutputType(PoolEndpointConfigurationResponseOutput{})
	pulumi.RegisterOutputType(PoolEndpointConfigurationResponsePtrOutput{})
	pulumi.RegisterOutputType(PrivateEndpointConnectionResponseOutput{})
	pulumi.RegisterOutputType(PrivateEndpointConnectionResponseArrayOutput{})
	pulumi.RegisterOutputType(PrivateEndpointResponseOutput{})
	pulumi.RegisterOutputType(PrivateEndpointResponsePtrOutput{})
	pulumi.RegisterOutputType(PrivateLinkServiceConnectionStateResponseOutput{})
	pulumi.RegisterOutputType(PrivateLinkServiceConnectionStateResponsePtrOutput{})
	pulumi.RegisterOutputType(PublicIPAddressConfigurationOutput{})
	pulumi.RegisterOutputType(PublicIPAddressConfigurationPtrOutput{})
	pulumi.RegisterOutputType(PublicIPAddressConfigurationResponseOutput{})
	pulumi.RegisterOutputType(PublicIPAddressConfigurationResponsePtrOutput{})
	pulumi.RegisterOutputType(ResizeErrorResponseOutput{})
	pulumi.RegisterOutputType(ResizeErrorResponseArrayOutput{})
	pulumi.RegisterOutputType(ResizeOperationStatusResponseOutput{})
	pulumi.RegisterOutputType(ResizeOperationStatusResponsePtrOutput{})
	pulumi.RegisterOutputType(ResourceFileOutput{})
	pulumi.RegisterOutputType(ResourceFileArrayOutput{})
	pulumi.RegisterOutputType(ResourceFileResponseOutput{})
	pulumi.RegisterOutputType(ResourceFileResponseArrayOutput{})
	pulumi.RegisterOutputType(ScaleSettingsOutput{})
	pulumi.RegisterOutputType(ScaleSettingsPtrOutput{})
	pulumi.RegisterOutputType(ScaleSettingsResponseOutput{})
	pulumi.RegisterOutputType(ScaleSettingsResponsePtrOutput{})
	pulumi.RegisterOutputType(StartTaskOutput{})
	pulumi.RegisterOutputType(StartTaskPtrOutput{})
	pulumi.RegisterOutputType(StartTaskResponseOutput{})
	pulumi.RegisterOutputType(StartTaskResponsePtrOutput{})
	pulumi.RegisterOutputType(TaskContainerSettingsOutput{})
	pulumi.RegisterOutputType(TaskContainerSettingsPtrOutput{})
	pulumi.RegisterOutputType(TaskContainerSettingsResponseOutput{})
	pulumi.RegisterOutputType(TaskContainerSettingsResponsePtrOutput{})
	pulumi.RegisterOutputType(TaskSchedulingPolicyOutput{})
	pulumi.RegisterOutputType(TaskSchedulingPolicyPtrOutput{})
	pulumi.RegisterOutputType(TaskSchedulingPolicyResponseOutput{})
	pulumi.RegisterOutputType(TaskSchedulingPolicyResponsePtrOutput{})
	pulumi.RegisterOutputType(UserAccountOutput{})
	pulumi.RegisterOutputType(UserAccountArrayOutput{})
	pulumi.RegisterOutputType(UserAccountResponseOutput{})
	pulumi.RegisterOutputType(UserAccountResponseArrayOutput{})
	pulumi.RegisterOutputType(UserIdentityOutput{})
	pulumi.RegisterOutputType(UserIdentityPtrOutput{})
	pulumi.RegisterOutputType(UserIdentityResponseOutput{})
	pulumi.RegisterOutputType(UserIdentityResponsePtrOutput{})
	pulumi.RegisterOutputType(VirtualMachineConfigurationOutput{})
	pulumi.RegisterOutputType(VirtualMachineConfigurationPtrOutput{})
	pulumi.RegisterOutputType(VirtualMachineConfigurationResponseOutput{})
	pulumi.RegisterOutputType(VirtualMachineConfigurationResponsePtrOutput{})
	pulumi.RegisterOutputType(VirtualMachineFamilyCoreQuotaResponseOutput{})
	pulumi.RegisterOutputType(VirtualMachineFamilyCoreQuotaResponseArrayOutput{})
	pulumi.RegisterOutputType(WindowsConfigurationOutput{})
	pulumi.RegisterOutputType(WindowsConfigurationPtrOutput{})
	pulumi.RegisterOutputType(WindowsConfigurationResponseOutput{})
	pulumi.RegisterOutputType(WindowsConfigurationResponsePtrOutput{})
	pulumi.RegisterOutputType(WindowsUserConfigurationOutput{})
	pulumi.RegisterOutputType(WindowsUserConfigurationPtrOutput{})
	pulumi.RegisterOutputType(WindowsUserConfigurationResponseOutput{})
	pulumi.RegisterOutputType(WindowsUserConfigurationResponsePtrOutput{})
}
