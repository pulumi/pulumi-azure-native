// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v20210301preview

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// The key-value resource along with all resource properties.
type KeyValue struct {
	pulumi.CustomResourceState

	// The content type of the key-value's value.
	// Providing a proper content-type can enable transformations of values when they are retrieved by applications.
	ContentType pulumi.StringPtrOutput `pulumi:"contentType"`
	// An ETag indicating the state of a key-value within a configuration store.
	ETag pulumi.StringOutput `pulumi:"eTag"`
	// The primary identifier of a key-value.
	// The key is used in unison with the label to uniquely identify a key-value.
	Key pulumi.StringOutput `pulumi:"key"`
	// A value used to group key-values.
	// The label is used in unison with the key to uniquely identify a key-value.
	Label pulumi.StringOutput `pulumi:"label"`
	// The last time a modifying operation was performed on the given key-value.
	LastModified pulumi.StringOutput `pulumi:"lastModified"`
	// A value indicating whether the key-value is locked.
	// A locked key-value may not be modified until it is unlocked.
	Locked pulumi.BoolOutput `pulumi:"locked"`
	// The name of the resource.
	Name pulumi.StringOutput `pulumi:"name"`
	// A dictionary of tags that can help identify what a key-value may be applicable for.
	Tags pulumi.StringMapOutput `pulumi:"tags"`
	// The type of the resource.
	Type pulumi.StringOutput `pulumi:"type"`
	// The value of the key-value.
	Value pulumi.StringPtrOutput `pulumi:"value"`
}

// NewKeyValue registers a new resource with the given unique name, arguments, and options.
func NewKeyValue(ctx *pulumi.Context,
	name string, args *KeyValueArgs, opts ...pulumi.ResourceOption) (*KeyValue, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ConfigStoreName == nil {
		return nil, errors.New("invalid value for required argument 'ConfigStoreName'")
	}
	if args.ResourceGroupName == nil {
		return nil, errors.New("invalid value for required argument 'ResourceGroupName'")
	}
	aliases := pulumi.Aliases([]pulumi.Alias{
		{
			Type: pulumi.String("azure-native:appconfiguration:KeyValue"),
		},
		{
			Type: pulumi.String("azure-native:appconfiguration/v20200701preview:KeyValue"),
		},
		{
			Type: pulumi.String("azure-native:appconfiguration/v20211001preview:KeyValue"),
		},
		{
			Type: pulumi.String("azure-native:appconfiguration/v20220301preview:KeyValue"),
		},
		{
			Type: pulumi.String("azure-native:appconfiguration/v20220501:KeyValue"),
		},
	})
	opts = append(opts, aliases)
	var resource KeyValue
	err := ctx.RegisterResource("azure-native:appconfiguration/v20210301preview:KeyValue", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetKeyValue gets an existing KeyValue resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetKeyValue(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *KeyValueState, opts ...pulumi.ResourceOption) (*KeyValue, error) {
	var resource KeyValue
	err := ctx.ReadResource("azure-native:appconfiguration/v20210301preview:KeyValue", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering KeyValue resources.
type keyValueState struct {
}

type KeyValueState struct {
}

func (KeyValueState) ElementType() reflect.Type {
	return reflect.TypeOf((*keyValueState)(nil)).Elem()
}

type keyValueArgs struct {
	// The name of the configuration store.
	ConfigStoreName string `pulumi:"configStoreName"`
	// The content type of the key-value's value.
	// Providing a proper content-type can enable transformations of values when they are retrieved by applications.
	ContentType *string `pulumi:"contentType"`
	// Identifier of key and label combination. Key and label are joined by $ character. Label is optional.
	KeyValueName *string `pulumi:"keyValueName"`
	// The name of the resource group to which the container registry belongs.
	ResourceGroupName string `pulumi:"resourceGroupName"`
	// A dictionary of tags that can help identify what a key-value may be applicable for.
	Tags map[string]string `pulumi:"tags"`
	// The value of the key-value.
	Value *string `pulumi:"value"`
}

// The set of arguments for constructing a KeyValue resource.
type KeyValueArgs struct {
	// The name of the configuration store.
	ConfigStoreName pulumi.StringInput
	// The content type of the key-value's value.
	// Providing a proper content-type can enable transformations of values when they are retrieved by applications.
	ContentType pulumi.StringPtrInput
	// Identifier of key and label combination. Key and label are joined by $ character. Label is optional.
	KeyValueName pulumi.StringPtrInput
	// The name of the resource group to which the container registry belongs.
	ResourceGroupName pulumi.StringInput
	// A dictionary of tags that can help identify what a key-value may be applicable for.
	Tags pulumi.StringMapInput
	// The value of the key-value.
	Value pulumi.StringPtrInput
}

func (KeyValueArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*keyValueArgs)(nil)).Elem()
}

type KeyValueInput interface {
	pulumi.Input

	ToKeyValueOutput() KeyValueOutput
	ToKeyValueOutputWithContext(ctx context.Context) KeyValueOutput
}

func (*KeyValue) ElementType() reflect.Type {
	return reflect.TypeOf((**KeyValue)(nil)).Elem()
}

func (i *KeyValue) ToKeyValueOutput() KeyValueOutput {
	return i.ToKeyValueOutputWithContext(context.Background())
}

func (i *KeyValue) ToKeyValueOutputWithContext(ctx context.Context) KeyValueOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KeyValueOutput)
}

type KeyValueOutput struct{ *pulumi.OutputState }

func (KeyValueOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KeyValue)(nil)).Elem()
}

func (o KeyValueOutput) ToKeyValueOutput() KeyValueOutput {
	return o
}

func (o KeyValueOutput) ToKeyValueOutputWithContext(ctx context.Context) KeyValueOutput {
	return o
}

// The content type of the key-value's value.
// Providing a proper content-type can enable transformations of values when they are retrieved by applications.
func (o KeyValueOutput) ContentType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KeyValue) pulumi.StringPtrOutput { return v.ContentType }).(pulumi.StringPtrOutput)
}

// An ETag indicating the state of a key-value within a configuration store.
func (o KeyValueOutput) ETag() pulumi.StringOutput {
	return o.ApplyT(func(v *KeyValue) pulumi.StringOutput { return v.ETag }).(pulumi.StringOutput)
}

// The primary identifier of a key-value.
// The key is used in unison with the label to uniquely identify a key-value.
func (o KeyValueOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v *KeyValue) pulumi.StringOutput { return v.Key }).(pulumi.StringOutput)
}

// A value used to group key-values.
// The label is used in unison with the key to uniquely identify a key-value.
func (o KeyValueOutput) Label() pulumi.StringOutput {
	return o.ApplyT(func(v *KeyValue) pulumi.StringOutput { return v.Label }).(pulumi.StringOutput)
}

// The last time a modifying operation was performed on the given key-value.
func (o KeyValueOutput) LastModified() pulumi.StringOutput {
	return o.ApplyT(func(v *KeyValue) pulumi.StringOutput { return v.LastModified }).(pulumi.StringOutput)
}

// A value indicating whether the key-value is locked.
// A locked key-value may not be modified until it is unlocked.
func (o KeyValueOutput) Locked() pulumi.BoolOutput {
	return o.ApplyT(func(v *KeyValue) pulumi.BoolOutput { return v.Locked }).(pulumi.BoolOutput)
}

// The name of the resource.
func (o KeyValueOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *KeyValue) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// A dictionary of tags that can help identify what a key-value may be applicable for.
func (o KeyValueOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *KeyValue) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

// The type of the resource.
func (o KeyValueOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *KeyValue) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

// The value of the key-value.
func (o KeyValueOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KeyValue) pulumi.StringPtrOutput { return v.Value }).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(KeyValueOutput{})
}
