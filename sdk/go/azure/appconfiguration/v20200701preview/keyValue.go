// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v20200701preview

import (
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// The key-value resource along with all resource properties.
type KeyValue struct {
	pulumi.CustomResourceState

	// The content type of the key-value's value.
	// Providing a proper content-type can enable transformations of values when they are retrieved by applications.
	ContentType pulumi.StringPtrOutput `pulumi:"contentType"`
	// An ETag indicating the state of a key-value within a configuration store.
	ETag pulumi.StringOutput `pulumi:"eTag"`
	// The primary identifier of a key-value.
	// The key is used in unison with the label to uniquely identify a key-value.
	Key pulumi.StringOutput `pulumi:"key"`
	// A value used to group key-values.
	// The label is used in unison with the key to uniquely identify a key-value.
	Label pulumi.StringOutput `pulumi:"label"`
	// The last time a modifying operation was performed on the given key-value.
	LastModified pulumi.StringOutput `pulumi:"lastModified"`
	// A value indicating whether the key-value is locked.
	// A locked key-value may not be modified until it is unlocked.
	Locked pulumi.BoolOutput `pulumi:"locked"`
	// The name of the resource.
	Name pulumi.StringOutput `pulumi:"name"`
	// A dictionary of tags that can help identify what a key-value may be applicable for.
	Tags pulumi.StringMapOutput `pulumi:"tags"`
	// The type of the resource.
	Type pulumi.StringOutput `pulumi:"type"`
	// The value of the key-value.
	Value pulumi.StringPtrOutput `pulumi:"value"`
}

// NewKeyValue registers a new resource with the given unique name, arguments, and options.
func NewKeyValue(ctx *pulumi.Context,
	name string, args *KeyValueArgs, opts ...pulumi.ResourceOption) (*KeyValue, error) {
	if args == nil || args.ConfigStoreName == nil {
		return nil, errors.New("missing required argument 'ConfigStoreName'")
	}
	if args == nil || args.KeyValueName == nil {
		return nil, errors.New("missing required argument 'KeyValueName'")
	}
	if args == nil || args.ResourceGroupName == nil {
		return nil, errors.New("missing required argument 'ResourceGroupName'")
	}
	if args == nil {
		args = &KeyValueArgs{}
	}
	var resource KeyValue
	err := ctx.RegisterResource("azure-nextgen:appconfiguration/v20200701preview:KeyValue", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetKeyValue gets an existing KeyValue resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetKeyValue(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *KeyValueState, opts ...pulumi.ResourceOption) (*KeyValue, error) {
	var resource KeyValue
	err := ctx.ReadResource("azure-nextgen:appconfiguration/v20200701preview:KeyValue", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering KeyValue resources.
type keyValueState struct {
	// The content type of the key-value's value.
	// Providing a proper content-type can enable transformations of values when they are retrieved by applications.
	ContentType *string `pulumi:"contentType"`
	// An ETag indicating the state of a key-value within a configuration store.
	ETag *string `pulumi:"eTag"`
	// The primary identifier of a key-value.
	// The key is used in unison with the label to uniquely identify a key-value.
	Key *string `pulumi:"key"`
	// A value used to group key-values.
	// The label is used in unison with the key to uniquely identify a key-value.
	Label *string `pulumi:"label"`
	// The last time a modifying operation was performed on the given key-value.
	LastModified *string `pulumi:"lastModified"`
	// A value indicating whether the key-value is locked.
	// A locked key-value may not be modified until it is unlocked.
	Locked *bool `pulumi:"locked"`
	// The name of the resource.
	Name *string `pulumi:"name"`
	// A dictionary of tags that can help identify what a key-value may be applicable for.
	Tags map[string]string `pulumi:"tags"`
	// The type of the resource.
	Type *string `pulumi:"type"`
	// The value of the key-value.
	Value *string `pulumi:"value"`
}

type KeyValueState struct {
	// The content type of the key-value's value.
	// Providing a proper content-type can enable transformations of values when they are retrieved by applications.
	ContentType pulumi.StringPtrInput
	// An ETag indicating the state of a key-value within a configuration store.
	ETag pulumi.StringPtrInput
	// The primary identifier of a key-value.
	// The key is used in unison with the label to uniquely identify a key-value.
	Key pulumi.StringPtrInput
	// A value used to group key-values.
	// The label is used in unison with the key to uniquely identify a key-value.
	Label pulumi.StringPtrInput
	// The last time a modifying operation was performed on the given key-value.
	LastModified pulumi.StringPtrInput
	// A value indicating whether the key-value is locked.
	// A locked key-value may not be modified until it is unlocked.
	Locked pulumi.BoolPtrInput
	// The name of the resource.
	Name pulumi.StringPtrInput
	// A dictionary of tags that can help identify what a key-value may be applicable for.
	Tags pulumi.StringMapInput
	// The type of the resource.
	Type pulumi.StringPtrInput
	// The value of the key-value.
	Value pulumi.StringPtrInput
}

func (KeyValueState) ElementType() reflect.Type {
	return reflect.TypeOf((*keyValueState)(nil)).Elem()
}

type keyValueArgs struct {
	// The name of the configuration store.
	ConfigStoreName string `pulumi:"configStoreName"`
	// The content type of the key-value's value.
	// Providing a proper content-type can enable transformations of values when they are retrieved by applications.
	ContentType *string `pulumi:"contentType"`
	// Identifier of key and label combination. Key and label are joined by $ character. Label is optional.
	KeyValueName string `pulumi:"keyValueName"`
	// The name of the resource group to which the container registry belongs.
	ResourceGroupName string `pulumi:"resourceGroupName"`
	// A dictionary of tags that can help identify what a key-value may be applicable for.
	Tags map[string]string `pulumi:"tags"`
	// The value of the key-value.
	Value *string `pulumi:"value"`
}

// The set of arguments for constructing a KeyValue resource.
type KeyValueArgs struct {
	// The name of the configuration store.
	ConfigStoreName pulumi.StringInput
	// The content type of the key-value's value.
	// Providing a proper content-type can enable transformations of values when they are retrieved by applications.
	ContentType pulumi.StringPtrInput
	// Identifier of key and label combination. Key and label are joined by $ character. Label is optional.
	KeyValueName pulumi.StringInput
	// The name of the resource group to which the container registry belongs.
	ResourceGroupName pulumi.StringInput
	// A dictionary of tags that can help identify what a key-value may be applicable for.
	Tags pulumi.StringMapInput
	// The value of the key-value.
	Value pulumi.StringPtrInput
}

func (KeyValueArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*keyValueArgs)(nil)).Elem()
}
