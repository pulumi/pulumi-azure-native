// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package compute

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Specifies the caching requirements. <br><br> Possible values are: <br><br> **None** <br><br> **ReadOnly** <br><br> **ReadWrite** <br><br> Default: **None** for Standard storage. **ReadOnly** for Premium storage.
type CachingTypes string

const (
	CachingTypesNone      = CachingTypes("None")
	CachingTypesReadOnly  = CachingTypes("ReadOnly")
	CachingTypesReadWrite = CachingTypes("ReadWrite")
)

func (CachingTypes) ElementType() reflect.Type {
	return reflect.TypeOf((*CachingTypes)(nil)).Elem()
}

func (e CachingTypes) ToCachingTypesOutput() CachingTypesOutput {
	return pulumi.ToOutput(e).(CachingTypesOutput)
}

func (e CachingTypes) ToCachingTypesOutputWithContext(ctx context.Context) CachingTypesOutput {
	return pulumi.ToOutputWithContext(ctx, e).(CachingTypesOutput)
}

func (e CachingTypes) ToCachingTypesPtrOutput() CachingTypesPtrOutput {
	return e.ToCachingTypesPtrOutputWithContext(context.Background())
}

func (e CachingTypes) ToCachingTypesPtrOutputWithContext(ctx context.Context) CachingTypesPtrOutput {
	return CachingTypes(e).ToCachingTypesOutputWithContext(ctx).ToCachingTypesPtrOutputWithContext(ctx)
}

func (e CachingTypes) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e CachingTypes) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e CachingTypes) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e CachingTypes) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type CachingTypesOutput struct{ *pulumi.OutputState }

func (CachingTypesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CachingTypes)(nil)).Elem()
}

func (o CachingTypesOutput) ToCachingTypesOutput() CachingTypesOutput {
	return o
}

func (o CachingTypesOutput) ToCachingTypesOutputWithContext(ctx context.Context) CachingTypesOutput {
	return o
}

func (o CachingTypesOutput) ToCachingTypesPtrOutput() CachingTypesPtrOutput {
	return o.ToCachingTypesPtrOutputWithContext(context.Background())
}

func (o CachingTypesOutput) ToCachingTypesPtrOutputWithContext(ctx context.Context) CachingTypesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v CachingTypes) *CachingTypes {
		return &v
	}).(CachingTypesPtrOutput)
}

func (o CachingTypesOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o CachingTypesOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e CachingTypes) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o CachingTypesOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o CachingTypesOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e CachingTypes) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type CachingTypesPtrOutput struct{ *pulumi.OutputState }

func (CachingTypesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CachingTypes)(nil)).Elem()
}

func (o CachingTypesPtrOutput) ToCachingTypesPtrOutput() CachingTypesPtrOutput {
	return o
}

func (o CachingTypesPtrOutput) ToCachingTypesPtrOutputWithContext(ctx context.Context) CachingTypesPtrOutput {
	return o
}

func (o CachingTypesPtrOutput) Elem() CachingTypesOutput {
	return o.ApplyT(func(v *CachingTypes) CachingTypes {
		if v != nil {
			return *v
		}
		var ret CachingTypes
		return ret
	}).(CachingTypesOutput)
}

func (o CachingTypesPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o CachingTypesPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *CachingTypes) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// CachingTypesInput is an input type that accepts CachingTypesArgs and CachingTypesOutput values.
// You can construct a concrete instance of `CachingTypesInput` via:
//
//	CachingTypesArgs{...}
type CachingTypesInput interface {
	pulumi.Input

	ToCachingTypesOutput() CachingTypesOutput
	ToCachingTypesOutputWithContext(context.Context) CachingTypesOutput
}

var cachingTypesPtrType = reflect.TypeOf((**CachingTypes)(nil)).Elem()

type CachingTypesPtrInput interface {
	pulumi.Input

	ToCachingTypesPtrOutput() CachingTypesPtrOutput
	ToCachingTypesPtrOutputWithContext(context.Context) CachingTypesPtrOutput
}

type cachingTypesPtr string

func CachingTypesPtr(v string) CachingTypesPtrInput {
	return (*cachingTypesPtr)(&v)
}

func (*cachingTypesPtr) ElementType() reflect.Type {
	return cachingTypesPtrType
}

func (in *cachingTypesPtr) ToCachingTypesPtrOutput() CachingTypesPtrOutput {
	return pulumi.ToOutput(in).(CachingTypesPtrOutput)
}

func (in *cachingTypesPtr) ToCachingTypesPtrOutputWithContext(ctx context.Context) CachingTypesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(CachingTypesPtrOutput)
}

// Update mode for the cloud service. Role instances are allocated to update domains when the service is deployed. Updates can be initiated manually in each update domain or initiated automatically in all update domains.
// Possible Values are <br /><br />**Auto**<br /><br />**Manual** <br /><br />**Simultaneous**<br /><br />
// If not specified, the default value is Auto. If set to Manual, PUT UpdateDomain must be called to apply the update. If set to Auto, the update is automatically applied to each update domain in sequence.
type CloudServiceUpgradeMode string

const (
	CloudServiceUpgradeModeAuto         = CloudServiceUpgradeMode("Auto")
	CloudServiceUpgradeModeManual       = CloudServiceUpgradeMode("Manual")
	CloudServiceUpgradeModeSimultaneous = CloudServiceUpgradeMode("Simultaneous")
)

// The component name. Currently, the only allowable value is Microsoft-Windows-Shell-Setup.
type ComponentNames string

const (
	ComponentNames_Microsoft_Windows_Shell_Setup = ComponentNames("Microsoft-Windows-Shell-Setup")
)

func (ComponentNames) ElementType() reflect.Type {
	return reflect.TypeOf((*ComponentNames)(nil)).Elem()
}

func (e ComponentNames) ToComponentNamesOutput() ComponentNamesOutput {
	return pulumi.ToOutput(e).(ComponentNamesOutput)
}

func (e ComponentNames) ToComponentNamesOutputWithContext(ctx context.Context) ComponentNamesOutput {
	return pulumi.ToOutputWithContext(ctx, e).(ComponentNamesOutput)
}

func (e ComponentNames) ToComponentNamesPtrOutput() ComponentNamesPtrOutput {
	return e.ToComponentNamesPtrOutputWithContext(context.Background())
}

func (e ComponentNames) ToComponentNamesPtrOutputWithContext(ctx context.Context) ComponentNamesPtrOutput {
	return ComponentNames(e).ToComponentNamesOutputWithContext(ctx).ToComponentNamesPtrOutputWithContext(ctx)
}

func (e ComponentNames) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e ComponentNames) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e ComponentNames) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e ComponentNames) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type ComponentNamesOutput struct{ *pulumi.OutputState }

func (ComponentNamesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ComponentNames)(nil)).Elem()
}

func (o ComponentNamesOutput) ToComponentNamesOutput() ComponentNamesOutput {
	return o
}

func (o ComponentNamesOutput) ToComponentNamesOutputWithContext(ctx context.Context) ComponentNamesOutput {
	return o
}

func (o ComponentNamesOutput) ToComponentNamesPtrOutput() ComponentNamesPtrOutput {
	return o.ToComponentNamesPtrOutputWithContext(context.Background())
}

func (o ComponentNamesOutput) ToComponentNamesPtrOutputWithContext(ctx context.Context) ComponentNamesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ComponentNames) *ComponentNames {
		return &v
	}).(ComponentNamesPtrOutput)
}

func (o ComponentNamesOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o ComponentNamesOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e ComponentNames) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o ComponentNamesOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o ComponentNamesOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e ComponentNames) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type ComponentNamesPtrOutput struct{ *pulumi.OutputState }

func (ComponentNamesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ComponentNames)(nil)).Elem()
}

func (o ComponentNamesPtrOutput) ToComponentNamesPtrOutput() ComponentNamesPtrOutput {
	return o
}

func (o ComponentNamesPtrOutput) ToComponentNamesPtrOutputWithContext(ctx context.Context) ComponentNamesPtrOutput {
	return o
}

func (o ComponentNamesPtrOutput) Elem() ComponentNamesOutput {
	return o.ApplyT(func(v *ComponentNames) ComponentNames {
		if v != nil {
			return *v
		}
		var ret ComponentNames
		return ret
	}).(ComponentNamesOutput)
}

func (o ComponentNamesPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o ComponentNamesPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *ComponentNames) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// ComponentNamesInput is an input type that accepts ComponentNamesArgs and ComponentNamesOutput values.
// You can construct a concrete instance of `ComponentNamesInput` via:
//
//	ComponentNamesArgs{...}
type ComponentNamesInput interface {
	pulumi.Input

	ToComponentNamesOutput() ComponentNamesOutput
	ToComponentNamesOutputWithContext(context.Context) ComponentNamesOutput
}

var componentNamesPtrType = reflect.TypeOf((**ComponentNames)(nil)).Elem()

type ComponentNamesPtrInput interface {
	pulumi.Input

	ToComponentNamesPtrOutput() ComponentNamesPtrOutput
	ToComponentNamesPtrOutputWithContext(context.Context) ComponentNamesPtrOutput
}

type componentNamesPtr string

func ComponentNamesPtr(v string) ComponentNamesPtrInput {
	return (*componentNamesPtr)(&v)
}

func (*componentNamesPtr) ElementType() reflect.Type {
	return componentNamesPtrType
}

func (in *componentNamesPtr) ToComponentNamesPtrOutput() ComponentNamesPtrOutput {
	return pulumi.ToOutput(in).(ComponentNamesPtrOutput)
}

func (in *componentNamesPtr) ToComponentNamesPtrOutputWithContext(ctx context.Context) ComponentNamesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(ComponentNamesPtrOutput)
}

// Specifies the software license type that will be applied to the VMs deployed on the dedicated host. <br><br> Possible values are: <br><br> **None** <br><br> **Windows_Server_Hybrid** <br><br> **Windows_Server_Perpetual** <br><br> Default: **None**
type DedicatedHostLicenseTypes string

const (
	DedicatedHostLicenseTypesNone                      = DedicatedHostLicenseTypes("None")
	DedicatedHostLicenseTypes_Windows_Server_Hybrid    = DedicatedHostLicenseTypes("Windows_Server_Hybrid")
	DedicatedHostLicenseTypes_Windows_Server_Perpetual = DedicatedHostLicenseTypes("Windows_Server_Perpetual")
)

func (DedicatedHostLicenseTypes) ElementType() reflect.Type {
	return reflect.TypeOf((*DedicatedHostLicenseTypes)(nil)).Elem()
}

func (e DedicatedHostLicenseTypes) ToDedicatedHostLicenseTypesOutput() DedicatedHostLicenseTypesOutput {
	return pulumi.ToOutput(e).(DedicatedHostLicenseTypesOutput)
}

func (e DedicatedHostLicenseTypes) ToDedicatedHostLicenseTypesOutputWithContext(ctx context.Context) DedicatedHostLicenseTypesOutput {
	return pulumi.ToOutputWithContext(ctx, e).(DedicatedHostLicenseTypesOutput)
}

func (e DedicatedHostLicenseTypes) ToDedicatedHostLicenseTypesPtrOutput() DedicatedHostLicenseTypesPtrOutput {
	return e.ToDedicatedHostLicenseTypesPtrOutputWithContext(context.Background())
}

func (e DedicatedHostLicenseTypes) ToDedicatedHostLicenseTypesPtrOutputWithContext(ctx context.Context) DedicatedHostLicenseTypesPtrOutput {
	return DedicatedHostLicenseTypes(e).ToDedicatedHostLicenseTypesOutputWithContext(ctx).ToDedicatedHostLicenseTypesPtrOutputWithContext(ctx)
}

func (e DedicatedHostLicenseTypes) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e DedicatedHostLicenseTypes) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e DedicatedHostLicenseTypes) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e DedicatedHostLicenseTypes) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type DedicatedHostLicenseTypesOutput struct{ *pulumi.OutputState }

func (DedicatedHostLicenseTypesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DedicatedHostLicenseTypes)(nil)).Elem()
}

func (o DedicatedHostLicenseTypesOutput) ToDedicatedHostLicenseTypesOutput() DedicatedHostLicenseTypesOutput {
	return o
}

func (o DedicatedHostLicenseTypesOutput) ToDedicatedHostLicenseTypesOutputWithContext(ctx context.Context) DedicatedHostLicenseTypesOutput {
	return o
}

func (o DedicatedHostLicenseTypesOutput) ToDedicatedHostLicenseTypesPtrOutput() DedicatedHostLicenseTypesPtrOutput {
	return o.ToDedicatedHostLicenseTypesPtrOutputWithContext(context.Background())
}

func (o DedicatedHostLicenseTypesOutput) ToDedicatedHostLicenseTypesPtrOutputWithContext(ctx context.Context) DedicatedHostLicenseTypesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DedicatedHostLicenseTypes) *DedicatedHostLicenseTypes {
		return &v
	}).(DedicatedHostLicenseTypesPtrOutput)
}

func (o DedicatedHostLicenseTypesOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o DedicatedHostLicenseTypesOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e DedicatedHostLicenseTypes) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o DedicatedHostLicenseTypesOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o DedicatedHostLicenseTypesOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e DedicatedHostLicenseTypes) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type DedicatedHostLicenseTypesPtrOutput struct{ *pulumi.OutputState }

func (DedicatedHostLicenseTypesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DedicatedHostLicenseTypes)(nil)).Elem()
}

func (o DedicatedHostLicenseTypesPtrOutput) ToDedicatedHostLicenseTypesPtrOutput() DedicatedHostLicenseTypesPtrOutput {
	return o
}

func (o DedicatedHostLicenseTypesPtrOutput) ToDedicatedHostLicenseTypesPtrOutputWithContext(ctx context.Context) DedicatedHostLicenseTypesPtrOutput {
	return o
}

func (o DedicatedHostLicenseTypesPtrOutput) Elem() DedicatedHostLicenseTypesOutput {
	return o.ApplyT(func(v *DedicatedHostLicenseTypes) DedicatedHostLicenseTypes {
		if v != nil {
			return *v
		}
		var ret DedicatedHostLicenseTypes
		return ret
	}).(DedicatedHostLicenseTypesOutput)
}

func (o DedicatedHostLicenseTypesPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o DedicatedHostLicenseTypesPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *DedicatedHostLicenseTypes) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// DedicatedHostLicenseTypesInput is an input type that accepts DedicatedHostLicenseTypesArgs and DedicatedHostLicenseTypesOutput values.
// You can construct a concrete instance of `DedicatedHostLicenseTypesInput` via:
//
//	DedicatedHostLicenseTypesArgs{...}
type DedicatedHostLicenseTypesInput interface {
	pulumi.Input

	ToDedicatedHostLicenseTypesOutput() DedicatedHostLicenseTypesOutput
	ToDedicatedHostLicenseTypesOutputWithContext(context.Context) DedicatedHostLicenseTypesOutput
}

var dedicatedHostLicenseTypesPtrType = reflect.TypeOf((**DedicatedHostLicenseTypes)(nil)).Elem()

type DedicatedHostLicenseTypesPtrInput interface {
	pulumi.Input

	ToDedicatedHostLicenseTypesPtrOutput() DedicatedHostLicenseTypesPtrOutput
	ToDedicatedHostLicenseTypesPtrOutputWithContext(context.Context) DedicatedHostLicenseTypesPtrOutput
}

type dedicatedHostLicenseTypesPtr string

func DedicatedHostLicenseTypesPtr(v string) DedicatedHostLicenseTypesPtrInput {
	return (*dedicatedHostLicenseTypesPtr)(&v)
}

func (*dedicatedHostLicenseTypesPtr) ElementType() reflect.Type {
	return dedicatedHostLicenseTypesPtrType
}

func (in *dedicatedHostLicenseTypesPtr) ToDedicatedHostLicenseTypesPtrOutput() DedicatedHostLicenseTypesPtrOutput {
	return pulumi.ToOutput(in).(DedicatedHostLicenseTypesPtrOutput)
}

func (in *dedicatedHostLicenseTypesPtr) ToDedicatedHostLicenseTypesPtrOutputWithContext(ctx context.Context) DedicatedHostLicenseTypesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(DedicatedHostLicenseTypesPtrOutput)
}

// Specify what happens to the public IP when the VM is deleted
type DeleteOptions string

const (
	DeleteOptionsDelete = DeleteOptions("Delete")
	DeleteOptionsDetach = DeleteOptions("Detach")
)

// Specifies the ephemeral disk settings for operating system disk.
type DiffDiskOptions string

const (
	DiffDiskOptionsLocal = DiffDiskOptions("Local")
)

// Specifies the ephemeral disk placement for operating system disk.<br><br> Possible values are: <br><br> **CacheDisk** <br><br> **ResourceDisk** <br><br> Default: **CacheDisk** if one is configured for the VM size otherwise **ResourceDisk** is used.<br><br> Refer to VM size documentation for Windows VM at https://docs.microsoft.com/azure/virtual-machines/windows/sizes and Linux VM at https://docs.microsoft.com/azure/virtual-machines/linux/sizes to check which VM sizes exposes a cache disk.
type DiffDiskPlacement string

const (
	DiffDiskPlacementCacheDisk    = DiffDiskPlacement("CacheDisk")
	DiffDiskPlacementResourceDisk = DiffDiskPlacement("ResourceDisk")
)

// This enumerates the possible sources of a disk's creation.
type DiskCreateOption string

const (
	// Create an empty data disk of a size given by diskSizeGB.
	DiskCreateOptionEmpty = DiskCreateOption("Empty")
	// Disk will be attached to a VM.
	DiskCreateOptionAttach = DiskCreateOption("Attach")
	// Create a new disk from a platform image specified by the given imageReference or galleryImageReference.
	DiskCreateOptionFromImage = DiskCreateOption("FromImage")
	// Create a disk by importing from a blob specified by a sourceUri in a storage account specified by storageAccountId.
	DiskCreateOptionImport = DiskCreateOption("Import")
	// Create a new disk or snapshot by copying from a disk or snapshot specified by the given sourceResourceId.
	DiskCreateOptionCopy = DiskCreateOption("Copy")
	// Create a new disk by copying from a backup recovery point.
	DiskCreateOptionRestore = DiskCreateOption("Restore")
	// Create a new disk by obtaining a write token and using it to directly upload the contents of the disk.
	DiskCreateOptionUpload = DiskCreateOption("Upload")
)

// Specifies how the virtual machine should be created.<br><br> Possible values are:<br><br> **Attach** \u2013 This value is used when you are using a specialized disk to create the virtual machine.<br><br> **FromImage** \u2013 This value is used when you are using an image to create the virtual machine. If you are using a platform image, you also use the imageReference element described above. If you are using a marketplace image, you  also use the plan element previously described.
type DiskCreateOptionTypes string

const (
	DiskCreateOptionTypesFromImage = DiskCreateOptionTypes("FromImage")
	DiskCreateOptionTypesEmpty     = DiskCreateOptionTypes("Empty")
	DiskCreateOptionTypesAttach    = DiskCreateOptionTypes("Attach")
)

// Specifies whether OS Disk should be deleted or detached upon VM deletion. <br><br> Possible values: <br><br> **Delete** If this value is used, the OS disk is deleted when VM is deleted.<br><br> **Detach** If this value is used, the os disk is retained after VM is deleted. <br><br> The default value is set to **detach**. For an ephemeral OS Disk, the default value is set to **Delete**. User cannot change the delete option for ephemeral OS Disk.
type DiskDeleteOptionTypes string

const (
	DiskDeleteOptionTypesDelete = DiskDeleteOptionTypes("Delete")
	DiskDeleteOptionTypesDetach = DiskDeleteOptionTypes("Detach")
)

// Specifies the detach behavior to be used while detaching a disk or which is already in the process of detachment from the virtual machine. Supported values: **ForceDetach**. <br><br> detachOption: **ForceDetach** is applicable only for managed data disks. If a previous detachment attempt of the data disk did not complete due to an unexpected failure from the virtual machine and the disk is still not released then use force-detach as a last resort option to detach the disk forcibly from the VM. All writes might not have been flushed when using this detach behavior. <br><br> This feature is still in preview mode and is not supported for VirtualMachineScaleSet. To force-detach a data disk update toBeDetached to 'true' along with setting detachOption: 'ForceDetach'.
type DiskDetachOptionTypes string

const (
	DiskDetachOptionTypesForceDetach = DiskDetachOptionTypes("ForceDetach")
)

// The type of Managed Identity used by the DiskEncryptionSet. Only SystemAssigned is supported for new creations. Disk Encryption Sets can be updated with Identity type None during migration of subscription to a new Azure Active Directory tenant; it will cause the encrypted resources to lose access to the keys.
type DiskEncryptionSetIdentityType string

const (
	DiskEncryptionSetIdentityTypeSystemAssigned = DiskEncryptionSetIdentityType("SystemAssigned")
	DiskEncryptionSetIdentityTypeNone           = DiskEncryptionSetIdentityType("None")
)

// The type of key used to encrypt the data of the disk.
type DiskEncryptionSetType string

const (
	// Resource using diskEncryptionSet would be encrypted at rest with Customer managed key that can be changed and revoked by a customer.
	DiskEncryptionSetTypeEncryptionAtRestWithCustomerKey = DiskEncryptionSetType("EncryptionAtRestWithCustomerKey")
	// Resource using diskEncryptionSet would be encrypted at rest with two layers of encryption. One of the keys is Customer managed and the other key is Platform managed.
	DiskEncryptionSetTypeEncryptionAtRestWithPlatformAndCustomerKeys = DiskEncryptionSetType("EncryptionAtRestWithPlatformAndCustomerKeys")
)

// Specifies the SecurityType of the VM. Applicable for OS disks only.
type DiskSecurityTypes string

const (
	// Trusted Launch provides security features such as secure boot and virtual Trusted Platform Module (vTPM)
	DiskSecurityTypesTrustedLaunch = DiskSecurityTypes("TrustedLaunch")
)

// The sku name.
type DiskStorageAccountTypes string

const (
	// Standard HDD locally redundant storage. Best for backup, non-critical, and infrequent access.
	DiskStorageAccountTypes_Standard_LRS = DiskStorageAccountTypes("Standard_LRS")
	// Premium SSD locally redundant storage. Best for production and performance sensitive workloads.
	DiskStorageAccountTypes_Premium_LRS = DiskStorageAccountTypes("Premium_LRS")
	// Standard SSD locally redundant storage. Best for web servers, lightly used enterprise applications and dev/test.
	DiskStorageAccountTypes_StandardSSD_LRS = DiskStorageAccountTypes("StandardSSD_LRS")
	// Ultra SSD locally redundant storage. Best for IO-intensive workloads such as SAP HANA, top tier databases (for example, SQL, Oracle), and other transaction-heavy workloads.
	DiskStorageAccountTypes_UltraSSD_LRS = DiskStorageAccountTypes("UltraSSD_LRS")
	// Premium SSD zone redundant storage. Best for the production workloads that need storage resiliency against zone failures.
	DiskStorageAccountTypes_Premium_ZRS = DiskStorageAccountTypes("Premium_ZRS")
	// Standard SSD zone redundant storage. Best for web servers, lightly used enterprise applications and dev/test that need storage resiliency against zone failures.
	DiskStorageAccountTypes_StandardSSD_ZRS = DiskStorageAccountTypes("StandardSSD_ZRS")
)

// The type of key used to encrypt the data of the disk.
type EncryptionType string

const (
	// Disk is encrypted at rest with Platform managed key. It is the default encryption type. This is not a valid encryption type for disk encryption sets.
	EncryptionTypeEncryptionAtRestWithPlatformKey = EncryptionType("EncryptionAtRestWithPlatformKey")
	// Disk is encrypted at rest with Customer managed key that can be changed and revoked by a customer.
	EncryptionTypeEncryptionAtRestWithCustomerKey = EncryptionType("EncryptionAtRestWithCustomerKey")
	// Disk is encrypted at rest with 2 layers of encryption. One of the keys is Customer managed and the other key is Platform managed.
	EncryptionTypeEncryptionAtRestWithPlatformAndCustomerKeys = EncryptionType("EncryptionAtRestWithPlatformAndCustomerKeys")
)

// The type of the extended location.
type ExtendedLocationTypes string

const (
	ExtendedLocationTypesEdgeZone = ExtendedLocationTypes("EdgeZone")
)

// This property allows you to specify the permission of sharing gallery. <br><br> Possible values are: <br><br> **Private** <br><br> **Groups**
type GallerySharingPermissionTypes string

const (
	GallerySharingPermissionTypesPrivate = GallerySharingPermissionTypes("Private")
	GallerySharingPermissionTypesGroups  = GallerySharingPermissionTypes("Groups")
)

// The host caching of the disk. Valid values are 'None', 'ReadOnly', and 'ReadWrite'
type HostCaching string

const (
	HostCachingNone      = HostCaching("None")
	HostCachingReadOnly  = HostCaching("ReadOnly")
	HostCachingReadWrite = HostCaching("ReadWrite")
)

func (HostCaching) ElementType() reflect.Type {
	return reflect.TypeOf((*HostCaching)(nil)).Elem()
}

func (e HostCaching) ToHostCachingOutput() HostCachingOutput {
	return pulumi.ToOutput(e).(HostCachingOutput)
}

func (e HostCaching) ToHostCachingOutputWithContext(ctx context.Context) HostCachingOutput {
	return pulumi.ToOutputWithContext(ctx, e).(HostCachingOutput)
}

func (e HostCaching) ToHostCachingPtrOutput() HostCachingPtrOutput {
	return e.ToHostCachingPtrOutputWithContext(context.Background())
}

func (e HostCaching) ToHostCachingPtrOutputWithContext(ctx context.Context) HostCachingPtrOutput {
	return HostCaching(e).ToHostCachingOutputWithContext(ctx).ToHostCachingPtrOutputWithContext(ctx)
}

func (e HostCaching) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e HostCaching) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e HostCaching) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e HostCaching) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type HostCachingOutput struct{ *pulumi.OutputState }

func (HostCachingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HostCaching)(nil)).Elem()
}

func (o HostCachingOutput) ToHostCachingOutput() HostCachingOutput {
	return o
}

func (o HostCachingOutput) ToHostCachingOutputWithContext(ctx context.Context) HostCachingOutput {
	return o
}

func (o HostCachingOutput) ToHostCachingPtrOutput() HostCachingPtrOutput {
	return o.ToHostCachingPtrOutputWithContext(context.Background())
}

func (o HostCachingOutput) ToHostCachingPtrOutputWithContext(ctx context.Context) HostCachingPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v HostCaching) *HostCaching {
		return &v
	}).(HostCachingPtrOutput)
}

func (o HostCachingOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o HostCachingOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e HostCaching) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o HostCachingOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o HostCachingOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e HostCaching) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type HostCachingPtrOutput struct{ *pulumi.OutputState }

func (HostCachingPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**HostCaching)(nil)).Elem()
}

func (o HostCachingPtrOutput) ToHostCachingPtrOutput() HostCachingPtrOutput {
	return o
}

func (o HostCachingPtrOutput) ToHostCachingPtrOutputWithContext(ctx context.Context) HostCachingPtrOutput {
	return o
}

func (o HostCachingPtrOutput) Elem() HostCachingOutput {
	return o.ApplyT(func(v *HostCaching) HostCaching {
		if v != nil {
			return *v
		}
		var ret HostCaching
		return ret
	}).(HostCachingOutput)
}

func (o HostCachingPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o HostCachingPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *HostCaching) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// HostCachingInput is an input type that accepts HostCachingArgs and HostCachingOutput values.
// You can construct a concrete instance of `HostCachingInput` via:
//
//	HostCachingArgs{...}
type HostCachingInput interface {
	pulumi.Input

	ToHostCachingOutput() HostCachingOutput
	ToHostCachingOutputWithContext(context.Context) HostCachingOutput
}

var hostCachingPtrType = reflect.TypeOf((**HostCaching)(nil)).Elem()

type HostCachingPtrInput interface {
	pulumi.Input

	ToHostCachingPtrOutput() HostCachingPtrOutput
	ToHostCachingPtrOutputWithContext(context.Context) HostCachingPtrOutput
}

type hostCachingPtr string

func HostCachingPtr(v string) HostCachingPtrInput {
	return (*hostCachingPtr)(&v)
}

func (*hostCachingPtr) ElementType() reflect.Type {
	return hostCachingPtrType
}

func (in *hostCachingPtr) ToHostCachingPtrOutput() HostCachingPtrOutput {
	return pulumi.ToOutput(in).(HostCachingPtrOutput)
}

func (in *hostCachingPtr) ToHostCachingPtrOutputWithContext(ctx context.Context) HostCachingPtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(HostCachingPtrOutput)
}

// The hypervisor generation of the Virtual Machine. Applicable to OS disks only.
type HyperVGeneration string

const (
	HyperVGenerationV1 = HyperVGeneration("V1")
	HyperVGenerationV2 = HyperVGeneration("V2")
)

// Specifies the HyperVGenerationType of the VirtualMachine created from the image. From API Version 2019-03-01 if the image source is a blob, then we need the user to specify the value, if the source is managed resource like disk or snapshot, we may require the user to specify the property if we cannot deduce it from the source managed resource.
type HyperVGenerationTypes string

const (
	HyperVGenerationTypesV1 = HyperVGenerationTypes("V1")
	HyperVGenerationTypesV2 = HyperVGenerationTypes("V2")
)

// Available from Api-Version 2019-07-01 onwards, it represents whether the specific ipconfiguration is IPv4 or IPv6. Default is taken as IPv4. Possible values are: 'IPv4' and 'IPv6'.
type IPVersion string

const (
	IPVersionIPv4 = IPVersion("IPv4")
	IPVersionIPv6 = IPVersion("IPv6")
)

// Available from Api-Version 2019-07-01 onwards, it represents whether the specific ipconfiguration is IPv4 or IPv6. Default is taken as IPv4. Possible values are: 'IPv4' and 'IPv6'.
type IPVersions string

const (
	IPVersionsIPv4 = IPVersions("IPv4")
	IPVersionsIPv6 = IPVersions("IPv6")
)

// Interval value in minutes used to create LogAnalytics call rate logs.
type IntervalInMins string

const (
	IntervalInMinsThreeMins  = IntervalInMins("ThreeMins")
	IntervalInMinsFiveMins   = IntervalInMins("FiveMins")
	IntervalInMinsThirtyMins = IntervalInMins("ThirtyMins")
	IntervalInMinsSixtyMins  = IntervalInMins("SixtyMins")
)

func (IntervalInMins) ElementType() reflect.Type {
	return reflect.TypeOf((*IntervalInMins)(nil)).Elem()
}

func (e IntervalInMins) ToIntervalInMinsOutput() IntervalInMinsOutput {
	return pulumi.ToOutput(e).(IntervalInMinsOutput)
}

func (e IntervalInMins) ToIntervalInMinsOutputWithContext(ctx context.Context) IntervalInMinsOutput {
	return pulumi.ToOutputWithContext(ctx, e).(IntervalInMinsOutput)
}

func (e IntervalInMins) ToIntervalInMinsPtrOutput() IntervalInMinsPtrOutput {
	return e.ToIntervalInMinsPtrOutputWithContext(context.Background())
}

func (e IntervalInMins) ToIntervalInMinsPtrOutputWithContext(ctx context.Context) IntervalInMinsPtrOutput {
	return IntervalInMins(e).ToIntervalInMinsOutputWithContext(ctx).ToIntervalInMinsPtrOutputWithContext(ctx)
}

func (e IntervalInMins) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e IntervalInMins) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e IntervalInMins) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e IntervalInMins) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type IntervalInMinsOutput struct{ *pulumi.OutputState }

func (IntervalInMinsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IntervalInMins)(nil)).Elem()
}

func (o IntervalInMinsOutput) ToIntervalInMinsOutput() IntervalInMinsOutput {
	return o
}

func (o IntervalInMinsOutput) ToIntervalInMinsOutputWithContext(ctx context.Context) IntervalInMinsOutput {
	return o
}

func (o IntervalInMinsOutput) ToIntervalInMinsPtrOutput() IntervalInMinsPtrOutput {
	return o.ToIntervalInMinsPtrOutputWithContext(context.Background())
}

func (o IntervalInMinsOutput) ToIntervalInMinsPtrOutputWithContext(ctx context.Context) IntervalInMinsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v IntervalInMins) *IntervalInMins {
		return &v
	}).(IntervalInMinsPtrOutput)
}

func (o IntervalInMinsOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o IntervalInMinsOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e IntervalInMins) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o IntervalInMinsOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o IntervalInMinsOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e IntervalInMins) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type IntervalInMinsPtrOutput struct{ *pulumi.OutputState }

func (IntervalInMinsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**IntervalInMins)(nil)).Elem()
}

func (o IntervalInMinsPtrOutput) ToIntervalInMinsPtrOutput() IntervalInMinsPtrOutput {
	return o
}

func (o IntervalInMinsPtrOutput) ToIntervalInMinsPtrOutputWithContext(ctx context.Context) IntervalInMinsPtrOutput {
	return o
}

func (o IntervalInMinsPtrOutput) Elem() IntervalInMinsOutput {
	return o.ApplyT(func(v *IntervalInMins) IntervalInMins {
		if v != nil {
			return *v
		}
		var ret IntervalInMins
		return ret
	}).(IntervalInMinsOutput)
}

func (o IntervalInMinsPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o IntervalInMinsPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *IntervalInMins) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// IntervalInMinsInput is an input type that accepts IntervalInMinsArgs and IntervalInMinsOutput values.
// You can construct a concrete instance of `IntervalInMinsInput` via:
//
//	IntervalInMinsArgs{...}
type IntervalInMinsInput interface {
	pulumi.Input

	ToIntervalInMinsOutput() IntervalInMinsOutput
	ToIntervalInMinsOutputWithContext(context.Context) IntervalInMinsOutput
}

var intervalInMinsPtrType = reflect.TypeOf((**IntervalInMins)(nil)).Elem()

type IntervalInMinsPtrInput interface {
	pulumi.Input

	ToIntervalInMinsPtrOutput() IntervalInMinsPtrOutput
	ToIntervalInMinsPtrOutputWithContext(context.Context) IntervalInMinsPtrOutput
}

type intervalInMinsPtr string

func IntervalInMinsPtr(v string) IntervalInMinsPtrInput {
	return (*intervalInMinsPtr)(&v)
}

func (*intervalInMinsPtr) ElementType() reflect.Type {
	return intervalInMinsPtrType
}

func (in *intervalInMinsPtr) ToIntervalInMinsPtrOutput() IntervalInMinsPtrOutput {
	return pulumi.ToOutput(in).(IntervalInMinsPtrOutput)
}

func (in *intervalInMinsPtr) ToIntervalInMinsPtrOutputWithContext(ctx context.Context) IntervalInMinsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(IntervalInMinsPtrOutput)
}

// Specifies the mode of VM Guest Patch Assessment for the IaaS virtual machine.<br /><br /> Possible values are:<br /><br /> **ImageDefault** - You control the timing of patch assessments on a virtual machine. <br /><br /> **AutomaticByPlatform** - The platform will trigger periodic patch assessments. The property provisionVMAgent must be true.
type LinuxPatchAssessmentMode string

const (
	LinuxPatchAssessmentModeImageDefault        = LinuxPatchAssessmentMode("ImageDefault")
	LinuxPatchAssessmentModeAutomaticByPlatform = LinuxPatchAssessmentMode("AutomaticByPlatform")
)

// Specifies the mode of VM Guest Patching to IaaS virtual machine or virtual machines associated to virtual machine scale set with OrchestrationMode as Flexible.<br /><br /> Possible values are:<br /><br /> **ImageDefault** - The virtual machine's default patching configuration is used. <br /><br /> **AutomaticByPlatform** - The virtual machine will be automatically updated by the platform. The property provisionVMAgent must be true
type LinuxVMGuestPatchMode string

const (
	LinuxVMGuestPatchModeImageDefault        = LinuxVMGuestPatchMode("ImageDefault")
	LinuxVMGuestPatchModeAutomaticByPlatform = LinuxVMGuestPatchMode("AutomaticByPlatform")
)

// Policy for accessing the disk via network.
type NetworkAccessPolicy string

const (
	// The disk can be exported or uploaded to from any network.
	NetworkAccessPolicyAllowAll = NetworkAccessPolicy("AllowAll")
	// The disk can be exported or uploaded to using a DiskAccess resource's private endpoints.
	NetworkAccessPolicyAllowPrivate = NetworkAccessPolicy("AllowPrivate")
	// The disk cannot be exported.
	NetworkAccessPolicyDenyAll = NetworkAccessPolicy("DenyAll")
)

// specifies the Microsoft.Network API version used when creating networking resources in the Network Interface Configurations
type NetworkApiVersion string

const (
	NetworkApiVersion_2020_11_01 = NetworkApiVersion("2020-11-01")
)

// The OS State.
type OperatingSystemStateTypes string

const (
	// Generalized image. Needs to be provisioned during deployment time.
	OperatingSystemStateTypesGeneralized = OperatingSystemStateTypes("Generalized")
	// Specialized image. Contains already provisioned OS Disk.
	OperatingSystemStateTypesSpecialized = OperatingSystemStateTypes("Specialized")
)

func (OperatingSystemStateTypes) ElementType() reflect.Type {
	return reflect.TypeOf((*OperatingSystemStateTypes)(nil)).Elem()
}

func (e OperatingSystemStateTypes) ToOperatingSystemStateTypesOutput() OperatingSystemStateTypesOutput {
	return pulumi.ToOutput(e).(OperatingSystemStateTypesOutput)
}

func (e OperatingSystemStateTypes) ToOperatingSystemStateTypesOutputWithContext(ctx context.Context) OperatingSystemStateTypesOutput {
	return pulumi.ToOutputWithContext(ctx, e).(OperatingSystemStateTypesOutput)
}

func (e OperatingSystemStateTypes) ToOperatingSystemStateTypesPtrOutput() OperatingSystemStateTypesPtrOutput {
	return e.ToOperatingSystemStateTypesPtrOutputWithContext(context.Background())
}

func (e OperatingSystemStateTypes) ToOperatingSystemStateTypesPtrOutputWithContext(ctx context.Context) OperatingSystemStateTypesPtrOutput {
	return OperatingSystemStateTypes(e).ToOperatingSystemStateTypesOutputWithContext(ctx).ToOperatingSystemStateTypesPtrOutputWithContext(ctx)
}

func (e OperatingSystemStateTypes) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e OperatingSystemStateTypes) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e OperatingSystemStateTypes) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e OperatingSystemStateTypes) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type OperatingSystemStateTypesOutput struct{ *pulumi.OutputState }

func (OperatingSystemStateTypesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OperatingSystemStateTypes)(nil)).Elem()
}

func (o OperatingSystemStateTypesOutput) ToOperatingSystemStateTypesOutput() OperatingSystemStateTypesOutput {
	return o
}

func (o OperatingSystemStateTypesOutput) ToOperatingSystemStateTypesOutputWithContext(ctx context.Context) OperatingSystemStateTypesOutput {
	return o
}

func (o OperatingSystemStateTypesOutput) ToOperatingSystemStateTypesPtrOutput() OperatingSystemStateTypesPtrOutput {
	return o.ToOperatingSystemStateTypesPtrOutputWithContext(context.Background())
}

func (o OperatingSystemStateTypesOutput) ToOperatingSystemStateTypesPtrOutputWithContext(ctx context.Context) OperatingSystemStateTypesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v OperatingSystemStateTypes) *OperatingSystemStateTypes {
		return &v
	}).(OperatingSystemStateTypesPtrOutput)
}

func (o OperatingSystemStateTypesOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o OperatingSystemStateTypesOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e OperatingSystemStateTypes) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o OperatingSystemStateTypesOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o OperatingSystemStateTypesOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e OperatingSystemStateTypes) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type OperatingSystemStateTypesPtrOutput struct{ *pulumi.OutputState }

func (OperatingSystemStateTypesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**OperatingSystemStateTypes)(nil)).Elem()
}

func (o OperatingSystemStateTypesPtrOutput) ToOperatingSystemStateTypesPtrOutput() OperatingSystemStateTypesPtrOutput {
	return o
}

func (o OperatingSystemStateTypesPtrOutput) ToOperatingSystemStateTypesPtrOutputWithContext(ctx context.Context) OperatingSystemStateTypesPtrOutput {
	return o
}

func (o OperatingSystemStateTypesPtrOutput) Elem() OperatingSystemStateTypesOutput {
	return o.ApplyT(func(v *OperatingSystemStateTypes) OperatingSystemStateTypes {
		if v != nil {
			return *v
		}
		var ret OperatingSystemStateTypes
		return ret
	}).(OperatingSystemStateTypesOutput)
}

func (o OperatingSystemStateTypesPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o OperatingSystemStateTypesPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *OperatingSystemStateTypes) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// OperatingSystemStateTypesInput is an input type that accepts OperatingSystemStateTypesArgs and OperatingSystemStateTypesOutput values.
// You can construct a concrete instance of `OperatingSystemStateTypesInput` via:
//
//	OperatingSystemStateTypesArgs{...}
type OperatingSystemStateTypesInput interface {
	pulumi.Input

	ToOperatingSystemStateTypesOutput() OperatingSystemStateTypesOutput
	ToOperatingSystemStateTypesOutputWithContext(context.Context) OperatingSystemStateTypesOutput
}

var operatingSystemStateTypesPtrType = reflect.TypeOf((**OperatingSystemStateTypes)(nil)).Elem()

type OperatingSystemStateTypesPtrInput interface {
	pulumi.Input

	ToOperatingSystemStateTypesPtrOutput() OperatingSystemStateTypesPtrOutput
	ToOperatingSystemStateTypesPtrOutputWithContext(context.Context) OperatingSystemStateTypesPtrOutput
}

type operatingSystemStateTypesPtr string

func OperatingSystemStateTypesPtr(v string) OperatingSystemStateTypesPtrInput {
	return (*operatingSystemStateTypesPtr)(&v)
}

func (*operatingSystemStateTypesPtr) ElementType() reflect.Type {
	return operatingSystemStateTypesPtrType
}

func (in *operatingSystemStateTypesPtr) ToOperatingSystemStateTypesPtrOutput() OperatingSystemStateTypesPtrOutput {
	return pulumi.ToOutput(in).(OperatingSystemStateTypesPtrOutput)
}

func (in *operatingSystemStateTypesPtr) ToOperatingSystemStateTypesPtrOutputWithContext(ctx context.Context) OperatingSystemStateTypesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(OperatingSystemStateTypesPtrOutput)
}

// This property allows you to specify the type of the OS that is included in the disk if creating a VM from user-image or a specialized VHD. <br><br> Possible values are: <br><br> **Windows** <br><br> **Linux**
type OperatingSystemTypes string

const (
	OperatingSystemTypesWindows = OperatingSystemTypes("Windows")
	OperatingSystemTypesLinux   = OperatingSystemTypes("Linux")
)

func (OperatingSystemTypes) ElementType() reflect.Type {
	return reflect.TypeOf((*OperatingSystemTypes)(nil)).Elem()
}

func (e OperatingSystemTypes) ToOperatingSystemTypesOutput() OperatingSystemTypesOutput {
	return pulumi.ToOutput(e).(OperatingSystemTypesOutput)
}

func (e OperatingSystemTypes) ToOperatingSystemTypesOutputWithContext(ctx context.Context) OperatingSystemTypesOutput {
	return pulumi.ToOutputWithContext(ctx, e).(OperatingSystemTypesOutput)
}

func (e OperatingSystemTypes) ToOperatingSystemTypesPtrOutput() OperatingSystemTypesPtrOutput {
	return e.ToOperatingSystemTypesPtrOutputWithContext(context.Background())
}

func (e OperatingSystemTypes) ToOperatingSystemTypesPtrOutputWithContext(ctx context.Context) OperatingSystemTypesPtrOutput {
	return OperatingSystemTypes(e).ToOperatingSystemTypesOutputWithContext(ctx).ToOperatingSystemTypesPtrOutputWithContext(ctx)
}

func (e OperatingSystemTypes) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e OperatingSystemTypes) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e OperatingSystemTypes) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e OperatingSystemTypes) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type OperatingSystemTypesOutput struct{ *pulumi.OutputState }

func (OperatingSystemTypesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OperatingSystemTypes)(nil)).Elem()
}

func (o OperatingSystemTypesOutput) ToOperatingSystemTypesOutput() OperatingSystemTypesOutput {
	return o
}

func (o OperatingSystemTypesOutput) ToOperatingSystemTypesOutputWithContext(ctx context.Context) OperatingSystemTypesOutput {
	return o
}

func (o OperatingSystemTypesOutput) ToOperatingSystemTypesPtrOutput() OperatingSystemTypesPtrOutput {
	return o.ToOperatingSystemTypesPtrOutputWithContext(context.Background())
}

func (o OperatingSystemTypesOutput) ToOperatingSystemTypesPtrOutputWithContext(ctx context.Context) OperatingSystemTypesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v OperatingSystemTypes) *OperatingSystemTypes {
		return &v
	}).(OperatingSystemTypesPtrOutput)
}

func (o OperatingSystemTypesOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o OperatingSystemTypesOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e OperatingSystemTypes) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o OperatingSystemTypesOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o OperatingSystemTypesOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e OperatingSystemTypes) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type OperatingSystemTypesPtrOutput struct{ *pulumi.OutputState }

func (OperatingSystemTypesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**OperatingSystemTypes)(nil)).Elem()
}

func (o OperatingSystemTypesPtrOutput) ToOperatingSystemTypesPtrOutput() OperatingSystemTypesPtrOutput {
	return o
}

func (o OperatingSystemTypesPtrOutput) ToOperatingSystemTypesPtrOutputWithContext(ctx context.Context) OperatingSystemTypesPtrOutput {
	return o
}

func (o OperatingSystemTypesPtrOutput) Elem() OperatingSystemTypesOutput {
	return o.ApplyT(func(v *OperatingSystemTypes) OperatingSystemTypes {
		if v != nil {
			return *v
		}
		var ret OperatingSystemTypes
		return ret
	}).(OperatingSystemTypesOutput)
}

func (o OperatingSystemTypesPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o OperatingSystemTypesPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *OperatingSystemTypes) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// OperatingSystemTypesInput is an input type that accepts OperatingSystemTypesArgs and OperatingSystemTypesOutput values.
// You can construct a concrete instance of `OperatingSystemTypesInput` via:
//
//	OperatingSystemTypesArgs{...}
type OperatingSystemTypesInput interface {
	pulumi.Input

	ToOperatingSystemTypesOutput() OperatingSystemTypesOutput
	ToOperatingSystemTypesOutputWithContext(context.Context) OperatingSystemTypesOutput
}

var operatingSystemTypesPtrType = reflect.TypeOf((**OperatingSystemTypes)(nil)).Elem()

type OperatingSystemTypesPtrInput interface {
	pulumi.Input

	ToOperatingSystemTypesPtrOutput() OperatingSystemTypesPtrOutput
	ToOperatingSystemTypesPtrOutputWithContext(context.Context) OperatingSystemTypesPtrOutput
}

type operatingSystemTypesPtr string

func OperatingSystemTypesPtr(v string) OperatingSystemTypesPtrInput {
	return (*operatingSystemTypesPtr)(&v)
}

func (*operatingSystemTypesPtr) ElementType() reflect.Type {
	return operatingSystemTypesPtrType
}

func (in *operatingSystemTypesPtr) ToOperatingSystemTypesPtrOutput() OperatingSystemTypesPtrOutput {
	return pulumi.ToOutput(in).(OperatingSystemTypesPtrOutput)
}

func (in *operatingSystemTypesPtr) ToOperatingSystemTypesPtrOutputWithContext(ctx context.Context) OperatingSystemTypesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(OperatingSystemTypesPtrOutput)
}

// Specifies the orchestration mode for the virtual machine scale set.
type OrchestrationMode string

const (
	OrchestrationModeUniform  = OrchestrationMode("Uniform")
	OrchestrationModeFlexible = OrchestrationMode("Flexible")
)

// The pass name. Currently, the only allowable value is OobeSystem.
type PassNames string

const (
	PassNamesOobeSystem = PassNames("OobeSystem")
)

func (PassNames) ElementType() reflect.Type {
	return reflect.TypeOf((*PassNames)(nil)).Elem()
}

func (e PassNames) ToPassNamesOutput() PassNamesOutput {
	return pulumi.ToOutput(e).(PassNamesOutput)
}

func (e PassNames) ToPassNamesOutputWithContext(ctx context.Context) PassNamesOutput {
	return pulumi.ToOutputWithContext(ctx, e).(PassNamesOutput)
}

func (e PassNames) ToPassNamesPtrOutput() PassNamesPtrOutput {
	return e.ToPassNamesPtrOutputWithContext(context.Background())
}

func (e PassNames) ToPassNamesPtrOutputWithContext(ctx context.Context) PassNamesPtrOutput {
	return PassNames(e).ToPassNamesOutputWithContext(ctx).ToPassNamesPtrOutputWithContext(ctx)
}

func (e PassNames) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e PassNames) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e PassNames) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e PassNames) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type PassNamesOutput struct{ *pulumi.OutputState }

func (PassNamesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PassNames)(nil)).Elem()
}

func (o PassNamesOutput) ToPassNamesOutput() PassNamesOutput {
	return o
}

func (o PassNamesOutput) ToPassNamesOutputWithContext(ctx context.Context) PassNamesOutput {
	return o
}

func (o PassNamesOutput) ToPassNamesPtrOutput() PassNamesPtrOutput {
	return o.ToPassNamesPtrOutputWithContext(context.Background())
}

func (o PassNamesOutput) ToPassNamesPtrOutputWithContext(ctx context.Context) PassNamesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PassNames) *PassNames {
		return &v
	}).(PassNamesPtrOutput)
}

func (o PassNamesOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o PassNamesOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e PassNames) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o PassNamesOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o PassNamesOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e PassNames) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type PassNamesPtrOutput struct{ *pulumi.OutputState }

func (PassNamesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PassNames)(nil)).Elem()
}

func (o PassNamesPtrOutput) ToPassNamesPtrOutput() PassNamesPtrOutput {
	return o
}

func (o PassNamesPtrOutput) ToPassNamesPtrOutputWithContext(ctx context.Context) PassNamesPtrOutput {
	return o
}

func (o PassNamesPtrOutput) Elem() PassNamesOutput {
	return o.ApplyT(func(v *PassNames) PassNames {
		if v != nil {
			return *v
		}
		var ret PassNames
		return ret
	}).(PassNamesOutput)
}

func (o PassNamesPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o PassNamesPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *PassNames) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// PassNamesInput is an input type that accepts PassNamesArgs and PassNamesOutput values.
// You can construct a concrete instance of `PassNamesInput` via:
//
//	PassNamesArgs{...}
type PassNamesInput interface {
	pulumi.Input

	ToPassNamesOutput() PassNamesOutput
	ToPassNamesOutputWithContext(context.Context) PassNamesOutput
}

var passNamesPtrType = reflect.TypeOf((**PassNames)(nil)).Elem()

type PassNamesPtrInput interface {
	pulumi.Input

	ToPassNamesPtrOutput() PassNamesPtrOutput
	ToPassNamesPtrOutputWithContext(context.Context) PassNamesPtrOutput
}

type passNamesPtr string

func PassNamesPtr(v string) PassNamesPtrInput {
	return (*passNamesPtr)(&v)
}

func (*passNamesPtr) ElementType() reflect.Type {
	return passNamesPtrType
}

func (in *passNamesPtr) ToPassNamesPtrOutput() PassNamesPtrOutput {
	return pulumi.ToOutput(in).(PassNamesPtrOutput)
}

func (in *passNamesPtr) ToPassNamesPtrOutputWithContext(ctx context.Context) PassNamesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(PassNamesPtrOutput)
}

// Indicates whether the connection has been Approved/Rejected/Removed by the owner of the service.
type PrivateEndpointServiceConnectionStatus string

const (
	PrivateEndpointServiceConnectionStatusPending  = PrivateEndpointServiceConnectionStatus("Pending")
	PrivateEndpointServiceConnectionStatusApproved = PrivateEndpointServiceConnectionStatus("Approved")
	PrivateEndpointServiceConnectionStatusRejected = PrivateEndpointServiceConnectionStatus("Rejected")
)

// Specifies the protocol of WinRM listener. <br><br> Possible values are: <br>**http** <br><br> **https**
type ProtocolTypes string

const (
	ProtocolTypesHttp  = ProtocolTypes("Http")
	ProtocolTypesHttps = ProtocolTypes("Https")
)

func (ProtocolTypes) ElementType() reflect.Type {
	return reflect.TypeOf((*ProtocolTypes)(nil)).Elem()
}

func (e ProtocolTypes) ToProtocolTypesOutput() ProtocolTypesOutput {
	return pulumi.ToOutput(e).(ProtocolTypesOutput)
}

func (e ProtocolTypes) ToProtocolTypesOutputWithContext(ctx context.Context) ProtocolTypesOutput {
	return pulumi.ToOutputWithContext(ctx, e).(ProtocolTypesOutput)
}

func (e ProtocolTypes) ToProtocolTypesPtrOutput() ProtocolTypesPtrOutput {
	return e.ToProtocolTypesPtrOutputWithContext(context.Background())
}

func (e ProtocolTypes) ToProtocolTypesPtrOutputWithContext(ctx context.Context) ProtocolTypesPtrOutput {
	return ProtocolTypes(e).ToProtocolTypesOutputWithContext(ctx).ToProtocolTypesPtrOutputWithContext(ctx)
}

func (e ProtocolTypes) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e ProtocolTypes) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e ProtocolTypes) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e ProtocolTypes) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type ProtocolTypesOutput struct{ *pulumi.OutputState }

func (ProtocolTypesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ProtocolTypes)(nil)).Elem()
}

func (o ProtocolTypesOutput) ToProtocolTypesOutput() ProtocolTypesOutput {
	return o
}

func (o ProtocolTypesOutput) ToProtocolTypesOutputWithContext(ctx context.Context) ProtocolTypesOutput {
	return o
}

func (o ProtocolTypesOutput) ToProtocolTypesPtrOutput() ProtocolTypesPtrOutput {
	return o.ToProtocolTypesPtrOutputWithContext(context.Background())
}

func (o ProtocolTypesOutput) ToProtocolTypesPtrOutputWithContext(ctx context.Context) ProtocolTypesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ProtocolTypes) *ProtocolTypes {
		return &v
	}).(ProtocolTypesPtrOutput)
}

func (o ProtocolTypesOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o ProtocolTypesOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e ProtocolTypes) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o ProtocolTypesOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o ProtocolTypesOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e ProtocolTypes) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type ProtocolTypesPtrOutput struct{ *pulumi.OutputState }

func (ProtocolTypesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ProtocolTypes)(nil)).Elem()
}

func (o ProtocolTypesPtrOutput) ToProtocolTypesPtrOutput() ProtocolTypesPtrOutput {
	return o
}

func (o ProtocolTypesPtrOutput) ToProtocolTypesPtrOutputWithContext(ctx context.Context) ProtocolTypesPtrOutput {
	return o
}

func (o ProtocolTypesPtrOutput) Elem() ProtocolTypesOutput {
	return o.ApplyT(func(v *ProtocolTypes) ProtocolTypes {
		if v != nil {
			return *v
		}
		var ret ProtocolTypes
		return ret
	}).(ProtocolTypesOutput)
}

func (o ProtocolTypesPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o ProtocolTypesPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *ProtocolTypes) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// ProtocolTypesInput is an input type that accepts ProtocolTypesArgs and ProtocolTypesOutput values.
// You can construct a concrete instance of `ProtocolTypesInput` via:
//
//	ProtocolTypesArgs{...}
type ProtocolTypesInput interface {
	pulumi.Input

	ToProtocolTypesOutput() ProtocolTypesOutput
	ToProtocolTypesOutputWithContext(context.Context) ProtocolTypesOutput
}

var protocolTypesPtrType = reflect.TypeOf((**ProtocolTypes)(nil)).Elem()

type ProtocolTypesPtrInput interface {
	pulumi.Input

	ToProtocolTypesPtrOutput() ProtocolTypesPtrOutput
	ToProtocolTypesPtrOutputWithContext(context.Context) ProtocolTypesPtrOutput
}

type protocolTypesPtr string

func ProtocolTypesPtr(v string) ProtocolTypesPtrInput {
	return (*protocolTypesPtr)(&v)
}

func (*protocolTypesPtr) ElementType() reflect.Type {
	return protocolTypesPtrType
}

func (in *protocolTypesPtr) ToProtocolTypesPtrOutput() ProtocolTypesPtrOutput {
	return pulumi.ToOutput(in).(ProtocolTypesPtrOutput)
}

func (in *protocolTypesPtr) ToProtocolTypesPtrOutputWithContext(ctx context.Context) ProtocolTypesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(ProtocolTypesPtrOutput)
}

// Specifies the type of the proximity placement group. <br><br> Possible values are: <br><br> **Standard** : Co-locate resources within an Azure region or Availability Zone. <br><br> **Ultra** : For future use.
type ProximityPlacementGroupType string

const (
	ProximityPlacementGroupTypeStandard = ProximityPlacementGroupType("Standard")
	ProximityPlacementGroupTypeUltra    = ProximityPlacementGroupType("Ultra")
)

// Specify public IP sku name
type PublicIPAddressSkuName string

const (
	PublicIPAddressSkuNameBasic    = PublicIPAddressSkuName("Basic")
	PublicIPAddressSkuNameStandard = PublicIPAddressSkuName("Standard")
)

// Specify public IP sku tier
type PublicIPAddressSkuTier string

const (
	PublicIPAddressSkuTierRegional = PublicIPAddressSkuTier("Regional")
	PublicIPAddressSkuTierGlobal   = PublicIPAddressSkuTier("Global")
)

// Specify the public IP allocation type
type PublicIPAllocationMethod string

const (
	PublicIPAllocationMethodDynamic = PublicIPAllocationMethod("Dynamic")
	PublicIPAllocationMethodStatic  = PublicIPAllocationMethod("Static")
)

// The type of identity used for the virtual machine scale set. The type 'SystemAssigned, UserAssigned' includes both an implicitly created identity and a set of user assigned identities. The type 'None' will remove any identities from the virtual machine scale set.
type ResourceIdentityType string

const (
	ResourceIdentityTypeSystemAssigned               = ResourceIdentityType("SystemAssigned")
	ResourceIdentityTypeUserAssigned                 = ResourceIdentityType("UserAssigned")
	ResourceIdentityType_SystemAssigned_UserAssigned = ResourceIdentityType("SystemAssigned, UserAssigned")
	ResourceIdentityTypeNone                         = ResourceIdentityType("None")
)

func (ResourceIdentityType) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceIdentityType)(nil)).Elem()
}

func (e ResourceIdentityType) ToResourceIdentityTypeOutput() ResourceIdentityTypeOutput {
	return pulumi.ToOutput(e).(ResourceIdentityTypeOutput)
}

func (e ResourceIdentityType) ToResourceIdentityTypeOutputWithContext(ctx context.Context) ResourceIdentityTypeOutput {
	return pulumi.ToOutputWithContext(ctx, e).(ResourceIdentityTypeOutput)
}

func (e ResourceIdentityType) ToResourceIdentityTypePtrOutput() ResourceIdentityTypePtrOutput {
	return e.ToResourceIdentityTypePtrOutputWithContext(context.Background())
}

func (e ResourceIdentityType) ToResourceIdentityTypePtrOutputWithContext(ctx context.Context) ResourceIdentityTypePtrOutput {
	return ResourceIdentityType(e).ToResourceIdentityTypeOutputWithContext(ctx).ToResourceIdentityTypePtrOutputWithContext(ctx)
}

func (e ResourceIdentityType) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e ResourceIdentityType) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e ResourceIdentityType) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e ResourceIdentityType) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type ResourceIdentityTypeOutput struct{ *pulumi.OutputState }

func (ResourceIdentityTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceIdentityType)(nil)).Elem()
}

func (o ResourceIdentityTypeOutput) ToResourceIdentityTypeOutput() ResourceIdentityTypeOutput {
	return o
}

func (o ResourceIdentityTypeOutput) ToResourceIdentityTypeOutputWithContext(ctx context.Context) ResourceIdentityTypeOutput {
	return o
}

func (o ResourceIdentityTypeOutput) ToResourceIdentityTypePtrOutput() ResourceIdentityTypePtrOutput {
	return o.ToResourceIdentityTypePtrOutputWithContext(context.Background())
}

func (o ResourceIdentityTypeOutput) ToResourceIdentityTypePtrOutputWithContext(ctx context.Context) ResourceIdentityTypePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ResourceIdentityType) *ResourceIdentityType {
		return &v
	}).(ResourceIdentityTypePtrOutput)
}

func (o ResourceIdentityTypeOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o ResourceIdentityTypeOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e ResourceIdentityType) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o ResourceIdentityTypeOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o ResourceIdentityTypeOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e ResourceIdentityType) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type ResourceIdentityTypePtrOutput struct{ *pulumi.OutputState }

func (ResourceIdentityTypePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ResourceIdentityType)(nil)).Elem()
}

func (o ResourceIdentityTypePtrOutput) ToResourceIdentityTypePtrOutput() ResourceIdentityTypePtrOutput {
	return o
}

func (o ResourceIdentityTypePtrOutput) ToResourceIdentityTypePtrOutputWithContext(ctx context.Context) ResourceIdentityTypePtrOutput {
	return o
}

func (o ResourceIdentityTypePtrOutput) Elem() ResourceIdentityTypeOutput {
	return o.ApplyT(func(v *ResourceIdentityType) ResourceIdentityType {
		if v != nil {
			return *v
		}
		var ret ResourceIdentityType
		return ret
	}).(ResourceIdentityTypeOutput)
}

func (o ResourceIdentityTypePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o ResourceIdentityTypePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *ResourceIdentityType) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// ResourceIdentityTypeInput is an input type that accepts ResourceIdentityTypeArgs and ResourceIdentityTypeOutput values.
// You can construct a concrete instance of `ResourceIdentityTypeInput` via:
//
//	ResourceIdentityTypeArgs{...}
type ResourceIdentityTypeInput interface {
	pulumi.Input

	ToResourceIdentityTypeOutput() ResourceIdentityTypeOutput
	ToResourceIdentityTypeOutputWithContext(context.Context) ResourceIdentityTypeOutput
}

var resourceIdentityTypePtrType = reflect.TypeOf((**ResourceIdentityType)(nil)).Elem()

type ResourceIdentityTypePtrInput interface {
	pulumi.Input

	ToResourceIdentityTypePtrOutput() ResourceIdentityTypePtrOutput
	ToResourceIdentityTypePtrOutputWithContext(context.Context) ResourceIdentityTypePtrOutput
}

type resourceIdentityTypePtr string

func ResourceIdentityTypePtr(v string) ResourceIdentityTypePtrInput {
	return (*resourceIdentityTypePtr)(&v)
}

func (*resourceIdentityTypePtr) ElementType() reflect.Type {
	return resourceIdentityTypePtrType
}

func (in *resourceIdentityTypePtr) ToResourceIdentityTypePtrOutput() ResourceIdentityTypePtrOutput {
	return pulumi.ToOutput(in).(ResourceIdentityTypePtrOutput)
}

func (in *resourceIdentityTypePtr) ToResourceIdentityTypePtrOutputWithContext(ctx context.Context) ResourceIdentityTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(ResourceIdentityTypePtrOutput)
}

// Specifies the SecurityType of the virtual machine. It is set as TrustedLaunch to enable UefiSettings. <br><br> Default: UefiSettings will not be enabled unless this property is set as TrustedLaunch.
type SecurityTypes string

const (
	SecurityTypesTrustedLaunch = SecurityTypes("TrustedLaunch")
)

// Specifies the name of the setting to which the content applies. Possible values are: FirstLogonCommands and AutoLogon.
type SettingNames string

const (
	SettingNamesAutoLogon          = SettingNames("AutoLogon")
	SettingNamesFirstLogonCommands = SettingNames("FirstLogonCommands")
)

func (SettingNames) ElementType() reflect.Type {
	return reflect.TypeOf((*SettingNames)(nil)).Elem()
}

func (e SettingNames) ToSettingNamesOutput() SettingNamesOutput {
	return pulumi.ToOutput(e).(SettingNamesOutput)
}

func (e SettingNames) ToSettingNamesOutputWithContext(ctx context.Context) SettingNamesOutput {
	return pulumi.ToOutputWithContext(ctx, e).(SettingNamesOutput)
}

func (e SettingNames) ToSettingNamesPtrOutput() SettingNamesPtrOutput {
	return e.ToSettingNamesPtrOutputWithContext(context.Background())
}

func (e SettingNames) ToSettingNamesPtrOutputWithContext(ctx context.Context) SettingNamesPtrOutput {
	return SettingNames(e).ToSettingNamesOutputWithContext(ctx).ToSettingNamesPtrOutputWithContext(ctx)
}

func (e SettingNames) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e SettingNames) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e SettingNames) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e SettingNames) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type SettingNamesOutput struct{ *pulumi.OutputState }

func (SettingNamesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SettingNames)(nil)).Elem()
}

func (o SettingNamesOutput) ToSettingNamesOutput() SettingNamesOutput {
	return o
}

func (o SettingNamesOutput) ToSettingNamesOutputWithContext(ctx context.Context) SettingNamesOutput {
	return o
}

func (o SettingNamesOutput) ToSettingNamesPtrOutput() SettingNamesPtrOutput {
	return o.ToSettingNamesPtrOutputWithContext(context.Background())
}

func (o SettingNamesOutput) ToSettingNamesPtrOutputWithContext(ctx context.Context) SettingNamesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SettingNames) *SettingNames {
		return &v
	}).(SettingNamesPtrOutput)
}

func (o SettingNamesOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o SettingNamesOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e SettingNames) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o SettingNamesOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o SettingNamesOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e SettingNames) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type SettingNamesPtrOutput struct{ *pulumi.OutputState }

func (SettingNamesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SettingNames)(nil)).Elem()
}

func (o SettingNamesPtrOutput) ToSettingNamesPtrOutput() SettingNamesPtrOutput {
	return o
}

func (o SettingNamesPtrOutput) ToSettingNamesPtrOutputWithContext(ctx context.Context) SettingNamesPtrOutput {
	return o
}

func (o SettingNamesPtrOutput) Elem() SettingNamesOutput {
	return o.ApplyT(func(v *SettingNames) SettingNames {
		if v != nil {
			return *v
		}
		var ret SettingNames
		return ret
	}).(SettingNamesOutput)
}

func (o SettingNamesPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o SettingNamesPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *SettingNames) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// SettingNamesInput is an input type that accepts SettingNamesArgs and SettingNamesOutput values.
// You can construct a concrete instance of `SettingNamesInput` via:
//
//	SettingNamesArgs{...}
type SettingNamesInput interface {
	pulumi.Input

	ToSettingNamesOutput() SettingNamesOutput
	ToSettingNamesOutputWithContext(context.Context) SettingNamesOutput
}

var settingNamesPtrType = reflect.TypeOf((**SettingNames)(nil)).Elem()

type SettingNamesPtrInput interface {
	pulumi.Input

	ToSettingNamesPtrOutput() SettingNamesPtrOutput
	ToSettingNamesPtrOutputWithContext(context.Context) SettingNamesPtrOutput
}

type settingNamesPtr string

func SettingNamesPtr(v string) SettingNamesPtrInput {
	return (*settingNamesPtr)(&v)
}

func (*settingNamesPtr) ElementType() reflect.Type {
	return settingNamesPtrType
}

func (in *settingNamesPtr) ToSettingNamesPtrOutput() SettingNamesPtrOutput {
	return pulumi.ToOutput(in).(SettingNamesPtrOutput)
}

func (in *settingNamesPtr) ToSettingNamesPtrOutputWithContext(ctx context.Context) SettingNamesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(SettingNamesPtrOutput)
}

// The sku name.
type SnapshotStorageAccountTypes string

const (
	// Standard HDD locally redundant storage
	SnapshotStorageAccountTypes_Standard_LRS = SnapshotStorageAccountTypes("Standard_LRS")
	// Premium SSD locally redundant storage
	SnapshotStorageAccountTypes_Premium_LRS = SnapshotStorageAccountTypes("Premium_LRS")
	// Standard zone redundant storage
	SnapshotStorageAccountTypes_Standard_ZRS = SnapshotStorageAccountTypes("Standard_ZRS")
)

// The level code.
type StatusLevelTypes string

const (
	StatusLevelTypesInfo    = StatusLevelTypes("Info")
	StatusLevelTypesWarning = StatusLevelTypes("Warning")
	StatusLevelTypesError   = StatusLevelTypes("Error")
)

func (StatusLevelTypes) ElementType() reflect.Type {
	return reflect.TypeOf((*StatusLevelTypes)(nil)).Elem()
}

func (e StatusLevelTypes) ToStatusLevelTypesOutput() StatusLevelTypesOutput {
	return pulumi.ToOutput(e).(StatusLevelTypesOutput)
}

func (e StatusLevelTypes) ToStatusLevelTypesOutputWithContext(ctx context.Context) StatusLevelTypesOutput {
	return pulumi.ToOutputWithContext(ctx, e).(StatusLevelTypesOutput)
}

func (e StatusLevelTypes) ToStatusLevelTypesPtrOutput() StatusLevelTypesPtrOutput {
	return e.ToStatusLevelTypesPtrOutputWithContext(context.Background())
}

func (e StatusLevelTypes) ToStatusLevelTypesPtrOutputWithContext(ctx context.Context) StatusLevelTypesPtrOutput {
	return StatusLevelTypes(e).ToStatusLevelTypesOutputWithContext(ctx).ToStatusLevelTypesPtrOutputWithContext(ctx)
}

func (e StatusLevelTypes) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e StatusLevelTypes) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e StatusLevelTypes) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e StatusLevelTypes) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type StatusLevelTypesOutput struct{ *pulumi.OutputState }

func (StatusLevelTypesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StatusLevelTypes)(nil)).Elem()
}

func (o StatusLevelTypesOutput) ToStatusLevelTypesOutput() StatusLevelTypesOutput {
	return o
}

func (o StatusLevelTypesOutput) ToStatusLevelTypesOutputWithContext(ctx context.Context) StatusLevelTypesOutput {
	return o
}

func (o StatusLevelTypesOutput) ToStatusLevelTypesPtrOutput() StatusLevelTypesPtrOutput {
	return o.ToStatusLevelTypesPtrOutputWithContext(context.Background())
}

func (o StatusLevelTypesOutput) ToStatusLevelTypesPtrOutputWithContext(ctx context.Context) StatusLevelTypesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v StatusLevelTypes) *StatusLevelTypes {
		return &v
	}).(StatusLevelTypesPtrOutput)
}

func (o StatusLevelTypesOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o StatusLevelTypesOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e StatusLevelTypes) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o StatusLevelTypesOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o StatusLevelTypesOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e StatusLevelTypes) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type StatusLevelTypesPtrOutput struct{ *pulumi.OutputState }

func (StatusLevelTypesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**StatusLevelTypes)(nil)).Elem()
}

func (o StatusLevelTypesPtrOutput) ToStatusLevelTypesPtrOutput() StatusLevelTypesPtrOutput {
	return o
}

func (o StatusLevelTypesPtrOutput) ToStatusLevelTypesPtrOutputWithContext(ctx context.Context) StatusLevelTypesPtrOutput {
	return o
}

func (o StatusLevelTypesPtrOutput) Elem() StatusLevelTypesOutput {
	return o.ApplyT(func(v *StatusLevelTypes) StatusLevelTypes {
		if v != nil {
			return *v
		}
		var ret StatusLevelTypes
		return ret
	}).(StatusLevelTypesOutput)
}

func (o StatusLevelTypesPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o StatusLevelTypesPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *StatusLevelTypes) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// StatusLevelTypesInput is an input type that accepts StatusLevelTypesArgs and StatusLevelTypesOutput values.
// You can construct a concrete instance of `StatusLevelTypesInput` via:
//
//	StatusLevelTypesArgs{...}
type StatusLevelTypesInput interface {
	pulumi.Input

	ToStatusLevelTypesOutput() StatusLevelTypesOutput
	ToStatusLevelTypesOutputWithContext(context.Context) StatusLevelTypesOutput
}

var statusLevelTypesPtrType = reflect.TypeOf((**StatusLevelTypes)(nil)).Elem()

type StatusLevelTypesPtrInput interface {
	pulumi.Input

	ToStatusLevelTypesPtrOutput() StatusLevelTypesPtrOutput
	ToStatusLevelTypesPtrOutputWithContext(context.Context) StatusLevelTypesPtrOutput
}

type statusLevelTypesPtr string

func StatusLevelTypesPtr(v string) StatusLevelTypesPtrInput {
	return (*statusLevelTypesPtr)(&v)
}

func (*statusLevelTypesPtr) ElementType() reflect.Type {
	return statusLevelTypesPtrType
}

func (in *statusLevelTypesPtr) ToStatusLevelTypesPtrOutput() StatusLevelTypesPtrOutput {
	return pulumi.ToOutput(in).(StatusLevelTypesPtrOutput)
}

func (in *statusLevelTypesPtr) ToStatusLevelTypesPtrOutputWithContext(ctx context.Context) StatusLevelTypesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(StatusLevelTypesPtrOutput)
}

// Specifies the storage account type to be used to store the image. This property is not updatable.
type StorageAccountType string

const (
	StorageAccountType_Standard_LRS = StorageAccountType("Standard_LRS")
	StorageAccountType_Standard_ZRS = StorageAccountType("Standard_ZRS")
	StorageAccountType_Premium_LRS  = StorageAccountType("Premium_LRS")
)

// Specifies the storage account type for the managed disk. Managed OS disk storage account type can only be set when you create the scale set. NOTE: UltraSSD_LRS can only be used with data disks, it cannot be used with OS Disk.
type StorageAccountTypes string

const (
	StorageAccountTypes_Standard_LRS    = StorageAccountTypes("Standard_LRS")
	StorageAccountTypes_Premium_LRS     = StorageAccountTypes("Premium_LRS")
	StorageAccountTypes_StandardSSD_LRS = StorageAccountTypes("StandardSSD_LRS")
	StorageAccountTypes_UltraSSD_LRS    = StorageAccountTypes("UltraSSD_LRS")
	StorageAccountTypes_Premium_ZRS     = StorageAccountTypes("Premium_ZRS")
	StorageAccountTypes_StandardSSD_ZRS = StorageAccountTypes("StandardSSD_ZRS")
)

// Specifies the mode of an upgrade to virtual machines in the scale set.<br /><br /> Possible values are:<br /><br /> **Manual** - You  control the application of updates to virtual machines in the scale set. You do this by using the manualUpgrade action.<br /><br /> **Automatic** - All virtual machines in the scale set are  automatically updated at the same time.
type UpgradeMode string

const (
	UpgradeModeAutomatic = UpgradeMode("Automatic")
	UpgradeModeManual    = UpgradeMode("Manual")
	UpgradeModeRolling   = UpgradeMode("Rolling")
)

func (UpgradeMode) ElementType() reflect.Type {
	return reflect.TypeOf((*UpgradeMode)(nil)).Elem()
}

func (e UpgradeMode) ToUpgradeModeOutput() UpgradeModeOutput {
	return pulumi.ToOutput(e).(UpgradeModeOutput)
}

func (e UpgradeMode) ToUpgradeModeOutputWithContext(ctx context.Context) UpgradeModeOutput {
	return pulumi.ToOutputWithContext(ctx, e).(UpgradeModeOutput)
}

func (e UpgradeMode) ToUpgradeModePtrOutput() UpgradeModePtrOutput {
	return e.ToUpgradeModePtrOutputWithContext(context.Background())
}

func (e UpgradeMode) ToUpgradeModePtrOutputWithContext(ctx context.Context) UpgradeModePtrOutput {
	return UpgradeMode(e).ToUpgradeModeOutputWithContext(ctx).ToUpgradeModePtrOutputWithContext(ctx)
}

func (e UpgradeMode) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e UpgradeMode) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e UpgradeMode) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e UpgradeMode) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type UpgradeModeOutput struct{ *pulumi.OutputState }

func (UpgradeModeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*UpgradeMode)(nil)).Elem()
}

func (o UpgradeModeOutput) ToUpgradeModeOutput() UpgradeModeOutput {
	return o
}

func (o UpgradeModeOutput) ToUpgradeModeOutputWithContext(ctx context.Context) UpgradeModeOutput {
	return o
}

func (o UpgradeModeOutput) ToUpgradeModePtrOutput() UpgradeModePtrOutput {
	return o.ToUpgradeModePtrOutputWithContext(context.Background())
}

func (o UpgradeModeOutput) ToUpgradeModePtrOutputWithContext(ctx context.Context) UpgradeModePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v UpgradeMode) *UpgradeMode {
		return &v
	}).(UpgradeModePtrOutput)
}

func (o UpgradeModeOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o UpgradeModeOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e UpgradeMode) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o UpgradeModeOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o UpgradeModeOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e UpgradeMode) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type UpgradeModePtrOutput struct{ *pulumi.OutputState }

func (UpgradeModePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**UpgradeMode)(nil)).Elem()
}

func (o UpgradeModePtrOutput) ToUpgradeModePtrOutput() UpgradeModePtrOutput {
	return o
}

func (o UpgradeModePtrOutput) ToUpgradeModePtrOutputWithContext(ctx context.Context) UpgradeModePtrOutput {
	return o
}

func (o UpgradeModePtrOutput) Elem() UpgradeModeOutput {
	return o.ApplyT(func(v *UpgradeMode) UpgradeMode {
		if v != nil {
			return *v
		}
		var ret UpgradeMode
		return ret
	}).(UpgradeModeOutput)
}

func (o UpgradeModePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o UpgradeModePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *UpgradeMode) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// UpgradeModeInput is an input type that accepts UpgradeModeArgs and UpgradeModeOutput values.
// You can construct a concrete instance of `UpgradeModeInput` via:
//
//	UpgradeModeArgs{...}
type UpgradeModeInput interface {
	pulumi.Input

	ToUpgradeModeOutput() UpgradeModeOutput
	ToUpgradeModeOutputWithContext(context.Context) UpgradeModeOutput
}

var upgradeModePtrType = reflect.TypeOf((**UpgradeMode)(nil)).Elem()

type UpgradeModePtrInput interface {
	pulumi.Input

	ToUpgradeModePtrOutput() UpgradeModePtrOutput
	ToUpgradeModePtrOutputWithContext(context.Context) UpgradeModePtrOutput
}

type upgradeModePtr string

func UpgradeModePtr(v string) UpgradeModePtrInput {
	return (*upgradeModePtr)(&v)
}

func (*upgradeModePtr) ElementType() reflect.Type {
	return upgradeModePtrType
}

func (in *upgradeModePtr) ToUpgradeModePtrOutput() UpgradeModePtrOutput {
	return pulumi.ToOutput(in).(UpgradeModePtrOutput)
}

func (in *upgradeModePtr) ToUpgradeModePtrOutputWithContext(ctx context.Context) UpgradeModePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(UpgradeModePtrOutput)
}

// Specifies the eviction policy for the Azure Spot virtual machine and Azure Spot scale set. <br><br>For Azure Spot virtual machines, both 'Deallocate' and 'Delete' are supported and the minimum api-version is 2019-03-01. <br><br>For Azure Spot scale sets, both 'Deallocate' and 'Delete' are supported and the minimum api-version is 2017-10-30-preview.
type VirtualMachineEvictionPolicyTypes string

const (
	VirtualMachineEvictionPolicyTypesDeallocate = VirtualMachineEvictionPolicyTypes("Deallocate")
	VirtualMachineEvictionPolicyTypesDelete     = VirtualMachineEvictionPolicyTypes("Delete")
)

// Specifies the priority for the virtual machines in the scale set. <br><br>Minimum api-version: 2017-10-30-preview
type VirtualMachinePriorityTypes string

const (
	VirtualMachinePriorityTypesRegular = VirtualMachinePriorityTypes("Regular")
	VirtualMachinePriorityTypesLow     = VirtualMachinePriorityTypes("Low")
	VirtualMachinePriorityTypesSpot    = VirtualMachinePriorityTypes("Spot")
)

type VirtualMachineScaleSetScaleInRules string

const (
	VirtualMachineScaleSetScaleInRulesDefault  = VirtualMachineScaleSetScaleInRules("Default")
	VirtualMachineScaleSetScaleInRulesOldestVM = VirtualMachineScaleSetScaleInRules("OldestVM")
	VirtualMachineScaleSetScaleInRulesNewestVM = VirtualMachineScaleSetScaleInRules("NewestVM")
)

// Specifies the size of the virtual machine. <br><br> The enum data type is currently deprecated and will be removed by December 23rd 2023. <br><br> Recommended way to get the list of available sizes is using these APIs: <br><br> [List all available virtual machine sizes in an availability set](https://docs.microsoft.com/rest/api/compute/availabilitysets/listavailablesizes) <br><br> [List all available virtual machine sizes in a region](https://docs.microsoft.com/rest/api/compute/resourceskus/list) <br><br> [List all available virtual machine sizes for resizing](https://docs.microsoft.com/rest/api/compute/virtualmachines/listavailablesizes). For more information about virtual machine sizes, see [Sizes for virtual machines](https://docs.microsoft.com/azure/virtual-machines/sizes). <br><br> The available VM sizes depend on region and availability set.
type VirtualMachineSizeTypes string

const (
	VirtualMachineSizeTypes_Basic_A0            = VirtualMachineSizeTypes("Basic_A0")
	VirtualMachineSizeTypes_Basic_A1            = VirtualMachineSizeTypes("Basic_A1")
	VirtualMachineSizeTypes_Basic_A2            = VirtualMachineSizeTypes("Basic_A2")
	VirtualMachineSizeTypes_Basic_A3            = VirtualMachineSizeTypes("Basic_A3")
	VirtualMachineSizeTypes_Basic_A4            = VirtualMachineSizeTypes("Basic_A4")
	VirtualMachineSizeTypes_Standard_A0         = VirtualMachineSizeTypes("Standard_A0")
	VirtualMachineSizeTypes_Standard_A1         = VirtualMachineSizeTypes("Standard_A1")
	VirtualMachineSizeTypes_Standard_A2         = VirtualMachineSizeTypes("Standard_A2")
	VirtualMachineSizeTypes_Standard_A3         = VirtualMachineSizeTypes("Standard_A3")
	VirtualMachineSizeTypes_Standard_A4         = VirtualMachineSizeTypes("Standard_A4")
	VirtualMachineSizeTypes_Standard_A5         = VirtualMachineSizeTypes("Standard_A5")
	VirtualMachineSizeTypes_Standard_A6         = VirtualMachineSizeTypes("Standard_A6")
	VirtualMachineSizeTypes_Standard_A7         = VirtualMachineSizeTypes("Standard_A7")
	VirtualMachineSizeTypes_Standard_A8         = VirtualMachineSizeTypes("Standard_A8")
	VirtualMachineSizeTypes_Standard_A9         = VirtualMachineSizeTypes("Standard_A9")
	VirtualMachineSizeTypes_Standard_A10        = VirtualMachineSizeTypes("Standard_A10")
	VirtualMachineSizeTypes_Standard_A11        = VirtualMachineSizeTypes("Standard_A11")
	VirtualMachineSizeTypes_Standard_A1_v2      = VirtualMachineSizeTypes("Standard_A1_v2")
	VirtualMachineSizeTypes_Standard_A2_v2      = VirtualMachineSizeTypes("Standard_A2_v2")
	VirtualMachineSizeTypes_Standard_A4_v2      = VirtualMachineSizeTypes("Standard_A4_v2")
	VirtualMachineSizeTypes_Standard_A8_v2      = VirtualMachineSizeTypes("Standard_A8_v2")
	VirtualMachineSizeTypes_Standard_A2m_v2     = VirtualMachineSizeTypes("Standard_A2m_v2")
	VirtualMachineSizeTypes_Standard_A4m_v2     = VirtualMachineSizeTypes("Standard_A4m_v2")
	VirtualMachineSizeTypes_Standard_A8m_v2     = VirtualMachineSizeTypes("Standard_A8m_v2")
	VirtualMachineSizeTypes_Standard_B1s        = VirtualMachineSizeTypes("Standard_B1s")
	VirtualMachineSizeTypes_Standard_B1ms       = VirtualMachineSizeTypes("Standard_B1ms")
	VirtualMachineSizeTypes_Standard_B2s        = VirtualMachineSizeTypes("Standard_B2s")
	VirtualMachineSizeTypes_Standard_B2ms       = VirtualMachineSizeTypes("Standard_B2ms")
	VirtualMachineSizeTypes_Standard_B4ms       = VirtualMachineSizeTypes("Standard_B4ms")
	VirtualMachineSizeTypes_Standard_B8ms       = VirtualMachineSizeTypes("Standard_B8ms")
	VirtualMachineSizeTypes_Standard_D1         = VirtualMachineSizeTypes("Standard_D1")
	VirtualMachineSizeTypes_Standard_D2         = VirtualMachineSizeTypes("Standard_D2")
	VirtualMachineSizeTypes_Standard_D3         = VirtualMachineSizeTypes("Standard_D3")
	VirtualMachineSizeTypes_Standard_D4         = VirtualMachineSizeTypes("Standard_D4")
	VirtualMachineSizeTypes_Standard_D11        = VirtualMachineSizeTypes("Standard_D11")
	VirtualMachineSizeTypes_Standard_D12        = VirtualMachineSizeTypes("Standard_D12")
	VirtualMachineSizeTypes_Standard_D13        = VirtualMachineSizeTypes("Standard_D13")
	VirtualMachineSizeTypes_Standard_D14        = VirtualMachineSizeTypes("Standard_D14")
	VirtualMachineSizeTypes_Standard_D1_v2      = VirtualMachineSizeTypes("Standard_D1_v2")
	VirtualMachineSizeTypes_Standard_D2_v2      = VirtualMachineSizeTypes("Standard_D2_v2")
	VirtualMachineSizeTypes_Standard_D3_v2      = VirtualMachineSizeTypes("Standard_D3_v2")
	VirtualMachineSizeTypes_Standard_D4_v2      = VirtualMachineSizeTypes("Standard_D4_v2")
	VirtualMachineSizeTypes_Standard_D5_v2      = VirtualMachineSizeTypes("Standard_D5_v2")
	VirtualMachineSizeTypes_Standard_D2_v3      = VirtualMachineSizeTypes("Standard_D2_v3")
	VirtualMachineSizeTypes_Standard_D4_v3      = VirtualMachineSizeTypes("Standard_D4_v3")
	VirtualMachineSizeTypes_Standard_D8_v3      = VirtualMachineSizeTypes("Standard_D8_v3")
	VirtualMachineSizeTypes_Standard_D16_v3     = VirtualMachineSizeTypes("Standard_D16_v3")
	VirtualMachineSizeTypes_Standard_D32_v3     = VirtualMachineSizeTypes("Standard_D32_v3")
	VirtualMachineSizeTypes_Standard_D64_v3     = VirtualMachineSizeTypes("Standard_D64_v3")
	VirtualMachineSizeTypes_Standard_D2s_v3     = VirtualMachineSizeTypes("Standard_D2s_v3")
	VirtualMachineSizeTypes_Standard_D4s_v3     = VirtualMachineSizeTypes("Standard_D4s_v3")
	VirtualMachineSizeTypes_Standard_D8s_v3     = VirtualMachineSizeTypes("Standard_D8s_v3")
	VirtualMachineSizeTypes_Standard_D16s_v3    = VirtualMachineSizeTypes("Standard_D16s_v3")
	VirtualMachineSizeTypes_Standard_D32s_v3    = VirtualMachineSizeTypes("Standard_D32s_v3")
	VirtualMachineSizeTypes_Standard_D64s_v3    = VirtualMachineSizeTypes("Standard_D64s_v3")
	VirtualMachineSizeTypes_Standard_D11_v2     = VirtualMachineSizeTypes("Standard_D11_v2")
	VirtualMachineSizeTypes_Standard_D12_v2     = VirtualMachineSizeTypes("Standard_D12_v2")
	VirtualMachineSizeTypes_Standard_D13_v2     = VirtualMachineSizeTypes("Standard_D13_v2")
	VirtualMachineSizeTypes_Standard_D14_v2     = VirtualMachineSizeTypes("Standard_D14_v2")
	VirtualMachineSizeTypes_Standard_D15_v2     = VirtualMachineSizeTypes("Standard_D15_v2")
	VirtualMachineSizeTypes_Standard_DS1        = VirtualMachineSizeTypes("Standard_DS1")
	VirtualMachineSizeTypes_Standard_DS2        = VirtualMachineSizeTypes("Standard_DS2")
	VirtualMachineSizeTypes_Standard_DS3        = VirtualMachineSizeTypes("Standard_DS3")
	VirtualMachineSizeTypes_Standard_DS4        = VirtualMachineSizeTypes("Standard_DS4")
	VirtualMachineSizeTypes_Standard_DS11       = VirtualMachineSizeTypes("Standard_DS11")
	VirtualMachineSizeTypes_Standard_DS12       = VirtualMachineSizeTypes("Standard_DS12")
	VirtualMachineSizeTypes_Standard_DS13       = VirtualMachineSizeTypes("Standard_DS13")
	VirtualMachineSizeTypes_Standard_DS14       = VirtualMachineSizeTypes("Standard_DS14")
	VirtualMachineSizeTypes_Standard_DS1_v2     = VirtualMachineSizeTypes("Standard_DS1_v2")
	VirtualMachineSizeTypes_Standard_DS2_v2     = VirtualMachineSizeTypes("Standard_DS2_v2")
	VirtualMachineSizeTypes_Standard_DS3_v2     = VirtualMachineSizeTypes("Standard_DS3_v2")
	VirtualMachineSizeTypes_Standard_DS4_v2     = VirtualMachineSizeTypes("Standard_DS4_v2")
	VirtualMachineSizeTypes_Standard_DS5_v2     = VirtualMachineSizeTypes("Standard_DS5_v2")
	VirtualMachineSizeTypes_Standard_DS11_v2    = VirtualMachineSizeTypes("Standard_DS11_v2")
	VirtualMachineSizeTypes_Standard_DS12_v2    = VirtualMachineSizeTypes("Standard_DS12_v2")
	VirtualMachineSizeTypes_Standard_DS13_v2    = VirtualMachineSizeTypes("Standard_DS13_v2")
	VirtualMachineSizeTypes_Standard_DS14_v2    = VirtualMachineSizeTypes("Standard_DS14_v2")
	VirtualMachineSizeTypes_Standard_DS15_v2    = VirtualMachineSizeTypes("Standard_DS15_v2")
	VirtualMachineSizeTypes_Standard_DS13_4_v2  = VirtualMachineSizeTypes("Standard_DS13-4_v2")
	VirtualMachineSizeTypes_Standard_DS13_2_v2  = VirtualMachineSizeTypes("Standard_DS13-2_v2")
	VirtualMachineSizeTypes_Standard_DS14_8_v2  = VirtualMachineSizeTypes("Standard_DS14-8_v2")
	VirtualMachineSizeTypes_Standard_DS14_4_v2  = VirtualMachineSizeTypes("Standard_DS14-4_v2")
	VirtualMachineSizeTypes_Standard_E2_v3      = VirtualMachineSizeTypes("Standard_E2_v3")
	VirtualMachineSizeTypes_Standard_E4_v3      = VirtualMachineSizeTypes("Standard_E4_v3")
	VirtualMachineSizeTypes_Standard_E8_v3      = VirtualMachineSizeTypes("Standard_E8_v3")
	VirtualMachineSizeTypes_Standard_E16_v3     = VirtualMachineSizeTypes("Standard_E16_v3")
	VirtualMachineSizeTypes_Standard_E32_v3     = VirtualMachineSizeTypes("Standard_E32_v3")
	VirtualMachineSizeTypes_Standard_E64_v3     = VirtualMachineSizeTypes("Standard_E64_v3")
	VirtualMachineSizeTypes_Standard_E2s_v3     = VirtualMachineSizeTypes("Standard_E2s_v3")
	VirtualMachineSizeTypes_Standard_E4s_v3     = VirtualMachineSizeTypes("Standard_E4s_v3")
	VirtualMachineSizeTypes_Standard_E8s_v3     = VirtualMachineSizeTypes("Standard_E8s_v3")
	VirtualMachineSizeTypes_Standard_E16s_v3    = VirtualMachineSizeTypes("Standard_E16s_v3")
	VirtualMachineSizeTypes_Standard_E32s_v3    = VirtualMachineSizeTypes("Standard_E32s_v3")
	VirtualMachineSizeTypes_Standard_E64s_v3    = VirtualMachineSizeTypes("Standard_E64s_v3")
	VirtualMachineSizeTypes_Standard_E32_16_v3  = VirtualMachineSizeTypes("Standard_E32-16_v3")
	VirtualMachineSizeTypes_Standard_E32_8s_v3  = VirtualMachineSizeTypes("Standard_E32-8s_v3")
	VirtualMachineSizeTypes_Standard_E64_32s_v3 = VirtualMachineSizeTypes("Standard_E64-32s_v3")
	VirtualMachineSizeTypes_Standard_E64_16s_v3 = VirtualMachineSizeTypes("Standard_E64-16s_v3")
	VirtualMachineSizeTypes_Standard_F1         = VirtualMachineSizeTypes("Standard_F1")
	VirtualMachineSizeTypes_Standard_F2         = VirtualMachineSizeTypes("Standard_F2")
	VirtualMachineSizeTypes_Standard_F4         = VirtualMachineSizeTypes("Standard_F4")
	VirtualMachineSizeTypes_Standard_F8         = VirtualMachineSizeTypes("Standard_F8")
	VirtualMachineSizeTypes_Standard_F16        = VirtualMachineSizeTypes("Standard_F16")
	VirtualMachineSizeTypes_Standard_F1s        = VirtualMachineSizeTypes("Standard_F1s")
	VirtualMachineSizeTypes_Standard_F2s        = VirtualMachineSizeTypes("Standard_F2s")
	VirtualMachineSizeTypes_Standard_F4s        = VirtualMachineSizeTypes("Standard_F4s")
	VirtualMachineSizeTypes_Standard_F8s        = VirtualMachineSizeTypes("Standard_F8s")
	VirtualMachineSizeTypes_Standard_F16s       = VirtualMachineSizeTypes("Standard_F16s")
	VirtualMachineSizeTypes_Standard_F2s_v2     = VirtualMachineSizeTypes("Standard_F2s_v2")
	VirtualMachineSizeTypes_Standard_F4s_v2     = VirtualMachineSizeTypes("Standard_F4s_v2")
	VirtualMachineSizeTypes_Standard_F8s_v2     = VirtualMachineSizeTypes("Standard_F8s_v2")
	VirtualMachineSizeTypes_Standard_F16s_v2    = VirtualMachineSizeTypes("Standard_F16s_v2")
	VirtualMachineSizeTypes_Standard_F32s_v2    = VirtualMachineSizeTypes("Standard_F32s_v2")
	VirtualMachineSizeTypes_Standard_F64s_v2    = VirtualMachineSizeTypes("Standard_F64s_v2")
	VirtualMachineSizeTypes_Standard_F72s_v2    = VirtualMachineSizeTypes("Standard_F72s_v2")
	VirtualMachineSizeTypes_Standard_G1         = VirtualMachineSizeTypes("Standard_G1")
	VirtualMachineSizeTypes_Standard_G2         = VirtualMachineSizeTypes("Standard_G2")
	VirtualMachineSizeTypes_Standard_G3         = VirtualMachineSizeTypes("Standard_G3")
	VirtualMachineSizeTypes_Standard_G4         = VirtualMachineSizeTypes("Standard_G4")
	VirtualMachineSizeTypes_Standard_G5         = VirtualMachineSizeTypes("Standard_G5")
	VirtualMachineSizeTypes_Standard_GS1        = VirtualMachineSizeTypes("Standard_GS1")
	VirtualMachineSizeTypes_Standard_GS2        = VirtualMachineSizeTypes("Standard_GS2")
	VirtualMachineSizeTypes_Standard_GS3        = VirtualMachineSizeTypes("Standard_GS3")
	VirtualMachineSizeTypes_Standard_GS4        = VirtualMachineSizeTypes("Standard_GS4")
	VirtualMachineSizeTypes_Standard_GS5        = VirtualMachineSizeTypes("Standard_GS5")
	VirtualMachineSizeTypes_Standard_GS4_8      = VirtualMachineSizeTypes("Standard_GS4-8")
	VirtualMachineSizeTypes_Standard_GS4_4      = VirtualMachineSizeTypes("Standard_GS4-4")
	VirtualMachineSizeTypes_Standard_GS5_16     = VirtualMachineSizeTypes("Standard_GS5-16")
	VirtualMachineSizeTypes_Standard_GS5_8      = VirtualMachineSizeTypes("Standard_GS5-8")
	VirtualMachineSizeTypes_Standard_H8         = VirtualMachineSizeTypes("Standard_H8")
	VirtualMachineSizeTypes_Standard_H16        = VirtualMachineSizeTypes("Standard_H16")
	VirtualMachineSizeTypes_Standard_H8m        = VirtualMachineSizeTypes("Standard_H8m")
	VirtualMachineSizeTypes_Standard_H16m       = VirtualMachineSizeTypes("Standard_H16m")
	VirtualMachineSizeTypes_Standard_H16r       = VirtualMachineSizeTypes("Standard_H16r")
	VirtualMachineSizeTypes_Standard_H16mr      = VirtualMachineSizeTypes("Standard_H16mr")
	VirtualMachineSizeTypes_Standard_L4s        = VirtualMachineSizeTypes("Standard_L4s")
	VirtualMachineSizeTypes_Standard_L8s        = VirtualMachineSizeTypes("Standard_L8s")
	VirtualMachineSizeTypes_Standard_L16s       = VirtualMachineSizeTypes("Standard_L16s")
	VirtualMachineSizeTypes_Standard_L32s       = VirtualMachineSizeTypes("Standard_L32s")
	VirtualMachineSizeTypes_Standard_M64s       = VirtualMachineSizeTypes("Standard_M64s")
	VirtualMachineSizeTypes_Standard_M64ms      = VirtualMachineSizeTypes("Standard_M64ms")
	VirtualMachineSizeTypes_Standard_M128s      = VirtualMachineSizeTypes("Standard_M128s")
	VirtualMachineSizeTypes_Standard_M128ms     = VirtualMachineSizeTypes("Standard_M128ms")
	VirtualMachineSizeTypes_Standard_M64_32ms   = VirtualMachineSizeTypes("Standard_M64-32ms")
	VirtualMachineSizeTypes_Standard_M64_16ms   = VirtualMachineSizeTypes("Standard_M64-16ms")
	VirtualMachineSizeTypes_Standard_M128_64ms  = VirtualMachineSizeTypes("Standard_M128-64ms")
	VirtualMachineSizeTypes_Standard_M128_32ms  = VirtualMachineSizeTypes("Standard_M128-32ms")
	VirtualMachineSizeTypes_Standard_NC6        = VirtualMachineSizeTypes("Standard_NC6")
	VirtualMachineSizeTypes_Standard_NC12       = VirtualMachineSizeTypes("Standard_NC12")
	VirtualMachineSizeTypes_Standard_NC24       = VirtualMachineSizeTypes("Standard_NC24")
	VirtualMachineSizeTypes_Standard_NC24r      = VirtualMachineSizeTypes("Standard_NC24r")
	VirtualMachineSizeTypes_Standard_NC6s_v2    = VirtualMachineSizeTypes("Standard_NC6s_v2")
	VirtualMachineSizeTypes_Standard_NC12s_v2   = VirtualMachineSizeTypes("Standard_NC12s_v2")
	VirtualMachineSizeTypes_Standard_NC24s_v2   = VirtualMachineSizeTypes("Standard_NC24s_v2")
	VirtualMachineSizeTypes_Standard_NC24rs_v2  = VirtualMachineSizeTypes("Standard_NC24rs_v2")
	VirtualMachineSizeTypes_Standard_NC6s_v3    = VirtualMachineSizeTypes("Standard_NC6s_v3")
	VirtualMachineSizeTypes_Standard_NC12s_v3   = VirtualMachineSizeTypes("Standard_NC12s_v3")
	VirtualMachineSizeTypes_Standard_NC24s_v3   = VirtualMachineSizeTypes("Standard_NC24s_v3")
	VirtualMachineSizeTypes_Standard_NC24rs_v3  = VirtualMachineSizeTypes("Standard_NC24rs_v3")
	VirtualMachineSizeTypes_Standard_ND6s       = VirtualMachineSizeTypes("Standard_ND6s")
	VirtualMachineSizeTypes_Standard_ND12s      = VirtualMachineSizeTypes("Standard_ND12s")
	VirtualMachineSizeTypes_Standard_ND24s      = VirtualMachineSizeTypes("Standard_ND24s")
	VirtualMachineSizeTypes_Standard_ND24rs     = VirtualMachineSizeTypes("Standard_ND24rs")
	VirtualMachineSizeTypes_Standard_NV6        = VirtualMachineSizeTypes("Standard_NV6")
	VirtualMachineSizeTypes_Standard_NV12       = VirtualMachineSizeTypes("Standard_NV12")
	VirtualMachineSizeTypes_Standard_NV24       = VirtualMachineSizeTypes("Standard_NV24")
)

// Specifies the mode of VM Guest patch assessment for the IaaS virtual machine.<br /><br /> Possible values are:<br /><br /> **ImageDefault** - You control the timing of patch assessments on a virtual machine.<br /><br /> **AutomaticByPlatform** - The platform will trigger periodic patch assessments. The property provisionVMAgent must be true.
type WindowsPatchAssessmentMode string

const (
	WindowsPatchAssessmentModeImageDefault        = WindowsPatchAssessmentMode("ImageDefault")
	WindowsPatchAssessmentModeAutomaticByPlatform = WindowsPatchAssessmentMode("AutomaticByPlatform")
)

// Specifies the mode of VM Guest Patching to IaaS virtual machine or virtual machines associated to virtual machine scale set with OrchestrationMode as Flexible.<br /><br /> Possible values are:<br /><br /> **Manual** - You  control the application of patches to a virtual machine. You do this by applying patches manually inside the VM. In this mode, automatic updates are disabled; the property WindowsConfiguration.enableAutomaticUpdates must be false<br /><br /> **AutomaticByOS** - The virtual machine will automatically be updated by the OS. The property WindowsConfiguration.enableAutomaticUpdates must be true. <br /><br /> **AutomaticByPlatform** - the virtual machine will automatically updated by the platform. The properties provisionVMAgent and WindowsConfiguration.enableAutomaticUpdates must be true
type WindowsVMGuestPatchMode string

const (
	WindowsVMGuestPatchModeManual              = WindowsVMGuestPatchMode("Manual")
	WindowsVMGuestPatchModeAutomaticByOS       = WindowsVMGuestPatchMode("AutomaticByOS")
	WindowsVMGuestPatchModeAutomaticByPlatform = WindowsVMGuestPatchMode("AutomaticByPlatform")
)

func init() {
	pulumi.RegisterOutputType(CachingTypesOutput{})
	pulumi.RegisterOutputType(CachingTypesPtrOutput{})
	pulumi.RegisterOutputType(ComponentNamesOutput{})
	pulumi.RegisterOutputType(ComponentNamesPtrOutput{})
	pulumi.RegisterOutputType(DedicatedHostLicenseTypesOutput{})
	pulumi.RegisterOutputType(DedicatedHostLicenseTypesPtrOutput{})
	pulumi.RegisterOutputType(HostCachingOutput{})
	pulumi.RegisterOutputType(HostCachingPtrOutput{})
	pulumi.RegisterOutputType(IntervalInMinsOutput{})
	pulumi.RegisterOutputType(IntervalInMinsPtrOutput{})
	pulumi.RegisterOutputType(OperatingSystemStateTypesOutput{})
	pulumi.RegisterOutputType(OperatingSystemStateTypesPtrOutput{})
	pulumi.RegisterOutputType(OperatingSystemTypesOutput{})
	pulumi.RegisterOutputType(OperatingSystemTypesPtrOutput{})
	pulumi.RegisterOutputType(PassNamesOutput{})
	pulumi.RegisterOutputType(PassNamesPtrOutput{})
	pulumi.RegisterOutputType(ProtocolTypesOutput{})
	pulumi.RegisterOutputType(ProtocolTypesPtrOutput{})
	pulumi.RegisterOutputType(ResourceIdentityTypeOutput{})
	pulumi.RegisterOutputType(ResourceIdentityTypePtrOutput{})
	pulumi.RegisterOutputType(SettingNamesOutput{})
	pulumi.RegisterOutputType(SettingNamesPtrOutput{})
	pulumi.RegisterOutputType(StatusLevelTypesOutput{})
	pulumi.RegisterOutputType(StatusLevelTypesPtrOutput{})
	pulumi.RegisterOutputType(UpgradeModeOutput{})
	pulumi.RegisterOutputType(UpgradeModePtrOutput{})
}
