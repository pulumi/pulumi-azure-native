// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v20180401

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Describes a Virtual Machine Scale Set Extension.
//
// Deprecated: Version 2018-04-01 will be removed in v2 of the provider.
func LookupVirtualMachineScaleSetExtension(ctx *pulumi.Context, args *LookupVirtualMachineScaleSetExtensionArgs, opts ...pulumi.InvokeOption) (*LookupVirtualMachineScaleSetExtensionResult, error) {
	var rv LookupVirtualMachineScaleSetExtensionResult
	err := ctx.Invoke("azure-native:compute/v20180401:getVirtualMachineScaleSetExtension", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type LookupVirtualMachineScaleSetExtensionArgs struct {
	// The expand expression to apply on the operation.
	Expand *string `pulumi:"expand"`
	// The name of the resource group.
	ResourceGroupName string `pulumi:"resourceGroupName"`
	// The name of the VM scale set containing the extension.
	VmScaleSetName string `pulumi:"vmScaleSetName"`
	// The name of the VM scale set extension.
	VmssExtensionName string `pulumi:"vmssExtensionName"`
}

// Describes a Virtual Machine Scale Set Extension.
type LookupVirtualMachineScaleSetExtensionResult struct {
	// Indicates whether the extension should use a newer minor version if one is available at deployment time. Once deployed, however, the extension will not upgrade minor versions unless redeployed, even with this property set to true.
	AutoUpgradeMinorVersion *bool `pulumi:"autoUpgradeMinorVersion"`
	// If a value is provided and is different from the previous value, the extension handler will be forced to update even if the extension configuration has not changed.
	ForceUpdateTag *string `pulumi:"forceUpdateTag"`
	// Resource Id
	Id string `pulumi:"id"`
	// The name of the extension.
	Name *string `pulumi:"name"`
	// The extension can contain either protectedSettings or protectedSettingsFromKeyVault or no protected settings at all.
	ProtectedSettings interface{} `pulumi:"protectedSettings"`
	// The provisioning state, which only appears in the response.
	ProvisioningState string `pulumi:"provisioningState"`
	// The name of the extension handler publisher.
	Publisher *string `pulumi:"publisher"`
	// Json formatted public settings for the extension.
	Settings interface{} `pulumi:"settings"`
	// Specifies the type of the extension; an example is "CustomScriptExtension".
	Type *string `pulumi:"type"`
	// Specifies the version of the script handler.
	TypeHandlerVersion *string `pulumi:"typeHandlerVersion"`
}

func LookupVirtualMachineScaleSetExtensionOutput(ctx *pulumi.Context, args LookupVirtualMachineScaleSetExtensionOutputArgs, opts ...pulumi.InvokeOption) LookupVirtualMachineScaleSetExtensionResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupVirtualMachineScaleSetExtensionResult, error) {
			args := v.(LookupVirtualMachineScaleSetExtensionArgs)
			r, err := LookupVirtualMachineScaleSetExtension(ctx, &args, opts...)
			var s LookupVirtualMachineScaleSetExtensionResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupVirtualMachineScaleSetExtensionResultOutput)
}

type LookupVirtualMachineScaleSetExtensionOutputArgs struct {
	// The expand expression to apply on the operation.
	Expand pulumi.StringPtrInput `pulumi:"expand"`
	// The name of the resource group.
	ResourceGroupName pulumi.StringInput `pulumi:"resourceGroupName"`
	// The name of the VM scale set containing the extension.
	VmScaleSetName pulumi.StringInput `pulumi:"vmScaleSetName"`
	// The name of the VM scale set extension.
	VmssExtensionName pulumi.StringInput `pulumi:"vmssExtensionName"`
}

func (LookupVirtualMachineScaleSetExtensionOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupVirtualMachineScaleSetExtensionArgs)(nil)).Elem()
}

// Describes a Virtual Machine Scale Set Extension.
type LookupVirtualMachineScaleSetExtensionResultOutput struct{ *pulumi.OutputState }

func (LookupVirtualMachineScaleSetExtensionResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupVirtualMachineScaleSetExtensionResult)(nil)).Elem()
}

func (o LookupVirtualMachineScaleSetExtensionResultOutput) ToLookupVirtualMachineScaleSetExtensionResultOutput() LookupVirtualMachineScaleSetExtensionResultOutput {
	return o
}

func (o LookupVirtualMachineScaleSetExtensionResultOutput) ToLookupVirtualMachineScaleSetExtensionResultOutputWithContext(ctx context.Context) LookupVirtualMachineScaleSetExtensionResultOutput {
	return o
}

// Indicates whether the extension should use a newer minor version if one is available at deployment time. Once deployed, however, the extension will not upgrade minor versions unless redeployed, even with this property set to true.
func (o LookupVirtualMachineScaleSetExtensionResultOutput) AutoUpgradeMinorVersion() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v LookupVirtualMachineScaleSetExtensionResult) *bool { return v.AutoUpgradeMinorVersion }).(pulumi.BoolPtrOutput)
}

// If a value is provided and is different from the previous value, the extension handler will be forced to update even if the extension configuration has not changed.
func (o LookupVirtualMachineScaleSetExtensionResultOutput) ForceUpdateTag() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupVirtualMachineScaleSetExtensionResult) *string { return v.ForceUpdateTag }).(pulumi.StringPtrOutput)
}

// Resource Id
func (o LookupVirtualMachineScaleSetExtensionResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupVirtualMachineScaleSetExtensionResult) string { return v.Id }).(pulumi.StringOutput)
}

// The name of the extension.
func (o LookupVirtualMachineScaleSetExtensionResultOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupVirtualMachineScaleSetExtensionResult) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The extension can contain either protectedSettings or protectedSettingsFromKeyVault or no protected settings at all.
func (o LookupVirtualMachineScaleSetExtensionResultOutput) ProtectedSettings() pulumi.AnyOutput {
	return o.ApplyT(func(v LookupVirtualMachineScaleSetExtensionResult) interface{} { return v.ProtectedSettings }).(pulumi.AnyOutput)
}

// The provisioning state, which only appears in the response.
func (o LookupVirtualMachineScaleSetExtensionResultOutput) ProvisioningState() pulumi.StringOutput {
	return o.ApplyT(func(v LookupVirtualMachineScaleSetExtensionResult) string { return v.ProvisioningState }).(pulumi.StringOutput)
}

// The name of the extension handler publisher.
func (o LookupVirtualMachineScaleSetExtensionResultOutput) Publisher() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupVirtualMachineScaleSetExtensionResult) *string { return v.Publisher }).(pulumi.StringPtrOutput)
}

// Json formatted public settings for the extension.
func (o LookupVirtualMachineScaleSetExtensionResultOutput) Settings() pulumi.AnyOutput {
	return o.ApplyT(func(v LookupVirtualMachineScaleSetExtensionResult) interface{} { return v.Settings }).(pulumi.AnyOutput)
}

// Specifies the type of the extension; an example is "CustomScriptExtension".
func (o LookupVirtualMachineScaleSetExtensionResultOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupVirtualMachineScaleSetExtensionResult) *string { return v.Type }).(pulumi.StringPtrOutput)
}

// Specifies the version of the script handler.
func (o LookupVirtualMachineScaleSetExtensionResultOutput) TypeHandlerVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupVirtualMachineScaleSetExtensionResult) *string { return v.TypeHandlerVersion }).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupVirtualMachineScaleSetExtensionResultOutput{})
}
