// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v20180930

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// Data used when creating a disk.
type CreationData struct {
	// This enumerates the possible sources of a disk's creation.
	CreateOption string `pulumi:"createOption"`
	// Disk source information.
	ImageReference *ImageDiskReference `pulumi:"imageReference"`
	// If createOption is Copy, this is the ARM id of the source snapshot or disk.
	SourceResourceId *string `pulumi:"sourceResourceId"`
	// If createOption is Import, this is the URI of a blob to be imported into a managed disk.
	SourceUri *string `pulumi:"sourceUri"`
	// If createOption is Import, the Azure Resource Manager identifier of the storage account containing the blob to import as a disk. Required only if the blob is in a different subscription
	StorageAccountId *string `pulumi:"storageAccountId"`
}

// CreationDataInput is an input type that accepts CreationDataArgs and CreationDataOutput values.
// You can construct a concrete instance of `CreationDataInput` via:
//
//          CreationDataArgs{...}
type CreationDataInput interface {
	pulumi.Input

	ToCreationDataOutput() CreationDataOutput
	ToCreationDataOutputWithContext(context.Context) CreationDataOutput
}

// Data used when creating a disk.
type CreationDataArgs struct {
	// This enumerates the possible sources of a disk's creation.
	CreateOption pulumi.StringInput `pulumi:"createOption"`
	// Disk source information.
	ImageReference ImageDiskReferencePtrInput `pulumi:"imageReference"`
	// If createOption is Copy, this is the ARM id of the source snapshot or disk.
	SourceResourceId pulumi.StringPtrInput `pulumi:"sourceResourceId"`
	// If createOption is Import, this is the URI of a blob to be imported into a managed disk.
	SourceUri pulumi.StringPtrInput `pulumi:"sourceUri"`
	// If createOption is Import, the Azure Resource Manager identifier of the storage account containing the blob to import as a disk. Required only if the blob is in a different subscription
	StorageAccountId pulumi.StringPtrInput `pulumi:"storageAccountId"`
}

func (CreationDataArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CreationData)(nil)).Elem()
}

func (i CreationDataArgs) ToCreationDataOutput() CreationDataOutput {
	return i.ToCreationDataOutputWithContext(context.Background())
}

func (i CreationDataArgs) ToCreationDataOutputWithContext(ctx context.Context) CreationDataOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CreationDataOutput)
}

func (i CreationDataArgs) ToCreationDataPtrOutput() CreationDataPtrOutput {
	return i.ToCreationDataPtrOutputWithContext(context.Background())
}

func (i CreationDataArgs) ToCreationDataPtrOutputWithContext(ctx context.Context) CreationDataPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CreationDataOutput).ToCreationDataPtrOutputWithContext(ctx)
}

// CreationDataPtrInput is an input type that accepts CreationDataArgs, CreationDataPtr and CreationDataPtrOutput values.
// You can construct a concrete instance of `CreationDataPtrInput` via:
//
//          CreationDataArgs{...}
//
//  or:
//
//          nil
type CreationDataPtrInput interface {
	pulumi.Input

	ToCreationDataPtrOutput() CreationDataPtrOutput
	ToCreationDataPtrOutputWithContext(context.Context) CreationDataPtrOutput
}

type creationDataPtrType CreationDataArgs

func CreationDataPtr(v *CreationDataArgs) CreationDataPtrInput {
	return (*creationDataPtrType)(v)
}

func (*creationDataPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CreationData)(nil)).Elem()
}

func (i *creationDataPtrType) ToCreationDataPtrOutput() CreationDataPtrOutput {
	return i.ToCreationDataPtrOutputWithContext(context.Background())
}

func (i *creationDataPtrType) ToCreationDataPtrOutputWithContext(ctx context.Context) CreationDataPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CreationDataPtrOutput)
}

// Data used when creating a disk.
type CreationDataOutput struct{ *pulumi.OutputState }

func (CreationDataOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CreationData)(nil)).Elem()
}

func (o CreationDataOutput) ToCreationDataOutput() CreationDataOutput {
	return o
}

func (o CreationDataOutput) ToCreationDataOutputWithContext(ctx context.Context) CreationDataOutput {
	return o
}

func (o CreationDataOutput) ToCreationDataPtrOutput() CreationDataPtrOutput {
	return o.ToCreationDataPtrOutputWithContext(context.Background())
}

func (o CreationDataOutput) ToCreationDataPtrOutputWithContext(ctx context.Context) CreationDataPtrOutput {
	return o.ApplyT(func(v CreationData) *CreationData {
		return &v
	}).(CreationDataPtrOutput)
}

// This enumerates the possible sources of a disk's creation.
func (o CreationDataOutput) CreateOption() pulumi.StringOutput {
	return o.ApplyT(func(v CreationData) string { return v.CreateOption }).(pulumi.StringOutput)
}

// Disk source information.
func (o CreationDataOutput) ImageReference() ImageDiskReferencePtrOutput {
	return o.ApplyT(func(v CreationData) *ImageDiskReference { return v.ImageReference }).(ImageDiskReferencePtrOutput)
}

// If createOption is Copy, this is the ARM id of the source snapshot or disk.
func (o CreationDataOutput) SourceResourceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CreationData) *string { return v.SourceResourceId }).(pulumi.StringPtrOutput)
}

// If createOption is Import, this is the URI of a blob to be imported into a managed disk.
func (o CreationDataOutput) SourceUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CreationData) *string { return v.SourceUri }).(pulumi.StringPtrOutput)
}

// If createOption is Import, the Azure Resource Manager identifier of the storage account containing the blob to import as a disk. Required only if the blob is in a different subscription
func (o CreationDataOutput) StorageAccountId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CreationData) *string { return v.StorageAccountId }).(pulumi.StringPtrOutput)
}

type CreationDataPtrOutput struct{ *pulumi.OutputState }

func (CreationDataPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CreationData)(nil)).Elem()
}

func (o CreationDataPtrOutput) ToCreationDataPtrOutput() CreationDataPtrOutput {
	return o
}

func (o CreationDataPtrOutput) ToCreationDataPtrOutputWithContext(ctx context.Context) CreationDataPtrOutput {
	return o
}

func (o CreationDataPtrOutput) Elem() CreationDataOutput {
	return o.ApplyT(func(v *CreationData) CreationData { return *v }).(CreationDataOutput)
}

// This enumerates the possible sources of a disk's creation.
func (o CreationDataPtrOutput) CreateOption() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CreationData) *string {
		if v == nil {
			return nil
		}
		return &v.CreateOption
	}).(pulumi.StringPtrOutput)
}

// Disk source information.
func (o CreationDataPtrOutput) ImageReference() ImageDiskReferencePtrOutput {
	return o.ApplyT(func(v *CreationData) *ImageDiskReference {
		if v == nil {
			return nil
		}
		return v.ImageReference
	}).(ImageDiskReferencePtrOutput)
}

// If createOption is Copy, this is the ARM id of the source snapshot or disk.
func (o CreationDataPtrOutput) SourceResourceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CreationData) *string {
		if v == nil {
			return nil
		}
		return v.SourceResourceId
	}).(pulumi.StringPtrOutput)
}

// If createOption is Import, this is the URI of a blob to be imported into a managed disk.
func (o CreationDataPtrOutput) SourceUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CreationData) *string {
		if v == nil {
			return nil
		}
		return v.SourceUri
	}).(pulumi.StringPtrOutput)
}

// If createOption is Import, the Azure Resource Manager identifier of the storage account containing the blob to import as a disk. Required only if the blob is in a different subscription
func (o CreationDataPtrOutput) StorageAccountId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CreationData) *string {
		if v == nil {
			return nil
		}
		return v.StorageAccountId
	}).(pulumi.StringPtrOutput)
}

// Data used when creating a disk.
type CreationDataInvokeResponse struct {
	// This enumerates the possible sources of a disk's creation.
	CreateOption string `pulumi:"createOption"`
	// Disk source information.
	ImageReference *ImageDiskReferenceInvokeResponse `pulumi:"imageReference"`
	// If createOption is Copy, this is the ARM id of the source snapshot or disk.
	SourceResourceId *string `pulumi:"sourceResourceId"`
	// If createOption is Import, this is the URI of a blob to be imported into a managed disk.
	SourceUri *string `pulumi:"sourceUri"`
	// If createOption is Import, the Azure Resource Manager identifier of the storage account containing the blob to import as a disk. Required only if the blob is in a different subscription
	StorageAccountId *string `pulumi:"storageAccountId"`
}

// CreationDataInvokeResponseInput is an input type that accepts CreationDataInvokeResponseArgs and CreationDataInvokeResponseOutput values.
// You can construct a concrete instance of `CreationDataInvokeResponseInput` via:
//
//          CreationDataInvokeResponseArgs{...}
type CreationDataInvokeResponseInput interface {
	pulumi.Input

	ToCreationDataInvokeResponseOutput() CreationDataInvokeResponseOutput
	ToCreationDataInvokeResponseOutputWithContext(context.Context) CreationDataInvokeResponseOutput
}

// Data used when creating a disk.
type CreationDataInvokeResponseArgs struct {
	// This enumerates the possible sources of a disk's creation.
	CreateOption pulumi.StringInput `pulumi:"createOption"`
	// Disk source information.
	ImageReference ImageDiskReferenceInvokeResponsePtrInput `pulumi:"imageReference"`
	// If createOption is Copy, this is the ARM id of the source snapshot or disk.
	SourceResourceId pulumi.StringPtrInput `pulumi:"sourceResourceId"`
	// If createOption is Import, this is the URI of a blob to be imported into a managed disk.
	SourceUri pulumi.StringPtrInput `pulumi:"sourceUri"`
	// If createOption is Import, the Azure Resource Manager identifier of the storage account containing the blob to import as a disk. Required only if the blob is in a different subscription
	StorageAccountId pulumi.StringPtrInput `pulumi:"storageAccountId"`
}

func (CreationDataInvokeResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CreationDataInvokeResponse)(nil)).Elem()
}

func (i CreationDataInvokeResponseArgs) ToCreationDataInvokeResponseOutput() CreationDataInvokeResponseOutput {
	return i.ToCreationDataInvokeResponseOutputWithContext(context.Background())
}

func (i CreationDataInvokeResponseArgs) ToCreationDataInvokeResponseOutputWithContext(ctx context.Context) CreationDataInvokeResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CreationDataInvokeResponseOutput)
}

// Data used when creating a disk.
type CreationDataInvokeResponseOutput struct{ *pulumi.OutputState }

func (CreationDataInvokeResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CreationDataInvokeResponse)(nil)).Elem()
}

func (o CreationDataInvokeResponseOutput) ToCreationDataInvokeResponseOutput() CreationDataInvokeResponseOutput {
	return o
}

func (o CreationDataInvokeResponseOutput) ToCreationDataInvokeResponseOutputWithContext(ctx context.Context) CreationDataInvokeResponseOutput {
	return o
}

// This enumerates the possible sources of a disk's creation.
func (o CreationDataInvokeResponseOutput) CreateOption() pulumi.StringOutput {
	return o.ApplyT(func(v CreationDataInvokeResponse) string { return v.CreateOption }).(pulumi.StringOutput)
}

// Disk source information.
func (o CreationDataInvokeResponseOutput) ImageReference() ImageDiskReferenceInvokeResponsePtrOutput {
	return o.ApplyT(func(v CreationDataInvokeResponse) *ImageDiskReferenceInvokeResponse { return v.ImageReference }).(ImageDiskReferenceInvokeResponsePtrOutput)
}

// If createOption is Copy, this is the ARM id of the source snapshot or disk.
func (o CreationDataInvokeResponseOutput) SourceResourceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CreationDataInvokeResponse) *string { return v.SourceResourceId }).(pulumi.StringPtrOutput)
}

// If createOption is Import, this is the URI of a blob to be imported into a managed disk.
func (o CreationDataInvokeResponseOutput) SourceUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CreationDataInvokeResponse) *string { return v.SourceUri }).(pulumi.StringPtrOutput)
}

// If createOption is Import, the Azure Resource Manager identifier of the storage account containing the blob to import as a disk. Required only if the blob is in a different subscription
func (o CreationDataInvokeResponseOutput) StorageAccountId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CreationDataInvokeResponse) *string { return v.StorageAccountId }).(pulumi.StringPtrOutput)
}

// Data used when creating a disk.
type CreationDataResponse struct {
	// This enumerates the possible sources of a disk's creation.
	CreateOption string `pulumi:"createOption"`
	// Disk source information.
	ImageReference *ImageDiskReferenceResponse `pulumi:"imageReference"`
	// If createOption is Copy, this is the ARM id of the source snapshot or disk.
	SourceResourceId *string `pulumi:"sourceResourceId"`
	// If createOption is Import, this is the URI of a blob to be imported into a managed disk.
	SourceUri *string `pulumi:"sourceUri"`
	// If createOption is Import, the Azure Resource Manager identifier of the storage account containing the blob to import as a disk. Required only if the blob is in a different subscription
	StorageAccountId *string `pulumi:"storageAccountId"`
}

// CreationDataResponseInput is an input type that accepts CreationDataResponseArgs and CreationDataResponseOutput values.
// You can construct a concrete instance of `CreationDataResponseInput` via:
//
//          CreationDataResponseArgs{...}
type CreationDataResponseInput interface {
	pulumi.Input

	ToCreationDataResponseOutput() CreationDataResponseOutput
	ToCreationDataResponseOutputWithContext(context.Context) CreationDataResponseOutput
}

// Data used when creating a disk.
type CreationDataResponseArgs struct {
	// This enumerates the possible sources of a disk's creation.
	CreateOption pulumi.StringInput `pulumi:"createOption"`
	// Disk source information.
	ImageReference ImageDiskReferenceResponsePtrInput `pulumi:"imageReference"`
	// If createOption is Copy, this is the ARM id of the source snapshot or disk.
	SourceResourceId pulumi.StringPtrInput `pulumi:"sourceResourceId"`
	// If createOption is Import, this is the URI of a blob to be imported into a managed disk.
	SourceUri pulumi.StringPtrInput `pulumi:"sourceUri"`
	// If createOption is Import, the Azure Resource Manager identifier of the storage account containing the blob to import as a disk. Required only if the blob is in a different subscription
	StorageAccountId pulumi.StringPtrInput `pulumi:"storageAccountId"`
}

func (CreationDataResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CreationDataResponse)(nil)).Elem()
}

func (i CreationDataResponseArgs) ToCreationDataResponseOutput() CreationDataResponseOutput {
	return i.ToCreationDataResponseOutputWithContext(context.Background())
}

func (i CreationDataResponseArgs) ToCreationDataResponseOutputWithContext(ctx context.Context) CreationDataResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CreationDataResponseOutput)
}

func (i CreationDataResponseArgs) ToCreationDataResponsePtrOutput() CreationDataResponsePtrOutput {
	return i.ToCreationDataResponsePtrOutputWithContext(context.Background())
}

func (i CreationDataResponseArgs) ToCreationDataResponsePtrOutputWithContext(ctx context.Context) CreationDataResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CreationDataResponseOutput).ToCreationDataResponsePtrOutputWithContext(ctx)
}

// CreationDataResponsePtrInput is an input type that accepts CreationDataResponseArgs, CreationDataResponsePtr and CreationDataResponsePtrOutput values.
// You can construct a concrete instance of `CreationDataResponsePtrInput` via:
//
//          CreationDataResponseArgs{...}
//
//  or:
//
//          nil
type CreationDataResponsePtrInput interface {
	pulumi.Input

	ToCreationDataResponsePtrOutput() CreationDataResponsePtrOutput
	ToCreationDataResponsePtrOutputWithContext(context.Context) CreationDataResponsePtrOutput
}

type creationDataResponsePtrType CreationDataResponseArgs

func CreationDataResponsePtr(v *CreationDataResponseArgs) CreationDataResponsePtrInput {
	return (*creationDataResponsePtrType)(v)
}

func (*creationDataResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CreationDataResponse)(nil)).Elem()
}

func (i *creationDataResponsePtrType) ToCreationDataResponsePtrOutput() CreationDataResponsePtrOutput {
	return i.ToCreationDataResponsePtrOutputWithContext(context.Background())
}

func (i *creationDataResponsePtrType) ToCreationDataResponsePtrOutputWithContext(ctx context.Context) CreationDataResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CreationDataResponsePtrOutput)
}

// Data used when creating a disk.
type CreationDataResponseOutput struct{ *pulumi.OutputState }

func (CreationDataResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CreationDataResponse)(nil)).Elem()
}

func (o CreationDataResponseOutput) ToCreationDataResponseOutput() CreationDataResponseOutput {
	return o
}

func (o CreationDataResponseOutput) ToCreationDataResponseOutputWithContext(ctx context.Context) CreationDataResponseOutput {
	return o
}

func (o CreationDataResponseOutput) ToCreationDataResponsePtrOutput() CreationDataResponsePtrOutput {
	return o.ToCreationDataResponsePtrOutputWithContext(context.Background())
}

func (o CreationDataResponseOutput) ToCreationDataResponsePtrOutputWithContext(ctx context.Context) CreationDataResponsePtrOutput {
	return o.ApplyT(func(v CreationDataResponse) *CreationDataResponse {
		return &v
	}).(CreationDataResponsePtrOutput)
}

// This enumerates the possible sources of a disk's creation.
func (o CreationDataResponseOutput) CreateOption() pulumi.StringOutput {
	return o.ApplyT(func(v CreationDataResponse) string { return v.CreateOption }).(pulumi.StringOutput)
}

// Disk source information.
func (o CreationDataResponseOutput) ImageReference() ImageDiskReferenceResponsePtrOutput {
	return o.ApplyT(func(v CreationDataResponse) *ImageDiskReferenceResponse { return v.ImageReference }).(ImageDiskReferenceResponsePtrOutput)
}

// If createOption is Copy, this is the ARM id of the source snapshot or disk.
func (o CreationDataResponseOutput) SourceResourceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CreationDataResponse) *string { return v.SourceResourceId }).(pulumi.StringPtrOutput)
}

// If createOption is Import, this is the URI of a blob to be imported into a managed disk.
func (o CreationDataResponseOutput) SourceUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CreationDataResponse) *string { return v.SourceUri }).(pulumi.StringPtrOutput)
}

// If createOption is Import, the Azure Resource Manager identifier of the storage account containing the blob to import as a disk. Required only if the blob is in a different subscription
func (o CreationDataResponseOutput) StorageAccountId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CreationDataResponse) *string { return v.StorageAccountId }).(pulumi.StringPtrOutput)
}

type CreationDataResponsePtrOutput struct{ *pulumi.OutputState }

func (CreationDataResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CreationDataResponse)(nil)).Elem()
}

func (o CreationDataResponsePtrOutput) ToCreationDataResponsePtrOutput() CreationDataResponsePtrOutput {
	return o
}

func (o CreationDataResponsePtrOutput) ToCreationDataResponsePtrOutputWithContext(ctx context.Context) CreationDataResponsePtrOutput {
	return o
}

func (o CreationDataResponsePtrOutput) Elem() CreationDataResponseOutput {
	return o.ApplyT(func(v *CreationDataResponse) CreationDataResponse { return *v }).(CreationDataResponseOutput)
}

// This enumerates the possible sources of a disk's creation.
func (o CreationDataResponsePtrOutput) CreateOption() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CreationDataResponse) *string {
		if v == nil {
			return nil
		}
		return &v.CreateOption
	}).(pulumi.StringPtrOutput)
}

// Disk source information.
func (o CreationDataResponsePtrOutput) ImageReference() ImageDiskReferenceResponsePtrOutput {
	return o.ApplyT(func(v *CreationDataResponse) *ImageDiskReferenceResponse {
		if v == nil {
			return nil
		}
		return v.ImageReference
	}).(ImageDiskReferenceResponsePtrOutput)
}

// If createOption is Copy, this is the ARM id of the source snapshot or disk.
func (o CreationDataResponsePtrOutput) SourceResourceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CreationDataResponse) *string {
		if v == nil {
			return nil
		}
		return v.SourceResourceId
	}).(pulumi.StringPtrOutput)
}

// If createOption is Import, this is the URI of a blob to be imported into a managed disk.
func (o CreationDataResponsePtrOutput) SourceUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CreationDataResponse) *string {
		if v == nil {
			return nil
		}
		return v.SourceUri
	}).(pulumi.StringPtrOutput)
}

// If createOption is Import, the Azure Resource Manager identifier of the storage account containing the blob to import as a disk. Required only if the blob is in a different subscription
func (o CreationDataResponsePtrOutput) StorageAccountId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CreationDataResponse) *string {
		if v == nil {
			return nil
		}
		return v.StorageAccountId
	}).(pulumi.StringPtrOutput)
}

// The disks sku name. Can be Standard_LRS, Premium_LRS, StandardSSD_LRS, or UltraSSD_LRS.
type DiskSku struct {
	// The sku name.
	Name *string `pulumi:"name"`
}

// DiskSkuInput is an input type that accepts DiskSkuArgs and DiskSkuOutput values.
// You can construct a concrete instance of `DiskSkuInput` via:
//
//          DiskSkuArgs{...}
type DiskSkuInput interface {
	pulumi.Input

	ToDiskSkuOutput() DiskSkuOutput
	ToDiskSkuOutputWithContext(context.Context) DiskSkuOutput
}

// The disks sku name. Can be Standard_LRS, Premium_LRS, StandardSSD_LRS, or UltraSSD_LRS.
type DiskSkuArgs struct {
	// The sku name.
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (DiskSkuArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DiskSku)(nil)).Elem()
}

func (i DiskSkuArgs) ToDiskSkuOutput() DiskSkuOutput {
	return i.ToDiskSkuOutputWithContext(context.Background())
}

func (i DiskSkuArgs) ToDiskSkuOutputWithContext(ctx context.Context) DiskSkuOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DiskSkuOutput)
}

func (i DiskSkuArgs) ToDiskSkuPtrOutput() DiskSkuPtrOutput {
	return i.ToDiskSkuPtrOutputWithContext(context.Background())
}

func (i DiskSkuArgs) ToDiskSkuPtrOutputWithContext(ctx context.Context) DiskSkuPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DiskSkuOutput).ToDiskSkuPtrOutputWithContext(ctx)
}

// DiskSkuPtrInput is an input type that accepts DiskSkuArgs, DiskSkuPtr and DiskSkuPtrOutput values.
// You can construct a concrete instance of `DiskSkuPtrInput` via:
//
//          DiskSkuArgs{...}
//
//  or:
//
//          nil
type DiskSkuPtrInput interface {
	pulumi.Input

	ToDiskSkuPtrOutput() DiskSkuPtrOutput
	ToDiskSkuPtrOutputWithContext(context.Context) DiskSkuPtrOutput
}

type diskSkuPtrType DiskSkuArgs

func DiskSkuPtr(v *DiskSkuArgs) DiskSkuPtrInput {
	return (*diskSkuPtrType)(v)
}

func (*diskSkuPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DiskSku)(nil)).Elem()
}

func (i *diskSkuPtrType) ToDiskSkuPtrOutput() DiskSkuPtrOutput {
	return i.ToDiskSkuPtrOutputWithContext(context.Background())
}

func (i *diskSkuPtrType) ToDiskSkuPtrOutputWithContext(ctx context.Context) DiskSkuPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DiskSkuPtrOutput)
}

// The disks sku name. Can be Standard_LRS, Premium_LRS, StandardSSD_LRS, or UltraSSD_LRS.
type DiskSkuOutput struct{ *pulumi.OutputState }

func (DiskSkuOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DiskSku)(nil)).Elem()
}

func (o DiskSkuOutput) ToDiskSkuOutput() DiskSkuOutput {
	return o
}

func (o DiskSkuOutput) ToDiskSkuOutputWithContext(ctx context.Context) DiskSkuOutput {
	return o
}

func (o DiskSkuOutput) ToDiskSkuPtrOutput() DiskSkuPtrOutput {
	return o.ToDiskSkuPtrOutputWithContext(context.Background())
}

func (o DiskSkuOutput) ToDiskSkuPtrOutputWithContext(ctx context.Context) DiskSkuPtrOutput {
	return o.ApplyT(func(v DiskSku) *DiskSku {
		return &v
	}).(DiskSkuPtrOutput)
}

// The sku name.
func (o DiskSkuOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DiskSku) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type DiskSkuPtrOutput struct{ *pulumi.OutputState }

func (DiskSkuPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DiskSku)(nil)).Elem()
}

func (o DiskSkuPtrOutput) ToDiskSkuPtrOutput() DiskSkuPtrOutput {
	return o
}

func (o DiskSkuPtrOutput) ToDiskSkuPtrOutputWithContext(ctx context.Context) DiskSkuPtrOutput {
	return o
}

func (o DiskSkuPtrOutput) Elem() DiskSkuOutput {
	return o.ApplyT(func(v *DiskSku) DiskSku { return *v }).(DiskSkuOutput)
}

// The sku name.
func (o DiskSkuPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DiskSku) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// The disks sku name. Can be Standard_LRS, Premium_LRS, StandardSSD_LRS, or UltraSSD_LRS.
type DiskSkuInvokeResponse struct {
	// The sku name.
	Name *string `pulumi:"name"`
	// The sku tier.
	Tier string `pulumi:"tier"`
}

// DiskSkuInvokeResponseInput is an input type that accepts DiskSkuInvokeResponseArgs and DiskSkuInvokeResponseOutput values.
// You can construct a concrete instance of `DiskSkuInvokeResponseInput` via:
//
//          DiskSkuInvokeResponseArgs{...}
type DiskSkuInvokeResponseInput interface {
	pulumi.Input

	ToDiskSkuInvokeResponseOutput() DiskSkuInvokeResponseOutput
	ToDiskSkuInvokeResponseOutputWithContext(context.Context) DiskSkuInvokeResponseOutput
}

// The disks sku name. Can be Standard_LRS, Premium_LRS, StandardSSD_LRS, or UltraSSD_LRS.
type DiskSkuInvokeResponseArgs struct {
	// The sku name.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// The sku tier.
	Tier pulumi.StringInput `pulumi:"tier"`
}

func (DiskSkuInvokeResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DiskSkuInvokeResponse)(nil)).Elem()
}

func (i DiskSkuInvokeResponseArgs) ToDiskSkuInvokeResponseOutput() DiskSkuInvokeResponseOutput {
	return i.ToDiskSkuInvokeResponseOutputWithContext(context.Background())
}

func (i DiskSkuInvokeResponseArgs) ToDiskSkuInvokeResponseOutputWithContext(ctx context.Context) DiskSkuInvokeResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DiskSkuInvokeResponseOutput)
}

// The disks sku name. Can be Standard_LRS, Premium_LRS, StandardSSD_LRS, or UltraSSD_LRS.
type DiskSkuInvokeResponseOutput struct{ *pulumi.OutputState }

func (DiskSkuInvokeResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DiskSkuInvokeResponse)(nil)).Elem()
}

func (o DiskSkuInvokeResponseOutput) ToDiskSkuInvokeResponseOutput() DiskSkuInvokeResponseOutput {
	return o
}

func (o DiskSkuInvokeResponseOutput) ToDiskSkuInvokeResponseOutputWithContext(ctx context.Context) DiskSkuInvokeResponseOutput {
	return o
}

// The sku name.
func (o DiskSkuInvokeResponseOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DiskSkuInvokeResponse) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The sku tier.
func (o DiskSkuInvokeResponseOutput) Tier() pulumi.StringOutput {
	return o.ApplyT(func(v DiskSkuInvokeResponse) string { return v.Tier }).(pulumi.StringOutput)
}

// The disks sku name. Can be Standard_LRS, Premium_LRS, StandardSSD_LRS, or UltraSSD_LRS.
type DiskSkuResponse struct {
	// The sku name.
	Name *string `pulumi:"name"`
	// The sku tier.
	Tier string `pulumi:"tier"`
}

// DiskSkuResponseInput is an input type that accepts DiskSkuResponseArgs and DiskSkuResponseOutput values.
// You can construct a concrete instance of `DiskSkuResponseInput` via:
//
//          DiskSkuResponseArgs{...}
type DiskSkuResponseInput interface {
	pulumi.Input

	ToDiskSkuResponseOutput() DiskSkuResponseOutput
	ToDiskSkuResponseOutputWithContext(context.Context) DiskSkuResponseOutput
}

// The disks sku name. Can be Standard_LRS, Premium_LRS, StandardSSD_LRS, or UltraSSD_LRS.
type DiskSkuResponseArgs struct {
	// The sku name.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// The sku tier.
	Tier pulumi.StringInput `pulumi:"tier"`
}

func (DiskSkuResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DiskSkuResponse)(nil)).Elem()
}

func (i DiskSkuResponseArgs) ToDiskSkuResponseOutput() DiskSkuResponseOutput {
	return i.ToDiskSkuResponseOutputWithContext(context.Background())
}

func (i DiskSkuResponseArgs) ToDiskSkuResponseOutputWithContext(ctx context.Context) DiskSkuResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DiskSkuResponseOutput)
}

func (i DiskSkuResponseArgs) ToDiskSkuResponsePtrOutput() DiskSkuResponsePtrOutput {
	return i.ToDiskSkuResponsePtrOutputWithContext(context.Background())
}

func (i DiskSkuResponseArgs) ToDiskSkuResponsePtrOutputWithContext(ctx context.Context) DiskSkuResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DiskSkuResponseOutput).ToDiskSkuResponsePtrOutputWithContext(ctx)
}

// DiskSkuResponsePtrInput is an input type that accepts DiskSkuResponseArgs, DiskSkuResponsePtr and DiskSkuResponsePtrOutput values.
// You can construct a concrete instance of `DiskSkuResponsePtrInput` via:
//
//          DiskSkuResponseArgs{...}
//
//  or:
//
//          nil
type DiskSkuResponsePtrInput interface {
	pulumi.Input

	ToDiskSkuResponsePtrOutput() DiskSkuResponsePtrOutput
	ToDiskSkuResponsePtrOutputWithContext(context.Context) DiskSkuResponsePtrOutput
}

type diskSkuResponsePtrType DiskSkuResponseArgs

func DiskSkuResponsePtr(v *DiskSkuResponseArgs) DiskSkuResponsePtrInput {
	return (*diskSkuResponsePtrType)(v)
}

func (*diskSkuResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DiskSkuResponse)(nil)).Elem()
}

func (i *diskSkuResponsePtrType) ToDiskSkuResponsePtrOutput() DiskSkuResponsePtrOutput {
	return i.ToDiskSkuResponsePtrOutputWithContext(context.Background())
}

func (i *diskSkuResponsePtrType) ToDiskSkuResponsePtrOutputWithContext(ctx context.Context) DiskSkuResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DiskSkuResponsePtrOutput)
}

// The disks sku name. Can be Standard_LRS, Premium_LRS, StandardSSD_LRS, or UltraSSD_LRS.
type DiskSkuResponseOutput struct{ *pulumi.OutputState }

func (DiskSkuResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DiskSkuResponse)(nil)).Elem()
}

func (o DiskSkuResponseOutput) ToDiskSkuResponseOutput() DiskSkuResponseOutput {
	return o
}

func (o DiskSkuResponseOutput) ToDiskSkuResponseOutputWithContext(ctx context.Context) DiskSkuResponseOutput {
	return o
}

func (o DiskSkuResponseOutput) ToDiskSkuResponsePtrOutput() DiskSkuResponsePtrOutput {
	return o.ToDiskSkuResponsePtrOutputWithContext(context.Background())
}

func (o DiskSkuResponseOutput) ToDiskSkuResponsePtrOutputWithContext(ctx context.Context) DiskSkuResponsePtrOutput {
	return o.ApplyT(func(v DiskSkuResponse) *DiskSkuResponse {
		return &v
	}).(DiskSkuResponsePtrOutput)
}

// The sku name.
func (o DiskSkuResponseOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DiskSkuResponse) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The sku tier.
func (o DiskSkuResponseOutput) Tier() pulumi.StringOutput {
	return o.ApplyT(func(v DiskSkuResponse) string { return v.Tier }).(pulumi.StringOutput)
}

type DiskSkuResponsePtrOutput struct{ *pulumi.OutputState }

func (DiskSkuResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DiskSkuResponse)(nil)).Elem()
}

func (o DiskSkuResponsePtrOutput) ToDiskSkuResponsePtrOutput() DiskSkuResponsePtrOutput {
	return o
}

func (o DiskSkuResponsePtrOutput) ToDiskSkuResponsePtrOutputWithContext(ctx context.Context) DiskSkuResponsePtrOutput {
	return o
}

func (o DiskSkuResponsePtrOutput) Elem() DiskSkuResponseOutput {
	return o.ApplyT(func(v *DiskSkuResponse) DiskSkuResponse { return *v }).(DiskSkuResponseOutput)
}

// The sku name.
func (o DiskSkuResponsePtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DiskSkuResponse) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// The sku tier.
func (o DiskSkuResponsePtrOutput) Tier() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DiskSkuResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Tier
	}).(pulumi.StringPtrOutput)
}

// Encryption settings for disk or snapshot
type EncryptionSettingsCollection struct {
	// Set this flag to true and provide DiskEncryptionKey and optional KeyEncryptionKey to enable encryption. Set this flag to false and remove DiskEncryptionKey and KeyEncryptionKey to disable encryption. If EncryptionSettings is null in the request object, the existing settings remain unchanged.
	Enabled bool `pulumi:"enabled"`
	// A collection of encryption settings, one for each disk volume.
	EncryptionSettings []EncryptionSettingsElement `pulumi:"encryptionSettings"`
}

// EncryptionSettingsCollectionInput is an input type that accepts EncryptionSettingsCollectionArgs and EncryptionSettingsCollectionOutput values.
// You can construct a concrete instance of `EncryptionSettingsCollectionInput` via:
//
//          EncryptionSettingsCollectionArgs{...}
type EncryptionSettingsCollectionInput interface {
	pulumi.Input

	ToEncryptionSettingsCollectionOutput() EncryptionSettingsCollectionOutput
	ToEncryptionSettingsCollectionOutputWithContext(context.Context) EncryptionSettingsCollectionOutput
}

// Encryption settings for disk or snapshot
type EncryptionSettingsCollectionArgs struct {
	// Set this flag to true and provide DiskEncryptionKey and optional KeyEncryptionKey to enable encryption. Set this flag to false and remove DiskEncryptionKey and KeyEncryptionKey to disable encryption. If EncryptionSettings is null in the request object, the existing settings remain unchanged.
	Enabled pulumi.BoolInput `pulumi:"enabled"`
	// A collection of encryption settings, one for each disk volume.
	EncryptionSettings EncryptionSettingsElementArrayInput `pulumi:"encryptionSettings"`
}

func (EncryptionSettingsCollectionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EncryptionSettingsCollection)(nil)).Elem()
}

func (i EncryptionSettingsCollectionArgs) ToEncryptionSettingsCollectionOutput() EncryptionSettingsCollectionOutput {
	return i.ToEncryptionSettingsCollectionOutputWithContext(context.Background())
}

func (i EncryptionSettingsCollectionArgs) ToEncryptionSettingsCollectionOutputWithContext(ctx context.Context) EncryptionSettingsCollectionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EncryptionSettingsCollectionOutput)
}

func (i EncryptionSettingsCollectionArgs) ToEncryptionSettingsCollectionPtrOutput() EncryptionSettingsCollectionPtrOutput {
	return i.ToEncryptionSettingsCollectionPtrOutputWithContext(context.Background())
}

func (i EncryptionSettingsCollectionArgs) ToEncryptionSettingsCollectionPtrOutputWithContext(ctx context.Context) EncryptionSettingsCollectionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EncryptionSettingsCollectionOutput).ToEncryptionSettingsCollectionPtrOutputWithContext(ctx)
}

// EncryptionSettingsCollectionPtrInput is an input type that accepts EncryptionSettingsCollectionArgs, EncryptionSettingsCollectionPtr and EncryptionSettingsCollectionPtrOutput values.
// You can construct a concrete instance of `EncryptionSettingsCollectionPtrInput` via:
//
//          EncryptionSettingsCollectionArgs{...}
//
//  or:
//
//          nil
type EncryptionSettingsCollectionPtrInput interface {
	pulumi.Input

	ToEncryptionSettingsCollectionPtrOutput() EncryptionSettingsCollectionPtrOutput
	ToEncryptionSettingsCollectionPtrOutputWithContext(context.Context) EncryptionSettingsCollectionPtrOutput
}

type encryptionSettingsCollectionPtrType EncryptionSettingsCollectionArgs

func EncryptionSettingsCollectionPtr(v *EncryptionSettingsCollectionArgs) EncryptionSettingsCollectionPtrInput {
	return (*encryptionSettingsCollectionPtrType)(v)
}

func (*encryptionSettingsCollectionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**EncryptionSettingsCollection)(nil)).Elem()
}

func (i *encryptionSettingsCollectionPtrType) ToEncryptionSettingsCollectionPtrOutput() EncryptionSettingsCollectionPtrOutput {
	return i.ToEncryptionSettingsCollectionPtrOutputWithContext(context.Background())
}

func (i *encryptionSettingsCollectionPtrType) ToEncryptionSettingsCollectionPtrOutputWithContext(ctx context.Context) EncryptionSettingsCollectionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EncryptionSettingsCollectionPtrOutput)
}

// Encryption settings for disk or snapshot
type EncryptionSettingsCollectionOutput struct{ *pulumi.OutputState }

func (EncryptionSettingsCollectionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EncryptionSettingsCollection)(nil)).Elem()
}

func (o EncryptionSettingsCollectionOutput) ToEncryptionSettingsCollectionOutput() EncryptionSettingsCollectionOutput {
	return o
}

func (o EncryptionSettingsCollectionOutput) ToEncryptionSettingsCollectionOutputWithContext(ctx context.Context) EncryptionSettingsCollectionOutput {
	return o
}

func (o EncryptionSettingsCollectionOutput) ToEncryptionSettingsCollectionPtrOutput() EncryptionSettingsCollectionPtrOutput {
	return o.ToEncryptionSettingsCollectionPtrOutputWithContext(context.Background())
}

func (o EncryptionSettingsCollectionOutput) ToEncryptionSettingsCollectionPtrOutputWithContext(ctx context.Context) EncryptionSettingsCollectionPtrOutput {
	return o.ApplyT(func(v EncryptionSettingsCollection) *EncryptionSettingsCollection {
		return &v
	}).(EncryptionSettingsCollectionPtrOutput)
}

// Set this flag to true and provide DiskEncryptionKey and optional KeyEncryptionKey to enable encryption. Set this flag to false and remove DiskEncryptionKey and KeyEncryptionKey to disable encryption. If EncryptionSettings is null in the request object, the existing settings remain unchanged.
func (o EncryptionSettingsCollectionOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v EncryptionSettingsCollection) bool { return v.Enabled }).(pulumi.BoolOutput)
}

// A collection of encryption settings, one for each disk volume.
func (o EncryptionSettingsCollectionOutput) EncryptionSettings() EncryptionSettingsElementArrayOutput {
	return o.ApplyT(func(v EncryptionSettingsCollection) []EncryptionSettingsElement { return v.EncryptionSettings }).(EncryptionSettingsElementArrayOutput)
}

type EncryptionSettingsCollectionPtrOutput struct{ *pulumi.OutputState }

func (EncryptionSettingsCollectionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EncryptionSettingsCollection)(nil)).Elem()
}

func (o EncryptionSettingsCollectionPtrOutput) ToEncryptionSettingsCollectionPtrOutput() EncryptionSettingsCollectionPtrOutput {
	return o
}

func (o EncryptionSettingsCollectionPtrOutput) ToEncryptionSettingsCollectionPtrOutputWithContext(ctx context.Context) EncryptionSettingsCollectionPtrOutput {
	return o
}

func (o EncryptionSettingsCollectionPtrOutput) Elem() EncryptionSettingsCollectionOutput {
	return o.ApplyT(func(v *EncryptionSettingsCollection) EncryptionSettingsCollection { return *v }).(EncryptionSettingsCollectionOutput)
}

// Set this flag to true and provide DiskEncryptionKey and optional KeyEncryptionKey to enable encryption. Set this flag to false and remove DiskEncryptionKey and KeyEncryptionKey to disable encryption. If EncryptionSettings is null in the request object, the existing settings remain unchanged.
func (o EncryptionSettingsCollectionPtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *EncryptionSettingsCollection) *bool {
		if v == nil {
			return nil
		}
		return &v.Enabled
	}).(pulumi.BoolPtrOutput)
}

// A collection of encryption settings, one for each disk volume.
func (o EncryptionSettingsCollectionPtrOutput) EncryptionSettings() EncryptionSettingsElementArrayOutput {
	return o.ApplyT(func(v *EncryptionSettingsCollection) []EncryptionSettingsElement {
		if v == nil {
			return nil
		}
		return v.EncryptionSettings
	}).(EncryptionSettingsElementArrayOutput)
}

// Encryption settings for disk or snapshot
type EncryptionSettingsCollectionInvokeResponse struct {
	// Set this flag to true and provide DiskEncryptionKey and optional KeyEncryptionKey to enable encryption. Set this flag to false and remove DiskEncryptionKey and KeyEncryptionKey to disable encryption. If EncryptionSettings is null in the request object, the existing settings remain unchanged.
	Enabled bool `pulumi:"enabled"`
	// A collection of encryption settings, one for each disk volume.
	EncryptionSettings []EncryptionSettingsElementInvokeResponse `pulumi:"encryptionSettings"`
}

// EncryptionSettingsCollectionInvokeResponseInput is an input type that accepts EncryptionSettingsCollectionInvokeResponseArgs and EncryptionSettingsCollectionInvokeResponseOutput values.
// You can construct a concrete instance of `EncryptionSettingsCollectionInvokeResponseInput` via:
//
//          EncryptionSettingsCollectionInvokeResponseArgs{...}
type EncryptionSettingsCollectionInvokeResponseInput interface {
	pulumi.Input

	ToEncryptionSettingsCollectionInvokeResponseOutput() EncryptionSettingsCollectionInvokeResponseOutput
	ToEncryptionSettingsCollectionInvokeResponseOutputWithContext(context.Context) EncryptionSettingsCollectionInvokeResponseOutput
}

// Encryption settings for disk or snapshot
type EncryptionSettingsCollectionInvokeResponseArgs struct {
	// Set this flag to true and provide DiskEncryptionKey and optional KeyEncryptionKey to enable encryption. Set this flag to false and remove DiskEncryptionKey and KeyEncryptionKey to disable encryption. If EncryptionSettings is null in the request object, the existing settings remain unchanged.
	Enabled pulumi.BoolInput `pulumi:"enabled"`
	// A collection of encryption settings, one for each disk volume.
	EncryptionSettings EncryptionSettingsElementInvokeResponseArrayInput `pulumi:"encryptionSettings"`
}

func (EncryptionSettingsCollectionInvokeResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EncryptionSettingsCollectionInvokeResponse)(nil)).Elem()
}

func (i EncryptionSettingsCollectionInvokeResponseArgs) ToEncryptionSettingsCollectionInvokeResponseOutput() EncryptionSettingsCollectionInvokeResponseOutput {
	return i.ToEncryptionSettingsCollectionInvokeResponseOutputWithContext(context.Background())
}

func (i EncryptionSettingsCollectionInvokeResponseArgs) ToEncryptionSettingsCollectionInvokeResponseOutputWithContext(ctx context.Context) EncryptionSettingsCollectionInvokeResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EncryptionSettingsCollectionInvokeResponseOutput)
}

// Encryption settings for disk or snapshot
type EncryptionSettingsCollectionInvokeResponseOutput struct{ *pulumi.OutputState }

func (EncryptionSettingsCollectionInvokeResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EncryptionSettingsCollectionInvokeResponse)(nil)).Elem()
}

func (o EncryptionSettingsCollectionInvokeResponseOutput) ToEncryptionSettingsCollectionInvokeResponseOutput() EncryptionSettingsCollectionInvokeResponseOutput {
	return o
}

func (o EncryptionSettingsCollectionInvokeResponseOutput) ToEncryptionSettingsCollectionInvokeResponseOutputWithContext(ctx context.Context) EncryptionSettingsCollectionInvokeResponseOutput {
	return o
}

// Set this flag to true and provide DiskEncryptionKey and optional KeyEncryptionKey to enable encryption. Set this flag to false and remove DiskEncryptionKey and KeyEncryptionKey to disable encryption. If EncryptionSettings is null in the request object, the existing settings remain unchanged.
func (o EncryptionSettingsCollectionInvokeResponseOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v EncryptionSettingsCollectionInvokeResponse) bool { return v.Enabled }).(pulumi.BoolOutput)
}

// A collection of encryption settings, one for each disk volume.
func (o EncryptionSettingsCollectionInvokeResponseOutput) EncryptionSettings() EncryptionSettingsElementInvokeResponseArrayOutput {
	return o.ApplyT(func(v EncryptionSettingsCollectionInvokeResponse) []EncryptionSettingsElementInvokeResponse {
		return v.EncryptionSettings
	}).(EncryptionSettingsElementInvokeResponseArrayOutput)
}

// Encryption settings for disk or snapshot
type EncryptionSettingsCollectionResponse struct {
	// Set this flag to true and provide DiskEncryptionKey and optional KeyEncryptionKey to enable encryption. Set this flag to false and remove DiskEncryptionKey and KeyEncryptionKey to disable encryption. If EncryptionSettings is null in the request object, the existing settings remain unchanged.
	Enabled bool `pulumi:"enabled"`
	// A collection of encryption settings, one for each disk volume.
	EncryptionSettings []EncryptionSettingsElementResponse `pulumi:"encryptionSettings"`
}

// EncryptionSettingsCollectionResponseInput is an input type that accepts EncryptionSettingsCollectionResponseArgs and EncryptionSettingsCollectionResponseOutput values.
// You can construct a concrete instance of `EncryptionSettingsCollectionResponseInput` via:
//
//          EncryptionSettingsCollectionResponseArgs{...}
type EncryptionSettingsCollectionResponseInput interface {
	pulumi.Input

	ToEncryptionSettingsCollectionResponseOutput() EncryptionSettingsCollectionResponseOutput
	ToEncryptionSettingsCollectionResponseOutputWithContext(context.Context) EncryptionSettingsCollectionResponseOutput
}

// Encryption settings for disk or snapshot
type EncryptionSettingsCollectionResponseArgs struct {
	// Set this flag to true and provide DiskEncryptionKey and optional KeyEncryptionKey to enable encryption. Set this flag to false and remove DiskEncryptionKey and KeyEncryptionKey to disable encryption. If EncryptionSettings is null in the request object, the existing settings remain unchanged.
	Enabled pulumi.BoolInput `pulumi:"enabled"`
	// A collection of encryption settings, one for each disk volume.
	EncryptionSettings EncryptionSettingsElementResponseArrayInput `pulumi:"encryptionSettings"`
}

func (EncryptionSettingsCollectionResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EncryptionSettingsCollectionResponse)(nil)).Elem()
}

func (i EncryptionSettingsCollectionResponseArgs) ToEncryptionSettingsCollectionResponseOutput() EncryptionSettingsCollectionResponseOutput {
	return i.ToEncryptionSettingsCollectionResponseOutputWithContext(context.Background())
}

func (i EncryptionSettingsCollectionResponseArgs) ToEncryptionSettingsCollectionResponseOutputWithContext(ctx context.Context) EncryptionSettingsCollectionResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EncryptionSettingsCollectionResponseOutput)
}

func (i EncryptionSettingsCollectionResponseArgs) ToEncryptionSettingsCollectionResponsePtrOutput() EncryptionSettingsCollectionResponsePtrOutput {
	return i.ToEncryptionSettingsCollectionResponsePtrOutputWithContext(context.Background())
}

func (i EncryptionSettingsCollectionResponseArgs) ToEncryptionSettingsCollectionResponsePtrOutputWithContext(ctx context.Context) EncryptionSettingsCollectionResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EncryptionSettingsCollectionResponseOutput).ToEncryptionSettingsCollectionResponsePtrOutputWithContext(ctx)
}

// EncryptionSettingsCollectionResponsePtrInput is an input type that accepts EncryptionSettingsCollectionResponseArgs, EncryptionSettingsCollectionResponsePtr and EncryptionSettingsCollectionResponsePtrOutput values.
// You can construct a concrete instance of `EncryptionSettingsCollectionResponsePtrInput` via:
//
//          EncryptionSettingsCollectionResponseArgs{...}
//
//  or:
//
//          nil
type EncryptionSettingsCollectionResponsePtrInput interface {
	pulumi.Input

	ToEncryptionSettingsCollectionResponsePtrOutput() EncryptionSettingsCollectionResponsePtrOutput
	ToEncryptionSettingsCollectionResponsePtrOutputWithContext(context.Context) EncryptionSettingsCollectionResponsePtrOutput
}

type encryptionSettingsCollectionResponsePtrType EncryptionSettingsCollectionResponseArgs

func EncryptionSettingsCollectionResponsePtr(v *EncryptionSettingsCollectionResponseArgs) EncryptionSettingsCollectionResponsePtrInput {
	return (*encryptionSettingsCollectionResponsePtrType)(v)
}

func (*encryptionSettingsCollectionResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**EncryptionSettingsCollectionResponse)(nil)).Elem()
}

func (i *encryptionSettingsCollectionResponsePtrType) ToEncryptionSettingsCollectionResponsePtrOutput() EncryptionSettingsCollectionResponsePtrOutput {
	return i.ToEncryptionSettingsCollectionResponsePtrOutputWithContext(context.Background())
}

func (i *encryptionSettingsCollectionResponsePtrType) ToEncryptionSettingsCollectionResponsePtrOutputWithContext(ctx context.Context) EncryptionSettingsCollectionResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EncryptionSettingsCollectionResponsePtrOutput)
}

// Encryption settings for disk or snapshot
type EncryptionSettingsCollectionResponseOutput struct{ *pulumi.OutputState }

func (EncryptionSettingsCollectionResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EncryptionSettingsCollectionResponse)(nil)).Elem()
}

func (o EncryptionSettingsCollectionResponseOutput) ToEncryptionSettingsCollectionResponseOutput() EncryptionSettingsCollectionResponseOutput {
	return o
}

func (o EncryptionSettingsCollectionResponseOutput) ToEncryptionSettingsCollectionResponseOutputWithContext(ctx context.Context) EncryptionSettingsCollectionResponseOutput {
	return o
}

func (o EncryptionSettingsCollectionResponseOutput) ToEncryptionSettingsCollectionResponsePtrOutput() EncryptionSettingsCollectionResponsePtrOutput {
	return o.ToEncryptionSettingsCollectionResponsePtrOutputWithContext(context.Background())
}

func (o EncryptionSettingsCollectionResponseOutput) ToEncryptionSettingsCollectionResponsePtrOutputWithContext(ctx context.Context) EncryptionSettingsCollectionResponsePtrOutput {
	return o.ApplyT(func(v EncryptionSettingsCollectionResponse) *EncryptionSettingsCollectionResponse {
		return &v
	}).(EncryptionSettingsCollectionResponsePtrOutput)
}

// Set this flag to true and provide DiskEncryptionKey and optional KeyEncryptionKey to enable encryption. Set this flag to false and remove DiskEncryptionKey and KeyEncryptionKey to disable encryption. If EncryptionSettings is null in the request object, the existing settings remain unchanged.
func (o EncryptionSettingsCollectionResponseOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v EncryptionSettingsCollectionResponse) bool { return v.Enabled }).(pulumi.BoolOutput)
}

// A collection of encryption settings, one for each disk volume.
func (o EncryptionSettingsCollectionResponseOutput) EncryptionSettings() EncryptionSettingsElementResponseArrayOutput {
	return o.ApplyT(func(v EncryptionSettingsCollectionResponse) []EncryptionSettingsElementResponse {
		return v.EncryptionSettings
	}).(EncryptionSettingsElementResponseArrayOutput)
}

type EncryptionSettingsCollectionResponsePtrOutput struct{ *pulumi.OutputState }

func (EncryptionSettingsCollectionResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EncryptionSettingsCollectionResponse)(nil)).Elem()
}

func (o EncryptionSettingsCollectionResponsePtrOutput) ToEncryptionSettingsCollectionResponsePtrOutput() EncryptionSettingsCollectionResponsePtrOutput {
	return o
}

func (o EncryptionSettingsCollectionResponsePtrOutput) ToEncryptionSettingsCollectionResponsePtrOutputWithContext(ctx context.Context) EncryptionSettingsCollectionResponsePtrOutput {
	return o
}

func (o EncryptionSettingsCollectionResponsePtrOutput) Elem() EncryptionSettingsCollectionResponseOutput {
	return o.ApplyT(func(v *EncryptionSettingsCollectionResponse) EncryptionSettingsCollectionResponse { return *v }).(EncryptionSettingsCollectionResponseOutput)
}

// Set this flag to true and provide DiskEncryptionKey and optional KeyEncryptionKey to enable encryption. Set this flag to false and remove DiskEncryptionKey and KeyEncryptionKey to disable encryption. If EncryptionSettings is null in the request object, the existing settings remain unchanged.
func (o EncryptionSettingsCollectionResponsePtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *EncryptionSettingsCollectionResponse) *bool {
		if v == nil {
			return nil
		}
		return &v.Enabled
	}).(pulumi.BoolPtrOutput)
}

// A collection of encryption settings, one for each disk volume.
func (o EncryptionSettingsCollectionResponsePtrOutput) EncryptionSettings() EncryptionSettingsElementResponseArrayOutput {
	return o.ApplyT(func(v *EncryptionSettingsCollectionResponse) []EncryptionSettingsElementResponse {
		if v == nil {
			return nil
		}
		return v.EncryptionSettings
	}).(EncryptionSettingsElementResponseArrayOutput)
}

// Encryption settings for one disk volume.
type EncryptionSettingsElement struct {
	// Key Vault Secret Url and vault id of the disk encryption key
	DiskEncryptionKey *KeyVaultAndSecretReference `pulumi:"diskEncryptionKey"`
	// Key Vault Key Url and vault id of the key encryption key. KeyEncryptionKey is optional and when provided is used to unwrap the disk encryption key.
	KeyEncryptionKey *KeyVaultAndKeyReference `pulumi:"keyEncryptionKey"`
}

// EncryptionSettingsElementInput is an input type that accepts EncryptionSettingsElementArgs and EncryptionSettingsElementOutput values.
// You can construct a concrete instance of `EncryptionSettingsElementInput` via:
//
//          EncryptionSettingsElementArgs{...}
type EncryptionSettingsElementInput interface {
	pulumi.Input

	ToEncryptionSettingsElementOutput() EncryptionSettingsElementOutput
	ToEncryptionSettingsElementOutputWithContext(context.Context) EncryptionSettingsElementOutput
}

// Encryption settings for one disk volume.
type EncryptionSettingsElementArgs struct {
	// Key Vault Secret Url and vault id of the disk encryption key
	DiskEncryptionKey KeyVaultAndSecretReferencePtrInput `pulumi:"diskEncryptionKey"`
	// Key Vault Key Url and vault id of the key encryption key. KeyEncryptionKey is optional and when provided is used to unwrap the disk encryption key.
	KeyEncryptionKey KeyVaultAndKeyReferencePtrInput `pulumi:"keyEncryptionKey"`
}

func (EncryptionSettingsElementArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EncryptionSettingsElement)(nil)).Elem()
}

func (i EncryptionSettingsElementArgs) ToEncryptionSettingsElementOutput() EncryptionSettingsElementOutput {
	return i.ToEncryptionSettingsElementOutputWithContext(context.Background())
}

func (i EncryptionSettingsElementArgs) ToEncryptionSettingsElementOutputWithContext(ctx context.Context) EncryptionSettingsElementOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EncryptionSettingsElementOutput)
}

// EncryptionSettingsElementArrayInput is an input type that accepts EncryptionSettingsElementArray and EncryptionSettingsElementArrayOutput values.
// You can construct a concrete instance of `EncryptionSettingsElementArrayInput` via:
//
//          EncryptionSettingsElementArray{ EncryptionSettingsElementArgs{...} }
type EncryptionSettingsElementArrayInput interface {
	pulumi.Input

	ToEncryptionSettingsElementArrayOutput() EncryptionSettingsElementArrayOutput
	ToEncryptionSettingsElementArrayOutputWithContext(context.Context) EncryptionSettingsElementArrayOutput
}

type EncryptionSettingsElementArray []EncryptionSettingsElementInput

func (EncryptionSettingsElementArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EncryptionSettingsElement)(nil)).Elem()
}

func (i EncryptionSettingsElementArray) ToEncryptionSettingsElementArrayOutput() EncryptionSettingsElementArrayOutput {
	return i.ToEncryptionSettingsElementArrayOutputWithContext(context.Background())
}

func (i EncryptionSettingsElementArray) ToEncryptionSettingsElementArrayOutputWithContext(ctx context.Context) EncryptionSettingsElementArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EncryptionSettingsElementArrayOutput)
}

// Encryption settings for one disk volume.
type EncryptionSettingsElementOutput struct{ *pulumi.OutputState }

func (EncryptionSettingsElementOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EncryptionSettingsElement)(nil)).Elem()
}

func (o EncryptionSettingsElementOutput) ToEncryptionSettingsElementOutput() EncryptionSettingsElementOutput {
	return o
}

func (o EncryptionSettingsElementOutput) ToEncryptionSettingsElementOutputWithContext(ctx context.Context) EncryptionSettingsElementOutput {
	return o
}

// Key Vault Secret Url and vault id of the disk encryption key
func (o EncryptionSettingsElementOutput) DiskEncryptionKey() KeyVaultAndSecretReferencePtrOutput {
	return o.ApplyT(func(v EncryptionSettingsElement) *KeyVaultAndSecretReference { return v.DiskEncryptionKey }).(KeyVaultAndSecretReferencePtrOutput)
}

// Key Vault Key Url and vault id of the key encryption key. KeyEncryptionKey is optional and when provided is used to unwrap the disk encryption key.
func (o EncryptionSettingsElementOutput) KeyEncryptionKey() KeyVaultAndKeyReferencePtrOutput {
	return o.ApplyT(func(v EncryptionSettingsElement) *KeyVaultAndKeyReference { return v.KeyEncryptionKey }).(KeyVaultAndKeyReferencePtrOutput)
}

type EncryptionSettingsElementArrayOutput struct{ *pulumi.OutputState }

func (EncryptionSettingsElementArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EncryptionSettingsElement)(nil)).Elem()
}

func (o EncryptionSettingsElementArrayOutput) ToEncryptionSettingsElementArrayOutput() EncryptionSettingsElementArrayOutput {
	return o
}

func (o EncryptionSettingsElementArrayOutput) ToEncryptionSettingsElementArrayOutputWithContext(ctx context.Context) EncryptionSettingsElementArrayOutput {
	return o
}

func (o EncryptionSettingsElementArrayOutput) Index(i pulumi.IntInput) EncryptionSettingsElementOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) EncryptionSettingsElement {
		return vs[0].([]EncryptionSettingsElement)[vs[1].(int)]
	}).(EncryptionSettingsElementOutput)
}

// Encryption settings for one disk volume.
type EncryptionSettingsElementInvokeResponse struct {
	// Key Vault Secret Url and vault id of the disk encryption key
	DiskEncryptionKey *KeyVaultAndSecretReferenceInvokeResponse `pulumi:"diskEncryptionKey"`
	// Key Vault Key Url and vault id of the key encryption key. KeyEncryptionKey is optional and when provided is used to unwrap the disk encryption key.
	KeyEncryptionKey *KeyVaultAndKeyReferenceInvokeResponse `pulumi:"keyEncryptionKey"`
}

// EncryptionSettingsElementInvokeResponseInput is an input type that accepts EncryptionSettingsElementInvokeResponseArgs and EncryptionSettingsElementInvokeResponseOutput values.
// You can construct a concrete instance of `EncryptionSettingsElementInvokeResponseInput` via:
//
//          EncryptionSettingsElementInvokeResponseArgs{...}
type EncryptionSettingsElementInvokeResponseInput interface {
	pulumi.Input

	ToEncryptionSettingsElementInvokeResponseOutput() EncryptionSettingsElementInvokeResponseOutput
	ToEncryptionSettingsElementInvokeResponseOutputWithContext(context.Context) EncryptionSettingsElementInvokeResponseOutput
}

// Encryption settings for one disk volume.
type EncryptionSettingsElementInvokeResponseArgs struct {
	// Key Vault Secret Url and vault id of the disk encryption key
	DiskEncryptionKey KeyVaultAndSecretReferenceInvokeResponsePtrInput `pulumi:"diskEncryptionKey"`
	// Key Vault Key Url and vault id of the key encryption key. KeyEncryptionKey is optional and when provided is used to unwrap the disk encryption key.
	KeyEncryptionKey KeyVaultAndKeyReferenceInvokeResponsePtrInput `pulumi:"keyEncryptionKey"`
}

func (EncryptionSettingsElementInvokeResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EncryptionSettingsElementInvokeResponse)(nil)).Elem()
}

func (i EncryptionSettingsElementInvokeResponseArgs) ToEncryptionSettingsElementInvokeResponseOutput() EncryptionSettingsElementInvokeResponseOutput {
	return i.ToEncryptionSettingsElementInvokeResponseOutputWithContext(context.Background())
}

func (i EncryptionSettingsElementInvokeResponseArgs) ToEncryptionSettingsElementInvokeResponseOutputWithContext(ctx context.Context) EncryptionSettingsElementInvokeResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EncryptionSettingsElementInvokeResponseOutput)
}

// EncryptionSettingsElementInvokeResponseArrayInput is an input type that accepts EncryptionSettingsElementInvokeResponseArray and EncryptionSettingsElementInvokeResponseArrayOutput values.
// You can construct a concrete instance of `EncryptionSettingsElementInvokeResponseArrayInput` via:
//
//          EncryptionSettingsElementInvokeResponseArray{ EncryptionSettingsElementInvokeResponseArgs{...} }
type EncryptionSettingsElementInvokeResponseArrayInput interface {
	pulumi.Input

	ToEncryptionSettingsElementInvokeResponseArrayOutput() EncryptionSettingsElementInvokeResponseArrayOutput
	ToEncryptionSettingsElementInvokeResponseArrayOutputWithContext(context.Context) EncryptionSettingsElementInvokeResponseArrayOutput
}

type EncryptionSettingsElementInvokeResponseArray []EncryptionSettingsElementInvokeResponseInput

func (EncryptionSettingsElementInvokeResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EncryptionSettingsElementInvokeResponse)(nil)).Elem()
}

func (i EncryptionSettingsElementInvokeResponseArray) ToEncryptionSettingsElementInvokeResponseArrayOutput() EncryptionSettingsElementInvokeResponseArrayOutput {
	return i.ToEncryptionSettingsElementInvokeResponseArrayOutputWithContext(context.Background())
}

func (i EncryptionSettingsElementInvokeResponseArray) ToEncryptionSettingsElementInvokeResponseArrayOutputWithContext(ctx context.Context) EncryptionSettingsElementInvokeResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EncryptionSettingsElementInvokeResponseArrayOutput)
}

// Encryption settings for one disk volume.
type EncryptionSettingsElementInvokeResponseOutput struct{ *pulumi.OutputState }

func (EncryptionSettingsElementInvokeResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EncryptionSettingsElementInvokeResponse)(nil)).Elem()
}

func (o EncryptionSettingsElementInvokeResponseOutput) ToEncryptionSettingsElementInvokeResponseOutput() EncryptionSettingsElementInvokeResponseOutput {
	return o
}

func (o EncryptionSettingsElementInvokeResponseOutput) ToEncryptionSettingsElementInvokeResponseOutputWithContext(ctx context.Context) EncryptionSettingsElementInvokeResponseOutput {
	return o
}

// Key Vault Secret Url and vault id of the disk encryption key
func (o EncryptionSettingsElementInvokeResponseOutput) DiskEncryptionKey() KeyVaultAndSecretReferenceInvokeResponsePtrOutput {
	return o.ApplyT(func(v EncryptionSettingsElementInvokeResponse) *KeyVaultAndSecretReferenceInvokeResponse {
		return v.DiskEncryptionKey
	}).(KeyVaultAndSecretReferenceInvokeResponsePtrOutput)
}

// Key Vault Key Url and vault id of the key encryption key. KeyEncryptionKey is optional and when provided is used to unwrap the disk encryption key.
func (o EncryptionSettingsElementInvokeResponseOutput) KeyEncryptionKey() KeyVaultAndKeyReferenceInvokeResponsePtrOutput {
	return o.ApplyT(func(v EncryptionSettingsElementInvokeResponse) *KeyVaultAndKeyReferenceInvokeResponse {
		return v.KeyEncryptionKey
	}).(KeyVaultAndKeyReferenceInvokeResponsePtrOutput)
}

type EncryptionSettingsElementInvokeResponseArrayOutput struct{ *pulumi.OutputState }

func (EncryptionSettingsElementInvokeResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EncryptionSettingsElementInvokeResponse)(nil)).Elem()
}

func (o EncryptionSettingsElementInvokeResponseArrayOutput) ToEncryptionSettingsElementInvokeResponseArrayOutput() EncryptionSettingsElementInvokeResponseArrayOutput {
	return o
}

func (o EncryptionSettingsElementInvokeResponseArrayOutput) ToEncryptionSettingsElementInvokeResponseArrayOutputWithContext(ctx context.Context) EncryptionSettingsElementInvokeResponseArrayOutput {
	return o
}

func (o EncryptionSettingsElementInvokeResponseArrayOutput) Index(i pulumi.IntInput) EncryptionSettingsElementInvokeResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) EncryptionSettingsElementInvokeResponse {
		return vs[0].([]EncryptionSettingsElementInvokeResponse)[vs[1].(int)]
	}).(EncryptionSettingsElementInvokeResponseOutput)
}

// Encryption settings for one disk volume.
type EncryptionSettingsElementResponse struct {
	// Key Vault Secret Url and vault id of the disk encryption key
	DiskEncryptionKey *KeyVaultAndSecretReferenceResponse `pulumi:"diskEncryptionKey"`
	// Key Vault Key Url and vault id of the key encryption key. KeyEncryptionKey is optional and when provided is used to unwrap the disk encryption key.
	KeyEncryptionKey *KeyVaultAndKeyReferenceResponse `pulumi:"keyEncryptionKey"`
}

// EncryptionSettingsElementResponseInput is an input type that accepts EncryptionSettingsElementResponseArgs and EncryptionSettingsElementResponseOutput values.
// You can construct a concrete instance of `EncryptionSettingsElementResponseInput` via:
//
//          EncryptionSettingsElementResponseArgs{...}
type EncryptionSettingsElementResponseInput interface {
	pulumi.Input

	ToEncryptionSettingsElementResponseOutput() EncryptionSettingsElementResponseOutput
	ToEncryptionSettingsElementResponseOutputWithContext(context.Context) EncryptionSettingsElementResponseOutput
}

// Encryption settings for one disk volume.
type EncryptionSettingsElementResponseArgs struct {
	// Key Vault Secret Url and vault id of the disk encryption key
	DiskEncryptionKey KeyVaultAndSecretReferenceResponsePtrInput `pulumi:"diskEncryptionKey"`
	// Key Vault Key Url and vault id of the key encryption key. KeyEncryptionKey is optional and when provided is used to unwrap the disk encryption key.
	KeyEncryptionKey KeyVaultAndKeyReferenceResponsePtrInput `pulumi:"keyEncryptionKey"`
}

func (EncryptionSettingsElementResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EncryptionSettingsElementResponse)(nil)).Elem()
}

func (i EncryptionSettingsElementResponseArgs) ToEncryptionSettingsElementResponseOutput() EncryptionSettingsElementResponseOutput {
	return i.ToEncryptionSettingsElementResponseOutputWithContext(context.Background())
}

func (i EncryptionSettingsElementResponseArgs) ToEncryptionSettingsElementResponseOutputWithContext(ctx context.Context) EncryptionSettingsElementResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EncryptionSettingsElementResponseOutput)
}

// EncryptionSettingsElementResponseArrayInput is an input type that accepts EncryptionSettingsElementResponseArray and EncryptionSettingsElementResponseArrayOutput values.
// You can construct a concrete instance of `EncryptionSettingsElementResponseArrayInput` via:
//
//          EncryptionSettingsElementResponseArray{ EncryptionSettingsElementResponseArgs{...} }
type EncryptionSettingsElementResponseArrayInput interface {
	pulumi.Input

	ToEncryptionSettingsElementResponseArrayOutput() EncryptionSettingsElementResponseArrayOutput
	ToEncryptionSettingsElementResponseArrayOutputWithContext(context.Context) EncryptionSettingsElementResponseArrayOutput
}

type EncryptionSettingsElementResponseArray []EncryptionSettingsElementResponseInput

func (EncryptionSettingsElementResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EncryptionSettingsElementResponse)(nil)).Elem()
}

func (i EncryptionSettingsElementResponseArray) ToEncryptionSettingsElementResponseArrayOutput() EncryptionSettingsElementResponseArrayOutput {
	return i.ToEncryptionSettingsElementResponseArrayOutputWithContext(context.Background())
}

func (i EncryptionSettingsElementResponseArray) ToEncryptionSettingsElementResponseArrayOutputWithContext(ctx context.Context) EncryptionSettingsElementResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EncryptionSettingsElementResponseArrayOutput)
}

// Encryption settings for one disk volume.
type EncryptionSettingsElementResponseOutput struct{ *pulumi.OutputState }

func (EncryptionSettingsElementResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EncryptionSettingsElementResponse)(nil)).Elem()
}

func (o EncryptionSettingsElementResponseOutput) ToEncryptionSettingsElementResponseOutput() EncryptionSettingsElementResponseOutput {
	return o
}

func (o EncryptionSettingsElementResponseOutput) ToEncryptionSettingsElementResponseOutputWithContext(ctx context.Context) EncryptionSettingsElementResponseOutput {
	return o
}

// Key Vault Secret Url and vault id of the disk encryption key
func (o EncryptionSettingsElementResponseOutput) DiskEncryptionKey() KeyVaultAndSecretReferenceResponsePtrOutput {
	return o.ApplyT(func(v EncryptionSettingsElementResponse) *KeyVaultAndSecretReferenceResponse {
		return v.DiskEncryptionKey
	}).(KeyVaultAndSecretReferenceResponsePtrOutput)
}

// Key Vault Key Url and vault id of the key encryption key. KeyEncryptionKey is optional and when provided is used to unwrap the disk encryption key.
func (o EncryptionSettingsElementResponseOutput) KeyEncryptionKey() KeyVaultAndKeyReferenceResponsePtrOutput {
	return o.ApplyT(func(v EncryptionSettingsElementResponse) *KeyVaultAndKeyReferenceResponse { return v.KeyEncryptionKey }).(KeyVaultAndKeyReferenceResponsePtrOutput)
}

type EncryptionSettingsElementResponseArrayOutput struct{ *pulumi.OutputState }

func (EncryptionSettingsElementResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EncryptionSettingsElementResponse)(nil)).Elem()
}

func (o EncryptionSettingsElementResponseArrayOutput) ToEncryptionSettingsElementResponseArrayOutput() EncryptionSettingsElementResponseArrayOutput {
	return o
}

func (o EncryptionSettingsElementResponseArrayOutput) ToEncryptionSettingsElementResponseArrayOutputWithContext(ctx context.Context) EncryptionSettingsElementResponseArrayOutput {
	return o
}

func (o EncryptionSettingsElementResponseArrayOutput) Index(i pulumi.IntInput) EncryptionSettingsElementResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) EncryptionSettingsElementResponse {
		return vs[0].([]EncryptionSettingsElementResponse)[vs[1].(int)]
	}).(EncryptionSettingsElementResponseOutput)
}

// The source image used for creating the disk.
type ImageDiskReference struct {
	// A relative uri containing either a Platform Image Repository or user image reference.
	Id string `pulumi:"id"`
	// If the disk is created from an image's data disk, this is an index that indicates which of the data disks in the image to use. For OS disks, this field is null.
	Lun *int `pulumi:"lun"`
}

// ImageDiskReferenceInput is an input type that accepts ImageDiskReferenceArgs and ImageDiskReferenceOutput values.
// You can construct a concrete instance of `ImageDiskReferenceInput` via:
//
//          ImageDiskReferenceArgs{...}
type ImageDiskReferenceInput interface {
	pulumi.Input

	ToImageDiskReferenceOutput() ImageDiskReferenceOutput
	ToImageDiskReferenceOutputWithContext(context.Context) ImageDiskReferenceOutput
}

// The source image used for creating the disk.
type ImageDiskReferenceArgs struct {
	// A relative uri containing either a Platform Image Repository or user image reference.
	Id pulumi.StringInput `pulumi:"id"`
	// If the disk is created from an image's data disk, this is an index that indicates which of the data disks in the image to use. For OS disks, this field is null.
	Lun pulumi.IntPtrInput `pulumi:"lun"`
}

func (ImageDiskReferenceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ImageDiskReference)(nil)).Elem()
}

func (i ImageDiskReferenceArgs) ToImageDiskReferenceOutput() ImageDiskReferenceOutput {
	return i.ToImageDiskReferenceOutputWithContext(context.Background())
}

func (i ImageDiskReferenceArgs) ToImageDiskReferenceOutputWithContext(ctx context.Context) ImageDiskReferenceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageDiskReferenceOutput)
}

func (i ImageDiskReferenceArgs) ToImageDiskReferencePtrOutput() ImageDiskReferencePtrOutput {
	return i.ToImageDiskReferencePtrOutputWithContext(context.Background())
}

func (i ImageDiskReferenceArgs) ToImageDiskReferencePtrOutputWithContext(ctx context.Context) ImageDiskReferencePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageDiskReferenceOutput).ToImageDiskReferencePtrOutputWithContext(ctx)
}

// ImageDiskReferencePtrInput is an input type that accepts ImageDiskReferenceArgs, ImageDiskReferencePtr and ImageDiskReferencePtrOutput values.
// You can construct a concrete instance of `ImageDiskReferencePtrInput` via:
//
//          ImageDiskReferenceArgs{...}
//
//  or:
//
//          nil
type ImageDiskReferencePtrInput interface {
	pulumi.Input

	ToImageDiskReferencePtrOutput() ImageDiskReferencePtrOutput
	ToImageDiskReferencePtrOutputWithContext(context.Context) ImageDiskReferencePtrOutput
}

type imageDiskReferencePtrType ImageDiskReferenceArgs

func ImageDiskReferencePtr(v *ImageDiskReferenceArgs) ImageDiskReferencePtrInput {
	return (*imageDiskReferencePtrType)(v)
}

func (*imageDiskReferencePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ImageDiskReference)(nil)).Elem()
}

func (i *imageDiskReferencePtrType) ToImageDiskReferencePtrOutput() ImageDiskReferencePtrOutput {
	return i.ToImageDiskReferencePtrOutputWithContext(context.Background())
}

func (i *imageDiskReferencePtrType) ToImageDiskReferencePtrOutputWithContext(ctx context.Context) ImageDiskReferencePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageDiskReferencePtrOutput)
}

// The source image used for creating the disk.
type ImageDiskReferenceOutput struct{ *pulumi.OutputState }

func (ImageDiskReferenceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ImageDiskReference)(nil)).Elem()
}

func (o ImageDiskReferenceOutput) ToImageDiskReferenceOutput() ImageDiskReferenceOutput {
	return o
}

func (o ImageDiskReferenceOutput) ToImageDiskReferenceOutputWithContext(ctx context.Context) ImageDiskReferenceOutput {
	return o
}

func (o ImageDiskReferenceOutput) ToImageDiskReferencePtrOutput() ImageDiskReferencePtrOutput {
	return o.ToImageDiskReferencePtrOutputWithContext(context.Background())
}

func (o ImageDiskReferenceOutput) ToImageDiskReferencePtrOutputWithContext(ctx context.Context) ImageDiskReferencePtrOutput {
	return o.ApplyT(func(v ImageDiskReference) *ImageDiskReference {
		return &v
	}).(ImageDiskReferencePtrOutput)
}

// A relative uri containing either a Platform Image Repository or user image reference.
func (o ImageDiskReferenceOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v ImageDiskReference) string { return v.Id }).(pulumi.StringOutput)
}

// If the disk is created from an image's data disk, this is an index that indicates which of the data disks in the image to use. For OS disks, this field is null.
func (o ImageDiskReferenceOutput) Lun() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ImageDiskReference) *int { return v.Lun }).(pulumi.IntPtrOutput)
}

type ImageDiskReferencePtrOutput struct{ *pulumi.OutputState }

func (ImageDiskReferencePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ImageDiskReference)(nil)).Elem()
}

func (o ImageDiskReferencePtrOutput) ToImageDiskReferencePtrOutput() ImageDiskReferencePtrOutput {
	return o
}

func (o ImageDiskReferencePtrOutput) ToImageDiskReferencePtrOutputWithContext(ctx context.Context) ImageDiskReferencePtrOutput {
	return o
}

func (o ImageDiskReferencePtrOutput) Elem() ImageDiskReferenceOutput {
	return o.ApplyT(func(v *ImageDiskReference) ImageDiskReference { return *v }).(ImageDiskReferenceOutput)
}

// A relative uri containing either a Platform Image Repository or user image reference.
func (o ImageDiskReferencePtrOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ImageDiskReference) *string {
		if v == nil {
			return nil
		}
		return &v.Id
	}).(pulumi.StringPtrOutput)
}

// If the disk is created from an image's data disk, this is an index that indicates which of the data disks in the image to use. For OS disks, this field is null.
func (o ImageDiskReferencePtrOutput) Lun() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ImageDiskReference) *int {
		if v == nil {
			return nil
		}
		return v.Lun
	}).(pulumi.IntPtrOutput)
}

// The source image used for creating the disk.
type ImageDiskReferenceInvokeResponse struct {
	// A relative uri containing either a Platform Image Repository or user image reference.
	Id string `pulumi:"id"`
	// If the disk is created from an image's data disk, this is an index that indicates which of the data disks in the image to use. For OS disks, this field is null.
	Lun *int `pulumi:"lun"`
}

// ImageDiskReferenceInvokeResponseInput is an input type that accepts ImageDiskReferenceInvokeResponseArgs and ImageDiskReferenceInvokeResponseOutput values.
// You can construct a concrete instance of `ImageDiskReferenceInvokeResponseInput` via:
//
//          ImageDiskReferenceInvokeResponseArgs{...}
type ImageDiskReferenceInvokeResponseInput interface {
	pulumi.Input

	ToImageDiskReferenceInvokeResponseOutput() ImageDiskReferenceInvokeResponseOutput
	ToImageDiskReferenceInvokeResponseOutputWithContext(context.Context) ImageDiskReferenceInvokeResponseOutput
}

// The source image used for creating the disk.
type ImageDiskReferenceInvokeResponseArgs struct {
	// A relative uri containing either a Platform Image Repository or user image reference.
	Id pulumi.StringInput `pulumi:"id"`
	// If the disk is created from an image's data disk, this is an index that indicates which of the data disks in the image to use. For OS disks, this field is null.
	Lun pulumi.IntPtrInput `pulumi:"lun"`
}

func (ImageDiskReferenceInvokeResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ImageDiskReferenceInvokeResponse)(nil)).Elem()
}

func (i ImageDiskReferenceInvokeResponseArgs) ToImageDiskReferenceInvokeResponseOutput() ImageDiskReferenceInvokeResponseOutput {
	return i.ToImageDiskReferenceInvokeResponseOutputWithContext(context.Background())
}

func (i ImageDiskReferenceInvokeResponseArgs) ToImageDiskReferenceInvokeResponseOutputWithContext(ctx context.Context) ImageDiskReferenceInvokeResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageDiskReferenceInvokeResponseOutput)
}

func (i ImageDiskReferenceInvokeResponseArgs) ToImageDiskReferenceInvokeResponsePtrOutput() ImageDiskReferenceInvokeResponsePtrOutput {
	return i.ToImageDiskReferenceInvokeResponsePtrOutputWithContext(context.Background())
}

func (i ImageDiskReferenceInvokeResponseArgs) ToImageDiskReferenceInvokeResponsePtrOutputWithContext(ctx context.Context) ImageDiskReferenceInvokeResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageDiskReferenceInvokeResponseOutput).ToImageDiskReferenceInvokeResponsePtrOutputWithContext(ctx)
}

// ImageDiskReferenceInvokeResponsePtrInput is an input type that accepts ImageDiskReferenceInvokeResponseArgs, ImageDiskReferenceInvokeResponsePtr and ImageDiskReferenceInvokeResponsePtrOutput values.
// You can construct a concrete instance of `ImageDiskReferenceInvokeResponsePtrInput` via:
//
//          ImageDiskReferenceInvokeResponseArgs{...}
//
//  or:
//
//          nil
type ImageDiskReferenceInvokeResponsePtrInput interface {
	pulumi.Input

	ToImageDiskReferenceInvokeResponsePtrOutput() ImageDiskReferenceInvokeResponsePtrOutput
	ToImageDiskReferenceInvokeResponsePtrOutputWithContext(context.Context) ImageDiskReferenceInvokeResponsePtrOutput
}

type imageDiskReferenceInvokeResponsePtrType ImageDiskReferenceInvokeResponseArgs

func ImageDiskReferenceInvokeResponsePtr(v *ImageDiskReferenceInvokeResponseArgs) ImageDiskReferenceInvokeResponsePtrInput {
	return (*imageDiskReferenceInvokeResponsePtrType)(v)
}

func (*imageDiskReferenceInvokeResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ImageDiskReferenceInvokeResponse)(nil)).Elem()
}

func (i *imageDiskReferenceInvokeResponsePtrType) ToImageDiskReferenceInvokeResponsePtrOutput() ImageDiskReferenceInvokeResponsePtrOutput {
	return i.ToImageDiskReferenceInvokeResponsePtrOutputWithContext(context.Background())
}

func (i *imageDiskReferenceInvokeResponsePtrType) ToImageDiskReferenceInvokeResponsePtrOutputWithContext(ctx context.Context) ImageDiskReferenceInvokeResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageDiskReferenceInvokeResponsePtrOutput)
}

// The source image used for creating the disk.
type ImageDiskReferenceInvokeResponseOutput struct{ *pulumi.OutputState }

func (ImageDiskReferenceInvokeResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ImageDiskReferenceInvokeResponse)(nil)).Elem()
}

func (o ImageDiskReferenceInvokeResponseOutput) ToImageDiskReferenceInvokeResponseOutput() ImageDiskReferenceInvokeResponseOutput {
	return o
}

func (o ImageDiskReferenceInvokeResponseOutput) ToImageDiskReferenceInvokeResponseOutputWithContext(ctx context.Context) ImageDiskReferenceInvokeResponseOutput {
	return o
}

func (o ImageDiskReferenceInvokeResponseOutput) ToImageDiskReferenceInvokeResponsePtrOutput() ImageDiskReferenceInvokeResponsePtrOutput {
	return o.ToImageDiskReferenceInvokeResponsePtrOutputWithContext(context.Background())
}

func (o ImageDiskReferenceInvokeResponseOutput) ToImageDiskReferenceInvokeResponsePtrOutputWithContext(ctx context.Context) ImageDiskReferenceInvokeResponsePtrOutput {
	return o.ApplyT(func(v ImageDiskReferenceInvokeResponse) *ImageDiskReferenceInvokeResponse {
		return &v
	}).(ImageDiskReferenceInvokeResponsePtrOutput)
}

// A relative uri containing either a Platform Image Repository or user image reference.
func (o ImageDiskReferenceInvokeResponseOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v ImageDiskReferenceInvokeResponse) string { return v.Id }).(pulumi.StringOutput)
}

// If the disk is created from an image's data disk, this is an index that indicates which of the data disks in the image to use. For OS disks, this field is null.
func (o ImageDiskReferenceInvokeResponseOutput) Lun() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ImageDiskReferenceInvokeResponse) *int { return v.Lun }).(pulumi.IntPtrOutput)
}

type ImageDiskReferenceInvokeResponsePtrOutput struct{ *pulumi.OutputState }

func (ImageDiskReferenceInvokeResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ImageDiskReferenceInvokeResponse)(nil)).Elem()
}

func (o ImageDiskReferenceInvokeResponsePtrOutput) ToImageDiskReferenceInvokeResponsePtrOutput() ImageDiskReferenceInvokeResponsePtrOutput {
	return o
}

func (o ImageDiskReferenceInvokeResponsePtrOutput) ToImageDiskReferenceInvokeResponsePtrOutputWithContext(ctx context.Context) ImageDiskReferenceInvokeResponsePtrOutput {
	return o
}

func (o ImageDiskReferenceInvokeResponsePtrOutput) Elem() ImageDiskReferenceInvokeResponseOutput {
	return o.ApplyT(func(v *ImageDiskReferenceInvokeResponse) ImageDiskReferenceInvokeResponse { return *v }).(ImageDiskReferenceInvokeResponseOutput)
}

// A relative uri containing either a Platform Image Repository or user image reference.
func (o ImageDiskReferenceInvokeResponsePtrOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ImageDiskReferenceInvokeResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Id
	}).(pulumi.StringPtrOutput)
}

// If the disk is created from an image's data disk, this is an index that indicates which of the data disks in the image to use. For OS disks, this field is null.
func (o ImageDiskReferenceInvokeResponsePtrOutput) Lun() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ImageDiskReferenceInvokeResponse) *int {
		if v == nil {
			return nil
		}
		return v.Lun
	}).(pulumi.IntPtrOutput)
}

// The source image used for creating the disk.
type ImageDiskReferenceResponse struct {
	// A relative uri containing either a Platform Image Repository or user image reference.
	Id string `pulumi:"id"`
	// If the disk is created from an image's data disk, this is an index that indicates which of the data disks in the image to use. For OS disks, this field is null.
	Lun *int `pulumi:"lun"`
}

// ImageDiskReferenceResponseInput is an input type that accepts ImageDiskReferenceResponseArgs and ImageDiskReferenceResponseOutput values.
// You can construct a concrete instance of `ImageDiskReferenceResponseInput` via:
//
//          ImageDiskReferenceResponseArgs{...}
type ImageDiskReferenceResponseInput interface {
	pulumi.Input

	ToImageDiskReferenceResponseOutput() ImageDiskReferenceResponseOutput
	ToImageDiskReferenceResponseOutputWithContext(context.Context) ImageDiskReferenceResponseOutput
}

// The source image used for creating the disk.
type ImageDiskReferenceResponseArgs struct {
	// A relative uri containing either a Platform Image Repository or user image reference.
	Id pulumi.StringInput `pulumi:"id"`
	// If the disk is created from an image's data disk, this is an index that indicates which of the data disks in the image to use. For OS disks, this field is null.
	Lun pulumi.IntPtrInput `pulumi:"lun"`
}

func (ImageDiskReferenceResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ImageDiskReferenceResponse)(nil)).Elem()
}

func (i ImageDiskReferenceResponseArgs) ToImageDiskReferenceResponseOutput() ImageDiskReferenceResponseOutput {
	return i.ToImageDiskReferenceResponseOutputWithContext(context.Background())
}

func (i ImageDiskReferenceResponseArgs) ToImageDiskReferenceResponseOutputWithContext(ctx context.Context) ImageDiskReferenceResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageDiskReferenceResponseOutput)
}

func (i ImageDiskReferenceResponseArgs) ToImageDiskReferenceResponsePtrOutput() ImageDiskReferenceResponsePtrOutput {
	return i.ToImageDiskReferenceResponsePtrOutputWithContext(context.Background())
}

func (i ImageDiskReferenceResponseArgs) ToImageDiskReferenceResponsePtrOutputWithContext(ctx context.Context) ImageDiskReferenceResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageDiskReferenceResponseOutput).ToImageDiskReferenceResponsePtrOutputWithContext(ctx)
}

// ImageDiskReferenceResponsePtrInput is an input type that accepts ImageDiskReferenceResponseArgs, ImageDiskReferenceResponsePtr and ImageDiskReferenceResponsePtrOutput values.
// You can construct a concrete instance of `ImageDiskReferenceResponsePtrInput` via:
//
//          ImageDiskReferenceResponseArgs{...}
//
//  or:
//
//          nil
type ImageDiskReferenceResponsePtrInput interface {
	pulumi.Input

	ToImageDiskReferenceResponsePtrOutput() ImageDiskReferenceResponsePtrOutput
	ToImageDiskReferenceResponsePtrOutputWithContext(context.Context) ImageDiskReferenceResponsePtrOutput
}

type imageDiskReferenceResponsePtrType ImageDiskReferenceResponseArgs

func ImageDiskReferenceResponsePtr(v *ImageDiskReferenceResponseArgs) ImageDiskReferenceResponsePtrInput {
	return (*imageDiskReferenceResponsePtrType)(v)
}

func (*imageDiskReferenceResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ImageDiskReferenceResponse)(nil)).Elem()
}

func (i *imageDiskReferenceResponsePtrType) ToImageDiskReferenceResponsePtrOutput() ImageDiskReferenceResponsePtrOutput {
	return i.ToImageDiskReferenceResponsePtrOutputWithContext(context.Background())
}

func (i *imageDiskReferenceResponsePtrType) ToImageDiskReferenceResponsePtrOutputWithContext(ctx context.Context) ImageDiskReferenceResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageDiskReferenceResponsePtrOutput)
}

// The source image used for creating the disk.
type ImageDiskReferenceResponseOutput struct{ *pulumi.OutputState }

func (ImageDiskReferenceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ImageDiskReferenceResponse)(nil)).Elem()
}

func (o ImageDiskReferenceResponseOutput) ToImageDiskReferenceResponseOutput() ImageDiskReferenceResponseOutput {
	return o
}

func (o ImageDiskReferenceResponseOutput) ToImageDiskReferenceResponseOutputWithContext(ctx context.Context) ImageDiskReferenceResponseOutput {
	return o
}

func (o ImageDiskReferenceResponseOutput) ToImageDiskReferenceResponsePtrOutput() ImageDiskReferenceResponsePtrOutput {
	return o.ToImageDiskReferenceResponsePtrOutputWithContext(context.Background())
}

func (o ImageDiskReferenceResponseOutput) ToImageDiskReferenceResponsePtrOutputWithContext(ctx context.Context) ImageDiskReferenceResponsePtrOutput {
	return o.ApplyT(func(v ImageDiskReferenceResponse) *ImageDiskReferenceResponse {
		return &v
	}).(ImageDiskReferenceResponsePtrOutput)
}

// A relative uri containing either a Platform Image Repository or user image reference.
func (o ImageDiskReferenceResponseOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v ImageDiskReferenceResponse) string { return v.Id }).(pulumi.StringOutput)
}

// If the disk is created from an image's data disk, this is an index that indicates which of the data disks in the image to use. For OS disks, this field is null.
func (o ImageDiskReferenceResponseOutput) Lun() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ImageDiskReferenceResponse) *int { return v.Lun }).(pulumi.IntPtrOutput)
}

type ImageDiskReferenceResponsePtrOutput struct{ *pulumi.OutputState }

func (ImageDiskReferenceResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ImageDiskReferenceResponse)(nil)).Elem()
}

func (o ImageDiskReferenceResponsePtrOutput) ToImageDiskReferenceResponsePtrOutput() ImageDiskReferenceResponsePtrOutput {
	return o
}

func (o ImageDiskReferenceResponsePtrOutput) ToImageDiskReferenceResponsePtrOutputWithContext(ctx context.Context) ImageDiskReferenceResponsePtrOutput {
	return o
}

func (o ImageDiskReferenceResponsePtrOutput) Elem() ImageDiskReferenceResponseOutput {
	return o.ApplyT(func(v *ImageDiskReferenceResponse) ImageDiskReferenceResponse { return *v }).(ImageDiskReferenceResponseOutput)
}

// A relative uri containing either a Platform Image Repository or user image reference.
func (o ImageDiskReferenceResponsePtrOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ImageDiskReferenceResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Id
	}).(pulumi.StringPtrOutput)
}

// If the disk is created from an image's data disk, this is an index that indicates which of the data disks in the image to use. For OS disks, this field is null.
func (o ImageDiskReferenceResponsePtrOutput) Lun() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ImageDiskReferenceResponse) *int {
		if v == nil {
			return nil
		}
		return v.Lun
	}).(pulumi.IntPtrOutput)
}

// Key Vault Key Url and vault id of KeK, KeK is optional and when provided is used to unwrap the encryptionKey
type KeyVaultAndKeyReference struct {
	// Url pointing to a key or secret in KeyVault
	KeyUrl string `pulumi:"keyUrl"`
	// Resource id of the KeyVault containing the key or secret
	SourceVault SourceVault `pulumi:"sourceVault"`
}

// KeyVaultAndKeyReferenceInput is an input type that accepts KeyVaultAndKeyReferenceArgs and KeyVaultAndKeyReferenceOutput values.
// You can construct a concrete instance of `KeyVaultAndKeyReferenceInput` via:
//
//          KeyVaultAndKeyReferenceArgs{...}
type KeyVaultAndKeyReferenceInput interface {
	pulumi.Input

	ToKeyVaultAndKeyReferenceOutput() KeyVaultAndKeyReferenceOutput
	ToKeyVaultAndKeyReferenceOutputWithContext(context.Context) KeyVaultAndKeyReferenceOutput
}

// Key Vault Key Url and vault id of KeK, KeK is optional and when provided is used to unwrap the encryptionKey
type KeyVaultAndKeyReferenceArgs struct {
	// Url pointing to a key or secret in KeyVault
	KeyUrl pulumi.StringInput `pulumi:"keyUrl"`
	// Resource id of the KeyVault containing the key or secret
	SourceVault SourceVaultInput `pulumi:"sourceVault"`
}

func (KeyVaultAndKeyReferenceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KeyVaultAndKeyReference)(nil)).Elem()
}

func (i KeyVaultAndKeyReferenceArgs) ToKeyVaultAndKeyReferenceOutput() KeyVaultAndKeyReferenceOutput {
	return i.ToKeyVaultAndKeyReferenceOutputWithContext(context.Background())
}

func (i KeyVaultAndKeyReferenceArgs) ToKeyVaultAndKeyReferenceOutputWithContext(ctx context.Context) KeyVaultAndKeyReferenceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KeyVaultAndKeyReferenceOutput)
}

func (i KeyVaultAndKeyReferenceArgs) ToKeyVaultAndKeyReferencePtrOutput() KeyVaultAndKeyReferencePtrOutput {
	return i.ToKeyVaultAndKeyReferencePtrOutputWithContext(context.Background())
}

func (i KeyVaultAndKeyReferenceArgs) ToKeyVaultAndKeyReferencePtrOutputWithContext(ctx context.Context) KeyVaultAndKeyReferencePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KeyVaultAndKeyReferenceOutput).ToKeyVaultAndKeyReferencePtrOutputWithContext(ctx)
}

// KeyVaultAndKeyReferencePtrInput is an input type that accepts KeyVaultAndKeyReferenceArgs, KeyVaultAndKeyReferencePtr and KeyVaultAndKeyReferencePtrOutput values.
// You can construct a concrete instance of `KeyVaultAndKeyReferencePtrInput` via:
//
//          KeyVaultAndKeyReferenceArgs{...}
//
//  or:
//
//          nil
type KeyVaultAndKeyReferencePtrInput interface {
	pulumi.Input

	ToKeyVaultAndKeyReferencePtrOutput() KeyVaultAndKeyReferencePtrOutput
	ToKeyVaultAndKeyReferencePtrOutputWithContext(context.Context) KeyVaultAndKeyReferencePtrOutput
}

type keyVaultAndKeyReferencePtrType KeyVaultAndKeyReferenceArgs

func KeyVaultAndKeyReferencePtr(v *KeyVaultAndKeyReferenceArgs) KeyVaultAndKeyReferencePtrInput {
	return (*keyVaultAndKeyReferencePtrType)(v)
}

func (*keyVaultAndKeyReferencePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**KeyVaultAndKeyReference)(nil)).Elem()
}

func (i *keyVaultAndKeyReferencePtrType) ToKeyVaultAndKeyReferencePtrOutput() KeyVaultAndKeyReferencePtrOutput {
	return i.ToKeyVaultAndKeyReferencePtrOutputWithContext(context.Background())
}

func (i *keyVaultAndKeyReferencePtrType) ToKeyVaultAndKeyReferencePtrOutputWithContext(ctx context.Context) KeyVaultAndKeyReferencePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KeyVaultAndKeyReferencePtrOutput)
}

// Key Vault Key Url and vault id of KeK, KeK is optional and when provided is used to unwrap the encryptionKey
type KeyVaultAndKeyReferenceOutput struct{ *pulumi.OutputState }

func (KeyVaultAndKeyReferenceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KeyVaultAndKeyReference)(nil)).Elem()
}

func (o KeyVaultAndKeyReferenceOutput) ToKeyVaultAndKeyReferenceOutput() KeyVaultAndKeyReferenceOutput {
	return o
}

func (o KeyVaultAndKeyReferenceOutput) ToKeyVaultAndKeyReferenceOutputWithContext(ctx context.Context) KeyVaultAndKeyReferenceOutput {
	return o
}

func (o KeyVaultAndKeyReferenceOutput) ToKeyVaultAndKeyReferencePtrOutput() KeyVaultAndKeyReferencePtrOutput {
	return o.ToKeyVaultAndKeyReferencePtrOutputWithContext(context.Background())
}

func (o KeyVaultAndKeyReferenceOutput) ToKeyVaultAndKeyReferencePtrOutputWithContext(ctx context.Context) KeyVaultAndKeyReferencePtrOutput {
	return o.ApplyT(func(v KeyVaultAndKeyReference) *KeyVaultAndKeyReference {
		return &v
	}).(KeyVaultAndKeyReferencePtrOutput)
}

// Url pointing to a key or secret in KeyVault
func (o KeyVaultAndKeyReferenceOutput) KeyUrl() pulumi.StringOutput {
	return o.ApplyT(func(v KeyVaultAndKeyReference) string { return v.KeyUrl }).(pulumi.StringOutput)
}

// Resource id of the KeyVault containing the key or secret
func (o KeyVaultAndKeyReferenceOutput) SourceVault() SourceVaultOutput {
	return o.ApplyT(func(v KeyVaultAndKeyReference) SourceVault { return v.SourceVault }).(SourceVaultOutput)
}

type KeyVaultAndKeyReferencePtrOutput struct{ *pulumi.OutputState }

func (KeyVaultAndKeyReferencePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KeyVaultAndKeyReference)(nil)).Elem()
}

func (o KeyVaultAndKeyReferencePtrOutput) ToKeyVaultAndKeyReferencePtrOutput() KeyVaultAndKeyReferencePtrOutput {
	return o
}

func (o KeyVaultAndKeyReferencePtrOutput) ToKeyVaultAndKeyReferencePtrOutputWithContext(ctx context.Context) KeyVaultAndKeyReferencePtrOutput {
	return o
}

func (o KeyVaultAndKeyReferencePtrOutput) Elem() KeyVaultAndKeyReferenceOutput {
	return o.ApplyT(func(v *KeyVaultAndKeyReference) KeyVaultAndKeyReference { return *v }).(KeyVaultAndKeyReferenceOutput)
}

// Url pointing to a key or secret in KeyVault
func (o KeyVaultAndKeyReferencePtrOutput) KeyUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KeyVaultAndKeyReference) *string {
		if v == nil {
			return nil
		}
		return &v.KeyUrl
	}).(pulumi.StringPtrOutput)
}

// Resource id of the KeyVault containing the key or secret
func (o KeyVaultAndKeyReferencePtrOutput) SourceVault() SourceVaultPtrOutput {
	return o.ApplyT(func(v *KeyVaultAndKeyReference) *SourceVault {
		if v == nil {
			return nil
		}
		return &v.SourceVault
	}).(SourceVaultPtrOutput)
}

// Key Vault Key Url and vault id of KeK, KeK is optional and when provided is used to unwrap the encryptionKey
type KeyVaultAndKeyReferenceInvokeResponse struct {
	// Url pointing to a key or secret in KeyVault
	KeyUrl string `pulumi:"keyUrl"`
	// Resource id of the KeyVault containing the key or secret
	SourceVault SourceVaultInvokeResponse `pulumi:"sourceVault"`
}

// KeyVaultAndKeyReferenceInvokeResponseInput is an input type that accepts KeyVaultAndKeyReferenceInvokeResponseArgs and KeyVaultAndKeyReferenceInvokeResponseOutput values.
// You can construct a concrete instance of `KeyVaultAndKeyReferenceInvokeResponseInput` via:
//
//          KeyVaultAndKeyReferenceInvokeResponseArgs{...}
type KeyVaultAndKeyReferenceInvokeResponseInput interface {
	pulumi.Input

	ToKeyVaultAndKeyReferenceInvokeResponseOutput() KeyVaultAndKeyReferenceInvokeResponseOutput
	ToKeyVaultAndKeyReferenceInvokeResponseOutputWithContext(context.Context) KeyVaultAndKeyReferenceInvokeResponseOutput
}

// Key Vault Key Url and vault id of KeK, KeK is optional and when provided is used to unwrap the encryptionKey
type KeyVaultAndKeyReferenceInvokeResponseArgs struct {
	// Url pointing to a key or secret in KeyVault
	KeyUrl pulumi.StringInput `pulumi:"keyUrl"`
	// Resource id of the KeyVault containing the key or secret
	SourceVault SourceVaultInvokeResponseInput `pulumi:"sourceVault"`
}

func (KeyVaultAndKeyReferenceInvokeResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KeyVaultAndKeyReferenceInvokeResponse)(nil)).Elem()
}

func (i KeyVaultAndKeyReferenceInvokeResponseArgs) ToKeyVaultAndKeyReferenceInvokeResponseOutput() KeyVaultAndKeyReferenceInvokeResponseOutput {
	return i.ToKeyVaultAndKeyReferenceInvokeResponseOutputWithContext(context.Background())
}

func (i KeyVaultAndKeyReferenceInvokeResponseArgs) ToKeyVaultAndKeyReferenceInvokeResponseOutputWithContext(ctx context.Context) KeyVaultAndKeyReferenceInvokeResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KeyVaultAndKeyReferenceInvokeResponseOutput)
}

func (i KeyVaultAndKeyReferenceInvokeResponseArgs) ToKeyVaultAndKeyReferenceInvokeResponsePtrOutput() KeyVaultAndKeyReferenceInvokeResponsePtrOutput {
	return i.ToKeyVaultAndKeyReferenceInvokeResponsePtrOutputWithContext(context.Background())
}

func (i KeyVaultAndKeyReferenceInvokeResponseArgs) ToKeyVaultAndKeyReferenceInvokeResponsePtrOutputWithContext(ctx context.Context) KeyVaultAndKeyReferenceInvokeResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KeyVaultAndKeyReferenceInvokeResponseOutput).ToKeyVaultAndKeyReferenceInvokeResponsePtrOutputWithContext(ctx)
}

// KeyVaultAndKeyReferenceInvokeResponsePtrInput is an input type that accepts KeyVaultAndKeyReferenceInvokeResponseArgs, KeyVaultAndKeyReferenceInvokeResponsePtr and KeyVaultAndKeyReferenceInvokeResponsePtrOutput values.
// You can construct a concrete instance of `KeyVaultAndKeyReferenceInvokeResponsePtrInput` via:
//
//          KeyVaultAndKeyReferenceInvokeResponseArgs{...}
//
//  or:
//
//          nil
type KeyVaultAndKeyReferenceInvokeResponsePtrInput interface {
	pulumi.Input

	ToKeyVaultAndKeyReferenceInvokeResponsePtrOutput() KeyVaultAndKeyReferenceInvokeResponsePtrOutput
	ToKeyVaultAndKeyReferenceInvokeResponsePtrOutputWithContext(context.Context) KeyVaultAndKeyReferenceInvokeResponsePtrOutput
}

type keyVaultAndKeyReferenceInvokeResponsePtrType KeyVaultAndKeyReferenceInvokeResponseArgs

func KeyVaultAndKeyReferenceInvokeResponsePtr(v *KeyVaultAndKeyReferenceInvokeResponseArgs) KeyVaultAndKeyReferenceInvokeResponsePtrInput {
	return (*keyVaultAndKeyReferenceInvokeResponsePtrType)(v)
}

func (*keyVaultAndKeyReferenceInvokeResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**KeyVaultAndKeyReferenceInvokeResponse)(nil)).Elem()
}

func (i *keyVaultAndKeyReferenceInvokeResponsePtrType) ToKeyVaultAndKeyReferenceInvokeResponsePtrOutput() KeyVaultAndKeyReferenceInvokeResponsePtrOutput {
	return i.ToKeyVaultAndKeyReferenceInvokeResponsePtrOutputWithContext(context.Background())
}

func (i *keyVaultAndKeyReferenceInvokeResponsePtrType) ToKeyVaultAndKeyReferenceInvokeResponsePtrOutputWithContext(ctx context.Context) KeyVaultAndKeyReferenceInvokeResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KeyVaultAndKeyReferenceInvokeResponsePtrOutput)
}

// Key Vault Key Url and vault id of KeK, KeK is optional and when provided is used to unwrap the encryptionKey
type KeyVaultAndKeyReferenceInvokeResponseOutput struct{ *pulumi.OutputState }

func (KeyVaultAndKeyReferenceInvokeResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KeyVaultAndKeyReferenceInvokeResponse)(nil)).Elem()
}

func (o KeyVaultAndKeyReferenceInvokeResponseOutput) ToKeyVaultAndKeyReferenceInvokeResponseOutput() KeyVaultAndKeyReferenceInvokeResponseOutput {
	return o
}

func (o KeyVaultAndKeyReferenceInvokeResponseOutput) ToKeyVaultAndKeyReferenceInvokeResponseOutputWithContext(ctx context.Context) KeyVaultAndKeyReferenceInvokeResponseOutput {
	return o
}

func (o KeyVaultAndKeyReferenceInvokeResponseOutput) ToKeyVaultAndKeyReferenceInvokeResponsePtrOutput() KeyVaultAndKeyReferenceInvokeResponsePtrOutput {
	return o.ToKeyVaultAndKeyReferenceInvokeResponsePtrOutputWithContext(context.Background())
}

func (o KeyVaultAndKeyReferenceInvokeResponseOutput) ToKeyVaultAndKeyReferenceInvokeResponsePtrOutputWithContext(ctx context.Context) KeyVaultAndKeyReferenceInvokeResponsePtrOutput {
	return o.ApplyT(func(v KeyVaultAndKeyReferenceInvokeResponse) *KeyVaultAndKeyReferenceInvokeResponse {
		return &v
	}).(KeyVaultAndKeyReferenceInvokeResponsePtrOutput)
}

// Url pointing to a key or secret in KeyVault
func (o KeyVaultAndKeyReferenceInvokeResponseOutput) KeyUrl() pulumi.StringOutput {
	return o.ApplyT(func(v KeyVaultAndKeyReferenceInvokeResponse) string { return v.KeyUrl }).(pulumi.StringOutput)
}

// Resource id of the KeyVault containing the key or secret
func (o KeyVaultAndKeyReferenceInvokeResponseOutput) SourceVault() SourceVaultInvokeResponseOutput {
	return o.ApplyT(func(v KeyVaultAndKeyReferenceInvokeResponse) SourceVaultInvokeResponse { return v.SourceVault }).(SourceVaultInvokeResponseOutput)
}

type KeyVaultAndKeyReferenceInvokeResponsePtrOutput struct{ *pulumi.OutputState }

func (KeyVaultAndKeyReferenceInvokeResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KeyVaultAndKeyReferenceInvokeResponse)(nil)).Elem()
}

func (o KeyVaultAndKeyReferenceInvokeResponsePtrOutput) ToKeyVaultAndKeyReferenceInvokeResponsePtrOutput() KeyVaultAndKeyReferenceInvokeResponsePtrOutput {
	return o
}

func (o KeyVaultAndKeyReferenceInvokeResponsePtrOutput) ToKeyVaultAndKeyReferenceInvokeResponsePtrOutputWithContext(ctx context.Context) KeyVaultAndKeyReferenceInvokeResponsePtrOutput {
	return o
}

func (o KeyVaultAndKeyReferenceInvokeResponsePtrOutput) Elem() KeyVaultAndKeyReferenceInvokeResponseOutput {
	return o.ApplyT(func(v *KeyVaultAndKeyReferenceInvokeResponse) KeyVaultAndKeyReferenceInvokeResponse { return *v }).(KeyVaultAndKeyReferenceInvokeResponseOutput)
}

// Url pointing to a key or secret in KeyVault
func (o KeyVaultAndKeyReferenceInvokeResponsePtrOutput) KeyUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KeyVaultAndKeyReferenceInvokeResponse) *string {
		if v == nil {
			return nil
		}
		return &v.KeyUrl
	}).(pulumi.StringPtrOutput)
}

// Resource id of the KeyVault containing the key or secret
func (o KeyVaultAndKeyReferenceInvokeResponsePtrOutput) SourceVault() SourceVaultInvokeResponsePtrOutput {
	return o.ApplyT(func(v *KeyVaultAndKeyReferenceInvokeResponse) *SourceVaultInvokeResponse {
		if v == nil {
			return nil
		}
		return &v.SourceVault
	}).(SourceVaultInvokeResponsePtrOutput)
}

// Key Vault Key Url and vault id of KeK, KeK is optional and when provided is used to unwrap the encryptionKey
type KeyVaultAndKeyReferenceResponse struct {
	// Url pointing to a key or secret in KeyVault
	KeyUrl string `pulumi:"keyUrl"`
	// Resource id of the KeyVault containing the key or secret
	SourceVault SourceVaultResponse `pulumi:"sourceVault"`
}

// KeyVaultAndKeyReferenceResponseInput is an input type that accepts KeyVaultAndKeyReferenceResponseArgs and KeyVaultAndKeyReferenceResponseOutput values.
// You can construct a concrete instance of `KeyVaultAndKeyReferenceResponseInput` via:
//
//          KeyVaultAndKeyReferenceResponseArgs{...}
type KeyVaultAndKeyReferenceResponseInput interface {
	pulumi.Input

	ToKeyVaultAndKeyReferenceResponseOutput() KeyVaultAndKeyReferenceResponseOutput
	ToKeyVaultAndKeyReferenceResponseOutputWithContext(context.Context) KeyVaultAndKeyReferenceResponseOutput
}

// Key Vault Key Url and vault id of KeK, KeK is optional and when provided is used to unwrap the encryptionKey
type KeyVaultAndKeyReferenceResponseArgs struct {
	// Url pointing to a key or secret in KeyVault
	KeyUrl pulumi.StringInput `pulumi:"keyUrl"`
	// Resource id of the KeyVault containing the key or secret
	SourceVault SourceVaultResponseInput `pulumi:"sourceVault"`
}

func (KeyVaultAndKeyReferenceResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KeyVaultAndKeyReferenceResponse)(nil)).Elem()
}

func (i KeyVaultAndKeyReferenceResponseArgs) ToKeyVaultAndKeyReferenceResponseOutput() KeyVaultAndKeyReferenceResponseOutput {
	return i.ToKeyVaultAndKeyReferenceResponseOutputWithContext(context.Background())
}

func (i KeyVaultAndKeyReferenceResponseArgs) ToKeyVaultAndKeyReferenceResponseOutputWithContext(ctx context.Context) KeyVaultAndKeyReferenceResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KeyVaultAndKeyReferenceResponseOutput)
}

func (i KeyVaultAndKeyReferenceResponseArgs) ToKeyVaultAndKeyReferenceResponsePtrOutput() KeyVaultAndKeyReferenceResponsePtrOutput {
	return i.ToKeyVaultAndKeyReferenceResponsePtrOutputWithContext(context.Background())
}

func (i KeyVaultAndKeyReferenceResponseArgs) ToKeyVaultAndKeyReferenceResponsePtrOutputWithContext(ctx context.Context) KeyVaultAndKeyReferenceResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KeyVaultAndKeyReferenceResponseOutput).ToKeyVaultAndKeyReferenceResponsePtrOutputWithContext(ctx)
}

// KeyVaultAndKeyReferenceResponsePtrInput is an input type that accepts KeyVaultAndKeyReferenceResponseArgs, KeyVaultAndKeyReferenceResponsePtr and KeyVaultAndKeyReferenceResponsePtrOutput values.
// You can construct a concrete instance of `KeyVaultAndKeyReferenceResponsePtrInput` via:
//
//          KeyVaultAndKeyReferenceResponseArgs{...}
//
//  or:
//
//          nil
type KeyVaultAndKeyReferenceResponsePtrInput interface {
	pulumi.Input

	ToKeyVaultAndKeyReferenceResponsePtrOutput() KeyVaultAndKeyReferenceResponsePtrOutput
	ToKeyVaultAndKeyReferenceResponsePtrOutputWithContext(context.Context) KeyVaultAndKeyReferenceResponsePtrOutput
}

type keyVaultAndKeyReferenceResponsePtrType KeyVaultAndKeyReferenceResponseArgs

func KeyVaultAndKeyReferenceResponsePtr(v *KeyVaultAndKeyReferenceResponseArgs) KeyVaultAndKeyReferenceResponsePtrInput {
	return (*keyVaultAndKeyReferenceResponsePtrType)(v)
}

func (*keyVaultAndKeyReferenceResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**KeyVaultAndKeyReferenceResponse)(nil)).Elem()
}

func (i *keyVaultAndKeyReferenceResponsePtrType) ToKeyVaultAndKeyReferenceResponsePtrOutput() KeyVaultAndKeyReferenceResponsePtrOutput {
	return i.ToKeyVaultAndKeyReferenceResponsePtrOutputWithContext(context.Background())
}

func (i *keyVaultAndKeyReferenceResponsePtrType) ToKeyVaultAndKeyReferenceResponsePtrOutputWithContext(ctx context.Context) KeyVaultAndKeyReferenceResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KeyVaultAndKeyReferenceResponsePtrOutput)
}

// Key Vault Key Url and vault id of KeK, KeK is optional and when provided is used to unwrap the encryptionKey
type KeyVaultAndKeyReferenceResponseOutput struct{ *pulumi.OutputState }

func (KeyVaultAndKeyReferenceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KeyVaultAndKeyReferenceResponse)(nil)).Elem()
}

func (o KeyVaultAndKeyReferenceResponseOutput) ToKeyVaultAndKeyReferenceResponseOutput() KeyVaultAndKeyReferenceResponseOutput {
	return o
}

func (o KeyVaultAndKeyReferenceResponseOutput) ToKeyVaultAndKeyReferenceResponseOutputWithContext(ctx context.Context) KeyVaultAndKeyReferenceResponseOutput {
	return o
}

func (o KeyVaultAndKeyReferenceResponseOutput) ToKeyVaultAndKeyReferenceResponsePtrOutput() KeyVaultAndKeyReferenceResponsePtrOutput {
	return o.ToKeyVaultAndKeyReferenceResponsePtrOutputWithContext(context.Background())
}

func (o KeyVaultAndKeyReferenceResponseOutput) ToKeyVaultAndKeyReferenceResponsePtrOutputWithContext(ctx context.Context) KeyVaultAndKeyReferenceResponsePtrOutput {
	return o.ApplyT(func(v KeyVaultAndKeyReferenceResponse) *KeyVaultAndKeyReferenceResponse {
		return &v
	}).(KeyVaultAndKeyReferenceResponsePtrOutput)
}

// Url pointing to a key or secret in KeyVault
func (o KeyVaultAndKeyReferenceResponseOutput) KeyUrl() pulumi.StringOutput {
	return o.ApplyT(func(v KeyVaultAndKeyReferenceResponse) string { return v.KeyUrl }).(pulumi.StringOutput)
}

// Resource id of the KeyVault containing the key or secret
func (o KeyVaultAndKeyReferenceResponseOutput) SourceVault() SourceVaultResponseOutput {
	return o.ApplyT(func(v KeyVaultAndKeyReferenceResponse) SourceVaultResponse { return v.SourceVault }).(SourceVaultResponseOutput)
}

type KeyVaultAndKeyReferenceResponsePtrOutput struct{ *pulumi.OutputState }

func (KeyVaultAndKeyReferenceResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KeyVaultAndKeyReferenceResponse)(nil)).Elem()
}

func (o KeyVaultAndKeyReferenceResponsePtrOutput) ToKeyVaultAndKeyReferenceResponsePtrOutput() KeyVaultAndKeyReferenceResponsePtrOutput {
	return o
}

func (o KeyVaultAndKeyReferenceResponsePtrOutput) ToKeyVaultAndKeyReferenceResponsePtrOutputWithContext(ctx context.Context) KeyVaultAndKeyReferenceResponsePtrOutput {
	return o
}

func (o KeyVaultAndKeyReferenceResponsePtrOutput) Elem() KeyVaultAndKeyReferenceResponseOutput {
	return o.ApplyT(func(v *KeyVaultAndKeyReferenceResponse) KeyVaultAndKeyReferenceResponse { return *v }).(KeyVaultAndKeyReferenceResponseOutput)
}

// Url pointing to a key or secret in KeyVault
func (o KeyVaultAndKeyReferenceResponsePtrOutput) KeyUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KeyVaultAndKeyReferenceResponse) *string {
		if v == nil {
			return nil
		}
		return &v.KeyUrl
	}).(pulumi.StringPtrOutput)
}

// Resource id of the KeyVault containing the key or secret
func (o KeyVaultAndKeyReferenceResponsePtrOutput) SourceVault() SourceVaultResponsePtrOutput {
	return o.ApplyT(func(v *KeyVaultAndKeyReferenceResponse) *SourceVaultResponse {
		if v == nil {
			return nil
		}
		return &v.SourceVault
	}).(SourceVaultResponsePtrOutput)
}

// Key Vault Secret Url and vault id of the encryption key
type KeyVaultAndSecretReference struct {
	// Url pointing to a key or secret in KeyVault
	SecretUrl string `pulumi:"secretUrl"`
	// Resource id of the KeyVault containing the key or secret
	SourceVault SourceVault `pulumi:"sourceVault"`
}

// KeyVaultAndSecretReferenceInput is an input type that accepts KeyVaultAndSecretReferenceArgs and KeyVaultAndSecretReferenceOutput values.
// You can construct a concrete instance of `KeyVaultAndSecretReferenceInput` via:
//
//          KeyVaultAndSecretReferenceArgs{...}
type KeyVaultAndSecretReferenceInput interface {
	pulumi.Input

	ToKeyVaultAndSecretReferenceOutput() KeyVaultAndSecretReferenceOutput
	ToKeyVaultAndSecretReferenceOutputWithContext(context.Context) KeyVaultAndSecretReferenceOutput
}

// Key Vault Secret Url and vault id of the encryption key
type KeyVaultAndSecretReferenceArgs struct {
	// Url pointing to a key or secret in KeyVault
	SecretUrl pulumi.StringInput `pulumi:"secretUrl"`
	// Resource id of the KeyVault containing the key or secret
	SourceVault SourceVaultInput `pulumi:"sourceVault"`
}

func (KeyVaultAndSecretReferenceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KeyVaultAndSecretReference)(nil)).Elem()
}

func (i KeyVaultAndSecretReferenceArgs) ToKeyVaultAndSecretReferenceOutput() KeyVaultAndSecretReferenceOutput {
	return i.ToKeyVaultAndSecretReferenceOutputWithContext(context.Background())
}

func (i KeyVaultAndSecretReferenceArgs) ToKeyVaultAndSecretReferenceOutputWithContext(ctx context.Context) KeyVaultAndSecretReferenceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KeyVaultAndSecretReferenceOutput)
}

func (i KeyVaultAndSecretReferenceArgs) ToKeyVaultAndSecretReferencePtrOutput() KeyVaultAndSecretReferencePtrOutput {
	return i.ToKeyVaultAndSecretReferencePtrOutputWithContext(context.Background())
}

func (i KeyVaultAndSecretReferenceArgs) ToKeyVaultAndSecretReferencePtrOutputWithContext(ctx context.Context) KeyVaultAndSecretReferencePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KeyVaultAndSecretReferenceOutput).ToKeyVaultAndSecretReferencePtrOutputWithContext(ctx)
}

// KeyVaultAndSecretReferencePtrInput is an input type that accepts KeyVaultAndSecretReferenceArgs, KeyVaultAndSecretReferencePtr and KeyVaultAndSecretReferencePtrOutput values.
// You can construct a concrete instance of `KeyVaultAndSecretReferencePtrInput` via:
//
//          KeyVaultAndSecretReferenceArgs{...}
//
//  or:
//
//          nil
type KeyVaultAndSecretReferencePtrInput interface {
	pulumi.Input

	ToKeyVaultAndSecretReferencePtrOutput() KeyVaultAndSecretReferencePtrOutput
	ToKeyVaultAndSecretReferencePtrOutputWithContext(context.Context) KeyVaultAndSecretReferencePtrOutput
}

type keyVaultAndSecretReferencePtrType KeyVaultAndSecretReferenceArgs

func KeyVaultAndSecretReferencePtr(v *KeyVaultAndSecretReferenceArgs) KeyVaultAndSecretReferencePtrInput {
	return (*keyVaultAndSecretReferencePtrType)(v)
}

func (*keyVaultAndSecretReferencePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**KeyVaultAndSecretReference)(nil)).Elem()
}

func (i *keyVaultAndSecretReferencePtrType) ToKeyVaultAndSecretReferencePtrOutput() KeyVaultAndSecretReferencePtrOutput {
	return i.ToKeyVaultAndSecretReferencePtrOutputWithContext(context.Background())
}

func (i *keyVaultAndSecretReferencePtrType) ToKeyVaultAndSecretReferencePtrOutputWithContext(ctx context.Context) KeyVaultAndSecretReferencePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KeyVaultAndSecretReferencePtrOutput)
}

// Key Vault Secret Url and vault id of the encryption key
type KeyVaultAndSecretReferenceOutput struct{ *pulumi.OutputState }

func (KeyVaultAndSecretReferenceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KeyVaultAndSecretReference)(nil)).Elem()
}

func (o KeyVaultAndSecretReferenceOutput) ToKeyVaultAndSecretReferenceOutput() KeyVaultAndSecretReferenceOutput {
	return o
}

func (o KeyVaultAndSecretReferenceOutput) ToKeyVaultAndSecretReferenceOutputWithContext(ctx context.Context) KeyVaultAndSecretReferenceOutput {
	return o
}

func (o KeyVaultAndSecretReferenceOutput) ToKeyVaultAndSecretReferencePtrOutput() KeyVaultAndSecretReferencePtrOutput {
	return o.ToKeyVaultAndSecretReferencePtrOutputWithContext(context.Background())
}

func (o KeyVaultAndSecretReferenceOutput) ToKeyVaultAndSecretReferencePtrOutputWithContext(ctx context.Context) KeyVaultAndSecretReferencePtrOutput {
	return o.ApplyT(func(v KeyVaultAndSecretReference) *KeyVaultAndSecretReference {
		return &v
	}).(KeyVaultAndSecretReferencePtrOutput)
}

// Url pointing to a key or secret in KeyVault
func (o KeyVaultAndSecretReferenceOutput) SecretUrl() pulumi.StringOutput {
	return o.ApplyT(func(v KeyVaultAndSecretReference) string { return v.SecretUrl }).(pulumi.StringOutput)
}

// Resource id of the KeyVault containing the key or secret
func (o KeyVaultAndSecretReferenceOutput) SourceVault() SourceVaultOutput {
	return o.ApplyT(func(v KeyVaultAndSecretReference) SourceVault { return v.SourceVault }).(SourceVaultOutput)
}

type KeyVaultAndSecretReferencePtrOutput struct{ *pulumi.OutputState }

func (KeyVaultAndSecretReferencePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KeyVaultAndSecretReference)(nil)).Elem()
}

func (o KeyVaultAndSecretReferencePtrOutput) ToKeyVaultAndSecretReferencePtrOutput() KeyVaultAndSecretReferencePtrOutput {
	return o
}

func (o KeyVaultAndSecretReferencePtrOutput) ToKeyVaultAndSecretReferencePtrOutputWithContext(ctx context.Context) KeyVaultAndSecretReferencePtrOutput {
	return o
}

func (o KeyVaultAndSecretReferencePtrOutput) Elem() KeyVaultAndSecretReferenceOutput {
	return o.ApplyT(func(v *KeyVaultAndSecretReference) KeyVaultAndSecretReference { return *v }).(KeyVaultAndSecretReferenceOutput)
}

// Url pointing to a key or secret in KeyVault
func (o KeyVaultAndSecretReferencePtrOutput) SecretUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KeyVaultAndSecretReference) *string {
		if v == nil {
			return nil
		}
		return &v.SecretUrl
	}).(pulumi.StringPtrOutput)
}

// Resource id of the KeyVault containing the key or secret
func (o KeyVaultAndSecretReferencePtrOutput) SourceVault() SourceVaultPtrOutput {
	return o.ApplyT(func(v *KeyVaultAndSecretReference) *SourceVault {
		if v == nil {
			return nil
		}
		return &v.SourceVault
	}).(SourceVaultPtrOutput)
}

// Key Vault Secret Url and vault id of the encryption key
type KeyVaultAndSecretReferenceInvokeResponse struct {
	// Url pointing to a key or secret in KeyVault
	SecretUrl string `pulumi:"secretUrl"`
	// Resource id of the KeyVault containing the key or secret
	SourceVault SourceVaultInvokeResponse `pulumi:"sourceVault"`
}

// KeyVaultAndSecretReferenceInvokeResponseInput is an input type that accepts KeyVaultAndSecretReferenceInvokeResponseArgs and KeyVaultAndSecretReferenceInvokeResponseOutput values.
// You can construct a concrete instance of `KeyVaultAndSecretReferenceInvokeResponseInput` via:
//
//          KeyVaultAndSecretReferenceInvokeResponseArgs{...}
type KeyVaultAndSecretReferenceInvokeResponseInput interface {
	pulumi.Input

	ToKeyVaultAndSecretReferenceInvokeResponseOutput() KeyVaultAndSecretReferenceInvokeResponseOutput
	ToKeyVaultAndSecretReferenceInvokeResponseOutputWithContext(context.Context) KeyVaultAndSecretReferenceInvokeResponseOutput
}

// Key Vault Secret Url and vault id of the encryption key
type KeyVaultAndSecretReferenceInvokeResponseArgs struct {
	// Url pointing to a key or secret in KeyVault
	SecretUrl pulumi.StringInput `pulumi:"secretUrl"`
	// Resource id of the KeyVault containing the key or secret
	SourceVault SourceVaultInvokeResponseInput `pulumi:"sourceVault"`
}

func (KeyVaultAndSecretReferenceInvokeResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KeyVaultAndSecretReferenceInvokeResponse)(nil)).Elem()
}

func (i KeyVaultAndSecretReferenceInvokeResponseArgs) ToKeyVaultAndSecretReferenceInvokeResponseOutput() KeyVaultAndSecretReferenceInvokeResponseOutput {
	return i.ToKeyVaultAndSecretReferenceInvokeResponseOutputWithContext(context.Background())
}

func (i KeyVaultAndSecretReferenceInvokeResponseArgs) ToKeyVaultAndSecretReferenceInvokeResponseOutputWithContext(ctx context.Context) KeyVaultAndSecretReferenceInvokeResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KeyVaultAndSecretReferenceInvokeResponseOutput)
}

func (i KeyVaultAndSecretReferenceInvokeResponseArgs) ToKeyVaultAndSecretReferenceInvokeResponsePtrOutput() KeyVaultAndSecretReferenceInvokeResponsePtrOutput {
	return i.ToKeyVaultAndSecretReferenceInvokeResponsePtrOutputWithContext(context.Background())
}

func (i KeyVaultAndSecretReferenceInvokeResponseArgs) ToKeyVaultAndSecretReferenceInvokeResponsePtrOutputWithContext(ctx context.Context) KeyVaultAndSecretReferenceInvokeResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KeyVaultAndSecretReferenceInvokeResponseOutput).ToKeyVaultAndSecretReferenceInvokeResponsePtrOutputWithContext(ctx)
}

// KeyVaultAndSecretReferenceInvokeResponsePtrInput is an input type that accepts KeyVaultAndSecretReferenceInvokeResponseArgs, KeyVaultAndSecretReferenceInvokeResponsePtr and KeyVaultAndSecretReferenceInvokeResponsePtrOutput values.
// You can construct a concrete instance of `KeyVaultAndSecretReferenceInvokeResponsePtrInput` via:
//
//          KeyVaultAndSecretReferenceInvokeResponseArgs{...}
//
//  or:
//
//          nil
type KeyVaultAndSecretReferenceInvokeResponsePtrInput interface {
	pulumi.Input

	ToKeyVaultAndSecretReferenceInvokeResponsePtrOutput() KeyVaultAndSecretReferenceInvokeResponsePtrOutput
	ToKeyVaultAndSecretReferenceInvokeResponsePtrOutputWithContext(context.Context) KeyVaultAndSecretReferenceInvokeResponsePtrOutput
}

type keyVaultAndSecretReferenceInvokeResponsePtrType KeyVaultAndSecretReferenceInvokeResponseArgs

func KeyVaultAndSecretReferenceInvokeResponsePtr(v *KeyVaultAndSecretReferenceInvokeResponseArgs) KeyVaultAndSecretReferenceInvokeResponsePtrInput {
	return (*keyVaultAndSecretReferenceInvokeResponsePtrType)(v)
}

func (*keyVaultAndSecretReferenceInvokeResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**KeyVaultAndSecretReferenceInvokeResponse)(nil)).Elem()
}

func (i *keyVaultAndSecretReferenceInvokeResponsePtrType) ToKeyVaultAndSecretReferenceInvokeResponsePtrOutput() KeyVaultAndSecretReferenceInvokeResponsePtrOutput {
	return i.ToKeyVaultAndSecretReferenceInvokeResponsePtrOutputWithContext(context.Background())
}

func (i *keyVaultAndSecretReferenceInvokeResponsePtrType) ToKeyVaultAndSecretReferenceInvokeResponsePtrOutputWithContext(ctx context.Context) KeyVaultAndSecretReferenceInvokeResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KeyVaultAndSecretReferenceInvokeResponsePtrOutput)
}

// Key Vault Secret Url and vault id of the encryption key
type KeyVaultAndSecretReferenceInvokeResponseOutput struct{ *pulumi.OutputState }

func (KeyVaultAndSecretReferenceInvokeResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KeyVaultAndSecretReferenceInvokeResponse)(nil)).Elem()
}

func (o KeyVaultAndSecretReferenceInvokeResponseOutput) ToKeyVaultAndSecretReferenceInvokeResponseOutput() KeyVaultAndSecretReferenceInvokeResponseOutput {
	return o
}

func (o KeyVaultAndSecretReferenceInvokeResponseOutput) ToKeyVaultAndSecretReferenceInvokeResponseOutputWithContext(ctx context.Context) KeyVaultAndSecretReferenceInvokeResponseOutput {
	return o
}

func (o KeyVaultAndSecretReferenceInvokeResponseOutput) ToKeyVaultAndSecretReferenceInvokeResponsePtrOutput() KeyVaultAndSecretReferenceInvokeResponsePtrOutput {
	return o.ToKeyVaultAndSecretReferenceInvokeResponsePtrOutputWithContext(context.Background())
}

func (o KeyVaultAndSecretReferenceInvokeResponseOutput) ToKeyVaultAndSecretReferenceInvokeResponsePtrOutputWithContext(ctx context.Context) KeyVaultAndSecretReferenceInvokeResponsePtrOutput {
	return o.ApplyT(func(v KeyVaultAndSecretReferenceInvokeResponse) *KeyVaultAndSecretReferenceInvokeResponse {
		return &v
	}).(KeyVaultAndSecretReferenceInvokeResponsePtrOutput)
}

// Url pointing to a key or secret in KeyVault
func (o KeyVaultAndSecretReferenceInvokeResponseOutput) SecretUrl() pulumi.StringOutput {
	return o.ApplyT(func(v KeyVaultAndSecretReferenceInvokeResponse) string { return v.SecretUrl }).(pulumi.StringOutput)
}

// Resource id of the KeyVault containing the key or secret
func (o KeyVaultAndSecretReferenceInvokeResponseOutput) SourceVault() SourceVaultInvokeResponseOutput {
	return o.ApplyT(func(v KeyVaultAndSecretReferenceInvokeResponse) SourceVaultInvokeResponse { return v.SourceVault }).(SourceVaultInvokeResponseOutput)
}

type KeyVaultAndSecretReferenceInvokeResponsePtrOutput struct{ *pulumi.OutputState }

func (KeyVaultAndSecretReferenceInvokeResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KeyVaultAndSecretReferenceInvokeResponse)(nil)).Elem()
}

func (o KeyVaultAndSecretReferenceInvokeResponsePtrOutput) ToKeyVaultAndSecretReferenceInvokeResponsePtrOutput() KeyVaultAndSecretReferenceInvokeResponsePtrOutput {
	return o
}

func (o KeyVaultAndSecretReferenceInvokeResponsePtrOutput) ToKeyVaultAndSecretReferenceInvokeResponsePtrOutputWithContext(ctx context.Context) KeyVaultAndSecretReferenceInvokeResponsePtrOutput {
	return o
}

func (o KeyVaultAndSecretReferenceInvokeResponsePtrOutput) Elem() KeyVaultAndSecretReferenceInvokeResponseOutput {
	return o.ApplyT(func(v *KeyVaultAndSecretReferenceInvokeResponse) KeyVaultAndSecretReferenceInvokeResponse { return *v }).(KeyVaultAndSecretReferenceInvokeResponseOutput)
}

// Url pointing to a key or secret in KeyVault
func (o KeyVaultAndSecretReferenceInvokeResponsePtrOutput) SecretUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KeyVaultAndSecretReferenceInvokeResponse) *string {
		if v == nil {
			return nil
		}
		return &v.SecretUrl
	}).(pulumi.StringPtrOutput)
}

// Resource id of the KeyVault containing the key or secret
func (o KeyVaultAndSecretReferenceInvokeResponsePtrOutput) SourceVault() SourceVaultInvokeResponsePtrOutput {
	return o.ApplyT(func(v *KeyVaultAndSecretReferenceInvokeResponse) *SourceVaultInvokeResponse {
		if v == nil {
			return nil
		}
		return &v.SourceVault
	}).(SourceVaultInvokeResponsePtrOutput)
}

// Key Vault Secret Url and vault id of the encryption key
type KeyVaultAndSecretReferenceResponse struct {
	// Url pointing to a key or secret in KeyVault
	SecretUrl string `pulumi:"secretUrl"`
	// Resource id of the KeyVault containing the key or secret
	SourceVault SourceVaultResponse `pulumi:"sourceVault"`
}

// KeyVaultAndSecretReferenceResponseInput is an input type that accepts KeyVaultAndSecretReferenceResponseArgs and KeyVaultAndSecretReferenceResponseOutput values.
// You can construct a concrete instance of `KeyVaultAndSecretReferenceResponseInput` via:
//
//          KeyVaultAndSecretReferenceResponseArgs{...}
type KeyVaultAndSecretReferenceResponseInput interface {
	pulumi.Input

	ToKeyVaultAndSecretReferenceResponseOutput() KeyVaultAndSecretReferenceResponseOutput
	ToKeyVaultAndSecretReferenceResponseOutputWithContext(context.Context) KeyVaultAndSecretReferenceResponseOutput
}

// Key Vault Secret Url and vault id of the encryption key
type KeyVaultAndSecretReferenceResponseArgs struct {
	// Url pointing to a key or secret in KeyVault
	SecretUrl pulumi.StringInput `pulumi:"secretUrl"`
	// Resource id of the KeyVault containing the key or secret
	SourceVault SourceVaultResponseInput `pulumi:"sourceVault"`
}

func (KeyVaultAndSecretReferenceResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KeyVaultAndSecretReferenceResponse)(nil)).Elem()
}

func (i KeyVaultAndSecretReferenceResponseArgs) ToKeyVaultAndSecretReferenceResponseOutput() KeyVaultAndSecretReferenceResponseOutput {
	return i.ToKeyVaultAndSecretReferenceResponseOutputWithContext(context.Background())
}

func (i KeyVaultAndSecretReferenceResponseArgs) ToKeyVaultAndSecretReferenceResponseOutputWithContext(ctx context.Context) KeyVaultAndSecretReferenceResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KeyVaultAndSecretReferenceResponseOutput)
}

func (i KeyVaultAndSecretReferenceResponseArgs) ToKeyVaultAndSecretReferenceResponsePtrOutput() KeyVaultAndSecretReferenceResponsePtrOutput {
	return i.ToKeyVaultAndSecretReferenceResponsePtrOutputWithContext(context.Background())
}

func (i KeyVaultAndSecretReferenceResponseArgs) ToKeyVaultAndSecretReferenceResponsePtrOutputWithContext(ctx context.Context) KeyVaultAndSecretReferenceResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KeyVaultAndSecretReferenceResponseOutput).ToKeyVaultAndSecretReferenceResponsePtrOutputWithContext(ctx)
}

// KeyVaultAndSecretReferenceResponsePtrInput is an input type that accepts KeyVaultAndSecretReferenceResponseArgs, KeyVaultAndSecretReferenceResponsePtr and KeyVaultAndSecretReferenceResponsePtrOutput values.
// You can construct a concrete instance of `KeyVaultAndSecretReferenceResponsePtrInput` via:
//
//          KeyVaultAndSecretReferenceResponseArgs{...}
//
//  or:
//
//          nil
type KeyVaultAndSecretReferenceResponsePtrInput interface {
	pulumi.Input

	ToKeyVaultAndSecretReferenceResponsePtrOutput() KeyVaultAndSecretReferenceResponsePtrOutput
	ToKeyVaultAndSecretReferenceResponsePtrOutputWithContext(context.Context) KeyVaultAndSecretReferenceResponsePtrOutput
}

type keyVaultAndSecretReferenceResponsePtrType KeyVaultAndSecretReferenceResponseArgs

func KeyVaultAndSecretReferenceResponsePtr(v *KeyVaultAndSecretReferenceResponseArgs) KeyVaultAndSecretReferenceResponsePtrInput {
	return (*keyVaultAndSecretReferenceResponsePtrType)(v)
}

func (*keyVaultAndSecretReferenceResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**KeyVaultAndSecretReferenceResponse)(nil)).Elem()
}

func (i *keyVaultAndSecretReferenceResponsePtrType) ToKeyVaultAndSecretReferenceResponsePtrOutput() KeyVaultAndSecretReferenceResponsePtrOutput {
	return i.ToKeyVaultAndSecretReferenceResponsePtrOutputWithContext(context.Background())
}

func (i *keyVaultAndSecretReferenceResponsePtrType) ToKeyVaultAndSecretReferenceResponsePtrOutputWithContext(ctx context.Context) KeyVaultAndSecretReferenceResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KeyVaultAndSecretReferenceResponsePtrOutput)
}

// Key Vault Secret Url and vault id of the encryption key
type KeyVaultAndSecretReferenceResponseOutput struct{ *pulumi.OutputState }

func (KeyVaultAndSecretReferenceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KeyVaultAndSecretReferenceResponse)(nil)).Elem()
}

func (o KeyVaultAndSecretReferenceResponseOutput) ToKeyVaultAndSecretReferenceResponseOutput() KeyVaultAndSecretReferenceResponseOutput {
	return o
}

func (o KeyVaultAndSecretReferenceResponseOutput) ToKeyVaultAndSecretReferenceResponseOutputWithContext(ctx context.Context) KeyVaultAndSecretReferenceResponseOutput {
	return o
}

func (o KeyVaultAndSecretReferenceResponseOutput) ToKeyVaultAndSecretReferenceResponsePtrOutput() KeyVaultAndSecretReferenceResponsePtrOutput {
	return o.ToKeyVaultAndSecretReferenceResponsePtrOutputWithContext(context.Background())
}

func (o KeyVaultAndSecretReferenceResponseOutput) ToKeyVaultAndSecretReferenceResponsePtrOutputWithContext(ctx context.Context) KeyVaultAndSecretReferenceResponsePtrOutput {
	return o.ApplyT(func(v KeyVaultAndSecretReferenceResponse) *KeyVaultAndSecretReferenceResponse {
		return &v
	}).(KeyVaultAndSecretReferenceResponsePtrOutput)
}

// Url pointing to a key or secret in KeyVault
func (o KeyVaultAndSecretReferenceResponseOutput) SecretUrl() pulumi.StringOutput {
	return o.ApplyT(func(v KeyVaultAndSecretReferenceResponse) string { return v.SecretUrl }).(pulumi.StringOutput)
}

// Resource id of the KeyVault containing the key or secret
func (o KeyVaultAndSecretReferenceResponseOutput) SourceVault() SourceVaultResponseOutput {
	return o.ApplyT(func(v KeyVaultAndSecretReferenceResponse) SourceVaultResponse { return v.SourceVault }).(SourceVaultResponseOutput)
}

type KeyVaultAndSecretReferenceResponsePtrOutput struct{ *pulumi.OutputState }

func (KeyVaultAndSecretReferenceResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KeyVaultAndSecretReferenceResponse)(nil)).Elem()
}

func (o KeyVaultAndSecretReferenceResponsePtrOutput) ToKeyVaultAndSecretReferenceResponsePtrOutput() KeyVaultAndSecretReferenceResponsePtrOutput {
	return o
}

func (o KeyVaultAndSecretReferenceResponsePtrOutput) ToKeyVaultAndSecretReferenceResponsePtrOutputWithContext(ctx context.Context) KeyVaultAndSecretReferenceResponsePtrOutput {
	return o
}

func (o KeyVaultAndSecretReferenceResponsePtrOutput) Elem() KeyVaultAndSecretReferenceResponseOutput {
	return o.ApplyT(func(v *KeyVaultAndSecretReferenceResponse) KeyVaultAndSecretReferenceResponse { return *v }).(KeyVaultAndSecretReferenceResponseOutput)
}

// Url pointing to a key or secret in KeyVault
func (o KeyVaultAndSecretReferenceResponsePtrOutput) SecretUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KeyVaultAndSecretReferenceResponse) *string {
		if v == nil {
			return nil
		}
		return &v.SecretUrl
	}).(pulumi.StringPtrOutput)
}

// Resource id of the KeyVault containing the key or secret
func (o KeyVaultAndSecretReferenceResponsePtrOutput) SourceVault() SourceVaultResponsePtrOutput {
	return o.ApplyT(func(v *KeyVaultAndSecretReferenceResponse) *SourceVaultResponse {
		if v == nil {
			return nil
		}
		return &v.SourceVault
	}).(SourceVaultResponsePtrOutput)
}

// The snapshots sku name. Can be Standard_LRS, Premium_LRS, or Standard_ZRS.
type SnapshotSku struct {
	// The sku name.
	Name *string `pulumi:"name"`
}

// SnapshotSkuInput is an input type that accepts SnapshotSkuArgs and SnapshotSkuOutput values.
// You can construct a concrete instance of `SnapshotSkuInput` via:
//
//          SnapshotSkuArgs{...}
type SnapshotSkuInput interface {
	pulumi.Input

	ToSnapshotSkuOutput() SnapshotSkuOutput
	ToSnapshotSkuOutputWithContext(context.Context) SnapshotSkuOutput
}

// The snapshots sku name. Can be Standard_LRS, Premium_LRS, or Standard_ZRS.
type SnapshotSkuArgs struct {
	// The sku name.
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (SnapshotSkuArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SnapshotSku)(nil)).Elem()
}

func (i SnapshotSkuArgs) ToSnapshotSkuOutput() SnapshotSkuOutput {
	return i.ToSnapshotSkuOutputWithContext(context.Background())
}

func (i SnapshotSkuArgs) ToSnapshotSkuOutputWithContext(ctx context.Context) SnapshotSkuOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SnapshotSkuOutput)
}

func (i SnapshotSkuArgs) ToSnapshotSkuPtrOutput() SnapshotSkuPtrOutput {
	return i.ToSnapshotSkuPtrOutputWithContext(context.Background())
}

func (i SnapshotSkuArgs) ToSnapshotSkuPtrOutputWithContext(ctx context.Context) SnapshotSkuPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SnapshotSkuOutput).ToSnapshotSkuPtrOutputWithContext(ctx)
}

// SnapshotSkuPtrInput is an input type that accepts SnapshotSkuArgs, SnapshotSkuPtr and SnapshotSkuPtrOutput values.
// You can construct a concrete instance of `SnapshotSkuPtrInput` via:
//
//          SnapshotSkuArgs{...}
//
//  or:
//
//          nil
type SnapshotSkuPtrInput interface {
	pulumi.Input

	ToSnapshotSkuPtrOutput() SnapshotSkuPtrOutput
	ToSnapshotSkuPtrOutputWithContext(context.Context) SnapshotSkuPtrOutput
}

type snapshotSkuPtrType SnapshotSkuArgs

func SnapshotSkuPtr(v *SnapshotSkuArgs) SnapshotSkuPtrInput {
	return (*snapshotSkuPtrType)(v)
}

func (*snapshotSkuPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SnapshotSku)(nil)).Elem()
}

func (i *snapshotSkuPtrType) ToSnapshotSkuPtrOutput() SnapshotSkuPtrOutput {
	return i.ToSnapshotSkuPtrOutputWithContext(context.Background())
}

func (i *snapshotSkuPtrType) ToSnapshotSkuPtrOutputWithContext(ctx context.Context) SnapshotSkuPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SnapshotSkuPtrOutput)
}

// The snapshots sku name. Can be Standard_LRS, Premium_LRS, or Standard_ZRS.
type SnapshotSkuOutput struct{ *pulumi.OutputState }

func (SnapshotSkuOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SnapshotSku)(nil)).Elem()
}

func (o SnapshotSkuOutput) ToSnapshotSkuOutput() SnapshotSkuOutput {
	return o
}

func (o SnapshotSkuOutput) ToSnapshotSkuOutputWithContext(ctx context.Context) SnapshotSkuOutput {
	return o
}

func (o SnapshotSkuOutput) ToSnapshotSkuPtrOutput() SnapshotSkuPtrOutput {
	return o.ToSnapshotSkuPtrOutputWithContext(context.Background())
}

func (o SnapshotSkuOutput) ToSnapshotSkuPtrOutputWithContext(ctx context.Context) SnapshotSkuPtrOutput {
	return o.ApplyT(func(v SnapshotSku) *SnapshotSku {
		return &v
	}).(SnapshotSkuPtrOutput)
}

// The sku name.
func (o SnapshotSkuOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SnapshotSku) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type SnapshotSkuPtrOutput struct{ *pulumi.OutputState }

func (SnapshotSkuPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SnapshotSku)(nil)).Elem()
}

func (o SnapshotSkuPtrOutput) ToSnapshotSkuPtrOutput() SnapshotSkuPtrOutput {
	return o
}

func (o SnapshotSkuPtrOutput) ToSnapshotSkuPtrOutputWithContext(ctx context.Context) SnapshotSkuPtrOutput {
	return o
}

func (o SnapshotSkuPtrOutput) Elem() SnapshotSkuOutput {
	return o.ApplyT(func(v *SnapshotSku) SnapshotSku { return *v }).(SnapshotSkuOutput)
}

// The sku name.
func (o SnapshotSkuPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SnapshotSku) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// The snapshots sku name. Can be Standard_LRS, Premium_LRS, or Standard_ZRS.
type SnapshotSkuInvokeResponse struct {
	// The sku name.
	Name *string `pulumi:"name"`
	// The sku tier.
	Tier string `pulumi:"tier"`
}

// SnapshotSkuInvokeResponseInput is an input type that accepts SnapshotSkuInvokeResponseArgs and SnapshotSkuInvokeResponseOutput values.
// You can construct a concrete instance of `SnapshotSkuInvokeResponseInput` via:
//
//          SnapshotSkuInvokeResponseArgs{...}
type SnapshotSkuInvokeResponseInput interface {
	pulumi.Input

	ToSnapshotSkuInvokeResponseOutput() SnapshotSkuInvokeResponseOutput
	ToSnapshotSkuInvokeResponseOutputWithContext(context.Context) SnapshotSkuInvokeResponseOutput
}

// The snapshots sku name. Can be Standard_LRS, Premium_LRS, or Standard_ZRS.
type SnapshotSkuInvokeResponseArgs struct {
	// The sku name.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// The sku tier.
	Tier pulumi.StringInput `pulumi:"tier"`
}

func (SnapshotSkuInvokeResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SnapshotSkuInvokeResponse)(nil)).Elem()
}

func (i SnapshotSkuInvokeResponseArgs) ToSnapshotSkuInvokeResponseOutput() SnapshotSkuInvokeResponseOutput {
	return i.ToSnapshotSkuInvokeResponseOutputWithContext(context.Background())
}

func (i SnapshotSkuInvokeResponseArgs) ToSnapshotSkuInvokeResponseOutputWithContext(ctx context.Context) SnapshotSkuInvokeResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SnapshotSkuInvokeResponseOutput)
}

// The snapshots sku name. Can be Standard_LRS, Premium_LRS, or Standard_ZRS.
type SnapshotSkuInvokeResponseOutput struct{ *pulumi.OutputState }

func (SnapshotSkuInvokeResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SnapshotSkuInvokeResponse)(nil)).Elem()
}

func (o SnapshotSkuInvokeResponseOutput) ToSnapshotSkuInvokeResponseOutput() SnapshotSkuInvokeResponseOutput {
	return o
}

func (o SnapshotSkuInvokeResponseOutput) ToSnapshotSkuInvokeResponseOutputWithContext(ctx context.Context) SnapshotSkuInvokeResponseOutput {
	return o
}

// The sku name.
func (o SnapshotSkuInvokeResponseOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SnapshotSkuInvokeResponse) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The sku tier.
func (o SnapshotSkuInvokeResponseOutput) Tier() pulumi.StringOutput {
	return o.ApplyT(func(v SnapshotSkuInvokeResponse) string { return v.Tier }).(pulumi.StringOutput)
}

// The snapshots sku name. Can be Standard_LRS, Premium_LRS, or Standard_ZRS.
type SnapshotSkuResponse struct {
	// The sku name.
	Name *string `pulumi:"name"`
	// The sku tier.
	Tier string `pulumi:"tier"`
}

// SnapshotSkuResponseInput is an input type that accepts SnapshotSkuResponseArgs and SnapshotSkuResponseOutput values.
// You can construct a concrete instance of `SnapshotSkuResponseInput` via:
//
//          SnapshotSkuResponseArgs{...}
type SnapshotSkuResponseInput interface {
	pulumi.Input

	ToSnapshotSkuResponseOutput() SnapshotSkuResponseOutput
	ToSnapshotSkuResponseOutputWithContext(context.Context) SnapshotSkuResponseOutput
}

// The snapshots sku name. Can be Standard_LRS, Premium_LRS, or Standard_ZRS.
type SnapshotSkuResponseArgs struct {
	// The sku name.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// The sku tier.
	Tier pulumi.StringInput `pulumi:"tier"`
}

func (SnapshotSkuResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SnapshotSkuResponse)(nil)).Elem()
}

func (i SnapshotSkuResponseArgs) ToSnapshotSkuResponseOutput() SnapshotSkuResponseOutput {
	return i.ToSnapshotSkuResponseOutputWithContext(context.Background())
}

func (i SnapshotSkuResponseArgs) ToSnapshotSkuResponseOutputWithContext(ctx context.Context) SnapshotSkuResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SnapshotSkuResponseOutput)
}

func (i SnapshotSkuResponseArgs) ToSnapshotSkuResponsePtrOutput() SnapshotSkuResponsePtrOutput {
	return i.ToSnapshotSkuResponsePtrOutputWithContext(context.Background())
}

func (i SnapshotSkuResponseArgs) ToSnapshotSkuResponsePtrOutputWithContext(ctx context.Context) SnapshotSkuResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SnapshotSkuResponseOutput).ToSnapshotSkuResponsePtrOutputWithContext(ctx)
}

// SnapshotSkuResponsePtrInput is an input type that accepts SnapshotSkuResponseArgs, SnapshotSkuResponsePtr and SnapshotSkuResponsePtrOutput values.
// You can construct a concrete instance of `SnapshotSkuResponsePtrInput` via:
//
//          SnapshotSkuResponseArgs{...}
//
//  or:
//
//          nil
type SnapshotSkuResponsePtrInput interface {
	pulumi.Input

	ToSnapshotSkuResponsePtrOutput() SnapshotSkuResponsePtrOutput
	ToSnapshotSkuResponsePtrOutputWithContext(context.Context) SnapshotSkuResponsePtrOutput
}

type snapshotSkuResponsePtrType SnapshotSkuResponseArgs

func SnapshotSkuResponsePtr(v *SnapshotSkuResponseArgs) SnapshotSkuResponsePtrInput {
	return (*snapshotSkuResponsePtrType)(v)
}

func (*snapshotSkuResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SnapshotSkuResponse)(nil)).Elem()
}

func (i *snapshotSkuResponsePtrType) ToSnapshotSkuResponsePtrOutput() SnapshotSkuResponsePtrOutput {
	return i.ToSnapshotSkuResponsePtrOutputWithContext(context.Background())
}

func (i *snapshotSkuResponsePtrType) ToSnapshotSkuResponsePtrOutputWithContext(ctx context.Context) SnapshotSkuResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SnapshotSkuResponsePtrOutput)
}

// The snapshots sku name. Can be Standard_LRS, Premium_LRS, or Standard_ZRS.
type SnapshotSkuResponseOutput struct{ *pulumi.OutputState }

func (SnapshotSkuResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SnapshotSkuResponse)(nil)).Elem()
}

func (o SnapshotSkuResponseOutput) ToSnapshotSkuResponseOutput() SnapshotSkuResponseOutput {
	return o
}

func (o SnapshotSkuResponseOutput) ToSnapshotSkuResponseOutputWithContext(ctx context.Context) SnapshotSkuResponseOutput {
	return o
}

func (o SnapshotSkuResponseOutput) ToSnapshotSkuResponsePtrOutput() SnapshotSkuResponsePtrOutput {
	return o.ToSnapshotSkuResponsePtrOutputWithContext(context.Background())
}

func (o SnapshotSkuResponseOutput) ToSnapshotSkuResponsePtrOutputWithContext(ctx context.Context) SnapshotSkuResponsePtrOutput {
	return o.ApplyT(func(v SnapshotSkuResponse) *SnapshotSkuResponse {
		return &v
	}).(SnapshotSkuResponsePtrOutput)
}

// The sku name.
func (o SnapshotSkuResponseOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SnapshotSkuResponse) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The sku tier.
func (o SnapshotSkuResponseOutput) Tier() pulumi.StringOutput {
	return o.ApplyT(func(v SnapshotSkuResponse) string { return v.Tier }).(pulumi.StringOutput)
}

type SnapshotSkuResponsePtrOutput struct{ *pulumi.OutputState }

func (SnapshotSkuResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SnapshotSkuResponse)(nil)).Elem()
}

func (o SnapshotSkuResponsePtrOutput) ToSnapshotSkuResponsePtrOutput() SnapshotSkuResponsePtrOutput {
	return o
}

func (o SnapshotSkuResponsePtrOutput) ToSnapshotSkuResponsePtrOutputWithContext(ctx context.Context) SnapshotSkuResponsePtrOutput {
	return o
}

func (o SnapshotSkuResponsePtrOutput) Elem() SnapshotSkuResponseOutput {
	return o.ApplyT(func(v *SnapshotSkuResponse) SnapshotSkuResponse { return *v }).(SnapshotSkuResponseOutput)
}

// The sku name.
func (o SnapshotSkuResponsePtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SnapshotSkuResponse) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// The sku tier.
func (o SnapshotSkuResponsePtrOutput) Tier() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SnapshotSkuResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Tier
	}).(pulumi.StringPtrOutput)
}

// The vault id is an Azure Resource Manager Resource id in the form /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.KeyVault/vaults/{vaultName}
type SourceVault struct {
	// Resource Id
	Id *string `pulumi:"id"`
}

// SourceVaultInput is an input type that accepts SourceVaultArgs and SourceVaultOutput values.
// You can construct a concrete instance of `SourceVaultInput` via:
//
//          SourceVaultArgs{...}
type SourceVaultInput interface {
	pulumi.Input

	ToSourceVaultOutput() SourceVaultOutput
	ToSourceVaultOutputWithContext(context.Context) SourceVaultOutput
}

// The vault id is an Azure Resource Manager Resource id in the form /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.KeyVault/vaults/{vaultName}
type SourceVaultArgs struct {
	// Resource Id
	Id pulumi.StringPtrInput `pulumi:"id"`
}

func (SourceVaultArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SourceVault)(nil)).Elem()
}

func (i SourceVaultArgs) ToSourceVaultOutput() SourceVaultOutput {
	return i.ToSourceVaultOutputWithContext(context.Background())
}

func (i SourceVaultArgs) ToSourceVaultOutputWithContext(ctx context.Context) SourceVaultOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SourceVaultOutput)
}

func (i SourceVaultArgs) ToSourceVaultPtrOutput() SourceVaultPtrOutput {
	return i.ToSourceVaultPtrOutputWithContext(context.Background())
}

func (i SourceVaultArgs) ToSourceVaultPtrOutputWithContext(ctx context.Context) SourceVaultPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SourceVaultOutput).ToSourceVaultPtrOutputWithContext(ctx)
}

// SourceVaultPtrInput is an input type that accepts SourceVaultArgs, SourceVaultPtr and SourceVaultPtrOutput values.
// You can construct a concrete instance of `SourceVaultPtrInput` via:
//
//          SourceVaultArgs{...}
//
//  or:
//
//          nil
type SourceVaultPtrInput interface {
	pulumi.Input

	ToSourceVaultPtrOutput() SourceVaultPtrOutput
	ToSourceVaultPtrOutputWithContext(context.Context) SourceVaultPtrOutput
}

type sourceVaultPtrType SourceVaultArgs

func SourceVaultPtr(v *SourceVaultArgs) SourceVaultPtrInput {
	return (*sourceVaultPtrType)(v)
}

func (*sourceVaultPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SourceVault)(nil)).Elem()
}

func (i *sourceVaultPtrType) ToSourceVaultPtrOutput() SourceVaultPtrOutput {
	return i.ToSourceVaultPtrOutputWithContext(context.Background())
}

func (i *sourceVaultPtrType) ToSourceVaultPtrOutputWithContext(ctx context.Context) SourceVaultPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SourceVaultPtrOutput)
}

// The vault id is an Azure Resource Manager Resource id in the form /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.KeyVault/vaults/{vaultName}
type SourceVaultOutput struct{ *pulumi.OutputState }

func (SourceVaultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SourceVault)(nil)).Elem()
}

func (o SourceVaultOutput) ToSourceVaultOutput() SourceVaultOutput {
	return o
}

func (o SourceVaultOutput) ToSourceVaultOutputWithContext(ctx context.Context) SourceVaultOutput {
	return o
}

func (o SourceVaultOutput) ToSourceVaultPtrOutput() SourceVaultPtrOutput {
	return o.ToSourceVaultPtrOutputWithContext(context.Background())
}

func (o SourceVaultOutput) ToSourceVaultPtrOutputWithContext(ctx context.Context) SourceVaultPtrOutput {
	return o.ApplyT(func(v SourceVault) *SourceVault {
		return &v
	}).(SourceVaultPtrOutput)
}

// Resource Id
func (o SourceVaultOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SourceVault) *string { return v.Id }).(pulumi.StringPtrOutput)
}

type SourceVaultPtrOutput struct{ *pulumi.OutputState }

func (SourceVaultPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SourceVault)(nil)).Elem()
}

func (o SourceVaultPtrOutput) ToSourceVaultPtrOutput() SourceVaultPtrOutput {
	return o
}

func (o SourceVaultPtrOutput) ToSourceVaultPtrOutputWithContext(ctx context.Context) SourceVaultPtrOutput {
	return o
}

func (o SourceVaultPtrOutput) Elem() SourceVaultOutput {
	return o.ApplyT(func(v *SourceVault) SourceVault { return *v }).(SourceVaultOutput)
}

// Resource Id
func (o SourceVaultPtrOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SourceVault) *string {
		if v == nil {
			return nil
		}
		return v.Id
	}).(pulumi.StringPtrOutput)
}

// The vault id is an Azure Resource Manager Resource id in the form /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.KeyVault/vaults/{vaultName}
type SourceVaultInvokeResponse struct {
	// Resource Id
	Id *string `pulumi:"id"`
}

// SourceVaultInvokeResponseInput is an input type that accepts SourceVaultInvokeResponseArgs and SourceVaultInvokeResponseOutput values.
// You can construct a concrete instance of `SourceVaultInvokeResponseInput` via:
//
//          SourceVaultInvokeResponseArgs{...}
type SourceVaultInvokeResponseInput interface {
	pulumi.Input

	ToSourceVaultInvokeResponseOutput() SourceVaultInvokeResponseOutput
	ToSourceVaultInvokeResponseOutputWithContext(context.Context) SourceVaultInvokeResponseOutput
}

// The vault id is an Azure Resource Manager Resource id in the form /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.KeyVault/vaults/{vaultName}
type SourceVaultInvokeResponseArgs struct {
	// Resource Id
	Id pulumi.StringPtrInput `pulumi:"id"`
}

func (SourceVaultInvokeResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SourceVaultInvokeResponse)(nil)).Elem()
}

func (i SourceVaultInvokeResponseArgs) ToSourceVaultInvokeResponseOutput() SourceVaultInvokeResponseOutput {
	return i.ToSourceVaultInvokeResponseOutputWithContext(context.Background())
}

func (i SourceVaultInvokeResponseArgs) ToSourceVaultInvokeResponseOutputWithContext(ctx context.Context) SourceVaultInvokeResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SourceVaultInvokeResponseOutput)
}

func (i SourceVaultInvokeResponseArgs) ToSourceVaultInvokeResponsePtrOutput() SourceVaultInvokeResponsePtrOutput {
	return i.ToSourceVaultInvokeResponsePtrOutputWithContext(context.Background())
}

func (i SourceVaultInvokeResponseArgs) ToSourceVaultInvokeResponsePtrOutputWithContext(ctx context.Context) SourceVaultInvokeResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SourceVaultInvokeResponseOutput).ToSourceVaultInvokeResponsePtrOutputWithContext(ctx)
}

// SourceVaultInvokeResponsePtrInput is an input type that accepts SourceVaultInvokeResponseArgs, SourceVaultInvokeResponsePtr and SourceVaultInvokeResponsePtrOutput values.
// You can construct a concrete instance of `SourceVaultInvokeResponsePtrInput` via:
//
//          SourceVaultInvokeResponseArgs{...}
//
//  or:
//
//          nil
type SourceVaultInvokeResponsePtrInput interface {
	pulumi.Input

	ToSourceVaultInvokeResponsePtrOutput() SourceVaultInvokeResponsePtrOutput
	ToSourceVaultInvokeResponsePtrOutputWithContext(context.Context) SourceVaultInvokeResponsePtrOutput
}

type sourceVaultInvokeResponsePtrType SourceVaultInvokeResponseArgs

func SourceVaultInvokeResponsePtr(v *SourceVaultInvokeResponseArgs) SourceVaultInvokeResponsePtrInput {
	return (*sourceVaultInvokeResponsePtrType)(v)
}

func (*sourceVaultInvokeResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SourceVaultInvokeResponse)(nil)).Elem()
}

func (i *sourceVaultInvokeResponsePtrType) ToSourceVaultInvokeResponsePtrOutput() SourceVaultInvokeResponsePtrOutput {
	return i.ToSourceVaultInvokeResponsePtrOutputWithContext(context.Background())
}

func (i *sourceVaultInvokeResponsePtrType) ToSourceVaultInvokeResponsePtrOutputWithContext(ctx context.Context) SourceVaultInvokeResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SourceVaultInvokeResponsePtrOutput)
}

// The vault id is an Azure Resource Manager Resource id in the form /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.KeyVault/vaults/{vaultName}
type SourceVaultInvokeResponseOutput struct{ *pulumi.OutputState }

func (SourceVaultInvokeResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SourceVaultInvokeResponse)(nil)).Elem()
}

func (o SourceVaultInvokeResponseOutput) ToSourceVaultInvokeResponseOutput() SourceVaultInvokeResponseOutput {
	return o
}

func (o SourceVaultInvokeResponseOutput) ToSourceVaultInvokeResponseOutputWithContext(ctx context.Context) SourceVaultInvokeResponseOutput {
	return o
}

func (o SourceVaultInvokeResponseOutput) ToSourceVaultInvokeResponsePtrOutput() SourceVaultInvokeResponsePtrOutput {
	return o.ToSourceVaultInvokeResponsePtrOutputWithContext(context.Background())
}

func (o SourceVaultInvokeResponseOutput) ToSourceVaultInvokeResponsePtrOutputWithContext(ctx context.Context) SourceVaultInvokeResponsePtrOutput {
	return o.ApplyT(func(v SourceVaultInvokeResponse) *SourceVaultInvokeResponse {
		return &v
	}).(SourceVaultInvokeResponsePtrOutput)
}

// Resource Id
func (o SourceVaultInvokeResponseOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SourceVaultInvokeResponse) *string { return v.Id }).(pulumi.StringPtrOutput)
}

type SourceVaultInvokeResponsePtrOutput struct{ *pulumi.OutputState }

func (SourceVaultInvokeResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SourceVaultInvokeResponse)(nil)).Elem()
}

func (o SourceVaultInvokeResponsePtrOutput) ToSourceVaultInvokeResponsePtrOutput() SourceVaultInvokeResponsePtrOutput {
	return o
}

func (o SourceVaultInvokeResponsePtrOutput) ToSourceVaultInvokeResponsePtrOutputWithContext(ctx context.Context) SourceVaultInvokeResponsePtrOutput {
	return o
}

func (o SourceVaultInvokeResponsePtrOutput) Elem() SourceVaultInvokeResponseOutput {
	return o.ApplyT(func(v *SourceVaultInvokeResponse) SourceVaultInvokeResponse { return *v }).(SourceVaultInvokeResponseOutput)
}

// Resource Id
func (o SourceVaultInvokeResponsePtrOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SourceVaultInvokeResponse) *string {
		if v == nil {
			return nil
		}
		return v.Id
	}).(pulumi.StringPtrOutput)
}

// The vault id is an Azure Resource Manager Resource id in the form /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.KeyVault/vaults/{vaultName}
type SourceVaultResponse struct {
	// Resource Id
	Id *string `pulumi:"id"`
}

// SourceVaultResponseInput is an input type that accepts SourceVaultResponseArgs and SourceVaultResponseOutput values.
// You can construct a concrete instance of `SourceVaultResponseInput` via:
//
//          SourceVaultResponseArgs{...}
type SourceVaultResponseInput interface {
	pulumi.Input

	ToSourceVaultResponseOutput() SourceVaultResponseOutput
	ToSourceVaultResponseOutputWithContext(context.Context) SourceVaultResponseOutput
}

// The vault id is an Azure Resource Manager Resource id in the form /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.KeyVault/vaults/{vaultName}
type SourceVaultResponseArgs struct {
	// Resource Id
	Id pulumi.StringPtrInput `pulumi:"id"`
}

func (SourceVaultResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SourceVaultResponse)(nil)).Elem()
}

func (i SourceVaultResponseArgs) ToSourceVaultResponseOutput() SourceVaultResponseOutput {
	return i.ToSourceVaultResponseOutputWithContext(context.Background())
}

func (i SourceVaultResponseArgs) ToSourceVaultResponseOutputWithContext(ctx context.Context) SourceVaultResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SourceVaultResponseOutput)
}

func (i SourceVaultResponseArgs) ToSourceVaultResponsePtrOutput() SourceVaultResponsePtrOutput {
	return i.ToSourceVaultResponsePtrOutputWithContext(context.Background())
}

func (i SourceVaultResponseArgs) ToSourceVaultResponsePtrOutputWithContext(ctx context.Context) SourceVaultResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SourceVaultResponseOutput).ToSourceVaultResponsePtrOutputWithContext(ctx)
}

// SourceVaultResponsePtrInput is an input type that accepts SourceVaultResponseArgs, SourceVaultResponsePtr and SourceVaultResponsePtrOutput values.
// You can construct a concrete instance of `SourceVaultResponsePtrInput` via:
//
//          SourceVaultResponseArgs{...}
//
//  or:
//
//          nil
type SourceVaultResponsePtrInput interface {
	pulumi.Input

	ToSourceVaultResponsePtrOutput() SourceVaultResponsePtrOutput
	ToSourceVaultResponsePtrOutputWithContext(context.Context) SourceVaultResponsePtrOutput
}

type sourceVaultResponsePtrType SourceVaultResponseArgs

func SourceVaultResponsePtr(v *SourceVaultResponseArgs) SourceVaultResponsePtrInput {
	return (*sourceVaultResponsePtrType)(v)
}

func (*sourceVaultResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SourceVaultResponse)(nil)).Elem()
}

func (i *sourceVaultResponsePtrType) ToSourceVaultResponsePtrOutput() SourceVaultResponsePtrOutput {
	return i.ToSourceVaultResponsePtrOutputWithContext(context.Background())
}

func (i *sourceVaultResponsePtrType) ToSourceVaultResponsePtrOutputWithContext(ctx context.Context) SourceVaultResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SourceVaultResponsePtrOutput)
}

// The vault id is an Azure Resource Manager Resource id in the form /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.KeyVault/vaults/{vaultName}
type SourceVaultResponseOutput struct{ *pulumi.OutputState }

func (SourceVaultResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SourceVaultResponse)(nil)).Elem()
}

func (o SourceVaultResponseOutput) ToSourceVaultResponseOutput() SourceVaultResponseOutput {
	return o
}

func (o SourceVaultResponseOutput) ToSourceVaultResponseOutputWithContext(ctx context.Context) SourceVaultResponseOutput {
	return o
}

func (o SourceVaultResponseOutput) ToSourceVaultResponsePtrOutput() SourceVaultResponsePtrOutput {
	return o.ToSourceVaultResponsePtrOutputWithContext(context.Background())
}

func (o SourceVaultResponseOutput) ToSourceVaultResponsePtrOutputWithContext(ctx context.Context) SourceVaultResponsePtrOutput {
	return o.ApplyT(func(v SourceVaultResponse) *SourceVaultResponse {
		return &v
	}).(SourceVaultResponsePtrOutput)
}

// Resource Id
func (o SourceVaultResponseOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SourceVaultResponse) *string { return v.Id }).(pulumi.StringPtrOutput)
}

type SourceVaultResponsePtrOutput struct{ *pulumi.OutputState }

func (SourceVaultResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SourceVaultResponse)(nil)).Elem()
}

func (o SourceVaultResponsePtrOutput) ToSourceVaultResponsePtrOutput() SourceVaultResponsePtrOutput {
	return o
}

func (o SourceVaultResponsePtrOutput) ToSourceVaultResponsePtrOutputWithContext(ctx context.Context) SourceVaultResponsePtrOutput {
	return o
}

func (o SourceVaultResponsePtrOutput) Elem() SourceVaultResponseOutput {
	return o.ApplyT(func(v *SourceVaultResponse) SourceVaultResponse { return *v }).(SourceVaultResponseOutput)
}

// Resource Id
func (o SourceVaultResponsePtrOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SourceVaultResponse) *string {
		if v == nil {
			return nil
		}
		return v.Id
	}).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(CreationDataOutput{})
	pulumi.RegisterOutputType(CreationDataPtrOutput{})
	pulumi.RegisterOutputType(CreationDataInvokeResponseOutput{})
	pulumi.RegisterOutputType(CreationDataResponseOutput{})
	pulumi.RegisterOutputType(CreationDataResponsePtrOutput{})
	pulumi.RegisterOutputType(DiskSkuOutput{})
	pulumi.RegisterOutputType(DiskSkuPtrOutput{})
	pulumi.RegisterOutputType(DiskSkuInvokeResponseOutput{})
	pulumi.RegisterOutputType(DiskSkuResponseOutput{})
	pulumi.RegisterOutputType(DiskSkuResponsePtrOutput{})
	pulumi.RegisterOutputType(EncryptionSettingsCollectionOutput{})
	pulumi.RegisterOutputType(EncryptionSettingsCollectionPtrOutput{})
	pulumi.RegisterOutputType(EncryptionSettingsCollectionInvokeResponseOutput{})
	pulumi.RegisterOutputType(EncryptionSettingsCollectionResponseOutput{})
	pulumi.RegisterOutputType(EncryptionSettingsCollectionResponsePtrOutput{})
	pulumi.RegisterOutputType(EncryptionSettingsElementOutput{})
	pulumi.RegisterOutputType(EncryptionSettingsElementArrayOutput{})
	pulumi.RegisterOutputType(EncryptionSettingsElementInvokeResponseOutput{})
	pulumi.RegisterOutputType(EncryptionSettingsElementInvokeResponseArrayOutput{})
	pulumi.RegisterOutputType(EncryptionSettingsElementResponseOutput{})
	pulumi.RegisterOutputType(EncryptionSettingsElementResponseArrayOutput{})
	pulumi.RegisterOutputType(ImageDiskReferenceOutput{})
	pulumi.RegisterOutputType(ImageDiskReferencePtrOutput{})
	pulumi.RegisterOutputType(ImageDiskReferenceInvokeResponseOutput{})
	pulumi.RegisterOutputType(ImageDiskReferenceInvokeResponsePtrOutput{})
	pulumi.RegisterOutputType(ImageDiskReferenceResponseOutput{})
	pulumi.RegisterOutputType(ImageDiskReferenceResponsePtrOutput{})
	pulumi.RegisterOutputType(KeyVaultAndKeyReferenceOutput{})
	pulumi.RegisterOutputType(KeyVaultAndKeyReferencePtrOutput{})
	pulumi.RegisterOutputType(KeyVaultAndKeyReferenceInvokeResponseOutput{})
	pulumi.RegisterOutputType(KeyVaultAndKeyReferenceInvokeResponsePtrOutput{})
	pulumi.RegisterOutputType(KeyVaultAndKeyReferenceResponseOutput{})
	pulumi.RegisterOutputType(KeyVaultAndKeyReferenceResponsePtrOutput{})
	pulumi.RegisterOutputType(KeyVaultAndSecretReferenceOutput{})
	pulumi.RegisterOutputType(KeyVaultAndSecretReferencePtrOutput{})
	pulumi.RegisterOutputType(KeyVaultAndSecretReferenceInvokeResponseOutput{})
	pulumi.RegisterOutputType(KeyVaultAndSecretReferenceInvokeResponsePtrOutput{})
	pulumi.RegisterOutputType(KeyVaultAndSecretReferenceResponseOutput{})
	pulumi.RegisterOutputType(KeyVaultAndSecretReferenceResponsePtrOutput{})
	pulumi.RegisterOutputType(SnapshotSkuOutput{})
	pulumi.RegisterOutputType(SnapshotSkuPtrOutput{})
	pulumi.RegisterOutputType(SnapshotSkuInvokeResponseOutput{})
	pulumi.RegisterOutputType(SnapshotSkuResponseOutput{})
	pulumi.RegisterOutputType(SnapshotSkuResponsePtrOutput{})
	pulumi.RegisterOutputType(SourceVaultOutput{})
	pulumi.RegisterOutputType(SourceVaultPtrOutput{})
	pulumi.RegisterOutputType(SourceVaultInvokeResponseOutput{})
	pulumi.RegisterOutputType(SourceVaultInvokeResponsePtrOutput{})
	pulumi.RegisterOutputType(SourceVaultResponseOutput{})
	pulumi.RegisterOutputType(SourceVaultResponsePtrOutput{})
}
