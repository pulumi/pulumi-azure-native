// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v20181001

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// The properties of the Azure File volume. Azure File shares are mounted as volumes.
type AzureFileVolume struct {
	// The flag indicating whether the Azure File shared mounted as a volume is read-only.
	ReadOnly *bool `pulumi:"readOnly"`
	// The name of the Azure File share to be mounted as a volume.
	ShareName string `pulumi:"shareName"`
	// The storage account access key used to access the Azure File share.
	StorageAccountKey *string `pulumi:"storageAccountKey"`
	// The name of the storage account that contains the Azure File share.
	StorageAccountName string `pulumi:"storageAccountName"`
}

// AzureFileVolumeInput is an input type that accepts AzureFileVolumeArgs and AzureFileVolumeOutput values.
// You can construct a concrete instance of `AzureFileVolumeInput` via:
//
//          AzureFileVolumeArgs{...}
type AzureFileVolumeInput interface {
	pulumi.Input

	ToAzureFileVolumeOutput() AzureFileVolumeOutput
	ToAzureFileVolumeOutputWithContext(context.Context) AzureFileVolumeOutput
}

// The properties of the Azure File volume. Azure File shares are mounted as volumes.
type AzureFileVolumeArgs struct {
	// The flag indicating whether the Azure File shared mounted as a volume is read-only.
	ReadOnly pulumi.BoolPtrInput `pulumi:"readOnly"`
	// The name of the Azure File share to be mounted as a volume.
	ShareName pulumi.StringInput `pulumi:"shareName"`
	// The storage account access key used to access the Azure File share.
	StorageAccountKey pulumi.StringPtrInput `pulumi:"storageAccountKey"`
	// The name of the storage account that contains the Azure File share.
	StorageAccountName pulumi.StringInput `pulumi:"storageAccountName"`
}

func (AzureFileVolumeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureFileVolume)(nil)).Elem()
}

func (i AzureFileVolumeArgs) ToAzureFileVolumeOutput() AzureFileVolumeOutput {
	return i.ToAzureFileVolumeOutputWithContext(context.Background())
}

func (i AzureFileVolumeArgs) ToAzureFileVolumeOutputWithContext(ctx context.Context) AzureFileVolumeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzureFileVolumeOutput)
}

func (i AzureFileVolumeArgs) ToAzureFileVolumePtrOutput() AzureFileVolumePtrOutput {
	return i.ToAzureFileVolumePtrOutputWithContext(context.Background())
}

func (i AzureFileVolumeArgs) ToAzureFileVolumePtrOutputWithContext(ctx context.Context) AzureFileVolumePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzureFileVolumeOutput).ToAzureFileVolumePtrOutputWithContext(ctx)
}

// AzureFileVolumePtrInput is an input type that accepts AzureFileVolumeArgs, AzureFileVolumePtr and AzureFileVolumePtrOutput values.
// You can construct a concrete instance of `AzureFileVolumePtrInput` via:
//
//          AzureFileVolumeArgs{...}
//
//  or:
//
//          nil
type AzureFileVolumePtrInput interface {
	pulumi.Input

	ToAzureFileVolumePtrOutput() AzureFileVolumePtrOutput
	ToAzureFileVolumePtrOutputWithContext(context.Context) AzureFileVolumePtrOutput
}

type azureFileVolumePtrType AzureFileVolumeArgs

func AzureFileVolumePtr(v *AzureFileVolumeArgs) AzureFileVolumePtrInput {
	return (*azureFileVolumePtrType)(v)
}

func (*azureFileVolumePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AzureFileVolume)(nil)).Elem()
}

func (i *azureFileVolumePtrType) ToAzureFileVolumePtrOutput() AzureFileVolumePtrOutput {
	return i.ToAzureFileVolumePtrOutputWithContext(context.Background())
}

func (i *azureFileVolumePtrType) ToAzureFileVolumePtrOutputWithContext(ctx context.Context) AzureFileVolumePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzureFileVolumePtrOutput)
}

// The properties of the Azure File volume. Azure File shares are mounted as volumes.
type AzureFileVolumeOutput struct{ *pulumi.OutputState }

func (AzureFileVolumeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureFileVolume)(nil)).Elem()
}

func (o AzureFileVolumeOutput) ToAzureFileVolumeOutput() AzureFileVolumeOutput {
	return o
}

func (o AzureFileVolumeOutput) ToAzureFileVolumeOutputWithContext(ctx context.Context) AzureFileVolumeOutput {
	return o
}

func (o AzureFileVolumeOutput) ToAzureFileVolumePtrOutput() AzureFileVolumePtrOutput {
	return o.ToAzureFileVolumePtrOutputWithContext(context.Background())
}

func (o AzureFileVolumeOutput) ToAzureFileVolumePtrOutputWithContext(ctx context.Context) AzureFileVolumePtrOutput {
	return o.ApplyT(func(v AzureFileVolume) *AzureFileVolume {
		return &v
	}).(AzureFileVolumePtrOutput)
}

// The flag indicating whether the Azure File shared mounted as a volume is read-only.
func (o AzureFileVolumeOutput) ReadOnly() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v AzureFileVolume) *bool { return v.ReadOnly }).(pulumi.BoolPtrOutput)
}

// The name of the Azure File share to be mounted as a volume.
func (o AzureFileVolumeOutput) ShareName() pulumi.StringOutput {
	return o.ApplyT(func(v AzureFileVolume) string { return v.ShareName }).(pulumi.StringOutput)
}

// The storage account access key used to access the Azure File share.
func (o AzureFileVolumeOutput) StorageAccountKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureFileVolume) *string { return v.StorageAccountKey }).(pulumi.StringPtrOutput)
}

// The name of the storage account that contains the Azure File share.
func (o AzureFileVolumeOutput) StorageAccountName() pulumi.StringOutput {
	return o.ApplyT(func(v AzureFileVolume) string { return v.StorageAccountName }).(pulumi.StringOutput)
}

type AzureFileVolumePtrOutput struct{ *pulumi.OutputState }

func (AzureFileVolumePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AzureFileVolume)(nil)).Elem()
}

func (o AzureFileVolumePtrOutput) ToAzureFileVolumePtrOutput() AzureFileVolumePtrOutput {
	return o
}

func (o AzureFileVolumePtrOutput) ToAzureFileVolumePtrOutputWithContext(ctx context.Context) AzureFileVolumePtrOutput {
	return o
}

func (o AzureFileVolumePtrOutput) Elem() AzureFileVolumeOutput {
	return o.ApplyT(func(v *AzureFileVolume) AzureFileVolume { return *v }).(AzureFileVolumeOutput)
}

// The flag indicating whether the Azure File shared mounted as a volume is read-only.
func (o AzureFileVolumePtrOutput) ReadOnly() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AzureFileVolume) *bool {
		if v == nil {
			return nil
		}
		return v.ReadOnly
	}).(pulumi.BoolPtrOutput)
}

// The name of the Azure File share to be mounted as a volume.
func (o AzureFileVolumePtrOutput) ShareName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AzureFileVolume) *string {
		if v == nil {
			return nil
		}
		return &v.ShareName
	}).(pulumi.StringPtrOutput)
}

// The storage account access key used to access the Azure File share.
func (o AzureFileVolumePtrOutput) StorageAccountKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AzureFileVolume) *string {
		if v == nil {
			return nil
		}
		return v.StorageAccountKey
	}).(pulumi.StringPtrOutput)
}

// The name of the storage account that contains the Azure File share.
func (o AzureFileVolumePtrOutput) StorageAccountName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AzureFileVolume) *string {
		if v == nil {
			return nil
		}
		return &v.StorageAccountName
	}).(pulumi.StringPtrOutput)
}

// The properties of the Azure File volume. Azure File shares are mounted as volumes.
type AzureFileVolumeInvokeResponse struct {
	// The flag indicating whether the Azure File shared mounted as a volume is read-only.
	ReadOnly *bool `pulumi:"readOnly"`
	// The name of the Azure File share to be mounted as a volume.
	ShareName string `pulumi:"shareName"`
	// The storage account access key used to access the Azure File share.
	StorageAccountKey *string `pulumi:"storageAccountKey"`
	// The name of the storage account that contains the Azure File share.
	StorageAccountName string `pulumi:"storageAccountName"`
}

// AzureFileVolumeInvokeResponseInput is an input type that accepts AzureFileVolumeInvokeResponseArgs and AzureFileVolumeInvokeResponseOutput values.
// You can construct a concrete instance of `AzureFileVolumeInvokeResponseInput` via:
//
//          AzureFileVolumeInvokeResponseArgs{...}
type AzureFileVolumeInvokeResponseInput interface {
	pulumi.Input

	ToAzureFileVolumeInvokeResponseOutput() AzureFileVolumeInvokeResponseOutput
	ToAzureFileVolumeInvokeResponseOutputWithContext(context.Context) AzureFileVolumeInvokeResponseOutput
}

// The properties of the Azure File volume. Azure File shares are mounted as volumes.
type AzureFileVolumeInvokeResponseArgs struct {
	// The flag indicating whether the Azure File shared mounted as a volume is read-only.
	ReadOnly pulumi.BoolPtrInput `pulumi:"readOnly"`
	// The name of the Azure File share to be mounted as a volume.
	ShareName pulumi.StringInput `pulumi:"shareName"`
	// The storage account access key used to access the Azure File share.
	StorageAccountKey pulumi.StringPtrInput `pulumi:"storageAccountKey"`
	// The name of the storage account that contains the Azure File share.
	StorageAccountName pulumi.StringInput `pulumi:"storageAccountName"`
}

func (AzureFileVolumeInvokeResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureFileVolumeInvokeResponse)(nil)).Elem()
}

func (i AzureFileVolumeInvokeResponseArgs) ToAzureFileVolumeInvokeResponseOutput() AzureFileVolumeInvokeResponseOutput {
	return i.ToAzureFileVolumeInvokeResponseOutputWithContext(context.Background())
}

func (i AzureFileVolumeInvokeResponseArgs) ToAzureFileVolumeInvokeResponseOutputWithContext(ctx context.Context) AzureFileVolumeInvokeResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzureFileVolumeInvokeResponseOutput)
}

func (i AzureFileVolumeInvokeResponseArgs) ToAzureFileVolumeInvokeResponsePtrOutput() AzureFileVolumeInvokeResponsePtrOutput {
	return i.ToAzureFileVolumeInvokeResponsePtrOutputWithContext(context.Background())
}

func (i AzureFileVolumeInvokeResponseArgs) ToAzureFileVolumeInvokeResponsePtrOutputWithContext(ctx context.Context) AzureFileVolumeInvokeResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzureFileVolumeInvokeResponseOutput).ToAzureFileVolumeInvokeResponsePtrOutputWithContext(ctx)
}

// AzureFileVolumeInvokeResponsePtrInput is an input type that accepts AzureFileVolumeInvokeResponseArgs, AzureFileVolumeInvokeResponsePtr and AzureFileVolumeInvokeResponsePtrOutput values.
// You can construct a concrete instance of `AzureFileVolumeInvokeResponsePtrInput` via:
//
//          AzureFileVolumeInvokeResponseArgs{...}
//
//  or:
//
//          nil
type AzureFileVolumeInvokeResponsePtrInput interface {
	pulumi.Input

	ToAzureFileVolumeInvokeResponsePtrOutput() AzureFileVolumeInvokeResponsePtrOutput
	ToAzureFileVolumeInvokeResponsePtrOutputWithContext(context.Context) AzureFileVolumeInvokeResponsePtrOutput
}

type azureFileVolumeInvokeResponsePtrType AzureFileVolumeInvokeResponseArgs

func AzureFileVolumeInvokeResponsePtr(v *AzureFileVolumeInvokeResponseArgs) AzureFileVolumeInvokeResponsePtrInput {
	return (*azureFileVolumeInvokeResponsePtrType)(v)
}

func (*azureFileVolumeInvokeResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AzureFileVolumeInvokeResponse)(nil)).Elem()
}

func (i *azureFileVolumeInvokeResponsePtrType) ToAzureFileVolumeInvokeResponsePtrOutput() AzureFileVolumeInvokeResponsePtrOutput {
	return i.ToAzureFileVolumeInvokeResponsePtrOutputWithContext(context.Background())
}

func (i *azureFileVolumeInvokeResponsePtrType) ToAzureFileVolumeInvokeResponsePtrOutputWithContext(ctx context.Context) AzureFileVolumeInvokeResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzureFileVolumeInvokeResponsePtrOutput)
}

// The properties of the Azure File volume. Azure File shares are mounted as volumes.
type AzureFileVolumeInvokeResponseOutput struct{ *pulumi.OutputState }

func (AzureFileVolumeInvokeResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureFileVolumeInvokeResponse)(nil)).Elem()
}

func (o AzureFileVolumeInvokeResponseOutput) ToAzureFileVolumeInvokeResponseOutput() AzureFileVolumeInvokeResponseOutput {
	return o
}

func (o AzureFileVolumeInvokeResponseOutput) ToAzureFileVolumeInvokeResponseOutputWithContext(ctx context.Context) AzureFileVolumeInvokeResponseOutput {
	return o
}

func (o AzureFileVolumeInvokeResponseOutput) ToAzureFileVolumeInvokeResponsePtrOutput() AzureFileVolumeInvokeResponsePtrOutput {
	return o.ToAzureFileVolumeInvokeResponsePtrOutputWithContext(context.Background())
}

func (o AzureFileVolumeInvokeResponseOutput) ToAzureFileVolumeInvokeResponsePtrOutputWithContext(ctx context.Context) AzureFileVolumeInvokeResponsePtrOutput {
	return o.ApplyT(func(v AzureFileVolumeInvokeResponse) *AzureFileVolumeInvokeResponse {
		return &v
	}).(AzureFileVolumeInvokeResponsePtrOutput)
}

// The flag indicating whether the Azure File shared mounted as a volume is read-only.
func (o AzureFileVolumeInvokeResponseOutput) ReadOnly() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v AzureFileVolumeInvokeResponse) *bool { return v.ReadOnly }).(pulumi.BoolPtrOutput)
}

// The name of the Azure File share to be mounted as a volume.
func (o AzureFileVolumeInvokeResponseOutput) ShareName() pulumi.StringOutput {
	return o.ApplyT(func(v AzureFileVolumeInvokeResponse) string { return v.ShareName }).(pulumi.StringOutput)
}

// The storage account access key used to access the Azure File share.
func (o AzureFileVolumeInvokeResponseOutput) StorageAccountKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureFileVolumeInvokeResponse) *string { return v.StorageAccountKey }).(pulumi.StringPtrOutput)
}

// The name of the storage account that contains the Azure File share.
func (o AzureFileVolumeInvokeResponseOutput) StorageAccountName() pulumi.StringOutput {
	return o.ApplyT(func(v AzureFileVolumeInvokeResponse) string { return v.StorageAccountName }).(pulumi.StringOutput)
}

type AzureFileVolumeInvokeResponsePtrOutput struct{ *pulumi.OutputState }

func (AzureFileVolumeInvokeResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AzureFileVolumeInvokeResponse)(nil)).Elem()
}

func (o AzureFileVolumeInvokeResponsePtrOutput) ToAzureFileVolumeInvokeResponsePtrOutput() AzureFileVolumeInvokeResponsePtrOutput {
	return o
}

func (o AzureFileVolumeInvokeResponsePtrOutput) ToAzureFileVolumeInvokeResponsePtrOutputWithContext(ctx context.Context) AzureFileVolumeInvokeResponsePtrOutput {
	return o
}

func (o AzureFileVolumeInvokeResponsePtrOutput) Elem() AzureFileVolumeInvokeResponseOutput {
	return o.ApplyT(func(v *AzureFileVolumeInvokeResponse) AzureFileVolumeInvokeResponse { return *v }).(AzureFileVolumeInvokeResponseOutput)
}

// The flag indicating whether the Azure File shared mounted as a volume is read-only.
func (o AzureFileVolumeInvokeResponsePtrOutput) ReadOnly() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AzureFileVolumeInvokeResponse) *bool {
		if v == nil {
			return nil
		}
		return v.ReadOnly
	}).(pulumi.BoolPtrOutput)
}

// The name of the Azure File share to be mounted as a volume.
func (o AzureFileVolumeInvokeResponsePtrOutput) ShareName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AzureFileVolumeInvokeResponse) *string {
		if v == nil {
			return nil
		}
		return &v.ShareName
	}).(pulumi.StringPtrOutput)
}

// The storage account access key used to access the Azure File share.
func (o AzureFileVolumeInvokeResponsePtrOutput) StorageAccountKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AzureFileVolumeInvokeResponse) *string {
		if v == nil {
			return nil
		}
		return v.StorageAccountKey
	}).(pulumi.StringPtrOutput)
}

// The name of the storage account that contains the Azure File share.
func (o AzureFileVolumeInvokeResponsePtrOutput) StorageAccountName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AzureFileVolumeInvokeResponse) *string {
		if v == nil {
			return nil
		}
		return &v.StorageAccountName
	}).(pulumi.StringPtrOutput)
}

// The properties of the Azure File volume. Azure File shares are mounted as volumes.
type AzureFileVolumeResponse struct {
	// The flag indicating whether the Azure File shared mounted as a volume is read-only.
	ReadOnly *bool `pulumi:"readOnly"`
	// The name of the Azure File share to be mounted as a volume.
	ShareName string `pulumi:"shareName"`
	// The storage account access key used to access the Azure File share.
	StorageAccountKey *string `pulumi:"storageAccountKey"`
	// The name of the storage account that contains the Azure File share.
	StorageAccountName string `pulumi:"storageAccountName"`
}

// AzureFileVolumeResponseInput is an input type that accepts AzureFileVolumeResponseArgs and AzureFileVolumeResponseOutput values.
// You can construct a concrete instance of `AzureFileVolumeResponseInput` via:
//
//          AzureFileVolumeResponseArgs{...}
type AzureFileVolumeResponseInput interface {
	pulumi.Input

	ToAzureFileVolumeResponseOutput() AzureFileVolumeResponseOutput
	ToAzureFileVolumeResponseOutputWithContext(context.Context) AzureFileVolumeResponseOutput
}

// The properties of the Azure File volume. Azure File shares are mounted as volumes.
type AzureFileVolumeResponseArgs struct {
	// The flag indicating whether the Azure File shared mounted as a volume is read-only.
	ReadOnly pulumi.BoolPtrInput `pulumi:"readOnly"`
	// The name of the Azure File share to be mounted as a volume.
	ShareName pulumi.StringInput `pulumi:"shareName"`
	// The storage account access key used to access the Azure File share.
	StorageAccountKey pulumi.StringPtrInput `pulumi:"storageAccountKey"`
	// The name of the storage account that contains the Azure File share.
	StorageAccountName pulumi.StringInput `pulumi:"storageAccountName"`
}

func (AzureFileVolumeResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureFileVolumeResponse)(nil)).Elem()
}

func (i AzureFileVolumeResponseArgs) ToAzureFileVolumeResponseOutput() AzureFileVolumeResponseOutput {
	return i.ToAzureFileVolumeResponseOutputWithContext(context.Background())
}

func (i AzureFileVolumeResponseArgs) ToAzureFileVolumeResponseOutputWithContext(ctx context.Context) AzureFileVolumeResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzureFileVolumeResponseOutput)
}

func (i AzureFileVolumeResponseArgs) ToAzureFileVolumeResponsePtrOutput() AzureFileVolumeResponsePtrOutput {
	return i.ToAzureFileVolumeResponsePtrOutputWithContext(context.Background())
}

func (i AzureFileVolumeResponseArgs) ToAzureFileVolumeResponsePtrOutputWithContext(ctx context.Context) AzureFileVolumeResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzureFileVolumeResponseOutput).ToAzureFileVolumeResponsePtrOutputWithContext(ctx)
}

// AzureFileVolumeResponsePtrInput is an input type that accepts AzureFileVolumeResponseArgs, AzureFileVolumeResponsePtr and AzureFileVolumeResponsePtrOutput values.
// You can construct a concrete instance of `AzureFileVolumeResponsePtrInput` via:
//
//          AzureFileVolumeResponseArgs{...}
//
//  or:
//
//          nil
type AzureFileVolumeResponsePtrInput interface {
	pulumi.Input

	ToAzureFileVolumeResponsePtrOutput() AzureFileVolumeResponsePtrOutput
	ToAzureFileVolumeResponsePtrOutputWithContext(context.Context) AzureFileVolumeResponsePtrOutput
}

type azureFileVolumeResponsePtrType AzureFileVolumeResponseArgs

func AzureFileVolumeResponsePtr(v *AzureFileVolumeResponseArgs) AzureFileVolumeResponsePtrInput {
	return (*azureFileVolumeResponsePtrType)(v)
}

func (*azureFileVolumeResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AzureFileVolumeResponse)(nil)).Elem()
}

func (i *azureFileVolumeResponsePtrType) ToAzureFileVolumeResponsePtrOutput() AzureFileVolumeResponsePtrOutput {
	return i.ToAzureFileVolumeResponsePtrOutputWithContext(context.Background())
}

func (i *azureFileVolumeResponsePtrType) ToAzureFileVolumeResponsePtrOutputWithContext(ctx context.Context) AzureFileVolumeResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzureFileVolumeResponsePtrOutput)
}

// The properties of the Azure File volume. Azure File shares are mounted as volumes.
type AzureFileVolumeResponseOutput struct{ *pulumi.OutputState }

func (AzureFileVolumeResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureFileVolumeResponse)(nil)).Elem()
}

func (o AzureFileVolumeResponseOutput) ToAzureFileVolumeResponseOutput() AzureFileVolumeResponseOutput {
	return o
}

func (o AzureFileVolumeResponseOutput) ToAzureFileVolumeResponseOutputWithContext(ctx context.Context) AzureFileVolumeResponseOutput {
	return o
}

func (o AzureFileVolumeResponseOutput) ToAzureFileVolumeResponsePtrOutput() AzureFileVolumeResponsePtrOutput {
	return o.ToAzureFileVolumeResponsePtrOutputWithContext(context.Background())
}

func (o AzureFileVolumeResponseOutput) ToAzureFileVolumeResponsePtrOutputWithContext(ctx context.Context) AzureFileVolumeResponsePtrOutput {
	return o.ApplyT(func(v AzureFileVolumeResponse) *AzureFileVolumeResponse {
		return &v
	}).(AzureFileVolumeResponsePtrOutput)
}

// The flag indicating whether the Azure File shared mounted as a volume is read-only.
func (o AzureFileVolumeResponseOutput) ReadOnly() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v AzureFileVolumeResponse) *bool { return v.ReadOnly }).(pulumi.BoolPtrOutput)
}

// The name of the Azure File share to be mounted as a volume.
func (o AzureFileVolumeResponseOutput) ShareName() pulumi.StringOutput {
	return o.ApplyT(func(v AzureFileVolumeResponse) string { return v.ShareName }).(pulumi.StringOutput)
}

// The storage account access key used to access the Azure File share.
func (o AzureFileVolumeResponseOutput) StorageAccountKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureFileVolumeResponse) *string { return v.StorageAccountKey }).(pulumi.StringPtrOutput)
}

// The name of the storage account that contains the Azure File share.
func (o AzureFileVolumeResponseOutput) StorageAccountName() pulumi.StringOutput {
	return o.ApplyT(func(v AzureFileVolumeResponse) string { return v.StorageAccountName }).(pulumi.StringOutput)
}

type AzureFileVolumeResponsePtrOutput struct{ *pulumi.OutputState }

func (AzureFileVolumeResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AzureFileVolumeResponse)(nil)).Elem()
}

func (o AzureFileVolumeResponsePtrOutput) ToAzureFileVolumeResponsePtrOutput() AzureFileVolumeResponsePtrOutput {
	return o
}

func (o AzureFileVolumeResponsePtrOutput) ToAzureFileVolumeResponsePtrOutputWithContext(ctx context.Context) AzureFileVolumeResponsePtrOutput {
	return o
}

func (o AzureFileVolumeResponsePtrOutput) Elem() AzureFileVolumeResponseOutput {
	return o.ApplyT(func(v *AzureFileVolumeResponse) AzureFileVolumeResponse { return *v }).(AzureFileVolumeResponseOutput)
}

// The flag indicating whether the Azure File shared mounted as a volume is read-only.
func (o AzureFileVolumeResponsePtrOutput) ReadOnly() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AzureFileVolumeResponse) *bool {
		if v == nil {
			return nil
		}
		return v.ReadOnly
	}).(pulumi.BoolPtrOutput)
}

// The name of the Azure File share to be mounted as a volume.
func (o AzureFileVolumeResponsePtrOutput) ShareName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AzureFileVolumeResponse) *string {
		if v == nil {
			return nil
		}
		return &v.ShareName
	}).(pulumi.StringPtrOutput)
}

// The storage account access key used to access the Azure File share.
func (o AzureFileVolumeResponsePtrOutput) StorageAccountKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AzureFileVolumeResponse) *string {
		if v == nil {
			return nil
		}
		return v.StorageAccountKey
	}).(pulumi.StringPtrOutput)
}

// The name of the storage account that contains the Azure File share.
func (o AzureFileVolumeResponsePtrOutput) StorageAccountName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AzureFileVolumeResponse) *string {
		if v == nil {
			return nil
		}
		return &v.StorageAccountName
	}).(pulumi.StringPtrOutput)
}

// A container instance.
type Container struct {
	// The commands to execute within the container instance in exec form.
	Command []string `pulumi:"command"`
	// The environment variables to set in the container instance.
	EnvironmentVariables []EnvironmentVariable `pulumi:"environmentVariables"`
	// The name of the image used to create the container instance.
	Image string `pulumi:"image"`
	// The liveness probe.
	LivenessProbe *ContainerProbe `pulumi:"livenessProbe"`
	// The user-provided name of the container instance.
	Name string `pulumi:"name"`
	// The exposed ports on the container instance.
	Ports []ContainerPort `pulumi:"ports"`
	// The readiness probe.
	ReadinessProbe *ContainerProbe `pulumi:"readinessProbe"`
	// The resource requirements of the container instance.
	Resources ResourceRequirements `pulumi:"resources"`
	// The volume mounts available to the container instance.
	VolumeMounts []VolumeMount `pulumi:"volumeMounts"`
}

// ContainerInput is an input type that accepts ContainerArgs and ContainerOutput values.
// You can construct a concrete instance of `ContainerInput` via:
//
//          ContainerArgs{...}
type ContainerInput interface {
	pulumi.Input

	ToContainerOutput() ContainerOutput
	ToContainerOutputWithContext(context.Context) ContainerOutput
}

// A container instance.
type ContainerArgs struct {
	// The commands to execute within the container instance in exec form.
	Command pulumi.StringArrayInput `pulumi:"command"`
	// The environment variables to set in the container instance.
	EnvironmentVariables EnvironmentVariableArrayInput `pulumi:"environmentVariables"`
	// The name of the image used to create the container instance.
	Image pulumi.StringInput `pulumi:"image"`
	// The liveness probe.
	LivenessProbe ContainerProbePtrInput `pulumi:"livenessProbe"`
	// The user-provided name of the container instance.
	Name pulumi.StringInput `pulumi:"name"`
	// The exposed ports on the container instance.
	Ports ContainerPortArrayInput `pulumi:"ports"`
	// The readiness probe.
	ReadinessProbe ContainerProbePtrInput `pulumi:"readinessProbe"`
	// The resource requirements of the container instance.
	Resources ResourceRequirementsInput `pulumi:"resources"`
	// The volume mounts available to the container instance.
	VolumeMounts VolumeMountArrayInput `pulumi:"volumeMounts"`
}

func (ContainerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Container)(nil)).Elem()
}

func (i ContainerArgs) ToContainerOutput() ContainerOutput {
	return i.ToContainerOutputWithContext(context.Background())
}

func (i ContainerArgs) ToContainerOutputWithContext(ctx context.Context) ContainerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerOutput)
}

// ContainerArrayInput is an input type that accepts ContainerArray and ContainerArrayOutput values.
// You can construct a concrete instance of `ContainerArrayInput` via:
//
//          ContainerArray{ ContainerArgs{...} }
type ContainerArrayInput interface {
	pulumi.Input

	ToContainerArrayOutput() ContainerArrayOutput
	ToContainerArrayOutputWithContext(context.Context) ContainerArrayOutput
}

type ContainerArray []ContainerInput

func (ContainerArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Container)(nil)).Elem()
}

func (i ContainerArray) ToContainerArrayOutput() ContainerArrayOutput {
	return i.ToContainerArrayOutputWithContext(context.Background())
}

func (i ContainerArray) ToContainerArrayOutputWithContext(ctx context.Context) ContainerArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerArrayOutput)
}

// A container instance.
type ContainerOutput struct{ *pulumi.OutputState }

func (ContainerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Container)(nil)).Elem()
}

func (o ContainerOutput) ToContainerOutput() ContainerOutput {
	return o
}

func (o ContainerOutput) ToContainerOutputWithContext(ctx context.Context) ContainerOutput {
	return o
}

// The commands to execute within the container instance in exec form.
func (o ContainerOutput) Command() pulumi.StringArrayOutput {
	return o.ApplyT(func(v Container) []string { return v.Command }).(pulumi.StringArrayOutput)
}

// The environment variables to set in the container instance.
func (o ContainerOutput) EnvironmentVariables() EnvironmentVariableArrayOutput {
	return o.ApplyT(func(v Container) []EnvironmentVariable { return v.EnvironmentVariables }).(EnvironmentVariableArrayOutput)
}

// The name of the image used to create the container instance.
func (o ContainerOutput) Image() pulumi.StringOutput {
	return o.ApplyT(func(v Container) string { return v.Image }).(pulumi.StringOutput)
}

// The liveness probe.
func (o ContainerOutput) LivenessProbe() ContainerProbePtrOutput {
	return o.ApplyT(func(v Container) *ContainerProbe { return v.LivenessProbe }).(ContainerProbePtrOutput)
}

// The user-provided name of the container instance.
func (o ContainerOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v Container) string { return v.Name }).(pulumi.StringOutput)
}

// The exposed ports on the container instance.
func (o ContainerOutput) Ports() ContainerPortArrayOutput {
	return o.ApplyT(func(v Container) []ContainerPort { return v.Ports }).(ContainerPortArrayOutput)
}

// The readiness probe.
func (o ContainerOutput) ReadinessProbe() ContainerProbePtrOutput {
	return o.ApplyT(func(v Container) *ContainerProbe { return v.ReadinessProbe }).(ContainerProbePtrOutput)
}

// The resource requirements of the container instance.
func (o ContainerOutput) Resources() ResourceRequirementsOutput {
	return o.ApplyT(func(v Container) ResourceRequirements { return v.Resources }).(ResourceRequirementsOutput)
}

// The volume mounts available to the container instance.
func (o ContainerOutput) VolumeMounts() VolumeMountArrayOutput {
	return o.ApplyT(func(v Container) []VolumeMount { return v.VolumeMounts }).(VolumeMountArrayOutput)
}

type ContainerArrayOutput struct{ *pulumi.OutputState }

func (ContainerArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Container)(nil)).Elem()
}

func (o ContainerArrayOutput) ToContainerArrayOutput() ContainerArrayOutput {
	return o
}

func (o ContainerArrayOutput) ToContainerArrayOutputWithContext(ctx context.Context) ContainerArrayOutput {
	return o
}

func (o ContainerArrayOutput) Index(i pulumi.IntInput) ContainerOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) Container {
		return vs[0].([]Container)[vs[1].(int)]
	}).(ContainerOutput)
}

// The container execution command, for liveness or readiness probe
type ContainerExec struct {
	// The commands to execute within the container.
	Command []string `pulumi:"command"`
}

// ContainerExecInput is an input type that accepts ContainerExecArgs and ContainerExecOutput values.
// You can construct a concrete instance of `ContainerExecInput` via:
//
//          ContainerExecArgs{...}
type ContainerExecInput interface {
	pulumi.Input

	ToContainerExecOutput() ContainerExecOutput
	ToContainerExecOutputWithContext(context.Context) ContainerExecOutput
}

// The container execution command, for liveness or readiness probe
type ContainerExecArgs struct {
	// The commands to execute within the container.
	Command pulumi.StringArrayInput `pulumi:"command"`
}

func (ContainerExecArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ContainerExec)(nil)).Elem()
}

func (i ContainerExecArgs) ToContainerExecOutput() ContainerExecOutput {
	return i.ToContainerExecOutputWithContext(context.Background())
}

func (i ContainerExecArgs) ToContainerExecOutputWithContext(ctx context.Context) ContainerExecOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerExecOutput)
}

func (i ContainerExecArgs) ToContainerExecPtrOutput() ContainerExecPtrOutput {
	return i.ToContainerExecPtrOutputWithContext(context.Background())
}

func (i ContainerExecArgs) ToContainerExecPtrOutputWithContext(ctx context.Context) ContainerExecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerExecOutput).ToContainerExecPtrOutputWithContext(ctx)
}

// ContainerExecPtrInput is an input type that accepts ContainerExecArgs, ContainerExecPtr and ContainerExecPtrOutput values.
// You can construct a concrete instance of `ContainerExecPtrInput` via:
//
//          ContainerExecArgs{...}
//
//  or:
//
//          nil
type ContainerExecPtrInput interface {
	pulumi.Input

	ToContainerExecPtrOutput() ContainerExecPtrOutput
	ToContainerExecPtrOutputWithContext(context.Context) ContainerExecPtrOutput
}

type containerExecPtrType ContainerExecArgs

func ContainerExecPtr(v *ContainerExecArgs) ContainerExecPtrInput {
	return (*containerExecPtrType)(v)
}

func (*containerExecPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ContainerExec)(nil)).Elem()
}

func (i *containerExecPtrType) ToContainerExecPtrOutput() ContainerExecPtrOutput {
	return i.ToContainerExecPtrOutputWithContext(context.Background())
}

func (i *containerExecPtrType) ToContainerExecPtrOutputWithContext(ctx context.Context) ContainerExecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerExecPtrOutput)
}

// The container execution command, for liveness or readiness probe
type ContainerExecOutput struct{ *pulumi.OutputState }

func (ContainerExecOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ContainerExec)(nil)).Elem()
}

func (o ContainerExecOutput) ToContainerExecOutput() ContainerExecOutput {
	return o
}

func (o ContainerExecOutput) ToContainerExecOutputWithContext(ctx context.Context) ContainerExecOutput {
	return o
}

func (o ContainerExecOutput) ToContainerExecPtrOutput() ContainerExecPtrOutput {
	return o.ToContainerExecPtrOutputWithContext(context.Background())
}

func (o ContainerExecOutput) ToContainerExecPtrOutputWithContext(ctx context.Context) ContainerExecPtrOutput {
	return o.ApplyT(func(v ContainerExec) *ContainerExec {
		return &v
	}).(ContainerExecPtrOutput)
}

// The commands to execute within the container.
func (o ContainerExecOutput) Command() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ContainerExec) []string { return v.Command }).(pulumi.StringArrayOutput)
}

type ContainerExecPtrOutput struct{ *pulumi.OutputState }

func (ContainerExecPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ContainerExec)(nil)).Elem()
}

func (o ContainerExecPtrOutput) ToContainerExecPtrOutput() ContainerExecPtrOutput {
	return o
}

func (o ContainerExecPtrOutput) ToContainerExecPtrOutputWithContext(ctx context.Context) ContainerExecPtrOutput {
	return o
}

func (o ContainerExecPtrOutput) Elem() ContainerExecOutput {
	return o.ApplyT(func(v *ContainerExec) ContainerExec { return *v }).(ContainerExecOutput)
}

// The commands to execute within the container.
func (o ContainerExecPtrOutput) Command() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ContainerExec) []string {
		if v == nil {
			return nil
		}
		return v.Command
	}).(pulumi.StringArrayOutput)
}

// The container execution command, for liveness or readiness probe
type ContainerExecInvokeResponse struct {
	// The commands to execute within the container.
	Command []string `pulumi:"command"`
}

// ContainerExecInvokeResponseInput is an input type that accepts ContainerExecInvokeResponseArgs and ContainerExecInvokeResponseOutput values.
// You can construct a concrete instance of `ContainerExecInvokeResponseInput` via:
//
//          ContainerExecInvokeResponseArgs{...}
type ContainerExecInvokeResponseInput interface {
	pulumi.Input

	ToContainerExecInvokeResponseOutput() ContainerExecInvokeResponseOutput
	ToContainerExecInvokeResponseOutputWithContext(context.Context) ContainerExecInvokeResponseOutput
}

// The container execution command, for liveness or readiness probe
type ContainerExecInvokeResponseArgs struct {
	// The commands to execute within the container.
	Command pulumi.StringArrayInput `pulumi:"command"`
}

func (ContainerExecInvokeResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ContainerExecInvokeResponse)(nil)).Elem()
}

func (i ContainerExecInvokeResponseArgs) ToContainerExecInvokeResponseOutput() ContainerExecInvokeResponseOutput {
	return i.ToContainerExecInvokeResponseOutputWithContext(context.Background())
}

func (i ContainerExecInvokeResponseArgs) ToContainerExecInvokeResponseOutputWithContext(ctx context.Context) ContainerExecInvokeResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerExecInvokeResponseOutput)
}

func (i ContainerExecInvokeResponseArgs) ToContainerExecInvokeResponsePtrOutput() ContainerExecInvokeResponsePtrOutput {
	return i.ToContainerExecInvokeResponsePtrOutputWithContext(context.Background())
}

func (i ContainerExecInvokeResponseArgs) ToContainerExecInvokeResponsePtrOutputWithContext(ctx context.Context) ContainerExecInvokeResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerExecInvokeResponseOutput).ToContainerExecInvokeResponsePtrOutputWithContext(ctx)
}

// ContainerExecInvokeResponsePtrInput is an input type that accepts ContainerExecInvokeResponseArgs, ContainerExecInvokeResponsePtr and ContainerExecInvokeResponsePtrOutput values.
// You can construct a concrete instance of `ContainerExecInvokeResponsePtrInput` via:
//
//          ContainerExecInvokeResponseArgs{...}
//
//  or:
//
//          nil
type ContainerExecInvokeResponsePtrInput interface {
	pulumi.Input

	ToContainerExecInvokeResponsePtrOutput() ContainerExecInvokeResponsePtrOutput
	ToContainerExecInvokeResponsePtrOutputWithContext(context.Context) ContainerExecInvokeResponsePtrOutput
}

type containerExecInvokeResponsePtrType ContainerExecInvokeResponseArgs

func ContainerExecInvokeResponsePtr(v *ContainerExecInvokeResponseArgs) ContainerExecInvokeResponsePtrInput {
	return (*containerExecInvokeResponsePtrType)(v)
}

func (*containerExecInvokeResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ContainerExecInvokeResponse)(nil)).Elem()
}

func (i *containerExecInvokeResponsePtrType) ToContainerExecInvokeResponsePtrOutput() ContainerExecInvokeResponsePtrOutput {
	return i.ToContainerExecInvokeResponsePtrOutputWithContext(context.Background())
}

func (i *containerExecInvokeResponsePtrType) ToContainerExecInvokeResponsePtrOutputWithContext(ctx context.Context) ContainerExecInvokeResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerExecInvokeResponsePtrOutput)
}

// The container execution command, for liveness or readiness probe
type ContainerExecInvokeResponseOutput struct{ *pulumi.OutputState }

func (ContainerExecInvokeResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ContainerExecInvokeResponse)(nil)).Elem()
}

func (o ContainerExecInvokeResponseOutput) ToContainerExecInvokeResponseOutput() ContainerExecInvokeResponseOutput {
	return o
}

func (o ContainerExecInvokeResponseOutput) ToContainerExecInvokeResponseOutputWithContext(ctx context.Context) ContainerExecInvokeResponseOutput {
	return o
}

func (o ContainerExecInvokeResponseOutput) ToContainerExecInvokeResponsePtrOutput() ContainerExecInvokeResponsePtrOutput {
	return o.ToContainerExecInvokeResponsePtrOutputWithContext(context.Background())
}

func (o ContainerExecInvokeResponseOutput) ToContainerExecInvokeResponsePtrOutputWithContext(ctx context.Context) ContainerExecInvokeResponsePtrOutput {
	return o.ApplyT(func(v ContainerExecInvokeResponse) *ContainerExecInvokeResponse {
		return &v
	}).(ContainerExecInvokeResponsePtrOutput)
}

// The commands to execute within the container.
func (o ContainerExecInvokeResponseOutput) Command() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ContainerExecInvokeResponse) []string { return v.Command }).(pulumi.StringArrayOutput)
}

type ContainerExecInvokeResponsePtrOutput struct{ *pulumi.OutputState }

func (ContainerExecInvokeResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ContainerExecInvokeResponse)(nil)).Elem()
}

func (o ContainerExecInvokeResponsePtrOutput) ToContainerExecInvokeResponsePtrOutput() ContainerExecInvokeResponsePtrOutput {
	return o
}

func (o ContainerExecInvokeResponsePtrOutput) ToContainerExecInvokeResponsePtrOutputWithContext(ctx context.Context) ContainerExecInvokeResponsePtrOutput {
	return o
}

func (o ContainerExecInvokeResponsePtrOutput) Elem() ContainerExecInvokeResponseOutput {
	return o.ApplyT(func(v *ContainerExecInvokeResponse) ContainerExecInvokeResponse { return *v }).(ContainerExecInvokeResponseOutput)
}

// The commands to execute within the container.
func (o ContainerExecInvokeResponsePtrOutput) Command() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ContainerExecInvokeResponse) []string {
		if v == nil {
			return nil
		}
		return v.Command
	}).(pulumi.StringArrayOutput)
}

// The container execution command, for liveness or readiness probe
type ContainerExecResponse struct {
	// The commands to execute within the container.
	Command []string `pulumi:"command"`
}

// ContainerExecResponseInput is an input type that accepts ContainerExecResponseArgs and ContainerExecResponseOutput values.
// You can construct a concrete instance of `ContainerExecResponseInput` via:
//
//          ContainerExecResponseArgs{...}
type ContainerExecResponseInput interface {
	pulumi.Input

	ToContainerExecResponseOutput() ContainerExecResponseOutput
	ToContainerExecResponseOutputWithContext(context.Context) ContainerExecResponseOutput
}

// The container execution command, for liveness or readiness probe
type ContainerExecResponseArgs struct {
	// The commands to execute within the container.
	Command pulumi.StringArrayInput `pulumi:"command"`
}

func (ContainerExecResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ContainerExecResponse)(nil)).Elem()
}

func (i ContainerExecResponseArgs) ToContainerExecResponseOutput() ContainerExecResponseOutput {
	return i.ToContainerExecResponseOutputWithContext(context.Background())
}

func (i ContainerExecResponseArgs) ToContainerExecResponseOutputWithContext(ctx context.Context) ContainerExecResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerExecResponseOutput)
}

func (i ContainerExecResponseArgs) ToContainerExecResponsePtrOutput() ContainerExecResponsePtrOutput {
	return i.ToContainerExecResponsePtrOutputWithContext(context.Background())
}

func (i ContainerExecResponseArgs) ToContainerExecResponsePtrOutputWithContext(ctx context.Context) ContainerExecResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerExecResponseOutput).ToContainerExecResponsePtrOutputWithContext(ctx)
}

// ContainerExecResponsePtrInput is an input type that accepts ContainerExecResponseArgs, ContainerExecResponsePtr and ContainerExecResponsePtrOutput values.
// You can construct a concrete instance of `ContainerExecResponsePtrInput` via:
//
//          ContainerExecResponseArgs{...}
//
//  or:
//
//          nil
type ContainerExecResponsePtrInput interface {
	pulumi.Input

	ToContainerExecResponsePtrOutput() ContainerExecResponsePtrOutput
	ToContainerExecResponsePtrOutputWithContext(context.Context) ContainerExecResponsePtrOutput
}

type containerExecResponsePtrType ContainerExecResponseArgs

func ContainerExecResponsePtr(v *ContainerExecResponseArgs) ContainerExecResponsePtrInput {
	return (*containerExecResponsePtrType)(v)
}

func (*containerExecResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ContainerExecResponse)(nil)).Elem()
}

func (i *containerExecResponsePtrType) ToContainerExecResponsePtrOutput() ContainerExecResponsePtrOutput {
	return i.ToContainerExecResponsePtrOutputWithContext(context.Background())
}

func (i *containerExecResponsePtrType) ToContainerExecResponsePtrOutputWithContext(ctx context.Context) ContainerExecResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerExecResponsePtrOutput)
}

// The container execution command, for liveness or readiness probe
type ContainerExecResponseOutput struct{ *pulumi.OutputState }

func (ContainerExecResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ContainerExecResponse)(nil)).Elem()
}

func (o ContainerExecResponseOutput) ToContainerExecResponseOutput() ContainerExecResponseOutput {
	return o
}

func (o ContainerExecResponseOutput) ToContainerExecResponseOutputWithContext(ctx context.Context) ContainerExecResponseOutput {
	return o
}

func (o ContainerExecResponseOutput) ToContainerExecResponsePtrOutput() ContainerExecResponsePtrOutput {
	return o.ToContainerExecResponsePtrOutputWithContext(context.Background())
}

func (o ContainerExecResponseOutput) ToContainerExecResponsePtrOutputWithContext(ctx context.Context) ContainerExecResponsePtrOutput {
	return o.ApplyT(func(v ContainerExecResponse) *ContainerExecResponse {
		return &v
	}).(ContainerExecResponsePtrOutput)
}

// The commands to execute within the container.
func (o ContainerExecResponseOutput) Command() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ContainerExecResponse) []string { return v.Command }).(pulumi.StringArrayOutput)
}

type ContainerExecResponsePtrOutput struct{ *pulumi.OutputState }

func (ContainerExecResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ContainerExecResponse)(nil)).Elem()
}

func (o ContainerExecResponsePtrOutput) ToContainerExecResponsePtrOutput() ContainerExecResponsePtrOutput {
	return o
}

func (o ContainerExecResponsePtrOutput) ToContainerExecResponsePtrOutputWithContext(ctx context.Context) ContainerExecResponsePtrOutput {
	return o
}

func (o ContainerExecResponsePtrOutput) Elem() ContainerExecResponseOutput {
	return o.ApplyT(func(v *ContainerExecResponse) ContainerExecResponse { return *v }).(ContainerExecResponseOutput)
}

// The commands to execute within the container.
func (o ContainerExecResponsePtrOutput) Command() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ContainerExecResponse) []string {
		if v == nil {
			return nil
		}
		return v.Command
	}).(pulumi.StringArrayOutput)
}

// Container group diagnostic information.
type ContainerGroupDiagnostics struct {
	// Container group log analytics information.
	LogAnalytics *LogAnalytics `pulumi:"logAnalytics"`
}

// ContainerGroupDiagnosticsInput is an input type that accepts ContainerGroupDiagnosticsArgs and ContainerGroupDiagnosticsOutput values.
// You can construct a concrete instance of `ContainerGroupDiagnosticsInput` via:
//
//          ContainerGroupDiagnosticsArgs{...}
type ContainerGroupDiagnosticsInput interface {
	pulumi.Input

	ToContainerGroupDiagnosticsOutput() ContainerGroupDiagnosticsOutput
	ToContainerGroupDiagnosticsOutputWithContext(context.Context) ContainerGroupDiagnosticsOutput
}

// Container group diagnostic information.
type ContainerGroupDiagnosticsArgs struct {
	// Container group log analytics information.
	LogAnalytics LogAnalyticsPtrInput `pulumi:"logAnalytics"`
}

func (ContainerGroupDiagnosticsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ContainerGroupDiagnostics)(nil)).Elem()
}

func (i ContainerGroupDiagnosticsArgs) ToContainerGroupDiagnosticsOutput() ContainerGroupDiagnosticsOutput {
	return i.ToContainerGroupDiagnosticsOutputWithContext(context.Background())
}

func (i ContainerGroupDiagnosticsArgs) ToContainerGroupDiagnosticsOutputWithContext(ctx context.Context) ContainerGroupDiagnosticsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerGroupDiagnosticsOutput)
}

func (i ContainerGroupDiagnosticsArgs) ToContainerGroupDiagnosticsPtrOutput() ContainerGroupDiagnosticsPtrOutput {
	return i.ToContainerGroupDiagnosticsPtrOutputWithContext(context.Background())
}

func (i ContainerGroupDiagnosticsArgs) ToContainerGroupDiagnosticsPtrOutputWithContext(ctx context.Context) ContainerGroupDiagnosticsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerGroupDiagnosticsOutput).ToContainerGroupDiagnosticsPtrOutputWithContext(ctx)
}

// ContainerGroupDiagnosticsPtrInput is an input type that accepts ContainerGroupDiagnosticsArgs, ContainerGroupDiagnosticsPtr and ContainerGroupDiagnosticsPtrOutput values.
// You can construct a concrete instance of `ContainerGroupDiagnosticsPtrInput` via:
//
//          ContainerGroupDiagnosticsArgs{...}
//
//  or:
//
//          nil
type ContainerGroupDiagnosticsPtrInput interface {
	pulumi.Input

	ToContainerGroupDiagnosticsPtrOutput() ContainerGroupDiagnosticsPtrOutput
	ToContainerGroupDiagnosticsPtrOutputWithContext(context.Context) ContainerGroupDiagnosticsPtrOutput
}

type containerGroupDiagnosticsPtrType ContainerGroupDiagnosticsArgs

func ContainerGroupDiagnosticsPtr(v *ContainerGroupDiagnosticsArgs) ContainerGroupDiagnosticsPtrInput {
	return (*containerGroupDiagnosticsPtrType)(v)
}

func (*containerGroupDiagnosticsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ContainerGroupDiagnostics)(nil)).Elem()
}

func (i *containerGroupDiagnosticsPtrType) ToContainerGroupDiagnosticsPtrOutput() ContainerGroupDiagnosticsPtrOutput {
	return i.ToContainerGroupDiagnosticsPtrOutputWithContext(context.Background())
}

func (i *containerGroupDiagnosticsPtrType) ToContainerGroupDiagnosticsPtrOutputWithContext(ctx context.Context) ContainerGroupDiagnosticsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerGroupDiagnosticsPtrOutput)
}

// Container group diagnostic information.
type ContainerGroupDiagnosticsOutput struct{ *pulumi.OutputState }

func (ContainerGroupDiagnosticsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ContainerGroupDiagnostics)(nil)).Elem()
}

func (o ContainerGroupDiagnosticsOutput) ToContainerGroupDiagnosticsOutput() ContainerGroupDiagnosticsOutput {
	return o
}

func (o ContainerGroupDiagnosticsOutput) ToContainerGroupDiagnosticsOutputWithContext(ctx context.Context) ContainerGroupDiagnosticsOutput {
	return o
}

func (o ContainerGroupDiagnosticsOutput) ToContainerGroupDiagnosticsPtrOutput() ContainerGroupDiagnosticsPtrOutput {
	return o.ToContainerGroupDiagnosticsPtrOutputWithContext(context.Background())
}

func (o ContainerGroupDiagnosticsOutput) ToContainerGroupDiagnosticsPtrOutputWithContext(ctx context.Context) ContainerGroupDiagnosticsPtrOutput {
	return o.ApplyT(func(v ContainerGroupDiagnostics) *ContainerGroupDiagnostics {
		return &v
	}).(ContainerGroupDiagnosticsPtrOutput)
}

// Container group log analytics information.
func (o ContainerGroupDiagnosticsOutput) LogAnalytics() LogAnalyticsPtrOutput {
	return o.ApplyT(func(v ContainerGroupDiagnostics) *LogAnalytics { return v.LogAnalytics }).(LogAnalyticsPtrOutput)
}

type ContainerGroupDiagnosticsPtrOutput struct{ *pulumi.OutputState }

func (ContainerGroupDiagnosticsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ContainerGroupDiagnostics)(nil)).Elem()
}

func (o ContainerGroupDiagnosticsPtrOutput) ToContainerGroupDiagnosticsPtrOutput() ContainerGroupDiagnosticsPtrOutput {
	return o
}

func (o ContainerGroupDiagnosticsPtrOutput) ToContainerGroupDiagnosticsPtrOutputWithContext(ctx context.Context) ContainerGroupDiagnosticsPtrOutput {
	return o
}

func (o ContainerGroupDiagnosticsPtrOutput) Elem() ContainerGroupDiagnosticsOutput {
	return o.ApplyT(func(v *ContainerGroupDiagnostics) ContainerGroupDiagnostics { return *v }).(ContainerGroupDiagnosticsOutput)
}

// Container group log analytics information.
func (o ContainerGroupDiagnosticsPtrOutput) LogAnalytics() LogAnalyticsPtrOutput {
	return o.ApplyT(func(v *ContainerGroupDiagnostics) *LogAnalytics {
		if v == nil {
			return nil
		}
		return v.LogAnalytics
	}).(LogAnalyticsPtrOutput)
}

// Container group diagnostic information.
type ContainerGroupDiagnosticsInvokeResponse struct {
	// Container group log analytics information.
	LogAnalytics *LogAnalyticsInvokeResponse `pulumi:"logAnalytics"`
}

// ContainerGroupDiagnosticsInvokeResponseInput is an input type that accepts ContainerGroupDiagnosticsInvokeResponseArgs and ContainerGroupDiagnosticsInvokeResponseOutput values.
// You can construct a concrete instance of `ContainerGroupDiagnosticsInvokeResponseInput` via:
//
//          ContainerGroupDiagnosticsInvokeResponseArgs{...}
type ContainerGroupDiagnosticsInvokeResponseInput interface {
	pulumi.Input

	ToContainerGroupDiagnosticsInvokeResponseOutput() ContainerGroupDiagnosticsInvokeResponseOutput
	ToContainerGroupDiagnosticsInvokeResponseOutputWithContext(context.Context) ContainerGroupDiagnosticsInvokeResponseOutput
}

// Container group diagnostic information.
type ContainerGroupDiagnosticsInvokeResponseArgs struct {
	// Container group log analytics information.
	LogAnalytics LogAnalyticsInvokeResponsePtrInput `pulumi:"logAnalytics"`
}

func (ContainerGroupDiagnosticsInvokeResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ContainerGroupDiagnosticsInvokeResponse)(nil)).Elem()
}

func (i ContainerGroupDiagnosticsInvokeResponseArgs) ToContainerGroupDiagnosticsInvokeResponseOutput() ContainerGroupDiagnosticsInvokeResponseOutput {
	return i.ToContainerGroupDiagnosticsInvokeResponseOutputWithContext(context.Background())
}

func (i ContainerGroupDiagnosticsInvokeResponseArgs) ToContainerGroupDiagnosticsInvokeResponseOutputWithContext(ctx context.Context) ContainerGroupDiagnosticsInvokeResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerGroupDiagnosticsInvokeResponseOutput)
}

// Container group diagnostic information.
type ContainerGroupDiagnosticsInvokeResponseOutput struct{ *pulumi.OutputState }

func (ContainerGroupDiagnosticsInvokeResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ContainerGroupDiagnosticsInvokeResponse)(nil)).Elem()
}

func (o ContainerGroupDiagnosticsInvokeResponseOutput) ToContainerGroupDiagnosticsInvokeResponseOutput() ContainerGroupDiagnosticsInvokeResponseOutput {
	return o
}

func (o ContainerGroupDiagnosticsInvokeResponseOutput) ToContainerGroupDiagnosticsInvokeResponseOutputWithContext(ctx context.Context) ContainerGroupDiagnosticsInvokeResponseOutput {
	return o
}

// Container group log analytics information.
func (o ContainerGroupDiagnosticsInvokeResponseOutput) LogAnalytics() LogAnalyticsInvokeResponsePtrOutput {
	return o.ApplyT(func(v ContainerGroupDiagnosticsInvokeResponse) *LogAnalyticsInvokeResponse { return v.LogAnalytics }).(LogAnalyticsInvokeResponsePtrOutput)
}

// Container group diagnostic information.
type ContainerGroupDiagnosticsResponse struct {
	// Container group log analytics information.
	LogAnalytics *LogAnalyticsResponse `pulumi:"logAnalytics"`
}

// ContainerGroupDiagnosticsResponseInput is an input type that accepts ContainerGroupDiagnosticsResponseArgs and ContainerGroupDiagnosticsResponseOutput values.
// You can construct a concrete instance of `ContainerGroupDiagnosticsResponseInput` via:
//
//          ContainerGroupDiagnosticsResponseArgs{...}
type ContainerGroupDiagnosticsResponseInput interface {
	pulumi.Input

	ToContainerGroupDiagnosticsResponseOutput() ContainerGroupDiagnosticsResponseOutput
	ToContainerGroupDiagnosticsResponseOutputWithContext(context.Context) ContainerGroupDiagnosticsResponseOutput
}

// Container group diagnostic information.
type ContainerGroupDiagnosticsResponseArgs struct {
	// Container group log analytics information.
	LogAnalytics LogAnalyticsResponsePtrInput `pulumi:"logAnalytics"`
}

func (ContainerGroupDiagnosticsResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ContainerGroupDiagnosticsResponse)(nil)).Elem()
}

func (i ContainerGroupDiagnosticsResponseArgs) ToContainerGroupDiagnosticsResponseOutput() ContainerGroupDiagnosticsResponseOutput {
	return i.ToContainerGroupDiagnosticsResponseOutputWithContext(context.Background())
}

func (i ContainerGroupDiagnosticsResponseArgs) ToContainerGroupDiagnosticsResponseOutputWithContext(ctx context.Context) ContainerGroupDiagnosticsResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerGroupDiagnosticsResponseOutput)
}

func (i ContainerGroupDiagnosticsResponseArgs) ToContainerGroupDiagnosticsResponsePtrOutput() ContainerGroupDiagnosticsResponsePtrOutput {
	return i.ToContainerGroupDiagnosticsResponsePtrOutputWithContext(context.Background())
}

func (i ContainerGroupDiagnosticsResponseArgs) ToContainerGroupDiagnosticsResponsePtrOutputWithContext(ctx context.Context) ContainerGroupDiagnosticsResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerGroupDiagnosticsResponseOutput).ToContainerGroupDiagnosticsResponsePtrOutputWithContext(ctx)
}

// ContainerGroupDiagnosticsResponsePtrInput is an input type that accepts ContainerGroupDiagnosticsResponseArgs, ContainerGroupDiagnosticsResponsePtr and ContainerGroupDiagnosticsResponsePtrOutput values.
// You can construct a concrete instance of `ContainerGroupDiagnosticsResponsePtrInput` via:
//
//          ContainerGroupDiagnosticsResponseArgs{...}
//
//  or:
//
//          nil
type ContainerGroupDiagnosticsResponsePtrInput interface {
	pulumi.Input

	ToContainerGroupDiagnosticsResponsePtrOutput() ContainerGroupDiagnosticsResponsePtrOutput
	ToContainerGroupDiagnosticsResponsePtrOutputWithContext(context.Context) ContainerGroupDiagnosticsResponsePtrOutput
}

type containerGroupDiagnosticsResponsePtrType ContainerGroupDiagnosticsResponseArgs

func ContainerGroupDiagnosticsResponsePtr(v *ContainerGroupDiagnosticsResponseArgs) ContainerGroupDiagnosticsResponsePtrInput {
	return (*containerGroupDiagnosticsResponsePtrType)(v)
}

func (*containerGroupDiagnosticsResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ContainerGroupDiagnosticsResponse)(nil)).Elem()
}

func (i *containerGroupDiagnosticsResponsePtrType) ToContainerGroupDiagnosticsResponsePtrOutput() ContainerGroupDiagnosticsResponsePtrOutput {
	return i.ToContainerGroupDiagnosticsResponsePtrOutputWithContext(context.Background())
}

func (i *containerGroupDiagnosticsResponsePtrType) ToContainerGroupDiagnosticsResponsePtrOutputWithContext(ctx context.Context) ContainerGroupDiagnosticsResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerGroupDiagnosticsResponsePtrOutput)
}

// Container group diagnostic information.
type ContainerGroupDiagnosticsResponseOutput struct{ *pulumi.OutputState }

func (ContainerGroupDiagnosticsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ContainerGroupDiagnosticsResponse)(nil)).Elem()
}

func (o ContainerGroupDiagnosticsResponseOutput) ToContainerGroupDiagnosticsResponseOutput() ContainerGroupDiagnosticsResponseOutput {
	return o
}

func (o ContainerGroupDiagnosticsResponseOutput) ToContainerGroupDiagnosticsResponseOutputWithContext(ctx context.Context) ContainerGroupDiagnosticsResponseOutput {
	return o
}

func (o ContainerGroupDiagnosticsResponseOutput) ToContainerGroupDiagnosticsResponsePtrOutput() ContainerGroupDiagnosticsResponsePtrOutput {
	return o.ToContainerGroupDiagnosticsResponsePtrOutputWithContext(context.Background())
}

func (o ContainerGroupDiagnosticsResponseOutput) ToContainerGroupDiagnosticsResponsePtrOutputWithContext(ctx context.Context) ContainerGroupDiagnosticsResponsePtrOutput {
	return o.ApplyT(func(v ContainerGroupDiagnosticsResponse) *ContainerGroupDiagnosticsResponse {
		return &v
	}).(ContainerGroupDiagnosticsResponsePtrOutput)
}

// Container group log analytics information.
func (o ContainerGroupDiagnosticsResponseOutput) LogAnalytics() LogAnalyticsResponsePtrOutput {
	return o.ApplyT(func(v ContainerGroupDiagnosticsResponse) *LogAnalyticsResponse { return v.LogAnalytics }).(LogAnalyticsResponsePtrOutput)
}

type ContainerGroupDiagnosticsResponsePtrOutput struct{ *pulumi.OutputState }

func (ContainerGroupDiagnosticsResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ContainerGroupDiagnosticsResponse)(nil)).Elem()
}

func (o ContainerGroupDiagnosticsResponsePtrOutput) ToContainerGroupDiagnosticsResponsePtrOutput() ContainerGroupDiagnosticsResponsePtrOutput {
	return o
}

func (o ContainerGroupDiagnosticsResponsePtrOutput) ToContainerGroupDiagnosticsResponsePtrOutputWithContext(ctx context.Context) ContainerGroupDiagnosticsResponsePtrOutput {
	return o
}

func (o ContainerGroupDiagnosticsResponsePtrOutput) Elem() ContainerGroupDiagnosticsResponseOutput {
	return o.ApplyT(func(v *ContainerGroupDiagnosticsResponse) ContainerGroupDiagnosticsResponse { return *v }).(ContainerGroupDiagnosticsResponseOutput)
}

// Container group log analytics information.
func (o ContainerGroupDiagnosticsResponsePtrOutput) LogAnalytics() LogAnalyticsResponsePtrOutput {
	return o.ApplyT(func(v *ContainerGroupDiagnosticsResponse) *LogAnalyticsResponse {
		if v == nil {
			return nil
		}
		return v.LogAnalytics
	}).(LogAnalyticsResponsePtrOutput)
}

// Identity for the container group.
type ContainerGroupIdentity struct {
	// The type of identity used for the container group. The type 'SystemAssigned, UserAssigned' includes both an implicitly created identity and a set of user assigned identities. The type 'None' will remove any identities from the container group.
	Type *string `pulumi:"type"`
	// The list of user identities associated with the container group. The user identity dictionary key references will be ARM resource ids in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}'.
	UserAssignedIdentities map[string]interface{} `pulumi:"userAssignedIdentities"`
}

// ContainerGroupIdentityInput is an input type that accepts ContainerGroupIdentityArgs and ContainerGroupIdentityOutput values.
// You can construct a concrete instance of `ContainerGroupIdentityInput` via:
//
//          ContainerGroupIdentityArgs{...}
type ContainerGroupIdentityInput interface {
	pulumi.Input

	ToContainerGroupIdentityOutput() ContainerGroupIdentityOutput
	ToContainerGroupIdentityOutputWithContext(context.Context) ContainerGroupIdentityOutput
}

// Identity for the container group.
type ContainerGroupIdentityArgs struct {
	// The type of identity used for the container group. The type 'SystemAssigned, UserAssigned' includes both an implicitly created identity and a set of user assigned identities. The type 'None' will remove any identities from the container group.
	Type ResourceIdentityType `pulumi:"type"`
	// The list of user identities associated with the container group. The user identity dictionary key references will be ARM resource ids in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}'.
	UserAssignedIdentities pulumi.MapInput `pulumi:"userAssignedIdentities"`
}

func (ContainerGroupIdentityArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ContainerGroupIdentity)(nil)).Elem()
}

func (i ContainerGroupIdentityArgs) ToContainerGroupIdentityOutput() ContainerGroupIdentityOutput {
	return i.ToContainerGroupIdentityOutputWithContext(context.Background())
}

func (i ContainerGroupIdentityArgs) ToContainerGroupIdentityOutputWithContext(ctx context.Context) ContainerGroupIdentityOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerGroupIdentityOutput)
}

func (i ContainerGroupIdentityArgs) ToContainerGroupIdentityPtrOutput() ContainerGroupIdentityPtrOutput {
	return i.ToContainerGroupIdentityPtrOutputWithContext(context.Background())
}

func (i ContainerGroupIdentityArgs) ToContainerGroupIdentityPtrOutputWithContext(ctx context.Context) ContainerGroupIdentityPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerGroupIdentityOutput).ToContainerGroupIdentityPtrOutputWithContext(ctx)
}

// ContainerGroupIdentityPtrInput is an input type that accepts ContainerGroupIdentityArgs, ContainerGroupIdentityPtr and ContainerGroupIdentityPtrOutput values.
// You can construct a concrete instance of `ContainerGroupIdentityPtrInput` via:
//
//          ContainerGroupIdentityArgs{...}
//
//  or:
//
//          nil
type ContainerGroupIdentityPtrInput interface {
	pulumi.Input

	ToContainerGroupIdentityPtrOutput() ContainerGroupIdentityPtrOutput
	ToContainerGroupIdentityPtrOutputWithContext(context.Context) ContainerGroupIdentityPtrOutput
}

type containerGroupIdentityPtrType ContainerGroupIdentityArgs

func ContainerGroupIdentityPtr(v *ContainerGroupIdentityArgs) ContainerGroupIdentityPtrInput {
	return (*containerGroupIdentityPtrType)(v)
}

func (*containerGroupIdentityPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ContainerGroupIdentity)(nil)).Elem()
}

func (i *containerGroupIdentityPtrType) ToContainerGroupIdentityPtrOutput() ContainerGroupIdentityPtrOutput {
	return i.ToContainerGroupIdentityPtrOutputWithContext(context.Background())
}

func (i *containerGroupIdentityPtrType) ToContainerGroupIdentityPtrOutputWithContext(ctx context.Context) ContainerGroupIdentityPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerGroupIdentityPtrOutput)
}

// Identity for the container group.
type ContainerGroupIdentityOutput struct{ *pulumi.OutputState }

func (ContainerGroupIdentityOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ContainerGroupIdentity)(nil)).Elem()
}

func (o ContainerGroupIdentityOutput) ToContainerGroupIdentityOutput() ContainerGroupIdentityOutput {
	return o
}

func (o ContainerGroupIdentityOutput) ToContainerGroupIdentityOutputWithContext(ctx context.Context) ContainerGroupIdentityOutput {
	return o
}

func (o ContainerGroupIdentityOutput) ToContainerGroupIdentityPtrOutput() ContainerGroupIdentityPtrOutput {
	return o.ToContainerGroupIdentityPtrOutputWithContext(context.Background())
}

func (o ContainerGroupIdentityOutput) ToContainerGroupIdentityPtrOutputWithContext(ctx context.Context) ContainerGroupIdentityPtrOutput {
	return o.ApplyT(func(v ContainerGroupIdentity) *ContainerGroupIdentity {
		return &v
	}).(ContainerGroupIdentityPtrOutput)
}

// The type of identity used for the container group. The type 'SystemAssigned, UserAssigned' includes both an implicitly created identity and a set of user assigned identities. The type 'None' will remove any identities from the container group.
func (o ContainerGroupIdentityOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContainerGroupIdentity) *string { return v.Type }).(pulumi.StringPtrOutput)
}

// The list of user identities associated with the container group. The user identity dictionary key references will be ARM resource ids in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}'.
func (o ContainerGroupIdentityOutput) UserAssignedIdentities() pulumi.MapOutput {
	return o.ApplyT(func(v ContainerGroupIdentity) map[string]interface{} { return v.UserAssignedIdentities }).(pulumi.MapOutput)
}

type ContainerGroupIdentityPtrOutput struct{ *pulumi.OutputState }

func (ContainerGroupIdentityPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ContainerGroupIdentity)(nil)).Elem()
}

func (o ContainerGroupIdentityPtrOutput) ToContainerGroupIdentityPtrOutput() ContainerGroupIdentityPtrOutput {
	return o
}

func (o ContainerGroupIdentityPtrOutput) ToContainerGroupIdentityPtrOutputWithContext(ctx context.Context) ContainerGroupIdentityPtrOutput {
	return o
}

func (o ContainerGroupIdentityPtrOutput) Elem() ContainerGroupIdentityOutput {
	return o.ApplyT(func(v *ContainerGroupIdentity) ContainerGroupIdentity { return *v }).(ContainerGroupIdentityOutput)
}

// The type of identity used for the container group. The type 'SystemAssigned, UserAssigned' includes both an implicitly created identity and a set of user assigned identities. The type 'None' will remove any identities from the container group.
func (o ContainerGroupIdentityPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ContainerGroupIdentity) *string {
		if v == nil {
			return nil
		}
		return v.Type
	}).(pulumi.StringPtrOutput)
}

// The list of user identities associated with the container group. The user identity dictionary key references will be ARM resource ids in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}'.
func (o ContainerGroupIdentityPtrOutput) UserAssignedIdentities() pulumi.MapOutput {
	return o.ApplyT(func(v *ContainerGroupIdentity) map[string]interface{} {
		if v == nil {
			return nil
		}
		return v.UserAssignedIdentities
	}).(pulumi.MapOutput)
}

// Identity for the container group.
type ContainerGroupIdentityInvokeResponse struct {
	// The principal id of the container group identity. This property will only be provided for a system assigned identity.
	PrincipalId string `pulumi:"principalId"`
	// The tenant id associated with the container group. This property will only be provided for a system assigned identity.
	TenantId string `pulumi:"tenantId"`
	// The type of identity used for the container group. The type 'SystemAssigned, UserAssigned' includes both an implicitly created identity and a set of user assigned identities. The type 'None' will remove any identities from the container group.
	Type *string `pulumi:"type"`
	// The list of user identities associated with the container group. The user identity dictionary key references will be ARM resource ids in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}'.
	UserAssignedIdentities map[string]ContainerGroupIdentityInvokeResponseUserAssignedIdentities `pulumi:"userAssignedIdentities"`
}

// ContainerGroupIdentityInvokeResponseInput is an input type that accepts ContainerGroupIdentityInvokeResponseArgs and ContainerGroupIdentityInvokeResponseOutput values.
// You can construct a concrete instance of `ContainerGroupIdentityInvokeResponseInput` via:
//
//          ContainerGroupIdentityInvokeResponseArgs{...}
type ContainerGroupIdentityInvokeResponseInput interface {
	pulumi.Input

	ToContainerGroupIdentityInvokeResponseOutput() ContainerGroupIdentityInvokeResponseOutput
	ToContainerGroupIdentityInvokeResponseOutputWithContext(context.Context) ContainerGroupIdentityInvokeResponseOutput
}

// Identity for the container group.
type ContainerGroupIdentityInvokeResponseArgs struct {
	// The principal id of the container group identity. This property will only be provided for a system assigned identity.
	PrincipalId pulumi.StringInput `pulumi:"principalId"`
	// The tenant id associated with the container group. This property will only be provided for a system assigned identity.
	TenantId pulumi.StringInput `pulumi:"tenantId"`
	// The type of identity used for the container group. The type 'SystemAssigned, UserAssigned' includes both an implicitly created identity and a set of user assigned identities. The type 'None' will remove any identities from the container group.
	Type pulumi.StringPtrInput `pulumi:"type"`
	// The list of user identities associated with the container group. The user identity dictionary key references will be ARM resource ids in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}'.
	UserAssignedIdentities ContainerGroupIdentityInvokeResponseUserAssignedIdentitiesMapInput `pulumi:"userAssignedIdentities"`
}

func (ContainerGroupIdentityInvokeResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ContainerGroupIdentityInvokeResponse)(nil)).Elem()
}

func (i ContainerGroupIdentityInvokeResponseArgs) ToContainerGroupIdentityInvokeResponseOutput() ContainerGroupIdentityInvokeResponseOutput {
	return i.ToContainerGroupIdentityInvokeResponseOutputWithContext(context.Background())
}

func (i ContainerGroupIdentityInvokeResponseArgs) ToContainerGroupIdentityInvokeResponseOutputWithContext(ctx context.Context) ContainerGroupIdentityInvokeResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerGroupIdentityInvokeResponseOutput)
}

// Identity for the container group.
type ContainerGroupIdentityInvokeResponseOutput struct{ *pulumi.OutputState }

func (ContainerGroupIdentityInvokeResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ContainerGroupIdentityInvokeResponse)(nil)).Elem()
}

func (o ContainerGroupIdentityInvokeResponseOutput) ToContainerGroupIdentityInvokeResponseOutput() ContainerGroupIdentityInvokeResponseOutput {
	return o
}

func (o ContainerGroupIdentityInvokeResponseOutput) ToContainerGroupIdentityInvokeResponseOutputWithContext(ctx context.Context) ContainerGroupIdentityInvokeResponseOutput {
	return o
}

// The principal id of the container group identity. This property will only be provided for a system assigned identity.
func (o ContainerGroupIdentityInvokeResponseOutput) PrincipalId() pulumi.StringOutput {
	return o.ApplyT(func(v ContainerGroupIdentityInvokeResponse) string { return v.PrincipalId }).(pulumi.StringOutput)
}

// The tenant id associated with the container group. This property will only be provided for a system assigned identity.
func (o ContainerGroupIdentityInvokeResponseOutput) TenantId() pulumi.StringOutput {
	return o.ApplyT(func(v ContainerGroupIdentityInvokeResponse) string { return v.TenantId }).(pulumi.StringOutput)
}

// The type of identity used for the container group. The type 'SystemAssigned, UserAssigned' includes both an implicitly created identity and a set of user assigned identities. The type 'None' will remove any identities from the container group.
func (o ContainerGroupIdentityInvokeResponseOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContainerGroupIdentityInvokeResponse) *string { return v.Type }).(pulumi.StringPtrOutput)
}

// The list of user identities associated with the container group. The user identity dictionary key references will be ARM resource ids in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}'.
func (o ContainerGroupIdentityInvokeResponseOutput) UserAssignedIdentities() ContainerGroupIdentityInvokeResponseUserAssignedIdentitiesMapOutput {
	return o.ApplyT(func(v ContainerGroupIdentityInvokeResponse) map[string]ContainerGroupIdentityInvokeResponseUserAssignedIdentities {
		return v.UserAssignedIdentities
	}).(ContainerGroupIdentityInvokeResponseUserAssignedIdentitiesMapOutput)
}

type ContainerGroupIdentityInvokeResponseUserAssignedIdentities struct {
	// The client id of user assigned identity.
	ClientId string `pulumi:"clientId"`
	// The principal id of user assigned identity.
	PrincipalId string `pulumi:"principalId"`
}

// ContainerGroupIdentityInvokeResponseUserAssignedIdentitiesInput is an input type that accepts ContainerGroupIdentityInvokeResponseUserAssignedIdentitiesArgs and ContainerGroupIdentityInvokeResponseUserAssignedIdentitiesOutput values.
// You can construct a concrete instance of `ContainerGroupIdentityInvokeResponseUserAssignedIdentitiesInput` via:
//
//          ContainerGroupIdentityInvokeResponseUserAssignedIdentitiesArgs{...}
type ContainerGroupIdentityInvokeResponseUserAssignedIdentitiesInput interface {
	pulumi.Input

	ToContainerGroupIdentityInvokeResponseUserAssignedIdentitiesOutput() ContainerGroupIdentityInvokeResponseUserAssignedIdentitiesOutput
	ToContainerGroupIdentityInvokeResponseUserAssignedIdentitiesOutputWithContext(context.Context) ContainerGroupIdentityInvokeResponseUserAssignedIdentitiesOutput
}

type ContainerGroupIdentityInvokeResponseUserAssignedIdentitiesArgs struct {
	// The client id of user assigned identity.
	ClientId pulumi.StringInput `pulumi:"clientId"`
	// The principal id of user assigned identity.
	PrincipalId pulumi.StringInput `pulumi:"principalId"`
}

func (ContainerGroupIdentityInvokeResponseUserAssignedIdentitiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ContainerGroupIdentityInvokeResponseUserAssignedIdentities)(nil)).Elem()
}

func (i ContainerGroupIdentityInvokeResponseUserAssignedIdentitiesArgs) ToContainerGroupIdentityInvokeResponseUserAssignedIdentitiesOutput() ContainerGroupIdentityInvokeResponseUserAssignedIdentitiesOutput {
	return i.ToContainerGroupIdentityInvokeResponseUserAssignedIdentitiesOutputWithContext(context.Background())
}

func (i ContainerGroupIdentityInvokeResponseUserAssignedIdentitiesArgs) ToContainerGroupIdentityInvokeResponseUserAssignedIdentitiesOutputWithContext(ctx context.Context) ContainerGroupIdentityInvokeResponseUserAssignedIdentitiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerGroupIdentityInvokeResponseUserAssignedIdentitiesOutput)
}

// ContainerGroupIdentityInvokeResponseUserAssignedIdentitiesMapInput is an input type that accepts ContainerGroupIdentityInvokeResponseUserAssignedIdentitiesMap and ContainerGroupIdentityInvokeResponseUserAssignedIdentitiesMapOutput values.
// You can construct a concrete instance of `ContainerGroupIdentityInvokeResponseUserAssignedIdentitiesMapInput` via:
//
//          ContainerGroupIdentityInvokeResponseUserAssignedIdentitiesMap{ "key": ContainerGroupIdentityInvokeResponseUserAssignedIdentitiesArgs{...} }
type ContainerGroupIdentityInvokeResponseUserAssignedIdentitiesMapInput interface {
	pulumi.Input

	ToContainerGroupIdentityInvokeResponseUserAssignedIdentitiesMapOutput() ContainerGroupIdentityInvokeResponseUserAssignedIdentitiesMapOutput
	ToContainerGroupIdentityInvokeResponseUserAssignedIdentitiesMapOutputWithContext(context.Context) ContainerGroupIdentityInvokeResponseUserAssignedIdentitiesMapOutput
}

type ContainerGroupIdentityInvokeResponseUserAssignedIdentitiesMap map[string]ContainerGroupIdentityInvokeResponseUserAssignedIdentitiesInput

func (ContainerGroupIdentityInvokeResponseUserAssignedIdentitiesMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]ContainerGroupIdentityInvokeResponseUserAssignedIdentities)(nil)).Elem()
}

func (i ContainerGroupIdentityInvokeResponseUserAssignedIdentitiesMap) ToContainerGroupIdentityInvokeResponseUserAssignedIdentitiesMapOutput() ContainerGroupIdentityInvokeResponseUserAssignedIdentitiesMapOutput {
	return i.ToContainerGroupIdentityInvokeResponseUserAssignedIdentitiesMapOutputWithContext(context.Background())
}

func (i ContainerGroupIdentityInvokeResponseUserAssignedIdentitiesMap) ToContainerGroupIdentityInvokeResponseUserAssignedIdentitiesMapOutputWithContext(ctx context.Context) ContainerGroupIdentityInvokeResponseUserAssignedIdentitiesMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerGroupIdentityInvokeResponseUserAssignedIdentitiesMapOutput)
}

type ContainerGroupIdentityInvokeResponseUserAssignedIdentitiesOutput struct{ *pulumi.OutputState }

func (ContainerGroupIdentityInvokeResponseUserAssignedIdentitiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ContainerGroupIdentityInvokeResponseUserAssignedIdentities)(nil)).Elem()
}

func (o ContainerGroupIdentityInvokeResponseUserAssignedIdentitiesOutput) ToContainerGroupIdentityInvokeResponseUserAssignedIdentitiesOutput() ContainerGroupIdentityInvokeResponseUserAssignedIdentitiesOutput {
	return o
}

func (o ContainerGroupIdentityInvokeResponseUserAssignedIdentitiesOutput) ToContainerGroupIdentityInvokeResponseUserAssignedIdentitiesOutputWithContext(ctx context.Context) ContainerGroupIdentityInvokeResponseUserAssignedIdentitiesOutput {
	return o
}

// The client id of user assigned identity.
func (o ContainerGroupIdentityInvokeResponseUserAssignedIdentitiesOutput) ClientId() pulumi.StringOutput {
	return o.ApplyT(func(v ContainerGroupIdentityInvokeResponseUserAssignedIdentities) string { return v.ClientId }).(pulumi.StringOutput)
}

// The principal id of user assigned identity.
func (o ContainerGroupIdentityInvokeResponseUserAssignedIdentitiesOutput) PrincipalId() pulumi.StringOutput {
	return o.ApplyT(func(v ContainerGroupIdentityInvokeResponseUserAssignedIdentities) string { return v.PrincipalId }).(pulumi.StringOutput)
}

type ContainerGroupIdentityInvokeResponseUserAssignedIdentitiesMapOutput struct{ *pulumi.OutputState }

func (ContainerGroupIdentityInvokeResponseUserAssignedIdentitiesMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]ContainerGroupIdentityInvokeResponseUserAssignedIdentities)(nil)).Elem()
}

func (o ContainerGroupIdentityInvokeResponseUserAssignedIdentitiesMapOutput) ToContainerGroupIdentityInvokeResponseUserAssignedIdentitiesMapOutput() ContainerGroupIdentityInvokeResponseUserAssignedIdentitiesMapOutput {
	return o
}

func (o ContainerGroupIdentityInvokeResponseUserAssignedIdentitiesMapOutput) ToContainerGroupIdentityInvokeResponseUserAssignedIdentitiesMapOutputWithContext(ctx context.Context) ContainerGroupIdentityInvokeResponseUserAssignedIdentitiesMapOutput {
	return o
}

func (o ContainerGroupIdentityInvokeResponseUserAssignedIdentitiesMapOutput) MapIndex(k pulumi.StringInput) ContainerGroupIdentityInvokeResponseUserAssignedIdentitiesOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) ContainerGroupIdentityInvokeResponseUserAssignedIdentities {
		return vs[0].(map[string]ContainerGroupIdentityInvokeResponseUserAssignedIdentities)[vs[1].(string)]
	}).(ContainerGroupIdentityInvokeResponseUserAssignedIdentitiesOutput)
}

// Identity for the container group.
type ContainerGroupIdentityResponse struct {
	// The principal id of the container group identity. This property will only be provided for a system assigned identity.
	PrincipalId string `pulumi:"principalId"`
	// The tenant id associated with the container group. This property will only be provided for a system assigned identity.
	TenantId string `pulumi:"tenantId"`
	// The type of identity used for the container group. The type 'SystemAssigned, UserAssigned' includes both an implicitly created identity and a set of user assigned identities. The type 'None' will remove any identities from the container group.
	Type *string `pulumi:"type"`
	// The list of user identities associated with the container group. The user identity dictionary key references will be ARM resource ids in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}'.
	UserAssignedIdentities map[string]ContainerGroupIdentityResponseUserAssignedIdentities `pulumi:"userAssignedIdentities"`
}

// ContainerGroupIdentityResponseInput is an input type that accepts ContainerGroupIdentityResponseArgs and ContainerGroupIdentityResponseOutput values.
// You can construct a concrete instance of `ContainerGroupIdentityResponseInput` via:
//
//          ContainerGroupIdentityResponseArgs{...}
type ContainerGroupIdentityResponseInput interface {
	pulumi.Input

	ToContainerGroupIdentityResponseOutput() ContainerGroupIdentityResponseOutput
	ToContainerGroupIdentityResponseOutputWithContext(context.Context) ContainerGroupIdentityResponseOutput
}

// Identity for the container group.
type ContainerGroupIdentityResponseArgs struct {
	// The principal id of the container group identity. This property will only be provided for a system assigned identity.
	PrincipalId pulumi.StringInput `pulumi:"principalId"`
	// The tenant id associated with the container group. This property will only be provided for a system assigned identity.
	TenantId pulumi.StringInput `pulumi:"tenantId"`
	// The type of identity used for the container group. The type 'SystemAssigned, UserAssigned' includes both an implicitly created identity and a set of user assigned identities. The type 'None' will remove any identities from the container group.
	Type pulumi.StringPtrInput `pulumi:"type"`
	// The list of user identities associated with the container group. The user identity dictionary key references will be ARM resource ids in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}'.
	UserAssignedIdentities ContainerGroupIdentityResponseUserAssignedIdentitiesMapInput `pulumi:"userAssignedIdentities"`
}

func (ContainerGroupIdentityResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ContainerGroupIdentityResponse)(nil)).Elem()
}

func (i ContainerGroupIdentityResponseArgs) ToContainerGroupIdentityResponseOutput() ContainerGroupIdentityResponseOutput {
	return i.ToContainerGroupIdentityResponseOutputWithContext(context.Background())
}

func (i ContainerGroupIdentityResponseArgs) ToContainerGroupIdentityResponseOutputWithContext(ctx context.Context) ContainerGroupIdentityResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerGroupIdentityResponseOutput)
}

func (i ContainerGroupIdentityResponseArgs) ToContainerGroupIdentityResponsePtrOutput() ContainerGroupIdentityResponsePtrOutput {
	return i.ToContainerGroupIdentityResponsePtrOutputWithContext(context.Background())
}

func (i ContainerGroupIdentityResponseArgs) ToContainerGroupIdentityResponsePtrOutputWithContext(ctx context.Context) ContainerGroupIdentityResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerGroupIdentityResponseOutput).ToContainerGroupIdentityResponsePtrOutputWithContext(ctx)
}

// ContainerGroupIdentityResponsePtrInput is an input type that accepts ContainerGroupIdentityResponseArgs, ContainerGroupIdentityResponsePtr and ContainerGroupIdentityResponsePtrOutput values.
// You can construct a concrete instance of `ContainerGroupIdentityResponsePtrInput` via:
//
//          ContainerGroupIdentityResponseArgs{...}
//
//  or:
//
//          nil
type ContainerGroupIdentityResponsePtrInput interface {
	pulumi.Input

	ToContainerGroupIdentityResponsePtrOutput() ContainerGroupIdentityResponsePtrOutput
	ToContainerGroupIdentityResponsePtrOutputWithContext(context.Context) ContainerGroupIdentityResponsePtrOutput
}

type containerGroupIdentityResponsePtrType ContainerGroupIdentityResponseArgs

func ContainerGroupIdentityResponsePtr(v *ContainerGroupIdentityResponseArgs) ContainerGroupIdentityResponsePtrInput {
	return (*containerGroupIdentityResponsePtrType)(v)
}

func (*containerGroupIdentityResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ContainerGroupIdentityResponse)(nil)).Elem()
}

func (i *containerGroupIdentityResponsePtrType) ToContainerGroupIdentityResponsePtrOutput() ContainerGroupIdentityResponsePtrOutput {
	return i.ToContainerGroupIdentityResponsePtrOutputWithContext(context.Background())
}

func (i *containerGroupIdentityResponsePtrType) ToContainerGroupIdentityResponsePtrOutputWithContext(ctx context.Context) ContainerGroupIdentityResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerGroupIdentityResponsePtrOutput)
}

// Identity for the container group.
type ContainerGroupIdentityResponseOutput struct{ *pulumi.OutputState }

func (ContainerGroupIdentityResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ContainerGroupIdentityResponse)(nil)).Elem()
}

func (o ContainerGroupIdentityResponseOutput) ToContainerGroupIdentityResponseOutput() ContainerGroupIdentityResponseOutput {
	return o
}

func (o ContainerGroupIdentityResponseOutput) ToContainerGroupIdentityResponseOutputWithContext(ctx context.Context) ContainerGroupIdentityResponseOutput {
	return o
}

func (o ContainerGroupIdentityResponseOutput) ToContainerGroupIdentityResponsePtrOutput() ContainerGroupIdentityResponsePtrOutput {
	return o.ToContainerGroupIdentityResponsePtrOutputWithContext(context.Background())
}

func (o ContainerGroupIdentityResponseOutput) ToContainerGroupIdentityResponsePtrOutputWithContext(ctx context.Context) ContainerGroupIdentityResponsePtrOutput {
	return o.ApplyT(func(v ContainerGroupIdentityResponse) *ContainerGroupIdentityResponse {
		return &v
	}).(ContainerGroupIdentityResponsePtrOutput)
}

// The principal id of the container group identity. This property will only be provided for a system assigned identity.
func (o ContainerGroupIdentityResponseOutput) PrincipalId() pulumi.StringOutput {
	return o.ApplyT(func(v ContainerGroupIdentityResponse) string { return v.PrincipalId }).(pulumi.StringOutput)
}

// The tenant id associated with the container group. This property will only be provided for a system assigned identity.
func (o ContainerGroupIdentityResponseOutput) TenantId() pulumi.StringOutput {
	return o.ApplyT(func(v ContainerGroupIdentityResponse) string { return v.TenantId }).(pulumi.StringOutput)
}

// The type of identity used for the container group. The type 'SystemAssigned, UserAssigned' includes both an implicitly created identity and a set of user assigned identities. The type 'None' will remove any identities from the container group.
func (o ContainerGroupIdentityResponseOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContainerGroupIdentityResponse) *string { return v.Type }).(pulumi.StringPtrOutput)
}

// The list of user identities associated with the container group. The user identity dictionary key references will be ARM resource ids in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}'.
func (o ContainerGroupIdentityResponseOutput) UserAssignedIdentities() ContainerGroupIdentityResponseUserAssignedIdentitiesMapOutput {
	return o.ApplyT(func(v ContainerGroupIdentityResponse) map[string]ContainerGroupIdentityResponseUserAssignedIdentities {
		return v.UserAssignedIdentities
	}).(ContainerGroupIdentityResponseUserAssignedIdentitiesMapOutput)
}

type ContainerGroupIdentityResponsePtrOutput struct{ *pulumi.OutputState }

func (ContainerGroupIdentityResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ContainerGroupIdentityResponse)(nil)).Elem()
}

func (o ContainerGroupIdentityResponsePtrOutput) ToContainerGroupIdentityResponsePtrOutput() ContainerGroupIdentityResponsePtrOutput {
	return o
}

func (o ContainerGroupIdentityResponsePtrOutput) ToContainerGroupIdentityResponsePtrOutputWithContext(ctx context.Context) ContainerGroupIdentityResponsePtrOutput {
	return o
}

func (o ContainerGroupIdentityResponsePtrOutput) Elem() ContainerGroupIdentityResponseOutput {
	return o.ApplyT(func(v *ContainerGroupIdentityResponse) ContainerGroupIdentityResponse { return *v }).(ContainerGroupIdentityResponseOutput)
}

// The principal id of the container group identity. This property will only be provided for a system assigned identity.
func (o ContainerGroupIdentityResponsePtrOutput) PrincipalId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ContainerGroupIdentityResponse) *string {
		if v == nil {
			return nil
		}
		return &v.PrincipalId
	}).(pulumi.StringPtrOutput)
}

// The tenant id associated with the container group. This property will only be provided for a system assigned identity.
func (o ContainerGroupIdentityResponsePtrOutput) TenantId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ContainerGroupIdentityResponse) *string {
		if v == nil {
			return nil
		}
		return &v.TenantId
	}).(pulumi.StringPtrOutput)
}

// The type of identity used for the container group. The type 'SystemAssigned, UserAssigned' includes both an implicitly created identity and a set of user assigned identities. The type 'None' will remove any identities from the container group.
func (o ContainerGroupIdentityResponsePtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ContainerGroupIdentityResponse) *string {
		if v == nil {
			return nil
		}
		return v.Type
	}).(pulumi.StringPtrOutput)
}

// The list of user identities associated with the container group. The user identity dictionary key references will be ARM resource ids in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}'.
func (o ContainerGroupIdentityResponsePtrOutput) UserAssignedIdentities() ContainerGroupIdentityResponseUserAssignedIdentitiesMapOutput {
	return o.ApplyT(func(v *ContainerGroupIdentityResponse) map[string]ContainerGroupIdentityResponseUserAssignedIdentities {
		if v == nil {
			return nil
		}
		return v.UserAssignedIdentities
	}).(ContainerGroupIdentityResponseUserAssignedIdentitiesMapOutput)
}

type ContainerGroupIdentityResponseUserAssignedIdentities struct {
	// The client id of user assigned identity.
	ClientId string `pulumi:"clientId"`
	// The principal id of user assigned identity.
	PrincipalId string `pulumi:"principalId"`
}

// ContainerGroupIdentityResponseUserAssignedIdentitiesInput is an input type that accepts ContainerGroupIdentityResponseUserAssignedIdentitiesArgs and ContainerGroupIdentityResponseUserAssignedIdentitiesOutput values.
// You can construct a concrete instance of `ContainerGroupIdentityResponseUserAssignedIdentitiesInput` via:
//
//          ContainerGroupIdentityResponseUserAssignedIdentitiesArgs{...}
type ContainerGroupIdentityResponseUserAssignedIdentitiesInput interface {
	pulumi.Input

	ToContainerGroupIdentityResponseUserAssignedIdentitiesOutput() ContainerGroupIdentityResponseUserAssignedIdentitiesOutput
	ToContainerGroupIdentityResponseUserAssignedIdentitiesOutputWithContext(context.Context) ContainerGroupIdentityResponseUserAssignedIdentitiesOutput
}

type ContainerGroupIdentityResponseUserAssignedIdentitiesArgs struct {
	// The client id of user assigned identity.
	ClientId pulumi.StringInput `pulumi:"clientId"`
	// The principal id of user assigned identity.
	PrincipalId pulumi.StringInput `pulumi:"principalId"`
}

func (ContainerGroupIdentityResponseUserAssignedIdentitiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ContainerGroupIdentityResponseUserAssignedIdentities)(nil)).Elem()
}

func (i ContainerGroupIdentityResponseUserAssignedIdentitiesArgs) ToContainerGroupIdentityResponseUserAssignedIdentitiesOutput() ContainerGroupIdentityResponseUserAssignedIdentitiesOutput {
	return i.ToContainerGroupIdentityResponseUserAssignedIdentitiesOutputWithContext(context.Background())
}

func (i ContainerGroupIdentityResponseUserAssignedIdentitiesArgs) ToContainerGroupIdentityResponseUserAssignedIdentitiesOutputWithContext(ctx context.Context) ContainerGroupIdentityResponseUserAssignedIdentitiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerGroupIdentityResponseUserAssignedIdentitiesOutput)
}

// ContainerGroupIdentityResponseUserAssignedIdentitiesMapInput is an input type that accepts ContainerGroupIdentityResponseUserAssignedIdentitiesMap and ContainerGroupIdentityResponseUserAssignedIdentitiesMapOutput values.
// You can construct a concrete instance of `ContainerGroupIdentityResponseUserAssignedIdentitiesMapInput` via:
//
//          ContainerGroupIdentityResponseUserAssignedIdentitiesMap{ "key": ContainerGroupIdentityResponseUserAssignedIdentitiesArgs{...} }
type ContainerGroupIdentityResponseUserAssignedIdentitiesMapInput interface {
	pulumi.Input

	ToContainerGroupIdentityResponseUserAssignedIdentitiesMapOutput() ContainerGroupIdentityResponseUserAssignedIdentitiesMapOutput
	ToContainerGroupIdentityResponseUserAssignedIdentitiesMapOutputWithContext(context.Context) ContainerGroupIdentityResponseUserAssignedIdentitiesMapOutput
}

type ContainerGroupIdentityResponseUserAssignedIdentitiesMap map[string]ContainerGroupIdentityResponseUserAssignedIdentitiesInput

func (ContainerGroupIdentityResponseUserAssignedIdentitiesMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]ContainerGroupIdentityResponseUserAssignedIdentities)(nil)).Elem()
}

func (i ContainerGroupIdentityResponseUserAssignedIdentitiesMap) ToContainerGroupIdentityResponseUserAssignedIdentitiesMapOutput() ContainerGroupIdentityResponseUserAssignedIdentitiesMapOutput {
	return i.ToContainerGroupIdentityResponseUserAssignedIdentitiesMapOutputWithContext(context.Background())
}

func (i ContainerGroupIdentityResponseUserAssignedIdentitiesMap) ToContainerGroupIdentityResponseUserAssignedIdentitiesMapOutputWithContext(ctx context.Context) ContainerGroupIdentityResponseUserAssignedIdentitiesMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerGroupIdentityResponseUserAssignedIdentitiesMapOutput)
}

type ContainerGroupIdentityResponseUserAssignedIdentitiesOutput struct{ *pulumi.OutputState }

func (ContainerGroupIdentityResponseUserAssignedIdentitiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ContainerGroupIdentityResponseUserAssignedIdentities)(nil)).Elem()
}

func (o ContainerGroupIdentityResponseUserAssignedIdentitiesOutput) ToContainerGroupIdentityResponseUserAssignedIdentitiesOutput() ContainerGroupIdentityResponseUserAssignedIdentitiesOutput {
	return o
}

func (o ContainerGroupIdentityResponseUserAssignedIdentitiesOutput) ToContainerGroupIdentityResponseUserAssignedIdentitiesOutputWithContext(ctx context.Context) ContainerGroupIdentityResponseUserAssignedIdentitiesOutput {
	return o
}

// The client id of user assigned identity.
func (o ContainerGroupIdentityResponseUserAssignedIdentitiesOutput) ClientId() pulumi.StringOutput {
	return o.ApplyT(func(v ContainerGroupIdentityResponseUserAssignedIdentities) string { return v.ClientId }).(pulumi.StringOutput)
}

// The principal id of user assigned identity.
func (o ContainerGroupIdentityResponseUserAssignedIdentitiesOutput) PrincipalId() pulumi.StringOutput {
	return o.ApplyT(func(v ContainerGroupIdentityResponseUserAssignedIdentities) string { return v.PrincipalId }).(pulumi.StringOutput)
}

type ContainerGroupIdentityResponseUserAssignedIdentitiesMapOutput struct{ *pulumi.OutputState }

func (ContainerGroupIdentityResponseUserAssignedIdentitiesMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]ContainerGroupIdentityResponseUserAssignedIdentities)(nil)).Elem()
}

func (o ContainerGroupIdentityResponseUserAssignedIdentitiesMapOutput) ToContainerGroupIdentityResponseUserAssignedIdentitiesMapOutput() ContainerGroupIdentityResponseUserAssignedIdentitiesMapOutput {
	return o
}

func (o ContainerGroupIdentityResponseUserAssignedIdentitiesMapOutput) ToContainerGroupIdentityResponseUserAssignedIdentitiesMapOutputWithContext(ctx context.Context) ContainerGroupIdentityResponseUserAssignedIdentitiesMapOutput {
	return o
}

func (o ContainerGroupIdentityResponseUserAssignedIdentitiesMapOutput) MapIndex(k pulumi.StringInput) ContainerGroupIdentityResponseUserAssignedIdentitiesOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) ContainerGroupIdentityResponseUserAssignedIdentities {
		return vs[0].(map[string]ContainerGroupIdentityResponseUserAssignedIdentities)[vs[1].(string)]
	}).(ContainerGroupIdentityResponseUserAssignedIdentitiesOutput)
}

// The instance view of the container group. Only valid in response.
type ContainerGroupInvokeResponseInstanceView struct {
	// The events of this container group.
	Events []EventInvokeResponse `pulumi:"events"`
	// The state of the container group. Only valid in response.
	State string `pulumi:"state"`
}

// ContainerGroupInvokeResponseInstanceViewInput is an input type that accepts ContainerGroupInvokeResponseInstanceViewArgs and ContainerGroupInvokeResponseInstanceViewOutput values.
// You can construct a concrete instance of `ContainerGroupInvokeResponseInstanceViewInput` via:
//
//          ContainerGroupInvokeResponseInstanceViewArgs{...}
type ContainerGroupInvokeResponseInstanceViewInput interface {
	pulumi.Input

	ToContainerGroupInvokeResponseInstanceViewOutput() ContainerGroupInvokeResponseInstanceViewOutput
	ToContainerGroupInvokeResponseInstanceViewOutputWithContext(context.Context) ContainerGroupInvokeResponseInstanceViewOutput
}

// The instance view of the container group. Only valid in response.
type ContainerGroupInvokeResponseInstanceViewArgs struct {
	// The events of this container group.
	Events EventInvokeResponseArrayInput `pulumi:"events"`
	// The state of the container group. Only valid in response.
	State pulumi.StringInput `pulumi:"state"`
}

func (ContainerGroupInvokeResponseInstanceViewArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ContainerGroupInvokeResponseInstanceView)(nil)).Elem()
}

func (i ContainerGroupInvokeResponseInstanceViewArgs) ToContainerGroupInvokeResponseInstanceViewOutput() ContainerGroupInvokeResponseInstanceViewOutput {
	return i.ToContainerGroupInvokeResponseInstanceViewOutputWithContext(context.Background())
}

func (i ContainerGroupInvokeResponseInstanceViewArgs) ToContainerGroupInvokeResponseInstanceViewOutputWithContext(ctx context.Context) ContainerGroupInvokeResponseInstanceViewOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerGroupInvokeResponseInstanceViewOutput)
}

// The instance view of the container group. Only valid in response.
type ContainerGroupInvokeResponseInstanceViewOutput struct{ *pulumi.OutputState }

func (ContainerGroupInvokeResponseInstanceViewOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ContainerGroupInvokeResponseInstanceView)(nil)).Elem()
}

func (o ContainerGroupInvokeResponseInstanceViewOutput) ToContainerGroupInvokeResponseInstanceViewOutput() ContainerGroupInvokeResponseInstanceViewOutput {
	return o
}

func (o ContainerGroupInvokeResponseInstanceViewOutput) ToContainerGroupInvokeResponseInstanceViewOutputWithContext(ctx context.Context) ContainerGroupInvokeResponseInstanceViewOutput {
	return o
}

// The events of this container group.
func (o ContainerGroupInvokeResponseInstanceViewOutput) Events() EventInvokeResponseArrayOutput {
	return o.ApplyT(func(v ContainerGroupInvokeResponseInstanceView) []EventInvokeResponse { return v.Events }).(EventInvokeResponseArrayOutput)
}

// The state of the container group. Only valid in response.
func (o ContainerGroupInvokeResponseInstanceViewOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v ContainerGroupInvokeResponseInstanceView) string { return v.State }).(pulumi.StringOutput)
}

// Container group network profile information.
type ContainerGroupNetworkProfile struct {
	// The identifier for a network profile.
	Id string `pulumi:"id"`
}

// ContainerGroupNetworkProfileInput is an input type that accepts ContainerGroupNetworkProfileArgs and ContainerGroupNetworkProfileOutput values.
// You can construct a concrete instance of `ContainerGroupNetworkProfileInput` via:
//
//          ContainerGroupNetworkProfileArgs{...}
type ContainerGroupNetworkProfileInput interface {
	pulumi.Input

	ToContainerGroupNetworkProfileOutput() ContainerGroupNetworkProfileOutput
	ToContainerGroupNetworkProfileOutputWithContext(context.Context) ContainerGroupNetworkProfileOutput
}

// Container group network profile information.
type ContainerGroupNetworkProfileArgs struct {
	// The identifier for a network profile.
	Id pulumi.StringInput `pulumi:"id"`
}

func (ContainerGroupNetworkProfileArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ContainerGroupNetworkProfile)(nil)).Elem()
}

func (i ContainerGroupNetworkProfileArgs) ToContainerGroupNetworkProfileOutput() ContainerGroupNetworkProfileOutput {
	return i.ToContainerGroupNetworkProfileOutputWithContext(context.Background())
}

func (i ContainerGroupNetworkProfileArgs) ToContainerGroupNetworkProfileOutputWithContext(ctx context.Context) ContainerGroupNetworkProfileOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerGroupNetworkProfileOutput)
}

func (i ContainerGroupNetworkProfileArgs) ToContainerGroupNetworkProfilePtrOutput() ContainerGroupNetworkProfilePtrOutput {
	return i.ToContainerGroupNetworkProfilePtrOutputWithContext(context.Background())
}

func (i ContainerGroupNetworkProfileArgs) ToContainerGroupNetworkProfilePtrOutputWithContext(ctx context.Context) ContainerGroupNetworkProfilePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerGroupNetworkProfileOutput).ToContainerGroupNetworkProfilePtrOutputWithContext(ctx)
}

// ContainerGroupNetworkProfilePtrInput is an input type that accepts ContainerGroupNetworkProfileArgs, ContainerGroupNetworkProfilePtr and ContainerGroupNetworkProfilePtrOutput values.
// You can construct a concrete instance of `ContainerGroupNetworkProfilePtrInput` via:
//
//          ContainerGroupNetworkProfileArgs{...}
//
//  or:
//
//          nil
type ContainerGroupNetworkProfilePtrInput interface {
	pulumi.Input

	ToContainerGroupNetworkProfilePtrOutput() ContainerGroupNetworkProfilePtrOutput
	ToContainerGroupNetworkProfilePtrOutputWithContext(context.Context) ContainerGroupNetworkProfilePtrOutput
}

type containerGroupNetworkProfilePtrType ContainerGroupNetworkProfileArgs

func ContainerGroupNetworkProfilePtr(v *ContainerGroupNetworkProfileArgs) ContainerGroupNetworkProfilePtrInput {
	return (*containerGroupNetworkProfilePtrType)(v)
}

func (*containerGroupNetworkProfilePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ContainerGroupNetworkProfile)(nil)).Elem()
}

func (i *containerGroupNetworkProfilePtrType) ToContainerGroupNetworkProfilePtrOutput() ContainerGroupNetworkProfilePtrOutput {
	return i.ToContainerGroupNetworkProfilePtrOutputWithContext(context.Background())
}

func (i *containerGroupNetworkProfilePtrType) ToContainerGroupNetworkProfilePtrOutputWithContext(ctx context.Context) ContainerGroupNetworkProfilePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerGroupNetworkProfilePtrOutput)
}

// Container group network profile information.
type ContainerGroupNetworkProfileOutput struct{ *pulumi.OutputState }

func (ContainerGroupNetworkProfileOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ContainerGroupNetworkProfile)(nil)).Elem()
}

func (o ContainerGroupNetworkProfileOutput) ToContainerGroupNetworkProfileOutput() ContainerGroupNetworkProfileOutput {
	return o
}

func (o ContainerGroupNetworkProfileOutput) ToContainerGroupNetworkProfileOutputWithContext(ctx context.Context) ContainerGroupNetworkProfileOutput {
	return o
}

func (o ContainerGroupNetworkProfileOutput) ToContainerGroupNetworkProfilePtrOutput() ContainerGroupNetworkProfilePtrOutput {
	return o.ToContainerGroupNetworkProfilePtrOutputWithContext(context.Background())
}

func (o ContainerGroupNetworkProfileOutput) ToContainerGroupNetworkProfilePtrOutputWithContext(ctx context.Context) ContainerGroupNetworkProfilePtrOutput {
	return o.ApplyT(func(v ContainerGroupNetworkProfile) *ContainerGroupNetworkProfile {
		return &v
	}).(ContainerGroupNetworkProfilePtrOutput)
}

// The identifier for a network profile.
func (o ContainerGroupNetworkProfileOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v ContainerGroupNetworkProfile) string { return v.Id }).(pulumi.StringOutput)
}

type ContainerGroupNetworkProfilePtrOutput struct{ *pulumi.OutputState }

func (ContainerGroupNetworkProfilePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ContainerGroupNetworkProfile)(nil)).Elem()
}

func (o ContainerGroupNetworkProfilePtrOutput) ToContainerGroupNetworkProfilePtrOutput() ContainerGroupNetworkProfilePtrOutput {
	return o
}

func (o ContainerGroupNetworkProfilePtrOutput) ToContainerGroupNetworkProfilePtrOutputWithContext(ctx context.Context) ContainerGroupNetworkProfilePtrOutput {
	return o
}

func (o ContainerGroupNetworkProfilePtrOutput) Elem() ContainerGroupNetworkProfileOutput {
	return o.ApplyT(func(v *ContainerGroupNetworkProfile) ContainerGroupNetworkProfile { return *v }).(ContainerGroupNetworkProfileOutput)
}

// The identifier for a network profile.
func (o ContainerGroupNetworkProfilePtrOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ContainerGroupNetworkProfile) *string {
		if v == nil {
			return nil
		}
		return &v.Id
	}).(pulumi.StringPtrOutput)
}

// Container group network profile information.
type ContainerGroupNetworkProfileInvokeResponse struct {
	// The identifier for a network profile.
	Id string `pulumi:"id"`
}

// ContainerGroupNetworkProfileInvokeResponseInput is an input type that accepts ContainerGroupNetworkProfileInvokeResponseArgs and ContainerGroupNetworkProfileInvokeResponseOutput values.
// You can construct a concrete instance of `ContainerGroupNetworkProfileInvokeResponseInput` via:
//
//          ContainerGroupNetworkProfileInvokeResponseArgs{...}
type ContainerGroupNetworkProfileInvokeResponseInput interface {
	pulumi.Input

	ToContainerGroupNetworkProfileInvokeResponseOutput() ContainerGroupNetworkProfileInvokeResponseOutput
	ToContainerGroupNetworkProfileInvokeResponseOutputWithContext(context.Context) ContainerGroupNetworkProfileInvokeResponseOutput
}

// Container group network profile information.
type ContainerGroupNetworkProfileInvokeResponseArgs struct {
	// The identifier for a network profile.
	Id pulumi.StringInput `pulumi:"id"`
}

func (ContainerGroupNetworkProfileInvokeResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ContainerGroupNetworkProfileInvokeResponse)(nil)).Elem()
}

func (i ContainerGroupNetworkProfileInvokeResponseArgs) ToContainerGroupNetworkProfileInvokeResponseOutput() ContainerGroupNetworkProfileInvokeResponseOutput {
	return i.ToContainerGroupNetworkProfileInvokeResponseOutputWithContext(context.Background())
}

func (i ContainerGroupNetworkProfileInvokeResponseArgs) ToContainerGroupNetworkProfileInvokeResponseOutputWithContext(ctx context.Context) ContainerGroupNetworkProfileInvokeResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerGroupNetworkProfileInvokeResponseOutput)
}

// Container group network profile information.
type ContainerGroupNetworkProfileInvokeResponseOutput struct{ *pulumi.OutputState }

func (ContainerGroupNetworkProfileInvokeResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ContainerGroupNetworkProfileInvokeResponse)(nil)).Elem()
}

func (o ContainerGroupNetworkProfileInvokeResponseOutput) ToContainerGroupNetworkProfileInvokeResponseOutput() ContainerGroupNetworkProfileInvokeResponseOutput {
	return o
}

func (o ContainerGroupNetworkProfileInvokeResponseOutput) ToContainerGroupNetworkProfileInvokeResponseOutputWithContext(ctx context.Context) ContainerGroupNetworkProfileInvokeResponseOutput {
	return o
}

// The identifier for a network profile.
func (o ContainerGroupNetworkProfileInvokeResponseOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v ContainerGroupNetworkProfileInvokeResponse) string { return v.Id }).(pulumi.StringOutput)
}

// Container group network profile information.
type ContainerGroupNetworkProfileResponse struct {
	// The identifier for a network profile.
	Id string `pulumi:"id"`
}

// ContainerGroupNetworkProfileResponseInput is an input type that accepts ContainerGroupNetworkProfileResponseArgs and ContainerGroupNetworkProfileResponseOutput values.
// You can construct a concrete instance of `ContainerGroupNetworkProfileResponseInput` via:
//
//          ContainerGroupNetworkProfileResponseArgs{...}
type ContainerGroupNetworkProfileResponseInput interface {
	pulumi.Input

	ToContainerGroupNetworkProfileResponseOutput() ContainerGroupNetworkProfileResponseOutput
	ToContainerGroupNetworkProfileResponseOutputWithContext(context.Context) ContainerGroupNetworkProfileResponseOutput
}

// Container group network profile information.
type ContainerGroupNetworkProfileResponseArgs struct {
	// The identifier for a network profile.
	Id pulumi.StringInput `pulumi:"id"`
}

func (ContainerGroupNetworkProfileResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ContainerGroupNetworkProfileResponse)(nil)).Elem()
}

func (i ContainerGroupNetworkProfileResponseArgs) ToContainerGroupNetworkProfileResponseOutput() ContainerGroupNetworkProfileResponseOutput {
	return i.ToContainerGroupNetworkProfileResponseOutputWithContext(context.Background())
}

func (i ContainerGroupNetworkProfileResponseArgs) ToContainerGroupNetworkProfileResponseOutputWithContext(ctx context.Context) ContainerGroupNetworkProfileResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerGroupNetworkProfileResponseOutput)
}

func (i ContainerGroupNetworkProfileResponseArgs) ToContainerGroupNetworkProfileResponsePtrOutput() ContainerGroupNetworkProfileResponsePtrOutput {
	return i.ToContainerGroupNetworkProfileResponsePtrOutputWithContext(context.Background())
}

func (i ContainerGroupNetworkProfileResponseArgs) ToContainerGroupNetworkProfileResponsePtrOutputWithContext(ctx context.Context) ContainerGroupNetworkProfileResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerGroupNetworkProfileResponseOutput).ToContainerGroupNetworkProfileResponsePtrOutputWithContext(ctx)
}

// ContainerGroupNetworkProfileResponsePtrInput is an input type that accepts ContainerGroupNetworkProfileResponseArgs, ContainerGroupNetworkProfileResponsePtr and ContainerGroupNetworkProfileResponsePtrOutput values.
// You can construct a concrete instance of `ContainerGroupNetworkProfileResponsePtrInput` via:
//
//          ContainerGroupNetworkProfileResponseArgs{...}
//
//  or:
//
//          nil
type ContainerGroupNetworkProfileResponsePtrInput interface {
	pulumi.Input

	ToContainerGroupNetworkProfileResponsePtrOutput() ContainerGroupNetworkProfileResponsePtrOutput
	ToContainerGroupNetworkProfileResponsePtrOutputWithContext(context.Context) ContainerGroupNetworkProfileResponsePtrOutput
}

type containerGroupNetworkProfileResponsePtrType ContainerGroupNetworkProfileResponseArgs

func ContainerGroupNetworkProfileResponsePtr(v *ContainerGroupNetworkProfileResponseArgs) ContainerGroupNetworkProfileResponsePtrInput {
	return (*containerGroupNetworkProfileResponsePtrType)(v)
}

func (*containerGroupNetworkProfileResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ContainerGroupNetworkProfileResponse)(nil)).Elem()
}

func (i *containerGroupNetworkProfileResponsePtrType) ToContainerGroupNetworkProfileResponsePtrOutput() ContainerGroupNetworkProfileResponsePtrOutput {
	return i.ToContainerGroupNetworkProfileResponsePtrOutputWithContext(context.Background())
}

func (i *containerGroupNetworkProfileResponsePtrType) ToContainerGroupNetworkProfileResponsePtrOutputWithContext(ctx context.Context) ContainerGroupNetworkProfileResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerGroupNetworkProfileResponsePtrOutput)
}

// Container group network profile information.
type ContainerGroupNetworkProfileResponseOutput struct{ *pulumi.OutputState }

func (ContainerGroupNetworkProfileResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ContainerGroupNetworkProfileResponse)(nil)).Elem()
}

func (o ContainerGroupNetworkProfileResponseOutput) ToContainerGroupNetworkProfileResponseOutput() ContainerGroupNetworkProfileResponseOutput {
	return o
}

func (o ContainerGroupNetworkProfileResponseOutput) ToContainerGroupNetworkProfileResponseOutputWithContext(ctx context.Context) ContainerGroupNetworkProfileResponseOutput {
	return o
}

func (o ContainerGroupNetworkProfileResponseOutput) ToContainerGroupNetworkProfileResponsePtrOutput() ContainerGroupNetworkProfileResponsePtrOutput {
	return o.ToContainerGroupNetworkProfileResponsePtrOutputWithContext(context.Background())
}

func (o ContainerGroupNetworkProfileResponseOutput) ToContainerGroupNetworkProfileResponsePtrOutputWithContext(ctx context.Context) ContainerGroupNetworkProfileResponsePtrOutput {
	return o.ApplyT(func(v ContainerGroupNetworkProfileResponse) *ContainerGroupNetworkProfileResponse {
		return &v
	}).(ContainerGroupNetworkProfileResponsePtrOutput)
}

// The identifier for a network profile.
func (o ContainerGroupNetworkProfileResponseOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v ContainerGroupNetworkProfileResponse) string { return v.Id }).(pulumi.StringOutput)
}

type ContainerGroupNetworkProfileResponsePtrOutput struct{ *pulumi.OutputState }

func (ContainerGroupNetworkProfileResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ContainerGroupNetworkProfileResponse)(nil)).Elem()
}

func (o ContainerGroupNetworkProfileResponsePtrOutput) ToContainerGroupNetworkProfileResponsePtrOutput() ContainerGroupNetworkProfileResponsePtrOutput {
	return o
}

func (o ContainerGroupNetworkProfileResponsePtrOutput) ToContainerGroupNetworkProfileResponsePtrOutputWithContext(ctx context.Context) ContainerGroupNetworkProfileResponsePtrOutput {
	return o
}

func (o ContainerGroupNetworkProfileResponsePtrOutput) Elem() ContainerGroupNetworkProfileResponseOutput {
	return o.ApplyT(func(v *ContainerGroupNetworkProfileResponse) ContainerGroupNetworkProfileResponse { return *v }).(ContainerGroupNetworkProfileResponseOutput)
}

// The identifier for a network profile.
func (o ContainerGroupNetworkProfileResponsePtrOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ContainerGroupNetworkProfileResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Id
	}).(pulumi.StringPtrOutput)
}

// The instance view of the container group. Only valid in response.
type ContainerGroupResponseInstanceView struct {
	// The events of this container group.
	Events []EventResponse `pulumi:"events"`
	// The state of the container group. Only valid in response.
	State string `pulumi:"state"`
}

// ContainerGroupResponseInstanceViewInput is an input type that accepts ContainerGroupResponseInstanceViewArgs and ContainerGroupResponseInstanceViewOutput values.
// You can construct a concrete instance of `ContainerGroupResponseInstanceViewInput` via:
//
//          ContainerGroupResponseInstanceViewArgs{...}
type ContainerGroupResponseInstanceViewInput interface {
	pulumi.Input

	ToContainerGroupResponseInstanceViewOutput() ContainerGroupResponseInstanceViewOutput
	ToContainerGroupResponseInstanceViewOutputWithContext(context.Context) ContainerGroupResponseInstanceViewOutput
}

// The instance view of the container group. Only valid in response.
type ContainerGroupResponseInstanceViewArgs struct {
	// The events of this container group.
	Events EventResponseArrayInput `pulumi:"events"`
	// The state of the container group. Only valid in response.
	State pulumi.StringInput `pulumi:"state"`
}

func (ContainerGroupResponseInstanceViewArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ContainerGroupResponseInstanceView)(nil)).Elem()
}

func (i ContainerGroupResponseInstanceViewArgs) ToContainerGroupResponseInstanceViewOutput() ContainerGroupResponseInstanceViewOutput {
	return i.ToContainerGroupResponseInstanceViewOutputWithContext(context.Background())
}

func (i ContainerGroupResponseInstanceViewArgs) ToContainerGroupResponseInstanceViewOutputWithContext(ctx context.Context) ContainerGroupResponseInstanceViewOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerGroupResponseInstanceViewOutput)
}

func (i ContainerGroupResponseInstanceViewArgs) ToContainerGroupResponseInstanceViewPtrOutput() ContainerGroupResponseInstanceViewPtrOutput {
	return i.ToContainerGroupResponseInstanceViewPtrOutputWithContext(context.Background())
}

func (i ContainerGroupResponseInstanceViewArgs) ToContainerGroupResponseInstanceViewPtrOutputWithContext(ctx context.Context) ContainerGroupResponseInstanceViewPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerGroupResponseInstanceViewOutput).ToContainerGroupResponseInstanceViewPtrOutputWithContext(ctx)
}

// ContainerGroupResponseInstanceViewPtrInput is an input type that accepts ContainerGroupResponseInstanceViewArgs, ContainerGroupResponseInstanceViewPtr and ContainerGroupResponseInstanceViewPtrOutput values.
// You can construct a concrete instance of `ContainerGroupResponseInstanceViewPtrInput` via:
//
//          ContainerGroupResponseInstanceViewArgs{...}
//
//  or:
//
//          nil
type ContainerGroupResponseInstanceViewPtrInput interface {
	pulumi.Input

	ToContainerGroupResponseInstanceViewPtrOutput() ContainerGroupResponseInstanceViewPtrOutput
	ToContainerGroupResponseInstanceViewPtrOutputWithContext(context.Context) ContainerGroupResponseInstanceViewPtrOutput
}

type containerGroupResponseInstanceViewPtrType ContainerGroupResponseInstanceViewArgs

func ContainerGroupResponseInstanceViewPtr(v *ContainerGroupResponseInstanceViewArgs) ContainerGroupResponseInstanceViewPtrInput {
	return (*containerGroupResponseInstanceViewPtrType)(v)
}

func (*containerGroupResponseInstanceViewPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ContainerGroupResponseInstanceView)(nil)).Elem()
}

func (i *containerGroupResponseInstanceViewPtrType) ToContainerGroupResponseInstanceViewPtrOutput() ContainerGroupResponseInstanceViewPtrOutput {
	return i.ToContainerGroupResponseInstanceViewPtrOutputWithContext(context.Background())
}

func (i *containerGroupResponseInstanceViewPtrType) ToContainerGroupResponseInstanceViewPtrOutputWithContext(ctx context.Context) ContainerGroupResponseInstanceViewPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerGroupResponseInstanceViewPtrOutput)
}

// The instance view of the container group. Only valid in response.
type ContainerGroupResponseInstanceViewOutput struct{ *pulumi.OutputState }

func (ContainerGroupResponseInstanceViewOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ContainerGroupResponseInstanceView)(nil)).Elem()
}

func (o ContainerGroupResponseInstanceViewOutput) ToContainerGroupResponseInstanceViewOutput() ContainerGroupResponseInstanceViewOutput {
	return o
}

func (o ContainerGroupResponseInstanceViewOutput) ToContainerGroupResponseInstanceViewOutputWithContext(ctx context.Context) ContainerGroupResponseInstanceViewOutput {
	return o
}

func (o ContainerGroupResponseInstanceViewOutput) ToContainerGroupResponseInstanceViewPtrOutput() ContainerGroupResponseInstanceViewPtrOutput {
	return o.ToContainerGroupResponseInstanceViewPtrOutputWithContext(context.Background())
}

func (o ContainerGroupResponseInstanceViewOutput) ToContainerGroupResponseInstanceViewPtrOutputWithContext(ctx context.Context) ContainerGroupResponseInstanceViewPtrOutput {
	return o.ApplyT(func(v ContainerGroupResponseInstanceView) *ContainerGroupResponseInstanceView {
		return &v
	}).(ContainerGroupResponseInstanceViewPtrOutput)
}

// The events of this container group.
func (o ContainerGroupResponseInstanceViewOutput) Events() EventResponseArrayOutput {
	return o.ApplyT(func(v ContainerGroupResponseInstanceView) []EventResponse { return v.Events }).(EventResponseArrayOutput)
}

// The state of the container group. Only valid in response.
func (o ContainerGroupResponseInstanceViewOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v ContainerGroupResponseInstanceView) string { return v.State }).(pulumi.StringOutput)
}

type ContainerGroupResponseInstanceViewPtrOutput struct{ *pulumi.OutputState }

func (ContainerGroupResponseInstanceViewPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ContainerGroupResponseInstanceView)(nil)).Elem()
}

func (o ContainerGroupResponseInstanceViewPtrOutput) ToContainerGroupResponseInstanceViewPtrOutput() ContainerGroupResponseInstanceViewPtrOutput {
	return o
}

func (o ContainerGroupResponseInstanceViewPtrOutput) ToContainerGroupResponseInstanceViewPtrOutputWithContext(ctx context.Context) ContainerGroupResponseInstanceViewPtrOutput {
	return o
}

func (o ContainerGroupResponseInstanceViewPtrOutput) Elem() ContainerGroupResponseInstanceViewOutput {
	return o.ApplyT(func(v *ContainerGroupResponseInstanceView) ContainerGroupResponseInstanceView { return *v }).(ContainerGroupResponseInstanceViewOutput)
}

// The events of this container group.
func (o ContainerGroupResponseInstanceViewPtrOutput) Events() EventResponseArrayOutput {
	return o.ApplyT(func(v *ContainerGroupResponseInstanceView) []EventResponse {
		if v == nil {
			return nil
		}
		return v.Events
	}).(EventResponseArrayOutput)
}

// The state of the container group. Only valid in response.
func (o ContainerGroupResponseInstanceViewPtrOutput) State() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ContainerGroupResponseInstanceView) *string {
		if v == nil {
			return nil
		}
		return &v.State
	}).(pulumi.StringPtrOutput)
}

// The container Http Get settings, for liveness or readiness probe
type ContainerHttpGet struct {
	// The path to probe.
	Path *string `pulumi:"path"`
	// The port number to probe.
	Port int `pulumi:"port"`
	// The scheme.
	Scheme *string `pulumi:"scheme"`
}

// ContainerHttpGetInput is an input type that accepts ContainerHttpGetArgs and ContainerHttpGetOutput values.
// You can construct a concrete instance of `ContainerHttpGetInput` via:
//
//          ContainerHttpGetArgs{...}
type ContainerHttpGetInput interface {
	pulumi.Input

	ToContainerHttpGetOutput() ContainerHttpGetOutput
	ToContainerHttpGetOutputWithContext(context.Context) ContainerHttpGetOutput
}

// The container Http Get settings, for liveness or readiness probe
type ContainerHttpGetArgs struct {
	// The path to probe.
	Path pulumi.StringPtrInput `pulumi:"path"`
	// The port number to probe.
	Port pulumi.IntInput `pulumi:"port"`
	// The scheme.
	Scheme pulumi.StringPtrInput `pulumi:"scheme"`
}

func (ContainerHttpGetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ContainerHttpGet)(nil)).Elem()
}

func (i ContainerHttpGetArgs) ToContainerHttpGetOutput() ContainerHttpGetOutput {
	return i.ToContainerHttpGetOutputWithContext(context.Background())
}

func (i ContainerHttpGetArgs) ToContainerHttpGetOutputWithContext(ctx context.Context) ContainerHttpGetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerHttpGetOutput)
}

func (i ContainerHttpGetArgs) ToContainerHttpGetPtrOutput() ContainerHttpGetPtrOutput {
	return i.ToContainerHttpGetPtrOutputWithContext(context.Background())
}

func (i ContainerHttpGetArgs) ToContainerHttpGetPtrOutputWithContext(ctx context.Context) ContainerHttpGetPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerHttpGetOutput).ToContainerHttpGetPtrOutputWithContext(ctx)
}

// ContainerHttpGetPtrInput is an input type that accepts ContainerHttpGetArgs, ContainerHttpGetPtr and ContainerHttpGetPtrOutput values.
// You can construct a concrete instance of `ContainerHttpGetPtrInput` via:
//
//          ContainerHttpGetArgs{...}
//
//  or:
//
//          nil
type ContainerHttpGetPtrInput interface {
	pulumi.Input

	ToContainerHttpGetPtrOutput() ContainerHttpGetPtrOutput
	ToContainerHttpGetPtrOutputWithContext(context.Context) ContainerHttpGetPtrOutput
}

type containerHttpGetPtrType ContainerHttpGetArgs

func ContainerHttpGetPtr(v *ContainerHttpGetArgs) ContainerHttpGetPtrInput {
	return (*containerHttpGetPtrType)(v)
}

func (*containerHttpGetPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ContainerHttpGet)(nil)).Elem()
}

func (i *containerHttpGetPtrType) ToContainerHttpGetPtrOutput() ContainerHttpGetPtrOutput {
	return i.ToContainerHttpGetPtrOutputWithContext(context.Background())
}

func (i *containerHttpGetPtrType) ToContainerHttpGetPtrOutputWithContext(ctx context.Context) ContainerHttpGetPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerHttpGetPtrOutput)
}

// The container Http Get settings, for liveness or readiness probe
type ContainerHttpGetOutput struct{ *pulumi.OutputState }

func (ContainerHttpGetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ContainerHttpGet)(nil)).Elem()
}

func (o ContainerHttpGetOutput) ToContainerHttpGetOutput() ContainerHttpGetOutput {
	return o
}

func (o ContainerHttpGetOutput) ToContainerHttpGetOutputWithContext(ctx context.Context) ContainerHttpGetOutput {
	return o
}

func (o ContainerHttpGetOutput) ToContainerHttpGetPtrOutput() ContainerHttpGetPtrOutput {
	return o.ToContainerHttpGetPtrOutputWithContext(context.Background())
}

func (o ContainerHttpGetOutput) ToContainerHttpGetPtrOutputWithContext(ctx context.Context) ContainerHttpGetPtrOutput {
	return o.ApplyT(func(v ContainerHttpGet) *ContainerHttpGet {
		return &v
	}).(ContainerHttpGetPtrOutput)
}

// The path to probe.
func (o ContainerHttpGetOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContainerHttpGet) *string { return v.Path }).(pulumi.StringPtrOutput)
}

// The port number to probe.
func (o ContainerHttpGetOutput) Port() pulumi.IntOutput {
	return o.ApplyT(func(v ContainerHttpGet) int { return v.Port }).(pulumi.IntOutput)
}

// The scheme.
func (o ContainerHttpGetOutput) Scheme() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContainerHttpGet) *string { return v.Scheme }).(pulumi.StringPtrOutput)
}

type ContainerHttpGetPtrOutput struct{ *pulumi.OutputState }

func (ContainerHttpGetPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ContainerHttpGet)(nil)).Elem()
}

func (o ContainerHttpGetPtrOutput) ToContainerHttpGetPtrOutput() ContainerHttpGetPtrOutput {
	return o
}

func (o ContainerHttpGetPtrOutput) ToContainerHttpGetPtrOutputWithContext(ctx context.Context) ContainerHttpGetPtrOutput {
	return o
}

func (o ContainerHttpGetPtrOutput) Elem() ContainerHttpGetOutput {
	return o.ApplyT(func(v *ContainerHttpGet) ContainerHttpGet { return *v }).(ContainerHttpGetOutput)
}

// The path to probe.
func (o ContainerHttpGetPtrOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ContainerHttpGet) *string {
		if v == nil {
			return nil
		}
		return v.Path
	}).(pulumi.StringPtrOutput)
}

// The port number to probe.
func (o ContainerHttpGetPtrOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ContainerHttpGet) *int {
		if v == nil {
			return nil
		}
		return &v.Port
	}).(pulumi.IntPtrOutput)
}

// The scheme.
func (o ContainerHttpGetPtrOutput) Scheme() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ContainerHttpGet) *string {
		if v == nil {
			return nil
		}
		return v.Scheme
	}).(pulumi.StringPtrOutput)
}

// The container Http Get settings, for liveness or readiness probe
type ContainerHttpGetInvokeResponse struct {
	// The path to probe.
	Path *string `pulumi:"path"`
	// The port number to probe.
	Port int `pulumi:"port"`
	// The scheme.
	Scheme *string `pulumi:"scheme"`
}

// ContainerHttpGetInvokeResponseInput is an input type that accepts ContainerHttpGetInvokeResponseArgs and ContainerHttpGetInvokeResponseOutput values.
// You can construct a concrete instance of `ContainerHttpGetInvokeResponseInput` via:
//
//          ContainerHttpGetInvokeResponseArgs{...}
type ContainerHttpGetInvokeResponseInput interface {
	pulumi.Input

	ToContainerHttpGetInvokeResponseOutput() ContainerHttpGetInvokeResponseOutput
	ToContainerHttpGetInvokeResponseOutputWithContext(context.Context) ContainerHttpGetInvokeResponseOutput
}

// The container Http Get settings, for liveness or readiness probe
type ContainerHttpGetInvokeResponseArgs struct {
	// The path to probe.
	Path pulumi.StringPtrInput `pulumi:"path"`
	// The port number to probe.
	Port pulumi.IntInput `pulumi:"port"`
	// The scheme.
	Scheme pulumi.StringPtrInput `pulumi:"scheme"`
}

func (ContainerHttpGetInvokeResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ContainerHttpGetInvokeResponse)(nil)).Elem()
}

func (i ContainerHttpGetInvokeResponseArgs) ToContainerHttpGetInvokeResponseOutput() ContainerHttpGetInvokeResponseOutput {
	return i.ToContainerHttpGetInvokeResponseOutputWithContext(context.Background())
}

func (i ContainerHttpGetInvokeResponseArgs) ToContainerHttpGetInvokeResponseOutputWithContext(ctx context.Context) ContainerHttpGetInvokeResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerHttpGetInvokeResponseOutput)
}

func (i ContainerHttpGetInvokeResponseArgs) ToContainerHttpGetInvokeResponsePtrOutput() ContainerHttpGetInvokeResponsePtrOutput {
	return i.ToContainerHttpGetInvokeResponsePtrOutputWithContext(context.Background())
}

func (i ContainerHttpGetInvokeResponseArgs) ToContainerHttpGetInvokeResponsePtrOutputWithContext(ctx context.Context) ContainerHttpGetInvokeResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerHttpGetInvokeResponseOutput).ToContainerHttpGetInvokeResponsePtrOutputWithContext(ctx)
}

// ContainerHttpGetInvokeResponsePtrInput is an input type that accepts ContainerHttpGetInvokeResponseArgs, ContainerHttpGetInvokeResponsePtr and ContainerHttpGetInvokeResponsePtrOutput values.
// You can construct a concrete instance of `ContainerHttpGetInvokeResponsePtrInput` via:
//
//          ContainerHttpGetInvokeResponseArgs{...}
//
//  or:
//
//          nil
type ContainerHttpGetInvokeResponsePtrInput interface {
	pulumi.Input

	ToContainerHttpGetInvokeResponsePtrOutput() ContainerHttpGetInvokeResponsePtrOutput
	ToContainerHttpGetInvokeResponsePtrOutputWithContext(context.Context) ContainerHttpGetInvokeResponsePtrOutput
}

type containerHttpGetInvokeResponsePtrType ContainerHttpGetInvokeResponseArgs

func ContainerHttpGetInvokeResponsePtr(v *ContainerHttpGetInvokeResponseArgs) ContainerHttpGetInvokeResponsePtrInput {
	return (*containerHttpGetInvokeResponsePtrType)(v)
}

func (*containerHttpGetInvokeResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ContainerHttpGetInvokeResponse)(nil)).Elem()
}

func (i *containerHttpGetInvokeResponsePtrType) ToContainerHttpGetInvokeResponsePtrOutput() ContainerHttpGetInvokeResponsePtrOutput {
	return i.ToContainerHttpGetInvokeResponsePtrOutputWithContext(context.Background())
}

func (i *containerHttpGetInvokeResponsePtrType) ToContainerHttpGetInvokeResponsePtrOutputWithContext(ctx context.Context) ContainerHttpGetInvokeResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerHttpGetInvokeResponsePtrOutput)
}

// The container Http Get settings, for liveness or readiness probe
type ContainerHttpGetInvokeResponseOutput struct{ *pulumi.OutputState }

func (ContainerHttpGetInvokeResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ContainerHttpGetInvokeResponse)(nil)).Elem()
}

func (o ContainerHttpGetInvokeResponseOutput) ToContainerHttpGetInvokeResponseOutput() ContainerHttpGetInvokeResponseOutput {
	return o
}

func (o ContainerHttpGetInvokeResponseOutput) ToContainerHttpGetInvokeResponseOutputWithContext(ctx context.Context) ContainerHttpGetInvokeResponseOutput {
	return o
}

func (o ContainerHttpGetInvokeResponseOutput) ToContainerHttpGetInvokeResponsePtrOutput() ContainerHttpGetInvokeResponsePtrOutput {
	return o.ToContainerHttpGetInvokeResponsePtrOutputWithContext(context.Background())
}

func (o ContainerHttpGetInvokeResponseOutput) ToContainerHttpGetInvokeResponsePtrOutputWithContext(ctx context.Context) ContainerHttpGetInvokeResponsePtrOutput {
	return o.ApplyT(func(v ContainerHttpGetInvokeResponse) *ContainerHttpGetInvokeResponse {
		return &v
	}).(ContainerHttpGetInvokeResponsePtrOutput)
}

// The path to probe.
func (o ContainerHttpGetInvokeResponseOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContainerHttpGetInvokeResponse) *string { return v.Path }).(pulumi.StringPtrOutput)
}

// The port number to probe.
func (o ContainerHttpGetInvokeResponseOutput) Port() pulumi.IntOutput {
	return o.ApplyT(func(v ContainerHttpGetInvokeResponse) int { return v.Port }).(pulumi.IntOutput)
}

// The scheme.
func (o ContainerHttpGetInvokeResponseOutput) Scheme() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContainerHttpGetInvokeResponse) *string { return v.Scheme }).(pulumi.StringPtrOutput)
}

type ContainerHttpGetInvokeResponsePtrOutput struct{ *pulumi.OutputState }

func (ContainerHttpGetInvokeResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ContainerHttpGetInvokeResponse)(nil)).Elem()
}

func (o ContainerHttpGetInvokeResponsePtrOutput) ToContainerHttpGetInvokeResponsePtrOutput() ContainerHttpGetInvokeResponsePtrOutput {
	return o
}

func (o ContainerHttpGetInvokeResponsePtrOutput) ToContainerHttpGetInvokeResponsePtrOutputWithContext(ctx context.Context) ContainerHttpGetInvokeResponsePtrOutput {
	return o
}

func (o ContainerHttpGetInvokeResponsePtrOutput) Elem() ContainerHttpGetInvokeResponseOutput {
	return o.ApplyT(func(v *ContainerHttpGetInvokeResponse) ContainerHttpGetInvokeResponse { return *v }).(ContainerHttpGetInvokeResponseOutput)
}

// The path to probe.
func (o ContainerHttpGetInvokeResponsePtrOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ContainerHttpGetInvokeResponse) *string {
		if v == nil {
			return nil
		}
		return v.Path
	}).(pulumi.StringPtrOutput)
}

// The port number to probe.
func (o ContainerHttpGetInvokeResponsePtrOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ContainerHttpGetInvokeResponse) *int {
		if v == nil {
			return nil
		}
		return &v.Port
	}).(pulumi.IntPtrOutput)
}

// The scheme.
func (o ContainerHttpGetInvokeResponsePtrOutput) Scheme() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ContainerHttpGetInvokeResponse) *string {
		if v == nil {
			return nil
		}
		return v.Scheme
	}).(pulumi.StringPtrOutput)
}

// The container Http Get settings, for liveness or readiness probe
type ContainerHttpGetResponse struct {
	// The path to probe.
	Path *string `pulumi:"path"`
	// The port number to probe.
	Port int `pulumi:"port"`
	// The scheme.
	Scheme *string `pulumi:"scheme"`
}

// ContainerHttpGetResponseInput is an input type that accepts ContainerHttpGetResponseArgs and ContainerHttpGetResponseOutput values.
// You can construct a concrete instance of `ContainerHttpGetResponseInput` via:
//
//          ContainerHttpGetResponseArgs{...}
type ContainerHttpGetResponseInput interface {
	pulumi.Input

	ToContainerHttpGetResponseOutput() ContainerHttpGetResponseOutput
	ToContainerHttpGetResponseOutputWithContext(context.Context) ContainerHttpGetResponseOutput
}

// The container Http Get settings, for liveness or readiness probe
type ContainerHttpGetResponseArgs struct {
	// The path to probe.
	Path pulumi.StringPtrInput `pulumi:"path"`
	// The port number to probe.
	Port pulumi.IntInput `pulumi:"port"`
	// The scheme.
	Scheme pulumi.StringPtrInput `pulumi:"scheme"`
}

func (ContainerHttpGetResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ContainerHttpGetResponse)(nil)).Elem()
}

func (i ContainerHttpGetResponseArgs) ToContainerHttpGetResponseOutput() ContainerHttpGetResponseOutput {
	return i.ToContainerHttpGetResponseOutputWithContext(context.Background())
}

func (i ContainerHttpGetResponseArgs) ToContainerHttpGetResponseOutputWithContext(ctx context.Context) ContainerHttpGetResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerHttpGetResponseOutput)
}

func (i ContainerHttpGetResponseArgs) ToContainerHttpGetResponsePtrOutput() ContainerHttpGetResponsePtrOutput {
	return i.ToContainerHttpGetResponsePtrOutputWithContext(context.Background())
}

func (i ContainerHttpGetResponseArgs) ToContainerHttpGetResponsePtrOutputWithContext(ctx context.Context) ContainerHttpGetResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerHttpGetResponseOutput).ToContainerHttpGetResponsePtrOutputWithContext(ctx)
}

// ContainerHttpGetResponsePtrInput is an input type that accepts ContainerHttpGetResponseArgs, ContainerHttpGetResponsePtr and ContainerHttpGetResponsePtrOutput values.
// You can construct a concrete instance of `ContainerHttpGetResponsePtrInput` via:
//
//          ContainerHttpGetResponseArgs{...}
//
//  or:
//
//          nil
type ContainerHttpGetResponsePtrInput interface {
	pulumi.Input

	ToContainerHttpGetResponsePtrOutput() ContainerHttpGetResponsePtrOutput
	ToContainerHttpGetResponsePtrOutputWithContext(context.Context) ContainerHttpGetResponsePtrOutput
}

type containerHttpGetResponsePtrType ContainerHttpGetResponseArgs

func ContainerHttpGetResponsePtr(v *ContainerHttpGetResponseArgs) ContainerHttpGetResponsePtrInput {
	return (*containerHttpGetResponsePtrType)(v)
}

func (*containerHttpGetResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ContainerHttpGetResponse)(nil)).Elem()
}

func (i *containerHttpGetResponsePtrType) ToContainerHttpGetResponsePtrOutput() ContainerHttpGetResponsePtrOutput {
	return i.ToContainerHttpGetResponsePtrOutputWithContext(context.Background())
}

func (i *containerHttpGetResponsePtrType) ToContainerHttpGetResponsePtrOutputWithContext(ctx context.Context) ContainerHttpGetResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerHttpGetResponsePtrOutput)
}

// The container Http Get settings, for liveness or readiness probe
type ContainerHttpGetResponseOutput struct{ *pulumi.OutputState }

func (ContainerHttpGetResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ContainerHttpGetResponse)(nil)).Elem()
}

func (o ContainerHttpGetResponseOutput) ToContainerHttpGetResponseOutput() ContainerHttpGetResponseOutput {
	return o
}

func (o ContainerHttpGetResponseOutput) ToContainerHttpGetResponseOutputWithContext(ctx context.Context) ContainerHttpGetResponseOutput {
	return o
}

func (o ContainerHttpGetResponseOutput) ToContainerHttpGetResponsePtrOutput() ContainerHttpGetResponsePtrOutput {
	return o.ToContainerHttpGetResponsePtrOutputWithContext(context.Background())
}

func (o ContainerHttpGetResponseOutput) ToContainerHttpGetResponsePtrOutputWithContext(ctx context.Context) ContainerHttpGetResponsePtrOutput {
	return o.ApplyT(func(v ContainerHttpGetResponse) *ContainerHttpGetResponse {
		return &v
	}).(ContainerHttpGetResponsePtrOutput)
}

// The path to probe.
func (o ContainerHttpGetResponseOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContainerHttpGetResponse) *string { return v.Path }).(pulumi.StringPtrOutput)
}

// The port number to probe.
func (o ContainerHttpGetResponseOutput) Port() pulumi.IntOutput {
	return o.ApplyT(func(v ContainerHttpGetResponse) int { return v.Port }).(pulumi.IntOutput)
}

// The scheme.
func (o ContainerHttpGetResponseOutput) Scheme() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContainerHttpGetResponse) *string { return v.Scheme }).(pulumi.StringPtrOutput)
}

type ContainerHttpGetResponsePtrOutput struct{ *pulumi.OutputState }

func (ContainerHttpGetResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ContainerHttpGetResponse)(nil)).Elem()
}

func (o ContainerHttpGetResponsePtrOutput) ToContainerHttpGetResponsePtrOutput() ContainerHttpGetResponsePtrOutput {
	return o
}

func (o ContainerHttpGetResponsePtrOutput) ToContainerHttpGetResponsePtrOutputWithContext(ctx context.Context) ContainerHttpGetResponsePtrOutput {
	return o
}

func (o ContainerHttpGetResponsePtrOutput) Elem() ContainerHttpGetResponseOutput {
	return o.ApplyT(func(v *ContainerHttpGetResponse) ContainerHttpGetResponse { return *v }).(ContainerHttpGetResponseOutput)
}

// The path to probe.
func (o ContainerHttpGetResponsePtrOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ContainerHttpGetResponse) *string {
		if v == nil {
			return nil
		}
		return v.Path
	}).(pulumi.StringPtrOutput)
}

// The port number to probe.
func (o ContainerHttpGetResponsePtrOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ContainerHttpGetResponse) *int {
		if v == nil {
			return nil
		}
		return &v.Port
	}).(pulumi.IntPtrOutput)
}

// The scheme.
func (o ContainerHttpGetResponsePtrOutput) Scheme() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ContainerHttpGetResponse) *string {
		if v == nil {
			return nil
		}
		return v.Scheme
	}).(pulumi.StringPtrOutput)
}

// A container instance.
type ContainerInvokeResponse struct {
	// The commands to execute within the container instance in exec form.
	Command []string `pulumi:"command"`
	// The environment variables to set in the container instance.
	EnvironmentVariables []EnvironmentVariableInvokeResponse `pulumi:"environmentVariables"`
	// The name of the image used to create the container instance.
	Image string `pulumi:"image"`
	// The instance view of the container instance. Only valid in response.
	InstanceView ContainerPropertiesInvokeResponseInstanceView `pulumi:"instanceView"`
	// The liveness probe.
	LivenessProbe *ContainerProbeInvokeResponse `pulumi:"livenessProbe"`
	// The user-provided name of the container instance.
	Name string `pulumi:"name"`
	// The exposed ports on the container instance.
	Ports []ContainerPortInvokeResponse `pulumi:"ports"`
	// The readiness probe.
	ReadinessProbe *ContainerProbeInvokeResponse `pulumi:"readinessProbe"`
	// The resource requirements of the container instance.
	Resources ResourceRequirementsInvokeResponse `pulumi:"resources"`
	// The volume mounts available to the container instance.
	VolumeMounts []VolumeMountInvokeResponse `pulumi:"volumeMounts"`
}

// ContainerInvokeResponseInput is an input type that accepts ContainerInvokeResponseArgs and ContainerInvokeResponseOutput values.
// You can construct a concrete instance of `ContainerInvokeResponseInput` via:
//
//          ContainerInvokeResponseArgs{...}
type ContainerInvokeResponseInput interface {
	pulumi.Input

	ToContainerInvokeResponseOutput() ContainerInvokeResponseOutput
	ToContainerInvokeResponseOutputWithContext(context.Context) ContainerInvokeResponseOutput
}

// A container instance.
type ContainerInvokeResponseArgs struct {
	// The commands to execute within the container instance in exec form.
	Command pulumi.StringArrayInput `pulumi:"command"`
	// The environment variables to set in the container instance.
	EnvironmentVariables EnvironmentVariableInvokeResponseArrayInput `pulumi:"environmentVariables"`
	// The name of the image used to create the container instance.
	Image pulumi.StringInput `pulumi:"image"`
	// The instance view of the container instance. Only valid in response.
	InstanceView ContainerPropertiesInvokeResponseInstanceViewInput `pulumi:"instanceView"`
	// The liveness probe.
	LivenessProbe ContainerProbeInvokeResponsePtrInput `pulumi:"livenessProbe"`
	// The user-provided name of the container instance.
	Name pulumi.StringInput `pulumi:"name"`
	// The exposed ports on the container instance.
	Ports ContainerPortInvokeResponseArrayInput `pulumi:"ports"`
	// The readiness probe.
	ReadinessProbe ContainerProbeInvokeResponsePtrInput `pulumi:"readinessProbe"`
	// The resource requirements of the container instance.
	Resources ResourceRequirementsInvokeResponseInput `pulumi:"resources"`
	// The volume mounts available to the container instance.
	VolumeMounts VolumeMountInvokeResponseArrayInput `pulumi:"volumeMounts"`
}

func (ContainerInvokeResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ContainerInvokeResponse)(nil)).Elem()
}

func (i ContainerInvokeResponseArgs) ToContainerInvokeResponseOutput() ContainerInvokeResponseOutput {
	return i.ToContainerInvokeResponseOutputWithContext(context.Background())
}

func (i ContainerInvokeResponseArgs) ToContainerInvokeResponseOutputWithContext(ctx context.Context) ContainerInvokeResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerInvokeResponseOutput)
}

// ContainerInvokeResponseArrayInput is an input type that accepts ContainerInvokeResponseArray and ContainerInvokeResponseArrayOutput values.
// You can construct a concrete instance of `ContainerInvokeResponseArrayInput` via:
//
//          ContainerInvokeResponseArray{ ContainerInvokeResponseArgs{...} }
type ContainerInvokeResponseArrayInput interface {
	pulumi.Input

	ToContainerInvokeResponseArrayOutput() ContainerInvokeResponseArrayOutput
	ToContainerInvokeResponseArrayOutputWithContext(context.Context) ContainerInvokeResponseArrayOutput
}

type ContainerInvokeResponseArray []ContainerInvokeResponseInput

func (ContainerInvokeResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ContainerInvokeResponse)(nil)).Elem()
}

func (i ContainerInvokeResponseArray) ToContainerInvokeResponseArrayOutput() ContainerInvokeResponseArrayOutput {
	return i.ToContainerInvokeResponseArrayOutputWithContext(context.Background())
}

func (i ContainerInvokeResponseArray) ToContainerInvokeResponseArrayOutputWithContext(ctx context.Context) ContainerInvokeResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerInvokeResponseArrayOutput)
}

// A container instance.
type ContainerInvokeResponseOutput struct{ *pulumi.OutputState }

func (ContainerInvokeResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ContainerInvokeResponse)(nil)).Elem()
}

func (o ContainerInvokeResponseOutput) ToContainerInvokeResponseOutput() ContainerInvokeResponseOutput {
	return o
}

func (o ContainerInvokeResponseOutput) ToContainerInvokeResponseOutputWithContext(ctx context.Context) ContainerInvokeResponseOutput {
	return o
}

// The commands to execute within the container instance in exec form.
func (o ContainerInvokeResponseOutput) Command() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ContainerInvokeResponse) []string { return v.Command }).(pulumi.StringArrayOutput)
}

// The environment variables to set in the container instance.
func (o ContainerInvokeResponseOutput) EnvironmentVariables() EnvironmentVariableInvokeResponseArrayOutput {
	return o.ApplyT(func(v ContainerInvokeResponse) []EnvironmentVariableInvokeResponse { return v.EnvironmentVariables }).(EnvironmentVariableInvokeResponseArrayOutput)
}

// The name of the image used to create the container instance.
func (o ContainerInvokeResponseOutput) Image() pulumi.StringOutput {
	return o.ApplyT(func(v ContainerInvokeResponse) string { return v.Image }).(pulumi.StringOutput)
}

// The instance view of the container instance. Only valid in response.
func (o ContainerInvokeResponseOutput) InstanceView() ContainerPropertiesInvokeResponseInstanceViewOutput {
	return o.ApplyT(func(v ContainerInvokeResponse) ContainerPropertiesInvokeResponseInstanceView { return v.InstanceView }).(ContainerPropertiesInvokeResponseInstanceViewOutput)
}

// The liveness probe.
func (o ContainerInvokeResponseOutput) LivenessProbe() ContainerProbeInvokeResponsePtrOutput {
	return o.ApplyT(func(v ContainerInvokeResponse) *ContainerProbeInvokeResponse { return v.LivenessProbe }).(ContainerProbeInvokeResponsePtrOutput)
}

// The user-provided name of the container instance.
func (o ContainerInvokeResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ContainerInvokeResponse) string { return v.Name }).(pulumi.StringOutput)
}

// The exposed ports on the container instance.
func (o ContainerInvokeResponseOutput) Ports() ContainerPortInvokeResponseArrayOutput {
	return o.ApplyT(func(v ContainerInvokeResponse) []ContainerPortInvokeResponse { return v.Ports }).(ContainerPortInvokeResponseArrayOutput)
}

// The readiness probe.
func (o ContainerInvokeResponseOutput) ReadinessProbe() ContainerProbeInvokeResponsePtrOutput {
	return o.ApplyT(func(v ContainerInvokeResponse) *ContainerProbeInvokeResponse { return v.ReadinessProbe }).(ContainerProbeInvokeResponsePtrOutput)
}

// The resource requirements of the container instance.
func (o ContainerInvokeResponseOutput) Resources() ResourceRequirementsInvokeResponseOutput {
	return o.ApplyT(func(v ContainerInvokeResponse) ResourceRequirementsInvokeResponse { return v.Resources }).(ResourceRequirementsInvokeResponseOutput)
}

// The volume mounts available to the container instance.
func (o ContainerInvokeResponseOutput) VolumeMounts() VolumeMountInvokeResponseArrayOutput {
	return o.ApplyT(func(v ContainerInvokeResponse) []VolumeMountInvokeResponse { return v.VolumeMounts }).(VolumeMountInvokeResponseArrayOutput)
}

type ContainerInvokeResponseArrayOutput struct{ *pulumi.OutputState }

func (ContainerInvokeResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ContainerInvokeResponse)(nil)).Elem()
}

func (o ContainerInvokeResponseArrayOutput) ToContainerInvokeResponseArrayOutput() ContainerInvokeResponseArrayOutput {
	return o
}

func (o ContainerInvokeResponseArrayOutput) ToContainerInvokeResponseArrayOutputWithContext(ctx context.Context) ContainerInvokeResponseArrayOutput {
	return o
}

func (o ContainerInvokeResponseArrayOutput) Index(i pulumi.IntInput) ContainerInvokeResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ContainerInvokeResponse {
		return vs[0].([]ContainerInvokeResponse)[vs[1].(int)]
	}).(ContainerInvokeResponseOutput)
}

// The port exposed on the container instance.
type ContainerPort struct {
	// The port number exposed within the container group.
	Port int `pulumi:"port"`
	// The protocol associated with the port.
	Protocol *string `pulumi:"protocol"`
}

// ContainerPortInput is an input type that accepts ContainerPortArgs and ContainerPortOutput values.
// You can construct a concrete instance of `ContainerPortInput` via:
//
//          ContainerPortArgs{...}
type ContainerPortInput interface {
	pulumi.Input

	ToContainerPortOutput() ContainerPortOutput
	ToContainerPortOutputWithContext(context.Context) ContainerPortOutput
}

// The port exposed on the container instance.
type ContainerPortArgs struct {
	// The port number exposed within the container group.
	Port pulumi.IntInput `pulumi:"port"`
	// The protocol associated with the port.
	Protocol pulumi.StringPtrInput `pulumi:"protocol"`
}

func (ContainerPortArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ContainerPort)(nil)).Elem()
}

func (i ContainerPortArgs) ToContainerPortOutput() ContainerPortOutput {
	return i.ToContainerPortOutputWithContext(context.Background())
}

func (i ContainerPortArgs) ToContainerPortOutputWithContext(ctx context.Context) ContainerPortOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerPortOutput)
}

// ContainerPortArrayInput is an input type that accepts ContainerPortArray and ContainerPortArrayOutput values.
// You can construct a concrete instance of `ContainerPortArrayInput` via:
//
//          ContainerPortArray{ ContainerPortArgs{...} }
type ContainerPortArrayInput interface {
	pulumi.Input

	ToContainerPortArrayOutput() ContainerPortArrayOutput
	ToContainerPortArrayOutputWithContext(context.Context) ContainerPortArrayOutput
}

type ContainerPortArray []ContainerPortInput

func (ContainerPortArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ContainerPort)(nil)).Elem()
}

func (i ContainerPortArray) ToContainerPortArrayOutput() ContainerPortArrayOutput {
	return i.ToContainerPortArrayOutputWithContext(context.Background())
}

func (i ContainerPortArray) ToContainerPortArrayOutputWithContext(ctx context.Context) ContainerPortArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerPortArrayOutput)
}

// The port exposed on the container instance.
type ContainerPortOutput struct{ *pulumi.OutputState }

func (ContainerPortOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ContainerPort)(nil)).Elem()
}

func (o ContainerPortOutput) ToContainerPortOutput() ContainerPortOutput {
	return o
}

func (o ContainerPortOutput) ToContainerPortOutputWithContext(ctx context.Context) ContainerPortOutput {
	return o
}

// The port number exposed within the container group.
func (o ContainerPortOutput) Port() pulumi.IntOutput {
	return o.ApplyT(func(v ContainerPort) int { return v.Port }).(pulumi.IntOutput)
}

// The protocol associated with the port.
func (o ContainerPortOutput) Protocol() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContainerPort) *string { return v.Protocol }).(pulumi.StringPtrOutput)
}

type ContainerPortArrayOutput struct{ *pulumi.OutputState }

func (ContainerPortArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ContainerPort)(nil)).Elem()
}

func (o ContainerPortArrayOutput) ToContainerPortArrayOutput() ContainerPortArrayOutput {
	return o
}

func (o ContainerPortArrayOutput) ToContainerPortArrayOutputWithContext(ctx context.Context) ContainerPortArrayOutput {
	return o
}

func (o ContainerPortArrayOutput) Index(i pulumi.IntInput) ContainerPortOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ContainerPort {
		return vs[0].([]ContainerPort)[vs[1].(int)]
	}).(ContainerPortOutput)
}

// The port exposed on the container instance.
type ContainerPortInvokeResponse struct {
	// The port number exposed within the container group.
	Port int `pulumi:"port"`
	// The protocol associated with the port.
	Protocol *string `pulumi:"protocol"`
}

// ContainerPortInvokeResponseInput is an input type that accepts ContainerPortInvokeResponseArgs and ContainerPortInvokeResponseOutput values.
// You can construct a concrete instance of `ContainerPortInvokeResponseInput` via:
//
//          ContainerPortInvokeResponseArgs{...}
type ContainerPortInvokeResponseInput interface {
	pulumi.Input

	ToContainerPortInvokeResponseOutput() ContainerPortInvokeResponseOutput
	ToContainerPortInvokeResponseOutputWithContext(context.Context) ContainerPortInvokeResponseOutput
}

// The port exposed on the container instance.
type ContainerPortInvokeResponseArgs struct {
	// The port number exposed within the container group.
	Port pulumi.IntInput `pulumi:"port"`
	// The protocol associated with the port.
	Protocol pulumi.StringPtrInput `pulumi:"protocol"`
}

func (ContainerPortInvokeResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ContainerPortInvokeResponse)(nil)).Elem()
}

func (i ContainerPortInvokeResponseArgs) ToContainerPortInvokeResponseOutput() ContainerPortInvokeResponseOutput {
	return i.ToContainerPortInvokeResponseOutputWithContext(context.Background())
}

func (i ContainerPortInvokeResponseArgs) ToContainerPortInvokeResponseOutputWithContext(ctx context.Context) ContainerPortInvokeResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerPortInvokeResponseOutput)
}

// ContainerPortInvokeResponseArrayInput is an input type that accepts ContainerPortInvokeResponseArray and ContainerPortInvokeResponseArrayOutput values.
// You can construct a concrete instance of `ContainerPortInvokeResponseArrayInput` via:
//
//          ContainerPortInvokeResponseArray{ ContainerPortInvokeResponseArgs{...} }
type ContainerPortInvokeResponseArrayInput interface {
	pulumi.Input

	ToContainerPortInvokeResponseArrayOutput() ContainerPortInvokeResponseArrayOutput
	ToContainerPortInvokeResponseArrayOutputWithContext(context.Context) ContainerPortInvokeResponseArrayOutput
}

type ContainerPortInvokeResponseArray []ContainerPortInvokeResponseInput

func (ContainerPortInvokeResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ContainerPortInvokeResponse)(nil)).Elem()
}

func (i ContainerPortInvokeResponseArray) ToContainerPortInvokeResponseArrayOutput() ContainerPortInvokeResponseArrayOutput {
	return i.ToContainerPortInvokeResponseArrayOutputWithContext(context.Background())
}

func (i ContainerPortInvokeResponseArray) ToContainerPortInvokeResponseArrayOutputWithContext(ctx context.Context) ContainerPortInvokeResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerPortInvokeResponseArrayOutput)
}

// The port exposed on the container instance.
type ContainerPortInvokeResponseOutput struct{ *pulumi.OutputState }

func (ContainerPortInvokeResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ContainerPortInvokeResponse)(nil)).Elem()
}

func (o ContainerPortInvokeResponseOutput) ToContainerPortInvokeResponseOutput() ContainerPortInvokeResponseOutput {
	return o
}

func (o ContainerPortInvokeResponseOutput) ToContainerPortInvokeResponseOutputWithContext(ctx context.Context) ContainerPortInvokeResponseOutput {
	return o
}

// The port number exposed within the container group.
func (o ContainerPortInvokeResponseOutput) Port() pulumi.IntOutput {
	return o.ApplyT(func(v ContainerPortInvokeResponse) int { return v.Port }).(pulumi.IntOutput)
}

// The protocol associated with the port.
func (o ContainerPortInvokeResponseOutput) Protocol() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContainerPortInvokeResponse) *string { return v.Protocol }).(pulumi.StringPtrOutput)
}

type ContainerPortInvokeResponseArrayOutput struct{ *pulumi.OutputState }

func (ContainerPortInvokeResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ContainerPortInvokeResponse)(nil)).Elem()
}

func (o ContainerPortInvokeResponseArrayOutput) ToContainerPortInvokeResponseArrayOutput() ContainerPortInvokeResponseArrayOutput {
	return o
}

func (o ContainerPortInvokeResponseArrayOutput) ToContainerPortInvokeResponseArrayOutputWithContext(ctx context.Context) ContainerPortInvokeResponseArrayOutput {
	return o
}

func (o ContainerPortInvokeResponseArrayOutput) Index(i pulumi.IntInput) ContainerPortInvokeResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ContainerPortInvokeResponse {
		return vs[0].([]ContainerPortInvokeResponse)[vs[1].(int)]
	}).(ContainerPortInvokeResponseOutput)
}

// The port exposed on the container instance.
type ContainerPortResponse struct {
	// The port number exposed within the container group.
	Port int `pulumi:"port"`
	// The protocol associated with the port.
	Protocol *string `pulumi:"protocol"`
}

// ContainerPortResponseInput is an input type that accepts ContainerPortResponseArgs and ContainerPortResponseOutput values.
// You can construct a concrete instance of `ContainerPortResponseInput` via:
//
//          ContainerPortResponseArgs{...}
type ContainerPortResponseInput interface {
	pulumi.Input

	ToContainerPortResponseOutput() ContainerPortResponseOutput
	ToContainerPortResponseOutputWithContext(context.Context) ContainerPortResponseOutput
}

// The port exposed on the container instance.
type ContainerPortResponseArgs struct {
	// The port number exposed within the container group.
	Port pulumi.IntInput `pulumi:"port"`
	// The protocol associated with the port.
	Protocol pulumi.StringPtrInput `pulumi:"protocol"`
}

func (ContainerPortResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ContainerPortResponse)(nil)).Elem()
}

func (i ContainerPortResponseArgs) ToContainerPortResponseOutput() ContainerPortResponseOutput {
	return i.ToContainerPortResponseOutputWithContext(context.Background())
}

func (i ContainerPortResponseArgs) ToContainerPortResponseOutputWithContext(ctx context.Context) ContainerPortResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerPortResponseOutput)
}

// ContainerPortResponseArrayInput is an input type that accepts ContainerPortResponseArray and ContainerPortResponseArrayOutput values.
// You can construct a concrete instance of `ContainerPortResponseArrayInput` via:
//
//          ContainerPortResponseArray{ ContainerPortResponseArgs{...} }
type ContainerPortResponseArrayInput interface {
	pulumi.Input

	ToContainerPortResponseArrayOutput() ContainerPortResponseArrayOutput
	ToContainerPortResponseArrayOutputWithContext(context.Context) ContainerPortResponseArrayOutput
}

type ContainerPortResponseArray []ContainerPortResponseInput

func (ContainerPortResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ContainerPortResponse)(nil)).Elem()
}

func (i ContainerPortResponseArray) ToContainerPortResponseArrayOutput() ContainerPortResponseArrayOutput {
	return i.ToContainerPortResponseArrayOutputWithContext(context.Background())
}

func (i ContainerPortResponseArray) ToContainerPortResponseArrayOutputWithContext(ctx context.Context) ContainerPortResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerPortResponseArrayOutput)
}

// The port exposed on the container instance.
type ContainerPortResponseOutput struct{ *pulumi.OutputState }

func (ContainerPortResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ContainerPortResponse)(nil)).Elem()
}

func (o ContainerPortResponseOutput) ToContainerPortResponseOutput() ContainerPortResponseOutput {
	return o
}

func (o ContainerPortResponseOutput) ToContainerPortResponseOutputWithContext(ctx context.Context) ContainerPortResponseOutput {
	return o
}

// The port number exposed within the container group.
func (o ContainerPortResponseOutput) Port() pulumi.IntOutput {
	return o.ApplyT(func(v ContainerPortResponse) int { return v.Port }).(pulumi.IntOutput)
}

// The protocol associated with the port.
func (o ContainerPortResponseOutput) Protocol() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContainerPortResponse) *string { return v.Protocol }).(pulumi.StringPtrOutput)
}

type ContainerPortResponseArrayOutput struct{ *pulumi.OutputState }

func (ContainerPortResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ContainerPortResponse)(nil)).Elem()
}

func (o ContainerPortResponseArrayOutput) ToContainerPortResponseArrayOutput() ContainerPortResponseArrayOutput {
	return o
}

func (o ContainerPortResponseArrayOutput) ToContainerPortResponseArrayOutputWithContext(ctx context.Context) ContainerPortResponseArrayOutput {
	return o
}

func (o ContainerPortResponseArrayOutput) Index(i pulumi.IntInput) ContainerPortResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ContainerPortResponse {
		return vs[0].([]ContainerPortResponse)[vs[1].(int)]
	}).(ContainerPortResponseOutput)
}

// The container probe, for liveness or readiness
type ContainerProbe struct {
	// The execution command to probe
	Exec *ContainerExec `pulumi:"exec"`
	// The failure threshold.
	FailureThreshold *int `pulumi:"failureThreshold"`
	// The Http Get settings to probe
	HttpGet *ContainerHttpGet `pulumi:"httpGet"`
	// The initial delay seconds.
	InitialDelaySeconds *int `pulumi:"initialDelaySeconds"`
	// The period seconds.
	PeriodSeconds *int `pulumi:"periodSeconds"`
	// The success threshold.
	SuccessThreshold *int `pulumi:"successThreshold"`
	// The timeout seconds.
	TimeoutSeconds *int `pulumi:"timeoutSeconds"`
}

// ContainerProbeInput is an input type that accepts ContainerProbeArgs and ContainerProbeOutput values.
// You can construct a concrete instance of `ContainerProbeInput` via:
//
//          ContainerProbeArgs{...}
type ContainerProbeInput interface {
	pulumi.Input

	ToContainerProbeOutput() ContainerProbeOutput
	ToContainerProbeOutputWithContext(context.Context) ContainerProbeOutput
}

// The container probe, for liveness or readiness
type ContainerProbeArgs struct {
	// The execution command to probe
	Exec ContainerExecPtrInput `pulumi:"exec"`
	// The failure threshold.
	FailureThreshold pulumi.IntPtrInput `pulumi:"failureThreshold"`
	// The Http Get settings to probe
	HttpGet ContainerHttpGetPtrInput `pulumi:"httpGet"`
	// The initial delay seconds.
	InitialDelaySeconds pulumi.IntPtrInput `pulumi:"initialDelaySeconds"`
	// The period seconds.
	PeriodSeconds pulumi.IntPtrInput `pulumi:"periodSeconds"`
	// The success threshold.
	SuccessThreshold pulumi.IntPtrInput `pulumi:"successThreshold"`
	// The timeout seconds.
	TimeoutSeconds pulumi.IntPtrInput `pulumi:"timeoutSeconds"`
}

func (ContainerProbeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ContainerProbe)(nil)).Elem()
}

func (i ContainerProbeArgs) ToContainerProbeOutput() ContainerProbeOutput {
	return i.ToContainerProbeOutputWithContext(context.Background())
}

func (i ContainerProbeArgs) ToContainerProbeOutputWithContext(ctx context.Context) ContainerProbeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerProbeOutput)
}

func (i ContainerProbeArgs) ToContainerProbePtrOutput() ContainerProbePtrOutput {
	return i.ToContainerProbePtrOutputWithContext(context.Background())
}

func (i ContainerProbeArgs) ToContainerProbePtrOutputWithContext(ctx context.Context) ContainerProbePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerProbeOutput).ToContainerProbePtrOutputWithContext(ctx)
}

// ContainerProbePtrInput is an input type that accepts ContainerProbeArgs, ContainerProbePtr and ContainerProbePtrOutput values.
// You can construct a concrete instance of `ContainerProbePtrInput` via:
//
//          ContainerProbeArgs{...}
//
//  or:
//
//          nil
type ContainerProbePtrInput interface {
	pulumi.Input

	ToContainerProbePtrOutput() ContainerProbePtrOutput
	ToContainerProbePtrOutputWithContext(context.Context) ContainerProbePtrOutput
}

type containerProbePtrType ContainerProbeArgs

func ContainerProbePtr(v *ContainerProbeArgs) ContainerProbePtrInput {
	return (*containerProbePtrType)(v)
}

func (*containerProbePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ContainerProbe)(nil)).Elem()
}

func (i *containerProbePtrType) ToContainerProbePtrOutput() ContainerProbePtrOutput {
	return i.ToContainerProbePtrOutputWithContext(context.Background())
}

func (i *containerProbePtrType) ToContainerProbePtrOutputWithContext(ctx context.Context) ContainerProbePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerProbePtrOutput)
}

// The container probe, for liveness or readiness
type ContainerProbeOutput struct{ *pulumi.OutputState }

func (ContainerProbeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ContainerProbe)(nil)).Elem()
}

func (o ContainerProbeOutput) ToContainerProbeOutput() ContainerProbeOutput {
	return o
}

func (o ContainerProbeOutput) ToContainerProbeOutputWithContext(ctx context.Context) ContainerProbeOutput {
	return o
}

func (o ContainerProbeOutput) ToContainerProbePtrOutput() ContainerProbePtrOutput {
	return o.ToContainerProbePtrOutputWithContext(context.Background())
}

func (o ContainerProbeOutput) ToContainerProbePtrOutputWithContext(ctx context.Context) ContainerProbePtrOutput {
	return o.ApplyT(func(v ContainerProbe) *ContainerProbe {
		return &v
	}).(ContainerProbePtrOutput)
}

// The execution command to probe
func (o ContainerProbeOutput) Exec() ContainerExecPtrOutput {
	return o.ApplyT(func(v ContainerProbe) *ContainerExec { return v.Exec }).(ContainerExecPtrOutput)
}

// The failure threshold.
func (o ContainerProbeOutput) FailureThreshold() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ContainerProbe) *int { return v.FailureThreshold }).(pulumi.IntPtrOutput)
}

// The Http Get settings to probe
func (o ContainerProbeOutput) HttpGet() ContainerHttpGetPtrOutput {
	return o.ApplyT(func(v ContainerProbe) *ContainerHttpGet { return v.HttpGet }).(ContainerHttpGetPtrOutput)
}

// The initial delay seconds.
func (o ContainerProbeOutput) InitialDelaySeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ContainerProbe) *int { return v.InitialDelaySeconds }).(pulumi.IntPtrOutput)
}

// The period seconds.
func (o ContainerProbeOutput) PeriodSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ContainerProbe) *int { return v.PeriodSeconds }).(pulumi.IntPtrOutput)
}

// The success threshold.
func (o ContainerProbeOutput) SuccessThreshold() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ContainerProbe) *int { return v.SuccessThreshold }).(pulumi.IntPtrOutput)
}

// The timeout seconds.
func (o ContainerProbeOutput) TimeoutSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ContainerProbe) *int { return v.TimeoutSeconds }).(pulumi.IntPtrOutput)
}

type ContainerProbePtrOutput struct{ *pulumi.OutputState }

func (ContainerProbePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ContainerProbe)(nil)).Elem()
}

func (o ContainerProbePtrOutput) ToContainerProbePtrOutput() ContainerProbePtrOutput {
	return o
}

func (o ContainerProbePtrOutput) ToContainerProbePtrOutputWithContext(ctx context.Context) ContainerProbePtrOutput {
	return o
}

func (o ContainerProbePtrOutput) Elem() ContainerProbeOutput {
	return o.ApplyT(func(v *ContainerProbe) ContainerProbe { return *v }).(ContainerProbeOutput)
}

// The execution command to probe
func (o ContainerProbePtrOutput) Exec() ContainerExecPtrOutput {
	return o.ApplyT(func(v *ContainerProbe) *ContainerExec {
		if v == nil {
			return nil
		}
		return v.Exec
	}).(ContainerExecPtrOutput)
}

// The failure threshold.
func (o ContainerProbePtrOutput) FailureThreshold() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ContainerProbe) *int {
		if v == nil {
			return nil
		}
		return v.FailureThreshold
	}).(pulumi.IntPtrOutput)
}

// The Http Get settings to probe
func (o ContainerProbePtrOutput) HttpGet() ContainerHttpGetPtrOutput {
	return o.ApplyT(func(v *ContainerProbe) *ContainerHttpGet {
		if v == nil {
			return nil
		}
		return v.HttpGet
	}).(ContainerHttpGetPtrOutput)
}

// The initial delay seconds.
func (o ContainerProbePtrOutput) InitialDelaySeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ContainerProbe) *int {
		if v == nil {
			return nil
		}
		return v.InitialDelaySeconds
	}).(pulumi.IntPtrOutput)
}

// The period seconds.
func (o ContainerProbePtrOutput) PeriodSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ContainerProbe) *int {
		if v == nil {
			return nil
		}
		return v.PeriodSeconds
	}).(pulumi.IntPtrOutput)
}

// The success threshold.
func (o ContainerProbePtrOutput) SuccessThreshold() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ContainerProbe) *int {
		if v == nil {
			return nil
		}
		return v.SuccessThreshold
	}).(pulumi.IntPtrOutput)
}

// The timeout seconds.
func (o ContainerProbePtrOutput) TimeoutSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ContainerProbe) *int {
		if v == nil {
			return nil
		}
		return v.TimeoutSeconds
	}).(pulumi.IntPtrOutput)
}

// The container probe, for liveness or readiness
type ContainerProbeInvokeResponse struct {
	// The execution command to probe
	Exec *ContainerExecInvokeResponse `pulumi:"exec"`
	// The failure threshold.
	FailureThreshold *int `pulumi:"failureThreshold"`
	// The Http Get settings to probe
	HttpGet *ContainerHttpGetInvokeResponse `pulumi:"httpGet"`
	// The initial delay seconds.
	InitialDelaySeconds *int `pulumi:"initialDelaySeconds"`
	// The period seconds.
	PeriodSeconds *int `pulumi:"periodSeconds"`
	// The success threshold.
	SuccessThreshold *int `pulumi:"successThreshold"`
	// The timeout seconds.
	TimeoutSeconds *int `pulumi:"timeoutSeconds"`
}

// ContainerProbeInvokeResponseInput is an input type that accepts ContainerProbeInvokeResponseArgs and ContainerProbeInvokeResponseOutput values.
// You can construct a concrete instance of `ContainerProbeInvokeResponseInput` via:
//
//          ContainerProbeInvokeResponseArgs{...}
type ContainerProbeInvokeResponseInput interface {
	pulumi.Input

	ToContainerProbeInvokeResponseOutput() ContainerProbeInvokeResponseOutput
	ToContainerProbeInvokeResponseOutputWithContext(context.Context) ContainerProbeInvokeResponseOutput
}

// The container probe, for liveness or readiness
type ContainerProbeInvokeResponseArgs struct {
	// The execution command to probe
	Exec ContainerExecInvokeResponsePtrInput `pulumi:"exec"`
	// The failure threshold.
	FailureThreshold pulumi.IntPtrInput `pulumi:"failureThreshold"`
	// The Http Get settings to probe
	HttpGet ContainerHttpGetInvokeResponsePtrInput `pulumi:"httpGet"`
	// The initial delay seconds.
	InitialDelaySeconds pulumi.IntPtrInput `pulumi:"initialDelaySeconds"`
	// The period seconds.
	PeriodSeconds pulumi.IntPtrInput `pulumi:"periodSeconds"`
	// The success threshold.
	SuccessThreshold pulumi.IntPtrInput `pulumi:"successThreshold"`
	// The timeout seconds.
	TimeoutSeconds pulumi.IntPtrInput `pulumi:"timeoutSeconds"`
}

func (ContainerProbeInvokeResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ContainerProbeInvokeResponse)(nil)).Elem()
}

func (i ContainerProbeInvokeResponseArgs) ToContainerProbeInvokeResponseOutput() ContainerProbeInvokeResponseOutput {
	return i.ToContainerProbeInvokeResponseOutputWithContext(context.Background())
}

func (i ContainerProbeInvokeResponseArgs) ToContainerProbeInvokeResponseOutputWithContext(ctx context.Context) ContainerProbeInvokeResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerProbeInvokeResponseOutput)
}

func (i ContainerProbeInvokeResponseArgs) ToContainerProbeInvokeResponsePtrOutput() ContainerProbeInvokeResponsePtrOutput {
	return i.ToContainerProbeInvokeResponsePtrOutputWithContext(context.Background())
}

func (i ContainerProbeInvokeResponseArgs) ToContainerProbeInvokeResponsePtrOutputWithContext(ctx context.Context) ContainerProbeInvokeResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerProbeInvokeResponseOutput).ToContainerProbeInvokeResponsePtrOutputWithContext(ctx)
}

// ContainerProbeInvokeResponsePtrInput is an input type that accepts ContainerProbeInvokeResponseArgs, ContainerProbeInvokeResponsePtr and ContainerProbeInvokeResponsePtrOutput values.
// You can construct a concrete instance of `ContainerProbeInvokeResponsePtrInput` via:
//
//          ContainerProbeInvokeResponseArgs{...}
//
//  or:
//
//          nil
type ContainerProbeInvokeResponsePtrInput interface {
	pulumi.Input

	ToContainerProbeInvokeResponsePtrOutput() ContainerProbeInvokeResponsePtrOutput
	ToContainerProbeInvokeResponsePtrOutputWithContext(context.Context) ContainerProbeInvokeResponsePtrOutput
}

type containerProbeInvokeResponsePtrType ContainerProbeInvokeResponseArgs

func ContainerProbeInvokeResponsePtr(v *ContainerProbeInvokeResponseArgs) ContainerProbeInvokeResponsePtrInput {
	return (*containerProbeInvokeResponsePtrType)(v)
}

func (*containerProbeInvokeResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ContainerProbeInvokeResponse)(nil)).Elem()
}

func (i *containerProbeInvokeResponsePtrType) ToContainerProbeInvokeResponsePtrOutput() ContainerProbeInvokeResponsePtrOutput {
	return i.ToContainerProbeInvokeResponsePtrOutputWithContext(context.Background())
}

func (i *containerProbeInvokeResponsePtrType) ToContainerProbeInvokeResponsePtrOutputWithContext(ctx context.Context) ContainerProbeInvokeResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerProbeInvokeResponsePtrOutput)
}

// The container probe, for liveness or readiness
type ContainerProbeInvokeResponseOutput struct{ *pulumi.OutputState }

func (ContainerProbeInvokeResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ContainerProbeInvokeResponse)(nil)).Elem()
}

func (o ContainerProbeInvokeResponseOutput) ToContainerProbeInvokeResponseOutput() ContainerProbeInvokeResponseOutput {
	return o
}

func (o ContainerProbeInvokeResponseOutput) ToContainerProbeInvokeResponseOutputWithContext(ctx context.Context) ContainerProbeInvokeResponseOutput {
	return o
}

func (o ContainerProbeInvokeResponseOutput) ToContainerProbeInvokeResponsePtrOutput() ContainerProbeInvokeResponsePtrOutput {
	return o.ToContainerProbeInvokeResponsePtrOutputWithContext(context.Background())
}

func (o ContainerProbeInvokeResponseOutput) ToContainerProbeInvokeResponsePtrOutputWithContext(ctx context.Context) ContainerProbeInvokeResponsePtrOutput {
	return o.ApplyT(func(v ContainerProbeInvokeResponse) *ContainerProbeInvokeResponse {
		return &v
	}).(ContainerProbeInvokeResponsePtrOutput)
}

// The execution command to probe
func (o ContainerProbeInvokeResponseOutput) Exec() ContainerExecInvokeResponsePtrOutput {
	return o.ApplyT(func(v ContainerProbeInvokeResponse) *ContainerExecInvokeResponse { return v.Exec }).(ContainerExecInvokeResponsePtrOutput)
}

// The failure threshold.
func (o ContainerProbeInvokeResponseOutput) FailureThreshold() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ContainerProbeInvokeResponse) *int { return v.FailureThreshold }).(pulumi.IntPtrOutput)
}

// The Http Get settings to probe
func (o ContainerProbeInvokeResponseOutput) HttpGet() ContainerHttpGetInvokeResponsePtrOutput {
	return o.ApplyT(func(v ContainerProbeInvokeResponse) *ContainerHttpGetInvokeResponse { return v.HttpGet }).(ContainerHttpGetInvokeResponsePtrOutput)
}

// The initial delay seconds.
func (o ContainerProbeInvokeResponseOutput) InitialDelaySeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ContainerProbeInvokeResponse) *int { return v.InitialDelaySeconds }).(pulumi.IntPtrOutput)
}

// The period seconds.
func (o ContainerProbeInvokeResponseOutput) PeriodSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ContainerProbeInvokeResponse) *int { return v.PeriodSeconds }).(pulumi.IntPtrOutput)
}

// The success threshold.
func (o ContainerProbeInvokeResponseOutput) SuccessThreshold() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ContainerProbeInvokeResponse) *int { return v.SuccessThreshold }).(pulumi.IntPtrOutput)
}

// The timeout seconds.
func (o ContainerProbeInvokeResponseOutput) TimeoutSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ContainerProbeInvokeResponse) *int { return v.TimeoutSeconds }).(pulumi.IntPtrOutput)
}

type ContainerProbeInvokeResponsePtrOutput struct{ *pulumi.OutputState }

func (ContainerProbeInvokeResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ContainerProbeInvokeResponse)(nil)).Elem()
}

func (o ContainerProbeInvokeResponsePtrOutput) ToContainerProbeInvokeResponsePtrOutput() ContainerProbeInvokeResponsePtrOutput {
	return o
}

func (o ContainerProbeInvokeResponsePtrOutput) ToContainerProbeInvokeResponsePtrOutputWithContext(ctx context.Context) ContainerProbeInvokeResponsePtrOutput {
	return o
}

func (o ContainerProbeInvokeResponsePtrOutput) Elem() ContainerProbeInvokeResponseOutput {
	return o.ApplyT(func(v *ContainerProbeInvokeResponse) ContainerProbeInvokeResponse { return *v }).(ContainerProbeInvokeResponseOutput)
}

// The execution command to probe
func (o ContainerProbeInvokeResponsePtrOutput) Exec() ContainerExecInvokeResponsePtrOutput {
	return o.ApplyT(func(v *ContainerProbeInvokeResponse) *ContainerExecInvokeResponse {
		if v == nil {
			return nil
		}
		return v.Exec
	}).(ContainerExecInvokeResponsePtrOutput)
}

// The failure threshold.
func (o ContainerProbeInvokeResponsePtrOutput) FailureThreshold() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ContainerProbeInvokeResponse) *int {
		if v == nil {
			return nil
		}
		return v.FailureThreshold
	}).(pulumi.IntPtrOutput)
}

// The Http Get settings to probe
func (o ContainerProbeInvokeResponsePtrOutput) HttpGet() ContainerHttpGetInvokeResponsePtrOutput {
	return o.ApplyT(func(v *ContainerProbeInvokeResponse) *ContainerHttpGetInvokeResponse {
		if v == nil {
			return nil
		}
		return v.HttpGet
	}).(ContainerHttpGetInvokeResponsePtrOutput)
}

// The initial delay seconds.
func (o ContainerProbeInvokeResponsePtrOutput) InitialDelaySeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ContainerProbeInvokeResponse) *int {
		if v == nil {
			return nil
		}
		return v.InitialDelaySeconds
	}).(pulumi.IntPtrOutput)
}

// The period seconds.
func (o ContainerProbeInvokeResponsePtrOutput) PeriodSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ContainerProbeInvokeResponse) *int {
		if v == nil {
			return nil
		}
		return v.PeriodSeconds
	}).(pulumi.IntPtrOutput)
}

// The success threshold.
func (o ContainerProbeInvokeResponsePtrOutput) SuccessThreshold() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ContainerProbeInvokeResponse) *int {
		if v == nil {
			return nil
		}
		return v.SuccessThreshold
	}).(pulumi.IntPtrOutput)
}

// The timeout seconds.
func (o ContainerProbeInvokeResponsePtrOutput) TimeoutSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ContainerProbeInvokeResponse) *int {
		if v == nil {
			return nil
		}
		return v.TimeoutSeconds
	}).(pulumi.IntPtrOutput)
}

// The container probe, for liveness or readiness
type ContainerProbeResponse struct {
	// The execution command to probe
	Exec *ContainerExecResponse `pulumi:"exec"`
	// The failure threshold.
	FailureThreshold *int `pulumi:"failureThreshold"`
	// The Http Get settings to probe
	HttpGet *ContainerHttpGetResponse `pulumi:"httpGet"`
	// The initial delay seconds.
	InitialDelaySeconds *int `pulumi:"initialDelaySeconds"`
	// The period seconds.
	PeriodSeconds *int `pulumi:"periodSeconds"`
	// The success threshold.
	SuccessThreshold *int `pulumi:"successThreshold"`
	// The timeout seconds.
	TimeoutSeconds *int `pulumi:"timeoutSeconds"`
}

// ContainerProbeResponseInput is an input type that accepts ContainerProbeResponseArgs and ContainerProbeResponseOutput values.
// You can construct a concrete instance of `ContainerProbeResponseInput` via:
//
//          ContainerProbeResponseArgs{...}
type ContainerProbeResponseInput interface {
	pulumi.Input

	ToContainerProbeResponseOutput() ContainerProbeResponseOutput
	ToContainerProbeResponseOutputWithContext(context.Context) ContainerProbeResponseOutput
}

// The container probe, for liveness or readiness
type ContainerProbeResponseArgs struct {
	// The execution command to probe
	Exec ContainerExecResponsePtrInput `pulumi:"exec"`
	// The failure threshold.
	FailureThreshold pulumi.IntPtrInput `pulumi:"failureThreshold"`
	// The Http Get settings to probe
	HttpGet ContainerHttpGetResponsePtrInput `pulumi:"httpGet"`
	// The initial delay seconds.
	InitialDelaySeconds pulumi.IntPtrInput `pulumi:"initialDelaySeconds"`
	// The period seconds.
	PeriodSeconds pulumi.IntPtrInput `pulumi:"periodSeconds"`
	// The success threshold.
	SuccessThreshold pulumi.IntPtrInput `pulumi:"successThreshold"`
	// The timeout seconds.
	TimeoutSeconds pulumi.IntPtrInput `pulumi:"timeoutSeconds"`
}

func (ContainerProbeResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ContainerProbeResponse)(nil)).Elem()
}

func (i ContainerProbeResponseArgs) ToContainerProbeResponseOutput() ContainerProbeResponseOutput {
	return i.ToContainerProbeResponseOutputWithContext(context.Background())
}

func (i ContainerProbeResponseArgs) ToContainerProbeResponseOutputWithContext(ctx context.Context) ContainerProbeResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerProbeResponseOutput)
}

func (i ContainerProbeResponseArgs) ToContainerProbeResponsePtrOutput() ContainerProbeResponsePtrOutput {
	return i.ToContainerProbeResponsePtrOutputWithContext(context.Background())
}

func (i ContainerProbeResponseArgs) ToContainerProbeResponsePtrOutputWithContext(ctx context.Context) ContainerProbeResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerProbeResponseOutput).ToContainerProbeResponsePtrOutputWithContext(ctx)
}

// ContainerProbeResponsePtrInput is an input type that accepts ContainerProbeResponseArgs, ContainerProbeResponsePtr and ContainerProbeResponsePtrOutput values.
// You can construct a concrete instance of `ContainerProbeResponsePtrInput` via:
//
//          ContainerProbeResponseArgs{...}
//
//  or:
//
//          nil
type ContainerProbeResponsePtrInput interface {
	pulumi.Input

	ToContainerProbeResponsePtrOutput() ContainerProbeResponsePtrOutput
	ToContainerProbeResponsePtrOutputWithContext(context.Context) ContainerProbeResponsePtrOutput
}

type containerProbeResponsePtrType ContainerProbeResponseArgs

func ContainerProbeResponsePtr(v *ContainerProbeResponseArgs) ContainerProbeResponsePtrInput {
	return (*containerProbeResponsePtrType)(v)
}

func (*containerProbeResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ContainerProbeResponse)(nil)).Elem()
}

func (i *containerProbeResponsePtrType) ToContainerProbeResponsePtrOutput() ContainerProbeResponsePtrOutput {
	return i.ToContainerProbeResponsePtrOutputWithContext(context.Background())
}

func (i *containerProbeResponsePtrType) ToContainerProbeResponsePtrOutputWithContext(ctx context.Context) ContainerProbeResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerProbeResponsePtrOutput)
}

// The container probe, for liveness or readiness
type ContainerProbeResponseOutput struct{ *pulumi.OutputState }

func (ContainerProbeResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ContainerProbeResponse)(nil)).Elem()
}

func (o ContainerProbeResponseOutput) ToContainerProbeResponseOutput() ContainerProbeResponseOutput {
	return o
}

func (o ContainerProbeResponseOutput) ToContainerProbeResponseOutputWithContext(ctx context.Context) ContainerProbeResponseOutput {
	return o
}

func (o ContainerProbeResponseOutput) ToContainerProbeResponsePtrOutput() ContainerProbeResponsePtrOutput {
	return o.ToContainerProbeResponsePtrOutputWithContext(context.Background())
}

func (o ContainerProbeResponseOutput) ToContainerProbeResponsePtrOutputWithContext(ctx context.Context) ContainerProbeResponsePtrOutput {
	return o.ApplyT(func(v ContainerProbeResponse) *ContainerProbeResponse {
		return &v
	}).(ContainerProbeResponsePtrOutput)
}

// The execution command to probe
func (o ContainerProbeResponseOutput) Exec() ContainerExecResponsePtrOutput {
	return o.ApplyT(func(v ContainerProbeResponse) *ContainerExecResponse { return v.Exec }).(ContainerExecResponsePtrOutput)
}

// The failure threshold.
func (o ContainerProbeResponseOutput) FailureThreshold() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ContainerProbeResponse) *int { return v.FailureThreshold }).(pulumi.IntPtrOutput)
}

// The Http Get settings to probe
func (o ContainerProbeResponseOutput) HttpGet() ContainerHttpGetResponsePtrOutput {
	return o.ApplyT(func(v ContainerProbeResponse) *ContainerHttpGetResponse { return v.HttpGet }).(ContainerHttpGetResponsePtrOutput)
}

// The initial delay seconds.
func (o ContainerProbeResponseOutput) InitialDelaySeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ContainerProbeResponse) *int { return v.InitialDelaySeconds }).(pulumi.IntPtrOutput)
}

// The period seconds.
func (o ContainerProbeResponseOutput) PeriodSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ContainerProbeResponse) *int { return v.PeriodSeconds }).(pulumi.IntPtrOutput)
}

// The success threshold.
func (o ContainerProbeResponseOutput) SuccessThreshold() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ContainerProbeResponse) *int { return v.SuccessThreshold }).(pulumi.IntPtrOutput)
}

// The timeout seconds.
func (o ContainerProbeResponseOutput) TimeoutSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ContainerProbeResponse) *int { return v.TimeoutSeconds }).(pulumi.IntPtrOutput)
}

type ContainerProbeResponsePtrOutput struct{ *pulumi.OutputState }

func (ContainerProbeResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ContainerProbeResponse)(nil)).Elem()
}

func (o ContainerProbeResponsePtrOutput) ToContainerProbeResponsePtrOutput() ContainerProbeResponsePtrOutput {
	return o
}

func (o ContainerProbeResponsePtrOutput) ToContainerProbeResponsePtrOutputWithContext(ctx context.Context) ContainerProbeResponsePtrOutput {
	return o
}

func (o ContainerProbeResponsePtrOutput) Elem() ContainerProbeResponseOutput {
	return o.ApplyT(func(v *ContainerProbeResponse) ContainerProbeResponse { return *v }).(ContainerProbeResponseOutput)
}

// The execution command to probe
func (o ContainerProbeResponsePtrOutput) Exec() ContainerExecResponsePtrOutput {
	return o.ApplyT(func(v *ContainerProbeResponse) *ContainerExecResponse {
		if v == nil {
			return nil
		}
		return v.Exec
	}).(ContainerExecResponsePtrOutput)
}

// The failure threshold.
func (o ContainerProbeResponsePtrOutput) FailureThreshold() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ContainerProbeResponse) *int {
		if v == nil {
			return nil
		}
		return v.FailureThreshold
	}).(pulumi.IntPtrOutput)
}

// The Http Get settings to probe
func (o ContainerProbeResponsePtrOutput) HttpGet() ContainerHttpGetResponsePtrOutput {
	return o.ApplyT(func(v *ContainerProbeResponse) *ContainerHttpGetResponse {
		if v == nil {
			return nil
		}
		return v.HttpGet
	}).(ContainerHttpGetResponsePtrOutput)
}

// The initial delay seconds.
func (o ContainerProbeResponsePtrOutput) InitialDelaySeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ContainerProbeResponse) *int {
		if v == nil {
			return nil
		}
		return v.InitialDelaySeconds
	}).(pulumi.IntPtrOutput)
}

// The period seconds.
func (o ContainerProbeResponsePtrOutput) PeriodSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ContainerProbeResponse) *int {
		if v == nil {
			return nil
		}
		return v.PeriodSeconds
	}).(pulumi.IntPtrOutput)
}

// The success threshold.
func (o ContainerProbeResponsePtrOutput) SuccessThreshold() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ContainerProbeResponse) *int {
		if v == nil {
			return nil
		}
		return v.SuccessThreshold
	}).(pulumi.IntPtrOutput)
}

// The timeout seconds.
func (o ContainerProbeResponsePtrOutput) TimeoutSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ContainerProbeResponse) *int {
		if v == nil {
			return nil
		}
		return v.TimeoutSeconds
	}).(pulumi.IntPtrOutput)
}

// The instance view of the container instance. Only valid in response.
type ContainerPropertiesInvokeResponseInstanceView struct {
	// Current container instance state.
	CurrentState ContainerStateInvokeResponse `pulumi:"currentState"`
	// The events of the container instance.
	Events []EventInvokeResponse `pulumi:"events"`
	// Previous container instance state.
	PreviousState ContainerStateInvokeResponse `pulumi:"previousState"`
	// The number of times that the container instance has been restarted.
	RestartCount int `pulumi:"restartCount"`
}

// ContainerPropertiesInvokeResponseInstanceViewInput is an input type that accepts ContainerPropertiesInvokeResponseInstanceViewArgs and ContainerPropertiesInvokeResponseInstanceViewOutput values.
// You can construct a concrete instance of `ContainerPropertiesInvokeResponseInstanceViewInput` via:
//
//          ContainerPropertiesInvokeResponseInstanceViewArgs{...}
type ContainerPropertiesInvokeResponseInstanceViewInput interface {
	pulumi.Input

	ToContainerPropertiesInvokeResponseInstanceViewOutput() ContainerPropertiesInvokeResponseInstanceViewOutput
	ToContainerPropertiesInvokeResponseInstanceViewOutputWithContext(context.Context) ContainerPropertiesInvokeResponseInstanceViewOutput
}

// The instance view of the container instance. Only valid in response.
type ContainerPropertiesInvokeResponseInstanceViewArgs struct {
	// Current container instance state.
	CurrentState ContainerStateInvokeResponseInput `pulumi:"currentState"`
	// The events of the container instance.
	Events EventInvokeResponseArrayInput `pulumi:"events"`
	// Previous container instance state.
	PreviousState ContainerStateInvokeResponseInput `pulumi:"previousState"`
	// The number of times that the container instance has been restarted.
	RestartCount pulumi.IntInput `pulumi:"restartCount"`
}

func (ContainerPropertiesInvokeResponseInstanceViewArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ContainerPropertiesInvokeResponseInstanceView)(nil)).Elem()
}

func (i ContainerPropertiesInvokeResponseInstanceViewArgs) ToContainerPropertiesInvokeResponseInstanceViewOutput() ContainerPropertiesInvokeResponseInstanceViewOutput {
	return i.ToContainerPropertiesInvokeResponseInstanceViewOutputWithContext(context.Background())
}

func (i ContainerPropertiesInvokeResponseInstanceViewArgs) ToContainerPropertiesInvokeResponseInstanceViewOutputWithContext(ctx context.Context) ContainerPropertiesInvokeResponseInstanceViewOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerPropertiesInvokeResponseInstanceViewOutput)
}

// The instance view of the container instance. Only valid in response.
type ContainerPropertiesInvokeResponseInstanceViewOutput struct{ *pulumi.OutputState }

func (ContainerPropertiesInvokeResponseInstanceViewOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ContainerPropertiesInvokeResponseInstanceView)(nil)).Elem()
}

func (o ContainerPropertiesInvokeResponseInstanceViewOutput) ToContainerPropertiesInvokeResponseInstanceViewOutput() ContainerPropertiesInvokeResponseInstanceViewOutput {
	return o
}

func (o ContainerPropertiesInvokeResponseInstanceViewOutput) ToContainerPropertiesInvokeResponseInstanceViewOutputWithContext(ctx context.Context) ContainerPropertiesInvokeResponseInstanceViewOutput {
	return o
}

// Current container instance state.
func (o ContainerPropertiesInvokeResponseInstanceViewOutput) CurrentState() ContainerStateInvokeResponseOutput {
	return o.ApplyT(func(v ContainerPropertiesInvokeResponseInstanceView) ContainerStateInvokeResponse {
		return v.CurrentState
	}).(ContainerStateInvokeResponseOutput)
}

// The events of the container instance.
func (o ContainerPropertiesInvokeResponseInstanceViewOutput) Events() EventInvokeResponseArrayOutput {
	return o.ApplyT(func(v ContainerPropertiesInvokeResponseInstanceView) []EventInvokeResponse { return v.Events }).(EventInvokeResponseArrayOutput)
}

// Previous container instance state.
func (o ContainerPropertiesInvokeResponseInstanceViewOutput) PreviousState() ContainerStateInvokeResponseOutput {
	return o.ApplyT(func(v ContainerPropertiesInvokeResponseInstanceView) ContainerStateInvokeResponse {
		return v.PreviousState
	}).(ContainerStateInvokeResponseOutput)
}

// The number of times that the container instance has been restarted.
func (o ContainerPropertiesInvokeResponseInstanceViewOutput) RestartCount() pulumi.IntOutput {
	return o.ApplyT(func(v ContainerPropertiesInvokeResponseInstanceView) int { return v.RestartCount }).(pulumi.IntOutput)
}

// The instance view of the container instance. Only valid in response.
type ContainerPropertiesResponseInstanceView struct {
	// Current container instance state.
	CurrentState ContainerStateResponse `pulumi:"currentState"`
	// The events of the container instance.
	Events []EventResponse `pulumi:"events"`
	// Previous container instance state.
	PreviousState ContainerStateResponse `pulumi:"previousState"`
	// The number of times that the container instance has been restarted.
	RestartCount int `pulumi:"restartCount"`
}

// ContainerPropertiesResponseInstanceViewInput is an input type that accepts ContainerPropertiesResponseInstanceViewArgs and ContainerPropertiesResponseInstanceViewOutput values.
// You can construct a concrete instance of `ContainerPropertiesResponseInstanceViewInput` via:
//
//          ContainerPropertiesResponseInstanceViewArgs{...}
type ContainerPropertiesResponseInstanceViewInput interface {
	pulumi.Input

	ToContainerPropertiesResponseInstanceViewOutput() ContainerPropertiesResponseInstanceViewOutput
	ToContainerPropertiesResponseInstanceViewOutputWithContext(context.Context) ContainerPropertiesResponseInstanceViewOutput
}

// The instance view of the container instance. Only valid in response.
type ContainerPropertiesResponseInstanceViewArgs struct {
	// Current container instance state.
	CurrentState ContainerStateResponseInput `pulumi:"currentState"`
	// The events of the container instance.
	Events EventResponseArrayInput `pulumi:"events"`
	// Previous container instance state.
	PreviousState ContainerStateResponseInput `pulumi:"previousState"`
	// The number of times that the container instance has been restarted.
	RestartCount pulumi.IntInput `pulumi:"restartCount"`
}

func (ContainerPropertiesResponseInstanceViewArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ContainerPropertiesResponseInstanceView)(nil)).Elem()
}

func (i ContainerPropertiesResponseInstanceViewArgs) ToContainerPropertiesResponseInstanceViewOutput() ContainerPropertiesResponseInstanceViewOutput {
	return i.ToContainerPropertiesResponseInstanceViewOutputWithContext(context.Background())
}

func (i ContainerPropertiesResponseInstanceViewArgs) ToContainerPropertiesResponseInstanceViewOutputWithContext(ctx context.Context) ContainerPropertiesResponseInstanceViewOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerPropertiesResponseInstanceViewOutput)
}

// The instance view of the container instance. Only valid in response.
type ContainerPropertiesResponseInstanceViewOutput struct{ *pulumi.OutputState }

func (ContainerPropertiesResponseInstanceViewOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ContainerPropertiesResponseInstanceView)(nil)).Elem()
}

func (o ContainerPropertiesResponseInstanceViewOutput) ToContainerPropertiesResponseInstanceViewOutput() ContainerPropertiesResponseInstanceViewOutput {
	return o
}

func (o ContainerPropertiesResponseInstanceViewOutput) ToContainerPropertiesResponseInstanceViewOutputWithContext(ctx context.Context) ContainerPropertiesResponseInstanceViewOutput {
	return o
}

// Current container instance state.
func (o ContainerPropertiesResponseInstanceViewOutput) CurrentState() ContainerStateResponseOutput {
	return o.ApplyT(func(v ContainerPropertiesResponseInstanceView) ContainerStateResponse { return v.CurrentState }).(ContainerStateResponseOutput)
}

// The events of the container instance.
func (o ContainerPropertiesResponseInstanceViewOutput) Events() EventResponseArrayOutput {
	return o.ApplyT(func(v ContainerPropertiesResponseInstanceView) []EventResponse { return v.Events }).(EventResponseArrayOutput)
}

// Previous container instance state.
func (o ContainerPropertiesResponseInstanceViewOutput) PreviousState() ContainerStateResponseOutput {
	return o.ApplyT(func(v ContainerPropertiesResponseInstanceView) ContainerStateResponse { return v.PreviousState }).(ContainerStateResponseOutput)
}

// The number of times that the container instance has been restarted.
func (o ContainerPropertiesResponseInstanceViewOutput) RestartCount() pulumi.IntOutput {
	return o.ApplyT(func(v ContainerPropertiesResponseInstanceView) int { return v.RestartCount }).(pulumi.IntOutput)
}

// A container instance.
type ContainerResponse struct {
	// The commands to execute within the container instance in exec form.
	Command []string `pulumi:"command"`
	// The environment variables to set in the container instance.
	EnvironmentVariables []EnvironmentVariableResponse `pulumi:"environmentVariables"`
	// The name of the image used to create the container instance.
	Image string `pulumi:"image"`
	// The instance view of the container instance. Only valid in response.
	InstanceView ContainerPropertiesResponseInstanceView `pulumi:"instanceView"`
	// The liveness probe.
	LivenessProbe *ContainerProbeResponse `pulumi:"livenessProbe"`
	// The user-provided name of the container instance.
	Name string `pulumi:"name"`
	// The exposed ports on the container instance.
	Ports []ContainerPortResponse `pulumi:"ports"`
	// The readiness probe.
	ReadinessProbe *ContainerProbeResponse `pulumi:"readinessProbe"`
	// The resource requirements of the container instance.
	Resources ResourceRequirementsResponse `pulumi:"resources"`
	// The volume mounts available to the container instance.
	VolumeMounts []VolumeMountResponse `pulumi:"volumeMounts"`
}

// ContainerResponseInput is an input type that accepts ContainerResponseArgs and ContainerResponseOutput values.
// You can construct a concrete instance of `ContainerResponseInput` via:
//
//          ContainerResponseArgs{...}
type ContainerResponseInput interface {
	pulumi.Input

	ToContainerResponseOutput() ContainerResponseOutput
	ToContainerResponseOutputWithContext(context.Context) ContainerResponseOutput
}

// A container instance.
type ContainerResponseArgs struct {
	// The commands to execute within the container instance in exec form.
	Command pulumi.StringArrayInput `pulumi:"command"`
	// The environment variables to set in the container instance.
	EnvironmentVariables EnvironmentVariableResponseArrayInput `pulumi:"environmentVariables"`
	// The name of the image used to create the container instance.
	Image pulumi.StringInput `pulumi:"image"`
	// The instance view of the container instance. Only valid in response.
	InstanceView ContainerPropertiesResponseInstanceViewInput `pulumi:"instanceView"`
	// The liveness probe.
	LivenessProbe ContainerProbeResponsePtrInput `pulumi:"livenessProbe"`
	// The user-provided name of the container instance.
	Name pulumi.StringInput `pulumi:"name"`
	// The exposed ports on the container instance.
	Ports ContainerPortResponseArrayInput `pulumi:"ports"`
	// The readiness probe.
	ReadinessProbe ContainerProbeResponsePtrInput `pulumi:"readinessProbe"`
	// The resource requirements of the container instance.
	Resources ResourceRequirementsResponseInput `pulumi:"resources"`
	// The volume mounts available to the container instance.
	VolumeMounts VolumeMountResponseArrayInput `pulumi:"volumeMounts"`
}

func (ContainerResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ContainerResponse)(nil)).Elem()
}

func (i ContainerResponseArgs) ToContainerResponseOutput() ContainerResponseOutput {
	return i.ToContainerResponseOutputWithContext(context.Background())
}

func (i ContainerResponseArgs) ToContainerResponseOutputWithContext(ctx context.Context) ContainerResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerResponseOutput)
}

// ContainerResponseArrayInput is an input type that accepts ContainerResponseArray and ContainerResponseArrayOutput values.
// You can construct a concrete instance of `ContainerResponseArrayInput` via:
//
//          ContainerResponseArray{ ContainerResponseArgs{...} }
type ContainerResponseArrayInput interface {
	pulumi.Input

	ToContainerResponseArrayOutput() ContainerResponseArrayOutput
	ToContainerResponseArrayOutputWithContext(context.Context) ContainerResponseArrayOutput
}

type ContainerResponseArray []ContainerResponseInput

func (ContainerResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ContainerResponse)(nil)).Elem()
}

func (i ContainerResponseArray) ToContainerResponseArrayOutput() ContainerResponseArrayOutput {
	return i.ToContainerResponseArrayOutputWithContext(context.Background())
}

func (i ContainerResponseArray) ToContainerResponseArrayOutputWithContext(ctx context.Context) ContainerResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerResponseArrayOutput)
}

// A container instance.
type ContainerResponseOutput struct{ *pulumi.OutputState }

func (ContainerResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ContainerResponse)(nil)).Elem()
}

func (o ContainerResponseOutput) ToContainerResponseOutput() ContainerResponseOutput {
	return o
}

func (o ContainerResponseOutput) ToContainerResponseOutputWithContext(ctx context.Context) ContainerResponseOutput {
	return o
}

// The commands to execute within the container instance in exec form.
func (o ContainerResponseOutput) Command() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ContainerResponse) []string { return v.Command }).(pulumi.StringArrayOutput)
}

// The environment variables to set in the container instance.
func (o ContainerResponseOutput) EnvironmentVariables() EnvironmentVariableResponseArrayOutput {
	return o.ApplyT(func(v ContainerResponse) []EnvironmentVariableResponse { return v.EnvironmentVariables }).(EnvironmentVariableResponseArrayOutput)
}

// The name of the image used to create the container instance.
func (o ContainerResponseOutput) Image() pulumi.StringOutput {
	return o.ApplyT(func(v ContainerResponse) string { return v.Image }).(pulumi.StringOutput)
}

// The instance view of the container instance. Only valid in response.
func (o ContainerResponseOutput) InstanceView() ContainerPropertiesResponseInstanceViewOutput {
	return o.ApplyT(func(v ContainerResponse) ContainerPropertiesResponseInstanceView { return v.InstanceView }).(ContainerPropertiesResponseInstanceViewOutput)
}

// The liveness probe.
func (o ContainerResponseOutput) LivenessProbe() ContainerProbeResponsePtrOutput {
	return o.ApplyT(func(v ContainerResponse) *ContainerProbeResponse { return v.LivenessProbe }).(ContainerProbeResponsePtrOutput)
}

// The user-provided name of the container instance.
func (o ContainerResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ContainerResponse) string { return v.Name }).(pulumi.StringOutput)
}

// The exposed ports on the container instance.
func (o ContainerResponseOutput) Ports() ContainerPortResponseArrayOutput {
	return o.ApplyT(func(v ContainerResponse) []ContainerPortResponse { return v.Ports }).(ContainerPortResponseArrayOutput)
}

// The readiness probe.
func (o ContainerResponseOutput) ReadinessProbe() ContainerProbeResponsePtrOutput {
	return o.ApplyT(func(v ContainerResponse) *ContainerProbeResponse { return v.ReadinessProbe }).(ContainerProbeResponsePtrOutput)
}

// The resource requirements of the container instance.
func (o ContainerResponseOutput) Resources() ResourceRequirementsResponseOutput {
	return o.ApplyT(func(v ContainerResponse) ResourceRequirementsResponse { return v.Resources }).(ResourceRequirementsResponseOutput)
}

// The volume mounts available to the container instance.
func (o ContainerResponseOutput) VolumeMounts() VolumeMountResponseArrayOutput {
	return o.ApplyT(func(v ContainerResponse) []VolumeMountResponse { return v.VolumeMounts }).(VolumeMountResponseArrayOutput)
}

type ContainerResponseArrayOutput struct{ *pulumi.OutputState }

func (ContainerResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ContainerResponse)(nil)).Elem()
}

func (o ContainerResponseArrayOutput) ToContainerResponseArrayOutput() ContainerResponseArrayOutput {
	return o
}

func (o ContainerResponseArrayOutput) ToContainerResponseArrayOutputWithContext(ctx context.Context) ContainerResponseArrayOutput {
	return o
}

func (o ContainerResponseArrayOutput) Index(i pulumi.IntInput) ContainerResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ContainerResponse {
		return vs[0].([]ContainerResponse)[vs[1].(int)]
	}).(ContainerResponseOutput)
}

// The container instance state.
type ContainerStateInvokeResponse struct {
	// The human-readable status of the container instance state.
	DetailStatus *string `pulumi:"detailStatus"`
	// The container instance exit codes correspond to those from the `docker run` command.
	ExitCode *int `pulumi:"exitCode"`
	// The date-time when the container instance state finished.
	FinishTime *string `pulumi:"finishTime"`
	// The date-time when the container instance state started.
	StartTime *string `pulumi:"startTime"`
	// The state of the container instance.
	State *string `pulumi:"state"`
}

// ContainerStateInvokeResponseInput is an input type that accepts ContainerStateInvokeResponseArgs and ContainerStateInvokeResponseOutput values.
// You can construct a concrete instance of `ContainerStateInvokeResponseInput` via:
//
//          ContainerStateInvokeResponseArgs{...}
type ContainerStateInvokeResponseInput interface {
	pulumi.Input

	ToContainerStateInvokeResponseOutput() ContainerStateInvokeResponseOutput
	ToContainerStateInvokeResponseOutputWithContext(context.Context) ContainerStateInvokeResponseOutput
}

// The container instance state.
type ContainerStateInvokeResponseArgs struct {
	// The human-readable status of the container instance state.
	DetailStatus pulumi.StringPtrInput `pulumi:"detailStatus"`
	// The container instance exit codes correspond to those from the `docker run` command.
	ExitCode pulumi.IntPtrInput `pulumi:"exitCode"`
	// The date-time when the container instance state finished.
	FinishTime pulumi.StringPtrInput `pulumi:"finishTime"`
	// The date-time when the container instance state started.
	StartTime pulumi.StringPtrInput `pulumi:"startTime"`
	// The state of the container instance.
	State pulumi.StringPtrInput `pulumi:"state"`
}

func (ContainerStateInvokeResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ContainerStateInvokeResponse)(nil)).Elem()
}

func (i ContainerStateInvokeResponseArgs) ToContainerStateInvokeResponseOutput() ContainerStateInvokeResponseOutput {
	return i.ToContainerStateInvokeResponseOutputWithContext(context.Background())
}

func (i ContainerStateInvokeResponseArgs) ToContainerStateInvokeResponseOutputWithContext(ctx context.Context) ContainerStateInvokeResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerStateInvokeResponseOutput)
}

// The container instance state.
type ContainerStateInvokeResponseOutput struct{ *pulumi.OutputState }

func (ContainerStateInvokeResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ContainerStateInvokeResponse)(nil)).Elem()
}

func (o ContainerStateInvokeResponseOutput) ToContainerStateInvokeResponseOutput() ContainerStateInvokeResponseOutput {
	return o
}

func (o ContainerStateInvokeResponseOutput) ToContainerStateInvokeResponseOutputWithContext(ctx context.Context) ContainerStateInvokeResponseOutput {
	return o
}

// The human-readable status of the container instance state.
func (o ContainerStateInvokeResponseOutput) DetailStatus() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContainerStateInvokeResponse) *string { return v.DetailStatus }).(pulumi.StringPtrOutput)
}

// The container instance exit codes correspond to those from the `docker run` command.
func (o ContainerStateInvokeResponseOutput) ExitCode() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ContainerStateInvokeResponse) *int { return v.ExitCode }).(pulumi.IntPtrOutput)
}

// The date-time when the container instance state finished.
func (o ContainerStateInvokeResponseOutput) FinishTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContainerStateInvokeResponse) *string { return v.FinishTime }).(pulumi.StringPtrOutput)
}

// The date-time when the container instance state started.
func (o ContainerStateInvokeResponseOutput) StartTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContainerStateInvokeResponse) *string { return v.StartTime }).(pulumi.StringPtrOutput)
}

// The state of the container instance.
func (o ContainerStateInvokeResponseOutput) State() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContainerStateInvokeResponse) *string { return v.State }).(pulumi.StringPtrOutput)
}

// The container instance state.
type ContainerStateResponse struct {
	// The human-readable status of the container instance state.
	DetailStatus *string `pulumi:"detailStatus"`
	// The container instance exit codes correspond to those from the `docker run` command.
	ExitCode *int `pulumi:"exitCode"`
	// The date-time when the container instance state finished.
	FinishTime *string `pulumi:"finishTime"`
	// The date-time when the container instance state started.
	StartTime *string `pulumi:"startTime"`
	// The state of the container instance.
	State *string `pulumi:"state"`
}

// ContainerStateResponseInput is an input type that accepts ContainerStateResponseArgs and ContainerStateResponseOutput values.
// You can construct a concrete instance of `ContainerStateResponseInput` via:
//
//          ContainerStateResponseArgs{...}
type ContainerStateResponseInput interface {
	pulumi.Input

	ToContainerStateResponseOutput() ContainerStateResponseOutput
	ToContainerStateResponseOutputWithContext(context.Context) ContainerStateResponseOutput
}

// The container instance state.
type ContainerStateResponseArgs struct {
	// The human-readable status of the container instance state.
	DetailStatus pulumi.StringPtrInput `pulumi:"detailStatus"`
	// The container instance exit codes correspond to those from the `docker run` command.
	ExitCode pulumi.IntPtrInput `pulumi:"exitCode"`
	// The date-time when the container instance state finished.
	FinishTime pulumi.StringPtrInput `pulumi:"finishTime"`
	// The date-time when the container instance state started.
	StartTime pulumi.StringPtrInput `pulumi:"startTime"`
	// The state of the container instance.
	State pulumi.StringPtrInput `pulumi:"state"`
}

func (ContainerStateResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ContainerStateResponse)(nil)).Elem()
}

func (i ContainerStateResponseArgs) ToContainerStateResponseOutput() ContainerStateResponseOutput {
	return i.ToContainerStateResponseOutputWithContext(context.Background())
}

func (i ContainerStateResponseArgs) ToContainerStateResponseOutputWithContext(ctx context.Context) ContainerStateResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerStateResponseOutput)
}

// The container instance state.
type ContainerStateResponseOutput struct{ *pulumi.OutputState }

func (ContainerStateResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ContainerStateResponse)(nil)).Elem()
}

func (o ContainerStateResponseOutput) ToContainerStateResponseOutput() ContainerStateResponseOutput {
	return o
}

func (o ContainerStateResponseOutput) ToContainerStateResponseOutputWithContext(ctx context.Context) ContainerStateResponseOutput {
	return o
}

// The human-readable status of the container instance state.
func (o ContainerStateResponseOutput) DetailStatus() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContainerStateResponse) *string { return v.DetailStatus }).(pulumi.StringPtrOutput)
}

// The container instance exit codes correspond to those from the `docker run` command.
func (o ContainerStateResponseOutput) ExitCode() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ContainerStateResponse) *int { return v.ExitCode }).(pulumi.IntPtrOutput)
}

// The date-time when the container instance state finished.
func (o ContainerStateResponseOutput) FinishTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContainerStateResponse) *string { return v.FinishTime }).(pulumi.StringPtrOutput)
}

// The date-time when the container instance state started.
func (o ContainerStateResponseOutput) StartTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContainerStateResponse) *string { return v.StartTime }).(pulumi.StringPtrOutput)
}

// The state of the container instance.
func (o ContainerStateResponseOutput) State() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContainerStateResponse) *string { return v.State }).(pulumi.StringPtrOutput)
}

// DNS configuration for the container group.
type DnsConfiguration struct {
	// The DNS servers for the container group.
	NameServers []string `pulumi:"nameServers"`
	// The DNS options for the container group.
	Options *string `pulumi:"options"`
	// The DNS search domains for hostname lookup in the container group.
	SearchDomains *string `pulumi:"searchDomains"`
}

// DnsConfigurationInput is an input type that accepts DnsConfigurationArgs and DnsConfigurationOutput values.
// You can construct a concrete instance of `DnsConfigurationInput` via:
//
//          DnsConfigurationArgs{...}
type DnsConfigurationInput interface {
	pulumi.Input

	ToDnsConfigurationOutput() DnsConfigurationOutput
	ToDnsConfigurationOutputWithContext(context.Context) DnsConfigurationOutput
}

// DNS configuration for the container group.
type DnsConfigurationArgs struct {
	// The DNS servers for the container group.
	NameServers pulumi.StringArrayInput `pulumi:"nameServers"`
	// The DNS options for the container group.
	Options pulumi.StringPtrInput `pulumi:"options"`
	// The DNS search domains for hostname lookup in the container group.
	SearchDomains pulumi.StringPtrInput `pulumi:"searchDomains"`
}

func (DnsConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DnsConfiguration)(nil)).Elem()
}

func (i DnsConfigurationArgs) ToDnsConfigurationOutput() DnsConfigurationOutput {
	return i.ToDnsConfigurationOutputWithContext(context.Background())
}

func (i DnsConfigurationArgs) ToDnsConfigurationOutputWithContext(ctx context.Context) DnsConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DnsConfigurationOutput)
}

func (i DnsConfigurationArgs) ToDnsConfigurationPtrOutput() DnsConfigurationPtrOutput {
	return i.ToDnsConfigurationPtrOutputWithContext(context.Background())
}

func (i DnsConfigurationArgs) ToDnsConfigurationPtrOutputWithContext(ctx context.Context) DnsConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DnsConfigurationOutput).ToDnsConfigurationPtrOutputWithContext(ctx)
}

// DnsConfigurationPtrInput is an input type that accepts DnsConfigurationArgs, DnsConfigurationPtr and DnsConfigurationPtrOutput values.
// You can construct a concrete instance of `DnsConfigurationPtrInput` via:
//
//          DnsConfigurationArgs{...}
//
//  or:
//
//          nil
type DnsConfigurationPtrInput interface {
	pulumi.Input

	ToDnsConfigurationPtrOutput() DnsConfigurationPtrOutput
	ToDnsConfigurationPtrOutputWithContext(context.Context) DnsConfigurationPtrOutput
}

type dnsConfigurationPtrType DnsConfigurationArgs

func DnsConfigurationPtr(v *DnsConfigurationArgs) DnsConfigurationPtrInput {
	return (*dnsConfigurationPtrType)(v)
}

func (*dnsConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DnsConfiguration)(nil)).Elem()
}

func (i *dnsConfigurationPtrType) ToDnsConfigurationPtrOutput() DnsConfigurationPtrOutput {
	return i.ToDnsConfigurationPtrOutputWithContext(context.Background())
}

func (i *dnsConfigurationPtrType) ToDnsConfigurationPtrOutputWithContext(ctx context.Context) DnsConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DnsConfigurationPtrOutput)
}

// DNS configuration for the container group.
type DnsConfigurationOutput struct{ *pulumi.OutputState }

func (DnsConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DnsConfiguration)(nil)).Elem()
}

func (o DnsConfigurationOutput) ToDnsConfigurationOutput() DnsConfigurationOutput {
	return o
}

func (o DnsConfigurationOutput) ToDnsConfigurationOutputWithContext(ctx context.Context) DnsConfigurationOutput {
	return o
}

func (o DnsConfigurationOutput) ToDnsConfigurationPtrOutput() DnsConfigurationPtrOutput {
	return o.ToDnsConfigurationPtrOutputWithContext(context.Background())
}

func (o DnsConfigurationOutput) ToDnsConfigurationPtrOutputWithContext(ctx context.Context) DnsConfigurationPtrOutput {
	return o.ApplyT(func(v DnsConfiguration) *DnsConfiguration {
		return &v
	}).(DnsConfigurationPtrOutput)
}

// The DNS servers for the container group.
func (o DnsConfigurationOutput) NameServers() pulumi.StringArrayOutput {
	return o.ApplyT(func(v DnsConfiguration) []string { return v.NameServers }).(pulumi.StringArrayOutput)
}

// The DNS options for the container group.
func (o DnsConfigurationOutput) Options() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DnsConfiguration) *string { return v.Options }).(pulumi.StringPtrOutput)
}

// The DNS search domains for hostname lookup in the container group.
func (o DnsConfigurationOutput) SearchDomains() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DnsConfiguration) *string { return v.SearchDomains }).(pulumi.StringPtrOutput)
}

type DnsConfigurationPtrOutput struct{ *pulumi.OutputState }

func (DnsConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DnsConfiguration)(nil)).Elem()
}

func (o DnsConfigurationPtrOutput) ToDnsConfigurationPtrOutput() DnsConfigurationPtrOutput {
	return o
}

func (o DnsConfigurationPtrOutput) ToDnsConfigurationPtrOutputWithContext(ctx context.Context) DnsConfigurationPtrOutput {
	return o
}

func (o DnsConfigurationPtrOutput) Elem() DnsConfigurationOutput {
	return o.ApplyT(func(v *DnsConfiguration) DnsConfiguration { return *v }).(DnsConfigurationOutput)
}

// The DNS servers for the container group.
func (o DnsConfigurationPtrOutput) NameServers() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *DnsConfiguration) []string {
		if v == nil {
			return nil
		}
		return v.NameServers
	}).(pulumi.StringArrayOutput)
}

// The DNS options for the container group.
func (o DnsConfigurationPtrOutput) Options() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DnsConfiguration) *string {
		if v == nil {
			return nil
		}
		return v.Options
	}).(pulumi.StringPtrOutput)
}

// The DNS search domains for hostname lookup in the container group.
func (o DnsConfigurationPtrOutput) SearchDomains() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DnsConfiguration) *string {
		if v == nil {
			return nil
		}
		return v.SearchDomains
	}).(pulumi.StringPtrOutput)
}

// DNS configuration for the container group.
type DnsConfigurationInvokeResponse struct {
	// The DNS servers for the container group.
	NameServers []string `pulumi:"nameServers"`
	// The DNS options for the container group.
	Options *string `pulumi:"options"`
	// The DNS search domains for hostname lookup in the container group.
	SearchDomains *string `pulumi:"searchDomains"`
}

// DnsConfigurationInvokeResponseInput is an input type that accepts DnsConfigurationInvokeResponseArgs and DnsConfigurationInvokeResponseOutput values.
// You can construct a concrete instance of `DnsConfigurationInvokeResponseInput` via:
//
//          DnsConfigurationInvokeResponseArgs{...}
type DnsConfigurationInvokeResponseInput interface {
	pulumi.Input

	ToDnsConfigurationInvokeResponseOutput() DnsConfigurationInvokeResponseOutput
	ToDnsConfigurationInvokeResponseOutputWithContext(context.Context) DnsConfigurationInvokeResponseOutput
}

// DNS configuration for the container group.
type DnsConfigurationInvokeResponseArgs struct {
	// The DNS servers for the container group.
	NameServers pulumi.StringArrayInput `pulumi:"nameServers"`
	// The DNS options for the container group.
	Options pulumi.StringPtrInput `pulumi:"options"`
	// The DNS search domains for hostname lookup in the container group.
	SearchDomains pulumi.StringPtrInput `pulumi:"searchDomains"`
}

func (DnsConfigurationInvokeResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DnsConfigurationInvokeResponse)(nil)).Elem()
}

func (i DnsConfigurationInvokeResponseArgs) ToDnsConfigurationInvokeResponseOutput() DnsConfigurationInvokeResponseOutput {
	return i.ToDnsConfigurationInvokeResponseOutputWithContext(context.Background())
}

func (i DnsConfigurationInvokeResponseArgs) ToDnsConfigurationInvokeResponseOutputWithContext(ctx context.Context) DnsConfigurationInvokeResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DnsConfigurationInvokeResponseOutput)
}

// DNS configuration for the container group.
type DnsConfigurationInvokeResponseOutput struct{ *pulumi.OutputState }

func (DnsConfigurationInvokeResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DnsConfigurationInvokeResponse)(nil)).Elem()
}

func (o DnsConfigurationInvokeResponseOutput) ToDnsConfigurationInvokeResponseOutput() DnsConfigurationInvokeResponseOutput {
	return o
}

func (o DnsConfigurationInvokeResponseOutput) ToDnsConfigurationInvokeResponseOutputWithContext(ctx context.Context) DnsConfigurationInvokeResponseOutput {
	return o
}

// The DNS servers for the container group.
func (o DnsConfigurationInvokeResponseOutput) NameServers() pulumi.StringArrayOutput {
	return o.ApplyT(func(v DnsConfigurationInvokeResponse) []string { return v.NameServers }).(pulumi.StringArrayOutput)
}

// The DNS options for the container group.
func (o DnsConfigurationInvokeResponseOutput) Options() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DnsConfigurationInvokeResponse) *string { return v.Options }).(pulumi.StringPtrOutput)
}

// The DNS search domains for hostname lookup in the container group.
func (o DnsConfigurationInvokeResponseOutput) SearchDomains() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DnsConfigurationInvokeResponse) *string { return v.SearchDomains }).(pulumi.StringPtrOutput)
}

// DNS configuration for the container group.
type DnsConfigurationResponse struct {
	// The DNS servers for the container group.
	NameServers []string `pulumi:"nameServers"`
	// The DNS options for the container group.
	Options *string `pulumi:"options"`
	// The DNS search domains for hostname lookup in the container group.
	SearchDomains *string `pulumi:"searchDomains"`
}

// DnsConfigurationResponseInput is an input type that accepts DnsConfigurationResponseArgs and DnsConfigurationResponseOutput values.
// You can construct a concrete instance of `DnsConfigurationResponseInput` via:
//
//          DnsConfigurationResponseArgs{...}
type DnsConfigurationResponseInput interface {
	pulumi.Input

	ToDnsConfigurationResponseOutput() DnsConfigurationResponseOutput
	ToDnsConfigurationResponseOutputWithContext(context.Context) DnsConfigurationResponseOutput
}

// DNS configuration for the container group.
type DnsConfigurationResponseArgs struct {
	// The DNS servers for the container group.
	NameServers pulumi.StringArrayInput `pulumi:"nameServers"`
	// The DNS options for the container group.
	Options pulumi.StringPtrInput `pulumi:"options"`
	// The DNS search domains for hostname lookup in the container group.
	SearchDomains pulumi.StringPtrInput `pulumi:"searchDomains"`
}

func (DnsConfigurationResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DnsConfigurationResponse)(nil)).Elem()
}

func (i DnsConfigurationResponseArgs) ToDnsConfigurationResponseOutput() DnsConfigurationResponseOutput {
	return i.ToDnsConfigurationResponseOutputWithContext(context.Background())
}

func (i DnsConfigurationResponseArgs) ToDnsConfigurationResponseOutputWithContext(ctx context.Context) DnsConfigurationResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DnsConfigurationResponseOutput)
}

func (i DnsConfigurationResponseArgs) ToDnsConfigurationResponsePtrOutput() DnsConfigurationResponsePtrOutput {
	return i.ToDnsConfigurationResponsePtrOutputWithContext(context.Background())
}

func (i DnsConfigurationResponseArgs) ToDnsConfigurationResponsePtrOutputWithContext(ctx context.Context) DnsConfigurationResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DnsConfigurationResponseOutput).ToDnsConfigurationResponsePtrOutputWithContext(ctx)
}

// DnsConfigurationResponsePtrInput is an input type that accepts DnsConfigurationResponseArgs, DnsConfigurationResponsePtr and DnsConfigurationResponsePtrOutput values.
// You can construct a concrete instance of `DnsConfigurationResponsePtrInput` via:
//
//          DnsConfigurationResponseArgs{...}
//
//  or:
//
//          nil
type DnsConfigurationResponsePtrInput interface {
	pulumi.Input

	ToDnsConfigurationResponsePtrOutput() DnsConfigurationResponsePtrOutput
	ToDnsConfigurationResponsePtrOutputWithContext(context.Context) DnsConfigurationResponsePtrOutput
}

type dnsConfigurationResponsePtrType DnsConfigurationResponseArgs

func DnsConfigurationResponsePtr(v *DnsConfigurationResponseArgs) DnsConfigurationResponsePtrInput {
	return (*dnsConfigurationResponsePtrType)(v)
}

func (*dnsConfigurationResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DnsConfigurationResponse)(nil)).Elem()
}

func (i *dnsConfigurationResponsePtrType) ToDnsConfigurationResponsePtrOutput() DnsConfigurationResponsePtrOutput {
	return i.ToDnsConfigurationResponsePtrOutputWithContext(context.Background())
}

func (i *dnsConfigurationResponsePtrType) ToDnsConfigurationResponsePtrOutputWithContext(ctx context.Context) DnsConfigurationResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DnsConfigurationResponsePtrOutput)
}

// DNS configuration for the container group.
type DnsConfigurationResponseOutput struct{ *pulumi.OutputState }

func (DnsConfigurationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DnsConfigurationResponse)(nil)).Elem()
}

func (o DnsConfigurationResponseOutput) ToDnsConfigurationResponseOutput() DnsConfigurationResponseOutput {
	return o
}

func (o DnsConfigurationResponseOutput) ToDnsConfigurationResponseOutputWithContext(ctx context.Context) DnsConfigurationResponseOutput {
	return o
}

func (o DnsConfigurationResponseOutput) ToDnsConfigurationResponsePtrOutput() DnsConfigurationResponsePtrOutput {
	return o.ToDnsConfigurationResponsePtrOutputWithContext(context.Background())
}

func (o DnsConfigurationResponseOutput) ToDnsConfigurationResponsePtrOutputWithContext(ctx context.Context) DnsConfigurationResponsePtrOutput {
	return o.ApplyT(func(v DnsConfigurationResponse) *DnsConfigurationResponse {
		return &v
	}).(DnsConfigurationResponsePtrOutput)
}

// The DNS servers for the container group.
func (o DnsConfigurationResponseOutput) NameServers() pulumi.StringArrayOutput {
	return o.ApplyT(func(v DnsConfigurationResponse) []string { return v.NameServers }).(pulumi.StringArrayOutput)
}

// The DNS options for the container group.
func (o DnsConfigurationResponseOutput) Options() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DnsConfigurationResponse) *string { return v.Options }).(pulumi.StringPtrOutput)
}

// The DNS search domains for hostname lookup in the container group.
func (o DnsConfigurationResponseOutput) SearchDomains() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DnsConfigurationResponse) *string { return v.SearchDomains }).(pulumi.StringPtrOutput)
}

type DnsConfigurationResponsePtrOutput struct{ *pulumi.OutputState }

func (DnsConfigurationResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DnsConfigurationResponse)(nil)).Elem()
}

func (o DnsConfigurationResponsePtrOutput) ToDnsConfigurationResponsePtrOutput() DnsConfigurationResponsePtrOutput {
	return o
}

func (o DnsConfigurationResponsePtrOutput) ToDnsConfigurationResponsePtrOutputWithContext(ctx context.Context) DnsConfigurationResponsePtrOutput {
	return o
}

func (o DnsConfigurationResponsePtrOutput) Elem() DnsConfigurationResponseOutput {
	return o.ApplyT(func(v *DnsConfigurationResponse) DnsConfigurationResponse { return *v }).(DnsConfigurationResponseOutput)
}

// The DNS servers for the container group.
func (o DnsConfigurationResponsePtrOutput) NameServers() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *DnsConfigurationResponse) []string {
		if v == nil {
			return nil
		}
		return v.NameServers
	}).(pulumi.StringArrayOutput)
}

// The DNS options for the container group.
func (o DnsConfigurationResponsePtrOutput) Options() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DnsConfigurationResponse) *string {
		if v == nil {
			return nil
		}
		return v.Options
	}).(pulumi.StringPtrOutput)
}

// The DNS search domains for hostname lookup in the container group.
func (o DnsConfigurationResponsePtrOutput) SearchDomains() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DnsConfigurationResponse) *string {
		if v == nil {
			return nil
		}
		return v.SearchDomains
	}).(pulumi.StringPtrOutput)
}

// The environment variable to set within the container instance.
type EnvironmentVariable struct {
	// The name of the environment variable.
	Name string `pulumi:"name"`
	// The value of the secure environment variable.
	SecureValue *string `pulumi:"secureValue"`
	// The value of the environment variable.
	Value *string `pulumi:"value"`
}

// EnvironmentVariableInput is an input type that accepts EnvironmentVariableArgs and EnvironmentVariableOutput values.
// You can construct a concrete instance of `EnvironmentVariableInput` via:
//
//          EnvironmentVariableArgs{...}
type EnvironmentVariableInput interface {
	pulumi.Input

	ToEnvironmentVariableOutput() EnvironmentVariableOutput
	ToEnvironmentVariableOutputWithContext(context.Context) EnvironmentVariableOutput
}

// The environment variable to set within the container instance.
type EnvironmentVariableArgs struct {
	// The name of the environment variable.
	Name pulumi.StringInput `pulumi:"name"`
	// The value of the secure environment variable.
	SecureValue pulumi.StringPtrInput `pulumi:"secureValue"`
	// The value of the environment variable.
	Value pulumi.StringPtrInput `pulumi:"value"`
}

func (EnvironmentVariableArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EnvironmentVariable)(nil)).Elem()
}

func (i EnvironmentVariableArgs) ToEnvironmentVariableOutput() EnvironmentVariableOutput {
	return i.ToEnvironmentVariableOutputWithContext(context.Background())
}

func (i EnvironmentVariableArgs) ToEnvironmentVariableOutputWithContext(ctx context.Context) EnvironmentVariableOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EnvironmentVariableOutput)
}

// EnvironmentVariableArrayInput is an input type that accepts EnvironmentVariableArray and EnvironmentVariableArrayOutput values.
// You can construct a concrete instance of `EnvironmentVariableArrayInput` via:
//
//          EnvironmentVariableArray{ EnvironmentVariableArgs{...} }
type EnvironmentVariableArrayInput interface {
	pulumi.Input

	ToEnvironmentVariableArrayOutput() EnvironmentVariableArrayOutput
	ToEnvironmentVariableArrayOutputWithContext(context.Context) EnvironmentVariableArrayOutput
}

type EnvironmentVariableArray []EnvironmentVariableInput

func (EnvironmentVariableArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EnvironmentVariable)(nil)).Elem()
}

func (i EnvironmentVariableArray) ToEnvironmentVariableArrayOutput() EnvironmentVariableArrayOutput {
	return i.ToEnvironmentVariableArrayOutputWithContext(context.Background())
}

func (i EnvironmentVariableArray) ToEnvironmentVariableArrayOutputWithContext(ctx context.Context) EnvironmentVariableArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EnvironmentVariableArrayOutput)
}

// The environment variable to set within the container instance.
type EnvironmentVariableOutput struct{ *pulumi.OutputState }

func (EnvironmentVariableOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EnvironmentVariable)(nil)).Elem()
}

func (o EnvironmentVariableOutput) ToEnvironmentVariableOutput() EnvironmentVariableOutput {
	return o
}

func (o EnvironmentVariableOutput) ToEnvironmentVariableOutputWithContext(ctx context.Context) EnvironmentVariableOutput {
	return o
}

// The name of the environment variable.
func (o EnvironmentVariableOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v EnvironmentVariable) string { return v.Name }).(pulumi.StringOutput)
}

// The value of the secure environment variable.
func (o EnvironmentVariableOutput) SecureValue() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EnvironmentVariable) *string { return v.SecureValue }).(pulumi.StringPtrOutput)
}

// The value of the environment variable.
func (o EnvironmentVariableOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EnvironmentVariable) *string { return v.Value }).(pulumi.StringPtrOutput)
}

type EnvironmentVariableArrayOutput struct{ *pulumi.OutputState }

func (EnvironmentVariableArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EnvironmentVariable)(nil)).Elem()
}

func (o EnvironmentVariableArrayOutput) ToEnvironmentVariableArrayOutput() EnvironmentVariableArrayOutput {
	return o
}

func (o EnvironmentVariableArrayOutput) ToEnvironmentVariableArrayOutputWithContext(ctx context.Context) EnvironmentVariableArrayOutput {
	return o
}

func (o EnvironmentVariableArrayOutput) Index(i pulumi.IntInput) EnvironmentVariableOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) EnvironmentVariable {
		return vs[0].([]EnvironmentVariable)[vs[1].(int)]
	}).(EnvironmentVariableOutput)
}

// The environment variable to set within the container instance.
type EnvironmentVariableInvokeResponse struct {
	// The name of the environment variable.
	Name string `pulumi:"name"`
	// The value of the secure environment variable.
	SecureValue *string `pulumi:"secureValue"`
	// The value of the environment variable.
	Value *string `pulumi:"value"`
}

// EnvironmentVariableInvokeResponseInput is an input type that accepts EnvironmentVariableInvokeResponseArgs and EnvironmentVariableInvokeResponseOutput values.
// You can construct a concrete instance of `EnvironmentVariableInvokeResponseInput` via:
//
//          EnvironmentVariableInvokeResponseArgs{...}
type EnvironmentVariableInvokeResponseInput interface {
	pulumi.Input

	ToEnvironmentVariableInvokeResponseOutput() EnvironmentVariableInvokeResponseOutput
	ToEnvironmentVariableInvokeResponseOutputWithContext(context.Context) EnvironmentVariableInvokeResponseOutput
}

// The environment variable to set within the container instance.
type EnvironmentVariableInvokeResponseArgs struct {
	// The name of the environment variable.
	Name pulumi.StringInput `pulumi:"name"`
	// The value of the secure environment variable.
	SecureValue pulumi.StringPtrInput `pulumi:"secureValue"`
	// The value of the environment variable.
	Value pulumi.StringPtrInput `pulumi:"value"`
}

func (EnvironmentVariableInvokeResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EnvironmentVariableInvokeResponse)(nil)).Elem()
}

func (i EnvironmentVariableInvokeResponseArgs) ToEnvironmentVariableInvokeResponseOutput() EnvironmentVariableInvokeResponseOutput {
	return i.ToEnvironmentVariableInvokeResponseOutputWithContext(context.Background())
}

func (i EnvironmentVariableInvokeResponseArgs) ToEnvironmentVariableInvokeResponseOutputWithContext(ctx context.Context) EnvironmentVariableInvokeResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EnvironmentVariableInvokeResponseOutput)
}

// EnvironmentVariableInvokeResponseArrayInput is an input type that accepts EnvironmentVariableInvokeResponseArray and EnvironmentVariableInvokeResponseArrayOutput values.
// You can construct a concrete instance of `EnvironmentVariableInvokeResponseArrayInput` via:
//
//          EnvironmentVariableInvokeResponseArray{ EnvironmentVariableInvokeResponseArgs{...} }
type EnvironmentVariableInvokeResponseArrayInput interface {
	pulumi.Input

	ToEnvironmentVariableInvokeResponseArrayOutput() EnvironmentVariableInvokeResponseArrayOutput
	ToEnvironmentVariableInvokeResponseArrayOutputWithContext(context.Context) EnvironmentVariableInvokeResponseArrayOutput
}

type EnvironmentVariableInvokeResponseArray []EnvironmentVariableInvokeResponseInput

func (EnvironmentVariableInvokeResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EnvironmentVariableInvokeResponse)(nil)).Elem()
}

func (i EnvironmentVariableInvokeResponseArray) ToEnvironmentVariableInvokeResponseArrayOutput() EnvironmentVariableInvokeResponseArrayOutput {
	return i.ToEnvironmentVariableInvokeResponseArrayOutputWithContext(context.Background())
}

func (i EnvironmentVariableInvokeResponseArray) ToEnvironmentVariableInvokeResponseArrayOutputWithContext(ctx context.Context) EnvironmentVariableInvokeResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EnvironmentVariableInvokeResponseArrayOutput)
}

// The environment variable to set within the container instance.
type EnvironmentVariableInvokeResponseOutput struct{ *pulumi.OutputState }

func (EnvironmentVariableInvokeResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EnvironmentVariableInvokeResponse)(nil)).Elem()
}

func (o EnvironmentVariableInvokeResponseOutput) ToEnvironmentVariableInvokeResponseOutput() EnvironmentVariableInvokeResponseOutput {
	return o
}

func (o EnvironmentVariableInvokeResponseOutput) ToEnvironmentVariableInvokeResponseOutputWithContext(ctx context.Context) EnvironmentVariableInvokeResponseOutput {
	return o
}

// The name of the environment variable.
func (o EnvironmentVariableInvokeResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v EnvironmentVariableInvokeResponse) string { return v.Name }).(pulumi.StringOutput)
}

// The value of the secure environment variable.
func (o EnvironmentVariableInvokeResponseOutput) SecureValue() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EnvironmentVariableInvokeResponse) *string { return v.SecureValue }).(pulumi.StringPtrOutput)
}

// The value of the environment variable.
func (o EnvironmentVariableInvokeResponseOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EnvironmentVariableInvokeResponse) *string { return v.Value }).(pulumi.StringPtrOutput)
}

type EnvironmentVariableInvokeResponseArrayOutput struct{ *pulumi.OutputState }

func (EnvironmentVariableInvokeResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EnvironmentVariableInvokeResponse)(nil)).Elem()
}

func (o EnvironmentVariableInvokeResponseArrayOutput) ToEnvironmentVariableInvokeResponseArrayOutput() EnvironmentVariableInvokeResponseArrayOutput {
	return o
}

func (o EnvironmentVariableInvokeResponseArrayOutput) ToEnvironmentVariableInvokeResponseArrayOutputWithContext(ctx context.Context) EnvironmentVariableInvokeResponseArrayOutput {
	return o
}

func (o EnvironmentVariableInvokeResponseArrayOutput) Index(i pulumi.IntInput) EnvironmentVariableInvokeResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) EnvironmentVariableInvokeResponse {
		return vs[0].([]EnvironmentVariableInvokeResponse)[vs[1].(int)]
	}).(EnvironmentVariableInvokeResponseOutput)
}

// The environment variable to set within the container instance.
type EnvironmentVariableResponse struct {
	// The name of the environment variable.
	Name string `pulumi:"name"`
	// The value of the secure environment variable.
	SecureValue *string `pulumi:"secureValue"`
	// The value of the environment variable.
	Value *string `pulumi:"value"`
}

// EnvironmentVariableResponseInput is an input type that accepts EnvironmentVariableResponseArgs and EnvironmentVariableResponseOutput values.
// You can construct a concrete instance of `EnvironmentVariableResponseInput` via:
//
//          EnvironmentVariableResponseArgs{...}
type EnvironmentVariableResponseInput interface {
	pulumi.Input

	ToEnvironmentVariableResponseOutput() EnvironmentVariableResponseOutput
	ToEnvironmentVariableResponseOutputWithContext(context.Context) EnvironmentVariableResponseOutput
}

// The environment variable to set within the container instance.
type EnvironmentVariableResponseArgs struct {
	// The name of the environment variable.
	Name pulumi.StringInput `pulumi:"name"`
	// The value of the secure environment variable.
	SecureValue pulumi.StringPtrInput `pulumi:"secureValue"`
	// The value of the environment variable.
	Value pulumi.StringPtrInput `pulumi:"value"`
}

func (EnvironmentVariableResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EnvironmentVariableResponse)(nil)).Elem()
}

func (i EnvironmentVariableResponseArgs) ToEnvironmentVariableResponseOutput() EnvironmentVariableResponseOutput {
	return i.ToEnvironmentVariableResponseOutputWithContext(context.Background())
}

func (i EnvironmentVariableResponseArgs) ToEnvironmentVariableResponseOutputWithContext(ctx context.Context) EnvironmentVariableResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EnvironmentVariableResponseOutput)
}

// EnvironmentVariableResponseArrayInput is an input type that accepts EnvironmentVariableResponseArray and EnvironmentVariableResponseArrayOutput values.
// You can construct a concrete instance of `EnvironmentVariableResponseArrayInput` via:
//
//          EnvironmentVariableResponseArray{ EnvironmentVariableResponseArgs{...} }
type EnvironmentVariableResponseArrayInput interface {
	pulumi.Input

	ToEnvironmentVariableResponseArrayOutput() EnvironmentVariableResponseArrayOutput
	ToEnvironmentVariableResponseArrayOutputWithContext(context.Context) EnvironmentVariableResponseArrayOutput
}

type EnvironmentVariableResponseArray []EnvironmentVariableResponseInput

func (EnvironmentVariableResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EnvironmentVariableResponse)(nil)).Elem()
}

func (i EnvironmentVariableResponseArray) ToEnvironmentVariableResponseArrayOutput() EnvironmentVariableResponseArrayOutput {
	return i.ToEnvironmentVariableResponseArrayOutputWithContext(context.Background())
}

func (i EnvironmentVariableResponseArray) ToEnvironmentVariableResponseArrayOutputWithContext(ctx context.Context) EnvironmentVariableResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EnvironmentVariableResponseArrayOutput)
}

// The environment variable to set within the container instance.
type EnvironmentVariableResponseOutput struct{ *pulumi.OutputState }

func (EnvironmentVariableResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EnvironmentVariableResponse)(nil)).Elem()
}

func (o EnvironmentVariableResponseOutput) ToEnvironmentVariableResponseOutput() EnvironmentVariableResponseOutput {
	return o
}

func (o EnvironmentVariableResponseOutput) ToEnvironmentVariableResponseOutputWithContext(ctx context.Context) EnvironmentVariableResponseOutput {
	return o
}

// The name of the environment variable.
func (o EnvironmentVariableResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v EnvironmentVariableResponse) string { return v.Name }).(pulumi.StringOutput)
}

// The value of the secure environment variable.
func (o EnvironmentVariableResponseOutput) SecureValue() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EnvironmentVariableResponse) *string { return v.SecureValue }).(pulumi.StringPtrOutput)
}

// The value of the environment variable.
func (o EnvironmentVariableResponseOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EnvironmentVariableResponse) *string { return v.Value }).(pulumi.StringPtrOutput)
}

type EnvironmentVariableResponseArrayOutput struct{ *pulumi.OutputState }

func (EnvironmentVariableResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EnvironmentVariableResponse)(nil)).Elem()
}

func (o EnvironmentVariableResponseArrayOutput) ToEnvironmentVariableResponseArrayOutput() EnvironmentVariableResponseArrayOutput {
	return o
}

func (o EnvironmentVariableResponseArrayOutput) ToEnvironmentVariableResponseArrayOutputWithContext(ctx context.Context) EnvironmentVariableResponseArrayOutput {
	return o
}

func (o EnvironmentVariableResponseArrayOutput) Index(i pulumi.IntInput) EnvironmentVariableResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) EnvironmentVariableResponse {
		return vs[0].([]EnvironmentVariableResponse)[vs[1].(int)]
	}).(EnvironmentVariableResponseOutput)
}

// A container group or container instance event.
type EventInvokeResponse struct {
	// The count of the event.
	Count *int `pulumi:"count"`
	// The date-time of the earliest logged event.
	FirstTimestamp *string `pulumi:"firstTimestamp"`
	// The date-time of the latest logged event.
	LastTimestamp *string `pulumi:"lastTimestamp"`
	// The event message.
	Message *string `pulumi:"message"`
	// The event name.
	Name *string `pulumi:"name"`
	// The event type.
	Type *string `pulumi:"type"`
}

// EventInvokeResponseInput is an input type that accepts EventInvokeResponseArgs and EventInvokeResponseOutput values.
// You can construct a concrete instance of `EventInvokeResponseInput` via:
//
//          EventInvokeResponseArgs{...}
type EventInvokeResponseInput interface {
	pulumi.Input

	ToEventInvokeResponseOutput() EventInvokeResponseOutput
	ToEventInvokeResponseOutputWithContext(context.Context) EventInvokeResponseOutput
}

// A container group or container instance event.
type EventInvokeResponseArgs struct {
	// The count of the event.
	Count pulumi.IntPtrInput `pulumi:"count"`
	// The date-time of the earliest logged event.
	FirstTimestamp pulumi.StringPtrInput `pulumi:"firstTimestamp"`
	// The date-time of the latest logged event.
	LastTimestamp pulumi.StringPtrInput `pulumi:"lastTimestamp"`
	// The event message.
	Message pulumi.StringPtrInput `pulumi:"message"`
	// The event name.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// The event type.
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (EventInvokeResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EventInvokeResponse)(nil)).Elem()
}

func (i EventInvokeResponseArgs) ToEventInvokeResponseOutput() EventInvokeResponseOutput {
	return i.ToEventInvokeResponseOutputWithContext(context.Background())
}

func (i EventInvokeResponseArgs) ToEventInvokeResponseOutputWithContext(ctx context.Context) EventInvokeResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventInvokeResponseOutput)
}

// EventInvokeResponseArrayInput is an input type that accepts EventInvokeResponseArray and EventInvokeResponseArrayOutput values.
// You can construct a concrete instance of `EventInvokeResponseArrayInput` via:
//
//          EventInvokeResponseArray{ EventInvokeResponseArgs{...} }
type EventInvokeResponseArrayInput interface {
	pulumi.Input

	ToEventInvokeResponseArrayOutput() EventInvokeResponseArrayOutput
	ToEventInvokeResponseArrayOutputWithContext(context.Context) EventInvokeResponseArrayOutput
}

type EventInvokeResponseArray []EventInvokeResponseInput

func (EventInvokeResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EventInvokeResponse)(nil)).Elem()
}

func (i EventInvokeResponseArray) ToEventInvokeResponseArrayOutput() EventInvokeResponseArrayOutput {
	return i.ToEventInvokeResponseArrayOutputWithContext(context.Background())
}

func (i EventInvokeResponseArray) ToEventInvokeResponseArrayOutputWithContext(ctx context.Context) EventInvokeResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventInvokeResponseArrayOutput)
}

// A container group or container instance event.
type EventInvokeResponseOutput struct{ *pulumi.OutputState }

func (EventInvokeResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EventInvokeResponse)(nil)).Elem()
}

func (o EventInvokeResponseOutput) ToEventInvokeResponseOutput() EventInvokeResponseOutput {
	return o
}

func (o EventInvokeResponseOutput) ToEventInvokeResponseOutputWithContext(ctx context.Context) EventInvokeResponseOutput {
	return o
}

// The count of the event.
func (o EventInvokeResponseOutput) Count() pulumi.IntPtrOutput {
	return o.ApplyT(func(v EventInvokeResponse) *int { return v.Count }).(pulumi.IntPtrOutput)
}

// The date-time of the earliest logged event.
func (o EventInvokeResponseOutput) FirstTimestamp() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EventInvokeResponse) *string { return v.FirstTimestamp }).(pulumi.StringPtrOutput)
}

// The date-time of the latest logged event.
func (o EventInvokeResponseOutput) LastTimestamp() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EventInvokeResponse) *string { return v.LastTimestamp }).(pulumi.StringPtrOutput)
}

// The event message.
func (o EventInvokeResponseOutput) Message() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EventInvokeResponse) *string { return v.Message }).(pulumi.StringPtrOutput)
}

// The event name.
func (o EventInvokeResponseOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EventInvokeResponse) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The event type.
func (o EventInvokeResponseOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EventInvokeResponse) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type EventInvokeResponseArrayOutput struct{ *pulumi.OutputState }

func (EventInvokeResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EventInvokeResponse)(nil)).Elem()
}

func (o EventInvokeResponseArrayOutput) ToEventInvokeResponseArrayOutput() EventInvokeResponseArrayOutput {
	return o
}

func (o EventInvokeResponseArrayOutput) ToEventInvokeResponseArrayOutputWithContext(ctx context.Context) EventInvokeResponseArrayOutput {
	return o
}

func (o EventInvokeResponseArrayOutput) Index(i pulumi.IntInput) EventInvokeResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) EventInvokeResponse {
		return vs[0].([]EventInvokeResponse)[vs[1].(int)]
	}).(EventInvokeResponseOutput)
}

// A container group or container instance event.
type EventResponse struct {
	// The count of the event.
	Count *int `pulumi:"count"`
	// The date-time of the earliest logged event.
	FirstTimestamp *string `pulumi:"firstTimestamp"`
	// The date-time of the latest logged event.
	LastTimestamp *string `pulumi:"lastTimestamp"`
	// The event message.
	Message *string `pulumi:"message"`
	// The event name.
	Name *string `pulumi:"name"`
	// The event type.
	Type *string `pulumi:"type"`
}

// EventResponseInput is an input type that accepts EventResponseArgs and EventResponseOutput values.
// You can construct a concrete instance of `EventResponseInput` via:
//
//          EventResponseArgs{...}
type EventResponseInput interface {
	pulumi.Input

	ToEventResponseOutput() EventResponseOutput
	ToEventResponseOutputWithContext(context.Context) EventResponseOutput
}

// A container group or container instance event.
type EventResponseArgs struct {
	// The count of the event.
	Count pulumi.IntPtrInput `pulumi:"count"`
	// The date-time of the earliest logged event.
	FirstTimestamp pulumi.StringPtrInput `pulumi:"firstTimestamp"`
	// The date-time of the latest logged event.
	LastTimestamp pulumi.StringPtrInput `pulumi:"lastTimestamp"`
	// The event message.
	Message pulumi.StringPtrInput `pulumi:"message"`
	// The event name.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// The event type.
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (EventResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EventResponse)(nil)).Elem()
}

func (i EventResponseArgs) ToEventResponseOutput() EventResponseOutput {
	return i.ToEventResponseOutputWithContext(context.Background())
}

func (i EventResponseArgs) ToEventResponseOutputWithContext(ctx context.Context) EventResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventResponseOutput)
}

// EventResponseArrayInput is an input type that accepts EventResponseArray and EventResponseArrayOutput values.
// You can construct a concrete instance of `EventResponseArrayInput` via:
//
//          EventResponseArray{ EventResponseArgs{...} }
type EventResponseArrayInput interface {
	pulumi.Input

	ToEventResponseArrayOutput() EventResponseArrayOutput
	ToEventResponseArrayOutputWithContext(context.Context) EventResponseArrayOutput
}

type EventResponseArray []EventResponseInput

func (EventResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EventResponse)(nil)).Elem()
}

func (i EventResponseArray) ToEventResponseArrayOutput() EventResponseArrayOutput {
	return i.ToEventResponseArrayOutputWithContext(context.Background())
}

func (i EventResponseArray) ToEventResponseArrayOutputWithContext(ctx context.Context) EventResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventResponseArrayOutput)
}

// A container group or container instance event.
type EventResponseOutput struct{ *pulumi.OutputState }

func (EventResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EventResponse)(nil)).Elem()
}

func (o EventResponseOutput) ToEventResponseOutput() EventResponseOutput {
	return o
}

func (o EventResponseOutput) ToEventResponseOutputWithContext(ctx context.Context) EventResponseOutput {
	return o
}

// The count of the event.
func (o EventResponseOutput) Count() pulumi.IntPtrOutput {
	return o.ApplyT(func(v EventResponse) *int { return v.Count }).(pulumi.IntPtrOutput)
}

// The date-time of the earliest logged event.
func (o EventResponseOutput) FirstTimestamp() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EventResponse) *string { return v.FirstTimestamp }).(pulumi.StringPtrOutput)
}

// The date-time of the latest logged event.
func (o EventResponseOutput) LastTimestamp() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EventResponse) *string { return v.LastTimestamp }).(pulumi.StringPtrOutput)
}

// The event message.
func (o EventResponseOutput) Message() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EventResponse) *string { return v.Message }).(pulumi.StringPtrOutput)
}

// The event name.
func (o EventResponseOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EventResponse) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The event type.
func (o EventResponseOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EventResponse) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type EventResponseArrayOutput struct{ *pulumi.OutputState }

func (EventResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EventResponse)(nil)).Elem()
}

func (o EventResponseArrayOutput) ToEventResponseArrayOutput() EventResponseArrayOutput {
	return o
}

func (o EventResponseArrayOutput) ToEventResponseArrayOutputWithContext(ctx context.Context) EventResponseArrayOutput {
	return o
}

func (o EventResponseArrayOutput) Index(i pulumi.IntInput) EventResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) EventResponse {
		return vs[0].([]EventResponse)[vs[1].(int)]
	}).(EventResponseOutput)
}

// Represents a volume that is populated with the contents of a git repository
type GitRepoVolume struct {
	// Target directory name. Must not contain or start with '..'.  If '.' is supplied, the volume directory will be the git repository.  Otherwise, if specified, the volume will contain the git repository in the subdirectory with the given name.
	Directory *string `pulumi:"directory"`
	// Repository URL
	Repository string `pulumi:"repository"`
	// Commit hash for the specified revision.
	Revision *string `pulumi:"revision"`
}

// GitRepoVolumeInput is an input type that accepts GitRepoVolumeArgs and GitRepoVolumeOutput values.
// You can construct a concrete instance of `GitRepoVolumeInput` via:
//
//          GitRepoVolumeArgs{...}
type GitRepoVolumeInput interface {
	pulumi.Input

	ToGitRepoVolumeOutput() GitRepoVolumeOutput
	ToGitRepoVolumeOutputWithContext(context.Context) GitRepoVolumeOutput
}

// Represents a volume that is populated with the contents of a git repository
type GitRepoVolumeArgs struct {
	// Target directory name. Must not contain or start with '..'.  If '.' is supplied, the volume directory will be the git repository.  Otherwise, if specified, the volume will contain the git repository in the subdirectory with the given name.
	Directory pulumi.StringPtrInput `pulumi:"directory"`
	// Repository URL
	Repository pulumi.StringInput `pulumi:"repository"`
	// Commit hash for the specified revision.
	Revision pulumi.StringPtrInput `pulumi:"revision"`
}

func (GitRepoVolumeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GitRepoVolume)(nil)).Elem()
}

func (i GitRepoVolumeArgs) ToGitRepoVolumeOutput() GitRepoVolumeOutput {
	return i.ToGitRepoVolumeOutputWithContext(context.Background())
}

func (i GitRepoVolumeArgs) ToGitRepoVolumeOutputWithContext(ctx context.Context) GitRepoVolumeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GitRepoVolumeOutput)
}

func (i GitRepoVolumeArgs) ToGitRepoVolumePtrOutput() GitRepoVolumePtrOutput {
	return i.ToGitRepoVolumePtrOutputWithContext(context.Background())
}

func (i GitRepoVolumeArgs) ToGitRepoVolumePtrOutputWithContext(ctx context.Context) GitRepoVolumePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GitRepoVolumeOutput).ToGitRepoVolumePtrOutputWithContext(ctx)
}

// GitRepoVolumePtrInput is an input type that accepts GitRepoVolumeArgs, GitRepoVolumePtr and GitRepoVolumePtrOutput values.
// You can construct a concrete instance of `GitRepoVolumePtrInput` via:
//
//          GitRepoVolumeArgs{...}
//
//  or:
//
//          nil
type GitRepoVolumePtrInput interface {
	pulumi.Input

	ToGitRepoVolumePtrOutput() GitRepoVolumePtrOutput
	ToGitRepoVolumePtrOutputWithContext(context.Context) GitRepoVolumePtrOutput
}

type gitRepoVolumePtrType GitRepoVolumeArgs

func GitRepoVolumePtr(v *GitRepoVolumeArgs) GitRepoVolumePtrInput {
	return (*gitRepoVolumePtrType)(v)
}

func (*gitRepoVolumePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GitRepoVolume)(nil)).Elem()
}

func (i *gitRepoVolumePtrType) ToGitRepoVolumePtrOutput() GitRepoVolumePtrOutput {
	return i.ToGitRepoVolumePtrOutputWithContext(context.Background())
}

func (i *gitRepoVolumePtrType) ToGitRepoVolumePtrOutputWithContext(ctx context.Context) GitRepoVolumePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GitRepoVolumePtrOutput)
}

// Represents a volume that is populated with the contents of a git repository
type GitRepoVolumeOutput struct{ *pulumi.OutputState }

func (GitRepoVolumeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GitRepoVolume)(nil)).Elem()
}

func (o GitRepoVolumeOutput) ToGitRepoVolumeOutput() GitRepoVolumeOutput {
	return o
}

func (o GitRepoVolumeOutput) ToGitRepoVolumeOutputWithContext(ctx context.Context) GitRepoVolumeOutput {
	return o
}

func (o GitRepoVolumeOutput) ToGitRepoVolumePtrOutput() GitRepoVolumePtrOutput {
	return o.ToGitRepoVolumePtrOutputWithContext(context.Background())
}

func (o GitRepoVolumeOutput) ToGitRepoVolumePtrOutputWithContext(ctx context.Context) GitRepoVolumePtrOutput {
	return o.ApplyT(func(v GitRepoVolume) *GitRepoVolume {
		return &v
	}).(GitRepoVolumePtrOutput)
}

// Target directory name. Must not contain or start with '..'.  If '.' is supplied, the volume directory will be the git repository.  Otherwise, if specified, the volume will contain the git repository in the subdirectory with the given name.
func (o GitRepoVolumeOutput) Directory() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GitRepoVolume) *string { return v.Directory }).(pulumi.StringPtrOutput)
}

// Repository URL
func (o GitRepoVolumeOutput) Repository() pulumi.StringOutput {
	return o.ApplyT(func(v GitRepoVolume) string { return v.Repository }).(pulumi.StringOutput)
}

// Commit hash for the specified revision.
func (o GitRepoVolumeOutput) Revision() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GitRepoVolume) *string { return v.Revision }).(pulumi.StringPtrOutput)
}

type GitRepoVolumePtrOutput struct{ *pulumi.OutputState }

func (GitRepoVolumePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GitRepoVolume)(nil)).Elem()
}

func (o GitRepoVolumePtrOutput) ToGitRepoVolumePtrOutput() GitRepoVolumePtrOutput {
	return o
}

func (o GitRepoVolumePtrOutput) ToGitRepoVolumePtrOutputWithContext(ctx context.Context) GitRepoVolumePtrOutput {
	return o
}

func (o GitRepoVolumePtrOutput) Elem() GitRepoVolumeOutput {
	return o.ApplyT(func(v *GitRepoVolume) GitRepoVolume { return *v }).(GitRepoVolumeOutput)
}

// Target directory name. Must not contain or start with '..'.  If '.' is supplied, the volume directory will be the git repository.  Otherwise, if specified, the volume will contain the git repository in the subdirectory with the given name.
func (o GitRepoVolumePtrOutput) Directory() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GitRepoVolume) *string {
		if v == nil {
			return nil
		}
		return v.Directory
	}).(pulumi.StringPtrOutput)
}

// Repository URL
func (o GitRepoVolumePtrOutput) Repository() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GitRepoVolume) *string {
		if v == nil {
			return nil
		}
		return &v.Repository
	}).(pulumi.StringPtrOutput)
}

// Commit hash for the specified revision.
func (o GitRepoVolumePtrOutput) Revision() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GitRepoVolume) *string {
		if v == nil {
			return nil
		}
		return v.Revision
	}).(pulumi.StringPtrOutput)
}

// Represents a volume that is populated with the contents of a git repository
type GitRepoVolumeInvokeResponse struct {
	// Target directory name. Must not contain or start with '..'.  If '.' is supplied, the volume directory will be the git repository.  Otherwise, if specified, the volume will contain the git repository in the subdirectory with the given name.
	Directory *string `pulumi:"directory"`
	// Repository URL
	Repository string `pulumi:"repository"`
	// Commit hash for the specified revision.
	Revision *string `pulumi:"revision"`
}

// GitRepoVolumeInvokeResponseInput is an input type that accepts GitRepoVolumeInvokeResponseArgs and GitRepoVolumeInvokeResponseOutput values.
// You can construct a concrete instance of `GitRepoVolumeInvokeResponseInput` via:
//
//          GitRepoVolumeInvokeResponseArgs{...}
type GitRepoVolumeInvokeResponseInput interface {
	pulumi.Input

	ToGitRepoVolumeInvokeResponseOutput() GitRepoVolumeInvokeResponseOutput
	ToGitRepoVolumeInvokeResponseOutputWithContext(context.Context) GitRepoVolumeInvokeResponseOutput
}

// Represents a volume that is populated with the contents of a git repository
type GitRepoVolumeInvokeResponseArgs struct {
	// Target directory name. Must not contain or start with '..'.  If '.' is supplied, the volume directory will be the git repository.  Otherwise, if specified, the volume will contain the git repository in the subdirectory with the given name.
	Directory pulumi.StringPtrInput `pulumi:"directory"`
	// Repository URL
	Repository pulumi.StringInput `pulumi:"repository"`
	// Commit hash for the specified revision.
	Revision pulumi.StringPtrInput `pulumi:"revision"`
}

func (GitRepoVolumeInvokeResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GitRepoVolumeInvokeResponse)(nil)).Elem()
}

func (i GitRepoVolumeInvokeResponseArgs) ToGitRepoVolumeInvokeResponseOutput() GitRepoVolumeInvokeResponseOutput {
	return i.ToGitRepoVolumeInvokeResponseOutputWithContext(context.Background())
}

func (i GitRepoVolumeInvokeResponseArgs) ToGitRepoVolumeInvokeResponseOutputWithContext(ctx context.Context) GitRepoVolumeInvokeResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GitRepoVolumeInvokeResponseOutput)
}

func (i GitRepoVolumeInvokeResponseArgs) ToGitRepoVolumeInvokeResponsePtrOutput() GitRepoVolumeInvokeResponsePtrOutput {
	return i.ToGitRepoVolumeInvokeResponsePtrOutputWithContext(context.Background())
}

func (i GitRepoVolumeInvokeResponseArgs) ToGitRepoVolumeInvokeResponsePtrOutputWithContext(ctx context.Context) GitRepoVolumeInvokeResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GitRepoVolumeInvokeResponseOutput).ToGitRepoVolumeInvokeResponsePtrOutputWithContext(ctx)
}

// GitRepoVolumeInvokeResponsePtrInput is an input type that accepts GitRepoVolumeInvokeResponseArgs, GitRepoVolumeInvokeResponsePtr and GitRepoVolumeInvokeResponsePtrOutput values.
// You can construct a concrete instance of `GitRepoVolumeInvokeResponsePtrInput` via:
//
//          GitRepoVolumeInvokeResponseArgs{...}
//
//  or:
//
//          nil
type GitRepoVolumeInvokeResponsePtrInput interface {
	pulumi.Input

	ToGitRepoVolumeInvokeResponsePtrOutput() GitRepoVolumeInvokeResponsePtrOutput
	ToGitRepoVolumeInvokeResponsePtrOutputWithContext(context.Context) GitRepoVolumeInvokeResponsePtrOutput
}

type gitRepoVolumeInvokeResponsePtrType GitRepoVolumeInvokeResponseArgs

func GitRepoVolumeInvokeResponsePtr(v *GitRepoVolumeInvokeResponseArgs) GitRepoVolumeInvokeResponsePtrInput {
	return (*gitRepoVolumeInvokeResponsePtrType)(v)
}

func (*gitRepoVolumeInvokeResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GitRepoVolumeInvokeResponse)(nil)).Elem()
}

func (i *gitRepoVolumeInvokeResponsePtrType) ToGitRepoVolumeInvokeResponsePtrOutput() GitRepoVolumeInvokeResponsePtrOutput {
	return i.ToGitRepoVolumeInvokeResponsePtrOutputWithContext(context.Background())
}

func (i *gitRepoVolumeInvokeResponsePtrType) ToGitRepoVolumeInvokeResponsePtrOutputWithContext(ctx context.Context) GitRepoVolumeInvokeResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GitRepoVolumeInvokeResponsePtrOutput)
}

// Represents a volume that is populated with the contents of a git repository
type GitRepoVolumeInvokeResponseOutput struct{ *pulumi.OutputState }

func (GitRepoVolumeInvokeResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GitRepoVolumeInvokeResponse)(nil)).Elem()
}

func (o GitRepoVolumeInvokeResponseOutput) ToGitRepoVolumeInvokeResponseOutput() GitRepoVolumeInvokeResponseOutput {
	return o
}

func (o GitRepoVolumeInvokeResponseOutput) ToGitRepoVolumeInvokeResponseOutputWithContext(ctx context.Context) GitRepoVolumeInvokeResponseOutput {
	return o
}

func (o GitRepoVolumeInvokeResponseOutput) ToGitRepoVolumeInvokeResponsePtrOutput() GitRepoVolumeInvokeResponsePtrOutput {
	return o.ToGitRepoVolumeInvokeResponsePtrOutputWithContext(context.Background())
}

func (o GitRepoVolumeInvokeResponseOutput) ToGitRepoVolumeInvokeResponsePtrOutputWithContext(ctx context.Context) GitRepoVolumeInvokeResponsePtrOutput {
	return o.ApplyT(func(v GitRepoVolumeInvokeResponse) *GitRepoVolumeInvokeResponse {
		return &v
	}).(GitRepoVolumeInvokeResponsePtrOutput)
}

// Target directory name. Must not contain or start with '..'.  If '.' is supplied, the volume directory will be the git repository.  Otherwise, if specified, the volume will contain the git repository in the subdirectory with the given name.
func (o GitRepoVolumeInvokeResponseOutput) Directory() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GitRepoVolumeInvokeResponse) *string { return v.Directory }).(pulumi.StringPtrOutput)
}

// Repository URL
func (o GitRepoVolumeInvokeResponseOutput) Repository() pulumi.StringOutput {
	return o.ApplyT(func(v GitRepoVolumeInvokeResponse) string { return v.Repository }).(pulumi.StringOutput)
}

// Commit hash for the specified revision.
func (o GitRepoVolumeInvokeResponseOutput) Revision() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GitRepoVolumeInvokeResponse) *string { return v.Revision }).(pulumi.StringPtrOutput)
}

type GitRepoVolumeInvokeResponsePtrOutput struct{ *pulumi.OutputState }

func (GitRepoVolumeInvokeResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GitRepoVolumeInvokeResponse)(nil)).Elem()
}

func (o GitRepoVolumeInvokeResponsePtrOutput) ToGitRepoVolumeInvokeResponsePtrOutput() GitRepoVolumeInvokeResponsePtrOutput {
	return o
}

func (o GitRepoVolumeInvokeResponsePtrOutput) ToGitRepoVolumeInvokeResponsePtrOutputWithContext(ctx context.Context) GitRepoVolumeInvokeResponsePtrOutput {
	return o
}

func (o GitRepoVolumeInvokeResponsePtrOutput) Elem() GitRepoVolumeInvokeResponseOutput {
	return o.ApplyT(func(v *GitRepoVolumeInvokeResponse) GitRepoVolumeInvokeResponse { return *v }).(GitRepoVolumeInvokeResponseOutput)
}

// Target directory name. Must not contain or start with '..'.  If '.' is supplied, the volume directory will be the git repository.  Otherwise, if specified, the volume will contain the git repository in the subdirectory with the given name.
func (o GitRepoVolumeInvokeResponsePtrOutput) Directory() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GitRepoVolumeInvokeResponse) *string {
		if v == nil {
			return nil
		}
		return v.Directory
	}).(pulumi.StringPtrOutput)
}

// Repository URL
func (o GitRepoVolumeInvokeResponsePtrOutput) Repository() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GitRepoVolumeInvokeResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Repository
	}).(pulumi.StringPtrOutput)
}

// Commit hash for the specified revision.
func (o GitRepoVolumeInvokeResponsePtrOutput) Revision() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GitRepoVolumeInvokeResponse) *string {
		if v == nil {
			return nil
		}
		return v.Revision
	}).(pulumi.StringPtrOutput)
}

// Represents a volume that is populated with the contents of a git repository
type GitRepoVolumeResponse struct {
	// Target directory name. Must not contain or start with '..'.  If '.' is supplied, the volume directory will be the git repository.  Otherwise, if specified, the volume will contain the git repository in the subdirectory with the given name.
	Directory *string `pulumi:"directory"`
	// Repository URL
	Repository string `pulumi:"repository"`
	// Commit hash for the specified revision.
	Revision *string `pulumi:"revision"`
}

// GitRepoVolumeResponseInput is an input type that accepts GitRepoVolumeResponseArgs and GitRepoVolumeResponseOutput values.
// You can construct a concrete instance of `GitRepoVolumeResponseInput` via:
//
//          GitRepoVolumeResponseArgs{...}
type GitRepoVolumeResponseInput interface {
	pulumi.Input

	ToGitRepoVolumeResponseOutput() GitRepoVolumeResponseOutput
	ToGitRepoVolumeResponseOutputWithContext(context.Context) GitRepoVolumeResponseOutput
}

// Represents a volume that is populated with the contents of a git repository
type GitRepoVolumeResponseArgs struct {
	// Target directory name. Must not contain or start with '..'.  If '.' is supplied, the volume directory will be the git repository.  Otherwise, if specified, the volume will contain the git repository in the subdirectory with the given name.
	Directory pulumi.StringPtrInput `pulumi:"directory"`
	// Repository URL
	Repository pulumi.StringInput `pulumi:"repository"`
	// Commit hash for the specified revision.
	Revision pulumi.StringPtrInput `pulumi:"revision"`
}

func (GitRepoVolumeResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GitRepoVolumeResponse)(nil)).Elem()
}

func (i GitRepoVolumeResponseArgs) ToGitRepoVolumeResponseOutput() GitRepoVolumeResponseOutput {
	return i.ToGitRepoVolumeResponseOutputWithContext(context.Background())
}

func (i GitRepoVolumeResponseArgs) ToGitRepoVolumeResponseOutputWithContext(ctx context.Context) GitRepoVolumeResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GitRepoVolumeResponseOutput)
}

func (i GitRepoVolumeResponseArgs) ToGitRepoVolumeResponsePtrOutput() GitRepoVolumeResponsePtrOutput {
	return i.ToGitRepoVolumeResponsePtrOutputWithContext(context.Background())
}

func (i GitRepoVolumeResponseArgs) ToGitRepoVolumeResponsePtrOutputWithContext(ctx context.Context) GitRepoVolumeResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GitRepoVolumeResponseOutput).ToGitRepoVolumeResponsePtrOutputWithContext(ctx)
}

// GitRepoVolumeResponsePtrInput is an input type that accepts GitRepoVolumeResponseArgs, GitRepoVolumeResponsePtr and GitRepoVolumeResponsePtrOutput values.
// You can construct a concrete instance of `GitRepoVolumeResponsePtrInput` via:
//
//          GitRepoVolumeResponseArgs{...}
//
//  or:
//
//          nil
type GitRepoVolumeResponsePtrInput interface {
	pulumi.Input

	ToGitRepoVolumeResponsePtrOutput() GitRepoVolumeResponsePtrOutput
	ToGitRepoVolumeResponsePtrOutputWithContext(context.Context) GitRepoVolumeResponsePtrOutput
}

type gitRepoVolumeResponsePtrType GitRepoVolumeResponseArgs

func GitRepoVolumeResponsePtr(v *GitRepoVolumeResponseArgs) GitRepoVolumeResponsePtrInput {
	return (*gitRepoVolumeResponsePtrType)(v)
}

func (*gitRepoVolumeResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GitRepoVolumeResponse)(nil)).Elem()
}

func (i *gitRepoVolumeResponsePtrType) ToGitRepoVolumeResponsePtrOutput() GitRepoVolumeResponsePtrOutput {
	return i.ToGitRepoVolumeResponsePtrOutputWithContext(context.Background())
}

func (i *gitRepoVolumeResponsePtrType) ToGitRepoVolumeResponsePtrOutputWithContext(ctx context.Context) GitRepoVolumeResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GitRepoVolumeResponsePtrOutput)
}

// Represents a volume that is populated with the contents of a git repository
type GitRepoVolumeResponseOutput struct{ *pulumi.OutputState }

func (GitRepoVolumeResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GitRepoVolumeResponse)(nil)).Elem()
}

func (o GitRepoVolumeResponseOutput) ToGitRepoVolumeResponseOutput() GitRepoVolumeResponseOutput {
	return o
}

func (o GitRepoVolumeResponseOutput) ToGitRepoVolumeResponseOutputWithContext(ctx context.Context) GitRepoVolumeResponseOutput {
	return o
}

func (o GitRepoVolumeResponseOutput) ToGitRepoVolumeResponsePtrOutput() GitRepoVolumeResponsePtrOutput {
	return o.ToGitRepoVolumeResponsePtrOutputWithContext(context.Background())
}

func (o GitRepoVolumeResponseOutput) ToGitRepoVolumeResponsePtrOutputWithContext(ctx context.Context) GitRepoVolumeResponsePtrOutput {
	return o.ApplyT(func(v GitRepoVolumeResponse) *GitRepoVolumeResponse {
		return &v
	}).(GitRepoVolumeResponsePtrOutput)
}

// Target directory name. Must not contain or start with '..'.  If '.' is supplied, the volume directory will be the git repository.  Otherwise, if specified, the volume will contain the git repository in the subdirectory with the given name.
func (o GitRepoVolumeResponseOutput) Directory() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GitRepoVolumeResponse) *string { return v.Directory }).(pulumi.StringPtrOutput)
}

// Repository URL
func (o GitRepoVolumeResponseOutput) Repository() pulumi.StringOutput {
	return o.ApplyT(func(v GitRepoVolumeResponse) string { return v.Repository }).(pulumi.StringOutput)
}

// Commit hash for the specified revision.
func (o GitRepoVolumeResponseOutput) Revision() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GitRepoVolumeResponse) *string { return v.Revision }).(pulumi.StringPtrOutput)
}

type GitRepoVolumeResponsePtrOutput struct{ *pulumi.OutputState }

func (GitRepoVolumeResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GitRepoVolumeResponse)(nil)).Elem()
}

func (o GitRepoVolumeResponsePtrOutput) ToGitRepoVolumeResponsePtrOutput() GitRepoVolumeResponsePtrOutput {
	return o
}

func (o GitRepoVolumeResponsePtrOutput) ToGitRepoVolumeResponsePtrOutputWithContext(ctx context.Context) GitRepoVolumeResponsePtrOutput {
	return o
}

func (o GitRepoVolumeResponsePtrOutput) Elem() GitRepoVolumeResponseOutput {
	return o.ApplyT(func(v *GitRepoVolumeResponse) GitRepoVolumeResponse { return *v }).(GitRepoVolumeResponseOutput)
}

// Target directory name. Must not contain or start with '..'.  If '.' is supplied, the volume directory will be the git repository.  Otherwise, if specified, the volume will contain the git repository in the subdirectory with the given name.
func (o GitRepoVolumeResponsePtrOutput) Directory() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GitRepoVolumeResponse) *string {
		if v == nil {
			return nil
		}
		return v.Directory
	}).(pulumi.StringPtrOutput)
}

// Repository URL
func (o GitRepoVolumeResponsePtrOutput) Repository() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GitRepoVolumeResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Repository
	}).(pulumi.StringPtrOutput)
}

// Commit hash for the specified revision.
func (o GitRepoVolumeResponsePtrOutput) Revision() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GitRepoVolumeResponse) *string {
		if v == nil {
			return nil
		}
		return v.Revision
	}).(pulumi.StringPtrOutput)
}

// The GPU resource.
type GpuResource struct {
	// The count of the GPU resource.
	Count int `pulumi:"count"`
	// The SKU of the GPU resource.
	Sku string `pulumi:"sku"`
}

// GpuResourceInput is an input type that accepts GpuResourceArgs and GpuResourceOutput values.
// You can construct a concrete instance of `GpuResourceInput` via:
//
//          GpuResourceArgs{...}
type GpuResourceInput interface {
	pulumi.Input

	ToGpuResourceOutput() GpuResourceOutput
	ToGpuResourceOutputWithContext(context.Context) GpuResourceOutput
}

// The GPU resource.
type GpuResourceArgs struct {
	// The count of the GPU resource.
	Count pulumi.IntInput `pulumi:"count"`
	// The SKU of the GPU resource.
	Sku pulumi.StringInput `pulumi:"sku"`
}

func (GpuResourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GpuResource)(nil)).Elem()
}

func (i GpuResourceArgs) ToGpuResourceOutput() GpuResourceOutput {
	return i.ToGpuResourceOutputWithContext(context.Background())
}

func (i GpuResourceArgs) ToGpuResourceOutputWithContext(ctx context.Context) GpuResourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GpuResourceOutput)
}

func (i GpuResourceArgs) ToGpuResourcePtrOutput() GpuResourcePtrOutput {
	return i.ToGpuResourcePtrOutputWithContext(context.Background())
}

func (i GpuResourceArgs) ToGpuResourcePtrOutputWithContext(ctx context.Context) GpuResourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GpuResourceOutput).ToGpuResourcePtrOutputWithContext(ctx)
}

// GpuResourcePtrInput is an input type that accepts GpuResourceArgs, GpuResourcePtr and GpuResourcePtrOutput values.
// You can construct a concrete instance of `GpuResourcePtrInput` via:
//
//          GpuResourceArgs{...}
//
//  or:
//
//          nil
type GpuResourcePtrInput interface {
	pulumi.Input

	ToGpuResourcePtrOutput() GpuResourcePtrOutput
	ToGpuResourcePtrOutputWithContext(context.Context) GpuResourcePtrOutput
}

type gpuResourcePtrType GpuResourceArgs

func GpuResourcePtr(v *GpuResourceArgs) GpuResourcePtrInput {
	return (*gpuResourcePtrType)(v)
}

func (*gpuResourcePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GpuResource)(nil)).Elem()
}

func (i *gpuResourcePtrType) ToGpuResourcePtrOutput() GpuResourcePtrOutput {
	return i.ToGpuResourcePtrOutputWithContext(context.Background())
}

func (i *gpuResourcePtrType) ToGpuResourcePtrOutputWithContext(ctx context.Context) GpuResourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GpuResourcePtrOutput)
}

// The GPU resource.
type GpuResourceOutput struct{ *pulumi.OutputState }

func (GpuResourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GpuResource)(nil)).Elem()
}

func (o GpuResourceOutput) ToGpuResourceOutput() GpuResourceOutput {
	return o
}

func (o GpuResourceOutput) ToGpuResourceOutputWithContext(ctx context.Context) GpuResourceOutput {
	return o
}

func (o GpuResourceOutput) ToGpuResourcePtrOutput() GpuResourcePtrOutput {
	return o.ToGpuResourcePtrOutputWithContext(context.Background())
}

func (o GpuResourceOutput) ToGpuResourcePtrOutputWithContext(ctx context.Context) GpuResourcePtrOutput {
	return o.ApplyT(func(v GpuResource) *GpuResource {
		return &v
	}).(GpuResourcePtrOutput)
}

// The count of the GPU resource.
func (o GpuResourceOutput) Count() pulumi.IntOutput {
	return o.ApplyT(func(v GpuResource) int { return v.Count }).(pulumi.IntOutput)
}

// The SKU of the GPU resource.
func (o GpuResourceOutput) Sku() pulumi.StringOutput {
	return o.ApplyT(func(v GpuResource) string { return v.Sku }).(pulumi.StringOutput)
}

type GpuResourcePtrOutput struct{ *pulumi.OutputState }

func (GpuResourcePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GpuResource)(nil)).Elem()
}

func (o GpuResourcePtrOutput) ToGpuResourcePtrOutput() GpuResourcePtrOutput {
	return o
}

func (o GpuResourcePtrOutput) ToGpuResourcePtrOutputWithContext(ctx context.Context) GpuResourcePtrOutput {
	return o
}

func (o GpuResourcePtrOutput) Elem() GpuResourceOutput {
	return o.ApplyT(func(v *GpuResource) GpuResource { return *v }).(GpuResourceOutput)
}

// The count of the GPU resource.
func (o GpuResourcePtrOutput) Count() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *GpuResource) *int {
		if v == nil {
			return nil
		}
		return &v.Count
	}).(pulumi.IntPtrOutput)
}

// The SKU of the GPU resource.
func (o GpuResourcePtrOutput) Sku() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GpuResource) *string {
		if v == nil {
			return nil
		}
		return &v.Sku
	}).(pulumi.StringPtrOutput)
}

// The GPU resource.
type GpuResourceInvokeResponse struct {
	// The count of the GPU resource.
	Count int `pulumi:"count"`
	// The SKU of the GPU resource.
	Sku string `pulumi:"sku"`
}

// GpuResourceInvokeResponseInput is an input type that accepts GpuResourceInvokeResponseArgs and GpuResourceInvokeResponseOutput values.
// You can construct a concrete instance of `GpuResourceInvokeResponseInput` via:
//
//          GpuResourceInvokeResponseArgs{...}
type GpuResourceInvokeResponseInput interface {
	pulumi.Input

	ToGpuResourceInvokeResponseOutput() GpuResourceInvokeResponseOutput
	ToGpuResourceInvokeResponseOutputWithContext(context.Context) GpuResourceInvokeResponseOutput
}

// The GPU resource.
type GpuResourceInvokeResponseArgs struct {
	// The count of the GPU resource.
	Count pulumi.IntInput `pulumi:"count"`
	// The SKU of the GPU resource.
	Sku pulumi.StringInput `pulumi:"sku"`
}

func (GpuResourceInvokeResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GpuResourceInvokeResponse)(nil)).Elem()
}

func (i GpuResourceInvokeResponseArgs) ToGpuResourceInvokeResponseOutput() GpuResourceInvokeResponseOutput {
	return i.ToGpuResourceInvokeResponseOutputWithContext(context.Background())
}

func (i GpuResourceInvokeResponseArgs) ToGpuResourceInvokeResponseOutputWithContext(ctx context.Context) GpuResourceInvokeResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GpuResourceInvokeResponseOutput)
}

func (i GpuResourceInvokeResponseArgs) ToGpuResourceInvokeResponsePtrOutput() GpuResourceInvokeResponsePtrOutput {
	return i.ToGpuResourceInvokeResponsePtrOutputWithContext(context.Background())
}

func (i GpuResourceInvokeResponseArgs) ToGpuResourceInvokeResponsePtrOutputWithContext(ctx context.Context) GpuResourceInvokeResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GpuResourceInvokeResponseOutput).ToGpuResourceInvokeResponsePtrOutputWithContext(ctx)
}

// GpuResourceInvokeResponsePtrInput is an input type that accepts GpuResourceInvokeResponseArgs, GpuResourceInvokeResponsePtr and GpuResourceInvokeResponsePtrOutput values.
// You can construct a concrete instance of `GpuResourceInvokeResponsePtrInput` via:
//
//          GpuResourceInvokeResponseArgs{...}
//
//  or:
//
//          nil
type GpuResourceInvokeResponsePtrInput interface {
	pulumi.Input

	ToGpuResourceInvokeResponsePtrOutput() GpuResourceInvokeResponsePtrOutput
	ToGpuResourceInvokeResponsePtrOutputWithContext(context.Context) GpuResourceInvokeResponsePtrOutput
}

type gpuResourceInvokeResponsePtrType GpuResourceInvokeResponseArgs

func GpuResourceInvokeResponsePtr(v *GpuResourceInvokeResponseArgs) GpuResourceInvokeResponsePtrInput {
	return (*gpuResourceInvokeResponsePtrType)(v)
}

func (*gpuResourceInvokeResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GpuResourceInvokeResponse)(nil)).Elem()
}

func (i *gpuResourceInvokeResponsePtrType) ToGpuResourceInvokeResponsePtrOutput() GpuResourceInvokeResponsePtrOutput {
	return i.ToGpuResourceInvokeResponsePtrOutputWithContext(context.Background())
}

func (i *gpuResourceInvokeResponsePtrType) ToGpuResourceInvokeResponsePtrOutputWithContext(ctx context.Context) GpuResourceInvokeResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GpuResourceInvokeResponsePtrOutput)
}

// The GPU resource.
type GpuResourceInvokeResponseOutput struct{ *pulumi.OutputState }

func (GpuResourceInvokeResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GpuResourceInvokeResponse)(nil)).Elem()
}

func (o GpuResourceInvokeResponseOutput) ToGpuResourceInvokeResponseOutput() GpuResourceInvokeResponseOutput {
	return o
}

func (o GpuResourceInvokeResponseOutput) ToGpuResourceInvokeResponseOutputWithContext(ctx context.Context) GpuResourceInvokeResponseOutput {
	return o
}

func (o GpuResourceInvokeResponseOutput) ToGpuResourceInvokeResponsePtrOutput() GpuResourceInvokeResponsePtrOutput {
	return o.ToGpuResourceInvokeResponsePtrOutputWithContext(context.Background())
}

func (o GpuResourceInvokeResponseOutput) ToGpuResourceInvokeResponsePtrOutputWithContext(ctx context.Context) GpuResourceInvokeResponsePtrOutput {
	return o.ApplyT(func(v GpuResourceInvokeResponse) *GpuResourceInvokeResponse {
		return &v
	}).(GpuResourceInvokeResponsePtrOutput)
}

// The count of the GPU resource.
func (o GpuResourceInvokeResponseOutput) Count() pulumi.IntOutput {
	return o.ApplyT(func(v GpuResourceInvokeResponse) int { return v.Count }).(pulumi.IntOutput)
}

// The SKU of the GPU resource.
func (o GpuResourceInvokeResponseOutput) Sku() pulumi.StringOutput {
	return o.ApplyT(func(v GpuResourceInvokeResponse) string { return v.Sku }).(pulumi.StringOutput)
}

type GpuResourceInvokeResponsePtrOutput struct{ *pulumi.OutputState }

func (GpuResourceInvokeResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GpuResourceInvokeResponse)(nil)).Elem()
}

func (o GpuResourceInvokeResponsePtrOutput) ToGpuResourceInvokeResponsePtrOutput() GpuResourceInvokeResponsePtrOutput {
	return o
}

func (o GpuResourceInvokeResponsePtrOutput) ToGpuResourceInvokeResponsePtrOutputWithContext(ctx context.Context) GpuResourceInvokeResponsePtrOutput {
	return o
}

func (o GpuResourceInvokeResponsePtrOutput) Elem() GpuResourceInvokeResponseOutput {
	return o.ApplyT(func(v *GpuResourceInvokeResponse) GpuResourceInvokeResponse { return *v }).(GpuResourceInvokeResponseOutput)
}

// The count of the GPU resource.
func (o GpuResourceInvokeResponsePtrOutput) Count() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *GpuResourceInvokeResponse) *int {
		if v == nil {
			return nil
		}
		return &v.Count
	}).(pulumi.IntPtrOutput)
}

// The SKU of the GPU resource.
func (o GpuResourceInvokeResponsePtrOutput) Sku() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GpuResourceInvokeResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Sku
	}).(pulumi.StringPtrOutput)
}

// The GPU resource.
type GpuResourceResponse struct {
	// The count of the GPU resource.
	Count int `pulumi:"count"`
	// The SKU of the GPU resource.
	Sku string `pulumi:"sku"`
}

// GpuResourceResponseInput is an input type that accepts GpuResourceResponseArgs and GpuResourceResponseOutput values.
// You can construct a concrete instance of `GpuResourceResponseInput` via:
//
//          GpuResourceResponseArgs{...}
type GpuResourceResponseInput interface {
	pulumi.Input

	ToGpuResourceResponseOutput() GpuResourceResponseOutput
	ToGpuResourceResponseOutputWithContext(context.Context) GpuResourceResponseOutput
}

// The GPU resource.
type GpuResourceResponseArgs struct {
	// The count of the GPU resource.
	Count pulumi.IntInput `pulumi:"count"`
	// The SKU of the GPU resource.
	Sku pulumi.StringInput `pulumi:"sku"`
}

func (GpuResourceResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GpuResourceResponse)(nil)).Elem()
}

func (i GpuResourceResponseArgs) ToGpuResourceResponseOutput() GpuResourceResponseOutput {
	return i.ToGpuResourceResponseOutputWithContext(context.Background())
}

func (i GpuResourceResponseArgs) ToGpuResourceResponseOutputWithContext(ctx context.Context) GpuResourceResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GpuResourceResponseOutput)
}

func (i GpuResourceResponseArgs) ToGpuResourceResponsePtrOutput() GpuResourceResponsePtrOutput {
	return i.ToGpuResourceResponsePtrOutputWithContext(context.Background())
}

func (i GpuResourceResponseArgs) ToGpuResourceResponsePtrOutputWithContext(ctx context.Context) GpuResourceResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GpuResourceResponseOutput).ToGpuResourceResponsePtrOutputWithContext(ctx)
}

// GpuResourceResponsePtrInput is an input type that accepts GpuResourceResponseArgs, GpuResourceResponsePtr and GpuResourceResponsePtrOutput values.
// You can construct a concrete instance of `GpuResourceResponsePtrInput` via:
//
//          GpuResourceResponseArgs{...}
//
//  or:
//
//          nil
type GpuResourceResponsePtrInput interface {
	pulumi.Input

	ToGpuResourceResponsePtrOutput() GpuResourceResponsePtrOutput
	ToGpuResourceResponsePtrOutputWithContext(context.Context) GpuResourceResponsePtrOutput
}

type gpuResourceResponsePtrType GpuResourceResponseArgs

func GpuResourceResponsePtr(v *GpuResourceResponseArgs) GpuResourceResponsePtrInput {
	return (*gpuResourceResponsePtrType)(v)
}

func (*gpuResourceResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GpuResourceResponse)(nil)).Elem()
}

func (i *gpuResourceResponsePtrType) ToGpuResourceResponsePtrOutput() GpuResourceResponsePtrOutput {
	return i.ToGpuResourceResponsePtrOutputWithContext(context.Background())
}

func (i *gpuResourceResponsePtrType) ToGpuResourceResponsePtrOutputWithContext(ctx context.Context) GpuResourceResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GpuResourceResponsePtrOutput)
}

// The GPU resource.
type GpuResourceResponseOutput struct{ *pulumi.OutputState }

func (GpuResourceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GpuResourceResponse)(nil)).Elem()
}

func (o GpuResourceResponseOutput) ToGpuResourceResponseOutput() GpuResourceResponseOutput {
	return o
}

func (o GpuResourceResponseOutput) ToGpuResourceResponseOutputWithContext(ctx context.Context) GpuResourceResponseOutput {
	return o
}

func (o GpuResourceResponseOutput) ToGpuResourceResponsePtrOutput() GpuResourceResponsePtrOutput {
	return o.ToGpuResourceResponsePtrOutputWithContext(context.Background())
}

func (o GpuResourceResponseOutput) ToGpuResourceResponsePtrOutputWithContext(ctx context.Context) GpuResourceResponsePtrOutput {
	return o.ApplyT(func(v GpuResourceResponse) *GpuResourceResponse {
		return &v
	}).(GpuResourceResponsePtrOutput)
}

// The count of the GPU resource.
func (o GpuResourceResponseOutput) Count() pulumi.IntOutput {
	return o.ApplyT(func(v GpuResourceResponse) int { return v.Count }).(pulumi.IntOutput)
}

// The SKU of the GPU resource.
func (o GpuResourceResponseOutput) Sku() pulumi.StringOutput {
	return o.ApplyT(func(v GpuResourceResponse) string { return v.Sku }).(pulumi.StringOutput)
}

type GpuResourceResponsePtrOutput struct{ *pulumi.OutputState }

func (GpuResourceResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GpuResourceResponse)(nil)).Elem()
}

func (o GpuResourceResponsePtrOutput) ToGpuResourceResponsePtrOutput() GpuResourceResponsePtrOutput {
	return o
}

func (o GpuResourceResponsePtrOutput) ToGpuResourceResponsePtrOutputWithContext(ctx context.Context) GpuResourceResponsePtrOutput {
	return o
}

func (o GpuResourceResponsePtrOutput) Elem() GpuResourceResponseOutput {
	return o.ApplyT(func(v *GpuResourceResponse) GpuResourceResponse { return *v }).(GpuResourceResponseOutput)
}

// The count of the GPU resource.
func (o GpuResourceResponsePtrOutput) Count() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *GpuResourceResponse) *int {
		if v == nil {
			return nil
		}
		return &v.Count
	}).(pulumi.IntPtrOutput)
}

// The SKU of the GPU resource.
func (o GpuResourceResponsePtrOutput) Sku() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GpuResourceResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Sku
	}).(pulumi.StringPtrOutput)
}

// Image registry credential.
type ImageRegistryCredential struct {
	// The password for the private registry.
	Password *string `pulumi:"password"`
	// The Docker image registry server without a protocol such as "http" and "https".
	Server string `pulumi:"server"`
	// The username for the private registry.
	Username string `pulumi:"username"`
}

// ImageRegistryCredentialInput is an input type that accepts ImageRegistryCredentialArgs and ImageRegistryCredentialOutput values.
// You can construct a concrete instance of `ImageRegistryCredentialInput` via:
//
//          ImageRegistryCredentialArgs{...}
type ImageRegistryCredentialInput interface {
	pulumi.Input

	ToImageRegistryCredentialOutput() ImageRegistryCredentialOutput
	ToImageRegistryCredentialOutputWithContext(context.Context) ImageRegistryCredentialOutput
}

// Image registry credential.
type ImageRegistryCredentialArgs struct {
	// The password for the private registry.
	Password pulumi.StringPtrInput `pulumi:"password"`
	// The Docker image registry server without a protocol such as "http" and "https".
	Server pulumi.StringInput `pulumi:"server"`
	// The username for the private registry.
	Username pulumi.StringInput `pulumi:"username"`
}

func (ImageRegistryCredentialArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ImageRegistryCredential)(nil)).Elem()
}

func (i ImageRegistryCredentialArgs) ToImageRegistryCredentialOutput() ImageRegistryCredentialOutput {
	return i.ToImageRegistryCredentialOutputWithContext(context.Background())
}

func (i ImageRegistryCredentialArgs) ToImageRegistryCredentialOutputWithContext(ctx context.Context) ImageRegistryCredentialOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageRegistryCredentialOutput)
}

// ImageRegistryCredentialArrayInput is an input type that accepts ImageRegistryCredentialArray and ImageRegistryCredentialArrayOutput values.
// You can construct a concrete instance of `ImageRegistryCredentialArrayInput` via:
//
//          ImageRegistryCredentialArray{ ImageRegistryCredentialArgs{...} }
type ImageRegistryCredentialArrayInput interface {
	pulumi.Input

	ToImageRegistryCredentialArrayOutput() ImageRegistryCredentialArrayOutput
	ToImageRegistryCredentialArrayOutputWithContext(context.Context) ImageRegistryCredentialArrayOutput
}

type ImageRegistryCredentialArray []ImageRegistryCredentialInput

func (ImageRegistryCredentialArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ImageRegistryCredential)(nil)).Elem()
}

func (i ImageRegistryCredentialArray) ToImageRegistryCredentialArrayOutput() ImageRegistryCredentialArrayOutput {
	return i.ToImageRegistryCredentialArrayOutputWithContext(context.Background())
}

func (i ImageRegistryCredentialArray) ToImageRegistryCredentialArrayOutputWithContext(ctx context.Context) ImageRegistryCredentialArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageRegistryCredentialArrayOutput)
}

// Image registry credential.
type ImageRegistryCredentialOutput struct{ *pulumi.OutputState }

func (ImageRegistryCredentialOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ImageRegistryCredential)(nil)).Elem()
}

func (o ImageRegistryCredentialOutput) ToImageRegistryCredentialOutput() ImageRegistryCredentialOutput {
	return o
}

func (o ImageRegistryCredentialOutput) ToImageRegistryCredentialOutputWithContext(ctx context.Context) ImageRegistryCredentialOutput {
	return o
}

// The password for the private registry.
func (o ImageRegistryCredentialOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageRegistryCredential) *string { return v.Password }).(pulumi.StringPtrOutput)
}

// The Docker image registry server without a protocol such as "http" and "https".
func (o ImageRegistryCredentialOutput) Server() pulumi.StringOutput {
	return o.ApplyT(func(v ImageRegistryCredential) string { return v.Server }).(pulumi.StringOutput)
}

// The username for the private registry.
func (o ImageRegistryCredentialOutput) Username() pulumi.StringOutput {
	return o.ApplyT(func(v ImageRegistryCredential) string { return v.Username }).(pulumi.StringOutput)
}

type ImageRegistryCredentialArrayOutput struct{ *pulumi.OutputState }

func (ImageRegistryCredentialArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ImageRegistryCredential)(nil)).Elem()
}

func (o ImageRegistryCredentialArrayOutput) ToImageRegistryCredentialArrayOutput() ImageRegistryCredentialArrayOutput {
	return o
}

func (o ImageRegistryCredentialArrayOutput) ToImageRegistryCredentialArrayOutputWithContext(ctx context.Context) ImageRegistryCredentialArrayOutput {
	return o
}

func (o ImageRegistryCredentialArrayOutput) Index(i pulumi.IntInput) ImageRegistryCredentialOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ImageRegistryCredential {
		return vs[0].([]ImageRegistryCredential)[vs[1].(int)]
	}).(ImageRegistryCredentialOutput)
}

// Image registry credential.
type ImageRegistryCredentialInvokeResponse struct {
	// The password for the private registry.
	Password *string `pulumi:"password"`
	// The Docker image registry server without a protocol such as "http" and "https".
	Server string `pulumi:"server"`
	// The username for the private registry.
	Username string `pulumi:"username"`
}

// ImageRegistryCredentialInvokeResponseInput is an input type that accepts ImageRegistryCredentialInvokeResponseArgs and ImageRegistryCredentialInvokeResponseOutput values.
// You can construct a concrete instance of `ImageRegistryCredentialInvokeResponseInput` via:
//
//          ImageRegistryCredentialInvokeResponseArgs{...}
type ImageRegistryCredentialInvokeResponseInput interface {
	pulumi.Input

	ToImageRegistryCredentialInvokeResponseOutput() ImageRegistryCredentialInvokeResponseOutput
	ToImageRegistryCredentialInvokeResponseOutputWithContext(context.Context) ImageRegistryCredentialInvokeResponseOutput
}

// Image registry credential.
type ImageRegistryCredentialInvokeResponseArgs struct {
	// The password for the private registry.
	Password pulumi.StringPtrInput `pulumi:"password"`
	// The Docker image registry server without a protocol such as "http" and "https".
	Server pulumi.StringInput `pulumi:"server"`
	// The username for the private registry.
	Username pulumi.StringInput `pulumi:"username"`
}

func (ImageRegistryCredentialInvokeResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ImageRegistryCredentialInvokeResponse)(nil)).Elem()
}

func (i ImageRegistryCredentialInvokeResponseArgs) ToImageRegistryCredentialInvokeResponseOutput() ImageRegistryCredentialInvokeResponseOutput {
	return i.ToImageRegistryCredentialInvokeResponseOutputWithContext(context.Background())
}

func (i ImageRegistryCredentialInvokeResponseArgs) ToImageRegistryCredentialInvokeResponseOutputWithContext(ctx context.Context) ImageRegistryCredentialInvokeResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageRegistryCredentialInvokeResponseOutput)
}

// ImageRegistryCredentialInvokeResponseArrayInput is an input type that accepts ImageRegistryCredentialInvokeResponseArray and ImageRegistryCredentialInvokeResponseArrayOutput values.
// You can construct a concrete instance of `ImageRegistryCredentialInvokeResponseArrayInput` via:
//
//          ImageRegistryCredentialInvokeResponseArray{ ImageRegistryCredentialInvokeResponseArgs{...} }
type ImageRegistryCredentialInvokeResponseArrayInput interface {
	pulumi.Input

	ToImageRegistryCredentialInvokeResponseArrayOutput() ImageRegistryCredentialInvokeResponseArrayOutput
	ToImageRegistryCredentialInvokeResponseArrayOutputWithContext(context.Context) ImageRegistryCredentialInvokeResponseArrayOutput
}

type ImageRegistryCredentialInvokeResponseArray []ImageRegistryCredentialInvokeResponseInput

func (ImageRegistryCredentialInvokeResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ImageRegistryCredentialInvokeResponse)(nil)).Elem()
}

func (i ImageRegistryCredentialInvokeResponseArray) ToImageRegistryCredentialInvokeResponseArrayOutput() ImageRegistryCredentialInvokeResponseArrayOutput {
	return i.ToImageRegistryCredentialInvokeResponseArrayOutputWithContext(context.Background())
}

func (i ImageRegistryCredentialInvokeResponseArray) ToImageRegistryCredentialInvokeResponseArrayOutputWithContext(ctx context.Context) ImageRegistryCredentialInvokeResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageRegistryCredentialInvokeResponseArrayOutput)
}

// Image registry credential.
type ImageRegistryCredentialInvokeResponseOutput struct{ *pulumi.OutputState }

func (ImageRegistryCredentialInvokeResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ImageRegistryCredentialInvokeResponse)(nil)).Elem()
}

func (o ImageRegistryCredentialInvokeResponseOutput) ToImageRegistryCredentialInvokeResponseOutput() ImageRegistryCredentialInvokeResponseOutput {
	return o
}

func (o ImageRegistryCredentialInvokeResponseOutput) ToImageRegistryCredentialInvokeResponseOutputWithContext(ctx context.Context) ImageRegistryCredentialInvokeResponseOutput {
	return o
}

// The password for the private registry.
func (o ImageRegistryCredentialInvokeResponseOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageRegistryCredentialInvokeResponse) *string { return v.Password }).(pulumi.StringPtrOutput)
}

// The Docker image registry server without a protocol such as "http" and "https".
func (o ImageRegistryCredentialInvokeResponseOutput) Server() pulumi.StringOutput {
	return o.ApplyT(func(v ImageRegistryCredentialInvokeResponse) string { return v.Server }).(pulumi.StringOutput)
}

// The username for the private registry.
func (o ImageRegistryCredentialInvokeResponseOutput) Username() pulumi.StringOutput {
	return o.ApplyT(func(v ImageRegistryCredentialInvokeResponse) string { return v.Username }).(pulumi.StringOutput)
}

type ImageRegistryCredentialInvokeResponseArrayOutput struct{ *pulumi.OutputState }

func (ImageRegistryCredentialInvokeResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ImageRegistryCredentialInvokeResponse)(nil)).Elem()
}

func (o ImageRegistryCredentialInvokeResponseArrayOutput) ToImageRegistryCredentialInvokeResponseArrayOutput() ImageRegistryCredentialInvokeResponseArrayOutput {
	return o
}

func (o ImageRegistryCredentialInvokeResponseArrayOutput) ToImageRegistryCredentialInvokeResponseArrayOutputWithContext(ctx context.Context) ImageRegistryCredentialInvokeResponseArrayOutput {
	return o
}

func (o ImageRegistryCredentialInvokeResponseArrayOutput) Index(i pulumi.IntInput) ImageRegistryCredentialInvokeResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ImageRegistryCredentialInvokeResponse {
		return vs[0].([]ImageRegistryCredentialInvokeResponse)[vs[1].(int)]
	}).(ImageRegistryCredentialInvokeResponseOutput)
}

// Image registry credential.
type ImageRegistryCredentialResponse struct {
	// The password for the private registry.
	Password *string `pulumi:"password"`
	// The Docker image registry server without a protocol such as "http" and "https".
	Server string `pulumi:"server"`
	// The username for the private registry.
	Username string `pulumi:"username"`
}

// ImageRegistryCredentialResponseInput is an input type that accepts ImageRegistryCredentialResponseArgs and ImageRegistryCredentialResponseOutput values.
// You can construct a concrete instance of `ImageRegistryCredentialResponseInput` via:
//
//          ImageRegistryCredentialResponseArgs{...}
type ImageRegistryCredentialResponseInput interface {
	pulumi.Input

	ToImageRegistryCredentialResponseOutput() ImageRegistryCredentialResponseOutput
	ToImageRegistryCredentialResponseOutputWithContext(context.Context) ImageRegistryCredentialResponseOutput
}

// Image registry credential.
type ImageRegistryCredentialResponseArgs struct {
	// The password for the private registry.
	Password pulumi.StringPtrInput `pulumi:"password"`
	// The Docker image registry server without a protocol such as "http" and "https".
	Server pulumi.StringInput `pulumi:"server"`
	// The username for the private registry.
	Username pulumi.StringInput `pulumi:"username"`
}

func (ImageRegistryCredentialResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ImageRegistryCredentialResponse)(nil)).Elem()
}

func (i ImageRegistryCredentialResponseArgs) ToImageRegistryCredentialResponseOutput() ImageRegistryCredentialResponseOutput {
	return i.ToImageRegistryCredentialResponseOutputWithContext(context.Background())
}

func (i ImageRegistryCredentialResponseArgs) ToImageRegistryCredentialResponseOutputWithContext(ctx context.Context) ImageRegistryCredentialResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageRegistryCredentialResponseOutput)
}

// ImageRegistryCredentialResponseArrayInput is an input type that accepts ImageRegistryCredentialResponseArray and ImageRegistryCredentialResponseArrayOutput values.
// You can construct a concrete instance of `ImageRegistryCredentialResponseArrayInput` via:
//
//          ImageRegistryCredentialResponseArray{ ImageRegistryCredentialResponseArgs{...} }
type ImageRegistryCredentialResponseArrayInput interface {
	pulumi.Input

	ToImageRegistryCredentialResponseArrayOutput() ImageRegistryCredentialResponseArrayOutput
	ToImageRegistryCredentialResponseArrayOutputWithContext(context.Context) ImageRegistryCredentialResponseArrayOutput
}

type ImageRegistryCredentialResponseArray []ImageRegistryCredentialResponseInput

func (ImageRegistryCredentialResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ImageRegistryCredentialResponse)(nil)).Elem()
}

func (i ImageRegistryCredentialResponseArray) ToImageRegistryCredentialResponseArrayOutput() ImageRegistryCredentialResponseArrayOutput {
	return i.ToImageRegistryCredentialResponseArrayOutputWithContext(context.Background())
}

func (i ImageRegistryCredentialResponseArray) ToImageRegistryCredentialResponseArrayOutputWithContext(ctx context.Context) ImageRegistryCredentialResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageRegistryCredentialResponseArrayOutput)
}

// Image registry credential.
type ImageRegistryCredentialResponseOutput struct{ *pulumi.OutputState }

func (ImageRegistryCredentialResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ImageRegistryCredentialResponse)(nil)).Elem()
}

func (o ImageRegistryCredentialResponseOutput) ToImageRegistryCredentialResponseOutput() ImageRegistryCredentialResponseOutput {
	return o
}

func (o ImageRegistryCredentialResponseOutput) ToImageRegistryCredentialResponseOutputWithContext(ctx context.Context) ImageRegistryCredentialResponseOutput {
	return o
}

// The password for the private registry.
func (o ImageRegistryCredentialResponseOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageRegistryCredentialResponse) *string { return v.Password }).(pulumi.StringPtrOutput)
}

// The Docker image registry server without a protocol such as "http" and "https".
func (o ImageRegistryCredentialResponseOutput) Server() pulumi.StringOutput {
	return o.ApplyT(func(v ImageRegistryCredentialResponse) string { return v.Server }).(pulumi.StringOutput)
}

// The username for the private registry.
func (o ImageRegistryCredentialResponseOutput) Username() pulumi.StringOutput {
	return o.ApplyT(func(v ImageRegistryCredentialResponse) string { return v.Username }).(pulumi.StringOutput)
}

type ImageRegistryCredentialResponseArrayOutput struct{ *pulumi.OutputState }

func (ImageRegistryCredentialResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ImageRegistryCredentialResponse)(nil)).Elem()
}

func (o ImageRegistryCredentialResponseArrayOutput) ToImageRegistryCredentialResponseArrayOutput() ImageRegistryCredentialResponseArrayOutput {
	return o
}

func (o ImageRegistryCredentialResponseArrayOutput) ToImageRegistryCredentialResponseArrayOutputWithContext(ctx context.Context) ImageRegistryCredentialResponseArrayOutput {
	return o
}

func (o ImageRegistryCredentialResponseArrayOutput) Index(i pulumi.IntInput) ImageRegistryCredentialResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ImageRegistryCredentialResponse {
		return vs[0].([]ImageRegistryCredentialResponse)[vs[1].(int)]
	}).(ImageRegistryCredentialResponseOutput)
}

// IP address for the container group.
type IpAddress struct {
	// The Dns name label for the IP.
	DnsNameLabel *string `pulumi:"dnsNameLabel"`
	// The IP exposed to the public internet.
	Ip *string `pulumi:"ip"`
	// The list of ports exposed on the container group.
	Ports []Port `pulumi:"ports"`
	// Specifies if the IP is exposed to the public internet or private VNET.
	Type string `pulumi:"type"`
}

// IpAddressInput is an input type that accepts IpAddressArgs and IpAddressOutput values.
// You can construct a concrete instance of `IpAddressInput` via:
//
//          IpAddressArgs{...}
type IpAddressInput interface {
	pulumi.Input

	ToIpAddressOutput() IpAddressOutput
	ToIpAddressOutputWithContext(context.Context) IpAddressOutput
}

// IP address for the container group.
type IpAddressArgs struct {
	// The Dns name label for the IP.
	DnsNameLabel pulumi.StringPtrInput `pulumi:"dnsNameLabel"`
	// The IP exposed to the public internet.
	Ip pulumi.StringPtrInput `pulumi:"ip"`
	// The list of ports exposed on the container group.
	Ports PortArrayInput `pulumi:"ports"`
	// Specifies if the IP is exposed to the public internet or private VNET.
	Type pulumi.StringInput `pulumi:"type"`
}

func (IpAddressArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*IpAddress)(nil)).Elem()
}

func (i IpAddressArgs) ToIpAddressOutput() IpAddressOutput {
	return i.ToIpAddressOutputWithContext(context.Background())
}

func (i IpAddressArgs) ToIpAddressOutputWithContext(ctx context.Context) IpAddressOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IpAddressOutput)
}

func (i IpAddressArgs) ToIpAddressPtrOutput() IpAddressPtrOutput {
	return i.ToIpAddressPtrOutputWithContext(context.Background())
}

func (i IpAddressArgs) ToIpAddressPtrOutputWithContext(ctx context.Context) IpAddressPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IpAddressOutput).ToIpAddressPtrOutputWithContext(ctx)
}

// IpAddressPtrInput is an input type that accepts IpAddressArgs, IpAddressPtr and IpAddressPtrOutput values.
// You can construct a concrete instance of `IpAddressPtrInput` via:
//
//          IpAddressArgs{...}
//
//  or:
//
//          nil
type IpAddressPtrInput interface {
	pulumi.Input

	ToIpAddressPtrOutput() IpAddressPtrOutput
	ToIpAddressPtrOutputWithContext(context.Context) IpAddressPtrOutput
}

type ipAddressPtrType IpAddressArgs

func IpAddressPtr(v *IpAddressArgs) IpAddressPtrInput {
	return (*ipAddressPtrType)(v)
}

func (*ipAddressPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**IpAddress)(nil)).Elem()
}

func (i *ipAddressPtrType) ToIpAddressPtrOutput() IpAddressPtrOutput {
	return i.ToIpAddressPtrOutputWithContext(context.Background())
}

func (i *ipAddressPtrType) ToIpAddressPtrOutputWithContext(ctx context.Context) IpAddressPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IpAddressPtrOutput)
}

// IP address for the container group.
type IpAddressOutput struct{ *pulumi.OutputState }

func (IpAddressOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IpAddress)(nil)).Elem()
}

func (o IpAddressOutput) ToIpAddressOutput() IpAddressOutput {
	return o
}

func (o IpAddressOutput) ToIpAddressOutputWithContext(ctx context.Context) IpAddressOutput {
	return o
}

func (o IpAddressOutput) ToIpAddressPtrOutput() IpAddressPtrOutput {
	return o.ToIpAddressPtrOutputWithContext(context.Background())
}

func (o IpAddressOutput) ToIpAddressPtrOutputWithContext(ctx context.Context) IpAddressPtrOutput {
	return o.ApplyT(func(v IpAddress) *IpAddress {
		return &v
	}).(IpAddressPtrOutput)
}

// The Dns name label for the IP.
func (o IpAddressOutput) DnsNameLabel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IpAddress) *string { return v.DnsNameLabel }).(pulumi.StringPtrOutput)
}

// The IP exposed to the public internet.
func (o IpAddressOutput) Ip() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IpAddress) *string { return v.Ip }).(pulumi.StringPtrOutput)
}

// The list of ports exposed on the container group.
func (o IpAddressOutput) Ports() PortArrayOutput {
	return o.ApplyT(func(v IpAddress) []Port { return v.Ports }).(PortArrayOutput)
}

// Specifies if the IP is exposed to the public internet or private VNET.
func (o IpAddressOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v IpAddress) string { return v.Type }).(pulumi.StringOutput)
}

type IpAddressPtrOutput struct{ *pulumi.OutputState }

func (IpAddressPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**IpAddress)(nil)).Elem()
}

func (o IpAddressPtrOutput) ToIpAddressPtrOutput() IpAddressPtrOutput {
	return o
}

func (o IpAddressPtrOutput) ToIpAddressPtrOutputWithContext(ctx context.Context) IpAddressPtrOutput {
	return o
}

func (o IpAddressPtrOutput) Elem() IpAddressOutput {
	return o.ApplyT(func(v *IpAddress) IpAddress { return *v }).(IpAddressOutput)
}

// The Dns name label for the IP.
func (o IpAddressPtrOutput) DnsNameLabel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IpAddress) *string {
		if v == nil {
			return nil
		}
		return v.DnsNameLabel
	}).(pulumi.StringPtrOutput)
}

// The IP exposed to the public internet.
func (o IpAddressPtrOutput) Ip() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IpAddress) *string {
		if v == nil {
			return nil
		}
		return v.Ip
	}).(pulumi.StringPtrOutput)
}

// The list of ports exposed on the container group.
func (o IpAddressPtrOutput) Ports() PortArrayOutput {
	return o.ApplyT(func(v *IpAddress) []Port {
		if v == nil {
			return nil
		}
		return v.Ports
	}).(PortArrayOutput)
}

// Specifies if the IP is exposed to the public internet or private VNET.
func (o IpAddressPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IpAddress) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

// IP address for the container group.
type IpAddressInvokeResponse struct {
	// The Dns name label for the IP.
	DnsNameLabel *string `pulumi:"dnsNameLabel"`
	// The FQDN for the IP.
	Fqdn string `pulumi:"fqdn"`
	// The IP exposed to the public internet.
	Ip *string `pulumi:"ip"`
	// The list of ports exposed on the container group.
	Ports []PortInvokeResponse `pulumi:"ports"`
	// Specifies if the IP is exposed to the public internet or private VNET.
	Type string `pulumi:"type"`
}

// IpAddressInvokeResponseInput is an input type that accepts IpAddressInvokeResponseArgs and IpAddressInvokeResponseOutput values.
// You can construct a concrete instance of `IpAddressInvokeResponseInput` via:
//
//          IpAddressInvokeResponseArgs{...}
type IpAddressInvokeResponseInput interface {
	pulumi.Input

	ToIpAddressInvokeResponseOutput() IpAddressInvokeResponseOutput
	ToIpAddressInvokeResponseOutputWithContext(context.Context) IpAddressInvokeResponseOutput
}

// IP address for the container group.
type IpAddressInvokeResponseArgs struct {
	// The Dns name label for the IP.
	DnsNameLabel pulumi.StringPtrInput `pulumi:"dnsNameLabel"`
	// The FQDN for the IP.
	Fqdn pulumi.StringInput `pulumi:"fqdn"`
	// The IP exposed to the public internet.
	Ip pulumi.StringPtrInput `pulumi:"ip"`
	// The list of ports exposed on the container group.
	Ports PortInvokeResponseArrayInput `pulumi:"ports"`
	// Specifies if the IP is exposed to the public internet or private VNET.
	Type pulumi.StringInput `pulumi:"type"`
}

func (IpAddressInvokeResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*IpAddressInvokeResponse)(nil)).Elem()
}

func (i IpAddressInvokeResponseArgs) ToIpAddressInvokeResponseOutput() IpAddressInvokeResponseOutput {
	return i.ToIpAddressInvokeResponseOutputWithContext(context.Background())
}

func (i IpAddressInvokeResponseArgs) ToIpAddressInvokeResponseOutputWithContext(ctx context.Context) IpAddressInvokeResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IpAddressInvokeResponseOutput)
}

// IP address for the container group.
type IpAddressInvokeResponseOutput struct{ *pulumi.OutputState }

func (IpAddressInvokeResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IpAddressInvokeResponse)(nil)).Elem()
}

func (o IpAddressInvokeResponseOutput) ToIpAddressInvokeResponseOutput() IpAddressInvokeResponseOutput {
	return o
}

func (o IpAddressInvokeResponseOutput) ToIpAddressInvokeResponseOutputWithContext(ctx context.Context) IpAddressInvokeResponseOutput {
	return o
}

// The Dns name label for the IP.
func (o IpAddressInvokeResponseOutput) DnsNameLabel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IpAddressInvokeResponse) *string { return v.DnsNameLabel }).(pulumi.StringPtrOutput)
}

// The FQDN for the IP.
func (o IpAddressInvokeResponseOutput) Fqdn() pulumi.StringOutput {
	return o.ApplyT(func(v IpAddressInvokeResponse) string { return v.Fqdn }).(pulumi.StringOutput)
}

// The IP exposed to the public internet.
func (o IpAddressInvokeResponseOutput) Ip() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IpAddressInvokeResponse) *string { return v.Ip }).(pulumi.StringPtrOutput)
}

// The list of ports exposed on the container group.
func (o IpAddressInvokeResponseOutput) Ports() PortInvokeResponseArrayOutput {
	return o.ApplyT(func(v IpAddressInvokeResponse) []PortInvokeResponse { return v.Ports }).(PortInvokeResponseArrayOutput)
}

// Specifies if the IP is exposed to the public internet or private VNET.
func (o IpAddressInvokeResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v IpAddressInvokeResponse) string { return v.Type }).(pulumi.StringOutput)
}

// IP address for the container group.
type IpAddressResponse struct {
	// The Dns name label for the IP.
	DnsNameLabel *string `pulumi:"dnsNameLabel"`
	// The FQDN for the IP.
	Fqdn string `pulumi:"fqdn"`
	// The IP exposed to the public internet.
	Ip *string `pulumi:"ip"`
	// The list of ports exposed on the container group.
	Ports []PortResponse `pulumi:"ports"`
	// Specifies if the IP is exposed to the public internet or private VNET.
	Type string `pulumi:"type"`
}

// IpAddressResponseInput is an input type that accepts IpAddressResponseArgs and IpAddressResponseOutput values.
// You can construct a concrete instance of `IpAddressResponseInput` via:
//
//          IpAddressResponseArgs{...}
type IpAddressResponseInput interface {
	pulumi.Input

	ToIpAddressResponseOutput() IpAddressResponseOutput
	ToIpAddressResponseOutputWithContext(context.Context) IpAddressResponseOutput
}

// IP address for the container group.
type IpAddressResponseArgs struct {
	// The Dns name label for the IP.
	DnsNameLabel pulumi.StringPtrInput `pulumi:"dnsNameLabel"`
	// The FQDN for the IP.
	Fqdn pulumi.StringInput `pulumi:"fqdn"`
	// The IP exposed to the public internet.
	Ip pulumi.StringPtrInput `pulumi:"ip"`
	// The list of ports exposed on the container group.
	Ports PortResponseArrayInput `pulumi:"ports"`
	// Specifies if the IP is exposed to the public internet or private VNET.
	Type pulumi.StringInput `pulumi:"type"`
}

func (IpAddressResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*IpAddressResponse)(nil)).Elem()
}

func (i IpAddressResponseArgs) ToIpAddressResponseOutput() IpAddressResponseOutput {
	return i.ToIpAddressResponseOutputWithContext(context.Background())
}

func (i IpAddressResponseArgs) ToIpAddressResponseOutputWithContext(ctx context.Context) IpAddressResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IpAddressResponseOutput)
}

func (i IpAddressResponseArgs) ToIpAddressResponsePtrOutput() IpAddressResponsePtrOutput {
	return i.ToIpAddressResponsePtrOutputWithContext(context.Background())
}

func (i IpAddressResponseArgs) ToIpAddressResponsePtrOutputWithContext(ctx context.Context) IpAddressResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IpAddressResponseOutput).ToIpAddressResponsePtrOutputWithContext(ctx)
}

// IpAddressResponsePtrInput is an input type that accepts IpAddressResponseArgs, IpAddressResponsePtr and IpAddressResponsePtrOutput values.
// You can construct a concrete instance of `IpAddressResponsePtrInput` via:
//
//          IpAddressResponseArgs{...}
//
//  or:
//
//          nil
type IpAddressResponsePtrInput interface {
	pulumi.Input

	ToIpAddressResponsePtrOutput() IpAddressResponsePtrOutput
	ToIpAddressResponsePtrOutputWithContext(context.Context) IpAddressResponsePtrOutput
}

type ipAddressResponsePtrType IpAddressResponseArgs

func IpAddressResponsePtr(v *IpAddressResponseArgs) IpAddressResponsePtrInput {
	return (*ipAddressResponsePtrType)(v)
}

func (*ipAddressResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**IpAddressResponse)(nil)).Elem()
}

func (i *ipAddressResponsePtrType) ToIpAddressResponsePtrOutput() IpAddressResponsePtrOutput {
	return i.ToIpAddressResponsePtrOutputWithContext(context.Background())
}

func (i *ipAddressResponsePtrType) ToIpAddressResponsePtrOutputWithContext(ctx context.Context) IpAddressResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IpAddressResponsePtrOutput)
}

// IP address for the container group.
type IpAddressResponseOutput struct{ *pulumi.OutputState }

func (IpAddressResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IpAddressResponse)(nil)).Elem()
}

func (o IpAddressResponseOutput) ToIpAddressResponseOutput() IpAddressResponseOutput {
	return o
}

func (o IpAddressResponseOutput) ToIpAddressResponseOutputWithContext(ctx context.Context) IpAddressResponseOutput {
	return o
}

func (o IpAddressResponseOutput) ToIpAddressResponsePtrOutput() IpAddressResponsePtrOutput {
	return o.ToIpAddressResponsePtrOutputWithContext(context.Background())
}

func (o IpAddressResponseOutput) ToIpAddressResponsePtrOutputWithContext(ctx context.Context) IpAddressResponsePtrOutput {
	return o.ApplyT(func(v IpAddressResponse) *IpAddressResponse {
		return &v
	}).(IpAddressResponsePtrOutput)
}

// The Dns name label for the IP.
func (o IpAddressResponseOutput) DnsNameLabel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IpAddressResponse) *string { return v.DnsNameLabel }).(pulumi.StringPtrOutput)
}

// The FQDN for the IP.
func (o IpAddressResponseOutput) Fqdn() pulumi.StringOutput {
	return o.ApplyT(func(v IpAddressResponse) string { return v.Fqdn }).(pulumi.StringOutput)
}

// The IP exposed to the public internet.
func (o IpAddressResponseOutput) Ip() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IpAddressResponse) *string { return v.Ip }).(pulumi.StringPtrOutput)
}

// The list of ports exposed on the container group.
func (o IpAddressResponseOutput) Ports() PortResponseArrayOutput {
	return o.ApplyT(func(v IpAddressResponse) []PortResponse { return v.Ports }).(PortResponseArrayOutput)
}

// Specifies if the IP is exposed to the public internet or private VNET.
func (o IpAddressResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v IpAddressResponse) string { return v.Type }).(pulumi.StringOutput)
}

type IpAddressResponsePtrOutput struct{ *pulumi.OutputState }

func (IpAddressResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**IpAddressResponse)(nil)).Elem()
}

func (o IpAddressResponsePtrOutput) ToIpAddressResponsePtrOutput() IpAddressResponsePtrOutput {
	return o
}

func (o IpAddressResponsePtrOutput) ToIpAddressResponsePtrOutputWithContext(ctx context.Context) IpAddressResponsePtrOutput {
	return o
}

func (o IpAddressResponsePtrOutput) Elem() IpAddressResponseOutput {
	return o.ApplyT(func(v *IpAddressResponse) IpAddressResponse { return *v }).(IpAddressResponseOutput)
}

// The Dns name label for the IP.
func (o IpAddressResponsePtrOutput) DnsNameLabel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IpAddressResponse) *string {
		if v == nil {
			return nil
		}
		return v.DnsNameLabel
	}).(pulumi.StringPtrOutput)
}

// The FQDN for the IP.
func (o IpAddressResponsePtrOutput) Fqdn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IpAddressResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Fqdn
	}).(pulumi.StringPtrOutput)
}

// The IP exposed to the public internet.
func (o IpAddressResponsePtrOutput) Ip() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IpAddressResponse) *string {
		if v == nil {
			return nil
		}
		return v.Ip
	}).(pulumi.StringPtrOutput)
}

// The list of ports exposed on the container group.
func (o IpAddressResponsePtrOutput) Ports() PortResponseArrayOutput {
	return o.ApplyT(func(v *IpAddressResponse) []PortResponse {
		if v == nil {
			return nil
		}
		return v.Ports
	}).(PortResponseArrayOutput)
}

// Specifies if the IP is exposed to the public internet or private VNET.
func (o IpAddressResponsePtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IpAddressResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

// Container group log analytics information.
type LogAnalytics struct {
	// The log type to be used.
	LogType *string `pulumi:"logType"`
	// Metadata for log analytics.
	Metadata map[string]string `pulumi:"metadata"`
	// The workspace id for log analytics
	WorkspaceId string `pulumi:"workspaceId"`
	// The workspace key for log analytics
	WorkspaceKey string `pulumi:"workspaceKey"`
}

// LogAnalyticsInput is an input type that accepts LogAnalyticsArgs and LogAnalyticsOutput values.
// You can construct a concrete instance of `LogAnalyticsInput` via:
//
//          LogAnalyticsArgs{...}
type LogAnalyticsInput interface {
	pulumi.Input

	ToLogAnalyticsOutput() LogAnalyticsOutput
	ToLogAnalyticsOutputWithContext(context.Context) LogAnalyticsOutput
}

// Container group log analytics information.
type LogAnalyticsArgs struct {
	// The log type to be used.
	LogType pulumi.StringPtrInput `pulumi:"logType"`
	// Metadata for log analytics.
	Metadata pulumi.StringMapInput `pulumi:"metadata"`
	// The workspace id for log analytics
	WorkspaceId pulumi.StringInput `pulumi:"workspaceId"`
	// The workspace key for log analytics
	WorkspaceKey pulumi.StringInput `pulumi:"workspaceKey"`
}

func (LogAnalyticsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LogAnalytics)(nil)).Elem()
}

func (i LogAnalyticsArgs) ToLogAnalyticsOutput() LogAnalyticsOutput {
	return i.ToLogAnalyticsOutputWithContext(context.Background())
}

func (i LogAnalyticsArgs) ToLogAnalyticsOutputWithContext(ctx context.Context) LogAnalyticsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LogAnalyticsOutput)
}

func (i LogAnalyticsArgs) ToLogAnalyticsPtrOutput() LogAnalyticsPtrOutput {
	return i.ToLogAnalyticsPtrOutputWithContext(context.Background())
}

func (i LogAnalyticsArgs) ToLogAnalyticsPtrOutputWithContext(ctx context.Context) LogAnalyticsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LogAnalyticsOutput).ToLogAnalyticsPtrOutputWithContext(ctx)
}

// LogAnalyticsPtrInput is an input type that accepts LogAnalyticsArgs, LogAnalyticsPtr and LogAnalyticsPtrOutput values.
// You can construct a concrete instance of `LogAnalyticsPtrInput` via:
//
//          LogAnalyticsArgs{...}
//
//  or:
//
//          nil
type LogAnalyticsPtrInput interface {
	pulumi.Input

	ToLogAnalyticsPtrOutput() LogAnalyticsPtrOutput
	ToLogAnalyticsPtrOutputWithContext(context.Context) LogAnalyticsPtrOutput
}

type logAnalyticsPtrType LogAnalyticsArgs

func LogAnalyticsPtr(v *LogAnalyticsArgs) LogAnalyticsPtrInput {
	return (*logAnalyticsPtrType)(v)
}

func (*logAnalyticsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**LogAnalytics)(nil)).Elem()
}

func (i *logAnalyticsPtrType) ToLogAnalyticsPtrOutput() LogAnalyticsPtrOutput {
	return i.ToLogAnalyticsPtrOutputWithContext(context.Background())
}

func (i *logAnalyticsPtrType) ToLogAnalyticsPtrOutputWithContext(ctx context.Context) LogAnalyticsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LogAnalyticsPtrOutput)
}

// Container group log analytics information.
type LogAnalyticsOutput struct{ *pulumi.OutputState }

func (LogAnalyticsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LogAnalytics)(nil)).Elem()
}

func (o LogAnalyticsOutput) ToLogAnalyticsOutput() LogAnalyticsOutput {
	return o
}

func (o LogAnalyticsOutput) ToLogAnalyticsOutputWithContext(ctx context.Context) LogAnalyticsOutput {
	return o
}

func (o LogAnalyticsOutput) ToLogAnalyticsPtrOutput() LogAnalyticsPtrOutput {
	return o.ToLogAnalyticsPtrOutputWithContext(context.Background())
}

func (o LogAnalyticsOutput) ToLogAnalyticsPtrOutputWithContext(ctx context.Context) LogAnalyticsPtrOutput {
	return o.ApplyT(func(v LogAnalytics) *LogAnalytics {
		return &v
	}).(LogAnalyticsPtrOutput)
}

// The log type to be used.
func (o LogAnalyticsOutput) LogType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LogAnalytics) *string { return v.LogType }).(pulumi.StringPtrOutput)
}

// Metadata for log analytics.
func (o LogAnalyticsOutput) Metadata() pulumi.StringMapOutput {
	return o.ApplyT(func(v LogAnalytics) map[string]string { return v.Metadata }).(pulumi.StringMapOutput)
}

// The workspace id for log analytics
func (o LogAnalyticsOutput) WorkspaceId() pulumi.StringOutput {
	return o.ApplyT(func(v LogAnalytics) string { return v.WorkspaceId }).(pulumi.StringOutput)
}

// The workspace key for log analytics
func (o LogAnalyticsOutput) WorkspaceKey() pulumi.StringOutput {
	return o.ApplyT(func(v LogAnalytics) string { return v.WorkspaceKey }).(pulumi.StringOutput)
}

type LogAnalyticsPtrOutput struct{ *pulumi.OutputState }

func (LogAnalyticsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LogAnalytics)(nil)).Elem()
}

func (o LogAnalyticsPtrOutput) ToLogAnalyticsPtrOutput() LogAnalyticsPtrOutput {
	return o
}

func (o LogAnalyticsPtrOutput) ToLogAnalyticsPtrOutputWithContext(ctx context.Context) LogAnalyticsPtrOutput {
	return o
}

func (o LogAnalyticsPtrOutput) Elem() LogAnalyticsOutput {
	return o.ApplyT(func(v *LogAnalytics) LogAnalytics { return *v }).(LogAnalyticsOutput)
}

// The log type to be used.
func (o LogAnalyticsPtrOutput) LogType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LogAnalytics) *string {
		if v == nil {
			return nil
		}
		return v.LogType
	}).(pulumi.StringPtrOutput)
}

// Metadata for log analytics.
func (o LogAnalyticsPtrOutput) Metadata() pulumi.StringMapOutput {
	return o.ApplyT(func(v *LogAnalytics) map[string]string {
		if v == nil {
			return nil
		}
		return v.Metadata
	}).(pulumi.StringMapOutput)
}

// The workspace id for log analytics
func (o LogAnalyticsPtrOutput) WorkspaceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LogAnalytics) *string {
		if v == nil {
			return nil
		}
		return &v.WorkspaceId
	}).(pulumi.StringPtrOutput)
}

// The workspace key for log analytics
func (o LogAnalyticsPtrOutput) WorkspaceKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LogAnalytics) *string {
		if v == nil {
			return nil
		}
		return &v.WorkspaceKey
	}).(pulumi.StringPtrOutput)
}

// Container group log analytics information.
type LogAnalyticsInvokeResponse struct {
	// The log type to be used.
	LogType *string `pulumi:"logType"`
	// Metadata for log analytics.
	Metadata map[string]string `pulumi:"metadata"`
	// The workspace id for log analytics
	WorkspaceId string `pulumi:"workspaceId"`
	// The workspace key for log analytics
	WorkspaceKey string `pulumi:"workspaceKey"`
}

// LogAnalyticsInvokeResponseInput is an input type that accepts LogAnalyticsInvokeResponseArgs and LogAnalyticsInvokeResponseOutput values.
// You can construct a concrete instance of `LogAnalyticsInvokeResponseInput` via:
//
//          LogAnalyticsInvokeResponseArgs{...}
type LogAnalyticsInvokeResponseInput interface {
	pulumi.Input

	ToLogAnalyticsInvokeResponseOutput() LogAnalyticsInvokeResponseOutput
	ToLogAnalyticsInvokeResponseOutputWithContext(context.Context) LogAnalyticsInvokeResponseOutput
}

// Container group log analytics information.
type LogAnalyticsInvokeResponseArgs struct {
	// The log type to be used.
	LogType pulumi.StringPtrInput `pulumi:"logType"`
	// Metadata for log analytics.
	Metadata pulumi.StringMapInput `pulumi:"metadata"`
	// The workspace id for log analytics
	WorkspaceId pulumi.StringInput `pulumi:"workspaceId"`
	// The workspace key for log analytics
	WorkspaceKey pulumi.StringInput `pulumi:"workspaceKey"`
}

func (LogAnalyticsInvokeResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LogAnalyticsInvokeResponse)(nil)).Elem()
}

func (i LogAnalyticsInvokeResponseArgs) ToLogAnalyticsInvokeResponseOutput() LogAnalyticsInvokeResponseOutput {
	return i.ToLogAnalyticsInvokeResponseOutputWithContext(context.Background())
}

func (i LogAnalyticsInvokeResponseArgs) ToLogAnalyticsInvokeResponseOutputWithContext(ctx context.Context) LogAnalyticsInvokeResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LogAnalyticsInvokeResponseOutput)
}

func (i LogAnalyticsInvokeResponseArgs) ToLogAnalyticsInvokeResponsePtrOutput() LogAnalyticsInvokeResponsePtrOutput {
	return i.ToLogAnalyticsInvokeResponsePtrOutputWithContext(context.Background())
}

func (i LogAnalyticsInvokeResponseArgs) ToLogAnalyticsInvokeResponsePtrOutputWithContext(ctx context.Context) LogAnalyticsInvokeResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LogAnalyticsInvokeResponseOutput).ToLogAnalyticsInvokeResponsePtrOutputWithContext(ctx)
}

// LogAnalyticsInvokeResponsePtrInput is an input type that accepts LogAnalyticsInvokeResponseArgs, LogAnalyticsInvokeResponsePtr and LogAnalyticsInvokeResponsePtrOutput values.
// You can construct a concrete instance of `LogAnalyticsInvokeResponsePtrInput` via:
//
//          LogAnalyticsInvokeResponseArgs{...}
//
//  or:
//
//          nil
type LogAnalyticsInvokeResponsePtrInput interface {
	pulumi.Input

	ToLogAnalyticsInvokeResponsePtrOutput() LogAnalyticsInvokeResponsePtrOutput
	ToLogAnalyticsInvokeResponsePtrOutputWithContext(context.Context) LogAnalyticsInvokeResponsePtrOutput
}

type logAnalyticsInvokeResponsePtrType LogAnalyticsInvokeResponseArgs

func LogAnalyticsInvokeResponsePtr(v *LogAnalyticsInvokeResponseArgs) LogAnalyticsInvokeResponsePtrInput {
	return (*logAnalyticsInvokeResponsePtrType)(v)
}

func (*logAnalyticsInvokeResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**LogAnalyticsInvokeResponse)(nil)).Elem()
}

func (i *logAnalyticsInvokeResponsePtrType) ToLogAnalyticsInvokeResponsePtrOutput() LogAnalyticsInvokeResponsePtrOutput {
	return i.ToLogAnalyticsInvokeResponsePtrOutputWithContext(context.Background())
}

func (i *logAnalyticsInvokeResponsePtrType) ToLogAnalyticsInvokeResponsePtrOutputWithContext(ctx context.Context) LogAnalyticsInvokeResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LogAnalyticsInvokeResponsePtrOutput)
}

// Container group log analytics information.
type LogAnalyticsInvokeResponseOutput struct{ *pulumi.OutputState }

func (LogAnalyticsInvokeResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LogAnalyticsInvokeResponse)(nil)).Elem()
}

func (o LogAnalyticsInvokeResponseOutput) ToLogAnalyticsInvokeResponseOutput() LogAnalyticsInvokeResponseOutput {
	return o
}

func (o LogAnalyticsInvokeResponseOutput) ToLogAnalyticsInvokeResponseOutputWithContext(ctx context.Context) LogAnalyticsInvokeResponseOutput {
	return o
}

func (o LogAnalyticsInvokeResponseOutput) ToLogAnalyticsInvokeResponsePtrOutput() LogAnalyticsInvokeResponsePtrOutput {
	return o.ToLogAnalyticsInvokeResponsePtrOutputWithContext(context.Background())
}

func (o LogAnalyticsInvokeResponseOutput) ToLogAnalyticsInvokeResponsePtrOutputWithContext(ctx context.Context) LogAnalyticsInvokeResponsePtrOutput {
	return o.ApplyT(func(v LogAnalyticsInvokeResponse) *LogAnalyticsInvokeResponse {
		return &v
	}).(LogAnalyticsInvokeResponsePtrOutput)
}

// The log type to be used.
func (o LogAnalyticsInvokeResponseOutput) LogType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LogAnalyticsInvokeResponse) *string { return v.LogType }).(pulumi.StringPtrOutput)
}

// Metadata for log analytics.
func (o LogAnalyticsInvokeResponseOutput) Metadata() pulumi.StringMapOutput {
	return o.ApplyT(func(v LogAnalyticsInvokeResponse) map[string]string { return v.Metadata }).(pulumi.StringMapOutput)
}

// The workspace id for log analytics
func (o LogAnalyticsInvokeResponseOutput) WorkspaceId() pulumi.StringOutput {
	return o.ApplyT(func(v LogAnalyticsInvokeResponse) string { return v.WorkspaceId }).(pulumi.StringOutput)
}

// The workspace key for log analytics
func (o LogAnalyticsInvokeResponseOutput) WorkspaceKey() pulumi.StringOutput {
	return o.ApplyT(func(v LogAnalyticsInvokeResponse) string { return v.WorkspaceKey }).(pulumi.StringOutput)
}

type LogAnalyticsInvokeResponsePtrOutput struct{ *pulumi.OutputState }

func (LogAnalyticsInvokeResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LogAnalyticsInvokeResponse)(nil)).Elem()
}

func (o LogAnalyticsInvokeResponsePtrOutput) ToLogAnalyticsInvokeResponsePtrOutput() LogAnalyticsInvokeResponsePtrOutput {
	return o
}

func (o LogAnalyticsInvokeResponsePtrOutput) ToLogAnalyticsInvokeResponsePtrOutputWithContext(ctx context.Context) LogAnalyticsInvokeResponsePtrOutput {
	return o
}

func (o LogAnalyticsInvokeResponsePtrOutput) Elem() LogAnalyticsInvokeResponseOutput {
	return o.ApplyT(func(v *LogAnalyticsInvokeResponse) LogAnalyticsInvokeResponse { return *v }).(LogAnalyticsInvokeResponseOutput)
}

// The log type to be used.
func (o LogAnalyticsInvokeResponsePtrOutput) LogType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LogAnalyticsInvokeResponse) *string {
		if v == nil {
			return nil
		}
		return v.LogType
	}).(pulumi.StringPtrOutput)
}

// Metadata for log analytics.
func (o LogAnalyticsInvokeResponsePtrOutput) Metadata() pulumi.StringMapOutput {
	return o.ApplyT(func(v *LogAnalyticsInvokeResponse) map[string]string {
		if v == nil {
			return nil
		}
		return v.Metadata
	}).(pulumi.StringMapOutput)
}

// The workspace id for log analytics
func (o LogAnalyticsInvokeResponsePtrOutput) WorkspaceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LogAnalyticsInvokeResponse) *string {
		if v == nil {
			return nil
		}
		return &v.WorkspaceId
	}).(pulumi.StringPtrOutput)
}

// The workspace key for log analytics
func (o LogAnalyticsInvokeResponsePtrOutput) WorkspaceKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LogAnalyticsInvokeResponse) *string {
		if v == nil {
			return nil
		}
		return &v.WorkspaceKey
	}).(pulumi.StringPtrOutput)
}

// Container group log analytics information.
type LogAnalyticsResponse struct {
	// The log type to be used.
	LogType *string `pulumi:"logType"`
	// Metadata for log analytics.
	Metadata map[string]string `pulumi:"metadata"`
	// The workspace id for log analytics
	WorkspaceId string `pulumi:"workspaceId"`
	// The workspace key for log analytics
	WorkspaceKey string `pulumi:"workspaceKey"`
}

// LogAnalyticsResponseInput is an input type that accepts LogAnalyticsResponseArgs and LogAnalyticsResponseOutput values.
// You can construct a concrete instance of `LogAnalyticsResponseInput` via:
//
//          LogAnalyticsResponseArgs{...}
type LogAnalyticsResponseInput interface {
	pulumi.Input

	ToLogAnalyticsResponseOutput() LogAnalyticsResponseOutput
	ToLogAnalyticsResponseOutputWithContext(context.Context) LogAnalyticsResponseOutput
}

// Container group log analytics information.
type LogAnalyticsResponseArgs struct {
	// The log type to be used.
	LogType pulumi.StringPtrInput `pulumi:"logType"`
	// Metadata for log analytics.
	Metadata pulumi.StringMapInput `pulumi:"metadata"`
	// The workspace id for log analytics
	WorkspaceId pulumi.StringInput `pulumi:"workspaceId"`
	// The workspace key for log analytics
	WorkspaceKey pulumi.StringInput `pulumi:"workspaceKey"`
}

func (LogAnalyticsResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LogAnalyticsResponse)(nil)).Elem()
}

func (i LogAnalyticsResponseArgs) ToLogAnalyticsResponseOutput() LogAnalyticsResponseOutput {
	return i.ToLogAnalyticsResponseOutputWithContext(context.Background())
}

func (i LogAnalyticsResponseArgs) ToLogAnalyticsResponseOutputWithContext(ctx context.Context) LogAnalyticsResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LogAnalyticsResponseOutput)
}

func (i LogAnalyticsResponseArgs) ToLogAnalyticsResponsePtrOutput() LogAnalyticsResponsePtrOutput {
	return i.ToLogAnalyticsResponsePtrOutputWithContext(context.Background())
}

func (i LogAnalyticsResponseArgs) ToLogAnalyticsResponsePtrOutputWithContext(ctx context.Context) LogAnalyticsResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LogAnalyticsResponseOutput).ToLogAnalyticsResponsePtrOutputWithContext(ctx)
}

// LogAnalyticsResponsePtrInput is an input type that accepts LogAnalyticsResponseArgs, LogAnalyticsResponsePtr and LogAnalyticsResponsePtrOutput values.
// You can construct a concrete instance of `LogAnalyticsResponsePtrInput` via:
//
//          LogAnalyticsResponseArgs{...}
//
//  or:
//
//          nil
type LogAnalyticsResponsePtrInput interface {
	pulumi.Input

	ToLogAnalyticsResponsePtrOutput() LogAnalyticsResponsePtrOutput
	ToLogAnalyticsResponsePtrOutputWithContext(context.Context) LogAnalyticsResponsePtrOutput
}

type logAnalyticsResponsePtrType LogAnalyticsResponseArgs

func LogAnalyticsResponsePtr(v *LogAnalyticsResponseArgs) LogAnalyticsResponsePtrInput {
	return (*logAnalyticsResponsePtrType)(v)
}

func (*logAnalyticsResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**LogAnalyticsResponse)(nil)).Elem()
}

func (i *logAnalyticsResponsePtrType) ToLogAnalyticsResponsePtrOutput() LogAnalyticsResponsePtrOutput {
	return i.ToLogAnalyticsResponsePtrOutputWithContext(context.Background())
}

func (i *logAnalyticsResponsePtrType) ToLogAnalyticsResponsePtrOutputWithContext(ctx context.Context) LogAnalyticsResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LogAnalyticsResponsePtrOutput)
}

// Container group log analytics information.
type LogAnalyticsResponseOutput struct{ *pulumi.OutputState }

func (LogAnalyticsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LogAnalyticsResponse)(nil)).Elem()
}

func (o LogAnalyticsResponseOutput) ToLogAnalyticsResponseOutput() LogAnalyticsResponseOutput {
	return o
}

func (o LogAnalyticsResponseOutput) ToLogAnalyticsResponseOutputWithContext(ctx context.Context) LogAnalyticsResponseOutput {
	return o
}

func (o LogAnalyticsResponseOutput) ToLogAnalyticsResponsePtrOutput() LogAnalyticsResponsePtrOutput {
	return o.ToLogAnalyticsResponsePtrOutputWithContext(context.Background())
}

func (o LogAnalyticsResponseOutput) ToLogAnalyticsResponsePtrOutputWithContext(ctx context.Context) LogAnalyticsResponsePtrOutput {
	return o.ApplyT(func(v LogAnalyticsResponse) *LogAnalyticsResponse {
		return &v
	}).(LogAnalyticsResponsePtrOutput)
}

// The log type to be used.
func (o LogAnalyticsResponseOutput) LogType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LogAnalyticsResponse) *string { return v.LogType }).(pulumi.StringPtrOutput)
}

// Metadata for log analytics.
func (o LogAnalyticsResponseOutput) Metadata() pulumi.StringMapOutput {
	return o.ApplyT(func(v LogAnalyticsResponse) map[string]string { return v.Metadata }).(pulumi.StringMapOutput)
}

// The workspace id for log analytics
func (o LogAnalyticsResponseOutput) WorkspaceId() pulumi.StringOutput {
	return o.ApplyT(func(v LogAnalyticsResponse) string { return v.WorkspaceId }).(pulumi.StringOutput)
}

// The workspace key for log analytics
func (o LogAnalyticsResponseOutput) WorkspaceKey() pulumi.StringOutput {
	return o.ApplyT(func(v LogAnalyticsResponse) string { return v.WorkspaceKey }).(pulumi.StringOutput)
}

type LogAnalyticsResponsePtrOutput struct{ *pulumi.OutputState }

func (LogAnalyticsResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LogAnalyticsResponse)(nil)).Elem()
}

func (o LogAnalyticsResponsePtrOutput) ToLogAnalyticsResponsePtrOutput() LogAnalyticsResponsePtrOutput {
	return o
}

func (o LogAnalyticsResponsePtrOutput) ToLogAnalyticsResponsePtrOutputWithContext(ctx context.Context) LogAnalyticsResponsePtrOutput {
	return o
}

func (o LogAnalyticsResponsePtrOutput) Elem() LogAnalyticsResponseOutput {
	return o.ApplyT(func(v *LogAnalyticsResponse) LogAnalyticsResponse { return *v }).(LogAnalyticsResponseOutput)
}

// The log type to be used.
func (o LogAnalyticsResponsePtrOutput) LogType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LogAnalyticsResponse) *string {
		if v == nil {
			return nil
		}
		return v.LogType
	}).(pulumi.StringPtrOutput)
}

// Metadata for log analytics.
func (o LogAnalyticsResponsePtrOutput) Metadata() pulumi.StringMapOutput {
	return o.ApplyT(func(v *LogAnalyticsResponse) map[string]string {
		if v == nil {
			return nil
		}
		return v.Metadata
	}).(pulumi.StringMapOutput)
}

// The workspace id for log analytics
func (o LogAnalyticsResponsePtrOutput) WorkspaceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LogAnalyticsResponse) *string {
		if v == nil {
			return nil
		}
		return &v.WorkspaceId
	}).(pulumi.StringPtrOutput)
}

// The workspace key for log analytics
func (o LogAnalyticsResponsePtrOutput) WorkspaceKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LogAnalyticsResponse) *string {
		if v == nil {
			return nil
		}
		return &v.WorkspaceKey
	}).(pulumi.StringPtrOutput)
}

// The port exposed on the container group.
type Port struct {
	// The port number.
	Port int `pulumi:"port"`
	// The protocol associated with the port.
	Protocol *string `pulumi:"protocol"`
}

// PortInput is an input type that accepts PortArgs and PortOutput values.
// You can construct a concrete instance of `PortInput` via:
//
//          PortArgs{...}
type PortInput interface {
	pulumi.Input

	ToPortOutput() PortOutput
	ToPortOutputWithContext(context.Context) PortOutput
}

// The port exposed on the container group.
type PortArgs struct {
	// The port number.
	Port pulumi.IntInput `pulumi:"port"`
	// The protocol associated with the port.
	Protocol pulumi.StringPtrInput `pulumi:"protocol"`
}

func (PortArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Port)(nil)).Elem()
}

func (i PortArgs) ToPortOutput() PortOutput {
	return i.ToPortOutputWithContext(context.Background())
}

func (i PortArgs) ToPortOutputWithContext(ctx context.Context) PortOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PortOutput)
}

// PortArrayInput is an input type that accepts PortArray and PortArrayOutput values.
// You can construct a concrete instance of `PortArrayInput` via:
//
//          PortArray{ PortArgs{...} }
type PortArrayInput interface {
	pulumi.Input

	ToPortArrayOutput() PortArrayOutput
	ToPortArrayOutputWithContext(context.Context) PortArrayOutput
}

type PortArray []PortInput

func (PortArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Port)(nil)).Elem()
}

func (i PortArray) ToPortArrayOutput() PortArrayOutput {
	return i.ToPortArrayOutputWithContext(context.Background())
}

func (i PortArray) ToPortArrayOutputWithContext(ctx context.Context) PortArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PortArrayOutput)
}

// The port exposed on the container group.
type PortOutput struct{ *pulumi.OutputState }

func (PortOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Port)(nil)).Elem()
}

func (o PortOutput) ToPortOutput() PortOutput {
	return o
}

func (o PortOutput) ToPortOutputWithContext(ctx context.Context) PortOutput {
	return o
}

// The port number.
func (o PortOutput) Port() pulumi.IntOutput {
	return o.ApplyT(func(v Port) int { return v.Port }).(pulumi.IntOutput)
}

// The protocol associated with the port.
func (o PortOutput) Protocol() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Port) *string { return v.Protocol }).(pulumi.StringPtrOutput)
}

type PortArrayOutput struct{ *pulumi.OutputState }

func (PortArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Port)(nil)).Elem()
}

func (o PortArrayOutput) ToPortArrayOutput() PortArrayOutput {
	return o
}

func (o PortArrayOutput) ToPortArrayOutputWithContext(ctx context.Context) PortArrayOutput {
	return o
}

func (o PortArrayOutput) Index(i pulumi.IntInput) PortOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) Port {
		return vs[0].([]Port)[vs[1].(int)]
	}).(PortOutput)
}

// The port exposed on the container group.
type PortInvokeResponse struct {
	// The port number.
	Port int `pulumi:"port"`
	// The protocol associated with the port.
	Protocol *string `pulumi:"protocol"`
}

// PortInvokeResponseInput is an input type that accepts PortInvokeResponseArgs and PortInvokeResponseOutput values.
// You can construct a concrete instance of `PortInvokeResponseInput` via:
//
//          PortInvokeResponseArgs{...}
type PortInvokeResponseInput interface {
	pulumi.Input

	ToPortInvokeResponseOutput() PortInvokeResponseOutput
	ToPortInvokeResponseOutputWithContext(context.Context) PortInvokeResponseOutput
}

// The port exposed on the container group.
type PortInvokeResponseArgs struct {
	// The port number.
	Port pulumi.IntInput `pulumi:"port"`
	// The protocol associated with the port.
	Protocol pulumi.StringPtrInput `pulumi:"protocol"`
}

func (PortInvokeResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PortInvokeResponse)(nil)).Elem()
}

func (i PortInvokeResponseArgs) ToPortInvokeResponseOutput() PortInvokeResponseOutput {
	return i.ToPortInvokeResponseOutputWithContext(context.Background())
}

func (i PortInvokeResponseArgs) ToPortInvokeResponseOutputWithContext(ctx context.Context) PortInvokeResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PortInvokeResponseOutput)
}

// PortInvokeResponseArrayInput is an input type that accepts PortInvokeResponseArray and PortInvokeResponseArrayOutput values.
// You can construct a concrete instance of `PortInvokeResponseArrayInput` via:
//
//          PortInvokeResponseArray{ PortInvokeResponseArgs{...} }
type PortInvokeResponseArrayInput interface {
	pulumi.Input

	ToPortInvokeResponseArrayOutput() PortInvokeResponseArrayOutput
	ToPortInvokeResponseArrayOutputWithContext(context.Context) PortInvokeResponseArrayOutput
}

type PortInvokeResponseArray []PortInvokeResponseInput

func (PortInvokeResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PortInvokeResponse)(nil)).Elem()
}

func (i PortInvokeResponseArray) ToPortInvokeResponseArrayOutput() PortInvokeResponseArrayOutput {
	return i.ToPortInvokeResponseArrayOutputWithContext(context.Background())
}

func (i PortInvokeResponseArray) ToPortInvokeResponseArrayOutputWithContext(ctx context.Context) PortInvokeResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PortInvokeResponseArrayOutput)
}

// The port exposed on the container group.
type PortInvokeResponseOutput struct{ *pulumi.OutputState }

func (PortInvokeResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PortInvokeResponse)(nil)).Elem()
}

func (o PortInvokeResponseOutput) ToPortInvokeResponseOutput() PortInvokeResponseOutput {
	return o
}

func (o PortInvokeResponseOutput) ToPortInvokeResponseOutputWithContext(ctx context.Context) PortInvokeResponseOutput {
	return o
}

// The port number.
func (o PortInvokeResponseOutput) Port() pulumi.IntOutput {
	return o.ApplyT(func(v PortInvokeResponse) int { return v.Port }).(pulumi.IntOutput)
}

// The protocol associated with the port.
func (o PortInvokeResponseOutput) Protocol() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PortInvokeResponse) *string { return v.Protocol }).(pulumi.StringPtrOutput)
}

type PortInvokeResponseArrayOutput struct{ *pulumi.OutputState }

func (PortInvokeResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PortInvokeResponse)(nil)).Elem()
}

func (o PortInvokeResponseArrayOutput) ToPortInvokeResponseArrayOutput() PortInvokeResponseArrayOutput {
	return o
}

func (o PortInvokeResponseArrayOutput) ToPortInvokeResponseArrayOutputWithContext(ctx context.Context) PortInvokeResponseArrayOutput {
	return o
}

func (o PortInvokeResponseArrayOutput) Index(i pulumi.IntInput) PortInvokeResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) PortInvokeResponse {
		return vs[0].([]PortInvokeResponse)[vs[1].(int)]
	}).(PortInvokeResponseOutput)
}

// The port exposed on the container group.
type PortResponse struct {
	// The port number.
	Port int `pulumi:"port"`
	// The protocol associated with the port.
	Protocol *string `pulumi:"protocol"`
}

// PortResponseInput is an input type that accepts PortResponseArgs and PortResponseOutput values.
// You can construct a concrete instance of `PortResponseInput` via:
//
//          PortResponseArgs{...}
type PortResponseInput interface {
	pulumi.Input

	ToPortResponseOutput() PortResponseOutput
	ToPortResponseOutputWithContext(context.Context) PortResponseOutput
}

// The port exposed on the container group.
type PortResponseArgs struct {
	// The port number.
	Port pulumi.IntInput `pulumi:"port"`
	// The protocol associated with the port.
	Protocol pulumi.StringPtrInput `pulumi:"protocol"`
}

func (PortResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PortResponse)(nil)).Elem()
}

func (i PortResponseArgs) ToPortResponseOutput() PortResponseOutput {
	return i.ToPortResponseOutputWithContext(context.Background())
}

func (i PortResponseArgs) ToPortResponseOutputWithContext(ctx context.Context) PortResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PortResponseOutput)
}

// PortResponseArrayInput is an input type that accepts PortResponseArray and PortResponseArrayOutput values.
// You can construct a concrete instance of `PortResponseArrayInput` via:
//
//          PortResponseArray{ PortResponseArgs{...} }
type PortResponseArrayInput interface {
	pulumi.Input

	ToPortResponseArrayOutput() PortResponseArrayOutput
	ToPortResponseArrayOutputWithContext(context.Context) PortResponseArrayOutput
}

type PortResponseArray []PortResponseInput

func (PortResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PortResponse)(nil)).Elem()
}

func (i PortResponseArray) ToPortResponseArrayOutput() PortResponseArrayOutput {
	return i.ToPortResponseArrayOutputWithContext(context.Background())
}

func (i PortResponseArray) ToPortResponseArrayOutputWithContext(ctx context.Context) PortResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PortResponseArrayOutput)
}

// The port exposed on the container group.
type PortResponseOutput struct{ *pulumi.OutputState }

func (PortResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PortResponse)(nil)).Elem()
}

func (o PortResponseOutput) ToPortResponseOutput() PortResponseOutput {
	return o
}

func (o PortResponseOutput) ToPortResponseOutputWithContext(ctx context.Context) PortResponseOutput {
	return o
}

// The port number.
func (o PortResponseOutput) Port() pulumi.IntOutput {
	return o.ApplyT(func(v PortResponse) int { return v.Port }).(pulumi.IntOutput)
}

// The protocol associated with the port.
func (o PortResponseOutput) Protocol() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PortResponse) *string { return v.Protocol }).(pulumi.StringPtrOutput)
}

type PortResponseArrayOutput struct{ *pulumi.OutputState }

func (PortResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PortResponse)(nil)).Elem()
}

func (o PortResponseArrayOutput) ToPortResponseArrayOutput() PortResponseArrayOutput {
	return o
}

func (o PortResponseArrayOutput) ToPortResponseArrayOutputWithContext(ctx context.Context) PortResponseArrayOutput {
	return o
}

func (o PortResponseArrayOutput) Index(i pulumi.IntInput) PortResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) PortResponse {
		return vs[0].([]PortResponse)[vs[1].(int)]
	}).(PortResponseOutput)
}

// The resource limits.
type ResourceLimits struct {
	// The CPU limit of this container instance.
	Cpu *float64 `pulumi:"cpu"`
	// The GPU limit of this container instance.
	Gpu *GpuResource `pulumi:"gpu"`
	// The memory limit in GB of this container instance.
	MemoryInGB *float64 `pulumi:"memoryInGB"`
}

// ResourceLimitsInput is an input type that accepts ResourceLimitsArgs and ResourceLimitsOutput values.
// You can construct a concrete instance of `ResourceLimitsInput` via:
//
//          ResourceLimitsArgs{...}
type ResourceLimitsInput interface {
	pulumi.Input

	ToResourceLimitsOutput() ResourceLimitsOutput
	ToResourceLimitsOutputWithContext(context.Context) ResourceLimitsOutput
}

// The resource limits.
type ResourceLimitsArgs struct {
	// The CPU limit of this container instance.
	Cpu pulumi.Float64PtrInput `pulumi:"cpu"`
	// The GPU limit of this container instance.
	Gpu GpuResourcePtrInput `pulumi:"gpu"`
	// The memory limit in GB of this container instance.
	MemoryInGB pulumi.Float64PtrInput `pulumi:"memoryInGB"`
}

func (ResourceLimitsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceLimits)(nil)).Elem()
}

func (i ResourceLimitsArgs) ToResourceLimitsOutput() ResourceLimitsOutput {
	return i.ToResourceLimitsOutputWithContext(context.Background())
}

func (i ResourceLimitsArgs) ToResourceLimitsOutputWithContext(ctx context.Context) ResourceLimitsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceLimitsOutput)
}

func (i ResourceLimitsArgs) ToResourceLimitsPtrOutput() ResourceLimitsPtrOutput {
	return i.ToResourceLimitsPtrOutputWithContext(context.Background())
}

func (i ResourceLimitsArgs) ToResourceLimitsPtrOutputWithContext(ctx context.Context) ResourceLimitsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceLimitsOutput).ToResourceLimitsPtrOutputWithContext(ctx)
}

// ResourceLimitsPtrInput is an input type that accepts ResourceLimitsArgs, ResourceLimitsPtr and ResourceLimitsPtrOutput values.
// You can construct a concrete instance of `ResourceLimitsPtrInput` via:
//
//          ResourceLimitsArgs{...}
//
//  or:
//
//          nil
type ResourceLimitsPtrInput interface {
	pulumi.Input

	ToResourceLimitsPtrOutput() ResourceLimitsPtrOutput
	ToResourceLimitsPtrOutputWithContext(context.Context) ResourceLimitsPtrOutput
}

type resourceLimitsPtrType ResourceLimitsArgs

func ResourceLimitsPtr(v *ResourceLimitsArgs) ResourceLimitsPtrInput {
	return (*resourceLimitsPtrType)(v)
}

func (*resourceLimitsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ResourceLimits)(nil)).Elem()
}

func (i *resourceLimitsPtrType) ToResourceLimitsPtrOutput() ResourceLimitsPtrOutput {
	return i.ToResourceLimitsPtrOutputWithContext(context.Background())
}

func (i *resourceLimitsPtrType) ToResourceLimitsPtrOutputWithContext(ctx context.Context) ResourceLimitsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceLimitsPtrOutput)
}

// The resource limits.
type ResourceLimitsOutput struct{ *pulumi.OutputState }

func (ResourceLimitsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceLimits)(nil)).Elem()
}

func (o ResourceLimitsOutput) ToResourceLimitsOutput() ResourceLimitsOutput {
	return o
}

func (o ResourceLimitsOutput) ToResourceLimitsOutputWithContext(ctx context.Context) ResourceLimitsOutput {
	return o
}

func (o ResourceLimitsOutput) ToResourceLimitsPtrOutput() ResourceLimitsPtrOutput {
	return o.ToResourceLimitsPtrOutputWithContext(context.Background())
}

func (o ResourceLimitsOutput) ToResourceLimitsPtrOutputWithContext(ctx context.Context) ResourceLimitsPtrOutput {
	return o.ApplyT(func(v ResourceLimits) *ResourceLimits {
		return &v
	}).(ResourceLimitsPtrOutput)
}

// The CPU limit of this container instance.
func (o ResourceLimitsOutput) Cpu() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v ResourceLimits) *float64 { return v.Cpu }).(pulumi.Float64PtrOutput)
}

// The GPU limit of this container instance.
func (o ResourceLimitsOutput) Gpu() GpuResourcePtrOutput {
	return o.ApplyT(func(v ResourceLimits) *GpuResource { return v.Gpu }).(GpuResourcePtrOutput)
}

// The memory limit in GB of this container instance.
func (o ResourceLimitsOutput) MemoryInGB() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v ResourceLimits) *float64 { return v.MemoryInGB }).(pulumi.Float64PtrOutput)
}

type ResourceLimitsPtrOutput struct{ *pulumi.OutputState }

func (ResourceLimitsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ResourceLimits)(nil)).Elem()
}

func (o ResourceLimitsPtrOutput) ToResourceLimitsPtrOutput() ResourceLimitsPtrOutput {
	return o
}

func (o ResourceLimitsPtrOutput) ToResourceLimitsPtrOutputWithContext(ctx context.Context) ResourceLimitsPtrOutput {
	return o
}

func (o ResourceLimitsPtrOutput) Elem() ResourceLimitsOutput {
	return o.ApplyT(func(v *ResourceLimits) ResourceLimits { return *v }).(ResourceLimitsOutput)
}

// The CPU limit of this container instance.
func (o ResourceLimitsPtrOutput) Cpu() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *ResourceLimits) *float64 {
		if v == nil {
			return nil
		}
		return v.Cpu
	}).(pulumi.Float64PtrOutput)
}

// The GPU limit of this container instance.
func (o ResourceLimitsPtrOutput) Gpu() GpuResourcePtrOutput {
	return o.ApplyT(func(v *ResourceLimits) *GpuResource {
		if v == nil {
			return nil
		}
		return v.Gpu
	}).(GpuResourcePtrOutput)
}

// The memory limit in GB of this container instance.
func (o ResourceLimitsPtrOutput) MemoryInGB() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *ResourceLimits) *float64 {
		if v == nil {
			return nil
		}
		return v.MemoryInGB
	}).(pulumi.Float64PtrOutput)
}

// The resource limits.
type ResourceLimitsInvokeResponse struct {
	// The CPU limit of this container instance.
	Cpu *float64 `pulumi:"cpu"`
	// The GPU limit of this container instance.
	Gpu *GpuResourceInvokeResponse `pulumi:"gpu"`
	// The memory limit in GB of this container instance.
	MemoryInGB *float64 `pulumi:"memoryInGB"`
}

// ResourceLimitsInvokeResponseInput is an input type that accepts ResourceLimitsInvokeResponseArgs and ResourceLimitsInvokeResponseOutput values.
// You can construct a concrete instance of `ResourceLimitsInvokeResponseInput` via:
//
//          ResourceLimitsInvokeResponseArgs{...}
type ResourceLimitsInvokeResponseInput interface {
	pulumi.Input

	ToResourceLimitsInvokeResponseOutput() ResourceLimitsInvokeResponseOutput
	ToResourceLimitsInvokeResponseOutputWithContext(context.Context) ResourceLimitsInvokeResponseOutput
}

// The resource limits.
type ResourceLimitsInvokeResponseArgs struct {
	// The CPU limit of this container instance.
	Cpu pulumi.Float64PtrInput `pulumi:"cpu"`
	// The GPU limit of this container instance.
	Gpu GpuResourceInvokeResponsePtrInput `pulumi:"gpu"`
	// The memory limit in GB of this container instance.
	MemoryInGB pulumi.Float64PtrInput `pulumi:"memoryInGB"`
}

func (ResourceLimitsInvokeResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceLimitsInvokeResponse)(nil)).Elem()
}

func (i ResourceLimitsInvokeResponseArgs) ToResourceLimitsInvokeResponseOutput() ResourceLimitsInvokeResponseOutput {
	return i.ToResourceLimitsInvokeResponseOutputWithContext(context.Background())
}

func (i ResourceLimitsInvokeResponseArgs) ToResourceLimitsInvokeResponseOutputWithContext(ctx context.Context) ResourceLimitsInvokeResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceLimitsInvokeResponseOutput)
}

func (i ResourceLimitsInvokeResponseArgs) ToResourceLimitsInvokeResponsePtrOutput() ResourceLimitsInvokeResponsePtrOutput {
	return i.ToResourceLimitsInvokeResponsePtrOutputWithContext(context.Background())
}

func (i ResourceLimitsInvokeResponseArgs) ToResourceLimitsInvokeResponsePtrOutputWithContext(ctx context.Context) ResourceLimitsInvokeResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceLimitsInvokeResponseOutput).ToResourceLimitsInvokeResponsePtrOutputWithContext(ctx)
}

// ResourceLimitsInvokeResponsePtrInput is an input type that accepts ResourceLimitsInvokeResponseArgs, ResourceLimitsInvokeResponsePtr and ResourceLimitsInvokeResponsePtrOutput values.
// You can construct a concrete instance of `ResourceLimitsInvokeResponsePtrInput` via:
//
//          ResourceLimitsInvokeResponseArgs{...}
//
//  or:
//
//          nil
type ResourceLimitsInvokeResponsePtrInput interface {
	pulumi.Input

	ToResourceLimitsInvokeResponsePtrOutput() ResourceLimitsInvokeResponsePtrOutput
	ToResourceLimitsInvokeResponsePtrOutputWithContext(context.Context) ResourceLimitsInvokeResponsePtrOutput
}

type resourceLimitsInvokeResponsePtrType ResourceLimitsInvokeResponseArgs

func ResourceLimitsInvokeResponsePtr(v *ResourceLimitsInvokeResponseArgs) ResourceLimitsInvokeResponsePtrInput {
	return (*resourceLimitsInvokeResponsePtrType)(v)
}

func (*resourceLimitsInvokeResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ResourceLimitsInvokeResponse)(nil)).Elem()
}

func (i *resourceLimitsInvokeResponsePtrType) ToResourceLimitsInvokeResponsePtrOutput() ResourceLimitsInvokeResponsePtrOutput {
	return i.ToResourceLimitsInvokeResponsePtrOutputWithContext(context.Background())
}

func (i *resourceLimitsInvokeResponsePtrType) ToResourceLimitsInvokeResponsePtrOutputWithContext(ctx context.Context) ResourceLimitsInvokeResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceLimitsInvokeResponsePtrOutput)
}

// The resource limits.
type ResourceLimitsInvokeResponseOutput struct{ *pulumi.OutputState }

func (ResourceLimitsInvokeResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceLimitsInvokeResponse)(nil)).Elem()
}

func (o ResourceLimitsInvokeResponseOutput) ToResourceLimitsInvokeResponseOutput() ResourceLimitsInvokeResponseOutput {
	return o
}

func (o ResourceLimitsInvokeResponseOutput) ToResourceLimitsInvokeResponseOutputWithContext(ctx context.Context) ResourceLimitsInvokeResponseOutput {
	return o
}

func (o ResourceLimitsInvokeResponseOutput) ToResourceLimitsInvokeResponsePtrOutput() ResourceLimitsInvokeResponsePtrOutput {
	return o.ToResourceLimitsInvokeResponsePtrOutputWithContext(context.Background())
}

func (o ResourceLimitsInvokeResponseOutput) ToResourceLimitsInvokeResponsePtrOutputWithContext(ctx context.Context) ResourceLimitsInvokeResponsePtrOutput {
	return o.ApplyT(func(v ResourceLimitsInvokeResponse) *ResourceLimitsInvokeResponse {
		return &v
	}).(ResourceLimitsInvokeResponsePtrOutput)
}

// The CPU limit of this container instance.
func (o ResourceLimitsInvokeResponseOutput) Cpu() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v ResourceLimitsInvokeResponse) *float64 { return v.Cpu }).(pulumi.Float64PtrOutput)
}

// The GPU limit of this container instance.
func (o ResourceLimitsInvokeResponseOutput) Gpu() GpuResourceInvokeResponsePtrOutput {
	return o.ApplyT(func(v ResourceLimitsInvokeResponse) *GpuResourceInvokeResponse { return v.Gpu }).(GpuResourceInvokeResponsePtrOutput)
}

// The memory limit in GB of this container instance.
func (o ResourceLimitsInvokeResponseOutput) MemoryInGB() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v ResourceLimitsInvokeResponse) *float64 { return v.MemoryInGB }).(pulumi.Float64PtrOutput)
}

type ResourceLimitsInvokeResponsePtrOutput struct{ *pulumi.OutputState }

func (ResourceLimitsInvokeResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ResourceLimitsInvokeResponse)(nil)).Elem()
}

func (o ResourceLimitsInvokeResponsePtrOutput) ToResourceLimitsInvokeResponsePtrOutput() ResourceLimitsInvokeResponsePtrOutput {
	return o
}

func (o ResourceLimitsInvokeResponsePtrOutput) ToResourceLimitsInvokeResponsePtrOutputWithContext(ctx context.Context) ResourceLimitsInvokeResponsePtrOutput {
	return o
}

func (o ResourceLimitsInvokeResponsePtrOutput) Elem() ResourceLimitsInvokeResponseOutput {
	return o.ApplyT(func(v *ResourceLimitsInvokeResponse) ResourceLimitsInvokeResponse { return *v }).(ResourceLimitsInvokeResponseOutput)
}

// The CPU limit of this container instance.
func (o ResourceLimitsInvokeResponsePtrOutput) Cpu() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *ResourceLimitsInvokeResponse) *float64 {
		if v == nil {
			return nil
		}
		return v.Cpu
	}).(pulumi.Float64PtrOutput)
}

// The GPU limit of this container instance.
func (o ResourceLimitsInvokeResponsePtrOutput) Gpu() GpuResourceInvokeResponsePtrOutput {
	return o.ApplyT(func(v *ResourceLimitsInvokeResponse) *GpuResourceInvokeResponse {
		if v == nil {
			return nil
		}
		return v.Gpu
	}).(GpuResourceInvokeResponsePtrOutput)
}

// The memory limit in GB of this container instance.
func (o ResourceLimitsInvokeResponsePtrOutput) MemoryInGB() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *ResourceLimitsInvokeResponse) *float64 {
		if v == nil {
			return nil
		}
		return v.MemoryInGB
	}).(pulumi.Float64PtrOutput)
}

// The resource limits.
type ResourceLimitsResponse struct {
	// The CPU limit of this container instance.
	Cpu *float64 `pulumi:"cpu"`
	// The GPU limit of this container instance.
	Gpu *GpuResourceResponse `pulumi:"gpu"`
	// The memory limit in GB of this container instance.
	MemoryInGB *float64 `pulumi:"memoryInGB"`
}

// ResourceLimitsResponseInput is an input type that accepts ResourceLimitsResponseArgs and ResourceLimitsResponseOutput values.
// You can construct a concrete instance of `ResourceLimitsResponseInput` via:
//
//          ResourceLimitsResponseArgs{...}
type ResourceLimitsResponseInput interface {
	pulumi.Input

	ToResourceLimitsResponseOutput() ResourceLimitsResponseOutput
	ToResourceLimitsResponseOutputWithContext(context.Context) ResourceLimitsResponseOutput
}

// The resource limits.
type ResourceLimitsResponseArgs struct {
	// The CPU limit of this container instance.
	Cpu pulumi.Float64PtrInput `pulumi:"cpu"`
	// The GPU limit of this container instance.
	Gpu GpuResourceResponsePtrInput `pulumi:"gpu"`
	// The memory limit in GB of this container instance.
	MemoryInGB pulumi.Float64PtrInput `pulumi:"memoryInGB"`
}

func (ResourceLimitsResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceLimitsResponse)(nil)).Elem()
}

func (i ResourceLimitsResponseArgs) ToResourceLimitsResponseOutput() ResourceLimitsResponseOutput {
	return i.ToResourceLimitsResponseOutputWithContext(context.Background())
}

func (i ResourceLimitsResponseArgs) ToResourceLimitsResponseOutputWithContext(ctx context.Context) ResourceLimitsResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceLimitsResponseOutput)
}

func (i ResourceLimitsResponseArgs) ToResourceLimitsResponsePtrOutput() ResourceLimitsResponsePtrOutput {
	return i.ToResourceLimitsResponsePtrOutputWithContext(context.Background())
}

func (i ResourceLimitsResponseArgs) ToResourceLimitsResponsePtrOutputWithContext(ctx context.Context) ResourceLimitsResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceLimitsResponseOutput).ToResourceLimitsResponsePtrOutputWithContext(ctx)
}

// ResourceLimitsResponsePtrInput is an input type that accepts ResourceLimitsResponseArgs, ResourceLimitsResponsePtr and ResourceLimitsResponsePtrOutput values.
// You can construct a concrete instance of `ResourceLimitsResponsePtrInput` via:
//
//          ResourceLimitsResponseArgs{...}
//
//  or:
//
//          nil
type ResourceLimitsResponsePtrInput interface {
	pulumi.Input

	ToResourceLimitsResponsePtrOutput() ResourceLimitsResponsePtrOutput
	ToResourceLimitsResponsePtrOutputWithContext(context.Context) ResourceLimitsResponsePtrOutput
}

type resourceLimitsResponsePtrType ResourceLimitsResponseArgs

func ResourceLimitsResponsePtr(v *ResourceLimitsResponseArgs) ResourceLimitsResponsePtrInput {
	return (*resourceLimitsResponsePtrType)(v)
}

func (*resourceLimitsResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ResourceLimitsResponse)(nil)).Elem()
}

func (i *resourceLimitsResponsePtrType) ToResourceLimitsResponsePtrOutput() ResourceLimitsResponsePtrOutput {
	return i.ToResourceLimitsResponsePtrOutputWithContext(context.Background())
}

func (i *resourceLimitsResponsePtrType) ToResourceLimitsResponsePtrOutputWithContext(ctx context.Context) ResourceLimitsResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceLimitsResponsePtrOutput)
}

// The resource limits.
type ResourceLimitsResponseOutput struct{ *pulumi.OutputState }

func (ResourceLimitsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceLimitsResponse)(nil)).Elem()
}

func (o ResourceLimitsResponseOutput) ToResourceLimitsResponseOutput() ResourceLimitsResponseOutput {
	return o
}

func (o ResourceLimitsResponseOutput) ToResourceLimitsResponseOutputWithContext(ctx context.Context) ResourceLimitsResponseOutput {
	return o
}

func (o ResourceLimitsResponseOutput) ToResourceLimitsResponsePtrOutput() ResourceLimitsResponsePtrOutput {
	return o.ToResourceLimitsResponsePtrOutputWithContext(context.Background())
}

func (o ResourceLimitsResponseOutput) ToResourceLimitsResponsePtrOutputWithContext(ctx context.Context) ResourceLimitsResponsePtrOutput {
	return o.ApplyT(func(v ResourceLimitsResponse) *ResourceLimitsResponse {
		return &v
	}).(ResourceLimitsResponsePtrOutput)
}

// The CPU limit of this container instance.
func (o ResourceLimitsResponseOutput) Cpu() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v ResourceLimitsResponse) *float64 { return v.Cpu }).(pulumi.Float64PtrOutput)
}

// The GPU limit of this container instance.
func (o ResourceLimitsResponseOutput) Gpu() GpuResourceResponsePtrOutput {
	return o.ApplyT(func(v ResourceLimitsResponse) *GpuResourceResponse { return v.Gpu }).(GpuResourceResponsePtrOutput)
}

// The memory limit in GB of this container instance.
func (o ResourceLimitsResponseOutput) MemoryInGB() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v ResourceLimitsResponse) *float64 { return v.MemoryInGB }).(pulumi.Float64PtrOutput)
}

type ResourceLimitsResponsePtrOutput struct{ *pulumi.OutputState }

func (ResourceLimitsResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ResourceLimitsResponse)(nil)).Elem()
}

func (o ResourceLimitsResponsePtrOutput) ToResourceLimitsResponsePtrOutput() ResourceLimitsResponsePtrOutput {
	return o
}

func (o ResourceLimitsResponsePtrOutput) ToResourceLimitsResponsePtrOutputWithContext(ctx context.Context) ResourceLimitsResponsePtrOutput {
	return o
}

func (o ResourceLimitsResponsePtrOutput) Elem() ResourceLimitsResponseOutput {
	return o.ApplyT(func(v *ResourceLimitsResponse) ResourceLimitsResponse { return *v }).(ResourceLimitsResponseOutput)
}

// The CPU limit of this container instance.
func (o ResourceLimitsResponsePtrOutput) Cpu() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *ResourceLimitsResponse) *float64 {
		if v == nil {
			return nil
		}
		return v.Cpu
	}).(pulumi.Float64PtrOutput)
}

// The GPU limit of this container instance.
func (o ResourceLimitsResponsePtrOutput) Gpu() GpuResourceResponsePtrOutput {
	return o.ApplyT(func(v *ResourceLimitsResponse) *GpuResourceResponse {
		if v == nil {
			return nil
		}
		return v.Gpu
	}).(GpuResourceResponsePtrOutput)
}

// The memory limit in GB of this container instance.
func (o ResourceLimitsResponsePtrOutput) MemoryInGB() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *ResourceLimitsResponse) *float64 {
		if v == nil {
			return nil
		}
		return v.MemoryInGB
	}).(pulumi.Float64PtrOutput)
}

// The resource requests.
type ResourceRequests struct {
	// The CPU request of this container instance.
	Cpu float64 `pulumi:"cpu"`
	// The GPU request of this container instance.
	Gpu *GpuResource `pulumi:"gpu"`
	// The memory request in GB of this container instance.
	MemoryInGB float64 `pulumi:"memoryInGB"`
}

// ResourceRequestsInput is an input type that accepts ResourceRequestsArgs and ResourceRequestsOutput values.
// You can construct a concrete instance of `ResourceRequestsInput` via:
//
//          ResourceRequestsArgs{...}
type ResourceRequestsInput interface {
	pulumi.Input

	ToResourceRequestsOutput() ResourceRequestsOutput
	ToResourceRequestsOutputWithContext(context.Context) ResourceRequestsOutput
}

// The resource requests.
type ResourceRequestsArgs struct {
	// The CPU request of this container instance.
	Cpu pulumi.Float64Input `pulumi:"cpu"`
	// The GPU request of this container instance.
	Gpu GpuResourcePtrInput `pulumi:"gpu"`
	// The memory request in GB of this container instance.
	MemoryInGB pulumi.Float64Input `pulumi:"memoryInGB"`
}

func (ResourceRequestsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceRequests)(nil)).Elem()
}

func (i ResourceRequestsArgs) ToResourceRequestsOutput() ResourceRequestsOutput {
	return i.ToResourceRequestsOutputWithContext(context.Background())
}

func (i ResourceRequestsArgs) ToResourceRequestsOutputWithContext(ctx context.Context) ResourceRequestsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceRequestsOutput)
}

// The resource requests.
type ResourceRequestsOutput struct{ *pulumi.OutputState }

func (ResourceRequestsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceRequests)(nil)).Elem()
}

func (o ResourceRequestsOutput) ToResourceRequestsOutput() ResourceRequestsOutput {
	return o
}

func (o ResourceRequestsOutput) ToResourceRequestsOutputWithContext(ctx context.Context) ResourceRequestsOutput {
	return o
}

// The CPU request of this container instance.
func (o ResourceRequestsOutput) Cpu() pulumi.Float64Output {
	return o.ApplyT(func(v ResourceRequests) float64 { return v.Cpu }).(pulumi.Float64Output)
}

// The GPU request of this container instance.
func (o ResourceRequestsOutput) Gpu() GpuResourcePtrOutput {
	return o.ApplyT(func(v ResourceRequests) *GpuResource { return v.Gpu }).(GpuResourcePtrOutput)
}

// The memory request in GB of this container instance.
func (o ResourceRequestsOutput) MemoryInGB() pulumi.Float64Output {
	return o.ApplyT(func(v ResourceRequests) float64 { return v.MemoryInGB }).(pulumi.Float64Output)
}

// The resource requests.
type ResourceRequestsInvokeResponse struct {
	// The CPU request of this container instance.
	Cpu float64 `pulumi:"cpu"`
	// The GPU request of this container instance.
	Gpu *GpuResourceInvokeResponse `pulumi:"gpu"`
	// The memory request in GB of this container instance.
	MemoryInGB float64 `pulumi:"memoryInGB"`
}

// ResourceRequestsInvokeResponseInput is an input type that accepts ResourceRequestsInvokeResponseArgs and ResourceRequestsInvokeResponseOutput values.
// You can construct a concrete instance of `ResourceRequestsInvokeResponseInput` via:
//
//          ResourceRequestsInvokeResponseArgs{...}
type ResourceRequestsInvokeResponseInput interface {
	pulumi.Input

	ToResourceRequestsInvokeResponseOutput() ResourceRequestsInvokeResponseOutput
	ToResourceRequestsInvokeResponseOutputWithContext(context.Context) ResourceRequestsInvokeResponseOutput
}

// The resource requests.
type ResourceRequestsInvokeResponseArgs struct {
	// The CPU request of this container instance.
	Cpu pulumi.Float64Input `pulumi:"cpu"`
	// The GPU request of this container instance.
	Gpu GpuResourceInvokeResponsePtrInput `pulumi:"gpu"`
	// The memory request in GB of this container instance.
	MemoryInGB pulumi.Float64Input `pulumi:"memoryInGB"`
}

func (ResourceRequestsInvokeResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceRequestsInvokeResponse)(nil)).Elem()
}

func (i ResourceRequestsInvokeResponseArgs) ToResourceRequestsInvokeResponseOutput() ResourceRequestsInvokeResponseOutput {
	return i.ToResourceRequestsInvokeResponseOutputWithContext(context.Background())
}

func (i ResourceRequestsInvokeResponseArgs) ToResourceRequestsInvokeResponseOutputWithContext(ctx context.Context) ResourceRequestsInvokeResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceRequestsInvokeResponseOutput)
}

// The resource requests.
type ResourceRequestsInvokeResponseOutput struct{ *pulumi.OutputState }

func (ResourceRequestsInvokeResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceRequestsInvokeResponse)(nil)).Elem()
}

func (o ResourceRequestsInvokeResponseOutput) ToResourceRequestsInvokeResponseOutput() ResourceRequestsInvokeResponseOutput {
	return o
}

func (o ResourceRequestsInvokeResponseOutput) ToResourceRequestsInvokeResponseOutputWithContext(ctx context.Context) ResourceRequestsInvokeResponseOutput {
	return o
}

// The CPU request of this container instance.
func (o ResourceRequestsInvokeResponseOutput) Cpu() pulumi.Float64Output {
	return o.ApplyT(func(v ResourceRequestsInvokeResponse) float64 { return v.Cpu }).(pulumi.Float64Output)
}

// The GPU request of this container instance.
func (o ResourceRequestsInvokeResponseOutput) Gpu() GpuResourceInvokeResponsePtrOutput {
	return o.ApplyT(func(v ResourceRequestsInvokeResponse) *GpuResourceInvokeResponse { return v.Gpu }).(GpuResourceInvokeResponsePtrOutput)
}

// The memory request in GB of this container instance.
func (o ResourceRequestsInvokeResponseOutput) MemoryInGB() pulumi.Float64Output {
	return o.ApplyT(func(v ResourceRequestsInvokeResponse) float64 { return v.MemoryInGB }).(pulumi.Float64Output)
}

// The resource requests.
type ResourceRequestsResponse struct {
	// The CPU request of this container instance.
	Cpu float64 `pulumi:"cpu"`
	// The GPU request of this container instance.
	Gpu *GpuResourceResponse `pulumi:"gpu"`
	// The memory request in GB of this container instance.
	MemoryInGB float64 `pulumi:"memoryInGB"`
}

// ResourceRequestsResponseInput is an input type that accepts ResourceRequestsResponseArgs and ResourceRequestsResponseOutput values.
// You can construct a concrete instance of `ResourceRequestsResponseInput` via:
//
//          ResourceRequestsResponseArgs{...}
type ResourceRequestsResponseInput interface {
	pulumi.Input

	ToResourceRequestsResponseOutput() ResourceRequestsResponseOutput
	ToResourceRequestsResponseOutputWithContext(context.Context) ResourceRequestsResponseOutput
}

// The resource requests.
type ResourceRequestsResponseArgs struct {
	// The CPU request of this container instance.
	Cpu pulumi.Float64Input `pulumi:"cpu"`
	// The GPU request of this container instance.
	Gpu GpuResourceResponsePtrInput `pulumi:"gpu"`
	// The memory request in GB of this container instance.
	MemoryInGB pulumi.Float64Input `pulumi:"memoryInGB"`
}

func (ResourceRequestsResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceRequestsResponse)(nil)).Elem()
}

func (i ResourceRequestsResponseArgs) ToResourceRequestsResponseOutput() ResourceRequestsResponseOutput {
	return i.ToResourceRequestsResponseOutputWithContext(context.Background())
}

func (i ResourceRequestsResponseArgs) ToResourceRequestsResponseOutputWithContext(ctx context.Context) ResourceRequestsResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceRequestsResponseOutput)
}

// The resource requests.
type ResourceRequestsResponseOutput struct{ *pulumi.OutputState }

func (ResourceRequestsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceRequestsResponse)(nil)).Elem()
}

func (o ResourceRequestsResponseOutput) ToResourceRequestsResponseOutput() ResourceRequestsResponseOutput {
	return o
}

func (o ResourceRequestsResponseOutput) ToResourceRequestsResponseOutputWithContext(ctx context.Context) ResourceRequestsResponseOutput {
	return o
}

// The CPU request of this container instance.
func (o ResourceRequestsResponseOutput) Cpu() pulumi.Float64Output {
	return o.ApplyT(func(v ResourceRequestsResponse) float64 { return v.Cpu }).(pulumi.Float64Output)
}

// The GPU request of this container instance.
func (o ResourceRequestsResponseOutput) Gpu() GpuResourceResponsePtrOutput {
	return o.ApplyT(func(v ResourceRequestsResponse) *GpuResourceResponse { return v.Gpu }).(GpuResourceResponsePtrOutput)
}

// The memory request in GB of this container instance.
func (o ResourceRequestsResponseOutput) MemoryInGB() pulumi.Float64Output {
	return o.ApplyT(func(v ResourceRequestsResponse) float64 { return v.MemoryInGB }).(pulumi.Float64Output)
}

// The resource requirements.
type ResourceRequirements struct {
	// The resource limits of this container instance.
	Limits *ResourceLimits `pulumi:"limits"`
	// The resource requests of this container instance.
	Requests ResourceRequests `pulumi:"requests"`
}

// ResourceRequirementsInput is an input type that accepts ResourceRequirementsArgs and ResourceRequirementsOutput values.
// You can construct a concrete instance of `ResourceRequirementsInput` via:
//
//          ResourceRequirementsArgs{...}
type ResourceRequirementsInput interface {
	pulumi.Input

	ToResourceRequirementsOutput() ResourceRequirementsOutput
	ToResourceRequirementsOutputWithContext(context.Context) ResourceRequirementsOutput
}

// The resource requirements.
type ResourceRequirementsArgs struct {
	// The resource limits of this container instance.
	Limits ResourceLimitsPtrInput `pulumi:"limits"`
	// The resource requests of this container instance.
	Requests ResourceRequestsInput `pulumi:"requests"`
}

func (ResourceRequirementsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceRequirements)(nil)).Elem()
}

func (i ResourceRequirementsArgs) ToResourceRequirementsOutput() ResourceRequirementsOutput {
	return i.ToResourceRequirementsOutputWithContext(context.Background())
}

func (i ResourceRequirementsArgs) ToResourceRequirementsOutputWithContext(ctx context.Context) ResourceRequirementsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceRequirementsOutput)
}

// The resource requirements.
type ResourceRequirementsOutput struct{ *pulumi.OutputState }

func (ResourceRequirementsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceRequirements)(nil)).Elem()
}

func (o ResourceRequirementsOutput) ToResourceRequirementsOutput() ResourceRequirementsOutput {
	return o
}

func (o ResourceRequirementsOutput) ToResourceRequirementsOutputWithContext(ctx context.Context) ResourceRequirementsOutput {
	return o
}

// The resource limits of this container instance.
func (o ResourceRequirementsOutput) Limits() ResourceLimitsPtrOutput {
	return o.ApplyT(func(v ResourceRequirements) *ResourceLimits { return v.Limits }).(ResourceLimitsPtrOutput)
}

// The resource requests of this container instance.
func (o ResourceRequirementsOutput) Requests() ResourceRequestsOutput {
	return o.ApplyT(func(v ResourceRequirements) ResourceRequests { return v.Requests }).(ResourceRequestsOutput)
}

// The resource requirements.
type ResourceRequirementsInvokeResponse struct {
	// The resource limits of this container instance.
	Limits *ResourceLimitsInvokeResponse `pulumi:"limits"`
	// The resource requests of this container instance.
	Requests ResourceRequestsInvokeResponse `pulumi:"requests"`
}

// ResourceRequirementsInvokeResponseInput is an input type that accepts ResourceRequirementsInvokeResponseArgs and ResourceRequirementsInvokeResponseOutput values.
// You can construct a concrete instance of `ResourceRequirementsInvokeResponseInput` via:
//
//          ResourceRequirementsInvokeResponseArgs{...}
type ResourceRequirementsInvokeResponseInput interface {
	pulumi.Input

	ToResourceRequirementsInvokeResponseOutput() ResourceRequirementsInvokeResponseOutput
	ToResourceRequirementsInvokeResponseOutputWithContext(context.Context) ResourceRequirementsInvokeResponseOutput
}

// The resource requirements.
type ResourceRequirementsInvokeResponseArgs struct {
	// The resource limits of this container instance.
	Limits ResourceLimitsInvokeResponsePtrInput `pulumi:"limits"`
	// The resource requests of this container instance.
	Requests ResourceRequestsInvokeResponseInput `pulumi:"requests"`
}

func (ResourceRequirementsInvokeResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceRequirementsInvokeResponse)(nil)).Elem()
}

func (i ResourceRequirementsInvokeResponseArgs) ToResourceRequirementsInvokeResponseOutput() ResourceRequirementsInvokeResponseOutput {
	return i.ToResourceRequirementsInvokeResponseOutputWithContext(context.Background())
}

func (i ResourceRequirementsInvokeResponseArgs) ToResourceRequirementsInvokeResponseOutputWithContext(ctx context.Context) ResourceRequirementsInvokeResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceRequirementsInvokeResponseOutput)
}

// The resource requirements.
type ResourceRequirementsInvokeResponseOutput struct{ *pulumi.OutputState }

func (ResourceRequirementsInvokeResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceRequirementsInvokeResponse)(nil)).Elem()
}

func (o ResourceRequirementsInvokeResponseOutput) ToResourceRequirementsInvokeResponseOutput() ResourceRequirementsInvokeResponseOutput {
	return o
}

func (o ResourceRequirementsInvokeResponseOutput) ToResourceRequirementsInvokeResponseOutputWithContext(ctx context.Context) ResourceRequirementsInvokeResponseOutput {
	return o
}

// The resource limits of this container instance.
func (o ResourceRequirementsInvokeResponseOutput) Limits() ResourceLimitsInvokeResponsePtrOutput {
	return o.ApplyT(func(v ResourceRequirementsInvokeResponse) *ResourceLimitsInvokeResponse { return v.Limits }).(ResourceLimitsInvokeResponsePtrOutput)
}

// The resource requests of this container instance.
func (o ResourceRequirementsInvokeResponseOutput) Requests() ResourceRequestsInvokeResponseOutput {
	return o.ApplyT(func(v ResourceRequirementsInvokeResponse) ResourceRequestsInvokeResponse { return v.Requests }).(ResourceRequestsInvokeResponseOutput)
}

// The resource requirements.
type ResourceRequirementsResponse struct {
	// The resource limits of this container instance.
	Limits *ResourceLimitsResponse `pulumi:"limits"`
	// The resource requests of this container instance.
	Requests ResourceRequestsResponse `pulumi:"requests"`
}

// ResourceRequirementsResponseInput is an input type that accepts ResourceRequirementsResponseArgs and ResourceRequirementsResponseOutput values.
// You can construct a concrete instance of `ResourceRequirementsResponseInput` via:
//
//          ResourceRequirementsResponseArgs{...}
type ResourceRequirementsResponseInput interface {
	pulumi.Input

	ToResourceRequirementsResponseOutput() ResourceRequirementsResponseOutput
	ToResourceRequirementsResponseOutputWithContext(context.Context) ResourceRequirementsResponseOutput
}

// The resource requirements.
type ResourceRequirementsResponseArgs struct {
	// The resource limits of this container instance.
	Limits ResourceLimitsResponsePtrInput `pulumi:"limits"`
	// The resource requests of this container instance.
	Requests ResourceRequestsResponseInput `pulumi:"requests"`
}

func (ResourceRequirementsResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceRequirementsResponse)(nil)).Elem()
}

func (i ResourceRequirementsResponseArgs) ToResourceRequirementsResponseOutput() ResourceRequirementsResponseOutput {
	return i.ToResourceRequirementsResponseOutputWithContext(context.Background())
}

func (i ResourceRequirementsResponseArgs) ToResourceRequirementsResponseOutputWithContext(ctx context.Context) ResourceRequirementsResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceRequirementsResponseOutput)
}

// The resource requirements.
type ResourceRequirementsResponseOutput struct{ *pulumi.OutputState }

func (ResourceRequirementsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceRequirementsResponse)(nil)).Elem()
}

func (o ResourceRequirementsResponseOutput) ToResourceRequirementsResponseOutput() ResourceRequirementsResponseOutput {
	return o
}

func (o ResourceRequirementsResponseOutput) ToResourceRequirementsResponseOutputWithContext(ctx context.Context) ResourceRequirementsResponseOutput {
	return o
}

// The resource limits of this container instance.
func (o ResourceRequirementsResponseOutput) Limits() ResourceLimitsResponsePtrOutput {
	return o.ApplyT(func(v ResourceRequirementsResponse) *ResourceLimitsResponse { return v.Limits }).(ResourceLimitsResponsePtrOutput)
}

// The resource requests of this container instance.
func (o ResourceRequirementsResponseOutput) Requests() ResourceRequestsResponseOutput {
	return o.ApplyT(func(v ResourceRequirementsResponse) ResourceRequestsResponse { return v.Requests }).(ResourceRequestsResponseOutput)
}

// The properties of the volume.
type Volume struct {
	// The Azure File volume.
	AzureFile *AzureFileVolume `pulumi:"azureFile"`
	// The empty directory volume.
	EmptyDir interface{} `pulumi:"emptyDir"`
	// The git repo volume.
	GitRepo *GitRepoVolume `pulumi:"gitRepo"`
	// The name of the volume.
	Name string `pulumi:"name"`
	// The secret volume.
	Secret map[string]string `pulumi:"secret"`
}

// VolumeInput is an input type that accepts VolumeArgs and VolumeOutput values.
// You can construct a concrete instance of `VolumeInput` via:
//
//          VolumeArgs{...}
type VolumeInput interface {
	pulumi.Input

	ToVolumeOutput() VolumeOutput
	ToVolumeOutputWithContext(context.Context) VolumeOutput
}

// The properties of the volume.
type VolumeArgs struct {
	// The Azure File volume.
	AzureFile AzureFileVolumePtrInput `pulumi:"azureFile"`
	// The empty directory volume.
	EmptyDir pulumi.Input `pulumi:"emptyDir"`
	// The git repo volume.
	GitRepo GitRepoVolumePtrInput `pulumi:"gitRepo"`
	// The name of the volume.
	Name pulumi.StringInput `pulumi:"name"`
	// The secret volume.
	Secret pulumi.StringMapInput `pulumi:"secret"`
}

func (VolumeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Volume)(nil)).Elem()
}

func (i VolumeArgs) ToVolumeOutput() VolumeOutput {
	return i.ToVolumeOutputWithContext(context.Background())
}

func (i VolumeArgs) ToVolumeOutputWithContext(ctx context.Context) VolumeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VolumeOutput)
}

// VolumeArrayInput is an input type that accepts VolumeArray and VolumeArrayOutput values.
// You can construct a concrete instance of `VolumeArrayInput` via:
//
//          VolumeArray{ VolumeArgs{...} }
type VolumeArrayInput interface {
	pulumi.Input

	ToVolumeArrayOutput() VolumeArrayOutput
	ToVolumeArrayOutputWithContext(context.Context) VolumeArrayOutput
}

type VolumeArray []VolumeInput

func (VolumeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Volume)(nil)).Elem()
}

func (i VolumeArray) ToVolumeArrayOutput() VolumeArrayOutput {
	return i.ToVolumeArrayOutputWithContext(context.Background())
}

func (i VolumeArray) ToVolumeArrayOutputWithContext(ctx context.Context) VolumeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VolumeArrayOutput)
}

// The properties of the volume.
type VolumeOutput struct{ *pulumi.OutputState }

func (VolumeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Volume)(nil)).Elem()
}

func (o VolumeOutput) ToVolumeOutput() VolumeOutput {
	return o
}

func (o VolumeOutput) ToVolumeOutputWithContext(ctx context.Context) VolumeOutput {
	return o
}

// The Azure File volume.
func (o VolumeOutput) AzureFile() AzureFileVolumePtrOutput {
	return o.ApplyT(func(v Volume) *AzureFileVolume { return v.AzureFile }).(AzureFileVolumePtrOutput)
}

// The empty directory volume.
func (o VolumeOutput) EmptyDir() pulumi.AnyOutput {
	return o.ApplyT(func(v Volume) interface{} { return v.EmptyDir }).(pulumi.AnyOutput)
}

// The git repo volume.
func (o VolumeOutput) GitRepo() GitRepoVolumePtrOutput {
	return o.ApplyT(func(v Volume) *GitRepoVolume { return v.GitRepo }).(GitRepoVolumePtrOutput)
}

// The name of the volume.
func (o VolumeOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v Volume) string { return v.Name }).(pulumi.StringOutput)
}

// The secret volume.
func (o VolumeOutput) Secret() pulumi.StringMapOutput {
	return o.ApplyT(func(v Volume) map[string]string { return v.Secret }).(pulumi.StringMapOutput)
}

type VolumeArrayOutput struct{ *pulumi.OutputState }

func (VolumeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Volume)(nil)).Elem()
}

func (o VolumeArrayOutput) ToVolumeArrayOutput() VolumeArrayOutput {
	return o
}

func (o VolumeArrayOutput) ToVolumeArrayOutputWithContext(ctx context.Context) VolumeArrayOutput {
	return o
}

func (o VolumeArrayOutput) Index(i pulumi.IntInput) VolumeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) Volume {
		return vs[0].([]Volume)[vs[1].(int)]
	}).(VolumeOutput)
}

// The properties of the volume.
type VolumeInvokeResponse struct {
	// The Azure File volume.
	AzureFile *AzureFileVolumeInvokeResponse `pulumi:"azureFile"`
	// The empty directory volume.
	EmptyDir interface{} `pulumi:"emptyDir"`
	// The git repo volume.
	GitRepo *GitRepoVolumeInvokeResponse `pulumi:"gitRepo"`
	// The name of the volume.
	Name string `pulumi:"name"`
	// The secret volume.
	Secret map[string]string `pulumi:"secret"`
}

// VolumeInvokeResponseInput is an input type that accepts VolumeInvokeResponseArgs and VolumeInvokeResponseOutput values.
// You can construct a concrete instance of `VolumeInvokeResponseInput` via:
//
//          VolumeInvokeResponseArgs{...}
type VolumeInvokeResponseInput interface {
	pulumi.Input

	ToVolumeInvokeResponseOutput() VolumeInvokeResponseOutput
	ToVolumeInvokeResponseOutputWithContext(context.Context) VolumeInvokeResponseOutput
}

// The properties of the volume.
type VolumeInvokeResponseArgs struct {
	// The Azure File volume.
	AzureFile AzureFileVolumeInvokeResponsePtrInput `pulumi:"azureFile"`
	// The empty directory volume.
	EmptyDir pulumi.Input `pulumi:"emptyDir"`
	// The git repo volume.
	GitRepo GitRepoVolumeInvokeResponsePtrInput `pulumi:"gitRepo"`
	// The name of the volume.
	Name pulumi.StringInput `pulumi:"name"`
	// The secret volume.
	Secret pulumi.StringMapInput `pulumi:"secret"`
}

func (VolumeInvokeResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VolumeInvokeResponse)(nil)).Elem()
}

func (i VolumeInvokeResponseArgs) ToVolumeInvokeResponseOutput() VolumeInvokeResponseOutput {
	return i.ToVolumeInvokeResponseOutputWithContext(context.Background())
}

func (i VolumeInvokeResponseArgs) ToVolumeInvokeResponseOutputWithContext(ctx context.Context) VolumeInvokeResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VolumeInvokeResponseOutput)
}

// VolumeInvokeResponseArrayInput is an input type that accepts VolumeInvokeResponseArray and VolumeInvokeResponseArrayOutput values.
// You can construct a concrete instance of `VolumeInvokeResponseArrayInput` via:
//
//          VolumeInvokeResponseArray{ VolumeInvokeResponseArgs{...} }
type VolumeInvokeResponseArrayInput interface {
	pulumi.Input

	ToVolumeInvokeResponseArrayOutput() VolumeInvokeResponseArrayOutput
	ToVolumeInvokeResponseArrayOutputWithContext(context.Context) VolumeInvokeResponseArrayOutput
}

type VolumeInvokeResponseArray []VolumeInvokeResponseInput

func (VolumeInvokeResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]VolumeInvokeResponse)(nil)).Elem()
}

func (i VolumeInvokeResponseArray) ToVolumeInvokeResponseArrayOutput() VolumeInvokeResponseArrayOutput {
	return i.ToVolumeInvokeResponseArrayOutputWithContext(context.Background())
}

func (i VolumeInvokeResponseArray) ToVolumeInvokeResponseArrayOutputWithContext(ctx context.Context) VolumeInvokeResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VolumeInvokeResponseArrayOutput)
}

// The properties of the volume.
type VolumeInvokeResponseOutput struct{ *pulumi.OutputState }

func (VolumeInvokeResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VolumeInvokeResponse)(nil)).Elem()
}

func (o VolumeInvokeResponseOutput) ToVolumeInvokeResponseOutput() VolumeInvokeResponseOutput {
	return o
}

func (o VolumeInvokeResponseOutput) ToVolumeInvokeResponseOutputWithContext(ctx context.Context) VolumeInvokeResponseOutput {
	return o
}

// The Azure File volume.
func (o VolumeInvokeResponseOutput) AzureFile() AzureFileVolumeInvokeResponsePtrOutput {
	return o.ApplyT(func(v VolumeInvokeResponse) *AzureFileVolumeInvokeResponse { return v.AzureFile }).(AzureFileVolumeInvokeResponsePtrOutput)
}

// The empty directory volume.
func (o VolumeInvokeResponseOutput) EmptyDir() pulumi.AnyOutput {
	return o.ApplyT(func(v VolumeInvokeResponse) interface{} { return v.EmptyDir }).(pulumi.AnyOutput)
}

// The git repo volume.
func (o VolumeInvokeResponseOutput) GitRepo() GitRepoVolumeInvokeResponsePtrOutput {
	return o.ApplyT(func(v VolumeInvokeResponse) *GitRepoVolumeInvokeResponse { return v.GitRepo }).(GitRepoVolumeInvokeResponsePtrOutput)
}

// The name of the volume.
func (o VolumeInvokeResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v VolumeInvokeResponse) string { return v.Name }).(pulumi.StringOutput)
}

// The secret volume.
func (o VolumeInvokeResponseOutput) Secret() pulumi.StringMapOutput {
	return o.ApplyT(func(v VolumeInvokeResponse) map[string]string { return v.Secret }).(pulumi.StringMapOutput)
}

type VolumeInvokeResponseArrayOutput struct{ *pulumi.OutputState }

func (VolumeInvokeResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]VolumeInvokeResponse)(nil)).Elem()
}

func (o VolumeInvokeResponseArrayOutput) ToVolumeInvokeResponseArrayOutput() VolumeInvokeResponseArrayOutput {
	return o
}

func (o VolumeInvokeResponseArrayOutput) ToVolumeInvokeResponseArrayOutputWithContext(ctx context.Context) VolumeInvokeResponseArrayOutput {
	return o
}

func (o VolumeInvokeResponseArrayOutput) Index(i pulumi.IntInput) VolumeInvokeResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) VolumeInvokeResponse {
		return vs[0].([]VolumeInvokeResponse)[vs[1].(int)]
	}).(VolumeInvokeResponseOutput)
}

// The properties of the volume mount.
type VolumeMount struct {
	// The path within the container where the volume should be mounted. Must not contain colon (:).
	MountPath string `pulumi:"mountPath"`
	// The name of the volume mount.
	Name string `pulumi:"name"`
	// The flag indicating whether the volume mount is read-only.
	ReadOnly *bool `pulumi:"readOnly"`
}

// VolumeMountInput is an input type that accepts VolumeMountArgs and VolumeMountOutput values.
// You can construct a concrete instance of `VolumeMountInput` via:
//
//          VolumeMountArgs{...}
type VolumeMountInput interface {
	pulumi.Input

	ToVolumeMountOutput() VolumeMountOutput
	ToVolumeMountOutputWithContext(context.Context) VolumeMountOutput
}

// The properties of the volume mount.
type VolumeMountArgs struct {
	// The path within the container where the volume should be mounted. Must not contain colon (:).
	MountPath pulumi.StringInput `pulumi:"mountPath"`
	// The name of the volume mount.
	Name pulumi.StringInput `pulumi:"name"`
	// The flag indicating whether the volume mount is read-only.
	ReadOnly pulumi.BoolPtrInput `pulumi:"readOnly"`
}

func (VolumeMountArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VolumeMount)(nil)).Elem()
}

func (i VolumeMountArgs) ToVolumeMountOutput() VolumeMountOutput {
	return i.ToVolumeMountOutputWithContext(context.Background())
}

func (i VolumeMountArgs) ToVolumeMountOutputWithContext(ctx context.Context) VolumeMountOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VolumeMountOutput)
}

// VolumeMountArrayInput is an input type that accepts VolumeMountArray and VolumeMountArrayOutput values.
// You can construct a concrete instance of `VolumeMountArrayInput` via:
//
//          VolumeMountArray{ VolumeMountArgs{...} }
type VolumeMountArrayInput interface {
	pulumi.Input

	ToVolumeMountArrayOutput() VolumeMountArrayOutput
	ToVolumeMountArrayOutputWithContext(context.Context) VolumeMountArrayOutput
}

type VolumeMountArray []VolumeMountInput

func (VolumeMountArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]VolumeMount)(nil)).Elem()
}

func (i VolumeMountArray) ToVolumeMountArrayOutput() VolumeMountArrayOutput {
	return i.ToVolumeMountArrayOutputWithContext(context.Background())
}

func (i VolumeMountArray) ToVolumeMountArrayOutputWithContext(ctx context.Context) VolumeMountArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VolumeMountArrayOutput)
}

// The properties of the volume mount.
type VolumeMountOutput struct{ *pulumi.OutputState }

func (VolumeMountOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VolumeMount)(nil)).Elem()
}

func (o VolumeMountOutput) ToVolumeMountOutput() VolumeMountOutput {
	return o
}

func (o VolumeMountOutput) ToVolumeMountOutputWithContext(ctx context.Context) VolumeMountOutput {
	return o
}

// The path within the container where the volume should be mounted. Must not contain colon (:).
func (o VolumeMountOutput) MountPath() pulumi.StringOutput {
	return o.ApplyT(func(v VolumeMount) string { return v.MountPath }).(pulumi.StringOutput)
}

// The name of the volume mount.
func (o VolumeMountOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v VolumeMount) string { return v.Name }).(pulumi.StringOutput)
}

// The flag indicating whether the volume mount is read-only.
func (o VolumeMountOutput) ReadOnly() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v VolumeMount) *bool { return v.ReadOnly }).(pulumi.BoolPtrOutput)
}

type VolumeMountArrayOutput struct{ *pulumi.OutputState }

func (VolumeMountArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]VolumeMount)(nil)).Elem()
}

func (o VolumeMountArrayOutput) ToVolumeMountArrayOutput() VolumeMountArrayOutput {
	return o
}

func (o VolumeMountArrayOutput) ToVolumeMountArrayOutputWithContext(ctx context.Context) VolumeMountArrayOutput {
	return o
}

func (o VolumeMountArrayOutput) Index(i pulumi.IntInput) VolumeMountOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) VolumeMount {
		return vs[0].([]VolumeMount)[vs[1].(int)]
	}).(VolumeMountOutput)
}

// The properties of the volume mount.
type VolumeMountInvokeResponse struct {
	// The path within the container where the volume should be mounted. Must not contain colon (:).
	MountPath string `pulumi:"mountPath"`
	// The name of the volume mount.
	Name string `pulumi:"name"`
	// The flag indicating whether the volume mount is read-only.
	ReadOnly *bool `pulumi:"readOnly"`
}

// VolumeMountInvokeResponseInput is an input type that accepts VolumeMountInvokeResponseArgs and VolumeMountInvokeResponseOutput values.
// You can construct a concrete instance of `VolumeMountInvokeResponseInput` via:
//
//          VolumeMountInvokeResponseArgs{...}
type VolumeMountInvokeResponseInput interface {
	pulumi.Input

	ToVolumeMountInvokeResponseOutput() VolumeMountInvokeResponseOutput
	ToVolumeMountInvokeResponseOutputWithContext(context.Context) VolumeMountInvokeResponseOutput
}

// The properties of the volume mount.
type VolumeMountInvokeResponseArgs struct {
	// The path within the container where the volume should be mounted. Must not contain colon (:).
	MountPath pulumi.StringInput `pulumi:"mountPath"`
	// The name of the volume mount.
	Name pulumi.StringInput `pulumi:"name"`
	// The flag indicating whether the volume mount is read-only.
	ReadOnly pulumi.BoolPtrInput `pulumi:"readOnly"`
}

func (VolumeMountInvokeResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VolumeMountInvokeResponse)(nil)).Elem()
}

func (i VolumeMountInvokeResponseArgs) ToVolumeMountInvokeResponseOutput() VolumeMountInvokeResponseOutput {
	return i.ToVolumeMountInvokeResponseOutputWithContext(context.Background())
}

func (i VolumeMountInvokeResponseArgs) ToVolumeMountInvokeResponseOutputWithContext(ctx context.Context) VolumeMountInvokeResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VolumeMountInvokeResponseOutput)
}

// VolumeMountInvokeResponseArrayInput is an input type that accepts VolumeMountInvokeResponseArray and VolumeMountInvokeResponseArrayOutput values.
// You can construct a concrete instance of `VolumeMountInvokeResponseArrayInput` via:
//
//          VolumeMountInvokeResponseArray{ VolumeMountInvokeResponseArgs{...} }
type VolumeMountInvokeResponseArrayInput interface {
	pulumi.Input

	ToVolumeMountInvokeResponseArrayOutput() VolumeMountInvokeResponseArrayOutput
	ToVolumeMountInvokeResponseArrayOutputWithContext(context.Context) VolumeMountInvokeResponseArrayOutput
}

type VolumeMountInvokeResponseArray []VolumeMountInvokeResponseInput

func (VolumeMountInvokeResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]VolumeMountInvokeResponse)(nil)).Elem()
}

func (i VolumeMountInvokeResponseArray) ToVolumeMountInvokeResponseArrayOutput() VolumeMountInvokeResponseArrayOutput {
	return i.ToVolumeMountInvokeResponseArrayOutputWithContext(context.Background())
}

func (i VolumeMountInvokeResponseArray) ToVolumeMountInvokeResponseArrayOutputWithContext(ctx context.Context) VolumeMountInvokeResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VolumeMountInvokeResponseArrayOutput)
}

// The properties of the volume mount.
type VolumeMountInvokeResponseOutput struct{ *pulumi.OutputState }

func (VolumeMountInvokeResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VolumeMountInvokeResponse)(nil)).Elem()
}

func (o VolumeMountInvokeResponseOutput) ToVolumeMountInvokeResponseOutput() VolumeMountInvokeResponseOutput {
	return o
}

func (o VolumeMountInvokeResponseOutput) ToVolumeMountInvokeResponseOutputWithContext(ctx context.Context) VolumeMountInvokeResponseOutput {
	return o
}

// The path within the container where the volume should be mounted. Must not contain colon (:).
func (o VolumeMountInvokeResponseOutput) MountPath() pulumi.StringOutput {
	return o.ApplyT(func(v VolumeMountInvokeResponse) string { return v.MountPath }).(pulumi.StringOutput)
}

// The name of the volume mount.
func (o VolumeMountInvokeResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v VolumeMountInvokeResponse) string { return v.Name }).(pulumi.StringOutput)
}

// The flag indicating whether the volume mount is read-only.
func (o VolumeMountInvokeResponseOutput) ReadOnly() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v VolumeMountInvokeResponse) *bool { return v.ReadOnly }).(pulumi.BoolPtrOutput)
}

type VolumeMountInvokeResponseArrayOutput struct{ *pulumi.OutputState }

func (VolumeMountInvokeResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]VolumeMountInvokeResponse)(nil)).Elem()
}

func (o VolumeMountInvokeResponseArrayOutput) ToVolumeMountInvokeResponseArrayOutput() VolumeMountInvokeResponseArrayOutput {
	return o
}

func (o VolumeMountInvokeResponseArrayOutput) ToVolumeMountInvokeResponseArrayOutputWithContext(ctx context.Context) VolumeMountInvokeResponseArrayOutput {
	return o
}

func (o VolumeMountInvokeResponseArrayOutput) Index(i pulumi.IntInput) VolumeMountInvokeResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) VolumeMountInvokeResponse {
		return vs[0].([]VolumeMountInvokeResponse)[vs[1].(int)]
	}).(VolumeMountInvokeResponseOutput)
}

// The properties of the volume mount.
type VolumeMountResponse struct {
	// The path within the container where the volume should be mounted. Must not contain colon (:).
	MountPath string `pulumi:"mountPath"`
	// The name of the volume mount.
	Name string `pulumi:"name"`
	// The flag indicating whether the volume mount is read-only.
	ReadOnly *bool `pulumi:"readOnly"`
}

// VolumeMountResponseInput is an input type that accepts VolumeMountResponseArgs and VolumeMountResponseOutput values.
// You can construct a concrete instance of `VolumeMountResponseInput` via:
//
//          VolumeMountResponseArgs{...}
type VolumeMountResponseInput interface {
	pulumi.Input

	ToVolumeMountResponseOutput() VolumeMountResponseOutput
	ToVolumeMountResponseOutputWithContext(context.Context) VolumeMountResponseOutput
}

// The properties of the volume mount.
type VolumeMountResponseArgs struct {
	// The path within the container where the volume should be mounted. Must not contain colon (:).
	MountPath pulumi.StringInput `pulumi:"mountPath"`
	// The name of the volume mount.
	Name pulumi.StringInput `pulumi:"name"`
	// The flag indicating whether the volume mount is read-only.
	ReadOnly pulumi.BoolPtrInput `pulumi:"readOnly"`
}

func (VolumeMountResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VolumeMountResponse)(nil)).Elem()
}

func (i VolumeMountResponseArgs) ToVolumeMountResponseOutput() VolumeMountResponseOutput {
	return i.ToVolumeMountResponseOutputWithContext(context.Background())
}

func (i VolumeMountResponseArgs) ToVolumeMountResponseOutputWithContext(ctx context.Context) VolumeMountResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VolumeMountResponseOutput)
}

// VolumeMountResponseArrayInput is an input type that accepts VolumeMountResponseArray and VolumeMountResponseArrayOutput values.
// You can construct a concrete instance of `VolumeMountResponseArrayInput` via:
//
//          VolumeMountResponseArray{ VolumeMountResponseArgs{...} }
type VolumeMountResponseArrayInput interface {
	pulumi.Input

	ToVolumeMountResponseArrayOutput() VolumeMountResponseArrayOutput
	ToVolumeMountResponseArrayOutputWithContext(context.Context) VolumeMountResponseArrayOutput
}

type VolumeMountResponseArray []VolumeMountResponseInput

func (VolumeMountResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]VolumeMountResponse)(nil)).Elem()
}

func (i VolumeMountResponseArray) ToVolumeMountResponseArrayOutput() VolumeMountResponseArrayOutput {
	return i.ToVolumeMountResponseArrayOutputWithContext(context.Background())
}

func (i VolumeMountResponseArray) ToVolumeMountResponseArrayOutputWithContext(ctx context.Context) VolumeMountResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VolumeMountResponseArrayOutput)
}

// The properties of the volume mount.
type VolumeMountResponseOutput struct{ *pulumi.OutputState }

func (VolumeMountResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VolumeMountResponse)(nil)).Elem()
}

func (o VolumeMountResponseOutput) ToVolumeMountResponseOutput() VolumeMountResponseOutput {
	return o
}

func (o VolumeMountResponseOutput) ToVolumeMountResponseOutputWithContext(ctx context.Context) VolumeMountResponseOutput {
	return o
}

// The path within the container where the volume should be mounted. Must not contain colon (:).
func (o VolumeMountResponseOutput) MountPath() pulumi.StringOutput {
	return o.ApplyT(func(v VolumeMountResponse) string { return v.MountPath }).(pulumi.StringOutput)
}

// The name of the volume mount.
func (o VolumeMountResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v VolumeMountResponse) string { return v.Name }).(pulumi.StringOutput)
}

// The flag indicating whether the volume mount is read-only.
func (o VolumeMountResponseOutput) ReadOnly() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v VolumeMountResponse) *bool { return v.ReadOnly }).(pulumi.BoolPtrOutput)
}

type VolumeMountResponseArrayOutput struct{ *pulumi.OutputState }

func (VolumeMountResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]VolumeMountResponse)(nil)).Elem()
}

func (o VolumeMountResponseArrayOutput) ToVolumeMountResponseArrayOutput() VolumeMountResponseArrayOutput {
	return o
}

func (o VolumeMountResponseArrayOutput) ToVolumeMountResponseArrayOutputWithContext(ctx context.Context) VolumeMountResponseArrayOutput {
	return o
}

func (o VolumeMountResponseArrayOutput) Index(i pulumi.IntInput) VolumeMountResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) VolumeMountResponse {
		return vs[0].([]VolumeMountResponse)[vs[1].(int)]
	}).(VolumeMountResponseOutput)
}

// The properties of the volume.
type VolumeResponse struct {
	// The Azure File volume.
	AzureFile *AzureFileVolumeResponse `pulumi:"azureFile"`
	// The empty directory volume.
	EmptyDir interface{} `pulumi:"emptyDir"`
	// The git repo volume.
	GitRepo *GitRepoVolumeResponse `pulumi:"gitRepo"`
	// The name of the volume.
	Name string `pulumi:"name"`
	// The secret volume.
	Secret map[string]string `pulumi:"secret"`
}

// VolumeResponseInput is an input type that accepts VolumeResponseArgs and VolumeResponseOutput values.
// You can construct a concrete instance of `VolumeResponseInput` via:
//
//          VolumeResponseArgs{...}
type VolumeResponseInput interface {
	pulumi.Input

	ToVolumeResponseOutput() VolumeResponseOutput
	ToVolumeResponseOutputWithContext(context.Context) VolumeResponseOutput
}

// The properties of the volume.
type VolumeResponseArgs struct {
	// The Azure File volume.
	AzureFile AzureFileVolumeResponsePtrInput `pulumi:"azureFile"`
	// The empty directory volume.
	EmptyDir pulumi.Input `pulumi:"emptyDir"`
	// The git repo volume.
	GitRepo GitRepoVolumeResponsePtrInput `pulumi:"gitRepo"`
	// The name of the volume.
	Name pulumi.StringInput `pulumi:"name"`
	// The secret volume.
	Secret pulumi.StringMapInput `pulumi:"secret"`
}

func (VolumeResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VolumeResponse)(nil)).Elem()
}

func (i VolumeResponseArgs) ToVolumeResponseOutput() VolumeResponseOutput {
	return i.ToVolumeResponseOutputWithContext(context.Background())
}

func (i VolumeResponseArgs) ToVolumeResponseOutputWithContext(ctx context.Context) VolumeResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VolumeResponseOutput)
}

// VolumeResponseArrayInput is an input type that accepts VolumeResponseArray and VolumeResponseArrayOutput values.
// You can construct a concrete instance of `VolumeResponseArrayInput` via:
//
//          VolumeResponseArray{ VolumeResponseArgs{...} }
type VolumeResponseArrayInput interface {
	pulumi.Input

	ToVolumeResponseArrayOutput() VolumeResponseArrayOutput
	ToVolumeResponseArrayOutputWithContext(context.Context) VolumeResponseArrayOutput
}

type VolumeResponseArray []VolumeResponseInput

func (VolumeResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]VolumeResponse)(nil)).Elem()
}

func (i VolumeResponseArray) ToVolumeResponseArrayOutput() VolumeResponseArrayOutput {
	return i.ToVolumeResponseArrayOutputWithContext(context.Background())
}

func (i VolumeResponseArray) ToVolumeResponseArrayOutputWithContext(ctx context.Context) VolumeResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VolumeResponseArrayOutput)
}

// The properties of the volume.
type VolumeResponseOutput struct{ *pulumi.OutputState }

func (VolumeResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VolumeResponse)(nil)).Elem()
}

func (o VolumeResponseOutput) ToVolumeResponseOutput() VolumeResponseOutput {
	return o
}

func (o VolumeResponseOutput) ToVolumeResponseOutputWithContext(ctx context.Context) VolumeResponseOutput {
	return o
}

// The Azure File volume.
func (o VolumeResponseOutput) AzureFile() AzureFileVolumeResponsePtrOutput {
	return o.ApplyT(func(v VolumeResponse) *AzureFileVolumeResponse { return v.AzureFile }).(AzureFileVolumeResponsePtrOutput)
}

// The empty directory volume.
func (o VolumeResponseOutput) EmptyDir() pulumi.AnyOutput {
	return o.ApplyT(func(v VolumeResponse) interface{} { return v.EmptyDir }).(pulumi.AnyOutput)
}

// The git repo volume.
func (o VolumeResponseOutput) GitRepo() GitRepoVolumeResponsePtrOutput {
	return o.ApplyT(func(v VolumeResponse) *GitRepoVolumeResponse { return v.GitRepo }).(GitRepoVolumeResponsePtrOutput)
}

// The name of the volume.
func (o VolumeResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v VolumeResponse) string { return v.Name }).(pulumi.StringOutput)
}

// The secret volume.
func (o VolumeResponseOutput) Secret() pulumi.StringMapOutput {
	return o.ApplyT(func(v VolumeResponse) map[string]string { return v.Secret }).(pulumi.StringMapOutput)
}

type VolumeResponseArrayOutput struct{ *pulumi.OutputState }

func (VolumeResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]VolumeResponse)(nil)).Elem()
}

func (o VolumeResponseArrayOutput) ToVolumeResponseArrayOutput() VolumeResponseArrayOutput {
	return o
}

func (o VolumeResponseArrayOutput) ToVolumeResponseArrayOutputWithContext(ctx context.Context) VolumeResponseArrayOutput {
	return o
}

func (o VolumeResponseArrayOutput) Index(i pulumi.IntInput) VolumeResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) VolumeResponse {
		return vs[0].([]VolumeResponse)[vs[1].(int)]
	}).(VolumeResponseOutput)
}

func init() {
	pulumi.RegisterOutputType(AzureFileVolumeOutput{})
	pulumi.RegisterOutputType(AzureFileVolumePtrOutput{})
	pulumi.RegisterOutputType(AzureFileVolumeInvokeResponseOutput{})
	pulumi.RegisterOutputType(AzureFileVolumeInvokeResponsePtrOutput{})
	pulumi.RegisterOutputType(AzureFileVolumeResponseOutput{})
	pulumi.RegisterOutputType(AzureFileVolumeResponsePtrOutput{})
	pulumi.RegisterOutputType(ContainerOutput{})
	pulumi.RegisterOutputType(ContainerArrayOutput{})
	pulumi.RegisterOutputType(ContainerExecOutput{})
	pulumi.RegisterOutputType(ContainerExecPtrOutput{})
	pulumi.RegisterOutputType(ContainerExecInvokeResponseOutput{})
	pulumi.RegisterOutputType(ContainerExecInvokeResponsePtrOutput{})
	pulumi.RegisterOutputType(ContainerExecResponseOutput{})
	pulumi.RegisterOutputType(ContainerExecResponsePtrOutput{})
	pulumi.RegisterOutputType(ContainerGroupDiagnosticsOutput{})
	pulumi.RegisterOutputType(ContainerGroupDiagnosticsPtrOutput{})
	pulumi.RegisterOutputType(ContainerGroupDiagnosticsInvokeResponseOutput{})
	pulumi.RegisterOutputType(ContainerGroupDiagnosticsResponseOutput{})
	pulumi.RegisterOutputType(ContainerGroupDiagnosticsResponsePtrOutput{})
	pulumi.RegisterOutputType(ContainerGroupIdentityOutput{})
	pulumi.RegisterOutputType(ContainerGroupIdentityPtrOutput{})
	pulumi.RegisterOutputType(ContainerGroupIdentityInvokeResponseOutput{})
	pulumi.RegisterOutputType(ContainerGroupIdentityInvokeResponseUserAssignedIdentitiesOutput{})
	pulumi.RegisterOutputType(ContainerGroupIdentityInvokeResponseUserAssignedIdentitiesMapOutput{})
	pulumi.RegisterOutputType(ContainerGroupIdentityResponseOutput{})
	pulumi.RegisterOutputType(ContainerGroupIdentityResponsePtrOutput{})
	pulumi.RegisterOutputType(ContainerGroupIdentityResponseUserAssignedIdentitiesOutput{})
	pulumi.RegisterOutputType(ContainerGroupIdentityResponseUserAssignedIdentitiesMapOutput{})
	pulumi.RegisterOutputType(ContainerGroupInvokeResponseInstanceViewOutput{})
	pulumi.RegisterOutputType(ContainerGroupNetworkProfileOutput{})
	pulumi.RegisterOutputType(ContainerGroupNetworkProfilePtrOutput{})
	pulumi.RegisterOutputType(ContainerGroupNetworkProfileInvokeResponseOutput{})
	pulumi.RegisterOutputType(ContainerGroupNetworkProfileResponseOutput{})
	pulumi.RegisterOutputType(ContainerGroupNetworkProfileResponsePtrOutput{})
	pulumi.RegisterOutputType(ContainerGroupResponseInstanceViewOutput{})
	pulumi.RegisterOutputType(ContainerGroupResponseInstanceViewPtrOutput{})
	pulumi.RegisterOutputType(ContainerHttpGetOutput{})
	pulumi.RegisterOutputType(ContainerHttpGetPtrOutput{})
	pulumi.RegisterOutputType(ContainerHttpGetInvokeResponseOutput{})
	pulumi.RegisterOutputType(ContainerHttpGetInvokeResponsePtrOutput{})
	pulumi.RegisterOutputType(ContainerHttpGetResponseOutput{})
	pulumi.RegisterOutputType(ContainerHttpGetResponsePtrOutput{})
	pulumi.RegisterOutputType(ContainerInvokeResponseOutput{})
	pulumi.RegisterOutputType(ContainerInvokeResponseArrayOutput{})
	pulumi.RegisterOutputType(ContainerPortOutput{})
	pulumi.RegisterOutputType(ContainerPortArrayOutput{})
	pulumi.RegisterOutputType(ContainerPortInvokeResponseOutput{})
	pulumi.RegisterOutputType(ContainerPortInvokeResponseArrayOutput{})
	pulumi.RegisterOutputType(ContainerPortResponseOutput{})
	pulumi.RegisterOutputType(ContainerPortResponseArrayOutput{})
	pulumi.RegisterOutputType(ContainerProbeOutput{})
	pulumi.RegisterOutputType(ContainerProbePtrOutput{})
	pulumi.RegisterOutputType(ContainerProbeInvokeResponseOutput{})
	pulumi.RegisterOutputType(ContainerProbeInvokeResponsePtrOutput{})
	pulumi.RegisterOutputType(ContainerProbeResponseOutput{})
	pulumi.RegisterOutputType(ContainerProbeResponsePtrOutput{})
	pulumi.RegisterOutputType(ContainerPropertiesInvokeResponseInstanceViewOutput{})
	pulumi.RegisterOutputType(ContainerPropertiesResponseInstanceViewOutput{})
	pulumi.RegisterOutputType(ContainerResponseOutput{})
	pulumi.RegisterOutputType(ContainerResponseArrayOutput{})
	pulumi.RegisterOutputType(ContainerStateInvokeResponseOutput{})
	pulumi.RegisterOutputType(ContainerStateResponseOutput{})
	pulumi.RegisterOutputType(DnsConfigurationOutput{})
	pulumi.RegisterOutputType(DnsConfigurationPtrOutput{})
	pulumi.RegisterOutputType(DnsConfigurationInvokeResponseOutput{})
	pulumi.RegisterOutputType(DnsConfigurationResponseOutput{})
	pulumi.RegisterOutputType(DnsConfigurationResponsePtrOutput{})
	pulumi.RegisterOutputType(EnvironmentVariableOutput{})
	pulumi.RegisterOutputType(EnvironmentVariableArrayOutput{})
	pulumi.RegisterOutputType(EnvironmentVariableInvokeResponseOutput{})
	pulumi.RegisterOutputType(EnvironmentVariableInvokeResponseArrayOutput{})
	pulumi.RegisterOutputType(EnvironmentVariableResponseOutput{})
	pulumi.RegisterOutputType(EnvironmentVariableResponseArrayOutput{})
	pulumi.RegisterOutputType(EventInvokeResponseOutput{})
	pulumi.RegisterOutputType(EventInvokeResponseArrayOutput{})
	pulumi.RegisterOutputType(EventResponseOutput{})
	pulumi.RegisterOutputType(EventResponseArrayOutput{})
	pulumi.RegisterOutputType(GitRepoVolumeOutput{})
	pulumi.RegisterOutputType(GitRepoVolumePtrOutput{})
	pulumi.RegisterOutputType(GitRepoVolumeInvokeResponseOutput{})
	pulumi.RegisterOutputType(GitRepoVolumeInvokeResponsePtrOutput{})
	pulumi.RegisterOutputType(GitRepoVolumeResponseOutput{})
	pulumi.RegisterOutputType(GitRepoVolumeResponsePtrOutput{})
	pulumi.RegisterOutputType(GpuResourceOutput{})
	pulumi.RegisterOutputType(GpuResourcePtrOutput{})
	pulumi.RegisterOutputType(GpuResourceInvokeResponseOutput{})
	pulumi.RegisterOutputType(GpuResourceInvokeResponsePtrOutput{})
	pulumi.RegisterOutputType(GpuResourceResponseOutput{})
	pulumi.RegisterOutputType(GpuResourceResponsePtrOutput{})
	pulumi.RegisterOutputType(ImageRegistryCredentialOutput{})
	pulumi.RegisterOutputType(ImageRegistryCredentialArrayOutput{})
	pulumi.RegisterOutputType(ImageRegistryCredentialInvokeResponseOutput{})
	pulumi.RegisterOutputType(ImageRegistryCredentialInvokeResponseArrayOutput{})
	pulumi.RegisterOutputType(ImageRegistryCredentialResponseOutput{})
	pulumi.RegisterOutputType(ImageRegistryCredentialResponseArrayOutput{})
	pulumi.RegisterOutputType(IpAddressOutput{})
	pulumi.RegisterOutputType(IpAddressPtrOutput{})
	pulumi.RegisterOutputType(IpAddressInvokeResponseOutput{})
	pulumi.RegisterOutputType(IpAddressResponseOutput{})
	pulumi.RegisterOutputType(IpAddressResponsePtrOutput{})
	pulumi.RegisterOutputType(LogAnalyticsOutput{})
	pulumi.RegisterOutputType(LogAnalyticsPtrOutput{})
	pulumi.RegisterOutputType(LogAnalyticsInvokeResponseOutput{})
	pulumi.RegisterOutputType(LogAnalyticsInvokeResponsePtrOutput{})
	pulumi.RegisterOutputType(LogAnalyticsResponseOutput{})
	pulumi.RegisterOutputType(LogAnalyticsResponsePtrOutput{})
	pulumi.RegisterOutputType(PortOutput{})
	pulumi.RegisterOutputType(PortArrayOutput{})
	pulumi.RegisterOutputType(PortInvokeResponseOutput{})
	pulumi.RegisterOutputType(PortInvokeResponseArrayOutput{})
	pulumi.RegisterOutputType(PortResponseOutput{})
	pulumi.RegisterOutputType(PortResponseArrayOutput{})
	pulumi.RegisterOutputType(ResourceLimitsOutput{})
	pulumi.RegisterOutputType(ResourceLimitsPtrOutput{})
	pulumi.RegisterOutputType(ResourceLimitsInvokeResponseOutput{})
	pulumi.RegisterOutputType(ResourceLimitsInvokeResponsePtrOutput{})
	pulumi.RegisterOutputType(ResourceLimitsResponseOutput{})
	pulumi.RegisterOutputType(ResourceLimitsResponsePtrOutput{})
	pulumi.RegisterOutputType(ResourceRequestsOutput{})
	pulumi.RegisterOutputType(ResourceRequestsInvokeResponseOutput{})
	pulumi.RegisterOutputType(ResourceRequestsResponseOutput{})
	pulumi.RegisterOutputType(ResourceRequirementsOutput{})
	pulumi.RegisterOutputType(ResourceRequirementsInvokeResponseOutput{})
	pulumi.RegisterOutputType(ResourceRequirementsResponseOutput{})
	pulumi.RegisterOutputType(VolumeOutput{})
	pulumi.RegisterOutputType(VolumeArrayOutput{})
	pulumi.RegisterOutputType(VolumeInvokeResponseOutput{})
	pulumi.RegisterOutputType(VolumeInvokeResponseArrayOutput{})
	pulumi.RegisterOutputType(VolumeMountOutput{})
	pulumi.RegisterOutputType(VolumeMountArrayOutput{})
	pulumi.RegisterOutputType(VolumeMountInvokeResponseOutput{})
	pulumi.RegisterOutputType(VolumeMountInvokeResponseArrayOutput{})
	pulumi.RegisterOutputType(VolumeMountResponseOutput{})
	pulumi.RegisterOutputType(VolumeMountResponseArrayOutput{})
	pulumi.RegisterOutputType(VolumeResponseOutput{})
	pulumi.RegisterOutputType(VolumeResponseArrayOutput{})
}
