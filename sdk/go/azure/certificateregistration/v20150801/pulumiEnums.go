// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v20150801

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// Current order status
type CertificateOrderStatus pulumi.String

const (
	CertificateOrderStatusPendingissuance   = CertificateOrderStatus("Pendingissuance")
	CertificateOrderStatusIssued            = CertificateOrderStatus("Issued")
	CertificateOrderStatusRevoked           = CertificateOrderStatus("Revoked")
	CertificateOrderStatusCanceled          = CertificateOrderStatus("Canceled")
	CertificateOrderStatusDenied            = CertificateOrderStatus("Denied")
	CertificateOrderStatusPendingrevocation = CertificateOrderStatus("Pendingrevocation")
	CertificateOrderStatusPendingRekey      = CertificateOrderStatus("PendingRekey")
	CertificateOrderStatusUnused            = CertificateOrderStatus("Unused")
	CertificateOrderStatusExpired           = CertificateOrderStatus("Expired")
	CertificateOrderStatusNotSubmitted      = CertificateOrderStatus("NotSubmitted")
)

func (CertificateOrderStatus) ElementType() reflect.Type {
	return reflect.TypeOf((*pulumi.String)(nil)).Elem()
}

func (e CertificateOrderStatus) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e CertificateOrderStatus) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e CertificateOrderStatus) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e CertificateOrderStatus) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

// Certificate product type
type CertificateProductType pulumi.String

const (
	CertificateProductTypeStandardDomainValidatedSsl         = CertificateProductType("StandardDomainValidatedSsl")
	CertificateProductTypeStandardDomainValidatedWildCardSsl = CertificateProductType("StandardDomainValidatedWildCardSsl")
)

func (CertificateProductType) ElementType() reflect.Type {
	return reflect.TypeOf((*pulumi.String)(nil)).Elem()
}

func (e CertificateProductType) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e CertificateProductType) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e CertificateProductType) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e CertificateProductType) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

// Status of the Key Vault secret
type KeyVaultSecretStatus pulumi.String

const (
	KeyVaultSecretStatusInitialized                              = KeyVaultSecretStatus("Initialized")
	KeyVaultSecretStatusWaitingOnCertificateOrder                = KeyVaultSecretStatus("WaitingOnCertificateOrder")
	KeyVaultSecretStatusSucceeded                                = KeyVaultSecretStatus("Succeeded")
	KeyVaultSecretStatusCertificateOrderFailed                   = KeyVaultSecretStatus("CertificateOrderFailed")
	KeyVaultSecretStatusOperationNotPermittedOnKeyVault          = KeyVaultSecretStatus("OperationNotPermittedOnKeyVault")
	KeyVaultSecretStatusAzureServiceUnauthorizedToAccessKeyVault = KeyVaultSecretStatus("AzureServiceUnauthorizedToAccessKeyVault")
	KeyVaultSecretStatusKeyVaultDoesNotExist                     = KeyVaultSecretStatus("KeyVaultDoesNotExist")
	KeyVaultSecretStatusKeyVaultSecretDoesNotExist               = KeyVaultSecretStatus("KeyVaultSecretDoesNotExist")
	KeyVaultSecretStatusUnknownError                             = KeyVaultSecretStatus("UnknownError")
	KeyVaultSecretStatusUnknown                                  = KeyVaultSecretStatus("Unknown")
)

func (KeyVaultSecretStatus) ElementType() reflect.Type {
	return reflect.TypeOf((*pulumi.String)(nil)).Elem()
}

func (e KeyVaultSecretStatus) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e KeyVaultSecretStatus) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e KeyVaultSecretStatus) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e KeyVaultSecretStatus) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

// Status of certificate order
type ProvisioningState pulumi.String

const (
	ProvisioningStateSucceeded  = ProvisioningState("Succeeded")
	ProvisioningStateFailed     = ProvisioningState("Failed")
	ProvisioningStateCanceled   = ProvisioningState("Canceled")
	ProvisioningStateInProgress = ProvisioningState("InProgress")
	ProvisioningStateDeleting   = ProvisioningState("Deleting")
)

func (ProvisioningState) ElementType() reflect.Type {
	return reflect.TypeOf((*pulumi.String)(nil)).Elem()
}

func (e ProvisioningState) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e ProvisioningState) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e ProvisioningState) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e ProvisioningState) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}
