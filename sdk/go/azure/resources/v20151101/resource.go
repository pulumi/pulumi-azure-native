// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v20151101

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource information.
//
// Deprecated: Version 2015-11-01 will be removed in v2 of the provider.
type Resource struct {
	pulumi.CustomResourceState

	// Resource location
	Location pulumi.StringOutput `pulumi:"location"`
	// Resource name
	Name pulumi.StringOutput `pulumi:"name"`
	// Gets or sets the plan of the resource.
	Plan PlanResponsePtrOutput `pulumi:"plan"`
	// Gets or sets the resource properties.
	Properties pulumi.AnyOutput `pulumi:"properties"`
	// Resource tags
	Tags pulumi.StringMapOutput `pulumi:"tags"`
	// Resource type
	Type pulumi.StringOutput `pulumi:"type"`
}

// NewResource registers a new resource with the given unique name, arguments, and options.
func NewResource(ctx *pulumi.Context,
	name string, args *ResourceArgs, opts ...pulumi.ResourceOption) (*Resource, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ParentResourcePath == nil {
		return nil, errors.New("invalid value for required argument 'ParentResourcePath'")
	}
	if args.ResourceGroupName == nil {
		return nil, errors.New("invalid value for required argument 'ResourceGroupName'")
	}
	if args.ResourceProviderNamespace == nil {
		return nil, errors.New("invalid value for required argument 'ResourceProviderNamespace'")
	}
	if args.ResourceType == nil {
		return nil, errors.New("invalid value for required argument 'ResourceType'")
	}
	aliases := pulumi.Aliases([]pulumi.Alias{
		{
			Type: pulumi.String("azure-native:resources:Resource"),
		},
		{
			Type: pulumi.String("azure-native:resources/v20160201:Resource"),
		},
		{
			Type: pulumi.String("azure-native:resources/v20160701:Resource"),
		},
		{
			Type: pulumi.String("azure-native:resources/v20160901:Resource"),
		},
		{
			Type: pulumi.String("azure-native:resources/v20170510:Resource"),
		},
		{
			Type: pulumi.String("azure-native:resources/v20180201:Resource"),
		},
		{
			Type: pulumi.String("azure-native:resources/v20180501:Resource"),
		},
		{
			Type: pulumi.String("azure-native:resources/v20190301:Resource"),
		},
		{
			Type: pulumi.String("azure-native:resources/v20190501:Resource"),
		},
		{
			Type: pulumi.String("azure-native:resources/v20190510:Resource"),
		},
		{
			Type: pulumi.String("azure-native:resources/v20190701:Resource"),
		},
		{
			Type: pulumi.String("azure-native:resources/v20190801:Resource"),
		},
		{
			Type: pulumi.String("azure-native:resources/v20191001:Resource"),
		},
		{
			Type: pulumi.String("azure-native:resources/v20200601:Resource"),
		},
		{
			Type: pulumi.String("azure-native:resources/v20200801:Resource"),
		},
		{
			Type: pulumi.String("azure-native:resources/v20201001:Resource"),
		},
		{
			Type: pulumi.String("azure-native:resources/v20210101:Resource"),
		},
		{
			Type: pulumi.String("azure-native:resources/v20210401:Resource"),
		},
	})
	opts = append(opts, aliases)
	var resource Resource
	err := ctx.RegisterResource("azure-native:resources/v20151101:Resource", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetResource gets an existing Resource resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetResource(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ResourceState, opts ...pulumi.ResourceOption) (*Resource, error) {
	var resource Resource
	err := ctx.ReadResource("azure-native:resources/v20151101:Resource", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Resource resources.
type resourceState struct {
}

type ResourceState struct {
}

func (ResourceState) ElementType() reflect.Type {
	return reflect.TypeOf((*resourceState)(nil)).Elem()
}

type resourceArgs struct {
	// Resource location
	Location *string `pulumi:"location"`
	// Resource identity.
	ParentResourcePath string `pulumi:"parentResourcePath"`
	// Gets or sets the plan of the resource.
	Plan *Plan `pulumi:"plan"`
	// Gets or sets the resource properties.
	Properties interface{} `pulumi:"properties"`
	// The name of the resource group. The name is case insensitive.
	ResourceGroupName string `pulumi:"resourceGroupName"`
	// Resource identity.
	ResourceName *string `pulumi:"resourceName"`
	// Resource identity.
	ResourceProviderNamespace string `pulumi:"resourceProviderNamespace"`
	// Resource identity.
	ResourceType string `pulumi:"resourceType"`
	// Resource tags
	Tags map[string]string `pulumi:"tags"`
}

// The set of arguments for constructing a Resource resource.
type ResourceArgs struct {
	// Resource location
	Location pulumi.StringPtrInput
	// Resource identity.
	ParentResourcePath pulumi.StringInput
	// Gets or sets the plan of the resource.
	Plan PlanPtrInput
	// Gets or sets the resource properties.
	Properties pulumi.Input
	// The name of the resource group. The name is case insensitive.
	ResourceGroupName pulumi.StringInput
	// Resource identity.
	ResourceName pulumi.StringPtrInput
	// Resource identity.
	ResourceProviderNamespace pulumi.StringInput
	// Resource identity.
	ResourceType pulumi.StringInput
	// Resource tags
	Tags pulumi.StringMapInput
}

func (ResourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*resourceArgs)(nil)).Elem()
}

type ResourceInput interface {
	pulumi.Input

	ToResourceOutput() ResourceOutput
	ToResourceOutputWithContext(ctx context.Context) ResourceOutput
}

func (*Resource) ElementType() reflect.Type {
	return reflect.TypeOf((**Resource)(nil)).Elem()
}

func (i *Resource) ToResourceOutput() ResourceOutput {
	return i.ToResourceOutputWithContext(context.Background())
}

func (i *Resource) ToResourceOutputWithContext(ctx context.Context) ResourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceOutput)
}

type ResourceOutput struct{ *pulumi.OutputState }

func (ResourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Resource)(nil)).Elem()
}

func (o ResourceOutput) ToResourceOutput() ResourceOutput {
	return o
}

func (o ResourceOutput) ToResourceOutputWithContext(ctx context.Context) ResourceOutput {
	return o
}

// Resource location
func (o ResourceOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *Resource) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// Resource name
func (o ResourceOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Resource) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Gets or sets the plan of the resource.
func (o ResourceOutput) Plan() PlanResponsePtrOutput {
	return o.ApplyT(func(v *Resource) PlanResponsePtrOutput { return v.Plan }).(PlanResponsePtrOutput)
}

// Gets or sets the resource properties.
func (o ResourceOutput) Properties() pulumi.AnyOutput {
	return o.ApplyT(func(v *Resource) pulumi.AnyOutput { return v.Properties }).(pulumi.AnyOutput)
}

// Resource tags
func (o ResourceOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Resource) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

// Resource type
func (o ResourceOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *Resource) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(ResourceOutput{})
}
