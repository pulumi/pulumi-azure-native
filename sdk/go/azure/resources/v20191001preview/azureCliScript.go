// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v20191001preview

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Object model for the Azure CLI script.
type AzureCliScript struct {
	pulumi.CustomResourceState

	// Command line arguments to pass to the script. Arguments are separated by spaces. ex: -Name blue* -Location 'West US 2'
	Arguments pulumi.StringPtrOutput `pulumi:"arguments"`
	// Azure CLI module version to be used.
	AzCliVersion pulumi.StringOutput `pulumi:"azCliVersion"`
	// The clean up preference when the script execution gets in a terminal state. Default setting is 'Always'.
	CleanupPreference pulumi.StringPtrOutput `pulumi:"cleanupPreference"`
	// Container settings.
	ContainerSettings ContainerConfigurationResponsePtrOutput `pulumi:"containerSettings"`
	// The environment variables to pass over to the script.
	EnvironmentVariables EnvironmentVariableResponseArrayOutput `pulumi:"environmentVariables"`
	// Gets or sets how the deployment script should be forced to execute even if the script resource has not changed. Can be current time stamp or a GUID.
	ForceUpdateTag pulumi.StringPtrOutput `pulumi:"forceUpdateTag"`
	// Managed identity to be used for this deployment script. Currently, only user-assigned MSI is supported.
	Identity ManagedServiceIdentityResponseOutput `pulumi:"identity"`
	// Type of the script.
	// Expected value is 'AzureCLI'.
	Kind pulumi.StringOutput `pulumi:"kind"`
	// The location of the ACI and the storage account for the deployment script.
	Location pulumi.StringOutput `pulumi:"location"`
	// Name of this resource.
	Name pulumi.StringOutput `pulumi:"name"`
	// List of script outputs.
	Outputs pulumi.MapOutput `pulumi:"outputs"`
	// Uri for the script. This is the entry point for the external script.
	PrimaryScriptUri pulumi.StringPtrOutput `pulumi:"primaryScriptUri"`
	// State of the script execution. This only appears in the response.
	ProvisioningState pulumi.StringOutput `pulumi:"provisioningState"`
	// Interval for which the service retains the script resource after it reaches a terminal state. Resource will be deleted when this duration expires. Duration is based on ISO 8601 pattern (for example P1D means one day).
	RetentionInterval pulumi.StringOutput `pulumi:"retentionInterval"`
	// Script body.
	ScriptContent pulumi.StringPtrOutput `pulumi:"scriptContent"`
	// Contains the results of script execution.
	Status ScriptStatusResponseOutput `pulumi:"status"`
	// Storage Account settings.
	StorageAccountSettings StorageAccountConfigurationResponsePtrOutput `pulumi:"storageAccountSettings"`
	// Supporting files for the external script.
	SupportingScriptUris pulumi.StringArrayOutput `pulumi:"supportingScriptUris"`
	// The system metadata related to this resource.
	SystemData SystemDataResponseOutput `pulumi:"systemData"`
	// Resource tags.
	Tags pulumi.StringMapOutput `pulumi:"tags"`
	// Maximum allowed script execution time specified in ISO 8601 format. Default value is P1D
	Timeout pulumi.StringPtrOutput `pulumi:"timeout"`
	// Type of this resource.
	Type pulumi.StringOutput `pulumi:"type"`
}

// NewAzureCliScript registers a new resource with the given unique name, arguments, and options.
func NewAzureCliScript(ctx *pulumi.Context,
	name string, args *AzureCliScriptArgs, opts ...pulumi.ResourceOption) (*AzureCliScript, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AzCliVersion == nil {
		return nil, errors.New("invalid value for required argument 'AzCliVersion'")
	}
	if args.Identity == nil {
		return nil, errors.New("invalid value for required argument 'Identity'")
	}
	if args.Kind == nil {
		return nil, errors.New("invalid value for required argument 'Kind'")
	}
	if args.ResourceGroupName == nil {
		return nil, errors.New("invalid value for required argument 'ResourceGroupName'")
	}
	if args.RetentionInterval == nil {
		return nil, errors.New("invalid value for required argument 'RetentionInterval'")
	}
	if args.CleanupPreference == nil {
		args.CleanupPreference = pulumi.StringPtr("Always")
	}
	args.Kind = pulumi.String("AzureCLI")
	if args.Timeout == nil {
		args.Timeout = pulumi.StringPtr("P1D")
	}
	aliases := pulumi.Aliases([]pulumi.Alias{
		{
			Type: pulumi.String("azure-nextgen:resources/v20191001preview:AzureCliScript"),
		},
		{
			Type: pulumi.String("azure-native:resources:AzureCliScript"),
		},
		{
			Type: pulumi.String("azure-nextgen:resources:AzureCliScript"),
		},
		{
			Type: pulumi.String("azure-native:resources/v20201001:AzureCliScript"),
		},
		{
			Type: pulumi.String("azure-nextgen:resources/v20201001:AzureCliScript"),
		},
	})
	opts = append(opts, aliases)
	var resource AzureCliScript
	err := ctx.RegisterResource("azure-native:resources/v20191001preview:AzureCliScript", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAzureCliScript gets an existing AzureCliScript resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAzureCliScript(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AzureCliScriptState, opts ...pulumi.ResourceOption) (*AzureCliScript, error) {
	var resource AzureCliScript
	err := ctx.ReadResource("azure-native:resources/v20191001preview:AzureCliScript", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering AzureCliScript resources.
type azureCliScriptState struct {
}

type AzureCliScriptState struct {
}

func (AzureCliScriptState) ElementType() reflect.Type {
	return reflect.TypeOf((*azureCliScriptState)(nil)).Elem()
}

type azureCliScriptArgs struct {
	// Command line arguments to pass to the script. Arguments are separated by spaces. ex: -Name blue* -Location 'West US 2'
	Arguments *string `pulumi:"arguments"`
	// Azure CLI module version to be used.
	AzCliVersion string `pulumi:"azCliVersion"`
	// The clean up preference when the script execution gets in a terminal state. Default setting is 'Always'.
	CleanupPreference *string `pulumi:"cleanupPreference"`
	// Container settings.
	ContainerSettings *ContainerConfiguration `pulumi:"containerSettings"`
	// The environment variables to pass over to the script.
	EnvironmentVariables []EnvironmentVariable `pulumi:"environmentVariables"`
	// Gets or sets how the deployment script should be forced to execute even if the script resource has not changed. Can be current time stamp or a GUID.
	ForceUpdateTag *string `pulumi:"forceUpdateTag"`
	// Managed identity to be used for this deployment script. Currently, only user-assigned MSI is supported.
	Identity ManagedServiceIdentity `pulumi:"identity"`
	// Type of the script.
	// Expected value is 'AzureCLI'.
	Kind string `pulumi:"kind"`
	// The location of the ACI and the storage account for the deployment script.
	Location *string `pulumi:"location"`
	// Uri for the script. This is the entry point for the external script.
	PrimaryScriptUri *string `pulumi:"primaryScriptUri"`
	// The name of the resource group. The name is case insensitive.
	ResourceGroupName string `pulumi:"resourceGroupName"`
	// Interval for which the service retains the script resource after it reaches a terminal state. Resource will be deleted when this duration expires. Duration is based on ISO 8601 pattern (for example P1D means one day).
	RetentionInterval string `pulumi:"retentionInterval"`
	// Script body.
	ScriptContent *string `pulumi:"scriptContent"`
	// Name of the deployment script.
	ScriptName *string `pulumi:"scriptName"`
	// Storage Account settings.
	StorageAccountSettings *StorageAccountConfiguration `pulumi:"storageAccountSettings"`
	// Supporting files for the external script.
	SupportingScriptUris []string `pulumi:"supportingScriptUris"`
	// Resource tags.
	Tags map[string]string `pulumi:"tags"`
	// Maximum allowed script execution time specified in ISO 8601 format. Default value is P1D
	Timeout *string `pulumi:"timeout"`
}

// The set of arguments for constructing a AzureCliScript resource.
type AzureCliScriptArgs struct {
	// Command line arguments to pass to the script. Arguments are separated by spaces. ex: -Name blue* -Location 'West US 2'
	Arguments pulumi.StringPtrInput
	// Azure CLI module version to be used.
	AzCliVersion pulumi.StringInput
	// The clean up preference when the script execution gets in a terminal state. Default setting is 'Always'.
	CleanupPreference pulumi.StringPtrInput
	// Container settings.
	ContainerSettings ContainerConfigurationPtrInput
	// The environment variables to pass over to the script.
	EnvironmentVariables EnvironmentVariableArrayInput
	// Gets or sets how the deployment script should be forced to execute even if the script resource has not changed. Can be current time stamp or a GUID.
	ForceUpdateTag pulumi.StringPtrInput
	// Managed identity to be used for this deployment script. Currently, only user-assigned MSI is supported.
	Identity ManagedServiceIdentityInput
	// Type of the script.
	// Expected value is 'AzureCLI'.
	Kind pulumi.StringInput
	// The location of the ACI and the storage account for the deployment script.
	Location pulumi.StringPtrInput
	// Uri for the script. This is the entry point for the external script.
	PrimaryScriptUri pulumi.StringPtrInput
	// The name of the resource group. The name is case insensitive.
	ResourceGroupName pulumi.StringInput
	// Interval for which the service retains the script resource after it reaches a terminal state. Resource will be deleted when this duration expires. Duration is based on ISO 8601 pattern (for example P1D means one day).
	RetentionInterval pulumi.StringInput
	// Script body.
	ScriptContent pulumi.StringPtrInput
	// Name of the deployment script.
	ScriptName pulumi.StringPtrInput
	// Storage Account settings.
	StorageAccountSettings StorageAccountConfigurationPtrInput
	// Supporting files for the external script.
	SupportingScriptUris pulumi.StringArrayInput
	// Resource tags.
	Tags pulumi.StringMapInput
	// Maximum allowed script execution time specified in ISO 8601 format. Default value is P1D
	Timeout pulumi.StringPtrInput
}

func (AzureCliScriptArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*azureCliScriptArgs)(nil)).Elem()
}

type AzureCliScriptInput interface {
	pulumi.Input

	ToAzureCliScriptOutput() AzureCliScriptOutput
	ToAzureCliScriptOutputWithContext(ctx context.Context) AzureCliScriptOutput
}

func (*AzureCliScript) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureCliScript)(nil))
}

func (i *AzureCliScript) ToAzureCliScriptOutput() AzureCliScriptOutput {
	return i.ToAzureCliScriptOutputWithContext(context.Background())
}

func (i *AzureCliScript) ToAzureCliScriptOutputWithContext(ctx context.Context) AzureCliScriptOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzureCliScriptOutput)
}

type AzureCliScriptOutput struct {
	*pulumi.OutputState
}

func (AzureCliScriptOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureCliScript)(nil))
}

func (o AzureCliScriptOutput) ToAzureCliScriptOutput() AzureCliScriptOutput {
	return o
}

func (o AzureCliScriptOutput) ToAzureCliScriptOutputWithContext(ctx context.Context) AzureCliScriptOutput {
	return o
}

func init() {
	pulumi.RegisterOutputType(AzureCliScriptOutput{})
}
