// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v20201001

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// Deployment script object.
type DeploymentScript struct {
	pulumi.CustomResourceState

	// Optional property. Managed identity to be used for this deployment script. Currently, only user-assigned MSI is supported.
	Identity ManagedServiceIdentityResponsePtrOutput `pulumi:"identity"`
	// Type of the script.
	Kind pulumi.StringOutput `pulumi:"kind"`
	// The location of the ACI and the storage account for the deployment script.
	Location pulumi.StringOutput `pulumi:"location"`
	// Name of this resource.
	Name pulumi.StringOutput `pulumi:"name"`
	// The system metadata related to this resource.
	SystemData SystemDataResponseOutput `pulumi:"systemData"`
	// Resource tags.
	Tags pulumi.StringMapOutput `pulumi:"tags"`
	// Type of this resource.
	Type pulumi.StringOutput `pulumi:"type"`
}

// NewDeploymentScript registers a new resource with the given unique name, arguments, and options.
func NewDeploymentScript(ctx *pulumi.Context,
	name string, args *DeploymentScriptArgs, opts ...pulumi.ResourceOption) (*DeploymentScript, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Kind == nil {
		return nil, errors.New("invalid value for required argument 'Kind'")
	}
	if args.ResourceGroupName == nil {
		return nil, errors.New("invalid value for required argument 'ResourceGroupName'")
	}
	aliases := pulumi.Aliases([]pulumi.Alias{
		{
			Type: pulumi.String("azure-nextgen:resources:DeploymentScript"),
		},
		{
			Type: pulumi.String("azure-nextgen:resources/latest:DeploymentScript"),
		},
		{
			Type: pulumi.String("azure-nextgen:resources/v20191001preview:DeploymentScript"),
		},
	})
	opts = append(opts, aliases)
	var resource DeploymentScript
	err := ctx.RegisterResource("azure-nextgen:resources/v20201001:DeploymentScript", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDeploymentScript gets an existing DeploymentScript resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDeploymentScript(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DeploymentScriptState, opts ...pulumi.ResourceOption) (*DeploymentScript, error) {
	var resource DeploymentScript
	err := ctx.ReadResource("azure-nextgen:resources/v20201001:DeploymentScript", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DeploymentScript resources.
type deploymentScriptState struct {
	// Optional property. Managed identity to be used for this deployment script. Currently, only user-assigned MSI is supported.
	Identity *ManagedServiceIdentityResponse `pulumi:"identity"`
	// Type of the script.
	Kind *string `pulumi:"kind"`
	// The location of the ACI and the storage account for the deployment script.
	Location *string `pulumi:"location"`
	// Name of this resource.
	Name *string `pulumi:"name"`
	// The system metadata related to this resource.
	SystemData *SystemDataResponse `pulumi:"systemData"`
	// Resource tags.
	Tags map[string]string `pulumi:"tags"`
	// Type of this resource.
	Type *string `pulumi:"type"`
}

type DeploymentScriptState struct {
	// Optional property. Managed identity to be used for this deployment script. Currently, only user-assigned MSI is supported.
	Identity ManagedServiceIdentityResponsePtrInput
	// Type of the script.
	Kind pulumi.StringPtrInput
	// The location of the ACI and the storage account for the deployment script.
	Location pulumi.StringPtrInput
	// Name of this resource.
	Name pulumi.StringPtrInput
	// The system metadata related to this resource.
	SystemData SystemDataResponsePtrInput
	// Resource tags.
	Tags pulumi.StringMapInput
	// Type of this resource.
	Type pulumi.StringPtrInput
}

func (DeploymentScriptState) ElementType() reflect.Type {
	return reflect.TypeOf((*deploymentScriptState)(nil)).Elem()
}

type deploymentScriptArgs struct {
	// Optional property. Managed identity to be used for this deployment script. Currently, only user-assigned MSI is supported.
	Identity *ManagedServiceIdentity `pulumi:"identity"`
	// Type of the script.
	Kind string `pulumi:"kind"`
	// The location of the ACI and the storage account for the deployment script.
	Location *string `pulumi:"location"`
	// The name of the resource group. The name is case insensitive.
	ResourceGroupName string `pulumi:"resourceGroupName"`
	// Name of the deployment script.
	ScriptName *string `pulumi:"scriptName"`
	// Resource tags.
	Tags map[string]string `pulumi:"tags"`
}

// The set of arguments for constructing a DeploymentScript resource.
type DeploymentScriptArgs struct {
	// Optional property. Managed identity to be used for this deployment script. Currently, only user-assigned MSI is supported.
	Identity ManagedServiceIdentityPtrInput
	// Type of the script.
	Kind pulumi.StringInput
	// The location of the ACI and the storage account for the deployment script.
	Location pulumi.StringPtrInput
	// The name of the resource group. The name is case insensitive.
	ResourceGroupName pulumi.StringInput
	// Name of the deployment script.
	ScriptName pulumi.StringPtrInput
	// Resource tags.
	Tags pulumi.StringMapInput
}

func (DeploymentScriptArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*deploymentScriptArgs)(nil)).Elem()
}

type DeploymentScriptInput interface {
	pulumi.Input

	ToDeploymentScriptOutput() DeploymentScriptOutput
	ToDeploymentScriptOutputWithContext(ctx context.Context) DeploymentScriptOutput
}

func (*DeploymentScript) ElementType() reflect.Type {
	return reflect.TypeOf((*DeploymentScript)(nil))
}

func (i *DeploymentScript) ToDeploymentScriptOutput() DeploymentScriptOutput {
	return i.ToDeploymentScriptOutputWithContext(context.Background())
}

func (i *DeploymentScript) ToDeploymentScriptOutputWithContext(ctx context.Context) DeploymentScriptOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeploymentScriptOutput)
}

type DeploymentScriptOutput struct {
	*pulumi.OutputState
}

func (DeploymentScriptOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DeploymentScript)(nil))
}

func (o DeploymentScriptOutput) ToDeploymentScriptOutput() DeploymentScriptOutput {
	return o
}

func (o DeploymentScriptOutput) ToDeploymentScriptOutputWithContext(ctx context.Context) DeploymentScriptOutput {
	return o
}

func init() {
	pulumi.RegisterOutputType(DeploymentScriptOutput{})
}
