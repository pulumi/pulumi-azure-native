// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v20220201preview

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// A group of job targets.
func LookupJobTargetGroup(ctx *pulumi.Context, args *LookupJobTargetGroupArgs, opts ...pulumi.InvokeOption) (*LookupJobTargetGroupResult, error) {
	var rv LookupJobTargetGroupResult
	err := ctx.Invoke("azure-native:sql/v20220201preview:getJobTargetGroup", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type LookupJobTargetGroupArgs struct {
	// The name of the job agent.
	JobAgentName string `pulumi:"jobAgentName"`
	// The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
	ResourceGroupName string `pulumi:"resourceGroupName"`
	// The name of the server.
	ServerName string `pulumi:"serverName"`
	// The name of the target group.
	TargetGroupName string `pulumi:"targetGroupName"`
}

// A group of job targets.
type LookupJobTargetGroupResult struct {
	// Resource ID.
	Id string `pulumi:"id"`
	// Members of the target group.
	Members []JobTargetResponse `pulumi:"members"`
	// Resource name.
	Name string `pulumi:"name"`
	// Resource type.
	Type string `pulumi:"type"`
}

func LookupJobTargetGroupOutput(ctx *pulumi.Context, args LookupJobTargetGroupOutputArgs, opts ...pulumi.InvokeOption) LookupJobTargetGroupResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupJobTargetGroupResult, error) {
			args := v.(LookupJobTargetGroupArgs)
			r, err := LookupJobTargetGroup(ctx, &args, opts...)
			var s LookupJobTargetGroupResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupJobTargetGroupResultOutput)
}

type LookupJobTargetGroupOutputArgs struct {
	// The name of the job agent.
	JobAgentName pulumi.StringInput `pulumi:"jobAgentName"`
	// The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
	ResourceGroupName pulumi.StringInput `pulumi:"resourceGroupName"`
	// The name of the server.
	ServerName pulumi.StringInput `pulumi:"serverName"`
	// The name of the target group.
	TargetGroupName pulumi.StringInput `pulumi:"targetGroupName"`
}

func (LookupJobTargetGroupOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupJobTargetGroupArgs)(nil)).Elem()
}

// A group of job targets.
type LookupJobTargetGroupResultOutput struct{ *pulumi.OutputState }

func (LookupJobTargetGroupResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupJobTargetGroupResult)(nil)).Elem()
}

func (o LookupJobTargetGroupResultOutput) ToLookupJobTargetGroupResultOutput() LookupJobTargetGroupResultOutput {
	return o
}

func (o LookupJobTargetGroupResultOutput) ToLookupJobTargetGroupResultOutputWithContext(ctx context.Context) LookupJobTargetGroupResultOutput {
	return o
}

// Resource ID.
func (o LookupJobTargetGroupResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupJobTargetGroupResult) string { return v.Id }).(pulumi.StringOutput)
}

// Members of the target group.
func (o LookupJobTargetGroupResultOutput) Members() JobTargetResponseArrayOutput {
	return o.ApplyT(func(v LookupJobTargetGroupResult) []JobTargetResponse { return v.Members }).(JobTargetResponseArrayOutput)
}

// Resource name.
func (o LookupJobTargetGroupResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupJobTargetGroupResult) string { return v.Name }).(pulumi.StringOutput)
}

// Resource type.
func (o LookupJobTargetGroupResultOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v LookupJobTargetGroupResult) string { return v.Type }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupJobTargetGroupResultOutput{})
}
