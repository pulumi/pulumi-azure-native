


package v20220201preview

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type SqlVulnerabilityAssessmentRuleBaseline struct {
	pulumi.CustomResourceState

	Name       pulumi.StringOutput           `pulumi:"name"`
	Results    pulumi.StringArrayArrayOutput `pulumi:"results"`
	SystemData SystemDataResponseOutput      `pulumi:"systemData"`
	Type       pulumi.StringOutput           `pulumi:"type"`
}


func NewSqlVulnerabilityAssessmentRuleBaseline(ctx *pulumi.Context,
	name string, args *SqlVulnerabilityAssessmentRuleBaselineArgs, opts ...pulumi.ResourceOption) (*SqlVulnerabilityAssessmentRuleBaseline, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.BaselineName == nil {
		return nil, errors.New("invalid value for required argument 'BaselineName'")
	}
	if args.LatestScan == nil {
		return nil, errors.New("invalid value for required argument 'LatestScan'")
	}
	if args.ResourceGroupName == nil {
		return nil, errors.New("invalid value for required argument 'ResourceGroupName'")
	}
	if args.Results == nil {
		return nil, errors.New("invalid value for required argument 'Results'")
	}
	if args.ServerName == nil {
		return nil, errors.New("invalid value for required argument 'ServerName'")
	}
	if args.SystemDatabaseName == nil {
		return nil, errors.New("invalid value for required argument 'SystemDatabaseName'")
	}
	if args.VulnerabilityAssessmentName == nil {
		return nil, errors.New("invalid value for required argument 'VulnerabilityAssessmentName'")
	}
	var resource SqlVulnerabilityAssessmentRuleBaseline
	err := ctx.RegisterResource("azure-native:sql/v20220201preview:SqlVulnerabilityAssessmentRuleBaseline", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}



func GetSqlVulnerabilityAssessmentRuleBaseline(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SqlVulnerabilityAssessmentRuleBaselineState, opts ...pulumi.ResourceOption) (*SqlVulnerabilityAssessmentRuleBaseline, error) {
	var resource SqlVulnerabilityAssessmentRuleBaseline
	err := ctx.ReadResource("azure-native:sql/v20220201preview:SqlVulnerabilityAssessmentRuleBaseline", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}


type sqlVulnerabilityAssessmentRuleBaselineState struct {
}

type SqlVulnerabilityAssessmentRuleBaselineState struct {
}

func (SqlVulnerabilityAssessmentRuleBaselineState) ElementType() reflect.Type {
	return reflect.TypeOf((*sqlVulnerabilityAssessmentRuleBaselineState)(nil)).Elem()
}

type sqlVulnerabilityAssessmentRuleBaselineArgs struct {
	BaselineName                string     `pulumi:"baselineName"`
	LatestScan                  bool       `pulumi:"latestScan"`
	ResourceGroupName           string     `pulumi:"resourceGroupName"`
	Results                     [][]string `pulumi:"results"`
	RuleId                      *string    `pulumi:"ruleId"`
	ServerName                  string     `pulumi:"serverName"`
	SystemDatabaseName          string     `pulumi:"systemDatabaseName"`
	VulnerabilityAssessmentName string     `pulumi:"vulnerabilityAssessmentName"`
}


type SqlVulnerabilityAssessmentRuleBaselineArgs struct {
	BaselineName                pulumi.StringInput
	LatestScan                  pulumi.BoolInput
	ResourceGroupName           pulumi.StringInput
	Results                     pulumi.StringArrayArrayInput
	RuleId                      pulumi.StringPtrInput
	ServerName                  pulumi.StringInput
	SystemDatabaseName          pulumi.StringInput
	VulnerabilityAssessmentName pulumi.StringInput
}

func (SqlVulnerabilityAssessmentRuleBaselineArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*sqlVulnerabilityAssessmentRuleBaselineArgs)(nil)).Elem()
}

type SqlVulnerabilityAssessmentRuleBaselineInput interface {
	pulumi.Input

	ToSqlVulnerabilityAssessmentRuleBaselineOutput() SqlVulnerabilityAssessmentRuleBaselineOutput
	ToSqlVulnerabilityAssessmentRuleBaselineOutputWithContext(ctx context.Context) SqlVulnerabilityAssessmentRuleBaselineOutput
}

func (*SqlVulnerabilityAssessmentRuleBaseline) ElementType() reflect.Type {
	return reflect.TypeOf((**SqlVulnerabilityAssessmentRuleBaseline)(nil)).Elem()
}

func (i *SqlVulnerabilityAssessmentRuleBaseline) ToSqlVulnerabilityAssessmentRuleBaselineOutput() SqlVulnerabilityAssessmentRuleBaselineOutput {
	return i.ToSqlVulnerabilityAssessmentRuleBaselineOutputWithContext(context.Background())
}

func (i *SqlVulnerabilityAssessmentRuleBaseline) ToSqlVulnerabilityAssessmentRuleBaselineOutputWithContext(ctx context.Context) SqlVulnerabilityAssessmentRuleBaselineOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SqlVulnerabilityAssessmentRuleBaselineOutput)
}

type SqlVulnerabilityAssessmentRuleBaselineOutput struct{ *pulumi.OutputState }

func (SqlVulnerabilityAssessmentRuleBaselineOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SqlVulnerabilityAssessmentRuleBaseline)(nil)).Elem()
}

func (o SqlVulnerabilityAssessmentRuleBaselineOutput) ToSqlVulnerabilityAssessmentRuleBaselineOutput() SqlVulnerabilityAssessmentRuleBaselineOutput {
	return o
}

func (o SqlVulnerabilityAssessmentRuleBaselineOutput) ToSqlVulnerabilityAssessmentRuleBaselineOutputWithContext(ctx context.Context) SqlVulnerabilityAssessmentRuleBaselineOutput {
	return o
}

func (o SqlVulnerabilityAssessmentRuleBaselineOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *SqlVulnerabilityAssessmentRuleBaseline) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o SqlVulnerabilityAssessmentRuleBaselineOutput) Results() pulumi.StringArrayArrayOutput {
	return o.ApplyT(func(v *SqlVulnerabilityAssessmentRuleBaseline) pulumi.StringArrayArrayOutput { return v.Results }).(pulumi.StringArrayArrayOutput)
}

func (o SqlVulnerabilityAssessmentRuleBaselineOutput) SystemData() SystemDataResponseOutput {
	return o.ApplyT(func(v *SqlVulnerabilityAssessmentRuleBaseline) SystemDataResponseOutput { return v.SystemData }).(SystemDataResponseOutput)
}

func (o SqlVulnerabilityAssessmentRuleBaselineOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *SqlVulnerabilityAssessmentRuleBaseline) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(SqlVulnerabilityAssessmentRuleBaselineOutput{})
}
