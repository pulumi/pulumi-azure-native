// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v20220201preview

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// A database sql vulnerability assessment rule baseline.
type DatabaseSqlVulnerabilityAssessmentRuleBaseline struct {
	pulumi.CustomResourceState

	// Resource name.
	Name pulumi.StringOutput `pulumi:"name"`
	// The rule baseline result
	Results pulumi.StringArrayArrayOutput `pulumi:"results"`
	// SystemData of DatabaseSqlVulnerabilityAssessmentRuleBaselineResource.
	SystemData SystemDataResponseOutput `pulumi:"systemData"`
	// Resource type.
	Type pulumi.StringOutput `pulumi:"type"`
}

// NewDatabaseSqlVulnerabilityAssessmentRuleBaseline registers a new resource with the given unique name, arguments, and options.
func NewDatabaseSqlVulnerabilityAssessmentRuleBaseline(ctx *pulumi.Context,
	name string, args *DatabaseSqlVulnerabilityAssessmentRuleBaselineArgs, opts ...pulumi.ResourceOption) (*DatabaseSqlVulnerabilityAssessmentRuleBaseline, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.BaselineName == nil {
		return nil, errors.New("invalid value for required argument 'BaselineName'")
	}
	if args.DatabaseName == nil {
		return nil, errors.New("invalid value for required argument 'DatabaseName'")
	}
	if args.LatestScan == nil {
		return nil, errors.New("invalid value for required argument 'LatestScan'")
	}
	if args.ResourceGroupName == nil {
		return nil, errors.New("invalid value for required argument 'ResourceGroupName'")
	}
	if args.Results == nil {
		return nil, errors.New("invalid value for required argument 'Results'")
	}
	if args.ServerName == nil {
		return nil, errors.New("invalid value for required argument 'ServerName'")
	}
	if args.VulnerabilityAssessmentName == nil {
		return nil, errors.New("invalid value for required argument 'VulnerabilityAssessmentName'")
	}
	var resource DatabaseSqlVulnerabilityAssessmentRuleBaseline
	err := ctx.RegisterResource("azure-native:sql/v20220201preview:DatabaseSqlVulnerabilityAssessmentRuleBaseline", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDatabaseSqlVulnerabilityAssessmentRuleBaseline gets an existing DatabaseSqlVulnerabilityAssessmentRuleBaseline resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDatabaseSqlVulnerabilityAssessmentRuleBaseline(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DatabaseSqlVulnerabilityAssessmentRuleBaselineState, opts ...pulumi.ResourceOption) (*DatabaseSqlVulnerabilityAssessmentRuleBaseline, error) {
	var resource DatabaseSqlVulnerabilityAssessmentRuleBaseline
	err := ctx.ReadResource("azure-native:sql/v20220201preview:DatabaseSqlVulnerabilityAssessmentRuleBaseline", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DatabaseSqlVulnerabilityAssessmentRuleBaseline resources.
type databaseSqlVulnerabilityAssessmentRuleBaselineState struct {
}

type DatabaseSqlVulnerabilityAssessmentRuleBaselineState struct {
}

func (DatabaseSqlVulnerabilityAssessmentRuleBaselineState) ElementType() reflect.Type {
	return reflect.TypeOf((*databaseSqlVulnerabilityAssessmentRuleBaselineState)(nil)).Elem()
}

type databaseSqlVulnerabilityAssessmentRuleBaselineArgs struct {
	BaselineName string `pulumi:"baselineName"`
	// The name of the database.
	DatabaseName string `pulumi:"databaseName"`
	// The latest scan flag
	LatestScan bool `pulumi:"latestScan"`
	// The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
	ResourceGroupName string `pulumi:"resourceGroupName"`
	// The rule baseline result
	Results [][]string `pulumi:"results"`
	// The vulnerability assessment rule ID.
	RuleId *string `pulumi:"ruleId"`
	// The name of the server.
	ServerName string `pulumi:"serverName"`
	// The name of the vulnerability assessment.
	VulnerabilityAssessmentName string `pulumi:"vulnerabilityAssessmentName"`
}

// The set of arguments for constructing a DatabaseSqlVulnerabilityAssessmentRuleBaseline resource.
type DatabaseSqlVulnerabilityAssessmentRuleBaselineArgs struct {
	BaselineName pulumi.StringInput
	// The name of the database.
	DatabaseName pulumi.StringInput
	// The latest scan flag
	LatestScan pulumi.BoolInput
	// The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
	ResourceGroupName pulumi.StringInput
	// The rule baseline result
	Results pulumi.StringArrayArrayInput
	// The vulnerability assessment rule ID.
	RuleId pulumi.StringPtrInput
	// The name of the server.
	ServerName pulumi.StringInput
	// The name of the vulnerability assessment.
	VulnerabilityAssessmentName pulumi.StringInput
}

func (DatabaseSqlVulnerabilityAssessmentRuleBaselineArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*databaseSqlVulnerabilityAssessmentRuleBaselineArgs)(nil)).Elem()
}

type DatabaseSqlVulnerabilityAssessmentRuleBaselineInput interface {
	pulumi.Input

	ToDatabaseSqlVulnerabilityAssessmentRuleBaselineOutput() DatabaseSqlVulnerabilityAssessmentRuleBaselineOutput
	ToDatabaseSqlVulnerabilityAssessmentRuleBaselineOutputWithContext(ctx context.Context) DatabaseSqlVulnerabilityAssessmentRuleBaselineOutput
}

func (*DatabaseSqlVulnerabilityAssessmentRuleBaseline) ElementType() reflect.Type {
	return reflect.TypeOf((**DatabaseSqlVulnerabilityAssessmentRuleBaseline)(nil)).Elem()
}

func (i *DatabaseSqlVulnerabilityAssessmentRuleBaseline) ToDatabaseSqlVulnerabilityAssessmentRuleBaselineOutput() DatabaseSqlVulnerabilityAssessmentRuleBaselineOutput {
	return i.ToDatabaseSqlVulnerabilityAssessmentRuleBaselineOutputWithContext(context.Background())
}

func (i *DatabaseSqlVulnerabilityAssessmentRuleBaseline) ToDatabaseSqlVulnerabilityAssessmentRuleBaselineOutputWithContext(ctx context.Context) DatabaseSqlVulnerabilityAssessmentRuleBaselineOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatabaseSqlVulnerabilityAssessmentRuleBaselineOutput)
}

type DatabaseSqlVulnerabilityAssessmentRuleBaselineOutput struct{ *pulumi.OutputState }

func (DatabaseSqlVulnerabilityAssessmentRuleBaselineOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DatabaseSqlVulnerabilityAssessmentRuleBaseline)(nil)).Elem()
}

func (o DatabaseSqlVulnerabilityAssessmentRuleBaselineOutput) ToDatabaseSqlVulnerabilityAssessmentRuleBaselineOutput() DatabaseSqlVulnerabilityAssessmentRuleBaselineOutput {
	return o
}

func (o DatabaseSqlVulnerabilityAssessmentRuleBaselineOutput) ToDatabaseSqlVulnerabilityAssessmentRuleBaselineOutputWithContext(ctx context.Context) DatabaseSqlVulnerabilityAssessmentRuleBaselineOutput {
	return o
}

// Resource name.
func (o DatabaseSqlVulnerabilityAssessmentRuleBaselineOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *DatabaseSqlVulnerabilityAssessmentRuleBaseline) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The rule baseline result
func (o DatabaseSqlVulnerabilityAssessmentRuleBaselineOutput) Results() pulumi.StringArrayArrayOutput {
	return o.ApplyT(func(v *DatabaseSqlVulnerabilityAssessmentRuleBaseline) pulumi.StringArrayArrayOutput {
		return v.Results
	}).(pulumi.StringArrayArrayOutput)
}

// SystemData of DatabaseSqlVulnerabilityAssessmentRuleBaselineResource.
func (o DatabaseSqlVulnerabilityAssessmentRuleBaselineOutput) SystemData() SystemDataResponseOutput {
	return o.ApplyT(func(v *DatabaseSqlVulnerabilityAssessmentRuleBaseline) SystemDataResponseOutput { return v.SystemData }).(SystemDataResponseOutput)
}

// Resource type.
func (o DatabaseSqlVulnerabilityAssessmentRuleBaselineOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *DatabaseSqlVulnerabilityAssessmentRuleBaseline) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(DatabaseSqlVulnerabilityAssessmentRuleBaselineOutput{})
}
