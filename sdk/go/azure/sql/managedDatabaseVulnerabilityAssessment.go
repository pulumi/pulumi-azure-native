// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package sql

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type ManagedDatabaseVulnerabilityAssessment struct {
	pulumi.CustomResourceState

	Name           pulumi.StringOutput                                              `pulumi:"name"`
	RecurringScans VulnerabilityAssessmentRecurringScansPropertiesResponsePtrOutput `pulumi:"recurringScans"`
	Type           pulumi.StringOutput                                              `pulumi:"type"`
}

// NewManagedDatabaseVulnerabilityAssessment registers a new resource with the given unique name, arguments, and options.
func NewManagedDatabaseVulnerabilityAssessment(ctx *pulumi.Context,
	name string, args *ManagedDatabaseVulnerabilityAssessmentArgs, opts ...pulumi.ResourceOption) (*ManagedDatabaseVulnerabilityAssessment, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DatabaseName == nil {
		return nil, errors.New("invalid value for required argument 'DatabaseName'")
	}
	if args.ManagedInstanceName == nil {
		return nil, errors.New("invalid value for required argument 'ManagedInstanceName'")
	}
	if args.ResourceGroupName == nil {
		return nil, errors.New("invalid value for required argument 'ResourceGroupName'")
	}
	aliases := pulumi.Aliases([]pulumi.Alias{
		{
			Type: pulumi.String("azure-nextgen:sql:ManagedDatabaseVulnerabilityAssessment"),
		},
		{
			Type: pulumi.String("azure-native:sql/v20171001preview:ManagedDatabaseVulnerabilityAssessment"),
		},
		{
			Type: pulumi.String("azure-nextgen:sql/v20171001preview:ManagedDatabaseVulnerabilityAssessment"),
		},
		{
			Type: pulumi.String("azure-native:sql/v20200202preview:ManagedDatabaseVulnerabilityAssessment"),
		},
		{
			Type: pulumi.String("azure-nextgen:sql/v20200202preview:ManagedDatabaseVulnerabilityAssessment"),
		},
		{
			Type: pulumi.String("azure-native:sql/v20200801preview:ManagedDatabaseVulnerabilityAssessment"),
		},
		{
			Type: pulumi.String("azure-nextgen:sql/v20200801preview:ManagedDatabaseVulnerabilityAssessment"),
		},
		{
			Type: pulumi.String("azure-native:sql/v20201101preview:ManagedDatabaseVulnerabilityAssessment"),
		},
		{
			Type: pulumi.String("azure-nextgen:sql/v20201101preview:ManagedDatabaseVulnerabilityAssessment"),
		},
		{
			Type: pulumi.String("azure-native:sql/v20210201preview:ManagedDatabaseVulnerabilityAssessment"),
		},
		{
			Type: pulumi.String("azure-nextgen:sql/v20210201preview:ManagedDatabaseVulnerabilityAssessment"),
		},
	})
	opts = append(opts, aliases)
	var resource ManagedDatabaseVulnerabilityAssessment
	err := ctx.RegisterResource("azure-native:sql:ManagedDatabaseVulnerabilityAssessment", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetManagedDatabaseVulnerabilityAssessment gets an existing ManagedDatabaseVulnerabilityAssessment resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetManagedDatabaseVulnerabilityAssessment(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ManagedDatabaseVulnerabilityAssessmentState, opts ...pulumi.ResourceOption) (*ManagedDatabaseVulnerabilityAssessment, error) {
	var resource ManagedDatabaseVulnerabilityAssessment
	err := ctx.ReadResource("azure-native:sql:ManagedDatabaseVulnerabilityAssessment", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ManagedDatabaseVulnerabilityAssessment resources.
type managedDatabaseVulnerabilityAssessmentState struct {
}

type ManagedDatabaseVulnerabilityAssessmentState struct {
}

func (ManagedDatabaseVulnerabilityAssessmentState) ElementType() reflect.Type {
	return reflect.TypeOf((*managedDatabaseVulnerabilityAssessmentState)(nil)).Elem()
}

type managedDatabaseVulnerabilityAssessmentArgs struct {
	DatabaseName                string                                           `pulumi:"databaseName"`
	ManagedInstanceName         string                                           `pulumi:"managedInstanceName"`
	RecurringScans              *VulnerabilityAssessmentRecurringScansProperties `pulumi:"recurringScans"`
	ResourceGroupName           string                                           `pulumi:"resourceGroupName"`
	StorageAccountAccessKey     *string                                          `pulumi:"storageAccountAccessKey"`
	StorageContainerPath        *string                                          `pulumi:"storageContainerPath"`
	StorageContainerSasKey      *string                                          `pulumi:"storageContainerSasKey"`
	VulnerabilityAssessmentName *string                                          `pulumi:"vulnerabilityAssessmentName"`
}

// The set of arguments for constructing a ManagedDatabaseVulnerabilityAssessment resource.
type ManagedDatabaseVulnerabilityAssessmentArgs struct {
	DatabaseName                pulumi.StringInput
	ManagedInstanceName         pulumi.StringInput
	RecurringScans              VulnerabilityAssessmentRecurringScansPropertiesPtrInput
	ResourceGroupName           pulumi.StringInput
	StorageAccountAccessKey     pulumi.StringPtrInput
	StorageContainerPath        pulumi.StringPtrInput
	StorageContainerSasKey      pulumi.StringPtrInput
	VulnerabilityAssessmentName pulumi.StringPtrInput
}

func (ManagedDatabaseVulnerabilityAssessmentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*managedDatabaseVulnerabilityAssessmentArgs)(nil)).Elem()
}

type ManagedDatabaseVulnerabilityAssessmentInput interface {
	pulumi.Input

	ToManagedDatabaseVulnerabilityAssessmentOutput() ManagedDatabaseVulnerabilityAssessmentOutput
	ToManagedDatabaseVulnerabilityAssessmentOutputWithContext(ctx context.Context) ManagedDatabaseVulnerabilityAssessmentOutput
}

func (*ManagedDatabaseVulnerabilityAssessment) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedDatabaseVulnerabilityAssessment)(nil))
}

func (i *ManagedDatabaseVulnerabilityAssessment) ToManagedDatabaseVulnerabilityAssessmentOutput() ManagedDatabaseVulnerabilityAssessmentOutput {
	return i.ToManagedDatabaseVulnerabilityAssessmentOutputWithContext(context.Background())
}

func (i *ManagedDatabaseVulnerabilityAssessment) ToManagedDatabaseVulnerabilityAssessmentOutputWithContext(ctx context.Context) ManagedDatabaseVulnerabilityAssessmentOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedDatabaseVulnerabilityAssessmentOutput)
}

type ManagedDatabaseVulnerabilityAssessmentOutput struct{ *pulumi.OutputState }

func (ManagedDatabaseVulnerabilityAssessmentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedDatabaseVulnerabilityAssessment)(nil))
}

func (o ManagedDatabaseVulnerabilityAssessmentOutput) ToManagedDatabaseVulnerabilityAssessmentOutput() ManagedDatabaseVulnerabilityAssessmentOutput {
	return o
}

func (o ManagedDatabaseVulnerabilityAssessmentOutput) ToManagedDatabaseVulnerabilityAssessmentOutputWithContext(ctx context.Context) ManagedDatabaseVulnerabilityAssessmentOutput {
	return o
}

func init() {
	pulumi.RegisterOutputType(ManagedDatabaseVulnerabilityAssessmentOutput{})
}
