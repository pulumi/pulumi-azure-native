// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v20210201preview

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// A server vulnerability assessment.
func LookupServerVulnerabilityAssessment(ctx *pulumi.Context, args *LookupServerVulnerabilityAssessmentArgs, opts ...pulumi.InvokeOption) (*LookupServerVulnerabilityAssessmentResult, error) {
	var rv LookupServerVulnerabilityAssessmentResult
	err := ctx.Invoke("azure-native:sql/v20210201preview:getServerVulnerabilityAssessment", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return rv.Defaults(), nil
}

type LookupServerVulnerabilityAssessmentArgs struct {
	// The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
	ResourceGroupName string `pulumi:"resourceGroupName"`
	// The name of the server for which the vulnerability assessment is defined.
	ServerName string `pulumi:"serverName"`
	// The name of the vulnerability assessment.
	VulnerabilityAssessmentName string `pulumi:"vulnerabilityAssessmentName"`
}

// A server vulnerability assessment.
type LookupServerVulnerabilityAssessmentResult struct {
	// Resource ID.
	Id string `pulumi:"id"`
	// Resource name.
	Name string `pulumi:"name"`
	// The recurring scans settings
	RecurringScans *VulnerabilityAssessmentRecurringScansPropertiesResponse `pulumi:"recurringScans"`
	// Resource type.
	Type string `pulumi:"type"`
}

// Defaults sets the appropriate defaults for LookupServerVulnerabilityAssessmentResult
func (val *LookupServerVulnerabilityAssessmentResult) Defaults() *LookupServerVulnerabilityAssessmentResult {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.RecurringScans = tmp.RecurringScans.Defaults()

	return &tmp
}

func LookupServerVulnerabilityAssessmentOutput(ctx *pulumi.Context, args LookupServerVulnerabilityAssessmentOutputArgs, opts ...pulumi.InvokeOption) LookupServerVulnerabilityAssessmentResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupServerVulnerabilityAssessmentResult, error) {
			args := v.(LookupServerVulnerabilityAssessmentArgs)
			r, err := LookupServerVulnerabilityAssessment(ctx, &args, opts...)
			var s LookupServerVulnerabilityAssessmentResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupServerVulnerabilityAssessmentResultOutput)
}

type LookupServerVulnerabilityAssessmentOutputArgs struct {
	// The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
	ResourceGroupName pulumi.StringInput `pulumi:"resourceGroupName"`
	// The name of the server for which the vulnerability assessment is defined.
	ServerName pulumi.StringInput `pulumi:"serverName"`
	// The name of the vulnerability assessment.
	VulnerabilityAssessmentName pulumi.StringInput `pulumi:"vulnerabilityAssessmentName"`
}

func (LookupServerVulnerabilityAssessmentOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupServerVulnerabilityAssessmentArgs)(nil)).Elem()
}

// A server vulnerability assessment.
type LookupServerVulnerabilityAssessmentResultOutput struct{ *pulumi.OutputState }

func (LookupServerVulnerabilityAssessmentResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupServerVulnerabilityAssessmentResult)(nil)).Elem()
}

func (o LookupServerVulnerabilityAssessmentResultOutput) ToLookupServerVulnerabilityAssessmentResultOutput() LookupServerVulnerabilityAssessmentResultOutput {
	return o
}

func (o LookupServerVulnerabilityAssessmentResultOutput) ToLookupServerVulnerabilityAssessmentResultOutputWithContext(ctx context.Context) LookupServerVulnerabilityAssessmentResultOutput {
	return o
}

// Resource ID.
func (o LookupServerVulnerabilityAssessmentResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupServerVulnerabilityAssessmentResult) string { return v.Id }).(pulumi.StringOutput)
}

// Resource name.
func (o LookupServerVulnerabilityAssessmentResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupServerVulnerabilityAssessmentResult) string { return v.Name }).(pulumi.StringOutput)
}

// The recurring scans settings
func (o LookupServerVulnerabilityAssessmentResultOutput) RecurringScans() VulnerabilityAssessmentRecurringScansPropertiesResponsePtrOutput {
	return o.ApplyT(func(v LookupServerVulnerabilityAssessmentResult) *VulnerabilityAssessmentRecurringScansPropertiesResponse {
		return v.RecurringScans
	}).(VulnerabilityAssessmentRecurringScansPropertiesResponsePtrOutput)
}

// Resource type.
func (o LookupServerVulnerabilityAssessmentResultOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v LookupServerVulnerabilityAssessmentResult) string { return v.Type }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupServerVulnerabilityAssessmentResultOutput{})
}
