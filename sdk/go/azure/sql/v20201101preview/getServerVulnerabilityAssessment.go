


package v20201101preview

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func LookupServerVulnerabilityAssessment(ctx *pulumi.Context, args *LookupServerVulnerabilityAssessmentArgs, opts ...pulumi.InvokeOption) (*LookupServerVulnerabilityAssessmentResult, error) {
	var rv LookupServerVulnerabilityAssessmentResult
	err := ctx.Invoke("azure-native:sql/v20201101preview:getServerVulnerabilityAssessment", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return rv.Defaults(), nil
}

type LookupServerVulnerabilityAssessmentArgs struct {
	ResourceGroupName           string `pulumi:"resourceGroupName"`
	ServerName                  string `pulumi:"serverName"`
	VulnerabilityAssessmentName string `pulumi:"vulnerabilityAssessmentName"`
}


type LookupServerVulnerabilityAssessmentResult struct {
	Id             string                                                   `pulumi:"id"`
	Name           string                                                   `pulumi:"name"`
	RecurringScans *VulnerabilityAssessmentRecurringScansPropertiesResponse `pulumi:"recurringScans"`
	Type           string                                                   `pulumi:"type"`
}


func (val *LookupServerVulnerabilityAssessmentResult) Defaults() *LookupServerVulnerabilityAssessmentResult {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.RecurringScans = tmp.RecurringScans.Defaults()

	return &tmp
}

func LookupServerVulnerabilityAssessmentOutput(ctx *pulumi.Context, args LookupServerVulnerabilityAssessmentOutputArgs, opts ...pulumi.InvokeOption) LookupServerVulnerabilityAssessmentResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupServerVulnerabilityAssessmentResult, error) {
			args := v.(LookupServerVulnerabilityAssessmentArgs)
			r, err := LookupServerVulnerabilityAssessment(ctx, &args, opts...)
			var s LookupServerVulnerabilityAssessmentResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupServerVulnerabilityAssessmentResultOutput)
}

type LookupServerVulnerabilityAssessmentOutputArgs struct {
	ResourceGroupName           pulumi.StringInput `pulumi:"resourceGroupName"`
	ServerName                  pulumi.StringInput `pulumi:"serverName"`
	VulnerabilityAssessmentName pulumi.StringInput `pulumi:"vulnerabilityAssessmentName"`
}

func (LookupServerVulnerabilityAssessmentOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupServerVulnerabilityAssessmentArgs)(nil)).Elem()
}


type LookupServerVulnerabilityAssessmentResultOutput struct{ *pulumi.OutputState }

func (LookupServerVulnerabilityAssessmentResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupServerVulnerabilityAssessmentResult)(nil)).Elem()
}

func (o LookupServerVulnerabilityAssessmentResultOutput) ToLookupServerVulnerabilityAssessmentResultOutput() LookupServerVulnerabilityAssessmentResultOutput {
	return o
}

func (o LookupServerVulnerabilityAssessmentResultOutput) ToLookupServerVulnerabilityAssessmentResultOutputWithContext(ctx context.Context) LookupServerVulnerabilityAssessmentResultOutput {
	return o
}

func (o LookupServerVulnerabilityAssessmentResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupServerVulnerabilityAssessmentResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o LookupServerVulnerabilityAssessmentResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupServerVulnerabilityAssessmentResult) string { return v.Name }).(pulumi.StringOutput)
}

func (o LookupServerVulnerabilityAssessmentResultOutput) RecurringScans() VulnerabilityAssessmentRecurringScansPropertiesResponsePtrOutput {
	return o.ApplyT(func(v LookupServerVulnerabilityAssessmentResult) *VulnerabilityAssessmentRecurringScansPropertiesResponse {
		return v.RecurringScans
	}).(VulnerabilityAssessmentRecurringScansPropertiesResponsePtrOutput)
}

func (o LookupServerVulnerabilityAssessmentResultOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v LookupServerVulnerabilityAssessmentResult) string { return v.Type }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupServerVulnerabilityAssessmentResultOutput{})
}
