


package v20210801preview

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type DatabaseVulnerabilityAssessmentRuleBaseline struct {
	pulumi.CustomResourceState

	BaselineResults DatabaseVulnerabilityAssessmentRuleBaselineItemResponseArrayOutput `pulumi:"baselineResults"`
	Name            pulumi.StringOutput                                                `pulumi:"name"`
	Type            pulumi.StringOutput                                                `pulumi:"type"`
}


func NewDatabaseVulnerabilityAssessmentRuleBaseline(ctx *pulumi.Context,
	name string, args *DatabaseVulnerabilityAssessmentRuleBaselineArgs, opts ...pulumi.ResourceOption) (*DatabaseVulnerabilityAssessmentRuleBaseline, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.BaselineResults == nil {
		return nil, errors.New("invalid value for required argument 'BaselineResults'")
	}
	if args.DatabaseName == nil {
		return nil, errors.New("invalid value for required argument 'DatabaseName'")
	}
	if args.ResourceGroupName == nil {
		return nil, errors.New("invalid value for required argument 'ResourceGroupName'")
	}
	if args.RuleId == nil {
		return nil, errors.New("invalid value for required argument 'RuleId'")
	}
	if args.ServerName == nil {
		return nil, errors.New("invalid value for required argument 'ServerName'")
	}
	if args.VulnerabilityAssessmentName == nil {
		return nil, errors.New("invalid value for required argument 'VulnerabilityAssessmentName'")
	}
	aliases := pulumi.Aliases([]pulumi.Alias{
		{
			Type: pulumi.String("azure-native:sql:DatabaseVulnerabilityAssessmentRuleBaseline"),
		},
		{
			Type: pulumi.String("azure-native:sql/v20170301preview:DatabaseVulnerabilityAssessmentRuleBaseline"),
		},
		{
			Type: pulumi.String("azure-native:sql/v20200202preview:DatabaseVulnerabilityAssessmentRuleBaseline"),
		},
		{
			Type: pulumi.String("azure-native:sql/v20200801preview:DatabaseVulnerabilityAssessmentRuleBaseline"),
		},
		{
			Type: pulumi.String("azure-native:sql/v20201101preview:DatabaseVulnerabilityAssessmentRuleBaseline"),
		},
		{
			Type: pulumi.String("azure-native:sql/v20210201preview:DatabaseVulnerabilityAssessmentRuleBaseline"),
		},
		{
			Type: pulumi.String("azure-native:sql/v20210501preview:DatabaseVulnerabilityAssessmentRuleBaseline"),
		},
		{
			Type: pulumi.String("azure-native:sql/v20211101:DatabaseVulnerabilityAssessmentRuleBaseline"),
		},
		{
			Type: pulumi.String("azure-native:sql/v20211101preview:DatabaseVulnerabilityAssessmentRuleBaseline"),
		},
		{
			Type: pulumi.String("azure-native:sql/v20220201preview:DatabaseVulnerabilityAssessmentRuleBaseline"),
		},
	})
	opts = append(opts, aliases)
	var resource DatabaseVulnerabilityAssessmentRuleBaseline
	err := ctx.RegisterResource("azure-native:sql/v20210801preview:DatabaseVulnerabilityAssessmentRuleBaseline", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}



func GetDatabaseVulnerabilityAssessmentRuleBaseline(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DatabaseVulnerabilityAssessmentRuleBaselineState, opts ...pulumi.ResourceOption) (*DatabaseVulnerabilityAssessmentRuleBaseline, error) {
	var resource DatabaseVulnerabilityAssessmentRuleBaseline
	err := ctx.ReadResource("azure-native:sql/v20210801preview:DatabaseVulnerabilityAssessmentRuleBaseline", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}


type databaseVulnerabilityAssessmentRuleBaselineState struct {
}

type DatabaseVulnerabilityAssessmentRuleBaselineState struct {
}

func (DatabaseVulnerabilityAssessmentRuleBaselineState) ElementType() reflect.Type {
	return reflect.TypeOf((*databaseVulnerabilityAssessmentRuleBaselineState)(nil)).Elem()
}

type databaseVulnerabilityAssessmentRuleBaselineArgs struct {
	BaselineName                *string                                           `pulumi:"baselineName"`
	BaselineResults             []DatabaseVulnerabilityAssessmentRuleBaselineItem `pulumi:"baselineResults"`
	DatabaseName                string                                            `pulumi:"databaseName"`
	ResourceGroupName           string                                            `pulumi:"resourceGroupName"`
	RuleId                      string                                            `pulumi:"ruleId"`
	ServerName                  string                                            `pulumi:"serverName"`
	VulnerabilityAssessmentName string                                            `pulumi:"vulnerabilityAssessmentName"`
}


type DatabaseVulnerabilityAssessmentRuleBaselineArgs struct {
	BaselineName                pulumi.StringPtrInput
	BaselineResults             DatabaseVulnerabilityAssessmentRuleBaselineItemArrayInput
	DatabaseName                pulumi.StringInput
	ResourceGroupName           pulumi.StringInput
	RuleId                      pulumi.StringInput
	ServerName                  pulumi.StringInput
	VulnerabilityAssessmentName pulumi.StringInput
}

func (DatabaseVulnerabilityAssessmentRuleBaselineArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*databaseVulnerabilityAssessmentRuleBaselineArgs)(nil)).Elem()
}

type DatabaseVulnerabilityAssessmentRuleBaselineInput interface {
	pulumi.Input

	ToDatabaseVulnerabilityAssessmentRuleBaselineOutput() DatabaseVulnerabilityAssessmentRuleBaselineOutput
	ToDatabaseVulnerabilityAssessmentRuleBaselineOutputWithContext(ctx context.Context) DatabaseVulnerabilityAssessmentRuleBaselineOutput
}

func (*DatabaseVulnerabilityAssessmentRuleBaseline) ElementType() reflect.Type {
	return reflect.TypeOf((**DatabaseVulnerabilityAssessmentRuleBaseline)(nil)).Elem()
}

func (i *DatabaseVulnerabilityAssessmentRuleBaseline) ToDatabaseVulnerabilityAssessmentRuleBaselineOutput() DatabaseVulnerabilityAssessmentRuleBaselineOutput {
	return i.ToDatabaseVulnerabilityAssessmentRuleBaselineOutputWithContext(context.Background())
}

func (i *DatabaseVulnerabilityAssessmentRuleBaseline) ToDatabaseVulnerabilityAssessmentRuleBaselineOutputWithContext(ctx context.Context) DatabaseVulnerabilityAssessmentRuleBaselineOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatabaseVulnerabilityAssessmentRuleBaselineOutput)
}

type DatabaseVulnerabilityAssessmentRuleBaselineOutput struct{ *pulumi.OutputState }

func (DatabaseVulnerabilityAssessmentRuleBaselineOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DatabaseVulnerabilityAssessmentRuleBaseline)(nil)).Elem()
}

func (o DatabaseVulnerabilityAssessmentRuleBaselineOutput) ToDatabaseVulnerabilityAssessmentRuleBaselineOutput() DatabaseVulnerabilityAssessmentRuleBaselineOutput {
	return o
}

func (o DatabaseVulnerabilityAssessmentRuleBaselineOutput) ToDatabaseVulnerabilityAssessmentRuleBaselineOutputWithContext(ctx context.Context) DatabaseVulnerabilityAssessmentRuleBaselineOutput {
	return o
}

func (o DatabaseVulnerabilityAssessmentRuleBaselineOutput) BaselineResults() DatabaseVulnerabilityAssessmentRuleBaselineItemResponseArrayOutput {
	return o.ApplyT(func(v *DatabaseVulnerabilityAssessmentRuleBaseline) DatabaseVulnerabilityAssessmentRuleBaselineItemResponseArrayOutput {
		return v.BaselineResults
	}).(DatabaseVulnerabilityAssessmentRuleBaselineItemResponseArrayOutput)
}

func (o DatabaseVulnerabilityAssessmentRuleBaselineOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *DatabaseVulnerabilityAssessmentRuleBaseline) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o DatabaseVulnerabilityAssessmentRuleBaselineOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *DatabaseVulnerabilityAssessmentRuleBaseline) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(DatabaseVulnerabilityAssessmentRuleBaselineOutput{})
}
