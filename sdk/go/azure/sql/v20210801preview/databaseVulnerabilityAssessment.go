


package v20210801preview

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type DatabaseVulnerabilityAssessment struct {
	pulumi.CustomResourceState

	Name           pulumi.StringOutput                                              `pulumi:"name"`
	RecurringScans VulnerabilityAssessmentRecurringScansPropertiesResponsePtrOutput `pulumi:"recurringScans"`
	Type           pulumi.StringOutput                                              `pulumi:"type"`
}


func NewDatabaseVulnerabilityAssessment(ctx *pulumi.Context,
	name string, args *DatabaseVulnerabilityAssessmentArgs, opts ...pulumi.ResourceOption) (*DatabaseVulnerabilityAssessment, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DatabaseName == nil {
		return nil, errors.New("invalid value for required argument 'DatabaseName'")
	}
	if args.ResourceGroupName == nil {
		return nil, errors.New("invalid value for required argument 'ResourceGroupName'")
	}
	if args.ServerName == nil {
		return nil, errors.New("invalid value for required argument 'ServerName'")
	}
	if args.RecurringScans != nil {
		args.RecurringScans = args.RecurringScans.ToVulnerabilityAssessmentRecurringScansPropertiesPtrOutput().ApplyT(func(v *VulnerabilityAssessmentRecurringScansProperties) *VulnerabilityAssessmentRecurringScansProperties {
			return v.Defaults()
		}).(VulnerabilityAssessmentRecurringScansPropertiesPtrOutput)
	}
	aliases := pulumi.Aliases([]pulumi.Alias{
		{
			Type: pulumi.String("azure-native:sql:DatabaseVulnerabilityAssessment"),
		},
		{
			Type: pulumi.String("azure-native:sql/v20170301preview:DatabaseVulnerabilityAssessment"),
		},
		{
			Type: pulumi.String("azure-native:sql/v20200202preview:DatabaseVulnerabilityAssessment"),
		},
		{
			Type: pulumi.String("azure-native:sql/v20200801preview:DatabaseVulnerabilityAssessment"),
		},
		{
			Type: pulumi.String("azure-native:sql/v20201101preview:DatabaseVulnerabilityAssessment"),
		},
		{
			Type: pulumi.String("azure-native:sql/v20210201preview:DatabaseVulnerabilityAssessment"),
		},
		{
			Type: pulumi.String("azure-native:sql/v20210501preview:DatabaseVulnerabilityAssessment"),
		},
		{
			Type: pulumi.String("azure-native:sql/v20211101:DatabaseVulnerabilityAssessment"),
		},
		{
			Type: pulumi.String("azure-native:sql/v20211101preview:DatabaseVulnerabilityAssessment"),
		},
		{
			Type: pulumi.String("azure-native:sql/v20220201preview:DatabaseVulnerabilityAssessment"),
		},
	})
	opts = append(opts, aliases)
	var resource DatabaseVulnerabilityAssessment
	err := ctx.RegisterResource("azure-native:sql/v20210801preview:DatabaseVulnerabilityAssessment", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}



func GetDatabaseVulnerabilityAssessment(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DatabaseVulnerabilityAssessmentState, opts ...pulumi.ResourceOption) (*DatabaseVulnerabilityAssessment, error) {
	var resource DatabaseVulnerabilityAssessment
	err := ctx.ReadResource("azure-native:sql/v20210801preview:DatabaseVulnerabilityAssessment", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}


type databaseVulnerabilityAssessmentState struct {
}

type DatabaseVulnerabilityAssessmentState struct {
}

func (DatabaseVulnerabilityAssessmentState) ElementType() reflect.Type {
	return reflect.TypeOf((*databaseVulnerabilityAssessmentState)(nil)).Elem()
}

type databaseVulnerabilityAssessmentArgs struct {
	DatabaseName                string                                           `pulumi:"databaseName"`
	RecurringScans              *VulnerabilityAssessmentRecurringScansProperties `pulumi:"recurringScans"`
	ResourceGroupName           string                                           `pulumi:"resourceGroupName"`
	ServerName                  string                                           `pulumi:"serverName"`
	StorageAccountAccessKey     *string                                          `pulumi:"storageAccountAccessKey"`
	StorageContainerPath        *string                                          `pulumi:"storageContainerPath"`
	StorageContainerSasKey      *string                                          `pulumi:"storageContainerSasKey"`
	VulnerabilityAssessmentName *string                                          `pulumi:"vulnerabilityAssessmentName"`
}


type DatabaseVulnerabilityAssessmentArgs struct {
	DatabaseName                pulumi.StringInput
	RecurringScans              VulnerabilityAssessmentRecurringScansPropertiesPtrInput
	ResourceGroupName           pulumi.StringInput
	ServerName                  pulumi.StringInput
	StorageAccountAccessKey     pulumi.StringPtrInput
	StorageContainerPath        pulumi.StringPtrInput
	StorageContainerSasKey      pulumi.StringPtrInput
	VulnerabilityAssessmentName pulumi.StringPtrInput
}

func (DatabaseVulnerabilityAssessmentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*databaseVulnerabilityAssessmentArgs)(nil)).Elem()
}

type DatabaseVulnerabilityAssessmentInput interface {
	pulumi.Input

	ToDatabaseVulnerabilityAssessmentOutput() DatabaseVulnerabilityAssessmentOutput
	ToDatabaseVulnerabilityAssessmentOutputWithContext(ctx context.Context) DatabaseVulnerabilityAssessmentOutput
}

func (*DatabaseVulnerabilityAssessment) ElementType() reflect.Type {
	return reflect.TypeOf((**DatabaseVulnerabilityAssessment)(nil)).Elem()
}

func (i *DatabaseVulnerabilityAssessment) ToDatabaseVulnerabilityAssessmentOutput() DatabaseVulnerabilityAssessmentOutput {
	return i.ToDatabaseVulnerabilityAssessmentOutputWithContext(context.Background())
}

func (i *DatabaseVulnerabilityAssessment) ToDatabaseVulnerabilityAssessmentOutputWithContext(ctx context.Context) DatabaseVulnerabilityAssessmentOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatabaseVulnerabilityAssessmentOutput)
}

type DatabaseVulnerabilityAssessmentOutput struct{ *pulumi.OutputState }

func (DatabaseVulnerabilityAssessmentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DatabaseVulnerabilityAssessment)(nil)).Elem()
}

func (o DatabaseVulnerabilityAssessmentOutput) ToDatabaseVulnerabilityAssessmentOutput() DatabaseVulnerabilityAssessmentOutput {
	return o
}

func (o DatabaseVulnerabilityAssessmentOutput) ToDatabaseVulnerabilityAssessmentOutputWithContext(ctx context.Context) DatabaseVulnerabilityAssessmentOutput {
	return o
}

func (o DatabaseVulnerabilityAssessmentOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *DatabaseVulnerabilityAssessment) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o DatabaseVulnerabilityAssessmentOutput) RecurringScans() VulnerabilityAssessmentRecurringScansPropertiesResponsePtrOutput {
	return o.ApplyT(func(v *DatabaseVulnerabilityAssessment) VulnerabilityAssessmentRecurringScansPropertiesResponsePtrOutput {
		return v.RecurringScans
	}).(VulnerabilityAssessmentRecurringScansPropertiesResponsePtrOutput)
}

func (o DatabaseVulnerabilityAssessmentOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *DatabaseVulnerabilityAssessment) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(DatabaseVulnerabilityAssessmentOutput{})
}
