// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v20210801preview

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Azure Active Directory administrator.
func LookupServerAzureADAdministrator(ctx *pulumi.Context, args *LookupServerAzureADAdministratorArgs, opts ...pulumi.InvokeOption) (*LookupServerAzureADAdministratorResult, error) {
	var rv LookupServerAzureADAdministratorResult
	err := ctx.Invoke("azure-native:sql/v20210801preview:getServerAzureADAdministrator", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type LookupServerAzureADAdministratorArgs struct {
	// The name of server active directory administrator.
	AdministratorName string `pulumi:"administratorName"`
	// The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
	ResourceGroupName string `pulumi:"resourceGroupName"`
	// The name of the server.
	ServerName string `pulumi:"serverName"`
}

// Azure Active Directory administrator.
type LookupServerAzureADAdministratorResult struct {
	// Type of the sever administrator.
	AdministratorType string `pulumi:"administratorType"`
	// Azure Active Directory only Authentication enabled.
	AzureADOnlyAuthentication bool `pulumi:"azureADOnlyAuthentication"`
	// Resource ID.
	Id string `pulumi:"id"`
	// Login name of the server administrator.
	Login string `pulumi:"login"`
	// Resource name.
	Name string `pulumi:"name"`
	// SID (object ID) of the server administrator.
	Sid string `pulumi:"sid"`
	// Tenant ID of the administrator.
	TenantId *string `pulumi:"tenantId"`
	// Resource type.
	Type string `pulumi:"type"`
}

func LookupServerAzureADAdministratorOutput(ctx *pulumi.Context, args LookupServerAzureADAdministratorOutputArgs, opts ...pulumi.InvokeOption) LookupServerAzureADAdministratorResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupServerAzureADAdministratorResult, error) {
			args := v.(LookupServerAzureADAdministratorArgs)
			r, err := LookupServerAzureADAdministrator(ctx, &args, opts...)
			var s LookupServerAzureADAdministratorResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupServerAzureADAdministratorResultOutput)
}

type LookupServerAzureADAdministratorOutputArgs struct {
	// The name of server active directory administrator.
	AdministratorName pulumi.StringInput `pulumi:"administratorName"`
	// The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
	ResourceGroupName pulumi.StringInput `pulumi:"resourceGroupName"`
	// The name of the server.
	ServerName pulumi.StringInput `pulumi:"serverName"`
}

func (LookupServerAzureADAdministratorOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupServerAzureADAdministratorArgs)(nil)).Elem()
}

// Azure Active Directory administrator.
type LookupServerAzureADAdministratorResultOutput struct{ *pulumi.OutputState }

func (LookupServerAzureADAdministratorResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupServerAzureADAdministratorResult)(nil)).Elem()
}

func (o LookupServerAzureADAdministratorResultOutput) ToLookupServerAzureADAdministratorResultOutput() LookupServerAzureADAdministratorResultOutput {
	return o
}

func (o LookupServerAzureADAdministratorResultOutput) ToLookupServerAzureADAdministratorResultOutputWithContext(ctx context.Context) LookupServerAzureADAdministratorResultOutput {
	return o
}

// Type of the sever administrator.
func (o LookupServerAzureADAdministratorResultOutput) AdministratorType() pulumi.StringOutput {
	return o.ApplyT(func(v LookupServerAzureADAdministratorResult) string { return v.AdministratorType }).(pulumi.StringOutput)
}

// Azure Active Directory only Authentication enabled.
func (o LookupServerAzureADAdministratorResultOutput) AzureADOnlyAuthentication() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupServerAzureADAdministratorResult) bool { return v.AzureADOnlyAuthentication }).(pulumi.BoolOutput)
}

// Resource ID.
func (o LookupServerAzureADAdministratorResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupServerAzureADAdministratorResult) string { return v.Id }).(pulumi.StringOutput)
}

// Login name of the server administrator.
func (o LookupServerAzureADAdministratorResultOutput) Login() pulumi.StringOutput {
	return o.ApplyT(func(v LookupServerAzureADAdministratorResult) string { return v.Login }).(pulumi.StringOutput)
}

// Resource name.
func (o LookupServerAzureADAdministratorResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupServerAzureADAdministratorResult) string { return v.Name }).(pulumi.StringOutput)
}

// SID (object ID) of the server administrator.
func (o LookupServerAzureADAdministratorResultOutput) Sid() pulumi.StringOutput {
	return o.ApplyT(func(v LookupServerAzureADAdministratorResult) string { return v.Sid }).(pulumi.StringOutput)
}

// Tenant ID of the administrator.
func (o LookupServerAzureADAdministratorResultOutput) TenantId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupServerAzureADAdministratorResult) *string { return v.TenantId }).(pulumi.StringPtrOutput)
}

// Resource type.
func (o LookupServerAzureADAdministratorResultOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v LookupServerAzureADAdministratorResult) string { return v.Type }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupServerAzureADAdministratorResultOutput{})
}
