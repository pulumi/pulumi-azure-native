// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v20190601preview

import (
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// Workload classifier operations for a data warehouse
type WorkloadClassifier struct {
	pulumi.CustomResourceState

	// The workload classifier context.
	Context pulumi.StringPtrOutput `pulumi:"context"`
	// The workload classifier end time for classification.
	EndTime pulumi.StringPtrOutput `pulumi:"endTime"`
	// The workload classifier importance.
	Importance pulumi.StringPtrOutput `pulumi:"importance"`
	// The workload classifier label.
	Label pulumi.StringPtrOutput `pulumi:"label"`
	// The workload classifier member name.
	MemberName pulumi.StringOutput `pulumi:"memberName"`
	// Resource name.
	Name pulumi.StringOutput `pulumi:"name"`
	// The workload classifier start time for classification.
	StartTime pulumi.StringPtrOutput `pulumi:"startTime"`
	// Resource type.
	Type pulumi.StringOutput `pulumi:"type"`
}

// NewWorkloadClassifier registers a new resource with the given unique name, arguments, and options.
func NewWorkloadClassifier(ctx *pulumi.Context,
	name string, args *WorkloadClassifierArgs, opts ...pulumi.ResourceOption) (*WorkloadClassifier, error) {
	if args == nil || args.DatabaseName == nil {
		return nil, errors.New("missing required argument 'DatabaseName'")
	}
	if args == nil || args.MemberName == nil {
		return nil, errors.New("missing required argument 'MemberName'")
	}
	if args == nil || args.ResourceGroupName == nil {
		return nil, errors.New("missing required argument 'ResourceGroupName'")
	}
	if args == nil || args.ServerName == nil {
		return nil, errors.New("missing required argument 'ServerName'")
	}
	if args == nil || args.WorkloadClassifierName == nil {
		return nil, errors.New("missing required argument 'WorkloadClassifierName'")
	}
	if args == nil || args.WorkloadGroupName == nil {
		return nil, errors.New("missing required argument 'WorkloadGroupName'")
	}
	if args == nil {
		args = &WorkloadClassifierArgs{}
	}
	var resource WorkloadClassifier
	err := ctx.RegisterResource("azure-nextgen:sql/v20190601preview:WorkloadClassifier", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetWorkloadClassifier gets an existing WorkloadClassifier resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetWorkloadClassifier(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *WorkloadClassifierState, opts ...pulumi.ResourceOption) (*WorkloadClassifier, error) {
	var resource WorkloadClassifier
	err := ctx.ReadResource("azure-nextgen:sql/v20190601preview:WorkloadClassifier", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering WorkloadClassifier resources.
type workloadClassifierState struct {
	// The workload classifier context.
	Context *string `pulumi:"context"`
	// The workload classifier end time for classification.
	EndTime *string `pulumi:"endTime"`
	// The workload classifier importance.
	Importance *string `pulumi:"importance"`
	// The workload classifier label.
	Label *string `pulumi:"label"`
	// The workload classifier member name.
	MemberName *string `pulumi:"memberName"`
	// Resource name.
	Name *string `pulumi:"name"`
	// The workload classifier start time for classification.
	StartTime *string `pulumi:"startTime"`
	// Resource type.
	Type *string `pulumi:"type"`
}

type WorkloadClassifierState struct {
	// The workload classifier context.
	Context pulumi.StringPtrInput
	// The workload classifier end time for classification.
	EndTime pulumi.StringPtrInput
	// The workload classifier importance.
	Importance pulumi.StringPtrInput
	// The workload classifier label.
	Label pulumi.StringPtrInput
	// The workload classifier member name.
	MemberName pulumi.StringPtrInput
	// Resource name.
	Name pulumi.StringPtrInput
	// The workload classifier start time for classification.
	StartTime pulumi.StringPtrInput
	// Resource type.
	Type pulumi.StringPtrInput
}

func (WorkloadClassifierState) ElementType() reflect.Type {
	return reflect.TypeOf((*workloadClassifierState)(nil)).Elem()
}

type workloadClassifierArgs struct {
	// The workload classifier context.
	Context *string `pulumi:"context"`
	// The name of the database.
	DatabaseName string `pulumi:"databaseName"`
	// The workload classifier end time for classification.
	EndTime *string `pulumi:"endTime"`
	// The workload classifier importance.
	Importance *string `pulumi:"importance"`
	// The workload classifier label.
	Label *string `pulumi:"label"`
	// The workload classifier member name.
	MemberName string `pulumi:"memberName"`
	// The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
	ResourceGroupName string `pulumi:"resourceGroupName"`
	// The name of the server.
	ServerName string `pulumi:"serverName"`
	// The workload classifier start time for classification.
	StartTime *string `pulumi:"startTime"`
	// The name of the workload classifier to create/update.
	WorkloadClassifierName string `pulumi:"workloadClassifierName"`
	// The name of the workload group from which to receive the classifier from.
	WorkloadGroupName string `pulumi:"workloadGroupName"`
}

// The set of arguments for constructing a WorkloadClassifier resource.
type WorkloadClassifierArgs struct {
	// The workload classifier context.
	Context pulumi.StringPtrInput
	// The name of the database.
	DatabaseName pulumi.StringInput
	// The workload classifier end time for classification.
	EndTime pulumi.StringPtrInput
	// The workload classifier importance.
	Importance pulumi.StringPtrInput
	// The workload classifier label.
	Label pulumi.StringPtrInput
	// The workload classifier member name.
	MemberName pulumi.StringInput
	// The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
	ResourceGroupName pulumi.StringInput
	// The name of the server.
	ServerName pulumi.StringInput
	// The workload classifier start time for classification.
	StartTime pulumi.StringPtrInput
	// The name of the workload classifier to create/update.
	WorkloadClassifierName pulumi.StringInput
	// The name of the workload group from which to receive the classifier from.
	WorkloadGroupName pulumi.StringInput
}

func (WorkloadClassifierArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*workloadClassifierArgs)(nil)).Elem()
}
