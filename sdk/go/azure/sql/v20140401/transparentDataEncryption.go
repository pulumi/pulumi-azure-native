// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v20140401

import (
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// Represents a database transparent data encryption configuration.
type TransparentDataEncryption struct {
	pulumi.CustomResourceState

	// Resource location.
	Location pulumi.StringOutput `pulumi:"location"`
	// Resource name.
	Name pulumi.StringOutput `pulumi:"name"`
	// The status of the database transparent data encryption.
	Status pulumi.StringPtrOutput `pulumi:"status"`
	// Resource type.
	Type pulumi.StringOutput `pulumi:"type"`
}

// NewTransparentDataEncryption registers a new resource with the given unique name, arguments, and options.
func NewTransparentDataEncryption(ctx *pulumi.Context,
	name string, args *TransparentDataEncryptionArgs, opts ...pulumi.ResourceOption) (*TransparentDataEncryption, error) {
	if args == nil || args.DatabaseName == nil {
		return nil, errors.New("missing required argument 'DatabaseName'")
	}
	if args == nil || args.ResourceGroupName == nil {
		return nil, errors.New("missing required argument 'ResourceGroupName'")
	}
	if args == nil || args.ServerName == nil {
		return nil, errors.New("missing required argument 'ServerName'")
	}
	if args == nil || args.TransparentDataEncryptionName == nil {
		return nil, errors.New("missing required argument 'TransparentDataEncryptionName'")
	}
	if args == nil {
		args = &TransparentDataEncryptionArgs{}
	}
	aliases := pulumi.Aliases([]pulumi.Alias{
		{
			Type: pulumi.String("azure-nextgen:sql/latest:TransparentDataEncryption"),
		},
	})
	opts = append(opts, aliases)
	var resource TransparentDataEncryption
	err := ctx.RegisterResource("azure-nextgen:sql/v20140401:TransparentDataEncryption", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetTransparentDataEncryption gets an existing TransparentDataEncryption resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetTransparentDataEncryption(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *TransparentDataEncryptionState, opts ...pulumi.ResourceOption) (*TransparentDataEncryption, error) {
	var resource TransparentDataEncryption
	err := ctx.ReadResource("azure-nextgen:sql/v20140401:TransparentDataEncryption", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering TransparentDataEncryption resources.
type transparentDataEncryptionState struct {
	// Resource location.
	Location *string `pulumi:"location"`
	// Resource name.
	Name *string `pulumi:"name"`
	// The status of the database transparent data encryption.
	Status *string `pulumi:"status"`
	// Resource type.
	Type *string `pulumi:"type"`
}

type TransparentDataEncryptionState struct {
	// Resource location.
	Location pulumi.StringPtrInput
	// Resource name.
	Name pulumi.StringPtrInput
	// The status of the database transparent data encryption.
	Status pulumi.StringPtrInput
	// Resource type.
	Type pulumi.StringPtrInput
}

func (TransparentDataEncryptionState) ElementType() reflect.Type {
	return reflect.TypeOf((*transparentDataEncryptionState)(nil)).Elem()
}

type transparentDataEncryptionArgs struct {
	// The name of the database for which setting the transparent data encryption applies.
	DatabaseName string `pulumi:"databaseName"`
	// The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
	ResourceGroupName string `pulumi:"resourceGroupName"`
	// The name of the server.
	ServerName string `pulumi:"serverName"`
	// The status of the database transparent data encryption.
	Status *string `pulumi:"status"`
	// The name of the transparent data encryption configuration.
	TransparentDataEncryptionName string `pulumi:"transparentDataEncryptionName"`
}

// The set of arguments for constructing a TransparentDataEncryption resource.
type TransparentDataEncryptionArgs struct {
	// The name of the database for which setting the transparent data encryption applies.
	DatabaseName pulumi.StringInput
	// The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
	ResourceGroupName pulumi.StringInput
	// The name of the server.
	ServerName pulumi.StringInput
	// The status of the database transparent data encryption.
	Status pulumi.StringPtrInput
	// The name of the transparent data encryption configuration.
	TransparentDataEncryptionName pulumi.StringInput
}

func (TransparentDataEncryptionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*transparentDataEncryptionArgs)(nil)).Elem()
}
