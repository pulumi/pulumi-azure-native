// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v20140401

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// The type of administrator.
type AdministratorType pulumi.String

const (
	AdministratorTypeActiveDirectory = AdministratorType("ActiveDirectory")
)

func (AdministratorType) ElementType() reflect.Type {
	return reflect.TypeOf((*pulumi.String)(nil)).Elem()
}

func (e AdministratorType) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e AdministratorType) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e AdministratorType) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e AdministratorType) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

// Specifies the mode of database creation.
//
// Default: regular database creation.
//
// Copy: creates a database as a copy of an existing database. sourceDatabaseId must be specified as the resource ID of the source database.
//
// OnlineSecondary/NonReadableSecondary: creates a database as a (readable or nonreadable) secondary replica of an existing database. sourceDatabaseId must be specified as the resource ID of the existing primary database.
//
// PointInTimeRestore: Creates a database by restoring a point in time backup of an existing database. sourceDatabaseId must be specified as the resource ID of the existing database, and restorePointInTime must be specified.
//
// Recovery: Creates a database by restoring a geo-replicated backup. sourceDatabaseId must be specified as the recoverable database resource ID to restore.
//
// Restore: Creates a database by restoring a backup of a deleted database. sourceDatabaseId must be specified. If sourceDatabaseId is the database's original resource ID, then sourceDatabaseDeletionDate must be specified. Otherwise sourceDatabaseId must be the restorable dropped database resource ID and sourceDatabaseDeletionDate is ignored. restorePointInTime may also be specified to restore from an earlier point in time.
//
// RestoreLongTermRetentionBackup: Creates a database by restoring from a long term retention vault. recoveryServicesRecoveryPointResourceId must be specified as the recovery point resource ID.
//
// Copy, NonReadableSecondary, OnlineSecondary and RestoreLongTermRetentionBackup are not supported for DataWarehouse edition.
type CreateMode pulumi.String

const (
	CreateModeCopy                           = CreateMode("Copy")
	CreateModeDefault                        = CreateMode("Default")
	CreateModeNonReadableSecondary           = CreateMode("NonReadableSecondary")
	CreateModeOnlineSecondary                = CreateMode("OnlineSecondary")
	CreateModePointInTimeRestore             = CreateMode("PointInTimeRestore")
	CreateModeRecovery                       = CreateMode("Recovery")
	CreateModeRestore                        = CreateMode("Restore")
	CreateModeRestoreLongTermRetentionBackup = CreateMode("RestoreLongTermRetentionBackup")
)

func (CreateMode) ElementType() reflect.Type {
	return reflect.TypeOf((*pulumi.String)(nil)).Elem()
}

func (e CreateMode) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e CreateMode) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e CreateMode) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e CreateMode) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

// The edition of the database. The DatabaseEditions enumeration contains all the valid editions. If createMode is NonReadableSecondary or OnlineSecondary, this value is ignored.
//
// The list of SKUs may vary by region and support offer. To determine the SKUs (including the SKU name, tier/edition, family, and capacity) that are available to your subscription in an Azure region, use the `Capabilities_ListByLocation` REST API or one of the following commands:
type DatabaseEdition pulumi.String

const (
	DatabaseEditionWeb              = DatabaseEdition("Web")
	DatabaseEditionBusiness         = DatabaseEdition("Business")
	DatabaseEditionBasic            = DatabaseEdition("Basic")
	DatabaseEditionStandard         = DatabaseEdition("Standard")
	DatabaseEditionPremium          = DatabaseEdition("Premium")
	DatabaseEditionPremiumRS        = DatabaseEdition("PremiumRS")
	DatabaseEditionFree             = DatabaseEdition("Free")
	DatabaseEditionStretch          = DatabaseEdition("Stretch")
	DatabaseEditionDataWarehouse    = DatabaseEdition("DataWarehouse")
	DatabaseEditionSystem           = DatabaseEdition("System")
	DatabaseEditionSystem2          = DatabaseEdition("System2")
	DatabaseEditionGeneralPurpose   = DatabaseEdition("GeneralPurpose")
	DatabaseEditionBusinessCritical = DatabaseEdition("BusinessCritical")
	DatabaseEditionHyperscale       = DatabaseEdition("Hyperscale")
)

func (DatabaseEdition) ElementType() reflect.Type {
	return reflect.TypeOf((*pulumi.String)(nil)).Elem()
}

func (e DatabaseEdition) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e DatabaseEdition) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e DatabaseEdition) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e DatabaseEdition) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

// The edition of the elastic pool.
type ElasticPoolEdition pulumi.String

const (
	ElasticPoolEditionBasic            = ElasticPoolEdition("Basic")
	ElasticPoolEditionStandard         = ElasticPoolEdition("Standard")
	ElasticPoolEditionPremium          = ElasticPoolEdition("Premium")
	ElasticPoolEditionGeneralPurpose   = ElasticPoolEdition("GeneralPurpose")
	ElasticPoolEditionBusinessCritical = ElasticPoolEdition("BusinessCritical")
)

func (ElasticPoolEdition) ElementType() reflect.Type {
	return reflect.TypeOf((*pulumi.String)(nil)).Elem()
}

func (e ElasticPoolEdition) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e ElasticPoolEdition) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e ElasticPoolEdition) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e ElasticPoolEdition) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

// The state of the geo backup policy.
type GeoBackupPolicyState pulumi.String

const (
	GeoBackupPolicyStateDisabled = GeoBackupPolicyState("Disabled")
	GeoBackupPolicyStateEnabled  = GeoBackupPolicyState("Enabled")
)

func (GeoBackupPolicyState) ElementType() reflect.Type {
	return reflect.TypeOf((*pulumi.String)(nil)).Elem()
}

func (e GeoBackupPolicyState) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e GeoBackupPolicyState) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e GeoBackupPolicyState) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e GeoBackupPolicyState) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

// Conditional. If the database is a geo-secondary, readScale indicates whether read-only connections are allowed to this database or not. Not supported for DataWarehouse edition.
type ReadScale pulumi.String

const (
	ReadScaleEnabled  = ReadScale("Enabled")
	ReadScaleDisabled = ReadScale("Disabled")
)

func (ReadScale) ElementType() reflect.Type {
	return reflect.TypeOf((*pulumi.String)(nil)).Elem()
}

func (e ReadScale) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e ReadScale) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e ReadScale) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e ReadScale) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

// Indicates the name of the sample schema to apply when creating this database. If createMode is not Default, this value is ignored. Not supported for DataWarehouse edition.
type SampleName pulumi.String

const (
	SampleNameAdventureWorksLT = SampleName("AdventureWorksLT")
)

func (SampleName) ElementType() reflect.Type {
	return reflect.TypeOf((*pulumi.String)(nil)).Elem()
}

func (e SampleName) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e SampleName) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e SampleName) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e SampleName) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

// The version of the server.
type ServerVersion pulumi.String

const (
	ServerVersion__0   = ServerVersion("2.0")
	ServerVersion__2_0 = ServerVersion("12.0")
)

func (ServerVersion) ElementType() reflect.Type {
	return reflect.TypeOf((*pulumi.String)(nil)).Elem()
}

func (e ServerVersion) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e ServerVersion) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e ServerVersion) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e ServerVersion) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

// The name of the configured service level objective of the database. This is the service level objective that is in the process of being applied to the database. Once successfully updated, it will match the value of serviceLevelObjective property.
//
// The list of SKUs may vary by region and support offer. To determine the SKUs (including the SKU name, tier/edition, family, and capacity) that are available to your subscription in an Azure region, use the `Capabilities_ListByLocation` REST API or one of the following commands:
type ServiceObjectiveName pulumi.String

const (
	ServiceObjectiveNameSystem      = ServiceObjectiveName("System")
	ServiceObjectiveNameSystem0     = ServiceObjectiveName("System0")
	ServiceObjectiveNameSystem1     = ServiceObjectiveName("System1")
	ServiceObjectiveNameSystem2     = ServiceObjectiveName("System2")
	ServiceObjectiveNameSystem3     = ServiceObjectiveName("System3")
	ServiceObjectiveNameSystem4     = ServiceObjectiveName("System4")
	ServiceObjectiveNameSystem2L    = ServiceObjectiveName("System2L")
	ServiceObjectiveNameSystem3L    = ServiceObjectiveName("System3L")
	ServiceObjectiveNameSystem4L    = ServiceObjectiveName("System4L")
	ServiceObjectiveNameFree        = ServiceObjectiveName("Free")
	ServiceObjectiveNameBasic       = ServiceObjectiveName("Basic")
	ServiceObjectiveNameS0          = ServiceObjectiveName("S0")
	ServiceObjectiveNameS1          = ServiceObjectiveName("S1")
	ServiceObjectiveNameS2          = ServiceObjectiveName("S2")
	ServiceObjectiveNameS3          = ServiceObjectiveName("S3")
	ServiceObjectiveNameS4          = ServiceObjectiveName("S4")
	ServiceObjectiveNameS6          = ServiceObjectiveName("S6")
	ServiceObjectiveNameS7          = ServiceObjectiveName("S7")
	ServiceObjectiveNameS9          = ServiceObjectiveName("S9")
	ServiceObjectiveNameS12         = ServiceObjectiveName("S12")
	ServiceObjectiveNameP1          = ServiceObjectiveName("P1")
	ServiceObjectiveNameP2          = ServiceObjectiveName("P2")
	ServiceObjectiveNameP3          = ServiceObjectiveName("P3")
	ServiceObjectiveNameP4          = ServiceObjectiveName("P4")
	ServiceObjectiveNameP6          = ServiceObjectiveName("P6")
	ServiceObjectiveNameP11         = ServiceObjectiveName("P11")
	ServiceObjectiveNameP15         = ServiceObjectiveName("P15")
	ServiceObjectiveNamePRS1        = ServiceObjectiveName("PRS1")
	ServiceObjectiveNamePRS2        = ServiceObjectiveName("PRS2")
	ServiceObjectiveNamePRS4        = ServiceObjectiveName("PRS4")
	ServiceObjectiveNamePRS6        = ServiceObjectiveName("PRS6")
	ServiceObjectiveNameDW100       = ServiceObjectiveName("DW100")
	ServiceObjectiveNameDW200       = ServiceObjectiveName("DW200")
	ServiceObjectiveNameDW300       = ServiceObjectiveName("DW300")
	ServiceObjectiveNameDW400       = ServiceObjectiveName("DW400")
	ServiceObjectiveNameDW500       = ServiceObjectiveName("DW500")
	ServiceObjectiveNameDW600       = ServiceObjectiveName("DW600")
	ServiceObjectiveNameDW1000      = ServiceObjectiveName("DW1000")
	ServiceObjectiveNameDW1200      = ServiceObjectiveName("DW1200")
	ServiceObjectiveNameDW1000c     = ServiceObjectiveName("DW1000c")
	ServiceObjectiveNameDW1500      = ServiceObjectiveName("DW1500")
	ServiceObjectiveNameDW1500c     = ServiceObjectiveName("DW1500c")
	ServiceObjectiveNameDW2000      = ServiceObjectiveName("DW2000")
	ServiceObjectiveNameDW2000c     = ServiceObjectiveName("DW2000c")
	ServiceObjectiveNameDW3000      = ServiceObjectiveName("DW3000")
	ServiceObjectiveNameDW2500c     = ServiceObjectiveName("DW2500c")
	ServiceObjectiveNameDW3000c     = ServiceObjectiveName("DW3000c")
	ServiceObjectiveNameDW6000      = ServiceObjectiveName("DW6000")
	ServiceObjectiveNameDW5000c     = ServiceObjectiveName("DW5000c")
	ServiceObjectiveNameDW6000c     = ServiceObjectiveName("DW6000c")
	ServiceObjectiveNameDW7500c     = ServiceObjectiveName("DW7500c")
	ServiceObjectiveNameDW10000c    = ServiceObjectiveName("DW10000c")
	ServiceObjectiveNameDW15000c    = ServiceObjectiveName("DW15000c")
	ServiceObjectiveNameDW30000c    = ServiceObjectiveName("DW30000c")
	ServiceObjectiveNameDS100       = ServiceObjectiveName("DS100")
	ServiceObjectiveNameDS200       = ServiceObjectiveName("DS200")
	ServiceObjectiveNameDS300       = ServiceObjectiveName("DS300")
	ServiceObjectiveNameDS400       = ServiceObjectiveName("DS400")
	ServiceObjectiveNameDS500       = ServiceObjectiveName("DS500")
	ServiceObjectiveNameDS600       = ServiceObjectiveName("DS600")
	ServiceObjectiveNameDS1000      = ServiceObjectiveName("DS1000")
	ServiceObjectiveNameDS1200      = ServiceObjectiveName("DS1200")
	ServiceObjectiveNameDS1500      = ServiceObjectiveName("DS1500")
	ServiceObjectiveNameDS2000      = ServiceObjectiveName("DS2000")
	ServiceObjectiveNameElasticPool = ServiceObjectiveName("ElasticPool")
)

func (ServiceObjectiveName) ElementType() reflect.Type {
	return reflect.TypeOf((*pulumi.String)(nil)).Elem()
}

func (e ServiceObjectiveName) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e ServiceObjectiveName) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e ServiceObjectiveName) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e ServiceObjectiveName) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

// The status of the database transparent data encryption.
type TransparentDataEncryptionStatus pulumi.String

const (
	TransparentDataEncryptionStatusEnabled  = TransparentDataEncryptionStatus("Enabled")
	TransparentDataEncryptionStatusDisabled = TransparentDataEncryptionStatus("Disabled")
)

func (TransparentDataEncryptionStatus) ElementType() reflect.Type {
	return reflect.TypeOf((*pulumi.String)(nil)).Elem()
}

func (e TransparentDataEncryptionStatus) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e TransparentDataEncryptionStatus) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e TransparentDataEncryptionStatus) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e TransparentDataEncryptionStatus) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}
