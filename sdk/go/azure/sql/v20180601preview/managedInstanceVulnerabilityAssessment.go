// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v20180601preview

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// A managed instance vulnerability assessment.
type ManagedInstanceVulnerabilityAssessment struct {
	pulumi.CustomResourceState

	// Resource name.
	Name pulumi.StringOutput `pulumi:"name"`
	// The recurring scans settings
	RecurringScans VulnerabilityAssessmentRecurringScansPropertiesResponsePtrOutput `pulumi:"recurringScans"`
	// Resource type.
	Type pulumi.StringOutput `pulumi:"type"`
}

// NewManagedInstanceVulnerabilityAssessment registers a new resource with the given unique name, arguments, and options.
func NewManagedInstanceVulnerabilityAssessment(ctx *pulumi.Context,
	name string, args *ManagedInstanceVulnerabilityAssessmentArgs, opts ...pulumi.ResourceOption) (*ManagedInstanceVulnerabilityAssessment, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ManagedInstanceName == nil {
		return nil, errors.New("invalid value for required argument 'ManagedInstanceName'")
	}
	if args.ResourceGroupName == nil {
		return nil, errors.New("invalid value for required argument 'ResourceGroupName'")
	}
	if args.StorageContainerPath == nil {
		return nil, errors.New("invalid value for required argument 'StorageContainerPath'")
	}
	if args.RecurringScans != nil {
		args.RecurringScans = args.RecurringScans.ToVulnerabilityAssessmentRecurringScansPropertiesPtrOutput().ApplyT(func(v *VulnerabilityAssessmentRecurringScansProperties) *VulnerabilityAssessmentRecurringScansProperties {
			return v.Defaults()
		}).(VulnerabilityAssessmentRecurringScansPropertiesPtrOutput)
	}
	aliases := pulumi.Aliases([]pulumi.Alias{
		{
			Type: pulumi.String("azure-native:sql:ManagedInstanceVulnerabilityAssessment"),
		},
		{
			Type: pulumi.String("azure-native:sql/v20200202preview:ManagedInstanceVulnerabilityAssessment"),
		},
		{
			Type: pulumi.String("azure-native:sql/v20200801preview:ManagedInstanceVulnerabilityAssessment"),
		},
		{
			Type: pulumi.String("azure-native:sql/v20201101preview:ManagedInstanceVulnerabilityAssessment"),
		},
		{
			Type: pulumi.String("azure-native:sql/v20210201preview:ManagedInstanceVulnerabilityAssessment"),
		},
		{
			Type: pulumi.String("azure-native:sql/v20210501preview:ManagedInstanceVulnerabilityAssessment"),
		},
		{
			Type: pulumi.String("azure-native:sql/v20210801preview:ManagedInstanceVulnerabilityAssessment"),
		},
		{
			Type: pulumi.String("azure-native:sql/v20211101:ManagedInstanceVulnerabilityAssessment"),
		},
		{
			Type: pulumi.String("azure-native:sql/v20211101preview:ManagedInstanceVulnerabilityAssessment"),
		},
		{
			Type: pulumi.String("azure-native:sql/v20220201preview:ManagedInstanceVulnerabilityAssessment"),
		},
	})
	opts = append(opts, aliases)
	var resource ManagedInstanceVulnerabilityAssessment
	err := ctx.RegisterResource("azure-native:sql/v20180601preview:ManagedInstanceVulnerabilityAssessment", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetManagedInstanceVulnerabilityAssessment gets an existing ManagedInstanceVulnerabilityAssessment resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetManagedInstanceVulnerabilityAssessment(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ManagedInstanceVulnerabilityAssessmentState, opts ...pulumi.ResourceOption) (*ManagedInstanceVulnerabilityAssessment, error) {
	var resource ManagedInstanceVulnerabilityAssessment
	err := ctx.ReadResource("azure-native:sql/v20180601preview:ManagedInstanceVulnerabilityAssessment", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ManagedInstanceVulnerabilityAssessment resources.
type managedInstanceVulnerabilityAssessmentState struct {
}

type ManagedInstanceVulnerabilityAssessmentState struct {
}

func (ManagedInstanceVulnerabilityAssessmentState) ElementType() reflect.Type {
	return reflect.TypeOf((*managedInstanceVulnerabilityAssessmentState)(nil)).Elem()
}

type managedInstanceVulnerabilityAssessmentArgs struct {
	// The name of the managed instance for which the vulnerability assessment is defined.
	ManagedInstanceName string `pulumi:"managedInstanceName"`
	// The recurring scans settings
	RecurringScans *VulnerabilityAssessmentRecurringScansProperties `pulumi:"recurringScans"`
	// The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
	ResourceGroupName string `pulumi:"resourceGroupName"`
	// Specifies the identifier key of the storage account for vulnerability assessment scan results. If 'StorageContainerSasKey' isn't specified, storageAccountAccessKey is required.
	StorageAccountAccessKey *string `pulumi:"storageAccountAccessKey"`
	// A blob storage container path to hold the scan results (e.g. https://myStorage.blob.core.windows.net/VaScans/).
	StorageContainerPath string `pulumi:"storageContainerPath"`
	// A shared access signature (SAS Key) that has read and write access to the blob container specified in 'storageContainerPath' parameter. If 'storageAccountAccessKey' isn't specified, StorageContainerSasKey is required.
	StorageContainerSasKey *string `pulumi:"storageContainerSasKey"`
	// The name of the vulnerability assessment.
	VulnerabilityAssessmentName *string `pulumi:"vulnerabilityAssessmentName"`
}

// The set of arguments for constructing a ManagedInstanceVulnerabilityAssessment resource.
type ManagedInstanceVulnerabilityAssessmentArgs struct {
	// The name of the managed instance for which the vulnerability assessment is defined.
	ManagedInstanceName pulumi.StringInput
	// The recurring scans settings
	RecurringScans VulnerabilityAssessmentRecurringScansPropertiesPtrInput
	// The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
	ResourceGroupName pulumi.StringInput
	// Specifies the identifier key of the storage account for vulnerability assessment scan results. If 'StorageContainerSasKey' isn't specified, storageAccountAccessKey is required.
	StorageAccountAccessKey pulumi.StringPtrInput
	// A blob storage container path to hold the scan results (e.g. https://myStorage.blob.core.windows.net/VaScans/).
	StorageContainerPath pulumi.StringInput
	// A shared access signature (SAS Key) that has read and write access to the blob container specified in 'storageContainerPath' parameter. If 'storageAccountAccessKey' isn't specified, StorageContainerSasKey is required.
	StorageContainerSasKey pulumi.StringPtrInput
	// The name of the vulnerability assessment.
	VulnerabilityAssessmentName pulumi.StringPtrInput
}

func (ManagedInstanceVulnerabilityAssessmentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*managedInstanceVulnerabilityAssessmentArgs)(nil)).Elem()
}

type ManagedInstanceVulnerabilityAssessmentInput interface {
	pulumi.Input

	ToManagedInstanceVulnerabilityAssessmentOutput() ManagedInstanceVulnerabilityAssessmentOutput
	ToManagedInstanceVulnerabilityAssessmentOutputWithContext(ctx context.Context) ManagedInstanceVulnerabilityAssessmentOutput
}

func (*ManagedInstanceVulnerabilityAssessment) ElementType() reflect.Type {
	return reflect.TypeOf((**ManagedInstanceVulnerabilityAssessment)(nil)).Elem()
}

func (i *ManagedInstanceVulnerabilityAssessment) ToManagedInstanceVulnerabilityAssessmentOutput() ManagedInstanceVulnerabilityAssessmentOutput {
	return i.ToManagedInstanceVulnerabilityAssessmentOutputWithContext(context.Background())
}

func (i *ManagedInstanceVulnerabilityAssessment) ToManagedInstanceVulnerabilityAssessmentOutputWithContext(ctx context.Context) ManagedInstanceVulnerabilityAssessmentOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedInstanceVulnerabilityAssessmentOutput)
}

type ManagedInstanceVulnerabilityAssessmentOutput struct{ *pulumi.OutputState }

func (ManagedInstanceVulnerabilityAssessmentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ManagedInstanceVulnerabilityAssessment)(nil)).Elem()
}

func (o ManagedInstanceVulnerabilityAssessmentOutput) ToManagedInstanceVulnerabilityAssessmentOutput() ManagedInstanceVulnerabilityAssessmentOutput {
	return o
}

func (o ManagedInstanceVulnerabilityAssessmentOutput) ToManagedInstanceVulnerabilityAssessmentOutputWithContext(ctx context.Context) ManagedInstanceVulnerabilityAssessmentOutput {
	return o
}

// Resource name.
func (o ManagedInstanceVulnerabilityAssessmentOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *ManagedInstanceVulnerabilityAssessment) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The recurring scans settings
func (o ManagedInstanceVulnerabilityAssessmentOutput) RecurringScans() VulnerabilityAssessmentRecurringScansPropertiesResponsePtrOutput {
	return o.ApplyT(func(v *ManagedInstanceVulnerabilityAssessment) VulnerabilityAssessmentRecurringScansPropertiesResponsePtrOutput {
		return v.RecurringScans
	}).(VulnerabilityAssessmentRecurringScansPropertiesResponsePtrOutput)
}

// Resource type.
func (o ManagedInstanceVulnerabilityAssessmentOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *ManagedInstanceVulnerabilityAssessment) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(ManagedInstanceVulnerabilityAssessmentOutput{})
}
