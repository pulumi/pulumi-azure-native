


package v20211101

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type ManagedDatabaseVulnerabilityAssessment struct {
	pulumi.CustomResourceState

	Name           pulumi.StringOutput                                              `pulumi:"name"`
	RecurringScans VulnerabilityAssessmentRecurringScansPropertiesResponsePtrOutput `pulumi:"recurringScans"`
	Type           pulumi.StringOutput                                              `pulumi:"type"`
}


func NewManagedDatabaseVulnerabilityAssessment(ctx *pulumi.Context,
	name string, args *ManagedDatabaseVulnerabilityAssessmentArgs, opts ...pulumi.ResourceOption) (*ManagedDatabaseVulnerabilityAssessment, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DatabaseName == nil {
		return nil, errors.New("invalid value for required argument 'DatabaseName'")
	}
	if args.ManagedInstanceName == nil {
		return nil, errors.New("invalid value for required argument 'ManagedInstanceName'")
	}
	if args.ResourceGroupName == nil {
		return nil, errors.New("invalid value for required argument 'ResourceGroupName'")
	}
	if args.RecurringScans != nil {
		args.RecurringScans = args.RecurringScans.ToVulnerabilityAssessmentRecurringScansPropertiesPtrOutput().ApplyT(func(v *VulnerabilityAssessmentRecurringScansProperties) *VulnerabilityAssessmentRecurringScansProperties {
			return v.Defaults()
		}).(VulnerabilityAssessmentRecurringScansPropertiesPtrOutput)
	}
	aliases := pulumi.Aliases([]pulumi.Alias{
		{
			Type: pulumi.String("azure-native:sql:ManagedDatabaseVulnerabilityAssessment"),
		},
		{
			Type: pulumi.String("azure-native:sql/v20171001preview:ManagedDatabaseVulnerabilityAssessment"),
		},
		{
			Type: pulumi.String("azure-native:sql/v20200202preview:ManagedDatabaseVulnerabilityAssessment"),
		},
		{
			Type: pulumi.String("azure-native:sql/v20200801preview:ManagedDatabaseVulnerabilityAssessment"),
		},
		{
			Type: pulumi.String("azure-native:sql/v20201101preview:ManagedDatabaseVulnerabilityAssessment"),
		},
		{
			Type: pulumi.String("azure-native:sql/v20210201preview:ManagedDatabaseVulnerabilityAssessment"),
		},
		{
			Type: pulumi.String("azure-native:sql/v20210501preview:ManagedDatabaseVulnerabilityAssessment"),
		},
		{
			Type: pulumi.String("azure-native:sql/v20210801preview:ManagedDatabaseVulnerabilityAssessment"),
		},
		{
			Type: pulumi.String("azure-native:sql/v20211101preview:ManagedDatabaseVulnerabilityAssessment"),
		},
		{
			Type: pulumi.String("azure-native:sql/v20220201preview:ManagedDatabaseVulnerabilityAssessment"),
		},
	})
	opts = append(opts, aliases)
	var resource ManagedDatabaseVulnerabilityAssessment
	err := ctx.RegisterResource("azure-native:sql/v20211101:ManagedDatabaseVulnerabilityAssessment", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}



func GetManagedDatabaseVulnerabilityAssessment(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ManagedDatabaseVulnerabilityAssessmentState, opts ...pulumi.ResourceOption) (*ManagedDatabaseVulnerabilityAssessment, error) {
	var resource ManagedDatabaseVulnerabilityAssessment
	err := ctx.ReadResource("azure-native:sql/v20211101:ManagedDatabaseVulnerabilityAssessment", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}


type managedDatabaseVulnerabilityAssessmentState struct {
}

type ManagedDatabaseVulnerabilityAssessmentState struct {
}

func (ManagedDatabaseVulnerabilityAssessmentState) ElementType() reflect.Type {
	return reflect.TypeOf((*managedDatabaseVulnerabilityAssessmentState)(nil)).Elem()
}

type managedDatabaseVulnerabilityAssessmentArgs struct {
	DatabaseName                string                                           `pulumi:"databaseName"`
	ManagedInstanceName         string                                           `pulumi:"managedInstanceName"`
	RecurringScans              *VulnerabilityAssessmentRecurringScansProperties `pulumi:"recurringScans"`
	ResourceGroupName           string                                           `pulumi:"resourceGroupName"`
	StorageAccountAccessKey     *string                                          `pulumi:"storageAccountAccessKey"`
	StorageContainerPath        *string                                          `pulumi:"storageContainerPath"`
	StorageContainerSasKey      *string                                          `pulumi:"storageContainerSasKey"`
	VulnerabilityAssessmentName *string                                          `pulumi:"vulnerabilityAssessmentName"`
}


type ManagedDatabaseVulnerabilityAssessmentArgs struct {
	DatabaseName                pulumi.StringInput
	ManagedInstanceName         pulumi.StringInput
	RecurringScans              VulnerabilityAssessmentRecurringScansPropertiesPtrInput
	ResourceGroupName           pulumi.StringInput
	StorageAccountAccessKey     pulumi.StringPtrInput
	StorageContainerPath        pulumi.StringPtrInput
	StorageContainerSasKey      pulumi.StringPtrInput
	VulnerabilityAssessmentName pulumi.StringPtrInput
}

func (ManagedDatabaseVulnerabilityAssessmentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*managedDatabaseVulnerabilityAssessmentArgs)(nil)).Elem()
}

type ManagedDatabaseVulnerabilityAssessmentInput interface {
	pulumi.Input

	ToManagedDatabaseVulnerabilityAssessmentOutput() ManagedDatabaseVulnerabilityAssessmentOutput
	ToManagedDatabaseVulnerabilityAssessmentOutputWithContext(ctx context.Context) ManagedDatabaseVulnerabilityAssessmentOutput
}

func (*ManagedDatabaseVulnerabilityAssessment) ElementType() reflect.Type {
	return reflect.TypeOf((**ManagedDatabaseVulnerabilityAssessment)(nil)).Elem()
}

func (i *ManagedDatabaseVulnerabilityAssessment) ToManagedDatabaseVulnerabilityAssessmentOutput() ManagedDatabaseVulnerabilityAssessmentOutput {
	return i.ToManagedDatabaseVulnerabilityAssessmentOutputWithContext(context.Background())
}

func (i *ManagedDatabaseVulnerabilityAssessment) ToManagedDatabaseVulnerabilityAssessmentOutputWithContext(ctx context.Context) ManagedDatabaseVulnerabilityAssessmentOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedDatabaseVulnerabilityAssessmentOutput)
}

type ManagedDatabaseVulnerabilityAssessmentOutput struct{ *pulumi.OutputState }

func (ManagedDatabaseVulnerabilityAssessmentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ManagedDatabaseVulnerabilityAssessment)(nil)).Elem()
}

func (o ManagedDatabaseVulnerabilityAssessmentOutput) ToManagedDatabaseVulnerabilityAssessmentOutput() ManagedDatabaseVulnerabilityAssessmentOutput {
	return o
}

func (o ManagedDatabaseVulnerabilityAssessmentOutput) ToManagedDatabaseVulnerabilityAssessmentOutputWithContext(ctx context.Context) ManagedDatabaseVulnerabilityAssessmentOutput {
	return o
}

func (o ManagedDatabaseVulnerabilityAssessmentOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *ManagedDatabaseVulnerabilityAssessment) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o ManagedDatabaseVulnerabilityAssessmentOutput) RecurringScans() VulnerabilityAssessmentRecurringScansPropertiesResponsePtrOutput {
	return o.ApplyT(func(v *ManagedDatabaseVulnerabilityAssessment) VulnerabilityAssessmentRecurringScansPropertiesResponsePtrOutput {
		return v.RecurringScans
	}).(VulnerabilityAssessmentRecurringScansPropertiesResponsePtrOutput)
}

func (o ManagedDatabaseVulnerabilityAssessmentOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *ManagedDatabaseVulnerabilityAssessment) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(ManagedDatabaseVulnerabilityAssessmentOutput{})
}
