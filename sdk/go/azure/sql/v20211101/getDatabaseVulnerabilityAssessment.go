


package v20211101

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func LookupDatabaseVulnerabilityAssessment(ctx *pulumi.Context, args *LookupDatabaseVulnerabilityAssessmentArgs, opts ...pulumi.InvokeOption) (*LookupDatabaseVulnerabilityAssessmentResult, error) {
	var rv LookupDatabaseVulnerabilityAssessmentResult
	err := ctx.Invoke("azure-native:sql/v20211101:getDatabaseVulnerabilityAssessment", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return rv.Defaults(), nil
}

type LookupDatabaseVulnerabilityAssessmentArgs struct {
	DatabaseName                string `pulumi:"databaseName"`
	ResourceGroupName           string `pulumi:"resourceGroupName"`
	ServerName                  string `pulumi:"serverName"`
	VulnerabilityAssessmentName string `pulumi:"vulnerabilityAssessmentName"`
}


type LookupDatabaseVulnerabilityAssessmentResult struct {
	Id             string                                                   `pulumi:"id"`
	Name           string                                                   `pulumi:"name"`
	RecurringScans *VulnerabilityAssessmentRecurringScansPropertiesResponse `pulumi:"recurringScans"`
	Type           string                                                   `pulumi:"type"`
}


func (val *LookupDatabaseVulnerabilityAssessmentResult) Defaults() *LookupDatabaseVulnerabilityAssessmentResult {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.RecurringScans = tmp.RecurringScans.Defaults()

	return &tmp
}

func LookupDatabaseVulnerabilityAssessmentOutput(ctx *pulumi.Context, args LookupDatabaseVulnerabilityAssessmentOutputArgs, opts ...pulumi.InvokeOption) LookupDatabaseVulnerabilityAssessmentResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupDatabaseVulnerabilityAssessmentResult, error) {
			args := v.(LookupDatabaseVulnerabilityAssessmentArgs)
			r, err := LookupDatabaseVulnerabilityAssessment(ctx, &args, opts...)
			var s LookupDatabaseVulnerabilityAssessmentResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupDatabaseVulnerabilityAssessmentResultOutput)
}

type LookupDatabaseVulnerabilityAssessmentOutputArgs struct {
	DatabaseName                pulumi.StringInput `pulumi:"databaseName"`
	ResourceGroupName           pulumi.StringInput `pulumi:"resourceGroupName"`
	ServerName                  pulumi.StringInput `pulumi:"serverName"`
	VulnerabilityAssessmentName pulumi.StringInput `pulumi:"vulnerabilityAssessmentName"`
}

func (LookupDatabaseVulnerabilityAssessmentOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupDatabaseVulnerabilityAssessmentArgs)(nil)).Elem()
}


type LookupDatabaseVulnerabilityAssessmentResultOutput struct{ *pulumi.OutputState }

func (LookupDatabaseVulnerabilityAssessmentResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupDatabaseVulnerabilityAssessmentResult)(nil)).Elem()
}

func (o LookupDatabaseVulnerabilityAssessmentResultOutput) ToLookupDatabaseVulnerabilityAssessmentResultOutput() LookupDatabaseVulnerabilityAssessmentResultOutput {
	return o
}

func (o LookupDatabaseVulnerabilityAssessmentResultOutput) ToLookupDatabaseVulnerabilityAssessmentResultOutputWithContext(ctx context.Context) LookupDatabaseVulnerabilityAssessmentResultOutput {
	return o
}

func (o LookupDatabaseVulnerabilityAssessmentResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDatabaseVulnerabilityAssessmentResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o LookupDatabaseVulnerabilityAssessmentResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDatabaseVulnerabilityAssessmentResult) string { return v.Name }).(pulumi.StringOutput)
}

func (o LookupDatabaseVulnerabilityAssessmentResultOutput) RecurringScans() VulnerabilityAssessmentRecurringScansPropertiesResponsePtrOutput {
	return o.ApplyT(func(v LookupDatabaseVulnerabilityAssessmentResult) *VulnerabilityAssessmentRecurringScansPropertiesResponse {
		return v.RecurringScans
	}).(VulnerabilityAssessmentRecurringScansPropertiesResponsePtrOutput)
}

func (o LookupDatabaseVulnerabilityAssessmentResultOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDatabaseVulnerabilityAssessmentResult) string { return v.Type }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupDatabaseVulnerabilityAssessmentResultOutput{})
}
