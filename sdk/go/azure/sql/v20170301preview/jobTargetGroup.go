// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v20170301preview

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// A group of job targets.
type JobTargetGroup struct {
	pulumi.CustomResourceState

	// Members of the target group.
	Members JobTargetResponseArrayOutput `pulumi:"members"`
	// Resource name.
	Name pulumi.StringOutput `pulumi:"name"`
	// Resource type.
	Type pulumi.StringOutput `pulumi:"type"`
}

// NewJobTargetGroup registers a new resource with the given unique name, arguments, and options.
func NewJobTargetGroup(ctx *pulumi.Context,
	name string, args *JobTargetGroupArgs, opts ...pulumi.ResourceOption) (*JobTargetGroup, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.JobAgentName == nil {
		return nil, errors.New("invalid value for required argument 'JobAgentName'")
	}
	if args.Members == nil {
		return nil, errors.New("invalid value for required argument 'Members'")
	}
	if args.ResourceGroupName == nil {
		return nil, errors.New("invalid value for required argument 'ResourceGroupName'")
	}
	if args.ServerName == nil {
		return nil, errors.New("invalid value for required argument 'ServerName'")
	}
	if args.TargetGroupName == nil {
		return nil, errors.New("invalid value for required argument 'TargetGroupName'")
	}
	aliases := pulumi.Aliases([]pulumi.Alias{
		{
			Type: pulumi.String("azure-nextgen:sql/v20200801preview:JobTargetGroup"),
		},
	})
	opts = append(opts, aliases)
	var resource JobTargetGroup
	err := ctx.RegisterResource("azure-nextgen:sql/v20170301preview:JobTargetGroup", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetJobTargetGroup gets an existing JobTargetGroup resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetJobTargetGroup(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *JobTargetGroupState, opts ...pulumi.ResourceOption) (*JobTargetGroup, error) {
	var resource JobTargetGroup
	err := ctx.ReadResource("azure-nextgen:sql/v20170301preview:JobTargetGroup", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering JobTargetGroup resources.
type jobTargetGroupState struct {
	// Members of the target group.
	Members []JobTargetResponse `pulumi:"members"`
	// Resource name.
	Name *string `pulumi:"name"`
	// Resource type.
	Type *string `pulumi:"type"`
}

type JobTargetGroupState struct {
	// Members of the target group.
	Members JobTargetResponseArrayInput
	// Resource name.
	Name pulumi.StringPtrInput
	// Resource type.
	Type pulumi.StringPtrInput
}

func (JobTargetGroupState) ElementType() reflect.Type {
	return reflect.TypeOf((*jobTargetGroupState)(nil)).Elem()
}

type jobTargetGroupArgs struct {
	// The name of the job agent.
	JobAgentName string `pulumi:"jobAgentName"`
	// Members of the target group.
	Members []JobTarget `pulumi:"members"`
	// The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
	ResourceGroupName string `pulumi:"resourceGroupName"`
	// The name of the server.
	ServerName string `pulumi:"serverName"`
	// The name of the target group.
	TargetGroupName string `pulumi:"targetGroupName"`
}

// The set of arguments for constructing a JobTargetGroup resource.
type JobTargetGroupArgs struct {
	// The name of the job agent.
	JobAgentName pulumi.StringInput
	// Members of the target group.
	Members JobTargetArrayInput
	// The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
	ResourceGroupName pulumi.StringInput
	// The name of the server.
	ServerName pulumi.StringInput
	// The name of the target group.
	TargetGroupName pulumi.StringInput
}

func (JobTargetGroupArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*jobTargetGroupArgs)(nil)).Elem()
}

type JobTargetGroupInput interface {
	pulumi.Input

	ToJobTargetGroupOutput() JobTargetGroupOutput
	ToJobTargetGroupOutputWithContext(ctx context.Context) JobTargetGroupOutput
}

func (JobTargetGroup) ElementType() reflect.Type {
	return reflect.TypeOf((*JobTargetGroup)(nil)).Elem()
}

func (i JobTargetGroup) ToJobTargetGroupOutput() JobTargetGroupOutput {
	return i.ToJobTargetGroupOutputWithContext(context.Background())
}

func (i JobTargetGroup) ToJobTargetGroupOutputWithContext(ctx context.Context) JobTargetGroupOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobTargetGroupOutput)
}

type JobTargetGroupOutput struct {
	*pulumi.OutputState
}

func (JobTargetGroupOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*JobTargetGroupOutput)(nil)).Elem()
}

func (o JobTargetGroupOutput) ToJobTargetGroupOutput() JobTargetGroupOutput {
	return o
}

func (o JobTargetGroupOutput) ToJobTargetGroupOutputWithContext(ctx context.Context) JobTargetGroupOutput {
	return o
}

func init() {
	pulumi.RegisterOutputType(JobTargetGroupOutput{})
}
