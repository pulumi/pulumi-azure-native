// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v20150501preview

import (
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// An Azure SQL Database sync group.
type SyncGroup struct {
	pulumi.CustomResourceState

	// Conflict resolution policy of the sync group.
	ConflictResolutionPolicy pulumi.StringPtrOutput `pulumi:"conflictResolutionPolicy"`
	// Password for the sync group hub database credential.
	HubDatabasePassword pulumi.StringPtrOutput `pulumi:"hubDatabasePassword"`
	// User name for the sync group hub database credential.
	HubDatabaseUserName pulumi.StringPtrOutput `pulumi:"hubDatabaseUserName"`
	// Sync interval of the sync group.
	Interval pulumi.IntPtrOutput `pulumi:"interval"`
	// Last sync time of the sync group.
	LastSyncTime pulumi.StringOutput `pulumi:"lastSyncTime"`
	// Resource name.
	Name pulumi.StringOutput `pulumi:"name"`
	// Sync schema of the sync group.
	Schema SyncGroupSchemaResponsePtrOutput `pulumi:"schema"`
	// ARM resource id of the sync database in the sync group.
	SyncDatabaseId pulumi.StringPtrOutput `pulumi:"syncDatabaseId"`
	// Sync state of the sync group.
	SyncState pulumi.StringOutput `pulumi:"syncState"`
	// Resource type.
	Type pulumi.StringOutput `pulumi:"type"`
}

// NewSyncGroup registers a new resource with the given unique name, arguments, and options.
func NewSyncGroup(ctx *pulumi.Context,
	name string, args *SyncGroupArgs, opts ...pulumi.ResourceOption) (*SyncGroup, error) {
	if args == nil || args.DatabaseName == nil {
		return nil, errors.New("missing required argument 'DatabaseName'")
	}
	if args == nil || args.ResourceGroupName == nil {
		return nil, errors.New("missing required argument 'ResourceGroupName'")
	}
	if args == nil || args.ServerName == nil {
		return nil, errors.New("missing required argument 'ServerName'")
	}
	if args == nil || args.SyncGroupName == nil {
		return nil, errors.New("missing required argument 'SyncGroupName'")
	}
	if args == nil {
		args = &SyncGroupArgs{}
	}
	aliases := pulumi.Aliases([]pulumi.Alias{
		{
			Type: pulumi.String("azure-nextgen:sql/v20190601preview:SyncGroup"),
		},
	})
	opts = append(opts, aliases)
	var resource SyncGroup
	err := ctx.RegisterResource("azure-nextgen:sql/v20150501preview:SyncGroup", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSyncGroup gets an existing SyncGroup resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSyncGroup(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SyncGroupState, opts ...pulumi.ResourceOption) (*SyncGroup, error) {
	var resource SyncGroup
	err := ctx.ReadResource("azure-nextgen:sql/v20150501preview:SyncGroup", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SyncGroup resources.
type syncGroupState struct {
	// Conflict resolution policy of the sync group.
	ConflictResolutionPolicy *string `pulumi:"conflictResolutionPolicy"`
	// Password for the sync group hub database credential.
	HubDatabasePassword *string `pulumi:"hubDatabasePassword"`
	// User name for the sync group hub database credential.
	HubDatabaseUserName *string `pulumi:"hubDatabaseUserName"`
	// Sync interval of the sync group.
	Interval *int `pulumi:"interval"`
	// Last sync time of the sync group.
	LastSyncTime *string `pulumi:"lastSyncTime"`
	// Resource name.
	Name *string `pulumi:"name"`
	// Sync schema of the sync group.
	Schema *SyncGroupSchemaResponse `pulumi:"schema"`
	// ARM resource id of the sync database in the sync group.
	SyncDatabaseId *string `pulumi:"syncDatabaseId"`
	// Sync state of the sync group.
	SyncState *string `pulumi:"syncState"`
	// Resource type.
	Type *string `pulumi:"type"`
}

type SyncGroupState struct {
	// Conflict resolution policy of the sync group.
	ConflictResolutionPolicy pulumi.StringPtrInput
	// Password for the sync group hub database credential.
	HubDatabasePassword pulumi.StringPtrInput
	// User name for the sync group hub database credential.
	HubDatabaseUserName pulumi.StringPtrInput
	// Sync interval of the sync group.
	Interval pulumi.IntPtrInput
	// Last sync time of the sync group.
	LastSyncTime pulumi.StringPtrInput
	// Resource name.
	Name pulumi.StringPtrInput
	// Sync schema of the sync group.
	Schema SyncGroupSchemaResponsePtrInput
	// ARM resource id of the sync database in the sync group.
	SyncDatabaseId pulumi.StringPtrInput
	// Sync state of the sync group.
	SyncState pulumi.StringPtrInput
	// Resource type.
	Type pulumi.StringPtrInput
}

func (SyncGroupState) ElementType() reflect.Type {
	return reflect.TypeOf((*syncGroupState)(nil)).Elem()
}

type syncGroupArgs struct {
	// Conflict resolution policy of the sync group.
	ConflictResolutionPolicy *string `pulumi:"conflictResolutionPolicy"`
	// The name of the database on which the sync group is hosted.
	DatabaseName string `pulumi:"databaseName"`
	// Password for the sync group hub database credential.
	HubDatabasePassword *string `pulumi:"hubDatabasePassword"`
	// User name for the sync group hub database credential.
	HubDatabaseUserName *string `pulumi:"hubDatabaseUserName"`
	// Sync interval of the sync group.
	Interval *int `pulumi:"interval"`
	// The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
	ResourceGroupName string `pulumi:"resourceGroupName"`
	// Sync schema of the sync group.
	Schema *SyncGroupSchema `pulumi:"schema"`
	// The name of the server.
	ServerName string `pulumi:"serverName"`
	// ARM resource id of the sync database in the sync group.
	SyncDatabaseId *string `pulumi:"syncDatabaseId"`
	// The name of the sync group.
	SyncGroupName string `pulumi:"syncGroupName"`
}

// The set of arguments for constructing a SyncGroup resource.
type SyncGroupArgs struct {
	// Conflict resolution policy of the sync group.
	ConflictResolutionPolicy pulumi.StringPtrInput
	// The name of the database on which the sync group is hosted.
	DatabaseName pulumi.StringInput
	// Password for the sync group hub database credential.
	HubDatabasePassword pulumi.StringPtrInput
	// User name for the sync group hub database credential.
	HubDatabaseUserName pulumi.StringPtrInput
	// Sync interval of the sync group.
	Interval pulumi.IntPtrInput
	// The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
	ResourceGroupName pulumi.StringInput
	// Sync schema of the sync group.
	Schema SyncGroupSchemaPtrInput
	// The name of the server.
	ServerName pulumi.StringInput
	// ARM resource id of the sync database in the sync group.
	SyncDatabaseId pulumi.StringPtrInput
	// The name of the sync group.
	SyncGroupName pulumi.StringInput
}

func (SyncGroupArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*syncGroupArgs)(nil)).Elem()
}
