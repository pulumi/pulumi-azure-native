// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v20150501preview

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// Read-only endpoint of the failover group instance.
type FailoverGroupReadOnlyEndpoint struct {
	// Failover policy of the read-only endpoint for the failover group.
	FailoverPolicy *string `pulumi:"failoverPolicy"`
}

// FailoverGroupReadOnlyEndpointInput is an input type that accepts FailoverGroupReadOnlyEndpointArgs and FailoverGroupReadOnlyEndpointOutput values.
// You can construct a concrete instance of `FailoverGroupReadOnlyEndpointInput` via:
//
//          FailoverGroupReadOnlyEndpointArgs{...}
type FailoverGroupReadOnlyEndpointInput interface {
	pulumi.Input

	ToFailoverGroupReadOnlyEndpointOutput() FailoverGroupReadOnlyEndpointOutput
	ToFailoverGroupReadOnlyEndpointOutputWithContext(context.Context) FailoverGroupReadOnlyEndpointOutput
}

// Read-only endpoint of the failover group instance.
type FailoverGroupReadOnlyEndpointArgs struct {
	// Failover policy of the read-only endpoint for the failover group.
	FailoverPolicy pulumi.StringPtrInput `pulumi:"failoverPolicy"`
}

func (FailoverGroupReadOnlyEndpointArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FailoverGroupReadOnlyEndpoint)(nil)).Elem()
}

func (i FailoverGroupReadOnlyEndpointArgs) ToFailoverGroupReadOnlyEndpointOutput() FailoverGroupReadOnlyEndpointOutput {
	return i.ToFailoverGroupReadOnlyEndpointOutputWithContext(context.Background())
}

func (i FailoverGroupReadOnlyEndpointArgs) ToFailoverGroupReadOnlyEndpointOutputWithContext(ctx context.Context) FailoverGroupReadOnlyEndpointOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FailoverGroupReadOnlyEndpointOutput)
}

func (i FailoverGroupReadOnlyEndpointArgs) ToFailoverGroupReadOnlyEndpointPtrOutput() FailoverGroupReadOnlyEndpointPtrOutput {
	return i.ToFailoverGroupReadOnlyEndpointPtrOutputWithContext(context.Background())
}

func (i FailoverGroupReadOnlyEndpointArgs) ToFailoverGroupReadOnlyEndpointPtrOutputWithContext(ctx context.Context) FailoverGroupReadOnlyEndpointPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FailoverGroupReadOnlyEndpointOutput).ToFailoverGroupReadOnlyEndpointPtrOutputWithContext(ctx)
}

// FailoverGroupReadOnlyEndpointPtrInput is an input type that accepts FailoverGroupReadOnlyEndpointArgs, FailoverGroupReadOnlyEndpointPtr and FailoverGroupReadOnlyEndpointPtrOutput values.
// You can construct a concrete instance of `FailoverGroupReadOnlyEndpointPtrInput` via:
//
//          FailoverGroupReadOnlyEndpointArgs{...}
//
//  or:
//
//          nil
type FailoverGroupReadOnlyEndpointPtrInput interface {
	pulumi.Input

	ToFailoverGroupReadOnlyEndpointPtrOutput() FailoverGroupReadOnlyEndpointPtrOutput
	ToFailoverGroupReadOnlyEndpointPtrOutputWithContext(context.Context) FailoverGroupReadOnlyEndpointPtrOutput
}

type failoverGroupReadOnlyEndpointPtrType FailoverGroupReadOnlyEndpointArgs

func FailoverGroupReadOnlyEndpointPtr(v *FailoverGroupReadOnlyEndpointArgs) FailoverGroupReadOnlyEndpointPtrInput {
	return (*failoverGroupReadOnlyEndpointPtrType)(v)
}

func (*failoverGroupReadOnlyEndpointPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**FailoverGroupReadOnlyEndpoint)(nil)).Elem()
}

func (i *failoverGroupReadOnlyEndpointPtrType) ToFailoverGroupReadOnlyEndpointPtrOutput() FailoverGroupReadOnlyEndpointPtrOutput {
	return i.ToFailoverGroupReadOnlyEndpointPtrOutputWithContext(context.Background())
}

func (i *failoverGroupReadOnlyEndpointPtrType) ToFailoverGroupReadOnlyEndpointPtrOutputWithContext(ctx context.Context) FailoverGroupReadOnlyEndpointPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FailoverGroupReadOnlyEndpointPtrOutput)
}

// Read-only endpoint of the failover group instance.
type FailoverGroupReadOnlyEndpointOutput struct{ *pulumi.OutputState }

func (FailoverGroupReadOnlyEndpointOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FailoverGroupReadOnlyEndpoint)(nil)).Elem()
}

func (o FailoverGroupReadOnlyEndpointOutput) ToFailoverGroupReadOnlyEndpointOutput() FailoverGroupReadOnlyEndpointOutput {
	return o
}

func (o FailoverGroupReadOnlyEndpointOutput) ToFailoverGroupReadOnlyEndpointOutputWithContext(ctx context.Context) FailoverGroupReadOnlyEndpointOutput {
	return o
}

func (o FailoverGroupReadOnlyEndpointOutput) ToFailoverGroupReadOnlyEndpointPtrOutput() FailoverGroupReadOnlyEndpointPtrOutput {
	return o.ToFailoverGroupReadOnlyEndpointPtrOutputWithContext(context.Background())
}

func (o FailoverGroupReadOnlyEndpointOutput) ToFailoverGroupReadOnlyEndpointPtrOutputWithContext(ctx context.Context) FailoverGroupReadOnlyEndpointPtrOutput {
	return o.ApplyT(func(v FailoverGroupReadOnlyEndpoint) *FailoverGroupReadOnlyEndpoint {
		return &v
	}).(FailoverGroupReadOnlyEndpointPtrOutput)
}

// Failover policy of the read-only endpoint for the failover group.
func (o FailoverGroupReadOnlyEndpointOutput) FailoverPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FailoverGroupReadOnlyEndpoint) *string { return v.FailoverPolicy }).(pulumi.StringPtrOutput)
}

type FailoverGroupReadOnlyEndpointPtrOutput struct{ *pulumi.OutputState }

func (FailoverGroupReadOnlyEndpointPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FailoverGroupReadOnlyEndpoint)(nil)).Elem()
}

func (o FailoverGroupReadOnlyEndpointPtrOutput) ToFailoverGroupReadOnlyEndpointPtrOutput() FailoverGroupReadOnlyEndpointPtrOutput {
	return o
}

func (o FailoverGroupReadOnlyEndpointPtrOutput) ToFailoverGroupReadOnlyEndpointPtrOutputWithContext(ctx context.Context) FailoverGroupReadOnlyEndpointPtrOutput {
	return o
}

func (o FailoverGroupReadOnlyEndpointPtrOutput) Elem() FailoverGroupReadOnlyEndpointOutput {
	return o.ApplyT(func(v *FailoverGroupReadOnlyEndpoint) FailoverGroupReadOnlyEndpoint { return *v }).(FailoverGroupReadOnlyEndpointOutput)
}

// Failover policy of the read-only endpoint for the failover group.
func (o FailoverGroupReadOnlyEndpointPtrOutput) FailoverPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FailoverGroupReadOnlyEndpoint) *string {
		if v == nil {
			return nil
		}
		return v.FailoverPolicy
	}).(pulumi.StringPtrOutput)
}

// Read-only endpoint of the failover group instance.
type FailoverGroupReadOnlyEndpointResponse struct {
	// Failover policy of the read-only endpoint for the failover group.
	FailoverPolicy *string `pulumi:"failoverPolicy"`
}

// FailoverGroupReadOnlyEndpointResponseInput is an input type that accepts FailoverGroupReadOnlyEndpointResponseArgs and FailoverGroupReadOnlyEndpointResponseOutput values.
// You can construct a concrete instance of `FailoverGroupReadOnlyEndpointResponseInput` via:
//
//          FailoverGroupReadOnlyEndpointResponseArgs{...}
type FailoverGroupReadOnlyEndpointResponseInput interface {
	pulumi.Input

	ToFailoverGroupReadOnlyEndpointResponseOutput() FailoverGroupReadOnlyEndpointResponseOutput
	ToFailoverGroupReadOnlyEndpointResponseOutputWithContext(context.Context) FailoverGroupReadOnlyEndpointResponseOutput
}

// Read-only endpoint of the failover group instance.
type FailoverGroupReadOnlyEndpointResponseArgs struct {
	// Failover policy of the read-only endpoint for the failover group.
	FailoverPolicy pulumi.StringPtrInput `pulumi:"failoverPolicy"`
}

func (FailoverGroupReadOnlyEndpointResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FailoverGroupReadOnlyEndpointResponse)(nil)).Elem()
}

func (i FailoverGroupReadOnlyEndpointResponseArgs) ToFailoverGroupReadOnlyEndpointResponseOutput() FailoverGroupReadOnlyEndpointResponseOutput {
	return i.ToFailoverGroupReadOnlyEndpointResponseOutputWithContext(context.Background())
}

func (i FailoverGroupReadOnlyEndpointResponseArgs) ToFailoverGroupReadOnlyEndpointResponseOutputWithContext(ctx context.Context) FailoverGroupReadOnlyEndpointResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FailoverGroupReadOnlyEndpointResponseOutput)
}

func (i FailoverGroupReadOnlyEndpointResponseArgs) ToFailoverGroupReadOnlyEndpointResponsePtrOutput() FailoverGroupReadOnlyEndpointResponsePtrOutput {
	return i.ToFailoverGroupReadOnlyEndpointResponsePtrOutputWithContext(context.Background())
}

func (i FailoverGroupReadOnlyEndpointResponseArgs) ToFailoverGroupReadOnlyEndpointResponsePtrOutputWithContext(ctx context.Context) FailoverGroupReadOnlyEndpointResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FailoverGroupReadOnlyEndpointResponseOutput).ToFailoverGroupReadOnlyEndpointResponsePtrOutputWithContext(ctx)
}

// FailoverGroupReadOnlyEndpointResponsePtrInput is an input type that accepts FailoverGroupReadOnlyEndpointResponseArgs, FailoverGroupReadOnlyEndpointResponsePtr and FailoverGroupReadOnlyEndpointResponsePtrOutput values.
// You can construct a concrete instance of `FailoverGroupReadOnlyEndpointResponsePtrInput` via:
//
//          FailoverGroupReadOnlyEndpointResponseArgs{...}
//
//  or:
//
//          nil
type FailoverGroupReadOnlyEndpointResponsePtrInput interface {
	pulumi.Input

	ToFailoverGroupReadOnlyEndpointResponsePtrOutput() FailoverGroupReadOnlyEndpointResponsePtrOutput
	ToFailoverGroupReadOnlyEndpointResponsePtrOutputWithContext(context.Context) FailoverGroupReadOnlyEndpointResponsePtrOutput
}

type failoverGroupReadOnlyEndpointResponsePtrType FailoverGroupReadOnlyEndpointResponseArgs

func FailoverGroupReadOnlyEndpointResponsePtr(v *FailoverGroupReadOnlyEndpointResponseArgs) FailoverGroupReadOnlyEndpointResponsePtrInput {
	return (*failoverGroupReadOnlyEndpointResponsePtrType)(v)
}

func (*failoverGroupReadOnlyEndpointResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**FailoverGroupReadOnlyEndpointResponse)(nil)).Elem()
}

func (i *failoverGroupReadOnlyEndpointResponsePtrType) ToFailoverGroupReadOnlyEndpointResponsePtrOutput() FailoverGroupReadOnlyEndpointResponsePtrOutput {
	return i.ToFailoverGroupReadOnlyEndpointResponsePtrOutputWithContext(context.Background())
}

func (i *failoverGroupReadOnlyEndpointResponsePtrType) ToFailoverGroupReadOnlyEndpointResponsePtrOutputWithContext(ctx context.Context) FailoverGroupReadOnlyEndpointResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FailoverGroupReadOnlyEndpointResponsePtrOutput)
}

// Read-only endpoint of the failover group instance.
type FailoverGroupReadOnlyEndpointResponseOutput struct{ *pulumi.OutputState }

func (FailoverGroupReadOnlyEndpointResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FailoverGroupReadOnlyEndpointResponse)(nil)).Elem()
}

func (o FailoverGroupReadOnlyEndpointResponseOutput) ToFailoverGroupReadOnlyEndpointResponseOutput() FailoverGroupReadOnlyEndpointResponseOutput {
	return o
}

func (o FailoverGroupReadOnlyEndpointResponseOutput) ToFailoverGroupReadOnlyEndpointResponseOutputWithContext(ctx context.Context) FailoverGroupReadOnlyEndpointResponseOutput {
	return o
}

func (o FailoverGroupReadOnlyEndpointResponseOutput) ToFailoverGroupReadOnlyEndpointResponsePtrOutput() FailoverGroupReadOnlyEndpointResponsePtrOutput {
	return o.ToFailoverGroupReadOnlyEndpointResponsePtrOutputWithContext(context.Background())
}

func (o FailoverGroupReadOnlyEndpointResponseOutput) ToFailoverGroupReadOnlyEndpointResponsePtrOutputWithContext(ctx context.Context) FailoverGroupReadOnlyEndpointResponsePtrOutput {
	return o.ApplyT(func(v FailoverGroupReadOnlyEndpointResponse) *FailoverGroupReadOnlyEndpointResponse {
		return &v
	}).(FailoverGroupReadOnlyEndpointResponsePtrOutput)
}

// Failover policy of the read-only endpoint for the failover group.
func (o FailoverGroupReadOnlyEndpointResponseOutput) FailoverPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FailoverGroupReadOnlyEndpointResponse) *string { return v.FailoverPolicy }).(pulumi.StringPtrOutput)
}

type FailoverGroupReadOnlyEndpointResponsePtrOutput struct{ *pulumi.OutputState }

func (FailoverGroupReadOnlyEndpointResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FailoverGroupReadOnlyEndpointResponse)(nil)).Elem()
}

func (o FailoverGroupReadOnlyEndpointResponsePtrOutput) ToFailoverGroupReadOnlyEndpointResponsePtrOutput() FailoverGroupReadOnlyEndpointResponsePtrOutput {
	return o
}

func (o FailoverGroupReadOnlyEndpointResponsePtrOutput) ToFailoverGroupReadOnlyEndpointResponsePtrOutputWithContext(ctx context.Context) FailoverGroupReadOnlyEndpointResponsePtrOutput {
	return o
}

func (o FailoverGroupReadOnlyEndpointResponsePtrOutput) Elem() FailoverGroupReadOnlyEndpointResponseOutput {
	return o.ApplyT(func(v *FailoverGroupReadOnlyEndpointResponse) FailoverGroupReadOnlyEndpointResponse { return *v }).(FailoverGroupReadOnlyEndpointResponseOutput)
}

// Failover policy of the read-only endpoint for the failover group.
func (o FailoverGroupReadOnlyEndpointResponsePtrOutput) FailoverPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FailoverGroupReadOnlyEndpointResponse) *string {
		if v == nil {
			return nil
		}
		return v.FailoverPolicy
	}).(pulumi.StringPtrOutput)
}

// Read-write endpoint of the failover group instance.
type FailoverGroupReadWriteEndpoint struct {
	// Failover policy of the read-write endpoint for the failover group. If failoverPolicy is Automatic then failoverWithDataLossGracePeriodMinutes is required.
	FailoverPolicy string `pulumi:"failoverPolicy"`
	// Grace period before failover with data loss is attempted for the read-write endpoint. If failoverPolicy is Automatic then failoverWithDataLossGracePeriodMinutes is required.
	FailoverWithDataLossGracePeriodMinutes *int `pulumi:"failoverWithDataLossGracePeriodMinutes"`
}

// FailoverGroupReadWriteEndpointInput is an input type that accepts FailoverGroupReadWriteEndpointArgs and FailoverGroupReadWriteEndpointOutput values.
// You can construct a concrete instance of `FailoverGroupReadWriteEndpointInput` via:
//
//          FailoverGroupReadWriteEndpointArgs{...}
type FailoverGroupReadWriteEndpointInput interface {
	pulumi.Input

	ToFailoverGroupReadWriteEndpointOutput() FailoverGroupReadWriteEndpointOutput
	ToFailoverGroupReadWriteEndpointOutputWithContext(context.Context) FailoverGroupReadWriteEndpointOutput
}

// Read-write endpoint of the failover group instance.
type FailoverGroupReadWriteEndpointArgs struct {
	// Failover policy of the read-write endpoint for the failover group. If failoverPolicy is Automatic then failoverWithDataLossGracePeriodMinutes is required.
	FailoverPolicy pulumi.StringInput `pulumi:"failoverPolicy"`
	// Grace period before failover with data loss is attempted for the read-write endpoint. If failoverPolicy is Automatic then failoverWithDataLossGracePeriodMinutes is required.
	FailoverWithDataLossGracePeriodMinutes pulumi.IntPtrInput `pulumi:"failoverWithDataLossGracePeriodMinutes"`
}

func (FailoverGroupReadWriteEndpointArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FailoverGroupReadWriteEndpoint)(nil)).Elem()
}

func (i FailoverGroupReadWriteEndpointArgs) ToFailoverGroupReadWriteEndpointOutput() FailoverGroupReadWriteEndpointOutput {
	return i.ToFailoverGroupReadWriteEndpointOutputWithContext(context.Background())
}

func (i FailoverGroupReadWriteEndpointArgs) ToFailoverGroupReadWriteEndpointOutputWithContext(ctx context.Context) FailoverGroupReadWriteEndpointOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FailoverGroupReadWriteEndpointOutput)
}

func (i FailoverGroupReadWriteEndpointArgs) ToFailoverGroupReadWriteEndpointPtrOutput() FailoverGroupReadWriteEndpointPtrOutput {
	return i.ToFailoverGroupReadWriteEndpointPtrOutputWithContext(context.Background())
}

func (i FailoverGroupReadWriteEndpointArgs) ToFailoverGroupReadWriteEndpointPtrOutputWithContext(ctx context.Context) FailoverGroupReadWriteEndpointPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FailoverGroupReadWriteEndpointOutput).ToFailoverGroupReadWriteEndpointPtrOutputWithContext(ctx)
}

// FailoverGroupReadWriteEndpointPtrInput is an input type that accepts FailoverGroupReadWriteEndpointArgs, FailoverGroupReadWriteEndpointPtr and FailoverGroupReadWriteEndpointPtrOutput values.
// You can construct a concrete instance of `FailoverGroupReadWriteEndpointPtrInput` via:
//
//          FailoverGroupReadWriteEndpointArgs{...}
//
//  or:
//
//          nil
type FailoverGroupReadWriteEndpointPtrInput interface {
	pulumi.Input

	ToFailoverGroupReadWriteEndpointPtrOutput() FailoverGroupReadWriteEndpointPtrOutput
	ToFailoverGroupReadWriteEndpointPtrOutputWithContext(context.Context) FailoverGroupReadWriteEndpointPtrOutput
}

type failoverGroupReadWriteEndpointPtrType FailoverGroupReadWriteEndpointArgs

func FailoverGroupReadWriteEndpointPtr(v *FailoverGroupReadWriteEndpointArgs) FailoverGroupReadWriteEndpointPtrInput {
	return (*failoverGroupReadWriteEndpointPtrType)(v)
}

func (*failoverGroupReadWriteEndpointPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**FailoverGroupReadWriteEndpoint)(nil)).Elem()
}

func (i *failoverGroupReadWriteEndpointPtrType) ToFailoverGroupReadWriteEndpointPtrOutput() FailoverGroupReadWriteEndpointPtrOutput {
	return i.ToFailoverGroupReadWriteEndpointPtrOutputWithContext(context.Background())
}

func (i *failoverGroupReadWriteEndpointPtrType) ToFailoverGroupReadWriteEndpointPtrOutputWithContext(ctx context.Context) FailoverGroupReadWriteEndpointPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FailoverGroupReadWriteEndpointPtrOutput)
}

// Read-write endpoint of the failover group instance.
type FailoverGroupReadWriteEndpointOutput struct{ *pulumi.OutputState }

func (FailoverGroupReadWriteEndpointOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FailoverGroupReadWriteEndpoint)(nil)).Elem()
}

func (o FailoverGroupReadWriteEndpointOutput) ToFailoverGroupReadWriteEndpointOutput() FailoverGroupReadWriteEndpointOutput {
	return o
}

func (o FailoverGroupReadWriteEndpointOutput) ToFailoverGroupReadWriteEndpointOutputWithContext(ctx context.Context) FailoverGroupReadWriteEndpointOutput {
	return o
}

func (o FailoverGroupReadWriteEndpointOutput) ToFailoverGroupReadWriteEndpointPtrOutput() FailoverGroupReadWriteEndpointPtrOutput {
	return o.ToFailoverGroupReadWriteEndpointPtrOutputWithContext(context.Background())
}

func (o FailoverGroupReadWriteEndpointOutput) ToFailoverGroupReadWriteEndpointPtrOutputWithContext(ctx context.Context) FailoverGroupReadWriteEndpointPtrOutput {
	return o.ApplyT(func(v FailoverGroupReadWriteEndpoint) *FailoverGroupReadWriteEndpoint {
		return &v
	}).(FailoverGroupReadWriteEndpointPtrOutput)
}

// Failover policy of the read-write endpoint for the failover group. If failoverPolicy is Automatic then failoverWithDataLossGracePeriodMinutes is required.
func (o FailoverGroupReadWriteEndpointOutput) FailoverPolicy() pulumi.StringOutput {
	return o.ApplyT(func(v FailoverGroupReadWriteEndpoint) string { return v.FailoverPolicy }).(pulumi.StringOutput)
}

// Grace period before failover with data loss is attempted for the read-write endpoint. If failoverPolicy is Automatic then failoverWithDataLossGracePeriodMinutes is required.
func (o FailoverGroupReadWriteEndpointOutput) FailoverWithDataLossGracePeriodMinutes() pulumi.IntPtrOutput {
	return o.ApplyT(func(v FailoverGroupReadWriteEndpoint) *int { return v.FailoverWithDataLossGracePeriodMinutes }).(pulumi.IntPtrOutput)
}

type FailoverGroupReadWriteEndpointPtrOutput struct{ *pulumi.OutputState }

func (FailoverGroupReadWriteEndpointPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FailoverGroupReadWriteEndpoint)(nil)).Elem()
}

func (o FailoverGroupReadWriteEndpointPtrOutput) ToFailoverGroupReadWriteEndpointPtrOutput() FailoverGroupReadWriteEndpointPtrOutput {
	return o
}

func (o FailoverGroupReadWriteEndpointPtrOutput) ToFailoverGroupReadWriteEndpointPtrOutputWithContext(ctx context.Context) FailoverGroupReadWriteEndpointPtrOutput {
	return o
}

func (o FailoverGroupReadWriteEndpointPtrOutput) Elem() FailoverGroupReadWriteEndpointOutput {
	return o.ApplyT(func(v *FailoverGroupReadWriteEndpoint) FailoverGroupReadWriteEndpoint { return *v }).(FailoverGroupReadWriteEndpointOutput)
}

// Failover policy of the read-write endpoint for the failover group. If failoverPolicy is Automatic then failoverWithDataLossGracePeriodMinutes is required.
func (o FailoverGroupReadWriteEndpointPtrOutput) FailoverPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FailoverGroupReadWriteEndpoint) *string {
		if v == nil {
			return nil
		}
		return &v.FailoverPolicy
	}).(pulumi.StringPtrOutput)
}

// Grace period before failover with data loss is attempted for the read-write endpoint. If failoverPolicy is Automatic then failoverWithDataLossGracePeriodMinutes is required.
func (o FailoverGroupReadWriteEndpointPtrOutput) FailoverWithDataLossGracePeriodMinutes() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *FailoverGroupReadWriteEndpoint) *int {
		if v == nil {
			return nil
		}
		return v.FailoverWithDataLossGracePeriodMinutes
	}).(pulumi.IntPtrOutput)
}

// Read-write endpoint of the failover group instance.
type FailoverGroupReadWriteEndpointResponse struct {
	// Failover policy of the read-write endpoint for the failover group. If failoverPolicy is Automatic then failoverWithDataLossGracePeriodMinutes is required.
	FailoverPolicy string `pulumi:"failoverPolicy"`
	// Grace period before failover with data loss is attempted for the read-write endpoint. If failoverPolicy is Automatic then failoverWithDataLossGracePeriodMinutes is required.
	FailoverWithDataLossGracePeriodMinutes *int `pulumi:"failoverWithDataLossGracePeriodMinutes"`
}

// FailoverGroupReadWriteEndpointResponseInput is an input type that accepts FailoverGroupReadWriteEndpointResponseArgs and FailoverGroupReadWriteEndpointResponseOutput values.
// You can construct a concrete instance of `FailoverGroupReadWriteEndpointResponseInput` via:
//
//          FailoverGroupReadWriteEndpointResponseArgs{...}
type FailoverGroupReadWriteEndpointResponseInput interface {
	pulumi.Input

	ToFailoverGroupReadWriteEndpointResponseOutput() FailoverGroupReadWriteEndpointResponseOutput
	ToFailoverGroupReadWriteEndpointResponseOutputWithContext(context.Context) FailoverGroupReadWriteEndpointResponseOutput
}

// Read-write endpoint of the failover group instance.
type FailoverGroupReadWriteEndpointResponseArgs struct {
	// Failover policy of the read-write endpoint for the failover group. If failoverPolicy is Automatic then failoverWithDataLossGracePeriodMinutes is required.
	FailoverPolicy pulumi.StringInput `pulumi:"failoverPolicy"`
	// Grace period before failover with data loss is attempted for the read-write endpoint. If failoverPolicy is Automatic then failoverWithDataLossGracePeriodMinutes is required.
	FailoverWithDataLossGracePeriodMinutes pulumi.IntPtrInput `pulumi:"failoverWithDataLossGracePeriodMinutes"`
}

func (FailoverGroupReadWriteEndpointResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FailoverGroupReadWriteEndpointResponse)(nil)).Elem()
}

func (i FailoverGroupReadWriteEndpointResponseArgs) ToFailoverGroupReadWriteEndpointResponseOutput() FailoverGroupReadWriteEndpointResponseOutput {
	return i.ToFailoverGroupReadWriteEndpointResponseOutputWithContext(context.Background())
}

func (i FailoverGroupReadWriteEndpointResponseArgs) ToFailoverGroupReadWriteEndpointResponseOutputWithContext(ctx context.Context) FailoverGroupReadWriteEndpointResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FailoverGroupReadWriteEndpointResponseOutput)
}

func (i FailoverGroupReadWriteEndpointResponseArgs) ToFailoverGroupReadWriteEndpointResponsePtrOutput() FailoverGroupReadWriteEndpointResponsePtrOutput {
	return i.ToFailoverGroupReadWriteEndpointResponsePtrOutputWithContext(context.Background())
}

func (i FailoverGroupReadWriteEndpointResponseArgs) ToFailoverGroupReadWriteEndpointResponsePtrOutputWithContext(ctx context.Context) FailoverGroupReadWriteEndpointResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FailoverGroupReadWriteEndpointResponseOutput).ToFailoverGroupReadWriteEndpointResponsePtrOutputWithContext(ctx)
}

// FailoverGroupReadWriteEndpointResponsePtrInput is an input type that accepts FailoverGroupReadWriteEndpointResponseArgs, FailoverGroupReadWriteEndpointResponsePtr and FailoverGroupReadWriteEndpointResponsePtrOutput values.
// You can construct a concrete instance of `FailoverGroupReadWriteEndpointResponsePtrInput` via:
//
//          FailoverGroupReadWriteEndpointResponseArgs{...}
//
//  or:
//
//          nil
type FailoverGroupReadWriteEndpointResponsePtrInput interface {
	pulumi.Input

	ToFailoverGroupReadWriteEndpointResponsePtrOutput() FailoverGroupReadWriteEndpointResponsePtrOutput
	ToFailoverGroupReadWriteEndpointResponsePtrOutputWithContext(context.Context) FailoverGroupReadWriteEndpointResponsePtrOutput
}

type failoverGroupReadWriteEndpointResponsePtrType FailoverGroupReadWriteEndpointResponseArgs

func FailoverGroupReadWriteEndpointResponsePtr(v *FailoverGroupReadWriteEndpointResponseArgs) FailoverGroupReadWriteEndpointResponsePtrInput {
	return (*failoverGroupReadWriteEndpointResponsePtrType)(v)
}

func (*failoverGroupReadWriteEndpointResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**FailoverGroupReadWriteEndpointResponse)(nil)).Elem()
}

func (i *failoverGroupReadWriteEndpointResponsePtrType) ToFailoverGroupReadWriteEndpointResponsePtrOutput() FailoverGroupReadWriteEndpointResponsePtrOutput {
	return i.ToFailoverGroupReadWriteEndpointResponsePtrOutputWithContext(context.Background())
}

func (i *failoverGroupReadWriteEndpointResponsePtrType) ToFailoverGroupReadWriteEndpointResponsePtrOutputWithContext(ctx context.Context) FailoverGroupReadWriteEndpointResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FailoverGroupReadWriteEndpointResponsePtrOutput)
}

// Read-write endpoint of the failover group instance.
type FailoverGroupReadWriteEndpointResponseOutput struct{ *pulumi.OutputState }

func (FailoverGroupReadWriteEndpointResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FailoverGroupReadWriteEndpointResponse)(nil)).Elem()
}

func (o FailoverGroupReadWriteEndpointResponseOutput) ToFailoverGroupReadWriteEndpointResponseOutput() FailoverGroupReadWriteEndpointResponseOutput {
	return o
}

func (o FailoverGroupReadWriteEndpointResponseOutput) ToFailoverGroupReadWriteEndpointResponseOutputWithContext(ctx context.Context) FailoverGroupReadWriteEndpointResponseOutput {
	return o
}

func (o FailoverGroupReadWriteEndpointResponseOutput) ToFailoverGroupReadWriteEndpointResponsePtrOutput() FailoverGroupReadWriteEndpointResponsePtrOutput {
	return o.ToFailoverGroupReadWriteEndpointResponsePtrOutputWithContext(context.Background())
}

func (o FailoverGroupReadWriteEndpointResponseOutput) ToFailoverGroupReadWriteEndpointResponsePtrOutputWithContext(ctx context.Context) FailoverGroupReadWriteEndpointResponsePtrOutput {
	return o.ApplyT(func(v FailoverGroupReadWriteEndpointResponse) *FailoverGroupReadWriteEndpointResponse {
		return &v
	}).(FailoverGroupReadWriteEndpointResponsePtrOutput)
}

// Failover policy of the read-write endpoint for the failover group. If failoverPolicy is Automatic then failoverWithDataLossGracePeriodMinutes is required.
func (o FailoverGroupReadWriteEndpointResponseOutput) FailoverPolicy() pulumi.StringOutput {
	return o.ApplyT(func(v FailoverGroupReadWriteEndpointResponse) string { return v.FailoverPolicy }).(pulumi.StringOutput)
}

// Grace period before failover with data loss is attempted for the read-write endpoint. If failoverPolicy is Automatic then failoverWithDataLossGracePeriodMinutes is required.
func (o FailoverGroupReadWriteEndpointResponseOutput) FailoverWithDataLossGracePeriodMinutes() pulumi.IntPtrOutput {
	return o.ApplyT(func(v FailoverGroupReadWriteEndpointResponse) *int { return v.FailoverWithDataLossGracePeriodMinutes }).(pulumi.IntPtrOutput)
}

type FailoverGroupReadWriteEndpointResponsePtrOutput struct{ *pulumi.OutputState }

func (FailoverGroupReadWriteEndpointResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FailoverGroupReadWriteEndpointResponse)(nil)).Elem()
}

func (o FailoverGroupReadWriteEndpointResponsePtrOutput) ToFailoverGroupReadWriteEndpointResponsePtrOutput() FailoverGroupReadWriteEndpointResponsePtrOutput {
	return o
}

func (o FailoverGroupReadWriteEndpointResponsePtrOutput) ToFailoverGroupReadWriteEndpointResponsePtrOutputWithContext(ctx context.Context) FailoverGroupReadWriteEndpointResponsePtrOutput {
	return o
}

func (o FailoverGroupReadWriteEndpointResponsePtrOutput) Elem() FailoverGroupReadWriteEndpointResponseOutput {
	return o.ApplyT(func(v *FailoverGroupReadWriteEndpointResponse) FailoverGroupReadWriteEndpointResponse { return *v }).(FailoverGroupReadWriteEndpointResponseOutput)
}

// Failover policy of the read-write endpoint for the failover group. If failoverPolicy is Automatic then failoverWithDataLossGracePeriodMinutes is required.
func (o FailoverGroupReadWriteEndpointResponsePtrOutput) FailoverPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FailoverGroupReadWriteEndpointResponse) *string {
		if v == nil {
			return nil
		}
		return &v.FailoverPolicy
	}).(pulumi.StringPtrOutput)
}

// Grace period before failover with data loss is attempted for the read-write endpoint. If failoverPolicy is Automatic then failoverWithDataLossGracePeriodMinutes is required.
func (o FailoverGroupReadWriteEndpointResponsePtrOutput) FailoverWithDataLossGracePeriodMinutes() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *FailoverGroupReadWriteEndpointResponse) *int {
		if v == nil {
			return nil
		}
		return v.FailoverWithDataLossGracePeriodMinutes
	}).(pulumi.IntPtrOutput)
}

// Partner server information for the failover group.
type PartnerInfo struct {
	// Resource identifier of the partner server.
	Id string `pulumi:"id"`
}

// PartnerInfoInput is an input type that accepts PartnerInfoArgs and PartnerInfoOutput values.
// You can construct a concrete instance of `PartnerInfoInput` via:
//
//          PartnerInfoArgs{...}
type PartnerInfoInput interface {
	pulumi.Input

	ToPartnerInfoOutput() PartnerInfoOutput
	ToPartnerInfoOutputWithContext(context.Context) PartnerInfoOutput
}

// Partner server information for the failover group.
type PartnerInfoArgs struct {
	// Resource identifier of the partner server.
	Id pulumi.StringInput `pulumi:"id"`
}

func (PartnerInfoArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PartnerInfo)(nil)).Elem()
}

func (i PartnerInfoArgs) ToPartnerInfoOutput() PartnerInfoOutput {
	return i.ToPartnerInfoOutputWithContext(context.Background())
}

func (i PartnerInfoArgs) ToPartnerInfoOutputWithContext(ctx context.Context) PartnerInfoOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PartnerInfoOutput)
}

// PartnerInfoArrayInput is an input type that accepts PartnerInfoArray and PartnerInfoArrayOutput values.
// You can construct a concrete instance of `PartnerInfoArrayInput` via:
//
//          PartnerInfoArray{ PartnerInfoArgs{...} }
type PartnerInfoArrayInput interface {
	pulumi.Input

	ToPartnerInfoArrayOutput() PartnerInfoArrayOutput
	ToPartnerInfoArrayOutputWithContext(context.Context) PartnerInfoArrayOutput
}

type PartnerInfoArray []PartnerInfoInput

func (PartnerInfoArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PartnerInfo)(nil)).Elem()
}

func (i PartnerInfoArray) ToPartnerInfoArrayOutput() PartnerInfoArrayOutput {
	return i.ToPartnerInfoArrayOutputWithContext(context.Background())
}

func (i PartnerInfoArray) ToPartnerInfoArrayOutputWithContext(ctx context.Context) PartnerInfoArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PartnerInfoArrayOutput)
}

// Partner server information for the failover group.
type PartnerInfoOutput struct{ *pulumi.OutputState }

func (PartnerInfoOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PartnerInfo)(nil)).Elem()
}

func (o PartnerInfoOutput) ToPartnerInfoOutput() PartnerInfoOutput {
	return o
}

func (o PartnerInfoOutput) ToPartnerInfoOutputWithContext(ctx context.Context) PartnerInfoOutput {
	return o
}

// Resource identifier of the partner server.
func (o PartnerInfoOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v PartnerInfo) string { return v.Id }).(pulumi.StringOutput)
}

type PartnerInfoArrayOutput struct{ *pulumi.OutputState }

func (PartnerInfoArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PartnerInfo)(nil)).Elem()
}

func (o PartnerInfoArrayOutput) ToPartnerInfoArrayOutput() PartnerInfoArrayOutput {
	return o
}

func (o PartnerInfoArrayOutput) ToPartnerInfoArrayOutputWithContext(ctx context.Context) PartnerInfoArrayOutput {
	return o
}

func (o PartnerInfoArrayOutput) Index(i pulumi.IntInput) PartnerInfoOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) PartnerInfo {
		return vs[0].([]PartnerInfo)[vs[1].(int)]
	}).(PartnerInfoOutput)
}

// Partner server information for the failover group.
type PartnerInfoResponse struct {
	// Resource identifier of the partner server.
	Id string `pulumi:"id"`
	// Geo location of the partner server.
	Location string `pulumi:"location"`
	// Replication role of the partner server.
	ReplicationRole string `pulumi:"replicationRole"`
}

// PartnerInfoResponseInput is an input type that accepts PartnerInfoResponseArgs and PartnerInfoResponseOutput values.
// You can construct a concrete instance of `PartnerInfoResponseInput` via:
//
//          PartnerInfoResponseArgs{...}
type PartnerInfoResponseInput interface {
	pulumi.Input

	ToPartnerInfoResponseOutput() PartnerInfoResponseOutput
	ToPartnerInfoResponseOutputWithContext(context.Context) PartnerInfoResponseOutput
}

// Partner server information for the failover group.
type PartnerInfoResponseArgs struct {
	// Resource identifier of the partner server.
	Id pulumi.StringInput `pulumi:"id"`
	// Geo location of the partner server.
	Location pulumi.StringInput `pulumi:"location"`
	// Replication role of the partner server.
	ReplicationRole pulumi.StringInput `pulumi:"replicationRole"`
}

func (PartnerInfoResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PartnerInfoResponse)(nil)).Elem()
}

func (i PartnerInfoResponseArgs) ToPartnerInfoResponseOutput() PartnerInfoResponseOutput {
	return i.ToPartnerInfoResponseOutputWithContext(context.Background())
}

func (i PartnerInfoResponseArgs) ToPartnerInfoResponseOutputWithContext(ctx context.Context) PartnerInfoResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PartnerInfoResponseOutput)
}

// PartnerInfoResponseArrayInput is an input type that accepts PartnerInfoResponseArray and PartnerInfoResponseArrayOutput values.
// You can construct a concrete instance of `PartnerInfoResponseArrayInput` via:
//
//          PartnerInfoResponseArray{ PartnerInfoResponseArgs{...} }
type PartnerInfoResponseArrayInput interface {
	pulumi.Input

	ToPartnerInfoResponseArrayOutput() PartnerInfoResponseArrayOutput
	ToPartnerInfoResponseArrayOutputWithContext(context.Context) PartnerInfoResponseArrayOutput
}

type PartnerInfoResponseArray []PartnerInfoResponseInput

func (PartnerInfoResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PartnerInfoResponse)(nil)).Elem()
}

func (i PartnerInfoResponseArray) ToPartnerInfoResponseArrayOutput() PartnerInfoResponseArrayOutput {
	return i.ToPartnerInfoResponseArrayOutputWithContext(context.Background())
}

func (i PartnerInfoResponseArray) ToPartnerInfoResponseArrayOutputWithContext(ctx context.Context) PartnerInfoResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PartnerInfoResponseArrayOutput)
}

// Partner server information for the failover group.
type PartnerInfoResponseOutput struct{ *pulumi.OutputState }

func (PartnerInfoResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PartnerInfoResponse)(nil)).Elem()
}

func (o PartnerInfoResponseOutput) ToPartnerInfoResponseOutput() PartnerInfoResponseOutput {
	return o
}

func (o PartnerInfoResponseOutput) ToPartnerInfoResponseOutputWithContext(ctx context.Context) PartnerInfoResponseOutput {
	return o
}

// Resource identifier of the partner server.
func (o PartnerInfoResponseOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v PartnerInfoResponse) string { return v.Id }).(pulumi.StringOutput)
}

// Geo location of the partner server.
func (o PartnerInfoResponseOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v PartnerInfoResponse) string { return v.Location }).(pulumi.StringOutput)
}

// Replication role of the partner server.
func (o PartnerInfoResponseOutput) ReplicationRole() pulumi.StringOutput {
	return o.ApplyT(func(v PartnerInfoResponse) string { return v.ReplicationRole }).(pulumi.StringOutput)
}

type PartnerInfoResponseArrayOutput struct{ *pulumi.OutputState }

func (PartnerInfoResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PartnerInfoResponse)(nil)).Elem()
}

func (o PartnerInfoResponseArrayOutput) ToPartnerInfoResponseArrayOutput() PartnerInfoResponseArrayOutput {
	return o
}

func (o PartnerInfoResponseArrayOutput) ToPartnerInfoResponseArrayOutputWithContext(ctx context.Context) PartnerInfoResponseArrayOutput {
	return o
}

func (o PartnerInfoResponseArrayOutput) Index(i pulumi.IntInput) PartnerInfoResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) PartnerInfoResponse {
		return vs[0].([]PartnerInfoResponse)[vs[1].(int)]
	}).(PartnerInfoResponseOutput)
}

// Azure Active Directory identity configuration for a resource.
type ResourceIdentity struct {
	// The identity type. Set this to 'SystemAssigned' in order to automatically create and assign an Azure Active Directory principal for the resource.
	Type *string `pulumi:"type"`
}

// ResourceIdentityInput is an input type that accepts ResourceIdentityArgs and ResourceIdentityOutput values.
// You can construct a concrete instance of `ResourceIdentityInput` via:
//
//          ResourceIdentityArgs{...}
type ResourceIdentityInput interface {
	pulumi.Input

	ToResourceIdentityOutput() ResourceIdentityOutput
	ToResourceIdentityOutputWithContext(context.Context) ResourceIdentityOutput
}

// Azure Active Directory identity configuration for a resource.
type ResourceIdentityArgs struct {
	// The identity type. Set this to 'SystemAssigned' in order to automatically create and assign an Azure Active Directory principal for the resource.
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (ResourceIdentityArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceIdentity)(nil)).Elem()
}

func (i ResourceIdentityArgs) ToResourceIdentityOutput() ResourceIdentityOutput {
	return i.ToResourceIdentityOutputWithContext(context.Background())
}

func (i ResourceIdentityArgs) ToResourceIdentityOutputWithContext(ctx context.Context) ResourceIdentityOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceIdentityOutput)
}

func (i ResourceIdentityArgs) ToResourceIdentityPtrOutput() ResourceIdentityPtrOutput {
	return i.ToResourceIdentityPtrOutputWithContext(context.Background())
}

func (i ResourceIdentityArgs) ToResourceIdentityPtrOutputWithContext(ctx context.Context) ResourceIdentityPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceIdentityOutput).ToResourceIdentityPtrOutputWithContext(ctx)
}

// ResourceIdentityPtrInput is an input type that accepts ResourceIdentityArgs, ResourceIdentityPtr and ResourceIdentityPtrOutput values.
// You can construct a concrete instance of `ResourceIdentityPtrInput` via:
//
//          ResourceIdentityArgs{...}
//
//  or:
//
//          nil
type ResourceIdentityPtrInput interface {
	pulumi.Input

	ToResourceIdentityPtrOutput() ResourceIdentityPtrOutput
	ToResourceIdentityPtrOutputWithContext(context.Context) ResourceIdentityPtrOutput
}

type resourceIdentityPtrType ResourceIdentityArgs

func ResourceIdentityPtr(v *ResourceIdentityArgs) ResourceIdentityPtrInput {
	return (*resourceIdentityPtrType)(v)
}

func (*resourceIdentityPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ResourceIdentity)(nil)).Elem()
}

func (i *resourceIdentityPtrType) ToResourceIdentityPtrOutput() ResourceIdentityPtrOutput {
	return i.ToResourceIdentityPtrOutputWithContext(context.Background())
}

func (i *resourceIdentityPtrType) ToResourceIdentityPtrOutputWithContext(ctx context.Context) ResourceIdentityPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceIdentityPtrOutput)
}

// Azure Active Directory identity configuration for a resource.
type ResourceIdentityOutput struct{ *pulumi.OutputState }

func (ResourceIdentityOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceIdentity)(nil)).Elem()
}

func (o ResourceIdentityOutput) ToResourceIdentityOutput() ResourceIdentityOutput {
	return o
}

func (o ResourceIdentityOutput) ToResourceIdentityOutputWithContext(ctx context.Context) ResourceIdentityOutput {
	return o
}

func (o ResourceIdentityOutput) ToResourceIdentityPtrOutput() ResourceIdentityPtrOutput {
	return o.ToResourceIdentityPtrOutputWithContext(context.Background())
}

func (o ResourceIdentityOutput) ToResourceIdentityPtrOutputWithContext(ctx context.Context) ResourceIdentityPtrOutput {
	return o.ApplyT(func(v ResourceIdentity) *ResourceIdentity {
		return &v
	}).(ResourceIdentityPtrOutput)
}

// The identity type. Set this to 'SystemAssigned' in order to automatically create and assign an Azure Active Directory principal for the resource.
func (o ResourceIdentityOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceIdentity) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type ResourceIdentityPtrOutput struct{ *pulumi.OutputState }

func (ResourceIdentityPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ResourceIdentity)(nil)).Elem()
}

func (o ResourceIdentityPtrOutput) ToResourceIdentityPtrOutput() ResourceIdentityPtrOutput {
	return o
}

func (o ResourceIdentityPtrOutput) ToResourceIdentityPtrOutputWithContext(ctx context.Context) ResourceIdentityPtrOutput {
	return o
}

func (o ResourceIdentityPtrOutput) Elem() ResourceIdentityOutput {
	return o.ApplyT(func(v *ResourceIdentity) ResourceIdentity { return *v }).(ResourceIdentityOutput)
}

// The identity type. Set this to 'SystemAssigned' in order to automatically create and assign an Azure Active Directory principal for the resource.
func (o ResourceIdentityPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceIdentity) *string {
		if v == nil {
			return nil
		}
		return v.Type
	}).(pulumi.StringPtrOutput)
}

// Azure Active Directory identity configuration for a resource.
type ResourceIdentityResponse struct {
	// The Azure Active Directory principal id.
	PrincipalId string `pulumi:"principalId"`
	// The Azure Active Directory tenant id.
	TenantId string `pulumi:"tenantId"`
	// The identity type. Set this to 'SystemAssigned' in order to automatically create and assign an Azure Active Directory principal for the resource.
	Type *string `pulumi:"type"`
}

// ResourceIdentityResponseInput is an input type that accepts ResourceIdentityResponseArgs and ResourceIdentityResponseOutput values.
// You can construct a concrete instance of `ResourceIdentityResponseInput` via:
//
//          ResourceIdentityResponseArgs{...}
type ResourceIdentityResponseInput interface {
	pulumi.Input

	ToResourceIdentityResponseOutput() ResourceIdentityResponseOutput
	ToResourceIdentityResponseOutputWithContext(context.Context) ResourceIdentityResponseOutput
}

// Azure Active Directory identity configuration for a resource.
type ResourceIdentityResponseArgs struct {
	// The Azure Active Directory principal id.
	PrincipalId pulumi.StringInput `pulumi:"principalId"`
	// The Azure Active Directory tenant id.
	TenantId pulumi.StringInput `pulumi:"tenantId"`
	// The identity type. Set this to 'SystemAssigned' in order to automatically create and assign an Azure Active Directory principal for the resource.
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (ResourceIdentityResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceIdentityResponse)(nil)).Elem()
}

func (i ResourceIdentityResponseArgs) ToResourceIdentityResponseOutput() ResourceIdentityResponseOutput {
	return i.ToResourceIdentityResponseOutputWithContext(context.Background())
}

func (i ResourceIdentityResponseArgs) ToResourceIdentityResponseOutputWithContext(ctx context.Context) ResourceIdentityResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceIdentityResponseOutput)
}

func (i ResourceIdentityResponseArgs) ToResourceIdentityResponsePtrOutput() ResourceIdentityResponsePtrOutput {
	return i.ToResourceIdentityResponsePtrOutputWithContext(context.Background())
}

func (i ResourceIdentityResponseArgs) ToResourceIdentityResponsePtrOutputWithContext(ctx context.Context) ResourceIdentityResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceIdentityResponseOutput).ToResourceIdentityResponsePtrOutputWithContext(ctx)
}

// ResourceIdentityResponsePtrInput is an input type that accepts ResourceIdentityResponseArgs, ResourceIdentityResponsePtr and ResourceIdentityResponsePtrOutput values.
// You can construct a concrete instance of `ResourceIdentityResponsePtrInput` via:
//
//          ResourceIdentityResponseArgs{...}
//
//  or:
//
//          nil
type ResourceIdentityResponsePtrInput interface {
	pulumi.Input

	ToResourceIdentityResponsePtrOutput() ResourceIdentityResponsePtrOutput
	ToResourceIdentityResponsePtrOutputWithContext(context.Context) ResourceIdentityResponsePtrOutput
}

type resourceIdentityResponsePtrType ResourceIdentityResponseArgs

func ResourceIdentityResponsePtr(v *ResourceIdentityResponseArgs) ResourceIdentityResponsePtrInput {
	return (*resourceIdentityResponsePtrType)(v)
}

func (*resourceIdentityResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ResourceIdentityResponse)(nil)).Elem()
}

func (i *resourceIdentityResponsePtrType) ToResourceIdentityResponsePtrOutput() ResourceIdentityResponsePtrOutput {
	return i.ToResourceIdentityResponsePtrOutputWithContext(context.Background())
}

func (i *resourceIdentityResponsePtrType) ToResourceIdentityResponsePtrOutputWithContext(ctx context.Context) ResourceIdentityResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceIdentityResponsePtrOutput)
}

// Azure Active Directory identity configuration for a resource.
type ResourceIdentityResponseOutput struct{ *pulumi.OutputState }

func (ResourceIdentityResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceIdentityResponse)(nil)).Elem()
}

func (o ResourceIdentityResponseOutput) ToResourceIdentityResponseOutput() ResourceIdentityResponseOutput {
	return o
}

func (o ResourceIdentityResponseOutput) ToResourceIdentityResponseOutputWithContext(ctx context.Context) ResourceIdentityResponseOutput {
	return o
}

func (o ResourceIdentityResponseOutput) ToResourceIdentityResponsePtrOutput() ResourceIdentityResponsePtrOutput {
	return o.ToResourceIdentityResponsePtrOutputWithContext(context.Background())
}

func (o ResourceIdentityResponseOutput) ToResourceIdentityResponsePtrOutputWithContext(ctx context.Context) ResourceIdentityResponsePtrOutput {
	return o.ApplyT(func(v ResourceIdentityResponse) *ResourceIdentityResponse {
		return &v
	}).(ResourceIdentityResponsePtrOutput)
}

// The Azure Active Directory principal id.
func (o ResourceIdentityResponseOutput) PrincipalId() pulumi.StringOutput {
	return o.ApplyT(func(v ResourceIdentityResponse) string { return v.PrincipalId }).(pulumi.StringOutput)
}

// The Azure Active Directory tenant id.
func (o ResourceIdentityResponseOutput) TenantId() pulumi.StringOutput {
	return o.ApplyT(func(v ResourceIdentityResponse) string { return v.TenantId }).(pulumi.StringOutput)
}

// The identity type. Set this to 'SystemAssigned' in order to automatically create and assign an Azure Active Directory principal for the resource.
func (o ResourceIdentityResponseOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceIdentityResponse) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type ResourceIdentityResponsePtrOutput struct{ *pulumi.OutputState }

func (ResourceIdentityResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ResourceIdentityResponse)(nil)).Elem()
}

func (o ResourceIdentityResponsePtrOutput) ToResourceIdentityResponsePtrOutput() ResourceIdentityResponsePtrOutput {
	return o
}

func (o ResourceIdentityResponsePtrOutput) ToResourceIdentityResponsePtrOutputWithContext(ctx context.Context) ResourceIdentityResponsePtrOutput {
	return o
}

func (o ResourceIdentityResponsePtrOutput) Elem() ResourceIdentityResponseOutput {
	return o.ApplyT(func(v *ResourceIdentityResponse) ResourceIdentityResponse { return *v }).(ResourceIdentityResponseOutput)
}

// The Azure Active Directory principal id.
func (o ResourceIdentityResponsePtrOutput) PrincipalId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceIdentityResponse) *string {
		if v == nil {
			return nil
		}
		return &v.PrincipalId
	}).(pulumi.StringPtrOutput)
}

// The Azure Active Directory tenant id.
func (o ResourceIdentityResponsePtrOutput) TenantId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceIdentityResponse) *string {
		if v == nil {
			return nil
		}
		return &v.TenantId
	}).(pulumi.StringPtrOutput)
}

// The identity type. Set this to 'SystemAssigned' in order to automatically create and assign an Azure Active Directory principal for the resource.
func (o ResourceIdentityResponsePtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceIdentityResponse) *string {
		if v == nil {
			return nil
		}
		return v.Type
	}).(pulumi.StringPtrOutput)
}

// An ARM Resource SKU.
type Sku struct {
	// Capacity of the particular SKU.
	Capacity *int `pulumi:"capacity"`
	// If the service has different generations of hardware, for the same SKU, then that can be captured here.
	Family *string `pulumi:"family"`
	// The name of the SKU, typically, a letter + Number code, e.g. P3.
	Name string `pulumi:"name"`
	// Size of the particular SKU
	Size *string `pulumi:"size"`
	// The tier or edition of the particular SKU, e.g. Basic, Premium.
	Tier *string `pulumi:"tier"`
}

// SkuInput is an input type that accepts SkuArgs and SkuOutput values.
// You can construct a concrete instance of `SkuInput` via:
//
//          SkuArgs{...}
type SkuInput interface {
	pulumi.Input

	ToSkuOutput() SkuOutput
	ToSkuOutputWithContext(context.Context) SkuOutput
}

// An ARM Resource SKU.
type SkuArgs struct {
	// Capacity of the particular SKU.
	Capacity pulumi.IntPtrInput `pulumi:"capacity"`
	// If the service has different generations of hardware, for the same SKU, then that can be captured here.
	Family pulumi.StringPtrInput `pulumi:"family"`
	// The name of the SKU, typically, a letter + Number code, e.g. P3.
	Name pulumi.StringInput `pulumi:"name"`
	// Size of the particular SKU
	Size pulumi.StringPtrInput `pulumi:"size"`
	// The tier or edition of the particular SKU, e.g. Basic, Premium.
	Tier pulumi.StringPtrInput `pulumi:"tier"`
}

func (SkuArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Sku)(nil)).Elem()
}

func (i SkuArgs) ToSkuOutput() SkuOutput {
	return i.ToSkuOutputWithContext(context.Background())
}

func (i SkuArgs) ToSkuOutputWithContext(ctx context.Context) SkuOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SkuOutput)
}

func (i SkuArgs) ToSkuPtrOutput() SkuPtrOutput {
	return i.ToSkuPtrOutputWithContext(context.Background())
}

func (i SkuArgs) ToSkuPtrOutputWithContext(ctx context.Context) SkuPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SkuOutput).ToSkuPtrOutputWithContext(ctx)
}

// SkuPtrInput is an input type that accepts SkuArgs, SkuPtr and SkuPtrOutput values.
// You can construct a concrete instance of `SkuPtrInput` via:
//
//          SkuArgs{...}
//
//  or:
//
//          nil
type SkuPtrInput interface {
	pulumi.Input

	ToSkuPtrOutput() SkuPtrOutput
	ToSkuPtrOutputWithContext(context.Context) SkuPtrOutput
}

type skuPtrType SkuArgs

func SkuPtr(v *SkuArgs) SkuPtrInput {
	return (*skuPtrType)(v)
}

func (*skuPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Sku)(nil)).Elem()
}

func (i *skuPtrType) ToSkuPtrOutput() SkuPtrOutput {
	return i.ToSkuPtrOutputWithContext(context.Background())
}

func (i *skuPtrType) ToSkuPtrOutputWithContext(ctx context.Context) SkuPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SkuPtrOutput)
}

// An ARM Resource SKU.
type SkuOutput struct{ *pulumi.OutputState }

func (SkuOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Sku)(nil)).Elem()
}

func (o SkuOutput) ToSkuOutput() SkuOutput {
	return o
}

func (o SkuOutput) ToSkuOutputWithContext(ctx context.Context) SkuOutput {
	return o
}

func (o SkuOutput) ToSkuPtrOutput() SkuPtrOutput {
	return o.ToSkuPtrOutputWithContext(context.Background())
}

func (o SkuOutput) ToSkuPtrOutputWithContext(ctx context.Context) SkuPtrOutput {
	return o.ApplyT(func(v Sku) *Sku {
		return &v
	}).(SkuPtrOutput)
}

// Capacity of the particular SKU.
func (o SkuOutput) Capacity() pulumi.IntPtrOutput {
	return o.ApplyT(func(v Sku) *int { return v.Capacity }).(pulumi.IntPtrOutput)
}

// If the service has different generations of hardware, for the same SKU, then that can be captured here.
func (o SkuOutput) Family() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Sku) *string { return v.Family }).(pulumi.StringPtrOutput)
}

// The name of the SKU, typically, a letter + Number code, e.g. P3.
func (o SkuOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v Sku) string { return v.Name }).(pulumi.StringOutput)
}

// Size of the particular SKU
func (o SkuOutput) Size() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Sku) *string { return v.Size }).(pulumi.StringPtrOutput)
}

// The tier or edition of the particular SKU, e.g. Basic, Premium.
func (o SkuOutput) Tier() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Sku) *string { return v.Tier }).(pulumi.StringPtrOutput)
}

type SkuPtrOutput struct{ *pulumi.OutputState }

func (SkuPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Sku)(nil)).Elem()
}

func (o SkuPtrOutput) ToSkuPtrOutput() SkuPtrOutput {
	return o
}

func (o SkuPtrOutput) ToSkuPtrOutputWithContext(ctx context.Context) SkuPtrOutput {
	return o
}

func (o SkuPtrOutput) Elem() SkuOutput {
	return o.ApplyT(func(v *Sku) Sku { return *v }).(SkuOutput)
}

// Capacity of the particular SKU.
func (o SkuPtrOutput) Capacity() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Sku) *int {
		if v == nil {
			return nil
		}
		return v.Capacity
	}).(pulumi.IntPtrOutput)
}

// If the service has different generations of hardware, for the same SKU, then that can be captured here.
func (o SkuPtrOutput) Family() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Sku) *string {
		if v == nil {
			return nil
		}
		return v.Family
	}).(pulumi.StringPtrOutput)
}

// The name of the SKU, typically, a letter + Number code, e.g. P3.
func (o SkuPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Sku) *string {
		if v == nil {
			return nil
		}
		return &v.Name
	}).(pulumi.StringPtrOutput)
}

// Size of the particular SKU
func (o SkuPtrOutput) Size() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Sku) *string {
		if v == nil {
			return nil
		}
		return v.Size
	}).(pulumi.StringPtrOutput)
}

// The tier or edition of the particular SKU, e.g. Basic, Premium.
func (o SkuPtrOutput) Tier() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Sku) *string {
		if v == nil {
			return nil
		}
		return v.Tier
	}).(pulumi.StringPtrOutput)
}

// An ARM Resource SKU.
type SkuResponse struct {
	// Capacity of the particular SKU.
	Capacity *int `pulumi:"capacity"`
	// If the service has different generations of hardware, for the same SKU, then that can be captured here.
	Family *string `pulumi:"family"`
	// The name of the SKU, typically, a letter + Number code, e.g. P3.
	Name string `pulumi:"name"`
	// Size of the particular SKU
	Size *string `pulumi:"size"`
	// The tier or edition of the particular SKU, e.g. Basic, Premium.
	Tier *string `pulumi:"tier"`
}

// SkuResponseInput is an input type that accepts SkuResponseArgs and SkuResponseOutput values.
// You can construct a concrete instance of `SkuResponseInput` via:
//
//          SkuResponseArgs{...}
type SkuResponseInput interface {
	pulumi.Input

	ToSkuResponseOutput() SkuResponseOutput
	ToSkuResponseOutputWithContext(context.Context) SkuResponseOutput
}

// An ARM Resource SKU.
type SkuResponseArgs struct {
	// Capacity of the particular SKU.
	Capacity pulumi.IntPtrInput `pulumi:"capacity"`
	// If the service has different generations of hardware, for the same SKU, then that can be captured here.
	Family pulumi.StringPtrInput `pulumi:"family"`
	// The name of the SKU, typically, a letter + Number code, e.g. P3.
	Name pulumi.StringInput `pulumi:"name"`
	// Size of the particular SKU
	Size pulumi.StringPtrInput `pulumi:"size"`
	// The tier or edition of the particular SKU, e.g. Basic, Premium.
	Tier pulumi.StringPtrInput `pulumi:"tier"`
}

func (SkuResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SkuResponse)(nil)).Elem()
}

func (i SkuResponseArgs) ToSkuResponseOutput() SkuResponseOutput {
	return i.ToSkuResponseOutputWithContext(context.Background())
}

func (i SkuResponseArgs) ToSkuResponseOutputWithContext(ctx context.Context) SkuResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SkuResponseOutput)
}

func (i SkuResponseArgs) ToSkuResponsePtrOutput() SkuResponsePtrOutput {
	return i.ToSkuResponsePtrOutputWithContext(context.Background())
}

func (i SkuResponseArgs) ToSkuResponsePtrOutputWithContext(ctx context.Context) SkuResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SkuResponseOutput).ToSkuResponsePtrOutputWithContext(ctx)
}

// SkuResponsePtrInput is an input type that accepts SkuResponseArgs, SkuResponsePtr and SkuResponsePtrOutput values.
// You can construct a concrete instance of `SkuResponsePtrInput` via:
//
//          SkuResponseArgs{...}
//
//  or:
//
//          nil
type SkuResponsePtrInput interface {
	pulumi.Input

	ToSkuResponsePtrOutput() SkuResponsePtrOutput
	ToSkuResponsePtrOutputWithContext(context.Context) SkuResponsePtrOutput
}

type skuResponsePtrType SkuResponseArgs

func SkuResponsePtr(v *SkuResponseArgs) SkuResponsePtrInput {
	return (*skuResponsePtrType)(v)
}

func (*skuResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SkuResponse)(nil)).Elem()
}

func (i *skuResponsePtrType) ToSkuResponsePtrOutput() SkuResponsePtrOutput {
	return i.ToSkuResponsePtrOutputWithContext(context.Background())
}

func (i *skuResponsePtrType) ToSkuResponsePtrOutputWithContext(ctx context.Context) SkuResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SkuResponsePtrOutput)
}

// An ARM Resource SKU.
type SkuResponseOutput struct{ *pulumi.OutputState }

func (SkuResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SkuResponse)(nil)).Elem()
}

func (o SkuResponseOutput) ToSkuResponseOutput() SkuResponseOutput {
	return o
}

func (o SkuResponseOutput) ToSkuResponseOutputWithContext(ctx context.Context) SkuResponseOutput {
	return o
}

func (o SkuResponseOutput) ToSkuResponsePtrOutput() SkuResponsePtrOutput {
	return o.ToSkuResponsePtrOutputWithContext(context.Background())
}

func (o SkuResponseOutput) ToSkuResponsePtrOutputWithContext(ctx context.Context) SkuResponsePtrOutput {
	return o.ApplyT(func(v SkuResponse) *SkuResponse {
		return &v
	}).(SkuResponsePtrOutput)
}

// Capacity of the particular SKU.
func (o SkuResponseOutput) Capacity() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SkuResponse) *int { return v.Capacity }).(pulumi.IntPtrOutput)
}

// If the service has different generations of hardware, for the same SKU, then that can be captured here.
func (o SkuResponseOutput) Family() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SkuResponse) *string { return v.Family }).(pulumi.StringPtrOutput)
}

// The name of the SKU, typically, a letter + Number code, e.g. P3.
func (o SkuResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v SkuResponse) string { return v.Name }).(pulumi.StringOutput)
}

// Size of the particular SKU
func (o SkuResponseOutput) Size() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SkuResponse) *string { return v.Size }).(pulumi.StringPtrOutput)
}

// The tier or edition of the particular SKU, e.g. Basic, Premium.
func (o SkuResponseOutput) Tier() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SkuResponse) *string { return v.Tier }).(pulumi.StringPtrOutput)
}

type SkuResponsePtrOutput struct{ *pulumi.OutputState }

func (SkuResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SkuResponse)(nil)).Elem()
}

func (o SkuResponsePtrOutput) ToSkuResponsePtrOutput() SkuResponsePtrOutput {
	return o
}

func (o SkuResponsePtrOutput) ToSkuResponsePtrOutputWithContext(ctx context.Context) SkuResponsePtrOutput {
	return o
}

func (o SkuResponsePtrOutput) Elem() SkuResponseOutput {
	return o.ApplyT(func(v *SkuResponse) SkuResponse { return *v }).(SkuResponseOutput)
}

// Capacity of the particular SKU.
func (o SkuResponsePtrOutput) Capacity() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SkuResponse) *int {
		if v == nil {
			return nil
		}
		return v.Capacity
	}).(pulumi.IntPtrOutput)
}

// If the service has different generations of hardware, for the same SKU, then that can be captured here.
func (o SkuResponsePtrOutput) Family() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SkuResponse) *string {
		if v == nil {
			return nil
		}
		return v.Family
	}).(pulumi.StringPtrOutput)
}

// The name of the SKU, typically, a letter + Number code, e.g. P3.
func (o SkuResponsePtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SkuResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Name
	}).(pulumi.StringPtrOutput)
}

// Size of the particular SKU
func (o SkuResponsePtrOutput) Size() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SkuResponse) *string {
		if v == nil {
			return nil
		}
		return v.Size
	}).(pulumi.StringPtrOutput)
}

// The tier or edition of the particular SKU, e.g. Basic, Premium.
func (o SkuResponsePtrOutput) Tier() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SkuResponse) *string {
		if v == nil {
			return nil
		}
		return v.Tier
	}).(pulumi.StringPtrOutput)
}

// Properties of sync group schema.
type SyncGroupSchema struct {
	// Name of master sync member where the schema is from.
	MasterSyncMemberName *string `pulumi:"masterSyncMemberName"`
	// List of tables in sync group schema.
	Tables []SyncGroupSchemaTable `pulumi:"tables"`
}

// SyncGroupSchemaInput is an input type that accepts SyncGroupSchemaArgs and SyncGroupSchemaOutput values.
// You can construct a concrete instance of `SyncGroupSchemaInput` via:
//
//          SyncGroupSchemaArgs{...}
type SyncGroupSchemaInput interface {
	pulumi.Input

	ToSyncGroupSchemaOutput() SyncGroupSchemaOutput
	ToSyncGroupSchemaOutputWithContext(context.Context) SyncGroupSchemaOutput
}

// Properties of sync group schema.
type SyncGroupSchemaArgs struct {
	// Name of master sync member where the schema is from.
	MasterSyncMemberName pulumi.StringPtrInput `pulumi:"masterSyncMemberName"`
	// List of tables in sync group schema.
	Tables SyncGroupSchemaTableArrayInput `pulumi:"tables"`
}

func (SyncGroupSchemaArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SyncGroupSchema)(nil)).Elem()
}

func (i SyncGroupSchemaArgs) ToSyncGroupSchemaOutput() SyncGroupSchemaOutput {
	return i.ToSyncGroupSchemaOutputWithContext(context.Background())
}

func (i SyncGroupSchemaArgs) ToSyncGroupSchemaOutputWithContext(ctx context.Context) SyncGroupSchemaOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SyncGroupSchemaOutput)
}

func (i SyncGroupSchemaArgs) ToSyncGroupSchemaPtrOutput() SyncGroupSchemaPtrOutput {
	return i.ToSyncGroupSchemaPtrOutputWithContext(context.Background())
}

func (i SyncGroupSchemaArgs) ToSyncGroupSchemaPtrOutputWithContext(ctx context.Context) SyncGroupSchemaPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SyncGroupSchemaOutput).ToSyncGroupSchemaPtrOutputWithContext(ctx)
}

// SyncGroupSchemaPtrInput is an input type that accepts SyncGroupSchemaArgs, SyncGroupSchemaPtr and SyncGroupSchemaPtrOutput values.
// You can construct a concrete instance of `SyncGroupSchemaPtrInput` via:
//
//          SyncGroupSchemaArgs{...}
//
//  or:
//
//          nil
type SyncGroupSchemaPtrInput interface {
	pulumi.Input

	ToSyncGroupSchemaPtrOutput() SyncGroupSchemaPtrOutput
	ToSyncGroupSchemaPtrOutputWithContext(context.Context) SyncGroupSchemaPtrOutput
}

type syncGroupSchemaPtrType SyncGroupSchemaArgs

func SyncGroupSchemaPtr(v *SyncGroupSchemaArgs) SyncGroupSchemaPtrInput {
	return (*syncGroupSchemaPtrType)(v)
}

func (*syncGroupSchemaPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SyncGroupSchema)(nil)).Elem()
}

func (i *syncGroupSchemaPtrType) ToSyncGroupSchemaPtrOutput() SyncGroupSchemaPtrOutput {
	return i.ToSyncGroupSchemaPtrOutputWithContext(context.Background())
}

func (i *syncGroupSchemaPtrType) ToSyncGroupSchemaPtrOutputWithContext(ctx context.Context) SyncGroupSchemaPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SyncGroupSchemaPtrOutput)
}

// Properties of sync group schema.
type SyncGroupSchemaOutput struct{ *pulumi.OutputState }

func (SyncGroupSchemaOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SyncGroupSchema)(nil)).Elem()
}

func (o SyncGroupSchemaOutput) ToSyncGroupSchemaOutput() SyncGroupSchemaOutput {
	return o
}

func (o SyncGroupSchemaOutput) ToSyncGroupSchemaOutputWithContext(ctx context.Context) SyncGroupSchemaOutput {
	return o
}

func (o SyncGroupSchemaOutput) ToSyncGroupSchemaPtrOutput() SyncGroupSchemaPtrOutput {
	return o.ToSyncGroupSchemaPtrOutputWithContext(context.Background())
}

func (o SyncGroupSchemaOutput) ToSyncGroupSchemaPtrOutputWithContext(ctx context.Context) SyncGroupSchemaPtrOutput {
	return o.ApplyT(func(v SyncGroupSchema) *SyncGroupSchema {
		return &v
	}).(SyncGroupSchemaPtrOutput)
}

// Name of master sync member where the schema is from.
func (o SyncGroupSchemaOutput) MasterSyncMemberName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SyncGroupSchema) *string { return v.MasterSyncMemberName }).(pulumi.StringPtrOutput)
}

// List of tables in sync group schema.
func (o SyncGroupSchemaOutput) Tables() SyncGroupSchemaTableArrayOutput {
	return o.ApplyT(func(v SyncGroupSchema) []SyncGroupSchemaTable { return v.Tables }).(SyncGroupSchemaTableArrayOutput)
}

type SyncGroupSchemaPtrOutput struct{ *pulumi.OutputState }

func (SyncGroupSchemaPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SyncGroupSchema)(nil)).Elem()
}

func (o SyncGroupSchemaPtrOutput) ToSyncGroupSchemaPtrOutput() SyncGroupSchemaPtrOutput {
	return o
}

func (o SyncGroupSchemaPtrOutput) ToSyncGroupSchemaPtrOutputWithContext(ctx context.Context) SyncGroupSchemaPtrOutput {
	return o
}

func (o SyncGroupSchemaPtrOutput) Elem() SyncGroupSchemaOutput {
	return o.ApplyT(func(v *SyncGroupSchema) SyncGroupSchema { return *v }).(SyncGroupSchemaOutput)
}

// Name of master sync member where the schema is from.
func (o SyncGroupSchemaPtrOutput) MasterSyncMemberName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SyncGroupSchema) *string {
		if v == nil {
			return nil
		}
		return v.MasterSyncMemberName
	}).(pulumi.StringPtrOutput)
}

// List of tables in sync group schema.
func (o SyncGroupSchemaPtrOutput) Tables() SyncGroupSchemaTableArrayOutput {
	return o.ApplyT(func(v *SyncGroupSchema) []SyncGroupSchemaTable {
		if v == nil {
			return nil
		}
		return v.Tables
	}).(SyncGroupSchemaTableArrayOutput)
}

// Properties of sync group schema.
type SyncGroupSchemaResponse struct {
	// Name of master sync member where the schema is from.
	MasterSyncMemberName *string `pulumi:"masterSyncMemberName"`
	// List of tables in sync group schema.
	Tables []SyncGroupSchemaTableResponse `pulumi:"tables"`
}

// SyncGroupSchemaResponseInput is an input type that accepts SyncGroupSchemaResponseArgs and SyncGroupSchemaResponseOutput values.
// You can construct a concrete instance of `SyncGroupSchemaResponseInput` via:
//
//          SyncGroupSchemaResponseArgs{...}
type SyncGroupSchemaResponseInput interface {
	pulumi.Input

	ToSyncGroupSchemaResponseOutput() SyncGroupSchemaResponseOutput
	ToSyncGroupSchemaResponseOutputWithContext(context.Context) SyncGroupSchemaResponseOutput
}

// Properties of sync group schema.
type SyncGroupSchemaResponseArgs struct {
	// Name of master sync member where the schema is from.
	MasterSyncMemberName pulumi.StringPtrInput `pulumi:"masterSyncMemberName"`
	// List of tables in sync group schema.
	Tables SyncGroupSchemaTableResponseArrayInput `pulumi:"tables"`
}

func (SyncGroupSchemaResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SyncGroupSchemaResponse)(nil)).Elem()
}

func (i SyncGroupSchemaResponseArgs) ToSyncGroupSchemaResponseOutput() SyncGroupSchemaResponseOutput {
	return i.ToSyncGroupSchemaResponseOutputWithContext(context.Background())
}

func (i SyncGroupSchemaResponseArgs) ToSyncGroupSchemaResponseOutputWithContext(ctx context.Context) SyncGroupSchemaResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SyncGroupSchemaResponseOutput)
}

func (i SyncGroupSchemaResponseArgs) ToSyncGroupSchemaResponsePtrOutput() SyncGroupSchemaResponsePtrOutput {
	return i.ToSyncGroupSchemaResponsePtrOutputWithContext(context.Background())
}

func (i SyncGroupSchemaResponseArgs) ToSyncGroupSchemaResponsePtrOutputWithContext(ctx context.Context) SyncGroupSchemaResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SyncGroupSchemaResponseOutput).ToSyncGroupSchemaResponsePtrOutputWithContext(ctx)
}

// SyncGroupSchemaResponsePtrInput is an input type that accepts SyncGroupSchemaResponseArgs, SyncGroupSchemaResponsePtr and SyncGroupSchemaResponsePtrOutput values.
// You can construct a concrete instance of `SyncGroupSchemaResponsePtrInput` via:
//
//          SyncGroupSchemaResponseArgs{...}
//
//  or:
//
//          nil
type SyncGroupSchemaResponsePtrInput interface {
	pulumi.Input

	ToSyncGroupSchemaResponsePtrOutput() SyncGroupSchemaResponsePtrOutput
	ToSyncGroupSchemaResponsePtrOutputWithContext(context.Context) SyncGroupSchemaResponsePtrOutput
}

type syncGroupSchemaResponsePtrType SyncGroupSchemaResponseArgs

func SyncGroupSchemaResponsePtr(v *SyncGroupSchemaResponseArgs) SyncGroupSchemaResponsePtrInput {
	return (*syncGroupSchemaResponsePtrType)(v)
}

func (*syncGroupSchemaResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SyncGroupSchemaResponse)(nil)).Elem()
}

func (i *syncGroupSchemaResponsePtrType) ToSyncGroupSchemaResponsePtrOutput() SyncGroupSchemaResponsePtrOutput {
	return i.ToSyncGroupSchemaResponsePtrOutputWithContext(context.Background())
}

func (i *syncGroupSchemaResponsePtrType) ToSyncGroupSchemaResponsePtrOutputWithContext(ctx context.Context) SyncGroupSchemaResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SyncGroupSchemaResponsePtrOutput)
}

// Properties of sync group schema.
type SyncGroupSchemaResponseOutput struct{ *pulumi.OutputState }

func (SyncGroupSchemaResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SyncGroupSchemaResponse)(nil)).Elem()
}

func (o SyncGroupSchemaResponseOutput) ToSyncGroupSchemaResponseOutput() SyncGroupSchemaResponseOutput {
	return o
}

func (o SyncGroupSchemaResponseOutput) ToSyncGroupSchemaResponseOutputWithContext(ctx context.Context) SyncGroupSchemaResponseOutput {
	return o
}

func (o SyncGroupSchemaResponseOutput) ToSyncGroupSchemaResponsePtrOutput() SyncGroupSchemaResponsePtrOutput {
	return o.ToSyncGroupSchemaResponsePtrOutputWithContext(context.Background())
}

func (o SyncGroupSchemaResponseOutput) ToSyncGroupSchemaResponsePtrOutputWithContext(ctx context.Context) SyncGroupSchemaResponsePtrOutput {
	return o.ApplyT(func(v SyncGroupSchemaResponse) *SyncGroupSchemaResponse {
		return &v
	}).(SyncGroupSchemaResponsePtrOutput)
}

// Name of master sync member where the schema is from.
func (o SyncGroupSchemaResponseOutput) MasterSyncMemberName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SyncGroupSchemaResponse) *string { return v.MasterSyncMemberName }).(pulumi.StringPtrOutput)
}

// List of tables in sync group schema.
func (o SyncGroupSchemaResponseOutput) Tables() SyncGroupSchemaTableResponseArrayOutput {
	return o.ApplyT(func(v SyncGroupSchemaResponse) []SyncGroupSchemaTableResponse { return v.Tables }).(SyncGroupSchemaTableResponseArrayOutput)
}

type SyncGroupSchemaResponsePtrOutput struct{ *pulumi.OutputState }

func (SyncGroupSchemaResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SyncGroupSchemaResponse)(nil)).Elem()
}

func (o SyncGroupSchemaResponsePtrOutput) ToSyncGroupSchemaResponsePtrOutput() SyncGroupSchemaResponsePtrOutput {
	return o
}

func (o SyncGroupSchemaResponsePtrOutput) ToSyncGroupSchemaResponsePtrOutputWithContext(ctx context.Context) SyncGroupSchemaResponsePtrOutput {
	return o
}

func (o SyncGroupSchemaResponsePtrOutput) Elem() SyncGroupSchemaResponseOutput {
	return o.ApplyT(func(v *SyncGroupSchemaResponse) SyncGroupSchemaResponse { return *v }).(SyncGroupSchemaResponseOutput)
}

// Name of master sync member where the schema is from.
func (o SyncGroupSchemaResponsePtrOutput) MasterSyncMemberName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SyncGroupSchemaResponse) *string {
		if v == nil {
			return nil
		}
		return v.MasterSyncMemberName
	}).(pulumi.StringPtrOutput)
}

// List of tables in sync group schema.
func (o SyncGroupSchemaResponsePtrOutput) Tables() SyncGroupSchemaTableResponseArrayOutput {
	return o.ApplyT(func(v *SyncGroupSchemaResponse) []SyncGroupSchemaTableResponse {
		if v == nil {
			return nil
		}
		return v.Tables
	}).(SyncGroupSchemaTableResponseArrayOutput)
}

// Properties of table in sync group schema.
type SyncGroupSchemaTable struct {
	// List of columns in sync group schema.
	Columns []SyncGroupSchemaTableColumn `pulumi:"columns"`
	// Quoted name of sync group schema table.
	QuotedName *string `pulumi:"quotedName"`
}

// SyncGroupSchemaTableInput is an input type that accepts SyncGroupSchemaTableArgs and SyncGroupSchemaTableOutput values.
// You can construct a concrete instance of `SyncGroupSchemaTableInput` via:
//
//          SyncGroupSchemaTableArgs{...}
type SyncGroupSchemaTableInput interface {
	pulumi.Input

	ToSyncGroupSchemaTableOutput() SyncGroupSchemaTableOutput
	ToSyncGroupSchemaTableOutputWithContext(context.Context) SyncGroupSchemaTableOutput
}

// Properties of table in sync group schema.
type SyncGroupSchemaTableArgs struct {
	// List of columns in sync group schema.
	Columns SyncGroupSchemaTableColumnArrayInput `pulumi:"columns"`
	// Quoted name of sync group schema table.
	QuotedName pulumi.StringPtrInput `pulumi:"quotedName"`
}

func (SyncGroupSchemaTableArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SyncGroupSchemaTable)(nil)).Elem()
}

func (i SyncGroupSchemaTableArgs) ToSyncGroupSchemaTableOutput() SyncGroupSchemaTableOutput {
	return i.ToSyncGroupSchemaTableOutputWithContext(context.Background())
}

func (i SyncGroupSchemaTableArgs) ToSyncGroupSchemaTableOutputWithContext(ctx context.Context) SyncGroupSchemaTableOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SyncGroupSchemaTableOutput)
}

// SyncGroupSchemaTableArrayInput is an input type that accepts SyncGroupSchemaTableArray and SyncGroupSchemaTableArrayOutput values.
// You can construct a concrete instance of `SyncGroupSchemaTableArrayInput` via:
//
//          SyncGroupSchemaTableArray{ SyncGroupSchemaTableArgs{...} }
type SyncGroupSchemaTableArrayInput interface {
	pulumi.Input

	ToSyncGroupSchemaTableArrayOutput() SyncGroupSchemaTableArrayOutput
	ToSyncGroupSchemaTableArrayOutputWithContext(context.Context) SyncGroupSchemaTableArrayOutput
}

type SyncGroupSchemaTableArray []SyncGroupSchemaTableInput

func (SyncGroupSchemaTableArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SyncGroupSchemaTable)(nil)).Elem()
}

func (i SyncGroupSchemaTableArray) ToSyncGroupSchemaTableArrayOutput() SyncGroupSchemaTableArrayOutput {
	return i.ToSyncGroupSchemaTableArrayOutputWithContext(context.Background())
}

func (i SyncGroupSchemaTableArray) ToSyncGroupSchemaTableArrayOutputWithContext(ctx context.Context) SyncGroupSchemaTableArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SyncGroupSchemaTableArrayOutput)
}

// Properties of table in sync group schema.
type SyncGroupSchemaTableOutput struct{ *pulumi.OutputState }

func (SyncGroupSchemaTableOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SyncGroupSchemaTable)(nil)).Elem()
}

func (o SyncGroupSchemaTableOutput) ToSyncGroupSchemaTableOutput() SyncGroupSchemaTableOutput {
	return o
}

func (o SyncGroupSchemaTableOutput) ToSyncGroupSchemaTableOutputWithContext(ctx context.Context) SyncGroupSchemaTableOutput {
	return o
}

// List of columns in sync group schema.
func (o SyncGroupSchemaTableOutput) Columns() SyncGroupSchemaTableColumnArrayOutput {
	return o.ApplyT(func(v SyncGroupSchemaTable) []SyncGroupSchemaTableColumn { return v.Columns }).(SyncGroupSchemaTableColumnArrayOutput)
}

// Quoted name of sync group schema table.
func (o SyncGroupSchemaTableOutput) QuotedName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SyncGroupSchemaTable) *string { return v.QuotedName }).(pulumi.StringPtrOutput)
}

type SyncGroupSchemaTableArrayOutput struct{ *pulumi.OutputState }

func (SyncGroupSchemaTableArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SyncGroupSchemaTable)(nil)).Elem()
}

func (o SyncGroupSchemaTableArrayOutput) ToSyncGroupSchemaTableArrayOutput() SyncGroupSchemaTableArrayOutput {
	return o
}

func (o SyncGroupSchemaTableArrayOutput) ToSyncGroupSchemaTableArrayOutputWithContext(ctx context.Context) SyncGroupSchemaTableArrayOutput {
	return o
}

func (o SyncGroupSchemaTableArrayOutput) Index(i pulumi.IntInput) SyncGroupSchemaTableOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SyncGroupSchemaTable {
		return vs[0].([]SyncGroupSchemaTable)[vs[1].(int)]
	}).(SyncGroupSchemaTableOutput)
}

// Properties of column in sync group table.
type SyncGroupSchemaTableColumn struct {
	// Data size of the column.
	DataSize *string `pulumi:"dataSize"`
	// Data type of the column.
	DataType *string `pulumi:"dataType"`
	// Quoted name of sync group table column.
	QuotedName *string `pulumi:"quotedName"`
}

// SyncGroupSchemaTableColumnInput is an input type that accepts SyncGroupSchemaTableColumnArgs and SyncGroupSchemaTableColumnOutput values.
// You can construct a concrete instance of `SyncGroupSchemaTableColumnInput` via:
//
//          SyncGroupSchemaTableColumnArgs{...}
type SyncGroupSchemaTableColumnInput interface {
	pulumi.Input

	ToSyncGroupSchemaTableColumnOutput() SyncGroupSchemaTableColumnOutput
	ToSyncGroupSchemaTableColumnOutputWithContext(context.Context) SyncGroupSchemaTableColumnOutput
}

// Properties of column in sync group table.
type SyncGroupSchemaTableColumnArgs struct {
	// Data size of the column.
	DataSize pulumi.StringPtrInput `pulumi:"dataSize"`
	// Data type of the column.
	DataType pulumi.StringPtrInput `pulumi:"dataType"`
	// Quoted name of sync group table column.
	QuotedName pulumi.StringPtrInput `pulumi:"quotedName"`
}

func (SyncGroupSchemaTableColumnArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SyncGroupSchemaTableColumn)(nil)).Elem()
}

func (i SyncGroupSchemaTableColumnArgs) ToSyncGroupSchemaTableColumnOutput() SyncGroupSchemaTableColumnOutput {
	return i.ToSyncGroupSchemaTableColumnOutputWithContext(context.Background())
}

func (i SyncGroupSchemaTableColumnArgs) ToSyncGroupSchemaTableColumnOutputWithContext(ctx context.Context) SyncGroupSchemaTableColumnOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SyncGroupSchemaTableColumnOutput)
}

// SyncGroupSchemaTableColumnArrayInput is an input type that accepts SyncGroupSchemaTableColumnArray and SyncGroupSchemaTableColumnArrayOutput values.
// You can construct a concrete instance of `SyncGroupSchemaTableColumnArrayInput` via:
//
//          SyncGroupSchemaTableColumnArray{ SyncGroupSchemaTableColumnArgs{...} }
type SyncGroupSchemaTableColumnArrayInput interface {
	pulumi.Input

	ToSyncGroupSchemaTableColumnArrayOutput() SyncGroupSchemaTableColumnArrayOutput
	ToSyncGroupSchemaTableColumnArrayOutputWithContext(context.Context) SyncGroupSchemaTableColumnArrayOutput
}

type SyncGroupSchemaTableColumnArray []SyncGroupSchemaTableColumnInput

func (SyncGroupSchemaTableColumnArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SyncGroupSchemaTableColumn)(nil)).Elem()
}

func (i SyncGroupSchemaTableColumnArray) ToSyncGroupSchemaTableColumnArrayOutput() SyncGroupSchemaTableColumnArrayOutput {
	return i.ToSyncGroupSchemaTableColumnArrayOutputWithContext(context.Background())
}

func (i SyncGroupSchemaTableColumnArray) ToSyncGroupSchemaTableColumnArrayOutputWithContext(ctx context.Context) SyncGroupSchemaTableColumnArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SyncGroupSchemaTableColumnArrayOutput)
}

// Properties of column in sync group table.
type SyncGroupSchemaTableColumnOutput struct{ *pulumi.OutputState }

func (SyncGroupSchemaTableColumnOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SyncGroupSchemaTableColumn)(nil)).Elem()
}

func (o SyncGroupSchemaTableColumnOutput) ToSyncGroupSchemaTableColumnOutput() SyncGroupSchemaTableColumnOutput {
	return o
}

func (o SyncGroupSchemaTableColumnOutput) ToSyncGroupSchemaTableColumnOutputWithContext(ctx context.Context) SyncGroupSchemaTableColumnOutput {
	return o
}

// Data size of the column.
func (o SyncGroupSchemaTableColumnOutput) DataSize() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SyncGroupSchemaTableColumn) *string { return v.DataSize }).(pulumi.StringPtrOutput)
}

// Data type of the column.
func (o SyncGroupSchemaTableColumnOutput) DataType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SyncGroupSchemaTableColumn) *string { return v.DataType }).(pulumi.StringPtrOutput)
}

// Quoted name of sync group table column.
func (o SyncGroupSchemaTableColumnOutput) QuotedName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SyncGroupSchemaTableColumn) *string { return v.QuotedName }).(pulumi.StringPtrOutput)
}

type SyncGroupSchemaTableColumnArrayOutput struct{ *pulumi.OutputState }

func (SyncGroupSchemaTableColumnArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SyncGroupSchemaTableColumn)(nil)).Elem()
}

func (o SyncGroupSchemaTableColumnArrayOutput) ToSyncGroupSchemaTableColumnArrayOutput() SyncGroupSchemaTableColumnArrayOutput {
	return o
}

func (o SyncGroupSchemaTableColumnArrayOutput) ToSyncGroupSchemaTableColumnArrayOutputWithContext(ctx context.Context) SyncGroupSchemaTableColumnArrayOutput {
	return o
}

func (o SyncGroupSchemaTableColumnArrayOutput) Index(i pulumi.IntInput) SyncGroupSchemaTableColumnOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SyncGroupSchemaTableColumn {
		return vs[0].([]SyncGroupSchemaTableColumn)[vs[1].(int)]
	}).(SyncGroupSchemaTableColumnOutput)
}

// Properties of column in sync group table.
type SyncGroupSchemaTableColumnResponse struct {
	// Data size of the column.
	DataSize *string `pulumi:"dataSize"`
	// Data type of the column.
	DataType *string `pulumi:"dataType"`
	// Quoted name of sync group table column.
	QuotedName *string `pulumi:"quotedName"`
}

// SyncGroupSchemaTableColumnResponseInput is an input type that accepts SyncGroupSchemaTableColumnResponseArgs and SyncGroupSchemaTableColumnResponseOutput values.
// You can construct a concrete instance of `SyncGroupSchemaTableColumnResponseInput` via:
//
//          SyncGroupSchemaTableColumnResponseArgs{...}
type SyncGroupSchemaTableColumnResponseInput interface {
	pulumi.Input

	ToSyncGroupSchemaTableColumnResponseOutput() SyncGroupSchemaTableColumnResponseOutput
	ToSyncGroupSchemaTableColumnResponseOutputWithContext(context.Context) SyncGroupSchemaTableColumnResponseOutput
}

// Properties of column in sync group table.
type SyncGroupSchemaTableColumnResponseArgs struct {
	// Data size of the column.
	DataSize pulumi.StringPtrInput `pulumi:"dataSize"`
	// Data type of the column.
	DataType pulumi.StringPtrInput `pulumi:"dataType"`
	// Quoted name of sync group table column.
	QuotedName pulumi.StringPtrInput `pulumi:"quotedName"`
}

func (SyncGroupSchemaTableColumnResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SyncGroupSchemaTableColumnResponse)(nil)).Elem()
}

func (i SyncGroupSchemaTableColumnResponseArgs) ToSyncGroupSchemaTableColumnResponseOutput() SyncGroupSchemaTableColumnResponseOutput {
	return i.ToSyncGroupSchemaTableColumnResponseOutputWithContext(context.Background())
}

func (i SyncGroupSchemaTableColumnResponseArgs) ToSyncGroupSchemaTableColumnResponseOutputWithContext(ctx context.Context) SyncGroupSchemaTableColumnResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SyncGroupSchemaTableColumnResponseOutput)
}

// SyncGroupSchemaTableColumnResponseArrayInput is an input type that accepts SyncGroupSchemaTableColumnResponseArray and SyncGroupSchemaTableColumnResponseArrayOutput values.
// You can construct a concrete instance of `SyncGroupSchemaTableColumnResponseArrayInput` via:
//
//          SyncGroupSchemaTableColumnResponseArray{ SyncGroupSchemaTableColumnResponseArgs{...} }
type SyncGroupSchemaTableColumnResponseArrayInput interface {
	pulumi.Input

	ToSyncGroupSchemaTableColumnResponseArrayOutput() SyncGroupSchemaTableColumnResponseArrayOutput
	ToSyncGroupSchemaTableColumnResponseArrayOutputWithContext(context.Context) SyncGroupSchemaTableColumnResponseArrayOutput
}

type SyncGroupSchemaTableColumnResponseArray []SyncGroupSchemaTableColumnResponseInput

func (SyncGroupSchemaTableColumnResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SyncGroupSchemaTableColumnResponse)(nil)).Elem()
}

func (i SyncGroupSchemaTableColumnResponseArray) ToSyncGroupSchemaTableColumnResponseArrayOutput() SyncGroupSchemaTableColumnResponseArrayOutput {
	return i.ToSyncGroupSchemaTableColumnResponseArrayOutputWithContext(context.Background())
}

func (i SyncGroupSchemaTableColumnResponseArray) ToSyncGroupSchemaTableColumnResponseArrayOutputWithContext(ctx context.Context) SyncGroupSchemaTableColumnResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SyncGroupSchemaTableColumnResponseArrayOutput)
}

// Properties of column in sync group table.
type SyncGroupSchemaTableColumnResponseOutput struct{ *pulumi.OutputState }

func (SyncGroupSchemaTableColumnResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SyncGroupSchemaTableColumnResponse)(nil)).Elem()
}

func (o SyncGroupSchemaTableColumnResponseOutput) ToSyncGroupSchemaTableColumnResponseOutput() SyncGroupSchemaTableColumnResponseOutput {
	return o
}

func (o SyncGroupSchemaTableColumnResponseOutput) ToSyncGroupSchemaTableColumnResponseOutputWithContext(ctx context.Context) SyncGroupSchemaTableColumnResponseOutput {
	return o
}

// Data size of the column.
func (o SyncGroupSchemaTableColumnResponseOutput) DataSize() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SyncGroupSchemaTableColumnResponse) *string { return v.DataSize }).(pulumi.StringPtrOutput)
}

// Data type of the column.
func (o SyncGroupSchemaTableColumnResponseOutput) DataType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SyncGroupSchemaTableColumnResponse) *string { return v.DataType }).(pulumi.StringPtrOutput)
}

// Quoted name of sync group table column.
func (o SyncGroupSchemaTableColumnResponseOutput) QuotedName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SyncGroupSchemaTableColumnResponse) *string { return v.QuotedName }).(pulumi.StringPtrOutput)
}

type SyncGroupSchemaTableColumnResponseArrayOutput struct{ *pulumi.OutputState }

func (SyncGroupSchemaTableColumnResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SyncGroupSchemaTableColumnResponse)(nil)).Elem()
}

func (o SyncGroupSchemaTableColumnResponseArrayOutput) ToSyncGroupSchemaTableColumnResponseArrayOutput() SyncGroupSchemaTableColumnResponseArrayOutput {
	return o
}

func (o SyncGroupSchemaTableColumnResponseArrayOutput) ToSyncGroupSchemaTableColumnResponseArrayOutputWithContext(ctx context.Context) SyncGroupSchemaTableColumnResponseArrayOutput {
	return o
}

func (o SyncGroupSchemaTableColumnResponseArrayOutput) Index(i pulumi.IntInput) SyncGroupSchemaTableColumnResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SyncGroupSchemaTableColumnResponse {
		return vs[0].([]SyncGroupSchemaTableColumnResponse)[vs[1].(int)]
	}).(SyncGroupSchemaTableColumnResponseOutput)
}

// Properties of table in sync group schema.
type SyncGroupSchemaTableResponse struct {
	// List of columns in sync group schema.
	Columns []SyncGroupSchemaTableColumnResponse `pulumi:"columns"`
	// Quoted name of sync group schema table.
	QuotedName *string `pulumi:"quotedName"`
}

// SyncGroupSchemaTableResponseInput is an input type that accepts SyncGroupSchemaTableResponseArgs and SyncGroupSchemaTableResponseOutput values.
// You can construct a concrete instance of `SyncGroupSchemaTableResponseInput` via:
//
//          SyncGroupSchemaTableResponseArgs{...}
type SyncGroupSchemaTableResponseInput interface {
	pulumi.Input

	ToSyncGroupSchemaTableResponseOutput() SyncGroupSchemaTableResponseOutput
	ToSyncGroupSchemaTableResponseOutputWithContext(context.Context) SyncGroupSchemaTableResponseOutput
}

// Properties of table in sync group schema.
type SyncGroupSchemaTableResponseArgs struct {
	// List of columns in sync group schema.
	Columns SyncGroupSchemaTableColumnResponseArrayInput `pulumi:"columns"`
	// Quoted name of sync group schema table.
	QuotedName pulumi.StringPtrInput `pulumi:"quotedName"`
}

func (SyncGroupSchemaTableResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SyncGroupSchemaTableResponse)(nil)).Elem()
}

func (i SyncGroupSchemaTableResponseArgs) ToSyncGroupSchemaTableResponseOutput() SyncGroupSchemaTableResponseOutput {
	return i.ToSyncGroupSchemaTableResponseOutputWithContext(context.Background())
}

func (i SyncGroupSchemaTableResponseArgs) ToSyncGroupSchemaTableResponseOutputWithContext(ctx context.Context) SyncGroupSchemaTableResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SyncGroupSchemaTableResponseOutput)
}

// SyncGroupSchemaTableResponseArrayInput is an input type that accepts SyncGroupSchemaTableResponseArray and SyncGroupSchemaTableResponseArrayOutput values.
// You can construct a concrete instance of `SyncGroupSchemaTableResponseArrayInput` via:
//
//          SyncGroupSchemaTableResponseArray{ SyncGroupSchemaTableResponseArgs{...} }
type SyncGroupSchemaTableResponseArrayInput interface {
	pulumi.Input

	ToSyncGroupSchemaTableResponseArrayOutput() SyncGroupSchemaTableResponseArrayOutput
	ToSyncGroupSchemaTableResponseArrayOutputWithContext(context.Context) SyncGroupSchemaTableResponseArrayOutput
}

type SyncGroupSchemaTableResponseArray []SyncGroupSchemaTableResponseInput

func (SyncGroupSchemaTableResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SyncGroupSchemaTableResponse)(nil)).Elem()
}

func (i SyncGroupSchemaTableResponseArray) ToSyncGroupSchemaTableResponseArrayOutput() SyncGroupSchemaTableResponseArrayOutput {
	return i.ToSyncGroupSchemaTableResponseArrayOutputWithContext(context.Background())
}

func (i SyncGroupSchemaTableResponseArray) ToSyncGroupSchemaTableResponseArrayOutputWithContext(ctx context.Context) SyncGroupSchemaTableResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SyncGroupSchemaTableResponseArrayOutput)
}

// Properties of table in sync group schema.
type SyncGroupSchemaTableResponseOutput struct{ *pulumi.OutputState }

func (SyncGroupSchemaTableResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SyncGroupSchemaTableResponse)(nil)).Elem()
}

func (o SyncGroupSchemaTableResponseOutput) ToSyncGroupSchemaTableResponseOutput() SyncGroupSchemaTableResponseOutput {
	return o
}

func (o SyncGroupSchemaTableResponseOutput) ToSyncGroupSchemaTableResponseOutputWithContext(ctx context.Context) SyncGroupSchemaTableResponseOutput {
	return o
}

// List of columns in sync group schema.
func (o SyncGroupSchemaTableResponseOutput) Columns() SyncGroupSchemaTableColumnResponseArrayOutput {
	return o.ApplyT(func(v SyncGroupSchemaTableResponse) []SyncGroupSchemaTableColumnResponse { return v.Columns }).(SyncGroupSchemaTableColumnResponseArrayOutput)
}

// Quoted name of sync group schema table.
func (o SyncGroupSchemaTableResponseOutput) QuotedName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SyncGroupSchemaTableResponse) *string { return v.QuotedName }).(pulumi.StringPtrOutput)
}

type SyncGroupSchemaTableResponseArrayOutput struct{ *pulumi.OutputState }

func (SyncGroupSchemaTableResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SyncGroupSchemaTableResponse)(nil)).Elem()
}

func (o SyncGroupSchemaTableResponseArrayOutput) ToSyncGroupSchemaTableResponseArrayOutput() SyncGroupSchemaTableResponseArrayOutput {
	return o
}

func (o SyncGroupSchemaTableResponseArrayOutput) ToSyncGroupSchemaTableResponseArrayOutputWithContext(ctx context.Context) SyncGroupSchemaTableResponseArrayOutput {
	return o
}

func (o SyncGroupSchemaTableResponseArrayOutput) Index(i pulumi.IntInput) SyncGroupSchemaTableResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SyncGroupSchemaTableResponse {
		return vs[0].([]SyncGroupSchemaTableResponse)[vs[1].(int)]
	}).(SyncGroupSchemaTableResponseOutput)
}

func init() {
	pulumi.RegisterOutputType(FailoverGroupReadOnlyEndpointOutput{})
	pulumi.RegisterOutputType(FailoverGroupReadOnlyEndpointPtrOutput{})
	pulumi.RegisterOutputType(FailoverGroupReadOnlyEndpointResponseOutput{})
	pulumi.RegisterOutputType(FailoverGroupReadOnlyEndpointResponsePtrOutput{})
	pulumi.RegisterOutputType(FailoverGroupReadWriteEndpointOutput{})
	pulumi.RegisterOutputType(FailoverGroupReadWriteEndpointPtrOutput{})
	pulumi.RegisterOutputType(FailoverGroupReadWriteEndpointResponseOutput{})
	pulumi.RegisterOutputType(FailoverGroupReadWriteEndpointResponsePtrOutput{})
	pulumi.RegisterOutputType(PartnerInfoOutput{})
	pulumi.RegisterOutputType(PartnerInfoArrayOutput{})
	pulumi.RegisterOutputType(PartnerInfoResponseOutput{})
	pulumi.RegisterOutputType(PartnerInfoResponseArrayOutput{})
	pulumi.RegisterOutputType(ResourceIdentityOutput{})
	pulumi.RegisterOutputType(ResourceIdentityPtrOutput{})
	pulumi.RegisterOutputType(ResourceIdentityResponseOutput{})
	pulumi.RegisterOutputType(ResourceIdentityResponsePtrOutput{})
	pulumi.RegisterOutputType(SkuOutput{})
	pulumi.RegisterOutputType(SkuPtrOutput{})
	pulumi.RegisterOutputType(SkuResponseOutput{})
	pulumi.RegisterOutputType(SkuResponsePtrOutput{})
	pulumi.RegisterOutputType(SyncGroupSchemaOutput{})
	pulumi.RegisterOutputType(SyncGroupSchemaPtrOutput{})
	pulumi.RegisterOutputType(SyncGroupSchemaResponseOutput{})
	pulumi.RegisterOutputType(SyncGroupSchemaResponsePtrOutput{})
	pulumi.RegisterOutputType(SyncGroupSchemaTableOutput{})
	pulumi.RegisterOutputType(SyncGroupSchemaTableArrayOutput{})
	pulumi.RegisterOutputType(SyncGroupSchemaTableColumnOutput{})
	pulumi.RegisterOutputType(SyncGroupSchemaTableColumnArrayOutput{})
	pulumi.RegisterOutputType(SyncGroupSchemaTableColumnResponseOutput{})
	pulumi.RegisterOutputType(SyncGroupSchemaTableColumnResponseArrayOutput{})
	pulumi.RegisterOutputType(SyncGroupSchemaTableResponseOutput{})
	pulumi.RegisterOutputType(SyncGroupSchemaTableResponseArrayOutput{})
}
