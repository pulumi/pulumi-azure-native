// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v20210501preview

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// An Azure SQL DB Server Outbound Firewall Rule.
type OutboundFirewallRule struct {
	pulumi.CustomResourceState

	// Resource name.
	Name pulumi.StringOutput `pulumi:"name"`
	// The state of the outbound rule.
	ProvisioningState pulumi.StringOutput `pulumi:"provisioningState"`
	// Resource type.
	Type pulumi.StringOutput `pulumi:"type"`
}

// NewOutboundFirewallRule registers a new resource with the given unique name, arguments, and options.
func NewOutboundFirewallRule(ctx *pulumi.Context,
	name string, args *OutboundFirewallRuleArgs, opts ...pulumi.ResourceOption) (*OutboundFirewallRule, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ResourceGroupName == nil {
		return nil, errors.New("invalid value for required argument 'ResourceGroupName'")
	}
	if args.ServerName == nil {
		return nil, errors.New("invalid value for required argument 'ServerName'")
	}
	aliases := pulumi.Aliases([]pulumi.Alias{
		{
			Type: pulumi.String("azure-native:sql:OutboundFirewallRule"),
		},
		{
			Type: pulumi.String("azure-native:sql/v20210201preview:OutboundFirewallRule"),
		},
		{
			Type: pulumi.String("azure-native:sql/v20210801preview:OutboundFirewallRule"),
		},
		{
			Type: pulumi.String("azure-native:sql/v20211101:OutboundFirewallRule"),
		},
		{
			Type: pulumi.String("azure-native:sql/v20211101preview:OutboundFirewallRule"),
		},
		{
			Type: pulumi.String("azure-native:sql/v20220201preview:OutboundFirewallRule"),
		},
	})
	opts = append(opts, aliases)
	var resource OutboundFirewallRule
	err := ctx.RegisterResource("azure-native:sql/v20210501preview:OutboundFirewallRule", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetOutboundFirewallRule gets an existing OutboundFirewallRule resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetOutboundFirewallRule(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *OutboundFirewallRuleState, opts ...pulumi.ResourceOption) (*OutboundFirewallRule, error) {
	var resource OutboundFirewallRule
	err := ctx.ReadResource("azure-native:sql/v20210501preview:OutboundFirewallRule", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering OutboundFirewallRule resources.
type outboundFirewallRuleState struct {
}

type OutboundFirewallRuleState struct {
}

func (OutboundFirewallRuleState) ElementType() reflect.Type {
	return reflect.TypeOf((*outboundFirewallRuleState)(nil)).Elem()
}

type outboundFirewallRuleArgs struct {
	OutboundRuleFqdn *string `pulumi:"outboundRuleFqdn"`
	// The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
	ResourceGroupName string `pulumi:"resourceGroupName"`
	// The name of the server.
	ServerName string `pulumi:"serverName"`
}

// The set of arguments for constructing a OutboundFirewallRule resource.
type OutboundFirewallRuleArgs struct {
	OutboundRuleFqdn pulumi.StringPtrInput
	// The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
	ResourceGroupName pulumi.StringInput
	// The name of the server.
	ServerName pulumi.StringInput
}

func (OutboundFirewallRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*outboundFirewallRuleArgs)(nil)).Elem()
}

type OutboundFirewallRuleInput interface {
	pulumi.Input

	ToOutboundFirewallRuleOutput() OutboundFirewallRuleOutput
	ToOutboundFirewallRuleOutputWithContext(ctx context.Context) OutboundFirewallRuleOutput
}

func (*OutboundFirewallRule) ElementType() reflect.Type {
	return reflect.TypeOf((**OutboundFirewallRule)(nil)).Elem()
}

func (i *OutboundFirewallRule) ToOutboundFirewallRuleOutput() OutboundFirewallRuleOutput {
	return i.ToOutboundFirewallRuleOutputWithContext(context.Background())
}

func (i *OutboundFirewallRule) ToOutboundFirewallRuleOutputWithContext(ctx context.Context) OutboundFirewallRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OutboundFirewallRuleOutput)
}

type OutboundFirewallRuleOutput struct{ *pulumi.OutputState }

func (OutboundFirewallRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**OutboundFirewallRule)(nil)).Elem()
}

func (o OutboundFirewallRuleOutput) ToOutboundFirewallRuleOutput() OutboundFirewallRuleOutput {
	return o
}

func (o OutboundFirewallRuleOutput) ToOutboundFirewallRuleOutputWithContext(ctx context.Context) OutboundFirewallRuleOutput {
	return o
}

// Resource name.
func (o OutboundFirewallRuleOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *OutboundFirewallRule) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The state of the outbound rule.
func (o OutboundFirewallRuleOutput) ProvisioningState() pulumi.StringOutput {
	return o.ApplyT(func(v *OutboundFirewallRule) pulumi.StringOutput { return v.ProvisioningState }).(pulumi.StringOutput)
}

// Resource type.
func (o OutboundFirewallRuleOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *OutboundFirewallRule) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(OutboundFirewallRuleOutput{})
}
