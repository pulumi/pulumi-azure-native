// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v20210501preview

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// A database vulnerability assessment.
func LookupManagedDatabaseVulnerabilityAssessment(ctx *pulumi.Context, args *LookupManagedDatabaseVulnerabilityAssessmentArgs, opts ...pulumi.InvokeOption) (*LookupManagedDatabaseVulnerabilityAssessmentResult, error) {
	var rv LookupManagedDatabaseVulnerabilityAssessmentResult
	err := ctx.Invoke("azure-native:sql/v20210501preview:getManagedDatabaseVulnerabilityAssessment", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return rv.Defaults(), nil
}

type LookupManagedDatabaseVulnerabilityAssessmentArgs struct {
	// The name of the database for which the vulnerability assessment is defined.
	DatabaseName string `pulumi:"databaseName"`
	// The name of the managed instance.
	ManagedInstanceName string `pulumi:"managedInstanceName"`
	// The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
	ResourceGroupName string `pulumi:"resourceGroupName"`
	// The name of the vulnerability assessment.
	VulnerabilityAssessmentName string `pulumi:"vulnerabilityAssessmentName"`
}

// A database vulnerability assessment.
type LookupManagedDatabaseVulnerabilityAssessmentResult struct {
	// Resource ID.
	Id string `pulumi:"id"`
	// Resource name.
	Name string `pulumi:"name"`
	// The recurring scans settings
	RecurringScans *VulnerabilityAssessmentRecurringScansPropertiesResponse `pulumi:"recurringScans"`
	// Resource type.
	Type string `pulumi:"type"`
}

// Defaults sets the appropriate defaults for LookupManagedDatabaseVulnerabilityAssessmentResult
func (val *LookupManagedDatabaseVulnerabilityAssessmentResult) Defaults() *LookupManagedDatabaseVulnerabilityAssessmentResult {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.RecurringScans = tmp.RecurringScans.Defaults()

	return &tmp
}

func LookupManagedDatabaseVulnerabilityAssessmentOutput(ctx *pulumi.Context, args LookupManagedDatabaseVulnerabilityAssessmentOutputArgs, opts ...pulumi.InvokeOption) LookupManagedDatabaseVulnerabilityAssessmentResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupManagedDatabaseVulnerabilityAssessmentResult, error) {
			args := v.(LookupManagedDatabaseVulnerabilityAssessmentArgs)
			r, err := LookupManagedDatabaseVulnerabilityAssessment(ctx, &args, opts...)
			var s LookupManagedDatabaseVulnerabilityAssessmentResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupManagedDatabaseVulnerabilityAssessmentResultOutput)
}

type LookupManagedDatabaseVulnerabilityAssessmentOutputArgs struct {
	// The name of the database for which the vulnerability assessment is defined.
	DatabaseName pulumi.StringInput `pulumi:"databaseName"`
	// The name of the managed instance.
	ManagedInstanceName pulumi.StringInput `pulumi:"managedInstanceName"`
	// The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
	ResourceGroupName pulumi.StringInput `pulumi:"resourceGroupName"`
	// The name of the vulnerability assessment.
	VulnerabilityAssessmentName pulumi.StringInput `pulumi:"vulnerabilityAssessmentName"`
}

func (LookupManagedDatabaseVulnerabilityAssessmentOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupManagedDatabaseVulnerabilityAssessmentArgs)(nil)).Elem()
}

// A database vulnerability assessment.
type LookupManagedDatabaseVulnerabilityAssessmentResultOutput struct{ *pulumi.OutputState }

func (LookupManagedDatabaseVulnerabilityAssessmentResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupManagedDatabaseVulnerabilityAssessmentResult)(nil)).Elem()
}

func (o LookupManagedDatabaseVulnerabilityAssessmentResultOutput) ToLookupManagedDatabaseVulnerabilityAssessmentResultOutput() LookupManagedDatabaseVulnerabilityAssessmentResultOutput {
	return o
}

func (o LookupManagedDatabaseVulnerabilityAssessmentResultOutput) ToLookupManagedDatabaseVulnerabilityAssessmentResultOutputWithContext(ctx context.Context) LookupManagedDatabaseVulnerabilityAssessmentResultOutput {
	return o
}

// Resource ID.
func (o LookupManagedDatabaseVulnerabilityAssessmentResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupManagedDatabaseVulnerabilityAssessmentResult) string { return v.Id }).(pulumi.StringOutput)
}

// Resource name.
func (o LookupManagedDatabaseVulnerabilityAssessmentResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupManagedDatabaseVulnerabilityAssessmentResult) string { return v.Name }).(pulumi.StringOutput)
}

// The recurring scans settings
func (o LookupManagedDatabaseVulnerabilityAssessmentResultOutput) RecurringScans() VulnerabilityAssessmentRecurringScansPropertiesResponsePtrOutput {
	return o.ApplyT(func(v LookupManagedDatabaseVulnerabilityAssessmentResult) *VulnerabilityAssessmentRecurringScansPropertiesResponse {
		return v.RecurringScans
	}).(VulnerabilityAssessmentRecurringScansPropertiesResponsePtrOutput)
}

// Resource type.
func (o LookupManagedDatabaseVulnerabilityAssessmentResultOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v LookupManagedDatabaseVulnerabilityAssessmentResult) string { return v.Type }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupManagedDatabaseVulnerabilityAssessmentResultOutput{})
}
