


package v20220501preview

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func LookupManagedDatabaseVulnerabilityAssessment(ctx *pulumi.Context, args *LookupManagedDatabaseVulnerabilityAssessmentArgs, opts ...pulumi.InvokeOption) (*LookupManagedDatabaseVulnerabilityAssessmentResult, error) {
	var rv LookupManagedDatabaseVulnerabilityAssessmentResult
	err := ctx.Invoke("azure-native:sql/v20220501preview:getManagedDatabaseVulnerabilityAssessment", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return rv.Defaults(), nil
}

type LookupManagedDatabaseVulnerabilityAssessmentArgs struct {
	DatabaseName                string `pulumi:"databaseName"`
	ManagedInstanceName         string `pulumi:"managedInstanceName"`
	ResourceGroupName           string `pulumi:"resourceGroupName"`
	VulnerabilityAssessmentName string `pulumi:"vulnerabilityAssessmentName"`
}


type LookupManagedDatabaseVulnerabilityAssessmentResult struct {
	Id             string                                                   `pulumi:"id"`
	Name           string                                                   `pulumi:"name"`
	RecurringScans *VulnerabilityAssessmentRecurringScansPropertiesResponse `pulumi:"recurringScans"`
	Type           string                                                   `pulumi:"type"`
}


func (val *LookupManagedDatabaseVulnerabilityAssessmentResult) Defaults() *LookupManagedDatabaseVulnerabilityAssessmentResult {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.RecurringScans = tmp.RecurringScans.Defaults()

	return &tmp
}

func LookupManagedDatabaseVulnerabilityAssessmentOutput(ctx *pulumi.Context, args LookupManagedDatabaseVulnerabilityAssessmentOutputArgs, opts ...pulumi.InvokeOption) LookupManagedDatabaseVulnerabilityAssessmentResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupManagedDatabaseVulnerabilityAssessmentResult, error) {
			args := v.(LookupManagedDatabaseVulnerabilityAssessmentArgs)
			r, err := LookupManagedDatabaseVulnerabilityAssessment(ctx, &args, opts...)
			var s LookupManagedDatabaseVulnerabilityAssessmentResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupManagedDatabaseVulnerabilityAssessmentResultOutput)
}

type LookupManagedDatabaseVulnerabilityAssessmentOutputArgs struct {
	DatabaseName                pulumi.StringInput `pulumi:"databaseName"`
	ManagedInstanceName         pulumi.StringInput `pulumi:"managedInstanceName"`
	ResourceGroupName           pulumi.StringInput `pulumi:"resourceGroupName"`
	VulnerabilityAssessmentName pulumi.StringInput `pulumi:"vulnerabilityAssessmentName"`
}

func (LookupManagedDatabaseVulnerabilityAssessmentOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupManagedDatabaseVulnerabilityAssessmentArgs)(nil)).Elem()
}


type LookupManagedDatabaseVulnerabilityAssessmentResultOutput struct{ *pulumi.OutputState }

func (LookupManagedDatabaseVulnerabilityAssessmentResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupManagedDatabaseVulnerabilityAssessmentResult)(nil)).Elem()
}

func (o LookupManagedDatabaseVulnerabilityAssessmentResultOutput) ToLookupManagedDatabaseVulnerabilityAssessmentResultOutput() LookupManagedDatabaseVulnerabilityAssessmentResultOutput {
	return o
}

func (o LookupManagedDatabaseVulnerabilityAssessmentResultOutput) ToLookupManagedDatabaseVulnerabilityAssessmentResultOutputWithContext(ctx context.Context) LookupManagedDatabaseVulnerabilityAssessmentResultOutput {
	return o
}

func (o LookupManagedDatabaseVulnerabilityAssessmentResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupManagedDatabaseVulnerabilityAssessmentResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o LookupManagedDatabaseVulnerabilityAssessmentResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupManagedDatabaseVulnerabilityAssessmentResult) string { return v.Name }).(pulumi.StringOutput)
}

func (o LookupManagedDatabaseVulnerabilityAssessmentResultOutput) RecurringScans() VulnerabilityAssessmentRecurringScansPropertiesResponsePtrOutput {
	return o.ApplyT(func(v LookupManagedDatabaseVulnerabilityAssessmentResult) *VulnerabilityAssessmentRecurringScansPropertiesResponse {
		return v.RecurringScans
	}).(VulnerabilityAssessmentRecurringScansPropertiesResponsePtrOutput)
}

func (o LookupManagedDatabaseVulnerabilityAssessmentResultOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v LookupManagedDatabaseVulnerabilityAssessmentResult) string { return v.Type }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupManagedDatabaseVulnerabilityAssessmentResultOutput{})
}
