// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v20200801preview

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// Hybrid link between box and Sql Managed Instance.
type HybridLink struct {
	pulumi.CustomResourceState

	// The distributed availability group id
	DistributedAvailabilityGroupId pulumi.StringOutput `pulumi:"distributedAvailabilityGroupId"`
	// Resource name.
	Name pulumi.StringOutput `pulumi:"name"`
	// The primary availability group name
	PrimaryAvailabilityGroupName pulumi.StringPtrOutput `pulumi:"primaryAvailabilityGroupName"`
	// The replication mode of hybrid link. Parameter will be ignored during link creation.
	ReplicationMode pulumi.StringPtrOutput `pulumi:"replicationMode"`
	// The secondary availability group name
	SecondaryAvailabilityGroupName pulumi.StringPtrOutput `pulumi:"secondaryAvailabilityGroupName"`
	// The source endpoint
	SourceEndpoint pulumi.StringPtrOutput `pulumi:"sourceEndpoint"`
	// The source replica id
	SourceReplicaId pulumi.StringOutput `pulumi:"sourceReplicaId"`
	// The name of the target database
	TargetDatabase pulumi.StringPtrOutput `pulumi:"targetDatabase"`
	// The target replica id
	TargetReplicaId pulumi.StringOutput `pulumi:"targetReplicaId"`
	// Resource type.
	Type pulumi.StringOutput `pulumi:"type"`
}

// NewHybridLink registers a new resource with the given unique name, arguments, and options.
func NewHybridLink(ctx *pulumi.Context,
	name string, args *HybridLinkArgs, opts ...pulumi.ResourceOption) (*HybridLink, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DistributedAvailabilityGroupName == nil {
		return nil, errors.New("invalid value for required argument 'DistributedAvailabilityGroupName'")
	}
	if args.ManagedInstanceName == nil {
		return nil, errors.New("invalid value for required argument 'ManagedInstanceName'")
	}
	if args.ResourceGroupName == nil {
		return nil, errors.New("invalid value for required argument 'ResourceGroupName'")
	}
	aliases := pulumi.Aliases([]pulumi.Alias{
		{
			Type: pulumi.String("azure-nextgen:sql/v20200202preview:HybridLink"),
		},
	})
	opts = append(opts, aliases)
	var resource HybridLink
	err := ctx.RegisterResource("azure-nextgen:sql/v20200801preview:HybridLink", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetHybridLink gets an existing HybridLink resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetHybridLink(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *HybridLinkState, opts ...pulumi.ResourceOption) (*HybridLink, error) {
	var resource HybridLink
	err := ctx.ReadResource("azure-nextgen:sql/v20200801preview:HybridLink", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering HybridLink resources.
type hybridLinkState struct {
	// The distributed availability group id
	DistributedAvailabilityGroupId *string `pulumi:"distributedAvailabilityGroupId"`
	// Resource name.
	Name *string `pulumi:"name"`
	// The primary availability group name
	PrimaryAvailabilityGroupName *string `pulumi:"primaryAvailabilityGroupName"`
	// The replication mode of hybrid link. Parameter will be ignored during link creation.
	ReplicationMode *string `pulumi:"replicationMode"`
	// The secondary availability group name
	SecondaryAvailabilityGroupName *string `pulumi:"secondaryAvailabilityGroupName"`
	// The source endpoint
	SourceEndpoint *string `pulumi:"sourceEndpoint"`
	// The source replica id
	SourceReplicaId *string `pulumi:"sourceReplicaId"`
	// The name of the target database
	TargetDatabase *string `pulumi:"targetDatabase"`
	// The target replica id
	TargetReplicaId *string `pulumi:"targetReplicaId"`
	// Resource type.
	Type *string `pulumi:"type"`
}

type HybridLinkState struct {
	// The distributed availability group id
	DistributedAvailabilityGroupId pulumi.StringPtrInput
	// Resource name.
	Name pulumi.StringPtrInput
	// The primary availability group name
	PrimaryAvailabilityGroupName pulumi.StringPtrInput
	// The replication mode of hybrid link. Parameter will be ignored during link creation.
	ReplicationMode pulumi.StringPtrInput
	// The secondary availability group name
	SecondaryAvailabilityGroupName pulumi.StringPtrInput
	// The source endpoint
	SourceEndpoint pulumi.StringPtrInput
	// The source replica id
	SourceReplicaId pulumi.StringPtrInput
	// The name of the target database
	TargetDatabase pulumi.StringPtrInput
	// The target replica id
	TargetReplicaId pulumi.StringPtrInput
	// Resource type.
	Type pulumi.StringPtrInput
}

func (HybridLinkState) ElementType() reflect.Type {
	return reflect.TypeOf((*hybridLinkState)(nil)).Elem()
}

type hybridLinkArgs struct {
	// The distributed availability group name.
	DistributedAvailabilityGroupName string `pulumi:"distributedAvailabilityGroupName"`
	// The name of the managed instance.
	ManagedInstanceName string `pulumi:"managedInstanceName"`
	// The primary availability group name
	PrimaryAvailabilityGroupName *string `pulumi:"primaryAvailabilityGroupName"`
	// The replication mode of hybrid link. Parameter will be ignored during link creation.
	ReplicationMode *string `pulumi:"replicationMode"`
	// The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
	ResourceGroupName string `pulumi:"resourceGroupName"`
	// The secondary availability group name
	SecondaryAvailabilityGroupName *string `pulumi:"secondaryAvailabilityGroupName"`
	// The source endpoint
	SourceEndpoint *string `pulumi:"sourceEndpoint"`
	// The name of the target database
	TargetDatabase *string `pulumi:"targetDatabase"`
}

// The set of arguments for constructing a HybridLink resource.
type HybridLinkArgs struct {
	// The distributed availability group name.
	DistributedAvailabilityGroupName pulumi.StringInput
	// The name of the managed instance.
	ManagedInstanceName pulumi.StringInput
	// The primary availability group name
	PrimaryAvailabilityGroupName pulumi.StringPtrInput
	// The replication mode of hybrid link. Parameter will be ignored during link creation.
	ReplicationMode pulumi.StringPtrInput
	// The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
	ResourceGroupName pulumi.StringInput
	// The secondary availability group name
	SecondaryAvailabilityGroupName pulumi.StringPtrInput
	// The source endpoint
	SourceEndpoint pulumi.StringPtrInput
	// The name of the target database
	TargetDatabase pulumi.StringPtrInput
}

func (HybridLinkArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*hybridLinkArgs)(nil)).Elem()
}

type HybridLinkInput interface {
	pulumi.Input

	ToHybridLinkOutput() HybridLinkOutput
	ToHybridLinkOutputWithContext(ctx context.Context) HybridLinkOutput
}

func (*HybridLink) ElementType() reflect.Type {
	return reflect.TypeOf((*HybridLink)(nil))
}

func (i *HybridLink) ToHybridLinkOutput() HybridLinkOutput {
	return i.ToHybridLinkOutputWithContext(context.Background())
}

func (i *HybridLink) ToHybridLinkOutputWithContext(ctx context.Context) HybridLinkOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HybridLinkOutput)
}

type HybridLinkOutput struct {
	*pulumi.OutputState
}

func (HybridLinkOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HybridLink)(nil))
}

func (o HybridLinkOutput) ToHybridLinkOutput() HybridLinkOutput {
	return o
}

func (o HybridLinkOutput) ToHybridLinkOutputWithContext(ctx context.Context) HybridLinkOutput {
	return o
}

func init() {
	pulumi.RegisterOutputType(HybridLinkOutput{})
}
