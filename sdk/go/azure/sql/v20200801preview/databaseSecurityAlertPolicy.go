// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v20200801preview

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// A database security alert policy.
type DatabaseSecurityAlertPolicy struct {
	pulumi.CustomResourceState

	// Specifies the UTC creation time of the policy.
	CreationTime pulumi.StringOutput `pulumi:"creationTime"`
	// Resource name.
	Name pulumi.StringOutput `pulumi:"name"`
	// Specifies the state of the policy, whether it is enabled or disabled or a policy has not been applied yet on the specific database.
	State pulumi.StringOutput `pulumi:"state"`
	// Resource type.
	Type pulumi.StringOutput `pulumi:"type"`
}

// NewDatabaseSecurityAlertPolicy registers a new resource with the given unique name, arguments, and options.
func NewDatabaseSecurityAlertPolicy(ctx *pulumi.Context,
	name string, args *DatabaseSecurityAlertPolicyArgs, opts ...pulumi.ResourceOption) (*DatabaseSecurityAlertPolicy, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DatabaseName == nil {
		return nil, errors.New("invalid value for required argument 'DatabaseName'")
	}
	if args.ResourceGroupName == nil {
		return nil, errors.New("invalid value for required argument 'ResourceGroupName'")
	}
	if args.SecurityAlertPolicyName == nil {
		return nil, errors.New("invalid value for required argument 'SecurityAlertPolicyName'")
	}
	if args.ServerName == nil {
		return nil, errors.New("invalid value for required argument 'ServerName'")
	}
	aliases := pulumi.Aliases([]pulumi.Alias{
		{
			Type: pulumi.String("azure-nextgen:sql/latest:DatabaseSecurityAlertPolicy"),
		},
		{
			Type: pulumi.String("azure-nextgen:sql/v20140401:DatabaseSecurityAlertPolicy"),
		},
		{
			Type: pulumi.String("azure-nextgen:sql/v20180601preview:DatabaseSecurityAlertPolicy"),
		},
		{
			Type: pulumi.String("azure-nextgen:sql/v20200202preview:DatabaseSecurityAlertPolicy"),
		},
	})
	opts = append(opts, aliases)
	var resource DatabaseSecurityAlertPolicy
	err := ctx.RegisterResource("azure-nextgen:sql/v20200801preview:DatabaseSecurityAlertPolicy", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDatabaseSecurityAlertPolicy gets an existing DatabaseSecurityAlertPolicy resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDatabaseSecurityAlertPolicy(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DatabaseSecurityAlertPolicyState, opts ...pulumi.ResourceOption) (*DatabaseSecurityAlertPolicy, error) {
	var resource DatabaseSecurityAlertPolicy
	err := ctx.ReadResource("azure-nextgen:sql/v20200801preview:DatabaseSecurityAlertPolicy", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DatabaseSecurityAlertPolicy resources.
type databaseSecurityAlertPolicyState struct {
	// Specifies the UTC creation time of the policy.
	CreationTime *string `pulumi:"creationTime"`
	// Resource name.
	Name *string `pulumi:"name"`
	// Specifies the state of the policy, whether it is enabled or disabled or a policy has not been applied yet on the specific database.
	State *string `pulumi:"state"`
	// Resource type.
	Type *string `pulumi:"type"`
}

type DatabaseSecurityAlertPolicyState struct {
	// Specifies the UTC creation time of the policy.
	CreationTime pulumi.StringPtrInput
	// Resource name.
	Name pulumi.StringPtrInput
	// Specifies the state of the policy, whether it is enabled or disabled or a policy has not been applied yet on the specific database.
	State pulumi.StringPtrInput
	// Resource type.
	Type pulumi.StringPtrInput
}

func (DatabaseSecurityAlertPolicyState) ElementType() reflect.Type {
	return reflect.TypeOf((*databaseSecurityAlertPolicyState)(nil)).Elem()
}

type databaseSecurityAlertPolicyArgs struct {
	// The name of the  database for which the security alert policy is defined.
	DatabaseName string `pulumi:"databaseName"`
	// The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
	ResourceGroupName string `pulumi:"resourceGroupName"`
	// The name of the security alert policy.
	SecurityAlertPolicyName string `pulumi:"securityAlertPolicyName"`
	// The name of the  server.
	ServerName string `pulumi:"serverName"`
	// Specifies the state of the policy, whether it is enabled or disabled or a policy has not been applied yet on the specific database.
	State string `pulumi:"state"`
}

// The set of arguments for constructing a DatabaseSecurityAlertPolicy resource.
type DatabaseSecurityAlertPolicyArgs struct {
	// The name of the  database for which the security alert policy is defined.
	DatabaseName pulumi.StringInput
	// The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
	ResourceGroupName pulumi.StringInput
	// The name of the security alert policy.
	SecurityAlertPolicyName pulumi.StringInput
	// The name of the  server.
	ServerName pulumi.StringInput
	// Specifies the state of the policy, whether it is enabled or disabled or a policy has not been applied yet on the specific database.
	State SecurityAlertsPolicyState
}

func (DatabaseSecurityAlertPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*databaseSecurityAlertPolicyArgs)(nil)).Elem()
}

type DatabaseSecurityAlertPolicyInput interface {
	pulumi.Input

	ToDatabaseSecurityAlertPolicyOutput() DatabaseSecurityAlertPolicyOutput
	ToDatabaseSecurityAlertPolicyOutputWithContext(ctx context.Context) DatabaseSecurityAlertPolicyOutput
}

func (*DatabaseSecurityAlertPolicy) ElementType() reflect.Type {
	return reflect.TypeOf((*DatabaseSecurityAlertPolicy)(nil))
}

func (i *DatabaseSecurityAlertPolicy) ToDatabaseSecurityAlertPolicyOutput() DatabaseSecurityAlertPolicyOutput {
	return i.ToDatabaseSecurityAlertPolicyOutputWithContext(context.Background())
}

func (i *DatabaseSecurityAlertPolicy) ToDatabaseSecurityAlertPolicyOutputWithContext(ctx context.Context) DatabaseSecurityAlertPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatabaseSecurityAlertPolicyOutput)
}

type DatabaseSecurityAlertPolicyOutput struct {
	*pulumi.OutputState
}

func (DatabaseSecurityAlertPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DatabaseSecurityAlertPolicy)(nil))
}

func (o DatabaseSecurityAlertPolicyOutput) ToDatabaseSecurityAlertPolicyOutput() DatabaseSecurityAlertPolicyOutput {
	return o
}

func (o DatabaseSecurityAlertPolicyOutput) ToDatabaseSecurityAlertPolicyOutputWithContext(ctx context.Context) DatabaseSecurityAlertPolicyOutput {
	return o
}

func init() {
	pulumi.RegisterOutputType(DatabaseSecurityAlertPolicyOutput{})
}
