// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v20200801preview

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// A database vulnerability assessment.
type DatabaseVulnerabilityAssessment struct {
	pulumi.CustomResourceState

	// Resource name.
	Name pulumi.StringOutput `pulumi:"name"`
	// The recurring scans settings
	RecurringScans VulnerabilityAssessmentRecurringScansPropertiesResponsePtrOutput `pulumi:"recurringScans"`
	// Specifies the identifier key of the storage account for vulnerability assessment scan results. If 'StorageContainerSasKey' isn't specified, storageAccountAccessKey is required.
	StorageAccountAccessKey pulumi.StringPtrOutput `pulumi:"storageAccountAccessKey"`
	// A blob storage container path to hold the scan results (e.g. https://myStorage.blob.core.windows.net/VaScans/).  It is required if server level vulnerability assessment policy doesn't set
	StorageContainerPath pulumi.StringPtrOutput `pulumi:"storageContainerPath"`
	// A shared access signature (SAS Key) that has write access to the blob container specified in 'storageContainerPath' parameter. If 'storageAccountAccessKey' isn't specified, StorageContainerSasKey is required.
	StorageContainerSasKey pulumi.StringPtrOutput `pulumi:"storageContainerSasKey"`
	// Resource type.
	Type pulumi.StringOutput `pulumi:"type"`
}

// NewDatabaseVulnerabilityAssessment registers a new resource with the given unique name, arguments, and options.
func NewDatabaseVulnerabilityAssessment(ctx *pulumi.Context,
	name string, args *DatabaseVulnerabilityAssessmentArgs, opts ...pulumi.ResourceOption) (*DatabaseVulnerabilityAssessment, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DatabaseName == nil {
		return nil, errors.New("invalid value for required argument 'DatabaseName'")
	}
	if args.ResourceGroupName == nil {
		return nil, errors.New("invalid value for required argument 'ResourceGroupName'")
	}
	if args.ServerName == nil {
		return nil, errors.New("invalid value for required argument 'ServerName'")
	}
	if args.VulnerabilityAssessmentName == nil {
		return nil, errors.New("invalid value for required argument 'VulnerabilityAssessmentName'")
	}
	aliases := pulumi.Aliases([]pulumi.Alias{
		{
			Type: pulumi.String("azure-nextgen:sql/v20170301preview:DatabaseVulnerabilityAssessment"),
		},
	})
	opts = append(opts, aliases)
	var resource DatabaseVulnerabilityAssessment
	err := ctx.RegisterResource("azure-nextgen:sql/v20200801preview:DatabaseVulnerabilityAssessment", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDatabaseVulnerabilityAssessment gets an existing DatabaseVulnerabilityAssessment resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDatabaseVulnerabilityAssessment(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DatabaseVulnerabilityAssessmentState, opts ...pulumi.ResourceOption) (*DatabaseVulnerabilityAssessment, error) {
	var resource DatabaseVulnerabilityAssessment
	err := ctx.ReadResource("azure-nextgen:sql/v20200801preview:DatabaseVulnerabilityAssessment", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DatabaseVulnerabilityAssessment resources.
type databaseVulnerabilityAssessmentState struct {
	// Resource name.
	Name *string `pulumi:"name"`
	// The recurring scans settings
	RecurringScans *VulnerabilityAssessmentRecurringScansPropertiesResponse `pulumi:"recurringScans"`
	// Specifies the identifier key of the storage account for vulnerability assessment scan results. If 'StorageContainerSasKey' isn't specified, storageAccountAccessKey is required.
	StorageAccountAccessKey *string `pulumi:"storageAccountAccessKey"`
	// A blob storage container path to hold the scan results (e.g. https://myStorage.blob.core.windows.net/VaScans/).  It is required if server level vulnerability assessment policy doesn't set
	StorageContainerPath *string `pulumi:"storageContainerPath"`
	// A shared access signature (SAS Key) that has write access to the blob container specified in 'storageContainerPath' parameter. If 'storageAccountAccessKey' isn't specified, StorageContainerSasKey is required.
	StorageContainerSasKey *string `pulumi:"storageContainerSasKey"`
	// Resource type.
	Type *string `pulumi:"type"`
}

type DatabaseVulnerabilityAssessmentState struct {
	// Resource name.
	Name pulumi.StringPtrInput
	// The recurring scans settings
	RecurringScans VulnerabilityAssessmentRecurringScansPropertiesResponsePtrInput
	// Specifies the identifier key of the storage account for vulnerability assessment scan results. If 'StorageContainerSasKey' isn't specified, storageAccountAccessKey is required.
	StorageAccountAccessKey pulumi.StringPtrInput
	// A blob storage container path to hold the scan results (e.g. https://myStorage.blob.core.windows.net/VaScans/).  It is required if server level vulnerability assessment policy doesn't set
	StorageContainerPath pulumi.StringPtrInput
	// A shared access signature (SAS Key) that has write access to the blob container specified in 'storageContainerPath' parameter. If 'storageAccountAccessKey' isn't specified, StorageContainerSasKey is required.
	StorageContainerSasKey pulumi.StringPtrInput
	// Resource type.
	Type pulumi.StringPtrInput
}

func (DatabaseVulnerabilityAssessmentState) ElementType() reflect.Type {
	return reflect.TypeOf((*databaseVulnerabilityAssessmentState)(nil)).Elem()
}

type databaseVulnerabilityAssessmentArgs struct {
	// The name of the database for which the vulnerability assessment is defined.
	DatabaseName string `pulumi:"databaseName"`
	// The recurring scans settings
	RecurringScans *VulnerabilityAssessmentRecurringScansProperties `pulumi:"recurringScans"`
	// The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
	ResourceGroupName string `pulumi:"resourceGroupName"`
	// The name of the server.
	ServerName string `pulumi:"serverName"`
	// Specifies the identifier key of the storage account for vulnerability assessment scan results. If 'StorageContainerSasKey' isn't specified, storageAccountAccessKey is required.
	StorageAccountAccessKey *string `pulumi:"storageAccountAccessKey"`
	// A blob storage container path to hold the scan results (e.g. https://myStorage.blob.core.windows.net/VaScans/).  It is required if server level vulnerability assessment policy doesn't set
	StorageContainerPath *string `pulumi:"storageContainerPath"`
	// A shared access signature (SAS Key) that has write access to the blob container specified in 'storageContainerPath' parameter. If 'storageAccountAccessKey' isn't specified, StorageContainerSasKey is required.
	StorageContainerSasKey *string `pulumi:"storageContainerSasKey"`
	// The name of the vulnerability assessment.
	VulnerabilityAssessmentName string `pulumi:"vulnerabilityAssessmentName"`
}

// The set of arguments for constructing a DatabaseVulnerabilityAssessment resource.
type DatabaseVulnerabilityAssessmentArgs struct {
	// The name of the database for which the vulnerability assessment is defined.
	DatabaseName pulumi.StringInput
	// The recurring scans settings
	RecurringScans VulnerabilityAssessmentRecurringScansPropertiesPtrInput
	// The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
	ResourceGroupName pulumi.StringInput
	// The name of the server.
	ServerName pulumi.StringInput
	// Specifies the identifier key of the storage account for vulnerability assessment scan results. If 'StorageContainerSasKey' isn't specified, storageAccountAccessKey is required.
	StorageAccountAccessKey pulumi.StringPtrInput
	// A blob storage container path to hold the scan results (e.g. https://myStorage.blob.core.windows.net/VaScans/).  It is required if server level vulnerability assessment policy doesn't set
	StorageContainerPath pulumi.StringPtrInput
	// A shared access signature (SAS Key) that has write access to the blob container specified in 'storageContainerPath' parameter. If 'storageAccountAccessKey' isn't specified, StorageContainerSasKey is required.
	StorageContainerSasKey pulumi.StringPtrInput
	// The name of the vulnerability assessment.
	VulnerabilityAssessmentName pulumi.StringInput
}

func (DatabaseVulnerabilityAssessmentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*databaseVulnerabilityAssessmentArgs)(nil)).Elem()
}

type DatabaseVulnerabilityAssessmentInput interface {
	pulumi.Input

	ToDatabaseVulnerabilityAssessmentOutput() DatabaseVulnerabilityAssessmentOutput
	ToDatabaseVulnerabilityAssessmentOutputWithContext(ctx context.Context) DatabaseVulnerabilityAssessmentOutput
}

func (DatabaseVulnerabilityAssessment) ElementType() reflect.Type {
	return reflect.TypeOf((*DatabaseVulnerabilityAssessment)(nil)).Elem()
}

func (i DatabaseVulnerabilityAssessment) ToDatabaseVulnerabilityAssessmentOutput() DatabaseVulnerabilityAssessmentOutput {
	return i.ToDatabaseVulnerabilityAssessmentOutputWithContext(context.Background())
}

func (i DatabaseVulnerabilityAssessment) ToDatabaseVulnerabilityAssessmentOutputWithContext(ctx context.Context) DatabaseVulnerabilityAssessmentOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatabaseVulnerabilityAssessmentOutput)
}

type DatabaseVulnerabilityAssessmentOutput struct {
	*pulumi.OutputState
}

func (DatabaseVulnerabilityAssessmentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DatabaseVulnerabilityAssessmentOutput)(nil)).Elem()
}

func (o DatabaseVulnerabilityAssessmentOutput) ToDatabaseVulnerabilityAssessmentOutput() DatabaseVulnerabilityAssessmentOutput {
	return o
}

func (o DatabaseVulnerabilityAssessmentOutput) ToDatabaseVulnerabilityAssessmentOutputWithContext(ctx context.Context) DatabaseVulnerabilityAssessmentOutput {
	return o
}

func init() {
	pulumi.RegisterOutputType(DatabaseVulnerabilityAssessmentOutput{})
}
