// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v20180901preview

import (
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// The EngagementFabric channel
type Channel struct {
	pulumi.CustomResourceState

	// The functions to be enabled for the channel
	ChannelFunctions pulumi.StringArrayOutput `pulumi:"channelFunctions"`
	// The channel type
	ChannelType pulumi.StringOutput `pulumi:"channelType"`
	// The channel credentials
	Credentials pulumi.StringMapOutput `pulumi:"credentials"`
	// The name of the resource
	Name pulumi.StringOutput `pulumi:"name"`
	// The fully qualified type of the resource
	Type pulumi.StringOutput `pulumi:"type"`
}

// NewChannel registers a new resource with the given unique name, arguments, and options.
func NewChannel(ctx *pulumi.Context,
	name string, args *ChannelArgs, opts ...pulumi.ResourceOption) (*Channel, error) {
	if args == nil || args.AccountName == nil {
		return nil, errors.New("missing required argument 'AccountName'")
	}
	if args == nil || args.ChannelName == nil {
		return nil, errors.New("missing required argument 'ChannelName'")
	}
	if args == nil || args.ChannelType == nil {
		return nil, errors.New("missing required argument 'ChannelType'")
	}
	if args == nil || args.ResourceGroupName == nil {
		return nil, errors.New("missing required argument 'ResourceGroupName'")
	}
	if args == nil {
		args = &ChannelArgs{}
	}
	var resource Channel
	err := ctx.RegisterResource("azure-nextgen:engagementfabric/v20180901preview:Channel", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetChannel gets an existing Channel resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetChannel(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ChannelState, opts ...pulumi.ResourceOption) (*Channel, error) {
	var resource Channel
	err := ctx.ReadResource("azure-nextgen:engagementfabric/v20180901preview:Channel", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Channel resources.
type channelState struct {
	// The functions to be enabled for the channel
	ChannelFunctions []string `pulumi:"channelFunctions"`
	// The channel type
	ChannelType *string `pulumi:"channelType"`
	// The channel credentials
	Credentials map[string]string `pulumi:"credentials"`
	// The name of the resource
	Name *string `pulumi:"name"`
	// The fully qualified type of the resource
	Type *string `pulumi:"type"`
}

type ChannelState struct {
	// The functions to be enabled for the channel
	ChannelFunctions pulumi.StringArrayInput
	// The channel type
	ChannelType pulumi.StringPtrInput
	// The channel credentials
	Credentials pulumi.StringMapInput
	// The name of the resource
	Name pulumi.StringPtrInput
	// The fully qualified type of the resource
	Type pulumi.StringPtrInput
}

func (ChannelState) ElementType() reflect.Type {
	return reflect.TypeOf((*channelState)(nil)).Elem()
}

type channelArgs struct {
	// Account Name
	AccountName string `pulumi:"accountName"`
	// The functions to be enabled for the channel
	ChannelFunctions []string `pulumi:"channelFunctions"`
	// Channel Name
	ChannelName string `pulumi:"channelName"`
	// The channel type
	ChannelType string `pulumi:"channelType"`
	// The channel credentials
	Credentials map[string]string `pulumi:"credentials"`
	// Resource Group Name
	ResourceGroupName string `pulumi:"resourceGroupName"`
}

// The set of arguments for constructing a Channel resource.
type ChannelArgs struct {
	// Account Name
	AccountName pulumi.StringInput
	// The functions to be enabled for the channel
	ChannelFunctions pulumi.StringArrayInput
	// Channel Name
	ChannelName pulumi.StringInput
	// The channel type
	ChannelType pulumi.StringInput
	// The channel credentials
	Credentials pulumi.StringMapInput
	// Resource Group Name
	ResourceGroupName pulumi.StringInput
}

func (ChannelArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*channelArgs)(nil)).Elem()
}
