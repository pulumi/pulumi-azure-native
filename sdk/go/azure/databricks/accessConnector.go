// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package databricks

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Information about azure databricks accessConnector.
// API Version: 2022-04-01-preview.
type AccessConnector struct {
	pulumi.CustomResourceState

	// Identity for the resource.
	Identity IdentityDataResponsePtrOutput `pulumi:"identity"`
	// The geo-location where the resource lives
	Location pulumi.StringOutput `pulumi:"location"`
	// The name of the resource
	Name pulumi.StringOutput `pulumi:"name"`
	// Azure Databricks accessConnector properties
	Properties AccessConnectorPropertiesResponseOutput `pulumi:"properties"`
	// Resource tags.
	Tags pulumi.StringMapOutput `pulumi:"tags"`
	// The type of the resource. Ex- Microsoft.Compute/virtualMachines or Microsoft.Storage/storageAccounts.
	Type pulumi.StringOutput `pulumi:"type"`
}

// NewAccessConnector registers a new resource with the given unique name, arguments, and options.
func NewAccessConnector(ctx *pulumi.Context,
	name string, args *AccessConnectorArgs, opts ...pulumi.ResourceOption) (*AccessConnector, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ResourceGroupName == nil {
		return nil, errors.New("invalid value for required argument 'ResourceGroupName'")
	}
	aliases := pulumi.Aliases([]pulumi.Alias{
		{
			Type: pulumi.String("azure-native:databricks/v20220401preview:AccessConnector"),
		},
	})
	opts = append(opts, aliases)
	var resource AccessConnector
	err := ctx.RegisterResource("azure-native:databricks:AccessConnector", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAccessConnector gets an existing AccessConnector resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAccessConnector(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AccessConnectorState, opts ...pulumi.ResourceOption) (*AccessConnector, error) {
	var resource AccessConnector
	err := ctx.ReadResource("azure-native:databricks:AccessConnector", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering AccessConnector resources.
type accessConnectorState struct {
}

type AccessConnectorState struct {
}

func (AccessConnectorState) ElementType() reflect.Type {
	return reflect.TypeOf((*accessConnectorState)(nil)).Elem()
}

type accessConnectorArgs struct {
	// The name of the azure databricks accessConnector.
	ConnectorName *string `pulumi:"connectorName"`
	// Identity for the resource.
	Identity *IdentityData `pulumi:"identity"`
	// The geo-location where the resource lives
	Location *string `pulumi:"location"`
	// The name of the resource group. The name is case insensitive.
	ResourceGroupName string `pulumi:"resourceGroupName"`
	// Resource tags.
	Tags map[string]string `pulumi:"tags"`
}

// The set of arguments for constructing a AccessConnector resource.
type AccessConnectorArgs struct {
	// The name of the azure databricks accessConnector.
	ConnectorName pulumi.StringPtrInput
	// Identity for the resource.
	Identity IdentityDataPtrInput
	// The geo-location where the resource lives
	Location pulumi.StringPtrInput
	// The name of the resource group. The name is case insensitive.
	ResourceGroupName pulumi.StringInput
	// Resource tags.
	Tags pulumi.StringMapInput
}

func (AccessConnectorArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*accessConnectorArgs)(nil)).Elem()
}

type AccessConnectorInput interface {
	pulumi.Input

	ToAccessConnectorOutput() AccessConnectorOutput
	ToAccessConnectorOutputWithContext(ctx context.Context) AccessConnectorOutput
}

func (*AccessConnector) ElementType() reflect.Type {
	return reflect.TypeOf((**AccessConnector)(nil)).Elem()
}

func (i *AccessConnector) ToAccessConnectorOutput() AccessConnectorOutput {
	return i.ToAccessConnectorOutputWithContext(context.Background())
}

func (i *AccessConnector) ToAccessConnectorOutputWithContext(ctx context.Context) AccessConnectorOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AccessConnectorOutput)
}

type AccessConnectorOutput struct{ *pulumi.OutputState }

func (AccessConnectorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AccessConnector)(nil)).Elem()
}

func (o AccessConnectorOutput) ToAccessConnectorOutput() AccessConnectorOutput {
	return o
}

func (o AccessConnectorOutput) ToAccessConnectorOutputWithContext(ctx context.Context) AccessConnectorOutput {
	return o
}

// Identity for the resource.
func (o AccessConnectorOutput) Identity() IdentityDataResponsePtrOutput {
	return o.ApplyT(func(v *AccessConnector) IdentityDataResponsePtrOutput { return v.Identity }).(IdentityDataResponsePtrOutput)
}

// The geo-location where the resource lives
func (o AccessConnectorOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *AccessConnector) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// The name of the resource
func (o AccessConnectorOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *AccessConnector) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Azure Databricks accessConnector properties
func (o AccessConnectorOutput) Properties() AccessConnectorPropertiesResponseOutput {
	return o.ApplyT(func(v *AccessConnector) AccessConnectorPropertiesResponseOutput { return v.Properties }).(AccessConnectorPropertiesResponseOutput)
}

// Resource tags.
func (o AccessConnectorOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *AccessConnector) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

// The type of the resource. Ex- Microsoft.Compute/virtualMachines or Microsoft.Storage/storageAccounts.
func (o AccessConnectorOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *AccessConnector) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(AccessConnectorOutput{})
}
