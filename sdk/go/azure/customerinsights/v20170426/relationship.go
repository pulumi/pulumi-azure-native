// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v20170426

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// The relationship resource format.
type Relationship struct {
	pulumi.CustomResourceState

	// The Relationship Cardinality.
	Cardinality pulumi.StringPtrOutput `pulumi:"cardinality"`
	// Localized descriptions for the Relationship.
	Description pulumi.StringMapOutput `pulumi:"description"`
	// Localized display name for the Relationship.
	DisplayName pulumi.StringMapOutput `pulumi:"displayName"`
	// The expiry date time in UTC.
	ExpiryDateTimeUtc pulumi.StringPtrOutput `pulumi:"expiryDateTimeUtc"`
	// The properties of the Relationship.
	Fields PropertyDefinitionResponseArrayOutput `pulumi:"fields"`
	// Optional property to be used to map fields in profile to their strong ids in related profile.
	LookupMappings RelationshipTypeMappingResponseArrayOutput `pulumi:"lookupMappings"`
	// Resource name.
	Name pulumi.StringOutput `pulumi:"name"`
	// Profile type.
	ProfileType pulumi.StringOutput `pulumi:"profileType"`
	// Provisioning state.
	ProvisioningState pulumi.StringOutput `pulumi:"provisioningState"`
	// Related profile being referenced.
	RelatedProfileType pulumi.StringOutput `pulumi:"relatedProfileType"`
	// The relationship guid id.
	RelationshipGuidId pulumi.StringOutput `pulumi:"relationshipGuidId"`
	// The Relationship name.
	RelationshipName pulumi.StringOutput `pulumi:"relationshipName"`
	// The hub name.
	TenantId pulumi.StringOutput `pulumi:"tenantId"`
	// Resource type.
	Type pulumi.StringOutput `pulumi:"type"`
}

// NewRelationship registers a new resource with the given unique name, arguments, and options.
func NewRelationship(ctx *pulumi.Context,
	name string, args *RelationshipArgs, opts ...pulumi.ResourceOption) (*Relationship, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.HubName == nil {
		return nil, errors.New("invalid value for required argument 'HubName'")
	}
	if args.ProfileType == nil {
		return nil, errors.New("invalid value for required argument 'ProfileType'")
	}
	if args.RelatedProfileType == nil {
		return nil, errors.New("invalid value for required argument 'RelatedProfileType'")
	}
	if args.ResourceGroupName == nil {
		return nil, errors.New("invalid value for required argument 'ResourceGroupName'")
	}
	aliases := pulumi.Aliases([]pulumi.Alias{
		{
			Type: pulumi.String("azure-native:customerinsights:Relationship"),
		},
		{
			Type: pulumi.String("azure-native:customerinsights/v20170101:Relationship"),
		},
	})
	opts = append(opts, aliases)
	var resource Relationship
	err := ctx.RegisterResource("azure-native:customerinsights/v20170426:Relationship", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetRelationship gets an existing Relationship resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRelationship(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *RelationshipState, opts ...pulumi.ResourceOption) (*Relationship, error) {
	var resource Relationship
	err := ctx.ReadResource("azure-native:customerinsights/v20170426:Relationship", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Relationship resources.
type relationshipState struct {
}

type RelationshipState struct {
}

func (RelationshipState) ElementType() reflect.Type {
	return reflect.TypeOf((*relationshipState)(nil)).Elem()
}

type relationshipArgs struct {
	// The Relationship Cardinality.
	Cardinality *CardinalityTypes `pulumi:"cardinality"`
	// Localized descriptions for the Relationship.
	Description map[string]string `pulumi:"description"`
	// Localized display name for the Relationship.
	DisplayName map[string]string `pulumi:"displayName"`
	// The expiry date time in UTC.
	ExpiryDateTimeUtc *string `pulumi:"expiryDateTimeUtc"`
	// The properties of the Relationship.
	Fields []PropertyDefinition `pulumi:"fields"`
	// The name of the hub.
	HubName string `pulumi:"hubName"`
	// Optional property to be used to map fields in profile to their strong ids in related profile.
	LookupMappings []RelationshipTypeMapping `pulumi:"lookupMappings"`
	// Profile type.
	ProfileType string `pulumi:"profileType"`
	// Related profile being referenced.
	RelatedProfileType string `pulumi:"relatedProfileType"`
	// The name of the Relationship.
	RelationshipName *string `pulumi:"relationshipName"`
	// The name of the resource group.
	ResourceGroupName string `pulumi:"resourceGroupName"`
}

// The set of arguments for constructing a Relationship resource.
type RelationshipArgs struct {
	// The Relationship Cardinality.
	Cardinality CardinalityTypesPtrInput
	// Localized descriptions for the Relationship.
	Description pulumi.StringMapInput
	// Localized display name for the Relationship.
	DisplayName pulumi.StringMapInput
	// The expiry date time in UTC.
	ExpiryDateTimeUtc pulumi.StringPtrInput
	// The properties of the Relationship.
	Fields PropertyDefinitionArrayInput
	// The name of the hub.
	HubName pulumi.StringInput
	// Optional property to be used to map fields in profile to their strong ids in related profile.
	LookupMappings RelationshipTypeMappingArrayInput
	// Profile type.
	ProfileType pulumi.StringInput
	// Related profile being referenced.
	RelatedProfileType pulumi.StringInput
	// The name of the Relationship.
	RelationshipName pulumi.StringPtrInput
	// The name of the resource group.
	ResourceGroupName pulumi.StringInput
}

func (RelationshipArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*relationshipArgs)(nil)).Elem()
}

type RelationshipInput interface {
	pulumi.Input

	ToRelationshipOutput() RelationshipOutput
	ToRelationshipOutputWithContext(ctx context.Context) RelationshipOutput
}

func (*Relationship) ElementType() reflect.Type {
	return reflect.TypeOf((**Relationship)(nil)).Elem()
}

func (i *Relationship) ToRelationshipOutput() RelationshipOutput {
	return i.ToRelationshipOutputWithContext(context.Background())
}

func (i *Relationship) ToRelationshipOutputWithContext(ctx context.Context) RelationshipOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RelationshipOutput)
}

type RelationshipOutput struct{ *pulumi.OutputState }

func (RelationshipOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Relationship)(nil)).Elem()
}

func (o RelationshipOutput) ToRelationshipOutput() RelationshipOutput {
	return o
}

func (o RelationshipOutput) ToRelationshipOutputWithContext(ctx context.Context) RelationshipOutput {
	return o
}

// The Relationship Cardinality.
func (o RelationshipOutput) Cardinality() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Relationship) pulumi.StringPtrOutput { return v.Cardinality }).(pulumi.StringPtrOutput)
}

// Localized descriptions for the Relationship.
func (o RelationshipOutput) Description() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Relationship) pulumi.StringMapOutput { return v.Description }).(pulumi.StringMapOutput)
}

// Localized display name for the Relationship.
func (o RelationshipOutput) DisplayName() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Relationship) pulumi.StringMapOutput { return v.DisplayName }).(pulumi.StringMapOutput)
}

// The expiry date time in UTC.
func (o RelationshipOutput) ExpiryDateTimeUtc() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Relationship) pulumi.StringPtrOutput { return v.ExpiryDateTimeUtc }).(pulumi.StringPtrOutput)
}

// The properties of the Relationship.
func (o RelationshipOutput) Fields() PropertyDefinitionResponseArrayOutput {
	return o.ApplyT(func(v *Relationship) PropertyDefinitionResponseArrayOutput { return v.Fields }).(PropertyDefinitionResponseArrayOutput)
}

// Optional property to be used to map fields in profile to their strong ids in related profile.
func (o RelationshipOutput) LookupMappings() RelationshipTypeMappingResponseArrayOutput {
	return o.ApplyT(func(v *Relationship) RelationshipTypeMappingResponseArrayOutput { return v.LookupMappings }).(RelationshipTypeMappingResponseArrayOutput)
}

// Resource name.
func (o RelationshipOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Relationship) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Profile type.
func (o RelationshipOutput) ProfileType() pulumi.StringOutput {
	return o.ApplyT(func(v *Relationship) pulumi.StringOutput { return v.ProfileType }).(pulumi.StringOutput)
}

// Provisioning state.
func (o RelationshipOutput) ProvisioningState() pulumi.StringOutput {
	return o.ApplyT(func(v *Relationship) pulumi.StringOutput { return v.ProvisioningState }).(pulumi.StringOutput)
}

// Related profile being referenced.
func (o RelationshipOutput) RelatedProfileType() pulumi.StringOutput {
	return o.ApplyT(func(v *Relationship) pulumi.StringOutput { return v.RelatedProfileType }).(pulumi.StringOutput)
}

// The relationship guid id.
func (o RelationshipOutput) RelationshipGuidId() pulumi.StringOutput {
	return o.ApplyT(func(v *Relationship) pulumi.StringOutput { return v.RelationshipGuidId }).(pulumi.StringOutput)
}

// The Relationship name.
func (o RelationshipOutput) RelationshipName() pulumi.StringOutput {
	return o.ApplyT(func(v *Relationship) pulumi.StringOutput { return v.RelationshipName }).(pulumi.StringOutput)
}

// The hub name.
func (o RelationshipOutput) TenantId() pulumi.StringOutput {
	return o.ApplyT(func(v *Relationship) pulumi.StringOutput { return v.TenantId }).(pulumi.StringOutput)
}

// Resource type.
func (o RelationshipOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *Relationship) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(RelationshipOutput{})
}
