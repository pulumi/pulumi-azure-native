// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v20170426

import (
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// The view resource format.
type View struct {
	pulumi.CustomResourceState

	// Date time when view was last modified.
	Changed pulumi.StringOutput `pulumi:"changed"`
	// Date time when view was created.
	Created pulumi.StringOutput `pulumi:"created"`
	// View definition.
	Definition pulumi.StringOutput `pulumi:"definition"`
	// Localized display name for the view.
	DisplayName pulumi.StringMapOutput `pulumi:"displayName"`
	// Resource name.
	Name pulumi.StringOutput `pulumi:"name"`
	// the hub name.
	TenantId pulumi.StringOutput `pulumi:"tenantId"`
	// Resource type.
	Type pulumi.StringOutput `pulumi:"type"`
	// the user ID.
	UserId pulumi.StringPtrOutput `pulumi:"userId"`
	// Name of the view.
	ViewName pulumi.StringOutput `pulumi:"viewName"`
}

// NewView registers a new resource with the given unique name, arguments, and options.
func NewView(ctx *pulumi.Context,
	name string, args *ViewArgs, opts ...pulumi.ResourceOption) (*View, error) {
	if args == nil || args.Definition == nil {
		return nil, errors.New("missing required argument 'Definition'")
	}
	if args == nil || args.HubName == nil {
		return nil, errors.New("missing required argument 'HubName'")
	}
	if args == nil || args.ResourceGroupName == nil {
		return nil, errors.New("missing required argument 'ResourceGroupName'")
	}
	if args == nil || args.ViewName == nil {
		return nil, errors.New("missing required argument 'ViewName'")
	}
	if args == nil {
		args = &ViewArgs{}
	}
	aliases := pulumi.Aliases([]pulumi.Alias{
		{
			Type: pulumi.String("azure-nextgen:customerinsights/latest:View"),
		},
		{
			Type: pulumi.String("azure-nextgen:customerinsights/v20170101:View"),
		},
	})
	opts = append(opts, aliases)
	var resource View
	err := ctx.RegisterResource("azure-nextgen:customerinsights/v20170426:View", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetView gets an existing View resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetView(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ViewState, opts ...pulumi.ResourceOption) (*View, error) {
	var resource View
	err := ctx.ReadResource("azure-nextgen:customerinsights/v20170426:View", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering View resources.
type viewState struct {
	// Date time when view was last modified.
	Changed *string `pulumi:"changed"`
	// Date time when view was created.
	Created *string `pulumi:"created"`
	// View definition.
	Definition *string `pulumi:"definition"`
	// Localized display name for the view.
	DisplayName map[string]string `pulumi:"displayName"`
	// Resource name.
	Name *string `pulumi:"name"`
	// the hub name.
	TenantId *string `pulumi:"tenantId"`
	// Resource type.
	Type *string `pulumi:"type"`
	// the user ID.
	UserId *string `pulumi:"userId"`
	// Name of the view.
	ViewName *string `pulumi:"viewName"`
}

type ViewState struct {
	// Date time when view was last modified.
	Changed pulumi.StringPtrInput
	// Date time when view was created.
	Created pulumi.StringPtrInput
	// View definition.
	Definition pulumi.StringPtrInput
	// Localized display name for the view.
	DisplayName pulumi.StringMapInput
	// Resource name.
	Name pulumi.StringPtrInput
	// the hub name.
	TenantId pulumi.StringPtrInput
	// Resource type.
	Type pulumi.StringPtrInput
	// the user ID.
	UserId pulumi.StringPtrInput
	// Name of the view.
	ViewName pulumi.StringPtrInput
}

func (ViewState) ElementType() reflect.Type {
	return reflect.TypeOf((*viewState)(nil)).Elem()
}

type viewArgs struct {
	// View definition.
	Definition string `pulumi:"definition"`
	// Localized display name for the view.
	DisplayName map[string]string `pulumi:"displayName"`
	// The name of the hub.
	HubName string `pulumi:"hubName"`
	// The name of the resource group.
	ResourceGroupName string `pulumi:"resourceGroupName"`
	// the user ID.
	UserId *string `pulumi:"userId"`
	// The name of the view.
	ViewName string `pulumi:"viewName"`
}

// The set of arguments for constructing a View resource.
type ViewArgs struct {
	// View definition.
	Definition pulumi.StringInput
	// Localized display name for the view.
	DisplayName pulumi.StringMapInput
	// The name of the hub.
	HubName pulumi.StringInput
	// The name of the resource group.
	ResourceGroupName pulumi.StringInput
	// the user ID.
	UserId pulumi.StringPtrInput
	// The name of the view.
	ViewName pulumi.StringInput
}

func (ViewArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*viewArgs)(nil)).Elem()
}
