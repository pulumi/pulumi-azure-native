// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v20170426

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// The KPI resource format.
type Kpi struct {
	pulumi.CustomResourceState

	// The aliases.
	Aliases KpiAliasResponseArrayOutput `pulumi:"aliases"`
	// The calculation window.
	CalculationWindow pulumi.StringOutput `pulumi:"calculationWindow"`
	// Name of calculation window field.
	CalculationWindowFieldName pulumi.StringPtrOutput `pulumi:"calculationWindowFieldName"`
	// Localized description for the KPI.
	Description pulumi.StringMapOutput `pulumi:"description"`
	// Localized display name for the KPI.
	DisplayName pulumi.StringMapOutput `pulumi:"displayName"`
	// The mapping entity type.
	EntityType pulumi.StringOutput `pulumi:"entityType"`
	// The mapping entity name.
	EntityTypeName pulumi.StringOutput `pulumi:"entityTypeName"`
	// The computation expression for the KPI.
	Expression pulumi.StringOutput `pulumi:"expression"`
	// The KPI extracts.
	Extracts KpiExtractResponseArrayOutput `pulumi:"extracts"`
	// The filter expression for the KPI.
	Filter pulumi.StringPtrOutput `pulumi:"filter"`
	// The computation function for the KPI.
	Function pulumi.StringOutput `pulumi:"function"`
	// the group by properties for the KPI.
	GroupBy pulumi.StringArrayOutput `pulumi:"groupBy"`
	// The KPI GroupByMetadata.
	GroupByMetadata KpiGroupByMetadataResponseArrayOutput `pulumi:"groupByMetadata"`
	// The KPI name.
	KpiName pulumi.StringOutput `pulumi:"kpiName"`
	// Resource name.
	Name pulumi.StringOutput `pulumi:"name"`
	// The participant profiles.
	ParticipantProfilesMetadata KpiParticipantProfilesMetadataResponseArrayOutput `pulumi:"participantProfilesMetadata"`
	// Provisioning state.
	ProvisioningState pulumi.StringOutput `pulumi:"provisioningState"`
	// The hub name.
	TenantId pulumi.StringOutput `pulumi:"tenantId"`
	// The KPI thresholds.
	ThresHolds KpiThresholdsResponsePtrOutput `pulumi:"thresHolds"`
	// Resource type.
	Type pulumi.StringOutput `pulumi:"type"`
	// The unit of measurement for the KPI.
	Unit pulumi.StringPtrOutput `pulumi:"unit"`
}

// NewKpi registers a new resource with the given unique name, arguments, and options.
func NewKpi(ctx *pulumi.Context,
	name string, args *KpiArgs, opts ...pulumi.ResourceOption) (*Kpi, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.CalculationWindow == nil {
		return nil, errors.New("invalid value for required argument 'CalculationWindow'")
	}
	if args.EntityType == nil {
		return nil, errors.New("invalid value for required argument 'EntityType'")
	}
	if args.EntityTypeName == nil {
		return nil, errors.New("invalid value for required argument 'EntityTypeName'")
	}
	if args.Expression == nil {
		return nil, errors.New("invalid value for required argument 'Expression'")
	}
	if args.Function == nil {
		return nil, errors.New("invalid value for required argument 'Function'")
	}
	if args.HubName == nil {
		return nil, errors.New("invalid value for required argument 'HubName'")
	}
	if args.ResourceGroupName == nil {
		return nil, errors.New("invalid value for required argument 'ResourceGroupName'")
	}
	aliases := pulumi.Aliases([]pulumi.Alias{
		{
			Type: pulumi.String("azure-native:customerinsights:Kpi"),
		},
		{
			Type: pulumi.String("azure-native:customerinsights/v20170101:Kpi"),
		},
	})
	opts = append(opts, aliases)
	var resource Kpi
	err := ctx.RegisterResource("azure-native:customerinsights/v20170426:Kpi", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetKpi gets an existing Kpi resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetKpi(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *KpiState, opts ...pulumi.ResourceOption) (*Kpi, error) {
	var resource Kpi
	err := ctx.ReadResource("azure-native:customerinsights/v20170426:Kpi", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Kpi resources.
type kpiState struct {
}

type KpiState struct {
}

func (KpiState) ElementType() reflect.Type {
	return reflect.TypeOf((*kpiState)(nil)).Elem()
}

type kpiArgs struct {
	// The aliases.
	Aliases []KpiAlias `pulumi:"aliases"`
	// The calculation window.
	CalculationWindow CalculationWindowTypes `pulumi:"calculationWindow"`
	// Name of calculation window field.
	CalculationWindowFieldName *string `pulumi:"calculationWindowFieldName"`
	// Localized description for the KPI.
	Description map[string]string `pulumi:"description"`
	// Localized display name for the KPI.
	DisplayName map[string]string `pulumi:"displayName"`
	// The mapping entity type.
	EntityType EntityTypes `pulumi:"entityType"`
	// The mapping entity name.
	EntityTypeName string `pulumi:"entityTypeName"`
	// The computation expression for the KPI.
	Expression string `pulumi:"expression"`
	// The KPI extracts.
	Extracts []KpiExtract `pulumi:"extracts"`
	// The filter expression for the KPI.
	Filter *string `pulumi:"filter"`
	// The computation function for the KPI.
	Function KpiFunctions `pulumi:"function"`
	// the group by properties for the KPI.
	GroupBy []string `pulumi:"groupBy"`
	// The name of the hub.
	HubName string `pulumi:"hubName"`
	// The name of the KPI.
	KpiName *string `pulumi:"kpiName"`
	// The name of the resource group.
	ResourceGroupName string `pulumi:"resourceGroupName"`
	// The KPI thresholds.
	ThresHolds *KpiThresholds `pulumi:"thresHolds"`
	// The unit of measurement for the KPI.
	Unit *string `pulumi:"unit"`
}

// The set of arguments for constructing a Kpi resource.
type KpiArgs struct {
	// The aliases.
	Aliases KpiAliasArrayInput
	// The calculation window.
	CalculationWindow CalculationWindowTypesInput
	// Name of calculation window field.
	CalculationWindowFieldName pulumi.StringPtrInput
	// Localized description for the KPI.
	Description pulumi.StringMapInput
	// Localized display name for the KPI.
	DisplayName pulumi.StringMapInput
	// The mapping entity type.
	EntityType EntityTypesInput
	// The mapping entity name.
	EntityTypeName pulumi.StringInput
	// The computation expression for the KPI.
	Expression pulumi.StringInput
	// The KPI extracts.
	Extracts KpiExtractArrayInput
	// The filter expression for the KPI.
	Filter pulumi.StringPtrInput
	// The computation function for the KPI.
	Function KpiFunctionsInput
	// the group by properties for the KPI.
	GroupBy pulumi.StringArrayInput
	// The name of the hub.
	HubName pulumi.StringInput
	// The name of the KPI.
	KpiName pulumi.StringPtrInput
	// The name of the resource group.
	ResourceGroupName pulumi.StringInput
	// The KPI thresholds.
	ThresHolds KpiThresholdsPtrInput
	// The unit of measurement for the KPI.
	Unit pulumi.StringPtrInput
}

func (KpiArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*kpiArgs)(nil)).Elem()
}

type KpiInput interface {
	pulumi.Input

	ToKpiOutput() KpiOutput
	ToKpiOutputWithContext(ctx context.Context) KpiOutput
}

func (*Kpi) ElementType() reflect.Type {
	return reflect.TypeOf((**Kpi)(nil)).Elem()
}

func (i *Kpi) ToKpiOutput() KpiOutput {
	return i.ToKpiOutputWithContext(context.Background())
}

func (i *Kpi) ToKpiOutputWithContext(ctx context.Context) KpiOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KpiOutput)
}

type KpiOutput struct{ *pulumi.OutputState }

func (KpiOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Kpi)(nil)).Elem()
}

func (o KpiOutput) ToKpiOutput() KpiOutput {
	return o
}

func (o KpiOutput) ToKpiOutputWithContext(ctx context.Context) KpiOutput {
	return o
}

// The aliases.
func (o KpiOutput) Aliases() KpiAliasResponseArrayOutput {
	return o.ApplyT(func(v *Kpi) KpiAliasResponseArrayOutput { return v.Aliases }).(KpiAliasResponseArrayOutput)
}

// The calculation window.
func (o KpiOutput) CalculationWindow() pulumi.StringOutput {
	return o.ApplyT(func(v *Kpi) pulumi.StringOutput { return v.CalculationWindow }).(pulumi.StringOutput)
}

// Name of calculation window field.
func (o KpiOutput) CalculationWindowFieldName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Kpi) pulumi.StringPtrOutput { return v.CalculationWindowFieldName }).(pulumi.StringPtrOutput)
}

// Localized description for the KPI.
func (o KpiOutput) Description() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Kpi) pulumi.StringMapOutput { return v.Description }).(pulumi.StringMapOutput)
}

// Localized display name for the KPI.
func (o KpiOutput) DisplayName() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Kpi) pulumi.StringMapOutput { return v.DisplayName }).(pulumi.StringMapOutput)
}

// The mapping entity type.
func (o KpiOutput) EntityType() pulumi.StringOutput {
	return o.ApplyT(func(v *Kpi) pulumi.StringOutput { return v.EntityType }).(pulumi.StringOutput)
}

// The mapping entity name.
func (o KpiOutput) EntityTypeName() pulumi.StringOutput {
	return o.ApplyT(func(v *Kpi) pulumi.StringOutput { return v.EntityTypeName }).(pulumi.StringOutput)
}

// The computation expression for the KPI.
func (o KpiOutput) Expression() pulumi.StringOutput {
	return o.ApplyT(func(v *Kpi) pulumi.StringOutput { return v.Expression }).(pulumi.StringOutput)
}

// The KPI extracts.
func (o KpiOutput) Extracts() KpiExtractResponseArrayOutput {
	return o.ApplyT(func(v *Kpi) KpiExtractResponseArrayOutput { return v.Extracts }).(KpiExtractResponseArrayOutput)
}

// The filter expression for the KPI.
func (o KpiOutput) Filter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Kpi) pulumi.StringPtrOutput { return v.Filter }).(pulumi.StringPtrOutput)
}

// The computation function for the KPI.
func (o KpiOutput) Function() pulumi.StringOutput {
	return o.ApplyT(func(v *Kpi) pulumi.StringOutput { return v.Function }).(pulumi.StringOutput)
}

// the group by properties for the KPI.
func (o KpiOutput) GroupBy() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Kpi) pulumi.StringArrayOutput { return v.GroupBy }).(pulumi.StringArrayOutput)
}

// The KPI GroupByMetadata.
func (o KpiOutput) GroupByMetadata() KpiGroupByMetadataResponseArrayOutput {
	return o.ApplyT(func(v *Kpi) KpiGroupByMetadataResponseArrayOutput { return v.GroupByMetadata }).(KpiGroupByMetadataResponseArrayOutput)
}

// The KPI name.
func (o KpiOutput) KpiName() pulumi.StringOutput {
	return o.ApplyT(func(v *Kpi) pulumi.StringOutput { return v.KpiName }).(pulumi.StringOutput)
}

// Resource name.
func (o KpiOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Kpi) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The participant profiles.
func (o KpiOutput) ParticipantProfilesMetadata() KpiParticipantProfilesMetadataResponseArrayOutput {
	return o.ApplyT(func(v *Kpi) KpiParticipantProfilesMetadataResponseArrayOutput { return v.ParticipantProfilesMetadata }).(KpiParticipantProfilesMetadataResponseArrayOutput)
}

// Provisioning state.
func (o KpiOutput) ProvisioningState() pulumi.StringOutput {
	return o.ApplyT(func(v *Kpi) pulumi.StringOutput { return v.ProvisioningState }).(pulumi.StringOutput)
}

// The hub name.
func (o KpiOutput) TenantId() pulumi.StringOutput {
	return o.ApplyT(func(v *Kpi) pulumi.StringOutput { return v.TenantId }).(pulumi.StringOutput)
}

// The KPI thresholds.
func (o KpiOutput) ThresHolds() KpiThresholdsResponsePtrOutput {
	return o.ApplyT(func(v *Kpi) KpiThresholdsResponsePtrOutput { return v.ThresHolds }).(KpiThresholdsResponsePtrOutput)
}

// Resource type.
func (o KpiOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *Kpi) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

// The unit of measurement for the KPI.
func (o KpiOutput) Unit() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Kpi) pulumi.StringPtrOutput { return v.Unit }).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(KpiOutput{})
}
