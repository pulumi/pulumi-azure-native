// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v20170426

import (
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// The KPI resource format.
type Kpi struct {
	pulumi.CustomResourceState

	// The aliases.
	Aliases KpiAliasResponseArrayOutput `pulumi:"aliases"`
	// The calculation window.
	CalculationWindow pulumi.StringOutput `pulumi:"calculationWindow"`
	// Name of calculation window field.
	CalculationWindowFieldName pulumi.StringPtrOutput `pulumi:"calculationWindowFieldName"`
	// Localized description for the KPI.
	Description pulumi.StringMapOutput `pulumi:"description"`
	// Localized display name for the KPI.
	DisplayName pulumi.StringMapOutput `pulumi:"displayName"`
	// The mapping entity type.
	EntityType pulumi.StringOutput `pulumi:"entityType"`
	// The mapping entity name.
	EntityTypeName pulumi.StringOutput `pulumi:"entityTypeName"`
	// The computation expression for the KPI.
	Expression pulumi.StringOutput `pulumi:"expression"`
	// The KPI extracts.
	Extracts KpiExtractResponseArrayOutput `pulumi:"extracts"`
	// The filter expression for the KPI.
	Filter pulumi.StringPtrOutput `pulumi:"filter"`
	// The computation function for the KPI.
	Function pulumi.StringOutput `pulumi:"function"`
	// the group by properties for the KPI.
	GroupBy pulumi.StringArrayOutput `pulumi:"groupBy"`
	// The KPI GroupByMetadata.
	GroupByMetadata KpiGroupByMetadataResponseArrayOutput `pulumi:"groupByMetadata"`
	// The KPI name.
	KpiName pulumi.StringOutput `pulumi:"kpiName"`
	// Resource name.
	Name pulumi.StringOutput `pulumi:"name"`
	// The participant profiles.
	ParticipantProfilesMetadata KpiParticipantProfilesMetadataResponseArrayOutput `pulumi:"participantProfilesMetadata"`
	// Provisioning state.
	ProvisioningState pulumi.StringOutput `pulumi:"provisioningState"`
	// The hub name.
	TenantId pulumi.StringOutput `pulumi:"tenantId"`
	// The KPI thresholds.
	ThresHolds KpiThresholdsResponsePtrOutput `pulumi:"thresHolds"`
	// Resource type.
	Type pulumi.StringOutput `pulumi:"type"`
	// The unit of measurement for the KPI.
	Unit pulumi.StringPtrOutput `pulumi:"unit"`
}

// NewKpi registers a new resource with the given unique name, arguments, and options.
func NewKpi(ctx *pulumi.Context,
	name string, args *KpiArgs, opts ...pulumi.ResourceOption) (*Kpi, error) {
	if args == nil || args.CalculationWindow == nil {
		return nil, errors.New("missing required argument 'CalculationWindow'")
	}
	if args == nil || args.EntityType == nil {
		return nil, errors.New("missing required argument 'EntityType'")
	}
	if args == nil || args.EntityTypeName == nil {
		return nil, errors.New("missing required argument 'EntityTypeName'")
	}
	if args == nil || args.Expression == nil {
		return nil, errors.New("missing required argument 'Expression'")
	}
	if args == nil || args.Function == nil {
		return nil, errors.New("missing required argument 'Function'")
	}
	if args == nil || args.HubName == nil {
		return nil, errors.New("missing required argument 'HubName'")
	}
	if args == nil || args.KpiName == nil {
		return nil, errors.New("missing required argument 'KpiName'")
	}
	if args == nil || args.ResourceGroupName == nil {
		return nil, errors.New("missing required argument 'ResourceGroupName'")
	}
	if args == nil {
		args = &KpiArgs{}
	}
	aliases := pulumi.Aliases([]pulumi.Alias{
		{
			Type: pulumi.String("azure-nextgen:customerinsights/latest:Kpi"),
		},
		{
			Type: pulumi.String("azure-nextgen:customerinsights/v20170101:Kpi"),
		},
	})
	opts = append(opts, aliases)
	var resource Kpi
	err := ctx.RegisterResource("azure-nextgen:customerinsights/v20170426:Kpi", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetKpi gets an existing Kpi resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetKpi(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *KpiState, opts ...pulumi.ResourceOption) (*Kpi, error) {
	var resource Kpi
	err := ctx.ReadResource("azure-nextgen:customerinsights/v20170426:Kpi", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Kpi resources.
type kpiState struct {
	// The aliases.
	Aliases []KpiAliasResponse `pulumi:"aliases"`
	// The calculation window.
	CalculationWindow *string `pulumi:"calculationWindow"`
	// Name of calculation window field.
	CalculationWindowFieldName *string `pulumi:"calculationWindowFieldName"`
	// Localized description for the KPI.
	Description map[string]string `pulumi:"description"`
	// Localized display name for the KPI.
	DisplayName map[string]string `pulumi:"displayName"`
	// The mapping entity type.
	EntityType *string `pulumi:"entityType"`
	// The mapping entity name.
	EntityTypeName *string `pulumi:"entityTypeName"`
	// The computation expression for the KPI.
	Expression *string `pulumi:"expression"`
	// The KPI extracts.
	Extracts []KpiExtractResponse `pulumi:"extracts"`
	// The filter expression for the KPI.
	Filter *string `pulumi:"filter"`
	// The computation function for the KPI.
	Function *string `pulumi:"function"`
	// the group by properties for the KPI.
	GroupBy []string `pulumi:"groupBy"`
	// The KPI GroupByMetadata.
	GroupByMetadata []KpiGroupByMetadataResponse `pulumi:"groupByMetadata"`
	// The KPI name.
	KpiName *string `pulumi:"kpiName"`
	// Resource name.
	Name *string `pulumi:"name"`
	// The participant profiles.
	ParticipantProfilesMetadata []KpiParticipantProfilesMetadataResponse `pulumi:"participantProfilesMetadata"`
	// Provisioning state.
	ProvisioningState *string `pulumi:"provisioningState"`
	// The hub name.
	TenantId *string `pulumi:"tenantId"`
	// The KPI thresholds.
	ThresHolds *KpiThresholdsResponse `pulumi:"thresHolds"`
	// Resource type.
	Type *string `pulumi:"type"`
	// The unit of measurement for the KPI.
	Unit *string `pulumi:"unit"`
}

type KpiState struct {
	// The aliases.
	Aliases KpiAliasResponseArrayInput
	// The calculation window.
	CalculationWindow pulumi.StringPtrInput
	// Name of calculation window field.
	CalculationWindowFieldName pulumi.StringPtrInput
	// Localized description for the KPI.
	Description pulumi.StringMapInput
	// Localized display name for the KPI.
	DisplayName pulumi.StringMapInput
	// The mapping entity type.
	EntityType pulumi.StringPtrInput
	// The mapping entity name.
	EntityTypeName pulumi.StringPtrInput
	// The computation expression for the KPI.
	Expression pulumi.StringPtrInput
	// The KPI extracts.
	Extracts KpiExtractResponseArrayInput
	// The filter expression for the KPI.
	Filter pulumi.StringPtrInput
	// The computation function for the KPI.
	Function pulumi.StringPtrInput
	// the group by properties for the KPI.
	GroupBy pulumi.StringArrayInput
	// The KPI GroupByMetadata.
	GroupByMetadata KpiGroupByMetadataResponseArrayInput
	// The KPI name.
	KpiName pulumi.StringPtrInput
	// Resource name.
	Name pulumi.StringPtrInput
	// The participant profiles.
	ParticipantProfilesMetadata KpiParticipantProfilesMetadataResponseArrayInput
	// Provisioning state.
	ProvisioningState pulumi.StringPtrInput
	// The hub name.
	TenantId pulumi.StringPtrInput
	// The KPI thresholds.
	ThresHolds KpiThresholdsResponsePtrInput
	// Resource type.
	Type pulumi.StringPtrInput
	// The unit of measurement for the KPI.
	Unit pulumi.StringPtrInput
}

func (KpiState) ElementType() reflect.Type {
	return reflect.TypeOf((*kpiState)(nil)).Elem()
}

type kpiArgs struct {
	// The aliases.
	Aliases []KpiAlias `pulumi:"aliases"`
	// The calculation window.
	CalculationWindow string `pulumi:"calculationWindow"`
	// Name of calculation window field.
	CalculationWindowFieldName *string `pulumi:"calculationWindowFieldName"`
	// Localized description for the KPI.
	Description map[string]string `pulumi:"description"`
	// Localized display name for the KPI.
	DisplayName map[string]string `pulumi:"displayName"`
	// The mapping entity type.
	EntityType string `pulumi:"entityType"`
	// The mapping entity name.
	EntityTypeName string `pulumi:"entityTypeName"`
	// The computation expression for the KPI.
	Expression string `pulumi:"expression"`
	// The KPI extracts.
	Extracts []KpiExtract `pulumi:"extracts"`
	// The filter expression for the KPI.
	Filter *string `pulumi:"filter"`
	// The computation function for the KPI.
	Function string `pulumi:"function"`
	// the group by properties for the KPI.
	GroupBy []string `pulumi:"groupBy"`
	// The name of the hub.
	HubName string `pulumi:"hubName"`
	// The name of the KPI.
	KpiName string `pulumi:"kpiName"`
	// The name of the resource group.
	ResourceGroupName string `pulumi:"resourceGroupName"`
	// The KPI thresholds.
	ThresHolds *KpiThresholds `pulumi:"thresHolds"`
	// The unit of measurement for the KPI.
	Unit *string `pulumi:"unit"`
}

// The set of arguments for constructing a Kpi resource.
type KpiArgs struct {
	// The aliases.
	Aliases KpiAliasArrayInput
	// The calculation window.
	CalculationWindow pulumi.StringInput
	// Name of calculation window field.
	CalculationWindowFieldName pulumi.StringPtrInput
	// Localized description for the KPI.
	Description pulumi.StringMapInput
	// Localized display name for the KPI.
	DisplayName pulumi.StringMapInput
	// The mapping entity type.
	EntityType pulumi.StringInput
	// The mapping entity name.
	EntityTypeName pulumi.StringInput
	// The computation expression for the KPI.
	Expression pulumi.StringInput
	// The KPI extracts.
	Extracts KpiExtractArrayInput
	// The filter expression for the KPI.
	Filter pulumi.StringPtrInput
	// The computation function for the KPI.
	Function pulumi.StringInput
	// the group by properties for the KPI.
	GroupBy pulumi.StringArrayInput
	// The name of the hub.
	HubName pulumi.StringInput
	// The name of the KPI.
	KpiName pulumi.StringInput
	// The name of the resource group.
	ResourceGroupName pulumi.StringInput
	// The KPI thresholds.
	ThresHolds KpiThresholdsPtrInput
	// The unit of measurement for the KPI.
	Unit pulumi.StringPtrInput
}

func (KpiArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*kpiArgs)(nil)).Elem()
}
