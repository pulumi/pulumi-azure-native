// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v20170426

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// The link resource format.
type Link struct {
	pulumi.CustomResourceState

	// Localized descriptions for the Link.
	Description pulumi.StringMapOutput `pulumi:"description"`
	// Localized display name for the Link.
	DisplayName pulumi.StringMapOutput `pulumi:"displayName"`
	// The link name.
	LinkName pulumi.StringOutput `pulumi:"linkName"`
	// The set of properties mappings between the source and target Types.
	Mappings TypePropertiesMappingResponseArrayOutput `pulumi:"mappings"`
	// Resource name.
	Name pulumi.StringOutput `pulumi:"name"`
	// Determines whether this link is supposed to create or delete instances if Link is NOT Reference Only.
	OperationType pulumi.StringPtrOutput `pulumi:"operationType"`
	// The properties that represent the participating profile.
	ParticipantPropertyReferences ParticipantPropertyReferenceResponseArrayOutput `pulumi:"participantPropertyReferences"`
	// Provisioning state.
	ProvisioningState pulumi.StringOutput `pulumi:"provisioningState"`
	// Indicating whether the link is reference only link. This flag is ignored if the Mappings are defined. If the mappings are not defined and it is set to true, links processing will not create or update profiles.
	ReferenceOnly pulumi.BoolPtrOutput `pulumi:"referenceOnly"`
	// Type of source entity.
	SourceEntityType pulumi.StringOutput `pulumi:"sourceEntityType"`
	// Name of the source Entity Type.
	SourceEntityTypeName pulumi.StringOutput `pulumi:"sourceEntityTypeName"`
	// Type of target entity.
	TargetEntityType pulumi.StringOutput `pulumi:"targetEntityType"`
	// Name of the target Entity Type.
	TargetEntityTypeName pulumi.StringOutput `pulumi:"targetEntityTypeName"`
	// The hub name.
	TenantId pulumi.StringOutput `pulumi:"tenantId"`
	// Resource type.
	Type pulumi.StringOutput `pulumi:"type"`
}

// NewLink registers a new resource with the given unique name, arguments, and options.
func NewLink(ctx *pulumi.Context,
	name string, args *LinkArgs, opts ...pulumi.ResourceOption) (*Link, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.HubName == nil {
		return nil, errors.New("invalid value for required argument 'HubName'")
	}
	if args.ParticipantPropertyReferences == nil {
		return nil, errors.New("invalid value for required argument 'ParticipantPropertyReferences'")
	}
	if args.ResourceGroupName == nil {
		return nil, errors.New("invalid value for required argument 'ResourceGroupName'")
	}
	if args.SourceEntityType == nil {
		return nil, errors.New("invalid value for required argument 'SourceEntityType'")
	}
	if args.SourceEntityTypeName == nil {
		return nil, errors.New("invalid value for required argument 'SourceEntityTypeName'")
	}
	if args.TargetEntityType == nil {
		return nil, errors.New("invalid value for required argument 'TargetEntityType'")
	}
	if args.TargetEntityTypeName == nil {
		return nil, errors.New("invalid value for required argument 'TargetEntityTypeName'")
	}
	aliases := pulumi.Aliases([]pulumi.Alias{
		{
			Type: pulumi.String("azure-native:customerinsights:Link"),
		},
		{
			Type: pulumi.String("azure-native:customerinsights/v20170101:Link"),
		},
	})
	opts = append(opts, aliases)
	var resource Link
	err := ctx.RegisterResource("azure-native:customerinsights/v20170426:Link", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetLink gets an existing Link resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetLink(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *LinkState, opts ...pulumi.ResourceOption) (*Link, error) {
	var resource Link
	err := ctx.ReadResource("azure-native:customerinsights/v20170426:Link", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Link resources.
type linkState struct {
}

type LinkState struct {
}

func (LinkState) ElementType() reflect.Type {
	return reflect.TypeOf((*linkState)(nil)).Elem()
}

type linkArgs struct {
	// Localized descriptions for the Link.
	Description map[string]string `pulumi:"description"`
	// Localized display name for the Link.
	DisplayName map[string]string `pulumi:"displayName"`
	// The name of the hub.
	HubName string `pulumi:"hubName"`
	// The name of the link.
	LinkName *string `pulumi:"linkName"`
	// The set of properties mappings between the source and target Types.
	Mappings []TypePropertiesMapping `pulumi:"mappings"`
	// Determines whether this link is supposed to create or delete instances if Link is NOT Reference Only.
	OperationType *InstanceOperationType `pulumi:"operationType"`
	// The properties that represent the participating profile.
	ParticipantPropertyReferences []ParticipantPropertyReference `pulumi:"participantPropertyReferences"`
	// Indicating whether the link is reference only link. This flag is ignored if the Mappings are defined. If the mappings are not defined and it is set to true, links processing will not create or update profiles.
	ReferenceOnly *bool `pulumi:"referenceOnly"`
	// The name of the resource group.
	ResourceGroupName string `pulumi:"resourceGroupName"`
	// Type of source entity.
	SourceEntityType EntityType `pulumi:"sourceEntityType"`
	// Name of the source Entity Type.
	SourceEntityTypeName string `pulumi:"sourceEntityTypeName"`
	// Type of target entity.
	TargetEntityType EntityType `pulumi:"targetEntityType"`
	// Name of the target Entity Type.
	TargetEntityTypeName string `pulumi:"targetEntityTypeName"`
}

// The set of arguments for constructing a Link resource.
type LinkArgs struct {
	// Localized descriptions for the Link.
	Description pulumi.StringMapInput
	// Localized display name for the Link.
	DisplayName pulumi.StringMapInput
	// The name of the hub.
	HubName pulumi.StringInput
	// The name of the link.
	LinkName pulumi.StringPtrInput
	// The set of properties mappings between the source and target Types.
	Mappings TypePropertiesMappingArrayInput
	// Determines whether this link is supposed to create or delete instances if Link is NOT Reference Only.
	OperationType InstanceOperationTypePtrInput
	// The properties that represent the participating profile.
	ParticipantPropertyReferences ParticipantPropertyReferenceArrayInput
	// Indicating whether the link is reference only link. This flag is ignored if the Mappings are defined. If the mappings are not defined and it is set to true, links processing will not create or update profiles.
	ReferenceOnly pulumi.BoolPtrInput
	// The name of the resource group.
	ResourceGroupName pulumi.StringInput
	// Type of source entity.
	SourceEntityType EntityTypeInput
	// Name of the source Entity Type.
	SourceEntityTypeName pulumi.StringInput
	// Type of target entity.
	TargetEntityType EntityTypeInput
	// Name of the target Entity Type.
	TargetEntityTypeName pulumi.StringInput
}

func (LinkArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*linkArgs)(nil)).Elem()
}

type LinkInput interface {
	pulumi.Input

	ToLinkOutput() LinkOutput
	ToLinkOutputWithContext(ctx context.Context) LinkOutput
}

func (*Link) ElementType() reflect.Type {
	return reflect.TypeOf((**Link)(nil)).Elem()
}

func (i *Link) ToLinkOutput() LinkOutput {
	return i.ToLinkOutputWithContext(context.Background())
}

func (i *Link) ToLinkOutputWithContext(ctx context.Context) LinkOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LinkOutput)
}

type LinkOutput struct{ *pulumi.OutputState }

func (LinkOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Link)(nil)).Elem()
}

func (o LinkOutput) ToLinkOutput() LinkOutput {
	return o
}

func (o LinkOutput) ToLinkOutputWithContext(ctx context.Context) LinkOutput {
	return o
}

// Localized descriptions for the Link.
func (o LinkOutput) Description() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Link) pulumi.StringMapOutput { return v.Description }).(pulumi.StringMapOutput)
}

// Localized display name for the Link.
func (o LinkOutput) DisplayName() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Link) pulumi.StringMapOutput { return v.DisplayName }).(pulumi.StringMapOutput)
}

// The link name.
func (o LinkOutput) LinkName() pulumi.StringOutput {
	return o.ApplyT(func(v *Link) pulumi.StringOutput { return v.LinkName }).(pulumi.StringOutput)
}

// The set of properties mappings between the source and target Types.
func (o LinkOutput) Mappings() TypePropertiesMappingResponseArrayOutput {
	return o.ApplyT(func(v *Link) TypePropertiesMappingResponseArrayOutput { return v.Mappings }).(TypePropertiesMappingResponseArrayOutput)
}

// Resource name.
func (o LinkOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Link) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Determines whether this link is supposed to create or delete instances if Link is NOT Reference Only.
func (o LinkOutput) OperationType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Link) pulumi.StringPtrOutput { return v.OperationType }).(pulumi.StringPtrOutput)
}

// The properties that represent the participating profile.
func (o LinkOutput) ParticipantPropertyReferences() ParticipantPropertyReferenceResponseArrayOutput {
	return o.ApplyT(func(v *Link) ParticipantPropertyReferenceResponseArrayOutput { return v.ParticipantPropertyReferences }).(ParticipantPropertyReferenceResponseArrayOutput)
}

// Provisioning state.
func (o LinkOutput) ProvisioningState() pulumi.StringOutput {
	return o.ApplyT(func(v *Link) pulumi.StringOutput { return v.ProvisioningState }).(pulumi.StringOutput)
}

// Indicating whether the link is reference only link. This flag is ignored if the Mappings are defined. If the mappings are not defined and it is set to true, links processing will not create or update profiles.
func (o LinkOutput) ReferenceOnly() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Link) pulumi.BoolPtrOutput { return v.ReferenceOnly }).(pulumi.BoolPtrOutput)
}

// Type of source entity.
func (o LinkOutput) SourceEntityType() pulumi.StringOutput {
	return o.ApplyT(func(v *Link) pulumi.StringOutput { return v.SourceEntityType }).(pulumi.StringOutput)
}

// Name of the source Entity Type.
func (o LinkOutput) SourceEntityTypeName() pulumi.StringOutput {
	return o.ApplyT(func(v *Link) pulumi.StringOutput { return v.SourceEntityTypeName }).(pulumi.StringOutput)
}

// Type of target entity.
func (o LinkOutput) TargetEntityType() pulumi.StringOutput {
	return o.ApplyT(func(v *Link) pulumi.StringOutput { return v.TargetEntityType }).(pulumi.StringOutput)
}

// Name of the target Entity Type.
func (o LinkOutput) TargetEntityTypeName() pulumi.StringOutput {
	return o.ApplyT(func(v *Link) pulumi.StringOutput { return v.TargetEntityTypeName }).(pulumi.StringOutput)
}

// The hub name.
func (o LinkOutput) TenantId() pulumi.StringOutput {
	return o.ApplyT(func(v *Link) pulumi.StringOutput { return v.TenantId }).(pulumi.StringOutput)
}

// Resource type.
func (o LinkOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *Link) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LinkOutput{})
}
