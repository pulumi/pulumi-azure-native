// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v20170101

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// The calculation window.
type CalculationWindowTypes string

const (
	CalculationWindowTypesLifetime = CalculationWindowTypes("Lifetime")
	CalculationWindowTypesHour     = CalculationWindowTypes("Hour")
	CalculationWindowTypesDay      = CalculationWindowTypes("Day")
	CalculationWindowTypesWeek     = CalculationWindowTypes("Week")
	CalculationWindowTypesMonth    = CalculationWindowTypes("Month")
)

func (CalculationWindowTypes) ElementType() reflect.Type {
	return reflect.TypeOf((*CalculationWindowTypes)(nil)).Elem()
}

func (e CalculationWindowTypes) ToCalculationWindowTypesOutput() CalculationWindowTypesOutput {
	return pulumi.ToOutput(e).(CalculationWindowTypesOutput)
}

func (e CalculationWindowTypes) ToCalculationWindowTypesOutputWithContext(ctx context.Context) CalculationWindowTypesOutput {
	return pulumi.ToOutputWithContext(ctx, e).(CalculationWindowTypesOutput)
}

func (e CalculationWindowTypes) ToCalculationWindowTypesPtrOutput() CalculationWindowTypesPtrOutput {
	return e.ToCalculationWindowTypesPtrOutputWithContext(context.Background())
}

func (e CalculationWindowTypes) ToCalculationWindowTypesPtrOutputWithContext(ctx context.Context) CalculationWindowTypesPtrOutput {
	return CalculationWindowTypes(e).ToCalculationWindowTypesOutputWithContext(ctx).ToCalculationWindowTypesPtrOutputWithContext(ctx)
}

func (e CalculationWindowTypes) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e CalculationWindowTypes) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e CalculationWindowTypes) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e CalculationWindowTypes) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type CalculationWindowTypesOutput struct{ *pulumi.OutputState }

func (CalculationWindowTypesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CalculationWindowTypes)(nil)).Elem()
}

func (o CalculationWindowTypesOutput) ToCalculationWindowTypesOutput() CalculationWindowTypesOutput {
	return o
}

func (o CalculationWindowTypesOutput) ToCalculationWindowTypesOutputWithContext(ctx context.Context) CalculationWindowTypesOutput {
	return o
}

func (o CalculationWindowTypesOutput) ToCalculationWindowTypesPtrOutput() CalculationWindowTypesPtrOutput {
	return o.ToCalculationWindowTypesPtrOutputWithContext(context.Background())
}

func (o CalculationWindowTypesOutput) ToCalculationWindowTypesPtrOutputWithContext(ctx context.Context) CalculationWindowTypesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v CalculationWindowTypes) *CalculationWindowTypes {
		return &v
	}).(CalculationWindowTypesPtrOutput)
}

func (o CalculationWindowTypesOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o CalculationWindowTypesOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e CalculationWindowTypes) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o CalculationWindowTypesOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o CalculationWindowTypesOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e CalculationWindowTypes) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type CalculationWindowTypesPtrOutput struct{ *pulumi.OutputState }

func (CalculationWindowTypesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CalculationWindowTypes)(nil)).Elem()
}

func (o CalculationWindowTypesPtrOutput) ToCalculationWindowTypesPtrOutput() CalculationWindowTypesPtrOutput {
	return o
}

func (o CalculationWindowTypesPtrOutput) ToCalculationWindowTypesPtrOutputWithContext(ctx context.Context) CalculationWindowTypesPtrOutput {
	return o
}

func (o CalculationWindowTypesPtrOutput) Elem() CalculationWindowTypesOutput {
	return o.ApplyT(func(v *CalculationWindowTypes) CalculationWindowTypes {
		if v != nil {
			return *v
		}
		var ret CalculationWindowTypes
		return ret
	}).(CalculationWindowTypesOutput)
}

func (o CalculationWindowTypesPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o CalculationWindowTypesPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *CalculationWindowTypes) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// CalculationWindowTypesInput is an input type that accepts CalculationWindowTypesArgs and CalculationWindowTypesOutput values.
// You can construct a concrete instance of `CalculationWindowTypesInput` via:
//
//	CalculationWindowTypesArgs{...}
type CalculationWindowTypesInput interface {
	pulumi.Input

	ToCalculationWindowTypesOutput() CalculationWindowTypesOutput
	ToCalculationWindowTypesOutputWithContext(context.Context) CalculationWindowTypesOutput
}

var calculationWindowTypesPtrType = reflect.TypeOf((**CalculationWindowTypes)(nil)).Elem()

type CalculationWindowTypesPtrInput interface {
	pulumi.Input

	ToCalculationWindowTypesPtrOutput() CalculationWindowTypesPtrOutput
	ToCalculationWindowTypesPtrOutputWithContext(context.Context) CalculationWindowTypesPtrOutput
}

type calculationWindowTypesPtr string

func CalculationWindowTypesPtr(v string) CalculationWindowTypesPtrInput {
	return (*calculationWindowTypesPtr)(&v)
}

func (*calculationWindowTypesPtr) ElementType() reflect.Type {
	return calculationWindowTypesPtrType
}

func (in *calculationWindowTypesPtr) ToCalculationWindowTypesPtrOutput() CalculationWindowTypesPtrOutput {
	return pulumi.ToOutput(in).(CalculationWindowTypesPtrOutput)
}

func (in *calculationWindowTypesPtr) ToCalculationWindowTypesPtrOutputWithContext(ctx context.Context) CalculationWindowTypesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(CalculationWindowTypesPtrOutput)
}

// The Relationship Cardinality.
type CardinalityTypes string

const (
	CardinalityTypesOneToOne   = CardinalityTypes("OneToOne")
	CardinalityTypesOneToMany  = CardinalityTypes("OneToMany")
	CardinalityTypesManyToMany = CardinalityTypes("ManyToMany")
)

func (CardinalityTypes) ElementType() reflect.Type {
	return reflect.TypeOf((*CardinalityTypes)(nil)).Elem()
}

func (e CardinalityTypes) ToCardinalityTypesOutput() CardinalityTypesOutput {
	return pulumi.ToOutput(e).(CardinalityTypesOutput)
}

func (e CardinalityTypes) ToCardinalityTypesOutputWithContext(ctx context.Context) CardinalityTypesOutput {
	return pulumi.ToOutputWithContext(ctx, e).(CardinalityTypesOutput)
}

func (e CardinalityTypes) ToCardinalityTypesPtrOutput() CardinalityTypesPtrOutput {
	return e.ToCardinalityTypesPtrOutputWithContext(context.Background())
}

func (e CardinalityTypes) ToCardinalityTypesPtrOutputWithContext(ctx context.Context) CardinalityTypesPtrOutput {
	return CardinalityTypes(e).ToCardinalityTypesOutputWithContext(ctx).ToCardinalityTypesPtrOutputWithContext(ctx)
}

func (e CardinalityTypes) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e CardinalityTypes) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e CardinalityTypes) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e CardinalityTypes) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type CardinalityTypesOutput struct{ *pulumi.OutputState }

func (CardinalityTypesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CardinalityTypes)(nil)).Elem()
}

func (o CardinalityTypesOutput) ToCardinalityTypesOutput() CardinalityTypesOutput {
	return o
}

func (o CardinalityTypesOutput) ToCardinalityTypesOutputWithContext(ctx context.Context) CardinalityTypesOutput {
	return o
}

func (o CardinalityTypesOutput) ToCardinalityTypesPtrOutput() CardinalityTypesPtrOutput {
	return o.ToCardinalityTypesPtrOutputWithContext(context.Background())
}

func (o CardinalityTypesOutput) ToCardinalityTypesPtrOutputWithContext(ctx context.Context) CardinalityTypesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v CardinalityTypes) *CardinalityTypes {
		return &v
	}).(CardinalityTypesPtrOutput)
}

func (o CardinalityTypesOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o CardinalityTypesOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e CardinalityTypes) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o CardinalityTypesOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o CardinalityTypesOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e CardinalityTypes) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type CardinalityTypesPtrOutput struct{ *pulumi.OutputState }

func (CardinalityTypesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CardinalityTypes)(nil)).Elem()
}

func (o CardinalityTypesPtrOutput) ToCardinalityTypesPtrOutput() CardinalityTypesPtrOutput {
	return o
}

func (o CardinalityTypesPtrOutput) ToCardinalityTypesPtrOutputWithContext(ctx context.Context) CardinalityTypesPtrOutput {
	return o
}

func (o CardinalityTypesPtrOutput) Elem() CardinalityTypesOutput {
	return o.ApplyT(func(v *CardinalityTypes) CardinalityTypes {
		if v != nil {
			return *v
		}
		var ret CardinalityTypes
		return ret
	}).(CardinalityTypesOutput)
}

func (o CardinalityTypesPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o CardinalityTypesPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *CardinalityTypes) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// CardinalityTypesInput is an input type that accepts CardinalityTypesArgs and CardinalityTypesOutput values.
// You can construct a concrete instance of `CardinalityTypesInput` via:
//
//	CardinalityTypesArgs{...}
type CardinalityTypesInput interface {
	pulumi.Input

	ToCardinalityTypesOutput() CardinalityTypesOutput
	ToCardinalityTypesOutputWithContext(context.Context) CardinalityTypesOutput
}

var cardinalityTypesPtrType = reflect.TypeOf((**CardinalityTypes)(nil)).Elem()

type CardinalityTypesPtrInput interface {
	pulumi.Input

	ToCardinalityTypesPtrOutput() CardinalityTypesPtrOutput
	ToCardinalityTypesPtrOutputWithContext(context.Context) CardinalityTypesPtrOutput
}

type cardinalityTypesPtr string

func CardinalityTypesPtr(v string) CardinalityTypesPtrInput {
	return (*cardinalityTypesPtr)(&v)
}

func (*cardinalityTypesPtr) ElementType() reflect.Type {
	return cardinalityTypesPtrType
}

func (in *cardinalityTypesPtr) ToCardinalityTypesPtrOutput() CardinalityTypesPtrOutput {
	return pulumi.ToOutput(in).(CardinalityTypesPtrOutput)
}

func (in *cardinalityTypesPtr) ToCardinalityTypesPtrOutputWithContext(ctx context.Context) CardinalityTypesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(CardinalityTypesPtrOutput)
}

// The type of completion operation.
type CompletionOperationTypes string

const (
	CompletionOperationTypesDoNothing  = CompletionOperationTypes("DoNothing")
	CompletionOperationTypesDeleteFile = CompletionOperationTypes("DeleteFile")
	CompletionOperationTypesMoveFile   = CompletionOperationTypes("MoveFile")
)

func (CompletionOperationTypes) ElementType() reflect.Type {
	return reflect.TypeOf((*CompletionOperationTypes)(nil)).Elem()
}

func (e CompletionOperationTypes) ToCompletionOperationTypesOutput() CompletionOperationTypesOutput {
	return pulumi.ToOutput(e).(CompletionOperationTypesOutput)
}

func (e CompletionOperationTypes) ToCompletionOperationTypesOutputWithContext(ctx context.Context) CompletionOperationTypesOutput {
	return pulumi.ToOutputWithContext(ctx, e).(CompletionOperationTypesOutput)
}

func (e CompletionOperationTypes) ToCompletionOperationTypesPtrOutput() CompletionOperationTypesPtrOutput {
	return e.ToCompletionOperationTypesPtrOutputWithContext(context.Background())
}

func (e CompletionOperationTypes) ToCompletionOperationTypesPtrOutputWithContext(ctx context.Context) CompletionOperationTypesPtrOutput {
	return CompletionOperationTypes(e).ToCompletionOperationTypesOutputWithContext(ctx).ToCompletionOperationTypesPtrOutputWithContext(ctx)
}

func (e CompletionOperationTypes) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e CompletionOperationTypes) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e CompletionOperationTypes) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e CompletionOperationTypes) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type CompletionOperationTypesOutput struct{ *pulumi.OutputState }

func (CompletionOperationTypesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CompletionOperationTypes)(nil)).Elem()
}

func (o CompletionOperationTypesOutput) ToCompletionOperationTypesOutput() CompletionOperationTypesOutput {
	return o
}

func (o CompletionOperationTypesOutput) ToCompletionOperationTypesOutputWithContext(ctx context.Context) CompletionOperationTypesOutput {
	return o
}

func (o CompletionOperationTypesOutput) ToCompletionOperationTypesPtrOutput() CompletionOperationTypesPtrOutput {
	return o.ToCompletionOperationTypesPtrOutputWithContext(context.Background())
}

func (o CompletionOperationTypesOutput) ToCompletionOperationTypesPtrOutputWithContext(ctx context.Context) CompletionOperationTypesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v CompletionOperationTypes) *CompletionOperationTypes {
		return &v
	}).(CompletionOperationTypesPtrOutput)
}

func (o CompletionOperationTypesOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o CompletionOperationTypesOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e CompletionOperationTypes) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o CompletionOperationTypesOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o CompletionOperationTypesOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e CompletionOperationTypes) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type CompletionOperationTypesPtrOutput struct{ *pulumi.OutputState }

func (CompletionOperationTypesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CompletionOperationTypes)(nil)).Elem()
}

func (o CompletionOperationTypesPtrOutput) ToCompletionOperationTypesPtrOutput() CompletionOperationTypesPtrOutput {
	return o
}

func (o CompletionOperationTypesPtrOutput) ToCompletionOperationTypesPtrOutputWithContext(ctx context.Context) CompletionOperationTypesPtrOutput {
	return o
}

func (o CompletionOperationTypesPtrOutput) Elem() CompletionOperationTypesOutput {
	return o.ApplyT(func(v *CompletionOperationTypes) CompletionOperationTypes {
		if v != nil {
			return *v
		}
		var ret CompletionOperationTypes
		return ret
	}).(CompletionOperationTypesOutput)
}

func (o CompletionOperationTypesPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o CompletionOperationTypesPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *CompletionOperationTypes) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// CompletionOperationTypesInput is an input type that accepts CompletionOperationTypesArgs and CompletionOperationTypesOutput values.
// You can construct a concrete instance of `CompletionOperationTypesInput` via:
//
//	CompletionOperationTypesArgs{...}
type CompletionOperationTypesInput interface {
	pulumi.Input

	ToCompletionOperationTypesOutput() CompletionOperationTypesOutput
	ToCompletionOperationTypesOutputWithContext(context.Context) CompletionOperationTypesOutput
}

var completionOperationTypesPtrType = reflect.TypeOf((**CompletionOperationTypes)(nil)).Elem()

type CompletionOperationTypesPtrInput interface {
	pulumi.Input

	ToCompletionOperationTypesPtrOutput() CompletionOperationTypesPtrOutput
	ToCompletionOperationTypesPtrOutputWithContext(context.Context) CompletionOperationTypesPtrOutput
}

type completionOperationTypesPtr string

func CompletionOperationTypesPtr(v string) CompletionOperationTypesPtrInput {
	return (*completionOperationTypesPtr)(&v)
}

func (*completionOperationTypesPtr) ElementType() reflect.Type {
	return completionOperationTypesPtrType
}

func (in *completionOperationTypesPtr) ToCompletionOperationTypesPtrOutput() CompletionOperationTypesPtrOutput {
	return pulumi.ToOutput(in).(CompletionOperationTypesPtrOutput)
}

func (in *completionOperationTypesPtr) ToCompletionOperationTypesPtrOutputWithContext(ctx context.Context) CompletionOperationTypesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(CompletionOperationTypesPtrOutput)
}

// Type of connector.
type ConnectorTypes string

const (
	ConnectorTypesNone           = ConnectorTypes("None")
	ConnectorTypesCRM            = ConnectorTypes("CRM")
	ConnectorTypesAzureBlob      = ConnectorTypes("AzureBlob")
	ConnectorTypesSalesforce     = ConnectorTypes("Salesforce")
	ConnectorTypesExchangeOnline = ConnectorTypes("ExchangeOnline")
	ConnectorTypesOutbound       = ConnectorTypes("Outbound")
)

// Type of entity.
type EntityTypes string

const (
	EntityTypesNone         = EntityTypes("None")
	EntityTypesProfile      = EntityTypes("Profile")
	EntityTypesInteraction  = EntityTypes("Interaction")
	EntityTypesRelationship = EntityTypes("Relationship")
)

func (EntityTypes) ElementType() reflect.Type {
	return reflect.TypeOf((*EntityTypes)(nil)).Elem()
}

func (e EntityTypes) ToEntityTypesOutput() EntityTypesOutput {
	return pulumi.ToOutput(e).(EntityTypesOutput)
}

func (e EntityTypes) ToEntityTypesOutputWithContext(ctx context.Context) EntityTypesOutput {
	return pulumi.ToOutputWithContext(ctx, e).(EntityTypesOutput)
}

func (e EntityTypes) ToEntityTypesPtrOutput() EntityTypesPtrOutput {
	return e.ToEntityTypesPtrOutputWithContext(context.Background())
}

func (e EntityTypes) ToEntityTypesPtrOutputWithContext(ctx context.Context) EntityTypesPtrOutput {
	return EntityTypes(e).ToEntityTypesOutputWithContext(ctx).ToEntityTypesPtrOutputWithContext(ctx)
}

func (e EntityTypes) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e EntityTypes) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e EntityTypes) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e EntityTypes) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type EntityTypesOutput struct{ *pulumi.OutputState }

func (EntityTypesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EntityTypes)(nil)).Elem()
}

func (o EntityTypesOutput) ToEntityTypesOutput() EntityTypesOutput {
	return o
}

func (o EntityTypesOutput) ToEntityTypesOutputWithContext(ctx context.Context) EntityTypesOutput {
	return o
}

func (o EntityTypesOutput) ToEntityTypesPtrOutput() EntityTypesPtrOutput {
	return o.ToEntityTypesPtrOutputWithContext(context.Background())
}

func (o EntityTypesOutput) ToEntityTypesPtrOutputWithContext(ctx context.Context) EntityTypesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v EntityTypes) *EntityTypes {
		return &v
	}).(EntityTypesPtrOutput)
}

func (o EntityTypesOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o EntityTypesOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e EntityTypes) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o EntityTypesOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o EntityTypesOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e EntityTypes) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type EntityTypesPtrOutput struct{ *pulumi.OutputState }

func (EntityTypesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EntityTypes)(nil)).Elem()
}

func (o EntityTypesPtrOutput) ToEntityTypesPtrOutput() EntityTypesPtrOutput {
	return o
}

func (o EntityTypesPtrOutput) ToEntityTypesPtrOutputWithContext(ctx context.Context) EntityTypesPtrOutput {
	return o
}

func (o EntityTypesPtrOutput) Elem() EntityTypesOutput {
	return o.ApplyT(func(v *EntityTypes) EntityTypes {
		if v != nil {
			return *v
		}
		var ret EntityTypes
		return ret
	}).(EntityTypesOutput)
}

func (o EntityTypesPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o EntityTypesPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *EntityTypes) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// EntityTypesInput is an input type that accepts EntityTypesArgs and EntityTypesOutput values.
// You can construct a concrete instance of `EntityTypesInput` via:
//
//	EntityTypesArgs{...}
type EntityTypesInput interface {
	pulumi.Input

	ToEntityTypesOutput() EntityTypesOutput
	ToEntityTypesOutputWithContext(context.Context) EntityTypesOutput
}

var entityTypesPtrType = reflect.TypeOf((**EntityTypes)(nil)).Elem()

type EntityTypesPtrInput interface {
	pulumi.Input

	ToEntityTypesPtrOutput() EntityTypesPtrOutput
	ToEntityTypesPtrOutputWithContext(context.Context) EntityTypesPtrOutput
}

type entityTypesPtr string

func EntityTypesPtr(v string) EntityTypesPtrInput {
	return (*entityTypesPtr)(&v)
}

func (*entityTypesPtr) ElementType() reflect.Type {
	return entityTypesPtrType
}

func (in *entityTypesPtr) ToEntityTypesPtrOutput() EntityTypesPtrOutput {
	return pulumi.ToOutput(in).(EntityTypesPtrOutput)
}

func (in *entityTypesPtr) ToEntityTypesPtrOutputWithContext(ctx context.Context) EntityTypesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(EntityTypesPtrOutput)
}

// The type of error management to use for the mapping.
type ErrorManagementTypes string

const (
	ErrorManagementTypesRejectAndContinue = ErrorManagementTypes("RejectAndContinue")
	ErrorManagementTypesStopImport        = ErrorManagementTypes("StopImport")
	ErrorManagementTypesRejectUntilLimit  = ErrorManagementTypes("RejectUntilLimit")
)

func (ErrorManagementTypes) ElementType() reflect.Type {
	return reflect.TypeOf((*ErrorManagementTypes)(nil)).Elem()
}

func (e ErrorManagementTypes) ToErrorManagementTypesOutput() ErrorManagementTypesOutput {
	return pulumi.ToOutput(e).(ErrorManagementTypesOutput)
}

func (e ErrorManagementTypes) ToErrorManagementTypesOutputWithContext(ctx context.Context) ErrorManagementTypesOutput {
	return pulumi.ToOutputWithContext(ctx, e).(ErrorManagementTypesOutput)
}

func (e ErrorManagementTypes) ToErrorManagementTypesPtrOutput() ErrorManagementTypesPtrOutput {
	return e.ToErrorManagementTypesPtrOutputWithContext(context.Background())
}

func (e ErrorManagementTypes) ToErrorManagementTypesPtrOutputWithContext(ctx context.Context) ErrorManagementTypesPtrOutput {
	return ErrorManagementTypes(e).ToErrorManagementTypesOutputWithContext(ctx).ToErrorManagementTypesPtrOutputWithContext(ctx)
}

func (e ErrorManagementTypes) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e ErrorManagementTypes) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e ErrorManagementTypes) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e ErrorManagementTypes) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type ErrorManagementTypesOutput struct{ *pulumi.OutputState }

func (ErrorManagementTypesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ErrorManagementTypes)(nil)).Elem()
}

func (o ErrorManagementTypesOutput) ToErrorManagementTypesOutput() ErrorManagementTypesOutput {
	return o
}

func (o ErrorManagementTypesOutput) ToErrorManagementTypesOutputWithContext(ctx context.Context) ErrorManagementTypesOutput {
	return o
}

func (o ErrorManagementTypesOutput) ToErrorManagementTypesPtrOutput() ErrorManagementTypesPtrOutput {
	return o.ToErrorManagementTypesPtrOutputWithContext(context.Background())
}

func (o ErrorManagementTypesOutput) ToErrorManagementTypesPtrOutputWithContext(ctx context.Context) ErrorManagementTypesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ErrorManagementTypes) *ErrorManagementTypes {
		return &v
	}).(ErrorManagementTypesPtrOutput)
}

func (o ErrorManagementTypesOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o ErrorManagementTypesOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e ErrorManagementTypes) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o ErrorManagementTypesOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o ErrorManagementTypesOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e ErrorManagementTypes) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type ErrorManagementTypesPtrOutput struct{ *pulumi.OutputState }

func (ErrorManagementTypesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ErrorManagementTypes)(nil)).Elem()
}

func (o ErrorManagementTypesPtrOutput) ToErrorManagementTypesPtrOutput() ErrorManagementTypesPtrOutput {
	return o
}

func (o ErrorManagementTypesPtrOutput) ToErrorManagementTypesPtrOutputWithContext(ctx context.Context) ErrorManagementTypesPtrOutput {
	return o
}

func (o ErrorManagementTypesPtrOutput) Elem() ErrorManagementTypesOutput {
	return o.ApplyT(func(v *ErrorManagementTypes) ErrorManagementTypes {
		if v != nil {
			return *v
		}
		var ret ErrorManagementTypes
		return ret
	}).(ErrorManagementTypesOutput)
}

func (o ErrorManagementTypesPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o ErrorManagementTypesPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *ErrorManagementTypes) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// ErrorManagementTypesInput is an input type that accepts ErrorManagementTypesArgs and ErrorManagementTypesOutput values.
// You can construct a concrete instance of `ErrorManagementTypesInput` via:
//
//	ErrorManagementTypesArgs{...}
type ErrorManagementTypesInput interface {
	pulumi.Input

	ToErrorManagementTypesOutput() ErrorManagementTypesOutput
	ToErrorManagementTypesOutputWithContext(context.Context) ErrorManagementTypesOutput
}

var errorManagementTypesPtrType = reflect.TypeOf((**ErrorManagementTypes)(nil)).Elem()

type ErrorManagementTypesPtrInput interface {
	pulumi.Input

	ToErrorManagementTypesPtrOutput() ErrorManagementTypesPtrOutput
	ToErrorManagementTypesPtrOutputWithContext(context.Context) ErrorManagementTypesPtrOutput
}

type errorManagementTypesPtr string

func ErrorManagementTypesPtr(v string) ErrorManagementTypesPtrInput {
	return (*errorManagementTypesPtr)(&v)
}

func (*errorManagementTypesPtr) ElementType() reflect.Type {
	return errorManagementTypesPtrType
}

func (in *errorManagementTypesPtr) ToErrorManagementTypesPtrOutput() ErrorManagementTypesPtrOutput {
	return pulumi.ToOutput(in).(ErrorManagementTypesPtrOutput)
}

func (in *errorManagementTypesPtr) ToErrorManagementTypesPtrOutputWithContext(ctx context.Context) ErrorManagementTypesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(ErrorManagementTypesPtrOutput)
}

// The type mapping format.
type FormatTypes string

const (
	FormatTypesTextFormat = FormatTypes("TextFormat")
)

func (FormatTypes) ElementType() reflect.Type {
	return reflect.TypeOf((*FormatTypes)(nil)).Elem()
}

func (e FormatTypes) ToFormatTypesOutput() FormatTypesOutput {
	return pulumi.ToOutput(e).(FormatTypesOutput)
}

func (e FormatTypes) ToFormatTypesOutputWithContext(ctx context.Context) FormatTypesOutput {
	return pulumi.ToOutputWithContext(ctx, e).(FormatTypesOutput)
}

func (e FormatTypes) ToFormatTypesPtrOutput() FormatTypesPtrOutput {
	return e.ToFormatTypesPtrOutputWithContext(context.Background())
}

func (e FormatTypes) ToFormatTypesPtrOutputWithContext(ctx context.Context) FormatTypesPtrOutput {
	return FormatTypes(e).ToFormatTypesOutputWithContext(ctx).ToFormatTypesPtrOutputWithContext(ctx)
}

func (e FormatTypes) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e FormatTypes) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e FormatTypes) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e FormatTypes) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type FormatTypesOutput struct{ *pulumi.OutputState }

func (FormatTypesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FormatTypes)(nil)).Elem()
}

func (o FormatTypesOutput) ToFormatTypesOutput() FormatTypesOutput {
	return o
}

func (o FormatTypesOutput) ToFormatTypesOutputWithContext(ctx context.Context) FormatTypesOutput {
	return o
}

func (o FormatTypesOutput) ToFormatTypesPtrOutput() FormatTypesPtrOutput {
	return o.ToFormatTypesPtrOutputWithContext(context.Background())
}

func (o FormatTypesOutput) ToFormatTypesPtrOutputWithContext(ctx context.Context) FormatTypesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v FormatTypes) *FormatTypes {
		return &v
	}).(FormatTypesPtrOutput)
}

func (o FormatTypesOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o FormatTypesOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e FormatTypes) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o FormatTypesOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o FormatTypesOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e FormatTypes) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type FormatTypesPtrOutput struct{ *pulumi.OutputState }

func (FormatTypesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FormatTypes)(nil)).Elem()
}

func (o FormatTypesPtrOutput) ToFormatTypesPtrOutput() FormatTypesPtrOutput {
	return o
}

func (o FormatTypesPtrOutput) ToFormatTypesPtrOutputWithContext(ctx context.Context) FormatTypesPtrOutput {
	return o
}

func (o FormatTypesPtrOutput) Elem() FormatTypesOutput {
	return o.ApplyT(func(v *FormatTypes) FormatTypes {
		if v != nil {
			return *v
		}
		var ret FormatTypes
		return ret
	}).(FormatTypesOutput)
}

func (o FormatTypesPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o FormatTypesPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *FormatTypes) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// FormatTypesInput is an input type that accepts FormatTypesArgs and FormatTypesOutput values.
// You can construct a concrete instance of `FormatTypesInput` via:
//
//	FormatTypesArgs{...}
type FormatTypesInput interface {
	pulumi.Input

	ToFormatTypesOutput() FormatTypesOutput
	ToFormatTypesOutputWithContext(context.Context) FormatTypesOutput
}

var formatTypesPtrType = reflect.TypeOf((**FormatTypes)(nil)).Elem()

type FormatTypesPtrInput interface {
	pulumi.Input

	ToFormatTypesPtrOutput() FormatTypesPtrOutput
	ToFormatTypesPtrOutputWithContext(context.Context) FormatTypesPtrOutput
}

type formatTypesPtr string

func FormatTypesPtr(v string) FormatTypesPtrInput {
	return (*formatTypesPtr)(&v)
}

func (*formatTypesPtr) ElementType() reflect.Type {
	return formatTypesPtrType
}

func (in *formatTypesPtr) ToFormatTypesPtrOutput() FormatTypesPtrOutput {
	return pulumi.ToOutput(in).(FormatTypesPtrOutput)
}

func (in *formatTypesPtr) ToFormatTypesPtrOutputWithContext(ctx context.Context) FormatTypesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(FormatTypesPtrOutput)
}

// The frequency to update.
type FrequencyTypes string

const (
	FrequencyTypesMinute = FrequencyTypes("Minute")
	FrequencyTypesHour   = FrequencyTypes("Hour")
	FrequencyTypesDay    = FrequencyTypes("Day")
	FrequencyTypesWeek   = FrequencyTypes("Week")
	FrequencyTypesMonth  = FrequencyTypes("Month")
)

func (FrequencyTypes) ElementType() reflect.Type {
	return reflect.TypeOf((*FrequencyTypes)(nil)).Elem()
}

func (e FrequencyTypes) ToFrequencyTypesOutput() FrequencyTypesOutput {
	return pulumi.ToOutput(e).(FrequencyTypesOutput)
}

func (e FrequencyTypes) ToFrequencyTypesOutputWithContext(ctx context.Context) FrequencyTypesOutput {
	return pulumi.ToOutputWithContext(ctx, e).(FrequencyTypesOutput)
}

func (e FrequencyTypes) ToFrequencyTypesPtrOutput() FrequencyTypesPtrOutput {
	return e.ToFrequencyTypesPtrOutputWithContext(context.Background())
}

func (e FrequencyTypes) ToFrequencyTypesPtrOutputWithContext(ctx context.Context) FrequencyTypesPtrOutput {
	return FrequencyTypes(e).ToFrequencyTypesOutputWithContext(ctx).ToFrequencyTypesPtrOutputWithContext(ctx)
}

func (e FrequencyTypes) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e FrequencyTypes) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e FrequencyTypes) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e FrequencyTypes) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type FrequencyTypesOutput struct{ *pulumi.OutputState }

func (FrequencyTypesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FrequencyTypes)(nil)).Elem()
}

func (o FrequencyTypesOutput) ToFrequencyTypesOutput() FrequencyTypesOutput {
	return o
}

func (o FrequencyTypesOutput) ToFrequencyTypesOutputWithContext(ctx context.Context) FrequencyTypesOutput {
	return o
}

func (o FrequencyTypesOutput) ToFrequencyTypesPtrOutput() FrequencyTypesPtrOutput {
	return o.ToFrequencyTypesPtrOutputWithContext(context.Background())
}

func (o FrequencyTypesOutput) ToFrequencyTypesPtrOutputWithContext(ctx context.Context) FrequencyTypesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v FrequencyTypes) *FrequencyTypes {
		return &v
	}).(FrequencyTypesPtrOutput)
}

func (o FrequencyTypesOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o FrequencyTypesOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e FrequencyTypes) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o FrequencyTypesOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o FrequencyTypesOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e FrequencyTypes) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type FrequencyTypesPtrOutput struct{ *pulumi.OutputState }

func (FrequencyTypesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FrequencyTypes)(nil)).Elem()
}

func (o FrequencyTypesPtrOutput) ToFrequencyTypesPtrOutput() FrequencyTypesPtrOutput {
	return o
}

func (o FrequencyTypesPtrOutput) ToFrequencyTypesPtrOutputWithContext(ctx context.Context) FrequencyTypesPtrOutput {
	return o
}

func (o FrequencyTypesPtrOutput) Elem() FrequencyTypesOutput {
	return o.ApplyT(func(v *FrequencyTypes) FrequencyTypes {
		if v != nil {
			return *v
		}
		var ret FrequencyTypes
		return ret
	}).(FrequencyTypesOutput)
}

func (o FrequencyTypesPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o FrequencyTypesPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *FrequencyTypes) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// FrequencyTypesInput is an input type that accepts FrequencyTypesArgs and FrequencyTypesOutput values.
// You can construct a concrete instance of `FrequencyTypesInput` via:
//
//	FrequencyTypesArgs{...}
type FrequencyTypesInput interface {
	pulumi.Input

	ToFrequencyTypesOutput() FrequencyTypesOutput
	ToFrequencyTypesOutputWithContext(context.Context) FrequencyTypesOutput
}

var frequencyTypesPtrType = reflect.TypeOf((**FrequencyTypes)(nil)).Elem()

type FrequencyTypesPtrInput interface {
	pulumi.Input

	ToFrequencyTypesPtrOutput() FrequencyTypesPtrOutput
	ToFrequencyTypesPtrOutputWithContext(context.Context) FrequencyTypesPtrOutput
}

type frequencyTypesPtr string

func FrequencyTypesPtr(v string) FrequencyTypesPtrInput {
	return (*frequencyTypesPtr)(&v)
}

func (*frequencyTypesPtr) ElementType() reflect.Type {
	return frequencyTypesPtrType
}

func (in *frequencyTypesPtr) ToFrequencyTypesPtrOutput() FrequencyTypesPtrOutput {
	return pulumi.ToOutput(in).(FrequencyTypesPtrOutput)
}

func (in *frequencyTypesPtr) ToFrequencyTypesPtrOutputWithContext(ctx context.Context) FrequencyTypesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(FrequencyTypesPtrOutput)
}

// Determines whether this link is supposed to create or delete instances if Link is NOT Reference Only.
type InstanceOperationType string

const (
	InstanceOperationTypeUpsert = InstanceOperationType("Upsert")
	InstanceOperationTypeDelete = InstanceOperationType("Delete")
)

func (InstanceOperationType) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceOperationType)(nil)).Elem()
}

func (e InstanceOperationType) ToInstanceOperationTypeOutput() InstanceOperationTypeOutput {
	return pulumi.ToOutput(e).(InstanceOperationTypeOutput)
}

func (e InstanceOperationType) ToInstanceOperationTypeOutputWithContext(ctx context.Context) InstanceOperationTypeOutput {
	return pulumi.ToOutputWithContext(ctx, e).(InstanceOperationTypeOutput)
}

func (e InstanceOperationType) ToInstanceOperationTypePtrOutput() InstanceOperationTypePtrOutput {
	return e.ToInstanceOperationTypePtrOutputWithContext(context.Background())
}

func (e InstanceOperationType) ToInstanceOperationTypePtrOutputWithContext(ctx context.Context) InstanceOperationTypePtrOutput {
	return InstanceOperationType(e).ToInstanceOperationTypeOutputWithContext(ctx).ToInstanceOperationTypePtrOutputWithContext(ctx)
}

func (e InstanceOperationType) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e InstanceOperationType) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e InstanceOperationType) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e InstanceOperationType) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type InstanceOperationTypeOutput struct{ *pulumi.OutputState }

func (InstanceOperationTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceOperationType)(nil)).Elem()
}

func (o InstanceOperationTypeOutput) ToInstanceOperationTypeOutput() InstanceOperationTypeOutput {
	return o
}

func (o InstanceOperationTypeOutput) ToInstanceOperationTypeOutputWithContext(ctx context.Context) InstanceOperationTypeOutput {
	return o
}

func (o InstanceOperationTypeOutput) ToInstanceOperationTypePtrOutput() InstanceOperationTypePtrOutput {
	return o.ToInstanceOperationTypePtrOutputWithContext(context.Background())
}

func (o InstanceOperationTypeOutput) ToInstanceOperationTypePtrOutputWithContext(ctx context.Context) InstanceOperationTypePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v InstanceOperationType) *InstanceOperationType {
		return &v
	}).(InstanceOperationTypePtrOutput)
}

func (o InstanceOperationTypeOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o InstanceOperationTypeOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e InstanceOperationType) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o InstanceOperationTypeOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o InstanceOperationTypeOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e InstanceOperationType) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type InstanceOperationTypePtrOutput struct{ *pulumi.OutputState }

func (InstanceOperationTypePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**InstanceOperationType)(nil)).Elem()
}

func (o InstanceOperationTypePtrOutput) ToInstanceOperationTypePtrOutput() InstanceOperationTypePtrOutput {
	return o
}

func (o InstanceOperationTypePtrOutput) ToInstanceOperationTypePtrOutputWithContext(ctx context.Context) InstanceOperationTypePtrOutput {
	return o
}

func (o InstanceOperationTypePtrOutput) Elem() InstanceOperationTypeOutput {
	return o.ApplyT(func(v *InstanceOperationType) InstanceOperationType {
		if v != nil {
			return *v
		}
		var ret InstanceOperationType
		return ret
	}).(InstanceOperationTypeOutput)
}

func (o InstanceOperationTypePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o InstanceOperationTypePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *InstanceOperationType) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// InstanceOperationTypeInput is an input type that accepts InstanceOperationTypeArgs and InstanceOperationTypeOutput values.
// You can construct a concrete instance of `InstanceOperationTypeInput` via:
//
//	InstanceOperationTypeArgs{...}
type InstanceOperationTypeInput interface {
	pulumi.Input

	ToInstanceOperationTypeOutput() InstanceOperationTypeOutput
	ToInstanceOperationTypeOutputWithContext(context.Context) InstanceOperationTypeOutput
}

var instanceOperationTypePtrType = reflect.TypeOf((**InstanceOperationType)(nil)).Elem()

type InstanceOperationTypePtrInput interface {
	pulumi.Input

	ToInstanceOperationTypePtrOutput() InstanceOperationTypePtrOutput
	ToInstanceOperationTypePtrOutputWithContext(context.Context) InstanceOperationTypePtrOutput
}

type instanceOperationTypePtr string

func InstanceOperationTypePtr(v string) InstanceOperationTypePtrInput {
	return (*instanceOperationTypePtr)(&v)
}

func (*instanceOperationTypePtr) ElementType() reflect.Type {
	return instanceOperationTypePtrType
}

func (in *instanceOperationTypePtr) ToInstanceOperationTypePtrOutput() InstanceOperationTypePtrOutput {
	return pulumi.ToOutput(in).(InstanceOperationTypePtrOutput)
}

func (in *instanceOperationTypePtr) ToInstanceOperationTypePtrOutputWithContext(ctx context.Context) InstanceOperationTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(InstanceOperationTypePtrOutput)
}

// The computation function for the KPI.
type KpiFunctions string

const (
	KpiFunctionsSum           = KpiFunctions("Sum")
	KpiFunctionsAvg           = KpiFunctions("Avg")
	KpiFunctionsMin           = KpiFunctions("Min")
	KpiFunctionsMax           = KpiFunctions("Max")
	KpiFunctionsLast          = KpiFunctions("Last")
	KpiFunctionsCount         = KpiFunctions("Count")
	KpiFunctionsNone          = KpiFunctions("None")
	KpiFunctionsCountDistinct = KpiFunctions("CountDistinct")
)

func (KpiFunctions) ElementType() reflect.Type {
	return reflect.TypeOf((*KpiFunctions)(nil)).Elem()
}

func (e KpiFunctions) ToKpiFunctionsOutput() KpiFunctionsOutput {
	return pulumi.ToOutput(e).(KpiFunctionsOutput)
}

func (e KpiFunctions) ToKpiFunctionsOutputWithContext(ctx context.Context) KpiFunctionsOutput {
	return pulumi.ToOutputWithContext(ctx, e).(KpiFunctionsOutput)
}

func (e KpiFunctions) ToKpiFunctionsPtrOutput() KpiFunctionsPtrOutput {
	return e.ToKpiFunctionsPtrOutputWithContext(context.Background())
}

func (e KpiFunctions) ToKpiFunctionsPtrOutputWithContext(ctx context.Context) KpiFunctionsPtrOutput {
	return KpiFunctions(e).ToKpiFunctionsOutputWithContext(ctx).ToKpiFunctionsPtrOutputWithContext(ctx)
}

func (e KpiFunctions) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e KpiFunctions) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e KpiFunctions) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e KpiFunctions) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type KpiFunctionsOutput struct{ *pulumi.OutputState }

func (KpiFunctionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KpiFunctions)(nil)).Elem()
}

func (o KpiFunctionsOutput) ToKpiFunctionsOutput() KpiFunctionsOutput {
	return o
}

func (o KpiFunctionsOutput) ToKpiFunctionsOutputWithContext(ctx context.Context) KpiFunctionsOutput {
	return o
}

func (o KpiFunctionsOutput) ToKpiFunctionsPtrOutput() KpiFunctionsPtrOutput {
	return o.ToKpiFunctionsPtrOutputWithContext(context.Background())
}

func (o KpiFunctionsOutput) ToKpiFunctionsPtrOutputWithContext(ctx context.Context) KpiFunctionsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v KpiFunctions) *KpiFunctions {
		return &v
	}).(KpiFunctionsPtrOutput)
}

func (o KpiFunctionsOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o KpiFunctionsOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e KpiFunctions) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o KpiFunctionsOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o KpiFunctionsOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e KpiFunctions) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type KpiFunctionsPtrOutput struct{ *pulumi.OutputState }

func (KpiFunctionsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KpiFunctions)(nil)).Elem()
}

func (o KpiFunctionsPtrOutput) ToKpiFunctionsPtrOutput() KpiFunctionsPtrOutput {
	return o
}

func (o KpiFunctionsPtrOutput) ToKpiFunctionsPtrOutputWithContext(ctx context.Context) KpiFunctionsPtrOutput {
	return o
}

func (o KpiFunctionsPtrOutput) Elem() KpiFunctionsOutput {
	return o.ApplyT(func(v *KpiFunctions) KpiFunctions {
		if v != nil {
			return *v
		}
		var ret KpiFunctions
		return ret
	}).(KpiFunctionsOutput)
}

func (o KpiFunctionsPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o KpiFunctionsPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *KpiFunctions) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// KpiFunctionsInput is an input type that accepts KpiFunctionsArgs and KpiFunctionsOutput values.
// You can construct a concrete instance of `KpiFunctionsInput` via:
//
//	KpiFunctionsArgs{...}
type KpiFunctionsInput interface {
	pulumi.Input

	ToKpiFunctionsOutput() KpiFunctionsOutput
	ToKpiFunctionsOutputWithContext(context.Context) KpiFunctionsOutput
}

var kpiFunctionsPtrType = reflect.TypeOf((**KpiFunctions)(nil)).Elem()

type KpiFunctionsPtrInput interface {
	pulumi.Input

	ToKpiFunctionsPtrOutput() KpiFunctionsPtrOutput
	ToKpiFunctionsPtrOutputWithContext(context.Context) KpiFunctionsPtrOutput
}

type kpiFunctionsPtr string

func KpiFunctionsPtr(v string) KpiFunctionsPtrInput {
	return (*kpiFunctionsPtr)(&v)
}

func (*kpiFunctionsPtr) ElementType() reflect.Type {
	return kpiFunctionsPtrType
}

func (in *kpiFunctionsPtr) ToKpiFunctionsPtrOutput() KpiFunctionsPtrOutput {
	return pulumi.ToOutput(in).(KpiFunctionsPtrOutput)
}

func (in *kpiFunctionsPtr) ToKpiFunctionsPtrOutputWithContext(ctx context.Context) KpiFunctionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(KpiFunctionsPtrOutput)
}

// Link type.
type LinkTypes string

const (
	LinkTypesUpdateAlways = LinkTypes("UpdateAlways")
	LinkTypesCopyIfNull   = LinkTypes("CopyIfNull")
)

func (LinkTypes) ElementType() reflect.Type {
	return reflect.TypeOf((*LinkTypes)(nil)).Elem()
}

func (e LinkTypes) ToLinkTypesOutput() LinkTypesOutput {
	return pulumi.ToOutput(e).(LinkTypesOutput)
}

func (e LinkTypes) ToLinkTypesOutputWithContext(ctx context.Context) LinkTypesOutput {
	return pulumi.ToOutputWithContext(ctx, e).(LinkTypesOutput)
}

func (e LinkTypes) ToLinkTypesPtrOutput() LinkTypesPtrOutput {
	return e.ToLinkTypesPtrOutputWithContext(context.Background())
}

func (e LinkTypes) ToLinkTypesPtrOutputWithContext(ctx context.Context) LinkTypesPtrOutput {
	return LinkTypes(e).ToLinkTypesOutputWithContext(ctx).ToLinkTypesPtrOutputWithContext(ctx)
}

func (e LinkTypes) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e LinkTypes) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e LinkTypes) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e LinkTypes) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type LinkTypesOutput struct{ *pulumi.OutputState }

func (LinkTypesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LinkTypes)(nil)).Elem()
}

func (o LinkTypesOutput) ToLinkTypesOutput() LinkTypesOutput {
	return o
}

func (o LinkTypesOutput) ToLinkTypesOutputWithContext(ctx context.Context) LinkTypesOutput {
	return o
}

func (o LinkTypesOutput) ToLinkTypesPtrOutput() LinkTypesPtrOutput {
	return o.ToLinkTypesPtrOutputWithContext(context.Background())
}

func (o LinkTypesOutput) ToLinkTypesPtrOutputWithContext(ctx context.Context) LinkTypesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v LinkTypes) *LinkTypes {
		return &v
	}).(LinkTypesPtrOutput)
}

func (o LinkTypesOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o LinkTypesOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e LinkTypes) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o LinkTypesOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o LinkTypesOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e LinkTypes) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type LinkTypesPtrOutput struct{ *pulumi.OutputState }

func (LinkTypesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LinkTypes)(nil)).Elem()
}

func (o LinkTypesPtrOutput) ToLinkTypesPtrOutput() LinkTypesPtrOutput {
	return o
}

func (o LinkTypesPtrOutput) ToLinkTypesPtrOutputWithContext(ctx context.Context) LinkTypesPtrOutput {
	return o
}

func (o LinkTypesPtrOutput) Elem() LinkTypesOutput {
	return o.ApplyT(func(v *LinkTypes) LinkTypes {
		if v != nil {
			return *v
		}
		var ret LinkTypes
		return ret
	}).(LinkTypesOutput)
}

func (o LinkTypesPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o LinkTypesPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *LinkTypes) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// LinkTypesInput is an input type that accepts LinkTypesArgs and LinkTypesOutput values.
// You can construct a concrete instance of `LinkTypesInput` via:
//
//	LinkTypesArgs{...}
type LinkTypesInput interface {
	pulumi.Input

	ToLinkTypesOutput() LinkTypesOutput
	ToLinkTypesOutputWithContext(context.Context) LinkTypesOutput
}

var linkTypesPtrType = reflect.TypeOf((**LinkTypes)(nil)).Elem()

type LinkTypesPtrInput interface {
	pulumi.Input

	ToLinkTypesPtrOutput() LinkTypesPtrOutput
	ToLinkTypesPtrOutputWithContext(context.Context) LinkTypesPtrOutput
}

type linkTypesPtr string

func LinkTypesPtr(v string) LinkTypesPtrInput {
	return (*linkTypesPtr)(&v)
}

func (*linkTypesPtr) ElementType() reflect.Type {
	return linkTypesPtrType
}

func (in *linkTypesPtr) ToLinkTypesPtrOutput() LinkTypesPtrOutput {
	return pulumi.ToOutput(in).(LinkTypesPtrOutput)
}

func (in *linkTypesPtr) ToLinkTypesPtrOutputWithContext(ctx context.Context) LinkTypesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(LinkTypesPtrOutput)
}

// Type of roles.
type RoleTypes string

const (
	RoleTypesAdmin        = RoleTypes("Admin")
	RoleTypesReader       = RoleTypes("Reader")
	RoleTypesManageAdmin  = RoleTypes("ManageAdmin")
	RoleTypesManageReader = RoleTypes("ManageReader")
	RoleTypesDataAdmin    = RoleTypes("DataAdmin")
	RoleTypesDataReader   = RoleTypes("DataReader")
)

func (RoleTypes) ElementType() reflect.Type {
	return reflect.TypeOf((*RoleTypes)(nil)).Elem()
}

func (e RoleTypes) ToRoleTypesOutput() RoleTypesOutput {
	return pulumi.ToOutput(e).(RoleTypesOutput)
}

func (e RoleTypes) ToRoleTypesOutputWithContext(ctx context.Context) RoleTypesOutput {
	return pulumi.ToOutputWithContext(ctx, e).(RoleTypesOutput)
}

func (e RoleTypes) ToRoleTypesPtrOutput() RoleTypesPtrOutput {
	return e.ToRoleTypesPtrOutputWithContext(context.Background())
}

func (e RoleTypes) ToRoleTypesPtrOutputWithContext(ctx context.Context) RoleTypesPtrOutput {
	return RoleTypes(e).ToRoleTypesOutputWithContext(ctx).ToRoleTypesPtrOutputWithContext(ctx)
}

func (e RoleTypes) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e RoleTypes) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e RoleTypes) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e RoleTypes) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type RoleTypesOutput struct{ *pulumi.OutputState }

func (RoleTypesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RoleTypes)(nil)).Elem()
}

func (o RoleTypesOutput) ToRoleTypesOutput() RoleTypesOutput {
	return o
}

func (o RoleTypesOutput) ToRoleTypesOutputWithContext(ctx context.Context) RoleTypesOutput {
	return o
}

func (o RoleTypesOutput) ToRoleTypesPtrOutput() RoleTypesPtrOutput {
	return o.ToRoleTypesPtrOutputWithContext(context.Background())
}

func (o RoleTypesOutput) ToRoleTypesPtrOutputWithContext(ctx context.Context) RoleTypesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RoleTypes) *RoleTypes {
		return &v
	}).(RoleTypesPtrOutput)
}

func (o RoleTypesOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o RoleTypesOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e RoleTypes) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o RoleTypesOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o RoleTypesOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e RoleTypes) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type RoleTypesPtrOutput struct{ *pulumi.OutputState }

func (RoleTypesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RoleTypes)(nil)).Elem()
}

func (o RoleTypesPtrOutput) ToRoleTypesPtrOutput() RoleTypesPtrOutput {
	return o
}

func (o RoleTypesPtrOutput) ToRoleTypesPtrOutputWithContext(ctx context.Context) RoleTypesPtrOutput {
	return o
}

func (o RoleTypesPtrOutput) Elem() RoleTypesOutput {
	return o.ApplyT(func(v *RoleTypes) RoleTypes {
		if v != nil {
			return *v
		}
		var ret RoleTypes
		return ret
	}).(RoleTypesOutput)
}

func (o RoleTypesPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o RoleTypesPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *RoleTypes) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// RoleTypesInput is an input type that accepts RoleTypesArgs and RoleTypesOutput values.
// You can construct a concrete instance of `RoleTypesInput` via:
//
//	RoleTypesArgs{...}
type RoleTypesInput interface {
	pulumi.Input

	ToRoleTypesOutput() RoleTypesOutput
	ToRoleTypesOutputWithContext(context.Context) RoleTypesOutput
}

var roleTypesPtrType = reflect.TypeOf((**RoleTypes)(nil)).Elem()

type RoleTypesPtrInput interface {
	pulumi.Input

	ToRoleTypesPtrOutput() RoleTypesPtrOutput
	ToRoleTypesPtrOutputWithContext(context.Context) RoleTypesPtrOutput
}

type roleTypesPtr string

func RoleTypesPtr(v string) RoleTypesPtrInput {
	return (*roleTypesPtr)(&v)
}

func (*roleTypesPtr) ElementType() reflect.Type {
	return roleTypesPtrType
}

func (in *roleTypesPtr) ToRoleTypesPtrOutput() RoleTypesPtrOutput {
	return pulumi.ToOutput(in).(RoleTypesPtrOutput)
}

func (in *roleTypesPtr) ToRoleTypesPtrOutputWithContext(ctx context.Context) RoleTypesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(RoleTypesPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(CalculationWindowTypesOutput{})
	pulumi.RegisterOutputType(CalculationWindowTypesPtrOutput{})
	pulumi.RegisterOutputType(CardinalityTypesOutput{})
	pulumi.RegisterOutputType(CardinalityTypesPtrOutput{})
	pulumi.RegisterOutputType(CompletionOperationTypesOutput{})
	pulumi.RegisterOutputType(CompletionOperationTypesPtrOutput{})
	pulumi.RegisterOutputType(EntityTypesOutput{})
	pulumi.RegisterOutputType(EntityTypesPtrOutput{})
	pulumi.RegisterOutputType(ErrorManagementTypesOutput{})
	pulumi.RegisterOutputType(ErrorManagementTypesPtrOutput{})
	pulumi.RegisterOutputType(FormatTypesOutput{})
	pulumi.RegisterOutputType(FormatTypesPtrOutput{})
	pulumi.RegisterOutputType(FrequencyTypesOutput{})
	pulumi.RegisterOutputType(FrequencyTypesPtrOutput{})
	pulumi.RegisterOutputType(InstanceOperationTypeOutput{})
	pulumi.RegisterOutputType(InstanceOperationTypePtrOutput{})
	pulumi.RegisterOutputType(KpiFunctionsOutput{})
	pulumi.RegisterOutputType(KpiFunctionsPtrOutput{})
	pulumi.RegisterOutputType(LinkTypesOutput{})
	pulumi.RegisterOutputType(LinkTypesPtrOutput{})
	pulumi.RegisterOutputType(RoleTypesOutput{})
	pulumi.RegisterOutputType(RoleTypesPtrOutput{})
}
