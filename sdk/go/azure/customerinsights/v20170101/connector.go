// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v20170101

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// The connector resource format.
//
// Deprecated: Version 2017-01-01 will be removed in v2 of the provider.
type Connector struct {
	pulumi.CustomResourceState

	// ID of the connector.
	ConnectorId pulumi.IntOutput `pulumi:"connectorId"`
	// Name of the connector.
	ConnectorName pulumi.StringPtrOutput `pulumi:"connectorName"`
	// The connector properties.
	ConnectorProperties pulumi.MapOutput `pulumi:"connectorProperties"`
	// Type of connector.
	ConnectorType pulumi.StringOutput `pulumi:"connectorType"`
	// The created time.
	Created pulumi.StringOutput `pulumi:"created"`
	// Description of the connector.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// Display name of the connector.
	DisplayName pulumi.StringPtrOutput `pulumi:"displayName"`
	// If this is an internal connector.
	IsInternal pulumi.BoolPtrOutput `pulumi:"isInternal"`
	// The last modified time.
	LastModified pulumi.StringOutput `pulumi:"lastModified"`
	// Resource name.
	Name pulumi.StringOutput `pulumi:"name"`
	// State of connector.
	State pulumi.StringOutput `pulumi:"state"`
	// The hub name.
	TenantId pulumi.StringOutput `pulumi:"tenantId"`
	// Resource type.
	Type pulumi.StringOutput `pulumi:"type"`
}

// NewConnector registers a new resource with the given unique name, arguments, and options.
func NewConnector(ctx *pulumi.Context,
	name string, args *ConnectorArgs, opts ...pulumi.ResourceOption) (*Connector, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ConnectorProperties == nil {
		return nil, errors.New("invalid value for required argument 'ConnectorProperties'")
	}
	if args.ConnectorType == nil {
		return nil, errors.New("invalid value for required argument 'ConnectorType'")
	}
	if args.HubName == nil {
		return nil, errors.New("invalid value for required argument 'HubName'")
	}
	if args.ResourceGroupName == nil {
		return nil, errors.New("invalid value for required argument 'ResourceGroupName'")
	}
	aliases := pulumi.Aliases([]pulumi.Alias{
		{
			Type: pulumi.String("azure-native:customerinsights:Connector"),
		},
		{
			Type: pulumi.String("azure-native:customerinsights/v20170426:Connector"),
		},
	})
	opts = append(opts, aliases)
	var resource Connector
	err := ctx.RegisterResource("azure-native:customerinsights/v20170101:Connector", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetConnector gets an existing Connector resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetConnector(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ConnectorState, opts ...pulumi.ResourceOption) (*Connector, error) {
	var resource Connector
	err := ctx.ReadResource("azure-native:customerinsights/v20170101:Connector", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Connector resources.
type connectorState struct {
}

type ConnectorState struct {
}

func (ConnectorState) ElementType() reflect.Type {
	return reflect.TypeOf((*connectorState)(nil)).Elem()
}

type connectorArgs struct {
	// Name of the connector.
	ConnectorName *string `pulumi:"connectorName"`
	// The connector properties.
	ConnectorProperties map[string]interface{} `pulumi:"connectorProperties"`
	// Type of connector.
	ConnectorType string `pulumi:"connectorType"`
	// Description of the connector.
	Description *string `pulumi:"description"`
	// Display name of the connector.
	DisplayName *string `pulumi:"displayName"`
	// The name of the hub.
	HubName string `pulumi:"hubName"`
	// If this is an internal connector.
	IsInternal *bool `pulumi:"isInternal"`
	// The name of the resource group.
	ResourceGroupName string `pulumi:"resourceGroupName"`
}

// The set of arguments for constructing a Connector resource.
type ConnectorArgs struct {
	// Name of the connector.
	ConnectorName pulumi.StringPtrInput
	// The connector properties.
	ConnectorProperties pulumi.MapInput
	// Type of connector.
	ConnectorType pulumi.StringInput
	// Description of the connector.
	Description pulumi.StringPtrInput
	// Display name of the connector.
	DisplayName pulumi.StringPtrInput
	// The name of the hub.
	HubName pulumi.StringInput
	// If this is an internal connector.
	IsInternal pulumi.BoolPtrInput
	// The name of the resource group.
	ResourceGroupName pulumi.StringInput
}

func (ConnectorArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*connectorArgs)(nil)).Elem()
}

type ConnectorInput interface {
	pulumi.Input

	ToConnectorOutput() ConnectorOutput
	ToConnectorOutputWithContext(ctx context.Context) ConnectorOutput
}

func (*Connector) ElementType() reflect.Type {
	return reflect.TypeOf((**Connector)(nil)).Elem()
}

func (i *Connector) ToConnectorOutput() ConnectorOutput {
	return i.ToConnectorOutputWithContext(context.Background())
}

func (i *Connector) ToConnectorOutputWithContext(ctx context.Context) ConnectorOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectorOutput)
}

type ConnectorOutput struct{ *pulumi.OutputState }

func (ConnectorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Connector)(nil)).Elem()
}

func (o ConnectorOutput) ToConnectorOutput() ConnectorOutput {
	return o
}

func (o ConnectorOutput) ToConnectorOutputWithContext(ctx context.Context) ConnectorOutput {
	return o
}

// ID of the connector.
func (o ConnectorOutput) ConnectorId() pulumi.IntOutput {
	return o.ApplyT(func(v *Connector) pulumi.IntOutput { return v.ConnectorId }).(pulumi.IntOutput)
}

// Name of the connector.
func (o ConnectorOutput) ConnectorName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Connector) pulumi.StringPtrOutput { return v.ConnectorName }).(pulumi.StringPtrOutput)
}

// The connector properties.
func (o ConnectorOutput) ConnectorProperties() pulumi.MapOutput {
	return o.ApplyT(func(v *Connector) pulumi.MapOutput { return v.ConnectorProperties }).(pulumi.MapOutput)
}

// Type of connector.
func (o ConnectorOutput) ConnectorType() pulumi.StringOutput {
	return o.ApplyT(func(v *Connector) pulumi.StringOutput { return v.ConnectorType }).(pulumi.StringOutput)
}

// The created time.
func (o ConnectorOutput) Created() pulumi.StringOutput {
	return o.ApplyT(func(v *Connector) pulumi.StringOutput { return v.Created }).(pulumi.StringOutput)
}

// Description of the connector.
func (o ConnectorOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Connector) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// Display name of the connector.
func (o ConnectorOutput) DisplayName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Connector) pulumi.StringPtrOutput { return v.DisplayName }).(pulumi.StringPtrOutput)
}

// If this is an internal connector.
func (o ConnectorOutput) IsInternal() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Connector) pulumi.BoolPtrOutput { return v.IsInternal }).(pulumi.BoolPtrOutput)
}

// The last modified time.
func (o ConnectorOutput) LastModified() pulumi.StringOutput {
	return o.ApplyT(func(v *Connector) pulumi.StringOutput { return v.LastModified }).(pulumi.StringOutput)
}

// Resource name.
func (o ConnectorOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Connector) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// State of connector.
func (o ConnectorOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v *Connector) pulumi.StringOutput { return v.State }).(pulumi.StringOutput)
}

// The hub name.
func (o ConnectorOutput) TenantId() pulumi.StringOutput {
	return o.ApplyT(func(v *Connector) pulumi.StringOutput { return v.TenantId }).(pulumi.StringOutput)
}

// Resource type.
func (o ConnectorOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *Connector) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(ConnectorOutput{})
}
