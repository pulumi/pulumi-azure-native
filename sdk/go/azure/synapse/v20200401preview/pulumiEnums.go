// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v20200401preview

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Storage redundancy of the database.
type SqlDatabaseStorageRedundancyType string

const (
	SqlDatabaseStorageRedundancyTypeGeo     = SqlDatabaseStorageRedundancyType("Geo")
	SqlDatabaseStorageRedundancyTypeGeoZone = SqlDatabaseStorageRedundancyType("GeoZone")
	SqlDatabaseStorageRedundancyTypeLocal   = SqlDatabaseStorageRedundancyType("Local")
	SqlDatabaseStorageRedundancyTypeZone    = SqlDatabaseStorageRedundancyType("Zone")
)

func (SqlDatabaseStorageRedundancyType) ElementType() reflect.Type {
	return reflect.TypeOf((*SqlDatabaseStorageRedundancyType)(nil)).Elem()
}

func (e SqlDatabaseStorageRedundancyType) ToSqlDatabaseStorageRedundancyTypeOutput() SqlDatabaseStorageRedundancyTypeOutput {
	return pulumi.ToOutput(e).(SqlDatabaseStorageRedundancyTypeOutput)
}

func (e SqlDatabaseStorageRedundancyType) ToSqlDatabaseStorageRedundancyTypeOutputWithContext(ctx context.Context) SqlDatabaseStorageRedundancyTypeOutput {
	return pulumi.ToOutputWithContext(ctx, e).(SqlDatabaseStorageRedundancyTypeOutput)
}

func (e SqlDatabaseStorageRedundancyType) ToSqlDatabaseStorageRedundancyTypePtrOutput() SqlDatabaseStorageRedundancyTypePtrOutput {
	return e.ToSqlDatabaseStorageRedundancyTypePtrOutputWithContext(context.Background())
}

func (e SqlDatabaseStorageRedundancyType) ToSqlDatabaseStorageRedundancyTypePtrOutputWithContext(ctx context.Context) SqlDatabaseStorageRedundancyTypePtrOutput {
	return SqlDatabaseStorageRedundancyType(e).ToSqlDatabaseStorageRedundancyTypeOutputWithContext(ctx).ToSqlDatabaseStorageRedundancyTypePtrOutputWithContext(ctx)
}

func (e SqlDatabaseStorageRedundancyType) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e SqlDatabaseStorageRedundancyType) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e SqlDatabaseStorageRedundancyType) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e SqlDatabaseStorageRedundancyType) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type SqlDatabaseStorageRedundancyTypeOutput struct{ *pulumi.OutputState }

func (SqlDatabaseStorageRedundancyTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SqlDatabaseStorageRedundancyType)(nil)).Elem()
}

func (o SqlDatabaseStorageRedundancyTypeOutput) ToSqlDatabaseStorageRedundancyTypeOutput() SqlDatabaseStorageRedundancyTypeOutput {
	return o
}

func (o SqlDatabaseStorageRedundancyTypeOutput) ToSqlDatabaseStorageRedundancyTypeOutputWithContext(ctx context.Context) SqlDatabaseStorageRedundancyTypeOutput {
	return o
}

func (o SqlDatabaseStorageRedundancyTypeOutput) ToSqlDatabaseStorageRedundancyTypePtrOutput() SqlDatabaseStorageRedundancyTypePtrOutput {
	return o.ToSqlDatabaseStorageRedundancyTypePtrOutputWithContext(context.Background())
}

func (o SqlDatabaseStorageRedundancyTypeOutput) ToSqlDatabaseStorageRedundancyTypePtrOutputWithContext(ctx context.Context) SqlDatabaseStorageRedundancyTypePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SqlDatabaseStorageRedundancyType) *SqlDatabaseStorageRedundancyType {
		return &v
	}).(SqlDatabaseStorageRedundancyTypePtrOutput)
}

func (o SqlDatabaseStorageRedundancyTypeOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o SqlDatabaseStorageRedundancyTypeOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e SqlDatabaseStorageRedundancyType) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o SqlDatabaseStorageRedundancyTypeOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o SqlDatabaseStorageRedundancyTypeOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e SqlDatabaseStorageRedundancyType) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type SqlDatabaseStorageRedundancyTypePtrOutput struct{ *pulumi.OutputState }

func (SqlDatabaseStorageRedundancyTypePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SqlDatabaseStorageRedundancyType)(nil)).Elem()
}

func (o SqlDatabaseStorageRedundancyTypePtrOutput) ToSqlDatabaseStorageRedundancyTypePtrOutput() SqlDatabaseStorageRedundancyTypePtrOutput {
	return o
}

func (o SqlDatabaseStorageRedundancyTypePtrOutput) ToSqlDatabaseStorageRedundancyTypePtrOutputWithContext(ctx context.Context) SqlDatabaseStorageRedundancyTypePtrOutput {
	return o
}

func (o SqlDatabaseStorageRedundancyTypePtrOutput) Elem() SqlDatabaseStorageRedundancyTypeOutput {
	return o.ApplyT(func(v *SqlDatabaseStorageRedundancyType) SqlDatabaseStorageRedundancyType {
		if v != nil {
			return *v
		}
		var ret SqlDatabaseStorageRedundancyType
		return ret
	}).(SqlDatabaseStorageRedundancyTypeOutput)
}

func (o SqlDatabaseStorageRedundancyTypePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o SqlDatabaseStorageRedundancyTypePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *SqlDatabaseStorageRedundancyType) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// SqlDatabaseStorageRedundancyTypeInput is an input type that accepts SqlDatabaseStorageRedundancyTypeArgs and SqlDatabaseStorageRedundancyTypeOutput values.
// You can construct a concrete instance of `SqlDatabaseStorageRedundancyTypeInput` via:
//
//          SqlDatabaseStorageRedundancyTypeArgs{...}
type SqlDatabaseStorageRedundancyTypeInput interface {
	pulumi.Input

	ToSqlDatabaseStorageRedundancyTypeOutput() SqlDatabaseStorageRedundancyTypeOutput
	ToSqlDatabaseStorageRedundancyTypeOutputWithContext(context.Context) SqlDatabaseStorageRedundancyTypeOutput
}

var sqlDatabaseStorageRedundancyTypePtrType = reflect.TypeOf((**SqlDatabaseStorageRedundancyType)(nil)).Elem()

type SqlDatabaseStorageRedundancyTypePtrInput interface {
	pulumi.Input

	ToSqlDatabaseStorageRedundancyTypePtrOutput() SqlDatabaseStorageRedundancyTypePtrOutput
	ToSqlDatabaseStorageRedundancyTypePtrOutputWithContext(context.Context) SqlDatabaseStorageRedundancyTypePtrOutput
}

type sqlDatabaseStorageRedundancyTypePtr string

func SqlDatabaseStorageRedundancyTypePtr(v string) SqlDatabaseStorageRedundancyTypePtrInput {
	return (*sqlDatabaseStorageRedundancyTypePtr)(&v)
}

func (*sqlDatabaseStorageRedundancyTypePtr) ElementType() reflect.Type {
	return sqlDatabaseStorageRedundancyTypePtrType
}

func (in *sqlDatabaseStorageRedundancyTypePtr) ToSqlDatabaseStorageRedundancyTypePtrOutput() SqlDatabaseStorageRedundancyTypePtrOutput {
	return pulumi.ToOutput(in).(SqlDatabaseStorageRedundancyTypePtrOutput)
}

func (in *sqlDatabaseStorageRedundancyTypePtr) ToSqlDatabaseStorageRedundancyTypePtrOutputWithContext(ctx context.Context) SqlDatabaseStorageRedundancyTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(SqlDatabaseStorageRedundancyTypePtrOutput)
}

func init() {
	pulumi.RegisterOutputType(SqlDatabaseStorageRedundancyTypeOutput{})
	pulumi.RegisterOutputType(SqlDatabaseStorageRedundancyTypePtrOutput{})
}
