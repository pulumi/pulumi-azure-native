// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v20200401preview

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// A sql pool resource.
type SqlPoolsV3 struct {
	pulumi.CustomResourceState

	// The period of inactivity in minutes before automatically pausing the sql pool.
	AutoPauseTimer pulumi.IntPtrOutput `pulumi:"autoPauseTimer"`
	// Indicates whether the sql pool can automatically resume when connection attempts are made.
	AutoResume pulumi.BoolPtrOutput `pulumi:"autoResume"`
	// The current service level objective name of the sql pool.
	CurrentServiceObjectiveName pulumi.StringOutput `pulumi:"currentServiceObjectiveName"`
	// Kind of SqlPool.
	Kind pulumi.StringOutput `pulumi:"kind"`
	// The geo-location where the resource lives
	Location pulumi.StringOutput `pulumi:"location"`
	// The max service level objective name of the sql pool.
	MaxServiceObjectiveName pulumi.StringPtrOutput `pulumi:"maxServiceObjectiveName"`
	// The name of the resource
	Name pulumi.StringOutput `pulumi:"name"`
	// The requested service level objective name of the sql pool.
	RequestedServiceObjectiveName pulumi.StringOutput `pulumi:"requestedServiceObjectiveName"`
	// The sql pool SKU. The list of SKUs may vary by region and support offer.
	Sku SkuV3ResponsePtrOutput `pulumi:"sku"`
	// The Guid of the sql pool.
	SqlPoolGuid pulumi.StringOutput `pulumi:"sqlPoolGuid"`
	// The status of the sql pool.
	Status pulumi.StringOutput `pulumi:"status"`
	// SystemData of SqlPool.
	SystemData SystemDataResponseOutput `pulumi:"systemData"`
	// Resource tags.
	Tags pulumi.StringMapOutput `pulumi:"tags"`
	// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
	Type pulumi.StringOutput `pulumi:"type"`
}

// NewSqlPoolsV3 registers a new resource with the given unique name, arguments, and options.
func NewSqlPoolsV3(ctx *pulumi.Context,
	name string, args *SqlPoolsV3Args, opts ...pulumi.ResourceOption) (*SqlPoolsV3, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ResourceGroupName == nil {
		return nil, errors.New("invalid value for required argument 'ResourceGroupName'")
	}
	if args.WorkspaceName == nil {
		return nil, errors.New("invalid value for required argument 'WorkspaceName'")
	}
	aliases := pulumi.Aliases([]pulumi.Alias{
		{
			Type: pulumi.String("azure-nextgen:synapse/v20200401preview:SqlPoolsV3"),
		},
		{
			Type: pulumi.String("azure-native:synapse:SqlPoolsV3"),
		},
		{
			Type: pulumi.String("azure-nextgen:synapse:SqlPoolsV3"),
		},
		{
			Type: pulumi.String("azure-native:synapse/v20190601preview:SqlPoolsV3"),
		},
		{
			Type: pulumi.String("azure-nextgen:synapse/v20190601preview:SqlPoolsV3"),
		},
		{
			Type: pulumi.String("azure-native:synapse/v20201201:SqlPoolsV3"),
		},
		{
			Type: pulumi.String("azure-nextgen:synapse/v20201201:SqlPoolsV3"),
		},
		{
			Type: pulumi.String("azure-native:synapse/v20210301:SqlPoolsV3"),
		},
		{
			Type: pulumi.String("azure-nextgen:synapse/v20210301:SqlPoolsV3"),
		},
		{
			Type: pulumi.String("azure-native:synapse/v20210401preview:SqlPoolsV3"),
		},
		{
			Type: pulumi.String("azure-nextgen:synapse/v20210401preview:SqlPoolsV3"),
		},
		{
			Type: pulumi.String("azure-native:synapse/v20210501:SqlPoolsV3"),
		},
		{
			Type: pulumi.String("azure-nextgen:synapse/v20210501:SqlPoolsV3"),
		},
		{
			Type: pulumi.String("azure-native:synapse/v20210601preview:SqlPoolsV3"),
		},
		{
			Type: pulumi.String("azure-nextgen:synapse/v20210601preview:SqlPoolsV3"),
		},
	})
	opts = append(opts, aliases)
	var resource SqlPoolsV3
	err := ctx.RegisterResource("azure-native:synapse/v20200401preview:SqlPoolsV3", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSqlPoolsV3 gets an existing SqlPoolsV3 resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSqlPoolsV3(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SqlPoolsV3State, opts ...pulumi.ResourceOption) (*SqlPoolsV3, error) {
	var resource SqlPoolsV3
	err := ctx.ReadResource("azure-native:synapse/v20200401preview:SqlPoolsV3", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SqlPoolsV3 resources.
type sqlPoolsV3State struct {
}

type SqlPoolsV3State struct {
}

func (SqlPoolsV3State) ElementType() reflect.Type {
	return reflect.TypeOf((*sqlPoolsV3State)(nil)).Elem()
}

type sqlPoolsV3Args struct {
	// The period of inactivity in minutes before automatically pausing the sql pool.
	AutoPauseTimer *int `pulumi:"autoPauseTimer"`
	// Indicates whether the sql pool can automatically resume when connection attempts are made.
	AutoResume *bool `pulumi:"autoResume"`
	// The geo-location where the resource lives
	Location *string `pulumi:"location"`
	// The max service level objective name of the sql pool.
	MaxServiceObjectiveName *string `pulumi:"maxServiceObjectiveName"`
	// The name of the resource group. The name is case insensitive.
	ResourceGroupName string `pulumi:"resourceGroupName"`
	// The sql pool SKU. The list of SKUs may vary by region and support offer.
	Sku *SkuV3 `pulumi:"sku"`
	// The name of the sql pool.
	SqlPoolName *string `pulumi:"sqlPoolName"`
	// Resource tags.
	Tags map[string]string `pulumi:"tags"`
	// The name of the workspace.
	WorkspaceName string `pulumi:"workspaceName"`
}

// The set of arguments for constructing a SqlPoolsV3 resource.
type SqlPoolsV3Args struct {
	// The period of inactivity in minutes before automatically pausing the sql pool.
	AutoPauseTimer pulumi.IntPtrInput
	// Indicates whether the sql pool can automatically resume when connection attempts are made.
	AutoResume pulumi.BoolPtrInput
	// The geo-location where the resource lives
	Location pulumi.StringPtrInput
	// The max service level objective name of the sql pool.
	MaxServiceObjectiveName pulumi.StringPtrInput
	// The name of the resource group. The name is case insensitive.
	ResourceGroupName pulumi.StringInput
	// The sql pool SKU. The list of SKUs may vary by region and support offer.
	Sku SkuV3PtrInput
	// The name of the sql pool.
	SqlPoolName pulumi.StringPtrInput
	// Resource tags.
	Tags pulumi.StringMapInput
	// The name of the workspace.
	WorkspaceName pulumi.StringInput
}

func (SqlPoolsV3Args) ElementType() reflect.Type {
	return reflect.TypeOf((*sqlPoolsV3Args)(nil)).Elem()
}

type SqlPoolsV3Input interface {
	pulumi.Input

	ToSqlPoolsV3Output() SqlPoolsV3Output
	ToSqlPoolsV3OutputWithContext(ctx context.Context) SqlPoolsV3Output
}

func (*SqlPoolsV3) ElementType() reflect.Type {
	return reflect.TypeOf((*SqlPoolsV3)(nil))
}

func (i *SqlPoolsV3) ToSqlPoolsV3Output() SqlPoolsV3Output {
	return i.ToSqlPoolsV3OutputWithContext(context.Background())
}

func (i *SqlPoolsV3) ToSqlPoolsV3OutputWithContext(ctx context.Context) SqlPoolsV3Output {
	return pulumi.ToOutputWithContext(ctx, i).(SqlPoolsV3Output)
}

type SqlPoolsV3Output struct {
	*pulumi.OutputState
}

func (SqlPoolsV3Output) ElementType() reflect.Type {
	return reflect.TypeOf((*SqlPoolsV3)(nil))
}

func (o SqlPoolsV3Output) ToSqlPoolsV3Output() SqlPoolsV3Output {
	return o
}

func (o SqlPoolsV3Output) ToSqlPoolsV3OutputWithContext(ctx context.Context) SqlPoolsV3Output {
	return o
}

func init() {
	pulumi.RegisterOutputType(SqlPoolsV3Output{})
}
