// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v20200401preview

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// A sql database resource.
//
// Deprecated: Version 2020-04-01-preview will be removed in v2 of the provider.
type SqlDatabase struct {
	pulumi.CustomResourceState

	// The collation of the database.
	Collation pulumi.StringPtrOutput `pulumi:"collation"`
	// Sql database data retention.
	DataRetention SqlDatabaseDataRetentionResponsePtrOutput `pulumi:"dataRetention"`
	// The Guid of the database.
	DatabaseGuid pulumi.StringOutput `pulumi:"databaseGuid"`
	// The geo-location where the resource lives
	Location pulumi.StringOutput `pulumi:"location"`
	// The name of the resource
	Name pulumi.StringOutput `pulumi:"name"`
	// The status of the database.
	Status pulumi.StringOutput `pulumi:"status"`
	// The storage redundancy of the database.
	StorageRedundancy pulumi.StringPtrOutput `pulumi:"storageRedundancy"`
	// SystemData of SqlDatabase.
	SystemData SystemDataResponseOutput `pulumi:"systemData"`
	// Resource tags.
	Tags pulumi.StringMapOutput `pulumi:"tags"`
	// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
	Type pulumi.StringOutput `pulumi:"type"`
}

// NewSqlDatabase registers a new resource with the given unique name, arguments, and options.
func NewSqlDatabase(ctx *pulumi.Context,
	name string, args *SqlDatabaseArgs, opts ...pulumi.ResourceOption) (*SqlDatabase, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ResourceGroupName == nil {
		return nil, errors.New("invalid value for required argument 'ResourceGroupName'")
	}
	if args.WorkspaceName == nil {
		return nil, errors.New("invalid value for required argument 'WorkspaceName'")
	}
	var resource SqlDatabase
	err := ctx.RegisterResource("azure-native:synapse/v20200401preview:SqlDatabase", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSqlDatabase gets an existing SqlDatabase resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSqlDatabase(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SqlDatabaseState, opts ...pulumi.ResourceOption) (*SqlDatabase, error) {
	var resource SqlDatabase
	err := ctx.ReadResource("azure-native:synapse/v20200401preview:SqlDatabase", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SqlDatabase resources.
type sqlDatabaseState struct {
}

type SqlDatabaseState struct {
}

func (SqlDatabaseState) ElementType() reflect.Type {
	return reflect.TypeOf((*sqlDatabaseState)(nil)).Elem()
}

type sqlDatabaseArgs struct {
	// The collation of the database.
	Collation *string `pulumi:"collation"`
	// Sql database data retention.
	DataRetention *SqlDatabaseDataRetention `pulumi:"dataRetention"`
	// The geo-location where the resource lives
	Location *string `pulumi:"location"`
	// The name of the resource group. The name is case insensitive.
	ResourceGroupName string `pulumi:"resourceGroupName"`
	// The name of the sql database.
	SqlDatabaseName *string `pulumi:"sqlDatabaseName"`
	// The storage redundancy of the database.
	StorageRedundancy *string `pulumi:"storageRedundancy"`
	// Resource tags.
	Tags map[string]string `pulumi:"tags"`
	// The name of the workspace.
	WorkspaceName string `pulumi:"workspaceName"`
}

// The set of arguments for constructing a SqlDatabase resource.
type SqlDatabaseArgs struct {
	// The collation of the database.
	Collation pulumi.StringPtrInput
	// Sql database data retention.
	DataRetention SqlDatabaseDataRetentionPtrInput
	// The geo-location where the resource lives
	Location pulumi.StringPtrInput
	// The name of the resource group. The name is case insensitive.
	ResourceGroupName pulumi.StringInput
	// The name of the sql database.
	SqlDatabaseName pulumi.StringPtrInput
	// The storage redundancy of the database.
	StorageRedundancy pulumi.StringPtrInput
	// Resource tags.
	Tags pulumi.StringMapInput
	// The name of the workspace.
	WorkspaceName pulumi.StringInput
}

func (SqlDatabaseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*sqlDatabaseArgs)(nil)).Elem()
}

type SqlDatabaseInput interface {
	pulumi.Input

	ToSqlDatabaseOutput() SqlDatabaseOutput
	ToSqlDatabaseOutputWithContext(ctx context.Context) SqlDatabaseOutput
}

func (*SqlDatabase) ElementType() reflect.Type {
	return reflect.TypeOf((**SqlDatabase)(nil)).Elem()
}

func (i *SqlDatabase) ToSqlDatabaseOutput() SqlDatabaseOutput {
	return i.ToSqlDatabaseOutputWithContext(context.Background())
}

func (i *SqlDatabase) ToSqlDatabaseOutputWithContext(ctx context.Context) SqlDatabaseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SqlDatabaseOutput)
}

type SqlDatabaseOutput struct{ *pulumi.OutputState }

func (SqlDatabaseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SqlDatabase)(nil)).Elem()
}

func (o SqlDatabaseOutput) ToSqlDatabaseOutput() SqlDatabaseOutput {
	return o
}

func (o SqlDatabaseOutput) ToSqlDatabaseOutputWithContext(ctx context.Context) SqlDatabaseOutput {
	return o
}

// The collation of the database.
func (o SqlDatabaseOutput) Collation() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SqlDatabase) pulumi.StringPtrOutput { return v.Collation }).(pulumi.StringPtrOutput)
}

// Sql database data retention.
func (o SqlDatabaseOutput) DataRetention() SqlDatabaseDataRetentionResponsePtrOutput {
	return o.ApplyT(func(v *SqlDatabase) SqlDatabaseDataRetentionResponsePtrOutput { return v.DataRetention }).(SqlDatabaseDataRetentionResponsePtrOutput)
}

// The Guid of the database.
func (o SqlDatabaseOutput) DatabaseGuid() pulumi.StringOutput {
	return o.ApplyT(func(v *SqlDatabase) pulumi.StringOutput { return v.DatabaseGuid }).(pulumi.StringOutput)
}

// The geo-location where the resource lives
func (o SqlDatabaseOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *SqlDatabase) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// The name of the resource
func (o SqlDatabaseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *SqlDatabase) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The status of the database.
func (o SqlDatabaseOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *SqlDatabase) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

// The storage redundancy of the database.
func (o SqlDatabaseOutput) StorageRedundancy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SqlDatabase) pulumi.StringPtrOutput { return v.StorageRedundancy }).(pulumi.StringPtrOutput)
}

// SystemData of SqlDatabase.
func (o SqlDatabaseOutput) SystemData() SystemDataResponseOutput {
	return o.ApplyT(func(v *SqlDatabase) SystemDataResponseOutput { return v.SystemData }).(SystemDataResponseOutput)
}

// Resource tags.
func (o SqlDatabaseOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *SqlDatabase) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
func (o SqlDatabaseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *SqlDatabase) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(SqlDatabaseOutput{})
}
