// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v20200401preview

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// A sql database resource.
//
// Deprecated: Version 2020-04-01-preview will be removed in v2 of the provider.
func LookupSqlDatabase(ctx *pulumi.Context, args *LookupSqlDatabaseArgs, opts ...pulumi.InvokeOption) (*LookupSqlDatabaseResult, error) {
	var rv LookupSqlDatabaseResult
	err := ctx.Invoke("azure-native:synapse/v20200401preview:getSqlDatabase", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type LookupSqlDatabaseArgs struct {
	// The name of the resource group. The name is case insensitive.
	ResourceGroupName string `pulumi:"resourceGroupName"`
	// The name of the sql database.
	SqlDatabaseName string `pulumi:"sqlDatabaseName"`
	// The name of the workspace.
	WorkspaceName string `pulumi:"workspaceName"`
}

// A sql database resource.
type LookupSqlDatabaseResult struct {
	// The collation of the database.
	Collation *string `pulumi:"collation"`
	// Sql database data retention.
	DataRetention *SqlDatabaseDataRetentionResponse `pulumi:"dataRetention"`
	// The Guid of the database.
	DatabaseGuid string `pulumi:"databaseGuid"`
	// Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
	Id string `pulumi:"id"`
	// The geo-location where the resource lives
	Location string `pulumi:"location"`
	// The name of the resource
	Name string `pulumi:"name"`
	// The status of the database.
	Status string `pulumi:"status"`
	// The storage redundancy of the database.
	StorageRedundancy *string `pulumi:"storageRedundancy"`
	// SystemData of SqlDatabase.
	SystemData SystemDataResponse `pulumi:"systemData"`
	// Resource tags.
	Tags map[string]string `pulumi:"tags"`
	// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
	Type string `pulumi:"type"`
}

func LookupSqlDatabaseOutput(ctx *pulumi.Context, args LookupSqlDatabaseOutputArgs, opts ...pulumi.InvokeOption) LookupSqlDatabaseResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupSqlDatabaseResult, error) {
			args := v.(LookupSqlDatabaseArgs)
			r, err := LookupSqlDatabase(ctx, &args, opts...)
			var s LookupSqlDatabaseResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupSqlDatabaseResultOutput)
}

type LookupSqlDatabaseOutputArgs struct {
	// The name of the resource group. The name is case insensitive.
	ResourceGroupName pulumi.StringInput `pulumi:"resourceGroupName"`
	// The name of the sql database.
	SqlDatabaseName pulumi.StringInput `pulumi:"sqlDatabaseName"`
	// The name of the workspace.
	WorkspaceName pulumi.StringInput `pulumi:"workspaceName"`
}

func (LookupSqlDatabaseOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupSqlDatabaseArgs)(nil)).Elem()
}

// A sql database resource.
type LookupSqlDatabaseResultOutput struct{ *pulumi.OutputState }

func (LookupSqlDatabaseResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupSqlDatabaseResult)(nil)).Elem()
}

func (o LookupSqlDatabaseResultOutput) ToLookupSqlDatabaseResultOutput() LookupSqlDatabaseResultOutput {
	return o
}

func (o LookupSqlDatabaseResultOutput) ToLookupSqlDatabaseResultOutputWithContext(ctx context.Context) LookupSqlDatabaseResultOutput {
	return o
}

// The collation of the database.
func (o LookupSqlDatabaseResultOutput) Collation() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupSqlDatabaseResult) *string { return v.Collation }).(pulumi.StringPtrOutput)
}

// Sql database data retention.
func (o LookupSqlDatabaseResultOutput) DataRetention() SqlDatabaseDataRetentionResponsePtrOutput {
	return o.ApplyT(func(v LookupSqlDatabaseResult) *SqlDatabaseDataRetentionResponse { return v.DataRetention }).(SqlDatabaseDataRetentionResponsePtrOutput)
}

// The Guid of the database.
func (o LookupSqlDatabaseResultOutput) DatabaseGuid() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSqlDatabaseResult) string { return v.DatabaseGuid }).(pulumi.StringOutput)
}

// Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
func (o LookupSqlDatabaseResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSqlDatabaseResult) string { return v.Id }).(pulumi.StringOutput)
}

// The geo-location where the resource lives
func (o LookupSqlDatabaseResultOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSqlDatabaseResult) string { return v.Location }).(pulumi.StringOutput)
}

// The name of the resource
func (o LookupSqlDatabaseResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSqlDatabaseResult) string { return v.Name }).(pulumi.StringOutput)
}

// The status of the database.
func (o LookupSqlDatabaseResultOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSqlDatabaseResult) string { return v.Status }).(pulumi.StringOutput)
}

// The storage redundancy of the database.
func (o LookupSqlDatabaseResultOutput) StorageRedundancy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupSqlDatabaseResult) *string { return v.StorageRedundancy }).(pulumi.StringPtrOutput)
}

// SystemData of SqlDatabase.
func (o LookupSqlDatabaseResultOutput) SystemData() SystemDataResponseOutput {
	return o.ApplyT(func(v LookupSqlDatabaseResult) SystemDataResponse { return v.SystemData }).(SystemDataResponseOutput)
}

// Resource tags.
func (o LookupSqlDatabaseResultOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v LookupSqlDatabaseResult) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
func (o LookupSqlDatabaseResultOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSqlDatabaseResult) string { return v.Type }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupSqlDatabaseResultOutput{})
}
