// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v20210401preview

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// SKU name.
type AzureSkuName string

const (
	AzureSkuName_Standard_DS13_v2_1TB_PS    = AzureSkuName("Standard_DS13_v2+1TB_PS")
	AzureSkuName_Standard_DS13_v2_2TB_PS    = AzureSkuName("Standard_DS13_v2+2TB_PS")
	AzureSkuName_Standard_DS14_v2_3TB_PS    = AzureSkuName("Standard_DS14_v2+3TB_PS")
	AzureSkuName_Standard_DS14_v2_4TB_PS    = AzureSkuName("Standard_DS14_v2+4TB_PS")
	AzureSkuName_Standard_D13_v2            = AzureSkuName("Standard_D13_v2")
	AzureSkuName_Standard_D14_v2            = AzureSkuName("Standard_D14_v2")
	AzureSkuName_Standard_L8s               = AzureSkuName("Standard_L8s")
	AzureSkuName_Standard_L16s              = AzureSkuName("Standard_L16s")
	AzureSkuName_Standard_L8s_v2            = AzureSkuName("Standard_L8s_v2")
	AzureSkuName_Standard_L16s_v2           = AzureSkuName("Standard_L16s_v2")
	AzureSkuName_Standard_D11_v2            = AzureSkuName("Standard_D11_v2")
	AzureSkuName_Standard_D12_v2            = AzureSkuName("Standard_D12_v2")
	AzureSkuName_Standard_L4s               = AzureSkuName("Standard_L4s")
	AzureSkuName_Dev_No_SLA_Standard_D11_v2 = AzureSkuName("Dev(No SLA)_Standard_D11_v2")
	AzureSkuName_Standard_E64i_v3           = AzureSkuName("Standard_E64i_v3")
	AzureSkuName_Standard_E80ids_v4         = AzureSkuName("Standard_E80ids_v4")
	AzureSkuName_Standard_E2a_v4            = AzureSkuName("Standard_E2a_v4")
	AzureSkuName_Standard_E4a_v4            = AzureSkuName("Standard_E4a_v4")
	AzureSkuName_Standard_E8a_v4            = AzureSkuName("Standard_E8a_v4")
	AzureSkuName_Standard_E16a_v4           = AzureSkuName("Standard_E16a_v4")
	AzureSkuName_Standard_E8as_v4_1TB_PS    = AzureSkuName("Standard_E8as_v4+1TB_PS")
	AzureSkuName_Standard_E8as_v4_2TB_PS    = AzureSkuName("Standard_E8as_v4+2TB_PS")
	AzureSkuName_Standard_E16as_v4_3TB_PS   = AzureSkuName("Standard_E16as_v4+3TB_PS")
	AzureSkuName_Standard_E16as_v4_4TB_PS   = AzureSkuName("Standard_E16as_v4+4TB_PS")
	AzureSkuName_Dev_No_SLA_Standard_E2a_v4 = AzureSkuName("Dev(No SLA)_Standard_E2a_v4")
)

// SKU tier.
type AzureSkuTier string

const (
	AzureSkuTierBasic    = AzureSkuTier("Basic")
	AzureSkuTierStandard = AzureSkuTier("Standard")
)

// The name of blob storage event type to process.
type BlobStorageEventType string

const (
	BlobStorageEventType_Microsoft_Storage_BlobCreated = BlobStorageEventType("Microsoft.Storage.BlobCreated")
	BlobStorageEventType_Microsoft_Storage_BlobRenamed = BlobStorageEventType("Microsoft.Storage.BlobRenamed")
)

// Cluster principal role.
type ClusterPrincipalRole string

const (
	ClusterPrincipalRoleAllDatabasesAdmin  = ClusterPrincipalRole("AllDatabasesAdmin")
	ClusterPrincipalRoleAllDatabasesViewer = ClusterPrincipalRole("AllDatabasesViewer")
)

// The event hub messages compression type
type Compression string

const (
	CompressionNone = Compression("None")
	CompressionGZip = Compression("GZip")
)

// Specifies the mode of sql pool creation.
//
// Default: regular sql pool creation.
//
// PointInTimeRestore: Creates a sql pool by restoring a point in time backup of an existing sql pool. sourceDatabaseId must be specified as the resource ID of the existing sql pool, and restorePointInTime must be specified.
//
// Recovery: Creates a sql pool by a geo-replicated backup. sourceDatabaseId  must be specified as the recoverableDatabaseId to restore.
//
// Restore: Creates a sql pool by restoring a backup of a deleted sql  pool. SourceDatabaseId should be the sql pool's original resource ID. SourceDatabaseId and sourceDatabaseDeletionDate must be specified.
type CreateMode string

const (
	CreateModeDefault            = CreateMode("Default")
	CreateModePointInTimeRestore = CreateMode("PointInTimeRestore")
	CreateModeRecovery           = CreateMode("Recovery")
	CreateModeRestore            = CreateMode("Restore")
)

// Kind of the endpoint for the data connection
type DataConnectionKind string

const (
	DataConnectionKindEventHub  = DataConnectionKind("EventHub")
	DataConnectionKindEventGrid = DataConnectionKind("EventGrid")
	DataConnectionKindIotHub    = DataConnectionKind("IotHub")
)

// Compute type of the cluster which will execute data flow job.
type DataFlowComputeType string

const (
	DataFlowComputeTypeGeneral          = DataFlowComputeType("General")
	DataFlowComputeTypeMemoryOptimized  = DataFlowComputeType("MemoryOptimized")
	DataFlowComputeTypeComputeOptimized = DataFlowComputeType("ComputeOptimized")
)

// Database principal role.
type DatabasePrincipalRole string

const (
	DatabasePrincipalRoleAdmin              = DatabasePrincipalRole("Admin")
	DatabasePrincipalRoleIngestor           = DatabasePrincipalRole("Ingestor")
	DatabasePrincipalRoleMonitor            = DatabasePrincipalRole("Monitor")
	DatabasePrincipalRoleUser               = DatabasePrincipalRole("User")
	DatabasePrincipalRoleUnrestrictedViewer = DatabasePrincipalRole("UnrestrictedViewer")
	DatabasePrincipalRoleViewer             = DatabasePrincipalRole("Viewer")
)

// The engine type
type EngineType string

const (
	EngineTypeV2 = EngineType("V2")
	EngineTypeV3 = EngineType("V3")
)

// The data format of the message. Optionally the data format can be added to each message.
type EventGridDataFormat string

const (
	EventGridDataFormatMULTIJSON  = EventGridDataFormat("MULTIJSON")
	EventGridDataFormatJSON       = EventGridDataFormat("JSON")
	EventGridDataFormatCSV        = EventGridDataFormat("CSV")
	EventGridDataFormatTSV        = EventGridDataFormat("TSV")
	EventGridDataFormatSCSV       = EventGridDataFormat("SCSV")
	EventGridDataFormatSOHSV      = EventGridDataFormat("SOHSV")
	EventGridDataFormatPSV        = EventGridDataFormat("PSV")
	EventGridDataFormatTXT        = EventGridDataFormat("TXT")
	EventGridDataFormatRAW        = EventGridDataFormat("RAW")
	EventGridDataFormatSINGLEJSON = EventGridDataFormat("SINGLEJSON")
	EventGridDataFormatAVRO       = EventGridDataFormat("AVRO")
	EventGridDataFormatTSVE       = EventGridDataFormat("TSVE")
	EventGridDataFormatPARQUET    = EventGridDataFormat("PARQUET")
	EventGridDataFormatORC        = EventGridDataFormat("ORC")
	EventGridDataFormatAPACHEAVRO = EventGridDataFormat("APACHEAVRO")
	EventGridDataFormatW3CLOGFILE = EventGridDataFormat("W3CLOGFILE")
)

// The data format of the message. Optionally the data format can be added to each message.
type EventHubDataFormat string

const (
	EventHubDataFormatMULTIJSON  = EventHubDataFormat("MULTIJSON")
	EventHubDataFormatJSON       = EventHubDataFormat("JSON")
	EventHubDataFormatCSV        = EventHubDataFormat("CSV")
	EventHubDataFormatTSV        = EventHubDataFormat("TSV")
	EventHubDataFormatSCSV       = EventHubDataFormat("SCSV")
	EventHubDataFormatSOHSV      = EventHubDataFormat("SOHSV")
	EventHubDataFormatPSV        = EventHubDataFormat("PSV")
	EventHubDataFormatTXT        = EventHubDataFormat("TXT")
	EventHubDataFormatRAW        = EventHubDataFormat("RAW")
	EventHubDataFormatSINGLEJSON = EventHubDataFormat("SINGLEJSON")
	EventHubDataFormatAVRO       = EventHubDataFormat("AVRO")
	EventHubDataFormatTSVE       = EventHubDataFormat("TSVE")
	EventHubDataFormatPARQUET    = EventHubDataFormat("PARQUET")
	EventHubDataFormatORC        = EventHubDataFormat("ORC")
	EventHubDataFormatAPACHEAVRO = EventHubDataFormat("APACHEAVRO")
	EventHubDataFormatW3CLOGFILE = EventHubDataFormat("W3CLOGFILE")
)

// The edition for the SSIS Integration Runtime
type IntegrationRuntimeEdition string

const (
	IntegrationRuntimeEditionStandard   = IntegrationRuntimeEdition("Standard")
	IntegrationRuntimeEditionEnterprise = IntegrationRuntimeEdition("Enterprise")
)

// The type of this referenced entity.
type IntegrationRuntimeEntityReferenceType string

const (
	IntegrationRuntimeEntityReferenceTypeIntegrationRuntimeReference = IntegrationRuntimeEntityReferenceType("IntegrationRuntimeReference")
	IntegrationRuntimeEntityReferenceTypeLinkedServiceReference      = IntegrationRuntimeEntityReferenceType("LinkedServiceReference")
)

// License type for bringing your own license scenario.
type IntegrationRuntimeLicenseType string

const (
	IntegrationRuntimeLicenseTypeBasePrice       = IntegrationRuntimeLicenseType("BasePrice")
	IntegrationRuntimeLicenseTypeLicenseIncluded = IntegrationRuntimeLicenseType("LicenseIncluded")
)

// The pricing tier for the catalog database. The valid values could be found in https://azure.microsoft.com/en-us/pricing/details/sql-database/
type IntegrationRuntimeSsisCatalogPricingTier string

const (
	IntegrationRuntimeSsisCatalogPricingTierBasic     = IntegrationRuntimeSsisCatalogPricingTier("Basic")
	IntegrationRuntimeSsisCatalogPricingTierStandard  = IntegrationRuntimeSsisCatalogPricingTier("Standard")
	IntegrationRuntimeSsisCatalogPricingTierPremium   = IntegrationRuntimeSsisCatalogPricingTier("Premium")
	IntegrationRuntimeSsisCatalogPricingTierPremiumRS = IntegrationRuntimeSsisCatalogPricingTier("PremiumRS")
)

// Type of integration runtime.
type IntegrationRuntimeType string

const (
	IntegrationRuntimeTypeManaged    = IntegrationRuntimeType("Managed")
	IntegrationRuntimeTypeSelfHosted = IntegrationRuntimeType("SelfHosted")
)

// The data format of the message. Optionally the data format can be added to each message.
type IotHubDataFormat string

const (
	IotHubDataFormatMULTIJSON  = IotHubDataFormat("MULTIJSON")
	IotHubDataFormatJSON       = IotHubDataFormat("JSON")
	IotHubDataFormatCSV        = IotHubDataFormat("CSV")
	IotHubDataFormatTSV        = IotHubDataFormat("TSV")
	IotHubDataFormatSCSV       = IotHubDataFormat("SCSV")
	IotHubDataFormatSOHSV      = IotHubDataFormat("SOHSV")
	IotHubDataFormatPSV        = IotHubDataFormat("PSV")
	IotHubDataFormatTXT        = IotHubDataFormat("TXT")
	IotHubDataFormatRAW        = IotHubDataFormat("RAW")
	IotHubDataFormatSINGLEJSON = IotHubDataFormat("SINGLEJSON")
	IotHubDataFormatAVRO       = IotHubDataFormat("AVRO")
	IotHubDataFormatTSVE       = IotHubDataFormat("TSVE")
	IotHubDataFormatPARQUET    = IotHubDataFormat("PARQUET")
	IotHubDataFormatORC        = IotHubDataFormat("ORC")
	IotHubDataFormatAPACHEAVRO = IotHubDataFormat("APACHEAVRO")
	IotHubDataFormatW3CLOGFILE = IotHubDataFormat("W3CLOGFILE")
)

// Kind of the database
type Kind string

const (
	KindReadWrite         = Kind("ReadWrite")
	KindReadOnlyFollowing = Kind("ReadOnlyFollowing")
)

// The level of compute power that each node in the Big Data pool has.
type NodeSize string

const (
	NodeSizeNone     = NodeSize("None")
	NodeSizeSmall    = NodeSize("Small")
	NodeSizeMedium   = NodeSize("Medium")
	NodeSizeLarge    = NodeSize("Large")
	NodeSizeXLarge   = NodeSize("XLarge")
	NodeSizeXXLarge  = NodeSize("XXLarge")
	NodeSizeXXXLarge = NodeSize("XXXLarge")
)

// The kind of nodes that the Big Data pool provides.
type NodeSizeFamily string

const (
	NodeSizeFamilyNone                    = NodeSizeFamily("None")
	NodeSizeFamilyMemoryOptimized         = NodeSizeFamily("MemoryOptimized")
	NodeSizeFamilyHardwareAcceleratedFPGA = NodeSizeFamily("HardwareAcceleratedFPGA")
	NodeSizeFamilyHardwareAcceleratedGPU  = NodeSizeFamily("HardwareAcceleratedGPU")
)

// Principal type.
type PrincipalType string

const (
	PrincipalTypeApp   = PrincipalType("App")
	PrincipalTypeGroup = PrincipalType("Group")
	PrincipalTypeUser  = PrincipalType("User")
)

// The type of managed identity for the workspace
type ResourceIdentityType string

const (
	ResourceIdentityTypeNone           = ResourceIdentityType("None")
	ResourceIdentityTypeSystemAssigned = ResourceIdentityType("SystemAssigned")
)

func (ResourceIdentityType) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceIdentityType)(nil)).Elem()
}

func (e ResourceIdentityType) ToResourceIdentityTypeOutput() ResourceIdentityTypeOutput {
	return pulumi.ToOutput(e).(ResourceIdentityTypeOutput)
}

func (e ResourceIdentityType) ToResourceIdentityTypeOutputWithContext(ctx context.Context) ResourceIdentityTypeOutput {
	return pulumi.ToOutputWithContext(ctx, e).(ResourceIdentityTypeOutput)
}

func (e ResourceIdentityType) ToResourceIdentityTypePtrOutput() ResourceIdentityTypePtrOutput {
	return e.ToResourceIdentityTypePtrOutputWithContext(context.Background())
}

func (e ResourceIdentityType) ToResourceIdentityTypePtrOutputWithContext(ctx context.Context) ResourceIdentityTypePtrOutput {
	return ResourceIdentityType(e).ToResourceIdentityTypeOutputWithContext(ctx).ToResourceIdentityTypePtrOutputWithContext(ctx)
}

func (e ResourceIdentityType) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e ResourceIdentityType) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e ResourceIdentityType) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e ResourceIdentityType) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type ResourceIdentityTypeOutput struct{ *pulumi.OutputState }

func (ResourceIdentityTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceIdentityType)(nil)).Elem()
}

func (o ResourceIdentityTypeOutput) ToResourceIdentityTypeOutput() ResourceIdentityTypeOutput {
	return o
}

func (o ResourceIdentityTypeOutput) ToResourceIdentityTypeOutputWithContext(ctx context.Context) ResourceIdentityTypeOutput {
	return o
}

func (o ResourceIdentityTypeOutput) ToResourceIdentityTypePtrOutput() ResourceIdentityTypePtrOutput {
	return o.ToResourceIdentityTypePtrOutputWithContext(context.Background())
}

func (o ResourceIdentityTypeOutput) ToResourceIdentityTypePtrOutputWithContext(ctx context.Context) ResourceIdentityTypePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ResourceIdentityType) *ResourceIdentityType {
		return &v
	}).(ResourceIdentityTypePtrOutput)
}

func (o ResourceIdentityTypeOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o ResourceIdentityTypeOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e ResourceIdentityType) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o ResourceIdentityTypeOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o ResourceIdentityTypeOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e ResourceIdentityType) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type ResourceIdentityTypePtrOutput struct{ *pulumi.OutputState }

func (ResourceIdentityTypePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ResourceIdentityType)(nil)).Elem()
}

func (o ResourceIdentityTypePtrOutput) ToResourceIdentityTypePtrOutput() ResourceIdentityTypePtrOutput {
	return o
}

func (o ResourceIdentityTypePtrOutput) ToResourceIdentityTypePtrOutputWithContext(ctx context.Context) ResourceIdentityTypePtrOutput {
	return o
}

func (o ResourceIdentityTypePtrOutput) Elem() ResourceIdentityTypeOutput {
	return o.ApplyT(func(v *ResourceIdentityType) ResourceIdentityType {
		if v != nil {
			return *v
		}
		var ret ResourceIdentityType
		return ret
	}).(ResourceIdentityTypeOutput)
}

func (o ResourceIdentityTypePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o ResourceIdentityTypePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *ResourceIdentityType) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// ResourceIdentityTypeInput is an input type that accepts ResourceIdentityTypeArgs and ResourceIdentityTypeOutput values.
// You can construct a concrete instance of `ResourceIdentityTypeInput` via:
//
//	ResourceIdentityTypeArgs{...}
type ResourceIdentityTypeInput interface {
	pulumi.Input

	ToResourceIdentityTypeOutput() ResourceIdentityTypeOutput
	ToResourceIdentityTypeOutputWithContext(context.Context) ResourceIdentityTypeOutput
}

var resourceIdentityTypePtrType = reflect.TypeOf((**ResourceIdentityType)(nil)).Elem()

type ResourceIdentityTypePtrInput interface {
	pulumi.Input

	ToResourceIdentityTypePtrOutput() ResourceIdentityTypePtrOutput
	ToResourceIdentityTypePtrOutputWithContext(context.Context) ResourceIdentityTypePtrOutput
}

type resourceIdentityTypePtr string

func ResourceIdentityTypePtr(v string) ResourceIdentityTypePtrInput {
	return (*resourceIdentityTypePtr)(&v)
}

func (*resourceIdentityTypePtr) ElementType() reflect.Type {
	return resourceIdentityTypePtrType
}

func (in *resourceIdentityTypePtr) ToResourceIdentityTypePtrOutput() ResourceIdentityTypePtrOutput {
	return pulumi.ToOutput(in).(ResourceIdentityTypePtrOutput)
}

func (in *resourceIdentityTypePtr) ToResourceIdentityTypePtrOutputWithContext(ctx context.Context) ResourceIdentityTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(ResourceIdentityTypePtrOutput)
}

type SensitivityLabelRank string

const (
	SensitivityLabelRankNone     = SensitivityLabelRank("None")
	SensitivityLabelRankLow      = SensitivityLabelRank("Low")
	SensitivityLabelRankMedium   = SensitivityLabelRank("Medium")
	SensitivityLabelRankHigh     = SensitivityLabelRank("High")
	SensitivityLabelRankCritical = SensitivityLabelRank("Critical")
)

func (SensitivityLabelRank) ElementType() reflect.Type {
	return reflect.TypeOf((*SensitivityLabelRank)(nil)).Elem()
}

func (e SensitivityLabelRank) ToSensitivityLabelRankOutput() SensitivityLabelRankOutput {
	return pulumi.ToOutput(e).(SensitivityLabelRankOutput)
}

func (e SensitivityLabelRank) ToSensitivityLabelRankOutputWithContext(ctx context.Context) SensitivityLabelRankOutput {
	return pulumi.ToOutputWithContext(ctx, e).(SensitivityLabelRankOutput)
}

func (e SensitivityLabelRank) ToSensitivityLabelRankPtrOutput() SensitivityLabelRankPtrOutput {
	return e.ToSensitivityLabelRankPtrOutputWithContext(context.Background())
}

func (e SensitivityLabelRank) ToSensitivityLabelRankPtrOutputWithContext(ctx context.Context) SensitivityLabelRankPtrOutput {
	return SensitivityLabelRank(e).ToSensitivityLabelRankOutputWithContext(ctx).ToSensitivityLabelRankPtrOutputWithContext(ctx)
}

func (e SensitivityLabelRank) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e SensitivityLabelRank) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e SensitivityLabelRank) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e SensitivityLabelRank) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type SensitivityLabelRankOutput struct{ *pulumi.OutputState }

func (SensitivityLabelRankOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SensitivityLabelRank)(nil)).Elem()
}

func (o SensitivityLabelRankOutput) ToSensitivityLabelRankOutput() SensitivityLabelRankOutput {
	return o
}

func (o SensitivityLabelRankOutput) ToSensitivityLabelRankOutputWithContext(ctx context.Context) SensitivityLabelRankOutput {
	return o
}

func (o SensitivityLabelRankOutput) ToSensitivityLabelRankPtrOutput() SensitivityLabelRankPtrOutput {
	return o.ToSensitivityLabelRankPtrOutputWithContext(context.Background())
}

func (o SensitivityLabelRankOutput) ToSensitivityLabelRankPtrOutputWithContext(ctx context.Context) SensitivityLabelRankPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SensitivityLabelRank) *SensitivityLabelRank {
		return &v
	}).(SensitivityLabelRankPtrOutput)
}

func (o SensitivityLabelRankOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o SensitivityLabelRankOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e SensitivityLabelRank) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o SensitivityLabelRankOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o SensitivityLabelRankOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e SensitivityLabelRank) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type SensitivityLabelRankPtrOutput struct{ *pulumi.OutputState }

func (SensitivityLabelRankPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SensitivityLabelRank)(nil)).Elem()
}

func (o SensitivityLabelRankPtrOutput) ToSensitivityLabelRankPtrOutput() SensitivityLabelRankPtrOutput {
	return o
}

func (o SensitivityLabelRankPtrOutput) ToSensitivityLabelRankPtrOutputWithContext(ctx context.Context) SensitivityLabelRankPtrOutput {
	return o
}

func (o SensitivityLabelRankPtrOutput) Elem() SensitivityLabelRankOutput {
	return o.ApplyT(func(v *SensitivityLabelRank) SensitivityLabelRank {
		if v != nil {
			return *v
		}
		var ret SensitivityLabelRank
		return ret
	}).(SensitivityLabelRankOutput)
}

func (o SensitivityLabelRankPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o SensitivityLabelRankPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *SensitivityLabelRank) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// SensitivityLabelRankInput is an input type that accepts SensitivityLabelRankArgs and SensitivityLabelRankOutput values.
// You can construct a concrete instance of `SensitivityLabelRankInput` via:
//
//	SensitivityLabelRankArgs{...}
type SensitivityLabelRankInput interface {
	pulumi.Input

	ToSensitivityLabelRankOutput() SensitivityLabelRankOutput
	ToSensitivityLabelRankOutputWithContext(context.Context) SensitivityLabelRankOutput
}

var sensitivityLabelRankPtrType = reflect.TypeOf((**SensitivityLabelRank)(nil)).Elem()

type SensitivityLabelRankPtrInput interface {
	pulumi.Input

	ToSensitivityLabelRankPtrOutput() SensitivityLabelRankPtrOutput
	ToSensitivityLabelRankPtrOutputWithContext(context.Context) SensitivityLabelRankPtrOutput
}

type sensitivityLabelRankPtr string

func SensitivityLabelRankPtr(v string) SensitivityLabelRankPtrInput {
	return (*sensitivityLabelRankPtr)(&v)
}

func (*sensitivityLabelRankPtr) ElementType() reflect.Type {
	return sensitivityLabelRankPtrType
}

func (in *sensitivityLabelRankPtr) ToSensitivityLabelRankPtrOutput() SensitivityLabelRankPtrOutput {
	return pulumi.ToOutput(in).(SensitivityLabelRankPtrOutput)
}

func (in *sensitivityLabelRankPtr) ToSensitivityLabelRankPtrOutputWithContext(ctx context.Context) SensitivityLabelRankPtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(SensitivityLabelRankPtrOutput)
}

// The storage account type used to store backups for this sql pool.
type StorageAccountType string

const (
	StorageAccountTypeGRS = StorageAccountType("GRS")
	StorageAccountTypeLRS = StorageAccountType("LRS")
	StorageAccountTypeZRS = StorageAccountType("ZRS")
)

// The status of the database transparent data encryption.
type TransparentDataEncryptionStatus string

const (
	TransparentDataEncryptionStatusEnabled  = TransparentDataEncryptionStatus("Enabled")
	TransparentDataEncryptionStatusDisabled = TransparentDataEncryptionStatus("Disabled")
)

// Enable or Disable public network access to workspace
type WorkspacePublicNetworkAccess string

const (
	WorkspacePublicNetworkAccessEnabled  = WorkspacePublicNetworkAccess("Enabled")
	WorkspacePublicNetworkAccessDisabled = WorkspacePublicNetworkAccess("Disabled")
)

func init() {
	pulumi.RegisterOutputType(ResourceIdentityTypeOutput{})
	pulumi.RegisterOutputType(ResourceIdentityTypePtrOutput{})
	pulumi.RegisterOutputType(SensitivityLabelRankOutput{})
	pulumi.RegisterOutputType(SensitivityLabelRankPtrOutput{})
}
