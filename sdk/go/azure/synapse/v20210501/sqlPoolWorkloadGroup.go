// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v20210501

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Workload group operations for a sql pool
type SqlPoolWorkloadGroup struct {
	pulumi.CustomResourceState

	// The workload group importance level.
	Importance pulumi.StringPtrOutput `pulumi:"importance"`
	// The workload group cap percentage resource.
	MaxResourcePercent pulumi.IntOutput `pulumi:"maxResourcePercent"`
	// The workload group request maximum grant percentage.
	MaxResourcePercentPerRequest pulumi.Float64PtrOutput `pulumi:"maxResourcePercentPerRequest"`
	// The workload group minimum percentage resource.
	MinResourcePercent pulumi.IntOutput `pulumi:"minResourcePercent"`
	// The workload group request minimum grant percentage.
	MinResourcePercentPerRequest pulumi.Float64Output `pulumi:"minResourcePercentPerRequest"`
	// The name of the resource
	Name pulumi.StringOutput `pulumi:"name"`
	// The workload group query execution timeout.
	QueryExecutionTimeout pulumi.IntPtrOutput `pulumi:"queryExecutionTimeout"`
	// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
	Type pulumi.StringOutput `pulumi:"type"`
}

// NewSqlPoolWorkloadGroup registers a new resource with the given unique name, arguments, and options.
func NewSqlPoolWorkloadGroup(ctx *pulumi.Context,
	name string, args *SqlPoolWorkloadGroupArgs, opts ...pulumi.ResourceOption) (*SqlPoolWorkloadGroup, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.MaxResourcePercent == nil {
		return nil, errors.New("invalid value for required argument 'MaxResourcePercent'")
	}
	if args.MinResourcePercent == nil {
		return nil, errors.New("invalid value for required argument 'MinResourcePercent'")
	}
	if args.MinResourcePercentPerRequest == nil {
		return nil, errors.New("invalid value for required argument 'MinResourcePercentPerRequest'")
	}
	if args.ResourceGroupName == nil {
		return nil, errors.New("invalid value for required argument 'ResourceGroupName'")
	}
	if args.SqlPoolName == nil {
		return nil, errors.New("invalid value for required argument 'SqlPoolName'")
	}
	if args.WorkspaceName == nil {
		return nil, errors.New("invalid value for required argument 'WorkspaceName'")
	}
	aliases := pulumi.Aliases([]pulumi.Alias{
		{
			Type: pulumi.String("azure-native:synapse:SqlPoolWorkloadGroup"),
		},
		{
			Type: pulumi.String("azure-native:synapse/v20190601preview:SqlPoolWorkloadGroup"),
		},
		{
			Type: pulumi.String("azure-native:synapse/v20201201:SqlPoolWorkloadGroup"),
		},
		{
			Type: pulumi.String("azure-native:synapse/v20210301:SqlPoolWorkloadGroup"),
		},
		{
			Type: pulumi.String("azure-native:synapse/v20210401preview:SqlPoolWorkloadGroup"),
		},
		{
			Type: pulumi.String("azure-native:synapse/v20210601:SqlPoolWorkloadGroup"),
		},
		{
			Type: pulumi.String("azure-native:synapse/v20210601preview:SqlPoolWorkloadGroup"),
		},
	})
	opts = append(opts, aliases)
	var resource SqlPoolWorkloadGroup
	err := ctx.RegisterResource("azure-native:synapse/v20210501:SqlPoolWorkloadGroup", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSqlPoolWorkloadGroup gets an existing SqlPoolWorkloadGroup resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSqlPoolWorkloadGroup(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SqlPoolWorkloadGroupState, opts ...pulumi.ResourceOption) (*SqlPoolWorkloadGroup, error) {
	var resource SqlPoolWorkloadGroup
	err := ctx.ReadResource("azure-native:synapse/v20210501:SqlPoolWorkloadGroup", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SqlPoolWorkloadGroup resources.
type sqlPoolWorkloadGroupState struct {
}

type SqlPoolWorkloadGroupState struct {
}

func (SqlPoolWorkloadGroupState) ElementType() reflect.Type {
	return reflect.TypeOf((*sqlPoolWorkloadGroupState)(nil)).Elem()
}

type sqlPoolWorkloadGroupArgs struct {
	// The workload group importance level.
	Importance *string `pulumi:"importance"`
	// The workload group cap percentage resource.
	MaxResourcePercent int `pulumi:"maxResourcePercent"`
	// The workload group request maximum grant percentage.
	MaxResourcePercentPerRequest *float64 `pulumi:"maxResourcePercentPerRequest"`
	// The workload group minimum percentage resource.
	MinResourcePercent int `pulumi:"minResourcePercent"`
	// The workload group request minimum grant percentage.
	MinResourcePercentPerRequest float64 `pulumi:"minResourcePercentPerRequest"`
	// The workload group query execution timeout.
	QueryExecutionTimeout *int `pulumi:"queryExecutionTimeout"`
	// The name of the resource group. The name is case insensitive.
	ResourceGroupName string `pulumi:"resourceGroupName"`
	// SQL pool name
	SqlPoolName string `pulumi:"sqlPoolName"`
	// The name of the workload group.
	WorkloadGroupName *string `pulumi:"workloadGroupName"`
	// The name of the workspace
	WorkspaceName string `pulumi:"workspaceName"`
}

// The set of arguments for constructing a SqlPoolWorkloadGroup resource.
type SqlPoolWorkloadGroupArgs struct {
	// The workload group importance level.
	Importance pulumi.StringPtrInput
	// The workload group cap percentage resource.
	MaxResourcePercent pulumi.IntInput
	// The workload group request maximum grant percentage.
	MaxResourcePercentPerRequest pulumi.Float64PtrInput
	// The workload group minimum percentage resource.
	MinResourcePercent pulumi.IntInput
	// The workload group request minimum grant percentage.
	MinResourcePercentPerRequest pulumi.Float64Input
	// The workload group query execution timeout.
	QueryExecutionTimeout pulumi.IntPtrInput
	// The name of the resource group. The name is case insensitive.
	ResourceGroupName pulumi.StringInput
	// SQL pool name
	SqlPoolName pulumi.StringInput
	// The name of the workload group.
	WorkloadGroupName pulumi.StringPtrInput
	// The name of the workspace
	WorkspaceName pulumi.StringInput
}

func (SqlPoolWorkloadGroupArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*sqlPoolWorkloadGroupArgs)(nil)).Elem()
}

type SqlPoolWorkloadGroupInput interface {
	pulumi.Input

	ToSqlPoolWorkloadGroupOutput() SqlPoolWorkloadGroupOutput
	ToSqlPoolWorkloadGroupOutputWithContext(ctx context.Context) SqlPoolWorkloadGroupOutput
}

func (*SqlPoolWorkloadGroup) ElementType() reflect.Type {
	return reflect.TypeOf((**SqlPoolWorkloadGroup)(nil)).Elem()
}

func (i *SqlPoolWorkloadGroup) ToSqlPoolWorkloadGroupOutput() SqlPoolWorkloadGroupOutput {
	return i.ToSqlPoolWorkloadGroupOutputWithContext(context.Background())
}

func (i *SqlPoolWorkloadGroup) ToSqlPoolWorkloadGroupOutputWithContext(ctx context.Context) SqlPoolWorkloadGroupOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SqlPoolWorkloadGroupOutput)
}

type SqlPoolWorkloadGroupOutput struct{ *pulumi.OutputState }

func (SqlPoolWorkloadGroupOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SqlPoolWorkloadGroup)(nil)).Elem()
}

func (o SqlPoolWorkloadGroupOutput) ToSqlPoolWorkloadGroupOutput() SqlPoolWorkloadGroupOutput {
	return o
}

func (o SqlPoolWorkloadGroupOutput) ToSqlPoolWorkloadGroupOutputWithContext(ctx context.Context) SqlPoolWorkloadGroupOutput {
	return o
}

// The workload group importance level.
func (o SqlPoolWorkloadGroupOutput) Importance() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SqlPoolWorkloadGroup) pulumi.StringPtrOutput { return v.Importance }).(pulumi.StringPtrOutput)
}

// The workload group cap percentage resource.
func (o SqlPoolWorkloadGroupOutput) MaxResourcePercent() pulumi.IntOutput {
	return o.ApplyT(func(v *SqlPoolWorkloadGroup) pulumi.IntOutput { return v.MaxResourcePercent }).(pulumi.IntOutput)
}

// The workload group request maximum grant percentage.
func (o SqlPoolWorkloadGroupOutput) MaxResourcePercentPerRequest() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *SqlPoolWorkloadGroup) pulumi.Float64PtrOutput { return v.MaxResourcePercentPerRequest }).(pulumi.Float64PtrOutput)
}

// The workload group minimum percentage resource.
func (o SqlPoolWorkloadGroupOutput) MinResourcePercent() pulumi.IntOutput {
	return o.ApplyT(func(v *SqlPoolWorkloadGroup) pulumi.IntOutput { return v.MinResourcePercent }).(pulumi.IntOutput)
}

// The workload group request minimum grant percentage.
func (o SqlPoolWorkloadGroupOutput) MinResourcePercentPerRequest() pulumi.Float64Output {
	return o.ApplyT(func(v *SqlPoolWorkloadGroup) pulumi.Float64Output { return v.MinResourcePercentPerRequest }).(pulumi.Float64Output)
}

// The name of the resource
func (o SqlPoolWorkloadGroupOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *SqlPoolWorkloadGroup) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The workload group query execution timeout.
func (o SqlPoolWorkloadGroupOutput) QueryExecutionTimeout() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SqlPoolWorkloadGroup) pulumi.IntPtrOutput { return v.QueryExecutionTimeout }).(pulumi.IntPtrOutput)
}

// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
func (o SqlPoolWorkloadGroupOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *SqlPoolWorkloadGroup) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(SqlPoolWorkloadGroupOutput{})
}
