


package v20210501

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type SqlPoolVulnerabilityAssessmentRuleBaseline struct {
	pulumi.CustomResourceState

	BaselineResults SqlPoolVulnerabilityAssessmentRuleBaselineItemResponseArrayOutput `pulumi:"baselineResults"`
	Name            pulumi.StringOutput                                               `pulumi:"name"`
	Type            pulumi.StringOutput                                               `pulumi:"type"`
}


func NewSqlPoolVulnerabilityAssessmentRuleBaseline(ctx *pulumi.Context,
	name string, args *SqlPoolVulnerabilityAssessmentRuleBaselineArgs, opts ...pulumi.ResourceOption) (*SqlPoolVulnerabilityAssessmentRuleBaseline, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.BaselineResults == nil {
		return nil, errors.New("invalid value for required argument 'BaselineResults'")
	}
	if args.ResourceGroupName == nil {
		return nil, errors.New("invalid value for required argument 'ResourceGroupName'")
	}
	if args.RuleId == nil {
		return nil, errors.New("invalid value for required argument 'RuleId'")
	}
	if args.SqlPoolName == nil {
		return nil, errors.New("invalid value for required argument 'SqlPoolName'")
	}
	if args.VulnerabilityAssessmentName == nil {
		return nil, errors.New("invalid value for required argument 'VulnerabilityAssessmentName'")
	}
	if args.WorkspaceName == nil {
		return nil, errors.New("invalid value for required argument 'WorkspaceName'")
	}
	aliases := pulumi.Aliases([]pulumi.Alias{
		{
			Type: pulumi.String("azure-nextgen:synapse/v20210501:SqlPoolVulnerabilityAssessmentRuleBaseline"),
		},
		{
			Type: pulumi.String("azure-native:synapse:SqlPoolVulnerabilityAssessmentRuleBaseline"),
		},
		{
			Type: pulumi.String("azure-nextgen:synapse:SqlPoolVulnerabilityAssessmentRuleBaseline"),
		},
		{
			Type: pulumi.String("azure-native:synapse/v20190601preview:SqlPoolVulnerabilityAssessmentRuleBaseline"),
		},
		{
			Type: pulumi.String("azure-nextgen:synapse/v20190601preview:SqlPoolVulnerabilityAssessmentRuleBaseline"),
		},
		{
			Type: pulumi.String("azure-native:synapse/v20201201:SqlPoolVulnerabilityAssessmentRuleBaseline"),
		},
		{
			Type: pulumi.String("azure-nextgen:synapse/v20201201:SqlPoolVulnerabilityAssessmentRuleBaseline"),
		},
		{
			Type: pulumi.String("azure-native:synapse/v20210301:SqlPoolVulnerabilityAssessmentRuleBaseline"),
		},
		{
			Type: pulumi.String("azure-nextgen:synapse/v20210301:SqlPoolVulnerabilityAssessmentRuleBaseline"),
		},
		{
			Type: pulumi.String("azure-native:synapse/v20210401preview:SqlPoolVulnerabilityAssessmentRuleBaseline"),
		},
		{
			Type: pulumi.String("azure-nextgen:synapse/v20210401preview:SqlPoolVulnerabilityAssessmentRuleBaseline"),
		},
		{
			Type: pulumi.String("azure-native:synapse/v20210601:SqlPoolVulnerabilityAssessmentRuleBaseline"),
		},
		{
			Type: pulumi.String("azure-nextgen:synapse/v20210601:SqlPoolVulnerabilityAssessmentRuleBaseline"),
		},
		{
			Type: pulumi.String("azure-native:synapse/v20210601preview:SqlPoolVulnerabilityAssessmentRuleBaseline"),
		},
		{
			Type: pulumi.String("azure-nextgen:synapse/v20210601preview:SqlPoolVulnerabilityAssessmentRuleBaseline"),
		},
	})
	opts = append(opts, aliases)
	var resource SqlPoolVulnerabilityAssessmentRuleBaseline
	err := ctx.RegisterResource("azure-native:synapse/v20210501:SqlPoolVulnerabilityAssessmentRuleBaseline", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}



func GetSqlPoolVulnerabilityAssessmentRuleBaseline(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SqlPoolVulnerabilityAssessmentRuleBaselineState, opts ...pulumi.ResourceOption) (*SqlPoolVulnerabilityAssessmentRuleBaseline, error) {
	var resource SqlPoolVulnerabilityAssessmentRuleBaseline
	err := ctx.ReadResource("azure-native:synapse/v20210501:SqlPoolVulnerabilityAssessmentRuleBaseline", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}


type sqlPoolVulnerabilityAssessmentRuleBaselineState struct {
}

type SqlPoolVulnerabilityAssessmentRuleBaselineState struct {
}

func (SqlPoolVulnerabilityAssessmentRuleBaselineState) ElementType() reflect.Type {
	return reflect.TypeOf((*sqlPoolVulnerabilityAssessmentRuleBaselineState)(nil)).Elem()
}

type sqlPoolVulnerabilityAssessmentRuleBaselineArgs struct {
	BaselineName                *string                                          `pulumi:"baselineName"`
	BaselineResults             []SqlPoolVulnerabilityAssessmentRuleBaselineItem `pulumi:"baselineResults"`
	ResourceGroupName           string                                           `pulumi:"resourceGroupName"`
	RuleId                      string                                           `pulumi:"ruleId"`
	SqlPoolName                 string                                           `pulumi:"sqlPoolName"`
	VulnerabilityAssessmentName string                                           `pulumi:"vulnerabilityAssessmentName"`
	WorkspaceName               string                                           `pulumi:"workspaceName"`
}


type SqlPoolVulnerabilityAssessmentRuleBaselineArgs struct {
	BaselineName                pulumi.StringPtrInput
	BaselineResults             SqlPoolVulnerabilityAssessmentRuleBaselineItemArrayInput
	ResourceGroupName           pulumi.StringInput
	RuleId                      pulumi.StringInput
	SqlPoolName                 pulumi.StringInput
	VulnerabilityAssessmentName pulumi.StringInput
	WorkspaceName               pulumi.StringInput
}

func (SqlPoolVulnerabilityAssessmentRuleBaselineArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*sqlPoolVulnerabilityAssessmentRuleBaselineArgs)(nil)).Elem()
}

type SqlPoolVulnerabilityAssessmentRuleBaselineInput interface {
	pulumi.Input

	ToSqlPoolVulnerabilityAssessmentRuleBaselineOutput() SqlPoolVulnerabilityAssessmentRuleBaselineOutput
	ToSqlPoolVulnerabilityAssessmentRuleBaselineOutputWithContext(ctx context.Context) SqlPoolVulnerabilityAssessmentRuleBaselineOutput
}

func (*SqlPoolVulnerabilityAssessmentRuleBaseline) ElementType() reflect.Type {
	return reflect.TypeOf((*SqlPoolVulnerabilityAssessmentRuleBaseline)(nil))
}

func (i *SqlPoolVulnerabilityAssessmentRuleBaseline) ToSqlPoolVulnerabilityAssessmentRuleBaselineOutput() SqlPoolVulnerabilityAssessmentRuleBaselineOutput {
	return i.ToSqlPoolVulnerabilityAssessmentRuleBaselineOutputWithContext(context.Background())
}

func (i *SqlPoolVulnerabilityAssessmentRuleBaseline) ToSqlPoolVulnerabilityAssessmentRuleBaselineOutputWithContext(ctx context.Context) SqlPoolVulnerabilityAssessmentRuleBaselineOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SqlPoolVulnerabilityAssessmentRuleBaselineOutput)
}

type SqlPoolVulnerabilityAssessmentRuleBaselineOutput struct{ *pulumi.OutputState }

func (SqlPoolVulnerabilityAssessmentRuleBaselineOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SqlPoolVulnerabilityAssessmentRuleBaseline)(nil))
}

func (o SqlPoolVulnerabilityAssessmentRuleBaselineOutput) ToSqlPoolVulnerabilityAssessmentRuleBaselineOutput() SqlPoolVulnerabilityAssessmentRuleBaselineOutput {
	return o
}

func (o SqlPoolVulnerabilityAssessmentRuleBaselineOutput) ToSqlPoolVulnerabilityAssessmentRuleBaselineOutputWithContext(ctx context.Context) SqlPoolVulnerabilityAssessmentRuleBaselineOutput {
	return o
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SqlPoolVulnerabilityAssessmentRuleBaselineInput)(nil)).Elem(), &SqlPoolVulnerabilityAssessmentRuleBaseline{})
	pulumi.RegisterOutputType(SqlPoolVulnerabilityAssessmentRuleBaselineOutput{})
}
