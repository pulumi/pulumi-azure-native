// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package synapse

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// A server vulnerability assessment.
// API Version: 2021-03-01.
type WorkspaceManagedSqlServerVulnerabilityAssessment struct {
	pulumi.CustomResourceState

	// The name of the resource
	Name pulumi.StringOutput `pulumi:"name"`
	// The recurring scans settings
	RecurringScans VulnerabilityAssessmentRecurringScansPropertiesResponsePtrOutput `pulumi:"recurringScans"`
	// A blob storage container path to hold the scan results (e.g. https://myStorage.blob.core.windows.net/VaScans/).
	StorageContainerPath pulumi.StringOutput `pulumi:"storageContainerPath"`
	// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
	Type pulumi.StringOutput `pulumi:"type"`
}

// NewWorkspaceManagedSqlServerVulnerabilityAssessment registers a new resource with the given unique name, arguments, and options.
func NewWorkspaceManagedSqlServerVulnerabilityAssessment(ctx *pulumi.Context,
	name string, args *WorkspaceManagedSqlServerVulnerabilityAssessmentArgs, opts ...pulumi.ResourceOption) (*WorkspaceManagedSqlServerVulnerabilityAssessment, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ResourceGroupName == nil {
		return nil, errors.New("invalid value for required argument 'ResourceGroupName'")
	}
	if args.StorageContainerPath == nil {
		return nil, errors.New("invalid value for required argument 'StorageContainerPath'")
	}
	if args.WorkspaceName == nil {
		return nil, errors.New("invalid value for required argument 'WorkspaceName'")
	}
	if args.RecurringScans != nil {
		args.RecurringScans = args.RecurringScans.ToVulnerabilityAssessmentRecurringScansPropertiesPtrOutput().ApplyT(func(v *VulnerabilityAssessmentRecurringScansProperties) *VulnerabilityAssessmentRecurringScansProperties {
			return v.Defaults()
		}).(VulnerabilityAssessmentRecurringScansPropertiesPtrOutput)
	}
	aliases := pulumi.Aliases([]pulumi.Alias{
		{
			Type: pulumi.String("azure-native:synapse/v20190601preview:WorkspaceManagedSqlServerVulnerabilityAssessment"),
		},
		{
			Type: pulumi.String("azure-native:synapse/v20201201:WorkspaceManagedSqlServerVulnerabilityAssessment"),
		},
		{
			Type: pulumi.String("azure-native:synapse/v20210301:WorkspaceManagedSqlServerVulnerabilityAssessment"),
		},
		{
			Type: pulumi.String("azure-native:synapse/v20210401preview:WorkspaceManagedSqlServerVulnerabilityAssessment"),
		},
		{
			Type: pulumi.String("azure-native:synapse/v20210501:WorkspaceManagedSqlServerVulnerabilityAssessment"),
		},
		{
			Type: pulumi.String("azure-native:synapse/v20210601:WorkspaceManagedSqlServerVulnerabilityAssessment"),
		},
		{
			Type: pulumi.String("azure-native:synapse/v20210601preview:WorkspaceManagedSqlServerVulnerabilityAssessment"),
		},
	})
	opts = append(opts, aliases)
	var resource WorkspaceManagedSqlServerVulnerabilityAssessment
	err := ctx.RegisterResource("azure-native:synapse:WorkspaceManagedSqlServerVulnerabilityAssessment", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetWorkspaceManagedSqlServerVulnerabilityAssessment gets an existing WorkspaceManagedSqlServerVulnerabilityAssessment resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetWorkspaceManagedSqlServerVulnerabilityAssessment(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *WorkspaceManagedSqlServerVulnerabilityAssessmentState, opts ...pulumi.ResourceOption) (*WorkspaceManagedSqlServerVulnerabilityAssessment, error) {
	var resource WorkspaceManagedSqlServerVulnerabilityAssessment
	err := ctx.ReadResource("azure-native:synapse:WorkspaceManagedSqlServerVulnerabilityAssessment", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering WorkspaceManagedSqlServerVulnerabilityAssessment resources.
type workspaceManagedSqlServerVulnerabilityAssessmentState struct {
}

type WorkspaceManagedSqlServerVulnerabilityAssessmentState struct {
}

func (WorkspaceManagedSqlServerVulnerabilityAssessmentState) ElementType() reflect.Type {
	return reflect.TypeOf((*workspaceManagedSqlServerVulnerabilityAssessmentState)(nil)).Elem()
}

type workspaceManagedSqlServerVulnerabilityAssessmentArgs struct {
	// The recurring scans settings
	RecurringScans *VulnerabilityAssessmentRecurringScansProperties `pulumi:"recurringScans"`
	// The name of the resource group. The name is case insensitive.
	ResourceGroupName string `pulumi:"resourceGroupName"`
	// Specifies the identifier key of the storage account for vulnerability assessment scan results. If 'StorageContainerSasKey' isn't specified, storageAccountAccessKey is required.
	StorageAccountAccessKey *string `pulumi:"storageAccountAccessKey"`
	// A blob storage container path to hold the scan results (e.g. https://myStorage.blob.core.windows.net/VaScans/).
	StorageContainerPath string `pulumi:"storageContainerPath"`
	// A shared access signature (SAS Key) that has read and write access to the blob container specified in 'storageContainerPath' parameter. If 'storageAccountAccessKey' isn't specified, StorageContainerSasKey is required.
	StorageContainerSasKey *string `pulumi:"storageContainerSasKey"`
	// The name of the vulnerability assessment.
	VulnerabilityAssessmentName *string `pulumi:"vulnerabilityAssessmentName"`
	// The name of the workspace
	WorkspaceName string `pulumi:"workspaceName"`
}

// The set of arguments for constructing a WorkspaceManagedSqlServerVulnerabilityAssessment resource.
type WorkspaceManagedSqlServerVulnerabilityAssessmentArgs struct {
	// The recurring scans settings
	RecurringScans VulnerabilityAssessmentRecurringScansPropertiesPtrInput
	// The name of the resource group. The name is case insensitive.
	ResourceGroupName pulumi.StringInput
	// Specifies the identifier key of the storage account for vulnerability assessment scan results. If 'StorageContainerSasKey' isn't specified, storageAccountAccessKey is required.
	StorageAccountAccessKey pulumi.StringPtrInput
	// A blob storage container path to hold the scan results (e.g. https://myStorage.blob.core.windows.net/VaScans/).
	StorageContainerPath pulumi.StringInput
	// A shared access signature (SAS Key) that has read and write access to the blob container specified in 'storageContainerPath' parameter. If 'storageAccountAccessKey' isn't specified, StorageContainerSasKey is required.
	StorageContainerSasKey pulumi.StringPtrInput
	// The name of the vulnerability assessment.
	VulnerabilityAssessmentName pulumi.StringPtrInput
	// The name of the workspace
	WorkspaceName pulumi.StringInput
}

func (WorkspaceManagedSqlServerVulnerabilityAssessmentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*workspaceManagedSqlServerVulnerabilityAssessmentArgs)(nil)).Elem()
}

type WorkspaceManagedSqlServerVulnerabilityAssessmentInput interface {
	pulumi.Input

	ToWorkspaceManagedSqlServerVulnerabilityAssessmentOutput() WorkspaceManagedSqlServerVulnerabilityAssessmentOutput
	ToWorkspaceManagedSqlServerVulnerabilityAssessmentOutputWithContext(ctx context.Context) WorkspaceManagedSqlServerVulnerabilityAssessmentOutput
}

func (*WorkspaceManagedSqlServerVulnerabilityAssessment) ElementType() reflect.Type {
	return reflect.TypeOf((**WorkspaceManagedSqlServerVulnerabilityAssessment)(nil)).Elem()
}

func (i *WorkspaceManagedSqlServerVulnerabilityAssessment) ToWorkspaceManagedSqlServerVulnerabilityAssessmentOutput() WorkspaceManagedSqlServerVulnerabilityAssessmentOutput {
	return i.ToWorkspaceManagedSqlServerVulnerabilityAssessmentOutputWithContext(context.Background())
}

func (i *WorkspaceManagedSqlServerVulnerabilityAssessment) ToWorkspaceManagedSqlServerVulnerabilityAssessmentOutputWithContext(ctx context.Context) WorkspaceManagedSqlServerVulnerabilityAssessmentOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkspaceManagedSqlServerVulnerabilityAssessmentOutput)
}

type WorkspaceManagedSqlServerVulnerabilityAssessmentOutput struct{ *pulumi.OutputState }

func (WorkspaceManagedSqlServerVulnerabilityAssessmentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**WorkspaceManagedSqlServerVulnerabilityAssessment)(nil)).Elem()
}

func (o WorkspaceManagedSqlServerVulnerabilityAssessmentOutput) ToWorkspaceManagedSqlServerVulnerabilityAssessmentOutput() WorkspaceManagedSqlServerVulnerabilityAssessmentOutput {
	return o
}

func (o WorkspaceManagedSqlServerVulnerabilityAssessmentOutput) ToWorkspaceManagedSqlServerVulnerabilityAssessmentOutputWithContext(ctx context.Context) WorkspaceManagedSqlServerVulnerabilityAssessmentOutput {
	return o
}

// The name of the resource
func (o WorkspaceManagedSqlServerVulnerabilityAssessmentOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *WorkspaceManagedSqlServerVulnerabilityAssessment) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The recurring scans settings
func (o WorkspaceManagedSqlServerVulnerabilityAssessmentOutput) RecurringScans() VulnerabilityAssessmentRecurringScansPropertiesResponsePtrOutput {
	return o.ApplyT(func(v *WorkspaceManagedSqlServerVulnerabilityAssessment) VulnerabilityAssessmentRecurringScansPropertiesResponsePtrOutput {
		return v.RecurringScans
	}).(VulnerabilityAssessmentRecurringScansPropertiesResponsePtrOutput)
}

// A blob storage container path to hold the scan results (e.g. https://myStorage.blob.core.windows.net/VaScans/).
func (o WorkspaceManagedSqlServerVulnerabilityAssessmentOutput) StorageContainerPath() pulumi.StringOutput {
	return o.ApplyT(func(v *WorkspaceManagedSqlServerVulnerabilityAssessment) pulumi.StringOutput {
		return v.StorageContainerPath
	}).(pulumi.StringOutput)
}

// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
func (o WorkspaceManagedSqlServerVulnerabilityAssessmentOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *WorkspaceManagedSqlServerVulnerabilityAssessment) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(WorkspaceManagedSqlServerVulnerabilityAssessmentOutput{})
}
