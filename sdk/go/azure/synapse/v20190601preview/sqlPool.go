// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v20190601preview

import (
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// A SQL Analytics pool
type SqlPool struct {
	pulumi.CustomResourceState

	// Collation mode
	Collation pulumi.StringPtrOutput `pulumi:"collation"`
	// What is this?
	CreateMode pulumi.StringPtrOutput `pulumi:"createMode"`
	// Date the SQL pool was created
	CreationDate pulumi.StringPtrOutput `pulumi:"creationDate"`
	// The geo-location where the resource lives
	Location pulumi.StringOutput `pulumi:"location"`
	// Maximum size in bytes
	MaxSizeBytes pulumi.IntPtrOutput `pulumi:"maxSizeBytes"`
	// The name of the resource
	Name pulumi.StringOutput `pulumi:"name"`
	// Resource state
	ProvisioningState pulumi.StringPtrOutput `pulumi:"provisioningState"`
	// Backup database to restore from
	RecoverableDatabaseId pulumi.StringPtrOutput `pulumi:"recoverableDatabaseId"`
	// Snapshot time to restore
	RestorePointInTime pulumi.StringPtrOutput `pulumi:"restorePointInTime"`
	// SQL pool SKU
	Sku SkuResponsePtrOutput `pulumi:"sku"`
	// Source database to create from
	SourceDatabaseId pulumi.StringPtrOutput `pulumi:"sourceDatabaseId"`
	// Resource status
	Status pulumi.StringPtrOutput `pulumi:"status"`
	// Resource tags.
	Tags pulumi.StringMapOutput `pulumi:"tags"`
	// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
	Type pulumi.StringOutput `pulumi:"type"`
}

// NewSqlPool registers a new resource with the given unique name, arguments, and options.
func NewSqlPool(ctx *pulumi.Context,
	name string, args *SqlPoolArgs, opts ...pulumi.ResourceOption) (*SqlPool, error) {
	if args == nil || args.Location == nil {
		return nil, errors.New("missing required argument 'Location'")
	}
	if args == nil || args.ResourceGroupName == nil {
		return nil, errors.New("missing required argument 'ResourceGroupName'")
	}
	if args == nil || args.SqlPoolName == nil {
		return nil, errors.New("missing required argument 'SqlPoolName'")
	}
	if args == nil || args.WorkspaceName == nil {
		return nil, errors.New("missing required argument 'WorkspaceName'")
	}
	if args == nil {
		args = &SqlPoolArgs{}
	}
	aliases := pulumi.Aliases([]pulumi.Alias{
		{
			Type: pulumi.String("azure-nextgen:synapse/v20200401preview:SqlPool"),
		},
	})
	opts = append(opts, aliases)
	var resource SqlPool
	err := ctx.RegisterResource("azure-nextgen:synapse/v20190601preview:SqlPool", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSqlPool gets an existing SqlPool resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSqlPool(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SqlPoolState, opts ...pulumi.ResourceOption) (*SqlPool, error) {
	var resource SqlPool
	err := ctx.ReadResource("azure-nextgen:synapse/v20190601preview:SqlPool", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SqlPool resources.
type sqlPoolState struct {
	// Collation mode
	Collation *string `pulumi:"collation"`
	// What is this?
	CreateMode *string `pulumi:"createMode"`
	// Date the SQL pool was created
	CreationDate *string `pulumi:"creationDate"`
	// The geo-location where the resource lives
	Location *string `pulumi:"location"`
	// Maximum size in bytes
	MaxSizeBytes *int `pulumi:"maxSizeBytes"`
	// The name of the resource
	Name *string `pulumi:"name"`
	// Resource state
	ProvisioningState *string `pulumi:"provisioningState"`
	// Backup database to restore from
	RecoverableDatabaseId *string `pulumi:"recoverableDatabaseId"`
	// Snapshot time to restore
	RestorePointInTime *string `pulumi:"restorePointInTime"`
	// SQL pool SKU
	Sku *SkuResponse `pulumi:"sku"`
	// Source database to create from
	SourceDatabaseId *string `pulumi:"sourceDatabaseId"`
	// Resource status
	Status *string `pulumi:"status"`
	// Resource tags.
	Tags map[string]string `pulumi:"tags"`
	// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
	Type *string `pulumi:"type"`
}

type SqlPoolState struct {
	// Collation mode
	Collation pulumi.StringPtrInput
	// What is this?
	CreateMode pulumi.StringPtrInput
	// Date the SQL pool was created
	CreationDate pulumi.StringPtrInput
	// The geo-location where the resource lives
	Location pulumi.StringPtrInput
	// Maximum size in bytes
	MaxSizeBytes pulumi.IntPtrInput
	// The name of the resource
	Name pulumi.StringPtrInput
	// Resource state
	ProvisioningState pulumi.StringPtrInput
	// Backup database to restore from
	RecoverableDatabaseId pulumi.StringPtrInput
	// Snapshot time to restore
	RestorePointInTime pulumi.StringPtrInput
	// SQL pool SKU
	Sku SkuResponsePtrInput
	// Source database to create from
	SourceDatabaseId pulumi.StringPtrInput
	// Resource status
	Status pulumi.StringPtrInput
	// Resource tags.
	Tags pulumi.StringMapInput
	// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
	Type pulumi.StringPtrInput
}

func (SqlPoolState) ElementType() reflect.Type {
	return reflect.TypeOf((*sqlPoolState)(nil)).Elem()
}

type sqlPoolArgs struct {
	// Collation mode
	Collation *string `pulumi:"collation"`
	// What is this?
	CreateMode *string `pulumi:"createMode"`
	// Date the SQL pool was created
	CreationDate *string `pulumi:"creationDate"`
	// The geo-location where the resource lives
	Location string `pulumi:"location"`
	// Maximum size in bytes
	MaxSizeBytes *int `pulumi:"maxSizeBytes"`
	// Resource state
	ProvisioningState *string `pulumi:"provisioningState"`
	// Backup database to restore from
	RecoverableDatabaseId *string `pulumi:"recoverableDatabaseId"`
	// The name of the resource group. The name is case insensitive.
	ResourceGroupName string `pulumi:"resourceGroupName"`
	// Snapshot time to restore
	RestorePointInTime *string `pulumi:"restorePointInTime"`
	// SQL pool SKU
	Sku *Sku `pulumi:"sku"`
	// Source database to create from
	SourceDatabaseId *string `pulumi:"sourceDatabaseId"`
	// SQL pool name
	SqlPoolName string `pulumi:"sqlPoolName"`
	// Resource status
	Status *string `pulumi:"status"`
	// Resource tags.
	Tags map[string]string `pulumi:"tags"`
	// The name of the workspace
	WorkspaceName string `pulumi:"workspaceName"`
}

// The set of arguments for constructing a SqlPool resource.
type SqlPoolArgs struct {
	// Collation mode
	Collation pulumi.StringPtrInput
	// What is this?
	CreateMode pulumi.StringPtrInput
	// Date the SQL pool was created
	CreationDate pulumi.StringPtrInput
	// The geo-location where the resource lives
	Location pulumi.StringInput
	// Maximum size in bytes
	MaxSizeBytes pulumi.IntPtrInput
	// Resource state
	ProvisioningState pulumi.StringPtrInput
	// Backup database to restore from
	RecoverableDatabaseId pulumi.StringPtrInput
	// The name of the resource group. The name is case insensitive.
	ResourceGroupName pulumi.StringInput
	// Snapshot time to restore
	RestorePointInTime pulumi.StringPtrInput
	// SQL pool SKU
	Sku SkuPtrInput
	// Source database to create from
	SourceDatabaseId pulumi.StringPtrInput
	// SQL pool name
	SqlPoolName pulumi.StringInput
	// Resource status
	Status pulumi.StringPtrInput
	// Resource tags.
	Tags pulumi.StringMapInput
	// The name of the workspace
	WorkspaceName pulumi.StringInput
}

func (SqlPoolArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*sqlPoolArgs)(nil)).Elem()
}
