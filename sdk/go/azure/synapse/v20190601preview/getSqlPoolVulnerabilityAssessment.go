// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v20190601preview

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// A Sql pool vulnerability assessment.
//
// Deprecated: Version 2019-06-01-preview will be removed in v2 of the provider.
func LookupSqlPoolVulnerabilityAssessment(ctx *pulumi.Context, args *LookupSqlPoolVulnerabilityAssessmentArgs, opts ...pulumi.InvokeOption) (*LookupSqlPoolVulnerabilityAssessmentResult, error) {
	var rv LookupSqlPoolVulnerabilityAssessmentResult
	err := ctx.Invoke("azure-native:synapse/v20190601preview:getSqlPoolVulnerabilityAssessment", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return rv.Defaults(), nil
}

type LookupSqlPoolVulnerabilityAssessmentArgs struct {
	// The name of the resource group. The name is case insensitive.
	ResourceGroupName string `pulumi:"resourceGroupName"`
	// SQL pool name
	SqlPoolName string `pulumi:"sqlPoolName"`
	// The name of the vulnerability assessment.
	VulnerabilityAssessmentName string `pulumi:"vulnerabilityAssessmentName"`
	// The name of the workspace
	WorkspaceName string `pulumi:"workspaceName"`
}

// A Sql pool vulnerability assessment.
type LookupSqlPoolVulnerabilityAssessmentResult struct {
	// Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
	Id string `pulumi:"id"`
	// The name of the resource
	Name string `pulumi:"name"`
	// The recurring scans settings
	RecurringScans *VulnerabilityAssessmentRecurringScansPropertiesResponse `pulumi:"recurringScans"`
	// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
	Type string `pulumi:"type"`
}

// Defaults sets the appropriate defaults for LookupSqlPoolVulnerabilityAssessmentResult
func (val *LookupSqlPoolVulnerabilityAssessmentResult) Defaults() *LookupSqlPoolVulnerabilityAssessmentResult {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.RecurringScans = tmp.RecurringScans.Defaults()

	return &tmp
}

func LookupSqlPoolVulnerabilityAssessmentOutput(ctx *pulumi.Context, args LookupSqlPoolVulnerabilityAssessmentOutputArgs, opts ...pulumi.InvokeOption) LookupSqlPoolVulnerabilityAssessmentResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupSqlPoolVulnerabilityAssessmentResult, error) {
			args := v.(LookupSqlPoolVulnerabilityAssessmentArgs)
			r, err := LookupSqlPoolVulnerabilityAssessment(ctx, &args, opts...)
			var s LookupSqlPoolVulnerabilityAssessmentResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupSqlPoolVulnerabilityAssessmentResultOutput)
}

type LookupSqlPoolVulnerabilityAssessmentOutputArgs struct {
	// The name of the resource group. The name is case insensitive.
	ResourceGroupName pulumi.StringInput `pulumi:"resourceGroupName"`
	// SQL pool name
	SqlPoolName pulumi.StringInput `pulumi:"sqlPoolName"`
	// The name of the vulnerability assessment.
	VulnerabilityAssessmentName pulumi.StringInput `pulumi:"vulnerabilityAssessmentName"`
	// The name of the workspace
	WorkspaceName pulumi.StringInput `pulumi:"workspaceName"`
}

func (LookupSqlPoolVulnerabilityAssessmentOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupSqlPoolVulnerabilityAssessmentArgs)(nil)).Elem()
}

// A Sql pool vulnerability assessment.
type LookupSqlPoolVulnerabilityAssessmentResultOutput struct{ *pulumi.OutputState }

func (LookupSqlPoolVulnerabilityAssessmentResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupSqlPoolVulnerabilityAssessmentResult)(nil)).Elem()
}

func (o LookupSqlPoolVulnerabilityAssessmentResultOutput) ToLookupSqlPoolVulnerabilityAssessmentResultOutput() LookupSqlPoolVulnerabilityAssessmentResultOutput {
	return o
}

func (o LookupSqlPoolVulnerabilityAssessmentResultOutput) ToLookupSqlPoolVulnerabilityAssessmentResultOutputWithContext(ctx context.Context) LookupSqlPoolVulnerabilityAssessmentResultOutput {
	return o
}

// Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
func (o LookupSqlPoolVulnerabilityAssessmentResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSqlPoolVulnerabilityAssessmentResult) string { return v.Id }).(pulumi.StringOutput)
}

// The name of the resource
func (o LookupSqlPoolVulnerabilityAssessmentResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSqlPoolVulnerabilityAssessmentResult) string { return v.Name }).(pulumi.StringOutput)
}

// The recurring scans settings
func (o LookupSqlPoolVulnerabilityAssessmentResultOutput) RecurringScans() VulnerabilityAssessmentRecurringScansPropertiesResponsePtrOutput {
	return o.ApplyT(func(v LookupSqlPoolVulnerabilityAssessmentResult) *VulnerabilityAssessmentRecurringScansPropertiesResponse {
		return v.RecurringScans
	}).(VulnerabilityAssessmentRecurringScansPropertiesResponsePtrOutput)
}

// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
func (o LookupSqlPoolVulnerabilityAssessmentResultOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSqlPoolVulnerabilityAssessmentResult) string { return v.Type }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupSqlPoolVulnerabilityAssessmentResultOutput{})
}
