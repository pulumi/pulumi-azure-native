// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package synapse

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Class representing an iot hub data connection.
// API Version: 2021-04-01-preview.
type IotHubDataConnection struct {
	pulumi.CustomResourceState

	// The iot hub consumer group.
	ConsumerGroup pulumi.StringOutput `pulumi:"consumerGroup"`
	// The data format of the message. Optionally the data format can be added to each message.
	DataFormat pulumi.StringPtrOutput `pulumi:"dataFormat"`
	// System properties of the iot hub
	EventSystemProperties pulumi.StringArrayOutput `pulumi:"eventSystemProperties"`
	// The resource ID of the Iot hub to be used to create a data connection.
	IotHubResourceId pulumi.StringOutput `pulumi:"iotHubResourceId"`
	// Kind of the endpoint for the data connection
	// Expected value is 'IotHub'.
	Kind pulumi.StringOutput `pulumi:"kind"`
	// Resource location.
	Location pulumi.StringPtrOutput `pulumi:"location"`
	// The mapping rule to be used to ingest the data. Optionally the mapping information can be added to each message.
	MappingRuleName pulumi.StringPtrOutput `pulumi:"mappingRuleName"`
	// The name of the resource
	Name pulumi.StringOutput `pulumi:"name"`
	// The provisioned state of the resource.
	ProvisioningState pulumi.StringOutput `pulumi:"provisioningState"`
	// The name of the share access policy
	SharedAccessPolicyName pulumi.StringOutput `pulumi:"sharedAccessPolicyName"`
	// Azure Resource Manager metadata containing createdBy and modifiedBy information.
	SystemData SystemDataResponseOutput `pulumi:"systemData"`
	// The table where the data should be ingested. Optionally the table information can be added to each message.
	TableName pulumi.StringPtrOutput `pulumi:"tableName"`
	// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
	Type pulumi.StringOutput `pulumi:"type"`
}

// NewIotHubDataConnection registers a new resource with the given unique name, arguments, and options.
func NewIotHubDataConnection(ctx *pulumi.Context,
	name string, args *IotHubDataConnectionArgs, opts ...pulumi.ResourceOption) (*IotHubDataConnection, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ConsumerGroup == nil {
		return nil, errors.New("invalid value for required argument 'ConsumerGroup'")
	}
	if args.DatabaseName == nil {
		return nil, errors.New("invalid value for required argument 'DatabaseName'")
	}
	if args.IotHubResourceId == nil {
		return nil, errors.New("invalid value for required argument 'IotHubResourceId'")
	}
	if args.Kind == nil {
		return nil, errors.New("invalid value for required argument 'Kind'")
	}
	if args.KustoPoolName == nil {
		return nil, errors.New("invalid value for required argument 'KustoPoolName'")
	}
	if args.ResourceGroupName == nil {
		return nil, errors.New("invalid value for required argument 'ResourceGroupName'")
	}
	if args.SharedAccessPolicyName == nil {
		return nil, errors.New("invalid value for required argument 'SharedAccessPolicyName'")
	}
	if args.WorkspaceName == nil {
		return nil, errors.New("invalid value for required argument 'WorkspaceName'")
	}
	args.Kind = pulumi.String("IotHub")
	aliases := pulumi.Aliases([]pulumi.Alias{
		{
			Type: pulumi.String("azure-native:synapse/v20210401preview:IotHubDataConnection"),
		},
		{
			Type: pulumi.String("azure-native:synapse/v20210601preview:IotHubDataConnection"),
		},
	})
	opts = append(opts, aliases)
	var resource IotHubDataConnection
	err := ctx.RegisterResource("azure-native:synapse:IotHubDataConnection", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetIotHubDataConnection gets an existing IotHubDataConnection resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetIotHubDataConnection(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *IotHubDataConnectionState, opts ...pulumi.ResourceOption) (*IotHubDataConnection, error) {
	var resource IotHubDataConnection
	err := ctx.ReadResource("azure-native:synapse:IotHubDataConnection", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering IotHubDataConnection resources.
type iotHubDataConnectionState struct {
}

type IotHubDataConnectionState struct {
}

func (IotHubDataConnectionState) ElementType() reflect.Type {
	return reflect.TypeOf((*iotHubDataConnectionState)(nil)).Elem()
}

type iotHubDataConnectionArgs struct {
	// The iot hub consumer group.
	ConsumerGroup string `pulumi:"consumerGroup"`
	// The name of the data connection.
	DataConnectionName *string `pulumi:"dataConnectionName"`
	// The data format of the message. Optionally the data format can be added to each message.
	DataFormat *string `pulumi:"dataFormat"`
	// The name of the database in the Kusto pool.
	DatabaseName string `pulumi:"databaseName"`
	// System properties of the iot hub
	EventSystemProperties []string `pulumi:"eventSystemProperties"`
	// The resource ID of the Iot hub to be used to create a data connection.
	IotHubResourceId string `pulumi:"iotHubResourceId"`
	// Kind of the endpoint for the data connection
	// Expected value is 'IotHub'.
	Kind string `pulumi:"kind"`
	// The name of the Kusto pool.
	KustoPoolName string `pulumi:"kustoPoolName"`
	// Resource location.
	Location *string `pulumi:"location"`
	// The mapping rule to be used to ingest the data. Optionally the mapping information can be added to each message.
	MappingRuleName *string `pulumi:"mappingRuleName"`
	// The name of the resource group. The name is case insensitive.
	ResourceGroupName string `pulumi:"resourceGroupName"`
	// The name of the share access policy
	SharedAccessPolicyName string `pulumi:"sharedAccessPolicyName"`
	// The table where the data should be ingested. Optionally the table information can be added to each message.
	TableName *string `pulumi:"tableName"`
	// The name of the workspace
	WorkspaceName string `pulumi:"workspaceName"`
}

// The set of arguments for constructing a IotHubDataConnection resource.
type IotHubDataConnectionArgs struct {
	// The iot hub consumer group.
	ConsumerGroup pulumi.StringInput
	// The name of the data connection.
	DataConnectionName pulumi.StringPtrInput
	// The data format of the message. Optionally the data format can be added to each message.
	DataFormat pulumi.StringPtrInput
	// The name of the database in the Kusto pool.
	DatabaseName pulumi.StringInput
	// System properties of the iot hub
	EventSystemProperties pulumi.StringArrayInput
	// The resource ID of the Iot hub to be used to create a data connection.
	IotHubResourceId pulumi.StringInput
	// Kind of the endpoint for the data connection
	// Expected value is 'IotHub'.
	Kind pulumi.StringInput
	// The name of the Kusto pool.
	KustoPoolName pulumi.StringInput
	// Resource location.
	Location pulumi.StringPtrInput
	// The mapping rule to be used to ingest the data. Optionally the mapping information can be added to each message.
	MappingRuleName pulumi.StringPtrInput
	// The name of the resource group. The name is case insensitive.
	ResourceGroupName pulumi.StringInput
	// The name of the share access policy
	SharedAccessPolicyName pulumi.StringInput
	// The table where the data should be ingested. Optionally the table information can be added to each message.
	TableName pulumi.StringPtrInput
	// The name of the workspace
	WorkspaceName pulumi.StringInput
}

func (IotHubDataConnectionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*iotHubDataConnectionArgs)(nil)).Elem()
}

type IotHubDataConnectionInput interface {
	pulumi.Input

	ToIotHubDataConnectionOutput() IotHubDataConnectionOutput
	ToIotHubDataConnectionOutputWithContext(ctx context.Context) IotHubDataConnectionOutput
}

func (*IotHubDataConnection) ElementType() reflect.Type {
	return reflect.TypeOf((**IotHubDataConnection)(nil)).Elem()
}

func (i *IotHubDataConnection) ToIotHubDataConnectionOutput() IotHubDataConnectionOutput {
	return i.ToIotHubDataConnectionOutputWithContext(context.Background())
}

func (i *IotHubDataConnection) ToIotHubDataConnectionOutputWithContext(ctx context.Context) IotHubDataConnectionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IotHubDataConnectionOutput)
}

type IotHubDataConnectionOutput struct{ *pulumi.OutputState }

func (IotHubDataConnectionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**IotHubDataConnection)(nil)).Elem()
}

func (o IotHubDataConnectionOutput) ToIotHubDataConnectionOutput() IotHubDataConnectionOutput {
	return o
}

func (o IotHubDataConnectionOutput) ToIotHubDataConnectionOutputWithContext(ctx context.Context) IotHubDataConnectionOutput {
	return o
}

// The iot hub consumer group.
func (o IotHubDataConnectionOutput) ConsumerGroup() pulumi.StringOutput {
	return o.ApplyT(func(v *IotHubDataConnection) pulumi.StringOutput { return v.ConsumerGroup }).(pulumi.StringOutput)
}

// The data format of the message. Optionally the data format can be added to each message.
func (o IotHubDataConnectionOutput) DataFormat() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IotHubDataConnection) pulumi.StringPtrOutput { return v.DataFormat }).(pulumi.StringPtrOutput)
}

// System properties of the iot hub
func (o IotHubDataConnectionOutput) EventSystemProperties() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *IotHubDataConnection) pulumi.StringArrayOutput { return v.EventSystemProperties }).(pulumi.StringArrayOutput)
}

// The resource ID of the Iot hub to be used to create a data connection.
func (o IotHubDataConnectionOutput) IotHubResourceId() pulumi.StringOutput {
	return o.ApplyT(func(v *IotHubDataConnection) pulumi.StringOutput { return v.IotHubResourceId }).(pulumi.StringOutput)
}

// Kind of the endpoint for the data connection
// Expected value is 'IotHub'.
func (o IotHubDataConnectionOutput) Kind() pulumi.StringOutput {
	return o.ApplyT(func(v *IotHubDataConnection) pulumi.StringOutput { return v.Kind }).(pulumi.StringOutput)
}

// Resource location.
func (o IotHubDataConnectionOutput) Location() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IotHubDataConnection) pulumi.StringPtrOutput { return v.Location }).(pulumi.StringPtrOutput)
}

// The mapping rule to be used to ingest the data. Optionally the mapping information can be added to each message.
func (o IotHubDataConnectionOutput) MappingRuleName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IotHubDataConnection) pulumi.StringPtrOutput { return v.MappingRuleName }).(pulumi.StringPtrOutput)
}

// The name of the resource
func (o IotHubDataConnectionOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *IotHubDataConnection) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The provisioned state of the resource.
func (o IotHubDataConnectionOutput) ProvisioningState() pulumi.StringOutput {
	return o.ApplyT(func(v *IotHubDataConnection) pulumi.StringOutput { return v.ProvisioningState }).(pulumi.StringOutput)
}

// The name of the share access policy
func (o IotHubDataConnectionOutput) SharedAccessPolicyName() pulumi.StringOutput {
	return o.ApplyT(func(v *IotHubDataConnection) pulumi.StringOutput { return v.SharedAccessPolicyName }).(pulumi.StringOutput)
}

// Azure Resource Manager metadata containing createdBy and modifiedBy information.
func (o IotHubDataConnectionOutput) SystemData() SystemDataResponseOutput {
	return o.ApplyT(func(v *IotHubDataConnection) SystemDataResponseOutput { return v.SystemData }).(SystemDataResponseOutput)
}

// The table where the data should be ingested. Optionally the table information can be added to each message.
func (o IotHubDataConnectionOutput) TableName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IotHubDataConnection) pulumi.StringPtrOutput { return v.TableName }).(pulumi.StringPtrOutput)
}

// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
func (o IotHubDataConnectionOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *IotHubDataConnection) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(IotHubDataConnectionOutput{})
}
