// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v20210601

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// A Sql pool vulnerability assessment.
type SqlPoolVulnerabilityAssessment struct {
	pulumi.CustomResourceState

	// The name of the resource
	Name pulumi.StringOutput `pulumi:"name"`
	// The recurring scans settings
	RecurringScans VulnerabilityAssessmentRecurringScansPropertiesResponsePtrOutput `pulumi:"recurringScans"`
	// A blob storage container path to hold the scan results (e.g. https://myStorage.blob.core.windows.net/VaScans/).  It is required if server level vulnerability assessment policy doesn't set
	StorageContainerPath pulumi.StringPtrOutput `pulumi:"storageContainerPath"`
	// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
	Type pulumi.StringOutput `pulumi:"type"`
}

// NewSqlPoolVulnerabilityAssessment registers a new resource with the given unique name, arguments, and options.
func NewSqlPoolVulnerabilityAssessment(ctx *pulumi.Context,
	name string, args *SqlPoolVulnerabilityAssessmentArgs, opts ...pulumi.ResourceOption) (*SqlPoolVulnerabilityAssessment, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ResourceGroupName == nil {
		return nil, errors.New("invalid value for required argument 'ResourceGroupName'")
	}
	if args.SqlPoolName == nil {
		return nil, errors.New("invalid value for required argument 'SqlPoolName'")
	}
	if args.WorkspaceName == nil {
		return nil, errors.New("invalid value for required argument 'WorkspaceName'")
	}
	if args.RecurringScans != nil {
		args.RecurringScans = args.RecurringScans.ToVulnerabilityAssessmentRecurringScansPropertiesPtrOutput().ApplyT(func(v *VulnerabilityAssessmentRecurringScansProperties) *VulnerabilityAssessmentRecurringScansProperties {
			return v.Defaults()
		}).(VulnerabilityAssessmentRecurringScansPropertiesPtrOutput)
	}
	aliases := pulumi.Aliases([]pulumi.Alias{
		{
			Type: pulumi.String("azure-native:synapse:SqlPoolVulnerabilityAssessment"),
		},
		{
			Type: pulumi.String("azure-native:synapse/v20190601preview:SqlPoolVulnerabilityAssessment"),
		},
		{
			Type: pulumi.String("azure-native:synapse/v20201201:SqlPoolVulnerabilityAssessment"),
		},
		{
			Type: pulumi.String("azure-native:synapse/v20210301:SqlPoolVulnerabilityAssessment"),
		},
		{
			Type: pulumi.String("azure-native:synapse/v20210401preview:SqlPoolVulnerabilityAssessment"),
		},
		{
			Type: pulumi.String("azure-native:synapse/v20210501:SqlPoolVulnerabilityAssessment"),
		},
		{
			Type: pulumi.String("azure-native:synapse/v20210601preview:SqlPoolVulnerabilityAssessment"),
		},
	})
	opts = append(opts, aliases)
	var resource SqlPoolVulnerabilityAssessment
	err := ctx.RegisterResource("azure-native:synapse/v20210601:SqlPoolVulnerabilityAssessment", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSqlPoolVulnerabilityAssessment gets an existing SqlPoolVulnerabilityAssessment resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSqlPoolVulnerabilityAssessment(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SqlPoolVulnerabilityAssessmentState, opts ...pulumi.ResourceOption) (*SqlPoolVulnerabilityAssessment, error) {
	var resource SqlPoolVulnerabilityAssessment
	err := ctx.ReadResource("azure-native:synapse/v20210601:SqlPoolVulnerabilityAssessment", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SqlPoolVulnerabilityAssessment resources.
type sqlPoolVulnerabilityAssessmentState struct {
}

type SqlPoolVulnerabilityAssessmentState struct {
}

func (SqlPoolVulnerabilityAssessmentState) ElementType() reflect.Type {
	return reflect.TypeOf((*sqlPoolVulnerabilityAssessmentState)(nil)).Elem()
}

type sqlPoolVulnerabilityAssessmentArgs struct {
	// The recurring scans settings
	RecurringScans *VulnerabilityAssessmentRecurringScansProperties `pulumi:"recurringScans"`
	// The name of the resource group. The name is case insensitive.
	ResourceGroupName string `pulumi:"resourceGroupName"`
	// SQL pool name
	SqlPoolName string `pulumi:"sqlPoolName"`
	// Specifies the identifier key of the storage account for vulnerability assessment scan results. If 'StorageContainerSasKey' isn't specified, storageAccountAccessKey is required.
	StorageAccountAccessKey *string `pulumi:"storageAccountAccessKey"`
	// A blob storage container path to hold the scan results (e.g. https://myStorage.blob.core.windows.net/VaScans/).  It is required if server level vulnerability assessment policy doesn't set
	StorageContainerPath *string `pulumi:"storageContainerPath"`
	// A shared access signature (SAS Key) that has write access to the blob container specified in 'storageContainerPath' parameter. If 'storageAccountAccessKey' isn't specified, StorageContainerSasKey is required.
	StorageContainerSasKey *string `pulumi:"storageContainerSasKey"`
	// The name of the vulnerability assessment.
	VulnerabilityAssessmentName *string `pulumi:"vulnerabilityAssessmentName"`
	// The name of the workspace.
	WorkspaceName string `pulumi:"workspaceName"`
}

// The set of arguments for constructing a SqlPoolVulnerabilityAssessment resource.
type SqlPoolVulnerabilityAssessmentArgs struct {
	// The recurring scans settings
	RecurringScans VulnerabilityAssessmentRecurringScansPropertiesPtrInput
	// The name of the resource group. The name is case insensitive.
	ResourceGroupName pulumi.StringInput
	// SQL pool name
	SqlPoolName pulumi.StringInput
	// Specifies the identifier key of the storage account for vulnerability assessment scan results. If 'StorageContainerSasKey' isn't specified, storageAccountAccessKey is required.
	StorageAccountAccessKey pulumi.StringPtrInput
	// A blob storage container path to hold the scan results (e.g. https://myStorage.blob.core.windows.net/VaScans/).  It is required if server level vulnerability assessment policy doesn't set
	StorageContainerPath pulumi.StringPtrInput
	// A shared access signature (SAS Key) that has write access to the blob container specified in 'storageContainerPath' parameter. If 'storageAccountAccessKey' isn't specified, StorageContainerSasKey is required.
	StorageContainerSasKey pulumi.StringPtrInput
	// The name of the vulnerability assessment.
	VulnerabilityAssessmentName pulumi.StringPtrInput
	// The name of the workspace.
	WorkspaceName pulumi.StringInput
}

func (SqlPoolVulnerabilityAssessmentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*sqlPoolVulnerabilityAssessmentArgs)(nil)).Elem()
}

type SqlPoolVulnerabilityAssessmentInput interface {
	pulumi.Input

	ToSqlPoolVulnerabilityAssessmentOutput() SqlPoolVulnerabilityAssessmentOutput
	ToSqlPoolVulnerabilityAssessmentOutputWithContext(ctx context.Context) SqlPoolVulnerabilityAssessmentOutput
}

func (*SqlPoolVulnerabilityAssessment) ElementType() reflect.Type {
	return reflect.TypeOf((**SqlPoolVulnerabilityAssessment)(nil)).Elem()
}

func (i *SqlPoolVulnerabilityAssessment) ToSqlPoolVulnerabilityAssessmentOutput() SqlPoolVulnerabilityAssessmentOutput {
	return i.ToSqlPoolVulnerabilityAssessmentOutputWithContext(context.Background())
}

func (i *SqlPoolVulnerabilityAssessment) ToSqlPoolVulnerabilityAssessmentOutputWithContext(ctx context.Context) SqlPoolVulnerabilityAssessmentOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SqlPoolVulnerabilityAssessmentOutput)
}

type SqlPoolVulnerabilityAssessmentOutput struct{ *pulumi.OutputState }

func (SqlPoolVulnerabilityAssessmentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SqlPoolVulnerabilityAssessment)(nil)).Elem()
}

func (o SqlPoolVulnerabilityAssessmentOutput) ToSqlPoolVulnerabilityAssessmentOutput() SqlPoolVulnerabilityAssessmentOutput {
	return o
}

func (o SqlPoolVulnerabilityAssessmentOutput) ToSqlPoolVulnerabilityAssessmentOutputWithContext(ctx context.Context) SqlPoolVulnerabilityAssessmentOutput {
	return o
}

// The name of the resource
func (o SqlPoolVulnerabilityAssessmentOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *SqlPoolVulnerabilityAssessment) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The recurring scans settings
func (o SqlPoolVulnerabilityAssessmentOutput) RecurringScans() VulnerabilityAssessmentRecurringScansPropertiesResponsePtrOutput {
	return o.ApplyT(func(v *SqlPoolVulnerabilityAssessment) VulnerabilityAssessmentRecurringScansPropertiesResponsePtrOutput {
		return v.RecurringScans
	}).(VulnerabilityAssessmentRecurringScansPropertiesResponsePtrOutput)
}

// A blob storage container path to hold the scan results (e.g. https://myStorage.blob.core.windows.net/VaScans/).  It is required if server level vulnerability assessment policy doesn't set
func (o SqlPoolVulnerabilityAssessmentOutput) StorageContainerPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SqlPoolVulnerabilityAssessment) pulumi.StringPtrOutput { return v.StorageContainerPath }).(pulumi.StringPtrOutput)
}

// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
func (o SqlPoolVulnerabilityAssessmentOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *SqlPoolVulnerabilityAssessment) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(SqlPoolVulnerabilityAssessmentOutput{})
}
