// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v20220101preview

// Access mode for storage
type AccessMode string

const (
	AccessModeReadOnly  = AccessMode("ReadOnly")
	AccessModeReadWrite = AccessMode("ReadWrite")
)

// ActiveRevisionsMode controls how active revisions are handled for the Container app:
// <list><item>Multiple: multiple revisions can be active. If no value if provided, this is the default</item><item>Single: Only one revision can be active at a time. Revision weights can not be used in this mode</item></list>
type ActiveRevisionsMode string

const (
	ActiveRevisionsModeMultiple = ActiveRevisionsMode("multiple")
	ActiveRevisionsModeSingle   = ActiveRevisionsMode("single")
)

// Tells Dapr which protocol your application is using. Valid options are http and grpc. Default is http
type AppProtocol string

const (
	AppProtocolHttp = AppProtocol("http")
	AppProtocolGrpc = AppProtocol("grpc")
)

// Custom Domain binding type.
type BindingType string

const (
	BindingTypeDisabled   = BindingType("Disabled")
	BindingTypeSniEnabled = BindingType("SniEnabled")
)

// <code>true</code> if the www-authenticate provider should be omitted from the request; otherwise, <code>false</code>.
type DisableWwwAuthenticateMode string

const (
	DisableWwwAuthenticateModeTrue  = DisableWwwAuthenticateMode("True")
	DisableWwwAuthenticateModeFalse = DisableWwwAuthenticateMode("False")
)

// <code>Enabled</code> if the Authentication / Authorization feature is enabled for the current app; otherwise, <code>Disabled</code>.
type EasyAuthState string

const (
	EasyAuthStateEnabled  = EasyAuthState("Enabled")
	EasyAuthStateDisabled = EasyAuthState("Disabled")
)

// <code>Disabled</code> if the Twitter provider should not be enabled despite the set registration; otherwise, <code>Enabled</code>.
type IdentityProviderState string

const (
	IdentityProviderStateEnabled  = IdentityProviderState("Enabled")
	IdentityProviderStateDisabled = IdentityProviderState("Disabled")
)

// Ingress transport protocol
type IngressTransportMethod string

const (
	IngressTransportMethodAuto  = IngressTransportMethod("auto")
	IngressTransportMethodHttp  = IngressTransportMethod("http")
	IngressTransportMethodHttp2 = IngressTransportMethod("http2")
)

// Type of managed service identity (where both SystemAssigned and UserAssigned types are allowed).
type ManagedServiceIdentityType string

const (
	ManagedServiceIdentityTypeNone                         = ManagedServiceIdentityType("None")
	ManagedServiceIdentityTypeSystemAssigned               = ManagedServiceIdentityType("SystemAssigned")
	ManagedServiceIdentityTypeUserAssigned                 = ManagedServiceIdentityType("UserAssigned")
	ManagedServiceIdentityType_SystemAssigned_UserAssigned = ManagedServiceIdentityType("SystemAssigned,UserAssigned")
)

// <code>True</code> if the fragments from the request are preserved after the login request is made; otherwise, <code>False</code>.
type PreserveUrlFragmentsForLoginsMode string

const (
	PreserveUrlFragmentsForLoginsModeTrue  = PreserveUrlFragmentsForLoginsMode("True")
	PreserveUrlFragmentsForLoginsModeFalse = PreserveUrlFragmentsForLoginsMode("False")
)

// <code>false</code> if the authentication/authorization responses not having the HTTPS scheme are permissible; otherwise, <code>true</code>.
type RequireHttpsMode string

const (
	RequireHttpsModeTrue  = RequireHttpsMode("True")
	RequireHttpsModeFalse = RequireHttpsMode("False")
)

// Storage type for the volume. If not provided, use EmptyDir.
type StorageType string

const (
	StorageTypeAzureFile = StorageType("AzureFile")
	StorageTypeEmptyDir  = StorageType("EmptyDir")
)

// The type of probe.
type Type string

const (
	TypeLiveness  = Type("liveness")
	TypeReadiness = Type("readiness")
	TypeStartup   = Type("startup")
)

// The action to take when an unauthenticated client attempts to access the app.
type UnauthenticatedClientAction string

const (
	UnauthenticatedClientActionRedirectToLoginPage = UnauthenticatedClientAction("RedirectToLoginPage")
	UnauthenticatedClientActionAllowAnonymous      = UnauthenticatedClientAction("AllowAnonymous")
	UnauthenticatedClientActionReturn401           = UnauthenticatedClientAction("Return401")
	UnauthenticatedClientActionReturn403           = UnauthenticatedClientAction("Return403")
)

func init() {
}
