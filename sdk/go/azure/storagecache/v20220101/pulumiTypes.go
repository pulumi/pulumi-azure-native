// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v20220101

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Properties pertaining to the BlobNfsTarget.
type BlobNfsTarget struct {
	// Resource ID of the storage container.
	Target *string `pulumi:"target"`
	// Identifies the StorageCache usage model to be used for this storage target.
	UsageModel *string `pulumi:"usageModel"`
}

// BlobNfsTargetInput is an input type that accepts BlobNfsTargetArgs and BlobNfsTargetOutput values.
// You can construct a concrete instance of `BlobNfsTargetInput` via:
//
//	BlobNfsTargetArgs{...}
type BlobNfsTargetInput interface {
	pulumi.Input

	ToBlobNfsTargetOutput() BlobNfsTargetOutput
	ToBlobNfsTargetOutputWithContext(context.Context) BlobNfsTargetOutput
}

// Properties pertaining to the BlobNfsTarget.
type BlobNfsTargetArgs struct {
	// Resource ID of the storage container.
	Target pulumi.StringPtrInput `pulumi:"target"`
	// Identifies the StorageCache usage model to be used for this storage target.
	UsageModel pulumi.StringPtrInput `pulumi:"usageModel"`
}

func (BlobNfsTargetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BlobNfsTarget)(nil)).Elem()
}

func (i BlobNfsTargetArgs) ToBlobNfsTargetOutput() BlobNfsTargetOutput {
	return i.ToBlobNfsTargetOutputWithContext(context.Background())
}

func (i BlobNfsTargetArgs) ToBlobNfsTargetOutputWithContext(ctx context.Context) BlobNfsTargetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BlobNfsTargetOutput)
}

func (i BlobNfsTargetArgs) ToBlobNfsTargetPtrOutput() BlobNfsTargetPtrOutput {
	return i.ToBlobNfsTargetPtrOutputWithContext(context.Background())
}

func (i BlobNfsTargetArgs) ToBlobNfsTargetPtrOutputWithContext(ctx context.Context) BlobNfsTargetPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BlobNfsTargetOutput).ToBlobNfsTargetPtrOutputWithContext(ctx)
}

// BlobNfsTargetPtrInput is an input type that accepts BlobNfsTargetArgs, BlobNfsTargetPtr and BlobNfsTargetPtrOutput values.
// You can construct a concrete instance of `BlobNfsTargetPtrInput` via:
//
//	        BlobNfsTargetArgs{...}
//
//	or:
//
//	        nil
type BlobNfsTargetPtrInput interface {
	pulumi.Input

	ToBlobNfsTargetPtrOutput() BlobNfsTargetPtrOutput
	ToBlobNfsTargetPtrOutputWithContext(context.Context) BlobNfsTargetPtrOutput
}

type blobNfsTargetPtrType BlobNfsTargetArgs

func BlobNfsTargetPtr(v *BlobNfsTargetArgs) BlobNfsTargetPtrInput {
	return (*blobNfsTargetPtrType)(v)
}

func (*blobNfsTargetPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**BlobNfsTarget)(nil)).Elem()
}

func (i *blobNfsTargetPtrType) ToBlobNfsTargetPtrOutput() BlobNfsTargetPtrOutput {
	return i.ToBlobNfsTargetPtrOutputWithContext(context.Background())
}

func (i *blobNfsTargetPtrType) ToBlobNfsTargetPtrOutputWithContext(ctx context.Context) BlobNfsTargetPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BlobNfsTargetPtrOutput)
}

// Properties pertaining to the BlobNfsTarget.
type BlobNfsTargetOutput struct{ *pulumi.OutputState }

func (BlobNfsTargetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BlobNfsTarget)(nil)).Elem()
}

func (o BlobNfsTargetOutput) ToBlobNfsTargetOutput() BlobNfsTargetOutput {
	return o
}

func (o BlobNfsTargetOutput) ToBlobNfsTargetOutputWithContext(ctx context.Context) BlobNfsTargetOutput {
	return o
}

func (o BlobNfsTargetOutput) ToBlobNfsTargetPtrOutput() BlobNfsTargetPtrOutput {
	return o.ToBlobNfsTargetPtrOutputWithContext(context.Background())
}

func (o BlobNfsTargetOutput) ToBlobNfsTargetPtrOutputWithContext(ctx context.Context) BlobNfsTargetPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v BlobNfsTarget) *BlobNfsTarget {
		return &v
	}).(BlobNfsTargetPtrOutput)
}

// Resource ID of the storage container.
func (o BlobNfsTargetOutput) Target() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BlobNfsTarget) *string { return v.Target }).(pulumi.StringPtrOutput)
}

// Identifies the StorageCache usage model to be used for this storage target.
func (o BlobNfsTargetOutput) UsageModel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BlobNfsTarget) *string { return v.UsageModel }).(pulumi.StringPtrOutput)
}

type BlobNfsTargetPtrOutput struct{ *pulumi.OutputState }

func (BlobNfsTargetPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BlobNfsTarget)(nil)).Elem()
}

func (o BlobNfsTargetPtrOutput) ToBlobNfsTargetPtrOutput() BlobNfsTargetPtrOutput {
	return o
}

func (o BlobNfsTargetPtrOutput) ToBlobNfsTargetPtrOutputWithContext(ctx context.Context) BlobNfsTargetPtrOutput {
	return o
}

func (o BlobNfsTargetPtrOutput) Elem() BlobNfsTargetOutput {
	return o.ApplyT(func(v *BlobNfsTarget) BlobNfsTarget {
		if v != nil {
			return *v
		}
		var ret BlobNfsTarget
		return ret
	}).(BlobNfsTargetOutput)
}

// Resource ID of the storage container.
func (o BlobNfsTargetPtrOutput) Target() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BlobNfsTarget) *string {
		if v == nil {
			return nil
		}
		return v.Target
	}).(pulumi.StringPtrOutput)
}

// Identifies the StorageCache usage model to be used for this storage target.
func (o BlobNfsTargetPtrOutput) UsageModel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BlobNfsTarget) *string {
		if v == nil {
			return nil
		}
		return v.UsageModel
	}).(pulumi.StringPtrOutput)
}

// Properties pertaining to the BlobNfsTarget.
type BlobNfsTargetResponse struct {
	// Resource ID of the storage container.
	Target *string `pulumi:"target"`
	// Identifies the StorageCache usage model to be used for this storage target.
	UsageModel *string `pulumi:"usageModel"`
}

// Properties pertaining to the BlobNfsTarget.
type BlobNfsTargetResponseOutput struct{ *pulumi.OutputState }

func (BlobNfsTargetResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BlobNfsTargetResponse)(nil)).Elem()
}

func (o BlobNfsTargetResponseOutput) ToBlobNfsTargetResponseOutput() BlobNfsTargetResponseOutput {
	return o
}

func (o BlobNfsTargetResponseOutput) ToBlobNfsTargetResponseOutputWithContext(ctx context.Context) BlobNfsTargetResponseOutput {
	return o
}

// Resource ID of the storage container.
func (o BlobNfsTargetResponseOutput) Target() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BlobNfsTargetResponse) *string { return v.Target }).(pulumi.StringPtrOutput)
}

// Identifies the StorageCache usage model to be used for this storage target.
func (o BlobNfsTargetResponseOutput) UsageModel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BlobNfsTargetResponse) *string { return v.UsageModel }).(pulumi.StringPtrOutput)
}

type BlobNfsTargetResponsePtrOutput struct{ *pulumi.OutputState }

func (BlobNfsTargetResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BlobNfsTargetResponse)(nil)).Elem()
}

func (o BlobNfsTargetResponsePtrOutput) ToBlobNfsTargetResponsePtrOutput() BlobNfsTargetResponsePtrOutput {
	return o
}

func (o BlobNfsTargetResponsePtrOutput) ToBlobNfsTargetResponsePtrOutputWithContext(ctx context.Context) BlobNfsTargetResponsePtrOutput {
	return o
}

func (o BlobNfsTargetResponsePtrOutput) Elem() BlobNfsTargetResponseOutput {
	return o.ApplyT(func(v *BlobNfsTargetResponse) BlobNfsTargetResponse {
		if v != nil {
			return *v
		}
		var ret BlobNfsTargetResponse
		return ret
	}).(BlobNfsTargetResponseOutput)
}

// Resource ID of the storage container.
func (o BlobNfsTargetResponsePtrOutput) Target() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BlobNfsTargetResponse) *string {
		if v == nil {
			return nil
		}
		return v.Target
	}).(pulumi.StringPtrOutput)
}

// Identifies the StorageCache usage model to be used for this storage target.
func (o BlobNfsTargetResponsePtrOutput) UsageModel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BlobNfsTargetResponse) *string {
		if v == nil {
			return nil
		}
		return v.UsageModel
	}).(pulumi.StringPtrOutput)
}

// Active Directory settings used to join a cache to a domain.
type CacheActiveDirectorySettings struct {
	// The NetBIOS name to assign to the HPC Cache when it joins the Active Directory domain as a server. Length must 1-15 characters from the class [-0-9a-zA-Z].
	CacheNetBiosName string `pulumi:"cacheNetBiosName"`
	// Active Directory admin credentials used to join the HPC Cache to a domain.
	Credentials *CacheActiveDirectorySettingsCredentials `pulumi:"credentials"`
	// The fully qualified domain name of the Active Directory domain controller.
	DomainName string `pulumi:"domainName"`
	// The Active Directory domain's NetBIOS name.
	DomainNetBiosName string `pulumi:"domainNetBiosName"`
	// Primary DNS IP address used to resolve the Active Directory domain controller's fully qualified domain name.
	PrimaryDnsIpAddress string `pulumi:"primaryDnsIpAddress"`
	// Secondary DNS IP address used to resolve the Active Directory domain controller's fully qualified domain name.
	SecondaryDnsIpAddress *string `pulumi:"secondaryDnsIpAddress"`
}

// CacheActiveDirectorySettingsInput is an input type that accepts CacheActiveDirectorySettingsArgs and CacheActiveDirectorySettingsOutput values.
// You can construct a concrete instance of `CacheActiveDirectorySettingsInput` via:
//
//	CacheActiveDirectorySettingsArgs{...}
type CacheActiveDirectorySettingsInput interface {
	pulumi.Input

	ToCacheActiveDirectorySettingsOutput() CacheActiveDirectorySettingsOutput
	ToCacheActiveDirectorySettingsOutputWithContext(context.Context) CacheActiveDirectorySettingsOutput
}

// Active Directory settings used to join a cache to a domain.
type CacheActiveDirectorySettingsArgs struct {
	// The NetBIOS name to assign to the HPC Cache when it joins the Active Directory domain as a server. Length must 1-15 characters from the class [-0-9a-zA-Z].
	CacheNetBiosName pulumi.StringInput `pulumi:"cacheNetBiosName"`
	// Active Directory admin credentials used to join the HPC Cache to a domain.
	Credentials CacheActiveDirectorySettingsCredentialsPtrInput `pulumi:"credentials"`
	// The fully qualified domain name of the Active Directory domain controller.
	DomainName pulumi.StringInput `pulumi:"domainName"`
	// The Active Directory domain's NetBIOS name.
	DomainNetBiosName pulumi.StringInput `pulumi:"domainNetBiosName"`
	// Primary DNS IP address used to resolve the Active Directory domain controller's fully qualified domain name.
	PrimaryDnsIpAddress pulumi.StringInput `pulumi:"primaryDnsIpAddress"`
	// Secondary DNS IP address used to resolve the Active Directory domain controller's fully qualified domain name.
	SecondaryDnsIpAddress pulumi.StringPtrInput `pulumi:"secondaryDnsIpAddress"`
}

func (CacheActiveDirectorySettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CacheActiveDirectorySettings)(nil)).Elem()
}

func (i CacheActiveDirectorySettingsArgs) ToCacheActiveDirectorySettingsOutput() CacheActiveDirectorySettingsOutput {
	return i.ToCacheActiveDirectorySettingsOutputWithContext(context.Background())
}

func (i CacheActiveDirectorySettingsArgs) ToCacheActiveDirectorySettingsOutputWithContext(ctx context.Context) CacheActiveDirectorySettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CacheActiveDirectorySettingsOutput)
}

func (i CacheActiveDirectorySettingsArgs) ToCacheActiveDirectorySettingsPtrOutput() CacheActiveDirectorySettingsPtrOutput {
	return i.ToCacheActiveDirectorySettingsPtrOutputWithContext(context.Background())
}

func (i CacheActiveDirectorySettingsArgs) ToCacheActiveDirectorySettingsPtrOutputWithContext(ctx context.Context) CacheActiveDirectorySettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CacheActiveDirectorySettingsOutput).ToCacheActiveDirectorySettingsPtrOutputWithContext(ctx)
}

// CacheActiveDirectorySettingsPtrInput is an input type that accepts CacheActiveDirectorySettingsArgs, CacheActiveDirectorySettingsPtr and CacheActiveDirectorySettingsPtrOutput values.
// You can construct a concrete instance of `CacheActiveDirectorySettingsPtrInput` via:
//
//	        CacheActiveDirectorySettingsArgs{...}
//
//	or:
//
//	        nil
type CacheActiveDirectorySettingsPtrInput interface {
	pulumi.Input

	ToCacheActiveDirectorySettingsPtrOutput() CacheActiveDirectorySettingsPtrOutput
	ToCacheActiveDirectorySettingsPtrOutputWithContext(context.Context) CacheActiveDirectorySettingsPtrOutput
}

type cacheActiveDirectorySettingsPtrType CacheActiveDirectorySettingsArgs

func CacheActiveDirectorySettingsPtr(v *CacheActiveDirectorySettingsArgs) CacheActiveDirectorySettingsPtrInput {
	return (*cacheActiveDirectorySettingsPtrType)(v)
}

func (*cacheActiveDirectorySettingsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CacheActiveDirectorySettings)(nil)).Elem()
}

func (i *cacheActiveDirectorySettingsPtrType) ToCacheActiveDirectorySettingsPtrOutput() CacheActiveDirectorySettingsPtrOutput {
	return i.ToCacheActiveDirectorySettingsPtrOutputWithContext(context.Background())
}

func (i *cacheActiveDirectorySettingsPtrType) ToCacheActiveDirectorySettingsPtrOutputWithContext(ctx context.Context) CacheActiveDirectorySettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CacheActiveDirectorySettingsPtrOutput)
}

// Active Directory settings used to join a cache to a domain.
type CacheActiveDirectorySettingsOutput struct{ *pulumi.OutputState }

func (CacheActiveDirectorySettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CacheActiveDirectorySettings)(nil)).Elem()
}

func (o CacheActiveDirectorySettingsOutput) ToCacheActiveDirectorySettingsOutput() CacheActiveDirectorySettingsOutput {
	return o
}

func (o CacheActiveDirectorySettingsOutput) ToCacheActiveDirectorySettingsOutputWithContext(ctx context.Context) CacheActiveDirectorySettingsOutput {
	return o
}

func (o CacheActiveDirectorySettingsOutput) ToCacheActiveDirectorySettingsPtrOutput() CacheActiveDirectorySettingsPtrOutput {
	return o.ToCacheActiveDirectorySettingsPtrOutputWithContext(context.Background())
}

func (o CacheActiveDirectorySettingsOutput) ToCacheActiveDirectorySettingsPtrOutputWithContext(ctx context.Context) CacheActiveDirectorySettingsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v CacheActiveDirectorySettings) *CacheActiveDirectorySettings {
		return &v
	}).(CacheActiveDirectorySettingsPtrOutput)
}

// The NetBIOS name to assign to the HPC Cache when it joins the Active Directory domain as a server. Length must 1-15 characters from the class [-0-9a-zA-Z].
func (o CacheActiveDirectorySettingsOutput) CacheNetBiosName() pulumi.StringOutput {
	return o.ApplyT(func(v CacheActiveDirectorySettings) string { return v.CacheNetBiosName }).(pulumi.StringOutput)
}

// Active Directory admin credentials used to join the HPC Cache to a domain.
func (o CacheActiveDirectorySettingsOutput) Credentials() CacheActiveDirectorySettingsCredentialsPtrOutput {
	return o.ApplyT(func(v CacheActiveDirectorySettings) *CacheActiveDirectorySettingsCredentials { return v.Credentials }).(CacheActiveDirectorySettingsCredentialsPtrOutput)
}

// The fully qualified domain name of the Active Directory domain controller.
func (o CacheActiveDirectorySettingsOutput) DomainName() pulumi.StringOutput {
	return o.ApplyT(func(v CacheActiveDirectorySettings) string { return v.DomainName }).(pulumi.StringOutput)
}

// The Active Directory domain's NetBIOS name.
func (o CacheActiveDirectorySettingsOutput) DomainNetBiosName() pulumi.StringOutput {
	return o.ApplyT(func(v CacheActiveDirectorySettings) string { return v.DomainNetBiosName }).(pulumi.StringOutput)
}

// Primary DNS IP address used to resolve the Active Directory domain controller's fully qualified domain name.
func (o CacheActiveDirectorySettingsOutput) PrimaryDnsIpAddress() pulumi.StringOutput {
	return o.ApplyT(func(v CacheActiveDirectorySettings) string { return v.PrimaryDnsIpAddress }).(pulumi.StringOutput)
}

// Secondary DNS IP address used to resolve the Active Directory domain controller's fully qualified domain name.
func (o CacheActiveDirectorySettingsOutput) SecondaryDnsIpAddress() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CacheActiveDirectorySettings) *string { return v.SecondaryDnsIpAddress }).(pulumi.StringPtrOutput)
}

type CacheActiveDirectorySettingsPtrOutput struct{ *pulumi.OutputState }

func (CacheActiveDirectorySettingsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CacheActiveDirectorySettings)(nil)).Elem()
}

func (o CacheActiveDirectorySettingsPtrOutput) ToCacheActiveDirectorySettingsPtrOutput() CacheActiveDirectorySettingsPtrOutput {
	return o
}

func (o CacheActiveDirectorySettingsPtrOutput) ToCacheActiveDirectorySettingsPtrOutputWithContext(ctx context.Context) CacheActiveDirectorySettingsPtrOutput {
	return o
}

func (o CacheActiveDirectorySettingsPtrOutput) Elem() CacheActiveDirectorySettingsOutput {
	return o.ApplyT(func(v *CacheActiveDirectorySettings) CacheActiveDirectorySettings {
		if v != nil {
			return *v
		}
		var ret CacheActiveDirectorySettings
		return ret
	}).(CacheActiveDirectorySettingsOutput)
}

// The NetBIOS name to assign to the HPC Cache when it joins the Active Directory domain as a server. Length must 1-15 characters from the class [-0-9a-zA-Z].
func (o CacheActiveDirectorySettingsPtrOutput) CacheNetBiosName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CacheActiveDirectorySettings) *string {
		if v == nil {
			return nil
		}
		return &v.CacheNetBiosName
	}).(pulumi.StringPtrOutput)
}

// Active Directory admin credentials used to join the HPC Cache to a domain.
func (o CacheActiveDirectorySettingsPtrOutput) Credentials() CacheActiveDirectorySettingsCredentialsPtrOutput {
	return o.ApplyT(func(v *CacheActiveDirectorySettings) *CacheActiveDirectorySettingsCredentials {
		if v == nil {
			return nil
		}
		return v.Credentials
	}).(CacheActiveDirectorySettingsCredentialsPtrOutput)
}

// The fully qualified domain name of the Active Directory domain controller.
func (o CacheActiveDirectorySettingsPtrOutput) DomainName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CacheActiveDirectorySettings) *string {
		if v == nil {
			return nil
		}
		return &v.DomainName
	}).(pulumi.StringPtrOutput)
}

// The Active Directory domain's NetBIOS name.
func (o CacheActiveDirectorySettingsPtrOutput) DomainNetBiosName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CacheActiveDirectorySettings) *string {
		if v == nil {
			return nil
		}
		return &v.DomainNetBiosName
	}).(pulumi.StringPtrOutput)
}

// Primary DNS IP address used to resolve the Active Directory domain controller's fully qualified domain name.
func (o CacheActiveDirectorySettingsPtrOutput) PrimaryDnsIpAddress() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CacheActiveDirectorySettings) *string {
		if v == nil {
			return nil
		}
		return &v.PrimaryDnsIpAddress
	}).(pulumi.StringPtrOutput)
}

// Secondary DNS IP address used to resolve the Active Directory domain controller's fully qualified domain name.
func (o CacheActiveDirectorySettingsPtrOutput) SecondaryDnsIpAddress() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CacheActiveDirectorySettings) *string {
		if v == nil {
			return nil
		}
		return v.SecondaryDnsIpAddress
	}).(pulumi.StringPtrOutput)
}

// Active Directory admin credentials used to join the HPC Cache to a domain.
type CacheActiveDirectorySettingsCredentials struct {
	// Plain text password of the Active Directory domain administrator. This value is stored encrypted and not returned on response.
	Password string `pulumi:"password"`
	// Username of the Active Directory domain administrator. This value is stored encrypted and not returned on response.
	Username string `pulumi:"username"`
}

// CacheActiveDirectorySettingsCredentialsInput is an input type that accepts CacheActiveDirectorySettingsCredentialsArgs and CacheActiveDirectorySettingsCredentialsOutput values.
// You can construct a concrete instance of `CacheActiveDirectorySettingsCredentialsInput` via:
//
//	CacheActiveDirectorySettingsCredentialsArgs{...}
type CacheActiveDirectorySettingsCredentialsInput interface {
	pulumi.Input

	ToCacheActiveDirectorySettingsCredentialsOutput() CacheActiveDirectorySettingsCredentialsOutput
	ToCacheActiveDirectorySettingsCredentialsOutputWithContext(context.Context) CacheActiveDirectorySettingsCredentialsOutput
}

// Active Directory admin credentials used to join the HPC Cache to a domain.
type CacheActiveDirectorySettingsCredentialsArgs struct {
	// Plain text password of the Active Directory domain administrator. This value is stored encrypted and not returned on response.
	Password pulumi.StringInput `pulumi:"password"`
	// Username of the Active Directory domain administrator. This value is stored encrypted and not returned on response.
	Username pulumi.StringInput `pulumi:"username"`
}

func (CacheActiveDirectorySettingsCredentialsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CacheActiveDirectorySettingsCredentials)(nil)).Elem()
}

func (i CacheActiveDirectorySettingsCredentialsArgs) ToCacheActiveDirectorySettingsCredentialsOutput() CacheActiveDirectorySettingsCredentialsOutput {
	return i.ToCacheActiveDirectorySettingsCredentialsOutputWithContext(context.Background())
}

func (i CacheActiveDirectorySettingsCredentialsArgs) ToCacheActiveDirectorySettingsCredentialsOutputWithContext(ctx context.Context) CacheActiveDirectorySettingsCredentialsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CacheActiveDirectorySettingsCredentialsOutput)
}

func (i CacheActiveDirectorySettingsCredentialsArgs) ToCacheActiveDirectorySettingsCredentialsPtrOutput() CacheActiveDirectorySettingsCredentialsPtrOutput {
	return i.ToCacheActiveDirectorySettingsCredentialsPtrOutputWithContext(context.Background())
}

func (i CacheActiveDirectorySettingsCredentialsArgs) ToCacheActiveDirectorySettingsCredentialsPtrOutputWithContext(ctx context.Context) CacheActiveDirectorySettingsCredentialsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CacheActiveDirectorySettingsCredentialsOutput).ToCacheActiveDirectorySettingsCredentialsPtrOutputWithContext(ctx)
}

// CacheActiveDirectorySettingsCredentialsPtrInput is an input type that accepts CacheActiveDirectorySettingsCredentialsArgs, CacheActiveDirectorySettingsCredentialsPtr and CacheActiveDirectorySettingsCredentialsPtrOutput values.
// You can construct a concrete instance of `CacheActiveDirectorySettingsCredentialsPtrInput` via:
//
//	        CacheActiveDirectorySettingsCredentialsArgs{...}
//
//	or:
//
//	        nil
type CacheActiveDirectorySettingsCredentialsPtrInput interface {
	pulumi.Input

	ToCacheActiveDirectorySettingsCredentialsPtrOutput() CacheActiveDirectorySettingsCredentialsPtrOutput
	ToCacheActiveDirectorySettingsCredentialsPtrOutputWithContext(context.Context) CacheActiveDirectorySettingsCredentialsPtrOutput
}

type cacheActiveDirectorySettingsCredentialsPtrType CacheActiveDirectorySettingsCredentialsArgs

func CacheActiveDirectorySettingsCredentialsPtr(v *CacheActiveDirectorySettingsCredentialsArgs) CacheActiveDirectorySettingsCredentialsPtrInput {
	return (*cacheActiveDirectorySettingsCredentialsPtrType)(v)
}

func (*cacheActiveDirectorySettingsCredentialsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CacheActiveDirectorySettingsCredentials)(nil)).Elem()
}

func (i *cacheActiveDirectorySettingsCredentialsPtrType) ToCacheActiveDirectorySettingsCredentialsPtrOutput() CacheActiveDirectorySettingsCredentialsPtrOutput {
	return i.ToCacheActiveDirectorySettingsCredentialsPtrOutputWithContext(context.Background())
}

func (i *cacheActiveDirectorySettingsCredentialsPtrType) ToCacheActiveDirectorySettingsCredentialsPtrOutputWithContext(ctx context.Context) CacheActiveDirectorySettingsCredentialsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CacheActiveDirectorySettingsCredentialsPtrOutput)
}

// Active Directory admin credentials used to join the HPC Cache to a domain.
type CacheActiveDirectorySettingsCredentialsOutput struct{ *pulumi.OutputState }

func (CacheActiveDirectorySettingsCredentialsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CacheActiveDirectorySettingsCredentials)(nil)).Elem()
}

func (o CacheActiveDirectorySettingsCredentialsOutput) ToCacheActiveDirectorySettingsCredentialsOutput() CacheActiveDirectorySettingsCredentialsOutput {
	return o
}

func (o CacheActiveDirectorySettingsCredentialsOutput) ToCacheActiveDirectorySettingsCredentialsOutputWithContext(ctx context.Context) CacheActiveDirectorySettingsCredentialsOutput {
	return o
}

func (o CacheActiveDirectorySettingsCredentialsOutput) ToCacheActiveDirectorySettingsCredentialsPtrOutput() CacheActiveDirectorySettingsCredentialsPtrOutput {
	return o.ToCacheActiveDirectorySettingsCredentialsPtrOutputWithContext(context.Background())
}

func (o CacheActiveDirectorySettingsCredentialsOutput) ToCacheActiveDirectorySettingsCredentialsPtrOutputWithContext(ctx context.Context) CacheActiveDirectorySettingsCredentialsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v CacheActiveDirectorySettingsCredentials) *CacheActiveDirectorySettingsCredentials {
		return &v
	}).(CacheActiveDirectorySettingsCredentialsPtrOutput)
}

// Plain text password of the Active Directory domain administrator. This value is stored encrypted and not returned on response.
func (o CacheActiveDirectorySettingsCredentialsOutput) Password() pulumi.StringOutput {
	return o.ApplyT(func(v CacheActiveDirectorySettingsCredentials) string { return v.Password }).(pulumi.StringOutput)
}

// Username of the Active Directory domain administrator. This value is stored encrypted and not returned on response.
func (o CacheActiveDirectorySettingsCredentialsOutput) Username() pulumi.StringOutput {
	return o.ApplyT(func(v CacheActiveDirectorySettingsCredentials) string { return v.Username }).(pulumi.StringOutput)
}

type CacheActiveDirectorySettingsCredentialsPtrOutput struct{ *pulumi.OutputState }

func (CacheActiveDirectorySettingsCredentialsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CacheActiveDirectorySettingsCredentials)(nil)).Elem()
}

func (o CacheActiveDirectorySettingsCredentialsPtrOutput) ToCacheActiveDirectorySettingsCredentialsPtrOutput() CacheActiveDirectorySettingsCredentialsPtrOutput {
	return o
}

func (o CacheActiveDirectorySettingsCredentialsPtrOutput) ToCacheActiveDirectorySettingsCredentialsPtrOutputWithContext(ctx context.Context) CacheActiveDirectorySettingsCredentialsPtrOutput {
	return o
}

func (o CacheActiveDirectorySettingsCredentialsPtrOutput) Elem() CacheActiveDirectorySettingsCredentialsOutput {
	return o.ApplyT(func(v *CacheActiveDirectorySettingsCredentials) CacheActiveDirectorySettingsCredentials {
		if v != nil {
			return *v
		}
		var ret CacheActiveDirectorySettingsCredentials
		return ret
	}).(CacheActiveDirectorySettingsCredentialsOutput)
}

// Plain text password of the Active Directory domain administrator. This value is stored encrypted and not returned on response.
func (o CacheActiveDirectorySettingsCredentialsPtrOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CacheActiveDirectorySettingsCredentials) *string {
		if v == nil {
			return nil
		}
		return &v.Password
	}).(pulumi.StringPtrOutput)
}

// Username of the Active Directory domain administrator. This value is stored encrypted and not returned on response.
func (o CacheActiveDirectorySettingsCredentialsPtrOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CacheActiveDirectorySettingsCredentials) *string {
		if v == nil {
			return nil
		}
		return &v.Username
	}).(pulumi.StringPtrOutput)
}

// Active Directory settings used to join a cache to a domain.
type CacheActiveDirectorySettingsResponse struct {
	// The NetBIOS name to assign to the HPC Cache when it joins the Active Directory domain as a server. Length must 1-15 characters from the class [-0-9a-zA-Z].
	CacheNetBiosName string `pulumi:"cacheNetBiosName"`
	// Active Directory admin credentials used to join the HPC Cache to a domain.
	Credentials *CacheActiveDirectorySettingsResponseCredentials `pulumi:"credentials"`
	// True if the HPC Cache is joined to the Active Directory domain.
	DomainJoined string `pulumi:"domainJoined"`
	// The fully qualified domain name of the Active Directory domain controller.
	DomainName string `pulumi:"domainName"`
	// The Active Directory domain's NetBIOS name.
	DomainNetBiosName string `pulumi:"domainNetBiosName"`
	// Primary DNS IP address used to resolve the Active Directory domain controller's fully qualified domain name.
	PrimaryDnsIpAddress string `pulumi:"primaryDnsIpAddress"`
	// Secondary DNS IP address used to resolve the Active Directory domain controller's fully qualified domain name.
	SecondaryDnsIpAddress *string `pulumi:"secondaryDnsIpAddress"`
}

// Active Directory settings used to join a cache to a domain.
type CacheActiveDirectorySettingsResponseOutput struct{ *pulumi.OutputState }

func (CacheActiveDirectorySettingsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CacheActiveDirectorySettingsResponse)(nil)).Elem()
}

func (o CacheActiveDirectorySettingsResponseOutput) ToCacheActiveDirectorySettingsResponseOutput() CacheActiveDirectorySettingsResponseOutput {
	return o
}

func (o CacheActiveDirectorySettingsResponseOutput) ToCacheActiveDirectorySettingsResponseOutputWithContext(ctx context.Context) CacheActiveDirectorySettingsResponseOutput {
	return o
}

// The NetBIOS name to assign to the HPC Cache when it joins the Active Directory domain as a server. Length must 1-15 characters from the class [-0-9a-zA-Z].
func (o CacheActiveDirectorySettingsResponseOutput) CacheNetBiosName() pulumi.StringOutput {
	return o.ApplyT(func(v CacheActiveDirectorySettingsResponse) string { return v.CacheNetBiosName }).(pulumi.StringOutput)
}

// Active Directory admin credentials used to join the HPC Cache to a domain.
func (o CacheActiveDirectorySettingsResponseOutput) Credentials() CacheActiveDirectorySettingsResponseCredentialsPtrOutput {
	return o.ApplyT(func(v CacheActiveDirectorySettingsResponse) *CacheActiveDirectorySettingsResponseCredentials {
		return v.Credentials
	}).(CacheActiveDirectorySettingsResponseCredentialsPtrOutput)
}

// True if the HPC Cache is joined to the Active Directory domain.
func (o CacheActiveDirectorySettingsResponseOutput) DomainJoined() pulumi.StringOutput {
	return o.ApplyT(func(v CacheActiveDirectorySettingsResponse) string { return v.DomainJoined }).(pulumi.StringOutput)
}

// The fully qualified domain name of the Active Directory domain controller.
func (o CacheActiveDirectorySettingsResponseOutput) DomainName() pulumi.StringOutput {
	return o.ApplyT(func(v CacheActiveDirectorySettingsResponse) string { return v.DomainName }).(pulumi.StringOutput)
}

// The Active Directory domain's NetBIOS name.
func (o CacheActiveDirectorySettingsResponseOutput) DomainNetBiosName() pulumi.StringOutput {
	return o.ApplyT(func(v CacheActiveDirectorySettingsResponse) string { return v.DomainNetBiosName }).(pulumi.StringOutput)
}

// Primary DNS IP address used to resolve the Active Directory domain controller's fully qualified domain name.
func (o CacheActiveDirectorySettingsResponseOutput) PrimaryDnsIpAddress() pulumi.StringOutput {
	return o.ApplyT(func(v CacheActiveDirectorySettingsResponse) string { return v.PrimaryDnsIpAddress }).(pulumi.StringOutput)
}

// Secondary DNS IP address used to resolve the Active Directory domain controller's fully qualified domain name.
func (o CacheActiveDirectorySettingsResponseOutput) SecondaryDnsIpAddress() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CacheActiveDirectorySettingsResponse) *string { return v.SecondaryDnsIpAddress }).(pulumi.StringPtrOutput)
}

type CacheActiveDirectorySettingsResponsePtrOutput struct{ *pulumi.OutputState }

func (CacheActiveDirectorySettingsResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CacheActiveDirectorySettingsResponse)(nil)).Elem()
}

func (o CacheActiveDirectorySettingsResponsePtrOutput) ToCacheActiveDirectorySettingsResponsePtrOutput() CacheActiveDirectorySettingsResponsePtrOutput {
	return o
}

func (o CacheActiveDirectorySettingsResponsePtrOutput) ToCacheActiveDirectorySettingsResponsePtrOutputWithContext(ctx context.Context) CacheActiveDirectorySettingsResponsePtrOutput {
	return o
}

func (o CacheActiveDirectorySettingsResponsePtrOutput) Elem() CacheActiveDirectorySettingsResponseOutput {
	return o.ApplyT(func(v *CacheActiveDirectorySettingsResponse) CacheActiveDirectorySettingsResponse {
		if v != nil {
			return *v
		}
		var ret CacheActiveDirectorySettingsResponse
		return ret
	}).(CacheActiveDirectorySettingsResponseOutput)
}

// The NetBIOS name to assign to the HPC Cache when it joins the Active Directory domain as a server. Length must 1-15 characters from the class [-0-9a-zA-Z].
func (o CacheActiveDirectorySettingsResponsePtrOutput) CacheNetBiosName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CacheActiveDirectorySettingsResponse) *string {
		if v == nil {
			return nil
		}
		return &v.CacheNetBiosName
	}).(pulumi.StringPtrOutput)
}

// Active Directory admin credentials used to join the HPC Cache to a domain.
func (o CacheActiveDirectorySettingsResponsePtrOutput) Credentials() CacheActiveDirectorySettingsResponseCredentialsPtrOutput {
	return o.ApplyT(func(v *CacheActiveDirectorySettingsResponse) *CacheActiveDirectorySettingsResponseCredentials {
		if v == nil {
			return nil
		}
		return v.Credentials
	}).(CacheActiveDirectorySettingsResponseCredentialsPtrOutput)
}

// True if the HPC Cache is joined to the Active Directory domain.
func (o CacheActiveDirectorySettingsResponsePtrOutput) DomainJoined() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CacheActiveDirectorySettingsResponse) *string {
		if v == nil {
			return nil
		}
		return &v.DomainJoined
	}).(pulumi.StringPtrOutput)
}

// The fully qualified domain name of the Active Directory domain controller.
func (o CacheActiveDirectorySettingsResponsePtrOutput) DomainName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CacheActiveDirectorySettingsResponse) *string {
		if v == nil {
			return nil
		}
		return &v.DomainName
	}).(pulumi.StringPtrOutput)
}

// The Active Directory domain's NetBIOS name.
func (o CacheActiveDirectorySettingsResponsePtrOutput) DomainNetBiosName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CacheActiveDirectorySettingsResponse) *string {
		if v == nil {
			return nil
		}
		return &v.DomainNetBiosName
	}).(pulumi.StringPtrOutput)
}

// Primary DNS IP address used to resolve the Active Directory domain controller's fully qualified domain name.
func (o CacheActiveDirectorySettingsResponsePtrOutput) PrimaryDnsIpAddress() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CacheActiveDirectorySettingsResponse) *string {
		if v == nil {
			return nil
		}
		return &v.PrimaryDnsIpAddress
	}).(pulumi.StringPtrOutput)
}

// Secondary DNS IP address used to resolve the Active Directory domain controller's fully qualified domain name.
func (o CacheActiveDirectorySettingsResponsePtrOutput) SecondaryDnsIpAddress() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CacheActiveDirectorySettingsResponse) *string {
		if v == nil {
			return nil
		}
		return v.SecondaryDnsIpAddress
	}).(pulumi.StringPtrOutput)
}

// Active Directory admin credentials used to join the HPC Cache to a domain.
type CacheActiveDirectorySettingsResponseCredentials struct {
	// Plain text password of the Active Directory domain administrator. This value is stored encrypted and not returned on response.
	Password string `pulumi:"password"`
	// Username of the Active Directory domain administrator. This value is stored encrypted and not returned on response.
	Username string `pulumi:"username"`
}

// Active Directory admin credentials used to join the HPC Cache to a domain.
type CacheActiveDirectorySettingsResponseCredentialsOutput struct{ *pulumi.OutputState }

func (CacheActiveDirectorySettingsResponseCredentialsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CacheActiveDirectorySettingsResponseCredentials)(nil)).Elem()
}

func (o CacheActiveDirectorySettingsResponseCredentialsOutput) ToCacheActiveDirectorySettingsResponseCredentialsOutput() CacheActiveDirectorySettingsResponseCredentialsOutput {
	return o
}

func (o CacheActiveDirectorySettingsResponseCredentialsOutput) ToCacheActiveDirectorySettingsResponseCredentialsOutputWithContext(ctx context.Context) CacheActiveDirectorySettingsResponseCredentialsOutput {
	return o
}

// Plain text password of the Active Directory domain administrator. This value is stored encrypted and not returned on response.
func (o CacheActiveDirectorySettingsResponseCredentialsOutput) Password() pulumi.StringOutput {
	return o.ApplyT(func(v CacheActiveDirectorySettingsResponseCredentials) string { return v.Password }).(pulumi.StringOutput)
}

// Username of the Active Directory domain administrator. This value is stored encrypted and not returned on response.
func (o CacheActiveDirectorySettingsResponseCredentialsOutput) Username() pulumi.StringOutput {
	return o.ApplyT(func(v CacheActiveDirectorySettingsResponseCredentials) string { return v.Username }).(pulumi.StringOutput)
}

type CacheActiveDirectorySettingsResponseCredentialsPtrOutput struct{ *pulumi.OutputState }

func (CacheActiveDirectorySettingsResponseCredentialsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CacheActiveDirectorySettingsResponseCredentials)(nil)).Elem()
}

func (o CacheActiveDirectorySettingsResponseCredentialsPtrOutput) ToCacheActiveDirectorySettingsResponseCredentialsPtrOutput() CacheActiveDirectorySettingsResponseCredentialsPtrOutput {
	return o
}

func (o CacheActiveDirectorySettingsResponseCredentialsPtrOutput) ToCacheActiveDirectorySettingsResponseCredentialsPtrOutputWithContext(ctx context.Context) CacheActiveDirectorySettingsResponseCredentialsPtrOutput {
	return o
}

func (o CacheActiveDirectorySettingsResponseCredentialsPtrOutput) Elem() CacheActiveDirectorySettingsResponseCredentialsOutput {
	return o.ApplyT(func(v *CacheActiveDirectorySettingsResponseCredentials) CacheActiveDirectorySettingsResponseCredentials {
		if v != nil {
			return *v
		}
		var ret CacheActiveDirectorySettingsResponseCredentials
		return ret
	}).(CacheActiveDirectorySettingsResponseCredentialsOutput)
}

// Plain text password of the Active Directory domain administrator. This value is stored encrypted and not returned on response.
func (o CacheActiveDirectorySettingsResponseCredentialsPtrOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CacheActiveDirectorySettingsResponseCredentials) *string {
		if v == nil {
			return nil
		}
		return &v.Password
	}).(pulumi.StringPtrOutput)
}

// Username of the Active Directory domain administrator. This value is stored encrypted and not returned on response.
func (o CacheActiveDirectorySettingsResponseCredentialsPtrOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CacheActiveDirectorySettingsResponseCredentials) *string {
		if v == nil {
			return nil
		}
		return &v.Username
	}).(pulumi.StringPtrOutput)
}

// Cache Directory Services settings.
type CacheDirectorySettings struct {
	// Specifies settings for joining the HPC Cache to an Active Directory domain.
	ActiveDirectory *CacheActiveDirectorySettings `pulumi:"activeDirectory"`
	// Specifies settings for Extended Groups. Extended Groups allows users to be members of more than 16 groups.
	UsernameDownload *CacheUsernameDownloadSettings `pulumi:"usernameDownload"`
}

// Defaults sets the appropriate defaults for CacheDirectorySettings
func (val *CacheDirectorySettings) Defaults() *CacheDirectorySettings {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.UsernameDownload = tmp.UsernameDownload.Defaults()

	return &tmp
}

// CacheDirectorySettingsInput is an input type that accepts CacheDirectorySettingsArgs and CacheDirectorySettingsOutput values.
// You can construct a concrete instance of `CacheDirectorySettingsInput` via:
//
//	CacheDirectorySettingsArgs{...}
type CacheDirectorySettingsInput interface {
	pulumi.Input

	ToCacheDirectorySettingsOutput() CacheDirectorySettingsOutput
	ToCacheDirectorySettingsOutputWithContext(context.Context) CacheDirectorySettingsOutput
}

// Cache Directory Services settings.
type CacheDirectorySettingsArgs struct {
	// Specifies settings for joining the HPC Cache to an Active Directory domain.
	ActiveDirectory CacheActiveDirectorySettingsPtrInput `pulumi:"activeDirectory"`
	// Specifies settings for Extended Groups. Extended Groups allows users to be members of more than 16 groups.
	UsernameDownload CacheUsernameDownloadSettingsPtrInput `pulumi:"usernameDownload"`
}

// Defaults sets the appropriate defaults for CacheDirectorySettingsArgs
func (val *CacheDirectorySettingsArgs) Defaults() *CacheDirectorySettingsArgs {
	if val == nil {
		return nil
	}
	tmp := *val

	return &tmp
}
func (CacheDirectorySettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CacheDirectorySettings)(nil)).Elem()
}

func (i CacheDirectorySettingsArgs) ToCacheDirectorySettingsOutput() CacheDirectorySettingsOutput {
	return i.ToCacheDirectorySettingsOutputWithContext(context.Background())
}

func (i CacheDirectorySettingsArgs) ToCacheDirectorySettingsOutputWithContext(ctx context.Context) CacheDirectorySettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CacheDirectorySettingsOutput)
}

func (i CacheDirectorySettingsArgs) ToCacheDirectorySettingsPtrOutput() CacheDirectorySettingsPtrOutput {
	return i.ToCacheDirectorySettingsPtrOutputWithContext(context.Background())
}

func (i CacheDirectorySettingsArgs) ToCacheDirectorySettingsPtrOutputWithContext(ctx context.Context) CacheDirectorySettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CacheDirectorySettingsOutput).ToCacheDirectorySettingsPtrOutputWithContext(ctx)
}

// CacheDirectorySettingsPtrInput is an input type that accepts CacheDirectorySettingsArgs, CacheDirectorySettingsPtr and CacheDirectorySettingsPtrOutput values.
// You can construct a concrete instance of `CacheDirectorySettingsPtrInput` via:
//
//	        CacheDirectorySettingsArgs{...}
//
//	or:
//
//	        nil
type CacheDirectorySettingsPtrInput interface {
	pulumi.Input

	ToCacheDirectorySettingsPtrOutput() CacheDirectorySettingsPtrOutput
	ToCacheDirectorySettingsPtrOutputWithContext(context.Context) CacheDirectorySettingsPtrOutput
}

type cacheDirectorySettingsPtrType CacheDirectorySettingsArgs

func CacheDirectorySettingsPtr(v *CacheDirectorySettingsArgs) CacheDirectorySettingsPtrInput {
	return (*cacheDirectorySettingsPtrType)(v)
}

func (*cacheDirectorySettingsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CacheDirectorySettings)(nil)).Elem()
}

func (i *cacheDirectorySettingsPtrType) ToCacheDirectorySettingsPtrOutput() CacheDirectorySettingsPtrOutput {
	return i.ToCacheDirectorySettingsPtrOutputWithContext(context.Background())
}

func (i *cacheDirectorySettingsPtrType) ToCacheDirectorySettingsPtrOutputWithContext(ctx context.Context) CacheDirectorySettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CacheDirectorySettingsPtrOutput)
}

// Cache Directory Services settings.
type CacheDirectorySettingsOutput struct{ *pulumi.OutputState }

func (CacheDirectorySettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CacheDirectorySettings)(nil)).Elem()
}

func (o CacheDirectorySettingsOutput) ToCacheDirectorySettingsOutput() CacheDirectorySettingsOutput {
	return o
}

func (o CacheDirectorySettingsOutput) ToCacheDirectorySettingsOutputWithContext(ctx context.Context) CacheDirectorySettingsOutput {
	return o
}

func (o CacheDirectorySettingsOutput) ToCacheDirectorySettingsPtrOutput() CacheDirectorySettingsPtrOutput {
	return o.ToCacheDirectorySettingsPtrOutputWithContext(context.Background())
}

func (o CacheDirectorySettingsOutput) ToCacheDirectorySettingsPtrOutputWithContext(ctx context.Context) CacheDirectorySettingsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v CacheDirectorySettings) *CacheDirectorySettings {
		return &v
	}).(CacheDirectorySettingsPtrOutput)
}

// Specifies settings for joining the HPC Cache to an Active Directory domain.
func (o CacheDirectorySettingsOutput) ActiveDirectory() CacheActiveDirectorySettingsPtrOutput {
	return o.ApplyT(func(v CacheDirectorySettings) *CacheActiveDirectorySettings { return v.ActiveDirectory }).(CacheActiveDirectorySettingsPtrOutput)
}

// Specifies settings for Extended Groups. Extended Groups allows users to be members of more than 16 groups.
func (o CacheDirectorySettingsOutput) UsernameDownload() CacheUsernameDownloadSettingsPtrOutput {
	return o.ApplyT(func(v CacheDirectorySettings) *CacheUsernameDownloadSettings { return v.UsernameDownload }).(CacheUsernameDownloadSettingsPtrOutput)
}

type CacheDirectorySettingsPtrOutput struct{ *pulumi.OutputState }

func (CacheDirectorySettingsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CacheDirectorySettings)(nil)).Elem()
}

func (o CacheDirectorySettingsPtrOutput) ToCacheDirectorySettingsPtrOutput() CacheDirectorySettingsPtrOutput {
	return o
}

func (o CacheDirectorySettingsPtrOutput) ToCacheDirectorySettingsPtrOutputWithContext(ctx context.Context) CacheDirectorySettingsPtrOutput {
	return o
}

func (o CacheDirectorySettingsPtrOutput) Elem() CacheDirectorySettingsOutput {
	return o.ApplyT(func(v *CacheDirectorySettings) CacheDirectorySettings {
		if v != nil {
			return *v
		}
		var ret CacheDirectorySettings
		return ret
	}).(CacheDirectorySettingsOutput)
}

// Specifies settings for joining the HPC Cache to an Active Directory domain.
func (o CacheDirectorySettingsPtrOutput) ActiveDirectory() CacheActiveDirectorySettingsPtrOutput {
	return o.ApplyT(func(v *CacheDirectorySettings) *CacheActiveDirectorySettings {
		if v == nil {
			return nil
		}
		return v.ActiveDirectory
	}).(CacheActiveDirectorySettingsPtrOutput)
}

// Specifies settings for Extended Groups. Extended Groups allows users to be members of more than 16 groups.
func (o CacheDirectorySettingsPtrOutput) UsernameDownload() CacheUsernameDownloadSettingsPtrOutput {
	return o.ApplyT(func(v *CacheDirectorySettings) *CacheUsernameDownloadSettings {
		if v == nil {
			return nil
		}
		return v.UsernameDownload
	}).(CacheUsernameDownloadSettingsPtrOutput)
}

// Cache Directory Services settings.
type CacheDirectorySettingsResponse struct {
	// Specifies settings for joining the HPC Cache to an Active Directory domain.
	ActiveDirectory *CacheActiveDirectorySettingsResponse `pulumi:"activeDirectory"`
	// Specifies settings for Extended Groups. Extended Groups allows users to be members of more than 16 groups.
	UsernameDownload *CacheUsernameDownloadSettingsResponse `pulumi:"usernameDownload"`
}

// Defaults sets the appropriate defaults for CacheDirectorySettingsResponse
func (val *CacheDirectorySettingsResponse) Defaults() *CacheDirectorySettingsResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.UsernameDownload = tmp.UsernameDownload.Defaults()

	return &tmp
}

// Cache Directory Services settings.
type CacheDirectorySettingsResponseOutput struct{ *pulumi.OutputState }

func (CacheDirectorySettingsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CacheDirectorySettingsResponse)(nil)).Elem()
}

func (o CacheDirectorySettingsResponseOutput) ToCacheDirectorySettingsResponseOutput() CacheDirectorySettingsResponseOutput {
	return o
}

func (o CacheDirectorySettingsResponseOutput) ToCacheDirectorySettingsResponseOutputWithContext(ctx context.Context) CacheDirectorySettingsResponseOutput {
	return o
}

// Specifies settings for joining the HPC Cache to an Active Directory domain.
func (o CacheDirectorySettingsResponseOutput) ActiveDirectory() CacheActiveDirectorySettingsResponsePtrOutput {
	return o.ApplyT(func(v CacheDirectorySettingsResponse) *CacheActiveDirectorySettingsResponse { return v.ActiveDirectory }).(CacheActiveDirectorySettingsResponsePtrOutput)
}

// Specifies settings for Extended Groups. Extended Groups allows users to be members of more than 16 groups.
func (o CacheDirectorySettingsResponseOutput) UsernameDownload() CacheUsernameDownloadSettingsResponsePtrOutput {
	return o.ApplyT(func(v CacheDirectorySettingsResponse) *CacheUsernameDownloadSettingsResponse {
		return v.UsernameDownload
	}).(CacheUsernameDownloadSettingsResponsePtrOutput)
}

type CacheDirectorySettingsResponsePtrOutput struct{ *pulumi.OutputState }

func (CacheDirectorySettingsResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CacheDirectorySettingsResponse)(nil)).Elem()
}

func (o CacheDirectorySettingsResponsePtrOutput) ToCacheDirectorySettingsResponsePtrOutput() CacheDirectorySettingsResponsePtrOutput {
	return o
}

func (o CacheDirectorySettingsResponsePtrOutput) ToCacheDirectorySettingsResponsePtrOutputWithContext(ctx context.Context) CacheDirectorySettingsResponsePtrOutput {
	return o
}

func (o CacheDirectorySettingsResponsePtrOutput) Elem() CacheDirectorySettingsResponseOutput {
	return o.ApplyT(func(v *CacheDirectorySettingsResponse) CacheDirectorySettingsResponse {
		if v != nil {
			return *v
		}
		var ret CacheDirectorySettingsResponse
		return ret
	}).(CacheDirectorySettingsResponseOutput)
}

// Specifies settings for joining the HPC Cache to an Active Directory domain.
func (o CacheDirectorySettingsResponsePtrOutput) ActiveDirectory() CacheActiveDirectorySettingsResponsePtrOutput {
	return o.ApplyT(func(v *CacheDirectorySettingsResponse) *CacheActiveDirectorySettingsResponse {
		if v == nil {
			return nil
		}
		return v.ActiveDirectory
	}).(CacheActiveDirectorySettingsResponsePtrOutput)
}

// Specifies settings for Extended Groups. Extended Groups allows users to be members of more than 16 groups.
func (o CacheDirectorySettingsResponsePtrOutput) UsernameDownload() CacheUsernameDownloadSettingsResponsePtrOutput {
	return o.ApplyT(func(v *CacheDirectorySettingsResponse) *CacheUsernameDownloadSettingsResponse {
		if v == nil {
			return nil
		}
		return v.UsernameDownload
	}).(CacheUsernameDownloadSettingsResponsePtrOutput)
}

// Cache encryption settings.
type CacheEncryptionSettings struct {
	// Specifies the location of the key encryption key in Key Vault.
	KeyEncryptionKey *KeyVaultKeyReference `pulumi:"keyEncryptionKey"`
	// Specifies whether the service will automatically rotate to the newest version of the key in the Key Vault.
	RotationToLatestKeyVersionEnabled *bool `pulumi:"rotationToLatestKeyVersionEnabled"`
}

// CacheEncryptionSettingsInput is an input type that accepts CacheEncryptionSettingsArgs and CacheEncryptionSettingsOutput values.
// You can construct a concrete instance of `CacheEncryptionSettingsInput` via:
//
//	CacheEncryptionSettingsArgs{...}
type CacheEncryptionSettingsInput interface {
	pulumi.Input

	ToCacheEncryptionSettingsOutput() CacheEncryptionSettingsOutput
	ToCacheEncryptionSettingsOutputWithContext(context.Context) CacheEncryptionSettingsOutput
}

// Cache encryption settings.
type CacheEncryptionSettingsArgs struct {
	// Specifies the location of the key encryption key in Key Vault.
	KeyEncryptionKey KeyVaultKeyReferencePtrInput `pulumi:"keyEncryptionKey"`
	// Specifies whether the service will automatically rotate to the newest version of the key in the Key Vault.
	RotationToLatestKeyVersionEnabled pulumi.BoolPtrInput `pulumi:"rotationToLatestKeyVersionEnabled"`
}

func (CacheEncryptionSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CacheEncryptionSettings)(nil)).Elem()
}

func (i CacheEncryptionSettingsArgs) ToCacheEncryptionSettingsOutput() CacheEncryptionSettingsOutput {
	return i.ToCacheEncryptionSettingsOutputWithContext(context.Background())
}

func (i CacheEncryptionSettingsArgs) ToCacheEncryptionSettingsOutputWithContext(ctx context.Context) CacheEncryptionSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CacheEncryptionSettingsOutput)
}

func (i CacheEncryptionSettingsArgs) ToCacheEncryptionSettingsPtrOutput() CacheEncryptionSettingsPtrOutput {
	return i.ToCacheEncryptionSettingsPtrOutputWithContext(context.Background())
}

func (i CacheEncryptionSettingsArgs) ToCacheEncryptionSettingsPtrOutputWithContext(ctx context.Context) CacheEncryptionSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CacheEncryptionSettingsOutput).ToCacheEncryptionSettingsPtrOutputWithContext(ctx)
}

// CacheEncryptionSettingsPtrInput is an input type that accepts CacheEncryptionSettingsArgs, CacheEncryptionSettingsPtr and CacheEncryptionSettingsPtrOutput values.
// You can construct a concrete instance of `CacheEncryptionSettingsPtrInput` via:
//
//	        CacheEncryptionSettingsArgs{...}
//
//	or:
//
//	        nil
type CacheEncryptionSettingsPtrInput interface {
	pulumi.Input

	ToCacheEncryptionSettingsPtrOutput() CacheEncryptionSettingsPtrOutput
	ToCacheEncryptionSettingsPtrOutputWithContext(context.Context) CacheEncryptionSettingsPtrOutput
}

type cacheEncryptionSettingsPtrType CacheEncryptionSettingsArgs

func CacheEncryptionSettingsPtr(v *CacheEncryptionSettingsArgs) CacheEncryptionSettingsPtrInput {
	return (*cacheEncryptionSettingsPtrType)(v)
}

func (*cacheEncryptionSettingsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CacheEncryptionSettings)(nil)).Elem()
}

func (i *cacheEncryptionSettingsPtrType) ToCacheEncryptionSettingsPtrOutput() CacheEncryptionSettingsPtrOutput {
	return i.ToCacheEncryptionSettingsPtrOutputWithContext(context.Background())
}

func (i *cacheEncryptionSettingsPtrType) ToCacheEncryptionSettingsPtrOutputWithContext(ctx context.Context) CacheEncryptionSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CacheEncryptionSettingsPtrOutput)
}

// Cache encryption settings.
type CacheEncryptionSettingsOutput struct{ *pulumi.OutputState }

func (CacheEncryptionSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CacheEncryptionSettings)(nil)).Elem()
}

func (o CacheEncryptionSettingsOutput) ToCacheEncryptionSettingsOutput() CacheEncryptionSettingsOutput {
	return o
}

func (o CacheEncryptionSettingsOutput) ToCacheEncryptionSettingsOutputWithContext(ctx context.Context) CacheEncryptionSettingsOutput {
	return o
}

func (o CacheEncryptionSettingsOutput) ToCacheEncryptionSettingsPtrOutput() CacheEncryptionSettingsPtrOutput {
	return o.ToCacheEncryptionSettingsPtrOutputWithContext(context.Background())
}

func (o CacheEncryptionSettingsOutput) ToCacheEncryptionSettingsPtrOutputWithContext(ctx context.Context) CacheEncryptionSettingsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v CacheEncryptionSettings) *CacheEncryptionSettings {
		return &v
	}).(CacheEncryptionSettingsPtrOutput)
}

// Specifies the location of the key encryption key in Key Vault.
func (o CacheEncryptionSettingsOutput) KeyEncryptionKey() KeyVaultKeyReferencePtrOutput {
	return o.ApplyT(func(v CacheEncryptionSettings) *KeyVaultKeyReference { return v.KeyEncryptionKey }).(KeyVaultKeyReferencePtrOutput)
}

// Specifies whether the service will automatically rotate to the newest version of the key in the Key Vault.
func (o CacheEncryptionSettingsOutput) RotationToLatestKeyVersionEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v CacheEncryptionSettings) *bool { return v.RotationToLatestKeyVersionEnabled }).(pulumi.BoolPtrOutput)
}

type CacheEncryptionSettingsPtrOutput struct{ *pulumi.OutputState }

func (CacheEncryptionSettingsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CacheEncryptionSettings)(nil)).Elem()
}

func (o CacheEncryptionSettingsPtrOutput) ToCacheEncryptionSettingsPtrOutput() CacheEncryptionSettingsPtrOutput {
	return o
}

func (o CacheEncryptionSettingsPtrOutput) ToCacheEncryptionSettingsPtrOutputWithContext(ctx context.Context) CacheEncryptionSettingsPtrOutput {
	return o
}

func (o CacheEncryptionSettingsPtrOutput) Elem() CacheEncryptionSettingsOutput {
	return o.ApplyT(func(v *CacheEncryptionSettings) CacheEncryptionSettings {
		if v != nil {
			return *v
		}
		var ret CacheEncryptionSettings
		return ret
	}).(CacheEncryptionSettingsOutput)
}

// Specifies the location of the key encryption key in Key Vault.
func (o CacheEncryptionSettingsPtrOutput) KeyEncryptionKey() KeyVaultKeyReferencePtrOutput {
	return o.ApplyT(func(v *CacheEncryptionSettings) *KeyVaultKeyReference {
		if v == nil {
			return nil
		}
		return v.KeyEncryptionKey
	}).(KeyVaultKeyReferencePtrOutput)
}

// Specifies whether the service will automatically rotate to the newest version of the key in the Key Vault.
func (o CacheEncryptionSettingsPtrOutput) RotationToLatestKeyVersionEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *CacheEncryptionSettings) *bool {
		if v == nil {
			return nil
		}
		return v.RotationToLatestKeyVersionEnabled
	}).(pulumi.BoolPtrOutput)
}

// Cache encryption settings.
type CacheEncryptionSettingsResponse struct {
	// Specifies the location of the key encryption key in Key Vault.
	KeyEncryptionKey *KeyVaultKeyReferenceResponse `pulumi:"keyEncryptionKey"`
	// Specifies whether the service will automatically rotate to the newest version of the key in the Key Vault.
	RotationToLatestKeyVersionEnabled *bool `pulumi:"rotationToLatestKeyVersionEnabled"`
}

// Cache encryption settings.
type CacheEncryptionSettingsResponseOutput struct{ *pulumi.OutputState }

func (CacheEncryptionSettingsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CacheEncryptionSettingsResponse)(nil)).Elem()
}

func (o CacheEncryptionSettingsResponseOutput) ToCacheEncryptionSettingsResponseOutput() CacheEncryptionSettingsResponseOutput {
	return o
}

func (o CacheEncryptionSettingsResponseOutput) ToCacheEncryptionSettingsResponseOutputWithContext(ctx context.Context) CacheEncryptionSettingsResponseOutput {
	return o
}

// Specifies the location of the key encryption key in Key Vault.
func (o CacheEncryptionSettingsResponseOutput) KeyEncryptionKey() KeyVaultKeyReferenceResponsePtrOutput {
	return o.ApplyT(func(v CacheEncryptionSettingsResponse) *KeyVaultKeyReferenceResponse { return v.KeyEncryptionKey }).(KeyVaultKeyReferenceResponsePtrOutput)
}

// Specifies whether the service will automatically rotate to the newest version of the key in the Key Vault.
func (o CacheEncryptionSettingsResponseOutput) RotationToLatestKeyVersionEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v CacheEncryptionSettingsResponse) *bool { return v.RotationToLatestKeyVersionEnabled }).(pulumi.BoolPtrOutput)
}

type CacheEncryptionSettingsResponsePtrOutput struct{ *pulumi.OutputState }

func (CacheEncryptionSettingsResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CacheEncryptionSettingsResponse)(nil)).Elem()
}

func (o CacheEncryptionSettingsResponsePtrOutput) ToCacheEncryptionSettingsResponsePtrOutput() CacheEncryptionSettingsResponsePtrOutput {
	return o
}

func (o CacheEncryptionSettingsResponsePtrOutput) ToCacheEncryptionSettingsResponsePtrOutputWithContext(ctx context.Context) CacheEncryptionSettingsResponsePtrOutput {
	return o
}

func (o CacheEncryptionSettingsResponsePtrOutput) Elem() CacheEncryptionSettingsResponseOutput {
	return o.ApplyT(func(v *CacheEncryptionSettingsResponse) CacheEncryptionSettingsResponse {
		if v != nil {
			return *v
		}
		var ret CacheEncryptionSettingsResponse
		return ret
	}).(CacheEncryptionSettingsResponseOutput)
}

// Specifies the location of the key encryption key in Key Vault.
func (o CacheEncryptionSettingsResponsePtrOutput) KeyEncryptionKey() KeyVaultKeyReferenceResponsePtrOutput {
	return o.ApplyT(func(v *CacheEncryptionSettingsResponse) *KeyVaultKeyReferenceResponse {
		if v == nil {
			return nil
		}
		return v.KeyEncryptionKey
	}).(KeyVaultKeyReferenceResponsePtrOutput)
}

// Specifies whether the service will automatically rotate to the newest version of the key in the Key Vault.
func (o CacheEncryptionSettingsResponsePtrOutput) RotationToLatestKeyVersionEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *CacheEncryptionSettingsResponse) *bool {
		if v == nil {
			return nil
		}
		return v.RotationToLatestKeyVersionEnabled
	}).(pulumi.BoolPtrOutput)
}

// An indication of Cache health. Gives more information about health than just that related to provisioning.
type CacheHealthResponse struct {
	// Outstanding conditions that need to be investigated and resolved.
	Conditions []ConditionResponse `pulumi:"conditions"`
	// List of Cache health states.
	State *string `pulumi:"state"`
	// Describes explanation of state.
	StatusDescription *string `pulumi:"statusDescription"`
}

// An indication of Cache health. Gives more information about health than just that related to provisioning.
type CacheHealthResponseOutput struct{ *pulumi.OutputState }

func (CacheHealthResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CacheHealthResponse)(nil)).Elem()
}

func (o CacheHealthResponseOutput) ToCacheHealthResponseOutput() CacheHealthResponseOutput {
	return o
}

func (o CacheHealthResponseOutput) ToCacheHealthResponseOutputWithContext(ctx context.Context) CacheHealthResponseOutput {
	return o
}

// Outstanding conditions that need to be investigated and resolved.
func (o CacheHealthResponseOutput) Conditions() ConditionResponseArrayOutput {
	return o.ApplyT(func(v CacheHealthResponse) []ConditionResponse { return v.Conditions }).(ConditionResponseArrayOutput)
}

// List of Cache health states.
func (o CacheHealthResponseOutput) State() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CacheHealthResponse) *string { return v.State }).(pulumi.StringPtrOutput)
}

// Describes explanation of state.
func (o CacheHealthResponseOutput) StatusDescription() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CacheHealthResponse) *string { return v.StatusDescription }).(pulumi.StringPtrOutput)
}

// Cache identity properties.
type CacheIdentity struct {
	// The type of identity used for the cache
	Type *CacheIdentityType `pulumi:"type"`
	// A dictionary where each key is a user assigned identity resource ID, and each key's value is an empty dictionary.
	UserAssignedIdentities map[string]interface{} `pulumi:"userAssignedIdentities"`
}

// CacheIdentityInput is an input type that accepts CacheIdentityArgs and CacheIdentityOutput values.
// You can construct a concrete instance of `CacheIdentityInput` via:
//
//	CacheIdentityArgs{...}
type CacheIdentityInput interface {
	pulumi.Input

	ToCacheIdentityOutput() CacheIdentityOutput
	ToCacheIdentityOutputWithContext(context.Context) CacheIdentityOutput
}

// Cache identity properties.
type CacheIdentityArgs struct {
	// The type of identity used for the cache
	Type CacheIdentityTypePtrInput `pulumi:"type"`
	// A dictionary where each key is a user assigned identity resource ID, and each key's value is an empty dictionary.
	UserAssignedIdentities pulumi.MapInput `pulumi:"userAssignedIdentities"`
}

func (CacheIdentityArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CacheIdentity)(nil)).Elem()
}

func (i CacheIdentityArgs) ToCacheIdentityOutput() CacheIdentityOutput {
	return i.ToCacheIdentityOutputWithContext(context.Background())
}

func (i CacheIdentityArgs) ToCacheIdentityOutputWithContext(ctx context.Context) CacheIdentityOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CacheIdentityOutput)
}

func (i CacheIdentityArgs) ToCacheIdentityPtrOutput() CacheIdentityPtrOutput {
	return i.ToCacheIdentityPtrOutputWithContext(context.Background())
}

func (i CacheIdentityArgs) ToCacheIdentityPtrOutputWithContext(ctx context.Context) CacheIdentityPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CacheIdentityOutput).ToCacheIdentityPtrOutputWithContext(ctx)
}

// CacheIdentityPtrInput is an input type that accepts CacheIdentityArgs, CacheIdentityPtr and CacheIdentityPtrOutput values.
// You can construct a concrete instance of `CacheIdentityPtrInput` via:
//
//	        CacheIdentityArgs{...}
//
//	or:
//
//	        nil
type CacheIdentityPtrInput interface {
	pulumi.Input

	ToCacheIdentityPtrOutput() CacheIdentityPtrOutput
	ToCacheIdentityPtrOutputWithContext(context.Context) CacheIdentityPtrOutput
}

type cacheIdentityPtrType CacheIdentityArgs

func CacheIdentityPtr(v *CacheIdentityArgs) CacheIdentityPtrInput {
	return (*cacheIdentityPtrType)(v)
}

func (*cacheIdentityPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CacheIdentity)(nil)).Elem()
}

func (i *cacheIdentityPtrType) ToCacheIdentityPtrOutput() CacheIdentityPtrOutput {
	return i.ToCacheIdentityPtrOutputWithContext(context.Background())
}

func (i *cacheIdentityPtrType) ToCacheIdentityPtrOutputWithContext(ctx context.Context) CacheIdentityPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CacheIdentityPtrOutput)
}

// Cache identity properties.
type CacheIdentityOutput struct{ *pulumi.OutputState }

func (CacheIdentityOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CacheIdentity)(nil)).Elem()
}

func (o CacheIdentityOutput) ToCacheIdentityOutput() CacheIdentityOutput {
	return o
}

func (o CacheIdentityOutput) ToCacheIdentityOutputWithContext(ctx context.Context) CacheIdentityOutput {
	return o
}

func (o CacheIdentityOutput) ToCacheIdentityPtrOutput() CacheIdentityPtrOutput {
	return o.ToCacheIdentityPtrOutputWithContext(context.Background())
}

func (o CacheIdentityOutput) ToCacheIdentityPtrOutputWithContext(ctx context.Context) CacheIdentityPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v CacheIdentity) *CacheIdentity {
		return &v
	}).(CacheIdentityPtrOutput)
}

// The type of identity used for the cache
func (o CacheIdentityOutput) Type() CacheIdentityTypePtrOutput {
	return o.ApplyT(func(v CacheIdentity) *CacheIdentityType { return v.Type }).(CacheIdentityTypePtrOutput)
}

// A dictionary where each key is a user assigned identity resource ID, and each key's value is an empty dictionary.
func (o CacheIdentityOutput) UserAssignedIdentities() pulumi.MapOutput {
	return o.ApplyT(func(v CacheIdentity) map[string]interface{} { return v.UserAssignedIdentities }).(pulumi.MapOutput)
}

type CacheIdentityPtrOutput struct{ *pulumi.OutputState }

func (CacheIdentityPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CacheIdentity)(nil)).Elem()
}

func (o CacheIdentityPtrOutput) ToCacheIdentityPtrOutput() CacheIdentityPtrOutput {
	return o
}

func (o CacheIdentityPtrOutput) ToCacheIdentityPtrOutputWithContext(ctx context.Context) CacheIdentityPtrOutput {
	return o
}

func (o CacheIdentityPtrOutput) Elem() CacheIdentityOutput {
	return o.ApplyT(func(v *CacheIdentity) CacheIdentity {
		if v != nil {
			return *v
		}
		var ret CacheIdentity
		return ret
	}).(CacheIdentityOutput)
}

// The type of identity used for the cache
func (o CacheIdentityPtrOutput) Type() CacheIdentityTypePtrOutput {
	return o.ApplyT(func(v *CacheIdentity) *CacheIdentityType {
		if v == nil {
			return nil
		}
		return v.Type
	}).(CacheIdentityTypePtrOutput)
}

// A dictionary where each key is a user assigned identity resource ID, and each key's value is an empty dictionary.
func (o CacheIdentityPtrOutput) UserAssignedIdentities() pulumi.MapOutput {
	return o.ApplyT(func(v *CacheIdentity) map[string]interface{} {
		if v == nil {
			return nil
		}
		return v.UserAssignedIdentities
	}).(pulumi.MapOutput)
}

// Cache identity properties.
type CacheIdentityResponse struct {
	// The principal ID for the system-assigned identity of the cache.
	PrincipalId string `pulumi:"principalId"`
	// The tenant ID associated with the cache.
	TenantId string `pulumi:"tenantId"`
	// The type of identity used for the cache
	Type *string `pulumi:"type"`
	// A dictionary where each key is a user assigned identity resource ID, and each key's value is an empty dictionary.
	UserAssignedIdentities map[string]CacheIdentityResponseUserAssignedIdentities `pulumi:"userAssignedIdentities"`
}

// Cache identity properties.
type CacheIdentityResponseOutput struct{ *pulumi.OutputState }

func (CacheIdentityResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CacheIdentityResponse)(nil)).Elem()
}

func (o CacheIdentityResponseOutput) ToCacheIdentityResponseOutput() CacheIdentityResponseOutput {
	return o
}

func (o CacheIdentityResponseOutput) ToCacheIdentityResponseOutputWithContext(ctx context.Context) CacheIdentityResponseOutput {
	return o
}

// The principal ID for the system-assigned identity of the cache.
func (o CacheIdentityResponseOutput) PrincipalId() pulumi.StringOutput {
	return o.ApplyT(func(v CacheIdentityResponse) string { return v.PrincipalId }).(pulumi.StringOutput)
}

// The tenant ID associated with the cache.
func (o CacheIdentityResponseOutput) TenantId() pulumi.StringOutput {
	return o.ApplyT(func(v CacheIdentityResponse) string { return v.TenantId }).(pulumi.StringOutput)
}

// The type of identity used for the cache
func (o CacheIdentityResponseOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CacheIdentityResponse) *string { return v.Type }).(pulumi.StringPtrOutput)
}

// A dictionary where each key is a user assigned identity resource ID, and each key's value is an empty dictionary.
func (o CacheIdentityResponseOutput) UserAssignedIdentities() CacheIdentityResponseUserAssignedIdentitiesMapOutput {
	return o.ApplyT(func(v CacheIdentityResponse) map[string]CacheIdentityResponseUserAssignedIdentities {
		return v.UserAssignedIdentities
	}).(CacheIdentityResponseUserAssignedIdentitiesMapOutput)
}

type CacheIdentityResponsePtrOutput struct{ *pulumi.OutputState }

func (CacheIdentityResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CacheIdentityResponse)(nil)).Elem()
}

func (o CacheIdentityResponsePtrOutput) ToCacheIdentityResponsePtrOutput() CacheIdentityResponsePtrOutput {
	return o
}

func (o CacheIdentityResponsePtrOutput) ToCacheIdentityResponsePtrOutputWithContext(ctx context.Context) CacheIdentityResponsePtrOutput {
	return o
}

func (o CacheIdentityResponsePtrOutput) Elem() CacheIdentityResponseOutput {
	return o.ApplyT(func(v *CacheIdentityResponse) CacheIdentityResponse {
		if v != nil {
			return *v
		}
		var ret CacheIdentityResponse
		return ret
	}).(CacheIdentityResponseOutput)
}

// The principal ID for the system-assigned identity of the cache.
func (o CacheIdentityResponsePtrOutput) PrincipalId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CacheIdentityResponse) *string {
		if v == nil {
			return nil
		}
		return &v.PrincipalId
	}).(pulumi.StringPtrOutput)
}

// The tenant ID associated with the cache.
func (o CacheIdentityResponsePtrOutput) TenantId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CacheIdentityResponse) *string {
		if v == nil {
			return nil
		}
		return &v.TenantId
	}).(pulumi.StringPtrOutput)
}

// The type of identity used for the cache
func (o CacheIdentityResponsePtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CacheIdentityResponse) *string {
		if v == nil {
			return nil
		}
		return v.Type
	}).(pulumi.StringPtrOutput)
}

// A dictionary where each key is a user assigned identity resource ID, and each key's value is an empty dictionary.
func (o CacheIdentityResponsePtrOutput) UserAssignedIdentities() CacheIdentityResponseUserAssignedIdentitiesMapOutput {
	return o.ApplyT(func(v *CacheIdentityResponse) map[string]CacheIdentityResponseUserAssignedIdentities {
		if v == nil {
			return nil
		}
		return v.UserAssignedIdentities
	}).(CacheIdentityResponseUserAssignedIdentitiesMapOutput)
}

type CacheIdentityResponseUserAssignedIdentities struct {
	// The client ID of the user-assigned identity.
	ClientId string `pulumi:"clientId"`
	// The principal ID of the user-assigned identity.
	PrincipalId string `pulumi:"principalId"`
}

type CacheIdentityResponseUserAssignedIdentitiesOutput struct{ *pulumi.OutputState }

func (CacheIdentityResponseUserAssignedIdentitiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CacheIdentityResponseUserAssignedIdentities)(nil)).Elem()
}

func (o CacheIdentityResponseUserAssignedIdentitiesOutput) ToCacheIdentityResponseUserAssignedIdentitiesOutput() CacheIdentityResponseUserAssignedIdentitiesOutput {
	return o
}

func (o CacheIdentityResponseUserAssignedIdentitiesOutput) ToCacheIdentityResponseUserAssignedIdentitiesOutputWithContext(ctx context.Context) CacheIdentityResponseUserAssignedIdentitiesOutput {
	return o
}

// The client ID of the user-assigned identity.
func (o CacheIdentityResponseUserAssignedIdentitiesOutput) ClientId() pulumi.StringOutput {
	return o.ApplyT(func(v CacheIdentityResponseUserAssignedIdentities) string { return v.ClientId }).(pulumi.StringOutput)
}

// The principal ID of the user-assigned identity.
func (o CacheIdentityResponseUserAssignedIdentitiesOutput) PrincipalId() pulumi.StringOutput {
	return o.ApplyT(func(v CacheIdentityResponseUserAssignedIdentities) string { return v.PrincipalId }).(pulumi.StringOutput)
}

type CacheIdentityResponseUserAssignedIdentitiesMapOutput struct{ *pulumi.OutputState }

func (CacheIdentityResponseUserAssignedIdentitiesMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]CacheIdentityResponseUserAssignedIdentities)(nil)).Elem()
}

func (o CacheIdentityResponseUserAssignedIdentitiesMapOutput) ToCacheIdentityResponseUserAssignedIdentitiesMapOutput() CacheIdentityResponseUserAssignedIdentitiesMapOutput {
	return o
}

func (o CacheIdentityResponseUserAssignedIdentitiesMapOutput) ToCacheIdentityResponseUserAssignedIdentitiesMapOutputWithContext(ctx context.Context) CacheIdentityResponseUserAssignedIdentitiesMapOutput {
	return o
}

func (o CacheIdentityResponseUserAssignedIdentitiesMapOutput) MapIndex(k pulumi.StringInput) CacheIdentityResponseUserAssignedIdentitiesOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) CacheIdentityResponseUserAssignedIdentities {
		return vs[0].(map[string]CacheIdentityResponseUserAssignedIdentities)[vs[1].(string)]
	}).(CacheIdentityResponseUserAssignedIdentitiesOutput)
}

// Cache network settings.
type CacheNetworkSettings struct {
	// DNS search domain
	DnsSearchDomain *string `pulumi:"dnsSearchDomain"`
	// DNS servers for the cache to use.  It will be set from the network configuration if no value is provided.
	DnsServers []string `pulumi:"dnsServers"`
	// The IPv4 maximum transmission unit configured for the subnet.
	Mtu *int `pulumi:"mtu"`
	// NTP server IP Address or FQDN for the cache to use. The default is time.windows.com.
	NtpServer *string `pulumi:"ntpServer"`
}

// Defaults sets the appropriate defaults for CacheNetworkSettings
func (val *CacheNetworkSettings) Defaults() *CacheNetworkSettings {
	if val == nil {
		return nil
	}
	tmp := *val
	if isZero(tmp.Mtu) {
		mtu_ := 1500
		tmp.Mtu = &mtu_
	}
	if isZero(tmp.NtpServer) {
		ntpServer_ := "time.windows.com"
		tmp.NtpServer = &ntpServer_
	}
	return &tmp
}

// CacheNetworkSettingsInput is an input type that accepts CacheNetworkSettingsArgs and CacheNetworkSettingsOutput values.
// You can construct a concrete instance of `CacheNetworkSettingsInput` via:
//
//	CacheNetworkSettingsArgs{...}
type CacheNetworkSettingsInput interface {
	pulumi.Input

	ToCacheNetworkSettingsOutput() CacheNetworkSettingsOutput
	ToCacheNetworkSettingsOutputWithContext(context.Context) CacheNetworkSettingsOutput
}

// Cache network settings.
type CacheNetworkSettingsArgs struct {
	// DNS search domain
	DnsSearchDomain pulumi.StringPtrInput `pulumi:"dnsSearchDomain"`
	// DNS servers for the cache to use.  It will be set from the network configuration if no value is provided.
	DnsServers pulumi.StringArrayInput `pulumi:"dnsServers"`
	// The IPv4 maximum transmission unit configured for the subnet.
	Mtu pulumi.IntPtrInput `pulumi:"mtu"`
	// NTP server IP Address or FQDN for the cache to use. The default is time.windows.com.
	NtpServer pulumi.StringPtrInput `pulumi:"ntpServer"`
}

// Defaults sets the appropriate defaults for CacheNetworkSettingsArgs
func (val *CacheNetworkSettingsArgs) Defaults() *CacheNetworkSettingsArgs {
	if val == nil {
		return nil
	}
	tmp := *val
	if isZero(tmp.Mtu) {
		tmp.Mtu = pulumi.IntPtr(1500)
	}
	if isZero(tmp.NtpServer) {
		tmp.NtpServer = pulumi.StringPtr("time.windows.com")
	}
	return &tmp
}
func (CacheNetworkSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CacheNetworkSettings)(nil)).Elem()
}

func (i CacheNetworkSettingsArgs) ToCacheNetworkSettingsOutput() CacheNetworkSettingsOutput {
	return i.ToCacheNetworkSettingsOutputWithContext(context.Background())
}

func (i CacheNetworkSettingsArgs) ToCacheNetworkSettingsOutputWithContext(ctx context.Context) CacheNetworkSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CacheNetworkSettingsOutput)
}

func (i CacheNetworkSettingsArgs) ToCacheNetworkSettingsPtrOutput() CacheNetworkSettingsPtrOutput {
	return i.ToCacheNetworkSettingsPtrOutputWithContext(context.Background())
}

func (i CacheNetworkSettingsArgs) ToCacheNetworkSettingsPtrOutputWithContext(ctx context.Context) CacheNetworkSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CacheNetworkSettingsOutput).ToCacheNetworkSettingsPtrOutputWithContext(ctx)
}

// CacheNetworkSettingsPtrInput is an input type that accepts CacheNetworkSettingsArgs, CacheNetworkSettingsPtr and CacheNetworkSettingsPtrOutput values.
// You can construct a concrete instance of `CacheNetworkSettingsPtrInput` via:
//
//	        CacheNetworkSettingsArgs{...}
//
//	or:
//
//	        nil
type CacheNetworkSettingsPtrInput interface {
	pulumi.Input

	ToCacheNetworkSettingsPtrOutput() CacheNetworkSettingsPtrOutput
	ToCacheNetworkSettingsPtrOutputWithContext(context.Context) CacheNetworkSettingsPtrOutput
}

type cacheNetworkSettingsPtrType CacheNetworkSettingsArgs

func CacheNetworkSettingsPtr(v *CacheNetworkSettingsArgs) CacheNetworkSettingsPtrInput {
	return (*cacheNetworkSettingsPtrType)(v)
}

func (*cacheNetworkSettingsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CacheNetworkSettings)(nil)).Elem()
}

func (i *cacheNetworkSettingsPtrType) ToCacheNetworkSettingsPtrOutput() CacheNetworkSettingsPtrOutput {
	return i.ToCacheNetworkSettingsPtrOutputWithContext(context.Background())
}

func (i *cacheNetworkSettingsPtrType) ToCacheNetworkSettingsPtrOutputWithContext(ctx context.Context) CacheNetworkSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CacheNetworkSettingsPtrOutput)
}

// Cache network settings.
type CacheNetworkSettingsOutput struct{ *pulumi.OutputState }

func (CacheNetworkSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CacheNetworkSettings)(nil)).Elem()
}

func (o CacheNetworkSettingsOutput) ToCacheNetworkSettingsOutput() CacheNetworkSettingsOutput {
	return o
}

func (o CacheNetworkSettingsOutput) ToCacheNetworkSettingsOutputWithContext(ctx context.Context) CacheNetworkSettingsOutput {
	return o
}

func (o CacheNetworkSettingsOutput) ToCacheNetworkSettingsPtrOutput() CacheNetworkSettingsPtrOutput {
	return o.ToCacheNetworkSettingsPtrOutputWithContext(context.Background())
}

func (o CacheNetworkSettingsOutput) ToCacheNetworkSettingsPtrOutputWithContext(ctx context.Context) CacheNetworkSettingsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v CacheNetworkSettings) *CacheNetworkSettings {
		return &v
	}).(CacheNetworkSettingsPtrOutput)
}

// DNS search domain
func (o CacheNetworkSettingsOutput) DnsSearchDomain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CacheNetworkSettings) *string { return v.DnsSearchDomain }).(pulumi.StringPtrOutput)
}

// DNS servers for the cache to use.  It will be set from the network configuration if no value is provided.
func (o CacheNetworkSettingsOutput) DnsServers() pulumi.StringArrayOutput {
	return o.ApplyT(func(v CacheNetworkSettings) []string { return v.DnsServers }).(pulumi.StringArrayOutput)
}

// The IPv4 maximum transmission unit configured for the subnet.
func (o CacheNetworkSettingsOutput) Mtu() pulumi.IntPtrOutput {
	return o.ApplyT(func(v CacheNetworkSettings) *int { return v.Mtu }).(pulumi.IntPtrOutput)
}

// NTP server IP Address or FQDN for the cache to use. The default is time.windows.com.
func (o CacheNetworkSettingsOutput) NtpServer() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CacheNetworkSettings) *string { return v.NtpServer }).(pulumi.StringPtrOutput)
}

type CacheNetworkSettingsPtrOutput struct{ *pulumi.OutputState }

func (CacheNetworkSettingsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CacheNetworkSettings)(nil)).Elem()
}

func (o CacheNetworkSettingsPtrOutput) ToCacheNetworkSettingsPtrOutput() CacheNetworkSettingsPtrOutput {
	return o
}

func (o CacheNetworkSettingsPtrOutput) ToCacheNetworkSettingsPtrOutputWithContext(ctx context.Context) CacheNetworkSettingsPtrOutput {
	return o
}

func (o CacheNetworkSettingsPtrOutput) Elem() CacheNetworkSettingsOutput {
	return o.ApplyT(func(v *CacheNetworkSettings) CacheNetworkSettings {
		if v != nil {
			return *v
		}
		var ret CacheNetworkSettings
		return ret
	}).(CacheNetworkSettingsOutput)
}

// DNS search domain
func (o CacheNetworkSettingsPtrOutput) DnsSearchDomain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CacheNetworkSettings) *string {
		if v == nil {
			return nil
		}
		return v.DnsSearchDomain
	}).(pulumi.StringPtrOutput)
}

// DNS servers for the cache to use.  It will be set from the network configuration if no value is provided.
func (o CacheNetworkSettingsPtrOutput) DnsServers() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *CacheNetworkSettings) []string {
		if v == nil {
			return nil
		}
		return v.DnsServers
	}).(pulumi.StringArrayOutput)
}

// The IPv4 maximum transmission unit configured for the subnet.
func (o CacheNetworkSettingsPtrOutput) Mtu() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *CacheNetworkSettings) *int {
		if v == nil {
			return nil
		}
		return v.Mtu
	}).(pulumi.IntPtrOutput)
}

// NTP server IP Address or FQDN for the cache to use. The default is time.windows.com.
func (o CacheNetworkSettingsPtrOutput) NtpServer() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CacheNetworkSettings) *string {
		if v == nil {
			return nil
		}
		return v.NtpServer
	}).(pulumi.StringPtrOutput)
}

// Cache network settings.
type CacheNetworkSettingsResponse struct {
	// DNS search domain
	DnsSearchDomain *string `pulumi:"dnsSearchDomain"`
	// DNS servers for the cache to use.  It will be set from the network configuration if no value is provided.
	DnsServers []string `pulumi:"dnsServers"`
	// The IPv4 maximum transmission unit configured for the subnet.
	Mtu *int `pulumi:"mtu"`
	// NTP server IP Address or FQDN for the cache to use. The default is time.windows.com.
	NtpServer *string `pulumi:"ntpServer"`
	// Array of additional IP addresses used by this Cache.
	UtilityAddresses []string `pulumi:"utilityAddresses"`
}

// Defaults sets the appropriate defaults for CacheNetworkSettingsResponse
func (val *CacheNetworkSettingsResponse) Defaults() *CacheNetworkSettingsResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if isZero(tmp.Mtu) {
		mtu_ := 1500
		tmp.Mtu = &mtu_
	}
	if isZero(tmp.NtpServer) {
		ntpServer_ := "time.windows.com"
		tmp.NtpServer = &ntpServer_
	}
	return &tmp
}

// Cache network settings.
type CacheNetworkSettingsResponseOutput struct{ *pulumi.OutputState }

func (CacheNetworkSettingsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CacheNetworkSettingsResponse)(nil)).Elem()
}

func (o CacheNetworkSettingsResponseOutput) ToCacheNetworkSettingsResponseOutput() CacheNetworkSettingsResponseOutput {
	return o
}

func (o CacheNetworkSettingsResponseOutput) ToCacheNetworkSettingsResponseOutputWithContext(ctx context.Context) CacheNetworkSettingsResponseOutput {
	return o
}

// DNS search domain
func (o CacheNetworkSettingsResponseOutput) DnsSearchDomain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CacheNetworkSettingsResponse) *string { return v.DnsSearchDomain }).(pulumi.StringPtrOutput)
}

// DNS servers for the cache to use.  It will be set from the network configuration if no value is provided.
func (o CacheNetworkSettingsResponseOutput) DnsServers() pulumi.StringArrayOutput {
	return o.ApplyT(func(v CacheNetworkSettingsResponse) []string { return v.DnsServers }).(pulumi.StringArrayOutput)
}

// The IPv4 maximum transmission unit configured for the subnet.
func (o CacheNetworkSettingsResponseOutput) Mtu() pulumi.IntPtrOutput {
	return o.ApplyT(func(v CacheNetworkSettingsResponse) *int { return v.Mtu }).(pulumi.IntPtrOutput)
}

// NTP server IP Address or FQDN for the cache to use. The default is time.windows.com.
func (o CacheNetworkSettingsResponseOutput) NtpServer() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CacheNetworkSettingsResponse) *string { return v.NtpServer }).(pulumi.StringPtrOutput)
}

// Array of additional IP addresses used by this Cache.
func (o CacheNetworkSettingsResponseOutput) UtilityAddresses() pulumi.StringArrayOutput {
	return o.ApplyT(func(v CacheNetworkSettingsResponse) []string { return v.UtilityAddresses }).(pulumi.StringArrayOutput)
}

type CacheNetworkSettingsResponsePtrOutput struct{ *pulumi.OutputState }

func (CacheNetworkSettingsResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CacheNetworkSettingsResponse)(nil)).Elem()
}

func (o CacheNetworkSettingsResponsePtrOutput) ToCacheNetworkSettingsResponsePtrOutput() CacheNetworkSettingsResponsePtrOutput {
	return o
}

func (o CacheNetworkSettingsResponsePtrOutput) ToCacheNetworkSettingsResponsePtrOutputWithContext(ctx context.Context) CacheNetworkSettingsResponsePtrOutput {
	return o
}

func (o CacheNetworkSettingsResponsePtrOutput) Elem() CacheNetworkSettingsResponseOutput {
	return o.ApplyT(func(v *CacheNetworkSettingsResponse) CacheNetworkSettingsResponse {
		if v != nil {
			return *v
		}
		var ret CacheNetworkSettingsResponse
		return ret
	}).(CacheNetworkSettingsResponseOutput)
}

// DNS search domain
func (o CacheNetworkSettingsResponsePtrOutput) DnsSearchDomain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CacheNetworkSettingsResponse) *string {
		if v == nil {
			return nil
		}
		return v.DnsSearchDomain
	}).(pulumi.StringPtrOutput)
}

// DNS servers for the cache to use.  It will be set from the network configuration if no value is provided.
func (o CacheNetworkSettingsResponsePtrOutput) DnsServers() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *CacheNetworkSettingsResponse) []string {
		if v == nil {
			return nil
		}
		return v.DnsServers
	}).(pulumi.StringArrayOutput)
}

// The IPv4 maximum transmission unit configured for the subnet.
func (o CacheNetworkSettingsResponsePtrOutput) Mtu() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *CacheNetworkSettingsResponse) *int {
		if v == nil {
			return nil
		}
		return v.Mtu
	}).(pulumi.IntPtrOutput)
}

// NTP server IP Address or FQDN for the cache to use. The default is time.windows.com.
func (o CacheNetworkSettingsResponsePtrOutput) NtpServer() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CacheNetworkSettingsResponse) *string {
		if v == nil {
			return nil
		}
		return v.NtpServer
	}).(pulumi.StringPtrOutput)
}

// Array of additional IP addresses used by this Cache.
func (o CacheNetworkSettingsResponsePtrOutput) UtilityAddresses() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *CacheNetworkSettingsResponse) []string {
		if v == nil {
			return nil
		}
		return v.UtilityAddresses
	}).(pulumi.StringArrayOutput)
}

// SKU for the Cache.
type CacheResponseSku struct {
	// SKU name for this Cache.
	Name *string `pulumi:"name"`
}

// SKU for the Cache.
type CacheResponseSkuOutput struct{ *pulumi.OutputState }

func (CacheResponseSkuOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CacheResponseSku)(nil)).Elem()
}

func (o CacheResponseSkuOutput) ToCacheResponseSkuOutput() CacheResponseSkuOutput {
	return o
}

func (o CacheResponseSkuOutput) ToCacheResponseSkuOutputWithContext(ctx context.Context) CacheResponseSkuOutput {
	return o
}

// SKU name for this Cache.
func (o CacheResponseSkuOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CacheResponseSku) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type CacheResponseSkuPtrOutput struct{ *pulumi.OutputState }

func (CacheResponseSkuPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CacheResponseSku)(nil)).Elem()
}

func (o CacheResponseSkuPtrOutput) ToCacheResponseSkuPtrOutput() CacheResponseSkuPtrOutput {
	return o
}

func (o CacheResponseSkuPtrOutput) ToCacheResponseSkuPtrOutputWithContext(ctx context.Context) CacheResponseSkuPtrOutput {
	return o
}

func (o CacheResponseSkuPtrOutput) Elem() CacheResponseSkuOutput {
	return o.ApplyT(func(v *CacheResponseSku) CacheResponseSku {
		if v != nil {
			return *v
		}
		var ret CacheResponseSku
		return ret
	}).(CacheResponseSkuOutput)
}

// SKU name for this Cache.
func (o CacheResponseSkuPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CacheResponseSku) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// Cache security settings.
type CacheSecuritySettings struct {
	// NFS access policies defined for this cache.
	AccessPolicies []NfsAccessPolicy `pulumi:"accessPolicies"`
}

// CacheSecuritySettingsInput is an input type that accepts CacheSecuritySettingsArgs and CacheSecuritySettingsOutput values.
// You can construct a concrete instance of `CacheSecuritySettingsInput` via:
//
//	CacheSecuritySettingsArgs{...}
type CacheSecuritySettingsInput interface {
	pulumi.Input

	ToCacheSecuritySettingsOutput() CacheSecuritySettingsOutput
	ToCacheSecuritySettingsOutputWithContext(context.Context) CacheSecuritySettingsOutput
}

// Cache security settings.
type CacheSecuritySettingsArgs struct {
	// NFS access policies defined for this cache.
	AccessPolicies NfsAccessPolicyArrayInput `pulumi:"accessPolicies"`
}

func (CacheSecuritySettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CacheSecuritySettings)(nil)).Elem()
}

func (i CacheSecuritySettingsArgs) ToCacheSecuritySettingsOutput() CacheSecuritySettingsOutput {
	return i.ToCacheSecuritySettingsOutputWithContext(context.Background())
}

func (i CacheSecuritySettingsArgs) ToCacheSecuritySettingsOutputWithContext(ctx context.Context) CacheSecuritySettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CacheSecuritySettingsOutput)
}

func (i CacheSecuritySettingsArgs) ToCacheSecuritySettingsPtrOutput() CacheSecuritySettingsPtrOutput {
	return i.ToCacheSecuritySettingsPtrOutputWithContext(context.Background())
}

func (i CacheSecuritySettingsArgs) ToCacheSecuritySettingsPtrOutputWithContext(ctx context.Context) CacheSecuritySettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CacheSecuritySettingsOutput).ToCacheSecuritySettingsPtrOutputWithContext(ctx)
}

// CacheSecuritySettingsPtrInput is an input type that accepts CacheSecuritySettingsArgs, CacheSecuritySettingsPtr and CacheSecuritySettingsPtrOutput values.
// You can construct a concrete instance of `CacheSecuritySettingsPtrInput` via:
//
//	        CacheSecuritySettingsArgs{...}
//
//	or:
//
//	        nil
type CacheSecuritySettingsPtrInput interface {
	pulumi.Input

	ToCacheSecuritySettingsPtrOutput() CacheSecuritySettingsPtrOutput
	ToCacheSecuritySettingsPtrOutputWithContext(context.Context) CacheSecuritySettingsPtrOutput
}

type cacheSecuritySettingsPtrType CacheSecuritySettingsArgs

func CacheSecuritySettingsPtr(v *CacheSecuritySettingsArgs) CacheSecuritySettingsPtrInput {
	return (*cacheSecuritySettingsPtrType)(v)
}

func (*cacheSecuritySettingsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CacheSecuritySettings)(nil)).Elem()
}

func (i *cacheSecuritySettingsPtrType) ToCacheSecuritySettingsPtrOutput() CacheSecuritySettingsPtrOutput {
	return i.ToCacheSecuritySettingsPtrOutputWithContext(context.Background())
}

func (i *cacheSecuritySettingsPtrType) ToCacheSecuritySettingsPtrOutputWithContext(ctx context.Context) CacheSecuritySettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CacheSecuritySettingsPtrOutput)
}

// Cache security settings.
type CacheSecuritySettingsOutput struct{ *pulumi.OutputState }

func (CacheSecuritySettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CacheSecuritySettings)(nil)).Elem()
}

func (o CacheSecuritySettingsOutput) ToCacheSecuritySettingsOutput() CacheSecuritySettingsOutput {
	return o
}

func (o CacheSecuritySettingsOutput) ToCacheSecuritySettingsOutputWithContext(ctx context.Context) CacheSecuritySettingsOutput {
	return o
}

func (o CacheSecuritySettingsOutput) ToCacheSecuritySettingsPtrOutput() CacheSecuritySettingsPtrOutput {
	return o.ToCacheSecuritySettingsPtrOutputWithContext(context.Background())
}

func (o CacheSecuritySettingsOutput) ToCacheSecuritySettingsPtrOutputWithContext(ctx context.Context) CacheSecuritySettingsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v CacheSecuritySettings) *CacheSecuritySettings {
		return &v
	}).(CacheSecuritySettingsPtrOutput)
}

// NFS access policies defined for this cache.
func (o CacheSecuritySettingsOutput) AccessPolicies() NfsAccessPolicyArrayOutput {
	return o.ApplyT(func(v CacheSecuritySettings) []NfsAccessPolicy { return v.AccessPolicies }).(NfsAccessPolicyArrayOutput)
}

type CacheSecuritySettingsPtrOutput struct{ *pulumi.OutputState }

func (CacheSecuritySettingsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CacheSecuritySettings)(nil)).Elem()
}

func (o CacheSecuritySettingsPtrOutput) ToCacheSecuritySettingsPtrOutput() CacheSecuritySettingsPtrOutput {
	return o
}

func (o CacheSecuritySettingsPtrOutput) ToCacheSecuritySettingsPtrOutputWithContext(ctx context.Context) CacheSecuritySettingsPtrOutput {
	return o
}

func (o CacheSecuritySettingsPtrOutput) Elem() CacheSecuritySettingsOutput {
	return o.ApplyT(func(v *CacheSecuritySettings) CacheSecuritySettings {
		if v != nil {
			return *v
		}
		var ret CacheSecuritySettings
		return ret
	}).(CacheSecuritySettingsOutput)
}

// NFS access policies defined for this cache.
func (o CacheSecuritySettingsPtrOutput) AccessPolicies() NfsAccessPolicyArrayOutput {
	return o.ApplyT(func(v *CacheSecuritySettings) []NfsAccessPolicy {
		if v == nil {
			return nil
		}
		return v.AccessPolicies
	}).(NfsAccessPolicyArrayOutput)
}

// Cache security settings.
type CacheSecuritySettingsResponse struct {
	// NFS access policies defined for this cache.
	AccessPolicies []NfsAccessPolicyResponse `pulumi:"accessPolicies"`
}

// Cache security settings.
type CacheSecuritySettingsResponseOutput struct{ *pulumi.OutputState }

func (CacheSecuritySettingsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CacheSecuritySettingsResponse)(nil)).Elem()
}

func (o CacheSecuritySettingsResponseOutput) ToCacheSecuritySettingsResponseOutput() CacheSecuritySettingsResponseOutput {
	return o
}

func (o CacheSecuritySettingsResponseOutput) ToCacheSecuritySettingsResponseOutputWithContext(ctx context.Context) CacheSecuritySettingsResponseOutput {
	return o
}

// NFS access policies defined for this cache.
func (o CacheSecuritySettingsResponseOutput) AccessPolicies() NfsAccessPolicyResponseArrayOutput {
	return o.ApplyT(func(v CacheSecuritySettingsResponse) []NfsAccessPolicyResponse { return v.AccessPolicies }).(NfsAccessPolicyResponseArrayOutput)
}

type CacheSecuritySettingsResponsePtrOutput struct{ *pulumi.OutputState }

func (CacheSecuritySettingsResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CacheSecuritySettingsResponse)(nil)).Elem()
}

func (o CacheSecuritySettingsResponsePtrOutput) ToCacheSecuritySettingsResponsePtrOutput() CacheSecuritySettingsResponsePtrOutput {
	return o
}

func (o CacheSecuritySettingsResponsePtrOutput) ToCacheSecuritySettingsResponsePtrOutputWithContext(ctx context.Context) CacheSecuritySettingsResponsePtrOutput {
	return o
}

func (o CacheSecuritySettingsResponsePtrOutput) Elem() CacheSecuritySettingsResponseOutput {
	return o.ApplyT(func(v *CacheSecuritySettingsResponse) CacheSecuritySettingsResponse {
		if v != nil {
			return *v
		}
		var ret CacheSecuritySettingsResponse
		return ret
	}).(CacheSecuritySettingsResponseOutput)
}

// NFS access policies defined for this cache.
func (o CacheSecuritySettingsResponsePtrOutput) AccessPolicies() NfsAccessPolicyResponseArrayOutput {
	return o.ApplyT(func(v *CacheSecuritySettingsResponse) []NfsAccessPolicyResponse {
		if v == nil {
			return nil
		}
		return v.AccessPolicies
	}).(NfsAccessPolicyResponseArrayOutput)
}

// SKU for the Cache.
type CacheSku struct {
	// SKU name for this Cache.
	Name *string `pulumi:"name"`
}

// CacheSkuInput is an input type that accepts CacheSkuArgs and CacheSkuOutput values.
// You can construct a concrete instance of `CacheSkuInput` via:
//
//	CacheSkuArgs{...}
type CacheSkuInput interface {
	pulumi.Input

	ToCacheSkuOutput() CacheSkuOutput
	ToCacheSkuOutputWithContext(context.Context) CacheSkuOutput
}

// SKU for the Cache.
type CacheSkuArgs struct {
	// SKU name for this Cache.
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (CacheSkuArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CacheSku)(nil)).Elem()
}

func (i CacheSkuArgs) ToCacheSkuOutput() CacheSkuOutput {
	return i.ToCacheSkuOutputWithContext(context.Background())
}

func (i CacheSkuArgs) ToCacheSkuOutputWithContext(ctx context.Context) CacheSkuOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CacheSkuOutput)
}

func (i CacheSkuArgs) ToCacheSkuPtrOutput() CacheSkuPtrOutput {
	return i.ToCacheSkuPtrOutputWithContext(context.Background())
}

func (i CacheSkuArgs) ToCacheSkuPtrOutputWithContext(ctx context.Context) CacheSkuPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CacheSkuOutput).ToCacheSkuPtrOutputWithContext(ctx)
}

// CacheSkuPtrInput is an input type that accepts CacheSkuArgs, CacheSkuPtr and CacheSkuPtrOutput values.
// You can construct a concrete instance of `CacheSkuPtrInput` via:
//
//	        CacheSkuArgs{...}
//
//	or:
//
//	        nil
type CacheSkuPtrInput interface {
	pulumi.Input

	ToCacheSkuPtrOutput() CacheSkuPtrOutput
	ToCacheSkuPtrOutputWithContext(context.Context) CacheSkuPtrOutput
}

type cacheSkuPtrType CacheSkuArgs

func CacheSkuPtr(v *CacheSkuArgs) CacheSkuPtrInput {
	return (*cacheSkuPtrType)(v)
}

func (*cacheSkuPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CacheSku)(nil)).Elem()
}

func (i *cacheSkuPtrType) ToCacheSkuPtrOutput() CacheSkuPtrOutput {
	return i.ToCacheSkuPtrOutputWithContext(context.Background())
}

func (i *cacheSkuPtrType) ToCacheSkuPtrOutputWithContext(ctx context.Context) CacheSkuPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CacheSkuPtrOutput)
}

// SKU for the Cache.
type CacheSkuOutput struct{ *pulumi.OutputState }

func (CacheSkuOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CacheSku)(nil)).Elem()
}

func (o CacheSkuOutput) ToCacheSkuOutput() CacheSkuOutput {
	return o
}

func (o CacheSkuOutput) ToCacheSkuOutputWithContext(ctx context.Context) CacheSkuOutput {
	return o
}

func (o CacheSkuOutput) ToCacheSkuPtrOutput() CacheSkuPtrOutput {
	return o.ToCacheSkuPtrOutputWithContext(context.Background())
}

func (o CacheSkuOutput) ToCacheSkuPtrOutputWithContext(ctx context.Context) CacheSkuPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v CacheSku) *CacheSku {
		return &v
	}).(CacheSkuPtrOutput)
}

// SKU name for this Cache.
func (o CacheSkuOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CacheSku) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type CacheSkuPtrOutput struct{ *pulumi.OutputState }

func (CacheSkuPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CacheSku)(nil)).Elem()
}

func (o CacheSkuPtrOutput) ToCacheSkuPtrOutput() CacheSkuPtrOutput {
	return o
}

func (o CacheSkuPtrOutput) ToCacheSkuPtrOutputWithContext(ctx context.Context) CacheSkuPtrOutput {
	return o
}

func (o CacheSkuPtrOutput) Elem() CacheSkuOutput {
	return o.ApplyT(func(v *CacheSku) CacheSku {
		if v != nil {
			return *v
		}
		var ret CacheSku
		return ret
	}).(CacheSkuOutput)
}

// SKU name for this Cache.
func (o CacheSkuPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CacheSku) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// Properties describing the software upgrade state of the Cache.
type CacheUpgradeStatusResponse struct {
	// Version string of the firmware currently installed on this Cache.
	CurrentFirmwareVersion string `pulumi:"currentFirmwareVersion"`
	// Time at which the pending firmware update will automatically be installed on the Cache.
	FirmwareUpdateDeadline string `pulumi:"firmwareUpdateDeadline"`
	// True if there is a firmware update ready to install on this Cache. The firmware will automatically be installed after firmwareUpdateDeadline if not triggered earlier via the upgrade operation.
	FirmwareUpdateStatus string `pulumi:"firmwareUpdateStatus"`
	// Time of the last successful firmware update.
	LastFirmwareUpdate string `pulumi:"lastFirmwareUpdate"`
	// When firmwareUpdateAvailable is true, this field holds the version string for the update.
	PendingFirmwareVersion string `pulumi:"pendingFirmwareVersion"`
}

// Properties describing the software upgrade state of the Cache.
type CacheUpgradeStatusResponseOutput struct{ *pulumi.OutputState }

func (CacheUpgradeStatusResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CacheUpgradeStatusResponse)(nil)).Elem()
}

func (o CacheUpgradeStatusResponseOutput) ToCacheUpgradeStatusResponseOutput() CacheUpgradeStatusResponseOutput {
	return o
}

func (o CacheUpgradeStatusResponseOutput) ToCacheUpgradeStatusResponseOutputWithContext(ctx context.Context) CacheUpgradeStatusResponseOutput {
	return o
}

// Version string of the firmware currently installed on this Cache.
func (o CacheUpgradeStatusResponseOutput) CurrentFirmwareVersion() pulumi.StringOutput {
	return o.ApplyT(func(v CacheUpgradeStatusResponse) string { return v.CurrentFirmwareVersion }).(pulumi.StringOutput)
}

// Time at which the pending firmware update will automatically be installed on the Cache.
func (o CacheUpgradeStatusResponseOutput) FirmwareUpdateDeadline() pulumi.StringOutput {
	return o.ApplyT(func(v CacheUpgradeStatusResponse) string { return v.FirmwareUpdateDeadline }).(pulumi.StringOutput)
}

// True if there is a firmware update ready to install on this Cache. The firmware will automatically be installed after firmwareUpdateDeadline if not triggered earlier via the upgrade operation.
func (o CacheUpgradeStatusResponseOutput) FirmwareUpdateStatus() pulumi.StringOutput {
	return o.ApplyT(func(v CacheUpgradeStatusResponse) string { return v.FirmwareUpdateStatus }).(pulumi.StringOutput)
}

// Time of the last successful firmware update.
func (o CacheUpgradeStatusResponseOutput) LastFirmwareUpdate() pulumi.StringOutput {
	return o.ApplyT(func(v CacheUpgradeStatusResponse) string { return v.LastFirmwareUpdate }).(pulumi.StringOutput)
}

// When firmwareUpdateAvailable is true, this field holds the version string for the update.
func (o CacheUpgradeStatusResponseOutput) PendingFirmwareVersion() pulumi.StringOutput {
	return o.ApplyT(func(v CacheUpgradeStatusResponse) string { return v.PendingFirmwareVersion }).(pulumi.StringOutput)
}

// Settings for Extended Groups username and group download.
type CacheUsernameDownloadSettings struct {
	// Determines if the certificate should be automatically downloaded. This applies to 'caCertificateURI' only if 'requireValidCertificate' is true.
	AutoDownloadCertificate *bool `pulumi:"autoDownloadCertificate"`
	// The URI of the CA certificate to validate the LDAP secure connection. This field must be populated when 'requireValidCertificate' is set to true.
	CaCertificateURI *string `pulumi:"caCertificateURI"`
	// When present, these are the credentials for the secure LDAP connection.
	Credentials *CacheUsernameDownloadSettingsCredentials `pulumi:"credentials"`
	// Whether or not the LDAP connection should be encrypted.
	EncryptLdapConnection *bool `pulumi:"encryptLdapConnection"`
	// Whether or not Extended Groups is enabled.
	ExtendedGroups *bool `pulumi:"extendedGroups"`
	// The URI of the file containing group information (in /etc/group file format). This field must be populated when 'usernameSource' is set to 'File'.
	GroupFileURI *string `pulumi:"groupFileURI"`
	// The base distinguished name for the LDAP domain.
	LdapBaseDN *string `pulumi:"ldapBaseDN"`
	// The fully qualified domain name or IP address of the LDAP server to use.
	LdapServer *string `pulumi:"ldapServer"`
	// Determines if the certificates must be validated by a certificate authority. When true, caCertificateURI must be provided.
	RequireValidCertificate *bool `pulumi:"requireValidCertificate"`
	// The URI of the file containing user information (in /etc/passwd file format). This field must be populated when 'usernameSource' is set to 'File'.
	UserFileURI *string `pulumi:"userFileURI"`
	// This setting determines how the cache gets username and group names for clients.
	UsernameSource *string `pulumi:"usernameSource"`
}

// Defaults sets the appropriate defaults for CacheUsernameDownloadSettings
func (val *CacheUsernameDownloadSettings) Defaults() *CacheUsernameDownloadSettings {
	if val == nil {
		return nil
	}
	tmp := *val
	if isZero(tmp.UsernameSource) {
		usernameSource_ := "None"
		tmp.UsernameSource = &usernameSource_
	}
	return &tmp
}

// CacheUsernameDownloadSettingsInput is an input type that accepts CacheUsernameDownloadSettingsArgs and CacheUsernameDownloadSettingsOutput values.
// You can construct a concrete instance of `CacheUsernameDownloadSettingsInput` via:
//
//	CacheUsernameDownloadSettingsArgs{...}
type CacheUsernameDownloadSettingsInput interface {
	pulumi.Input

	ToCacheUsernameDownloadSettingsOutput() CacheUsernameDownloadSettingsOutput
	ToCacheUsernameDownloadSettingsOutputWithContext(context.Context) CacheUsernameDownloadSettingsOutput
}

// Settings for Extended Groups username and group download.
type CacheUsernameDownloadSettingsArgs struct {
	// Determines if the certificate should be automatically downloaded. This applies to 'caCertificateURI' only if 'requireValidCertificate' is true.
	AutoDownloadCertificate pulumi.BoolPtrInput `pulumi:"autoDownloadCertificate"`
	// The URI of the CA certificate to validate the LDAP secure connection. This field must be populated when 'requireValidCertificate' is set to true.
	CaCertificateURI pulumi.StringPtrInput `pulumi:"caCertificateURI"`
	// When present, these are the credentials for the secure LDAP connection.
	Credentials CacheUsernameDownloadSettingsCredentialsPtrInput `pulumi:"credentials"`
	// Whether or not the LDAP connection should be encrypted.
	EncryptLdapConnection pulumi.BoolPtrInput `pulumi:"encryptLdapConnection"`
	// Whether or not Extended Groups is enabled.
	ExtendedGroups pulumi.BoolPtrInput `pulumi:"extendedGroups"`
	// The URI of the file containing group information (in /etc/group file format). This field must be populated when 'usernameSource' is set to 'File'.
	GroupFileURI pulumi.StringPtrInput `pulumi:"groupFileURI"`
	// The base distinguished name for the LDAP domain.
	LdapBaseDN pulumi.StringPtrInput `pulumi:"ldapBaseDN"`
	// The fully qualified domain name or IP address of the LDAP server to use.
	LdapServer pulumi.StringPtrInput `pulumi:"ldapServer"`
	// Determines if the certificates must be validated by a certificate authority. When true, caCertificateURI must be provided.
	RequireValidCertificate pulumi.BoolPtrInput `pulumi:"requireValidCertificate"`
	// The URI of the file containing user information (in /etc/passwd file format). This field must be populated when 'usernameSource' is set to 'File'.
	UserFileURI pulumi.StringPtrInput `pulumi:"userFileURI"`
	// This setting determines how the cache gets username and group names for clients.
	UsernameSource pulumi.StringPtrInput `pulumi:"usernameSource"`
}

// Defaults sets the appropriate defaults for CacheUsernameDownloadSettingsArgs
func (val *CacheUsernameDownloadSettingsArgs) Defaults() *CacheUsernameDownloadSettingsArgs {
	if val == nil {
		return nil
	}
	tmp := *val
	if isZero(tmp.UsernameSource) {
		tmp.UsernameSource = pulumi.StringPtr("None")
	}
	return &tmp
}
func (CacheUsernameDownloadSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CacheUsernameDownloadSettings)(nil)).Elem()
}

func (i CacheUsernameDownloadSettingsArgs) ToCacheUsernameDownloadSettingsOutput() CacheUsernameDownloadSettingsOutput {
	return i.ToCacheUsernameDownloadSettingsOutputWithContext(context.Background())
}

func (i CacheUsernameDownloadSettingsArgs) ToCacheUsernameDownloadSettingsOutputWithContext(ctx context.Context) CacheUsernameDownloadSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CacheUsernameDownloadSettingsOutput)
}

func (i CacheUsernameDownloadSettingsArgs) ToCacheUsernameDownloadSettingsPtrOutput() CacheUsernameDownloadSettingsPtrOutput {
	return i.ToCacheUsernameDownloadSettingsPtrOutputWithContext(context.Background())
}

func (i CacheUsernameDownloadSettingsArgs) ToCacheUsernameDownloadSettingsPtrOutputWithContext(ctx context.Context) CacheUsernameDownloadSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CacheUsernameDownloadSettingsOutput).ToCacheUsernameDownloadSettingsPtrOutputWithContext(ctx)
}

// CacheUsernameDownloadSettingsPtrInput is an input type that accepts CacheUsernameDownloadSettingsArgs, CacheUsernameDownloadSettingsPtr and CacheUsernameDownloadSettingsPtrOutput values.
// You can construct a concrete instance of `CacheUsernameDownloadSettingsPtrInput` via:
//
//	        CacheUsernameDownloadSettingsArgs{...}
//
//	or:
//
//	        nil
type CacheUsernameDownloadSettingsPtrInput interface {
	pulumi.Input

	ToCacheUsernameDownloadSettingsPtrOutput() CacheUsernameDownloadSettingsPtrOutput
	ToCacheUsernameDownloadSettingsPtrOutputWithContext(context.Context) CacheUsernameDownloadSettingsPtrOutput
}

type cacheUsernameDownloadSettingsPtrType CacheUsernameDownloadSettingsArgs

func CacheUsernameDownloadSettingsPtr(v *CacheUsernameDownloadSettingsArgs) CacheUsernameDownloadSettingsPtrInput {
	return (*cacheUsernameDownloadSettingsPtrType)(v)
}

func (*cacheUsernameDownloadSettingsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CacheUsernameDownloadSettings)(nil)).Elem()
}

func (i *cacheUsernameDownloadSettingsPtrType) ToCacheUsernameDownloadSettingsPtrOutput() CacheUsernameDownloadSettingsPtrOutput {
	return i.ToCacheUsernameDownloadSettingsPtrOutputWithContext(context.Background())
}

func (i *cacheUsernameDownloadSettingsPtrType) ToCacheUsernameDownloadSettingsPtrOutputWithContext(ctx context.Context) CacheUsernameDownloadSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CacheUsernameDownloadSettingsPtrOutput)
}

// Settings for Extended Groups username and group download.
type CacheUsernameDownloadSettingsOutput struct{ *pulumi.OutputState }

func (CacheUsernameDownloadSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CacheUsernameDownloadSettings)(nil)).Elem()
}

func (o CacheUsernameDownloadSettingsOutput) ToCacheUsernameDownloadSettingsOutput() CacheUsernameDownloadSettingsOutput {
	return o
}

func (o CacheUsernameDownloadSettingsOutput) ToCacheUsernameDownloadSettingsOutputWithContext(ctx context.Context) CacheUsernameDownloadSettingsOutput {
	return o
}

func (o CacheUsernameDownloadSettingsOutput) ToCacheUsernameDownloadSettingsPtrOutput() CacheUsernameDownloadSettingsPtrOutput {
	return o.ToCacheUsernameDownloadSettingsPtrOutputWithContext(context.Background())
}

func (o CacheUsernameDownloadSettingsOutput) ToCacheUsernameDownloadSettingsPtrOutputWithContext(ctx context.Context) CacheUsernameDownloadSettingsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v CacheUsernameDownloadSettings) *CacheUsernameDownloadSettings {
		return &v
	}).(CacheUsernameDownloadSettingsPtrOutput)
}

// Determines if the certificate should be automatically downloaded. This applies to 'caCertificateURI' only if 'requireValidCertificate' is true.
func (o CacheUsernameDownloadSettingsOutput) AutoDownloadCertificate() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v CacheUsernameDownloadSettings) *bool { return v.AutoDownloadCertificate }).(pulumi.BoolPtrOutput)
}

// The URI of the CA certificate to validate the LDAP secure connection. This field must be populated when 'requireValidCertificate' is set to true.
func (o CacheUsernameDownloadSettingsOutput) CaCertificateURI() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CacheUsernameDownloadSettings) *string { return v.CaCertificateURI }).(pulumi.StringPtrOutput)
}

// When present, these are the credentials for the secure LDAP connection.
func (o CacheUsernameDownloadSettingsOutput) Credentials() CacheUsernameDownloadSettingsCredentialsPtrOutput {
	return o.ApplyT(func(v CacheUsernameDownloadSettings) *CacheUsernameDownloadSettingsCredentials { return v.Credentials }).(CacheUsernameDownloadSettingsCredentialsPtrOutput)
}

// Whether or not the LDAP connection should be encrypted.
func (o CacheUsernameDownloadSettingsOutput) EncryptLdapConnection() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v CacheUsernameDownloadSettings) *bool { return v.EncryptLdapConnection }).(pulumi.BoolPtrOutput)
}

// Whether or not Extended Groups is enabled.
func (o CacheUsernameDownloadSettingsOutput) ExtendedGroups() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v CacheUsernameDownloadSettings) *bool { return v.ExtendedGroups }).(pulumi.BoolPtrOutput)
}

// The URI of the file containing group information (in /etc/group file format). This field must be populated when 'usernameSource' is set to 'File'.
func (o CacheUsernameDownloadSettingsOutput) GroupFileURI() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CacheUsernameDownloadSettings) *string { return v.GroupFileURI }).(pulumi.StringPtrOutput)
}

// The base distinguished name for the LDAP domain.
func (o CacheUsernameDownloadSettingsOutput) LdapBaseDN() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CacheUsernameDownloadSettings) *string { return v.LdapBaseDN }).(pulumi.StringPtrOutput)
}

// The fully qualified domain name or IP address of the LDAP server to use.
func (o CacheUsernameDownloadSettingsOutput) LdapServer() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CacheUsernameDownloadSettings) *string { return v.LdapServer }).(pulumi.StringPtrOutput)
}

// Determines if the certificates must be validated by a certificate authority. When true, caCertificateURI must be provided.
func (o CacheUsernameDownloadSettingsOutput) RequireValidCertificate() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v CacheUsernameDownloadSettings) *bool { return v.RequireValidCertificate }).(pulumi.BoolPtrOutput)
}

// The URI of the file containing user information (in /etc/passwd file format). This field must be populated when 'usernameSource' is set to 'File'.
func (o CacheUsernameDownloadSettingsOutput) UserFileURI() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CacheUsernameDownloadSettings) *string { return v.UserFileURI }).(pulumi.StringPtrOutput)
}

// This setting determines how the cache gets username and group names for clients.
func (o CacheUsernameDownloadSettingsOutput) UsernameSource() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CacheUsernameDownloadSettings) *string { return v.UsernameSource }).(pulumi.StringPtrOutput)
}

type CacheUsernameDownloadSettingsPtrOutput struct{ *pulumi.OutputState }

func (CacheUsernameDownloadSettingsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CacheUsernameDownloadSettings)(nil)).Elem()
}

func (o CacheUsernameDownloadSettingsPtrOutput) ToCacheUsernameDownloadSettingsPtrOutput() CacheUsernameDownloadSettingsPtrOutput {
	return o
}

func (o CacheUsernameDownloadSettingsPtrOutput) ToCacheUsernameDownloadSettingsPtrOutputWithContext(ctx context.Context) CacheUsernameDownloadSettingsPtrOutput {
	return o
}

func (o CacheUsernameDownloadSettingsPtrOutput) Elem() CacheUsernameDownloadSettingsOutput {
	return o.ApplyT(func(v *CacheUsernameDownloadSettings) CacheUsernameDownloadSettings {
		if v != nil {
			return *v
		}
		var ret CacheUsernameDownloadSettings
		return ret
	}).(CacheUsernameDownloadSettingsOutput)
}

// Determines if the certificate should be automatically downloaded. This applies to 'caCertificateURI' only if 'requireValidCertificate' is true.
func (o CacheUsernameDownloadSettingsPtrOutput) AutoDownloadCertificate() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *CacheUsernameDownloadSettings) *bool {
		if v == nil {
			return nil
		}
		return v.AutoDownloadCertificate
	}).(pulumi.BoolPtrOutput)
}

// The URI of the CA certificate to validate the LDAP secure connection. This field must be populated when 'requireValidCertificate' is set to true.
func (o CacheUsernameDownloadSettingsPtrOutput) CaCertificateURI() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CacheUsernameDownloadSettings) *string {
		if v == nil {
			return nil
		}
		return v.CaCertificateURI
	}).(pulumi.StringPtrOutput)
}

// When present, these are the credentials for the secure LDAP connection.
func (o CacheUsernameDownloadSettingsPtrOutput) Credentials() CacheUsernameDownloadSettingsCredentialsPtrOutput {
	return o.ApplyT(func(v *CacheUsernameDownloadSettings) *CacheUsernameDownloadSettingsCredentials {
		if v == nil {
			return nil
		}
		return v.Credentials
	}).(CacheUsernameDownloadSettingsCredentialsPtrOutput)
}

// Whether or not the LDAP connection should be encrypted.
func (o CacheUsernameDownloadSettingsPtrOutput) EncryptLdapConnection() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *CacheUsernameDownloadSettings) *bool {
		if v == nil {
			return nil
		}
		return v.EncryptLdapConnection
	}).(pulumi.BoolPtrOutput)
}

// Whether or not Extended Groups is enabled.
func (o CacheUsernameDownloadSettingsPtrOutput) ExtendedGroups() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *CacheUsernameDownloadSettings) *bool {
		if v == nil {
			return nil
		}
		return v.ExtendedGroups
	}).(pulumi.BoolPtrOutput)
}

// The URI of the file containing group information (in /etc/group file format). This field must be populated when 'usernameSource' is set to 'File'.
func (o CacheUsernameDownloadSettingsPtrOutput) GroupFileURI() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CacheUsernameDownloadSettings) *string {
		if v == nil {
			return nil
		}
		return v.GroupFileURI
	}).(pulumi.StringPtrOutput)
}

// The base distinguished name for the LDAP domain.
func (o CacheUsernameDownloadSettingsPtrOutput) LdapBaseDN() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CacheUsernameDownloadSettings) *string {
		if v == nil {
			return nil
		}
		return v.LdapBaseDN
	}).(pulumi.StringPtrOutput)
}

// The fully qualified domain name or IP address of the LDAP server to use.
func (o CacheUsernameDownloadSettingsPtrOutput) LdapServer() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CacheUsernameDownloadSettings) *string {
		if v == nil {
			return nil
		}
		return v.LdapServer
	}).(pulumi.StringPtrOutput)
}

// Determines if the certificates must be validated by a certificate authority. When true, caCertificateURI must be provided.
func (o CacheUsernameDownloadSettingsPtrOutput) RequireValidCertificate() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *CacheUsernameDownloadSettings) *bool {
		if v == nil {
			return nil
		}
		return v.RequireValidCertificate
	}).(pulumi.BoolPtrOutput)
}

// The URI of the file containing user information (in /etc/passwd file format). This field must be populated when 'usernameSource' is set to 'File'.
func (o CacheUsernameDownloadSettingsPtrOutput) UserFileURI() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CacheUsernameDownloadSettings) *string {
		if v == nil {
			return nil
		}
		return v.UserFileURI
	}).(pulumi.StringPtrOutput)
}

// This setting determines how the cache gets username and group names for clients.
func (o CacheUsernameDownloadSettingsPtrOutput) UsernameSource() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CacheUsernameDownloadSettings) *string {
		if v == nil {
			return nil
		}
		return v.UsernameSource
	}).(pulumi.StringPtrOutput)
}

// When present, these are the credentials for the secure LDAP connection.
type CacheUsernameDownloadSettingsCredentials struct {
	// The Bind Distinguished Name identity to be used in the secure LDAP connection. This value is stored encrypted and not returned on response.
	BindDn *string `pulumi:"bindDn"`
	// The Bind password to be used in the secure LDAP connection. This value is stored encrypted and not returned on response.
	BindPassword *string `pulumi:"bindPassword"`
}

// CacheUsernameDownloadSettingsCredentialsInput is an input type that accepts CacheUsernameDownloadSettingsCredentialsArgs and CacheUsernameDownloadSettingsCredentialsOutput values.
// You can construct a concrete instance of `CacheUsernameDownloadSettingsCredentialsInput` via:
//
//	CacheUsernameDownloadSettingsCredentialsArgs{...}
type CacheUsernameDownloadSettingsCredentialsInput interface {
	pulumi.Input

	ToCacheUsernameDownloadSettingsCredentialsOutput() CacheUsernameDownloadSettingsCredentialsOutput
	ToCacheUsernameDownloadSettingsCredentialsOutputWithContext(context.Context) CacheUsernameDownloadSettingsCredentialsOutput
}

// When present, these are the credentials for the secure LDAP connection.
type CacheUsernameDownloadSettingsCredentialsArgs struct {
	// The Bind Distinguished Name identity to be used in the secure LDAP connection. This value is stored encrypted and not returned on response.
	BindDn pulumi.StringPtrInput `pulumi:"bindDn"`
	// The Bind password to be used in the secure LDAP connection. This value is stored encrypted and not returned on response.
	BindPassword pulumi.StringPtrInput `pulumi:"bindPassword"`
}

func (CacheUsernameDownloadSettingsCredentialsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CacheUsernameDownloadSettingsCredentials)(nil)).Elem()
}

func (i CacheUsernameDownloadSettingsCredentialsArgs) ToCacheUsernameDownloadSettingsCredentialsOutput() CacheUsernameDownloadSettingsCredentialsOutput {
	return i.ToCacheUsernameDownloadSettingsCredentialsOutputWithContext(context.Background())
}

func (i CacheUsernameDownloadSettingsCredentialsArgs) ToCacheUsernameDownloadSettingsCredentialsOutputWithContext(ctx context.Context) CacheUsernameDownloadSettingsCredentialsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CacheUsernameDownloadSettingsCredentialsOutput)
}

func (i CacheUsernameDownloadSettingsCredentialsArgs) ToCacheUsernameDownloadSettingsCredentialsPtrOutput() CacheUsernameDownloadSettingsCredentialsPtrOutput {
	return i.ToCacheUsernameDownloadSettingsCredentialsPtrOutputWithContext(context.Background())
}

func (i CacheUsernameDownloadSettingsCredentialsArgs) ToCacheUsernameDownloadSettingsCredentialsPtrOutputWithContext(ctx context.Context) CacheUsernameDownloadSettingsCredentialsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CacheUsernameDownloadSettingsCredentialsOutput).ToCacheUsernameDownloadSettingsCredentialsPtrOutputWithContext(ctx)
}

// CacheUsernameDownloadSettingsCredentialsPtrInput is an input type that accepts CacheUsernameDownloadSettingsCredentialsArgs, CacheUsernameDownloadSettingsCredentialsPtr and CacheUsernameDownloadSettingsCredentialsPtrOutput values.
// You can construct a concrete instance of `CacheUsernameDownloadSettingsCredentialsPtrInput` via:
//
//	        CacheUsernameDownloadSettingsCredentialsArgs{...}
//
//	or:
//
//	        nil
type CacheUsernameDownloadSettingsCredentialsPtrInput interface {
	pulumi.Input

	ToCacheUsernameDownloadSettingsCredentialsPtrOutput() CacheUsernameDownloadSettingsCredentialsPtrOutput
	ToCacheUsernameDownloadSettingsCredentialsPtrOutputWithContext(context.Context) CacheUsernameDownloadSettingsCredentialsPtrOutput
}

type cacheUsernameDownloadSettingsCredentialsPtrType CacheUsernameDownloadSettingsCredentialsArgs

func CacheUsernameDownloadSettingsCredentialsPtr(v *CacheUsernameDownloadSettingsCredentialsArgs) CacheUsernameDownloadSettingsCredentialsPtrInput {
	return (*cacheUsernameDownloadSettingsCredentialsPtrType)(v)
}

func (*cacheUsernameDownloadSettingsCredentialsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CacheUsernameDownloadSettingsCredentials)(nil)).Elem()
}

func (i *cacheUsernameDownloadSettingsCredentialsPtrType) ToCacheUsernameDownloadSettingsCredentialsPtrOutput() CacheUsernameDownloadSettingsCredentialsPtrOutput {
	return i.ToCacheUsernameDownloadSettingsCredentialsPtrOutputWithContext(context.Background())
}

func (i *cacheUsernameDownloadSettingsCredentialsPtrType) ToCacheUsernameDownloadSettingsCredentialsPtrOutputWithContext(ctx context.Context) CacheUsernameDownloadSettingsCredentialsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CacheUsernameDownloadSettingsCredentialsPtrOutput)
}

// When present, these are the credentials for the secure LDAP connection.
type CacheUsernameDownloadSettingsCredentialsOutput struct{ *pulumi.OutputState }

func (CacheUsernameDownloadSettingsCredentialsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CacheUsernameDownloadSettingsCredentials)(nil)).Elem()
}

func (o CacheUsernameDownloadSettingsCredentialsOutput) ToCacheUsernameDownloadSettingsCredentialsOutput() CacheUsernameDownloadSettingsCredentialsOutput {
	return o
}

func (o CacheUsernameDownloadSettingsCredentialsOutput) ToCacheUsernameDownloadSettingsCredentialsOutputWithContext(ctx context.Context) CacheUsernameDownloadSettingsCredentialsOutput {
	return o
}

func (o CacheUsernameDownloadSettingsCredentialsOutput) ToCacheUsernameDownloadSettingsCredentialsPtrOutput() CacheUsernameDownloadSettingsCredentialsPtrOutput {
	return o.ToCacheUsernameDownloadSettingsCredentialsPtrOutputWithContext(context.Background())
}

func (o CacheUsernameDownloadSettingsCredentialsOutput) ToCacheUsernameDownloadSettingsCredentialsPtrOutputWithContext(ctx context.Context) CacheUsernameDownloadSettingsCredentialsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v CacheUsernameDownloadSettingsCredentials) *CacheUsernameDownloadSettingsCredentials {
		return &v
	}).(CacheUsernameDownloadSettingsCredentialsPtrOutput)
}

// The Bind Distinguished Name identity to be used in the secure LDAP connection. This value is stored encrypted and not returned on response.
func (o CacheUsernameDownloadSettingsCredentialsOutput) BindDn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CacheUsernameDownloadSettingsCredentials) *string { return v.BindDn }).(pulumi.StringPtrOutput)
}

// The Bind password to be used in the secure LDAP connection. This value is stored encrypted and not returned on response.
func (o CacheUsernameDownloadSettingsCredentialsOutput) BindPassword() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CacheUsernameDownloadSettingsCredentials) *string { return v.BindPassword }).(pulumi.StringPtrOutput)
}

type CacheUsernameDownloadSettingsCredentialsPtrOutput struct{ *pulumi.OutputState }

func (CacheUsernameDownloadSettingsCredentialsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CacheUsernameDownloadSettingsCredentials)(nil)).Elem()
}

func (o CacheUsernameDownloadSettingsCredentialsPtrOutput) ToCacheUsernameDownloadSettingsCredentialsPtrOutput() CacheUsernameDownloadSettingsCredentialsPtrOutput {
	return o
}

func (o CacheUsernameDownloadSettingsCredentialsPtrOutput) ToCacheUsernameDownloadSettingsCredentialsPtrOutputWithContext(ctx context.Context) CacheUsernameDownloadSettingsCredentialsPtrOutput {
	return o
}

func (o CacheUsernameDownloadSettingsCredentialsPtrOutput) Elem() CacheUsernameDownloadSettingsCredentialsOutput {
	return o.ApplyT(func(v *CacheUsernameDownloadSettingsCredentials) CacheUsernameDownloadSettingsCredentials {
		if v != nil {
			return *v
		}
		var ret CacheUsernameDownloadSettingsCredentials
		return ret
	}).(CacheUsernameDownloadSettingsCredentialsOutput)
}

// The Bind Distinguished Name identity to be used in the secure LDAP connection. This value is stored encrypted and not returned on response.
func (o CacheUsernameDownloadSettingsCredentialsPtrOutput) BindDn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CacheUsernameDownloadSettingsCredentials) *string {
		if v == nil {
			return nil
		}
		return v.BindDn
	}).(pulumi.StringPtrOutput)
}

// The Bind password to be used in the secure LDAP connection. This value is stored encrypted and not returned on response.
func (o CacheUsernameDownloadSettingsCredentialsPtrOutput) BindPassword() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CacheUsernameDownloadSettingsCredentials) *string {
		if v == nil {
			return nil
		}
		return v.BindPassword
	}).(pulumi.StringPtrOutput)
}

// Settings for Extended Groups username and group download.
type CacheUsernameDownloadSettingsResponse struct {
	// Determines if the certificate should be automatically downloaded. This applies to 'caCertificateURI' only if 'requireValidCertificate' is true.
	AutoDownloadCertificate *bool `pulumi:"autoDownloadCertificate"`
	// The URI of the CA certificate to validate the LDAP secure connection. This field must be populated when 'requireValidCertificate' is set to true.
	CaCertificateURI *string `pulumi:"caCertificateURI"`
	// When present, these are the credentials for the secure LDAP connection.
	Credentials *CacheUsernameDownloadSettingsResponseCredentials `pulumi:"credentials"`
	// Whether or not the LDAP connection should be encrypted.
	EncryptLdapConnection *bool `pulumi:"encryptLdapConnection"`
	// Whether or not Extended Groups is enabled.
	ExtendedGroups *bool `pulumi:"extendedGroups"`
	// The URI of the file containing group information (in /etc/group file format). This field must be populated when 'usernameSource' is set to 'File'.
	GroupFileURI *string `pulumi:"groupFileURI"`
	// The base distinguished name for the LDAP domain.
	LdapBaseDN *string `pulumi:"ldapBaseDN"`
	// The fully qualified domain name or IP address of the LDAP server to use.
	LdapServer *string `pulumi:"ldapServer"`
	// Determines if the certificates must be validated by a certificate authority. When true, caCertificateURI must be provided.
	RequireValidCertificate *bool `pulumi:"requireValidCertificate"`
	// The URI of the file containing user information (in /etc/passwd file format). This field must be populated when 'usernameSource' is set to 'File'.
	UserFileURI *string `pulumi:"userFileURI"`
	// Indicates whether or not the HPC Cache has performed the username download successfully.
	UsernameDownloaded string `pulumi:"usernameDownloaded"`
	// This setting determines how the cache gets username and group names for clients.
	UsernameSource *string `pulumi:"usernameSource"`
}

// Defaults sets the appropriate defaults for CacheUsernameDownloadSettingsResponse
func (val *CacheUsernameDownloadSettingsResponse) Defaults() *CacheUsernameDownloadSettingsResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if isZero(tmp.UsernameSource) {
		usernameSource_ := "None"
		tmp.UsernameSource = &usernameSource_
	}
	return &tmp
}

// Settings for Extended Groups username and group download.
type CacheUsernameDownloadSettingsResponseOutput struct{ *pulumi.OutputState }

func (CacheUsernameDownloadSettingsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CacheUsernameDownloadSettingsResponse)(nil)).Elem()
}

func (o CacheUsernameDownloadSettingsResponseOutput) ToCacheUsernameDownloadSettingsResponseOutput() CacheUsernameDownloadSettingsResponseOutput {
	return o
}

func (o CacheUsernameDownloadSettingsResponseOutput) ToCacheUsernameDownloadSettingsResponseOutputWithContext(ctx context.Context) CacheUsernameDownloadSettingsResponseOutput {
	return o
}

// Determines if the certificate should be automatically downloaded. This applies to 'caCertificateURI' only if 'requireValidCertificate' is true.
func (o CacheUsernameDownloadSettingsResponseOutput) AutoDownloadCertificate() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v CacheUsernameDownloadSettingsResponse) *bool { return v.AutoDownloadCertificate }).(pulumi.BoolPtrOutput)
}

// The URI of the CA certificate to validate the LDAP secure connection. This field must be populated when 'requireValidCertificate' is set to true.
func (o CacheUsernameDownloadSettingsResponseOutput) CaCertificateURI() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CacheUsernameDownloadSettingsResponse) *string { return v.CaCertificateURI }).(pulumi.StringPtrOutput)
}

// When present, these are the credentials for the secure LDAP connection.
func (o CacheUsernameDownloadSettingsResponseOutput) Credentials() CacheUsernameDownloadSettingsResponseCredentialsPtrOutput {
	return o.ApplyT(func(v CacheUsernameDownloadSettingsResponse) *CacheUsernameDownloadSettingsResponseCredentials {
		return v.Credentials
	}).(CacheUsernameDownloadSettingsResponseCredentialsPtrOutput)
}

// Whether or not the LDAP connection should be encrypted.
func (o CacheUsernameDownloadSettingsResponseOutput) EncryptLdapConnection() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v CacheUsernameDownloadSettingsResponse) *bool { return v.EncryptLdapConnection }).(pulumi.BoolPtrOutput)
}

// Whether or not Extended Groups is enabled.
func (o CacheUsernameDownloadSettingsResponseOutput) ExtendedGroups() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v CacheUsernameDownloadSettingsResponse) *bool { return v.ExtendedGroups }).(pulumi.BoolPtrOutput)
}

// The URI of the file containing group information (in /etc/group file format). This field must be populated when 'usernameSource' is set to 'File'.
func (o CacheUsernameDownloadSettingsResponseOutput) GroupFileURI() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CacheUsernameDownloadSettingsResponse) *string { return v.GroupFileURI }).(pulumi.StringPtrOutput)
}

// The base distinguished name for the LDAP domain.
func (o CacheUsernameDownloadSettingsResponseOutput) LdapBaseDN() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CacheUsernameDownloadSettingsResponse) *string { return v.LdapBaseDN }).(pulumi.StringPtrOutput)
}

// The fully qualified domain name or IP address of the LDAP server to use.
func (o CacheUsernameDownloadSettingsResponseOutput) LdapServer() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CacheUsernameDownloadSettingsResponse) *string { return v.LdapServer }).(pulumi.StringPtrOutput)
}

// Determines if the certificates must be validated by a certificate authority. When true, caCertificateURI must be provided.
func (o CacheUsernameDownloadSettingsResponseOutput) RequireValidCertificate() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v CacheUsernameDownloadSettingsResponse) *bool { return v.RequireValidCertificate }).(pulumi.BoolPtrOutput)
}

// The URI of the file containing user information (in /etc/passwd file format). This field must be populated when 'usernameSource' is set to 'File'.
func (o CacheUsernameDownloadSettingsResponseOutput) UserFileURI() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CacheUsernameDownloadSettingsResponse) *string { return v.UserFileURI }).(pulumi.StringPtrOutput)
}

// Indicates whether or not the HPC Cache has performed the username download successfully.
func (o CacheUsernameDownloadSettingsResponseOutput) UsernameDownloaded() pulumi.StringOutput {
	return o.ApplyT(func(v CacheUsernameDownloadSettingsResponse) string { return v.UsernameDownloaded }).(pulumi.StringOutput)
}

// This setting determines how the cache gets username and group names for clients.
func (o CacheUsernameDownloadSettingsResponseOutput) UsernameSource() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CacheUsernameDownloadSettingsResponse) *string { return v.UsernameSource }).(pulumi.StringPtrOutput)
}

type CacheUsernameDownloadSettingsResponsePtrOutput struct{ *pulumi.OutputState }

func (CacheUsernameDownloadSettingsResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CacheUsernameDownloadSettingsResponse)(nil)).Elem()
}

func (o CacheUsernameDownloadSettingsResponsePtrOutput) ToCacheUsernameDownloadSettingsResponsePtrOutput() CacheUsernameDownloadSettingsResponsePtrOutput {
	return o
}

func (o CacheUsernameDownloadSettingsResponsePtrOutput) ToCacheUsernameDownloadSettingsResponsePtrOutputWithContext(ctx context.Context) CacheUsernameDownloadSettingsResponsePtrOutput {
	return o
}

func (o CacheUsernameDownloadSettingsResponsePtrOutput) Elem() CacheUsernameDownloadSettingsResponseOutput {
	return o.ApplyT(func(v *CacheUsernameDownloadSettingsResponse) CacheUsernameDownloadSettingsResponse {
		if v != nil {
			return *v
		}
		var ret CacheUsernameDownloadSettingsResponse
		return ret
	}).(CacheUsernameDownloadSettingsResponseOutput)
}

// Determines if the certificate should be automatically downloaded. This applies to 'caCertificateURI' only if 'requireValidCertificate' is true.
func (o CacheUsernameDownloadSettingsResponsePtrOutput) AutoDownloadCertificate() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *CacheUsernameDownloadSettingsResponse) *bool {
		if v == nil {
			return nil
		}
		return v.AutoDownloadCertificate
	}).(pulumi.BoolPtrOutput)
}

// The URI of the CA certificate to validate the LDAP secure connection. This field must be populated when 'requireValidCertificate' is set to true.
func (o CacheUsernameDownloadSettingsResponsePtrOutput) CaCertificateURI() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CacheUsernameDownloadSettingsResponse) *string {
		if v == nil {
			return nil
		}
		return v.CaCertificateURI
	}).(pulumi.StringPtrOutput)
}

// When present, these are the credentials for the secure LDAP connection.
func (o CacheUsernameDownloadSettingsResponsePtrOutput) Credentials() CacheUsernameDownloadSettingsResponseCredentialsPtrOutput {
	return o.ApplyT(func(v *CacheUsernameDownloadSettingsResponse) *CacheUsernameDownloadSettingsResponseCredentials {
		if v == nil {
			return nil
		}
		return v.Credentials
	}).(CacheUsernameDownloadSettingsResponseCredentialsPtrOutput)
}

// Whether or not the LDAP connection should be encrypted.
func (o CacheUsernameDownloadSettingsResponsePtrOutput) EncryptLdapConnection() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *CacheUsernameDownloadSettingsResponse) *bool {
		if v == nil {
			return nil
		}
		return v.EncryptLdapConnection
	}).(pulumi.BoolPtrOutput)
}

// Whether or not Extended Groups is enabled.
func (o CacheUsernameDownloadSettingsResponsePtrOutput) ExtendedGroups() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *CacheUsernameDownloadSettingsResponse) *bool {
		if v == nil {
			return nil
		}
		return v.ExtendedGroups
	}).(pulumi.BoolPtrOutput)
}

// The URI of the file containing group information (in /etc/group file format). This field must be populated when 'usernameSource' is set to 'File'.
func (o CacheUsernameDownloadSettingsResponsePtrOutput) GroupFileURI() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CacheUsernameDownloadSettingsResponse) *string {
		if v == nil {
			return nil
		}
		return v.GroupFileURI
	}).(pulumi.StringPtrOutput)
}

// The base distinguished name for the LDAP domain.
func (o CacheUsernameDownloadSettingsResponsePtrOutput) LdapBaseDN() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CacheUsernameDownloadSettingsResponse) *string {
		if v == nil {
			return nil
		}
		return v.LdapBaseDN
	}).(pulumi.StringPtrOutput)
}

// The fully qualified domain name or IP address of the LDAP server to use.
func (o CacheUsernameDownloadSettingsResponsePtrOutput) LdapServer() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CacheUsernameDownloadSettingsResponse) *string {
		if v == nil {
			return nil
		}
		return v.LdapServer
	}).(pulumi.StringPtrOutput)
}

// Determines if the certificates must be validated by a certificate authority. When true, caCertificateURI must be provided.
func (o CacheUsernameDownloadSettingsResponsePtrOutput) RequireValidCertificate() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *CacheUsernameDownloadSettingsResponse) *bool {
		if v == nil {
			return nil
		}
		return v.RequireValidCertificate
	}).(pulumi.BoolPtrOutput)
}

// The URI of the file containing user information (in /etc/passwd file format). This field must be populated when 'usernameSource' is set to 'File'.
func (o CacheUsernameDownloadSettingsResponsePtrOutput) UserFileURI() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CacheUsernameDownloadSettingsResponse) *string {
		if v == nil {
			return nil
		}
		return v.UserFileURI
	}).(pulumi.StringPtrOutput)
}

// Indicates whether or not the HPC Cache has performed the username download successfully.
func (o CacheUsernameDownloadSettingsResponsePtrOutput) UsernameDownloaded() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CacheUsernameDownloadSettingsResponse) *string {
		if v == nil {
			return nil
		}
		return &v.UsernameDownloaded
	}).(pulumi.StringPtrOutput)
}

// This setting determines how the cache gets username and group names for clients.
func (o CacheUsernameDownloadSettingsResponsePtrOutput) UsernameSource() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CacheUsernameDownloadSettingsResponse) *string {
		if v == nil {
			return nil
		}
		return v.UsernameSource
	}).(pulumi.StringPtrOutput)
}

// When present, these are the credentials for the secure LDAP connection.
type CacheUsernameDownloadSettingsResponseCredentials struct {
	// The Bind Distinguished Name identity to be used in the secure LDAP connection. This value is stored encrypted and not returned on response.
	BindDn *string `pulumi:"bindDn"`
	// The Bind password to be used in the secure LDAP connection. This value is stored encrypted and not returned on response.
	BindPassword *string `pulumi:"bindPassword"`
}

// When present, these are the credentials for the secure LDAP connection.
type CacheUsernameDownloadSettingsResponseCredentialsOutput struct{ *pulumi.OutputState }

func (CacheUsernameDownloadSettingsResponseCredentialsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CacheUsernameDownloadSettingsResponseCredentials)(nil)).Elem()
}

func (o CacheUsernameDownloadSettingsResponseCredentialsOutput) ToCacheUsernameDownloadSettingsResponseCredentialsOutput() CacheUsernameDownloadSettingsResponseCredentialsOutput {
	return o
}

func (o CacheUsernameDownloadSettingsResponseCredentialsOutput) ToCacheUsernameDownloadSettingsResponseCredentialsOutputWithContext(ctx context.Context) CacheUsernameDownloadSettingsResponseCredentialsOutput {
	return o
}

// The Bind Distinguished Name identity to be used in the secure LDAP connection. This value is stored encrypted and not returned on response.
func (o CacheUsernameDownloadSettingsResponseCredentialsOutput) BindDn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CacheUsernameDownloadSettingsResponseCredentials) *string { return v.BindDn }).(pulumi.StringPtrOutput)
}

// The Bind password to be used in the secure LDAP connection. This value is stored encrypted and not returned on response.
func (o CacheUsernameDownloadSettingsResponseCredentialsOutput) BindPassword() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CacheUsernameDownloadSettingsResponseCredentials) *string { return v.BindPassword }).(pulumi.StringPtrOutput)
}

type CacheUsernameDownloadSettingsResponseCredentialsPtrOutput struct{ *pulumi.OutputState }

func (CacheUsernameDownloadSettingsResponseCredentialsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CacheUsernameDownloadSettingsResponseCredentials)(nil)).Elem()
}

func (o CacheUsernameDownloadSettingsResponseCredentialsPtrOutput) ToCacheUsernameDownloadSettingsResponseCredentialsPtrOutput() CacheUsernameDownloadSettingsResponseCredentialsPtrOutput {
	return o
}

func (o CacheUsernameDownloadSettingsResponseCredentialsPtrOutput) ToCacheUsernameDownloadSettingsResponseCredentialsPtrOutputWithContext(ctx context.Context) CacheUsernameDownloadSettingsResponseCredentialsPtrOutput {
	return o
}

func (o CacheUsernameDownloadSettingsResponseCredentialsPtrOutput) Elem() CacheUsernameDownloadSettingsResponseCredentialsOutput {
	return o.ApplyT(func(v *CacheUsernameDownloadSettingsResponseCredentials) CacheUsernameDownloadSettingsResponseCredentials {
		if v != nil {
			return *v
		}
		var ret CacheUsernameDownloadSettingsResponseCredentials
		return ret
	}).(CacheUsernameDownloadSettingsResponseCredentialsOutput)
}

// The Bind Distinguished Name identity to be used in the secure LDAP connection. This value is stored encrypted and not returned on response.
func (o CacheUsernameDownloadSettingsResponseCredentialsPtrOutput) BindDn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CacheUsernameDownloadSettingsResponseCredentials) *string {
		if v == nil {
			return nil
		}
		return v.BindDn
	}).(pulumi.StringPtrOutput)
}

// The Bind password to be used in the secure LDAP connection. This value is stored encrypted and not returned on response.
func (o CacheUsernameDownloadSettingsResponseCredentialsPtrOutput) BindPassword() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CacheUsernameDownloadSettingsResponseCredentials) *string {
		if v == nil {
			return nil
		}
		return v.BindPassword
	}).(pulumi.StringPtrOutput)
}

// Properties pertaining to the ClfsTarget
type ClfsTarget struct {
	// Resource ID of storage container.
	Target *string `pulumi:"target"`
}

// ClfsTargetInput is an input type that accepts ClfsTargetArgs and ClfsTargetOutput values.
// You can construct a concrete instance of `ClfsTargetInput` via:
//
//	ClfsTargetArgs{...}
type ClfsTargetInput interface {
	pulumi.Input

	ToClfsTargetOutput() ClfsTargetOutput
	ToClfsTargetOutputWithContext(context.Context) ClfsTargetOutput
}

// Properties pertaining to the ClfsTarget
type ClfsTargetArgs struct {
	// Resource ID of storage container.
	Target pulumi.StringPtrInput `pulumi:"target"`
}

func (ClfsTargetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClfsTarget)(nil)).Elem()
}

func (i ClfsTargetArgs) ToClfsTargetOutput() ClfsTargetOutput {
	return i.ToClfsTargetOutputWithContext(context.Background())
}

func (i ClfsTargetArgs) ToClfsTargetOutputWithContext(ctx context.Context) ClfsTargetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClfsTargetOutput)
}

func (i ClfsTargetArgs) ToClfsTargetPtrOutput() ClfsTargetPtrOutput {
	return i.ToClfsTargetPtrOutputWithContext(context.Background())
}

func (i ClfsTargetArgs) ToClfsTargetPtrOutputWithContext(ctx context.Context) ClfsTargetPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClfsTargetOutput).ToClfsTargetPtrOutputWithContext(ctx)
}

// ClfsTargetPtrInput is an input type that accepts ClfsTargetArgs, ClfsTargetPtr and ClfsTargetPtrOutput values.
// You can construct a concrete instance of `ClfsTargetPtrInput` via:
//
//	        ClfsTargetArgs{...}
//
//	or:
//
//	        nil
type ClfsTargetPtrInput interface {
	pulumi.Input

	ToClfsTargetPtrOutput() ClfsTargetPtrOutput
	ToClfsTargetPtrOutputWithContext(context.Context) ClfsTargetPtrOutput
}

type clfsTargetPtrType ClfsTargetArgs

func ClfsTargetPtr(v *ClfsTargetArgs) ClfsTargetPtrInput {
	return (*clfsTargetPtrType)(v)
}

func (*clfsTargetPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ClfsTarget)(nil)).Elem()
}

func (i *clfsTargetPtrType) ToClfsTargetPtrOutput() ClfsTargetPtrOutput {
	return i.ToClfsTargetPtrOutputWithContext(context.Background())
}

func (i *clfsTargetPtrType) ToClfsTargetPtrOutputWithContext(ctx context.Context) ClfsTargetPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClfsTargetPtrOutput)
}

// Properties pertaining to the ClfsTarget
type ClfsTargetOutput struct{ *pulumi.OutputState }

func (ClfsTargetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClfsTarget)(nil)).Elem()
}

func (o ClfsTargetOutput) ToClfsTargetOutput() ClfsTargetOutput {
	return o
}

func (o ClfsTargetOutput) ToClfsTargetOutputWithContext(ctx context.Context) ClfsTargetOutput {
	return o
}

func (o ClfsTargetOutput) ToClfsTargetPtrOutput() ClfsTargetPtrOutput {
	return o.ToClfsTargetPtrOutputWithContext(context.Background())
}

func (o ClfsTargetOutput) ToClfsTargetPtrOutputWithContext(ctx context.Context) ClfsTargetPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ClfsTarget) *ClfsTarget {
		return &v
	}).(ClfsTargetPtrOutput)
}

// Resource ID of storage container.
func (o ClfsTargetOutput) Target() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClfsTarget) *string { return v.Target }).(pulumi.StringPtrOutput)
}

type ClfsTargetPtrOutput struct{ *pulumi.OutputState }

func (ClfsTargetPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ClfsTarget)(nil)).Elem()
}

func (o ClfsTargetPtrOutput) ToClfsTargetPtrOutput() ClfsTargetPtrOutput {
	return o
}

func (o ClfsTargetPtrOutput) ToClfsTargetPtrOutputWithContext(ctx context.Context) ClfsTargetPtrOutput {
	return o
}

func (o ClfsTargetPtrOutput) Elem() ClfsTargetOutput {
	return o.ApplyT(func(v *ClfsTarget) ClfsTarget {
		if v != nil {
			return *v
		}
		var ret ClfsTarget
		return ret
	}).(ClfsTargetOutput)
}

// Resource ID of storage container.
func (o ClfsTargetPtrOutput) Target() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClfsTarget) *string {
		if v == nil {
			return nil
		}
		return v.Target
	}).(pulumi.StringPtrOutput)
}

// Properties pertaining to the ClfsTarget
type ClfsTargetResponse struct {
	// Resource ID of storage container.
	Target *string `pulumi:"target"`
}

// Properties pertaining to the ClfsTarget
type ClfsTargetResponseOutput struct{ *pulumi.OutputState }

func (ClfsTargetResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClfsTargetResponse)(nil)).Elem()
}

func (o ClfsTargetResponseOutput) ToClfsTargetResponseOutput() ClfsTargetResponseOutput {
	return o
}

func (o ClfsTargetResponseOutput) ToClfsTargetResponseOutputWithContext(ctx context.Context) ClfsTargetResponseOutput {
	return o
}

// Resource ID of storage container.
func (o ClfsTargetResponseOutput) Target() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClfsTargetResponse) *string { return v.Target }).(pulumi.StringPtrOutput)
}

type ClfsTargetResponsePtrOutput struct{ *pulumi.OutputState }

func (ClfsTargetResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ClfsTargetResponse)(nil)).Elem()
}

func (o ClfsTargetResponsePtrOutput) ToClfsTargetResponsePtrOutput() ClfsTargetResponsePtrOutput {
	return o
}

func (o ClfsTargetResponsePtrOutput) ToClfsTargetResponsePtrOutputWithContext(ctx context.Context) ClfsTargetResponsePtrOutput {
	return o
}

func (o ClfsTargetResponsePtrOutput) Elem() ClfsTargetResponseOutput {
	return o.ApplyT(func(v *ClfsTargetResponse) ClfsTargetResponse {
		if v != nil {
			return *v
		}
		var ret ClfsTargetResponse
		return ret
	}).(ClfsTargetResponseOutput)
}

// Resource ID of storage container.
func (o ClfsTargetResponsePtrOutput) Target() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClfsTargetResponse) *string {
		if v == nil {
			return nil
		}
		return v.Target
	}).(pulumi.StringPtrOutput)
}

// Outstanding conditions that will need to be resolved.
type ConditionResponse struct {
	// The issue requiring attention.
	Message string `pulumi:"message"`
	// The time when the condition was raised.
	Timestamp string `pulumi:"timestamp"`
}

// Outstanding conditions that will need to be resolved.
type ConditionResponseOutput struct{ *pulumi.OutputState }

func (ConditionResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConditionResponse)(nil)).Elem()
}

func (o ConditionResponseOutput) ToConditionResponseOutput() ConditionResponseOutput {
	return o
}

func (o ConditionResponseOutput) ToConditionResponseOutputWithContext(ctx context.Context) ConditionResponseOutput {
	return o
}

// The issue requiring attention.
func (o ConditionResponseOutput) Message() pulumi.StringOutput {
	return o.ApplyT(func(v ConditionResponse) string { return v.Message }).(pulumi.StringOutput)
}

// The time when the condition was raised.
func (o ConditionResponseOutput) Timestamp() pulumi.StringOutput {
	return o.ApplyT(func(v ConditionResponse) string { return v.Timestamp }).(pulumi.StringOutput)
}

type ConditionResponseArrayOutput struct{ *pulumi.OutputState }

func (ConditionResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ConditionResponse)(nil)).Elem()
}

func (o ConditionResponseArrayOutput) ToConditionResponseArrayOutput() ConditionResponseArrayOutput {
	return o
}

func (o ConditionResponseArrayOutput) ToConditionResponseArrayOutputWithContext(ctx context.Context) ConditionResponseArrayOutput {
	return o
}

func (o ConditionResponseArrayOutput) Index(i pulumi.IntInput) ConditionResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ConditionResponse {
		return vs[0].([]ConditionResponse)[vs[1].(int)]
	}).(ConditionResponseOutput)
}

// Describes a reference to Key Vault Key.
type KeyVaultKeyReference struct {
	// The URL referencing a key encryption key in Key Vault.
	KeyUrl string `pulumi:"keyUrl"`
	// Describes a resource Id to source Key Vault.
	SourceVault KeyVaultKeyReferenceSourceVault `pulumi:"sourceVault"`
}

// KeyVaultKeyReferenceInput is an input type that accepts KeyVaultKeyReferenceArgs and KeyVaultKeyReferenceOutput values.
// You can construct a concrete instance of `KeyVaultKeyReferenceInput` via:
//
//	KeyVaultKeyReferenceArgs{...}
type KeyVaultKeyReferenceInput interface {
	pulumi.Input

	ToKeyVaultKeyReferenceOutput() KeyVaultKeyReferenceOutput
	ToKeyVaultKeyReferenceOutputWithContext(context.Context) KeyVaultKeyReferenceOutput
}

// Describes a reference to Key Vault Key.
type KeyVaultKeyReferenceArgs struct {
	// The URL referencing a key encryption key in Key Vault.
	KeyUrl pulumi.StringInput `pulumi:"keyUrl"`
	// Describes a resource Id to source Key Vault.
	SourceVault KeyVaultKeyReferenceSourceVaultInput `pulumi:"sourceVault"`
}

func (KeyVaultKeyReferenceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KeyVaultKeyReference)(nil)).Elem()
}

func (i KeyVaultKeyReferenceArgs) ToKeyVaultKeyReferenceOutput() KeyVaultKeyReferenceOutput {
	return i.ToKeyVaultKeyReferenceOutputWithContext(context.Background())
}

func (i KeyVaultKeyReferenceArgs) ToKeyVaultKeyReferenceOutputWithContext(ctx context.Context) KeyVaultKeyReferenceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KeyVaultKeyReferenceOutput)
}

func (i KeyVaultKeyReferenceArgs) ToKeyVaultKeyReferencePtrOutput() KeyVaultKeyReferencePtrOutput {
	return i.ToKeyVaultKeyReferencePtrOutputWithContext(context.Background())
}

func (i KeyVaultKeyReferenceArgs) ToKeyVaultKeyReferencePtrOutputWithContext(ctx context.Context) KeyVaultKeyReferencePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KeyVaultKeyReferenceOutput).ToKeyVaultKeyReferencePtrOutputWithContext(ctx)
}

// KeyVaultKeyReferencePtrInput is an input type that accepts KeyVaultKeyReferenceArgs, KeyVaultKeyReferencePtr and KeyVaultKeyReferencePtrOutput values.
// You can construct a concrete instance of `KeyVaultKeyReferencePtrInput` via:
//
//	        KeyVaultKeyReferenceArgs{...}
//
//	or:
//
//	        nil
type KeyVaultKeyReferencePtrInput interface {
	pulumi.Input

	ToKeyVaultKeyReferencePtrOutput() KeyVaultKeyReferencePtrOutput
	ToKeyVaultKeyReferencePtrOutputWithContext(context.Context) KeyVaultKeyReferencePtrOutput
}

type keyVaultKeyReferencePtrType KeyVaultKeyReferenceArgs

func KeyVaultKeyReferencePtr(v *KeyVaultKeyReferenceArgs) KeyVaultKeyReferencePtrInput {
	return (*keyVaultKeyReferencePtrType)(v)
}

func (*keyVaultKeyReferencePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**KeyVaultKeyReference)(nil)).Elem()
}

func (i *keyVaultKeyReferencePtrType) ToKeyVaultKeyReferencePtrOutput() KeyVaultKeyReferencePtrOutput {
	return i.ToKeyVaultKeyReferencePtrOutputWithContext(context.Background())
}

func (i *keyVaultKeyReferencePtrType) ToKeyVaultKeyReferencePtrOutputWithContext(ctx context.Context) KeyVaultKeyReferencePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KeyVaultKeyReferencePtrOutput)
}

// Describes a reference to Key Vault Key.
type KeyVaultKeyReferenceOutput struct{ *pulumi.OutputState }

func (KeyVaultKeyReferenceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KeyVaultKeyReference)(nil)).Elem()
}

func (o KeyVaultKeyReferenceOutput) ToKeyVaultKeyReferenceOutput() KeyVaultKeyReferenceOutput {
	return o
}

func (o KeyVaultKeyReferenceOutput) ToKeyVaultKeyReferenceOutputWithContext(ctx context.Context) KeyVaultKeyReferenceOutput {
	return o
}

func (o KeyVaultKeyReferenceOutput) ToKeyVaultKeyReferencePtrOutput() KeyVaultKeyReferencePtrOutput {
	return o.ToKeyVaultKeyReferencePtrOutputWithContext(context.Background())
}

func (o KeyVaultKeyReferenceOutput) ToKeyVaultKeyReferencePtrOutputWithContext(ctx context.Context) KeyVaultKeyReferencePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v KeyVaultKeyReference) *KeyVaultKeyReference {
		return &v
	}).(KeyVaultKeyReferencePtrOutput)
}

// The URL referencing a key encryption key in Key Vault.
func (o KeyVaultKeyReferenceOutput) KeyUrl() pulumi.StringOutput {
	return o.ApplyT(func(v KeyVaultKeyReference) string { return v.KeyUrl }).(pulumi.StringOutput)
}

// Describes a resource Id to source Key Vault.
func (o KeyVaultKeyReferenceOutput) SourceVault() KeyVaultKeyReferenceSourceVaultOutput {
	return o.ApplyT(func(v KeyVaultKeyReference) KeyVaultKeyReferenceSourceVault { return v.SourceVault }).(KeyVaultKeyReferenceSourceVaultOutput)
}

type KeyVaultKeyReferencePtrOutput struct{ *pulumi.OutputState }

func (KeyVaultKeyReferencePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KeyVaultKeyReference)(nil)).Elem()
}

func (o KeyVaultKeyReferencePtrOutput) ToKeyVaultKeyReferencePtrOutput() KeyVaultKeyReferencePtrOutput {
	return o
}

func (o KeyVaultKeyReferencePtrOutput) ToKeyVaultKeyReferencePtrOutputWithContext(ctx context.Context) KeyVaultKeyReferencePtrOutput {
	return o
}

func (o KeyVaultKeyReferencePtrOutput) Elem() KeyVaultKeyReferenceOutput {
	return o.ApplyT(func(v *KeyVaultKeyReference) KeyVaultKeyReference {
		if v != nil {
			return *v
		}
		var ret KeyVaultKeyReference
		return ret
	}).(KeyVaultKeyReferenceOutput)
}

// The URL referencing a key encryption key in Key Vault.
func (o KeyVaultKeyReferencePtrOutput) KeyUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KeyVaultKeyReference) *string {
		if v == nil {
			return nil
		}
		return &v.KeyUrl
	}).(pulumi.StringPtrOutput)
}

// Describes a resource Id to source Key Vault.
func (o KeyVaultKeyReferencePtrOutput) SourceVault() KeyVaultKeyReferenceSourceVaultPtrOutput {
	return o.ApplyT(func(v *KeyVaultKeyReference) *KeyVaultKeyReferenceSourceVault {
		if v == nil {
			return nil
		}
		return &v.SourceVault
	}).(KeyVaultKeyReferenceSourceVaultPtrOutput)
}

// Describes a reference to Key Vault Key.
type KeyVaultKeyReferenceResponse struct {
	// The URL referencing a key encryption key in Key Vault.
	KeyUrl string `pulumi:"keyUrl"`
	// Describes a resource Id to source Key Vault.
	SourceVault KeyVaultKeyReferenceResponseSourceVault `pulumi:"sourceVault"`
}

// Describes a reference to Key Vault Key.
type KeyVaultKeyReferenceResponseOutput struct{ *pulumi.OutputState }

func (KeyVaultKeyReferenceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KeyVaultKeyReferenceResponse)(nil)).Elem()
}

func (o KeyVaultKeyReferenceResponseOutput) ToKeyVaultKeyReferenceResponseOutput() KeyVaultKeyReferenceResponseOutput {
	return o
}

func (o KeyVaultKeyReferenceResponseOutput) ToKeyVaultKeyReferenceResponseOutputWithContext(ctx context.Context) KeyVaultKeyReferenceResponseOutput {
	return o
}

// The URL referencing a key encryption key in Key Vault.
func (o KeyVaultKeyReferenceResponseOutput) KeyUrl() pulumi.StringOutput {
	return o.ApplyT(func(v KeyVaultKeyReferenceResponse) string { return v.KeyUrl }).(pulumi.StringOutput)
}

// Describes a resource Id to source Key Vault.
func (o KeyVaultKeyReferenceResponseOutput) SourceVault() KeyVaultKeyReferenceResponseSourceVaultOutput {
	return o.ApplyT(func(v KeyVaultKeyReferenceResponse) KeyVaultKeyReferenceResponseSourceVault { return v.SourceVault }).(KeyVaultKeyReferenceResponseSourceVaultOutput)
}

type KeyVaultKeyReferenceResponsePtrOutput struct{ *pulumi.OutputState }

func (KeyVaultKeyReferenceResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KeyVaultKeyReferenceResponse)(nil)).Elem()
}

func (o KeyVaultKeyReferenceResponsePtrOutput) ToKeyVaultKeyReferenceResponsePtrOutput() KeyVaultKeyReferenceResponsePtrOutput {
	return o
}

func (o KeyVaultKeyReferenceResponsePtrOutput) ToKeyVaultKeyReferenceResponsePtrOutputWithContext(ctx context.Context) KeyVaultKeyReferenceResponsePtrOutput {
	return o
}

func (o KeyVaultKeyReferenceResponsePtrOutput) Elem() KeyVaultKeyReferenceResponseOutput {
	return o.ApplyT(func(v *KeyVaultKeyReferenceResponse) KeyVaultKeyReferenceResponse {
		if v != nil {
			return *v
		}
		var ret KeyVaultKeyReferenceResponse
		return ret
	}).(KeyVaultKeyReferenceResponseOutput)
}

// The URL referencing a key encryption key in Key Vault.
func (o KeyVaultKeyReferenceResponsePtrOutput) KeyUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KeyVaultKeyReferenceResponse) *string {
		if v == nil {
			return nil
		}
		return &v.KeyUrl
	}).(pulumi.StringPtrOutput)
}

// Describes a resource Id to source Key Vault.
func (o KeyVaultKeyReferenceResponsePtrOutput) SourceVault() KeyVaultKeyReferenceResponseSourceVaultPtrOutput {
	return o.ApplyT(func(v *KeyVaultKeyReferenceResponse) *KeyVaultKeyReferenceResponseSourceVault {
		if v == nil {
			return nil
		}
		return &v.SourceVault
	}).(KeyVaultKeyReferenceResponseSourceVaultPtrOutput)
}

// Describes a resource Id to source Key Vault.
type KeyVaultKeyReferenceResponseSourceVault struct {
	// Resource Id.
	Id *string `pulumi:"id"`
}

// Describes a resource Id to source Key Vault.
type KeyVaultKeyReferenceResponseSourceVaultOutput struct{ *pulumi.OutputState }

func (KeyVaultKeyReferenceResponseSourceVaultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KeyVaultKeyReferenceResponseSourceVault)(nil)).Elem()
}

func (o KeyVaultKeyReferenceResponseSourceVaultOutput) ToKeyVaultKeyReferenceResponseSourceVaultOutput() KeyVaultKeyReferenceResponseSourceVaultOutput {
	return o
}

func (o KeyVaultKeyReferenceResponseSourceVaultOutput) ToKeyVaultKeyReferenceResponseSourceVaultOutputWithContext(ctx context.Context) KeyVaultKeyReferenceResponseSourceVaultOutput {
	return o
}

// Resource Id.
func (o KeyVaultKeyReferenceResponseSourceVaultOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KeyVaultKeyReferenceResponseSourceVault) *string { return v.Id }).(pulumi.StringPtrOutput)
}

type KeyVaultKeyReferenceResponseSourceVaultPtrOutput struct{ *pulumi.OutputState }

func (KeyVaultKeyReferenceResponseSourceVaultPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KeyVaultKeyReferenceResponseSourceVault)(nil)).Elem()
}

func (o KeyVaultKeyReferenceResponseSourceVaultPtrOutput) ToKeyVaultKeyReferenceResponseSourceVaultPtrOutput() KeyVaultKeyReferenceResponseSourceVaultPtrOutput {
	return o
}

func (o KeyVaultKeyReferenceResponseSourceVaultPtrOutput) ToKeyVaultKeyReferenceResponseSourceVaultPtrOutputWithContext(ctx context.Context) KeyVaultKeyReferenceResponseSourceVaultPtrOutput {
	return o
}

func (o KeyVaultKeyReferenceResponseSourceVaultPtrOutput) Elem() KeyVaultKeyReferenceResponseSourceVaultOutput {
	return o.ApplyT(func(v *KeyVaultKeyReferenceResponseSourceVault) KeyVaultKeyReferenceResponseSourceVault {
		if v != nil {
			return *v
		}
		var ret KeyVaultKeyReferenceResponseSourceVault
		return ret
	}).(KeyVaultKeyReferenceResponseSourceVaultOutput)
}

// Resource Id.
func (o KeyVaultKeyReferenceResponseSourceVaultPtrOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KeyVaultKeyReferenceResponseSourceVault) *string {
		if v == nil {
			return nil
		}
		return v.Id
	}).(pulumi.StringPtrOutput)
}

// Describes a resource Id to source Key Vault.
type KeyVaultKeyReferenceSourceVault struct {
	// Resource Id.
	Id *string `pulumi:"id"`
}

// KeyVaultKeyReferenceSourceVaultInput is an input type that accepts KeyVaultKeyReferenceSourceVaultArgs and KeyVaultKeyReferenceSourceVaultOutput values.
// You can construct a concrete instance of `KeyVaultKeyReferenceSourceVaultInput` via:
//
//	KeyVaultKeyReferenceSourceVaultArgs{...}
type KeyVaultKeyReferenceSourceVaultInput interface {
	pulumi.Input

	ToKeyVaultKeyReferenceSourceVaultOutput() KeyVaultKeyReferenceSourceVaultOutput
	ToKeyVaultKeyReferenceSourceVaultOutputWithContext(context.Context) KeyVaultKeyReferenceSourceVaultOutput
}

// Describes a resource Id to source Key Vault.
type KeyVaultKeyReferenceSourceVaultArgs struct {
	// Resource Id.
	Id pulumi.StringPtrInput `pulumi:"id"`
}

func (KeyVaultKeyReferenceSourceVaultArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KeyVaultKeyReferenceSourceVault)(nil)).Elem()
}

func (i KeyVaultKeyReferenceSourceVaultArgs) ToKeyVaultKeyReferenceSourceVaultOutput() KeyVaultKeyReferenceSourceVaultOutput {
	return i.ToKeyVaultKeyReferenceSourceVaultOutputWithContext(context.Background())
}

func (i KeyVaultKeyReferenceSourceVaultArgs) ToKeyVaultKeyReferenceSourceVaultOutputWithContext(ctx context.Context) KeyVaultKeyReferenceSourceVaultOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KeyVaultKeyReferenceSourceVaultOutput)
}

func (i KeyVaultKeyReferenceSourceVaultArgs) ToKeyVaultKeyReferenceSourceVaultPtrOutput() KeyVaultKeyReferenceSourceVaultPtrOutput {
	return i.ToKeyVaultKeyReferenceSourceVaultPtrOutputWithContext(context.Background())
}

func (i KeyVaultKeyReferenceSourceVaultArgs) ToKeyVaultKeyReferenceSourceVaultPtrOutputWithContext(ctx context.Context) KeyVaultKeyReferenceSourceVaultPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KeyVaultKeyReferenceSourceVaultOutput).ToKeyVaultKeyReferenceSourceVaultPtrOutputWithContext(ctx)
}

// KeyVaultKeyReferenceSourceVaultPtrInput is an input type that accepts KeyVaultKeyReferenceSourceVaultArgs, KeyVaultKeyReferenceSourceVaultPtr and KeyVaultKeyReferenceSourceVaultPtrOutput values.
// You can construct a concrete instance of `KeyVaultKeyReferenceSourceVaultPtrInput` via:
//
//	        KeyVaultKeyReferenceSourceVaultArgs{...}
//
//	or:
//
//	        nil
type KeyVaultKeyReferenceSourceVaultPtrInput interface {
	pulumi.Input

	ToKeyVaultKeyReferenceSourceVaultPtrOutput() KeyVaultKeyReferenceSourceVaultPtrOutput
	ToKeyVaultKeyReferenceSourceVaultPtrOutputWithContext(context.Context) KeyVaultKeyReferenceSourceVaultPtrOutput
}

type keyVaultKeyReferenceSourceVaultPtrType KeyVaultKeyReferenceSourceVaultArgs

func KeyVaultKeyReferenceSourceVaultPtr(v *KeyVaultKeyReferenceSourceVaultArgs) KeyVaultKeyReferenceSourceVaultPtrInput {
	return (*keyVaultKeyReferenceSourceVaultPtrType)(v)
}

func (*keyVaultKeyReferenceSourceVaultPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**KeyVaultKeyReferenceSourceVault)(nil)).Elem()
}

func (i *keyVaultKeyReferenceSourceVaultPtrType) ToKeyVaultKeyReferenceSourceVaultPtrOutput() KeyVaultKeyReferenceSourceVaultPtrOutput {
	return i.ToKeyVaultKeyReferenceSourceVaultPtrOutputWithContext(context.Background())
}

func (i *keyVaultKeyReferenceSourceVaultPtrType) ToKeyVaultKeyReferenceSourceVaultPtrOutputWithContext(ctx context.Context) KeyVaultKeyReferenceSourceVaultPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KeyVaultKeyReferenceSourceVaultPtrOutput)
}

// Describes a resource Id to source Key Vault.
type KeyVaultKeyReferenceSourceVaultOutput struct{ *pulumi.OutputState }

func (KeyVaultKeyReferenceSourceVaultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KeyVaultKeyReferenceSourceVault)(nil)).Elem()
}

func (o KeyVaultKeyReferenceSourceVaultOutput) ToKeyVaultKeyReferenceSourceVaultOutput() KeyVaultKeyReferenceSourceVaultOutput {
	return o
}

func (o KeyVaultKeyReferenceSourceVaultOutput) ToKeyVaultKeyReferenceSourceVaultOutputWithContext(ctx context.Context) KeyVaultKeyReferenceSourceVaultOutput {
	return o
}

func (o KeyVaultKeyReferenceSourceVaultOutput) ToKeyVaultKeyReferenceSourceVaultPtrOutput() KeyVaultKeyReferenceSourceVaultPtrOutput {
	return o.ToKeyVaultKeyReferenceSourceVaultPtrOutputWithContext(context.Background())
}

func (o KeyVaultKeyReferenceSourceVaultOutput) ToKeyVaultKeyReferenceSourceVaultPtrOutputWithContext(ctx context.Context) KeyVaultKeyReferenceSourceVaultPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v KeyVaultKeyReferenceSourceVault) *KeyVaultKeyReferenceSourceVault {
		return &v
	}).(KeyVaultKeyReferenceSourceVaultPtrOutput)
}

// Resource Id.
func (o KeyVaultKeyReferenceSourceVaultOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KeyVaultKeyReferenceSourceVault) *string { return v.Id }).(pulumi.StringPtrOutput)
}

type KeyVaultKeyReferenceSourceVaultPtrOutput struct{ *pulumi.OutputState }

func (KeyVaultKeyReferenceSourceVaultPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KeyVaultKeyReferenceSourceVault)(nil)).Elem()
}

func (o KeyVaultKeyReferenceSourceVaultPtrOutput) ToKeyVaultKeyReferenceSourceVaultPtrOutput() KeyVaultKeyReferenceSourceVaultPtrOutput {
	return o
}

func (o KeyVaultKeyReferenceSourceVaultPtrOutput) ToKeyVaultKeyReferenceSourceVaultPtrOutputWithContext(ctx context.Context) KeyVaultKeyReferenceSourceVaultPtrOutput {
	return o
}

func (o KeyVaultKeyReferenceSourceVaultPtrOutput) Elem() KeyVaultKeyReferenceSourceVaultOutput {
	return o.ApplyT(func(v *KeyVaultKeyReferenceSourceVault) KeyVaultKeyReferenceSourceVault {
		if v != nil {
			return *v
		}
		var ret KeyVaultKeyReferenceSourceVault
		return ret
	}).(KeyVaultKeyReferenceSourceVaultOutput)
}

// Resource Id.
func (o KeyVaultKeyReferenceSourceVaultPtrOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KeyVaultKeyReferenceSourceVault) *string {
		if v == nil {
			return nil
		}
		return v.Id
	}).(pulumi.StringPtrOutput)
}

// A namespace junction.
type NamespaceJunction struct {
	// Namespace path on a Cache for a Storage Target.
	NamespacePath *string `pulumi:"namespacePath"`
	// Name of the access policy applied to this junction.
	NfsAccessPolicy *string `pulumi:"nfsAccessPolicy"`
	// NFS export where targetPath exists.
	NfsExport *string `pulumi:"nfsExport"`
	// Path in Storage Target to which namespacePath points.
	TargetPath *string `pulumi:"targetPath"`
}

// Defaults sets the appropriate defaults for NamespaceJunction
func (val *NamespaceJunction) Defaults() *NamespaceJunction {
	if val == nil {
		return nil
	}
	tmp := *val
	if isZero(tmp.NfsAccessPolicy) {
		nfsAccessPolicy_ := "default"
		tmp.NfsAccessPolicy = &nfsAccessPolicy_
	}
	return &tmp
}

// NamespaceJunctionInput is an input type that accepts NamespaceJunctionArgs and NamespaceJunctionOutput values.
// You can construct a concrete instance of `NamespaceJunctionInput` via:
//
//	NamespaceJunctionArgs{...}
type NamespaceJunctionInput interface {
	pulumi.Input

	ToNamespaceJunctionOutput() NamespaceJunctionOutput
	ToNamespaceJunctionOutputWithContext(context.Context) NamespaceJunctionOutput
}

// A namespace junction.
type NamespaceJunctionArgs struct {
	// Namespace path on a Cache for a Storage Target.
	NamespacePath pulumi.StringPtrInput `pulumi:"namespacePath"`
	// Name of the access policy applied to this junction.
	NfsAccessPolicy pulumi.StringPtrInput `pulumi:"nfsAccessPolicy"`
	// NFS export where targetPath exists.
	NfsExport pulumi.StringPtrInput `pulumi:"nfsExport"`
	// Path in Storage Target to which namespacePath points.
	TargetPath pulumi.StringPtrInput `pulumi:"targetPath"`
}

// Defaults sets the appropriate defaults for NamespaceJunctionArgs
func (val *NamespaceJunctionArgs) Defaults() *NamespaceJunctionArgs {
	if val == nil {
		return nil
	}
	tmp := *val
	if isZero(tmp.NfsAccessPolicy) {
		tmp.NfsAccessPolicy = pulumi.StringPtr("default")
	}
	return &tmp
}
func (NamespaceJunctionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NamespaceJunction)(nil)).Elem()
}

func (i NamespaceJunctionArgs) ToNamespaceJunctionOutput() NamespaceJunctionOutput {
	return i.ToNamespaceJunctionOutputWithContext(context.Background())
}

func (i NamespaceJunctionArgs) ToNamespaceJunctionOutputWithContext(ctx context.Context) NamespaceJunctionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NamespaceJunctionOutput)
}

// NamespaceJunctionArrayInput is an input type that accepts NamespaceJunctionArray and NamespaceJunctionArrayOutput values.
// You can construct a concrete instance of `NamespaceJunctionArrayInput` via:
//
//	NamespaceJunctionArray{ NamespaceJunctionArgs{...} }
type NamespaceJunctionArrayInput interface {
	pulumi.Input

	ToNamespaceJunctionArrayOutput() NamespaceJunctionArrayOutput
	ToNamespaceJunctionArrayOutputWithContext(context.Context) NamespaceJunctionArrayOutput
}

type NamespaceJunctionArray []NamespaceJunctionInput

func (NamespaceJunctionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NamespaceJunction)(nil)).Elem()
}

func (i NamespaceJunctionArray) ToNamespaceJunctionArrayOutput() NamespaceJunctionArrayOutput {
	return i.ToNamespaceJunctionArrayOutputWithContext(context.Background())
}

func (i NamespaceJunctionArray) ToNamespaceJunctionArrayOutputWithContext(ctx context.Context) NamespaceJunctionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NamespaceJunctionArrayOutput)
}

// A namespace junction.
type NamespaceJunctionOutput struct{ *pulumi.OutputState }

func (NamespaceJunctionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NamespaceJunction)(nil)).Elem()
}

func (o NamespaceJunctionOutput) ToNamespaceJunctionOutput() NamespaceJunctionOutput {
	return o
}

func (o NamespaceJunctionOutput) ToNamespaceJunctionOutputWithContext(ctx context.Context) NamespaceJunctionOutput {
	return o
}

// Namespace path on a Cache for a Storage Target.
func (o NamespaceJunctionOutput) NamespacePath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NamespaceJunction) *string { return v.NamespacePath }).(pulumi.StringPtrOutput)
}

// Name of the access policy applied to this junction.
func (o NamespaceJunctionOutput) NfsAccessPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NamespaceJunction) *string { return v.NfsAccessPolicy }).(pulumi.StringPtrOutput)
}

// NFS export where targetPath exists.
func (o NamespaceJunctionOutput) NfsExport() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NamespaceJunction) *string { return v.NfsExport }).(pulumi.StringPtrOutput)
}

// Path in Storage Target to which namespacePath points.
func (o NamespaceJunctionOutput) TargetPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NamespaceJunction) *string { return v.TargetPath }).(pulumi.StringPtrOutput)
}

type NamespaceJunctionArrayOutput struct{ *pulumi.OutputState }

func (NamespaceJunctionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NamespaceJunction)(nil)).Elem()
}

func (o NamespaceJunctionArrayOutput) ToNamespaceJunctionArrayOutput() NamespaceJunctionArrayOutput {
	return o
}

func (o NamespaceJunctionArrayOutput) ToNamespaceJunctionArrayOutputWithContext(ctx context.Context) NamespaceJunctionArrayOutput {
	return o
}

func (o NamespaceJunctionArrayOutput) Index(i pulumi.IntInput) NamespaceJunctionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) NamespaceJunction {
		return vs[0].([]NamespaceJunction)[vs[1].(int)]
	}).(NamespaceJunctionOutput)
}

// A namespace junction.
type NamespaceJunctionResponse struct {
	// Namespace path on a Cache for a Storage Target.
	NamespacePath *string `pulumi:"namespacePath"`
	// Name of the access policy applied to this junction.
	NfsAccessPolicy *string `pulumi:"nfsAccessPolicy"`
	// NFS export where targetPath exists.
	NfsExport *string `pulumi:"nfsExport"`
	// Path in Storage Target to which namespacePath points.
	TargetPath *string `pulumi:"targetPath"`
}

// Defaults sets the appropriate defaults for NamespaceJunctionResponse
func (val *NamespaceJunctionResponse) Defaults() *NamespaceJunctionResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if isZero(tmp.NfsAccessPolicy) {
		nfsAccessPolicy_ := "default"
		tmp.NfsAccessPolicy = &nfsAccessPolicy_
	}
	return &tmp
}

// A namespace junction.
type NamespaceJunctionResponseOutput struct{ *pulumi.OutputState }

func (NamespaceJunctionResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NamespaceJunctionResponse)(nil)).Elem()
}

func (o NamespaceJunctionResponseOutput) ToNamespaceJunctionResponseOutput() NamespaceJunctionResponseOutput {
	return o
}

func (o NamespaceJunctionResponseOutput) ToNamespaceJunctionResponseOutputWithContext(ctx context.Context) NamespaceJunctionResponseOutput {
	return o
}

// Namespace path on a Cache for a Storage Target.
func (o NamespaceJunctionResponseOutput) NamespacePath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NamespaceJunctionResponse) *string { return v.NamespacePath }).(pulumi.StringPtrOutput)
}

// Name of the access policy applied to this junction.
func (o NamespaceJunctionResponseOutput) NfsAccessPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NamespaceJunctionResponse) *string { return v.NfsAccessPolicy }).(pulumi.StringPtrOutput)
}

// NFS export where targetPath exists.
func (o NamespaceJunctionResponseOutput) NfsExport() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NamespaceJunctionResponse) *string { return v.NfsExport }).(pulumi.StringPtrOutput)
}

// Path in Storage Target to which namespacePath points.
func (o NamespaceJunctionResponseOutput) TargetPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NamespaceJunctionResponse) *string { return v.TargetPath }).(pulumi.StringPtrOutput)
}

type NamespaceJunctionResponseArrayOutput struct{ *pulumi.OutputState }

func (NamespaceJunctionResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NamespaceJunctionResponse)(nil)).Elem()
}

func (o NamespaceJunctionResponseArrayOutput) ToNamespaceJunctionResponseArrayOutput() NamespaceJunctionResponseArrayOutput {
	return o
}

func (o NamespaceJunctionResponseArrayOutput) ToNamespaceJunctionResponseArrayOutputWithContext(ctx context.Context) NamespaceJunctionResponseArrayOutput {
	return o
}

func (o NamespaceJunctionResponseArrayOutput) Index(i pulumi.IntInput) NamespaceJunctionResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) NamespaceJunctionResponse {
		return vs[0].([]NamespaceJunctionResponse)[vs[1].(int)]
	}).(NamespaceJunctionResponseOutput)
}

// Properties pertaining to the Nfs3Target
type Nfs3Target struct {
	// IP address or host name of an NFSv3 host (e.g., 10.0.44.44).
	Target *string `pulumi:"target"`
	// Identifies the StorageCache usage model to be used for this storage target.
	UsageModel *string `pulumi:"usageModel"`
}

// Nfs3TargetInput is an input type that accepts Nfs3TargetArgs and Nfs3TargetOutput values.
// You can construct a concrete instance of `Nfs3TargetInput` via:
//
//	Nfs3TargetArgs{...}
type Nfs3TargetInput interface {
	pulumi.Input

	ToNfs3TargetOutput() Nfs3TargetOutput
	ToNfs3TargetOutputWithContext(context.Context) Nfs3TargetOutput
}

// Properties pertaining to the Nfs3Target
type Nfs3TargetArgs struct {
	// IP address or host name of an NFSv3 host (e.g., 10.0.44.44).
	Target pulumi.StringPtrInput `pulumi:"target"`
	// Identifies the StorageCache usage model to be used for this storage target.
	UsageModel pulumi.StringPtrInput `pulumi:"usageModel"`
}

func (Nfs3TargetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Nfs3Target)(nil)).Elem()
}

func (i Nfs3TargetArgs) ToNfs3TargetOutput() Nfs3TargetOutput {
	return i.ToNfs3TargetOutputWithContext(context.Background())
}

func (i Nfs3TargetArgs) ToNfs3TargetOutputWithContext(ctx context.Context) Nfs3TargetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(Nfs3TargetOutput)
}

func (i Nfs3TargetArgs) ToNfs3TargetPtrOutput() Nfs3TargetPtrOutput {
	return i.ToNfs3TargetPtrOutputWithContext(context.Background())
}

func (i Nfs3TargetArgs) ToNfs3TargetPtrOutputWithContext(ctx context.Context) Nfs3TargetPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(Nfs3TargetOutput).ToNfs3TargetPtrOutputWithContext(ctx)
}

// Nfs3TargetPtrInput is an input type that accepts Nfs3TargetArgs, Nfs3TargetPtr and Nfs3TargetPtrOutput values.
// You can construct a concrete instance of `Nfs3TargetPtrInput` via:
//
//	        Nfs3TargetArgs{...}
//
//	or:
//
//	        nil
type Nfs3TargetPtrInput interface {
	pulumi.Input

	ToNfs3TargetPtrOutput() Nfs3TargetPtrOutput
	ToNfs3TargetPtrOutputWithContext(context.Context) Nfs3TargetPtrOutput
}

type nfs3TargetPtrType Nfs3TargetArgs

func Nfs3TargetPtr(v *Nfs3TargetArgs) Nfs3TargetPtrInput {
	return (*nfs3TargetPtrType)(v)
}

func (*nfs3TargetPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Nfs3Target)(nil)).Elem()
}

func (i *nfs3TargetPtrType) ToNfs3TargetPtrOutput() Nfs3TargetPtrOutput {
	return i.ToNfs3TargetPtrOutputWithContext(context.Background())
}

func (i *nfs3TargetPtrType) ToNfs3TargetPtrOutputWithContext(ctx context.Context) Nfs3TargetPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(Nfs3TargetPtrOutput)
}

// Properties pertaining to the Nfs3Target
type Nfs3TargetOutput struct{ *pulumi.OutputState }

func (Nfs3TargetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Nfs3Target)(nil)).Elem()
}

func (o Nfs3TargetOutput) ToNfs3TargetOutput() Nfs3TargetOutput {
	return o
}

func (o Nfs3TargetOutput) ToNfs3TargetOutputWithContext(ctx context.Context) Nfs3TargetOutput {
	return o
}

func (o Nfs3TargetOutput) ToNfs3TargetPtrOutput() Nfs3TargetPtrOutput {
	return o.ToNfs3TargetPtrOutputWithContext(context.Background())
}

func (o Nfs3TargetOutput) ToNfs3TargetPtrOutputWithContext(ctx context.Context) Nfs3TargetPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v Nfs3Target) *Nfs3Target {
		return &v
	}).(Nfs3TargetPtrOutput)
}

// IP address or host name of an NFSv3 host (e.g., 10.0.44.44).
func (o Nfs3TargetOutput) Target() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Nfs3Target) *string { return v.Target }).(pulumi.StringPtrOutput)
}

// Identifies the StorageCache usage model to be used for this storage target.
func (o Nfs3TargetOutput) UsageModel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Nfs3Target) *string { return v.UsageModel }).(pulumi.StringPtrOutput)
}

type Nfs3TargetPtrOutput struct{ *pulumi.OutputState }

func (Nfs3TargetPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Nfs3Target)(nil)).Elem()
}

func (o Nfs3TargetPtrOutput) ToNfs3TargetPtrOutput() Nfs3TargetPtrOutput {
	return o
}

func (o Nfs3TargetPtrOutput) ToNfs3TargetPtrOutputWithContext(ctx context.Context) Nfs3TargetPtrOutput {
	return o
}

func (o Nfs3TargetPtrOutput) Elem() Nfs3TargetOutput {
	return o.ApplyT(func(v *Nfs3Target) Nfs3Target {
		if v != nil {
			return *v
		}
		var ret Nfs3Target
		return ret
	}).(Nfs3TargetOutput)
}

// IP address or host name of an NFSv3 host (e.g., 10.0.44.44).
func (o Nfs3TargetPtrOutput) Target() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Nfs3Target) *string {
		if v == nil {
			return nil
		}
		return v.Target
	}).(pulumi.StringPtrOutput)
}

// Identifies the StorageCache usage model to be used for this storage target.
func (o Nfs3TargetPtrOutput) UsageModel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Nfs3Target) *string {
		if v == nil {
			return nil
		}
		return v.UsageModel
	}).(pulumi.StringPtrOutput)
}

// Properties pertaining to the Nfs3Target
type Nfs3TargetResponse struct {
	// IP address or host name of an NFSv3 host (e.g., 10.0.44.44).
	Target *string `pulumi:"target"`
	// Identifies the StorageCache usage model to be used for this storage target.
	UsageModel *string `pulumi:"usageModel"`
}

// Properties pertaining to the Nfs3Target
type Nfs3TargetResponseOutput struct{ *pulumi.OutputState }

func (Nfs3TargetResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Nfs3TargetResponse)(nil)).Elem()
}

func (o Nfs3TargetResponseOutput) ToNfs3TargetResponseOutput() Nfs3TargetResponseOutput {
	return o
}

func (o Nfs3TargetResponseOutput) ToNfs3TargetResponseOutputWithContext(ctx context.Context) Nfs3TargetResponseOutput {
	return o
}

// IP address or host name of an NFSv3 host (e.g., 10.0.44.44).
func (o Nfs3TargetResponseOutput) Target() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Nfs3TargetResponse) *string { return v.Target }).(pulumi.StringPtrOutput)
}

// Identifies the StorageCache usage model to be used for this storage target.
func (o Nfs3TargetResponseOutput) UsageModel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Nfs3TargetResponse) *string { return v.UsageModel }).(pulumi.StringPtrOutput)
}

type Nfs3TargetResponsePtrOutput struct{ *pulumi.OutputState }

func (Nfs3TargetResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Nfs3TargetResponse)(nil)).Elem()
}

func (o Nfs3TargetResponsePtrOutput) ToNfs3TargetResponsePtrOutput() Nfs3TargetResponsePtrOutput {
	return o
}

func (o Nfs3TargetResponsePtrOutput) ToNfs3TargetResponsePtrOutputWithContext(ctx context.Context) Nfs3TargetResponsePtrOutput {
	return o
}

func (o Nfs3TargetResponsePtrOutput) Elem() Nfs3TargetResponseOutput {
	return o.ApplyT(func(v *Nfs3TargetResponse) Nfs3TargetResponse {
		if v != nil {
			return *v
		}
		var ret Nfs3TargetResponse
		return ret
	}).(Nfs3TargetResponseOutput)
}

// IP address or host name of an NFSv3 host (e.g., 10.0.44.44).
func (o Nfs3TargetResponsePtrOutput) Target() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Nfs3TargetResponse) *string {
		if v == nil {
			return nil
		}
		return v.Target
	}).(pulumi.StringPtrOutput)
}

// Identifies the StorageCache usage model to be used for this storage target.
func (o Nfs3TargetResponsePtrOutput) UsageModel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Nfs3TargetResponse) *string {
		if v == nil {
			return nil
		}
		return v.UsageModel
	}).(pulumi.StringPtrOutput)
}

// A set of rules describing access policies applied to NFSv3 clients of the cache.
type NfsAccessPolicy struct {
	// The set of rules describing client accesses allowed under this policy.
	AccessRules []NfsAccessRule `pulumi:"accessRules"`
	// Name identifying this policy. Access Policy names are not case sensitive.
	Name string `pulumi:"name"`
}

// NfsAccessPolicyInput is an input type that accepts NfsAccessPolicyArgs and NfsAccessPolicyOutput values.
// You can construct a concrete instance of `NfsAccessPolicyInput` via:
//
//	NfsAccessPolicyArgs{...}
type NfsAccessPolicyInput interface {
	pulumi.Input

	ToNfsAccessPolicyOutput() NfsAccessPolicyOutput
	ToNfsAccessPolicyOutputWithContext(context.Context) NfsAccessPolicyOutput
}

// A set of rules describing access policies applied to NFSv3 clients of the cache.
type NfsAccessPolicyArgs struct {
	// The set of rules describing client accesses allowed under this policy.
	AccessRules NfsAccessRuleArrayInput `pulumi:"accessRules"`
	// Name identifying this policy. Access Policy names are not case sensitive.
	Name pulumi.StringInput `pulumi:"name"`
}

func (NfsAccessPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NfsAccessPolicy)(nil)).Elem()
}

func (i NfsAccessPolicyArgs) ToNfsAccessPolicyOutput() NfsAccessPolicyOutput {
	return i.ToNfsAccessPolicyOutputWithContext(context.Background())
}

func (i NfsAccessPolicyArgs) ToNfsAccessPolicyOutputWithContext(ctx context.Context) NfsAccessPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NfsAccessPolicyOutput)
}

// NfsAccessPolicyArrayInput is an input type that accepts NfsAccessPolicyArray and NfsAccessPolicyArrayOutput values.
// You can construct a concrete instance of `NfsAccessPolicyArrayInput` via:
//
//	NfsAccessPolicyArray{ NfsAccessPolicyArgs{...} }
type NfsAccessPolicyArrayInput interface {
	pulumi.Input

	ToNfsAccessPolicyArrayOutput() NfsAccessPolicyArrayOutput
	ToNfsAccessPolicyArrayOutputWithContext(context.Context) NfsAccessPolicyArrayOutput
}

type NfsAccessPolicyArray []NfsAccessPolicyInput

func (NfsAccessPolicyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NfsAccessPolicy)(nil)).Elem()
}

func (i NfsAccessPolicyArray) ToNfsAccessPolicyArrayOutput() NfsAccessPolicyArrayOutput {
	return i.ToNfsAccessPolicyArrayOutputWithContext(context.Background())
}

func (i NfsAccessPolicyArray) ToNfsAccessPolicyArrayOutputWithContext(ctx context.Context) NfsAccessPolicyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NfsAccessPolicyArrayOutput)
}

// A set of rules describing access policies applied to NFSv3 clients of the cache.
type NfsAccessPolicyOutput struct{ *pulumi.OutputState }

func (NfsAccessPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NfsAccessPolicy)(nil)).Elem()
}

func (o NfsAccessPolicyOutput) ToNfsAccessPolicyOutput() NfsAccessPolicyOutput {
	return o
}

func (o NfsAccessPolicyOutput) ToNfsAccessPolicyOutputWithContext(ctx context.Context) NfsAccessPolicyOutput {
	return o
}

// The set of rules describing client accesses allowed under this policy.
func (o NfsAccessPolicyOutput) AccessRules() NfsAccessRuleArrayOutput {
	return o.ApplyT(func(v NfsAccessPolicy) []NfsAccessRule { return v.AccessRules }).(NfsAccessRuleArrayOutput)
}

// Name identifying this policy. Access Policy names are not case sensitive.
func (o NfsAccessPolicyOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v NfsAccessPolicy) string { return v.Name }).(pulumi.StringOutput)
}

type NfsAccessPolicyArrayOutput struct{ *pulumi.OutputState }

func (NfsAccessPolicyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NfsAccessPolicy)(nil)).Elem()
}

func (o NfsAccessPolicyArrayOutput) ToNfsAccessPolicyArrayOutput() NfsAccessPolicyArrayOutput {
	return o
}

func (o NfsAccessPolicyArrayOutput) ToNfsAccessPolicyArrayOutputWithContext(ctx context.Context) NfsAccessPolicyArrayOutput {
	return o
}

func (o NfsAccessPolicyArrayOutput) Index(i pulumi.IntInput) NfsAccessPolicyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) NfsAccessPolicy {
		return vs[0].([]NfsAccessPolicy)[vs[1].(int)]
	}).(NfsAccessPolicyOutput)
}

// A set of rules describing access policies applied to NFSv3 clients of the cache.
type NfsAccessPolicyResponse struct {
	// The set of rules describing client accesses allowed under this policy.
	AccessRules []NfsAccessRuleResponse `pulumi:"accessRules"`
	// Name identifying this policy. Access Policy names are not case sensitive.
	Name string `pulumi:"name"`
}

// A set of rules describing access policies applied to NFSv3 clients of the cache.
type NfsAccessPolicyResponseOutput struct{ *pulumi.OutputState }

func (NfsAccessPolicyResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NfsAccessPolicyResponse)(nil)).Elem()
}

func (o NfsAccessPolicyResponseOutput) ToNfsAccessPolicyResponseOutput() NfsAccessPolicyResponseOutput {
	return o
}

func (o NfsAccessPolicyResponseOutput) ToNfsAccessPolicyResponseOutputWithContext(ctx context.Context) NfsAccessPolicyResponseOutput {
	return o
}

// The set of rules describing client accesses allowed under this policy.
func (o NfsAccessPolicyResponseOutput) AccessRules() NfsAccessRuleResponseArrayOutput {
	return o.ApplyT(func(v NfsAccessPolicyResponse) []NfsAccessRuleResponse { return v.AccessRules }).(NfsAccessRuleResponseArrayOutput)
}

// Name identifying this policy. Access Policy names are not case sensitive.
func (o NfsAccessPolicyResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v NfsAccessPolicyResponse) string { return v.Name }).(pulumi.StringOutput)
}

type NfsAccessPolicyResponseArrayOutput struct{ *pulumi.OutputState }

func (NfsAccessPolicyResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NfsAccessPolicyResponse)(nil)).Elem()
}

func (o NfsAccessPolicyResponseArrayOutput) ToNfsAccessPolicyResponseArrayOutput() NfsAccessPolicyResponseArrayOutput {
	return o
}

func (o NfsAccessPolicyResponseArrayOutput) ToNfsAccessPolicyResponseArrayOutputWithContext(ctx context.Context) NfsAccessPolicyResponseArrayOutput {
	return o
}

func (o NfsAccessPolicyResponseArrayOutput) Index(i pulumi.IntInput) NfsAccessPolicyResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) NfsAccessPolicyResponse {
		return vs[0].([]NfsAccessPolicyResponse)[vs[1].(int)]
	}).(NfsAccessPolicyResponseOutput)
}

// Rule to place restrictions on portions of the cache namespace being presented to clients.
type NfsAccessRule struct {
	// Access allowed by this rule.
	Access string `pulumi:"access"`
	// GID value that replaces 0 when rootSquash is true. This will use the value of anonymousUID if not provided.
	AnonymousGID *string `pulumi:"anonymousGID"`
	// UID value that replaces 0 when rootSquash is true. 65534 will be used if not provided.
	AnonymousUID *string `pulumi:"anonymousUID"`
	// Filter applied to the scope for this rule. The filter's format depends on its scope. 'default' scope matches all clients and has no filter value. 'network' scope takes a filter in CIDR format (for example, 10.99.1.0/24). 'host' takes an IP address or fully qualified domain name as filter. If a client does not match any filter rule and there is no default rule, access is denied.
	Filter *string `pulumi:"filter"`
	// Map root accesses to anonymousUID and anonymousGID.
	RootSquash *bool `pulumi:"rootSquash"`
	// Scope for this rule. The scope and filter determine which clients match the rule.
	Scope string `pulumi:"scope"`
	// For the default policy, allow access to subdirectories under the root export. If this is set to no, clients can only mount the path '/'. If set to yes, clients can mount a deeper path, like '/a/b'.
	SubmountAccess *bool `pulumi:"submountAccess"`
	// Allow SUID semantics.
	Suid *bool `pulumi:"suid"`
}

// NfsAccessRuleInput is an input type that accepts NfsAccessRuleArgs and NfsAccessRuleOutput values.
// You can construct a concrete instance of `NfsAccessRuleInput` via:
//
//	NfsAccessRuleArgs{...}
type NfsAccessRuleInput interface {
	pulumi.Input

	ToNfsAccessRuleOutput() NfsAccessRuleOutput
	ToNfsAccessRuleOutputWithContext(context.Context) NfsAccessRuleOutput
}

// Rule to place restrictions on portions of the cache namespace being presented to clients.
type NfsAccessRuleArgs struct {
	// Access allowed by this rule.
	Access pulumi.StringInput `pulumi:"access"`
	// GID value that replaces 0 when rootSquash is true. This will use the value of anonymousUID if not provided.
	AnonymousGID pulumi.StringPtrInput `pulumi:"anonymousGID"`
	// UID value that replaces 0 when rootSquash is true. 65534 will be used if not provided.
	AnonymousUID pulumi.StringPtrInput `pulumi:"anonymousUID"`
	// Filter applied to the scope for this rule. The filter's format depends on its scope. 'default' scope matches all clients and has no filter value. 'network' scope takes a filter in CIDR format (for example, 10.99.1.0/24). 'host' takes an IP address or fully qualified domain name as filter. If a client does not match any filter rule and there is no default rule, access is denied.
	Filter pulumi.StringPtrInput `pulumi:"filter"`
	// Map root accesses to anonymousUID and anonymousGID.
	RootSquash pulumi.BoolPtrInput `pulumi:"rootSquash"`
	// Scope for this rule. The scope and filter determine which clients match the rule.
	Scope pulumi.StringInput `pulumi:"scope"`
	// For the default policy, allow access to subdirectories under the root export. If this is set to no, clients can only mount the path '/'. If set to yes, clients can mount a deeper path, like '/a/b'.
	SubmountAccess pulumi.BoolPtrInput `pulumi:"submountAccess"`
	// Allow SUID semantics.
	Suid pulumi.BoolPtrInput `pulumi:"suid"`
}

func (NfsAccessRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NfsAccessRule)(nil)).Elem()
}

func (i NfsAccessRuleArgs) ToNfsAccessRuleOutput() NfsAccessRuleOutput {
	return i.ToNfsAccessRuleOutputWithContext(context.Background())
}

func (i NfsAccessRuleArgs) ToNfsAccessRuleOutputWithContext(ctx context.Context) NfsAccessRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NfsAccessRuleOutput)
}

// NfsAccessRuleArrayInput is an input type that accepts NfsAccessRuleArray and NfsAccessRuleArrayOutput values.
// You can construct a concrete instance of `NfsAccessRuleArrayInput` via:
//
//	NfsAccessRuleArray{ NfsAccessRuleArgs{...} }
type NfsAccessRuleArrayInput interface {
	pulumi.Input

	ToNfsAccessRuleArrayOutput() NfsAccessRuleArrayOutput
	ToNfsAccessRuleArrayOutputWithContext(context.Context) NfsAccessRuleArrayOutput
}

type NfsAccessRuleArray []NfsAccessRuleInput

func (NfsAccessRuleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NfsAccessRule)(nil)).Elem()
}

func (i NfsAccessRuleArray) ToNfsAccessRuleArrayOutput() NfsAccessRuleArrayOutput {
	return i.ToNfsAccessRuleArrayOutputWithContext(context.Background())
}

func (i NfsAccessRuleArray) ToNfsAccessRuleArrayOutputWithContext(ctx context.Context) NfsAccessRuleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NfsAccessRuleArrayOutput)
}

// Rule to place restrictions on portions of the cache namespace being presented to clients.
type NfsAccessRuleOutput struct{ *pulumi.OutputState }

func (NfsAccessRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NfsAccessRule)(nil)).Elem()
}

func (o NfsAccessRuleOutput) ToNfsAccessRuleOutput() NfsAccessRuleOutput {
	return o
}

func (o NfsAccessRuleOutput) ToNfsAccessRuleOutputWithContext(ctx context.Context) NfsAccessRuleOutput {
	return o
}

// Access allowed by this rule.
func (o NfsAccessRuleOutput) Access() pulumi.StringOutput {
	return o.ApplyT(func(v NfsAccessRule) string { return v.Access }).(pulumi.StringOutput)
}

// GID value that replaces 0 when rootSquash is true. This will use the value of anonymousUID if not provided.
func (o NfsAccessRuleOutput) AnonymousGID() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NfsAccessRule) *string { return v.AnonymousGID }).(pulumi.StringPtrOutput)
}

// UID value that replaces 0 when rootSquash is true. 65534 will be used if not provided.
func (o NfsAccessRuleOutput) AnonymousUID() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NfsAccessRule) *string { return v.AnonymousUID }).(pulumi.StringPtrOutput)
}

// Filter applied to the scope for this rule. The filter's format depends on its scope. 'default' scope matches all clients and has no filter value. 'network' scope takes a filter in CIDR format (for example, 10.99.1.0/24). 'host' takes an IP address or fully qualified domain name as filter. If a client does not match any filter rule and there is no default rule, access is denied.
func (o NfsAccessRuleOutput) Filter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NfsAccessRule) *string { return v.Filter }).(pulumi.StringPtrOutput)
}

// Map root accesses to anonymousUID and anonymousGID.
func (o NfsAccessRuleOutput) RootSquash() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v NfsAccessRule) *bool { return v.RootSquash }).(pulumi.BoolPtrOutput)
}

// Scope for this rule. The scope and filter determine which clients match the rule.
func (o NfsAccessRuleOutput) Scope() pulumi.StringOutput {
	return o.ApplyT(func(v NfsAccessRule) string { return v.Scope }).(pulumi.StringOutput)
}

// For the default policy, allow access to subdirectories under the root export. If this is set to no, clients can only mount the path '/'. If set to yes, clients can mount a deeper path, like '/a/b'.
func (o NfsAccessRuleOutput) SubmountAccess() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v NfsAccessRule) *bool { return v.SubmountAccess }).(pulumi.BoolPtrOutput)
}

// Allow SUID semantics.
func (o NfsAccessRuleOutput) Suid() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v NfsAccessRule) *bool { return v.Suid }).(pulumi.BoolPtrOutput)
}

type NfsAccessRuleArrayOutput struct{ *pulumi.OutputState }

func (NfsAccessRuleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NfsAccessRule)(nil)).Elem()
}

func (o NfsAccessRuleArrayOutput) ToNfsAccessRuleArrayOutput() NfsAccessRuleArrayOutput {
	return o
}

func (o NfsAccessRuleArrayOutput) ToNfsAccessRuleArrayOutputWithContext(ctx context.Context) NfsAccessRuleArrayOutput {
	return o
}

func (o NfsAccessRuleArrayOutput) Index(i pulumi.IntInput) NfsAccessRuleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) NfsAccessRule {
		return vs[0].([]NfsAccessRule)[vs[1].(int)]
	}).(NfsAccessRuleOutput)
}

// Rule to place restrictions on portions of the cache namespace being presented to clients.
type NfsAccessRuleResponse struct {
	// Access allowed by this rule.
	Access string `pulumi:"access"`
	// GID value that replaces 0 when rootSquash is true. This will use the value of anonymousUID if not provided.
	AnonymousGID *string `pulumi:"anonymousGID"`
	// UID value that replaces 0 when rootSquash is true. 65534 will be used if not provided.
	AnonymousUID *string `pulumi:"anonymousUID"`
	// Filter applied to the scope for this rule. The filter's format depends on its scope. 'default' scope matches all clients and has no filter value. 'network' scope takes a filter in CIDR format (for example, 10.99.1.0/24). 'host' takes an IP address or fully qualified domain name as filter. If a client does not match any filter rule and there is no default rule, access is denied.
	Filter *string `pulumi:"filter"`
	// Map root accesses to anonymousUID and anonymousGID.
	RootSquash *bool `pulumi:"rootSquash"`
	// Scope for this rule. The scope and filter determine which clients match the rule.
	Scope string `pulumi:"scope"`
	// For the default policy, allow access to subdirectories under the root export. If this is set to no, clients can only mount the path '/'. If set to yes, clients can mount a deeper path, like '/a/b'.
	SubmountAccess *bool `pulumi:"submountAccess"`
	// Allow SUID semantics.
	Suid *bool `pulumi:"suid"`
}

// Rule to place restrictions on portions of the cache namespace being presented to clients.
type NfsAccessRuleResponseOutput struct{ *pulumi.OutputState }

func (NfsAccessRuleResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NfsAccessRuleResponse)(nil)).Elem()
}

func (o NfsAccessRuleResponseOutput) ToNfsAccessRuleResponseOutput() NfsAccessRuleResponseOutput {
	return o
}

func (o NfsAccessRuleResponseOutput) ToNfsAccessRuleResponseOutputWithContext(ctx context.Context) NfsAccessRuleResponseOutput {
	return o
}

// Access allowed by this rule.
func (o NfsAccessRuleResponseOutput) Access() pulumi.StringOutput {
	return o.ApplyT(func(v NfsAccessRuleResponse) string { return v.Access }).(pulumi.StringOutput)
}

// GID value that replaces 0 when rootSquash is true. This will use the value of anonymousUID if not provided.
func (o NfsAccessRuleResponseOutput) AnonymousGID() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NfsAccessRuleResponse) *string { return v.AnonymousGID }).(pulumi.StringPtrOutput)
}

// UID value that replaces 0 when rootSquash is true. 65534 will be used if not provided.
func (o NfsAccessRuleResponseOutput) AnonymousUID() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NfsAccessRuleResponse) *string { return v.AnonymousUID }).(pulumi.StringPtrOutput)
}

// Filter applied to the scope for this rule. The filter's format depends on its scope. 'default' scope matches all clients and has no filter value. 'network' scope takes a filter in CIDR format (for example, 10.99.1.0/24). 'host' takes an IP address or fully qualified domain name as filter. If a client does not match any filter rule and there is no default rule, access is denied.
func (o NfsAccessRuleResponseOutput) Filter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NfsAccessRuleResponse) *string { return v.Filter }).(pulumi.StringPtrOutput)
}

// Map root accesses to anonymousUID and anonymousGID.
func (o NfsAccessRuleResponseOutput) RootSquash() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v NfsAccessRuleResponse) *bool { return v.RootSquash }).(pulumi.BoolPtrOutput)
}

// Scope for this rule. The scope and filter determine which clients match the rule.
func (o NfsAccessRuleResponseOutput) Scope() pulumi.StringOutput {
	return o.ApplyT(func(v NfsAccessRuleResponse) string { return v.Scope }).(pulumi.StringOutput)
}

// For the default policy, allow access to subdirectories under the root export. If this is set to no, clients can only mount the path '/'. If set to yes, clients can mount a deeper path, like '/a/b'.
func (o NfsAccessRuleResponseOutput) SubmountAccess() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v NfsAccessRuleResponse) *bool { return v.SubmountAccess }).(pulumi.BoolPtrOutput)
}

// Allow SUID semantics.
func (o NfsAccessRuleResponseOutput) Suid() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v NfsAccessRuleResponse) *bool { return v.Suid }).(pulumi.BoolPtrOutput)
}

type NfsAccessRuleResponseArrayOutput struct{ *pulumi.OutputState }

func (NfsAccessRuleResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NfsAccessRuleResponse)(nil)).Elem()
}

func (o NfsAccessRuleResponseArrayOutput) ToNfsAccessRuleResponseArrayOutput() NfsAccessRuleResponseArrayOutput {
	return o
}

func (o NfsAccessRuleResponseArrayOutput) ToNfsAccessRuleResponseArrayOutputWithContext(ctx context.Context) NfsAccessRuleResponseArrayOutput {
	return o
}

func (o NfsAccessRuleResponseArrayOutput) Index(i pulumi.IntInput) NfsAccessRuleResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) NfsAccessRuleResponse {
		return vs[0].([]NfsAccessRuleResponse)[vs[1].(int)]
	}).(NfsAccessRuleResponseOutput)
}

// Metadata pertaining to creation and last modification of the resource.
type SystemDataResponse struct {
	// The timestamp of resource creation (UTC).
	CreatedAt *string `pulumi:"createdAt"`
	// The identity that created the resource.
	CreatedBy *string `pulumi:"createdBy"`
	// The type of identity that created the resource.
	CreatedByType *string `pulumi:"createdByType"`
	// The timestamp of resource last modification (UTC)
	LastModifiedAt *string `pulumi:"lastModifiedAt"`
	// The identity that last modified the resource.
	LastModifiedBy *string `pulumi:"lastModifiedBy"`
	// The type of identity that last modified the resource.
	LastModifiedByType *string `pulumi:"lastModifiedByType"`
}

// Metadata pertaining to creation and last modification of the resource.
type SystemDataResponseOutput struct{ *pulumi.OutputState }

func (SystemDataResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SystemDataResponse)(nil)).Elem()
}

func (o SystemDataResponseOutput) ToSystemDataResponseOutput() SystemDataResponseOutput {
	return o
}

func (o SystemDataResponseOutput) ToSystemDataResponseOutputWithContext(ctx context.Context) SystemDataResponseOutput {
	return o
}

// The timestamp of resource creation (UTC).
func (o SystemDataResponseOutput) CreatedAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SystemDataResponse) *string { return v.CreatedAt }).(pulumi.StringPtrOutput)
}

// The identity that created the resource.
func (o SystemDataResponseOutput) CreatedBy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SystemDataResponse) *string { return v.CreatedBy }).(pulumi.StringPtrOutput)
}

// The type of identity that created the resource.
func (o SystemDataResponseOutput) CreatedByType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SystemDataResponse) *string { return v.CreatedByType }).(pulumi.StringPtrOutput)
}

// The timestamp of resource last modification (UTC)
func (o SystemDataResponseOutput) LastModifiedAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SystemDataResponse) *string { return v.LastModifiedAt }).(pulumi.StringPtrOutput)
}

// The identity that last modified the resource.
func (o SystemDataResponseOutput) LastModifiedBy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SystemDataResponse) *string { return v.LastModifiedBy }).(pulumi.StringPtrOutput)
}

// The type of identity that last modified the resource.
func (o SystemDataResponseOutput) LastModifiedByType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SystemDataResponse) *string { return v.LastModifiedByType }).(pulumi.StringPtrOutput)
}

// Properties pertaining to the UnknownTarget
type UnknownTarget struct {
	// Dictionary of string->string pairs containing information about the Storage Target.
	Attributes map[string]string `pulumi:"attributes"`
}

// UnknownTargetInput is an input type that accepts UnknownTargetArgs and UnknownTargetOutput values.
// You can construct a concrete instance of `UnknownTargetInput` via:
//
//	UnknownTargetArgs{...}
type UnknownTargetInput interface {
	pulumi.Input

	ToUnknownTargetOutput() UnknownTargetOutput
	ToUnknownTargetOutputWithContext(context.Context) UnknownTargetOutput
}

// Properties pertaining to the UnknownTarget
type UnknownTargetArgs struct {
	// Dictionary of string->string pairs containing information about the Storage Target.
	Attributes pulumi.StringMapInput `pulumi:"attributes"`
}

func (UnknownTargetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*UnknownTarget)(nil)).Elem()
}

func (i UnknownTargetArgs) ToUnknownTargetOutput() UnknownTargetOutput {
	return i.ToUnknownTargetOutputWithContext(context.Background())
}

func (i UnknownTargetArgs) ToUnknownTargetOutputWithContext(ctx context.Context) UnknownTargetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UnknownTargetOutput)
}

func (i UnknownTargetArgs) ToUnknownTargetPtrOutput() UnknownTargetPtrOutput {
	return i.ToUnknownTargetPtrOutputWithContext(context.Background())
}

func (i UnknownTargetArgs) ToUnknownTargetPtrOutputWithContext(ctx context.Context) UnknownTargetPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UnknownTargetOutput).ToUnknownTargetPtrOutputWithContext(ctx)
}

// UnknownTargetPtrInput is an input type that accepts UnknownTargetArgs, UnknownTargetPtr and UnknownTargetPtrOutput values.
// You can construct a concrete instance of `UnknownTargetPtrInput` via:
//
//	        UnknownTargetArgs{...}
//
//	or:
//
//	        nil
type UnknownTargetPtrInput interface {
	pulumi.Input

	ToUnknownTargetPtrOutput() UnknownTargetPtrOutput
	ToUnknownTargetPtrOutputWithContext(context.Context) UnknownTargetPtrOutput
}

type unknownTargetPtrType UnknownTargetArgs

func UnknownTargetPtr(v *UnknownTargetArgs) UnknownTargetPtrInput {
	return (*unknownTargetPtrType)(v)
}

func (*unknownTargetPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**UnknownTarget)(nil)).Elem()
}

func (i *unknownTargetPtrType) ToUnknownTargetPtrOutput() UnknownTargetPtrOutput {
	return i.ToUnknownTargetPtrOutputWithContext(context.Background())
}

func (i *unknownTargetPtrType) ToUnknownTargetPtrOutputWithContext(ctx context.Context) UnknownTargetPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UnknownTargetPtrOutput)
}

// Properties pertaining to the UnknownTarget
type UnknownTargetOutput struct{ *pulumi.OutputState }

func (UnknownTargetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*UnknownTarget)(nil)).Elem()
}

func (o UnknownTargetOutput) ToUnknownTargetOutput() UnknownTargetOutput {
	return o
}

func (o UnknownTargetOutput) ToUnknownTargetOutputWithContext(ctx context.Context) UnknownTargetOutput {
	return o
}

func (o UnknownTargetOutput) ToUnknownTargetPtrOutput() UnknownTargetPtrOutput {
	return o.ToUnknownTargetPtrOutputWithContext(context.Background())
}

func (o UnknownTargetOutput) ToUnknownTargetPtrOutputWithContext(ctx context.Context) UnknownTargetPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v UnknownTarget) *UnknownTarget {
		return &v
	}).(UnknownTargetPtrOutput)
}

// Dictionary of string->string pairs containing information about the Storage Target.
func (o UnknownTargetOutput) Attributes() pulumi.StringMapOutput {
	return o.ApplyT(func(v UnknownTarget) map[string]string { return v.Attributes }).(pulumi.StringMapOutput)
}

type UnknownTargetPtrOutput struct{ *pulumi.OutputState }

func (UnknownTargetPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**UnknownTarget)(nil)).Elem()
}

func (o UnknownTargetPtrOutput) ToUnknownTargetPtrOutput() UnknownTargetPtrOutput {
	return o
}

func (o UnknownTargetPtrOutput) ToUnknownTargetPtrOutputWithContext(ctx context.Context) UnknownTargetPtrOutput {
	return o
}

func (o UnknownTargetPtrOutput) Elem() UnknownTargetOutput {
	return o.ApplyT(func(v *UnknownTarget) UnknownTarget {
		if v != nil {
			return *v
		}
		var ret UnknownTarget
		return ret
	}).(UnknownTargetOutput)
}

// Dictionary of string->string pairs containing information about the Storage Target.
func (o UnknownTargetPtrOutput) Attributes() pulumi.StringMapOutput {
	return o.ApplyT(func(v *UnknownTarget) map[string]string {
		if v == nil {
			return nil
		}
		return v.Attributes
	}).(pulumi.StringMapOutput)
}

// Properties pertaining to the UnknownTarget
type UnknownTargetResponse struct {
	// Dictionary of string->string pairs containing information about the Storage Target.
	Attributes map[string]string `pulumi:"attributes"`
}

// Properties pertaining to the UnknownTarget
type UnknownTargetResponseOutput struct{ *pulumi.OutputState }

func (UnknownTargetResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*UnknownTargetResponse)(nil)).Elem()
}

func (o UnknownTargetResponseOutput) ToUnknownTargetResponseOutput() UnknownTargetResponseOutput {
	return o
}

func (o UnknownTargetResponseOutput) ToUnknownTargetResponseOutputWithContext(ctx context.Context) UnknownTargetResponseOutput {
	return o
}

// Dictionary of string->string pairs containing information about the Storage Target.
func (o UnknownTargetResponseOutput) Attributes() pulumi.StringMapOutput {
	return o.ApplyT(func(v UnknownTargetResponse) map[string]string { return v.Attributes }).(pulumi.StringMapOutput)
}

type UnknownTargetResponsePtrOutput struct{ *pulumi.OutputState }

func (UnknownTargetResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**UnknownTargetResponse)(nil)).Elem()
}

func (o UnknownTargetResponsePtrOutput) ToUnknownTargetResponsePtrOutput() UnknownTargetResponsePtrOutput {
	return o
}

func (o UnknownTargetResponsePtrOutput) ToUnknownTargetResponsePtrOutputWithContext(ctx context.Context) UnknownTargetResponsePtrOutput {
	return o
}

func (o UnknownTargetResponsePtrOutput) Elem() UnknownTargetResponseOutput {
	return o.ApplyT(func(v *UnknownTargetResponse) UnknownTargetResponse {
		if v != nil {
			return *v
		}
		var ret UnknownTargetResponse
		return ret
	}).(UnknownTargetResponseOutput)
}

// Dictionary of string->string pairs containing information about the Storage Target.
func (o UnknownTargetResponsePtrOutput) Attributes() pulumi.StringMapOutput {
	return o.ApplyT(func(v *UnknownTargetResponse) map[string]string {
		if v == nil {
			return nil
		}
		return v.Attributes
	}).(pulumi.StringMapOutput)
}

func init() {
	pulumi.RegisterOutputType(BlobNfsTargetOutput{})
	pulumi.RegisterOutputType(BlobNfsTargetPtrOutput{})
	pulumi.RegisterOutputType(BlobNfsTargetResponseOutput{})
	pulumi.RegisterOutputType(BlobNfsTargetResponsePtrOutput{})
	pulumi.RegisterOutputType(CacheActiveDirectorySettingsOutput{})
	pulumi.RegisterOutputType(CacheActiveDirectorySettingsPtrOutput{})
	pulumi.RegisterOutputType(CacheActiveDirectorySettingsCredentialsOutput{})
	pulumi.RegisterOutputType(CacheActiveDirectorySettingsCredentialsPtrOutput{})
	pulumi.RegisterOutputType(CacheActiveDirectorySettingsResponseOutput{})
	pulumi.RegisterOutputType(CacheActiveDirectorySettingsResponsePtrOutput{})
	pulumi.RegisterOutputType(CacheActiveDirectorySettingsResponseCredentialsOutput{})
	pulumi.RegisterOutputType(CacheActiveDirectorySettingsResponseCredentialsPtrOutput{})
	pulumi.RegisterOutputType(CacheDirectorySettingsOutput{})
	pulumi.RegisterOutputType(CacheDirectorySettingsPtrOutput{})
	pulumi.RegisterOutputType(CacheDirectorySettingsResponseOutput{})
	pulumi.RegisterOutputType(CacheDirectorySettingsResponsePtrOutput{})
	pulumi.RegisterOutputType(CacheEncryptionSettingsOutput{})
	pulumi.RegisterOutputType(CacheEncryptionSettingsPtrOutput{})
	pulumi.RegisterOutputType(CacheEncryptionSettingsResponseOutput{})
	pulumi.RegisterOutputType(CacheEncryptionSettingsResponsePtrOutput{})
	pulumi.RegisterOutputType(CacheHealthResponseOutput{})
	pulumi.RegisterOutputType(CacheIdentityOutput{})
	pulumi.RegisterOutputType(CacheIdentityPtrOutput{})
	pulumi.RegisterOutputType(CacheIdentityResponseOutput{})
	pulumi.RegisterOutputType(CacheIdentityResponsePtrOutput{})
	pulumi.RegisterOutputType(CacheIdentityResponseUserAssignedIdentitiesOutput{})
	pulumi.RegisterOutputType(CacheIdentityResponseUserAssignedIdentitiesMapOutput{})
	pulumi.RegisterOutputType(CacheNetworkSettingsOutput{})
	pulumi.RegisterOutputType(CacheNetworkSettingsPtrOutput{})
	pulumi.RegisterOutputType(CacheNetworkSettingsResponseOutput{})
	pulumi.RegisterOutputType(CacheNetworkSettingsResponsePtrOutput{})
	pulumi.RegisterOutputType(CacheResponseSkuOutput{})
	pulumi.RegisterOutputType(CacheResponseSkuPtrOutput{})
	pulumi.RegisterOutputType(CacheSecuritySettingsOutput{})
	pulumi.RegisterOutputType(CacheSecuritySettingsPtrOutput{})
	pulumi.RegisterOutputType(CacheSecuritySettingsResponseOutput{})
	pulumi.RegisterOutputType(CacheSecuritySettingsResponsePtrOutput{})
	pulumi.RegisterOutputType(CacheSkuOutput{})
	pulumi.RegisterOutputType(CacheSkuPtrOutput{})
	pulumi.RegisterOutputType(CacheUpgradeStatusResponseOutput{})
	pulumi.RegisterOutputType(CacheUsernameDownloadSettingsOutput{})
	pulumi.RegisterOutputType(CacheUsernameDownloadSettingsPtrOutput{})
	pulumi.RegisterOutputType(CacheUsernameDownloadSettingsCredentialsOutput{})
	pulumi.RegisterOutputType(CacheUsernameDownloadSettingsCredentialsPtrOutput{})
	pulumi.RegisterOutputType(CacheUsernameDownloadSettingsResponseOutput{})
	pulumi.RegisterOutputType(CacheUsernameDownloadSettingsResponsePtrOutput{})
	pulumi.RegisterOutputType(CacheUsernameDownloadSettingsResponseCredentialsOutput{})
	pulumi.RegisterOutputType(CacheUsernameDownloadSettingsResponseCredentialsPtrOutput{})
	pulumi.RegisterOutputType(ClfsTargetOutput{})
	pulumi.RegisterOutputType(ClfsTargetPtrOutput{})
	pulumi.RegisterOutputType(ClfsTargetResponseOutput{})
	pulumi.RegisterOutputType(ClfsTargetResponsePtrOutput{})
	pulumi.RegisterOutputType(ConditionResponseOutput{})
	pulumi.RegisterOutputType(ConditionResponseArrayOutput{})
	pulumi.RegisterOutputType(KeyVaultKeyReferenceOutput{})
	pulumi.RegisterOutputType(KeyVaultKeyReferencePtrOutput{})
	pulumi.RegisterOutputType(KeyVaultKeyReferenceResponseOutput{})
	pulumi.RegisterOutputType(KeyVaultKeyReferenceResponsePtrOutput{})
	pulumi.RegisterOutputType(KeyVaultKeyReferenceResponseSourceVaultOutput{})
	pulumi.RegisterOutputType(KeyVaultKeyReferenceResponseSourceVaultPtrOutput{})
	pulumi.RegisterOutputType(KeyVaultKeyReferenceSourceVaultOutput{})
	pulumi.RegisterOutputType(KeyVaultKeyReferenceSourceVaultPtrOutput{})
	pulumi.RegisterOutputType(NamespaceJunctionOutput{})
	pulumi.RegisterOutputType(NamespaceJunctionArrayOutput{})
	pulumi.RegisterOutputType(NamespaceJunctionResponseOutput{})
	pulumi.RegisterOutputType(NamespaceJunctionResponseArrayOutput{})
	pulumi.RegisterOutputType(Nfs3TargetOutput{})
	pulumi.RegisterOutputType(Nfs3TargetPtrOutput{})
	pulumi.RegisterOutputType(Nfs3TargetResponseOutput{})
	pulumi.RegisterOutputType(Nfs3TargetResponsePtrOutput{})
	pulumi.RegisterOutputType(NfsAccessPolicyOutput{})
	pulumi.RegisterOutputType(NfsAccessPolicyArrayOutput{})
	pulumi.RegisterOutputType(NfsAccessPolicyResponseOutput{})
	pulumi.RegisterOutputType(NfsAccessPolicyResponseArrayOutput{})
	pulumi.RegisterOutputType(NfsAccessRuleOutput{})
	pulumi.RegisterOutputType(NfsAccessRuleArrayOutput{})
	pulumi.RegisterOutputType(NfsAccessRuleResponseOutput{})
	pulumi.RegisterOutputType(NfsAccessRuleResponseArrayOutput{})
	pulumi.RegisterOutputType(SystemDataResponseOutput{})
	pulumi.RegisterOutputType(UnknownTargetOutput{})
	pulumi.RegisterOutputType(UnknownTargetPtrOutput{})
	pulumi.RegisterOutputType(UnknownTargetResponseOutput{})
	pulumi.RegisterOutputType(UnknownTargetResponsePtrOutput{})
}
