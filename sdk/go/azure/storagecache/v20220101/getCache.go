// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v20220101

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// A Cache instance. Follows Azure Resource Manager standards: https://github.com/Azure/azure-resource-manager-rpc/blob/master/v1.0/resource-api-reference.md
func LookupCache(ctx *pulumi.Context, args *LookupCacheArgs, opts ...pulumi.InvokeOption) (*LookupCacheResult, error) {
	var rv LookupCacheResult
	err := ctx.Invoke("azure-native:storagecache/v20220101:getCache", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return rv.Defaults(), nil
}

type LookupCacheArgs struct {
	// Name of Cache. Length of name must not be greater than 80 and chars must be from the [-0-9a-zA-Z_] char class.
	CacheName string `pulumi:"cacheName"`
	// Target resource group.
	ResourceGroupName string `pulumi:"resourceGroupName"`
}

// A Cache instance. Follows Azure Resource Manager standards: https://github.com/Azure/azure-resource-manager-rpc/blob/master/v1.0/resource-api-reference.md
type LookupCacheResult struct {
	// The size of this Cache, in GB.
	CacheSizeGB *int `pulumi:"cacheSizeGB"`
	// Specifies Directory Services settings of the cache.
	DirectoryServicesSettings *CacheDirectorySettingsResponse `pulumi:"directoryServicesSettings"`
	// Specifies encryption settings of the cache.
	EncryptionSettings *CacheEncryptionSettingsResponse `pulumi:"encryptionSettings"`
	// Health of the Cache.
	Health CacheHealthResponse `pulumi:"health"`
	// Resource ID of the Cache.
	Id string `pulumi:"id"`
	// The identity of the cache, if configured.
	Identity *CacheIdentityResponse `pulumi:"identity"`
	// Region name string.
	Location *string `pulumi:"location"`
	// Array of IP addresses that can be used by clients mounting this Cache.
	MountAddresses []string `pulumi:"mountAddresses"`
	// Name of Cache.
	Name string `pulumi:"name"`
	// Specifies network settings of the cache.
	NetworkSettings *CacheNetworkSettingsResponse `pulumi:"networkSettings"`
	// ARM provisioning state, see https://github.com/Azure/azure-resource-manager-rpc/blob/master/v1.0/Addendum.md#provisioningstate-property
	ProvisioningState string `pulumi:"provisioningState"`
	// Specifies security settings of the cache.
	SecuritySettings *CacheSecuritySettingsResponse `pulumi:"securitySettings"`
	// SKU for the Cache.
	Sku *CacheResponseSku `pulumi:"sku"`
	// Subnet used for the Cache.
	Subnet *string `pulumi:"subnet"`
	// The system meta data relating to this resource.
	SystemData SystemDataResponse `pulumi:"systemData"`
	// Resource tags.
	Tags map[string]string `pulumi:"tags"`
	// Type of the Cache; Microsoft.StorageCache/Cache
	Type string `pulumi:"type"`
	// Upgrade status of the Cache.
	UpgradeStatus CacheUpgradeStatusResponse `pulumi:"upgradeStatus"`
	// Availability zones for resources. This field should only contain a single element in the array.
	Zones []string `pulumi:"zones"`
}

// Defaults sets the appropriate defaults for LookupCacheResult
func (val *LookupCacheResult) Defaults() *LookupCacheResult {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.DirectoryServicesSettings = tmp.DirectoryServicesSettings.Defaults()

	tmp.NetworkSettings = tmp.NetworkSettings.Defaults()

	return &tmp
}

func LookupCacheOutput(ctx *pulumi.Context, args LookupCacheOutputArgs, opts ...pulumi.InvokeOption) LookupCacheResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupCacheResult, error) {
			args := v.(LookupCacheArgs)
			r, err := LookupCache(ctx, &args, opts...)
			var s LookupCacheResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupCacheResultOutput)
}

type LookupCacheOutputArgs struct {
	// Name of Cache. Length of name must not be greater than 80 and chars must be from the [-0-9a-zA-Z_] char class.
	CacheName pulumi.StringInput `pulumi:"cacheName"`
	// Target resource group.
	ResourceGroupName pulumi.StringInput `pulumi:"resourceGroupName"`
}

func (LookupCacheOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupCacheArgs)(nil)).Elem()
}

// A Cache instance. Follows Azure Resource Manager standards: https://github.com/Azure/azure-resource-manager-rpc/blob/master/v1.0/resource-api-reference.md
type LookupCacheResultOutput struct{ *pulumi.OutputState }

func (LookupCacheResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupCacheResult)(nil)).Elem()
}

func (o LookupCacheResultOutput) ToLookupCacheResultOutput() LookupCacheResultOutput {
	return o
}

func (o LookupCacheResultOutput) ToLookupCacheResultOutputWithContext(ctx context.Context) LookupCacheResultOutput {
	return o
}

// The size of this Cache, in GB.
func (o LookupCacheResultOutput) CacheSizeGB() pulumi.IntPtrOutput {
	return o.ApplyT(func(v LookupCacheResult) *int { return v.CacheSizeGB }).(pulumi.IntPtrOutput)
}

// Specifies Directory Services settings of the cache.
func (o LookupCacheResultOutput) DirectoryServicesSettings() CacheDirectorySettingsResponsePtrOutput {
	return o.ApplyT(func(v LookupCacheResult) *CacheDirectorySettingsResponse { return v.DirectoryServicesSettings }).(CacheDirectorySettingsResponsePtrOutput)
}

// Specifies encryption settings of the cache.
func (o LookupCacheResultOutput) EncryptionSettings() CacheEncryptionSettingsResponsePtrOutput {
	return o.ApplyT(func(v LookupCacheResult) *CacheEncryptionSettingsResponse { return v.EncryptionSettings }).(CacheEncryptionSettingsResponsePtrOutput)
}

// Health of the Cache.
func (o LookupCacheResultOutput) Health() CacheHealthResponseOutput {
	return o.ApplyT(func(v LookupCacheResult) CacheHealthResponse { return v.Health }).(CacheHealthResponseOutput)
}

// Resource ID of the Cache.
func (o LookupCacheResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCacheResult) string { return v.Id }).(pulumi.StringOutput)
}

// The identity of the cache, if configured.
func (o LookupCacheResultOutput) Identity() CacheIdentityResponsePtrOutput {
	return o.ApplyT(func(v LookupCacheResult) *CacheIdentityResponse { return v.Identity }).(CacheIdentityResponsePtrOutput)
}

// Region name string.
func (o LookupCacheResultOutput) Location() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupCacheResult) *string { return v.Location }).(pulumi.StringPtrOutput)
}

// Array of IP addresses that can be used by clients mounting this Cache.
func (o LookupCacheResultOutput) MountAddresses() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupCacheResult) []string { return v.MountAddresses }).(pulumi.StringArrayOutput)
}

// Name of Cache.
func (o LookupCacheResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCacheResult) string { return v.Name }).(pulumi.StringOutput)
}

// Specifies network settings of the cache.
func (o LookupCacheResultOutput) NetworkSettings() CacheNetworkSettingsResponsePtrOutput {
	return o.ApplyT(func(v LookupCacheResult) *CacheNetworkSettingsResponse { return v.NetworkSettings }).(CacheNetworkSettingsResponsePtrOutput)
}

// ARM provisioning state, see https://github.com/Azure/azure-resource-manager-rpc/blob/master/v1.0/Addendum.md#provisioningstate-property
func (o LookupCacheResultOutput) ProvisioningState() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCacheResult) string { return v.ProvisioningState }).(pulumi.StringOutput)
}

// Specifies security settings of the cache.
func (o LookupCacheResultOutput) SecuritySettings() CacheSecuritySettingsResponsePtrOutput {
	return o.ApplyT(func(v LookupCacheResult) *CacheSecuritySettingsResponse { return v.SecuritySettings }).(CacheSecuritySettingsResponsePtrOutput)
}

// SKU for the Cache.
func (o LookupCacheResultOutput) Sku() CacheResponseSkuPtrOutput {
	return o.ApplyT(func(v LookupCacheResult) *CacheResponseSku { return v.Sku }).(CacheResponseSkuPtrOutput)
}

// Subnet used for the Cache.
func (o LookupCacheResultOutput) Subnet() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupCacheResult) *string { return v.Subnet }).(pulumi.StringPtrOutput)
}

// The system meta data relating to this resource.
func (o LookupCacheResultOutput) SystemData() SystemDataResponseOutput {
	return o.ApplyT(func(v LookupCacheResult) SystemDataResponse { return v.SystemData }).(SystemDataResponseOutput)
}

// Resource tags.
func (o LookupCacheResultOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v LookupCacheResult) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

// Type of the Cache; Microsoft.StorageCache/Cache
func (o LookupCacheResultOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCacheResult) string { return v.Type }).(pulumi.StringOutput)
}

// Upgrade status of the Cache.
func (o LookupCacheResultOutput) UpgradeStatus() CacheUpgradeStatusResponseOutput {
	return o.ApplyT(func(v LookupCacheResult) CacheUpgradeStatusResponse { return v.UpgradeStatus }).(CacheUpgradeStatusResponseOutput)
}

// Availability zones for resources. This field should only contain a single element in the array.
func (o LookupCacheResultOutput) Zones() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupCacheResult) []string { return v.Zones }).(pulumi.StringArrayOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupCacheResultOutput{})
}
