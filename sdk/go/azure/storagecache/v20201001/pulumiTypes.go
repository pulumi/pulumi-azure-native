// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v20201001

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// Active Directory settings used to join a cache to a domain.
type CacheActiveDirectorySettings struct {
	// The NetBIOS name to assign to the HPC Cache when it joins the Active Directory domain as a server. Length must 1-15 characters from the class [-0-9a-zA-Z].
	CacheNetBiosName string `pulumi:"cacheNetBiosName"`
	// Active Directory admin credentials used to join the HPC Cache to a domain.
	Credentials *CacheActiveDirectorySettingsCredentials `pulumi:"credentials"`
	// The fully qualified domain name of the Active Directory domain controller.
	DomainName string `pulumi:"domainName"`
	// The Active Directory domain's NetBIOS name.
	DomainNetBiosName string `pulumi:"domainNetBiosName"`
	// Primary DNS IP address used to resolve the Active Directory domain controller's fully qualified domain name.
	PrimaryDnsIpAddress string `pulumi:"primaryDnsIpAddress"`
	// Secondary DNS IP address used to resolve the Active Directory domain controller's fully qualified domain name.
	SecondaryDnsIpAddress *string `pulumi:"secondaryDnsIpAddress"`
}

// CacheActiveDirectorySettingsInput is an input type that accepts CacheActiveDirectorySettingsArgs and CacheActiveDirectorySettingsOutput values.
// You can construct a concrete instance of `CacheActiveDirectorySettingsInput` via:
//
//          CacheActiveDirectorySettingsArgs{...}
type CacheActiveDirectorySettingsInput interface {
	pulumi.Input

	ToCacheActiveDirectorySettingsOutput() CacheActiveDirectorySettingsOutput
	ToCacheActiveDirectorySettingsOutputWithContext(context.Context) CacheActiveDirectorySettingsOutput
}

// Active Directory settings used to join a cache to a domain.
type CacheActiveDirectorySettingsArgs struct {
	// The NetBIOS name to assign to the HPC Cache when it joins the Active Directory domain as a server. Length must 1-15 characters from the class [-0-9a-zA-Z].
	CacheNetBiosName pulumi.StringInput `pulumi:"cacheNetBiosName"`
	// Active Directory admin credentials used to join the HPC Cache to a domain.
	Credentials CacheActiveDirectorySettingsCredentialsPtrInput `pulumi:"credentials"`
	// The fully qualified domain name of the Active Directory domain controller.
	DomainName pulumi.StringInput `pulumi:"domainName"`
	// The Active Directory domain's NetBIOS name.
	DomainNetBiosName pulumi.StringInput `pulumi:"domainNetBiosName"`
	// Primary DNS IP address used to resolve the Active Directory domain controller's fully qualified domain name.
	PrimaryDnsIpAddress pulumi.StringInput `pulumi:"primaryDnsIpAddress"`
	// Secondary DNS IP address used to resolve the Active Directory domain controller's fully qualified domain name.
	SecondaryDnsIpAddress pulumi.StringPtrInput `pulumi:"secondaryDnsIpAddress"`
}

func (CacheActiveDirectorySettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CacheActiveDirectorySettings)(nil)).Elem()
}

func (i CacheActiveDirectorySettingsArgs) ToCacheActiveDirectorySettingsOutput() CacheActiveDirectorySettingsOutput {
	return i.ToCacheActiveDirectorySettingsOutputWithContext(context.Background())
}

func (i CacheActiveDirectorySettingsArgs) ToCacheActiveDirectorySettingsOutputWithContext(ctx context.Context) CacheActiveDirectorySettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CacheActiveDirectorySettingsOutput)
}

func (i CacheActiveDirectorySettingsArgs) ToCacheActiveDirectorySettingsPtrOutput() CacheActiveDirectorySettingsPtrOutput {
	return i.ToCacheActiveDirectorySettingsPtrOutputWithContext(context.Background())
}

func (i CacheActiveDirectorySettingsArgs) ToCacheActiveDirectorySettingsPtrOutputWithContext(ctx context.Context) CacheActiveDirectorySettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CacheActiveDirectorySettingsOutput).ToCacheActiveDirectorySettingsPtrOutputWithContext(ctx)
}

// CacheActiveDirectorySettingsPtrInput is an input type that accepts CacheActiveDirectorySettingsArgs, CacheActiveDirectorySettingsPtr and CacheActiveDirectorySettingsPtrOutput values.
// You can construct a concrete instance of `CacheActiveDirectorySettingsPtrInput` via:
//
//          CacheActiveDirectorySettingsArgs{...}
//
//  or:
//
//          nil
type CacheActiveDirectorySettingsPtrInput interface {
	pulumi.Input

	ToCacheActiveDirectorySettingsPtrOutput() CacheActiveDirectorySettingsPtrOutput
	ToCacheActiveDirectorySettingsPtrOutputWithContext(context.Context) CacheActiveDirectorySettingsPtrOutput
}

type cacheActiveDirectorySettingsPtrType CacheActiveDirectorySettingsArgs

func CacheActiveDirectorySettingsPtr(v *CacheActiveDirectorySettingsArgs) CacheActiveDirectorySettingsPtrInput {
	return (*cacheActiveDirectorySettingsPtrType)(v)
}

func (*cacheActiveDirectorySettingsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CacheActiveDirectorySettings)(nil)).Elem()
}

func (i *cacheActiveDirectorySettingsPtrType) ToCacheActiveDirectorySettingsPtrOutput() CacheActiveDirectorySettingsPtrOutput {
	return i.ToCacheActiveDirectorySettingsPtrOutputWithContext(context.Background())
}

func (i *cacheActiveDirectorySettingsPtrType) ToCacheActiveDirectorySettingsPtrOutputWithContext(ctx context.Context) CacheActiveDirectorySettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CacheActiveDirectorySettingsPtrOutput)
}

// Active Directory settings used to join a cache to a domain.
type CacheActiveDirectorySettingsOutput struct{ *pulumi.OutputState }

func (CacheActiveDirectorySettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CacheActiveDirectorySettings)(nil)).Elem()
}

func (o CacheActiveDirectorySettingsOutput) ToCacheActiveDirectorySettingsOutput() CacheActiveDirectorySettingsOutput {
	return o
}

func (o CacheActiveDirectorySettingsOutput) ToCacheActiveDirectorySettingsOutputWithContext(ctx context.Context) CacheActiveDirectorySettingsOutput {
	return o
}

func (o CacheActiveDirectorySettingsOutput) ToCacheActiveDirectorySettingsPtrOutput() CacheActiveDirectorySettingsPtrOutput {
	return o.ToCacheActiveDirectorySettingsPtrOutputWithContext(context.Background())
}

func (o CacheActiveDirectorySettingsOutput) ToCacheActiveDirectorySettingsPtrOutputWithContext(ctx context.Context) CacheActiveDirectorySettingsPtrOutput {
	return o.ApplyT(func(v CacheActiveDirectorySettings) *CacheActiveDirectorySettings {
		return &v
	}).(CacheActiveDirectorySettingsPtrOutput)
}

// The NetBIOS name to assign to the HPC Cache when it joins the Active Directory domain as a server. Length must 1-15 characters from the class [-0-9a-zA-Z].
func (o CacheActiveDirectorySettingsOutput) CacheNetBiosName() pulumi.StringOutput {
	return o.ApplyT(func(v CacheActiveDirectorySettings) string { return v.CacheNetBiosName }).(pulumi.StringOutput)
}

// Active Directory admin credentials used to join the HPC Cache to a domain.
func (o CacheActiveDirectorySettingsOutput) Credentials() CacheActiveDirectorySettingsCredentialsPtrOutput {
	return o.ApplyT(func(v CacheActiveDirectorySettings) *CacheActiveDirectorySettingsCredentials { return v.Credentials }).(CacheActiveDirectorySettingsCredentialsPtrOutput)
}

// The fully qualified domain name of the Active Directory domain controller.
func (o CacheActiveDirectorySettingsOutput) DomainName() pulumi.StringOutput {
	return o.ApplyT(func(v CacheActiveDirectorySettings) string { return v.DomainName }).(pulumi.StringOutput)
}

// The Active Directory domain's NetBIOS name.
func (o CacheActiveDirectorySettingsOutput) DomainNetBiosName() pulumi.StringOutput {
	return o.ApplyT(func(v CacheActiveDirectorySettings) string { return v.DomainNetBiosName }).(pulumi.StringOutput)
}

// Primary DNS IP address used to resolve the Active Directory domain controller's fully qualified domain name.
func (o CacheActiveDirectorySettingsOutput) PrimaryDnsIpAddress() pulumi.StringOutput {
	return o.ApplyT(func(v CacheActiveDirectorySettings) string { return v.PrimaryDnsIpAddress }).(pulumi.StringOutput)
}

// Secondary DNS IP address used to resolve the Active Directory domain controller's fully qualified domain name.
func (o CacheActiveDirectorySettingsOutput) SecondaryDnsIpAddress() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CacheActiveDirectorySettings) *string { return v.SecondaryDnsIpAddress }).(pulumi.StringPtrOutput)
}

type CacheActiveDirectorySettingsPtrOutput struct{ *pulumi.OutputState }

func (CacheActiveDirectorySettingsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CacheActiveDirectorySettings)(nil)).Elem()
}

func (o CacheActiveDirectorySettingsPtrOutput) ToCacheActiveDirectorySettingsPtrOutput() CacheActiveDirectorySettingsPtrOutput {
	return o
}

func (o CacheActiveDirectorySettingsPtrOutput) ToCacheActiveDirectorySettingsPtrOutputWithContext(ctx context.Context) CacheActiveDirectorySettingsPtrOutput {
	return o
}

func (o CacheActiveDirectorySettingsPtrOutput) Elem() CacheActiveDirectorySettingsOutput {
	return o.ApplyT(func(v *CacheActiveDirectorySettings) CacheActiveDirectorySettings { return *v }).(CacheActiveDirectorySettingsOutput)
}

// The NetBIOS name to assign to the HPC Cache when it joins the Active Directory domain as a server. Length must 1-15 characters from the class [-0-9a-zA-Z].
func (o CacheActiveDirectorySettingsPtrOutput) CacheNetBiosName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CacheActiveDirectorySettings) *string {
		if v == nil {
			return nil
		}
		return &v.CacheNetBiosName
	}).(pulumi.StringPtrOutput)
}

// Active Directory admin credentials used to join the HPC Cache to a domain.
func (o CacheActiveDirectorySettingsPtrOutput) Credentials() CacheActiveDirectorySettingsCredentialsPtrOutput {
	return o.ApplyT(func(v *CacheActiveDirectorySettings) *CacheActiveDirectorySettingsCredentials {
		if v == nil {
			return nil
		}
		return v.Credentials
	}).(CacheActiveDirectorySettingsCredentialsPtrOutput)
}

// The fully qualified domain name of the Active Directory domain controller.
func (o CacheActiveDirectorySettingsPtrOutput) DomainName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CacheActiveDirectorySettings) *string {
		if v == nil {
			return nil
		}
		return &v.DomainName
	}).(pulumi.StringPtrOutput)
}

// The Active Directory domain's NetBIOS name.
func (o CacheActiveDirectorySettingsPtrOutput) DomainNetBiosName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CacheActiveDirectorySettings) *string {
		if v == nil {
			return nil
		}
		return &v.DomainNetBiosName
	}).(pulumi.StringPtrOutput)
}

// Primary DNS IP address used to resolve the Active Directory domain controller's fully qualified domain name.
func (o CacheActiveDirectorySettingsPtrOutput) PrimaryDnsIpAddress() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CacheActiveDirectorySettings) *string {
		if v == nil {
			return nil
		}
		return &v.PrimaryDnsIpAddress
	}).(pulumi.StringPtrOutput)
}

// Secondary DNS IP address used to resolve the Active Directory domain controller's fully qualified domain name.
func (o CacheActiveDirectorySettingsPtrOutput) SecondaryDnsIpAddress() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CacheActiveDirectorySettings) *string {
		if v == nil {
			return nil
		}
		return v.SecondaryDnsIpAddress
	}).(pulumi.StringPtrOutput)
}

// Active Directory admin credentials used to join the HPC Cache to a domain.
type CacheActiveDirectorySettingsCredentials struct {
	// Plain text password of the Active Directory domain administrator. This value is stored encrypted and not returned on response.
	Password string `pulumi:"password"`
	// Username of the Active Directory domain administrator. This value is stored encrypted and not returned on response.
	Username string `pulumi:"username"`
}

// CacheActiveDirectorySettingsCredentialsInput is an input type that accepts CacheActiveDirectorySettingsCredentialsArgs and CacheActiveDirectorySettingsCredentialsOutput values.
// You can construct a concrete instance of `CacheActiveDirectorySettingsCredentialsInput` via:
//
//          CacheActiveDirectorySettingsCredentialsArgs{...}
type CacheActiveDirectorySettingsCredentialsInput interface {
	pulumi.Input

	ToCacheActiveDirectorySettingsCredentialsOutput() CacheActiveDirectorySettingsCredentialsOutput
	ToCacheActiveDirectorySettingsCredentialsOutputWithContext(context.Context) CacheActiveDirectorySettingsCredentialsOutput
}

// Active Directory admin credentials used to join the HPC Cache to a domain.
type CacheActiveDirectorySettingsCredentialsArgs struct {
	// Plain text password of the Active Directory domain administrator. This value is stored encrypted and not returned on response.
	Password pulumi.StringInput `pulumi:"password"`
	// Username of the Active Directory domain administrator. This value is stored encrypted and not returned on response.
	Username pulumi.StringInput `pulumi:"username"`
}

func (CacheActiveDirectorySettingsCredentialsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CacheActiveDirectorySettingsCredentials)(nil)).Elem()
}

func (i CacheActiveDirectorySettingsCredentialsArgs) ToCacheActiveDirectorySettingsCredentialsOutput() CacheActiveDirectorySettingsCredentialsOutput {
	return i.ToCacheActiveDirectorySettingsCredentialsOutputWithContext(context.Background())
}

func (i CacheActiveDirectorySettingsCredentialsArgs) ToCacheActiveDirectorySettingsCredentialsOutputWithContext(ctx context.Context) CacheActiveDirectorySettingsCredentialsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CacheActiveDirectorySettingsCredentialsOutput)
}

func (i CacheActiveDirectorySettingsCredentialsArgs) ToCacheActiveDirectorySettingsCredentialsPtrOutput() CacheActiveDirectorySettingsCredentialsPtrOutput {
	return i.ToCacheActiveDirectorySettingsCredentialsPtrOutputWithContext(context.Background())
}

func (i CacheActiveDirectorySettingsCredentialsArgs) ToCacheActiveDirectorySettingsCredentialsPtrOutputWithContext(ctx context.Context) CacheActiveDirectorySettingsCredentialsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CacheActiveDirectorySettingsCredentialsOutput).ToCacheActiveDirectorySettingsCredentialsPtrOutputWithContext(ctx)
}

// CacheActiveDirectorySettingsCredentialsPtrInput is an input type that accepts CacheActiveDirectorySettingsCredentialsArgs, CacheActiveDirectorySettingsCredentialsPtr and CacheActiveDirectorySettingsCredentialsPtrOutput values.
// You can construct a concrete instance of `CacheActiveDirectorySettingsCredentialsPtrInput` via:
//
//          CacheActiveDirectorySettingsCredentialsArgs{...}
//
//  or:
//
//          nil
type CacheActiveDirectorySettingsCredentialsPtrInput interface {
	pulumi.Input

	ToCacheActiveDirectorySettingsCredentialsPtrOutput() CacheActiveDirectorySettingsCredentialsPtrOutput
	ToCacheActiveDirectorySettingsCredentialsPtrOutputWithContext(context.Context) CacheActiveDirectorySettingsCredentialsPtrOutput
}

type cacheActiveDirectorySettingsCredentialsPtrType CacheActiveDirectorySettingsCredentialsArgs

func CacheActiveDirectorySettingsCredentialsPtr(v *CacheActiveDirectorySettingsCredentialsArgs) CacheActiveDirectorySettingsCredentialsPtrInput {
	return (*cacheActiveDirectorySettingsCredentialsPtrType)(v)
}

func (*cacheActiveDirectorySettingsCredentialsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CacheActiveDirectorySettingsCredentials)(nil)).Elem()
}

func (i *cacheActiveDirectorySettingsCredentialsPtrType) ToCacheActiveDirectorySettingsCredentialsPtrOutput() CacheActiveDirectorySettingsCredentialsPtrOutput {
	return i.ToCacheActiveDirectorySettingsCredentialsPtrOutputWithContext(context.Background())
}

func (i *cacheActiveDirectorySettingsCredentialsPtrType) ToCacheActiveDirectorySettingsCredentialsPtrOutputWithContext(ctx context.Context) CacheActiveDirectorySettingsCredentialsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CacheActiveDirectorySettingsCredentialsPtrOutput)
}

// Active Directory admin credentials used to join the HPC Cache to a domain.
type CacheActiveDirectorySettingsCredentialsOutput struct{ *pulumi.OutputState }

func (CacheActiveDirectorySettingsCredentialsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CacheActiveDirectorySettingsCredentials)(nil)).Elem()
}

func (o CacheActiveDirectorySettingsCredentialsOutput) ToCacheActiveDirectorySettingsCredentialsOutput() CacheActiveDirectorySettingsCredentialsOutput {
	return o
}

func (o CacheActiveDirectorySettingsCredentialsOutput) ToCacheActiveDirectorySettingsCredentialsOutputWithContext(ctx context.Context) CacheActiveDirectorySettingsCredentialsOutput {
	return o
}

func (o CacheActiveDirectorySettingsCredentialsOutput) ToCacheActiveDirectorySettingsCredentialsPtrOutput() CacheActiveDirectorySettingsCredentialsPtrOutput {
	return o.ToCacheActiveDirectorySettingsCredentialsPtrOutputWithContext(context.Background())
}

func (o CacheActiveDirectorySettingsCredentialsOutput) ToCacheActiveDirectorySettingsCredentialsPtrOutputWithContext(ctx context.Context) CacheActiveDirectorySettingsCredentialsPtrOutput {
	return o.ApplyT(func(v CacheActiveDirectorySettingsCredentials) *CacheActiveDirectorySettingsCredentials {
		return &v
	}).(CacheActiveDirectorySettingsCredentialsPtrOutput)
}

// Plain text password of the Active Directory domain administrator. This value is stored encrypted and not returned on response.
func (o CacheActiveDirectorySettingsCredentialsOutput) Password() pulumi.StringOutput {
	return o.ApplyT(func(v CacheActiveDirectorySettingsCredentials) string { return v.Password }).(pulumi.StringOutput)
}

// Username of the Active Directory domain administrator. This value is stored encrypted and not returned on response.
func (o CacheActiveDirectorySettingsCredentialsOutput) Username() pulumi.StringOutput {
	return o.ApplyT(func(v CacheActiveDirectorySettingsCredentials) string { return v.Username }).(pulumi.StringOutput)
}

type CacheActiveDirectorySettingsCredentialsPtrOutput struct{ *pulumi.OutputState }

func (CacheActiveDirectorySettingsCredentialsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CacheActiveDirectorySettingsCredentials)(nil)).Elem()
}

func (o CacheActiveDirectorySettingsCredentialsPtrOutput) ToCacheActiveDirectorySettingsCredentialsPtrOutput() CacheActiveDirectorySettingsCredentialsPtrOutput {
	return o
}

func (o CacheActiveDirectorySettingsCredentialsPtrOutput) ToCacheActiveDirectorySettingsCredentialsPtrOutputWithContext(ctx context.Context) CacheActiveDirectorySettingsCredentialsPtrOutput {
	return o
}

func (o CacheActiveDirectorySettingsCredentialsPtrOutput) Elem() CacheActiveDirectorySettingsCredentialsOutput {
	return o.ApplyT(func(v *CacheActiveDirectorySettingsCredentials) CacheActiveDirectorySettingsCredentials { return *v }).(CacheActiveDirectorySettingsCredentialsOutput)
}

// Plain text password of the Active Directory domain administrator. This value is stored encrypted and not returned on response.
func (o CacheActiveDirectorySettingsCredentialsPtrOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CacheActiveDirectorySettingsCredentials) *string {
		if v == nil {
			return nil
		}
		return &v.Password
	}).(pulumi.StringPtrOutput)
}

// Username of the Active Directory domain administrator. This value is stored encrypted and not returned on response.
func (o CacheActiveDirectorySettingsCredentialsPtrOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CacheActiveDirectorySettingsCredentials) *string {
		if v == nil {
			return nil
		}
		return &v.Username
	}).(pulumi.StringPtrOutput)
}

// Active Directory settings used to join a cache to a domain.
type CacheActiveDirectorySettingsInvokeResponse struct {
	// The NetBIOS name to assign to the HPC Cache when it joins the Active Directory domain as a server. Length must 1-15 characters from the class [-0-9a-zA-Z].
	CacheNetBiosName string `pulumi:"cacheNetBiosName"`
	// Active Directory admin credentials used to join the HPC Cache to a domain.
	Credentials *CacheActiveDirectorySettingsInvokeResponseCredentials `pulumi:"credentials"`
	// True if the HPC Cache is joined to the Active Directory domain.
	DomainJoined string `pulumi:"domainJoined"`
	// The fully qualified domain name of the Active Directory domain controller.
	DomainName string `pulumi:"domainName"`
	// The Active Directory domain's NetBIOS name.
	DomainNetBiosName string `pulumi:"domainNetBiosName"`
	// Primary DNS IP address used to resolve the Active Directory domain controller's fully qualified domain name.
	PrimaryDnsIpAddress string `pulumi:"primaryDnsIpAddress"`
	// Secondary DNS IP address used to resolve the Active Directory domain controller's fully qualified domain name.
	SecondaryDnsIpAddress *string `pulumi:"secondaryDnsIpAddress"`
}

// CacheActiveDirectorySettingsInvokeResponseInput is an input type that accepts CacheActiveDirectorySettingsInvokeResponseArgs and CacheActiveDirectorySettingsInvokeResponseOutput values.
// You can construct a concrete instance of `CacheActiveDirectorySettingsInvokeResponseInput` via:
//
//          CacheActiveDirectorySettingsInvokeResponseArgs{...}
type CacheActiveDirectorySettingsInvokeResponseInput interface {
	pulumi.Input

	ToCacheActiveDirectorySettingsInvokeResponseOutput() CacheActiveDirectorySettingsInvokeResponseOutput
	ToCacheActiveDirectorySettingsInvokeResponseOutputWithContext(context.Context) CacheActiveDirectorySettingsInvokeResponseOutput
}

// Active Directory settings used to join a cache to a domain.
type CacheActiveDirectorySettingsInvokeResponseArgs struct {
	// The NetBIOS name to assign to the HPC Cache when it joins the Active Directory domain as a server. Length must 1-15 characters from the class [-0-9a-zA-Z].
	CacheNetBiosName pulumi.StringInput `pulumi:"cacheNetBiosName"`
	// Active Directory admin credentials used to join the HPC Cache to a domain.
	Credentials CacheActiveDirectorySettingsInvokeResponseCredentialsPtrInput `pulumi:"credentials"`
	// True if the HPC Cache is joined to the Active Directory domain.
	DomainJoined pulumi.StringInput `pulumi:"domainJoined"`
	// The fully qualified domain name of the Active Directory domain controller.
	DomainName pulumi.StringInput `pulumi:"domainName"`
	// The Active Directory domain's NetBIOS name.
	DomainNetBiosName pulumi.StringInput `pulumi:"domainNetBiosName"`
	// Primary DNS IP address used to resolve the Active Directory domain controller's fully qualified domain name.
	PrimaryDnsIpAddress pulumi.StringInput `pulumi:"primaryDnsIpAddress"`
	// Secondary DNS IP address used to resolve the Active Directory domain controller's fully qualified domain name.
	SecondaryDnsIpAddress pulumi.StringPtrInput `pulumi:"secondaryDnsIpAddress"`
}

func (CacheActiveDirectorySettingsInvokeResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CacheActiveDirectorySettingsInvokeResponse)(nil)).Elem()
}

func (i CacheActiveDirectorySettingsInvokeResponseArgs) ToCacheActiveDirectorySettingsInvokeResponseOutput() CacheActiveDirectorySettingsInvokeResponseOutput {
	return i.ToCacheActiveDirectorySettingsInvokeResponseOutputWithContext(context.Background())
}

func (i CacheActiveDirectorySettingsInvokeResponseArgs) ToCacheActiveDirectorySettingsInvokeResponseOutputWithContext(ctx context.Context) CacheActiveDirectorySettingsInvokeResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CacheActiveDirectorySettingsInvokeResponseOutput)
}

func (i CacheActiveDirectorySettingsInvokeResponseArgs) ToCacheActiveDirectorySettingsInvokeResponsePtrOutput() CacheActiveDirectorySettingsInvokeResponsePtrOutput {
	return i.ToCacheActiveDirectorySettingsInvokeResponsePtrOutputWithContext(context.Background())
}

func (i CacheActiveDirectorySettingsInvokeResponseArgs) ToCacheActiveDirectorySettingsInvokeResponsePtrOutputWithContext(ctx context.Context) CacheActiveDirectorySettingsInvokeResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CacheActiveDirectorySettingsInvokeResponseOutput).ToCacheActiveDirectorySettingsInvokeResponsePtrOutputWithContext(ctx)
}

// CacheActiveDirectorySettingsInvokeResponsePtrInput is an input type that accepts CacheActiveDirectorySettingsInvokeResponseArgs, CacheActiveDirectorySettingsInvokeResponsePtr and CacheActiveDirectorySettingsInvokeResponsePtrOutput values.
// You can construct a concrete instance of `CacheActiveDirectorySettingsInvokeResponsePtrInput` via:
//
//          CacheActiveDirectorySettingsInvokeResponseArgs{...}
//
//  or:
//
//          nil
type CacheActiveDirectorySettingsInvokeResponsePtrInput interface {
	pulumi.Input

	ToCacheActiveDirectorySettingsInvokeResponsePtrOutput() CacheActiveDirectorySettingsInvokeResponsePtrOutput
	ToCacheActiveDirectorySettingsInvokeResponsePtrOutputWithContext(context.Context) CacheActiveDirectorySettingsInvokeResponsePtrOutput
}

type cacheActiveDirectorySettingsInvokeResponsePtrType CacheActiveDirectorySettingsInvokeResponseArgs

func CacheActiveDirectorySettingsInvokeResponsePtr(v *CacheActiveDirectorySettingsInvokeResponseArgs) CacheActiveDirectorySettingsInvokeResponsePtrInput {
	return (*cacheActiveDirectorySettingsInvokeResponsePtrType)(v)
}

func (*cacheActiveDirectorySettingsInvokeResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CacheActiveDirectorySettingsInvokeResponse)(nil)).Elem()
}

func (i *cacheActiveDirectorySettingsInvokeResponsePtrType) ToCacheActiveDirectorySettingsInvokeResponsePtrOutput() CacheActiveDirectorySettingsInvokeResponsePtrOutput {
	return i.ToCacheActiveDirectorySettingsInvokeResponsePtrOutputWithContext(context.Background())
}

func (i *cacheActiveDirectorySettingsInvokeResponsePtrType) ToCacheActiveDirectorySettingsInvokeResponsePtrOutputWithContext(ctx context.Context) CacheActiveDirectorySettingsInvokeResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CacheActiveDirectorySettingsInvokeResponsePtrOutput)
}

// Active Directory settings used to join a cache to a domain.
type CacheActiveDirectorySettingsInvokeResponseOutput struct{ *pulumi.OutputState }

func (CacheActiveDirectorySettingsInvokeResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CacheActiveDirectorySettingsInvokeResponse)(nil)).Elem()
}

func (o CacheActiveDirectorySettingsInvokeResponseOutput) ToCacheActiveDirectorySettingsInvokeResponseOutput() CacheActiveDirectorySettingsInvokeResponseOutput {
	return o
}

func (o CacheActiveDirectorySettingsInvokeResponseOutput) ToCacheActiveDirectorySettingsInvokeResponseOutputWithContext(ctx context.Context) CacheActiveDirectorySettingsInvokeResponseOutput {
	return o
}

func (o CacheActiveDirectorySettingsInvokeResponseOutput) ToCacheActiveDirectorySettingsInvokeResponsePtrOutput() CacheActiveDirectorySettingsInvokeResponsePtrOutput {
	return o.ToCacheActiveDirectorySettingsInvokeResponsePtrOutputWithContext(context.Background())
}

func (o CacheActiveDirectorySettingsInvokeResponseOutput) ToCacheActiveDirectorySettingsInvokeResponsePtrOutputWithContext(ctx context.Context) CacheActiveDirectorySettingsInvokeResponsePtrOutput {
	return o.ApplyT(func(v CacheActiveDirectorySettingsInvokeResponse) *CacheActiveDirectorySettingsInvokeResponse {
		return &v
	}).(CacheActiveDirectorySettingsInvokeResponsePtrOutput)
}

// The NetBIOS name to assign to the HPC Cache when it joins the Active Directory domain as a server. Length must 1-15 characters from the class [-0-9a-zA-Z].
func (o CacheActiveDirectorySettingsInvokeResponseOutput) CacheNetBiosName() pulumi.StringOutput {
	return o.ApplyT(func(v CacheActiveDirectorySettingsInvokeResponse) string { return v.CacheNetBiosName }).(pulumi.StringOutput)
}

// Active Directory admin credentials used to join the HPC Cache to a domain.
func (o CacheActiveDirectorySettingsInvokeResponseOutput) Credentials() CacheActiveDirectorySettingsInvokeResponseCredentialsPtrOutput {
	return o.ApplyT(func(v CacheActiveDirectorySettingsInvokeResponse) *CacheActiveDirectorySettingsInvokeResponseCredentials {
		return v.Credentials
	}).(CacheActiveDirectorySettingsInvokeResponseCredentialsPtrOutput)
}

// True if the HPC Cache is joined to the Active Directory domain.
func (o CacheActiveDirectorySettingsInvokeResponseOutput) DomainJoined() pulumi.StringOutput {
	return o.ApplyT(func(v CacheActiveDirectorySettingsInvokeResponse) string { return v.DomainJoined }).(pulumi.StringOutput)
}

// The fully qualified domain name of the Active Directory domain controller.
func (o CacheActiveDirectorySettingsInvokeResponseOutput) DomainName() pulumi.StringOutput {
	return o.ApplyT(func(v CacheActiveDirectorySettingsInvokeResponse) string { return v.DomainName }).(pulumi.StringOutput)
}

// The Active Directory domain's NetBIOS name.
func (o CacheActiveDirectorySettingsInvokeResponseOutput) DomainNetBiosName() pulumi.StringOutput {
	return o.ApplyT(func(v CacheActiveDirectorySettingsInvokeResponse) string { return v.DomainNetBiosName }).(pulumi.StringOutput)
}

// Primary DNS IP address used to resolve the Active Directory domain controller's fully qualified domain name.
func (o CacheActiveDirectorySettingsInvokeResponseOutput) PrimaryDnsIpAddress() pulumi.StringOutput {
	return o.ApplyT(func(v CacheActiveDirectorySettingsInvokeResponse) string { return v.PrimaryDnsIpAddress }).(pulumi.StringOutput)
}

// Secondary DNS IP address used to resolve the Active Directory domain controller's fully qualified domain name.
func (o CacheActiveDirectorySettingsInvokeResponseOutput) SecondaryDnsIpAddress() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CacheActiveDirectorySettingsInvokeResponse) *string { return v.SecondaryDnsIpAddress }).(pulumi.StringPtrOutput)
}

type CacheActiveDirectorySettingsInvokeResponsePtrOutput struct{ *pulumi.OutputState }

func (CacheActiveDirectorySettingsInvokeResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CacheActiveDirectorySettingsInvokeResponse)(nil)).Elem()
}

func (o CacheActiveDirectorySettingsInvokeResponsePtrOutput) ToCacheActiveDirectorySettingsInvokeResponsePtrOutput() CacheActiveDirectorySettingsInvokeResponsePtrOutput {
	return o
}

func (o CacheActiveDirectorySettingsInvokeResponsePtrOutput) ToCacheActiveDirectorySettingsInvokeResponsePtrOutputWithContext(ctx context.Context) CacheActiveDirectorySettingsInvokeResponsePtrOutput {
	return o
}

func (o CacheActiveDirectorySettingsInvokeResponsePtrOutput) Elem() CacheActiveDirectorySettingsInvokeResponseOutput {
	return o.ApplyT(func(v *CacheActiveDirectorySettingsInvokeResponse) CacheActiveDirectorySettingsInvokeResponse {
		return *v
	}).(CacheActiveDirectorySettingsInvokeResponseOutput)
}

// The NetBIOS name to assign to the HPC Cache when it joins the Active Directory domain as a server. Length must 1-15 characters from the class [-0-9a-zA-Z].
func (o CacheActiveDirectorySettingsInvokeResponsePtrOutput) CacheNetBiosName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CacheActiveDirectorySettingsInvokeResponse) *string {
		if v == nil {
			return nil
		}
		return &v.CacheNetBiosName
	}).(pulumi.StringPtrOutput)
}

// Active Directory admin credentials used to join the HPC Cache to a domain.
func (o CacheActiveDirectorySettingsInvokeResponsePtrOutput) Credentials() CacheActiveDirectorySettingsInvokeResponseCredentialsPtrOutput {
	return o.ApplyT(func(v *CacheActiveDirectorySettingsInvokeResponse) *CacheActiveDirectorySettingsInvokeResponseCredentials {
		if v == nil {
			return nil
		}
		return v.Credentials
	}).(CacheActiveDirectorySettingsInvokeResponseCredentialsPtrOutput)
}

// True if the HPC Cache is joined to the Active Directory domain.
func (o CacheActiveDirectorySettingsInvokeResponsePtrOutput) DomainJoined() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CacheActiveDirectorySettingsInvokeResponse) *string {
		if v == nil {
			return nil
		}
		return &v.DomainJoined
	}).(pulumi.StringPtrOutput)
}

// The fully qualified domain name of the Active Directory domain controller.
func (o CacheActiveDirectorySettingsInvokeResponsePtrOutput) DomainName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CacheActiveDirectorySettingsInvokeResponse) *string {
		if v == nil {
			return nil
		}
		return &v.DomainName
	}).(pulumi.StringPtrOutput)
}

// The Active Directory domain's NetBIOS name.
func (o CacheActiveDirectorySettingsInvokeResponsePtrOutput) DomainNetBiosName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CacheActiveDirectorySettingsInvokeResponse) *string {
		if v == nil {
			return nil
		}
		return &v.DomainNetBiosName
	}).(pulumi.StringPtrOutput)
}

// Primary DNS IP address used to resolve the Active Directory domain controller's fully qualified domain name.
func (o CacheActiveDirectorySettingsInvokeResponsePtrOutput) PrimaryDnsIpAddress() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CacheActiveDirectorySettingsInvokeResponse) *string {
		if v == nil {
			return nil
		}
		return &v.PrimaryDnsIpAddress
	}).(pulumi.StringPtrOutput)
}

// Secondary DNS IP address used to resolve the Active Directory domain controller's fully qualified domain name.
func (o CacheActiveDirectorySettingsInvokeResponsePtrOutput) SecondaryDnsIpAddress() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CacheActiveDirectorySettingsInvokeResponse) *string {
		if v == nil {
			return nil
		}
		return v.SecondaryDnsIpAddress
	}).(pulumi.StringPtrOutput)
}

// Active Directory admin credentials used to join the HPC Cache to a domain.
type CacheActiveDirectorySettingsInvokeResponseCredentials struct {
	// Plain text password of the Active Directory domain administrator. This value is stored encrypted and not returned on response.
	Password string `pulumi:"password"`
	// Username of the Active Directory domain administrator. This value is stored encrypted and not returned on response.
	Username string `pulumi:"username"`
}

// CacheActiveDirectorySettingsInvokeResponseCredentialsInput is an input type that accepts CacheActiveDirectorySettingsInvokeResponseCredentialsArgs and CacheActiveDirectorySettingsInvokeResponseCredentialsOutput values.
// You can construct a concrete instance of `CacheActiveDirectorySettingsInvokeResponseCredentialsInput` via:
//
//          CacheActiveDirectorySettingsInvokeResponseCredentialsArgs{...}
type CacheActiveDirectorySettingsInvokeResponseCredentialsInput interface {
	pulumi.Input

	ToCacheActiveDirectorySettingsInvokeResponseCredentialsOutput() CacheActiveDirectorySettingsInvokeResponseCredentialsOutput
	ToCacheActiveDirectorySettingsInvokeResponseCredentialsOutputWithContext(context.Context) CacheActiveDirectorySettingsInvokeResponseCredentialsOutput
}

// Active Directory admin credentials used to join the HPC Cache to a domain.
type CacheActiveDirectorySettingsInvokeResponseCredentialsArgs struct {
	// Plain text password of the Active Directory domain administrator. This value is stored encrypted and not returned on response.
	Password pulumi.StringInput `pulumi:"password"`
	// Username of the Active Directory domain administrator. This value is stored encrypted and not returned on response.
	Username pulumi.StringInput `pulumi:"username"`
}

func (CacheActiveDirectorySettingsInvokeResponseCredentialsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CacheActiveDirectorySettingsInvokeResponseCredentials)(nil)).Elem()
}

func (i CacheActiveDirectorySettingsInvokeResponseCredentialsArgs) ToCacheActiveDirectorySettingsInvokeResponseCredentialsOutput() CacheActiveDirectorySettingsInvokeResponseCredentialsOutput {
	return i.ToCacheActiveDirectorySettingsInvokeResponseCredentialsOutputWithContext(context.Background())
}

func (i CacheActiveDirectorySettingsInvokeResponseCredentialsArgs) ToCacheActiveDirectorySettingsInvokeResponseCredentialsOutputWithContext(ctx context.Context) CacheActiveDirectorySettingsInvokeResponseCredentialsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CacheActiveDirectorySettingsInvokeResponseCredentialsOutput)
}

func (i CacheActiveDirectorySettingsInvokeResponseCredentialsArgs) ToCacheActiveDirectorySettingsInvokeResponseCredentialsPtrOutput() CacheActiveDirectorySettingsInvokeResponseCredentialsPtrOutput {
	return i.ToCacheActiveDirectorySettingsInvokeResponseCredentialsPtrOutputWithContext(context.Background())
}

func (i CacheActiveDirectorySettingsInvokeResponseCredentialsArgs) ToCacheActiveDirectorySettingsInvokeResponseCredentialsPtrOutputWithContext(ctx context.Context) CacheActiveDirectorySettingsInvokeResponseCredentialsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CacheActiveDirectorySettingsInvokeResponseCredentialsOutput).ToCacheActiveDirectorySettingsInvokeResponseCredentialsPtrOutputWithContext(ctx)
}

// CacheActiveDirectorySettingsInvokeResponseCredentialsPtrInput is an input type that accepts CacheActiveDirectorySettingsInvokeResponseCredentialsArgs, CacheActiveDirectorySettingsInvokeResponseCredentialsPtr and CacheActiveDirectorySettingsInvokeResponseCredentialsPtrOutput values.
// You can construct a concrete instance of `CacheActiveDirectorySettingsInvokeResponseCredentialsPtrInput` via:
//
//          CacheActiveDirectorySettingsInvokeResponseCredentialsArgs{...}
//
//  or:
//
//          nil
type CacheActiveDirectorySettingsInvokeResponseCredentialsPtrInput interface {
	pulumi.Input

	ToCacheActiveDirectorySettingsInvokeResponseCredentialsPtrOutput() CacheActiveDirectorySettingsInvokeResponseCredentialsPtrOutput
	ToCacheActiveDirectorySettingsInvokeResponseCredentialsPtrOutputWithContext(context.Context) CacheActiveDirectorySettingsInvokeResponseCredentialsPtrOutput
}

type cacheActiveDirectorySettingsInvokeResponseCredentialsPtrType CacheActiveDirectorySettingsInvokeResponseCredentialsArgs

func CacheActiveDirectorySettingsInvokeResponseCredentialsPtr(v *CacheActiveDirectorySettingsInvokeResponseCredentialsArgs) CacheActiveDirectorySettingsInvokeResponseCredentialsPtrInput {
	return (*cacheActiveDirectorySettingsInvokeResponseCredentialsPtrType)(v)
}

func (*cacheActiveDirectorySettingsInvokeResponseCredentialsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CacheActiveDirectorySettingsInvokeResponseCredentials)(nil)).Elem()
}

func (i *cacheActiveDirectorySettingsInvokeResponseCredentialsPtrType) ToCacheActiveDirectorySettingsInvokeResponseCredentialsPtrOutput() CacheActiveDirectorySettingsInvokeResponseCredentialsPtrOutput {
	return i.ToCacheActiveDirectorySettingsInvokeResponseCredentialsPtrOutputWithContext(context.Background())
}

func (i *cacheActiveDirectorySettingsInvokeResponseCredentialsPtrType) ToCacheActiveDirectorySettingsInvokeResponseCredentialsPtrOutputWithContext(ctx context.Context) CacheActiveDirectorySettingsInvokeResponseCredentialsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CacheActiveDirectorySettingsInvokeResponseCredentialsPtrOutput)
}

// Active Directory admin credentials used to join the HPC Cache to a domain.
type CacheActiveDirectorySettingsInvokeResponseCredentialsOutput struct{ *pulumi.OutputState }

func (CacheActiveDirectorySettingsInvokeResponseCredentialsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CacheActiveDirectorySettingsInvokeResponseCredentials)(nil)).Elem()
}

func (o CacheActiveDirectorySettingsInvokeResponseCredentialsOutput) ToCacheActiveDirectorySettingsInvokeResponseCredentialsOutput() CacheActiveDirectorySettingsInvokeResponseCredentialsOutput {
	return o
}

func (o CacheActiveDirectorySettingsInvokeResponseCredentialsOutput) ToCacheActiveDirectorySettingsInvokeResponseCredentialsOutputWithContext(ctx context.Context) CacheActiveDirectorySettingsInvokeResponseCredentialsOutput {
	return o
}

func (o CacheActiveDirectorySettingsInvokeResponseCredentialsOutput) ToCacheActiveDirectorySettingsInvokeResponseCredentialsPtrOutput() CacheActiveDirectorySettingsInvokeResponseCredentialsPtrOutput {
	return o.ToCacheActiveDirectorySettingsInvokeResponseCredentialsPtrOutputWithContext(context.Background())
}

func (o CacheActiveDirectorySettingsInvokeResponseCredentialsOutput) ToCacheActiveDirectorySettingsInvokeResponseCredentialsPtrOutputWithContext(ctx context.Context) CacheActiveDirectorySettingsInvokeResponseCredentialsPtrOutput {
	return o.ApplyT(func(v CacheActiveDirectorySettingsInvokeResponseCredentials) *CacheActiveDirectorySettingsInvokeResponseCredentials {
		return &v
	}).(CacheActiveDirectorySettingsInvokeResponseCredentialsPtrOutput)
}

// Plain text password of the Active Directory domain administrator. This value is stored encrypted and not returned on response.
func (o CacheActiveDirectorySettingsInvokeResponseCredentialsOutput) Password() pulumi.StringOutput {
	return o.ApplyT(func(v CacheActiveDirectorySettingsInvokeResponseCredentials) string { return v.Password }).(pulumi.StringOutput)
}

// Username of the Active Directory domain administrator. This value is stored encrypted and not returned on response.
func (o CacheActiveDirectorySettingsInvokeResponseCredentialsOutput) Username() pulumi.StringOutput {
	return o.ApplyT(func(v CacheActiveDirectorySettingsInvokeResponseCredentials) string { return v.Username }).(pulumi.StringOutput)
}

type CacheActiveDirectorySettingsInvokeResponseCredentialsPtrOutput struct{ *pulumi.OutputState }

func (CacheActiveDirectorySettingsInvokeResponseCredentialsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CacheActiveDirectorySettingsInvokeResponseCredentials)(nil)).Elem()
}

func (o CacheActiveDirectorySettingsInvokeResponseCredentialsPtrOutput) ToCacheActiveDirectorySettingsInvokeResponseCredentialsPtrOutput() CacheActiveDirectorySettingsInvokeResponseCredentialsPtrOutput {
	return o
}

func (o CacheActiveDirectorySettingsInvokeResponseCredentialsPtrOutput) ToCacheActiveDirectorySettingsInvokeResponseCredentialsPtrOutputWithContext(ctx context.Context) CacheActiveDirectorySettingsInvokeResponseCredentialsPtrOutput {
	return o
}

func (o CacheActiveDirectorySettingsInvokeResponseCredentialsPtrOutput) Elem() CacheActiveDirectorySettingsInvokeResponseCredentialsOutput {
	return o.ApplyT(func(v *CacheActiveDirectorySettingsInvokeResponseCredentials) CacheActiveDirectorySettingsInvokeResponseCredentials {
		return *v
	}).(CacheActiveDirectorySettingsInvokeResponseCredentialsOutput)
}

// Plain text password of the Active Directory domain administrator. This value is stored encrypted and not returned on response.
func (o CacheActiveDirectorySettingsInvokeResponseCredentialsPtrOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CacheActiveDirectorySettingsInvokeResponseCredentials) *string {
		if v == nil {
			return nil
		}
		return &v.Password
	}).(pulumi.StringPtrOutput)
}

// Username of the Active Directory domain administrator. This value is stored encrypted and not returned on response.
func (o CacheActiveDirectorySettingsInvokeResponseCredentialsPtrOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CacheActiveDirectorySettingsInvokeResponseCredentials) *string {
		if v == nil {
			return nil
		}
		return &v.Username
	}).(pulumi.StringPtrOutput)
}

// Active Directory settings used to join a cache to a domain.
type CacheActiveDirectorySettingsResponse struct {
	// The NetBIOS name to assign to the HPC Cache when it joins the Active Directory domain as a server. Length must 1-15 characters from the class [-0-9a-zA-Z].
	CacheNetBiosName string `pulumi:"cacheNetBiosName"`
	// Active Directory admin credentials used to join the HPC Cache to a domain.
	Credentials *CacheActiveDirectorySettingsResponseCredentials `pulumi:"credentials"`
	// True if the HPC Cache is joined to the Active Directory domain.
	DomainJoined string `pulumi:"domainJoined"`
	// The fully qualified domain name of the Active Directory domain controller.
	DomainName string `pulumi:"domainName"`
	// The Active Directory domain's NetBIOS name.
	DomainNetBiosName string `pulumi:"domainNetBiosName"`
	// Primary DNS IP address used to resolve the Active Directory domain controller's fully qualified domain name.
	PrimaryDnsIpAddress string `pulumi:"primaryDnsIpAddress"`
	// Secondary DNS IP address used to resolve the Active Directory domain controller's fully qualified domain name.
	SecondaryDnsIpAddress *string `pulumi:"secondaryDnsIpAddress"`
}

// CacheActiveDirectorySettingsResponseInput is an input type that accepts CacheActiveDirectorySettingsResponseArgs and CacheActiveDirectorySettingsResponseOutput values.
// You can construct a concrete instance of `CacheActiveDirectorySettingsResponseInput` via:
//
//          CacheActiveDirectorySettingsResponseArgs{...}
type CacheActiveDirectorySettingsResponseInput interface {
	pulumi.Input

	ToCacheActiveDirectorySettingsResponseOutput() CacheActiveDirectorySettingsResponseOutput
	ToCacheActiveDirectorySettingsResponseOutputWithContext(context.Context) CacheActiveDirectorySettingsResponseOutput
}

// Active Directory settings used to join a cache to a domain.
type CacheActiveDirectorySettingsResponseArgs struct {
	// The NetBIOS name to assign to the HPC Cache when it joins the Active Directory domain as a server. Length must 1-15 characters from the class [-0-9a-zA-Z].
	CacheNetBiosName pulumi.StringInput `pulumi:"cacheNetBiosName"`
	// Active Directory admin credentials used to join the HPC Cache to a domain.
	Credentials CacheActiveDirectorySettingsResponseCredentialsPtrInput `pulumi:"credentials"`
	// True if the HPC Cache is joined to the Active Directory domain.
	DomainJoined pulumi.StringInput `pulumi:"domainJoined"`
	// The fully qualified domain name of the Active Directory domain controller.
	DomainName pulumi.StringInput `pulumi:"domainName"`
	// The Active Directory domain's NetBIOS name.
	DomainNetBiosName pulumi.StringInput `pulumi:"domainNetBiosName"`
	// Primary DNS IP address used to resolve the Active Directory domain controller's fully qualified domain name.
	PrimaryDnsIpAddress pulumi.StringInput `pulumi:"primaryDnsIpAddress"`
	// Secondary DNS IP address used to resolve the Active Directory domain controller's fully qualified domain name.
	SecondaryDnsIpAddress pulumi.StringPtrInput `pulumi:"secondaryDnsIpAddress"`
}

func (CacheActiveDirectorySettingsResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CacheActiveDirectorySettingsResponse)(nil)).Elem()
}

func (i CacheActiveDirectorySettingsResponseArgs) ToCacheActiveDirectorySettingsResponseOutput() CacheActiveDirectorySettingsResponseOutput {
	return i.ToCacheActiveDirectorySettingsResponseOutputWithContext(context.Background())
}

func (i CacheActiveDirectorySettingsResponseArgs) ToCacheActiveDirectorySettingsResponseOutputWithContext(ctx context.Context) CacheActiveDirectorySettingsResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CacheActiveDirectorySettingsResponseOutput)
}

func (i CacheActiveDirectorySettingsResponseArgs) ToCacheActiveDirectorySettingsResponsePtrOutput() CacheActiveDirectorySettingsResponsePtrOutput {
	return i.ToCacheActiveDirectorySettingsResponsePtrOutputWithContext(context.Background())
}

func (i CacheActiveDirectorySettingsResponseArgs) ToCacheActiveDirectorySettingsResponsePtrOutputWithContext(ctx context.Context) CacheActiveDirectorySettingsResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CacheActiveDirectorySettingsResponseOutput).ToCacheActiveDirectorySettingsResponsePtrOutputWithContext(ctx)
}

// CacheActiveDirectorySettingsResponsePtrInput is an input type that accepts CacheActiveDirectorySettingsResponseArgs, CacheActiveDirectorySettingsResponsePtr and CacheActiveDirectorySettingsResponsePtrOutput values.
// You can construct a concrete instance of `CacheActiveDirectorySettingsResponsePtrInput` via:
//
//          CacheActiveDirectorySettingsResponseArgs{...}
//
//  or:
//
//          nil
type CacheActiveDirectorySettingsResponsePtrInput interface {
	pulumi.Input

	ToCacheActiveDirectorySettingsResponsePtrOutput() CacheActiveDirectorySettingsResponsePtrOutput
	ToCacheActiveDirectorySettingsResponsePtrOutputWithContext(context.Context) CacheActiveDirectorySettingsResponsePtrOutput
}

type cacheActiveDirectorySettingsResponsePtrType CacheActiveDirectorySettingsResponseArgs

func CacheActiveDirectorySettingsResponsePtr(v *CacheActiveDirectorySettingsResponseArgs) CacheActiveDirectorySettingsResponsePtrInput {
	return (*cacheActiveDirectorySettingsResponsePtrType)(v)
}

func (*cacheActiveDirectorySettingsResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CacheActiveDirectorySettingsResponse)(nil)).Elem()
}

func (i *cacheActiveDirectorySettingsResponsePtrType) ToCacheActiveDirectorySettingsResponsePtrOutput() CacheActiveDirectorySettingsResponsePtrOutput {
	return i.ToCacheActiveDirectorySettingsResponsePtrOutputWithContext(context.Background())
}

func (i *cacheActiveDirectorySettingsResponsePtrType) ToCacheActiveDirectorySettingsResponsePtrOutputWithContext(ctx context.Context) CacheActiveDirectorySettingsResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CacheActiveDirectorySettingsResponsePtrOutput)
}

// Active Directory settings used to join a cache to a domain.
type CacheActiveDirectorySettingsResponseOutput struct{ *pulumi.OutputState }

func (CacheActiveDirectorySettingsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CacheActiveDirectorySettingsResponse)(nil)).Elem()
}

func (o CacheActiveDirectorySettingsResponseOutput) ToCacheActiveDirectorySettingsResponseOutput() CacheActiveDirectorySettingsResponseOutput {
	return o
}

func (o CacheActiveDirectorySettingsResponseOutput) ToCacheActiveDirectorySettingsResponseOutputWithContext(ctx context.Context) CacheActiveDirectorySettingsResponseOutput {
	return o
}

func (o CacheActiveDirectorySettingsResponseOutput) ToCacheActiveDirectorySettingsResponsePtrOutput() CacheActiveDirectorySettingsResponsePtrOutput {
	return o.ToCacheActiveDirectorySettingsResponsePtrOutputWithContext(context.Background())
}

func (o CacheActiveDirectorySettingsResponseOutput) ToCacheActiveDirectorySettingsResponsePtrOutputWithContext(ctx context.Context) CacheActiveDirectorySettingsResponsePtrOutput {
	return o.ApplyT(func(v CacheActiveDirectorySettingsResponse) *CacheActiveDirectorySettingsResponse {
		return &v
	}).(CacheActiveDirectorySettingsResponsePtrOutput)
}

// The NetBIOS name to assign to the HPC Cache when it joins the Active Directory domain as a server. Length must 1-15 characters from the class [-0-9a-zA-Z].
func (o CacheActiveDirectorySettingsResponseOutput) CacheNetBiosName() pulumi.StringOutput {
	return o.ApplyT(func(v CacheActiveDirectorySettingsResponse) string { return v.CacheNetBiosName }).(pulumi.StringOutput)
}

// Active Directory admin credentials used to join the HPC Cache to a domain.
func (o CacheActiveDirectorySettingsResponseOutput) Credentials() CacheActiveDirectorySettingsResponseCredentialsPtrOutput {
	return o.ApplyT(func(v CacheActiveDirectorySettingsResponse) *CacheActiveDirectorySettingsResponseCredentials {
		return v.Credentials
	}).(CacheActiveDirectorySettingsResponseCredentialsPtrOutput)
}

// True if the HPC Cache is joined to the Active Directory domain.
func (o CacheActiveDirectorySettingsResponseOutput) DomainJoined() pulumi.StringOutput {
	return o.ApplyT(func(v CacheActiveDirectorySettingsResponse) string { return v.DomainJoined }).(pulumi.StringOutput)
}

// The fully qualified domain name of the Active Directory domain controller.
func (o CacheActiveDirectorySettingsResponseOutput) DomainName() pulumi.StringOutput {
	return o.ApplyT(func(v CacheActiveDirectorySettingsResponse) string { return v.DomainName }).(pulumi.StringOutput)
}

// The Active Directory domain's NetBIOS name.
func (o CacheActiveDirectorySettingsResponseOutput) DomainNetBiosName() pulumi.StringOutput {
	return o.ApplyT(func(v CacheActiveDirectorySettingsResponse) string { return v.DomainNetBiosName }).(pulumi.StringOutput)
}

// Primary DNS IP address used to resolve the Active Directory domain controller's fully qualified domain name.
func (o CacheActiveDirectorySettingsResponseOutput) PrimaryDnsIpAddress() pulumi.StringOutput {
	return o.ApplyT(func(v CacheActiveDirectorySettingsResponse) string { return v.PrimaryDnsIpAddress }).(pulumi.StringOutput)
}

// Secondary DNS IP address used to resolve the Active Directory domain controller's fully qualified domain name.
func (o CacheActiveDirectorySettingsResponseOutput) SecondaryDnsIpAddress() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CacheActiveDirectorySettingsResponse) *string { return v.SecondaryDnsIpAddress }).(pulumi.StringPtrOutput)
}

type CacheActiveDirectorySettingsResponsePtrOutput struct{ *pulumi.OutputState }

func (CacheActiveDirectorySettingsResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CacheActiveDirectorySettingsResponse)(nil)).Elem()
}

func (o CacheActiveDirectorySettingsResponsePtrOutput) ToCacheActiveDirectorySettingsResponsePtrOutput() CacheActiveDirectorySettingsResponsePtrOutput {
	return o
}

func (o CacheActiveDirectorySettingsResponsePtrOutput) ToCacheActiveDirectorySettingsResponsePtrOutputWithContext(ctx context.Context) CacheActiveDirectorySettingsResponsePtrOutput {
	return o
}

func (o CacheActiveDirectorySettingsResponsePtrOutput) Elem() CacheActiveDirectorySettingsResponseOutput {
	return o.ApplyT(func(v *CacheActiveDirectorySettingsResponse) CacheActiveDirectorySettingsResponse { return *v }).(CacheActiveDirectorySettingsResponseOutput)
}

// The NetBIOS name to assign to the HPC Cache when it joins the Active Directory domain as a server. Length must 1-15 characters from the class [-0-9a-zA-Z].
func (o CacheActiveDirectorySettingsResponsePtrOutput) CacheNetBiosName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CacheActiveDirectorySettingsResponse) *string {
		if v == nil {
			return nil
		}
		return &v.CacheNetBiosName
	}).(pulumi.StringPtrOutput)
}

// Active Directory admin credentials used to join the HPC Cache to a domain.
func (o CacheActiveDirectorySettingsResponsePtrOutput) Credentials() CacheActiveDirectorySettingsResponseCredentialsPtrOutput {
	return o.ApplyT(func(v *CacheActiveDirectorySettingsResponse) *CacheActiveDirectorySettingsResponseCredentials {
		if v == nil {
			return nil
		}
		return v.Credentials
	}).(CacheActiveDirectorySettingsResponseCredentialsPtrOutput)
}

// True if the HPC Cache is joined to the Active Directory domain.
func (o CacheActiveDirectorySettingsResponsePtrOutput) DomainJoined() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CacheActiveDirectorySettingsResponse) *string {
		if v == nil {
			return nil
		}
		return &v.DomainJoined
	}).(pulumi.StringPtrOutput)
}

// The fully qualified domain name of the Active Directory domain controller.
func (o CacheActiveDirectorySettingsResponsePtrOutput) DomainName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CacheActiveDirectorySettingsResponse) *string {
		if v == nil {
			return nil
		}
		return &v.DomainName
	}).(pulumi.StringPtrOutput)
}

// The Active Directory domain's NetBIOS name.
func (o CacheActiveDirectorySettingsResponsePtrOutput) DomainNetBiosName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CacheActiveDirectorySettingsResponse) *string {
		if v == nil {
			return nil
		}
		return &v.DomainNetBiosName
	}).(pulumi.StringPtrOutput)
}

// Primary DNS IP address used to resolve the Active Directory domain controller's fully qualified domain name.
func (o CacheActiveDirectorySettingsResponsePtrOutput) PrimaryDnsIpAddress() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CacheActiveDirectorySettingsResponse) *string {
		if v == nil {
			return nil
		}
		return &v.PrimaryDnsIpAddress
	}).(pulumi.StringPtrOutput)
}

// Secondary DNS IP address used to resolve the Active Directory domain controller's fully qualified domain name.
func (o CacheActiveDirectorySettingsResponsePtrOutput) SecondaryDnsIpAddress() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CacheActiveDirectorySettingsResponse) *string {
		if v == nil {
			return nil
		}
		return v.SecondaryDnsIpAddress
	}).(pulumi.StringPtrOutput)
}

// Active Directory admin credentials used to join the HPC Cache to a domain.
type CacheActiveDirectorySettingsResponseCredentials struct {
	// Plain text password of the Active Directory domain administrator. This value is stored encrypted and not returned on response.
	Password string `pulumi:"password"`
	// Username of the Active Directory domain administrator. This value is stored encrypted and not returned on response.
	Username string `pulumi:"username"`
}

// CacheActiveDirectorySettingsResponseCredentialsInput is an input type that accepts CacheActiveDirectorySettingsResponseCredentialsArgs and CacheActiveDirectorySettingsResponseCredentialsOutput values.
// You can construct a concrete instance of `CacheActiveDirectorySettingsResponseCredentialsInput` via:
//
//          CacheActiveDirectorySettingsResponseCredentialsArgs{...}
type CacheActiveDirectorySettingsResponseCredentialsInput interface {
	pulumi.Input

	ToCacheActiveDirectorySettingsResponseCredentialsOutput() CacheActiveDirectorySettingsResponseCredentialsOutput
	ToCacheActiveDirectorySettingsResponseCredentialsOutputWithContext(context.Context) CacheActiveDirectorySettingsResponseCredentialsOutput
}

// Active Directory admin credentials used to join the HPC Cache to a domain.
type CacheActiveDirectorySettingsResponseCredentialsArgs struct {
	// Plain text password of the Active Directory domain administrator. This value is stored encrypted and not returned on response.
	Password pulumi.StringInput `pulumi:"password"`
	// Username of the Active Directory domain administrator. This value is stored encrypted and not returned on response.
	Username pulumi.StringInput `pulumi:"username"`
}

func (CacheActiveDirectorySettingsResponseCredentialsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CacheActiveDirectorySettingsResponseCredentials)(nil)).Elem()
}

func (i CacheActiveDirectorySettingsResponseCredentialsArgs) ToCacheActiveDirectorySettingsResponseCredentialsOutput() CacheActiveDirectorySettingsResponseCredentialsOutput {
	return i.ToCacheActiveDirectorySettingsResponseCredentialsOutputWithContext(context.Background())
}

func (i CacheActiveDirectorySettingsResponseCredentialsArgs) ToCacheActiveDirectorySettingsResponseCredentialsOutputWithContext(ctx context.Context) CacheActiveDirectorySettingsResponseCredentialsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CacheActiveDirectorySettingsResponseCredentialsOutput)
}

func (i CacheActiveDirectorySettingsResponseCredentialsArgs) ToCacheActiveDirectorySettingsResponseCredentialsPtrOutput() CacheActiveDirectorySettingsResponseCredentialsPtrOutput {
	return i.ToCacheActiveDirectorySettingsResponseCredentialsPtrOutputWithContext(context.Background())
}

func (i CacheActiveDirectorySettingsResponseCredentialsArgs) ToCacheActiveDirectorySettingsResponseCredentialsPtrOutputWithContext(ctx context.Context) CacheActiveDirectorySettingsResponseCredentialsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CacheActiveDirectorySettingsResponseCredentialsOutput).ToCacheActiveDirectorySettingsResponseCredentialsPtrOutputWithContext(ctx)
}

// CacheActiveDirectorySettingsResponseCredentialsPtrInput is an input type that accepts CacheActiveDirectorySettingsResponseCredentialsArgs, CacheActiveDirectorySettingsResponseCredentialsPtr and CacheActiveDirectorySettingsResponseCredentialsPtrOutput values.
// You can construct a concrete instance of `CacheActiveDirectorySettingsResponseCredentialsPtrInput` via:
//
//          CacheActiveDirectorySettingsResponseCredentialsArgs{...}
//
//  or:
//
//          nil
type CacheActiveDirectorySettingsResponseCredentialsPtrInput interface {
	pulumi.Input

	ToCacheActiveDirectorySettingsResponseCredentialsPtrOutput() CacheActiveDirectorySettingsResponseCredentialsPtrOutput
	ToCacheActiveDirectorySettingsResponseCredentialsPtrOutputWithContext(context.Context) CacheActiveDirectorySettingsResponseCredentialsPtrOutput
}

type cacheActiveDirectorySettingsResponseCredentialsPtrType CacheActiveDirectorySettingsResponseCredentialsArgs

func CacheActiveDirectorySettingsResponseCredentialsPtr(v *CacheActiveDirectorySettingsResponseCredentialsArgs) CacheActiveDirectorySettingsResponseCredentialsPtrInput {
	return (*cacheActiveDirectorySettingsResponseCredentialsPtrType)(v)
}

func (*cacheActiveDirectorySettingsResponseCredentialsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CacheActiveDirectorySettingsResponseCredentials)(nil)).Elem()
}

func (i *cacheActiveDirectorySettingsResponseCredentialsPtrType) ToCacheActiveDirectorySettingsResponseCredentialsPtrOutput() CacheActiveDirectorySettingsResponseCredentialsPtrOutput {
	return i.ToCacheActiveDirectorySettingsResponseCredentialsPtrOutputWithContext(context.Background())
}

func (i *cacheActiveDirectorySettingsResponseCredentialsPtrType) ToCacheActiveDirectorySettingsResponseCredentialsPtrOutputWithContext(ctx context.Context) CacheActiveDirectorySettingsResponseCredentialsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CacheActiveDirectorySettingsResponseCredentialsPtrOutput)
}

// Active Directory admin credentials used to join the HPC Cache to a domain.
type CacheActiveDirectorySettingsResponseCredentialsOutput struct{ *pulumi.OutputState }

func (CacheActiveDirectorySettingsResponseCredentialsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CacheActiveDirectorySettingsResponseCredentials)(nil)).Elem()
}

func (o CacheActiveDirectorySettingsResponseCredentialsOutput) ToCacheActiveDirectorySettingsResponseCredentialsOutput() CacheActiveDirectorySettingsResponseCredentialsOutput {
	return o
}

func (o CacheActiveDirectorySettingsResponseCredentialsOutput) ToCacheActiveDirectorySettingsResponseCredentialsOutputWithContext(ctx context.Context) CacheActiveDirectorySettingsResponseCredentialsOutput {
	return o
}

func (o CacheActiveDirectorySettingsResponseCredentialsOutput) ToCacheActiveDirectorySettingsResponseCredentialsPtrOutput() CacheActiveDirectorySettingsResponseCredentialsPtrOutput {
	return o.ToCacheActiveDirectorySettingsResponseCredentialsPtrOutputWithContext(context.Background())
}

func (o CacheActiveDirectorySettingsResponseCredentialsOutput) ToCacheActiveDirectorySettingsResponseCredentialsPtrOutputWithContext(ctx context.Context) CacheActiveDirectorySettingsResponseCredentialsPtrOutput {
	return o.ApplyT(func(v CacheActiveDirectorySettingsResponseCredentials) *CacheActiveDirectorySettingsResponseCredentials {
		return &v
	}).(CacheActiveDirectorySettingsResponseCredentialsPtrOutput)
}

// Plain text password of the Active Directory domain administrator. This value is stored encrypted and not returned on response.
func (o CacheActiveDirectorySettingsResponseCredentialsOutput) Password() pulumi.StringOutput {
	return o.ApplyT(func(v CacheActiveDirectorySettingsResponseCredentials) string { return v.Password }).(pulumi.StringOutput)
}

// Username of the Active Directory domain administrator. This value is stored encrypted and not returned on response.
func (o CacheActiveDirectorySettingsResponseCredentialsOutput) Username() pulumi.StringOutput {
	return o.ApplyT(func(v CacheActiveDirectorySettingsResponseCredentials) string { return v.Username }).(pulumi.StringOutput)
}

type CacheActiveDirectorySettingsResponseCredentialsPtrOutput struct{ *pulumi.OutputState }

func (CacheActiveDirectorySettingsResponseCredentialsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CacheActiveDirectorySettingsResponseCredentials)(nil)).Elem()
}

func (o CacheActiveDirectorySettingsResponseCredentialsPtrOutput) ToCacheActiveDirectorySettingsResponseCredentialsPtrOutput() CacheActiveDirectorySettingsResponseCredentialsPtrOutput {
	return o
}

func (o CacheActiveDirectorySettingsResponseCredentialsPtrOutput) ToCacheActiveDirectorySettingsResponseCredentialsPtrOutputWithContext(ctx context.Context) CacheActiveDirectorySettingsResponseCredentialsPtrOutput {
	return o
}

func (o CacheActiveDirectorySettingsResponseCredentialsPtrOutput) Elem() CacheActiveDirectorySettingsResponseCredentialsOutput {
	return o.ApplyT(func(v *CacheActiveDirectorySettingsResponseCredentials) CacheActiveDirectorySettingsResponseCredentials {
		return *v
	}).(CacheActiveDirectorySettingsResponseCredentialsOutput)
}

// Plain text password of the Active Directory domain administrator. This value is stored encrypted and not returned on response.
func (o CacheActiveDirectorySettingsResponseCredentialsPtrOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CacheActiveDirectorySettingsResponseCredentials) *string {
		if v == nil {
			return nil
		}
		return &v.Password
	}).(pulumi.StringPtrOutput)
}

// Username of the Active Directory domain administrator. This value is stored encrypted and not returned on response.
func (o CacheActiveDirectorySettingsResponseCredentialsPtrOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CacheActiveDirectorySettingsResponseCredentials) *string {
		if v == nil {
			return nil
		}
		return &v.Username
	}).(pulumi.StringPtrOutput)
}

// Cache Directory Services settings.
type CacheDirectorySettings struct {
	// Specifies settings for joining the HPC Cache to an Active Directory domain.
	ActiveDirectory *CacheActiveDirectorySettings `pulumi:"activeDirectory"`
	// Specifies settings for Extended Groups. Extended Groups allows users to be members of more than 16 groups.
	UsernameDownload *CacheUsernameDownloadSettings `pulumi:"usernameDownload"`
}

// CacheDirectorySettingsInput is an input type that accepts CacheDirectorySettingsArgs and CacheDirectorySettingsOutput values.
// You can construct a concrete instance of `CacheDirectorySettingsInput` via:
//
//          CacheDirectorySettingsArgs{...}
type CacheDirectorySettingsInput interface {
	pulumi.Input

	ToCacheDirectorySettingsOutput() CacheDirectorySettingsOutput
	ToCacheDirectorySettingsOutputWithContext(context.Context) CacheDirectorySettingsOutput
}

// Cache Directory Services settings.
type CacheDirectorySettingsArgs struct {
	// Specifies settings for joining the HPC Cache to an Active Directory domain.
	ActiveDirectory CacheActiveDirectorySettingsPtrInput `pulumi:"activeDirectory"`
	// Specifies settings for Extended Groups. Extended Groups allows users to be members of more than 16 groups.
	UsernameDownload CacheUsernameDownloadSettingsPtrInput `pulumi:"usernameDownload"`
}

func (CacheDirectorySettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CacheDirectorySettings)(nil)).Elem()
}

func (i CacheDirectorySettingsArgs) ToCacheDirectorySettingsOutput() CacheDirectorySettingsOutput {
	return i.ToCacheDirectorySettingsOutputWithContext(context.Background())
}

func (i CacheDirectorySettingsArgs) ToCacheDirectorySettingsOutputWithContext(ctx context.Context) CacheDirectorySettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CacheDirectorySettingsOutput)
}

func (i CacheDirectorySettingsArgs) ToCacheDirectorySettingsPtrOutput() CacheDirectorySettingsPtrOutput {
	return i.ToCacheDirectorySettingsPtrOutputWithContext(context.Background())
}

func (i CacheDirectorySettingsArgs) ToCacheDirectorySettingsPtrOutputWithContext(ctx context.Context) CacheDirectorySettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CacheDirectorySettingsOutput).ToCacheDirectorySettingsPtrOutputWithContext(ctx)
}

// CacheDirectorySettingsPtrInput is an input type that accepts CacheDirectorySettingsArgs, CacheDirectorySettingsPtr and CacheDirectorySettingsPtrOutput values.
// You can construct a concrete instance of `CacheDirectorySettingsPtrInput` via:
//
//          CacheDirectorySettingsArgs{...}
//
//  or:
//
//          nil
type CacheDirectorySettingsPtrInput interface {
	pulumi.Input

	ToCacheDirectorySettingsPtrOutput() CacheDirectorySettingsPtrOutput
	ToCacheDirectorySettingsPtrOutputWithContext(context.Context) CacheDirectorySettingsPtrOutput
}

type cacheDirectorySettingsPtrType CacheDirectorySettingsArgs

func CacheDirectorySettingsPtr(v *CacheDirectorySettingsArgs) CacheDirectorySettingsPtrInput {
	return (*cacheDirectorySettingsPtrType)(v)
}

func (*cacheDirectorySettingsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CacheDirectorySettings)(nil)).Elem()
}

func (i *cacheDirectorySettingsPtrType) ToCacheDirectorySettingsPtrOutput() CacheDirectorySettingsPtrOutput {
	return i.ToCacheDirectorySettingsPtrOutputWithContext(context.Background())
}

func (i *cacheDirectorySettingsPtrType) ToCacheDirectorySettingsPtrOutputWithContext(ctx context.Context) CacheDirectorySettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CacheDirectorySettingsPtrOutput)
}

// Cache Directory Services settings.
type CacheDirectorySettingsOutput struct{ *pulumi.OutputState }

func (CacheDirectorySettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CacheDirectorySettings)(nil)).Elem()
}

func (o CacheDirectorySettingsOutput) ToCacheDirectorySettingsOutput() CacheDirectorySettingsOutput {
	return o
}

func (o CacheDirectorySettingsOutput) ToCacheDirectorySettingsOutputWithContext(ctx context.Context) CacheDirectorySettingsOutput {
	return o
}

func (o CacheDirectorySettingsOutput) ToCacheDirectorySettingsPtrOutput() CacheDirectorySettingsPtrOutput {
	return o.ToCacheDirectorySettingsPtrOutputWithContext(context.Background())
}

func (o CacheDirectorySettingsOutput) ToCacheDirectorySettingsPtrOutputWithContext(ctx context.Context) CacheDirectorySettingsPtrOutput {
	return o.ApplyT(func(v CacheDirectorySettings) *CacheDirectorySettings {
		return &v
	}).(CacheDirectorySettingsPtrOutput)
}

// Specifies settings for joining the HPC Cache to an Active Directory domain.
func (o CacheDirectorySettingsOutput) ActiveDirectory() CacheActiveDirectorySettingsPtrOutput {
	return o.ApplyT(func(v CacheDirectorySettings) *CacheActiveDirectorySettings { return v.ActiveDirectory }).(CacheActiveDirectorySettingsPtrOutput)
}

// Specifies settings for Extended Groups. Extended Groups allows users to be members of more than 16 groups.
func (o CacheDirectorySettingsOutput) UsernameDownload() CacheUsernameDownloadSettingsPtrOutput {
	return o.ApplyT(func(v CacheDirectorySettings) *CacheUsernameDownloadSettings { return v.UsernameDownload }).(CacheUsernameDownloadSettingsPtrOutput)
}

type CacheDirectorySettingsPtrOutput struct{ *pulumi.OutputState }

func (CacheDirectorySettingsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CacheDirectorySettings)(nil)).Elem()
}

func (o CacheDirectorySettingsPtrOutput) ToCacheDirectorySettingsPtrOutput() CacheDirectorySettingsPtrOutput {
	return o
}

func (o CacheDirectorySettingsPtrOutput) ToCacheDirectorySettingsPtrOutputWithContext(ctx context.Context) CacheDirectorySettingsPtrOutput {
	return o
}

func (o CacheDirectorySettingsPtrOutput) Elem() CacheDirectorySettingsOutput {
	return o.ApplyT(func(v *CacheDirectorySettings) CacheDirectorySettings { return *v }).(CacheDirectorySettingsOutput)
}

// Specifies settings for joining the HPC Cache to an Active Directory domain.
func (o CacheDirectorySettingsPtrOutput) ActiveDirectory() CacheActiveDirectorySettingsPtrOutput {
	return o.ApplyT(func(v *CacheDirectorySettings) *CacheActiveDirectorySettings {
		if v == nil {
			return nil
		}
		return v.ActiveDirectory
	}).(CacheActiveDirectorySettingsPtrOutput)
}

// Specifies settings for Extended Groups. Extended Groups allows users to be members of more than 16 groups.
func (o CacheDirectorySettingsPtrOutput) UsernameDownload() CacheUsernameDownloadSettingsPtrOutput {
	return o.ApplyT(func(v *CacheDirectorySettings) *CacheUsernameDownloadSettings {
		if v == nil {
			return nil
		}
		return v.UsernameDownload
	}).(CacheUsernameDownloadSettingsPtrOutput)
}

// Cache Directory Services settings.
type CacheDirectorySettingsInvokeResponse struct {
	// Specifies settings for joining the HPC Cache to an Active Directory domain.
	ActiveDirectory *CacheActiveDirectorySettingsInvokeResponse `pulumi:"activeDirectory"`
	// Specifies settings for Extended Groups. Extended Groups allows users to be members of more than 16 groups.
	UsernameDownload *CacheUsernameDownloadSettingsInvokeResponse `pulumi:"usernameDownload"`
}

// CacheDirectorySettingsInvokeResponseInput is an input type that accepts CacheDirectorySettingsInvokeResponseArgs and CacheDirectorySettingsInvokeResponseOutput values.
// You can construct a concrete instance of `CacheDirectorySettingsInvokeResponseInput` via:
//
//          CacheDirectorySettingsInvokeResponseArgs{...}
type CacheDirectorySettingsInvokeResponseInput interface {
	pulumi.Input

	ToCacheDirectorySettingsInvokeResponseOutput() CacheDirectorySettingsInvokeResponseOutput
	ToCacheDirectorySettingsInvokeResponseOutputWithContext(context.Context) CacheDirectorySettingsInvokeResponseOutput
}

// Cache Directory Services settings.
type CacheDirectorySettingsInvokeResponseArgs struct {
	// Specifies settings for joining the HPC Cache to an Active Directory domain.
	ActiveDirectory CacheActiveDirectorySettingsInvokeResponsePtrInput `pulumi:"activeDirectory"`
	// Specifies settings for Extended Groups. Extended Groups allows users to be members of more than 16 groups.
	UsernameDownload CacheUsernameDownloadSettingsInvokeResponsePtrInput `pulumi:"usernameDownload"`
}

func (CacheDirectorySettingsInvokeResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CacheDirectorySettingsInvokeResponse)(nil)).Elem()
}

func (i CacheDirectorySettingsInvokeResponseArgs) ToCacheDirectorySettingsInvokeResponseOutput() CacheDirectorySettingsInvokeResponseOutput {
	return i.ToCacheDirectorySettingsInvokeResponseOutputWithContext(context.Background())
}

func (i CacheDirectorySettingsInvokeResponseArgs) ToCacheDirectorySettingsInvokeResponseOutputWithContext(ctx context.Context) CacheDirectorySettingsInvokeResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CacheDirectorySettingsInvokeResponseOutput)
}

// Cache Directory Services settings.
type CacheDirectorySettingsInvokeResponseOutput struct{ *pulumi.OutputState }

func (CacheDirectorySettingsInvokeResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CacheDirectorySettingsInvokeResponse)(nil)).Elem()
}

func (o CacheDirectorySettingsInvokeResponseOutput) ToCacheDirectorySettingsInvokeResponseOutput() CacheDirectorySettingsInvokeResponseOutput {
	return o
}

func (o CacheDirectorySettingsInvokeResponseOutput) ToCacheDirectorySettingsInvokeResponseOutputWithContext(ctx context.Context) CacheDirectorySettingsInvokeResponseOutput {
	return o
}

// Specifies settings for joining the HPC Cache to an Active Directory domain.
func (o CacheDirectorySettingsInvokeResponseOutput) ActiveDirectory() CacheActiveDirectorySettingsInvokeResponsePtrOutput {
	return o.ApplyT(func(v CacheDirectorySettingsInvokeResponse) *CacheActiveDirectorySettingsInvokeResponse {
		return v.ActiveDirectory
	}).(CacheActiveDirectorySettingsInvokeResponsePtrOutput)
}

// Specifies settings for Extended Groups. Extended Groups allows users to be members of more than 16 groups.
func (o CacheDirectorySettingsInvokeResponseOutput) UsernameDownload() CacheUsernameDownloadSettingsInvokeResponsePtrOutput {
	return o.ApplyT(func(v CacheDirectorySettingsInvokeResponse) *CacheUsernameDownloadSettingsInvokeResponse {
		return v.UsernameDownload
	}).(CacheUsernameDownloadSettingsInvokeResponsePtrOutput)
}

// Cache Directory Services settings.
type CacheDirectorySettingsResponse struct {
	// Specifies settings for joining the HPC Cache to an Active Directory domain.
	ActiveDirectory *CacheActiveDirectorySettingsResponse `pulumi:"activeDirectory"`
	// Specifies settings for Extended Groups. Extended Groups allows users to be members of more than 16 groups.
	UsernameDownload *CacheUsernameDownloadSettingsResponse `pulumi:"usernameDownload"`
}

// CacheDirectorySettingsResponseInput is an input type that accepts CacheDirectorySettingsResponseArgs and CacheDirectorySettingsResponseOutput values.
// You can construct a concrete instance of `CacheDirectorySettingsResponseInput` via:
//
//          CacheDirectorySettingsResponseArgs{...}
type CacheDirectorySettingsResponseInput interface {
	pulumi.Input

	ToCacheDirectorySettingsResponseOutput() CacheDirectorySettingsResponseOutput
	ToCacheDirectorySettingsResponseOutputWithContext(context.Context) CacheDirectorySettingsResponseOutput
}

// Cache Directory Services settings.
type CacheDirectorySettingsResponseArgs struct {
	// Specifies settings for joining the HPC Cache to an Active Directory domain.
	ActiveDirectory CacheActiveDirectorySettingsResponsePtrInput `pulumi:"activeDirectory"`
	// Specifies settings for Extended Groups. Extended Groups allows users to be members of more than 16 groups.
	UsernameDownload CacheUsernameDownloadSettingsResponsePtrInput `pulumi:"usernameDownload"`
}

func (CacheDirectorySettingsResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CacheDirectorySettingsResponse)(nil)).Elem()
}

func (i CacheDirectorySettingsResponseArgs) ToCacheDirectorySettingsResponseOutput() CacheDirectorySettingsResponseOutput {
	return i.ToCacheDirectorySettingsResponseOutputWithContext(context.Background())
}

func (i CacheDirectorySettingsResponseArgs) ToCacheDirectorySettingsResponseOutputWithContext(ctx context.Context) CacheDirectorySettingsResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CacheDirectorySettingsResponseOutput)
}

func (i CacheDirectorySettingsResponseArgs) ToCacheDirectorySettingsResponsePtrOutput() CacheDirectorySettingsResponsePtrOutput {
	return i.ToCacheDirectorySettingsResponsePtrOutputWithContext(context.Background())
}

func (i CacheDirectorySettingsResponseArgs) ToCacheDirectorySettingsResponsePtrOutputWithContext(ctx context.Context) CacheDirectorySettingsResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CacheDirectorySettingsResponseOutput).ToCacheDirectorySettingsResponsePtrOutputWithContext(ctx)
}

// CacheDirectorySettingsResponsePtrInput is an input type that accepts CacheDirectorySettingsResponseArgs, CacheDirectorySettingsResponsePtr and CacheDirectorySettingsResponsePtrOutput values.
// You can construct a concrete instance of `CacheDirectorySettingsResponsePtrInput` via:
//
//          CacheDirectorySettingsResponseArgs{...}
//
//  or:
//
//          nil
type CacheDirectorySettingsResponsePtrInput interface {
	pulumi.Input

	ToCacheDirectorySettingsResponsePtrOutput() CacheDirectorySettingsResponsePtrOutput
	ToCacheDirectorySettingsResponsePtrOutputWithContext(context.Context) CacheDirectorySettingsResponsePtrOutput
}

type cacheDirectorySettingsResponsePtrType CacheDirectorySettingsResponseArgs

func CacheDirectorySettingsResponsePtr(v *CacheDirectorySettingsResponseArgs) CacheDirectorySettingsResponsePtrInput {
	return (*cacheDirectorySettingsResponsePtrType)(v)
}

func (*cacheDirectorySettingsResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CacheDirectorySettingsResponse)(nil)).Elem()
}

func (i *cacheDirectorySettingsResponsePtrType) ToCacheDirectorySettingsResponsePtrOutput() CacheDirectorySettingsResponsePtrOutput {
	return i.ToCacheDirectorySettingsResponsePtrOutputWithContext(context.Background())
}

func (i *cacheDirectorySettingsResponsePtrType) ToCacheDirectorySettingsResponsePtrOutputWithContext(ctx context.Context) CacheDirectorySettingsResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CacheDirectorySettingsResponsePtrOutput)
}

// Cache Directory Services settings.
type CacheDirectorySettingsResponseOutput struct{ *pulumi.OutputState }

func (CacheDirectorySettingsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CacheDirectorySettingsResponse)(nil)).Elem()
}

func (o CacheDirectorySettingsResponseOutput) ToCacheDirectorySettingsResponseOutput() CacheDirectorySettingsResponseOutput {
	return o
}

func (o CacheDirectorySettingsResponseOutput) ToCacheDirectorySettingsResponseOutputWithContext(ctx context.Context) CacheDirectorySettingsResponseOutput {
	return o
}

func (o CacheDirectorySettingsResponseOutput) ToCacheDirectorySettingsResponsePtrOutput() CacheDirectorySettingsResponsePtrOutput {
	return o.ToCacheDirectorySettingsResponsePtrOutputWithContext(context.Background())
}

func (o CacheDirectorySettingsResponseOutput) ToCacheDirectorySettingsResponsePtrOutputWithContext(ctx context.Context) CacheDirectorySettingsResponsePtrOutput {
	return o.ApplyT(func(v CacheDirectorySettingsResponse) *CacheDirectorySettingsResponse {
		return &v
	}).(CacheDirectorySettingsResponsePtrOutput)
}

// Specifies settings for joining the HPC Cache to an Active Directory domain.
func (o CacheDirectorySettingsResponseOutput) ActiveDirectory() CacheActiveDirectorySettingsResponsePtrOutput {
	return o.ApplyT(func(v CacheDirectorySettingsResponse) *CacheActiveDirectorySettingsResponse { return v.ActiveDirectory }).(CacheActiveDirectorySettingsResponsePtrOutput)
}

// Specifies settings for Extended Groups. Extended Groups allows users to be members of more than 16 groups.
func (o CacheDirectorySettingsResponseOutput) UsernameDownload() CacheUsernameDownloadSettingsResponsePtrOutput {
	return o.ApplyT(func(v CacheDirectorySettingsResponse) *CacheUsernameDownloadSettingsResponse {
		return v.UsernameDownload
	}).(CacheUsernameDownloadSettingsResponsePtrOutput)
}

type CacheDirectorySettingsResponsePtrOutput struct{ *pulumi.OutputState }

func (CacheDirectorySettingsResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CacheDirectorySettingsResponse)(nil)).Elem()
}

func (o CacheDirectorySettingsResponsePtrOutput) ToCacheDirectorySettingsResponsePtrOutput() CacheDirectorySettingsResponsePtrOutput {
	return o
}

func (o CacheDirectorySettingsResponsePtrOutput) ToCacheDirectorySettingsResponsePtrOutputWithContext(ctx context.Context) CacheDirectorySettingsResponsePtrOutput {
	return o
}

func (o CacheDirectorySettingsResponsePtrOutput) Elem() CacheDirectorySettingsResponseOutput {
	return o.ApplyT(func(v *CacheDirectorySettingsResponse) CacheDirectorySettingsResponse { return *v }).(CacheDirectorySettingsResponseOutput)
}

// Specifies settings for joining the HPC Cache to an Active Directory domain.
func (o CacheDirectorySettingsResponsePtrOutput) ActiveDirectory() CacheActiveDirectorySettingsResponsePtrOutput {
	return o.ApplyT(func(v *CacheDirectorySettingsResponse) *CacheActiveDirectorySettingsResponse {
		if v == nil {
			return nil
		}
		return v.ActiveDirectory
	}).(CacheActiveDirectorySettingsResponsePtrOutput)
}

// Specifies settings for Extended Groups. Extended Groups allows users to be members of more than 16 groups.
func (o CacheDirectorySettingsResponsePtrOutput) UsernameDownload() CacheUsernameDownloadSettingsResponsePtrOutput {
	return o.ApplyT(func(v *CacheDirectorySettingsResponse) *CacheUsernameDownloadSettingsResponse {
		if v == nil {
			return nil
		}
		return v.UsernameDownload
	}).(CacheUsernameDownloadSettingsResponsePtrOutput)
}

// Cache encryption settings.
type CacheEncryptionSettings struct {
	// Specifies the location of the key encryption key in Key Vault.
	KeyEncryptionKey *KeyVaultKeyReference `pulumi:"keyEncryptionKey"`
}

// CacheEncryptionSettingsInput is an input type that accepts CacheEncryptionSettingsArgs and CacheEncryptionSettingsOutput values.
// You can construct a concrete instance of `CacheEncryptionSettingsInput` via:
//
//          CacheEncryptionSettingsArgs{...}
type CacheEncryptionSettingsInput interface {
	pulumi.Input

	ToCacheEncryptionSettingsOutput() CacheEncryptionSettingsOutput
	ToCacheEncryptionSettingsOutputWithContext(context.Context) CacheEncryptionSettingsOutput
}

// Cache encryption settings.
type CacheEncryptionSettingsArgs struct {
	// Specifies the location of the key encryption key in Key Vault.
	KeyEncryptionKey KeyVaultKeyReferencePtrInput `pulumi:"keyEncryptionKey"`
}

func (CacheEncryptionSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CacheEncryptionSettings)(nil)).Elem()
}

func (i CacheEncryptionSettingsArgs) ToCacheEncryptionSettingsOutput() CacheEncryptionSettingsOutput {
	return i.ToCacheEncryptionSettingsOutputWithContext(context.Background())
}

func (i CacheEncryptionSettingsArgs) ToCacheEncryptionSettingsOutputWithContext(ctx context.Context) CacheEncryptionSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CacheEncryptionSettingsOutput)
}

func (i CacheEncryptionSettingsArgs) ToCacheEncryptionSettingsPtrOutput() CacheEncryptionSettingsPtrOutput {
	return i.ToCacheEncryptionSettingsPtrOutputWithContext(context.Background())
}

func (i CacheEncryptionSettingsArgs) ToCacheEncryptionSettingsPtrOutputWithContext(ctx context.Context) CacheEncryptionSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CacheEncryptionSettingsOutput).ToCacheEncryptionSettingsPtrOutputWithContext(ctx)
}

// CacheEncryptionSettingsPtrInput is an input type that accepts CacheEncryptionSettingsArgs, CacheEncryptionSettingsPtr and CacheEncryptionSettingsPtrOutput values.
// You can construct a concrete instance of `CacheEncryptionSettingsPtrInput` via:
//
//          CacheEncryptionSettingsArgs{...}
//
//  or:
//
//          nil
type CacheEncryptionSettingsPtrInput interface {
	pulumi.Input

	ToCacheEncryptionSettingsPtrOutput() CacheEncryptionSettingsPtrOutput
	ToCacheEncryptionSettingsPtrOutputWithContext(context.Context) CacheEncryptionSettingsPtrOutput
}

type cacheEncryptionSettingsPtrType CacheEncryptionSettingsArgs

func CacheEncryptionSettingsPtr(v *CacheEncryptionSettingsArgs) CacheEncryptionSettingsPtrInput {
	return (*cacheEncryptionSettingsPtrType)(v)
}

func (*cacheEncryptionSettingsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CacheEncryptionSettings)(nil)).Elem()
}

func (i *cacheEncryptionSettingsPtrType) ToCacheEncryptionSettingsPtrOutput() CacheEncryptionSettingsPtrOutput {
	return i.ToCacheEncryptionSettingsPtrOutputWithContext(context.Background())
}

func (i *cacheEncryptionSettingsPtrType) ToCacheEncryptionSettingsPtrOutputWithContext(ctx context.Context) CacheEncryptionSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CacheEncryptionSettingsPtrOutput)
}

// Cache encryption settings.
type CacheEncryptionSettingsOutput struct{ *pulumi.OutputState }

func (CacheEncryptionSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CacheEncryptionSettings)(nil)).Elem()
}

func (o CacheEncryptionSettingsOutput) ToCacheEncryptionSettingsOutput() CacheEncryptionSettingsOutput {
	return o
}

func (o CacheEncryptionSettingsOutput) ToCacheEncryptionSettingsOutputWithContext(ctx context.Context) CacheEncryptionSettingsOutput {
	return o
}

func (o CacheEncryptionSettingsOutput) ToCacheEncryptionSettingsPtrOutput() CacheEncryptionSettingsPtrOutput {
	return o.ToCacheEncryptionSettingsPtrOutputWithContext(context.Background())
}

func (o CacheEncryptionSettingsOutput) ToCacheEncryptionSettingsPtrOutputWithContext(ctx context.Context) CacheEncryptionSettingsPtrOutput {
	return o.ApplyT(func(v CacheEncryptionSettings) *CacheEncryptionSettings {
		return &v
	}).(CacheEncryptionSettingsPtrOutput)
}

// Specifies the location of the key encryption key in Key Vault.
func (o CacheEncryptionSettingsOutput) KeyEncryptionKey() KeyVaultKeyReferencePtrOutput {
	return o.ApplyT(func(v CacheEncryptionSettings) *KeyVaultKeyReference { return v.KeyEncryptionKey }).(KeyVaultKeyReferencePtrOutput)
}

type CacheEncryptionSettingsPtrOutput struct{ *pulumi.OutputState }

func (CacheEncryptionSettingsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CacheEncryptionSettings)(nil)).Elem()
}

func (o CacheEncryptionSettingsPtrOutput) ToCacheEncryptionSettingsPtrOutput() CacheEncryptionSettingsPtrOutput {
	return o
}

func (o CacheEncryptionSettingsPtrOutput) ToCacheEncryptionSettingsPtrOutputWithContext(ctx context.Context) CacheEncryptionSettingsPtrOutput {
	return o
}

func (o CacheEncryptionSettingsPtrOutput) Elem() CacheEncryptionSettingsOutput {
	return o.ApplyT(func(v *CacheEncryptionSettings) CacheEncryptionSettings { return *v }).(CacheEncryptionSettingsOutput)
}

// Specifies the location of the key encryption key in Key Vault.
func (o CacheEncryptionSettingsPtrOutput) KeyEncryptionKey() KeyVaultKeyReferencePtrOutput {
	return o.ApplyT(func(v *CacheEncryptionSettings) *KeyVaultKeyReference {
		if v == nil {
			return nil
		}
		return v.KeyEncryptionKey
	}).(KeyVaultKeyReferencePtrOutput)
}

// Cache encryption settings.
type CacheEncryptionSettingsInvokeResponse struct {
	// Specifies the location of the key encryption key in Key Vault.
	KeyEncryptionKey *KeyVaultKeyReferenceInvokeResponse `pulumi:"keyEncryptionKey"`
}

// CacheEncryptionSettingsInvokeResponseInput is an input type that accepts CacheEncryptionSettingsInvokeResponseArgs and CacheEncryptionSettingsInvokeResponseOutput values.
// You can construct a concrete instance of `CacheEncryptionSettingsInvokeResponseInput` via:
//
//          CacheEncryptionSettingsInvokeResponseArgs{...}
type CacheEncryptionSettingsInvokeResponseInput interface {
	pulumi.Input

	ToCacheEncryptionSettingsInvokeResponseOutput() CacheEncryptionSettingsInvokeResponseOutput
	ToCacheEncryptionSettingsInvokeResponseOutputWithContext(context.Context) CacheEncryptionSettingsInvokeResponseOutput
}

// Cache encryption settings.
type CacheEncryptionSettingsInvokeResponseArgs struct {
	// Specifies the location of the key encryption key in Key Vault.
	KeyEncryptionKey KeyVaultKeyReferenceInvokeResponsePtrInput `pulumi:"keyEncryptionKey"`
}

func (CacheEncryptionSettingsInvokeResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CacheEncryptionSettingsInvokeResponse)(nil)).Elem()
}

func (i CacheEncryptionSettingsInvokeResponseArgs) ToCacheEncryptionSettingsInvokeResponseOutput() CacheEncryptionSettingsInvokeResponseOutput {
	return i.ToCacheEncryptionSettingsInvokeResponseOutputWithContext(context.Background())
}

func (i CacheEncryptionSettingsInvokeResponseArgs) ToCacheEncryptionSettingsInvokeResponseOutputWithContext(ctx context.Context) CacheEncryptionSettingsInvokeResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CacheEncryptionSettingsInvokeResponseOutput)
}

// Cache encryption settings.
type CacheEncryptionSettingsInvokeResponseOutput struct{ *pulumi.OutputState }

func (CacheEncryptionSettingsInvokeResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CacheEncryptionSettingsInvokeResponse)(nil)).Elem()
}

func (o CacheEncryptionSettingsInvokeResponseOutput) ToCacheEncryptionSettingsInvokeResponseOutput() CacheEncryptionSettingsInvokeResponseOutput {
	return o
}

func (o CacheEncryptionSettingsInvokeResponseOutput) ToCacheEncryptionSettingsInvokeResponseOutputWithContext(ctx context.Context) CacheEncryptionSettingsInvokeResponseOutput {
	return o
}

// Specifies the location of the key encryption key in Key Vault.
func (o CacheEncryptionSettingsInvokeResponseOutput) KeyEncryptionKey() KeyVaultKeyReferenceInvokeResponsePtrOutput {
	return o.ApplyT(func(v CacheEncryptionSettingsInvokeResponse) *KeyVaultKeyReferenceInvokeResponse {
		return v.KeyEncryptionKey
	}).(KeyVaultKeyReferenceInvokeResponsePtrOutput)
}

// Cache encryption settings.
type CacheEncryptionSettingsResponse struct {
	// Specifies the location of the key encryption key in Key Vault.
	KeyEncryptionKey *KeyVaultKeyReferenceResponse `pulumi:"keyEncryptionKey"`
}

// CacheEncryptionSettingsResponseInput is an input type that accepts CacheEncryptionSettingsResponseArgs and CacheEncryptionSettingsResponseOutput values.
// You can construct a concrete instance of `CacheEncryptionSettingsResponseInput` via:
//
//          CacheEncryptionSettingsResponseArgs{...}
type CacheEncryptionSettingsResponseInput interface {
	pulumi.Input

	ToCacheEncryptionSettingsResponseOutput() CacheEncryptionSettingsResponseOutput
	ToCacheEncryptionSettingsResponseOutputWithContext(context.Context) CacheEncryptionSettingsResponseOutput
}

// Cache encryption settings.
type CacheEncryptionSettingsResponseArgs struct {
	// Specifies the location of the key encryption key in Key Vault.
	KeyEncryptionKey KeyVaultKeyReferenceResponsePtrInput `pulumi:"keyEncryptionKey"`
}

func (CacheEncryptionSettingsResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CacheEncryptionSettingsResponse)(nil)).Elem()
}

func (i CacheEncryptionSettingsResponseArgs) ToCacheEncryptionSettingsResponseOutput() CacheEncryptionSettingsResponseOutput {
	return i.ToCacheEncryptionSettingsResponseOutputWithContext(context.Background())
}

func (i CacheEncryptionSettingsResponseArgs) ToCacheEncryptionSettingsResponseOutputWithContext(ctx context.Context) CacheEncryptionSettingsResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CacheEncryptionSettingsResponseOutput)
}

func (i CacheEncryptionSettingsResponseArgs) ToCacheEncryptionSettingsResponsePtrOutput() CacheEncryptionSettingsResponsePtrOutput {
	return i.ToCacheEncryptionSettingsResponsePtrOutputWithContext(context.Background())
}

func (i CacheEncryptionSettingsResponseArgs) ToCacheEncryptionSettingsResponsePtrOutputWithContext(ctx context.Context) CacheEncryptionSettingsResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CacheEncryptionSettingsResponseOutput).ToCacheEncryptionSettingsResponsePtrOutputWithContext(ctx)
}

// CacheEncryptionSettingsResponsePtrInput is an input type that accepts CacheEncryptionSettingsResponseArgs, CacheEncryptionSettingsResponsePtr and CacheEncryptionSettingsResponsePtrOutput values.
// You can construct a concrete instance of `CacheEncryptionSettingsResponsePtrInput` via:
//
//          CacheEncryptionSettingsResponseArgs{...}
//
//  or:
//
//          nil
type CacheEncryptionSettingsResponsePtrInput interface {
	pulumi.Input

	ToCacheEncryptionSettingsResponsePtrOutput() CacheEncryptionSettingsResponsePtrOutput
	ToCacheEncryptionSettingsResponsePtrOutputWithContext(context.Context) CacheEncryptionSettingsResponsePtrOutput
}

type cacheEncryptionSettingsResponsePtrType CacheEncryptionSettingsResponseArgs

func CacheEncryptionSettingsResponsePtr(v *CacheEncryptionSettingsResponseArgs) CacheEncryptionSettingsResponsePtrInput {
	return (*cacheEncryptionSettingsResponsePtrType)(v)
}

func (*cacheEncryptionSettingsResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CacheEncryptionSettingsResponse)(nil)).Elem()
}

func (i *cacheEncryptionSettingsResponsePtrType) ToCacheEncryptionSettingsResponsePtrOutput() CacheEncryptionSettingsResponsePtrOutput {
	return i.ToCacheEncryptionSettingsResponsePtrOutputWithContext(context.Background())
}

func (i *cacheEncryptionSettingsResponsePtrType) ToCacheEncryptionSettingsResponsePtrOutputWithContext(ctx context.Context) CacheEncryptionSettingsResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CacheEncryptionSettingsResponsePtrOutput)
}

// Cache encryption settings.
type CacheEncryptionSettingsResponseOutput struct{ *pulumi.OutputState }

func (CacheEncryptionSettingsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CacheEncryptionSettingsResponse)(nil)).Elem()
}

func (o CacheEncryptionSettingsResponseOutput) ToCacheEncryptionSettingsResponseOutput() CacheEncryptionSettingsResponseOutput {
	return o
}

func (o CacheEncryptionSettingsResponseOutput) ToCacheEncryptionSettingsResponseOutputWithContext(ctx context.Context) CacheEncryptionSettingsResponseOutput {
	return o
}

func (o CacheEncryptionSettingsResponseOutput) ToCacheEncryptionSettingsResponsePtrOutput() CacheEncryptionSettingsResponsePtrOutput {
	return o.ToCacheEncryptionSettingsResponsePtrOutputWithContext(context.Background())
}

func (o CacheEncryptionSettingsResponseOutput) ToCacheEncryptionSettingsResponsePtrOutputWithContext(ctx context.Context) CacheEncryptionSettingsResponsePtrOutput {
	return o.ApplyT(func(v CacheEncryptionSettingsResponse) *CacheEncryptionSettingsResponse {
		return &v
	}).(CacheEncryptionSettingsResponsePtrOutput)
}

// Specifies the location of the key encryption key in Key Vault.
func (o CacheEncryptionSettingsResponseOutput) KeyEncryptionKey() KeyVaultKeyReferenceResponsePtrOutput {
	return o.ApplyT(func(v CacheEncryptionSettingsResponse) *KeyVaultKeyReferenceResponse { return v.KeyEncryptionKey }).(KeyVaultKeyReferenceResponsePtrOutput)
}

type CacheEncryptionSettingsResponsePtrOutput struct{ *pulumi.OutputState }

func (CacheEncryptionSettingsResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CacheEncryptionSettingsResponse)(nil)).Elem()
}

func (o CacheEncryptionSettingsResponsePtrOutput) ToCacheEncryptionSettingsResponsePtrOutput() CacheEncryptionSettingsResponsePtrOutput {
	return o
}

func (o CacheEncryptionSettingsResponsePtrOutput) ToCacheEncryptionSettingsResponsePtrOutputWithContext(ctx context.Context) CacheEncryptionSettingsResponsePtrOutput {
	return o
}

func (o CacheEncryptionSettingsResponsePtrOutput) Elem() CacheEncryptionSettingsResponseOutput {
	return o.ApplyT(func(v *CacheEncryptionSettingsResponse) CacheEncryptionSettingsResponse { return *v }).(CacheEncryptionSettingsResponseOutput)
}

// Specifies the location of the key encryption key in Key Vault.
func (o CacheEncryptionSettingsResponsePtrOutput) KeyEncryptionKey() KeyVaultKeyReferenceResponsePtrOutput {
	return o.ApplyT(func(v *CacheEncryptionSettingsResponse) *KeyVaultKeyReferenceResponse {
		if v == nil {
			return nil
		}
		return v.KeyEncryptionKey
	}).(KeyVaultKeyReferenceResponsePtrOutput)
}

// An indication of Cache health. Gives more information about health than just that related to provisioning.
type CacheHealthInvokeResponse struct {
	// List of Cache health states.
	State *string `pulumi:"state"`
	// Describes explanation of state.
	StatusDescription *string `pulumi:"statusDescription"`
}

// CacheHealthInvokeResponseInput is an input type that accepts CacheHealthInvokeResponseArgs and CacheHealthInvokeResponseOutput values.
// You can construct a concrete instance of `CacheHealthInvokeResponseInput` via:
//
//          CacheHealthInvokeResponseArgs{...}
type CacheHealthInvokeResponseInput interface {
	pulumi.Input

	ToCacheHealthInvokeResponseOutput() CacheHealthInvokeResponseOutput
	ToCacheHealthInvokeResponseOutputWithContext(context.Context) CacheHealthInvokeResponseOutput
}

// An indication of Cache health. Gives more information about health than just that related to provisioning.
type CacheHealthInvokeResponseArgs struct {
	// List of Cache health states.
	State pulumi.StringPtrInput `pulumi:"state"`
	// Describes explanation of state.
	StatusDescription pulumi.StringPtrInput `pulumi:"statusDescription"`
}

func (CacheHealthInvokeResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CacheHealthInvokeResponse)(nil)).Elem()
}

func (i CacheHealthInvokeResponseArgs) ToCacheHealthInvokeResponseOutput() CacheHealthInvokeResponseOutput {
	return i.ToCacheHealthInvokeResponseOutputWithContext(context.Background())
}

func (i CacheHealthInvokeResponseArgs) ToCacheHealthInvokeResponseOutputWithContext(ctx context.Context) CacheHealthInvokeResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CacheHealthInvokeResponseOutput)
}

// An indication of Cache health. Gives more information about health than just that related to provisioning.
type CacheHealthInvokeResponseOutput struct{ *pulumi.OutputState }

func (CacheHealthInvokeResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CacheHealthInvokeResponse)(nil)).Elem()
}

func (o CacheHealthInvokeResponseOutput) ToCacheHealthInvokeResponseOutput() CacheHealthInvokeResponseOutput {
	return o
}

func (o CacheHealthInvokeResponseOutput) ToCacheHealthInvokeResponseOutputWithContext(ctx context.Context) CacheHealthInvokeResponseOutput {
	return o
}

// List of Cache health states.
func (o CacheHealthInvokeResponseOutput) State() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CacheHealthInvokeResponse) *string { return v.State }).(pulumi.StringPtrOutput)
}

// Describes explanation of state.
func (o CacheHealthInvokeResponseOutput) StatusDescription() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CacheHealthInvokeResponse) *string { return v.StatusDescription }).(pulumi.StringPtrOutput)
}

// An indication of Cache health. Gives more information about health than just that related to provisioning.
type CacheHealthResponse struct {
	// List of Cache health states.
	State *string `pulumi:"state"`
	// Describes explanation of state.
	StatusDescription *string `pulumi:"statusDescription"`
}

// CacheHealthResponseInput is an input type that accepts CacheHealthResponseArgs and CacheHealthResponseOutput values.
// You can construct a concrete instance of `CacheHealthResponseInput` via:
//
//          CacheHealthResponseArgs{...}
type CacheHealthResponseInput interface {
	pulumi.Input

	ToCacheHealthResponseOutput() CacheHealthResponseOutput
	ToCacheHealthResponseOutputWithContext(context.Context) CacheHealthResponseOutput
}

// An indication of Cache health. Gives more information about health than just that related to provisioning.
type CacheHealthResponseArgs struct {
	// List of Cache health states.
	State pulumi.StringPtrInput `pulumi:"state"`
	// Describes explanation of state.
	StatusDescription pulumi.StringPtrInput `pulumi:"statusDescription"`
}

func (CacheHealthResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CacheHealthResponse)(nil)).Elem()
}

func (i CacheHealthResponseArgs) ToCacheHealthResponseOutput() CacheHealthResponseOutput {
	return i.ToCacheHealthResponseOutputWithContext(context.Background())
}

func (i CacheHealthResponseArgs) ToCacheHealthResponseOutputWithContext(ctx context.Context) CacheHealthResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CacheHealthResponseOutput)
}

func (i CacheHealthResponseArgs) ToCacheHealthResponsePtrOutput() CacheHealthResponsePtrOutput {
	return i.ToCacheHealthResponsePtrOutputWithContext(context.Background())
}

func (i CacheHealthResponseArgs) ToCacheHealthResponsePtrOutputWithContext(ctx context.Context) CacheHealthResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CacheHealthResponseOutput).ToCacheHealthResponsePtrOutputWithContext(ctx)
}

// CacheHealthResponsePtrInput is an input type that accepts CacheHealthResponseArgs, CacheHealthResponsePtr and CacheHealthResponsePtrOutput values.
// You can construct a concrete instance of `CacheHealthResponsePtrInput` via:
//
//          CacheHealthResponseArgs{...}
//
//  or:
//
//          nil
type CacheHealthResponsePtrInput interface {
	pulumi.Input

	ToCacheHealthResponsePtrOutput() CacheHealthResponsePtrOutput
	ToCacheHealthResponsePtrOutputWithContext(context.Context) CacheHealthResponsePtrOutput
}

type cacheHealthResponsePtrType CacheHealthResponseArgs

func CacheHealthResponsePtr(v *CacheHealthResponseArgs) CacheHealthResponsePtrInput {
	return (*cacheHealthResponsePtrType)(v)
}

func (*cacheHealthResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CacheHealthResponse)(nil)).Elem()
}

func (i *cacheHealthResponsePtrType) ToCacheHealthResponsePtrOutput() CacheHealthResponsePtrOutput {
	return i.ToCacheHealthResponsePtrOutputWithContext(context.Background())
}

func (i *cacheHealthResponsePtrType) ToCacheHealthResponsePtrOutputWithContext(ctx context.Context) CacheHealthResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CacheHealthResponsePtrOutput)
}

// An indication of Cache health. Gives more information about health than just that related to provisioning.
type CacheHealthResponseOutput struct{ *pulumi.OutputState }

func (CacheHealthResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CacheHealthResponse)(nil)).Elem()
}

func (o CacheHealthResponseOutput) ToCacheHealthResponseOutput() CacheHealthResponseOutput {
	return o
}

func (o CacheHealthResponseOutput) ToCacheHealthResponseOutputWithContext(ctx context.Context) CacheHealthResponseOutput {
	return o
}

func (o CacheHealthResponseOutput) ToCacheHealthResponsePtrOutput() CacheHealthResponsePtrOutput {
	return o.ToCacheHealthResponsePtrOutputWithContext(context.Background())
}

func (o CacheHealthResponseOutput) ToCacheHealthResponsePtrOutputWithContext(ctx context.Context) CacheHealthResponsePtrOutput {
	return o.ApplyT(func(v CacheHealthResponse) *CacheHealthResponse {
		return &v
	}).(CacheHealthResponsePtrOutput)
}

// List of Cache health states.
func (o CacheHealthResponseOutput) State() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CacheHealthResponse) *string { return v.State }).(pulumi.StringPtrOutput)
}

// Describes explanation of state.
func (o CacheHealthResponseOutput) StatusDescription() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CacheHealthResponse) *string { return v.StatusDescription }).(pulumi.StringPtrOutput)
}

type CacheHealthResponsePtrOutput struct{ *pulumi.OutputState }

func (CacheHealthResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CacheHealthResponse)(nil)).Elem()
}

func (o CacheHealthResponsePtrOutput) ToCacheHealthResponsePtrOutput() CacheHealthResponsePtrOutput {
	return o
}

func (o CacheHealthResponsePtrOutput) ToCacheHealthResponsePtrOutputWithContext(ctx context.Context) CacheHealthResponsePtrOutput {
	return o
}

func (o CacheHealthResponsePtrOutput) Elem() CacheHealthResponseOutput {
	return o.ApplyT(func(v *CacheHealthResponse) CacheHealthResponse { return *v }).(CacheHealthResponseOutput)
}

// List of Cache health states.
func (o CacheHealthResponsePtrOutput) State() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CacheHealthResponse) *string {
		if v == nil {
			return nil
		}
		return v.State
	}).(pulumi.StringPtrOutput)
}

// Describes explanation of state.
func (o CacheHealthResponsePtrOutput) StatusDescription() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CacheHealthResponse) *string {
		if v == nil {
			return nil
		}
		return v.StatusDescription
	}).(pulumi.StringPtrOutput)
}

// Cache identity properties.
type CacheIdentity struct {
	// The type of identity used for the cache
	Type *string `pulumi:"type"`
}

// CacheIdentityInput is an input type that accepts CacheIdentityArgs and CacheIdentityOutput values.
// You can construct a concrete instance of `CacheIdentityInput` via:
//
//          CacheIdentityArgs{...}
type CacheIdentityInput interface {
	pulumi.Input

	ToCacheIdentityOutput() CacheIdentityOutput
	ToCacheIdentityOutputWithContext(context.Context) CacheIdentityOutput
}

// Cache identity properties.
type CacheIdentityArgs struct {
	// The type of identity used for the cache
	Type CacheIdentityType `pulumi:"type"`
}

func (CacheIdentityArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CacheIdentity)(nil)).Elem()
}

func (i CacheIdentityArgs) ToCacheIdentityOutput() CacheIdentityOutput {
	return i.ToCacheIdentityOutputWithContext(context.Background())
}

func (i CacheIdentityArgs) ToCacheIdentityOutputWithContext(ctx context.Context) CacheIdentityOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CacheIdentityOutput)
}

func (i CacheIdentityArgs) ToCacheIdentityPtrOutput() CacheIdentityPtrOutput {
	return i.ToCacheIdentityPtrOutputWithContext(context.Background())
}

func (i CacheIdentityArgs) ToCacheIdentityPtrOutputWithContext(ctx context.Context) CacheIdentityPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CacheIdentityOutput).ToCacheIdentityPtrOutputWithContext(ctx)
}

// CacheIdentityPtrInput is an input type that accepts CacheIdentityArgs, CacheIdentityPtr and CacheIdentityPtrOutput values.
// You can construct a concrete instance of `CacheIdentityPtrInput` via:
//
//          CacheIdentityArgs{...}
//
//  or:
//
//          nil
type CacheIdentityPtrInput interface {
	pulumi.Input

	ToCacheIdentityPtrOutput() CacheIdentityPtrOutput
	ToCacheIdentityPtrOutputWithContext(context.Context) CacheIdentityPtrOutput
}

type cacheIdentityPtrType CacheIdentityArgs

func CacheIdentityPtr(v *CacheIdentityArgs) CacheIdentityPtrInput {
	return (*cacheIdentityPtrType)(v)
}

func (*cacheIdentityPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CacheIdentity)(nil)).Elem()
}

func (i *cacheIdentityPtrType) ToCacheIdentityPtrOutput() CacheIdentityPtrOutput {
	return i.ToCacheIdentityPtrOutputWithContext(context.Background())
}

func (i *cacheIdentityPtrType) ToCacheIdentityPtrOutputWithContext(ctx context.Context) CacheIdentityPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CacheIdentityPtrOutput)
}

// Cache identity properties.
type CacheIdentityOutput struct{ *pulumi.OutputState }

func (CacheIdentityOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CacheIdentity)(nil)).Elem()
}

func (o CacheIdentityOutput) ToCacheIdentityOutput() CacheIdentityOutput {
	return o
}

func (o CacheIdentityOutput) ToCacheIdentityOutputWithContext(ctx context.Context) CacheIdentityOutput {
	return o
}

func (o CacheIdentityOutput) ToCacheIdentityPtrOutput() CacheIdentityPtrOutput {
	return o.ToCacheIdentityPtrOutputWithContext(context.Background())
}

func (o CacheIdentityOutput) ToCacheIdentityPtrOutputWithContext(ctx context.Context) CacheIdentityPtrOutput {
	return o.ApplyT(func(v CacheIdentity) *CacheIdentity {
		return &v
	}).(CacheIdentityPtrOutput)
}

// The type of identity used for the cache
func (o CacheIdentityOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CacheIdentity) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type CacheIdentityPtrOutput struct{ *pulumi.OutputState }

func (CacheIdentityPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CacheIdentity)(nil)).Elem()
}

func (o CacheIdentityPtrOutput) ToCacheIdentityPtrOutput() CacheIdentityPtrOutput {
	return o
}

func (o CacheIdentityPtrOutput) ToCacheIdentityPtrOutputWithContext(ctx context.Context) CacheIdentityPtrOutput {
	return o
}

func (o CacheIdentityPtrOutput) Elem() CacheIdentityOutput {
	return o.ApplyT(func(v *CacheIdentity) CacheIdentity { return *v }).(CacheIdentityOutput)
}

// The type of identity used for the cache
func (o CacheIdentityPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CacheIdentity) *string {
		if v == nil {
			return nil
		}
		return v.Type
	}).(pulumi.StringPtrOutput)
}

// Cache identity properties.
type CacheIdentityInvokeResponse struct {
	// The principal id of the cache.
	PrincipalId string `pulumi:"principalId"`
	// The tenant id associated with the cache.
	TenantId string `pulumi:"tenantId"`
	// The type of identity used for the cache
	Type *string `pulumi:"type"`
}

// CacheIdentityInvokeResponseInput is an input type that accepts CacheIdentityInvokeResponseArgs and CacheIdentityInvokeResponseOutput values.
// You can construct a concrete instance of `CacheIdentityInvokeResponseInput` via:
//
//          CacheIdentityInvokeResponseArgs{...}
type CacheIdentityInvokeResponseInput interface {
	pulumi.Input

	ToCacheIdentityInvokeResponseOutput() CacheIdentityInvokeResponseOutput
	ToCacheIdentityInvokeResponseOutputWithContext(context.Context) CacheIdentityInvokeResponseOutput
}

// Cache identity properties.
type CacheIdentityInvokeResponseArgs struct {
	// The principal id of the cache.
	PrincipalId pulumi.StringInput `pulumi:"principalId"`
	// The tenant id associated with the cache.
	TenantId pulumi.StringInput `pulumi:"tenantId"`
	// The type of identity used for the cache
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (CacheIdentityInvokeResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CacheIdentityInvokeResponse)(nil)).Elem()
}

func (i CacheIdentityInvokeResponseArgs) ToCacheIdentityInvokeResponseOutput() CacheIdentityInvokeResponseOutput {
	return i.ToCacheIdentityInvokeResponseOutputWithContext(context.Background())
}

func (i CacheIdentityInvokeResponseArgs) ToCacheIdentityInvokeResponseOutputWithContext(ctx context.Context) CacheIdentityInvokeResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CacheIdentityInvokeResponseOutput)
}

// Cache identity properties.
type CacheIdentityInvokeResponseOutput struct{ *pulumi.OutputState }

func (CacheIdentityInvokeResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CacheIdentityInvokeResponse)(nil)).Elem()
}

func (o CacheIdentityInvokeResponseOutput) ToCacheIdentityInvokeResponseOutput() CacheIdentityInvokeResponseOutput {
	return o
}

func (o CacheIdentityInvokeResponseOutput) ToCacheIdentityInvokeResponseOutputWithContext(ctx context.Context) CacheIdentityInvokeResponseOutput {
	return o
}

// The principal id of the cache.
func (o CacheIdentityInvokeResponseOutput) PrincipalId() pulumi.StringOutput {
	return o.ApplyT(func(v CacheIdentityInvokeResponse) string { return v.PrincipalId }).(pulumi.StringOutput)
}

// The tenant id associated with the cache.
func (o CacheIdentityInvokeResponseOutput) TenantId() pulumi.StringOutput {
	return o.ApplyT(func(v CacheIdentityInvokeResponse) string { return v.TenantId }).(pulumi.StringOutput)
}

// The type of identity used for the cache
func (o CacheIdentityInvokeResponseOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CacheIdentityInvokeResponse) *string { return v.Type }).(pulumi.StringPtrOutput)
}

// Cache identity properties.
type CacheIdentityResponse struct {
	// The principal id of the cache.
	PrincipalId string `pulumi:"principalId"`
	// The tenant id associated with the cache.
	TenantId string `pulumi:"tenantId"`
	// The type of identity used for the cache
	Type *string `pulumi:"type"`
}

// CacheIdentityResponseInput is an input type that accepts CacheIdentityResponseArgs and CacheIdentityResponseOutput values.
// You can construct a concrete instance of `CacheIdentityResponseInput` via:
//
//          CacheIdentityResponseArgs{...}
type CacheIdentityResponseInput interface {
	pulumi.Input

	ToCacheIdentityResponseOutput() CacheIdentityResponseOutput
	ToCacheIdentityResponseOutputWithContext(context.Context) CacheIdentityResponseOutput
}

// Cache identity properties.
type CacheIdentityResponseArgs struct {
	// The principal id of the cache.
	PrincipalId pulumi.StringInput `pulumi:"principalId"`
	// The tenant id associated with the cache.
	TenantId pulumi.StringInput `pulumi:"tenantId"`
	// The type of identity used for the cache
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (CacheIdentityResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CacheIdentityResponse)(nil)).Elem()
}

func (i CacheIdentityResponseArgs) ToCacheIdentityResponseOutput() CacheIdentityResponseOutput {
	return i.ToCacheIdentityResponseOutputWithContext(context.Background())
}

func (i CacheIdentityResponseArgs) ToCacheIdentityResponseOutputWithContext(ctx context.Context) CacheIdentityResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CacheIdentityResponseOutput)
}

func (i CacheIdentityResponseArgs) ToCacheIdentityResponsePtrOutput() CacheIdentityResponsePtrOutput {
	return i.ToCacheIdentityResponsePtrOutputWithContext(context.Background())
}

func (i CacheIdentityResponseArgs) ToCacheIdentityResponsePtrOutputWithContext(ctx context.Context) CacheIdentityResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CacheIdentityResponseOutput).ToCacheIdentityResponsePtrOutputWithContext(ctx)
}

// CacheIdentityResponsePtrInput is an input type that accepts CacheIdentityResponseArgs, CacheIdentityResponsePtr and CacheIdentityResponsePtrOutput values.
// You can construct a concrete instance of `CacheIdentityResponsePtrInput` via:
//
//          CacheIdentityResponseArgs{...}
//
//  or:
//
//          nil
type CacheIdentityResponsePtrInput interface {
	pulumi.Input

	ToCacheIdentityResponsePtrOutput() CacheIdentityResponsePtrOutput
	ToCacheIdentityResponsePtrOutputWithContext(context.Context) CacheIdentityResponsePtrOutput
}

type cacheIdentityResponsePtrType CacheIdentityResponseArgs

func CacheIdentityResponsePtr(v *CacheIdentityResponseArgs) CacheIdentityResponsePtrInput {
	return (*cacheIdentityResponsePtrType)(v)
}

func (*cacheIdentityResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CacheIdentityResponse)(nil)).Elem()
}

func (i *cacheIdentityResponsePtrType) ToCacheIdentityResponsePtrOutput() CacheIdentityResponsePtrOutput {
	return i.ToCacheIdentityResponsePtrOutputWithContext(context.Background())
}

func (i *cacheIdentityResponsePtrType) ToCacheIdentityResponsePtrOutputWithContext(ctx context.Context) CacheIdentityResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CacheIdentityResponsePtrOutput)
}

// Cache identity properties.
type CacheIdentityResponseOutput struct{ *pulumi.OutputState }

func (CacheIdentityResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CacheIdentityResponse)(nil)).Elem()
}

func (o CacheIdentityResponseOutput) ToCacheIdentityResponseOutput() CacheIdentityResponseOutput {
	return o
}

func (o CacheIdentityResponseOutput) ToCacheIdentityResponseOutputWithContext(ctx context.Context) CacheIdentityResponseOutput {
	return o
}

func (o CacheIdentityResponseOutput) ToCacheIdentityResponsePtrOutput() CacheIdentityResponsePtrOutput {
	return o.ToCacheIdentityResponsePtrOutputWithContext(context.Background())
}

func (o CacheIdentityResponseOutput) ToCacheIdentityResponsePtrOutputWithContext(ctx context.Context) CacheIdentityResponsePtrOutput {
	return o.ApplyT(func(v CacheIdentityResponse) *CacheIdentityResponse {
		return &v
	}).(CacheIdentityResponsePtrOutput)
}

// The principal id of the cache.
func (o CacheIdentityResponseOutput) PrincipalId() pulumi.StringOutput {
	return o.ApplyT(func(v CacheIdentityResponse) string { return v.PrincipalId }).(pulumi.StringOutput)
}

// The tenant id associated with the cache.
func (o CacheIdentityResponseOutput) TenantId() pulumi.StringOutput {
	return o.ApplyT(func(v CacheIdentityResponse) string { return v.TenantId }).(pulumi.StringOutput)
}

// The type of identity used for the cache
func (o CacheIdentityResponseOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CacheIdentityResponse) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type CacheIdentityResponsePtrOutput struct{ *pulumi.OutputState }

func (CacheIdentityResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CacheIdentityResponse)(nil)).Elem()
}

func (o CacheIdentityResponsePtrOutput) ToCacheIdentityResponsePtrOutput() CacheIdentityResponsePtrOutput {
	return o
}

func (o CacheIdentityResponsePtrOutput) ToCacheIdentityResponsePtrOutputWithContext(ctx context.Context) CacheIdentityResponsePtrOutput {
	return o
}

func (o CacheIdentityResponsePtrOutput) Elem() CacheIdentityResponseOutput {
	return o.ApplyT(func(v *CacheIdentityResponse) CacheIdentityResponse { return *v }).(CacheIdentityResponseOutput)
}

// The principal id of the cache.
func (o CacheIdentityResponsePtrOutput) PrincipalId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CacheIdentityResponse) *string {
		if v == nil {
			return nil
		}
		return &v.PrincipalId
	}).(pulumi.StringPtrOutput)
}

// The tenant id associated with the cache.
func (o CacheIdentityResponsePtrOutput) TenantId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CacheIdentityResponse) *string {
		if v == nil {
			return nil
		}
		return &v.TenantId
	}).(pulumi.StringPtrOutput)
}

// The type of identity used for the cache
func (o CacheIdentityResponsePtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CacheIdentityResponse) *string {
		if v == nil {
			return nil
		}
		return v.Type
	}).(pulumi.StringPtrOutput)
}

// SKU for the Cache.
type CacheInvokeResponseSku struct {
	// SKU name for this Cache.
	Name *string `pulumi:"name"`
}

// CacheInvokeResponseSkuInput is an input type that accepts CacheInvokeResponseSkuArgs and CacheInvokeResponseSkuOutput values.
// You can construct a concrete instance of `CacheInvokeResponseSkuInput` via:
//
//          CacheInvokeResponseSkuArgs{...}
type CacheInvokeResponseSkuInput interface {
	pulumi.Input

	ToCacheInvokeResponseSkuOutput() CacheInvokeResponseSkuOutput
	ToCacheInvokeResponseSkuOutputWithContext(context.Context) CacheInvokeResponseSkuOutput
}

// SKU for the Cache.
type CacheInvokeResponseSkuArgs struct {
	// SKU name for this Cache.
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (CacheInvokeResponseSkuArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CacheInvokeResponseSku)(nil)).Elem()
}

func (i CacheInvokeResponseSkuArgs) ToCacheInvokeResponseSkuOutput() CacheInvokeResponseSkuOutput {
	return i.ToCacheInvokeResponseSkuOutputWithContext(context.Background())
}

func (i CacheInvokeResponseSkuArgs) ToCacheInvokeResponseSkuOutputWithContext(ctx context.Context) CacheInvokeResponseSkuOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CacheInvokeResponseSkuOutput)
}

// SKU for the Cache.
type CacheInvokeResponseSkuOutput struct{ *pulumi.OutputState }

func (CacheInvokeResponseSkuOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CacheInvokeResponseSku)(nil)).Elem()
}

func (o CacheInvokeResponseSkuOutput) ToCacheInvokeResponseSkuOutput() CacheInvokeResponseSkuOutput {
	return o
}

func (o CacheInvokeResponseSkuOutput) ToCacheInvokeResponseSkuOutputWithContext(ctx context.Context) CacheInvokeResponseSkuOutput {
	return o
}

// SKU name for this Cache.
func (o CacheInvokeResponseSkuOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CacheInvokeResponseSku) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Cache network settings.
type CacheNetworkSettings struct {
	// The IPv4 maximum transmission unit configured for the subnet.
	Mtu *int `pulumi:"mtu"`
}

// CacheNetworkSettingsInput is an input type that accepts CacheNetworkSettingsArgs and CacheNetworkSettingsOutput values.
// You can construct a concrete instance of `CacheNetworkSettingsInput` via:
//
//          CacheNetworkSettingsArgs{...}
type CacheNetworkSettingsInput interface {
	pulumi.Input

	ToCacheNetworkSettingsOutput() CacheNetworkSettingsOutput
	ToCacheNetworkSettingsOutputWithContext(context.Context) CacheNetworkSettingsOutput
}

// Cache network settings.
type CacheNetworkSettingsArgs struct {
	// The IPv4 maximum transmission unit configured for the subnet.
	Mtu pulumi.IntPtrInput `pulumi:"mtu"`
}

func (CacheNetworkSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CacheNetworkSettings)(nil)).Elem()
}

func (i CacheNetworkSettingsArgs) ToCacheNetworkSettingsOutput() CacheNetworkSettingsOutput {
	return i.ToCacheNetworkSettingsOutputWithContext(context.Background())
}

func (i CacheNetworkSettingsArgs) ToCacheNetworkSettingsOutputWithContext(ctx context.Context) CacheNetworkSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CacheNetworkSettingsOutput)
}

func (i CacheNetworkSettingsArgs) ToCacheNetworkSettingsPtrOutput() CacheNetworkSettingsPtrOutput {
	return i.ToCacheNetworkSettingsPtrOutputWithContext(context.Background())
}

func (i CacheNetworkSettingsArgs) ToCacheNetworkSettingsPtrOutputWithContext(ctx context.Context) CacheNetworkSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CacheNetworkSettingsOutput).ToCacheNetworkSettingsPtrOutputWithContext(ctx)
}

// CacheNetworkSettingsPtrInput is an input type that accepts CacheNetworkSettingsArgs, CacheNetworkSettingsPtr and CacheNetworkSettingsPtrOutput values.
// You can construct a concrete instance of `CacheNetworkSettingsPtrInput` via:
//
//          CacheNetworkSettingsArgs{...}
//
//  or:
//
//          nil
type CacheNetworkSettingsPtrInput interface {
	pulumi.Input

	ToCacheNetworkSettingsPtrOutput() CacheNetworkSettingsPtrOutput
	ToCacheNetworkSettingsPtrOutputWithContext(context.Context) CacheNetworkSettingsPtrOutput
}

type cacheNetworkSettingsPtrType CacheNetworkSettingsArgs

func CacheNetworkSettingsPtr(v *CacheNetworkSettingsArgs) CacheNetworkSettingsPtrInput {
	return (*cacheNetworkSettingsPtrType)(v)
}

func (*cacheNetworkSettingsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CacheNetworkSettings)(nil)).Elem()
}

func (i *cacheNetworkSettingsPtrType) ToCacheNetworkSettingsPtrOutput() CacheNetworkSettingsPtrOutput {
	return i.ToCacheNetworkSettingsPtrOutputWithContext(context.Background())
}

func (i *cacheNetworkSettingsPtrType) ToCacheNetworkSettingsPtrOutputWithContext(ctx context.Context) CacheNetworkSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CacheNetworkSettingsPtrOutput)
}

// Cache network settings.
type CacheNetworkSettingsOutput struct{ *pulumi.OutputState }

func (CacheNetworkSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CacheNetworkSettings)(nil)).Elem()
}

func (o CacheNetworkSettingsOutput) ToCacheNetworkSettingsOutput() CacheNetworkSettingsOutput {
	return o
}

func (o CacheNetworkSettingsOutput) ToCacheNetworkSettingsOutputWithContext(ctx context.Context) CacheNetworkSettingsOutput {
	return o
}

func (o CacheNetworkSettingsOutput) ToCacheNetworkSettingsPtrOutput() CacheNetworkSettingsPtrOutput {
	return o.ToCacheNetworkSettingsPtrOutputWithContext(context.Background())
}

func (o CacheNetworkSettingsOutput) ToCacheNetworkSettingsPtrOutputWithContext(ctx context.Context) CacheNetworkSettingsPtrOutput {
	return o.ApplyT(func(v CacheNetworkSettings) *CacheNetworkSettings {
		return &v
	}).(CacheNetworkSettingsPtrOutput)
}

// The IPv4 maximum transmission unit configured for the subnet.
func (o CacheNetworkSettingsOutput) Mtu() pulumi.IntPtrOutput {
	return o.ApplyT(func(v CacheNetworkSettings) *int { return v.Mtu }).(pulumi.IntPtrOutput)
}

type CacheNetworkSettingsPtrOutput struct{ *pulumi.OutputState }

func (CacheNetworkSettingsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CacheNetworkSettings)(nil)).Elem()
}

func (o CacheNetworkSettingsPtrOutput) ToCacheNetworkSettingsPtrOutput() CacheNetworkSettingsPtrOutput {
	return o
}

func (o CacheNetworkSettingsPtrOutput) ToCacheNetworkSettingsPtrOutputWithContext(ctx context.Context) CacheNetworkSettingsPtrOutput {
	return o
}

func (o CacheNetworkSettingsPtrOutput) Elem() CacheNetworkSettingsOutput {
	return o.ApplyT(func(v *CacheNetworkSettings) CacheNetworkSettings { return *v }).(CacheNetworkSettingsOutput)
}

// The IPv4 maximum transmission unit configured for the subnet.
func (o CacheNetworkSettingsPtrOutput) Mtu() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *CacheNetworkSettings) *int {
		if v == nil {
			return nil
		}
		return v.Mtu
	}).(pulumi.IntPtrOutput)
}

// Cache network settings.
type CacheNetworkSettingsInvokeResponse struct {
	// The IPv4 maximum transmission unit configured for the subnet.
	Mtu *int `pulumi:"mtu"`
	// Array of additional IP addresses used by this Cache.
	UtilityAddresses []string `pulumi:"utilityAddresses"`
}

// CacheNetworkSettingsInvokeResponseInput is an input type that accepts CacheNetworkSettingsInvokeResponseArgs and CacheNetworkSettingsInvokeResponseOutput values.
// You can construct a concrete instance of `CacheNetworkSettingsInvokeResponseInput` via:
//
//          CacheNetworkSettingsInvokeResponseArgs{...}
type CacheNetworkSettingsInvokeResponseInput interface {
	pulumi.Input

	ToCacheNetworkSettingsInvokeResponseOutput() CacheNetworkSettingsInvokeResponseOutput
	ToCacheNetworkSettingsInvokeResponseOutputWithContext(context.Context) CacheNetworkSettingsInvokeResponseOutput
}

// Cache network settings.
type CacheNetworkSettingsInvokeResponseArgs struct {
	// The IPv4 maximum transmission unit configured for the subnet.
	Mtu pulumi.IntPtrInput `pulumi:"mtu"`
	// Array of additional IP addresses used by this Cache.
	UtilityAddresses pulumi.StringArrayInput `pulumi:"utilityAddresses"`
}

func (CacheNetworkSettingsInvokeResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CacheNetworkSettingsInvokeResponse)(nil)).Elem()
}

func (i CacheNetworkSettingsInvokeResponseArgs) ToCacheNetworkSettingsInvokeResponseOutput() CacheNetworkSettingsInvokeResponseOutput {
	return i.ToCacheNetworkSettingsInvokeResponseOutputWithContext(context.Background())
}

func (i CacheNetworkSettingsInvokeResponseArgs) ToCacheNetworkSettingsInvokeResponseOutputWithContext(ctx context.Context) CacheNetworkSettingsInvokeResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CacheNetworkSettingsInvokeResponseOutput)
}

// Cache network settings.
type CacheNetworkSettingsInvokeResponseOutput struct{ *pulumi.OutputState }

func (CacheNetworkSettingsInvokeResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CacheNetworkSettingsInvokeResponse)(nil)).Elem()
}

func (o CacheNetworkSettingsInvokeResponseOutput) ToCacheNetworkSettingsInvokeResponseOutput() CacheNetworkSettingsInvokeResponseOutput {
	return o
}

func (o CacheNetworkSettingsInvokeResponseOutput) ToCacheNetworkSettingsInvokeResponseOutputWithContext(ctx context.Context) CacheNetworkSettingsInvokeResponseOutput {
	return o
}

// The IPv4 maximum transmission unit configured for the subnet.
func (o CacheNetworkSettingsInvokeResponseOutput) Mtu() pulumi.IntPtrOutput {
	return o.ApplyT(func(v CacheNetworkSettingsInvokeResponse) *int { return v.Mtu }).(pulumi.IntPtrOutput)
}

// Array of additional IP addresses used by this Cache.
func (o CacheNetworkSettingsInvokeResponseOutput) UtilityAddresses() pulumi.StringArrayOutput {
	return o.ApplyT(func(v CacheNetworkSettingsInvokeResponse) []string { return v.UtilityAddresses }).(pulumi.StringArrayOutput)
}

// Cache network settings.
type CacheNetworkSettingsResponse struct {
	// The IPv4 maximum transmission unit configured for the subnet.
	Mtu *int `pulumi:"mtu"`
	// Array of additional IP addresses used by this Cache.
	UtilityAddresses []string `pulumi:"utilityAddresses"`
}

// CacheNetworkSettingsResponseInput is an input type that accepts CacheNetworkSettingsResponseArgs and CacheNetworkSettingsResponseOutput values.
// You can construct a concrete instance of `CacheNetworkSettingsResponseInput` via:
//
//          CacheNetworkSettingsResponseArgs{...}
type CacheNetworkSettingsResponseInput interface {
	pulumi.Input

	ToCacheNetworkSettingsResponseOutput() CacheNetworkSettingsResponseOutput
	ToCacheNetworkSettingsResponseOutputWithContext(context.Context) CacheNetworkSettingsResponseOutput
}

// Cache network settings.
type CacheNetworkSettingsResponseArgs struct {
	// The IPv4 maximum transmission unit configured for the subnet.
	Mtu pulumi.IntPtrInput `pulumi:"mtu"`
	// Array of additional IP addresses used by this Cache.
	UtilityAddresses pulumi.StringArrayInput `pulumi:"utilityAddresses"`
}

func (CacheNetworkSettingsResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CacheNetworkSettingsResponse)(nil)).Elem()
}

func (i CacheNetworkSettingsResponseArgs) ToCacheNetworkSettingsResponseOutput() CacheNetworkSettingsResponseOutput {
	return i.ToCacheNetworkSettingsResponseOutputWithContext(context.Background())
}

func (i CacheNetworkSettingsResponseArgs) ToCacheNetworkSettingsResponseOutputWithContext(ctx context.Context) CacheNetworkSettingsResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CacheNetworkSettingsResponseOutput)
}

func (i CacheNetworkSettingsResponseArgs) ToCacheNetworkSettingsResponsePtrOutput() CacheNetworkSettingsResponsePtrOutput {
	return i.ToCacheNetworkSettingsResponsePtrOutputWithContext(context.Background())
}

func (i CacheNetworkSettingsResponseArgs) ToCacheNetworkSettingsResponsePtrOutputWithContext(ctx context.Context) CacheNetworkSettingsResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CacheNetworkSettingsResponseOutput).ToCacheNetworkSettingsResponsePtrOutputWithContext(ctx)
}

// CacheNetworkSettingsResponsePtrInput is an input type that accepts CacheNetworkSettingsResponseArgs, CacheNetworkSettingsResponsePtr and CacheNetworkSettingsResponsePtrOutput values.
// You can construct a concrete instance of `CacheNetworkSettingsResponsePtrInput` via:
//
//          CacheNetworkSettingsResponseArgs{...}
//
//  or:
//
//          nil
type CacheNetworkSettingsResponsePtrInput interface {
	pulumi.Input

	ToCacheNetworkSettingsResponsePtrOutput() CacheNetworkSettingsResponsePtrOutput
	ToCacheNetworkSettingsResponsePtrOutputWithContext(context.Context) CacheNetworkSettingsResponsePtrOutput
}

type cacheNetworkSettingsResponsePtrType CacheNetworkSettingsResponseArgs

func CacheNetworkSettingsResponsePtr(v *CacheNetworkSettingsResponseArgs) CacheNetworkSettingsResponsePtrInput {
	return (*cacheNetworkSettingsResponsePtrType)(v)
}

func (*cacheNetworkSettingsResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CacheNetworkSettingsResponse)(nil)).Elem()
}

func (i *cacheNetworkSettingsResponsePtrType) ToCacheNetworkSettingsResponsePtrOutput() CacheNetworkSettingsResponsePtrOutput {
	return i.ToCacheNetworkSettingsResponsePtrOutputWithContext(context.Background())
}

func (i *cacheNetworkSettingsResponsePtrType) ToCacheNetworkSettingsResponsePtrOutputWithContext(ctx context.Context) CacheNetworkSettingsResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CacheNetworkSettingsResponsePtrOutput)
}

// Cache network settings.
type CacheNetworkSettingsResponseOutput struct{ *pulumi.OutputState }

func (CacheNetworkSettingsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CacheNetworkSettingsResponse)(nil)).Elem()
}

func (o CacheNetworkSettingsResponseOutput) ToCacheNetworkSettingsResponseOutput() CacheNetworkSettingsResponseOutput {
	return o
}

func (o CacheNetworkSettingsResponseOutput) ToCacheNetworkSettingsResponseOutputWithContext(ctx context.Context) CacheNetworkSettingsResponseOutput {
	return o
}

func (o CacheNetworkSettingsResponseOutput) ToCacheNetworkSettingsResponsePtrOutput() CacheNetworkSettingsResponsePtrOutput {
	return o.ToCacheNetworkSettingsResponsePtrOutputWithContext(context.Background())
}

func (o CacheNetworkSettingsResponseOutput) ToCacheNetworkSettingsResponsePtrOutputWithContext(ctx context.Context) CacheNetworkSettingsResponsePtrOutput {
	return o.ApplyT(func(v CacheNetworkSettingsResponse) *CacheNetworkSettingsResponse {
		return &v
	}).(CacheNetworkSettingsResponsePtrOutput)
}

// The IPv4 maximum transmission unit configured for the subnet.
func (o CacheNetworkSettingsResponseOutput) Mtu() pulumi.IntPtrOutput {
	return o.ApplyT(func(v CacheNetworkSettingsResponse) *int { return v.Mtu }).(pulumi.IntPtrOutput)
}

// Array of additional IP addresses used by this Cache.
func (o CacheNetworkSettingsResponseOutput) UtilityAddresses() pulumi.StringArrayOutput {
	return o.ApplyT(func(v CacheNetworkSettingsResponse) []string { return v.UtilityAddresses }).(pulumi.StringArrayOutput)
}

type CacheNetworkSettingsResponsePtrOutput struct{ *pulumi.OutputState }

func (CacheNetworkSettingsResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CacheNetworkSettingsResponse)(nil)).Elem()
}

func (o CacheNetworkSettingsResponsePtrOutput) ToCacheNetworkSettingsResponsePtrOutput() CacheNetworkSettingsResponsePtrOutput {
	return o
}

func (o CacheNetworkSettingsResponsePtrOutput) ToCacheNetworkSettingsResponsePtrOutputWithContext(ctx context.Context) CacheNetworkSettingsResponsePtrOutput {
	return o
}

func (o CacheNetworkSettingsResponsePtrOutput) Elem() CacheNetworkSettingsResponseOutput {
	return o.ApplyT(func(v *CacheNetworkSettingsResponse) CacheNetworkSettingsResponse { return *v }).(CacheNetworkSettingsResponseOutput)
}

// The IPv4 maximum transmission unit configured for the subnet.
func (o CacheNetworkSettingsResponsePtrOutput) Mtu() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *CacheNetworkSettingsResponse) *int {
		if v == nil {
			return nil
		}
		return v.Mtu
	}).(pulumi.IntPtrOutput)
}

// Array of additional IP addresses used by this Cache.
func (o CacheNetworkSettingsResponsePtrOutput) UtilityAddresses() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *CacheNetworkSettingsResponse) []string {
		if v == nil {
			return nil
		}
		return v.UtilityAddresses
	}).(pulumi.StringArrayOutput)
}

// SKU for the Cache.
type CacheResponseSku struct {
	// SKU name for this Cache.
	Name *string `pulumi:"name"`
}

// CacheResponseSkuInput is an input type that accepts CacheResponseSkuArgs and CacheResponseSkuOutput values.
// You can construct a concrete instance of `CacheResponseSkuInput` via:
//
//          CacheResponseSkuArgs{...}
type CacheResponseSkuInput interface {
	pulumi.Input

	ToCacheResponseSkuOutput() CacheResponseSkuOutput
	ToCacheResponseSkuOutputWithContext(context.Context) CacheResponseSkuOutput
}

// SKU for the Cache.
type CacheResponseSkuArgs struct {
	// SKU name for this Cache.
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (CacheResponseSkuArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CacheResponseSku)(nil)).Elem()
}

func (i CacheResponseSkuArgs) ToCacheResponseSkuOutput() CacheResponseSkuOutput {
	return i.ToCacheResponseSkuOutputWithContext(context.Background())
}

func (i CacheResponseSkuArgs) ToCacheResponseSkuOutputWithContext(ctx context.Context) CacheResponseSkuOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CacheResponseSkuOutput)
}

func (i CacheResponseSkuArgs) ToCacheResponseSkuPtrOutput() CacheResponseSkuPtrOutput {
	return i.ToCacheResponseSkuPtrOutputWithContext(context.Background())
}

func (i CacheResponseSkuArgs) ToCacheResponseSkuPtrOutputWithContext(ctx context.Context) CacheResponseSkuPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CacheResponseSkuOutput).ToCacheResponseSkuPtrOutputWithContext(ctx)
}

// CacheResponseSkuPtrInput is an input type that accepts CacheResponseSkuArgs, CacheResponseSkuPtr and CacheResponseSkuPtrOutput values.
// You can construct a concrete instance of `CacheResponseSkuPtrInput` via:
//
//          CacheResponseSkuArgs{...}
//
//  or:
//
//          nil
type CacheResponseSkuPtrInput interface {
	pulumi.Input

	ToCacheResponseSkuPtrOutput() CacheResponseSkuPtrOutput
	ToCacheResponseSkuPtrOutputWithContext(context.Context) CacheResponseSkuPtrOutput
}

type cacheResponseSkuPtrType CacheResponseSkuArgs

func CacheResponseSkuPtr(v *CacheResponseSkuArgs) CacheResponseSkuPtrInput {
	return (*cacheResponseSkuPtrType)(v)
}

func (*cacheResponseSkuPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CacheResponseSku)(nil)).Elem()
}

func (i *cacheResponseSkuPtrType) ToCacheResponseSkuPtrOutput() CacheResponseSkuPtrOutput {
	return i.ToCacheResponseSkuPtrOutputWithContext(context.Background())
}

func (i *cacheResponseSkuPtrType) ToCacheResponseSkuPtrOutputWithContext(ctx context.Context) CacheResponseSkuPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CacheResponseSkuPtrOutput)
}

// SKU for the Cache.
type CacheResponseSkuOutput struct{ *pulumi.OutputState }

func (CacheResponseSkuOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CacheResponseSku)(nil)).Elem()
}

func (o CacheResponseSkuOutput) ToCacheResponseSkuOutput() CacheResponseSkuOutput {
	return o
}

func (o CacheResponseSkuOutput) ToCacheResponseSkuOutputWithContext(ctx context.Context) CacheResponseSkuOutput {
	return o
}

func (o CacheResponseSkuOutput) ToCacheResponseSkuPtrOutput() CacheResponseSkuPtrOutput {
	return o.ToCacheResponseSkuPtrOutputWithContext(context.Background())
}

func (o CacheResponseSkuOutput) ToCacheResponseSkuPtrOutputWithContext(ctx context.Context) CacheResponseSkuPtrOutput {
	return o.ApplyT(func(v CacheResponseSku) *CacheResponseSku {
		return &v
	}).(CacheResponseSkuPtrOutput)
}

// SKU name for this Cache.
func (o CacheResponseSkuOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CacheResponseSku) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type CacheResponseSkuPtrOutput struct{ *pulumi.OutputState }

func (CacheResponseSkuPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CacheResponseSku)(nil)).Elem()
}

func (o CacheResponseSkuPtrOutput) ToCacheResponseSkuPtrOutput() CacheResponseSkuPtrOutput {
	return o
}

func (o CacheResponseSkuPtrOutput) ToCacheResponseSkuPtrOutputWithContext(ctx context.Context) CacheResponseSkuPtrOutput {
	return o
}

func (o CacheResponseSkuPtrOutput) Elem() CacheResponseSkuOutput {
	return o.ApplyT(func(v *CacheResponseSku) CacheResponseSku { return *v }).(CacheResponseSkuOutput)
}

// SKU name for this Cache.
func (o CacheResponseSkuPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CacheResponseSku) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// Cache security settings.
type CacheSecuritySettings struct {
	// NFS access policies defined for this cache.
	AccessPolicies []NfsAccessPolicy `pulumi:"accessPolicies"`
}

// CacheSecuritySettingsInput is an input type that accepts CacheSecuritySettingsArgs and CacheSecuritySettingsOutput values.
// You can construct a concrete instance of `CacheSecuritySettingsInput` via:
//
//          CacheSecuritySettingsArgs{...}
type CacheSecuritySettingsInput interface {
	pulumi.Input

	ToCacheSecuritySettingsOutput() CacheSecuritySettingsOutput
	ToCacheSecuritySettingsOutputWithContext(context.Context) CacheSecuritySettingsOutput
}

// Cache security settings.
type CacheSecuritySettingsArgs struct {
	// NFS access policies defined for this cache.
	AccessPolicies NfsAccessPolicyArrayInput `pulumi:"accessPolicies"`
}

func (CacheSecuritySettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CacheSecuritySettings)(nil)).Elem()
}

func (i CacheSecuritySettingsArgs) ToCacheSecuritySettingsOutput() CacheSecuritySettingsOutput {
	return i.ToCacheSecuritySettingsOutputWithContext(context.Background())
}

func (i CacheSecuritySettingsArgs) ToCacheSecuritySettingsOutputWithContext(ctx context.Context) CacheSecuritySettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CacheSecuritySettingsOutput)
}

func (i CacheSecuritySettingsArgs) ToCacheSecuritySettingsPtrOutput() CacheSecuritySettingsPtrOutput {
	return i.ToCacheSecuritySettingsPtrOutputWithContext(context.Background())
}

func (i CacheSecuritySettingsArgs) ToCacheSecuritySettingsPtrOutputWithContext(ctx context.Context) CacheSecuritySettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CacheSecuritySettingsOutput).ToCacheSecuritySettingsPtrOutputWithContext(ctx)
}

// CacheSecuritySettingsPtrInput is an input type that accepts CacheSecuritySettingsArgs, CacheSecuritySettingsPtr and CacheSecuritySettingsPtrOutput values.
// You can construct a concrete instance of `CacheSecuritySettingsPtrInput` via:
//
//          CacheSecuritySettingsArgs{...}
//
//  or:
//
//          nil
type CacheSecuritySettingsPtrInput interface {
	pulumi.Input

	ToCacheSecuritySettingsPtrOutput() CacheSecuritySettingsPtrOutput
	ToCacheSecuritySettingsPtrOutputWithContext(context.Context) CacheSecuritySettingsPtrOutput
}

type cacheSecuritySettingsPtrType CacheSecuritySettingsArgs

func CacheSecuritySettingsPtr(v *CacheSecuritySettingsArgs) CacheSecuritySettingsPtrInput {
	return (*cacheSecuritySettingsPtrType)(v)
}

func (*cacheSecuritySettingsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CacheSecuritySettings)(nil)).Elem()
}

func (i *cacheSecuritySettingsPtrType) ToCacheSecuritySettingsPtrOutput() CacheSecuritySettingsPtrOutput {
	return i.ToCacheSecuritySettingsPtrOutputWithContext(context.Background())
}

func (i *cacheSecuritySettingsPtrType) ToCacheSecuritySettingsPtrOutputWithContext(ctx context.Context) CacheSecuritySettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CacheSecuritySettingsPtrOutput)
}

// Cache security settings.
type CacheSecuritySettingsOutput struct{ *pulumi.OutputState }

func (CacheSecuritySettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CacheSecuritySettings)(nil)).Elem()
}

func (o CacheSecuritySettingsOutput) ToCacheSecuritySettingsOutput() CacheSecuritySettingsOutput {
	return o
}

func (o CacheSecuritySettingsOutput) ToCacheSecuritySettingsOutputWithContext(ctx context.Context) CacheSecuritySettingsOutput {
	return o
}

func (o CacheSecuritySettingsOutput) ToCacheSecuritySettingsPtrOutput() CacheSecuritySettingsPtrOutput {
	return o.ToCacheSecuritySettingsPtrOutputWithContext(context.Background())
}

func (o CacheSecuritySettingsOutput) ToCacheSecuritySettingsPtrOutputWithContext(ctx context.Context) CacheSecuritySettingsPtrOutput {
	return o.ApplyT(func(v CacheSecuritySettings) *CacheSecuritySettings {
		return &v
	}).(CacheSecuritySettingsPtrOutput)
}

// NFS access policies defined for this cache.
func (o CacheSecuritySettingsOutput) AccessPolicies() NfsAccessPolicyArrayOutput {
	return o.ApplyT(func(v CacheSecuritySettings) []NfsAccessPolicy { return v.AccessPolicies }).(NfsAccessPolicyArrayOutput)
}

type CacheSecuritySettingsPtrOutput struct{ *pulumi.OutputState }

func (CacheSecuritySettingsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CacheSecuritySettings)(nil)).Elem()
}

func (o CacheSecuritySettingsPtrOutput) ToCacheSecuritySettingsPtrOutput() CacheSecuritySettingsPtrOutput {
	return o
}

func (o CacheSecuritySettingsPtrOutput) ToCacheSecuritySettingsPtrOutputWithContext(ctx context.Context) CacheSecuritySettingsPtrOutput {
	return o
}

func (o CacheSecuritySettingsPtrOutput) Elem() CacheSecuritySettingsOutput {
	return o.ApplyT(func(v *CacheSecuritySettings) CacheSecuritySettings { return *v }).(CacheSecuritySettingsOutput)
}

// NFS access policies defined for this cache.
func (o CacheSecuritySettingsPtrOutput) AccessPolicies() NfsAccessPolicyArrayOutput {
	return o.ApplyT(func(v *CacheSecuritySettings) []NfsAccessPolicy {
		if v == nil {
			return nil
		}
		return v.AccessPolicies
	}).(NfsAccessPolicyArrayOutput)
}

// Cache security settings.
type CacheSecuritySettingsInvokeResponse struct {
	// NFS access policies defined for this cache.
	AccessPolicies []NfsAccessPolicyInvokeResponse `pulumi:"accessPolicies"`
}

// CacheSecuritySettingsInvokeResponseInput is an input type that accepts CacheSecuritySettingsInvokeResponseArgs and CacheSecuritySettingsInvokeResponseOutput values.
// You can construct a concrete instance of `CacheSecuritySettingsInvokeResponseInput` via:
//
//          CacheSecuritySettingsInvokeResponseArgs{...}
type CacheSecuritySettingsInvokeResponseInput interface {
	pulumi.Input

	ToCacheSecuritySettingsInvokeResponseOutput() CacheSecuritySettingsInvokeResponseOutput
	ToCacheSecuritySettingsInvokeResponseOutputWithContext(context.Context) CacheSecuritySettingsInvokeResponseOutput
}

// Cache security settings.
type CacheSecuritySettingsInvokeResponseArgs struct {
	// NFS access policies defined for this cache.
	AccessPolicies NfsAccessPolicyInvokeResponseArrayInput `pulumi:"accessPolicies"`
}

func (CacheSecuritySettingsInvokeResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CacheSecuritySettingsInvokeResponse)(nil)).Elem()
}

func (i CacheSecuritySettingsInvokeResponseArgs) ToCacheSecuritySettingsInvokeResponseOutput() CacheSecuritySettingsInvokeResponseOutput {
	return i.ToCacheSecuritySettingsInvokeResponseOutputWithContext(context.Background())
}

func (i CacheSecuritySettingsInvokeResponseArgs) ToCacheSecuritySettingsInvokeResponseOutputWithContext(ctx context.Context) CacheSecuritySettingsInvokeResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CacheSecuritySettingsInvokeResponseOutput)
}

// Cache security settings.
type CacheSecuritySettingsInvokeResponseOutput struct{ *pulumi.OutputState }

func (CacheSecuritySettingsInvokeResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CacheSecuritySettingsInvokeResponse)(nil)).Elem()
}

func (o CacheSecuritySettingsInvokeResponseOutput) ToCacheSecuritySettingsInvokeResponseOutput() CacheSecuritySettingsInvokeResponseOutput {
	return o
}

func (o CacheSecuritySettingsInvokeResponseOutput) ToCacheSecuritySettingsInvokeResponseOutputWithContext(ctx context.Context) CacheSecuritySettingsInvokeResponseOutput {
	return o
}

// NFS access policies defined for this cache.
func (o CacheSecuritySettingsInvokeResponseOutput) AccessPolicies() NfsAccessPolicyInvokeResponseArrayOutput {
	return o.ApplyT(func(v CacheSecuritySettingsInvokeResponse) []NfsAccessPolicyInvokeResponse { return v.AccessPolicies }).(NfsAccessPolicyInvokeResponseArrayOutput)
}

// Cache security settings.
type CacheSecuritySettingsResponse struct {
	// NFS access policies defined for this cache.
	AccessPolicies []NfsAccessPolicyResponse `pulumi:"accessPolicies"`
}

// CacheSecuritySettingsResponseInput is an input type that accepts CacheSecuritySettingsResponseArgs and CacheSecuritySettingsResponseOutput values.
// You can construct a concrete instance of `CacheSecuritySettingsResponseInput` via:
//
//          CacheSecuritySettingsResponseArgs{...}
type CacheSecuritySettingsResponseInput interface {
	pulumi.Input

	ToCacheSecuritySettingsResponseOutput() CacheSecuritySettingsResponseOutput
	ToCacheSecuritySettingsResponseOutputWithContext(context.Context) CacheSecuritySettingsResponseOutput
}

// Cache security settings.
type CacheSecuritySettingsResponseArgs struct {
	// NFS access policies defined for this cache.
	AccessPolicies NfsAccessPolicyResponseArrayInput `pulumi:"accessPolicies"`
}

func (CacheSecuritySettingsResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CacheSecuritySettingsResponse)(nil)).Elem()
}

func (i CacheSecuritySettingsResponseArgs) ToCacheSecuritySettingsResponseOutput() CacheSecuritySettingsResponseOutput {
	return i.ToCacheSecuritySettingsResponseOutputWithContext(context.Background())
}

func (i CacheSecuritySettingsResponseArgs) ToCacheSecuritySettingsResponseOutputWithContext(ctx context.Context) CacheSecuritySettingsResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CacheSecuritySettingsResponseOutput)
}

func (i CacheSecuritySettingsResponseArgs) ToCacheSecuritySettingsResponsePtrOutput() CacheSecuritySettingsResponsePtrOutput {
	return i.ToCacheSecuritySettingsResponsePtrOutputWithContext(context.Background())
}

func (i CacheSecuritySettingsResponseArgs) ToCacheSecuritySettingsResponsePtrOutputWithContext(ctx context.Context) CacheSecuritySettingsResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CacheSecuritySettingsResponseOutput).ToCacheSecuritySettingsResponsePtrOutputWithContext(ctx)
}

// CacheSecuritySettingsResponsePtrInput is an input type that accepts CacheSecuritySettingsResponseArgs, CacheSecuritySettingsResponsePtr and CacheSecuritySettingsResponsePtrOutput values.
// You can construct a concrete instance of `CacheSecuritySettingsResponsePtrInput` via:
//
//          CacheSecuritySettingsResponseArgs{...}
//
//  or:
//
//          nil
type CacheSecuritySettingsResponsePtrInput interface {
	pulumi.Input

	ToCacheSecuritySettingsResponsePtrOutput() CacheSecuritySettingsResponsePtrOutput
	ToCacheSecuritySettingsResponsePtrOutputWithContext(context.Context) CacheSecuritySettingsResponsePtrOutput
}

type cacheSecuritySettingsResponsePtrType CacheSecuritySettingsResponseArgs

func CacheSecuritySettingsResponsePtr(v *CacheSecuritySettingsResponseArgs) CacheSecuritySettingsResponsePtrInput {
	return (*cacheSecuritySettingsResponsePtrType)(v)
}

func (*cacheSecuritySettingsResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CacheSecuritySettingsResponse)(nil)).Elem()
}

func (i *cacheSecuritySettingsResponsePtrType) ToCacheSecuritySettingsResponsePtrOutput() CacheSecuritySettingsResponsePtrOutput {
	return i.ToCacheSecuritySettingsResponsePtrOutputWithContext(context.Background())
}

func (i *cacheSecuritySettingsResponsePtrType) ToCacheSecuritySettingsResponsePtrOutputWithContext(ctx context.Context) CacheSecuritySettingsResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CacheSecuritySettingsResponsePtrOutput)
}

// Cache security settings.
type CacheSecuritySettingsResponseOutput struct{ *pulumi.OutputState }

func (CacheSecuritySettingsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CacheSecuritySettingsResponse)(nil)).Elem()
}

func (o CacheSecuritySettingsResponseOutput) ToCacheSecuritySettingsResponseOutput() CacheSecuritySettingsResponseOutput {
	return o
}

func (o CacheSecuritySettingsResponseOutput) ToCacheSecuritySettingsResponseOutputWithContext(ctx context.Context) CacheSecuritySettingsResponseOutput {
	return o
}

func (o CacheSecuritySettingsResponseOutput) ToCacheSecuritySettingsResponsePtrOutput() CacheSecuritySettingsResponsePtrOutput {
	return o.ToCacheSecuritySettingsResponsePtrOutputWithContext(context.Background())
}

func (o CacheSecuritySettingsResponseOutput) ToCacheSecuritySettingsResponsePtrOutputWithContext(ctx context.Context) CacheSecuritySettingsResponsePtrOutput {
	return o.ApplyT(func(v CacheSecuritySettingsResponse) *CacheSecuritySettingsResponse {
		return &v
	}).(CacheSecuritySettingsResponsePtrOutput)
}

// NFS access policies defined for this cache.
func (o CacheSecuritySettingsResponseOutput) AccessPolicies() NfsAccessPolicyResponseArrayOutput {
	return o.ApplyT(func(v CacheSecuritySettingsResponse) []NfsAccessPolicyResponse { return v.AccessPolicies }).(NfsAccessPolicyResponseArrayOutput)
}

type CacheSecuritySettingsResponsePtrOutput struct{ *pulumi.OutputState }

func (CacheSecuritySettingsResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CacheSecuritySettingsResponse)(nil)).Elem()
}

func (o CacheSecuritySettingsResponsePtrOutput) ToCacheSecuritySettingsResponsePtrOutput() CacheSecuritySettingsResponsePtrOutput {
	return o
}

func (o CacheSecuritySettingsResponsePtrOutput) ToCacheSecuritySettingsResponsePtrOutputWithContext(ctx context.Context) CacheSecuritySettingsResponsePtrOutput {
	return o
}

func (o CacheSecuritySettingsResponsePtrOutput) Elem() CacheSecuritySettingsResponseOutput {
	return o.ApplyT(func(v *CacheSecuritySettingsResponse) CacheSecuritySettingsResponse { return *v }).(CacheSecuritySettingsResponseOutput)
}

// NFS access policies defined for this cache.
func (o CacheSecuritySettingsResponsePtrOutput) AccessPolicies() NfsAccessPolicyResponseArrayOutput {
	return o.ApplyT(func(v *CacheSecuritySettingsResponse) []NfsAccessPolicyResponse {
		if v == nil {
			return nil
		}
		return v.AccessPolicies
	}).(NfsAccessPolicyResponseArrayOutput)
}

// SKU for the Cache.
type CacheSku struct {
	// SKU name for this Cache.
	Name *string `pulumi:"name"`
}

// CacheSkuInput is an input type that accepts CacheSkuArgs and CacheSkuOutput values.
// You can construct a concrete instance of `CacheSkuInput` via:
//
//          CacheSkuArgs{...}
type CacheSkuInput interface {
	pulumi.Input

	ToCacheSkuOutput() CacheSkuOutput
	ToCacheSkuOutputWithContext(context.Context) CacheSkuOutput
}

// SKU for the Cache.
type CacheSkuArgs struct {
	// SKU name for this Cache.
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (CacheSkuArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CacheSku)(nil)).Elem()
}

func (i CacheSkuArgs) ToCacheSkuOutput() CacheSkuOutput {
	return i.ToCacheSkuOutputWithContext(context.Background())
}

func (i CacheSkuArgs) ToCacheSkuOutputWithContext(ctx context.Context) CacheSkuOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CacheSkuOutput)
}

func (i CacheSkuArgs) ToCacheSkuPtrOutput() CacheSkuPtrOutput {
	return i.ToCacheSkuPtrOutputWithContext(context.Background())
}

func (i CacheSkuArgs) ToCacheSkuPtrOutputWithContext(ctx context.Context) CacheSkuPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CacheSkuOutput).ToCacheSkuPtrOutputWithContext(ctx)
}

// CacheSkuPtrInput is an input type that accepts CacheSkuArgs, CacheSkuPtr and CacheSkuPtrOutput values.
// You can construct a concrete instance of `CacheSkuPtrInput` via:
//
//          CacheSkuArgs{...}
//
//  or:
//
//          nil
type CacheSkuPtrInput interface {
	pulumi.Input

	ToCacheSkuPtrOutput() CacheSkuPtrOutput
	ToCacheSkuPtrOutputWithContext(context.Context) CacheSkuPtrOutput
}

type cacheSkuPtrType CacheSkuArgs

func CacheSkuPtr(v *CacheSkuArgs) CacheSkuPtrInput {
	return (*cacheSkuPtrType)(v)
}

func (*cacheSkuPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CacheSku)(nil)).Elem()
}

func (i *cacheSkuPtrType) ToCacheSkuPtrOutput() CacheSkuPtrOutput {
	return i.ToCacheSkuPtrOutputWithContext(context.Background())
}

func (i *cacheSkuPtrType) ToCacheSkuPtrOutputWithContext(ctx context.Context) CacheSkuPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CacheSkuPtrOutput)
}

// SKU for the Cache.
type CacheSkuOutput struct{ *pulumi.OutputState }

func (CacheSkuOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CacheSku)(nil)).Elem()
}

func (o CacheSkuOutput) ToCacheSkuOutput() CacheSkuOutput {
	return o
}

func (o CacheSkuOutput) ToCacheSkuOutputWithContext(ctx context.Context) CacheSkuOutput {
	return o
}

func (o CacheSkuOutput) ToCacheSkuPtrOutput() CacheSkuPtrOutput {
	return o.ToCacheSkuPtrOutputWithContext(context.Background())
}

func (o CacheSkuOutput) ToCacheSkuPtrOutputWithContext(ctx context.Context) CacheSkuPtrOutput {
	return o.ApplyT(func(v CacheSku) *CacheSku {
		return &v
	}).(CacheSkuPtrOutput)
}

// SKU name for this Cache.
func (o CacheSkuOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CacheSku) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type CacheSkuPtrOutput struct{ *pulumi.OutputState }

func (CacheSkuPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CacheSku)(nil)).Elem()
}

func (o CacheSkuPtrOutput) ToCacheSkuPtrOutput() CacheSkuPtrOutput {
	return o
}

func (o CacheSkuPtrOutput) ToCacheSkuPtrOutputWithContext(ctx context.Context) CacheSkuPtrOutput {
	return o
}

func (o CacheSkuPtrOutput) Elem() CacheSkuOutput {
	return o.ApplyT(func(v *CacheSku) CacheSku { return *v }).(CacheSkuOutput)
}

// SKU name for this Cache.
func (o CacheSkuPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CacheSku) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// Properties describing the software upgrade state of the Cache.
type CacheUpgradeStatusInvokeResponse struct {
	// Version string of the firmware currently installed on this Cache.
	CurrentFirmwareVersion string `pulumi:"currentFirmwareVersion"`
	// Time at which the pending firmware update will automatically be installed on the Cache.
	FirmwareUpdateDeadline string `pulumi:"firmwareUpdateDeadline"`
	// True if there is a firmware update ready to install on this Cache. The firmware will automatically be installed after firmwareUpdateDeadline if not triggered earlier via the upgrade operation.
	FirmwareUpdateStatus string `pulumi:"firmwareUpdateStatus"`
	// Time of the last successful firmware update.
	LastFirmwareUpdate string `pulumi:"lastFirmwareUpdate"`
	// When firmwareUpdateAvailable is true, this field holds the version string for the update.
	PendingFirmwareVersion string `pulumi:"pendingFirmwareVersion"`
}

// CacheUpgradeStatusInvokeResponseInput is an input type that accepts CacheUpgradeStatusInvokeResponseArgs and CacheUpgradeStatusInvokeResponseOutput values.
// You can construct a concrete instance of `CacheUpgradeStatusInvokeResponseInput` via:
//
//          CacheUpgradeStatusInvokeResponseArgs{...}
type CacheUpgradeStatusInvokeResponseInput interface {
	pulumi.Input

	ToCacheUpgradeStatusInvokeResponseOutput() CacheUpgradeStatusInvokeResponseOutput
	ToCacheUpgradeStatusInvokeResponseOutputWithContext(context.Context) CacheUpgradeStatusInvokeResponseOutput
}

// Properties describing the software upgrade state of the Cache.
type CacheUpgradeStatusInvokeResponseArgs struct {
	// Version string of the firmware currently installed on this Cache.
	CurrentFirmwareVersion pulumi.StringInput `pulumi:"currentFirmwareVersion"`
	// Time at which the pending firmware update will automatically be installed on the Cache.
	FirmwareUpdateDeadline pulumi.StringInput `pulumi:"firmwareUpdateDeadline"`
	// True if there is a firmware update ready to install on this Cache. The firmware will automatically be installed after firmwareUpdateDeadline if not triggered earlier via the upgrade operation.
	FirmwareUpdateStatus pulumi.StringInput `pulumi:"firmwareUpdateStatus"`
	// Time of the last successful firmware update.
	LastFirmwareUpdate pulumi.StringInput `pulumi:"lastFirmwareUpdate"`
	// When firmwareUpdateAvailable is true, this field holds the version string for the update.
	PendingFirmwareVersion pulumi.StringInput `pulumi:"pendingFirmwareVersion"`
}

func (CacheUpgradeStatusInvokeResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CacheUpgradeStatusInvokeResponse)(nil)).Elem()
}

func (i CacheUpgradeStatusInvokeResponseArgs) ToCacheUpgradeStatusInvokeResponseOutput() CacheUpgradeStatusInvokeResponseOutput {
	return i.ToCacheUpgradeStatusInvokeResponseOutputWithContext(context.Background())
}

func (i CacheUpgradeStatusInvokeResponseArgs) ToCacheUpgradeStatusInvokeResponseOutputWithContext(ctx context.Context) CacheUpgradeStatusInvokeResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CacheUpgradeStatusInvokeResponseOutput)
}

// Properties describing the software upgrade state of the Cache.
type CacheUpgradeStatusInvokeResponseOutput struct{ *pulumi.OutputState }

func (CacheUpgradeStatusInvokeResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CacheUpgradeStatusInvokeResponse)(nil)).Elem()
}

func (o CacheUpgradeStatusInvokeResponseOutput) ToCacheUpgradeStatusInvokeResponseOutput() CacheUpgradeStatusInvokeResponseOutput {
	return o
}

func (o CacheUpgradeStatusInvokeResponseOutput) ToCacheUpgradeStatusInvokeResponseOutputWithContext(ctx context.Context) CacheUpgradeStatusInvokeResponseOutput {
	return o
}

// Version string of the firmware currently installed on this Cache.
func (o CacheUpgradeStatusInvokeResponseOutput) CurrentFirmwareVersion() pulumi.StringOutput {
	return o.ApplyT(func(v CacheUpgradeStatusInvokeResponse) string { return v.CurrentFirmwareVersion }).(pulumi.StringOutput)
}

// Time at which the pending firmware update will automatically be installed on the Cache.
func (o CacheUpgradeStatusInvokeResponseOutput) FirmwareUpdateDeadline() pulumi.StringOutput {
	return o.ApplyT(func(v CacheUpgradeStatusInvokeResponse) string { return v.FirmwareUpdateDeadline }).(pulumi.StringOutput)
}

// True if there is a firmware update ready to install on this Cache. The firmware will automatically be installed after firmwareUpdateDeadline if not triggered earlier via the upgrade operation.
func (o CacheUpgradeStatusInvokeResponseOutput) FirmwareUpdateStatus() pulumi.StringOutput {
	return o.ApplyT(func(v CacheUpgradeStatusInvokeResponse) string { return v.FirmwareUpdateStatus }).(pulumi.StringOutput)
}

// Time of the last successful firmware update.
func (o CacheUpgradeStatusInvokeResponseOutput) LastFirmwareUpdate() pulumi.StringOutput {
	return o.ApplyT(func(v CacheUpgradeStatusInvokeResponse) string { return v.LastFirmwareUpdate }).(pulumi.StringOutput)
}

// When firmwareUpdateAvailable is true, this field holds the version string for the update.
func (o CacheUpgradeStatusInvokeResponseOutput) PendingFirmwareVersion() pulumi.StringOutput {
	return o.ApplyT(func(v CacheUpgradeStatusInvokeResponse) string { return v.PendingFirmwareVersion }).(pulumi.StringOutput)
}

// Properties describing the software upgrade state of the Cache.
type CacheUpgradeStatusResponse struct {
	// Version string of the firmware currently installed on this Cache.
	CurrentFirmwareVersion string `pulumi:"currentFirmwareVersion"`
	// Time at which the pending firmware update will automatically be installed on the Cache.
	FirmwareUpdateDeadline string `pulumi:"firmwareUpdateDeadline"`
	// True if there is a firmware update ready to install on this Cache. The firmware will automatically be installed after firmwareUpdateDeadline if not triggered earlier via the upgrade operation.
	FirmwareUpdateStatus string `pulumi:"firmwareUpdateStatus"`
	// Time of the last successful firmware update.
	LastFirmwareUpdate string `pulumi:"lastFirmwareUpdate"`
	// When firmwareUpdateAvailable is true, this field holds the version string for the update.
	PendingFirmwareVersion string `pulumi:"pendingFirmwareVersion"`
}

// CacheUpgradeStatusResponseInput is an input type that accepts CacheUpgradeStatusResponseArgs and CacheUpgradeStatusResponseOutput values.
// You can construct a concrete instance of `CacheUpgradeStatusResponseInput` via:
//
//          CacheUpgradeStatusResponseArgs{...}
type CacheUpgradeStatusResponseInput interface {
	pulumi.Input

	ToCacheUpgradeStatusResponseOutput() CacheUpgradeStatusResponseOutput
	ToCacheUpgradeStatusResponseOutputWithContext(context.Context) CacheUpgradeStatusResponseOutput
}

// Properties describing the software upgrade state of the Cache.
type CacheUpgradeStatusResponseArgs struct {
	// Version string of the firmware currently installed on this Cache.
	CurrentFirmwareVersion pulumi.StringInput `pulumi:"currentFirmwareVersion"`
	// Time at which the pending firmware update will automatically be installed on the Cache.
	FirmwareUpdateDeadline pulumi.StringInput `pulumi:"firmwareUpdateDeadline"`
	// True if there is a firmware update ready to install on this Cache. The firmware will automatically be installed after firmwareUpdateDeadline if not triggered earlier via the upgrade operation.
	FirmwareUpdateStatus pulumi.StringInput `pulumi:"firmwareUpdateStatus"`
	// Time of the last successful firmware update.
	LastFirmwareUpdate pulumi.StringInput `pulumi:"lastFirmwareUpdate"`
	// When firmwareUpdateAvailable is true, this field holds the version string for the update.
	PendingFirmwareVersion pulumi.StringInput `pulumi:"pendingFirmwareVersion"`
}

func (CacheUpgradeStatusResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CacheUpgradeStatusResponse)(nil)).Elem()
}

func (i CacheUpgradeStatusResponseArgs) ToCacheUpgradeStatusResponseOutput() CacheUpgradeStatusResponseOutput {
	return i.ToCacheUpgradeStatusResponseOutputWithContext(context.Background())
}

func (i CacheUpgradeStatusResponseArgs) ToCacheUpgradeStatusResponseOutputWithContext(ctx context.Context) CacheUpgradeStatusResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CacheUpgradeStatusResponseOutput)
}

func (i CacheUpgradeStatusResponseArgs) ToCacheUpgradeStatusResponsePtrOutput() CacheUpgradeStatusResponsePtrOutput {
	return i.ToCacheUpgradeStatusResponsePtrOutputWithContext(context.Background())
}

func (i CacheUpgradeStatusResponseArgs) ToCacheUpgradeStatusResponsePtrOutputWithContext(ctx context.Context) CacheUpgradeStatusResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CacheUpgradeStatusResponseOutput).ToCacheUpgradeStatusResponsePtrOutputWithContext(ctx)
}

// CacheUpgradeStatusResponsePtrInput is an input type that accepts CacheUpgradeStatusResponseArgs, CacheUpgradeStatusResponsePtr and CacheUpgradeStatusResponsePtrOutput values.
// You can construct a concrete instance of `CacheUpgradeStatusResponsePtrInput` via:
//
//          CacheUpgradeStatusResponseArgs{...}
//
//  or:
//
//          nil
type CacheUpgradeStatusResponsePtrInput interface {
	pulumi.Input

	ToCacheUpgradeStatusResponsePtrOutput() CacheUpgradeStatusResponsePtrOutput
	ToCacheUpgradeStatusResponsePtrOutputWithContext(context.Context) CacheUpgradeStatusResponsePtrOutput
}

type cacheUpgradeStatusResponsePtrType CacheUpgradeStatusResponseArgs

func CacheUpgradeStatusResponsePtr(v *CacheUpgradeStatusResponseArgs) CacheUpgradeStatusResponsePtrInput {
	return (*cacheUpgradeStatusResponsePtrType)(v)
}

func (*cacheUpgradeStatusResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CacheUpgradeStatusResponse)(nil)).Elem()
}

func (i *cacheUpgradeStatusResponsePtrType) ToCacheUpgradeStatusResponsePtrOutput() CacheUpgradeStatusResponsePtrOutput {
	return i.ToCacheUpgradeStatusResponsePtrOutputWithContext(context.Background())
}

func (i *cacheUpgradeStatusResponsePtrType) ToCacheUpgradeStatusResponsePtrOutputWithContext(ctx context.Context) CacheUpgradeStatusResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CacheUpgradeStatusResponsePtrOutput)
}

// Properties describing the software upgrade state of the Cache.
type CacheUpgradeStatusResponseOutput struct{ *pulumi.OutputState }

func (CacheUpgradeStatusResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CacheUpgradeStatusResponse)(nil)).Elem()
}

func (o CacheUpgradeStatusResponseOutput) ToCacheUpgradeStatusResponseOutput() CacheUpgradeStatusResponseOutput {
	return o
}

func (o CacheUpgradeStatusResponseOutput) ToCacheUpgradeStatusResponseOutputWithContext(ctx context.Context) CacheUpgradeStatusResponseOutput {
	return o
}

func (o CacheUpgradeStatusResponseOutput) ToCacheUpgradeStatusResponsePtrOutput() CacheUpgradeStatusResponsePtrOutput {
	return o.ToCacheUpgradeStatusResponsePtrOutputWithContext(context.Background())
}

func (o CacheUpgradeStatusResponseOutput) ToCacheUpgradeStatusResponsePtrOutputWithContext(ctx context.Context) CacheUpgradeStatusResponsePtrOutput {
	return o.ApplyT(func(v CacheUpgradeStatusResponse) *CacheUpgradeStatusResponse {
		return &v
	}).(CacheUpgradeStatusResponsePtrOutput)
}

// Version string of the firmware currently installed on this Cache.
func (o CacheUpgradeStatusResponseOutput) CurrentFirmwareVersion() pulumi.StringOutput {
	return o.ApplyT(func(v CacheUpgradeStatusResponse) string { return v.CurrentFirmwareVersion }).(pulumi.StringOutput)
}

// Time at which the pending firmware update will automatically be installed on the Cache.
func (o CacheUpgradeStatusResponseOutput) FirmwareUpdateDeadline() pulumi.StringOutput {
	return o.ApplyT(func(v CacheUpgradeStatusResponse) string { return v.FirmwareUpdateDeadline }).(pulumi.StringOutput)
}

// True if there is a firmware update ready to install on this Cache. The firmware will automatically be installed after firmwareUpdateDeadline if not triggered earlier via the upgrade operation.
func (o CacheUpgradeStatusResponseOutput) FirmwareUpdateStatus() pulumi.StringOutput {
	return o.ApplyT(func(v CacheUpgradeStatusResponse) string { return v.FirmwareUpdateStatus }).(pulumi.StringOutput)
}

// Time of the last successful firmware update.
func (o CacheUpgradeStatusResponseOutput) LastFirmwareUpdate() pulumi.StringOutput {
	return o.ApplyT(func(v CacheUpgradeStatusResponse) string { return v.LastFirmwareUpdate }).(pulumi.StringOutput)
}

// When firmwareUpdateAvailable is true, this field holds the version string for the update.
func (o CacheUpgradeStatusResponseOutput) PendingFirmwareVersion() pulumi.StringOutput {
	return o.ApplyT(func(v CacheUpgradeStatusResponse) string { return v.PendingFirmwareVersion }).(pulumi.StringOutput)
}

type CacheUpgradeStatusResponsePtrOutput struct{ *pulumi.OutputState }

func (CacheUpgradeStatusResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CacheUpgradeStatusResponse)(nil)).Elem()
}

func (o CacheUpgradeStatusResponsePtrOutput) ToCacheUpgradeStatusResponsePtrOutput() CacheUpgradeStatusResponsePtrOutput {
	return o
}

func (o CacheUpgradeStatusResponsePtrOutput) ToCacheUpgradeStatusResponsePtrOutputWithContext(ctx context.Context) CacheUpgradeStatusResponsePtrOutput {
	return o
}

func (o CacheUpgradeStatusResponsePtrOutput) Elem() CacheUpgradeStatusResponseOutput {
	return o.ApplyT(func(v *CacheUpgradeStatusResponse) CacheUpgradeStatusResponse { return *v }).(CacheUpgradeStatusResponseOutput)
}

// Version string of the firmware currently installed on this Cache.
func (o CacheUpgradeStatusResponsePtrOutput) CurrentFirmwareVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CacheUpgradeStatusResponse) *string {
		if v == nil {
			return nil
		}
		return &v.CurrentFirmwareVersion
	}).(pulumi.StringPtrOutput)
}

// Time at which the pending firmware update will automatically be installed on the Cache.
func (o CacheUpgradeStatusResponsePtrOutput) FirmwareUpdateDeadline() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CacheUpgradeStatusResponse) *string {
		if v == nil {
			return nil
		}
		return &v.FirmwareUpdateDeadline
	}).(pulumi.StringPtrOutput)
}

// True if there is a firmware update ready to install on this Cache. The firmware will automatically be installed after firmwareUpdateDeadline if not triggered earlier via the upgrade operation.
func (o CacheUpgradeStatusResponsePtrOutput) FirmwareUpdateStatus() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CacheUpgradeStatusResponse) *string {
		if v == nil {
			return nil
		}
		return &v.FirmwareUpdateStatus
	}).(pulumi.StringPtrOutput)
}

// Time of the last successful firmware update.
func (o CacheUpgradeStatusResponsePtrOutput) LastFirmwareUpdate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CacheUpgradeStatusResponse) *string {
		if v == nil {
			return nil
		}
		return &v.LastFirmwareUpdate
	}).(pulumi.StringPtrOutput)
}

// When firmwareUpdateAvailable is true, this field holds the version string for the update.
func (o CacheUpgradeStatusResponsePtrOutput) PendingFirmwareVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CacheUpgradeStatusResponse) *string {
		if v == nil {
			return nil
		}
		return &v.PendingFirmwareVersion
	}).(pulumi.StringPtrOutput)
}

// Settings for Extended Groups username and group download.
type CacheUsernameDownloadSettings struct {
	// Determines if the certificate should be automatically downloaded. This applies to 'caCertificateURI' only if 'requireValidCertificate' is true.
	AutoDownloadCertificate *bool `pulumi:"autoDownloadCertificate"`
	// The URI of the CA certificate to validate the LDAP secure connection. This field must be populated when 'requireValidCertificate' is set to true.
	CaCertificateURI *string `pulumi:"caCertificateURI"`
	// When present, these are the credentials for the secure LDAP connection.
	Credentials *CacheUsernameDownloadSettingsCredentials `pulumi:"credentials"`
	// Whether or not the LDAP connection should be encrypted.
	EncryptLdapConnection *bool `pulumi:"encryptLdapConnection"`
	// Whether or not Extended Groups is enabled.
	ExtendedGroupsEnabled *bool `pulumi:"extendedGroupsEnabled"`
	// The URI of the file containing group information (in /etc/group file format). This field must be populated when 'usernameSource' is set to 'File'.
	GroupFileURI *string `pulumi:"groupFileURI"`
	// The base distinguished name for the LDAP domain.
	LdapBaseDn *string `pulumi:"ldapBaseDn"`
	// The fully qualified domain name or IP address of the LDAP server to use.
	LdapServer *string `pulumi:"ldapServer"`
	// Determines if the certificates must be validated by a certificate authority. When true, caCertificateURI must be provided.
	RequireValidCertificate *bool `pulumi:"requireValidCertificate"`
	// The URI of the file containing user information (in /etc/passwd file format). This field must be populated when 'usernameSource' is set to 'File'.
	UserFileURI *string `pulumi:"userFileURI"`
	// This setting determines how the cache gets username and group names for clients.
	UsernameSource *string `pulumi:"usernameSource"`
}

// CacheUsernameDownloadSettingsInput is an input type that accepts CacheUsernameDownloadSettingsArgs and CacheUsernameDownloadSettingsOutput values.
// You can construct a concrete instance of `CacheUsernameDownloadSettingsInput` via:
//
//          CacheUsernameDownloadSettingsArgs{...}
type CacheUsernameDownloadSettingsInput interface {
	pulumi.Input

	ToCacheUsernameDownloadSettingsOutput() CacheUsernameDownloadSettingsOutput
	ToCacheUsernameDownloadSettingsOutputWithContext(context.Context) CacheUsernameDownloadSettingsOutput
}

// Settings for Extended Groups username and group download.
type CacheUsernameDownloadSettingsArgs struct {
	// Determines if the certificate should be automatically downloaded. This applies to 'caCertificateURI' only if 'requireValidCertificate' is true.
	AutoDownloadCertificate pulumi.BoolPtrInput `pulumi:"autoDownloadCertificate"`
	// The URI of the CA certificate to validate the LDAP secure connection. This field must be populated when 'requireValidCertificate' is set to true.
	CaCertificateURI pulumi.StringPtrInput `pulumi:"caCertificateURI"`
	// When present, these are the credentials for the secure LDAP connection.
	Credentials CacheUsernameDownloadSettingsCredentialsPtrInput `pulumi:"credentials"`
	// Whether or not the LDAP connection should be encrypted.
	EncryptLdapConnection pulumi.BoolPtrInput `pulumi:"encryptLdapConnection"`
	// Whether or not Extended Groups is enabled.
	ExtendedGroupsEnabled pulumi.BoolPtrInput `pulumi:"extendedGroupsEnabled"`
	// The URI of the file containing group information (in /etc/group file format). This field must be populated when 'usernameSource' is set to 'File'.
	GroupFileURI pulumi.StringPtrInput `pulumi:"groupFileURI"`
	// The base distinguished name for the LDAP domain.
	LdapBaseDn pulumi.StringPtrInput `pulumi:"ldapBaseDn"`
	// The fully qualified domain name or IP address of the LDAP server to use.
	LdapServer pulumi.StringPtrInput `pulumi:"ldapServer"`
	// Determines if the certificates must be validated by a certificate authority. When true, caCertificateURI must be provided.
	RequireValidCertificate pulumi.BoolPtrInput `pulumi:"requireValidCertificate"`
	// The URI of the file containing user information (in /etc/passwd file format). This field must be populated when 'usernameSource' is set to 'File'.
	UserFileURI pulumi.StringPtrInput `pulumi:"userFileURI"`
	// This setting determines how the cache gets username and group names for clients.
	UsernameSource pulumi.StringPtrInput `pulumi:"usernameSource"`
}

func (CacheUsernameDownloadSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CacheUsernameDownloadSettings)(nil)).Elem()
}

func (i CacheUsernameDownloadSettingsArgs) ToCacheUsernameDownloadSettingsOutput() CacheUsernameDownloadSettingsOutput {
	return i.ToCacheUsernameDownloadSettingsOutputWithContext(context.Background())
}

func (i CacheUsernameDownloadSettingsArgs) ToCacheUsernameDownloadSettingsOutputWithContext(ctx context.Context) CacheUsernameDownloadSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CacheUsernameDownloadSettingsOutput)
}

func (i CacheUsernameDownloadSettingsArgs) ToCacheUsernameDownloadSettingsPtrOutput() CacheUsernameDownloadSettingsPtrOutput {
	return i.ToCacheUsernameDownloadSettingsPtrOutputWithContext(context.Background())
}

func (i CacheUsernameDownloadSettingsArgs) ToCacheUsernameDownloadSettingsPtrOutputWithContext(ctx context.Context) CacheUsernameDownloadSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CacheUsernameDownloadSettingsOutput).ToCacheUsernameDownloadSettingsPtrOutputWithContext(ctx)
}

// CacheUsernameDownloadSettingsPtrInput is an input type that accepts CacheUsernameDownloadSettingsArgs, CacheUsernameDownloadSettingsPtr and CacheUsernameDownloadSettingsPtrOutput values.
// You can construct a concrete instance of `CacheUsernameDownloadSettingsPtrInput` via:
//
//          CacheUsernameDownloadSettingsArgs{...}
//
//  or:
//
//          nil
type CacheUsernameDownloadSettingsPtrInput interface {
	pulumi.Input

	ToCacheUsernameDownloadSettingsPtrOutput() CacheUsernameDownloadSettingsPtrOutput
	ToCacheUsernameDownloadSettingsPtrOutputWithContext(context.Context) CacheUsernameDownloadSettingsPtrOutput
}

type cacheUsernameDownloadSettingsPtrType CacheUsernameDownloadSettingsArgs

func CacheUsernameDownloadSettingsPtr(v *CacheUsernameDownloadSettingsArgs) CacheUsernameDownloadSettingsPtrInput {
	return (*cacheUsernameDownloadSettingsPtrType)(v)
}

func (*cacheUsernameDownloadSettingsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CacheUsernameDownloadSettings)(nil)).Elem()
}

func (i *cacheUsernameDownloadSettingsPtrType) ToCacheUsernameDownloadSettingsPtrOutput() CacheUsernameDownloadSettingsPtrOutput {
	return i.ToCacheUsernameDownloadSettingsPtrOutputWithContext(context.Background())
}

func (i *cacheUsernameDownloadSettingsPtrType) ToCacheUsernameDownloadSettingsPtrOutputWithContext(ctx context.Context) CacheUsernameDownloadSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CacheUsernameDownloadSettingsPtrOutput)
}

// Settings for Extended Groups username and group download.
type CacheUsernameDownloadSettingsOutput struct{ *pulumi.OutputState }

func (CacheUsernameDownloadSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CacheUsernameDownloadSettings)(nil)).Elem()
}

func (o CacheUsernameDownloadSettingsOutput) ToCacheUsernameDownloadSettingsOutput() CacheUsernameDownloadSettingsOutput {
	return o
}

func (o CacheUsernameDownloadSettingsOutput) ToCacheUsernameDownloadSettingsOutputWithContext(ctx context.Context) CacheUsernameDownloadSettingsOutput {
	return o
}

func (o CacheUsernameDownloadSettingsOutput) ToCacheUsernameDownloadSettingsPtrOutput() CacheUsernameDownloadSettingsPtrOutput {
	return o.ToCacheUsernameDownloadSettingsPtrOutputWithContext(context.Background())
}

func (o CacheUsernameDownloadSettingsOutput) ToCacheUsernameDownloadSettingsPtrOutputWithContext(ctx context.Context) CacheUsernameDownloadSettingsPtrOutput {
	return o.ApplyT(func(v CacheUsernameDownloadSettings) *CacheUsernameDownloadSettings {
		return &v
	}).(CacheUsernameDownloadSettingsPtrOutput)
}

// Determines if the certificate should be automatically downloaded. This applies to 'caCertificateURI' only if 'requireValidCertificate' is true.
func (o CacheUsernameDownloadSettingsOutput) AutoDownloadCertificate() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v CacheUsernameDownloadSettings) *bool { return v.AutoDownloadCertificate }).(pulumi.BoolPtrOutput)
}

// The URI of the CA certificate to validate the LDAP secure connection. This field must be populated when 'requireValidCertificate' is set to true.
func (o CacheUsernameDownloadSettingsOutput) CaCertificateURI() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CacheUsernameDownloadSettings) *string { return v.CaCertificateURI }).(pulumi.StringPtrOutput)
}

// When present, these are the credentials for the secure LDAP connection.
func (o CacheUsernameDownloadSettingsOutput) Credentials() CacheUsernameDownloadSettingsCredentialsPtrOutput {
	return o.ApplyT(func(v CacheUsernameDownloadSettings) *CacheUsernameDownloadSettingsCredentials { return v.Credentials }).(CacheUsernameDownloadSettingsCredentialsPtrOutput)
}

// Whether or not the LDAP connection should be encrypted.
func (o CacheUsernameDownloadSettingsOutput) EncryptLdapConnection() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v CacheUsernameDownloadSettings) *bool { return v.EncryptLdapConnection }).(pulumi.BoolPtrOutput)
}

// Whether or not Extended Groups is enabled.
func (o CacheUsernameDownloadSettingsOutput) ExtendedGroupsEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v CacheUsernameDownloadSettings) *bool { return v.ExtendedGroupsEnabled }).(pulumi.BoolPtrOutput)
}

// The URI of the file containing group information (in /etc/group file format). This field must be populated when 'usernameSource' is set to 'File'.
func (o CacheUsernameDownloadSettingsOutput) GroupFileURI() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CacheUsernameDownloadSettings) *string { return v.GroupFileURI }).(pulumi.StringPtrOutput)
}

// The base distinguished name for the LDAP domain.
func (o CacheUsernameDownloadSettingsOutput) LdapBaseDn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CacheUsernameDownloadSettings) *string { return v.LdapBaseDn }).(pulumi.StringPtrOutput)
}

// The fully qualified domain name or IP address of the LDAP server to use.
func (o CacheUsernameDownloadSettingsOutput) LdapServer() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CacheUsernameDownloadSettings) *string { return v.LdapServer }).(pulumi.StringPtrOutput)
}

// Determines if the certificates must be validated by a certificate authority. When true, caCertificateURI must be provided.
func (o CacheUsernameDownloadSettingsOutput) RequireValidCertificate() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v CacheUsernameDownloadSettings) *bool { return v.RequireValidCertificate }).(pulumi.BoolPtrOutput)
}

// The URI of the file containing user information (in /etc/passwd file format). This field must be populated when 'usernameSource' is set to 'File'.
func (o CacheUsernameDownloadSettingsOutput) UserFileURI() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CacheUsernameDownloadSettings) *string { return v.UserFileURI }).(pulumi.StringPtrOutput)
}

// This setting determines how the cache gets username and group names for clients.
func (o CacheUsernameDownloadSettingsOutput) UsernameSource() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CacheUsernameDownloadSettings) *string { return v.UsernameSource }).(pulumi.StringPtrOutput)
}

type CacheUsernameDownloadSettingsPtrOutput struct{ *pulumi.OutputState }

func (CacheUsernameDownloadSettingsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CacheUsernameDownloadSettings)(nil)).Elem()
}

func (o CacheUsernameDownloadSettingsPtrOutput) ToCacheUsernameDownloadSettingsPtrOutput() CacheUsernameDownloadSettingsPtrOutput {
	return o
}

func (o CacheUsernameDownloadSettingsPtrOutput) ToCacheUsernameDownloadSettingsPtrOutputWithContext(ctx context.Context) CacheUsernameDownloadSettingsPtrOutput {
	return o
}

func (o CacheUsernameDownloadSettingsPtrOutput) Elem() CacheUsernameDownloadSettingsOutput {
	return o.ApplyT(func(v *CacheUsernameDownloadSettings) CacheUsernameDownloadSettings { return *v }).(CacheUsernameDownloadSettingsOutput)
}

// Determines if the certificate should be automatically downloaded. This applies to 'caCertificateURI' only if 'requireValidCertificate' is true.
func (o CacheUsernameDownloadSettingsPtrOutput) AutoDownloadCertificate() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *CacheUsernameDownloadSettings) *bool {
		if v == nil {
			return nil
		}
		return v.AutoDownloadCertificate
	}).(pulumi.BoolPtrOutput)
}

// The URI of the CA certificate to validate the LDAP secure connection. This field must be populated when 'requireValidCertificate' is set to true.
func (o CacheUsernameDownloadSettingsPtrOutput) CaCertificateURI() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CacheUsernameDownloadSettings) *string {
		if v == nil {
			return nil
		}
		return v.CaCertificateURI
	}).(pulumi.StringPtrOutput)
}

// When present, these are the credentials for the secure LDAP connection.
func (o CacheUsernameDownloadSettingsPtrOutput) Credentials() CacheUsernameDownloadSettingsCredentialsPtrOutput {
	return o.ApplyT(func(v *CacheUsernameDownloadSettings) *CacheUsernameDownloadSettingsCredentials {
		if v == nil {
			return nil
		}
		return v.Credentials
	}).(CacheUsernameDownloadSettingsCredentialsPtrOutput)
}

// Whether or not the LDAP connection should be encrypted.
func (o CacheUsernameDownloadSettingsPtrOutput) EncryptLdapConnection() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *CacheUsernameDownloadSettings) *bool {
		if v == nil {
			return nil
		}
		return v.EncryptLdapConnection
	}).(pulumi.BoolPtrOutput)
}

// Whether or not Extended Groups is enabled.
func (o CacheUsernameDownloadSettingsPtrOutput) ExtendedGroupsEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *CacheUsernameDownloadSettings) *bool {
		if v == nil {
			return nil
		}
		return v.ExtendedGroupsEnabled
	}).(pulumi.BoolPtrOutput)
}

// The URI of the file containing group information (in /etc/group file format). This field must be populated when 'usernameSource' is set to 'File'.
func (o CacheUsernameDownloadSettingsPtrOutput) GroupFileURI() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CacheUsernameDownloadSettings) *string {
		if v == nil {
			return nil
		}
		return v.GroupFileURI
	}).(pulumi.StringPtrOutput)
}

// The base distinguished name for the LDAP domain.
func (o CacheUsernameDownloadSettingsPtrOutput) LdapBaseDn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CacheUsernameDownloadSettings) *string {
		if v == nil {
			return nil
		}
		return v.LdapBaseDn
	}).(pulumi.StringPtrOutput)
}

// The fully qualified domain name or IP address of the LDAP server to use.
func (o CacheUsernameDownloadSettingsPtrOutput) LdapServer() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CacheUsernameDownloadSettings) *string {
		if v == nil {
			return nil
		}
		return v.LdapServer
	}).(pulumi.StringPtrOutput)
}

// Determines if the certificates must be validated by a certificate authority. When true, caCertificateURI must be provided.
func (o CacheUsernameDownloadSettingsPtrOutput) RequireValidCertificate() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *CacheUsernameDownloadSettings) *bool {
		if v == nil {
			return nil
		}
		return v.RequireValidCertificate
	}).(pulumi.BoolPtrOutput)
}

// The URI of the file containing user information (in /etc/passwd file format). This field must be populated when 'usernameSource' is set to 'File'.
func (o CacheUsernameDownloadSettingsPtrOutput) UserFileURI() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CacheUsernameDownloadSettings) *string {
		if v == nil {
			return nil
		}
		return v.UserFileURI
	}).(pulumi.StringPtrOutput)
}

// This setting determines how the cache gets username and group names for clients.
func (o CacheUsernameDownloadSettingsPtrOutput) UsernameSource() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CacheUsernameDownloadSettings) *string {
		if v == nil {
			return nil
		}
		return v.UsernameSource
	}).(pulumi.StringPtrOutput)
}

// When present, these are the credentials for the secure LDAP connection.
type CacheUsernameDownloadSettingsCredentials struct {
	// The Bind Distinguished Name identity to be used in the secure LDAP connection. This value is stored encrypted and not returned on response.
	BindDn *string `pulumi:"bindDn"`
	// The Bind password to be used in the secure LDAP connection. This value is stored encrypted and not returned on response.
	BindPassword *string `pulumi:"bindPassword"`
}

// CacheUsernameDownloadSettingsCredentialsInput is an input type that accepts CacheUsernameDownloadSettingsCredentialsArgs and CacheUsernameDownloadSettingsCredentialsOutput values.
// You can construct a concrete instance of `CacheUsernameDownloadSettingsCredentialsInput` via:
//
//          CacheUsernameDownloadSettingsCredentialsArgs{...}
type CacheUsernameDownloadSettingsCredentialsInput interface {
	pulumi.Input

	ToCacheUsernameDownloadSettingsCredentialsOutput() CacheUsernameDownloadSettingsCredentialsOutput
	ToCacheUsernameDownloadSettingsCredentialsOutputWithContext(context.Context) CacheUsernameDownloadSettingsCredentialsOutput
}

// When present, these are the credentials for the secure LDAP connection.
type CacheUsernameDownloadSettingsCredentialsArgs struct {
	// The Bind Distinguished Name identity to be used in the secure LDAP connection. This value is stored encrypted and not returned on response.
	BindDn pulumi.StringPtrInput `pulumi:"bindDn"`
	// The Bind password to be used in the secure LDAP connection. This value is stored encrypted and not returned on response.
	BindPassword pulumi.StringPtrInput `pulumi:"bindPassword"`
}

func (CacheUsernameDownloadSettingsCredentialsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CacheUsernameDownloadSettingsCredentials)(nil)).Elem()
}

func (i CacheUsernameDownloadSettingsCredentialsArgs) ToCacheUsernameDownloadSettingsCredentialsOutput() CacheUsernameDownloadSettingsCredentialsOutput {
	return i.ToCacheUsernameDownloadSettingsCredentialsOutputWithContext(context.Background())
}

func (i CacheUsernameDownloadSettingsCredentialsArgs) ToCacheUsernameDownloadSettingsCredentialsOutputWithContext(ctx context.Context) CacheUsernameDownloadSettingsCredentialsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CacheUsernameDownloadSettingsCredentialsOutput)
}

func (i CacheUsernameDownloadSettingsCredentialsArgs) ToCacheUsernameDownloadSettingsCredentialsPtrOutput() CacheUsernameDownloadSettingsCredentialsPtrOutput {
	return i.ToCacheUsernameDownloadSettingsCredentialsPtrOutputWithContext(context.Background())
}

func (i CacheUsernameDownloadSettingsCredentialsArgs) ToCacheUsernameDownloadSettingsCredentialsPtrOutputWithContext(ctx context.Context) CacheUsernameDownloadSettingsCredentialsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CacheUsernameDownloadSettingsCredentialsOutput).ToCacheUsernameDownloadSettingsCredentialsPtrOutputWithContext(ctx)
}

// CacheUsernameDownloadSettingsCredentialsPtrInput is an input type that accepts CacheUsernameDownloadSettingsCredentialsArgs, CacheUsernameDownloadSettingsCredentialsPtr and CacheUsernameDownloadSettingsCredentialsPtrOutput values.
// You can construct a concrete instance of `CacheUsernameDownloadSettingsCredentialsPtrInput` via:
//
//          CacheUsernameDownloadSettingsCredentialsArgs{...}
//
//  or:
//
//          nil
type CacheUsernameDownloadSettingsCredentialsPtrInput interface {
	pulumi.Input

	ToCacheUsernameDownloadSettingsCredentialsPtrOutput() CacheUsernameDownloadSettingsCredentialsPtrOutput
	ToCacheUsernameDownloadSettingsCredentialsPtrOutputWithContext(context.Context) CacheUsernameDownloadSettingsCredentialsPtrOutput
}

type cacheUsernameDownloadSettingsCredentialsPtrType CacheUsernameDownloadSettingsCredentialsArgs

func CacheUsernameDownloadSettingsCredentialsPtr(v *CacheUsernameDownloadSettingsCredentialsArgs) CacheUsernameDownloadSettingsCredentialsPtrInput {
	return (*cacheUsernameDownloadSettingsCredentialsPtrType)(v)
}

func (*cacheUsernameDownloadSettingsCredentialsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CacheUsernameDownloadSettingsCredentials)(nil)).Elem()
}

func (i *cacheUsernameDownloadSettingsCredentialsPtrType) ToCacheUsernameDownloadSettingsCredentialsPtrOutput() CacheUsernameDownloadSettingsCredentialsPtrOutput {
	return i.ToCacheUsernameDownloadSettingsCredentialsPtrOutputWithContext(context.Background())
}

func (i *cacheUsernameDownloadSettingsCredentialsPtrType) ToCacheUsernameDownloadSettingsCredentialsPtrOutputWithContext(ctx context.Context) CacheUsernameDownloadSettingsCredentialsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CacheUsernameDownloadSettingsCredentialsPtrOutput)
}

// When present, these are the credentials for the secure LDAP connection.
type CacheUsernameDownloadSettingsCredentialsOutput struct{ *pulumi.OutputState }

func (CacheUsernameDownloadSettingsCredentialsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CacheUsernameDownloadSettingsCredentials)(nil)).Elem()
}

func (o CacheUsernameDownloadSettingsCredentialsOutput) ToCacheUsernameDownloadSettingsCredentialsOutput() CacheUsernameDownloadSettingsCredentialsOutput {
	return o
}

func (o CacheUsernameDownloadSettingsCredentialsOutput) ToCacheUsernameDownloadSettingsCredentialsOutputWithContext(ctx context.Context) CacheUsernameDownloadSettingsCredentialsOutput {
	return o
}

func (o CacheUsernameDownloadSettingsCredentialsOutput) ToCacheUsernameDownloadSettingsCredentialsPtrOutput() CacheUsernameDownloadSettingsCredentialsPtrOutput {
	return o.ToCacheUsernameDownloadSettingsCredentialsPtrOutputWithContext(context.Background())
}

func (o CacheUsernameDownloadSettingsCredentialsOutput) ToCacheUsernameDownloadSettingsCredentialsPtrOutputWithContext(ctx context.Context) CacheUsernameDownloadSettingsCredentialsPtrOutput {
	return o.ApplyT(func(v CacheUsernameDownloadSettingsCredentials) *CacheUsernameDownloadSettingsCredentials {
		return &v
	}).(CacheUsernameDownloadSettingsCredentialsPtrOutput)
}

// The Bind Distinguished Name identity to be used in the secure LDAP connection. This value is stored encrypted and not returned on response.
func (o CacheUsernameDownloadSettingsCredentialsOutput) BindDn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CacheUsernameDownloadSettingsCredentials) *string { return v.BindDn }).(pulumi.StringPtrOutput)
}

// The Bind password to be used in the secure LDAP connection. This value is stored encrypted and not returned on response.
func (o CacheUsernameDownloadSettingsCredentialsOutput) BindPassword() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CacheUsernameDownloadSettingsCredentials) *string { return v.BindPassword }).(pulumi.StringPtrOutput)
}

type CacheUsernameDownloadSettingsCredentialsPtrOutput struct{ *pulumi.OutputState }

func (CacheUsernameDownloadSettingsCredentialsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CacheUsernameDownloadSettingsCredentials)(nil)).Elem()
}

func (o CacheUsernameDownloadSettingsCredentialsPtrOutput) ToCacheUsernameDownloadSettingsCredentialsPtrOutput() CacheUsernameDownloadSettingsCredentialsPtrOutput {
	return o
}

func (o CacheUsernameDownloadSettingsCredentialsPtrOutput) ToCacheUsernameDownloadSettingsCredentialsPtrOutputWithContext(ctx context.Context) CacheUsernameDownloadSettingsCredentialsPtrOutput {
	return o
}

func (o CacheUsernameDownloadSettingsCredentialsPtrOutput) Elem() CacheUsernameDownloadSettingsCredentialsOutput {
	return o.ApplyT(func(v *CacheUsernameDownloadSettingsCredentials) CacheUsernameDownloadSettingsCredentials { return *v }).(CacheUsernameDownloadSettingsCredentialsOutput)
}

// The Bind Distinguished Name identity to be used in the secure LDAP connection. This value is stored encrypted and not returned on response.
func (o CacheUsernameDownloadSettingsCredentialsPtrOutput) BindDn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CacheUsernameDownloadSettingsCredentials) *string {
		if v == nil {
			return nil
		}
		return v.BindDn
	}).(pulumi.StringPtrOutput)
}

// The Bind password to be used in the secure LDAP connection. This value is stored encrypted and not returned on response.
func (o CacheUsernameDownloadSettingsCredentialsPtrOutput) BindPassword() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CacheUsernameDownloadSettingsCredentials) *string {
		if v == nil {
			return nil
		}
		return v.BindPassword
	}).(pulumi.StringPtrOutput)
}

// Settings for Extended Groups username and group download.
type CacheUsernameDownloadSettingsInvokeResponse struct {
	// Determines if the certificate should be automatically downloaded. This applies to 'caCertificateURI' only if 'requireValidCertificate' is true.
	AutoDownloadCertificate *bool `pulumi:"autoDownloadCertificate"`
	// The URI of the CA certificate to validate the LDAP secure connection. This field must be populated when 'requireValidCertificate' is set to true.
	CaCertificateURI *string `pulumi:"caCertificateURI"`
	// When present, these are the credentials for the secure LDAP connection.
	Credentials *CacheUsernameDownloadSettingsInvokeResponseCredentials `pulumi:"credentials"`
	// Whether or not the LDAP connection should be encrypted.
	EncryptLdapConnection *bool `pulumi:"encryptLdapConnection"`
	// Whether or not Extended Groups is enabled.
	ExtendedGroupsEnabled *bool `pulumi:"extendedGroupsEnabled"`
	// The URI of the file containing group information (in /etc/group file format). This field must be populated when 'usernameSource' is set to 'File'.
	GroupFileURI *string `pulumi:"groupFileURI"`
	// The base distinguished name for the LDAP domain.
	LdapBaseDn *string `pulumi:"ldapBaseDn"`
	// The fully qualified domain name or IP address of the LDAP server to use.
	LdapServer *string `pulumi:"ldapServer"`
	// Determines if the certificates must be validated by a certificate authority. When true, caCertificateURI must be provided.
	RequireValidCertificate *bool `pulumi:"requireValidCertificate"`
	// The URI of the file containing user information (in /etc/passwd file format). This field must be populated when 'usernameSource' is set to 'File'.
	UserFileURI *string `pulumi:"userFileURI"`
	// Indicates whether or not the HPC Cache has performed the username download successfully.
	UsernameDownloaded string `pulumi:"usernameDownloaded"`
	// This setting determines how the cache gets username and group names for clients.
	UsernameSource *string `pulumi:"usernameSource"`
}

// CacheUsernameDownloadSettingsInvokeResponseInput is an input type that accepts CacheUsernameDownloadSettingsInvokeResponseArgs and CacheUsernameDownloadSettingsInvokeResponseOutput values.
// You can construct a concrete instance of `CacheUsernameDownloadSettingsInvokeResponseInput` via:
//
//          CacheUsernameDownloadSettingsInvokeResponseArgs{...}
type CacheUsernameDownloadSettingsInvokeResponseInput interface {
	pulumi.Input

	ToCacheUsernameDownloadSettingsInvokeResponseOutput() CacheUsernameDownloadSettingsInvokeResponseOutput
	ToCacheUsernameDownloadSettingsInvokeResponseOutputWithContext(context.Context) CacheUsernameDownloadSettingsInvokeResponseOutput
}

// Settings for Extended Groups username and group download.
type CacheUsernameDownloadSettingsInvokeResponseArgs struct {
	// Determines if the certificate should be automatically downloaded. This applies to 'caCertificateURI' only if 'requireValidCertificate' is true.
	AutoDownloadCertificate pulumi.BoolPtrInput `pulumi:"autoDownloadCertificate"`
	// The URI of the CA certificate to validate the LDAP secure connection. This field must be populated when 'requireValidCertificate' is set to true.
	CaCertificateURI pulumi.StringPtrInput `pulumi:"caCertificateURI"`
	// When present, these are the credentials for the secure LDAP connection.
	Credentials CacheUsernameDownloadSettingsInvokeResponseCredentialsPtrInput `pulumi:"credentials"`
	// Whether or not the LDAP connection should be encrypted.
	EncryptLdapConnection pulumi.BoolPtrInput `pulumi:"encryptLdapConnection"`
	// Whether or not Extended Groups is enabled.
	ExtendedGroupsEnabled pulumi.BoolPtrInput `pulumi:"extendedGroupsEnabled"`
	// The URI of the file containing group information (in /etc/group file format). This field must be populated when 'usernameSource' is set to 'File'.
	GroupFileURI pulumi.StringPtrInput `pulumi:"groupFileURI"`
	// The base distinguished name for the LDAP domain.
	LdapBaseDn pulumi.StringPtrInput `pulumi:"ldapBaseDn"`
	// The fully qualified domain name or IP address of the LDAP server to use.
	LdapServer pulumi.StringPtrInput `pulumi:"ldapServer"`
	// Determines if the certificates must be validated by a certificate authority. When true, caCertificateURI must be provided.
	RequireValidCertificate pulumi.BoolPtrInput `pulumi:"requireValidCertificate"`
	// The URI of the file containing user information (in /etc/passwd file format). This field must be populated when 'usernameSource' is set to 'File'.
	UserFileURI pulumi.StringPtrInput `pulumi:"userFileURI"`
	// Indicates whether or not the HPC Cache has performed the username download successfully.
	UsernameDownloaded pulumi.StringInput `pulumi:"usernameDownloaded"`
	// This setting determines how the cache gets username and group names for clients.
	UsernameSource pulumi.StringPtrInput `pulumi:"usernameSource"`
}

func (CacheUsernameDownloadSettingsInvokeResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CacheUsernameDownloadSettingsInvokeResponse)(nil)).Elem()
}

func (i CacheUsernameDownloadSettingsInvokeResponseArgs) ToCacheUsernameDownloadSettingsInvokeResponseOutput() CacheUsernameDownloadSettingsInvokeResponseOutput {
	return i.ToCacheUsernameDownloadSettingsInvokeResponseOutputWithContext(context.Background())
}

func (i CacheUsernameDownloadSettingsInvokeResponseArgs) ToCacheUsernameDownloadSettingsInvokeResponseOutputWithContext(ctx context.Context) CacheUsernameDownloadSettingsInvokeResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CacheUsernameDownloadSettingsInvokeResponseOutput)
}

func (i CacheUsernameDownloadSettingsInvokeResponseArgs) ToCacheUsernameDownloadSettingsInvokeResponsePtrOutput() CacheUsernameDownloadSettingsInvokeResponsePtrOutput {
	return i.ToCacheUsernameDownloadSettingsInvokeResponsePtrOutputWithContext(context.Background())
}

func (i CacheUsernameDownloadSettingsInvokeResponseArgs) ToCacheUsernameDownloadSettingsInvokeResponsePtrOutputWithContext(ctx context.Context) CacheUsernameDownloadSettingsInvokeResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CacheUsernameDownloadSettingsInvokeResponseOutput).ToCacheUsernameDownloadSettingsInvokeResponsePtrOutputWithContext(ctx)
}

// CacheUsernameDownloadSettingsInvokeResponsePtrInput is an input type that accepts CacheUsernameDownloadSettingsInvokeResponseArgs, CacheUsernameDownloadSettingsInvokeResponsePtr and CacheUsernameDownloadSettingsInvokeResponsePtrOutput values.
// You can construct a concrete instance of `CacheUsernameDownloadSettingsInvokeResponsePtrInput` via:
//
//          CacheUsernameDownloadSettingsInvokeResponseArgs{...}
//
//  or:
//
//          nil
type CacheUsernameDownloadSettingsInvokeResponsePtrInput interface {
	pulumi.Input

	ToCacheUsernameDownloadSettingsInvokeResponsePtrOutput() CacheUsernameDownloadSettingsInvokeResponsePtrOutput
	ToCacheUsernameDownloadSettingsInvokeResponsePtrOutputWithContext(context.Context) CacheUsernameDownloadSettingsInvokeResponsePtrOutput
}

type cacheUsernameDownloadSettingsInvokeResponsePtrType CacheUsernameDownloadSettingsInvokeResponseArgs

func CacheUsernameDownloadSettingsInvokeResponsePtr(v *CacheUsernameDownloadSettingsInvokeResponseArgs) CacheUsernameDownloadSettingsInvokeResponsePtrInput {
	return (*cacheUsernameDownloadSettingsInvokeResponsePtrType)(v)
}

func (*cacheUsernameDownloadSettingsInvokeResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CacheUsernameDownloadSettingsInvokeResponse)(nil)).Elem()
}

func (i *cacheUsernameDownloadSettingsInvokeResponsePtrType) ToCacheUsernameDownloadSettingsInvokeResponsePtrOutput() CacheUsernameDownloadSettingsInvokeResponsePtrOutput {
	return i.ToCacheUsernameDownloadSettingsInvokeResponsePtrOutputWithContext(context.Background())
}

func (i *cacheUsernameDownloadSettingsInvokeResponsePtrType) ToCacheUsernameDownloadSettingsInvokeResponsePtrOutputWithContext(ctx context.Context) CacheUsernameDownloadSettingsInvokeResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CacheUsernameDownloadSettingsInvokeResponsePtrOutput)
}

// Settings for Extended Groups username and group download.
type CacheUsernameDownloadSettingsInvokeResponseOutput struct{ *pulumi.OutputState }

func (CacheUsernameDownloadSettingsInvokeResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CacheUsernameDownloadSettingsInvokeResponse)(nil)).Elem()
}

func (o CacheUsernameDownloadSettingsInvokeResponseOutput) ToCacheUsernameDownloadSettingsInvokeResponseOutput() CacheUsernameDownloadSettingsInvokeResponseOutput {
	return o
}

func (o CacheUsernameDownloadSettingsInvokeResponseOutput) ToCacheUsernameDownloadSettingsInvokeResponseOutputWithContext(ctx context.Context) CacheUsernameDownloadSettingsInvokeResponseOutput {
	return o
}

func (o CacheUsernameDownloadSettingsInvokeResponseOutput) ToCacheUsernameDownloadSettingsInvokeResponsePtrOutput() CacheUsernameDownloadSettingsInvokeResponsePtrOutput {
	return o.ToCacheUsernameDownloadSettingsInvokeResponsePtrOutputWithContext(context.Background())
}

func (o CacheUsernameDownloadSettingsInvokeResponseOutput) ToCacheUsernameDownloadSettingsInvokeResponsePtrOutputWithContext(ctx context.Context) CacheUsernameDownloadSettingsInvokeResponsePtrOutput {
	return o.ApplyT(func(v CacheUsernameDownloadSettingsInvokeResponse) *CacheUsernameDownloadSettingsInvokeResponse {
		return &v
	}).(CacheUsernameDownloadSettingsInvokeResponsePtrOutput)
}

// Determines if the certificate should be automatically downloaded. This applies to 'caCertificateURI' only if 'requireValidCertificate' is true.
func (o CacheUsernameDownloadSettingsInvokeResponseOutput) AutoDownloadCertificate() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v CacheUsernameDownloadSettingsInvokeResponse) *bool { return v.AutoDownloadCertificate }).(pulumi.BoolPtrOutput)
}

// The URI of the CA certificate to validate the LDAP secure connection. This field must be populated when 'requireValidCertificate' is set to true.
func (o CacheUsernameDownloadSettingsInvokeResponseOutput) CaCertificateURI() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CacheUsernameDownloadSettingsInvokeResponse) *string { return v.CaCertificateURI }).(pulumi.StringPtrOutput)
}

// When present, these are the credentials for the secure LDAP connection.
func (o CacheUsernameDownloadSettingsInvokeResponseOutput) Credentials() CacheUsernameDownloadSettingsInvokeResponseCredentialsPtrOutput {
	return o.ApplyT(func(v CacheUsernameDownloadSettingsInvokeResponse) *CacheUsernameDownloadSettingsInvokeResponseCredentials {
		return v.Credentials
	}).(CacheUsernameDownloadSettingsInvokeResponseCredentialsPtrOutput)
}

// Whether or not the LDAP connection should be encrypted.
func (o CacheUsernameDownloadSettingsInvokeResponseOutput) EncryptLdapConnection() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v CacheUsernameDownloadSettingsInvokeResponse) *bool { return v.EncryptLdapConnection }).(pulumi.BoolPtrOutput)
}

// Whether or not Extended Groups is enabled.
func (o CacheUsernameDownloadSettingsInvokeResponseOutput) ExtendedGroupsEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v CacheUsernameDownloadSettingsInvokeResponse) *bool { return v.ExtendedGroupsEnabled }).(pulumi.BoolPtrOutput)
}

// The URI of the file containing group information (in /etc/group file format). This field must be populated when 'usernameSource' is set to 'File'.
func (o CacheUsernameDownloadSettingsInvokeResponseOutput) GroupFileURI() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CacheUsernameDownloadSettingsInvokeResponse) *string { return v.GroupFileURI }).(pulumi.StringPtrOutput)
}

// The base distinguished name for the LDAP domain.
func (o CacheUsernameDownloadSettingsInvokeResponseOutput) LdapBaseDn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CacheUsernameDownloadSettingsInvokeResponse) *string { return v.LdapBaseDn }).(pulumi.StringPtrOutput)
}

// The fully qualified domain name or IP address of the LDAP server to use.
func (o CacheUsernameDownloadSettingsInvokeResponseOutput) LdapServer() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CacheUsernameDownloadSettingsInvokeResponse) *string { return v.LdapServer }).(pulumi.StringPtrOutput)
}

// Determines if the certificates must be validated by a certificate authority. When true, caCertificateURI must be provided.
func (o CacheUsernameDownloadSettingsInvokeResponseOutput) RequireValidCertificate() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v CacheUsernameDownloadSettingsInvokeResponse) *bool { return v.RequireValidCertificate }).(pulumi.BoolPtrOutput)
}

// The URI of the file containing user information (in /etc/passwd file format). This field must be populated when 'usernameSource' is set to 'File'.
func (o CacheUsernameDownloadSettingsInvokeResponseOutput) UserFileURI() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CacheUsernameDownloadSettingsInvokeResponse) *string { return v.UserFileURI }).(pulumi.StringPtrOutput)
}

// Indicates whether or not the HPC Cache has performed the username download successfully.
func (o CacheUsernameDownloadSettingsInvokeResponseOutput) UsernameDownloaded() pulumi.StringOutput {
	return o.ApplyT(func(v CacheUsernameDownloadSettingsInvokeResponse) string { return v.UsernameDownloaded }).(pulumi.StringOutput)
}

// This setting determines how the cache gets username and group names for clients.
func (o CacheUsernameDownloadSettingsInvokeResponseOutput) UsernameSource() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CacheUsernameDownloadSettingsInvokeResponse) *string { return v.UsernameSource }).(pulumi.StringPtrOutput)
}

type CacheUsernameDownloadSettingsInvokeResponsePtrOutput struct{ *pulumi.OutputState }

func (CacheUsernameDownloadSettingsInvokeResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CacheUsernameDownloadSettingsInvokeResponse)(nil)).Elem()
}

func (o CacheUsernameDownloadSettingsInvokeResponsePtrOutput) ToCacheUsernameDownloadSettingsInvokeResponsePtrOutput() CacheUsernameDownloadSettingsInvokeResponsePtrOutput {
	return o
}

func (o CacheUsernameDownloadSettingsInvokeResponsePtrOutput) ToCacheUsernameDownloadSettingsInvokeResponsePtrOutputWithContext(ctx context.Context) CacheUsernameDownloadSettingsInvokeResponsePtrOutput {
	return o
}

func (o CacheUsernameDownloadSettingsInvokeResponsePtrOutput) Elem() CacheUsernameDownloadSettingsInvokeResponseOutput {
	return o.ApplyT(func(v *CacheUsernameDownloadSettingsInvokeResponse) CacheUsernameDownloadSettingsInvokeResponse {
		return *v
	}).(CacheUsernameDownloadSettingsInvokeResponseOutput)
}

// Determines if the certificate should be automatically downloaded. This applies to 'caCertificateURI' only if 'requireValidCertificate' is true.
func (o CacheUsernameDownloadSettingsInvokeResponsePtrOutput) AutoDownloadCertificate() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *CacheUsernameDownloadSettingsInvokeResponse) *bool {
		if v == nil {
			return nil
		}
		return v.AutoDownloadCertificate
	}).(pulumi.BoolPtrOutput)
}

// The URI of the CA certificate to validate the LDAP secure connection. This field must be populated when 'requireValidCertificate' is set to true.
func (o CacheUsernameDownloadSettingsInvokeResponsePtrOutput) CaCertificateURI() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CacheUsernameDownloadSettingsInvokeResponse) *string {
		if v == nil {
			return nil
		}
		return v.CaCertificateURI
	}).(pulumi.StringPtrOutput)
}

// When present, these are the credentials for the secure LDAP connection.
func (o CacheUsernameDownloadSettingsInvokeResponsePtrOutput) Credentials() CacheUsernameDownloadSettingsInvokeResponseCredentialsPtrOutput {
	return o.ApplyT(func(v *CacheUsernameDownloadSettingsInvokeResponse) *CacheUsernameDownloadSettingsInvokeResponseCredentials {
		if v == nil {
			return nil
		}
		return v.Credentials
	}).(CacheUsernameDownloadSettingsInvokeResponseCredentialsPtrOutput)
}

// Whether or not the LDAP connection should be encrypted.
func (o CacheUsernameDownloadSettingsInvokeResponsePtrOutput) EncryptLdapConnection() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *CacheUsernameDownloadSettingsInvokeResponse) *bool {
		if v == nil {
			return nil
		}
		return v.EncryptLdapConnection
	}).(pulumi.BoolPtrOutput)
}

// Whether or not Extended Groups is enabled.
func (o CacheUsernameDownloadSettingsInvokeResponsePtrOutput) ExtendedGroupsEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *CacheUsernameDownloadSettingsInvokeResponse) *bool {
		if v == nil {
			return nil
		}
		return v.ExtendedGroupsEnabled
	}).(pulumi.BoolPtrOutput)
}

// The URI of the file containing group information (in /etc/group file format). This field must be populated when 'usernameSource' is set to 'File'.
func (o CacheUsernameDownloadSettingsInvokeResponsePtrOutput) GroupFileURI() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CacheUsernameDownloadSettingsInvokeResponse) *string {
		if v == nil {
			return nil
		}
		return v.GroupFileURI
	}).(pulumi.StringPtrOutput)
}

// The base distinguished name for the LDAP domain.
func (o CacheUsernameDownloadSettingsInvokeResponsePtrOutput) LdapBaseDn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CacheUsernameDownloadSettingsInvokeResponse) *string {
		if v == nil {
			return nil
		}
		return v.LdapBaseDn
	}).(pulumi.StringPtrOutput)
}

// The fully qualified domain name or IP address of the LDAP server to use.
func (o CacheUsernameDownloadSettingsInvokeResponsePtrOutput) LdapServer() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CacheUsernameDownloadSettingsInvokeResponse) *string {
		if v == nil {
			return nil
		}
		return v.LdapServer
	}).(pulumi.StringPtrOutput)
}

// Determines if the certificates must be validated by a certificate authority. When true, caCertificateURI must be provided.
func (o CacheUsernameDownloadSettingsInvokeResponsePtrOutput) RequireValidCertificate() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *CacheUsernameDownloadSettingsInvokeResponse) *bool {
		if v == nil {
			return nil
		}
		return v.RequireValidCertificate
	}).(pulumi.BoolPtrOutput)
}

// The URI of the file containing user information (in /etc/passwd file format). This field must be populated when 'usernameSource' is set to 'File'.
func (o CacheUsernameDownloadSettingsInvokeResponsePtrOutput) UserFileURI() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CacheUsernameDownloadSettingsInvokeResponse) *string {
		if v == nil {
			return nil
		}
		return v.UserFileURI
	}).(pulumi.StringPtrOutput)
}

// Indicates whether or not the HPC Cache has performed the username download successfully.
func (o CacheUsernameDownloadSettingsInvokeResponsePtrOutput) UsernameDownloaded() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CacheUsernameDownloadSettingsInvokeResponse) *string {
		if v == nil {
			return nil
		}
		return &v.UsernameDownloaded
	}).(pulumi.StringPtrOutput)
}

// This setting determines how the cache gets username and group names for clients.
func (o CacheUsernameDownloadSettingsInvokeResponsePtrOutput) UsernameSource() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CacheUsernameDownloadSettingsInvokeResponse) *string {
		if v == nil {
			return nil
		}
		return v.UsernameSource
	}).(pulumi.StringPtrOutput)
}

// When present, these are the credentials for the secure LDAP connection.
type CacheUsernameDownloadSettingsInvokeResponseCredentials struct {
	// The Bind Distinguished Name identity to be used in the secure LDAP connection. This value is stored encrypted and not returned on response.
	BindDn *string `pulumi:"bindDn"`
	// The Bind password to be used in the secure LDAP connection. This value is stored encrypted and not returned on response.
	BindPassword *string `pulumi:"bindPassword"`
}

// CacheUsernameDownloadSettingsInvokeResponseCredentialsInput is an input type that accepts CacheUsernameDownloadSettingsInvokeResponseCredentialsArgs and CacheUsernameDownloadSettingsInvokeResponseCredentialsOutput values.
// You can construct a concrete instance of `CacheUsernameDownloadSettingsInvokeResponseCredentialsInput` via:
//
//          CacheUsernameDownloadSettingsInvokeResponseCredentialsArgs{...}
type CacheUsernameDownloadSettingsInvokeResponseCredentialsInput interface {
	pulumi.Input

	ToCacheUsernameDownloadSettingsInvokeResponseCredentialsOutput() CacheUsernameDownloadSettingsInvokeResponseCredentialsOutput
	ToCacheUsernameDownloadSettingsInvokeResponseCredentialsOutputWithContext(context.Context) CacheUsernameDownloadSettingsInvokeResponseCredentialsOutput
}

// When present, these are the credentials for the secure LDAP connection.
type CacheUsernameDownloadSettingsInvokeResponseCredentialsArgs struct {
	// The Bind Distinguished Name identity to be used in the secure LDAP connection. This value is stored encrypted and not returned on response.
	BindDn pulumi.StringPtrInput `pulumi:"bindDn"`
	// The Bind password to be used in the secure LDAP connection. This value is stored encrypted and not returned on response.
	BindPassword pulumi.StringPtrInput `pulumi:"bindPassword"`
}

func (CacheUsernameDownloadSettingsInvokeResponseCredentialsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CacheUsernameDownloadSettingsInvokeResponseCredentials)(nil)).Elem()
}

func (i CacheUsernameDownloadSettingsInvokeResponseCredentialsArgs) ToCacheUsernameDownloadSettingsInvokeResponseCredentialsOutput() CacheUsernameDownloadSettingsInvokeResponseCredentialsOutput {
	return i.ToCacheUsernameDownloadSettingsInvokeResponseCredentialsOutputWithContext(context.Background())
}

func (i CacheUsernameDownloadSettingsInvokeResponseCredentialsArgs) ToCacheUsernameDownloadSettingsInvokeResponseCredentialsOutputWithContext(ctx context.Context) CacheUsernameDownloadSettingsInvokeResponseCredentialsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CacheUsernameDownloadSettingsInvokeResponseCredentialsOutput)
}

func (i CacheUsernameDownloadSettingsInvokeResponseCredentialsArgs) ToCacheUsernameDownloadSettingsInvokeResponseCredentialsPtrOutput() CacheUsernameDownloadSettingsInvokeResponseCredentialsPtrOutput {
	return i.ToCacheUsernameDownloadSettingsInvokeResponseCredentialsPtrOutputWithContext(context.Background())
}

func (i CacheUsernameDownloadSettingsInvokeResponseCredentialsArgs) ToCacheUsernameDownloadSettingsInvokeResponseCredentialsPtrOutputWithContext(ctx context.Context) CacheUsernameDownloadSettingsInvokeResponseCredentialsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CacheUsernameDownloadSettingsInvokeResponseCredentialsOutput).ToCacheUsernameDownloadSettingsInvokeResponseCredentialsPtrOutputWithContext(ctx)
}

// CacheUsernameDownloadSettingsInvokeResponseCredentialsPtrInput is an input type that accepts CacheUsernameDownloadSettingsInvokeResponseCredentialsArgs, CacheUsernameDownloadSettingsInvokeResponseCredentialsPtr and CacheUsernameDownloadSettingsInvokeResponseCredentialsPtrOutput values.
// You can construct a concrete instance of `CacheUsernameDownloadSettingsInvokeResponseCredentialsPtrInput` via:
//
//          CacheUsernameDownloadSettingsInvokeResponseCredentialsArgs{...}
//
//  or:
//
//          nil
type CacheUsernameDownloadSettingsInvokeResponseCredentialsPtrInput interface {
	pulumi.Input

	ToCacheUsernameDownloadSettingsInvokeResponseCredentialsPtrOutput() CacheUsernameDownloadSettingsInvokeResponseCredentialsPtrOutput
	ToCacheUsernameDownloadSettingsInvokeResponseCredentialsPtrOutputWithContext(context.Context) CacheUsernameDownloadSettingsInvokeResponseCredentialsPtrOutput
}

type cacheUsernameDownloadSettingsInvokeResponseCredentialsPtrType CacheUsernameDownloadSettingsInvokeResponseCredentialsArgs

func CacheUsernameDownloadSettingsInvokeResponseCredentialsPtr(v *CacheUsernameDownloadSettingsInvokeResponseCredentialsArgs) CacheUsernameDownloadSettingsInvokeResponseCredentialsPtrInput {
	return (*cacheUsernameDownloadSettingsInvokeResponseCredentialsPtrType)(v)
}

func (*cacheUsernameDownloadSettingsInvokeResponseCredentialsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CacheUsernameDownloadSettingsInvokeResponseCredentials)(nil)).Elem()
}

func (i *cacheUsernameDownloadSettingsInvokeResponseCredentialsPtrType) ToCacheUsernameDownloadSettingsInvokeResponseCredentialsPtrOutput() CacheUsernameDownloadSettingsInvokeResponseCredentialsPtrOutput {
	return i.ToCacheUsernameDownloadSettingsInvokeResponseCredentialsPtrOutputWithContext(context.Background())
}

func (i *cacheUsernameDownloadSettingsInvokeResponseCredentialsPtrType) ToCacheUsernameDownloadSettingsInvokeResponseCredentialsPtrOutputWithContext(ctx context.Context) CacheUsernameDownloadSettingsInvokeResponseCredentialsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CacheUsernameDownloadSettingsInvokeResponseCredentialsPtrOutput)
}

// When present, these are the credentials for the secure LDAP connection.
type CacheUsernameDownloadSettingsInvokeResponseCredentialsOutput struct{ *pulumi.OutputState }

func (CacheUsernameDownloadSettingsInvokeResponseCredentialsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CacheUsernameDownloadSettingsInvokeResponseCredentials)(nil)).Elem()
}

func (o CacheUsernameDownloadSettingsInvokeResponseCredentialsOutput) ToCacheUsernameDownloadSettingsInvokeResponseCredentialsOutput() CacheUsernameDownloadSettingsInvokeResponseCredentialsOutput {
	return o
}

func (o CacheUsernameDownloadSettingsInvokeResponseCredentialsOutput) ToCacheUsernameDownloadSettingsInvokeResponseCredentialsOutputWithContext(ctx context.Context) CacheUsernameDownloadSettingsInvokeResponseCredentialsOutput {
	return o
}

func (o CacheUsernameDownloadSettingsInvokeResponseCredentialsOutput) ToCacheUsernameDownloadSettingsInvokeResponseCredentialsPtrOutput() CacheUsernameDownloadSettingsInvokeResponseCredentialsPtrOutput {
	return o.ToCacheUsernameDownloadSettingsInvokeResponseCredentialsPtrOutputWithContext(context.Background())
}

func (o CacheUsernameDownloadSettingsInvokeResponseCredentialsOutput) ToCacheUsernameDownloadSettingsInvokeResponseCredentialsPtrOutputWithContext(ctx context.Context) CacheUsernameDownloadSettingsInvokeResponseCredentialsPtrOutput {
	return o.ApplyT(func(v CacheUsernameDownloadSettingsInvokeResponseCredentials) *CacheUsernameDownloadSettingsInvokeResponseCredentials {
		return &v
	}).(CacheUsernameDownloadSettingsInvokeResponseCredentialsPtrOutput)
}

// The Bind Distinguished Name identity to be used in the secure LDAP connection. This value is stored encrypted and not returned on response.
func (o CacheUsernameDownloadSettingsInvokeResponseCredentialsOutput) BindDn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CacheUsernameDownloadSettingsInvokeResponseCredentials) *string { return v.BindDn }).(pulumi.StringPtrOutput)
}

// The Bind password to be used in the secure LDAP connection. This value is stored encrypted and not returned on response.
func (o CacheUsernameDownloadSettingsInvokeResponseCredentialsOutput) BindPassword() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CacheUsernameDownloadSettingsInvokeResponseCredentials) *string { return v.BindPassword }).(pulumi.StringPtrOutput)
}

type CacheUsernameDownloadSettingsInvokeResponseCredentialsPtrOutput struct{ *pulumi.OutputState }

func (CacheUsernameDownloadSettingsInvokeResponseCredentialsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CacheUsernameDownloadSettingsInvokeResponseCredentials)(nil)).Elem()
}

func (o CacheUsernameDownloadSettingsInvokeResponseCredentialsPtrOutput) ToCacheUsernameDownloadSettingsInvokeResponseCredentialsPtrOutput() CacheUsernameDownloadSettingsInvokeResponseCredentialsPtrOutput {
	return o
}

func (o CacheUsernameDownloadSettingsInvokeResponseCredentialsPtrOutput) ToCacheUsernameDownloadSettingsInvokeResponseCredentialsPtrOutputWithContext(ctx context.Context) CacheUsernameDownloadSettingsInvokeResponseCredentialsPtrOutput {
	return o
}

func (o CacheUsernameDownloadSettingsInvokeResponseCredentialsPtrOutput) Elem() CacheUsernameDownloadSettingsInvokeResponseCredentialsOutput {
	return o.ApplyT(func(v *CacheUsernameDownloadSettingsInvokeResponseCredentials) CacheUsernameDownloadSettingsInvokeResponseCredentials {
		return *v
	}).(CacheUsernameDownloadSettingsInvokeResponseCredentialsOutput)
}

// The Bind Distinguished Name identity to be used in the secure LDAP connection. This value is stored encrypted and not returned on response.
func (o CacheUsernameDownloadSettingsInvokeResponseCredentialsPtrOutput) BindDn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CacheUsernameDownloadSettingsInvokeResponseCredentials) *string {
		if v == nil {
			return nil
		}
		return v.BindDn
	}).(pulumi.StringPtrOutput)
}

// The Bind password to be used in the secure LDAP connection. This value is stored encrypted and not returned on response.
func (o CacheUsernameDownloadSettingsInvokeResponseCredentialsPtrOutput) BindPassword() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CacheUsernameDownloadSettingsInvokeResponseCredentials) *string {
		if v == nil {
			return nil
		}
		return v.BindPassword
	}).(pulumi.StringPtrOutput)
}

// Settings for Extended Groups username and group download.
type CacheUsernameDownloadSettingsResponse struct {
	// Determines if the certificate should be automatically downloaded. This applies to 'caCertificateURI' only if 'requireValidCertificate' is true.
	AutoDownloadCertificate *bool `pulumi:"autoDownloadCertificate"`
	// The URI of the CA certificate to validate the LDAP secure connection. This field must be populated when 'requireValidCertificate' is set to true.
	CaCertificateURI *string `pulumi:"caCertificateURI"`
	// When present, these are the credentials for the secure LDAP connection.
	Credentials *CacheUsernameDownloadSettingsResponseCredentials `pulumi:"credentials"`
	// Whether or not the LDAP connection should be encrypted.
	EncryptLdapConnection *bool `pulumi:"encryptLdapConnection"`
	// Whether or not Extended Groups is enabled.
	ExtendedGroupsEnabled *bool `pulumi:"extendedGroupsEnabled"`
	// The URI of the file containing group information (in /etc/group file format). This field must be populated when 'usernameSource' is set to 'File'.
	GroupFileURI *string `pulumi:"groupFileURI"`
	// The base distinguished name for the LDAP domain.
	LdapBaseDn *string `pulumi:"ldapBaseDn"`
	// The fully qualified domain name or IP address of the LDAP server to use.
	LdapServer *string `pulumi:"ldapServer"`
	// Determines if the certificates must be validated by a certificate authority. When true, caCertificateURI must be provided.
	RequireValidCertificate *bool `pulumi:"requireValidCertificate"`
	// The URI of the file containing user information (in /etc/passwd file format). This field must be populated when 'usernameSource' is set to 'File'.
	UserFileURI *string `pulumi:"userFileURI"`
	// Indicates whether or not the HPC Cache has performed the username download successfully.
	UsernameDownloaded string `pulumi:"usernameDownloaded"`
	// This setting determines how the cache gets username and group names for clients.
	UsernameSource *string `pulumi:"usernameSource"`
}

// CacheUsernameDownloadSettingsResponseInput is an input type that accepts CacheUsernameDownloadSettingsResponseArgs and CacheUsernameDownloadSettingsResponseOutput values.
// You can construct a concrete instance of `CacheUsernameDownloadSettingsResponseInput` via:
//
//          CacheUsernameDownloadSettingsResponseArgs{...}
type CacheUsernameDownloadSettingsResponseInput interface {
	pulumi.Input

	ToCacheUsernameDownloadSettingsResponseOutput() CacheUsernameDownloadSettingsResponseOutput
	ToCacheUsernameDownloadSettingsResponseOutputWithContext(context.Context) CacheUsernameDownloadSettingsResponseOutput
}

// Settings for Extended Groups username and group download.
type CacheUsernameDownloadSettingsResponseArgs struct {
	// Determines if the certificate should be automatically downloaded. This applies to 'caCertificateURI' only if 'requireValidCertificate' is true.
	AutoDownloadCertificate pulumi.BoolPtrInput `pulumi:"autoDownloadCertificate"`
	// The URI of the CA certificate to validate the LDAP secure connection. This field must be populated when 'requireValidCertificate' is set to true.
	CaCertificateURI pulumi.StringPtrInput `pulumi:"caCertificateURI"`
	// When present, these are the credentials for the secure LDAP connection.
	Credentials CacheUsernameDownloadSettingsResponseCredentialsPtrInput `pulumi:"credentials"`
	// Whether or not the LDAP connection should be encrypted.
	EncryptLdapConnection pulumi.BoolPtrInput `pulumi:"encryptLdapConnection"`
	// Whether or not Extended Groups is enabled.
	ExtendedGroupsEnabled pulumi.BoolPtrInput `pulumi:"extendedGroupsEnabled"`
	// The URI of the file containing group information (in /etc/group file format). This field must be populated when 'usernameSource' is set to 'File'.
	GroupFileURI pulumi.StringPtrInput `pulumi:"groupFileURI"`
	// The base distinguished name for the LDAP domain.
	LdapBaseDn pulumi.StringPtrInput `pulumi:"ldapBaseDn"`
	// The fully qualified domain name or IP address of the LDAP server to use.
	LdapServer pulumi.StringPtrInput `pulumi:"ldapServer"`
	// Determines if the certificates must be validated by a certificate authority. When true, caCertificateURI must be provided.
	RequireValidCertificate pulumi.BoolPtrInput `pulumi:"requireValidCertificate"`
	// The URI of the file containing user information (in /etc/passwd file format). This field must be populated when 'usernameSource' is set to 'File'.
	UserFileURI pulumi.StringPtrInput `pulumi:"userFileURI"`
	// Indicates whether or not the HPC Cache has performed the username download successfully.
	UsernameDownloaded pulumi.StringInput `pulumi:"usernameDownloaded"`
	// This setting determines how the cache gets username and group names for clients.
	UsernameSource pulumi.StringPtrInput `pulumi:"usernameSource"`
}

func (CacheUsernameDownloadSettingsResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CacheUsernameDownloadSettingsResponse)(nil)).Elem()
}

func (i CacheUsernameDownloadSettingsResponseArgs) ToCacheUsernameDownloadSettingsResponseOutput() CacheUsernameDownloadSettingsResponseOutput {
	return i.ToCacheUsernameDownloadSettingsResponseOutputWithContext(context.Background())
}

func (i CacheUsernameDownloadSettingsResponseArgs) ToCacheUsernameDownloadSettingsResponseOutputWithContext(ctx context.Context) CacheUsernameDownloadSettingsResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CacheUsernameDownloadSettingsResponseOutput)
}

func (i CacheUsernameDownloadSettingsResponseArgs) ToCacheUsernameDownloadSettingsResponsePtrOutput() CacheUsernameDownloadSettingsResponsePtrOutput {
	return i.ToCacheUsernameDownloadSettingsResponsePtrOutputWithContext(context.Background())
}

func (i CacheUsernameDownloadSettingsResponseArgs) ToCacheUsernameDownloadSettingsResponsePtrOutputWithContext(ctx context.Context) CacheUsernameDownloadSettingsResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CacheUsernameDownloadSettingsResponseOutput).ToCacheUsernameDownloadSettingsResponsePtrOutputWithContext(ctx)
}

// CacheUsernameDownloadSettingsResponsePtrInput is an input type that accepts CacheUsernameDownloadSettingsResponseArgs, CacheUsernameDownloadSettingsResponsePtr and CacheUsernameDownloadSettingsResponsePtrOutput values.
// You can construct a concrete instance of `CacheUsernameDownloadSettingsResponsePtrInput` via:
//
//          CacheUsernameDownloadSettingsResponseArgs{...}
//
//  or:
//
//          nil
type CacheUsernameDownloadSettingsResponsePtrInput interface {
	pulumi.Input

	ToCacheUsernameDownloadSettingsResponsePtrOutput() CacheUsernameDownloadSettingsResponsePtrOutput
	ToCacheUsernameDownloadSettingsResponsePtrOutputWithContext(context.Context) CacheUsernameDownloadSettingsResponsePtrOutput
}

type cacheUsernameDownloadSettingsResponsePtrType CacheUsernameDownloadSettingsResponseArgs

func CacheUsernameDownloadSettingsResponsePtr(v *CacheUsernameDownloadSettingsResponseArgs) CacheUsernameDownloadSettingsResponsePtrInput {
	return (*cacheUsernameDownloadSettingsResponsePtrType)(v)
}

func (*cacheUsernameDownloadSettingsResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CacheUsernameDownloadSettingsResponse)(nil)).Elem()
}

func (i *cacheUsernameDownloadSettingsResponsePtrType) ToCacheUsernameDownloadSettingsResponsePtrOutput() CacheUsernameDownloadSettingsResponsePtrOutput {
	return i.ToCacheUsernameDownloadSettingsResponsePtrOutputWithContext(context.Background())
}

func (i *cacheUsernameDownloadSettingsResponsePtrType) ToCacheUsernameDownloadSettingsResponsePtrOutputWithContext(ctx context.Context) CacheUsernameDownloadSettingsResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CacheUsernameDownloadSettingsResponsePtrOutput)
}

// Settings for Extended Groups username and group download.
type CacheUsernameDownloadSettingsResponseOutput struct{ *pulumi.OutputState }

func (CacheUsernameDownloadSettingsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CacheUsernameDownloadSettingsResponse)(nil)).Elem()
}

func (o CacheUsernameDownloadSettingsResponseOutput) ToCacheUsernameDownloadSettingsResponseOutput() CacheUsernameDownloadSettingsResponseOutput {
	return o
}

func (o CacheUsernameDownloadSettingsResponseOutput) ToCacheUsernameDownloadSettingsResponseOutputWithContext(ctx context.Context) CacheUsernameDownloadSettingsResponseOutput {
	return o
}

func (o CacheUsernameDownloadSettingsResponseOutput) ToCacheUsernameDownloadSettingsResponsePtrOutput() CacheUsernameDownloadSettingsResponsePtrOutput {
	return o.ToCacheUsernameDownloadSettingsResponsePtrOutputWithContext(context.Background())
}

func (o CacheUsernameDownloadSettingsResponseOutput) ToCacheUsernameDownloadSettingsResponsePtrOutputWithContext(ctx context.Context) CacheUsernameDownloadSettingsResponsePtrOutput {
	return o.ApplyT(func(v CacheUsernameDownloadSettingsResponse) *CacheUsernameDownloadSettingsResponse {
		return &v
	}).(CacheUsernameDownloadSettingsResponsePtrOutput)
}

// Determines if the certificate should be automatically downloaded. This applies to 'caCertificateURI' only if 'requireValidCertificate' is true.
func (o CacheUsernameDownloadSettingsResponseOutput) AutoDownloadCertificate() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v CacheUsernameDownloadSettingsResponse) *bool { return v.AutoDownloadCertificate }).(pulumi.BoolPtrOutput)
}

// The URI of the CA certificate to validate the LDAP secure connection. This field must be populated when 'requireValidCertificate' is set to true.
func (o CacheUsernameDownloadSettingsResponseOutput) CaCertificateURI() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CacheUsernameDownloadSettingsResponse) *string { return v.CaCertificateURI }).(pulumi.StringPtrOutput)
}

// When present, these are the credentials for the secure LDAP connection.
func (o CacheUsernameDownloadSettingsResponseOutput) Credentials() CacheUsernameDownloadSettingsResponseCredentialsPtrOutput {
	return o.ApplyT(func(v CacheUsernameDownloadSettingsResponse) *CacheUsernameDownloadSettingsResponseCredentials {
		return v.Credentials
	}).(CacheUsernameDownloadSettingsResponseCredentialsPtrOutput)
}

// Whether or not the LDAP connection should be encrypted.
func (o CacheUsernameDownloadSettingsResponseOutput) EncryptLdapConnection() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v CacheUsernameDownloadSettingsResponse) *bool { return v.EncryptLdapConnection }).(pulumi.BoolPtrOutput)
}

// Whether or not Extended Groups is enabled.
func (o CacheUsernameDownloadSettingsResponseOutput) ExtendedGroupsEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v CacheUsernameDownloadSettingsResponse) *bool { return v.ExtendedGroupsEnabled }).(pulumi.BoolPtrOutput)
}

// The URI of the file containing group information (in /etc/group file format). This field must be populated when 'usernameSource' is set to 'File'.
func (o CacheUsernameDownloadSettingsResponseOutput) GroupFileURI() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CacheUsernameDownloadSettingsResponse) *string { return v.GroupFileURI }).(pulumi.StringPtrOutput)
}

// The base distinguished name for the LDAP domain.
func (o CacheUsernameDownloadSettingsResponseOutput) LdapBaseDn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CacheUsernameDownloadSettingsResponse) *string { return v.LdapBaseDn }).(pulumi.StringPtrOutput)
}

// The fully qualified domain name or IP address of the LDAP server to use.
func (o CacheUsernameDownloadSettingsResponseOutput) LdapServer() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CacheUsernameDownloadSettingsResponse) *string { return v.LdapServer }).(pulumi.StringPtrOutput)
}

// Determines if the certificates must be validated by a certificate authority. When true, caCertificateURI must be provided.
func (o CacheUsernameDownloadSettingsResponseOutput) RequireValidCertificate() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v CacheUsernameDownloadSettingsResponse) *bool { return v.RequireValidCertificate }).(pulumi.BoolPtrOutput)
}

// The URI of the file containing user information (in /etc/passwd file format). This field must be populated when 'usernameSource' is set to 'File'.
func (o CacheUsernameDownloadSettingsResponseOutput) UserFileURI() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CacheUsernameDownloadSettingsResponse) *string { return v.UserFileURI }).(pulumi.StringPtrOutput)
}

// Indicates whether or not the HPC Cache has performed the username download successfully.
func (o CacheUsernameDownloadSettingsResponseOutput) UsernameDownloaded() pulumi.StringOutput {
	return o.ApplyT(func(v CacheUsernameDownloadSettingsResponse) string { return v.UsernameDownloaded }).(pulumi.StringOutput)
}

// This setting determines how the cache gets username and group names for clients.
func (o CacheUsernameDownloadSettingsResponseOutput) UsernameSource() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CacheUsernameDownloadSettingsResponse) *string { return v.UsernameSource }).(pulumi.StringPtrOutput)
}

type CacheUsernameDownloadSettingsResponsePtrOutput struct{ *pulumi.OutputState }

func (CacheUsernameDownloadSettingsResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CacheUsernameDownloadSettingsResponse)(nil)).Elem()
}

func (o CacheUsernameDownloadSettingsResponsePtrOutput) ToCacheUsernameDownloadSettingsResponsePtrOutput() CacheUsernameDownloadSettingsResponsePtrOutput {
	return o
}

func (o CacheUsernameDownloadSettingsResponsePtrOutput) ToCacheUsernameDownloadSettingsResponsePtrOutputWithContext(ctx context.Context) CacheUsernameDownloadSettingsResponsePtrOutput {
	return o
}

func (o CacheUsernameDownloadSettingsResponsePtrOutput) Elem() CacheUsernameDownloadSettingsResponseOutput {
	return o.ApplyT(func(v *CacheUsernameDownloadSettingsResponse) CacheUsernameDownloadSettingsResponse { return *v }).(CacheUsernameDownloadSettingsResponseOutput)
}

// Determines if the certificate should be automatically downloaded. This applies to 'caCertificateURI' only if 'requireValidCertificate' is true.
func (o CacheUsernameDownloadSettingsResponsePtrOutput) AutoDownloadCertificate() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *CacheUsernameDownloadSettingsResponse) *bool {
		if v == nil {
			return nil
		}
		return v.AutoDownloadCertificate
	}).(pulumi.BoolPtrOutput)
}

// The URI of the CA certificate to validate the LDAP secure connection. This field must be populated when 'requireValidCertificate' is set to true.
func (o CacheUsernameDownloadSettingsResponsePtrOutput) CaCertificateURI() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CacheUsernameDownloadSettingsResponse) *string {
		if v == nil {
			return nil
		}
		return v.CaCertificateURI
	}).(pulumi.StringPtrOutput)
}

// When present, these are the credentials for the secure LDAP connection.
func (o CacheUsernameDownloadSettingsResponsePtrOutput) Credentials() CacheUsernameDownloadSettingsResponseCredentialsPtrOutput {
	return o.ApplyT(func(v *CacheUsernameDownloadSettingsResponse) *CacheUsernameDownloadSettingsResponseCredentials {
		if v == nil {
			return nil
		}
		return v.Credentials
	}).(CacheUsernameDownloadSettingsResponseCredentialsPtrOutput)
}

// Whether or not the LDAP connection should be encrypted.
func (o CacheUsernameDownloadSettingsResponsePtrOutput) EncryptLdapConnection() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *CacheUsernameDownloadSettingsResponse) *bool {
		if v == nil {
			return nil
		}
		return v.EncryptLdapConnection
	}).(pulumi.BoolPtrOutput)
}

// Whether or not Extended Groups is enabled.
func (o CacheUsernameDownloadSettingsResponsePtrOutput) ExtendedGroupsEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *CacheUsernameDownloadSettingsResponse) *bool {
		if v == nil {
			return nil
		}
		return v.ExtendedGroupsEnabled
	}).(pulumi.BoolPtrOutput)
}

// The URI of the file containing group information (in /etc/group file format). This field must be populated when 'usernameSource' is set to 'File'.
func (o CacheUsernameDownloadSettingsResponsePtrOutput) GroupFileURI() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CacheUsernameDownloadSettingsResponse) *string {
		if v == nil {
			return nil
		}
		return v.GroupFileURI
	}).(pulumi.StringPtrOutput)
}

// The base distinguished name for the LDAP domain.
func (o CacheUsernameDownloadSettingsResponsePtrOutput) LdapBaseDn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CacheUsernameDownloadSettingsResponse) *string {
		if v == nil {
			return nil
		}
		return v.LdapBaseDn
	}).(pulumi.StringPtrOutput)
}

// The fully qualified domain name or IP address of the LDAP server to use.
func (o CacheUsernameDownloadSettingsResponsePtrOutput) LdapServer() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CacheUsernameDownloadSettingsResponse) *string {
		if v == nil {
			return nil
		}
		return v.LdapServer
	}).(pulumi.StringPtrOutput)
}

// Determines if the certificates must be validated by a certificate authority. When true, caCertificateURI must be provided.
func (o CacheUsernameDownloadSettingsResponsePtrOutput) RequireValidCertificate() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *CacheUsernameDownloadSettingsResponse) *bool {
		if v == nil {
			return nil
		}
		return v.RequireValidCertificate
	}).(pulumi.BoolPtrOutput)
}

// The URI of the file containing user information (in /etc/passwd file format). This field must be populated when 'usernameSource' is set to 'File'.
func (o CacheUsernameDownloadSettingsResponsePtrOutput) UserFileURI() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CacheUsernameDownloadSettingsResponse) *string {
		if v == nil {
			return nil
		}
		return v.UserFileURI
	}).(pulumi.StringPtrOutput)
}

// Indicates whether or not the HPC Cache has performed the username download successfully.
func (o CacheUsernameDownloadSettingsResponsePtrOutput) UsernameDownloaded() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CacheUsernameDownloadSettingsResponse) *string {
		if v == nil {
			return nil
		}
		return &v.UsernameDownloaded
	}).(pulumi.StringPtrOutput)
}

// This setting determines how the cache gets username and group names for clients.
func (o CacheUsernameDownloadSettingsResponsePtrOutput) UsernameSource() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CacheUsernameDownloadSettingsResponse) *string {
		if v == nil {
			return nil
		}
		return v.UsernameSource
	}).(pulumi.StringPtrOutput)
}

// When present, these are the credentials for the secure LDAP connection.
type CacheUsernameDownloadSettingsResponseCredentials struct {
	// The Bind Distinguished Name identity to be used in the secure LDAP connection. This value is stored encrypted and not returned on response.
	BindDn *string `pulumi:"bindDn"`
	// The Bind password to be used in the secure LDAP connection. This value is stored encrypted and not returned on response.
	BindPassword *string `pulumi:"bindPassword"`
}

// CacheUsernameDownloadSettingsResponseCredentialsInput is an input type that accepts CacheUsernameDownloadSettingsResponseCredentialsArgs and CacheUsernameDownloadSettingsResponseCredentialsOutput values.
// You can construct a concrete instance of `CacheUsernameDownloadSettingsResponseCredentialsInput` via:
//
//          CacheUsernameDownloadSettingsResponseCredentialsArgs{...}
type CacheUsernameDownloadSettingsResponseCredentialsInput interface {
	pulumi.Input

	ToCacheUsernameDownloadSettingsResponseCredentialsOutput() CacheUsernameDownloadSettingsResponseCredentialsOutput
	ToCacheUsernameDownloadSettingsResponseCredentialsOutputWithContext(context.Context) CacheUsernameDownloadSettingsResponseCredentialsOutput
}

// When present, these are the credentials for the secure LDAP connection.
type CacheUsernameDownloadSettingsResponseCredentialsArgs struct {
	// The Bind Distinguished Name identity to be used in the secure LDAP connection. This value is stored encrypted and not returned on response.
	BindDn pulumi.StringPtrInput `pulumi:"bindDn"`
	// The Bind password to be used in the secure LDAP connection. This value is stored encrypted and not returned on response.
	BindPassword pulumi.StringPtrInput `pulumi:"bindPassword"`
}

func (CacheUsernameDownloadSettingsResponseCredentialsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CacheUsernameDownloadSettingsResponseCredentials)(nil)).Elem()
}

func (i CacheUsernameDownloadSettingsResponseCredentialsArgs) ToCacheUsernameDownloadSettingsResponseCredentialsOutput() CacheUsernameDownloadSettingsResponseCredentialsOutput {
	return i.ToCacheUsernameDownloadSettingsResponseCredentialsOutputWithContext(context.Background())
}

func (i CacheUsernameDownloadSettingsResponseCredentialsArgs) ToCacheUsernameDownloadSettingsResponseCredentialsOutputWithContext(ctx context.Context) CacheUsernameDownloadSettingsResponseCredentialsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CacheUsernameDownloadSettingsResponseCredentialsOutput)
}

func (i CacheUsernameDownloadSettingsResponseCredentialsArgs) ToCacheUsernameDownloadSettingsResponseCredentialsPtrOutput() CacheUsernameDownloadSettingsResponseCredentialsPtrOutput {
	return i.ToCacheUsernameDownloadSettingsResponseCredentialsPtrOutputWithContext(context.Background())
}

func (i CacheUsernameDownloadSettingsResponseCredentialsArgs) ToCacheUsernameDownloadSettingsResponseCredentialsPtrOutputWithContext(ctx context.Context) CacheUsernameDownloadSettingsResponseCredentialsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CacheUsernameDownloadSettingsResponseCredentialsOutput).ToCacheUsernameDownloadSettingsResponseCredentialsPtrOutputWithContext(ctx)
}

// CacheUsernameDownloadSettingsResponseCredentialsPtrInput is an input type that accepts CacheUsernameDownloadSettingsResponseCredentialsArgs, CacheUsernameDownloadSettingsResponseCredentialsPtr and CacheUsernameDownloadSettingsResponseCredentialsPtrOutput values.
// You can construct a concrete instance of `CacheUsernameDownloadSettingsResponseCredentialsPtrInput` via:
//
//          CacheUsernameDownloadSettingsResponseCredentialsArgs{...}
//
//  or:
//
//          nil
type CacheUsernameDownloadSettingsResponseCredentialsPtrInput interface {
	pulumi.Input

	ToCacheUsernameDownloadSettingsResponseCredentialsPtrOutput() CacheUsernameDownloadSettingsResponseCredentialsPtrOutput
	ToCacheUsernameDownloadSettingsResponseCredentialsPtrOutputWithContext(context.Context) CacheUsernameDownloadSettingsResponseCredentialsPtrOutput
}

type cacheUsernameDownloadSettingsResponseCredentialsPtrType CacheUsernameDownloadSettingsResponseCredentialsArgs

func CacheUsernameDownloadSettingsResponseCredentialsPtr(v *CacheUsernameDownloadSettingsResponseCredentialsArgs) CacheUsernameDownloadSettingsResponseCredentialsPtrInput {
	return (*cacheUsernameDownloadSettingsResponseCredentialsPtrType)(v)
}

func (*cacheUsernameDownloadSettingsResponseCredentialsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CacheUsernameDownloadSettingsResponseCredentials)(nil)).Elem()
}

func (i *cacheUsernameDownloadSettingsResponseCredentialsPtrType) ToCacheUsernameDownloadSettingsResponseCredentialsPtrOutput() CacheUsernameDownloadSettingsResponseCredentialsPtrOutput {
	return i.ToCacheUsernameDownloadSettingsResponseCredentialsPtrOutputWithContext(context.Background())
}

func (i *cacheUsernameDownloadSettingsResponseCredentialsPtrType) ToCacheUsernameDownloadSettingsResponseCredentialsPtrOutputWithContext(ctx context.Context) CacheUsernameDownloadSettingsResponseCredentialsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CacheUsernameDownloadSettingsResponseCredentialsPtrOutput)
}

// When present, these are the credentials for the secure LDAP connection.
type CacheUsernameDownloadSettingsResponseCredentialsOutput struct{ *pulumi.OutputState }

func (CacheUsernameDownloadSettingsResponseCredentialsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CacheUsernameDownloadSettingsResponseCredentials)(nil)).Elem()
}

func (o CacheUsernameDownloadSettingsResponseCredentialsOutput) ToCacheUsernameDownloadSettingsResponseCredentialsOutput() CacheUsernameDownloadSettingsResponseCredentialsOutput {
	return o
}

func (o CacheUsernameDownloadSettingsResponseCredentialsOutput) ToCacheUsernameDownloadSettingsResponseCredentialsOutputWithContext(ctx context.Context) CacheUsernameDownloadSettingsResponseCredentialsOutput {
	return o
}

func (o CacheUsernameDownloadSettingsResponseCredentialsOutput) ToCacheUsernameDownloadSettingsResponseCredentialsPtrOutput() CacheUsernameDownloadSettingsResponseCredentialsPtrOutput {
	return o.ToCacheUsernameDownloadSettingsResponseCredentialsPtrOutputWithContext(context.Background())
}

func (o CacheUsernameDownloadSettingsResponseCredentialsOutput) ToCacheUsernameDownloadSettingsResponseCredentialsPtrOutputWithContext(ctx context.Context) CacheUsernameDownloadSettingsResponseCredentialsPtrOutput {
	return o.ApplyT(func(v CacheUsernameDownloadSettingsResponseCredentials) *CacheUsernameDownloadSettingsResponseCredentials {
		return &v
	}).(CacheUsernameDownloadSettingsResponseCredentialsPtrOutput)
}

// The Bind Distinguished Name identity to be used in the secure LDAP connection. This value is stored encrypted and not returned on response.
func (o CacheUsernameDownloadSettingsResponseCredentialsOutput) BindDn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CacheUsernameDownloadSettingsResponseCredentials) *string { return v.BindDn }).(pulumi.StringPtrOutput)
}

// The Bind password to be used in the secure LDAP connection. This value is stored encrypted and not returned on response.
func (o CacheUsernameDownloadSettingsResponseCredentialsOutput) BindPassword() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CacheUsernameDownloadSettingsResponseCredentials) *string { return v.BindPassword }).(pulumi.StringPtrOutput)
}

type CacheUsernameDownloadSettingsResponseCredentialsPtrOutput struct{ *pulumi.OutputState }

func (CacheUsernameDownloadSettingsResponseCredentialsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CacheUsernameDownloadSettingsResponseCredentials)(nil)).Elem()
}

func (o CacheUsernameDownloadSettingsResponseCredentialsPtrOutput) ToCacheUsernameDownloadSettingsResponseCredentialsPtrOutput() CacheUsernameDownloadSettingsResponseCredentialsPtrOutput {
	return o
}

func (o CacheUsernameDownloadSettingsResponseCredentialsPtrOutput) ToCacheUsernameDownloadSettingsResponseCredentialsPtrOutputWithContext(ctx context.Context) CacheUsernameDownloadSettingsResponseCredentialsPtrOutput {
	return o
}

func (o CacheUsernameDownloadSettingsResponseCredentialsPtrOutput) Elem() CacheUsernameDownloadSettingsResponseCredentialsOutput {
	return o.ApplyT(func(v *CacheUsernameDownloadSettingsResponseCredentials) CacheUsernameDownloadSettingsResponseCredentials {
		return *v
	}).(CacheUsernameDownloadSettingsResponseCredentialsOutput)
}

// The Bind Distinguished Name identity to be used in the secure LDAP connection. This value is stored encrypted and not returned on response.
func (o CacheUsernameDownloadSettingsResponseCredentialsPtrOutput) BindDn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CacheUsernameDownloadSettingsResponseCredentials) *string {
		if v == nil {
			return nil
		}
		return v.BindDn
	}).(pulumi.StringPtrOutput)
}

// The Bind password to be used in the secure LDAP connection. This value is stored encrypted and not returned on response.
func (o CacheUsernameDownloadSettingsResponseCredentialsPtrOutput) BindPassword() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CacheUsernameDownloadSettingsResponseCredentials) *string {
		if v == nil {
			return nil
		}
		return v.BindPassword
	}).(pulumi.StringPtrOutput)
}

// Properties pertaining to the ClfsTarget
type ClfsTarget struct {
	// Resource ID of storage container.
	Target *string `pulumi:"target"`
}

// ClfsTargetInput is an input type that accepts ClfsTargetArgs and ClfsTargetOutput values.
// You can construct a concrete instance of `ClfsTargetInput` via:
//
//          ClfsTargetArgs{...}
type ClfsTargetInput interface {
	pulumi.Input

	ToClfsTargetOutput() ClfsTargetOutput
	ToClfsTargetOutputWithContext(context.Context) ClfsTargetOutput
}

// Properties pertaining to the ClfsTarget
type ClfsTargetArgs struct {
	// Resource ID of storage container.
	Target pulumi.StringPtrInput `pulumi:"target"`
}

func (ClfsTargetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClfsTarget)(nil)).Elem()
}

func (i ClfsTargetArgs) ToClfsTargetOutput() ClfsTargetOutput {
	return i.ToClfsTargetOutputWithContext(context.Background())
}

func (i ClfsTargetArgs) ToClfsTargetOutputWithContext(ctx context.Context) ClfsTargetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClfsTargetOutput)
}

func (i ClfsTargetArgs) ToClfsTargetPtrOutput() ClfsTargetPtrOutput {
	return i.ToClfsTargetPtrOutputWithContext(context.Background())
}

func (i ClfsTargetArgs) ToClfsTargetPtrOutputWithContext(ctx context.Context) ClfsTargetPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClfsTargetOutput).ToClfsTargetPtrOutputWithContext(ctx)
}

// ClfsTargetPtrInput is an input type that accepts ClfsTargetArgs, ClfsTargetPtr and ClfsTargetPtrOutput values.
// You can construct a concrete instance of `ClfsTargetPtrInput` via:
//
//          ClfsTargetArgs{...}
//
//  or:
//
//          nil
type ClfsTargetPtrInput interface {
	pulumi.Input

	ToClfsTargetPtrOutput() ClfsTargetPtrOutput
	ToClfsTargetPtrOutputWithContext(context.Context) ClfsTargetPtrOutput
}

type clfsTargetPtrType ClfsTargetArgs

func ClfsTargetPtr(v *ClfsTargetArgs) ClfsTargetPtrInput {
	return (*clfsTargetPtrType)(v)
}

func (*clfsTargetPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ClfsTarget)(nil)).Elem()
}

func (i *clfsTargetPtrType) ToClfsTargetPtrOutput() ClfsTargetPtrOutput {
	return i.ToClfsTargetPtrOutputWithContext(context.Background())
}

func (i *clfsTargetPtrType) ToClfsTargetPtrOutputWithContext(ctx context.Context) ClfsTargetPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClfsTargetPtrOutput)
}

// Properties pertaining to the ClfsTarget
type ClfsTargetOutput struct{ *pulumi.OutputState }

func (ClfsTargetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClfsTarget)(nil)).Elem()
}

func (o ClfsTargetOutput) ToClfsTargetOutput() ClfsTargetOutput {
	return o
}

func (o ClfsTargetOutput) ToClfsTargetOutputWithContext(ctx context.Context) ClfsTargetOutput {
	return o
}

func (o ClfsTargetOutput) ToClfsTargetPtrOutput() ClfsTargetPtrOutput {
	return o.ToClfsTargetPtrOutputWithContext(context.Background())
}

func (o ClfsTargetOutput) ToClfsTargetPtrOutputWithContext(ctx context.Context) ClfsTargetPtrOutput {
	return o.ApplyT(func(v ClfsTarget) *ClfsTarget {
		return &v
	}).(ClfsTargetPtrOutput)
}

// Resource ID of storage container.
func (o ClfsTargetOutput) Target() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClfsTarget) *string { return v.Target }).(pulumi.StringPtrOutput)
}

type ClfsTargetPtrOutput struct{ *pulumi.OutputState }

func (ClfsTargetPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ClfsTarget)(nil)).Elem()
}

func (o ClfsTargetPtrOutput) ToClfsTargetPtrOutput() ClfsTargetPtrOutput {
	return o
}

func (o ClfsTargetPtrOutput) ToClfsTargetPtrOutputWithContext(ctx context.Context) ClfsTargetPtrOutput {
	return o
}

func (o ClfsTargetPtrOutput) Elem() ClfsTargetOutput {
	return o.ApplyT(func(v *ClfsTarget) ClfsTarget { return *v }).(ClfsTargetOutput)
}

// Resource ID of storage container.
func (o ClfsTargetPtrOutput) Target() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClfsTarget) *string {
		if v == nil {
			return nil
		}
		return v.Target
	}).(pulumi.StringPtrOutput)
}

// Properties pertaining to the ClfsTarget
type ClfsTargetInvokeResponse struct {
	// Resource ID of storage container.
	Target *string `pulumi:"target"`
}

// ClfsTargetInvokeResponseInput is an input type that accepts ClfsTargetInvokeResponseArgs and ClfsTargetInvokeResponseOutput values.
// You can construct a concrete instance of `ClfsTargetInvokeResponseInput` via:
//
//          ClfsTargetInvokeResponseArgs{...}
type ClfsTargetInvokeResponseInput interface {
	pulumi.Input

	ToClfsTargetInvokeResponseOutput() ClfsTargetInvokeResponseOutput
	ToClfsTargetInvokeResponseOutputWithContext(context.Context) ClfsTargetInvokeResponseOutput
}

// Properties pertaining to the ClfsTarget
type ClfsTargetInvokeResponseArgs struct {
	// Resource ID of storage container.
	Target pulumi.StringPtrInput `pulumi:"target"`
}

func (ClfsTargetInvokeResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClfsTargetInvokeResponse)(nil)).Elem()
}

func (i ClfsTargetInvokeResponseArgs) ToClfsTargetInvokeResponseOutput() ClfsTargetInvokeResponseOutput {
	return i.ToClfsTargetInvokeResponseOutputWithContext(context.Background())
}

func (i ClfsTargetInvokeResponseArgs) ToClfsTargetInvokeResponseOutputWithContext(ctx context.Context) ClfsTargetInvokeResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClfsTargetInvokeResponseOutput)
}

// Properties pertaining to the ClfsTarget
type ClfsTargetInvokeResponseOutput struct{ *pulumi.OutputState }

func (ClfsTargetInvokeResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClfsTargetInvokeResponse)(nil)).Elem()
}

func (o ClfsTargetInvokeResponseOutput) ToClfsTargetInvokeResponseOutput() ClfsTargetInvokeResponseOutput {
	return o
}

func (o ClfsTargetInvokeResponseOutput) ToClfsTargetInvokeResponseOutputWithContext(ctx context.Context) ClfsTargetInvokeResponseOutput {
	return o
}

// Resource ID of storage container.
func (o ClfsTargetInvokeResponseOutput) Target() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClfsTargetInvokeResponse) *string { return v.Target }).(pulumi.StringPtrOutput)
}

// Properties pertaining to the ClfsTarget
type ClfsTargetResponse struct {
	// Resource ID of storage container.
	Target *string `pulumi:"target"`
}

// ClfsTargetResponseInput is an input type that accepts ClfsTargetResponseArgs and ClfsTargetResponseOutput values.
// You can construct a concrete instance of `ClfsTargetResponseInput` via:
//
//          ClfsTargetResponseArgs{...}
type ClfsTargetResponseInput interface {
	pulumi.Input

	ToClfsTargetResponseOutput() ClfsTargetResponseOutput
	ToClfsTargetResponseOutputWithContext(context.Context) ClfsTargetResponseOutput
}

// Properties pertaining to the ClfsTarget
type ClfsTargetResponseArgs struct {
	// Resource ID of storage container.
	Target pulumi.StringPtrInput `pulumi:"target"`
}

func (ClfsTargetResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClfsTargetResponse)(nil)).Elem()
}

func (i ClfsTargetResponseArgs) ToClfsTargetResponseOutput() ClfsTargetResponseOutput {
	return i.ToClfsTargetResponseOutputWithContext(context.Background())
}

func (i ClfsTargetResponseArgs) ToClfsTargetResponseOutputWithContext(ctx context.Context) ClfsTargetResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClfsTargetResponseOutput)
}

func (i ClfsTargetResponseArgs) ToClfsTargetResponsePtrOutput() ClfsTargetResponsePtrOutput {
	return i.ToClfsTargetResponsePtrOutputWithContext(context.Background())
}

func (i ClfsTargetResponseArgs) ToClfsTargetResponsePtrOutputWithContext(ctx context.Context) ClfsTargetResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClfsTargetResponseOutput).ToClfsTargetResponsePtrOutputWithContext(ctx)
}

// ClfsTargetResponsePtrInput is an input type that accepts ClfsTargetResponseArgs, ClfsTargetResponsePtr and ClfsTargetResponsePtrOutput values.
// You can construct a concrete instance of `ClfsTargetResponsePtrInput` via:
//
//          ClfsTargetResponseArgs{...}
//
//  or:
//
//          nil
type ClfsTargetResponsePtrInput interface {
	pulumi.Input

	ToClfsTargetResponsePtrOutput() ClfsTargetResponsePtrOutput
	ToClfsTargetResponsePtrOutputWithContext(context.Context) ClfsTargetResponsePtrOutput
}

type clfsTargetResponsePtrType ClfsTargetResponseArgs

func ClfsTargetResponsePtr(v *ClfsTargetResponseArgs) ClfsTargetResponsePtrInput {
	return (*clfsTargetResponsePtrType)(v)
}

func (*clfsTargetResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ClfsTargetResponse)(nil)).Elem()
}

func (i *clfsTargetResponsePtrType) ToClfsTargetResponsePtrOutput() ClfsTargetResponsePtrOutput {
	return i.ToClfsTargetResponsePtrOutputWithContext(context.Background())
}

func (i *clfsTargetResponsePtrType) ToClfsTargetResponsePtrOutputWithContext(ctx context.Context) ClfsTargetResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClfsTargetResponsePtrOutput)
}

// Properties pertaining to the ClfsTarget
type ClfsTargetResponseOutput struct{ *pulumi.OutputState }

func (ClfsTargetResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClfsTargetResponse)(nil)).Elem()
}

func (o ClfsTargetResponseOutput) ToClfsTargetResponseOutput() ClfsTargetResponseOutput {
	return o
}

func (o ClfsTargetResponseOutput) ToClfsTargetResponseOutputWithContext(ctx context.Context) ClfsTargetResponseOutput {
	return o
}

func (o ClfsTargetResponseOutput) ToClfsTargetResponsePtrOutput() ClfsTargetResponsePtrOutput {
	return o.ToClfsTargetResponsePtrOutputWithContext(context.Background())
}

func (o ClfsTargetResponseOutput) ToClfsTargetResponsePtrOutputWithContext(ctx context.Context) ClfsTargetResponsePtrOutput {
	return o.ApplyT(func(v ClfsTargetResponse) *ClfsTargetResponse {
		return &v
	}).(ClfsTargetResponsePtrOutput)
}

// Resource ID of storage container.
func (o ClfsTargetResponseOutput) Target() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClfsTargetResponse) *string { return v.Target }).(pulumi.StringPtrOutput)
}

type ClfsTargetResponsePtrOutput struct{ *pulumi.OutputState }

func (ClfsTargetResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ClfsTargetResponse)(nil)).Elem()
}

func (o ClfsTargetResponsePtrOutput) ToClfsTargetResponsePtrOutput() ClfsTargetResponsePtrOutput {
	return o
}

func (o ClfsTargetResponsePtrOutput) ToClfsTargetResponsePtrOutputWithContext(ctx context.Context) ClfsTargetResponsePtrOutput {
	return o
}

func (o ClfsTargetResponsePtrOutput) Elem() ClfsTargetResponseOutput {
	return o.ApplyT(func(v *ClfsTargetResponse) ClfsTargetResponse { return *v }).(ClfsTargetResponseOutput)
}

// Resource ID of storage container.
func (o ClfsTargetResponsePtrOutput) Target() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClfsTargetResponse) *string {
		if v == nil {
			return nil
		}
		return v.Target
	}).(pulumi.StringPtrOutput)
}

// Describes a reference to Key Vault Key.
type KeyVaultKeyReference struct {
	// The URL referencing a key encryption key in Key Vault.
	KeyUrl string `pulumi:"keyUrl"`
	// Describes a resource Id to source Key Vault.
	SourceVault KeyVaultKeyReferenceSourceVault `pulumi:"sourceVault"`
}

// KeyVaultKeyReferenceInput is an input type that accepts KeyVaultKeyReferenceArgs and KeyVaultKeyReferenceOutput values.
// You can construct a concrete instance of `KeyVaultKeyReferenceInput` via:
//
//          KeyVaultKeyReferenceArgs{...}
type KeyVaultKeyReferenceInput interface {
	pulumi.Input

	ToKeyVaultKeyReferenceOutput() KeyVaultKeyReferenceOutput
	ToKeyVaultKeyReferenceOutputWithContext(context.Context) KeyVaultKeyReferenceOutput
}

// Describes a reference to Key Vault Key.
type KeyVaultKeyReferenceArgs struct {
	// The URL referencing a key encryption key in Key Vault.
	KeyUrl pulumi.StringInput `pulumi:"keyUrl"`
	// Describes a resource Id to source Key Vault.
	SourceVault KeyVaultKeyReferenceSourceVaultInput `pulumi:"sourceVault"`
}

func (KeyVaultKeyReferenceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KeyVaultKeyReference)(nil)).Elem()
}

func (i KeyVaultKeyReferenceArgs) ToKeyVaultKeyReferenceOutput() KeyVaultKeyReferenceOutput {
	return i.ToKeyVaultKeyReferenceOutputWithContext(context.Background())
}

func (i KeyVaultKeyReferenceArgs) ToKeyVaultKeyReferenceOutputWithContext(ctx context.Context) KeyVaultKeyReferenceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KeyVaultKeyReferenceOutput)
}

func (i KeyVaultKeyReferenceArgs) ToKeyVaultKeyReferencePtrOutput() KeyVaultKeyReferencePtrOutput {
	return i.ToKeyVaultKeyReferencePtrOutputWithContext(context.Background())
}

func (i KeyVaultKeyReferenceArgs) ToKeyVaultKeyReferencePtrOutputWithContext(ctx context.Context) KeyVaultKeyReferencePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KeyVaultKeyReferenceOutput).ToKeyVaultKeyReferencePtrOutputWithContext(ctx)
}

// KeyVaultKeyReferencePtrInput is an input type that accepts KeyVaultKeyReferenceArgs, KeyVaultKeyReferencePtr and KeyVaultKeyReferencePtrOutput values.
// You can construct a concrete instance of `KeyVaultKeyReferencePtrInput` via:
//
//          KeyVaultKeyReferenceArgs{...}
//
//  or:
//
//          nil
type KeyVaultKeyReferencePtrInput interface {
	pulumi.Input

	ToKeyVaultKeyReferencePtrOutput() KeyVaultKeyReferencePtrOutput
	ToKeyVaultKeyReferencePtrOutputWithContext(context.Context) KeyVaultKeyReferencePtrOutput
}

type keyVaultKeyReferencePtrType KeyVaultKeyReferenceArgs

func KeyVaultKeyReferencePtr(v *KeyVaultKeyReferenceArgs) KeyVaultKeyReferencePtrInput {
	return (*keyVaultKeyReferencePtrType)(v)
}

func (*keyVaultKeyReferencePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**KeyVaultKeyReference)(nil)).Elem()
}

func (i *keyVaultKeyReferencePtrType) ToKeyVaultKeyReferencePtrOutput() KeyVaultKeyReferencePtrOutput {
	return i.ToKeyVaultKeyReferencePtrOutputWithContext(context.Background())
}

func (i *keyVaultKeyReferencePtrType) ToKeyVaultKeyReferencePtrOutputWithContext(ctx context.Context) KeyVaultKeyReferencePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KeyVaultKeyReferencePtrOutput)
}

// Describes a reference to Key Vault Key.
type KeyVaultKeyReferenceOutput struct{ *pulumi.OutputState }

func (KeyVaultKeyReferenceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KeyVaultKeyReference)(nil)).Elem()
}

func (o KeyVaultKeyReferenceOutput) ToKeyVaultKeyReferenceOutput() KeyVaultKeyReferenceOutput {
	return o
}

func (o KeyVaultKeyReferenceOutput) ToKeyVaultKeyReferenceOutputWithContext(ctx context.Context) KeyVaultKeyReferenceOutput {
	return o
}

func (o KeyVaultKeyReferenceOutput) ToKeyVaultKeyReferencePtrOutput() KeyVaultKeyReferencePtrOutput {
	return o.ToKeyVaultKeyReferencePtrOutputWithContext(context.Background())
}

func (o KeyVaultKeyReferenceOutput) ToKeyVaultKeyReferencePtrOutputWithContext(ctx context.Context) KeyVaultKeyReferencePtrOutput {
	return o.ApplyT(func(v KeyVaultKeyReference) *KeyVaultKeyReference {
		return &v
	}).(KeyVaultKeyReferencePtrOutput)
}

// The URL referencing a key encryption key in Key Vault.
func (o KeyVaultKeyReferenceOutput) KeyUrl() pulumi.StringOutput {
	return o.ApplyT(func(v KeyVaultKeyReference) string { return v.KeyUrl }).(pulumi.StringOutput)
}

// Describes a resource Id to source Key Vault.
func (o KeyVaultKeyReferenceOutput) SourceVault() KeyVaultKeyReferenceSourceVaultOutput {
	return o.ApplyT(func(v KeyVaultKeyReference) KeyVaultKeyReferenceSourceVault { return v.SourceVault }).(KeyVaultKeyReferenceSourceVaultOutput)
}

type KeyVaultKeyReferencePtrOutput struct{ *pulumi.OutputState }

func (KeyVaultKeyReferencePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KeyVaultKeyReference)(nil)).Elem()
}

func (o KeyVaultKeyReferencePtrOutput) ToKeyVaultKeyReferencePtrOutput() KeyVaultKeyReferencePtrOutput {
	return o
}

func (o KeyVaultKeyReferencePtrOutput) ToKeyVaultKeyReferencePtrOutputWithContext(ctx context.Context) KeyVaultKeyReferencePtrOutput {
	return o
}

func (o KeyVaultKeyReferencePtrOutput) Elem() KeyVaultKeyReferenceOutput {
	return o.ApplyT(func(v *KeyVaultKeyReference) KeyVaultKeyReference { return *v }).(KeyVaultKeyReferenceOutput)
}

// The URL referencing a key encryption key in Key Vault.
func (o KeyVaultKeyReferencePtrOutput) KeyUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KeyVaultKeyReference) *string {
		if v == nil {
			return nil
		}
		return &v.KeyUrl
	}).(pulumi.StringPtrOutput)
}

// Describes a resource Id to source Key Vault.
func (o KeyVaultKeyReferencePtrOutput) SourceVault() KeyVaultKeyReferenceSourceVaultPtrOutput {
	return o.ApplyT(func(v *KeyVaultKeyReference) *KeyVaultKeyReferenceSourceVault {
		if v == nil {
			return nil
		}
		return &v.SourceVault
	}).(KeyVaultKeyReferenceSourceVaultPtrOutput)
}

// Describes a reference to Key Vault Key.
type KeyVaultKeyReferenceInvokeResponse struct {
	// The URL referencing a key encryption key in Key Vault.
	KeyUrl string `pulumi:"keyUrl"`
	// Describes a resource Id to source Key Vault.
	SourceVault KeyVaultKeyReferenceInvokeResponseSourceVault `pulumi:"sourceVault"`
}

// KeyVaultKeyReferenceInvokeResponseInput is an input type that accepts KeyVaultKeyReferenceInvokeResponseArgs and KeyVaultKeyReferenceInvokeResponseOutput values.
// You can construct a concrete instance of `KeyVaultKeyReferenceInvokeResponseInput` via:
//
//          KeyVaultKeyReferenceInvokeResponseArgs{...}
type KeyVaultKeyReferenceInvokeResponseInput interface {
	pulumi.Input

	ToKeyVaultKeyReferenceInvokeResponseOutput() KeyVaultKeyReferenceInvokeResponseOutput
	ToKeyVaultKeyReferenceInvokeResponseOutputWithContext(context.Context) KeyVaultKeyReferenceInvokeResponseOutput
}

// Describes a reference to Key Vault Key.
type KeyVaultKeyReferenceInvokeResponseArgs struct {
	// The URL referencing a key encryption key in Key Vault.
	KeyUrl pulumi.StringInput `pulumi:"keyUrl"`
	// Describes a resource Id to source Key Vault.
	SourceVault KeyVaultKeyReferenceInvokeResponseSourceVaultInput `pulumi:"sourceVault"`
}

func (KeyVaultKeyReferenceInvokeResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KeyVaultKeyReferenceInvokeResponse)(nil)).Elem()
}

func (i KeyVaultKeyReferenceInvokeResponseArgs) ToKeyVaultKeyReferenceInvokeResponseOutput() KeyVaultKeyReferenceInvokeResponseOutput {
	return i.ToKeyVaultKeyReferenceInvokeResponseOutputWithContext(context.Background())
}

func (i KeyVaultKeyReferenceInvokeResponseArgs) ToKeyVaultKeyReferenceInvokeResponseOutputWithContext(ctx context.Context) KeyVaultKeyReferenceInvokeResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KeyVaultKeyReferenceInvokeResponseOutput)
}

func (i KeyVaultKeyReferenceInvokeResponseArgs) ToKeyVaultKeyReferenceInvokeResponsePtrOutput() KeyVaultKeyReferenceInvokeResponsePtrOutput {
	return i.ToKeyVaultKeyReferenceInvokeResponsePtrOutputWithContext(context.Background())
}

func (i KeyVaultKeyReferenceInvokeResponseArgs) ToKeyVaultKeyReferenceInvokeResponsePtrOutputWithContext(ctx context.Context) KeyVaultKeyReferenceInvokeResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KeyVaultKeyReferenceInvokeResponseOutput).ToKeyVaultKeyReferenceInvokeResponsePtrOutputWithContext(ctx)
}

// KeyVaultKeyReferenceInvokeResponsePtrInput is an input type that accepts KeyVaultKeyReferenceInvokeResponseArgs, KeyVaultKeyReferenceInvokeResponsePtr and KeyVaultKeyReferenceInvokeResponsePtrOutput values.
// You can construct a concrete instance of `KeyVaultKeyReferenceInvokeResponsePtrInput` via:
//
//          KeyVaultKeyReferenceInvokeResponseArgs{...}
//
//  or:
//
//          nil
type KeyVaultKeyReferenceInvokeResponsePtrInput interface {
	pulumi.Input

	ToKeyVaultKeyReferenceInvokeResponsePtrOutput() KeyVaultKeyReferenceInvokeResponsePtrOutput
	ToKeyVaultKeyReferenceInvokeResponsePtrOutputWithContext(context.Context) KeyVaultKeyReferenceInvokeResponsePtrOutput
}

type keyVaultKeyReferenceInvokeResponsePtrType KeyVaultKeyReferenceInvokeResponseArgs

func KeyVaultKeyReferenceInvokeResponsePtr(v *KeyVaultKeyReferenceInvokeResponseArgs) KeyVaultKeyReferenceInvokeResponsePtrInput {
	return (*keyVaultKeyReferenceInvokeResponsePtrType)(v)
}

func (*keyVaultKeyReferenceInvokeResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**KeyVaultKeyReferenceInvokeResponse)(nil)).Elem()
}

func (i *keyVaultKeyReferenceInvokeResponsePtrType) ToKeyVaultKeyReferenceInvokeResponsePtrOutput() KeyVaultKeyReferenceInvokeResponsePtrOutput {
	return i.ToKeyVaultKeyReferenceInvokeResponsePtrOutputWithContext(context.Background())
}

func (i *keyVaultKeyReferenceInvokeResponsePtrType) ToKeyVaultKeyReferenceInvokeResponsePtrOutputWithContext(ctx context.Context) KeyVaultKeyReferenceInvokeResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KeyVaultKeyReferenceInvokeResponsePtrOutput)
}

// Describes a reference to Key Vault Key.
type KeyVaultKeyReferenceInvokeResponseOutput struct{ *pulumi.OutputState }

func (KeyVaultKeyReferenceInvokeResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KeyVaultKeyReferenceInvokeResponse)(nil)).Elem()
}

func (o KeyVaultKeyReferenceInvokeResponseOutput) ToKeyVaultKeyReferenceInvokeResponseOutput() KeyVaultKeyReferenceInvokeResponseOutput {
	return o
}

func (o KeyVaultKeyReferenceInvokeResponseOutput) ToKeyVaultKeyReferenceInvokeResponseOutputWithContext(ctx context.Context) KeyVaultKeyReferenceInvokeResponseOutput {
	return o
}

func (o KeyVaultKeyReferenceInvokeResponseOutput) ToKeyVaultKeyReferenceInvokeResponsePtrOutput() KeyVaultKeyReferenceInvokeResponsePtrOutput {
	return o.ToKeyVaultKeyReferenceInvokeResponsePtrOutputWithContext(context.Background())
}

func (o KeyVaultKeyReferenceInvokeResponseOutput) ToKeyVaultKeyReferenceInvokeResponsePtrOutputWithContext(ctx context.Context) KeyVaultKeyReferenceInvokeResponsePtrOutput {
	return o.ApplyT(func(v KeyVaultKeyReferenceInvokeResponse) *KeyVaultKeyReferenceInvokeResponse {
		return &v
	}).(KeyVaultKeyReferenceInvokeResponsePtrOutput)
}

// The URL referencing a key encryption key in Key Vault.
func (o KeyVaultKeyReferenceInvokeResponseOutput) KeyUrl() pulumi.StringOutput {
	return o.ApplyT(func(v KeyVaultKeyReferenceInvokeResponse) string { return v.KeyUrl }).(pulumi.StringOutput)
}

// Describes a resource Id to source Key Vault.
func (o KeyVaultKeyReferenceInvokeResponseOutput) SourceVault() KeyVaultKeyReferenceInvokeResponseSourceVaultOutput {
	return o.ApplyT(func(v KeyVaultKeyReferenceInvokeResponse) KeyVaultKeyReferenceInvokeResponseSourceVault {
		return v.SourceVault
	}).(KeyVaultKeyReferenceInvokeResponseSourceVaultOutput)
}

type KeyVaultKeyReferenceInvokeResponsePtrOutput struct{ *pulumi.OutputState }

func (KeyVaultKeyReferenceInvokeResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KeyVaultKeyReferenceInvokeResponse)(nil)).Elem()
}

func (o KeyVaultKeyReferenceInvokeResponsePtrOutput) ToKeyVaultKeyReferenceInvokeResponsePtrOutput() KeyVaultKeyReferenceInvokeResponsePtrOutput {
	return o
}

func (o KeyVaultKeyReferenceInvokeResponsePtrOutput) ToKeyVaultKeyReferenceInvokeResponsePtrOutputWithContext(ctx context.Context) KeyVaultKeyReferenceInvokeResponsePtrOutput {
	return o
}

func (o KeyVaultKeyReferenceInvokeResponsePtrOutput) Elem() KeyVaultKeyReferenceInvokeResponseOutput {
	return o.ApplyT(func(v *KeyVaultKeyReferenceInvokeResponse) KeyVaultKeyReferenceInvokeResponse { return *v }).(KeyVaultKeyReferenceInvokeResponseOutput)
}

// The URL referencing a key encryption key in Key Vault.
func (o KeyVaultKeyReferenceInvokeResponsePtrOutput) KeyUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KeyVaultKeyReferenceInvokeResponse) *string {
		if v == nil {
			return nil
		}
		return &v.KeyUrl
	}).(pulumi.StringPtrOutput)
}

// Describes a resource Id to source Key Vault.
func (o KeyVaultKeyReferenceInvokeResponsePtrOutput) SourceVault() KeyVaultKeyReferenceInvokeResponseSourceVaultPtrOutput {
	return o.ApplyT(func(v *KeyVaultKeyReferenceInvokeResponse) *KeyVaultKeyReferenceInvokeResponseSourceVault {
		if v == nil {
			return nil
		}
		return &v.SourceVault
	}).(KeyVaultKeyReferenceInvokeResponseSourceVaultPtrOutput)
}

// Describes a resource Id to source Key Vault.
type KeyVaultKeyReferenceInvokeResponseSourceVault struct {
	// Resource Id.
	Id *string `pulumi:"id"`
}

// KeyVaultKeyReferenceInvokeResponseSourceVaultInput is an input type that accepts KeyVaultKeyReferenceInvokeResponseSourceVaultArgs and KeyVaultKeyReferenceInvokeResponseSourceVaultOutput values.
// You can construct a concrete instance of `KeyVaultKeyReferenceInvokeResponseSourceVaultInput` via:
//
//          KeyVaultKeyReferenceInvokeResponseSourceVaultArgs{...}
type KeyVaultKeyReferenceInvokeResponseSourceVaultInput interface {
	pulumi.Input

	ToKeyVaultKeyReferenceInvokeResponseSourceVaultOutput() KeyVaultKeyReferenceInvokeResponseSourceVaultOutput
	ToKeyVaultKeyReferenceInvokeResponseSourceVaultOutputWithContext(context.Context) KeyVaultKeyReferenceInvokeResponseSourceVaultOutput
}

// Describes a resource Id to source Key Vault.
type KeyVaultKeyReferenceInvokeResponseSourceVaultArgs struct {
	// Resource Id.
	Id pulumi.StringPtrInput `pulumi:"id"`
}

func (KeyVaultKeyReferenceInvokeResponseSourceVaultArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KeyVaultKeyReferenceInvokeResponseSourceVault)(nil)).Elem()
}

func (i KeyVaultKeyReferenceInvokeResponseSourceVaultArgs) ToKeyVaultKeyReferenceInvokeResponseSourceVaultOutput() KeyVaultKeyReferenceInvokeResponseSourceVaultOutput {
	return i.ToKeyVaultKeyReferenceInvokeResponseSourceVaultOutputWithContext(context.Background())
}

func (i KeyVaultKeyReferenceInvokeResponseSourceVaultArgs) ToKeyVaultKeyReferenceInvokeResponseSourceVaultOutputWithContext(ctx context.Context) KeyVaultKeyReferenceInvokeResponseSourceVaultOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KeyVaultKeyReferenceInvokeResponseSourceVaultOutput)
}

func (i KeyVaultKeyReferenceInvokeResponseSourceVaultArgs) ToKeyVaultKeyReferenceInvokeResponseSourceVaultPtrOutput() KeyVaultKeyReferenceInvokeResponseSourceVaultPtrOutput {
	return i.ToKeyVaultKeyReferenceInvokeResponseSourceVaultPtrOutputWithContext(context.Background())
}

func (i KeyVaultKeyReferenceInvokeResponseSourceVaultArgs) ToKeyVaultKeyReferenceInvokeResponseSourceVaultPtrOutputWithContext(ctx context.Context) KeyVaultKeyReferenceInvokeResponseSourceVaultPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KeyVaultKeyReferenceInvokeResponseSourceVaultOutput).ToKeyVaultKeyReferenceInvokeResponseSourceVaultPtrOutputWithContext(ctx)
}

// KeyVaultKeyReferenceInvokeResponseSourceVaultPtrInput is an input type that accepts KeyVaultKeyReferenceInvokeResponseSourceVaultArgs, KeyVaultKeyReferenceInvokeResponseSourceVaultPtr and KeyVaultKeyReferenceInvokeResponseSourceVaultPtrOutput values.
// You can construct a concrete instance of `KeyVaultKeyReferenceInvokeResponseSourceVaultPtrInput` via:
//
//          KeyVaultKeyReferenceInvokeResponseSourceVaultArgs{...}
//
//  or:
//
//          nil
type KeyVaultKeyReferenceInvokeResponseSourceVaultPtrInput interface {
	pulumi.Input

	ToKeyVaultKeyReferenceInvokeResponseSourceVaultPtrOutput() KeyVaultKeyReferenceInvokeResponseSourceVaultPtrOutput
	ToKeyVaultKeyReferenceInvokeResponseSourceVaultPtrOutputWithContext(context.Context) KeyVaultKeyReferenceInvokeResponseSourceVaultPtrOutput
}

type keyVaultKeyReferenceInvokeResponseSourceVaultPtrType KeyVaultKeyReferenceInvokeResponseSourceVaultArgs

func KeyVaultKeyReferenceInvokeResponseSourceVaultPtr(v *KeyVaultKeyReferenceInvokeResponseSourceVaultArgs) KeyVaultKeyReferenceInvokeResponseSourceVaultPtrInput {
	return (*keyVaultKeyReferenceInvokeResponseSourceVaultPtrType)(v)
}

func (*keyVaultKeyReferenceInvokeResponseSourceVaultPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**KeyVaultKeyReferenceInvokeResponseSourceVault)(nil)).Elem()
}

func (i *keyVaultKeyReferenceInvokeResponseSourceVaultPtrType) ToKeyVaultKeyReferenceInvokeResponseSourceVaultPtrOutput() KeyVaultKeyReferenceInvokeResponseSourceVaultPtrOutput {
	return i.ToKeyVaultKeyReferenceInvokeResponseSourceVaultPtrOutputWithContext(context.Background())
}

func (i *keyVaultKeyReferenceInvokeResponseSourceVaultPtrType) ToKeyVaultKeyReferenceInvokeResponseSourceVaultPtrOutputWithContext(ctx context.Context) KeyVaultKeyReferenceInvokeResponseSourceVaultPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KeyVaultKeyReferenceInvokeResponseSourceVaultPtrOutput)
}

// Describes a resource Id to source Key Vault.
type KeyVaultKeyReferenceInvokeResponseSourceVaultOutput struct{ *pulumi.OutputState }

func (KeyVaultKeyReferenceInvokeResponseSourceVaultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KeyVaultKeyReferenceInvokeResponseSourceVault)(nil)).Elem()
}

func (o KeyVaultKeyReferenceInvokeResponseSourceVaultOutput) ToKeyVaultKeyReferenceInvokeResponseSourceVaultOutput() KeyVaultKeyReferenceInvokeResponseSourceVaultOutput {
	return o
}

func (o KeyVaultKeyReferenceInvokeResponseSourceVaultOutput) ToKeyVaultKeyReferenceInvokeResponseSourceVaultOutputWithContext(ctx context.Context) KeyVaultKeyReferenceInvokeResponseSourceVaultOutput {
	return o
}

func (o KeyVaultKeyReferenceInvokeResponseSourceVaultOutput) ToKeyVaultKeyReferenceInvokeResponseSourceVaultPtrOutput() KeyVaultKeyReferenceInvokeResponseSourceVaultPtrOutput {
	return o.ToKeyVaultKeyReferenceInvokeResponseSourceVaultPtrOutputWithContext(context.Background())
}

func (o KeyVaultKeyReferenceInvokeResponseSourceVaultOutput) ToKeyVaultKeyReferenceInvokeResponseSourceVaultPtrOutputWithContext(ctx context.Context) KeyVaultKeyReferenceInvokeResponseSourceVaultPtrOutput {
	return o.ApplyT(func(v KeyVaultKeyReferenceInvokeResponseSourceVault) *KeyVaultKeyReferenceInvokeResponseSourceVault {
		return &v
	}).(KeyVaultKeyReferenceInvokeResponseSourceVaultPtrOutput)
}

// Resource Id.
func (o KeyVaultKeyReferenceInvokeResponseSourceVaultOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KeyVaultKeyReferenceInvokeResponseSourceVault) *string { return v.Id }).(pulumi.StringPtrOutput)
}

type KeyVaultKeyReferenceInvokeResponseSourceVaultPtrOutput struct{ *pulumi.OutputState }

func (KeyVaultKeyReferenceInvokeResponseSourceVaultPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KeyVaultKeyReferenceInvokeResponseSourceVault)(nil)).Elem()
}

func (o KeyVaultKeyReferenceInvokeResponseSourceVaultPtrOutput) ToKeyVaultKeyReferenceInvokeResponseSourceVaultPtrOutput() KeyVaultKeyReferenceInvokeResponseSourceVaultPtrOutput {
	return o
}

func (o KeyVaultKeyReferenceInvokeResponseSourceVaultPtrOutput) ToKeyVaultKeyReferenceInvokeResponseSourceVaultPtrOutputWithContext(ctx context.Context) KeyVaultKeyReferenceInvokeResponseSourceVaultPtrOutput {
	return o
}

func (o KeyVaultKeyReferenceInvokeResponseSourceVaultPtrOutput) Elem() KeyVaultKeyReferenceInvokeResponseSourceVaultOutput {
	return o.ApplyT(func(v *KeyVaultKeyReferenceInvokeResponseSourceVault) KeyVaultKeyReferenceInvokeResponseSourceVault {
		return *v
	}).(KeyVaultKeyReferenceInvokeResponseSourceVaultOutput)
}

// Resource Id.
func (o KeyVaultKeyReferenceInvokeResponseSourceVaultPtrOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KeyVaultKeyReferenceInvokeResponseSourceVault) *string {
		if v == nil {
			return nil
		}
		return v.Id
	}).(pulumi.StringPtrOutput)
}

// Describes a reference to Key Vault Key.
type KeyVaultKeyReferenceResponse struct {
	// The URL referencing a key encryption key in Key Vault.
	KeyUrl string `pulumi:"keyUrl"`
	// Describes a resource Id to source Key Vault.
	SourceVault KeyVaultKeyReferenceResponseSourceVault `pulumi:"sourceVault"`
}

// KeyVaultKeyReferenceResponseInput is an input type that accepts KeyVaultKeyReferenceResponseArgs and KeyVaultKeyReferenceResponseOutput values.
// You can construct a concrete instance of `KeyVaultKeyReferenceResponseInput` via:
//
//          KeyVaultKeyReferenceResponseArgs{...}
type KeyVaultKeyReferenceResponseInput interface {
	pulumi.Input

	ToKeyVaultKeyReferenceResponseOutput() KeyVaultKeyReferenceResponseOutput
	ToKeyVaultKeyReferenceResponseOutputWithContext(context.Context) KeyVaultKeyReferenceResponseOutput
}

// Describes a reference to Key Vault Key.
type KeyVaultKeyReferenceResponseArgs struct {
	// The URL referencing a key encryption key in Key Vault.
	KeyUrl pulumi.StringInput `pulumi:"keyUrl"`
	// Describes a resource Id to source Key Vault.
	SourceVault KeyVaultKeyReferenceResponseSourceVaultInput `pulumi:"sourceVault"`
}

func (KeyVaultKeyReferenceResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KeyVaultKeyReferenceResponse)(nil)).Elem()
}

func (i KeyVaultKeyReferenceResponseArgs) ToKeyVaultKeyReferenceResponseOutput() KeyVaultKeyReferenceResponseOutput {
	return i.ToKeyVaultKeyReferenceResponseOutputWithContext(context.Background())
}

func (i KeyVaultKeyReferenceResponseArgs) ToKeyVaultKeyReferenceResponseOutputWithContext(ctx context.Context) KeyVaultKeyReferenceResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KeyVaultKeyReferenceResponseOutput)
}

func (i KeyVaultKeyReferenceResponseArgs) ToKeyVaultKeyReferenceResponsePtrOutput() KeyVaultKeyReferenceResponsePtrOutput {
	return i.ToKeyVaultKeyReferenceResponsePtrOutputWithContext(context.Background())
}

func (i KeyVaultKeyReferenceResponseArgs) ToKeyVaultKeyReferenceResponsePtrOutputWithContext(ctx context.Context) KeyVaultKeyReferenceResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KeyVaultKeyReferenceResponseOutput).ToKeyVaultKeyReferenceResponsePtrOutputWithContext(ctx)
}

// KeyVaultKeyReferenceResponsePtrInput is an input type that accepts KeyVaultKeyReferenceResponseArgs, KeyVaultKeyReferenceResponsePtr and KeyVaultKeyReferenceResponsePtrOutput values.
// You can construct a concrete instance of `KeyVaultKeyReferenceResponsePtrInput` via:
//
//          KeyVaultKeyReferenceResponseArgs{...}
//
//  or:
//
//          nil
type KeyVaultKeyReferenceResponsePtrInput interface {
	pulumi.Input

	ToKeyVaultKeyReferenceResponsePtrOutput() KeyVaultKeyReferenceResponsePtrOutput
	ToKeyVaultKeyReferenceResponsePtrOutputWithContext(context.Context) KeyVaultKeyReferenceResponsePtrOutput
}

type keyVaultKeyReferenceResponsePtrType KeyVaultKeyReferenceResponseArgs

func KeyVaultKeyReferenceResponsePtr(v *KeyVaultKeyReferenceResponseArgs) KeyVaultKeyReferenceResponsePtrInput {
	return (*keyVaultKeyReferenceResponsePtrType)(v)
}

func (*keyVaultKeyReferenceResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**KeyVaultKeyReferenceResponse)(nil)).Elem()
}

func (i *keyVaultKeyReferenceResponsePtrType) ToKeyVaultKeyReferenceResponsePtrOutput() KeyVaultKeyReferenceResponsePtrOutput {
	return i.ToKeyVaultKeyReferenceResponsePtrOutputWithContext(context.Background())
}

func (i *keyVaultKeyReferenceResponsePtrType) ToKeyVaultKeyReferenceResponsePtrOutputWithContext(ctx context.Context) KeyVaultKeyReferenceResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KeyVaultKeyReferenceResponsePtrOutput)
}

// Describes a reference to Key Vault Key.
type KeyVaultKeyReferenceResponseOutput struct{ *pulumi.OutputState }

func (KeyVaultKeyReferenceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KeyVaultKeyReferenceResponse)(nil)).Elem()
}

func (o KeyVaultKeyReferenceResponseOutput) ToKeyVaultKeyReferenceResponseOutput() KeyVaultKeyReferenceResponseOutput {
	return o
}

func (o KeyVaultKeyReferenceResponseOutput) ToKeyVaultKeyReferenceResponseOutputWithContext(ctx context.Context) KeyVaultKeyReferenceResponseOutput {
	return o
}

func (o KeyVaultKeyReferenceResponseOutput) ToKeyVaultKeyReferenceResponsePtrOutput() KeyVaultKeyReferenceResponsePtrOutput {
	return o.ToKeyVaultKeyReferenceResponsePtrOutputWithContext(context.Background())
}

func (o KeyVaultKeyReferenceResponseOutput) ToKeyVaultKeyReferenceResponsePtrOutputWithContext(ctx context.Context) KeyVaultKeyReferenceResponsePtrOutput {
	return o.ApplyT(func(v KeyVaultKeyReferenceResponse) *KeyVaultKeyReferenceResponse {
		return &v
	}).(KeyVaultKeyReferenceResponsePtrOutput)
}

// The URL referencing a key encryption key in Key Vault.
func (o KeyVaultKeyReferenceResponseOutput) KeyUrl() pulumi.StringOutput {
	return o.ApplyT(func(v KeyVaultKeyReferenceResponse) string { return v.KeyUrl }).(pulumi.StringOutput)
}

// Describes a resource Id to source Key Vault.
func (o KeyVaultKeyReferenceResponseOutput) SourceVault() KeyVaultKeyReferenceResponseSourceVaultOutput {
	return o.ApplyT(func(v KeyVaultKeyReferenceResponse) KeyVaultKeyReferenceResponseSourceVault { return v.SourceVault }).(KeyVaultKeyReferenceResponseSourceVaultOutput)
}

type KeyVaultKeyReferenceResponsePtrOutput struct{ *pulumi.OutputState }

func (KeyVaultKeyReferenceResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KeyVaultKeyReferenceResponse)(nil)).Elem()
}

func (o KeyVaultKeyReferenceResponsePtrOutput) ToKeyVaultKeyReferenceResponsePtrOutput() KeyVaultKeyReferenceResponsePtrOutput {
	return o
}

func (o KeyVaultKeyReferenceResponsePtrOutput) ToKeyVaultKeyReferenceResponsePtrOutputWithContext(ctx context.Context) KeyVaultKeyReferenceResponsePtrOutput {
	return o
}

func (o KeyVaultKeyReferenceResponsePtrOutput) Elem() KeyVaultKeyReferenceResponseOutput {
	return o.ApplyT(func(v *KeyVaultKeyReferenceResponse) KeyVaultKeyReferenceResponse { return *v }).(KeyVaultKeyReferenceResponseOutput)
}

// The URL referencing a key encryption key in Key Vault.
func (o KeyVaultKeyReferenceResponsePtrOutput) KeyUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KeyVaultKeyReferenceResponse) *string {
		if v == nil {
			return nil
		}
		return &v.KeyUrl
	}).(pulumi.StringPtrOutput)
}

// Describes a resource Id to source Key Vault.
func (o KeyVaultKeyReferenceResponsePtrOutput) SourceVault() KeyVaultKeyReferenceResponseSourceVaultPtrOutput {
	return o.ApplyT(func(v *KeyVaultKeyReferenceResponse) *KeyVaultKeyReferenceResponseSourceVault {
		if v == nil {
			return nil
		}
		return &v.SourceVault
	}).(KeyVaultKeyReferenceResponseSourceVaultPtrOutput)
}

// Describes a resource Id to source Key Vault.
type KeyVaultKeyReferenceResponseSourceVault struct {
	// Resource Id.
	Id *string `pulumi:"id"`
}

// KeyVaultKeyReferenceResponseSourceVaultInput is an input type that accepts KeyVaultKeyReferenceResponseSourceVaultArgs and KeyVaultKeyReferenceResponseSourceVaultOutput values.
// You can construct a concrete instance of `KeyVaultKeyReferenceResponseSourceVaultInput` via:
//
//          KeyVaultKeyReferenceResponseSourceVaultArgs{...}
type KeyVaultKeyReferenceResponseSourceVaultInput interface {
	pulumi.Input

	ToKeyVaultKeyReferenceResponseSourceVaultOutput() KeyVaultKeyReferenceResponseSourceVaultOutput
	ToKeyVaultKeyReferenceResponseSourceVaultOutputWithContext(context.Context) KeyVaultKeyReferenceResponseSourceVaultOutput
}

// Describes a resource Id to source Key Vault.
type KeyVaultKeyReferenceResponseSourceVaultArgs struct {
	// Resource Id.
	Id pulumi.StringPtrInput `pulumi:"id"`
}

func (KeyVaultKeyReferenceResponseSourceVaultArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KeyVaultKeyReferenceResponseSourceVault)(nil)).Elem()
}

func (i KeyVaultKeyReferenceResponseSourceVaultArgs) ToKeyVaultKeyReferenceResponseSourceVaultOutput() KeyVaultKeyReferenceResponseSourceVaultOutput {
	return i.ToKeyVaultKeyReferenceResponseSourceVaultOutputWithContext(context.Background())
}

func (i KeyVaultKeyReferenceResponseSourceVaultArgs) ToKeyVaultKeyReferenceResponseSourceVaultOutputWithContext(ctx context.Context) KeyVaultKeyReferenceResponseSourceVaultOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KeyVaultKeyReferenceResponseSourceVaultOutput)
}

func (i KeyVaultKeyReferenceResponseSourceVaultArgs) ToKeyVaultKeyReferenceResponseSourceVaultPtrOutput() KeyVaultKeyReferenceResponseSourceVaultPtrOutput {
	return i.ToKeyVaultKeyReferenceResponseSourceVaultPtrOutputWithContext(context.Background())
}

func (i KeyVaultKeyReferenceResponseSourceVaultArgs) ToKeyVaultKeyReferenceResponseSourceVaultPtrOutputWithContext(ctx context.Context) KeyVaultKeyReferenceResponseSourceVaultPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KeyVaultKeyReferenceResponseSourceVaultOutput).ToKeyVaultKeyReferenceResponseSourceVaultPtrOutputWithContext(ctx)
}

// KeyVaultKeyReferenceResponseSourceVaultPtrInput is an input type that accepts KeyVaultKeyReferenceResponseSourceVaultArgs, KeyVaultKeyReferenceResponseSourceVaultPtr and KeyVaultKeyReferenceResponseSourceVaultPtrOutput values.
// You can construct a concrete instance of `KeyVaultKeyReferenceResponseSourceVaultPtrInput` via:
//
//          KeyVaultKeyReferenceResponseSourceVaultArgs{...}
//
//  or:
//
//          nil
type KeyVaultKeyReferenceResponseSourceVaultPtrInput interface {
	pulumi.Input

	ToKeyVaultKeyReferenceResponseSourceVaultPtrOutput() KeyVaultKeyReferenceResponseSourceVaultPtrOutput
	ToKeyVaultKeyReferenceResponseSourceVaultPtrOutputWithContext(context.Context) KeyVaultKeyReferenceResponseSourceVaultPtrOutput
}

type keyVaultKeyReferenceResponseSourceVaultPtrType KeyVaultKeyReferenceResponseSourceVaultArgs

func KeyVaultKeyReferenceResponseSourceVaultPtr(v *KeyVaultKeyReferenceResponseSourceVaultArgs) KeyVaultKeyReferenceResponseSourceVaultPtrInput {
	return (*keyVaultKeyReferenceResponseSourceVaultPtrType)(v)
}

func (*keyVaultKeyReferenceResponseSourceVaultPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**KeyVaultKeyReferenceResponseSourceVault)(nil)).Elem()
}

func (i *keyVaultKeyReferenceResponseSourceVaultPtrType) ToKeyVaultKeyReferenceResponseSourceVaultPtrOutput() KeyVaultKeyReferenceResponseSourceVaultPtrOutput {
	return i.ToKeyVaultKeyReferenceResponseSourceVaultPtrOutputWithContext(context.Background())
}

func (i *keyVaultKeyReferenceResponseSourceVaultPtrType) ToKeyVaultKeyReferenceResponseSourceVaultPtrOutputWithContext(ctx context.Context) KeyVaultKeyReferenceResponseSourceVaultPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KeyVaultKeyReferenceResponseSourceVaultPtrOutput)
}

// Describes a resource Id to source Key Vault.
type KeyVaultKeyReferenceResponseSourceVaultOutput struct{ *pulumi.OutputState }

func (KeyVaultKeyReferenceResponseSourceVaultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KeyVaultKeyReferenceResponseSourceVault)(nil)).Elem()
}

func (o KeyVaultKeyReferenceResponseSourceVaultOutput) ToKeyVaultKeyReferenceResponseSourceVaultOutput() KeyVaultKeyReferenceResponseSourceVaultOutput {
	return o
}

func (o KeyVaultKeyReferenceResponseSourceVaultOutput) ToKeyVaultKeyReferenceResponseSourceVaultOutputWithContext(ctx context.Context) KeyVaultKeyReferenceResponseSourceVaultOutput {
	return o
}

func (o KeyVaultKeyReferenceResponseSourceVaultOutput) ToKeyVaultKeyReferenceResponseSourceVaultPtrOutput() KeyVaultKeyReferenceResponseSourceVaultPtrOutput {
	return o.ToKeyVaultKeyReferenceResponseSourceVaultPtrOutputWithContext(context.Background())
}

func (o KeyVaultKeyReferenceResponseSourceVaultOutput) ToKeyVaultKeyReferenceResponseSourceVaultPtrOutputWithContext(ctx context.Context) KeyVaultKeyReferenceResponseSourceVaultPtrOutput {
	return o.ApplyT(func(v KeyVaultKeyReferenceResponseSourceVault) *KeyVaultKeyReferenceResponseSourceVault {
		return &v
	}).(KeyVaultKeyReferenceResponseSourceVaultPtrOutput)
}

// Resource Id.
func (o KeyVaultKeyReferenceResponseSourceVaultOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KeyVaultKeyReferenceResponseSourceVault) *string { return v.Id }).(pulumi.StringPtrOutput)
}

type KeyVaultKeyReferenceResponseSourceVaultPtrOutput struct{ *pulumi.OutputState }

func (KeyVaultKeyReferenceResponseSourceVaultPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KeyVaultKeyReferenceResponseSourceVault)(nil)).Elem()
}

func (o KeyVaultKeyReferenceResponseSourceVaultPtrOutput) ToKeyVaultKeyReferenceResponseSourceVaultPtrOutput() KeyVaultKeyReferenceResponseSourceVaultPtrOutput {
	return o
}

func (o KeyVaultKeyReferenceResponseSourceVaultPtrOutput) ToKeyVaultKeyReferenceResponseSourceVaultPtrOutputWithContext(ctx context.Context) KeyVaultKeyReferenceResponseSourceVaultPtrOutput {
	return o
}

func (o KeyVaultKeyReferenceResponseSourceVaultPtrOutput) Elem() KeyVaultKeyReferenceResponseSourceVaultOutput {
	return o.ApplyT(func(v *KeyVaultKeyReferenceResponseSourceVault) KeyVaultKeyReferenceResponseSourceVault { return *v }).(KeyVaultKeyReferenceResponseSourceVaultOutput)
}

// Resource Id.
func (o KeyVaultKeyReferenceResponseSourceVaultPtrOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KeyVaultKeyReferenceResponseSourceVault) *string {
		if v == nil {
			return nil
		}
		return v.Id
	}).(pulumi.StringPtrOutput)
}

// Describes a resource Id to source Key Vault.
type KeyVaultKeyReferenceSourceVault struct {
	// Resource Id.
	Id *string `pulumi:"id"`
}

// KeyVaultKeyReferenceSourceVaultInput is an input type that accepts KeyVaultKeyReferenceSourceVaultArgs and KeyVaultKeyReferenceSourceVaultOutput values.
// You can construct a concrete instance of `KeyVaultKeyReferenceSourceVaultInput` via:
//
//          KeyVaultKeyReferenceSourceVaultArgs{...}
type KeyVaultKeyReferenceSourceVaultInput interface {
	pulumi.Input

	ToKeyVaultKeyReferenceSourceVaultOutput() KeyVaultKeyReferenceSourceVaultOutput
	ToKeyVaultKeyReferenceSourceVaultOutputWithContext(context.Context) KeyVaultKeyReferenceSourceVaultOutput
}

// Describes a resource Id to source Key Vault.
type KeyVaultKeyReferenceSourceVaultArgs struct {
	// Resource Id.
	Id pulumi.StringPtrInput `pulumi:"id"`
}

func (KeyVaultKeyReferenceSourceVaultArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KeyVaultKeyReferenceSourceVault)(nil)).Elem()
}

func (i KeyVaultKeyReferenceSourceVaultArgs) ToKeyVaultKeyReferenceSourceVaultOutput() KeyVaultKeyReferenceSourceVaultOutput {
	return i.ToKeyVaultKeyReferenceSourceVaultOutputWithContext(context.Background())
}

func (i KeyVaultKeyReferenceSourceVaultArgs) ToKeyVaultKeyReferenceSourceVaultOutputWithContext(ctx context.Context) KeyVaultKeyReferenceSourceVaultOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KeyVaultKeyReferenceSourceVaultOutput)
}

func (i KeyVaultKeyReferenceSourceVaultArgs) ToKeyVaultKeyReferenceSourceVaultPtrOutput() KeyVaultKeyReferenceSourceVaultPtrOutput {
	return i.ToKeyVaultKeyReferenceSourceVaultPtrOutputWithContext(context.Background())
}

func (i KeyVaultKeyReferenceSourceVaultArgs) ToKeyVaultKeyReferenceSourceVaultPtrOutputWithContext(ctx context.Context) KeyVaultKeyReferenceSourceVaultPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KeyVaultKeyReferenceSourceVaultOutput).ToKeyVaultKeyReferenceSourceVaultPtrOutputWithContext(ctx)
}

// KeyVaultKeyReferenceSourceVaultPtrInput is an input type that accepts KeyVaultKeyReferenceSourceVaultArgs, KeyVaultKeyReferenceSourceVaultPtr and KeyVaultKeyReferenceSourceVaultPtrOutput values.
// You can construct a concrete instance of `KeyVaultKeyReferenceSourceVaultPtrInput` via:
//
//          KeyVaultKeyReferenceSourceVaultArgs{...}
//
//  or:
//
//          nil
type KeyVaultKeyReferenceSourceVaultPtrInput interface {
	pulumi.Input

	ToKeyVaultKeyReferenceSourceVaultPtrOutput() KeyVaultKeyReferenceSourceVaultPtrOutput
	ToKeyVaultKeyReferenceSourceVaultPtrOutputWithContext(context.Context) KeyVaultKeyReferenceSourceVaultPtrOutput
}

type keyVaultKeyReferenceSourceVaultPtrType KeyVaultKeyReferenceSourceVaultArgs

func KeyVaultKeyReferenceSourceVaultPtr(v *KeyVaultKeyReferenceSourceVaultArgs) KeyVaultKeyReferenceSourceVaultPtrInput {
	return (*keyVaultKeyReferenceSourceVaultPtrType)(v)
}

func (*keyVaultKeyReferenceSourceVaultPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**KeyVaultKeyReferenceSourceVault)(nil)).Elem()
}

func (i *keyVaultKeyReferenceSourceVaultPtrType) ToKeyVaultKeyReferenceSourceVaultPtrOutput() KeyVaultKeyReferenceSourceVaultPtrOutput {
	return i.ToKeyVaultKeyReferenceSourceVaultPtrOutputWithContext(context.Background())
}

func (i *keyVaultKeyReferenceSourceVaultPtrType) ToKeyVaultKeyReferenceSourceVaultPtrOutputWithContext(ctx context.Context) KeyVaultKeyReferenceSourceVaultPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KeyVaultKeyReferenceSourceVaultPtrOutput)
}

// Describes a resource Id to source Key Vault.
type KeyVaultKeyReferenceSourceVaultOutput struct{ *pulumi.OutputState }

func (KeyVaultKeyReferenceSourceVaultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KeyVaultKeyReferenceSourceVault)(nil)).Elem()
}

func (o KeyVaultKeyReferenceSourceVaultOutput) ToKeyVaultKeyReferenceSourceVaultOutput() KeyVaultKeyReferenceSourceVaultOutput {
	return o
}

func (o KeyVaultKeyReferenceSourceVaultOutput) ToKeyVaultKeyReferenceSourceVaultOutputWithContext(ctx context.Context) KeyVaultKeyReferenceSourceVaultOutput {
	return o
}

func (o KeyVaultKeyReferenceSourceVaultOutput) ToKeyVaultKeyReferenceSourceVaultPtrOutput() KeyVaultKeyReferenceSourceVaultPtrOutput {
	return o.ToKeyVaultKeyReferenceSourceVaultPtrOutputWithContext(context.Background())
}

func (o KeyVaultKeyReferenceSourceVaultOutput) ToKeyVaultKeyReferenceSourceVaultPtrOutputWithContext(ctx context.Context) KeyVaultKeyReferenceSourceVaultPtrOutput {
	return o.ApplyT(func(v KeyVaultKeyReferenceSourceVault) *KeyVaultKeyReferenceSourceVault {
		return &v
	}).(KeyVaultKeyReferenceSourceVaultPtrOutput)
}

// Resource Id.
func (o KeyVaultKeyReferenceSourceVaultOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KeyVaultKeyReferenceSourceVault) *string { return v.Id }).(pulumi.StringPtrOutput)
}

type KeyVaultKeyReferenceSourceVaultPtrOutput struct{ *pulumi.OutputState }

func (KeyVaultKeyReferenceSourceVaultPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KeyVaultKeyReferenceSourceVault)(nil)).Elem()
}

func (o KeyVaultKeyReferenceSourceVaultPtrOutput) ToKeyVaultKeyReferenceSourceVaultPtrOutput() KeyVaultKeyReferenceSourceVaultPtrOutput {
	return o
}

func (o KeyVaultKeyReferenceSourceVaultPtrOutput) ToKeyVaultKeyReferenceSourceVaultPtrOutputWithContext(ctx context.Context) KeyVaultKeyReferenceSourceVaultPtrOutput {
	return o
}

func (o KeyVaultKeyReferenceSourceVaultPtrOutput) Elem() KeyVaultKeyReferenceSourceVaultOutput {
	return o.ApplyT(func(v *KeyVaultKeyReferenceSourceVault) KeyVaultKeyReferenceSourceVault { return *v }).(KeyVaultKeyReferenceSourceVaultOutput)
}

// Resource Id.
func (o KeyVaultKeyReferenceSourceVaultPtrOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KeyVaultKeyReferenceSourceVault) *string {
		if v == nil {
			return nil
		}
		return v.Id
	}).(pulumi.StringPtrOutput)
}

// A namespace junction.
type NamespaceJunction struct {
	// Namespace path on a Cache for a Storage Target.
	NamespacePath *string `pulumi:"namespacePath"`
	// Name of the access policy applied to this junction.
	NfsAccessPolicy *string `pulumi:"nfsAccessPolicy"`
	// NFS export where targetPath exists.
	NfsExport *string `pulumi:"nfsExport"`
	// Path in Storage Target to which namespacePath points.
	TargetPath *string `pulumi:"targetPath"`
}

// NamespaceJunctionInput is an input type that accepts NamespaceJunctionArgs and NamespaceJunctionOutput values.
// You can construct a concrete instance of `NamespaceJunctionInput` via:
//
//          NamespaceJunctionArgs{...}
type NamespaceJunctionInput interface {
	pulumi.Input

	ToNamespaceJunctionOutput() NamespaceJunctionOutput
	ToNamespaceJunctionOutputWithContext(context.Context) NamespaceJunctionOutput
}

// A namespace junction.
type NamespaceJunctionArgs struct {
	// Namespace path on a Cache for a Storage Target.
	NamespacePath pulumi.StringPtrInput `pulumi:"namespacePath"`
	// Name of the access policy applied to this junction.
	NfsAccessPolicy pulumi.StringPtrInput `pulumi:"nfsAccessPolicy"`
	// NFS export where targetPath exists.
	NfsExport pulumi.StringPtrInput `pulumi:"nfsExport"`
	// Path in Storage Target to which namespacePath points.
	TargetPath pulumi.StringPtrInput `pulumi:"targetPath"`
}

func (NamespaceJunctionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NamespaceJunction)(nil)).Elem()
}

func (i NamespaceJunctionArgs) ToNamespaceJunctionOutput() NamespaceJunctionOutput {
	return i.ToNamespaceJunctionOutputWithContext(context.Background())
}

func (i NamespaceJunctionArgs) ToNamespaceJunctionOutputWithContext(ctx context.Context) NamespaceJunctionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NamespaceJunctionOutput)
}

// NamespaceJunctionArrayInput is an input type that accepts NamespaceJunctionArray and NamespaceJunctionArrayOutput values.
// You can construct a concrete instance of `NamespaceJunctionArrayInput` via:
//
//          NamespaceJunctionArray{ NamespaceJunctionArgs{...} }
type NamespaceJunctionArrayInput interface {
	pulumi.Input

	ToNamespaceJunctionArrayOutput() NamespaceJunctionArrayOutput
	ToNamespaceJunctionArrayOutputWithContext(context.Context) NamespaceJunctionArrayOutput
}

type NamespaceJunctionArray []NamespaceJunctionInput

func (NamespaceJunctionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NamespaceJunction)(nil)).Elem()
}

func (i NamespaceJunctionArray) ToNamespaceJunctionArrayOutput() NamespaceJunctionArrayOutput {
	return i.ToNamespaceJunctionArrayOutputWithContext(context.Background())
}

func (i NamespaceJunctionArray) ToNamespaceJunctionArrayOutputWithContext(ctx context.Context) NamespaceJunctionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NamespaceJunctionArrayOutput)
}

// A namespace junction.
type NamespaceJunctionOutput struct{ *pulumi.OutputState }

func (NamespaceJunctionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NamespaceJunction)(nil)).Elem()
}

func (o NamespaceJunctionOutput) ToNamespaceJunctionOutput() NamespaceJunctionOutput {
	return o
}

func (o NamespaceJunctionOutput) ToNamespaceJunctionOutputWithContext(ctx context.Context) NamespaceJunctionOutput {
	return o
}

// Namespace path on a Cache for a Storage Target.
func (o NamespaceJunctionOutput) NamespacePath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NamespaceJunction) *string { return v.NamespacePath }).(pulumi.StringPtrOutput)
}

// Name of the access policy applied to this junction.
func (o NamespaceJunctionOutput) NfsAccessPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NamespaceJunction) *string { return v.NfsAccessPolicy }).(pulumi.StringPtrOutput)
}

// NFS export where targetPath exists.
func (o NamespaceJunctionOutput) NfsExport() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NamespaceJunction) *string { return v.NfsExport }).(pulumi.StringPtrOutput)
}

// Path in Storage Target to which namespacePath points.
func (o NamespaceJunctionOutput) TargetPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NamespaceJunction) *string { return v.TargetPath }).(pulumi.StringPtrOutput)
}

type NamespaceJunctionArrayOutput struct{ *pulumi.OutputState }

func (NamespaceJunctionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NamespaceJunction)(nil)).Elem()
}

func (o NamespaceJunctionArrayOutput) ToNamespaceJunctionArrayOutput() NamespaceJunctionArrayOutput {
	return o
}

func (o NamespaceJunctionArrayOutput) ToNamespaceJunctionArrayOutputWithContext(ctx context.Context) NamespaceJunctionArrayOutput {
	return o
}

func (o NamespaceJunctionArrayOutput) Index(i pulumi.IntInput) NamespaceJunctionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) NamespaceJunction {
		return vs[0].([]NamespaceJunction)[vs[1].(int)]
	}).(NamespaceJunctionOutput)
}

// A namespace junction.
type NamespaceJunctionInvokeResponse struct {
	// Namespace path on a Cache for a Storage Target.
	NamespacePath *string `pulumi:"namespacePath"`
	// Name of the access policy applied to this junction.
	NfsAccessPolicy *string `pulumi:"nfsAccessPolicy"`
	// NFS export where targetPath exists.
	NfsExport *string `pulumi:"nfsExport"`
	// Path in Storage Target to which namespacePath points.
	TargetPath *string `pulumi:"targetPath"`
}

// NamespaceJunctionInvokeResponseInput is an input type that accepts NamespaceJunctionInvokeResponseArgs and NamespaceJunctionInvokeResponseOutput values.
// You can construct a concrete instance of `NamespaceJunctionInvokeResponseInput` via:
//
//          NamespaceJunctionInvokeResponseArgs{...}
type NamespaceJunctionInvokeResponseInput interface {
	pulumi.Input

	ToNamespaceJunctionInvokeResponseOutput() NamespaceJunctionInvokeResponseOutput
	ToNamespaceJunctionInvokeResponseOutputWithContext(context.Context) NamespaceJunctionInvokeResponseOutput
}

// A namespace junction.
type NamespaceJunctionInvokeResponseArgs struct {
	// Namespace path on a Cache for a Storage Target.
	NamespacePath pulumi.StringPtrInput `pulumi:"namespacePath"`
	// Name of the access policy applied to this junction.
	NfsAccessPolicy pulumi.StringPtrInput `pulumi:"nfsAccessPolicy"`
	// NFS export where targetPath exists.
	NfsExport pulumi.StringPtrInput `pulumi:"nfsExport"`
	// Path in Storage Target to which namespacePath points.
	TargetPath pulumi.StringPtrInput `pulumi:"targetPath"`
}

func (NamespaceJunctionInvokeResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NamespaceJunctionInvokeResponse)(nil)).Elem()
}

func (i NamespaceJunctionInvokeResponseArgs) ToNamespaceJunctionInvokeResponseOutput() NamespaceJunctionInvokeResponseOutput {
	return i.ToNamespaceJunctionInvokeResponseOutputWithContext(context.Background())
}

func (i NamespaceJunctionInvokeResponseArgs) ToNamespaceJunctionInvokeResponseOutputWithContext(ctx context.Context) NamespaceJunctionInvokeResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NamespaceJunctionInvokeResponseOutput)
}

// NamespaceJunctionInvokeResponseArrayInput is an input type that accepts NamespaceJunctionInvokeResponseArray and NamespaceJunctionInvokeResponseArrayOutput values.
// You can construct a concrete instance of `NamespaceJunctionInvokeResponseArrayInput` via:
//
//          NamespaceJunctionInvokeResponseArray{ NamespaceJunctionInvokeResponseArgs{...} }
type NamespaceJunctionInvokeResponseArrayInput interface {
	pulumi.Input

	ToNamespaceJunctionInvokeResponseArrayOutput() NamespaceJunctionInvokeResponseArrayOutput
	ToNamespaceJunctionInvokeResponseArrayOutputWithContext(context.Context) NamespaceJunctionInvokeResponseArrayOutput
}

type NamespaceJunctionInvokeResponseArray []NamespaceJunctionInvokeResponseInput

func (NamespaceJunctionInvokeResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NamespaceJunctionInvokeResponse)(nil)).Elem()
}

func (i NamespaceJunctionInvokeResponseArray) ToNamespaceJunctionInvokeResponseArrayOutput() NamespaceJunctionInvokeResponseArrayOutput {
	return i.ToNamespaceJunctionInvokeResponseArrayOutputWithContext(context.Background())
}

func (i NamespaceJunctionInvokeResponseArray) ToNamespaceJunctionInvokeResponseArrayOutputWithContext(ctx context.Context) NamespaceJunctionInvokeResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NamespaceJunctionInvokeResponseArrayOutput)
}

// A namespace junction.
type NamespaceJunctionInvokeResponseOutput struct{ *pulumi.OutputState }

func (NamespaceJunctionInvokeResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NamespaceJunctionInvokeResponse)(nil)).Elem()
}

func (o NamespaceJunctionInvokeResponseOutput) ToNamespaceJunctionInvokeResponseOutput() NamespaceJunctionInvokeResponseOutput {
	return o
}

func (o NamespaceJunctionInvokeResponseOutput) ToNamespaceJunctionInvokeResponseOutputWithContext(ctx context.Context) NamespaceJunctionInvokeResponseOutput {
	return o
}

// Namespace path on a Cache for a Storage Target.
func (o NamespaceJunctionInvokeResponseOutput) NamespacePath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NamespaceJunctionInvokeResponse) *string { return v.NamespacePath }).(pulumi.StringPtrOutput)
}

// Name of the access policy applied to this junction.
func (o NamespaceJunctionInvokeResponseOutput) NfsAccessPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NamespaceJunctionInvokeResponse) *string { return v.NfsAccessPolicy }).(pulumi.StringPtrOutput)
}

// NFS export where targetPath exists.
func (o NamespaceJunctionInvokeResponseOutput) NfsExport() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NamespaceJunctionInvokeResponse) *string { return v.NfsExport }).(pulumi.StringPtrOutput)
}

// Path in Storage Target to which namespacePath points.
func (o NamespaceJunctionInvokeResponseOutput) TargetPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NamespaceJunctionInvokeResponse) *string { return v.TargetPath }).(pulumi.StringPtrOutput)
}

type NamespaceJunctionInvokeResponseArrayOutput struct{ *pulumi.OutputState }

func (NamespaceJunctionInvokeResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NamespaceJunctionInvokeResponse)(nil)).Elem()
}

func (o NamespaceJunctionInvokeResponseArrayOutput) ToNamespaceJunctionInvokeResponseArrayOutput() NamespaceJunctionInvokeResponseArrayOutput {
	return o
}

func (o NamespaceJunctionInvokeResponseArrayOutput) ToNamespaceJunctionInvokeResponseArrayOutputWithContext(ctx context.Context) NamespaceJunctionInvokeResponseArrayOutput {
	return o
}

func (o NamespaceJunctionInvokeResponseArrayOutput) Index(i pulumi.IntInput) NamespaceJunctionInvokeResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) NamespaceJunctionInvokeResponse {
		return vs[0].([]NamespaceJunctionInvokeResponse)[vs[1].(int)]
	}).(NamespaceJunctionInvokeResponseOutput)
}

// A namespace junction.
type NamespaceJunctionResponse struct {
	// Namespace path on a Cache for a Storage Target.
	NamespacePath *string `pulumi:"namespacePath"`
	// Name of the access policy applied to this junction.
	NfsAccessPolicy *string `pulumi:"nfsAccessPolicy"`
	// NFS export where targetPath exists.
	NfsExport *string `pulumi:"nfsExport"`
	// Path in Storage Target to which namespacePath points.
	TargetPath *string `pulumi:"targetPath"`
}

// NamespaceJunctionResponseInput is an input type that accepts NamespaceJunctionResponseArgs and NamespaceJunctionResponseOutput values.
// You can construct a concrete instance of `NamespaceJunctionResponseInput` via:
//
//          NamespaceJunctionResponseArgs{...}
type NamespaceJunctionResponseInput interface {
	pulumi.Input

	ToNamespaceJunctionResponseOutput() NamespaceJunctionResponseOutput
	ToNamespaceJunctionResponseOutputWithContext(context.Context) NamespaceJunctionResponseOutput
}

// A namespace junction.
type NamespaceJunctionResponseArgs struct {
	// Namespace path on a Cache for a Storage Target.
	NamespacePath pulumi.StringPtrInput `pulumi:"namespacePath"`
	// Name of the access policy applied to this junction.
	NfsAccessPolicy pulumi.StringPtrInput `pulumi:"nfsAccessPolicy"`
	// NFS export where targetPath exists.
	NfsExport pulumi.StringPtrInput `pulumi:"nfsExport"`
	// Path in Storage Target to which namespacePath points.
	TargetPath pulumi.StringPtrInput `pulumi:"targetPath"`
}

func (NamespaceJunctionResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NamespaceJunctionResponse)(nil)).Elem()
}

func (i NamespaceJunctionResponseArgs) ToNamespaceJunctionResponseOutput() NamespaceJunctionResponseOutput {
	return i.ToNamespaceJunctionResponseOutputWithContext(context.Background())
}

func (i NamespaceJunctionResponseArgs) ToNamespaceJunctionResponseOutputWithContext(ctx context.Context) NamespaceJunctionResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NamespaceJunctionResponseOutput)
}

// NamespaceJunctionResponseArrayInput is an input type that accepts NamespaceJunctionResponseArray and NamespaceJunctionResponseArrayOutput values.
// You can construct a concrete instance of `NamespaceJunctionResponseArrayInput` via:
//
//          NamespaceJunctionResponseArray{ NamespaceJunctionResponseArgs{...} }
type NamespaceJunctionResponseArrayInput interface {
	pulumi.Input

	ToNamespaceJunctionResponseArrayOutput() NamespaceJunctionResponseArrayOutput
	ToNamespaceJunctionResponseArrayOutputWithContext(context.Context) NamespaceJunctionResponseArrayOutput
}

type NamespaceJunctionResponseArray []NamespaceJunctionResponseInput

func (NamespaceJunctionResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NamespaceJunctionResponse)(nil)).Elem()
}

func (i NamespaceJunctionResponseArray) ToNamespaceJunctionResponseArrayOutput() NamespaceJunctionResponseArrayOutput {
	return i.ToNamespaceJunctionResponseArrayOutputWithContext(context.Background())
}

func (i NamespaceJunctionResponseArray) ToNamespaceJunctionResponseArrayOutputWithContext(ctx context.Context) NamespaceJunctionResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NamespaceJunctionResponseArrayOutput)
}

// A namespace junction.
type NamespaceJunctionResponseOutput struct{ *pulumi.OutputState }

func (NamespaceJunctionResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NamespaceJunctionResponse)(nil)).Elem()
}

func (o NamespaceJunctionResponseOutput) ToNamespaceJunctionResponseOutput() NamespaceJunctionResponseOutput {
	return o
}

func (o NamespaceJunctionResponseOutput) ToNamespaceJunctionResponseOutputWithContext(ctx context.Context) NamespaceJunctionResponseOutput {
	return o
}

// Namespace path on a Cache for a Storage Target.
func (o NamespaceJunctionResponseOutput) NamespacePath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NamespaceJunctionResponse) *string { return v.NamespacePath }).(pulumi.StringPtrOutput)
}

// Name of the access policy applied to this junction.
func (o NamespaceJunctionResponseOutput) NfsAccessPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NamespaceJunctionResponse) *string { return v.NfsAccessPolicy }).(pulumi.StringPtrOutput)
}

// NFS export where targetPath exists.
func (o NamespaceJunctionResponseOutput) NfsExport() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NamespaceJunctionResponse) *string { return v.NfsExport }).(pulumi.StringPtrOutput)
}

// Path in Storage Target to which namespacePath points.
func (o NamespaceJunctionResponseOutput) TargetPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NamespaceJunctionResponse) *string { return v.TargetPath }).(pulumi.StringPtrOutput)
}

type NamespaceJunctionResponseArrayOutput struct{ *pulumi.OutputState }

func (NamespaceJunctionResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NamespaceJunctionResponse)(nil)).Elem()
}

func (o NamespaceJunctionResponseArrayOutput) ToNamespaceJunctionResponseArrayOutput() NamespaceJunctionResponseArrayOutput {
	return o
}

func (o NamespaceJunctionResponseArrayOutput) ToNamespaceJunctionResponseArrayOutputWithContext(ctx context.Context) NamespaceJunctionResponseArrayOutput {
	return o
}

func (o NamespaceJunctionResponseArrayOutput) Index(i pulumi.IntInput) NamespaceJunctionResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) NamespaceJunctionResponse {
		return vs[0].([]NamespaceJunctionResponse)[vs[1].(int)]
	}).(NamespaceJunctionResponseOutput)
}

// Properties pertaining to the Nfs3Target
type Nfs3Target struct {
	// IP address or host name of an NFSv3 host (e.g., 10.0.44.44).
	Target *string `pulumi:"target"`
	// Identifies the usage model to be used for this Storage Target. Get choices from .../usageModels
	UsageModel *string `pulumi:"usageModel"`
}

// Nfs3TargetInput is an input type that accepts Nfs3TargetArgs and Nfs3TargetOutput values.
// You can construct a concrete instance of `Nfs3TargetInput` via:
//
//          Nfs3TargetArgs{...}
type Nfs3TargetInput interface {
	pulumi.Input

	ToNfs3TargetOutput() Nfs3TargetOutput
	ToNfs3TargetOutputWithContext(context.Context) Nfs3TargetOutput
}

// Properties pertaining to the Nfs3Target
type Nfs3TargetArgs struct {
	// IP address or host name of an NFSv3 host (e.g., 10.0.44.44).
	Target pulumi.StringPtrInput `pulumi:"target"`
	// Identifies the usage model to be used for this Storage Target. Get choices from .../usageModels
	UsageModel pulumi.StringPtrInput `pulumi:"usageModel"`
}

func (Nfs3TargetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Nfs3Target)(nil)).Elem()
}

func (i Nfs3TargetArgs) ToNfs3TargetOutput() Nfs3TargetOutput {
	return i.ToNfs3TargetOutputWithContext(context.Background())
}

func (i Nfs3TargetArgs) ToNfs3TargetOutputWithContext(ctx context.Context) Nfs3TargetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(Nfs3TargetOutput)
}

func (i Nfs3TargetArgs) ToNfs3TargetPtrOutput() Nfs3TargetPtrOutput {
	return i.ToNfs3TargetPtrOutputWithContext(context.Background())
}

func (i Nfs3TargetArgs) ToNfs3TargetPtrOutputWithContext(ctx context.Context) Nfs3TargetPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(Nfs3TargetOutput).ToNfs3TargetPtrOutputWithContext(ctx)
}

// Nfs3TargetPtrInput is an input type that accepts Nfs3TargetArgs, Nfs3TargetPtr and Nfs3TargetPtrOutput values.
// You can construct a concrete instance of `Nfs3TargetPtrInput` via:
//
//          Nfs3TargetArgs{...}
//
//  or:
//
//          nil
type Nfs3TargetPtrInput interface {
	pulumi.Input

	ToNfs3TargetPtrOutput() Nfs3TargetPtrOutput
	ToNfs3TargetPtrOutputWithContext(context.Context) Nfs3TargetPtrOutput
}

type nfs3TargetPtrType Nfs3TargetArgs

func Nfs3TargetPtr(v *Nfs3TargetArgs) Nfs3TargetPtrInput {
	return (*nfs3TargetPtrType)(v)
}

func (*nfs3TargetPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Nfs3Target)(nil)).Elem()
}

func (i *nfs3TargetPtrType) ToNfs3TargetPtrOutput() Nfs3TargetPtrOutput {
	return i.ToNfs3TargetPtrOutputWithContext(context.Background())
}

func (i *nfs3TargetPtrType) ToNfs3TargetPtrOutputWithContext(ctx context.Context) Nfs3TargetPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(Nfs3TargetPtrOutput)
}

// Properties pertaining to the Nfs3Target
type Nfs3TargetOutput struct{ *pulumi.OutputState }

func (Nfs3TargetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Nfs3Target)(nil)).Elem()
}

func (o Nfs3TargetOutput) ToNfs3TargetOutput() Nfs3TargetOutput {
	return o
}

func (o Nfs3TargetOutput) ToNfs3TargetOutputWithContext(ctx context.Context) Nfs3TargetOutput {
	return o
}

func (o Nfs3TargetOutput) ToNfs3TargetPtrOutput() Nfs3TargetPtrOutput {
	return o.ToNfs3TargetPtrOutputWithContext(context.Background())
}

func (o Nfs3TargetOutput) ToNfs3TargetPtrOutputWithContext(ctx context.Context) Nfs3TargetPtrOutput {
	return o.ApplyT(func(v Nfs3Target) *Nfs3Target {
		return &v
	}).(Nfs3TargetPtrOutput)
}

// IP address or host name of an NFSv3 host (e.g., 10.0.44.44).
func (o Nfs3TargetOutput) Target() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Nfs3Target) *string { return v.Target }).(pulumi.StringPtrOutput)
}

// Identifies the usage model to be used for this Storage Target. Get choices from .../usageModels
func (o Nfs3TargetOutput) UsageModel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Nfs3Target) *string { return v.UsageModel }).(pulumi.StringPtrOutput)
}

type Nfs3TargetPtrOutput struct{ *pulumi.OutputState }

func (Nfs3TargetPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Nfs3Target)(nil)).Elem()
}

func (o Nfs3TargetPtrOutput) ToNfs3TargetPtrOutput() Nfs3TargetPtrOutput {
	return o
}

func (o Nfs3TargetPtrOutput) ToNfs3TargetPtrOutputWithContext(ctx context.Context) Nfs3TargetPtrOutput {
	return o
}

func (o Nfs3TargetPtrOutput) Elem() Nfs3TargetOutput {
	return o.ApplyT(func(v *Nfs3Target) Nfs3Target { return *v }).(Nfs3TargetOutput)
}

// IP address or host name of an NFSv3 host (e.g., 10.0.44.44).
func (o Nfs3TargetPtrOutput) Target() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Nfs3Target) *string {
		if v == nil {
			return nil
		}
		return v.Target
	}).(pulumi.StringPtrOutput)
}

// Identifies the usage model to be used for this Storage Target. Get choices from .../usageModels
func (o Nfs3TargetPtrOutput) UsageModel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Nfs3Target) *string {
		if v == nil {
			return nil
		}
		return v.UsageModel
	}).(pulumi.StringPtrOutput)
}

// Properties pertaining to the Nfs3Target
type Nfs3TargetInvokeResponse struct {
	// IP address or host name of an NFSv3 host (e.g., 10.0.44.44).
	Target *string `pulumi:"target"`
	// Identifies the usage model to be used for this Storage Target. Get choices from .../usageModels
	UsageModel *string `pulumi:"usageModel"`
}

// Nfs3TargetInvokeResponseInput is an input type that accepts Nfs3TargetInvokeResponseArgs and Nfs3TargetInvokeResponseOutput values.
// You can construct a concrete instance of `Nfs3TargetInvokeResponseInput` via:
//
//          Nfs3TargetInvokeResponseArgs{...}
type Nfs3TargetInvokeResponseInput interface {
	pulumi.Input

	ToNfs3TargetInvokeResponseOutput() Nfs3TargetInvokeResponseOutput
	ToNfs3TargetInvokeResponseOutputWithContext(context.Context) Nfs3TargetInvokeResponseOutput
}

// Properties pertaining to the Nfs3Target
type Nfs3TargetInvokeResponseArgs struct {
	// IP address or host name of an NFSv3 host (e.g., 10.0.44.44).
	Target pulumi.StringPtrInput `pulumi:"target"`
	// Identifies the usage model to be used for this Storage Target. Get choices from .../usageModels
	UsageModel pulumi.StringPtrInput `pulumi:"usageModel"`
}

func (Nfs3TargetInvokeResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Nfs3TargetInvokeResponse)(nil)).Elem()
}

func (i Nfs3TargetInvokeResponseArgs) ToNfs3TargetInvokeResponseOutput() Nfs3TargetInvokeResponseOutput {
	return i.ToNfs3TargetInvokeResponseOutputWithContext(context.Background())
}

func (i Nfs3TargetInvokeResponseArgs) ToNfs3TargetInvokeResponseOutputWithContext(ctx context.Context) Nfs3TargetInvokeResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(Nfs3TargetInvokeResponseOutput)
}

// Properties pertaining to the Nfs3Target
type Nfs3TargetInvokeResponseOutput struct{ *pulumi.OutputState }

func (Nfs3TargetInvokeResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Nfs3TargetInvokeResponse)(nil)).Elem()
}

func (o Nfs3TargetInvokeResponseOutput) ToNfs3TargetInvokeResponseOutput() Nfs3TargetInvokeResponseOutput {
	return o
}

func (o Nfs3TargetInvokeResponseOutput) ToNfs3TargetInvokeResponseOutputWithContext(ctx context.Context) Nfs3TargetInvokeResponseOutput {
	return o
}

// IP address or host name of an NFSv3 host (e.g., 10.0.44.44).
func (o Nfs3TargetInvokeResponseOutput) Target() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Nfs3TargetInvokeResponse) *string { return v.Target }).(pulumi.StringPtrOutput)
}

// Identifies the usage model to be used for this Storage Target. Get choices from .../usageModels
func (o Nfs3TargetInvokeResponseOutput) UsageModel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Nfs3TargetInvokeResponse) *string { return v.UsageModel }).(pulumi.StringPtrOutput)
}

// Properties pertaining to the Nfs3Target
type Nfs3TargetResponse struct {
	// IP address or host name of an NFSv3 host (e.g., 10.0.44.44).
	Target *string `pulumi:"target"`
	// Identifies the usage model to be used for this Storage Target. Get choices from .../usageModels
	UsageModel *string `pulumi:"usageModel"`
}

// Nfs3TargetResponseInput is an input type that accepts Nfs3TargetResponseArgs and Nfs3TargetResponseOutput values.
// You can construct a concrete instance of `Nfs3TargetResponseInput` via:
//
//          Nfs3TargetResponseArgs{...}
type Nfs3TargetResponseInput interface {
	pulumi.Input

	ToNfs3TargetResponseOutput() Nfs3TargetResponseOutput
	ToNfs3TargetResponseOutputWithContext(context.Context) Nfs3TargetResponseOutput
}

// Properties pertaining to the Nfs3Target
type Nfs3TargetResponseArgs struct {
	// IP address or host name of an NFSv3 host (e.g., 10.0.44.44).
	Target pulumi.StringPtrInput `pulumi:"target"`
	// Identifies the usage model to be used for this Storage Target. Get choices from .../usageModels
	UsageModel pulumi.StringPtrInput `pulumi:"usageModel"`
}

func (Nfs3TargetResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Nfs3TargetResponse)(nil)).Elem()
}

func (i Nfs3TargetResponseArgs) ToNfs3TargetResponseOutput() Nfs3TargetResponseOutput {
	return i.ToNfs3TargetResponseOutputWithContext(context.Background())
}

func (i Nfs3TargetResponseArgs) ToNfs3TargetResponseOutputWithContext(ctx context.Context) Nfs3TargetResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(Nfs3TargetResponseOutput)
}

func (i Nfs3TargetResponseArgs) ToNfs3TargetResponsePtrOutput() Nfs3TargetResponsePtrOutput {
	return i.ToNfs3TargetResponsePtrOutputWithContext(context.Background())
}

func (i Nfs3TargetResponseArgs) ToNfs3TargetResponsePtrOutputWithContext(ctx context.Context) Nfs3TargetResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(Nfs3TargetResponseOutput).ToNfs3TargetResponsePtrOutputWithContext(ctx)
}

// Nfs3TargetResponsePtrInput is an input type that accepts Nfs3TargetResponseArgs, Nfs3TargetResponsePtr and Nfs3TargetResponsePtrOutput values.
// You can construct a concrete instance of `Nfs3TargetResponsePtrInput` via:
//
//          Nfs3TargetResponseArgs{...}
//
//  or:
//
//          nil
type Nfs3TargetResponsePtrInput interface {
	pulumi.Input

	ToNfs3TargetResponsePtrOutput() Nfs3TargetResponsePtrOutput
	ToNfs3TargetResponsePtrOutputWithContext(context.Context) Nfs3TargetResponsePtrOutput
}

type nfs3TargetResponsePtrType Nfs3TargetResponseArgs

func Nfs3TargetResponsePtr(v *Nfs3TargetResponseArgs) Nfs3TargetResponsePtrInput {
	return (*nfs3TargetResponsePtrType)(v)
}

func (*nfs3TargetResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Nfs3TargetResponse)(nil)).Elem()
}

func (i *nfs3TargetResponsePtrType) ToNfs3TargetResponsePtrOutput() Nfs3TargetResponsePtrOutput {
	return i.ToNfs3TargetResponsePtrOutputWithContext(context.Background())
}

func (i *nfs3TargetResponsePtrType) ToNfs3TargetResponsePtrOutputWithContext(ctx context.Context) Nfs3TargetResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(Nfs3TargetResponsePtrOutput)
}

// Properties pertaining to the Nfs3Target
type Nfs3TargetResponseOutput struct{ *pulumi.OutputState }

func (Nfs3TargetResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Nfs3TargetResponse)(nil)).Elem()
}

func (o Nfs3TargetResponseOutput) ToNfs3TargetResponseOutput() Nfs3TargetResponseOutput {
	return o
}

func (o Nfs3TargetResponseOutput) ToNfs3TargetResponseOutputWithContext(ctx context.Context) Nfs3TargetResponseOutput {
	return o
}

func (o Nfs3TargetResponseOutput) ToNfs3TargetResponsePtrOutput() Nfs3TargetResponsePtrOutput {
	return o.ToNfs3TargetResponsePtrOutputWithContext(context.Background())
}

func (o Nfs3TargetResponseOutput) ToNfs3TargetResponsePtrOutputWithContext(ctx context.Context) Nfs3TargetResponsePtrOutput {
	return o.ApplyT(func(v Nfs3TargetResponse) *Nfs3TargetResponse {
		return &v
	}).(Nfs3TargetResponsePtrOutput)
}

// IP address or host name of an NFSv3 host (e.g., 10.0.44.44).
func (o Nfs3TargetResponseOutput) Target() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Nfs3TargetResponse) *string { return v.Target }).(pulumi.StringPtrOutput)
}

// Identifies the usage model to be used for this Storage Target. Get choices from .../usageModels
func (o Nfs3TargetResponseOutput) UsageModel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Nfs3TargetResponse) *string { return v.UsageModel }).(pulumi.StringPtrOutput)
}

type Nfs3TargetResponsePtrOutput struct{ *pulumi.OutputState }

func (Nfs3TargetResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Nfs3TargetResponse)(nil)).Elem()
}

func (o Nfs3TargetResponsePtrOutput) ToNfs3TargetResponsePtrOutput() Nfs3TargetResponsePtrOutput {
	return o
}

func (o Nfs3TargetResponsePtrOutput) ToNfs3TargetResponsePtrOutputWithContext(ctx context.Context) Nfs3TargetResponsePtrOutput {
	return o
}

func (o Nfs3TargetResponsePtrOutput) Elem() Nfs3TargetResponseOutput {
	return o.ApplyT(func(v *Nfs3TargetResponse) Nfs3TargetResponse { return *v }).(Nfs3TargetResponseOutput)
}

// IP address or host name of an NFSv3 host (e.g., 10.0.44.44).
func (o Nfs3TargetResponsePtrOutput) Target() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Nfs3TargetResponse) *string {
		if v == nil {
			return nil
		}
		return v.Target
	}).(pulumi.StringPtrOutput)
}

// Identifies the usage model to be used for this Storage Target. Get choices from .../usageModels
func (o Nfs3TargetResponsePtrOutput) UsageModel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Nfs3TargetResponse) *string {
		if v == nil {
			return nil
		}
		return v.UsageModel
	}).(pulumi.StringPtrOutput)
}

// A set of rules describing access policies applied to NFSv3 clients of the cache.
type NfsAccessPolicy struct {
	// The set of rules describing client accesses allowed under this policy.
	AccessRules []NfsAccessRule `pulumi:"accessRules"`
	// Name identifying this policy. Access Policy names are not case sensitive.
	Name string `pulumi:"name"`
}

// NfsAccessPolicyInput is an input type that accepts NfsAccessPolicyArgs and NfsAccessPolicyOutput values.
// You can construct a concrete instance of `NfsAccessPolicyInput` via:
//
//          NfsAccessPolicyArgs{...}
type NfsAccessPolicyInput interface {
	pulumi.Input

	ToNfsAccessPolicyOutput() NfsAccessPolicyOutput
	ToNfsAccessPolicyOutputWithContext(context.Context) NfsAccessPolicyOutput
}

// A set of rules describing access policies applied to NFSv3 clients of the cache.
type NfsAccessPolicyArgs struct {
	// The set of rules describing client accesses allowed under this policy.
	AccessRules NfsAccessRuleArrayInput `pulumi:"accessRules"`
	// Name identifying this policy. Access Policy names are not case sensitive.
	Name pulumi.StringInput `pulumi:"name"`
}

func (NfsAccessPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NfsAccessPolicy)(nil)).Elem()
}

func (i NfsAccessPolicyArgs) ToNfsAccessPolicyOutput() NfsAccessPolicyOutput {
	return i.ToNfsAccessPolicyOutputWithContext(context.Background())
}

func (i NfsAccessPolicyArgs) ToNfsAccessPolicyOutputWithContext(ctx context.Context) NfsAccessPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NfsAccessPolicyOutput)
}

// NfsAccessPolicyArrayInput is an input type that accepts NfsAccessPolicyArray and NfsAccessPolicyArrayOutput values.
// You can construct a concrete instance of `NfsAccessPolicyArrayInput` via:
//
//          NfsAccessPolicyArray{ NfsAccessPolicyArgs{...} }
type NfsAccessPolicyArrayInput interface {
	pulumi.Input

	ToNfsAccessPolicyArrayOutput() NfsAccessPolicyArrayOutput
	ToNfsAccessPolicyArrayOutputWithContext(context.Context) NfsAccessPolicyArrayOutput
}

type NfsAccessPolicyArray []NfsAccessPolicyInput

func (NfsAccessPolicyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NfsAccessPolicy)(nil)).Elem()
}

func (i NfsAccessPolicyArray) ToNfsAccessPolicyArrayOutput() NfsAccessPolicyArrayOutput {
	return i.ToNfsAccessPolicyArrayOutputWithContext(context.Background())
}

func (i NfsAccessPolicyArray) ToNfsAccessPolicyArrayOutputWithContext(ctx context.Context) NfsAccessPolicyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NfsAccessPolicyArrayOutput)
}

// A set of rules describing access policies applied to NFSv3 clients of the cache.
type NfsAccessPolicyOutput struct{ *pulumi.OutputState }

func (NfsAccessPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NfsAccessPolicy)(nil)).Elem()
}

func (o NfsAccessPolicyOutput) ToNfsAccessPolicyOutput() NfsAccessPolicyOutput {
	return o
}

func (o NfsAccessPolicyOutput) ToNfsAccessPolicyOutputWithContext(ctx context.Context) NfsAccessPolicyOutput {
	return o
}

// The set of rules describing client accesses allowed under this policy.
func (o NfsAccessPolicyOutput) AccessRules() NfsAccessRuleArrayOutput {
	return o.ApplyT(func(v NfsAccessPolicy) []NfsAccessRule { return v.AccessRules }).(NfsAccessRuleArrayOutput)
}

// Name identifying this policy. Access Policy names are not case sensitive.
func (o NfsAccessPolicyOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v NfsAccessPolicy) string { return v.Name }).(pulumi.StringOutput)
}

type NfsAccessPolicyArrayOutput struct{ *pulumi.OutputState }

func (NfsAccessPolicyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NfsAccessPolicy)(nil)).Elem()
}

func (o NfsAccessPolicyArrayOutput) ToNfsAccessPolicyArrayOutput() NfsAccessPolicyArrayOutput {
	return o
}

func (o NfsAccessPolicyArrayOutput) ToNfsAccessPolicyArrayOutputWithContext(ctx context.Context) NfsAccessPolicyArrayOutput {
	return o
}

func (o NfsAccessPolicyArrayOutput) Index(i pulumi.IntInput) NfsAccessPolicyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) NfsAccessPolicy {
		return vs[0].([]NfsAccessPolicy)[vs[1].(int)]
	}).(NfsAccessPolicyOutput)
}

// A set of rules describing access policies applied to NFSv3 clients of the cache.
type NfsAccessPolicyInvokeResponse struct {
	// The set of rules describing client accesses allowed under this policy.
	AccessRules []NfsAccessRuleInvokeResponse `pulumi:"accessRules"`
	// Name identifying this policy. Access Policy names are not case sensitive.
	Name string `pulumi:"name"`
}

// NfsAccessPolicyInvokeResponseInput is an input type that accepts NfsAccessPolicyInvokeResponseArgs and NfsAccessPolicyInvokeResponseOutput values.
// You can construct a concrete instance of `NfsAccessPolicyInvokeResponseInput` via:
//
//          NfsAccessPolicyInvokeResponseArgs{...}
type NfsAccessPolicyInvokeResponseInput interface {
	pulumi.Input

	ToNfsAccessPolicyInvokeResponseOutput() NfsAccessPolicyInvokeResponseOutput
	ToNfsAccessPolicyInvokeResponseOutputWithContext(context.Context) NfsAccessPolicyInvokeResponseOutput
}

// A set of rules describing access policies applied to NFSv3 clients of the cache.
type NfsAccessPolicyInvokeResponseArgs struct {
	// The set of rules describing client accesses allowed under this policy.
	AccessRules NfsAccessRuleInvokeResponseArrayInput `pulumi:"accessRules"`
	// Name identifying this policy. Access Policy names are not case sensitive.
	Name pulumi.StringInput `pulumi:"name"`
}

func (NfsAccessPolicyInvokeResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NfsAccessPolicyInvokeResponse)(nil)).Elem()
}

func (i NfsAccessPolicyInvokeResponseArgs) ToNfsAccessPolicyInvokeResponseOutput() NfsAccessPolicyInvokeResponseOutput {
	return i.ToNfsAccessPolicyInvokeResponseOutputWithContext(context.Background())
}

func (i NfsAccessPolicyInvokeResponseArgs) ToNfsAccessPolicyInvokeResponseOutputWithContext(ctx context.Context) NfsAccessPolicyInvokeResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NfsAccessPolicyInvokeResponseOutput)
}

// NfsAccessPolicyInvokeResponseArrayInput is an input type that accepts NfsAccessPolicyInvokeResponseArray and NfsAccessPolicyInvokeResponseArrayOutput values.
// You can construct a concrete instance of `NfsAccessPolicyInvokeResponseArrayInput` via:
//
//          NfsAccessPolicyInvokeResponseArray{ NfsAccessPolicyInvokeResponseArgs{...} }
type NfsAccessPolicyInvokeResponseArrayInput interface {
	pulumi.Input

	ToNfsAccessPolicyInvokeResponseArrayOutput() NfsAccessPolicyInvokeResponseArrayOutput
	ToNfsAccessPolicyInvokeResponseArrayOutputWithContext(context.Context) NfsAccessPolicyInvokeResponseArrayOutput
}

type NfsAccessPolicyInvokeResponseArray []NfsAccessPolicyInvokeResponseInput

func (NfsAccessPolicyInvokeResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NfsAccessPolicyInvokeResponse)(nil)).Elem()
}

func (i NfsAccessPolicyInvokeResponseArray) ToNfsAccessPolicyInvokeResponseArrayOutput() NfsAccessPolicyInvokeResponseArrayOutput {
	return i.ToNfsAccessPolicyInvokeResponseArrayOutputWithContext(context.Background())
}

func (i NfsAccessPolicyInvokeResponseArray) ToNfsAccessPolicyInvokeResponseArrayOutputWithContext(ctx context.Context) NfsAccessPolicyInvokeResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NfsAccessPolicyInvokeResponseArrayOutput)
}

// A set of rules describing access policies applied to NFSv3 clients of the cache.
type NfsAccessPolicyInvokeResponseOutput struct{ *pulumi.OutputState }

func (NfsAccessPolicyInvokeResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NfsAccessPolicyInvokeResponse)(nil)).Elem()
}

func (o NfsAccessPolicyInvokeResponseOutput) ToNfsAccessPolicyInvokeResponseOutput() NfsAccessPolicyInvokeResponseOutput {
	return o
}

func (o NfsAccessPolicyInvokeResponseOutput) ToNfsAccessPolicyInvokeResponseOutputWithContext(ctx context.Context) NfsAccessPolicyInvokeResponseOutput {
	return o
}

// The set of rules describing client accesses allowed under this policy.
func (o NfsAccessPolicyInvokeResponseOutput) AccessRules() NfsAccessRuleInvokeResponseArrayOutput {
	return o.ApplyT(func(v NfsAccessPolicyInvokeResponse) []NfsAccessRuleInvokeResponse { return v.AccessRules }).(NfsAccessRuleInvokeResponseArrayOutput)
}

// Name identifying this policy. Access Policy names are not case sensitive.
func (o NfsAccessPolicyInvokeResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v NfsAccessPolicyInvokeResponse) string { return v.Name }).(pulumi.StringOutput)
}

type NfsAccessPolicyInvokeResponseArrayOutput struct{ *pulumi.OutputState }

func (NfsAccessPolicyInvokeResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NfsAccessPolicyInvokeResponse)(nil)).Elem()
}

func (o NfsAccessPolicyInvokeResponseArrayOutput) ToNfsAccessPolicyInvokeResponseArrayOutput() NfsAccessPolicyInvokeResponseArrayOutput {
	return o
}

func (o NfsAccessPolicyInvokeResponseArrayOutput) ToNfsAccessPolicyInvokeResponseArrayOutputWithContext(ctx context.Context) NfsAccessPolicyInvokeResponseArrayOutput {
	return o
}

func (o NfsAccessPolicyInvokeResponseArrayOutput) Index(i pulumi.IntInput) NfsAccessPolicyInvokeResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) NfsAccessPolicyInvokeResponse {
		return vs[0].([]NfsAccessPolicyInvokeResponse)[vs[1].(int)]
	}).(NfsAccessPolicyInvokeResponseOutput)
}

// A set of rules describing access policies applied to NFSv3 clients of the cache.
type NfsAccessPolicyResponse struct {
	// The set of rules describing client accesses allowed under this policy.
	AccessRules []NfsAccessRuleResponse `pulumi:"accessRules"`
	// Name identifying this policy. Access Policy names are not case sensitive.
	Name string `pulumi:"name"`
}

// NfsAccessPolicyResponseInput is an input type that accepts NfsAccessPolicyResponseArgs and NfsAccessPolicyResponseOutput values.
// You can construct a concrete instance of `NfsAccessPolicyResponseInput` via:
//
//          NfsAccessPolicyResponseArgs{...}
type NfsAccessPolicyResponseInput interface {
	pulumi.Input

	ToNfsAccessPolicyResponseOutput() NfsAccessPolicyResponseOutput
	ToNfsAccessPolicyResponseOutputWithContext(context.Context) NfsAccessPolicyResponseOutput
}

// A set of rules describing access policies applied to NFSv3 clients of the cache.
type NfsAccessPolicyResponseArgs struct {
	// The set of rules describing client accesses allowed under this policy.
	AccessRules NfsAccessRuleResponseArrayInput `pulumi:"accessRules"`
	// Name identifying this policy. Access Policy names are not case sensitive.
	Name pulumi.StringInput `pulumi:"name"`
}

func (NfsAccessPolicyResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NfsAccessPolicyResponse)(nil)).Elem()
}

func (i NfsAccessPolicyResponseArgs) ToNfsAccessPolicyResponseOutput() NfsAccessPolicyResponseOutput {
	return i.ToNfsAccessPolicyResponseOutputWithContext(context.Background())
}

func (i NfsAccessPolicyResponseArgs) ToNfsAccessPolicyResponseOutputWithContext(ctx context.Context) NfsAccessPolicyResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NfsAccessPolicyResponseOutput)
}

// NfsAccessPolicyResponseArrayInput is an input type that accepts NfsAccessPolicyResponseArray and NfsAccessPolicyResponseArrayOutput values.
// You can construct a concrete instance of `NfsAccessPolicyResponseArrayInput` via:
//
//          NfsAccessPolicyResponseArray{ NfsAccessPolicyResponseArgs{...} }
type NfsAccessPolicyResponseArrayInput interface {
	pulumi.Input

	ToNfsAccessPolicyResponseArrayOutput() NfsAccessPolicyResponseArrayOutput
	ToNfsAccessPolicyResponseArrayOutputWithContext(context.Context) NfsAccessPolicyResponseArrayOutput
}

type NfsAccessPolicyResponseArray []NfsAccessPolicyResponseInput

func (NfsAccessPolicyResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NfsAccessPolicyResponse)(nil)).Elem()
}

func (i NfsAccessPolicyResponseArray) ToNfsAccessPolicyResponseArrayOutput() NfsAccessPolicyResponseArrayOutput {
	return i.ToNfsAccessPolicyResponseArrayOutputWithContext(context.Background())
}

func (i NfsAccessPolicyResponseArray) ToNfsAccessPolicyResponseArrayOutputWithContext(ctx context.Context) NfsAccessPolicyResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NfsAccessPolicyResponseArrayOutput)
}

// A set of rules describing access policies applied to NFSv3 clients of the cache.
type NfsAccessPolicyResponseOutput struct{ *pulumi.OutputState }

func (NfsAccessPolicyResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NfsAccessPolicyResponse)(nil)).Elem()
}

func (o NfsAccessPolicyResponseOutput) ToNfsAccessPolicyResponseOutput() NfsAccessPolicyResponseOutput {
	return o
}

func (o NfsAccessPolicyResponseOutput) ToNfsAccessPolicyResponseOutputWithContext(ctx context.Context) NfsAccessPolicyResponseOutput {
	return o
}

// The set of rules describing client accesses allowed under this policy.
func (o NfsAccessPolicyResponseOutput) AccessRules() NfsAccessRuleResponseArrayOutput {
	return o.ApplyT(func(v NfsAccessPolicyResponse) []NfsAccessRuleResponse { return v.AccessRules }).(NfsAccessRuleResponseArrayOutput)
}

// Name identifying this policy. Access Policy names are not case sensitive.
func (o NfsAccessPolicyResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v NfsAccessPolicyResponse) string { return v.Name }).(pulumi.StringOutput)
}

type NfsAccessPolicyResponseArrayOutput struct{ *pulumi.OutputState }

func (NfsAccessPolicyResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NfsAccessPolicyResponse)(nil)).Elem()
}

func (o NfsAccessPolicyResponseArrayOutput) ToNfsAccessPolicyResponseArrayOutput() NfsAccessPolicyResponseArrayOutput {
	return o
}

func (o NfsAccessPolicyResponseArrayOutput) ToNfsAccessPolicyResponseArrayOutputWithContext(ctx context.Context) NfsAccessPolicyResponseArrayOutput {
	return o
}

func (o NfsAccessPolicyResponseArrayOutput) Index(i pulumi.IntInput) NfsAccessPolicyResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) NfsAccessPolicyResponse {
		return vs[0].([]NfsAccessPolicyResponse)[vs[1].(int)]
	}).(NfsAccessPolicyResponseOutput)
}

// Rule to place restrictions on portions of the cache namespace being presented to clients.
type NfsAccessRule struct {
	// Access allowed by this rule.
	Access string `pulumi:"access"`
	// GID value that replaces 0 when rootSquash is true.
	AnonymousGID *string `pulumi:"anonymousGID"`
	// UID value that replaces 0 when rootSquash is true.
	AnonymousUID *string `pulumi:"anonymousUID"`
	// Filter applied to the scope for this rule. The filter's format depends on its scope. 'default' scope matches all clients and has no filter value. 'network' scope takes a filter in CIDR format (for example, 10.99.1.0/24). 'host' takes an IP address or fully qualified domain name as filter. If a client does not match any filter rule and there is no default rule, access is denied.
	Filter *string `pulumi:"filter"`
	// Map root accesses to anonymousUID and anonymousGID.
	RootSquash *bool `pulumi:"rootSquash"`
	// Scope for this rule. The scope and filter determine which clients match the rule.
	Scope string `pulumi:"scope"`
	// For the default policy, allow access to subdirectories under the root export. If this is set to no, clients can only mount the path '/'. If set to yes, clients can mount a deeper path, like '/a/b'.
	SubmountAccess *bool `pulumi:"submountAccess"`
	// Allow SUID semantics.
	Suid *bool `pulumi:"suid"`
}

// NfsAccessRuleInput is an input type that accepts NfsAccessRuleArgs and NfsAccessRuleOutput values.
// You can construct a concrete instance of `NfsAccessRuleInput` via:
//
//          NfsAccessRuleArgs{...}
type NfsAccessRuleInput interface {
	pulumi.Input

	ToNfsAccessRuleOutput() NfsAccessRuleOutput
	ToNfsAccessRuleOutputWithContext(context.Context) NfsAccessRuleOutput
}

// Rule to place restrictions on portions of the cache namespace being presented to clients.
type NfsAccessRuleArgs struct {
	// Access allowed by this rule.
	Access pulumi.StringInput `pulumi:"access"`
	// GID value that replaces 0 when rootSquash is true.
	AnonymousGID pulumi.StringPtrInput `pulumi:"anonymousGID"`
	// UID value that replaces 0 when rootSquash is true.
	AnonymousUID pulumi.StringPtrInput `pulumi:"anonymousUID"`
	// Filter applied to the scope for this rule. The filter's format depends on its scope. 'default' scope matches all clients and has no filter value. 'network' scope takes a filter in CIDR format (for example, 10.99.1.0/24). 'host' takes an IP address or fully qualified domain name as filter. If a client does not match any filter rule and there is no default rule, access is denied.
	Filter pulumi.StringPtrInput `pulumi:"filter"`
	// Map root accesses to anonymousUID and anonymousGID.
	RootSquash pulumi.BoolPtrInput `pulumi:"rootSquash"`
	// Scope for this rule. The scope and filter determine which clients match the rule.
	Scope pulumi.StringInput `pulumi:"scope"`
	// For the default policy, allow access to subdirectories under the root export. If this is set to no, clients can only mount the path '/'. If set to yes, clients can mount a deeper path, like '/a/b'.
	SubmountAccess pulumi.BoolPtrInput `pulumi:"submountAccess"`
	// Allow SUID semantics.
	Suid pulumi.BoolPtrInput `pulumi:"suid"`
}

func (NfsAccessRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NfsAccessRule)(nil)).Elem()
}

func (i NfsAccessRuleArgs) ToNfsAccessRuleOutput() NfsAccessRuleOutput {
	return i.ToNfsAccessRuleOutputWithContext(context.Background())
}

func (i NfsAccessRuleArgs) ToNfsAccessRuleOutputWithContext(ctx context.Context) NfsAccessRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NfsAccessRuleOutput)
}

// NfsAccessRuleArrayInput is an input type that accepts NfsAccessRuleArray and NfsAccessRuleArrayOutput values.
// You can construct a concrete instance of `NfsAccessRuleArrayInput` via:
//
//          NfsAccessRuleArray{ NfsAccessRuleArgs{...} }
type NfsAccessRuleArrayInput interface {
	pulumi.Input

	ToNfsAccessRuleArrayOutput() NfsAccessRuleArrayOutput
	ToNfsAccessRuleArrayOutputWithContext(context.Context) NfsAccessRuleArrayOutput
}

type NfsAccessRuleArray []NfsAccessRuleInput

func (NfsAccessRuleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NfsAccessRule)(nil)).Elem()
}

func (i NfsAccessRuleArray) ToNfsAccessRuleArrayOutput() NfsAccessRuleArrayOutput {
	return i.ToNfsAccessRuleArrayOutputWithContext(context.Background())
}

func (i NfsAccessRuleArray) ToNfsAccessRuleArrayOutputWithContext(ctx context.Context) NfsAccessRuleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NfsAccessRuleArrayOutput)
}

// Rule to place restrictions on portions of the cache namespace being presented to clients.
type NfsAccessRuleOutput struct{ *pulumi.OutputState }

func (NfsAccessRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NfsAccessRule)(nil)).Elem()
}

func (o NfsAccessRuleOutput) ToNfsAccessRuleOutput() NfsAccessRuleOutput {
	return o
}

func (o NfsAccessRuleOutput) ToNfsAccessRuleOutputWithContext(ctx context.Context) NfsAccessRuleOutput {
	return o
}

// Access allowed by this rule.
func (o NfsAccessRuleOutput) Access() pulumi.StringOutput {
	return o.ApplyT(func(v NfsAccessRule) string { return v.Access }).(pulumi.StringOutput)
}

// GID value that replaces 0 when rootSquash is true.
func (o NfsAccessRuleOutput) AnonymousGID() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NfsAccessRule) *string { return v.AnonymousGID }).(pulumi.StringPtrOutput)
}

// UID value that replaces 0 when rootSquash is true.
func (o NfsAccessRuleOutput) AnonymousUID() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NfsAccessRule) *string { return v.AnonymousUID }).(pulumi.StringPtrOutput)
}

// Filter applied to the scope for this rule. The filter's format depends on its scope. 'default' scope matches all clients and has no filter value. 'network' scope takes a filter in CIDR format (for example, 10.99.1.0/24). 'host' takes an IP address or fully qualified domain name as filter. If a client does not match any filter rule and there is no default rule, access is denied.
func (o NfsAccessRuleOutput) Filter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NfsAccessRule) *string { return v.Filter }).(pulumi.StringPtrOutput)
}

// Map root accesses to anonymousUID and anonymousGID.
func (o NfsAccessRuleOutput) RootSquash() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v NfsAccessRule) *bool { return v.RootSquash }).(pulumi.BoolPtrOutput)
}

// Scope for this rule. The scope and filter determine which clients match the rule.
func (o NfsAccessRuleOutput) Scope() pulumi.StringOutput {
	return o.ApplyT(func(v NfsAccessRule) string { return v.Scope }).(pulumi.StringOutput)
}

// For the default policy, allow access to subdirectories under the root export. If this is set to no, clients can only mount the path '/'. If set to yes, clients can mount a deeper path, like '/a/b'.
func (o NfsAccessRuleOutput) SubmountAccess() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v NfsAccessRule) *bool { return v.SubmountAccess }).(pulumi.BoolPtrOutput)
}

// Allow SUID semantics.
func (o NfsAccessRuleOutput) Suid() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v NfsAccessRule) *bool { return v.Suid }).(pulumi.BoolPtrOutput)
}

type NfsAccessRuleArrayOutput struct{ *pulumi.OutputState }

func (NfsAccessRuleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NfsAccessRule)(nil)).Elem()
}

func (o NfsAccessRuleArrayOutput) ToNfsAccessRuleArrayOutput() NfsAccessRuleArrayOutput {
	return o
}

func (o NfsAccessRuleArrayOutput) ToNfsAccessRuleArrayOutputWithContext(ctx context.Context) NfsAccessRuleArrayOutput {
	return o
}

func (o NfsAccessRuleArrayOutput) Index(i pulumi.IntInput) NfsAccessRuleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) NfsAccessRule {
		return vs[0].([]NfsAccessRule)[vs[1].(int)]
	}).(NfsAccessRuleOutput)
}

// Rule to place restrictions on portions of the cache namespace being presented to clients.
type NfsAccessRuleInvokeResponse struct {
	// Access allowed by this rule.
	Access string `pulumi:"access"`
	// GID value that replaces 0 when rootSquash is true.
	AnonymousGID *string `pulumi:"anonymousGID"`
	// UID value that replaces 0 when rootSquash is true.
	AnonymousUID *string `pulumi:"anonymousUID"`
	// Filter applied to the scope for this rule. The filter's format depends on its scope. 'default' scope matches all clients and has no filter value. 'network' scope takes a filter in CIDR format (for example, 10.99.1.0/24). 'host' takes an IP address or fully qualified domain name as filter. If a client does not match any filter rule and there is no default rule, access is denied.
	Filter *string `pulumi:"filter"`
	// Map root accesses to anonymousUID and anonymousGID.
	RootSquash *bool `pulumi:"rootSquash"`
	// Scope for this rule. The scope and filter determine which clients match the rule.
	Scope string `pulumi:"scope"`
	// For the default policy, allow access to subdirectories under the root export. If this is set to no, clients can only mount the path '/'. If set to yes, clients can mount a deeper path, like '/a/b'.
	SubmountAccess *bool `pulumi:"submountAccess"`
	// Allow SUID semantics.
	Suid *bool `pulumi:"suid"`
}

// NfsAccessRuleInvokeResponseInput is an input type that accepts NfsAccessRuleInvokeResponseArgs and NfsAccessRuleInvokeResponseOutput values.
// You can construct a concrete instance of `NfsAccessRuleInvokeResponseInput` via:
//
//          NfsAccessRuleInvokeResponseArgs{...}
type NfsAccessRuleInvokeResponseInput interface {
	pulumi.Input

	ToNfsAccessRuleInvokeResponseOutput() NfsAccessRuleInvokeResponseOutput
	ToNfsAccessRuleInvokeResponseOutputWithContext(context.Context) NfsAccessRuleInvokeResponseOutput
}

// Rule to place restrictions on portions of the cache namespace being presented to clients.
type NfsAccessRuleInvokeResponseArgs struct {
	// Access allowed by this rule.
	Access pulumi.StringInput `pulumi:"access"`
	// GID value that replaces 0 when rootSquash is true.
	AnonymousGID pulumi.StringPtrInput `pulumi:"anonymousGID"`
	// UID value that replaces 0 when rootSquash is true.
	AnonymousUID pulumi.StringPtrInput `pulumi:"anonymousUID"`
	// Filter applied to the scope for this rule. The filter's format depends on its scope. 'default' scope matches all clients and has no filter value. 'network' scope takes a filter in CIDR format (for example, 10.99.1.0/24). 'host' takes an IP address or fully qualified domain name as filter. If a client does not match any filter rule and there is no default rule, access is denied.
	Filter pulumi.StringPtrInput `pulumi:"filter"`
	// Map root accesses to anonymousUID and anonymousGID.
	RootSquash pulumi.BoolPtrInput `pulumi:"rootSquash"`
	// Scope for this rule. The scope and filter determine which clients match the rule.
	Scope pulumi.StringInput `pulumi:"scope"`
	// For the default policy, allow access to subdirectories under the root export. If this is set to no, clients can only mount the path '/'. If set to yes, clients can mount a deeper path, like '/a/b'.
	SubmountAccess pulumi.BoolPtrInput `pulumi:"submountAccess"`
	// Allow SUID semantics.
	Suid pulumi.BoolPtrInput `pulumi:"suid"`
}

func (NfsAccessRuleInvokeResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NfsAccessRuleInvokeResponse)(nil)).Elem()
}

func (i NfsAccessRuleInvokeResponseArgs) ToNfsAccessRuleInvokeResponseOutput() NfsAccessRuleInvokeResponseOutput {
	return i.ToNfsAccessRuleInvokeResponseOutputWithContext(context.Background())
}

func (i NfsAccessRuleInvokeResponseArgs) ToNfsAccessRuleInvokeResponseOutputWithContext(ctx context.Context) NfsAccessRuleInvokeResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NfsAccessRuleInvokeResponseOutput)
}

// NfsAccessRuleInvokeResponseArrayInput is an input type that accepts NfsAccessRuleInvokeResponseArray and NfsAccessRuleInvokeResponseArrayOutput values.
// You can construct a concrete instance of `NfsAccessRuleInvokeResponseArrayInput` via:
//
//          NfsAccessRuleInvokeResponseArray{ NfsAccessRuleInvokeResponseArgs{...} }
type NfsAccessRuleInvokeResponseArrayInput interface {
	pulumi.Input

	ToNfsAccessRuleInvokeResponseArrayOutput() NfsAccessRuleInvokeResponseArrayOutput
	ToNfsAccessRuleInvokeResponseArrayOutputWithContext(context.Context) NfsAccessRuleInvokeResponseArrayOutput
}

type NfsAccessRuleInvokeResponseArray []NfsAccessRuleInvokeResponseInput

func (NfsAccessRuleInvokeResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NfsAccessRuleInvokeResponse)(nil)).Elem()
}

func (i NfsAccessRuleInvokeResponseArray) ToNfsAccessRuleInvokeResponseArrayOutput() NfsAccessRuleInvokeResponseArrayOutput {
	return i.ToNfsAccessRuleInvokeResponseArrayOutputWithContext(context.Background())
}

func (i NfsAccessRuleInvokeResponseArray) ToNfsAccessRuleInvokeResponseArrayOutputWithContext(ctx context.Context) NfsAccessRuleInvokeResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NfsAccessRuleInvokeResponseArrayOutput)
}

// Rule to place restrictions on portions of the cache namespace being presented to clients.
type NfsAccessRuleInvokeResponseOutput struct{ *pulumi.OutputState }

func (NfsAccessRuleInvokeResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NfsAccessRuleInvokeResponse)(nil)).Elem()
}

func (o NfsAccessRuleInvokeResponseOutput) ToNfsAccessRuleInvokeResponseOutput() NfsAccessRuleInvokeResponseOutput {
	return o
}

func (o NfsAccessRuleInvokeResponseOutput) ToNfsAccessRuleInvokeResponseOutputWithContext(ctx context.Context) NfsAccessRuleInvokeResponseOutput {
	return o
}

// Access allowed by this rule.
func (o NfsAccessRuleInvokeResponseOutput) Access() pulumi.StringOutput {
	return o.ApplyT(func(v NfsAccessRuleInvokeResponse) string { return v.Access }).(pulumi.StringOutput)
}

// GID value that replaces 0 when rootSquash is true.
func (o NfsAccessRuleInvokeResponseOutput) AnonymousGID() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NfsAccessRuleInvokeResponse) *string { return v.AnonymousGID }).(pulumi.StringPtrOutput)
}

// UID value that replaces 0 when rootSquash is true.
func (o NfsAccessRuleInvokeResponseOutput) AnonymousUID() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NfsAccessRuleInvokeResponse) *string { return v.AnonymousUID }).(pulumi.StringPtrOutput)
}

// Filter applied to the scope for this rule. The filter's format depends on its scope. 'default' scope matches all clients and has no filter value. 'network' scope takes a filter in CIDR format (for example, 10.99.1.0/24). 'host' takes an IP address or fully qualified domain name as filter. If a client does not match any filter rule and there is no default rule, access is denied.
func (o NfsAccessRuleInvokeResponseOutput) Filter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NfsAccessRuleInvokeResponse) *string { return v.Filter }).(pulumi.StringPtrOutput)
}

// Map root accesses to anonymousUID and anonymousGID.
func (o NfsAccessRuleInvokeResponseOutput) RootSquash() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v NfsAccessRuleInvokeResponse) *bool { return v.RootSquash }).(pulumi.BoolPtrOutput)
}

// Scope for this rule. The scope and filter determine which clients match the rule.
func (o NfsAccessRuleInvokeResponseOutput) Scope() pulumi.StringOutput {
	return o.ApplyT(func(v NfsAccessRuleInvokeResponse) string { return v.Scope }).(pulumi.StringOutput)
}

// For the default policy, allow access to subdirectories under the root export. If this is set to no, clients can only mount the path '/'. If set to yes, clients can mount a deeper path, like '/a/b'.
func (o NfsAccessRuleInvokeResponseOutput) SubmountAccess() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v NfsAccessRuleInvokeResponse) *bool { return v.SubmountAccess }).(pulumi.BoolPtrOutput)
}

// Allow SUID semantics.
func (o NfsAccessRuleInvokeResponseOutput) Suid() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v NfsAccessRuleInvokeResponse) *bool { return v.Suid }).(pulumi.BoolPtrOutput)
}

type NfsAccessRuleInvokeResponseArrayOutput struct{ *pulumi.OutputState }

func (NfsAccessRuleInvokeResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NfsAccessRuleInvokeResponse)(nil)).Elem()
}

func (o NfsAccessRuleInvokeResponseArrayOutput) ToNfsAccessRuleInvokeResponseArrayOutput() NfsAccessRuleInvokeResponseArrayOutput {
	return o
}

func (o NfsAccessRuleInvokeResponseArrayOutput) ToNfsAccessRuleInvokeResponseArrayOutputWithContext(ctx context.Context) NfsAccessRuleInvokeResponseArrayOutput {
	return o
}

func (o NfsAccessRuleInvokeResponseArrayOutput) Index(i pulumi.IntInput) NfsAccessRuleInvokeResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) NfsAccessRuleInvokeResponse {
		return vs[0].([]NfsAccessRuleInvokeResponse)[vs[1].(int)]
	}).(NfsAccessRuleInvokeResponseOutput)
}

// Rule to place restrictions on portions of the cache namespace being presented to clients.
type NfsAccessRuleResponse struct {
	// Access allowed by this rule.
	Access string `pulumi:"access"`
	// GID value that replaces 0 when rootSquash is true.
	AnonymousGID *string `pulumi:"anonymousGID"`
	// UID value that replaces 0 when rootSquash is true.
	AnonymousUID *string `pulumi:"anonymousUID"`
	// Filter applied to the scope for this rule. The filter's format depends on its scope. 'default' scope matches all clients and has no filter value. 'network' scope takes a filter in CIDR format (for example, 10.99.1.0/24). 'host' takes an IP address or fully qualified domain name as filter. If a client does not match any filter rule and there is no default rule, access is denied.
	Filter *string `pulumi:"filter"`
	// Map root accesses to anonymousUID and anonymousGID.
	RootSquash *bool `pulumi:"rootSquash"`
	// Scope for this rule. The scope and filter determine which clients match the rule.
	Scope string `pulumi:"scope"`
	// For the default policy, allow access to subdirectories under the root export. If this is set to no, clients can only mount the path '/'. If set to yes, clients can mount a deeper path, like '/a/b'.
	SubmountAccess *bool `pulumi:"submountAccess"`
	// Allow SUID semantics.
	Suid *bool `pulumi:"suid"`
}

// NfsAccessRuleResponseInput is an input type that accepts NfsAccessRuleResponseArgs and NfsAccessRuleResponseOutput values.
// You can construct a concrete instance of `NfsAccessRuleResponseInput` via:
//
//          NfsAccessRuleResponseArgs{...}
type NfsAccessRuleResponseInput interface {
	pulumi.Input

	ToNfsAccessRuleResponseOutput() NfsAccessRuleResponseOutput
	ToNfsAccessRuleResponseOutputWithContext(context.Context) NfsAccessRuleResponseOutput
}

// Rule to place restrictions on portions of the cache namespace being presented to clients.
type NfsAccessRuleResponseArgs struct {
	// Access allowed by this rule.
	Access pulumi.StringInput `pulumi:"access"`
	// GID value that replaces 0 when rootSquash is true.
	AnonymousGID pulumi.StringPtrInput `pulumi:"anonymousGID"`
	// UID value that replaces 0 when rootSquash is true.
	AnonymousUID pulumi.StringPtrInput `pulumi:"anonymousUID"`
	// Filter applied to the scope for this rule. The filter's format depends on its scope. 'default' scope matches all clients and has no filter value. 'network' scope takes a filter in CIDR format (for example, 10.99.1.0/24). 'host' takes an IP address or fully qualified domain name as filter. If a client does not match any filter rule and there is no default rule, access is denied.
	Filter pulumi.StringPtrInput `pulumi:"filter"`
	// Map root accesses to anonymousUID and anonymousGID.
	RootSquash pulumi.BoolPtrInput `pulumi:"rootSquash"`
	// Scope for this rule. The scope and filter determine which clients match the rule.
	Scope pulumi.StringInput `pulumi:"scope"`
	// For the default policy, allow access to subdirectories under the root export. If this is set to no, clients can only mount the path '/'. If set to yes, clients can mount a deeper path, like '/a/b'.
	SubmountAccess pulumi.BoolPtrInput `pulumi:"submountAccess"`
	// Allow SUID semantics.
	Suid pulumi.BoolPtrInput `pulumi:"suid"`
}

func (NfsAccessRuleResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NfsAccessRuleResponse)(nil)).Elem()
}

func (i NfsAccessRuleResponseArgs) ToNfsAccessRuleResponseOutput() NfsAccessRuleResponseOutput {
	return i.ToNfsAccessRuleResponseOutputWithContext(context.Background())
}

func (i NfsAccessRuleResponseArgs) ToNfsAccessRuleResponseOutputWithContext(ctx context.Context) NfsAccessRuleResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NfsAccessRuleResponseOutput)
}

// NfsAccessRuleResponseArrayInput is an input type that accepts NfsAccessRuleResponseArray and NfsAccessRuleResponseArrayOutput values.
// You can construct a concrete instance of `NfsAccessRuleResponseArrayInput` via:
//
//          NfsAccessRuleResponseArray{ NfsAccessRuleResponseArgs{...} }
type NfsAccessRuleResponseArrayInput interface {
	pulumi.Input

	ToNfsAccessRuleResponseArrayOutput() NfsAccessRuleResponseArrayOutput
	ToNfsAccessRuleResponseArrayOutputWithContext(context.Context) NfsAccessRuleResponseArrayOutput
}

type NfsAccessRuleResponseArray []NfsAccessRuleResponseInput

func (NfsAccessRuleResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NfsAccessRuleResponse)(nil)).Elem()
}

func (i NfsAccessRuleResponseArray) ToNfsAccessRuleResponseArrayOutput() NfsAccessRuleResponseArrayOutput {
	return i.ToNfsAccessRuleResponseArrayOutputWithContext(context.Background())
}

func (i NfsAccessRuleResponseArray) ToNfsAccessRuleResponseArrayOutputWithContext(ctx context.Context) NfsAccessRuleResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NfsAccessRuleResponseArrayOutput)
}

// Rule to place restrictions on portions of the cache namespace being presented to clients.
type NfsAccessRuleResponseOutput struct{ *pulumi.OutputState }

func (NfsAccessRuleResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NfsAccessRuleResponse)(nil)).Elem()
}

func (o NfsAccessRuleResponseOutput) ToNfsAccessRuleResponseOutput() NfsAccessRuleResponseOutput {
	return o
}

func (o NfsAccessRuleResponseOutput) ToNfsAccessRuleResponseOutputWithContext(ctx context.Context) NfsAccessRuleResponseOutput {
	return o
}

// Access allowed by this rule.
func (o NfsAccessRuleResponseOutput) Access() pulumi.StringOutput {
	return o.ApplyT(func(v NfsAccessRuleResponse) string { return v.Access }).(pulumi.StringOutput)
}

// GID value that replaces 0 when rootSquash is true.
func (o NfsAccessRuleResponseOutput) AnonymousGID() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NfsAccessRuleResponse) *string { return v.AnonymousGID }).(pulumi.StringPtrOutput)
}

// UID value that replaces 0 when rootSquash is true.
func (o NfsAccessRuleResponseOutput) AnonymousUID() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NfsAccessRuleResponse) *string { return v.AnonymousUID }).(pulumi.StringPtrOutput)
}

// Filter applied to the scope for this rule. The filter's format depends on its scope. 'default' scope matches all clients and has no filter value. 'network' scope takes a filter in CIDR format (for example, 10.99.1.0/24). 'host' takes an IP address or fully qualified domain name as filter. If a client does not match any filter rule and there is no default rule, access is denied.
func (o NfsAccessRuleResponseOutput) Filter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NfsAccessRuleResponse) *string { return v.Filter }).(pulumi.StringPtrOutput)
}

// Map root accesses to anonymousUID and anonymousGID.
func (o NfsAccessRuleResponseOutput) RootSquash() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v NfsAccessRuleResponse) *bool { return v.RootSquash }).(pulumi.BoolPtrOutput)
}

// Scope for this rule. The scope and filter determine which clients match the rule.
func (o NfsAccessRuleResponseOutput) Scope() pulumi.StringOutput {
	return o.ApplyT(func(v NfsAccessRuleResponse) string { return v.Scope }).(pulumi.StringOutput)
}

// For the default policy, allow access to subdirectories under the root export. If this is set to no, clients can only mount the path '/'. If set to yes, clients can mount a deeper path, like '/a/b'.
func (o NfsAccessRuleResponseOutput) SubmountAccess() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v NfsAccessRuleResponse) *bool { return v.SubmountAccess }).(pulumi.BoolPtrOutput)
}

// Allow SUID semantics.
func (o NfsAccessRuleResponseOutput) Suid() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v NfsAccessRuleResponse) *bool { return v.Suid }).(pulumi.BoolPtrOutput)
}

type NfsAccessRuleResponseArrayOutput struct{ *pulumi.OutputState }

func (NfsAccessRuleResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NfsAccessRuleResponse)(nil)).Elem()
}

func (o NfsAccessRuleResponseArrayOutput) ToNfsAccessRuleResponseArrayOutput() NfsAccessRuleResponseArrayOutput {
	return o
}

func (o NfsAccessRuleResponseArrayOutput) ToNfsAccessRuleResponseArrayOutputWithContext(ctx context.Context) NfsAccessRuleResponseArrayOutput {
	return o
}

func (o NfsAccessRuleResponseArrayOutput) Index(i pulumi.IntInput) NfsAccessRuleResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) NfsAccessRuleResponse {
		return vs[0].([]NfsAccessRuleResponse)[vs[1].(int)]
	}).(NfsAccessRuleResponseOutput)
}

// Metadata pertaining to creation and last modification of the resource.
type SystemDataInvokeResponse struct {
	// The timestamp of resource creation (UTC).
	CreatedAt *string `pulumi:"createdAt"`
	// The identity that created the resource.
	CreatedBy *string `pulumi:"createdBy"`
	// The type of identity that created the resource.
	CreatedByType *string `pulumi:"createdByType"`
	// The type of identity that last modified the resource.
	LastModifiedAt *string `pulumi:"lastModifiedAt"`
	// The identity that last modified the resource.
	LastModifiedBy *string `pulumi:"lastModifiedBy"`
	// The type of identity that last modified the resource.
	LastModifiedByType *string `pulumi:"lastModifiedByType"`
}

// SystemDataInvokeResponseInput is an input type that accepts SystemDataInvokeResponseArgs and SystemDataInvokeResponseOutput values.
// You can construct a concrete instance of `SystemDataInvokeResponseInput` via:
//
//          SystemDataInvokeResponseArgs{...}
type SystemDataInvokeResponseInput interface {
	pulumi.Input

	ToSystemDataInvokeResponseOutput() SystemDataInvokeResponseOutput
	ToSystemDataInvokeResponseOutputWithContext(context.Context) SystemDataInvokeResponseOutput
}

// Metadata pertaining to creation and last modification of the resource.
type SystemDataInvokeResponseArgs struct {
	// The timestamp of resource creation (UTC).
	CreatedAt pulumi.StringPtrInput `pulumi:"createdAt"`
	// The identity that created the resource.
	CreatedBy pulumi.StringPtrInput `pulumi:"createdBy"`
	// The type of identity that created the resource.
	CreatedByType pulumi.StringPtrInput `pulumi:"createdByType"`
	// The type of identity that last modified the resource.
	LastModifiedAt pulumi.StringPtrInput `pulumi:"lastModifiedAt"`
	// The identity that last modified the resource.
	LastModifiedBy pulumi.StringPtrInput `pulumi:"lastModifiedBy"`
	// The type of identity that last modified the resource.
	LastModifiedByType pulumi.StringPtrInput `pulumi:"lastModifiedByType"`
}

func (SystemDataInvokeResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SystemDataInvokeResponse)(nil)).Elem()
}

func (i SystemDataInvokeResponseArgs) ToSystemDataInvokeResponseOutput() SystemDataInvokeResponseOutput {
	return i.ToSystemDataInvokeResponseOutputWithContext(context.Background())
}

func (i SystemDataInvokeResponseArgs) ToSystemDataInvokeResponseOutputWithContext(ctx context.Context) SystemDataInvokeResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SystemDataInvokeResponseOutput)
}

// Metadata pertaining to creation and last modification of the resource.
type SystemDataInvokeResponseOutput struct{ *pulumi.OutputState }

func (SystemDataInvokeResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SystemDataInvokeResponse)(nil)).Elem()
}

func (o SystemDataInvokeResponseOutput) ToSystemDataInvokeResponseOutput() SystemDataInvokeResponseOutput {
	return o
}

func (o SystemDataInvokeResponseOutput) ToSystemDataInvokeResponseOutputWithContext(ctx context.Context) SystemDataInvokeResponseOutput {
	return o
}

// The timestamp of resource creation (UTC).
func (o SystemDataInvokeResponseOutput) CreatedAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SystemDataInvokeResponse) *string { return v.CreatedAt }).(pulumi.StringPtrOutput)
}

// The identity that created the resource.
func (o SystemDataInvokeResponseOutput) CreatedBy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SystemDataInvokeResponse) *string { return v.CreatedBy }).(pulumi.StringPtrOutput)
}

// The type of identity that created the resource.
func (o SystemDataInvokeResponseOutput) CreatedByType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SystemDataInvokeResponse) *string { return v.CreatedByType }).(pulumi.StringPtrOutput)
}

// The type of identity that last modified the resource.
func (o SystemDataInvokeResponseOutput) LastModifiedAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SystemDataInvokeResponse) *string { return v.LastModifiedAt }).(pulumi.StringPtrOutput)
}

// The identity that last modified the resource.
func (o SystemDataInvokeResponseOutput) LastModifiedBy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SystemDataInvokeResponse) *string { return v.LastModifiedBy }).(pulumi.StringPtrOutput)
}

// The type of identity that last modified the resource.
func (o SystemDataInvokeResponseOutput) LastModifiedByType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SystemDataInvokeResponse) *string { return v.LastModifiedByType }).(pulumi.StringPtrOutput)
}

// Metadata pertaining to creation and last modification of the resource.
type SystemDataResponse struct {
	// The timestamp of resource creation (UTC).
	CreatedAt *string `pulumi:"createdAt"`
	// The identity that created the resource.
	CreatedBy *string `pulumi:"createdBy"`
	// The type of identity that created the resource.
	CreatedByType *string `pulumi:"createdByType"`
	// The type of identity that last modified the resource.
	LastModifiedAt *string `pulumi:"lastModifiedAt"`
	// The identity that last modified the resource.
	LastModifiedBy *string `pulumi:"lastModifiedBy"`
	// The type of identity that last modified the resource.
	LastModifiedByType *string `pulumi:"lastModifiedByType"`
}

// SystemDataResponseInput is an input type that accepts SystemDataResponseArgs and SystemDataResponseOutput values.
// You can construct a concrete instance of `SystemDataResponseInput` via:
//
//          SystemDataResponseArgs{...}
type SystemDataResponseInput interface {
	pulumi.Input

	ToSystemDataResponseOutput() SystemDataResponseOutput
	ToSystemDataResponseOutputWithContext(context.Context) SystemDataResponseOutput
}

// Metadata pertaining to creation and last modification of the resource.
type SystemDataResponseArgs struct {
	// The timestamp of resource creation (UTC).
	CreatedAt pulumi.StringPtrInput `pulumi:"createdAt"`
	// The identity that created the resource.
	CreatedBy pulumi.StringPtrInput `pulumi:"createdBy"`
	// The type of identity that created the resource.
	CreatedByType pulumi.StringPtrInput `pulumi:"createdByType"`
	// The type of identity that last modified the resource.
	LastModifiedAt pulumi.StringPtrInput `pulumi:"lastModifiedAt"`
	// The identity that last modified the resource.
	LastModifiedBy pulumi.StringPtrInput `pulumi:"lastModifiedBy"`
	// The type of identity that last modified the resource.
	LastModifiedByType pulumi.StringPtrInput `pulumi:"lastModifiedByType"`
}

func (SystemDataResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SystemDataResponse)(nil)).Elem()
}

func (i SystemDataResponseArgs) ToSystemDataResponseOutput() SystemDataResponseOutput {
	return i.ToSystemDataResponseOutputWithContext(context.Background())
}

func (i SystemDataResponseArgs) ToSystemDataResponseOutputWithContext(ctx context.Context) SystemDataResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SystemDataResponseOutput)
}

func (i SystemDataResponseArgs) ToSystemDataResponsePtrOutput() SystemDataResponsePtrOutput {
	return i.ToSystemDataResponsePtrOutputWithContext(context.Background())
}

func (i SystemDataResponseArgs) ToSystemDataResponsePtrOutputWithContext(ctx context.Context) SystemDataResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SystemDataResponseOutput).ToSystemDataResponsePtrOutputWithContext(ctx)
}

// SystemDataResponsePtrInput is an input type that accepts SystemDataResponseArgs, SystemDataResponsePtr and SystemDataResponsePtrOutput values.
// You can construct a concrete instance of `SystemDataResponsePtrInput` via:
//
//          SystemDataResponseArgs{...}
//
//  or:
//
//          nil
type SystemDataResponsePtrInput interface {
	pulumi.Input

	ToSystemDataResponsePtrOutput() SystemDataResponsePtrOutput
	ToSystemDataResponsePtrOutputWithContext(context.Context) SystemDataResponsePtrOutput
}

type systemDataResponsePtrType SystemDataResponseArgs

func SystemDataResponsePtr(v *SystemDataResponseArgs) SystemDataResponsePtrInput {
	return (*systemDataResponsePtrType)(v)
}

func (*systemDataResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SystemDataResponse)(nil)).Elem()
}

func (i *systemDataResponsePtrType) ToSystemDataResponsePtrOutput() SystemDataResponsePtrOutput {
	return i.ToSystemDataResponsePtrOutputWithContext(context.Background())
}

func (i *systemDataResponsePtrType) ToSystemDataResponsePtrOutputWithContext(ctx context.Context) SystemDataResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SystemDataResponsePtrOutput)
}

// Metadata pertaining to creation and last modification of the resource.
type SystemDataResponseOutput struct{ *pulumi.OutputState }

func (SystemDataResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SystemDataResponse)(nil)).Elem()
}

func (o SystemDataResponseOutput) ToSystemDataResponseOutput() SystemDataResponseOutput {
	return o
}

func (o SystemDataResponseOutput) ToSystemDataResponseOutputWithContext(ctx context.Context) SystemDataResponseOutput {
	return o
}

func (o SystemDataResponseOutput) ToSystemDataResponsePtrOutput() SystemDataResponsePtrOutput {
	return o.ToSystemDataResponsePtrOutputWithContext(context.Background())
}

func (o SystemDataResponseOutput) ToSystemDataResponsePtrOutputWithContext(ctx context.Context) SystemDataResponsePtrOutput {
	return o.ApplyT(func(v SystemDataResponse) *SystemDataResponse {
		return &v
	}).(SystemDataResponsePtrOutput)
}

// The timestamp of resource creation (UTC).
func (o SystemDataResponseOutput) CreatedAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SystemDataResponse) *string { return v.CreatedAt }).(pulumi.StringPtrOutput)
}

// The identity that created the resource.
func (o SystemDataResponseOutput) CreatedBy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SystemDataResponse) *string { return v.CreatedBy }).(pulumi.StringPtrOutput)
}

// The type of identity that created the resource.
func (o SystemDataResponseOutput) CreatedByType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SystemDataResponse) *string { return v.CreatedByType }).(pulumi.StringPtrOutput)
}

// The type of identity that last modified the resource.
func (o SystemDataResponseOutput) LastModifiedAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SystemDataResponse) *string { return v.LastModifiedAt }).(pulumi.StringPtrOutput)
}

// The identity that last modified the resource.
func (o SystemDataResponseOutput) LastModifiedBy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SystemDataResponse) *string { return v.LastModifiedBy }).(pulumi.StringPtrOutput)
}

// The type of identity that last modified the resource.
func (o SystemDataResponseOutput) LastModifiedByType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SystemDataResponse) *string { return v.LastModifiedByType }).(pulumi.StringPtrOutput)
}

type SystemDataResponsePtrOutput struct{ *pulumi.OutputState }

func (SystemDataResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SystemDataResponse)(nil)).Elem()
}

func (o SystemDataResponsePtrOutput) ToSystemDataResponsePtrOutput() SystemDataResponsePtrOutput {
	return o
}

func (o SystemDataResponsePtrOutput) ToSystemDataResponsePtrOutputWithContext(ctx context.Context) SystemDataResponsePtrOutput {
	return o
}

func (o SystemDataResponsePtrOutput) Elem() SystemDataResponseOutput {
	return o.ApplyT(func(v *SystemDataResponse) SystemDataResponse { return *v }).(SystemDataResponseOutput)
}

// The timestamp of resource creation (UTC).
func (o SystemDataResponsePtrOutput) CreatedAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SystemDataResponse) *string {
		if v == nil {
			return nil
		}
		return v.CreatedAt
	}).(pulumi.StringPtrOutput)
}

// The identity that created the resource.
func (o SystemDataResponsePtrOutput) CreatedBy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SystemDataResponse) *string {
		if v == nil {
			return nil
		}
		return v.CreatedBy
	}).(pulumi.StringPtrOutput)
}

// The type of identity that created the resource.
func (o SystemDataResponsePtrOutput) CreatedByType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SystemDataResponse) *string {
		if v == nil {
			return nil
		}
		return v.CreatedByType
	}).(pulumi.StringPtrOutput)
}

// The type of identity that last modified the resource.
func (o SystemDataResponsePtrOutput) LastModifiedAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SystemDataResponse) *string {
		if v == nil {
			return nil
		}
		return v.LastModifiedAt
	}).(pulumi.StringPtrOutput)
}

// The identity that last modified the resource.
func (o SystemDataResponsePtrOutput) LastModifiedBy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SystemDataResponse) *string {
		if v == nil {
			return nil
		}
		return v.LastModifiedBy
	}).(pulumi.StringPtrOutput)
}

// The type of identity that last modified the resource.
func (o SystemDataResponsePtrOutput) LastModifiedByType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SystemDataResponse) *string {
		if v == nil {
			return nil
		}
		return v.LastModifiedByType
	}).(pulumi.StringPtrOutput)
}

// Properties pertaining to the UnknownTarget
type UnknownTarget struct {
	// Dictionary of string->string pairs containing information about the Storage Target.
	UnknownMap map[string]string `pulumi:"unknownMap"`
}

// UnknownTargetInput is an input type that accepts UnknownTargetArgs and UnknownTargetOutput values.
// You can construct a concrete instance of `UnknownTargetInput` via:
//
//          UnknownTargetArgs{...}
type UnknownTargetInput interface {
	pulumi.Input

	ToUnknownTargetOutput() UnknownTargetOutput
	ToUnknownTargetOutputWithContext(context.Context) UnknownTargetOutput
}

// Properties pertaining to the UnknownTarget
type UnknownTargetArgs struct {
	// Dictionary of string->string pairs containing information about the Storage Target.
	UnknownMap pulumi.StringMapInput `pulumi:"unknownMap"`
}

func (UnknownTargetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*UnknownTarget)(nil)).Elem()
}

func (i UnknownTargetArgs) ToUnknownTargetOutput() UnknownTargetOutput {
	return i.ToUnknownTargetOutputWithContext(context.Background())
}

func (i UnknownTargetArgs) ToUnknownTargetOutputWithContext(ctx context.Context) UnknownTargetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UnknownTargetOutput)
}

func (i UnknownTargetArgs) ToUnknownTargetPtrOutput() UnknownTargetPtrOutput {
	return i.ToUnknownTargetPtrOutputWithContext(context.Background())
}

func (i UnknownTargetArgs) ToUnknownTargetPtrOutputWithContext(ctx context.Context) UnknownTargetPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UnknownTargetOutput).ToUnknownTargetPtrOutputWithContext(ctx)
}

// UnknownTargetPtrInput is an input type that accepts UnknownTargetArgs, UnknownTargetPtr and UnknownTargetPtrOutput values.
// You can construct a concrete instance of `UnknownTargetPtrInput` via:
//
//          UnknownTargetArgs{...}
//
//  or:
//
//          nil
type UnknownTargetPtrInput interface {
	pulumi.Input

	ToUnknownTargetPtrOutput() UnknownTargetPtrOutput
	ToUnknownTargetPtrOutputWithContext(context.Context) UnknownTargetPtrOutput
}

type unknownTargetPtrType UnknownTargetArgs

func UnknownTargetPtr(v *UnknownTargetArgs) UnknownTargetPtrInput {
	return (*unknownTargetPtrType)(v)
}

func (*unknownTargetPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**UnknownTarget)(nil)).Elem()
}

func (i *unknownTargetPtrType) ToUnknownTargetPtrOutput() UnknownTargetPtrOutput {
	return i.ToUnknownTargetPtrOutputWithContext(context.Background())
}

func (i *unknownTargetPtrType) ToUnknownTargetPtrOutputWithContext(ctx context.Context) UnknownTargetPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UnknownTargetPtrOutput)
}

// Properties pertaining to the UnknownTarget
type UnknownTargetOutput struct{ *pulumi.OutputState }

func (UnknownTargetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*UnknownTarget)(nil)).Elem()
}

func (o UnknownTargetOutput) ToUnknownTargetOutput() UnknownTargetOutput {
	return o
}

func (o UnknownTargetOutput) ToUnknownTargetOutputWithContext(ctx context.Context) UnknownTargetOutput {
	return o
}

func (o UnknownTargetOutput) ToUnknownTargetPtrOutput() UnknownTargetPtrOutput {
	return o.ToUnknownTargetPtrOutputWithContext(context.Background())
}

func (o UnknownTargetOutput) ToUnknownTargetPtrOutputWithContext(ctx context.Context) UnknownTargetPtrOutput {
	return o.ApplyT(func(v UnknownTarget) *UnknownTarget {
		return &v
	}).(UnknownTargetPtrOutput)
}

// Dictionary of string->string pairs containing information about the Storage Target.
func (o UnknownTargetOutput) UnknownMap() pulumi.StringMapOutput {
	return o.ApplyT(func(v UnknownTarget) map[string]string { return v.UnknownMap }).(pulumi.StringMapOutput)
}

type UnknownTargetPtrOutput struct{ *pulumi.OutputState }

func (UnknownTargetPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**UnknownTarget)(nil)).Elem()
}

func (o UnknownTargetPtrOutput) ToUnknownTargetPtrOutput() UnknownTargetPtrOutput {
	return o
}

func (o UnknownTargetPtrOutput) ToUnknownTargetPtrOutputWithContext(ctx context.Context) UnknownTargetPtrOutput {
	return o
}

func (o UnknownTargetPtrOutput) Elem() UnknownTargetOutput {
	return o.ApplyT(func(v *UnknownTarget) UnknownTarget { return *v }).(UnknownTargetOutput)
}

// Dictionary of string->string pairs containing information about the Storage Target.
func (o UnknownTargetPtrOutput) UnknownMap() pulumi.StringMapOutput {
	return o.ApplyT(func(v *UnknownTarget) map[string]string {
		if v == nil {
			return nil
		}
		return v.UnknownMap
	}).(pulumi.StringMapOutput)
}

// Properties pertaining to the UnknownTarget
type UnknownTargetInvokeResponse struct {
	// Dictionary of string->string pairs containing information about the Storage Target.
	UnknownMap map[string]string `pulumi:"unknownMap"`
}

// UnknownTargetInvokeResponseInput is an input type that accepts UnknownTargetInvokeResponseArgs and UnknownTargetInvokeResponseOutput values.
// You can construct a concrete instance of `UnknownTargetInvokeResponseInput` via:
//
//          UnknownTargetInvokeResponseArgs{...}
type UnknownTargetInvokeResponseInput interface {
	pulumi.Input

	ToUnknownTargetInvokeResponseOutput() UnknownTargetInvokeResponseOutput
	ToUnknownTargetInvokeResponseOutputWithContext(context.Context) UnknownTargetInvokeResponseOutput
}

// Properties pertaining to the UnknownTarget
type UnknownTargetInvokeResponseArgs struct {
	// Dictionary of string->string pairs containing information about the Storage Target.
	UnknownMap pulumi.StringMapInput `pulumi:"unknownMap"`
}

func (UnknownTargetInvokeResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*UnknownTargetInvokeResponse)(nil)).Elem()
}

func (i UnknownTargetInvokeResponseArgs) ToUnknownTargetInvokeResponseOutput() UnknownTargetInvokeResponseOutput {
	return i.ToUnknownTargetInvokeResponseOutputWithContext(context.Background())
}

func (i UnknownTargetInvokeResponseArgs) ToUnknownTargetInvokeResponseOutputWithContext(ctx context.Context) UnknownTargetInvokeResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UnknownTargetInvokeResponseOutput)
}

// Properties pertaining to the UnknownTarget
type UnknownTargetInvokeResponseOutput struct{ *pulumi.OutputState }

func (UnknownTargetInvokeResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*UnknownTargetInvokeResponse)(nil)).Elem()
}

func (o UnknownTargetInvokeResponseOutput) ToUnknownTargetInvokeResponseOutput() UnknownTargetInvokeResponseOutput {
	return o
}

func (o UnknownTargetInvokeResponseOutput) ToUnknownTargetInvokeResponseOutputWithContext(ctx context.Context) UnknownTargetInvokeResponseOutput {
	return o
}

// Dictionary of string->string pairs containing information about the Storage Target.
func (o UnknownTargetInvokeResponseOutput) UnknownMap() pulumi.StringMapOutput {
	return o.ApplyT(func(v UnknownTargetInvokeResponse) map[string]string { return v.UnknownMap }).(pulumi.StringMapOutput)
}

// Properties pertaining to the UnknownTarget
type UnknownTargetResponse struct {
	// Dictionary of string->string pairs containing information about the Storage Target.
	UnknownMap map[string]string `pulumi:"unknownMap"`
}

// UnknownTargetResponseInput is an input type that accepts UnknownTargetResponseArgs and UnknownTargetResponseOutput values.
// You can construct a concrete instance of `UnknownTargetResponseInput` via:
//
//          UnknownTargetResponseArgs{...}
type UnknownTargetResponseInput interface {
	pulumi.Input

	ToUnknownTargetResponseOutput() UnknownTargetResponseOutput
	ToUnknownTargetResponseOutputWithContext(context.Context) UnknownTargetResponseOutput
}

// Properties pertaining to the UnknownTarget
type UnknownTargetResponseArgs struct {
	// Dictionary of string->string pairs containing information about the Storage Target.
	UnknownMap pulumi.StringMapInput `pulumi:"unknownMap"`
}

func (UnknownTargetResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*UnknownTargetResponse)(nil)).Elem()
}

func (i UnknownTargetResponseArgs) ToUnknownTargetResponseOutput() UnknownTargetResponseOutput {
	return i.ToUnknownTargetResponseOutputWithContext(context.Background())
}

func (i UnknownTargetResponseArgs) ToUnknownTargetResponseOutputWithContext(ctx context.Context) UnknownTargetResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UnknownTargetResponseOutput)
}

func (i UnknownTargetResponseArgs) ToUnknownTargetResponsePtrOutput() UnknownTargetResponsePtrOutput {
	return i.ToUnknownTargetResponsePtrOutputWithContext(context.Background())
}

func (i UnknownTargetResponseArgs) ToUnknownTargetResponsePtrOutputWithContext(ctx context.Context) UnknownTargetResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UnknownTargetResponseOutput).ToUnknownTargetResponsePtrOutputWithContext(ctx)
}

// UnknownTargetResponsePtrInput is an input type that accepts UnknownTargetResponseArgs, UnknownTargetResponsePtr and UnknownTargetResponsePtrOutput values.
// You can construct a concrete instance of `UnknownTargetResponsePtrInput` via:
//
//          UnknownTargetResponseArgs{...}
//
//  or:
//
//          nil
type UnknownTargetResponsePtrInput interface {
	pulumi.Input

	ToUnknownTargetResponsePtrOutput() UnknownTargetResponsePtrOutput
	ToUnknownTargetResponsePtrOutputWithContext(context.Context) UnknownTargetResponsePtrOutput
}

type unknownTargetResponsePtrType UnknownTargetResponseArgs

func UnknownTargetResponsePtr(v *UnknownTargetResponseArgs) UnknownTargetResponsePtrInput {
	return (*unknownTargetResponsePtrType)(v)
}

func (*unknownTargetResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**UnknownTargetResponse)(nil)).Elem()
}

func (i *unknownTargetResponsePtrType) ToUnknownTargetResponsePtrOutput() UnknownTargetResponsePtrOutput {
	return i.ToUnknownTargetResponsePtrOutputWithContext(context.Background())
}

func (i *unknownTargetResponsePtrType) ToUnknownTargetResponsePtrOutputWithContext(ctx context.Context) UnknownTargetResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UnknownTargetResponsePtrOutput)
}

// Properties pertaining to the UnknownTarget
type UnknownTargetResponseOutput struct{ *pulumi.OutputState }

func (UnknownTargetResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*UnknownTargetResponse)(nil)).Elem()
}

func (o UnknownTargetResponseOutput) ToUnknownTargetResponseOutput() UnknownTargetResponseOutput {
	return o
}

func (o UnknownTargetResponseOutput) ToUnknownTargetResponseOutputWithContext(ctx context.Context) UnknownTargetResponseOutput {
	return o
}

func (o UnknownTargetResponseOutput) ToUnknownTargetResponsePtrOutput() UnknownTargetResponsePtrOutput {
	return o.ToUnknownTargetResponsePtrOutputWithContext(context.Background())
}

func (o UnknownTargetResponseOutput) ToUnknownTargetResponsePtrOutputWithContext(ctx context.Context) UnknownTargetResponsePtrOutput {
	return o.ApplyT(func(v UnknownTargetResponse) *UnknownTargetResponse {
		return &v
	}).(UnknownTargetResponsePtrOutput)
}

// Dictionary of string->string pairs containing information about the Storage Target.
func (o UnknownTargetResponseOutput) UnknownMap() pulumi.StringMapOutput {
	return o.ApplyT(func(v UnknownTargetResponse) map[string]string { return v.UnknownMap }).(pulumi.StringMapOutput)
}

type UnknownTargetResponsePtrOutput struct{ *pulumi.OutputState }

func (UnknownTargetResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**UnknownTargetResponse)(nil)).Elem()
}

func (o UnknownTargetResponsePtrOutput) ToUnknownTargetResponsePtrOutput() UnknownTargetResponsePtrOutput {
	return o
}

func (o UnknownTargetResponsePtrOutput) ToUnknownTargetResponsePtrOutputWithContext(ctx context.Context) UnknownTargetResponsePtrOutput {
	return o
}

func (o UnknownTargetResponsePtrOutput) Elem() UnknownTargetResponseOutput {
	return o.ApplyT(func(v *UnknownTargetResponse) UnknownTargetResponse { return *v }).(UnknownTargetResponseOutput)
}

// Dictionary of string->string pairs containing information about the Storage Target.
func (o UnknownTargetResponsePtrOutput) UnknownMap() pulumi.StringMapOutput {
	return o.ApplyT(func(v *UnknownTargetResponse) map[string]string {
		if v == nil {
			return nil
		}
		return v.UnknownMap
	}).(pulumi.StringMapOutput)
}

func init() {
	pulumi.RegisterOutputType(CacheActiveDirectorySettingsOutput{})
	pulumi.RegisterOutputType(CacheActiveDirectorySettingsPtrOutput{})
	pulumi.RegisterOutputType(CacheActiveDirectorySettingsCredentialsOutput{})
	pulumi.RegisterOutputType(CacheActiveDirectorySettingsCredentialsPtrOutput{})
	pulumi.RegisterOutputType(CacheActiveDirectorySettingsInvokeResponseOutput{})
	pulumi.RegisterOutputType(CacheActiveDirectorySettingsInvokeResponsePtrOutput{})
	pulumi.RegisterOutputType(CacheActiveDirectorySettingsInvokeResponseCredentialsOutput{})
	pulumi.RegisterOutputType(CacheActiveDirectorySettingsInvokeResponseCredentialsPtrOutput{})
	pulumi.RegisterOutputType(CacheActiveDirectorySettingsResponseOutput{})
	pulumi.RegisterOutputType(CacheActiveDirectorySettingsResponsePtrOutput{})
	pulumi.RegisterOutputType(CacheActiveDirectorySettingsResponseCredentialsOutput{})
	pulumi.RegisterOutputType(CacheActiveDirectorySettingsResponseCredentialsPtrOutput{})
	pulumi.RegisterOutputType(CacheDirectorySettingsOutput{})
	pulumi.RegisterOutputType(CacheDirectorySettingsPtrOutput{})
	pulumi.RegisterOutputType(CacheDirectorySettingsInvokeResponseOutput{})
	pulumi.RegisterOutputType(CacheDirectorySettingsResponseOutput{})
	pulumi.RegisterOutputType(CacheDirectorySettingsResponsePtrOutput{})
	pulumi.RegisterOutputType(CacheEncryptionSettingsOutput{})
	pulumi.RegisterOutputType(CacheEncryptionSettingsPtrOutput{})
	pulumi.RegisterOutputType(CacheEncryptionSettingsInvokeResponseOutput{})
	pulumi.RegisterOutputType(CacheEncryptionSettingsResponseOutput{})
	pulumi.RegisterOutputType(CacheEncryptionSettingsResponsePtrOutput{})
	pulumi.RegisterOutputType(CacheHealthInvokeResponseOutput{})
	pulumi.RegisterOutputType(CacheHealthResponseOutput{})
	pulumi.RegisterOutputType(CacheHealthResponsePtrOutput{})
	pulumi.RegisterOutputType(CacheIdentityOutput{})
	pulumi.RegisterOutputType(CacheIdentityPtrOutput{})
	pulumi.RegisterOutputType(CacheIdentityInvokeResponseOutput{})
	pulumi.RegisterOutputType(CacheIdentityResponseOutput{})
	pulumi.RegisterOutputType(CacheIdentityResponsePtrOutput{})
	pulumi.RegisterOutputType(CacheInvokeResponseSkuOutput{})
	pulumi.RegisterOutputType(CacheNetworkSettingsOutput{})
	pulumi.RegisterOutputType(CacheNetworkSettingsPtrOutput{})
	pulumi.RegisterOutputType(CacheNetworkSettingsInvokeResponseOutput{})
	pulumi.RegisterOutputType(CacheNetworkSettingsResponseOutput{})
	pulumi.RegisterOutputType(CacheNetworkSettingsResponsePtrOutput{})
	pulumi.RegisterOutputType(CacheResponseSkuOutput{})
	pulumi.RegisterOutputType(CacheResponseSkuPtrOutput{})
	pulumi.RegisterOutputType(CacheSecuritySettingsOutput{})
	pulumi.RegisterOutputType(CacheSecuritySettingsPtrOutput{})
	pulumi.RegisterOutputType(CacheSecuritySettingsInvokeResponseOutput{})
	pulumi.RegisterOutputType(CacheSecuritySettingsResponseOutput{})
	pulumi.RegisterOutputType(CacheSecuritySettingsResponsePtrOutput{})
	pulumi.RegisterOutputType(CacheSkuOutput{})
	pulumi.RegisterOutputType(CacheSkuPtrOutput{})
	pulumi.RegisterOutputType(CacheUpgradeStatusInvokeResponseOutput{})
	pulumi.RegisterOutputType(CacheUpgradeStatusResponseOutput{})
	pulumi.RegisterOutputType(CacheUpgradeStatusResponsePtrOutput{})
	pulumi.RegisterOutputType(CacheUsernameDownloadSettingsOutput{})
	pulumi.RegisterOutputType(CacheUsernameDownloadSettingsPtrOutput{})
	pulumi.RegisterOutputType(CacheUsernameDownloadSettingsCredentialsOutput{})
	pulumi.RegisterOutputType(CacheUsernameDownloadSettingsCredentialsPtrOutput{})
	pulumi.RegisterOutputType(CacheUsernameDownloadSettingsInvokeResponseOutput{})
	pulumi.RegisterOutputType(CacheUsernameDownloadSettingsInvokeResponsePtrOutput{})
	pulumi.RegisterOutputType(CacheUsernameDownloadSettingsInvokeResponseCredentialsOutput{})
	pulumi.RegisterOutputType(CacheUsernameDownloadSettingsInvokeResponseCredentialsPtrOutput{})
	pulumi.RegisterOutputType(CacheUsernameDownloadSettingsResponseOutput{})
	pulumi.RegisterOutputType(CacheUsernameDownloadSettingsResponsePtrOutput{})
	pulumi.RegisterOutputType(CacheUsernameDownloadSettingsResponseCredentialsOutput{})
	pulumi.RegisterOutputType(CacheUsernameDownloadSettingsResponseCredentialsPtrOutput{})
	pulumi.RegisterOutputType(ClfsTargetOutput{})
	pulumi.RegisterOutputType(ClfsTargetPtrOutput{})
	pulumi.RegisterOutputType(ClfsTargetInvokeResponseOutput{})
	pulumi.RegisterOutputType(ClfsTargetResponseOutput{})
	pulumi.RegisterOutputType(ClfsTargetResponsePtrOutput{})
	pulumi.RegisterOutputType(KeyVaultKeyReferenceOutput{})
	pulumi.RegisterOutputType(KeyVaultKeyReferencePtrOutput{})
	pulumi.RegisterOutputType(KeyVaultKeyReferenceInvokeResponseOutput{})
	pulumi.RegisterOutputType(KeyVaultKeyReferenceInvokeResponsePtrOutput{})
	pulumi.RegisterOutputType(KeyVaultKeyReferenceInvokeResponseSourceVaultOutput{})
	pulumi.RegisterOutputType(KeyVaultKeyReferenceInvokeResponseSourceVaultPtrOutput{})
	pulumi.RegisterOutputType(KeyVaultKeyReferenceResponseOutput{})
	pulumi.RegisterOutputType(KeyVaultKeyReferenceResponsePtrOutput{})
	pulumi.RegisterOutputType(KeyVaultKeyReferenceResponseSourceVaultOutput{})
	pulumi.RegisterOutputType(KeyVaultKeyReferenceResponseSourceVaultPtrOutput{})
	pulumi.RegisterOutputType(KeyVaultKeyReferenceSourceVaultOutput{})
	pulumi.RegisterOutputType(KeyVaultKeyReferenceSourceVaultPtrOutput{})
	pulumi.RegisterOutputType(NamespaceJunctionOutput{})
	pulumi.RegisterOutputType(NamespaceJunctionArrayOutput{})
	pulumi.RegisterOutputType(NamespaceJunctionInvokeResponseOutput{})
	pulumi.RegisterOutputType(NamespaceJunctionInvokeResponseArrayOutput{})
	pulumi.RegisterOutputType(NamespaceJunctionResponseOutput{})
	pulumi.RegisterOutputType(NamespaceJunctionResponseArrayOutput{})
	pulumi.RegisterOutputType(Nfs3TargetOutput{})
	pulumi.RegisterOutputType(Nfs3TargetPtrOutput{})
	pulumi.RegisterOutputType(Nfs3TargetInvokeResponseOutput{})
	pulumi.RegisterOutputType(Nfs3TargetResponseOutput{})
	pulumi.RegisterOutputType(Nfs3TargetResponsePtrOutput{})
	pulumi.RegisterOutputType(NfsAccessPolicyOutput{})
	pulumi.RegisterOutputType(NfsAccessPolicyArrayOutput{})
	pulumi.RegisterOutputType(NfsAccessPolicyInvokeResponseOutput{})
	pulumi.RegisterOutputType(NfsAccessPolicyInvokeResponseArrayOutput{})
	pulumi.RegisterOutputType(NfsAccessPolicyResponseOutput{})
	pulumi.RegisterOutputType(NfsAccessPolicyResponseArrayOutput{})
	pulumi.RegisterOutputType(NfsAccessRuleOutput{})
	pulumi.RegisterOutputType(NfsAccessRuleArrayOutput{})
	pulumi.RegisterOutputType(NfsAccessRuleInvokeResponseOutput{})
	pulumi.RegisterOutputType(NfsAccessRuleInvokeResponseArrayOutput{})
	pulumi.RegisterOutputType(NfsAccessRuleResponseOutput{})
	pulumi.RegisterOutputType(NfsAccessRuleResponseArrayOutput{})
	pulumi.RegisterOutputType(SystemDataInvokeResponseOutput{})
	pulumi.RegisterOutputType(SystemDataResponseOutput{})
	pulumi.RegisterOutputType(SystemDataResponsePtrOutput{})
	pulumi.RegisterOutputType(UnknownTargetOutput{})
	pulumi.RegisterOutputType(UnknownTargetPtrOutput{})
	pulumi.RegisterOutputType(UnknownTargetInvokeResponseOutput{})
	pulumi.RegisterOutputType(UnknownTargetResponseOutput{})
	pulumi.RegisterOutputType(UnknownTargetResponsePtrOutput{})
}
