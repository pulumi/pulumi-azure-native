// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v20201001

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// The type of identity used for the cache
type CacheIdentityType string

const (
	CacheIdentityTypeSystemAssigned = CacheIdentityType("SystemAssigned")
	CacheIdentityTypeNone           = CacheIdentityType("None")
)

func (CacheIdentityType) ElementType() reflect.Type {
	return reflect.TypeOf((*CacheIdentityType)(nil)).Elem()
}

func (e CacheIdentityType) ToCacheIdentityTypeOutput() CacheIdentityTypeOutput {
	return pulumi.ToOutput(e).(CacheIdentityTypeOutput)
}

func (e CacheIdentityType) ToCacheIdentityTypeOutputWithContext(ctx context.Context) CacheIdentityTypeOutput {
	return pulumi.ToOutputWithContext(ctx, e).(CacheIdentityTypeOutput)
}

func (e CacheIdentityType) ToCacheIdentityTypePtrOutput() CacheIdentityTypePtrOutput {
	return e.ToCacheIdentityTypePtrOutputWithContext(context.Background())
}

func (e CacheIdentityType) ToCacheIdentityTypePtrOutputWithContext(ctx context.Context) CacheIdentityTypePtrOutput {
	return CacheIdentityType(e).ToCacheIdentityTypeOutputWithContext(ctx).ToCacheIdentityTypePtrOutputWithContext(ctx)
}

func (e CacheIdentityType) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e CacheIdentityType) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e CacheIdentityType) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e CacheIdentityType) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type CacheIdentityTypeOutput struct{ *pulumi.OutputState }

func (CacheIdentityTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CacheIdentityType)(nil)).Elem()
}

func (o CacheIdentityTypeOutput) ToCacheIdentityTypeOutput() CacheIdentityTypeOutput {
	return o
}

func (o CacheIdentityTypeOutput) ToCacheIdentityTypeOutputWithContext(ctx context.Context) CacheIdentityTypeOutput {
	return o
}

func (o CacheIdentityTypeOutput) ToCacheIdentityTypePtrOutput() CacheIdentityTypePtrOutput {
	return o.ToCacheIdentityTypePtrOutputWithContext(context.Background())
}

func (o CacheIdentityTypeOutput) ToCacheIdentityTypePtrOutputWithContext(ctx context.Context) CacheIdentityTypePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v CacheIdentityType) *CacheIdentityType {
		return &v
	}).(CacheIdentityTypePtrOutput)
}

func (o CacheIdentityTypeOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o CacheIdentityTypeOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e CacheIdentityType) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o CacheIdentityTypeOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o CacheIdentityTypeOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e CacheIdentityType) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type CacheIdentityTypePtrOutput struct{ *pulumi.OutputState }

func (CacheIdentityTypePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CacheIdentityType)(nil)).Elem()
}

func (o CacheIdentityTypePtrOutput) ToCacheIdentityTypePtrOutput() CacheIdentityTypePtrOutput {
	return o
}

func (o CacheIdentityTypePtrOutput) ToCacheIdentityTypePtrOutputWithContext(ctx context.Context) CacheIdentityTypePtrOutput {
	return o
}

func (o CacheIdentityTypePtrOutput) Elem() CacheIdentityTypeOutput {
	return o.ApplyT(func(v *CacheIdentityType) CacheIdentityType {
		if v != nil {
			return *v
		}
		var ret CacheIdentityType
		return ret
	}).(CacheIdentityTypeOutput)
}

func (o CacheIdentityTypePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o CacheIdentityTypePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *CacheIdentityType) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// CacheIdentityTypeInput is an input type that accepts CacheIdentityTypeArgs and CacheIdentityTypeOutput values.
// You can construct a concrete instance of `CacheIdentityTypeInput` via:
//
//	CacheIdentityTypeArgs{...}
type CacheIdentityTypeInput interface {
	pulumi.Input

	ToCacheIdentityTypeOutput() CacheIdentityTypeOutput
	ToCacheIdentityTypeOutputWithContext(context.Context) CacheIdentityTypeOutput
}

var cacheIdentityTypePtrType = reflect.TypeOf((**CacheIdentityType)(nil)).Elem()

type CacheIdentityTypePtrInput interface {
	pulumi.Input

	ToCacheIdentityTypePtrOutput() CacheIdentityTypePtrOutput
	ToCacheIdentityTypePtrOutputWithContext(context.Context) CacheIdentityTypePtrOutput
}

type cacheIdentityTypePtr string

func CacheIdentityTypePtr(v string) CacheIdentityTypePtrInput {
	return (*cacheIdentityTypePtr)(&v)
}

func (*cacheIdentityTypePtr) ElementType() reflect.Type {
	return cacheIdentityTypePtrType
}

func (in *cacheIdentityTypePtr) ToCacheIdentityTypePtrOutput() CacheIdentityTypePtrOutput {
	return pulumi.ToOutput(in).(CacheIdentityTypePtrOutput)
}

func (in *cacheIdentityTypePtr) ToCacheIdentityTypePtrOutputWithContext(ctx context.Context) CacheIdentityTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(CacheIdentityTypePtrOutput)
}

// Access allowed by this rule.
type NfsAccessRuleAccess string

const (
	NfsAccessRuleAccessNo = NfsAccessRuleAccess("no")
	NfsAccessRuleAccessRo = NfsAccessRuleAccess("ro")
	NfsAccessRuleAccessRw = NfsAccessRuleAccess("rw")
)

// Scope for this rule. The scope and filter determine which clients match the rule.
type NfsAccessRuleScope string

const (
	NfsAccessRuleScopeDefault = NfsAccessRuleScope("default")
	NfsAccessRuleScopeNetwork = NfsAccessRuleScope("network")
	NfsAccessRuleScopeHost    = NfsAccessRuleScope("host")
)

// ARM provisioning state, see https://github.com/Azure/azure-resource-manager-rpc/blob/master/v1.0/Addendum.md#provisioningstate-property
type ProvisioningStateType string

const (
	ProvisioningStateTypeSucceeded = ProvisioningStateType("Succeeded")
	ProvisioningStateTypeFailed    = ProvisioningStateType("Failed")
	ProvisioningStateTypeCancelled = ProvisioningStateType("Cancelled")
	ProvisioningStateTypeCreating  = ProvisioningStateType("Creating")
	ProvisioningStateTypeDeleting  = ProvisioningStateType("Deleting")
	ProvisioningStateTypeUpdating  = ProvisioningStateType("Updating")
)

// Type of the Storage Target.
type StorageTargetType string

const (
	StorageTargetTypeNfs3    = StorageTargetType("nfs3")
	StorageTargetTypeClfs    = StorageTargetType("clfs")
	StorageTargetTypeUnknown = StorageTargetType("unknown")
)

// This setting determines how the cache gets username and group names for clients.
type UsernameSource string

const (
	UsernameSourceAD   = UsernameSource("AD")
	UsernameSourceLDAP = UsernameSource("LDAP")
	UsernameSourceFile = UsernameSource("File")
	UsernameSourceNone = UsernameSource("None")
)

func init() {
	pulumi.RegisterOutputType(CacheIdentityTypeOutput{})
	pulumi.RegisterOutputType(CacheIdentityTypePtrOutput{})
}
