// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v20200301preview

import (
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// Organization resource.
type Organization struct {
	pulumi.CustomResourceState

	// The creation time of the resource.
	CreatedTime pulumi.StringOutput `pulumi:"createdTime"`
	// Location of Organization resource
	Location pulumi.StringPtrOutput `pulumi:"location"`
	// The name of the resource.
	Name pulumi.StringOutput `pulumi:"name"`
	// Confluent offer detail
	OfferDetail OrganizationResourcePropertiesResponseOfferDetailPtrOutput `pulumi:"offerDetail"`
	// Id of the Confluent organization.
	OrganizationId pulumi.StringOutput `pulumi:"organizationId"`
	// Provision states for confluent RP
	ProvisioningState pulumi.StringPtrOutput `pulumi:"provisioningState"`
	// SSO url for the Confluent organization.
	SsoUrl pulumi.StringOutput `pulumi:"ssoUrl"`
	// Organization resource tags
	Tags pulumi.StringMapOutput `pulumi:"tags"`
	// The type of the resource.
	Type pulumi.StringOutput `pulumi:"type"`
	// Subscriber detail
	UserDetail OrganizationResourcePropertiesResponseUserDetailPtrOutput `pulumi:"userDetail"`
}

// NewOrganization registers a new resource with the given unique name, arguments, and options.
func NewOrganization(ctx *pulumi.Context,
	name string, args *OrganizationArgs, opts ...pulumi.ResourceOption) (*Organization, error) {
	if args == nil || args.OrganizationName == nil {
		return nil, errors.New("missing required argument 'OrganizationName'")
	}
	if args == nil || args.ResourceGroupName == nil {
		return nil, errors.New("missing required argument 'ResourceGroupName'")
	}
	if args == nil {
		args = &OrganizationArgs{}
	}
	var resource Organization
	err := ctx.RegisterResource("azure-nextgen:confluent/v20200301preview:Organization", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetOrganization gets an existing Organization resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetOrganization(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *OrganizationState, opts ...pulumi.ResourceOption) (*Organization, error) {
	var resource Organization
	err := ctx.ReadResource("azure-nextgen:confluent/v20200301preview:Organization", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Organization resources.
type organizationState struct {
	// The creation time of the resource.
	CreatedTime *string `pulumi:"createdTime"`
	// Location of Organization resource
	Location *string `pulumi:"location"`
	// The name of the resource.
	Name *string `pulumi:"name"`
	// Confluent offer detail
	OfferDetail *OrganizationResourcePropertiesResponseOfferDetail `pulumi:"offerDetail"`
	// Id of the Confluent organization.
	OrganizationId *string `pulumi:"organizationId"`
	// Provision states for confluent RP
	ProvisioningState *string `pulumi:"provisioningState"`
	// SSO url for the Confluent organization.
	SsoUrl *string `pulumi:"ssoUrl"`
	// Organization resource tags
	Tags map[string]string `pulumi:"tags"`
	// The type of the resource.
	Type *string `pulumi:"type"`
	// Subscriber detail
	UserDetail *OrganizationResourcePropertiesResponseUserDetail `pulumi:"userDetail"`
}

type OrganizationState struct {
	// The creation time of the resource.
	CreatedTime pulumi.StringPtrInput
	// Location of Organization resource
	Location pulumi.StringPtrInput
	// The name of the resource.
	Name pulumi.StringPtrInput
	// Confluent offer detail
	OfferDetail OrganizationResourcePropertiesResponseOfferDetailPtrInput
	// Id of the Confluent organization.
	OrganizationId pulumi.StringPtrInput
	// Provision states for confluent RP
	ProvisioningState pulumi.StringPtrInput
	// SSO url for the Confluent organization.
	SsoUrl pulumi.StringPtrInput
	// Organization resource tags
	Tags pulumi.StringMapInput
	// The type of the resource.
	Type pulumi.StringPtrInput
	// Subscriber detail
	UserDetail OrganizationResourcePropertiesResponseUserDetailPtrInput
}

func (OrganizationState) ElementType() reflect.Type {
	return reflect.TypeOf((*organizationState)(nil)).Elem()
}

type organizationArgs struct {
	// Location of Organization resource
	Location *string `pulumi:"location"`
	// Confluent offer detail
	OfferDetail *OrganizationResourcePropertiesOfferDetail `pulumi:"offerDetail"`
	// Organization resource name
	OrganizationName string `pulumi:"organizationName"`
	// Provision states for confluent RP
	ProvisioningState *string `pulumi:"provisioningState"`
	// Resource group name
	ResourceGroupName string `pulumi:"resourceGroupName"`
	// Organization resource tags
	Tags map[string]string `pulumi:"tags"`
	// Subscriber detail
	UserDetail *OrganizationResourcePropertiesUserDetail `pulumi:"userDetail"`
}

// The set of arguments for constructing a Organization resource.
type OrganizationArgs struct {
	// Location of Organization resource
	Location pulumi.StringPtrInput
	// Confluent offer detail
	OfferDetail OrganizationResourcePropertiesOfferDetailPtrInput
	// Organization resource name
	OrganizationName pulumi.StringInput
	// Provision states for confluent RP
	ProvisioningState pulumi.StringPtrInput
	// Resource group name
	ResourceGroupName pulumi.StringInput
	// Organization resource tags
	Tags pulumi.StringMapInput
	// Subscriber detail
	UserDetail OrganizationResourcePropertiesUserDetailPtrInput
}

func (OrganizationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*organizationArgs)(nil)).Elem()
}
