// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package alertsmanagement

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Action rule with action group configuration
type ActionGroup struct {
	// Action group to trigger if action rule matches
	ActionGroupId string `pulumi:"actionGroupId"`
	// conditions on which alerts will be filtered
	Conditions *Conditions `pulumi:"conditions"`
	// Description of action rule
	Description *string `pulumi:"description"`
	// scope on which action rule will apply
	Scope *Scope `pulumi:"scope"`
	// Indicates if the given action rule is enabled or disabled
	Status *string `pulumi:"status"`
	// Indicates type of action rule
	// Expected value is 'ActionGroup'.
	Type string `pulumi:"type"`
}

// Action rule with action group configuration
type ActionGroupResponse struct {
	// Action group to trigger if action rule matches
	ActionGroupId string `pulumi:"actionGroupId"`
	// conditions on which alerts will be filtered
	Conditions *ConditionsResponse `pulumi:"conditions"`
	// Creation time of action rule. Date-Time in ISO-8601 format.
	CreatedAt string `pulumi:"createdAt"`
	// Created by user name.
	CreatedBy string `pulumi:"createdBy"`
	// Description of action rule
	Description *string `pulumi:"description"`
	// Last updated time of action rule. Date-Time in ISO-8601 format.
	LastModifiedAt string `pulumi:"lastModifiedAt"`
	// Last modified by user name.
	LastModifiedBy string `pulumi:"lastModifiedBy"`
	// scope on which action rule will apply
	Scope *ScopeResponse `pulumi:"scope"`
	// Indicates if the given action rule is enabled or disabled
	Status *string `pulumi:"status"`
	// Indicates type of action rule
	// Expected value is 'ActionGroup'.
	Type string `pulumi:"type"`
}

// The Action Groups information, used by the alert rule.
type ActionGroupsInformation struct {
	// An optional custom email subject to use in email notifications.
	CustomEmailSubject *string `pulumi:"customEmailSubject"`
	// An optional custom web-hook payload to use in web-hook notifications.
	CustomWebhookPayload *string `pulumi:"customWebhookPayload"`
	// The Action Group resource IDs.
	GroupIds []string `pulumi:"groupIds"`
}

// ActionGroupsInformationInput is an input type that accepts ActionGroupsInformationArgs and ActionGroupsInformationOutput values.
// You can construct a concrete instance of `ActionGroupsInformationInput` via:
//
//          ActionGroupsInformationArgs{...}
type ActionGroupsInformationInput interface {
	pulumi.Input

	ToActionGroupsInformationOutput() ActionGroupsInformationOutput
	ToActionGroupsInformationOutputWithContext(context.Context) ActionGroupsInformationOutput
}

// The Action Groups information, used by the alert rule.
type ActionGroupsInformationArgs struct {
	// An optional custom email subject to use in email notifications.
	CustomEmailSubject pulumi.StringPtrInput `pulumi:"customEmailSubject"`
	// An optional custom web-hook payload to use in web-hook notifications.
	CustomWebhookPayload pulumi.StringPtrInput `pulumi:"customWebhookPayload"`
	// The Action Group resource IDs.
	GroupIds pulumi.StringArrayInput `pulumi:"groupIds"`
}

func (ActionGroupsInformationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ActionGroupsInformation)(nil)).Elem()
}

func (i ActionGroupsInformationArgs) ToActionGroupsInformationOutput() ActionGroupsInformationOutput {
	return i.ToActionGroupsInformationOutputWithContext(context.Background())
}

func (i ActionGroupsInformationArgs) ToActionGroupsInformationOutputWithContext(ctx context.Context) ActionGroupsInformationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ActionGroupsInformationOutput)
}

// The Action Groups information, used by the alert rule.
type ActionGroupsInformationOutput struct{ *pulumi.OutputState }

func (ActionGroupsInformationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ActionGroupsInformation)(nil)).Elem()
}

func (o ActionGroupsInformationOutput) ToActionGroupsInformationOutput() ActionGroupsInformationOutput {
	return o
}

func (o ActionGroupsInformationOutput) ToActionGroupsInformationOutputWithContext(ctx context.Context) ActionGroupsInformationOutput {
	return o
}

// An optional custom email subject to use in email notifications.
func (o ActionGroupsInformationOutput) CustomEmailSubject() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ActionGroupsInformation) *string { return v.CustomEmailSubject }).(pulumi.StringPtrOutput)
}

// An optional custom web-hook payload to use in web-hook notifications.
func (o ActionGroupsInformationOutput) CustomWebhookPayload() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ActionGroupsInformation) *string { return v.CustomWebhookPayload }).(pulumi.StringPtrOutput)
}

// The Action Group resource IDs.
func (o ActionGroupsInformationOutput) GroupIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ActionGroupsInformation) []string { return v.GroupIds }).(pulumi.StringArrayOutput)
}

// The Action Groups information, used by the alert rule.
type ActionGroupsInformationResponse struct {
	// An optional custom email subject to use in email notifications.
	CustomEmailSubject *string `pulumi:"customEmailSubject"`
	// An optional custom web-hook payload to use in web-hook notifications.
	CustomWebhookPayload *string `pulumi:"customWebhookPayload"`
	// The Action Group resource IDs.
	GroupIds []string `pulumi:"groupIds"`
}

// The Action Groups information, used by the alert rule.
type ActionGroupsInformationResponseOutput struct{ *pulumi.OutputState }

func (ActionGroupsInformationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ActionGroupsInformationResponse)(nil)).Elem()
}

func (o ActionGroupsInformationResponseOutput) ToActionGroupsInformationResponseOutput() ActionGroupsInformationResponseOutput {
	return o
}

func (o ActionGroupsInformationResponseOutput) ToActionGroupsInformationResponseOutputWithContext(ctx context.Context) ActionGroupsInformationResponseOutput {
	return o
}

// An optional custom email subject to use in email notifications.
func (o ActionGroupsInformationResponseOutput) CustomEmailSubject() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ActionGroupsInformationResponse) *string { return v.CustomEmailSubject }).(pulumi.StringPtrOutput)
}

// An optional custom web-hook payload to use in web-hook notifications.
func (o ActionGroupsInformationResponseOutput) CustomWebhookPayload() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ActionGroupsInformationResponse) *string { return v.CustomWebhookPayload }).(pulumi.StringPtrOutput)
}

// The Action Group resource IDs.
func (o ActionGroupsInformationResponseOutput) GroupIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ActionGroupsInformationResponse) []string { return v.GroupIds }).(pulumi.StringArrayOutput)
}

// condition to trigger an action rule
type Condition struct {
	// operator for a given condition
	Operator *string `pulumi:"operator"`
	// list of values to match for a given condition.
	Values []string `pulumi:"values"`
}

// condition to trigger an action rule
type ConditionResponse struct {
	// operator for a given condition
	Operator *string `pulumi:"operator"`
	// list of values to match for a given condition.
	Values []string `pulumi:"values"`
}

// Conditions in alert instance to be matched for a given action rule. Default value is all. Multiple values could be provided with comma separation.
type Conditions struct {
	// filter alerts by alert context (payload)
	AlertContext *Condition `pulumi:"alertContext"`
	// filter alerts by alert rule id
	AlertRuleId *Condition `pulumi:"alertRuleId"`
	// filter alerts by alert rule description
	Description *Condition `pulumi:"description"`
	// filter alerts by monitor condition
	MonitorCondition *Condition `pulumi:"monitorCondition"`
	// filter alerts by monitor service
	MonitorService *Condition `pulumi:"monitorService"`
	// filter alerts by severity
	Severity *Condition `pulumi:"severity"`
	// filter alerts by target resource type
	TargetResourceType *Condition `pulumi:"targetResourceType"`
}

// Conditions in alert instance to be matched for a given action rule. Default value is all. Multiple values could be provided with comma separation.
type ConditionsResponse struct {
	// filter alerts by alert context (payload)
	AlertContext *ConditionResponse `pulumi:"alertContext"`
	// filter alerts by alert rule id
	AlertRuleId *ConditionResponse `pulumi:"alertRuleId"`
	// filter alerts by alert rule description
	Description *ConditionResponse `pulumi:"description"`
	// filter alerts by monitor condition
	MonitorCondition *ConditionResponse `pulumi:"monitorCondition"`
	// filter alerts by monitor service
	MonitorService *ConditionResponse `pulumi:"monitorService"`
	// filter alerts by severity
	Severity *ConditionResponse `pulumi:"severity"`
	// filter alerts by target resource type
	TargetResourceType *ConditionResponse `pulumi:"targetResourceType"`
}

// The detector information. By default this is not populated, unless it's specified in expandDetector
type Detector struct {
	// The Smart Detector description. By default this is not populated, unless it's specified in expandDetector
	Description *string `pulumi:"description"`
	// The detector id.
	Id string `pulumi:"id"`
	// The Smart Detector image path. By default this is not populated, unless it's specified in expandDetector
	ImagePaths []string `pulumi:"imagePaths"`
	// The Smart Detector name. By default this is not populated, unless it's specified in expandDetector
	Name *string `pulumi:"name"`
	// The detector's parameters.'
	Parameters map[string]interface{} `pulumi:"parameters"`
	// The Smart Detector supported resource types. By default this is not populated, unless it's specified in expandDetector
	SupportedResourceTypes []string `pulumi:"supportedResourceTypes"`
}

// DetectorInput is an input type that accepts DetectorArgs and DetectorOutput values.
// You can construct a concrete instance of `DetectorInput` via:
//
//          DetectorArgs{...}
type DetectorInput interface {
	pulumi.Input

	ToDetectorOutput() DetectorOutput
	ToDetectorOutputWithContext(context.Context) DetectorOutput
}

// The detector information. By default this is not populated, unless it's specified in expandDetector
type DetectorArgs struct {
	// The Smart Detector description. By default this is not populated, unless it's specified in expandDetector
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The detector id.
	Id pulumi.StringInput `pulumi:"id"`
	// The Smart Detector image path. By default this is not populated, unless it's specified in expandDetector
	ImagePaths pulumi.StringArrayInput `pulumi:"imagePaths"`
	// The Smart Detector name. By default this is not populated, unless it's specified in expandDetector
	Name pulumi.StringPtrInput `pulumi:"name"`
	// The detector's parameters.'
	Parameters pulumi.MapInput `pulumi:"parameters"`
	// The Smart Detector supported resource types. By default this is not populated, unless it's specified in expandDetector
	SupportedResourceTypes pulumi.StringArrayInput `pulumi:"supportedResourceTypes"`
}

func (DetectorArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Detector)(nil)).Elem()
}

func (i DetectorArgs) ToDetectorOutput() DetectorOutput {
	return i.ToDetectorOutputWithContext(context.Background())
}

func (i DetectorArgs) ToDetectorOutputWithContext(ctx context.Context) DetectorOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DetectorOutput)
}

// The detector information. By default this is not populated, unless it's specified in expandDetector
type DetectorOutput struct{ *pulumi.OutputState }

func (DetectorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Detector)(nil)).Elem()
}

func (o DetectorOutput) ToDetectorOutput() DetectorOutput {
	return o
}

func (o DetectorOutput) ToDetectorOutputWithContext(ctx context.Context) DetectorOutput {
	return o
}

// The Smart Detector description. By default this is not populated, unless it's specified in expandDetector
func (o DetectorOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Detector) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The detector id.
func (o DetectorOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v Detector) string { return v.Id }).(pulumi.StringOutput)
}

// The Smart Detector image path. By default this is not populated, unless it's specified in expandDetector
func (o DetectorOutput) ImagePaths() pulumi.StringArrayOutput {
	return o.ApplyT(func(v Detector) []string { return v.ImagePaths }).(pulumi.StringArrayOutput)
}

// The Smart Detector name. By default this is not populated, unless it's specified in expandDetector
func (o DetectorOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Detector) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The detector's parameters.'
func (o DetectorOutput) Parameters() pulumi.MapOutput {
	return o.ApplyT(func(v Detector) map[string]interface{} { return v.Parameters }).(pulumi.MapOutput)
}

// The Smart Detector supported resource types. By default this is not populated, unless it's specified in expandDetector
func (o DetectorOutput) SupportedResourceTypes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v Detector) []string { return v.SupportedResourceTypes }).(pulumi.StringArrayOutput)
}

// The detector information. By default this is not populated, unless it's specified in expandDetector
type DetectorResponse struct {
	// The Smart Detector description. By default this is not populated, unless it's specified in expandDetector
	Description *string `pulumi:"description"`
	// The detector id.
	Id string `pulumi:"id"`
	// The Smart Detector image path. By default this is not populated, unless it's specified in expandDetector
	ImagePaths []string `pulumi:"imagePaths"`
	// The Smart Detector name. By default this is not populated, unless it's specified in expandDetector
	Name *string `pulumi:"name"`
	// The detector's parameters.'
	Parameters map[string]interface{} `pulumi:"parameters"`
	// The Smart Detector supported resource types. By default this is not populated, unless it's specified in expandDetector
	SupportedResourceTypes []string `pulumi:"supportedResourceTypes"`
}

// The detector information. By default this is not populated, unless it's specified in expandDetector
type DetectorResponseOutput struct{ *pulumi.OutputState }

func (DetectorResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DetectorResponse)(nil)).Elem()
}

func (o DetectorResponseOutput) ToDetectorResponseOutput() DetectorResponseOutput {
	return o
}

func (o DetectorResponseOutput) ToDetectorResponseOutputWithContext(ctx context.Context) DetectorResponseOutput {
	return o
}

// The Smart Detector description. By default this is not populated, unless it's specified in expandDetector
func (o DetectorResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DetectorResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The detector id.
func (o DetectorResponseOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v DetectorResponse) string { return v.Id }).(pulumi.StringOutput)
}

// The Smart Detector image path. By default this is not populated, unless it's specified in expandDetector
func (o DetectorResponseOutput) ImagePaths() pulumi.StringArrayOutput {
	return o.ApplyT(func(v DetectorResponse) []string { return v.ImagePaths }).(pulumi.StringArrayOutput)
}

// The Smart Detector name. By default this is not populated, unless it's specified in expandDetector
func (o DetectorResponseOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DetectorResponse) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The detector's parameters.'
func (o DetectorResponseOutput) Parameters() pulumi.MapOutput {
	return o.ApplyT(func(v DetectorResponse) map[string]interface{} { return v.Parameters }).(pulumi.MapOutput)
}

// The Smart Detector supported resource types. By default this is not populated, unless it's specified in expandDetector
func (o DetectorResponseOutput) SupportedResourceTypes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v DetectorResponse) []string { return v.SupportedResourceTypes }).(pulumi.StringArrayOutput)
}

// Action rule with diagnostics configuration
type Diagnostics struct {
	// conditions on which alerts will be filtered
	Conditions *Conditions `pulumi:"conditions"`
	// Description of action rule
	Description *string `pulumi:"description"`
	// scope on which action rule will apply
	Scope *Scope `pulumi:"scope"`
	// Indicates if the given action rule is enabled or disabled
	Status *string `pulumi:"status"`
	// Indicates type of action rule
	// Expected value is 'Diagnostics'.
	Type string `pulumi:"type"`
}

// Action rule with diagnostics configuration
type DiagnosticsResponse struct {
	// conditions on which alerts will be filtered
	Conditions *ConditionsResponse `pulumi:"conditions"`
	// Creation time of action rule. Date-Time in ISO-8601 format.
	CreatedAt string `pulumi:"createdAt"`
	// Created by user name.
	CreatedBy string `pulumi:"createdBy"`
	// Description of action rule
	Description *string `pulumi:"description"`
	// Last updated time of action rule. Date-Time in ISO-8601 format.
	LastModifiedAt string `pulumi:"lastModifiedAt"`
	// Last modified by user name.
	LastModifiedBy string `pulumi:"lastModifiedBy"`
	// scope on which action rule will apply
	Scope *ScopeResponse `pulumi:"scope"`
	// Indicates if the given action rule is enabled or disabled
	Status *string `pulumi:"status"`
	// Indicates type of action rule
	// Expected value is 'Diagnostics'.
	Type string `pulumi:"type"`
}

// An alert action.
type HealthAlertAction struct {
	// the id of the action group to use.
	ActionGroupId *string `pulumi:"actionGroupId"`
	// The properties of a webhook object.
	WebHookProperties map[string]string `pulumi:"webHookProperties"`
}

// HealthAlertActionInput is an input type that accepts HealthAlertActionArgs and HealthAlertActionOutput values.
// You can construct a concrete instance of `HealthAlertActionInput` via:
//
//          HealthAlertActionArgs{...}
type HealthAlertActionInput interface {
	pulumi.Input

	ToHealthAlertActionOutput() HealthAlertActionOutput
	ToHealthAlertActionOutputWithContext(context.Context) HealthAlertActionOutput
}

// An alert action.
type HealthAlertActionArgs struct {
	// the id of the action group to use.
	ActionGroupId pulumi.StringPtrInput `pulumi:"actionGroupId"`
	// The properties of a webhook object.
	WebHookProperties pulumi.StringMapInput `pulumi:"webHookProperties"`
}

func (HealthAlertActionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HealthAlertAction)(nil)).Elem()
}

func (i HealthAlertActionArgs) ToHealthAlertActionOutput() HealthAlertActionOutput {
	return i.ToHealthAlertActionOutputWithContext(context.Background())
}

func (i HealthAlertActionArgs) ToHealthAlertActionOutputWithContext(ctx context.Context) HealthAlertActionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HealthAlertActionOutput)
}

// HealthAlertActionArrayInput is an input type that accepts HealthAlertActionArray and HealthAlertActionArrayOutput values.
// You can construct a concrete instance of `HealthAlertActionArrayInput` via:
//
//          HealthAlertActionArray{ HealthAlertActionArgs{...} }
type HealthAlertActionArrayInput interface {
	pulumi.Input

	ToHealthAlertActionArrayOutput() HealthAlertActionArrayOutput
	ToHealthAlertActionArrayOutputWithContext(context.Context) HealthAlertActionArrayOutput
}

type HealthAlertActionArray []HealthAlertActionInput

func (HealthAlertActionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]HealthAlertAction)(nil)).Elem()
}

func (i HealthAlertActionArray) ToHealthAlertActionArrayOutput() HealthAlertActionArrayOutput {
	return i.ToHealthAlertActionArrayOutputWithContext(context.Background())
}

func (i HealthAlertActionArray) ToHealthAlertActionArrayOutputWithContext(ctx context.Context) HealthAlertActionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HealthAlertActionArrayOutput)
}

// An alert action.
type HealthAlertActionOutput struct{ *pulumi.OutputState }

func (HealthAlertActionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HealthAlertAction)(nil)).Elem()
}

func (o HealthAlertActionOutput) ToHealthAlertActionOutput() HealthAlertActionOutput {
	return o
}

func (o HealthAlertActionOutput) ToHealthAlertActionOutputWithContext(ctx context.Context) HealthAlertActionOutput {
	return o
}

// the id of the action group to use.
func (o HealthAlertActionOutput) ActionGroupId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HealthAlertAction) *string { return v.ActionGroupId }).(pulumi.StringPtrOutput)
}

// The properties of a webhook object.
func (o HealthAlertActionOutput) WebHookProperties() pulumi.StringMapOutput {
	return o.ApplyT(func(v HealthAlertAction) map[string]string { return v.WebHookProperties }).(pulumi.StringMapOutput)
}

type HealthAlertActionArrayOutput struct{ *pulumi.OutputState }

func (HealthAlertActionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]HealthAlertAction)(nil)).Elem()
}

func (o HealthAlertActionArrayOutput) ToHealthAlertActionArrayOutput() HealthAlertActionArrayOutput {
	return o
}

func (o HealthAlertActionArrayOutput) ToHealthAlertActionArrayOutputWithContext(ctx context.Context) HealthAlertActionArrayOutput {
	return o
}

func (o HealthAlertActionArrayOutput) Index(i pulumi.IntInput) HealthAlertActionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) HealthAlertAction {
		return vs[0].([]HealthAlertAction)[vs[1].(int)]
	}).(HealthAlertActionOutput)
}

// An alert action.
type HealthAlertActionResponse struct {
	// the id of the action group to use.
	ActionGroupId *string `pulumi:"actionGroupId"`
	// The properties of a webhook object.
	WebHookProperties map[string]string `pulumi:"webHookProperties"`
}

// An alert action.
type HealthAlertActionResponseOutput struct{ *pulumi.OutputState }

func (HealthAlertActionResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HealthAlertActionResponse)(nil)).Elem()
}

func (o HealthAlertActionResponseOutput) ToHealthAlertActionResponseOutput() HealthAlertActionResponseOutput {
	return o
}

func (o HealthAlertActionResponseOutput) ToHealthAlertActionResponseOutputWithContext(ctx context.Context) HealthAlertActionResponseOutput {
	return o
}

// the id of the action group to use.
func (o HealthAlertActionResponseOutput) ActionGroupId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HealthAlertActionResponse) *string { return v.ActionGroupId }).(pulumi.StringPtrOutput)
}

// The properties of a webhook object.
func (o HealthAlertActionResponseOutput) WebHookProperties() pulumi.StringMapOutput {
	return o.ApplyT(func(v HealthAlertActionResponse) map[string]string { return v.WebHookProperties }).(pulumi.StringMapOutput)
}

type HealthAlertActionResponseArrayOutput struct{ *pulumi.OutputState }

func (HealthAlertActionResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]HealthAlertActionResponse)(nil)).Elem()
}

func (o HealthAlertActionResponseArrayOutput) ToHealthAlertActionResponseArrayOutput() HealthAlertActionResponseArrayOutput {
	return o
}

func (o HealthAlertActionResponseArrayOutput) ToHealthAlertActionResponseArrayOutputWithContext(ctx context.Context) HealthAlertActionResponseArrayOutput {
	return o
}

func (o HealthAlertActionResponseArrayOutput) Index(i pulumi.IntInput) HealthAlertActionResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) HealthAlertActionResponse {
		return vs[0].([]HealthAlertActionResponse)[vs[1].(int)]
	}).(HealthAlertActionResponseOutput)
}

// Specifies the resource health alert criteria for a single resource that has multiple metric criteria.
type HealthAlertCriteria struct {
	// The list of metric criteria for this 'all of' operation.
	AllOf []VmGuestHealthAlertCriterion `pulumi:"allOf"`
}

// HealthAlertCriteriaInput is an input type that accepts HealthAlertCriteriaArgs and HealthAlertCriteriaOutput values.
// You can construct a concrete instance of `HealthAlertCriteriaInput` via:
//
//          HealthAlertCriteriaArgs{...}
type HealthAlertCriteriaInput interface {
	pulumi.Input

	ToHealthAlertCriteriaOutput() HealthAlertCriteriaOutput
	ToHealthAlertCriteriaOutputWithContext(context.Context) HealthAlertCriteriaOutput
}

// Specifies the resource health alert criteria for a single resource that has multiple metric criteria.
type HealthAlertCriteriaArgs struct {
	// The list of metric criteria for this 'all of' operation.
	AllOf VmGuestHealthAlertCriterionArrayInput `pulumi:"allOf"`
}

func (HealthAlertCriteriaArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HealthAlertCriteria)(nil)).Elem()
}

func (i HealthAlertCriteriaArgs) ToHealthAlertCriteriaOutput() HealthAlertCriteriaOutput {
	return i.ToHealthAlertCriteriaOutputWithContext(context.Background())
}

func (i HealthAlertCriteriaArgs) ToHealthAlertCriteriaOutputWithContext(ctx context.Context) HealthAlertCriteriaOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HealthAlertCriteriaOutput)
}

// Specifies the resource health alert criteria for a single resource that has multiple metric criteria.
type HealthAlertCriteriaOutput struct{ *pulumi.OutputState }

func (HealthAlertCriteriaOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HealthAlertCriteria)(nil)).Elem()
}

func (o HealthAlertCriteriaOutput) ToHealthAlertCriteriaOutput() HealthAlertCriteriaOutput {
	return o
}

func (o HealthAlertCriteriaOutput) ToHealthAlertCriteriaOutputWithContext(ctx context.Context) HealthAlertCriteriaOutput {
	return o
}

// The list of metric criteria for this 'all of' operation.
func (o HealthAlertCriteriaOutput) AllOf() VmGuestHealthAlertCriterionArrayOutput {
	return o.ApplyT(func(v HealthAlertCriteria) []VmGuestHealthAlertCriterion { return v.AllOf }).(VmGuestHealthAlertCriterionArrayOutput)
}

// Specifies the resource health alert criteria for a single resource that has multiple metric criteria.
type HealthAlertCriteriaResponse struct {
	// The list of metric criteria for this 'all of' operation.
	AllOf []VmGuestHealthAlertCriterionResponse `pulumi:"allOf"`
}

// Specifies the resource health alert criteria for a single resource that has multiple metric criteria.
type HealthAlertCriteriaResponseOutput struct{ *pulumi.OutputState }

func (HealthAlertCriteriaResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HealthAlertCriteriaResponse)(nil)).Elem()
}

func (o HealthAlertCriteriaResponseOutput) ToHealthAlertCriteriaResponseOutput() HealthAlertCriteriaResponseOutput {
	return o
}

func (o HealthAlertCriteriaResponseOutput) ToHealthAlertCriteriaResponseOutputWithContext(ctx context.Context) HealthAlertCriteriaResponseOutput {
	return o
}

// The list of metric criteria for this 'all of' operation.
func (o HealthAlertCriteriaResponseOutput) AllOf() VmGuestHealthAlertCriterionResponseArrayOutput {
	return o.ApplyT(func(v HealthAlertCriteriaResponse) []VmGuestHealthAlertCriterionResponse { return v.AllOf }).(VmGuestHealthAlertCriterionResponseArrayOutput)
}

// Specifies the health state to alert on and the corresponding severity
type HealthState struct {
	// Health state name
	HealthStateName string `pulumi:"healthStateName"`
	// Severity of alert fired
	Severity float64 `pulumi:"severity"`
}

// HealthStateInput is an input type that accepts HealthStateArgs and HealthStateOutput values.
// You can construct a concrete instance of `HealthStateInput` via:
//
//          HealthStateArgs{...}
type HealthStateInput interface {
	pulumi.Input

	ToHealthStateOutput() HealthStateOutput
	ToHealthStateOutputWithContext(context.Context) HealthStateOutput
}

// Specifies the health state to alert on and the corresponding severity
type HealthStateArgs struct {
	// Health state name
	HealthStateName pulumi.StringInput `pulumi:"healthStateName"`
	// Severity of alert fired
	Severity pulumi.Float64Input `pulumi:"severity"`
}

func (HealthStateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HealthState)(nil)).Elem()
}

func (i HealthStateArgs) ToHealthStateOutput() HealthStateOutput {
	return i.ToHealthStateOutputWithContext(context.Background())
}

func (i HealthStateArgs) ToHealthStateOutputWithContext(ctx context.Context) HealthStateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HealthStateOutput)
}

// HealthStateArrayInput is an input type that accepts HealthStateArray and HealthStateArrayOutput values.
// You can construct a concrete instance of `HealthStateArrayInput` via:
//
//          HealthStateArray{ HealthStateArgs{...} }
type HealthStateArrayInput interface {
	pulumi.Input

	ToHealthStateArrayOutput() HealthStateArrayOutput
	ToHealthStateArrayOutputWithContext(context.Context) HealthStateArrayOutput
}

type HealthStateArray []HealthStateInput

func (HealthStateArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]HealthState)(nil)).Elem()
}

func (i HealthStateArray) ToHealthStateArrayOutput() HealthStateArrayOutput {
	return i.ToHealthStateArrayOutputWithContext(context.Background())
}

func (i HealthStateArray) ToHealthStateArrayOutputWithContext(ctx context.Context) HealthStateArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HealthStateArrayOutput)
}

// Specifies the health state to alert on and the corresponding severity
type HealthStateOutput struct{ *pulumi.OutputState }

func (HealthStateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HealthState)(nil)).Elem()
}

func (o HealthStateOutput) ToHealthStateOutput() HealthStateOutput {
	return o
}

func (o HealthStateOutput) ToHealthStateOutputWithContext(ctx context.Context) HealthStateOutput {
	return o
}

// Health state name
func (o HealthStateOutput) HealthStateName() pulumi.StringOutput {
	return o.ApplyT(func(v HealthState) string { return v.HealthStateName }).(pulumi.StringOutput)
}

// Severity of alert fired
func (o HealthStateOutput) Severity() pulumi.Float64Output {
	return o.ApplyT(func(v HealthState) float64 { return v.Severity }).(pulumi.Float64Output)
}

type HealthStateArrayOutput struct{ *pulumi.OutputState }

func (HealthStateArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]HealthState)(nil)).Elem()
}

func (o HealthStateArrayOutput) ToHealthStateArrayOutput() HealthStateArrayOutput {
	return o
}

func (o HealthStateArrayOutput) ToHealthStateArrayOutputWithContext(ctx context.Context) HealthStateArrayOutput {
	return o
}

func (o HealthStateArrayOutput) Index(i pulumi.IntInput) HealthStateOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) HealthState {
		return vs[0].([]HealthState)[vs[1].(int)]
	}).(HealthStateOutput)
}

// Specifies the health state to alert on and the corresponding severity
type HealthStateResponse struct {
	// Health state name
	HealthStateName string `pulumi:"healthStateName"`
	// Severity of alert fired
	Severity float64 `pulumi:"severity"`
}

// Specifies the health state to alert on and the corresponding severity
type HealthStateResponseOutput struct{ *pulumi.OutputState }

func (HealthStateResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HealthStateResponse)(nil)).Elem()
}

func (o HealthStateResponseOutput) ToHealthStateResponseOutput() HealthStateResponseOutput {
	return o
}

func (o HealthStateResponseOutput) ToHealthStateResponseOutputWithContext(ctx context.Context) HealthStateResponseOutput {
	return o
}

// Health state name
func (o HealthStateResponseOutput) HealthStateName() pulumi.StringOutput {
	return o.ApplyT(func(v HealthStateResponse) string { return v.HealthStateName }).(pulumi.StringOutput)
}

// Severity of alert fired
func (o HealthStateResponseOutput) Severity() pulumi.Float64Output {
	return o.ApplyT(func(v HealthStateResponse) float64 { return v.Severity }).(pulumi.Float64Output)
}

type HealthStateResponseArrayOutput struct{ *pulumi.OutputState }

func (HealthStateResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]HealthStateResponse)(nil)).Elem()
}

func (o HealthStateResponseArrayOutput) ToHealthStateResponseArrayOutput() HealthStateResponseArrayOutput {
	return o
}

func (o HealthStateResponseArrayOutput) ToHealthStateResponseArrayOutputWithContext(ctx context.Context) HealthStateResponseArrayOutput {
	return o
}

func (o HealthStateResponseArrayOutput) Index(i pulumi.IntInput) HealthStateResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) HealthStateResponse {
		return vs[0].([]HealthStateResponse)[vs[1].(int)]
	}).(HealthStateResponseOutput)
}

// Target scope for a given action rule. By default scope will be the subscription. User can also provide list of resource groups or list of resources from the scope subscription as well.
type Scope struct {
	// type of target scope
	ScopeType *string `pulumi:"scopeType"`
	// list of ARM IDs of the given scope type which will be the target of the given action rule.
	Values []string `pulumi:"values"`
}

// Target scope for a given action rule. By default scope will be the subscription. User can also provide list of resource groups or list of resources from the scope subscription as well.
type ScopeResponse struct {
	// type of target scope
	ScopeType *string `pulumi:"scopeType"`
	// list of ARM IDs of the given scope type which will be the target of the given action rule.
	Values []string `pulumi:"values"`
}

// Action rule with suppression configuration
type Suppression struct {
	// conditions on which alerts will be filtered
	Conditions *Conditions `pulumi:"conditions"`
	// Description of action rule
	Description *string `pulumi:"description"`
	// scope on which action rule will apply
	Scope *Scope `pulumi:"scope"`
	// Indicates if the given action rule is enabled or disabled
	Status *string `pulumi:"status"`
	// suppression configuration for the action rule
	SuppressionConfig SuppressionConfig `pulumi:"suppressionConfig"`
	// Indicates type of action rule
	// Expected value is 'Suppression'.
	Type string `pulumi:"type"`
}

// Suppression logic for a given action rule
type SuppressionConfig struct {
	// Specifies when the suppression should be applied
	RecurrenceType string `pulumi:"recurrenceType"`
	// suppression schedule configuration
	Schedule *SuppressionSchedule `pulumi:"schedule"`
}

// Suppression logic for a given action rule
type SuppressionConfigResponse struct {
	// Specifies when the suppression should be applied
	RecurrenceType string `pulumi:"recurrenceType"`
	// suppression schedule configuration
	Schedule *SuppressionScheduleResponse `pulumi:"schedule"`
}

// Action rule with suppression configuration
type SuppressionResponse struct {
	// conditions on which alerts will be filtered
	Conditions *ConditionsResponse `pulumi:"conditions"`
	// Creation time of action rule. Date-Time in ISO-8601 format.
	CreatedAt string `pulumi:"createdAt"`
	// Created by user name.
	CreatedBy string `pulumi:"createdBy"`
	// Description of action rule
	Description *string `pulumi:"description"`
	// Last updated time of action rule. Date-Time in ISO-8601 format.
	LastModifiedAt string `pulumi:"lastModifiedAt"`
	// Last modified by user name.
	LastModifiedBy string `pulumi:"lastModifiedBy"`
	// scope on which action rule will apply
	Scope *ScopeResponse `pulumi:"scope"`
	// Indicates if the given action rule is enabled or disabled
	Status *string `pulumi:"status"`
	// suppression configuration for the action rule
	SuppressionConfig SuppressionConfigResponse `pulumi:"suppressionConfig"`
	// Indicates type of action rule
	// Expected value is 'Suppression'.
	Type string `pulumi:"type"`
}

// Schedule for a given suppression configuration.
type SuppressionSchedule struct {
	// End date for suppression
	EndDate *string `pulumi:"endDate"`
	// End date for suppression
	EndTime *string `pulumi:"endTime"`
	// Specifies the values for recurrence pattern
	RecurrenceValues []int `pulumi:"recurrenceValues"`
	// Start date for suppression
	StartDate *string `pulumi:"startDate"`
	// Start time for suppression
	StartTime *string `pulumi:"startTime"`
}

// Schedule for a given suppression configuration.
type SuppressionScheduleResponse struct {
	// End date for suppression
	EndDate *string `pulumi:"endDate"`
	// End date for suppression
	EndTime *string `pulumi:"endTime"`
	// Specifies the values for recurrence pattern
	RecurrenceValues []int `pulumi:"recurrenceValues"`
	// Start date for suppression
	StartDate *string `pulumi:"startDate"`
	// Start time for suppression
	StartTime *string `pulumi:"startTime"`
}

// Optional throttling information for the alert rule.
type ThrottlingInformation struct {
	// The required duration (in ISO8601 format) to wait before notifying on the alert rule again. The time granularity must be in minutes and minimum value is 0 minutes
	Duration *string `pulumi:"duration"`
}

// ThrottlingInformationInput is an input type that accepts ThrottlingInformationArgs and ThrottlingInformationOutput values.
// You can construct a concrete instance of `ThrottlingInformationInput` via:
//
//          ThrottlingInformationArgs{...}
type ThrottlingInformationInput interface {
	pulumi.Input

	ToThrottlingInformationOutput() ThrottlingInformationOutput
	ToThrottlingInformationOutputWithContext(context.Context) ThrottlingInformationOutput
}

// Optional throttling information for the alert rule.
type ThrottlingInformationArgs struct {
	// The required duration (in ISO8601 format) to wait before notifying on the alert rule again. The time granularity must be in minutes and minimum value is 0 minutes
	Duration pulumi.StringPtrInput `pulumi:"duration"`
}

func (ThrottlingInformationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ThrottlingInformation)(nil)).Elem()
}

func (i ThrottlingInformationArgs) ToThrottlingInformationOutput() ThrottlingInformationOutput {
	return i.ToThrottlingInformationOutputWithContext(context.Background())
}

func (i ThrottlingInformationArgs) ToThrottlingInformationOutputWithContext(ctx context.Context) ThrottlingInformationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThrottlingInformationOutput)
}

func (i ThrottlingInformationArgs) ToThrottlingInformationPtrOutput() ThrottlingInformationPtrOutput {
	return i.ToThrottlingInformationPtrOutputWithContext(context.Background())
}

func (i ThrottlingInformationArgs) ToThrottlingInformationPtrOutputWithContext(ctx context.Context) ThrottlingInformationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThrottlingInformationOutput).ToThrottlingInformationPtrOutputWithContext(ctx)
}

// ThrottlingInformationPtrInput is an input type that accepts ThrottlingInformationArgs, ThrottlingInformationPtr and ThrottlingInformationPtrOutput values.
// You can construct a concrete instance of `ThrottlingInformationPtrInput` via:
//
//          ThrottlingInformationArgs{...}
//
//  or:
//
//          nil
type ThrottlingInformationPtrInput interface {
	pulumi.Input

	ToThrottlingInformationPtrOutput() ThrottlingInformationPtrOutput
	ToThrottlingInformationPtrOutputWithContext(context.Context) ThrottlingInformationPtrOutput
}

type throttlingInformationPtrType ThrottlingInformationArgs

func ThrottlingInformationPtr(v *ThrottlingInformationArgs) ThrottlingInformationPtrInput {
	return (*throttlingInformationPtrType)(v)
}

func (*throttlingInformationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ThrottlingInformation)(nil)).Elem()
}

func (i *throttlingInformationPtrType) ToThrottlingInformationPtrOutput() ThrottlingInformationPtrOutput {
	return i.ToThrottlingInformationPtrOutputWithContext(context.Background())
}

func (i *throttlingInformationPtrType) ToThrottlingInformationPtrOutputWithContext(ctx context.Context) ThrottlingInformationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThrottlingInformationPtrOutput)
}

// Optional throttling information for the alert rule.
type ThrottlingInformationOutput struct{ *pulumi.OutputState }

func (ThrottlingInformationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ThrottlingInformation)(nil)).Elem()
}

func (o ThrottlingInformationOutput) ToThrottlingInformationOutput() ThrottlingInformationOutput {
	return o
}

func (o ThrottlingInformationOutput) ToThrottlingInformationOutputWithContext(ctx context.Context) ThrottlingInformationOutput {
	return o
}

func (o ThrottlingInformationOutput) ToThrottlingInformationPtrOutput() ThrottlingInformationPtrOutput {
	return o.ToThrottlingInformationPtrOutputWithContext(context.Background())
}

func (o ThrottlingInformationOutput) ToThrottlingInformationPtrOutputWithContext(ctx context.Context) ThrottlingInformationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ThrottlingInformation) *ThrottlingInformation {
		return &v
	}).(ThrottlingInformationPtrOutput)
}

// The required duration (in ISO8601 format) to wait before notifying on the alert rule again. The time granularity must be in minutes and minimum value is 0 minutes
func (o ThrottlingInformationOutput) Duration() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThrottlingInformation) *string { return v.Duration }).(pulumi.StringPtrOutput)
}

type ThrottlingInformationPtrOutput struct{ *pulumi.OutputState }

func (ThrottlingInformationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ThrottlingInformation)(nil)).Elem()
}

func (o ThrottlingInformationPtrOutput) ToThrottlingInformationPtrOutput() ThrottlingInformationPtrOutput {
	return o
}

func (o ThrottlingInformationPtrOutput) ToThrottlingInformationPtrOutputWithContext(ctx context.Context) ThrottlingInformationPtrOutput {
	return o
}

func (o ThrottlingInformationPtrOutput) Elem() ThrottlingInformationOutput {
	return o.ApplyT(func(v *ThrottlingInformation) ThrottlingInformation {
		if v != nil {
			return *v
		}
		var ret ThrottlingInformation
		return ret
	}).(ThrottlingInformationOutput)
}

// The required duration (in ISO8601 format) to wait before notifying on the alert rule again. The time granularity must be in minutes and minimum value is 0 minutes
func (o ThrottlingInformationPtrOutput) Duration() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ThrottlingInformation) *string {
		if v == nil {
			return nil
		}
		return v.Duration
	}).(pulumi.StringPtrOutput)
}

// Optional throttling information for the alert rule.
type ThrottlingInformationResponse struct {
	// The required duration (in ISO8601 format) to wait before notifying on the alert rule again. The time granularity must be in minutes and minimum value is 0 minutes
	Duration *string `pulumi:"duration"`
}

// Optional throttling information for the alert rule.
type ThrottlingInformationResponseOutput struct{ *pulumi.OutputState }

func (ThrottlingInformationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ThrottlingInformationResponse)(nil)).Elem()
}

func (o ThrottlingInformationResponseOutput) ToThrottlingInformationResponseOutput() ThrottlingInformationResponseOutput {
	return o
}

func (o ThrottlingInformationResponseOutput) ToThrottlingInformationResponseOutputWithContext(ctx context.Context) ThrottlingInformationResponseOutput {
	return o
}

// The required duration (in ISO8601 format) to wait before notifying on the alert rule again. The time granularity must be in minutes and minimum value is 0 minutes
func (o ThrottlingInformationResponseOutput) Duration() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThrottlingInformationResponse) *string { return v.Duration }).(pulumi.StringPtrOutput)
}

type ThrottlingInformationResponsePtrOutput struct{ *pulumi.OutputState }

func (ThrottlingInformationResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ThrottlingInformationResponse)(nil)).Elem()
}

func (o ThrottlingInformationResponsePtrOutput) ToThrottlingInformationResponsePtrOutput() ThrottlingInformationResponsePtrOutput {
	return o
}

func (o ThrottlingInformationResponsePtrOutput) ToThrottlingInformationResponsePtrOutputWithContext(ctx context.Context) ThrottlingInformationResponsePtrOutput {
	return o
}

func (o ThrottlingInformationResponsePtrOutput) Elem() ThrottlingInformationResponseOutput {
	return o.ApplyT(func(v *ThrottlingInformationResponse) ThrottlingInformationResponse {
		if v != nil {
			return *v
		}
		var ret ThrottlingInformationResponse
		return ret
	}).(ThrottlingInformationResponseOutput)
}

// The required duration (in ISO8601 format) to wait before notifying on the alert rule again. The time granularity must be in minutes and minimum value is 0 minutes
func (o ThrottlingInformationResponsePtrOutput) Duration() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ThrottlingInformationResponse) *string {
		if v == nil {
			return nil
		}
		return v.Duration
	}).(pulumi.StringPtrOutput)
}

// Specifies the health alert criteria to alert on.
type VmGuestHealthAlertCriterion struct {
	// Health states to alert on
	HealthStates []HealthState `pulumi:"healthStates"`
	// Names of health monitor on which to define alert
	MonitorNames []string `pulumi:"monitorNames"`
	// Names of health monitor type on which to define alert
	MonitorTypes []string `pulumi:"monitorTypes"`
	// specifies the type of the alert criterion.
	// Expected value is 'GuestVmHealth'.
	Namespace string `pulumi:"namespace"`
}

// VmGuestHealthAlertCriterionInput is an input type that accepts VmGuestHealthAlertCriterionArgs and VmGuestHealthAlertCriterionOutput values.
// You can construct a concrete instance of `VmGuestHealthAlertCriterionInput` via:
//
//          VmGuestHealthAlertCriterionArgs{...}
type VmGuestHealthAlertCriterionInput interface {
	pulumi.Input

	ToVmGuestHealthAlertCriterionOutput() VmGuestHealthAlertCriterionOutput
	ToVmGuestHealthAlertCriterionOutputWithContext(context.Context) VmGuestHealthAlertCriterionOutput
}

// Specifies the health alert criteria to alert on.
type VmGuestHealthAlertCriterionArgs struct {
	// Health states to alert on
	HealthStates HealthStateArrayInput `pulumi:"healthStates"`
	// Names of health monitor on which to define alert
	MonitorNames pulumi.StringArrayInput `pulumi:"monitorNames"`
	// Names of health monitor type on which to define alert
	MonitorTypes pulumi.StringArrayInput `pulumi:"monitorTypes"`
	// specifies the type of the alert criterion.
	// Expected value is 'GuestVmHealth'.
	Namespace pulumi.StringInput `pulumi:"namespace"`
}

func (VmGuestHealthAlertCriterionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VmGuestHealthAlertCriterion)(nil)).Elem()
}

func (i VmGuestHealthAlertCriterionArgs) ToVmGuestHealthAlertCriterionOutput() VmGuestHealthAlertCriterionOutput {
	return i.ToVmGuestHealthAlertCriterionOutputWithContext(context.Background())
}

func (i VmGuestHealthAlertCriterionArgs) ToVmGuestHealthAlertCriterionOutputWithContext(ctx context.Context) VmGuestHealthAlertCriterionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VmGuestHealthAlertCriterionOutput)
}

// VmGuestHealthAlertCriterionArrayInput is an input type that accepts VmGuestHealthAlertCriterionArray and VmGuestHealthAlertCriterionArrayOutput values.
// You can construct a concrete instance of `VmGuestHealthAlertCriterionArrayInput` via:
//
//          VmGuestHealthAlertCriterionArray{ VmGuestHealthAlertCriterionArgs{...} }
type VmGuestHealthAlertCriterionArrayInput interface {
	pulumi.Input

	ToVmGuestHealthAlertCriterionArrayOutput() VmGuestHealthAlertCriterionArrayOutput
	ToVmGuestHealthAlertCriterionArrayOutputWithContext(context.Context) VmGuestHealthAlertCriterionArrayOutput
}

type VmGuestHealthAlertCriterionArray []VmGuestHealthAlertCriterionInput

func (VmGuestHealthAlertCriterionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]VmGuestHealthAlertCriterion)(nil)).Elem()
}

func (i VmGuestHealthAlertCriterionArray) ToVmGuestHealthAlertCriterionArrayOutput() VmGuestHealthAlertCriterionArrayOutput {
	return i.ToVmGuestHealthAlertCriterionArrayOutputWithContext(context.Background())
}

func (i VmGuestHealthAlertCriterionArray) ToVmGuestHealthAlertCriterionArrayOutputWithContext(ctx context.Context) VmGuestHealthAlertCriterionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VmGuestHealthAlertCriterionArrayOutput)
}

// Specifies the health alert criteria to alert on.
type VmGuestHealthAlertCriterionOutput struct{ *pulumi.OutputState }

func (VmGuestHealthAlertCriterionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VmGuestHealthAlertCriterion)(nil)).Elem()
}

func (o VmGuestHealthAlertCriterionOutput) ToVmGuestHealthAlertCriterionOutput() VmGuestHealthAlertCriterionOutput {
	return o
}

func (o VmGuestHealthAlertCriterionOutput) ToVmGuestHealthAlertCriterionOutputWithContext(ctx context.Context) VmGuestHealthAlertCriterionOutput {
	return o
}

// Health states to alert on
func (o VmGuestHealthAlertCriterionOutput) HealthStates() HealthStateArrayOutput {
	return o.ApplyT(func(v VmGuestHealthAlertCriterion) []HealthState { return v.HealthStates }).(HealthStateArrayOutput)
}

// Names of health monitor on which to define alert
func (o VmGuestHealthAlertCriterionOutput) MonitorNames() pulumi.StringArrayOutput {
	return o.ApplyT(func(v VmGuestHealthAlertCriterion) []string { return v.MonitorNames }).(pulumi.StringArrayOutput)
}

// Names of health monitor type on which to define alert
func (o VmGuestHealthAlertCriterionOutput) MonitorTypes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v VmGuestHealthAlertCriterion) []string { return v.MonitorTypes }).(pulumi.StringArrayOutput)
}

// specifies the type of the alert criterion.
// Expected value is 'GuestVmHealth'.
func (o VmGuestHealthAlertCriterionOutput) Namespace() pulumi.StringOutput {
	return o.ApplyT(func(v VmGuestHealthAlertCriterion) string { return v.Namespace }).(pulumi.StringOutput)
}

type VmGuestHealthAlertCriterionArrayOutput struct{ *pulumi.OutputState }

func (VmGuestHealthAlertCriterionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]VmGuestHealthAlertCriterion)(nil)).Elem()
}

func (o VmGuestHealthAlertCriterionArrayOutput) ToVmGuestHealthAlertCriterionArrayOutput() VmGuestHealthAlertCriterionArrayOutput {
	return o
}

func (o VmGuestHealthAlertCriterionArrayOutput) ToVmGuestHealthAlertCriterionArrayOutputWithContext(ctx context.Context) VmGuestHealthAlertCriterionArrayOutput {
	return o
}

func (o VmGuestHealthAlertCriterionArrayOutput) Index(i pulumi.IntInput) VmGuestHealthAlertCriterionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) VmGuestHealthAlertCriterion {
		return vs[0].([]VmGuestHealthAlertCriterion)[vs[1].(int)]
	}).(VmGuestHealthAlertCriterionOutput)
}

// Specifies the health alert criteria to alert on.
type VmGuestHealthAlertCriterionResponse struct {
	// Health states to alert on
	HealthStates []HealthStateResponse `pulumi:"healthStates"`
	// Names of health monitor on which to define alert
	MonitorNames []string `pulumi:"monitorNames"`
	// Names of health monitor type on which to define alert
	MonitorTypes []string `pulumi:"monitorTypes"`
	// specifies the type of the alert criterion.
	// Expected value is 'GuestVmHealth'.
	Namespace string `pulumi:"namespace"`
}

// Specifies the health alert criteria to alert on.
type VmGuestHealthAlertCriterionResponseOutput struct{ *pulumi.OutputState }

func (VmGuestHealthAlertCriterionResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VmGuestHealthAlertCriterionResponse)(nil)).Elem()
}

func (o VmGuestHealthAlertCriterionResponseOutput) ToVmGuestHealthAlertCriterionResponseOutput() VmGuestHealthAlertCriterionResponseOutput {
	return o
}

func (o VmGuestHealthAlertCriterionResponseOutput) ToVmGuestHealthAlertCriterionResponseOutputWithContext(ctx context.Context) VmGuestHealthAlertCriterionResponseOutput {
	return o
}

// Health states to alert on
func (o VmGuestHealthAlertCriterionResponseOutput) HealthStates() HealthStateResponseArrayOutput {
	return o.ApplyT(func(v VmGuestHealthAlertCriterionResponse) []HealthStateResponse { return v.HealthStates }).(HealthStateResponseArrayOutput)
}

// Names of health monitor on which to define alert
func (o VmGuestHealthAlertCriterionResponseOutput) MonitorNames() pulumi.StringArrayOutput {
	return o.ApplyT(func(v VmGuestHealthAlertCriterionResponse) []string { return v.MonitorNames }).(pulumi.StringArrayOutput)
}

// Names of health monitor type on which to define alert
func (o VmGuestHealthAlertCriterionResponseOutput) MonitorTypes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v VmGuestHealthAlertCriterionResponse) []string { return v.MonitorTypes }).(pulumi.StringArrayOutput)
}

// specifies the type of the alert criterion.
// Expected value is 'GuestVmHealth'.
func (o VmGuestHealthAlertCriterionResponseOutput) Namespace() pulumi.StringOutput {
	return o.ApplyT(func(v VmGuestHealthAlertCriterionResponse) string { return v.Namespace }).(pulumi.StringOutput)
}

type VmGuestHealthAlertCriterionResponseArrayOutput struct{ *pulumi.OutputState }

func (VmGuestHealthAlertCriterionResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]VmGuestHealthAlertCriterionResponse)(nil)).Elem()
}

func (o VmGuestHealthAlertCriterionResponseArrayOutput) ToVmGuestHealthAlertCriterionResponseArrayOutput() VmGuestHealthAlertCriterionResponseArrayOutput {
	return o
}

func (o VmGuestHealthAlertCriterionResponseArrayOutput) ToVmGuestHealthAlertCriterionResponseArrayOutputWithContext(ctx context.Context) VmGuestHealthAlertCriterionResponseArrayOutput {
	return o
}

func (o VmGuestHealthAlertCriterionResponseArrayOutput) Index(i pulumi.IntInput) VmGuestHealthAlertCriterionResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) VmGuestHealthAlertCriterionResponse {
		return vs[0].([]VmGuestHealthAlertCriterionResponse)[vs[1].(int)]
	}).(VmGuestHealthAlertCriterionResponseOutput)
}

func init() {
	pulumi.RegisterOutputType(ActionGroupsInformationOutput{})
	pulumi.RegisterOutputType(ActionGroupsInformationResponseOutput{})
	pulumi.RegisterOutputType(DetectorOutput{})
	pulumi.RegisterOutputType(DetectorResponseOutput{})
	pulumi.RegisterOutputType(HealthAlertActionOutput{})
	pulumi.RegisterOutputType(HealthAlertActionArrayOutput{})
	pulumi.RegisterOutputType(HealthAlertActionResponseOutput{})
	pulumi.RegisterOutputType(HealthAlertActionResponseArrayOutput{})
	pulumi.RegisterOutputType(HealthAlertCriteriaOutput{})
	pulumi.RegisterOutputType(HealthAlertCriteriaResponseOutput{})
	pulumi.RegisterOutputType(HealthStateOutput{})
	pulumi.RegisterOutputType(HealthStateArrayOutput{})
	pulumi.RegisterOutputType(HealthStateResponseOutput{})
	pulumi.RegisterOutputType(HealthStateResponseArrayOutput{})
	pulumi.RegisterOutputType(ThrottlingInformationOutput{})
	pulumi.RegisterOutputType(ThrottlingInformationPtrOutput{})
	pulumi.RegisterOutputType(ThrottlingInformationResponseOutput{})
	pulumi.RegisterOutputType(ThrottlingInformationResponsePtrOutput{})
	pulumi.RegisterOutputType(VmGuestHealthAlertCriterionOutput{})
	pulumi.RegisterOutputType(VmGuestHealthAlertCriterionArrayOutput{})
	pulumi.RegisterOutputType(VmGuestHealthAlertCriterionResponseOutput{})
	pulumi.RegisterOutputType(VmGuestHealthAlertCriterionResponseArrayOutput{})
}
