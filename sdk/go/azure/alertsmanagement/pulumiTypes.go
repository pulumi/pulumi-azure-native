// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package alertsmanagement

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// Action rule with action group configuration
type ActionGroup struct {
	// Action group to trigger if action rule matches
	ActionGroupId string `pulumi:"actionGroupId"`
	// conditions on which alerts will be filtered
	Conditions *Conditions `pulumi:"conditions"`
	// Description of action rule
	Description *string `pulumi:"description"`
	// scope on which action rule will apply
	Scope *Scope `pulumi:"scope"`
	// Indicates if the given action rule is enabled or disabled
	Status *string `pulumi:"status"`
	// Indicates type of action rule
	// Expected value is 'ActionGroup'.
	Type string `pulumi:"type"`
}

// ActionGroupInput is an input type that accepts ActionGroupArgs and ActionGroupOutput values.
// You can construct a concrete instance of `ActionGroupInput` via:
//
//          ActionGroupArgs{...}
type ActionGroupInput interface {
	pulumi.Input

	ToActionGroupOutput() ActionGroupOutput
	ToActionGroupOutputWithContext(context.Context) ActionGroupOutput
}

// Action rule with action group configuration
type ActionGroupArgs struct {
	// Action group to trigger if action rule matches
	ActionGroupId pulumi.StringInput `pulumi:"actionGroupId"`
	// conditions on which alerts will be filtered
	Conditions ConditionsPtrInput `pulumi:"conditions"`
	// Description of action rule
	Description pulumi.StringPtrInput `pulumi:"description"`
	// scope on which action rule will apply
	Scope ScopePtrInput `pulumi:"scope"`
	// Indicates if the given action rule is enabled or disabled
	Status pulumi.StringPtrInput `pulumi:"status"`
	// Indicates type of action rule
	// Expected value is 'ActionGroup'.
	Type pulumi.StringInput `pulumi:"type"`
}

func (ActionGroupArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ActionGroup)(nil)).Elem()
}

func (i ActionGroupArgs) ToActionGroupOutput() ActionGroupOutput {
	return i.ToActionGroupOutputWithContext(context.Background())
}

func (i ActionGroupArgs) ToActionGroupOutputWithContext(ctx context.Context) ActionGroupOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ActionGroupOutput)
}

// Action rule with action group configuration
type ActionGroupOutput struct{ *pulumi.OutputState }

func (ActionGroupOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ActionGroup)(nil)).Elem()
}

func (o ActionGroupOutput) ToActionGroupOutput() ActionGroupOutput {
	return o
}

func (o ActionGroupOutput) ToActionGroupOutputWithContext(ctx context.Context) ActionGroupOutput {
	return o
}

// Action group to trigger if action rule matches
func (o ActionGroupOutput) ActionGroupId() pulumi.StringOutput {
	return o.ApplyT(func(v ActionGroup) string { return v.ActionGroupId }).(pulumi.StringOutput)
}

// conditions on which alerts will be filtered
func (o ActionGroupOutput) Conditions() ConditionsPtrOutput {
	return o.ApplyT(func(v ActionGroup) *Conditions { return v.Conditions }).(ConditionsPtrOutput)
}

// Description of action rule
func (o ActionGroupOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ActionGroup) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// scope on which action rule will apply
func (o ActionGroupOutput) Scope() ScopePtrOutput {
	return o.ApplyT(func(v ActionGroup) *Scope { return v.Scope }).(ScopePtrOutput)
}

// Indicates if the given action rule is enabled or disabled
func (o ActionGroupOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ActionGroup) *string { return v.Status }).(pulumi.StringPtrOutput)
}

// Indicates type of action rule
// Expected value is 'ActionGroup'.
func (o ActionGroupOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ActionGroup) string { return v.Type }).(pulumi.StringOutput)
}

// Action rule with action group configuration
type ActionGroupResponse struct {
	// Action group to trigger if action rule matches
	ActionGroupId string `pulumi:"actionGroupId"`
	// conditions on which alerts will be filtered
	Conditions *ConditionsResponse `pulumi:"conditions"`
	// Creation time of action rule. Date-Time in ISO-8601 format.
	CreatedAt string `pulumi:"createdAt"`
	// Created by user name.
	CreatedBy string `pulumi:"createdBy"`
	// Description of action rule
	Description *string `pulumi:"description"`
	// Last updated time of action rule. Date-Time in ISO-8601 format.
	LastModifiedAt string `pulumi:"lastModifiedAt"`
	// Last modified by user name.
	LastModifiedBy string `pulumi:"lastModifiedBy"`
	// scope on which action rule will apply
	Scope *ScopeResponse `pulumi:"scope"`
	// Indicates if the given action rule is enabled or disabled
	Status *string `pulumi:"status"`
	// Indicates type of action rule
	// Expected value is 'ActionGroup'.
	Type string `pulumi:"type"`
}

// ActionGroupResponseInput is an input type that accepts ActionGroupResponseArgs and ActionGroupResponseOutput values.
// You can construct a concrete instance of `ActionGroupResponseInput` via:
//
//          ActionGroupResponseArgs{...}
type ActionGroupResponseInput interface {
	pulumi.Input

	ToActionGroupResponseOutput() ActionGroupResponseOutput
	ToActionGroupResponseOutputWithContext(context.Context) ActionGroupResponseOutput
}

// Action rule with action group configuration
type ActionGroupResponseArgs struct {
	// Action group to trigger if action rule matches
	ActionGroupId pulumi.StringInput `pulumi:"actionGroupId"`
	// conditions on which alerts will be filtered
	Conditions ConditionsResponsePtrInput `pulumi:"conditions"`
	// Creation time of action rule. Date-Time in ISO-8601 format.
	CreatedAt pulumi.StringInput `pulumi:"createdAt"`
	// Created by user name.
	CreatedBy pulumi.StringInput `pulumi:"createdBy"`
	// Description of action rule
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Last updated time of action rule. Date-Time in ISO-8601 format.
	LastModifiedAt pulumi.StringInput `pulumi:"lastModifiedAt"`
	// Last modified by user name.
	LastModifiedBy pulumi.StringInput `pulumi:"lastModifiedBy"`
	// scope on which action rule will apply
	Scope ScopeResponsePtrInput `pulumi:"scope"`
	// Indicates if the given action rule is enabled or disabled
	Status pulumi.StringPtrInput `pulumi:"status"`
	// Indicates type of action rule
	// Expected value is 'ActionGroup'.
	Type pulumi.StringInput `pulumi:"type"`
}

func (ActionGroupResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ActionGroupResponse)(nil)).Elem()
}

func (i ActionGroupResponseArgs) ToActionGroupResponseOutput() ActionGroupResponseOutput {
	return i.ToActionGroupResponseOutputWithContext(context.Background())
}

func (i ActionGroupResponseArgs) ToActionGroupResponseOutputWithContext(ctx context.Context) ActionGroupResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ActionGroupResponseOutput)
}

// Action rule with action group configuration
type ActionGroupResponseOutput struct{ *pulumi.OutputState }

func (ActionGroupResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ActionGroupResponse)(nil)).Elem()
}

func (o ActionGroupResponseOutput) ToActionGroupResponseOutput() ActionGroupResponseOutput {
	return o
}

func (o ActionGroupResponseOutput) ToActionGroupResponseOutputWithContext(ctx context.Context) ActionGroupResponseOutput {
	return o
}

// Action group to trigger if action rule matches
func (o ActionGroupResponseOutput) ActionGroupId() pulumi.StringOutput {
	return o.ApplyT(func(v ActionGroupResponse) string { return v.ActionGroupId }).(pulumi.StringOutput)
}

// conditions on which alerts will be filtered
func (o ActionGroupResponseOutput) Conditions() ConditionsResponsePtrOutput {
	return o.ApplyT(func(v ActionGroupResponse) *ConditionsResponse { return v.Conditions }).(ConditionsResponsePtrOutput)
}

// Creation time of action rule. Date-Time in ISO-8601 format.
func (o ActionGroupResponseOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v ActionGroupResponse) string { return v.CreatedAt }).(pulumi.StringOutput)
}

// Created by user name.
func (o ActionGroupResponseOutput) CreatedBy() pulumi.StringOutput {
	return o.ApplyT(func(v ActionGroupResponse) string { return v.CreatedBy }).(pulumi.StringOutput)
}

// Description of action rule
func (o ActionGroupResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ActionGroupResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Last updated time of action rule. Date-Time in ISO-8601 format.
func (o ActionGroupResponseOutput) LastModifiedAt() pulumi.StringOutput {
	return o.ApplyT(func(v ActionGroupResponse) string { return v.LastModifiedAt }).(pulumi.StringOutput)
}

// Last modified by user name.
func (o ActionGroupResponseOutput) LastModifiedBy() pulumi.StringOutput {
	return o.ApplyT(func(v ActionGroupResponse) string { return v.LastModifiedBy }).(pulumi.StringOutput)
}

// scope on which action rule will apply
func (o ActionGroupResponseOutput) Scope() ScopeResponsePtrOutput {
	return o.ApplyT(func(v ActionGroupResponse) *ScopeResponse { return v.Scope }).(ScopeResponsePtrOutput)
}

// Indicates if the given action rule is enabled or disabled
func (o ActionGroupResponseOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ActionGroupResponse) *string { return v.Status }).(pulumi.StringPtrOutput)
}

// Indicates type of action rule
// Expected value is 'ActionGroup'.
func (o ActionGroupResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ActionGroupResponse) string { return v.Type }).(pulumi.StringOutput)
}

// The Action Groups information, used by the alert rule.
type ActionGroupsInformation struct {
	// An optional custom email subject to use in email notifications.
	CustomEmailSubject *string `pulumi:"customEmailSubject"`
	// An optional custom web-hook payload to use in web-hook notifications.
	CustomWebhookPayload *string `pulumi:"customWebhookPayload"`
	// The Action Group resource IDs.
	GroupIds []string `pulumi:"groupIds"`
}

// ActionGroupsInformationInput is an input type that accepts ActionGroupsInformationArgs and ActionGroupsInformationOutput values.
// You can construct a concrete instance of `ActionGroupsInformationInput` via:
//
//          ActionGroupsInformationArgs{...}
type ActionGroupsInformationInput interface {
	pulumi.Input

	ToActionGroupsInformationOutput() ActionGroupsInformationOutput
	ToActionGroupsInformationOutputWithContext(context.Context) ActionGroupsInformationOutput
}

// The Action Groups information, used by the alert rule.
type ActionGroupsInformationArgs struct {
	// An optional custom email subject to use in email notifications.
	CustomEmailSubject pulumi.StringPtrInput `pulumi:"customEmailSubject"`
	// An optional custom web-hook payload to use in web-hook notifications.
	CustomWebhookPayload pulumi.StringPtrInput `pulumi:"customWebhookPayload"`
	// The Action Group resource IDs.
	GroupIds pulumi.StringArrayInput `pulumi:"groupIds"`
}

func (ActionGroupsInformationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ActionGroupsInformation)(nil)).Elem()
}

func (i ActionGroupsInformationArgs) ToActionGroupsInformationOutput() ActionGroupsInformationOutput {
	return i.ToActionGroupsInformationOutputWithContext(context.Background())
}

func (i ActionGroupsInformationArgs) ToActionGroupsInformationOutputWithContext(ctx context.Context) ActionGroupsInformationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ActionGroupsInformationOutput)
}

func (i ActionGroupsInformationArgs) ToActionGroupsInformationPtrOutput() ActionGroupsInformationPtrOutput {
	return i.ToActionGroupsInformationPtrOutputWithContext(context.Background())
}

func (i ActionGroupsInformationArgs) ToActionGroupsInformationPtrOutputWithContext(ctx context.Context) ActionGroupsInformationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ActionGroupsInformationOutput).ToActionGroupsInformationPtrOutputWithContext(ctx)
}

// ActionGroupsInformationPtrInput is an input type that accepts ActionGroupsInformationArgs, ActionGroupsInformationPtr and ActionGroupsInformationPtrOutput values.
// You can construct a concrete instance of `ActionGroupsInformationPtrInput` via:
//
//          ActionGroupsInformationArgs{...}
//
//  or:
//
//          nil
type ActionGroupsInformationPtrInput interface {
	pulumi.Input

	ToActionGroupsInformationPtrOutput() ActionGroupsInformationPtrOutput
	ToActionGroupsInformationPtrOutputWithContext(context.Context) ActionGroupsInformationPtrOutput
}

type actionGroupsInformationPtrType ActionGroupsInformationArgs

func ActionGroupsInformationPtr(v *ActionGroupsInformationArgs) ActionGroupsInformationPtrInput {
	return (*actionGroupsInformationPtrType)(v)
}

func (*actionGroupsInformationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ActionGroupsInformation)(nil)).Elem()
}

func (i *actionGroupsInformationPtrType) ToActionGroupsInformationPtrOutput() ActionGroupsInformationPtrOutput {
	return i.ToActionGroupsInformationPtrOutputWithContext(context.Background())
}

func (i *actionGroupsInformationPtrType) ToActionGroupsInformationPtrOutputWithContext(ctx context.Context) ActionGroupsInformationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ActionGroupsInformationPtrOutput)
}

// The Action Groups information, used by the alert rule.
type ActionGroupsInformationOutput struct{ *pulumi.OutputState }

func (ActionGroupsInformationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ActionGroupsInformation)(nil)).Elem()
}

func (o ActionGroupsInformationOutput) ToActionGroupsInformationOutput() ActionGroupsInformationOutput {
	return o
}

func (o ActionGroupsInformationOutput) ToActionGroupsInformationOutputWithContext(ctx context.Context) ActionGroupsInformationOutput {
	return o
}

func (o ActionGroupsInformationOutput) ToActionGroupsInformationPtrOutput() ActionGroupsInformationPtrOutput {
	return o.ToActionGroupsInformationPtrOutputWithContext(context.Background())
}

func (o ActionGroupsInformationOutput) ToActionGroupsInformationPtrOutputWithContext(ctx context.Context) ActionGroupsInformationPtrOutput {
	return o.ApplyT(func(v ActionGroupsInformation) *ActionGroupsInformation {
		return &v
	}).(ActionGroupsInformationPtrOutput)
}

// An optional custom email subject to use in email notifications.
func (o ActionGroupsInformationOutput) CustomEmailSubject() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ActionGroupsInformation) *string { return v.CustomEmailSubject }).(pulumi.StringPtrOutput)
}

// An optional custom web-hook payload to use in web-hook notifications.
func (o ActionGroupsInformationOutput) CustomWebhookPayload() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ActionGroupsInformation) *string { return v.CustomWebhookPayload }).(pulumi.StringPtrOutput)
}

// The Action Group resource IDs.
func (o ActionGroupsInformationOutput) GroupIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ActionGroupsInformation) []string { return v.GroupIds }).(pulumi.StringArrayOutput)
}

type ActionGroupsInformationPtrOutput struct{ *pulumi.OutputState }

func (ActionGroupsInformationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ActionGroupsInformation)(nil)).Elem()
}

func (o ActionGroupsInformationPtrOutput) ToActionGroupsInformationPtrOutput() ActionGroupsInformationPtrOutput {
	return o
}

func (o ActionGroupsInformationPtrOutput) ToActionGroupsInformationPtrOutputWithContext(ctx context.Context) ActionGroupsInformationPtrOutput {
	return o
}

func (o ActionGroupsInformationPtrOutput) Elem() ActionGroupsInformationOutput {
	return o.ApplyT(func(v *ActionGroupsInformation) ActionGroupsInformation { return *v }).(ActionGroupsInformationOutput)
}

// An optional custom email subject to use in email notifications.
func (o ActionGroupsInformationPtrOutput) CustomEmailSubject() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ActionGroupsInformation) *string {
		if v == nil {
			return nil
		}
		return v.CustomEmailSubject
	}).(pulumi.StringPtrOutput)
}

// An optional custom web-hook payload to use in web-hook notifications.
func (o ActionGroupsInformationPtrOutput) CustomWebhookPayload() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ActionGroupsInformation) *string {
		if v == nil {
			return nil
		}
		return v.CustomWebhookPayload
	}).(pulumi.StringPtrOutput)
}

// The Action Group resource IDs.
func (o ActionGroupsInformationPtrOutput) GroupIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ActionGroupsInformation) []string {
		if v == nil {
			return nil
		}
		return v.GroupIds
	}).(pulumi.StringArrayOutput)
}

// The Action Groups information, used by the alert rule.
type ActionGroupsInformationResponse struct {
	// An optional custom email subject to use in email notifications.
	CustomEmailSubject *string `pulumi:"customEmailSubject"`
	// An optional custom web-hook payload to use in web-hook notifications.
	CustomWebhookPayload *string `pulumi:"customWebhookPayload"`
	// The Action Group resource IDs.
	GroupIds []string `pulumi:"groupIds"`
}

// ActionGroupsInformationResponseInput is an input type that accepts ActionGroupsInformationResponseArgs and ActionGroupsInformationResponseOutput values.
// You can construct a concrete instance of `ActionGroupsInformationResponseInput` via:
//
//          ActionGroupsInformationResponseArgs{...}
type ActionGroupsInformationResponseInput interface {
	pulumi.Input

	ToActionGroupsInformationResponseOutput() ActionGroupsInformationResponseOutput
	ToActionGroupsInformationResponseOutputWithContext(context.Context) ActionGroupsInformationResponseOutput
}

// The Action Groups information, used by the alert rule.
type ActionGroupsInformationResponseArgs struct {
	// An optional custom email subject to use in email notifications.
	CustomEmailSubject pulumi.StringPtrInput `pulumi:"customEmailSubject"`
	// An optional custom web-hook payload to use in web-hook notifications.
	CustomWebhookPayload pulumi.StringPtrInput `pulumi:"customWebhookPayload"`
	// The Action Group resource IDs.
	GroupIds pulumi.StringArrayInput `pulumi:"groupIds"`
}

func (ActionGroupsInformationResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ActionGroupsInformationResponse)(nil)).Elem()
}

func (i ActionGroupsInformationResponseArgs) ToActionGroupsInformationResponseOutput() ActionGroupsInformationResponseOutput {
	return i.ToActionGroupsInformationResponseOutputWithContext(context.Background())
}

func (i ActionGroupsInformationResponseArgs) ToActionGroupsInformationResponseOutputWithContext(ctx context.Context) ActionGroupsInformationResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ActionGroupsInformationResponseOutput)
}

func (i ActionGroupsInformationResponseArgs) ToActionGroupsInformationResponsePtrOutput() ActionGroupsInformationResponsePtrOutput {
	return i.ToActionGroupsInformationResponsePtrOutputWithContext(context.Background())
}

func (i ActionGroupsInformationResponseArgs) ToActionGroupsInformationResponsePtrOutputWithContext(ctx context.Context) ActionGroupsInformationResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ActionGroupsInformationResponseOutput).ToActionGroupsInformationResponsePtrOutputWithContext(ctx)
}

// ActionGroupsInformationResponsePtrInput is an input type that accepts ActionGroupsInformationResponseArgs, ActionGroupsInformationResponsePtr and ActionGroupsInformationResponsePtrOutput values.
// You can construct a concrete instance of `ActionGroupsInformationResponsePtrInput` via:
//
//          ActionGroupsInformationResponseArgs{...}
//
//  or:
//
//          nil
type ActionGroupsInformationResponsePtrInput interface {
	pulumi.Input

	ToActionGroupsInformationResponsePtrOutput() ActionGroupsInformationResponsePtrOutput
	ToActionGroupsInformationResponsePtrOutputWithContext(context.Context) ActionGroupsInformationResponsePtrOutput
}

type actionGroupsInformationResponsePtrType ActionGroupsInformationResponseArgs

func ActionGroupsInformationResponsePtr(v *ActionGroupsInformationResponseArgs) ActionGroupsInformationResponsePtrInput {
	return (*actionGroupsInformationResponsePtrType)(v)
}

func (*actionGroupsInformationResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ActionGroupsInformationResponse)(nil)).Elem()
}

func (i *actionGroupsInformationResponsePtrType) ToActionGroupsInformationResponsePtrOutput() ActionGroupsInformationResponsePtrOutput {
	return i.ToActionGroupsInformationResponsePtrOutputWithContext(context.Background())
}

func (i *actionGroupsInformationResponsePtrType) ToActionGroupsInformationResponsePtrOutputWithContext(ctx context.Context) ActionGroupsInformationResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ActionGroupsInformationResponsePtrOutput)
}

// The Action Groups information, used by the alert rule.
type ActionGroupsInformationResponseOutput struct{ *pulumi.OutputState }

func (ActionGroupsInformationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ActionGroupsInformationResponse)(nil)).Elem()
}

func (o ActionGroupsInformationResponseOutput) ToActionGroupsInformationResponseOutput() ActionGroupsInformationResponseOutput {
	return o
}

func (o ActionGroupsInformationResponseOutput) ToActionGroupsInformationResponseOutputWithContext(ctx context.Context) ActionGroupsInformationResponseOutput {
	return o
}

func (o ActionGroupsInformationResponseOutput) ToActionGroupsInformationResponsePtrOutput() ActionGroupsInformationResponsePtrOutput {
	return o.ToActionGroupsInformationResponsePtrOutputWithContext(context.Background())
}

func (o ActionGroupsInformationResponseOutput) ToActionGroupsInformationResponsePtrOutputWithContext(ctx context.Context) ActionGroupsInformationResponsePtrOutput {
	return o.ApplyT(func(v ActionGroupsInformationResponse) *ActionGroupsInformationResponse {
		return &v
	}).(ActionGroupsInformationResponsePtrOutput)
}

// An optional custom email subject to use in email notifications.
func (o ActionGroupsInformationResponseOutput) CustomEmailSubject() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ActionGroupsInformationResponse) *string { return v.CustomEmailSubject }).(pulumi.StringPtrOutput)
}

// An optional custom web-hook payload to use in web-hook notifications.
func (o ActionGroupsInformationResponseOutput) CustomWebhookPayload() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ActionGroupsInformationResponse) *string { return v.CustomWebhookPayload }).(pulumi.StringPtrOutput)
}

// The Action Group resource IDs.
func (o ActionGroupsInformationResponseOutput) GroupIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ActionGroupsInformationResponse) []string { return v.GroupIds }).(pulumi.StringArrayOutput)
}

type ActionGroupsInformationResponsePtrOutput struct{ *pulumi.OutputState }

func (ActionGroupsInformationResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ActionGroupsInformationResponse)(nil)).Elem()
}

func (o ActionGroupsInformationResponsePtrOutput) ToActionGroupsInformationResponsePtrOutput() ActionGroupsInformationResponsePtrOutput {
	return o
}

func (o ActionGroupsInformationResponsePtrOutput) ToActionGroupsInformationResponsePtrOutputWithContext(ctx context.Context) ActionGroupsInformationResponsePtrOutput {
	return o
}

func (o ActionGroupsInformationResponsePtrOutput) Elem() ActionGroupsInformationResponseOutput {
	return o.ApplyT(func(v *ActionGroupsInformationResponse) ActionGroupsInformationResponse { return *v }).(ActionGroupsInformationResponseOutput)
}

// An optional custom email subject to use in email notifications.
func (o ActionGroupsInformationResponsePtrOutput) CustomEmailSubject() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ActionGroupsInformationResponse) *string {
		if v == nil {
			return nil
		}
		return v.CustomEmailSubject
	}).(pulumi.StringPtrOutput)
}

// An optional custom web-hook payload to use in web-hook notifications.
func (o ActionGroupsInformationResponsePtrOutput) CustomWebhookPayload() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ActionGroupsInformationResponse) *string {
		if v == nil {
			return nil
		}
		return v.CustomWebhookPayload
	}).(pulumi.StringPtrOutput)
}

// The Action Group resource IDs.
func (o ActionGroupsInformationResponsePtrOutput) GroupIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ActionGroupsInformationResponse) []string {
		if v == nil {
			return nil
		}
		return v.GroupIds
	}).(pulumi.StringArrayOutput)
}

// condition to trigger an action rule
type Condition struct {
	// operator for a given condition
	Operator *string `pulumi:"operator"`
	// list of values to match for a given condition.
	Values []string `pulumi:"values"`
}

// ConditionInput is an input type that accepts ConditionArgs and ConditionOutput values.
// You can construct a concrete instance of `ConditionInput` via:
//
//          ConditionArgs{...}
type ConditionInput interface {
	pulumi.Input

	ToConditionOutput() ConditionOutput
	ToConditionOutputWithContext(context.Context) ConditionOutput
}

// condition to trigger an action rule
type ConditionArgs struct {
	// operator for a given condition
	Operator pulumi.StringPtrInput `pulumi:"operator"`
	// list of values to match for a given condition.
	Values pulumi.StringArrayInput `pulumi:"values"`
}

func (ConditionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Condition)(nil)).Elem()
}

func (i ConditionArgs) ToConditionOutput() ConditionOutput {
	return i.ToConditionOutputWithContext(context.Background())
}

func (i ConditionArgs) ToConditionOutputWithContext(ctx context.Context) ConditionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConditionOutput)
}

func (i ConditionArgs) ToConditionPtrOutput() ConditionPtrOutput {
	return i.ToConditionPtrOutputWithContext(context.Background())
}

func (i ConditionArgs) ToConditionPtrOutputWithContext(ctx context.Context) ConditionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConditionOutput).ToConditionPtrOutputWithContext(ctx)
}

// ConditionPtrInput is an input type that accepts ConditionArgs, ConditionPtr and ConditionPtrOutput values.
// You can construct a concrete instance of `ConditionPtrInput` via:
//
//          ConditionArgs{...}
//
//  or:
//
//          nil
type ConditionPtrInput interface {
	pulumi.Input

	ToConditionPtrOutput() ConditionPtrOutput
	ToConditionPtrOutputWithContext(context.Context) ConditionPtrOutput
}

type conditionPtrType ConditionArgs

func ConditionPtr(v *ConditionArgs) ConditionPtrInput {
	return (*conditionPtrType)(v)
}

func (*conditionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Condition)(nil)).Elem()
}

func (i *conditionPtrType) ToConditionPtrOutput() ConditionPtrOutput {
	return i.ToConditionPtrOutputWithContext(context.Background())
}

func (i *conditionPtrType) ToConditionPtrOutputWithContext(ctx context.Context) ConditionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConditionPtrOutput)
}

// condition to trigger an action rule
type ConditionOutput struct{ *pulumi.OutputState }

func (ConditionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Condition)(nil)).Elem()
}

func (o ConditionOutput) ToConditionOutput() ConditionOutput {
	return o
}

func (o ConditionOutput) ToConditionOutputWithContext(ctx context.Context) ConditionOutput {
	return o
}

func (o ConditionOutput) ToConditionPtrOutput() ConditionPtrOutput {
	return o.ToConditionPtrOutputWithContext(context.Background())
}

func (o ConditionOutput) ToConditionPtrOutputWithContext(ctx context.Context) ConditionPtrOutput {
	return o.ApplyT(func(v Condition) *Condition {
		return &v
	}).(ConditionPtrOutput)
}

// operator for a given condition
func (o ConditionOutput) Operator() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Condition) *string { return v.Operator }).(pulumi.StringPtrOutput)
}

// list of values to match for a given condition.
func (o ConditionOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v Condition) []string { return v.Values }).(pulumi.StringArrayOutput)
}

type ConditionPtrOutput struct{ *pulumi.OutputState }

func (ConditionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Condition)(nil)).Elem()
}

func (o ConditionPtrOutput) ToConditionPtrOutput() ConditionPtrOutput {
	return o
}

func (o ConditionPtrOutput) ToConditionPtrOutputWithContext(ctx context.Context) ConditionPtrOutput {
	return o
}

func (o ConditionPtrOutput) Elem() ConditionOutput {
	return o.ApplyT(func(v *Condition) Condition { return *v }).(ConditionOutput)
}

// operator for a given condition
func (o ConditionPtrOutput) Operator() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Condition) *string {
		if v == nil {
			return nil
		}
		return v.Operator
	}).(pulumi.StringPtrOutput)
}

// list of values to match for a given condition.
func (o ConditionPtrOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Condition) []string {
		if v == nil {
			return nil
		}
		return v.Values
	}).(pulumi.StringArrayOutput)
}

// condition to trigger an action rule
type ConditionResponse struct {
	// operator for a given condition
	Operator *string `pulumi:"operator"`
	// list of values to match for a given condition.
	Values []string `pulumi:"values"`
}

// ConditionResponseInput is an input type that accepts ConditionResponseArgs and ConditionResponseOutput values.
// You can construct a concrete instance of `ConditionResponseInput` via:
//
//          ConditionResponseArgs{...}
type ConditionResponseInput interface {
	pulumi.Input

	ToConditionResponseOutput() ConditionResponseOutput
	ToConditionResponseOutputWithContext(context.Context) ConditionResponseOutput
}

// condition to trigger an action rule
type ConditionResponseArgs struct {
	// operator for a given condition
	Operator pulumi.StringPtrInput `pulumi:"operator"`
	// list of values to match for a given condition.
	Values pulumi.StringArrayInput `pulumi:"values"`
}

func (ConditionResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ConditionResponse)(nil)).Elem()
}

func (i ConditionResponseArgs) ToConditionResponseOutput() ConditionResponseOutput {
	return i.ToConditionResponseOutputWithContext(context.Background())
}

func (i ConditionResponseArgs) ToConditionResponseOutputWithContext(ctx context.Context) ConditionResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConditionResponseOutput)
}

func (i ConditionResponseArgs) ToConditionResponsePtrOutput() ConditionResponsePtrOutput {
	return i.ToConditionResponsePtrOutputWithContext(context.Background())
}

func (i ConditionResponseArgs) ToConditionResponsePtrOutputWithContext(ctx context.Context) ConditionResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConditionResponseOutput).ToConditionResponsePtrOutputWithContext(ctx)
}

// ConditionResponsePtrInput is an input type that accepts ConditionResponseArgs, ConditionResponsePtr and ConditionResponsePtrOutput values.
// You can construct a concrete instance of `ConditionResponsePtrInput` via:
//
//          ConditionResponseArgs{...}
//
//  or:
//
//          nil
type ConditionResponsePtrInput interface {
	pulumi.Input

	ToConditionResponsePtrOutput() ConditionResponsePtrOutput
	ToConditionResponsePtrOutputWithContext(context.Context) ConditionResponsePtrOutput
}

type conditionResponsePtrType ConditionResponseArgs

func ConditionResponsePtr(v *ConditionResponseArgs) ConditionResponsePtrInput {
	return (*conditionResponsePtrType)(v)
}

func (*conditionResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ConditionResponse)(nil)).Elem()
}

func (i *conditionResponsePtrType) ToConditionResponsePtrOutput() ConditionResponsePtrOutput {
	return i.ToConditionResponsePtrOutputWithContext(context.Background())
}

func (i *conditionResponsePtrType) ToConditionResponsePtrOutputWithContext(ctx context.Context) ConditionResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConditionResponsePtrOutput)
}

// condition to trigger an action rule
type ConditionResponseOutput struct{ *pulumi.OutputState }

func (ConditionResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConditionResponse)(nil)).Elem()
}

func (o ConditionResponseOutput) ToConditionResponseOutput() ConditionResponseOutput {
	return o
}

func (o ConditionResponseOutput) ToConditionResponseOutputWithContext(ctx context.Context) ConditionResponseOutput {
	return o
}

func (o ConditionResponseOutput) ToConditionResponsePtrOutput() ConditionResponsePtrOutput {
	return o.ToConditionResponsePtrOutputWithContext(context.Background())
}

func (o ConditionResponseOutput) ToConditionResponsePtrOutputWithContext(ctx context.Context) ConditionResponsePtrOutput {
	return o.ApplyT(func(v ConditionResponse) *ConditionResponse {
		return &v
	}).(ConditionResponsePtrOutput)
}

// operator for a given condition
func (o ConditionResponseOutput) Operator() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ConditionResponse) *string { return v.Operator }).(pulumi.StringPtrOutput)
}

// list of values to match for a given condition.
func (o ConditionResponseOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ConditionResponse) []string { return v.Values }).(pulumi.StringArrayOutput)
}

type ConditionResponsePtrOutput struct{ *pulumi.OutputState }

func (ConditionResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ConditionResponse)(nil)).Elem()
}

func (o ConditionResponsePtrOutput) ToConditionResponsePtrOutput() ConditionResponsePtrOutput {
	return o
}

func (o ConditionResponsePtrOutput) ToConditionResponsePtrOutputWithContext(ctx context.Context) ConditionResponsePtrOutput {
	return o
}

func (o ConditionResponsePtrOutput) Elem() ConditionResponseOutput {
	return o.ApplyT(func(v *ConditionResponse) ConditionResponse { return *v }).(ConditionResponseOutput)
}

// operator for a given condition
func (o ConditionResponsePtrOutput) Operator() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConditionResponse) *string {
		if v == nil {
			return nil
		}
		return v.Operator
	}).(pulumi.StringPtrOutput)
}

// list of values to match for a given condition.
func (o ConditionResponsePtrOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ConditionResponse) []string {
		if v == nil {
			return nil
		}
		return v.Values
	}).(pulumi.StringArrayOutput)
}

// Conditions in alert instance to be matched for a given action rule. Default value is all. Multiple values could be provided with comma separation.
type Conditions struct {
	// filter alerts by alert context (payload)
	AlertContext *Condition `pulumi:"alertContext"`
	// filter alerts by alert rule id
	AlertRuleId *Condition `pulumi:"alertRuleId"`
	// filter alerts by alert rule description
	Description *Condition `pulumi:"description"`
	// filter alerts by monitor condition
	MonitorCondition *Condition `pulumi:"monitorCondition"`
	// filter alerts by monitor service
	MonitorService *Condition `pulumi:"monitorService"`
	// filter alerts by severity
	Severity *Condition `pulumi:"severity"`
	// filter alerts by target resource type
	TargetResourceType *Condition `pulumi:"targetResourceType"`
}

// ConditionsInput is an input type that accepts ConditionsArgs and ConditionsOutput values.
// You can construct a concrete instance of `ConditionsInput` via:
//
//          ConditionsArgs{...}
type ConditionsInput interface {
	pulumi.Input

	ToConditionsOutput() ConditionsOutput
	ToConditionsOutputWithContext(context.Context) ConditionsOutput
}

// Conditions in alert instance to be matched for a given action rule. Default value is all. Multiple values could be provided with comma separation.
type ConditionsArgs struct {
	// filter alerts by alert context (payload)
	AlertContext ConditionPtrInput `pulumi:"alertContext"`
	// filter alerts by alert rule id
	AlertRuleId ConditionPtrInput `pulumi:"alertRuleId"`
	// filter alerts by alert rule description
	Description ConditionPtrInput `pulumi:"description"`
	// filter alerts by monitor condition
	MonitorCondition ConditionPtrInput `pulumi:"monitorCondition"`
	// filter alerts by monitor service
	MonitorService ConditionPtrInput `pulumi:"monitorService"`
	// filter alerts by severity
	Severity ConditionPtrInput `pulumi:"severity"`
	// filter alerts by target resource type
	TargetResourceType ConditionPtrInput `pulumi:"targetResourceType"`
}

func (ConditionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Conditions)(nil)).Elem()
}

func (i ConditionsArgs) ToConditionsOutput() ConditionsOutput {
	return i.ToConditionsOutputWithContext(context.Background())
}

func (i ConditionsArgs) ToConditionsOutputWithContext(ctx context.Context) ConditionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConditionsOutput)
}

func (i ConditionsArgs) ToConditionsPtrOutput() ConditionsPtrOutput {
	return i.ToConditionsPtrOutputWithContext(context.Background())
}

func (i ConditionsArgs) ToConditionsPtrOutputWithContext(ctx context.Context) ConditionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConditionsOutput).ToConditionsPtrOutputWithContext(ctx)
}

// ConditionsPtrInput is an input type that accepts ConditionsArgs, ConditionsPtr and ConditionsPtrOutput values.
// You can construct a concrete instance of `ConditionsPtrInput` via:
//
//          ConditionsArgs{...}
//
//  or:
//
//          nil
type ConditionsPtrInput interface {
	pulumi.Input

	ToConditionsPtrOutput() ConditionsPtrOutput
	ToConditionsPtrOutputWithContext(context.Context) ConditionsPtrOutput
}

type conditionsPtrType ConditionsArgs

func ConditionsPtr(v *ConditionsArgs) ConditionsPtrInput {
	return (*conditionsPtrType)(v)
}

func (*conditionsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Conditions)(nil)).Elem()
}

func (i *conditionsPtrType) ToConditionsPtrOutput() ConditionsPtrOutput {
	return i.ToConditionsPtrOutputWithContext(context.Background())
}

func (i *conditionsPtrType) ToConditionsPtrOutputWithContext(ctx context.Context) ConditionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConditionsPtrOutput)
}

// Conditions in alert instance to be matched for a given action rule. Default value is all. Multiple values could be provided with comma separation.
type ConditionsOutput struct{ *pulumi.OutputState }

func (ConditionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Conditions)(nil)).Elem()
}

func (o ConditionsOutput) ToConditionsOutput() ConditionsOutput {
	return o
}

func (o ConditionsOutput) ToConditionsOutputWithContext(ctx context.Context) ConditionsOutput {
	return o
}

func (o ConditionsOutput) ToConditionsPtrOutput() ConditionsPtrOutput {
	return o.ToConditionsPtrOutputWithContext(context.Background())
}

func (o ConditionsOutput) ToConditionsPtrOutputWithContext(ctx context.Context) ConditionsPtrOutput {
	return o.ApplyT(func(v Conditions) *Conditions {
		return &v
	}).(ConditionsPtrOutput)
}

// filter alerts by alert context (payload)
func (o ConditionsOutput) AlertContext() ConditionPtrOutput {
	return o.ApplyT(func(v Conditions) *Condition { return v.AlertContext }).(ConditionPtrOutput)
}

// filter alerts by alert rule id
func (o ConditionsOutput) AlertRuleId() ConditionPtrOutput {
	return o.ApplyT(func(v Conditions) *Condition { return v.AlertRuleId }).(ConditionPtrOutput)
}

// filter alerts by alert rule description
func (o ConditionsOutput) Description() ConditionPtrOutput {
	return o.ApplyT(func(v Conditions) *Condition { return v.Description }).(ConditionPtrOutput)
}

// filter alerts by monitor condition
func (o ConditionsOutput) MonitorCondition() ConditionPtrOutput {
	return o.ApplyT(func(v Conditions) *Condition { return v.MonitorCondition }).(ConditionPtrOutput)
}

// filter alerts by monitor service
func (o ConditionsOutput) MonitorService() ConditionPtrOutput {
	return o.ApplyT(func(v Conditions) *Condition { return v.MonitorService }).(ConditionPtrOutput)
}

// filter alerts by severity
func (o ConditionsOutput) Severity() ConditionPtrOutput {
	return o.ApplyT(func(v Conditions) *Condition { return v.Severity }).(ConditionPtrOutput)
}

// filter alerts by target resource type
func (o ConditionsOutput) TargetResourceType() ConditionPtrOutput {
	return o.ApplyT(func(v Conditions) *Condition { return v.TargetResourceType }).(ConditionPtrOutput)
}

type ConditionsPtrOutput struct{ *pulumi.OutputState }

func (ConditionsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Conditions)(nil)).Elem()
}

func (o ConditionsPtrOutput) ToConditionsPtrOutput() ConditionsPtrOutput {
	return o
}

func (o ConditionsPtrOutput) ToConditionsPtrOutputWithContext(ctx context.Context) ConditionsPtrOutput {
	return o
}

func (o ConditionsPtrOutput) Elem() ConditionsOutput {
	return o.ApplyT(func(v *Conditions) Conditions { return *v }).(ConditionsOutput)
}

// filter alerts by alert context (payload)
func (o ConditionsPtrOutput) AlertContext() ConditionPtrOutput {
	return o.ApplyT(func(v *Conditions) *Condition {
		if v == nil {
			return nil
		}
		return v.AlertContext
	}).(ConditionPtrOutput)
}

// filter alerts by alert rule id
func (o ConditionsPtrOutput) AlertRuleId() ConditionPtrOutput {
	return o.ApplyT(func(v *Conditions) *Condition {
		if v == nil {
			return nil
		}
		return v.AlertRuleId
	}).(ConditionPtrOutput)
}

// filter alerts by alert rule description
func (o ConditionsPtrOutput) Description() ConditionPtrOutput {
	return o.ApplyT(func(v *Conditions) *Condition {
		if v == nil {
			return nil
		}
		return v.Description
	}).(ConditionPtrOutput)
}

// filter alerts by monitor condition
func (o ConditionsPtrOutput) MonitorCondition() ConditionPtrOutput {
	return o.ApplyT(func(v *Conditions) *Condition {
		if v == nil {
			return nil
		}
		return v.MonitorCondition
	}).(ConditionPtrOutput)
}

// filter alerts by monitor service
func (o ConditionsPtrOutput) MonitorService() ConditionPtrOutput {
	return o.ApplyT(func(v *Conditions) *Condition {
		if v == nil {
			return nil
		}
		return v.MonitorService
	}).(ConditionPtrOutput)
}

// filter alerts by severity
func (o ConditionsPtrOutput) Severity() ConditionPtrOutput {
	return o.ApplyT(func(v *Conditions) *Condition {
		if v == nil {
			return nil
		}
		return v.Severity
	}).(ConditionPtrOutput)
}

// filter alerts by target resource type
func (o ConditionsPtrOutput) TargetResourceType() ConditionPtrOutput {
	return o.ApplyT(func(v *Conditions) *Condition {
		if v == nil {
			return nil
		}
		return v.TargetResourceType
	}).(ConditionPtrOutput)
}

// Conditions in alert instance to be matched for a given action rule. Default value is all. Multiple values could be provided with comma separation.
type ConditionsResponse struct {
	// filter alerts by alert context (payload)
	AlertContext *ConditionResponse `pulumi:"alertContext"`
	// filter alerts by alert rule id
	AlertRuleId *ConditionResponse `pulumi:"alertRuleId"`
	// filter alerts by alert rule description
	Description *ConditionResponse `pulumi:"description"`
	// filter alerts by monitor condition
	MonitorCondition *ConditionResponse `pulumi:"monitorCondition"`
	// filter alerts by monitor service
	MonitorService *ConditionResponse `pulumi:"monitorService"`
	// filter alerts by severity
	Severity *ConditionResponse `pulumi:"severity"`
	// filter alerts by target resource type
	TargetResourceType *ConditionResponse `pulumi:"targetResourceType"`
}

// ConditionsResponseInput is an input type that accepts ConditionsResponseArgs and ConditionsResponseOutput values.
// You can construct a concrete instance of `ConditionsResponseInput` via:
//
//          ConditionsResponseArgs{...}
type ConditionsResponseInput interface {
	pulumi.Input

	ToConditionsResponseOutput() ConditionsResponseOutput
	ToConditionsResponseOutputWithContext(context.Context) ConditionsResponseOutput
}

// Conditions in alert instance to be matched for a given action rule. Default value is all. Multiple values could be provided with comma separation.
type ConditionsResponseArgs struct {
	// filter alerts by alert context (payload)
	AlertContext ConditionResponsePtrInput `pulumi:"alertContext"`
	// filter alerts by alert rule id
	AlertRuleId ConditionResponsePtrInput `pulumi:"alertRuleId"`
	// filter alerts by alert rule description
	Description ConditionResponsePtrInput `pulumi:"description"`
	// filter alerts by monitor condition
	MonitorCondition ConditionResponsePtrInput `pulumi:"monitorCondition"`
	// filter alerts by monitor service
	MonitorService ConditionResponsePtrInput `pulumi:"monitorService"`
	// filter alerts by severity
	Severity ConditionResponsePtrInput `pulumi:"severity"`
	// filter alerts by target resource type
	TargetResourceType ConditionResponsePtrInput `pulumi:"targetResourceType"`
}

func (ConditionsResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ConditionsResponse)(nil)).Elem()
}

func (i ConditionsResponseArgs) ToConditionsResponseOutput() ConditionsResponseOutput {
	return i.ToConditionsResponseOutputWithContext(context.Background())
}

func (i ConditionsResponseArgs) ToConditionsResponseOutputWithContext(ctx context.Context) ConditionsResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConditionsResponseOutput)
}

func (i ConditionsResponseArgs) ToConditionsResponsePtrOutput() ConditionsResponsePtrOutput {
	return i.ToConditionsResponsePtrOutputWithContext(context.Background())
}

func (i ConditionsResponseArgs) ToConditionsResponsePtrOutputWithContext(ctx context.Context) ConditionsResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConditionsResponseOutput).ToConditionsResponsePtrOutputWithContext(ctx)
}

// ConditionsResponsePtrInput is an input type that accepts ConditionsResponseArgs, ConditionsResponsePtr and ConditionsResponsePtrOutput values.
// You can construct a concrete instance of `ConditionsResponsePtrInput` via:
//
//          ConditionsResponseArgs{...}
//
//  or:
//
//          nil
type ConditionsResponsePtrInput interface {
	pulumi.Input

	ToConditionsResponsePtrOutput() ConditionsResponsePtrOutput
	ToConditionsResponsePtrOutputWithContext(context.Context) ConditionsResponsePtrOutput
}

type conditionsResponsePtrType ConditionsResponseArgs

func ConditionsResponsePtr(v *ConditionsResponseArgs) ConditionsResponsePtrInput {
	return (*conditionsResponsePtrType)(v)
}

func (*conditionsResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ConditionsResponse)(nil)).Elem()
}

func (i *conditionsResponsePtrType) ToConditionsResponsePtrOutput() ConditionsResponsePtrOutput {
	return i.ToConditionsResponsePtrOutputWithContext(context.Background())
}

func (i *conditionsResponsePtrType) ToConditionsResponsePtrOutputWithContext(ctx context.Context) ConditionsResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConditionsResponsePtrOutput)
}

// Conditions in alert instance to be matched for a given action rule. Default value is all. Multiple values could be provided with comma separation.
type ConditionsResponseOutput struct{ *pulumi.OutputState }

func (ConditionsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConditionsResponse)(nil)).Elem()
}

func (o ConditionsResponseOutput) ToConditionsResponseOutput() ConditionsResponseOutput {
	return o
}

func (o ConditionsResponseOutput) ToConditionsResponseOutputWithContext(ctx context.Context) ConditionsResponseOutput {
	return o
}

func (o ConditionsResponseOutput) ToConditionsResponsePtrOutput() ConditionsResponsePtrOutput {
	return o.ToConditionsResponsePtrOutputWithContext(context.Background())
}

func (o ConditionsResponseOutput) ToConditionsResponsePtrOutputWithContext(ctx context.Context) ConditionsResponsePtrOutput {
	return o.ApplyT(func(v ConditionsResponse) *ConditionsResponse {
		return &v
	}).(ConditionsResponsePtrOutput)
}

// filter alerts by alert context (payload)
func (o ConditionsResponseOutput) AlertContext() ConditionResponsePtrOutput {
	return o.ApplyT(func(v ConditionsResponse) *ConditionResponse { return v.AlertContext }).(ConditionResponsePtrOutput)
}

// filter alerts by alert rule id
func (o ConditionsResponseOutput) AlertRuleId() ConditionResponsePtrOutput {
	return o.ApplyT(func(v ConditionsResponse) *ConditionResponse { return v.AlertRuleId }).(ConditionResponsePtrOutput)
}

// filter alerts by alert rule description
func (o ConditionsResponseOutput) Description() ConditionResponsePtrOutput {
	return o.ApplyT(func(v ConditionsResponse) *ConditionResponse { return v.Description }).(ConditionResponsePtrOutput)
}

// filter alerts by monitor condition
func (o ConditionsResponseOutput) MonitorCondition() ConditionResponsePtrOutput {
	return o.ApplyT(func(v ConditionsResponse) *ConditionResponse { return v.MonitorCondition }).(ConditionResponsePtrOutput)
}

// filter alerts by monitor service
func (o ConditionsResponseOutput) MonitorService() ConditionResponsePtrOutput {
	return o.ApplyT(func(v ConditionsResponse) *ConditionResponse { return v.MonitorService }).(ConditionResponsePtrOutput)
}

// filter alerts by severity
func (o ConditionsResponseOutput) Severity() ConditionResponsePtrOutput {
	return o.ApplyT(func(v ConditionsResponse) *ConditionResponse { return v.Severity }).(ConditionResponsePtrOutput)
}

// filter alerts by target resource type
func (o ConditionsResponseOutput) TargetResourceType() ConditionResponsePtrOutput {
	return o.ApplyT(func(v ConditionsResponse) *ConditionResponse { return v.TargetResourceType }).(ConditionResponsePtrOutput)
}

type ConditionsResponsePtrOutput struct{ *pulumi.OutputState }

func (ConditionsResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ConditionsResponse)(nil)).Elem()
}

func (o ConditionsResponsePtrOutput) ToConditionsResponsePtrOutput() ConditionsResponsePtrOutput {
	return o
}

func (o ConditionsResponsePtrOutput) ToConditionsResponsePtrOutputWithContext(ctx context.Context) ConditionsResponsePtrOutput {
	return o
}

func (o ConditionsResponsePtrOutput) Elem() ConditionsResponseOutput {
	return o.ApplyT(func(v *ConditionsResponse) ConditionsResponse { return *v }).(ConditionsResponseOutput)
}

// filter alerts by alert context (payload)
func (o ConditionsResponsePtrOutput) AlertContext() ConditionResponsePtrOutput {
	return o.ApplyT(func(v *ConditionsResponse) *ConditionResponse {
		if v == nil {
			return nil
		}
		return v.AlertContext
	}).(ConditionResponsePtrOutput)
}

// filter alerts by alert rule id
func (o ConditionsResponsePtrOutput) AlertRuleId() ConditionResponsePtrOutput {
	return o.ApplyT(func(v *ConditionsResponse) *ConditionResponse {
		if v == nil {
			return nil
		}
		return v.AlertRuleId
	}).(ConditionResponsePtrOutput)
}

// filter alerts by alert rule description
func (o ConditionsResponsePtrOutput) Description() ConditionResponsePtrOutput {
	return o.ApplyT(func(v *ConditionsResponse) *ConditionResponse {
		if v == nil {
			return nil
		}
		return v.Description
	}).(ConditionResponsePtrOutput)
}

// filter alerts by monitor condition
func (o ConditionsResponsePtrOutput) MonitorCondition() ConditionResponsePtrOutput {
	return o.ApplyT(func(v *ConditionsResponse) *ConditionResponse {
		if v == nil {
			return nil
		}
		return v.MonitorCondition
	}).(ConditionResponsePtrOutput)
}

// filter alerts by monitor service
func (o ConditionsResponsePtrOutput) MonitorService() ConditionResponsePtrOutput {
	return o.ApplyT(func(v *ConditionsResponse) *ConditionResponse {
		if v == nil {
			return nil
		}
		return v.MonitorService
	}).(ConditionResponsePtrOutput)
}

// filter alerts by severity
func (o ConditionsResponsePtrOutput) Severity() ConditionResponsePtrOutput {
	return o.ApplyT(func(v *ConditionsResponse) *ConditionResponse {
		if v == nil {
			return nil
		}
		return v.Severity
	}).(ConditionResponsePtrOutput)
}

// filter alerts by target resource type
func (o ConditionsResponsePtrOutput) TargetResourceType() ConditionResponsePtrOutput {
	return o.ApplyT(func(v *ConditionsResponse) *ConditionResponse {
		if v == nil {
			return nil
		}
		return v.TargetResourceType
	}).(ConditionResponsePtrOutput)
}

// The detector information. By default this is not populated, unless it's specified in expandDetector
type Detector struct {
	// The Smart Detector description. By default this is not populated, unless it's specified in expandDetector
	Description *string `pulumi:"description"`
	// The detector id.
	Id string `pulumi:"id"`
	// The Smart Detector image path. By default this is not populated, unless it's specified in expandDetector
	ImagePaths []string `pulumi:"imagePaths"`
	// The Smart Detector name. By default this is not populated, unless it's specified in expandDetector
	Name *string `pulumi:"name"`
	// The detector's parameters.'
	Parameters map[string]interface{} `pulumi:"parameters"`
	// The Smart Detector supported resource types. By default this is not populated, unless it's specified in expandDetector
	SupportedResourceTypes []string `pulumi:"supportedResourceTypes"`
}

// DetectorInput is an input type that accepts DetectorArgs and DetectorOutput values.
// You can construct a concrete instance of `DetectorInput` via:
//
//          DetectorArgs{...}
type DetectorInput interface {
	pulumi.Input

	ToDetectorOutput() DetectorOutput
	ToDetectorOutputWithContext(context.Context) DetectorOutput
}

// The detector information. By default this is not populated, unless it's specified in expandDetector
type DetectorArgs struct {
	// The Smart Detector description. By default this is not populated, unless it's specified in expandDetector
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The detector id.
	Id pulumi.StringInput `pulumi:"id"`
	// The Smart Detector image path. By default this is not populated, unless it's specified in expandDetector
	ImagePaths pulumi.StringArrayInput `pulumi:"imagePaths"`
	// The Smart Detector name. By default this is not populated, unless it's specified in expandDetector
	Name pulumi.StringPtrInput `pulumi:"name"`
	// The detector's parameters.'
	Parameters pulumi.MapInput `pulumi:"parameters"`
	// The Smart Detector supported resource types. By default this is not populated, unless it's specified in expandDetector
	SupportedResourceTypes pulumi.StringArrayInput `pulumi:"supportedResourceTypes"`
}

func (DetectorArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Detector)(nil)).Elem()
}

func (i DetectorArgs) ToDetectorOutput() DetectorOutput {
	return i.ToDetectorOutputWithContext(context.Background())
}

func (i DetectorArgs) ToDetectorOutputWithContext(ctx context.Context) DetectorOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DetectorOutput)
}

func (i DetectorArgs) ToDetectorPtrOutput() DetectorPtrOutput {
	return i.ToDetectorPtrOutputWithContext(context.Background())
}

func (i DetectorArgs) ToDetectorPtrOutputWithContext(ctx context.Context) DetectorPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DetectorOutput).ToDetectorPtrOutputWithContext(ctx)
}

// DetectorPtrInput is an input type that accepts DetectorArgs, DetectorPtr and DetectorPtrOutput values.
// You can construct a concrete instance of `DetectorPtrInput` via:
//
//          DetectorArgs{...}
//
//  or:
//
//          nil
type DetectorPtrInput interface {
	pulumi.Input

	ToDetectorPtrOutput() DetectorPtrOutput
	ToDetectorPtrOutputWithContext(context.Context) DetectorPtrOutput
}

type detectorPtrType DetectorArgs

func DetectorPtr(v *DetectorArgs) DetectorPtrInput {
	return (*detectorPtrType)(v)
}

func (*detectorPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Detector)(nil)).Elem()
}

func (i *detectorPtrType) ToDetectorPtrOutput() DetectorPtrOutput {
	return i.ToDetectorPtrOutputWithContext(context.Background())
}

func (i *detectorPtrType) ToDetectorPtrOutputWithContext(ctx context.Context) DetectorPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DetectorPtrOutput)
}

// The detector information. By default this is not populated, unless it's specified in expandDetector
type DetectorOutput struct{ *pulumi.OutputState }

func (DetectorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Detector)(nil)).Elem()
}

func (o DetectorOutput) ToDetectorOutput() DetectorOutput {
	return o
}

func (o DetectorOutput) ToDetectorOutputWithContext(ctx context.Context) DetectorOutput {
	return o
}

func (o DetectorOutput) ToDetectorPtrOutput() DetectorPtrOutput {
	return o.ToDetectorPtrOutputWithContext(context.Background())
}

func (o DetectorOutput) ToDetectorPtrOutputWithContext(ctx context.Context) DetectorPtrOutput {
	return o.ApplyT(func(v Detector) *Detector {
		return &v
	}).(DetectorPtrOutput)
}

// The Smart Detector description. By default this is not populated, unless it's specified in expandDetector
func (o DetectorOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Detector) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The detector id.
func (o DetectorOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v Detector) string { return v.Id }).(pulumi.StringOutput)
}

// The Smart Detector image path. By default this is not populated, unless it's specified in expandDetector
func (o DetectorOutput) ImagePaths() pulumi.StringArrayOutput {
	return o.ApplyT(func(v Detector) []string { return v.ImagePaths }).(pulumi.StringArrayOutput)
}

// The Smart Detector name. By default this is not populated, unless it's specified in expandDetector
func (o DetectorOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Detector) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The detector's parameters.'
func (o DetectorOutput) Parameters() pulumi.MapOutput {
	return o.ApplyT(func(v Detector) map[string]interface{} { return v.Parameters }).(pulumi.MapOutput)
}

// The Smart Detector supported resource types. By default this is not populated, unless it's specified in expandDetector
func (o DetectorOutput) SupportedResourceTypes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v Detector) []string { return v.SupportedResourceTypes }).(pulumi.StringArrayOutput)
}

type DetectorPtrOutput struct{ *pulumi.OutputState }

func (DetectorPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Detector)(nil)).Elem()
}

func (o DetectorPtrOutput) ToDetectorPtrOutput() DetectorPtrOutput {
	return o
}

func (o DetectorPtrOutput) ToDetectorPtrOutputWithContext(ctx context.Context) DetectorPtrOutput {
	return o
}

func (o DetectorPtrOutput) Elem() DetectorOutput {
	return o.ApplyT(func(v *Detector) Detector { return *v }).(DetectorOutput)
}

// The Smart Detector description. By default this is not populated, unless it's specified in expandDetector
func (o DetectorPtrOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Detector) *string {
		if v == nil {
			return nil
		}
		return v.Description
	}).(pulumi.StringPtrOutput)
}

// The detector id.
func (o DetectorPtrOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Detector) *string {
		if v == nil {
			return nil
		}
		return &v.Id
	}).(pulumi.StringPtrOutput)
}

// The Smart Detector image path. By default this is not populated, unless it's specified in expandDetector
func (o DetectorPtrOutput) ImagePaths() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Detector) []string {
		if v == nil {
			return nil
		}
		return v.ImagePaths
	}).(pulumi.StringArrayOutput)
}

// The Smart Detector name. By default this is not populated, unless it's specified in expandDetector
func (o DetectorPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Detector) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// The detector's parameters.'
func (o DetectorPtrOutput) Parameters() pulumi.MapOutput {
	return o.ApplyT(func(v *Detector) map[string]interface{} {
		if v == nil {
			return nil
		}
		return v.Parameters
	}).(pulumi.MapOutput)
}

// The Smart Detector supported resource types. By default this is not populated, unless it's specified in expandDetector
func (o DetectorPtrOutput) SupportedResourceTypes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Detector) []string {
		if v == nil {
			return nil
		}
		return v.SupportedResourceTypes
	}).(pulumi.StringArrayOutput)
}

// The detector information. By default this is not populated, unless it's specified in expandDetector
type DetectorResponse struct {
	// The Smart Detector description. By default this is not populated, unless it's specified in expandDetector
	Description *string `pulumi:"description"`
	// The detector id.
	Id string `pulumi:"id"`
	// The Smart Detector image path. By default this is not populated, unless it's specified in expandDetector
	ImagePaths []string `pulumi:"imagePaths"`
	// The Smart Detector name. By default this is not populated, unless it's specified in expandDetector
	Name *string `pulumi:"name"`
	// The detector's parameters.'
	Parameters map[string]interface{} `pulumi:"parameters"`
	// The Smart Detector supported resource types. By default this is not populated, unless it's specified in expandDetector
	SupportedResourceTypes []string `pulumi:"supportedResourceTypes"`
}

// DetectorResponseInput is an input type that accepts DetectorResponseArgs and DetectorResponseOutput values.
// You can construct a concrete instance of `DetectorResponseInput` via:
//
//          DetectorResponseArgs{...}
type DetectorResponseInput interface {
	pulumi.Input

	ToDetectorResponseOutput() DetectorResponseOutput
	ToDetectorResponseOutputWithContext(context.Context) DetectorResponseOutput
}

// The detector information. By default this is not populated, unless it's specified in expandDetector
type DetectorResponseArgs struct {
	// The Smart Detector description. By default this is not populated, unless it's specified in expandDetector
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The detector id.
	Id pulumi.StringInput `pulumi:"id"`
	// The Smart Detector image path. By default this is not populated, unless it's specified in expandDetector
	ImagePaths pulumi.StringArrayInput `pulumi:"imagePaths"`
	// The Smart Detector name. By default this is not populated, unless it's specified in expandDetector
	Name pulumi.StringPtrInput `pulumi:"name"`
	// The detector's parameters.'
	Parameters pulumi.MapInput `pulumi:"parameters"`
	// The Smart Detector supported resource types. By default this is not populated, unless it's specified in expandDetector
	SupportedResourceTypes pulumi.StringArrayInput `pulumi:"supportedResourceTypes"`
}

func (DetectorResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DetectorResponse)(nil)).Elem()
}

func (i DetectorResponseArgs) ToDetectorResponseOutput() DetectorResponseOutput {
	return i.ToDetectorResponseOutputWithContext(context.Background())
}

func (i DetectorResponseArgs) ToDetectorResponseOutputWithContext(ctx context.Context) DetectorResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DetectorResponseOutput)
}

func (i DetectorResponseArgs) ToDetectorResponsePtrOutput() DetectorResponsePtrOutput {
	return i.ToDetectorResponsePtrOutputWithContext(context.Background())
}

func (i DetectorResponseArgs) ToDetectorResponsePtrOutputWithContext(ctx context.Context) DetectorResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DetectorResponseOutput).ToDetectorResponsePtrOutputWithContext(ctx)
}

// DetectorResponsePtrInput is an input type that accepts DetectorResponseArgs, DetectorResponsePtr and DetectorResponsePtrOutput values.
// You can construct a concrete instance of `DetectorResponsePtrInput` via:
//
//          DetectorResponseArgs{...}
//
//  or:
//
//          nil
type DetectorResponsePtrInput interface {
	pulumi.Input

	ToDetectorResponsePtrOutput() DetectorResponsePtrOutput
	ToDetectorResponsePtrOutputWithContext(context.Context) DetectorResponsePtrOutput
}

type detectorResponsePtrType DetectorResponseArgs

func DetectorResponsePtr(v *DetectorResponseArgs) DetectorResponsePtrInput {
	return (*detectorResponsePtrType)(v)
}

func (*detectorResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DetectorResponse)(nil)).Elem()
}

func (i *detectorResponsePtrType) ToDetectorResponsePtrOutput() DetectorResponsePtrOutput {
	return i.ToDetectorResponsePtrOutputWithContext(context.Background())
}

func (i *detectorResponsePtrType) ToDetectorResponsePtrOutputWithContext(ctx context.Context) DetectorResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DetectorResponsePtrOutput)
}

// The detector information. By default this is not populated, unless it's specified in expandDetector
type DetectorResponseOutput struct{ *pulumi.OutputState }

func (DetectorResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DetectorResponse)(nil)).Elem()
}

func (o DetectorResponseOutput) ToDetectorResponseOutput() DetectorResponseOutput {
	return o
}

func (o DetectorResponseOutput) ToDetectorResponseOutputWithContext(ctx context.Context) DetectorResponseOutput {
	return o
}

func (o DetectorResponseOutput) ToDetectorResponsePtrOutput() DetectorResponsePtrOutput {
	return o.ToDetectorResponsePtrOutputWithContext(context.Background())
}

func (o DetectorResponseOutput) ToDetectorResponsePtrOutputWithContext(ctx context.Context) DetectorResponsePtrOutput {
	return o.ApplyT(func(v DetectorResponse) *DetectorResponse {
		return &v
	}).(DetectorResponsePtrOutput)
}

// The Smart Detector description. By default this is not populated, unless it's specified in expandDetector
func (o DetectorResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DetectorResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The detector id.
func (o DetectorResponseOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v DetectorResponse) string { return v.Id }).(pulumi.StringOutput)
}

// The Smart Detector image path. By default this is not populated, unless it's specified in expandDetector
func (o DetectorResponseOutput) ImagePaths() pulumi.StringArrayOutput {
	return o.ApplyT(func(v DetectorResponse) []string { return v.ImagePaths }).(pulumi.StringArrayOutput)
}

// The Smart Detector name. By default this is not populated, unless it's specified in expandDetector
func (o DetectorResponseOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DetectorResponse) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The detector's parameters.'
func (o DetectorResponseOutput) Parameters() pulumi.MapOutput {
	return o.ApplyT(func(v DetectorResponse) map[string]interface{} { return v.Parameters }).(pulumi.MapOutput)
}

// The Smart Detector supported resource types. By default this is not populated, unless it's specified in expandDetector
func (o DetectorResponseOutput) SupportedResourceTypes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v DetectorResponse) []string { return v.SupportedResourceTypes }).(pulumi.StringArrayOutput)
}

type DetectorResponsePtrOutput struct{ *pulumi.OutputState }

func (DetectorResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DetectorResponse)(nil)).Elem()
}

func (o DetectorResponsePtrOutput) ToDetectorResponsePtrOutput() DetectorResponsePtrOutput {
	return o
}

func (o DetectorResponsePtrOutput) ToDetectorResponsePtrOutputWithContext(ctx context.Context) DetectorResponsePtrOutput {
	return o
}

func (o DetectorResponsePtrOutput) Elem() DetectorResponseOutput {
	return o.ApplyT(func(v *DetectorResponse) DetectorResponse { return *v }).(DetectorResponseOutput)
}

// The Smart Detector description. By default this is not populated, unless it's specified in expandDetector
func (o DetectorResponsePtrOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DetectorResponse) *string {
		if v == nil {
			return nil
		}
		return v.Description
	}).(pulumi.StringPtrOutput)
}

// The detector id.
func (o DetectorResponsePtrOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DetectorResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Id
	}).(pulumi.StringPtrOutput)
}

// The Smart Detector image path. By default this is not populated, unless it's specified in expandDetector
func (o DetectorResponsePtrOutput) ImagePaths() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *DetectorResponse) []string {
		if v == nil {
			return nil
		}
		return v.ImagePaths
	}).(pulumi.StringArrayOutput)
}

// The Smart Detector name. By default this is not populated, unless it's specified in expandDetector
func (o DetectorResponsePtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DetectorResponse) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// The detector's parameters.'
func (o DetectorResponsePtrOutput) Parameters() pulumi.MapOutput {
	return o.ApplyT(func(v *DetectorResponse) map[string]interface{} {
		if v == nil {
			return nil
		}
		return v.Parameters
	}).(pulumi.MapOutput)
}

// The Smart Detector supported resource types. By default this is not populated, unless it's specified in expandDetector
func (o DetectorResponsePtrOutput) SupportedResourceTypes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *DetectorResponse) []string {
		if v == nil {
			return nil
		}
		return v.SupportedResourceTypes
	}).(pulumi.StringArrayOutput)
}

// Action rule with diagnostics configuration
type Diagnostics struct {
	// conditions on which alerts will be filtered
	Conditions *Conditions `pulumi:"conditions"`
	// Description of action rule
	Description *string `pulumi:"description"`
	// scope on which action rule will apply
	Scope *Scope `pulumi:"scope"`
	// Indicates if the given action rule is enabled or disabled
	Status *string `pulumi:"status"`
	// Indicates type of action rule
	// Expected value is 'Diagnostics'.
	Type string `pulumi:"type"`
}

// DiagnosticsInput is an input type that accepts DiagnosticsArgs and DiagnosticsOutput values.
// You can construct a concrete instance of `DiagnosticsInput` via:
//
//          DiagnosticsArgs{...}
type DiagnosticsInput interface {
	pulumi.Input

	ToDiagnosticsOutput() DiagnosticsOutput
	ToDiagnosticsOutputWithContext(context.Context) DiagnosticsOutput
}

// Action rule with diagnostics configuration
type DiagnosticsArgs struct {
	// conditions on which alerts will be filtered
	Conditions ConditionsPtrInput `pulumi:"conditions"`
	// Description of action rule
	Description pulumi.StringPtrInput `pulumi:"description"`
	// scope on which action rule will apply
	Scope ScopePtrInput `pulumi:"scope"`
	// Indicates if the given action rule is enabled or disabled
	Status pulumi.StringPtrInput `pulumi:"status"`
	// Indicates type of action rule
	// Expected value is 'Diagnostics'.
	Type pulumi.StringInput `pulumi:"type"`
}

func (DiagnosticsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Diagnostics)(nil)).Elem()
}

func (i DiagnosticsArgs) ToDiagnosticsOutput() DiagnosticsOutput {
	return i.ToDiagnosticsOutputWithContext(context.Background())
}

func (i DiagnosticsArgs) ToDiagnosticsOutputWithContext(ctx context.Context) DiagnosticsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DiagnosticsOutput)
}

// Action rule with diagnostics configuration
type DiagnosticsOutput struct{ *pulumi.OutputState }

func (DiagnosticsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Diagnostics)(nil)).Elem()
}

func (o DiagnosticsOutput) ToDiagnosticsOutput() DiagnosticsOutput {
	return o
}

func (o DiagnosticsOutput) ToDiagnosticsOutputWithContext(ctx context.Context) DiagnosticsOutput {
	return o
}

// conditions on which alerts will be filtered
func (o DiagnosticsOutput) Conditions() ConditionsPtrOutput {
	return o.ApplyT(func(v Diagnostics) *Conditions { return v.Conditions }).(ConditionsPtrOutput)
}

// Description of action rule
func (o DiagnosticsOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Diagnostics) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// scope on which action rule will apply
func (o DiagnosticsOutput) Scope() ScopePtrOutput {
	return o.ApplyT(func(v Diagnostics) *Scope { return v.Scope }).(ScopePtrOutput)
}

// Indicates if the given action rule is enabled or disabled
func (o DiagnosticsOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Diagnostics) *string { return v.Status }).(pulumi.StringPtrOutput)
}

// Indicates type of action rule
// Expected value is 'Diagnostics'.
func (o DiagnosticsOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v Diagnostics) string { return v.Type }).(pulumi.StringOutput)
}

// Action rule with diagnostics configuration
type DiagnosticsResponse struct {
	// conditions on which alerts will be filtered
	Conditions *ConditionsResponse `pulumi:"conditions"`
	// Creation time of action rule. Date-Time in ISO-8601 format.
	CreatedAt string `pulumi:"createdAt"`
	// Created by user name.
	CreatedBy string `pulumi:"createdBy"`
	// Description of action rule
	Description *string `pulumi:"description"`
	// Last updated time of action rule. Date-Time in ISO-8601 format.
	LastModifiedAt string `pulumi:"lastModifiedAt"`
	// Last modified by user name.
	LastModifiedBy string `pulumi:"lastModifiedBy"`
	// scope on which action rule will apply
	Scope *ScopeResponse `pulumi:"scope"`
	// Indicates if the given action rule is enabled or disabled
	Status *string `pulumi:"status"`
	// Indicates type of action rule
	// Expected value is 'Diagnostics'.
	Type string `pulumi:"type"`
}

// DiagnosticsResponseInput is an input type that accepts DiagnosticsResponseArgs and DiagnosticsResponseOutput values.
// You can construct a concrete instance of `DiagnosticsResponseInput` via:
//
//          DiagnosticsResponseArgs{...}
type DiagnosticsResponseInput interface {
	pulumi.Input

	ToDiagnosticsResponseOutput() DiagnosticsResponseOutput
	ToDiagnosticsResponseOutputWithContext(context.Context) DiagnosticsResponseOutput
}

// Action rule with diagnostics configuration
type DiagnosticsResponseArgs struct {
	// conditions on which alerts will be filtered
	Conditions ConditionsResponsePtrInput `pulumi:"conditions"`
	// Creation time of action rule. Date-Time in ISO-8601 format.
	CreatedAt pulumi.StringInput `pulumi:"createdAt"`
	// Created by user name.
	CreatedBy pulumi.StringInput `pulumi:"createdBy"`
	// Description of action rule
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Last updated time of action rule. Date-Time in ISO-8601 format.
	LastModifiedAt pulumi.StringInput `pulumi:"lastModifiedAt"`
	// Last modified by user name.
	LastModifiedBy pulumi.StringInput `pulumi:"lastModifiedBy"`
	// scope on which action rule will apply
	Scope ScopeResponsePtrInput `pulumi:"scope"`
	// Indicates if the given action rule is enabled or disabled
	Status pulumi.StringPtrInput `pulumi:"status"`
	// Indicates type of action rule
	// Expected value is 'Diagnostics'.
	Type pulumi.StringInput `pulumi:"type"`
}

func (DiagnosticsResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DiagnosticsResponse)(nil)).Elem()
}

func (i DiagnosticsResponseArgs) ToDiagnosticsResponseOutput() DiagnosticsResponseOutput {
	return i.ToDiagnosticsResponseOutputWithContext(context.Background())
}

func (i DiagnosticsResponseArgs) ToDiagnosticsResponseOutputWithContext(ctx context.Context) DiagnosticsResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DiagnosticsResponseOutput)
}

// Action rule with diagnostics configuration
type DiagnosticsResponseOutput struct{ *pulumi.OutputState }

func (DiagnosticsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DiagnosticsResponse)(nil)).Elem()
}

func (o DiagnosticsResponseOutput) ToDiagnosticsResponseOutput() DiagnosticsResponseOutput {
	return o
}

func (o DiagnosticsResponseOutput) ToDiagnosticsResponseOutputWithContext(ctx context.Context) DiagnosticsResponseOutput {
	return o
}

// conditions on which alerts will be filtered
func (o DiagnosticsResponseOutput) Conditions() ConditionsResponsePtrOutput {
	return o.ApplyT(func(v DiagnosticsResponse) *ConditionsResponse { return v.Conditions }).(ConditionsResponsePtrOutput)
}

// Creation time of action rule. Date-Time in ISO-8601 format.
func (o DiagnosticsResponseOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v DiagnosticsResponse) string { return v.CreatedAt }).(pulumi.StringOutput)
}

// Created by user name.
func (o DiagnosticsResponseOutput) CreatedBy() pulumi.StringOutput {
	return o.ApplyT(func(v DiagnosticsResponse) string { return v.CreatedBy }).(pulumi.StringOutput)
}

// Description of action rule
func (o DiagnosticsResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DiagnosticsResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Last updated time of action rule. Date-Time in ISO-8601 format.
func (o DiagnosticsResponseOutput) LastModifiedAt() pulumi.StringOutput {
	return o.ApplyT(func(v DiagnosticsResponse) string { return v.LastModifiedAt }).(pulumi.StringOutput)
}

// Last modified by user name.
func (o DiagnosticsResponseOutput) LastModifiedBy() pulumi.StringOutput {
	return o.ApplyT(func(v DiagnosticsResponse) string { return v.LastModifiedBy }).(pulumi.StringOutput)
}

// scope on which action rule will apply
func (o DiagnosticsResponseOutput) Scope() ScopeResponsePtrOutput {
	return o.ApplyT(func(v DiagnosticsResponse) *ScopeResponse { return v.Scope }).(ScopeResponsePtrOutput)
}

// Indicates if the given action rule is enabled or disabled
func (o DiagnosticsResponseOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DiagnosticsResponse) *string { return v.Status }).(pulumi.StringPtrOutput)
}

// Indicates type of action rule
// Expected value is 'Diagnostics'.
func (o DiagnosticsResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v DiagnosticsResponse) string { return v.Type }).(pulumi.StringOutput)
}

// An alert action.
type HealthAlertAction struct {
	// the id of the action group to use.
	ActionGroupId *string `pulumi:"actionGroupId"`
	// The properties of a webhook object.
	WebHookProperties map[string]string `pulumi:"webHookProperties"`
}

// HealthAlertActionInput is an input type that accepts HealthAlertActionArgs and HealthAlertActionOutput values.
// You can construct a concrete instance of `HealthAlertActionInput` via:
//
//          HealthAlertActionArgs{...}
type HealthAlertActionInput interface {
	pulumi.Input

	ToHealthAlertActionOutput() HealthAlertActionOutput
	ToHealthAlertActionOutputWithContext(context.Context) HealthAlertActionOutput
}

// An alert action.
type HealthAlertActionArgs struct {
	// the id of the action group to use.
	ActionGroupId pulumi.StringPtrInput `pulumi:"actionGroupId"`
	// The properties of a webhook object.
	WebHookProperties pulumi.StringMapInput `pulumi:"webHookProperties"`
}

func (HealthAlertActionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HealthAlertAction)(nil)).Elem()
}

func (i HealthAlertActionArgs) ToHealthAlertActionOutput() HealthAlertActionOutput {
	return i.ToHealthAlertActionOutputWithContext(context.Background())
}

func (i HealthAlertActionArgs) ToHealthAlertActionOutputWithContext(ctx context.Context) HealthAlertActionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HealthAlertActionOutput)
}

// HealthAlertActionArrayInput is an input type that accepts HealthAlertActionArray and HealthAlertActionArrayOutput values.
// You can construct a concrete instance of `HealthAlertActionArrayInput` via:
//
//          HealthAlertActionArray{ HealthAlertActionArgs{...} }
type HealthAlertActionArrayInput interface {
	pulumi.Input

	ToHealthAlertActionArrayOutput() HealthAlertActionArrayOutput
	ToHealthAlertActionArrayOutputWithContext(context.Context) HealthAlertActionArrayOutput
}

type HealthAlertActionArray []HealthAlertActionInput

func (HealthAlertActionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]HealthAlertAction)(nil)).Elem()
}

func (i HealthAlertActionArray) ToHealthAlertActionArrayOutput() HealthAlertActionArrayOutput {
	return i.ToHealthAlertActionArrayOutputWithContext(context.Background())
}

func (i HealthAlertActionArray) ToHealthAlertActionArrayOutputWithContext(ctx context.Context) HealthAlertActionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HealthAlertActionArrayOutput)
}

// An alert action.
type HealthAlertActionOutput struct{ *pulumi.OutputState }

func (HealthAlertActionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HealthAlertAction)(nil)).Elem()
}

func (o HealthAlertActionOutput) ToHealthAlertActionOutput() HealthAlertActionOutput {
	return o
}

func (o HealthAlertActionOutput) ToHealthAlertActionOutputWithContext(ctx context.Context) HealthAlertActionOutput {
	return o
}

// the id of the action group to use.
func (o HealthAlertActionOutput) ActionGroupId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HealthAlertAction) *string { return v.ActionGroupId }).(pulumi.StringPtrOutput)
}

// The properties of a webhook object.
func (o HealthAlertActionOutput) WebHookProperties() pulumi.StringMapOutput {
	return o.ApplyT(func(v HealthAlertAction) map[string]string { return v.WebHookProperties }).(pulumi.StringMapOutput)
}

type HealthAlertActionArrayOutput struct{ *pulumi.OutputState }

func (HealthAlertActionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]HealthAlertAction)(nil)).Elem()
}

func (o HealthAlertActionArrayOutput) ToHealthAlertActionArrayOutput() HealthAlertActionArrayOutput {
	return o
}

func (o HealthAlertActionArrayOutput) ToHealthAlertActionArrayOutputWithContext(ctx context.Context) HealthAlertActionArrayOutput {
	return o
}

func (o HealthAlertActionArrayOutput) Index(i pulumi.IntInput) HealthAlertActionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) HealthAlertAction {
		return vs[0].([]HealthAlertAction)[vs[1].(int)]
	}).(HealthAlertActionOutput)
}

// An alert action.
type HealthAlertActionResponse struct {
	// the id of the action group to use.
	ActionGroupId *string `pulumi:"actionGroupId"`
	// The properties of a webhook object.
	WebHookProperties map[string]string `pulumi:"webHookProperties"`
}

// HealthAlertActionResponseInput is an input type that accepts HealthAlertActionResponseArgs and HealthAlertActionResponseOutput values.
// You can construct a concrete instance of `HealthAlertActionResponseInput` via:
//
//          HealthAlertActionResponseArgs{...}
type HealthAlertActionResponseInput interface {
	pulumi.Input

	ToHealthAlertActionResponseOutput() HealthAlertActionResponseOutput
	ToHealthAlertActionResponseOutputWithContext(context.Context) HealthAlertActionResponseOutput
}

// An alert action.
type HealthAlertActionResponseArgs struct {
	// the id of the action group to use.
	ActionGroupId pulumi.StringPtrInput `pulumi:"actionGroupId"`
	// The properties of a webhook object.
	WebHookProperties pulumi.StringMapInput `pulumi:"webHookProperties"`
}

func (HealthAlertActionResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HealthAlertActionResponse)(nil)).Elem()
}

func (i HealthAlertActionResponseArgs) ToHealthAlertActionResponseOutput() HealthAlertActionResponseOutput {
	return i.ToHealthAlertActionResponseOutputWithContext(context.Background())
}

func (i HealthAlertActionResponseArgs) ToHealthAlertActionResponseOutputWithContext(ctx context.Context) HealthAlertActionResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HealthAlertActionResponseOutput)
}

// HealthAlertActionResponseArrayInput is an input type that accepts HealthAlertActionResponseArray and HealthAlertActionResponseArrayOutput values.
// You can construct a concrete instance of `HealthAlertActionResponseArrayInput` via:
//
//          HealthAlertActionResponseArray{ HealthAlertActionResponseArgs{...} }
type HealthAlertActionResponseArrayInput interface {
	pulumi.Input

	ToHealthAlertActionResponseArrayOutput() HealthAlertActionResponseArrayOutput
	ToHealthAlertActionResponseArrayOutputWithContext(context.Context) HealthAlertActionResponseArrayOutput
}

type HealthAlertActionResponseArray []HealthAlertActionResponseInput

func (HealthAlertActionResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]HealthAlertActionResponse)(nil)).Elem()
}

func (i HealthAlertActionResponseArray) ToHealthAlertActionResponseArrayOutput() HealthAlertActionResponseArrayOutput {
	return i.ToHealthAlertActionResponseArrayOutputWithContext(context.Background())
}

func (i HealthAlertActionResponseArray) ToHealthAlertActionResponseArrayOutputWithContext(ctx context.Context) HealthAlertActionResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HealthAlertActionResponseArrayOutput)
}

// An alert action.
type HealthAlertActionResponseOutput struct{ *pulumi.OutputState }

func (HealthAlertActionResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HealthAlertActionResponse)(nil)).Elem()
}

func (o HealthAlertActionResponseOutput) ToHealthAlertActionResponseOutput() HealthAlertActionResponseOutput {
	return o
}

func (o HealthAlertActionResponseOutput) ToHealthAlertActionResponseOutputWithContext(ctx context.Context) HealthAlertActionResponseOutput {
	return o
}

// the id of the action group to use.
func (o HealthAlertActionResponseOutput) ActionGroupId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HealthAlertActionResponse) *string { return v.ActionGroupId }).(pulumi.StringPtrOutput)
}

// The properties of a webhook object.
func (o HealthAlertActionResponseOutput) WebHookProperties() pulumi.StringMapOutput {
	return o.ApplyT(func(v HealthAlertActionResponse) map[string]string { return v.WebHookProperties }).(pulumi.StringMapOutput)
}

type HealthAlertActionResponseArrayOutput struct{ *pulumi.OutputState }

func (HealthAlertActionResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]HealthAlertActionResponse)(nil)).Elem()
}

func (o HealthAlertActionResponseArrayOutput) ToHealthAlertActionResponseArrayOutput() HealthAlertActionResponseArrayOutput {
	return o
}

func (o HealthAlertActionResponseArrayOutput) ToHealthAlertActionResponseArrayOutputWithContext(ctx context.Context) HealthAlertActionResponseArrayOutput {
	return o
}

func (o HealthAlertActionResponseArrayOutput) Index(i pulumi.IntInput) HealthAlertActionResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) HealthAlertActionResponse {
		return vs[0].([]HealthAlertActionResponse)[vs[1].(int)]
	}).(HealthAlertActionResponseOutput)
}

// Specifies the resource health alert criteria for a single resource that has multiple metric criteria.
type HealthAlertCriteria struct {
	// The list of metric criteria for this 'all of' operation.
	AllOf []VmGuestHealthAlertCriterion `pulumi:"allOf"`
}

// HealthAlertCriteriaInput is an input type that accepts HealthAlertCriteriaArgs and HealthAlertCriteriaOutput values.
// You can construct a concrete instance of `HealthAlertCriteriaInput` via:
//
//          HealthAlertCriteriaArgs{...}
type HealthAlertCriteriaInput interface {
	pulumi.Input

	ToHealthAlertCriteriaOutput() HealthAlertCriteriaOutput
	ToHealthAlertCriteriaOutputWithContext(context.Context) HealthAlertCriteriaOutput
}

// Specifies the resource health alert criteria for a single resource that has multiple metric criteria.
type HealthAlertCriteriaArgs struct {
	// The list of metric criteria for this 'all of' operation.
	AllOf VmGuestHealthAlertCriterionArrayInput `pulumi:"allOf"`
}

func (HealthAlertCriteriaArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HealthAlertCriteria)(nil)).Elem()
}

func (i HealthAlertCriteriaArgs) ToHealthAlertCriteriaOutput() HealthAlertCriteriaOutput {
	return i.ToHealthAlertCriteriaOutputWithContext(context.Background())
}

func (i HealthAlertCriteriaArgs) ToHealthAlertCriteriaOutputWithContext(ctx context.Context) HealthAlertCriteriaOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HealthAlertCriteriaOutput)
}

func (i HealthAlertCriteriaArgs) ToHealthAlertCriteriaPtrOutput() HealthAlertCriteriaPtrOutput {
	return i.ToHealthAlertCriteriaPtrOutputWithContext(context.Background())
}

func (i HealthAlertCriteriaArgs) ToHealthAlertCriteriaPtrOutputWithContext(ctx context.Context) HealthAlertCriteriaPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HealthAlertCriteriaOutput).ToHealthAlertCriteriaPtrOutputWithContext(ctx)
}

// HealthAlertCriteriaPtrInput is an input type that accepts HealthAlertCriteriaArgs, HealthAlertCriteriaPtr and HealthAlertCriteriaPtrOutput values.
// You can construct a concrete instance of `HealthAlertCriteriaPtrInput` via:
//
//          HealthAlertCriteriaArgs{...}
//
//  or:
//
//          nil
type HealthAlertCriteriaPtrInput interface {
	pulumi.Input

	ToHealthAlertCriteriaPtrOutput() HealthAlertCriteriaPtrOutput
	ToHealthAlertCriteriaPtrOutputWithContext(context.Context) HealthAlertCriteriaPtrOutput
}

type healthAlertCriteriaPtrType HealthAlertCriteriaArgs

func HealthAlertCriteriaPtr(v *HealthAlertCriteriaArgs) HealthAlertCriteriaPtrInput {
	return (*healthAlertCriteriaPtrType)(v)
}

func (*healthAlertCriteriaPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**HealthAlertCriteria)(nil)).Elem()
}

func (i *healthAlertCriteriaPtrType) ToHealthAlertCriteriaPtrOutput() HealthAlertCriteriaPtrOutput {
	return i.ToHealthAlertCriteriaPtrOutputWithContext(context.Background())
}

func (i *healthAlertCriteriaPtrType) ToHealthAlertCriteriaPtrOutputWithContext(ctx context.Context) HealthAlertCriteriaPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HealthAlertCriteriaPtrOutput)
}

// Specifies the resource health alert criteria for a single resource that has multiple metric criteria.
type HealthAlertCriteriaOutput struct{ *pulumi.OutputState }

func (HealthAlertCriteriaOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HealthAlertCriteria)(nil)).Elem()
}

func (o HealthAlertCriteriaOutput) ToHealthAlertCriteriaOutput() HealthAlertCriteriaOutput {
	return o
}

func (o HealthAlertCriteriaOutput) ToHealthAlertCriteriaOutputWithContext(ctx context.Context) HealthAlertCriteriaOutput {
	return o
}

func (o HealthAlertCriteriaOutput) ToHealthAlertCriteriaPtrOutput() HealthAlertCriteriaPtrOutput {
	return o.ToHealthAlertCriteriaPtrOutputWithContext(context.Background())
}

func (o HealthAlertCriteriaOutput) ToHealthAlertCriteriaPtrOutputWithContext(ctx context.Context) HealthAlertCriteriaPtrOutput {
	return o.ApplyT(func(v HealthAlertCriteria) *HealthAlertCriteria {
		return &v
	}).(HealthAlertCriteriaPtrOutput)
}

// The list of metric criteria for this 'all of' operation.
func (o HealthAlertCriteriaOutput) AllOf() VmGuestHealthAlertCriterionArrayOutput {
	return o.ApplyT(func(v HealthAlertCriteria) []VmGuestHealthAlertCriterion { return v.AllOf }).(VmGuestHealthAlertCriterionArrayOutput)
}

type HealthAlertCriteriaPtrOutput struct{ *pulumi.OutputState }

func (HealthAlertCriteriaPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**HealthAlertCriteria)(nil)).Elem()
}

func (o HealthAlertCriteriaPtrOutput) ToHealthAlertCriteriaPtrOutput() HealthAlertCriteriaPtrOutput {
	return o
}

func (o HealthAlertCriteriaPtrOutput) ToHealthAlertCriteriaPtrOutputWithContext(ctx context.Context) HealthAlertCriteriaPtrOutput {
	return o
}

func (o HealthAlertCriteriaPtrOutput) Elem() HealthAlertCriteriaOutput {
	return o.ApplyT(func(v *HealthAlertCriteria) HealthAlertCriteria { return *v }).(HealthAlertCriteriaOutput)
}

// The list of metric criteria for this 'all of' operation.
func (o HealthAlertCriteriaPtrOutput) AllOf() VmGuestHealthAlertCriterionArrayOutput {
	return o.ApplyT(func(v *HealthAlertCriteria) []VmGuestHealthAlertCriterion {
		if v == nil {
			return nil
		}
		return v.AllOf
	}).(VmGuestHealthAlertCriterionArrayOutput)
}

// Specifies the resource health alert criteria for a single resource that has multiple metric criteria.
type HealthAlertCriteriaResponse struct {
	// The list of metric criteria for this 'all of' operation.
	AllOf []VmGuestHealthAlertCriterionResponse `pulumi:"allOf"`
}

// HealthAlertCriteriaResponseInput is an input type that accepts HealthAlertCriteriaResponseArgs and HealthAlertCriteriaResponseOutput values.
// You can construct a concrete instance of `HealthAlertCriteriaResponseInput` via:
//
//          HealthAlertCriteriaResponseArgs{...}
type HealthAlertCriteriaResponseInput interface {
	pulumi.Input

	ToHealthAlertCriteriaResponseOutput() HealthAlertCriteriaResponseOutput
	ToHealthAlertCriteriaResponseOutputWithContext(context.Context) HealthAlertCriteriaResponseOutput
}

// Specifies the resource health alert criteria for a single resource that has multiple metric criteria.
type HealthAlertCriteriaResponseArgs struct {
	// The list of metric criteria for this 'all of' operation.
	AllOf VmGuestHealthAlertCriterionResponseArrayInput `pulumi:"allOf"`
}

func (HealthAlertCriteriaResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HealthAlertCriteriaResponse)(nil)).Elem()
}

func (i HealthAlertCriteriaResponseArgs) ToHealthAlertCriteriaResponseOutput() HealthAlertCriteriaResponseOutput {
	return i.ToHealthAlertCriteriaResponseOutputWithContext(context.Background())
}

func (i HealthAlertCriteriaResponseArgs) ToHealthAlertCriteriaResponseOutputWithContext(ctx context.Context) HealthAlertCriteriaResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HealthAlertCriteriaResponseOutput)
}

func (i HealthAlertCriteriaResponseArgs) ToHealthAlertCriteriaResponsePtrOutput() HealthAlertCriteriaResponsePtrOutput {
	return i.ToHealthAlertCriteriaResponsePtrOutputWithContext(context.Background())
}

func (i HealthAlertCriteriaResponseArgs) ToHealthAlertCriteriaResponsePtrOutputWithContext(ctx context.Context) HealthAlertCriteriaResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HealthAlertCriteriaResponseOutput).ToHealthAlertCriteriaResponsePtrOutputWithContext(ctx)
}

// HealthAlertCriteriaResponsePtrInput is an input type that accepts HealthAlertCriteriaResponseArgs, HealthAlertCriteriaResponsePtr and HealthAlertCriteriaResponsePtrOutput values.
// You can construct a concrete instance of `HealthAlertCriteriaResponsePtrInput` via:
//
//          HealthAlertCriteriaResponseArgs{...}
//
//  or:
//
//          nil
type HealthAlertCriteriaResponsePtrInput interface {
	pulumi.Input

	ToHealthAlertCriteriaResponsePtrOutput() HealthAlertCriteriaResponsePtrOutput
	ToHealthAlertCriteriaResponsePtrOutputWithContext(context.Context) HealthAlertCriteriaResponsePtrOutput
}

type healthAlertCriteriaResponsePtrType HealthAlertCriteriaResponseArgs

func HealthAlertCriteriaResponsePtr(v *HealthAlertCriteriaResponseArgs) HealthAlertCriteriaResponsePtrInput {
	return (*healthAlertCriteriaResponsePtrType)(v)
}

func (*healthAlertCriteriaResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**HealthAlertCriteriaResponse)(nil)).Elem()
}

func (i *healthAlertCriteriaResponsePtrType) ToHealthAlertCriteriaResponsePtrOutput() HealthAlertCriteriaResponsePtrOutput {
	return i.ToHealthAlertCriteriaResponsePtrOutputWithContext(context.Background())
}

func (i *healthAlertCriteriaResponsePtrType) ToHealthAlertCriteriaResponsePtrOutputWithContext(ctx context.Context) HealthAlertCriteriaResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HealthAlertCriteriaResponsePtrOutput)
}

// Specifies the resource health alert criteria for a single resource that has multiple metric criteria.
type HealthAlertCriteriaResponseOutput struct{ *pulumi.OutputState }

func (HealthAlertCriteriaResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HealthAlertCriteriaResponse)(nil)).Elem()
}

func (o HealthAlertCriteriaResponseOutput) ToHealthAlertCriteriaResponseOutput() HealthAlertCriteriaResponseOutput {
	return o
}

func (o HealthAlertCriteriaResponseOutput) ToHealthAlertCriteriaResponseOutputWithContext(ctx context.Context) HealthAlertCriteriaResponseOutput {
	return o
}

func (o HealthAlertCriteriaResponseOutput) ToHealthAlertCriteriaResponsePtrOutput() HealthAlertCriteriaResponsePtrOutput {
	return o.ToHealthAlertCriteriaResponsePtrOutputWithContext(context.Background())
}

func (o HealthAlertCriteriaResponseOutput) ToHealthAlertCriteriaResponsePtrOutputWithContext(ctx context.Context) HealthAlertCriteriaResponsePtrOutput {
	return o.ApplyT(func(v HealthAlertCriteriaResponse) *HealthAlertCriteriaResponse {
		return &v
	}).(HealthAlertCriteriaResponsePtrOutput)
}

// The list of metric criteria for this 'all of' operation.
func (o HealthAlertCriteriaResponseOutput) AllOf() VmGuestHealthAlertCriterionResponseArrayOutput {
	return o.ApplyT(func(v HealthAlertCriteriaResponse) []VmGuestHealthAlertCriterionResponse { return v.AllOf }).(VmGuestHealthAlertCriterionResponseArrayOutput)
}

type HealthAlertCriteriaResponsePtrOutput struct{ *pulumi.OutputState }

func (HealthAlertCriteriaResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**HealthAlertCriteriaResponse)(nil)).Elem()
}

func (o HealthAlertCriteriaResponsePtrOutput) ToHealthAlertCriteriaResponsePtrOutput() HealthAlertCriteriaResponsePtrOutput {
	return o
}

func (o HealthAlertCriteriaResponsePtrOutput) ToHealthAlertCriteriaResponsePtrOutputWithContext(ctx context.Context) HealthAlertCriteriaResponsePtrOutput {
	return o
}

func (o HealthAlertCriteriaResponsePtrOutput) Elem() HealthAlertCriteriaResponseOutput {
	return o.ApplyT(func(v *HealthAlertCriteriaResponse) HealthAlertCriteriaResponse { return *v }).(HealthAlertCriteriaResponseOutput)
}

// The list of metric criteria for this 'all of' operation.
func (o HealthAlertCriteriaResponsePtrOutput) AllOf() VmGuestHealthAlertCriterionResponseArrayOutput {
	return o.ApplyT(func(v *HealthAlertCriteriaResponse) []VmGuestHealthAlertCriterionResponse {
		if v == nil {
			return nil
		}
		return v.AllOf
	}).(VmGuestHealthAlertCriterionResponseArrayOutput)
}

// Specifies the health state to alert on and the corresponding severity
type HealthState struct {
	// Health state name
	HealthStateName string `pulumi:"healthStateName"`
	// Severity of alert fired
	Severity float64 `pulumi:"severity"`
}

// HealthStateInput is an input type that accepts HealthStateArgs and HealthStateOutput values.
// You can construct a concrete instance of `HealthStateInput` via:
//
//          HealthStateArgs{...}
type HealthStateInput interface {
	pulumi.Input

	ToHealthStateOutput() HealthStateOutput
	ToHealthStateOutputWithContext(context.Context) HealthStateOutput
}

// Specifies the health state to alert on and the corresponding severity
type HealthStateArgs struct {
	// Health state name
	HealthStateName pulumi.StringInput `pulumi:"healthStateName"`
	// Severity of alert fired
	Severity pulumi.Float64Input `pulumi:"severity"`
}

func (HealthStateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HealthState)(nil)).Elem()
}

func (i HealthStateArgs) ToHealthStateOutput() HealthStateOutput {
	return i.ToHealthStateOutputWithContext(context.Background())
}

func (i HealthStateArgs) ToHealthStateOutputWithContext(ctx context.Context) HealthStateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HealthStateOutput)
}

// HealthStateArrayInput is an input type that accepts HealthStateArray and HealthStateArrayOutput values.
// You can construct a concrete instance of `HealthStateArrayInput` via:
//
//          HealthStateArray{ HealthStateArgs{...} }
type HealthStateArrayInput interface {
	pulumi.Input

	ToHealthStateArrayOutput() HealthStateArrayOutput
	ToHealthStateArrayOutputWithContext(context.Context) HealthStateArrayOutput
}

type HealthStateArray []HealthStateInput

func (HealthStateArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]HealthState)(nil)).Elem()
}

func (i HealthStateArray) ToHealthStateArrayOutput() HealthStateArrayOutput {
	return i.ToHealthStateArrayOutputWithContext(context.Background())
}

func (i HealthStateArray) ToHealthStateArrayOutputWithContext(ctx context.Context) HealthStateArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HealthStateArrayOutput)
}

// Specifies the health state to alert on and the corresponding severity
type HealthStateOutput struct{ *pulumi.OutputState }

func (HealthStateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HealthState)(nil)).Elem()
}

func (o HealthStateOutput) ToHealthStateOutput() HealthStateOutput {
	return o
}

func (o HealthStateOutput) ToHealthStateOutputWithContext(ctx context.Context) HealthStateOutput {
	return o
}

// Health state name
func (o HealthStateOutput) HealthStateName() pulumi.StringOutput {
	return o.ApplyT(func(v HealthState) string { return v.HealthStateName }).(pulumi.StringOutput)
}

// Severity of alert fired
func (o HealthStateOutput) Severity() pulumi.Float64Output {
	return o.ApplyT(func(v HealthState) float64 { return v.Severity }).(pulumi.Float64Output)
}

type HealthStateArrayOutput struct{ *pulumi.OutputState }

func (HealthStateArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]HealthState)(nil)).Elem()
}

func (o HealthStateArrayOutput) ToHealthStateArrayOutput() HealthStateArrayOutput {
	return o
}

func (o HealthStateArrayOutput) ToHealthStateArrayOutputWithContext(ctx context.Context) HealthStateArrayOutput {
	return o
}

func (o HealthStateArrayOutput) Index(i pulumi.IntInput) HealthStateOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) HealthState {
		return vs[0].([]HealthState)[vs[1].(int)]
	}).(HealthStateOutput)
}

// Specifies the health state to alert on and the corresponding severity
type HealthStateResponse struct {
	// Health state name
	HealthStateName string `pulumi:"healthStateName"`
	// Severity of alert fired
	Severity float64 `pulumi:"severity"`
}

// HealthStateResponseInput is an input type that accepts HealthStateResponseArgs and HealthStateResponseOutput values.
// You can construct a concrete instance of `HealthStateResponseInput` via:
//
//          HealthStateResponseArgs{...}
type HealthStateResponseInput interface {
	pulumi.Input

	ToHealthStateResponseOutput() HealthStateResponseOutput
	ToHealthStateResponseOutputWithContext(context.Context) HealthStateResponseOutput
}

// Specifies the health state to alert on and the corresponding severity
type HealthStateResponseArgs struct {
	// Health state name
	HealthStateName pulumi.StringInput `pulumi:"healthStateName"`
	// Severity of alert fired
	Severity pulumi.Float64Input `pulumi:"severity"`
}

func (HealthStateResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HealthStateResponse)(nil)).Elem()
}

func (i HealthStateResponseArgs) ToHealthStateResponseOutput() HealthStateResponseOutput {
	return i.ToHealthStateResponseOutputWithContext(context.Background())
}

func (i HealthStateResponseArgs) ToHealthStateResponseOutputWithContext(ctx context.Context) HealthStateResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HealthStateResponseOutput)
}

// HealthStateResponseArrayInput is an input type that accepts HealthStateResponseArray and HealthStateResponseArrayOutput values.
// You can construct a concrete instance of `HealthStateResponseArrayInput` via:
//
//          HealthStateResponseArray{ HealthStateResponseArgs{...} }
type HealthStateResponseArrayInput interface {
	pulumi.Input

	ToHealthStateResponseArrayOutput() HealthStateResponseArrayOutput
	ToHealthStateResponseArrayOutputWithContext(context.Context) HealthStateResponseArrayOutput
}

type HealthStateResponseArray []HealthStateResponseInput

func (HealthStateResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]HealthStateResponse)(nil)).Elem()
}

func (i HealthStateResponseArray) ToHealthStateResponseArrayOutput() HealthStateResponseArrayOutput {
	return i.ToHealthStateResponseArrayOutputWithContext(context.Background())
}

func (i HealthStateResponseArray) ToHealthStateResponseArrayOutputWithContext(ctx context.Context) HealthStateResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HealthStateResponseArrayOutput)
}

// Specifies the health state to alert on and the corresponding severity
type HealthStateResponseOutput struct{ *pulumi.OutputState }

func (HealthStateResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HealthStateResponse)(nil)).Elem()
}

func (o HealthStateResponseOutput) ToHealthStateResponseOutput() HealthStateResponseOutput {
	return o
}

func (o HealthStateResponseOutput) ToHealthStateResponseOutputWithContext(ctx context.Context) HealthStateResponseOutput {
	return o
}

// Health state name
func (o HealthStateResponseOutput) HealthStateName() pulumi.StringOutput {
	return o.ApplyT(func(v HealthStateResponse) string { return v.HealthStateName }).(pulumi.StringOutput)
}

// Severity of alert fired
func (o HealthStateResponseOutput) Severity() pulumi.Float64Output {
	return o.ApplyT(func(v HealthStateResponse) float64 { return v.Severity }).(pulumi.Float64Output)
}

type HealthStateResponseArrayOutput struct{ *pulumi.OutputState }

func (HealthStateResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]HealthStateResponse)(nil)).Elem()
}

func (o HealthStateResponseArrayOutput) ToHealthStateResponseArrayOutput() HealthStateResponseArrayOutput {
	return o
}

func (o HealthStateResponseArrayOutput) ToHealthStateResponseArrayOutputWithContext(ctx context.Context) HealthStateResponseArrayOutput {
	return o
}

func (o HealthStateResponseArrayOutput) Index(i pulumi.IntInput) HealthStateResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) HealthStateResponse {
		return vs[0].([]HealthStateResponse)[vs[1].(int)]
	}).(HealthStateResponseOutput)
}

// Target scope for a given action rule. By default scope will be the subscription. User can also provide list of resource groups or list of resources from the scope subscription as well.
type Scope struct {
	// type of target scope
	ScopeType *string `pulumi:"scopeType"`
	// list of ARM IDs of the given scope type which will be the target of the given action rule.
	Values []string `pulumi:"values"`
}

// ScopeInput is an input type that accepts ScopeArgs and ScopeOutput values.
// You can construct a concrete instance of `ScopeInput` via:
//
//          ScopeArgs{...}
type ScopeInput interface {
	pulumi.Input

	ToScopeOutput() ScopeOutput
	ToScopeOutputWithContext(context.Context) ScopeOutput
}

// Target scope for a given action rule. By default scope will be the subscription. User can also provide list of resource groups or list of resources from the scope subscription as well.
type ScopeArgs struct {
	// type of target scope
	ScopeType pulumi.StringPtrInput `pulumi:"scopeType"`
	// list of ARM IDs of the given scope type which will be the target of the given action rule.
	Values pulumi.StringArrayInput `pulumi:"values"`
}

func (ScopeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Scope)(nil)).Elem()
}

func (i ScopeArgs) ToScopeOutput() ScopeOutput {
	return i.ToScopeOutputWithContext(context.Background())
}

func (i ScopeArgs) ToScopeOutputWithContext(ctx context.Context) ScopeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScopeOutput)
}

func (i ScopeArgs) ToScopePtrOutput() ScopePtrOutput {
	return i.ToScopePtrOutputWithContext(context.Background())
}

func (i ScopeArgs) ToScopePtrOutputWithContext(ctx context.Context) ScopePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScopeOutput).ToScopePtrOutputWithContext(ctx)
}

// ScopePtrInput is an input type that accepts ScopeArgs, ScopePtr and ScopePtrOutput values.
// You can construct a concrete instance of `ScopePtrInput` via:
//
//          ScopeArgs{...}
//
//  or:
//
//          nil
type ScopePtrInput interface {
	pulumi.Input

	ToScopePtrOutput() ScopePtrOutput
	ToScopePtrOutputWithContext(context.Context) ScopePtrOutput
}

type scopePtrType ScopeArgs

func ScopePtr(v *ScopeArgs) ScopePtrInput {
	return (*scopePtrType)(v)
}

func (*scopePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Scope)(nil)).Elem()
}

func (i *scopePtrType) ToScopePtrOutput() ScopePtrOutput {
	return i.ToScopePtrOutputWithContext(context.Background())
}

func (i *scopePtrType) ToScopePtrOutputWithContext(ctx context.Context) ScopePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScopePtrOutput)
}

// Target scope for a given action rule. By default scope will be the subscription. User can also provide list of resource groups or list of resources from the scope subscription as well.
type ScopeOutput struct{ *pulumi.OutputState }

func (ScopeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Scope)(nil)).Elem()
}

func (o ScopeOutput) ToScopeOutput() ScopeOutput {
	return o
}

func (o ScopeOutput) ToScopeOutputWithContext(ctx context.Context) ScopeOutput {
	return o
}

func (o ScopeOutput) ToScopePtrOutput() ScopePtrOutput {
	return o.ToScopePtrOutputWithContext(context.Background())
}

func (o ScopeOutput) ToScopePtrOutputWithContext(ctx context.Context) ScopePtrOutput {
	return o.ApplyT(func(v Scope) *Scope {
		return &v
	}).(ScopePtrOutput)
}

// type of target scope
func (o ScopeOutput) ScopeType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Scope) *string { return v.ScopeType }).(pulumi.StringPtrOutput)
}

// list of ARM IDs of the given scope type which will be the target of the given action rule.
func (o ScopeOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v Scope) []string { return v.Values }).(pulumi.StringArrayOutput)
}

type ScopePtrOutput struct{ *pulumi.OutputState }

func (ScopePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Scope)(nil)).Elem()
}

func (o ScopePtrOutput) ToScopePtrOutput() ScopePtrOutput {
	return o
}

func (o ScopePtrOutput) ToScopePtrOutputWithContext(ctx context.Context) ScopePtrOutput {
	return o
}

func (o ScopePtrOutput) Elem() ScopeOutput {
	return o.ApplyT(func(v *Scope) Scope { return *v }).(ScopeOutput)
}

// type of target scope
func (o ScopePtrOutput) ScopeType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Scope) *string {
		if v == nil {
			return nil
		}
		return v.ScopeType
	}).(pulumi.StringPtrOutput)
}

// list of ARM IDs of the given scope type which will be the target of the given action rule.
func (o ScopePtrOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Scope) []string {
		if v == nil {
			return nil
		}
		return v.Values
	}).(pulumi.StringArrayOutput)
}

// Target scope for a given action rule. By default scope will be the subscription. User can also provide list of resource groups or list of resources from the scope subscription as well.
type ScopeResponse struct {
	// type of target scope
	ScopeType *string `pulumi:"scopeType"`
	// list of ARM IDs of the given scope type which will be the target of the given action rule.
	Values []string `pulumi:"values"`
}

// ScopeResponseInput is an input type that accepts ScopeResponseArgs and ScopeResponseOutput values.
// You can construct a concrete instance of `ScopeResponseInput` via:
//
//          ScopeResponseArgs{...}
type ScopeResponseInput interface {
	pulumi.Input

	ToScopeResponseOutput() ScopeResponseOutput
	ToScopeResponseOutputWithContext(context.Context) ScopeResponseOutput
}

// Target scope for a given action rule. By default scope will be the subscription. User can also provide list of resource groups or list of resources from the scope subscription as well.
type ScopeResponseArgs struct {
	// type of target scope
	ScopeType pulumi.StringPtrInput `pulumi:"scopeType"`
	// list of ARM IDs of the given scope type which will be the target of the given action rule.
	Values pulumi.StringArrayInput `pulumi:"values"`
}

func (ScopeResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ScopeResponse)(nil)).Elem()
}

func (i ScopeResponseArgs) ToScopeResponseOutput() ScopeResponseOutput {
	return i.ToScopeResponseOutputWithContext(context.Background())
}

func (i ScopeResponseArgs) ToScopeResponseOutputWithContext(ctx context.Context) ScopeResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScopeResponseOutput)
}

func (i ScopeResponseArgs) ToScopeResponsePtrOutput() ScopeResponsePtrOutput {
	return i.ToScopeResponsePtrOutputWithContext(context.Background())
}

func (i ScopeResponseArgs) ToScopeResponsePtrOutputWithContext(ctx context.Context) ScopeResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScopeResponseOutput).ToScopeResponsePtrOutputWithContext(ctx)
}

// ScopeResponsePtrInput is an input type that accepts ScopeResponseArgs, ScopeResponsePtr and ScopeResponsePtrOutput values.
// You can construct a concrete instance of `ScopeResponsePtrInput` via:
//
//          ScopeResponseArgs{...}
//
//  or:
//
//          nil
type ScopeResponsePtrInput interface {
	pulumi.Input

	ToScopeResponsePtrOutput() ScopeResponsePtrOutput
	ToScopeResponsePtrOutputWithContext(context.Context) ScopeResponsePtrOutput
}

type scopeResponsePtrType ScopeResponseArgs

func ScopeResponsePtr(v *ScopeResponseArgs) ScopeResponsePtrInput {
	return (*scopeResponsePtrType)(v)
}

func (*scopeResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ScopeResponse)(nil)).Elem()
}

func (i *scopeResponsePtrType) ToScopeResponsePtrOutput() ScopeResponsePtrOutput {
	return i.ToScopeResponsePtrOutputWithContext(context.Background())
}

func (i *scopeResponsePtrType) ToScopeResponsePtrOutputWithContext(ctx context.Context) ScopeResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScopeResponsePtrOutput)
}

// Target scope for a given action rule. By default scope will be the subscription. User can also provide list of resource groups or list of resources from the scope subscription as well.
type ScopeResponseOutput struct{ *pulumi.OutputState }

func (ScopeResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ScopeResponse)(nil)).Elem()
}

func (o ScopeResponseOutput) ToScopeResponseOutput() ScopeResponseOutput {
	return o
}

func (o ScopeResponseOutput) ToScopeResponseOutputWithContext(ctx context.Context) ScopeResponseOutput {
	return o
}

func (o ScopeResponseOutput) ToScopeResponsePtrOutput() ScopeResponsePtrOutput {
	return o.ToScopeResponsePtrOutputWithContext(context.Background())
}

func (o ScopeResponseOutput) ToScopeResponsePtrOutputWithContext(ctx context.Context) ScopeResponsePtrOutput {
	return o.ApplyT(func(v ScopeResponse) *ScopeResponse {
		return &v
	}).(ScopeResponsePtrOutput)
}

// type of target scope
func (o ScopeResponseOutput) ScopeType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ScopeResponse) *string { return v.ScopeType }).(pulumi.StringPtrOutput)
}

// list of ARM IDs of the given scope type which will be the target of the given action rule.
func (o ScopeResponseOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ScopeResponse) []string { return v.Values }).(pulumi.StringArrayOutput)
}

type ScopeResponsePtrOutput struct{ *pulumi.OutputState }

func (ScopeResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ScopeResponse)(nil)).Elem()
}

func (o ScopeResponsePtrOutput) ToScopeResponsePtrOutput() ScopeResponsePtrOutput {
	return o
}

func (o ScopeResponsePtrOutput) ToScopeResponsePtrOutputWithContext(ctx context.Context) ScopeResponsePtrOutput {
	return o
}

func (o ScopeResponsePtrOutput) Elem() ScopeResponseOutput {
	return o.ApplyT(func(v *ScopeResponse) ScopeResponse { return *v }).(ScopeResponseOutput)
}

// type of target scope
func (o ScopeResponsePtrOutput) ScopeType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ScopeResponse) *string {
		if v == nil {
			return nil
		}
		return v.ScopeType
	}).(pulumi.StringPtrOutput)
}

// list of ARM IDs of the given scope type which will be the target of the given action rule.
func (o ScopeResponsePtrOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ScopeResponse) []string {
		if v == nil {
			return nil
		}
		return v.Values
	}).(pulumi.StringArrayOutput)
}

// Action rule with suppression configuration
type Suppression struct {
	// conditions on which alerts will be filtered
	Conditions *Conditions `pulumi:"conditions"`
	// Description of action rule
	Description *string `pulumi:"description"`
	// scope on which action rule will apply
	Scope *Scope `pulumi:"scope"`
	// Indicates if the given action rule is enabled or disabled
	Status *string `pulumi:"status"`
	// suppression configuration for the action rule
	SuppressionConfig SuppressionConfig `pulumi:"suppressionConfig"`
	// Indicates type of action rule
	// Expected value is 'Suppression'.
	Type string `pulumi:"type"`
}

// SuppressionInput is an input type that accepts SuppressionArgs and SuppressionOutput values.
// You can construct a concrete instance of `SuppressionInput` via:
//
//          SuppressionArgs{...}
type SuppressionInput interface {
	pulumi.Input

	ToSuppressionOutput() SuppressionOutput
	ToSuppressionOutputWithContext(context.Context) SuppressionOutput
}

// Action rule with suppression configuration
type SuppressionArgs struct {
	// conditions on which alerts will be filtered
	Conditions ConditionsPtrInput `pulumi:"conditions"`
	// Description of action rule
	Description pulumi.StringPtrInput `pulumi:"description"`
	// scope on which action rule will apply
	Scope ScopePtrInput `pulumi:"scope"`
	// Indicates if the given action rule is enabled or disabled
	Status pulumi.StringPtrInput `pulumi:"status"`
	// suppression configuration for the action rule
	SuppressionConfig SuppressionConfigInput `pulumi:"suppressionConfig"`
	// Indicates type of action rule
	// Expected value is 'Suppression'.
	Type pulumi.StringInput `pulumi:"type"`
}

func (SuppressionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Suppression)(nil)).Elem()
}

func (i SuppressionArgs) ToSuppressionOutput() SuppressionOutput {
	return i.ToSuppressionOutputWithContext(context.Background())
}

func (i SuppressionArgs) ToSuppressionOutputWithContext(ctx context.Context) SuppressionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SuppressionOutput)
}

// Action rule with suppression configuration
type SuppressionOutput struct{ *pulumi.OutputState }

func (SuppressionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Suppression)(nil)).Elem()
}

func (o SuppressionOutput) ToSuppressionOutput() SuppressionOutput {
	return o
}

func (o SuppressionOutput) ToSuppressionOutputWithContext(ctx context.Context) SuppressionOutput {
	return o
}

// conditions on which alerts will be filtered
func (o SuppressionOutput) Conditions() ConditionsPtrOutput {
	return o.ApplyT(func(v Suppression) *Conditions { return v.Conditions }).(ConditionsPtrOutput)
}

// Description of action rule
func (o SuppressionOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Suppression) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// scope on which action rule will apply
func (o SuppressionOutput) Scope() ScopePtrOutput {
	return o.ApplyT(func(v Suppression) *Scope { return v.Scope }).(ScopePtrOutput)
}

// Indicates if the given action rule is enabled or disabled
func (o SuppressionOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Suppression) *string { return v.Status }).(pulumi.StringPtrOutput)
}

// suppression configuration for the action rule
func (o SuppressionOutput) SuppressionConfig() SuppressionConfigOutput {
	return o.ApplyT(func(v Suppression) SuppressionConfig { return v.SuppressionConfig }).(SuppressionConfigOutput)
}

// Indicates type of action rule
// Expected value is 'Suppression'.
func (o SuppressionOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v Suppression) string { return v.Type }).(pulumi.StringOutput)
}

// Suppression logic for a given action rule
type SuppressionConfig struct {
	// Specifies when the suppression should be applied
	RecurrenceType string `pulumi:"recurrenceType"`
	// suppression schedule configuration
	Schedule *SuppressionSchedule `pulumi:"schedule"`
}

// SuppressionConfigInput is an input type that accepts SuppressionConfigArgs and SuppressionConfigOutput values.
// You can construct a concrete instance of `SuppressionConfigInput` via:
//
//          SuppressionConfigArgs{...}
type SuppressionConfigInput interface {
	pulumi.Input

	ToSuppressionConfigOutput() SuppressionConfigOutput
	ToSuppressionConfigOutputWithContext(context.Context) SuppressionConfigOutput
}

// Suppression logic for a given action rule
type SuppressionConfigArgs struct {
	// Specifies when the suppression should be applied
	RecurrenceType pulumi.StringInput `pulumi:"recurrenceType"`
	// suppression schedule configuration
	Schedule SuppressionSchedulePtrInput `pulumi:"schedule"`
}

func (SuppressionConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SuppressionConfig)(nil)).Elem()
}

func (i SuppressionConfigArgs) ToSuppressionConfigOutput() SuppressionConfigOutput {
	return i.ToSuppressionConfigOutputWithContext(context.Background())
}

func (i SuppressionConfigArgs) ToSuppressionConfigOutputWithContext(ctx context.Context) SuppressionConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SuppressionConfigOutput)
}

// Suppression logic for a given action rule
type SuppressionConfigOutput struct{ *pulumi.OutputState }

func (SuppressionConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SuppressionConfig)(nil)).Elem()
}

func (o SuppressionConfigOutput) ToSuppressionConfigOutput() SuppressionConfigOutput {
	return o
}

func (o SuppressionConfigOutput) ToSuppressionConfigOutputWithContext(ctx context.Context) SuppressionConfigOutput {
	return o
}

// Specifies when the suppression should be applied
func (o SuppressionConfigOutput) RecurrenceType() pulumi.StringOutput {
	return o.ApplyT(func(v SuppressionConfig) string { return v.RecurrenceType }).(pulumi.StringOutput)
}

// suppression schedule configuration
func (o SuppressionConfigOutput) Schedule() SuppressionSchedulePtrOutput {
	return o.ApplyT(func(v SuppressionConfig) *SuppressionSchedule { return v.Schedule }).(SuppressionSchedulePtrOutput)
}

// Suppression logic for a given action rule
type SuppressionConfigResponse struct {
	// Specifies when the suppression should be applied
	RecurrenceType string `pulumi:"recurrenceType"`
	// suppression schedule configuration
	Schedule *SuppressionScheduleResponse `pulumi:"schedule"`
}

// SuppressionConfigResponseInput is an input type that accepts SuppressionConfigResponseArgs and SuppressionConfigResponseOutput values.
// You can construct a concrete instance of `SuppressionConfigResponseInput` via:
//
//          SuppressionConfigResponseArgs{...}
type SuppressionConfigResponseInput interface {
	pulumi.Input

	ToSuppressionConfigResponseOutput() SuppressionConfigResponseOutput
	ToSuppressionConfigResponseOutputWithContext(context.Context) SuppressionConfigResponseOutput
}

// Suppression logic for a given action rule
type SuppressionConfigResponseArgs struct {
	// Specifies when the suppression should be applied
	RecurrenceType pulumi.StringInput `pulumi:"recurrenceType"`
	// suppression schedule configuration
	Schedule SuppressionScheduleResponsePtrInput `pulumi:"schedule"`
}

func (SuppressionConfigResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SuppressionConfigResponse)(nil)).Elem()
}

func (i SuppressionConfigResponseArgs) ToSuppressionConfigResponseOutput() SuppressionConfigResponseOutput {
	return i.ToSuppressionConfigResponseOutputWithContext(context.Background())
}

func (i SuppressionConfigResponseArgs) ToSuppressionConfigResponseOutputWithContext(ctx context.Context) SuppressionConfigResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SuppressionConfigResponseOutput)
}

// Suppression logic for a given action rule
type SuppressionConfigResponseOutput struct{ *pulumi.OutputState }

func (SuppressionConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SuppressionConfigResponse)(nil)).Elem()
}

func (o SuppressionConfigResponseOutput) ToSuppressionConfigResponseOutput() SuppressionConfigResponseOutput {
	return o
}

func (o SuppressionConfigResponseOutput) ToSuppressionConfigResponseOutputWithContext(ctx context.Context) SuppressionConfigResponseOutput {
	return o
}

// Specifies when the suppression should be applied
func (o SuppressionConfigResponseOutput) RecurrenceType() pulumi.StringOutput {
	return o.ApplyT(func(v SuppressionConfigResponse) string { return v.RecurrenceType }).(pulumi.StringOutput)
}

// suppression schedule configuration
func (o SuppressionConfigResponseOutput) Schedule() SuppressionScheduleResponsePtrOutput {
	return o.ApplyT(func(v SuppressionConfigResponse) *SuppressionScheduleResponse { return v.Schedule }).(SuppressionScheduleResponsePtrOutput)
}

// Action rule with suppression configuration
type SuppressionResponse struct {
	// conditions on which alerts will be filtered
	Conditions *ConditionsResponse `pulumi:"conditions"`
	// Creation time of action rule. Date-Time in ISO-8601 format.
	CreatedAt string `pulumi:"createdAt"`
	// Created by user name.
	CreatedBy string `pulumi:"createdBy"`
	// Description of action rule
	Description *string `pulumi:"description"`
	// Last updated time of action rule. Date-Time in ISO-8601 format.
	LastModifiedAt string `pulumi:"lastModifiedAt"`
	// Last modified by user name.
	LastModifiedBy string `pulumi:"lastModifiedBy"`
	// scope on which action rule will apply
	Scope *ScopeResponse `pulumi:"scope"`
	// Indicates if the given action rule is enabled or disabled
	Status *string `pulumi:"status"`
	// suppression configuration for the action rule
	SuppressionConfig SuppressionConfigResponse `pulumi:"suppressionConfig"`
	// Indicates type of action rule
	// Expected value is 'Suppression'.
	Type string `pulumi:"type"`
}

// SuppressionResponseInput is an input type that accepts SuppressionResponseArgs and SuppressionResponseOutput values.
// You can construct a concrete instance of `SuppressionResponseInput` via:
//
//          SuppressionResponseArgs{...}
type SuppressionResponseInput interface {
	pulumi.Input

	ToSuppressionResponseOutput() SuppressionResponseOutput
	ToSuppressionResponseOutputWithContext(context.Context) SuppressionResponseOutput
}

// Action rule with suppression configuration
type SuppressionResponseArgs struct {
	// conditions on which alerts will be filtered
	Conditions ConditionsResponsePtrInput `pulumi:"conditions"`
	// Creation time of action rule. Date-Time in ISO-8601 format.
	CreatedAt pulumi.StringInput `pulumi:"createdAt"`
	// Created by user name.
	CreatedBy pulumi.StringInput `pulumi:"createdBy"`
	// Description of action rule
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Last updated time of action rule. Date-Time in ISO-8601 format.
	LastModifiedAt pulumi.StringInput `pulumi:"lastModifiedAt"`
	// Last modified by user name.
	LastModifiedBy pulumi.StringInput `pulumi:"lastModifiedBy"`
	// scope on which action rule will apply
	Scope ScopeResponsePtrInput `pulumi:"scope"`
	// Indicates if the given action rule is enabled or disabled
	Status pulumi.StringPtrInput `pulumi:"status"`
	// suppression configuration for the action rule
	SuppressionConfig SuppressionConfigResponseInput `pulumi:"suppressionConfig"`
	// Indicates type of action rule
	// Expected value is 'Suppression'.
	Type pulumi.StringInput `pulumi:"type"`
}

func (SuppressionResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SuppressionResponse)(nil)).Elem()
}

func (i SuppressionResponseArgs) ToSuppressionResponseOutput() SuppressionResponseOutput {
	return i.ToSuppressionResponseOutputWithContext(context.Background())
}

func (i SuppressionResponseArgs) ToSuppressionResponseOutputWithContext(ctx context.Context) SuppressionResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SuppressionResponseOutput)
}

// Action rule with suppression configuration
type SuppressionResponseOutput struct{ *pulumi.OutputState }

func (SuppressionResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SuppressionResponse)(nil)).Elem()
}

func (o SuppressionResponseOutput) ToSuppressionResponseOutput() SuppressionResponseOutput {
	return o
}

func (o SuppressionResponseOutput) ToSuppressionResponseOutputWithContext(ctx context.Context) SuppressionResponseOutput {
	return o
}

// conditions on which alerts will be filtered
func (o SuppressionResponseOutput) Conditions() ConditionsResponsePtrOutput {
	return o.ApplyT(func(v SuppressionResponse) *ConditionsResponse { return v.Conditions }).(ConditionsResponsePtrOutput)
}

// Creation time of action rule. Date-Time in ISO-8601 format.
func (o SuppressionResponseOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v SuppressionResponse) string { return v.CreatedAt }).(pulumi.StringOutput)
}

// Created by user name.
func (o SuppressionResponseOutput) CreatedBy() pulumi.StringOutput {
	return o.ApplyT(func(v SuppressionResponse) string { return v.CreatedBy }).(pulumi.StringOutput)
}

// Description of action rule
func (o SuppressionResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SuppressionResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Last updated time of action rule. Date-Time in ISO-8601 format.
func (o SuppressionResponseOutput) LastModifiedAt() pulumi.StringOutput {
	return o.ApplyT(func(v SuppressionResponse) string { return v.LastModifiedAt }).(pulumi.StringOutput)
}

// Last modified by user name.
func (o SuppressionResponseOutput) LastModifiedBy() pulumi.StringOutput {
	return o.ApplyT(func(v SuppressionResponse) string { return v.LastModifiedBy }).(pulumi.StringOutput)
}

// scope on which action rule will apply
func (o SuppressionResponseOutput) Scope() ScopeResponsePtrOutput {
	return o.ApplyT(func(v SuppressionResponse) *ScopeResponse { return v.Scope }).(ScopeResponsePtrOutput)
}

// Indicates if the given action rule is enabled or disabled
func (o SuppressionResponseOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SuppressionResponse) *string { return v.Status }).(pulumi.StringPtrOutput)
}

// suppression configuration for the action rule
func (o SuppressionResponseOutput) SuppressionConfig() SuppressionConfigResponseOutput {
	return o.ApplyT(func(v SuppressionResponse) SuppressionConfigResponse { return v.SuppressionConfig }).(SuppressionConfigResponseOutput)
}

// Indicates type of action rule
// Expected value is 'Suppression'.
func (o SuppressionResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v SuppressionResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Schedule for a given suppression configuration.
type SuppressionSchedule struct {
	// End date for suppression
	EndDate *string `pulumi:"endDate"`
	// End date for suppression
	EndTime *string `pulumi:"endTime"`
	// Specifies the values for recurrence pattern
	RecurrenceValues []int `pulumi:"recurrenceValues"`
	// Start date for suppression
	StartDate *string `pulumi:"startDate"`
	// Start time for suppression
	StartTime *string `pulumi:"startTime"`
}

// SuppressionScheduleInput is an input type that accepts SuppressionScheduleArgs and SuppressionScheduleOutput values.
// You can construct a concrete instance of `SuppressionScheduleInput` via:
//
//          SuppressionScheduleArgs{...}
type SuppressionScheduleInput interface {
	pulumi.Input

	ToSuppressionScheduleOutput() SuppressionScheduleOutput
	ToSuppressionScheduleOutputWithContext(context.Context) SuppressionScheduleOutput
}

// Schedule for a given suppression configuration.
type SuppressionScheduleArgs struct {
	// End date for suppression
	EndDate pulumi.StringPtrInput `pulumi:"endDate"`
	// End date for suppression
	EndTime pulumi.StringPtrInput `pulumi:"endTime"`
	// Specifies the values for recurrence pattern
	RecurrenceValues pulumi.IntArrayInput `pulumi:"recurrenceValues"`
	// Start date for suppression
	StartDate pulumi.StringPtrInput `pulumi:"startDate"`
	// Start time for suppression
	StartTime pulumi.StringPtrInput `pulumi:"startTime"`
}

func (SuppressionScheduleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SuppressionSchedule)(nil)).Elem()
}

func (i SuppressionScheduleArgs) ToSuppressionScheduleOutput() SuppressionScheduleOutput {
	return i.ToSuppressionScheduleOutputWithContext(context.Background())
}

func (i SuppressionScheduleArgs) ToSuppressionScheduleOutputWithContext(ctx context.Context) SuppressionScheduleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SuppressionScheduleOutput)
}

func (i SuppressionScheduleArgs) ToSuppressionSchedulePtrOutput() SuppressionSchedulePtrOutput {
	return i.ToSuppressionSchedulePtrOutputWithContext(context.Background())
}

func (i SuppressionScheduleArgs) ToSuppressionSchedulePtrOutputWithContext(ctx context.Context) SuppressionSchedulePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SuppressionScheduleOutput).ToSuppressionSchedulePtrOutputWithContext(ctx)
}

// SuppressionSchedulePtrInput is an input type that accepts SuppressionScheduleArgs, SuppressionSchedulePtr and SuppressionSchedulePtrOutput values.
// You can construct a concrete instance of `SuppressionSchedulePtrInput` via:
//
//          SuppressionScheduleArgs{...}
//
//  or:
//
//          nil
type SuppressionSchedulePtrInput interface {
	pulumi.Input

	ToSuppressionSchedulePtrOutput() SuppressionSchedulePtrOutput
	ToSuppressionSchedulePtrOutputWithContext(context.Context) SuppressionSchedulePtrOutput
}

type suppressionSchedulePtrType SuppressionScheduleArgs

func SuppressionSchedulePtr(v *SuppressionScheduleArgs) SuppressionSchedulePtrInput {
	return (*suppressionSchedulePtrType)(v)
}

func (*suppressionSchedulePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SuppressionSchedule)(nil)).Elem()
}

func (i *suppressionSchedulePtrType) ToSuppressionSchedulePtrOutput() SuppressionSchedulePtrOutput {
	return i.ToSuppressionSchedulePtrOutputWithContext(context.Background())
}

func (i *suppressionSchedulePtrType) ToSuppressionSchedulePtrOutputWithContext(ctx context.Context) SuppressionSchedulePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SuppressionSchedulePtrOutput)
}

// Schedule for a given suppression configuration.
type SuppressionScheduleOutput struct{ *pulumi.OutputState }

func (SuppressionScheduleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SuppressionSchedule)(nil)).Elem()
}

func (o SuppressionScheduleOutput) ToSuppressionScheduleOutput() SuppressionScheduleOutput {
	return o
}

func (o SuppressionScheduleOutput) ToSuppressionScheduleOutputWithContext(ctx context.Context) SuppressionScheduleOutput {
	return o
}

func (o SuppressionScheduleOutput) ToSuppressionSchedulePtrOutput() SuppressionSchedulePtrOutput {
	return o.ToSuppressionSchedulePtrOutputWithContext(context.Background())
}

func (o SuppressionScheduleOutput) ToSuppressionSchedulePtrOutputWithContext(ctx context.Context) SuppressionSchedulePtrOutput {
	return o.ApplyT(func(v SuppressionSchedule) *SuppressionSchedule {
		return &v
	}).(SuppressionSchedulePtrOutput)
}

// End date for suppression
func (o SuppressionScheduleOutput) EndDate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SuppressionSchedule) *string { return v.EndDate }).(pulumi.StringPtrOutput)
}

// End date for suppression
func (o SuppressionScheduleOutput) EndTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SuppressionSchedule) *string { return v.EndTime }).(pulumi.StringPtrOutput)
}

// Specifies the values for recurrence pattern
func (o SuppressionScheduleOutput) RecurrenceValues() pulumi.IntArrayOutput {
	return o.ApplyT(func(v SuppressionSchedule) []int { return v.RecurrenceValues }).(pulumi.IntArrayOutput)
}

// Start date for suppression
func (o SuppressionScheduleOutput) StartDate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SuppressionSchedule) *string { return v.StartDate }).(pulumi.StringPtrOutput)
}

// Start time for suppression
func (o SuppressionScheduleOutput) StartTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SuppressionSchedule) *string { return v.StartTime }).(pulumi.StringPtrOutput)
}

type SuppressionSchedulePtrOutput struct{ *pulumi.OutputState }

func (SuppressionSchedulePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SuppressionSchedule)(nil)).Elem()
}

func (o SuppressionSchedulePtrOutput) ToSuppressionSchedulePtrOutput() SuppressionSchedulePtrOutput {
	return o
}

func (o SuppressionSchedulePtrOutput) ToSuppressionSchedulePtrOutputWithContext(ctx context.Context) SuppressionSchedulePtrOutput {
	return o
}

func (o SuppressionSchedulePtrOutput) Elem() SuppressionScheduleOutput {
	return o.ApplyT(func(v *SuppressionSchedule) SuppressionSchedule { return *v }).(SuppressionScheduleOutput)
}

// End date for suppression
func (o SuppressionSchedulePtrOutput) EndDate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SuppressionSchedule) *string {
		if v == nil {
			return nil
		}
		return v.EndDate
	}).(pulumi.StringPtrOutput)
}

// End date for suppression
func (o SuppressionSchedulePtrOutput) EndTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SuppressionSchedule) *string {
		if v == nil {
			return nil
		}
		return v.EndTime
	}).(pulumi.StringPtrOutput)
}

// Specifies the values for recurrence pattern
func (o SuppressionSchedulePtrOutput) RecurrenceValues() pulumi.IntArrayOutput {
	return o.ApplyT(func(v *SuppressionSchedule) []int {
		if v == nil {
			return nil
		}
		return v.RecurrenceValues
	}).(pulumi.IntArrayOutput)
}

// Start date for suppression
func (o SuppressionSchedulePtrOutput) StartDate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SuppressionSchedule) *string {
		if v == nil {
			return nil
		}
		return v.StartDate
	}).(pulumi.StringPtrOutput)
}

// Start time for suppression
func (o SuppressionSchedulePtrOutput) StartTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SuppressionSchedule) *string {
		if v == nil {
			return nil
		}
		return v.StartTime
	}).(pulumi.StringPtrOutput)
}

// Schedule for a given suppression configuration.
type SuppressionScheduleResponse struct {
	// End date for suppression
	EndDate *string `pulumi:"endDate"`
	// End date for suppression
	EndTime *string `pulumi:"endTime"`
	// Specifies the values for recurrence pattern
	RecurrenceValues []int `pulumi:"recurrenceValues"`
	// Start date for suppression
	StartDate *string `pulumi:"startDate"`
	// Start time for suppression
	StartTime *string `pulumi:"startTime"`
}

// SuppressionScheduleResponseInput is an input type that accepts SuppressionScheduleResponseArgs and SuppressionScheduleResponseOutput values.
// You can construct a concrete instance of `SuppressionScheduleResponseInput` via:
//
//          SuppressionScheduleResponseArgs{...}
type SuppressionScheduleResponseInput interface {
	pulumi.Input

	ToSuppressionScheduleResponseOutput() SuppressionScheduleResponseOutput
	ToSuppressionScheduleResponseOutputWithContext(context.Context) SuppressionScheduleResponseOutput
}

// Schedule for a given suppression configuration.
type SuppressionScheduleResponseArgs struct {
	// End date for suppression
	EndDate pulumi.StringPtrInput `pulumi:"endDate"`
	// End date for suppression
	EndTime pulumi.StringPtrInput `pulumi:"endTime"`
	// Specifies the values for recurrence pattern
	RecurrenceValues pulumi.IntArrayInput `pulumi:"recurrenceValues"`
	// Start date for suppression
	StartDate pulumi.StringPtrInput `pulumi:"startDate"`
	// Start time for suppression
	StartTime pulumi.StringPtrInput `pulumi:"startTime"`
}

func (SuppressionScheduleResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SuppressionScheduleResponse)(nil)).Elem()
}

func (i SuppressionScheduleResponseArgs) ToSuppressionScheduleResponseOutput() SuppressionScheduleResponseOutput {
	return i.ToSuppressionScheduleResponseOutputWithContext(context.Background())
}

func (i SuppressionScheduleResponseArgs) ToSuppressionScheduleResponseOutputWithContext(ctx context.Context) SuppressionScheduleResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SuppressionScheduleResponseOutput)
}

func (i SuppressionScheduleResponseArgs) ToSuppressionScheduleResponsePtrOutput() SuppressionScheduleResponsePtrOutput {
	return i.ToSuppressionScheduleResponsePtrOutputWithContext(context.Background())
}

func (i SuppressionScheduleResponseArgs) ToSuppressionScheduleResponsePtrOutputWithContext(ctx context.Context) SuppressionScheduleResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SuppressionScheduleResponseOutput).ToSuppressionScheduleResponsePtrOutputWithContext(ctx)
}

// SuppressionScheduleResponsePtrInput is an input type that accepts SuppressionScheduleResponseArgs, SuppressionScheduleResponsePtr and SuppressionScheduleResponsePtrOutput values.
// You can construct a concrete instance of `SuppressionScheduleResponsePtrInput` via:
//
//          SuppressionScheduleResponseArgs{...}
//
//  or:
//
//          nil
type SuppressionScheduleResponsePtrInput interface {
	pulumi.Input

	ToSuppressionScheduleResponsePtrOutput() SuppressionScheduleResponsePtrOutput
	ToSuppressionScheduleResponsePtrOutputWithContext(context.Context) SuppressionScheduleResponsePtrOutput
}

type suppressionScheduleResponsePtrType SuppressionScheduleResponseArgs

func SuppressionScheduleResponsePtr(v *SuppressionScheduleResponseArgs) SuppressionScheduleResponsePtrInput {
	return (*suppressionScheduleResponsePtrType)(v)
}

func (*suppressionScheduleResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SuppressionScheduleResponse)(nil)).Elem()
}

func (i *suppressionScheduleResponsePtrType) ToSuppressionScheduleResponsePtrOutput() SuppressionScheduleResponsePtrOutput {
	return i.ToSuppressionScheduleResponsePtrOutputWithContext(context.Background())
}

func (i *suppressionScheduleResponsePtrType) ToSuppressionScheduleResponsePtrOutputWithContext(ctx context.Context) SuppressionScheduleResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SuppressionScheduleResponsePtrOutput)
}

// Schedule for a given suppression configuration.
type SuppressionScheduleResponseOutput struct{ *pulumi.OutputState }

func (SuppressionScheduleResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SuppressionScheduleResponse)(nil)).Elem()
}

func (o SuppressionScheduleResponseOutput) ToSuppressionScheduleResponseOutput() SuppressionScheduleResponseOutput {
	return o
}

func (o SuppressionScheduleResponseOutput) ToSuppressionScheduleResponseOutputWithContext(ctx context.Context) SuppressionScheduleResponseOutput {
	return o
}

func (o SuppressionScheduleResponseOutput) ToSuppressionScheduleResponsePtrOutput() SuppressionScheduleResponsePtrOutput {
	return o.ToSuppressionScheduleResponsePtrOutputWithContext(context.Background())
}

func (o SuppressionScheduleResponseOutput) ToSuppressionScheduleResponsePtrOutputWithContext(ctx context.Context) SuppressionScheduleResponsePtrOutput {
	return o.ApplyT(func(v SuppressionScheduleResponse) *SuppressionScheduleResponse {
		return &v
	}).(SuppressionScheduleResponsePtrOutput)
}

// End date for suppression
func (o SuppressionScheduleResponseOutput) EndDate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SuppressionScheduleResponse) *string { return v.EndDate }).(pulumi.StringPtrOutput)
}

// End date for suppression
func (o SuppressionScheduleResponseOutput) EndTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SuppressionScheduleResponse) *string { return v.EndTime }).(pulumi.StringPtrOutput)
}

// Specifies the values for recurrence pattern
func (o SuppressionScheduleResponseOutput) RecurrenceValues() pulumi.IntArrayOutput {
	return o.ApplyT(func(v SuppressionScheduleResponse) []int { return v.RecurrenceValues }).(pulumi.IntArrayOutput)
}

// Start date for suppression
func (o SuppressionScheduleResponseOutput) StartDate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SuppressionScheduleResponse) *string { return v.StartDate }).(pulumi.StringPtrOutput)
}

// Start time for suppression
func (o SuppressionScheduleResponseOutput) StartTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SuppressionScheduleResponse) *string { return v.StartTime }).(pulumi.StringPtrOutput)
}

type SuppressionScheduleResponsePtrOutput struct{ *pulumi.OutputState }

func (SuppressionScheduleResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SuppressionScheduleResponse)(nil)).Elem()
}

func (o SuppressionScheduleResponsePtrOutput) ToSuppressionScheduleResponsePtrOutput() SuppressionScheduleResponsePtrOutput {
	return o
}

func (o SuppressionScheduleResponsePtrOutput) ToSuppressionScheduleResponsePtrOutputWithContext(ctx context.Context) SuppressionScheduleResponsePtrOutput {
	return o
}

func (o SuppressionScheduleResponsePtrOutput) Elem() SuppressionScheduleResponseOutput {
	return o.ApplyT(func(v *SuppressionScheduleResponse) SuppressionScheduleResponse { return *v }).(SuppressionScheduleResponseOutput)
}

// End date for suppression
func (o SuppressionScheduleResponsePtrOutput) EndDate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SuppressionScheduleResponse) *string {
		if v == nil {
			return nil
		}
		return v.EndDate
	}).(pulumi.StringPtrOutput)
}

// End date for suppression
func (o SuppressionScheduleResponsePtrOutput) EndTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SuppressionScheduleResponse) *string {
		if v == nil {
			return nil
		}
		return v.EndTime
	}).(pulumi.StringPtrOutput)
}

// Specifies the values for recurrence pattern
func (o SuppressionScheduleResponsePtrOutput) RecurrenceValues() pulumi.IntArrayOutput {
	return o.ApplyT(func(v *SuppressionScheduleResponse) []int {
		if v == nil {
			return nil
		}
		return v.RecurrenceValues
	}).(pulumi.IntArrayOutput)
}

// Start date for suppression
func (o SuppressionScheduleResponsePtrOutput) StartDate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SuppressionScheduleResponse) *string {
		if v == nil {
			return nil
		}
		return v.StartDate
	}).(pulumi.StringPtrOutput)
}

// Start time for suppression
func (o SuppressionScheduleResponsePtrOutput) StartTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SuppressionScheduleResponse) *string {
		if v == nil {
			return nil
		}
		return v.StartTime
	}).(pulumi.StringPtrOutput)
}

// Optional throttling information for the alert rule.
type ThrottlingInformation struct {
	// The required duration (in ISO8601 format) to wait before notifying on the alert rule again. The time granularity must be in minutes and minimum value is 0 minutes
	Duration *string `pulumi:"duration"`
}

// ThrottlingInformationInput is an input type that accepts ThrottlingInformationArgs and ThrottlingInformationOutput values.
// You can construct a concrete instance of `ThrottlingInformationInput` via:
//
//          ThrottlingInformationArgs{...}
type ThrottlingInformationInput interface {
	pulumi.Input

	ToThrottlingInformationOutput() ThrottlingInformationOutput
	ToThrottlingInformationOutputWithContext(context.Context) ThrottlingInformationOutput
}

// Optional throttling information for the alert rule.
type ThrottlingInformationArgs struct {
	// The required duration (in ISO8601 format) to wait before notifying on the alert rule again. The time granularity must be in minutes and minimum value is 0 minutes
	Duration pulumi.StringPtrInput `pulumi:"duration"`
}

func (ThrottlingInformationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ThrottlingInformation)(nil)).Elem()
}

func (i ThrottlingInformationArgs) ToThrottlingInformationOutput() ThrottlingInformationOutput {
	return i.ToThrottlingInformationOutputWithContext(context.Background())
}

func (i ThrottlingInformationArgs) ToThrottlingInformationOutputWithContext(ctx context.Context) ThrottlingInformationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThrottlingInformationOutput)
}

func (i ThrottlingInformationArgs) ToThrottlingInformationPtrOutput() ThrottlingInformationPtrOutput {
	return i.ToThrottlingInformationPtrOutputWithContext(context.Background())
}

func (i ThrottlingInformationArgs) ToThrottlingInformationPtrOutputWithContext(ctx context.Context) ThrottlingInformationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThrottlingInformationOutput).ToThrottlingInformationPtrOutputWithContext(ctx)
}

// ThrottlingInformationPtrInput is an input type that accepts ThrottlingInformationArgs, ThrottlingInformationPtr and ThrottlingInformationPtrOutput values.
// You can construct a concrete instance of `ThrottlingInformationPtrInput` via:
//
//          ThrottlingInformationArgs{...}
//
//  or:
//
//          nil
type ThrottlingInformationPtrInput interface {
	pulumi.Input

	ToThrottlingInformationPtrOutput() ThrottlingInformationPtrOutput
	ToThrottlingInformationPtrOutputWithContext(context.Context) ThrottlingInformationPtrOutput
}

type throttlingInformationPtrType ThrottlingInformationArgs

func ThrottlingInformationPtr(v *ThrottlingInformationArgs) ThrottlingInformationPtrInput {
	return (*throttlingInformationPtrType)(v)
}

func (*throttlingInformationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ThrottlingInformation)(nil)).Elem()
}

func (i *throttlingInformationPtrType) ToThrottlingInformationPtrOutput() ThrottlingInformationPtrOutput {
	return i.ToThrottlingInformationPtrOutputWithContext(context.Background())
}

func (i *throttlingInformationPtrType) ToThrottlingInformationPtrOutputWithContext(ctx context.Context) ThrottlingInformationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThrottlingInformationPtrOutput)
}

// Optional throttling information for the alert rule.
type ThrottlingInformationOutput struct{ *pulumi.OutputState }

func (ThrottlingInformationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ThrottlingInformation)(nil)).Elem()
}

func (o ThrottlingInformationOutput) ToThrottlingInformationOutput() ThrottlingInformationOutput {
	return o
}

func (o ThrottlingInformationOutput) ToThrottlingInformationOutputWithContext(ctx context.Context) ThrottlingInformationOutput {
	return o
}

func (o ThrottlingInformationOutput) ToThrottlingInformationPtrOutput() ThrottlingInformationPtrOutput {
	return o.ToThrottlingInformationPtrOutputWithContext(context.Background())
}

func (o ThrottlingInformationOutput) ToThrottlingInformationPtrOutputWithContext(ctx context.Context) ThrottlingInformationPtrOutput {
	return o.ApplyT(func(v ThrottlingInformation) *ThrottlingInformation {
		return &v
	}).(ThrottlingInformationPtrOutput)
}

// The required duration (in ISO8601 format) to wait before notifying on the alert rule again. The time granularity must be in minutes and minimum value is 0 minutes
func (o ThrottlingInformationOutput) Duration() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThrottlingInformation) *string { return v.Duration }).(pulumi.StringPtrOutput)
}

type ThrottlingInformationPtrOutput struct{ *pulumi.OutputState }

func (ThrottlingInformationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ThrottlingInformation)(nil)).Elem()
}

func (o ThrottlingInformationPtrOutput) ToThrottlingInformationPtrOutput() ThrottlingInformationPtrOutput {
	return o
}

func (o ThrottlingInformationPtrOutput) ToThrottlingInformationPtrOutputWithContext(ctx context.Context) ThrottlingInformationPtrOutput {
	return o
}

func (o ThrottlingInformationPtrOutput) Elem() ThrottlingInformationOutput {
	return o.ApplyT(func(v *ThrottlingInformation) ThrottlingInformation { return *v }).(ThrottlingInformationOutput)
}

// The required duration (in ISO8601 format) to wait before notifying on the alert rule again. The time granularity must be in minutes and minimum value is 0 minutes
func (o ThrottlingInformationPtrOutput) Duration() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ThrottlingInformation) *string {
		if v == nil {
			return nil
		}
		return v.Duration
	}).(pulumi.StringPtrOutput)
}

// Optional throttling information for the alert rule.
type ThrottlingInformationResponse struct {
	// The required duration (in ISO8601 format) to wait before notifying on the alert rule again. The time granularity must be in minutes and minimum value is 0 minutes
	Duration *string `pulumi:"duration"`
}

// ThrottlingInformationResponseInput is an input type that accepts ThrottlingInformationResponseArgs and ThrottlingInformationResponseOutput values.
// You can construct a concrete instance of `ThrottlingInformationResponseInput` via:
//
//          ThrottlingInformationResponseArgs{...}
type ThrottlingInformationResponseInput interface {
	pulumi.Input

	ToThrottlingInformationResponseOutput() ThrottlingInformationResponseOutput
	ToThrottlingInformationResponseOutputWithContext(context.Context) ThrottlingInformationResponseOutput
}

// Optional throttling information for the alert rule.
type ThrottlingInformationResponseArgs struct {
	// The required duration (in ISO8601 format) to wait before notifying on the alert rule again. The time granularity must be in minutes and minimum value is 0 minutes
	Duration pulumi.StringPtrInput `pulumi:"duration"`
}

func (ThrottlingInformationResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ThrottlingInformationResponse)(nil)).Elem()
}

func (i ThrottlingInformationResponseArgs) ToThrottlingInformationResponseOutput() ThrottlingInformationResponseOutput {
	return i.ToThrottlingInformationResponseOutputWithContext(context.Background())
}

func (i ThrottlingInformationResponseArgs) ToThrottlingInformationResponseOutputWithContext(ctx context.Context) ThrottlingInformationResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThrottlingInformationResponseOutput)
}

func (i ThrottlingInformationResponseArgs) ToThrottlingInformationResponsePtrOutput() ThrottlingInformationResponsePtrOutput {
	return i.ToThrottlingInformationResponsePtrOutputWithContext(context.Background())
}

func (i ThrottlingInformationResponseArgs) ToThrottlingInformationResponsePtrOutputWithContext(ctx context.Context) ThrottlingInformationResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThrottlingInformationResponseOutput).ToThrottlingInformationResponsePtrOutputWithContext(ctx)
}

// ThrottlingInformationResponsePtrInput is an input type that accepts ThrottlingInformationResponseArgs, ThrottlingInformationResponsePtr and ThrottlingInformationResponsePtrOutput values.
// You can construct a concrete instance of `ThrottlingInformationResponsePtrInput` via:
//
//          ThrottlingInformationResponseArgs{...}
//
//  or:
//
//          nil
type ThrottlingInformationResponsePtrInput interface {
	pulumi.Input

	ToThrottlingInformationResponsePtrOutput() ThrottlingInformationResponsePtrOutput
	ToThrottlingInformationResponsePtrOutputWithContext(context.Context) ThrottlingInformationResponsePtrOutput
}

type throttlingInformationResponsePtrType ThrottlingInformationResponseArgs

func ThrottlingInformationResponsePtr(v *ThrottlingInformationResponseArgs) ThrottlingInformationResponsePtrInput {
	return (*throttlingInformationResponsePtrType)(v)
}

func (*throttlingInformationResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ThrottlingInformationResponse)(nil)).Elem()
}

func (i *throttlingInformationResponsePtrType) ToThrottlingInformationResponsePtrOutput() ThrottlingInformationResponsePtrOutput {
	return i.ToThrottlingInformationResponsePtrOutputWithContext(context.Background())
}

func (i *throttlingInformationResponsePtrType) ToThrottlingInformationResponsePtrOutputWithContext(ctx context.Context) ThrottlingInformationResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThrottlingInformationResponsePtrOutput)
}

// Optional throttling information for the alert rule.
type ThrottlingInformationResponseOutput struct{ *pulumi.OutputState }

func (ThrottlingInformationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ThrottlingInformationResponse)(nil)).Elem()
}

func (o ThrottlingInformationResponseOutput) ToThrottlingInformationResponseOutput() ThrottlingInformationResponseOutput {
	return o
}

func (o ThrottlingInformationResponseOutput) ToThrottlingInformationResponseOutputWithContext(ctx context.Context) ThrottlingInformationResponseOutput {
	return o
}

func (o ThrottlingInformationResponseOutput) ToThrottlingInformationResponsePtrOutput() ThrottlingInformationResponsePtrOutput {
	return o.ToThrottlingInformationResponsePtrOutputWithContext(context.Background())
}

func (o ThrottlingInformationResponseOutput) ToThrottlingInformationResponsePtrOutputWithContext(ctx context.Context) ThrottlingInformationResponsePtrOutput {
	return o.ApplyT(func(v ThrottlingInformationResponse) *ThrottlingInformationResponse {
		return &v
	}).(ThrottlingInformationResponsePtrOutput)
}

// The required duration (in ISO8601 format) to wait before notifying on the alert rule again. The time granularity must be in minutes and minimum value is 0 minutes
func (o ThrottlingInformationResponseOutput) Duration() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThrottlingInformationResponse) *string { return v.Duration }).(pulumi.StringPtrOutput)
}

type ThrottlingInformationResponsePtrOutput struct{ *pulumi.OutputState }

func (ThrottlingInformationResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ThrottlingInformationResponse)(nil)).Elem()
}

func (o ThrottlingInformationResponsePtrOutput) ToThrottlingInformationResponsePtrOutput() ThrottlingInformationResponsePtrOutput {
	return o
}

func (o ThrottlingInformationResponsePtrOutput) ToThrottlingInformationResponsePtrOutputWithContext(ctx context.Context) ThrottlingInformationResponsePtrOutput {
	return o
}

func (o ThrottlingInformationResponsePtrOutput) Elem() ThrottlingInformationResponseOutput {
	return o.ApplyT(func(v *ThrottlingInformationResponse) ThrottlingInformationResponse { return *v }).(ThrottlingInformationResponseOutput)
}

// The required duration (in ISO8601 format) to wait before notifying on the alert rule again. The time granularity must be in minutes and minimum value is 0 minutes
func (o ThrottlingInformationResponsePtrOutput) Duration() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ThrottlingInformationResponse) *string {
		if v == nil {
			return nil
		}
		return v.Duration
	}).(pulumi.StringPtrOutput)
}

// Specifies the health alert criteria to alert on.
type VmGuestHealthAlertCriterion struct {
	// Health states to alert on
	HealthStates []HealthState `pulumi:"healthStates"`
	// Names of health monitor on which to define alert
	MonitorNames []string `pulumi:"monitorNames"`
	// Names of health monitor type on which to define alert
	MonitorTypes []string `pulumi:"monitorTypes"`
	// specifies the type of the alert criterion.
	// Expected value is 'GuestVmHealth'.
	Namespace string `pulumi:"namespace"`
}

// VmGuestHealthAlertCriterionInput is an input type that accepts VmGuestHealthAlertCriterionArgs and VmGuestHealthAlertCriterionOutput values.
// You can construct a concrete instance of `VmGuestHealthAlertCriterionInput` via:
//
//          VmGuestHealthAlertCriterionArgs{...}
type VmGuestHealthAlertCriterionInput interface {
	pulumi.Input

	ToVmGuestHealthAlertCriterionOutput() VmGuestHealthAlertCriterionOutput
	ToVmGuestHealthAlertCriterionOutputWithContext(context.Context) VmGuestHealthAlertCriterionOutput
}

// Specifies the health alert criteria to alert on.
type VmGuestHealthAlertCriterionArgs struct {
	// Health states to alert on
	HealthStates HealthStateArrayInput `pulumi:"healthStates"`
	// Names of health monitor on which to define alert
	MonitorNames pulumi.StringArrayInput `pulumi:"monitorNames"`
	// Names of health monitor type on which to define alert
	MonitorTypes pulumi.StringArrayInput `pulumi:"monitorTypes"`
	// specifies the type of the alert criterion.
	// Expected value is 'GuestVmHealth'.
	Namespace pulumi.StringInput `pulumi:"namespace"`
}

func (VmGuestHealthAlertCriterionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VmGuestHealthAlertCriterion)(nil)).Elem()
}

func (i VmGuestHealthAlertCriterionArgs) ToVmGuestHealthAlertCriterionOutput() VmGuestHealthAlertCriterionOutput {
	return i.ToVmGuestHealthAlertCriterionOutputWithContext(context.Background())
}

func (i VmGuestHealthAlertCriterionArgs) ToVmGuestHealthAlertCriterionOutputWithContext(ctx context.Context) VmGuestHealthAlertCriterionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VmGuestHealthAlertCriterionOutput)
}

// VmGuestHealthAlertCriterionArrayInput is an input type that accepts VmGuestHealthAlertCriterionArray and VmGuestHealthAlertCriterionArrayOutput values.
// You can construct a concrete instance of `VmGuestHealthAlertCriterionArrayInput` via:
//
//          VmGuestHealthAlertCriterionArray{ VmGuestHealthAlertCriterionArgs{...} }
type VmGuestHealthAlertCriterionArrayInput interface {
	pulumi.Input

	ToVmGuestHealthAlertCriterionArrayOutput() VmGuestHealthAlertCriterionArrayOutput
	ToVmGuestHealthAlertCriterionArrayOutputWithContext(context.Context) VmGuestHealthAlertCriterionArrayOutput
}

type VmGuestHealthAlertCriterionArray []VmGuestHealthAlertCriterionInput

func (VmGuestHealthAlertCriterionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]VmGuestHealthAlertCriterion)(nil)).Elem()
}

func (i VmGuestHealthAlertCriterionArray) ToVmGuestHealthAlertCriterionArrayOutput() VmGuestHealthAlertCriterionArrayOutput {
	return i.ToVmGuestHealthAlertCriterionArrayOutputWithContext(context.Background())
}

func (i VmGuestHealthAlertCriterionArray) ToVmGuestHealthAlertCriterionArrayOutputWithContext(ctx context.Context) VmGuestHealthAlertCriterionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VmGuestHealthAlertCriterionArrayOutput)
}

// Specifies the health alert criteria to alert on.
type VmGuestHealthAlertCriterionOutput struct{ *pulumi.OutputState }

func (VmGuestHealthAlertCriterionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VmGuestHealthAlertCriterion)(nil)).Elem()
}

func (o VmGuestHealthAlertCriterionOutput) ToVmGuestHealthAlertCriterionOutput() VmGuestHealthAlertCriterionOutput {
	return o
}

func (o VmGuestHealthAlertCriterionOutput) ToVmGuestHealthAlertCriterionOutputWithContext(ctx context.Context) VmGuestHealthAlertCriterionOutput {
	return o
}

// Health states to alert on
func (o VmGuestHealthAlertCriterionOutput) HealthStates() HealthStateArrayOutput {
	return o.ApplyT(func(v VmGuestHealthAlertCriterion) []HealthState { return v.HealthStates }).(HealthStateArrayOutput)
}

// Names of health monitor on which to define alert
func (o VmGuestHealthAlertCriterionOutput) MonitorNames() pulumi.StringArrayOutput {
	return o.ApplyT(func(v VmGuestHealthAlertCriterion) []string { return v.MonitorNames }).(pulumi.StringArrayOutput)
}

// Names of health monitor type on which to define alert
func (o VmGuestHealthAlertCriterionOutput) MonitorTypes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v VmGuestHealthAlertCriterion) []string { return v.MonitorTypes }).(pulumi.StringArrayOutput)
}

// specifies the type of the alert criterion.
// Expected value is 'GuestVmHealth'.
func (o VmGuestHealthAlertCriterionOutput) Namespace() pulumi.StringOutput {
	return o.ApplyT(func(v VmGuestHealthAlertCriterion) string { return v.Namespace }).(pulumi.StringOutput)
}

type VmGuestHealthAlertCriterionArrayOutput struct{ *pulumi.OutputState }

func (VmGuestHealthAlertCriterionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]VmGuestHealthAlertCriterion)(nil)).Elem()
}

func (o VmGuestHealthAlertCriterionArrayOutput) ToVmGuestHealthAlertCriterionArrayOutput() VmGuestHealthAlertCriterionArrayOutput {
	return o
}

func (o VmGuestHealthAlertCriterionArrayOutput) ToVmGuestHealthAlertCriterionArrayOutputWithContext(ctx context.Context) VmGuestHealthAlertCriterionArrayOutput {
	return o
}

func (o VmGuestHealthAlertCriterionArrayOutput) Index(i pulumi.IntInput) VmGuestHealthAlertCriterionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) VmGuestHealthAlertCriterion {
		return vs[0].([]VmGuestHealthAlertCriterion)[vs[1].(int)]
	}).(VmGuestHealthAlertCriterionOutput)
}

// Specifies the health alert criteria to alert on.
type VmGuestHealthAlertCriterionResponse struct {
	// Health states to alert on
	HealthStates []HealthStateResponse `pulumi:"healthStates"`
	// Names of health monitor on which to define alert
	MonitorNames []string `pulumi:"monitorNames"`
	// Names of health monitor type on which to define alert
	MonitorTypes []string `pulumi:"monitorTypes"`
	// specifies the type of the alert criterion.
	// Expected value is 'GuestVmHealth'.
	Namespace string `pulumi:"namespace"`
}

// VmGuestHealthAlertCriterionResponseInput is an input type that accepts VmGuestHealthAlertCriterionResponseArgs and VmGuestHealthAlertCriterionResponseOutput values.
// You can construct a concrete instance of `VmGuestHealthAlertCriterionResponseInput` via:
//
//          VmGuestHealthAlertCriterionResponseArgs{...}
type VmGuestHealthAlertCriterionResponseInput interface {
	pulumi.Input

	ToVmGuestHealthAlertCriterionResponseOutput() VmGuestHealthAlertCriterionResponseOutput
	ToVmGuestHealthAlertCriterionResponseOutputWithContext(context.Context) VmGuestHealthAlertCriterionResponseOutput
}

// Specifies the health alert criteria to alert on.
type VmGuestHealthAlertCriterionResponseArgs struct {
	// Health states to alert on
	HealthStates HealthStateResponseArrayInput `pulumi:"healthStates"`
	// Names of health monitor on which to define alert
	MonitorNames pulumi.StringArrayInput `pulumi:"monitorNames"`
	// Names of health monitor type on which to define alert
	MonitorTypes pulumi.StringArrayInput `pulumi:"monitorTypes"`
	// specifies the type of the alert criterion.
	// Expected value is 'GuestVmHealth'.
	Namespace pulumi.StringInput `pulumi:"namespace"`
}

func (VmGuestHealthAlertCriterionResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VmGuestHealthAlertCriterionResponse)(nil)).Elem()
}

func (i VmGuestHealthAlertCriterionResponseArgs) ToVmGuestHealthAlertCriterionResponseOutput() VmGuestHealthAlertCriterionResponseOutput {
	return i.ToVmGuestHealthAlertCriterionResponseOutputWithContext(context.Background())
}

func (i VmGuestHealthAlertCriterionResponseArgs) ToVmGuestHealthAlertCriterionResponseOutputWithContext(ctx context.Context) VmGuestHealthAlertCriterionResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VmGuestHealthAlertCriterionResponseOutput)
}

// VmGuestHealthAlertCriterionResponseArrayInput is an input type that accepts VmGuestHealthAlertCriterionResponseArray and VmGuestHealthAlertCriterionResponseArrayOutput values.
// You can construct a concrete instance of `VmGuestHealthAlertCriterionResponseArrayInput` via:
//
//          VmGuestHealthAlertCriterionResponseArray{ VmGuestHealthAlertCriterionResponseArgs{...} }
type VmGuestHealthAlertCriterionResponseArrayInput interface {
	pulumi.Input

	ToVmGuestHealthAlertCriterionResponseArrayOutput() VmGuestHealthAlertCriterionResponseArrayOutput
	ToVmGuestHealthAlertCriterionResponseArrayOutputWithContext(context.Context) VmGuestHealthAlertCriterionResponseArrayOutput
}

type VmGuestHealthAlertCriterionResponseArray []VmGuestHealthAlertCriterionResponseInput

func (VmGuestHealthAlertCriterionResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]VmGuestHealthAlertCriterionResponse)(nil)).Elem()
}

func (i VmGuestHealthAlertCriterionResponseArray) ToVmGuestHealthAlertCriterionResponseArrayOutput() VmGuestHealthAlertCriterionResponseArrayOutput {
	return i.ToVmGuestHealthAlertCriterionResponseArrayOutputWithContext(context.Background())
}

func (i VmGuestHealthAlertCriterionResponseArray) ToVmGuestHealthAlertCriterionResponseArrayOutputWithContext(ctx context.Context) VmGuestHealthAlertCriterionResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VmGuestHealthAlertCriterionResponseArrayOutput)
}

// Specifies the health alert criteria to alert on.
type VmGuestHealthAlertCriterionResponseOutput struct{ *pulumi.OutputState }

func (VmGuestHealthAlertCriterionResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VmGuestHealthAlertCriterionResponse)(nil)).Elem()
}

func (o VmGuestHealthAlertCriterionResponseOutput) ToVmGuestHealthAlertCriterionResponseOutput() VmGuestHealthAlertCriterionResponseOutput {
	return o
}

func (o VmGuestHealthAlertCriterionResponseOutput) ToVmGuestHealthAlertCriterionResponseOutputWithContext(ctx context.Context) VmGuestHealthAlertCriterionResponseOutput {
	return o
}

// Health states to alert on
func (o VmGuestHealthAlertCriterionResponseOutput) HealthStates() HealthStateResponseArrayOutput {
	return o.ApplyT(func(v VmGuestHealthAlertCriterionResponse) []HealthStateResponse { return v.HealthStates }).(HealthStateResponseArrayOutput)
}

// Names of health monitor on which to define alert
func (o VmGuestHealthAlertCriterionResponseOutput) MonitorNames() pulumi.StringArrayOutput {
	return o.ApplyT(func(v VmGuestHealthAlertCriterionResponse) []string { return v.MonitorNames }).(pulumi.StringArrayOutput)
}

// Names of health monitor type on which to define alert
func (o VmGuestHealthAlertCriterionResponseOutput) MonitorTypes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v VmGuestHealthAlertCriterionResponse) []string { return v.MonitorTypes }).(pulumi.StringArrayOutput)
}

// specifies the type of the alert criterion.
// Expected value is 'GuestVmHealth'.
func (o VmGuestHealthAlertCriterionResponseOutput) Namespace() pulumi.StringOutput {
	return o.ApplyT(func(v VmGuestHealthAlertCriterionResponse) string { return v.Namespace }).(pulumi.StringOutput)
}

type VmGuestHealthAlertCriterionResponseArrayOutput struct{ *pulumi.OutputState }

func (VmGuestHealthAlertCriterionResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]VmGuestHealthAlertCriterionResponse)(nil)).Elem()
}

func (o VmGuestHealthAlertCriterionResponseArrayOutput) ToVmGuestHealthAlertCriterionResponseArrayOutput() VmGuestHealthAlertCriterionResponseArrayOutput {
	return o
}

func (o VmGuestHealthAlertCriterionResponseArrayOutput) ToVmGuestHealthAlertCriterionResponseArrayOutputWithContext(ctx context.Context) VmGuestHealthAlertCriterionResponseArrayOutput {
	return o
}

func (o VmGuestHealthAlertCriterionResponseArrayOutput) Index(i pulumi.IntInput) VmGuestHealthAlertCriterionResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) VmGuestHealthAlertCriterionResponse {
		return vs[0].([]VmGuestHealthAlertCriterionResponse)[vs[1].(int)]
	}).(VmGuestHealthAlertCriterionResponseOutput)
}

func init() {
	pulumi.RegisterOutputType(ActionGroupOutput{})
	pulumi.RegisterOutputType(ActionGroupResponseOutput{})
	pulumi.RegisterOutputType(ActionGroupsInformationOutput{})
	pulumi.RegisterOutputType(ActionGroupsInformationPtrOutput{})
	pulumi.RegisterOutputType(ActionGroupsInformationResponseOutput{})
	pulumi.RegisterOutputType(ActionGroupsInformationResponsePtrOutput{})
	pulumi.RegisterOutputType(ConditionOutput{})
	pulumi.RegisterOutputType(ConditionPtrOutput{})
	pulumi.RegisterOutputType(ConditionResponseOutput{})
	pulumi.RegisterOutputType(ConditionResponsePtrOutput{})
	pulumi.RegisterOutputType(ConditionsOutput{})
	pulumi.RegisterOutputType(ConditionsPtrOutput{})
	pulumi.RegisterOutputType(ConditionsResponseOutput{})
	pulumi.RegisterOutputType(ConditionsResponsePtrOutput{})
	pulumi.RegisterOutputType(DetectorOutput{})
	pulumi.RegisterOutputType(DetectorPtrOutput{})
	pulumi.RegisterOutputType(DetectorResponseOutput{})
	pulumi.RegisterOutputType(DetectorResponsePtrOutput{})
	pulumi.RegisterOutputType(DiagnosticsOutput{})
	pulumi.RegisterOutputType(DiagnosticsResponseOutput{})
	pulumi.RegisterOutputType(HealthAlertActionOutput{})
	pulumi.RegisterOutputType(HealthAlertActionArrayOutput{})
	pulumi.RegisterOutputType(HealthAlertActionResponseOutput{})
	pulumi.RegisterOutputType(HealthAlertActionResponseArrayOutput{})
	pulumi.RegisterOutputType(HealthAlertCriteriaOutput{})
	pulumi.RegisterOutputType(HealthAlertCriteriaPtrOutput{})
	pulumi.RegisterOutputType(HealthAlertCriteriaResponseOutput{})
	pulumi.RegisterOutputType(HealthAlertCriteriaResponsePtrOutput{})
	pulumi.RegisterOutputType(HealthStateOutput{})
	pulumi.RegisterOutputType(HealthStateArrayOutput{})
	pulumi.RegisterOutputType(HealthStateResponseOutput{})
	pulumi.RegisterOutputType(HealthStateResponseArrayOutput{})
	pulumi.RegisterOutputType(ScopeOutput{})
	pulumi.RegisterOutputType(ScopePtrOutput{})
	pulumi.RegisterOutputType(ScopeResponseOutput{})
	pulumi.RegisterOutputType(ScopeResponsePtrOutput{})
	pulumi.RegisterOutputType(SuppressionOutput{})
	pulumi.RegisterOutputType(SuppressionConfigOutput{})
	pulumi.RegisterOutputType(SuppressionConfigResponseOutput{})
	pulumi.RegisterOutputType(SuppressionResponseOutput{})
	pulumi.RegisterOutputType(SuppressionScheduleOutput{})
	pulumi.RegisterOutputType(SuppressionSchedulePtrOutput{})
	pulumi.RegisterOutputType(SuppressionScheduleResponseOutput{})
	pulumi.RegisterOutputType(SuppressionScheduleResponsePtrOutput{})
	pulumi.RegisterOutputType(ThrottlingInformationOutput{})
	pulumi.RegisterOutputType(ThrottlingInformationPtrOutput{})
	pulumi.RegisterOutputType(ThrottlingInformationResponseOutput{})
	pulumi.RegisterOutputType(ThrottlingInformationResponsePtrOutput{})
	pulumi.RegisterOutputType(VmGuestHealthAlertCriterionOutput{})
	pulumi.RegisterOutputType(VmGuestHealthAlertCriterionArrayOutput{})
	pulumi.RegisterOutputType(VmGuestHealthAlertCriterionResponseOutput{})
	pulumi.RegisterOutputType(VmGuestHealthAlertCriterionResponseArrayOutput{})
}
