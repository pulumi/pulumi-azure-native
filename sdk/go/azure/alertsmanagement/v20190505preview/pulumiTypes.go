// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v20190505preview

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// Action rule with action group configuration
type ActionGroup struct {
	// Action group to trigger if action rule matches
	ActionGroupId string `pulumi:"actionGroupId"`
	// conditions on which alerts will be filtered
	Conditions *Conditions `pulumi:"conditions"`
	// Description of action rule
	Description *string `pulumi:"description"`
	// scope on which action rule will apply
	Scope *Scope `pulumi:"scope"`
	// Indicates if the given action rule is enabled or disabled
	Status *string `pulumi:"status"`
	// Indicates type of action rule
	// Expected value is 'ActionGroup'.
	Type string `pulumi:"type"`
}

// ActionGroupInput is an input type that accepts ActionGroupArgs and ActionGroupOutput values.
// You can construct a concrete instance of `ActionGroupInput` via:
//
//          ActionGroupArgs{...}
type ActionGroupInput interface {
	pulumi.Input

	ToActionGroupOutput() ActionGroupOutput
	ToActionGroupOutputWithContext(context.Context) ActionGroupOutput
}

// Action rule with action group configuration
type ActionGroupArgs struct {
	// Action group to trigger if action rule matches
	ActionGroupId pulumi.StringInput `pulumi:"actionGroupId"`
	// conditions on which alerts will be filtered
	Conditions ConditionsPtrInput `pulumi:"conditions"`
	// Description of action rule
	Description pulumi.StringPtrInput `pulumi:"description"`
	// scope on which action rule will apply
	Scope ScopePtrInput `pulumi:"scope"`
	// Indicates if the given action rule is enabled or disabled
	Status pulumi.StringPtrInput `pulumi:"status"`
	// Indicates type of action rule
	// Expected value is 'ActionGroup'.
	Type pulumi.StringInput `pulumi:"type"`
}

func (ActionGroupArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ActionGroup)(nil)).Elem()
}

func (i ActionGroupArgs) ToActionGroupOutput() ActionGroupOutput {
	return i.ToActionGroupOutputWithContext(context.Background())
}

func (i ActionGroupArgs) ToActionGroupOutputWithContext(ctx context.Context) ActionGroupOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ActionGroupOutput)
}

// Action rule with action group configuration
type ActionGroupOutput struct{ *pulumi.OutputState }

func (ActionGroupOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ActionGroup)(nil)).Elem()
}

func (o ActionGroupOutput) ToActionGroupOutput() ActionGroupOutput {
	return o
}

func (o ActionGroupOutput) ToActionGroupOutputWithContext(ctx context.Context) ActionGroupOutput {
	return o
}

// Action group to trigger if action rule matches
func (o ActionGroupOutput) ActionGroupId() pulumi.StringOutput {
	return o.ApplyT(func(v ActionGroup) string { return v.ActionGroupId }).(pulumi.StringOutput)
}

// conditions on which alerts will be filtered
func (o ActionGroupOutput) Conditions() ConditionsPtrOutput {
	return o.ApplyT(func(v ActionGroup) *Conditions { return v.Conditions }).(ConditionsPtrOutput)
}

// Description of action rule
func (o ActionGroupOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ActionGroup) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// scope on which action rule will apply
func (o ActionGroupOutput) Scope() ScopePtrOutput {
	return o.ApplyT(func(v ActionGroup) *Scope { return v.Scope }).(ScopePtrOutput)
}

// Indicates if the given action rule is enabled or disabled
func (o ActionGroupOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ActionGroup) *string { return v.Status }).(pulumi.StringPtrOutput)
}

// Indicates type of action rule
// Expected value is 'ActionGroup'.
func (o ActionGroupOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ActionGroup) string { return v.Type }).(pulumi.StringOutput)
}

// Action rule with action group configuration
type ActionGroupInvokeResponse struct {
	// Action group to trigger if action rule matches
	ActionGroupId string `pulumi:"actionGroupId"`
	// conditions on which alerts will be filtered
	Conditions *ConditionsInvokeResponse `pulumi:"conditions"`
	// Creation time of action rule. Date-Time in ISO-8601 format.
	CreatedAt string `pulumi:"createdAt"`
	// Created by user name.
	CreatedBy string `pulumi:"createdBy"`
	// Description of action rule
	Description *string `pulumi:"description"`
	// Last updated time of action rule. Date-Time in ISO-8601 format.
	LastModifiedAt string `pulumi:"lastModifiedAt"`
	// Last modified by user name.
	LastModifiedBy string `pulumi:"lastModifiedBy"`
	// scope on which action rule will apply
	Scope *ScopeInvokeResponse `pulumi:"scope"`
	// Indicates if the given action rule is enabled or disabled
	Status *string `pulumi:"status"`
	// Indicates type of action rule
	// Expected value is 'ActionGroup'.
	Type string `pulumi:"type"`
}

// ActionGroupInvokeResponseInput is an input type that accepts ActionGroupInvokeResponseArgs and ActionGroupInvokeResponseOutput values.
// You can construct a concrete instance of `ActionGroupInvokeResponseInput` via:
//
//          ActionGroupInvokeResponseArgs{...}
type ActionGroupInvokeResponseInput interface {
	pulumi.Input

	ToActionGroupInvokeResponseOutput() ActionGroupInvokeResponseOutput
	ToActionGroupInvokeResponseOutputWithContext(context.Context) ActionGroupInvokeResponseOutput
}

// Action rule with action group configuration
type ActionGroupInvokeResponseArgs struct {
	// Action group to trigger if action rule matches
	ActionGroupId pulumi.StringInput `pulumi:"actionGroupId"`
	// conditions on which alerts will be filtered
	Conditions ConditionsInvokeResponsePtrInput `pulumi:"conditions"`
	// Creation time of action rule. Date-Time in ISO-8601 format.
	CreatedAt pulumi.StringInput `pulumi:"createdAt"`
	// Created by user name.
	CreatedBy pulumi.StringInput `pulumi:"createdBy"`
	// Description of action rule
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Last updated time of action rule. Date-Time in ISO-8601 format.
	LastModifiedAt pulumi.StringInput `pulumi:"lastModifiedAt"`
	// Last modified by user name.
	LastModifiedBy pulumi.StringInput `pulumi:"lastModifiedBy"`
	// scope on which action rule will apply
	Scope ScopeInvokeResponsePtrInput `pulumi:"scope"`
	// Indicates if the given action rule is enabled or disabled
	Status pulumi.StringPtrInput `pulumi:"status"`
	// Indicates type of action rule
	// Expected value is 'ActionGroup'.
	Type pulumi.StringInput `pulumi:"type"`
}

func (ActionGroupInvokeResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ActionGroupInvokeResponse)(nil)).Elem()
}

func (i ActionGroupInvokeResponseArgs) ToActionGroupInvokeResponseOutput() ActionGroupInvokeResponseOutput {
	return i.ToActionGroupInvokeResponseOutputWithContext(context.Background())
}

func (i ActionGroupInvokeResponseArgs) ToActionGroupInvokeResponseOutputWithContext(ctx context.Context) ActionGroupInvokeResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ActionGroupInvokeResponseOutput)
}

// Action rule with action group configuration
type ActionGroupInvokeResponseOutput struct{ *pulumi.OutputState }

func (ActionGroupInvokeResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ActionGroupInvokeResponse)(nil)).Elem()
}

func (o ActionGroupInvokeResponseOutput) ToActionGroupInvokeResponseOutput() ActionGroupInvokeResponseOutput {
	return o
}

func (o ActionGroupInvokeResponseOutput) ToActionGroupInvokeResponseOutputWithContext(ctx context.Context) ActionGroupInvokeResponseOutput {
	return o
}

// Action group to trigger if action rule matches
func (o ActionGroupInvokeResponseOutput) ActionGroupId() pulumi.StringOutput {
	return o.ApplyT(func(v ActionGroupInvokeResponse) string { return v.ActionGroupId }).(pulumi.StringOutput)
}

// conditions on which alerts will be filtered
func (o ActionGroupInvokeResponseOutput) Conditions() ConditionsInvokeResponsePtrOutput {
	return o.ApplyT(func(v ActionGroupInvokeResponse) *ConditionsInvokeResponse { return v.Conditions }).(ConditionsInvokeResponsePtrOutput)
}

// Creation time of action rule. Date-Time in ISO-8601 format.
func (o ActionGroupInvokeResponseOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v ActionGroupInvokeResponse) string { return v.CreatedAt }).(pulumi.StringOutput)
}

// Created by user name.
func (o ActionGroupInvokeResponseOutput) CreatedBy() pulumi.StringOutput {
	return o.ApplyT(func(v ActionGroupInvokeResponse) string { return v.CreatedBy }).(pulumi.StringOutput)
}

// Description of action rule
func (o ActionGroupInvokeResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ActionGroupInvokeResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Last updated time of action rule. Date-Time in ISO-8601 format.
func (o ActionGroupInvokeResponseOutput) LastModifiedAt() pulumi.StringOutput {
	return o.ApplyT(func(v ActionGroupInvokeResponse) string { return v.LastModifiedAt }).(pulumi.StringOutput)
}

// Last modified by user name.
func (o ActionGroupInvokeResponseOutput) LastModifiedBy() pulumi.StringOutput {
	return o.ApplyT(func(v ActionGroupInvokeResponse) string { return v.LastModifiedBy }).(pulumi.StringOutput)
}

// scope on which action rule will apply
func (o ActionGroupInvokeResponseOutput) Scope() ScopeInvokeResponsePtrOutput {
	return o.ApplyT(func(v ActionGroupInvokeResponse) *ScopeInvokeResponse { return v.Scope }).(ScopeInvokeResponsePtrOutput)
}

// Indicates if the given action rule is enabled or disabled
func (o ActionGroupInvokeResponseOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ActionGroupInvokeResponse) *string { return v.Status }).(pulumi.StringPtrOutput)
}

// Indicates type of action rule
// Expected value is 'ActionGroup'.
func (o ActionGroupInvokeResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ActionGroupInvokeResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Action rule with action group configuration
type ActionGroupResponse struct {
	// Action group to trigger if action rule matches
	ActionGroupId string `pulumi:"actionGroupId"`
	// conditions on which alerts will be filtered
	Conditions *ConditionsResponse `pulumi:"conditions"`
	// Creation time of action rule. Date-Time in ISO-8601 format.
	CreatedAt string `pulumi:"createdAt"`
	// Created by user name.
	CreatedBy string `pulumi:"createdBy"`
	// Description of action rule
	Description *string `pulumi:"description"`
	// Last updated time of action rule. Date-Time in ISO-8601 format.
	LastModifiedAt string `pulumi:"lastModifiedAt"`
	// Last modified by user name.
	LastModifiedBy string `pulumi:"lastModifiedBy"`
	// scope on which action rule will apply
	Scope *ScopeResponse `pulumi:"scope"`
	// Indicates if the given action rule is enabled or disabled
	Status *string `pulumi:"status"`
	// Indicates type of action rule
	// Expected value is 'ActionGroup'.
	Type string `pulumi:"type"`
}

// ActionGroupResponseInput is an input type that accepts ActionGroupResponseArgs and ActionGroupResponseOutput values.
// You can construct a concrete instance of `ActionGroupResponseInput` via:
//
//          ActionGroupResponseArgs{...}
type ActionGroupResponseInput interface {
	pulumi.Input

	ToActionGroupResponseOutput() ActionGroupResponseOutput
	ToActionGroupResponseOutputWithContext(context.Context) ActionGroupResponseOutput
}

// Action rule with action group configuration
type ActionGroupResponseArgs struct {
	// Action group to trigger if action rule matches
	ActionGroupId pulumi.StringInput `pulumi:"actionGroupId"`
	// conditions on which alerts will be filtered
	Conditions ConditionsResponsePtrInput `pulumi:"conditions"`
	// Creation time of action rule. Date-Time in ISO-8601 format.
	CreatedAt pulumi.StringInput `pulumi:"createdAt"`
	// Created by user name.
	CreatedBy pulumi.StringInput `pulumi:"createdBy"`
	// Description of action rule
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Last updated time of action rule. Date-Time in ISO-8601 format.
	LastModifiedAt pulumi.StringInput `pulumi:"lastModifiedAt"`
	// Last modified by user name.
	LastModifiedBy pulumi.StringInput `pulumi:"lastModifiedBy"`
	// scope on which action rule will apply
	Scope ScopeResponsePtrInput `pulumi:"scope"`
	// Indicates if the given action rule is enabled or disabled
	Status pulumi.StringPtrInput `pulumi:"status"`
	// Indicates type of action rule
	// Expected value is 'ActionGroup'.
	Type pulumi.StringInput `pulumi:"type"`
}

func (ActionGroupResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ActionGroupResponse)(nil)).Elem()
}

func (i ActionGroupResponseArgs) ToActionGroupResponseOutput() ActionGroupResponseOutput {
	return i.ToActionGroupResponseOutputWithContext(context.Background())
}

func (i ActionGroupResponseArgs) ToActionGroupResponseOutputWithContext(ctx context.Context) ActionGroupResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ActionGroupResponseOutput)
}

// Action rule with action group configuration
type ActionGroupResponseOutput struct{ *pulumi.OutputState }

func (ActionGroupResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ActionGroupResponse)(nil)).Elem()
}

func (o ActionGroupResponseOutput) ToActionGroupResponseOutput() ActionGroupResponseOutput {
	return o
}

func (o ActionGroupResponseOutput) ToActionGroupResponseOutputWithContext(ctx context.Context) ActionGroupResponseOutput {
	return o
}

// Action group to trigger if action rule matches
func (o ActionGroupResponseOutput) ActionGroupId() pulumi.StringOutput {
	return o.ApplyT(func(v ActionGroupResponse) string { return v.ActionGroupId }).(pulumi.StringOutput)
}

// conditions on which alerts will be filtered
func (o ActionGroupResponseOutput) Conditions() ConditionsResponsePtrOutput {
	return o.ApplyT(func(v ActionGroupResponse) *ConditionsResponse { return v.Conditions }).(ConditionsResponsePtrOutput)
}

// Creation time of action rule. Date-Time in ISO-8601 format.
func (o ActionGroupResponseOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v ActionGroupResponse) string { return v.CreatedAt }).(pulumi.StringOutput)
}

// Created by user name.
func (o ActionGroupResponseOutput) CreatedBy() pulumi.StringOutput {
	return o.ApplyT(func(v ActionGroupResponse) string { return v.CreatedBy }).(pulumi.StringOutput)
}

// Description of action rule
func (o ActionGroupResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ActionGroupResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Last updated time of action rule. Date-Time in ISO-8601 format.
func (o ActionGroupResponseOutput) LastModifiedAt() pulumi.StringOutput {
	return o.ApplyT(func(v ActionGroupResponse) string { return v.LastModifiedAt }).(pulumi.StringOutput)
}

// Last modified by user name.
func (o ActionGroupResponseOutput) LastModifiedBy() pulumi.StringOutput {
	return o.ApplyT(func(v ActionGroupResponse) string { return v.LastModifiedBy }).(pulumi.StringOutput)
}

// scope on which action rule will apply
func (o ActionGroupResponseOutput) Scope() ScopeResponsePtrOutput {
	return o.ApplyT(func(v ActionGroupResponse) *ScopeResponse { return v.Scope }).(ScopeResponsePtrOutput)
}

// Indicates if the given action rule is enabled or disabled
func (o ActionGroupResponseOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ActionGroupResponse) *string { return v.Status }).(pulumi.StringPtrOutput)
}

// Indicates type of action rule
// Expected value is 'ActionGroup'.
func (o ActionGroupResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ActionGroupResponse) string { return v.Type }).(pulumi.StringOutput)
}

// condition to trigger an action rule
type Condition struct {
	// operator for a given condition
	Operator *string `pulumi:"operator"`
	// list of values to match for a given condition.
	Values []string `pulumi:"values"`
}

// ConditionInput is an input type that accepts ConditionArgs and ConditionOutput values.
// You can construct a concrete instance of `ConditionInput` via:
//
//          ConditionArgs{...}
type ConditionInput interface {
	pulumi.Input

	ToConditionOutput() ConditionOutput
	ToConditionOutputWithContext(context.Context) ConditionOutput
}

// condition to trigger an action rule
type ConditionArgs struct {
	// operator for a given condition
	Operator pulumi.StringPtrInput `pulumi:"operator"`
	// list of values to match for a given condition.
	Values pulumi.StringArrayInput `pulumi:"values"`
}

func (ConditionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Condition)(nil)).Elem()
}

func (i ConditionArgs) ToConditionOutput() ConditionOutput {
	return i.ToConditionOutputWithContext(context.Background())
}

func (i ConditionArgs) ToConditionOutputWithContext(ctx context.Context) ConditionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConditionOutput)
}

func (i ConditionArgs) ToConditionPtrOutput() ConditionPtrOutput {
	return i.ToConditionPtrOutputWithContext(context.Background())
}

func (i ConditionArgs) ToConditionPtrOutputWithContext(ctx context.Context) ConditionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConditionOutput).ToConditionPtrOutputWithContext(ctx)
}

// ConditionPtrInput is an input type that accepts ConditionArgs, ConditionPtr and ConditionPtrOutput values.
// You can construct a concrete instance of `ConditionPtrInput` via:
//
//          ConditionArgs{...}
//
//  or:
//
//          nil
type ConditionPtrInput interface {
	pulumi.Input

	ToConditionPtrOutput() ConditionPtrOutput
	ToConditionPtrOutputWithContext(context.Context) ConditionPtrOutput
}

type conditionPtrType ConditionArgs

func ConditionPtr(v *ConditionArgs) ConditionPtrInput {
	return (*conditionPtrType)(v)
}

func (*conditionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Condition)(nil)).Elem()
}

func (i *conditionPtrType) ToConditionPtrOutput() ConditionPtrOutput {
	return i.ToConditionPtrOutputWithContext(context.Background())
}

func (i *conditionPtrType) ToConditionPtrOutputWithContext(ctx context.Context) ConditionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConditionPtrOutput)
}

// condition to trigger an action rule
type ConditionOutput struct{ *pulumi.OutputState }

func (ConditionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Condition)(nil)).Elem()
}

func (o ConditionOutput) ToConditionOutput() ConditionOutput {
	return o
}

func (o ConditionOutput) ToConditionOutputWithContext(ctx context.Context) ConditionOutput {
	return o
}

func (o ConditionOutput) ToConditionPtrOutput() ConditionPtrOutput {
	return o.ToConditionPtrOutputWithContext(context.Background())
}

func (o ConditionOutput) ToConditionPtrOutputWithContext(ctx context.Context) ConditionPtrOutput {
	return o.ApplyT(func(v Condition) *Condition {
		return &v
	}).(ConditionPtrOutput)
}

// operator for a given condition
func (o ConditionOutput) Operator() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Condition) *string { return v.Operator }).(pulumi.StringPtrOutput)
}

// list of values to match for a given condition.
func (o ConditionOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v Condition) []string { return v.Values }).(pulumi.StringArrayOutput)
}

type ConditionPtrOutput struct{ *pulumi.OutputState }

func (ConditionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Condition)(nil)).Elem()
}

func (o ConditionPtrOutput) ToConditionPtrOutput() ConditionPtrOutput {
	return o
}

func (o ConditionPtrOutput) ToConditionPtrOutputWithContext(ctx context.Context) ConditionPtrOutput {
	return o
}

func (o ConditionPtrOutput) Elem() ConditionOutput {
	return o.ApplyT(func(v *Condition) Condition { return *v }).(ConditionOutput)
}

// operator for a given condition
func (o ConditionPtrOutput) Operator() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Condition) *string {
		if v == nil {
			return nil
		}
		return v.Operator
	}).(pulumi.StringPtrOutput)
}

// list of values to match for a given condition.
func (o ConditionPtrOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Condition) []string {
		if v == nil {
			return nil
		}
		return v.Values
	}).(pulumi.StringArrayOutput)
}

// condition to trigger an action rule
type ConditionInvokeResponse struct {
	// operator for a given condition
	Operator *string `pulumi:"operator"`
	// list of values to match for a given condition.
	Values []string `pulumi:"values"`
}

// ConditionInvokeResponseInput is an input type that accepts ConditionInvokeResponseArgs and ConditionInvokeResponseOutput values.
// You can construct a concrete instance of `ConditionInvokeResponseInput` via:
//
//          ConditionInvokeResponseArgs{...}
type ConditionInvokeResponseInput interface {
	pulumi.Input

	ToConditionInvokeResponseOutput() ConditionInvokeResponseOutput
	ToConditionInvokeResponseOutputWithContext(context.Context) ConditionInvokeResponseOutput
}

// condition to trigger an action rule
type ConditionInvokeResponseArgs struct {
	// operator for a given condition
	Operator pulumi.StringPtrInput `pulumi:"operator"`
	// list of values to match for a given condition.
	Values pulumi.StringArrayInput `pulumi:"values"`
}

func (ConditionInvokeResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ConditionInvokeResponse)(nil)).Elem()
}

func (i ConditionInvokeResponseArgs) ToConditionInvokeResponseOutput() ConditionInvokeResponseOutput {
	return i.ToConditionInvokeResponseOutputWithContext(context.Background())
}

func (i ConditionInvokeResponseArgs) ToConditionInvokeResponseOutputWithContext(ctx context.Context) ConditionInvokeResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConditionInvokeResponseOutput)
}

func (i ConditionInvokeResponseArgs) ToConditionInvokeResponsePtrOutput() ConditionInvokeResponsePtrOutput {
	return i.ToConditionInvokeResponsePtrOutputWithContext(context.Background())
}

func (i ConditionInvokeResponseArgs) ToConditionInvokeResponsePtrOutputWithContext(ctx context.Context) ConditionInvokeResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConditionInvokeResponseOutput).ToConditionInvokeResponsePtrOutputWithContext(ctx)
}

// ConditionInvokeResponsePtrInput is an input type that accepts ConditionInvokeResponseArgs, ConditionInvokeResponsePtr and ConditionInvokeResponsePtrOutput values.
// You can construct a concrete instance of `ConditionInvokeResponsePtrInput` via:
//
//          ConditionInvokeResponseArgs{...}
//
//  or:
//
//          nil
type ConditionInvokeResponsePtrInput interface {
	pulumi.Input

	ToConditionInvokeResponsePtrOutput() ConditionInvokeResponsePtrOutput
	ToConditionInvokeResponsePtrOutputWithContext(context.Context) ConditionInvokeResponsePtrOutput
}

type conditionInvokeResponsePtrType ConditionInvokeResponseArgs

func ConditionInvokeResponsePtr(v *ConditionInvokeResponseArgs) ConditionInvokeResponsePtrInput {
	return (*conditionInvokeResponsePtrType)(v)
}

func (*conditionInvokeResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ConditionInvokeResponse)(nil)).Elem()
}

func (i *conditionInvokeResponsePtrType) ToConditionInvokeResponsePtrOutput() ConditionInvokeResponsePtrOutput {
	return i.ToConditionInvokeResponsePtrOutputWithContext(context.Background())
}

func (i *conditionInvokeResponsePtrType) ToConditionInvokeResponsePtrOutputWithContext(ctx context.Context) ConditionInvokeResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConditionInvokeResponsePtrOutput)
}

// condition to trigger an action rule
type ConditionInvokeResponseOutput struct{ *pulumi.OutputState }

func (ConditionInvokeResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConditionInvokeResponse)(nil)).Elem()
}

func (o ConditionInvokeResponseOutput) ToConditionInvokeResponseOutput() ConditionInvokeResponseOutput {
	return o
}

func (o ConditionInvokeResponseOutput) ToConditionInvokeResponseOutputWithContext(ctx context.Context) ConditionInvokeResponseOutput {
	return o
}

func (o ConditionInvokeResponseOutput) ToConditionInvokeResponsePtrOutput() ConditionInvokeResponsePtrOutput {
	return o.ToConditionInvokeResponsePtrOutputWithContext(context.Background())
}

func (o ConditionInvokeResponseOutput) ToConditionInvokeResponsePtrOutputWithContext(ctx context.Context) ConditionInvokeResponsePtrOutput {
	return o.ApplyT(func(v ConditionInvokeResponse) *ConditionInvokeResponse {
		return &v
	}).(ConditionInvokeResponsePtrOutput)
}

// operator for a given condition
func (o ConditionInvokeResponseOutput) Operator() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ConditionInvokeResponse) *string { return v.Operator }).(pulumi.StringPtrOutput)
}

// list of values to match for a given condition.
func (o ConditionInvokeResponseOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ConditionInvokeResponse) []string { return v.Values }).(pulumi.StringArrayOutput)
}

type ConditionInvokeResponsePtrOutput struct{ *pulumi.OutputState }

func (ConditionInvokeResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ConditionInvokeResponse)(nil)).Elem()
}

func (o ConditionInvokeResponsePtrOutput) ToConditionInvokeResponsePtrOutput() ConditionInvokeResponsePtrOutput {
	return o
}

func (o ConditionInvokeResponsePtrOutput) ToConditionInvokeResponsePtrOutputWithContext(ctx context.Context) ConditionInvokeResponsePtrOutput {
	return o
}

func (o ConditionInvokeResponsePtrOutput) Elem() ConditionInvokeResponseOutput {
	return o.ApplyT(func(v *ConditionInvokeResponse) ConditionInvokeResponse { return *v }).(ConditionInvokeResponseOutput)
}

// operator for a given condition
func (o ConditionInvokeResponsePtrOutput) Operator() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConditionInvokeResponse) *string {
		if v == nil {
			return nil
		}
		return v.Operator
	}).(pulumi.StringPtrOutput)
}

// list of values to match for a given condition.
func (o ConditionInvokeResponsePtrOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ConditionInvokeResponse) []string {
		if v == nil {
			return nil
		}
		return v.Values
	}).(pulumi.StringArrayOutput)
}

// condition to trigger an action rule
type ConditionResponse struct {
	// operator for a given condition
	Operator *string `pulumi:"operator"`
	// list of values to match for a given condition.
	Values []string `pulumi:"values"`
}

// ConditionResponseInput is an input type that accepts ConditionResponseArgs and ConditionResponseOutput values.
// You can construct a concrete instance of `ConditionResponseInput` via:
//
//          ConditionResponseArgs{...}
type ConditionResponseInput interface {
	pulumi.Input

	ToConditionResponseOutput() ConditionResponseOutput
	ToConditionResponseOutputWithContext(context.Context) ConditionResponseOutput
}

// condition to trigger an action rule
type ConditionResponseArgs struct {
	// operator for a given condition
	Operator pulumi.StringPtrInput `pulumi:"operator"`
	// list of values to match for a given condition.
	Values pulumi.StringArrayInput `pulumi:"values"`
}

func (ConditionResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ConditionResponse)(nil)).Elem()
}

func (i ConditionResponseArgs) ToConditionResponseOutput() ConditionResponseOutput {
	return i.ToConditionResponseOutputWithContext(context.Background())
}

func (i ConditionResponseArgs) ToConditionResponseOutputWithContext(ctx context.Context) ConditionResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConditionResponseOutput)
}

func (i ConditionResponseArgs) ToConditionResponsePtrOutput() ConditionResponsePtrOutput {
	return i.ToConditionResponsePtrOutputWithContext(context.Background())
}

func (i ConditionResponseArgs) ToConditionResponsePtrOutputWithContext(ctx context.Context) ConditionResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConditionResponseOutput).ToConditionResponsePtrOutputWithContext(ctx)
}

// ConditionResponsePtrInput is an input type that accepts ConditionResponseArgs, ConditionResponsePtr and ConditionResponsePtrOutput values.
// You can construct a concrete instance of `ConditionResponsePtrInput` via:
//
//          ConditionResponseArgs{...}
//
//  or:
//
//          nil
type ConditionResponsePtrInput interface {
	pulumi.Input

	ToConditionResponsePtrOutput() ConditionResponsePtrOutput
	ToConditionResponsePtrOutputWithContext(context.Context) ConditionResponsePtrOutput
}

type conditionResponsePtrType ConditionResponseArgs

func ConditionResponsePtr(v *ConditionResponseArgs) ConditionResponsePtrInput {
	return (*conditionResponsePtrType)(v)
}

func (*conditionResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ConditionResponse)(nil)).Elem()
}

func (i *conditionResponsePtrType) ToConditionResponsePtrOutput() ConditionResponsePtrOutput {
	return i.ToConditionResponsePtrOutputWithContext(context.Background())
}

func (i *conditionResponsePtrType) ToConditionResponsePtrOutputWithContext(ctx context.Context) ConditionResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConditionResponsePtrOutput)
}

// condition to trigger an action rule
type ConditionResponseOutput struct{ *pulumi.OutputState }

func (ConditionResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConditionResponse)(nil)).Elem()
}

func (o ConditionResponseOutput) ToConditionResponseOutput() ConditionResponseOutput {
	return o
}

func (o ConditionResponseOutput) ToConditionResponseOutputWithContext(ctx context.Context) ConditionResponseOutput {
	return o
}

func (o ConditionResponseOutput) ToConditionResponsePtrOutput() ConditionResponsePtrOutput {
	return o.ToConditionResponsePtrOutputWithContext(context.Background())
}

func (o ConditionResponseOutput) ToConditionResponsePtrOutputWithContext(ctx context.Context) ConditionResponsePtrOutput {
	return o.ApplyT(func(v ConditionResponse) *ConditionResponse {
		return &v
	}).(ConditionResponsePtrOutput)
}

// operator for a given condition
func (o ConditionResponseOutput) Operator() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ConditionResponse) *string { return v.Operator }).(pulumi.StringPtrOutput)
}

// list of values to match for a given condition.
func (o ConditionResponseOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ConditionResponse) []string { return v.Values }).(pulumi.StringArrayOutput)
}

type ConditionResponsePtrOutput struct{ *pulumi.OutputState }

func (ConditionResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ConditionResponse)(nil)).Elem()
}

func (o ConditionResponsePtrOutput) ToConditionResponsePtrOutput() ConditionResponsePtrOutput {
	return o
}

func (o ConditionResponsePtrOutput) ToConditionResponsePtrOutputWithContext(ctx context.Context) ConditionResponsePtrOutput {
	return o
}

func (o ConditionResponsePtrOutput) Elem() ConditionResponseOutput {
	return o.ApplyT(func(v *ConditionResponse) ConditionResponse { return *v }).(ConditionResponseOutput)
}

// operator for a given condition
func (o ConditionResponsePtrOutput) Operator() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConditionResponse) *string {
		if v == nil {
			return nil
		}
		return v.Operator
	}).(pulumi.StringPtrOutput)
}

// list of values to match for a given condition.
func (o ConditionResponsePtrOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ConditionResponse) []string {
		if v == nil {
			return nil
		}
		return v.Values
	}).(pulumi.StringArrayOutput)
}

// Conditions in alert instance to be matched for a given action rule. Default value is all. Multiple values could be provided with comma separation.
type Conditions struct {
	// filter alerts by alert context (payload)
	AlertContext *Condition `pulumi:"alertContext"`
	// filter alerts by alert rule id
	AlertRuleId *Condition `pulumi:"alertRuleId"`
	// filter alerts by alert rule description
	Description *Condition `pulumi:"description"`
	// filter alerts by monitor condition
	MonitorCondition *Condition `pulumi:"monitorCondition"`
	// filter alerts by monitor service
	MonitorService *Condition `pulumi:"monitorService"`
	// filter alerts by severity
	Severity *Condition `pulumi:"severity"`
	// filter alerts by target resource type
	TargetResourceType *Condition `pulumi:"targetResourceType"`
}

// ConditionsInput is an input type that accepts ConditionsArgs and ConditionsOutput values.
// You can construct a concrete instance of `ConditionsInput` via:
//
//          ConditionsArgs{...}
type ConditionsInput interface {
	pulumi.Input

	ToConditionsOutput() ConditionsOutput
	ToConditionsOutputWithContext(context.Context) ConditionsOutput
}

// Conditions in alert instance to be matched for a given action rule. Default value is all. Multiple values could be provided with comma separation.
type ConditionsArgs struct {
	// filter alerts by alert context (payload)
	AlertContext ConditionPtrInput `pulumi:"alertContext"`
	// filter alerts by alert rule id
	AlertRuleId ConditionPtrInput `pulumi:"alertRuleId"`
	// filter alerts by alert rule description
	Description ConditionPtrInput `pulumi:"description"`
	// filter alerts by monitor condition
	MonitorCondition ConditionPtrInput `pulumi:"monitorCondition"`
	// filter alerts by monitor service
	MonitorService ConditionPtrInput `pulumi:"monitorService"`
	// filter alerts by severity
	Severity ConditionPtrInput `pulumi:"severity"`
	// filter alerts by target resource type
	TargetResourceType ConditionPtrInput `pulumi:"targetResourceType"`
}

func (ConditionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Conditions)(nil)).Elem()
}

func (i ConditionsArgs) ToConditionsOutput() ConditionsOutput {
	return i.ToConditionsOutputWithContext(context.Background())
}

func (i ConditionsArgs) ToConditionsOutputWithContext(ctx context.Context) ConditionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConditionsOutput)
}

func (i ConditionsArgs) ToConditionsPtrOutput() ConditionsPtrOutput {
	return i.ToConditionsPtrOutputWithContext(context.Background())
}

func (i ConditionsArgs) ToConditionsPtrOutputWithContext(ctx context.Context) ConditionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConditionsOutput).ToConditionsPtrOutputWithContext(ctx)
}

// ConditionsPtrInput is an input type that accepts ConditionsArgs, ConditionsPtr and ConditionsPtrOutput values.
// You can construct a concrete instance of `ConditionsPtrInput` via:
//
//          ConditionsArgs{...}
//
//  or:
//
//          nil
type ConditionsPtrInput interface {
	pulumi.Input

	ToConditionsPtrOutput() ConditionsPtrOutput
	ToConditionsPtrOutputWithContext(context.Context) ConditionsPtrOutput
}

type conditionsPtrType ConditionsArgs

func ConditionsPtr(v *ConditionsArgs) ConditionsPtrInput {
	return (*conditionsPtrType)(v)
}

func (*conditionsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Conditions)(nil)).Elem()
}

func (i *conditionsPtrType) ToConditionsPtrOutput() ConditionsPtrOutput {
	return i.ToConditionsPtrOutputWithContext(context.Background())
}

func (i *conditionsPtrType) ToConditionsPtrOutputWithContext(ctx context.Context) ConditionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConditionsPtrOutput)
}

// Conditions in alert instance to be matched for a given action rule. Default value is all. Multiple values could be provided with comma separation.
type ConditionsOutput struct{ *pulumi.OutputState }

func (ConditionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Conditions)(nil)).Elem()
}

func (o ConditionsOutput) ToConditionsOutput() ConditionsOutput {
	return o
}

func (o ConditionsOutput) ToConditionsOutputWithContext(ctx context.Context) ConditionsOutput {
	return o
}

func (o ConditionsOutput) ToConditionsPtrOutput() ConditionsPtrOutput {
	return o.ToConditionsPtrOutputWithContext(context.Background())
}

func (o ConditionsOutput) ToConditionsPtrOutputWithContext(ctx context.Context) ConditionsPtrOutput {
	return o.ApplyT(func(v Conditions) *Conditions {
		return &v
	}).(ConditionsPtrOutput)
}

// filter alerts by alert context (payload)
func (o ConditionsOutput) AlertContext() ConditionPtrOutput {
	return o.ApplyT(func(v Conditions) *Condition { return v.AlertContext }).(ConditionPtrOutput)
}

// filter alerts by alert rule id
func (o ConditionsOutput) AlertRuleId() ConditionPtrOutput {
	return o.ApplyT(func(v Conditions) *Condition { return v.AlertRuleId }).(ConditionPtrOutput)
}

// filter alerts by alert rule description
func (o ConditionsOutput) Description() ConditionPtrOutput {
	return o.ApplyT(func(v Conditions) *Condition { return v.Description }).(ConditionPtrOutput)
}

// filter alerts by monitor condition
func (o ConditionsOutput) MonitorCondition() ConditionPtrOutput {
	return o.ApplyT(func(v Conditions) *Condition { return v.MonitorCondition }).(ConditionPtrOutput)
}

// filter alerts by monitor service
func (o ConditionsOutput) MonitorService() ConditionPtrOutput {
	return o.ApplyT(func(v Conditions) *Condition { return v.MonitorService }).(ConditionPtrOutput)
}

// filter alerts by severity
func (o ConditionsOutput) Severity() ConditionPtrOutput {
	return o.ApplyT(func(v Conditions) *Condition { return v.Severity }).(ConditionPtrOutput)
}

// filter alerts by target resource type
func (o ConditionsOutput) TargetResourceType() ConditionPtrOutput {
	return o.ApplyT(func(v Conditions) *Condition { return v.TargetResourceType }).(ConditionPtrOutput)
}

type ConditionsPtrOutput struct{ *pulumi.OutputState }

func (ConditionsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Conditions)(nil)).Elem()
}

func (o ConditionsPtrOutput) ToConditionsPtrOutput() ConditionsPtrOutput {
	return o
}

func (o ConditionsPtrOutput) ToConditionsPtrOutputWithContext(ctx context.Context) ConditionsPtrOutput {
	return o
}

func (o ConditionsPtrOutput) Elem() ConditionsOutput {
	return o.ApplyT(func(v *Conditions) Conditions { return *v }).(ConditionsOutput)
}

// filter alerts by alert context (payload)
func (o ConditionsPtrOutput) AlertContext() ConditionPtrOutput {
	return o.ApplyT(func(v *Conditions) *Condition {
		if v == nil {
			return nil
		}
		return v.AlertContext
	}).(ConditionPtrOutput)
}

// filter alerts by alert rule id
func (o ConditionsPtrOutput) AlertRuleId() ConditionPtrOutput {
	return o.ApplyT(func(v *Conditions) *Condition {
		if v == nil {
			return nil
		}
		return v.AlertRuleId
	}).(ConditionPtrOutput)
}

// filter alerts by alert rule description
func (o ConditionsPtrOutput) Description() ConditionPtrOutput {
	return o.ApplyT(func(v *Conditions) *Condition {
		if v == nil {
			return nil
		}
		return v.Description
	}).(ConditionPtrOutput)
}

// filter alerts by monitor condition
func (o ConditionsPtrOutput) MonitorCondition() ConditionPtrOutput {
	return o.ApplyT(func(v *Conditions) *Condition {
		if v == nil {
			return nil
		}
		return v.MonitorCondition
	}).(ConditionPtrOutput)
}

// filter alerts by monitor service
func (o ConditionsPtrOutput) MonitorService() ConditionPtrOutput {
	return o.ApplyT(func(v *Conditions) *Condition {
		if v == nil {
			return nil
		}
		return v.MonitorService
	}).(ConditionPtrOutput)
}

// filter alerts by severity
func (o ConditionsPtrOutput) Severity() ConditionPtrOutput {
	return o.ApplyT(func(v *Conditions) *Condition {
		if v == nil {
			return nil
		}
		return v.Severity
	}).(ConditionPtrOutput)
}

// filter alerts by target resource type
func (o ConditionsPtrOutput) TargetResourceType() ConditionPtrOutput {
	return o.ApplyT(func(v *Conditions) *Condition {
		if v == nil {
			return nil
		}
		return v.TargetResourceType
	}).(ConditionPtrOutput)
}

// Conditions in alert instance to be matched for a given action rule. Default value is all. Multiple values could be provided with comma separation.
type ConditionsInvokeResponse struct {
	// filter alerts by alert context (payload)
	AlertContext *ConditionInvokeResponse `pulumi:"alertContext"`
	// filter alerts by alert rule id
	AlertRuleId *ConditionInvokeResponse `pulumi:"alertRuleId"`
	// filter alerts by alert rule description
	Description *ConditionInvokeResponse `pulumi:"description"`
	// filter alerts by monitor condition
	MonitorCondition *ConditionInvokeResponse `pulumi:"monitorCondition"`
	// filter alerts by monitor service
	MonitorService *ConditionInvokeResponse `pulumi:"monitorService"`
	// filter alerts by severity
	Severity *ConditionInvokeResponse `pulumi:"severity"`
	// filter alerts by target resource type
	TargetResourceType *ConditionInvokeResponse `pulumi:"targetResourceType"`
}

// ConditionsInvokeResponseInput is an input type that accepts ConditionsInvokeResponseArgs and ConditionsInvokeResponseOutput values.
// You can construct a concrete instance of `ConditionsInvokeResponseInput` via:
//
//          ConditionsInvokeResponseArgs{...}
type ConditionsInvokeResponseInput interface {
	pulumi.Input

	ToConditionsInvokeResponseOutput() ConditionsInvokeResponseOutput
	ToConditionsInvokeResponseOutputWithContext(context.Context) ConditionsInvokeResponseOutput
}

// Conditions in alert instance to be matched for a given action rule. Default value is all. Multiple values could be provided with comma separation.
type ConditionsInvokeResponseArgs struct {
	// filter alerts by alert context (payload)
	AlertContext ConditionInvokeResponsePtrInput `pulumi:"alertContext"`
	// filter alerts by alert rule id
	AlertRuleId ConditionInvokeResponsePtrInput `pulumi:"alertRuleId"`
	// filter alerts by alert rule description
	Description ConditionInvokeResponsePtrInput `pulumi:"description"`
	// filter alerts by monitor condition
	MonitorCondition ConditionInvokeResponsePtrInput `pulumi:"monitorCondition"`
	// filter alerts by monitor service
	MonitorService ConditionInvokeResponsePtrInput `pulumi:"monitorService"`
	// filter alerts by severity
	Severity ConditionInvokeResponsePtrInput `pulumi:"severity"`
	// filter alerts by target resource type
	TargetResourceType ConditionInvokeResponsePtrInput `pulumi:"targetResourceType"`
}

func (ConditionsInvokeResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ConditionsInvokeResponse)(nil)).Elem()
}

func (i ConditionsInvokeResponseArgs) ToConditionsInvokeResponseOutput() ConditionsInvokeResponseOutput {
	return i.ToConditionsInvokeResponseOutputWithContext(context.Background())
}

func (i ConditionsInvokeResponseArgs) ToConditionsInvokeResponseOutputWithContext(ctx context.Context) ConditionsInvokeResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConditionsInvokeResponseOutput)
}

func (i ConditionsInvokeResponseArgs) ToConditionsInvokeResponsePtrOutput() ConditionsInvokeResponsePtrOutput {
	return i.ToConditionsInvokeResponsePtrOutputWithContext(context.Background())
}

func (i ConditionsInvokeResponseArgs) ToConditionsInvokeResponsePtrOutputWithContext(ctx context.Context) ConditionsInvokeResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConditionsInvokeResponseOutput).ToConditionsInvokeResponsePtrOutputWithContext(ctx)
}

// ConditionsInvokeResponsePtrInput is an input type that accepts ConditionsInvokeResponseArgs, ConditionsInvokeResponsePtr and ConditionsInvokeResponsePtrOutput values.
// You can construct a concrete instance of `ConditionsInvokeResponsePtrInput` via:
//
//          ConditionsInvokeResponseArgs{...}
//
//  or:
//
//          nil
type ConditionsInvokeResponsePtrInput interface {
	pulumi.Input

	ToConditionsInvokeResponsePtrOutput() ConditionsInvokeResponsePtrOutput
	ToConditionsInvokeResponsePtrOutputWithContext(context.Context) ConditionsInvokeResponsePtrOutput
}

type conditionsInvokeResponsePtrType ConditionsInvokeResponseArgs

func ConditionsInvokeResponsePtr(v *ConditionsInvokeResponseArgs) ConditionsInvokeResponsePtrInput {
	return (*conditionsInvokeResponsePtrType)(v)
}

func (*conditionsInvokeResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ConditionsInvokeResponse)(nil)).Elem()
}

func (i *conditionsInvokeResponsePtrType) ToConditionsInvokeResponsePtrOutput() ConditionsInvokeResponsePtrOutput {
	return i.ToConditionsInvokeResponsePtrOutputWithContext(context.Background())
}

func (i *conditionsInvokeResponsePtrType) ToConditionsInvokeResponsePtrOutputWithContext(ctx context.Context) ConditionsInvokeResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConditionsInvokeResponsePtrOutput)
}

// Conditions in alert instance to be matched for a given action rule. Default value is all. Multiple values could be provided with comma separation.
type ConditionsInvokeResponseOutput struct{ *pulumi.OutputState }

func (ConditionsInvokeResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConditionsInvokeResponse)(nil)).Elem()
}

func (o ConditionsInvokeResponseOutput) ToConditionsInvokeResponseOutput() ConditionsInvokeResponseOutput {
	return o
}

func (o ConditionsInvokeResponseOutput) ToConditionsInvokeResponseOutputWithContext(ctx context.Context) ConditionsInvokeResponseOutput {
	return o
}

func (o ConditionsInvokeResponseOutput) ToConditionsInvokeResponsePtrOutput() ConditionsInvokeResponsePtrOutput {
	return o.ToConditionsInvokeResponsePtrOutputWithContext(context.Background())
}

func (o ConditionsInvokeResponseOutput) ToConditionsInvokeResponsePtrOutputWithContext(ctx context.Context) ConditionsInvokeResponsePtrOutput {
	return o.ApplyT(func(v ConditionsInvokeResponse) *ConditionsInvokeResponse {
		return &v
	}).(ConditionsInvokeResponsePtrOutput)
}

// filter alerts by alert context (payload)
func (o ConditionsInvokeResponseOutput) AlertContext() ConditionInvokeResponsePtrOutput {
	return o.ApplyT(func(v ConditionsInvokeResponse) *ConditionInvokeResponse { return v.AlertContext }).(ConditionInvokeResponsePtrOutput)
}

// filter alerts by alert rule id
func (o ConditionsInvokeResponseOutput) AlertRuleId() ConditionInvokeResponsePtrOutput {
	return o.ApplyT(func(v ConditionsInvokeResponse) *ConditionInvokeResponse { return v.AlertRuleId }).(ConditionInvokeResponsePtrOutput)
}

// filter alerts by alert rule description
func (o ConditionsInvokeResponseOutput) Description() ConditionInvokeResponsePtrOutput {
	return o.ApplyT(func(v ConditionsInvokeResponse) *ConditionInvokeResponse { return v.Description }).(ConditionInvokeResponsePtrOutput)
}

// filter alerts by monitor condition
func (o ConditionsInvokeResponseOutput) MonitorCondition() ConditionInvokeResponsePtrOutput {
	return o.ApplyT(func(v ConditionsInvokeResponse) *ConditionInvokeResponse { return v.MonitorCondition }).(ConditionInvokeResponsePtrOutput)
}

// filter alerts by monitor service
func (o ConditionsInvokeResponseOutput) MonitorService() ConditionInvokeResponsePtrOutput {
	return o.ApplyT(func(v ConditionsInvokeResponse) *ConditionInvokeResponse { return v.MonitorService }).(ConditionInvokeResponsePtrOutput)
}

// filter alerts by severity
func (o ConditionsInvokeResponseOutput) Severity() ConditionInvokeResponsePtrOutput {
	return o.ApplyT(func(v ConditionsInvokeResponse) *ConditionInvokeResponse { return v.Severity }).(ConditionInvokeResponsePtrOutput)
}

// filter alerts by target resource type
func (o ConditionsInvokeResponseOutput) TargetResourceType() ConditionInvokeResponsePtrOutput {
	return o.ApplyT(func(v ConditionsInvokeResponse) *ConditionInvokeResponse { return v.TargetResourceType }).(ConditionInvokeResponsePtrOutput)
}

type ConditionsInvokeResponsePtrOutput struct{ *pulumi.OutputState }

func (ConditionsInvokeResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ConditionsInvokeResponse)(nil)).Elem()
}

func (o ConditionsInvokeResponsePtrOutput) ToConditionsInvokeResponsePtrOutput() ConditionsInvokeResponsePtrOutput {
	return o
}

func (o ConditionsInvokeResponsePtrOutput) ToConditionsInvokeResponsePtrOutputWithContext(ctx context.Context) ConditionsInvokeResponsePtrOutput {
	return o
}

func (o ConditionsInvokeResponsePtrOutput) Elem() ConditionsInvokeResponseOutput {
	return o.ApplyT(func(v *ConditionsInvokeResponse) ConditionsInvokeResponse { return *v }).(ConditionsInvokeResponseOutput)
}

// filter alerts by alert context (payload)
func (o ConditionsInvokeResponsePtrOutput) AlertContext() ConditionInvokeResponsePtrOutput {
	return o.ApplyT(func(v *ConditionsInvokeResponse) *ConditionInvokeResponse {
		if v == nil {
			return nil
		}
		return v.AlertContext
	}).(ConditionInvokeResponsePtrOutput)
}

// filter alerts by alert rule id
func (o ConditionsInvokeResponsePtrOutput) AlertRuleId() ConditionInvokeResponsePtrOutput {
	return o.ApplyT(func(v *ConditionsInvokeResponse) *ConditionInvokeResponse {
		if v == nil {
			return nil
		}
		return v.AlertRuleId
	}).(ConditionInvokeResponsePtrOutput)
}

// filter alerts by alert rule description
func (o ConditionsInvokeResponsePtrOutput) Description() ConditionInvokeResponsePtrOutput {
	return o.ApplyT(func(v *ConditionsInvokeResponse) *ConditionInvokeResponse {
		if v == nil {
			return nil
		}
		return v.Description
	}).(ConditionInvokeResponsePtrOutput)
}

// filter alerts by monitor condition
func (o ConditionsInvokeResponsePtrOutput) MonitorCondition() ConditionInvokeResponsePtrOutput {
	return o.ApplyT(func(v *ConditionsInvokeResponse) *ConditionInvokeResponse {
		if v == nil {
			return nil
		}
		return v.MonitorCondition
	}).(ConditionInvokeResponsePtrOutput)
}

// filter alerts by monitor service
func (o ConditionsInvokeResponsePtrOutput) MonitorService() ConditionInvokeResponsePtrOutput {
	return o.ApplyT(func(v *ConditionsInvokeResponse) *ConditionInvokeResponse {
		if v == nil {
			return nil
		}
		return v.MonitorService
	}).(ConditionInvokeResponsePtrOutput)
}

// filter alerts by severity
func (o ConditionsInvokeResponsePtrOutput) Severity() ConditionInvokeResponsePtrOutput {
	return o.ApplyT(func(v *ConditionsInvokeResponse) *ConditionInvokeResponse {
		if v == nil {
			return nil
		}
		return v.Severity
	}).(ConditionInvokeResponsePtrOutput)
}

// filter alerts by target resource type
func (o ConditionsInvokeResponsePtrOutput) TargetResourceType() ConditionInvokeResponsePtrOutput {
	return o.ApplyT(func(v *ConditionsInvokeResponse) *ConditionInvokeResponse {
		if v == nil {
			return nil
		}
		return v.TargetResourceType
	}).(ConditionInvokeResponsePtrOutput)
}

// Conditions in alert instance to be matched for a given action rule. Default value is all. Multiple values could be provided with comma separation.
type ConditionsResponse struct {
	// filter alerts by alert context (payload)
	AlertContext *ConditionResponse `pulumi:"alertContext"`
	// filter alerts by alert rule id
	AlertRuleId *ConditionResponse `pulumi:"alertRuleId"`
	// filter alerts by alert rule description
	Description *ConditionResponse `pulumi:"description"`
	// filter alerts by monitor condition
	MonitorCondition *ConditionResponse `pulumi:"monitorCondition"`
	// filter alerts by monitor service
	MonitorService *ConditionResponse `pulumi:"monitorService"`
	// filter alerts by severity
	Severity *ConditionResponse `pulumi:"severity"`
	// filter alerts by target resource type
	TargetResourceType *ConditionResponse `pulumi:"targetResourceType"`
}

// ConditionsResponseInput is an input type that accepts ConditionsResponseArgs and ConditionsResponseOutput values.
// You can construct a concrete instance of `ConditionsResponseInput` via:
//
//          ConditionsResponseArgs{...}
type ConditionsResponseInput interface {
	pulumi.Input

	ToConditionsResponseOutput() ConditionsResponseOutput
	ToConditionsResponseOutputWithContext(context.Context) ConditionsResponseOutput
}

// Conditions in alert instance to be matched for a given action rule. Default value is all. Multiple values could be provided with comma separation.
type ConditionsResponseArgs struct {
	// filter alerts by alert context (payload)
	AlertContext ConditionResponsePtrInput `pulumi:"alertContext"`
	// filter alerts by alert rule id
	AlertRuleId ConditionResponsePtrInput `pulumi:"alertRuleId"`
	// filter alerts by alert rule description
	Description ConditionResponsePtrInput `pulumi:"description"`
	// filter alerts by monitor condition
	MonitorCondition ConditionResponsePtrInput `pulumi:"monitorCondition"`
	// filter alerts by monitor service
	MonitorService ConditionResponsePtrInput `pulumi:"monitorService"`
	// filter alerts by severity
	Severity ConditionResponsePtrInput `pulumi:"severity"`
	// filter alerts by target resource type
	TargetResourceType ConditionResponsePtrInput `pulumi:"targetResourceType"`
}

func (ConditionsResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ConditionsResponse)(nil)).Elem()
}

func (i ConditionsResponseArgs) ToConditionsResponseOutput() ConditionsResponseOutput {
	return i.ToConditionsResponseOutputWithContext(context.Background())
}

func (i ConditionsResponseArgs) ToConditionsResponseOutputWithContext(ctx context.Context) ConditionsResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConditionsResponseOutput)
}

func (i ConditionsResponseArgs) ToConditionsResponsePtrOutput() ConditionsResponsePtrOutput {
	return i.ToConditionsResponsePtrOutputWithContext(context.Background())
}

func (i ConditionsResponseArgs) ToConditionsResponsePtrOutputWithContext(ctx context.Context) ConditionsResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConditionsResponseOutput).ToConditionsResponsePtrOutputWithContext(ctx)
}

// ConditionsResponsePtrInput is an input type that accepts ConditionsResponseArgs, ConditionsResponsePtr and ConditionsResponsePtrOutput values.
// You can construct a concrete instance of `ConditionsResponsePtrInput` via:
//
//          ConditionsResponseArgs{...}
//
//  or:
//
//          nil
type ConditionsResponsePtrInput interface {
	pulumi.Input

	ToConditionsResponsePtrOutput() ConditionsResponsePtrOutput
	ToConditionsResponsePtrOutputWithContext(context.Context) ConditionsResponsePtrOutput
}

type conditionsResponsePtrType ConditionsResponseArgs

func ConditionsResponsePtr(v *ConditionsResponseArgs) ConditionsResponsePtrInput {
	return (*conditionsResponsePtrType)(v)
}

func (*conditionsResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ConditionsResponse)(nil)).Elem()
}

func (i *conditionsResponsePtrType) ToConditionsResponsePtrOutput() ConditionsResponsePtrOutput {
	return i.ToConditionsResponsePtrOutputWithContext(context.Background())
}

func (i *conditionsResponsePtrType) ToConditionsResponsePtrOutputWithContext(ctx context.Context) ConditionsResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConditionsResponsePtrOutput)
}

// Conditions in alert instance to be matched for a given action rule. Default value is all. Multiple values could be provided with comma separation.
type ConditionsResponseOutput struct{ *pulumi.OutputState }

func (ConditionsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConditionsResponse)(nil)).Elem()
}

func (o ConditionsResponseOutput) ToConditionsResponseOutput() ConditionsResponseOutput {
	return o
}

func (o ConditionsResponseOutput) ToConditionsResponseOutputWithContext(ctx context.Context) ConditionsResponseOutput {
	return o
}

func (o ConditionsResponseOutput) ToConditionsResponsePtrOutput() ConditionsResponsePtrOutput {
	return o.ToConditionsResponsePtrOutputWithContext(context.Background())
}

func (o ConditionsResponseOutput) ToConditionsResponsePtrOutputWithContext(ctx context.Context) ConditionsResponsePtrOutput {
	return o.ApplyT(func(v ConditionsResponse) *ConditionsResponse {
		return &v
	}).(ConditionsResponsePtrOutput)
}

// filter alerts by alert context (payload)
func (o ConditionsResponseOutput) AlertContext() ConditionResponsePtrOutput {
	return o.ApplyT(func(v ConditionsResponse) *ConditionResponse { return v.AlertContext }).(ConditionResponsePtrOutput)
}

// filter alerts by alert rule id
func (o ConditionsResponseOutput) AlertRuleId() ConditionResponsePtrOutput {
	return o.ApplyT(func(v ConditionsResponse) *ConditionResponse { return v.AlertRuleId }).(ConditionResponsePtrOutput)
}

// filter alerts by alert rule description
func (o ConditionsResponseOutput) Description() ConditionResponsePtrOutput {
	return o.ApplyT(func(v ConditionsResponse) *ConditionResponse { return v.Description }).(ConditionResponsePtrOutput)
}

// filter alerts by monitor condition
func (o ConditionsResponseOutput) MonitorCondition() ConditionResponsePtrOutput {
	return o.ApplyT(func(v ConditionsResponse) *ConditionResponse { return v.MonitorCondition }).(ConditionResponsePtrOutput)
}

// filter alerts by monitor service
func (o ConditionsResponseOutput) MonitorService() ConditionResponsePtrOutput {
	return o.ApplyT(func(v ConditionsResponse) *ConditionResponse { return v.MonitorService }).(ConditionResponsePtrOutput)
}

// filter alerts by severity
func (o ConditionsResponseOutput) Severity() ConditionResponsePtrOutput {
	return o.ApplyT(func(v ConditionsResponse) *ConditionResponse { return v.Severity }).(ConditionResponsePtrOutput)
}

// filter alerts by target resource type
func (o ConditionsResponseOutput) TargetResourceType() ConditionResponsePtrOutput {
	return o.ApplyT(func(v ConditionsResponse) *ConditionResponse { return v.TargetResourceType }).(ConditionResponsePtrOutput)
}

type ConditionsResponsePtrOutput struct{ *pulumi.OutputState }

func (ConditionsResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ConditionsResponse)(nil)).Elem()
}

func (o ConditionsResponsePtrOutput) ToConditionsResponsePtrOutput() ConditionsResponsePtrOutput {
	return o
}

func (o ConditionsResponsePtrOutput) ToConditionsResponsePtrOutputWithContext(ctx context.Context) ConditionsResponsePtrOutput {
	return o
}

func (o ConditionsResponsePtrOutput) Elem() ConditionsResponseOutput {
	return o.ApplyT(func(v *ConditionsResponse) ConditionsResponse { return *v }).(ConditionsResponseOutput)
}

// filter alerts by alert context (payload)
func (o ConditionsResponsePtrOutput) AlertContext() ConditionResponsePtrOutput {
	return o.ApplyT(func(v *ConditionsResponse) *ConditionResponse {
		if v == nil {
			return nil
		}
		return v.AlertContext
	}).(ConditionResponsePtrOutput)
}

// filter alerts by alert rule id
func (o ConditionsResponsePtrOutput) AlertRuleId() ConditionResponsePtrOutput {
	return o.ApplyT(func(v *ConditionsResponse) *ConditionResponse {
		if v == nil {
			return nil
		}
		return v.AlertRuleId
	}).(ConditionResponsePtrOutput)
}

// filter alerts by alert rule description
func (o ConditionsResponsePtrOutput) Description() ConditionResponsePtrOutput {
	return o.ApplyT(func(v *ConditionsResponse) *ConditionResponse {
		if v == nil {
			return nil
		}
		return v.Description
	}).(ConditionResponsePtrOutput)
}

// filter alerts by monitor condition
func (o ConditionsResponsePtrOutput) MonitorCondition() ConditionResponsePtrOutput {
	return o.ApplyT(func(v *ConditionsResponse) *ConditionResponse {
		if v == nil {
			return nil
		}
		return v.MonitorCondition
	}).(ConditionResponsePtrOutput)
}

// filter alerts by monitor service
func (o ConditionsResponsePtrOutput) MonitorService() ConditionResponsePtrOutput {
	return o.ApplyT(func(v *ConditionsResponse) *ConditionResponse {
		if v == nil {
			return nil
		}
		return v.MonitorService
	}).(ConditionResponsePtrOutput)
}

// filter alerts by severity
func (o ConditionsResponsePtrOutput) Severity() ConditionResponsePtrOutput {
	return o.ApplyT(func(v *ConditionsResponse) *ConditionResponse {
		if v == nil {
			return nil
		}
		return v.Severity
	}).(ConditionResponsePtrOutput)
}

// filter alerts by target resource type
func (o ConditionsResponsePtrOutput) TargetResourceType() ConditionResponsePtrOutput {
	return o.ApplyT(func(v *ConditionsResponse) *ConditionResponse {
		if v == nil {
			return nil
		}
		return v.TargetResourceType
	}).(ConditionResponsePtrOutput)
}

// Action rule with diagnostics configuration
type Diagnostics struct {
	// conditions on which alerts will be filtered
	Conditions *Conditions `pulumi:"conditions"`
	// Description of action rule
	Description *string `pulumi:"description"`
	// scope on which action rule will apply
	Scope *Scope `pulumi:"scope"`
	// Indicates if the given action rule is enabled or disabled
	Status *string `pulumi:"status"`
	// Indicates type of action rule
	// Expected value is 'Diagnostics'.
	Type string `pulumi:"type"`
}

// DiagnosticsInput is an input type that accepts DiagnosticsArgs and DiagnosticsOutput values.
// You can construct a concrete instance of `DiagnosticsInput` via:
//
//          DiagnosticsArgs{...}
type DiagnosticsInput interface {
	pulumi.Input

	ToDiagnosticsOutput() DiagnosticsOutput
	ToDiagnosticsOutputWithContext(context.Context) DiagnosticsOutput
}

// Action rule with diagnostics configuration
type DiagnosticsArgs struct {
	// conditions on which alerts will be filtered
	Conditions ConditionsPtrInput `pulumi:"conditions"`
	// Description of action rule
	Description pulumi.StringPtrInput `pulumi:"description"`
	// scope on which action rule will apply
	Scope ScopePtrInput `pulumi:"scope"`
	// Indicates if the given action rule is enabled or disabled
	Status pulumi.StringPtrInput `pulumi:"status"`
	// Indicates type of action rule
	// Expected value is 'Diagnostics'.
	Type pulumi.StringInput `pulumi:"type"`
}

func (DiagnosticsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Diagnostics)(nil)).Elem()
}

func (i DiagnosticsArgs) ToDiagnosticsOutput() DiagnosticsOutput {
	return i.ToDiagnosticsOutputWithContext(context.Background())
}

func (i DiagnosticsArgs) ToDiagnosticsOutputWithContext(ctx context.Context) DiagnosticsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DiagnosticsOutput)
}

// Action rule with diagnostics configuration
type DiagnosticsOutput struct{ *pulumi.OutputState }

func (DiagnosticsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Diagnostics)(nil)).Elem()
}

func (o DiagnosticsOutput) ToDiagnosticsOutput() DiagnosticsOutput {
	return o
}

func (o DiagnosticsOutput) ToDiagnosticsOutputWithContext(ctx context.Context) DiagnosticsOutput {
	return o
}

// conditions on which alerts will be filtered
func (o DiagnosticsOutput) Conditions() ConditionsPtrOutput {
	return o.ApplyT(func(v Diagnostics) *Conditions { return v.Conditions }).(ConditionsPtrOutput)
}

// Description of action rule
func (o DiagnosticsOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Diagnostics) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// scope on which action rule will apply
func (o DiagnosticsOutput) Scope() ScopePtrOutput {
	return o.ApplyT(func(v Diagnostics) *Scope { return v.Scope }).(ScopePtrOutput)
}

// Indicates if the given action rule is enabled or disabled
func (o DiagnosticsOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Diagnostics) *string { return v.Status }).(pulumi.StringPtrOutput)
}

// Indicates type of action rule
// Expected value is 'Diagnostics'.
func (o DiagnosticsOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v Diagnostics) string { return v.Type }).(pulumi.StringOutput)
}

// Action rule with diagnostics configuration
type DiagnosticsInvokeResponse struct {
	// conditions on which alerts will be filtered
	Conditions *ConditionsInvokeResponse `pulumi:"conditions"`
	// Creation time of action rule. Date-Time in ISO-8601 format.
	CreatedAt string `pulumi:"createdAt"`
	// Created by user name.
	CreatedBy string `pulumi:"createdBy"`
	// Description of action rule
	Description *string `pulumi:"description"`
	// Last updated time of action rule. Date-Time in ISO-8601 format.
	LastModifiedAt string `pulumi:"lastModifiedAt"`
	// Last modified by user name.
	LastModifiedBy string `pulumi:"lastModifiedBy"`
	// scope on which action rule will apply
	Scope *ScopeInvokeResponse `pulumi:"scope"`
	// Indicates if the given action rule is enabled or disabled
	Status *string `pulumi:"status"`
	// Indicates type of action rule
	// Expected value is 'Diagnostics'.
	Type string `pulumi:"type"`
}

// DiagnosticsInvokeResponseInput is an input type that accepts DiagnosticsInvokeResponseArgs and DiagnosticsInvokeResponseOutput values.
// You can construct a concrete instance of `DiagnosticsInvokeResponseInput` via:
//
//          DiagnosticsInvokeResponseArgs{...}
type DiagnosticsInvokeResponseInput interface {
	pulumi.Input

	ToDiagnosticsInvokeResponseOutput() DiagnosticsInvokeResponseOutput
	ToDiagnosticsInvokeResponseOutputWithContext(context.Context) DiagnosticsInvokeResponseOutput
}

// Action rule with diagnostics configuration
type DiagnosticsInvokeResponseArgs struct {
	// conditions on which alerts will be filtered
	Conditions ConditionsInvokeResponsePtrInput `pulumi:"conditions"`
	// Creation time of action rule. Date-Time in ISO-8601 format.
	CreatedAt pulumi.StringInput `pulumi:"createdAt"`
	// Created by user name.
	CreatedBy pulumi.StringInput `pulumi:"createdBy"`
	// Description of action rule
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Last updated time of action rule. Date-Time in ISO-8601 format.
	LastModifiedAt pulumi.StringInput `pulumi:"lastModifiedAt"`
	// Last modified by user name.
	LastModifiedBy pulumi.StringInput `pulumi:"lastModifiedBy"`
	// scope on which action rule will apply
	Scope ScopeInvokeResponsePtrInput `pulumi:"scope"`
	// Indicates if the given action rule is enabled or disabled
	Status pulumi.StringPtrInput `pulumi:"status"`
	// Indicates type of action rule
	// Expected value is 'Diagnostics'.
	Type pulumi.StringInput `pulumi:"type"`
}

func (DiagnosticsInvokeResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DiagnosticsInvokeResponse)(nil)).Elem()
}

func (i DiagnosticsInvokeResponseArgs) ToDiagnosticsInvokeResponseOutput() DiagnosticsInvokeResponseOutput {
	return i.ToDiagnosticsInvokeResponseOutputWithContext(context.Background())
}

func (i DiagnosticsInvokeResponseArgs) ToDiagnosticsInvokeResponseOutputWithContext(ctx context.Context) DiagnosticsInvokeResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DiagnosticsInvokeResponseOutput)
}

// Action rule with diagnostics configuration
type DiagnosticsInvokeResponseOutput struct{ *pulumi.OutputState }

func (DiagnosticsInvokeResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DiagnosticsInvokeResponse)(nil)).Elem()
}

func (o DiagnosticsInvokeResponseOutput) ToDiagnosticsInvokeResponseOutput() DiagnosticsInvokeResponseOutput {
	return o
}

func (o DiagnosticsInvokeResponseOutput) ToDiagnosticsInvokeResponseOutputWithContext(ctx context.Context) DiagnosticsInvokeResponseOutput {
	return o
}

// conditions on which alerts will be filtered
func (o DiagnosticsInvokeResponseOutput) Conditions() ConditionsInvokeResponsePtrOutput {
	return o.ApplyT(func(v DiagnosticsInvokeResponse) *ConditionsInvokeResponse { return v.Conditions }).(ConditionsInvokeResponsePtrOutput)
}

// Creation time of action rule. Date-Time in ISO-8601 format.
func (o DiagnosticsInvokeResponseOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v DiagnosticsInvokeResponse) string { return v.CreatedAt }).(pulumi.StringOutput)
}

// Created by user name.
func (o DiagnosticsInvokeResponseOutput) CreatedBy() pulumi.StringOutput {
	return o.ApplyT(func(v DiagnosticsInvokeResponse) string { return v.CreatedBy }).(pulumi.StringOutput)
}

// Description of action rule
func (o DiagnosticsInvokeResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DiagnosticsInvokeResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Last updated time of action rule. Date-Time in ISO-8601 format.
func (o DiagnosticsInvokeResponseOutput) LastModifiedAt() pulumi.StringOutput {
	return o.ApplyT(func(v DiagnosticsInvokeResponse) string { return v.LastModifiedAt }).(pulumi.StringOutput)
}

// Last modified by user name.
func (o DiagnosticsInvokeResponseOutput) LastModifiedBy() pulumi.StringOutput {
	return o.ApplyT(func(v DiagnosticsInvokeResponse) string { return v.LastModifiedBy }).(pulumi.StringOutput)
}

// scope on which action rule will apply
func (o DiagnosticsInvokeResponseOutput) Scope() ScopeInvokeResponsePtrOutput {
	return o.ApplyT(func(v DiagnosticsInvokeResponse) *ScopeInvokeResponse { return v.Scope }).(ScopeInvokeResponsePtrOutput)
}

// Indicates if the given action rule is enabled or disabled
func (o DiagnosticsInvokeResponseOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DiagnosticsInvokeResponse) *string { return v.Status }).(pulumi.StringPtrOutput)
}

// Indicates type of action rule
// Expected value is 'Diagnostics'.
func (o DiagnosticsInvokeResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v DiagnosticsInvokeResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Action rule with diagnostics configuration
type DiagnosticsResponse struct {
	// conditions on which alerts will be filtered
	Conditions *ConditionsResponse `pulumi:"conditions"`
	// Creation time of action rule. Date-Time in ISO-8601 format.
	CreatedAt string `pulumi:"createdAt"`
	// Created by user name.
	CreatedBy string `pulumi:"createdBy"`
	// Description of action rule
	Description *string `pulumi:"description"`
	// Last updated time of action rule. Date-Time in ISO-8601 format.
	LastModifiedAt string `pulumi:"lastModifiedAt"`
	// Last modified by user name.
	LastModifiedBy string `pulumi:"lastModifiedBy"`
	// scope on which action rule will apply
	Scope *ScopeResponse `pulumi:"scope"`
	// Indicates if the given action rule is enabled or disabled
	Status *string `pulumi:"status"`
	// Indicates type of action rule
	// Expected value is 'Diagnostics'.
	Type string `pulumi:"type"`
}

// DiagnosticsResponseInput is an input type that accepts DiagnosticsResponseArgs and DiagnosticsResponseOutput values.
// You can construct a concrete instance of `DiagnosticsResponseInput` via:
//
//          DiagnosticsResponseArgs{...}
type DiagnosticsResponseInput interface {
	pulumi.Input

	ToDiagnosticsResponseOutput() DiagnosticsResponseOutput
	ToDiagnosticsResponseOutputWithContext(context.Context) DiagnosticsResponseOutput
}

// Action rule with diagnostics configuration
type DiagnosticsResponseArgs struct {
	// conditions on which alerts will be filtered
	Conditions ConditionsResponsePtrInput `pulumi:"conditions"`
	// Creation time of action rule. Date-Time in ISO-8601 format.
	CreatedAt pulumi.StringInput `pulumi:"createdAt"`
	// Created by user name.
	CreatedBy pulumi.StringInput `pulumi:"createdBy"`
	// Description of action rule
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Last updated time of action rule. Date-Time in ISO-8601 format.
	LastModifiedAt pulumi.StringInput `pulumi:"lastModifiedAt"`
	// Last modified by user name.
	LastModifiedBy pulumi.StringInput `pulumi:"lastModifiedBy"`
	// scope on which action rule will apply
	Scope ScopeResponsePtrInput `pulumi:"scope"`
	// Indicates if the given action rule is enabled or disabled
	Status pulumi.StringPtrInput `pulumi:"status"`
	// Indicates type of action rule
	// Expected value is 'Diagnostics'.
	Type pulumi.StringInput `pulumi:"type"`
}

func (DiagnosticsResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DiagnosticsResponse)(nil)).Elem()
}

func (i DiagnosticsResponseArgs) ToDiagnosticsResponseOutput() DiagnosticsResponseOutput {
	return i.ToDiagnosticsResponseOutputWithContext(context.Background())
}

func (i DiagnosticsResponseArgs) ToDiagnosticsResponseOutputWithContext(ctx context.Context) DiagnosticsResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DiagnosticsResponseOutput)
}

// Action rule with diagnostics configuration
type DiagnosticsResponseOutput struct{ *pulumi.OutputState }

func (DiagnosticsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DiagnosticsResponse)(nil)).Elem()
}

func (o DiagnosticsResponseOutput) ToDiagnosticsResponseOutput() DiagnosticsResponseOutput {
	return o
}

func (o DiagnosticsResponseOutput) ToDiagnosticsResponseOutputWithContext(ctx context.Context) DiagnosticsResponseOutput {
	return o
}

// conditions on which alerts will be filtered
func (o DiagnosticsResponseOutput) Conditions() ConditionsResponsePtrOutput {
	return o.ApplyT(func(v DiagnosticsResponse) *ConditionsResponse { return v.Conditions }).(ConditionsResponsePtrOutput)
}

// Creation time of action rule. Date-Time in ISO-8601 format.
func (o DiagnosticsResponseOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v DiagnosticsResponse) string { return v.CreatedAt }).(pulumi.StringOutput)
}

// Created by user name.
func (o DiagnosticsResponseOutput) CreatedBy() pulumi.StringOutput {
	return o.ApplyT(func(v DiagnosticsResponse) string { return v.CreatedBy }).(pulumi.StringOutput)
}

// Description of action rule
func (o DiagnosticsResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DiagnosticsResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Last updated time of action rule. Date-Time in ISO-8601 format.
func (o DiagnosticsResponseOutput) LastModifiedAt() pulumi.StringOutput {
	return o.ApplyT(func(v DiagnosticsResponse) string { return v.LastModifiedAt }).(pulumi.StringOutput)
}

// Last modified by user name.
func (o DiagnosticsResponseOutput) LastModifiedBy() pulumi.StringOutput {
	return o.ApplyT(func(v DiagnosticsResponse) string { return v.LastModifiedBy }).(pulumi.StringOutput)
}

// scope on which action rule will apply
func (o DiagnosticsResponseOutput) Scope() ScopeResponsePtrOutput {
	return o.ApplyT(func(v DiagnosticsResponse) *ScopeResponse { return v.Scope }).(ScopeResponsePtrOutput)
}

// Indicates if the given action rule is enabled or disabled
func (o DiagnosticsResponseOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DiagnosticsResponse) *string { return v.Status }).(pulumi.StringPtrOutput)
}

// Indicates type of action rule
// Expected value is 'Diagnostics'.
func (o DiagnosticsResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v DiagnosticsResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Target scope for a given action rule. By default scope will be the subscription. User can also provide list of resource groups or list of resources from the scope subscription as well.
type Scope struct {
	// type of target scope
	ScopeType *string `pulumi:"scopeType"`
	// list of ARM IDs of the given scope type which will be the target of the given action rule.
	Values []string `pulumi:"values"`
}

// ScopeInput is an input type that accepts ScopeArgs and ScopeOutput values.
// You can construct a concrete instance of `ScopeInput` via:
//
//          ScopeArgs{...}
type ScopeInput interface {
	pulumi.Input

	ToScopeOutput() ScopeOutput
	ToScopeOutputWithContext(context.Context) ScopeOutput
}

// Target scope for a given action rule. By default scope will be the subscription. User can also provide list of resource groups or list of resources from the scope subscription as well.
type ScopeArgs struct {
	// type of target scope
	ScopeType pulumi.StringPtrInput `pulumi:"scopeType"`
	// list of ARM IDs of the given scope type which will be the target of the given action rule.
	Values pulumi.StringArrayInput `pulumi:"values"`
}

func (ScopeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Scope)(nil)).Elem()
}

func (i ScopeArgs) ToScopeOutput() ScopeOutput {
	return i.ToScopeOutputWithContext(context.Background())
}

func (i ScopeArgs) ToScopeOutputWithContext(ctx context.Context) ScopeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScopeOutput)
}

func (i ScopeArgs) ToScopePtrOutput() ScopePtrOutput {
	return i.ToScopePtrOutputWithContext(context.Background())
}

func (i ScopeArgs) ToScopePtrOutputWithContext(ctx context.Context) ScopePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScopeOutput).ToScopePtrOutputWithContext(ctx)
}

// ScopePtrInput is an input type that accepts ScopeArgs, ScopePtr and ScopePtrOutput values.
// You can construct a concrete instance of `ScopePtrInput` via:
//
//          ScopeArgs{...}
//
//  or:
//
//          nil
type ScopePtrInput interface {
	pulumi.Input

	ToScopePtrOutput() ScopePtrOutput
	ToScopePtrOutputWithContext(context.Context) ScopePtrOutput
}

type scopePtrType ScopeArgs

func ScopePtr(v *ScopeArgs) ScopePtrInput {
	return (*scopePtrType)(v)
}

func (*scopePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Scope)(nil)).Elem()
}

func (i *scopePtrType) ToScopePtrOutput() ScopePtrOutput {
	return i.ToScopePtrOutputWithContext(context.Background())
}

func (i *scopePtrType) ToScopePtrOutputWithContext(ctx context.Context) ScopePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScopePtrOutput)
}

// Target scope for a given action rule. By default scope will be the subscription. User can also provide list of resource groups or list of resources from the scope subscription as well.
type ScopeOutput struct{ *pulumi.OutputState }

func (ScopeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Scope)(nil)).Elem()
}

func (o ScopeOutput) ToScopeOutput() ScopeOutput {
	return o
}

func (o ScopeOutput) ToScopeOutputWithContext(ctx context.Context) ScopeOutput {
	return o
}

func (o ScopeOutput) ToScopePtrOutput() ScopePtrOutput {
	return o.ToScopePtrOutputWithContext(context.Background())
}

func (o ScopeOutput) ToScopePtrOutputWithContext(ctx context.Context) ScopePtrOutput {
	return o.ApplyT(func(v Scope) *Scope {
		return &v
	}).(ScopePtrOutput)
}

// type of target scope
func (o ScopeOutput) ScopeType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Scope) *string { return v.ScopeType }).(pulumi.StringPtrOutput)
}

// list of ARM IDs of the given scope type which will be the target of the given action rule.
func (o ScopeOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v Scope) []string { return v.Values }).(pulumi.StringArrayOutput)
}

type ScopePtrOutput struct{ *pulumi.OutputState }

func (ScopePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Scope)(nil)).Elem()
}

func (o ScopePtrOutput) ToScopePtrOutput() ScopePtrOutput {
	return o
}

func (o ScopePtrOutput) ToScopePtrOutputWithContext(ctx context.Context) ScopePtrOutput {
	return o
}

func (o ScopePtrOutput) Elem() ScopeOutput {
	return o.ApplyT(func(v *Scope) Scope { return *v }).(ScopeOutput)
}

// type of target scope
func (o ScopePtrOutput) ScopeType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Scope) *string {
		if v == nil {
			return nil
		}
		return v.ScopeType
	}).(pulumi.StringPtrOutput)
}

// list of ARM IDs of the given scope type which will be the target of the given action rule.
func (o ScopePtrOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Scope) []string {
		if v == nil {
			return nil
		}
		return v.Values
	}).(pulumi.StringArrayOutput)
}

// Target scope for a given action rule. By default scope will be the subscription. User can also provide list of resource groups or list of resources from the scope subscription as well.
type ScopeInvokeResponse struct {
	// type of target scope
	ScopeType *string `pulumi:"scopeType"`
	// list of ARM IDs of the given scope type which will be the target of the given action rule.
	Values []string `pulumi:"values"`
}

// ScopeInvokeResponseInput is an input type that accepts ScopeInvokeResponseArgs and ScopeInvokeResponseOutput values.
// You can construct a concrete instance of `ScopeInvokeResponseInput` via:
//
//          ScopeInvokeResponseArgs{...}
type ScopeInvokeResponseInput interface {
	pulumi.Input

	ToScopeInvokeResponseOutput() ScopeInvokeResponseOutput
	ToScopeInvokeResponseOutputWithContext(context.Context) ScopeInvokeResponseOutput
}

// Target scope for a given action rule. By default scope will be the subscription. User can also provide list of resource groups or list of resources from the scope subscription as well.
type ScopeInvokeResponseArgs struct {
	// type of target scope
	ScopeType pulumi.StringPtrInput `pulumi:"scopeType"`
	// list of ARM IDs of the given scope type which will be the target of the given action rule.
	Values pulumi.StringArrayInput `pulumi:"values"`
}

func (ScopeInvokeResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ScopeInvokeResponse)(nil)).Elem()
}

func (i ScopeInvokeResponseArgs) ToScopeInvokeResponseOutput() ScopeInvokeResponseOutput {
	return i.ToScopeInvokeResponseOutputWithContext(context.Background())
}

func (i ScopeInvokeResponseArgs) ToScopeInvokeResponseOutputWithContext(ctx context.Context) ScopeInvokeResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScopeInvokeResponseOutput)
}

func (i ScopeInvokeResponseArgs) ToScopeInvokeResponsePtrOutput() ScopeInvokeResponsePtrOutput {
	return i.ToScopeInvokeResponsePtrOutputWithContext(context.Background())
}

func (i ScopeInvokeResponseArgs) ToScopeInvokeResponsePtrOutputWithContext(ctx context.Context) ScopeInvokeResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScopeInvokeResponseOutput).ToScopeInvokeResponsePtrOutputWithContext(ctx)
}

// ScopeInvokeResponsePtrInput is an input type that accepts ScopeInvokeResponseArgs, ScopeInvokeResponsePtr and ScopeInvokeResponsePtrOutput values.
// You can construct a concrete instance of `ScopeInvokeResponsePtrInput` via:
//
//          ScopeInvokeResponseArgs{...}
//
//  or:
//
//          nil
type ScopeInvokeResponsePtrInput interface {
	pulumi.Input

	ToScopeInvokeResponsePtrOutput() ScopeInvokeResponsePtrOutput
	ToScopeInvokeResponsePtrOutputWithContext(context.Context) ScopeInvokeResponsePtrOutput
}

type scopeInvokeResponsePtrType ScopeInvokeResponseArgs

func ScopeInvokeResponsePtr(v *ScopeInvokeResponseArgs) ScopeInvokeResponsePtrInput {
	return (*scopeInvokeResponsePtrType)(v)
}

func (*scopeInvokeResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ScopeInvokeResponse)(nil)).Elem()
}

func (i *scopeInvokeResponsePtrType) ToScopeInvokeResponsePtrOutput() ScopeInvokeResponsePtrOutput {
	return i.ToScopeInvokeResponsePtrOutputWithContext(context.Background())
}

func (i *scopeInvokeResponsePtrType) ToScopeInvokeResponsePtrOutputWithContext(ctx context.Context) ScopeInvokeResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScopeInvokeResponsePtrOutput)
}

// Target scope for a given action rule. By default scope will be the subscription. User can also provide list of resource groups or list of resources from the scope subscription as well.
type ScopeInvokeResponseOutput struct{ *pulumi.OutputState }

func (ScopeInvokeResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ScopeInvokeResponse)(nil)).Elem()
}

func (o ScopeInvokeResponseOutput) ToScopeInvokeResponseOutput() ScopeInvokeResponseOutput {
	return o
}

func (o ScopeInvokeResponseOutput) ToScopeInvokeResponseOutputWithContext(ctx context.Context) ScopeInvokeResponseOutput {
	return o
}

func (o ScopeInvokeResponseOutput) ToScopeInvokeResponsePtrOutput() ScopeInvokeResponsePtrOutput {
	return o.ToScopeInvokeResponsePtrOutputWithContext(context.Background())
}

func (o ScopeInvokeResponseOutput) ToScopeInvokeResponsePtrOutputWithContext(ctx context.Context) ScopeInvokeResponsePtrOutput {
	return o.ApplyT(func(v ScopeInvokeResponse) *ScopeInvokeResponse {
		return &v
	}).(ScopeInvokeResponsePtrOutput)
}

// type of target scope
func (o ScopeInvokeResponseOutput) ScopeType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ScopeInvokeResponse) *string { return v.ScopeType }).(pulumi.StringPtrOutput)
}

// list of ARM IDs of the given scope type which will be the target of the given action rule.
func (o ScopeInvokeResponseOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ScopeInvokeResponse) []string { return v.Values }).(pulumi.StringArrayOutput)
}

type ScopeInvokeResponsePtrOutput struct{ *pulumi.OutputState }

func (ScopeInvokeResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ScopeInvokeResponse)(nil)).Elem()
}

func (o ScopeInvokeResponsePtrOutput) ToScopeInvokeResponsePtrOutput() ScopeInvokeResponsePtrOutput {
	return o
}

func (o ScopeInvokeResponsePtrOutput) ToScopeInvokeResponsePtrOutputWithContext(ctx context.Context) ScopeInvokeResponsePtrOutput {
	return o
}

func (o ScopeInvokeResponsePtrOutput) Elem() ScopeInvokeResponseOutput {
	return o.ApplyT(func(v *ScopeInvokeResponse) ScopeInvokeResponse { return *v }).(ScopeInvokeResponseOutput)
}

// type of target scope
func (o ScopeInvokeResponsePtrOutput) ScopeType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ScopeInvokeResponse) *string {
		if v == nil {
			return nil
		}
		return v.ScopeType
	}).(pulumi.StringPtrOutput)
}

// list of ARM IDs of the given scope type which will be the target of the given action rule.
func (o ScopeInvokeResponsePtrOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ScopeInvokeResponse) []string {
		if v == nil {
			return nil
		}
		return v.Values
	}).(pulumi.StringArrayOutput)
}

// Target scope for a given action rule. By default scope will be the subscription. User can also provide list of resource groups or list of resources from the scope subscription as well.
type ScopeResponse struct {
	// type of target scope
	ScopeType *string `pulumi:"scopeType"`
	// list of ARM IDs of the given scope type which will be the target of the given action rule.
	Values []string `pulumi:"values"`
}

// ScopeResponseInput is an input type that accepts ScopeResponseArgs and ScopeResponseOutput values.
// You can construct a concrete instance of `ScopeResponseInput` via:
//
//          ScopeResponseArgs{...}
type ScopeResponseInput interface {
	pulumi.Input

	ToScopeResponseOutput() ScopeResponseOutput
	ToScopeResponseOutputWithContext(context.Context) ScopeResponseOutput
}

// Target scope for a given action rule. By default scope will be the subscription. User can also provide list of resource groups or list of resources from the scope subscription as well.
type ScopeResponseArgs struct {
	// type of target scope
	ScopeType pulumi.StringPtrInput `pulumi:"scopeType"`
	// list of ARM IDs of the given scope type which will be the target of the given action rule.
	Values pulumi.StringArrayInput `pulumi:"values"`
}

func (ScopeResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ScopeResponse)(nil)).Elem()
}

func (i ScopeResponseArgs) ToScopeResponseOutput() ScopeResponseOutput {
	return i.ToScopeResponseOutputWithContext(context.Background())
}

func (i ScopeResponseArgs) ToScopeResponseOutputWithContext(ctx context.Context) ScopeResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScopeResponseOutput)
}

func (i ScopeResponseArgs) ToScopeResponsePtrOutput() ScopeResponsePtrOutput {
	return i.ToScopeResponsePtrOutputWithContext(context.Background())
}

func (i ScopeResponseArgs) ToScopeResponsePtrOutputWithContext(ctx context.Context) ScopeResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScopeResponseOutput).ToScopeResponsePtrOutputWithContext(ctx)
}

// ScopeResponsePtrInput is an input type that accepts ScopeResponseArgs, ScopeResponsePtr and ScopeResponsePtrOutput values.
// You can construct a concrete instance of `ScopeResponsePtrInput` via:
//
//          ScopeResponseArgs{...}
//
//  or:
//
//          nil
type ScopeResponsePtrInput interface {
	pulumi.Input

	ToScopeResponsePtrOutput() ScopeResponsePtrOutput
	ToScopeResponsePtrOutputWithContext(context.Context) ScopeResponsePtrOutput
}

type scopeResponsePtrType ScopeResponseArgs

func ScopeResponsePtr(v *ScopeResponseArgs) ScopeResponsePtrInput {
	return (*scopeResponsePtrType)(v)
}

func (*scopeResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ScopeResponse)(nil)).Elem()
}

func (i *scopeResponsePtrType) ToScopeResponsePtrOutput() ScopeResponsePtrOutput {
	return i.ToScopeResponsePtrOutputWithContext(context.Background())
}

func (i *scopeResponsePtrType) ToScopeResponsePtrOutputWithContext(ctx context.Context) ScopeResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScopeResponsePtrOutput)
}

// Target scope for a given action rule. By default scope will be the subscription. User can also provide list of resource groups or list of resources from the scope subscription as well.
type ScopeResponseOutput struct{ *pulumi.OutputState }

func (ScopeResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ScopeResponse)(nil)).Elem()
}

func (o ScopeResponseOutput) ToScopeResponseOutput() ScopeResponseOutput {
	return o
}

func (o ScopeResponseOutput) ToScopeResponseOutputWithContext(ctx context.Context) ScopeResponseOutput {
	return o
}

func (o ScopeResponseOutput) ToScopeResponsePtrOutput() ScopeResponsePtrOutput {
	return o.ToScopeResponsePtrOutputWithContext(context.Background())
}

func (o ScopeResponseOutput) ToScopeResponsePtrOutputWithContext(ctx context.Context) ScopeResponsePtrOutput {
	return o.ApplyT(func(v ScopeResponse) *ScopeResponse {
		return &v
	}).(ScopeResponsePtrOutput)
}

// type of target scope
func (o ScopeResponseOutput) ScopeType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ScopeResponse) *string { return v.ScopeType }).(pulumi.StringPtrOutput)
}

// list of ARM IDs of the given scope type which will be the target of the given action rule.
func (o ScopeResponseOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ScopeResponse) []string { return v.Values }).(pulumi.StringArrayOutput)
}

type ScopeResponsePtrOutput struct{ *pulumi.OutputState }

func (ScopeResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ScopeResponse)(nil)).Elem()
}

func (o ScopeResponsePtrOutput) ToScopeResponsePtrOutput() ScopeResponsePtrOutput {
	return o
}

func (o ScopeResponsePtrOutput) ToScopeResponsePtrOutputWithContext(ctx context.Context) ScopeResponsePtrOutput {
	return o
}

func (o ScopeResponsePtrOutput) Elem() ScopeResponseOutput {
	return o.ApplyT(func(v *ScopeResponse) ScopeResponse { return *v }).(ScopeResponseOutput)
}

// type of target scope
func (o ScopeResponsePtrOutput) ScopeType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ScopeResponse) *string {
		if v == nil {
			return nil
		}
		return v.ScopeType
	}).(pulumi.StringPtrOutput)
}

// list of ARM IDs of the given scope type which will be the target of the given action rule.
func (o ScopeResponsePtrOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ScopeResponse) []string {
		if v == nil {
			return nil
		}
		return v.Values
	}).(pulumi.StringArrayOutput)
}

// Action rule with suppression configuration
type Suppression struct {
	// conditions on which alerts will be filtered
	Conditions *Conditions `pulumi:"conditions"`
	// Description of action rule
	Description *string `pulumi:"description"`
	// scope on which action rule will apply
	Scope *Scope `pulumi:"scope"`
	// Indicates if the given action rule is enabled or disabled
	Status *string `pulumi:"status"`
	// suppression configuration for the action rule
	SuppressionConfig SuppressionConfig `pulumi:"suppressionConfig"`
	// Indicates type of action rule
	// Expected value is 'Suppression'.
	Type string `pulumi:"type"`
}

// SuppressionInput is an input type that accepts SuppressionArgs and SuppressionOutput values.
// You can construct a concrete instance of `SuppressionInput` via:
//
//          SuppressionArgs{...}
type SuppressionInput interface {
	pulumi.Input

	ToSuppressionOutput() SuppressionOutput
	ToSuppressionOutputWithContext(context.Context) SuppressionOutput
}

// Action rule with suppression configuration
type SuppressionArgs struct {
	// conditions on which alerts will be filtered
	Conditions ConditionsPtrInput `pulumi:"conditions"`
	// Description of action rule
	Description pulumi.StringPtrInput `pulumi:"description"`
	// scope on which action rule will apply
	Scope ScopePtrInput `pulumi:"scope"`
	// Indicates if the given action rule is enabled or disabled
	Status pulumi.StringPtrInput `pulumi:"status"`
	// suppression configuration for the action rule
	SuppressionConfig SuppressionConfigInput `pulumi:"suppressionConfig"`
	// Indicates type of action rule
	// Expected value is 'Suppression'.
	Type pulumi.StringInput `pulumi:"type"`
}

func (SuppressionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Suppression)(nil)).Elem()
}

func (i SuppressionArgs) ToSuppressionOutput() SuppressionOutput {
	return i.ToSuppressionOutputWithContext(context.Background())
}

func (i SuppressionArgs) ToSuppressionOutputWithContext(ctx context.Context) SuppressionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SuppressionOutput)
}

// Action rule with suppression configuration
type SuppressionOutput struct{ *pulumi.OutputState }

func (SuppressionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Suppression)(nil)).Elem()
}

func (o SuppressionOutput) ToSuppressionOutput() SuppressionOutput {
	return o
}

func (o SuppressionOutput) ToSuppressionOutputWithContext(ctx context.Context) SuppressionOutput {
	return o
}

// conditions on which alerts will be filtered
func (o SuppressionOutput) Conditions() ConditionsPtrOutput {
	return o.ApplyT(func(v Suppression) *Conditions { return v.Conditions }).(ConditionsPtrOutput)
}

// Description of action rule
func (o SuppressionOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Suppression) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// scope on which action rule will apply
func (o SuppressionOutput) Scope() ScopePtrOutput {
	return o.ApplyT(func(v Suppression) *Scope { return v.Scope }).(ScopePtrOutput)
}

// Indicates if the given action rule is enabled or disabled
func (o SuppressionOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Suppression) *string { return v.Status }).(pulumi.StringPtrOutput)
}

// suppression configuration for the action rule
func (o SuppressionOutput) SuppressionConfig() SuppressionConfigOutput {
	return o.ApplyT(func(v Suppression) SuppressionConfig { return v.SuppressionConfig }).(SuppressionConfigOutput)
}

// Indicates type of action rule
// Expected value is 'Suppression'.
func (o SuppressionOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v Suppression) string { return v.Type }).(pulumi.StringOutput)
}

// Suppression logic for a given action rule
type SuppressionConfig struct {
	// Specifies when the suppression should be applied
	RecurrenceType string `pulumi:"recurrenceType"`
	// suppression schedule configuration
	Schedule *SuppressionSchedule `pulumi:"schedule"`
}

// SuppressionConfigInput is an input type that accepts SuppressionConfigArgs and SuppressionConfigOutput values.
// You can construct a concrete instance of `SuppressionConfigInput` via:
//
//          SuppressionConfigArgs{...}
type SuppressionConfigInput interface {
	pulumi.Input

	ToSuppressionConfigOutput() SuppressionConfigOutput
	ToSuppressionConfigOutputWithContext(context.Context) SuppressionConfigOutput
}

// Suppression logic for a given action rule
type SuppressionConfigArgs struct {
	// Specifies when the suppression should be applied
	RecurrenceType pulumi.StringInput `pulumi:"recurrenceType"`
	// suppression schedule configuration
	Schedule SuppressionSchedulePtrInput `pulumi:"schedule"`
}

func (SuppressionConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SuppressionConfig)(nil)).Elem()
}

func (i SuppressionConfigArgs) ToSuppressionConfigOutput() SuppressionConfigOutput {
	return i.ToSuppressionConfigOutputWithContext(context.Background())
}

func (i SuppressionConfigArgs) ToSuppressionConfigOutputWithContext(ctx context.Context) SuppressionConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SuppressionConfigOutput)
}

// Suppression logic for a given action rule
type SuppressionConfigOutput struct{ *pulumi.OutputState }

func (SuppressionConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SuppressionConfig)(nil)).Elem()
}

func (o SuppressionConfigOutput) ToSuppressionConfigOutput() SuppressionConfigOutput {
	return o
}

func (o SuppressionConfigOutput) ToSuppressionConfigOutputWithContext(ctx context.Context) SuppressionConfigOutput {
	return o
}

// Specifies when the suppression should be applied
func (o SuppressionConfigOutput) RecurrenceType() pulumi.StringOutput {
	return o.ApplyT(func(v SuppressionConfig) string { return v.RecurrenceType }).(pulumi.StringOutput)
}

// suppression schedule configuration
func (o SuppressionConfigOutput) Schedule() SuppressionSchedulePtrOutput {
	return o.ApplyT(func(v SuppressionConfig) *SuppressionSchedule { return v.Schedule }).(SuppressionSchedulePtrOutput)
}

// Suppression logic for a given action rule
type SuppressionConfigInvokeResponse struct {
	// Specifies when the suppression should be applied
	RecurrenceType string `pulumi:"recurrenceType"`
	// suppression schedule configuration
	Schedule *SuppressionScheduleInvokeResponse `pulumi:"schedule"`
}

// SuppressionConfigInvokeResponseInput is an input type that accepts SuppressionConfigInvokeResponseArgs and SuppressionConfigInvokeResponseOutput values.
// You can construct a concrete instance of `SuppressionConfigInvokeResponseInput` via:
//
//          SuppressionConfigInvokeResponseArgs{...}
type SuppressionConfigInvokeResponseInput interface {
	pulumi.Input

	ToSuppressionConfigInvokeResponseOutput() SuppressionConfigInvokeResponseOutput
	ToSuppressionConfigInvokeResponseOutputWithContext(context.Context) SuppressionConfigInvokeResponseOutput
}

// Suppression logic for a given action rule
type SuppressionConfigInvokeResponseArgs struct {
	// Specifies when the suppression should be applied
	RecurrenceType pulumi.StringInput `pulumi:"recurrenceType"`
	// suppression schedule configuration
	Schedule SuppressionScheduleInvokeResponsePtrInput `pulumi:"schedule"`
}

func (SuppressionConfigInvokeResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SuppressionConfigInvokeResponse)(nil)).Elem()
}

func (i SuppressionConfigInvokeResponseArgs) ToSuppressionConfigInvokeResponseOutput() SuppressionConfigInvokeResponseOutput {
	return i.ToSuppressionConfigInvokeResponseOutputWithContext(context.Background())
}

func (i SuppressionConfigInvokeResponseArgs) ToSuppressionConfigInvokeResponseOutputWithContext(ctx context.Context) SuppressionConfigInvokeResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SuppressionConfigInvokeResponseOutput)
}

// Suppression logic for a given action rule
type SuppressionConfigInvokeResponseOutput struct{ *pulumi.OutputState }

func (SuppressionConfigInvokeResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SuppressionConfigInvokeResponse)(nil)).Elem()
}

func (o SuppressionConfigInvokeResponseOutput) ToSuppressionConfigInvokeResponseOutput() SuppressionConfigInvokeResponseOutput {
	return o
}

func (o SuppressionConfigInvokeResponseOutput) ToSuppressionConfigInvokeResponseOutputWithContext(ctx context.Context) SuppressionConfigInvokeResponseOutput {
	return o
}

// Specifies when the suppression should be applied
func (o SuppressionConfigInvokeResponseOutput) RecurrenceType() pulumi.StringOutput {
	return o.ApplyT(func(v SuppressionConfigInvokeResponse) string { return v.RecurrenceType }).(pulumi.StringOutput)
}

// suppression schedule configuration
func (o SuppressionConfigInvokeResponseOutput) Schedule() SuppressionScheduleInvokeResponsePtrOutput {
	return o.ApplyT(func(v SuppressionConfigInvokeResponse) *SuppressionScheduleInvokeResponse { return v.Schedule }).(SuppressionScheduleInvokeResponsePtrOutput)
}

// Suppression logic for a given action rule
type SuppressionConfigResponse struct {
	// Specifies when the suppression should be applied
	RecurrenceType string `pulumi:"recurrenceType"`
	// suppression schedule configuration
	Schedule *SuppressionScheduleResponse `pulumi:"schedule"`
}

// SuppressionConfigResponseInput is an input type that accepts SuppressionConfigResponseArgs and SuppressionConfigResponseOutput values.
// You can construct a concrete instance of `SuppressionConfigResponseInput` via:
//
//          SuppressionConfigResponseArgs{...}
type SuppressionConfigResponseInput interface {
	pulumi.Input

	ToSuppressionConfigResponseOutput() SuppressionConfigResponseOutput
	ToSuppressionConfigResponseOutputWithContext(context.Context) SuppressionConfigResponseOutput
}

// Suppression logic for a given action rule
type SuppressionConfigResponseArgs struct {
	// Specifies when the suppression should be applied
	RecurrenceType pulumi.StringInput `pulumi:"recurrenceType"`
	// suppression schedule configuration
	Schedule SuppressionScheduleResponsePtrInput `pulumi:"schedule"`
}

func (SuppressionConfigResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SuppressionConfigResponse)(nil)).Elem()
}

func (i SuppressionConfigResponseArgs) ToSuppressionConfigResponseOutput() SuppressionConfigResponseOutput {
	return i.ToSuppressionConfigResponseOutputWithContext(context.Background())
}

func (i SuppressionConfigResponseArgs) ToSuppressionConfigResponseOutputWithContext(ctx context.Context) SuppressionConfigResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SuppressionConfigResponseOutput)
}

// Suppression logic for a given action rule
type SuppressionConfigResponseOutput struct{ *pulumi.OutputState }

func (SuppressionConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SuppressionConfigResponse)(nil)).Elem()
}

func (o SuppressionConfigResponseOutput) ToSuppressionConfigResponseOutput() SuppressionConfigResponseOutput {
	return o
}

func (o SuppressionConfigResponseOutput) ToSuppressionConfigResponseOutputWithContext(ctx context.Context) SuppressionConfigResponseOutput {
	return o
}

// Specifies when the suppression should be applied
func (o SuppressionConfigResponseOutput) RecurrenceType() pulumi.StringOutput {
	return o.ApplyT(func(v SuppressionConfigResponse) string { return v.RecurrenceType }).(pulumi.StringOutput)
}

// suppression schedule configuration
func (o SuppressionConfigResponseOutput) Schedule() SuppressionScheduleResponsePtrOutput {
	return o.ApplyT(func(v SuppressionConfigResponse) *SuppressionScheduleResponse { return v.Schedule }).(SuppressionScheduleResponsePtrOutput)
}

// Action rule with suppression configuration
type SuppressionInvokeResponse struct {
	// conditions on which alerts will be filtered
	Conditions *ConditionsInvokeResponse `pulumi:"conditions"`
	// Creation time of action rule. Date-Time in ISO-8601 format.
	CreatedAt string `pulumi:"createdAt"`
	// Created by user name.
	CreatedBy string `pulumi:"createdBy"`
	// Description of action rule
	Description *string `pulumi:"description"`
	// Last updated time of action rule. Date-Time in ISO-8601 format.
	LastModifiedAt string `pulumi:"lastModifiedAt"`
	// Last modified by user name.
	LastModifiedBy string `pulumi:"lastModifiedBy"`
	// scope on which action rule will apply
	Scope *ScopeInvokeResponse `pulumi:"scope"`
	// Indicates if the given action rule is enabled or disabled
	Status *string `pulumi:"status"`
	// suppression configuration for the action rule
	SuppressionConfig SuppressionConfigInvokeResponse `pulumi:"suppressionConfig"`
	// Indicates type of action rule
	// Expected value is 'Suppression'.
	Type string `pulumi:"type"`
}

// SuppressionInvokeResponseInput is an input type that accepts SuppressionInvokeResponseArgs and SuppressionInvokeResponseOutput values.
// You can construct a concrete instance of `SuppressionInvokeResponseInput` via:
//
//          SuppressionInvokeResponseArgs{...}
type SuppressionInvokeResponseInput interface {
	pulumi.Input

	ToSuppressionInvokeResponseOutput() SuppressionInvokeResponseOutput
	ToSuppressionInvokeResponseOutputWithContext(context.Context) SuppressionInvokeResponseOutput
}

// Action rule with suppression configuration
type SuppressionInvokeResponseArgs struct {
	// conditions on which alerts will be filtered
	Conditions ConditionsInvokeResponsePtrInput `pulumi:"conditions"`
	// Creation time of action rule. Date-Time in ISO-8601 format.
	CreatedAt pulumi.StringInput `pulumi:"createdAt"`
	// Created by user name.
	CreatedBy pulumi.StringInput `pulumi:"createdBy"`
	// Description of action rule
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Last updated time of action rule. Date-Time in ISO-8601 format.
	LastModifiedAt pulumi.StringInput `pulumi:"lastModifiedAt"`
	// Last modified by user name.
	LastModifiedBy pulumi.StringInput `pulumi:"lastModifiedBy"`
	// scope on which action rule will apply
	Scope ScopeInvokeResponsePtrInput `pulumi:"scope"`
	// Indicates if the given action rule is enabled or disabled
	Status pulumi.StringPtrInput `pulumi:"status"`
	// suppression configuration for the action rule
	SuppressionConfig SuppressionConfigInvokeResponseInput `pulumi:"suppressionConfig"`
	// Indicates type of action rule
	// Expected value is 'Suppression'.
	Type pulumi.StringInput `pulumi:"type"`
}

func (SuppressionInvokeResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SuppressionInvokeResponse)(nil)).Elem()
}

func (i SuppressionInvokeResponseArgs) ToSuppressionInvokeResponseOutput() SuppressionInvokeResponseOutput {
	return i.ToSuppressionInvokeResponseOutputWithContext(context.Background())
}

func (i SuppressionInvokeResponseArgs) ToSuppressionInvokeResponseOutputWithContext(ctx context.Context) SuppressionInvokeResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SuppressionInvokeResponseOutput)
}

// Action rule with suppression configuration
type SuppressionInvokeResponseOutput struct{ *pulumi.OutputState }

func (SuppressionInvokeResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SuppressionInvokeResponse)(nil)).Elem()
}

func (o SuppressionInvokeResponseOutput) ToSuppressionInvokeResponseOutput() SuppressionInvokeResponseOutput {
	return o
}

func (o SuppressionInvokeResponseOutput) ToSuppressionInvokeResponseOutputWithContext(ctx context.Context) SuppressionInvokeResponseOutput {
	return o
}

// conditions on which alerts will be filtered
func (o SuppressionInvokeResponseOutput) Conditions() ConditionsInvokeResponsePtrOutput {
	return o.ApplyT(func(v SuppressionInvokeResponse) *ConditionsInvokeResponse { return v.Conditions }).(ConditionsInvokeResponsePtrOutput)
}

// Creation time of action rule. Date-Time in ISO-8601 format.
func (o SuppressionInvokeResponseOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v SuppressionInvokeResponse) string { return v.CreatedAt }).(pulumi.StringOutput)
}

// Created by user name.
func (o SuppressionInvokeResponseOutput) CreatedBy() pulumi.StringOutput {
	return o.ApplyT(func(v SuppressionInvokeResponse) string { return v.CreatedBy }).(pulumi.StringOutput)
}

// Description of action rule
func (o SuppressionInvokeResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SuppressionInvokeResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Last updated time of action rule. Date-Time in ISO-8601 format.
func (o SuppressionInvokeResponseOutput) LastModifiedAt() pulumi.StringOutput {
	return o.ApplyT(func(v SuppressionInvokeResponse) string { return v.LastModifiedAt }).(pulumi.StringOutput)
}

// Last modified by user name.
func (o SuppressionInvokeResponseOutput) LastModifiedBy() pulumi.StringOutput {
	return o.ApplyT(func(v SuppressionInvokeResponse) string { return v.LastModifiedBy }).(pulumi.StringOutput)
}

// scope on which action rule will apply
func (o SuppressionInvokeResponseOutput) Scope() ScopeInvokeResponsePtrOutput {
	return o.ApplyT(func(v SuppressionInvokeResponse) *ScopeInvokeResponse { return v.Scope }).(ScopeInvokeResponsePtrOutput)
}

// Indicates if the given action rule is enabled or disabled
func (o SuppressionInvokeResponseOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SuppressionInvokeResponse) *string { return v.Status }).(pulumi.StringPtrOutput)
}

// suppression configuration for the action rule
func (o SuppressionInvokeResponseOutput) SuppressionConfig() SuppressionConfigInvokeResponseOutput {
	return o.ApplyT(func(v SuppressionInvokeResponse) SuppressionConfigInvokeResponse { return v.SuppressionConfig }).(SuppressionConfigInvokeResponseOutput)
}

// Indicates type of action rule
// Expected value is 'Suppression'.
func (o SuppressionInvokeResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v SuppressionInvokeResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Action rule with suppression configuration
type SuppressionResponse struct {
	// conditions on which alerts will be filtered
	Conditions *ConditionsResponse `pulumi:"conditions"`
	// Creation time of action rule. Date-Time in ISO-8601 format.
	CreatedAt string `pulumi:"createdAt"`
	// Created by user name.
	CreatedBy string `pulumi:"createdBy"`
	// Description of action rule
	Description *string `pulumi:"description"`
	// Last updated time of action rule. Date-Time in ISO-8601 format.
	LastModifiedAt string `pulumi:"lastModifiedAt"`
	// Last modified by user name.
	LastModifiedBy string `pulumi:"lastModifiedBy"`
	// scope on which action rule will apply
	Scope *ScopeResponse `pulumi:"scope"`
	// Indicates if the given action rule is enabled or disabled
	Status *string `pulumi:"status"`
	// suppression configuration for the action rule
	SuppressionConfig SuppressionConfigResponse `pulumi:"suppressionConfig"`
	// Indicates type of action rule
	// Expected value is 'Suppression'.
	Type string `pulumi:"type"`
}

// SuppressionResponseInput is an input type that accepts SuppressionResponseArgs and SuppressionResponseOutput values.
// You can construct a concrete instance of `SuppressionResponseInput` via:
//
//          SuppressionResponseArgs{...}
type SuppressionResponseInput interface {
	pulumi.Input

	ToSuppressionResponseOutput() SuppressionResponseOutput
	ToSuppressionResponseOutputWithContext(context.Context) SuppressionResponseOutput
}

// Action rule with suppression configuration
type SuppressionResponseArgs struct {
	// conditions on which alerts will be filtered
	Conditions ConditionsResponsePtrInput `pulumi:"conditions"`
	// Creation time of action rule. Date-Time in ISO-8601 format.
	CreatedAt pulumi.StringInput `pulumi:"createdAt"`
	// Created by user name.
	CreatedBy pulumi.StringInput `pulumi:"createdBy"`
	// Description of action rule
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Last updated time of action rule. Date-Time in ISO-8601 format.
	LastModifiedAt pulumi.StringInput `pulumi:"lastModifiedAt"`
	// Last modified by user name.
	LastModifiedBy pulumi.StringInput `pulumi:"lastModifiedBy"`
	// scope on which action rule will apply
	Scope ScopeResponsePtrInput `pulumi:"scope"`
	// Indicates if the given action rule is enabled or disabled
	Status pulumi.StringPtrInput `pulumi:"status"`
	// suppression configuration for the action rule
	SuppressionConfig SuppressionConfigResponseInput `pulumi:"suppressionConfig"`
	// Indicates type of action rule
	// Expected value is 'Suppression'.
	Type pulumi.StringInput `pulumi:"type"`
}

func (SuppressionResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SuppressionResponse)(nil)).Elem()
}

func (i SuppressionResponseArgs) ToSuppressionResponseOutput() SuppressionResponseOutput {
	return i.ToSuppressionResponseOutputWithContext(context.Background())
}

func (i SuppressionResponseArgs) ToSuppressionResponseOutputWithContext(ctx context.Context) SuppressionResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SuppressionResponseOutput)
}

// Action rule with suppression configuration
type SuppressionResponseOutput struct{ *pulumi.OutputState }

func (SuppressionResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SuppressionResponse)(nil)).Elem()
}

func (o SuppressionResponseOutput) ToSuppressionResponseOutput() SuppressionResponseOutput {
	return o
}

func (o SuppressionResponseOutput) ToSuppressionResponseOutputWithContext(ctx context.Context) SuppressionResponseOutput {
	return o
}

// conditions on which alerts will be filtered
func (o SuppressionResponseOutput) Conditions() ConditionsResponsePtrOutput {
	return o.ApplyT(func(v SuppressionResponse) *ConditionsResponse { return v.Conditions }).(ConditionsResponsePtrOutput)
}

// Creation time of action rule. Date-Time in ISO-8601 format.
func (o SuppressionResponseOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v SuppressionResponse) string { return v.CreatedAt }).(pulumi.StringOutput)
}

// Created by user name.
func (o SuppressionResponseOutput) CreatedBy() pulumi.StringOutput {
	return o.ApplyT(func(v SuppressionResponse) string { return v.CreatedBy }).(pulumi.StringOutput)
}

// Description of action rule
func (o SuppressionResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SuppressionResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Last updated time of action rule. Date-Time in ISO-8601 format.
func (o SuppressionResponseOutput) LastModifiedAt() pulumi.StringOutput {
	return o.ApplyT(func(v SuppressionResponse) string { return v.LastModifiedAt }).(pulumi.StringOutput)
}

// Last modified by user name.
func (o SuppressionResponseOutput) LastModifiedBy() pulumi.StringOutput {
	return o.ApplyT(func(v SuppressionResponse) string { return v.LastModifiedBy }).(pulumi.StringOutput)
}

// scope on which action rule will apply
func (o SuppressionResponseOutput) Scope() ScopeResponsePtrOutput {
	return o.ApplyT(func(v SuppressionResponse) *ScopeResponse { return v.Scope }).(ScopeResponsePtrOutput)
}

// Indicates if the given action rule is enabled or disabled
func (o SuppressionResponseOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SuppressionResponse) *string { return v.Status }).(pulumi.StringPtrOutput)
}

// suppression configuration for the action rule
func (o SuppressionResponseOutput) SuppressionConfig() SuppressionConfigResponseOutput {
	return o.ApplyT(func(v SuppressionResponse) SuppressionConfigResponse { return v.SuppressionConfig }).(SuppressionConfigResponseOutput)
}

// Indicates type of action rule
// Expected value is 'Suppression'.
func (o SuppressionResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v SuppressionResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Schedule for a given suppression configuration.
type SuppressionSchedule struct {
	// End date for suppression
	EndDate *string `pulumi:"endDate"`
	// End date for suppression
	EndTime *string `pulumi:"endTime"`
	// Specifies the values for recurrence pattern
	RecurrenceValues []int `pulumi:"recurrenceValues"`
	// Start date for suppression
	StartDate *string `pulumi:"startDate"`
	// Start time for suppression
	StartTime *string `pulumi:"startTime"`
}

// SuppressionScheduleInput is an input type that accepts SuppressionScheduleArgs and SuppressionScheduleOutput values.
// You can construct a concrete instance of `SuppressionScheduleInput` via:
//
//          SuppressionScheduleArgs{...}
type SuppressionScheduleInput interface {
	pulumi.Input

	ToSuppressionScheduleOutput() SuppressionScheduleOutput
	ToSuppressionScheduleOutputWithContext(context.Context) SuppressionScheduleOutput
}

// Schedule for a given suppression configuration.
type SuppressionScheduleArgs struct {
	// End date for suppression
	EndDate pulumi.StringPtrInput `pulumi:"endDate"`
	// End date for suppression
	EndTime pulumi.StringPtrInput `pulumi:"endTime"`
	// Specifies the values for recurrence pattern
	RecurrenceValues pulumi.IntArrayInput `pulumi:"recurrenceValues"`
	// Start date for suppression
	StartDate pulumi.StringPtrInput `pulumi:"startDate"`
	// Start time for suppression
	StartTime pulumi.StringPtrInput `pulumi:"startTime"`
}

func (SuppressionScheduleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SuppressionSchedule)(nil)).Elem()
}

func (i SuppressionScheduleArgs) ToSuppressionScheduleOutput() SuppressionScheduleOutput {
	return i.ToSuppressionScheduleOutputWithContext(context.Background())
}

func (i SuppressionScheduleArgs) ToSuppressionScheduleOutputWithContext(ctx context.Context) SuppressionScheduleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SuppressionScheduleOutput)
}

func (i SuppressionScheduleArgs) ToSuppressionSchedulePtrOutput() SuppressionSchedulePtrOutput {
	return i.ToSuppressionSchedulePtrOutputWithContext(context.Background())
}

func (i SuppressionScheduleArgs) ToSuppressionSchedulePtrOutputWithContext(ctx context.Context) SuppressionSchedulePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SuppressionScheduleOutput).ToSuppressionSchedulePtrOutputWithContext(ctx)
}

// SuppressionSchedulePtrInput is an input type that accepts SuppressionScheduleArgs, SuppressionSchedulePtr and SuppressionSchedulePtrOutput values.
// You can construct a concrete instance of `SuppressionSchedulePtrInput` via:
//
//          SuppressionScheduleArgs{...}
//
//  or:
//
//          nil
type SuppressionSchedulePtrInput interface {
	pulumi.Input

	ToSuppressionSchedulePtrOutput() SuppressionSchedulePtrOutput
	ToSuppressionSchedulePtrOutputWithContext(context.Context) SuppressionSchedulePtrOutput
}

type suppressionSchedulePtrType SuppressionScheduleArgs

func SuppressionSchedulePtr(v *SuppressionScheduleArgs) SuppressionSchedulePtrInput {
	return (*suppressionSchedulePtrType)(v)
}

func (*suppressionSchedulePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SuppressionSchedule)(nil)).Elem()
}

func (i *suppressionSchedulePtrType) ToSuppressionSchedulePtrOutput() SuppressionSchedulePtrOutput {
	return i.ToSuppressionSchedulePtrOutputWithContext(context.Background())
}

func (i *suppressionSchedulePtrType) ToSuppressionSchedulePtrOutputWithContext(ctx context.Context) SuppressionSchedulePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SuppressionSchedulePtrOutput)
}

// Schedule for a given suppression configuration.
type SuppressionScheduleOutput struct{ *pulumi.OutputState }

func (SuppressionScheduleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SuppressionSchedule)(nil)).Elem()
}

func (o SuppressionScheduleOutput) ToSuppressionScheduleOutput() SuppressionScheduleOutput {
	return o
}

func (o SuppressionScheduleOutput) ToSuppressionScheduleOutputWithContext(ctx context.Context) SuppressionScheduleOutput {
	return o
}

func (o SuppressionScheduleOutput) ToSuppressionSchedulePtrOutput() SuppressionSchedulePtrOutput {
	return o.ToSuppressionSchedulePtrOutputWithContext(context.Background())
}

func (o SuppressionScheduleOutput) ToSuppressionSchedulePtrOutputWithContext(ctx context.Context) SuppressionSchedulePtrOutput {
	return o.ApplyT(func(v SuppressionSchedule) *SuppressionSchedule {
		return &v
	}).(SuppressionSchedulePtrOutput)
}

// End date for suppression
func (o SuppressionScheduleOutput) EndDate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SuppressionSchedule) *string { return v.EndDate }).(pulumi.StringPtrOutput)
}

// End date for suppression
func (o SuppressionScheduleOutput) EndTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SuppressionSchedule) *string { return v.EndTime }).(pulumi.StringPtrOutput)
}

// Specifies the values for recurrence pattern
func (o SuppressionScheduleOutput) RecurrenceValues() pulumi.IntArrayOutput {
	return o.ApplyT(func(v SuppressionSchedule) []int { return v.RecurrenceValues }).(pulumi.IntArrayOutput)
}

// Start date for suppression
func (o SuppressionScheduleOutput) StartDate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SuppressionSchedule) *string { return v.StartDate }).(pulumi.StringPtrOutput)
}

// Start time for suppression
func (o SuppressionScheduleOutput) StartTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SuppressionSchedule) *string { return v.StartTime }).(pulumi.StringPtrOutput)
}

type SuppressionSchedulePtrOutput struct{ *pulumi.OutputState }

func (SuppressionSchedulePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SuppressionSchedule)(nil)).Elem()
}

func (o SuppressionSchedulePtrOutput) ToSuppressionSchedulePtrOutput() SuppressionSchedulePtrOutput {
	return o
}

func (o SuppressionSchedulePtrOutput) ToSuppressionSchedulePtrOutputWithContext(ctx context.Context) SuppressionSchedulePtrOutput {
	return o
}

func (o SuppressionSchedulePtrOutput) Elem() SuppressionScheduleOutput {
	return o.ApplyT(func(v *SuppressionSchedule) SuppressionSchedule { return *v }).(SuppressionScheduleOutput)
}

// End date for suppression
func (o SuppressionSchedulePtrOutput) EndDate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SuppressionSchedule) *string {
		if v == nil {
			return nil
		}
		return v.EndDate
	}).(pulumi.StringPtrOutput)
}

// End date for suppression
func (o SuppressionSchedulePtrOutput) EndTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SuppressionSchedule) *string {
		if v == nil {
			return nil
		}
		return v.EndTime
	}).(pulumi.StringPtrOutput)
}

// Specifies the values for recurrence pattern
func (o SuppressionSchedulePtrOutput) RecurrenceValues() pulumi.IntArrayOutput {
	return o.ApplyT(func(v *SuppressionSchedule) []int {
		if v == nil {
			return nil
		}
		return v.RecurrenceValues
	}).(pulumi.IntArrayOutput)
}

// Start date for suppression
func (o SuppressionSchedulePtrOutput) StartDate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SuppressionSchedule) *string {
		if v == nil {
			return nil
		}
		return v.StartDate
	}).(pulumi.StringPtrOutput)
}

// Start time for suppression
func (o SuppressionSchedulePtrOutput) StartTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SuppressionSchedule) *string {
		if v == nil {
			return nil
		}
		return v.StartTime
	}).(pulumi.StringPtrOutput)
}

// Schedule for a given suppression configuration.
type SuppressionScheduleInvokeResponse struct {
	// End date for suppression
	EndDate *string `pulumi:"endDate"`
	// End date for suppression
	EndTime *string `pulumi:"endTime"`
	// Specifies the values for recurrence pattern
	RecurrenceValues []int `pulumi:"recurrenceValues"`
	// Start date for suppression
	StartDate *string `pulumi:"startDate"`
	// Start time for suppression
	StartTime *string `pulumi:"startTime"`
}

// SuppressionScheduleInvokeResponseInput is an input type that accepts SuppressionScheduleInvokeResponseArgs and SuppressionScheduleInvokeResponseOutput values.
// You can construct a concrete instance of `SuppressionScheduleInvokeResponseInput` via:
//
//          SuppressionScheduleInvokeResponseArgs{...}
type SuppressionScheduleInvokeResponseInput interface {
	pulumi.Input

	ToSuppressionScheduleInvokeResponseOutput() SuppressionScheduleInvokeResponseOutput
	ToSuppressionScheduleInvokeResponseOutputWithContext(context.Context) SuppressionScheduleInvokeResponseOutput
}

// Schedule for a given suppression configuration.
type SuppressionScheduleInvokeResponseArgs struct {
	// End date for suppression
	EndDate pulumi.StringPtrInput `pulumi:"endDate"`
	// End date for suppression
	EndTime pulumi.StringPtrInput `pulumi:"endTime"`
	// Specifies the values for recurrence pattern
	RecurrenceValues pulumi.IntArrayInput `pulumi:"recurrenceValues"`
	// Start date for suppression
	StartDate pulumi.StringPtrInput `pulumi:"startDate"`
	// Start time for suppression
	StartTime pulumi.StringPtrInput `pulumi:"startTime"`
}

func (SuppressionScheduleInvokeResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SuppressionScheduleInvokeResponse)(nil)).Elem()
}

func (i SuppressionScheduleInvokeResponseArgs) ToSuppressionScheduleInvokeResponseOutput() SuppressionScheduleInvokeResponseOutput {
	return i.ToSuppressionScheduleInvokeResponseOutputWithContext(context.Background())
}

func (i SuppressionScheduleInvokeResponseArgs) ToSuppressionScheduleInvokeResponseOutputWithContext(ctx context.Context) SuppressionScheduleInvokeResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SuppressionScheduleInvokeResponseOutput)
}

func (i SuppressionScheduleInvokeResponseArgs) ToSuppressionScheduleInvokeResponsePtrOutput() SuppressionScheduleInvokeResponsePtrOutput {
	return i.ToSuppressionScheduleInvokeResponsePtrOutputWithContext(context.Background())
}

func (i SuppressionScheduleInvokeResponseArgs) ToSuppressionScheduleInvokeResponsePtrOutputWithContext(ctx context.Context) SuppressionScheduleInvokeResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SuppressionScheduleInvokeResponseOutput).ToSuppressionScheduleInvokeResponsePtrOutputWithContext(ctx)
}

// SuppressionScheduleInvokeResponsePtrInput is an input type that accepts SuppressionScheduleInvokeResponseArgs, SuppressionScheduleInvokeResponsePtr and SuppressionScheduleInvokeResponsePtrOutput values.
// You can construct a concrete instance of `SuppressionScheduleInvokeResponsePtrInput` via:
//
//          SuppressionScheduleInvokeResponseArgs{...}
//
//  or:
//
//          nil
type SuppressionScheduleInvokeResponsePtrInput interface {
	pulumi.Input

	ToSuppressionScheduleInvokeResponsePtrOutput() SuppressionScheduleInvokeResponsePtrOutput
	ToSuppressionScheduleInvokeResponsePtrOutputWithContext(context.Context) SuppressionScheduleInvokeResponsePtrOutput
}

type suppressionScheduleInvokeResponsePtrType SuppressionScheduleInvokeResponseArgs

func SuppressionScheduleInvokeResponsePtr(v *SuppressionScheduleInvokeResponseArgs) SuppressionScheduleInvokeResponsePtrInput {
	return (*suppressionScheduleInvokeResponsePtrType)(v)
}

func (*suppressionScheduleInvokeResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SuppressionScheduleInvokeResponse)(nil)).Elem()
}

func (i *suppressionScheduleInvokeResponsePtrType) ToSuppressionScheduleInvokeResponsePtrOutput() SuppressionScheduleInvokeResponsePtrOutput {
	return i.ToSuppressionScheduleInvokeResponsePtrOutputWithContext(context.Background())
}

func (i *suppressionScheduleInvokeResponsePtrType) ToSuppressionScheduleInvokeResponsePtrOutputWithContext(ctx context.Context) SuppressionScheduleInvokeResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SuppressionScheduleInvokeResponsePtrOutput)
}

// Schedule for a given suppression configuration.
type SuppressionScheduleInvokeResponseOutput struct{ *pulumi.OutputState }

func (SuppressionScheduleInvokeResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SuppressionScheduleInvokeResponse)(nil)).Elem()
}

func (o SuppressionScheduleInvokeResponseOutput) ToSuppressionScheduleInvokeResponseOutput() SuppressionScheduleInvokeResponseOutput {
	return o
}

func (o SuppressionScheduleInvokeResponseOutput) ToSuppressionScheduleInvokeResponseOutputWithContext(ctx context.Context) SuppressionScheduleInvokeResponseOutput {
	return o
}

func (o SuppressionScheduleInvokeResponseOutput) ToSuppressionScheduleInvokeResponsePtrOutput() SuppressionScheduleInvokeResponsePtrOutput {
	return o.ToSuppressionScheduleInvokeResponsePtrOutputWithContext(context.Background())
}

func (o SuppressionScheduleInvokeResponseOutput) ToSuppressionScheduleInvokeResponsePtrOutputWithContext(ctx context.Context) SuppressionScheduleInvokeResponsePtrOutput {
	return o.ApplyT(func(v SuppressionScheduleInvokeResponse) *SuppressionScheduleInvokeResponse {
		return &v
	}).(SuppressionScheduleInvokeResponsePtrOutput)
}

// End date for suppression
func (o SuppressionScheduleInvokeResponseOutput) EndDate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SuppressionScheduleInvokeResponse) *string { return v.EndDate }).(pulumi.StringPtrOutput)
}

// End date for suppression
func (o SuppressionScheduleInvokeResponseOutput) EndTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SuppressionScheduleInvokeResponse) *string { return v.EndTime }).(pulumi.StringPtrOutput)
}

// Specifies the values for recurrence pattern
func (o SuppressionScheduleInvokeResponseOutput) RecurrenceValues() pulumi.IntArrayOutput {
	return o.ApplyT(func(v SuppressionScheduleInvokeResponse) []int { return v.RecurrenceValues }).(pulumi.IntArrayOutput)
}

// Start date for suppression
func (o SuppressionScheduleInvokeResponseOutput) StartDate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SuppressionScheduleInvokeResponse) *string { return v.StartDate }).(pulumi.StringPtrOutput)
}

// Start time for suppression
func (o SuppressionScheduleInvokeResponseOutput) StartTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SuppressionScheduleInvokeResponse) *string { return v.StartTime }).(pulumi.StringPtrOutput)
}

type SuppressionScheduleInvokeResponsePtrOutput struct{ *pulumi.OutputState }

func (SuppressionScheduleInvokeResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SuppressionScheduleInvokeResponse)(nil)).Elem()
}

func (o SuppressionScheduleInvokeResponsePtrOutput) ToSuppressionScheduleInvokeResponsePtrOutput() SuppressionScheduleInvokeResponsePtrOutput {
	return o
}

func (o SuppressionScheduleInvokeResponsePtrOutput) ToSuppressionScheduleInvokeResponsePtrOutputWithContext(ctx context.Context) SuppressionScheduleInvokeResponsePtrOutput {
	return o
}

func (o SuppressionScheduleInvokeResponsePtrOutput) Elem() SuppressionScheduleInvokeResponseOutput {
	return o.ApplyT(func(v *SuppressionScheduleInvokeResponse) SuppressionScheduleInvokeResponse { return *v }).(SuppressionScheduleInvokeResponseOutput)
}

// End date for suppression
func (o SuppressionScheduleInvokeResponsePtrOutput) EndDate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SuppressionScheduleInvokeResponse) *string {
		if v == nil {
			return nil
		}
		return v.EndDate
	}).(pulumi.StringPtrOutput)
}

// End date for suppression
func (o SuppressionScheduleInvokeResponsePtrOutput) EndTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SuppressionScheduleInvokeResponse) *string {
		if v == nil {
			return nil
		}
		return v.EndTime
	}).(pulumi.StringPtrOutput)
}

// Specifies the values for recurrence pattern
func (o SuppressionScheduleInvokeResponsePtrOutput) RecurrenceValues() pulumi.IntArrayOutput {
	return o.ApplyT(func(v *SuppressionScheduleInvokeResponse) []int {
		if v == nil {
			return nil
		}
		return v.RecurrenceValues
	}).(pulumi.IntArrayOutput)
}

// Start date for suppression
func (o SuppressionScheduleInvokeResponsePtrOutput) StartDate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SuppressionScheduleInvokeResponse) *string {
		if v == nil {
			return nil
		}
		return v.StartDate
	}).(pulumi.StringPtrOutput)
}

// Start time for suppression
func (o SuppressionScheduleInvokeResponsePtrOutput) StartTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SuppressionScheduleInvokeResponse) *string {
		if v == nil {
			return nil
		}
		return v.StartTime
	}).(pulumi.StringPtrOutput)
}

// Schedule for a given suppression configuration.
type SuppressionScheduleResponse struct {
	// End date for suppression
	EndDate *string `pulumi:"endDate"`
	// End date for suppression
	EndTime *string `pulumi:"endTime"`
	// Specifies the values for recurrence pattern
	RecurrenceValues []int `pulumi:"recurrenceValues"`
	// Start date for suppression
	StartDate *string `pulumi:"startDate"`
	// Start time for suppression
	StartTime *string `pulumi:"startTime"`
}

// SuppressionScheduleResponseInput is an input type that accepts SuppressionScheduleResponseArgs and SuppressionScheduleResponseOutput values.
// You can construct a concrete instance of `SuppressionScheduleResponseInput` via:
//
//          SuppressionScheduleResponseArgs{...}
type SuppressionScheduleResponseInput interface {
	pulumi.Input

	ToSuppressionScheduleResponseOutput() SuppressionScheduleResponseOutput
	ToSuppressionScheduleResponseOutputWithContext(context.Context) SuppressionScheduleResponseOutput
}

// Schedule for a given suppression configuration.
type SuppressionScheduleResponseArgs struct {
	// End date for suppression
	EndDate pulumi.StringPtrInput `pulumi:"endDate"`
	// End date for suppression
	EndTime pulumi.StringPtrInput `pulumi:"endTime"`
	// Specifies the values for recurrence pattern
	RecurrenceValues pulumi.IntArrayInput `pulumi:"recurrenceValues"`
	// Start date for suppression
	StartDate pulumi.StringPtrInput `pulumi:"startDate"`
	// Start time for suppression
	StartTime pulumi.StringPtrInput `pulumi:"startTime"`
}

func (SuppressionScheduleResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SuppressionScheduleResponse)(nil)).Elem()
}

func (i SuppressionScheduleResponseArgs) ToSuppressionScheduleResponseOutput() SuppressionScheduleResponseOutput {
	return i.ToSuppressionScheduleResponseOutputWithContext(context.Background())
}

func (i SuppressionScheduleResponseArgs) ToSuppressionScheduleResponseOutputWithContext(ctx context.Context) SuppressionScheduleResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SuppressionScheduleResponseOutput)
}

func (i SuppressionScheduleResponseArgs) ToSuppressionScheduleResponsePtrOutput() SuppressionScheduleResponsePtrOutput {
	return i.ToSuppressionScheduleResponsePtrOutputWithContext(context.Background())
}

func (i SuppressionScheduleResponseArgs) ToSuppressionScheduleResponsePtrOutputWithContext(ctx context.Context) SuppressionScheduleResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SuppressionScheduleResponseOutput).ToSuppressionScheduleResponsePtrOutputWithContext(ctx)
}

// SuppressionScheduleResponsePtrInput is an input type that accepts SuppressionScheduleResponseArgs, SuppressionScheduleResponsePtr and SuppressionScheduleResponsePtrOutput values.
// You can construct a concrete instance of `SuppressionScheduleResponsePtrInput` via:
//
//          SuppressionScheduleResponseArgs{...}
//
//  or:
//
//          nil
type SuppressionScheduleResponsePtrInput interface {
	pulumi.Input

	ToSuppressionScheduleResponsePtrOutput() SuppressionScheduleResponsePtrOutput
	ToSuppressionScheduleResponsePtrOutputWithContext(context.Context) SuppressionScheduleResponsePtrOutput
}

type suppressionScheduleResponsePtrType SuppressionScheduleResponseArgs

func SuppressionScheduleResponsePtr(v *SuppressionScheduleResponseArgs) SuppressionScheduleResponsePtrInput {
	return (*suppressionScheduleResponsePtrType)(v)
}

func (*suppressionScheduleResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SuppressionScheduleResponse)(nil)).Elem()
}

func (i *suppressionScheduleResponsePtrType) ToSuppressionScheduleResponsePtrOutput() SuppressionScheduleResponsePtrOutput {
	return i.ToSuppressionScheduleResponsePtrOutputWithContext(context.Background())
}

func (i *suppressionScheduleResponsePtrType) ToSuppressionScheduleResponsePtrOutputWithContext(ctx context.Context) SuppressionScheduleResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SuppressionScheduleResponsePtrOutput)
}

// Schedule for a given suppression configuration.
type SuppressionScheduleResponseOutput struct{ *pulumi.OutputState }

func (SuppressionScheduleResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SuppressionScheduleResponse)(nil)).Elem()
}

func (o SuppressionScheduleResponseOutput) ToSuppressionScheduleResponseOutput() SuppressionScheduleResponseOutput {
	return o
}

func (o SuppressionScheduleResponseOutput) ToSuppressionScheduleResponseOutputWithContext(ctx context.Context) SuppressionScheduleResponseOutput {
	return o
}

func (o SuppressionScheduleResponseOutput) ToSuppressionScheduleResponsePtrOutput() SuppressionScheduleResponsePtrOutput {
	return o.ToSuppressionScheduleResponsePtrOutputWithContext(context.Background())
}

func (o SuppressionScheduleResponseOutput) ToSuppressionScheduleResponsePtrOutputWithContext(ctx context.Context) SuppressionScheduleResponsePtrOutput {
	return o.ApplyT(func(v SuppressionScheduleResponse) *SuppressionScheduleResponse {
		return &v
	}).(SuppressionScheduleResponsePtrOutput)
}

// End date for suppression
func (o SuppressionScheduleResponseOutput) EndDate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SuppressionScheduleResponse) *string { return v.EndDate }).(pulumi.StringPtrOutput)
}

// End date for suppression
func (o SuppressionScheduleResponseOutput) EndTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SuppressionScheduleResponse) *string { return v.EndTime }).(pulumi.StringPtrOutput)
}

// Specifies the values for recurrence pattern
func (o SuppressionScheduleResponseOutput) RecurrenceValues() pulumi.IntArrayOutput {
	return o.ApplyT(func(v SuppressionScheduleResponse) []int { return v.RecurrenceValues }).(pulumi.IntArrayOutput)
}

// Start date for suppression
func (o SuppressionScheduleResponseOutput) StartDate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SuppressionScheduleResponse) *string { return v.StartDate }).(pulumi.StringPtrOutput)
}

// Start time for suppression
func (o SuppressionScheduleResponseOutput) StartTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SuppressionScheduleResponse) *string { return v.StartTime }).(pulumi.StringPtrOutput)
}

type SuppressionScheduleResponsePtrOutput struct{ *pulumi.OutputState }

func (SuppressionScheduleResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SuppressionScheduleResponse)(nil)).Elem()
}

func (o SuppressionScheduleResponsePtrOutput) ToSuppressionScheduleResponsePtrOutput() SuppressionScheduleResponsePtrOutput {
	return o
}

func (o SuppressionScheduleResponsePtrOutput) ToSuppressionScheduleResponsePtrOutputWithContext(ctx context.Context) SuppressionScheduleResponsePtrOutput {
	return o
}

func (o SuppressionScheduleResponsePtrOutput) Elem() SuppressionScheduleResponseOutput {
	return o.ApplyT(func(v *SuppressionScheduleResponse) SuppressionScheduleResponse { return *v }).(SuppressionScheduleResponseOutput)
}

// End date for suppression
func (o SuppressionScheduleResponsePtrOutput) EndDate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SuppressionScheduleResponse) *string {
		if v == nil {
			return nil
		}
		return v.EndDate
	}).(pulumi.StringPtrOutput)
}

// End date for suppression
func (o SuppressionScheduleResponsePtrOutput) EndTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SuppressionScheduleResponse) *string {
		if v == nil {
			return nil
		}
		return v.EndTime
	}).(pulumi.StringPtrOutput)
}

// Specifies the values for recurrence pattern
func (o SuppressionScheduleResponsePtrOutput) RecurrenceValues() pulumi.IntArrayOutput {
	return o.ApplyT(func(v *SuppressionScheduleResponse) []int {
		if v == nil {
			return nil
		}
		return v.RecurrenceValues
	}).(pulumi.IntArrayOutput)
}

// Start date for suppression
func (o SuppressionScheduleResponsePtrOutput) StartDate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SuppressionScheduleResponse) *string {
		if v == nil {
			return nil
		}
		return v.StartDate
	}).(pulumi.StringPtrOutput)
}

// Start time for suppression
func (o SuppressionScheduleResponsePtrOutput) StartTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SuppressionScheduleResponse) *string {
		if v == nil {
			return nil
		}
		return v.StartTime
	}).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(ActionGroupOutput{})
	pulumi.RegisterOutputType(ActionGroupInvokeResponseOutput{})
	pulumi.RegisterOutputType(ActionGroupResponseOutput{})
	pulumi.RegisterOutputType(ConditionOutput{})
	pulumi.RegisterOutputType(ConditionPtrOutput{})
	pulumi.RegisterOutputType(ConditionInvokeResponseOutput{})
	pulumi.RegisterOutputType(ConditionInvokeResponsePtrOutput{})
	pulumi.RegisterOutputType(ConditionResponseOutput{})
	pulumi.RegisterOutputType(ConditionResponsePtrOutput{})
	pulumi.RegisterOutputType(ConditionsOutput{})
	pulumi.RegisterOutputType(ConditionsPtrOutput{})
	pulumi.RegisterOutputType(ConditionsInvokeResponseOutput{})
	pulumi.RegisterOutputType(ConditionsInvokeResponsePtrOutput{})
	pulumi.RegisterOutputType(ConditionsResponseOutput{})
	pulumi.RegisterOutputType(ConditionsResponsePtrOutput{})
	pulumi.RegisterOutputType(DiagnosticsOutput{})
	pulumi.RegisterOutputType(DiagnosticsInvokeResponseOutput{})
	pulumi.RegisterOutputType(DiagnosticsResponseOutput{})
	pulumi.RegisterOutputType(ScopeOutput{})
	pulumi.RegisterOutputType(ScopePtrOutput{})
	pulumi.RegisterOutputType(ScopeInvokeResponseOutput{})
	pulumi.RegisterOutputType(ScopeInvokeResponsePtrOutput{})
	pulumi.RegisterOutputType(ScopeResponseOutput{})
	pulumi.RegisterOutputType(ScopeResponsePtrOutput{})
	pulumi.RegisterOutputType(SuppressionOutput{})
	pulumi.RegisterOutputType(SuppressionConfigOutput{})
	pulumi.RegisterOutputType(SuppressionConfigInvokeResponseOutput{})
	pulumi.RegisterOutputType(SuppressionConfigResponseOutput{})
	pulumi.RegisterOutputType(SuppressionInvokeResponseOutput{})
	pulumi.RegisterOutputType(SuppressionResponseOutput{})
	pulumi.RegisterOutputType(SuppressionScheduleOutput{})
	pulumi.RegisterOutputType(SuppressionSchedulePtrOutput{})
	pulumi.RegisterOutputType(SuppressionScheduleInvokeResponseOutput{})
	pulumi.RegisterOutputType(SuppressionScheduleInvokeResponsePtrOutput{})
	pulumi.RegisterOutputType(SuppressionScheduleResponseOutput{})
	pulumi.RegisterOutputType(SuppressionScheduleResponsePtrOutput{})
}
