// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v20181102privatepreview

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// Action rule properties defining scope, conditions, suppression logic for action rule
type ActionRuleProperties struct {
	// Conditions in alert instance to be matched for a given action rule. Default value is all. Multiple values could be provided with comma separation.
	Conditions *Conditions `pulumi:"conditions"`
	// Description of action rule
	Description *string `pulumi:"description"`
	// Target scope for a given action rule. By default scope will be the subscription. User can also provide list of resource groups or list of resources from the scope subscription as well.
	Scope *Scope `pulumi:"scope"`
	// Indicates if the given action rule is enabled or disabled
	Status *string `pulumi:"status"`
	// Suppression logic for a given action rule
	SuppressionConfig *SuppressionConfig `pulumi:"suppressionConfig"`
}

// ActionRulePropertiesInput is an input type that accepts ActionRulePropertiesArgs and ActionRulePropertiesOutput values.
// You can construct a concrete instance of `ActionRulePropertiesInput` via:
//
//          ActionRulePropertiesArgs{...}
type ActionRulePropertiesInput interface {
	pulumi.Input

	ToActionRulePropertiesOutput() ActionRulePropertiesOutput
	ToActionRulePropertiesOutputWithContext(context.Context) ActionRulePropertiesOutput
}

// Action rule properties defining scope, conditions, suppression logic for action rule
type ActionRulePropertiesArgs struct {
	// Conditions in alert instance to be matched for a given action rule. Default value is all. Multiple values could be provided with comma separation.
	Conditions ConditionsPtrInput `pulumi:"conditions"`
	// Description of action rule
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Target scope for a given action rule. By default scope will be the subscription. User can also provide list of resource groups or list of resources from the scope subscription as well.
	Scope ScopePtrInput `pulumi:"scope"`
	// Indicates if the given action rule is enabled or disabled
	Status pulumi.StringPtrInput `pulumi:"status"`
	// Suppression logic for a given action rule
	SuppressionConfig SuppressionConfigPtrInput `pulumi:"suppressionConfig"`
}

func (ActionRulePropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ActionRuleProperties)(nil)).Elem()
}

func (i ActionRulePropertiesArgs) ToActionRulePropertiesOutput() ActionRulePropertiesOutput {
	return i.ToActionRulePropertiesOutputWithContext(context.Background())
}

func (i ActionRulePropertiesArgs) ToActionRulePropertiesOutputWithContext(ctx context.Context) ActionRulePropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ActionRulePropertiesOutput)
}

func (i ActionRulePropertiesArgs) ToActionRulePropertiesPtrOutput() ActionRulePropertiesPtrOutput {
	return i.ToActionRulePropertiesPtrOutputWithContext(context.Background())
}

func (i ActionRulePropertiesArgs) ToActionRulePropertiesPtrOutputWithContext(ctx context.Context) ActionRulePropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ActionRulePropertiesOutput).ToActionRulePropertiesPtrOutputWithContext(ctx)
}

// ActionRulePropertiesPtrInput is an input type that accepts ActionRulePropertiesArgs, ActionRulePropertiesPtr and ActionRulePropertiesPtrOutput values.
// You can construct a concrete instance of `ActionRulePropertiesPtrInput` via:
//
//          ActionRulePropertiesArgs{...}
//
//  or:
//
//          nil
type ActionRulePropertiesPtrInput interface {
	pulumi.Input

	ToActionRulePropertiesPtrOutput() ActionRulePropertiesPtrOutput
	ToActionRulePropertiesPtrOutputWithContext(context.Context) ActionRulePropertiesPtrOutput
}

type actionRulePropertiesPtrType ActionRulePropertiesArgs

func ActionRulePropertiesPtr(v *ActionRulePropertiesArgs) ActionRulePropertiesPtrInput {
	return (*actionRulePropertiesPtrType)(v)
}

func (*actionRulePropertiesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ActionRuleProperties)(nil)).Elem()
}

func (i *actionRulePropertiesPtrType) ToActionRulePropertiesPtrOutput() ActionRulePropertiesPtrOutput {
	return i.ToActionRulePropertiesPtrOutputWithContext(context.Background())
}

func (i *actionRulePropertiesPtrType) ToActionRulePropertiesPtrOutputWithContext(ctx context.Context) ActionRulePropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ActionRulePropertiesPtrOutput)
}

// Action rule properties defining scope, conditions, suppression logic for action rule
type ActionRulePropertiesOutput struct{ *pulumi.OutputState }

func (ActionRulePropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ActionRuleProperties)(nil)).Elem()
}

func (o ActionRulePropertiesOutput) ToActionRulePropertiesOutput() ActionRulePropertiesOutput {
	return o
}

func (o ActionRulePropertiesOutput) ToActionRulePropertiesOutputWithContext(ctx context.Context) ActionRulePropertiesOutput {
	return o
}

func (o ActionRulePropertiesOutput) ToActionRulePropertiesPtrOutput() ActionRulePropertiesPtrOutput {
	return o.ToActionRulePropertiesPtrOutputWithContext(context.Background())
}

func (o ActionRulePropertiesOutput) ToActionRulePropertiesPtrOutputWithContext(ctx context.Context) ActionRulePropertiesPtrOutput {
	return o.ApplyT(func(v ActionRuleProperties) *ActionRuleProperties {
		return &v
	}).(ActionRulePropertiesPtrOutput)
}

// Conditions in alert instance to be matched for a given action rule. Default value is all. Multiple values could be provided with comma separation.
func (o ActionRulePropertiesOutput) Conditions() ConditionsPtrOutput {
	return o.ApplyT(func(v ActionRuleProperties) *Conditions { return v.Conditions }).(ConditionsPtrOutput)
}

// Description of action rule
func (o ActionRulePropertiesOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ActionRuleProperties) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Target scope for a given action rule. By default scope will be the subscription. User can also provide list of resource groups or list of resources from the scope subscription as well.
func (o ActionRulePropertiesOutput) Scope() ScopePtrOutput {
	return o.ApplyT(func(v ActionRuleProperties) *Scope { return v.Scope }).(ScopePtrOutput)
}

// Indicates if the given action rule is enabled or disabled
func (o ActionRulePropertiesOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ActionRuleProperties) *string { return v.Status }).(pulumi.StringPtrOutput)
}

// Suppression logic for a given action rule
func (o ActionRulePropertiesOutput) SuppressionConfig() SuppressionConfigPtrOutput {
	return o.ApplyT(func(v ActionRuleProperties) *SuppressionConfig { return v.SuppressionConfig }).(SuppressionConfigPtrOutput)
}

type ActionRulePropertiesPtrOutput struct{ *pulumi.OutputState }

func (ActionRulePropertiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ActionRuleProperties)(nil)).Elem()
}

func (o ActionRulePropertiesPtrOutput) ToActionRulePropertiesPtrOutput() ActionRulePropertiesPtrOutput {
	return o
}

func (o ActionRulePropertiesPtrOutput) ToActionRulePropertiesPtrOutputWithContext(ctx context.Context) ActionRulePropertiesPtrOutput {
	return o
}

func (o ActionRulePropertiesPtrOutput) Elem() ActionRulePropertiesOutput {
	return o.ApplyT(func(v *ActionRuleProperties) ActionRuleProperties { return *v }).(ActionRulePropertiesOutput)
}

// Conditions in alert instance to be matched for a given action rule. Default value is all. Multiple values could be provided with comma separation.
func (o ActionRulePropertiesPtrOutput) Conditions() ConditionsPtrOutput {
	return o.ApplyT(func(v *ActionRuleProperties) *Conditions {
		if v == nil {
			return nil
		}
		return v.Conditions
	}).(ConditionsPtrOutput)
}

// Description of action rule
func (o ActionRulePropertiesPtrOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ActionRuleProperties) *string {
		if v == nil {
			return nil
		}
		return v.Description
	}).(pulumi.StringPtrOutput)
}

// Target scope for a given action rule. By default scope will be the subscription. User can also provide list of resource groups or list of resources from the scope subscription as well.
func (o ActionRulePropertiesPtrOutput) Scope() ScopePtrOutput {
	return o.ApplyT(func(v *ActionRuleProperties) *Scope {
		if v == nil {
			return nil
		}
		return v.Scope
	}).(ScopePtrOutput)
}

// Indicates if the given action rule is enabled or disabled
func (o ActionRulePropertiesPtrOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ActionRuleProperties) *string {
		if v == nil {
			return nil
		}
		return v.Status
	}).(pulumi.StringPtrOutput)
}

// Suppression logic for a given action rule
func (o ActionRulePropertiesPtrOutput) SuppressionConfig() SuppressionConfigPtrOutput {
	return o.ApplyT(func(v *ActionRuleProperties) *SuppressionConfig {
		if v == nil {
			return nil
		}
		return v.SuppressionConfig
	}).(SuppressionConfigPtrOutput)
}

// Action rule properties defining scope, conditions, suppression logic for action rule
type ActionRulePropertiesInvokeResponse struct {
	// Conditions in alert instance to be matched for a given action rule. Default value is all. Multiple values could be provided with comma separation.
	Conditions *ConditionsInvokeResponse `pulumi:"conditions"`
	// Creation time of action rule. Date-Time in ISO-8601 format.
	CreatedAt string `pulumi:"createdAt"`
	// Created by user name.
	CreatedBy string `pulumi:"createdBy"`
	// Description of action rule
	Description *string `pulumi:"description"`
	// Last updated time of action rule. Date-Time in ISO-8601 format.
	LastModifiedAt string `pulumi:"lastModifiedAt"`
	// Last modified by user name.
	LastModifiedBy string `pulumi:"lastModifiedBy"`
	// Resource group where action rule is stored
	ResourceGroup string `pulumi:"resourceGroup"`
	// Target scope for a given action rule. By default scope will be the subscription. User can also provide list of resource groups or list of resources from the scope subscription as well.
	Scope *ScopeInvokeResponse `pulumi:"scope"`
	// Indicates if the given action rule is enabled or disabled
	Status *string `pulumi:"status"`
	// Suppression logic for a given action rule
	SuppressionConfig *SuppressionConfigInvokeResponse `pulumi:"suppressionConfig"`
}

// ActionRulePropertiesInvokeResponseInput is an input type that accepts ActionRulePropertiesInvokeResponseArgs and ActionRulePropertiesInvokeResponseOutput values.
// You can construct a concrete instance of `ActionRulePropertiesInvokeResponseInput` via:
//
//          ActionRulePropertiesInvokeResponseArgs{...}
type ActionRulePropertiesInvokeResponseInput interface {
	pulumi.Input

	ToActionRulePropertiesInvokeResponseOutput() ActionRulePropertiesInvokeResponseOutput
	ToActionRulePropertiesInvokeResponseOutputWithContext(context.Context) ActionRulePropertiesInvokeResponseOutput
}

// Action rule properties defining scope, conditions, suppression logic for action rule
type ActionRulePropertiesInvokeResponseArgs struct {
	// Conditions in alert instance to be matched for a given action rule. Default value is all. Multiple values could be provided with comma separation.
	Conditions ConditionsInvokeResponsePtrInput `pulumi:"conditions"`
	// Creation time of action rule. Date-Time in ISO-8601 format.
	CreatedAt pulumi.StringInput `pulumi:"createdAt"`
	// Created by user name.
	CreatedBy pulumi.StringInput `pulumi:"createdBy"`
	// Description of action rule
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Last updated time of action rule. Date-Time in ISO-8601 format.
	LastModifiedAt pulumi.StringInput `pulumi:"lastModifiedAt"`
	// Last modified by user name.
	LastModifiedBy pulumi.StringInput `pulumi:"lastModifiedBy"`
	// Resource group where action rule is stored
	ResourceGroup pulumi.StringInput `pulumi:"resourceGroup"`
	// Target scope for a given action rule. By default scope will be the subscription. User can also provide list of resource groups or list of resources from the scope subscription as well.
	Scope ScopeInvokeResponsePtrInput `pulumi:"scope"`
	// Indicates if the given action rule is enabled or disabled
	Status pulumi.StringPtrInput `pulumi:"status"`
	// Suppression logic for a given action rule
	SuppressionConfig SuppressionConfigInvokeResponsePtrInput `pulumi:"suppressionConfig"`
}

func (ActionRulePropertiesInvokeResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ActionRulePropertiesInvokeResponse)(nil)).Elem()
}

func (i ActionRulePropertiesInvokeResponseArgs) ToActionRulePropertiesInvokeResponseOutput() ActionRulePropertiesInvokeResponseOutput {
	return i.ToActionRulePropertiesInvokeResponseOutputWithContext(context.Background())
}

func (i ActionRulePropertiesInvokeResponseArgs) ToActionRulePropertiesInvokeResponseOutputWithContext(ctx context.Context) ActionRulePropertiesInvokeResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ActionRulePropertiesInvokeResponseOutput)
}

// Action rule properties defining scope, conditions, suppression logic for action rule
type ActionRulePropertiesInvokeResponseOutput struct{ *pulumi.OutputState }

func (ActionRulePropertiesInvokeResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ActionRulePropertiesInvokeResponse)(nil)).Elem()
}

func (o ActionRulePropertiesInvokeResponseOutput) ToActionRulePropertiesInvokeResponseOutput() ActionRulePropertiesInvokeResponseOutput {
	return o
}

func (o ActionRulePropertiesInvokeResponseOutput) ToActionRulePropertiesInvokeResponseOutputWithContext(ctx context.Context) ActionRulePropertiesInvokeResponseOutput {
	return o
}

// Conditions in alert instance to be matched for a given action rule. Default value is all. Multiple values could be provided with comma separation.
func (o ActionRulePropertiesInvokeResponseOutput) Conditions() ConditionsInvokeResponsePtrOutput {
	return o.ApplyT(func(v ActionRulePropertiesInvokeResponse) *ConditionsInvokeResponse { return v.Conditions }).(ConditionsInvokeResponsePtrOutput)
}

// Creation time of action rule. Date-Time in ISO-8601 format.
func (o ActionRulePropertiesInvokeResponseOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v ActionRulePropertiesInvokeResponse) string { return v.CreatedAt }).(pulumi.StringOutput)
}

// Created by user name.
func (o ActionRulePropertiesInvokeResponseOutput) CreatedBy() pulumi.StringOutput {
	return o.ApplyT(func(v ActionRulePropertiesInvokeResponse) string { return v.CreatedBy }).(pulumi.StringOutput)
}

// Description of action rule
func (o ActionRulePropertiesInvokeResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ActionRulePropertiesInvokeResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Last updated time of action rule. Date-Time in ISO-8601 format.
func (o ActionRulePropertiesInvokeResponseOutput) LastModifiedAt() pulumi.StringOutput {
	return o.ApplyT(func(v ActionRulePropertiesInvokeResponse) string { return v.LastModifiedAt }).(pulumi.StringOutput)
}

// Last modified by user name.
func (o ActionRulePropertiesInvokeResponseOutput) LastModifiedBy() pulumi.StringOutput {
	return o.ApplyT(func(v ActionRulePropertiesInvokeResponse) string { return v.LastModifiedBy }).(pulumi.StringOutput)
}

// Resource group where action rule is stored
func (o ActionRulePropertiesInvokeResponseOutput) ResourceGroup() pulumi.StringOutput {
	return o.ApplyT(func(v ActionRulePropertiesInvokeResponse) string { return v.ResourceGroup }).(pulumi.StringOutput)
}

// Target scope for a given action rule. By default scope will be the subscription. User can also provide list of resource groups or list of resources from the scope subscription as well.
func (o ActionRulePropertiesInvokeResponseOutput) Scope() ScopeInvokeResponsePtrOutput {
	return o.ApplyT(func(v ActionRulePropertiesInvokeResponse) *ScopeInvokeResponse { return v.Scope }).(ScopeInvokeResponsePtrOutput)
}

// Indicates if the given action rule is enabled or disabled
func (o ActionRulePropertiesInvokeResponseOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ActionRulePropertiesInvokeResponse) *string { return v.Status }).(pulumi.StringPtrOutput)
}

// Suppression logic for a given action rule
func (o ActionRulePropertiesInvokeResponseOutput) SuppressionConfig() SuppressionConfigInvokeResponsePtrOutput {
	return o.ApplyT(func(v ActionRulePropertiesInvokeResponse) *SuppressionConfigInvokeResponse {
		return v.SuppressionConfig
	}).(SuppressionConfigInvokeResponsePtrOutput)
}

// Action rule properties defining scope, conditions, suppression logic for action rule
type ActionRulePropertiesResponse struct {
	// Conditions in alert instance to be matched for a given action rule. Default value is all. Multiple values could be provided with comma separation.
	Conditions *ConditionsResponse `pulumi:"conditions"`
	// Creation time of action rule. Date-Time in ISO-8601 format.
	CreatedAt string `pulumi:"createdAt"`
	// Created by user name.
	CreatedBy string `pulumi:"createdBy"`
	// Description of action rule
	Description *string `pulumi:"description"`
	// Last updated time of action rule. Date-Time in ISO-8601 format.
	LastModifiedAt string `pulumi:"lastModifiedAt"`
	// Last modified by user name.
	LastModifiedBy string `pulumi:"lastModifiedBy"`
	// Resource group where action rule is stored
	ResourceGroup string `pulumi:"resourceGroup"`
	// Target scope for a given action rule. By default scope will be the subscription. User can also provide list of resource groups or list of resources from the scope subscription as well.
	Scope *ScopeResponse `pulumi:"scope"`
	// Indicates if the given action rule is enabled or disabled
	Status *string `pulumi:"status"`
	// Suppression logic for a given action rule
	SuppressionConfig *SuppressionConfigResponse `pulumi:"suppressionConfig"`
}

// ActionRulePropertiesResponseInput is an input type that accepts ActionRulePropertiesResponseArgs and ActionRulePropertiesResponseOutput values.
// You can construct a concrete instance of `ActionRulePropertiesResponseInput` via:
//
//          ActionRulePropertiesResponseArgs{...}
type ActionRulePropertiesResponseInput interface {
	pulumi.Input

	ToActionRulePropertiesResponseOutput() ActionRulePropertiesResponseOutput
	ToActionRulePropertiesResponseOutputWithContext(context.Context) ActionRulePropertiesResponseOutput
}

// Action rule properties defining scope, conditions, suppression logic for action rule
type ActionRulePropertiesResponseArgs struct {
	// Conditions in alert instance to be matched for a given action rule. Default value is all. Multiple values could be provided with comma separation.
	Conditions ConditionsResponsePtrInput `pulumi:"conditions"`
	// Creation time of action rule. Date-Time in ISO-8601 format.
	CreatedAt pulumi.StringInput `pulumi:"createdAt"`
	// Created by user name.
	CreatedBy pulumi.StringInput `pulumi:"createdBy"`
	// Description of action rule
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Last updated time of action rule. Date-Time in ISO-8601 format.
	LastModifiedAt pulumi.StringInput `pulumi:"lastModifiedAt"`
	// Last modified by user name.
	LastModifiedBy pulumi.StringInput `pulumi:"lastModifiedBy"`
	// Resource group where action rule is stored
	ResourceGroup pulumi.StringInput `pulumi:"resourceGroup"`
	// Target scope for a given action rule. By default scope will be the subscription. User can also provide list of resource groups or list of resources from the scope subscription as well.
	Scope ScopeResponsePtrInput `pulumi:"scope"`
	// Indicates if the given action rule is enabled or disabled
	Status pulumi.StringPtrInput `pulumi:"status"`
	// Suppression logic for a given action rule
	SuppressionConfig SuppressionConfigResponsePtrInput `pulumi:"suppressionConfig"`
}

func (ActionRulePropertiesResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ActionRulePropertiesResponse)(nil)).Elem()
}

func (i ActionRulePropertiesResponseArgs) ToActionRulePropertiesResponseOutput() ActionRulePropertiesResponseOutput {
	return i.ToActionRulePropertiesResponseOutputWithContext(context.Background())
}

func (i ActionRulePropertiesResponseArgs) ToActionRulePropertiesResponseOutputWithContext(ctx context.Context) ActionRulePropertiesResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ActionRulePropertiesResponseOutput)
}

func (i ActionRulePropertiesResponseArgs) ToActionRulePropertiesResponsePtrOutput() ActionRulePropertiesResponsePtrOutput {
	return i.ToActionRulePropertiesResponsePtrOutputWithContext(context.Background())
}

func (i ActionRulePropertiesResponseArgs) ToActionRulePropertiesResponsePtrOutputWithContext(ctx context.Context) ActionRulePropertiesResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ActionRulePropertiesResponseOutput).ToActionRulePropertiesResponsePtrOutputWithContext(ctx)
}

// ActionRulePropertiesResponsePtrInput is an input type that accepts ActionRulePropertiesResponseArgs, ActionRulePropertiesResponsePtr and ActionRulePropertiesResponsePtrOutput values.
// You can construct a concrete instance of `ActionRulePropertiesResponsePtrInput` via:
//
//          ActionRulePropertiesResponseArgs{...}
//
//  or:
//
//          nil
type ActionRulePropertiesResponsePtrInput interface {
	pulumi.Input

	ToActionRulePropertiesResponsePtrOutput() ActionRulePropertiesResponsePtrOutput
	ToActionRulePropertiesResponsePtrOutputWithContext(context.Context) ActionRulePropertiesResponsePtrOutput
}

type actionRulePropertiesResponsePtrType ActionRulePropertiesResponseArgs

func ActionRulePropertiesResponsePtr(v *ActionRulePropertiesResponseArgs) ActionRulePropertiesResponsePtrInput {
	return (*actionRulePropertiesResponsePtrType)(v)
}

func (*actionRulePropertiesResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ActionRulePropertiesResponse)(nil)).Elem()
}

func (i *actionRulePropertiesResponsePtrType) ToActionRulePropertiesResponsePtrOutput() ActionRulePropertiesResponsePtrOutput {
	return i.ToActionRulePropertiesResponsePtrOutputWithContext(context.Background())
}

func (i *actionRulePropertiesResponsePtrType) ToActionRulePropertiesResponsePtrOutputWithContext(ctx context.Context) ActionRulePropertiesResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ActionRulePropertiesResponsePtrOutput)
}

// Action rule properties defining scope, conditions, suppression logic for action rule
type ActionRulePropertiesResponseOutput struct{ *pulumi.OutputState }

func (ActionRulePropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ActionRulePropertiesResponse)(nil)).Elem()
}

func (o ActionRulePropertiesResponseOutput) ToActionRulePropertiesResponseOutput() ActionRulePropertiesResponseOutput {
	return o
}

func (o ActionRulePropertiesResponseOutput) ToActionRulePropertiesResponseOutputWithContext(ctx context.Context) ActionRulePropertiesResponseOutput {
	return o
}

func (o ActionRulePropertiesResponseOutput) ToActionRulePropertiesResponsePtrOutput() ActionRulePropertiesResponsePtrOutput {
	return o.ToActionRulePropertiesResponsePtrOutputWithContext(context.Background())
}

func (o ActionRulePropertiesResponseOutput) ToActionRulePropertiesResponsePtrOutputWithContext(ctx context.Context) ActionRulePropertiesResponsePtrOutput {
	return o.ApplyT(func(v ActionRulePropertiesResponse) *ActionRulePropertiesResponse {
		return &v
	}).(ActionRulePropertiesResponsePtrOutput)
}

// Conditions in alert instance to be matched for a given action rule. Default value is all. Multiple values could be provided with comma separation.
func (o ActionRulePropertiesResponseOutput) Conditions() ConditionsResponsePtrOutput {
	return o.ApplyT(func(v ActionRulePropertiesResponse) *ConditionsResponse { return v.Conditions }).(ConditionsResponsePtrOutput)
}

// Creation time of action rule. Date-Time in ISO-8601 format.
func (o ActionRulePropertiesResponseOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v ActionRulePropertiesResponse) string { return v.CreatedAt }).(pulumi.StringOutput)
}

// Created by user name.
func (o ActionRulePropertiesResponseOutput) CreatedBy() pulumi.StringOutput {
	return o.ApplyT(func(v ActionRulePropertiesResponse) string { return v.CreatedBy }).(pulumi.StringOutput)
}

// Description of action rule
func (o ActionRulePropertiesResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ActionRulePropertiesResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Last updated time of action rule. Date-Time in ISO-8601 format.
func (o ActionRulePropertiesResponseOutput) LastModifiedAt() pulumi.StringOutput {
	return o.ApplyT(func(v ActionRulePropertiesResponse) string { return v.LastModifiedAt }).(pulumi.StringOutput)
}

// Last modified by user name.
func (o ActionRulePropertiesResponseOutput) LastModifiedBy() pulumi.StringOutput {
	return o.ApplyT(func(v ActionRulePropertiesResponse) string { return v.LastModifiedBy }).(pulumi.StringOutput)
}

// Resource group where action rule is stored
func (o ActionRulePropertiesResponseOutput) ResourceGroup() pulumi.StringOutput {
	return o.ApplyT(func(v ActionRulePropertiesResponse) string { return v.ResourceGroup }).(pulumi.StringOutput)
}

// Target scope for a given action rule. By default scope will be the subscription. User can also provide list of resource groups or list of resources from the scope subscription as well.
func (o ActionRulePropertiesResponseOutput) Scope() ScopeResponsePtrOutput {
	return o.ApplyT(func(v ActionRulePropertiesResponse) *ScopeResponse { return v.Scope }).(ScopeResponsePtrOutput)
}

// Indicates if the given action rule is enabled or disabled
func (o ActionRulePropertiesResponseOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ActionRulePropertiesResponse) *string { return v.Status }).(pulumi.StringPtrOutput)
}

// Suppression logic for a given action rule
func (o ActionRulePropertiesResponseOutput) SuppressionConfig() SuppressionConfigResponsePtrOutput {
	return o.ApplyT(func(v ActionRulePropertiesResponse) *SuppressionConfigResponse { return v.SuppressionConfig }).(SuppressionConfigResponsePtrOutput)
}

type ActionRulePropertiesResponsePtrOutput struct{ *pulumi.OutputState }

func (ActionRulePropertiesResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ActionRulePropertiesResponse)(nil)).Elem()
}

func (o ActionRulePropertiesResponsePtrOutput) ToActionRulePropertiesResponsePtrOutput() ActionRulePropertiesResponsePtrOutput {
	return o
}

func (o ActionRulePropertiesResponsePtrOutput) ToActionRulePropertiesResponsePtrOutputWithContext(ctx context.Context) ActionRulePropertiesResponsePtrOutput {
	return o
}

func (o ActionRulePropertiesResponsePtrOutput) Elem() ActionRulePropertiesResponseOutput {
	return o.ApplyT(func(v *ActionRulePropertiesResponse) ActionRulePropertiesResponse { return *v }).(ActionRulePropertiesResponseOutput)
}

// Conditions in alert instance to be matched for a given action rule. Default value is all. Multiple values could be provided with comma separation.
func (o ActionRulePropertiesResponsePtrOutput) Conditions() ConditionsResponsePtrOutput {
	return o.ApplyT(func(v *ActionRulePropertiesResponse) *ConditionsResponse {
		if v == nil {
			return nil
		}
		return v.Conditions
	}).(ConditionsResponsePtrOutput)
}

// Creation time of action rule. Date-Time in ISO-8601 format.
func (o ActionRulePropertiesResponsePtrOutput) CreatedAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ActionRulePropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return &v.CreatedAt
	}).(pulumi.StringPtrOutput)
}

// Created by user name.
func (o ActionRulePropertiesResponsePtrOutput) CreatedBy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ActionRulePropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return &v.CreatedBy
	}).(pulumi.StringPtrOutput)
}

// Description of action rule
func (o ActionRulePropertiesResponsePtrOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ActionRulePropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return v.Description
	}).(pulumi.StringPtrOutput)
}

// Last updated time of action rule. Date-Time in ISO-8601 format.
func (o ActionRulePropertiesResponsePtrOutput) LastModifiedAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ActionRulePropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return &v.LastModifiedAt
	}).(pulumi.StringPtrOutput)
}

// Last modified by user name.
func (o ActionRulePropertiesResponsePtrOutput) LastModifiedBy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ActionRulePropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return &v.LastModifiedBy
	}).(pulumi.StringPtrOutput)
}

// Resource group where action rule is stored
func (o ActionRulePropertiesResponsePtrOutput) ResourceGroup() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ActionRulePropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return &v.ResourceGroup
	}).(pulumi.StringPtrOutput)
}

// Target scope for a given action rule. By default scope will be the subscription. User can also provide list of resource groups or list of resources from the scope subscription as well.
func (o ActionRulePropertiesResponsePtrOutput) Scope() ScopeResponsePtrOutput {
	return o.ApplyT(func(v *ActionRulePropertiesResponse) *ScopeResponse {
		if v == nil {
			return nil
		}
		return v.Scope
	}).(ScopeResponsePtrOutput)
}

// Indicates if the given action rule is enabled or disabled
func (o ActionRulePropertiesResponsePtrOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ActionRulePropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return v.Status
	}).(pulumi.StringPtrOutput)
}

// Suppression logic for a given action rule
func (o ActionRulePropertiesResponsePtrOutput) SuppressionConfig() SuppressionConfigResponsePtrOutput {
	return o.ApplyT(func(v *ActionRulePropertiesResponse) *SuppressionConfigResponse {
		if v == nil {
			return nil
		}
		return v.SuppressionConfig
	}).(SuppressionConfigResponsePtrOutput)
}

// condition to trigger an action rule
type Condition struct {
	// operator for a given condition
	Operator *string `pulumi:"operator"`
	// list of values to match for a given condition.
	Values []string `pulumi:"values"`
}

// ConditionInput is an input type that accepts ConditionArgs and ConditionOutput values.
// You can construct a concrete instance of `ConditionInput` via:
//
//          ConditionArgs{...}
type ConditionInput interface {
	pulumi.Input

	ToConditionOutput() ConditionOutput
	ToConditionOutputWithContext(context.Context) ConditionOutput
}

// condition to trigger an action rule
type ConditionArgs struct {
	// operator for a given condition
	Operator pulumi.StringPtrInput `pulumi:"operator"`
	// list of values to match for a given condition.
	Values pulumi.StringArrayInput `pulumi:"values"`
}

func (ConditionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Condition)(nil)).Elem()
}

func (i ConditionArgs) ToConditionOutput() ConditionOutput {
	return i.ToConditionOutputWithContext(context.Background())
}

func (i ConditionArgs) ToConditionOutputWithContext(ctx context.Context) ConditionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConditionOutput)
}

func (i ConditionArgs) ToConditionPtrOutput() ConditionPtrOutput {
	return i.ToConditionPtrOutputWithContext(context.Background())
}

func (i ConditionArgs) ToConditionPtrOutputWithContext(ctx context.Context) ConditionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConditionOutput).ToConditionPtrOutputWithContext(ctx)
}

// ConditionPtrInput is an input type that accepts ConditionArgs, ConditionPtr and ConditionPtrOutput values.
// You can construct a concrete instance of `ConditionPtrInput` via:
//
//          ConditionArgs{...}
//
//  or:
//
//          nil
type ConditionPtrInput interface {
	pulumi.Input

	ToConditionPtrOutput() ConditionPtrOutput
	ToConditionPtrOutputWithContext(context.Context) ConditionPtrOutput
}

type conditionPtrType ConditionArgs

func ConditionPtr(v *ConditionArgs) ConditionPtrInput {
	return (*conditionPtrType)(v)
}

func (*conditionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Condition)(nil)).Elem()
}

func (i *conditionPtrType) ToConditionPtrOutput() ConditionPtrOutput {
	return i.ToConditionPtrOutputWithContext(context.Background())
}

func (i *conditionPtrType) ToConditionPtrOutputWithContext(ctx context.Context) ConditionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConditionPtrOutput)
}

// condition to trigger an action rule
type ConditionOutput struct{ *pulumi.OutputState }

func (ConditionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Condition)(nil)).Elem()
}

func (o ConditionOutput) ToConditionOutput() ConditionOutput {
	return o
}

func (o ConditionOutput) ToConditionOutputWithContext(ctx context.Context) ConditionOutput {
	return o
}

func (o ConditionOutput) ToConditionPtrOutput() ConditionPtrOutput {
	return o.ToConditionPtrOutputWithContext(context.Background())
}

func (o ConditionOutput) ToConditionPtrOutputWithContext(ctx context.Context) ConditionPtrOutput {
	return o.ApplyT(func(v Condition) *Condition {
		return &v
	}).(ConditionPtrOutput)
}

// operator for a given condition
func (o ConditionOutput) Operator() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Condition) *string { return v.Operator }).(pulumi.StringPtrOutput)
}

// list of values to match for a given condition.
func (o ConditionOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v Condition) []string { return v.Values }).(pulumi.StringArrayOutput)
}

type ConditionPtrOutput struct{ *pulumi.OutputState }

func (ConditionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Condition)(nil)).Elem()
}

func (o ConditionPtrOutput) ToConditionPtrOutput() ConditionPtrOutput {
	return o
}

func (o ConditionPtrOutput) ToConditionPtrOutputWithContext(ctx context.Context) ConditionPtrOutput {
	return o
}

func (o ConditionPtrOutput) Elem() ConditionOutput {
	return o.ApplyT(func(v *Condition) Condition { return *v }).(ConditionOutput)
}

// operator for a given condition
func (o ConditionPtrOutput) Operator() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Condition) *string {
		if v == nil {
			return nil
		}
		return v.Operator
	}).(pulumi.StringPtrOutput)
}

// list of values to match for a given condition.
func (o ConditionPtrOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Condition) []string {
		if v == nil {
			return nil
		}
		return v.Values
	}).(pulumi.StringArrayOutput)
}

// condition to trigger an action rule
type ConditionInvokeResponse struct {
	// operator for a given condition
	Operator *string `pulumi:"operator"`
	// list of values to match for a given condition.
	Values []string `pulumi:"values"`
}

// ConditionInvokeResponseInput is an input type that accepts ConditionInvokeResponseArgs and ConditionInvokeResponseOutput values.
// You can construct a concrete instance of `ConditionInvokeResponseInput` via:
//
//          ConditionInvokeResponseArgs{...}
type ConditionInvokeResponseInput interface {
	pulumi.Input

	ToConditionInvokeResponseOutput() ConditionInvokeResponseOutput
	ToConditionInvokeResponseOutputWithContext(context.Context) ConditionInvokeResponseOutput
}

// condition to trigger an action rule
type ConditionInvokeResponseArgs struct {
	// operator for a given condition
	Operator pulumi.StringPtrInput `pulumi:"operator"`
	// list of values to match for a given condition.
	Values pulumi.StringArrayInput `pulumi:"values"`
}

func (ConditionInvokeResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ConditionInvokeResponse)(nil)).Elem()
}

func (i ConditionInvokeResponseArgs) ToConditionInvokeResponseOutput() ConditionInvokeResponseOutput {
	return i.ToConditionInvokeResponseOutputWithContext(context.Background())
}

func (i ConditionInvokeResponseArgs) ToConditionInvokeResponseOutputWithContext(ctx context.Context) ConditionInvokeResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConditionInvokeResponseOutput)
}

func (i ConditionInvokeResponseArgs) ToConditionInvokeResponsePtrOutput() ConditionInvokeResponsePtrOutput {
	return i.ToConditionInvokeResponsePtrOutputWithContext(context.Background())
}

func (i ConditionInvokeResponseArgs) ToConditionInvokeResponsePtrOutputWithContext(ctx context.Context) ConditionInvokeResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConditionInvokeResponseOutput).ToConditionInvokeResponsePtrOutputWithContext(ctx)
}

// ConditionInvokeResponsePtrInput is an input type that accepts ConditionInvokeResponseArgs, ConditionInvokeResponsePtr and ConditionInvokeResponsePtrOutput values.
// You can construct a concrete instance of `ConditionInvokeResponsePtrInput` via:
//
//          ConditionInvokeResponseArgs{...}
//
//  or:
//
//          nil
type ConditionInvokeResponsePtrInput interface {
	pulumi.Input

	ToConditionInvokeResponsePtrOutput() ConditionInvokeResponsePtrOutput
	ToConditionInvokeResponsePtrOutputWithContext(context.Context) ConditionInvokeResponsePtrOutput
}

type conditionInvokeResponsePtrType ConditionInvokeResponseArgs

func ConditionInvokeResponsePtr(v *ConditionInvokeResponseArgs) ConditionInvokeResponsePtrInput {
	return (*conditionInvokeResponsePtrType)(v)
}

func (*conditionInvokeResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ConditionInvokeResponse)(nil)).Elem()
}

func (i *conditionInvokeResponsePtrType) ToConditionInvokeResponsePtrOutput() ConditionInvokeResponsePtrOutput {
	return i.ToConditionInvokeResponsePtrOutputWithContext(context.Background())
}

func (i *conditionInvokeResponsePtrType) ToConditionInvokeResponsePtrOutputWithContext(ctx context.Context) ConditionInvokeResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConditionInvokeResponsePtrOutput)
}

// condition to trigger an action rule
type ConditionInvokeResponseOutput struct{ *pulumi.OutputState }

func (ConditionInvokeResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConditionInvokeResponse)(nil)).Elem()
}

func (o ConditionInvokeResponseOutput) ToConditionInvokeResponseOutput() ConditionInvokeResponseOutput {
	return o
}

func (o ConditionInvokeResponseOutput) ToConditionInvokeResponseOutputWithContext(ctx context.Context) ConditionInvokeResponseOutput {
	return o
}

func (o ConditionInvokeResponseOutput) ToConditionInvokeResponsePtrOutput() ConditionInvokeResponsePtrOutput {
	return o.ToConditionInvokeResponsePtrOutputWithContext(context.Background())
}

func (o ConditionInvokeResponseOutput) ToConditionInvokeResponsePtrOutputWithContext(ctx context.Context) ConditionInvokeResponsePtrOutput {
	return o.ApplyT(func(v ConditionInvokeResponse) *ConditionInvokeResponse {
		return &v
	}).(ConditionInvokeResponsePtrOutput)
}

// operator for a given condition
func (o ConditionInvokeResponseOutput) Operator() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ConditionInvokeResponse) *string { return v.Operator }).(pulumi.StringPtrOutput)
}

// list of values to match for a given condition.
func (o ConditionInvokeResponseOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ConditionInvokeResponse) []string { return v.Values }).(pulumi.StringArrayOutput)
}

type ConditionInvokeResponsePtrOutput struct{ *pulumi.OutputState }

func (ConditionInvokeResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ConditionInvokeResponse)(nil)).Elem()
}

func (o ConditionInvokeResponsePtrOutput) ToConditionInvokeResponsePtrOutput() ConditionInvokeResponsePtrOutput {
	return o
}

func (o ConditionInvokeResponsePtrOutput) ToConditionInvokeResponsePtrOutputWithContext(ctx context.Context) ConditionInvokeResponsePtrOutput {
	return o
}

func (o ConditionInvokeResponsePtrOutput) Elem() ConditionInvokeResponseOutput {
	return o.ApplyT(func(v *ConditionInvokeResponse) ConditionInvokeResponse { return *v }).(ConditionInvokeResponseOutput)
}

// operator for a given condition
func (o ConditionInvokeResponsePtrOutput) Operator() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConditionInvokeResponse) *string {
		if v == nil {
			return nil
		}
		return v.Operator
	}).(pulumi.StringPtrOutput)
}

// list of values to match for a given condition.
func (o ConditionInvokeResponsePtrOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ConditionInvokeResponse) []string {
		if v == nil {
			return nil
		}
		return v.Values
	}).(pulumi.StringArrayOutput)
}

// condition to trigger an action rule
type ConditionResponse struct {
	// operator for a given condition
	Operator *string `pulumi:"operator"`
	// list of values to match for a given condition.
	Values []string `pulumi:"values"`
}

// ConditionResponseInput is an input type that accepts ConditionResponseArgs and ConditionResponseOutput values.
// You can construct a concrete instance of `ConditionResponseInput` via:
//
//          ConditionResponseArgs{...}
type ConditionResponseInput interface {
	pulumi.Input

	ToConditionResponseOutput() ConditionResponseOutput
	ToConditionResponseOutputWithContext(context.Context) ConditionResponseOutput
}

// condition to trigger an action rule
type ConditionResponseArgs struct {
	// operator for a given condition
	Operator pulumi.StringPtrInput `pulumi:"operator"`
	// list of values to match for a given condition.
	Values pulumi.StringArrayInput `pulumi:"values"`
}

func (ConditionResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ConditionResponse)(nil)).Elem()
}

func (i ConditionResponseArgs) ToConditionResponseOutput() ConditionResponseOutput {
	return i.ToConditionResponseOutputWithContext(context.Background())
}

func (i ConditionResponseArgs) ToConditionResponseOutputWithContext(ctx context.Context) ConditionResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConditionResponseOutput)
}

func (i ConditionResponseArgs) ToConditionResponsePtrOutput() ConditionResponsePtrOutput {
	return i.ToConditionResponsePtrOutputWithContext(context.Background())
}

func (i ConditionResponseArgs) ToConditionResponsePtrOutputWithContext(ctx context.Context) ConditionResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConditionResponseOutput).ToConditionResponsePtrOutputWithContext(ctx)
}

// ConditionResponsePtrInput is an input type that accepts ConditionResponseArgs, ConditionResponsePtr and ConditionResponsePtrOutput values.
// You can construct a concrete instance of `ConditionResponsePtrInput` via:
//
//          ConditionResponseArgs{...}
//
//  or:
//
//          nil
type ConditionResponsePtrInput interface {
	pulumi.Input

	ToConditionResponsePtrOutput() ConditionResponsePtrOutput
	ToConditionResponsePtrOutputWithContext(context.Context) ConditionResponsePtrOutput
}

type conditionResponsePtrType ConditionResponseArgs

func ConditionResponsePtr(v *ConditionResponseArgs) ConditionResponsePtrInput {
	return (*conditionResponsePtrType)(v)
}

func (*conditionResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ConditionResponse)(nil)).Elem()
}

func (i *conditionResponsePtrType) ToConditionResponsePtrOutput() ConditionResponsePtrOutput {
	return i.ToConditionResponsePtrOutputWithContext(context.Background())
}

func (i *conditionResponsePtrType) ToConditionResponsePtrOutputWithContext(ctx context.Context) ConditionResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConditionResponsePtrOutput)
}

// condition to trigger an action rule
type ConditionResponseOutput struct{ *pulumi.OutputState }

func (ConditionResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConditionResponse)(nil)).Elem()
}

func (o ConditionResponseOutput) ToConditionResponseOutput() ConditionResponseOutput {
	return o
}

func (o ConditionResponseOutput) ToConditionResponseOutputWithContext(ctx context.Context) ConditionResponseOutput {
	return o
}

func (o ConditionResponseOutput) ToConditionResponsePtrOutput() ConditionResponsePtrOutput {
	return o.ToConditionResponsePtrOutputWithContext(context.Background())
}

func (o ConditionResponseOutput) ToConditionResponsePtrOutputWithContext(ctx context.Context) ConditionResponsePtrOutput {
	return o.ApplyT(func(v ConditionResponse) *ConditionResponse {
		return &v
	}).(ConditionResponsePtrOutput)
}

// operator for a given condition
func (o ConditionResponseOutput) Operator() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ConditionResponse) *string { return v.Operator }).(pulumi.StringPtrOutput)
}

// list of values to match for a given condition.
func (o ConditionResponseOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ConditionResponse) []string { return v.Values }).(pulumi.StringArrayOutput)
}

type ConditionResponsePtrOutput struct{ *pulumi.OutputState }

func (ConditionResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ConditionResponse)(nil)).Elem()
}

func (o ConditionResponsePtrOutput) ToConditionResponsePtrOutput() ConditionResponsePtrOutput {
	return o
}

func (o ConditionResponsePtrOutput) ToConditionResponsePtrOutputWithContext(ctx context.Context) ConditionResponsePtrOutput {
	return o
}

func (o ConditionResponsePtrOutput) Elem() ConditionResponseOutput {
	return o.ApplyT(func(v *ConditionResponse) ConditionResponse { return *v }).(ConditionResponseOutput)
}

// operator for a given condition
func (o ConditionResponsePtrOutput) Operator() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConditionResponse) *string {
		if v == nil {
			return nil
		}
		return v.Operator
	}).(pulumi.StringPtrOutput)
}

// list of values to match for a given condition.
func (o ConditionResponsePtrOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ConditionResponse) []string {
		if v == nil {
			return nil
		}
		return v.Values
	}).(pulumi.StringArrayOutput)
}

// Conditions in alert instance to be matched for a given action rule. Default value is all. Multiple values could be provided with comma separation.
type Conditions struct {
	// condition to trigger an action rule
	AlertRuleId *Condition `pulumi:"alertRuleId"`
	// condition to trigger an action rule
	ApplicationInsightsSearchResults *Condition `pulumi:"applicationInsightsSearchResults"`
	// condition to trigger an action rule
	Description *Condition `pulumi:"description"`
	// condition to trigger an action rule
	LogAnalyticsSearchResults *Condition `pulumi:"logAnalyticsSearchResults"`
	// condition to trigger an action rule
	MonitorCondition *Condition `pulumi:"monitorCondition"`
	// condition to trigger an action rule
	MonitorService *Condition `pulumi:"monitorService"`
	// condition to trigger an action rule
	Severity *Condition `pulumi:"severity"`
	// condition to trigger an action rule
	SignalType *Condition `pulumi:"signalType"`
	// condition to trigger an action rule
	TargetResource *Condition `pulumi:"targetResource"`
	// condition to trigger an action rule
	TargetResourceGroup *Condition `pulumi:"targetResourceGroup"`
	// condition to trigger an action rule
	TargetResourceType *Condition `pulumi:"targetResourceType"`
}

// ConditionsInput is an input type that accepts ConditionsArgs and ConditionsOutput values.
// You can construct a concrete instance of `ConditionsInput` via:
//
//          ConditionsArgs{...}
type ConditionsInput interface {
	pulumi.Input

	ToConditionsOutput() ConditionsOutput
	ToConditionsOutputWithContext(context.Context) ConditionsOutput
}

// Conditions in alert instance to be matched for a given action rule. Default value is all. Multiple values could be provided with comma separation.
type ConditionsArgs struct {
	// condition to trigger an action rule
	AlertRuleId ConditionPtrInput `pulumi:"alertRuleId"`
	// condition to trigger an action rule
	ApplicationInsightsSearchResults ConditionPtrInput `pulumi:"applicationInsightsSearchResults"`
	// condition to trigger an action rule
	Description ConditionPtrInput `pulumi:"description"`
	// condition to trigger an action rule
	LogAnalyticsSearchResults ConditionPtrInput `pulumi:"logAnalyticsSearchResults"`
	// condition to trigger an action rule
	MonitorCondition ConditionPtrInput `pulumi:"monitorCondition"`
	// condition to trigger an action rule
	MonitorService ConditionPtrInput `pulumi:"monitorService"`
	// condition to trigger an action rule
	Severity ConditionPtrInput `pulumi:"severity"`
	// condition to trigger an action rule
	SignalType ConditionPtrInput `pulumi:"signalType"`
	// condition to trigger an action rule
	TargetResource ConditionPtrInput `pulumi:"targetResource"`
	// condition to trigger an action rule
	TargetResourceGroup ConditionPtrInput `pulumi:"targetResourceGroup"`
	// condition to trigger an action rule
	TargetResourceType ConditionPtrInput `pulumi:"targetResourceType"`
}

func (ConditionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Conditions)(nil)).Elem()
}

func (i ConditionsArgs) ToConditionsOutput() ConditionsOutput {
	return i.ToConditionsOutputWithContext(context.Background())
}

func (i ConditionsArgs) ToConditionsOutputWithContext(ctx context.Context) ConditionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConditionsOutput)
}

func (i ConditionsArgs) ToConditionsPtrOutput() ConditionsPtrOutput {
	return i.ToConditionsPtrOutputWithContext(context.Background())
}

func (i ConditionsArgs) ToConditionsPtrOutputWithContext(ctx context.Context) ConditionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConditionsOutput).ToConditionsPtrOutputWithContext(ctx)
}

// ConditionsPtrInput is an input type that accepts ConditionsArgs, ConditionsPtr and ConditionsPtrOutput values.
// You can construct a concrete instance of `ConditionsPtrInput` via:
//
//          ConditionsArgs{...}
//
//  or:
//
//          nil
type ConditionsPtrInput interface {
	pulumi.Input

	ToConditionsPtrOutput() ConditionsPtrOutput
	ToConditionsPtrOutputWithContext(context.Context) ConditionsPtrOutput
}

type conditionsPtrType ConditionsArgs

func ConditionsPtr(v *ConditionsArgs) ConditionsPtrInput {
	return (*conditionsPtrType)(v)
}

func (*conditionsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Conditions)(nil)).Elem()
}

func (i *conditionsPtrType) ToConditionsPtrOutput() ConditionsPtrOutput {
	return i.ToConditionsPtrOutputWithContext(context.Background())
}

func (i *conditionsPtrType) ToConditionsPtrOutputWithContext(ctx context.Context) ConditionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConditionsPtrOutput)
}

// Conditions in alert instance to be matched for a given action rule. Default value is all. Multiple values could be provided with comma separation.
type ConditionsOutput struct{ *pulumi.OutputState }

func (ConditionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Conditions)(nil)).Elem()
}

func (o ConditionsOutput) ToConditionsOutput() ConditionsOutput {
	return o
}

func (o ConditionsOutput) ToConditionsOutputWithContext(ctx context.Context) ConditionsOutput {
	return o
}

func (o ConditionsOutput) ToConditionsPtrOutput() ConditionsPtrOutput {
	return o.ToConditionsPtrOutputWithContext(context.Background())
}

func (o ConditionsOutput) ToConditionsPtrOutputWithContext(ctx context.Context) ConditionsPtrOutput {
	return o.ApplyT(func(v Conditions) *Conditions {
		return &v
	}).(ConditionsPtrOutput)
}

// condition to trigger an action rule
func (o ConditionsOutput) AlertRuleId() ConditionPtrOutput {
	return o.ApplyT(func(v Conditions) *Condition { return v.AlertRuleId }).(ConditionPtrOutput)
}

// condition to trigger an action rule
func (o ConditionsOutput) ApplicationInsightsSearchResults() ConditionPtrOutput {
	return o.ApplyT(func(v Conditions) *Condition { return v.ApplicationInsightsSearchResults }).(ConditionPtrOutput)
}

// condition to trigger an action rule
func (o ConditionsOutput) Description() ConditionPtrOutput {
	return o.ApplyT(func(v Conditions) *Condition { return v.Description }).(ConditionPtrOutput)
}

// condition to trigger an action rule
func (o ConditionsOutput) LogAnalyticsSearchResults() ConditionPtrOutput {
	return o.ApplyT(func(v Conditions) *Condition { return v.LogAnalyticsSearchResults }).(ConditionPtrOutput)
}

// condition to trigger an action rule
func (o ConditionsOutput) MonitorCondition() ConditionPtrOutput {
	return o.ApplyT(func(v Conditions) *Condition { return v.MonitorCondition }).(ConditionPtrOutput)
}

// condition to trigger an action rule
func (o ConditionsOutput) MonitorService() ConditionPtrOutput {
	return o.ApplyT(func(v Conditions) *Condition { return v.MonitorService }).(ConditionPtrOutput)
}

// condition to trigger an action rule
func (o ConditionsOutput) Severity() ConditionPtrOutput {
	return o.ApplyT(func(v Conditions) *Condition { return v.Severity }).(ConditionPtrOutput)
}

// condition to trigger an action rule
func (o ConditionsOutput) SignalType() ConditionPtrOutput {
	return o.ApplyT(func(v Conditions) *Condition { return v.SignalType }).(ConditionPtrOutput)
}

// condition to trigger an action rule
func (o ConditionsOutput) TargetResource() ConditionPtrOutput {
	return o.ApplyT(func(v Conditions) *Condition { return v.TargetResource }).(ConditionPtrOutput)
}

// condition to trigger an action rule
func (o ConditionsOutput) TargetResourceGroup() ConditionPtrOutput {
	return o.ApplyT(func(v Conditions) *Condition { return v.TargetResourceGroup }).(ConditionPtrOutput)
}

// condition to trigger an action rule
func (o ConditionsOutput) TargetResourceType() ConditionPtrOutput {
	return o.ApplyT(func(v Conditions) *Condition { return v.TargetResourceType }).(ConditionPtrOutput)
}

type ConditionsPtrOutput struct{ *pulumi.OutputState }

func (ConditionsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Conditions)(nil)).Elem()
}

func (o ConditionsPtrOutput) ToConditionsPtrOutput() ConditionsPtrOutput {
	return o
}

func (o ConditionsPtrOutput) ToConditionsPtrOutputWithContext(ctx context.Context) ConditionsPtrOutput {
	return o
}

func (o ConditionsPtrOutput) Elem() ConditionsOutput {
	return o.ApplyT(func(v *Conditions) Conditions { return *v }).(ConditionsOutput)
}

// condition to trigger an action rule
func (o ConditionsPtrOutput) AlertRuleId() ConditionPtrOutput {
	return o.ApplyT(func(v *Conditions) *Condition {
		if v == nil {
			return nil
		}
		return v.AlertRuleId
	}).(ConditionPtrOutput)
}

// condition to trigger an action rule
func (o ConditionsPtrOutput) ApplicationInsightsSearchResults() ConditionPtrOutput {
	return o.ApplyT(func(v *Conditions) *Condition {
		if v == nil {
			return nil
		}
		return v.ApplicationInsightsSearchResults
	}).(ConditionPtrOutput)
}

// condition to trigger an action rule
func (o ConditionsPtrOutput) Description() ConditionPtrOutput {
	return o.ApplyT(func(v *Conditions) *Condition {
		if v == nil {
			return nil
		}
		return v.Description
	}).(ConditionPtrOutput)
}

// condition to trigger an action rule
func (o ConditionsPtrOutput) LogAnalyticsSearchResults() ConditionPtrOutput {
	return o.ApplyT(func(v *Conditions) *Condition {
		if v == nil {
			return nil
		}
		return v.LogAnalyticsSearchResults
	}).(ConditionPtrOutput)
}

// condition to trigger an action rule
func (o ConditionsPtrOutput) MonitorCondition() ConditionPtrOutput {
	return o.ApplyT(func(v *Conditions) *Condition {
		if v == nil {
			return nil
		}
		return v.MonitorCondition
	}).(ConditionPtrOutput)
}

// condition to trigger an action rule
func (o ConditionsPtrOutput) MonitorService() ConditionPtrOutput {
	return o.ApplyT(func(v *Conditions) *Condition {
		if v == nil {
			return nil
		}
		return v.MonitorService
	}).(ConditionPtrOutput)
}

// condition to trigger an action rule
func (o ConditionsPtrOutput) Severity() ConditionPtrOutput {
	return o.ApplyT(func(v *Conditions) *Condition {
		if v == nil {
			return nil
		}
		return v.Severity
	}).(ConditionPtrOutput)
}

// condition to trigger an action rule
func (o ConditionsPtrOutput) SignalType() ConditionPtrOutput {
	return o.ApplyT(func(v *Conditions) *Condition {
		if v == nil {
			return nil
		}
		return v.SignalType
	}).(ConditionPtrOutput)
}

// condition to trigger an action rule
func (o ConditionsPtrOutput) TargetResource() ConditionPtrOutput {
	return o.ApplyT(func(v *Conditions) *Condition {
		if v == nil {
			return nil
		}
		return v.TargetResource
	}).(ConditionPtrOutput)
}

// condition to trigger an action rule
func (o ConditionsPtrOutput) TargetResourceGroup() ConditionPtrOutput {
	return o.ApplyT(func(v *Conditions) *Condition {
		if v == nil {
			return nil
		}
		return v.TargetResourceGroup
	}).(ConditionPtrOutput)
}

// condition to trigger an action rule
func (o ConditionsPtrOutput) TargetResourceType() ConditionPtrOutput {
	return o.ApplyT(func(v *Conditions) *Condition {
		if v == nil {
			return nil
		}
		return v.TargetResourceType
	}).(ConditionPtrOutput)
}

// Conditions in alert instance to be matched for a given action rule. Default value is all. Multiple values could be provided with comma separation.
type ConditionsInvokeResponse struct {
	// condition to trigger an action rule
	AlertRuleId *ConditionInvokeResponse `pulumi:"alertRuleId"`
	// condition to trigger an action rule
	ApplicationInsightsSearchResults *ConditionInvokeResponse `pulumi:"applicationInsightsSearchResults"`
	// condition to trigger an action rule
	Description *ConditionInvokeResponse `pulumi:"description"`
	// condition to trigger an action rule
	LogAnalyticsSearchResults *ConditionInvokeResponse `pulumi:"logAnalyticsSearchResults"`
	// condition to trigger an action rule
	MonitorCondition *ConditionInvokeResponse `pulumi:"monitorCondition"`
	// condition to trigger an action rule
	MonitorService *ConditionInvokeResponse `pulumi:"monitorService"`
	// condition to trigger an action rule
	Severity *ConditionInvokeResponse `pulumi:"severity"`
	// condition to trigger an action rule
	SignalType *ConditionInvokeResponse `pulumi:"signalType"`
	// condition to trigger an action rule
	TargetResource *ConditionInvokeResponse `pulumi:"targetResource"`
	// condition to trigger an action rule
	TargetResourceGroup *ConditionInvokeResponse `pulumi:"targetResourceGroup"`
	// condition to trigger an action rule
	TargetResourceType *ConditionInvokeResponse `pulumi:"targetResourceType"`
}

// ConditionsInvokeResponseInput is an input type that accepts ConditionsInvokeResponseArgs and ConditionsInvokeResponseOutput values.
// You can construct a concrete instance of `ConditionsInvokeResponseInput` via:
//
//          ConditionsInvokeResponseArgs{...}
type ConditionsInvokeResponseInput interface {
	pulumi.Input

	ToConditionsInvokeResponseOutput() ConditionsInvokeResponseOutput
	ToConditionsInvokeResponseOutputWithContext(context.Context) ConditionsInvokeResponseOutput
}

// Conditions in alert instance to be matched for a given action rule. Default value is all. Multiple values could be provided with comma separation.
type ConditionsInvokeResponseArgs struct {
	// condition to trigger an action rule
	AlertRuleId ConditionInvokeResponsePtrInput `pulumi:"alertRuleId"`
	// condition to trigger an action rule
	ApplicationInsightsSearchResults ConditionInvokeResponsePtrInput `pulumi:"applicationInsightsSearchResults"`
	// condition to trigger an action rule
	Description ConditionInvokeResponsePtrInput `pulumi:"description"`
	// condition to trigger an action rule
	LogAnalyticsSearchResults ConditionInvokeResponsePtrInput `pulumi:"logAnalyticsSearchResults"`
	// condition to trigger an action rule
	MonitorCondition ConditionInvokeResponsePtrInput `pulumi:"monitorCondition"`
	// condition to trigger an action rule
	MonitorService ConditionInvokeResponsePtrInput `pulumi:"monitorService"`
	// condition to trigger an action rule
	Severity ConditionInvokeResponsePtrInput `pulumi:"severity"`
	// condition to trigger an action rule
	SignalType ConditionInvokeResponsePtrInput `pulumi:"signalType"`
	// condition to trigger an action rule
	TargetResource ConditionInvokeResponsePtrInput `pulumi:"targetResource"`
	// condition to trigger an action rule
	TargetResourceGroup ConditionInvokeResponsePtrInput `pulumi:"targetResourceGroup"`
	// condition to trigger an action rule
	TargetResourceType ConditionInvokeResponsePtrInput `pulumi:"targetResourceType"`
}

func (ConditionsInvokeResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ConditionsInvokeResponse)(nil)).Elem()
}

func (i ConditionsInvokeResponseArgs) ToConditionsInvokeResponseOutput() ConditionsInvokeResponseOutput {
	return i.ToConditionsInvokeResponseOutputWithContext(context.Background())
}

func (i ConditionsInvokeResponseArgs) ToConditionsInvokeResponseOutputWithContext(ctx context.Context) ConditionsInvokeResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConditionsInvokeResponseOutput)
}

func (i ConditionsInvokeResponseArgs) ToConditionsInvokeResponsePtrOutput() ConditionsInvokeResponsePtrOutput {
	return i.ToConditionsInvokeResponsePtrOutputWithContext(context.Background())
}

func (i ConditionsInvokeResponseArgs) ToConditionsInvokeResponsePtrOutputWithContext(ctx context.Context) ConditionsInvokeResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConditionsInvokeResponseOutput).ToConditionsInvokeResponsePtrOutputWithContext(ctx)
}

// ConditionsInvokeResponsePtrInput is an input type that accepts ConditionsInvokeResponseArgs, ConditionsInvokeResponsePtr and ConditionsInvokeResponsePtrOutput values.
// You can construct a concrete instance of `ConditionsInvokeResponsePtrInput` via:
//
//          ConditionsInvokeResponseArgs{...}
//
//  or:
//
//          nil
type ConditionsInvokeResponsePtrInput interface {
	pulumi.Input

	ToConditionsInvokeResponsePtrOutput() ConditionsInvokeResponsePtrOutput
	ToConditionsInvokeResponsePtrOutputWithContext(context.Context) ConditionsInvokeResponsePtrOutput
}

type conditionsInvokeResponsePtrType ConditionsInvokeResponseArgs

func ConditionsInvokeResponsePtr(v *ConditionsInvokeResponseArgs) ConditionsInvokeResponsePtrInput {
	return (*conditionsInvokeResponsePtrType)(v)
}

func (*conditionsInvokeResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ConditionsInvokeResponse)(nil)).Elem()
}

func (i *conditionsInvokeResponsePtrType) ToConditionsInvokeResponsePtrOutput() ConditionsInvokeResponsePtrOutput {
	return i.ToConditionsInvokeResponsePtrOutputWithContext(context.Background())
}

func (i *conditionsInvokeResponsePtrType) ToConditionsInvokeResponsePtrOutputWithContext(ctx context.Context) ConditionsInvokeResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConditionsInvokeResponsePtrOutput)
}

// Conditions in alert instance to be matched for a given action rule. Default value is all. Multiple values could be provided with comma separation.
type ConditionsInvokeResponseOutput struct{ *pulumi.OutputState }

func (ConditionsInvokeResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConditionsInvokeResponse)(nil)).Elem()
}

func (o ConditionsInvokeResponseOutput) ToConditionsInvokeResponseOutput() ConditionsInvokeResponseOutput {
	return o
}

func (o ConditionsInvokeResponseOutput) ToConditionsInvokeResponseOutputWithContext(ctx context.Context) ConditionsInvokeResponseOutput {
	return o
}

func (o ConditionsInvokeResponseOutput) ToConditionsInvokeResponsePtrOutput() ConditionsInvokeResponsePtrOutput {
	return o.ToConditionsInvokeResponsePtrOutputWithContext(context.Background())
}

func (o ConditionsInvokeResponseOutput) ToConditionsInvokeResponsePtrOutputWithContext(ctx context.Context) ConditionsInvokeResponsePtrOutput {
	return o.ApplyT(func(v ConditionsInvokeResponse) *ConditionsInvokeResponse {
		return &v
	}).(ConditionsInvokeResponsePtrOutput)
}

// condition to trigger an action rule
func (o ConditionsInvokeResponseOutput) AlertRuleId() ConditionInvokeResponsePtrOutput {
	return o.ApplyT(func(v ConditionsInvokeResponse) *ConditionInvokeResponse { return v.AlertRuleId }).(ConditionInvokeResponsePtrOutput)
}

// condition to trigger an action rule
func (o ConditionsInvokeResponseOutput) ApplicationInsightsSearchResults() ConditionInvokeResponsePtrOutput {
	return o.ApplyT(func(v ConditionsInvokeResponse) *ConditionInvokeResponse { return v.ApplicationInsightsSearchResults }).(ConditionInvokeResponsePtrOutput)
}

// condition to trigger an action rule
func (o ConditionsInvokeResponseOutput) Description() ConditionInvokeResponsePtrOutput {
	return o.ApplyT(func(v ConditionsInvokeResponse) *ConditionInvokeResponse { return v.Description }).(ConditionInvokeResponsePtrOutput)
}

// condition to trigger an action rule
func (o ConditionsInvokeResponseOutput) LogAnalyticsSearchResults() ConditionInvokeResponsePtrOutput {
	return o.ApplyT(func(v ConditionsInvokeResponse) *ConditionInvokeResponse { return v.LogAnalyticsSearchResults }).(ConditionInvokeResponsePtrOutput)
}

// condition to trigger an action rule
func (o ConditionsInvokeResponseOutput) MonitorCondition() ConditionInvokeResponsePtrOutput {
	return o.ApplyT(func(v ConditionsInvokeResponse) *ConditionInvokeResponse { return v.MonitorCondition }).(ConditionInvokeResponsePtrOutput)
}

// condition to trigger an action rule
func (o ConditionsInvokeResponseOutput) MonitorService() ConditionInvokeResponsePtrOutput {
	return o.ApplyT(func(v ConditionsInvokeResponse) *ConditionInvokeResponse { return v.MonitorService }).(ConditionInvokeResponsePtrOutput)
}

// condition to trigger an action rule
func (o ConditionsInvokeResponseOutput) Severity() ConditionInvokeResponsePtrOutput {
	return o.ApplyT(func(v ConditionsInvokeResponse) *ConditionInvokeResponse { return v.Severity }).(ConditionInvokeResponsePtrOutput)
}

// condition to trigger an action rule
func (o ConditionsInvokeResponseOutput) SignalType() ConditionInvokeResponsePtrOutput {
	return o.ApplyT(func(v ConditionsInvokeResponse) *ConditionInvokeResponse { return v.SignalType }).(ConditionInvokeResponsePtrOutput)
}

// condition to trigger an action rule
func (o ConditionsInvokeResponseOutput) TargetResource() ConditionInvokeResponsePtrOutput {
	return o.ApplyT(func(v ConditionsInvokeResponse) *ConditionInvokeResponse { return v.TargetResource }).(ConditionInvokeResponsePtrOutput)
}

// condition to trigger an action rule
func (o ConditionsInvokeResponseOutput) TargetResourceGroup() ConditionInvokeResponsePtrOutput {
	return o.ApplyT(func(v ConditionsInvokeResponse) *ConditionInvokeResponse { return v.TargetResourceGroup }).(ConditionInvokeResponsePtrOutput)
}

// condition to trigger an action rule
func (o ConditionsInvokeResponseOutput) TargetResourceType() ConditionInvokeResponsePtrOutput {
	return o.ApplyT(func(v ConditionsInvokeResponse) *ConditionInvokeResponse { return v.TargetResourceType }).(ConditionInvokeResponsePtrOutput)
}

type ConditionsInvokeResponsePtrOutput struct{ *pulumi.OutputState }

func (ConditionsInvokeResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ConditionsInvokeResponse)(nil)).Elem()
}

func (o ConditionsInvokeResponsePtrOutput) ToConditionsInvokeResponsePtrOutput() ConditionsInvokeResponsePtrOutput {
	return o
}

func (o ConditionsInvokeResponsePtrOutput) ToConditionsInvokeResponsePtrOutputWithContext(ctx context.Context) ConditionsInvokeResponsePtrOutput {
	return o
}

func (o ConditionsInvokeResponsePtrOutput) Elem() ConditionsInvokeResponseOutput {
	return o.ApplyT(func(v *ConditionsInvokeResponse) ConditionsInvokeResponse { return *v }).(ConditionsInvokeResponseOutput)
}

// condition to trigger an action rule
func (o ConditionsInvokeResponsePtrOutput) AlertRuleId() ConditionInvokeResponsePtrOutput {
	return o.ApplyT(func(v *ConditionsInvokeResponse) *ConditionInvokeResponse {
		if v == nil {
			return nil
		}
		return v.AlertRuleId
	}).(ConditionInvokeResponsePtrOutput)
}

// condition to trigger an action rule
func (o ConditionsInvokeResponsePtrOutput) ApplicationInsightsSearchResults() ConditionInvokeResponsePtrOutput {
	return o.ApplyT(func(v *ConditionsInvokeResponse) *ConditionInvokeResponse {
		if v == nil {
			return nil
		}
		return v.ApplicationInsightsSearchResults
	}).(ConditionInvokeResponsePtrOutput)
}

// condition to trigger an action rule
func (o ConditionsInvokeResponsePtrOutput) Description() ConditionInvokeResponsePtrOutput {
	return o.ApplyT(func(v *ConditionsInvokeResponse) *ConditionInvokeResponse {
		if v == nil {
			return nil
		}
		return v.Description
	}).(ConditionInvokeResponsePtrOutput)
}

// condition to trigger an action rule
func (o ConditionsInvokeResponsePtrOutput) LogAnalyticsSearchResults() ConditionInvokeResponsePtrOutput {
	return o.ApplyT(func(v *ConditionsInvokeResponse) *ConditionInvokeResponse {
		if v == nil {
			return nil
		}
		return v.LogAnalyticsSearchResults
	}).(ConditionInvokeResponsePtrOutput)
}

// condition to trigger an action rule
func (o ConditionsInvokeResponsePtrOutput) MonitorCondition() ConditionInvokeResponsePtrOutput {
	return o.ApplyT(func(v *ConditionsInvokeResponse) *ConditionInvokeResponse {
		if v == nil {
			return nil
		}
		return v.MonitorCondition
	}).(ConditionInvokeResponsePtrOutput)
}

// condition to trigger an action rule
func (o ConditionsInvokeResponsePtrOutput) MonitorService() ConditionInvokeResponsePtrOutput {
	return o.ApplyT(func(v *ConditionsInvokeResponse) *ConditionInvokeResponse {
		if v == nil {
			return nil
		}
		return v.MonitorService
	}).(ConditionInvokeResponsePtrOutput)
}

// condition to trigger an action rule
func (o ConditionsInvokeResponsePtrOutput) Severity() ConditionInvokeResponsePtrOutput {
	return o.ApplyT(func(v *ConditionsInvokeResponse) *ConditionInvokeResponse {
		if v == nil {
			return nil
		}
		return v.Severity
	}).(ConditionInvokeResponsePtrOutput)
}

// condition to trigger an action rule
func (o ConditionsInvokeResponsePtrOutput) SignalType() ConditionInvokeResponsePtrOutput {
	return o.ApplyT(func(v *ConditionsInvokeResponse) *ConditionInvokeResponse {
		if v == nil {
			return nil
		}
		return v.SignalType
	}).(ConditionInvokeResponsePtrOutput)
}

// condition to trigger an action rule
func (o ConditionsInvokeResponsePtrOutput) TargetResource() ConditionInvokeResponsePtrOutput {
	return o.ApplyT(func(v *ConditionsInvokeResponse) *ConditionInvokeResponse {
		if v == nil {
			return nil
		}
		return v.TargetResource
	}).(ConditionInvokeResponsePtrOutput)
}

// condition to trigger an action rule
func (o ConditionsInvokeResponsePtrOutput) TargetResourceGroup() ConditionInvokeResponsePtrOutput {
	return o.ApplyT(func(v *ConditionsInvokeResponse) *ConditionInvokeResponse {
		if v == nil {
			return nil
		}
		return v.TargetResourceGroup
	}).(ConditionInvokeResponsePtrOutput)
}

// condition to trigger an action rule
func (o ConditionsInvokeResponsePtrOutput) TargetResourceType() ConditionInvokeResponsePtrOutput {
	return o.ApplyT(func(v *ConditionsInvokeResponse) *ConditionInvokeResponse {
		if v == nil {
			return nil
		}
		return v.TargetResourceType
	}).(ConditionInvokeResponsePtrOutput)
}

// Conditions in alert instance to be matched for a given action rule. Default value is all. Multiple values could be provided with comma separation.
type ConditionsResponse struct {
	// condition to trigger an action rule
	AlertRuleId *ConditionResponse `pulumi:"alertRuleId"`
	// condition to trigger an action rule
	ApplicationInsightsSearchResults *ConditionResponse `pulumi:"applicationInsightsSearchResults"`
	// condition to trigger an action rule
	Description *ConditionResponse `pulumi:"description"`
	// condition to trigger an action rule
	LogAnalyticsSearchResults *ConditionResponse `pulumi:"logAnalyticsSearchResults"`
	// condition to trigger an action rule
	MonitorCondition *ConditionResponse `pulumi:"monitorCondition"`
	// condition to trigger an action rule
	MonitorService *ConditionResponse `pulumi:"monitorService"`
	// condition to trigger an action rule
	Severity *ConditionResponse `pulumi:"severity"`
	// condition to trigger an action rule
	SignalType *ConditionResponse `pulumi:"signalType"`
	// condition to trigger an action rule
	TargetResource *ConditionResponse `pulumi:"targetResource"`
	// condition to trigger an action rule
	TargetResourceGroup *ConditionResponse `pulumi:"targetResourceGroup"`
	// condition to trigger an action rule
	TargetResourceType *ConditionResponse `pulumi:"targetResourceType"`
}

// ConditionsResponseInput is an input type that accepts ConditionsResponseArgs and ConditionsResponseOutput values.
// You can construct a concrete instance of `ConditionsResponseInput` via:
//
//          ConditionsResponseArgs{...}
type ConditionsResponseInput interface {
	pulumi.Input

	ToConditionsResponseOutput() ConditionsResponseOutput
	ToConditionsResponseOutputWithContext(context.Context) ConditionsResponseOutput
}

// Conditions in alert instance to be matched for a given action rule. Default value is all. Multiple values could be provided with comma separation.
type ConditionsResponseArgs struct {
	// condition to trigger an action rule
	AlertRuleId ConditionResponsePtrInput `pulumi:"alertRuleId"`
	// condition to trigger an action rule
	ApplicationInsightsSearchResults ConditionResponsePtrInput `pulumi:"applicationInsightsSearchResults"`
	// condition to trigger an action rule
	Description ConditionResponsePtrInput `pulumi:"description"`
	// condition to trigger an action rule
	LogAnalyticsSearchResults ConditionResponsePtrInput `pulumi:"logAnalyticsSearchResults"`
	// condition to trigger an action rule
	MonitorCondition ConditionResponsePtrInput `pulumi:"monitorCondition"`
	// condition to trigger an action rule
	MonitorService ConditionResponsePtrInput `pulumi:"monitorService"`
	// condition to trigger an action rule
	Severity ConditionResponsePtrInput `pulumi:"severity"`
	// condition to trigger an action rule
	SignalType ConditionResponsePtrInput `pulumi:"signalType"`
	// condition to trigger an action rule
	TargetResource ConditionResponsePtrInput `pulumi:"targetResource"`
	// condition to trigger an action rule
	TargetResourceGroup ConditionResponsePtrInput `pulumi:"targetResourceGroup"`
	// condition to trigger an action rule
	TargetResourceType ConditionResponsePtrInput `pulumi:"targetResourceType"`
}

func (ConditionsResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ConditionsResponse)(nil)).Elem()
}

func (i ConditionsResponseArgs) ToConditionsResponseOutput() ConditionsResponseOutput {
	return i.ToConditionsResponseOutputWithContext(context.Background())
}

func (i ConditionsResponseArgs) ToConditionsResponseOutputWithContext(ctx context.Context) ConditionsResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConditionsResponseOutput)
}

func (i ConditionsResponseArgs) ToConditionsResponsePtrOutput() ConditionsResponsePtrOutput {
	return i.ToConditionsResponsePtrOutputWithContext(context.Background())
}

func (i ConditionsResponseArgs) ToConditionsResponsePtrOutputWithContext(ctx context.Context) ConditionsResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConditionsResponseOutput).ToConditionsResponsePtrOutputWithContext(ctx)
}

// ConditionsResponsePtrInput is an input type that accepts ConditionsResponseArgs, ConditionsResponsePtr and ConditionsResponsePtrOutput values.
// You can construct a concrete instance of `ConditionsResponsePtrInput` via:
//
//          ConditionsResponseArgs{...}
//
//  or:
//
//          nil
type ConditionsResponsePtrInput interface {
	pulumi.Input

	ToConditionsResponsePtrOutput() ConditionsResponsePtrOutput
	ToConditionsResponsePtrOutputWithContext(context.Context) ConditionsResponsePtrOutput
}

type conditionsResponsePtrType ConditionsResponseArgs

func ConditionsResponsePtr(v *ConditionsResponseArgs) ConditionsResponsePtrInput {
	return (*conditionsResponsePtrType)(v)
}

func (*conditionsResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ConditionsResponse)(nil)).Elem()
}

func (i *conditionsResponsePtrType) ToConditionsResponsePtrOutput() ConditionsResponsePtrOutput {
	return i.ToConditionsResponsePtrOutputWithContext(context.Background())
}

func (i *conditionsResponsePtrType) ToConditionsResponsePtrOutputWithContext(ctx context.Context) ConditionsResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConditionsResponsePtrOutput)
}

// Conditions in alert instance to be matched for a given action rule. Default value is all. Multiple values could be provided with comma separation.
type ConditionsResponseOutput struct{ *pulumi.OutputState }

func (ConditionsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConditionsResponse)(nil)).Elem()
}

func (o ConditionsResponseOutput) ToConditionsResponseOutput() ConditionsResponseOutput {
	return o
}

func (o ConditionsResponseOutput) ToConditionsResponseOutputWithContext(ctx context.Context) ConditionsResponseOutput {
	return o
}

func (o ConditionsResponseOutput) ToConditionsResponsePtrOutput() ConditionsResponsePtrOutput {
	return o.ToConditionsResponsePtrOutputWithContext(context.Background())
}

func (o ConditionsResponseOutput) ToConditionsResponsePtrOutputWithContext(ctx context.Context) ConditionsResponsePtrOutput {
	return o.ApplyT(func(v ConditionsResponse) *ConditionsResponse {
		return &v
	}).(ConditionsResponsePtrOutput)
}

// condition to trigger an action rule
func (o ConditionsResponseOutput) AlertRuleId() ConditionResponsePtrOutput {
	return o.ApplyT(func(v ConditionsResponse) *ConditionResponse { return v.AlertRuleId }).(ConditionResponsePtrOutput)
}

// condition to trigger an action rule
func (o ConditionsResponseOutput) ApplicationInsightsSearchResults() ConditionResponsePtrOutput {
	return o.ApplyT(func(v ConditionsResponse) *ConditionResponse { return v.ApplicationInsightsSearchResults }).(ConditionResponsePtrOutput)
}

// condition to trigger an action rule
func (o ConditionsResponseOutput) Description() ConditionResponsePtrOutput {
	return o.ApplyT(func(v ConditionsResponse) *ConditionResponse { return v.Description }).(ConditionResponsePtrOutput)
}

// condition to trigger an action rule
func (o ConditionsResponseOutput) LogAnalyticsSearchResults() ConditionResponsePtrOutput {
	return o.ApplyT(func(v ConditionsResponse) *ConditionResponse { return v.LogAnalyticsSearchResults }).(ConditionResponsePtrOutput)
}

// condition to trigger an action rule
func (o ConditionsResponseOutput) MonitorCondition() ConditionResponsePtrOutput {
	return o.ApplyT(func(v ConditionsResponse) *ConditionResponse { return v.MonitorCondition }).(ConditionResponsePtrOutput)
}

// condition to trigger an action rule
func (o ConditionsResponseOutput) MonitorService() ConditionResponsePtrOutput {
	return o.ApplyT(func(v ConditionsResponse) *ConditionResponse { return v.MonitorService }).(ConditionResponsePtrOutput)
}

// condition to trigger an action rule
func (o ConditionsResponseOutput) Severity() ConditionResponsePtrOutput {
	return o.ApplyT(func(v ConditionsResponse) *ConditionResponse { return v.Severity }).(ConditionResponsePtrOutput)
}

// condition to trigger an action rule
func (o ConditionsResponseOutput) SignalType() ConditionResponsePtrOutput {
	return o.ApplyT(func(v ConditionsResponse) *ConditionResponse { return v.SignalType }).(ConditionResponsePtrOutput)
}

// condition to trigger an action rule
func (o ConditionsResponseOutput) TargetResource() ConditionResponsePtrOutput {
	return o.ApplyT(func(v ConditionsResponse) *ConditionResponse { return v.TargetResource }).(ConditionResponsePtrOutput)
}

// condition to trigger an action rule
func (o ConditionsResponseOutput) TargetResourceGroup() ConditionResponsePtrOutput {
	return o.ApplyT(func(v ConditionsResponse) *ConditionResponse { return v.TargetResourceGroup }).(ConditionResponsePtrOutput)
}

// condition to trigger an action rule
func (o ConditionsResponseOutput) TargetResourceType() ConditionResponsePtrOutput {
	return o.ApplyT(func(v ConditionsResponse) *ConditionResponse { return v.TargetResourceType }).(ConditionResponsePtrOutput)
}

type ConditionsResponsePtrOutput struct{ *pulumi.OutputState }

func (ConditionsResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ConditionsResponse)(nil)).Elem()
}

func (o ConditionsResponsePtrOutput) ToConditionsResponsePtrOutput() ConditionsResponsePtrOutput {
	return o
}

func (o ConditionsResponsePtrOutput) ToConditionsResponsePtrOutputWithContext(ctx context.Context) ConditionsResponsePtrOutput {
	return o
}

func (o ConditionsResponsePtrOutput) Elem() ConditionsResponseOutput {
	return o.ApplyT(func(v *ConditionsResponse) ConditionsResponse { return *v }).(ConditionsResponseOutput)
}

// condition to trigger an action rule
func (o ConditionsResponsePtrOutput) AlertRuleId() ConditionResponsePtrOutput {
	return o.ApplyT(func(v *ConditionsResponse) *ConditionResponse {
		if v == nil {
			return nil
		}
		return v.AlertRuleId
	}).(ConditionResponsePtrOutput)
}

// condition to trigger an action rule
func (o ConditionsResponsePtrOutput) ApplicationInsightsSearchResults() ConditionResponsePtrOutput {
	return o.ApplyT(func(v *ConditionsResponse) *ConditionResponse {
		if v == nil {
			return nil
		}
		return v.ApplicationInsightsSearchResults
	}).(ConditionResponsePtrOutput)
}

// condition to trigger an action rule
func (o ConditionsResponsePtrOutput) Description() ConditionResponsePtrOutput {
	return o.ApplyT(func(v *ConditionsResponse) *ConditionResponse {
		if v == nil {
			return nil
		}
		return v.Description
	}).(ConditionResponsePtrOutput)
}

// condition to trigger an action rule
func (o ConditionsResponsePtrOutput) LogAnalyticsSearchResults() ConditionResponsePtrOutput {
	return o.ApplyT(func(v *ConditionsResponse) *ConditionResponse {
		if v == nil {
			return nil
		}
		return v.LogAnalyticsSearchResults
	}).(ConditionResponsePtrOutput)
}

// condition to trigger an action rule
func (o ConditionsResponsePtrOutput) MonitorCondition() ConditionResponsePtrOutput {
	return o.ApplyT(func(v *ConditionsResponse) *ConditionResponse {
		if v == nil {
			return nil
		}
		return v.MonitorCondition
	}).(ConditionResponsePtrOutput)
}

// condition to trigger an action rule
func (o ConditionsResponsePtrOutput) MonitorService() ConditionResponsePtrOutput {
	return o.ApplyT(func(v *ConditionsResponse) *ConditionResponse {
		if v == nil {
			return nil
		}
		return v.MonitorService
	}).(ConditionResponsePtrOutput)
}

// condition to trigger an action rule
func (o ConditionsResponsePtrOutput) Severity() ConditionResponsePtrOutput {
	return o.ApplyT(func(v *ConditionsResponse) *ConditionResponse {
		if v == nil {
			return nil
		}
		return v.Severity
	}).(ConditionResponsePtrOutput)
}

// condition to trigger an action rule
func (o ConditionsResponsePtrOutput) SignalType() ConditionResponsePtrOutput {
	return o.ApplyT(func(v *ConditionsResponse) *ConditionResponse {
		if v == nil {
			return nil
		}
		return v.SignalType
	}).(ConditionResponsePtrOutput)
}

// condition to trigger an action rule
func (o ConditionsResponsePtrOutput) TargetResource() ConditionResponsePtrOutput {
	return o.ApplyT(func(v *ConditionsResponse) *ConditionResponse {
		if v == nil {
			return nil
		}
		return v.TargetResource
	}).(ConditionResponsePtrOutput)
}

// condition to trigger an action rule
func (o ConditionsResponsePtrOutput) TargetResourceGroup() ConditionResponsePtrOutput {
	return o.ApplyT(func(v *ConditionsResponse) *ConditionResponse {
		if v == nil {
			return nil
		}
		return v.TargetResourceGroup
	}).(ConditionResponsePtrOutput)
}

// condition to trigger an action rule
func (o ConditionsResponsePtrOutput) TargetResourceType() ConditionResponsePtrOutput {
	return o.ApplyT(func(v *ConditionsResponse) *ConditionResponse {
		if v == nil {
			return nil
		}
		return v.TargetResourceType
	}).(ConditionResponsePtrOutput)
}

// Target scope for a given action rule. By default scope will be the subscription. User can also provide list of resource groups or list of resources from the scope subscription as well.
type Scope struct {
	// type of target scope
	Type *string `pulumi:"type"`
	// list of ARM IDs of the given scope type which will be the target of the given action rule.
	Values []string `pulumi:"values"`
}

// ScopeInput is an input type that accepts ScopeArgs and ScopeOutput values.
// You can construct a concrete instance of `ScopeInput` via:
//
//          ScopeArgs{...}
type ScopeInput interface {
	pulumi.Input

	ToScopeOutput() ScopeOutput
	ToScopeOutputWithContext(context.Context) ScopeOutput
}

// Target scope for a given action rule. By default scope will be the subscription. User can also provide list of resource groups or list of resources from the scope subscription as well.
type ScopeArgs struct {
	// type of target scope
	Type pulumi.StringPtrInput `pulumi:"type"`
	// list of ARM IDs of the given scope type which will be the target of the given action rule.
	Values pulumi.StringArrayInput `pulumi:"values"`
}

func (ScopeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Scope)(nil)).Elem()
}

func (i ScopeArgs) ToScopeOutput() ScopeOutput {
	return i.ToScopeOutputWithContext(context.Background())
}

func (i ScopeArgs) ToScopeOutputWithContext(ctx context.Context) ScopeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScopeOutput)
}

func (i ScopeArgs) ToScopePtrOutput() ScopePtrOutput {
	return i.ToScopePtrOutputWithContext(context.Background())
}

func (i ScopeArgs) ToScopePtrOutputWithContext(ctx context.Context) ScopePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScopeOutput).ToScopePtrOutputWithContext(ctx)
}

// ScopePtrInput is an input type that accepts ScopeArgs, ScopePtr and ScopePtrOutput values.
// You can construct a concrete instance of `ScopePtrInput` via:
//
//          ScopeArgs{...}
//
//  or:
//
//          nil
type ScopePtrInput interface {
	pulumi.Input

	ToScopePtrOutput() ScopePtrOutput
	ToScopePtrOutputWithContext(context.Context) ScopePtrOutput
}

type scopePtrType ScopeArgs

func ScopePtr(v *ScopeArgs) ScopePtrInput {
	return (*scopePtrType)(v)
}

func (*scopePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Scope)(nil)).Elem()
}

func (i *scopePtrType) ToScopePtrOutput() ScopePtrOutput {
	return i.ToScopePtrOutputWithContext(context.Background())
}

func (i *scopePtrType) ToScopePtrOutputWithContext(ctx context.Context) ScopePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScopePtrOutput)
}

// Target scope for a given action rule. By default scope will be the subscription. User can also provide list of resource groups or list of resources from the scope subscription as well.
type ScopeOutput struct{ *pulumi.OutputState }

func (ScopeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Scope)(nil)).Elem()
}

func (o ScopeOutput) ToScopeOutput() ScopeOutput {
	return o
}

func (o ScopeOutput) ToScopeOutputWithContext(ctx context.Context) ScopeOutput {
	return o
}

func (o ScopeOutput) ToScopePtrOutput() ScopePtrOutput {
	return o.ToScopePtrOutputWithContext(context.Background())
}

func (o ScopeOutput) ToScopePtrOutputWithContext(ctx context.Context) ScopePtrOutput {
	return o.ApplyT(func(v Scope) *Scope {
		return &v
	}).(ScopePtrOutput)
}

// type of target scope
func (o ScopeOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Scope) *string { return v.Type }).(pulumi.StringPtrOutput)
}

// list of ARM IDs of the given scope type which will be the target of the given action rule.
func (o ScopeOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v Scope) []string { return v.Values }).(pulumi.StringArrayOutput)
}

type ScopePtrOutput struct{ *pulumi.OutputState }

func (ScopePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Scope)(nil)).Elem()
}

func (o ScopePtrOutput) ToScopePtrOutput() ScopePtrOutput {
	return o
}

func (o ScopePtrOutput) ToScopePtrOutputWithContext(ctx context.Context) ScopePtrOutput {
	return o
}

func (o ScopePtrOutput) Elem() ScopeOutput {
	return o.ApplyT(func(v *Scope) Scope { return *v }).(ScopeOutput)
}

// type of target scope
func (o ScopePtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Scope) *string {
		if v == nil {
			return nil
		}
		return v.Type
	}).(pulumi.StringPtrOutput)
}

// list of ARM IDs of the given scope type which will be the target of the given action rule.
func (o ScopePtrOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Scope) []string {
		if v == nil {
			return nil
		}
		return v.Values
	}).(pulumi.StringArrayOutput)
}

// Target scope for a given action rule. By default scope will be the subscription. User can also provide list of resource groups or list of resources from the scope subscription as well.
type ScopeInvokeResponse struct {
	// type of target scope
	Type *string `pulumi:"type"`
	// list of ARM IDs of the given scope type which will be the target of the given action rule.
	Values []string `pulumi:"values"`
}

// ScopeInvokeResponseInput is an input type that accepts ScopeInvokeResponseArgs and ScopeInvokeResponseOutput values.
// You can construct a concrete instance of `ScopeInvokeResponseInput` via:
//
//          ScopeInvokeResponseArgs{...}
type ScopeInvokeResponseInput interface {
	pulumi.Input

	ToScopeInvokeResponseOutput() ScopeInvokeResponseOutput
	ToScopeInvokeResponseOutputWithContext(context.Context) ScopeInvokeResponseOutput
}

// Target scope for a given action rule. By default scope will be the subscription. User can also provide list of resource groups or list of resources from the scope subscription as well.
type ScopeInvokeResponseArgs struct {
	// type of target scope
	Type pulumi.StringPtrInput `pulumi:"type"`
	// list of ARM IDs of the given scope type which will be the target of the given action rule.
	Values pulumi.StringArrayInput `pulumi:"values"`
}

func (ScopeInvokeResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ScopeInvokeResponse)(nil)).Elem()
}

func (i ScopeInvokeResponseArgs) ToScopeInvokeResponseOutput() ScopeInvokeResponseOutput {
	return i.ToScopeInvokeResponseOutputWithContext(context.Background())
}

func (i ScopeInvokeResponseArgs) ToScopeInvokeResponseOutputWithContext(ctx context.Context) ScopeInvokeResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScopeInvokeResponseOutput)
}

func (i ScopeInvokeResponseArgs) ToScopeInvokeResponsePtrOutput() ScopeInvokeResponsePtrOutput {
	return i.ToScopeInvokeResponsePtrOutputWithContext(context.Background())
}

func (i ScopeInvokeResponseArgs) ToScopeInvokeResponsePtrOutputWithContext(ctx context.Context) ScopeInvokeResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScopeInvokeResponseOutput).ToScopeInvokeResponsePtrOutputWithContext(ctx)
}

// ScopeInvokeResponsePtrInput is an input type that accepts ScopeInvokeResponseArgs, ScopeInvokeResponsePtr and ScopeInvokeResponsePtrOutput values.
// You can construct a concrete instance of `ScopeInvokeResponsePtrInput` via:
//
//          ScopeInvokeResponseArgs{...}
//
//  or:
//
//          nil
type ScopeInvokeResponsePtrInput interface {
	pulumi.Input

	ToScopeInvokeResponsePtrOutput() ScopeInvokeResponsePtrOutput
	ToScopeInvokeResponsePtrOutputWithContext(context.Context) ScopeInvokeResponsePtrOutput
}

type scopeInvokeResponsePtrType ScopeInvokeResponseArgs

func ScopeInvokeResponsePtr(v *ScopeInvokeResponseArgs) ScopeInvokeResponsePtrInput {
	return (*scopeInvokeResponsePtrType)(v)
}

func (*scopeInvokeResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ScopeInvokeResponse)(nil)).Elem()
}

func (i *scopeInvokeResponsePtrType) ToScopeInvokeResponsePtrOutput() ScopeInvokeResponsePtrOutput {
	return i.ToScopeInvokeResponsePtrOutputWithContext(context.Background())
}

func (i *scopeInvokeResponsePtrType) ToScopeInvokeResponsePtrOutputWithContext(ctx context.Context) ScopeInvokeResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScopeInvokeResponsePtrOutput)
}

// Target scope for a given action rule. By default scope will be the subscription. User can also provide list of resource groups or list of resources from the scope subscription as well.
type ScopeInvokeResponseOutput struct{ *pulumi.OutputState }

func (ScopeInvokeResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ScopeInvokeResponse)(nil)).Elem()
}

func (o ScopeInvokeResponseOutput) ToScopeInvokeResponseOutput() ScopeInvokeResponseOutput {
	return o
}

func (o ScopeInvokeResponseOutput) ToScopeInvokeResponseOutputWithContext(ctx context.Context) ScopeInvokeResponseOutput {
	return o
}

func (o ScopeInvokeResponseOutput) ToScopeInvokeResponsePtrOutput() ScopeInvokeResponsePtrOutput {
	return o.ToScopeInvokeResponsePtrOutputWithContext(context.Background())
}

func (o ScopeInvokeResponseOutput) ToScopeInvokeResponsePtrOutputWithContext(ctx context.Context) ScopeInvokeResponsePtrOutput {
	return o.ApplyT(func(v ScopeInvokeResponse) *ScopeInvokeResponse {
		return &v
	}).(ScopeInvokeResponsePtrOutput)
}

// type of target scope
func (o ScopeInvokeResponseOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ScopeInvokeResponse) *string { return v.Type }).(pulumi.StringPtrOutput)
}

// list of ARM IDs of the given scope type which will be the target of the given action rule.
func (o ScopeInvokeResponseOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ScopeInvokeResponse) []string { return v.Values }).(pulumi.StringArrayOutput)
}

type ScopeInvokeResponsePtrOutput struct{ *pulumi.OutputState }

func (ScopeInvokeResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ScopeInvokeResponse)(nil)).Elem()
}

func (o ScopeInvokeResponsePtrOutput) ToScopeInvokeResponsePtrOutput() ScopeInvokeResponsePtrOutput {
	return o
}

func (o ScopeInvokeResponsePtrOutput) ToScopeInvokeResponsePtrOutputWithContext(ctx context.Context) ScopeInvokeResponsePtrOutput {
	return o
}

func (o ScopeInvokeResponsePtrOutput) Elem() ScopeInvokeResponseOutput {
	return o.ApplyT(func(v *ScopeInvokeResponse) ScopeInvokeResponse { return *v }).(ScopeInvokeResponseOutput)
}

// type of target scope
func (o ScopeInvokeResponsePtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ScopeInvokeResponse) *string {
		if v == nil {
			return nil
		}
		return v.Type
	}).(pulumi.StringPtrOutput)
}

// list of ARM IDs of the given scope type which will be the target of the given action rule.
func (o ScopeInvokeResponsePtrOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ScopeInvokeResponse) []string {
		if v == nil {
			return nil
		}
		return v.Values
	}).(pulumi.StringArrayOutput)
}

// Target scope for a given action rule. By default scope will be the subscription. User can also provide list of resource groups or list of resources from the scope subscription as well.
type ScopeResponse struct {
	// type of target scope
	Type *string `pulumi:"type"`
	// list of ARM IDs of the given scope type which will be the target of the given action rule.
	Values []string `pulumi:"values"`
}

// ScopeResponseInput is an input type that accepts ScopeResponseArgs and ScopeResponseOutput values.
// You can construct a concrete instance of `ScopeResponseInput` via:
//
//          ScopeResponseArgs{...}
type ScopeResponseInput interface {
	pulumi.Input

	ToScopeResponseOutput() ScopeResponseOutput
	ToScopeResponseOutputWithContext(context.Context) ScopeResponseOutput
}

// Target scope for a given action rule. By default scope will be the subscription. User can also provide list of resource groups or list of resources from the scope subscription as well.
type ScopeResponseArgs struct {
	// type of target scope
	Type pulumi.StringPtrInput `pulumi:"type"`
	// list of ARM IDs of the given scope type which will be the target of the given action rule.
	Values pulumi.StringArrayInput `pulumi:"values"`
}

func (ScopeResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ScopeResponse)(nil)).Elem()
}

func (i ScopeResponseArgs) ToScopeResponseOutput() ScopeResponseOutput {
	return i.ToScopeResponseOutputWithContext(context.Background())
}

func (i ScopeResponseArgs) ToScopeResponseOutputWithContext(ctx context.Context) ScopeResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScopeResponseOutput)
}

func (i ScopeResponseArgs) ToScopeResponsePtrOutput() ScopeResponsePtrOutput {
	return i.ToScopeResponsePtrOutputWithContext(context.Background())
}

func (i ScopeResponseArgs) ToScopeResponsePtrOutputWithContext(ctx context.Context) ScopeResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScopeResponseOutput).ToScopeResponsePtrOutputWithContext(ctx)
}

// ScopeResponsePtrInput is an input type that accepts ScopeResponseArgs, ScopeResponsePtr and ScopeResponsePtrOutput values.
// You can construct a concrete instance of `ScopeResponsePtrInput` via:
//
//          ScopeResponseArgs{...}
//
//  or:
//
//          nil
type ScopeResponsePtrInput interface {
	pulumi.Input

	ToScopeResponsePtrOutput() ScopeResponsePtrOutput
	ToScopeResponsePtrOutputWithContext(context.Context) ScopeResponsePtrOutput
}

type scopeResponsePtrType ScopeResponseArgs

func ScopeResponsePtr(v *ScopeResponseArgs) ScopeResponsePtrInput {
	return (*scopeResponsePtrType)(v)
}

func (*scopeResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ScopeResponse)(nil)).Elem()
}

func (i *scopeResponsePtrType) ToScopeResponsePtrOutput() ScopeResponsePtrOutput {
	return i.ToScopeResponsePtrOutputWithContext(context.Background())
}

func (i *scopeResponsePtrType) ToScopeResponsePtrOutputWithContext(ctx context.Context) ScopeResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScopeResponsePtrOutput)
}

// Target scope for a given action rule. By default scope will be the subscription. User can also provide list of resource groups or list of resources from the scope subscription as well.
type ScopeResponseOutput struct{ *pulumi.OutputState }

func (ScopeResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ScopeResponse)(nil)).Elem()
}

func (o ScopeResponseOutput) ToScopeResponseOutput() ScopeResponseOutput {
	return o
}

func (o ScopeResponseOutput) ToScopeResponseOutputWithContext(ctx context.Context) ScopeResponseOutput {
	return o
}

func (o ScopeResponseOutput) ToScopeResponsePtrOutput() ScopeResponsePtrOutput {
	return o.ToScopeResponsePtrOutputWithContext(context.Background())
}

func (o ScopeResponseOutput) ToScopeResponsePtrOutputWithContext(ctx context.Context) ScopeResponsePtrOutput {
	return o.ApplyT(func(v ScopeResponse) *ScopeResponse {
		return &v
	}).(ScopeResponsePtrOutput)
}

// type of target scope
func (o ScopeResponseOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ScopeResponse) *string { return v.Type }).(pulumi.StringPtrOutput)
}

// list of ARM IDs of the given scope type which will be the target of the given action rule.
func (o ScopeResponseOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ScopeResponse) []string { return v.Values }).(pulumi.StringArrayOutput)
}

type ScopeResponsePtrOutput struct{ *pulumi.OutputState }

func (ScopeResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ScopeResponse)(nil)).Elem()
}

func (o ScopeResponsePtrOutput) ToScopeResponsePtrOutput() ScopeResponsePtrOutput {
	return o
}

func (o ScopeResponsePtrOutput) ToScopeResponsePtrOutputWithContext(ctx context.Context) ScopeResponsePtrOutput {
	return o
}

func (o ScopeResponsePtrOutput) Elem() ScopeResponseOutput {
	return o.ApplyT(func(v *ScopeResponse) ScopeResponse { return *v }).(ScopeResponseOutput)
}

// type of target scope
func (o ScopeResponsePtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ScopeResponse) *string {
		if v == nil {
			return nil
		}
		return v.Type
	}).(pulumi.StringPtrOutput)
}

// list of ARM IDs of the given scope type which will be the target of the given action rule.
func (o ScopeResponsePtrOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ScopeResponse) []string {
		if v == nil {
			return nil
		}
		return v.Values
	}).(pulumi.StringArrayOutput)
}

// Suppression logic for a given action rule
type SuppressionConfig struct {
	// Specifies when the suppression should be applied
	RecurrenceType string `pulumi:"recurrenceType"`
	// Schedule for a given suppression configuration.
	Schedule *SuppressionSchedule `pulumi:"schedule"`
}

// SuppressionConfigInput is an input type that accepts SuppressionConfigArgs and SuppressionConfigOutput values.
// You can construct a concrete instance of `SuppressionConfigInput` via:
//
//          SuppressionConfigArgs{...}
type SuppressionConfigInput interface {
	pulumi.Input

	ToSuppressionConfigOutput() SuppressionConfigOutput
	ToSuppressionConfigOutputWithContext(context.Context) SuppressionConfigOutput
}

// Suppression logic for a given action rule
type SuppressionConfigArgs struct {
	// Specifies when the suppression should be applied
	RecurrenceType pulumi.StringInput `pulumi:"recurrenceType"`
	// Schedule for a given suppression configuration.
	Schedule SuppressionSchedulePtrInput `pulumi:"schedule"`
}

func (SuppressionConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SuppressionConfig)(nil)).Elem()
}

func (i SuppressionConfigArgs) ToSuppressionConfigOutput() SuppressionConfigOutput {
	return i.ToSuppressionConfigOutputWithContext(context.Background())
}

func (i SuppressionConfigArgs) ToSuppressionConfigOutputWithContext(ctx context.Context) SuppressionConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SuppressionConfigOutput)
}

func (i SuppressionConfigArgs) ToSuppressionConfigPtrOutput() SuppressionConfigPtrOutput {
	return i.ToSuppressionConfigPtrOutputWithContext(context.Background())
}

func (i SuppressionConfigArgs) ToSuppressionConfigPtrOutputWithContext(ctx context.Context) SuppressionConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SuppressionConfigOutput).ToSuppressionConfigPtrOutputWithContext(ctx)
}

// SuppressionConfigPtrInput is an input type that accepts SuppressionConfigArgs, SuppressionConfigPtr and SuppressionConfigPtrOutput values.
// You can construct a concrete instance of `SuppressionConfigPtrInput` via:
//
//          SuppressionConfigArgs{...}
//
//  or:
//
//          nil
type SuppressionConfigPtrInput interface {
	pulumi.Input

	ToSuppressionConfigPtrOutput() SuppressionConfigPtrOutput
	ToSuppressionConfigPtrOutputWithContext(context.Context) SuppressionConfigPtrOutput
}

type suppressionConfigPtrType SuppressionConfigArgs

func SuppressionConfigPtr(v *SuppressionConfigArgs) SuppressionConfigPtrInput {
	return (*suppressionConfigPtrType)(v)
}

func (*suppressionConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SuppressionConfig)(nil)).Elem()
}

func (i *suppressionConfigPtrType) ToSuppressionConfigPtrOutput() SuppressionConfigPtrOutput {
	return i.ToSuppressionConfigPtrOutputWithContext(context.Background())
}

func (i *suppressionConfigPtrType) ToSuppressionConfigPtrOutputWithContext(ctx context.Context) SuppressionConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SuppressionConfigPtrOutput)
}

// Suppression logic for a given action rule
type SuppressionConfigOutput struct{ *pulumi.OutputState }

func (SuppressionConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SuppressionConfig)(nil)).Elem()
}

func (o SuppressionConfigOutput) ToSuppressionConfigOutput() SuppressionConfigOutput {
	return o
}

func (o SuppressionConfigOutput) ToSuppressionConfigOutputWithContext(ctx context.Context) SuppressionConfigOutput {
	return o
}

func (o SuppressionConfigOutput) ToSuppressionConfigPtrOutput() SuppressionConfigPtrOutput {
	return o.ToSuppressionConfigPtrOutputWithContext(context.Background())
}

func (o SuppressionConfigOutput) ToSuppressionConfigPtrOutputWithContext(ctx context.Context) SuppressionConfigPtrOutput {
	return o.ApplyT(func(v SuppressionConfig) *SuppressionConfig {
		return &v
	}).(SuppressionConfigPtrOutput)
}

// Specifies when the suppression should be applied
func (o SuppressionConfigOutput) RecurrenceType() pulumi.StringOutput {
	return o.ApplyT(func(v SuppressionConfig) string { return v.RecurrenceType }).(pulumi.StringOutput)
}

// Schedule for a given suppression configuration.
func (o SuppressionConfigOutput) Schedule() SuppressionSchedulePtrOutput {
	return o.ApplyT(func(v SuppressionConfig) *SuppressionSchedule { return v.Schedule }).(SuppressionSchedulePtrOutput)
}

type SuppressionConfigPtrOutput struct{ *pulumi.OutputState }

func (SuppressionConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SuppressionConfig)(nil)).Elem()
}

func (o SuppressionConfigPtrOutput) ToSuppressionConfigPtrOutput() SuppressionConfigPtrOutput {
	return o
}

func (o SuppressionConfigPtrOutput) ToSuppressionConfigPtrOutputWithContext(ctx context.Context) SuppressionConfigPtrOutput {
	return o
}

func (o SuppressionConfigPtrOutput) Elem() SuppressionConfigOutput {
	return o.ApplyT(func(v *SuppressionConfig) SuppressionConfig { return *v }).(SuppressionConfigOutput)
}

// Specifies when the suppression should be applied
func (o SuppressionConfigPtrOutput) RecurrenceType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SuppressionConfig) *string {
		if v == nil {
			return nil
		}
		return &v.RecurrenceType
	}).(pulumi.StringPtrOutput)
}

// Schedule for a given suppression configuration.
func (o SuppressionConfigPtrOutput) Schedule() SuppressionSchedulePtrOutput {
	return o.ApplyT(func(v *SuppressionConfig) *SuppressionSchedule {
		if v == nil {
			return nil
		}
		return v.Schedule
	}).(SuppressionSchedulePtrOutput)
}

// Suppression logic for a given action rule
type SuppressionConfigInvokeResponse struct {
	// Specifies when the suppression should be applied
	RecurrenceType string `pulumi:"recurrenceType"`
	// Schedule for a given suppression configuration.
	Schedule *SuppressionScheduleInvokeResponse `pulumi:"schedule"`
}

// SuppressionConfigInvokeResponseInput is an input type that accepts SuppressionConfigInvokeResponseArgs and SuppressionConfigInvokeResponseOutput values.
// You can construct a concrete instance of `SuppressionConfigInvokeResponseInput` via:
//
//          SuppressionConfigInvokeResponseArgs{...}
type SuppressionConfigInvokeResponseInput interface {
	pulumi.Input

	ToSuppressionConfigInvokeResponseOutput() SuppressionConfigInvokeResponseOutput
	ToSuppressionConfigInvokeResponseOutputWithContext(context.Context) SuppressionConfigInvokeResponseOutput
}

// Suppression logic for a given action rule
type SuppressionConfigInvokeResponseArgs struct {
	// Specifies when the suppression should be applied
	RecurrenceType pulumi.StringInput `pulumi:"recurrenceType"`
	// Schedule for a given suppression configuration.
	Schedule SuppressionScheduleInvokeResponsePtrInput `pulumi:"schedule"`
}

func (SuppressionConfigInvokeResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SuppressionConfigInvokeResponse)(nil)).Elem()
}

func (i SuppressionConfigInvokeResponseArgs) ToSuppressionConfigInvokeResponseOutput() SuppressionConfigInvokeResponseOutput {
	return i.ToSuppressionConfigInvokeResponseOutputWithContext(context.Background())
}

func (i SuppressionConfigInvokeResponseArgs) ToSuppressionConfigInvokeResponseOutputWithContext(ctx context.Context) SuppressionConfigInvokeResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SuppressionConfigInvokeResponseOutput)
}

func (i SuppressionConfigInvokeResponseArgs) ToSuppressionConfigInvokeResponsePtrOutput() SuppressionConfigInvokeResponsePtrOutput {
	return i.ToSuppressionConfigInvokeResponsePtrOutputWithContext(context.Background())
}

func (i SuppressionConfigInvokeResponseArgs) ToSuppressionConfigInvokeResponsePtrOutputWithContext(ctx context.Context) SuppressionConfigInvokeResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SuppressionConfigInvokeResponseOutput).ToSuppressionConfigInvokeResponsePtrOutputWithContext(ctx)
}

// SuppressionConfigInvokeResponsePtrInput is an input type that accepts SuppressionConfigInvokeResponseArgs, SuppressionConfigInvokeResponsePtr and SuppressionConfigInvokeResponsePtrOutput values.
// You can construct a concrete instance of `SuppressionConfigInvokeResponsePtrInput` via:
//
//          SuppressionConfigInvokeResponseArgs{...}
//
//  or:
//
//          nil
type SuppressionConfigInvokeResponsePtrInput interface {
	pulumi.Input

	ToSuppressionConfigInvokeResponsePtrOutput() SuppressionConfigInvokeResponsePtrOutput
	ToSuppressionConfigInvokeResponsePtrOutputWithContext(context.Context) SuppressionConfigInvokeResponsePtrOutput
}

type suppressionConfigInvokeResponsePtrType SuppressionConfigInvokeResponseArgs

func SuppressionConfigInvokeResponsePtr(v *SuppressionConfigInvokeResponseArgs) SuppressionConfigInvokeResponsePtrInput {
	return (*suppressionConfigInvokeResponsePtrType)(v)
}

func (*suppressionConfigInvokeResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SuppressionConfigInvokeResponse)(nil)).Elem()
}

func (i *suppressionConfigInvokeResponsePtrType) ToSuppressionConfigInvokeResponsePtrOutput() SuppressionConfigInvokeResponsePtrOutput {
	return i.ToSuppressionConfigInvokeResponsePtrOutputWithContext(context.Background())
}

func (i *suppressionConfigInvokeResponsePtrType) ToSuppressionConfigInvokeResponsePtrOutputWithContext(ctx context.Context) SuppressionConfigInvokeResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SuppressionConfigInvokeResponsePtrOutput)
}

// Suppression logic for a given action rule
type SuppressionConfigInvokeResponseOutput struct{ *pulumi.OutputState }

func (SuppressionConfigInvokeResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SuppressionConfigInvokeResponse)(nil)).Elem()
}

func (o SuppressionConfigInvokeResponseOutput) ToSuppressionConfigInvokeResponseOutput() SuppressionConfigInvokeResponseOutput {
	return o
}

func (o SuppressionConfigInvokeResponseOutput) ToSuppressionConfigInvokeResponseOutputWithContext(ctx context.Context) SuppressionConfigInvokeResponseOutput {
	return o
}

func (o SuppressionConfigInvokeResponseOutput) ToSuppressionConfigInvokeResponsePtrOutput() SuppressionConfigInvokeResponsePtrOutput {
	return o.ToSuppressionConfigInvokeResponsePtrOutputWithContext(context.Background())
}

func (o SuppressionConfigInvokeResponseOutput) ToSuppressionConfigInvokeResponsePtrOutputWithContext(ctx context.Context) SuppressionConfigInvokeResponsePtrOutput {
	return o.ApplyT(func(v SuppressionConfigInvokeResponse) *SuppressionConfigInvokeResponse {
		return &v
	}).(SuppressionConfigInvokeResponsePtrOutput)
}

// Specifies when the suppression should be applied
func (o SuppressionConfigInvokeResponseOutput) RecurrenceType() pulumi.StringOutput {
	return o.ApplyT(func(v SuppressionConfigInvokeResponse) string { return v.RecurrenceType }).(pulumi.StringOutput)
}

// Schedule for a given suppression configuration.
func (o SuppressionConfigInvokeResponseOutput) Schedule() SuppressionScheduleInvokeResponsePtrOutput {
	return o.ApplyT(func(v SuppressionConfigInvokeResponse) *SuppressionScheduleInvokeResponse { return v.Schedule }).(SuppressionScheduleInvokeResponsePtrOutput)
}

type SuppressionConfigInvokeResponsePtrOutput struct{ *pulumi.OutputState }

func (SuppressionConfigInvokeResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SuppressionConfigInvokeResponse)(nil)).Elem()
}

func (o SuppressionConfigInvokeResponsePtrOutput) ToSuppressionConfigInvokeResponsePtrOutput() SuppressionConfigInvokeResponsePtrOutput {
	return o
}

func (o SuppressionConfigInvokeResponsePtrOutput) ToSuppressionConfigInvokeResponsePtrOutputWithContext(ctx context.Context) SuppressionConfigInvokeResponsePtrOutput {
	return o
}

func (o SuppressionConfigInvokeResponsePtrOutput) Elem() SuppressionConfigInvokeResponseOutput {
	return o.ApplyT(func(v *SuppressionConfigInvokeResponse) SuppressionConfigInvokeResponse { return *v }).(SuppressionConfigInvokeResponseOutput)
}

// Specifies when the suppression should be applied
func (o SuppressionConfigInvokeResponsePtrOutput) RecurrenceType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SuppressionConfigInvokeResponse) *string {
		if v == nil {
			return nil
		}
		return &v.RecurrenceType
	}).(pulumi.StringPtrOutput)
}

// Schedule for a given suppression configuration.
func (o SuppressionConfigInvokeResponsePtrOutput) Schedule() SuppressionScheduleInvokeResponsePtrOutput {
	return o.ApplyT(func(v *SuppressionConfigInvokeResponse) *SuppressionScheduleInvokeResponse {
		if v == nil {
			return nil
		}
		return v.Schedule
	}).(SuppressionScheduleInvokeResponsePtrOutput)
}

// Suppression logic for a given action rule
type SuppressionConfigResponse struct {
	// Specifies when the suppression should be applied
	RecurrenceType string `pulumi:"recurrenceType"`
	// Schedule for a given suppression configuration.
	Schedule *SuppressionScheduleResponse `pulumi:"schedule"`
}

// SuppressionConfigResponseInput is an input type that accepts SuppressionConfigResponseArgs and SuppressionConfigResponseOutput values.
// You can construct a concrete instance of `SuppressionConfigResponseInput` via:
//
//          SuppressionConfigResponseArgs{...}
type SuppressionConfigResponseInput interface {
	pulumi.Input

	ToSuppressionConfigResponseOutput() SuppressionConfigResponseOutput
	ToSuppressionConfigResponseOutputWithContext(context.Context) SuppressionConfigResponseOutput
}

// Suppression logic for a given action rule
type SuppressionConfigResponseArgs struct {
	// Specifies when the suppression should be applied
	RecurrenceType pulumi.StringInput `pulumi:"recurrenceType"`
	// Schedule for a given suppression configuration.
	Schedule SuppressionScheduleResponsePtrInput `pulumi:"schedule"`
}

func (SuppressionConfigResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SuppressionConfigResponse)(nil)).Elem()
}

func (i SuppressionConfigResponseArgs) ToSuppressionConfigResponseOutput() SuppressionConfigResponseOutput {
	return i.ToSuppressionConfigResponseOutputWithContext(context.Background())
}

func (i SuppressionConfigResponseArgs) ToSuppressionConfigResponseOutputWithContext(ctx context.Context) SuppressionConfigResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SuppressionConfigResponseOutput)
}

func (i SuppressionConfigResponseArgs) ToSuppressionConfigResponsePtrOutput() SuppressionConfigResponsePtrOutput {
	return i.ToSuppressionConfigResponsePtrOutputWithContext(context.Background())
}

func (i SuppressionConfigResponseArgs) ToSuppressionConfigResponsePtrOutputWithContext(ctx context.Context) SuppressionConfigResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SuppressionConfigResponseOutput).ToSuppressionConfigResponsePtrOutputWithContext(ctx)
}

// SuppressionConfigResponsePtrInput is an input type that accepts SuppressionConfigResponseArgs, SuppressionConfigResponsePtr and SuppressionConfigResponsePtrOutput values.
// You can construct a concrete instance of `SuppressionConfigResponsePtrInput` via:
//
//          SuppressionConfigResponseArgs{...}
//
//  or:
//
//          nil
type SuppressionConfigResponsePtrInput interface {
	pulumi.Input

	ToSuppressionConfigResponsePtrOutput() SuppressionConfigResponsePtrOutput
	ToSuppressionConfigResponsePtrOutputWithContext(context.Context) SuppressionConfigResponsePtrOutput
}

type suppressionConfigResponsePtrType SuppressionConfigResponseArgs

func SuppressionConfigResponsePtr(v *SuppressionConfigResponseArgs) SuppressionConfigResponsePtrInput {
	return (*suppressionConfigResponsePtrType)(v)
}

func (*suppressionConfigResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SuppressionConfigResponse)(nil)).Elem()
}

func (i *suppressionConfigResponsePtrType) ToSuppressionConfigResponsePtrOutput() SuppressionConfigResponsePtrOutput {
	return i.ToSuppressionConfigResponsePtrOutputWithContext(context.Background())
}

func (i *suppressionConfigResponsePtrType) ToSuppressionConfigResponsePtrOutputWithContext(ctx context.Context) SuppressionConfigResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SuppressionConfigResponsePtrOutput)
}

// Suppression logic for a given action rule
type SuppressionConfigResponseOutput struct{ *pulumi.OutputState }

func (SuppressionConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SuppressionConfigResponse)(nil)).Elem()
}

func (o SuppressionConfigResponseOutput) ToSuppressionConfigResponseOutput() SuppressionConfigResponseOutput {
	return o
}

func (o SuppressionConfigResponseOutput) ToSuppressionConfigResponseOutputWithContext(ctx context.Context) SuppressionConfigResponseOutput {
	return o
}

func (o SuppressionConfigResponseOutput) ToSuppressionConfigResponsePtrOutput() SuppressionConfigResponsePtrOutput {
	return o.ToSuppressionConfigResponsePtrOutputWithContext(context.Background())
}

func (o SuppressionConfigResponseOutput) ToSuppressionConfigResponsePtrOutputWithContext(ctx context.Context) SuppressionConfigResponsePtrOutput {
	return o.ApplyT(func(v SuppressionConfigResponse) *SuppressionConfigResponse {
		return &v
	}).(SuppressionConfigResponsePtrOutput)
}

// Specifies when the suppression should be applied
func (o SuppressionConfigResponseOutput) RecurrenceType() pulumi.StringOutput {
	return o.ApplyT(func(v SuppressionConfigResponse) string { return v.RecurrenceType }).(pulumi.StringOutput)
}

// Schedule for a given suppression configuration.
func (o SuppressionConfigResponseOutput) Schedule() SuppressionScheduleResponsePtrOutput {
	return o.ApplyT(func(v SuppressionConfigResponse) *SuppressionScheduleResponse { return v.Schedule }).(SuppressionScheduleResponsePtrOutput)
}

type SuppressionConfigResponsePtrOutput struct{ *pulumi.OutputState }

func (SuppressionConfigResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SuppressionConfigResponse)(nil)).Elem()
}

func (o SuppressionConfigResponsePtrOutput) ToSuppressionConfigResponsePtrOutput() SuppressionConfigResponsePtrOutput {
	return o
}

func (o SuppressionConfigResponsePtrOutput) ToSuppressionConfigResponsePtrOutputWithContext(ctx context.Context) SuppressionConfigResponsePtrOutput {
	return o
}

func (o SuppressionConfigResponsePtrOutput) Elem() SuppressionConfigResponseOutput {
	return o.ApplyT(func(v *SuppressionConfigResponse) SuppressionConfigResponse { return *v }).(SuppressionConfigResponseOutput)
}

// Specifies when the suppression should be applied
func (o SuppressionConfigResponsePtrOutput) RecurrenceType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SuppressionConfigResponse) *string {
		if v == nil {
			return nil
		}
		return &v.RecurrenceType
	}).(pulumi.StringPtrOutput)
}

// Schedule for a given suppression configuration.
func (o SuppressionConfigResponsePtrOutput) Schedule() SuppressionScheduleResponsePtrOutput {
	return o.ApplyT(func(v *SuppressionConfigResponse) *SuppressionScheduleResponse {
		if v == nil {
			return nil
		}
		return v.Schedule
	}).(SuppressionScheduleResponsePtrOutput)
}

// Schedule for a given suppression configuration.
type SuppressionSchedule struct {
	// End date for suppression
	EndDate *string `pulumi:"endDate"`
	// End date for suppression
	EndTime *string `pulumi:"endTime"`
	// Specifies the values for recurrence pattern
	RecurrenceValues []int `pulumi:"recurrenceValues"`
	// Start date for suppression
	StartDate *string `pulumi:"startDate"`
	// Start time for suppression
	StartTime *string `pulumi:"startTime"`
}

// SuppressionScheduleInput is an input type that accepts SuppressionScheduleArgs and SuppressionScheduleOutput values.
// You can construct a concrete instance of `SuppressionScheduleInput` via:
//
//          SuppressionScheduleArgs{...}
type SuppressionScheduleInput interface {
	pulumi.Input

	ToSuppressionScheduleOutput() SuppressionScheduleOutput
	ToSuppressionScheduleOutputWithContext(context.Context) SuppressionScheduleOutput
}

// Schedule for a given suppression configuration.
type SuppressionScheduleArgs struct {
	// End date for suppression
	EndDate pulumi.StringPtrInput `pulumi:"endDate"`
	// End date for suppression
	EndTime pulumi.StringPtrInput `pulumi:"endTime"`
	// Specifies the values for recurrence pattern
	RecurrenceValues pulumi.IntArrayInput `pulumi:"recurrenceValues"`
	// Start date for suppression
	StartDate pulumi.StringPtrInput `pulumi:"startDate"`
	// Start time for suppression
	StartTime pulumi.StringPtrInput `pulumi:"startTime"`
}

func (SuppressionScheduleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SuppressionSchedule)(nil)).Elem()
}

func (i SuppressionScheduleArgs) ToSuppressionScheduleOutput() SuppressionScheduleOutput {
	return i.ToSuppressionScheduleOutputWithContext(context.Background())
}

func (i SuppressionScheduleArgs) ToSuppressionScheduleOutputWithContext(ctx context.Context) SuppressionScheduleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SuppressionScheduleOutput)
}

func (i SuppressionScheduleArgs) ToSuppressionSchedulePtrOutput() SuppressionSchedulePtrOutput {
	return i.ToSuppressionSchedulePtrOutputWithContext(context.Background())
}

func (i SuppressionScheduleArgs) ToSuppressionSchedulePtrOutputWithContext(ctx context.Context) SuppressionSchedulePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SuppressionScheduleOutput).ToSuppressionSchedulePtrOutputWithContext(ctx)
}

// SuppressionSchedulePtrInput is an input type that accepts SuppressionScheduleArgs, SuppressionSchedulePtr and SuppressionSchedulePtrOutput values.
// You can construct a concrete instance of `SuppressionSchedulePtrInput` via:
//
//          SuppressionScheduleArgs{...}
//
//  or:
//
//          nil
type SuppressionSchedulePtrInput interface {
	pulumi.Input

	ToSuppressionSchedulePtrOutput() SuppressionSchedulePtrOutput
	ToSuppressionSchedulePtrOutputWithContext(context.Context) SuppressionSchedulePtrOutput
}

type suppressionSchedulePtrType SuppressionScheduleArgs

func SuppressionSchedulePtr(v *SuppressionScheduleArgs) SuppressionSchedulePtrInput {
	return (*suppressionSchedulePtrType)(v)
}

func (*suppressionSchedulePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SuppressionSchedule)(nil)).Elem()
}

func (i *suppressionSchedulePtrType) ToSuppressionSchedulePtrOutput() SuppressionSchedulePtrOutput {
	return i.ToSuppressionSchedulePtrOutputWithContext(context.Background())
}

func (i *suppressionSchedulePtrType) ToSuppressionSchedulePtrOutputWithContext(ctx context.Context) SuppressionSchedulePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SuppressionSchedulePtrOutput)
}

// Schedule for a given suppression configuration.
type SuppressionScheduleOutput struct{ *pulumi.OutputState }

func (SuppressionScheduleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SuppressionSchedule)(nil)).Elem()
}

func (o SuppressionScheduleOutput) ToSuppressionScheduleOutput() SuppressionScheduleOutput {
	return o
}

func (o SuppressionScheduleOutput) ToSuppressionScheduleOutputWithContext(ctx context.Context) SuppressionScheduleOutput {
	return o
}

func (o SuppressionScheduleOutput) ToSuppressionSchedulePtrOutput() SuppressionSchedulePtrOutput {
	return o.ToSuppressionSchedulePtrOutputWithContext(context.Background())
}

func (o SuppressionScheduleOutput) ToSuppressionSchedulePtrOutputWithContext(ctx context.Context) SuppressionSchedulePtrOutput {
	return o.ApplyT(func(v SuppressionSchedule) *SuppressionSchedule {
		return &v
	}).(SuppressionSchedulePtrOutput)
}

// End date for suppression
func (o SuppressionScheduleOutput) EndDate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SuppressionSchedule) *string { return v.EndDate }).(pulumi.StringPtrOutput)
}

// End date for suppression
func (o SuppressionScheduleOutput) EndTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SuppressionSchedule) *string { return v.EndTime }).(pulumi.StringPtrOutput)
}

// Specifies the values for recurrence pattern
func (o SuppressionScheduleOutput) RecurrenceValues() pulumi.IntArrayOutput {
	return o.ApplyT(func(v SuppressionSchedule) []int { return v.RecurrenceValues }).(pulumi.IntArrayOutput)
}

// Start date for suppression
func (o SuppressionScheduleOutput) StartDate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SuppressionSchedule) *string { return v.StartDate }).(pulumi.StringPtrOutput)
}

// Start time for suppression
func (o SuppressionScheduleOutput) StartTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SuppressionSchedule) *string { return v.StartTime }).(pulumi.StringPtrOutput)
}

type SuppressionSchedulePtrOutput struct{ *pulumi.OutputState }

func (SuppressionSchedulePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SuppressionSchedule)(nil)).Elem()
}

func (o SuppressionSchedulePtrOutput) ToSuppressionSchedulePtrOutput() SuppressionSchedulePtrOutput {
	return o
}

func (o SuppressionSchedulePtrOutput) ToSuppressionSchedulePtrOutputWithContext(ctx context.Context) SuppressionSchedulePtrOutput {
	return o
}

func (o SuppressionSchedulePtrOutput) Elem() SuppressionScheduleOutput {
	return o.ApplyT(func(v *SuppressionSchedule) SuppressionSchedule { return *v }).(SuppressionScheduleOutput)
}

// End date for suppression
func (o SuppressionSchedulePtrOutput) EndDate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SuppressionSchedule) *string {
		if v == nil {
			return nil
		}
		return v.EndDate
	}).(pulumi.StringPtrOutput)
}

// End date for suppression
func (o SuppressionSchedulePtrOutput) EndTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SuppressionSchedule) *string {
		if v == nil {
			return nil
		}
		return v.EndTime
	}).(pulumi.StringPtrOutput)
}

// Specifies the values for recurrence pattern
func (o SuppressionSchedulePtrOutput) RecurrenceValues() pulumi.IntArrayOutput {
	return o.ApplyT(func(v *SuppressionSchedule) []int {
		if v == nil {
			return nil
		}
		return v.RecurrenceValues
	}).(pulumi.IntArrayOutput)
}

// Start date for suppression
func (o SuppressionSchedulePtrOutput) StartDate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SuppressionSchedule) *string {
		if v == nil {
			return nil
		}
		return v.StartDate
	}).(pulumi.StringPtrOutput)
}

// Start time for suppression
func (o SuppressionSchedulePtrOutput) StartTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SuppressionSchedule) *string {
		if v == nil {
			return nil
		}
		return v.StartTime
	}).(pulumi.StringPtrOutput)
}

// Schedule for a given suppression configuration.
type SuppressionScheduleInvokeResponse struct {
	// End date for suppression
	EndDate *string `pulumi:"endDate"`
	// End date for suppression
	EndTime *string `pulumi:"endTime"`
	// Specifies the values for recurrence pattern
	RecurrenceValues []int `pulumi:"recurrenceValues"`
	// Start date for suppression
	StartDate *string `pulumi:"startDate"`
	// Start time for suppression
	StartTime *string `pulumi:"startTime"`
}

// SuppressionScheduleInvokeResponseInput is an input type that accepts SuppressionScheduleInvokeResponseArgs and SuppressionScheduleInvokeResponseOutput values.
// You can construct a concrete instance of `SuppressionScheduleInvokeResponseInput` via:
//
//          SuppressionScheduleInvokeResponseArgs{...}
type SuppressionScheduleInvokeResponseInput interface {
	pulumi.Input

	ToSuppressionScheduleInvokeResponseOutput() SuppressionScheduleInvokeResponseOutput
	ToSuppressionScheduleInvokeResponseOutputWithContext(context.Context) SuppressionScheduleInvokeResponseOutput
}

// Schedule for a given suppression configuration.
type SuppressionScheduleInvokeResponseArgs struct {
	// End date for suppression
	EndDate pulumi.StringPtrInput `pulumi:"endDate"`
	// End date for suppression
	EndTime pulumi.StringPtrInput `pulumi:"endTime"`
	// Specifies the values for recurrence pattern
	RecurrenceValues pulumi.IntArrayInput `pulumi:"recurrenceValues"`
	// Start date for suppression
	StartDate pulumi.StringPtrInput `pulumi:"startDate"`
	// Start time for suppression
	StartTime pulumi.StringPtrInput `pulumi:"startTime"`
}

func (SuppressionScheduleInvokeResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SuppressionScheduleInvokeResponse)(nil)).Elem()
}

func (i SuppressionScheduleInvokeResponseArgs) ToSuppressionScheduleInvokeResponseOutput() SuppressionScheduleInvokeResponseOutput {
	return i.ToSuppressionScheduleInvokeResponseOutputWithContext(context.Background())
}

func (i SuppressionScheduleInvokeResponseArgs) ToSuppressionScheduleInvokeResponseOutputWithContext(ctx context.Context) SuppressionScheduleInvokeResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SuppressionScheduleInvokeResponseOutput)
}

func (i SuppressionScheduleInvokeResponseArgs) ToSuppressionScheduleInvokeResponsePtrOutput() SuppressionScheduleInvokeResponsePtrOutput {
	return i.ToSuppressionScheduleInvokeResponsePtrOutputWithContext(context.Background())
}

func (i SuppressionScheduleInvokeResponseArgs) ToSuppressionScheduleInvokeResponsePtrOutputWithContext(ctx context.Context) SuppressionScheduleInvokeResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SuppressionScheduleInvokeResponseOutput).ToSuppressionScheduleInvokeResponsePtrOutputWithContext(ctx)
}

// SuppressionScheduleInvokeResponsePtrInput is an input type that accepts SuppressionScheduleInvokeResponseArgs, SuppressionScheduleInvokeResponsePtr and SuppressionScheduleInvokeResponsePtrOutput values.
// You can construct a concrete instance of `SuppressionScheduleInvokeResponsePtrInput` via:
//
//          SuppressionScheduleInvokeResponseArgs{...}
//
//  or:
//
//          nil
type SuppressionScheduleInvokeResponsePtrInput interface {
	pulumi.Input

	ToSuppressionScheduleInvokeResponsePtrOutput() SuppressionScheduleInvokeResponsePtrOutput
	ToSuppressionScheduleInvokeResponsePtrOutputWithContext(context.Context) SuppressionScheduleInvokeResponsePtrOutput
}

type suppressionScheduleInvokeResponsePtrType SuppressionScheduleInvokeResponseArgs

func SuppressionScheduleInvokeResponsePtr(v *SuppressionScheduleInvokeResponseArgs) SuppressionScheduleInvokeResponsePtrInput {
	return (*suppressionScheduleInvokeResponsePtrType)(v)
}

func (*suppressionScheduleInvokeResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SuppressionScheduleInvokeResponse)(nil)).Elem()
}

func (i *suppressionScheduleInvokeResponsePtrType) ToSuppressionScheduleInvokeResponsePtrOutput() SuppressionScheduleInvokeResponsePtrOutput {
	return i.ToSuppressionScheduleInvokeResponsePtrOutputWithContext(context.Background())
}

func (i *suppressionScheduleInvokeResponsePtrType) ToSuppressionScheduleInvokeResponsePtrOutputWithContext(ctx context.Context) SuppressionScheduleInvokeResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SuppressionScheduleInvokeResponsePtrOutput)
}

// Schedule for a given suppression configuration.
type SuppressionScheduleInvokeResponseOutput struct{ *pulumi.OutputState }

func (SuppressionScheduleInvokeResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SuppressionScheduleInvokeResponse)(nil)).Elem()
}

func (o SuppressionScheduleInvokeResponseOutput) ToSuppressionScheduleInvokeResponseOutput() SuppressionScheduleInvokeResponseOutput {
	return o
}

func (o SuppressionScheduleInvokeResponseOutput) ToSuppressionScheduleInvokeResponseOutputWithContext(ctx context.Context) SuppressionScheduleInvokeResponseOutput {
	return o
}

func (o SuppressionScheduleInvokeResponseOutput) ToSuppressionScheduleInvokeResponsePtrOutput() SuppressionScheduleInvokeResponsePtrOutput {
	return o.ToSuppressionScheduleInvokeResponsePtrOutputWithContext(context.Background())
}

func (o SuppressionScheduleInvokeResponseOutput) ToSuppressionScheduleInvokeResponsePtrOutputWithContext(ctx context.Context) SuppressionScheduleInvokeResponsePtrOutput {
	return o.ApplyT(func(v SuppressionScheduleInvokeResponse) *SuppressionScheduleInvokeResponse {
		return &v
	}).(SuppressionScheduleInvokeResponsePtrOutput)
}

// End date for suppression
func (o SuppressionScheduleInvokeResponseOutput) EndDate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SuppressionScheduleInvokeResponse) *string { return v.EndDate }).(pulumi.StringPtrOutput)
}

// End date for suppression
func (o SuppressionScheduleInvokeResponseOutput) EndTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SuppressionScheduleInvokeResponse) *string { return v.EndTime }).(pulumi.StringPtrOutput)
}

// Specifies the values for recurrence pattern
func (o SuppressionScheduleInvokeResponseOutput) RecurrenceValues() pulumi.IntArrayOutput {
	return o.ApplyT(func(v SuppressionScheduleInvokeResponse) []int { return v.RecurrenceValues }).(pulumi.IntArrayOutput)
}

// Start date for suppression
func (o SuppressionScheduleInvokeResponseOutput) StartDate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SuppressionScheduleInvokeResponse) *string { return v.StartDate }).(pulumi.StringPtrOutput)
}

// Start time for suppression
func (o SuppressionScheduleInvokeResponseOutput) StartTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SuppressionScheduleInvokeResponse) *string { return v.StartTime }).(pulumi.StringPtrOutput)
}

type SuppressionScheduleInvokeResponsePtrOutput struct{ *pulumi.OutputState }

func (SuppressionScheduleInvokeResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SuppressionScheduleInvokeResponse)(nil)).Elem()
}

func (o SuppressionScheduleInvokeResponsePtrOutput) ToSuppressionScheduleInvokeResponsePtrOutput() SuppressionScheduleInvokeResponsePtrOutput {
	return o
}

func (o SuppressionScheduleInvokeResponsePtrOutput) ToSuppressionScheduleInvokeResponsePtrOutputWithContext(ctx context.Context) SuppressionScheduleInvokeResponsePtrOutput {
	return o
}

func (o SuppressionScheduleInvokeResponsePtrOutput) Elem() SuppressionScheduleInvokeResponseOutput {
	return o.ApplyT(func(v *SuppressionScheduleInvokeResponse) SuppressionScheduleInvokeResponse { return *v }).(SuppressionScheduleInvokeResponseOutput)
}

// End date for suppression
func (o SuppressionScheduleInvokeResponsePtrOutput) EndDate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SuppressionScheduleInvokeResponse) *string {
		if v == nil {
			return nil
		}
		return v.EndDate
	}).(pulumi.StringPtrOutput)
}

// End date for suppression
func (o SuppressionScheduleInvokeResponsePtrOutput) EndTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SuppressionScheduleInvokeResponse) *string {
		if v == nil {
			return nil
		}
		return v.EndTime
	}).(pulumi.StringPtrOutput)
}

// Specifies the values for recurrence pattern
func (o SuppressionScheduleInvokeResponsePtrOutput) RecurrenceValues() pulumi.IntArrayOutput {
	return o.ApplyT(func(v *SuppressionScheduleInvokeResponse) []int {
		if v == nil {
			return nil
		}
		return v.RecurrenceValues
	}).(pulumi.IntArrayOutput)
}

// Start date for suppression
func (o SuppressionScheduleInvokeResponsePtrOutput) StartDate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SuppressionScheduleInvokeResponse) *string {
		if v == nil {
			return nil
		}
		return v.StartDate
	}).(pulumi.StringPtrOutput)
}

// Start time for suppression
func (o SuppressionScheduleInvokeResponsePtrOutput) StartTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SuppressionScheduleInvokeResponse) *string {
		if v == nil {
			return nil
		}
		return v.StartTime
	}).(pulumi.StringPtrOutput)
}

// Schedule for a given suppression configuration.
type SuppressionScheduleResponse struct {
	// End date for suppression
	EndDate *string `pulumi:"endDate"`
	// End date for suppression
	EndTime *string `pulumi:"endTime"`
	// Specifies the values for recurrence pattern
	RecurrenceValues []int `pulumi:"recurrenceValues"`
	// Start date for suppression
	StartDate *string `pulumi:"startDate"`
	// Start time for suppression
	StartTime *string `pulumi:"startTime"`
}

// SuppressionScheduleResponseInput is an input type that accepts SuppressionScheduleResponseArgs and SuppressionScheduleResponseOutput values.
// You can construct a concrete instance of `SuppressionScheduleResponseInput` via:
//
//          SuppressionScheduleResponseArgs{...}
type SuppressionScheduleResponseInput interface {
	pulumi.Input

	ToSuppressionScheduleResponseOutput() SuppressionScheduleResponseOutput
	ToSuppressionScheduleResponseOutputWithContext(context.Context) SuppressionScheduleResponseOutput
}

// Schedule for a given suppression configuration.
type SuppressionScheduleResponseArgs struct {
	// End date for suppression
	EndDate pulumi.StringPtrInput `pulumi:"endDate"`
	// End date for suppression
	EndTime pulumi.StringPtrInput `pulumi:"endTime"`
	// Specifies the values for recurrence pattern
	RecurrenceValues pulumi.IntArrayInput `pulumi:"recurrenceValues"`
	// Start date for suppression
	StartDate pulumi.StringPtrInput `pulumi:"startDate"`
	// Start time for suppression
	StartTime pulumi.StringPtrInput `pulumi:"startTime"`
}

func (SuppressionScheduleResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SuppressionScheduleResponse)(nil)).Elem()
}

func (i SuppressionScheduleResponseArgs) ToSuppressionScheduleResponseOutput() SuppressionScheduleResponseOutput {
	return i.ToSuppressionScheduleResponseOutputWithContext(context.Background())
}

func (i SuppressionScheduleResponseArgs) ToSuppressionScheduleResponseOutputWithContext(ctx context.Context) SuppressionScheduleResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SuppressionScheduleResponseOutput)
}

func (i SuppressionScheduleResponseArgs) ToSuppressionScheduleResponsePtrOutput() SuppressionScheduleResponsePtrOutput {
	return i.ToSuppressionScheduleResponsePtrOutputWithContext(context.Background())
}

func (i SuppressionScheduleResponseArgs) ToSuppressionScheduleResponsePtrOutputWithContext(ctx context.Context) SuppressionScheduleResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SuppressionScheduleResponseOutput).ToSuppressionScheduleResponsePtrOutputWithContext(ctx)
}

// SuppressionScheduleResponsePtrInput is an input type that accepts SuppressionScheduleResponseArgs, SuppressionScheduleResponsePtr and SuppressionScheduleResponsePtrOutput values.
// You can construct a concrete instance of `SuppressionScheduleResponsePtrInput` via:
//
//          SuppressionScheduleResponseArgs{...}
//
//  or:
//
//          nil
type SuppressionScheduleResponsePtrInput interface {
	pulumi.Input

	ToSuppressionScheduleResponsePtrOutput() SuppressionScheduleResponsePtrOutput
	ToSuppressionScheduleResponsePtrOutputWithContext(context.Context) SuppressionScheduleResponsePtrOutput
}

type suppressionScheduleResponsePtrType SuppressionScheduleResponseArgs

func SuppressionScheduleResponsePtr(v *SuppressionScheduleResponseArgs) SuppressionScheduleResponsePtrInput {
	return (*suppressionScheduleResponsePtrType)(v)
}

func (*suppressionScheduleResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SuppressionScheduleResponse)(nil)).Elem()
}

func (i *suppressionScheduleResponsePtrType) ToSuppressionScheduleResponsePtrOutput() SuppressionScheduleResponsePtrOutput {
	return i.ToSuppressionScheduleResponsePtrOutputWithContext(context.Background())
}

func (i *suppressionScheduleResponsePtrType) ToSuppressionScheduleResponsePtrOutputWithContext(ctx context.Context) SuppressionScheduleResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SuppressionScheduleResponsePtrOutput)
}

// Schedule for a given suppression configuration.
type SuppressionScheduleResponseOutput struct{ *pulumi.OutputState }

func (SuppressionScheduleResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SuppressionScheduleResponse)(nil)).Elem()
}

func (o SuppressionScheduleResponseOutput) ToSuppressionScheduleResponseOutput() SuppressionScheduleResponseOutput {
	return o
}

func (o SuppressionScheduleResponseOutput) ToSuppressionScheduleResponseOutputWithContext(ctx context.Context) SuppressionScheduleResponseOutput {
	return o
}

func (o SuppressionScheduleResponseOutput) ToSuppressionScheduleResponsePtrOutput() SuppressionScheduleResponsePtrOutput {
	return o.ToSuppressionScheduleResponsePtrOutputWithContext(context.Background())
}

func (o SuppressionScheduleResponseOutput) ToSuppressionScheduleResponsePtrOutputWithContext(ctx context.Context) SuppressionScheduleResponsePtrOutput {
	return o.ApplyT(func(v SuppressionScheduleResponse) *SuppressionScheduleResponse {
		return &v
	}).(SuppressionScheduleResponsePtrOutput)
}

// End date for suppression
func (o SuppressionScheduleResponseOutput) EndDate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SuppressionScheduleResponse) *string { return v.EndDate }).(pulumi.StringPtrOutput)
}

// End date for suppression
func (o SuppressionScheduleResponseOutput) EndTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SuppressionScheduleResponse) *string { return v.EndTime }).(pulumi.StringPtrOutput)
}

// Specifies the values for recurrence pattern
func (o SuppressionScheduleResponseOutput) RecurrenceValues() pulumi.IntArrayOutput {
	return o.ApplyT(func(v SuppressionScheduleResponse) []int { return v.RecurrenceValues }).(pulumi.IntArrayOutput)
}

// Start date for suppression
func (o SuppressionScheduleResponseOutput) StartDate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SuppressionScheduleResponse) *string { return v.StartDate }).(pulumi.StringPtrOutput)
}

// Start time for suppression
func (o SuppressionScheduleResponseOutput) StartTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SuppressionScheduleResponse) *string { return v.StartTime }).(pulumi.StringPtrOutput)
}

type SuppressionScheduleResponsePtrOutput struct{ *pulumi.OutputState }

func (SuppressionScheduleResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SuppressionScheduleResponse)(nil)).Elem()
}

func (o SuppressionScheduleResponsePtrOutput) ToSuppressionScheduleResponsePtrOutput() SuppressionScheduleResponsePtrOutput {
	return o
}

func (o SuppressionScheduleResponsePtrOutput) ToSuppressionScheduleResponsePtrOutputWithContext(ctx context.Context) SuppressionScheduleResponsePtrOutput {
	return o
}

func (o SuppressionScheduleResponsePtrOutput) Elem() SuppressionScheduleResponseOutput {
	return o.ApplyT(func(v *SuppressionScheduleResponse) SuppressionScheduleResponse { return *v }).(SuppressionScheduleResponseOutput)
}

// End date for suppression
func (o SuppressionScheduleResponsePtrOutput) EndDate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SuppressionScheduleResponse) *string {
		if v == nil {
			return nil
		}
		return v.EndDate
	}).(pulumi.StringPtrOutput)
}

// End date for suppression
func (o SuppressionScheduleResponsePtrOutput) EndTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SuppressionScheduleResponse) *string {
		if v == nil {
			return nil
		}
		return v.EndTime
	}).(pulumi.StringPtrOutput)
}

// Specifies the values for recurrence pattern
func (o SuppressionScheduleResponsePtrOutput) RecurrenceValues() pulumi.IntArrayOutput {
	return o.ApplyT(func(v *SuppressionScheduleResponse) []int {
		if v == nil {
			return nil
		}
		return v.RecurrenceValues
	}).(pulumi.IntArrayOutput)
}

// Start date for suppression
func (o SuppressionScheduleResponsePtrOutput) StartDate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SuppressionScheduleResponse) *string {
		if v == nil {
			return nil
		}
		return v.StartDate
	}).(pulumi.StringPtrOutput)
}

// Start time for suppression
func (o SuppressionScheduleResponsePtrOutput) StartTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SuppressionScheduleResponse) *string {
		if v == nil {
			return nil
		}
		return v.StartTime
	}).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(ActionRulePropertiesOutput{})
	pulumi.RegisterOutputType(ActionRulePropertiesPtrOutput{})
	pulumi.RegisterOutputType(ActionRulePropertiesInvokeResponseOutput{})
	pulumi.RegisterOutputType(ActionRulePropertiesResponseOutput{})
	pulumi.RegisterOutputType(ActionRulePropertiesResponsePtrOutput{})
	pulumi.RegisterOutputType(ConditionOutput{})
	pulumi.RegisterOutputType(ConditionPtrOutput{})
	pulumi.RegisterOutputType(ConditionInvokeResponseOutput{})
	pulumi.RegisterOutputType(ConditionInvokeResponsePtrOutput{})
	pulumi.RegisterOutputType(ConditionResponseOutput{})
	pulumi.RegisterOutputType(ConditionResponsePtrOutput{})
	pulumi.RegisterOutputType(ConditionsOutput{})
	pulumi.RegisterOutputType(ConditionsPtrOutput{})
	pulumi.RegisterOutputType(ConditionsInvokeResponseOutput{})
	pulumi.RegisterOutputType(ConditionsInvokeResponsePtrOutput{})
	pulumi.RegisterOutputType(ConditionsResponseOutput{})
	pulumi.RegisterOutputType(ConditionsResponsePtrOutput{})
	pulumi.RegisterOutputType(ScopeOutput{})
	pulumi.RegisterOutputType(ScopePtrOutput{})
	pulumi.RegisterOutputType(ScopeInvokeResponseOutput{})
	pulumi.RegisterOutputType(ScopeInvokeResponsePtrOutput{})
	pulumi.RegisterOutputType(ScopeResponseOutput{})
	pulumi.RegisterOutputType(ScopeResponsePtrOutput{})
	pulumi.RegisterOutputType(SuppressionConfigOutput{})
	pulumi.RegisterOutputType(SuppressionConfigPtrOutput{})
	pulumi.RegisterOutputType(SuppressionConfigInvokeResponseOutput{})
	pulumi.RegisterOutputType(SuppressionConfigInvokeResponsePtrOutput{})
	pulumi.RegisterOutputType(SuppressionConfigResponseOutput{})
	pulumi.RegisterOutputType(SuppressionConfigResponsePtrOutput{})
	pulumi.RegisterOutputType(SuppressionScheduleOutput{})
	pulumi.RegisterOutputType(SuppressionSchedulePtrOutput{})
	pulumi.RegisterOutputType(SuppressionScheduleInvokeResponseOutput{})
	pulumi.RegisterOutputType(SuppressionScheduleInvokeResponsePtrOutput{})
	pulumi.RegisterOutputType(SuppressionScheduleResponseOutput{})
	pulumi.RegisterOutputType(SuppressionScheduleResponsePtrOutput{})
}
