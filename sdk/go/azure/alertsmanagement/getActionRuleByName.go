// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package alertsmanagement

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Action rule object containing target scope, conditions and suppression logic
// API Version: 2019-05-05-preview.
func LookupActionRuleByName(ctx *pulumi.Context, args *LookupActionRuleByNameArgs, opts ...pulumi.InvokeOption) (*LookupActionRuleByNameResult, error) {
	var rv LookupActionRuleByNameResult
	err := ctx.Invoke("azure-native:alertsmanagement:getActionRuleByName", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type LookupActionRuleByNameArgs struct {
	// The name of action rule that needs to be fetched
	ActionRuleName string `pulumi:"actionRuleName"`
	// Resource group name where the resource is created.
	ResourceGroupName string `pulumi:"resourceGroupName"`
}

// Action rule object containing target scope, conditions and suppression logic
type LookupActionRuleByNameResult struct {
	// Azure resource Id
	Id string `pulumi:"id"`
	// Resource location
	Location string `pulumi:"location"`
	// Azure resource name
	Name string `pulumi:"name"`
	// action rule properties
	Properties interface{} `pulumi:"properties"`
	// Resource tags
	Tags map[string]string `pulumi:"tags"`
	// Azure resource type
	Type string `pulumi:"type"`
}

func LookupActionRuleByNameOutput(ctx *pulumi.Context, args LookupActionRuleByNameOutputArgs, opts ...pulumi.InvokeOption) LookupActionRuleByNameResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupActionRuleByNameResult, error) {
			args := v.(LookupActionRuleByNameArgs)
			r, err := LookupActionRuleByName(ctx, &args, opts...)
			var s LookupActionRuleByNameResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupActionRuleByNameResultOutput)
}

type LookupActionRuleByNameOutputArgs struct {
	// The name of action rule that needs to be fetched
	ActionRuleName pulumi.StringInput `pulumi:"actionRuleName"`
	// Resource group name where the resource is created.
	ResourceGroupName pulumi.StringInput `pulumi:"resourceGroupName"`
}

func (LookupActionRuleByNameOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupActionRuleByNameArgs)(nil)).Elem()
}

// Action rule object containing target scope, conditions and suppression logic
type LookupActionRuleByNameResultOutput struct{ *pulumi.OutputState }

func (LookupActionRuleByNameResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupActionRuleByNameResult)(nil)).Elem()
}

func (o LookupActionRuleByNameResultOutput) ToLookupActionRuleByNameResultOutput() LookupActionRuleByNameResultOutput {
	return o
}

func (o LookupActionRuleByNameResultOutput) ToLookupActionRuleByNameResultOutputWithContext(ctx context.Context) LookupActionRuleByNameResultOutput {
	return o
}

// Azure resource Id
func (o LookupActionRuleByNameResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupActionRuleByNameResult) string { return v.Id }).(pulumi.StringOutput)
}

// Resource location
func (o LookupActionRuleByNameResultOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v LookupActionRuleByNameResult) string { return v.Location }).(pulumi.StringOutput)
}

// Azure resource name
func (o LookupActionRuleByNameResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupActionRuleByNameResult) string { return v.Name }).(pulumi.StringOutput)
}

// action rule properties
func (o LookupActionRuleByNameResultOutput) Properties() pulumi.AnyOutput {
	return o.ApplyT(func(v LookupActionRuleByNameResult) interface{} { return v.Properties }).(pulumi.AnyOutput)
}

// Resource tags
func (o LookupActionRuleByNameResultOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v LookupActionRuleByNameResult) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

// Azure resource type
func (o LookupActionRuleByNameResultOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v LookupActionRuleByNameResult) string { return v.Type }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupActionRuleByNameResultOutput{})
}
