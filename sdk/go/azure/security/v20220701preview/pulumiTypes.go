// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v20220701preview

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Application's condition
type ApplicationCondition struct {
	// The application Condition's Operator, for example Contains for id or In for list of possible IDs, see examples
	Operator *string `pulumi:"operator"`
	// The application Condition's Property, e.g. ID, see examples
	Property *string `pulumi:"property"`
	// The application Condition's Value like IDs that contain some string, see examples
	Value *string `pulumi:"value"`
}

// ApplicationConditionInput is an input type that accepts ApplicationConditionArgs and ApplicationConditionOutput values.
// You can construct a concrete instance of `ApplicationConditionInput` via:
//
//	ApplicationConditionArgs{...}
type ApplicationConditionInput interface {
	pulumi.Input

	ToApplicationConditionOutput() ApplicationConditionOutput
	ToApplicationConditionOutputWithContext(context.Context) ApplicationConditionOutput
}

// Application's condition
type ApplicationConditionArgs struct {
	// The application Condition's Operator, for example Contains for id or In for list of possible IDs, see examples
	Operator pulumi.StringPtrInput `pulumi:"operator"`
	// The application Condition's Property, e.g. ID, see examples
	Property pulumi.StringPtrInput `pulumi:"property"`
	// The application Condition's Value like IDs that contain some string, see examples
	Value pulumi.StringPtrInput `pulumi:"value"`
}

func (ApplicationConditionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationCondition)(nil)).Elem()
}

func (i ApplicationConditionArgs) ToApplicationConditionOutput() ApplicationConditionOutput {
	return i.ToApplicationConditionOutputWithContext(context.Background())
}

func (i ApplicationConditionArgs) ToApplicationConditionOutputWithContext(ctx context.Context) ApplicationConditionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationConditionOutput)
}

// ApplicationConditionArrayInput is an input type that accepts ApplicationConditionArray and ApplicationConditionArrayOutput values.
// You can construct a concrete instance of `ApplicationConditionArrayInput` via:
//
//	ApplicationConditionArray{ ApplicationConditionArgs{...} }
type ApplicationConditionArrayInput interface {
	pulumi.Input

	ToApplicationConditionArrayOutput() ApplicationConditionArrayOutput
	ToApplicationConditionArrayOutputWithContext(context.Context) ApplicationConditionArrayOutput
}

type ApplicationConditionArray []ApplicationConditionInput

func (ApplicationConditionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ApplicationCondition)(nil)).Elem()
}

func (i ApplicationConditionArray) ToApplicationConditionArrayOutput() ApplicationConditionArrayOutput {
	return i.ToApplicationConditionArrayOutputWithContext(context.Background())
}

func (i ApplicationConditionArray) ToApplicationConditionArrayOutputWithContext(ctx context.Context) ApplicationConditionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationConditionArrayOutput)
}

// Application's condition
type ApplicationConditionOutput struct{ *pulumi.OutputState }

func (ApplicationConditionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationCondition)(nil)).Elem()
}

func (o ApplicationConditionOutput) ToApplicationConditionOutput() ApplicationConditionOutput {
	return o
}

func (o ApplicationConditionOutput) ToApplicationConditionOutputWithContext(ctx context.Context) ApplicationConditionOutput {
	return o
}

// The application Condition's Operator, for example Contains for id or In for list of possible IDs, see examples
func (o ApplicationConditionOutput) Operator() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApplicationCondition) *string { return v.Operator }).(pulumi.StringPtrOutput)
}

// The application Condition's Property, e.g. ID, see examples
func (o ApplicationConditionOutput) Property() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApplicationCondition) *string { return v.Property }).(pulumi.StringPtrOutput)
}

// The application Condition's Value like IDs that contain some string, see examples
func (o ApplicationConditionOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApplicationCondition) *string { return v.Value }).(pulumi.StringPtrOutput)
}

type ApplicationConditionArrayOutput struct{ *pulumi.OutputState }

func (ApplicationConditionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ApplicationCondition)(nil)).Elem()
}

func (o ApplicationConditionArrayOutput) ToApplicationConditionArrayOutput() ApplicationConditionArrayOutput {
	return o
}

func (o ApplicationConditionArrayOutput) ToApplicationConditionArrayOutputWithContext(ctx context.Context) ApplicationConditionArrayOutput {
	return o
}

func (o ApplicationConditionArrayOutput) Index(i pulumi.IntInput) ApplicationConditionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ApplicationCondition {
		return vs[0].([]ApplicationCondition)[vs[1].(int)]
	}).(ApplicationConditionOutput)
}

// Application's condition
type ApplicationConditionResponse struct {
	// The application Condition's Operator, for example Contains for id or In for list of possible IDs, see examples
	Operator *string `pulumi:"operator"`
	// The application Condition's Property, e.g. ID, see examples
	Property *string `pulumi:"property"`
	// The application Condition's Value like IDs that contain some string, see examples
	Value *string `pulumi:"value"`
}

// Application's condition
type ApplicationConditionResponseOutput struct{ *pulumi.OutputState }

func (ApplicationConditionResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationConditionResponse)(nil)).Elem()
}

func (o ApplicationConditionResponseOutput) ToApplicationConditionResponseOutput() ApplicationConditionResponseOutput {
	return o
}

func (o ApplicationConditionResponseOutput) ToApplicationConditionResponseOutputWithContext(ctx context.Context) ApplicationConditionResponseOutput {
	return o
}

// The application Condition's Operator, for example Contains for id or In for list of possible IDs, see examples
func (o ApplicationConditionResponseOutput) Operator() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApplicationConditionResponse) *string { return v.Operator }).(pulumi.StringPtrOutput)
}

// The application Condition's Property, e.g. ID, see examples
func (o ApplicationConditionResponseOutput) Property() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApplicationConditionResponse) *string { return v.Property }).(pulumi.StringPtrOutput)
}

// The application Condition's Value like IDs that contain some string, see examples
func (o ApplicationConditionResponseOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApplicationConditionResponse) *string { return v.Value }).(pulumi.StringPtrOutput)
}

type ApplicationConditionResponseArrayOutput struct{ *pulumi.OutputState }

func (ApplicationConditionResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ApplicationConditionResponse)(nil)).Elem()
}

func (o ApplicationConditionResponseArrayOutput) ToApplicationConditionResponseArrayOutput() ApplicationConditionResponseArrayOutput {
	return o
}

func (o ApplicationConditionResponseArrayOutput) ToApplicationConditionResponseArrayOutputWithContext(ctx context.Context) ApplicationConditionResponseArrayOutput {
	return o
}

func (o ApplicationConditionResponseArrayOutput) Index(i pulumi.IntInput) ApplicationConditionResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ApplicationConditionResponse {
		return vs[0].([]ApplicationConditionResponse)[vs[1].(int)]
	}).(ApplicationConditionResponseOutput)
}

type ApplicationConditionArgsArrayArrayArray []ApplicationConditionArgsArrayArrayInput

func (ApplicationConditionArgsArrayArrayArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[][][]ApplicationCondition)(nil)).Elem()
}

func (i ApplicationConditionArgsArrayArrayArray) ToApplicationConditionArgsArrayArrayArrayOutput() ApplicationConditionArgsArrayArrayArrayOutput {
	return i.ToApplicationConditionArgsArrayArrayArrayOutputWithContext(context.Background())
}

func (i ApplicationConditionArgsArrayArrayArray) ToApplicationConditionArgsArrayArrayArrayOutputWithContext(ctx context.Context) ApplicationConditionArgsArrayArrayArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationConditionArgsArrayArrayArrayOutput)
}

// ApplicationConditionArgsArrayArrayArrayInput is an input type that accepts ApplicationConditionArgsArrayArrayArray and ApplicationConditionArgsArrayArrayArrayOutput values.
// You can construct a concrete instance of `ApplicationConditionArgsArrayArrayArrayInput` via:
//
//	ApplicationConditionArgsArrayArrayArray{ ApplicationConditionArgsArrayArray{ ApplicationConditionArgsArray{ ApplicationConditionArgsArgs{...} } } }
type ApplicationConditionArgsArrayArrayArrayInput interface {
	pulumi.Input

	ToApplicationConditionArgsArrayArrayArrayOutput() ApplicationConditionArgsArrayArrayArrayOutput
	ToApplicationConditionArgsArrayArrayArrayOutputWithContext(context.Context) ApplicationConditionArgsArrayArrayArrayOutput
}

type ApplicationConditionArgsArrayArrayArrayOutput struct{ *pulumi.OutputState }

func (ApplicationConditionArgsArrayArrayArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[][][]ApplicationCondition)(nil)).Elem()
}

func (o ApplicationConditionArgsArrayArrayArrayOutput) ToApplicationConditionArgsArrayArrayArrayOutput() ApplicationConditionArgsArrayArrayArrayOutput {
	return o
}

func (o ApplicationConditionArgsArrayArrayArrayOutput) ToApplicationConditionArgsArrayArrayArrayOutputWithContext(ctx context.Context) ApplicationConditionArgsArrayArrayArrayOutput {
	return o
}

func (o ApplicationConditionArgsArrayArrayArrayOutput) Index(i pulumi.IntInput) ApplicationConditionArgsArrayArrayOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) [][]ApplicationCondition {
		return vs[0].([][][]ApplicationCondition)[vs[1].(int)]
	}).(ApplicationConditionArgsArrayArrayOutput)
}

type ApplicationConditionArrayArray []ApplicationConditionArrayInput

func (ApplicationConditionArrayArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[][]ApplicationCondition)(nil)).Elem()
}

func (i ApplicationConditionArrayArray) ToApplicationConditionArrayArrayOutput() ApplicationConditionArrayArrayOutput {
	return i.ToApplicationConditionArrayArrayOutputWithContext(context.Background())
}

func (i ApplicationConditionArrayArray) ToApplicationConditionArrayArrayOutputWithContext(ctx context.Context) ApplicationConditionArrayArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationConditionArrayArrayOutput)
}

// ApplicationConditionArrayArrayInput is an input type that accepts ApplicationConditionArrayArray and ApplicationConditionArrayArrayOutput values.
// You can construct a concrete instance of `ApplicationConditionArrayArrayInput` via:
//
//	ApplicationConditionArrayArray{ ApplicationConditionArray{ ApplicationConditionArgs{...} } }
type ApplicationConditionArrayArrayInput interface {
	pulumi.Input

	ToApplicationConditionArrayArrayOutput() ApplicationConditionArrayArrayOutput
	ToApplicationConditionArrayArrayOutputWithContext(context.Context) ApplicationConditionArrayArrayOutput
}

type ApplicationConditionArrayArrayOutput struct{ *pulumi.OutputState }

func (ApplicationConditionArrayArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[][]ApplicationCondition)(nil)).Elem()
}

func (o ApplicationConditionArrayArrayOutput) ToApplicationConditionArrayArrayOutput() ApplicationConditionArrayArrayOutput {
	return o
}

func (o ApplicationConditionArrayArrayOutput) ToApplicationConditionArrayArrayOutputWithContext(ctx context.Context) ApplicationConditionArrayArrayOutput {
	return o
}

func (o ApplicationConditionArrayArrayOutput) Index(i pulumi.IntInput) ApplicationConditionArrayOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) []ApplicationCondition {
		return vs[0].([][]ApplicationCondition)[vs[1].(int)]
	}).(ApplicationConditionArrayOutput)
}

type ApplicationConditionResponseArrayArrayOutput struct{ *pulumi.OutputState }

func (ApplicationConditionResponseArrayArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[][]ApplicationConditionResponse)(nil)).Elem()
}

func (o ApplicationConditionResponseArrayArrayOutput) ToApplicationConditionResponseArrayArrayOutput() ApplicationConditionResponseArrayArrayOutput {
	return o
}

func (o ApplicationConditionResponseArrayArrayOutput) ToApplicationConditionResponseArrayArrayOutputWithContext(ctx context.Context) ApplicationConditionResponseArrayArrayOutput {
	return o
}

func (o ApplicationConditionResponseArrayArrayOutput) Index(i pulumi.IntInput) ApplicationConditionResponseArrayOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) []ApplicationConditionResponse {
		return vs[0].([][]ApplicationConditionResponse)[vs[1].(int)]
	}).(ApplicationConditionResponseArrayOutput)
}

type ApplicationConditionResponseArrayArrayArrayOutput struct{ *pulumi.OutputState }

func (ApplicationConditionResponseArrayArrayArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[][][]ApplicationConditionResponse)(nil)).Elem()
}

func (o ApplicationConditionResponseArrayArrayArrayOutput) ToApplicationConditionResponseArrayArrayArrayOutput() ApplicationConditionResponseArrayArrayArrayOutput {
	return o
}

func (o ApplicationConditionResponseArrayArrayArrayOutput) ToApplicationConditionResponseArrayArrayArrayOutputWithContext(ctx context.Context) ApplicationConditionResponseArrayArrayArrayOutput {
	return o
}

func (o ApplicationConditionResponseArrayArrayArrayOutput) Index(i pulumi.IntInput) ApplicationConditionResponseArrayArrayOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) [][]ApplicationConditionResponse {
		return vs[0].([][][]ApplicationConditionResponse)[vs[1].(int)]
	}).(ApplicationConditionResponseArrayArrayOutput)
}

func init() {
	pulumi.RegisterOutputType(ApplicationConditionOutput{})
	pulumi.RegisterOutputType(ApplicationConditionArrayOutput{})
	pulumi.RegisterOutputType(ApplicationConditionResponseOutput{})
	pulumi.RegisterOutputType(ApplicationConditionResponseArrayOutput{})
	pulumi.RegisterOutputType(ApplicationConditionArgsArrayArrayArrayOutput{})
	pulumi.RegisterOutputType(ApplicationConditionArrayArrayOutput{})
	pulumi.RegisterOutputType(ApplicationConditionResponseArrayArrayOutput{})
	pulumi.RegisterOutputType(ApplicationConditionResponseArrayArrayArrayOutput{})
}
