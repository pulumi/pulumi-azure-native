// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v20211201preview

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Security Scanner resource
type Scanner struct {
	pulumi.CustomResourceState

	// Entity tag is used for comparing two or more entities from the same requested resource.
	Etag pulumi.StringPtrOutput `pulumi:"etag"`
	// Kind of the resource
	Kind pulumi.StringPtrOutput `pulumi:"kind"`
	// Location where the resource is stored
	Location pulumi.StringPtrOutput `pulumi:"location"`
	// Resource name
	Name pulumi.StringOutput `pulumi:"name"`
	// Azure Resource Manager metadata containing createdBy and modifiedBy information.
	SystemData SystemDataResponseOutput `pulumi:"systemData"`
	// A list of key value pairs that describe the resource.
	Tags pulumi.StringMapOutput `pulumi:"tags"`
	// Resource type
	Type pulumi.StringOutput `pulumi:"type"`
}

// NewScanner registers a new resource with the given unique name, arguments, and options.
func NewScanner(ctx *pulumi.Context,
	name string, args *ScannerArgs, opts ...pulumi.ResourceOption) (*Scanner, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ResourceGroupName == nil {
		return nil, errors.New("invalid value for required argument 'ResourceGroupName'")
	}
	aliases := pulumi.Aliases([]pulumi.Alias{
		{
			Type: pulumi.String("azure-native:security:Scanner"),
		},
	})
	opts = append(opts, aliases)
	var resource Scanner
	err := ctx.RegisterResource("azure-native:security/v20211201preview:Scanner", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetScanner gets an existing Scanner resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetScanner(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ScannerState, opts ...pulumi.ResourceOption) (*Scanner, error) {
	var resource Scanner
	err := ctx.ReadResource("azure-native:security/v20211201preview:Scanner", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Scanner resources.
type scannerState struct {
}

type ScannerState struct {
}

func (ScannerState) ElementType() reflect.Type {
	return reflect.TypeOf((*scannerState)(nil)).Elem()
}

type scannerArgs struct {
	// Kind of the resource
	Kind *string `pulumi:"kind"`
	// Location where the resource is stored
	Location *string `pulumi:"location"`
	// The name of the resource group within the user's subscription. The name is case insensitive.
	ResourceGroupName string `pulumi:"resourceGroupName"`
	// Security scanner name
	ScannerName *string `pulumi:"scannerName"`
	// A list of key value pairs that describe the resource.
	Tags map[string]string `pulumi:"tags"`
}

// The set of arguments for constructing a Scanner resource.
type ScannerArgs struct {
	// Kind of the resource
	Kind pulumi.StringPtrInput
	// Location where the resource is stored
	Location pulumi.StringPtrInput
	// The name of the resource group within the user's subscription. The name is case insensitive.
	ResourceGroupName pulumi.StringInput
	// Security scanner name
	ScannerName pulumi.StringPtrInput
	// A list of key value pairs that describe the resource.
	Tags pulumi.StringMapInput
}

func (ScannerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*scannerArgs)(nil)).Elem()
}

type ScannerInput interface {
	pulumi.Input

	ToScannerOutput() ScannerOutput
	ToScannerOutputWithContext(ctx context.Context) ScannerOutput
}

func (*Scanner) ElementType() reflect.Type {
	return reflect.TypeOf((**Scanner)(nil)).Elem()
}

func (i *Scanner) ToScannerOutput() ScannerOutput {
	return i.ToScannerOutputWithContext(context.Background())
}

func (i *Scanner) ToScannerOutputWithContext(ctx context.Context) ScannerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScannerOutput)
}

type ScannerOutput struct{ *pulumi.OutputState }

func (ScannerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Scanner)(nil)).Elem()
}

func (o ScannerOutput) ToScannerOutput() ScannerOutput {
	return o
}

func (o ScannerOutput) ToScannerOutputWithContext(ctx context.Context) ScannerOutput {
	return o
}

func init() {
	pulumi.RegisterOutputType(ScannerOutput{})
}
