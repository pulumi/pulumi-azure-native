// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v20190101preview

import (
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// The security automation resource.
type Automation struct {
	pulumi.CustomResourceState

	// A collection of the actions which are triggered if all the configured rules evaluations, within at least one rule set, are true.
	Actions pulumi.ArrayOutput `pulumi:"actions"`
	// The security automation description.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// Entity tag is used for comparing two or more entities from the same requested resource.
	Etag pulumi.StringPtrOutput `pulumi:"etag"`
	// Indicates whether the security automation is enabled.
	IsEnabled pulumi.BoolPtrOutput `pulumi:"isEnabled"`
	// Kind of the resource
	Kind pulumi.StringPtrOutput `pulumi:"kind"`
	// Location where the resource is stored
	Location pulumi.StringPtrOutput `pulumi:"location"`
	// Resource name
	Name pulumi.StringOutput `pulumi:"name"`
	// A collection of scopes on which the security automations logic is applied. Supported scopes are the subscription itself or a resource group under that subscription. The automation will only apply on defined scopes.
	Scopes AutomationScopeResponseArrayOutput `pulumi:"scopes"`
	// A collection of the source event types which evaluate the security automation set of rules.
	Sources AutomationSourceResponseArrayOutput `pulumi:"sources"`
	// A list of key value pairs that describe the resource.
	Tags pulumi.StringMapOutput `pulumi:"tags"`
	// Resource type
	Type pulumi.StringOutput `pulumi:"type"`
}

// NewAutomation registers a new resource with the given unique name, arguments, and options.
func NewAutomation(ctx *pulumi.Context,
	name string, args *AutomationArgs, opts ...pulumi.ResourceOption) (*Automation, error) {
	if args == nil || args.AutomationName == nil {
		return nil, errors.New("missing required argument 'AutomationName'")
	}
	if args == nil || args.ResourceGroupName == nil {
		return nil, errors.New("missing required argument 'ResourceGroupName'")
	}
	if args == nil {
		args = &AutomationArgs{}
	}
	var resource Automation
	err := ctx.RegisterResource("azure-nextgen:security/v20190101preview:Automation", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAutomation gets an existing Automation resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAutomation(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AutomationState, opts ...pulumi.ResourceOption) (*Automation, error) {
	var resource Automation
	err := ctx.ReadResource("azure-nextgen:security/v20190101preview:Automation", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Automation resources.
type automationState struct {
	// A collection of the actions which are triggered if all the configured rules evaluations, within at least one rule set, are true.
	Actions []interface{} `pulumi:"actions"`
	// The security automation description.
	Description *string `pulumi:"description"`
	// Entity tag is used for comparing two or more entities from the same requested resource.
	Etag *string `pulumi:"etag"`
	// Indicates whether the security automation is enabled.
	IsEnabled *bool `pulumi:"isEnabled"`
	// Kind of the resource
	Kind *string `pulumi:"kind"`
	// Location where the resource is stored
	Location *string `pulumi:"location"`
	// Resource name
	Name *string `pulumi:"name"`
	// A collection of scopes on which the security automations logic is applied. Supported scopes are the subscription itself or a resource group under that subscription. The automation will only apply on defined scopes.
	Scopes []AutomationScopeResponse `pulumi:"scopes"`
	// A collection of the source event types which evaluate the security automation set of rules.
	Sources []AutomationSourceResponse `pulumi:"sources"`
	// A list of key value pairs that describe the resource.
	Tags map[string]string `pulumi:"tags"`
	// Resource type
	Type *string `pulumi:"type"`
}

type AutomationState struct {
	// A collection of the actions which are triggered if all the configured rules evaluations, within at least one rule set, are true.
	Actions pulumi.ArrayInput
	// The security automation description.
	Description pulumi.StringPtrInput
	// Entity tag is used for comparing two or more entities from the same requested resource.
	Etag pulumi.StringPtrInput
	// Indicates whether the security automation is enabled.
	IsEnabled pulumi.BoolPtrInput
	// Kind of the resource
	Kind pulumi.StringPtrInput
	// Location where the resource is stored
	Location pulumi.StringPtrInput
	// Resource name
	Name pulumi.StringPtrInput
	// A collection of scopes on which the security automations logic is applied. Supported scopes are the subscription itself or a resource group under that subscription. The automation will only apply on defined scopes.
	Scopes AutomationScopeResponseArrayInput
	// A collection of the source event types which evaluate the security automation set of rules.
	Sources AutomationSourceResponseArrayInput
	// A list of key value pairs that describe the resource.
	Tags pulumi.StringMapInput
	// Resource type
	Type pulumi.StringPtrInput
}

func (AutomationState) ElementType() reflect.Type {
	return reflect.TypeOf((*automationState)(nil)).Elem()
}

type automationArgs struct {
	// A collection of the actions which are triggered if all the configured rules evaluations, within at least one rule set, are true.
	Actions []interface{} `pulumi:"actions"`
	// The security automation name.
	AutomationName string `pulumi:"automationName"`
	// The security automation description.
	Description *string `pulumi:"description"`
	// Entity tag is used for comparing two or more entities from the same requested resource.
	Etag *string `pulumi:"etag"`
	// Indicates whether the security automation is enabled.
	IsEnabled *bool `pulumi:"isEnabled"`
	// Kind of the resource
	Kind *string `pulumi:"kind"`
	// Location where the resource is stored
	Location *string `pulumi:"location"`
	// The name of the resource group within the user's subscription. The name is case insensitive.
	ResourceGroupName string `pulumi:"resourceGroupName"`
	// A collection of scopes on which the security automations logic is applied. Supported scopes are the subscription itself or a resource group under that subscription. The automation will only apply on defined scopes.
	Scopes []AutomationScope `pulumi:"scopes"`
	// A collection of the source event types which evaluate the security automation set of rules.
	Sources []AutomationSource `pulumi:"sources"`
	// A list of key value pairs that describe the resource.
	Tags map[string]string `pulumi:"tags"`
}

// The set of arguments for constructing a Automation resource.
type AutomationArgs struct {
	// A collection of the actions which are triggered if all the configured rules evaluations, within at least one rule set, are true.
	Actions pulumi.ArrayInput
	// The security automation name.
	AutomationName pulumi.StringInput
	// The security automation description.
	Description pulumi.StringPtrInput
	// Entity tag is used for comparing two or more entities from the same requested resource.
	Etag pulumi.StringPtrInput
	// Indicates whether the security automation is enabled.
	IsEnabled pulumi.BoolPtrInput
	// Kind of the resource
	Kind pulumi.StringPtrInput
	// Location where the resource is stored
	Location pulumi.StringPtrInput
	// The name of the resource group within the user's subscription. The name is case insensitive.
	ResourceGroupName pulumi.StringInput
	// A collection of scopes on which the security automations logic is applied. Supported scopes are the subscription itself or a resource group under that subscription. The automation will only apply on defined scopes.
	Scopes AutomationScopeArrayInput
	// A collection of the source event types which evaluate the security automation set of rules.
	Sources AutomationSourceArrayInput
	// A list of key value pairs that describe the resource.
	Tags pulumi.StringMapInput
}

func (AutomationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*automationArgs)(nil)).Elem()
}
