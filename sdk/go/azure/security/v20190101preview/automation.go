// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v20190101preview

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// The security automation resource.
type Automation struct {
	pulumi.CustomResourceState

	// A collection of the actions which are triggered if all the configured rules evaluations, within at least one rule set, are true.
	Actions pulumi.ArrayOutput `pulumi:"actions"`
	// The security automation description.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// Entity tag is used for comparing two or more entities from the same requested resource.
	Etag pulumi.StringPtrOutput `pulumi:"etag"`
	// Indicates whether the security automation is enabled.
	IsEnabled pulumi.BoolPtrOutput `pulumi:"isEnabled"`
	// Kind of the resource
	Kind pulumi.StringPtrOutput `pulumi:"kind"`
	// Location where the resource is stored
	Location pulumi.StringPtrOutput `pulumi:"location"`
	// Resource name
	Name pulumi.StringOutput `pulumi:"name"`
	// A collection of scopes on which the security automations logic is applied. Supported scopes are the subscription itself or a resource group under that subscription. The automation will only apply on defined scopes.
	Scopes AutomationScopeResponseArrayOutput `pulumi:"scopes"`
	// A collection of the source event types which evaluate the security automation set of rules.
	Sources AutomationSourceResponseArrayOutput `pulumi:"sources"`
	// A list of key value pairs that describe the resource.
	Tags pulumi.StringMapOutput `pulumi:"tags"`
	// Resource type
	Type pulumi.StringOutput `pulumi:"type"`
}

// NewAutomation registers a new resource with the given unique name, arguments, and options.
func NewAutomation(ctx *pulumi.Context,
	name string, args *AutomationArgs, opts ...pulumi.ResourceOption) (*Automation, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ResourceGroupName == nil {
		return nil, errors.New("invalid value for required argument 'ResourceGroupName'")
	}
	aliases := pulumi.Aliases([]pulumi.Alias{
		{
			Type: pulumi.String("azure-native:security:Automation"),
		},
	})
	opts = append(opts, aliases)
	var resource Automation
	err := ctx.RegisterResource("azure-native:security/v20190101preview:Automation", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAutomation gets an existing Automation resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAutomation(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AutomationState, opts ...pulumi.ResourceOption) (*Automation, error) {
	var resource Automation
	err := ctx.ReadResource("azure-native:security/v20190101preview:Automation", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Automation resources.
type automationState struct {
}

type AutomationState struct {
}

func (AutomationState) ElementType() reflect.Type {
	return reflect.TypeOf((*automationState)(nil)).Elem()
}

type automationArgs struct {
	// A collection of the actions which are triggered if all the configured rules evaluations, within at least one rule set, are true.
	Actions []interface{} `pulumi:"actions"`
	// The security automation name.
	AutomationName *string `pulumi:"automationName"`
	// The security automation description.
	Description *string `pulumi:"description"`
	// Indicates whether the security automation is enabled.
	IsEnabled *bool `pulumi:"isEnabled"`
	// Kind of the resource
	Kind *string `pulumi:"kind"`
	// Location where the resource is stored
	Location *string `pulumi:"location"`
	// The name of the resource group within the user's subscription. The name is case insensitive.
	ResourceGroupName string `pulumi:"resourceGroupName"`
	// A collection of scopes on which the security automations logic is applied. Supported scopes are the subscription itself or a resource group under that subscription. The automation will only apply on defined scopes.
	Scopes []AutomationScope `pulumi:"scopes"`
	// A collection of the source event types which evaluate the security automation set of rules.
	Sources []AutomationSource `pulumi:"sources"`
	// A list of key value pairs that describe the resource.
	Tags map[string]string `pulumi:"tags"`
}

// The set of arguments for constructing a Automation resource.
type AutomationArgs struct {
	// A collection of the actions which are triggered if all the configured rules evaluations, within at least one rule set, are true.
	Actions pulumi.ArrayInput
	// The security automation name.
	AutomationName pulumi.StringPtrInput
	// The security automation description.
	Description pulumi.StringPtrInput
	// Indicates whether the security automation is enabled.
	IsEnabled pulumi.BoolPtrInput
	// Kind of the resource
	Kind pulumi.StringPtrInput
	// Location where the resource is stored
	Location pulumi.StringPtrInput
	// The name of the resource group within the user's subscription. The name is case insensitive.
	ResourceGroupName pulumi.StringInput
	// A collection of scopes on which the security automations logic is applied. Supported scopes are the subscription itself or a resource group under that subscription. The automation will only apply on defined scopes.
	Scopes AutomationScopeArrayInput
	// A collection of the source event types which evaluate the security automation set of rules.
	Sources AutomationSourceArrayInput
	// A list of key value pairs that describe the resource.
	Tags pulumi.StringMapInput
}

func (AutomationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*automationArgs)(nil)).Elem()
}

type AutomationInput interface {
	pulumi.Input

	ToAutomationOutput() AutomationOutput
	ToAutomationOutputWithContext(ctx context.Context) AutomationOutput
}

func (*Automation) ElementType() reflect.Type {
	return reflect.TypeOf((**Automation)(nil)).Elem()
}

func (i *Automation) ToAutomationOutput() AutomationOutput {
	return i.ToAutomationOutputWithContext(context.Background())
}

func (i *Automation) ToAutomationOutputWithContext(ctx context.Context) AutomationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AutomationOutput)
}

type AutomationOutput struct{ *pulumi.OutputState }

func (AutomationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Automation)(nil)).Elem()
}

func (o AutomationOutput) ToAutomationOutput() AutomationOutput {
	return o
}

func (o AutomationOutput) ToAutomationOutputWithContext(ctx context.Context) AutomationOutput {
	return o
}

// A collection of the actions which are triggered if all the configured rules evaluations, within at least one rule set, are true.
func (o AutomationOutput) Actions() pulumi.ArrayOutput {
	return o.ApplyT(func(v *Automation) pulumi.ArrayOutput { return v.Actions }).(pulumi.ArrayOutput)
}

// The security automation description.
func (o AutomationOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Automation) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// Entity tag is used for comparing two or more entities from the same requested resource.
func (o AutomationOutput) Etag() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Automation) pulumi.StringPtrOutput { return v.Etag }).(pulumi.StringPtrOutput)
}

// Indicates whether the security automation is enabled.
func (o AutomationOutput) IsEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Automation) pulumi.BoolPtrOutput { return v.IsEnabled }).(pulumi.BoolPtrOutput)
}

// Kind of the resource
func (o AutomationOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Automation) pulumi.StringPtrOutput { return v.Kind }).(pulumi.StringPtrOutput)
}

// Location where the resource is stored
func (o AutomationOutput) Location() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Automation) pulumi.StringPtrOutput { return v.Location }).(pulumi.StringPtrOutput)
}

// Resource name
func (o AutomationOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Automation) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// A collection of scopes on which the security automations logic is applied. Supported scopes are the subscription itself or a resource group under that subscription. The automation will only apply on defined scopes.
func (o AutomationOutput) Scopes() AutomationScopeResponseArrayOutput {
	return o.ApplyT(func(v *Automation) AutomationScopeResponseArrayOutput { return v.Scopes }).(AutomationScopeResponseArrayOutput)
}

// A collection of the source event types which evaluate the security automation set of rules.
func (o AutomationOutput) Sources() AutomationSourceResponseArrayOutput {
	return o.ApplyT(func(v *Automation) AutomationSourceResponseArrayOutput { return v.Sources }).(AutomationSourceResponseArrayOutput)
}

// A list of key value pairs that describe the resource.
func (o AutomationOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Automation) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

// Resource type
func (o AutomationOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *Automation) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(AutomationOutput{})
}
