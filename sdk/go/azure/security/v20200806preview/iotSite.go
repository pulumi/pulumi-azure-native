// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v20200806preview

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// IoT site model
type IotSite struct {
	pulumi.CustomResourceState

	// Display name of the IoT site
	DisplayName pulumi.StringOutput `pulumi:"displayName"`
	// Resource name
	Name pulumi.StringOutput `pulumi:"name"`
	// Tags of the IoT site
	Tags pulumi.StringMapOutput `pulumi:"tags"`
	// Resource type
	Type pulumi.StringOutput `pulumi:"type"`
}

// NewIotSite registers a new resource with the given unique name, arguments, and options.
func NewIotSite(ctx *pulumi.Context,
	name string, args *IotSiteArgs, opts ...pulumi.ResourceOption) (*IotSite, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DisplayName == nil {
		return nil, errors.New("invalid value for required argument 'DisplayName'")
	}
	if args.Scope == nil {
		return nil, errors.New("invalid value for required argument 'Scope'")
	}
	var resource IotSite
	err := ctx.RegisterResource("azure-nextgen:security/v20200806preview:IotSite", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetIotSite gets an existing IotSite resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetIotSite(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *IotSiteState, opts ...pulumi.ResourceOption) (*IotSite, error) {
	var resource IotSite
	err := ctx.ReadResource("azure-nextgen:security/v20200806preview:IotSite", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering IotSite resources.
type iotSiteState struct {
	// Display name of the IoT site
	DisplayName *string `pulumi:"displayName"`
	// Resource name
	Name *string `pulumi:"name"`
	// Tags of the IoT site
	Tags map[string]string `pulumi:"tags"`
	// Resource type
	Type *string `pulumi:"type"`
}

type IotSiteState struct {
	// Display name of the IoT site
	DisplayName pulumi.StringPtrInput
	// Resource name
	Name pulumi.StringPtrInput
	// Tags of the IoT site
	Tags pulumi.StringMapInput
	// Resource type
	Type pulumi.StringPtrInput
}

func (IotSiteState) ElementType() reflect.Type {
	return reflect.TypeOf((*iotSiteState)(nil)).Elem()
}

type iotSiteArgs struct {
	// Display name of the IoT site
	DisplayName string `pulumi:"displayName"`
	// Scope of the query (IoT Hub, /providers/Microsoft.Devices/iotHubs/myHub)
	Scope string `pulumi:"scope"`
	// Tags of the IoT site
	Tags map[string]string `pulumi:"tags"`
}

// The set of arguments for constructing a IotSite resource.
type IotSiteArgs struct {
	// Display name of the IoT site
	DisplayName pulumi.StringInput
	// Scope of the query (IoT Hub, /providers/Microsoft.Devices/iotHubs/myHub)
	Scope pulumi.StringInput
	// Tags of the IoT site
	Tags pulumi.StringMapInput
}

func (IotSiteArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*iotSiteArgs)(nil)).Elem()
}

type IotSiteInput interface {
	pulumi.Input

	ToIotSiteOutput() IotSiteOutput
	ToIotSiteOutputWithContext(ctx context.Context) IotSiteOutput
}

func (*IotSite) ElementType() reflect.Type {
	return reflect.TypeOf((*IotSite)(nil))
}

func (i *IotSite) ToIotSiteOutput() IotSiteOutput {
	return i.ToIotSiteOutputWithContext(context.Background())
}

func (i *IotSite) ToIotSiteOutputWithContext(ctx context.Context) IotSiteOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IotSiteOutput)
}

type IotSiteOutput struct {
	*pulumi.OutputState
}

func (IotSiteOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IotSite)(nil))
}

func (o IotSiteOutput) ToIotSiteOutput() IotSiteOutput {
	return o
}

func (o IotSiteOutput) ToIotSiteOutputWithContext(ctx context.Context) IotSiteOutput {
	return o
}

func init() {
	pulumi.RegisterOutputType(IotSiteOutput{})
}
