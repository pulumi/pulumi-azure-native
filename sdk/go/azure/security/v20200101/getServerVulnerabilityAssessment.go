


package v20200101

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func LookupServerVulnerabilityAssessment(ctx *pulumi.Context, args *LookupServerVulnerabilityAssessmentArgs, opts ...pulumi.InvokeOption) (*LookupServerVulnerabilityAssessmentResult, error) {
	var rv LookupServerVulnerabilityAssessmentResult
	err := ctx.Invoke("azure-native:security/v20200101:getServerVulnerabilityAssessment", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type LookupServerVulnerabilityAssessmentArgs struct {
	ResourceGroupName             string `pulumi:"resourceGroupName"`
	ResourceName                  string `pulumi:"resourceName"`
	ResourceNamespace             string `pulumi:"resourceNamespace"`
	ResourceType                  string `pulumi:"resourceType"`
	ServerVulnerabilityAssessment string `pulumi:"serverVulnerabilityAssessment"`
}


type LookupServerVulnerabilityAssessmentResult struct {
	Id                string `pulumi:"id"`
	Name              string `pulumi:"name"`
	ProvisioningState string `pulumi:"provisioningState"`
	Type              string `pulumi:"type"`
}

func LookupServerVulnerabilityAssessmentOutput(ctx *pulumi.Context, args LookupServerVulnerabilityAssessmentOutputArgs, opts ...pulumi.InvokeOption) LookupServerVulnerabilityAssessmentResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupServerVulnerabilityAssessmentResult, error) {
			args := v.(LookupServerVulnerabilityAssessmentArgs)
			r, err := LookupServerVulnerabilityAssessment(ctx, &args, opts...)
			var s LookupServerVulnerabilityAssessmentResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupServerVulnerabilityAssessmentResultOutput)
}

type LookupServerVulnerabilityAssessmentOutputArgs struct {
	ResourceGroupName             pulumi.StringInput `pulumi:"resourceGroupName"`
	ResourceName                  pulumi.StringInput `pulumi:"resourceName"`
	ResourceNamespace             pulumi.StringInput `pulumi:"resourceNamespace"`
	ResourceType                  pulumi.StringInput `pulumi:"resourceType"`
	ServerVulnerabilityAssessment pulumi.StringInput `pulumi:"serverVulnerabilityAssessment"`
}

func (LookupServerVulnerabilityAssessmentOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupServerVulnerabilityAssessmentArgs)(nil)).Elem()
}


type LookupServerVulnerabilityAssessmentResultOutput struct{ *pulumi.OutputState }

func (LookupServerVulnerabilityAssessmentResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupServerVulnerabilityAssessmentResult)(nil)).Elem()
}

func (o LookupServerVulnerabilityAssessmentResultOutput) ToLookupServerVulnerabilityAssessmentResultOutput() LookupServerVulnerabilityAssessmentResultOutput {
	return o
}

func (o LookupServerVulnerabilityAssessmentResultOutput) ToLookupServerVulnerabilityAssessmentResultOutputWithContext(ctx context.Context) LookupServerVulnerabilityAssessmentResultOutput {
	return o
}

func (o LookupServerVulnerabilityAssessmentResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupServerVulnerabilityAssessmentResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o LookupServerVulnerabilityAssessmentResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupServerVulnerabilityAssessmentResult) string { return v.Name }).(pulumi.StringOutput)
}

func (o LookupServerVulnerabilityAssessmentResultOutput) ProvisioningState() pulumi.StringOutput {
	return o.ApplyT(func(v LookupServerVulnerabilityAssessmentResult) string { return v.ProvisioningState }).(pulumi.StringOutput)
}

func (o LookupServerVulnerabilityAssessmentResultOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v LookupServerVulnerabilityAssessmentResult) string { return v.Type }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupServerVulnerabilityAssessmentResultOutput{})
}
