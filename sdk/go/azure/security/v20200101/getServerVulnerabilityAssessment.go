// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v20200101

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Describes the server vulnerability assessment details on a resource
func LookupServerVulnerabilityAssessment(ctx *pulumi.Context, args *LookupServerVulnerabilityAssessmentArgs, opts ...pulumi.InvokeOption) (*LookupServerVulnerabilityAssessmentResult, error) {
	var rv LookupServerVulnerabilityAssessmentResult
	err := ctx.Invoke("azure-native:security/v20200101:getServerVulnerabilityAssessment", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type LookupServerVulnerabilityAssessmentArgs struct {
	// The name of the resource group within the user's subscription. The name is case insensitive.
	ResourceGroupName string `pulumi:"resourceGroupName"`
	// Name of the resource.
	ResourceName string `pulumi:"resourceName"`
	// The Namespace of the resource.
	ResourceNamespace string `pulumi:"resourceNamespace"`
	// The type of the resource.
	ResourceType string `pulumi:"resourceType"`
	// ServerVulnerabilityAssessment status. only a 'default' value is supported.
	ServerVulnerabilityAssessment string `pulumi:"serverVulnerabilityAssessment"`
}

// Describes the server vulnerability assessment details on a resource
type LookupServerVulnerabilityAssessmentResult struct {
	// Resource Id
	Id string `pulumi:"id"`
	// Resource name
	Name string `pulumi:"name"`
	// The provisioningState of the vulnerability assessment capability on the VM
	ProvisioningState string `pulumi:"provisioningState"`
	// Resource type
	Type string `pulumi:"type"`
}

func LookupServerVulnerabilityAssessmentOutput(ctx *pulumi.Context, args LookupServerVulnerabilityAssessmentOutputArgs, opts ...pulumi.InvokeOption) LookupServerVulnerabilityAssessmentResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupServerVulnerabilityAssessmentResult, error) {
			args := v.(LookupServerVulnerabilityAssessmentArgs)
			r, err := LookupServerVulnerabilityAssessment(ctx, &args, opts...)
			var s LookupServerVulnerabilityAssessmentResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupServerVulnerabilityAssessmentResultOutput)
}

type LookupServerVulnerabilityAssessmentOutputArgs struct {
	// The name of the resource group within the user's subscription. The name is case insensitive.
	ResourceGroupName pulumi.StringInput `pulumi:"resourceGroupName"`
	// Name of the resource.
	ResourceName pulumi.StringInput `pulumi:"resourceName"`
	// The Namespace of the resource.
	ResourceNamespace pulumi.StringInput `pulumi:"resourceNamespace"`
	// The type of the resource.
	ResourceType pulumi.StringInput `pulumi:"resourceType"`
	// ServerVulnerabilityAssessment status. only a 'default' value is supported.
	ServerVulnerabilityAssessment pulumi.StringInput `pulumi:"serverVulnerabilityAssessment"`
}

func (LookupServerVulnerabilityAssessmentOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupServerVulnerabilityAssessmentArgs)(nil)).Elem()
}

// Describes the server vulnerability assessment details on a resource
type LookupServerVulnerabilityAssessmentResultOutput struct{ *pulumi.OutputState }

func (LookupServerVulnerabilityAssessmentResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupServerVulnerabilityAssessmentResult)(nil)).Elem()
}

func (o LookupServerVulnerabilityAssessmentResultOutput) ToLookupServerVulnerabilityAssessmentResultOutput() LookupServerVulnerabilityAssessmentResultOutput {
	return o
}

func (o LookupServerVulnerabilityAssessmentResultOutput) ToLookupServerVulnerabilityAssessmentResultOutputWithContext(ctx context.Context) LookupServerVulnerabilityAssessmentResultOutput {
	return o
}

// Resource Id
func (o LookupServerVulnerabilityAssessmentResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupServerVulnerabilityAssessmentResult) string { return v.Id }).(pulumi.StringOutput)
}

// Resource name
func (o LookupServerVulnerabilityAssessmentResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupServerVulnerabilityAssessmentResult) string { return v.Name }).(pulumi.StringOutput)
}

// The provisioningState of the vulnerability assessment capability on the VM
func (o LookupServerVulnerabilityAssessmentResultOutput) ProvisioningState() pulumi.StringOutput {
	return o.ApplyT(func(v LookupServerVulnerabilityAssessmentResult) string { return v.ProvisioningState }).(pulumi.StringOutput)
}

// Resource type
func (o LookupServerVulnerabilityAssessmentResultOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v LookupServerVulnerabilityAssessmentResult) string { return v.Type }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupServerVulnerabilityAssessmentResultOutput{})
}
