// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v20200101

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type ServerVulnerabilityAssessment struct {
	pulumi.CustomResourceState

	Name              pulumi.StringOutput `pulumi:"name"`
	ProvisioningState pulumi.StringOutput `pulumi:"provisioningState"`
	Type              pulumi.StringOutput `pulumi:"type"`
}

// NewServerVulnerabilityAssessment registers a new resource with the given unique name, arguments, and options.
func NewServerVulnerabilityAssessment(ctx *pulumi.Context,
	name string, args *ServerVulnerabilityAssessmentArgs, opts ...pulumi.ResourceOption) (*ServerVulnerabilityAssessment, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ResourceGroupName == nil {
		return nil, errors.New("invalid value for required argument 'ResourceGroupName'")
	}
	if args.ResourceName == nil {
		return nil, errors.New("invalid value for required argument 'ResourceName'")
	}
	if args.ResourceNamespace == nil {
		return nil, errors.New("invalid value for required argument 'ResourceNamespace'")
	}
	if args.ResourceType == nil {
		return nil, errors.New("invalid value for required argument 'ResourceType'")
	}
	aliases := pulumi.Aliases([]pulumi.Alias{
		{
			Type: pulumi.String("azure-nextgen:security/v20200101:ServerVulnerabilityAssessment"),
		},
		{
			Type: pulumi.String("azure-native:security:ServerVulnerabilityAssessment"),
		},
		{
			Type: pulumi.String("azure-nextgen:security:ServerVulnerabilityAssessment"),
		},
	})
	opts = append(opts, aliases)
	var resource ServerVulnerabilityAssessment
	err := ctx.RegisterResource("azure-native:security/v20200101:ServerVulnerabilityAssessment", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetServerVulnerabilityAssessment gets an existing ServerVulnerabilityAssessment resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetServerVulnerabilityAssessment(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ServerVulnerabilityAssessmentState, opts ...pulumi.ResourceOption) (*ServerVulnerabilityAssessment, error) {
	var resource ServerVulnerabilityAssessment
	err := ctx.ReadResource("azure-native:security/v20200101:ServerVulnerabilityAssessment", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ServerVulnerabilityAssessment resources.
type serverVulnerabilityAssessmentState struct {
}

type ServerVulnerabilityAssessmentState struct {
}

func (ServerVulnerabilityAssessmentState) ElementType() reflect.Type {
	return reflect.TypeOf((*serverVulnerabilityAssessmentState)(nil)).Elem()
}

type serverVulnerabilityAssessmentArgs struct {
	ResourceGroupName             string  `pulumi:"resourceGroupName"`
	ResourceName                  string  `pulumi:"resourceName"`
	ResourceNamespace             string  `pulumi:"resourceNamespace"`
	ResourceType                  string  `pulumi:"resourceType"`
	ServerVulnerabilityAssessment *string `pulumi:"serverVulnerabilityAssessment"`
}

// The set of arguments for constructing a ServerVulnerabilityAssessment resource.
type ServerVulnerabilityAssessmentArgs struct {
	ResourceGroupName             pulumi.StringInput
	ResourceName                  pulumi.StringInput
	ResourceNamespace             pulumi.StringInput
	ResourceType                  pulumi.StringInput
	ServerVulnerabilityAssessment pulumi.StringPtrInput
}

func (ServerVulnerabilityAssessmentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*serverVulnerabilityAssessmentArgs)(nil)).Elem()
}

type ServerVulnerabilityAssessmentInput interface {
	pulumi.Input

	ToServerVulnerabilityAssessmentOutput() ServerVulnerabilityAssessmentOutput
	ToServerVulnerabilityAssessmentOutputWithContext(ctx context.Context) ServerVulnerabilityAssessmentOutput
}

func (*ServerVulnerabilityAssessment) ElementType() reflect.Type {
	return reflect.TypeOf((*ServerVulnerabilityAssessment)(nil))
}

func (i *ServerVulnerabilityAssessment) ToServerVulnerabilityAssessmentOutput() ServerVulnerabilityAssessmentOutput {
	return i.ToServerVulnerabilityAssessmentOutputWithContext(context.Background())
}

func (i *ServerVulnerabilityAssessment) ToServerVulnerabilityAssessmentOutputWithContext(ctx context.Context) ServerVulnerabilityAssessmentOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServerVulnerabilityAssessmentOutput)
}

type ServerVulnerabilityAssessmentOutput struct{ *pulumi.OutputState }

func (ServerVulnerabilityAssessmentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServerVulnerabilityAssessment)(nil))
}

func (o ServerVulnerabilityAssessmentOutput) ToServerVulnerabilityAssessmentOutput() ServerVulnerabilityAssessmentOutput {
	return o
}

func (o ServerVulnerabilityAssessmentOutput) ToServerVulnerabilityAssessmentOutputWithContext(ctx context.Context) ServerVulnerabilityAssessmentOutput {
	return o
}

func init() {
	pulumi.RegisterOutputType(ServerVulnerabilityAssessmentOutput{})
}
