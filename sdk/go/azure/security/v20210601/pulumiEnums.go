// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v20210601

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Programmatic code for the status of the assessment
type AssessmentStatusCode string

const (
	// The resource is healthy
	AssessmentStatusCodeHealthy = AssessmentStatusCode("Healthy")
	// The resource has a security issue that needs to be addressed
	AssessmentStatusCodeUnhealthy = AssessmentStatusCode("Unhealthy")
	// Assessment for this resource did not happen
	AssessmentStatusCodeNotApplicable = AssessmentStatusCode("NotApplicable")
)

func (AssessmentStatusCode) ElementType() reflect.Type {
	return reflect.TypeOf((*AssessmentStatusCode)(nil)).Elem()
}

func (e AssessmentStatusCode) ToAssessmentStatusCodeOutput() AssessmentStatusCodeOutput {
	return pulumi.ToOutput(e).(AssessmentStatusCodeOutput)
}

func (e AssessmentStatusCode) ToAssessmentStatusCodeOutputWithContext(ctx context.Context) AssessmentStatusCodeOutput {
	return pulumi.ToOutputWithContext(ctx, e).(AssessmentStatusCodeOutput)
}

func (e AssessmentStatusCode) ToAssessmentStatusCodePtrOutput() AssessmentStatusCodePtrOutput {
	return e.ToAssessmentStatusCodePtrOutputWithContext(context.Background())
}

func (e AssessmentStatusCode) ToAssessmentStatusCodePtrOutputWithContext(ctx context.Context) AssessmentStatusCodePtrOutput {
	return AssessmentStatusCode(e).ToAssessmentStatusCodeOutputWithContext(ctx).ToAssessmentStatusCodePtrOutputWithContext(ctx)
}

func (e AssessmentStatusCode) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e AssessmentStatusCode) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e AssessmentStatusCode) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e AssessmentStatusCode) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type AssessmentStatusCodeOutput struct{ *pulumi.OutputState }

func (AssessmentStatusCodeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AssessmentStatusCode)(nil)).Elem()
}

func (o AssessmentStatusCodeOutput) ToAssessmentStatusCodeOutput() AssessmentStatusCodeOutput {
	return o
}

func (o AssessmentStatusCodeOutput) ToAssessmentStatusCodeOutputWithContext(ctx context.Context) AssessmentStatusCodeOutput {
	return o
}

func (o AssessmentStatusCodeOutput) ToAssessmentStatusCodePtrOutput() AssessmentStatusCodePtrOutput {
	return o.ToAssessmentStatusCodePtrOutputWithContext(context.Background())
}

func (o AssessmentStatusCodeOutput) ToAssessmentStatusCodePtrOutputWithContext(ctx context.Context) AssessmentStatusCodePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v AssessmentStatusCode) *AssessmentStatusCode {
		return &v
	}).(AssessmentStatusCodePtrOutput)
}

func (o AssessmentStatusCodeOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o AssessmentStatusCodeOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e AssessmentStatusCode) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o AssessmentStatusCodeOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o AssessmentStatusCodeOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e AssessmentStatusCode) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type AssessmentStatusCodePtrOutput struct{ *pulumi.OutputState }

func (AssessmentStatusCodePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AssessmentStatusCode)(nil)).Elem()
}

func (o AssessmentStatusCodePtrOutput) ToAssessmentStatusCodePtrOutput() AssessmentStatusCodePtrOutput {
	return o
}

func (o AssessmentStatusCodePtrOutput) ToAssessmentStatusCodePtrOutputWithContext(ctx context.Context) AssessmentStatusCodePtrOutput {
	return o
}

func (o AssessmentStatusCodePtrOutput) Elem() AssessmentStatusCodeOutput {
	return o.ApplyT(func(v *AssessmentStatusCode) AssessmentStatusCode {
		if v != nil {
			return *v
		}
		var ret AssessmentStatusCode
		return ret
	}).(AssessmentStatusCodeOutput)
}

func (o AssessmentStatusCodePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o AssessmentStatusCodePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *AssessmentStatusCode) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// AssessmentStatusCodeInput is an input type that accepts AssessmentStatusCodeArgs and AssessmentStatusCodeOutput values.
// You can construct a concrete instance of `AssessmentStatusCodeInput` via:
//
//          AssessmentStatusCodeArgs{...}
type AssessmentStatusCodeInput interface {
	pulumi.Input

	ToAssessmentStatusCodeOutput() AssessmentStatusCodeOutput
	ToAssessmentStatusCodeOutputWithContext(context.Context) AssessmentStatusCodeOutput
}

var assessmentStatusCodePtrType = reflect.TypeOf((**AssessmentStatusCode)(nil)).Elem()

type AssessmentStatusCodePtrInput interface {
	pulumi.Input

	ToAssessmentStatusCodePtrOutput() AssessmentStatusCodePtrOutput
	ToAssessmentStatusCodePtrOutputWithContext(context.Context) AssessmentStatusCodePtrOutput
}

type assessmentStatusCodePtr string

func AssessmentStatusCodePtr(v string) AssessmentStatusCodePtrInput {
	return (*assessmentStatusCodePtr)(&v)
}

func (*assessmentStatusCodePtr) ElementType() reflect.Type {
	return assessmentStatusCodePtrType
}

func (in *assessmentStatusCodePtr) ToAssessmentStatusCodePtrOutput() AssessmentStatusCodePtrOutput {
	return pulumi.ToOutput(in).(AssessmentStatusCodePtrOutput)
}

func (in *assessmentStatusCodePtr) ToAssessmentStatusCodePtrOutputWithContext(ctx context.Context) AssessmentStatusCodePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(AssessmentStatusCodePtrOutput)
}

// BuiltIn if the assessment based on built-in Azure Policy definition, Custom if the assessment based on custom Azure Policy definition
type AssessmentType string

const (
	// Azure Security Center managed assessments
	AssessmentTypeBuiltIn = AssessmentType("BuiltIn")
	// User defined policies that are automatically ingested from Azure Policy to Azure Security Center
	AssessmentTypeCustomPolicy = AssessmentType("CustomPolicy")
	// User assessments pushed directly by the user or other third party to Azure Security Center
	AssessmentTypeCustomerManaged = AssessmentType("CustomerManaged")
	// An assessment that was created by a verified 3rd party if the user connected it to ASC
	AssessmentTypeVerifiedPartner = AssessmentType("VerifiedPartner")
)

func (AssessmentType) ElementType() reflect.Type {
	return reflect.TypeOf((*AssessmentType)(nil)).Elem()
}

func (e AssessmentType) ToAssessmentTypeOutput() AssessmentTypeOutput {
	return pulumi.ToOutput(e).(AssessmentTypeOutput)
}

func (e AssessmentType) ToAssessmentTypeOutputWithContext(ctx context.Context) AssessmentTypeOutput {
	return pulumi.ToOutputWithContext(ctx, e).(AssessmentTypeOutput)
}

func (e AssessmentType) ToAssessmentTypePtrOutput() AssessmentTypePtrOutput {
	return e.ToAssessmentTypePtrOutputWithContext(context.Background())
}

func (e AssessmentType) ToAssessmentTypePtrOutputWithContext(ctx context.Context) AssessmentTypePtrOutput {
	return AssessmentType(e).ToAssessmentTypeOutputWithContext(ctx).ToAssessmentTypePtrOutputWithContext(ctx)
}

func (e AssessmentType) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e AssessmentType) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e AssessmentType) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e AssessmentType) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type AssessmentTypeOutput struct{ *pulumi.OutputState }

func (AssessmentTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AssessmentType)(nil)).Elem()
}

func (o AssessmentTypeOutput) ToAssessmentTypeOutput() AssessmentTypeOutput {
	return o
}

func (o AssessmentTypeOutput) ToAssessmentTypeOutputWithContext(ctx context.Context) AssessmentTypeOutput {
	return o
}

func (o AssessmentTypeOutput) ToAssessmentTypePtrOutput() AssessmentTypePtrOutput {
	return o.ToAssessmentTypePtrOutputWithContext(context.Background())
}

func (o AssessmentTypeOutput) ToAssessmentTypePtrOutputWithContext(ctx context.Context) AssessmentTypePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v AssessmentType) *AssessmentType {
		return &v
	}).(AssessmentTypePtrOutput)
}

func (o AssessmentTypeOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o AssessmentTypeOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e AssessmentType) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o AssessmentTypeOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o AssessmentTypeOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e AssessmentType) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type AssessmentTypePtrOutput struct{ *pulumi.OutputState }

func (AssessmentTypePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AssessmentType)(nil)).Elem()
}

func (o AssessmentTypePtrOutput) ToAssessmentTypePtrOutput() AssessmentTypePtrOutput {
	return o
}

func (o AssessmentTypePtrOutput) ToAssessmentTypePtrOutputWithContext(ctx context.Context) AssessmentTypePtrOutput {
	return o
}

func (o AssessmentTypePtrOutput) Elem() AssessmentTypeOutput {
	return o.ApplyT(func(v *AssessmentType) AssessmentType {
		if v != nil {
			return *v
		}
		var ret AssessmentType
		return ret
	}).(AssessmentTypeOutput)
}

func (o AssessmentTypePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o AssessmentTypePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *AssessmentType) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// AssessmentTypeInput is an input type that accepts AssessmentTypeArgs and AssessmentTypeOutput values.
// You can construct a concrete instance of `AssessmentTypeInput` via:
//
//          AssessmentTypeArgs{...}
type AssessmentTypeInput interface {
	pulumi.Input

	ToAssessmentTypeOutput() AssessmentTypeOutput
	ToAssessmentTypeOutputWithContext(context.Context) AssessmentTypeOutput
}

var assessmentTypePtrType = reflect.TypeOf((**AssessmentType)(nil)).Elem()

type AssessmentTypePtrInput interface {
	pulumi.Input

	ToAssessmentTypePtrOutput() AssessmentTypePtrOutput
	ToAssessmentTypePtrOutputWithContext(context.Context) AssessmentTypePtrOutput
}

type assessmentTypePtr string

func AssessmentTypePtr(v string) AssessmentTypePtrInput {
	return (*assessmentTypePtr)(&v)
}

func (*assessmentTypePtr) ElementType() reflect.Type {
	return assessmentTypePtrType
}

func (in *assessmentTypePtr) ToAssessmentTypePtrOutput() AssessmentTypePtrOutput {
	return pulumi.ToOutput(in).(AssessmentTypePtrOutput)
}

func (in *assessmentTypePtr) ToAssessmentTypePtrOutputWithContext(ctx context.Context) AssessmentTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(AssessmentTypePtrOutput)
}

// The categories of resource that is at risk when the assessment is unhealthy
type Categories string

const (
	CategoriesCompute           = Categories("Compute")
	CategoriesNetworking        = Categories("Networking")
	CategoriesData              = Categories("Data")
	CategoriesIdentityAndAccess = Categories("IdentityAndAccess")
	CategoriesIoT               = Categories("IoT")
)

func (Categories) ElementType() reflect.Type {
	return reflect.TypeOf((*Categories)(nil)).Elem()
}

func (e Categories) ToCategoriesOutput() CategoriesOutput {
	return pulumi.ToOutput(e).(CategoriesOutput)
}

func (e Categories) ToCategoriesOutputWithContext(ctx context.Context) CategoriesOutput {
	return pulumi.ToOutputWithContext(ctx, e).(CategoriesOutput)
}

func (e Categories) ToCategoriesPtrOutput() CategoriesPtrOutput {
	return e.ToCategoriesPtrOutputWithContext(context.Background())
}

func (e Categories) ToCategoriesPtrOutputWithContext(ctx context.Context) CategoriesPtrOutput {
	return Categories(e).ToCategoriesOutputWithContext(ctx).ToCategoriesPtrOutputWithContext(ctx)
}

func (e Categories) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e Categories) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e Categories) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e Categories) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type CategoriesOutput struct{ *pulumi.OutputState }

func (CategoriesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Categories)(nil)).Elem()
}

func (o CategoriesOutput) ToCategoriesOutput() CategoriesOutput {
	return o
}

func (o CategoriesOutput) ToCategoriesOutputWithContext(ctx context.Context) CategoriesOutput {
	return o
}

func (o CategoriesOutput) ToCategoriesPtrOutput() CategoriesPtrOutput {
	return o.ToCategoriesPtrOutputWithContext(context.Background())
}

func (o CategoriesOutput) ToCategoriesPtrOutputWithContext(ctx context.Context) CategoriesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v Categories) *Categories {
		return &v
	}).(CategoriesPtrOutput)
}

func (o CategoriesOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o CategoriesOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e Categories) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o CategoriesOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o CategoriesOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e Categories) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type CategoriesPtrOutput struct{ *pulumi.OutputState }

func (CategoriesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Categories)(nil)).Elem()
}

func (o CategoriesPtrOutput) ToCategoriesPtrOutput() CategoriesPtrOutput {
	return o
}

func (o CategoriesPtrOutput) ToCategoriesPtrOutputWithContext(ctx context.Context) CategoriesPtrOutput {
	return o
}

func (o CategoriesPtrOutput) Elem() CategoriesOutput {
	return o.ApplyT(func(v *Categories) Categories {
		if v != nil {
			return *v
		}
		var ret Categories
		return ret
	}).(CategoriesOutput)
}

func (o CategoriesPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o CategoriesPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *Categories) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// CategoriesInput is an input type that accepts CategoriesArgs and CategoriesOutput values.
// You can construct a concrete instance of `CategoriesInput` via:
//
//          CategoriesArgs{...}
type CategoriesInput interface {
	pulumi.Input

	ToCategoriesOutput() CategoriesOutput
	ToCategoriesOutputWithContext(context.Context) CategoriesOutput
}

var categoriesPtrType = reflect.TypeOf((**Categories)(nil)).Elem()

type CategoriesPtrInput interface {
	pulumi.Input

	ToCategoriesPtrOutput() CategoriesPtrOutput
	ToCategoriesPtrOutputWithContext(context.Context) CategoriesPtrOutput
}

type categoriesPtr string

func CategoriesPtr(v string) CategoriesPtrInput {
	return (*categoriesPtr)(&v)
}

func (*categoriesPtr) ElementType() reflect.Type {
	return categoriesPtrType
}

func (in *categoriesPtr) ToCategoriesPtrOutput() CategoriesPtrOutput {
	return pulumi.ToOutput(in).(CategoriesPtrOutput)
}

func (in *categoriesPtr) ToCategoriesPtrOutputWithContext(ctx context.Context) CategoriesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(CategoriesPtrOutput)
}

// The implementation effort required to remediate this assessment
type ImplementationEffort string

const (
	ImplementationEffortLow      = ImplementationEffort("Low")
	ImplementationEffortModerate = ImplementationEffort("Moderate")
	ImplementationEffortHigh     = ImplementationEffort("High")
)

func (ImplementationEffort) ElementType() reflect.Type {
	return reflect.TypeOf((*ImplementationEffort)(nil)).Elem()
}

func (e ImplementationEffort) ToImplementationEffortOutput() ImplementationEffortOutput {
	return pulumi.ToOutput(e).(ImplementationEffortOutput)
}

func (e ImplementationEffort) ToImplementationEffortOutputWithContext(ctx context.Context) ImplementationEffortOutput {
	return pulumi.ToOutputWithContext(ctx, e).(ImplementationEffortOutput)
}

func (e ImplementationEffort) ToImplementationEffortPtrOutput() ImplementationEffortPtrOutput {
	return e.ToImplementationEffortPtrOutputWithContext(context.Background())
}

func (e ImplementationEffort) ToImplementationEffortPtrOutputWithContext(ctx context.Context) ImplementationEffortPtrOutput {
	return ImplementationEffort(e).ToImplementationEffortOutputWithContext(ctx).ToImplementationEffortPtrOutputWithContext(ctx)
}

func (e ImplementationEffort) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e ImplementationEffort) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e ImplementationEffort) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e ImplementationEffort) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type ImplementationEffortOutput struct{ *pulumi.OutputState }

func (ImplementationEffortOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ImplementationEffort)(nil)).Elem()
}

func (o ImplementationEffortOutput) ToImplementationEffortOutput() ImplementationEffortOutput {
	return o
}

func (o ImplementationEffortOutput) ToImplementationEffortOutputWithContext(ctx context.Context) ImplementationEffortOutput {
	return o
}

func (o ImplementationEffortOutput) ToImplementationEffortPtrOutput() ImplementationEffortPtrOutput {
	return o.ToImplementationEffortPtrOutputWithContext(context.Background())
}

func (o ImplementationEffortOutput) ToImplementationEffortPtrOutputWithContext(ctx context.Context) ImplementationEffortPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ImplementationEffort) *ImplementationEffort {
		return &v
	}).(ImplementationEffortPtrOutput)
}

func (o ImplementationEffortOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o ImplementationEffortOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e ImplementationEffort) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o ImplementationEffortOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o ImplementationEffortOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e ImplementationEffort) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type ImplementationEffortPtrOutput struct{ *pulumi.OutputState }

func (ImplementationEffortPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ImplementationEffort)(nil)).Elem()
}

func (o ImplementationEffortPtrOutput) ToImplementationEffortPtrOutput() ImplementationEffortPtrOutput {
	return o
}

func (o ImplementationEffortPtrOutput) ToImplementationEffortPtrOutputWithContext(ctx context.Context) ImplementationEffortPtrOutput {
	return o
}

func (o ImplementationEffortPtrOutput) Elem() ImplementationEffortOutput {
	return o.ApplyT(func(v *ImplementationEffort) ImplementationEffort {
		if v != nil {
			return *v
		}
		var ret ImplementationEffort
		return ret
	}).(ImplementationEffortOutput)
}

func (o ImplementationEffortPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o ImplementationEffortPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *ImplementationEffort) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// ImplementationEffortInput is an input type that accepts ImplementationEffortArgs and ImplementationEffortOutput values.
// You can construct a concrete instance of `ImplementationEffortInput` via:
//
//          ImplementationEffortArgs{...}
type ImplementationEffortInput interface {
	pulumi.Input

	ToImplementationEffortOutput() ImplementationEffortOutput
	ToImplementationEffortOutputWithContext(context.Context) ImplementationEffortOutput
}

var implementationEffortPtrType = reflect.TypeOf((**ImplementationEffort)(nil)).Elem()

type ImplementationEffortPtrInput interface {
	pulumi.Input

	ToImplementationEffortPtrOutput() ImplementationEffortPtrOutput
	ToImplementationEffortPtrOutputWithContext(context.Context) ImplementationEffortPtrOutput
}

type implementationEffortPtr string

func ImplementationEffortPtr(v string) ImplementationEffortPtrInput {
	return (*implementationEffortPtr)(&v)
}

func (*implementationEffortPtr) ElementType() reflect.Type {
	return implementationEffortPtrType
}

func (in *implementationEffortPtr) ToImplementationEffortPtrOutput() ImplementationEffortPtrOutput {
	return pulumi.ToOutput(in).(ImplementationEffortPtrOutput)
}

func (in *implementationEffortPtr) ToImplementationEffortPtrOutputWithContext(ctx context.Context) ImplementationEffortPtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(ImplementationEffortPtrOutput)
}

// The severity level of the assessment
type Severity string

const (
	SeverityLow    = Severity("Low")
	SeverityMedium = Severity("Medium")
	SeverityHigh   = Severity("High")
)

func (Severity) ElementType() reflect.Type {
	return reflect.TypeOf((*Severity)(nil)).Elem()
}

func (e Severity) ToSeverityOutput() SeverityOutput {
	return pulumi.ToOutput(e).(SeverityOutput)
}

func (e Severity) ToSeverityOutputWithContext(ctx context.Context) SeverityOutput {
	return pulumi.ToOutputWithContext(ctx, e).(SeverityOutput)
}

func (e Severity) ToSeverityPtrOutput() SeverityPtrOutput {
	return e.ToSeverityPtrOutputWithContext(context.Background())
}

func (e Severity) ToSeverityPtrOutputWithContext(ctx context.Context) SeverityPtrOutput {
	return Severity(e).ToSeverityOutputWithContext(ctx).ToSeverityPtrOutputWithContext(ctx)
}

func (e Severity) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e Severity) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e Severity) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e Severity) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type SeverityOutput struct{ *pulumi.OutputState }

func (SeverityOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Severity)(nil)).Elem()
}

func (o SeverityOutput) ToSeverityOutput() SeverityOutput {
	return o
}

func (o SeverityOutput) ToSeverityOutputWithContext(ctx context.Context) SeverityOutput {
	return o
}

func (o SeverityOutput) ToSeverityPtrOutput() SeverityPtrOutput {
	return o.ToSeverityPtrOutputWithContext(context.Background())
}

func (o SeverityOutput) ToSeverityPtrOutputWithContext(ctx context.Context) SeverityPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v Severity) *Severity {
		return &v
	}).(SeverityPtrOutput)
}

func (o SeverityOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o SeverityOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e Severity) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o SeverityOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o SeverityOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e Severity) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type SeverityPtrOutput struct{ *pulumi.OutputState }

func (SeverityPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Severity)(nil)).Elem()
}

func (o SeverityPtrOutput) ToSeverityPtrOutput() SeverityPtrOutput {
	return o
}

func (o SeverityPtrOutput) ToSeverityPtrOutputWithContext(ctx context.Context) SeverityPtrOutput {
	return o
}

func (o SeverityPtrOutput) Elem() SeverityOutput {
	return o.ApplyT(func(v *Severity) Severity {
		if v != nil {
			return *v
		}
		var ret Severity
		return ret
	}).(SeverityOutput)
}

func (o SeverityPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o SeverityPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *Severity) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// SeverityInput is an input type that accepts SeverityArgs and SeverityOutput values.
// You can construct a concrete instance of `SeverityInput` via:
//
//          SeverityArgs{...}
type SeverityInput interface {
	pulumi.Input

	ToSeverityOutput() SeverityOutput
	ToSeverityOutputWithContext(context.Context) SeverityOutput
}

var severityPtrType = reflect.TypeOf((**Severity)(nil)).Elem()

type SeverityPtrInput interface {
	pulumi.Input

	ToSeverityPtrOutput() SeverityPtrOutput
	ToSeverityPtrOutputWithContext(context.Context) SeverityPtrOutput
}

type severityPtr string

func SeverityPtr(v string) SeverityPtrInput {
	return (*severityPtr)(&v)
}

func (*severityPtr) ElementType() reflect.Type {
	return severityPtrType
}

func (in *severityPtr) ToSeverityPtrOutput() SeverityPtrOutput {
	return pulumi.ToOutput(in).(SeverityPtrOutput)
}

func (in *severityPtr) ToSeverityPtrOutputWithContext(ctx context.Context) SeverityPtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(SeverityPtrOutput)
}

// The platform where the assessed resource resides
type Source string

const (
	// Resource is in Azure
	SourceAzure = Source("Azure")
	// Resource in an on premise machine connected to Azure cloud
	SourceOnPremise = Source("OnPremise")
	// SQL Resource in an on premise machine connected to Azure cloud
	SourceOnPremiseSql = Source("OnPremiseSql")
)

func (Source) ElementType() reflect.Type {
	return reflect.TypeOf((*Source)(nil)).Elem()
}

func (e Source) ToSourceOutput() SourceOutput {
	return pulumi.ToOutput(e).(SourceOutput)
}

func (e Source) ToSourceOutputWithContext(ctx context.Context) SourceOutput {
	return pulumi.ToOutputWithContext(ctx, e).(SourceOutput)
}

func (e Source) ToSourcePtrOutput() SourcePtrOutput {
	return e.ToSourcePtrOutputWithContext(context.Background())
}

func (e Source) ToSourcePtrOutputWithContext(ctx context.Context) SourcePtrOutput {
	return Source(e).ToSourceOutputWithContext(ctx).ToSourcePtrOutputWithContext(ctx)
}

func (e Source) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e Source) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e Source) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e Source) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type SourceOutput struct{ *pulumi.OutputState }

func (SourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Source)(nil)).Elem()
}

func (o SourceOutput) ToSourceOutput() SourceOutput {
	return o
}

func (o SourceOutput) ToSourceOutputWithContext(ctx context.Context) SourceOutput {
	return o
}

func (o SourceOutput) ToSourcePtrOutput() SourcePtrOutput {
	return o.ToSourcePtrOutputWithContext(context.Background())
}

func (o SourceOutput) ToSourcePtrOutputWithContext(ctx context.Context) SourcePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v Source) *Source {
		return &v
	}).(SourcePtrOutput)
}

func (o SourceOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o SourceOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e Source) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o SourceOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o SourceOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e Source) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type SourcePtrOutput struct{ *pulumi.OutputState }

func (SourcePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Source)(nil)).Elem()
}

func (o SourcePtrOutput) ToSourcePtrOutput() SourcePtrOutput {
	return o
}

func (o SourcePtrOutput) ToSourcePtrOutputWithContext(ctx context.Context) SourcePtrOutput {
	return o
}

func (o SourcePtrOutput) Elem() SourceOutput {
	return o.ApplyT(func(v *Source) Source {
		if v != nil {
			return *v
		}
		var ret Source
		return ret
	}).(SourceOutput)
}

func (o SourcePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o SourcePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *Source) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// SourceInput is an input type that accepts SourceArgs and SourceOutput values.
// You can construct a concrete instance of `SourceInput` via:
//
//          SourceArgs{...}
type SourceInput interface {
	pulumi.Input

	ToSourceOutput() SourceOutput
	ToSourceOutputWithContext(context.Context) SourceOutput
}

var sourcePtrType = reflect.TypeOf((**Source)(nil)).Elem()

type SourcePtrInput interface {
	pulumi.Input

	ToSourcePtrOutput() SourcePtrOutput
	ToSourcePtrOutputWithContext(context.Context) SourcePtrOutput
}

type sourcePtr string

func SourcePtr(v string) SourcePtrInput {
	return (*sourcePtr)(&v)
}

func (*sourcePtr) ElementType() reflect.Type {
	return sourcePtrType
}

func (in *sourcePtr) ToSourcePtrOutput() SourcePtrOutput {
	return pulumi.ToOutput(in).(SourcePtrOutput)
}

func (in *sourcePtr) ToSourcePtrOutputWithContext(ctx context.Context) SourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(SourcePtrOutput)
}

// Tactic of the assessment
type Tactics string

const (
	TacticsReconnaissance        = Tactics("Reconnaissance")
	Tactics_Resource_Development = Tactics("Resource Development")
	Tactics_Initial_Access       = Tactics("Initial Access")
	TacticsExecution             = Tactics("Execution")
	TacticsPersistence           = Tactics("Persistence")
	Tactics_Privilege_Escalation = Tactics("Privilege Escalation")
	Tactics_Defense_Evasion      = Tactics("Defense Evasion")
	Tactics_Credential_Access    = Tactics("Credential Access")
	TacticsDiscovery             = Tactics("Discovery")
	Tactics_Lateral_Movement     = Tactics("Lateral Movement")
	TacticsCollection            = Tactics("Collection")
	Tactics_Command_and_Control  = Tactics("Command and Control")
	TacticsExfiltration          = Tactics("Exfiltration")
	TacticsImpact                = Tactics("Impact")
)

func (Tactics) ElementType() reflect.Type {
	return reflect.TypeOf((*Tactics)(nil)).Elem()
}

func (e Tactics) ToTacticsOutput() TacticsOutput {
	return pulumi.ToOutput(e).(TacticsOutput)
}

func (e Tactics) ToTacticsOutputWithContext(ctx context.Context) TacticsOutput {
	return pulumi.ToOutputWithContext(ctx, e).(TacticsOutput)
}

func (e Tactics) ToTacticsPtrOutput() TacticsPtrOutput {
	return e.ToTacticsPtrOutputWithContext(context.Background())
}

func (e Tactics) ToTacticsPtrOutputWithContext(ctx context.Context) TacticsPtrOutput {
	return Tactics(e).ToTacticsOutputWithContext(ctx).ToTacticsPtrOutputWithContext(ctx)
}

func (e Tactics) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e Tactics) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e Tactics) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e Tactics) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type TacticsOutput struct{ *pulumi.OutputState }

func (TacticsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Tactics)(nil)).Elem()
}

func (o TacticsOutput) ToTacticsOutput() TacticsOutput {
	return o
}

func (o TacticsOutput) ToTacticsOutputWithContext(ctx context.Context) TacticsOutput {
	return o
}

func (o TacticsOutput) ToTacticsPtrOutput() TacticsPtrOutput {
	return o.ToTacticsPtrOutputWithContext(context.Background())
}

func (o TacticsOutput) ToTacticsPtrOutputWithContext(ctx context.Context) TacticsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v Tactics) *Tactics {
		return &v
	}).(TacticsPtrOutput)
}

func (o TacticsOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o TacticsOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e Tactics) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o TacticsOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o TacticsOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e Tactics) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type TacticsPtrOutput struct{ *pulumi.OutputState }

func (TacticsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Tactics)(nil)).Elem()
}

func (o TacticsPtrOutput) ToTacticsPtrOutput() TacticsPtrOutput {
	return o
}

func (o TacticsPtrOutput) ToTacticsPtrOutputWithContext(ctx context.Context) TacticsPtrOutput {
	return o
}

func (o TacticsPtrOutput) Elem() TacticsOutput {
	return o.ApplyT(func(v *Tactics) Tactics {
		if v != nil {
			return *v
		}
		var ret Tactics
		return ret
	}).(TacticsOutput)
}

func (o TacticsPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o TacticsPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *Tactics) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// TacticsInput is an input type that accepts TacticsArgs and TacticsOutput values.
// You can construct a concrete instance of `TacticsInput` via:
//
//          TacticsArgs{...}
type TacticsInput interface {
	pulumi.Input

	ToTacticsOutput() TacticsOutput
	ToTacticsOutputWithContext(context.Context) TacticsOutput
}

var tacticsPtrType = reflect.TypeOf((**Tactics)(nil)).Elem()

type TacticsPtrInput interface {
	pulumi.Input

	ToTacticsPtrOutput() TacticsPtrOutput
	ToTacticsPtrOutputWithContext(context.Context) TacticsPtrOutput
}

type tacticsPtr string

func TacticsPtr(v string) TacticsPtrInput {
	return (*tacticsPtr)(&v)
}

func (*tacticsPtr) ElementType() reflect.Type {
	return tacticsPtrType
}

func (in *tacticsPtr) ToTacticsPtrOutput() TacticsPtrOutput {
	return pulumi.ToOutput(in).(TacticsPtrOutput)
}

func (in *tacticsPtr) ToTacticsPtrOutputWithContext(ctx context.Context) TacticsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(TacticsPtrOutput)
}

// Techniques of the assessment
type Techniques string

const (
	Techniques_Abuse_Elevation_Control_Mechanism           = Techniques("Abuse Elevation Control Mechanism")
	Techniques_Access_Token_Manipulation                   = Techniques("Access Token Manipulation")
	Techniques_Account_Discovery                           = Techniques("Account Discovery")
	Techniques_Account_Manipulation                        = Techniques("Account Manipulation")
	Techniques_Active_Scanning                             = Techniques("Active Scanning")
	Techniques_Application_Layer_Protocol                  = Techniques("Application Layer Protocol")
	Techniques_Audio_Capture                               = Techniques("Audio Capture")
	Techniques_Boot_or_Logon_Autostart_Execution           = Techniques("Boot or Logon Autostart Execution")
	Techniques_Boot_or_Logon_Initialization_Scripts        = Techniques("Boot or Logon Initialization Scripts")
	Techniques_Brute_Force                                 = Techniques("Brute Force")
	Techniques_Cloud_Infrastructure_Discovery              = Techniques("Cloud Infrastructure Discovery")
	Techniques_Cloud_Service_Dashboard                     = Techniques("Cloud Service Dashboard")
	Techniques_Cloud_Service_Discovery                     = Techniques("Cloud Service Discovery")
	Techniques_Command_and_Scripting_Interpreter           = Techniques("Command and Scripting Interpreter")
	Techniques_Compromise_Client_Software_Binary           = Techniques("Compromise Client Software Binary")
	Techniques_Compromise_Infrastructure                   = Techniques("Compromise Infrastructure")
	Techniques_Container_and_Resource_Discovery            = Techniques("Container and Resource Discovery")
	Techniques_Create_Account                              = Techniques("Create Account")
	Techniques_Create_or_Modify_System_Process             = Techniques("Create or Modify System Process")
	Techniques_Credentials_from_Password_Stores            = Techniques("Credentials from Password Stores")
	Techniques_Data_Destruction                            = Techniques("Data Destruction")
	Techniques_Data_Encrypted_for_Impact                   = Techniques("Data Encrypted for Impact")
	Techniques_Data_from_Cloud_Storage_Object              = Techniques("Data from Cloud Storage Object")
	Techniques_Data_from_Configuration_Repository          = Techniques("Data from Configuration Repository")
	Techniques_Data_from_Information_Repositories          = Techniques("Data from Information Repositories")
	Techniques_Data_from_Local_System                      = Techniques("Data from Local System")
	Techniques_Data_Manipulation                           = Techniques("Data Manipulation")
	Techniques_Data_Staged                                 = Techniques("Data Staged")
	TechniquesDefacement                                   = Techniques("Defacement")
	Techniques_Deobfuscate_Decode_Files_or_Information     = Techniques("Deobfuscate/Decode Files or Information")
	Techniques_Disk_Wipe                                   = Techniques("Disk Wipe")
	Techniques_Domain_Trust_Discovery                      = Techniques("Domain Trust Discovery")
	Techniques_Drive_by_Compromise                         = Techniques("Drive-by Compromise")
	Techniques_Dynamic_Resolution                          = Techniques("Dynamic Resolution")
	Techniques_Endpoint_Denial_of_Service                  = Techniques("Endpoint Denial of Service")
	Techniques_Event_Triggered_Execution                   = Techniques("Event Triggered Execution")
	Techniques_Exfiltration_Over_Alternative_Protocol      = Techniques("Exfiltration Over Alternative Protocol")
	Techniques_Exploit_Public_Facing_Application           = Techniques("Exploit Public-Facing Application")
	Techniques_Exploitation_for_Client_Execution           = Techniques("Exploitation for Client Execution")
	Techniques_Exploitation_for_Credential_Access          = Techniques("Exploitation for Credential Access")
	Techniques_Exploitation_for_Defense_Evasion            = Techniques("Exploitation for Defense Evasion")
	Techniques_Exploitation_for_Privilege_Escalation       = Techniques("Exploitation for Privilege Escalation")
	Techniques_Exploitation_of_Remote_Services             = Techniques("Exploitation of Remote Services")
	Techniques_External_Remote_Services                    = Techniques("External Remote Services")
	Techniques_Fallback_Channels                           = Techniques("Fallback Channels")
	Techniques_File_and_Directory_Discovery                = Techniques("File and Directory Discovery")
	Techniques_Gather_Victim_Network_Information           = Techniques("Gather Victim Network Information")
	Techniques_Hide_Artifacts                              = Techniques("Hide Artifacts")
	Techniques_Hijack_Execution_Flow                       = Techniques("Hijack Execution Flow")
	Techniques_Impair_Defenses                             = Techniques("Impair Defenses")
	Techniques_Implant_Container_Image                     = Techniques("Implant Container Image")
	Techniques_Indicator_Removal_on_Host                   = Techniques("Indicator Removal on Host")
	Techniques_Indirect_Command_Execution                  = Techniques("Indirect Command Execution")
	Techniques_Ingress_Tool_Transfer                       = Techniques("Ingress Tool Transfer")
	Techniques_Input_Capture                               = Techniques("Input Capture")
	Techniques_Inter_Process_Communication                 = Techniques("Inter-Process Communication")
	Techniques_Lateral_Tool_Transfer                       = Techniques("Lateral Tool Transfer")
	Techniques_Man_in_the_Middle                           = Techniques("Man-in-the-Middle")
	TechniquesMasquerading                                 = Techniques("Masquerading")
	Techniques_Modify_Authentication_Process               = Techniques("Modify Authentication Process")
	Techniques_Modify_Registry                             = Techniques("Modify Registry")
	Techniques_Network_Denial_of_Service                   = Techniques("Network Denial of Service")
	Techniques_Network_Service_Scanning                    = Techniques("Network Service Scanning")
	Techniques_Network_Sniffing                            = Techniques("Network Sniffing")
	Techniques_Non_Application_Layer_Protocol              = Techniques("Non-Application Layer Protocol")
	Techniques_Non_Standard_Port                           = Techniques("Non-Standard Port")
	Techniques_Obfuscated_Files_or_Information             = Techniques("Obfuscated Files or Information")
	Techniques_Obtain_Capabilities                         = Techniques("Obtain Capabilities")
	Techniques_Obuscated_Files_or_Information              = Techniques("Obuscated Files or Information")
	Techniques_Office_Application_Startup                  = Techniques("Office Application Startup")
	Techniques_OS_Credential_Dumping                       = Techniques("OS Credential Dumping")
	Techniques_Permission_Groups_Discovery                 = Techniques("Permission Groups Discovery")
	TechniquesPhishing                                     = Techniques("Phishing")
	Techniques_Pre_OS_Boot                                 = Techniques("Pre-OS Boot")
	Techniques_Process_Discovery                           = Techniques("Process Discovery")
	Techniques_Process_Injection                           = Techniques("Process Injection")
	Techniques_Protocol_Tunneling                          = Techniques("Protocol Tunneling")
	TechniquesProxy                                        = Techniques("Proxy")
	Techniques_Query_Registry                              = Techniques("Query Registry")
	Techniques_Remote_Access_Software                      = Techniques("Remote Access Software")
	Techniques_Remote_Service_Session_Hijacking            = Techniques("Remote Service Session Hijacking")
	Techniques_Remote_Services                             = Techniques("Remote Services")
	Techniques_Remote_System_Discovery                     = Techniques("Remote System Discovery")
	Techniques_Resource_Hijacking                          = Techniques("Resource Hijacking")
	Techniques_Scheduled_Task_Job                          = Techniques("Scheduled Task/Job")
	Techniques_Screen_Capture                              = Techniques("Screen Capture")
	Techniques_Search_Victim_Owned_Websites                = Techniques("Search Victim-Owned Websites")
	Techniques_Server_Software_Component                   = Techniques("Server Software Component")
	Techniques_Service_Stop                                = Techniques("Service Stop")
	Techniques_Signed_Binary_Proxy_Execution               = Techniques("Signed Binary Proxy Execution")
	Techniques_Software_Deployment_Tools                   = Techniques("Software Deployment Tools")
	Techniques_SQL_Stored_Procedures                       = Techniques("SQL Stored Procedures")
	Techniques_Steal_or_Forge_Kerberos_Tickets             = Techniques("Steal or Forge Kerberos Tickets")
	Techniques_Subvert_Trust_Controls                      = Techniques("Subvert Trust Controls")
	Techniques_Supply_Chain_Compromise                     = Techniques("Supply Chain Compromise")
	Techniques_System_Information_Discovery                = Techniques("System Information Discovery")
	Techniques_Taint_Shared_Content                        = Techniques("Taint Shared Content")
	Techniques_Traffic_Signaling                           = Techniques("Traffic Signaling")
	Techniques_Transfer_Data_to_Cloud_Account              = Techniques("Transfer Data to Cloud Account")
	Techniques_Trusted_Relationship                        = Techniques("Trusted Relationship")
	Techniques_Unsecured_Credentials                       = Techniques("Unsecured Credentials")
	Techniques_User_Execution                              = Techniques("User Execution")
	Techniques_Valid_Accounts                              = Techniques("Valid Accounts")
	Techniques_Windows_Management_Instrumentation          = Techniques("Windows Management Instrumentation")
	Techniques_File_and_Directory_Permissions_Modification = Techniques("File and Directory Permissions Modification")
)

func (Techniques) ElementType() reflect.Type {
	return reflect.TypeOf((*Techniques)(nil)).Elem()
}

func (e Techniques) ToTechniquesOutput() TechniquesOutput {
	return pulumi.ToOutput(e).(TechniquesOutput)
}

func (e Techniques) ToTechniquesOutputWithContext(ctx context.Context) TechniquesOutput {
	return pulumi.ToOutputWithContext(ctx, e).(TechniquesOutput)
}

func (e Techniques) ToTechniquesPtrOutput() TechniquesPtrOutput {
	return e.ToTechniquesPtrOutputWithContext(context.Background())
}

func (e Techniques) ToTechniquesPtrOutputWithContext(ctx context.Context) TechniquesPtrOutput {
	return Techniques(e).ToTechniquesOutputWithContext(ctx).ToTechniquesPtrOutputWithContext(ctx)
}

func (e Techniques) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e Techniques) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e Techniques) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e Techniques) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type TechniquesOutput struct{ *pulumi.OutputState }

func (TechniquesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Techniques)(nil)).Elem()
}

func (o TechniquesOutput) ToTechniquesOutput() TechniquesOutput {
	return o
}

func (o TechniquesOutput) ToTechniquesOutputWithContext(ctx context.Context) TechniquesOutput {
	return o
}

func (o TechniquesOutput) ToTechniquesPtrOutput() TechniquesPtrOutput {
	return o.ToTechniquesPtrOutputWithContext(context.Background())
}

func (o TechniquesOutput) ToTechniquesPtrOutputWithContext(ctx context.Context) TechniquesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v Techniques) *Techniques {
		return &v
	}).(TechniquesPtrOutput)
}

func (o TechniquesOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o TechniquesOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e Techniques) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o TechniquesOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o TechniquesOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e Techniques) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type TechniquesPtrOutput struct{ *pulumi.OutputState }

func (TechniquesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Techniques)(nil)).Elem()
}

func (o TechniquesPtrOutput) ToTechniquesPtrOutput() TechniquesPtrOutput {
	return o
}

func (o TechniquesPtrOutput) ToTechniquesPtrOutputWithContext(ctx context.Context) TechniquesPtrOutput {
	return o
}

func (o TechniquesPtrOutput) Elem() TechniquesOutput {
	return o.ApplyT(func(v *Techniques) Techniques {
		if v != nil {
			return *v
		}
		var ret Techniques
		return ret
	}).(TechniquesOutput)
}

func (o TechniquesPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o TechniquesPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *Techniques) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// TechniquesInput is an input type that accepts TechniquesArgs and TechniquesOutput values.
// You can construct a concrete instance of `TechniquesInput` via:
//
//          TechniquesArgs{...}
type TechniquesInput interface {
	pulumi.Input

	ToTechniquesOutput() TechniquesOutput
	ToTechniquesOutputWithContext(context.Context) TechniquesOutput
}

var techniquesPtrType = reflect.TypeOf((**Techniques)(nil)).Elem()

type TechniquesPtrInput interface {
	pulumi.Input

	ToTechniquesPtrOutput() TechniquesPtrOutput
	ToTechniquesPtrOutputWithContext(context.Context) TechniquesPtrOutput
}

type techniquesPtr string

func TechniquesPtr(v string) TechniquesPtrInput {
	return (*techniquesPtr)(&v)
}

func (*techniquesPtr) ElementType() reflect.Type {
	return techniquesPtrType
}

func (in *techniquesPtr) ToTechniquesPtrOutput() TechniquesPtrOutput {
	return pulumi.ToOutput(in).(TechniquesPtrOutput)
}

func (in *techniquesPtr) ToTechniquesPtrOutputWithContext(ctx context.Context) TechniquesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(TechniquesPtrOutput)
}

// Threats impact of the assessment
type Threats string

const (
	ThreatsAccountBreach        = Threats("accountBreach")
	ThreatsDataExfiltration     = Threats("dataExfiltration")
	ThreatsDataSpillage         = Threats("dataSpillage")
	ThreatsMaliciousInsider     = Threats("maliciousInsider")
	ThreatsElevationOfPrivilege = Threats("elevationOfPrivilege")
	ThreatsThreatResistance     = Threats("threatResistance")
	ThreatsMissingCoverage      = Threats("missingCoverage")
	ThreatsDenialOfService      = Threats("denialOfService")
)

func (Threats) ElementType() reflect.Type {
	return reflect.TypeOf((*Threats)(nil)).Elem()
}

func (e Threats) ToThreatsOutput() ThreatsOutput {
	return pulumi.ToOutput(e).(ThreatsOutput)
}

func (e Threats) ToThreatsOutputWithContext(ctx context.Context) ThreatsOutput {
	return pulumi.ToOutputWithContext(ctx, e).(ThreatsOutput)
}

func (e Threats) ToThreatsPtrOutput() ThreatsPtrOutput {
	return e.ToThreatsPtrOutputWithContext(context.Background())
}

func (e Threats) ToThreatsPtrOutputWithContext(ctx context.Context) ThreatsPtrOutput {
	return Threats(e).ToThreatsOutputWithContext(ctx).ToThreatsPtrOutputWithContext(ctx)
}

func (e Threats) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e Threats) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e Threats) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e Threats) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type ThreatsOutput struct{ *pulumi.OutputState }

func (ThreatsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Threats)(nil)).Elem()
}

func (o ThreatsOutput) ToThreatsOutput() ThreatsOutput {
	return o
}

func (o ThreatsOutput) ToThreatsOutputWithContext(ctx context.Context) ThreatsOutput {
	return o
}

func (o ThreatsOutput) ToThreatsPtrOutput() ThreatsPtrOutput {
	return o.ToThreatsPtrOutputWithContext(context.Background())
}

func (o ThreatsOutput) ToThreatsPtrOutputWithContext(ctx context.Context) ThreatsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v Threats) *Threats {
		return &v
	}).(ThreatsPtrOutput)
}

func (o ThreatsOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o ThreatsOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e Threats) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o ThreatsOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o ThreatsOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e Threats) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type ThreatsPtrOutput struct{ *pulumi.OutputState }

func (ThreatsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Threats)(nil)).Elem()
}

func (o ThreatsPtrOutput) ToThreatsPtrOutput() ThreatsPtrOutput {
	return o
}

func (o ThreatsPtrOutput) ToThreatsPtrOutputWithContext(ctx context.Context) ThreatsPtrOutput {
	return o
}

func (o ThreatsPtrOutput) Elem() ThreatsOutput {
	return o.ApplyT(func(v *Threats) Threats {
		if v != nil {
			return *v
		}
		var ret Threats
		return ret
	}).(ThreatsOutput)
}

func (o ThreatsPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o ThreatsPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *Threats) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// ThreatsInput is an input type that accepts ThreatsArgs and ThreatsOutput values.
// You can construct a concrete instance of `ThreatsInput` via:
//
//          ThreatsArgs{...}
type ThreatsInput interface {
	pulumi.Input

	ToThreatsOutput() ThreatsOutput
	ToThreatsOutputWithContext(context.Context) ThreatsOutput
}

var threatsPtrType = reflect.TypeOf((**Threats)(nil)).Elem()

type ThreatsPtrInput interface {
	pulumi.Input

	ToThreatsPtrOutput() ThreatsPtrOutput
	ToThreatsPtrOutputWithContext(context.Context) ThreatsPtrOutput
}

type threatsPtr string

func ThreatsPtr(v string) ThreatsPtrInput {
	return (*threatsPtr)(&v)
}

func (*threatsPtr) ElementType() reflect.Type {
	return threatsPtrType
}

func (in *threatsPtr) ToThreatsPtrOutput() ThreatsPtrOutput {
	return pulumi.ToOutput(in).(ThreatsPtrOutput)
}

func (in *threatsPtr) ToThreatsPtrOutputWithContext(ctx context.Context) ThreatsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(ThreatsPtrOutput)
}

// The user impact of the assessment
type UserImpact string

const (
	UserImpactLow      = UserImpact("Low")
	UserImpactModerate = UserImpact("Moderate")
	UserImpactHigh     = UserImpact("High")
)

func (UserImpact) ElementType() reflect.Type {
	return reflect.TypeOf((*UserImpact)(nil)).Elem()
}

func (e UserImpact) ToUserImpactOutput() UserImpactOutput {
	return pulumi.ToOutput(e).(UserImpactOutput)
}

func (e UserImpact) ToUserImpactOutputWithContext(ctx context.Context) UserImpactOutput {
	return pulumi.ToOutputWithContext(ctx, e).(UserImpactOutput)
}

func (e UserImpact) ToUserImpactPtrOutput() UserImpactPtrOutput {
	return e.ToUserImpactPtrOutputWithContext(context.Background())
}

func (e UserImpact) ToUserImpactPtrOutputWithContext(ctx context.Context) UserImpactPtrOutput {
	return UserImpact(e).ToUserImpactOutputWithContext(ctx).ToUserImpactPtrOutputWithContext(ctx)
}

func (e UserImpact) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e UserImpact) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e UserImpact) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e UserImpact) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type UserImpactOutput struct{ *pulumi.OutputState }

func (UserImpactOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*UserImpact)(nil)).Elem()
}

func (o UserImpactOutput) ToUserImpactOutput() UserImpactOutput {
	return o
}

func (o UserImpactOutput) ToUserImpactOutputWithContext(ctx context.Context) UserImpactOutput {
	return o
}

func (o UserImpactOutput) ToUserImpactPtrOutput() UserImpactPtrOutput {
	return o.ToUserImpactPtrOutputWithContext(context.Background())
}

func (o UserImpactOutput) ToUserImpactPtrOutputWithContext(ctx context.Context) UserImpactPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v UserImpact) *UserImpact {
		return &v
	}).(UserImpactPtrOutput)
}

func (o UserImpactOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o UserImpactOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e UserImpact) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o UserImpactOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o UserImpactOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e UserImpact) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type UserImpactPtrOutput struct{ *pulumi.OutputState }

func (UserImpactPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**UserImpact)(nil)).Elem()
}

func (o UserImpactPtrOutput) ToUserImpactPtrOutput() UserImpactPtrOutput {
	return o
}

func (o UserImpactPtrOutput) ToUserImpactPtrOutputWithContext(ctx context.Context) UserImpactPtrOutput {
	return o
}

func (o UserImpactPtrOutput) Elem() UserImpactOutput {
	return o.ApplyT(func(v *UserImpact) UserImpact {
		if v != nil {
			return *v
		}
		var ret UserImpact
		return ret
	}).(UserImpactOutput)
}

func (o UserImpactPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o UserImpactPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *UserImpact) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// UserImpactInput is an input type that accepts UserImpactArgs and UserImpactOutput values.
// You can construct a concrete instance of `UserImpactInput` via:
//
//          UserImpactArgs{...}
type UserImpactInput interface {
	pulumi.Input

	ToUserImpactOutput() UserImpactOutput
	ToUserImpactOutputWithContext(context.Context) UserImpactOutput
}

var userImpactPtrType = reflect.TypeOf((**UserImpact)(nil)).Elem()

type UserImpactPtrInput interface {
	pulumi.Input

	ToUserImpactPtrOutput() UserImpactPtrOutput
	ToUserImpactPtrOutputWithContext(context.Context) UserImpactPtrOutput
}

type userImpactPtr string

func UserImpactPtr(v string) UserImpactPtrInput {
	return (*userImpactPtr)(&v)
}

func (*userImpactPtr) ElementType() reflect.Type {
	return userImpactPtrType
}

func (in *userImpactPtr) ToUserImpactPtrOutput() UserImpactPtrOutput {
	return pulumi.ToOutput(in).(UserImpactPtrOutput)
}

func (in *userImpactPtr) ToUserImpactPtrOutputWithContext(ctx context.Context) UserImpactPtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(UserImpactPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(AssessmentStatusCodeOutput{})
	pulumi.RegisterOutputType(AssessmentStatusCodePtrOutput{})
	pulumi.RegisterOutputType(AssessmentTypeOutput{})
	pulumi.RegisterOutputType(AssessmentTypePtrOutput{})
	pulumi.RegisterOutputType(CategoriesOutput{})
	pulumi.RegisterOutputType(CategoriesPtrOutput{})
	pulumi.RegisterOutputType(ImplementationEffortOutput{})
	pulumi.RegisterOutputType(ImplementationEffortPtrOutput{})
	pulumi.RegisterOutputType(SeverityOutput{})
	pulumi.RegisterOutputType(SeverityPtrOutput{})
	pulumi.RegisterOutputType(SourceOutput{})
	pulumi.RegisterOutputType(SourcePtrOutput{})
	pulumi.RegisterOutputType(TacticsOutput{})
	pulumi.RegisterOutputType(TacticsPtrOutput{})
	pulumi.RegisterOutputType(TechniquesOutput{})
	pulumi.RegisterOutputType(TechniquesPtrOutput{})
	pulumi.RegisterOutputType(ThreatsOutput{})
	pulumi.RegisterOutputType(ThreatsPtrOutput{})
	pulumi.RegisterOutputType(UserImpactOutput{})
	pulumi.RegisterOutputType(UserImpactPtrOutput{})
}
