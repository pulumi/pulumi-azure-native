// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v20200901preview

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Rights that this key has.
type AccessRightsDescription string

const (
	AccessRightsDescriptionServiceConfig           = AccessRightsDescription("ServiceConfig")
	AccessRightsDescriptionEnrollmentRead          = AccessRightsDescription("EnrollmentRead")
	AccessRightsDescriptionEnrollmentWrite         = AccessRightsDescription("EnrollmentWrite")
	AccessRightsDescriptionDeviceConnect           = AccessRightsDescription("DeviceConnect")
	AccessRightsDescriptionRegistrationStatusRead  = AccessRightsDescription("RegistrationStatusRead")
	AccessRightsDescriptionRegistrationStatusWrite = AccessRightsDescription("RegistrationStatusWrite")
)

// Allocation policy to be used by this provisioning service.
type AllocationPolicy string

const (
	AllocationPolicyHashed     = AllocationPolicy("Hashed")
	AllocationPolicyGeoLatency = AllocationPolicy("GeoLatency")
	AllocationPolicyStatic     = AllocationPolicy("Static")
)

// Sku name.
type IotDpsSku string

const (
	IotDpsSkuS1 = IotDpsSku("S1")
)

// The desired action for requests captured by this rule.
type IpFilterActionType string

const (
	IpFilterActionTypeAccept = IpFilterActionType("Accept")
	IpFilterActionTypeReject = IpFilterActionType("Reject")
)

func (IpFilterActionType) ElementType() reflect.Type {
	return reflect.TypeOf((*IpFilterActionType)(nil)).Elem()
}

func (e IpFilterActionType) ToIpFilterActionTypeOutput() IpFilterActionTypeOutput {
	return pulumi.ToOutput(e).(IpFilterActionTypeOutput)
}

func (e IpFilterActionType) ToIpFilterActionTypeOutputWithContext(ctx context.Context) IpFilterActionTypeOutput {
	return pulumi.ToOutputWithContext(ctx, e).(IpFilterActionTypeOutput)
}

func (e IpFilterActionType) ToIpFilterActionTypePtrOutput() IpFilterActionTypePtrOutput {
	return e.ToIpFilterActionTypePtrOutputWithContext(context.Background())
}

func (e IpFilterActionType) ToIpFilterActionTypePtrOutputWithContext(ctx context.Context) IpFilterActionTypePtrOutput {
	return IpFilterActionType(e).ToIpFilterActionTypeOutputWithContext(ctx).ToIpFilterActionTypePtrOutputWithContext(ctx)
}

func (e IpFilterActionType) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e IpFilterActionType) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e IpFilterActionType) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e IpFilterActionType) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type IpFilterActionTypeOutput struct{ *pulumi.OutputState }

func (IpFilterActionTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IpFilterActionType)(nil)).Elem()
}

func (o IpFilterActionTypeOutput) ToIpFilterActionTypeOutput() IpFilterActionTypeOutput {
	return o
}

func (o IpFilterActionTypeOutput) ToIpFilterActionTypeOutputWithContext(ctx context.Context) IpFilterActionTypeOutput {
	return o
}

func (o IpFilterActionTypeOutput) ToIpFilterActionTypePtrOutput() IpFilterActionTypePtrOutput {
	return o.ToIpFilterActionTypePtrOutputWithContext(context.Background())
}

func (o IpFilterActionTypeOutput) ToIpFilterActionTypePtrOutputWithContext(ctx context.Context) IpFilterActionTypePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v IpFilterActionType) *IpFilterActionType {
		return &v
	}).(IpFilterActionTypePtrOutput)
}

func (o IpFilterActionTypeOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o IpFilterActionTypeOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e IpFilterActionType) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o IpFilterActionTypeOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o IpFilterActionTypeOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e IpFilterActionType) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type IpFilterActionTypePtrOutput struct{ *pulumi.OutputState }

func (IpFilterActionTypePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**IpFilterActionType)(nil)).Elem()
}

func (o IpFilterActionTypePtrOutput) ToIpFilterActionTypePtrOutput() IpFilterActionTypePtrOutput {
	return o
}

func (o IpFilterActionTypePtrOutput) ToIpFilterActionTypePtrOutputWithContext(ctx context.Context) IpFilterActionTypePtrOutput {
	return o
}

func (o IpFilterActionTypePtrOutput) Elem() IpFilterActionTypeOutput {
	return o.ApplyT(func(v *IpFilterActionType) IpFilterActionType {
		if v != nil {
			return *v
		}
		var ret IpFilterActionType
		return ret
	}).(IpFilterActionTypeOutput)
}

func (o IpFilterActionTypePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o IpFilterActionTypePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *IpFilterActionType) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// IpFilterActionTypeInput is an input type that accepts IpFilterActionTypeArgs and IpFilterActionTypeOutput values.
// You can construct a concrete instance of `IpFilterActionTypeInput` via:
//
//	IpFilterActionTypeArgs{...}
type IpFilterActionTypeInput interface {
	pulumi.Input

	ToIpFilterActionTypeOutput() IpFilterActionTypeOutput
	ToIpFilterActionTypeOutputWithContext(context.Context) IpFilterActionTypeOutput
}

var ipFilterActionTypePtrType = reflect.TypeOf((**IpFilterActionType)(nil)).Elem()

type IpFilterActionTypePtrInput interface {
	pulumi.Input

	ToIpFilterActionTypePtrOutput() IpFilterActionTypePtrOutput
	ToIpFilterActionTypePtrOutputWithContext(context.Context) IpFilterActionTypePtrOutput
}

type ipFilterActionTypePtr string

func IpFilterActionTypePtr(v string) IpFilterActionTypePtrInput {
	return (*ipFilterActionTypePtr)(&v)
}

func (*ipFilterActionTypePtr) ElementType() reflect.Type {
	return ipFilterActionTypePtrType
}

func (in *ipFilterActionTypePtr) ToIpFilterActionTypePtrOutput() IpFilterActionTypePtrOutput {
	return pulumi.ToOutput(in).(IpFilterActionTypePtrOutput)
}

func (in *ipFilterActionTypePtr) ToIpFilterActionTypePtrOutputWithContext(ctx context.Context) IpFilterActionTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(IpFilterActionTypePtrOutput)
}

// Target for requests captured by this rule.
type IpFilterTargetType string

const (
	IpFilterTargetTypeAll        = IpFilterTargetType("all")
	IpFilterTargetTypeServiceApi = IpFilterTargetType("serviceApi")
	IpFilterTargetTypeDeviceApi  = IpFilterTargetType("deviceApi")
)

func (IpFilterTargetType) ElementType() reflect.Type {
	return reflect.TypeOf((*IpFilterTargetType)(nil)).Elem()
}

func (e IpFilterTargetType) ToIpFilterTargetTypeOutput() IpFilterTargetTypeOutput {
	return pulumi.ToOutput(e).(IpFilterTargetTypeOutput)
}

func (e IpFilterTargetType) ToIpFilterTargetTypeOutputWithContext(ctx context.Context) IpFilterTargetTypeOutput {
	return pulumi.ToOutputWithContext(ctx, e).(IpFilterTargetTypeOutput)
}

func (e IpFilterTargetType) ToIpFilterTargetTypePtrOutput() IpFilterTargetTypePtrOutput {
	return e.ToIpFilterTargetTypePtrOutputWithContext(context.Background())
}

func (e IpFilterTargetType) ToIpFilterTargetTypePtrOutputWithContext(ctx context.Context) IpFilterTargetTypePtrOutput {
	return IpFilterTargetType(e).ToIpFilterTargetTypeOutputWithContext(ctx).ToIpFilterTargetTypePtrOutputWithContext(ctx)
}

func (e IpFilterTargetType) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e IpFilterTargetType) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e IpFilterTargetType) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e IpFilterTargetType) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type IpFilterTargetTypeOutput struct{ *pulumi.OutputState }

func (IpFilterTargetTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IpFilterTargetType)(nil)).Elem()
}

func (o IpFilterTargetTypeOutput) ToIpFilterTargetTypeOutput() IpFilterTargetTypeOutput {
	return o
}

func (o IpFilterTargetTypeOutput) ToIpFilterTargetTypeOutputWithContext(ctx context.Context) IpFilterTargetTypeOutput {
	return o
}

func (o IpFilterTargetTypeOutput) ToIpFilterTargetTypePtrOutput() IpFilterTargetTypePtrOutput {
	return o.ToIpFilterTargetTypePtrOutputWithContext(context.Background())
}

func (o IpFilterTargetTypeOutput) ToIpFilterTargetTypePtrOutputWithContext(ctx context.Context) IpFilterTargetTypePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v IpFilterTargetType) *IpFilterTargetType {
		return &v
	}).(IpFilterTargetTypePtrOutput)
}

func (o IpFilterTargetTypeOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o IpFilterTargetTypeOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e IpFilterTargetType) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o IpFilterTargetTypeOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o IpFilterTargetTypeOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e IpFilterTargetType) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type IpFilterTargetTypePtrOutput struct{ *pulumi.OutputState }

func (IpFilterTargetTypePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**IpFilterTargetType)(nil)).Elem()
}

func (o IpFilterTargetTypePtrOutput) ToIpFilterTargetTypePtrOutput() IpFilterTargetTypePtrOutput {
	return o
}

func (o IpFilterTargetTypePtrOutput) ToIpFilterTargetTypePtrOutputWithContext(ctx context.Context) IpFilterTargetTypePtrOutput {
	return o
}

func (o IpFilterTargetTypePtrOutput) Elem() IpFilterTargetTypeOutput {
	return o.ApplyT(func(v *IpFilterTargetType) IpFilterTargetType {
		if v != nil {
			return *v
		}
		var ret IpFilterTargetType
		return ret
	}).(IpFilterTargetTypeOutput)
}

func (o IpFilterTargetTypePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o IpFilterTargetTypePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *IpFilterTargetType) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// IpFilterTargetTypeInput is an input type that accepts IpFilterTargetTypeArgs and IpFilterTargetTypeOutput values.
// You can construct a concrete instance of `IpFilterTargetTypeInput` via:
//
//	IpFilterTargetTypeArgs{...}
type IpFilterTargetTypeInput interface {
	pulumi.Input

	ToIpFilterTargetTypeOutput() IpFilterTargetTypeOutput
	ToIpFilterTargetTypeOutputWithContext(context.Context) IpFilterTargetTypeOutput
}

var ipFilterTargetTypePtrType = reflect.TypeOf((**IpFilterTargetType)(nil)).Elem()

type IpFilterTargetTypePtrInput interface {
	pulumi.Input

	ToIpFilterTargetTypePtrOutput() IpFilterTargetTypePtrOutput
	ToIpFilterTargetTypePtrOutputWithContext(context.Context) IpFilterTargetTypePtrOutput
}

type ipFilterTargetTypePtr string

func IpFilterTargetTypePtr(v string) IpFilterTargetTypePtrInput {
	return (*ipFilterTargetTypePtr)(&v)
}

func (*ipFilterTargetTypePtr) ElementType() reflect.Type {
	return ipFilterTargetTypePtrType
}

func (in *ipFilterTargetTypePtr) ToIpFilterTargetTypePtrOutput() IpFilterTargetTypePtrOutput {
	return pulumi.ToOutput(in).(IpFilterTargetTypePtrOutput)
}

func (in *ipFilterTargetTypePtr) ToIpFilterTargetTypePtrOutputWithContext(ctx context.Context) IpFilterTargetTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(IpFilterTargetTypePtrOutput)
}

// The status of a private endpoint connection
type PrivateLinkServiceConnectionStatus string

const (
	PrivateLinkServiceConnectionStatusPending      = PrivateLinkServiceConnectionStatus("Pending")
	PrivateLinkServiceConnectionStatusApproved     = PrivateLinkServiceConnectionStatus("Approved")
	PrivateLinkServiceConnectionStatusRejected     = PrivateLinkServiceConnectionStatus("Rejected")
	PrivateLinkServiceConnectionStatusDisconnected = PrivateLinkServiceConnectionStatus("Disconnected")
)

// Whether requests from Public Network are allowed
type PublicNetworkAccess string

const (
	PublicNetworkAccessEnabled  = PublicNetworkAccess("Enabled")
	PublicNetworkAccessDisabled = PublicNetworkAccess("Disabled")
)

// Current state of the provisioning service.
type State string

const (
	StateActivating       = State("Activating")
	StateActive           = State("Active")
	StateDeleting         = State("Deleting")
	StateDeleted          = State("Deleted")
	StateActivationFailed = State("ActivationFailed")
	StateDeletionFailed   = State("DeletionFailed")
	StateTransitioning    = State("Transitioning")
	StateSuspending       = State("Suspending")
	StateSuspended        = State("Suspended")
	StateResuming         = State("Resuming")
	StateFailingOver      = State("FailingOver")
	StateFailoverFailed   = State("FailoverFailed")
)

func init() {
	pulumi.RegisterOutputType(IpFilterActionTypeOutput{})
	pulumi.RegisterOutputType(IpFilterActionTypePtrOutput{})
	pulumi.RegisterOutputType(IpFilterTargetTypeOutput{})
	pulumi.RegisterOutputType(IpFilterTargetTypePtrOutput{})
}
