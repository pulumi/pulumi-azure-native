// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package healthcareapis

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type FhirService struct {
	pulumi.CustomResourceState

	AccessPolicies              FhirServiceAccessPolicyEntryResponseArrayOutput         `pulumi:"accessPolicies"`
	AcrConfiguration            FhirServiceAcrConfigurationResponsePtrOutput            `pulumi:"acrConfiguration"`
	AuthenticationConfiguration FhirServiceAuthenticationConfigurationResponsePtrOutput `pulumi:"authenticationConfiguration"`
	CorsConfiguration           FhirServiceCorsConfigurationResponsePtrOutput           `pulumi:"corsConfiguration"`
	Etag                        pulumi.StringPtrOutput                                  `pulumi:"etag"`
	ExportConfiguration         FhirServiceExportConfigurationResponsePtrOutput         `pulumi:"exportConfiguration"`
	Identity                    ServiceManagedIdentityResponseIdentityPtrOutput         `pulumi:"identity"`
	Kind                        pulumi.StringPtrOutput                                  `pulumi:"kind"`
	Location                    pulumi.StringPtrOutput                                  `pulumi:"location"`
	Name                        pulumi.StringOutput                                     `pulumi:"name"`
	ProvisioningState           pulumi.StringOutput                                     `pulumi:"provisioningState"`
	SystemData                  SystemDataResponseOutput                                `pulumi:"systemData"`
	Tags                        pulumi.StringMapOutput                                  `pulumi:"tags"`
	Type                        pulumi.StringOutput                                     `pulumi:"type"`
}

// NewFhirService registers a new resource with the given unique name, arguments, and options.
func NewFhirService(ctx *pulumi.Context,
	name string, args *FhirServiceArgs, opts ...pulumi.ResourceOption) (*FhirService, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ResourceGroupName == nil {
		return nil, errors.New("invalid value for required argument 'ResourceGroupName'")
	}
	if args.WorkspaceName == nil {
		return nil, errors.New("invalid value for required argument 'WorkspaceName'")
	}
	aliases := pulumi.Aliases([]pulumi.Alias{
		{
			Type: pulumi.String("azure-nextgen:healthcareapis:FhirService"),
		},
		{
			Type: pulumi.String("azure-native:healthcareapis/v20210601preview:FhirService"),
		},
		{
			Type: pulumi.String("azure-nextgen:healthcareapis/v20210601preview:FhirService"),
		},
	})
	opts = append(opts, aliases)
	var resource FhirService
	err := ctx.RegisterResource("azure-native:healthcareapis:FhirService", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetFhirService gets an existing FhirService resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetFhirService(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *FhirServiceState, opts ...pulumi.ResourceOption) (*FhirService, error) {
	var resource FhirService
	err := ctx.ReadResource("azure-native:healthcareapis:FhirService", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering FhirService resources.
type fhirServiceState struct {
}

type FhirServiceState struct {
}

func (FhirServiceState) ElementType() reflect.Type {
	return reflect.TypeOf((*fhirServiceState)(nil)).Elem()
}

type fhirServiceArgs struct {
	AccessPolicies              []FhirServiceAccessPolicyEntry          `pulumi:"accessPolicies"`
	AcrConfiguration            *FhirServiceAcrConfiguration            `pulumi:"acrConfiguration"`
	AuthenticationConfiguration *FhirServiceAuthenticationConfiguration `pulumi:"authenticationConfiguration"`
	CorsConfiguration           *FhirServiceCorsConfiguration           `pulumi:"corsConfiguration"`
	Etag                        *string                                 `pulumi:"etag"`
	ExportConfiguration         *FhirServiceExportConfiguration         `pulumi:"exportConfiguration"`
	FhirServiceName             *string                                 `pulumi:"fhirServiceName"`
	Identity                    *ServiceManagedIdentityIdentity         `pulumi:"identity"`
	Kind                        *string                                 `pulumi:"kind"`
	Location                    *string                                 `pulumi:"location"`
	ResourceGroupName           string                                  `pulumi:"resourceGroupName"`
	Tags                        map[string]string                       `pulumi:"tags"`
	WorkspaceName               string                                  `pulumi:"workspaceName"`
}

// The set of arguments for constructing a FhirService resource.
type FhirServiceArgs struct {
	AccessPolicies              FhirServiceAccessPolicyEntryArrayInput
	AcrConfiguration            FhirServiceAcrConfigurationPtrInput
	AuthenticationConfiguration FhirServiceAuthenticationConfigurationPtrInput
	CorsConfiguration           FhirServiceCorsConfigurationPtrInput
	Etag                        pulumi.StringPtrInput
	ExportConfiguration         FhirServiceExportConfigurationPtrInput
	FhirServiceName             pulumi.StringPtrInput
	Identity                    ServiceManagedIdentityIdentityPtrInput
	Kind                        pulumi.StringPtrInput
	Location                    pulumi.StringPtrInput
	ResourceGroupName           pulumi.StringInput
	Tags                        pulumi.StringMapInput
	WorkspaceName               pulumi.StringInput
}

func (FhirServiceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*fhirServiceArgs)(nil)).Elem()
}

type FhirServiceInput interface {
	pulumi.Input

	ToFhirServiceOutput() FhirServiceOutput
	ToFhirServiceOutputWithContext(ctx context.Context) FhirServiceOutput
}

func (*FhirService) ElementType() reflect.Type {
	return reflect.TypeOf((*FhirService)(nil))
}

func (i *FhirService) ToFhirServiceOutput() FhirServiceOutput {
	return i.ToFhirServiceOutputWithContext(context.Background())
}

func (i *FhirService) ToFhirServiceOutputWithContext(ctx context.Context) FhirServiceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FhirServiceOutput)
}

type FhirServiceOutput struct{ *pulumi.OutputState }

func (FhirServiceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FhirService)(nil))
}

func (o FhirServiceOutput) ToFhirServiceOutput() FhirServiceOutput {
	return o
}

func (o FhirServiceOutput) ToFhirServiceOutputWithContext(ctx context.Context) FhirServiceOutput {
	return o
}

func init() {
	pulumi.RegisterOutputType(FhirServiceOutput{})
}
