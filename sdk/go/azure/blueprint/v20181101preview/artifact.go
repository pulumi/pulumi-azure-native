// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v20181101preview

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// Represents a blueprint artifact.
type Artifact struct {
	pulumi.CustomResourceState

	// Specifies the kind of blueprint artifact.
	Kind pulumi.StringOutput `pulumi:"kind"`
	// Name of this resource.
	Name pulumi.StringOutput `pulumi:"name"`
	// Type of this resource.
	Type pulumi.StringOutput `pulumi:"type"`
}

// NewArtifact registers a new resource with the given unique name, arguments, and options.
func NewArtifact(ctx *pulumi.Context,
	name string, args *ArtifactArgs, opts ...pulumi.ResourceOption) (*Artifact, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.BlueprintName == nil {
		return nil, errors.New("invalid value for required argument 'BlueprintName'")
	}
	if args.Kind == nil {
		return nil, errors.New("invalid value for required argument 'Kind'")
	}
	if args.ResourceScope == nil {
		return nil, errors.New("invalid value for required argument 'ResourceScope'")
	}
	aliases := pulumi.Aliases([]pulumi.Alias{
		{
			Type: pulumi.String("azure-nextgen:blueprint:Artifact"),
		},
	})
	opts = append(opts, aliases)
	var resource Artifact
	err := ctx.RegisterResource("azure-nextgen:blueprint/v20181101preview:Artifact", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetArtifact gets an existing Artifact resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetArtifact(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ArtifactState, opts ...pulumi.ResourceOption) (*Artifact, error) {
	var resource Artifact
	err := ctx.ReadResource("azure-nextgen:blueprint/v20181101preview:Artifact", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Artifact resources.
type artifactState struct {
	// Specifies the kind of blueprint artifact.
	Kind *string `pulumi:"kind"`
	// Name of this resource.
	Name *string `pulumi:"name"`
	// Type of this resource.
	Type *string `pulumi:"type"`
}

type ArtifactState struct {
	// Specifies the kind of blueprint artifact.
	Kind pulumi.StringPtrInput
	// Name of this resource.
	Name pulumi.StringPtrInput
	// Type of this resource.
	Type pulumi.StringPtrInput
}

func (ArtifactState) ElementType() reflect.Type {
	return reflect.TypeOf((*artifactState)(nil)).Elem()
}

type artifactArgs struct {
	// Name of the blueprint artifact.
	ArtifactName *string `pulumi:"artifactName"`
	// Name of the blueprint definition.
	BlueprintName string `pulumi:"blueprintName"`
	// Specifies the kind of blueprint artifact.
	Kind string `pulumi:"kind"`
	// The scope of the resource. Valid scopes are: management group (format: '/providers/Microsoft.Management/managementGroups/{managementGroup}'), subscription (format: '/subscriptions/{subscriptionId}').
	ResourceScope string `pulumi:"resourceScope"`
}

// The set of arguments for constructing a Artifact resource.
type ArtifactArgs struct {
	// Name of the blueprint artifact.
	ArtifactName pulumi.StringPtrInput
	// Name of the blueprint definition.
	BlueprintName pulumi.StringInput
	// Specifies the kind of blueprint artifact.
	Kind pulumi.StringInput
	// The scope of the resource. Valid scopes are: management group (format: '/providers/Microsoft.Management/managementGroups/{managementGroup}'), subscription (format: '/subscriptions/{subscriptionId}').
	ResourceScope pulumi.StringInput
}

func (ArtifactArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*artifactArgs)(nil)).Elem()
}

type ArtifactInput interface {
	pulumi.Input

	ToArtifactOutput() ArtifactOutput
	ToArtifactOutputWithContext(ctx context.Context) ArtifactOutput
}

func (*Artifact) ElementType() reflect.Type {
	return reflect.TypeOf((*Artifact)(nil))
}

func (i *Artifact) ToArtifactOutput() ArtifactOutput {
	return i.ToArtifactOutputWithContext(context.Background())
}

func (i *Artifact) ToArtifactOutputWithContext(ctx context.Context) ArtifactOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ArtifactOutput)
}

type ArtifactOutput struct {
	*pulumi.OutputState
}

func (ArtifactOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Artifact)(nil))
}

func (o ArtifactOutput) ToArtifactOutput() ArtifactOutput {
	return o
}

func (o ArtifactOutput) ToArtifactOutputWithContext(ctx context.Context) ArtifactOutput {
	return o
}

func init() {
	pulumi.RegisterOutputType(ArtifactOutput{})
}
