// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v20181101preview

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Defines how resources deployed by a blueprint assignment are locked.
type AssignmentLockSettings struct {
	// List of management operations that are excluded from blueprint locks. Up to 200 actions are permitted. If the lock mode is set to 'AllResourcesReadOnly', then the following actions are automatically appended to 'excludedActions': '*/read', 'Microsoft.Network/virtualNetworks/subnets/join/action' and 'Microsoft.Authorization/locks/delete'. If the lock mode is set to 'AllResourcesDoNotDelete', then the following actions are automatically appended to 'excludedActions': 'Microsoft.Authorization/locks/delete'. Duplicate actions will get removed.
	ExcludedActions []string `pulumi:"excludedActions"`
	// List of AAD principals excluded from blueprint locks. Up to 5 principals are permitted.
	ExcludedPrincipals []string `pulumi:"excludedPrincipals"`
	// Lock mode.
	Mode *string `pulumi:"mode"`
}

// AssignmentLockSettingsInput is an input type that accepts AssignmentLockSettingsArgs and AssignmentLockSettingsOutput values.
// You can construct a concrete instance of `AssignmentLockSettingsInput` via:
//
//	AssignmentLockSettingsArgs{...}
type AssignmentLockSettingsInput interface {
	pulumi.Input

	ToAssignmentLockSettingsOutput() AssignmentLockSettingsOutput
	ToAssignmentLockSettingsOutputWithContext(context.Context) AssignmentLockSettingsOutput
}

// Defines how resources deployed by a blueprint assignment are locked.
type AssignmentLockSettingsArgs struct {
	// List of management operations that are excluded from blueprint locks. Up to 200 actions are permitted. If the lock mode is set to 'AllResourcesReadOnly', then the following actions are automatically appended to 'excludedActions': '*/read', 'Microsoft.Network/virtualNetworks/subnets/join/action' and 'Microsoft.Authorization/locks/delete'. If the lock mode is set to 'AllResourcesDoNotDelete', then the following actions are automatically appended to 'excludedActions': 'Microsoft.Authorization/locks/delete'. Duplicate actions will get removed.
	ExcludedActions pulumi.StringArrayInput `pulumi:"excludedActions"`
	// List of AAD principals excluded from blueprint locks. Up to 5 principals are permitted.
	ExcludedPrincipals pulumi.StringArrayInput `pulumi:"excludedPrincipals"`
	// Lock mode.
	Mode pulumi.StringPtrInput `pulumi:"mode"`
}

func (AssignmentLockSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AssignmentLockSettings)(nil)).Elem()
}

func (i AssignmentLockSettingsArgs) ToAssignmentLockSettingsOutput() AssignmentLockSettingsOutput {
	return i.ToAssignmentLockSettingsOutputWithContext(context.Background())
}

func (i AssignmentLockSettingsArgs) ToAssignmentLockSettingsOutputWithContext(ctx context.Context) AssignmentLockSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AssignmentLockSettingsOutput)
}

func (i AssignmentLockSettingsArgs) ToAssignmentLockSettingsPtrOutput() AssignmentLockSettingsPtrOutput {
	return i.ToAssignmentLockSettingsPtrOutputWithContext(context.Background())
}

func (i AssignmentLockSettingsArgs) ToAssignmentLockSettingsPtrOutputWithContext(ctx context.Context) AssignmentLockSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AssignmentLockSettingsOutput).ToAssignmentLockSettingsPtrOutputWithContext(ctx)
}

// AssignmentLockSettingsPtrInput is an input type that accepts AssignmentLockSettingsArgs, AssignmentLockSettingsPtr and AssignmentLockSettingsPtrOutput values.
// You can construct a concrete instance of `AssignmentLockSettingsPtrInput` via:
//
//	        AssignmentLockSettingsArgs{...}
//
//	or:
//
//	        nil
type AssignmentLockSettingsPtrInput interface {
	pulumi.Input

	ToAssignmentLockSettingsPtrOutput() AssignmentLockSettingsPtrOutput
	ToAssignmentLockSettingsPtrOutputWithContext(context.Context) AssignmentLockSettingsPtrOutput
}

type assignmentLockSettingsPtrType AssignmentLockSettingsArgs

func AssignmentLockSettingsPtr(v *AssignmentLockSettingsArgs) AssignmentLockSettingsPtrInput {
	return (*assignmentLockSettingsPtrType)(v)
}

func (*assignmentLockSettingsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AssignmentLockSettings)(nil)).Elem()
}

func (i *assignmentLockSettingsPtrType) ToAssignmentLockSettingsPtrOutput() AssignmentLockSettingsPtrOutput {
	return i.ToAssignmentLockSettingsPtrOutputWithContext(context.Background())
}

func (i *assignmentLockSettingsPtrType) ToAssignmentLockSettingsPtrOutputWithContext(ctx context.Context) AssignmentLockSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AssignmentLockSettingsPtrOutput)
}

// Defines how resources deployed by a blueprint assignment are locked.
type AssignmentLockSettingsOutput struct{ *pulumi.OutputState }

func (AssignmentLockSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AssignmentLockSettings)(nil)).Elem()
}

func (o AssignmentLockSettingsOutput) ToAssignmentLockSettingsOutput() AssignmentLockSettingsOutput {
	return o
}

func (o AssignmentLockSettingsOutput) ToAssignmentLockSettingsOutputWithContext(ctx context.Context) AssignmentLockSettingsOutput {
	return o
}

func (o AssignmentLockSettingsOutput) ToAssignmentLockSettingsPtrOutput() AssignmentLockSettingsPtrOutput {
	return o.ToAssignmentLockSettingsPtrOutputWithContext(context.Background())
}

func (o AssignmentLockSettingsOutput) ToAssignmentLockSettingsPtrOutputWithContext(ctx context.Context) AssignmentLockSettingsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v AssignmentLockSettings) *AssignmentLockSettings {
		return &v
	}).(AssignmentLockSettingsPtrOutput)
}

// List of management operations that are excluded from blueprint locks. Up to 200 actions are permitted. If the lock mode is set to 'AllResourcesReadOnly', then the following actions are automatically appended to 'excludedActions': '*/read', 'Microsoft.Network/virtualNetworks/subnets/join/action' and 'Microsoft.Authorization/locks/delete'. If the lock mode is set to 'AllResourcesDoNotDelete', then the following actions are automatically appended to 'excludedActions': 'Microsoft.Authorization/locks/delete'. Duplicate actions will get removed.
func (o AssignmentLockSettingsOutput) ExcludedActions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v AssignmentLockSettings) []string { return v.ExcludedActions }).(pulumi.StringArrayOutput)
}

// List of AAD principals excluded from blueprint locks. Up to 5 principals are permitted.
func (o AssignmentLockSettingsOutput) ExcludedPrincipals() pulumi.StringArrayOutput {
	return o.ApplyT(func(v AssignmentLockSettings) []string { return v.ExcludedPrincipals }).(pulumi.StringArrayOutput)
}

// Lock mode.
func (o AssignmentLockSettingsOutput) Mode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AssignmentLockSettings) *string { return v.Mode }).(pulumi.StringPtrOutput)
}

type AssignmentLockSettingsPtrOutput struct{ *pulumi.OutputState }

func (AssignmentLockSettingsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AssignmentLockSettings)(nil)).Elem()
}

func (o AssignmentLockSettingsPtrOutput) ToAssignmentLockSettingsPtrOutput() AssignmentLockSettingsPtrOutput {
	return o
}

func (o AssignmentLockSettingsPtrOutput) ToAssignmentLockSettingsPtrOutputWithContext(ctx context.Context) AssignmentLockSettingsPtrOutput {
	return o
}

func (o AssignmentLockSettingsPtrOutput) Elem() AssignmentLockSettingsOutput {
	return o.ApplyT(func(v *AssignmentLockSettings) AssignmentLockSettings {
		if v != nil {
			return *v
		}
		var ret AssignmentLockSettings
		return ret
	}).(AssignmentLockSettingsOutput)
}

// List of management operations that are excluded from blueprint locks. Up to 200 actions are permitted. If the lock mode is set to 'AllResourcesReadOnly', then the following actions are automatically appended to 'excludedActions': '*/read', 'Microsoft.Network/virtualNetworks/subnets/join/action' and 'Microsoft.Authorization/locks/delete'. If the lock mode is set to 'AllResourcesDoNotDelete', then the following actions are automatically appended to 'excludedActions': 'Microsoft.Authorization/locks/delete'. Duplicate actions will get removed.
func (o AssignmentLockSettingsPtrOutput) ExcludedActions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *AssignmentLockSettings) []string {
		if v == nil {
			return nil
		}
		return v.ExcludedActions
	}).(pulumi.StringArrayOutput)
}

// List of AAD principals excluded from blueprint locks. Up to 5 principals are permitted.
func (o AssignmentLockSettingsPtrOutput) ExcludedPrincipals() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *AssignmentLockSettings) []string {
		if v == nil {
			return nil
		}
		return v.ExcludedPrincipals
	}).(pulumi.StringArrayOutput)
}

// Lock mode.
func (o AssignmentLockSettingsPtrOutput) Mode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AssignmentLockSettings) *string {
		if v == nil {
			return nil
		}
		return v.Mode
	}).(pulumi.StringPtrOutput)
}

// Defines how resources deployed by a blueprint assignment are locked.
type AssignmentLockSettingsResponse struct {
	// List of management operations that are excluded from blueprint locks. Up to 200 actions are permitted. If the lock mode is set to 'AllResourcesReadOnly', then the following actions are automatically appended to 'excludedActions': '*/read', 'Microsoft.Network/virtualNetworks/subnets/join/action' and 'Microsoft.Authorization/locks/delete'. If the lock mode is set to 'AllResourcesDoNotDelete', then the following actions are automatically appended to 'excludedActions': 'Microsoft.Authorization/locks/delete'. Duplicate actions will get removed.
	ExcludedActions []string `pulumi:"excludedActions"`
	// List of AAD principals excluded from blueprint locks. Up to 5 principals are permitted.
	ExcludedPrincipals []string `pulumi:"excludedPrincipals"`
	// Lock mode.
	Mode *string `pulumi:"mode"`
}

// Defines how resources deployed by a blueprint assignment are locked.
type AssignmentLockSettingsResponseOutput struct{ *pulumi.OutputState }

func (AssignmentLockSettingsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AssignmentLockSettingsResponse)(nil)).Elem()
}

func (o AssignmentLockSettingsResponseOutput) ToAssignmentLockSettingsResponseOutput() AssignmentLockSettingsResponseOutput {
	return o
}

func (o AssignmentLockSettingsResponseOutput) ToAssignmentLockSettingsResponseOutputWithContext(ctx context.Context) AssignmentLockSettingsResponseOutput {
	return o
}

// List of management operations that are excluded from blueprint locks. Up to 200 actions are permitted. If the lock mode is set to 'AllResourcesReadOnly', then the following actions are automatically appended to 'excludedActions': '*/read', 'Microsoft.Network/virtualNetworks/subnets/join/action' and 'Microsoft.Authorization/locks/delete'. If the lock mode is set to 'AllResourcesDoNotDelete', then the following actions are automatically appended to 'excludedActions': 'Microsoft.Authorization/locks/delete'. Duplicate actions will get removed.
func (o AssignmentLockSettingsResponseOutput) ExcludedActions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v AssignmentLockSettingsResponse) []string { return v.ExcludedActions }).(pulumi.StringArrayOutput)
}

// List of AAD principals excluded from blueprint locks. Up to 5 principals are permitted.
func (o AssignmentLockSettingsResponseOutput) ExcludedPrincipals() pulumi.StringArrayOutput {
	return o.ApplyT(func(v AssignmentLockSettingsResponse) []string { return v.ExcludedPrincipals }).(pulumi.StringArrayOutput)
}

// Lock mode.
func (o AssignmentLockSettingsResponseOutput) Mode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AssignmentLockSettingsResponse) *string { return v.Mode }).(pulumi.StringPtrOutput)
}

type AssignmentLockSettingsResponsePtrOutput struct{ *pulumi.OutputState }

func (AssignmentLockSettingsResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AssignmentLockSettingsResponse)(nil)).Elem()
}

func (o AssignmentLockSettingsResponsePtrOutput) ToAssignmentLockSettingsResponsePtrOutput() AssignmentLockSettingsResponsePtrOutput {
	return o
}

func (o AssignmentLockSettingsResponsePtrOutput) ToAssignmentLockSettingsResponsePtrOutputWithContext(ctx context.Context) AssignmentLockSettingsResponsePtrOutput {
	return o
}

func (o AssignmentLockSettingsResponsePtrOutput) Elem() AssignmentLockSettingsResponseOutput {
	return o.ApplyT(func(v *AssignmentLockSettingsResponse) AssignmentLockSettingsResponse {
		if v != nil {
			return *v
		}
		var ret AssignmentLockSettingsResponse
		return ret
	}).(AssignmentLockSettingsResponseOutput)
}

// List of management operations that are excluded from blueprint locks. Up to 200 actions are permitted. If the lock mode is set to 'AllResourcesReadOnly', then the following actions are automatically appended to 'excludedActions': '*/read', 'Microsoft.Network/virtualNetworks/subnets/join/action' and 'Microsoft.Authorization/locks/delete'. If the lock mode is set to 'AllResourcesDoNotDelete', then the following actions are automatically appended to 'excludedActions': 'Microsoft.Authorization/locks/delete'. Duplicate actions will get removed.
func (o AssignmentLockSettingsResponsePtrOutput) ExcludedActions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *AssignmentLockSettingsResponse) []string {
		if v == nil {
			return nil
		}
		return v.ExcludedActions
	}).(pulumi.StringArrayOutput)
}

// List of AAD principals excluded from blueprint locks. Up to 5 principals are permitted.
func (o AssignmentLockSettingsResponsePtrOutput) ExcludedPrincipals() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *AssignmentLockSettingsResponse) []string {
		if v == nil {
			return nil
		}
		return v.ExcludedPrincipals
	}).(pulumi.StringArrayOutput)
}

// Lock mode.
func (o AssignmentLockSettingsResponsePtrOutput) Mode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AssignmentLockSettingsResponse) *string {
		if v == nil {
			return nil
		}
		return v.Mode
	}).(pulumi.StringPtrOutput)
}

// The status of a blueprint assignment. This field is readonly.
type AssignmentStatusResponse struct {
	// Last modified time of this blueprint definition.
	LastModified string `pulumi:"lastModified"`
	// List of resources that were created by the blueprint assignment.
	ManagedResources []string `pulumi:"managedResources"`
	// Creation time of this blueprint definition.
	TimeCreated string `pulumi:"timeCreated"`
}

// The status of a blueprint assignment. This field is readonly.
type AssignmentStatusResponseOutput struct{ *pulumi.OutputState }

func (AssignmentStatusResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AssignmentStatusResponse)(nil)).Elem()
}

func (o AssignmentStatusResponseOutput) ToAssignmentStatusResponseOutput() AssignmentStatusResponseOutput {
	return o
}

func (o AssignmentStatusResponseOutput) ToAssignmentStatusResponseOutputWithContext(ctx context.Context) AssignmentStatusResponseOutput {
	return o
}

// Last modified time of this blueprint definition.
func (o AssignmentStatusResponseOutput) LastModified() pulumi.StringOutput {
	return o.ApplyT(func(v AssignmentStatusResponse) string { return v.LastModified }).(pulumi.StringOutput)
}

// List of resources that were created by the blueprint assignment.
func (o AssignmentStatusResponseOutput) ManagedResources() pulumi.StringArrayOutput {
	return o.ApplyT(func(v AssignmentStatusResponse) []string { return v.ManagedResources }).(pulumi.StringArrayOutput)
}

// Creation time of this blueprint definition.
func (o AssignmentStatusResponseOutput) TimeCreated() pulumi.StringOutput {
	return o.ApplyT(func(v AssignmentStatusResponse) string { return v.TimeCreated }).(pulumi.StringOutput)
}

// The status of the blueprint. This field is readonly.
type BlueprintStatusResponse struct {
	// Last modified time of this blueprint definition.
	LastModified string `pulumi:"lastModified"`
	// Creation time of this blueprint definition.
	TimeCreated string `pulumi:"timeCreated"`
}

// The status of the blueprint. This field is readonly.
type BlueprintStatusResponseOutput struct{ *pulumi.OutputState }

func (BlueprintStatusResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BlueprintStatusResponse)(nil)).Elem()
}

func (o BlueprintStatusResponseOutput) ToBlueprintStatusResponseOutput() BlueprintStatusResponseOutput {
	return o
}

func (o BlueprintStatusResponseOutput) ToBlueprintStatusResponseOutputWithContext(ctx context.Context) BlueprintStatusResponseOutput {
	return o
}

// Last modified time of this blueprint definition.
func (o BlueprintStatusResponseOutput) LastModified() pulumi.StringOutput {
	return o.ApplyT(func(v BlueprintStatusResponse) string { return v.LastModified }).(pulumi.StringOutput)
}

// Creation time of this blueprint definition.
func (o BlueprintStatusResponseOutput) TimeCreated() pulumi.StringOutput {
	return o.ApplyT(func(v BlueprintStatusResponse) string { return v.TimeCreated }).(pulumi.StringOutput)
}

// Specifies the link to a Key Vault.
type KeyVaultReference struct {
	// Azure resource ID of the Key Vault.
	Id string `pulumi:"id"`
}

// KeyVaultReferenceInput is an input type that accepts KeyVaultReferenceArgs and KeyVaultReferenceOutput values.
// You can construct a concrete instance of `KeyVaultReferenceInput` via:
//
//	KeyVaultReferenceArgs{...}
type KeyVaultReferenceInput interface {
	pulumi.Input

	ToKeyVaultReferenceOutput() KeyVaultReferenceOutput
	ToKeyVaultReferenceOutputWithContext(context.Context) KeyVaultReferenceOutput
}

// Specifies the link to a Key Vault.
type KeyVaultReferenceArgs struct {
	// Azure resource ID of the Key Vault.
	Id pulumi.StringInput `pulumi:"id"`
}

func (KeyVaultReferenceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KeyVaultReference)(nil)).Elem()
}

func (i KeyVaultReferenceArgs) ToKeyVaultReferenceOutput() KeyVaultReferenceOutput {
	return i.ToKeyVaultReferenceOutputWithContext(context.Background())
}

func (i KeyVaultReferenceArgs) ToKeyVaultReferenceOutputWithContext(ctx context.Context) KeyVaultReferenceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KeyVaultReferenceOutput)
}

func (i KeyVaultReferenceArgs) ToKeyVaultReferencePtrOutput() KeyVaultReferencePtrOutput {
	return i.ToKeyVaultReferencePtrOutputWithContext(context.Background())
}

func (i KeyVaultReferenceArgs) ToKeyVaultReferencePtrOutputWithContext(ctx context.Context) KeyVaultReferencePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KeyVaultReferenceOutput).ToKeyVaultReferencePtrOutputWithContext(ctx)
}

// KeyVaultReferencePtrInput is an input type that accepts KeyVaultReferenceArgs, KeyVaultReferencePtr and KeyVaultReferencePtrOutput values.
// You can construct a concrete instance of `KeyVaultReferencePtrInput` via:
//
//	        KeyVaultReferenceArgs{...}
//
//	or:
//
//	        nil
type KeyVaultReferencePtrInput interface {
	pulumi.Input

	ToKeyVaultReferencePtrOutput() KeyVaultReferencePtrOutput
	ToKeyVaultReferencePtrOutputWithContext(context.Context) KeyVaultReferencePtrOutput
}

type keyVaultReferencePtrType KeyVaultReferenceArgs

func KeyVaultReferencePtr(v *KeyVaultReferenceArgs) KeyVaultReferencePtrInput {
	return (*keyVaultReferencePtrType)(v)
}

func (*keyVaultReferencePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**KeyVaultReference)(nil)).Elem()
}

func (i *keyVaultReferencePtrType) ToKeyVaultReferencePtrOutput() KeyVaultReferencePtrOutput {
	return i.ToKeyVaultReferencePtrOutputWithContext(context.Background())
}

func (i *keyVaultReferencePtrType) ToKeyVaultReferencePtrOutputWithContext(ctx context.Context) KeyVaultReferencePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KeyVaultReferencePtrOutput)
}

// Specifies the link to a Key Vault.
type KeyVaultReferenceOutput struct{ *pulumi.OutputState }

func (KeyVaultReferenceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KeyVaultReference)(nil)).Elem()
}

func (o KeyVaultReferenceOutput) ToKeyVaultReferenceOutput() KeyVaultReferenceOutput {
	return o
}

func (o KeyVaultReferenceOutput) ToKeyVaultReferenceOutputWithContext(ctx context.Context) KeyVaultReferenceOutput {
	return o
}

func (o KeyVaultReferenceOutput) ToKeyVaultReferencePtrOutput() KeyVaultReferencePtrOutput {
	return o.ToKeyVaultReferencePtrOutputWithContext(context.Background())
}

func (o KeyVaultReferenceOutput) ToKeyVaultReferencePtrOutputWithContext(ctx context.Context) KeyVaultReferencePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v KeyVaultReference) *KeyVaultReference {
		return &v
	}).(KeyVaultReferencePtrOutput)
}

// Azure resource ID of the Key Vault.
func (o KeyVaultReferenceOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v KeyVaultReference) string { return v.Id }).(pulumi.StringOutput)
}

type KeyVaultReferencePtrOutput struct{ *pulumi.OutputState }

func (KeyVaultReferencePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KeyVaultReference)(nil)).Elem()
}

func (o KeyVaultReferencePtrOutput) ToKeyVaultReferencePtrOutput() KeyVaultReferencePtrOutput {
	return o
}

func (o KeyVaultReferencePtrOutput) ToKeyVaultReferencePtrOutputWithContext(ctx context.Context) KeyVaultReferencePtrOutput {
	return o
}

func (o KeyVaultReferencePtrOutput) Elem() KeyVaultReferenceOutput {
	return o.ApplyT(func(v *KeyVaultReference) KeyVaultReference {
		if v != nil {
			return *v
		}
		var ret KeyVaultReference
		return ret
	}).(KeyVaultReferenceOutput)
}

// Azure resource ID of the Key Vault.
func (o KeyVaultReferencePtrOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KeyVaultReference) *string {
		if v == nil {
			return nil
		}
		return &v.Id
	}).(pulumi.StringPtrOutput)
}

// Specifies the link to a Key Vault.
type KeyVaultReferenceResponse struct {
	// Azure resource ID of the Key Vault.
	Id string `pulumi:"id"`
}

// Specifies the link to a Key Vault.
type KeyVaultReferenceResponseOutput struct{ *pulumi.OutputState }

func (KeyVaultReferenceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KeyVaultReferenceResponse)(nil)).Elem()
}

func (o KeyVaultReferenceResponseOutput) ToKeyVaultReferenceResponseOutput() KeyVaultReferenceResponseOutput {
	return o
}

func (o KeyVaultReferenceResponseOutput) ToKeyVaultReferenceResponseOutputWithContext(ctx context.Context) KeyVaultReferenceResponseOutput {
	return o
}

// Azure resource ID of the Key Vault.
func (o KeyVaultReferenceResponseOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v KeyVaultReferenceResponse) string { return v.Id }).(pulumi.StringOutput)
}

type KeyVaultReferenceResponsePtrOutput struct{ *pulumi.OutputState }

func (KeyVaultReferenceResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KeyVaultReferenceResponse)(nil)).Elem()
}

func (o KeyVaultReferenceResponsePtrOutput) ToKeyVaultReferenceResponsePtrOutput() KeyVaultReferenceResponsePtrOutput {
	return o
}

func (o KeyVaultReferenceResponsePtrOutput) ToKeyVaultReferenceResponsePtrOutputWithContext(ctx context.Context) KeyVaultReferenceResponsePtrOutput {
	return o
}

func (o KeyVaultReferenceResponsePtrOutput) Elem() KeyVaultReferenceResponseOutput {
	return o.ApplyT(func(v *KeyVaultReferenceResponse) KeyVaultReferenceResponse {
		if v != nil {
			return *v
		}
		var ret KeyVaultReferenceResponse
		return ret
	}).(KeyVaultReferenceResponseOutput)
}

// Azure resource ID of the Key Vault.
func (o KeyVaultReferenceResponsePtrOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KeyVaultReferenceResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Id
	}).(pulumi.StringPtrOutput)
}

// Managed identity generic object.
type ManagedServiceIdentity struct {
	// Azure Active Directory principal ID associated with this Identity.
	PrincipalId *string `pulumi:"principalId"`
	// ID of the Azure Active Directory.
	TenantId *string `pulumi:"tenantId"`
	// Type of the managed identity.
	Type string `pulumi:"type"`
	// The list of user-assigned managed identities associated with the resource. Key is the Azure resource Id of the managed identity.
	UserAssignedIdentities map[string]UserAssignedIdentity `pulumi:"userAssignedIdentities"`
}

// ManagedServiceIdentityInput is an input type that accepts ManagedServiceIdentityArgs and ManagedServiceIdentityOutput values.
// You can construct a concrete instance of `ManagedServiceIdentityInput` via:
//
//	ManagedServiceIdentityArgs{...}
type ManagedServiceIdentityInput interface {
	pulumi.Input

	ToManagedServiceIdentityOutput() ManagedServiceIdentityOutput
	ToManagedServiceIdentityOutputWithContext(context.Context) ManagedServiceIdentityOutput
}

// Managed identity generic object.
type ManagedServiceIdentityArgs struct {
	// Azure Active Directory principal ID associated with this Identity.
	PrincipalId pulumi.StringPtrInput `pulumi:"principalId"`
	// ID of the Azure Active Directory.
	TenantId pulumi.StringPtrInput `pulumi:"tenantId"`
	// Type of the managed identity.
	Type pulumi.StringInput `pulumi:"type"`
	// The list of user-assigned managed identities associated with the resource. Key is the Azure resource Id of the managed identity.
	UserAssignedIdentities UserAssignedIdentityMapInput `pulumi:"userAssignedIdentities"`
}

func (ManagedServiceIdentityArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedServiceIdentity)(nil)).Elem()
}

func (i ManagedServiceIdentityArgs) ToManagedServiceIdentityOutput() ManagedServiceIdentityOutput {
	return i.ToManagedServiceIdentityOutputWithContext(context.Background())
}

func (i ManagedServiceIdentityArgs) ToManagedServiceIdentityOutputWithContext(ctx context.Context) ManagedServiceIdentityOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedServiceIdentityOutput)
}

// Managed identity generic object.
type ManagedServiceIdentityOutput struct{ *pulumi.OutputState }

func (ManagedServiceIdentityOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedServiceIdentity)(nil)).Elem()
}

func (o ManagedServiceIdentityOutput) ToManagedServiceIdentityOutput() ManagedServiceIdentityOutput {
	return o
}

func (o ManagedServiceIdentityOutput) ToManagedServiceIdentityOutputWithContext(ctx context.Context) ManagedServiceIdentityOutput {
	return o
}

// Azure Active Directory principal ID associated with this Identity.
func (o ManagedServiceIdentityOutput) PrincipalId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagedServiceIdentity) *string { return v.PrincipalId }).(pulumi.StringPtrOutput)
}

// ID of the Azure Active Directory.
func (o ManagedServiceIdentityOutput) TenantId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagedServiceIdentity) *string { return v.TenantId }).(pulumi.StringPtrOutput)
}

// Type of the managed identity.
func (o ManagedServiceIdentityOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ManagedServiceIdentity) string { return v.Type }).(pulumi.StringOutput)
}

// The list of user-assigned managed identities associated with the resource. Key is the Azure resource Id of the managed identity.
func (o ManagedServiceIdentityOutput) UserAssignedIdentities() UserAssignedIdentityMapOutput {
	return o.ApplyT(func(v ManagedServiceIdentity) map[string]UserAssignedIdentity { return v.UserAssignedIdentities }).(UserAssignedIdentityMapOutput)
}

// Managed identity generic object.
type ManagedServiceIdentityResponse struct {
	// Azure Active Directory principal ID associated with this Identity.
	PrincipalId *string `pulumi:"principalId"`
	// ID of the Azure Active Directory.
	TenantId *string `pulumi:"tenantId"`
	// Type of the managed identity.
	Type string `pulumi:"type"`
	// The list of user-assigned managed identities associated with the resource. Key is the Azure resource Id of the managed identity.
	UserAssignedIdentities map[string]UserAssignedIdentityResponse `pulumi:"userAssignedIdentities"`
}

// Managed identity generic object.
type ManagedServiceIdentityResponseOutput struct{ *pulumi.OutputState }

func (ManagedServiceIdentityResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedServiceIdentityResponse)(nil)).Elem()
}

func (o ManagedServiceIdentityResponseOutput) ToManagedServiceIdentityResponseOutput() ManagedServiceIdentityResponseOutput {
	return o
}

func (o ManagedServiceIdentityResponseOutput) ToManagedServiceIdentityResponseOutputWithContext(ctx context.Context) ManagedServiceIdentityResponseOutput {
	return o
}

// Azure Active Directory principal ID associated with this Identity.
func (o ManagedServiceIdentityResponseOutput) PrincipalId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagedServiceIdentityResponse) *string { return v.PrincipalId }).(pulumi.StringPtrOutput)
}

// ID of the Azure Active Directory.
func (o ManagedServiceIdentityResponseOutput) TenantId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagedServiceIdentityResponse) *string { return v.TenantId }).(pulumi.StringPtrOutput)
}

// Type of the managed identity.
func (o ManagedServiceIdentityResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ManagedServiceIdentityResponse) string { return v.Type }).(pulumi.StringOutput)
}

// The list of user-assigned managed identities associated with the resource. Key is the Azure resource Id of the managed identity.
func (o ManagedServiceIdentityResponseOutput) UserAssignedIdentities() UserAssignedIdentityResponseMapOutput {
	return o.ApplyT(func(v ManagedServiceIdentityResponse) map[string]UserAssignedIdentityResponse {
		return v.UserAssignedIdentities
	}).(UserAssignedIdentityResponseMapOutput)
}

// Represent a parameter with constrains and metadata.
type ParameterDefinition struct {
	// Array of allowed values for this parameter.
	AllowedValues []interface{} `pulumi:"allowedValues"`
	// Default Value for this parameter.
	DefaultValue interface{} `pulumi:"defaultValue"`
	// Description of this parameter/resourceGroup.
	Description *string `pulumi:"description"`
	// DisplayName of this parameter/resourceGroup.
	DisplayName *string `pulumi:"displayName"`
	// StrongType for UI to render rich experience during blueprint assignment. Supported strong types are resourceType, principalId and location.
	StrongType *string `pulumi:"strongType"`
	// Allowed data types for Resource Manager template parameters.
	Type string `pulumi:"type"`
}

// ParameterDefinitionInput is an input type that accepts ParameterDefinitionArgs and ParameterDefinitionOutput values.
// You can construct a concrete instance of `ParameterDefinitionInput` via:
//
//	ParameterDefinitionArgs{...}
type ParameterDefinitionInput interface {
	pulumi.Input

	ToParameterDefinitionOutput() ParameterDefinitionOutput
	ToParameterDefinitionOutputWithContext(context.Context) ParameterDefinitionOutput
}

// Represent a parameter with constrains and metadata.
type ParameterDefinitionArgs struct {
	// Array of allowed values for this parameter.
	AllowedValues pulumi.ArrayInput `pulumi:"allowedValues"`
	// Default Value for this parameter.
	DefaultValue pulumi.Input `pulumi:"defaultValue"`
	// Description of this parameter/resourceGroup.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// DisplayName of this parameter/resourceGroup.
	DisplayName pulumi.StringPtrInput `pulumi:"displayName"`
	// StrongType for UI to render rich experience during blueprint assignment. Supported strong types are resourceType, principalId and location.
	StrongType pulumi.StringPtrInput `pulumi:"strongType"`
	// Allowed data types for Resource Manager template parameters.
	Type pulumi.StringInput `pulumi:"type"`
}

func (ParameterDefinitionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ParameterDefinition)(nil)).Elem()
}

func (i ParameterDefinitionArgs) ToParameterDefinitionOutput() ParameterDefinitionOutput {
	return i.ToParameterDefinitionOutputWithContext(context.Background())
}

func (i ParameterDefinitionArgs) ToParameterDefinitionOutputWithContext(ctx context.Context) ParameterDefinitionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ParameterDefinitionOutput)
}

// ParameterDefinitionMapInput is an input type that accepts ParameterDefinitionMap and ParameterDefinitionMapOutput values.
// You can construct a concrete instance of `ParameterDefinitionMapInput` via:
//
//	ParameterDefinitionMap{ "key": ParameterDefinitionArgs{...} }
type ParameterDefinitionMapInput interface {
	pulumi.Input

	ToParameterDefinitionMapOutput() ParameterDefinitionMapOutput
	ToParameterDefinitionMapOutputWithContext(context.Context) ParameterDefinitionMapOutput
}

type ParameterDefinitionMap map[string]ParameterDefinitionInput

func (ParameterDefinitionMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]ParameterDefinition)(nil)).Elem()
}

func (i ParameterDefinitionMap) ToParameterDefinitionMapOutput() ParameterDefinitionMapOutput {
	return i.ToParameterDefinitionMapOutputWithContext(context.Background())
}

func (i ParameterDefinitionMap) ToParameterDefinitionMapOutputWithContext(ctx context.Context) ParameterDefinitionMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ParameterDefinitionMapOutput)
}

// Represent a parameter with constrains and metadata.
type ParameterDefinitionOutput struct{ *pulumi.OutputState }

func (ParameterDefinitionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ParameterDefinition)(nil)).Elem()
}

func (o ParameterDefinitionOutput) ToParameterDefinitionOutput() ParameterDefinitionOutput {
	return o
}

func (o ParameterDefinitionOutput) ToParameterDefinitionOutputWithContext(ctx context.Context) ParameterDefinitionOutput {
	return o
}

// Array of allowed values for this parameter.
func (o ParameterDefinitionOutput) AllowedValues() pulumi.ArrayOutput {
	return o.ApplyT(func(v ParameterDefinition) []interface{} { return v.AllowedValues }).(pulumi.ArrayOutput)
}

// Default Value for this parameter.
func (o ParameterDefinitionOutput) DefaultValue() pulumi.AnyOutput {
	return o.ApplyT(func(v ParameterDefinition) interface{} { return v.DefaultValue }).(pulumi.AnyOutput)
}

// Description of this parameter/resourceGroup.
func (o ParameterDefinitionOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ParameterDefinition) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// DisplayName of this parameter/resourceGroup.
func (o ParameterDefinitionOutput) DisplayName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ParameterDefinition) *string { return v.DisplayName }).(pulumi.StringPtrOutput)
}

// StrongType for UI to render rich experience during blueprint assignment. Supported strong types are resourceType, principalId and location.
func (o ParameterDefinitionOutput) StrongType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ParameterDefinition) *string { return v.StrongType }).(pulumi.StringPtrOutput)
}

// Allowed data types for Resource Manager template parameters.
func (o ParameterDefinitionOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ParameterDefinition) string { return v.Type }).(pulumi.StringOutput)
}

type ParameterDefinitionMapOutput struct{ *pulumi.OutputState }

func (ParameterDefinitionMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]ParameterDefinition)(nil)).Elem()
}

func (o ParameterDefinitionMapOutput) ToParameterDefinitionMapOutput() ParameterDefinitionMapOutput {
	return o
}

func (o ParameterDefinitionMapOutput) ToParameterDefinitionMapOutputWithContext(ctx context.Context) ParameterDefinitionMapOutput {
	return o
}

func (o ParameterDefinitionMapOutput) MapIndex(k pulumi.StringInput) ParameterDefinitionOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) ParameterDefinition {
		return vs[0].(map[string]ParameterDefinition)[vs[1].(string)]
	}).(ParameterDefinitionOutput)
}

// Represent a parameter with constrains and metadata.
type ParameterDefinitionResponse struct {
	// Array of allowed values for this parameter.
	AllowedValues []interface{} `pulumi:"allowedValues"`
	// Default Value for this parameter.
	DefaultValue interface{} `pulumi:"defaultValue"`
	// Description of this parameter/resourceGroup.
	Description *string `pulumi:"description"`
	// DisplayName of this parameter/resourceGroup.
	DisplayName *string `pulumi:"displayName"`
	// StrongType for UI to render rich experience during blueprint assignment. Supported strong types are resourceType, principalId and location.
	StrongType *string `pulumi:"strongType"`
	// Allowed data types for Resource Manager template parameters.
	Type string `pulumi:"type"`
}

// Represent a parameter with constrains and metadata.
type ParameterDefinitionResponseOutput struct{ *pulumi.OutputState }

func (ParameterDefinitionResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ParameterDefinitionResponse)(nil)).Elem()
}

func (o ParameterDefinitionResponseOutput) ToParameterDefinitionResponseOutput() ParameterDefinitionResponseOutput {
	return o
}

func (o ParameterDefinitionResponseOutput) ToParameterDefinitionResponseOutputWithContext(ctx context.Context) ParameterDefinitionResponseOutput {
	return o
}

// Array of allowed values for this parameter.
func (o ParameterDefinitionResponseOutput) AllowedValues() pulumi.ArrayOutput {
	return o.ApplyT(func(v ParameterDefinitionResponse) []interface{} { return v.AllowedValues }).(pulumi.ArrayOutput)
}

// Default Value for this parameter.
func (o ParameterDefinitionResponseOutput) DefaultValue() pulumi.AnyOutput {
	return o.ApplyT(func(v ParameterDefinitionResponse) interface{} { return v.DefaultValue }).(pulumi.AnyOutput)
}

// Description of this parameter/resourceGroup.
func (o ParameterDefinitionResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ParameterDefinitionResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// DisplayName of this parameter/resourceGroup.
func (o ParameterDefinitionResponseOutput) DisplayName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ParameterDefinitionResponse) *string { return v.DisplayName }).(pulumi.StringPtrOutput)
}

// StrongType for UI to render rich experience during blueprint assignment. Supported strong types are resourceType, principalId and location.
func (o ParameterDefinitionResponseOutput) StrongType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ParameterDefinitionResponse) *string { return v.StrongType }).(pulumi.StringPtrOutput)
}

// Allowed data types for Resource Manager template parameters.
func (o ParameterDefinitionResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ParameterDefinitionResponse) string { return v.Type }).(pulumi.StringOutput)
}

type ParameterDefinitionResponseMapOutput struct{ *pulumi.OutputState }

func (ParameterDefinitionResponseMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]ParameterDefinitionResponse)(nil)).Elem()
}

func (o ParameterDefinitionResponseMapOutput) ToParameterDefinitionResponseMapOutput() ParameterDefinitionResponseMapOutput {
	return o
}

func (o ParameterDefinitionResponseMapOutput) ToParameterDefinitionResponseMapOutputWithContext(ctx context.Context) ParameterDefinitionResponseMapOutput {
	return o
}

func (o ParameterDefinitionResponseMapOutput) MapIndex(k pulumi.StringInput) ParameterDefinitionResponseOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) ParameterDefinitionResponse {
		return vs[0].(map[string]ParameterDefinitionResponse)[vs[1].(string)]
	}).(ParameterDefinitionResponseOutput)
}

// Value for the specified parameter. Can be either 'value' or 'reference' but not both.
type ParameterValue struct {
	// Parameter value as reference type.
	Reference *SecretValueReference `pulumi:"reference"`
	// Parameter value. Any valid JSON value is allowed including objects, arrays, strings, numbers and booleans.
	Value interface{} `pulumi:"value"`
}

// ParameterValueInput is an input type that accepts ParameterValueArgs and ParameterValueOutput values.
// You can construct a concrete instance of `ParameterValueInput` via:
//
//	ParameterValueArgs{...}
type ParameterValueInput interface {
	pulumi.Input

	ToParameterValueOutput() ParameterValueOutput
	ToParameterValueOutputWithContext(context.Context) ParameterValueOutput
}

// Value for the specified parameter. Can be either 'value' or 'reference' but not both.
type ParameterValueArgs struct {
	// Parameter value as reference type.
	Reference SecretValueReferencePtrInput `pulumi:"reference"`
	// Parameter value. Any valid JSON value is allowed including objects, arrays, strings, numbers and booleans.
	Value pulumi.Input `pulumi:"value"`
}

func (ParameterValueArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ParameterValue)(nil)).Elem()
}

func (i ParameterValueArgs) ToParameterValueOutput() ParameterValueOutput {
	return i.ToParameterValueOutputWithContext(context.Background())
}

func (i ParameterValueArgs) ToParameterValueOutputWithContext(ctx context.Context) ParameterValueOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ParameterValueOutput)
}

// ParameterValueMapInput is an input type that accepts ParameterValueMap and ParameterValueMapOutput values.
// You can construct a concrete instance of `ParameterValueMapInput` via:
//
//	ParameterValueMap{ "key": ParameterValueArgs{...} }
type ParameterValueMapInput interface {
	pulumi.Input

	ToParameterValueMapOutput() ParameterValueMapOutput
	ToParameterValueMapOutputWithContext(context.Context) ParameterValueMapOutput
}

type ParameterValueMap map[string]ParameterValueInput

func (ParameterValueMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]ParameterValue)(nil)).Elem()
}

func (i ParameterValueMap) ToParameterValueMapOutput() ParameterValueMapOutput {
	return i.ToParameterValueMapOutputWithContext(context.Background())
}

func (i ParameterValueMap) ToParameterValueMapOutputWithContext(ctx context.Context) ParameterValueMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ParameterValueMapOutput)
}

// Value for the specified parameter. Can be either 'value' or 'reference' but not both.
type ParameterValueOutput struct{ *pulumi.OutputState }

func (ParameterValueOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ParameterValue)(nil)).Elem()
}

func (o ParameterValueOutput) ToParameterValueOutput() ParameterValueOutput {
	return o
}

func (o ParameterValueOutput) ToParameterValueOutputWithContext(ctx context.Context) ParameterValueOutput {
	return o
}

// Parameter value as reference type.
func (o ParameterValueOutput) Reference() SecretValueReferencePtrOutput {
	return o.ApplyT(func(v ParameterValue) *SecretValueReference { return v.Reference }).(SecretValueReferencePtrOutput)
}

// Parameter value. Any valid JSON value is allowed including objects, arrays, strings, numbers and booleans.
func (o ParameterValueOutput) Value() pulumi.AnyOutput {
	return o.ApplyT(func(v ParameterValue) interface{} { return v.Value }).(pulumi.AnyOutput)
}

type ParameterValueMapOutput struct{ *pulumi.OutputState }

func (ParameterValueMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]ParameterValue)(nil)).Elem()
}

func (o ParameterValueMapOutput) ToParameterValueMapOutput() ParameterValueMapOutput {
	return o
}

func (o ParameterValueMapOutput) ToParameterValueMapOutputWithContext(ctx context.Context) ParameterValueMapOutput {
	return o
}

func (o ParameterValueMapOutput) MapIndex(k pulumi.StringInput) ParameterValueOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) ParameterValue {
		return vs[0].(map[string]ParameterValue)[vs[1].(string)]
	}).(ParameterValueOutput)
}

// Value for the specified parameter. Can be either 'value' or 'reference' but not both.
type ParameterValueResponse struct {
	// Parameter value as reference type.
	Reference *SecretValueReferenceResponse `pulumi:"reference"`
	// Parameter value. Any valid JSON value is allowed including objects, arrays, strings, numbers and booleans.
	Value interface{} `pulumi:"value"`
}

// Value for the specified parameter. Can be either 'value' or 'reference' but not both.
type ParameterValueResponseOutput struct{ *pulumi.OutputState }

func (ParameterValueResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ParameterValueResponse)(nil)).Elem()
}

func (o ParameterValueResponseOutput) ToParameterValueResponseOutput() ParameterValueResponseOutput {
	return o
}

func (o ParameterValueResponseOutput) ToParameterValueResponseOutputWithContext(ctx context.Context) ParameterValueResponseOutput {
	return o
}

// Parameter value as reference type.
func (o ParameterValueResponseOutput) Reference() SecretValueReferenceResponsePtrOutput {
	return o.ApplyT(func(v ParameterValueResponse) *SecretValueReferenceResponse { return v.Reference }).(SecretValueReferenceResponsePtrOutput)
}

// Parameter value. Any valid JSON value is allowed including objects, arrays, strings, numbers and booleans.
func (o ParameterValueResponseOutput) Value() pulumi.AnyOutput {
	return o.ApplyT(func(v ParameterValueResponse) interface{} { return v.Value }).(pulumi.AnyOutput)
}

type ParameterValueResponseMapOutput struct{ *pulumi.OutputState }

func (ParameterValueResponseMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]ParameterValueResponse)(nil)).Elem()
}

func (o ParameterValueResponseMapOutput) ToParameterValueResponseMapOutput() ParameterValueResponseMapOutput {
	return o
}

func (o ParameterValueResponseMapOutput) ToParameterValueResponseMapOutputWithContext(ctx context.Context) ParameterValueResponseMapOutput {
	return o
}

func (o ParameterValueResponseMapOutput) MapIndex(k pulumi.StringInput) ParameterValueResponseOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) ParameterValueResponse {
		return vs[0].(map[string]ParameterValueResponse)[vs[1].(string)]
	}).(ParameterValueResponseOutput)
}

// Represents an Azure resource group in a blueprint definition.
type ResourceGroupDefinition struct {
	// Artifacts which need to be deployed before this resource group.
	DependsOn []string `pulumi:"dependsOn"`
	// Description of this parameter/resourceGroup.
	Description *string `pulumi:"description"`
	// DisplayName of this parameter/resourceGroup.
	DisplayName *string `pulumi:"displayName"`
	// Location of this resourceGroup. Leave empty if the resource group location will be specified during the blueprint assignment.
	Location *string `pulumi:"location"`
	// Name of this resourceGroup. Leave empty if the resource group name will be specified during the blueprint assignment.
	Name *string `pulumi:"name"`
	// StrongType for UI to render rich experience during blueprint assignment. Supported strong types are resourceType, principalId and location.
	StrongType *string `pulumi:"strongType"`
	// Tags to be assigned to this resource group.
	Tags map[string]string `pulumi:"tags"`
}

// ResourceGroupDefinitionInput is an input type that accepts ResourceGroupDefinitionArgs and ResourceGroupDefinitionOutput values.
// You can construct a concrete instance of `ResourceGroupDefinitionInput` via:
//
//	ResourceGroupDefinitionArgs{...}
type ResourceGroupDefinitionInput interface {
	pulumi.Input

	ToResourceGroupDefinitionOutput() ResourceGroupDefinitionOutput
	ToResourceGroupDefinitionOutputWithContext(context.Context) ResourceGroupDefinitionOutput
}

// Represents an Azure resource group in a blueprint definition.
type ResourceGroupDefinitionArgs struct {
	// Artifacts which need to be deployed before this resource group.
	DependsOn pulumi.StringArrayInput `pulumi:"dependsOn"`
	// Description of this parameter/resourceGroup.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// DisplayName of this parameter/resourceGroup.
	DisplayName pulumi.StringPtrInput `pulumi:"displayName"`
	// Location of this resourceGroup. Leave empty if the resource group location will be specified during the blueprint assignment.
	Location pulumi.StringPtrInput `pulumi:"location"`
	// Name of this resourceGroup. Leave empty if the resource group name will be specified during the blueprint assignment.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// StrongType for UI to render rich experience during blueprint assignment. Supported strong types are resourceType, principalId and location.
	StrongType pulumi.StringPtrInput `pulumi:"strongType"`
	// Tags to be assigned to this resource group.
	Tags pulumi.StringMapInput `pulumi:"tags"`
}

func (ResourceGroupDefinitionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceGroupDefinition)(nil)).Elem()
}

func (i ResourceGroupDefinitionArgs) ToResourceGroupDefinitionOutput() ResourceGroupDefinitionOutput {
	return i.ToResourceGroupDefinitionOutputWithContext(context.Background())
}

func (i ResourceGroupDefinitionArgs) ToResourceGroupDefinitionOutputWithContext(ctx context.Context) ResourceGroupDefinitionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceGroupDefinitionOutput)
}

// ResourceGroupDefinitionMapInput is an input type that accepts ResourceGroupDefinitionMap and ResourceGroupDefinitionMapOutput values.
// You can construct a concrete instance of `ResourceGroupDefinitionMapInput` via:
//
//	ResourceGroupDefinitionMap{ "key": ResourceGroupDefinitionArgs{...} }
type ResourceGroupDefinitionMapInput interface {
	pulumi.Input

	ToResourceGroupDefinitionMapOutput() ResourceGroupDefinitionMapOutput
	ToResourceGroupDefinitionMapOutputWithContext(context.Context) ResourceGroupDefinitionMapOutput
}

type ResourceGroupDefinitionMap map[string]ResourceGroupDefinitionInput

func (ResourceGroupDefinitionMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]ResourceGroupDefinition)(nil)).Elem()
}

func (i ResourceGroupDefinitionMap) ToResourceGroupDefinitionMapOutput() ResourceGroupDefinitionMapOutput {
	return i.ToResourceGroupDefinitionMapOutputWithContext(context.Background())
}

func (i ResourceGroupDefinitionMap) ToResourceGroupDefinitionMapOutputWithContext(ctx context.Context) ResourceGroupDefinitionMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceGroupDefinitionMapOutput)
}

// Represents an Azure resource group in a blueprint definition.
type ResourceGroupDefinitionOutput struct{ *pulumi.OutputState }

func (ResourceGroupDefinitionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceGroupDefinition)(nil)).Elem()
}

func (o ResourceGroupDefinitionOutput) ToResourceGroupDefinitionOutput() ResourceGroupDefinitionOutput {
	return o
}

func (o ResourceGroupDefinitionOutput) ToResourceGroupDefinitionOutputWithContext(ctx context.Context) ResourceGroupDefinitionOutput {
	return o
}

// Artifacts which need to be deployed before this resource group.
func (o ResourceGroupDefinitionOutput) DependsOn() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ResourceGroupDefinition) []string { return v.DependsOn }).(pulumi.StringArrayOutput)
}

// Description of this parameter/resourceGroup.
func (o ResourceGroupDefinitionOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceGroupDefinition) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// DisplayName of this parameter/resourceGroup.
func (o ResourceGroupDefinitionOutput) DisplayName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceGroupDefinition) *string { return v.DisplayName }).(pulumi.StringPtrOutput)
}

// Location of this resourceGroup. Leave empty if the resource group location will be specified during the blueprint assignment.
func (o ResourceGroupDefinitionOutput) Location() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceGroupDefinition) *string { return v.Location }).(pulumi.StringPtrOutput)
}

// Name of this resourceGroup. Leave empty if the resource group name will be specified during the blueprint assignment.
func (o ResourceGroupDefinitionOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceGroupDefinition) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// StrongType for UI to render rich experience during blueprint assignment. Supported strong types are resourceType, principalId and location.
func (o ResourceGroupDefinitionOutput) StrongType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceGroupDefinition) *string { return v.StrongType }).(pulumi.StringPtrOutput)
}

// Tags to be assigned to this resource group.
func (o ResourceGroupDefinitionOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v ResourceGroupDefinition) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

type ResourceGroupDefinitionMapOutput struct{ *pulumi.OutputState }

func (ResourceGroupDefinitionMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]ResourceGroupDefinition)(nil)).Elem()
}

func (o ResourceGroupDefinitionMapOutput) ToResourceGroupDefinitionMapOutput() ResourceGroupDefinitionMapOutput {
	return o
}

func (o ResourceGroupDefinitionMapOutput) ToResourceGroupDefinitionMapOutputWithContext(ctx context.Context) ResourceGroupDefinitionMapOutput {
	return o
}

func (o ResourceGroupDefinitionMapOutput) MapIndex(k pulumi.StringInput) ResourceGroupDefinitionOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) ResourceGroupDefinition {
		return vs[0].(map[string]ResourceGroupDefinition)[vs[1].(string)]
	}).(ResourceGroupDefinitionOutput)
}

// Represents an Azure resource group in a blueprint definition.
type ResourceGroupDefinitionResponse struct {
	// Artifacts which need to be deployed before this resource group.
	DependsOn []string `pulumi:"dependsOn"`
	// Description of this parameter/resourceGroup.
	Description *string `pulumi:"description"`
	// DisplayName of this parameter/resourceGroup.
	DisplayName *string `pulumi:"displayName"`
	// Location of this resourceGroup. Leave empty if the resource group location will be specified during the blueprint assignment.
	Location *string `pulumi:"location"`
	// Name of this resourceGroup. Leave empty if the resource group name will be specified during the blueprint assignment.
	Name *string `pulumi:"name"`
	// StrongType for UI to render rich experience during blueprint assignment. Supported strong types are resourceType, principalId and location.
	StrongType *string `pulumi:"strongType"`
	// Tags to be assigned to this resource group.
	Tags map[string]string `pulumi:"tags"`
}

// Represents an Azure resource group in a blueprint definition.
type ResourceGroupDefinitionResponseOutput struct{ *pulumi.OutputState }

func (ResourceGroupDefinitionResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceGroupDefinitionResponse)(nil)).Elem()
}

func (o ResourceGroupDefinitionResponseOutput) ToResourceGroupDefinitionResponseOutput() ResourceGroupDefinitionResponseOutput {
	return o
}

func (o ResourceGroupDefinitionResponseOutput) ToResourceGroupDefinitionResponseOutputWithContext(ctx context.Context) ResourceGroupDefinitionResponseOutput {
	return o
}

// Artifacts which need to be deployed before this resource group.
func (o ResourceGroupDefinitionResponseOutput) DependsOn() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ResourceGroupDefinitionResponse) []string { return v.DependsOn }).(pulumi.StringArrayOutput)
}

// Description of this parameter/resourceGroup.
func (o ResourceGroupDefinitionResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceGroupDefinitionResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// DisplayName of this parameter/resourceGroup.
func (o ResourceGroupDefinitionResponseOutput) DisplayName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceGroupDefinitionResponse) *string { return v.DisplayName }).(pulumi.StringPtrOutput)
}

// Location of this resourceGroup. Leave empty if the resource group location will be specified during the blueprint assignment.
func (o ResourceGroupDefinitionResponseOutput) Location() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceGroupDefinitionResponse) *string { return v.Location }).(pulumi.StringPtrOutput)
}

// Name of this resourceGroup. Leave empty if the resource group name will be specified during the blueprint assignment.
func (o ResourceGroupDefinitionResponseOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceGroupDefinitionResponse) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// StrongType for UI to render rich experience during blueprint assignment. Supported strong types are resourceType, principalId and location.
func (o ResourceGroupDefinitionResponseOutput) StrongType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceGroupDefinitionResponse) *string { return v.StrongType }).(pulumi.StringPtrOutput)
}

// Tags to be assigned to this resource group.
func (o ResourceGroupDefinitionResponseOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v ResourceGroupDefinitionResponse) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

type ResourceGroupDefinitionResponseMapOutput struct{ *pulumi.OutputState }

func (ResourceGroupDefinitionResponseMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]ResourceGroupDefinitionResponse)(nil)).Elem()
}

func (o ResourceGroupDefinitionResponseMapOutput) ToResourceGroupDefinitionResponseMapOutput() ResourceGroupDefinitionResponseMapOutput {
	return o
}

func (o ResourceGroupDefinitionResponseMapOutput) ToResourceGroupDefinitionResponseMapOutputWithContext(ctx context.Context) ResourceGroupDefinitionResponseMapOutput {
	return o
}

func (o ResourceGroupDefinitionResponseMapOutput) MapIndex(k pulumi.StringInput) ResourceGroupDefinitionResponseOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) ResourceGroupDefinitionResponse {
		return vs[0].(map[string]ResourceGroupDefinitionResponse)[vs[1].(string)]
	}).(ResourceGroupDefinitionResponseOutput)
}

// Represents an Azure resource group.
type ResourceGroupValue struct {
	// Location of the resource group.
	Location *string `pulumi:"location"`
	// Name of the resource group.
	Name *string `pulumi:"name"`
}

// ResourceGroupValueInput is an input type that accepts ResourceGroupValueArgs and ResourceGroupValueOutput values.
// You can construct a concrete instance of `ResourceGroupValueInput` via:
//
//	ResourceGroupValueArgs{...}
type ResourceGroupValueInput interface {
	pulumi.Input

	ToResourceGroupValueOutput() ResourceGroupValueOutput
	ToResourceGroupValueOutputWithContext(context.Context) ResourceGroupValueOutput
}

// Represents an Azure resource group.
type ResourceGroupValueArgs struct {
	// Location of the resource group.
	Location pulumi.StringPtrInput `pulumi:"location"`
	// Name of the resource group.
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (ResourceGroupValueArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceGroupValue)(nil)).Elem()
}

func (i ResourceGroupValueArgs) ToResourceGroupValueOutput() ResourceGroupValueOutput {
	return i.ToResourceGroupValueOutputWithContext(context.Background())
}

func (i ResourceGroupValueArgs) ToResourceGroupValueOutputWithContext(ctx context.Context) ResourceGroupValueOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceGroupValueOutput)
}

// ResourceGroupValueMapInput is an input type that accepts ResourceGroupValueMap and ResourceGroupValueMapOutput values.
// You can construct a concrete instance of `ResourceGroupValueMapInput` via:
//
//	ResourceGroupValueMap{ "key": ResourceGroupValueArgs{...} }
type ResourceGroupValueMapInput interface {
	pulumi.Input

	ToResourceGroupValueMapOutput() ResourceGroupValueMapOutput
	ToResourceGroupValueMapOutputWithContext(context.Context) ResourceGroupValueMapOutput
}

type ResourceGroupValueMap map[string]ResourceGroupValueInput

func (ResourceGroupValueMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]ResourceGroupValue)(nil)).Elem()
}

func (i ResourceGroupValueMap) ToResourceGroupValueMapOutput() ResourceGroupValueMapOutput {
	return i.ToResourceGroupValueMapOutputWithContext(context.Background())
}

func (i ResourceGroupValueMap) ToResourceGroupValueMapOutputWithContext(ctx context.Context) ResourceGroupValueMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceGroupValueMapOutput)
}

// Represents an Azure resource group.
type ResourceGroupValueOutput struct{ *pulumi.OutputState }

func (ResourceGroupValueOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceGroupValue)(nil)).Elem()
}

func (o ResourceGroupValueOutput) ToResourceGroupValueOutput() ResourceGroupValueOutput {
	return o
}

func (o ResourceGroupValueOutput) ToResourceGroupValueOutputWithContext(ctx context.Context) ResourceGroupValueOutput {
	return o
}

// Location of the resource group.
func (o ResourceGroupValueOutput) Location() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceGroupValue) *string { return v.Location }).(pulumi.StringPtrOutput)
}

// Name of the resource group.
func (o ResourceGroupValueOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceGroupValue) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type ResourceGroupValueMapOutput struct{ *pulumi.OutputState }

func (ResourceGroupValueMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]ResourceGroupValue)(nil)).Elem()
}

func (o ResourceGroupValueMapOutput) ToResourceGroupValueMapOutput() ResourceGroupValueMapOutput {
	return o
}

func (o ResourceGroupValueMapOutput) ToResourceGroupValueMapOutputWithContext(ctx context.Context) ResourceGroupValueMapOutput {
	return o
}

func (o ResourceGroupValueMapOutput) MapIndex(k pulumi.StringInput) ResourceGroupValueOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) ResourceGroupValue {
		return vs[0].(map[string]ResourceGroupValue)[vs[1].(string)]
	}).(ResourceGroupValueOutput)
}

// Represents an Azure resource group.
type ResourceGroupValueResponse struct {
	// Location of the resource group.
	Location *string `pulumi:"location"`
	// Name of the resource group.
	Name *string `pulumi:"name"`
}

// Represents an Azure resource group.
type ResourceGroupValueResponseOutput struct{ *pulumi.OutputState }

func (ResourceGroupValueResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceGroupValueResponse)(nil)).Elem()
}

func (o ResourceGroupValueResponseOutput) ToResourceGroupValueResponseOutput() ResourceGroupValueResponseOutput {
	return o
}

func (o ResourceGroupValueResponseOutput) ToResourceGroupValueResponseOutputWithContext(ctx context.Context) ResourceGroupValueResponseOutput {
	return o
}

// Location of the resource group.
func (o ResourceGroupValueResponseOutput) Location() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceGroupValueResponse) *string { return v.Location }).(pulumi.StringPtrOutput)
}

// Name of the resource group.
func (o ResourceGroupValueResponseOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceGroupValueResponse) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type ResourceGroupValueResponseMapOutput struct{ *pulumi.OutputState }

func (ResourceGroupValueResponseMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]ResourceGroupValueResponse)(nil)).Elem()
}

func (o ResourceGroupValueResponseMapOutput) ToResourceGroupValueResponseMapOutput() ResourceGroupValueResponseMapOutput {
	return o
}

func (o ResourceGroupValueResponseMapOutput) ToResourceGroupValueResponseMapOutputWithContext(ctx context.Context) ResourceGroupValueResponseMapOutput {
	return o
}

func (o ResourceGroupValueResponseMapOutput) MapIndex(k pulumi.StringInput) ResourceGroupValueResponseOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) ResourceGroupValueResponse {
		return vs[0].(map[string]ResourceGroupValueResponse)[vs[1].(string)]
	}).(ResourceGroupValueResponseOutput)
}

// Reference to a Key Vault secret.
type SecretValueReference struct {
	// Specifies the reference to a given Azure Key Vault.
	KeyVault KeyVaultReference `pulumi:"keyVault"`
	// Name of the secret.
	SecretName string `pulumi:"secretName"`
	// The version of the secret to use. If left blank, the latest version of the secret is used.
	SecretVersion *string `pulumi:"secretVersion"`
}

// SecretValueReferenceInput is an input type that accepts SecretValueReferenceArgs and SecretValueReferenceOutput values.
// You can construct a concrete instance of `SecretValueReferenceInput` via:
//
//	SecretValueReferenceArgs{...}
type SecretValueReferenceInput interface {
	pulumi.Input

	ToSecretValueReferenceOutput() SecretValueReferenceOutput
	ToSecretValueReferenceOutputWithContext(context.Context) SecretValueReferenceOutput
}

// Reference to a Key Vault secret.
type SecretValueReferenceArgs struct {
	// Specifies the reference to a given Azure Key Vault.
	KeyVault KeyVaultReferenceInput `pulumi:"keyVault"`
	// Name of the secret.
	SecretName pulumi.StringInput `pulumi:"secretName"`
	// The version of the secret to use. If left blank, the latest version of the secret is used.
	SecretVersion pulumi.StringPtrInput `pulumi:"secretVersion"`
}

func (SecretValueReferenceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SecretValueReference)(nil)).Elem()
}

func (i SecretValueReferenceArgs) ToSecretValueReferenceOutput() SecretValueReferenceOutput {
	return i.ToSecretValueReferenceOutputWithContext(context.Background())
}

func (i SecretValueReferenceArgs) ToSecretValueReferenceOutputWithContext(ctx context.Context) SecretValueReferenceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretValueReferenceOutput)
}

func (i SecretValueReferenceArgs) ToSecretValueReferencePtrOutput() SecretValueReferencePtrOutput {
	return i.ToSecretValueReferencePtrOutputWithContext(context.Background())
}

func (i SecretValueReferenceArgs) ToSecretValueReferencePtrOutputWithContext(ctx context.Context) SecretValueReferencePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretValueReferenceOutput).ToSecretValueReferencePtrOutputWithContext(ctx)
}

// SecretValueReferencePtrInput is an input type that accepts SecretValueReferenceArgs, SecretValueReferencePtr and SecretValueReferencePtrOutput values.
// You can construct a concrete instance of `SecretValueReferencePtrInput` via:
//
//	        SecretValueReferenceArgs{...}
//
//	or:
//
//	        nil
type SecretValueReferencePtrInput interface {
	pulumi.Input

	ToSecretValueReferencePtrOutput() SecretValueReferencePtrOutput
	ToSecretValueReferencePtrOutputWithContext(context.Context) SecretValueReferencePtrOutput
}

type secretValueReferencePtrType SecretValueReferenceArgs

func SecretValueReferencePtr(v *SecretValueReferenceArgs) SecretValueReferencePtrInput {
	return (*secretValueReferencePtrType)(v)
}

func (*secretValueReferencePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SecretValueReference)(nil)).Elem()
}

func (i *secretValueReferencePtrType) ToSecretValueReferencePtrOutput() SecretValueReferencePtrOutput {
	return i.ToSecretValueReferencePtrOutputWithContext(context.Background())
}

func (i *secretValueReferencePtrType) ToSecretValueReferencePtrOutputWithContext(ctx context.Context) SecretValueReferencePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretValueReferencePtrOutput)
}

// Reference to a Key Vault secret.
type SecretValueReferenceOutput struct{ *pulumi.OutputState }

func (SecretValueReferenceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SecretValueReference)(nil)).Elem()
}

func (o SecretValueReferenceOutput) ToSecretValueReferenceOutput() SecretValueReferenceOutput {
	return o
}

func (o SecretValueReferenceOutput) ToSecretValueReferenceOutputWithContext(ctx context.Context) SecretValueReferenceOutput {
	return o
}

func (o SecretValueReferenceOutput) ToSecretValueReferencePtrOutput() SecretValueReferencePtrOutput {
	return o.ToSecretValueReferencePtrOutputWithContext(context.Background())
}

func (o SecretValueReferenceOutput) ToSecretValueReferencePtrOutputWithContext(ctx context.Context) SecretValueReferencePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SecretValueReference) *SecretValueReference {
		return &v
	}).(SecretValueReferencePtrOutput)
}

// Specifies the reference to a given Azure Key Vault.
func (o SecretValueReferenceOutput) KeyVault() KeyVaultReferenceOutput {
	return o.ApplyT(func(v SecretValueReference) KeyVaultReference { return v.KeyVault }).(KeyVaultReferenceOutput)
}

// Name of the secret.
func (o SecretValueReferenceOutput) SecretName() pulumi.StringOutput {
	return o.ApplyT(func(v SecretValueReference) string { return v.SecretName }).(pulumi.StringOutput)
}

// The version of the secret to use. If left blank, the latest version of the secret is used.
func (o SecretValueReferenceOutput) SecretVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SecretValueReference) *string { return v.SecretVersion }).(pulumi.StringPtrOutput)
}

type SecretValueReferencePtrOutput struct{ *pulumi.OutputState }

func (SecretValueReferencePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SecretValueReference)(nil)).Elem()
}

func (o SecretValueReferencePtrOutput) ToSecretValueReferencePtrOutput() SecretValueReferencePtrOutput {
	return o
}

func (o SecretValueReferencePtrOutput) ToSecretValueReferencePtrOutputWithContext(ctx context.Context) SecretValueReferencePtrOutput {
	return o
}

func (o SecretValueReferencePtrOutput) Elem() SecretValueReferenceOutput {
	return o.ApplyT(func(v *SecretValueReference) SecretValueReference {
		if v != nil {
			return *v
		}
		var ret SecretValueReference
		return ret
	}).(SecretValueReferenceOutput)
}

// Specifies the reference to a given Azure Key Vault.
func (o SecretValueReferencePtrOutput) KeyVault() KeyVaultReferencePtrOutput {
	return o.ApplyT(func(v *SecretValueReference) *KeyVaultReference {
		if v == nil {
			return nil
		}
		return &v.KeyVault
	}).(KeyVaultReferencePtrOutput)
}

// Name of the secret.
func (o SecretValueReferencePtrOutput) SecretName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SecretValueReference) *string {
		if v == nil {
			return nil
		}
		return &v.SecretName
	}).(pulumi.StringPtrOutput)
}

// The version of the secret to use. If left blank, the latest version of the secret is used.
func (o SecretValueReferencePtrOutput) SecretVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SecretValueReference) *string {
		if v == nil {
			return nil
		}
		return v.SecretVersion
	}).(pulumi.StringPtrOutput)
}

// Reference to a Key Vault secret.
type SecretValueReferenceResponse struct {
	// Specifies the reference to a given Azure Key Vault.
	KeyVault KeyVaultReferenceResponse `pulumi:"keyVault"`
	// Name of the secret.
	SecretName string `pulumi:"secretName"`
	// The version of the secret to use. If left blank, the latest version of the secret is used.
	SecretVersion *string `pulumi:"secretVersion"`
}

// Reference to a Key Vault secret.
type SecretValueReferenceResponseOutput struct{ *pulumi.OutputState }

func (SecretValueReferenceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SecretValueReferenceResponse)(nil)).Elem()
}

func (o SecretValueReferenceResponseOutput) ToSecretValueReferenceResponseOutput() SecretValueReferenceResponseOutput {
	return o
}

func (o SecretValueReferenceResponseOutput) ToSecretValueReferenceResponseOutputWithContext(ctx context.Context) SecretValueReferenceResponseOutput {
	return o
}

// Specifies the reference to a given Azure Key Vault.
func (o SecretValueReferenceResponseOutput) KeyVault() KeyVaultReferenceResponseOutput {
	return o.ApplyT(func(v SecretValueReferenceResponse) KeyVaultReferenceResponse { return v.KeyVault }).(KeyVaultReferenceResponseOutput)
}

// Name of the secret.
func (o SecretValueReferenceResponseOutput) SecretName() pulumi.StringOutput {
	return o.ApplyT(func(v SecretValueReferenceResponse) string { return v.SecretName }).(pulumi.StringOutput)
}

// The version of the secret to use. If left blank, the latest version of the secret is used.
func (o SecretValueReferenceResponseOutput) SecretVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SecretValueReferenceResponse) *string { return v.SecretVersion }).(pulumi.StringPtrOutput)
}

type SecretValueReferenceResponsePtrOutput struct{ *pulumi.OutputState }

func (SecretValueReferenceResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SecretValueReferenceResponse)(nil)).Elem()
}

func (o SecretValueReferenceResponsePtrOutput) ToSecretValueReferenceResponsePtrOutput() SecretValueReferenceResponsePtrOutput {
	return o
}

func (o SecretValueReferenceResponsePtrOutput) ToSecretValueReferenceResponsePtrOutputWithContext(ctx context.Context) SecretValueReferenceResponsePtrOutput {
	return o
}

func (o SecretValueReferenceResponsePtrOutput) Elem() SecretValueReferenceResponseOutput {
	return o.ApplyT(func(v *SecretValueReferenceResponse) SecretValueReferenceResponse {
		if v != nil {
			return *v
		}
		var ret SecretValueReferenceResponse
		return ret
	}).(SecretValueReferenceResponseOutput)
}

// Specifies the reference to a given Azure Key Vault.
func (o SecretValueReferenceResponsePtrOutput) KeyVault() KeyVaultReferenceResponsePtrOutput {
	return o.ApplyT(func(v *SecretValueReferenceResponse) *KeyVaultReferenceResponse {
		if v == nil {
			return nil
		}
		return &v.KeyVault
	}).(KeyVaultReferenceResponsePtrOutput)
}

// Name of the secret.
func (o SecretValueReferenceResponsePtrOutput) SecretName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SecretValueReferenceResponse) *string {
		if v == nil {
			return nil
		}
		return &v.SecretName
	}).(pulumi.StringPtrOutput)
}

// The version of the secret to use. If left blank, the latest version of the secret is used.
func (o SecretValueReferenceResponsePtrOutput) SecretVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SecretValueReferenceResponse) *string {
		if v == nil {
			return nil
		}
		return v.SecretVersion
	}).(pulumi.StringPtrOutput)
}

// User-assigned managed identity.
type UserAssignedIdentity struct {
	// Client App Id associated with this identity.
	ClientId *string `pulumi:"clientId"`
	// Azure Active Directory principal ID associated with this Identity.
	PrincipalId *string `pulumi:"principalId"`
}

// UserAssignedIdentityInput is an input type that accepts UserAssignedIdentityArgs and UserAssignedIdentityOutput values.
// You can construct a concrete instance of `UserAssignedIdentityInput` via:
//
//	UserAssignedIdentityArgs{...}
type UserAssignedIdentityInput interface {
	pulumi.Input

	ToUserAssignedIdentityOutput() UserAssignedIdentityOutput
	ToUserAssignedIdentityOutputWithContext(context.Context) UserAssignedIdentityOutput
}

// User-assigned managed identity.
type UserAssignedIdentityArgs struct {
	// Client App Id associated with this identity.
	ClientId pulumi.StringPtrInput `pulumi:"clientId"`
	// Azure Active Directory principal ID associated with this Identity.
	PrincipalId pulumi.StringPtrInput `pulumi:"principalId"`
}

func (UserAssignedIdentityArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*UserAssignedIdentity)(nil)).Elem()
}

func (i UserAssignedIdentityArgs) ToUserAssignedIdentityOutput() UserAssignedIdentityOutput {
	return i.ToUserAssignedIdentityOutputWithContext(context.Background())
}

func (i UserAssignedIdentityArgs) ToUserAssignedIdentityOutputWithContext(ctx context.Context) UserAssignedIdentityOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserAssignedIdentityOutput)
}

// UserAssignedIdentityMapInput is an input type that accepts UserAssignedIdentityMap and UserAssignedIdentityMapOutput values.
// You can construct a concrete instance of `UserAssignedIdentityMapInput` via:
//
//	UserAssignedIdentityMap{ "key": UserAssignedIdentityArgs{...} }
type UserAssignedIdentityMapInput interface {
	pulumi.Input

	ToUserAssignedIdentityMapOutput() UserAssignedIdentityMapOutput
	ToUserAssignedIdentityMapOutputWithContext(context.Context) UserAssignedIdentityMapOutput
}

type UserAssignedIdentityMap map[string]UserAssignedIdentityInput

func (UserAssignedIdentityMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]UserAssignedIdentity)(nil)).Elem()
}

func (i UserAssignedIdentityMap) ToUserAssignedIdentityMapOutput() UserAssignedIdentityMapOutput {
	return i.ToUserAssignedIdentityMapOutputWithContext(context.Background())
}

func (i UserAssignedIdentityMap) ToUserAssignedIdentityMapOutputWithContext(ctx context.Context) UserAssignedIdentityMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserAssignedIdentityMapOutput)
}

// User-assigned managed identity.
type UserAssignedIdentityOutput struct{ *pulumi.OutputState }

func (UserAssignedIdentityOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*UserAssignedIdentity)(nil)).Elem()
}

func (o UserAssignedIdentityOutput) ToUserAssignedIdentityOutput() UserAssignedIdentityOutput {
	return o
}

func (o UserAssignedIdentityOutput) ToUserAssignedIdentityOutputWithContext(ctx context.Context) UserAssignedIdentityOutput {
	return o
}

// Client App Id associated with this identity.
func (o UserAssignedIdentityOutput) ClientId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v UserAssignedIdentity) *string { return v.ClientId }).(pulumi.StringPtrOutput)
}

// Azure Active Directory principal ID associated with this Identity.
func (o UserAssignedIdentityOutput) PrincipalId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v UserAssignedIdentity) *string { return v.PrincipalId }).(pulumi.StringPtrOutput)
}

type UserAssignedIdentityMapOutput struct{ *pulumi.OutputState }

func (UserAssignedIdentityMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]UserAssignedIdentity)(nil)).Elem()
}

func (o UserAssignedIdentityMapOutput) ToUserAssignedIdentityMapOutput() UserAssignedIdentityMapOutput {
	return o
}

func (o UserAssignedIdentityMapOutput) ToUserAssignedIdentityMapOutputWithContext(ctx context.Context) UserAssignedIdentityMapOutput {
	return o
}

func (o UserAssignedIdentityMapOutput) MapIndex(k pulumi.StringInput) UserAssignedIdentityOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) UserAssignedIdentity {
		return vs[0].(map[string]UserAssignedIdentity)[vs[1].(string)]
	}).(UserAssignedIdentityOutput)
}

// User-assigned managed identity.
type UserAssignedIdentityResponse struct {
	// Client App Id associated with this identity.
	ClientId *string `pulumi:"clientId"`
	// Azure Active Directory principal ID associated with this Identity.
	PrincipalId *string `pulumi:"principalId"`
}

// User-assigned managed identity.
type UserAssignedIdentityResponseOutput struct{ *pulumi.OutputState }

func (UserAssignedIdentityResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*UserAssignedIdentityResponse)(nil)).Elem()
}

func (o UserAssignedIdentityResponseOutput) ToUserAssignedIdentityResponseOutput() UserAssignedIdentityResponseOutput {
	return o
}

func (o UserAssignedIdentityResponseOutput) ToUserAssignedIdentityResponseOutputWithContext(ctx context.Context) UserAssignedIdentityResponseOutput {
	return o
}

// Client App Id associated with this identity.
func (o UserAssignedIdentityResponseOutput) ClientId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v UserAssignedIdentityResponse) *string { return v.ClientId }).(pulumi.StringPtrOutput)
}

// Azure Active Directory principal ID associated with this Identity.
func (o UserAssignedIdentityResponseOutput) PrincipalId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v UserAssignedIdentityResponse) *string { return v.PrincipalId }).(pulumi.StringPtrOutput)
}

type UserAssignedIdentityResponseMapOutput struct{ *pulumi.OutputState }

func (UserAssignedIdentityResponseMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]UserAssignedIdentityResponse)(nil)).Elem()
}

func (o UserAssignedIdentityResponseMapOutput) ToUserAssignedIdentityResponseMapOutput() UserAssignedIdentityResponseMapOutput {
	return o
}

func (o UserAssignedIdentityResponseMapOutput) ToUserAssignedIdentityResponseMapOutputWithContext(ctx context.Context) UserAssignedIdentityResponseMapOutput {
	return o
}

func (o UserAssignedIdentityResponseMapOutput) MapIndex(k pulumi.StringInput) UserAssignedIdentityResponseOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) UserAssignedIdentityResponse {
		return vs[0].(map[string]UserAssignedIdentityResponse)[vs[1].(string)]
	}).(UserAssignedIdentityResponseOutput)
}

func init() {
	pulumi.RegisterOutputType(AssignmentLockSettingsOutput{})
	pulumi.RegisterOutputType(AssignmentLockSettingsPtrOutput{})
	pulumi.RegisterOutputType(AssignmentLockSettingsResponseOutput{})
	pulumi.RegisterOutputType(AssignmentLockSettingsResponsePtrOutput{})
	pulumi.RegisterOutputType(AssignmentStatusResponseOutput{})
	pulumi.RegisterOutputType(BlueprintStatusResponseOutput{})
	pulumi.RegisterOutputType(KeyVaultReferenceOutput{})
	pulumi.RegisterOutputType(KeyVaultReferencePtrOutput{})
	pulumi.RegisterOutputType(KeyVaultReferenceResponseOutput{})
	pulumi.RegisterOutputType(KeyVaultReferenceResponsePtrOutput{})
	pulumi.RegisterOutputType(ManagedServiceIdentityOutput{})
	pulumi.RegisterOutputType(ManagedServiceIdentityResponseOutput{})
	pulumi.RegisterOutputType(ParameterDefinitionOutput{})
	pulumi.RegisterOutputType(ParameterDefinitionMapOutput{})
	pulumi.RegisterOutputType(ParameterDefinitionResponseOutput{})
	pulumi.RegisterOutputType(ParameterDefinitionResponseMapOutput{})
	pulumi.RegisterOutputType(ParameterValueOutput{})
	pulumi.RegisterOutputType(ParameterValueMapOutput{})
	pulumi.RegisterOutputType(ParameterValueResponseOutput{})
	pulumi.RegisterOutputType(ParameterValueResponseMapOutput{})
	pulumi.RegisterOutputType(ResourceGroupDefinitionOutput{})
	pulumi.RegisterOutputType(ResourceGroupDefinitionMapOutput{})
	pulumi.RegisterOutputType(ResourceGroupDefinitionResponseOutput{})
	pulumi.RegisterOutputType(ResourceGroupDefinitionResponseMapOutput{})
	pulumi.RegisterOutputType(ResourceGroupValueOutput{})
	pulumi.RegisterOutputType(ResourceGroupValueMapOutput{})
	pulumi.RegisterOutputType(ResourceGroupValueResponseOutput{})
	pulumi.RegisterOutputType(ResourceGroupValueResponseMapOutput{})
	pulumi.RegisterOutputType(SecretValueReferenceOutput{})
	pulumi.RegisterOutputType(SecretValueReferencePtrOutput{})
	pulumi.RegisterOutputType(SecretValueReferenceResponseOutput{})
	pulumi.RegisterOutputType(SecretValueReferenceResponsePtrOutput{})
	pulumi.RegisterOutputType(UserAssignedIdentityOutput{})
	pulumi.RegisterOutputType(UserAssignedIdentityMapOutput{})
	pulumi.RegisterOutputType(UserAssignedIdentityResponseOutput{})
	pulumi.RegisterOutputType(UserAssignedIdentityResponseMapOutput{})
}
