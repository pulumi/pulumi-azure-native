// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package latest

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// User principals.
type Principals struct {
	// Object Id for the user
	ObjectId *string `pulumi:"objectId"`
	// UPN of the user.
	Upn *string `pulumi:"upn"`
}

// PrincipalsInput is an input type that accepts PrincipalsArgs and PrincipalsOutput values.
// You can construct a concrete instance of `PrincipalsInput` via:
//
//          PrincipalsArgs{...}
type PrincipalsInput interface {
	pulumi.Input

	ToPrincipalsOutput() PrincipalsOutput
	ToPrincipalsOutputWithContext(context.Context) PrincipalsOutput
}

// User principals.
type PrincipalsArgs struct {
	// Object Id for the user
	ObjectId pulumi.StringPtrInput `pulumi:"objectId"`
	// UPN of the user.
	Upn pulumi.StringPtrInput `pulumi:"upn"`
}

func (PrincipalsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Principals)(nil)).Elem()
}

func (i PrincipalsArgs) ToPrincipalsOutput() PrincipalsOutput {
	return i.ToPrincipalsOutputWithContext(context.Background())
}

func (i PrincipalsArgs) ToPrincipalsOutputWithContext(ctx context.Context) PrincipalsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PrincipalsOutput)
}

// PrincipalsArrayInput is an input type that accepts PrincipalsArray and PrincipalsArrayOutput values.
// You can construct a concrete instance of `PrincipalsArrayInput` via:
//
//          PrincipalsArray{ PrincipalsArgs{...} }
type PrincipalsArrayInput interface {
	pulumi.Input

	ToPrincipalsArrayOutput() PrincipalsArrayOutput
	ToPrincipalsArrayOutputWithContext(context.Context) PrincipalsArrayOutput
}

type PrincipalsArray []PrincipalsInput

func (PrincipalsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Principals)(nil)).Elem()
}

func (i PrincipalsArray) ToPrincipalsArrayOutput() PrincipalsArrayOutput {
	return i.ToPrincipalsArrayOutputWithContext(context.Background())
}

func (i PrincipalsArray) ToPrincipalsArrayOutputWithContext(ctx context.Context) PrincipalsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PrincipalsArrayOutput)
}

// User principals.
type PrincipalsOutput struct{ *pulumi.OutputState }

func (PrincipalsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Principals)(nil)).Elem()
}

func (o PrincipalsOutput) ToPrincipalsOutput() PrincipalsOutput {
	return o
}

func (o PrincipalsOutput) ToPrincipalsOutputWithContext(ctx context.Context) PrincipalsOutput {
	return o
}

// Object Id for the user
func (o PrincipalsOutput) ObjectId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Principals) *string { return v.ObjectId }).(pulumi.StringPtrOutput)
}

// UPN of the user.
func (o PrincipalsOutput) Upn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Principals) *string { return v.Upn }).(pulumi.StringPtrOutput)
}

type PrincipalsArrayOutput struct{ *pulumi.OutputState }

func (PrincipalsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Principals)(nil)).Elem()
}

func (o PrincipalsArrayOutput) ToPrincipalsArrayOutput() PrincipalsArrayOutput {
	return o
}

func (o PrincipalsArrayOutput) ToPrincipalsArrayOutputWithContext(ctx context.Context) PrincipalsArrayOutput {
	return o
}

func (o PrincipalsArrayOutput) Index(i pulumi.IntInput) PrincipalsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) Principals {
		return vs[0].([]Principals)[vs[1].(int)]
	}).(PrincipalsOutput)
}

// User principals.
type PrincipalsResponse struct {
	// Object Id for the user
	ObjectId *string `pulumi:"objectId"`
	// UPN of the user.
	Upn *string `pulumi:"upn"`
}

// PrincipalsResponseInput is an input type that accepts PrincipalsResponseArgs and PrincipalsResponseOutput values.
// You can construct a concrete instance of `PrincipalsResponseInput` via:
//
//          PrincipalsResponseArgs{...}
type PrincipalsResponseInput interface {
	pulumi.Input

	ToPrincipalsResponseOutput() PrincipalsResponseOutput
	ToPrincipalsResponseOutputWithContext(context.Context) PrincipalsResponseOutput
}

// User principals.
type PrincipalsResponseArgs struct {
	// Object Id for the user
	ObjectId pulumi.StringPtrInput `pulumi:"objectId"`
	// UPN of the user.
	Upn pulumi.StringPtrInput `pulumi:"upn"`
}

func (PrincipalsResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PrincipalsResponse)(nil)).Elem()
}

func (i PrincipalsResponseArgs) ToPrincipalsResponseOutput() PrincipalsResponseOutput {
	return i.ToPrincipalsResponseOutputWithContext(context.Background())
}

func (i PrincipalsResponseArgs) ToPrincipalsResponseOutputWithContext(ctx context.Context) PrincipalsResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PrincipalsResponseOutput)
}

// PrincipalsResponseArrayInput is an input type that accepts PrincipalsResponseArray and PrincipalsResponseArrayOutput values.
// You can construct a concrete instance of `PrincipalsResponseArrayInput` via:
//
//          PrincipalsResponseArray{ PrincipalsResponseArgs{...} }
type PrincipalsResponseArrayInput interface {
	pulumi.Input

	ToPrincipalsResponseArrayOutput() PrincipalsResponseArrayOutput
	ToPrincipalsResponseArrayOutputWithContext(context.Context) PrincipalsResponseArrayOutput
}

type PrincipalsResponseArray []PrincipalsResponseInput

func (PrincipalsResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PrincipalsResponse)(nil)).Elem()
}

func (i PrincipalsResponseArray) ToPrincipalsResponseArrayOutput() PrincipalsResponseArrayOutput {
	return i.ToPrincipalsResponseArrayOutputWithContext(context.Background())
}

func (i PrincipalsResponseArray) ToPrincipalsResponseArrayOutputWithContext(ctx context.Context) PrincipalsResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PrincipalsResponseArrayOutput)
}

// User principals.
type PrincipalsResponseOutput struct{ *pulumi.OutputState }

func (PrincipalsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PrincipalsResponse)(nil)).Elem()
}

func (o PrincipalsResponseOutput) ToPrincipalsResponseOutput() PrincipalsResponseOutput {
	return o
}

func (o PrincipalsResponseOutput) ToPrincipalsResponseOutputWithContext(ctx context.Context) PrincipalsResponseOutput {
	return o
}

// Object Id for the user
func (o PrincipalsResponseOutput) ObjectId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PrincipalsResponse) *string { return v.ObjectId }).(pulumi.StringPtrOutput)
}

// UPN of the user.
func (o PrincipalsResponseOutput) Upn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PrincipalsResponse) *string { return v.Upn }).(pulumi.StringPtrOutput)
}

type PrincipalsResponseArrayOutput struct{ *pulumi.OutputState }

func (PrincipalsResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PrincipalsResponse)(nil)).Elem()
}

func (o PrincipalsResponseArrayOutput) ToPrincipalsResponseArrayOutput() PrincipalsResponseArrayOutput {
	return o
}

func (o PrincipalsResponseArrayOutput) ToPrincipalsResponseArrayOutputWithContext(ctx context.Context) PrincipalsResponseArrayOutput {
	return o
}

func (o PrincipalsResponseArrayOutput) Index(i pulumi.IntInput) PrincipalsResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) PrincipalsResponse {
		return vs[0].([]PrincipalsResponse)[vs[1].(int)]
	}).(PrincipalsResponseOutput)
}

func init() {
	pulumi.RegisterOutputType(PrincipalsOutput{})
	pulumi.RegisterOutputType(PrincipalsArrayOutput{})
	pulumi.RegisterOutputType(PrincipalsResponseOutput{})
	pulumi.RegisterOutputType(PrincipalsResponseArrayOutput{})
}
