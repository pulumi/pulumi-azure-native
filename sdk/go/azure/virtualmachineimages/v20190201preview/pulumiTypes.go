// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v20190201preview

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// Describes an image source that is an installation ISO. Currently only supports Red Hat Enterprise Linux 7.2-7.5 ISO's.
type ImageTemplateIsoSource struct {
	// SHA256 Checksum of the ISO image.
	Sha256Checksum string `pulumi:"sha256Checksum"`
	// URI to get the ISO image. This URI has to be accessible to the resource provider at the time of the image template creation.
	SourceURI string `pulumi:"sourceURI"`
	// Specifies the type of source image you want to start with.
	// Expected value is 'ISO'.
	Type string `pulumi:"type"`
}

// ImageTemplateIsoSourceInput is an input type that accepts ImageTemplateIsoSourceArgs and ImageTemplateIsoSourceOutput values.
// You can construct a concrete instance of `ImageTemplateIsoSourceInput` via:
//
//          ImageTemplateIsoSourceArgs{...}
type ImageTemplateIsoSourceInput interface {
	pulumi.Input

	ToImageTemplateIsoSourceOutput() ImageTemplateIsoSourceOutput
	ToImageTemplateIsoSourceOutputWithContext(context.Context) ImageTemplateIsoSourceOutput
}

// Describes an image source that is an installation ISO. Currently only supports Red Hat Enterprise Linux 7.2-7.5 ISO's.
type ImageTemplateIsoSourceArgs struct {
	// SHA256 Checksum of the ISO image.
	Sha256Checksum pulumi.StringInput `pulumi:"sha256Checksum"`
	// URI to get the ISO image. This URI has to be accessible to the resource provider at the time of the image template creation.
	SourceURI pulumi.StringInput `pulumi:"sourceURI"`
	// Specifies the type of source image you want to start with.
	// Expected value is 'ISO'.
	Type pulumi.StringInput `pulumi:"type"`
}

func (ImageTemplateIsoSourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ImageTemplateIsoSource)(nil)).Elem()
}

func (i ImageTemplateIsoSourceArgs) ToImageTemplateIsoSourceOutput() ImageTemplateIsoSourceOutput {
	return i.ToImageTemplateIsoSourceOutputWithContext(context.Background())
}

func (i ImageTemplateIsoSourceArgs) ToImageTemplateIsoSourceOutputWithContext(ctx context.Context) ImageTemplateIsoSourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageTemplateIsoSourceOutput)
}

// Describes an image source that is an installation ISO. Currently only supports Red Hat Enterprise Linux 7.2-7.5 ISO's.
type ImageTemplateIsoSourceOutput struct{ *pulumi.OutputState }

func (ImageTemplateIsoSourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ImageTemplateIsoSource)(nil)).Elem()
}

func (o ImageTemplateIsoSourceOutput) ToImageTemplateIsoSourceOutput() ImageTemplateIsoSourceOutput {
	return o
}

func (o ImageTemplateIsoSourceOutput) ToImageTemplateIsoSourceOutputWithContext(ctx context.Context) ImageTemplateIsoSourceOutput {
	return o
}

// SHA256 Checksum of the ISO image.
func (o ImageTemplateIsoSourceOutput) Sha256Checksum() pulumi.StringOutput {
	return o.ApplyT(func(v ImageTemplateIsoSource) string { return v.Sha256Checksum }).(pulumi.StringOutput)
}

// URI to get the ISO image. This URI has to be accessible to the resource provider at the time of the image template creation.
func (o ImageTemplateIsoSourceOutput) SourceURI() pulumi.StringOutput {
	return o.ApplyT(func(v ImageTemplateIsoSource) string { return v.SourceURI }).(pulumi.StringOutput)
}

// Specifies the type of source image you want to start with.
// Expected value is 'ISO'.
func (o ImageTemplateIsoSourceOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ImageTemplateIsoSource) string { return v.Type }).(pulumi.StringOutput)
}

// Describes an image source that is an installation ISO. Currently only supports Red Hat Enterprise Linux 7.2-7.5 ISO's.
type ImageTemplateIsoSourceInvokeResponse struct {
	// SHA256 Checksum of the ISO image.
	Sha256Checksum string `pulumi:"sha256Checksum"`
	// URI to get the ISO image. This URI has to be accessible to the resource provider at the time of the image template creation.
	SourceURI string `pulumi:"sourceURI"`
	// Specifies the type of source image you want to start with.
	// Expected value is 'ISO'.
	Type string `pulumi:"type"`
}

// ImageTemplateIsoSourceInvokeResponseInput is an input type that accepts ImageTemplateIsoSourceInvokeResponseArgs and ImageTemplateIsoSourceInvokeResponseOutput values.
// You can construct a concrete instance of `ImageTemplateIsoSourceInvokeResponseInput` via:
//
//          ImageTemplateIsoSourceInvokeResponseArgs{...}
type ImageTemplateIsoSourceInvokeResponseInput interface {
	pulumi.Input

	ToImageTemplateIsoSourceInvokeResponseOutput() ImageTemplateIsoSourceInvokeResponseOutput
	ToImageTemplateIsoSourceInvokeResponseOutputWithContext(context.Context) ImageTemplateIsoSourceInvokeResponseOutput
}

// Describes an image source that is an installation ISO. Currently only supports Red Hat Enterprise Linux 7.2-7.5 ISO's.
type ImageTemplateIsoSourceInvokeResponseArgs struct {
	// SHA256 Checksum of the ISO image.
	Sha256Checksum pulumi.StringInput `pulumi:"sha256Checksum"`
	// URI to get the ISO image. This URI has to be accessible to the resource provider at the time of the image template creation.
	SourceURI pulumi.StringInput `pulumi:"sourceURI"`
	// Specifies the type of source image you want to start with.
	// Expected value is 'ISO'.
	Type pulumi.StringInput `pulumi:"type"`
}

func (ImageTemplateIsoSourceInvokeResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ImageTemplateIsoSourceInvokeResponse)(nil)).Elem()
}

func (i ImageTemplateIsoSourceInvokeResponseArgs) ToImageTemplateIsoSourceInvokeResponseOutput() ImageTemplateIsoSourceInvokeResponseOutput {
	return i.ToImageTemplateIsoSourceInvokeResponseOutputWithContext(context.Background())
}

func (i ImageTemplateIsoSourceInvokeResponseArgs) ToImageTemplateIsoSourceInvokeResponseOutputWithContext(ctx context.Context) ImageTemplateIsoSourceInvokeResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageTemplateIsoSourceInvokeResponseOutput)
}

// Describes an image source that is an installation ISO. Currently only supports Red Hat Enterprise Linux 7.2-7.5 ISO's.
type ImageTemplateIsoSourceInvokeResponseOutput struct{ *pulumi.OutputState }

func (ImageTemplateIsoSourceInvokeResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ImageTemplateIsoSourceInvokeResponse)(nil)).Elem()
}

func (o ImageTemplateIsoSourceInvokeResponseOutput) ToImageTemplateIsoSourceInvokeResponseOutput() ImageTemplateIsoSourceInvokeResponseOutput {
	return o
}

func (o ImageTemplateIsoSourceInvokeResponseOutput) ToImageTemplateIsoSourceInvokeResponseOutputWithContext(ctx context.Context) ImageTemplateIsoSourceInvokeResponseOutput {
	return o
}

// SHA256 Checksum of the ISO image.
func (o ImageTemplateIsoSourceInvokeResponseOutput) Sha256Checksum() pulumi.StringOutput {
	return o.ApplyT(func(v ImageTemplateIsoSourceInvokeResponse) string { return v.Sha256Checksum }).(pulumi.StringOutput)
}

// URI to get the ISO image. This URI has to be accessible to the resource provider at the time of the image template creation.
func (o ImageTemplateIsoSourceInvokeResponseOutput) SourceURI() pulumi.StringOutput {
	return o.ApplyT(func(v ImageTemplateIsoSourceInvokeResponse) string { return v.SourceURI }).(pulumi.StringOutput)
}

// Specifies the type of source image you want to start with.
// Expected value is 'ISO'.
func (o ImageTemplateIsoSourceInvokeResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ImageTemplateIsoSourceInvokeResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Describes an image source that is an installation ISO. Currently only supports Red Hat Enterprise Linux 7.2-7.5 ISO's.
type ImageTemplateIsoSourceResponse struct {
	// SHA256 Checksum of the ISO image.
	Sha256Checksum string `pulumi:"sha256Checksum"`
	// URI to get the ISO image. This URI has to be accessible to the resource provider at the time of the image template creation.
	SourceURI string `pulumi:"sourceURI"`
	// Specifies the type of source image you want to start with.
	// Expected value is 'ISO'.
	Type string `pulumi:"type"`
}

// ImageTemplateIsoSourceResponseInput is an input type that accepts ImageTemplateIsoSourceResponseArgs and ImageTemplateIsoSourceResponseOutput values.
// You can construct a concrete instance of `ImageTemplateIsoSourceResponseInput` via:
//
//          ImageTemplateIsoSourceResponseArgs{...}
type ImageTemplateIsoSourceResponseInput interface {
	pulumi.Input

	ToImageTemplateIsoSourceResponseOutput() ImageTemplateIsoSourceResponseOutput
	ToImageTemplateIsoSourceResponseOutputWithContext(context.Context) ImageTemplateIsoSourceResponseOutput
}

// Describes an image source that is an installation ISO. Currently only supports Red Hat Enterprise Linux 7.2-7.5 ISO's.
type ImageTemplateIsoSourceResponseArgs struct {
	// SHA256 Checksum of the ISO image.
	Sha256Checksum pulumi.StringInput `pulumi:"sha256Checksum"`
	// URI to get the ISO image. This URI has to be accessible to the resource provider at the time of the image template creation.
	SourceURI pulumi.StringInput `pulumi:"sourceURI"`
	// Specifies the type of source image you want to start with.
	// Expected value is 'ISO'.
	Type pulumi.StringInput `pulumi:"type"`
}

func (ImageTemplateIsoSourceResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ImageTemplateIsoSourceResponse)(nil)).Elem()
}

func (i ImageTemplateIsoSourceResponseArgs) ToImageTemplateIsoSourceResponseOutput() ImageTemplateIsoSourceResponseOutput {
	return i.ToImageTemplateIsoSourceResponseOutputWithContext(context.Background())
}

func (i ImageTemplateIsoSourceResponseArgs) ToImageTemplateIsoSourceResponseOutputWithContext(ctx context.Context) ImageTemplateIsoSourceResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageTemplateIsoSourceResponseOutput)
}

// Describes an image source that is an installation ISO. Currently only supports Red Hat Enterprise Linux 7.2-7.5 ISO's.
type ImageTemplateIsoSourceResponseOutput struct{ *pulumi.OutputState }

func (ImageTemplateIsoSourceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ImageTemplateIsoSourceResponse)(nil)).Elem()
}

func (o ImageTemplateIsoSourceResponseOutput) ToImageTemplateIsoSourceResponseOutput() ImageTemplateIsoSourceResponseOutput {
	return o
}

func (o ImageTemplateIsoSourceResponseOutput) ToImageTemplateIsoSourceResponseOutputWithContext(ctx context.Context) ImageTemplateIsoSourceResponseOutput {
	return o
}

// SHA256 Checksum of the ISO image.
func (o ImageTemplateIsoSourceResponseOutput) Sha256Checksum() pulumi.StringOutput {
	return o.ApplyT(func(v ImageTemplateIsoSourceResponse) string { return v.Sha256Checksum }).(pulumi.StringOutput)
}

// URI to get the ISO image. This URI has to be accessible to the resource provider at the time of the image template creation.
func (o ImageTemplateIsoSourceResponseOutput) SourceURI() pulumi.StringOutput {
	return o.ApplyT(func(v ImageTemplateIsoSourceResponse) string { return v.SourceURI }).(pulumi.StringOutput)
}

// Specifies the type of source image you want to start with.
// Expected value is 'ISO'.
func (o ImageTemplateIsoSourceResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ImageTemplateIsoSourceResponse) string { return v.Type }).(pulumi.StringOutput)
}

type ImageTemplateLastRunStatusInvokeResponse struct {
	// End time of the last run (UTC)
	EndTime *string `pulumi:"endTime"`
	// Verbose information about the last run state
	Message *string `pulumi:"message"`
	// State of the last run
	RunState *string `pulumi:"runState"`
	// Sub-state of the last run
	RunSubState *string `pulumi:"runSubState"`
	// Start time of the last run (UTC)
	StartTime *string `pulumi:"startTime"`
}

// ImageTemplateLastRunStatusInvokeResponseInput is an input type that accepts ImageTemplateLastRunStatusInvokeResponseArgs and ImageTemplateLastRunStatusInvokeResponseOutput values.
// You can construct a concrete instance of `ImageTemplateLastRunStatusInvokeResponseInput` via:
//
//          ImageTemplateLastRunStatusInvokeResponseArgs{...}
type ImageTemplateLastRunStatusInvokeResponseInput interface {
	pulumi.Input

	ToImageTemplateLastRunStatusInvokeResponseOutput() ImageTemplateLastRunStatusInvokeResponseOutput
	ToImageTemplateLastRunStatusInvokeResponseOutputWithContext(context.Context) ImageTemplateLastRunStatusInvokeResponseOutput
}

type ImageTemplateLastRunStatusInvokeResponseArgs struct {
	// End time of the last run (UTC)
	EndTime pulumi.StringPtrInput `pulumi:"endTime"`
	// Verbose information about the last run state
	Message pulumi.StringPtrInput `pulumi:"message"`
	// State of the last run
	RunState pulumi.StringPtrInput `pulumi:"runState"`
	// Sub-state of the last run
	RunSubState pulumi.StringPtrInput `pulumi:"runSubState"`
	// Start time of the last run (UTC)
	StartTime pulumi.StringPtrInput `pulumi:"startTime"`
}

func (ImageTemplateLastRunStatusInvokeResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ImageTemplateLastRunStatusInvokeResponse)(nil)).Elem()
}

func (i ImageTemplateLastRunStatusInvokeResponseArgs) ToImageTemplateLastRunStatusInvokeResponseOutput() ImageTemplateLastRunStatusInvokeResponseOutput {
	return i.ToImageTemplateLastRunStatusInvokeResponseOutputWithContext(context.Background())
}

func (i ImageTemplateLastRunStatusInvokeResponseArgs) ToImageTemplateLastRunStatusInvokeResponseOutputWithContext(ctx context.Context) ImageTemplateLastRunStatusInvokeResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageTemplateLastRunStatusInvokeResponseOutput)
}

type ImageTemplateLastRunStatusInvokeResponseOutput struct{ *pulumi.OutputState }

func (ImageTemplateLastRunStatusInvokeResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ImageTemplateLastRunStatusInvokeResponse)(nil)).Elem()
}

func (o ImageTemplateLastRunStatusInvokeResponseOutput) ToImageTemplateLastRunStatusInvokeResponseOutput() ImageTemplateLastRunStatusInvokeResponseOutput {
	return o
}

func (o ImageTemplateLastRunStatusInvokeResponseOutput) ToImageTemplateLastRunStatusInvokeResponseOutputWithContext(ctx context.Context) ImageTemplateLastRunStatusInvokeResponseOutput {
	return o
}

// End time of the last run (UTC)
func (o ImageTemplateLastRunStatusInvokeResponseOutput) EndTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageTemplateLastRunStatusInvokeResponse) *string { return v.EndTime }).(pulumi.StringPtrOutput)
}

// Verbose information about the last run state
func (o ImageTemplateLastRunStatusInvokeResponseOutput) Message() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageTemplateLastRunStatusInvokeResponse) *string { return v.Message }).(pulumi.StringPtrOutput)
}

// State of the last run
func (o ImageTemplateLastRunStatusInvokeResponseOutput) RunState() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageTemplateLastRunStatusInvokeResponse) *string { return v.RunState }).(pulumi.StringPtrOutput)
}

// Sub-state of the last run
func (o ImageTemplateLastRunStatusInvokeResponseOutput) RunSubState() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageTemplateLastRunStatusInvokeResponse) *string { return v.RunSubState }).(pulumi.StringPtrOutput)
}

// Start time of the last run (UTC)
func (o ImageTemplateLastRunStatusInvokeResponseOutput) StartTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageTemplateLastRunStatusInvokeResponse) *string { return v.StartTime }).(pulumi.StringPtrOutput)
}

type ImageTemplateLastRunStatusResponse struct {
	// End time of the last run (UTC)
	EndTime *string `pulumi:"endTime"`
	// Verbose information about the last run state
	Message *string `pulumi:"message"`
	// State of the last run
	RunState *string `pulumi:"runState"`
	// Sub-state of the last run
	RunSubState *string `pulumi:"runSubState"`
	// Start time of the last run (UTC)
	StartTime *string `pulumi:"startTime"`
}

// ImageTemplateLastRunStatusResponseInput is an input type that accepts ImageTemplateLastRunStatusResponseArgs and ImageTemplateLastRunStatusResponseOutput values.
// You can construct a concrete instance of `ImageTemplateLastRunStatusResponseInput` via:
//
//          ImageTemplateLastRunStatusResponseArgs{...}
type ImageTemplateLastRunStatusResponseInput interface {
	pulumi.Input

	ToImageTemplateLastRunStatusResponseOutput() ImageTemplateLastRunStatusResponseOutput
	ToImageTemplateLastRunStatusResponseOutputWithContext(context.Context) ImageTemplateLastRunStatusResponseOutput
}

type ImageTemplateLastRunStatusResponseArgs struct {
	// End time of the last run (UTC)
	EndTime pulumi.StringPtrInput `pulumi:"endTime"`
	// Verbose information about the last run state
	Message pulumi.StringPtrInput `pulumi:"message"`
	// State of the last run
	RunState pulumi.StringPtrInput `pulumi:"runState"`
	// Sub-state of the last run
	RunSubState pulumi.StringPtrInput `pulumi:"runSubState"`
	// Start time of the last run (UTC)
	StartTime pulumi.StringPtrInput `pulumi:"startTime"`
}

func (ImageTemplateLastRunStatusResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ImageTemplateLastRunStatusResponse)(nil)).Elem()
}

func (i ImageTemplateLastRunStatusResponseArgs) ToImageTemplateLastRunStatusResponseOutput() ImageTemplateLastRunStatusResponseOutput {
	return i.ToImageTemplateLastRunStatusResponseOutputWithContext(context.Background())
}

func (i ImageTemplateLastRunStatusResponseArgs) ToImageTemplateLastRunStatusResponseOutputWithContext(ctx context.Context) ImageTemplateLastRunStatusResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageTemplateLastRunStatusResponseOutput)
}

func (i ImageTemplateLastRunStatusResponseArgs) ToImageTemplateLastRunStatusResponsePtrOutput() ImageTemplateLastRunStatusResponsePtrOutput {
	return i.ToImageTemplateLastRunStatusResponsePtrOutputWithContext(context.Background())
}

func (i ImageTemplateLastRunStatusResponseArgs) ToImageTemplateLastRunStatusResponsePtrOutputWithContext(ctx context.Context) ImageTemplateLastRunStatusResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageTemplateLastRunStatusResponseOutput).ToImageTemplateLastRunStatusResponsePtrOutputWithContext(ctx)
}

// ImageTemplateLastRunStatusResponsePtrInput is an input type that accepts ImageTemplateLastRunStatusResponseArgs, ImageTemplateLastRunStatusResponsePtr and ImageTemplateLastRunStatusResponsePtrOutput values.
// You can construct a concrete instance of `ImageTemplateLastRunStatusResponsePtrInput` via:
//
//          ImageTemplateLastRunStatusResponseArgs{...}
//
//  or:
//
//          nil
type ImageTemplateLastRunStatusResponsePtrInput interface {
	pulumi.Input

	ToImageTemplateLastRunStatusResponsePtrOutput() ImageTemplateLastRunStatusResponsePtrOutput
	ToImageTemplateLastRunStatusResponsePtrOutputWithContext(context.Context) ImageTemplateLastRunStatusResponsePtrOutput
}

type imageTemplateLastRunStatusResponsePtrType ImageTemplateLastRunStatusResponseArgs

func ImageTemplateLastRunStatusResponsePtr(v *ImageTemplateLastRunStatusResponseArgs) ImageTemplateLastRunStatusResponsePtrInput {
	return (*imageTemplateLastRunStatusResponsePtrType)(v)
}

func (*imageTemplateLastRunStatusResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ImageTemplateLastRunStatusResponse)(nil)).Elem()
}

func (i *imageTemplateLastRunStatusResponsePtrType) ToImageTemplateLastRunStatusResponsePtrOutput() ImageTemplateLastRunStatusResponsePtrOutput {
	return i.ToImageTemplateLastRunStatusResponsePtrOutputWithContext(context.Background())
}

func (i *imageTemplateLastRunStatusResponsePtrType) ToImageTemplateLastRunStatusResponsePtrOutputWithContext(ctx context.Context) ImageTemplateLastRunStatusResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageTemplateLastRunStatusResponsePtrOutput)
}

type ImageTemplateLastRunStatusResponseOutput struct{ *pulumi.OutputState }

func (ImageTemplateLastRunStatusResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ImageTemplateLastRunStatusResponse)(nil)).Elem()
}

func (o ImageTemplateLastRunStatusResponseOutput) ToImageTemplateLastRunStatusResponseOutput() ImageTemplateLastRunStatusResponseOutput {
	return o
}

func (o ImageTemplateLastRunStatusResponseOutput) ToImageTemplateLastRunStatusResponseOutputWithContext(ctx context.Context) ImageTemplateLastRunStatusResponseOutput {
	return o
}

func (o ImageTemplateLastRunStatusResponseOutput) ToImageTemplateLastRunStatusResponsePtrOutput() ImageTemplateLastRunStatusResponsePtrOutput {
	return o.ToImageTemplateLastRunStatusResponsePtrOutputWithContext(context.Background())
}

func (o ImageTemplateLastRunStatusResponseOutput) ToImageTemplateLastRunStatusResponsePtrOutputWithContext(ctx context.Context) ImageTemplateLastRunStatusResponsePtrOutput {
	return o.ApplyT(func(v ImageTemplateLastRunStatusResponse) *ImageTemplateLastRunStatusResponse {
		return &v
	}).(ImageTemplateLastRunStatusResponsePtrOutput)
}

// End time of the last run (UTC)
func (o ImageTemplateLastRunStatusResponseOutput) EndTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageTemplateLastRunStatusResponse) *string { return v.EndTime }).(pulumi.StringPtrOutput)
}

// Verbose information about the last run state
func (o ImageTemplateLastRunStatusResponseOutput) Message() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageTemplateLastRunStatusResponse) *string { return v.Message }).(pulumi.StringPtrOutput)
}

// State of the last run
func (o ImageTemplateLastRunStatusResponseOutput) RunState() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageTemplateLastRunStatusResponse) *string { return v.RunState }).(pulumi.StringPtrOutput)
}

// Sub-state of the last run
func (o ImageTemplateLastRunStatusResponseOutput) RunSubState() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageTemplateLastRunStatusResponse) *string { return v.RunSubState }).(pulumi.StringPtrOutput)
}

// Start time of the last run (UTC)
func (o ImageTemplateLastRunStatusResponseOutput) StartTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageTemplateLastRunStatusResponse) *string { return v.StartTime }).(pulumi.StringPtrOutput)
}

type ImageTemplateLastRunStatusResponsePtrOutput struct{ *pulumi.OutputState }

func (ImageTemplateLastRunStatusResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ImageTemplateLastRunStatusResponse)(nil)).Elem()
}

func (o ImageTemplateLastRunStatusResponsePtrOutput) ToImageTemplateLastRunStatusResponsePtrOutput() ImageTemplateLastRunStatusResponsePtrOutput {
	return o
}

func (o ImageTemplateLastRunStatusResponsePtrOutput) ToImageTemplateLastRunStatusResponsePtrOutputWithContext(ctx context.Context) ImageTemplateLastRunStatusResponsePtrOutput {
	return o
}

func (o ImageTemplateLastRunStatusResponsePtrOutput) Elem() ImageTemplateLastRunStatusResponseOutput {
	return o.ApplyT(func(v *ImageTemplateLastRunStatusResponse) ImageTemplateLastRunStatusResponse { return *v }).(ImageTemplateLastRunStatusResponseOutput)
}

// End time of the last run (UTC)
func (o ImageTemplateLastRunStatusResponsePtrOutput) EndTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ImageTemplateLastRunStatusResponse) *string {
		if v == nil {
			return nil
		}
		return v.EndTime
	}).(pulumi.StringPtrOutput)
}

// Verbose information about the last run state
func (o ImageTemplateLastRunStatusResponsePtrOutput) Message() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ImageTemplateLastRunStatusResponse) *string {
		if v == nil {
			return nil
		}
		return v.Message
	}).(pulumi.StringPtrOutput)
}

// State of the last run
func (o ImageTemplateLastRunStatusResponsePtrOutput) RunState() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ImageTemplateLastRunStatusResponse) *string {
		if v == nil {
			return nil
		}
		return v.RunState
	}).(pulumi.StringPtrOutput)
}

// Sub-state of the last run
func (o ImageTemplateLastRunStatusResponsePtrOutput) RunSubState() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ImageTemplateLastRunStatusResponse) *string {
		if v == nil {
			return nil
		}
		return v.RunSubState
	}).(pulumi.StringPtrOutput)
}

// Start time of the last run (UTC)
func (o ImageTemplateLastRunStatusResponsePtrOutput) StartTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ImageTemplateLastRunStatusResponse) *string {
		if v == nil {
			return nil
		}
		return v.StartTime
	}).(pulumi.StringPtrOutput)
}

// Distribute as a Managed Disk Image.
type ImageTemplateManagedImageDistributor struct {
	// Tags that will be applied to the artifact once it has been created/updated by the distributor.
	ArtifactTags map[string]string `pulumi:"artifactTags"`
	// Resource Id of the Managed Disk Image
	ImageId string `pulumi:"imageId"`
	// Azure location for the image, should match if image already exists
	Location string `pulumi:"location"`
	// The name to be used for the associated RunOutput.
	RunOutputName string `pulumi:"runOutputName"`
	// Type of distribution.
	// Expected value is 'ManagedImage'.
	Type string `pulumi:"type"`
}

// ImageTemplateManagedImageDistributorInput is an input type that accepts ImageTemplateManagedImageDistributorArgs and ImageTemplateManagedImageDistributorOutput values.
// You can construct a concrete instance of `ImageTemplateManagedImageDistributorInput` via:
//
//          ImageTemplateManagedImageDistributorArgs{...}
type ImageTemplateManagedImageDistributorInput interface {
	pulumi.Input

	ToImageTemplateManagedImageDistributorOutput() ImageTemplateManagedImageDistributorOutput
	ToImageTemplateManagedImageDistributorOutputWithContext(context.Context) ImageTemplateManagedImageDistributorOutput
}

// Distribute as a Managed Disk Image.
type ImageTemplateManagedImageDistributorArgs struct {
	// Tags that will be applied to the artifact once it has been created/updated by the distributor.
	ArtifactTags pulumi.StringMapInput `pulumi:"artifactTags"`
	// Resource Id of the Managed Disk Image
	ImageId pulumi.StringInput `pulumi:"imageId"`
	// Azure location for the image, should match if image already exists
	Location pulumi.StringInput `pulumi:"location"`
	// The name to be used for the associated RunOutput.
	RunOutputName pulumi.StringInput `pulumi:"runOutputName"`
	// Type of distribution.
	// Expected value is 'ManagedImage'.
	Type pulumi.StringInput `pulumi:"type"`
}

func (ImageTemplateManagedImageDistributorArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ImageTemplateManagedImageDistributor)(nil)).Elem()
}

func (i ImageTemplateManagedImageDistributorArgs) ToImageTemplateManagedImageDistributorOutput() ImageTemplateManagedImageDistributorOutput {
	return i.ToImageTemplateManagedImageDistributorOutputWithContext(context.Background())
}

func (i ImageTemplateManagedImageDistributorArgs) ToImageTemplateManagedImageDistributorOutputWithContext(ctx context.Context) ImageTemplateManagedImageDistributorOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageTemplateManagedImageDistributorOutput)
}

// Distribute as a Managed Disk Image.
type ImageTemplateManagedImageDistributorOutput struct{ *pulumi.OutputState }

func (ImageTemplateManagedImageDistributorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ImageTemplateManagedImageDistributor)(nil)).Elem()
}

func (o ImageTemplateManagedImageDistributorOutput) ToImageTemplateManagedImageDistributorOutput() ImageTemplateManagedImageDistributorOutput {
	return o
}

func (o ImageTemplateManagedImageDistributorOutput) ToImageTemplateManagedImageDistributorOutputWithContext(ctx context.Context) ImageTemplateManagedImageDistributorOutput {
	return o
}

// Tags that will be applied to the artifact once it has been created/updated by the distributor.
func (o ImageTemplateManagedImageDistributorOutput) ArtifactTags() pulumi.StringMapOutput {
	return o.ApplyT(func(v ImageTemplateManagedImageDistributor) map[string]string { return v.ArtifactTags }).(pulumi.StringMapOutput)
}

// Resource Id of the Managed Disk Image
func (o ImageTemplateManagedImageDistributorOutput) ImageId() pulumi.StringOutput {
	return o.ApplyT(func(v ImageTemplateManagedImageDistributor) string { return v.ImageId }).(pulumi.StringOutput)
}

// Azure location for the image, should match if image already exists
func (o ImageTemplateManagedImageDistributorOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v ImageTemplateManagedImageDistributor) string { return v.Location }).(pulumi.StringOutput)
}

// The name to be used for the associated RunOutput.
func (o ImageTemplateManagedImageDistributorOutput) RunOutputName() pulumi.StringOutput {
	return o.ApplyT(func(v ImageTemplateManagedImageDistributor) string { return v.RunOutputName }).(pulumi.StringOutput)
}

// Type of distribution.
// Expected value is 'ManagedImage'.
func (o ImageTemplateManagedImageDistributorOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ImageTemplateManagedImageDistributor) string { return v.Type }).(pulumi.StringOutput)
}

// Distribute as a Managed Disk Image.
type ImageTemplateManagedImageDistributorInvokeResponse struct {
	// Tags that will be applied to the artifact once it has been created/updated by the distributor.
	ArtifactTags map[string]string `pulumi:"artifactTags"`
	// Resource Id of the Managed Disk Image
	ImageId string `pulumi:"imageId"`
	// Azure location for the image, should match if image already exists
	Location string `pulumi:"location"`
	// The name to be used for the associated RunOutput.
	RunOutputName string `pulumi:"runOutputName"`
	// Type of distribution.
	// Expected value is 'ManagedImage'.
	Type string `pulumi:"type"`
}

// ImageTemplateManagedImageDistributorInvokeResponseInput is an input type that accepts ImageTemplateManagedImageDistributorInvokeResponseArgs and ImageTemplateManagedImageDistributorInvokeResponseOutput values.
// You can construct a concrete instance of `ImageTemplateManagedImageDistributorInvokeResponseInput` via:
//
//          ImageTemplateManagedImageDistributorInvokeResponseArgs{...}
type ImageTemplateManagedImageDistributorInvokeResponseInput interface {
	pulumi.Input

	ToImageTemplateManagedImageDistributorInvokeResponseOutput() ImageTemplateManagedImageDistributorInvokeResponseOutput
	ToImageTemplateManagedImageDistributorInvokeResponseOutputWithContext(context.Context) ImageTemplateManagedImageDistributorInvokeResponseOutput
}

// Distribute as a Managed Disk Image.
type ImageTemplateManagedImageDistributorInvokeResponseArgs struct {
	// Tags that will be applied to the artifact once it has been created/updated by the distributor.
	ArtifactTags pulumi.StringMapInput `pulumi:"artifactTags"`
	// Resource Id of the Managed Disk Image
	ImageId pulumi.StringInput `pulumi:"imageId"`
	// Azure location for the image, should match if image already exists
	Location pulumi.StringInput `pulumi:"location"`
	// The name to be used for the associated RunOutput.
	RunOutputName pulumi.StringInput `pulumi:"runOutputName"`
	// Type of distribution.
	// Expected value is 'ManagedImage'.
	Type pulumi.StringInput `pulumi:"type"`
}

func (ImageTemplateManagedImageDistributorInvokeResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ImageTemplateManagedImageDistributorInvokeResponse)(nil)).Elem()
}

func (i ImageTemplateManagedImageDistributorInvokeResponseArgs) ToImageTemplateManagedImageDistributorInvokeResponseOutput() ImageTemplateManagedImageDistributorInvokeResponseOutput {
	return i.ToImageTemplateManagedImageDistributorInvokeResponseOutputWithContext(context.Background())
}

func (i ImageTemplateManagedImageDistributorInvokeResponseArgs) ToImageTemplateManagedImageDistributorInvokeResponseOutputWithContext(ctx context.Context) ImageTemplateManagedImageDistributorInvokeResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageTemplateManagedImageDistributorInvokeResponseOutput)
}

// Distribute as a Managed Disk Image.
type ImageTemplateManagedImageDistributorInvokeResponseOutput struct{ *pulumi.OutputState }

func (ImageTemplateManagedImageDistributorInvokeResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ImageTemplateManagedImageDistributorInvokeResponse)(nil)).Elem()
}

func (o ImageTemplateManagedImageDistributorInvokeResponseOutput) ToImageTemplateManagedImageDistributorInvokeResponseOutput() ImageTemplateManagedImageDistributorInvokeResponseOutput {
	return o
}

func (o ImageTemplateManagedImageDistributorInvokeResponseOutput) ToImageTemplateManagedImageDistributorInvokeResponseOutputWithContext(ctx context.Context) ImageTemplateManagedImageDistributorInvokeResponseOutput {
	return o
}

// Tags that will be applied to the artifact once it has been created/updated by the distributor.
func (o ImageTemplateManagedImageDistributorInvokeResponseOutput) ArtifactTags() pulumi.StringMapOutput {
	return o.ApplyT(func(v ImageTemplateManagedImageDistributorInvokeResponse) map[string]string { return v.ArtifactTags }).(pulumi.StringMapOutput)
}

// Resource Id of the Managed Disk Image
func (o ImageTemplateManagedImageDistributorInvokeResponseOutput) ImageId() pulumi.StringOutput {
	return o.ApplyT(func(v ImageTemplateManagedImageDistributorInvokeResponse) string { return v.ImageId }).(pulumi.StringOutput)
}

// Azure location for the image, should match if image already exists
func (o ImageTemplateManagedImageDistributorInvokeResponseOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v ImageTemplateManagedImageDistributorInvokeResponse) string { return v.Location }).(pulumi.StringOutput)
}

// The name to be used for the associated RunOutput.
func (o ImageTemplateManagedImageDistributorInvokeResponseOutput) RunOutputName() pulumi.StringOutput {
	return o.ApplyT(func(v ImageTemplateManagedImageDistributorInvokeResponse) string { return v.RunOutputName }).(pulumi.StringOutput)
}

// Type of distribution.
// Expected value is 'ManagedImage'.
func (o ImageTemplateManagedImageDistributorInvokeResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ImageTemplateManagedImageDistributorInvokeResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Distribute as a Managed Disk Image.
type ImageTemplateManagedImageDistributorResponse struct {
	// Tags that will be applied to the artifact once it has been created/updated by the distributor.
	ArtifactTags map[string]string `pulumi:"artifactTags"`
	// Resource Id of the Managed Disk Image
	ImageId string `pulumi:"imageId"`
	// Azure location for the image, should match if image already exists
	Location string `pulumi:"location"`
	// The name to be used for the associated RunOutput.
	RunOutputName string `pulumi:"runOutputName"`
	// Type of distribution.
	// Expected value is 'ManagedImage'.
	Type string `pulumi:"type"`
}

// ImageTemplateManagedImageDistributorResponseInput is an input type that accepts ImageTemplateManagedImageDistributorResponseArgs and ImageTemplateManagedImageDistributorResponseOutput values.
// You can construct a concrete instance of `ImageTemplateManagedImageDistributorResponseInput` via:
//
//          ImageTemplateManagedImageDistributorResponseArgs{...}
type ImageTemplateManagedImageDistributorResponseInput interface {
	pulumi.Input

	ToImageTemplateManagedImageDistributorResponseOutput() ImageTemplateManagedImageDistributorResponseOutput
	ToImageTemplateManagedImageDistributorResponseOutputWithContext(context.Context) ImageTemplateManagedImageDistributorResponseOutput
}

// Distribute as a Managed Disk Image.
type ImageTemplateManagedImageDistributorResponseArgs struct {
	// Tags that will be applied to the artifact once it has been created/updated by the distributor.
	ArtifactTags pulumi.StringMapInput `pulumi:"artifactTags"`
	// Resource Id of the Managed Disk Image
	ImageId pulumi.StringInput `pulumi:"imageId"`
	// Azure location for the image, should match if image already exists
	Location pulumi.StringInput `pulumi:"location"`
	// The name to be used for the associated RunOutput.
	RunOutputName pulumi.StringInput `pulumi:"runOutputName"`
	// Type of distribution.
	// Expected value is 'ManagedImage'.
	Type pulumi.StringInput `pulumi:"type"`
}

func (ImageTemplateManagedImageDistributorResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ImageTemplateManagedImageDistributorResponse)(nil)).Elem()
}

func (i ImageTemplateManagedImageDistributorResponseArgs) ToImageTemplateManagedImageDistributorResponseOutput() ImageTemplateManagedImageDistributorResponseOutput {
	return i.ToImageTemplateManagedImageDistributorResponseOutputWithContext(context.Background())
}

func (i ImageTemplateManagedImageDistributorResponseArgs) ToImageTemplateManagedImageDistributorResponseOutputWithContext(ctx context.Context) ImageTemplateManagedImageDistributorResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageTemplateManagedImageDistributorResponseOutput)
}

// Distribute as a Managed Disk Image.
type ImageTemplateManagedImageDistributorResponseOutput struct{ *pulumi.OutputState }

func (ImageTemplateManagedImageDistributorResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ImageTemplateManagedImageDistributorResponse)(nil)).Elem()
}

func (o ImageTemplateManagedImageDistributorResponseOutput) ToImageTemplateManagedImageDistributorResponseOutput() ImageTemplateManagedImageDistributorResponseOutput {
	return o
}

func (o ImageTemplateManagedImageDistributorResponseOutput) ToImageTemplateManagedImageDistributorResponseOutputWithContext(ctx context.Context) ImageTemplateManagedImageDistributorResponseOutput {
	return o
}

// Tags that will be applied to the artifact once it has been created/updated by the distributor.
func (o ImageTemplateManagedImageDistributorResponseOutput) ArtifactTags() pulumi.StringMapOutput {
	return o.ApplyT(func(v ImageTemplateManagedImageDistributorResponse) map[string]string { return v.ArtifactTags }).(pulumi.StringMapOutput)
}

// Resource Id of the Managed Disk Image
func (o ImageTemplateManagedImageDistributorResponseOutput) ImageId() pulumi.StringOutput {
	return o.ApplyT(func(v ImageTemplateManagedImageDistributorResponse) string { return v.ImageId }).(pulumi.StringOutput)
}

// Azure location for the image, should match if image already exists
func (o ImageTemplateManagedImageDistributorResponseOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v ImageTemplateManagedImageDistributorResponse) string { return v.Location }).(pulumi.StringOutput)
}

// The name to be used for the associated RunOutput.
func (o ImageTemplateManagedImageDistributorResponseOutput) RunOutputName() pulumi.StringOutput {
	return o.ApplyT(func(v ImageTemplateManagedImageDistributorResponse) string { return v.RunOutputName }).(pulumi.StringOutput)
}

// Type of distribution.
// Expected value is 'ManagedImage'.
func (o ImageTemplateManagedImageDistributorResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ImageTemplateManagedImageDistributorResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Describes an image source that is a managed image in customer subscription.
type ImageTemplateManagedImageSource struct {
	// ARM resource id of the managed image in customer subscription
	ImageId string `pulumi:"imageId"`
	// Specifies the type of source image you want to start with.
	// Expected value is 'ManagedImage'.
	Type string `pulumi:"type"`
}

// ImageTemplateManagedImageSourceInput is an input type that accepts ImageTemplateManagedImageSourceArgs and ImageTemplateManagedImageSourceOutput values.
// You can construct a concrete instance of `ImageTemplateManagedImageSourceInput` via:
//
//          ImageTemplateManagedImageSourceArgs{...}
type ImageTemplateManagedImageSourceInput interface {
	pulumi.Input

	ToImageTemplateManagedImageSourceOutput() ImageTemplateManagedImageSourceOutput
	ToImageTemplateManagedImageSourceOutputWithContext(context.Context) ImageTemplateManagedImageSourceOutput
}

// Describes an image source that is a managed image in customer subscription.
type ImageTemplateManagedImageSourceArgs struct {
	// ARM resource id of the managed image in customer subscription
	ImageId pulumi.StringInput `pulumi:"imageId"`
	// Specifies the type of source image you want to start with.
	// Expected value is 'ManagedImage'.
	Type pulumi.StringInput `pulumi:"type"`
}

func (ImageTemplateManagedImageSourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ImageTemplateManagedImageSource)(nil)).Elem()
}

func (i ImageTemplateManagedImageSourceArgs) ToImageTemplateManagedImageSourceOutput() ImageTemplateManagedImageSourceOutput {
	return i.ToImageTemplateManagedImageSourceOutputWithContext(context.Background())
}

func (i ImageTemplateManagedImageSourceArgs) ToImageTemplateManagedImageSourceOutputWithContext(ctx context.Context) ImageTemplateManagedImageSourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageTemplateManagedImageSourceOutput)
}

// Describes an image source that is a managed image in customer subscription.
type ImageTemplateManagedImageSourceOutput struct{ *pulumi.OutputState }

func (ImageTemplateManagedImageSourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ImageTemplateManagedImageSource)(nil)).Elem()
}

func (o ImageTemplateManagedImageSourceOutput) ToImageTemplateManagedImageSourceOutput() ImageTemplateManagedImageSourceOutput {
	return o
}

func (o ImageTemplateManagedImageSourceOutput) ToImageTemplateManagedImageSourceOutputWithContext(ctx context.Context) ImageTemplateManagedImageSourceOutput {
	return o
}

// ARM resource id of the managed image in customer subscription
func (o ImageTemplateManagedImageSourceOutput) ImageId() pulumi.StringOutput {
	return o.ApplyT(func(v ImageTemplateManagedImageSource) string { return v.ImageId }).(pulumi.StringOutput)
}

// Specifies the type of source image you want to start with.
// Expected value is 'ManagedImage'.
func (o ImageTemplateManagedImageSourceOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ImageTemplateManagedImageSource) string { return v.Type }).(pulumi.StringOutput)
}

// Describes an image source that is a managed image in customer subscription.
type ImageTemplateManagedImageSourceInvokeResponse struct {
	// ARM resource id of the managed image in customer subscription
	ImageId string `pulumi:"imageId"`
	// Specifies the type of source image you want to start with.
	// Expected value is 'ManagedImage'.
	Type string `pulumi:"type"`
}

// ImageTemplateManagedImageSourceInvokeResponseInput is an input type that accepts ImageTemplateManagedImageSourceInvokeResponseArgs and ImageTemplateManagedImageSourceInvokeResponseOutput values.
// You can construct a concrete instance of `ImageTemplateManagedImageSourceInvokeResponseInput` via:
//
//          ImageTemplateManagedImageSourceInvokeResponseArgs{...}
type ImageTemplateManagedImageSourceInvokeResponseInput interface {
	pulumi.Input

	ToImageTemplateManagedImageSourceInvokeResponseOutput() ImageTemplateManagedImageSourceInvokeResponseOutput
	ToImageTemplateManagedImageSourceInvokeResponseOutputWithContext(context.Context) ImageTemplateManagedImageSourceInvokeResponseOutput
}

// Describes an image source that is a managed image in customer subscription.
type ImageTemplateManagedImageSourceInvokeResponseArgs struct {
	// ARM resource id of the managed image in customer subscription
	ImageId pulumi.StringInput `pulumi:"imageId"`
	// Specifies the type of source image you want to start with.
	// Expected value is 'ManagedImage'.
	Type pulumi.StringInput `pulumi:"type"`
}

func (ImageTemplateManagedImageSourceInvokeResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ImageTemplateManagedImageSourceInvokeResponse)(nil)).Elem()
}

func (i ImageTemplateManagedImageSourceInvokeResponseArgs) ToImageTemplateManagedImageSourceInvokeResponseOutput() ImageTemplateManagedImageSourceInvokeResponseOutput {
	return i.ToImageTemplateManagedImageSourceInvokeResponseOutputWithContext(context.Background())
}

func (i ImageTemplateManagedImageSourceInvokeResponseArgs) ToImageTemplateManagedImageSourceInvokeResponseOutputWithContext(ctx context.Context) ImageTemplateManagedImageSourceInvokeResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageTemplateManagedImageSourceInvokeResponseOutput)
}

// Describes an image source that is a managed image in customer subscription.
type ImageTemplateManagedImageSourceInvokeResponseOutput struct{ *pulumi.OutputState }

func (ImageTemplateManagedImageSourceInvokeResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ImageTemplateManagedImageSourceInvokeResponse)(nil)).Elem()
}

func (o ImageTemplateManagedImageSourceInvokeResponseOutput) ToImageTemplateManagedImageSourceInvokeResponseOutput() ImageTemplateManagedImageSourceInvokeResponseOutput {
	return o
}

func (o ImageTemplateManagedImageSourceInvokeResponseOutput) ToImageTemplateManagedImageSourceInvokeResponseOutputWithContext(ctx context.Context) ImageTemplateManagedImageSourceInvokeResponseOutput {
	return o
}

// ARM resource id of the managed image in customer subscription
func (o ImageTemplateManagedImageSourceInvokeResponseOutput) ImageId() pulumi.StringOutput {
	return o.ApplyT(func(v ImageTemplateManagedImageSourceInvokeResponse) string { return v.ImageId }).(pulumi.StringOutput)
}

// Specifies the type of source image you want to start with.
// Expected value is 'ManagedImage'.
func (o ImageTemplateManagedImageSourceInvokeResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ImageTemplateManagedImageSourceInvokeResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Describes an image source that is a managed image in customer subscription.
type ImageTemplateManagedImageSourceResponse struct {
	// ARM resource id of the managed image in customer subscription
	ImageId string `pulumi:"imageId"`
	// Specifies the type of source image you want to start with.
	// Expected value is 'ManagedImage'.
	Type string `pulumi:"type"`
}

// ImageTemplateManagedImageSourceResponseInput is an input type that accepts ImageTemplateManagedImageSourceResponseArgs and ImageTemplateManagedImageSourceResponseOutput values.
// You can construct a concrete instance of `ImageTemplateManagedImageSourceResponseInput` via:
//
//          ImageTemplateManagedImageSourceResponseArgs{...}
type ImageTemplateManagedImageSourceResponseInput interface {
	pulumi.Input

	ToImageTemplateManagedImageSourceResponseOutput() ImageTemplateManagedImageSourceResponseOutput
	ToImageTemplateManagedImageSourceResponseOutputWithContext(context.Context) ImageTemplateManagedImageSourceResponseOutput
}

// Describes an image source that is a managed image in customer subscription.
type ImageTemplateManagedImageSourceResponseArgs struct {
	// ARM resource id of the managed image in customer subscription
	ImageId pulumi.StringInput `pulumi:"imageId"`
	// Specifies the type of source image you want to start with.
	// Expected value is 'ManagedImage'.
	Type pulumi.StringInput `pulumi:"type"`
}

func (ImageTemplateManagedImageSourceResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ImageTemplateManagedImageSourceResponse)(nil)).Elem()
}

func (i ImageTemplateManagedImageSourceResponseArgs) ToImageTemplateManagedImageSourceResponseOutput() ImageTemplateManagedImageSourceResponseOutput {
	return i.ToImageTemplateManagedImageSourceResponseOutputWithContext(context.Background())
}

func (i ImageTemplateManagedImageSourceResponseArgs) ToImageTemplateManagedImageSourceResponseOutputWithContext(ctx context.Context) ImageTemplateManagedImageSourceResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageTemplateManagedImageSourceResponseOutput)
}

// Describes an image source that is a managed image in customer subscription.
type ImageTemplateManagedImageSourceResponseOutput struct{ *pulumi.OutputState }

func (ImageTemplateManagedImageSourceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ImageTemplateManagedImageSourceResponse)(nil)).Elem()
}

func (o ImageTemplateManagedImageSourceResponseOutput) ToImageTemplateManagedImageSourceResponseOutput() ImageTemplateManagedImageSourceResponseOutput {
	return o
}

func (o ImageTemplateManagedImageSourceResponseOutput) ToImageTemplateManagedImageSourceResponseOutputWithContext(ctx context.Context) ImageTemplateManagedImageSourceResponseOutput {
	return o
}

// ARM resource id of the managed image in customer subscription
func (o ImageTemplateManagedImageSourceResponseOutput) ImageId() pulumi.StringOutput {
	return o.ApplyT(func(v ImageTemplateManagedImageSourceResponse) string { return v.ImageId }).(pulumi.StringOutput)
}

// Specifies the type of source image you want to start with.
// Expected value is 'ManagedImage'.
func (o ImageTemplateManagedImageSourceResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ImageTemplateManagedImageSourceResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Describes an image source from [Azure Gallery Images](https://docs.microsoft.com/en-us/rest/api/compute/virtualmachineimages).
type ImageTemplatePlatformImageSource struct {
	// Image offer from the [Azure Gallery Images](https://docs.microsoft.com/en-us/rest/api/compute/virtualmachineimages).
	Offer *string `pulumi:"offer"`
	// Image Publisher in [Azure Gallery Images](https://docs.microsoft.com/en-us/rest/api/compute/virtualmachineimages).
	Publisher *string `pulumi:"publisher"`
	// Image sku from the [Azure Gallery Images](https://docs.microsoft.com/en-us/rest/api/compute/virtualmachineimages).
	Sku *string `pulumi:"sku"`
	// Specifies the type of source image you want to start with.
	// Expected value is 'PlatformImage'.
	Type string `pulumi:"type"`
	// Image version from the [Azure Gallery Images](https://docs.microsoft.com/en-us/rest/api/compute/virtualmachineimages).
	Version *string `pulumi:"version"`
}

// ImageTemplatePlatformImageSourceInput is an input type that accepts ImageTemplatePlatformImageSourceArgs and ImageTemplatePlatformImageSourceOutput values.
// You can construct a concrete instance of `ImageTemplatePlatformImageSourceInput` via:
//
//          ImageTemplatePlatformImageSourceArgs{...}
type ImageTemplatePlatformImageSourceInput interface {
	pulumi.Input

	ToImageTemplatePlatformImageSourceOutput() ImageTemplatePlatformImageSourceOutput
	ToImageTemplatePlatformImageSourceOutputWithContext(context.Context) ImageTemplatePlatformImageSourceOutput
}

// Describes an image source from [Azure Gallery Images](https://docs.microsoft.com/en-us/rest/api/compute/virtualmachineimages).
type ImageTemplatePlatformImageSourceArgs struct {
	// Image offer from the [Azure Gallery Images](https://docs.microsoft.com/en-us/rest/api/compute/virtualmachineimages).
	Offer pulumi.StringPtrInput `pulumi:"offer"`
	// Image Publisher in [Azure Gallery Images](https://docs.microsoft.com/en-us/rest/api/compute/virtualmachineimages).
	Publisher pulumi.StringPtrInput `pulumi:"publisher"`
	// Image sku from the [Azure Gallery Images](https://docs.microsoft.com/en-us/rest/api/compute/virtualmachineimages).
	Sku pulumi.StringPtrInput `pulumi:"sku"`
	// Specifies the type of source image you want to start with.
	// Expected value is 'PlatformImage'.
	Type pulumi.StringInput `pulumi:"type"`
	// Image version from the [Azure Gallery Images](https://docs.microsoft.com/en-us/rest/api/compute/virtualmachineimages).
	Version pulumi.StringPtrInput `pulumi:"version"`
}

func (ImageTemplatePlatformImageSourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ImageTemplatePlatformImageSource)(nil)).Elem()
}

func (i ImageTemplatePlatformImageSourceArgs) ToImageTemplatePlatformImageSourceOutput() ImageTemplatePlatformImageSourceOutput {
	return i.ToImageTemplatePlatformImageSourceOutputWithContext(context.Background())
}

func (i ImageTemplatePlatformImageSourceArgs) ToImageTemplatePlatformImageSourceOutputWithContext(ctx context.Context) ImageTemplatePlatformImageSourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageTemplatePlatformImageSourceOutput)
}

// Describes an image source from [Azure Gallery Images](https://docs.microsoft.com/en-us/rest/api/compute/virtualmachineimages).
type ImageTemplatePlatformImageSourceOutput struct{ *pulumi.OutputState }

func (ImageTemplatePlatformImageSourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ImageTemplatePlatformImageSource)(nil)).Elem()
}

func (o ImageTemplatePlatformImageSourceOutput) ToImageTemplatePlatformImageSourceOutput() ImageTemplatePlatformImageSourceOutput {
	return o
}

func (o ImageTemplatePlatformImageSourceOutput) ToImageTemplatePlatformImageSourceOutputWithContext(ctx context.Context) ImageTemplatePlatformImageSourceOutput {
	return o
}

// Image offer from the [Azure Gallery Images](https://docs.microsoft.com/en-us/rest/api/compute/virtualmachineimages).
func (o ImageTemplatePlatformImageSourceOutput) Offer() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageTemplatePlatformImageSource) *string { return v.Offer }).(pulumi.StringPtrOutput)
}

// Image Publisher in [Azure Gallery Images](https://docs.microsoft.com/en-us/rest/api/compute/virtualmachineimages).
func (o ImageTemplatePlatformImageSourceOutput) Publisher() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageTemplatePlatformImageSource) *string { return v.Publisher }).(pulumi.StringPtrOutput)
}

// Image sku from the [Azure Gallery Images](https://docs.microsoft.com/en-us/rest/api/compute/virtualmachineimages).
func (o ImageTemplatePlatformImageSourceOutput) Sku() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageTemplatePlatformImageSource) *string { return v.Sku }).(pulumi.StringPtrOutput)
}

// Specifies the type of source image you want to start with.
// Expected value is 'PlatformImage'.
func (o ImageTemplatePlatformImageSourceOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ImageTemplatePlatformImageSource) string { return v.Type }).(pulumi.StringOutput)
}

// Image version from the [Azure Gallery Images](https://docs.microsoft.com/en-us/rest/api/compute/virtualmachineimages).
func (o ImageTemplatePlatformImageSourceOutput) Version() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageTemplatePlatformImageSource) *string { return v.Version }).(pulumi.StringPtrOutput)
}

// Describes an image source from [Azure Gallery Images](https://docs.microsoft.com/en-us/rest/api/compute/virtualmachineimages).
type ImageTemplatePlatformImageSourceInvokeResponse struct {
	// Image offer from the [Azure Gallery Images](https://docs.microsoft.com/en-us/rest/api/compute/virtualmachineimages).
	Offer *string `pulumi:"offer"`
	// Image Publisher in [Azure Gallery Images](https://docs.microsoft.com/en-us/rest/api/compute/virtualmachineimages).
	Publisher *string `pulumi:"publisher"`
	// Image sku from the [Azure Gallery Images](https://docs.microsoft.com/en-us/rest/api/compute/virtualmachineimages).
	Sku *string `pulumi:"sku"`
	// Specifies the type of source image you want to start with.
	// Expected value is 'PlatformImage'.
	Type string `pulumi:"type"`
	// Image version from the [Azure Gallery Images](https://docs.microsoft.com/en-us/rest/api/compute/virtualmachineimages).
	Version *string `pulumi:"version"`
}

// ImageTemplatePlatformImageSourceInvokeResponseInput is an input type that accepts ImageTemplatePlatformImageSourceInvokeResponseArgs and ImageTemplatePlatformImageSourceInvokeResponseOutput values.
// You can construct a concrete instance of `ImageTemplatePlatformImageSourceInvokeResponseInput` via:
//
//          ImageTemplatePlatformImageSourceInvokeResponseArgs{...}
type ImageTemplatePlatformImageSourceInvokeResponseInput interface {
	pulumi.Input

	ToImageTemplatePlatformImageSourceInvokeResponseOutput() ImageTemplatePlatformImageSourceInvokeResponseOutput
	ToImageTemplatePlatformImageSourceInvokeResponseOutputWithContext(context.Context) ImageTemplatePlatformImageSourceInvokeResponseOutput
}

// Describes an image source from [Azure Gallery Images](https://docs.microsoft.com/en-us/rest/api/compute/virtualmachineimages).
type ImageTemplatePlatformImageSourceInvokeResponseArgs struct {
	// Image offer from the [Azure Gallery Images](https://docs.microsoft.com/en-us/rest/api/compute/virtualmachineimages).
	Offer pulumi.StringPtrInput `pulumi:"offer"`
	// Image Publisher in [Azure Gallery Images](https://docs.microsoft.com/en-us/rest/api/compute/virtualmachineimages).
	Publisher pulumi.StringPtrInput `pulumi:"publisher"`
	// Image sku from the [Azure Gallery Images](https://docs.microsoft.com/en-us/rest/api/compute/virtualmachineimages).
	Sku pulumi.StringPtrInput `pulumi:"sku"`
	// Specifies the type of source image you want to start with.
	// Expected value is 'PlatformImage'.
	Type pulumi.StringInput `pulumi:"type"`
	// Image version from the [Azure Gallery Images](https://docs.microsoft.com/en-us/rest/api/compute/virtualmachineimages).
	Version pulumi.StringPtrInput `pulumi:"version"`
}

func (ImageTemplatePlatformImageSourceInvokeResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ImageTemplatePlatformImageSourceInvokeResponse)(nil)).Elem()
}

func (i ImageTemplatePlatformImageSourceInvokeResponseArgs) ToImageTemplatePlatformImageSourceInvokeResponseOutput() ImageTemplatePlatformImageSourceInvokeResponseOutput {
	return i.ToImageTemplatePlatformImageSourceInvokeResponseOutputWithContext(context.Background())
}

func (i ImageTemplatePlatformImageSourceInvokeResponseArgs) ToImageTemplatePlatformImageSourceInvokeResponseOutputWithContext(ctx context.Context) ImageTemplatePlatformImageSourceInvokeResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageTemplatePlatformImageSourceInvokeResponseOutput)
}

// Describes an image source from [Azure Gallery Images](https://docs.microsoft.com/en-us/rest/api/compute/virtualmachineimages).
type ImageTemplatePlatformImageSourceInvokeResponseOutput struct{ *pulumi.OutputState }

func (ImageTemplatePlatformImageSourceInvokeResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ImageTemplatePlatformImageSourceInvokeResponse)(nil)).Elem()
}

func (o ImageTemplatePlatformImageSourceInvokeResponseOutput) ToImageTemplatePlatformImageSourceInvokeResponseOutput() ImageTemplatePlatformImageSourceInvokeResponseOutput {
	return o
}

func (o ImageTemplatePlatformImageSourceInvokeResponseOutput) ToImageTemplatePlatformImageSourceInvokeResponseOutputWithContext(ctx context.Context) ImageTemplatePlatformImageSourceInvokeResponseOutput {
	return o
}

// Image offer from the [Azure Gallery Images](https://docs.microsoft.com/en-us/rest/api/compute/virtualmachineimages).
func (o ImageTemplatePlatformImageSourceInvokeResponseOutput) Offer() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageTemplatePlatformImageSourceInvokeResponse) *string { return v.Offer }).(pulumi.StringPtrOutput)
}

// Image Publisher in [Azure Gallery Images](https://docs.microsoft.com/en-us/rest/api/compute/virtualmachineimages).
func (o ImageTemplatePlatformImageSourceInvokeResponseOutput) Publisher() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageTemplatePlatformImageSourceInvokeResponse) *string { return v.Publisher }).(pulumi.StringPtrOutput)
}

// Image sku from the [Azure Gallery Images](https://docs.microsoft.com/en-us/rest/api/compute/virtualmachineimages).
func (o ImageTemplatePlatformImageSourceInvokeResponseOutput) Sku() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageTemplatePlatformImageSourceInvokeResponse) *string { return v.Sku }).(pulumi.StringPtrOutput)
}

// Specifies the type of source image you want to start with.
// Expected value is 'PlatformImage'.
func (o ImageTemplatePlatformImageSourceInvokeResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ImageTemplatePlatformImageSourceInvokeResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Image version from the [Azure Gallery Images](https://docs.microsoft.com/en-us/rest/api/compute/virtualmachineimages).
func (o ImageTemplatePlatformImageSourceInvokeResponseOutput) Version() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageTemplatePlatformImageSourceInvokeResponse) *string { return v.Version }).(pulumi.StringPtrOutput)
}

// Describes an image source from [Azure Gallery Images](https://docs.microsoft.com/en-us/rest/api/compute/virtualmachineimages).
type ImageTemplatePlatformImageSourceResponse struct {
	// Image offer from the [Azure Gallery Images](https://docs.microsoft.com/en-us/rest/api/compute/virtualmachineimages).
	Offer *string `pulumi:"offer"`
	// Image Publisher in [Azure Gallery Images](https://docs.microsoft.com/en-us/rest/api/compute/virtualmachineimages).
	Publisher *string `pulumi:"publisher"`
	// Image sku from the [Azure Gallery Images](https://docs.microsoft.com/en-us/rest/api/compute/virtualmachineimages).
	Sku *string `pulumi:"sku"`
	// Specifies the type of source image you want to start with.
	// Expected value is 'PlatformImage'.
	Type string `pulumi:"type"`
	// Image version from the [Azure Gallery Images](https://docs.microsoft.com/en-us/rest/api/compute/virtualmachineimages).
	Version *string `pulumi:"version"`
}

// ImageTemplatePlatformImageSourceResponseInput is an input type that accepts ImageTemplatePlatformImageSourceResponseArgs and ImageTemplatePlatformImageSourceResponseOutput values.
// You can construct a concrete instance of `ImageTemplatePlatformImageSourceResponseInput` via:
//
//          ImageTemplatePlatformImageSourceResponseArgs{...}
type ImageTemplatePlatformImageSourceResponseInput interface {
	pulumi.Input

	ToImageTemplatePlatformImageSourceResponseOutput() ImageTemplatePlatformImageSourceResponseOutput
	ToImageTemplatePlatformImageSourceResponseOutputWithContext(context.Context) ImageTemplatePlatformImageSourceResponseOutput
}

// Describes an image source from [Azure Gallery Images](https://docs.microsoft.com/en-us/rest/api/compute/virtualmachineimages).
type ImageTemplatePlatformImageSourceResponseArgs struct {
	// Image offer from the [Azure Gallery Images](https://docs.microsoft.com/en-us/rest/api/compute/virtualmachineimages).
	Offer pulumi.StringPtrInput `pulumi:"offer"`
	// Image Publisher in [Azure Gallery Images](https://docs.microsoft.com/en-us/rest/api/compute/virtualmachineimages).
	Publisher pulumi.StringPtrInput `pulumi:"publisher"`
	// Image sku from the [Azure Gallery Images](https://docs.microsoft.com/en-us/rest/api/compute/virtualmachineimages).
	Sku pulumi.StringPtrInput `pulumi:"sku"`
	// Specifies the type of source image you want to start with.
	// Expected value is 'PlatformImage'.
	Type pulumi.StringInput `pulumi:"type"`
	// Image version from the [Azure Gallery Images](https://docs.microsoft.com/en-us/rest/api/compute/virtualmachineimages).
	Version pulumi.StringPtrInput `pulumi:"version"`
}

func (ImageTemplatePlatformImageSourceResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ImageTemplatePlatformImageSourceResponse)(nil)).Elem()
}

func (i ImageTemplatePlatformImageSourceResponseArgs) ToImageTemplatePlatformImageSourceResponseOutput() ImageTemplatePlatformImageSourceResponseOutput {
	return i.ToImageTemplatePlatformImageSourceResponseOutputWithContext(context.Background())
}

func (i ImageTemplatePlatformImageSourceResponseArgs) ToImageTemplatePlatformImageSourceResponseOutputWithContext(ctx context.Context) ImageTemplatePlatformImageSourceResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageTemplatePlatformImageSourceResponseOutput)
}

// Describes an image source from [Azure Gallery Images](https://docs.microsoft.com/en-us/rest/api/compute/virtualmachineimages).
type ImageTemplatePlatformImageSourceResponseOutput struct{ *pulumi.OutputState }

func (ImageTemplatePlatformImageSourceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ImageTemplatePlatformImageSourceResponse)(nil)).Elem()
}

func (o ImageTemplatePlatformImageSourceResponseOutput) ToImageTemplatePlatformImageSourceResponseOutput() ImageTemplatePlatformImageSourceResponseOutput {
	return o
}

func (o ImageTemplatePlatformImageSourceResponseOutput) ToImageTemplatePlatformImageSourceResponseOutputWithContext(ctx context.Context) ImageTemplatePlatformImageSourceResponseOutput {
	return o
}

// Image offer from the [Azure Gallery Images](https://docs.microsoft.com/en-us/rest/api/compute/virtualmachineimages).
func (o ImageTemplatePlatformImageSourceResponseOutput) Offer() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageTemplatePlatformImageSourceResponse) *string { return v.Offer }).(pulumi.StringPtrOutput)
}

// Image Publisher in [Azure Gallery Images](https://docs.microsoft.com/en-us/rest/api/compute/virtualmachineimages).
func (o ImageTemplatePlatformImageSourceResponseOutput) Publisher() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageTemplatePlatformImageSourceResponse) *string { return v.Publisher }).(pulumi.StringPtrOutput)
}

// Image sku from the [Azure Gallery Images](https://docs.microsoft.com/en-us/rest/api/compute/virtualmachineimages).
func (o ImageTemplatePlatformImageSourceResponseOutput) Sku() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageTemplatePlatformImageSourceResponse) *string { return v.Sku }).(pulumi.StringPtrOutput)
}

// Specifies the type of source image you want to start with.
// Expected value is 'PlatformImage'.
func (o ImageTemplatePlatformImageSourceResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ImageTemplatePlatformImageSourceResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Image version from the [Azure Gallery Images](https://docs.microsoft.com/en-us/rest/api/compute/virtualmachineimages).
func (o ImageTemplatePlatformImageSourceResponseOutput) Version() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageTemplatePlatformImageSourceResponse) *string { return v.Version }).(pulumi.StringPtrOutput)
}

// Runs the specified PowerShell on the VM (Windows). Corresponds to Packer powershell provisioner. Exactly one of 'script' or 'inline' can be specified.
type ImageTemplatePowerShellCustomizer struct {
	// Array of PowerShell commands to execute
	Inline []string `pulumi:"inline"`
	// Friendly Name to provide context on what this customization step does
	Name *string `pulumi:"name"`
	// The PowerShell script to be run for customizing. It can be a github link, SAS URI for Azure Storage, etc
	Script *string `pulumi:"script"`
	// The type of customization tool you want to use on the Image. For example, "Shell" can be shell customizer
	// Expected value is 'PowerShell'.
	Type string `pulumi:"type"`
	// Valid exit codes for the PowerShell script. [Default: 0]
	ValidExitCodes []int `pulumi:"validExitCodes"`
}

// ImageTemplatePowerShellCustomizerInput is an input type that accepts ImageTemplatePowerShellCustomizerArgs and ImageTemplatePowerShellCustomizerOutput values.
// You can construct a concrete instance of `ImageTemplatePowerShellCustomizerInput` via:
//
//          ImageTemplatePowerShellCustomizerArgs{...}
type ImageTemplatePowerShellCustomizerInput interface {
	pulumi.Input

	ToImageTemplatePowerShellCustomizerOutput() ImageTemplatePowerShellCustomizerOutput
	ToImageTemplatePowerShellCustomizerOutputWithContext(context.Context) ImageTemplatePowerShellCustomizerOutput
}

// Runs the specified PowerShell on the VM (Windows). Corresponds to Packer powershell provisioner. Exactly one of 'script' or 'inline' can be specified.
type ImageTemplatePowerShellCustomizerArgs struct {
	// Array of PowerShell commands to execute
	Inline pulumi.StringArrayInput `pulumi:"inline"`
	// Friendly Name to provide context on what this customization step does
	Name pulumi.StringPtrInput `pulumi:"name"`
	// The PowerShell script to be run for customizing. It can be a github link, SAS URI for Azure Storage, etc
	Script pulumi.StringPtrInput `pulumi:"script"`
	// The type of customization tool you want to use on the Image. For example, "Shell" can be shell customizer
	// Expected value is 'PowerShell'.
	Type pulumi.StringInput `pulumi:"type"`
	// Valid exit codes for the PowerShell script. [Default: 0]
	ValidExitCodes pulumi.IntArrayInput `pulumi:"validExitCodes"`
}

func (ImageTemplatePowerShellCustomizerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ImageTemplatePowerShellCustomizer)(nil)).Elem()
}

func (i ImageTemplatePowerShellCustomizerArgs) ToImageTemplatePowerShellCustomizerOutput() ImageTemplatePowerShellCustomizerOutput {
	return i.ToImageTemplatePowerShellCustomizerOutputWithContext(context.Background())
}

func (i ImageTemplatePowerShellCustomizerArgs) ToImageTemplatePowerShellCustomizerOutputWithContext(ctx context.Context) ImageTemplatePowerShellCustomizerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageTemplatePowerShellCustomizerOutput)
}

// Runs the specified PowerShell on the VM (Windows). Corresponds to Packer powershell provisioner. Exactly one of 'script' or 'inline' can be specified.
type ImageTemplatePowerShellCustomizerOutput struct{ *pulumi.OutputState }

func (ImageTemplatePowerShellCustomizerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ImageTemplatePowerShellCustomizer)(nil)).Elem()
}

func (o ImageTemplatePowerShellCustomizerOutput) ToImageTemplatePowerShellCustomizerOutput() ImageTemplatePowerShellCustomizerOutput {
	return o
}

func (o ImageTemplatePowerShellCustomizerOutput) ToImageTemplatePowerShellCustomizerOutputWithContext(ctx context.Context) ImageTemplatePowerShellCustomizerOutput {
	return o
}

// Array of PowerShell commands to execute
func (o ImageTemplatePowerShellCustomizerOutput) Inline() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ImageTemplatePowerShellCustomizer) []string { return v.Inline }).(pulumi.StringArrayOutput)
}

// Friendly Name to provide context on what this customization step does
func (o ImageTemplatePowerShellCustomizerOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageTemplatePowerShellCustomizer) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The PowerShell script to be run for customizing. It can be a github link, SAS URI for Azure Storage, etc
func (o ImageTemplatePowerShellCustomizerOutput) Script() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageTemplatePowerShellCustomizer) *string { return v.Script }).(pulumi.StringPtrOutput)
}

// The type of customization tool you want to use on the Image. For example, "Shell" can be shell customizer
// Expected value is 'PowerShell'.
func (o ImageTemplatePowerShellCustomizerOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ImageTemplatePowerShellCustomizer) string { return v.Type }).(pulumi.StringOutput)
}

// Valid exit codes for the PowerShell script. [Default: 0]
func (o ImageTemplatePowerShellCustomizerOutput) ValidExitCodes() pulumi.IntArrayOutput {
	return o.ApplyT(func(v ImageTemplatePowerShellCustomizer) []int { return v.ValidExitCodes }).(pulumi.IntArrayOutput)
}

// Runs the specified PowerShell on the VM (Windows). Corresponds to Packer powershell provisioner. Exactly one of 'script' or 'inline' can be specified.
type ImageTemplatePowerShellCustomizerInvokeResponse struct {
	// Array of PowerShell commands to execute
	Inline []string `pulumi:"inline"`
	// Friendly Name to provide context on what this customization step does
	Name *string `pulumi:"name"`
	// The PowerShell script to be run for customizing. It can be a github link, SAS URI for Azure Storage, etc
	Script *string `pulumi:"script"`
	// The type of customization tool you want to use on the Image. For example, "Shell" can be shell customizer
	// Expected value is 'PowerShell'.
	Type string `pulumi:"type"`
	// Valid exit codes for the PowerShell script. [Default: 0]
	ValidExitCodes []int `pulumi:"validExitCodes"`
}

// ImageTemplatePowerShellCustomizerInvokeResponseInput is an input type that accepts ImageTemplatePowerShellCustomizerInvokeResponseArgs and ImageTemplatePowerShellCustomizerInvokeResponseOutput values.
// You can construct a concrete instance of `ImageTemplatePowerShellCustomizerInvokeResponseInput` via:
//
//          ImageTemplatePowerShellCustomizerInvokeResponseArgs{...}
type ImageTemplatePowerShellCustomizerInvokeResponseInput interface {
	pulumi.Input

	ToImageTemplatePowerShellCustomizerInvokeResponseOutput() ImageTemplatePowerShellCustomizerInvokeResponseOutput
	ToImageTemplatePowerShellCustomizerInvokeResponseOutputWithContext(context.Context) ImageTemplatePowerShellCustomizerInvokeResponseOutput
}

// Runs the specified PowerShell on the VM (Windows). Corresponds to Packer powershell provisioner. Exactly one of 'script' or 'inline' can be specified.
type ImageTemplatePowerShellCustomizerInvokeResponseArgs struct {
	// Array of PowerShell commands to execute
	Inline pulumi.StringArrayInput `pulumi:"inline"`
	// Friendly Name to provide context on what this customization step does
	Name pulumi.StringPtrInput `pulumi:"name"`
	// The PowerShell script to be run for customizing. It can be a github link, SAS URI for Azure Storage, etc
	Script pulumi.StringPtrInput `pulumi:"script"`
	// The type of customization tool you want to use on the Image. For example, "Shell" can be shell customizer
	// Expected value is 'PowerShell'.
	Type pulumi.StringInput `pulumi:"type"`
	// Valid exit codes for the PowerShell script. [Default: 0]
	ValidExitCodes pulumi.IntArrayInput `pulumi:"validExitCodes"`
}

func (ImageTemplatePowerShellCustomizerInvokeResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ImageTemplatePowerShellCustomizerInvokeResponse)(nil)).Elem()
}

func (i ImageTemplatePowerShellCustomizerInvokeResponseArgs) ToImageTemplatePowerShellCustomizerInvokeResponseOutput() ImageTemplatePowerShellCustomizerInvokeResponseOutput {
	return i.ToImageTemplatePowerShellCustomizerInvokeResponseOutputWithContext(context.Background())
}

func (i ImageTemplatePowerShellCustomizerInvokeResponseArgs) ToImageTemplatePowerShellCustomizerInvokeResponseOutputWithContext(ctx context.Context) ImageTemplatePowerShellCustomizerInvokeResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageTemplatePowerShellCustomizerInvokeResponseOutput)
}

// Runs the specified PowerShell on the VM (Windows). Corresponds to Packer powershell provisioner. Exactly one of 'script' or 'inline' can be specified.
type ImageTemplatePowerShellCustomizerInvokeResponseOutput struct{ *pulumi.OutputState }

func (ImageTemplatePowerShellCustomizerInvokeResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ImageTemplatePowerShellCustomizerInvokeResponse)(nil)).Elem()
}

func (o ImageTemplatePowerShellCustomizerInvokeResponseOutput) ToImageTemplatePowerShellCustomizerInvokeResponseOutput() ImageTemplatePowerShellCustomizerInvokeResponseOutput {
	return o
}

func (o ImageTemplatePowerShellCustomizerInvokeResponseOutput) ToImageTemplatePowerShellCustomizerInvokeResponseOutputWithContext(ctx context.Context) ImageTemplatePowerShellCustomizerInvokeResponseOutput {
	return o
}

// Array of PowerShell commands to execute
func (o ImageTemplatePowerShellCustomizerInvokeResponseOutput) Inline() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ImageTemplatePowerShellCustomizerInvokeResponse) []string { return v.Inline }).(pulumi.StringArrayOutput)
}

// Friendly Name to provide context on what this customization step does
func (o ImageTemplatePowerShellCustomizerInvokeResponseOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageTemplatePowerShellCustomizerInvokeResponse) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The PowerShell script to be run for customizing. It can be a github link, SAS URI for Azure Storage, etc
func (o ImageTemplatePowerShellCustomizerInvokeResponseOutput) Script() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageTemplatePowerShellCustomizerInvokeResponse) *string { return v.Script }).(pulumi.StringPtrOutput)
}

// The type of customization tool you want to use on the Image. For example, "Shell" can be shell customizer
// Expected value is 'PowerShell'.
func (o ImageTemplatePowerShellCustomizerInvokeResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ImageTemplatePowerShellCustomizerInvokeResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Valid exit codes for the PowerShell script. [Default: 0]
func (o ImageTemplatePowerShellCustomizerInvokeResponseOutput) ValidExitCodes() pulumi.IntArrayOutput {
	return o.ApplyT(func(v ImageTemplatePowerShellCustomizerInvokeResponse) []int { return v.ValidExitCodes }).(pulumi.IntArrayOutput)
}

// Runs the specified PowerShell on the VM (Windows). Corresponds to Packer powershell provisioner. Exactly one of 'script' or 'inline' can be specified.
type ImageTemplatePowerShellCustomizerResponse struct {
	// Array of PowerShell commands to execute
	Inline []string `pulumi:"inline"`
	// Friendly Name to provide context on what this customization step does
	Name *string `pulumi:"name"`
	// The PowerShell script to be run for customizing. It can be a github link, SAS URI for Azure Storage, etc
	Script *string `pulumi:"script"`
	// The type of customization tool you want to use on the Image. For example, "Shell" can be shell customizer
	// Expected value is 'PowerShell'.
	Type string `pulumi:"type"`
	// Valid exit codes for the PowerShell script. [Default: 0]
	ValidExitCodes []int `pulumi:"validExitCodes"`
}

// ImageTemplatePowerShellCustomizerResponseInput is an input type that accepts ImageTemplatePowerShellCustomizerResponseArgs and ImageTemplatePowerShellCustomizerResponseOutput values.
// You can construct a concrete instance of `ImageTemplatePowerShellCustomizerResponseInput` via:
//
//          ImageTemplatePowerShellCustomizerResponseArgs{...}
type ImageTemplatePowerShellCustomizerResponseInput interface {
	pulumi.Input

	ToImageTemplatePowerShellCustomizerResponseOutput() ImageTemplatePowerShellCustomizerResponseOutput
	ToImageTemplatePowerShellCustomizerResponseOutputWithContext(context.Context) ImageTemplatePowerShellCustomizerResponseOutput
}

// Runs the specified PowerShell on the VM (Windows). Corresponds to Packer powershell provisioner. Exactly one of 'script' or 'inline' can be specified.
type ImageTemplatePowerShellCustomizerResponseArgs struct {
	// Array of PowerShell commands to execute
	Inline pulumi.StringArrayInput `pulumi:"inline"`
	// Friendly Name to provide context on what this customization step does
	Name pulumi.StringPtrInput `pulumi:"name"`
	// The PowerShell script to be run for customizing. It can be a github link, SAS URI for Azure Storage, etc
	Script pulumi.StringPtrInput `pulumi:"script"`
	// The type of customization tool you want to use on the Image. For example, "Shell" can be shell customizer
	// Expected value is 'PowerShell'.
	Type pulumi.StringInput `pulumi:"type"`
	// Valid exit codes for the PowerShell script. [Default: 0]
	ValidExitCodes pulumi.IntArrayInput `pulumi:"validExitCodes"`
}

func (ImageTemplatePowerShellCustomizerResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ImageTemplatePowerShellCustomizerResponse)(nil)).Elem()
}

func (i ImageTemplatePowerShellCustomizerResponseArgs) ToImageTemplatePowerShellCustomizerResponseOutput() ImageTemplatePowerShellCustomizerResponseOutput {
	return i.ToImageTemplatePowerShellCustomizerResponseOutputWithContext(context.Background())
}

func (i ImageTemplatePowerShellCustomizerResponseArgs) ToImageTemplatePowerShellCustomizerResponseOutputWithContext(ctx context.Context) ImageTemplatePowerShellCustomizerResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageTemplatePowerShellCustomizerResponseOutput)
}

// Runs the specified PowerShell on the VM (Windows). Corresponds to Packer powershell provisioner. Exactly one of 'script' or 'inline' can be specified.
type ImageTemplatePowerShellCustomizerResponseOutput struct{ *pulumi.OutputState }

func (ImageTemplatePowerShellCustomizerResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ImageTemplatePowerShellCustomizerResponse)(nil)).Elem()
}

func (o ImageTemplatePowerShellCustomizerResponseOutput) ToImageTemplatePowerShellCustomizerResponseOutput() ImageTemplatePowerShellCustomizerResponseOutput {
	return o
}

func (o ImageTemplatePowerShellCustomizerResponseOutput) ToImageTemplatePowerShellCustomizerResponseOutputWithContext(ctx context.Context) ImageTemplatePowerShellCustomizerResponseOutput {
	return o
}

// Array of PowerShell commands to execute
func (o ImageTemplatePowerShellCustomizerResponseOutput) Inline() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ImageTemplatePowerShellCustomizerResponse) []string { return v.Inline }).(pulumi.StringArrayOutput)
}

// Friendly Name to provide context on what this customization step does
func (o ImageTemplatePowerShellCustomizerResponseOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageTemplatePowerShellCustomizerResponse) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The PowerShell script to be run for customizing. It can be a github link, SAS URI for Azure Storage, etc
func (o ImageTemplatePowerShellCustomizerResponseOutput) Script() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageTemplatePowerShellCustomizerResponse) *string { return v.Script }).(pulumi.StringPtrOutput)
}

// The type of customization tool you want to use on the Image. For example, "Shell" can be shell customizer
// Expected value is 'PowerShell'.
func (o ImageTemplatePowerShellCustomizerResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ImageTemplatePowerShellCustomizerResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Valid exit codes for the PowerShell script. [Default: 0]
func (o ImageTemplatePowerShellCustomizerResponseOutput) ValidExitCodes() pulumi.IntArrayOutput {
	return o.ApplyT(func(v ImageTemplatePowerShellCustomizerResponse) []int { return v.ValidExitCodes }).(pulumi.IntArrayOutput)
}

// Reboots a VM and waits for it to come back online (Windows). Corresponds to Packer windows-restart provisioner
type ImageTemplateRestartCustomizer struct {
	// Friendly Name to provide context on what this customization step does
	Name *string `pulumi:"name"`
	// Command to check if restart succeeded [Default: '']
	RestartCheckCommand *string `pulumi:"restartCheckCommand"`
	// Command to execute the restart [Default: 'shutdown /r /f /t 0 /c "packer restart"']
	RestartCommand *string `pulumi:"restartCommand"`
	// Restart timeout specified as a string of magnitude and unit, e.g. '5m' (5 minutes) or '2h' (2 hours) [Default: '5m']
	RestartTimeout *string `pulumi:"restartTimeout"`
	// The type of customization tool you want to use on the Image. For example, "Shell" can be shell customizer
	// Expected value is 'WindowsRestart'.
	Type string `pulumi:"type"`
}

// ImageTemplateRestartCustomizerInput is an input type that accepts ImageTemplateRestartCustomizerArgs and ImageTemplateRestartCustomizerOutput values.
// You can construct a concrete instance of `ImageTemplateRestartCustomizerInput` via:
//
//          ImageTemplateRestartCustomizerArgs{...}
type ImageTemplateRestartCustomizerInput interface {
	pulumi.Input

	ToImageTemplateRestartCustomizerOutput() ImageTemplateRestartCustomizerOutput
	ToImageTemplateRestartCustomizerOutputWithContext(context.Context) ImageTemplateRestartCustomizerOutput
}

// Reboots a VM and waits for it to come back online (Windows). Corresponds to Packer windows-restart provisioner
type ImageTemplateRestartCustomizerArgs struct {
	// Friendly Name to provide context on what this customization step does
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Command to check if restart succeeded [Default: '']
	RestartCheckCommand pulumi.StringPtrInput `pulumi:"restartCheckCommand"`
	// Command to execute the restart [Default: 'shutdown /r /f /t 0 /c "packer restart"']
	RestartCommand pulumi.StringPtrInput `pulumi:"restartCommand"`
	// Restart timeout specified as a string of magnitude and unit, e.g. '5m' (5 minutes) or '2h' (2 hours) [Default: '5m']
	RestartTimeout pulumi.StringPtrInput `pulumi:"restartTimeout"`
	// The type of customization tool you want to use on the Image. For example, "Shell" can be shell customizer
	// Expected value is 'WindowsRestart'.
	Type pulumi.StringInput `pulumi:"type"`
}

func (ImageTemplateRestartCustomizerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ImageTemplateRestartCustomizer)(nil)).Elem()
}

func (i ImageTemplateRestartCustomizerArgs) ToImageTemplateRestartCustomizerOutput() ImageTemplateRestartCustomizerOutput {
	return i.ToImageTemplateRestartCustomizerOutputWithContext(context.Background())
}

func (i ImageTemplateRestartCustomizerArgs) ToImageTemplateRestartCustomizerOutputWithContext(ctx context.Context) ImageTemplateRestartCustomizerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageTemplateRestartCustomizerOutput)
}

// Reboots a VM and waits for it to come back online (Windows). Corresponds to Packer windows-restart provisioner
type ImageTemplateRestartCustomizerOutput struct{ *pulumi.OutputState }

func (ImageTemplateRestartCustomizerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ImageTemplateRestartCustomizer)(nil)).Elem()
}

func (o ImageTemplateRestartCustomizerOutput) ToImageTemplateRestartCustomizerOutput() ImageTemplateRestartCustomizerOutput {
	return o
}

func (o ImageTemplateRestartCustomizerOutput) ToImageTemplateRestartCustomizerOutputWithContext(ctx context.Context) ImageTemplateRestartCustomizerOutput {
	return o
}

// Friendly Name to provide context on what this customization step does
func (o ImageTemplateRestartCustomizerOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageTemplateRestartCustomizer) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Command to check if restart succeeded [Default: '']
func (o ImageTemplateRestartCustomizerOutput) RestartCheckCommand() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageTemplateRestartCustomizer) *string { return v.RestartCheckCommand }).(pulumi.StringPtrOutput)
}

// Command to execute the restart [Default: 'shutdown /r /f /t 0 /c "packer restart"']
func (o ImageTemplateRestartCustomizerOutput) RestartCommand() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageTemplateRestartCustomizer) *string { return v.RestartCommand }).(pulumi.StringPtrOutput)
}

// Restart timeout specified as a string of magnitude and unit, e.g. '5m' (5 minutes) or '2h' (2 hours) [Default: '5m']
func (o ImageTemplateRestartCustomizerOutput) RestartTimeout() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageTemplateRestartCustomizer) *string { return v.RestartTimeout }).(pulumi.StringPtrOutput)
}

// The type of customization tool you want to use on the Image. For example, "Shell" can be shell customizer
// Expected value is 'WindowsRestart'.
func (o ImageTemplateRestartCustomizerOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ImageTemplateRestartCustomizer) string { return v.Type }).(pulumi.StringOutput)
}

// Reboots a VM and waits for it to come back online (Windows). Corresponds to Packer windows-restart provisioner
type ImageTemplateRestartCustomizerInvokeResponse struct {
	// Friendly Name to provide context on what this customization step does
	Name *string `pulumi:"name"`
	// Command to check if restart succeeded [Default: '']
	RestartCheckCommand *string `pulumi:"restartCheckCommand"`
	// Command to execute the restart [Default: 'shutdown /r /f /t 0 /c "packer restart"']
	RestartCommand *string `pulumi:"restartCommand"`
	// Restart timeout specified as a string of magnitude and unit, e.g. '5m' (5 minutes) or '2h' (2 hours) [Default: '5m']
	RestartTimeout *string `pulumi:"restartTimeout"`
	// The type of customization tool you want to use on the Image. For example, "Shell" can be shell customizer
	// Expected value is 'WindowsRestart'.
	Type string `pulumi:"type"`
}

// ImageTemplateRestartCustomizerInvokeResponseInput is an input type that accepts ImageTemplateRestartCustomizerInvokeResponseArgs and ImageTemplateRestartCustomizerInvokeResponseOutput values.
// You can construct a concrete instance of `ImageTemplateRestartCustomizerInvokeResponseInput` via:
//
//          ImageTemplateRestartCustomizerInvokeResponseArgs{...}
type ImageTemplateRestartCustomizerInvokeResponseInput interface {
	pulumi.Input

	ToImageTemplateRestartCustomizerInvokeResponseOutput() ImageTemplateRestartCustomizerInvokeResponseOutput
	ToImageTemplateRestartCustomizerInvokeResponseOutputWithContext(context.Context) ImageTemplateRestartCustomizerInvokeResponseOutput
}

// Reboots a VM and waits for it to come back online (Windows). Corresponds to Packer windows-restart provisioner
type ImageTemplateRestartCustomizerInvokeResponseArgs struct {
	// Friendly Name to provide context on what this customization step does
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Command to check if restart succeeded [Default: '']
	RestartCheckCommand pulumi.StringPtrInput `pulumi:"restartCheckCommand"`
	// Command to execute the restart [Default: 'shutdown /r /f /t 0 /c "packer restart"']
	RestartCommand pulumi.StringPtrInput `pulumi:"restartCommand"`
	// Restart timeout specified as a string of magnitude and unit, e.g. '5m' (5 minutes) or '2h' (2 hours) [Default: '5m']
	RestartTimeout pulumi.StringPtrInput `pulumi:"restartTimeout"`
	// The type of customization tool you want to use on the Image. For example, "Shell" can be shell customizer
	// Expected value is 'WindowsRestart'.
	Type pulumi.StringInput `pulumi:"type"`
}

func (ImageTemplateRestartCustomizerInvokeResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ImageTemplateRestartCustomizerInvokeResponse)(nil)).Elem()
}

func (i ImageTemplateRestartCustomizerInvokeResponseArgs) ToImageTemplateRestartCustomizerInvokeResponseOutput() ImageTemplateRestartCustomizerInvokeResponseOutput {
	return i.ToImageTemplateRestartCustomizerInvokeResponseOutputWithContext(context.Background())
}

func (i ImageTemplateRestartCustomizerInvokeResponseArgs) ToImageTemplateRestartCustomizerInvokeResponseOutputWithContext(ctx context.Context) ImageTemplateRestartCustomizerInvokeResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageTemplateRestartCustomizerInvokeResponseOutput)
}

// Reboots a VM and waits for it to come back online (Windows). Corresponds to Packer windows-restart provisioner
type ImageTemplateRestartCustomizerInvokeResponseOutput struct{ *pulumi.OutputState }

func (ImageTemplateRestartCustomizerInvokeResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ImageTemplateRestartCustomizerInvokeResponse)(nil)).Elem()
}

func (o ImageTemplateRestartCustomizerInvokeResponseOutput) ToImageTemplateRestartCustomizerInvokeResponseOutput() ImageTemplateRestartCustomizerInvokeResponseOutput {
	return o
}

func (o ImageTemplateRestartCustomizerInvokeResponseOutput) ToImageTemplateRestartCustomizerInvokeResponseOutputWithContext(ctx context.Context) ImageTemplateRestartCustomizerInvokeResponseOutput {
	return o
}

// Friendly Name to provide context on what this customization step does
func (o ImageTemplateRestartCustomizerInvokeResponseOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageTemplateRestartCustomizerInvokeResponse) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Command to check if restart succeeded [Default: '']
func (o ImageTemplateRestartCustomizerInvokeResponseOutput) RestartCheckCommand() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageTemplateRestartCustomizerInvokeResponse) *string { return v.RestartCheckCommand }).(pulumi.StringPtrOutput)
}

// Command to execute the restart [Default: 'shutdown /r /f /t 0 /c "packer restart"']
func (o ImageTemplateRestartCustomizerInvokeResponseOutput) RestartCommand() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageTemplateRestartCustomizerInvokeResponse) *string { return v.RestartCommand }).(pulumi.StringPtrOutput)
}

// Restart timeout specified as a string of magnitude and unit, e.g. '5m' (5 minutes) or '2h' (2 hours) [Default: '5m']
func (o ImageTemplateRestartCustomizerInvokeResponseOutput) RestartTimeout() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageTemplateRestartCustomizerInvokeResponse) *string { return v.RestartTimeout }).(pulumi.StringPtrOutput)
}

// The type of customization tool you want to use on the Image. For example, "Shell" can be shell customizer
// Expected value is 'WindowsRestart'.
func (o ImageTemplateRestartCustomizerInvokeResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ImageTemplateRestartCustomizerInvokeResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Reboots a VM and waits for it to come back online (Windows). Corresponds to Packer windows-restart provisioner
type ImageTemplateRestartCustomizerResponse struct {
	// Friendly Name to provide context on what this customization step does
	Name *string `pulumi:"name"`
	// Command to check if restart succeeded [Default: '']
	RestartCheckCommand *string `pulumi:"restartCheckCommand"`
	// Command to execute the restart [Default: 'shutdown /r /f /t 0 /c "packer restart"']
	RestartCommand *string `pulumi:"restartCommand"`
	// Restart timeout specified as a string of magnitude and unit, e.g. '5m' (5 minutes) or '2h' (2 hours) [Default: '5m']
	RestartTimeout *string `pulumi:"restartTimeout"`
	// The type of customization tool you want to use on the Image. For example, "Shell" can be shell customizer
	// Expected value is 'WindowsRestart'.
	Type string `pulumi:"type"`
}

// ImageTemplateRestartCustomizerResponseInput is an input type that accepts ImageTemplateRestartCustomizerResponseArgs and ImageTemplateRestartCustomizerResponseOutput values.
// You can construct a concrete instance of `ImageTemplateRestartCustomizerResponseInput` via:
//
//          ImageTemplateRestartCustomizerResponseArgs{...}
type ImageTemplateRestartCustomizerResponseInput interface {
	pulumi.Input

	ToImageTemplateRestartCustomizerResponseOutput() ImageTemplateRestartCustomizerResponseOutput
	ToImageTemplateRestartCustomizerResponseOutputWithContext(context.Context) ImageTemplateRestartCustomizerResponseOutput
}

// Reboots a VM and waits for it to come back online (Windows). Corresponds to Packer windows-restart provisioner
type ImageTemplateRestartCustomizerResponseArgs struct {
	// Friendly Name to provide context on what this customization step does
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Command to check if restart succeeded [Default: '']
	RestartCheckCommand pulumi.StringPtrInput `pulumi:"restartCheckCommand"`
	// Command to execute the restart [Default: 'shutdown /r /f /t 0 /c "packer restart"']
	RestartCommand pulumi.StringPtrInput `pulumi:"restartCommand"`
	// Restart timeout specified as a string of magnitude and unit, e.g. '5m' (5 minutes) or '2h' (2 hours) [Default: '5m']
	RestartTimeout pulumi.StringPtrInput `pulumi:"restartTimeout"`
	// The type of customization tool you want to use on the Image. For example, "Shell" can be shell customizer
	// Expected value is 'WindowsRestart'.
	Type pulumi.StringInput `pulumi:"type"`
}

func (ImageTemplateRestartCustomizerResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ImageTemplateRestartCustomizerResponse)(nil)).Elem()
}

func (i ImageTemplateRestartCustomizerResponseArgs) ToImageTemplateRestartCustomizerResponseOutput() ImageTemplateRestartCustomizerResponseOutput {
	return i.ToImageTemplateRestartCustomizerResponseOutputWithContext(context.Background())
}

func (i ImageTemplateRestartCustomizerResponseArgs) ToImageTemplateRestartCustomizerResponseOutputWithContext(ctx context.Context) ImageTemplateRestartCustomizerResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageTemplateRestartCustomizerResponseOutput)
}

// Reboots a VM and waits for it to come back online (Windows). Corresponds to Packer windows-restart provisioner
type ImageTemplateRestartCustomizerResponseOutput struct{ *pulumi.OutputState }

func (ImageTemplateRestartCustomizerResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ImageTemplateRestartCustomizerResponse)(nil)).Elem()
}

func (o ImageTemplateRestartCustomizerResponseOutput) ToImageTemplateRestartCustomizerResponseOutput() ImageTemplateRestartCustomizerResponseOutput {
	return o
}

func (o ImageTemplateRestartCustomizerResponseOutput) ToImageTemplateRestartCustomizerResponseOutputWithContext(ctx context.Context) ImageTemplateRestartCustomizerResponseOutput {
	return o
}

// Friendly Name to provide context on what this customization step does
func (o ImageTemplateRestartCustomizerResponseOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageTemplateRestartCustomizerResponse) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Command to check if restart succeeded [Default: '']
func (o ImageTemplateRestartCustomizerResponseOutput) RestartCheckCommand() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageTemplateRestartCustomizerResponse) *string { return v.RestartCheckCommand }).(pulumi.StringPtrOutput)
}

// Command to execute the restart [Default: 'shutdown /r /f /t 0 /c "packer restart"']
func (o ImageTemplateRestartCustomizerResponseOutput) RestartCommand() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageTemplateRestartCustomizerResponse) *string { return v.RestartCommand }).(pulumi.StringPtrOutput)
}

// Restart timeout specified as a string of magnitude and unit, e.g. '5m' (5 minutes) or '2h' (2 hours) [Default: '5m']
func (o ImageTemplateRestartCustomizerResponseOutput) RestartTimeout() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageTemplateRestartCustomizerResponse) *string { return v.RestartTimeout }).(pulumi.StringPtrOutput)
}

// The type of customization tool you want to use on the Image. For example, "Shell" can be shell customizer
// Expected value is 'WindowsRestart'.
func (o ImageTemplateRestartCustomizerResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ImageTemplateRestartCustomizerResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Distribute via Shared Image Gallery.
type ImageTemplateSharedImageDistributor struct {
	// Tags that will be applied to the artifact once it has been created/updated by the distributor.
	ArtifactTags map[string]string `pulumi:"artifactTags"`
	// Resource Id of the Shared Image Gallery image
	GalleryImageId     string   `pulumi:"galleryImageId"`
	ReplicationRegions []string `pulumi:"replicationRegions"`
	// The name to be used for the associated RunOutput.
	RunOutputName string `pulumi:"runOutputName"`
	// Type of distribution.
	// Expected value is 'SharedImage'.
	Type string `pulumi:"type"`
}

// ImageTemplateSharedImageDistributorInput is an input type that accepts ImageTemplateSharedImageDistributorArgs and ImageTemplateSharedImageDistributorOutput values.
// You can construct a concrete instance of `ImageTemplateSharedImageDistributorInput` via:
//
//          ImageTemplateSharedImageDistributorArgs{...}
type ImageTemplateSharedImageDistributorInput interface {
	pulumi.Input

	ToImageTemplateSharedImageDistributorOutput() ImageTemplateSharedImageDistributorOutput
	ToImageTemplateSharedImageDistributorOutputWithContext(context.Context) ImageTemplateSharedImageDistributorOutput
}

// Distribute via Shared Image Gallery.
type ImageTemplateSharedImageDistributorArgs struct {
	// Tags that will be applied to the artifact once it has been created/updated by the distributor.
	ArtifactTags pulumi.StringMapInput `pulumi:"artifactTags"`
	// Resource Id of the Shared Image Gallery image
	GalleryImageId     pulumi.StringInput      `pulumi:"galleryImageId"`
	ReplicationRegions pulumi.StringArrayInput `pulumi:"replicationRegions"`
	// The name to be used for the associated RunOutput.
	RunOutputName pulumi.StringInput `pulumi:"runOutputName"`
	// Type of distribution.
	// Expected value is 'SharedImage'.
	Type pulumi.StringInput `pulumi:"type"`
}

func (ImageTemplateSharedImageDistributorArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ImageTemplateSharedImageDistributor)(nil)).Elem()
}

func (i ImageTemplateSharedImageDistributorArgs) ToImageTemplateSharedImageDistributorOutput() ImageTemplateSharedImageDistributorOutput {
	return i.ToImageTemplateSharedImageDistributorOutputWithContext(context.Background())
}

func (i ImageTemplateSharedImageDistributorArgs) ToImageTemplateSharedImageDistributorOutputWithContext(ctx context.Context) ImageTemplateSharedImageDistributorOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageTemplateSharedImageDistributorOutput)
}

// Distribute via Shared Image Gallery.
type ImageTemplateSharedImageDistributorOutput struct{ *pulumi.OutputState }

func (ImageTemplateSharedImageDistributorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ImageTemplateSharedImageDistributor)(nil)).Elem()
}

func (o ImageTemplateSharedImageDistributorOutput) ToImageTemplateSharedImageDistributorOutput() ImageTemplateSharedImageDistributorOutput {
	return o
}

func (o ImageTemplateSharedImageDistributorOutput) ToImageTemplateSharedImageDistributorOutputWithContext(ctx context.Context) ImageTemplateSharedImageDistributorOutput {
	return o
}

// Tags that will be applied to the artifact once it has been created/updated by the distributor.
func (o ImageTemplateSharedImageDistributorOutput) ArtifactTags() pulumi.StringMapOutput {
	return o.ApplyT(func(v ImageTemplateSharedImageDistributor) map[string]string { return v.ArtifactTags }).(pulumi.StringMapOutput)
}

// Resource Id of the Shared Image Gallery image
func (o ImageTemplateSharedImageDistributorOutput) GalleryImageId() pulumi.StringOutput {
	return o.ApplyT(func(v ImageTemplateSharedImageDistributor) string { return v.GalleryImageId }).(pulumi.StringOutput)
}

func (o ImageTemplateSharedImageDistributorOutput) ReplicationRegions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ImageTemplateSharedImageDistributor) []string { return v.ReplicationRegions }).(pulumi.StringArrayOutput)
}

// The name to be used for the associated RunOutput.
func (o ImageTemplateSharedImageDistributorOutput) RunOutputName() pulumi.StringOutput {
	return o.ApplyT(func(v ImageTemplateSharedImageDistributor) string { return v.RunOutputName }).(pulumi.StringOutput)
}

// Type of distribution.
// Expected value is 'SharedImage'.
func (o ImageTemplateSharedImageDistributorOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ImageTemplateSharedImageDistributor) string { return v.Type }).(pulumi.StringOutput)
}

// Distribute via Shared Image Gallery.
type ImageTemplateSharedImageDistributorInvokeResponse struct {
	// Tags that will be applied to the artifact once it has been created/updated by the distributor.
	ArtifactTags map[string]string `pulumi:"artifactTags"`
	// Resource Id of the Shared Image Gallery image
	GalleryImageId     string   `pulumi:"galleryImageId"`
	ReplicationRegions []string `pulumi:"replicationRegions"`
	// The name to be used for the associated RunOutput.
	RunOutputName string `pulumi:"runOutputName"`
	// Type of distribution.
	// Expected value is 'SharedImage'.
	Type string `pulumi:"type"`
}

// ImageTemplateSharedImageDistributorInvokeResponseInput is an input type that accepts ImageTemplateSharedImageDistributorInvokeResponseArgs and ImageTemplateSharedImageDistributorInvokeResponseOutput values.
// You can construct a concrete instance of `ImageTemplateSharedImageDistributorInvokeResponseInput` via:
//
//          ImageTemplateSharedImageDistributorInvokeResponseArgs{...}
type ImageTemplateSharedImageDistributorInvokeResponseInput interface {
	pulumi.Input

	ToImageTemplateSharedImageDistributorInvokeResponseOutput() ImageTemplateSharedImageDistributorInvokeResponseOutput
	ToImageTemplateSharedImageDistributorInvokeResponseOutputWithContext(context.Context) ImageTemplateSharedImageDistributorInvokeResponseOutput
}

// Distribute via Shared Image Gallery.
type ImageTemplateSharedImageDistributorInvokeResponseArgs struct {
	// Tags that will be applied to the artifact once it has been created/updated by the distributor.
	ArtifactTags pulumi.StringMapInput `pulumi:"artifactTags"`
	// Resource Id of the Shared Image Gallery image
	GalleryImageId     pulumi.StringInput      `pulumi:"galleryImageId"`
	ReplicationRegions pulumi.StringArrayInput `pulumi:"replicationRegions"`
	// The name to be used for the associated RunOutput.
	RunOutputName pulumi.StringInput `pulumi:"runOutputName"`
	// Type of distribution.
	// Expected value is 'SharedImage'.
	Type pulumi.StringInput `pulumi:"type"`
}

func (ImageTemplateSharedImageDistributorInvokeResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ImageTemplateSharedImageDistributorInvokeResponse)(nil)).Elem()
}

func (i ImageTemplateSharedImageDistributorInvokeResponseArgs) ToImageTemplateSharedImageDistributorInvokeResponseOutput() ImageTemplateSharedImageDistributorInvokeResponseOutput {
	return i.ToImageTemplateSharedImageDistributorInvokeResponseOutputWithContext(context.Background())
}

func (i ImageTemplateSharedImageDistributorInvokeResponseArgs) ToImageTemplateSharedImageDistributorInvokeResponseOutputWithContext(ctx context.Context) ImageTemplateSharedImageDistributorInvokeResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageTemplateSharedImageDistributorInvokeResponseOutput)
}

// Distribute via Shared Image Gallery.
type ImageTemplateSharedImageDistributorInvokeResponseOutput struct{ *pulumi.OutputState }

func (ImageTemplateSharedImageDistributorInvokeResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ImageTemplateSharedImageDistributorInvokeResponse)(nil)).Elem()
}

func (o ImageTemplateSharedImageDistributorInvokeResponseOutput) ToImageTemplateSharedImageDistributorInvokeResponseOutput() ImageTemplateSharedImageDistributorInvokeResponseOutput {
	return o
}

func (o ImageTemplateSharedImageDistributorInvokeResponseOutput) ToImageTemplateSharedImageDistributorInvokeResponseOutputWithContext(ctx context.Context) ImageTemplateSharedImageDistributorInvokeResponseOutput {
	return o
}

// Tags that will be applied to the artifact once it has been created/updated by the distributor.
func (o ImageTemplateSharedImageDistributorInvokeResponseOutput) ArtifactTags() pulumi.StringMapOutput {
	return o.ApplyT(func(v ImageTemplateSharedImageDistributorInvokeResponse) map[string]string { return v.ArtifactTags }).(pulumi.StringMapOutput)
}

// Resource Id of the Shared Image Gallery image
func (o ImageTemplateSharedImageDistributorInvokeResponseOutput) GalleryImageId() pulumi.StringOutput {
	return o.ApplyT(func(v ImageTemplateSharedImageDistributorInvokeResponse) string { return v.GalleryImageId }).(pulumi.StringOutput)
}

func (o ImageTemplateSharedImageDistributorInvokeResponseOutput) ReplicationRegions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ImageTemplateSharedImageDistributorInvokeResponse) []string { return v.ReplicationRegions }).(pulumi.StringArrayOutput)
}

// The name to be used for the associated RunOutput.
func (o ImageTemplateSharedImageDistributorInvokeResponseOutput) RunOutputName() pulumi.StringOutput {
	return o.ApplyT(func(v ImageTemplateSharedImageDistributorInvokeResponse) string { return v.RunOutputName }).(pulumi.StringOutput)
}

// Type of distribution.
// Expected value is 'SharedImage'.
func (o ImageTemplateSharedImageDistributorInvokeResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ImageTemplateSharedImageDistributorInvokeResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Distribute via Shared Image Gallery.
type ImageTemplateSharedImageDistributorResponse struct {
	// Tags that will be applied to the artifact once it has been created/updated by the distributor.
	ArtifactTags map[string]string `pulumi:"artifactTags"`
	// Resource Id of the Shared Image Gallery image
	GalleryImageId     string   `pulumi:"galleryImageId"`
	ReplicationRegions []string `pulumi:"replicationRegions"`
	// The name to be used for the associated RunOutput.
	RunOutputName string `pulumi:"runOutputName"`
	// Type of distribution.
	// Expected value is 'SharedImage'.
	Type string `pulumi:"type"`
}

// ImageTemplateSharedImageDistributorResponseInput is an input type that accepts ImageTemplateSharedImageDistributorResponseArgs and ImageTemplateSharedImageDistributorResponseOutput values.
// You can construct a concrete instance of `ImageTemplateSharedImageDistributorResponseInput` via:
//
//          ImageTemplateSharedImageDistributorResponseArgs{...}
type ImageTemplateSharedImageDistributorResponseInput interface {
	pulumi.Input

	ToImageTemplateSharedImageDistributorResponseOutput() ImageTemplateSharedImageDistributorResponseOutput
	ToImageTemplateSharedImageDistributorResponseOutputWithContext(context.Context) ImageTemplateSharedImageDistributorResponseOutput
}

// Distribute via Shared Image Gallery.
type ImageTemplateSharedImageDistributorResponseArgs struct {
	// Tags that will be applied to the artifact once it has been created/updated by the distributor.
	ArtifactTags pulumi.StringMapInput `pulumi:"artifactTags"`
	// Resource Id of the Shared Image Gallery image
	GalleryImageId     pulumi.StringInput      `pulumi:"galleryImageId"`
	ReplicationRegions pulumi.StringArrayInput `pulumi:"replicationRegions"`
	// The name to be used for the associated RunOutput.
	RunOutputName pulumi.StringInput `pulumi:"runOutputName"`
	// Type of distribution.
	// Expected value is 'SharedImage'.
	Type pulumi.StringInput `pulumi:"type"`
}

func (ImageTemplateSharedImageDistributorResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ImageTemplateSharedImageDistributorResponse)(nil)).Elem()
}

func (i ImageTemplateSharedImageDistributorResponseArgs) ToImageTemplateSharedImageDistributorResponseOutput() ImageTemplateSharedImageDistributorResponseOutput {
	return i.ToImageTemplateSharedImageDistributorResponseOutputWithContext(context.Background())
}

func (i ImageTemplateSharedImageDistributorResponseArgs) ToImageTemplateSharedImageDistributorResponseOutputWithContext(ctx context.Context) ImageTemplateSharedImageDistributorResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageTemplateSharedImageDistributorResponseOutput)
}

// Distribute via Shared Image Gallery.
type ImageTemplateSharedImageDistributorResponseOutput struct{ *pulumi.OutputState }

func (ImageTemplateSharedImageDistributorResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ImageTemplateSharedImageDistributorResponse)(nil)).Elem()
}

func (o ImageTemplateSharedImageDistributorResponseOutput) ToImageTemplateSharedImageDistributorResponseOutput() ImageTemplateSharedImageDistributorResponseOutput {
	return o
}

func (o ImageTemplateSharedImageDistributorResponseOutput) ToImageTemplateSharedImageDistributorResponseOutputWithContext(ctx context.Context) ImageTemplateSharedImageDistributorResponseOutput {
	return o
}

// Tags that will be applied to the artifact once it has been created/updated by the distributor.
func (o ImageTemplateSharedImageDistributorResponseOutput) ArtifactTags() pulumi.StringMapOutput {
	return o.ApplyT(func(v ImageTemplateSharedImageDistributorResponse) map[string]string { return v.ArtifactTags }).(pulumi.StringMapOutput)
}

// Resource Id of the Shared Image Gallery image
func (o ImageTemplateSharedImageDistributorResponseOutput) GalleryImageId() pulumi.StringOutput {
	return o.ApplyT(func(v ImageTemplateSharedImageDistributorResponse) string { return v.GalleryImageId }).(pulumi.StringOutput)
}

func (o ImageTemplateSharedImageDistributorResponseOutput) ReplicationRegions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ImageTemplateSharedImageDistributorResponse) []string { return v.ReplicationRegions }).(pulumi.StringArrayOutput)
}

// The name to be used for the associated RunOutput.
func (o ImageTemplateSharedImageDistributorResponseOutput) RunOutputName() pulumi.StringOutput {
	return o.ApplyT(func(v ImageTemplateSharedImageDistributorResponse) string { return v.RunOutputName }).(pulumi.StringOutput)
}

// Type of distribution.
// Expected value is 'SharedImage'.
func (o ImageTemplateSharedImageDistributorResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ImageTemplateSharedImageDistributorResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Runs a shell script during the customization phase (Linux). Corresponds to Packer shell provisioner. Exactly one of 'script' or 'inline' can be specified.
type ImageTemplateShellCustomizer struct {
	// Array of shell commands to execute
	Inline []string `pulumi:"inline"`
	// Friendly Name to provide context on what this customization step does
	Name *string `pulumi:"name"`
	// The shell script to be run for customizing. It can be a github link, SAS URI for Azure Storage, etc
	Script *string `pulumi:"script"`
	// The type of customization tool you want to use on the Image. For example, "Shell" can be shell customizer
	// Expected value is 'Shell'.
	Type string `pulumi:"type"`
}

// ImageTemplateShellCustomizerInput is an input type that accepts ImageTemplateShellCustomizerArgs and ImageTemplateShellCustomizerOutput values.
// You can construct a concrete instance of `ImageTemplateShellCustomizerInput` via:
//
//          ImageTemplateShellCustomizerArgs{...}
type ImageTemplateShellCustomizerInput interface {
	pulumi.Input

	ToImageTemplateShellCustomizerOutput() ImageTemplateShellCustomizerOutput
	ToImageTemplateShellCustomizerOutputWithContext(context.Context) ImageTemplateShellCustomizerOutput
}

// Runs a shell script during the customization phase (Linux). Corresponds to Packer shell provisioner. Exactly one of 'script' or 'inline' can be specified.
type ImageTemplateShellCustomizerArgs struct {
	// Array of shell commands to execute
	Inline pulumi.StringArrayInput `pulumi:"inline"`
	// Friendly Name to provide context on what this customization step does
	Name pulumi.StringPtrInput `pulumi:"name"`
	// The shell script to be run for customizing. It can be a github link, SAS URI for Azure Storage, etc
	Script pulumi.StringPtrInput `pulumi:"script"`
	// The type of customization tool you want to use on the Image. For example, "Shell" can be shell customizer
	// Expected value is 'Shell'.
	Type pulumi.StringInput `pulumi:"type"`
}

func (ImageTemplateShellCustomizerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ImageTemplateShellCustomizer)(nil)).Elem()
}

func (i ImageTemplateShellCustomizerArgs) ToImageTemplateShellCustomizerOutput() ImageTemplateShellCustomizerOutput {
	return i.ToImageTemplateShellCustomizerOutputWithContext(context.Background())
}

func (i ImageTemplateShellCustomizerArgs) ToImageTemplateShellCustomizerOutputWithContext(ctx context.Context) ImageTemplateShellCustomizerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageTemplateShellCustomizerOutput)
}

// Runs a shell script during the customization phase (Linux). Corresponds to Packer shell provisioner. Exactly one of 'script' or 'inline' can be specified.
type ImageTemplateShellCustomizerOutput struct{ *pulumi.OutputState }

func (ImageTemplateShellCustomizerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ImageTemplateShellCustomizer)(nil)).Elem()
}

func (o ImageTemplateShellCustomizerOutput) ToImageTemplateShellCustomizerOutput() ImageTemplateShellCustomizerOutput {
	return o
}

func (o ImageTemplateShellCustomizerOutput) ToImageTemplateShellCustomizerOutputWithContext(ctx context.Context) ImageTemplateShellCustomizerOutput {
	return o
}

// Array of shell commands to execute
func (o ImageTemplateShellCustomizerOutput) Inline() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ImageTemplateShellCustomizer) []string { return v.Inline }).(pulumi.StringArrayOutput)
}

// Friendly Name to provide context on what this customization step does
func (o ImageTemplateShellCustomizerOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageTemplateShellCustomizer) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The shell script to be run for customizing. It can be a github link, SAS URI for Azure Storage, etc
func (o ImageTemplateShellCustomizerOutput) Script() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageTemplateShellCustomizer) *string { return v.Script }).(pulumi.StringPtrOutput)
}

// The type of customization tool you want to use on the Image. For example, "Shell" can be shell customizer
// Expected value is 'Shell'.
func (o ImageTemplateShellCustomizerOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ImageTemplateShellCustomizer) string { return v.Type }).(pulumi.StringOutput)
}

// Runs a shell script during the customization phase (Linux). Corresponds to Packer shell provisioner. Exactly one of 'script' or 'inline' can be specified.
type ImageTemplateShellCustomizerInvokeResponse struct {
	// Array of shell commands to execute
	Inline []string `pulumi:"inline"`
	// Friendly Name to provide context on what this customization step does
	Name *string `pulumi:"name"`
	// The shell script to be run for customizing. It can be a github link, SAS URI for Azure Storage, etc
	Script *string `pulumi:"script"`
	// The type of customization tool you want to use on the Image. For example, "Shell" can be shell customizer
	// Expected value is 'Shell'.
	Type string `pulumi:"type"`
}

// ImageTemplateShellCustomizerInvokeResponseInput is an input type that accepts ImageTemplateShellCustomizerInvokeResponseArgs and ImageTemplateShellCustomizerInvokeResponseOutput values.
// You can construct a concrete instance of `ImageTemplateShellCustomizerInvokeResponseInput` via:
//
//          ImageTemplateShellCustomizerInvokeResponseArgs{...}
type ImageTemplateShellCustomizerInvokeResponseInput interface {
	pulumi.Input

	ToImageTemplateShellCustomizerInvokeResponseOutput() ImageTemplateShellCustomizerInvokeResponseOutput
	ToImageTemplateShellCustomizerInvokeResponseOutputWithContext(context.Context) ImageTemplateShellCustomizerInvokeResponseOutput
}

// Runs a shell script during the customization phase (Linux). Corresponds to Packer shell provisioner. Exactly one of 'script' or 'inline' can be specified.
type ImageTemplateShellCustomizerInvokeResponseArgs struct {
	// Array of shell commands to execute
	Inline pulumi.StringArrayInput `pulumi:"inline"`
	// Friendly Name to provide context on what this customization step does
	Name pulumi.StringPtrInput `pulumi:"name"`
	// The shell script to be run for customizing. It can be a github link, SAS URI for Azure Storage, etc
	Script pulumi.StringPtrInput `pulumi:"script"`
	// The type of customization tool you want to use on the Image. For example, "Shell" can be shell customizer
	// Expected value is 'Shell'.
	Type pulumi.StringInput `pulumi:"type"`
}

func (ImageTemplateShellCustomizerInvokeResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ImageTemplateShellCustomizerInvokeResponse)(nil)).Elem()
}

func (i ImageTemplateShellCustomizerInvokeResponseArgs) ToImageTemplateShellCustomizerInvokeResponseOutput() ImageTemplateShellCustomizerInvokeResponseOutput {
	return i.ToImageTemplateShellCustomizerInvokeResponseOutputWithContext(context.Background())
}

func (i ImageTemplateShellCustomizerInvokeResponseArgs) ToImageTemplateShellCustomizerInvokeResponseOutputWithContext(ctx context.Context) ImageTemplateShellCustomizerInvokeResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageTemplateShellCustomizerInvokeResponseOutput)
}

// Runs a shell script during the customization phase (Linux). Corresponds to Packer shell provisioner. Exactly one of 'script' or 'inline' can be specified.
type ImageTemplateShellCustomizerInvokeResponseOutput struct{ *pulumi.OutputState }

func (ImageTemplateShellCustomizerInvokeResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ImageTemplateShellCustomizerInvokeResponse)(nil)).Elem()
}

func (o ImageTemplateShellCustomizerInvokeResponseOutput) ToImageTemplateShellCustomizerInvokeResponseOutput() ImageTemplateShellCustomizerInvokeResponseOutput {
	return o
}

func (o ImageTemplateShellCustomizerInvokeResponseOutput) ToImageTemplateShellCustomizerInvokeResponseOutputWithContext(ctx context.Context) ImageTemplateShellCustomizerInvokeResponseOutput {
	return o
}

// Array of shell commands to execute
func (o ImageTemplateShellCustomizerInvokeResponseOutput) Inline() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ImageTemplateShellCustomizerInvokeResponse) []string { return v.Inline }).(pulumi.StringArrayOutput)
}

// Friendly Name to provide context on what this customization step does
func (o ImageTemplateShellCustomizerInvokeResponseOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageTemplateShellCustomizerInvokeResponse) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The shell script to be run for customizing. It can be a github link, SAS URI for Azure Storage, etc
func (o ImageTemplateShellCustomizerInvokeResponseOutput) Script() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageTemplateShellCustomizerInvokeResponse) *string { return v.Script }).(pulumi.StringPtrOutput)
}

// The type of customization tool you want to use on the Image. For example, "Shell" can be shell customizer
// Expected value is 'Shell'.
func (o ImageTemplateShellCustomizerInvokeResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ImageTemplateShellCustomizerInvokeResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Runs a shell script during the customization phase (Linux). Corresponds to Packer shell provisioner. Exactly one of 'script' or 'inline' can be specified.
type ImageTemplateShellCustomizerResponse struct {
	// Array of shell commands to execute
	Inline []string `pulumi:"inline"`
	// Friendly Name to provide context on what this customization step does
	Name *string `pulumi:"name"`
	// The shell script to be run for customizing. It can be a github link, SAS URI for Azure Storage, etc
	Script *string `pulumi:"script"`
	// The type of customization tool you want to use on the Image. For example, "Shell" can be shell customizer
	// Expected value is 'Shell'.
	Type string `pulumi:"type"`
}

// ImageTemplateShellCustomizerResponseInput is an input type that accepts ImageTemplateShellCustomizerResponseArgs and ImageTemplateShellCustomizerResponseOutput values.
// You can construct a concrete instance of `ImageTemplateShellCustomizerResponseInput` via:
//
//          ImageTemplateShellCustomizerResponseArgs{...}
type ImageTemplateShellCustomizerResponseInput interface {
	pulumi.Input

	ToImageTemplateShellCustomizerResponseOutput() ImageTemplateShellCustomizerResponseOutput
	ToImageTemplateShellCustomizerResponseOutputWithContext(context.Context) ImageTemplateShellCustomizerResponseOutput
}

// Runs a shell script during the customization phase (Linux). Corresponds to Packer shell provisioner. Exactly one of 'script' or 'inline' can be specified.
type ImageTemplateShellCustomizerResponseArgs struct {
	// Array of shell commands to execute
	Inline pulumi.StringArrayInput `pulumi:"inline"`
	// Friendly Name to provide context on what this customization step does
	Name pulumi.StringPtrInput `pulumi:"name"`
	// The shell script to be run for customizing. It can be a github link, SAS URI for Azure Storage, etc
	Script pulumi.StringPtrInput `pulumi:"script"`
	// The type of customization tool you want to use on the Image. For example, "Shell" can be shell customizer
	// Expected value is 'Shell'.
	Type pulumi.StringInput `pulumi:"type"`
}

func (ImageTemplateShellCustomizerResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ImageTemplateShellCustomizerResponse)(nil)).Elem()
}

func (i ImageTemplateShellCustomizerResponseArgs) ToImageTemplateShellCustomizerResponseOutput() ImageTemplateShellCustomizerResponseOutput {
	return i.ToImageTemplateShellCustomizerResponseOutputWithContext(context.Background())
}

func (i ImageTemplateShellCustomizerResponseArgs) ToImageTemplateShellCustomizerResponseOutputWithContext(ctx context.Context) ImageTemplateShellCustomizerResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageTemplateShellCustomizerResponseOutput)
}

// Runs a shell script during the customization phase (Linux). Corresponds to Packer shell provisioner. Exactly one of 'script' or 'inline' can be specified.
type ImageTemplateShellCustomizerResponseOutput struct{ *pulumi.OutputState }

func (ImageTemplateShellCustomizerResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ImageTemplateShellCustomizerResponse)(nil)).Elem()
}

func (o ImageTemplateShellCustomizerResponseOutput) ToImageTemplateShellCustomizerResponseOutput() ImageTemplateShellCustomizerResponseOutput {
	return o
}

func (o ImageTemplateShellCustomizerResponseOutput) ToImageTemplateShellCustomizerResponseOutputWithContext(ctx context.Context) ImageTemplateShellCustomizerResponseOutput {
	return o
}

// Array of shell commands to execute
func (o ImageTemplateShellCustomizerResponseOutput) Inline() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ImageTemplateShellCustomizerResponse) []string { return v.Inline }).(pulumi.StringArrayOutput)
}

// Friendly Name to provide context on what this customization step does
func (o ImageTemplateShellCustomizerResponseOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageTemplateShellCustomizerResponse) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The shell script to be run for customizing. It can be a github link, SAS URI for Azure Storage, etc
func (o ImageTemplateShellCustomizerResponseOutput) Script() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageTemplateShellCustomizerResponse) *string { return v.Script }).(pulumi.StringPtrOutput)
}

// The type of customization tool you want to use on the Image. For example, "Shell" can be shell customizer
// Expected value is 'Shell'.
func (o ImageTemplateShellCustomizerResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ImageTemplateShellCustomizerResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Distribute via VHD in a storage account.
type ImageTemplateVhdDistributor struct {
	// Tags that will be applied to the artifact once it has been created/updated by the distributor.
	ArtifactTags map[string]string `pulumi:"artifactTags"`
	// The name to be used for the associated RunOutput.
	RunOutputName string `pulumi:"runOutputName"`
	// Type of distribution.
	// Expected value is 'VHD'.
	Type string `pulumi:"type"`
}

// ImageTemplateVhdDistributorInput is an input type that accepts ImageTemplateVhdDistributorArgs and ImageTemplateVhdDistributorOutput values.
// You can construct a concrete instance of `ImageTemplateVhdDistributorInput` via:
//
//          ImageTemplateVhdDistributorArgs{...}
type ImageTemplateVhdDistributorInput interface {
	pulumi.Input

	ToImageTemplateVhdDistributorOutput() ImageTemplateVhdDistributorOutput
	ToImageTemplateVhdDistributorOutputWithContext(context.Context) ImageTemplateVhdDistributorOutput
}

// Distribute via VHD in a storage account.
type ImageTemplateVhdDistributorArgs struct {
	// Tags that will be applied to the artifact once it has been created/updated by the distributor.
	ArtifactTags pulumi.StringMapInput `pulumi:"artifactTags"`
	// The name to be used for the associated RunOutput.
	RunOutputName pulumi.StringInput `pulumi:"runOutputName"`
	// Type of distribution.
	// Expected value is 'VHD'.
	Type pulumi.StringInput `pulumi:"type"`
}

func (ImageTemplateVhdDistributorArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ImageTemplateVhdDistributor)(nil)).Elem()
}

func (i ImageTemplateVhdDistributorArgs) ToImageTemplateVhdDistributorOutput() ImageTemplateVhdDistributorOutput {
	return i.ToImageTemplateVhdDistributorOutputWithContext(context.Background())
}

func (i ImageTemplateVhdDistributorArgs) ToImageTemplateVhdDistributorOutputWithContext(ctx context.Context) ImageTemplateVhdDistributorOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageTemplateVhdDistributorOutput)
}

// Distribute via VHD in a storage account.
type ImageTemplateVhdDistributorOutput struct{ *pulumi.OutputState }

func (ImageTemplateVhdDistributorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ImageTemplateVhdDistributor)(nil)).Elem()
}

func (o ImageTemplateVhdDistributorOutput) ToImageTemplateVhdDistributorOutput() ImageTemplateVhdDistributorOutput {
	return o
}

func (o ImageTemplateVhdDistributorOutput) ToImageTemplateVhdDistributorOutputWithContext(ctx context.Context) ImageTemplateVhdDistributorOutput {
	return o
}

// Tags that will be applied to the artifact once it has been created/updated by the distributor.
func (o ImageTemplateVhdDistributorOutput) ArtifactTags() pulumi.StringMapOutput {
	return o.ApplyT(func(v ImageTemplateVhdDistributor) map[string]string { return v.ArtifactTags }).(pulumi.StringMapOutput)
}

// The name to be used for the associated RunOutput.
func (o ImageTemplateVhdDistributorOutput) RunOutputName() pulumi.StringOutput {
	return o.ApplyT(func(v ImageTemplateVhdDistributor) string { return v.RunOutputName }).(pulumi.StringOutput)
}

// Type of distribution.
// Expected value is 'VHD'.
func (o ImageTemplateVhdDistributorOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ImageTemplateVhdDistributor) string { return v.Type }).(pulumi.StringOutput)
}

// Distribute via VHD in a storage account.
type ImageTemplateVhdDistributorInvokeResponse struct {
	// Tags that will be applied to the artifact once it has been created/updated by the distributor.
	ArtifactTags map[string]string `pulumi:"artifactTags"`
	// The name to be used for the associated RunOutput.
	RunOutputName string `pulumi:"runOutputName"`
	// Type of distribution.
	// Expected value is 'VHD'.
	Type string `pulumi:"type"`
}

// ImageTemplateVhdDistributorInvokeResponseInput is an input type that accepts ImageTemplateVhdDistributorInvokeResponseArgs and ImageTemplateVhdDistributorInvokeResponseOutput values.
// You can construct a concrete instance of `ImageTemplateVhdDistributorInvokeResponseInput` via:
//
//          ImageTemplateVhdDistributorInvokeResponseArgs{...}
type ImageTemplateVhdDistributorInvokeResponseInput interface {
	pulumi.Input

	ToImageTemplateVhdDistributorInvokeResponseOutput() ImageTemplateVhdDistributorInvokeResponseOutput
	ToImageTemplateVhdDistributorInvokeResponseOutputWithContext(context.Context) ImageTemplateVhdDistributorInvokeResponseOutput
}

// Distribute via VHD in a storage account.
type ImageTemplateVhdDistributorInvokeResponseArgs struct {
	// Tags that will be applied to the artifact once it has been created/updated by the distributor.
	ArtifactTags pulumi.StringMapInput `pulumi:"artifactTags"`
	// The name to be used for the associated RunOutput.
	RunOutputName pulumi.StringInput `pulumi:"runOutputName"`
	// Type of distribution.
	// Expected value is 'VHD'.
	Type pulumi.StringInput `pulumi:"type"`
}

func (ImageTemplateVhdDistributorInvokeResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ImageTemplateVhdDistributorInvokeResponse)(nil)).Elem()
}

func (i ImageTemplateVhdDistributorInvokeResponseArgs) ToImageTemplateVhdDistributorInvokeResponseOutput() ImageTemplateVhdDistributorInvokeResponseOutput {
	return i.ToImageTemplateVhdDistributorInvokeResponseOutputWithContext(context.Background())
}

func (i ImageTemplateVhdDistributorInvokeResponseArgs) ToImageTemplateVhdDistributorInvokeResponseOutputWithContext(ctx context.Context) ImageTemplateVhdDistributorInvokeResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageTemplateVhdDistributorInvokeResponseOutput)
}

// Distribute via VHD in a storage account.
type ImageTemplateVhdDistributorInvokeResponseOutput struct{ *pulumi.OutputState }

func (ImageTemplateVhdDistributorInvokeResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ImageTemplateVhdDistributorInvokeResponse)(nil)).Elem()
}

func (o ImageTemplateVhdDistributorInvokeResponseOutput) ToImageTemplateVhdDistributorInvokeResponseOutput() ImageTemplateVhdDistributorInvokeResponseOutput {
	return o
}

func (o ImageTemplateVhdDistributorInvokeResponseOutput) ToImageTemplateVhdDistributorInvokeResponseOutputWithContext(ctx context.Context) ImageTemplateVhdDistributorInvokeResponseOutput {
	return o
}

// Tags that will be applied to the artifact once it has been created/updated by the distributor.
func (o ImageTemplateVhdDistributorInvokeResponseOutput) ArtifactTags() pulumi.StringMapOutput {
	return o.ApplyT(func(v ImageTemplateVhdDistributorInvokeResponse) map[string]string { return v.ArtifactTags }).(pulumi.StringMapOutput)
}

// The name to be used for the associated RunOutput.
func (o ImageTemplateVhdDistributorInvokeResponseOutput) RunOutputName() pulumi.StringOutput {
	return o.ApplyT(func(v ImageTemplateVhdDistributorInvokeResponse) string { return v.RunOutputName }).(pulumi.StringOutput)
}

// Type of distribution.
// Expected value is 'VHD'.
func (o ImageTemplateVhdDistributorInvokeResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ImageTemplateVhdDistributorInvokeResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Distribute via VHD in a storage account.
type ImageTemplateVhdDistributorResponse struct {
	// Tags that will be applied to the artifact once it has been created/updated by the distributor.
	ArtifactTags map[string]string `pulumi:"artifactTags"`
	// The name to be used for the associated RunOutput.
	RunOutputName string `pulumi:"runOutputName"`
	// Type of distribution.
	// Expected value is 'VHD'.
	Type string `pulumi:"type"`
}

// ImageTemplateVhdDistributorResponseInput is an input type that accepts ImageTemplateVhdDistributorResponseArgs and ImageTemplateVhdDistributorResponseOutput values.
// You can construct a concrete instance of `ImageTemplateVhdDistributorResponseInput` via:
//
//          ImageTemplateVhdDistributorResponseArgs{...}
type ImageTemplateVhdDistributorResponseInput interface {
	pulumi.Input

	ToImageTemplateVhdDistributorResponseOutput() ImageTemplateVhdDistributorResponseOutput
	ToImageTemplateVhdDistributorResponseOutputWithContext(context.Context) ImageTemplateVhdDistributorResponseOutput
}

// Distribute via VHD in a storage account.
type ImageTemplateVhdDistributorResponseArgs struct {
	// Tags that will be applied to the artifact once it has been created/updated by the distributor.
	ArtifactTags pulumi.StringMapInput `pulumi:"artifactTags"`
	// The name to be used for the associated RunOutput.
	RunOutputName pulumi.StringInput `pulumi:"runOutputName"`
	// Type of distribution.
	// Expected value is 'VHD'.
	Type pulumi.StringInput `pulumi:"type"`
}

func (ImageTemplateVhdDistributorResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ImageTemplateVhdDistributorResponse)(nil)).Elem()
}

func (i ImageTemplateVhdDistributorResponseArgs) ToImageTemplateVhdDistributorResponseOutput() ImageTemplateVhdDistributorResponseOutput {
	return i.ToImageTemplateVhdDistributorResponseOutputWithContext(context.Background())
}

func (i ImageTemplateVhdDistributorResponseArgs) ToImageTemplateVhdDistributorResponseOutputWithContext(ctx context.Context) ImageTemplateVhdDistributorResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageTemplateVhdDistributorResponseOutput)
}

// Distribute via VHD in a storage account.
type ImageTemplateVhdDistributorResponseOutput struct{ *pulumi.OutputState }

func (ImageTemplateVhdDistributorResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ImageTemplateVhdDistributorResponse)(nil)).Elem()
}

func (o ImageTemplateVhdDistributorResponseOutput) ToImageTemplateVhdDistributorResponseOutput() ImageTemplateVhdDistributorResponseOutput {
	return o
}

func (o ImageTemplateVhdDistributorResponseOutput) ToImageTemplateVhdDistributorResponseOutputWithContext(ctx context.Context) ImageTemplateVhdDistributorResponseOutput {
	return o
}

// Tags that will be applied to the artifact once it has been created/updated by the distributor.
func (o ImageTemplateVhdDistributorResponseOutput) ArtifactTags() pulumi.StringMapOutput {
	return o.ApplyT(func(v ImageTemplateVhdDistributorResponse) map[string]string { return v.ArtifactTags }).(pulumi.StringMapOutput)
}

// The name to be used for the associated RunOutput.
func (o ImageTemplateVhdDistributorResponseOutput) RunOutputName() pulumi.StringOutput {
	return o.ApplyT(func(v ImageTemplateVhdDistributorResponse) string { return v.RunOutputName }).(pulumi.StringOutput)
}

// Type of distribution.
// Expected value is 'VHD'.
func (o ImageTemplateVhdDistributorResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ImageTemplateVhdDistributorResponse) string { return v.Type }).(pulumi.StringOutput)
}

type ProvisioningErrorInvokeResponse struct {
	// Verbose error message about the provisioning failure
	Message *string `pulumi:"message"`
	// Error code of the provisioning failure
	ProvisioningErrorCode *string `pulumi:"provisioningErrorCode"`
}

// ProvisioningErrorInvokeResponseInput is an input type that accepts ProvisioningErrorInvokeResponseArgs and ProvisioningErrorInvokeResponseOutput values.
// You can construct a concrete instance of `ProvisioningErrorInvokeResponseInput` via:
//
//          ProvisioningErrorInvokeResponseArgs{...}
type ProvisioningErrorInvokeResponseInput interface {
	pulumi.Input

	ToProvisioningErrorInvokeResponseOutput() ProvisioningErrorInvokeResponseOutput
	ToProvisioningErrorInvokeResponseOutputWithContext(context.Context) ProvisioningErrorInvokeResponseOutput
}

type ProvisioningErrorInvokeResponseArgs struct {
	// Verbose error message about the provisioning failure
	Message pulumi.StringPtrInput `pulumi:"message"`
	// Error code of the provisioning failure
	ProvisioningErrorCode pulumi.StringPtrInput `pulumi:"provisioningErrorCode"`
}

func (ProvisioningErrorInvokeResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ProvisioningErrorInvokeResponse)(nil)).Elem()
}

func (i ProvisioningErrorInvokeResponseArgs) ToProvisioningErrorInvokeResponseOutput() ProvisioningErrorInvokeResponseOutput {
	return i.ToProvisioningErrorInvokeResponseOutputWithContext(context.Background())
}

func (i ProvisioningErrorInvokeResponseArgs) ToProvisioningErrorInvokeResponseOutputWithContext(ctx context.Context) ProvisioningErrorInvokeResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProvisioningErrorInvokeResponseOutput)
}

type ProvisioningErrorInvokeResponseOutput struct{ *pulumi.OutputState }

func (ProvisioningErrorInvokeResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ProvisioningErrorInvokeResponse)(nil)).Elem()
}

func (o ProvisioningErrorInvokeResponseOutput) ToProvisioningErrorInvokeResponseOutput() ProvisioningErrorInvokeResponseOutput {
	return o
}

func (o ProvisioningErrorInvokeResponseOutput) ToProvisioningErrorInvokeResponseOutputWithContext(ctx context.Context) ProvisioningErrorInvokeResponseOutput {
	return o
}

// Verbose error message about the provisioning failure
func (o ProvisioningErrorInvokeResponseOutput) Message() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProvisioningErrorInvokeResponse) *string { return v.Message }).(pulumi.StringPtrOutput)
}

// Error code of the provisioning failure
func (o ProvisioningErrorInvokeResponseOutput) ProvisioningErrorCode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProvisioningErrorInvokeResponse) *string { return v.ProvisioningErrorCode }).(pulumi.StringPtrOutput)
}

type ProvisioningErrorResponse struct {
	// Verbose error message about the provisioning failure
	Message *string `pulumi:"message"`
	// Error code of the provisioning failure
	ProvisioningErrorCode *string `pulumi:"provisioningErrorCode"`
}

// ProvisioningErrorResponseInput is an input type that accepts ProvisioningErrorResponseArgs and ProvisioningErrorResponseOutput values.
// You can construct a concrete instance of `ProvisioningErrorResponseInput` via:
//
//          ProvisioningErrorResponseArgs{...}
type ProvisioningErrorResponseInput interface {
	pulumi.Input

	ToProvisioningErrorResponseOutput() ProvisioningErrorResponseOutput
	ToProvisioningErrorResponseOutputWithContext(context.Context) ProvisioningErrorResponseOutput
}

type ProvisioningErrorResponseArgs struct {
	// Verbose error message about the provisioning failure
	Message pulumi.StringPtrInput `pulumi:"message"`
	// Error code of the provisioning failure
	ProvisioningErrorCode pulumi.StringPtrInput `pulumi:"provisioningErrorCode"`
}

func (ProvisioningErrorResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ProvisioningErrorResponse)(nil)).Elem()
}

func (i ProvisioningErrorResponseArgs) ToProvisioningErrorResponseOutput() ProvisioningErrorResponseOutput {
	return i.ToProvisioningErrorResponseOutputWithContext(context.Background())
}

func (i ProvisioningErrorResponseArgs) ToProvisioningErrorResponseOutputWithContext(ctx context.Context) ProvisioningErrorResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProvisioningErrorResponseOutput)
}

func (i ProvisioningErrorResponseArgs) ToProvisioningErrorResponsePtrOutput() ProvisioningErrorResponsePtrOutput {
	return i.ToProvisioningErrorResponsePtrOutputWithContext(context.Background())
}

func (i ProvisioningErrorResponseArgs) ToProvisioningErrorResponsePtrOutputWithContext(ctx context.Context) ProvisioningErrorResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProvisioningErrorResponseOutput).ToProvisioningErrorResponsePtrOutputWithContext(ctx)
}

// ProvisioningErrorResponsePtrInput is an input type that accepts ProvisioningErrorResponseArgs, ProvisioningErrorResponsePtr and ProvisioningErrorResponsePtrOutput values.
// You can construct a concrete instance of `ProvisioningErrorResponsePtrInput` via:
//
//          ProvisioningErrorResponseArgs{...}
//
//  or:
//
//          nil
type ProvisioningErrorResponsePtrInput interface {
	pulumi.Input

	ToProvisioningErrorResponsePtrOutput() ProvisioningErrorResponsePtrOutput
	ToProvisioningErrorResponsePtrOutputWithContext(context.Context) ProvisioningErrorResponsePtrOutput
}

type provisioningErrorResponsePtrType ProvisioningErrorResponseArgs

func ProvisioningErrorResponsePtr(v *ProvisioningErrorResponseArgs) ProvisioningErrorResponsePtrInput {
	return (*provisioningErrorResponsePtrType)(v)
}

func (*provisioningErrorResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ProvisioningErrorResponse)(nil)).Elem()
}

func (i *provisioningErrorResponsePtrType) ToProvisioningErrorResponsePtrOutput() ProvisioningErrorResponsePtrOutput {
	return i.ToProvisioningErrorResponsePtrOutputWithContext(context.Background())
}

func (i *provisioningErrorResponsePtrType) ToProvisioningErrorResponsePtrOutputWithContext(ctx context.Context) ProvisioningErrorResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProvisioningErrorResponsePtrOutput)
}

type ProvisioningErrorResponseOutput struct{ *pulumi.OutputState }

func (ProvisioningErrorResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ProvisioningErrorResponse)(nil)).Elem()
}

func (o ProvisioningErrorResponseOutput) ToProvisioningErrorResponseOutput() ProvisioningErrorResponseOutput {
	return o
}

func (o ProvisioningErrorResponseOutput) ToProvisioningErrorResponseOutputWithContext(ctx context.Context) ProvisioningErrorResponseOutput {
	return o
}

func (o ProvisioningErrorResponseOutput) ToProvisioningErrorResponsePtrOutput() ProvisioningErrorResponsePtrOutput {
	return o.ToProvisioningErrorResponsePtrOutputWithContext(context.Background())
}

func (o ProvisioningErrorResponseOutput) ToProvisioningErrorResponsePtrOutputWithContext(ctx context.Context) ProvisioningErrorResponsePtrOutput {
	return o.ApplyT(func(v ProvisioningErrorResponse) *ProvisioningErrorResponse {
		return &v
	}).(ProvisioningErrorResponsePtrOutput)
}

// Verbose error message about the provisioning failure
func (o ProvisioningErrorResponseOutput) Message() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProvisioningErrorResponse) *string { return v.Message }).(pulumi.StringPtrOutput)
}

// Error code of the provisioning failure
func (o ProvisioningErrorResponseOutput) ProvisioningErrorCode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProvisioningErrorResponse) *string { return v.ProvisioningErrorCode }).(pulumi.StringPtrOutput)
}

type ProvisioningErrorResponsePtrOutput struct{ *pulumi.OutputState }

func (ProvisioningErrorResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ProvisioningErrorResponse)(nil)).Elem()
}

func (o ProvisioningErrorResponsePtrOutput) ToProvisioningErrorResponsePtrOutput() ProvisioningErrorResponsePtrOutput {
	return o
}

func (o ProvisioningErrorResponsePtrOutput) ToProvisioningErrorResponsePtrOutputWithContext(ctx context.Context) ProvisioningErrorResponsePtrOutput {
	return o
}

func (o ProvisioningErrorResponsePtrOutput) Elem() ProvisioningErrorResponseOutput {
	return o.ApplyT(func(v *ProvisioningErrorResponse) ProvisioningErrorResponse { return *v }).(ProvisioningErrorResponseOutput)
}

// Verbose error message about the provisioning failure
func (o ProvisioningErrorResponsePtrOutput) Message() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProvisioningErrorResponse) *string {
		if v == nil {
			return nil
		}
		return v.Message
	}).(pulumi.StringPtrOutput)
}

// Error code of the provisioning failure
func (o ProvisioningErrorResponsePtrOutput) ProvisioningErrorCode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProvisioningErrorResponse) *string {
		if v == nil {
			return nil
		}
		return v.ProvisioningErrorCode
	}).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(ImageTemplateIsoSourceOutput{})
	pulumi.RegisterOutputType(ImageTemplateIsoSourceInvokeResponseOutput{})
	pulumi.RegisterOutputType(ImageTemplateIsoSourceResponseOutput{})
	pulumi.RegisterOutputType(ImageTemplateLastRunStatusInvokeResponseOutput{})
	pulumi.RegisterOutputType(ImageTemplateLastRunStatusResponseOutput{})
	pulumi.RegisterOutputType(ImageTemplateLastRunStatusResponsePtrOutput{})
	pulumi.RegisterOutputType(ImageTemplateManagedImageDistributorOutput{})
	pulumi.RegisterOutputType(ImageTemplateManagedImageDistributorInvokeResponseOutput{})
	pulumi.RegisterOutputType(ImageTemplateManagedImageDistributorResponseOutput{})
	pulumi.RegisterOutputType(ImageTemplateManagedImageSourceOutput{})
	pulumi.RegisterOutputType(ImageTemplateManagedImageSourceInvokeResponseOutput{})
	pulumi.RegisterOutputType(ImageTemplateManagedImageSourceResponseOutput{})
	pulumi.RegisterOutputType(ImageTemplatePlatformImageSourceOutput{})
	pulumi.RegisterOutputType(ImageTemplatePlatformImageSourceInvokeResponseOutput{})
	pulumi.RegisterOutputType(ImageTemplatePlatformImageSourceResponseOutput{})
	pulumi.RegisterOutputType(ImageTemplatePowerShellCustomizerOutput{})
	pulumi.RegisterOutputType(ImageTemplatePowerShellCustomizerInvokeResponseOutput{})
	pulumi.RegisterOutputType(ImageTemplatePowerShellCustomizerResponseOutput{})
	pulumi.RegisterOutputType(ImageTemplateRestartCustomizerOutput{})
	pulumi.RegisterOutputType(ImageTemplateRestartCustomizerInvokeResponseOutput{})
	pulumi.RegisterOutputType(ImageTemplateRestartCustomizerResponseOutput{})
	pulumi.RegisterOutputType(ImageTemplateSharedImageDistributorOutput{})
	pulumi.RegisterOutputType(ImageTemplateSharedImageDistributorInvokeResponseOutput{})
	pulumi.RegisterOutputType(ImageTemplateSharedImageDistributorResponseOutput{})
	pulumi.RegisterOutputType(ImageTemplateShellCustomizerOutput{})
	pulumi.RegisterOutputType(ImageTemplateShellCustomizerInvokeResponseOutput{})
	pulumi.RegisterOutputType(ImageTemplateShellCustomizerResponseOutput{})
	pulumi.RegisterOutputType(ImageTemplateVhdDistributorOutput{})
	pulumi.RegisterOutputType(ImageTemplateVhdDistributorInvokeResponseOutput{})
	pulumi.RegisterOutputType(ImageTemplateVhdDistributorResponseOutput{})
	pulumi.RegisterOutputType(ProvisioningErrorInvokeResponseOutput{})
	pulumi.RegisterOutputType(ProvisioningErrorResponseOutput{})
	pulumi.RegisterOutputType(ProvisioningErrorResponsePtrOutput{})
}
