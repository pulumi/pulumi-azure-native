// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v20180201preview

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// Describes an image source that is an installation ISO. Currently only supports Red Hat Enterprise Linux 7.2-7.5 ISO's.
type ImageTemplateIsoSource struct {
	// SHA256 Checksum of the ISO image.
	Sha256Checksum string `pulumi:"sha256Checksum"`
	// URL to get the ISO image. This URL has to be accessible to the resource provider at the time of the imageTemplate creation.
	SourceURI string `pulumi:"sourceURI"`
	// Specifies the type of source image you want to start with.
	Type string `pulumi:"type"`
}

// ImageTemplateIsoSourceInput is an input type that accepts ImageTemplateIsoSourceArgs and ImageTemplateIsoSourceOutput values.
// You can construct a concrete instance of `ImageTemplateIsoSourceInput` via:
//
//          ImageTemplateIsoSourceArgs{...}
type ImageTemplateIsoSourceInput interface {
	pulumi.Input

	ToImageTemplateIsoSourceOutput() ImageTemplateIsoSourceOutput
	ToImageTemplateIsoSourceOutputWithContext(context.Context) ImageTemplateIsoSourceOutput
}

// Describes an image source that is an installation ISO. Currently only supports Red Hat Enterprise Linux 7.2-7.5 ISO's.
type ImageTemplateIsoSourceArgs struct {
	// SHA256 Checksum of the ISO image.
	Sha256Checksum pulumi.StringInput `pulumi:"sha256Checksum"`
	// URL to get the ISO image. This URL has to be accessible to the resource provider at the time of the imageTemplate creation.
	SourceURI pulumi.StringInput `pulumi:"sourceURI"`
	// Specifies the type of source image you want to start with.
	Type pulumi.StringInput `pulumi:"type"`
}

func (ImageTemplateIsoSourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ImageTemplateIsoSource)(nil)).Elem()
}

func (i ImageTemplateIsoSourceArgs) ToImageTemplateIsoSourceOutput() ImageTemplateIsoSourceOutput {
	return i.ToImageTemplateIsoSourceOutputWithContext(context.Background())
}

func (i ImageTemplateIsoSourceArgs) ToImageTemplateIsoSourceOutputWithContext(ctx context.Context) ImageTemplateIsoSourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageTemplateIsoSourceOutput)
}

// Describes an image source that is an installation ISO. Currently only supports Red Hat Enterprise Linux 7.2-7.5 ISO's.
type ImageTemplateIsoSourceOutput struct{ *pulumi.OutputState }

func (ImageTemplateIsoSourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ImageTemplateIsoSource)(nil)).Elem()
}

func (o ImageTemplateIsoSourceOutput) ToImageTemplateIsoSourceOutput() ImageTemplateIsoSourceOutput {
	return o
}

func (o ImageTemplateIsoSourceOutput) ToImageTemplateIsoSourceOutputWithContext(ctx context.Context) ImageTemplateIsoSourceOutput {
	return o
}

// SHA256 Checksum of the ISO image.
func (o ImageTemplateIsoSourceOutput) Sha256Checksum() pulumi.StringOutput {
	return o.ApplyT(func(v ImageTemplateIsoSource) string { return v.Sha256Checksum }).(pulumi.StringOutput)
}

// URL to get the ISO image. This URL has to be accessible to the resource provider at the time of the imageTemplate creation.
func (o ImageTemplateIsoSourceOutput) SourceURI() pulumi.StringOutput {
	return o.ApplyT(func(v ImageTemplateIsoSource) string { return v.SourceURI }).(pulumi.StringOutput)
}

// Specifies the type of source image you want to start with.
func (o ImageTemplateIsoSourceOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ImageTemplateIsoSource) string { return v.Type }).(pulumi.StringOutput)
}

// Describes an image source that is an installation ISO. Currently only supports Red Hat Enterprise Linux 7.2-7.5 ISO's.
type ImageTemplateIsoSourceResponse struct {
	// SHA256 Checksum of the ISO image.
	Sha256Checksum string `pulumi:"sha256Checksum"`
	// URL to get the ISO image. This URL has to be accessible to the resource provider at the time of the imageTemplate creation.
	SourceURI string `pulumi:"sourceURI"`
	// Specifies the type of source image you want to start with.
	Type string `pulumi:"type"`
}

// ImageTemplateIsoSourceResponseInput is an input type that accepts ImageTemplateIsoSourceResponseArgs and ImageTemplateIsoSourceResponseOutput values.
// You can construct a concrete instance of `ImageTemplateIsoSourceResponseInput` via:
//
//          ImageTemplateIsoSourceResponseArgs{...}
type ImageTemplateIsoSourceResponseInput interface {
	pulumi.Input

	ToImageTemplateIsoSourceResponseOutput() ImageTemplateIsoSourceResponseOutput
	ToImageTemplateIsoSourceResponseOutputWithContext(context.Context) ImageTemplateIsoSourceResponseOutput
}

// Describes an image source that is an installation ISO. Currently only supports Red Hat Enterprise Linux 7.2-7.5 ISO's.
type ImageTemplateIsoSourceResponseArgs struct {
	// SHA256 Checksum of the ISO image.
	Sha256Checksum pulumi.StringInput `pulumi:"sha256Checksum"`
	// URL to get the ISO image. This URL has to be accessible to the resource provider at the time of the imageTemplate creation.
	SourceURI pulumi.StringInput `pulumi:"sourceURI"`
	// Specifies the type of source image you want to start with.
	Type pulumi.StringInput `pulumi:"type"`
}

func (ImageTemplateIsoSourceResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ImageTemplateIsoSourceResponse)(nil)).Elem()
}

func (i ImageTemplateIsoSourceResponseArgs) ToImageTemplateIsoSourceResponseOutput() ImageTemplateIsoSourceResponseOutput {
	return i.ToImageTemplateIsoSourceResponseOutputWithContext(context.Background())
}

func (i ImageTemplateIsoSourceResponseArgs) ToImageTemplateIsoSourceResponseOutputWithContext(ctx context.Context) ImageTemplateIsoSourceResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageTemplateIsoSourceResponseOutput)
}

// Describes an image source that is an installation ISO. Currently only supports Red Hat Enterprise Linux 7.2-7.5 ISO's.
type ImageTemplateIsoSourceResponseOutput struct{ *pulumi.OutputState }

func (ImageTemplateIsoSourceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ImageTemplateIsoSourceResponse)(nil)).Elem()
}

func (o ImageTemplateIsoSourceResponseOutput) ToImageTemplateIsoSourceResponseOutput() ImageTemplateIsoSourceResponseOutput {
	return o
}

func (o ImageTemplateIsoSourceResponseOutput) ToImageTemplateIsoSourceResponseOutputWithContext(ctx context.Context) ImageTemplateIsoSourceResponseOutput {
	return o
}

// SHA256 Checksum of the ISO image.
func (o ImageTemplateIsoSourceResponseOutput) Sha256Checksum() pulumi.StringOutput {
	return o.ApplyT(func(v ImageTemplateIsoSourceResponse) string { return v.Sha256Checksum }).(pulumi.StringOutput)
}

// URL to get the ISO image. This URL has to be accessible to the resource provider at the time of the imageTemplate creation.
func (o ImageTemplateIsoSourceResponseOutput) SourceURI() pulumi.StringOutput {
	return o.ApplyT(func(v ImageTemplateIsoSourceResponse) string { return v.SourceURI }).(pulumi.StringOutput)
}

// Specifies the type of source image you want to start with.
func (o ImageTemplateIsoSourceResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ImageTemplateIsoSourceResponse) string { return v.Type }).(pulumi.StringOutput)
}

type ImageTemplateLastRunStatusResponse struct {
	// End time of the last run (UTC)
	EndTime *string `pulumi:"endTime"`
	// Verbose information about the last run state
	Message *string `pulumi:"message"`
	// State of the last run
	RunState *string `pulumi:"runState"`
	// Sub state of the last run
	RunSubState *string `pulumi:"runSubState"`
	// Start time of the last run (UTC)
	StartTime *string `pulumi:"startTime"`
}

// ImageTemplateLastRunStatusResponseInput is an input type that accepts ImageTemplateLastRunStatusResponseArgs and ImageTemplateLastRunStatusResponseOutput values.
// You can construct a concrete instance of `ImageTemplateLastRunStatusResponseInput` via:
//
//          ImageTemplateLastRunStatusResponseArgs{...}
type ImageTemplateLastRunStatusResponseInput interface {
	pulumi.Input

	ToImageTemplateLastRunStatusResponseOutput() ImageTemplateLastRunStatusResponseOutput
	ToImageTemplateLastRunStatusResponseOutputWithContext(context.Context) ImageTemplateLastRunStatusResponseOutput
}

type ImageTemplateLastRunStatusResponseArgs struct {
	// End time of the last run (UTC)
	EndTime pulumi.StringPtrInput `pulumi:"endTime"`
	// Verbose information about the last run state
	Message pulumi.StringPtrInput `pulumi:"message"`
	// State of the last run
	RunState pulumi.StringPtrInput `pulumi:"runState"`
	// Sub state of the last run
	RunSubState pulumi.StringPtrInput `pulumi:"runSubState"`
	// Start time of the last run (UTC)
	StartTime pulumi.StringPtrInput `pulumi:"startTime"`
}

func (ImageTemplateLastRunStatusResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ImageTemplateLastRunStatusResponse)(nil)).Elem()
}

func (i ImageTemplateLastRunStatusResponseArgs) ToImageTemplateLastRunStatusResponseOutput() ImageTemplateLastRunStatusResponseOutput {
	return i.ToImageTemplateLastRunStatusResponseOutputWithContext(context.Background())
}

func (i ImageTemplateLastRunStatusResponseArgs) ToImageTemplateLastRunStatusResponseOutputWithContext(ctx context.Context) ImageTemplateLastRunStatusResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageTemplateLastRunStatusResponseOutput)
}

func (i ImageTemplateLastRunStatusResponseArgs) ToImageTemplateLastRunStatusResponsePtrOutput() ImageTemplateLastRunStatusResponsePtrOutput {
	return i.ToImageTemplateLastRunStatusResponsePtrOutputWithContext(context.Background())
}

func (i ImageTemplateLastRunStatusResponseArgs) ToImageTemplateLastRunStatusResponsePtrOutputWithContext(ctx context.Context) ImageTemplateLastRunStatusResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageTemplateLastRunStatusResponseOutput).ToImageTemplateLastRunStatusResponsePtrOutputWithContext(ctx)
}

// ImageTemplateLastRunStatusResponsePtrInput is an input type that accepts ImageTemplateLastRunStatusResponseArgs, ImageTemplateLastRunStatusResponsePtr and ImageTemplateLastRunStatusResponsePtrOutput values.
// You can construct a concrete instance of `ImageTemplateLastRunStatusResponsePtrInput` via:
//
//          ImageTemplateLastRunStatusResponseArgs{...}
//
//  or:
//
//          nil
type ImageTemplateLastRunStatusResponsePtrInput interface {
	pulumi.Input

	ToImageTemplateLastRunStatusResponsePtrOutput() ImageTemplateLastRunStatusResponsePtrOutput
	ToImageTemplateLastRunStatusResponsePtrOutputWithContext(context.Context) ImageTemplateLastRunStatusResponsePtrOutput
}

type imageTemplateLastRunStatusResponsePtrType ImageTemplateLastRunStatusResponseArgs

func ImageTemplateLastRunStatusResponsePtr(v *ImageTemplateLastRunStatusResponseArgs) ImageTemplateLastRunStatusResponsePtrInput {
	return (*imageTemplateLastRunStatusResponsePtrType)(v)
}

func (*imageTemplateLastRunStatusResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ImageTemplateLastRunStatusResponse)(nil)).Elem()
}

func (i *imageTemplateLastRunStatusResponsePtrType) ToImageTemplateLastRunStatusResponsePtrOutput() ImageTemplateLastRunStatusResponsePtrOutput {
	return i.ToImageTemplateLastRunStatusResponsePtrOutputWithContext(context.Background())
}

func (i *imageTemplateLastRunStatusResponsePtrType) ToImageTemplateLastRunStatusResponsePtrOutputWithContext(ctx context.Context) ImageTemplateLastRunStatusResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageTemplateLastRunStatusResponsePtrOutput)
}

type ImageTemplateLastRunStatusResponseOutput struct{ *pulumi.OutputState }

func (ImageTemplateLastRunStatusResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ImageTemplateLastRunStatusResponse)(nil)).Elem()
}

func (o ImageTemplateLastRunStatusResponseOutput) ToImageTemplateLastRunStatusResponseOutput() ImageTemplateLastRunStatusResponseOutput {
	return o
}

func (o ImageTemplateLastRunStatusResponseOutput) ToImageTemplateLastRunStatusResponseOutputWithContext(ctx context.Context) ImageTemplateLastRunStatusResponseOutput {
	return o
}

func (o ImageTemplateLastRunStatusResponseOutput) ToImageTemplateLastRunStatusResponsePtrOutput() ImageTemplateLastRunStatusResponsePtrOutput {
	return o.ToImageTemplateLastRunStatusResponsePtrOutputWithContext(context.Background())
}

func (o ImageTemplateLastRunStatusResponseOutput) ToImageTemplateLastRunStatusResponsePtrOutputWithContext(ctx context.Context) ImageTemplateLastRunStatusResponsePtrOutput {
	return o.ApplyT(func(v ImageTemplateLastRunStatusResponse) *ImageTemplateLastRunStatusResponse {
		return &v
	}).(ImageTemplateLastRunStatusResponsePtrOutput)
}

// End time of the last run (UTC)
func (o ImageTemplateLastRunStatusResponseOutput) EndTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageTemplateLastRunStatusResponse) *string { return v.EndTime }).(pulumi.StringPtrOutput)
}

// Verbose information about the last run state
func (o ImageTemplateLastRunStatusResponseOutput) Message() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageTemplateLastRunStatusResponse) *string { return v.Message }).(pulumi.StringPtrOutput)
}

// State of the last run
func (o ImageTemplateLastRunStatusResponseOutput) RunState() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageTemplateLastRunStatusResponse) *string { return v.RunState }).(pulumi.StringPtrOutput)
}

// Sub state of the last run
func (o ImageTemplateLastRunStatusResponseOutput) RunSubState() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageTemplateLastRunStatusResponse) *string { return v.RunSubState }).(pulumi.StringPtrOutput)
}

// Start time of the last run (UTC)
func (o ImageTemplateLastRunStatusResponseOutput) StartTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageTemplateLastRunStatusResponse) *string { return v.StartTime }).(pulumi.StringPtrOutput)
}

type ImageTemplateLastRunStatusResponsePtrOutput struct{ *pulumi.OutputState }

func (ImageTemplateLastRunStatusResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ImageTemplateLastRunStatusResponse)(nil)).Elem()
}

func (o ImageTemplateLastRunStatusResponsePtrOutput) ToImageTemplateLastRunStatusResponsePtrOutput() ImageTemplateLastRunStatusResponsePtrOutput {
	return o
}

func (o ImageTemplateLastRunStatusResponsePtrOutput) ToImageTemplateLastRunStatusResponsePtrOutputWithContext(ctx context.Context) ImageTemplateLastRunStatusResponsePtrOutput {
	return o
}

func (o ImageTemplateLastRunStatusResponsePtrOutput) Elem() ImageTemplateLastRunStatusResponseOutput {
	return o.ApplyT(func(v *ImageTemplateLastRunStatusResponse) ImageTemplateLastRunStatusResponse { return *v }).(ImageTemplateLastRunStatusResponseOutput)
}

// End time of the last run (UTC)
func (o ImageTemplateLastRunStatusResponsePtrOutput) EndTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ImageTemplateLastRunStatusResponse) *string {
		if v == nil {
			return nil
		}
		return v.EndTime
	}).(pulumi.StringPtrOutput)
}

// Verbose information about the last run state
func (o ImageTemplateLastRunStatusResponsePtrOutput) Message() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ImageTemplateLastRunStatusResponse) *string {
		if v == nil {
			return nil
		}
		return v.Message
	}).(pulumi.StringPtrOutput)
}

// State of the last run
func (o ImageTemplateLastRunStatusResponsePtrOutput) RunState() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ImageTemplateLastRunStatusResponse) *string {
		if v == nil {
			return nil
		}
		return v.RunState
	}).(pulumi.StringPtrOutput)
}

// Sub state of the last run
func (o ImageTemplateLastRunStatusResponsePtrOutput) RunSubState() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ImageTemplateLastRunStatusResponse) *string {
		if v == nil {
			return nil
		}
		return v.RunSubState
	}).(pulumi.StringPtrOutput)
}

// Start time of the last run (UTC)
func (o ImageTemplateLastRunStatusResponsePtrOutput) StartTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ImageTemplateLastRunStatusResponse) *string {
		if v == nil {
			return nil
		}
		return v.StartTime
	}).(pulumi.StringPtrOutput)
}

// Distribute as a Managed Disk Image.
type ImageTemplateManagedImageDistributor struct {
	// Tags that will be applied to the artifact once it has been created/updated by the distributor.
	ArtifactTags map[string]string `pulumi:"artifactTags"`
	// Resource Id of the Managed Disk Image
	ImageId string `pulumi:"imageId"`
	// Azure location for the image, should match if image already exists
	Location string `pulumi:"location"`
	// The name to be used for the associated RunOutput.
	RunOutputName string `pulumi:"runOutputName"`
	// Type of distribution.
	Type string `pulumi:"type"`
}

// ImageTemplateManagedImageDistributorInput is an input type that accepts ImageTemplateManagedImageDistributorArgs and ImageTemplateManagedImageDistributorOutput values.
// You can construct a concrete instance of `ImageTemplateManagedImageDistributorInput` via:
//
//          ImageTemplateManagedImageDistributorArgs{...}
type ImageTemplateManagedImageDistributorInput interface {
	pulumi.Input

	ToImageTemplateManagedImageDistributorOutput() ImageTemplateManagedImageDistributorOutput
	ToImageTemplateManagedImageDistributorOutputWithContext(context.Context) ImageTemplateManagedImageDistributorOutput
}

// Distribute as a Managed Disk Image.
type ImageTemplateManagedImageDistributorArgs struct {
	// Tags that will be applied to the artifact once it has been created/updated by the distributor.
	ArtifactTags pulumi.StringMapInput `pulumi:"artifactTags"`
	// Resource Id of the Managed Disk Image
	ImageId pulumi.StringInput `pulumi:"imageId"`
	// Azure location for the image, should match if image already exists
	Location pulumi.StringInput `pulumi:"location"`
	// The name to be used for the associated RunOutput.
	RunOutputName pulumi.StringInput `pulumi:"runOutputName"`
	// Type of distribution.
	Type pulumi.StringInput `pulumi:"type"`
}

func (ImageTemplateManagedImageDistributorArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ImageTemplateManagedImageDistributor)(nil)).Elem()
}

func (i ImageTemplateManagedImageDistributorArgs) ToImageTemplateManagedImageDistributorOutput() ImageTemplateManagedImageDistributorOutput {
	return i.ToImageTemplateManagedImageDistributorOutputWithContext(context.Background())
}

func (i ImageTemplateManagedImageDistributorArgs) ToImageTemplateManagedImageDistributorOutputWithContext(ctx context.Context) ImageTemplateManagedImageDistributorOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageTemplateManagedImageDistributorOutput)
}

// Distribute as a Managed Disk Image.
type ImageTemplateManagedImageDistributorOutput struct{ *pulumi.OutputState }

func (ImageTemplateManagedImageDistributorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ImageTemplateManagedImageDistributor)(nil)).Elem()
}

func (o ImageTemplateManagedImageDistributorOutput) ToImageTemplateManagedImageDistributorOutput() ImageTemplateManagedImageDistributorOutput {
	return o
}

func (o ImageTemplateManagedImageDistributorOutput) ToImageTemplateManagedImageDistributorOutputWithContext(ctx context.Context) ImageTemplateManagedImageDistributorOutput {
	return o
}

// Tags that will be applied to the artifact once it has been created/updated by the distributor.
func (o ImageTemplateManagedImageDistributorOutput) ArtifactTags() pulumi.StringMapOutput {
	return o.ApplyT(func(v ImageTemplateManagedImageDistributor) map[string]string { return v.ArtifactTags }).(pulumi.StringMapOutput)
}

// Resource Id of the Managed Disk Image
func (o ImageTemplateManagedImageDistributorOutput) ImageId() pulumi.StringOutput {
	return o.ApplyT(func(v ImageTemplateManagedImageDistributor) string { return v.ImageId }).(pulumi.StringOutput)
}

// Azure location for the image, should match if image already exists
func (o ImageTemplateManagedImageDistributorOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v ImageTemplateManagedImageDistributor) string { return v.Location }).(pulumi.StringOutput)
}

// The name to be used for the associated RunOutput.
func (o ImageTemplateManagedImageDistributorOutput) RunOutputName() pulumi.StringOutput {
	return o.ApplyT(func(v ImageTemplateManagedImageDistributor) string { return v.RunOutputName }).(pulumi.StringOutput)
}

// Type of distribution.
func (o ImageTemplateManagedImageDistributorOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ImageTemplateManagedImageDistributor) string { return v.Type }).(pulumi.StringOutput)
}

// Distribute as a Managed Disk Image.
type ImageTemplateManagedImageDistributorResponse struct {
	// Tags that will be applied to the artifact once it has been created/updated by the distributor.
	ArtifactTags map[string]string `pulumi:"artifactTags"`
	// Resource Id of the Managed Disk Image
	ImageId string `pulumi:"imageId"`
	// Azure location for the image, should match if image already exists
	Location string `pulumi:"location"`
	// The name to be used for the associated RunOutput.
	RunOutputName string `pulumi:"runOutputName"`
	// Type of distribution.
	Type string `pulumi:"type"`
}

// ImageTemplateManagedImageDistributorResponseInput is an input type that accepts ImageTemplateManagedImageDistributorResponseArgs and ImageTemplateManagedImageDistributorResponseOutput values.
// You can construct a concrete instance of `ImageTemplateManagedImageDistributorResponseInput` via:
//
//          ImageTemplateManagedImageDistributorResponseArgs{...}
type ImageTemplateManagedImageDistributorResponseInput interface {
	pulumi.Input

	ToImageTemplateManagedImageDistributorResponseOutput() ImageTemplateManagedImageDistributorResponseOutput
	ToImageTemplateManagedImageDistributorResponseOutputWithContext(context.Context) ImageTemplateManagedImageDistributorResponseOutput
}

// Distribute as a Managed Disk Image.
type ImageTemplateManagedImageDistributorResponseArgs struct {
	// Tags that will be applied to the artifact once it has been created/updated by the distributor.
	ArtifactTags pulumi.StringMapInput `pulumi:"artifactTags"`
	// Resource Id of the Managed Disk Image
	ImageId pulumi.StringInput `pulumi:"imageId"`
	// Azure location for the image, should match if image already exists
	Location pulumi.StringInput `pulumi:"location"`
	// The name to be used for the associated RunOutput.
	RunOutputName pulumi.StringInput `pulumi:"runOutputName"`
	// Type of distribution.
	Type pulumi.StringInput `pulumi:"type"`
}

func (ImageTemplateManagedImageDistributorResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ImageTemplateManagedImageDistributorResponse)(nil)).Elem()
}

func (i ImageTemplateManagedImageDistributorResponseArgs) ToImageTemplateManagedImageDistributorResponseOutput() ImageTemplateManagedImageDistributorResponseOutput {
	return i.ToImageTemplateManagedImageDistributorResponseOutputWithContext(context.Background())
}

func (i ImageTemplateManagedImageDistributorResponseArgs) ToImageTemplateManagedImageDistributorResponseOutputWithContext(ctx context.Context) ImageTemplateManagedImageDistributorResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageTemplateManagedImageDistributorResponseOutput)
}

// Distribute as a Managed Disk Image.
type ImageTemplateManagedImageDistributorResponseOutput struct{ *pulumi.OutputState }

func (ImageTemplateManagedImageDistributorResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ImageTemplateManagedImageDistributorResponse)(nil)).Elem()
}

func (o ImageTemplateManagedImageDistributorResponseOutput) ToImageTemplateManagedImageDistributorResponseOutput() ImageTemplateManagedImageDistributorResponseOutput {
	return o
}

func (o ImageTemplateManagedImageDistributorResponseOutput) ToImageTemplateManagedImageDistributorResponseOutputWithContext(ctx context.Context) ImageTemplateManagedImageDistributorResponseOutput {
	return o
}

// Tags that will be applied to the artifact once it has been created/updated by the distributor.
func (o ImageTemplateManagedImageDistributorResponseOutput) ArtifactTags() pulumi.StringMapOutput {
	return o.ApplyT(func(v ImageTemplateManagedImageDistributorResponse) map[string]string { return v.ArtifactTags }).(pulumi.StringMapOutput)
}

// Resource Id of the Managed Disk Image
func (o ImageTemplateManagedImageDistributorResponseOutput) ImageId() pulumi.StringOutput {
	return o.ApplyT(func(v ImageTemplateManagedImageDistributorResponse) string { return v.ImageId }).(pulumi.StringOutput)
}

// Azure location for the image, should match if image already exists
func (o ImageTemplateManagedImageDistributorResponseOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v ImageTemplateManagedImageDistributorResponse) string { return v.Location }).(pulumi.StringOutput)
}

// The name to be used for the associated RunOutput.
func (o ImageTemplateManagedImageDistributorResponseOutput) RunOutputName() pulumi.StringOutput {
	return o.ApplyT(func(v ImageTemplateManagedImageDistributorResponse) string { return v.RunOutputName }).(pulumi.StringOutput)
}

// Type of distribution.
func (o ImageTemplateManagedImageDistributorResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ImageTemplateManagedImageDistributorResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Describes an image source from [Azure Gallery Images](https://docs.microsoft.com/en-us/rest/api/compute/virtualmachineimages).
type ImageTemplatePlatformImageSource struct {
	// Image offer from the [Azure Gallery Images](https://docs.microsoft.com/en-us/rest/api/compute/virtualmachineimages).
	Offer *string `pulumi:"offer"`
	// Image Publisher in [Azure Gallery Images](https://docs.microsoft.com/en-us/rest/api/compute/virtualmachineimages).
	Publisher *string `pulumi:"publisher"`
	// Image sku from the [Azure Gallery Images](https://docs.microsoft.com/en-us/rest/api/compute/virtualmachineimages).
	Sku *string `pulumi:"sku"`
	// Specifies the type of source image you want to start with.
	Type string `pulumi:"type"`
	// Image version from the [Azure Gallery Images](https://docs.microsoft.com/en-us/rest/api/compute/virtualmachineimages).
	Version *string `pulumi:"version"`
}

// ImageTemplatePlatformImageSourceInput is an input type that accepts ImageTemplatePlatformImageSourceArgs and ImageTemplatePlatformImageSourceOutput values.
// You can construct a concrete instance of `ImageTemplatePlatformImageSourceInput` via:
//
//          ImageTemplatePlatformImageSourceArgs{...}
type ImageTemplatePlatformImageSourceInput interface {
	pulumi.Input

	ToImageTemplatePlatformImageSourceOutput() ImageTemplatePlatformImageSourceOutput
	ToImageTemplatePlatformImageSourceOutputWithContext(context.Context) ImageTemplatePlatformImageSourceOutput
}

// Describes an image source from [Azure Gallery Images](https://docs.microsoft.com/en-us/rest/api/compute/virtualmachineimages).
type ImageTemplatePlatformImageSourceArgs struct {
	// Image offer from the [Azure Gallery Images](https://docs.microsoft.com/en-us/rest/api/compute/virtualmachineimages).
	Offer pulumi.StringPtrInput `pulumi:"offer"`
	// Image Publisher in [Azure Gallery Images](https://docs.microsoft.com/en-us/rest/api/compute/virtualmachineimages).
	Publisher pulumi.StringPtrInput `pulumi:"publisher"`
	// Image sku from the [Azure Gallery Images](https://docs.microsoft.com/en-us/rest/api/compute/virtualmachineimages).
	Sku pulumi.StringPtrInput `pulumi:"sku"`
	// Specifies the type of source image you want to start with.
	Type pulumi.StringInput `pulumi:"type"`
	// Image version from the [Azure Gallery Images](https://docs.microsoft.com/en-us/rest/api/compute/virtualmachineimages).
	Version pulumi.StringPtrInput `pulumi:"version"`
}

func (ImageTemplatePlatformImageSourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ImageTemplatePlatformImageSource)(nil)).Elem()
}

func (i ImageTemplatePlatformImageSourceArgs) ToImageTemplatePlatformImageSourceOutput() ImageTemplatePlatformImageSourceOutput {
	return i.ToImageTemplatePlatformImageSourceOutputWithContext(context.Background())
}

func (i ImageTemplatePlatformImageSourceArgs) ToImageTemplatePlatformImageSourceOutputWithContext(ctx context.Context) ImageTemplatePlatformImageSourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageTemplatePlatformImageSourceOutput)
}

// Describes an image source from [Azure Gallery Images](https://docs.microsoft.com/en-us/rest/api/compute/virtualmachineimages).
type ImageTemplatePlatformImageSourceOutput struct{ *pulumi.OutputState }

func (ImageTemplatePlatformImageSourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ImageTemplatePlatformImageSource)(nil)).Elem()
}

func (o ImageTemplatePlatformImageSourceOutput) ToImageTemplatePlatformImageSourceOutput() ImageTemplatePlatformImageSourceOutput {
	return o
}

func (o ImageTemplatePlatformImageSourceOutput) ToImageTemplatePlatformImageSourceOutputWithContext(ctx context.Context) ImageTemplatePlatformImageSourceOutput {
	return o
}

// Image offer from the [Azure Gallery Images](https://docs.microsoft.com/en-us/rest/api/compute/virtualmachineimages).
func (o ImageTemplatePlatformImageSourceOutput) Offer() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageTemplatePlatformImageSource) *string { return v.Offer }).(pulumi.StringPtrOutput)
}

// Image Publisher in [Azure Gallery Images](https://docs.microsoft.com/en-us/rest/api/compute/virtualmachineimages).
func (o ImageTemplatePlatformImageSourceOutput) Publisher() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageTemplatePlatformImageSource) *string { return v.Publisher }).(pulumi.StringPtrOutput)
}

// Image sku from the [Azure Gallery Images](https://docs.microsoft.com/en-us/rest/api/compute/virtualmachineimages).
func (o ImageTemplatePlatformImageSourceOutput) Sku() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageTemplatePlatformImageSource) *string { return v.Sku }).(pulumi.StringPtrOutput)
}

// Specifies the type of source image you want to start with.
func (o ImageTemplatePlatformImageSourceOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ImageTemplatePlatformImageSource) string { return v.Type }).(pulumi.StringOutput)
}

// Image version from the [Azure Gallery Images](https://docs.microsoft.com/en-us/rest/api/compute/virtualmachineimages).
func (o ImageTemplatePlatformImageSourceOutput) Version() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageTemplatePlatformImageSource) *string { return v.Version }).(pulumi.StringPtrOutput)
}

// Describes an image source from [Azure Gallery Images](https://docs.microsoft.com/en-us/rest/api/compute/virtualmachineimages).
type ImageTemplatePlatformImageSourceResponse struct {
	// Image offer from the [Azure Gallery Images](https://docs.microsoft.com/en-us/rest/api/compute/virtualmachineimages).
	Offer *string `pulumi:"offer"`
	// Image Publisher in [Azure Gallery Images](https://docs.microsoft.com/en-us/rest/api/compute/virtualmachineimages).
	Publisher *string `pulumi:"publisher"`
	// Image sku from the [Azure Gallery Images](https://docs.microsoft.com/en-us/rest/api/compute/virtualmachineimages).
	Sku *string `pulumi:"sku"`
	// Specifies the type of source image you want to start with.
	Type string `pulumi:"type"`
	// Image version from the [Azure Gallery Images](https://docs.microsoft.com/en-us/rest/api/compute/virtualmachineimages).
	Version *string `pulumi:"version"`
}

// ImageTemplatePlatformImageSourceResponseInput is an input type that accepts ImageTemplatePlatformImageSourceResponseArgs and ImageTemplatePlatformImageSourceResponseOutput values.
// You can construct a concrete instance of `ImageTemplatePlatformImageSourceResponseInput` via:
//
//          ImageTemplatePlatformImageSourceResponseArgs{...}
type ImageTemplatePlatformImageSourceResponseInput interface {
	pulumi.Input

	ToImageTemplatePlatformImageSourceResponseOutput() ImageTemplatePlatformImageSourceResponseOutput
	ToImageTemplatePlatformImageSourceResponseOutputWithContext(context.Context) ImageTemplatePlatformImageSourceResponseOutput
}

// Describes an image source from [Azure Gallery Images](https://docs.microsoft.com/en-us/rest/api/compute/virtualmachineimages).
type ImageTemplatePlatformImageSourceResponseArgs struct {
	// Image offer from the [Azure Gallery Images](https://docs.microsoft.com/en-us/rest/api/compute/virtualmachineimages).
	Offer pulumi.StringPtrInput `pulumi:"offer"`
	// Image Publisher in [Azure Gallery Images](https://docs.microsoft.com/en-us/rest/api/compute/virtualmachineimages).
	Publisher pulumi.StringPtrInput `pulumi:"publisher"`
	// Image sku from the [Azure Gallery Images](https://docs.microsoft.com/en-us/rest/api/compute/virtualmachineimages).
	Sku pulumi.StringPtrInput `pulumi:"sku"`
	// Specifies the type of source image you want to start with.
	Type pulumi.StringInput `pulumi:"type"`
	// Image version from the [Azure Gallery Images](https://docs.microsoft.com/en-us/rest/api/compute/virtualmachineimages).
	Version pulumi.StringPtrInput `pulumi:"version"`
}

func (ImageTemplatePlatformImageSourceResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ImageTemplatePlatformImageSourceResponse)(nil)).Elem()
}

func (i ImageTemplatePlatformImageSourceResponseArgs) ToImageTemplatePlatformImageSourceResponseOutput() ImageTemplatePlatformImageSourceResponseOutput {
	return i.ToImageTemplatePlatformImageSourceResponseOutputWithContext(context.Background())
}

func (i ImageTemplatePlatformImageSourceResponseArgs) ToImageTemplatePlatformImageSourceResponseOutputWithContext(ctx context.Context) ImageTemplatePlatformImageSourceResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageTemplatePlatformImageSourceResponseOutput)
}

// Describes an image source from [Azure Gallery Images](https://docs.microsoft.com/en-us/rest/api/compute/virtualmachineimages).
type ImageTemplatePlatformImageSourceResponseOutput struct{ *pulumi.OutputState }

func (ImageTemplatePlatformImageSourceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ImageTemplatePlatformImageSourceResponse)(nil)).Elem()
}

func (o ImageTemplatePlatformImageSourceResponseOutput) ToImageTemplatePlatformImageSourceResponseOutput() ImageTemplatePlatformImageSourceResponseOutput {
	return o
}

func (o ImageTemplatePlatformImageSourceResponseOutput) ToImageTemplatePlatformImageSourceResponseOutputWithContext(ctx context.Context) ImageTemplatePlatformImageSourceResponseOutput {
	return o
}

// Image offer from the [Azure Gallery Images](https://docs.microsoft.com/en-us/rest/api/compute/virtualmachineimages).
func (o ImageTemplatePlatformImageSourceResponseOutput) Offer() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageTemplatePlatformImageSourceResponse) *string { return v.Offer }).(pulumi.StringPtrOutput)
}

// Image Publisher in [Azure Gallery Images](https://docs.microsoft.com/en-us/rest/api/compute/virtualmachineimages).
func (o ImageTemplatePlatformImageSourceResponseOutput) Publisher() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageTemplatePlatformImageSourceResponse) *string { return v.Publisher }).(pulumi.StringPtrOutput)
}

// Image sku from the [Azure Gallery Images](https://docs.microsoft.com/en-us/rest/api/compute/virtualmachineimages).
func (o ImageTemplatePlatformImageSourceResponseOutput) Sku() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageTemplatePlatformImageSourceResponse) *string { return v.Sku }).(pulumi.StringPtrOutput)
}

// Specifies the type of source image you want to start with.
func (o ImageTemplatePlatformImageSourceResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ImageTemplatePlatformImageSourceResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Image version from the [Azure Gallery Images](https://docs.microsoft.com/en-us/rest/api/compute/virtualmachineimages).
func (o ImageTemplatePlatformImageSourceResponseOutput) Version() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageTemplatePlatformImageSourceResponse) *string { return v.Version }).(pulumi.StringPtrOutput)
}

// Distribute via Shared Image Gallery.
type ImageTemplateSharedImageDistributor struct {
	// Tags that will be applied to the artifact once it has been created/updated by the distributor.
	ArtifactTags map[string]string `pulumi:"artifactTags"`
	// Resource Id of the Shared Image Gallery image
	GalleryImageId     string   `pulumi:"galleryImageId"`
	ReplicationRegions []string `pulumi:"replicationRegions"`
	// The name to be used for the associated RunOutput.
	RunOutputName string `pulumi:"runOutputName"`
	// Type of distribution.
	Type string `pulumi:"type"`
}

// ImageTemplateSharedImageDistributorInput is an input type that accepts ImageTemplateSharedImageDistributorArgs and ImageTemplateSharedImageDistributorOutput values.
// You can construct a concrete instance of `ImageTemplateSharedImageDistributorInput` via:
//
//          ImageTemplateSharedImageDistributorArgs{...}
type ImageTemplateSharedImageDistributorInput interface {
	pulumi.Input

	ToImageTemplateSharedImageDistributorOutput() ImageTemplateSharedImageDistributorOutput
	ToImageTemplateSharedImageDistributorOutputWithContext(context.Context) ImageTemplateSharedImageDistributorOutput
}

// Distribute via Shared Image Gallery.
type ImageTemplateSharedImageDistributorArgs struct {
	// Tags that will be applied to the artifact once it has been created/updated by the distributor.
	ArtifactTags pulumi.StringMapInput `pulumi:"artifactTags"`
	// Resource Id of the Shared Image Gallery image
	GalleryImageId     pulumi.StringInput      `pulumi:"galleryImageId"`
	ReplicationRegions pulumi.StringArrayInput `pulumi:"replicationRegions"`
	// The name to be used for the associated RunOutput.
	RunOutputName pulumi.StringInput `pulumi:"runOutputName"`
	// Type of distribution.
	Type pulumi.StringInput `pulumi:"type"`
}

func (ImageTemplateSharedImageDistributorArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ImageTemplateSharedImageDistributor)(nil)).Elem()
}

func (i ImageTemplateSharedImageDistributorArgs) ToImageTemplateSharedImageDistributorOutput() ImageTemplateSharedImageDistributorOutput {
	return i.ToImageTemplateSharedImageDistributorOutputWithContext(context.Background())
}

func (i ImageTemplateSharedImageDistributorArgs) ToImageTemplateSharedImageDistributorOutputWithContext(ctx context.Context) ImageTemplateSharedImageDistributorOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageTemplateSharedImageDistributorOutput)
}

// Distribute via Shared Image Gallery.
type ImageTemplateSharedImageDistributorOutput struct{ *pulumi.OutputState }

func (ImageTemplateSharedImageDistributorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ImageTemplateSharedImageDistributor)(nil)).Elem()
}

func (o ImageTemplateSharedImageDistributorOutput) ToImageTemplateSharedImageDistributorOutput() ImageTemplateSharedImageDistributorOutput {
	return o
}

func (o ImageTemplateSharedImageDistributorOutput) ToImageTemplateSharedImageDistributorOutputWithContext(ctx context.Context) ImageTemplateSharedImageDistributorOutput {
	return o
}

// Tags that will be applied to the artifact once it has been created/updated by the distributor.
func (o ImageTemplateSharedImageDistributorOutput) ArtifactTags() pulumi.StringMapOutput {
	return o.ApplyT(func(v ImageTemplateSharedImageDistributor) map[string]string { return v.ArtifactTags }).(pulumi.StringMapOutput)
}

// Resource Id of the Shared Image Gallery image
func (o ImageTemplateSharedImageDistributorOutput) GalleryImageId() pulumi.StringOutput {
	return o.ApplyT(func(v ImageTemplateSharedImageDistributor) string { return v.GalleryImageId }).(pulumi.StringOutput)
}

func (o ImageTemplateSharedImageDistributorOutput) ReplicationRegions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ImageTemplateSharedImageDistributor) []string { return v.ReplicationRegions }).(pulumi.StringArrayOutput)
}

// The name to be used for the associated RunOutput.
func (o ImageTemplateSharedImageDistributorOutput) RunOutputName() pulumi.StringOutput {
	return o.ApplyT(func(v ImageTemplateSharedImageDistributor) string { return v.RunOutputName }).(pulumi.StringOutput)
}

// Type of distribution.
func (o ImageTemplateSharedImageDistributorOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ImageTemplateSharedImageDistributor) string { return v.Type }).(pulumi.StringOutput)
}

// Distribute via Shared Image Gallery.
type ImageTemplateSharedImageDistributorResponse struct {
	// Tags that will be applied to the artifact once it has been created/updated by the distributor.
	ArtifactTags map[string]string `pulumi:"artifactTags"`
	// Resource Id of the Shared Image Gallery image
	GalleryImageId     string   `pulumi:"galleryImageId"`
	ReplicationRegions []string `pulumi:"replicationRegions"`
	// The name to be used for the associated RunOutput.
	RunOutputName string `pulumi:"runOutputName"`
	// Type of distribution.
	Type string `pulumi:"type"`
}

// ImageTemplateSharedImageDistributorResponseInput is an input type that accepts ImageTemplateSharedImageDistributorResponseArgs and ImageTemplateSharedImageDistributorResponseOutput values.
// You can construct a concrete instance of `ImageTemplateSharedImageDistributorResponseInput` via:
//
//          ImageTemplateSharedImageDistributorResponseArgs{...}
type ImageTemplateSharedImageDistributorResponseInput interface {
	pulumi.Input

	ToImageTemplateSharedImageDistributorResponseOutput() ImageTemplateSharedImageDistributorResponseOutput
	ToImageTemplateSharedImageDistributorResponseOutputWithContext(context.Context) ImageTemplateSharedImageDistributorResponseOutput
}

// Distribute via Shared Image Gallery.
type ImageTemplateSharedImageDistributorResponseArgs struct {
	// Tags that will be applied to the artifact once it has been created/updated by the distributor.
	ArtifactTags pulumi.StringMapInput `pulumi:"artifactTags"`
	// Resource Id of the Shared Image Gallery image
	GalleryImageId     pulumi.StringInput      `pulumi:"galleryImageId"`
	ReplicationRegions pulumi.StringArrayInput `pulumi:"replicationRegions"`
	// The name to be used for the associated RunOutput.
	RunOutputName pulumi.StringInput `pulumi:"runOutputName"`
	// Type of distribution.
	Type pulumi.StringInput `pulumi:"type"`
}

func (ImageTemplateSharedImageDistributorResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ImageTemplateSharedImageDistributorResponse)(nil)).Elem()
}

func (i ImageTemplateSharedImageDistributorResponseArgs) ToImageTemplateSharedImageDistributorResponseOutput() ImageTemplateSharedImageDistributorResponseOutput {
	return i.ToImageTemplateSharedImageDistributorResponseOutputWithContext(context.Background())
}

func (i ImageTemplateSharedImageDistributorResponseArgs) ToImageTemplateSharedImageDistributorResponseOutputWithContext(ctx context.Context) ImageTemplateSharedImageDistributorResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageTemplateSharedImageDistributorResponseOutput)
}

// Distribute via Shared Image Gallery.
type ImageTemplateSharedImageDistributorResponseOutput struct{ *pulumi.OutputState }

func (ImageTemplateSharedImageDistributorResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ImageTemplateSharedImageDistributorResponse)(nil)).Elem()
}

func (o ImageTemplateSharedImageDistributorResponseOutput) ToImageTemplateSharedImageDistributorResponseOutput() ImageTemplateSharedImageDistributorResponseOutput {
	return o
}

func (o ImageTemplateSharedImageDistributorResponseOutput) ToImageTemplateSharedImageDistributorResponseOutputWithContext(ctx context.Context) ImageTemplateSharedImageDistributorResponseOutput {
	return o
}

// Tags that will be applied to the artifact once it has been created/updated by the distributor.
func (o ImageTemplateSharedImageDistributorResponseOutput) ArtifactTags() pulumi.StringMapOutput {
	return o.ApplyT(func(v ImageTemplateSharedImageDistributorResponse) map[string]string { return v.ArtifactTags }).(pulumi.StringMapOutput)
}

// Resource Id of the Shared Image Gallery image
func (o ImageTemplateSharedImageDistributorResponseOutput) GalleryImageId() pulumi.StringOutput {
	return o.ApplyT(func(v ImageTemplateSharedImageDistributorResponse) string { return v.GalleryImageId }).(pulumi.StringOutput)
}

func (o ImageTemplateSharedImageDistributorResponseOutput) ReplicationRegions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ImageTemplateSharedImageDistributorResponse) []string { return v.ReplicationRegions }).(pulumi.StringArrayOutput)
}

// The name to be used for the associated RunOutput.
func (o ImageTemplateSharedImageDistributorResponseOutput) RunOutputName() pulumi.StringOutput {
	return o.ApplyT(func(v ImageTemplateSharedImageDistributorResponse) string { return v.RunOutputName }).(pulumi.StringOutput)
}

// Type of distribution.
func (o ImageTemplateSharedImageDistributorResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ImageTemplateSharedImageDistributorResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Runs a shell script during the customization phase
type ImageTemplateShellCustomizer struct {
	// Friendly Name to provide context on what this customization step does
	Name *string `pulumi:"name"`
	// The shell script to be run for customizing. It can be a github link, SAS URI for Azure Storage, etc
	Script *string `pulumi:"script"`
	// The type of customization tool you want to use on the Image. For example, "shell" can be shellCustomizer
	Type string `pulumi:"type"`
}

// ImageTemplateShellCustomizerInput is an input type that accepts ImageTemplateShellCustomizerArgs and ImageTemplateShellCustomizerOutput values.
// You can construct a concrete instance of `ImageTemplateShellCustomizerInput` via:
//
//          ImageTemplateShellCustomizerArgs{...}
type ImageTemplateShellCustomizerInput interface {
	pulumi.Input

	ToImageTemplateShellCustomizerOutput() ImageTemplateShellCustomizerOutput
	ToImageTemplateShellCustomizerOutputWithContext(context.Context) ImageTemplateShellCustomizerOutput
}

// Runs a shell script during the customization phase
type ImageTemplateShellCustomizerArgs struct {
	// Friendly Name to provide context on what this customization step does
	Name pulumi.StringPtrInput `pulumi:"name"`
	// The shell script to be run for customizing. It can be a github link, SAS URI for Azure Storage, etc
	Script pulumi.StringPtrInput `pulumi:"script"`
	// The type of customization tool you want to use on the Image. For example, "shell" can be shellCustomizer
	Type pulumi.StringInput `pulumi:"type"`
}

func (ImageTemplateShellCustomizerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ImageTemplateShellCustomizer)(nil)).Elem()
}

func (i ImageTemplateShellCustomizerArgs) ToImageTemplateShellCustomizerOutput() ImageTemplateShellCustomizerOutput {
	return i.ToImageTemplateShellCustomizerOutputWithContext(context.Background())
}

func (i ImageTemplateShellCustomizerArgs) ToImageTemplateShellCustomizerOutputWithContext(ctx context.Context) ImageTemplateShellCustomizerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageTemplateShellCustomizerOutput)
}

// ImageTemplateShellCustomizerArrayInput is an input type that accepts ImageTemplateShellCustomizerArray and ImageTemplateShellCustomizerArrayOutput values.
// You can construct a concrete instance of `ImageTemplateShellCustomizerArrayInput` via:
//
//          ImageTemplateShellCustomizerArray{ ImageTemplateShellCustomizerArgs{...} }
type ImageTemplateShellCustomizerArrayInput interface {
	pulumi.Input

	ToImageTemplateShellCustomizerArrayOutput() ImageTemplateShellCustomizerArrayOutput
	ToImageTemplateShellCustomizerArrayOutputWithContext(context.Context) ImageTemplateShellCustomizerArrayOutput
}

type ImageTemplateShellCustomizerArray []ImageTemplateShellCustomizerInput

func (ImageTemplateShellCustomizerArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ImageTemplateShellCustomizer)(nil)).Elem()
}

func (i ImageTemplateShellCustomizerArray) ToImageTemplateShellCustomizerArrayOutput() ImageTemplateShellCustomizerArrayOutput {
	return i.ToImageTemplateShellCustomizerArrayOutputWithContext(context.Background())
}

func (i ImageTemplateShellCustomizerArray) ToImageTemplateShellCustomizerArrayOutputWithContext(ctx context.Context) ImageTemplateShellCustomizerArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageTemplateShellCustomizerArrayOutput)
}

// Runs a shell script during the customization phase
type ImageTemplateShellCustomizerOutput struct{ *pulumi.OutputState }

func (ImageTemplateShellCustomizerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ImageTemplateShellCustomizer)(nil)).Elem()
}

func (o ImageTemplateShellCustomizerOutput) ToImageTemplateShellCustomizerOutput() ImageTemplateShellCustomizerOutput {
	return o
}

func (o ImageTemplateShellCustomizerOutput) ToImageTemplateShellCustomizerOutputWithContext(ctx context.Context) ImageTemplateShellCustomizerOutput {
	return o
}

// Friendly Name to provide context on what this customization step does
func (o ImageTemplateShellCustomizerOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageTemplateShellCustomizer) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The shell script to be run for customizing. It can be a github link, SAS URI for Azure Storage, etc
func (o ImageTemplateShellCustomizerOutput) Script() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageTemplateShellCustomizer) *string { return v.Script }).(pulumi.StringPtrOutput)
}

// The type of customization tool you want to use on the Image. For example, "shell" can be shellCustomizer
func (o ImageTemplateShellCustomizerOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ImageTemplateShellCustomizer) string { return v.Type }).(pulumi.StringOutput)
}

type ImageTemplateShellCustomizerArrayOutput struct{ *pulumi.OutputState }

func (ImageTemplateShellCustomizerArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ImageTemplateShellCustomizer)(nil)).Elem()
}

func (o ImageTemplateShellCustomizerArrayOutput) ToImageTemplateShellCustomizerArrayOutput() ImageTemplateShellCustomizerArrayOutput {
	return o
}

func (o ImageTemplateShellCustomizerArrayOutput) ToImageTemplateShellCustomizerArrayOutputWithContext(ctx context.Context) ImageTemplateShellCustomizerArrayOutput {
	return o
}

func (o ImageTemplateShellCustomizerArrayOutput) Index(i pulumi.IntInput) ImageTemplateShellCustomizerOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ImageTemplateShellCustomizer {
		return vs[0].([]ImageTemplateShellCustomizer)[vs[1].(int)]
	}).(ImageTemplateShellCustomizerOutput)
}

// Runs a shell script during the customization phase
type ImageTemplateShellCustomizerResponse struct {
	// Friendly Name to provide context on what this customization step does
	Name *string `pulumi:"name"`
	// The shell script to be run for customizing. It can be a github link, SAS URI for Azure Storage, etc
	Script *string `pulumi:"script"`
	// The type of customization tool you want to use on the Image. For example, "shell" can be shellCustomizer
	Type string `pulumi:"type"`
}

// ImageTemplateShellCustomizerResponseInput is an input type that accepts ImageTemplateShellCustomizerResponseArgs and ImageTemplateShellCustomizerResponseOutput values.
// You can construct a concrete instance of `ImageTemplateShellCustomizerResponseInput` via:
//
//          ImageTemplateShellCustomizerResponseArgs{...}
type ImageTemplateShellCustomizerResponseInput interface {
	pulumi.Input

	ToImageTemplateShellCustomizerResponseOutput() ImageTemplateShellCustomizerResponseOutput
	ToImageTemplateShellCustomizerResponseOutputWithContext(context.Context) ImageTemplateShellCustomizerResponseOutput
}

// Runs a shell script during the customization phase
type ImageTemplateShellCustomizerResponseArgs struct {
	// Friendly Name to provide context on what this customization step does
	Name pulumi.StringPtrInput `pulumi:"name"`
	// The shell script to be run for customizing. It can be a github link, SAS URI for Azure Storage, etc
	Script pulumi.StringPtrInput `pulumi:"script"`
	// The type of customization tool you want to use on the Image. For example, "shell" can be shellCustomizer
	Type pulumi.StringInput `pulumi:"type"`
}

func (ImageTemplateShellCustomizerResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ImageTemplateShellCustomizerResponse)(nil)).Elem()
}

func (i ImageTemplateShellCustomizerResponseArgs) ToImageTemplateShellCustomizerResponseOutput() ImageTemplateShellCustomizerResponseOutput {
	return i.ToImageTemplateShellCustomizerResponseOutputWithContext(context.Background())
}

func (i ImageTemplateShellCustomizerResponseArgs) ToImageTemplateShellCustomizerResponseOutputWithContext(ctx context.Context) ImageTemplateShellCustomizerResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageTemplateShellCustomizerResponseOutput)
}

// ImageTemplateShellCustomizerResponseArrayInput is an input type that accepts ImageTemplateShellCustomizerResponseArray and ImageTemplateShellCustomizerResponseArrayOutput values.
// You can construct a concrete instance of `ImageTemplateShellCustomizerResponseArrayInput` via:
//
//          ImageTemplateShellCustomizerResponseArray{ ImageTemplateShellCustomizerResponseArgs{...} }
type ImageTemplateShellCustomizerResponseArrayInput interface {
	pulumi.Input

	ToImageTemplateShellCustomizerResponseArrayOutput() ImageTemplateShellCustomizerResponseArrayOutput
	ToImageTemplateShellCustomizerResponseArrayOutputWithContext(context.Context) ImageTemplateShellCustomizerResponseArrayOutput
}

type ImageTemplateShellCustomizerResponseArray []ImageTemplateShellCustomizerResponseInput

func (ImageTemplateShellCustomizerResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ImageTemplateShellCustomizerResponse)(nil)).Elem()
}

func (i ImageTemplateShellCustomizerResponseArray) ToImageTemplateShellCustomizerResponseArrayOutput() ImageTemplateShellCustomizerResponseArrayOutput {
	return i.ToImageTemplateShellCustomizerResponseArrayOutputWithContext(context.Background())
}

func (i ImageTemplateShellCustomizerResponseArray) ToImageTemplateShellCustomizerResponseArrayOutputWithContext(ctx context.Context) ImageTemplateShellCustomizerResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageTemplateShellCustomizerResponseArrayOutput)
}

// Runs a shell script during the customization phase
type ImageTemplateShellCustomizerResponseOutput struct{ *pulumi.OutputState }

func (ImageTemplateShellCustomizerResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ImageTemplateShellCustomizerResponse)(nil)).Elem()
}

func (o ImageTemplateShellCustomizerResponseOutput) ToImageTemplateShellCustomizerResponseOutput() ImageTemplateShellCustomizerResponseOutput {
	return o
}

func (o ImageTemplateShellCustomizerResponseOutput) ToImageTemplateShellCustomizerResponseOutputWithContext(ctx context.Context) ImageTemplateShellCustomizerResponseOutput {
	return o
}

// Friendly Name to provide context on what this customization step does
func (o ImageTemplateShellCustomizerResponseOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageTemplateShellCustomizerResponse) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The shell script to be run for customizing. It can be a github link, SAS URI for Azure Storage, etc
func (o ImageTemplateShellCustomizerResponseOutput) Script() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageTemplateShellCustomizerResponse) *string { return v.Script }).(pulumi.StringPtrOutput)
}

// The type of customization tool you want to use on the Image. For example, "shell" can be shellCustomizer
func (o ImageTemplateShellCustomizerResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ImageTemplateShellCustomizerResponse) string { return v.Type }).(pulumi.StringOutput)
}

type ImageTemplateShellCustomizerResponseArrayOutput struct{ *pulumi.OutputState }

func (ImageTemplateShellCustomizerResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ImageTemplateShellCustomizerResponse)(nil)).Elem()
}

func (o ImageTemplateShellCustomizerResponseArrayOutput) ToImageTemplateShellCustomizerResponseArrayOutput() ImageTemplateShellCustomizerResponseArrayOutput {
	return o
}

func (o ImageTemplateShellCustomizerResponseArrayOutput) ToImageTemplateShellCustomizerResponseArrayOutputWithContext(ctx context.Context) ImageTemplateShellCustomizerResponseArrayOutput {
	return o
}

func (o ImageTemplateShellCustomizerResponseArrayOutput) Index(i pulumi.IntInput) ImageTemplateShellCustomizerResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ImageTemplateShellCustomizerResponse {
		return vs[0].([]ImageTemplateShellCustomizerResponse)[vs[1].(int)]
	}).(ImageTemplateShellCustomizerResponseOutput)
}

type ProvisioningErrorResponse struct {
	// Verbose error message about the provisioning failure
	Message *string `pulumi:"message"`
	// Error code of the provisioning failure
	ProvisioningErrorCode *string `pulumi:"provisioningErrorCode"`
}

// ProvisioningErrorResponseInput is an input type that accepts ProvisioningErrorResponseArgs and ProvisioningErrorResponseOutput values.
// You can construct a concrete instance of `ProvisioningErrorResponseInput` via:
//
//          ProvisioningErrorResponseArgs{...}
type ProvisioningErrorResponseInput interface {
	pulumi.Input

	ToProvisioningErrorResponseOutput() ProvisioningErrorResponseOutput
	ToProvisioningErrorResponseOutputWithContext(context.Context) ProvisioningErrorResponseOutput
}

type ProvisioningErrorResponseArgs struct {
	// Verbose error message about the provisioning failure
	Message pulumi.StringPtrInput `pulumi:"message"`
	// Error code of the provisioning failure
	ProvisioningErrorCode pulumi.StringPtrInput `pulumi:"provisioningErrorCode"`
}

func (ProvisioningErrorResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ProvisioningErrorResponse)(nil)).Elem()
}

func (i ProvisioningErrorResponseArgs) ToProvisioningErrorResponseOutput() ProvisioningErrorResponseOutput {
	return i.ToProvisioningErrorResponseOutputWithContext(context.Background())
}

func (i ProvisioningErrorResponseArgs) ToProvisioningErrorResponseOutputWithContext(ctx context.Context) ProvisioningErrorResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProvisioningErrorResponseOutput)
}

func (i ProvisioningErrorResponseArgs) ToProvisioningErrorResponsePtrOutput() ProvisioningErrorResponsePtrOutput {
	return i.ToProvisioningErrorResponsePtrOutputWithContext(context.Background())
}

func (i ProvisioningErrorResponseArgs) ToProvisioningErrorResponsePtrOutputWithContext(ctx context.Context) ProvisioningErrorResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProvisioningErrorResponseOutput).ToProvisioningErrorResponsePtrOutputWithContext(ctx)
}

// ProvisioningErrorResponsePtrInput is an input type that accepts ProvisioningErrorResponseArgs, ProvisioningErrorResponsePtr and ProvisioningErrorResponsePtrOutput values.
// You can construct a concrete instance of `ProvisioningErrorResponsePtrInput` via:
//
//          ProvisioningErrorResponseArgs{...}
//
//  or:
//
//          nil
type ProvisioningErrorResponsePtrInput interface {
	pulumi.Input

	ToProvisioningErrorResponsePtrOutput() ProvisioningErrorResponsePtrOutput
	ToProvisioningErrorResponsePtrOutputWithContext(context.Context) ProvisioningErrorResponsePtrOutput
}

type provisioningErrorResponsePtrType ProvisioningErrorResponseArgs

func ProvisioningErrorResponsePtr(v *ProvisioningErrorResponseArgs) ProvisioningErrorResponsePtrInput {
	return (*provisioningErrorResponsePtrType)(v)
}

func (*provisioningErrorResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ProvisioningErrorResponse)(nil)).Elem()
}

func (i *provisioningErrorResponsePtrType) ToProvisioningErrorResponsePtrOutput() ProvisioningErrorResponsePtrOutput {
	return i.ToProvisioningErrorResponsePtrOutputWithContext(context.Background())
}

func (i *provisioningErrorResponsePtrType) ToProvisioningErrorResponsePtrOutputWithContext(ctx context.Context) ProvisioningErrorResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProvisioningErrorResponsePtrOutput)
}

type ProvisioningErrorResponseOutput struct{ *pulumi.OutputState }

func (ProvisioningErrorResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ProvisioningErrorResponse)(nil)).Elem()
}

func (o ProvisioningErrorResponseOutput) ToProvisioningErrorResponseOutput() ProvisioningErrorResponseOutput {
	return o
}

func (o ProvisioningErrorResponseOutput) ToProvisioningErrorResponseOutputWithContext(ctx context.Context) ProvisioningErrorResponseOutput {
	return o
}

func (o ProvisioningErrorResponseOutput) ToProvisioningErrorResponsePtrOutput() ProvisioningErrorResponsePtrOutput {
	return o.ToProvisioningErrorResponsePtrOutputWithContext(context.Background())
}

func (o ProvisioningErrorResponseOutput) ToProvisioningErrorResponsePtrOutputWithContext(ctx context.Context) ProvisioningErrorResponsePtrOutput {
	return o.ApplyT(func(v ProvisioningErrorResponse) *ProvisioningErrorResponse {
		return &v
	}).(ProvisioningErrorResponsePtrOutput)
}

// Verbose error message about the provisioning failure
func (o ProvisioningErrorResponseOutput) Message() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProvisioningErrorResponse) *string { return v.Message }).(pulumi.StringPtrOutput)
}

// Error code of the provisioning failure
func (o ProvisioningErrorResponseOutput) ProvisioningErrorCode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProvisioningErrorResponse) *string { return v.ProvisioningErrorCode }).(pulumi.StringPtrOutput)
}

type ProvisioningErrorResponsePtrOutput struct{ *pulumi.OutputState }

func (ProvisioningErrorResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ProvisioningErrorResponse)(nil)).Elem()
}

func (o ProvisioningErrorResponsePtrOutput) ToProvisioningErrorResponsePtrOutput() ProvisioningErrorResponsePtrOutput {
	return o
}

func (o ProvisioningErrorResponsePtrOutput) ToProvisioningErrorResponsePtrOutputWithContext(ctx context.Context) ProvisioningErrorResponsePtrOutput {
	return o
}

func (o ProvisioningErrorResponsePtrOutput) Elem() ProvisioningErrorResponseOutput {
	return o.ApplyT(func(v *ProvisioningErrorResponse) ProvisioningErrorResponse { return *v }).(ProvisioningErrorResponseOutput)
}

// Verbose error message about the provisioning failure
func (o ProvisioningErrorResponsePtrOutput) Message() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProvisioningErrorResponse) *string {
		if v == nil {
			return nil
		}
		return v.Message
	}).(pulumi.StringPtrOutput)
}

// Error code of the provisioning failure
func (o ProvisioningErrorResponsePtrOutput) ProvisioningErrorCode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProvisioningErrorResponse) *string {
		if v == nil {
			return nil
		}
		return v.ProvisioningErrorCode
	}).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(ImageTemplateIsoSourceOutput{})
	pulumi.RegisterOutputType(ImageTemplateIsoSourceResponseOutput{})
	pulumi.RegisterOutputType(ImageTemplateLastRunStatusResponseOutput{})
	pulumi.RegisterOutputType(ImageTemplateLastRunStatusResponsePtrOutput{})
	pulumi.RegisterOutputType(ImageTemplateManagedImageDistributorOutput{})
	pulumi.RegisterOutputType(ImageTemplateManagedImageDistributorResponseOutput{})
	pulumi.RegisterOutputType(ImageTemplatePlatformImageSourceOutput{})
	pulumi.RegisterOutputType(ImageTemplatePlatformImageSourceResponseOutput{})
	pulumi.RegisterOutputType(ImageTemplateSharedImageDistributorOutput{})
	pulumi.RegisterOutputType(ImageTemplateSharedImageDistributorResponseOutput{})
	pulumi.RegisterOutputType(ImageTemplateShellCustomizerOutput{})
	pulumi.RegisterOutputType(ImageTemplateShellCustomizerArrayOutput{})
	pulumi.RegisterOutputType(ImageTemplateShellCustomizerResponseOutput{})
	pulumi.RegisterOutputType(ImageTemplateShellCustomizerResponseArrayOutput{})
	pulumi.RegisterOutputType(ProvisioningErrorResponseOutput{})
	pulumi.RegisterOutputType(ProvisioningErrorResponsePtrOutput{})
}
