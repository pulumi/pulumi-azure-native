// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v20180201preview

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Describes an image source that is an installation ISO. Currently only supports Red Hat Enterprise Linux 7.2-7.5 ISO's.
type ImageTemplateIsoSource struct {
	// SHA256 Checksum of the ISO image.
	Sha256Checksum string `pulumi:"sha256Checksum"`
	// URL to get the ISO image. This URL has to be accessible to the resource provider at the time of the imageTemplate creation.
	SourceURI string `pulumi:"sourceURI"`
	// Specifies the type of source image you want to start with.
	// Expected value is 'ISO'.
	Type string `pulumi:"type"`
}

// Describes an image source that is an installation ISO. Currently only supports Red Hat Enterprise Linux 7.2-7.5 ISO's.
type ImageTemplateIsoSourceResponse struct {
	// SHA256 Checksum of the ISO image.
	Sha256Checksum string `pulumi:"sha256Checksum"`
	// URL to get the ISO image. This URL has to be accessible to the resource provider at the time of the imageTemplate creation.
	SourceURI string `pulumi:"sourceURI"`
	// Specifies the type of source image you want to start with.
	// Expected value is 'ISO'.
	Type string `pulumi:"type"`
}

type ImageTemplateLastRunStatusResponse struct {
	// End time of the last run (UTC)
	EndTime *string `pulumi:"endTime"`
	// Verbose information about the last run state
	Message *string `pulumi:"message"`
	// State of the last run
	RunState *string `pulumi:"runState"`
	// Sub state of the last run
	RunSubState *string `pulumi:"runSubState"`
	// Start time of the last run (UTC)
	StartTime *string `pulumi:"startTime"`
}

type ImageTemplateLastRunStatusResponseOutput struct{ *pulumi.OutputState }

func (ImageTemplateLastRunStatusResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ImageTemplateLastRunStatusResponse)(nil)).Elem()
}

func (o ImageTemplateLastRunStatusResponseOutput) ToImageTemplateLastRunStatusResponseOutput() ImageTemplateLastRunStatusResponseOutput {
	return o
}

func (o ImageTemplateLastRunStatusResponseOutput) ToImageTemplateLastRunStatusResponseOutputWithContext(ctx context.Context) ImageTemplateLastRunStatusResponseOutput {
	return o
}

// End time of the last run (UTC)
func (o ImageTemplateLastRunStatusResponseOutput) EndTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageTemplateLastRunStatusResponse) *string { return v.EndTime }).(pulumi.StringPtrOutput)
}

// Verbose information about the last run state
func (o ImageTemplateLastRunStatusResponseOutput) Message() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageTemplateLastRunStatusResponse) *string { return v.Message }).(pulumi.StringPtrOutput)
}

// State of the last run
func (o ImageTemplateLastRunStatusResponseOutput) RunState() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageTemplateLastRunStatusResponse) *string { return v.RunState }).(pulumi.StringPtrOutput)
}

// Sub state of the last run
func (o ImageTemplateLastRunStatusResponseOutput) RunSubState() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageTemplateLastRunStatusResponse) *string { return v.RunSubState }).(pulumi.StringPtrOutput)
}

// Start time of the last run (UTC)
func (o ImageTemplateLastRunStatusResponseOutput) StartTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageTemplateLastRunStatusResponse) *string { return v.StartTime }).(pulumi.StringPtrOutput)
}

// Distribute as a Managed Disk Image.
type ImageTemplateManagedImageDistributor struct {
	// Tags that will be applied to the artifact once it has been created/updated by the distributor.
	ArtifactTags map[string]string `pulumi:"artifactTags"`
	// Resource Id of the Managed Disk Image
	ImageId string `pulumi:"imageId"`
	// Azure location for the image, should match if image already exists
	Location string `pulumi:"location"`
	// The name to be used for the associated RunOutput.
	RunOutputName string `pulumi:"runOutputName"`
	// Type of distribution.
	// Expected value is 'managedImage'.
	Type string `pulumi:"type"`
}

// Distribute as a Managed Disk Image.
type ImageTemplateManagedImageDistributorResponse struct {
	// Tags that will be applied to the artifact once it has been created/updated by the distributor.
	ArtifactTags map[string]string `pulumi:"artifactTags"`
	// Resource Id of the Managed Disk Image
	ImageId string `pulumi:"imageId"`
	// Azure location for the image, should match if image already exists
	Location string `pulumi:"location"`
	// The name to be used for the associated RunOutput.
	RunOutputName string `pulumi:"runOutputName"`
	// Type of distribution.
	// Expected value is 'managedImage'.
	Type string `pulumi:"type"`
}

// Describes an image source from [Azure Gallery Images](https://docs.microsoft.com/en-us/rest/api/compute/virtualmachineimages).
type ImageTemplatePlatformImageSource struct {
	// Image offer from the [Azure Gallery Images](https://docs.microsoft.com/en-us/rest/api/compute/virtualmachineimages).
	Offer *string `pulumi:"offer"`
	// Image Publisher in [Azure Gallery Images](https://docs.microsoft.com/en-us/rest/api/compute/virtualmachineimages).
	Publisher *string `pulumi:"publisher"`
	// Image sku from the [Azure Gallery Images](https://docs.microsoft.com/en-us/rest/api/compute/virtualmachineimages).
	Sku *string `pulumi:"sku"`
	// Specifies the type of source image you want to start with.
	// Expected value is 'PlatformImage'.
	Type string `pulumi:"type"`
	// Image version from the [Azure Gallery Images](https://docs.microsoft.com/en-us/rest/api/compute/virtualmachineimages).
	Version *string `pulumi:"version"`
}

// Describes an image source from [Azure Gallery Images](https://docs.microsoft.com/en-us/rest/api/compute/virtualmachineimages).
type ImageTemplatePlatformImageSourceResponse struct {
	// Image offer from the [Azure Gallery Images](https://docs.microsoft.com/en-us/rest/api/compute/virtualmachineimages).
	Offer *string `pulumi:"offer"`
	// Image Publisher in [Azure Gallery Images](https://docs.microsoft.com/en-us/rest/api/compute/virtualmachineimages).
	Publisher *string `pulumi:"publisher"`
	// Image sku from the [Azure Gallery Images](https://docs.microsoft.com/en-us/rest/api/compute/virtualmachineimages).
	Sku *string `pulumi:"sku"`
	// Specifies the type of source image you want to start with.
	// Expected value is 'PlatformImage'.
	Type string `pulumi:"type"`
	// Image version from the [Azure Gallery Images](https://docs.microsoft.com/en-us/rest/api/compute/virtualmachineimages).
	Version *string `pulumi:"version"`
}

// Distribute via Shared Image Gallery.
type ImageTemplateSharedImageDistributor struct {
	// Tags that will be applied to the artifact once it has been created/updated by the distributor.
	ArtifactTags map[string]string `pulumi:"artifactTags"`
	// Resource Id of the Shared Image Gallery image
	GalleryImageId     string   `pulumi:"galleryImageId"`
	ReplicationRegions []string `pulumi:"replicationRegions"`
	// The name to be used for the associated RunOutput.
	RunOutputName string `pulumi:"runOutputName"`
	// Type of distribution.
	// Expected value is 'sharedImage'.
	Type string `pulumi:"type"`
}

// Distribute via Shared Image Gallery.
type ImageTemplateSharedImageDistributorResponse struct {
	// Tags that will be applied to the artifact once it has been created/updated by the distributor.
	ArtifactTags map[string]string `pulumi:"artifactTags"`
	// Resource Id of the Shared Image Gallery image
	GalleryImageId     string   `pulumi:"galleryImageId"`
	ReplicationRegions []string `pulumi:"replicationRegions"`
	// The name to be used for the associated RunOutput.
	RunOutputName string `pulumi:"runOutputName"`
	// Type of distribution.
	// Expected value is 'sharedImage'.
	Type string `pulumi:"type"`
}

// Runs a shell script during the customization phase
type ImageTemplateShellCustomizer struct {
	// Friendly Name to provide context on what this customization step does
	Name *string `pulumi:"name"`
	// The shell script to be run for customizing. It can be a github link, SAS URI for Azure Storage, etc
	Script *string `pulumi:"script"`
	// The type of customization tool you want to use on the Image. For example, "shell" can be shellCustomizer
	// Expected value is 'shell'.
	Type string `pulumi:"type"`
}

// ImageTemplateShellCustomizerInput is an input type that accepts ImageTemplateShellCustomizerArgs and ImageTemplateShellCustomizerOutput values.
// You can construct a concrete instance of `ImageTemplateShellCustomizerInput` via:
//
//	ImageTemplateShellCustomizerArgs{...}
type ImageTemplateShellCustomizerInput interface {
	pulumi.Input

	ToImageTemplateShellCustomizerOutput() ImageTemplateShellCustomizerOutput
	ToImageTemplateShellCustomizerOutputWithContext(context.Context) ImageTemplateShellCustomizerOutput
}

// Runs a shell script during the customization phase
type ImageTemplateShellCustomizerArgs struct {
	// Friendly Name to provide context on what this customization step does
	Name pulumi.StringPtrInput `pulumi:"name"`
	// The shell script to be run for customizing. It can be a github link, SAS URI for Azure Storage, etc
	Script pulumi.StringPtrInput `pulumi:"script"`
	// The type of customization tool you want to use on the Image. For example, "shell" can be shellCustomizer
	// Expected value is 'shell'.
	Type pulumi.StringInput `pulumi:"type"`
}

func (ImageTemplateShellCustomizerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ImageTemplateShellCustomizer)(nil)).Elem()
}

func (i ImageTemplateShellCustomizerArgs) ToImageTemplateShellCustomizerOutput() ImageTemplateShellCustomizerOutput {
	return i.ToImageTemplateShellCustomizerOutputWithContext(context.Background())
}

func (i ImageTemplateShellCustomizerArgs) ToImageTemplateShellCustomizerOutputWithContext(ctx context.Context) ImageTemplateShellCustomizerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageTemplateShellCustomizerOutput)
}

// ImageTemplateShellCustomizerArrayInput is an input type that accepts ImageTemplateShellCustomizerArray and ImageTemplateShellCustomizerArrayOutput values.
// You can construct a concrete instance of `ImageTemplateShellCustomizerArrayInput` via:
//
//	ImageTemplateShellCustomizerArray{ ImageTemplateShellCustomizerArgs{...} }
type ImageTemplateShellCustomizerArrayInput interface {
	pulumi.Input

	ToImageTemplateShellCustomizerArrayOutput() ImageTemplateShellCustomizerArrayOutput
	ToImageTemplateShellCustomizerArrayOutputWithContext(context.Context) ImageTemplateShellCustomizerArrayOutput
}

type ImageTemplateShellCustomizerArray []ImageTemplateShellCustomizerInput

func (ImageTemplateShellCustomizerArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ImageTemplateShellCustomizer)(nil)).Elem()
}

func (i ImageTemplateShellCustomizerArray) ToImageTemplateShellCustomizerArrayOutput() ImageTemplateShellCustomizerArrayOutput {
	return i.ToImageTemplateShellCustomizerArrayOutputWithContext(context.Background())
}

func (i ImageTemplateShellCustomizerArray) ToImageTemplateShellCustomizerArrayOutputWithContext(ctx context.Context) ImageTemplateShellCustomizerArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageTemplateShellCustomizerArrayOutput)
}

// Runs a shell script during the customization phase
type ImageTemplateShellCustomizerOutput struct{ *pulumi.OutputState }

func (ImageTemplateShellCustomizerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ImageTemplateShellCustomizer)(nil)).Elem()
}

func (o ImageTemplateShellCustomizerOutput) ToImageTemplateShellCustomizerOutput() ImageTemplateShellCustomizerOutput {
	return o
}

func (o ImageTemplateShellCustomizerOutput) ToImageTemplateShellCustomizerOutputWithContext(ctx context.Context) ImageTemplateShellCustomizerOutput {
	return o
}

// Friendly Name to provide context on what this customization step does
func (o ImageTemplateShellCustomizerOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageTemplateShellCustomizer) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The shell script to be run for customizing. It can be a github link, SAS URI for Azure Storage, etc
func (o ImageTemplateShellCustomizerOutput) Script() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageTemplateShellCustomizer) *string { return v.Script }).(pulumi.StringPtrOutput)
}

// The type of customization tool you want to use on the Image. For example, "shell" can be shellCustomizer
// Expected value is 'shell'.
func (o ImageTemplateShellCustomizerOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ImageTemplateShellCustomizer) string { return v.Type }).(pulumi.StringOutput)
}

type ImageTemplateShellCustomizerArrayOutput struct{ *pulumi.OutputState }

func (ImageTemplateShellCustomizerArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ImageTemplateShellCustomizer)(nil)).Elem()
}

func (o ImageTemplateShellCustomizerArrayOutput) ToImageTemplateShellCustomizerArrayOutput() ImageTemplateShellCustomizerArrayOutput {
	return o
}

func (o ImageTemplateShellCustomizerArrayOutput) ToImageTemplateShellCustomizerArrayOutputWithContext(ctx context.Context) ImageTemplateShellCustomizerArrayOutput {
	return o
}

func (o ImageTemplateShellCustomizerArrayOutput) Index(i pulumi.IntInput) ImageTemplateShellCustomizerOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ImageTemplateShellCustomizer {
		return vs[0].([]ImageTemplateShellCustomizer)[vs[1].(int)]
	}).(ImageTemplateShellCustomizerOutput)
}

// Runs a shell script during the customization phase
type ImageTemplateShellCustomizerResponse struct {
	// Friendly Name to provide context on what this customization step does
	Name *string `pulumi:"name"`
	// The shell script to be run for customizing. It can be a github link, SAS URI for Azure Storage, etc
	Script *string `pulumi:"script"`
	// The type of customization tool you want to use on the Image. For example, "shell" can be shellCustomizer
	// Expected value is 'shell'.
	Type string `pulumi:"type"`
}

// Runs a shell script during the customization phase
type ImageTemplateShellCustomizerResponseOutput struct{ *pulumi.OutputState }

func (ImageTemplateShellCustomizerResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ImageTemplateShellCustomizerResponse)(nil)).Elem()
}

func (o ImageTemplateShellCustomizerResponseOutput) ToImageTemplateShellCustomizerResponseOutput() ImageTemplateShellCustomizerResponseOutput {
	return o
}

func (o ImageTemplateShellCustomizerResponseOutput) ToImageTemplateShellCustomizerResponseOutputWithContext(ctx context.Context) ImageTemplateShellCustomizerResponseOutput {
	return o
}

// Friendly Name to provide context on what this customization step does
func (o ImageTemplateShellCustomizerResponseOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageTemplateShellCustomizerResponse) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The shell script to be run for customizing. It can be a github link, SAS URI for Azure Storage, etc
func (o ImageTemplateShellCustomizerResponseOutput) Script() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageTemplateShellCustomizerResponse) *string { return v.Script }).(pulumi.StringPtrOutput)
}

// The type of customization tool you want to use on the Image. For example, "shell" can be shellCustomizer
// Expected value is 'shell'.
func (o ImageTemplateShellCustomizerResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ImageTemplateShellCustomizerResponse) string { return v.Type }).(pulumi.StringOutput)
}

type ImageTemplateShellCustomizerResponseArrayOutput struct{ *pulumi.OutputState }

func (ImageTemplateShellCustomizerResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ImageTemplateShellCustomizerResponse)(nil)).Elem()
}

func (o ImageTemplateShellCustomizerResponseArrayOutput) ToImageTemplateShellCustomizerResponseArrayOutput() ImageTemplateShellCustomizerResponseArrayOutput {
	return o
}

func (o ImageTemplateShellCustomizerResponseArrayOutput) ToImageTemplateShellCustomizerResponseArrayOutputWithContext(ctx context.Context) ImageTemplateShellCustomizerResponseArrayOutput {
	return o
}

func (o ImageTemplateShellCustomizerResponseArrayOutput) Index(i pulumi.IntInput) ImageTemplateShellCustomizerResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ImageTemplateShellCustomizerResponse {
		return vs[0].([]ImageTemplateShellCustomizerResponse)[vs[1].(int)]
	}).(ImageTemplateShellCustomizerResponseOutput)
}

type ProvisioningErrorResponse struct {
	// Verbose error message about the provisioning failure
	Message *string `pulumi:"message"`
	// Error code of the provisioning failure
	ProvisioningErrorCode *string `pulumi:"provisioningErrorCode"`
}

type ProvisioningErrorResponseOutput struct{ *pulumi.OutputState }

func (ProvisioningErrorResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ProvisioningErrorResponse)(nil)).Elem()
}

func (o ProvisioningErrorResponseOutput) ToProvisioningErrorResponseOutput() ProvisioningErrorResponseOutput {
	return o
}

func (o ProvisioningErrorResponseOutput) ToProvisioningErrorResponseOutputWithContext(ctx context.Context) ProvisioningErrorResponseOutput {
	return o
}

// Verbose error message about the provisioning failure
func (o ProvisioningErrorResponseOutput) Message() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProvisioningErrorResponse) *string { return v.Message }).(pulumi.StringPtrOutput)
}

// Error code of the provisioning failure
func (o ProvisioningErrorResponseOutput) ProvisioningErrorCode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProvisioningErrorResponse) *string { return v.ProvisioningErrorCode }).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(ImageTemplateLastRunStatusResponseOutput{})
	pulumi.RegisterOutputType(ImageTemplateShellCustomizerOutput{})
	pulumi.RegisterOutputType(ImageTemplateShellCustomizerArrayOutput{})
	pulumi.RegisterOutputType(ImageTemplateShellCustomizerResponseOutput{})
	pulumi.RegisterOutputType(ImageTemplateShellCustomizerResponseArrayOutput{})
	pulumi.RegisterOutputType(ProvisioningErrorResponseOutput{})
}
