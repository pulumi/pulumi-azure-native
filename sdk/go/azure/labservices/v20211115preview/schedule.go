// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v20211115preview

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Schedule for automatically turning virtual machines in a lab on and off at specified times.
type Schedule struct {
	pulumi.CustomResourceState

	// The name of the resource
	Name pulumi.StringOutput `pulumi:"name"`
	// Notes for this schedule.
	Notes pulumi.StringPtrOutput `pulumi:"notes"`
	// Current provisioning state of the schedule.
	ProvisioningState pulumi.StringOutput `pulumi:"provisioningState"`
	// The recurrence pattern of the scheduled actions.
	RecurrencePattern RecurrencePatternResponsePtrOutput `pulumi:"recurrencePattern"`
	// When lab user virtual machines will be started. Timestamp offsets will be ignored and timeZoneId is used instead.
	StartAt pulumi.StringPtrOutput `pulumi:"startAt"`
	// When lab user virtual machines will be stopped. Timestamp offsets will be ignored and timeZoneId is used instead.
	StopAt pulumi.StringOutput `pulumi:"stopAt"`
	// Metadata pertaining to creation and last modification of the schedule.
	SystemData SystemDataResponseOutput `pulumi:"systemData"`
	// The IANA timezone id for the schedule.
	TimeZoneId pulumi.StringOutput `pulumi:"timeZoneId"`
	// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
	Type pulumi.StringOutput `pulumi:"type"`
}

// NewSchedule registers a new resource with the given unique name, arguments, and options.
func NewSchedule(ctx *pulumi.Context,
	name string, args *ScheduleArgs, opts ...pulumi.ResourceOption) (*Schedule, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.LabName == nil {
		return nil, errors.New("invalid value for required argument 'LabName'")
	}
	if args.ResourceGroupName == nil {
		return nil, errors.New("invalid value for required argument 'ResourceGroupName'")
	}
	if args.StopAt == nil {
		return nil, errors.New("invalid value for required argument 'StopAt'")
	}
	if args.TimeZoneId == nil {
		return nil, errors.New("invalid value for required argument 'TimeZoneId'")
	}
	aliases := pulumi.Aliases([]pulumi.Alias{
		{
			Type: pulumi.String("azure-native:labservices:Schedule"),
		},
		{
			Type: pulumi.String("azure-native:labservices/v20211001preview:Schedule"),
		},
		{
			Type: pulumi.String("azure-native:labservices/v20220801:Schedule"),
		},
	})
	opts = append(opts, aliases)
	var resource Schedule
	err := ctx.RegisterResource("azure-native:labservices/v20211115preview:Schedule", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSchedule gets an existing Schedule resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSchedule(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ScheduleState, opts ...pulumi.ResourceOption) (*Schedule, error) {
	var resource Schedule
	err := ctx.ReadResource("azure-native:labservices/v20211115preview:Schedule", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Schedule resources.
type scheduleState struct {
}

type ScheduleState struct {
}

func (ScheduleState) ElementType() reflect.Type {
	return reflect.TypeOf((*scheduleState)(nil)).Elem()
}

type scheduleArgs struct {
	// The name of the lab that uniquely identifies it within containing lab account. Used in resource URIs.
	LabName string `pulumi:"labName"`
	// Notes for this schedule.
	Notes *string `pulumi:"notes"`
	// The recurrence pattern of the scheduled actions.
	RecurrencePattern *RecurrencePattern `pulumi:"recurrencePattern"`
	// The name of the resource group. The name is case insensitive.
	ResourceGroupName string `pulumi:"resourceGroupName"`
	// The name of the schedule that uniquely identifies it within containing lab. Used in resource URIs.
	ScheduleName *string `pulumi:"scheduleName"`
	// When lab user virtual machines will be started. Timestamp offsets will be ignored and timeZoneId is used instead.
	StartAt *string `pulumi:"startAt"`
	// When lab user virtual machines will be stopped. Timestamp offsets will be ignored and timeZoneId is used instead.
	StopAt string `pulumi:"stopAt"`
	// The IANA timezone id for the schedule.
	TimeZoneId string `pulumi:"timeZoneId"`
}

// The set of arguments for constructing a Schedule resource.
type ScheduleArgs struct {
	// The name of the lab that uniquely identifies it within containing lab account. Used in resource URIs.
	LabName pulumi.StringInput
	// Notes for this schedule.
	Notes pulumi.StringPtrInput
	// The recurrence pattern of the scheduled actions.
	RecurrencePattern RecurrencePatternPtrInput
	// The name of the resource group. The name is case insensitive.
	ResourceGroupName pulumi.StringInput
	// The name of the schedule that uniquely identifies it within containing lab. Used in resource URIs.
	ScheduleName pulumi.StringPtrInput
	// When lab user virtual machines will be started. Timestamp offsets will be ignored and timeZoneId is used instead.
	StartAt pulumi.StringPtrInput
	// When lab user virtual machines will be stopped. Timestamp offsets will be ignored and timeZoneId is used instead.
	StopAt pulumi.StringInput
	// The IANA timezone id for the schedule.
	TimeZoneId pulumi.StringInput
}

func (ScheduleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*scheduleArgs)(nil)).Elem()
}

type ScheduleInput interface {
	pulumi.Input

	ToScheduleOutput() ScheduleOutput
	ToScheduleOutputWithContext(ctx context.Context) ScheduleOutput
}

func (*Schedule) ElementType() reflect.Type {
	return reflect.TypeOf((**Schedule)(nil)).Elem()
}

func (i *Schedule) ToScheduleOutput() ScheduleOutput {
	return i.ToScheduleOutputWithContext(context.Background())
}

func (i *Schedule) ToScheduleOutputWithContext(ctx context.Context) ScheduleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScheduleOutput)
}

type ScheduleOutput struct{ *pulumi.OutputState }

func (ScheduleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Schedule)(nil)).Elem()
}

func (o ScheduleOutput) ToScheduleOutput() ScheduleOutput {
	return o
}

func (o ScheduleOutput) ToScheduleOutputWithContext(ctx context.Context) ScheduleOutput {
	return o
}

// The name of the resource
func (o ScheduleOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Schedule) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Notes for this schedule.
func (o ScheduleOutput) Notes() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Schedule) pulumi.StringPtrOutput { return v.Notes }).(pulumi.StringPtrOutput)
}

// Current provisioning state of the schedule.
func (o ScheduleOutput) ProvisioningState() pulumi.StringOutput {
	return o.ApplyT(func(v *Schedule) pulumi.StringOutput { return v.ProvisioningState }).(pulumi.StringOutput)
}

// The recurrence pattern of the scheduled actions.
func (o ScheduleOutput) RecurrencePattern() RecurrencePatternResponsePtrOutput {
	return o.ApplyT(func(v *Schedule) RecurrencePatternResponsePtrOutput { return v.RecurrencePattern }).(RecurrencePatternResponsePtrOutput)
}

// When lab user virtual machines will be started. Timestamp offsets will be ignored and timeZoneId is used instead.
func (o ScheduleOutput) StartAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Schedule) pulumi.StringPtrOutput { return v.StartAt }).(pulumi.StringPtrOutput)
}

// When lab user virtual machines will be stopped. Timestamp offsets will be ignored and timeZoneId is used instead.
func (o ScheduleOutput) StopAt() pulumi.StringOutput {
	return o.ApplyT(func(v *Schedule) pulumi.StringOutput { return v.StopAt }).(pulumi.StringOutput)
}

// Metadata pertaining to creation and last modification of the schedule.
func (o ScheduleOutput) SystemData() SystemDataResponseOutput {
	return o.ApplyT(func(v *Schedule) SystemDataResponseOutput { return v.SystemData }).(SystemDataResponseOutput)
}

// The IANA timezone id for the schedule.
func (o ScheduleOutput) TimeZoneId() pulumi.StringOutput {
	return o.ApplyT(func(v *Schedule) pulumi.StringOutput { return v.TimeZoneId }).(pulumi.StringOutput)
}

// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
func (o ScheduleOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *Schedule) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(ScheduleOutput{})
}
