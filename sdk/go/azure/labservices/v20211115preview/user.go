// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v20211115preview

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// User of a lab that can register for and use virtual machines within the lab.
type User struct {
	pulumi.CustomResourceState

	// The amount of usage quota time the user gets in addition to the lab usage quota.
	AdditionalUsageQuota pulumi.StringPtrOutput `pulumi:"additionalUsageQuota"`
	// Display name of the user, for example user's full name.
	DisplayName pulumi.StringOutput `pulumi:"displayName"`
	// Email address of the user.
	Email pulumi.StringOutput `pulumi:"email"`
	// Date and time when the invitation message was sent to the user.
	InvitationSent pulumi.StringOutput `pulumi:"invitationSent"`
	// State of the invitation message for the user.
	InvitationState pulumi.StringOutput `pulumi:"invitationState"`
	// The name of the resource
	Name pulumi.StringOutput `pulumi:"name"`
	// Current provisioning state of the user resource.
	ProvisioningState pulumi.StringOutput `pulumi:"provisioningState"`
	// State of the user's registration within the lab.
	RegistrationState pulumi.StringOutput `pulumi:"registrationState"`
	// Metadata pertaining to creation and last modification of the user resource.
	SystemData SystemDataResponseOutput `pulumi:"systemData"`
	// How long the user has used their virtual machines in this lab.
	TotalUsage pulumi.StringOutput `pulumi:"totalUsage"`
	// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
	Type pulumi.StringOutput `pulumi:"type"`
}

// NewUser registers a new resource with the given unique name, arguments, and options.
func NewUser(ctx *pulumi.Context,
	name string, args *UserArgs, opts ...pulumi.ResourceOption) (*User, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Email == nil {
		return nil, errors.New("invalid value for required argument 'Email'")
	}
	if args.LabName == nil {
		return nil, errors.New("invalid value for required argument 'LabName'")
	}
	if args.ResourceGroupName == nil {
		return nil, errors.New("invalid value for required argument 'ResourceGroupName'")
	}
	aliases := pulumi.Aliases([]pulumi.Alias{
		{
			Type: pulumi.String("azure-native:labservices/v20211001preview:User"),
		},
		{
			Type: pulumi.String("azure-native:labservices/v20220801:User"),
		},
	})
	opts = append(opts, aliases)
	var resource User
	err := ctx.RegisterResource("azure-native:labservices/v20211115preview:User", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetUser gets an existing User resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetUser(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *UserState, opts ...pulumi.ResourceOption) (*User, error) {
	var resource User
	err := ctx.ReadResource("azure-native:labservices/v20211115preview:User", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering User resources.
type userState struct {
}

type UserState struct {
}

func (UserState) ElementType() reflect.Type {
	return reflect.TypeOf((*userState)(nil)).Elem()
}

type userArgs struct {
	// The amount of usage quota time the user gets in addition to the lab usage quota.
	AdditionalUsageQuota *string `pulumi:"additionalUsageQuota"`
	// Email address of the user.
	Email string `pulumi:"email"`
	// The name of the lab that uniquely identifies it within containing lab account. Used in resource URIs.
	LabName string `pulumi:"labName"`
	// The name of the resource group. The name is case insensitive.
	ResourceGroupName string `pulumi:"resourceGroupName"`
	// The name of the user that uniquely identifies it within containing lab. Used in resource URIs.
	UserName *string `pulumi:"userName"`
}

// The set of arguments for constructing a User resource.
type UserArgs struct {
	// The amount of usage quota time the user gets in addition to the lab usage quota.
	AdditionalUsageQuota pulumi.StringPtrInput
	// Email address of the user.
	Email pulumi.StringInput
	// The name of the lab that uniquely identifies it within containing lab account. Used in resource URIs.
	LabName pulumi.StringInput
	// The name of the resource group. The name is case insensitive.
	ResourceGroupName pulumi.StringInput
	// The name of the user that uniquely identifies it within containing lab. Used in resource URIs.
	UserName pulumi.StringPtrInput
}

func (UserArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*userArgs)(nil)).Elem()
}

type UserInput interface {
	pulumi.Input

	ToUserOutput() UserOutput
	ToUserOutputWithContext(ctx context.Context) UserOutput
}

func (*User) ElementType() reflect.Type {
	return reflect.TypeOf((**User)(nil)).Elem()
}

func (i *User) ToUserOutput() UserOutput {
	return i.ToUserOutputWithContext(context.Background())
}

func (i *User) ToUserOutputWithContext(ctx context.Context) UserOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserOutput)
}

type UserOutput struct{ *pulumi.OutputState }

func (UserOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**User)(nil)).Elem()
}

func (o UserOutput) ToUserOutput() UserOutput {
	return o
}

func (o UserOutput) ToUserOutputWithContext(ctx context.Context) UserOutput {
	return o
}

// The amount of usage quota time the user gets in addition to the lab usage quota.
func (o UserOutput) AdditionalUsageQuota() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *User) pulumi.StringPtrOutput { return v.AdditionalUsageQuota }).(pulumi.StringPtrOutput)
}

// Display name of the user, for example user's full name.
func (o UserOutput) DisplayName() pulumi.StringOutput {
	return o.ApplyT(func(v *User) pulumi.StringOutput { return v.DisplayName }).(pulumi.StringOutput)
}

// Email address of the user.
func (o UserOutput) Email() pulumi.StringOutput {
	return o.ApplyT(func(v *User) pulumi.StringOutput { return v.Email }).(pulumi.StringOutput)
}

// Date and time when the invitation message was sent to the user.
func (o UserOutput) InvitationSent() pulumi.StringOutput {
	return o.ApplyT(func(v *User) pulumi.StringOutput { return v.InvitationSent }).(pulumi.StringOutput)
}

// State of the invitation message for the user.
func (o UserOutput) InvitationState() pulumi.StringOutput {
	return o.ApplyT(func(v *User) pulumi.StringOutput { return v.InvitationState }).(pulumi.StringOutput)
}

// The name of the resource
func (o UserOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *User) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Current provisioning state of the user resource.
func (o UserOutput) ProvisioningState() pulumi.StringOutput {
	return o.ApplyT(func(v *User) pulumi.StringOutput { return v.ProvisioningState }).(pulumi.StringOutput)
}

// State of the user's registration within the lab.
func (o UserOutput) RegistrationState() pulumi.StringOutput {
	return o.ApplyT(func(v *User) pulumi.StringOutput { return v.RegistrationState }).(pulumi.StringOutput)
}

// Metadata pertaining to creation and last modification of the user resource.
func (o UserOutput) SystemData() SystemDataResponseOutput {
	return o.ApplyT(func(v *User) SystemDataResponseOutput { return v.SystemData }).(SystemDataResponseOutput)
}

// How long the user has used their virtual machines in this lab.
func (o UserOutput) TotalUsage() pulumi.StringOutput {
	return o.ApplyT(func(v *User) pulumi.StringOutput { return v.TotalUsage }).(pulumi.StringOutput)
}

// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
func (o UserOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *User) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(UserOutput{})
}
