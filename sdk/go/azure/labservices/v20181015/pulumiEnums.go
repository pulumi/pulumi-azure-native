// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v20181015

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Enum indicating if user is adding or removing a favorite lab
type AddRemove string

const (
	// Indicates that a user is adding a favorite lab
	AddRemoveAdd = AddRemove("Add")
	// Indicates that a user is removing a favorite lab
	AddRemoveRemove = AddRemove("Remove")
)

func (AddRemove) ElementType() reflect.Type {
	return reflect.TypeOf((*AddRemove)(nil)).Elem()
}

func (e AddRemove) ToAddRemoveOutput() AddRemoveOutput {
	return pulumi.ToOutput(e).(AddRemoveOutput)
}

func (e AddRemove) ToAddRemoveOutputWithContext(ctx context.Context) AddRemoveOutput {
	return pulumi.ToOutputWithContext(ctx, e).(AddRemoveOutput)
}

func (e AddRemove) ToAddRemovePtrOutput() AddRemovePtrOutput {
	return e.ToAddRemovePtrOutputWithContext(context.Background())
}

func (e AddRemove) ToAddRemovePtrOutputWithContext(ctx context.Context) AddRemovePtrOutput {
	return AddRemove(e).ToAddRemoveOutputWithContext(ctx).ToAddRemovePtrOutputWithContext(ctx)
}

func (e AddRemove) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e AddRemove) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e AddRemove) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e AddRemove) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type AddRemoveOutput struct{ *pulumi.OutputState }

func (AddRemoveOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AddRemove)(nil)).Elem()
}

func (o AddRemoveOutput) ToAddRemoveOutput() AddRemoveOutput {
	return o
}

func (o AddRemoveOutput) ToAddRemoveOutputWithContext(ctx context.Context) AddRemoveOutput {
	return o
}

func (o AddRemoveOutput) ToAddRemovePtrOutput() AddRemovePtrOutput {
	return o.ToAddRemovePtrOutputWithContext(context.Background())
}

func (o AddRemoveOutput) ToAddRemovePtrOutputWithContext(ctx context.Context) AddRemovePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v AddRemove) *AddRemove {
		return &v
	}).(AddRemovePtrOutput)
}

func (o AddRemoveOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o AddRemoveOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e AddRemove) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o AddRemoveOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o AddRemoveOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e AddRemove) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type AddRemovePtrOutput struct{ *pulumi.OutputState }

func (AddRemovePtrOutput) ElementType() reflect.Type {
	return addRemovePtrType
}

func (o AddRemovePtrOutput) ToAddRemovePtrOutput() AddRemovePtrOutput {
	return o
}

func (o AddRemovePtrOutput) ToAddRemovePtrOutputWithContext(ctx context.Context) AddRemovePtrOutput {
	return o
}

func (o AddRemovePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o AddRemovePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *AddRemove) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

func (o AddRemovePtrOutput) Elem() AddRemoveOutput {
	return o.ApplyT(func(v *AddRemove) AddRemove {
		var ret AddRemove
		if v != nil {
			ret = *v
		}
		return ret
	}).(AddRemoveOutput)
}

// AddRemoveInput is an input type that accepts AddRemoveArgs and AddRemoveOutput values.
// You can construct a concrete instance of `AddRemoveInput` via:
//
//          AddRemoveArgs{...}
type AddRemoveInput interface {
	pulumi.Input

	ToAddRemoveOutput() AddRemoveOutput
	ToAddRemoveOutputWithContext(context.Context) AddRemoveOutput
}

var addRemovePtrType = reflect.TypeOf((**AddRemove)(nil)).Elem()

type AddRemovePtrInput interface {
	pulumi.Input

	ToAddRemovePtrOutput() AddRemovePtrOutput
	ToAddRemovePtrOutputWithContext(context.Context) AddRemovePtrOutput
}

type addRemovePtr string

func AddRemovePtr(v string) AddRemovePtrInput {
	return (*addRemovePtr)(&v)
}

func (*addRemovePtr) ElementType() reflect.Type {
	return addRemovePtrType
}

func (in *addRemovePtr) ToAddRemovePtrOutput() AddRemovePtrOutput {
	return pulumi.ToOutput(in).(AddRemovePtrOutput)
}

func (in *addRemovePtr) ToAddRemovePtrOutputWithContext(ctx context.Context) AddRemovePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(AddRemovePtrOutput)
}

// Describes the user's progress in configuring their environment setting
type ConfigurationState string

const (
	// User either hasn't started configuring their template
	// or they haven't started the configuration process.
	ConfigurationStateNotApplicable = ConfigurationState("NotApplicable")
	// User is finished modifying the template.
	ConfigurationStateCompleted = ConfigurationState("Completed")
)

func (ConfigurationState) ElementType() reflect.Type {
	return reflect.TypeOf((*ConfigurationState)(nil)).Elem()
}

func (e ConfigurationState) ToConfigurationStateOutput() ConfigurationStateOutput {
	return pulumi.ToOutput(e).(ConfigurationStateOutput)
}

func (e ConfigurationState) ToConfigurationStateOutputWithContext(ctx context.Context) ConfigurationStateOutput {
	return pulumi.ToOutputWithContext(ctx, e).(ConfigurationStateOutput)
}

func (e ConfigurationState) ToConfigurationStatePtrOutput() ConfigurationStatePtrOutput {
	return e.ToConfigurationStatePtrOutputWithContext(context.Background())
}

func (e ConfigurationState) ToConfigurationStatePtrOutputWithContext(ctx context.Context) ConfigurationStatePtrOutput {
	return ConfigurationState(e).ToConfigurationStateOutputWithContext(ctx).ToConfigurationStatePtrOutputWithContext(ctx)
}

func (e ConfigurationState) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e ConfigurationState) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e ConfigurationState) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e ConfigurationState) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type ConfigurationStateOutput struct{ *pulumi.OutputState }

func (ConfigurationStateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConfigurationState)(nil)).Elem()
}

func (o ConfigurationStateOutput) ToConfigurationStateOutput() ConfigurationStateOutput {
	return o
}

func (o ConfigurationStateOutput) ToConfigurationStateOutputWithContext(ctx context.Context) ConfigurationStateOutput {
	return o
}

func (o ConfigurationStateOutput) ToConfigurationStatePtrOutput() ConfigurationStatePtrOutput {
	return o.ToConfigurationStatePtrOutputWithContext(context.Background())
}

func (o ConfigurationStateOutput) ToConfigurationStatePtrOutputWithContext(ctx context.Context) ConfigurationStatePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ConfigurationState) *ConfigurationState {
		return &v
	}).(ConfigurationStatePtrOutput)
}

func (o ConfigurationStateOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o ConfigurationStateOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e ConfigurationState) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o ConfigurationStateOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o ConfigurationStateOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e ConfigurationState) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type ConfigurationStatePtrOutput struct{ *pulumi.OutputState }

func (ConfigurationStatePtrOutput) ElementType() reflect.Type {
	return configurationStatePtrType
}

func (o ConfigurationStatePtrOutput) ToConfigurationStatePtrOutput() ConfigurationStatePtrOutput {
	return o
}

func (o ConfigurationStatePtrOutput) ToConfigurationStatePtrOutputWithContext(ctx context.Context) ConfigurationStatePtrOutput {
	return o
}

func (o ConfigurationStatePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o ConfigurationStatePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *ConfigurationState) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

func (o ConfigurationStatePtrOutput) Elem() ConfigurationStateOutput {
	return o.ApplyT(func(v *ConfigurationState) ConfigurationState {
		var ret ConfigurationState
		if v != nil {
			ret = *v
		}
		return ret
	}).(ConfigurationStateOutput)
}

// ConfigurationStateInput is an input type that accepts ConfigurationStateArgs and ConfigurationStateOutput values.
// You can construct a concrete instance of `ConfigurationStateInput` via:
//
//          ConfigurationStateArgs{...}
type ConfigurationStateInput interface {
	pulumi.Input

	ToConfigurationStateOutput() ConfigurationStateOutput
	ToConfigurationStateOutputWithContext(context.Context) ConfigurationStateOutput
}

var configurationStatePtrType = reflect.TypeOf((**ConfigurationState)(nil)).Elem()

type ConfigurationStatePtrInput interface {
	pulumi.Input

	ToConfigurationStatePtrOutput() ConfigurationStatePtrOutput
	ToConfigurationStatePtrOutputWithContext(context.Context) ConfigurationStatePtrOutput
}

type configurationStatePtr string

func ConfigurationStatePtr(v string) ConfigurationStatePtrInput {
	return (*configurationStatePtr)(&v)
}

func (*configurationStatePtr) ElementType() reflect.Type {
	return configurationStatePtrType
}

func (in *configurationStatePtr) ToConfigurationStatePtrOutput() ConfigurationStatePtrOutput {
	return pulumi.ToOutput(in).(ConfigurationStatePtrOutput)
}

func (in *configurationStatePtr) ToConfigurationStatePtrOutputWithContext(ctx context.Context) ConfigurationStatePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(ConfigurationStatePtrOutput)
}

// Lab user access mode (open to all vs. restricted to those listed on the lab).
type LabUserAccessMode string

const (
	// Only users registered with the lab can access VMs.
	LabUserAccessModeRestricted = LabUserAccessMode("Restricted")
	// Any user can register with the lab and access its VMs.
	LabUserAccessModeOpen = LabUserAccessMode("Open")
)

func (LabUserAccessMode) ElementType() reflect.Type {
	return reflect.TypeOf((*LabUserAccessMode)(nil)).Elem()
}

func (e LabUserAccessMode) ToLabUserAccessModeOutput() LabUserAccessModeOutput {
	return pulumi.ToOutput(e).(LabUserAccessModeOutput)
}

func (e LabUserAccessMode) ToLabUserAccessModeOutputWithContext(ctx context.Context) LabUserAccessModeOutput {
	return pulumi.ToOutputWithContext(ctx, e).(LabUserAccessModeOutput)
}

func (e LabUserAccessMode) ToLabUserAccessModePtrOutput() LabUserAccessModePtrOutput {
	return e.ToLabUserAccessModePtrOutputWithContext(context.Background())
}

func (e LabUserAccessMode) ToLabUserAccessModePtrOutputWithContext(ctx context.Context) LabUserAccessModePtrOutput {
	return LabUserAccessMode(e).ToLabUserAccessModeOutputWithContext(ctx).ToLabUserAccessModePtrOutputWithContext(ctx)
}

func (e LabUserAccessMode) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e LabUserAccessMode) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e LabUserAccessMode) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e LabUserAccessMode) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type LabUserAccessModeOutput struct{ *pulumi.OutputState }

func (LabUserAccessModeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LabUserAccessMode)(nil)).Elem()
}

func (o LabUserAccessModeOutput) ToLabUserAccessModeOutput() LabUserAccessModeOutput {
	return o
}

func (o LabUserAccessModeOutput) ToLabUserAccessModeOutputWithContext(ctx context.Context) LabUserAccessModeOutput {
	return o
}

func (o LabUserAccessModeOutput) ToLabUserAccessModePtrOutput() LabUserAccessModePtrOutput {
	return o.ToLabUserAccessModePtrOutputWithContext(context.Background())
}

func (o LabUserAccessModeOutput) ToLabUserAccessModePtrOutputWithContext(ctx context.Context) LabUserAccessModePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v LabUserAccessMode) *LabUserAccessMode {
		return &v
	}).(LabUserAccessModePtrOutput)
}

func (o LabUserAccessModeOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o LabUserAccessModeOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e LabUserAccessMode) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o LabUserAccessModeOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o LabUserAccessModeOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e LabUserAccessMode) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type LabUserAccessModePtrOutput struct{ *pulumi.OutputState }

func (LabUserAccessModePtrOutput) ElementType() reflect.Type {
	return labUserAccessModePtrType
}

func (o LabUserAccessModePtrOutput) ToLabUserAccessModePtrOutput() LabUserAccessModePtrOutput {
	return o
}

func (o LabUserAccessModePtrOutput) ToLabUserAccessModePtrOutputWithContext(ctx context.Context) LabUserAccessModePtrOutput {
	return o
}

func (o LabUserAccessModePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o LabUserAccessModePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *LabUserAccessMode) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

func (o LabUserAccessModePtrOutput) Elem() LabUserAccessModeOutput {
	return o.ApplyT(func(v *LabUserAccessMode) LabUserAccessMode {
		var ret LabUserAccessMode
		if v != nil {
			ret = *v
		}
		return ret
	}).(LabUserAccessModeOutput)
}

// LabUserAccessModeInput is an input type that accepts LabUserAccessModeArgs and LabUserAccessModeOutput values.
// You can construct a concrete instance of `LabUserAccessModeInput` via:
//
//          LabUserAccessModeArgs{...}
type LabUserAccessModeInput interface {
	pulumi.Input

	ToLabUserAccessModeOutput() LabUserAccessModeOutput
	ToLabUserAccessModeOutputWithContext(context.Context) LabUserAccessModeOutput
}

var labUserAccessModePtrType = reflect.TypeOf((**LabUserAccessMode)(nil)).Elem()

type LabUserAccessModePtrInput interface {
	pulumi.Input

	ToLabUserAccessModePtrOutput() LabUserAccessModePtrOutput
	ToLabUserAccessModePtrOutputWithContext(context.Context) LabUserAccessModePtrOutput
}

type labUserAccessModePtr string

func LabUserAccessModePtr(v string) LabUserAccessModePtrInput {
	return (*labUserAccessModePtr)(&v)
}

func (*labUserAccessModePtr) ElementType() reflect.Type {
	return labUserAccessModePtrType
}

func (in *labUserAccessModePtr) ToLabUserAccessModePtrOutput() LabUserAccessModePtrOutput {
	return pulumi.ToOutput(in).(LabUserAccessModePtrOutput)
}

func (in *labUserAccessModePtr) ToLabUserAccessModePtrOutputWithContext(ctx context.Context) LabUserAccessModePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(LabUserAccessModePtrOutput)
}

// The size of the virtual machine
type ManagedLabVmSize string

const (
	// The base VM size
	ManagedLabVmSizeBasic = ManagedLabVmSize("Basic")
	// The standard or default VM size
	ManagedLabVmSizeStandard = ManagedLabVmSize("Standard")
	// The most performant VM size
	ManagedLabVmSizePerformance = ManagedLabVmSize("Performance")
)

func (ManagedLabVmSize) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedLabVmSize)(nil)).Elem()
}

func (e ManagedLabVmSize) ToManagedLabVmSizeOutput() ManagedLabVmSizeOutput {
	return pulumi.ToOutput(e).(ManagedLabVmSizeOutput)
}

func (e ManagedLabVmSize) ToManagedLabVmSizeOutputWithContext(ctx context.Context) ManagedLabVmSizeOutput {
	return pulumi.ToOutputWithContext(ctx, e).(ManagedLabVmSizeOutput)
}

func (e ManagedLabVmSize) ToManagedLabVmSizePtrOutput() ManagedLabVmSizePtrOutput {
	return e.ToManagedLabVmSizePtrOutputWithContext(context.Background())
}

func (e ManagedLabVmSize) ToManagedLabVmSizePtrOutputWithContext(ctx context.Context) ManagedLabVmSizePtrOutput {
	return ManagedLabVmSize(e).ToManagedLabVmSizeOutputWithContext(ctx).ToManagedLabVmSizePtrOutputWithContext(ctx)
}

func (e ManagedLabVmSize) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e ManagedLabVmSize) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e ManagedLabVmSize) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e ManagedLabVmSize) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type ManagedLabVmSizeOutput struct{ *pulumi.OutputState }

func (ManagedLabVmSizeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedLabVmSize)(nil)).Elem()
}

func (o ManagedLabVmSizeOutput) ToManagedLabVmSizeOutput() ManagedLabVmSizeOutput {
	return o
}

func (o ManagedLabVmSizeOutput) ToManagedLabVmSizeOutputWithContext(ctx context.Context) ManagedLabVmSizeOutput {
	return o
}

func (o ManagedLabVmSizeOutput) ToManagedLabVmSizePtrOutput() ManagedLabVmSizePtrOutput {
	return o.ToManagedLabVmSizePtrOutputWithContext(context.Background())
}

func (o ManagedLabVmSizeOutput) ToManagedLabVmSizePtrOutputWithContext(ctx context.Context) ManagedLabVmSizePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ManagedLabVmSize) *ManagedLabVmSize {
		return &v
	}).(ManagedLabVmSizePtrOutput)
}

func (o ManagedLabVmSizeOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o ManagedLabVmSizeOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e ManagedLabVmSize) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o ManagedLabVmSizeOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o ManagedLabVmSizeOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e ManagedLabVmSize) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type ManagedLabVmSizePtrOutput struct{ *pulumi.OutputState }

func (ManagedLabVmSizePtrOutput) ElementType() reflect.Type {
	return managedLabVmSizePtrType
}

func (o ManagedLabVmSizePtrOutput) ToManagedLabVmSizePtrOutput() ManagedLabVmSizePtrOutput {
	return o
}

func (o ManagedLabVmSizePtrOutput) ToManagedLabVmSizePtrOutputWithContext(ctx context.Context) ManagedLabVmSizePtrOutput {
	return o
}

func (o ManagedLabVmSizePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o ManagedLabVmSizePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *ManagedLabVmSize) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

func (o ManagedLabVmSizePtrOutput) Elem() ManagedLabVmSizeOutput {
	return o.ApplyT(func(v *ManagedLabVmSize) ManagedLabVmSize {
		var ret ManagedLabVmSize
		if v != nil {
			ret = *v
		}
		return ret
	}).(ManagedLabVmSizeOutput)
}

// ManagedLabVmSizeInput is an input type that accepts ManagedLabVmSizeArgs and ManagedLabVmSizeOutput values.
// You can construct a concrete instance of `ManagedLabVmSizeInput` via:
//
//          ManagedLabVmSizeArgs{...}
type ManagedLabVmSizeInput interface {
	pulumi.Input

	ToManagedLabVmSizeOutput() ManagedLabVmSizeOutput
	ToManagedLabVmSizeOutputWithContext(context.Context) ManagedLabVmSizeOutput
}

var managedLabVmSizePtrType = reflect.TypeOf((**ManagedLabVmSize)(nil)).Elem()

type ManagedLabVmSizePtrInput interface {
	pulumi.Input

	ToManagedLabVmSizePtrOutput() ManagedLabVmSizePtrOutput
	ToManagedLabVmSizePtrOutputWithContext(context.Context) ManagedLabVmSizePtrOutput
}

type managedLabVmSizePtr string

func ManagedLabVmSizePtr(v string) ManagedLabVmSizePtrInput {
	return (*managedLabVmSizePtr)(&v)
}

func (*managedLabVmSizePtr) ElementType() reflect.Type {
	return managedLabVmSizePtrType
}

func (in *managedLabVmSizePtr) ToManagedLabVmSizePtrOutput() ManagedLabVmSizePtrOutput {
	return pulumi.ToOutput(in).(ManagedLabVmSizePtrOutput)
}

func (in *managedLabVmSizePtr) ToManagedLabVmSizePtrOutputWithContext(ctx context.Context) ManagedLabVmSizePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(ManagedLabVmSizePtrOutput)
}

func init() {
	pulumi.RegisterOutputType(AddRemoveOutput{})
	pulumi.RegisterOutputType(AddRemovePtrOutput{})
	pulumi.RegisterOutputType(ConfigurationStateOutput{})
	pulumi.RegisterOutputType(ConfigurationStatePtrOutput{})
	pulumi.RegisterOutputType(LabUserAccessModeOutput{})
	pulumi.RegisterOutputType(LabUserAccessModePtrOutput{})
	pulumi.RegisterOutputType(ManagedLabVmSizeOutput{})
	pulumi.RegisterOutputType(ManagedLabVmSizePtrOutput{})
}
