// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package labservices

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Enum indicating if user is adding or removing a favorite lab
type AddRemove string

const (
	// Indicates that a user is adding a favorite lab
	AddRemoveAdd = AddRemove("Add")
	// Indicates that a user is removing a favorite lab
	AddRemoveRemove = AddRemove("Remove")
)

// Describes the user's progress in configuring their environment setting
type ConfigurationState string

const (
	// User either hasn't started configuring their template
	// or they haven't started the configuration process.
	ConfigurationStateNotApplicable = ConfigurationState("NotApplicable")
	// User is finished modifying the template.
	ConfigurationStateCompleted = ConfigurationState("Completed")
)

// The enabled access level for Web Access over SSH.
type ConnectionType string

const (
	ConnectionTypePublic  = ConnectionType("Public")
	ConnectionTypePrivate = ConnectionType("Private")
	ConnectionTypeNone    = ConnectionType("None")
)

func (ConnectionType) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectionType)(nil)).Elem()
}

func (e ConnectionType) ToConnectionTypeOutput() ConnectionTypeOutput {
	return pulumi.ToOutput(e).(ConnectionTypeOutput)
}

func (e ConnectionType) ToConnectionTypeOutputWithContext(ctx context.Context) ConnectionTypeOutput {
	return pulumi.ToOutputWithContext(ctx, e).(ConnectionTypeOutput)
}

func (e ConnectionType) ToConnectionTypePtrOutput() ConnectionTypePtrOutput {
	return e.ToConnectionTypePtrOutputWithContext(context.Background())
}

func (e ConnectionType) ToConnectionTypePtrOutputWithContext(ctx context.Context) ConnectionTypePtrOutput {
	return ConnectionType(e).ToConnectionTypeOutputWithContext(ctx).ToConnectionTypePtrOutputWithContext(ctx)
}

func (e ConnectionType) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e ConnectionType) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e ConnectionType) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e ConnectionType) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type ConnectionTypeOutput struct{ *pulumi.OutputState }

func (ConnectionTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectionType)(nil)).Elem()
}

func (o ConnectionTypeOutput) ToConnectionTypeOutput() ConnectionTypeOutput {
	return o
}

func (o ConnectionTypeOutput) ToConnectionTypeOutputWithContext(ctx context.Context) ConnectionTypeOutput {
	return o
}

func (o ConnectionTypeOutput) ToConnectionTypePtrOutput() ConnectionTypePtrOutput {
	return o.ToConnectionTypePtrOutputWithContext(context.Background())
}

func (o ConnectionTypeOutput) ToConnectionTypePtrOutputWithContext(ctx context.Context) ConnectionTypePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ConnectionType) *ConnectionType {
		return &v
	}).(ConnectionTypePtrOutput)
}

func (o ConnectionTypeOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o ConnectionTypeOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e ConnectionType) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o ConnectionTypeOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o ConnectionTypeOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e ConnectionType) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type ConnectionTypePtrOutput struct{ *pulumi.OutputState }

func (ConnectionTypePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ConnectionType)(nil)).Elem()
}

func (o ConnectionTypePtrOutput) ToConnectionTypePtrOutput() ConnectionTypePtrOutput {
	return o
}

func (o ConnectionTypePtrOutput) ToConnectionTypePtrOutputWithContext(ctx context.Context) ConnectionTypePtrOutput {
	return o
}

func (o ConnectionTypePtrOutput) Elem() ConnectionTypeOutput {
	return o.ApplyT(func(v *ConnectionType) ConnectionType {
		if v != nil {
			return *v
		}
		var ret ConnectionType
		return ret
	}).(ConnectionTypeOutput)
}

func (o ConnectionTypePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o ConnectionTypePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *ConnectionType) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// ConnectionTypeInput is an input type that accepts ConnectionTypeArgs and ConnectionTypeOutput values.
// You can construct a concrete instance of `ConnectionTypeInput` via:
//
//	ConnectionTypeArgs{...}
type ConnectionTypeInput interface {
	pulumi.Input

	ToConnectionTypeOutput() ConnectionTypeOutput
	ToConnectionTypeOutputWithContext(context.Context) ConnectionTypeOutput
}

var connectionTypePtrType = reflect.TypeOf((**ConnectionType)(nil)).Elem()

type ConnectionTypePtrInput interface {
	pulumi.Input

	ToConnectionTypePtrOutput() ConnectionTypePtrOutput
	ToConnectionTypePtrOutputWithContext(context.Context) ConnectionTypePtrOutput
}

type connectionTypePtr string

func ConnectionTypePtr(v string) ConnectionTypePtrInput {
	return (*connectionTypePtr)(&v)
}

func (*connectionTypePtr) ElementType() reflect.Type {
	return connectionTypePtrType
}

func (in *connectionTypePtr) ToConnectionTypePtrOutput() ConnectionTypePtrOutput {
	return pulumi.ToOutput(in).(ConnectionTypePtrOutput)
}

func (in *connectionTypePtr) ToConnectionTypePtrOutputWithContext(ctx context.Context) ConnectionTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(ConnectionTypePtrOutput)
}

// Whether a VM will get shutdown when it hasn't been connected to after a period of time.
type EnableState string

const (
	EnableStateEnabled  = EnableState("Enabled")
	EnableStateDisabled = EnableState("Disabled")
)

func (EnableState) ElementType() reflect.Type {
	return reflect.TypeOf((*EnableState)(nil)).Elem()
}

func (e EnableState) ToEnableStateOutput() EnableStateOutput {
	return pulumi.ToOutput(e).(EnableStateOutput)
}

func (e EnableState) ToEnableStateOutputWithContext(ctx context.Context) EnableStateOutput {
	return pulumi.ToOutputWithContext(ctx, e).(EnableStateOutput)
}

func (e EnableState) ToEnableStatePtrOutput() EnableStatePtrOutput {
	return e.ToEnableStatePtrOutputWithContext(context.Background())
}

func (e EnableState) ToEnableStatePtrOutputWithContext(ctx context.Context) EnableStatePtrOutput {
	return EnableState(e).ToEnableStateOutputWithContext(ctx).ToEnableStatePtrOutputWithContext(ctx)
}

func (e EnableState) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e EnableState) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e EnableState) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e EnableState) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type EnableStateOutput struct{ *pulumi.OutputState }

func (EnableStateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EnableState)(nil)).Elem()
}

func (o EnableStateOutput) ToEnableStateOutput() EnableStateOutput {
	return o
}

func (o EnableStateOutput) ToEnableStateOutputWithContext(ctx context.Context) EnableStateOutput {
	return o
}

func (o EnableStateOutput) ToEnableStatePtrOutput() EnableStatePtrOutput {
	return o.ToEnableStatePtrOutputWithContext(context.Background())
}

func (o EnableStateOutput) ToEnableStatePtrOutputWithContext(ctx context.Context) EnableStatePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v EnableState) *EnableState {
		return &v
	}).(EnableStatePtrOutput)
}

func (o EnableStateOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o EnableStateOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e EnableState) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o EnableStateOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o EnableStateOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e EnableState) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type EnableStatePtrOutput struct{ *pulumi.OutputState }

func (EnableStatePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EnableState)(nil)).Elem()
}

func (o EnableStatePtrOutput) ToEnableStatePtrOutput() EnableStatePtrOutput {
	return o
}

func (o EnableStatePtrOutput) ToEnableStatePtrOutputWithContext(ctx context.Context) EnableStatePtrOutput {
	return o
}

func (o EnableStatePtrOutput) Elem() EnableStateOutput {
	return o.ApplyT(func(v *EnableState) EnableState {
		if v != nil {
			return *v
		}
		var ret EnableState
		return ret
	}).(EnableStateOutput)
}

func (o EnableStatePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o EnableStatePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *EnableState) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// EnableStateInput is an input type that accepts EnableStateArgs and EnableStateOutput values.
// You can construct a concrete instance of `EnableStateInput` via:
//
//	EnableStateArgs{...}
type EnableStateInput interface {
	pulumi.Input

	ToEnableStateOutput() EnableStateOutput
	ToEnableStateOutputWithContext(context.Context) EnableStateOutput
}

var enableStatePtrType = reflect.TypeOf((**EnableState)(nil)).Elem()

type EnableStatePtrInput interface {
	pulumi.Input

	ToEnableStatePtrOutput() EnableStatePtrOutput
	ToEnableStatePtrOutputWithContext(context.Context) EnableStatePtrOutput
}

type enableStatePtr string

func EnableStatePtr(v string) EnableStatePtrInput {
	return (*enableStatePtr)(&v)
}

func (*enableStatePtr) ElementType() reflect.Type {
	return enableStatePtrType
}

func (in *enableStatePtr) ToEnableStatePtrOutput() EnableStatePtrOutput {
	return pulumi.ToOutput(in).(EnableStatePtrOutput)
}

func (in *enableStatePtr) ToEnableStatePtrOutputWithContext(ctx context.Context) EnableStatePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(EnableStatePtrOutput)
}

// Lab user access mode (open to all vs. restricted to those listed on the lab).
type LabUserAccessMode string

const (
	// Only users registered with the lab can access VMs.
	LabUserAccessModeRestricted = LabUserAccessMode("Restricted")
	// Any user can register with the lab and access its VMs.
	LabUserAccessModeOpen = LabUserAccessMode("Open")
)

// The size of the virtual machine
type ManagedLabVmSize string

const (
	// The base VM size
	ManagedLabVmSizeBasic = ManagedLabVmSize("Basic")
	// The standard or default VM size
	ManagedLabVmSizeStandard = ManagedLabVmSize("Standard")
	// The most performant VM size
	ManagedLabVmSizePerformance = ManagedLabVmSize("Performance")
)

// The frequency of the recurrence.
type RecurrenceFrequency string

const (
	// Schedule will run every days.
	RecurrenceFrequencyDaily = RecurrenceFrequency("Daily")
	// Schedule will run every week on days specified in weekDays.
	RecurrenceFrequencyWeekly = RecurrenceFrequency("Weekly")
)

func (RecurrenceFrequency) ElementType() reflect.Type {
	return reflect.TypeOf((*RecurrenceFrequency)(nil)).Elem()
}

func (e RecurrenceFrequency) ToRecurrenceFrequencyOutput() RecurrenceFrequencyOutput {
	return pulumi.ToOutput(e).(RecurrenceFrequencyOutput)
}

func (e RecurrenceFrequency) ToRecurrenceFrequencyOutputWithContext(ctx context.Context) RecurrenceFrequencyOutput {
	return pulumi.ToOutputWithContext(ctx, e).(RecurrenceFrequencyOutput)
}

func (e RecurrenceFrequency) ToRecurrenceFrequencyPtrOutput() RecurrenceFrequencyPtrOutput {
	return e.ToRecurrenceFrequencyPtrOutputWithContext(context.Background())
}

func (e RecurrenceFrequency) ToRecurrenceFrequencyPtrOutputWithContext(ctx context.Context) RecurrenceFrequencyPtrOutput {
	return RecurrenceFrequency(e).ToRecurrenceFrequencyOutputWithContext(ctx).ToRecurrenceFrequencyPtrOutputWithContext(ctx)
}

func (e RecurrenceFrequency) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e RecurrenceFrequency) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e RecurrenceFrequency) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e RecurrenceFrequency) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type RecurrenceFrequencyOutput struct{ *pulumi.OutputState }

func (RecurrenceFrequencyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RecurrenceFrequency)(nil)).Elem()
}

func (o RecurrenceFrequencyOutput) ToRecurrenceFrequencyOutput() RecurrenceFrequencyOutput {
	return o
}

func (o RecurrenceFrequencyOutput) ToRecurrenceFrequencyOutputWithContext(ctx context.Context) RecurrenceFrequencyOutput {
	return o
}

func (o RecurrenceFrequencyOutput) ToRecurrenceFrequencyPtrOutput() RecurrenceFrequencyPtrOutput {
	return o.ToRecurrenceFrequencyPtrOutputWithContext(context.Background())
}

func (o RecurrenceFrequencyOutput) ToRecurrenceFrequencyPtrOutputWithContext(ctx context.Context) RecurrenceFrequencyPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RecurrenceFrequency) *RecurrenceFrequency {
		return &v
	}).(RecurrenceFrequencyPtrOutput)
}

func (o RecurrenceFrequencyOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o RecurrenceFrequencyOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e RecurrenceFrequency) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o RecurrenceFrequencyOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o RecurrenceFrequencyOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e RecurrenceFrequency) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type RecurrenceFrequencyPtrOutput struct{ *pulumi.OutputState }

func (RecurrenceFrequencyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RecurrenceFrequency)(nil)).Elem()
}

func (o RecurrenceFrequencyPtrOutput) ToRecurrenceFrequencyPtrOutput() RecurrenceFrequencyPtrOutput {
	return o
}

func (o RecurrenceFrequencyPtrOutput) ToRecurrenceFrequencyPtrOutputWithContext(ctx context.Context) RecurrenceFrequencyPtrOutput {
	return o
}

func (o RecurrenceFrequencyPtrOutput) Elem() RecurrenceFrequencyOutput {
	return o.ApplyT(func(v *RecurrenceFrequency) RecurrenceFrequency {
		if v != nil {
			return *v
		}
		var ret RecurrenceFrequency
		return ret
	}).(RecurrenceFrequencyOutput)
}

func (o RecurrenceFrequencyPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o RecurrenceFrequencyPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *RecurrenceFrequency) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// RecurrenceFrequencyInput is an input type that accepts RecurrenceFrequencyArgs and RecurrenceFrequencyOutput values.
// You can construct a concrete instance of `RecurrenceFrequencyInput` via:
//
//	RecurrenceFrequencyArgs{...}
type RecurrenceFrequencyInput interface {
	pulumi.Input

	ToRecurrenceFrequencyOutput() RecurrenceFrequencyOutput
	ToRecurrenceFrequencyOutputWithContext(context.Context) RecurrenceFrequencyOutput
}

var recurrenceFrequencyPtrType = reflect.TypeOf((**RecurrenceFrequency)(nil)).Elem()

type RecurrenceFrequencyPtrInput interface {
	pulumi.Input

	ToRecurrenceFrequencyPtrOutput() RecurrenceFrequencyPtrOutput
	ToRecurrenceFrequencyPtrOutputWithContext(context.Context) RecurrenceFrequencyPtrOutput
}

type recurrenceFrequencyPtr string

func RecurrenceFrequencyPtr(v string) RecurrenceFrequencyPtrInput {
	return (*recurrenceFrequencyPtr)(&v)
}

func (*recurrenceFrequencyPtr) ElementType() reflect.Type {
	return recurrenceFrequencyPtrType
}

func (in *recurrenceFrequencyPtr) ToRecurrenceFrequencyPtrOutput() RecurrenceFrequencyPtrOutput {
	return pulumi.ToOutput(in).(RecurrenceFrequencyPtrOutput)
}

func (in *recurrenceFrequencyPtr) ToRecurrenceFrequencyPtrOutputWithContext(ctx context.Context) RecurrenceFrequencyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(RecurrenceFrequencyPtrOutput)
}

// Whether a VM will get shutdown when it has idled for a period of time.
type ShutdownOnIdleMode string

const (
	// The VM won't be shut down when it is idle.
	ShutdownOnIdleModeNone = ShutdownOnIdleMode("None")
	// The VM will be considered as idle when there is no keyboard or mouse input.
	ShutdownOnIdleModeUserAbsence = ShutdownOnIdleMode("UserAbsence")
	// The VM will be considered as idle when user is absent and the resource (CPU and disk) consumption is low.
	ShutdownOnIdleModeLowUsage = ShutdownOnIdleMode("LowUsage")
)

func (ShutdownOnIdleMode) ElementType() reflect.Type {
	return reflect.TypeOf((*ShutdownOnIdleMode)(nil)).Elem()
}

func (e ShutdownOnIdleMode) ToShutdownOnIdleModeOutput() ShutdownOnIdleModeOutput {
	return pulumi.ToOutput(e).(ShutdownOnIdleModeOutput)
}

func (e ShutdownOnIdleMode) ToShutdownOnIdleModeOutputWithContext(ctx context.Context) ShutdownOnIdleModeOutput {
	return pulumi.ToOutputWithContext(ctx, e).(ShutdownOnIdleModeOutput)
}

func (e ShutdownOnIdleMode) ToShutdownOnIdleModePtrOutput() ShutdownOnIdleModePtrOutput {
	return e.ToShutdownOnIdleModePtrOutputWithContext(context.Background())
}

func (e ShutdownOnIdleMode) ToShutdownOnIdleModePtrOutputWithContext(ctx context.Context) ShutdownOnIdleModePtrOutput {
	return ShutdownOnIdleMode(e).ToShutdownOnIdleModeOutputWithContext(ctx).ToShutdownOnIdleModePtrOutputWithContext(ctx)
}

func (e ShutdownOnIdleMode) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e ShutdownOnIdleMode) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e ShutdownOnIdleMode) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e ShutdownOnIdleMode) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type ShutdownOnIdleModeOutput struct{ *pulumi.OutputState }

func (ShutdownOnIdleModeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ShutdownOnIdleMode)(nil)).Elem()
}

func (o ShutdownOnIdleModeOutput) ToShutdownOnIdleModeOutput() ShutdownOnIdleModeOutput {
	return o
}

func (o ShutdownOnIdleModeOutput) ToShutdownOnIdleModeOutputWithContext(ctx context.Context) ShutdownOnIdleModeOutput {
	return o
}

func (o ShutdownOnIdleModeOutput) ToShutdownOnIdleModePtrOutput() ShutdownOnIdleModePtrOutput {
	return o.ToShutdownOnIdleModePtrOutputWithContext(context.Background())
}

func (o ShutdownOnIdleModeOutput) ToShutdownOnIdleModePtrOutputWithContext(ctx context.Context) ShutdownOnIdleModePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ShutdownOnIdleMode) *ShutdownOnIdleMode {
		return &v
	}).(ShutdownOnIdleModePtrOutput)
}

func (o ShutdownOnIdleModeOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o ShutdownOnIdleModeOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e ShutdownOnIdleMode) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o ShutdownOnIdleModeOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o ShutdownOnIdleModeOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e ShutdownOnIdleMode) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type ShutdownOnIdleModePtrOutput struct{ *pulumi.OutputState }

func (ShutdownOnIdleModePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ShutdownOnIdleMode)(nil)).Elem()
}

func (o ShutdownOnIdleModePtrOutput) ToShutdownOnIdleModePtrOutput() ShutdownOnIdleModePtrOutput {
	return o
}

func (o ShutdownOnIdleModePtrOutput) ToShutdownOnIdleModePtrOutputWithContext(ctx context.Context) ShutdownOnIdleModePtrOutput {
	return o
}

func (o ShutdownOnIdleModePtrOutput) Elem() ShutdownOnIdleModeOutput {
	return o.ApplyT(func(v *ShutdownOnIdleMode) ShutdownOnIdleMode {
		if v != nil {
			return *v
		}
		var ret ShutdownOnIdleMode
		return ret
	}).(ShutdownOnIdleModeOutput)
}

func (o ShutdownOnIdleModePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o ShutdownOnIdleModePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *ShutdownOnIdleMode) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// ShutdownOnIdleModeInput is an input type that accepts ShutdownOnIdleModeArgs and ShutdownOnIdleModeOutput values.
// You can construct a concrete instance of `ShutdownOnIdleModeInput` via:
//
//	ShutdownOnIdleModeArgs{...}
type ShutdownOnIdleModeInput interface {
	pulumi.Input

	ToShutdownOnIdleModeOutput() ShutdownOnIdleModeOutput
	ToShutdownOnIdleModeOutputWithContext(context.Context) ShutdownOnIdleModeOutput
}

var shutdownOnIdleModePtrType = reflect.TypeOf((**ShutdownOnIdleMode)(nil)).Elem()

type ShutdownOnIdleModePtrInput interface {
	pulumi.Input

	ToShutdownOnIdleModePtrOutput() ShutdownOnIdleModePtrOutput
	ToShutdownOnIdleModePtrOutputWithContext(context.Context) ShutdownOnIdleModePtrOutput
}

type shutdownOnIdleModePtr string

func ShutdownOnIdleModePtr(v string) ShutdownOnIdleModePtrInput {
	return (*shutdownOnIdleModePtr)(&v)
}

func (*shutdownOnIdleModePtr) ElementType() reflect.Type {
	return shutdownOnIdleModePtrType
}

func (in *shutdownOnIdleModePtr) ToShutdownOnIdleModePtrOutput() ShutdownOnIdleModePtrOutput {
	return pulumi.ToOutput(in).(ShutdownOnIdleModePtrOutput)
}

func (in *shutdownOnIdleModePtr) ToShutdownOnIdleModePtrOutputWithContext(ctx context.Context) ShutdownOnIdleModePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(ShutdownOnIdleModePtrOutput)
}

// Days of the week.
type WeekDay string

const (
	// Schedule will run on Sunday
	WeekDaySunday = WeekDay("Sunday")
	// Schedule will run on Monday
	WeekDayMonday = WeekDay("Monday")
	// Schedule will run on Tuesday
	WeekDayTuesday = WeekDay("Tuesday")
	// Schedule will run on Wednesday
	WeekDayWednesday = WeekDay("Wednesday")
	// Schedule will run on Thursday
	WeekDayThursday = WeekDay("Thursday")
	// Schedule will run on Friday
	WeekDayFriday = WeekDay("Friday")
	// Schedule will run on Saturday
	WeekDaySaturday = WeekDay("Saturday")
)

func (WeekDay) ElementType() reflect.Type {
	return reflect.TypeOf((*WeekDay)(nil)).Elem()
}

func (e WeekDay) ToWeekDayOutput() WeekDayOutput {
	return pulumi.ToOutput(e).(WeekDayOutput)
}

func (e WeekDay) ToWeekDayOutputWithContext(ctx context.Context) WeekDayOutput {
	return pulumi.ToOutputWithContext(ctx, e).(WeekDayOutput)
}

func (e WeekDay) ToWeekDayPtrOutput() WeekDayPtrOutput {
	return e.ToWeekDayPtrOutputWithContext(context.Background())
}

func (e WeekDay) ToWeekDayPtrOutputWithContext(ctx context.Context) WeekDayPtrOutput {
	return WeekDay(e).ToWeekDayOutputWithContext(ctx).ToWeekDayPtrOutputWithContext(ctx)
}

func (e WeekDay) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e WeekDay) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e WeekDay) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e WeekDay) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type WeekDayOutput struct{ *pulumi.OutputState }

func (WeekDayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WeekDay)(nil)).Elem()
}

func (o WeekDayOutput) ToWeekDayOutput() WeekDayOutput {
	return o
}

func (o WeekDayOutput) ToWeekDayOutputWithContext(ctx context.Context) WeekDayOutput {
	return o
}

func (o WeekDayOutput) ToWeekDayPtrOutput() WeekDayPtrOutput {
	return o.ToWeekDayPtrOutputWithContext(context.Background())
}

func (o WeekDayOutput) ToWeekDayPtrOutputWithContext(ctx context.Context) WeekDayPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v WeekDay) *WeekDay {
		return &v
	}).(WeekDayPtrOutput)
}

func (o WeekDayOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o WeekDayOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e WeekDay) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o WeekDayOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o WeekDayOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e WeekDay) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type WeekDayPtrOutput struct{ *pulumi.OutputState }

func (WeekDayPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**WeekDay)(nil)).Elem()
}

func (o WeekDayPtrOutput) ToWeekDayPtrOutput() WeekDayPtrOutput {
	return o
}

func (o WeekDayPtrOutput) ToWeekDayPtrOutputWithContext(ctx context.Context) WeekDayPtrOutput {
	return o
}

func (o WeekDayPtrOutput) Elem() WeekDayOutput {
	return o.ApplyT(func(v *WeekDay) WeekDay {
		if v != nil {
			return *v
		}
		var ret WeekDay
		return ret
	}).(WeekDayOutput)
}

func (o WeekDayPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o WeekDayPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *WeekDay) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// WeekDayInput is an input type that accepts WeekDayArgs and WeekDayOutput values.
// You can construct a concrete instance of `WeekDayInput` via:
//
//	WeekDayArgs{...}
type WeekDayInput interface {
	pulumi.Input

	ToWeekDayOutput() WeekDayOutput
	ToWeekDayOutputWithContext(context.Context) WeekDayOutput
}

var weekDayPtrType = reflect.TypeOf((**WeekDay)(nil)).Elem()

type WeekDayPtrInput interface {
	pulumi.Input

	ToWeekDayPtrOutput() WeekDayPtrOutput
	ToWeekDayPtrOutputWithContext(context.Context) WeekDayPtrOutput
}

type weekDayPtr string

func WeekDayPtr(v string) WeekDayPtrInput {
	return (*weekDayPtr)(&v)
}

func (*weekDayPtr) ElementType() reflect.Type {
	return weekDayPtrType
}

func (in *weekDayPtr) ToWeekDayPtrOutput() WeekDayPtrOutput {
	return pulumi.ToOutput(in).(WeekDayPtrOutput)
}

func (in *weekDayPtr) ToWeekDayPtrOutputWithContext(ctx context.Context) WeekDayPtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(WeekDayPtrOutput)
}

// WeekDayArrayInput is an input type that accepts WeekDayArray and WeekDayArrayOutput values.
// You can construct a concrete instance of `WeekDayArrayInput` via:
//
//	WeekDayArray{ WeekDayArgs{...} }
type WeekDayArrayInput interface {
	pulumi.Input

	ToWeekDayArrayOutput() WeekDayArrayOutput
	ToWeekDayArrayOutputWithContext(context.Context) WeekDayArrayOutput
}

type WeekDayArray []WeekDay

func (WeekDayArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]WeekDay)(nil)).Elem()
}

func (i WeekDayArray) ToWeekDayArrayOutput() WeekDayArrayOutput {
	return i.ToWeekDayArrayOutputWithContext(context.Background())
}

func (i WeekDayArray) ToWeekDayArrayOutputWithContext(ctx context.Context) WeekDayArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WeekDayArrayOutput)
}

type WeekDayArrayOutput struct{ *pulumi.OutputState }

func (WeekDayArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]WeekDay)(nil)).Elem()
}

func (o WeekDayArrayOutput) ToWeekDayArrayOutput() WeekDayArrayOutput {
	return o
}

func (o WeekDayArrayOutput) ToWeekDayArrayOutputWithContext(ctx context.Context) WeekDayArrayOutput {
	return o
}

func (o WeekDayArrayOutput) Index(i pulumi.IntInput) WeekDayOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) WeekDay {
		return vs[0].([]WeekDay)[vs[1].(int)]
	}).(WeekDayOutput)
}

func init() {
	pulumi.RegisterOutputType(ConnectionTypeOutput{})
	pulumi.RegisterOutputType(ConnectionTypePtrOutput{})
	pulumi.RegisterOutputType(EnableStateOutput{})
	pulumi.RegisterOutputType(EnableStatePtrOutput{})
	pulumi.RegisterOutputType(RecurrenceFrequencyOutput{})
	pulumi.RegisterOutputType(RecurrenceFrequencyPtrOutput{})
	pulumi.RegisterOutputType(ShutdownOnIdleModeOutput{})
	pulumi.RegisterOutputType(ShutdownOnIdleModePtrOutput{})
	pulumi.RegisterOutputType(WeekDayOutput{})
	pulumi.RegisterOutputType(WeekDayPtrOutput{})
	pulumi.RegisterOutputType(WeekDayArrayOutput{})
}
