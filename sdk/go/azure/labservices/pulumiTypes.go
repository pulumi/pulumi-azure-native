// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package labservices

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Profile for how to handle shutting down virtual machines.
type AutoShutdownProfile struct {
	// The amount of time a VM will stay running after a user disconnects if this behavior is enabled.
	DisconnectDelay *string `pulumi:"disconnectDelay"`
	// The amount of time a VM will idle before it is shutdown if this behavior is enabled.
	IdleDelay *string `pulumi:"idleDelay"`
	// The amount of time a VM will stay running before it is shutdown if no connection is made and this behavior is enabled.
	NoConnectDelay *string `pulumi:"noConnectDelay"`
	// Whether shutdown on disconnect is enabled
	ShutdownOnDisconnect *EnableState `pulumi:"shutdownOnDisconnect"`
	// Whether a VM will get shutdown when it has idled for a period of time.
	ShutdownOnIdle *ShutdownOnIdleMode `pulumi:"shutdownOnIdle"`
	// Whether a VM will get shutdown when it hasn't been connected to after a period of time.
	ShutdownWhenNotConnected *EnableState `pulumi:"shutdownWhenNotConnected"`
}

// Defaults sets the appropriate defaults for AutoShutdownProfile
func (val *AutoShutdownProfile) Defaults() *AutoShutdownProfile {
	if val == nil {
		return nil
	}
	tmp := *val
	if isZero(tmp.ShutdownOnDisconnect) {
		shutdownOnDisconnect_ := EnableState("Disabled")
		tmp.ShutdownOnDisconnect = &shutdownOnDisconnect_
	}
	if isZero(tmp.ShutdownOnIdle) {
		shutdownOnIdle_ := ShutdownOnIdleMode("None")
		tmp.ShutdownOnIdle = &shutdownOnIdle_
	}
	if isZero(tmp.ShutdownWhenNotConnected) {
		shutdownWhenNotConnected_ := EnableState("Disabled")
		tmp.ShutdownWhenNotConnected = &shutdownWhenNotConnected_
	}
	return &tmp
}

// AutoShutdownProfileInput is an input type that accepts AutoShutdownProfileArgs and AutoShutdownProfileOutput values.
// You can construct a concrete instance of `AutoShutdownProfileInput` via:
//
//	AutoShutdownProfileArgs{...}
type AutoShutdownProfileInput interface {
	pulumi.Input

	ToAutoShutdownProfileOutput() AutoShutdownProfileOutput
	ToAutoShutdownProfileOutputWithContext(context.Context) AutoShutdownProfileOutput
}

// Profile for how to handle shutting down virtual machines.
type AutoShutdownProfileArgs struct {
	// The amount of time a VM will stay running after a user disconnects if this behavior is enabled.
	DisconnectDelay pulumi.StringPtrInput `pulumi:"disconnectDelay"`
	// The amount of time a VM will idle before it is shutdown if this behavior is enabled.
	IdleDelay pulumi.StringPtrInput `pulumi:"idleDelay"`
	// The amount of time a VM will stay running before it is shutdown if no connection is made and this behavior is enabled.
	NoConnectDelay pulumi.StringPtrInput `pulumi:"noConnectDelay"`
	// Whether shutdown on disconnect is enabled
	ShutdownOnDisconnect EnableStatePtrInput `pulumi:"shutdownOnDisconnect"`
	// Whether a VM will get shutdown when it has idled for a period of time.
	ShutdownOnIdle ShutdownOnIdleModePtrInput `pulumi:"shutdownOnIdle"`
	// Whether a VM will get shutdown when it hasn't been connected to after a period of time.
	ShutdownWhenNotConnected EnableStatePtrInput `pulumi:"shutdownWhenNotConnected"`
}

// Defaults sets the appropriate defaults for AutoShutdownProfileArgs
func (val *AutoShutdownProfileArgs) Defaults() *AutoShutdownProfileArgs {
	if val == nil {
		return nil
	}
	tmp := *val
	if isZero(tmp.ShutdownOnDisconnect) {
		tmp.ShutdownOnDisconnect = EnableState("Disabled")
	}
	if isZero(tmp.ShutdownOnIdle) {
		tmp.ShutdownOnIdle = ShutdownOnIdleMode("None")
	}
	if isZero(tmp.ShutdownWhenNotConnected) {
		tmp.ShutdownWhenNotConnected = EnableState("Disabled")
	}
	return &tmp
}
func (AutoShutdownProfileArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AutoShutdownProfile)(nil)).Elem()
}

func (i AutoShutdownProfileArgs) ToAutoShutdownProfileOutput() AutoShutdownProfileOutput {
	return i.ToAutoShutdownProfileOutputWithContext(context.Background())
}

func (i AutoShutdownProfileArgs) ToAutoShutdownProfileOutputWithContext(ctx context.Context) AutoShutdownProfileOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AutoShutdownProfileOutput)
}

func (i AutoShutdownProfileArgs) ToAutoShutdownProfilePtrOutput() AutoShutdownProfilePtrOutput {
	return i.ToAutoShutdownProfilePtrOutputWithContext(context.Background())
}

func (i AutoShutdownProfileArgs) ToAutoShutdownProfilePtrOutputWithContext(ctx context.Context) AutoShutdownProfilePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AutoShutdownProfileOutput).ToAutoShutdownProfilePtrOutputWithContext(ctx)
}

// AutoShutdownProfilePtrInput is an input type that accepts AutoShutdownProfileArgs, AutoShutdownProfilePtr and AutoShutdownProfilePtrOutput values.
// You can construct a concrete instance of `AutoShutdownProfilePtrInput` via:
//
//	        AutoShutdownProfileArgs{...}
//
//	or:
//
//	        nil
type AutoShutdownProfilePtrInput interface {
	pulumi.Input

	ToAutoShutdownProfilePtrOutput() AutoShutdownProfilePtrOutput
	ToAutoShutdownProfilePtrOutputWithContext(context.Context) AutoShutdownProfilePtrOutput
}

type autoShutdownProfilePtrType AutoShutdownProfileArgs

func AutoShutdownProfilePtr(v *AutoShutdownProfileArgs) AutoShutdownProfilePtrInput {
	return (*autoShutdownProfilePtrType)(v)
}

func (*autoShutdownProfilePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AutoShutdownProfile)(nil)).Elem()
}

func (i *autoShutdownProfilePtrType) ToAutoShutdownProfilePtrOutput() AutoShutdownProfilePtrOutput {
	return i.ToAutoShutdownProfilePtrOutputWithContext(context.Background())
}

func (i *autoShutdownProfilePtrType) ToAutoShutdownProfilePtrOutputWithContext(ctx context.Context) AutoShutdownProfilePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AutoShutdownProfilePtrOutput)
}

// Profile for how to handle shutting down virtual machines.
type AutoShutdownProfileOutput struct{ *pulumi.OutputState }

func (AutoShutdownProfileOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AutoShutdownProfile)(nil)).Elem()
}

func (o AutoShutdownProfileOutput) ToAutoShutdownProfileOutput() AutoShutdownProfileOutput {
	return o
}

func (o AutoShutdownProfileOutput) ToAutoShutdownProfileOutputWithContext(ctx context.Context) AutoShutdownProfileOutput {
	return o
}

func (o AutoShutdownProfileOutput) ToAutoShutdownProfilePtrOutput() AutoShutdownProfilePtrOutput {
	return o.ToAutoShutdownProfilePtrOutputWithContext(context.Background())
}

func (o AutoShutdownProfileOutput) ToAutoShutdownProfilePtrOutputWithContext(ctx context.Context) AutoShutdownProfilePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v AutoShutdownProfile) *AutoShutdownProfile {
		return &v
	}).(AutoShutdownProfilePtrOutput)
}

// The amount of time a VM will stay running after a user disconnects if this behavior is enabled.
func (o AutoShutdownProfileOutput) DisconnectDelay() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AutoShutdownProfile) *string { return v.DisconnectDelay }).(pulumi.StringPtrOutput)
}

// The amount of time a VM will idle before it is shutdown if this behavior is enabled.
func (o AutoShutdownProfileOutput) IdleDelay() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AutoShutdownProfile) *string { return v.IdleDelay }).(pulumi.StringPtrOutput)
}

// The amount of time a VM will stay running before it is shutdown if no connection is made and this behavior is enabled.
func (o AutoShutdownProfileOutput) NoConnectDelay() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AutoShutdownProfile) *string { return v.NoConnectDelay }).(pulumi.StringPtrOutput)
}

// Whether shutdown on disconnect is enabled
func (o AutoShutdownProfileOutput) ShutdownOnDisconnect() EnableStatePtrOutput {
	return o.ApplyT(func(v AutoShutdownProfile) *EnableState { return v.ShutdownOnDisconnect }).(EnableStatePtrOutput)
}

// Whether a VM will get shutdown when it has idled for a period of time.
func (o AutoShutdownProfileOutput) ShutdownOnIdle() ShutdownOnIdleModePtrOutput {
	return o.ApplyT(func(v AutoShutdownProfile) *ShutdownOnIdleMode { return v.ShutdownOnIdle }).(ShutdownOnIdleModePtrOutput)
}

// Whether a VM will get shutdown when it hasn't been connected to after a period of time.
func (o AutoShutdownProfileOutput) ShutdownWhenNotConnected() EnableStatePtrOutput {
	return o.ApplyT(func(v AutoShutdownProfile) *EnableState { return v.ShutdownWhenNotConnected }).(EnableStatePtrOutput)
}

type AutoShutdownProfilePtrOutput struct{ *pulumi.OutputState }

func (AutoShutdownProfilePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AutoShutdownProfile)(nil)).Elem()
}

func (o AutoShutdownProfilePtrOutput) ToAutoShutdownProfilePtrOutput() AutoShutdownProfilePtrOutput {
	return o
}

func (o AutoShutdownProfilePtrOutput) ToAutoShutdownProfilePtrOutputWithContext(ctx context.Context) AutoShutdownProfilePtrOutput {
	return o
}

func (o AutoShutdownProfilePtrOutput) Elem() AutoShutdownProfileOutput {
	return o.ApplyT(func(v *AutoShutdownProfile) AutoShutdownProfile {
		if v != nil {
			return *v
		}
		var ret AutoShutdownProfile
		return ret
	}).(AutoShutdownProfileOutput)
}

// The amount of time a VM will stay running after a user disconnects if this behavior is enabled.
func (o AutoShutdownProfilePtrOutput) DisconnectDelay() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AutoShutdownProfile) *string {
		if v == nil {
			return nil
		}
		return v.DisconnectDelay
	}).(pulumi.StringPtrOutput)
}

// The amount of time a VM will idle before it is shutdown if this behavior is enabled.
func (o AutoShutdownProfilePtrOutput) IdleDelay() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AutoShutdownProfile) *string {
		if v == nil {
			return nil
		}
		return v.IdleDelay
	}).(pulumi.StringPtrOutput)
}

// The amount of time a VM will stay running before it is shutdown if no connection is made and this behavior is enabled.
func (o AutoShutdownProfilePtrOutput) NoConnectDelay() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AutoShutdownProfile) *string {
		if v == nil {
			return nil
		}
		return v.NoConnectDelay
	}).(pulumi.StringPtrOutput)
}

// Whether shutdown on disconnect is enabled
func (o AutoShutdownProfilePtrOutput) ShutdownOnDisconnect() EnableStatePtrOutput {
	return o.ApplyT(func(v *AutoShutdownProfile) *EnableState {
		if v == nil {
			return nil
		}
		return v.ShutdownOnDisconnect
	}).(EnableStatePtrOutput)
}

// Whether a VM will get shutdown when it has idled for a period of time.
func (o AutoShutdownProfilePtrOutput) ShutdownOnIdle() ShutdownOnIdleModePtrOutput {
	return o.ApplyT(func(v *AutoShutdownProfile) *ShutdownOnIdleMode {
		if v == nil {
			return nil
		}
		return v.ShutdownOnIdle
	}).(ShutdownOnIdleModePtrOutput)
}

// Whether a VM will get shutdown when it hasn't been connected to after a period of time.
func (o AutoShutdownProfilePtrOutput) ShutdownWhenNotConnected() EnableStatePtrOutput {
	return o.ApplyT(func(v *AutoShutdownProfile) *EnableState {
		if v == nil {
			return nil
		}
		return v.ShutdownWhenNotConnected
	}).(EnableStatePtrOutput)
}

// Profile for how to handle shutting down virtual machines.
type AutoShutdownProfileResponse struct {
	// The amount of time a VM will stay running after a user disconnects if this behavior is enabled.
	DisconnectDelay *string `pulumi:"disconnectDelay"`
	// The amount of time a VM will idle before it is shutdown if this behavior is enabled.
	IdleDelay *string `pulumi:"idleDelay"`
	// The amount of time a VM will stay running before it is shutdown if no connection is made and this behavior is enabled.
	NoConnectDelay *string `pulumi:"noConnectDelay"`
	// Whether shutdown on disconnect is enabled
	ShutdownOnDisconnect *string `pulumi:"shutdownOnDisconnect"`
	// Whether a VM will get shutdown when it has idled for a period of time.
	ShutdownOnIdle *string `pulumi:"shutdownOnIdle"`
	// Whether a VM will get shutdown when it hasn't been connected to after a period of time.
	ShutdownWhenNotConnected *string `pulumi:"shutdownWhenNotConnected"`
}

// Defaults sets the appropriate defaults for AutoShutdownProfileResponse
func (val *AutoShutdownProfileResponse) Defaults() *AutoShutdownProfileResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if isZero(tmp.ShutdownOnDisconnect) {
		shutdownOnDisconnect_ := "Disabled"
		tmp.ShutdownOnDisconnect = &shutdownOnDisconnect_
	}
	if isZero(tmp.ShutdownOnIdle) {
		shutdownOnIdle_ := "None"
		tmp.ShutdownOnIdle = &shutdownOnIdle_
	}
	if isZero(tmp.ShutdownWhenNotConnected) {
		shutdownWhenNotConnected_ := "Disabled"
		tmp.ShutdownWhenNotConnected = &shutdownWhenNotConnected_
	}
	return &tmp
}

// Profile for how to handle shutting down virtual machines.
type AutoShutdownProfileResponseOutput struct{ *pulumi.OutputState }

func (AutoShutdownProfileResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AutoShutdownProfileResponse)(nil)).Elem()
}

func (o AutoShutdownProfileResponseOutput) ToAutoShutdownProfileResponseOutput() AutoShutdownProfileResponseOutput {
	return o
}

func (o AutoShutdownProfileResponseOutput) ToAutoShutdownProfileResponseOutputWithContext(ctx context.Context) AutoShutdownProfileResponseOutput {
	return o
}

// The amount of time a VM will stay running after a user disconnects if this behavior is enabled.
func (o AutoShutdownProfileResponseOutput) DisconnectDelay() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AutoShutdownProfileResponse) *string { return v.DisconnectDelay }).(pulumi.StringPtrOutput)
}

// The amount of time a VM will idle before it is shutdown if this behavior is enabled.
func (o AutoShutdownProfileResponseOutput) IdleDelay() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AutoShutdownProfileResponse) *string { return v.IdleDelay }).(pulumi.StringPtrOutput)
}

// The amount of time a VM will stay running before it is shutdown if no connection is made and this behavior is enabled.
func (o AutoShutdownProfileResponseOutput) NoConnectDelay() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AutoShutdownProfileResponse) *string { return v.NoConnectDelay }).(pulumi.StringPtrOutput)
}

// Whether shutdown on disconnect is enabled
func (o AutoShutdownProfileResponseOutput) ShutdownOnDisconnect() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AutoShutdownProfileResponse) *string { return v.ShutdownOnDisconnect }).(pulumi.StringPtrOutput)
}

// Whether a VM will get shutdown when it has idled for a period of time.
func (o AutoShutdownProfileResponseOutput) ShutdownOnIdle() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AutoShutdownProfileResponse) *string { return v.ShutdownOnIdle }).(pulumi.StringPtrOutput)
}

// Whether a VM will get shutdown when it hasn't been connected to after a period of time.
func (o AutoShutdownProfileResponseOutput) ShutdownWhenNotConnected() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AutoShutdownProfileResponse) *string { return v.ShutdownWhenNotConnected }).(pulumi.StringPtrOutput)
}

type AutoShutdownProfileResponsePtrOutput struct{ *pulumi.OutputState }

func (AutoShutdownProfileResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AutoShutdownProfileResponse)(nil)).Elem()
}

func (o AutoShutdownProfileResponsePtrOutput) ToAutoShutdownProfileResponsePtrOutput() AutoShutdownProfileResponsePtrOutput {
	return o
}

func (o AutoShutdownProfileResponsePtrOutput) ToAutoShutdownProfileResponsePtrOutputWithContext(ctx context.Context) AutoShutdownProfileResponsePtrOutput {
	return o
}

func (o AutoShutdownProfileResponsePtrOutput) Elem() AutoShutdownProfileResponseOutput {
	return o.ApplyT(func(v *AutoShutdownProfileResponse) AutoShutdownProfileResponse {
		if v != nil {
			return *v
		}
		var ret AutoShutdownProfileResponse
		return ret
	}).(AutoShutdownProfileResponseOutput)
}

// The amount of time a VM will stay running after a user disconnects if this behavior is enabled.
func (o AutoShutdownProfileResponsePtrOutput) DisconnectDelay() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AutoShutdownProfileResponse) *string {
		if v == nil {
			return nil
		}
		return v.DisconnectDelay
	}).(pulumi.StringPtrOutput)
}

// The amount of time a VM will idle before it is shutdown if this behavior is enabled.
func (o AutoShutdownProfileResponsePtrOutput) IdleDelay() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AutoShutdownProfileResponse) *string {
		if v == nil {
			return nil
		}
		return v.IdleDelay
	}).(pulumi.StringPtrOutput)
}

// The amount of time a VM will stay running before it is shutdown if no connection is made and this behavior is enabled.
func (o AutoShutdownProfileResponsePtrOutput) NoConnectDelay() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AutoShutdownProfileResponse) *string {
		if v == nil {
			return nil
		}
		return v.NoConnectDelay
	}).(pulumi.StringPtrOutput)
}

// Whether shutdown on disconnect is enabled
func (o AutoShutdownProfileResponsePtrOutput) ShutdownOnDisconnect() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AutoShutdownProfileResponse) *string {
		if v == nil {
			return nil
		}
		return v.ShutdownOnDisconnect
	}).(pulumi.StringPtrOutput)
}

// Whether a VM will get shutdown when it has idled for a period of time.
func (o AutoShutdownProfileResponsePtrOutput) ShutdownOnIdle() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AutoShutdownProfileResponse) *string {
		if v == nil {
			return nil
		}
		return v.ShutdownOnIdle
	}).(pulumi.StringPtrOutput)
}

// Whether a VM will get shutdown when it hasn't been connected to after a period of time.
func (o AutoShutdownProfileResponsePtrOutput) ShutdownWhenNotConnected() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AutoShutdownProfileResponse) *string {
		if v == nil {
			return nil
		}
		return v.ShutdownWhenNotConnected
	}).(pulumi.StringPtrOutput)
}

// Connection profile for how users connect to lab virtual machines.
type ConnectionProfile struct {
	// The enabled access level for Client Access over RDP.
	ClientRdpAccess *ConnectionType `pulumi:"clientRdpAccess"`
	// The enabled access level for Client Access over SSH.
	ClientSshAccess *ConnectionType `pulumi:"clientSshAccess"`
	// The enabled access level for Web Access over RDP.
	WebRdpAccess *ConnectionType `pulumi:"webRdpAccess"`
	// The enabled access level for Web Access over SSH.
	WebSshAccess *ConnectionType `pulumi:"webSshAccess"`
}

// Defaults sets the appropriate defaults for ConnectionProfile
func (val *ConnectionProfile) Defaults() *ConnectionProfile {
	if val == nil {
		return nil
	}
	tmp := *val
	if isZero(tmp.ClientRdpAccess) {
		clientRdpAccess_ := ConnectionType("None")
		tmp.ClientRdpAccess = &clientRdpAccess_
	}
	if isZero(tmp.ClientSshAccess) {
		clientSshAccess_ := ConnectionType("None")
		tmp.ClientSshAccess = &clientSshAccess_
	}
	if isZero(tmp.WebRdpAccess) {
		webRdpAccess_ := ConnectionType("None")
		tmp.WebRdpAccess = &webRdpAccess_
	}
	if isZero(tmp.WebSshAccess) {
		webSshAccess_ := ConnectionType("None")
		tmp.WebSshAccess = &webSshAccess_
	}
	return &tmp
}

// ConnectionProfileInput is an input type that accepts ConnectionProfileArgs and ConnectionProfileOutput values.
// You can construct a concrete instance of `ConnectionProfileInput` via:
//
//	ConnectionProfileArgs{...}
type ConnectionProfileInput interface {
	pulumi.Input

	ToConnectionProfileOutput() ConnectionProfileOutput
	ToConnectionProfileOutputWithContext(context.Context) ConnectionProfileOutput
}

// Connection profile for how users connect to lab virtual machines.
type ConnectionProfileArgs struct {
	// The enabled access level for Client Access over RDP.
	ClientRdpAccess ConnectionTypePtrInput `pulumi:"clientRdpAccess"`
	// The enabled access level for Client Access over SSH.
	ClientSshAccess ConnectionTypePtrInput `pulumi:"clientSshAccess"`
	// The enabled access level for Web Access over RDP.
	WebRdpAccess ConnectionTypePtrInput `pulumi:"webRdpAccess"`
	// The enabled access level for Web Access over SSH.
	WebSshAccess ConnectionTypePtrInput `pulumi:"webSshAccess"`
}

// Defaults sets the appropriate defaults for ConnectionProfileArgs
func (val *ConnectionProfileArgs) Defaults() *ConnectionProfileArgs {
	if val == nil {
		return nil
	}
	tmp := *val
	if isZero(tmp.ClientRdpAccess) {
		tmp.ClientRdpAccess = ConnectionType("None")
	}
	if isZero(tmp.ClientSshAccess) {
		tmp.ClientSshAccess = ConnectionType("None")
	}
	if isZero(tmp.WebRdpAccess) {
		tmp.WebRdpAccess = ConnectionType("None")
	}
	if isZero(tmp.WebSshAccess) {
		tmp.WebSshAccess = ConnectionType("None")
	}
	return &tmp
}
func (ConnectionProfileArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectionProfile)(nil)).Elem()
}

func (i ConnectionProfileArgs) ToConnectionProfileOutput() ConnectionProfileOutput {
	return i.ToConnectionProfileOutputWithContext(context.Background())
}

func (i ConnectionProfileArgs) ToConnectionProfileOutputWithContext(ctx context.Context) ConnectionProfileOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectionProfileOutput)
}

func (i ConnectionProfileArgs) ToConnectionProfilePtrOutput() ConnectionProfilePtrOutput {
	return i.ToConnectionProfilePtrOutputWithContext(context.Background())
}

func (i ConnectionProfileArgs) ToConnectionProfilePtrOutputWithContext(ctx context.Context) ConnectionProfilePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectionProfileOutput).ToConnectionProfilePtrOutputWithContext(ctx)
}

// ConnectionProfilePtrInput is an input type that accepts ConnectionProfileArgs, ConnectionProfilePtr and ConnectionProfilePtrOutput values.
// You can construct a concrete instance of `ConnectionProfilePtrInput` via:
//
//	        ConnectionProfileArgs{...}
//
//	or:
//
//	        nil
type ConnectionProfilePtrInput interface {
	pulumi.Input

	ToConnectionProfilePtrOutput() ConnectionProfilePtrOutput
	ToConnectionProfilePtrOutputWithContext(context.Context) ConnectionProfilePtrOutput
}

type connectionProfilePtrType ConnectionProfileArgs

func ConnectionProfilePtr(v *ConnectionProfileArgs) ConnectionProfilePtrInput {
	return (*connectionProfilePtrType)(v)
}

func (*connectionProfilePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ConnectionProfile)(nil)).Elem()
}

func (i *connectionProfilePtrType) ToConnectionProfilePtrOutput() ConnectionProfilePtrOutput {
	return i.ToConnectionProfilePtrOutputWithContext(context.Background())
}

func (i *connectionProfilePtrType) ToConnectionProfilePtrOutputWithContext(ctx context.Context) ConnectionProfilePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectionProfilePtrOutput)
}

// Connection profile for how users connect to lab virtual machines.
type ConnectionProfileOutput struct{ *pulumi.OutputState }

func (ConnectionProfileOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectionProfile)(nil)).Elem()
}

func (o ConnectionProfileOutput) ToConnectionProfileOutput() ConnectionProfileOutput {
	return o
}

func (o ConnectionProfileOutput) ToConnectionProfileOutputWithContext(ctx context.Context) ConnectionProfileOutput {
	return o
}

func (o ConnectionProfileOutput) ToConnectionProfilePtrOutput() ConnectionProfilePtrOutput {
	return o.ToConnectionProfilePtrOutputWithContext(context.Background())
}

func (o ConnectionProfileOutput) ToConnectionProfilePtrOutputWithContext(ctx context.Context) ConnectionProfilePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ConnectionProfile) *ConnectionProfile {
		return &v
	}).(ConnectionProfilePtrOutput)
}

// The enabled access level for Client Access over RDP.
func (o ConnectionProfileOutput) ClientRdpAccess() ConnectionTypePtrOutput {
	return o.ApplyT(func(v ConnectionProfile) *ConnectionType { return v.ClientRdpAccess }).(ConnectionTypePtrOutput)
}

// The enabled access level for Client Access over SSH.
func (o ConnectionProfileOutput) ClientSshAccess() ConnectionTypePtrOutput {
	return o.ApplyT(func(v ConnectionProfile) *ConnectionType { return v.ClientSshAccess }).(ConnectionTypePtrOutput)
}

// The enabled access level for Web Access over RDP.
func (o ConnectionProfileOutput) WebRdpAccess() ConnectionTypePtrOutput {
	return o.ApplyT(func(v ConnectionProfile) *ConnectionType { return v.WebRdpAccess }).(ConnectionTypePtrOutput)
}

// The enabled access level for Web Access over SSH.
func (o ConnectionProfileOutput) WebSshAccess() ConnectionTypePtrOutput {
	return o.ApplyT(func(v ConnectionProfile) *ConnectionType { return v.WebSshAccess }).(ConnectionTypePtrOutput)
}

type ConnectionProfilePtrOutput struct{ *pulumi.OutputState }

func (ConnectionProfilePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ConnectionProfile)(nil)).Elem()
}

func (o ConnectionProfilePtrOutput) ToConnectionProfilePtrOutput() ConnectionProfilePtrOutput {
	return o
}

func (o ConnectionProfilePtrOutput) ToConnectionProfilePtrOutputWithContext(ctx context.Context) ConnectionProfilePtrOutput {
	return o
}

func (o ConnectionProfilePtrOutput) Elem() ConnectionProfileOutput {
	return o.ApplyT(func(v *ConnectionProfile) ConnectionProfile {
		if v != nil {
			return *v
		}
		var ret ConnectionProfile
		return ret
	}).(ConnectionProfileOutput)
}

// The enabled access level for Client Access over RDP.
func (o ConnectionProfilePtrOutput) ClientRdpAccess() ConnectionTypePtrOutput {
	return o.ApplyT(func(v *ConnectionProfile) *ConnectionType {
		if v == nil {
			return nil
		}
		return v.ClientRdpAccess
	}).(ConnectionTypePtrOutput)
}

// The enabled access level for Client Access over SSH.
func (o ConnectionProfilePtrOutput) ClientSshAccess() ConnectionTypePtrOutput {
	return o.ApplyT(func(v *ConnectionProfile) *ConnectionType {
		if v == nil {
			return nil
		}
		return v.ClientSshAccess
	}).(ConnectionTypePtrOutput)
}

// The enabled access level for Web Access over RDP.
func (o ConnectionProfilePtrOutput) WebRdpAccess() ConnectionTypePtrOutput {
	return o.ApplyT(func(v *ConnectionProfile) *ConnectionType {
		if v == nil {
			return nil
		}
		return v.WebRdpAccess
	}).(ConnectionTypePtrOutput)
}

// The enabled access level for Web Access over SSH.
func (o ConnectionProfilePtrOutput) WebSshAccess() ConnectionTypePtrOutput {
	return o.ApplyT(func(v *ConnectionProfile) *ConnectionType {
		if v == nil {
			return nil
		}
		return v.WebSshAccess
	}).(ConnectionTypePtrOutput)
}

// Connection profile for how users connect to lab virtual machines.
type ConnectionProfileResponse struct {
	// The enabled access level for Client Access over RDP.
	ClientRdpAccess *string `pulumi:"clientRdpAccess"`
	// The enabled access level for Client Access over SSH.
	ClientSshAccess *string `pulumi:"clientSshAccess"`
	// The enabled access level for Web Access over RDP.
	WebRdpAccess *string `pulumi:"webRdpAccess"`
	// The enabled access level for Web Access over SSH.
	WebSshAccess *string `pulumi:"webSshAccess"`
}

// Defaults sets the appropriate defaults for ConnectionProfileResponse
func (val *ConnectionProfileResponse) Defaults() *ConnectionProfileResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if isZero(tmp.ClientRdpAccess) {
		clientRdpAccess_ := "None"
		tmp.ClientRdpAccess = &clientRdpAccess_
	}
	if isZero(tmp.ClientSshAccess) {
		clientSshAccess_ := "None"
		tmp.ClientSshAccess = &clientSshAccess_
	}
	if isZero(tmp.WebRdpAccess) {
		webRdpAccess_ := "None"
		tmp.WebRdpAccess = &webRdpAccess_
	}
	if isZero(tmp.WebSshAccess) {
		webSshAccess_ := "None"
		tmp.WebSshAccess = &webSshAccess_
	}
	return &tmp
}

// Connection profile for how users connect to lab virtual machines.
type ConnectionProfileResponseOutput struct{ *pulumi.OutputState }

func (ConnectionProfileResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectionProfileResponse)(nil)).Elem()
}

func (o ConnectionProfileResponseOutput) ToConnectionProfileResponseOutput() ConnectionProfileResponseOutput {
	return o
}

func (o ConnectionProfileResponseOutput) ToConnectionProfileResponseOutputWithContext(ctx context.Context) ConnectionProfileResponseOutput {
	return o
}

// The enabled access level for Client Access over RDP.
func (o ConnectionProfileResponseOutput) ClientRdpAccess() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ConnectionProfileResponse) *string { return v.ClientRdpAccess }).(pulumi.StringPtrOutput)
}

// The enabled access level for Client Access over SSH.
func (o ConnectionProfileResponseOutput) ClientSshAccess() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ConnectionProfileResponse) *string { return v.ClientSshAccess }).(pulumi.StringPtrOutput)
}

// The enabled access level for Web Access over RDP.
func (o ConnectionProfileResponseOutput) WebRdpAccess() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ConnectionProfileResponse) *string { return v.WebRdpAccess }).(pulumi.StringPtrOutput)
}

// The enabled access level for Web Access over SSH.
func (o ConnectionProfileResponseOutput) WebSshAccess() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ConnectionProfileResponse) *string { return v.WebSshAccess }).(pulumi.StringPtrOutput)
}

type ConnectionProfileResponsePtrOutput struct{ *pulumi.OutputState }

func (ConnectionProfileResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ConnectionProfileResponse)(nil)).Elem()
}

func (o ConnectionProfileResponsePtrOutput) ToConnectionProfileResponsePtrOutput() ConnectionProfileResponsePtrOutput {
	return o
}

func (o ConnectionProfileResponsePtrOutput) ToConnectionProfileResponsePtrOutputWithContext(ctx context.Context) ConnectionProfileResponsePtrOutput {
	return o
}

func (o ConnectionProfileResponsePtrOutput) Elem() ConnectionProfileResponseOutput {
	return o.ApplyT(func(v *ConnectionProfileResponse) ConnectionProfileResponse {
		if v != nil {
			return *v
		}
		var ret ConnectionProfileResponse
		return ret
	}).(ConnectionProfileResponseOutput)
}

// The enabled access level for Client Access over RDP.
func (o ConnectionProfileResponsePtrOutput) ClientRdpAccess() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConnectionProfileResponse) *string {
		if v == nil {
			return nil
		}
		return v.ClientRdpAccess
	}).(pulumi.StringPtrOutput)
}

// The enabled access level for Client Access over SSH.
func (o ConnectionProfileResponsePtrOutput) ClientSshAccess() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConnectionProfileResponse) *string {
		if v == nil {
			return nil
		}
		return v.ClientSshAccess
	}).(pulumi.StringPtrOutput)
}

// The enabled access level for Web Access over RDP.
func (o ConnectionProfileResponsePtrOutput) WebRdpAccess() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConnectionProfileResponse) *string {
		if v == nil {
			return nil
		}
		return v.WebRdpAccess
	}).(pulumi.StringPtrOutput)
}

// The enabled access level for Web Access over SSH.
func (o ConnectionProfileResponsePtrOutput) WebSshAccess() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConnectionProfileResponse) *string {
		if v == nil {
			return nil
		}
		return v.WebSshAccess
	}).(pulumi.StringPtrOutput)
}

// This represents the details about a User's environment and its state.
type EnvironmentDetailsResponse struct {
	// Description of the Environment
	Description string `pulumi:"description"`
	// Publishing state of the environment setting Possible values are Creating, Created, Failed
	EnvironmentState string `pulumi:"environmentState"`
	// Resource Id of the environment
	Id string `pulumi:"id"`
	// The details of the latest operation. ex: status, error
	LatestOperationResult LatestOperationResultResponse `pulumi:"latestOperationResult"`
	// Name of the Environment
	Name string `pulumi:"name"`
	// When the password was last reset on the environment.
	PasswordLastReset string `pulumi:"passwordLastReset"`
	// The provisioning state of the environment. This also includes LabIsFull and NotYetProvisioned status.
	ProvisioningState string `pulumi:"provisioningState"`
	// How long the environment has been used by a lab user
	TotalUsage string `pulumi:"totalUsage"`
	// Details of backing DTL virtual machine with compute and network details.
	VirtualMachineDetails VirtualMachineDetailsResponse `pulumi:"virtualMachineDetails"`
}

// This represents the details about a User's environment and its state.
type EnvironmentDetailsResponseOutput struct{ *pulumi.OutputState }

func (EnvironmentDetailsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EnvironmentDetailsResponse)(nil)).Elem()
}

func (o EnvironmentDetailsResponseOutput) ToEnvironmentDetailsResponseOutput() EnvironmentDetailsResponseOutput {
	return o
}

func (o EnvironmentDetailsResponseOutput) ToEnvironmentDetailsResponseOutputWithContext(ctx context.Context) EnvironmentDetailsResponseOutput {
	return o
}

// Description of the Environment
func (o EnvironmentDetailsResponseOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v EnvironmentDetailsResponse) string { return v.Description }).(pulumi.StringOutput)
}

// Publishing state of the environment setting Possible values are Creating, Created, Failed
func (o EnvironmentDetailsResponseOutput) EnvironmentState() pulumi.StringOutput {
	return o.ApplyT(func(v EnvironmentDetailsResponse) string { return v.EnvironmentState }).(pulumi.StringOutput)
}

// Resource Id of the environment
func (o EnvironmentDetailsResponseOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v EnvironmentDetailsResponse) string { return v.Id }).(pulumi.StringOutput)
}

// The details of the latest operation. ex: status, error
func (o EnvironmentDetailsResponseOutput) LatestOperationResult() LatestOperationResultResponseOutput {
	return o.ApplyT(func(v EnvironmentDetailsResponse) LatestOperationResultResponse { return v.LatestOperationResult }).(LatestOperationResultResponseOutput)
}

// Name of the Environment
func (o EnvironmentDetailsResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v EnvironmentDetailsResponse) string { return v.Name }).(pulumi.StringOutput)
}

// When the password was last reset on the environment.
func (o EnvironmentDetailsResponseOutput) PasswordLastReset() pulumi.StringOutput {
	return o.ApplyT(func(v EnvironmentDetailsResponse) string { return v.PasswordLastReset }).(pulumi.StringOutput)
}

// The provisioning state of the environment. This also includes LabIsFull and NotYetProvisioned status.
func (o EnvironmentDetailsResponseOutput) ProvisioningState() pulumi.StringOutput {
	return o.ApplyT(func(v EnvironmentDetailsResponse) string { return v.ProvisioningState }).(pulumi.StringOutput)
}

// How long the environment has been used by a lab user
func (o EnvironmentDetailsResponseOutput) TotalUsage() pulumi.StringOutput {
	return o.ApplyT(func(v EnvironmentDetailsResponse) string { return v.TotalUsage }).(pulumi.StringOutput)
}

// Details of backing DTL virtual machine with compute and network details.
func (o EnvironmentDetailsResponseOutput) VirtualMachineDetails() VirtualMachineDetailsResponseOutput {
	return o.ApplyT(func(v EnvironmentDetailsResponse) VirtualMachineDetailsResponse { return v.VirtualMachineDetails }).(VirtualMachineDetailsResponseOutput)
}

type EnvironmentDetailsResponseArrayOutput struct{ *pulumi.OutputState }

func (EnvironmentDetailsResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EnvironmentDetailsResponse)(nil)).Elem()
}

func (o EnvironmentDetailsResponseArrayOutput) ToEnvironmentDetailsResponseArrayOutput() EnvironmentDetailsResponseArrayOutput {
	return o
}

func (o EnvironmentDetailsResponseArrayOutput) ToEnvironmentDetailsResponseArrayOutputWithContext(ctx context.Context) EnvironmentDetailsResponseArrayOutput {
	return o
}

func (o EnvironmentDetailsResponseArrayOutput) Index(i pulumi.IntInput) EnvironmentDetailsResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) EnvironmentDetailsResponse {
		return vs[0].([]EnvironmentDetailsResponse)[vs[1].(int)]
	}).(EnvironmentDetailsResponseOutput)
}

// Represents a size category supported by this Lab Account (small, medium or large)
type EnvironmentSizeResponse struct {
	// The pay-as-you-go dollar price per hour this size will cost. It does not include discounts and may not reflect the actual price the size will cost. This is the maximum price of all prices within this tier.
	MaxPrice float64 `pulumi:"maxPrice"`
	// The amount of memory available (in GB). This is the minimum amount of memory within this tier.
	MinMemory float64 `pulumi:"minMemory"`
	// The number of cores a VM of this size has. This is the minimum number of cores within this tier.
	MinNumberOfCores int `pulumi:"minNumberOfCores"`
	// The size category
	Name *string `pulumi:"name"`
	// Represents a set of compute sizes that can serve this given size type
	VmSizes []SizeInfoResponse `pulumi:"vmSizes"`
}

// Represents a size category supported by this Lab Account (small, medium or large)
type EnvironmentSizeResponseOutput struct{ *pulumi.OutputState }

func (EnvironmentSizeResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EnvironmentSizeResponse)(nil)).Elem()
}

func (o EnvironmentSizeResponseOutput) ToEnvironmentSizeResponseOutput() EnvironmentSizeResponseOutput {
	return o
}

func (o EnvironmentSizeResponseOutput) ToEnvironmentSizeResponseOutputWithContext(ctx context.Context) EnvironmentSizeResponseOutput {
	return o
}

// The pay-as-you-go dollar price per hour this size will cost. It does not include discounts and may not reflect the actual price the size will cost. This is the maximum price of all prices within this tier.
func (o EnvironmentSizeResponseOutput) MaxPrice() pulumi.Float64Output {
	return o.ApplyT(func(v EnvironmentSizeResponse) float64 { return v.MaxPrice }).(pulumi.Float64Output)
}

// The amount of memory available (in GB). This is the minimum amount of memory within this tier.
func (o EnvironmentSizeResponseOutput) MinMemory() pulumi.Float64Output {
	return o.ApplyT(func(v EnvironmentSizeResponse) float64 { return v.MinMemory }).(pulumi.Float64Output)
}

// The number of cores a VM of this size has. This is the minimum number of cores within this tier.
func (o EnvironmentSizeResponseOutput) MinNumberOfCores() pulumi.IntOutput {
	return o.ApplyT(func(v EnvironmentSizeResponse) int { return v.MinNumberOfCores }).(pulumi.IntOutput)
}

// The size category
func (o EnvironmentSizeResponseOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EnvironmentSizeResponse) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Represents a set of compute sizes that can serve this given size type
func (o EnvironmentSizeResponseOutput) VmSizes() SizeInfoResponseArrayOutput {
	return o.ApplyT(func(v EnvironmentSizeResponse) []SizeInfoResponse { return v.VmSizes }).(SizeInfoResponseArrayOutput)
}

type EnvironmentSizeResponseArrayOutput struct{ *pulumi.OutputState }

func (EnvironmentSizeResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EnvironmentSizeResponse)(nil)).Elem()
}

func (o EnvironmentSizeResponseArrayOutput) ToEnvironmentSizeResponseArrayOutput() EnvironmentSizeResponseArrayOutput {
	return o
}

func (o EnvironmentSizeResponseArrayOutput) ToEnvironmentSizeResponseArrayOutputWithContext(ctx context.Context) EnvironmentSizeResponseArrayOutput {
	return o
}

func (o EnvironmentSizeResponseArrayOutput) Index(i pulumi.IntInput) EnvironmentSizeResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) EnvironmentSizeResponse {
		return vs[0].([]EnvironmentSizeResponse)[vs[1].(int)]
	}).(EnvironmentSizeResponseOutput)
}

// The reference information for an Azure Marketplace image.
type GalleryImageReferenceResponse struct {
	// The offer of the gallery image.
	Offer *string `pulumi:"offer"`
	// The OS type of the gallery image.
	OsType *string `pulumi:"osType"`
	// The publisher of the gallery image.
	Publisher *string `pulumi:"publisher"`
	// The SKU of the gallery image.
	Sku *string `pulumi:"sku"`
	// The version of the gallery image.
	Version *string `pulumi:"version"`
}

// The reference information for an Azure Marketplace image.
type GalleryImageReferenceResponseOutput struct{ *pulumi.OutputState }

func (GalleryImageReferenceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GalleryImageReferenceResponse)(nil)).Elem()
}

func (o GalleryImageReferenceResponseOutput) ToGalleryImageReferenceResponseOutput() GalleryImageReferenceResponseOutput {
	return o
}

func (o GalleryImageReferenceResponseOutput) ToGalleryImageReferenceResponseOutputWithContext(ctx context.Context) GalleryImageReferenceResponseOutput {
	return o
}

// The offer of the gallery image.
func (o GalleryImageReferenceResponseOutput) Offer() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GalleryImageReferenceResponse) *string { return v.Offer }).(pulumi.StringPtrOutput)
}

// The OS type of the gallery image.
func (o GalleryImageReferenceResponseOutput) OsType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GalleryImageReferenceResponse) *string { return v.OsType }).(pulumi.StringPtrOutput)
}

// The publisher of the gallery image.
func (o GalleryImageReferenceResponseOutput) Publisher() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GalleryImageReferenceResponse) *string { return v.Publisher }).(pulumi.StringPtrOutput)
}

// The SKU of the gallery image.
func (o GalleryImageReferenceResponseOutput) Sku() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GalleryImageReferenceResponse) *string { return v.Sku }).(pulumi.StringPtrOutput)
}

// The version of the gallery image.
func (o GalleryImageReferenceResponseOutput) Version() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GalleryImageReferenceResponse) *string { return v.Version }).(pulumi.StringPtrOutput)
}

// This represents the details about a lab that the User is in, and its state.
type LabDetailsResponse struct {
	// The Id of the lab.
	Id *string `pulumi:"id"`
	// Name of the lab
	Name *string `pulumi:"name"`
	// The provisioning state of the lab.
	ProvisioningState *string `pulumi:"provisioningState"`
	// The maximum duration a user can use a VM in this lab.
	UsageQuota string `pulumi:"usageQuota"`
}

// This represents the details about a lab that the User is in, and its state.
type LabDetailsResponseOutput struct{ *pulumi.OutputState }

func (LabDetailsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LabDetailsResponse)(nil)).Elem()
}

func (o LabDetailsResponseOutput) ToLabDetailsResponseOutput() LabDetailsResponseOutput {
	return o
}

func (o LabDetailsResponseOutput) ToLabDetailsResponseOutputWithContext(ctx context.Context) LabDetailsResponseOutput {
	return o
}

// The Id of the lab.
func (o LabDetailsResponseOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LabDetailsResponse) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// Name of the lab
func (o LabDetailsResponseOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LabDetailsResponse) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The provisioning state of the lab.
func (o LabDetailsResponseOutput) ProvisioningState() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LabDetailsResponse) *string { return v.ProvisioningState }).(pulumi.StringPtrOutput)
}

// The maximum duration a user can use a VM in this lab.
func (o LabDetailsResponseOutput) UsageQuota() pulumi.StringOutput {
	return o.ApplyT(func(v LabDetailsResponse) string { return v.UsageQuota }).(pulumi.StringOutput)
}

type LabDetailsResponseArrayOutput struct{ *pulumi.OutputState }

func (LabDetailsResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]LabDetailsResponse)(nil)).Elem()
}

func (o LabDetailsResponseArrayOutput) ToLabDetailsResponseArrayOutput() LabDetailsResponseArrayOutput {
	return o
}

func (o LabDetailsResponseArrayOutput) ToLabDetailsResponseArrayOutputWithContext(ctx context.Context) LabDetailsResponseArrayOutput {
	return o
}

func (o LabDetailsResponseArrayOutput) Index(i pulumi.IntInput) LabDetailsResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) LabDetailsResponse {
		return vs[0].([]LabDetailsResponse)[vs[1].(int)]
	}).(LabDetailsResponseOutput)
}

// Profile for how to handle networking for Lab Plans.
type LabPlanNetworkProfile struct {
	// The external subnet resource id
	SubnetId *string `pulumi:"subnetId"`
}

// LabPlanNetworkProfileInput is an input type that accepts LabPlanNetworkProfileArgs and LabPlanNetworkProfileOutput values.
// You can construct a concrete instance of `LabPlanNetworkProfileInput` via:
//
//	LabPlanNetworkProfileArgs{...}
type LabPlanNetworkProfileInput interface {
	pulumi.Input

	ToLabPlanNetworkProfileOutput() LabPlanNetworkProfileOutput
	ToLabPlanNetworkProfileOutputWithContext(context.Context) LabPlanNetworkProfileOutput
}

// Profile for how to handle networking for Lab Plans.
type LabPlanNetworkProfileArgs struct {
	// The external subnet resource id
	SubnetId pulumi.StringPtrInput `pulumi:"subnetId"`
}

func (LabPlanNetworkProfileArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LabPlanNetworkProfile)(nil)).Elem()
}

func (i LabPlanNetworkProfileArgs) ToLabPlanNetworkProfileOutput() LabPlanNetworkProfileOutput {
	return i.ToLabPlanNetworkProfileOutputWithContext(context.Background())
}

func (i LabPlanNetworkProfileArgs) ToLabPlanNetworkProfileOutputWithContext(ctx context.Context) LabPlanNetworkProfileOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LabPlanNetworkProfileOutput)
}

func (i LabPlanNetworkProfileArgs) ToLabPlanNetworkProfilePtrOutput() LabPlanNetworkProfilePtrOutput {
	return i.ToLabPlanNetworkProfilePtrOutputWithContext(context.Background())
}

func (i LabPlanNetworkProfileArgs) ToLabPlanNetworkProfilePtrOutputWithContext(ctx context.Context) LabPlanNetworkProfilePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LabPlanNetworkProfileOutput).ToLabPlanNetworkProfilePtrOutputWithContext(ctx)
}

// LabPlanNetworkProfilePtrInput is an input type that accepts LabPlanNetworkProfileArgs, LabPlanNetworkProfilePtr and LabPlanNetworkProfilePtrOutput values.
// You can construct a concrete instance of `LabPlanNetworkProfilePtrInput` via:
//
//	        LabPlanNetworkProfileArgs{...}
//
//	or:
//
//	        nil
type LabPlanNetworkProfilePtrInput interface {
	pulumi.Input

	ToLabPlanNetworkProfilePtrOutput() LabPlanNetworkProfilePtrOutput
	ToLabPlanNetworkProfilePtrOutputWithContext(context.Context) LabPlanNetworkProfilePtrOutput
}

type labPlanNetworkProfilePtrType LabPlanNetworkProfileArgs

func LabPlanNetworkProfilePtr(v *LabPlanNetworkProfileArgs) LabPlanNetworkProfilePtrInput {
	return (*labPlanNetworkProfilePtrType)(v)
}

func (*labPlanNetworkProfilePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**LabPlanNetworkProfile)(nil)).Elem()
}

func (i *labPlanNetworkProfilePtrType) ToLabPlanNetworkProfilePtrOutput() LabPlanNetworkProfilePtrOutput {
	return i.ToLabPlanNetworkProfilePtrOutputWithContext(context.Background())
}

func (i *labPlanNetworkProfilePtrType) ToLabPlanNetworkProfilePtrOutputWithContext(ctx context.Context) LabPlanNetworkProfilePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LabPlanNetworkProfilePtrOutput)
}

// Profile for how to handle networking for Lab Plans.
type LabPlanNetworkProfileOutput struct{ *pulumi.OutputState }

func (LabPlanNetworkProfileOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LabPlanNetworkProfile)(nil)).Elem()
}

func (o LabPlanNetworkProfileOutput) ToLabPlanNetworkProfileOutput() LabPlanNetworkProfileOutput {
	return o
}

func (o LabPlanNetworkProfileOutput) ToLabPlanNetworkProfileOutputWithContext(ctx context.Context) LabPlanNetworkProfileOutput {
	return o
}

func (o LabPlanNetworkProfileOutput) ToLabPlanNetworkProfilePtrOutput() LabPlanNetworkProfilePtrOutput {
	return o.ToLabPlanNetworkProfilePtrOutputWithContext(context.Background())
}

func (o LabPlanNetworkProfileOutput) ToLabPlanNetworkProfilePtrOutputWithContext(ctx context.Context) LabPlanNetworkProfilePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v LabPlanNetworkProfile) *LabPlanNetworkProfile {
		return &v
	}).(LabPlanNetworkProfilePtrOutput)
}

// The external subnet resource id
func (o LabPlanNetworkProfileOutput) SubnetId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LabPlanNetworkProfile) *string { return v.SubnetId }).(pulumi.StringPtrOutput)
}

type LabPlanNetworkProfilePtrOutput struct{ *pulumi.OutputState }

func (LabPlanNetworkProfilePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LabPlanNetworkProfile)(nil)).Elem()
}

func (o LabPlanNetworkProfilePtrOutput) ToLabPlanNetworkProfilePtrOutput() LabPlanNetworkProfilePtrOutput {
	return o
}

func (o LabPlanNetworkProfilePtrOutput) ToLabPlanNetworkProfilePtrOutputWithContext(ctx context.Context) LabPlanNetworkProfilePtrOutput {
	return o
}

func (o LabPlanNetworkProfilePtrOutput) Elem() LabPlanNetworkProfileOutput {
	return o.ApplyT(func(v *LabPlanNetworkProfile) LabPlanNetworkProfile {
		if v != nil {
			return *v
		}
		var ret LabPlanNetworkProfile
		return ret
	}).(LabPlanNetworkProfileOutput)
}

// The external subnet resource id
func (o LabPlanNetworkProfilePtrOutput) SubnetId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LabPlanNetworkProfile) *string {
		if v == nil {
			return nil
		}
		return v.SubnetId
	}).(pulumi.StringPtrOutput)
}

// Profile for how to handle networking for Lab Plans.
type LabPlanNetworkProfileResponse struct {
	// The external subnet resource id
	SubnetId *string `pulumi:"subnetId"`
}

// Profile for how to handle networking for Lab Plans.
type LabPlanNetworkProfileResponseOutput struct{ *pulumi.OutputState }

func (LabPlanNetworkProfileResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LabPlanNetworkProfileResponse)(nil)).Elem()
}

func (o LabPlanNetworkProfileResponseOutput) ToLabPlanNetworkProfileResponseOutput() LabPlanNetworkProfileResponseOutput {
	return o
}

func (o LabPlanNetworkProfileResponseOutput) ToLabPlanNetworkProfileResponseOutputWithContext(ctx context.Context) LabPlanNetworkProfileResponseOutput {
	return o
}

// The external subnet resource id
func (o LabPlanNetworkProfileResponseOutput) SubnetId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LabPlanNetworkProfileResponse) *string { return v.SubnetId }).(pulumi.StringPtrOutput)
}

type LabPlanNetworkProfileResponsePtrOutput struct{ *pulumi.OutputState }

func (LabPlanNetworkProfileResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LabPlanNetworkProfileResponse)(nil)).Elem()
}

func (o LabPlanNetworkProfileResponsePtrOutput) ToLabPlanNetworkProfileResponsePtrOutput() LabPlanNetworkProfileResponsePtrOutput {
	return o
}

func (o LabPlanNetworkProfileResponsePtrOutput) ToLabPlanNetworkProfileResponsePtrOutputWithContext(ctx context.Context) LabPlanNetworkProfileResponsePtrOutput {
	return o
}

func (o LabPlanNetworkProfileResponsePtrOutput) Elem() LabPlanNetworkProfileResponseOutput {
	return o.ApplyT(func(v *LabPlanNetworkProfileResponse) LabPlanNetworkProfileResponse {
		if v != nil {
			return *v
		}
		var ret LabPlanNetworkProfileResponse
		return ret
	}).(LabPlanNetworkProfileResponseOutput)
}

// The external subnet resource id
func (o LabPlanNetworkProfileResponsePtrOutput) SubnetId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LabPlanNetworkProfileResponse) *string {
		if v == nil {
			return nil
		}
		return v.SubnetId
	}).(pulumi.StringPtrOutput)
}

// Details of the status of an operation.
type LatestOperationResultResponse struct {
	// Error code on failure.
	ErrorCode string `pulumi:"errorCode"`
	// The error message.
	ErrorMessage string `pulumi:"errorMessage"`
	// The HttpMethod - PUT/POST/DELETE for the operation.
	HttpMethod string `pulumi:"httpMethod"`
	// The URL to use to check long-running operation status
	OperationUrl string `pulumi:"operationUrl"`
	// Request URI of the operation.
	RequestUri string `pulumi:"requestUri"`
	// The current status of the operation.
	Status string `pulumi:"status"`
}

// Details of the status of an operation.
type LatestOperationResultResponseOutput struct{ *pulumi.OutputState }

func (LatestOperationResultResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LatestOperationResultResponse)(nil)).Elem()
}

func (o LatestOperationResultResponseOutput) ToLatestOperationResultResponseOutput() LatestOperationResultResponseOutput {
	return o
}

func (o LatestOperationResultResponseOutput) ToLatestOperationResultResponseOutputWithContext(ctx context.Context) LatestOperationResultResponseOutput {
	return o
}

// Error code on failure.
func (o LatestOperationResultResponseOutput) ErrorCode() pulumi.StringOutput {
	return o.ApplyT(func(v LatestOperationResultResponse) string { return v.ErrorCode }).(pulumi.StringOutput)
}

// The error message.
func (o LatestOperationResultResponseOutput) ErrorMessage() pulumi.StringOutput {
	return o.ApplyT(func(v LatestOperationResultResponse) string { return v.ErrorMessage }).(pulumi.StringOutput)
}

// The HttpMethod - PUT/POST/DELETE for the operation.
func (o LatestOperationResultResponseOutput) HttpMethod() pulumi.StringOutput {
	return o.ApplyT(func(v LatestOperationResultResponse) string { return v.HttpMethod }).(pulumi.StringOutput)
}

// The URL to use to check long-running operation status
func (o LatestOperationResultResponseOutput) OperationUrl() pulumi.StringOutput {
	return o.ApplyT(func(v LatestOperationResultResponse) string { return v.OperationUrl }).(pulumi.StringOutput)
}

// Request URI of the operation.
func (o LatestOperationResultResponseOutput) RequestUri() pulumi.StringOutput {
	return o.ApplyT(func(v LatestOperationResultResponse) string { return v.RequestUri }).(pulumi.StringOutput)
}

// The current status of the operation.
func (o LatestOperationResultResponseOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v LatestOperationResultResponse) string { return v.Status }).(pulumi.StringOutput)
}

// Network details of the environment
type NetworkInterfaceResponse struct {
	// PrivateIp address of the Compute VM
	PrivateIpAddress string `pulumi:"privateIpAddress"`
	// Connection information for Windows
	RdpAuthority string `pulumi:"rdpAuthority"`
	// Connection information for Linux
	SshAuthority string `pulumi:"sshAuthority"`
	// Username of the VM
	Username string `pulumi:"username"`
}

// Network details of the environment
type NetworkInterfaceResponseOutput struct{ *pulumi.OutputState }

func (NetworkInterfaceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworkInterfaceResponse)(nil)).Elem()
}

func (o NetworkInterfaceResponseOutput) ToNetworkInterfaceResponseOutput() NetworkInterfaceResponseOutput {
	return o
}

func (o NetworkInterfaceResponseOutput) ToNetworkInterfaceResponseOutputWithContext(ctx context.Context) NetworkInterfaceResponseOutput {
	return o
}

// PrivateIp address of the Compute VM
func (o NetworkInterfaceResponseOutput) PrivateIpAddress() pulumi.StringOutput {
	return o.ApplyT(func(v NetworkInterfaceResponse) string { return v.PrivateIpAddress }).(pulumi.StringOutput)
}

// Connection information for Windows
func (o NetworkInterfaceResponseOutput) RdpAuthority() pulumi.StringOutput {
	return o.ApplyT(func(v NetworkInterfaceResponse) string { return v.RdpAuthority }).(pulumi.StringOutput)
}

// Connection information for Linux
func (o NetworkInterfaceResponseOutput) SshAuthority() pulumi.StringOutput {
	return o.ApplyT(func(v NetworkInterfaceResponse) string { return v.SshAuthority }).(pulumi.StringOutput)
}

// Username of the VM
func (o NetworkInterfaceResponseOutput) Username() pulumi.StringOutput {
	return o.ApplyT(func(v NetworkInterfaceResponse) string { return v.Username }).(pulumi.StringOutput)
}

// Represents the status of an operation that used the batch API.
type OperationBatchStatusResponseItemResponse struct {
	// status of the long running operation for an environment
	OperationUrl string `pulumi:"operationUrl"`
	// status of the long running operation for an environment
	Status string `pulumi:"status"`
}

// Represents the status of an operation that used the batch API.
type OperationBatchStatusResponseItemResponseOutput struct{ *pulumi.OutputState }

func (OperationBatchStatusResponseItemResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OperationBatchStatusResponseItemResponse)(nil)).Elem()
}

func (o OperationBatchStatusResponseItemResponseOutput) ToOperationBatchStatusResponseItemResponseOutput() OperationBatchStatusResponseItemResponseOutput {
	return o
}

func (o OperationBatchStatusResponseItemResponseOutput) ToOperationBatchStatusResponseItemResponseOutputWithContext(ctx context.Context) OperationBatchStatusResponseItemResponseOutput {
	return o
}

// status of the long running operation for an environment
func (o OperationBatchStatusResponseItemResponseOutput) OperationUrl() pulumi.StringOutput {
	return o.ApplyT(func(v OperationBatchStatusResponseItemResponse) string { return v.OperationUrl }).(pulumi.StringOutput)
}

// status of the long running operation for an environment
func (o OperationBatchStatusResponseItemResponseOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v OperationBatchStatusResponseItemResponse) string { return v.Status }).(pulumi.StringOutput)
}

type OperationBatchStatusResponseItemResponseArrayOutput struct{ *pulumi.OutputState }

func (OperationBatchStatusResponseItemResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]OperationBatchStatusResponseItemResponse)(nil)).Elem()
}

func (o OperationBatchStatusResponseItemResponseArrayOutput) ToOperationBatchStatusResponseItemResponseArrayOutput() OperationBatchStatusResponseItemResponseArrayOutput {
	return o
}

func (o OperationBatchStatusResponseItemResponseArrayOutput) ToOperationBatchStatusResponseItemResponseArrayOutputWithContext(ctx context.Context) OperationBatchStatusResponseItemResponseArrayOutput {
	return o
}

func (o OperationBatchStatusResponseItemResponseArrayOutput) Index(i pulumi.IntInput) OperationBatchStatusResponseItemResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) OperationBatchStatusResponseItemResponse {
		return vs[0].([]OperationBatchStatusResponseItemResponse)[vs[1].(int)]
	}).(OperationBatchStatusResponseItemResponseOutput)
}

// Recurrence pattern of a lab schedule.
type RecurrencePattern struct {
	// When the recurrence will expire. This date is inclusive.
	ExpirationDate string `pulumi:"expirationDate"`
	// The frequency of the recurrence.
	Frequency RecurrenceFrequency `pulumi:"frequency"`
	// The interval to invoke the schedule on. For example, interval = 2 and RecurrenceFrequency.Daily will run every 2 days. When no interval is supplied, an interval of 1 is used.
	Interval *int `pulumi:"interval"`
	// The week days the schedule runs. Used for when the Frequency is set to Weekly.
	WeekDays []WeekDay `pulumi:"weekDays"`
}

// RecurrencePatternInput is an input type that accepts RecurrencePatternArgs and RecurrencePatternOutput values.
// You can construct a concrete instance of `RecurrencePatternInput` via:
//
//	RecurrencePatternArgs{...}
type RecurrencePatternInput interface {
	pulumi.Input

	ToRecurrencePatternOutput() RecurrencePatternOutput
	ToRecurrencePatternOutputWithContext(context.Context) RecurrencePatternOutput
}

// Recurrence pattern of a lab schedule.
type RecurrencePatternArgs struct {
	// When the recurrence will expire. This date is inclusive.
	ExpirationDate pulumi.StringInput `pulumi:"expirationDate"`
	// The frequency of the recurrence.
	Frequency RecurrenceFrequencyInput `pulumi:"frequency"`
	// The interval to invoke the schedule on. For example, interval = 2 and RecurrenceFrequency.Daily will run every 2 days. When no interval is supplied, an interval of 1 is used.
	Interval pulumi.IntPtrInput `pulumi:"interval"`
	// The week days the schedule runs. Used for when the Frequency is set to Weekly.
	WeekDays WeekDayArrayInput `pulumi:"weekDays"`
}

func (RecurrencePatternArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RecurrencePattern)(nil)).Elem()
}

func (i RecurrencePatternArgs) ToRecurrencePatternOutput() RecurrencePatternOutput {
	return i.ToRecurrencePatternOutputWithContext(context.Background())
}

func (i RecurrencePatternArgs) ToRecurrencePatternOutputWithContext(ctx context.Context) RecurrencePatternOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RecurrencePatternOutput)
}

func (i RecurrencePatternArgs) ToRecurrencePatternPtrOutput() RecurrencePatternPtrOutput {
	return i.ToRecurrencePatternPtrOutputWithContext(context.Background())
}

func (i RecurrencePatternArgs) ToRecurrencePatternPtrOutputWithContext(ctx context.Context) RecurrencePatternPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RecurrencePatternOutput).ToRecurrencePatternPtrOutputWithContext(ctx)
}

// RecurrencePatternPtrInput is an input type that accepts RecurrencePatternArgs, RecurrencePatternPtr and RecurrencePatternPtrOutput values.
// You can construct a concrete instance of `RecurrencePatternPtrInput` via:
//
//	        RecurrencePatternArgs{...}
//
//	or:
//
//	        nil
type RecurrencePatternPtrInput interface {
	pulumi.Input

	ToRecurrencePatternPtrOutput() RecurrencePatternPtrOutput
	ToRecurrencePatternPtrOutputWithContext(context.Context) RecurrencePatternPtrOutput
}

type recurrencePatternPtrType RecurrencePatternArgs

func RecurrencePatternPtr(v *RecurrencePatternArgs) RecurrencePatternPtrInput {
	return (*recurrencePatternPtrType)(v)
}

func (*recurrencePatternPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RecurrencePattern)(nil)).Elem()
}

func (i *recurrencePatternPtrType) ToRecurrencePatternPtrOutput() RecurrencePatternPtrOutput {
	return i.ToRecurrencePatternPtrOutputWithContext(context.Background())
}

func (i *recurrencePatternPtrType) ToRecurrencePatternPtrOutputWithContext(ctx context.Context) RecurrencePatternPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RecurrencePatternPtrOutput)
}

// Recurrence pattern of a lab schedule.
type RecurrencePatternOutput struct{ *pulumi.OutputState }

func (RecurrencePatternOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RecurrencePattern)(nil)).Elem()
}

func (o RecurrencePatternOutput) ToRecurrencePatternOutput() RecurrencePatternOutput {
	return o
}

func (o RecurrencePatternOutput) ToRecurrencePatternOutputWithContext(ctx context.Context) RecurrencePatternOutput {
	return o
}

func (o RecurrencePatternOutput) ToRecurrencePatternPtrOutput() RecurrencePatternPtrOutput {
	return o.ToRecurrencePatternPtrOutputWithContext(context.Background())
}

func (o RecurrencePatternOutput) ToRecurrencePatternPtrOutputWithContext(ctx context.Context) RecurrencePatternPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RecurrencePattern) *RecurrencePattern {
		return &v
	}).(RecurrencePatternPtrOutput)
}

// When the recurrence will expire. This date is inclusive.
func (o RecurrencePatternOutput) ExpirationDate() pulumi.StringOutput {
	return o.ApplyT(func(v RecurrencePattern) string { return v.ExpirationDate }).(pulumi.StringOutput)
}

// The frequency of the recurrence.
func (o RecurrencePatternOutput) Frequency() RecurrenceFrequencyOutput {
	return o.ApplyT(func(v RecurrencePattern) RecurrenceFrequency { return v.Frequency }).(RecurrenceFrequencyOutput)
}

// The interval to invoke the schedule on. For example, interval = 2 and RecurrenceFrequency.Daily will run every 2 days. When no interval is supplied, an interval of 1 is used.
func (o RecurrencePatternOutput) Interval() pulumi.IntPtrOutput {
	return o.ApplyT(func(v RecurrencePattern) *int { return v.Interval }).(pulumi.IntPtrOutput)
}

// The week days the schedule runs. Used for when the Frequency is set to Weekly.
func (o RecurrencePatternOutput) WeekDays() WeekDayArrayOutput {
	return o.ApplyT(func(v RecurrencePattern) []WeekDay { return v.WeekDays }).(WeekDayArrayOutput)
}

type RecurrencePatternPtrOutput struct{ *pulumi.OutputState }

func (RecurrencePatternPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RecurrencePattern)(nil)).Elem()
}

func (o RecurrencePatternPtrOutput) ToRecurrencePatternPtrOutput() RecurrencePatternPtrOutput {
	return o
}

func (o RecurrencePatternPtrOutput) ToRecurrencePatternPtrOutputWithContext(ctx context.Context) RecurrencePatternPtrOutput {
	return o
}

func (o RecurrencePatternPtrOutput) Elem() RecurrencePatternOutput {
	return o.ApplyT(func(v *RecurrencePattern) RecurrencePattern {
		if v != nil {
			return *v
		}
		var ret RecurrencePattern
		return ret
	}).(RecurrencePatternOutput)
}

// When the recurrence will expire. This date is inclusive.
func (o RecurrencePatternPtrOutput) ExpirationDate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RecurrencePattern) *string {
		if v == nil {
			return nil
		}
		return &v.ExpirationDate
	}).(pulumi.StringPtrOutput)
}

// The frequency of the recurrence.
func (o RecurrencePatternPtrOutput) Frequency() RecurrenceFrequencyPtrOutput {
	return o.ApplyT(func(v *RecurrencePattern) *RecurrenceFrequency {
		if v == nil {
			return nil
		}
		return &v.Frequency
	}).(RecurrenceFrequencyPtrOutput)
}

// The interval to invoke the schedule on. For example, interval = 2 and RecurrenceFrequency.Daily will run every 2 days. When no interval is supplied, an interval of 1 is used.
func (o RecurrencePatternPtrOutput) Interval() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *RecurrencePattern) *int {
		if v == nil {
			return nil
		}
		return v.Interval
	}).(pulumi.IntPtrOutput)
}

// The week days the schedule runs. Used for when the Frequency is set to Weekly.
func (o RecurrencePatternPtrOutput) WeekDays() WeekDayArrayOutput {
	return o.ApplyT(func(v *RecurrencePattern) []WeekDay {
		if v == nil {
			return nil
		}
		return v.WeekDays
	}).(WeekDayArrayOutput)
}

// Recurrence pattern of a lab schedule.
type RecurrencePatternResponse struct {
	// When the recurrence will expire. This date is inclusive.
	ExpirationDate string `pulumi:"expirationDate"`
	// The frequency of the recurrence.
	Frequency string `pulumi:"frequency"`
	// The interval to invoke the schedule on. For example, interval = 2 and RecurrenceFrequency.Daily will run every 2 days. When no interval is supplied, an interval of 1 is used.
	Interval *int `pulumi:"interval"`
	// The week days the schedule runs. Used for when the Frequency is set to Weekly.
	WeekDays []string `pulumi:"weekDays"`
}

// Recurrence pattern of a lab schedule.
type RecurrencePatternResponseOutput struct{ *pulumi.OutputState }

func (RecurrencePatternResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RecurrencePatternResponse)(nil)).Elem()
}

func (o RecurrencePatternResponseOutput) ToRecurrencePatternResponseOutput() RecurrencePatternResponseOutput {
	return o
}

func (o RecurrencePatternResponseOutput) ToRecurrencePatternResponseOutputWithContext(ctx context.Context) RecurrencePatternResponseOutput {
	return o
}

// When the recurrence will expire. This date is inclusive.
func (o RecurrencePatternResponseOutput) ExpirationDate() pulumi.StringOutput {
	return o.ApplyT(func(v RecurrencePatternResponse) string { return v.ExpirationDate }).(pulumi.StringOutput)
}

// The frequency of the recurrence.
func (o RecurrencePatternResponseOutput) Frequency() pulumi.StringOutput {
	return o.ApplyT(func(v RecurrencePatternResponse) string { return v.Frequency }).(pulumi.StringOutput)
}

// The interval to invoke the schedule on. For example, interval = 2 and RecurrenceFrequency.Daily will run every 2 days. When no interval is supplied, an interval of 1 is used.
func (o RecurrencePatternResponseOutput) Interval() pulumi.IntPtrOutput {
	return o.ApplyT(func(v RecurrencePatternResponse) *int { return v.Interval }).(pulumi.IntPtrOutput)
}

// The week days the schedule runs. Used for when the Frequency is set to Weekly.
func (o RecurrencePatternResponseOutput) WeekDays() pulumi.StringArrayOutput {
	return o.ApplyT(func(v RecurrencePatternResponse) []string { return v.WeekDays }).(pulumi.StringArrayOutput)
}

type RecurrencePatternResponsePtrOutput struct{ *pulumi.OutputState }

func (RecurrencePatternResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RecurrencePatternResponse)(nil)).Elem()
}

func (o RecurrencePatternResponsePtrOutput) ToRecurrencePatternResponsePtrOutput() RecurrencePatternResponsePtrOutput {
	return o
}

func (o RecurrencePatternResponsePtrOutput) ToRecurrencePatternResponsePtrOutputWithContext(ctx context.Context) RecurrencePatternResponsePtrOutput {
	return o
}

func (o RecurrencePatternResponsePtrOutput) Elem() RecurrencePatternResponseOutput {
	return o.ApplyT(func(v *RecurrencePatternResponse) RecurrencePatternResponse {
		if v != nil {
			return *v
		}
		var ret RecurrencePatternResponse
		return ret
	}).(RecurrencePatternResponseOutput)
}

// When the recurrence will expire. This date is inclusive.
func (o RecurrencePatternResponsePtrOutput) ExpirationDate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RecurrencePatternResponse) *string {
		if v == nil {
			return nil
		}
		return &v.ExpirationDate
	}).(pulumi.StringPtrOutput)
}

// The frequency of the recurrence.
func (o RecurrencePatternResponsePtrOutput) Frequency() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RecurrencePatternResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Frequency
	}).(pulumi.StringPtrOutput)
}

// The interval to invoke the schedule on. For example, interval = 2 and RecurrenceFrequency.Daily will run every 2 days. When no interval is supplied, an interval of 1 is used.
func (o RecurrencePatternResponsePtrOutput) Interval() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *RecurrencePatternResponse) *int {
		if v == nil {
			return nil
		}
		return v.Interval
	}).(pulumi.IntPtrOutput)
}

// The week days the schedule runs. Used for when the Frequency is set to Weekly.
func (o RecurrencePatternResponsePtrOutput) WeekDays() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *RecurrencePatternResponse) []string {
		if v == nil {
			return nil
		}
		return v.WeekDays
	}).(pulumi.StringArrayOutput)
}

// Details of a Reference Vm
type ReferenceVm struct {
	// The password of the virtual machine. This will be set to null in GET resource API
	Password *string `pulumi:"password"`
	// The username of the virtual machine
	UserName string `pulumi:"userName"`
}

// ReferenceVmInput is an input type that accepts ReferenceVmArgs and ReferenceVmOutput values.
// You can construct a concrete instance of `ReferenceVmInput` via:
//
//	ReferenceVmArgs{...}
type ReferenceVmInput interface {
	pulumi.Input

	ToReferenceVmOutput() ReferenceVmOutput
	ToReferenceVmOutputWithContext(context.Context) ReferenceVmOutput
}

// Details of a Reference Vm
type ReferenceVmArgs struct {
	// The password of the virtual machine. This will be set to null in GET resource API
	Password pulumi.StringPtrInput `pulumi:"password"`
	// The username of the virtual machine
	UserName pulumi.StringInput `pulumi:"userName"`
}

func (ReferenceVmArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ReferenceVm)(nil)).Elem()
}

func (i ReferenceVmArgs) ToReferenceVmOutput() ReferenceVmOutput {
	return i.ToReferenceVmOutputWithContext(context.Background())
}

func (i ReferenceVmArgs) ToReferenceVmOutputWithContext(ctx context.Context) ReferenceVmOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReferenceVmOutput)
}

// Details of a Reference Vm
type ReferenceVmOutput struct{ *pulumi.OutputState }

func (ReferenceVmOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ReferenceVm)(nil)).Elem()
}

func (o ReferenceVmOutput) ToReferenceVmOutput() ReferenceVmOutput {
	return o
}

func (o ReferenceVmOutput) ToReferenceVmOutputWithContext(ctx context.Context) ReferenceVmOutput {
	return o
}

// The password of the virtual machine. This will be set to null in GET resource API
func (o ReferenceVmOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ReferenceVm) *string { return v.Password }).(pulumi.StringPtrOutput)
}

// The username of the virtual machine
func (o ReferenceVmOutput) UserName() pulumi.StringOutput {
	return o.ApplyT(func(v ReferenceVm) string { return v.UserName }).(pulumi.StringOutput)
}

// Details of a Reference Vm
type ReferenceVmResponse struct {
	// The password of the virtual machine. This will be set to null in GET resource API
	Password *string `pulumi:"password"`
	// The username of the virtual machine
	UserName string `pulumi:"userName"`
	// VM resource Id for the environment
	VmResourceId string `pulumi:"vmResourceId"`
	// The state details for the reference virtual machine.
	VmStateDetails VmStateDetailsResponse `pulumi:"vmStateDetails"`
}

// Details of a Reference Vm
type ReferenceVmResponseOutput struct{ *pulumi.OutputState }

func (ReferenceVmResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ReferenceVmResponse)(nil)).Elem()
}

func (o ReferenceVmResponseOutput) ToReferenceVmResponseOutput() ReferenceVmResponseOutput {
	return o
}

func (o ReferenceVmResponseOutput) ToReferenceVmResponseOutputWithContext(ctx context.Context) ReferenceVmResponseOutput {
	return o
}

// The password of the virtual machine. This will be set to null in GET resource API
func (o ReferenceVmResponseOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ReferenceVmResponse) *string { return v.Password }).(pulumi.StringPtrOutput)
}

// The username of the virtual machine
func (o ReferenceVmResponseOutput) UserName() pulumi.StringOutput {
	return o.ApplyT(func(v ReferenceVmResponse) string { return v.UserName }).(pulumi.StringOutput)
}

// VM resource Id for the environment
func (o ReferenceVmResponseOutput) VmResourceId() pulumi.StringOutput {
	return o.ApplyT(func(v ReferenceVmResponse) string { return v.VmResourceId }).(pulumi.StringOutput)
}

// The state details for the reference virtual machine.
func (o ReferenceVmResponseOutput) VmStateDetails() VmStateDetailsResponseOutput {
	return o.ApplyT(func(v ReferenceVmResponse) VmStateDetailsResponse { return v.VmStateDetails }).(VmStateDetailsResponseOutput)
}

// The availability information of sizes across regions
type RegionalAvailabilityResponse struct {
	// Corresponding region
	Region *string `pulumi:"region"`
	// List of all the size information for the region
	SizeAvailabilities []SizeAvailabilityResponse `pulumi:"sizeAvailabilities"`
}

// The availability information of sizes across regions
type RegionalAvailabilityResponseOutput struct{ *pulumi.OutputState }

func (RegionalAvailabilityResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RegionalAvailabilityResponse)(nil)).Elem()
}

func (o RegionalAvailabilityResponseOutput) ToRegionalAvailabilityResponseOutput() RegionalAvailabilityResponseOutput {
	return o
}

func (o RegionalAvailabilityResponseOutput) ToRegionalAvailabilityResponseOutputWithContext(ctx context.Context) RegionalAvailabilityResponseOutput {
	return o
}

// Corresponding region
func (o RegionalAvailabilityResponseOutput) Region() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RegionalAvailabilityResponse) *string { return v.Region }).(pulumi.StringPtrOutput)
}

// List of all the size information for the region
func (o RegionalAvailabilityResponseOutput) SizeAvailabilities() SizeAvailabilityResponseArrayOutput {
	return o.ApplyT(func(v RegionalAvailabilityResponse) []SizeAvailabilityResponse { return v.SizeAvailabilities }).(SizeAvailabilityResponseArrayOutput)
}

type RegionalAvailabilityResponseArrayOutput struct{ *pulumi.OutputState }

func (RegionalAvailabilityResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RegionalAvailabilityResponse)(nil)).Elem()
}

func (o RegionalAvailabilityResponseArrayOutput) ToRegionalAvailabilityResponseArrayOutput() RegionalAvailabilityResponseArrayOutput {
	return o
}

func (o RegionalAvailabilityResponseArrayOutput) ToRegionalAvailabilityResponseArrayOutputWithContext(ctx context.Context) RegionalAvailabilityResponseArrayOutput {
	return o
}

func (o RegionalAvailabilityResponseArrayOutput) Index(i pulumi.IntInput) RegionalAvailabilityResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) RegionalAvailabilityResponse {
		return vs[0].([]RegionalAvailabilityResponse)[vs[1].(int)]
	}).(RegionalAvailabilityResponseOutput)
}

// Represents a VM and the setting Id it was created for.
type ResourceSet struct {
	// resourceSettingId for the environment
	ResourceSettingId *string `pulumi:"resourceSettingId"`
	// VM resource Id for the environment
	VmResourceId *string `pulumi:"vmResourceId"`
}

// ResourceSetInput is an input type that accepts ResourceSetArgs and ResourceSetOutput values.
// You can construct a concrete instance of `ResourceSetInput` via:
//
//	ResourceSetArgs{...}
type ResourceSetInput interface {
	pulumi.Input

	ToResourceSetOutput() ResourceSetOutput
	ToResourceSetOutputWithContext(context.Context) ResourceSetOutput
}

// Represents a VM and the setting Id it was created for.
type ResourceSetArgs struct {
	// resourceSettingId for the environment
	ResourceSettingId pulumi.StringPtrInput `pulumi:"resourceSettingId"`
	// VM resource Id for the environment
	VmResourceId pulumi.StringPtrInput `pulumi:"vmResourceId"`
}

func (ResourceSetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceSet)(nil)).Elem()
}

func (i ResourceSetArgs) ToResourceSetOutput() ResourceSetOutput {
	return i.ToResourceSetOutputWithContext(context.Background())
}

func (i ResourceSetArgs) ToResourceSetOutputWithContext(ctx context.Context) ResourceSetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceSetOutput)
}

func (i ResourceSetArgs) ToResourceSetPtrOutput() ResourceSetPtrOutput {
	return i.ToResourceSetPtrOutputWithContext(context.Background())
}

func (i ResourceSetArgs) ToResourceSetPtrOutputWithContext(ctx context.Context) ResourceSetPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceSetOutput).ToResourceSetPtrOutputWithContext(ctx)
}

// ResourceSetPtrInput is an input type that accepts ResourceSetArgs, ResourceSetPtr and ResourceSetPtrOutput values.
// You can construct a concrete instance of `ResourceSetPtrInput` via:
//
//	        ResourceSetArgs{...}
//
//	or:
//
//	        nil
type ResourceSetPtrInput interface {
	pulumi.Input

	ToResourceSetPtrOutput() ResourceSetPtrOutput
	ToResourceSetPtrOutputWithContext(context.Context) ResourceSetPtrOutput
}

type resourceSetPtrType ResourceSetArgs

func ResourceSetPtr(v *ResourceSetArgs) ResourceSetPtrInput {
	return (*resourceSetPtrType)(v)
}

func (*resourceSetPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ResourceSet)(nil)).Elem()
}

func (i *resourceSetPtrType) ToResourceSetPtrOutput() ResourceSetPtrOutput {
	return i.ToResourceSetPtrOutputWithContext(context.Background())
}

func (i *resourceSetPtrType) ToResourceSetPtrOutputWithContext(ctx context.Context) ResourceSetPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceSetPtrOutput)
}

// Represents a VM and the setting Id it was created for.
type ResourceSetOutput struct{ *pulumi.OutputState }

func (ResourceSetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceSet)(nil)).Elem()
}

func (o ResourceSetOutput) ToResourceSetOutput() ResourceSetOutput {
	return o
}

func (o ResourceSetOutput) ToResourceSetOutputWithContext(ctx context.Context) ResourceSetOutput {
	return o
}

func (o ResourceSetOutput) ToResourceSetPtrOutput() ResourceSetPtrOutput {
	return o.ToResourceSetPtrOutputWithContext(context.Background())
}

func (o ResourceSetOutput) ToResourceSetPtrOutputWithContext(ctx context.Context) ResourceSetPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ResourceSet) *ResourceSet {
		return &v
	}).(ResourceSetPtrOutput)
}

// resourceSettingId for the environment
func (o ResourceSetOutput) ResourceSettingId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceSet) *string { return v.ResourceSettingId }).(pulumi.StringPtrOutput)
}

// VM resource Id for the environment
func (o ResourceSetOutput) VmResourceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceSet) *string { return v.VmResourceId }).(pulumi.StringPtrOutput)
}

type ResourceSetPtrOutput struct{ *pulumi.OutputState }

func (ResourceSetPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ResourceSet)(nil)).Elem()
}

func (o ResourceSetPtrOutput) ToResourceSetPtrOutput() ResourceSetPtrOutput {
	return o
}

func (o ResourceSetPtrOutput) ToResourceSetPtrOutputWithContext(ctx context.Context) ResourceSetPtrOutput {
	return o
}

func (o ResourceSetPtrOutput) Elem() ResourceSetOutput {
	return o.ApplyT(func(v *ResourceSet) ResourceSet {
		if v != nil {
			return *v
		}
		var ret ResourceSet
		return ret
	}).(ResourceSetOutput)
}

// resourceSettingId for the environment
func (o ResourceSetPtrOutput) ResourceSettingId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceSet) *string {
		if v == nil {
			return nil
		}
		return v.ResourceSettingId
	}).(pulumi.StringPtrOutput)
}

// VM resource Id for the environment
func (o ResourceSetPtrOutput) VmResourceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceSet) *string {
		if v == nil {
			return nil
		}
		return v.VmResourceId
	}).(pulumi.StringPtrOutput)
}

// Represents a VM and the setting Id it was created for.
type ResourceSetResponse struct {
	// resourceSettingId for the environment
	ResourceSettingId *string `pulumi:"resourceSettingId"`
	// VM resource Id for the environment
	VmResourceId *string `pulumi:"vmResourceId"`
}

// Represents a VM and the setting Id it was created for.
type ResourceSetResponseOutput struct{ *pulumi.OutputState }

func (ResourceSetResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceSetResponse)(nil)).Elem()
}

func (o ResourceSetResponseOutput) ToResourceSetResponseOutput() ResourceSetResponseOutput {
	return o
}

func (o ResourceSetResponseOutput) ToResourceSetResponseOutputWithContext(ctx context.Context) ResourceSetResponseOutput {
	return o
}

// resourceSettingId for the environment
func (o ResourceSetResponseOutput) ResourceSettingId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceSetResponse) *string { return v.ResourceSettingId }).(pulumi.StringPtrOutput)
}

// VM resource Id for the environment
func (o ResourceSetResponseOutput) VmResourceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceSetResponse) *string { return v.VmResourceId }).(pulumi.StringPtrOutput)
}

type ResourceSetResponsePtrOutput struct{ *pulumi.OutputState }

func (ResourceSetResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ResourceSetResponse)(nil)).Elem()
}

func (o ResourceSetResponsePtrOutput) ToResourceSetResponsePtrOutput() ResourceSetResponsePtrOutput {
	return o
}

func (o ResourceSetResponsePtrOutput) ToResourceSetResponsePtrOutputWithContext(ctx context.Context) ResourceSetResponsePtrOutput {
	return o
}

func (o ResourceSetResponsePtrOutput) Elem() ResourceSetResponseOutput {
	return o.ApplyT(func(v *ResourceSetResponse) ResourceSetResponse {
		if v != nil {
			return *v
		}
		var ret ResourceSetResponse
		return ret
	}).(ResourceSetResponseOutput)
}

// resourceSettingId for the environment
func (o ResourceSetResponsePtrOutput) ResourceSettingId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceSetResponse) *string {
		if v == nil {
			return nil
		}
		return v.ResourceSettingId
	}).(pulumi.StringPtrOutput)
}

// VM resource Id for the environment
func (o ResourceSetResponsePtrOutput) VmResourceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceSetResponse) *string {
		if v == nil {
			return nil
		}
		return v.VmResourceId
	}).(pulumi.StringPtrOutput)
}

// Represents resource specific settings
type ResourceSettings struct {
	// The resource id of the gallery image used for creating the virtual machine
	GalleryImageResourceId *string `pulumi:"galleryImageResourceId"`
	// Details specific to Reference Vm
	ReferenceVm ReferenceVm `pulumi:"referenceVm"`
	// The size of the virtual machine
	Size *string `pulumi:"size"`
}

// ResourceSettingsInput is an input type that accepts ResourceSettingsArgs and ResourceSettingsOutput values.
// You can construct a concrete instance of `ResourceSettingsInput` via:
//
//	ResourceSettingsArgs{...}
type ResourceSettingsInput interface {
	pulumi.Input

	ToResourceSettingsOutput() ResourceSettingsOutput
	ToResourceSettingsOutputWithContext(context.Context) ResourceSettingsOutput
}

// Represents resource specific settings
type ResourceSettingsArgs struct {
	// The resource id of the gallery image used for creating the virtual machine
	GalleryImageResourceId pulumi.StringPtrInput `pulumi:"galleryImageResourceId"`
	// Details specific to Reference Vm
	ReferenceVm ReferenceVmInput `pulumi:"referenceVm"`
	// The size of the virtual machine
	Size pulumi.StringPtrInput `pulumi:"size"`
}

func (ResourceSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceSettings)(nil)).Elem()
}

func (i ResourceSettingsArgs) ToResourceSettingsOutput() ResourceSettingsOutput {
	return i.ToResourceSettingsOutputWithContext(context.Background())
}

func (i ResourceSettingsArgs) ToResourceSettingsOutputWithContext(ctx context.Context) ResourceSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceSettingsOutput)
}

// Represents resource specific settings
type ResourceSettingsOutput struct{ *pulumi.OutputState }

func (ResourceSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceSettings)(nil)).Elem()
}

func (o ResourceSettingsOutput) ToResourceSettingsOutput() ResourceSettingsOutput {
	return o
}

func (o ResourceSettingsOutput) ToResourceSettingsOutputWithContext(ctx context.Context) ResourceSettingsOutput {
	return o
}

// The resource id of the gallery image used for creating the virtual machine
func (o ResourceSettingsOutput) GalleryImageResourceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceSettings) *string { return v.GalleryImageResourceId }).(pulumi.StringPtrOutput)
}

// Details specific to Reference Vm
func (o ResourceSettingsOutput) ReferenceVm() ReferenceVmOutput {
	return o.ApplyT(func(v ResourceSettings) ReferenceVm { return v.ReferenceVm }).(ReferenceVmOutput)
}

// The size of the virtual machine
func (o ResourceSettingsOutput) Size() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceSettings) *string { return v.Size }).(pulumi.StringPtrOutput)
}

// Represents resource specific settings
type ResourceSettingsResponse struct {
	// The translated compute cores of the virtual machine
	Cores int `pulumi:"cores"`
	// The resource id of the gallery image used for creating the virtual machine
	GalleryImageResourceId *string `pulumi:"galleryImageResourceId"`
	// The unique id of the resource setting
	Id string `pulumi:"id"`
	// The name of the image used to created the environment setting
	ImageName string `pulumi:"imageName"`
	// Details specific to Reference Vm
	ReferenceVm ReferenceVmResponse `pulumi:"referenceVm"`
	// The size of the virtual machine
	Size *string `pulumi:"size"`
}

// Represents resource specific settings
type ResourceSettingsResponseOutput struct{ *pulumi.OutputState }

func (ResourceSettingsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceSettingsResponse)(nil)).Elem()
}

func (o ResourceSettingsResponseOutput) ToResourceSettingsResponseOutput() ResourceSettingsResponseOutput {
	return o
}

func (o ResourceSettingsResponseOutput) ToResourceSettingsResponseOutputWithContext(ctx context.Context) ResourceSettingsResponseOutput {
	return o
}

// The translated compute cores of the virtual machine
func (o ResourceSettingsResponseOutput) Cores() pulumi.IntOutput {
	return o.ApplyT(func(v ResourceSettingsResponse) int { return v.Cores }).(pulumi.IntOutput)
}

// The resource id of the gallery image used for creating the virtual machine
func (o ResourceSettingsResponseOutput) GalleryImageResourceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceSettingsResponse) *string { return v.GalleryImageResourceId }).(pulumi.StringPtrOutput)
}

// The unique id of the resource setting
func (o ResourceSettingsResponseOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v ResourceSettingsResponse) string { return v.Id }).(pulumi.StringOutput)
}

// The name of the image used to created the environment setting
func (o ResourceSettingsResponseOutput) ImageName() pulumi.StringOutput {
	return o.ApplyT(func(v ResourceSettingsResponse) string { return v.ImageName }).(pulumi.StringOutput)
}

// Details specific to Reference Vm
func (o ResourceSettingsResponseOutput) ReferenceVm() ReferenceVmResponseOutput {
	return o.ApplyT(func(v ResourceSettingsResponse) ReferenceVmResponse { return v.ReferenceVm }).(ReferenceVmResponseOutput)
}

// The size of the virtual machine
func (o ResourceSettingsResponseOutput) Size() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceSettingsResponse) *string { return v.Size }).(pulumi.StringPtrOutput)
}

// Represents the size information
type SizeAvailabilityResponse struct {
	// Whether or not this size category is available
	IsAvailable *bool `pulumi:"isAvailable"`
	// The category of the size (Basic, Standard, Performance).
	SizeCategory *string `pulumi:"sizeCategory"`
}

// Represents the size information
type SizeAvailabilityResponseOutput struct{ *pulumi.OutputState }

func (SizeAvailabilityResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SizeAvailabilityResponse)(nil)).Elem()
}

func (o SizeAvailabilityResponseOutput) ToSizeAvailabilityResponseOutput() SizeAvailabilityResponseOutput {
	return o
}

func (o SizeAvailabilityResponseOutput) ToSizeAvailabilityResponseOutputWithContext(ctx context.Context) SizeAvailabilityResponseOutput {
	return o
}

// Whether or not this size category is available
func (o SizeAvailabilityResponseOutput) IsAvailable() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SizeAvailabilityResponse) *bool { return v.IsAvailable }).(pulumi.BoolPtrOutput)
}

// The category of the size (Basic, Standard, Performance).
func (o SizeAvailabilityResponseOutput) SizeCategory() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SizeAvailabilityResponse) *string { return v.SizeCategory }).(pulumi.StringPtrOutput)
}

type SizeAvailabilityResponseArrayOutput struct{ *pulumi.OutputState }

func (SizeAvailabilityResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SizeAvailabilityResponse)(nil)).Elem()
}

func (o SizeAvailabilityResponseArrayOutput) ToSizeAvailabilityResponseArrayOutput() SizeAvailabilityResponseArrayOutput {
	return o
}

func (o SizeAvailabilityResponseArrayOutput) ToSizeAvailabilityResponseArrayOutputWithContext(ctx context.Context) SizeAvailabilityResponseArrayOutput {
	return o
}

func (o SizeAvailabilityResponseArrayOutput) Index(i pulumi.IntInput) SizeAvailabilityResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SizeAvailabilityResponse {
		return vs[0].([]SizeAvailabilityResponse)[vs[1].(int)]
	}).(SizeAvailabilityResponseOutput)
}

// Represents the size configuration under the lab account
type SizeConfigurationPropertiesResponse struct {
	// Represents a list of size categories supported by this Lab Account (Small, Medium, Large)
	EnvironmentSizes []EnvironmentSizeResponse `pulumi:"environmentSizes"`
}

// Represents the size configuration under the lab account
type SizeConfigurationPropertiesResponseOutput struct{ *pulumi.OutputState }

func (SizeConfigurationPropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SizeConfigurationPropertiesResponse)(nil)).Elem()
}

func (o SizeConfigurationPropertiesResponseOutput) ToSizeConfigurationPropertiesResponseOutput() SizeConfigurationPropertiesResponseOutput {
	return o
}

func (o SizeConfigurationPropertiesResponseOutput) ToSizeConfigurationPropertiesResponseOutputWithContext(ctx context.Context) SizeConfigurationPropertiesResponseOutput {
	return o
}

// Represents a list of size categories supported by this Lab Account (Small, Medium, Large)
func (o SizeConfigurationPropertiesResponseOutput) EnvironmentSizes() EnvironmentSizeResponseArrayOutput {
	return o.ApplyT(func(v SizeConfigurationPropertiesResponse) []EnvironmentSizeResponse { return v.EnvironmentSizes }).(EnvironmentSizeResponseArrayOutput)
}

// Contains detailed information about a size
type SizeInfoResponse struct {
	// Represents the actual compute size, e.g. Standard_A2_v2.
	ComputeSize *string `pulumi:"computeSize"`
	// The amount of memory available (in GB).
	Memory *float64 `pulumi:"memory"`
	// The number of cores a VM of this size has.
	NumberOfCores *int `pulumi:"numberOfCores"`
	// The pay-as-you-go price per hour this size will cost. It does not include discounts and may not reflect the actual price the size will cost.
	Price *float64 `pulumi:"price"`
}

// Contains detailed information about a size
type SizeInfoResponseOutput struct{ *pulumi.OutputState }

func (SizeInfoResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SizeInfoResponse)(nil)).Elem()
}

func (o SizeInfoResponseOutput) ToSizeInfoResponseOutput() SizeInfoResponseOutput {
	return o
}

func (o SizeInfoResponseOutput) ToSizeInfoResponseOutputWithContext(ctx context.Context) SizeInfoResponseOutput {
	return o
}

// Represents the actual compute size, e.g. Standard_A2_v2.
func (o SizeInfoResponseOutput) ComputeSize() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SizeInfoResponse) *string { return v.ComputeSize }).(pulumi.StringPtrOutput)
}

// The amount of memory available (in GB).
func (o SizeInfoResponseOutput) Memory() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v SizeInfoResponse) *float64 { return v.Memory }).(pulumi.Float64PtrOutput)
}

// The number of cores a VM of this size has.
func (o SizeInfoResponseOutput) NumberOfCores() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SizeInfoResponse) *int { return v.NumberOfCores }).(pulumi.IntPtrOutput)
}

// The pay-as-you-go price per hour this size will cost. It does not include discounts and may not reflect the actual price the size will cost.
func (o SizeInfoResponseOutput) Price() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v SizeInfoResponse) *float64 { return v.Price }).(pulumi.Float64PtrOutput)
}

type SizeInfoResponseArrayOutput struct{ *pulumi.OutputState }

func (SizeInfoResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SizeInfoResponse)(nil)).Elem()
}

func (o SizeInfoResponseArrayOutput) ToSizeInfoResponseArrayOutput() SizeInfoResponseArrayOutput {
	return o
}

func (o SizeInfoResponseArrayOutput) ToSizeInfoResponseArrayOutputWithContext(ctx context.Context) SizeInfoResponseArrayOutput {
	return o
}

func (o SizeInfoResponseArrayOutput) Index(i pulumi.IntInput) SizeInfoResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SizeInfoResponse {
		return vs[0].([]SizeInfoResponse)[vs[1].(int)]
	}).(SizeInfoResponseOutput)
}

// Support contact information and instructions.
type SupportInfo struct {
	// Support contact email address.
	Email *string `pulumi:"email"`
	// Support instructions.
	Instructions *string `pulumi:"instructions"`
	// Support contact phone number.
	Phone *string `pulumi:"phone"`
	// Support web address.
	Url *string `pulumi:"url"`
}

// SupportInfoInput is an input type that accepts SupportInfoArgs and SupportInfoOutput values.
// You can construct a concrete instance of `SupportInfoInput` via:
//
//	SupportInfoArgs{...}
type SupportInfoInput interface {
	pulumi.Input

	ToSupportInfoOutput() SupportInfoOutput
	ToSupportInfoOutputWithContext(context.Context) SupportInfoOutput
}

// Support contact information and instructions.
type SupportInfoArgs struct {
	// Support contact email address.
	Email pulumi.StringPtrInput `pulumi:"email"`
	// Support instructions.
	Instructions pulumi.StringPtrInput `pulumi:"instructions"`
	// Support contact phone number.
	Phone pulumi.StringPtrInput `pulumi:"phone"`
	// Support web address.
	Url pulumi.StringPtrInput `pulumi:"url"`
}

func (SupportInfoArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SupportInfo)(nil)).Elem()
}

func (i SupportInfoArgs) ToSupportInfoOutput() SupportInfoOutput {
	return i.ToSupportInfoOutputWithContext(context.Background())
}

func (i SupportInfoArgs) ToSupportInfoOutputWithContext(ctx context.Context) SupportInfoOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SupportInfoOutput)
}

func (i SupportInfoArgs) ToSupportInfoPtrOutput() SupportInfoPtrOutput {
	return i.ToSupportInfoPtrOutputWithContext(context.Background())
}

func (i SupportInfoArgs) ToSupportInfoPtrOutputWithContext(ctx context.Context) SupportInfoPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SupportInfoOutput).ToSupportInfoPtrOutputWithContext(ctx)
}

// SupportInfoPtrInput is an input type that accepts SupportInfoArgs, SupportInfoPtr and SupportInfoPtrOutput values.
// You can construct a concrete instance of `SupportInfoPtrInput` via:
//
//	        SupportInfoArgs{...}
//
//	or:
//
//	        nil
type SupportInfoPtrInput interface {
	pulumi.Input

	ToSupportInfoPtrOutput() SupportInfoPtrOutput
	ToSupportInfoPtrOutputWithContext(context.Context) SupportInfoPtrOutput
}

type supportInfoPtrType SupportInfoArgs

func SupportInfoPtr(v *SupportInfoArgs) SupportInfoPtrInput {
	return (*supportInfoPtrType)(v)
}

func (*supportInfoPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SupportInfo)(nil)).Elem()
}

func (i *supportInfoPtrType) ToSupportInfoPtrOutput() SupportInfoPtrOutput {
	return i.ToSupportInfoPtrOutputWithContext(context.Background())
}

func (i *supportInfoPtrType) ToSupportInfoPtrOutputWithContext(ctx context.Context) SupportInfoPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SupportInfoPtrOutput)
}

// Support contact information and instructions.
type SupportInfoOutput struct{ *pulumi.OutputState }

func (SupportInfoOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SupportInfo)(nil)).Elem()
}

func (o SupportInfoOutput) ToSupportInfoOutput() SupportInfoOutput {
	return o
}

func (o SupportInfoOutput) ToSupportInfoOutputWithContext(ctx context.Context) SupportInfoOutput {
	return o
}

func (o SupportInfoOutput) ToSupportInfoPtrOutput() SupportInfoPtrOutput {
	return o.ToSupportInfoPtrOutputWithContext(context.Background())
}

func (o SupportInfoOutput) ToSupportInfoPtrOutputWithContext(ctx context.Context) SupportInfoPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SupportInfo) *SupportInfo {
		return &v
	}).(SupportInfoPtrOutput)
}

// Support contact email address.
func (o SupportInfoOutput) Email() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SupportInfo) *string { return v.Email }).(pulumi.StringPtrOutput)
}

// Support instructions.
func (o SupportInfoOutput) Instructions() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SupportInfo) *string { return v.Instructions }).(pulumi.StringPtrOutput)
}

// Support contact phone number.
func (o SupportInfoOutput) Phone() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SupportInfo) *string { return v.Phone }).(pulumi.StringPtrOutput)
}

// Support web address.
func (o SupportInfoOutput) Url() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SupportInfo) *string { return v.Url }).(pulumi.StringPtrOutput)
}

type SupportInfoPtrOutput struct{ *pulumi.OutputState }

func (SupportInfoPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SupportInfo)(nil)).Elem()
}

func (o SupportInfoPtrOutput) ToSupportInfoPtrOutput() SupportInfoPtrOutput {
	return o
}

func (o SupportInfoPtrOutput) ToSupportInfoPtrOutputWithContext(ctx context.Context) SupportInfoPtrOutput {
	return o
}

func (o SupportInfoPtrOutput) Elem() SupportInfoOutput {
	return o.ApplyT(func(v *SupportInfo) SupportInfo {
		if v != nil {
			return *v
		}
		var ret SupportInfo
		return ret
	}).(SupportInfoOutput)
}

// Support contact email address.
func (o SupportInfoPtrOutput) Email() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SupportInfo) *string {
		if v == nil {
			return nil
		}
		return v.Email
	}).(pulumi.StringPtrOutput)
}

// Support instructions.
func (o SupportInfoPtrOutput) Instructions() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SupportInfo) *string {
		if v == nil {
			return nil
		}
		return v.Instructions
	}).(pulumi.StringPtrOutput)
}

// Support contact phone number.
func (o SupportInfoPtrOutput) Phone() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SupportInfo) *string {
		if v == nil {
			return nil
		}
		return v.Phone
	}).(pulumi.StringPtrOutput)
}

// Support web address.
func (o SupportInfoPtrOutput) Url() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SupportInfo) *string {
		if v == nil {
			return nil
		}
		return v.Url
	}).(pulumi.StringPtrOutput)
}

// Support contact information and instructions.
type SupportInfoResponse struct {
	// Support contact email address.
	Email *string `pulumi:"email"`
	// Support instructions.
	Instructions *string `pulumi:"instructions"`
	// Support contact phone number.
	Phone *string `pulumi:"phone"`
	// Support web address.
	Url *string `pulumi:"url"`
}

// Support contact information and instructions.
type SupportInfoResponseOutput struct{ *pulumi.OutputState }

func (SupportInfoResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SupportInfoResponse)(nil)).Elem()
}

func (o SupportInfoResponseOutput) ToSupportInfoResponseOutput() SupportInfoResponseOutput {
	return o
}

func (o SupportInfoResponseOutput) ToSupportInfoResponseOutputWithContext(ctx context.Context) SupportInfoResponseOutput {
	return o
}

// Support contact email address.
func (o SupportInfoResponseOutput) Email() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SupportInfoResponse) *string { return v.Email }).(pulumi.StringPtrOutput)
}

// Support instructions.
func (o SupportInfoResponseOutput) Instructions() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SupportInfoResponse) *string { return v.Instructions }).(pulumi.StringPtrOutput)
}

// Support contact phone number.
func (o SupportInfoResponseOutput) Phone() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SupportInfoResponse) *string { return v.Phone }).(pulumi.StringPtrOutput)
}

// Support web address.
func (o SupportInfoResponseOutput) Url() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SupportInfoResponse) *string { return v.Url }).(pulumi.StringPtrOutput)
}

type SupportInfoResponsePtrOutput struct{ *pulumi.OutputState }

func (SupportInfoResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SupportInfoResponse)(nil)).Elem()
}

func (o SupportInfoResponsePtrOutput) ToSupportInfoResponsePtrOutput() SupportInfoResponsePtrOutput {
	return o
}

func (o SupportInfoResponsePtrOutput) ToSupportInfoResponsePtrOutputWithContext(ctx context.Context) SupportInfoResponsePtrOutput {
	return o
}

func (o SupportInfoResponsePtrOutput) Elem() SupportInfoResponseOutput {
	return o.ApplyT(func(v *SupportInfoResponse) SupportInfoResponse {
		if v != nil {
			return *v
		}
		var ret SupportInfoResponse
		return ret
	}).(SupportInfoResponseOutput)
}

// Support contact email address.
func (o SupportInfoResponsePtrOutput) Email() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SupportInfoResponse) *string {
		if v == nil {
			return nil
		}
		return v.Email
	}).(pulumi.StringPtrOutput)
}

// Support instructions.
func (o SupportInfoResponsePtrOutput) Instructions() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SupportInfoResponse) *string {
		if v == nil {
			return nil
		}
		return v.Instructions
	}).(pulumi.StringPtrOutput)
}

// Support contact phone number.
func (o SupportInfoResponsePtrOutput) Phone() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SupportInfoResponse) *string {
		if v == nil {
			return nil
		}
		return v.Phone
	}).(pulumi.StringPtrOutput)
}

// Support web address.
func (o SupportInfoResponsePtrOutput) Url() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SupportInfoResponse) *string {
		if v == nil {
			return nil
		}
		return v.Url
	}).(pulumi.StringPtrOutput)
}

// Metadata pertaining to creation and last modification of the resource.
type SystemDataResponse struct {
	// The timestamp of resource creation (UTC).
	CreatedAt *string `pulumi:"createdAt"`
	// The identity that created the resource.
	CreatedBy *string `pulumi:"createdBy"`
	// The type of identity that created the resource.
	CreatedByType *string `pulumi:"createdByType"`
	// The timestamp of resource last modification (UTC)
	LastModifiedAt *string `pulumi:"lastModifiedAt"`
	// The identity that last modified the resource.
	LastModifiedBy *string `pulumi:"lastModifiedBy"`
	// The type of identity that last modified the resource.
	LastModifiedByType *string `pulumi:"lastModifiedByType"`
}

// Metadata pertaining to creation and last modification of the resource.
type SystemDataResponseOutput struct{ *pulumi.OutputState }

func (SystemDataResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SystemDataResponse)(nil)).Elem()
}

func (o SystemDataResponseOutput) ToSystemDataResponseOutput() SystemDataResponseOutput {
	return o
}

func (o SystemDataResponseOutput) ToSystemDataResponseOutputWithContext(ctx context.Context) SystemDataResponseOutput {
	return o
}

// The timestamp of resource creation (UTC).
func (o SystemDataResponseOutput) CreatedAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SystemDataResponse) *string { return v.CreatedAt }).(pulumi.StringPtrOutput)
}

// The identity that created the resource.
func (o SystemDataResponseOutput) CreatedBy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SystemDataResponse) *string { return v.CreatedBy }).(pulumi.StringPtrOutput)
}

// The type of identity that created the resource.
func (o SystemDataResponseOutput) CreatedByType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SystemDataResponse) *string { return v.CreatedByType }).(pulumi.StringPtrOutput)
}

// The timestamp of resource last modification (UTC)
func (o SystemDataResponseOutput) LastModifiedAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SystemDataResponse) *string { return v.LastModifiedAt }).(pulumi.StringPtrOutput)
}

// The identity that last modified the resource.
func (o SystemDataResponseOutput) LastModifiedBy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SystemDataResponse) *string { return v.LastModifiedBy }).(pulumi.StringPtrOutput)
}

// The type of identity that last modified the resource.
func (o SystemDataResponseOutput) LastModifiedByType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SystemDataResponse) *string { return v.LastModifiedByType }).(pulumi.StringPtrOutput)
}

// Details of the backing virtual machine.
type VirtualMachineDetailsResponse struct {
	// Last known compute power state captured in DTL
	LastKnownPowerState string `pulumi:"lastKnownPowerState"`
	// PrivateIp address of the compute VM
	PrivateIpAddress string `pulumi:"privateIpAddress"`
	// Provisioning state of the Dtl VM
	ProvisioningState string `pulumi:"provisioningState"`
	// Connection information for Windows
	RdpAuthority string `pulumi:"rdpAuthority"`
	// Connection information for Linux
	SshAuthority string `pulumi:"sshAuthority"`
	// Compute VM login user name
	UserName string `pulumi:"userName"`
}

// Details of the backing virtual machine.
type VirtualMachineDetailsResponseOutput struct{ *pulumi.OutputState }

func (VirtualMachineDetailsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualMachineDetailsResponse)(nil)).Elem()
}

func (o VirtualMachineDetailsResponseOutput) ToVirtualMachineDetailsResponseOutput() VirtualMachineDetailsResponseOutput {
	return o
}

func (o VirtualMachineDetailsResponseOutput) ToVirtualMachineDetailsResponseOutputWithContext(ctx context.Context) VirtualMachineDetailsResponseOutput {
	return o
}

// Last known compute power state captured in DTL
func (o VirtualMachineDetailsResponseOutput) LastKnownPowerState() pulumi.StringOutput {
	return o.ApplyT(func(v VirtualMachineDetailsResponse) string { return v.LastKnownPowerState }).(pulumi.StringOutput)
}

// PrivateIp address of the compute VM
func (o VirtualMachineDetailsResponseOutput) PrivateIpAddress() pulumi.StringOutput {
	return o.ApplyT(func(v VirtualMachineDetailsResponse) string { return v.PrivateIpAddress }).(pulumi.StringOutput)
}

// Provisioning state of the Dtl VM
func (o VirtualMachineDetailsResponseOutput) ProvisioningState() pulumi.StringOutput {
	return o.ApplyT(func(v VirtualMachineDetailsResponse) string { return v.ProvisioningState }).(pulumi.StringOutput)
}

// Connection information for Windows
func (o VirtualMachineDetailsResponseOutput) RdpAuthority() pulumi.StringOutput {
	return o.ApplyT(func(v VirtualMachineDetailsResponse) string { return v.RdpAuthority }).(pulumi.StringOutput)
}

// Connection information for Linux
func (o VirtualMachineDetailsResponseOutput) SshAuthority() pulumi.StringOutput {
	return o.ApplyT(func(v VirtualMachineDetailsResponse) string { return v.SshAuthority }).(pulumi.StringOutput)
}

// Compute VM login user name
func (o VirtualMachineDetailsResponseOutput) UserName() pulumi.StringOutput {
	return o.ApplyT(func(v VirtualMachineDetailsResponse) string { return v.UserName }).(pulumi.StringOutput)
}

// Details about the state of the reference virtual machine.
type VmStateDetailsResponse struct {
	// Last known compute power state captured in DTL
	LastKnownPowerState string `pulumi:"lastKnownPowerState"`
	// The power state of the reference virtual machine.
	PowerState string `pulumi:"powerState"`
	// The RdpAuthority property is a server DNS host name or IP address followed by the service port number for RDP (Remote Desktop Protocol).
	RdpAuthority string `pulumi:"rdpAuthority"`
	// The SshAuthority property is a server DNS host name or IP address followed by the service port number for SSH.
	SshAuthority string `pulumi:"sshAuthority"`
}

// Details about the state of the reference virtual machine.
type VmStateDetailsResponseOutput struct{ *pulumi.OutputState }

func (VmStateDetailsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VmStateDetailsResponse)(nil)).Elem()
}

func (o VmStateDetailsResponseOutput) ToVmStateDetailsResponseOutput() VmStateDetailsResponseOutput {
	return o
}

func (o VmStateDetailsResponseOutput) ToVmStateDetailsResponseOutputWithContext(ctx context.Context) VmStateDetailsResponseOutput {
	return o
}

// Last known compute power state captured in DTL
func (o VmStateDetailsResponseOutput) LastKnownPowerState() pulumi.StringOutput {
	return o.ApplyT(func(v VmStateDetailsResponse) string { return v.LastKnownPowerState }).(pulumi.StringOutput)
}

// The power state of the reference virtual machine.
func (o VmStateDetailsResponseOutput) PowerState() pulumi.StringOutput {
	return o.ApplyT(func(v VmStateDetailsResponse) string { return v.PowerState }).(pulumi.StringOutput)
}

// The RdpAuthority property is a server DNS host name or IP address followed by the service port number for RDP (Remote Desktop Protocol).
func (o VmStateDetailsResponseOutput) RdpAuthority() pulumi.StringOutput {
	return o.ApplyT(func(v VmStateDetailsResponse) string { return v.RdpAuthority }).(pulumi.StringOutput)
}

// The SshAuthority property is a server DNS host name or IP address followed by the service port number for SSH.
func (o VmStateDetailsResponseOutput) SshAuthority() pulumi.StringOutput {
	return o.ApplyT(func(v VmStateDetailsResponse) string { return v.SshAuthority }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(AutoShutdownProfileOutput{})
	pulumi.RegisterOutputType(AutoShutdownProfilePtrOutput{})
	pulumi.RegisterOutputType(AutoShutdownProfileResponseOutput{})
	pulumi.RegisterOutputType(AutoShutdownProfileResponsePtrOutput{})
	pulumi.RegisterOutputType(ConnectionProfileOutput{})
	pulumi.RegisterOutputType(ConnectionProfilePtrOutput{})
	pulumi.RegisterOutputType(ConnectionProfileResponseOutput{})
	pulumi.RegisterOutputType(ConnectionProfileResponsePtrOutput{})
	pulumi.RegisterOutputType(EnvironmentDetailsResponseOutput{})
	pulumi.RegisterOutputType(EnvironmentDetailsResponseArrayOutput{})
	pulumi.RegisterOutputType(EnvironmentSizeResponseOutput{})
	pulumi.RegisterOutputType(EnvironmentSizeResponseArrayOutput{})
	pulumi.RegisterOutputType(GalleryImageReferenceResponseOutput{})
	pulumi.RegisterOutputType(LabDetailsResponseOutput{})
	pulumi.RegisterOutputType(LabDetailsResponseArrayOutput{})
	pulumi.RegisterOutputType(LabPlanNetworkProfileOutput{})
	pulumi.RegisterOutputType(LabPlanNetworkProfilePtrOutput{})
	pulumi.RegisterOutputType(LabPlanNetworkProfileResponseOutput{})
	pulumi.RegisterOutputType(LabPlanNetworkProfileResponsePtrOutput{})
	pulumi.RegisterOutputType(LatestOperationResultResponseOutput{})
	pulumi.RegisterOutputType(NetworkInterfaceResponseOutput{})
	pulumi.RegisterOutputType(OperationBatchStatusResponseItemResponseOutput{})
	pulumi.RegisterOutputType(OperationBatchStatusResponseItemResponseArrayOutput{})
	pulumi.RegisterOutputType(RecurrencePatternOutput{})
	pulumi.RegisterOutputType(RecurrencePatternPtrOutput{})
	pulumi.RegisterOutputType(RecurrencePatternResponseOutput{})
	pulumi.RegisterOutputType(RecurrencePatternResponsePtrOutput{})
	pulumi.RegisterOutputType(ReferenceVmOutput{})
	pulumi.RegisterOutputType(ReferenceVmResponseOutput{})
	pulumi.RegisterOutputType(RegionalAvailabilityResponseOutput{})
	pulumi.RegisterOutputType(RegionalAvailabilityResponseArrayOutput{})
	pulumi.RegisterOutputType(ResourceSetOutput{})
	pulumi.RegisterOutputType(ResourceSetPtrOutput{})
	pulumi.RegisterOutputType(ResourceSetResponseOutput{})
	pulumi.RegisterOutputType(ResourceSetResponsePtrOutput{})
	pulumi.RegisterOutputType(ResourceSettingsOutput{})
	pulumi.RegisterOutputType(ResourceSettingsResponseOutput{})
	pulumi.RegisterOutputType(SizeAvailabilityResponseOutput{})
	pulumi.RegisterOutputType(SizeAvailabilityResponseArrayOutput{})
	pulumi.RegisterOutputType(SizeConfigurationPropertiesResponseOutput{})
	pulumi.RegisterOutputType(SizeInfoResponseOutput{})
	pulumi.RegisterOutputType(SizeInfoResponseArrayOutput{})
	pulumi.RegisterOutputType(SupportInfoOutput{})
	pulumi.RegisterOutputType(SupportInfoPtrOutput{})
	pulumi.RegisterOutputType(SupportInfoResponseOutput{})
	pulumi.RegisterOutputType(SupportInfoResponsePtrOutput{})
	pulumi.RegisterOutputType(SystemDataResponseOutput{})
	pulumi.RegisterOutputType(VirtualMachineDetailsResponseOutput{})
	pulumi.RegisterOutputType(VmStateDetailsResponseOutput{})
}
