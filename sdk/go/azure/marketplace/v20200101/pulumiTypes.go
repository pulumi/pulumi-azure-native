// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v20200101

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

type Icon struct {
	// Icon size
	IconKind *string `pulumi:"iconKind"`
	// Icon uri
	Uri *string `pulumi:"uri"`
}

// IconInput is an input type that accepts IconArgs and IconOutput values.
// You can construct a concrete instance of `IconInput` via:
//
//          IconArgs{...}
type IconInput interface {
	pulumi.Input

	ToIconOutput() IconOutput
	ToIconOutputWithContext(context.Context) IconOutput
}

type IconArgs struct {
	// Icon size
	IconKind pulumi.StringPtrInput `pulumi:"iconKind"`
	// Icon uri
	Uri pulumi.StringPtrInput `pulumi:"uri"`
}

func (IconArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Icon)(nil)).Elem()
}

func (i IconArgs) ToIconOutput() IconOutput {
	return i.ToIconOutputWithContext(context.Background())
}

func (i IconArgs) ToIconOutputWithContext(ctx context.Context) IconOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IconOutput)
}

// IconArrayInput is an input type that accepts IconArray and IconArrayOutput values.
// You can construct a concrete instance of `IconArrayInput` via:
//
//          IconArray{ IconArgs{...} }
type IconArrayInput interface {
	pulumi.Input

	ToIconArrayOutput() IconArrayOutput
	ToIconArrayOutputWithContext(context.Context) IconArrayOutput
}

type IconArray []IconInput

func (IconArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Icon)(nil)).Elem()
}

func (i IconArray) ToIconArrayOutput() IconArrayOutput {
	return i.ToIconArrayOutputWithContext(context.Background())
}

func (i IconArray) ToIconArrayOutputWithContext(ctx context.Context) IconArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IconArrayOutput)
}

type IconOutput struct{ *pulumi.OutputState }

func (IconOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Icon)(nil)).Elem()
}

func (o IconOutput) ToIconOutput() IconOutput {
	return o
}

func (o IconOutput) ToIconOutputWithContext(ctx context.Context) IconOutput {
	return o
}

// Icon size
func (o IconOutput) IconKind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Icon) *string { return v.IconKind }).(pulumi.StringPtrOutput)
}

// Icon uri
func (o IconOutput) Uri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Icon) *string { return v.Uri }).(pulumi.StringPtrOutput)
}

type IconArrayOutput struct{ *pulumi.OutputState }

func (IconArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Icon)(nil)).Elem()
}

func (o IconArrayOutput) ToIconArrayOutput() IconArrayOutput {
	return o
}

func (o IconArrayOutput) ToIconArrayOutputWithContext(ctx context.Context) IconArrayOutput {
	return o
}

func (o IconArrayOutput) Index(i pulumi.IntInput) IconOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) Icon {
		return vs[0].([]Icon)[vs[1].(int)]
	}).(IconOutput)
}

type IconResponse struct {
	// Icon size
	IconKind *string `pulumi:"iconKind"`
	// Icon uri
	Uri *string `pulumi:"uri"`
}

// IconResponseInput is an input type that accepts IconResponseArgs and IconResponseOutput values.
// You can construct a concrete instance of `IconResponseInput` via:
//
//          IconResponseArgs{...}
type IconResponseInput interface {
	pulumi.Input

	ToIconResponseOutput() IconResponseOutput
	ToIconResponseOutputWithContext(context.Context) IconResponseOutput
}

type IconResponseArgs struct {
	// Icon size
	IconKind pulumi.StringPtrInput `pulumi:"iconKind"`
	// Icon uri
	Uri pulumi.StringPtrInput `pulumi:"uri"`
}

func (IconResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*IconResponse)(nil)).Elem()
}

func (i IconResponseArgs) ToIconResponseOutput() IconResponseOutput {
	return i.ToIconResponseOutputWithContext(context.Background())
}

func (i IconResponseArgs) ToIconResponseOutputWithContext(ctx context.Context) IconResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IconResponseOutput)
}

// IconResponseArrayInput is an input type that accepts IconResponseArray and IconResponseArrayOutput values.
// You can construct a concrete instance of `IconResponseArrayInput` via:
//
//          IconResponseArray{ IconResponseArgs{...} }
type IconResponseArrayInput interface {
	pulumi.Input

	ToIconResponseArrayOutput() IconResponseArrayOutput
	ToIconResponseArrayOutputWithContext(context.Context) IconResponseArrayOutput
}

type IconResponseArray []IconResponseInput

func (IconResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]IconResponse)(nil)).Elem()
}

func (i IconResponseArray) ToIconResponseArrayOutput() IconResponseArrayOutput {
	return i.ToIconResponseArrayOutputWithContext(context.Background())
}

func (i IconResponseArray) ToIconResponseArrayOutputWithContext(ctx context.Context) IconResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IconResponseArrayOutput)
}

type IconResponseOutput struct{ *pulumi.OutputState }

func (IconResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IconResponse)(nil)).Elem()
}

func (o IconResponseOutput) ToIconResponseOutput() IconResponseOutput {
	return o
}

func (o IconResponseOutput) ToIconResponseOutputWithContext(ctx context.Context) IconResponseOutput {
	return o
}

// Icon size
func (o IconResponseOutput) IconKind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IconResponse) *string { return v.IconKind }).(pulumi.StringPtrOutput)
}

// Icon uri
func (o IconResponseOutput) Uri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IconResponse) *string { return v.Uri }).(pulumi.StringPtrOutput)
}

type IconResponseArrayOutput struct{ *pulumi.OutputState }

func (IconResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]IconResponse)(nil)).Elem()
}

func (o IconResponseArrayOutput) ToIconResponseArrayOutput() IconResponseArrayOutput {
	return o
}

func (o IconResponseArrayOutput) ToIconResponseArrayOutputWithContext(ctx context.Context) IconResponseArrayOutput {
	return o
}

func (o IconResponseArrayOutput) Index(i pulumi.IntInput) IconResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) IconResponse {
		return vs[0].([]IconResponse)[vs[1].(int)]
	}).(IconResponseOutput)
}

func init() {
	pulumi.RegisterOutputType(IconOutput{})
	pulumi.RegisterOutputType(IconArrayOutput{})
	pulumi.RegisterOutputType(IconResponseOutput{})
	pulumi.RegisterOutputType(IconResponseArrayOutput{})
}
