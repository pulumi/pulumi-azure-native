// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v20210201preview

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// IoT sensor model
type Sensor struct {
	pulumi.CustomResourceState

	// Last connectivity time of the IoT sensor
	ConnectivityTime pulumi.StringOutput `pulumi:"connectivityTime"`
	// Dynamic mode status of the IoT sensor
	DynamicLearning pulumi.BoolOutput `pulumi:"dynamicLearning"`
	// Learning mode status of the IoT sensor
	LearningMode pulumi.BoolOutput `pulumi:"learningMode"`
	// The name of the resource
	Name pulumi.StringOutput `pulumi:"name"`
	// Status of the IoT sensor
	SensorStatus pulumi.StringOutput `pulumi:"sensorStatus"`
	// Version of the IoT sensor
	SensorVersion pulumi.StringOutput `pulumi:"sensorVersion"`
	// Azure Resource Manager metadata containing createdBy and modifiedBy information.
	SystemData SystemDataResponseOutput `pulumi:"systemData"`
	// TI Automatic mode status of the IoT sensor
	TiAutomaticUpdates pulumi.BoolPtrOutput `pulumi:"tiAutomaticUpdates"`
	// TI Status of the IoT sensor
	TiStatus pulumi.StringOutput `pulumi:"tiStatus"`
	// TI Version of the IoT sensor
	TiVersion pulumi.StringOutput `pulumi:"tiVersion"`
	// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
	Type pulumi.StringOutput `pulumi:"type"`
	// Zone of the IoT sensor
	Zone pulumi.StringPtrOutput `pulumi:"zone"`
}

// NewSensor registers a new resource with the given unique name, arguments, and options.
func NewSensor(ctx *pulumi.Context,
	name string, args *SensorArgs, opts ...pulumi.ResourceOption) (*Sensor, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Scope == nil {
		return nil, errors.New("invalid value for required argument 'Scope'")
	}
	aliases := pulumi.Aliases([]pulumi.Alias{
		{
			Type: pulumi.String("azure-nextgen:iotsecurity/v20210201preview:Sensor"),
		},
		{
			Type: pulumi.String("azure-native:iotsecurity:Sensor"),
		},
		{
			Type: pulumi.String("azure-nextgen:iotsecurity:Sensor"),
		},
	})
	opts = append(opts, aliases)
	var resource Sensor
	err := ctx.RegisterResource("azure-native:iotsecurity/v20210201preview:Sensor", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSensor gets an existing Sensor resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSensor(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SensorState, opts ...pulumi.ResourceOption) (*Sensor, error) {
	var resource Sensor
	err := ctx.ReadResource("azure-native:iotsecurity/v20210201preview:Sensor", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Sensor resources.
type sensorState struct {
	// Last connectivity time of the IoT sensor
	ConnectivityTime *string `pulumi:"connectivityTime"`
	// Dynamic mode status of the IoT sensor
	DynamicLearning *bool `pulumi:"dynamicLearning"`
	// Learning mode status of the IoT sensor
	LearningMode *bool `pulumi:"learningMode"`
	// The name of the resource
	Name *string `pulumi:"name"`
	// Status of the IoT sensor
	SensorStatus *string `pulumi:"sensorStatus"`
	// Version of the IoT sensor
	SensorVersion *string `pulumi:"sensorVersion"`
	// Azure Resource Manager metadata containing createdBy and modifiedBy information.
	SystemData *SystemDataResponse `pulumi:"systemData"`
	// TI Automatic mode status of the IoT sensor
	TiAutomaticUpdates *bool `pulumi:"tiAutomaticUpdates"`
	// TI Status of the IoT sensor
	TiStatus *string `pulumi:"tiStatus"`
	// TI Version of the IoT sensor
	TiVersion *string `pulumi:"tiVersion"`
	// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
	Type *string `pulumi:"type"`
	// Zone of the IoT sensor
	Zone *string `pulumi:"zone"`
}

type SensorState struct {
	// Last connectivity time of the IoT sensor
	ConnectivityTime pulumi.StringPtrInput
	// Dynamic mode status of the IoT sensor
	DynamicLearning pulumi.BoolPtrInput
	// Learning mode status of the IoT sensor
	LearningMode pulumi.BoolPtrInput
	// The name of the resource
	Name pulumi.StringPtrInput
	// Status of the IoT sensor
	SensorStatus pulumi.StringPtrInput
	// Version of the IoT sensor
	SensorVersion pulumi.StringPtrInput
	// Azure Resource Manager metadata containing createdBy and modifiedBy information.
	SystemData SystemDataResponsePtrInput
	// TI Automatic mode status of the IoT sensor
	TiAutomaticUpdates pulumi.BoolPtrInput
	// TI Status of the IoT sensor
	TiStatus pulumi.StringPtrInput
	// TI Version of the IoT sensor
	TiVersion pulumi.StringPtrInput
	// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
	Type pulumi.StringPtrInput
	// Zone of the IoT sensor
	Zone pulumi.StringPtrInput
}

func (SensorState) ElementType() reflect.Type {
	return reflect.TypeOf((*sensorState)(nil)).Elem()
}

type sensorArgs struct {
	// Scope of the query (IoT Hub, /providers/Microsoft.Devices/iotHubs/myHub)
	Scope string `pulumi:"scope"`
	// Name of the IoT sensor
	SensorName *string `pulumi:"sensorName"`
	// TI Automatic mode status of the IoT sensor
	TiAutomaticUpdates *bool `pulumi:"tiAutomaticUpdates"`
	// Zone of the IoT sensor
	Zone *string `pulumi:"zone"`
}

// The set of arguments for constructing a Sensor resource.
type SensorArgs struct {
	// Scope of the query (IoT Hub, /providers/Microsoft.Devices/iotHubs/myHub)
	Scope pulumi.StringInput
	// Name of the IoT sensor
	SensorName pulumi.StringPtrInput
	// TI Automatic mode status of the IoT sensor
	TiAutomaticUpdates pulumi.BoolPtrInput
	// Zone of the IoT sensor
	Zone pulumi.StringPtrInput
}

func (SensorArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*sensorArgs)(nil)).Elem()
}

type SensorInput interface {
	pulumi.Input

	ToSensorOutput() SensorOutput
	ToSensorOutputWithContext(ctx context.Context) SensorOutput
}

func (*Sensor) ElementType() reflect.Type {
	return reflect.TypeOf((*Sensor)(nil))
}

func (i *Sensor) ToSensorOutput() SensorOutput {
	return i.ToSensorOutputWithContext(context.Background())
}

func (i *Sensor) ToSensorOutputWithContext(ctx context.Context) SensorOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SensorOutput)
}

type SensorOutput struct {
	*pulumi.OutputState
}

func (SensorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Sensor)(nil))
}

func (o SensorOutput) ToSensorOutput() SensorOutput {
	return o
}

func (o SensorOutput) ToSensorOutputWithContext(ctx context.Context) SensorOutput {
	return o
}

func init() {
	pulumi.RegisterOutputType(SensorOutput{})
}
