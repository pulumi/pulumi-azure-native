// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v20210201preview

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// The kind of onboarding for the subscription
type OnboardingKind string

const (
	OnboardingKindDefault         = OnboardingKind("Default")
	OnboardingKindMigratedToAzure = OnboardingKind("MigratedToAzure")
	OnboardingKindEvaluation      = OnboardingKind("Evaluation")
	OnboardingKindPurchased       = OnboardingKind("Purchased")
)

func (OnboardingKind) ElementType() reflect.Type {
	return reflect.TypeOf((*OnboardingKind)(nil)).Elem()
}

func (e OnboardingKind) ToOnboardingKindOutput() OnboardingKindOutput {
	return pulumi.ToOutput(e).(OnboardingKindOutput)
}

func (e OnboardingKind) ToOnboardingKindOutputWithContext(ctx context.Context) OnboardingKindOutput {
	return pulumi.ToOutputWithContext(ctx, e).(OnboardingKindOutput)
}

func (e OnboardingKind) ToOnboardingKindPtrOutput() OnboardingKindPtrOutput {
	return e.ToOnboardingKindPtrOutputWithContext(context.Background())
}

func (e OnboardingKind) ToOnboardingKindPtrOutputWithContext(ctx context.Context) OnboardingKindPtrOutput {
	return OnboardingKind(e).ToOnboardingKindOutputWithContext(ctx).ToOnboardingKindPtrOutputWithContext(ctx)
}

func (e OnboardingKind) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e OnboardingKind) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e OnboardingKind) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e OnboardingKind) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type OnboardingKindOutput struct{ *pulumi.OutputState }

func (OnboardingKindOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OnboardingKind)(nil)).Elem()
}

func (o OnboardingKindOutput) ToOnboardingKindOutput() OnboardingKindOutput {
	return o
}

func (o OnboardingKindOutput) ToOnboardingKindOutputWithContext(ctx context.Context) OnboardingKindOutput {
	return o
}

func (o OnboardingKindOutput) ToOnboardingKindPtrOutput() OnboardingKindPtrOutput {
	return o.ToOnboardingKindPtrOutputWithContext(context.Background())
}

func (o OnboardingKindOutput) ToOnboardingKindPtrOutputWithContext(ctx context.Context) OnboardingKindPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v OnboardingKind) *OnboardingKind {
		return &v
	}).(OnboardingKindPtrOutput)
}

func (o OnboardingKindOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o OnboardingKindOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e OnboardingKind) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o OnboardingKindOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o OnboardingKindOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e OnboardingKind) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type OnboardingKindPtrOutput struct{ *pulumi.OutputState }

func (OnboardingKindPtrOutput) ElementType() reflect.Type {
	return onboardingKindPtrType
}

func (o OnboardingKindPtrOutput) ToOnboardingKindPtrOutput() OnboardingKindPtrOutput {
	return o
}

func (o OnboardingKindPtrOutput) ToOnboardingKindPtrOutputWithContext(ctx context.Context) OnboardingKindPtrOutput {
	return o
}

func (o OnboardingKindPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o OnboardingKindPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *OnboardingKind) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

func (o OnboardingKindPtrOutput) Elem() OnboardingKindOutput {
	return o.ApplyT(func(v *OnboardingKind) OnboardingKind {
		var ret OnboardingKind
		if v != nil {
			ret = *v
		}
		return ret
	}).(OnboardingKindOutput)
}

// OnboardingKindInput is an input type that accepts OnboardingKindArgs and OnboardingKindOutput values.
// You can construct a concrete instance of `OnboardingKindInput` via:
//
//          OnboardingKindArgs{...}
type OnboardingKindInput interface {
	pulumi.Input

	ToOnboardingKindOutput() OnboardingKindOutput
	ToOnboardingKindOutputWithContext(context.Context) OnboardingKindOutput
}

var onboardingKindPtrType = reflect.TypeOf((**OnboardingKind)(nil)).Elem()

type OnboardingKindPtrInput interface {
	pulumi.Input

	ToOnboardingKindPtrOutput() OnboardingKindPtrOutput
	ToOnboardingKindPtrOutputWithContext(context.Context) OnboardingKindPtrOutput
}

type onboardingKindPtr string

func OnboardingKindPtr(v string) OnboardingKindPtrInput {
	return (*onboardingKindPtr)(&v)
}

func (*onboardingKindPtr) ElementType() reflect.Type {
	return onboardingKindPtrType
}

func (in *onboardingKindPtr) ToOnboardingKindPtrOutput() OnboardingKindPtrOutput {
	return pulumi.ToOutput(in).(OnboardingKindPtrOutput)
}

func (in *onboardingKindPtr) ToOnboardingKindPtrOutputWithContext(ctx context.Context) OnboardingKindPtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(OnboardingKindPtrOutput)
}

// Type of sensor
type SensorType string

const (
	SensorTypeOt         = SensorType("Ot")
	SensorTypeEnterprise = SensorType("Enterprise")
)

func (SensorType) ElementType() reflect.Type {
	return reflect.TypeOf((*SensorType)(nil)).Elem()
}

func (e SensorType) ToSensorTypeOutput() SensorTypeOutput {
	return pulumi.ToOutput(e).(SensorTypeOutput)
}

func (e SensorType) ToSensorTypeOutputWithContext(ctx context.Context) SensorTypeOutput {
	return pulumi.ToOutputWithContext(ctx, e).(SensorTypeOutput)
}

func (e SensorType) ToSensorTypePtrOutput() SensorTypePtrOutput {
	return e.ToSensorTypePtrOutputWithContext(context.Background())
}

func (e SensorType) ToSensorTypePtrOutputWithContext(ctx context.Context) SensorTypePtrOutput {
	return SensorType(e).ToSensorTypeOutputWithContext(ctx).ToSensorTypePtrOutputWithContext(ctx)
}

func (e SensorType) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e SensorType) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e SensorType) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e SensorType) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type SensorTypeOutput struct{ *pulumi.OutputState }

func (SensorTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SensorType)(nil)).Elem()
}

func (o SensorTypeOutput) ToSensorTypeOutput() SensorTypeOutput {
	return o
}

func (o SensorTypeOutput) ToSensorTypeOutputWithContext(ctx context.Context) SensorTypeOutput {
	return o
}

func (o SensorTypeOutput) ToSensorTypePtrOutput() SensorTypePtrOutput {
	return o.ToSensorTypePtrOutputWithContext(context.Background())
}

func (o SensorTypeOutput) ToSensorTypePtrOutputWithContext(ctx context.Context) SensorTypePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SensorType) *SensorType {
		return &v
	}).(SensorTypePtrOutput)
}

func (o SensorTypeOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o SensorTypeOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e SensorType) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o SensorTypeOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o SensorTypeOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e SensorType) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type SensorTypePtrOutput struct{ *pulumi.OutputState }

func (SensorTypePtrOutput) ElementType() reflect.Type {
	return sensorTypePtrType
}

func (o SensorTypePtrOutput) ToSensorTypePtrOutput() SensorTypePtrOutput {
	return o
}

func (o SensorTypePtrOutput) ToSensorTypePtrOutputWithContext(ctx context.Context) SensorTypePtrOutput {
	return o
}

func (o SensorTypePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o SensorTypePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *SensorType) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

func (o SensorTypePtrOutput) Elem() SensorTypeOutput {
	return o.ApplyT(func(v *SensorType) SensorType {
		var ret SensorType
		if v != nil {
			ret = *v
		}
		return ret
	}).(SensorTypeOutput)
}

// SensorTypeInput is an input type that accepts SensorTypeArgs and SensorTypeOutput values.
// You can construct a concrete instance of `SensorTypeInput` via:
//
//          SensorTypeArgs{...}
type SensorTypeInput interface {
	pulumi.Input

	ToSensorTypeOutput() SensorTypeOutput
	ToSensorTypeOutputWithContext(context.Context) SensorTypeOutput
}

var sensorTypePtrType = reflect.TypeOf((**SensorType)(nil)).Elem()

type SensorTypePtrInput interface {
	pulumi.Input

	ToSensorTypePtrOutput() SensorTypePtrOutput
	ToSensorTypePtrOutputWithContext(context.Context) SensorTypePtrOutput
}

type sensorTypePtr string

func SensorTypePtr(v string) SensorTypePtrInput {
	return (*sensorTypePtr)(&v)
}

func (*sensorTypePtr) ElementType() reflect.Type {
	return sensorTypePtrType
}

func (in *sensorTypePtr) ToSensorTypePtrOutput() SensorTypePtrOutput {
	return pulumi.ToOutput(in).(SensorTypePtrOutput)
}

func (in *sensorTypePtr) ToSensorTypePtrOutputWithContext(ctx context.Context) SensorTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(SensorTypePtrOutput)
}

func init() {
	pulumi.RegisterOutputType(OnboardingKindOutput{})
	pulumi.RegisterOutputType(OnboardingKindPtrOutput{})
	pulumi.RegisterOutputType(SensorTypeOutput{})
	pulumi.RegisterOutputType(SensorTypePtrOutput{})
}
