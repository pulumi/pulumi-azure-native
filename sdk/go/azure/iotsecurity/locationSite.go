// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package iotsecurity

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type LocationSite struct {
	pulumi.CustomResourceState

	// Display name of the IoT site
	DisplayName pulumi.StringOutput `pulumi:"displayName"`
	// The name of the resource
	Name pulumi.StringOutput `pulumi:"name"`
	// Azure Resource Manager metadata containing createdBy and modifiedBy information.
	SystemData SystemDataResponseOutput `pulumi:"systemData"`
	// Tags of the IoT site
	Tags pulumi.StringMapOutput `pulumi:"tags"`
	// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
	Type pulumi.StringOutput `pulumi:"type"`
}

// NewLocationSite registers a new resource with the given unique name, arguments, and options.
func NewLocationSite(ctx *pulumi.Context,
	name string, args *LocationSiteArgs, opts ...pulumi.ResourceOption) (*LocationSite, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DisplayName == nil {
		return nil, errors.New("invalid value for required argument 'DisplayName'")
	}
	if args.IotDefenderLocation == nil {
		return nil, errors.New("invalid value for required argument 'IotDefenderLocation'")
	}
	aliases := pulumi.Aliases([]pulumi.Alias{
		{
			Type: pulumi.String("azure-nextgen:iotsecurity:LocationSite"),
		},
		{
			Type: pulumi.String("azure-native:iotsecurity/v20210901preview:LocationSite"),
		},
		{
			Type: pulumi.String("azure-nextgen:iotsecurity/v20210901preview:LocationSite"),
		},
	})
	opts = append(opts, aliases)
	var resource LocationSite
	err := ctx.RegisterResource("azure-native:iotsecurity:LocationSite", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetLocationSite gets an existing LocationSite resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetLocationSite(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *LocationSiteState, opts ...pulumi.ResourceOption) (*LocationSite, error) {
	var resource LocationSite
	err := ctx.ReadResource("azure-native:iotsecurity:LocationSite", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering LocationSite resources.
type locationSiteState struct {
}

type LocationSiteState struct {
}

func (LocationSiteState) ElementType() reflect.Type {
	return reflect.TypeOf((*locationSiteState)(nil)).Elem()
}

type locationSiteArgs struct {
	// Display name of the IoT site
	DisplayName string `pulumi:"displayName"`
	// Defender for IoT location
	IotDefenderLocation string `pulumi:"iotDefenderLocation"`
	// Site Name
	SiteName *string `pulumi:"siteName"`
	// Tags of the IoT site
	Tags map[string]string `pulumi:"tags"`
}

// The set of arguments for constructing a LocationSite resource.
type LocationSiteArgs struct {
	// Display name of the IoT site
	DisplayName pulumi.StringInput
	// Defender for IoT location
	IotDefenderLocation pulumi.StringInput
	// Site Name
	SiteName pulumi.StringPtrInput
	// Tags of the IoT site
	Tags pulumi.StringMapInput
}

func (LocationSiteArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*locationSiteArgs)(nil)).Elem()
}

type LocationSiteInput interface {
	pulumi.Input

	ToLocationSiteOutput() LocationSiteOutput
	ToLocationSiteOutputWithContext(ctx context.Context) LocationSiteOutput
}

func (*LocationSite) ElementType() reflect.Type {
	return reflect.TypeOf((*LocationSite)(nil))
}

func (i *LocationSite) ToLocationSiteOutput() LocationSiteOutput {
	return i.ToLocationSiteOutputWithContext(context.Background())
}

func (i *LocationSite) ToLocationSiteOutputWithContext(ctx context.Context) LocationSiteOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LocationSiteOutput)
}

type LocationSiteOutput struct{ *pulumi.OutputState }

func (LocationSiteOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LocationSite)(nil))
}

func (o LocationSiteOutput) ToLocationSiteOutput() LocationSiteOutput {
	return o
}

func (o LocationSiteOutput) ToLocationSiteOutputWithContext(ctx context.Context) LocationSiteOutput {
	return o
}

func init() {
	pulumi.RegisterOutputType(LocationSiteOutput{})
}
