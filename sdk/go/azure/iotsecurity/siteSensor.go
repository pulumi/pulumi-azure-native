// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package iotsecurity

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// IoT sensor model
// API Version: 2021-09-01-preview.
type SiteSensor struct {
	pulumi.CustomResourceState

	// Last connectivity time of the IoT sensor
	ConnectivityTime pulumi.StringOutput `pulumi:"connectivityTime"`
	// Dynamic mode status of the IoT sensor
	DynamicLearning pulumi.BoolOutput `pulumi:"dynamicLearning"`
	// Learning mode status of the IoT sensor
	LearningMode pulumi.BoolOutput `pulumi:"learningMode"`
	// The name of the resource
	Name pulumi.StringOutput `pulumi:"name"`
	// Status of the IoT sensor
	SensorStatus pulumi.StringOutput `pulumi:"sensorStatus"`
	// Type of sensor
	SensorType pulumi.StringPtrOutput `pulumi:"sensorType"`
	// Version of the IoT sensor
	SensorVersion pulumi.StringOutput `pulumi:"sensorVersion"`
	// Azure Resource Manager metadata containing createdBy and modifiedBy information.
	SystemData SystemDataResponseOutput `pulumi:"systemData"`
	// TI Automatic mode status of the IoT sensor
	TiAutomaticUpdates pulumi.BoolPtrOutput `pulumi:"tiAutomaticUpdates"`
	// TI Status of the IoT sensor
	TiStatus pulumi.StringOutput `pulumi:"tiStatus"`
	// TI Version of the IoT sensor
	TiVersion pulumi.StringOutput `pulumi:"tiVersion"`
	// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
	Type pulumi.StringOutput `pulumi:"type"`
	// Zone of the IoT sensor
	Zone pulumi.StringPtrOutput `pulumi:"zone"`
}

// NewSiteSensor registers a new resource with the given unique name, arguments, and options.
func NewSiteSensor(ctx *pulumi.Context,
	name string, args *SiteSensorArgs, opts ...pulumi.ResourceOption) (*SiteSensor, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.IotDefenderLocation == nil {
		return nil, errors.New("invalid value for required argument 'IotDefenderLocation'")
	}
	if args.SiteName == nil {
		return nil, errors.New("invalid value for required argument 'SiteName'")
	}
	aliases := pulumi.Aliases([]pulumi.Alias{
		{
			Type: pulumi.String("azure-nextgen:iotsecurity:SiteSensor"),
		},
		{
			Type: pulumi.String("azure-native:iotsecurity/v20210901preview:SiteSensor"),
		},
		{
			Type: pulumi.String("azure-nextgen:iotsecurity/v20210901preview:SiteSensor"),
		},
	})
	opts = append(opts, aliases)
	var resource SiteSensor
	err := ctx.RegisterResource("azure-native:iotsecurity:SiteSensor", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSiteSensor gets an existing SiteSensor resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSiteSensor(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SiteSensorState, opts ...pulumi.ResourceOption) (*SiteSensor, error) {
	var resource SiteSensor
	err := ctx.ReadResource("azure-native:iotsecurity:SiteSensor", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SiteSensor resources.
type siteSensorState struct {
}

type SiteSensorState struct {
}

func (SiteSensorState) ElementType() reflect.Type {
	return reflect.TypeOf((*siteSensorState)(nil)).Elem()
}

type siteSensorArgs struct {
	// Defender for IoT location
	IotDefenderLocation string `pulumi:"iotDefenderLocation"`
	// Name of the IoT sensor
	SensorName *string `pulumi:"sensorName"`
	// Type of sensor
	SensorType *string `pulumi:"sensorType"`
	// Site Name
	SiteName string `pulumi:"siteName"`
	// TI Automatic mode status of the IoT sensor
	TiAutomaticUpdates *bool `pulumi:"tiAutomaticUpdates"`
	// Zone of the IoT sensor
	Zone *string `pulumi:"zone"`
}

// The set of arguments for constructing a SiteSensor resource.
type SiteSensorArgs struct {
	// Defender for IoT location
	IotDefenderLocation pulumi.StringInput
	// Name of the IoT sensor
	SensorName pulumi.StringPtrInput
	// Type of sensor
	SensorType pulumi.StringPtrInput
	// Site Name
	SiteName pulumi.StringInput
	// TI Automatic mode status of the IoT sensor
	TiAutomaticUpdates pulumi.BoolPtrInput
	// Zone of the IoT sensor
	Zone pulumi.StringPtrInput
}

func (SiteSensorArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*siteSensorArgs)(nil)).Elem()
}

type SiteSensorInput interface {
	pulumi.Input

	ToSiteSensorOutput() SiteSensorOutput
	ToSiteSensorOutputWithContext(ctx context.Context) SiteSensorOutput
}

func (*SiteSensor) ElementType() reflect.Type {
	return reflect.TypeOf((*SiteSensor)(nil))
}

func (i *SiteSensor) ToSiteSensorOutput() SiteSensorOutput {
	return i.ToSiteSensorOutputWithContext(context.Background())
}

func (i *SiteSensor) ToSiteSensorOutputWithContext(ctx context.Context) SiteSensorOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SiteSensorOutput)
}

type SiteSensorOutput struct {
	*pulumi.OutputState
}

func (SiteSensorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SiteSensor)(nil))
}

func (o SiteSensorOutput) ToSiteSensorOutput() SiteSensorOutput {
	return o
}

func (o SiteSensorOutput) ToSiteSensorOutputWithContext(ctx context.Context) SiteSensorOutput {
	return o
}

func init() {
	pulumi.RegisterOutputType(SiteSensorOutput{})
}
