// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package iotsecurity

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// On-premise IoT sensor
// API Version: 2021-02-01-preview.
type OnPremiseSensor struct {
	pulumi.CustomResourceState

	// The name of the resource
	Name pulumi.StringOutput `pulumi:"name"`
	// Azure Resource Manager metadata containing createdBy and modifiedBy information.
	SystemData SystemDataResponseOutput `pulumi:"systemData"`
	// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
	Type pulumi.StringOutput `pulumi:"type"`
}

// NewOnPremiseSensor registers a new resource with the given unique name, arguments, and options.
func NewOnPremiseSensor(ctx *pulumi.Context,
	name string, args *OnPremiseSensorArgs, opts ...pulumi.ResourceOption) (*OnPremiseSensor, error) {
	if args == nil {
		args = &OnPremiseSensorArgs{}
	}

	aliases := pulumi.Aliases([]pulumi.Alias{
		{
			Type: pulumi.String("azure-native:iotsecurity/v20210201preview:OnPremiseSensor"),
		},
	})
	opts = append(opts, aliases)
	var resource OnPremiseSensor
	err := ctx.RegisterResource("azure-native:iotsecurity:OnPremiseSensor", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetOnPremiseSensor gets an existing OnPremiseSensor resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetOnPremiseSensor(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *OnPremiseSensorState, opts ...pulumi.ResourceOption) (*OnPremiseSensor, error) {
	var resource OnPremiseSensor
	err := ctx.ReadResource("azure-native:iotsecurity:OnPremiseSensor", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering OnPremiseSensor resources.
type onPremiseSensorState struct {
}

type OnPremiseSensorState struct {
}

func (OnPremiseSensorState) ElementType() reflect.Type {
	return reflect.TypeOf((*onPremiseSensorState)(nil)).Elem()
}

type onPremiseSensorArgs struct {
	// Name of the on-premise IoT sensor
	OnPremiseSensorName *string `pulumi:"onPremiseSensorName"`
}

// The set of arguments for constructing a OnPremiseSensor resource.
type OnPremiseSensorArgs struct {
	// Name of the on-premise IoT sensor
	OnPremiseSensorName pulumi.StringPtrInput
}

func (OnPremiseSensorArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*onPremiseSensorArgs)(nil)).Elem()
}

type OnPremiseSensorInput interface {
	pulumi.Input

	ToOnPremiseSensorOutput() OnPremiseSensorOutput
	ToOnPremiseSensorOutputWithContext(ctx context.Context) OnPremiseSensorOutput
}

func (*OnPremiseSensor) ElementType() reflect.Type {
	return reflect.TypeOf((**OnPremiseSensor)(nil)).Elem()
}

func (i *OnPremiseSensor) ToOnPremiseSensorOutput() OnPremiseSensorOutput {
	return i.ToOnPremiseSensorOutputWithContext(context.Background())
}

func (i *OnPremiseSensor) ToOnPremiseSensorOutputWithContext(ctx context.Context) OnPremiseSensorOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OnPremiseSensorOutput)
}

type OnPremiseSensorOutput struct{ *pulumi.OutputState }

func (OnPremiseSensorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**OnPremiseSensor)(nil)).Elem()
}

func (o OnPremiseSensorOutput) ToOnPremiseSensorOutput() OnPremiseSensorOutput {
	return o
}

func (o OnPremiseSensorOutput) ToOnPremiseSensorOutputWithContext(ctx context.Context) OnPremiseSensorOutput {
	return o
}

// The name of the resource
func (o OnPremiseSensorOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *OnPremiseSensor) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Azure Resource Manager metadata containing createdBy and modifiedBy information.
func (o OnPremiseSensorOutput) SystemData() SystemDataResponseOutput {
	return o.ApplyT(func(v *OnPremiseSensor) SystemDataResponseOutput { return v.SystemData }).(SystemDataResponseOutput)
}

// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
func (o OnPremiseSensorOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *OnPremiseSensor) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(OnPremiseSensorOutput{})
}
