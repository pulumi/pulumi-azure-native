// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v20151101preview

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// Parameter to pass to ARM template
type ArmTemplateParameter struct {
	// name of the parameter.
	Name *string `pulumi:"name"`
	// value for the parameter. In Jtoken
	Value *string `pulumi:"value"`
}

// ArmTemplateParameterInput is an input type that accepts ArmTemplateParameterArgs and ArmTemplateParameterOutput values.
// You can construct a concrete instance of `ArmTemplateParameterInput` via:
//
//          ArmTemplateParameterArgs{...}
type ArmTemplateParameterInput interface {
	pulumi.Input

	ToArmTemplateParameterOutput() ArmTemplateParameterOutput
	ToArmTemplateParameterOutputWithContext(context.Context) ArmTemplateParameterOutput
}

// Parameter to pass to ARM template
type ArmTemplateParameterArgs struct {
	// name of the parameter.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// value for the parameter. In Jtoken
	Value pulumi.StringPtrInput `pulumi:"value"`
}

func (ArmTemplateParameterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ArmTemplateParameter)(nil)).Elem()
}

func (i ArmTemplateParameterArgs) ToArmTemplateParameterOutput() ArmTemplateParameterOutput {
	return i.ToArmTemplateParameterOutputWithContext(context.Background())
}

func (i ArmTemplateParameterArgs) ToArmTemplateParameterOutputWithContext(ctx context.Context) ArmTemplateParameterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ArmTemplateParameterOutput)
}

// ArmTemplateParameterArrayInput is an input type that accepts ArmTemplateParameterArray and ArmTemplateParameterArrayOutput values.
// You can construct a concrete instance of `ArmTemplateParameterArrayInput` via:
//
//          ArmTemplateParameterArray{ ArmTemplateParameterArgs{...} }
type ArmTemplateParameterArrayInput interface {
	pulumi.Input

	ToArmTemplateParameterArrayOutput() ArmTemplateParameterArrayOutput
	ToArmTemplateParameterArrayOutputWithContext(context.Context) ArmTemplateParameterArrayOutput
}

type ArmTemplateParameterArray []ArmTemplateParameterInput

func (ArmTemplateParameterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ArmTemplateParameter)(nil)).Elem()
}

func (i ArmTemplateParameterArray) ToArmTemplateParameterArrayOutput() ArmTemplateParameterArrayOutput {
	return i.ToArmTemplateParameterArrayOutputWithContext(context.Background())
}

func (i ArmTemplateParameterArray) ToArmTemplateParameterArrayOutputWithContext(ctx context.Context) ArmTemplateParameterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ArmTemplateParameterArrayOutput)
}

// Parameter to pass to ARM template
type ArmTemplateParameterOutput struct{ *pulumi.OutputState }

func (ArmTemplateParameterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ArmTemplateParameter)(nil)).Elem()
}

func (o ArmTemplateParameterOutput) ToArmTemplateParameterOutput() ArmTemplateParameterOutput {
	return o
}

func (o ArmTemplateParameterOutput) ToArmTemplateParameterOutputWithContext(ctx context.Context) ArmTemplateParameterOutput {
	return o
}

// name of the parameter.
func (o ArmTemplateParameterOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ArmTemplateParameter) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// value for the parameter. In Jtoken
func (o ArmTemplateParameterOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ArmTemplateParameter) *string { return v.Value }).(pulumi.StringPtrOutput)
}

type ArmTemplateParameterArrayOutput struct{ *pulumi.OutputState }

func (ArmTemplateParameterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ArmTemplateParameter)(nil)).Elem()
}

func (o ArmTemplateParameterArrayOutput) ToArmTemplateParameterArrayOutput() ArmTemplateParameterArrayOutput {
	return o
}

func (o ArmTemplateParameterArrayOutput) ToArmTemplateParameterArrayOutputWithContext(ctx context.Context) ArmTemplateParameterArrayOutput {
	return o
}

func (o ArmTemplateParameterArrayOutput) Index(i pulumi.IntInput) ArmTemplateParameterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ArmTemplateParameter {
		return vs[0].([]ArmTemplateParameter)[vs[1].(int)]
	}).(ArmTemplateParameterOutput)
}

// Parameter to pass to ARM template
type ArmTemplateParameterResponse struct {
	// name of the parameter.
	Name *string `pulumi:"name"`
	// value for the parameter. In Jtoken
	Value *string `pulumi:"value"`
}

// ArmTemplateParameterResponseInput is an input type that accepts ArmTemplateParameterResponseArgs and ArmTemplateParameterResponseOutput values.
// You can construct a concrete instance of `ArmTemplateParameterResponseInput` via:
//
//          ArmTemplateParameterResponseArgs{...}
type ArmTemplateParameterResponseInput interface {
	pulumi.Input

	ToArmTemplateParameterResponseOutput() ArmTemplateParameterResponseOutput
	ToArmTemplateParameterResponseOutputWithContext(context.Context) ArmTemplateParameterResponseOutput
}

// Parameter to pass to ARM template
type ArmTemplateParameterResponseArgs struct {
	// name of the parameter.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// value for the parameter. In Jtoken
	Value pulumi.StringPtrInput `pulumi:"value"`
}

func (ArmTemplateParameterResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ArmTemplateParameterResponse)(nil)).Elem()
}

func (i ArmTemplateParameterResponseArgs) ToArmTemplateParameterResponseOutput() ArmTemplateParameterResponseOutput {
	return i.ToArmTemplateParameterResponseOutputWithContext(context.Background())
}

func (i ArmTemplateParameterResponseArgs) ToArmTemplateParameterResponseOutputWithContext(ctx context.Context) ArmTemplateParameterResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ArmTemplateParameterResponseOutput)
}

// ArmTemplateParameterResponseArrayInput is an input type that accepts ArmTemplateParameterResponseArray and ArmTemplateParameterResponseArrayOutput values.
// You can construct a concrete instance of `ArmTemplateParameterResponseArrayInput` via:
//
//          ArmTemplateParameterResponseArray{ ArmTemplateParameterResponseArgs{...} }
type ArmTemplateParameterResponseArrayInput interface {
	pulumi.Input

	ToArmTemplateParameterResponseArrayOutput() ArmTemplateParameterResponseArrayOutput
	ToArmTemplateParameterResponseArrayOutputWithContext(context.Context) ArmTemplateParameterResponseArrayOutput
}

type ArmTemplateParameterResponseArray []ArmTemplateParameterResponseInput

func (ArmTemplateParameterResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ArmTemplateParameterResponse)(nil)).Elem()
}

func (i ArmTemplateParameterResponseArray) ToArmTemplateParameterResponseArrayOutput() ArmTemplateParameterResponseArrayOutput {
	return i.ToArmTemplateParameterResponseArrayOutputWithContext(context.Background())
}

func (i ArmTemplateParameterResponseArray) ToArmTemplateParameterResponseArrayOutputWithContext(ctx context.Context) ArmTemplateParameterResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ArmTemplateParameterResponseArrayOutput)
}

// Parameter to pass to ARM template
type ArmTemplateParameterResponseOutput struct{ *pulumi.OutputState }

func (ArmTemplateParameterResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ArmTemplateParameterResponse)(nil)).Elem()
}

func (o ArmTemplateParameterResponseOutput) ToArmTemplateParameterResponseOutput() ArmTemplateParameterResponseOutput {
	return o
}

func (o ArmTemplateParameterResponseOutput) ToArmTemplateParameterResponseOutputWithContext(ctx context.Context) ArmTemplateParameterResponseOutput {
	return o
}

// name of the parameter.
func (o ArmTemplateParameterResponseOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ArmTemplateParameterResponse) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// value for the parameter. In Jtoken
func (o ArmTemplateParameterResponseOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ArmTemplateParameterResponse) *string { return v.Value }).(pulumi.StringPtrOutput)
}

type ArmTemplateParameterResponseArrayOutput struct{ *pulumi.OutputState }

func (ArmTemplateParameterResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ArmTemplateParameterResponse)(nil)).Elem()
}

func (o ArmTemplateParameterResponseArrayOutput) ToArmTemplateParameterResponseArrayOutput() ArmTemplateParameterResponseArrayOutput {
	return o
}

func (o ArmTemplateParameterResponseArrayOutput) ToArmTemplateParameterResponseArrayOutputWithContext(ctx context.Context) ArmTemplateParameterResponseArrayOutput {
	return o
}

func (o ArmTemplateParameterResponseArrayOutput) Index(i pulumi.IntInput) ArmTemplateParameterResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ArmTemplateParameterResponse {
		return vs[0].([]ArmTemplateParameterResponse)[vs[1].(int)]
	}).(ArmTemplateParameterResponseOutput)
}

// ManagementAssociation properties supported by the OperationsManagement resource provider.
type ManagementAssociationProperties struct {
	// The applicationId of the appliance for this association.
	ApplicationId string `pulumi:"applicationId"`
}

// ManagementAssociationPropertiesInput is an input type that accepts ManagementAssociationPropertiesArgs and ManagementAssociationPropertiesOutput values.
// You can construct a concrete instance of `ManagementAssociationPropertiesInput` via:
//
//          ManagementAssociationPropertiesArgs{...}
type ManagementAssociationPropertiesInput interface {
	pulumi.Input

	ToManagementAssociationPropertiesOutput() ManagementAssociationPropertiesOutput
	ToManagementAssociationPropertiesOutputWithContext(context.Context) ManagementAssociationPropertiesOutput
}

// ManagementAssociation properties supported by the OperationsManagement resource provider.
type ManagementAssociationPropertiesArgs struct {
	// The applicationId of the appliance for this association.
	ApplicationId pulumi.StringInput `pulumi:"applicationId"`
}

func (ManagementAssociationPropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagementAssociationProperties)(nil)).Elem()
}

func (i ManagementAssociationPropertiesArgs) ToManagementAssociationPropertiesOutput() ManagementAssociationPropertiesOutput {
	return i.ToManagementAssociationPropertiesOutputWithContext(context.Background())
}

func (i ManagementAssociationPropertiesArgs) ToManagementAssociationPropertiesOutputWithContext(ctx context.Context) ManagementAssociationPropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagementAssociationPropertiesOutput)
}

func (i ManagementAssociationPropertiesArgs) ToManagementAssociationPropertiesPtrOutput() ManagementAssociationPropertiesPtrOutput {
	return i.ToManagementAssociationPropertiesPtrOutputWithContext(context.Background())
}

func (i ManagementAssociationPropertiesArgs) ToManagementAssociationPropertiesPtrOutputWithContext(ctx context.Context) ManagementAssociationPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagementAssociationPropertiesOutput).ToManagementAssociationPropertiesPtrOutputWithContext(ctx)
}

// ManagementAssociationPropertiesPtrInput is an input type that accepts ManagementAssociationPropertiesArgs, ManagementAssociationPropertiesPtr and ManagementAssociationPropertiesPtrOutput values.
// You can construct a concrete instance of `ManagementAssociationPropertiesPtrInput` via:
//
//          ManagementAssociationPropertiesArgs{...}
//
//  or:
//
//          nil
type ManagementAssociationPropertiesPtrInput interface {
	pulumi.Input

	ToManagementAssociationPropertiesPtrOutput() ManagementAssociationPropertiesPtrOutput
	ToManagementAssociationPropertiesPtrOutputWithContext(context.Context) ManagementAssociationPropertiesPtrOutput
}

type managementAssociationPropertiesPtrType ManagementAssociationPropertiesArgs

func ManagementAssociationPropertiesPtr(v *ManagementAssociationPropertiesArgs) ManagementAssociationPropertiesPtrInput {
	return (*managementAssociationPropertiesPtrType)(v)
}

func (*managementAssociationPropertiesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ManagementAssociationProperties)(nil)).Elem()
}

func (i *managementAssociationPropertiesPtrType) ToManagementAssociationPropertiesPtrOutput() ManagementAssociationPropertiesPtrOutput {
	return i.ToManagementAssociationPropertiesPtrOutputWithContext(context.Background())
}

func (i *managementAssociationPropertiesPtrType) ToManagementAssociationPropertiesPtrOutputWithContext(ctx context.Context) ManagementAssociationPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagementAssociationPropertiesPtrOutput)
}

// ManagementAssociation properties supported by the OperationsManagement resource provider.
type ManagementAssociationPropertiesOutput struct{ *pulumi.OutputState }

func (ManagementAssociationPropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagementAssociationProperties)(nil)).Elem()
}

func (o ManagementAssociationPropertiesOutput) ToManagementAssociationPropertiesOutput() ManagementAssociationPropertiesOutput {
	return o
}

func (o ManagementAssociationPropertiesOutput) ToManagementAssociationPropertiesOutputWithContext(ctx context.Context) ManagementAssociationPropertiesOutput {
	return o
}

func (o ManagementAssociationPropertiesOutput) ToManagementAssociationPropertiesPtrOutput() ManagementAssociationPropertiesPtrOutput {
	return o.ToManagementAssociationPropertiesPtrOutputWithContext(context.Background())
}

func (o ManagementAssociationPropertiesOutput) ToManagementAssociationPropertiesPtrOutputWithContext(ctx context.Context) ManagementAssociationPropertiesPtrOutput {
	return o.ApplyT(func(v ManagementAssociationProperties) *ManagementAssociationProperties {
		return &v
	}).(ManagementAssociationPropertiesPtrOutput)
}

// The applicationId of the appliance for this association.
func (o ManagementAssociationPropertiesOutput) ApplicationId() pulumi.StringOutput {
	return o.ApplyT(func(v ManagementAssociationProperties) string { return v.ApplicationId }).(pulumi.StringOutput)
}

type ManagementAssociationPropertiesPtrOutput struct{ *pulumi.OutputState }

func (ManagementAssociationPropertiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ManagementAssociationProperties)(nil)).Elem()
}

func (o ManagementAssociationPropertiesPtrOutput) ToManagementAssociationPropertiesPtrOutput() ManagementAssociationPropertiesPtrOutput {
	return o
}

func (o ManagementAssociationPropertiesPtrOutput) ToManagementAssociationPropertiesPtrOutputWithContext(ctx context.Context) ManagementAssociationPropertiesPtrOutput {
	return o
}

func (o ManagementAssociationPropertiesPtrOutput) Elem() ManagementAssociationPropertiesOutput {
	return o.ApplyT(func(v *ManagementAssociationProperties) ManagementAssociationProperties { return *v }).(ManagementAssociationPropertiesOutput)
}

// The applicationId of the appliance for this association.
func (o ManagementAssociationPropertiesPtrOutput) ApplicationId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ManagementAssociationProperties) *string {
		if v == nil {
			return nil
		}
		return &v.ApplicationId
	}).(pulumi.StringPtrOutput)
}

// ManagementAssociation properties supported by the OperationsManagement resource provider.
type ManagementAssociationPropertiesResponse struct {
	// The applicationId of the appliance for this association.
	ApplicationId string `pulumi:"applicationId"`
}

// ManagementAssociationPropertiesResponseInput is an input type that accepts ManagementAssociationPropertiesResponseArgs and ManagementAssociationPropertiesResponseOutput values.
// You can construct a concrete instance of `ManagementAssociationPropertiesResponseInput` via:
//
//          ManagementAssociationPropertiesResponseArgs{...}
type ManagementAssociationPropertiesResponseInput interface {
	pulumi.Input

	ToManagementAssociationPropertiesResponseOutput() ManagementAssociationPropertiesResponseOutput
	ToManagementAssociationPropertiesResponseOutputWithContext(context.Context) ManagementAssociationPropertiesResponseOutput
}

// ManagementAssociation properties supported by the OperationsManagement resource provider.
type ManagementAssociationPropertiesResponseArgs struct {
	// The applicationId of the appliance for this association.
	ApplicationId pulumi.StringInput `pulumi:"applicationId"`
}

func (ManagementAssociationPropertiesResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagementAssociationPropertiesResponse)(nil)).Elem()
}

func (i ManagementAssociationPropertiesResponseArgs) ToManagementAssociationPropertiesResponseOutput() ManagementAssociationPropertiesResponseOutput {
	return i.ToManagementAssociationPropertiesResponseOutputWithContext(context.Background())
}

func (i ManagementAssociationPropertiesResponseArgs) ToManagementAssociationPropertiesResponseOutputWithContext(ctx context.Context) ManagementAssociationPropertiesResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagementAssociationPropertiesResponseOutput)
}

func (i ManagementAssociationPropertiesResponseArgs) ToManagementAssociationPropertiesResponsePtrOutput() ManagementAssociationPropertiesResponsePtrOutput {
	return i.ToManagementAssociationPropertiesResponsePtrOutputWithContext(context.Background())
}

func (i ManagementAssociationPropertiesResponseArgs) ToManagementAssociationPropertiesResponsePtrOutputWithContext(ctx context.Context) ManagementAssociationPropertiesResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagementAssociationPropertiesResponseOutput).ToManagementAssociationPropertiesResponsePtrOutputWithContext(ctx)
}

// ManagementAssociationPropertiesResponsePtrInput is an input type that accepts ManagementAssociationPropertiesResponseArgs, ManagementAssociationPropertiesResponsePtr and ManagementAssociationPropertiesResponsePtrOutput values.
// You can construct a concrete instance of `ManagementAssociationPropertiesResponsePtrInput` via:
//
//          ManagementAssociationPropertiesResponseArgs{...}
//
//  or:
//
//          nil
type ManagementAssociationPropertiesResponsePtrInput interface {
	pulumi.Input

	ToManagementAssociationPropertiesResponsePtrOutput() ManagementAssociationPropertiesResponsePtrOutput
	ToManagementAssociationPropertiesResponsePtrOutputWithContext(context.Context) ManagementAssociationPropertiesResponsePtrOutput
}

type managementAssociationPropertiesResponsePtrType ManagementAssociationPropertiesResponseArgs

func ManagementAssociationPropertiesResponsePtr(v *ManagementAssociationPropertiesResponseArgs) ManagementAssociationPropertiesResponsePtrInput {
	return (*managementAssociationPropertiesResponsePtrType)(v)
}

func (*managementAssociationPropertiesResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ManagementAssociationPropertiesResponse)(nil)).Elem()
}

func (i *managementAssociationPropertiesResponsePtrType) ToManagementAssociationPropertiesResponsePtrOutput() ManagementAssociationPropertiesResponsePtrOutput {
	return i.ToManagementAssociationPropertiesResponsePtrOutputWithContext(context.Background())
}

func (i *managementAssociationPropertiesResponsePtrType) ToManagementAssociationPropertiesResponsePtrOutputWithContext(ctx context.Context) ManagementAssociationPropertiesResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagementAssociationPropertiesResponsePtrOutput)
}

// ManagementAssociation properties supported by the OperationsManagement resource provider.
type ManagementAssociationPropertiesResponseOutput struct{ *pulumi.OutputState }

func (ManagementAssociationPropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagementAssociationPropertiesResponse)(nil)).Elem()
}

func (o ManagementAssociationPropertiesResponseOutput) ToManagementAssociationPropertiesResponseOutput() ManagementAssociationPropertiesResponseOutput {
	return o
}

func (o ManagementAssociationPropertiesResponseOutput) ToManagementAssociationPropertiesResponseOutputWithContext(ctx context.Context) ManagementAssociationPropertiesResponseOutput {
	return o
}

func (o ManagementAssociationPropertiesResponseOutput) ToManagementAssociationPropertiesResponsePtrOutput() ManagementAssociationPropertiesResponsePtrOutput {
	return o.ToManagementAssociationPropertiesResponsePtrOutputWithContext(context.Background())
}

func (o ManagementAssociationPropertiesResponseOutput) ToManagementAssociationPropertiesResponsePtrOutputWithContext(ctx context.Context) ManagementAssociationPropertiesResponsePtrOutput {
	return o.ApplyT(func(v ManagementAssociationPropertiesResponse) *ManagementAssociationPropertiesResponse {
		return &v
	}).(ManagementAssociationPropertiesResponsePtrOutput)
}

// The applicationId of the appliance for this association.
func (o ManagementAssociationPropertiesResponseOutput) ApplicationId() pulumi.StringOutput {
	return o.ApplyT(func(v ManagementAssociationPropertiesResponse) string { return v.ApplicationId }).(pulumi.StringOutput)
}

type ManagementAssociationPropertiesResponsePtrOutput struct{ *pulumi.OutputState }

func (ManagementAssociationPropertiesResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ManagementAssociationPropertiesResponse)(nil)).Elem()
}

func (o ManagementAssociationPropertiesResponsePtrOutput) ToManagementAssociationPropertiesResponsePtrOutput() ManagementAssociationPropertiesResponsePtrOutput {
	return o
}

func (o ManagementAssociationPropertiesResponsePtrOutput) ToManagementAssociationPropertiesResponsePtrOutputWithContext(ctx context.Context) ManagementAssociationPropertiesResponsePtrOutput {
	return o
}

func (o ManagementAssociationPropertiesResponsePtrOutput) Elem() ManagementAssociationPropertiesResponseOutput {
	return o.ApplyT(func(v *ManagementAssociationPropertiesResponse) ManagementAssociationPropertiesResponse { return *v }).(ManagementAssociationPropertiesResponseOutput)
}

// The applicationId of the appliance for this association.
func (o ManagementAssociationPropertiesResponsePtrOutput) ApplicationId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ManagementAssociationPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return &v.ApplicationId
	}).(pulumi.StringPtrOutput)
}

// ManagementConfiguration properties supported by the OperationsManagement resource provider.
type ManagementConfigurationProperties struct {
	// The applicationId of the appliance for this Management.
	ApplicationId *string `pulumi:"applicationId"`
	// Parameters to run the ARM template
	Parameters []ArmTemplateParameter `pulumi:"parameters"`
	// The type of the parent resource.
	ParentResourceType string `pulumi:"parentResourceType"`
	// The Json object containing the ARM template to deploy
	Template interface{} `pulumi:"template"`
}

// ManagementConfigurationPropertiesInput is an input type that accepts ManagementConfigurationPropertiesArgs and ManagementConfigurationPropertiesOutput values.
// You can construct a concrete instance of `ManagementConfigurationPropertiesInput` via:
//
//          ManagementConfigurationPropertiesArgs{...}
type ManagementConfigurationPropertiesInput interface {
	pulumi.Input

	ToManagementConfigurationPropertiesOutput() ManagementConfigurationPropertiesOutput
	ToManagementConfigurationPropertiesOutputWithContext(context.Context) ManagementConfigurationPropertiesOutput
}

// ManagementConfiguration properties supported by the OperationsManagement resource provider.
type ManagementConfigurationPropertiesArgs struct {
	// The applicationId of the appliance for this Management.
	ApplicationId pulumi.StringPtrInput `pulumi:"applicationId"`
	// Parameters to run the ARM template
	Parameters ArmTemplateParameterArrayInput `pulumi:"parameters"`
	// The type of the parent resource.
	ParentResourceType pulumi.StringInput `pulumi:"parentResourceType"`
	// The Json object containing the ARM template to deploy
	Template pulumi.Input `pulumi:"template"`
}

func (ManagementConfigurationPropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagementConfigurationProperties)(nil)).Elem()
}

func (i ManagementConfigurationPropertiesArgs) ToManagementConfigurationPropertiesOutput() ManagementConfigurationPropertiesOutput {
	return i.ToManagementConfigurationPropertiesOutputWithContext(context.Background())
}

func (i ManagementConfigurationPropertiesArgs) ToManagementConfigurationPropertiesOutputWithContext(ctx context.Context) ManagementConfigurationPropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagementConfigurationPropertiesOutput)
}

func (i ManagementConfigurationPropertiesArgs) ToManagementConfigurationPropertiesPtrOutput() ManagementConfigurationPropertiesPtrOutput {
	return i.ToManagementConfigurationPropertiesPtrOutputWithContext(context.Background())
}

func (i ManagementConfigurationPropertiesArgs) ToManagementConfigurationPropertiesPtrOutputWithContext(ctx context.Context) ManagementConfigurationPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagementConfigurationPropertiesOutput).ToManagementConfigurationPropertiesPtrOutputWithContext(ctx)
}

// ManagementConfigurationPropertiesPtrInput is an input type that accepts ManagementConfigurationPropertiesArgs, ManagementConfigurationPropertiesPtr and ManagementConfigurationPropertiesPtrOutput values.
// You can construct a concrete instance of `ManagementConfigurationPropertiesPtrInput` via:
//
//          ManagementConfigurationPropertiesArgs{...}
//
//  or:
//
//          nil
type ManagementConfigurationPropertiesPtrInput interface {
	pulumi.Input

	ToManagementConfigurationPropertiesPtrOutput() ManagementConfigurationPropertiesPtrOutput
	ToManagementConfigurationPropertiesPtrOutputWithContext(context.Context) ManagementConfigurationPropertiesPtrOutput
}

type managementConfigurationPropertiesPtrType ManagementConfigurationPropertiesArgs

func ManagementConfigurationPropertiesPtr(v *ManagementConfigurationPropertiesArgs) ManagementConfigurationPropertiesPtrInput {
	return (*managementConfigurationPropertiesPtrType)(v)
}

func (*managementConfigurationPropertiesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ManagementConfigurationProperties)(nil)).Elem()
}

func (i *managementConfigurationPropertiesPtrType) ToManagementConfigurationPropertiesPtrOutput() ManagementConfigurationPropertiesPtrOutput {
	return i.ToManagementConfigurationPropertiesPtrOutputWithContext(context.Background())
}

func (i *managementConfigurationPropertiesPtrType) ToManagementConfigurationPropertiesPtrOutputWithContext(ctx context.Context) ManagementConfigurationPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagementConfigurationPropertiesPtrOutput)
}

// ManagementConfiguration properties supported by the OperationsManagement resource provider.
type ManagementConfigurationPropertiesOutput struct{ *pulumi.OutputState }

func (ManagementConfigurationPropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagementConfigurationProperties)(nil)).Elem()
}

func (o ManagementConfigurationPropertiesOutput) ToManagementConfigurationPropertiesOutput() ManagementConfigurationPropertiesOutput {
	return o
}

func (o ManagementConfigurationPropertiesOutput) ToManagementConfigurationPropertiesOutputWithContext(ctx context.Context) ManagementConfigurationPropertiesOutput {
	return o
}

func (o ManagementConfigurationPropertiesOutput) ToManagementConfigurationPropertiesPtrOutput() ManagementConfigurationPropertiesPtrOutput {
	return o.ToManagementConfigurationPropertiesPtrOutputWithContext(context.Background())
}

func (o ManagementConfigurationPropertiesOutput) ToManagementConfigurationPropertiesPtrOutputWithContext(ctx context.Context) ManagementConfigurationPropertiesPtrOutput {
	return o.ApplyT(func(v ManagementConfigurationProperties) *ManagementConfigurationProperties {
		return &v
	}).(ManagementConfigurationPropertiesPtrOutput)
}

// The applicationId of the appliance for this Management.
func (o ManagementConfigurationPropertiesOutput) ApplicationId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagementConfigurationProperties) *string { return v.ApplicationId }).(pulumi.StringPtrOutput)
}

// Parameters to run the ARM template
func (o ManagementConfigurationPropertiesOutput) Parameters() ArmTemplateParameterArrayOutput {
	return o.ApplyT(func(v ManagementConfigurationProperties) []ArmTemplateParameter { return v.Parameters }).(ArmTemplateParameterArrayOutput)
}

// The type of the parent resource.
func (o ManagementConfigurationPropertiesOutput) ParentResourceType() pulumi.StringOutput {
	return o.ApplyT(func(v ManagementConfigurationProperties) string { return v.ParentResourceType }).(pulumi.StringOutput)
}

// The Json object containing the ARM template to deploy
func (o ManagementConfigurationPropertiesOutput) Template() pulumi.AnyOutput {
	return o.ApplyT(func(v ManagementConfigurationProperties) interface{} { return v.Template }).(pulumi.AnyOutput)
}

type ManagementConfigurationPropertiesPtrOutput struct{ *pulumi.OutputState }

func (ManagementConfigurationPropertiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ManagementConfigurationProperties)(nil)).Elem()
}

func (o ManagementConfigurationPropertiesPtrOutput) ToManagementConfigurationPropertiesPtrOutput() ManagementConfigurationPropertiesPtrOutput {
	return o
}

func (o ManagementConfigurationPropertiesPtrOutput) ToManagementConfigurationPropertiesPtrOutputWithContext(ctx context.Context) ManagementConfigurationPropertiesPtrOutput {
	return o
}

func (o ManagementConfigurationPropertiesPtrOutput) Elem() ManagementConfigurationPropertiesOutput {
	return o.ApplyT(func(v *ManagementConfigurationProperties) ManagementConfigurationProperties { return *v }).(ManagementConfigurationPropertiesOutput)
}

// The applicationId of the appliance for this Management.
func (o ManagementConfigurationPropertiesPtrOutput) ApplicationId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ManagementConfigurationProperties) *string {
		if v == nil {
			return nil
		}
		return v.ApplicationId
	}).(pulumi.StringPtrOutput)
}

// Parameters to run the ARM template
func (o ManagementConfigurationPropertiesPtrOutput) Parameters() ArmTemplateParameterArrayOutput {
	return o.ApplyT(func(v *ManagementConfigurationProperties) []ArmTemplateParameter {
		if v == nil {
			return nil
		}
		return v.Parameters
	}).(ArmTemplateParameterArrayOutput)
}

// The type of the parent resource.
func (o ManagementConfigurationPropertiesPtrOutput) ParentResourceType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ManagementConfigurationProperties) *string {
		if v == nil {
			return nil
		}
		return &v.ParentResourceType
	}).(pulumi.StringPtrOutput)
}

// The Json object containing the ARM template to deploy
func (o ManagementConfigurationPropertiesPtrOutput) Template() pulumi.AnyOutput {
	return o.ApplyT(func(v *ManagementConfigurationProperties) interface{} {
		if v == nil {
			return nil
		}
		return v.Template
	}).(pulumi.AnyOutput)
}

// ManagementConfiguration properties supported by the OperationsManagement resource provider.
type ManagementConfigurationPropertiesResponse struct {
	// The applicationId of the appliance for this Management.
	ApplicationId *string `pulumi:"applicationId"`
	// Parameters to run the ARM template
	Parameters []ArmTemplateParameterResponse `pulumi:"parameters"`
	// The type of the parent resource.
	ParentResourceType string `pulumi:"parentResourceType"`
	// The provisioning state for the ManagementConfiguration.
	ProvisioningState string `pulumi:"provisioningState"`
	// The Json object containing the ARM template to deploy
	Template interface{} `pulumi:"template"`
}

// ManagementConfigurationPropertiesResponseInput is an input type that accepts ManagementConfigurationPropertiesResponseArgs and ManagementConfigurationPropertiesResponseOutput values.
// You can construct a concrete instance of `ManagementConfigurationPropertiesResponseInput` via:
//
//          ManagementConfigurationPropertiesResponseArgs{...}
type ManagementConfigurationPropertiesResponseInput interface {
	pulumi.Input

	ToManagementConfigurationPropertiesResponseOutput() ManagementConfigurationPropertiesResponseOutput
	ToManagementConfigurationPropertiesResponseOutputWithContext(context.Context) ManagementConfigurationPropertiesResponseOutput
}

// ManagementConfiguration properties supported by the OperationsManagement resource provider.
type ManagementConfigurationPropertiesResponseArgs struct {
	// The applicationId of the appliance for this Management.
	ApplicationId pulumi.StringPtrInput `pulumi:"applicationId"`
	// Parameters to run the ARM template
	Parameters ArmTemplateParameterResponseArrayInput `pulumi:"parameters"`
	// The type of the parent resource.
	ParentResourceType pulumi.StringInput `pulumi:"parentResourceType"`
	// The provisioning state for the ManagementConfiguration.
	ProvisioningState pulumi.StringInput `pulumi:"provisioningState"`
	// The Json object containing the ARM template to deploy
	Template pulumi.Input `pulumi:"template"`
}

func (ManagementConfigurationPropertiesResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagementConfigurationPropertiesResponse)(nil)).Elem()
}

func (i ManagementConfigurationPropertiesResponseArgs) ToManagementConfigurationPropertiesResponseOutput() ManagementConfigurationPropertiesResponseOutput {
	return i.ToManagementConfigurationPropertiesResponseOutputWithContext(context.Background())
}

func (i ManagementConfigurationPropertiesResponseArgs) ToManagementConfigurationPropertiesResponseOutputWithContext(ctx context.Context) ManagementConfigurationPropertiesResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagementConfigurationPropertiesResponseOutput)
}

func (i ManagementConfigurationPropertiesResponseArgs) ToManagementConfigurationPropertiesResponsePtrOutput() ManagementConfigurationPropertiesResponsePtrOutput {
	return i.ToManagementConfigurationPropertiesResponsePtrOutputWithContext(context.Background())
}

func (i ManagementConfigurationPropertiesResponseArgs) ToManagementConfigurationPropertiesResponsePtrOutputWithContext(ctx context.Context) ManagementConfigurationPropertiesResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagementConfigurationPropertiesResponseOutput).ToManagementConfigurationPropertiesResponsePtrOutputWithContext(ctx)
}

// ManagementConfigurationPropertiesResponsePtrInput is an input type that accepts ManagementConfigurationPropertiesResponseArgs, ManagementConfigurationPropertiesResponsePtr and ManagementConfigurationPropertiesResponsePtrOutput values.
// You can construct a concrete instance of `ManagementConfigurationPropertiesResponsePtrInput` via:
//
//          ManagementConfigurationPropertiesResponseArgs{...}
//
//  or:
//
//          nil
type ManagementConfigurationPropertiesResponsePtrInput interface {
	pulumi.Input

	ToManagementConfigurationPropertiesResponsePtrOutput() ManagementConfigurationPropertiesResponsePtrOutput
	ToManagementConfigurationPropertiesResponsePtrOutputWithContext(context.Context) ManagementConfigurationPropertiesResponsePtrOutput
}

type managementConfigurationPropertiesResponsePtrType ManagementConfigurationPropertiesResponseArgs

func ManagementConfigurationPropertiesResponsePtr(v *ManagementConfigurationPropertiesResponseArgs) ManagementConfigurationPropertiesResponsePtrInput {
	return (*managementConfigurationPropertiesResponsePtrType)(v)
}

func (*managementConfigurationPropertiesResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ManagementConfigurationPropertiesResponse)(nil)).Elem()
}

func (i *managementConfigurationPropertiesResponsePtrType) ToManagementConfigurationPropertiesResponsePtrOutput() ManagementConfigurationPropertiesResponsePtrOutput {
	return i.ToManagementConfigurationPropertiesResponsePtrOutputWithContext(context.Background())
}

func (i *managementConfigurationPropertiesResponsePtrType) ToManagementConfigurationPropertiesResponsePtrOutputWithContext(ctx context.Context) ManagementConfigurationPropertiesResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagementConfigurationPropertiesResponsePtrOutput)
}

// ManagementConfiguration properties supported by the OperationsManagement resource provider.
type ManagementConfigurationPropertiesResponseOutput struct{ *pulumi.OutputState }

func (ManagementConfigurationPropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagementConfigurationPropertiesResponse)(nil)).Elem()
}

func (o ManagementConfigurationPropertiesResponseOutput) ToManagementConfigurationPropertiesResponseOutput() ManagementConfigurationPropertiesResponseOutput {
	return o
}

func (o ManagementConfigurationPropertiesResponseOutput) ToManagementConfigurationPropertiesResponseOutputWithContext(ctx context.Context) ManagementConfigurationPropertiesResponseOutput {
	return o
}

func (o ManagementConfigurationPropertiesResponseOutput) ToManagementConfigurationPropertiesResponsePtrOutput() ManagementConfigurationPropertiesResponsePtrOutput {
	return o.ToManagementConfigurationPropertiesResponsePtrOutputWithContext(context.Background())
}

func (o ManagementConfigurationPropertiesResponseOutput) ToManagementConfigurationPropertiesResponsePtrOutputWithContext(ctx context.Context) ManagementConfigurationPropertiesResponsePtrOutput {
	return o.ApplyT(func(v ManagementConfigurationPropertiesResponse) *ManagementConfigurationPropertiesResponse {
		return &v
	}).(ManagementConfigurationPropertiesResponsePtrOutput)
}

// The applicationId of the appliance for this Management.
func (o ManagementConfigurationPropertiesResponseOutput) ApplicationId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagementConfigurationPropertiesResponse) *string { return v.ApplicationId }).(pulumi.StringPtrOutput)
}

// Parameters to run the ARM template
func (o ManagementConfigurationPropertiesResponseOutput) Parameters() ArmTemplateParameterResponseArrayOutput {
	return o.ApplyT(func(v ManagementConfigurationPropertiesResponse) []ArmTemplateParameterResponse { return v.Parameters }).(ArmTemplateParameterResponseArrayOutput)
}

// The type of the parent resource.
func (o ManagementConfigurationPropertiesResponseOutput) ParentResourceType() pulumi.StringOutput {
	return o.ApplyT(func(v ManagementConfigurationPropertiesResponse) string { return v.ParentResourceType }).(pulumi.StringOutput)
}

// The provisioning state for the ManagementConfiguration.
func (o ManagementConfigurationPropertiesResponseOutput) ProvisioningState() pulumi.StringOutput {
	return o.ApplyT(func(v ManagementConfigurationPropertiesResponse) string { return v.ProvisioningState }).(pulumi.StringOutput)
}

// The Json object containing the ARM template to deploy
func (o ManagementConfigurationPropertiesResponseOutput) Template() pulumi.AnyOutput {
	return o.ApplyT(func(v ManagementConfigurationPropertiesResponse) interface{} { return v.Template }).(pulumi.AnyOutput)
}

type ManagementConfigurationPropertiesResponsePtrOutput struct{ *pulumi.OutputState }

func (ManagementConfigurationPropertiesResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ManagementConfigurationPropertiesResponse)(nil)).Elem()
}

func (o ManagementConfigurationPropertiesResponsePtrOutput) ToManagementConfigurationPropertiesResponsePtrOutput() ManagementConfigurationPropertiesResponsePtrOutput {
	return o
}

func (o ManagementConfigurationPropertiesResponsePtrOutput) ToManagementConfigurationPropertiesResponsePtrOutputWithContext(ctx context.Context) ManagementConfigurationPropertiesResponsePtrOutput {
	return o
}

func (o ManagementConfigurationPropertiesResponsePtrOutput) Elem() ManagementConfigurationPropertiesResponseOutput {
	return o.ApplyT(func(v *ManagementConfigurationPropertiesResponse) ManagementConfigurationPropertiesResponse {
		return *v
	}).(ManagementConfigurationPropertiesResponseOutput)
}

// The applicationId of the appliance for this Management.
func (o ManagementConfigurationPropertiesResponsePtrOutput) ApplicationId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ManagementConfigurationPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return v.ApplicationId
	}).(pulumi.StringPtrOutput)
}

// Parameters to run the ARM template
func (o ManagementConfigurationPropertiesResponsePtrOutput) Parameters() ArmTemplateParameterResponseArrayOutput {
	return o.ApplyT(func(v *ManagementConfigurationPropertiesResponse) []ArmTemplateParameterResponse {
		if v == nil {
			return nil
		}
		return v.Parameters
	}).(ArmTemplateParameterResponseArrayOutput)
}

// The type of the parent resource.
func (o ManagementConfigurationPropertiesResponsePtrOutput) ParentResourceType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ManagementConfigurationPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return &v.ParentResourceType
	}).(pulumi.StringPtrOutput)
}

// The provisioning state for the ManagementConfiguration.
func (o ManagementConfigurationPropertiesResponsePtrOutput) ProvisioningState() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ManagementConfigurationPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return &v.ProvisioningState
	}).(pulumi.StringPtrOutput)
}

// The Json object containing the ARM template to deploy
func (o ManagementConfigurationPropertiesResponsePtrOutput) Template() pulumi.AnyOutput {
	return o.ApplyT(func(v *ManagementConfigurationPropertiesResponse) interface{} {
		if v == nil {
			return nil
		}
		return v.Template
	}).(pulumi.AnyOutput)
}

// Plan for solution object supported by the OperationsManagement resource provider.
type SolutionPlan struct {
	// name of the solution to be created. For Microsoft published solution it should be in the format of solutionType(workspaceName). SolutionType part is case sensitive. For third party solution, it can be anything.
	Name *string `pulumi:"name"`
	// name of the solution to enabled/add. For Microsoft published gallery solution it should be in the format of OMSGallery/<solutionType>. This is case sensitive
	Product *string `pulumi:"product"`
	// promotionCode, Not really used now, can you left as empty
	PromotionCode *string `pulumi:"promotionCode"`
	// Publisher name. For gallery solution, it is Microsoft.
	Publisher *string `pulumi:"publisher"`
}

// SolutionPlanInput is an input type that accepts SolutionPlanArgs and SolutionPlanOutput values.
// You can construct a concrete instance of `SolutionPlanInput` via:
//
//          SolutionPlanArgs{...}
type SolutionPlanInput interface {
	pulumi.Input

	ToSolutionPlanOutput() SolutionPlanOutput
	ToSolutionPlanOutputWithContext(context.Context) SolutionPlanOutput
}

// Plan for solution object supported by the OperationsManagement resource provider.
type SolutionPlanArgs struct {
	// name of the solution to be created. For Microsoft published solution it should be in the format of solutionType(workspaceName). SolutionType part is case sensitive. For third party solution, it can be anything.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// name of the solution to enabled/add. For Microsoft published gallery solution it should be in the format of OMSGallery/<solutionType>. This is case sensitive
	Product pulumi.StringPtrInput `pulumi:"product"`
	// promotionCode, Not really used now, can you left as empty
	PromotionCode pulumi.StringPtrInput `pulumi:"promotionCode"`
	// Publisher name. For gallery solution, it is Microsoft.
	Publisher pulumi.StringPtrInput `pulumi:"publisher"`
}

func (SolutionPlanArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SolutionPlan)(nil)).Elem()
}

func (i SolutionPlanArgs) ToSolutionPlanOutput() SolutionPlanOutput {
	return i.ToSolutionPlanOutputWithContext(context.Background())
}

func (i SolutionPlanArgs) ToSolutionPlanOutputWithContext(ctx context.Context) SolutionPlanOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SolutionPlanOutput)
}

func (i SolutionPlanArgs) ToSolutionPlanPtrOutput() SolutionPlanPtrOutput {
	return i.ToSolutionPlanPtrOutputWithContext(context.Background())
}

func (i SolutionPlanArgs) ToSolutionPlanPtrOutputWithContext(ctx context.Context) SolutionPlanPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SolutionPlanOutput).ToSolutionPlanPtrOutputWithContext(ctx)
}

// SolutionPlanPtrInput is an input type that accepts SolutionPlanArgs, SolutionPlanPtr and SolutionPlanPtrOutput values.
// You can construct a concrete instance of `SolutionPlanPtrInput` via:
//
//          SolutionPlanArgs{...}
//
//  or:
//
//          nil
type SolutionPlanPtrInput interface {
	pulumi.Input

	ToSolutionPlanPtrOutput() SolutionPlanPtrOutput
	ToSolutionPlanPtrOutputWithContext(context.Context) SolutionPlanPtrOutput
}

type solutionPlanPtrType SolutionPlanArgs

func SolutionPlanPtr(v *SolutionPlanArgs) SolutionPlanPtrInput {
	return (*solutionPlanPtrType)(v)
}

func (*solutionPlanPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SolutionPlan)(nil)).Elem()
}

func (i *solutionPlanPtrType) ToSolutionPlanPtrOutput() SolutionPlanPtrOutput {
	return i.ToSolutionPlanPtrOutputWithContext(context.Background())
}

func (i *solutionPlanPtrType) ToSolutionPlanPtrOutputWithContext(ctx context.Context) SolutionPlanPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SolutionPlanPtrOutput)
}

// Plan for solution object supported by the OperationsManagement resource provider.
type SolutionPlanOutput struct{ *pulumi.OutputState }

func (SolutionPlanOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SolutionPlan)(nil)).Elem()
}

func (o SolutionPlanOutput) ToSolutionPlanOutput() SolutionPlanOutput {
	return o
}

func (o SolutionPlanOutput) ToSolutionPlanOutputWithContext(ctx context.Context) SolutionPlanOutput {
	return o
}

func (o SolutionPlanOutput) ToSolutionPlanPtrOutput() SolutionPlanPtrOutput {
	return o.ToSolutionPlanPtrOutputWithContext(context.Background())
}

func (o SolutionPlanOutput) ToSolutionPlanPtrOutputWithContext(ctx context.Context) SolutionPlanPtrOutput {
	return o.ApplyT(func(v SolutionPlan) *SolutionPlan {
		return &v
	}).(SolutionPlanPtrOutput)
}

// name of the solution to be created. For Microsoft published solution it should be in the format of solutionType(workspaceName). SolutionType part is case sensitive. For third party solution, it can be anything.
func (o SolutionPlanOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SolutionPlan) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// name of the solution to enabled/add. For Microsoft published gallery solution it should be in the format of OMSGallery/<solutionType>. This is case sensitive
func (o SolutionPlanOutput) Product() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SolutionPlan) *string { return v.Product }).(pulumi.StringPtrOutput)
}

// promotionCode, Not really used now, can you left as empty
func (o SolutionPlanOutput) PromotionCode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SolutionPlan) *string { return v.PromotionCode }).(pulumi.StringPtrOutput)
}

// Publisher name. For gallery solution, it is Microsoft.
func (o SolutionPlanOutput) Publisher() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SolutionPlan) *string { return v.Publisher }).(pulumi.StringPtrOutput)
}

type SolutionPlanPtrOutput struct{ *pulumi.OutputState }

func (SolutionPlanPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SolutionPlan)(nil)).Elem()
}

func (o SolutionPlanPtrOutput) ToSolutionPlanPtrOutput() SolutionPlanPtrOutput {
	return o
}

func (o SolutionPlanPtrOutput) ToSolutionPlanPtrOutputWithContext(ctx context.Context) SolutionPlanPtrOutput {
	return o
}

func (o SolutionPlanPtrOutput) Elem() SolutionPlanOutput {
	return o.ApplyT(func(v *SolutionPlan) SolutionPlan { return *v }).(SolutionPlanOutput)
}

// name of the solution to be created. For Microsoft published solution it should be in the format of solutionType(workspaceName). SolutionType part is case sensitive. For third party solution, it can be anything.
func (o SolutionPlanPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SolutionPlan) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// name of the solution to enabled/add. For Microsoft published gallery solution it should be in the format of OMSGallery/<solutionType>. This is case sensitive
func (o SolutionPlanPtrOutput) Product() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SolutionPlan) *string {
		if v == nil {
			return nil
		}
		return v.Product
	}).(pulumi.StringPtrOutput)
}

// promotionCode, Not really used now, can you left as empty
func (o SolutionPlanPtrOutput) PromotionCode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SolutionPlan) *string {
		if v == nil {
			return nil
		}
		return v.PromotionCode
	}).(pulumi.StringPtrOutput)
}

// Publisher name. For gallery solution, it is Microsoft.
func (o SolutionPlanPtrOutput) Publisher() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SolutionPlan) *string {
		if v == nil {
			return nil
		}
		return v.Publisher
	}).(pulumi.StringPtrOutput)
}

// Plan for solution object supported by the OperationsManagement resource provider.
type SolutionPlanResponse struct {
	// name of the solution to be created. For Microsoft published solution it should be in the format of solutionType(workspaceName). SolutionType part is case sensitive. For third party solution, it can be anything.
	Name *string `pulumi:"name"`
	// name of the solution to enabled/add. For Microsoft published gallery solution it should be in the format of OMSGallery/<solutionType>. This is case sensitive
	Product *string `pulumi:"product"`
	// promotionCode, Not really used now, can you left as empty
	PromotionCode *string `pulumi:"promotionCode"`
	// Publisher name. For gallery solution, it is Microsoft.
	Publisher *string `pulumi:"publisher"`
}

// SolutionPlanResponseInput is an input type that accepts SolutionPlanResponseArgs and SolutionPlanResponseOutput values.
// You can construct a concrete instance of `SolutionPlanResponseInput` via:
//
//          SolutionPlanResponseArgs{...}
type SolutionPlanResponseInput interface {
	pulumi.Input

	ToSolutionPlanResponseOutput() SolutionPlanResponseOutput
	ToSolutionPlanResponseOutputWithContext(context.Context) SolutionPlanResponseOutput
}

// Plan for solution object supported by the OperationsManagement resource provider.
type SolutionPlanResponseArgs struct {
	// name of the solution to be created. For Microsoft published solution it should be in the format of solutionType(workspaceName). SolutionType part is case sensitive. For third party solution, it can be anything.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// name of the solution to enabled/add. For Microsoft published gallery solution it should be in the format of OMSGallery/<solutionType>. This is case sensitive
	Product pulumi.StringPtrInput `pulumi:"product"`
	// promotionCode, Not really used now, can you left as empty
	PromotionCode pulumi.StringPtrInput `pulumi:"promotionCode"`
	// Publisher name. For gallery solution, it is Microsoft.
	Publisher pulumi.StringPtrInput `pulumi:"publisher"`
}

func (SolutionPlanResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SolutionPlanResponse)(nil)).Elem()
}

func (i SolutionPlanResponseArgs) ToSolutionPlanResponseOutput() SolutionPlanResponseOutput {
	return i.ToSolutionPlanResponseOutputWithContext(context.Background())
}

func (i SolutionPlanResponseArgs) ToSolutionPlanResponseOutputWithContext(ctx context.Context) SolutionPlanResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SolutionPlanResponseOutput)
}

func (i SolutionPlanResponseArgs) ToSolutionPlanResponsePtrOutput() SolutionPlanResponsePtrOutput {
	return i.ToSolutionPlanResponsePtrOutputWithContext(context.Background())
}

func (i SolutionPlanResponseArgs) ToSolutionPlanResponsePtrOutputWithContext(ctx context.Context) SolutionPlanResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SolutionPlanResponseOutput).ToSolutionPlanResponsePtrOutputWithContext(ctx)
}

// SolutionPlanResponsePtrInput is an input type that accepts SolutionPlanResponseArgs, SolutionPlanResponsePtr and SolutionPlanResponsePtrOutput values.
// You can construct a concrete instance of `SolutionPlanResponsePtrInput` via:
//
//          SolutionPlanResponseArgs{...}
//
//  or:
//
//          nil
type SolutionPlanResponsePtrInput interface {
	pulumi.Input

	ToSolutionPlanResponsePtrOutput() SolutionPlanResponsePtrOutput
	ToSolutionPlanResponsePtrOutputWithContext(context.Context) SolutionPlanResponsePtrOutput
}

type solutionPlanResponsePtrType SolutionPlanResponseArgs

func SolutionPlanResponsePtr(v *SolutionPlanResponseArgs) SolutionPlanResponsePtrInput {
	return (*solutionPlanResponsePtrType)(v)
}

func (*solutionPlanResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SolutionPlanResponse)(nil)).Elem()
}

func (i *solutionPlanResponsePtrType) ToSolutionPlanResponsePtrOutput() SolutionPlanResponsePtrOutput {
	return i.ToSolutionPlanResponsePtrOutputWithContext(context.Background())
}

func (i *solutionPlanResponsePtrType) ToSolutionPlanResponsePtrOutputWithContext(ctx context.Context) SolutionPlanResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SolutionPlanResponsePtrOutput)
}

// Plan for solution object supported by the OperationsManagement resource provider.
type SolutionPlanResponseOutput struct{ *pulumi.OutputState }

func (SolutionPlanResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SolutionPlanResponse)(nil)).Elem()
}

func (o SolutionPlanResponseOutput) ToSolutionPlanResponseOutput() SolutionPlanResponseOutput {
	return o
}

func (o SolutionPlanResponseOutput) ToSolutionPlanResponseOutputWithContext(ctx context.Context) SolutionPlanResponseOutput {
	return o
}

func (o SolutionPlanResponseOutput) ToSolutionPlanResponsePtrOutput() SolutionPlanResponsePtrOutput {
	return o.ToSolutionPlanResponsePtrOutputWithContext(context.Background())
}

func (o SolutionPlanResponseOutput) ToSolutionPlanResponsePtrOutputWithContext(ctx context.Context) SolutionPlanResponsePtrOutput {
	return o.ApplyT(func(v SolutionPlanResponse) *SolutionPlanResponse {
		return &v
	}).(SolutionPlanResponsePtrOutput)
}

// name of the solution to be created. For Microsoft published solution it should be in the format of solutionType(workspaceName). SolutionType part is case sensitive. For third party solution, it can be anything.
func (o SolutionPlanResponseOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SolutionPlanResponse) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// name of the solution to enabled/add. For Microsoft published gallery solution it should be in the format of OMSGallery/<solutionType>. This is case sensitive
func (o SolutionPlanResponseOutput) Product() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SolutionPlanResponse) *string { return v.Product }).(pulumi.StringPtrOutput)
}

// promotionCode, Not really used now, can you left as empty
func (o SolutionPlanResponseOutput) PromotionCode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SolutionPlanResponse) *string { return v.PromotionCode }).(pulumi.StringPtrOutput)
}

// Publisher name. For gallery solution, it is Microsoft.
func (o SolutionPlanResponseOutput) Publisher() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SolutionPlanResponse) *string { return v.Publisher }).(pulumi.StringPtrOutput)
}

type SolutionPlanResponsePtrOutput struct{ *pulumi.OutputState }

func (SolutionPlanResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SolutionPlanResponse)(nil)).Elem()
}

func (o SolutionPlanResponsePtrOutput) ToSolutionPlanResponsePtrOutput() SolutionPlanResponsePtrOutput {
	return o
}

func (o SolutionPlanResponsePtrOutput) ToSolutionPlanResponsePtrOutputWithContext(ctx context.Context) SolutionPlanResponsePtrOutput {
	return o
}

func (o SolutionPlanResponsePtrOutput) Elem() SolutionPlanResponseOutput {
	return o.ApplyT(func(v *SolutionPlanResponse) SolutionPlanResponse { return *v }).(SolutionPlanResponseOutput)
}

// name of the solution to be created. For Microsoft published solution it should be in the format of solutionType(workspaceName). SolutionType part is case sensitive. For third party solution, it can be anything.
func (o SolutionPlanResponsePtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SolutionPlanResponse) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// name of the solution to enabled/add. For Microsoft published gallery solution it should be in the format of OMSGallery/<solutionType>. This is case sensitive
func (o SolutionPlanResponsePtrOutput) Product() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SolutionPlanResponse) *string {
		if v == nil {
			return nil
		}
		return v.Product
	}).(pulumi.StringPtrOutput)
}

// promotionCode, Not really used now, can you left as empty
func (o SolutionPlanResponsePtrOutput) PromotionCode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SolutionPlanResponse) *string {
		if v == nil {
			return nil
		}
		return v.PromotionCode
	}).(pulumi.StringPtrOutput)
}

// Publisher name. For gallery solution, it is Microsoft.
func (o SolutionPlanResponsePtrOutput) Publisher() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SolutionPlanResponse) *string {
		if v == nil {
			return nil
		}
		return v.Publisher
	}).(pulumi.StringPtrOutput)
}

// Solution properties supported by the OperationsManagement resource provider.
type SolutionProperties struct {
	// The azure resources that will be contained within the solutions. They will be locked and gets deleted automatically when the solution is deleted.
	ContainedResources []string `pulumi:"containedResources"`
	// The resources that will be referenced from this solution. Deleting any of those solution out of band will break the solution.
	ReferencedResources []string `pulumi:"referencedResources"`
	// The azure resourceId for the workspace where the solution will be deployed/enabled.
	WorkspaceResourceId string `pulumi:"workspaceResourceId"`
}

// SolutionPropertiesInput is an input type that accepts SolutionPropertiesArgs and SolutionPropertiesOutput values.
// You can construct a concrete instance of `SolutionPropertiesInput` via:
//
//          SolutionPropertiesArgs{...}
type SolutionPropertiesInput interface {
	pulumi.Input

	ToSolutionPropertiesOutput() SolutionPropertiesOutput
	ToSolutionPropertiesOutputWithContext(context.Context) SolutionPropertiesOutput
}

// Solution properties supported by the OperationsManagement resource provider.
type SolutionPropertiesArgs struct {
	// The azure resources that will be contained within the solutions. They will be locked and gets deleted automatically when the solution is deleted.
	ContainedResources pulumi.StringArrayInput `pulumi:"containedResources"`
	// The resources that will be referenced from this solution. Deleting any of those solution out of band will break the solution.
	ReferencedResources pulumi.StringArrayInput `pulumi:"referencedResources"`
	// The azure resourceId for the workspace where the solution will be deployed/enabled.
	WorkspaceResourceId pulumi.StringInput `pulumi:"workspaceResourceId"`
}

func (SolutionPropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SolutionProperties)(nil)).Elem()
}

func (i SolutionPropertiesArgs) ToSolutionPropertiesOutput() SolutionPropertiesOutput {
	return i.ToSolutionPropertiesOutputWithContext(context.Background())
}

func (i SolutionPropertiesArgs) ToSolutionPropertiesOutputWithContext(ctx context.Context) SolutionPropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SolutionPropertiesOutput)
}

func (i SolutionPropertiesArgs) ToSolutionPropertiesPtrOutput() SolutionPropertiesPtrOutput {
	return i.ToSolutionPropertiesPtrOutputWithContext(context.Background())
}

func (i SolutionPropertiesArgs) ToSolutionPropertiesPtrOutputWithContext(ctx context.Context) SolutionPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SolutionPropertiesOutput).ToSolutionPropertiesPtrOutputWithContext(ctx)
}

// SolutionPropertiesPtrInput is an input type that accepts SolutionPropertiesArgs, SolutionPropertiesPtr and SolutionPropertiesPtrOutput values.
// You can construct a concrete instance of `SolutionPropertiesPtrInput` via:
//
//          SolutionPropertiesArgs{...}
//
//  or:
//
//          nil
type SolutionPropertiesPtrInput interface {
	pulumi.Input

	ToSolutionPropertiesPtrOutput() SolutionPropertiesPtrOutput
	ToSolutionPropertiesPtrOutputWithContext(context.Context) SolutionPropertiesPtrOutput
}

type solutionPropertiesPtrType SolutionPropertiesArgs

func SolutionPropertiesPtr(v *SolutionPropertiesArgs) SolutionPropertiesPtrInput {
	return (*solutionPropertiesPtrType)(v)
}

func (*solutionPropertiesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SolutionProperties)(nil)).Elem()
}

func (i *solutionPropertiesPtrType) ToSolutionPropertiesPtrOutput() SolutionPropertiesPtrOutput {
	return i.ToSolutionPropertiesPtrOutputWithContext(context.Background())
}

func (i *solutionPropertiesPtrType) ToSolutionPropertiesPtrOutputWithContext(ctx context.Context) SolutionPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SolutionPropertiesPtrOutput)
}

// Solution properties supported by the OperationsManagement resource provider.
type SolutionPropertiesOutput struct{ *pulumi.OutputState }

func (SolutionPropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SolutionProperties)(nil)).Elem()
}

func (o SolutionPropertiesOutput) ToSolutionPropertiesOutput() SolutionPropertiesOutput {
	return o
}

func (o SolutionPropertiesOutput) ToSolutionPropertiesOutputWithContext(ctx context.Context) SolutionPropertiesOutput {
	return o
}

func (o SolutionPropertiesOutput) ToSolutionPropertiesPtrOutput() SolutionPropertiesPtrOutput {
	return o.ToSolutionPropertiesPtrOutputWithContext(context.Background())
}

func (o SolutionPropertiesOutput) ToSolutionPropertiesPtrOutputWithContext(ctx context.Context) SolutionPropertiesPtrOutput {
	return o.ApplyT(func(v SolutionProperties) *SolutionProperties {
		return &v
	}).(SolutionPropertiesPtrOutput)
}

// The azure resources that will be contained within the solutions. They will be locked and gets deleted automatically when the solution is deleted.
func (o SolutionPropertiesOutput) ContainedResources() pulumi.StringArrayOutput {
	return o.ApplyT(func(v SolutionProperties) []string { return v.ContainedResources }).(pulumi.StringArrayOutput)
}

// The resources that will be referenced from this solution. Deleting any of those solution out of band will break the solution.
func (o SolutionPropertiesOutput) ReferencedResources() pulumi.StringArrayOutput {
	return o.ApplyT(func(v SolutionProperties) []string { return v.ReferencedResources }).(pulumi.StringArrayOutput)
}

// The azure resourceId for the workspace where the solution will be deployed/enabled.
func (o SolutionPropertiesOutput) WorkspaceResourceId() pulumi.StringOutput {
	return o.ApplyT(func(v SolutionProperties) string { return v.WorkspaceResourceId }).(pulumi.StringOutput)
}

type SolutionPropertiesPtrOutput struct{ *pulumi.OutputState }

func (SolutionPropertiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SolutionProperties)(nil)).Elem()
}

func (o SolutionPropertiesPtrOutput) ToSolutionPropertiesPtrOutput() SolutionPropertiesPtrOutput {
	return o
}

func (o SolutionPropertiesPtrOutput) ToSolutionPropertiesPtrOutputWithContext(ctx context.Context) SolutionPropertiesPtrOutput {
	return o
}

func (o SolutionPropertiesPtrOutput) Elem() SolutionPropertiesOutput {
	return o.ApplyT(func(v *SolutionProperties) SolutionProperties { return *v }).(SolutionPropertiesOutput)
}

// The azure resources that will be contained within the solutions. They will be locked and gets deleted automatically when the solution is deleted.
func (o SolutionPropertiesPtrOutput) ContainedResources() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *SolutionProperties) []string {
		if v == nil {
			return nil
		}
		return v.ContainedResources
	}).(pulumi.StringArrayOutput)
}

// The resources that will be referenced from this solution. Deleting any of those solution out of band will break the solution.
func (o SolutionPropertiesPtrOutput) ReferencedResources() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *SolutionProperties) []string {
		if v == nil {
			return nil
		}
		return v.ReferencedResources
	}).(pulumi.StringArrayOutput)
}

// The azure resourceId for the workspace where the solution will be deployed/enabled.
func (o SolutionPropertiesPtrOutput) WorkspaceResourceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SolutionProperties) *string {
		if v == nil {
			return nil
		}
		return &v.WorkspaceResourceId
	}).(pulumi.StringPtrOutput)
}

// Solution properties supported by the OperationsManagement resource provider.
type SolutionPropertiesResponse struct {
	// The azure resources that will be contained within the solutions. They will be locked and gets deleted automatically when the solution is deleted.
	ContainedResources []string `pulumi:"containedResources"`
	// The provisioning state for the solution.
	ProvisioningState string `pulumi:"provisioningState"`
	// The resources that will be referenced from this solution. Deleting any of those solution out of band will break the solution.
	ReferencedResources []string `pulumi:"referencedResources"`
	// The azure resourceId for the workspace where the solution will be deployed/enabled.
	WorkspaceResourceId string `pulumi:"workspaceResourceId"`
}

// SolutionPropertiesResponseInput is an input type that accepts SolutionPropertiesResponseArgs and SolutionPropertiesResponseOutput values.
// You can construct a concrete instance of `SolutionPropertiesResponseInput` via:
//
//          SolutionPropertiesResponseArgs{...}
type SolutionPropertiesResponseInput interface {
	pulumi.Input

	ToSolutionPropertiesResponseOutput() SolutionPropertiesResponseOutput
	ToSolutionPropertiesResponseOutputWithContext(context.Context) SolutionPropertiesResponseOutput
}

// Solution properties supported by the OperationsManagement resource provider.
type SolutionPropertiesResponseArgs struct {
	// The azure resources that will be contained within the solutions. They will be locked and gets deleted automatically when the solution is deleted.
	ContainedResources pulumi.StringArrayInput `pulumi:"containedResources"`
	// The provisioning state for the solution.
	ProvisioningState pulumi.StringInput `pulumi:"provisioningState"`
	// The resources that will be referenced from this solution. Deleting any of those solution out of band will break the solution.
	ReferencedResources pulumi.StringArrayInput `pulumi:"referencedResources"`
	// The azure resourceId for the workspace where the solution will be deployed/enabled.
	WorkspaceResourceId pulumi.StringInput `pulumi:"workspaceResourceId"`
}

func (SolutionPropertiesResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SolutionPropertiesResponse)(nil)).Elem()
}

func (i SolutionPropertiesResponseArgs) ToSolutionPropertiesResponseOutput() SolutionPropertiesResponseOutput {
	return i.ToSolutionPropertiesResponseOutputWithContext(context.Background())
}

func (i SolutionPropertiesResponseArgs) ToSolutionPropertiesResponseOutputWithContext(ctx context.Context) SolutionPropertiesResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SolutionPropertiesResponseOutput)
}

func (i SolutionPropertiesResponseArgs) ToSolutionPropertiesResponsePtrOutput() SolutionPropertiesResponsePtrOutput {
	return i.ToSolutionPropertiesResponsePtrOutputWithContext(context.Background())
}

func (i SolutionPropertiesResponseArgs) ToSolutionPropertiesResponsePtrOutputWithContext(ctx context.Context) SolutionPropertiesResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SolutionPropertiesResponseOutput).ToSolutionPropertiesResponsePtrOutputWithContext(ctx)
}

// SolutionPropertiesResponsePtrInput is an input type that accepts SolutionPropertiesResponseArgs, SolutionPropertiesResponsePtr and SolutionPropertiesResponsePtrOutput values.
// You can construct a concrete instance of `SolutionPropertiesResponsePtrInput` via:
//
//          SolutionPropertiesResponseArgs{...}
//
//  or:
//
//          nil
type SolutionPropertiesResponsePtrInput interface {
	pulumi.Input

	ToSolutionPropertiesResponsePtrOutput() SolutionPropertiesResponsePtrOutput
	ToSolutionPropertiesResponsePtrOutputWithContext(context.Context) SolutionPropertiesResponsePtrOutput
}

type solutionPropertiesResponsePtrType SolutionPropertiesResponseArgs

func SolutionPropertiesResponsePtr(v *SolutionPropertiesResponseArgs) SolutionPropertiesResponsePtrInput {
	return (*solutionPropertiesResponsePtrType)(v)
}

func (*solutionPropertiesResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SolutionPropertiesResponse)(nil)).Elem()
}

func (i *solutionPropertiesResponsePtrType) ToSolutionPropertiesResponsePtrOutput() SolutionPropertiesResponsePtrOutput {
	return i.ToSolutionPropertiesResponsePtrOutputWithContext(context.Background())
}

func (i *solutionPropertiesResponsePtrType) ToSolutionPropertiesResponsePtrOutputWithContext(ctx context.Context) SolutionPropertiesResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SolutionPropertiesResponsePtrOutput)
}

// Solution properties supported by the OperationsManagement resource provider.
type SolutionPropertiesResponseOutput struct{ *pulumi.OutputState }

func (SolutionPropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SolutionPropertiesResponse)(nil)).Elem()
}

func (o SolutionPropertiesResponseOutput) ToSolutionPropertiesResponseOutput() SolutionPropertiesResponseOutput {
	return o
}

func (o SolutionPropertiesResponseOutput) ToSolutionPropertiesResponseOutputWithContext(ctx context.Context) SolutionPropertiesResponseOutput {
	return o
}

func (o SolutionPropertiesResponseOutput) ToSolutionPropertiesResponsePtrOutput() SolutionPropertiesResponsePtrOutput {
	return o.ToSolutionPropertiesResponsePtrOutputWithContext(context.Background())
}

func (o SolutionPropertiesResponseOutput) ToSolutionPropertiesResponsePtrOutputWithContext(ctx context.Context) SolutionPropertiesResponsePtrOutput {
	return o.ApplyT(func(v SolutionPropertiesResponse) *SolutionPropertiesResponse {
		return &v
	}).(SolutionPropertiesResponsePtrOutput)
}

// The azure resources that will be contained within the solutions. They will be locked and gets deleted automatically when the solution is deleted.
func (o SolutionPropertiesResponseOutput) ContainedResources() pulumi.StringArrayOutput {
	return o.ApplyT(func(v SolutionPropertiesResponse) []string { return v.ContainedResources }).(pulumi.StringArrayOutput)
}

// The provisioning state for the solution.
func (o SolutionPropertiesResponseOutput) ProvisioningState() pulumi.StringOutput {
	return o.ApplyT(func(v SolutionPropertiesResponse) string { return v.ProvisioningState }).(pulumi.StringOutput)
}

// The resources that will be referenced from this solution. Deleting any of those solution out of band will break the solution.
func (o SolutionPropertiesResponseOutput) ReferencedResources() pulumi.StringArrayOutput {
	return o.ApplyT(func(v SolutionPropertiesResponse) []string { return v.ReferencedResources }).(pulumi.StringArrayOutput)
}

// The azure resourceId for the workspace where the solution will be deployed/enabled.
func (o SolutionPropertiesResponseOutput) WorkspaceResourceId() pulumi.StringOutput {
	return o.ApplyT(func(v SolutionPropertiesResponse) string { return v.WorkspaceResourceId }).(pulumi.StringOutput)
}

type SolutionPropertiesResponsePtrOutput struct{ *pulumi.OutputState }

func (SolutionPropertiesResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SolutionPropertiesResponse)(nil)).Elem()
}

func (o SolutionPropertiesResponsePtrOutput) ToSolutionPropertiesResponsePtrOutput() SolutionPropertiesResponsePtrOutput {
	return o
}

func (o SolutionPropertiesResponsePtrOutput) ToSolutionPropertiesResponsePtrOutputWithContext(ctx context.Context) SolutionPropertiesResponsePtrOutput {
	return o
}

func (o SolutionPropertiesResponsePtrOutput) Elem() SolutionPropertiesResponseOutput {
	return o.ApplyT(func(v *SolutionPropertiesResponse) SolutionPropertiesResponse { return *v }).(SolutionPropertiesResponseOutput)
}

// The azure resources that will be contained within the solutions. They will be locked and gets deleted automatically when the solution is deleted.
func (o SolutionPropertiesResponsePtrOutput) ContainedResources() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *SolutionPropertiesResponse) []string {
		if v == nil {
			return nil
		}
		return v.ContainedResources
	}).(pulumi.StringArrayOutput)
}

// The provisioning state for the solution.
func (o SolutionPropertiesResponsePtrOutput) ProvisioningState() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SolutionPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return &v.ProvisioningState
	}).(pulumi.StringPtrOutput)
}

// The resources that will be referenced from this solution. Deleting any of those solution out of band will break the solution.
func (o SolutionPropertiesResponsePtrOutput) ReferencedResources() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *SolutionPropertiesResponse) []string {
		if v == nil {
			return nil
		}
		return v.ReferencedResources
	}).(pulumi.StringArrayOutput)
}

// The azure resourceId for the workspace where the solution will be deployed/enabled.
func (o SolutionPropertiesResponsePtrOutput) WorkspaceResourceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SolutionPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return &v.WorkspaceResourceId
	}).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(ArmTemplateParameterOutput{})
	pulumi.RegisterOutputType(ArmTemplateParameterArrayOutput{})
	pulumi.RegisterOutputType(ArmTemplateParameterResponseOutput{})
	pulumi.RegisterOutputType(ArmTemplateParameterResponseArrayOutput{})
	pulumi.RegisterOutputType(ManagementAssociationPropertiesOutput{})
	pulumi.RegisterOutputType(ManagementAssociationPropertiesPtrOutput{})
	pulumi.RegisterOutputType(ManagementAssociationPropertiesResponseOutput{})
	pulumi.RegisterOutputType(ManagementAssociationPropertiesResponsePtrOutput{})
	pulumi.RegisterOutputType(ManagementConfigurationPropertiesOutput{})
	pulumi.RegisterOutputType(ManagementConfigurationPropertiesPtrOutput{})
	pulumi.RegisterOutputType(ManagementConfigurationPropertiesResponseOutput{})
	pulumi.RegisterOutputType(ManagementConfigurationPropertiesResponsePtrOutput{})
	pulumi.RegisterOutputType(SolutionPlanOutput{})
	pulumi.RegisterOutputType(SolutionPlanPtrOutput{})
	pulumi.RegisterOutputType(SolutionPlanResponseOutput{})
	pulumi.RegisterOutputType(SolutionPlanResponsePtrOutput{})
	pulumi.RegisterOutputType(SolutionPropertiesOutput{})
	pulumi.RegisterOutputType(SolutionPropertiesPtrOutput{})
	pulumi.RegisterOutputType(SolutionPropertiesResponseOutput{})
	pulumi.RegisterOutputType(SolutionPropertiesResponsePtrOutput{})
}
