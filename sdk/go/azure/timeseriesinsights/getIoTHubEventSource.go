// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package timeseriesinsights

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// An event source that receives its data from an Azure IoTHub.
// API Version: 2020-05-15.
func LookupIoTHubEventSource(ctx *pulumi.Context, args *LookupIoTHubEventSourceArgs, opts ...pulumi.InvokeOption) (*LookupIoTHubEventSourceResult, error) {
	var rv LookupIoTHubEventSourceResult
	err := ctx.Invoke("azure-native:timeseriesinsights:getIoTHubEventSource", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type LookupIoTHubEventSourceArgs struct {
	// The name of the Time Series Insights environment associated with the specified resource group.
	EnvironmentName string `pulumi:"environmentName"`
	// The name of the Time Series Insights event source associated with the specified environment.
	EventSourceName string `pulumi:"eventSourceName"`
	// Name of an Azure Resource group.
	ResourceGroupName string `pulumi:"resourceGroupName"`
}

// An event source that receives its data from an Azure IoTHub.
type LookupIoTHubEventSourceResult struct {
	// The name of the iot hub's consumer group that holds the partitions from which events will be read.
	ConsumerGroupName string `pulumi:"consumerGroupName"`
	// The time the resource was created.
	CreationTime string `pulumi:"creationTime"`
	// The resource id of the event source in Azure Resource Manager.
	EventSourceResourceId string `pulumi:"eventSourceResourceId"`
	// Resource Id
	Id string `pulumi:"id"`
	// The name of the iot hub.
	IotHubName string `pulumi:"iotHubName"`
	// The name of the Shared Access Policy key that grants the Time Series Insights service access to the iot hub. This shared access policy key must grant 'service connect' permissions to the iot hub.
	KeyName string `pulumi:"keyName"`
	// The kind of the event source.
	// Expected value is 'Microsoft.IoTHub'.
	Kind string `pulumi:"kind"`
	// An object that represents the local timestamp property. It contains the format of local timestamp that needs to be used and the corresponding timezone offset information. If a value isn't specified for localTimestamp, or if null, then the local timestamp will not be ingressed with the events.
	LocalTimestamp *LocalTimestampResponse `pulumi:"localTimestamp"`
	// Resource location
	Location string `pulumi:"location"`
	// Resource name
	Name string `pulumi:"name"`
	// Provisioning state of the resource.
	ProvisioningState string `pulumi:"provisioningState"`
	// Resource tags
	Tags map[string]string `pulumi:"tags"`
	// ISO8601 UTC datetime with seconds precision (milliseconds are optional), specifying the date and time that will be the starting point for Events to be consumed.
	Time *string `pulumi:"time"`
	// The event property that will be used as the event source's timestamp. If a value isn't specified for timestampPropertyName, or if null or empty-string is specified, the event creation time will be used.
	TimestampPropertyName *string `pulumi:"timestampPropertyName"`
	// Resource type
	Type string `pulumi:"type"`
}

func LookupIoTHubEventSourceOutput(ctx *pulumi.Context, args LookupIoTHubEventSourceOutputArgs, opts ...pulumi.InvokeOption) LookupIoTHubEventSourceResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupIoTHubEventSourceResult, error) {
			args := v.(LookupIoTHubEventSourceArgs)
			r, err := LookupIoTHubEventSource(ctx, &args, opts...)
			var s LookupIoTHubEventSourceResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupIoTHubEventSourceResultOutput)
}

type LookupIoTHubEventSourceOutputArgs struct {
	// The name of the Time Series Insights environment associated with the specified resource group.
	EnvironmentName pulumi.StringInput `pulumi:"environmentName"`
	// The name of the Time Series Insights event source associated with the specified environment.
	EventSourceName pulumi.StringInput `pulumi:"eventSourceName"`
	// Name of an Azure Resource group.
	ResourceGroupName pulumi.StringInput `pulumi:"resourceGroupName"`
}

func (LookupIoTHubEventSourceOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupIoTHubEventSourceArgs)(nil)).Elem()
}

// An event source that receives its data from an Azure IoTHub.
type LookupIoTHubEventSourceResultOutput struct{ *pulumi.OutputState }

func (LookupIoTHubEventSourceResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupIoTHubEventSourceResult)(nil)).Elem()
}

func (o LookupIoTHubEventSourceResultOutput) ToLookupIoTHubEventSourceResultOutput() LookupIoTHubEventSourceResultOutput {
	return o
}

func (o LookupIoTHubEventSourceResultOutput) ToLookupIoTHubEventSourceResultOutputWithContext(ctx context.Context) LookupIoTHubEventSourceResultOutput {
	return o
}

// The name of the iot hub's consumer group that holds the partitions from which events will be read.
func (o LookupIoTHubEventSourceResultOutput) ConsumerGroupName() pulumi.StringOutput {
	return o.ApplyT(func(v LookupIoTHubEventSourceResult) string { return v.ConsumerGroupName }).(pulumi.StringOutput)
}

// The time the resource was created.
func (o LookupIoTHubEventSourceResultOutput) CreationTime() pulumi.StringOutput {
	return o.ApplyT(func(v LookupIoTHubEventSourceResult) string { return v.CreationTime }).(pulumi.StringOutput)
}

// The resource id of the event source in Azure Resource Manager.
func (o LookupIoTHubEventSourceResultOutput) EventSourceResourceId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupIoTHubEventSourceResult) string { return v.EventSourceResourceId }).(pulumi.StringOutput)
}

// Resource Id
func (o LookupIoTHubEventSourceResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupIoTHubEventSourceResult) string { return v.Id }).(pulumi.StringOutput)
}

// The name of the iot hub.
func (o LookupIoTHubEventSourceResultOutput) IotHubName() pulumi.StringOutput {
	return o.ApplyT(func(v LookupIoTHubEventSourceResult) string { return v.IotHubName }).(pulumi.StringOutput)
}

// The name of the Shared Access Policy key that grants the Time Series Insights service access to the iot hub. This shared access policy key must grant 'service connect' permissions to the iot hub.
func (o LookupIoTHubEventSourceResultOutput) KeyName() pulumi.StringOutput {
	return o.ApplyT(func(v LookupIoTHubEventSourceResult) string { return v.KeyName }).(pulumi.StringOutput)
}

// The kind of the event source.
// Expected value is 'Microsoft.IoTHub'.
func (o LookupIoTHubEventSourceResultOutput) Kind() pulumi.StringOutput {
	return o.ApplyT(func(v LookupIoTHubEventSourceResult) string { return v.Kind }).(pulumi.StringOutput)
}

// An object that represents the local timestamp property. It contains the format of local timestamp that needs to be used and the corresponding timezone offset information. If a value isn't specified for localTimestamp, or if null, then the local timestamp will not be ingressed with the events.
func (o LookupIoTHubEventSourceResultOutput) LocalTimestamp() LocalTimestampResponsePtrOutput {
	return o.ApplyT(func(v LookupIoTHubEventSourceResult) *LocalTimestampResponse { return v.LocalTimestamp }).(LocalTimestampResponsePtrOutput)
}

// Resource location
func (o LookupIoTHubEventSourceResultOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v LookupIoTHubEventSourceResult) string { return v.Location }).(pulumi.StringOutput)
}

// Resource name
func (o LookupIoTHubEventSourceResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupIoTHubEventSourceResult) string { return v.Name }).(pulumi.StringOutput)
}

// Provisioning state of the resource.
func (o LookupIoTHubEventSourceResultOutput) ProvisioningState() pulumi.StringOutput {
	return o.ApplyT(func(v LookupIoTHubEventSourceResult) string { return v.ProvisioningState }).(pulumi.StringOutput)
}

// Resource tags
func (o LookupIoTHubEventSourceResultOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v LookupIoTHubEventSourceResult) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

// ISO8601 UTC datetime with seconds precision (milliseconds are optional), specifying the date and time that will be the starting point for Events to be consumed.
func (o LookupIoTHubEventSourceResultOutput) Time() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupIoTHubEventSourceResult) *string { return v.Time }).(pulumi.StringPtrOutput)
}

// The event property that will be used as the event source's timestamp. If a value isn't specified for timestampPropertyName, or if null or empty-string is specified, the event creation time will be used.
func (o LookupIoTHubEventSourceResultOutput) TimestampPropertyName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupIoTHubEventSourceResult) *string { return v.TimestampPropertyName }).(pulumi.StringPtrOutput)
}

// Resource type
func (o LookupIoTHubEventSourceResultOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v LookupIoTHubEventSourceResult) string { return v.Type }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupIoTHubEventSourceResultOutput{})
}
