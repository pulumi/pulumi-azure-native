// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v20210331preview

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// An event source that receives its data from an Azure EventHub.
type EventHubEventSource struct {
	pulumi.CustomResourceState

	// The name of the event hub's consumer group that holds the partitions from which events will be read.
	ConsumerGroupName pulumi.StringOutput `pulumi:"consumerGroupName"`
	// The time the resource was created.
	CreationTime pulumi.StringOutput `pulumi:"creationTime"`
	// The name of the event hub.
	EventHubName pulumi.StringOutput `pulumi:"eventHubName"`
	// The resource id of the event source in Azure Resource Manager.
	EventSourceResourceId pulumi.StringOutput `pulumi:"eventSourceResourceId"`
	// The name of the SAS key that grants the Time Series Insights service access to the event hub. The shared access policies for this key must grant 'Listen' permissions to the event hub.
	KeyName pulumi.StringOutput `pulumi:"keyName"`
	// The kind of the event source.
	// Expected value is 'Microsoft.EventHub'.
	Kind pulumi.StringOutput `pulumi:"kind"`
	// An object that represents the local timestamp property. It contains the format of local timestamp that needs to be used and the corresponding timezone offset information. If a value isn't specified for localTimestamp, or if null, then the local timestamp will not be ingressed with the events.
	LocalTimestamp LocalTimestampResponsePtrOutput `pulumi:"localTimestamp"`
	// Resource location
	Location pulumi.StringOutput `pulumi:"location"`
	// The name of the resource
	Name pulumi.StringOutput `pulumi:"name"`
	// Provisioning state of the resource.
	ProvisioningState pulumi.StringOutput `pulumi:"provisioningState"`
	// The name of the service bus that contains the event hub.
	ServiceBusNamespace pulumi.StringOutput `pulumi:"serviceBusNamespace"`
	// Resource tags
	Tags pulumi.StringMapOutput `pulumi:"tags"`
	// ISO8601 UTC datetime with seconds precision (milliseconds are optional), specifying the date and time that will be the starting point for Events to be consumed.
	Time pulumi.StringPtrOutput `pulumi:"time"`
	// The event property that will be used as the event source's timestamp. If a value isn't specified for timestampPropertyName, or if null or empty-string is specified, the event creation time will be used.
	TimestampPropertyName pulumi.StringPtrOutput `pulumi:"timestampPropertyName"`
	// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
	Type pulumi.StringOutput `pulumi:"type"`
}

// NewEventHubEventSource registers a new resource with the given unique name, arguments, and options.
func NewEventHubEventSource(ctx *pulumi.Context,
	name string, args *EventHubEventSourceArgs, opts ...pulumi.ResourceOption) (*EventHubEventSource, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ConsumerGroupName == nil {
		return nil, errors.New("invalid value for required argument 'ConsumerGroupName'")
	}
	if args.EnvironmentName == nil {
		return nil, errors.New("invalid value for required argument 'EnvironmentName'")
	}
	if args.EventHubName == nil {
		return nil, errors.New("invalid value for required argument 'EventHubName'")
	}
	if args.EventSourceResourceId == nil {
		return nil, errors.New("invalid value for required argument 'EventSourceResourceId'")
	}
	if args.KeyName == nil {
		return nil, errors.New("invalid value for required argument 'KeyName'")
	}
	if args.Kind == nil {
		return nil, errors.New("invalid value for required argument 'Kind'")
	}
	if args.ResourceGroupName == nil {
		return nil, errors.New("invalid value for required argument 'ResourceGroupName'")
	}
	if args.ServiceBusNamespace == nil {
		return nil, errors.New("invalid value for required argument 'ServiceBusNamespace'")
	}
	if args.SharedAccessKey == nil {
		return nil, errors.New("invalid value for required argument 'SharedAccessKey'")
	}
	args.Kind = pulumi.String("Microsoft.EventHub")
	aliases := pulumi.Aliases([]pulumi.Alias{
		{
			Type: pulumi.String("azure-native:timeseriesinsights:EventHubEventSource"),
		},
		{
			Type: pulumi.String("azure-native:timeseriesinsights/v20170228preview:EventHubEventSource"),
		},
		{
			Type: pulumi.String("azure-native:timeseriesinsights/v20171115:EventHubEventSource"),
		},
		{
			Type: pulumi.String("azure-native:timeseriesinsights/v20180815preview:EventHubEventSource"),
		},
		{
			Type: pulumi.String("azure-native:timeseriesinsights/v20200515:EventHubEventSource"),
		},
		{
			Type: pulumi.String("azure-native:timeseriesinsights/v20210630preview:EventHubEventSource"),
		},
	})
	opts = append(opts, aliases)
	var resource EventHubEventSource
	err := ctx.RegisterResource("azure-native:timeseriesinsights/v20210331preview:EventHubEventSource", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetEventHubEventSource gets an existing EventHubEventSource resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetEventHubEventSource(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *EventHubEventSourceState, opts ...pulumi.ResourceOption) (*EventHubEventSource, error) {
	var resource EventHubEventSource
	err := ctx.ReadResource("azure-native:timeseriesinsights/v20210331preview:EventHubEventSource", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering EventHubEventSource resources.
type eventHubEventSourceState struct {
}

type EventHubEventSourceState struct {
}

func (EventHubEventSourceState) ElementType() reflect.Type {
	return reflect.TypeOf((*eventHubEventSourceState)(nil)).Elem()
}

type eventHubEventSourceArgs struct {
	// The name of the event hub's consumer group that holds the partitions from which events will be read.
	ConsumerGroupName string `pulumi:"consumerGroupName"`
	// The name of the Time Series Insights environment associated with the specified resource group.
	EnvironmentName string `pulumi:"environmentName"`
	// The name of the event hub.
	EventHubName string `pulumi:"eventHubName"`
	// Name of the event source.
	EventSourceName *string `pulumi:"eventSourceName"`
	// The resource id of the event source in Azure Resource Manager.
	EventSourceResourceId string `pulumi:"eventSourceResourceId"`
	// The name of the SAS key that grants the Time Series Insights service access to the event hub. The shared access policies for this key must grant 'Listen' permissions to the event hub.
	KeyName string `pulumi:"keyName"`
	// The kind of the event source.
	// Expected value is 'Microsoft.EventHub'.
	Kind string `pulumi:"kind"`
	// An object that represents the local timestamp property. It contains the format of local timestamp that needs to be used and the corresponding timezone offset information. If a value isn't specified for localTimestamp, or if null, then the local timestamp will not be ingressed with the events.
	LocalTimestamp *LocalTimestamp `pulumi:"localTimestamp"`
	// The location of the resource.
	Location *string `pulumi:"location"`
	// Name of an Azure Resource group.
	ResourceGroupName string `pulumi:"resourceGroupName"`
	// The name of the service bus that contains the event hub.
	ServiceBusNamespace string `pulumi:"serviceBusNamespace"`
	// The value of the shared access key that grants the Time Series Insights service read access to the event hub. This property is not shown in event source responses.
	SharedAccessKey string `pulumi:"sharedAccessKey"`
	// Key-value pairs of additional properties for the resource.
	Tags map[string]string `pulumi:"tags"`
	// ISO8601 UTC datetime with seconds precision (milliseconds are optional), specifying the date and time that will be the starting point for Events to be consumed.
	Time *string `pulumi:"time"`
	// The event property that will be used as the event source's timestamp. If a value isn't specified for timestampPropertyName, or if null or empty-string is specified, the event creation time will be used.
	TimestampPropertyName *string `pulumi:"timestampPropertyName"`
	// The type of the ingressStartAt, It can be "EarliestAvailable", "EventSourceCreationTime", "CustomEnqueuedTime".
	Type *string `pulumi:"type"`
}

// The set of arguments for constructing a EventHubEventSource resource.
type EventHubEventSourceArgs struct {
	// The name of the event hub's consumer group that holds the partitions from which events will be read.
	ConsumerGroupName pulumi.StringInput
	// The name of the Time Series Insights environment associated with the specified resource group.
	EnvironmentName pulumi.StringInput
	// The name of the event hub.
	EventHubName pulumi.StringInput
	// Name of the event source.
	EventSourceName pulumi.StringPtrInput
	// The resource id of the event source in Azure Resource Manager.
	EventSourceResourceId pulumi.StringInput
	// The name of the SAS key that grants the Time Series Insights service access to the event hub. The shared access policies for this key must grant 'Listen' permissions to the event hub.
	KeyName pulumi.StringInput
	// The kind of the event source.
	// Expected value is 'Microsoft.EventHub'.
	Kind pulumi.StringInput
	// An object that represents the local timestamp property. It contains the format of local timestamp that needs to be used and the corresponding timezone offset information. If a value isn't specified for localTimestamp, or if null, then the local timestamp will not be ingressed with the events.
	LocalTimestamp LocalTimestampPtrInput
	// The location of the resource.
	Location pulumi.StringPtrInput
	// Name of an Azure Resource group.
	ResourceGroupName pulumi.StringInput
	// The name of the service bus that contains the event hub.
	ServiceBusNamespace pulumi.StringInput
	// The value of the shared access key that grants the Time Series Insights service read access to the event hub. This property is not shown in event source responses.
	SharedAccessKey pulumi.StringInput
	// Key-value pairs of additional properties for the resource.
	Tags pulumi.StringMapInput
	// ISO8601 UTC datetime with seconds precision (milliseconds are optional), specifying the date and time that will be the starting point for Events to be consumed.
	Time pulumi.StringPtrInput
	// The event property that will be used as the event source's timestamp. If a value isn't specified for timestampPropertyName, or if null or empty-string is specified, the event creation time will be used.
	TimestampPropertyName pulumi.StringPtrInput
	// The type of the ingressStartAt, It can be "EarliestAvailable", "EventSourceCreationTime", "CustomEnqueuedTime".
	Type pulumi.StringPtrInput
}

func (EventHubEventSourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*eventHubEventSourceArgs)(nil)).Elem()
}

type EventHubEventSourceInput interface {
	pulumi.Input

	ToEventHubEventSourceOutput() EventHubEventSourceOutput
	ToEventHubEventSourceOutputWithContext(ctx context.Context) EventHubEventSourceOutput
}

func (*EventHubEventSource) ElementType() reflect.Type {
	return reflect.TypeOf((**EventHubEventSource)(nil)).Elem()
}

func (i *EventHubEventSource) ToEventHubEventSourceOutput() EventHubEventSourceOutput {
	return i.ToEventHubEventSourceOutputWithContext(context.Background())
}

func (i *EventHubEventSource) ToEventHubEventSourceOutputWithContext(ctx context.Context) EventHubEventSourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventHubEventSourceOutput)
}

type EventHubEventSourceOutput struct{ *pulumi.OutputState }

func (EventHubEventSourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EventHubEventSource)(nil)).Elem()
}

func (o EventHubEventSourceOutput) ToEventHubEventSourceOutput() EventHubEventSourceOutput {
	return o
}

func (o EventHubEventSourceOutput) ToEventHubEventSourceOutputWithContext(ctx context.Context) EventHubEventSourceOutput {
	return o
}

// The name of the event hub's consumer group that holds the partitions from which events will be read.
func (o EventHubEventSourceOutput) ConsumerGroupName() pulumi.StringOutput {
	return o.ApplyT(func(v *EventHubEventSource) pulumi.StringOutput { return v.ConsumerGroupName }).(pulumi.StringOutput)
}

// The time the resource was created.
func (o EventHubEventSourceOutput) CreationTime() pulumi.StringOutput {
	return o.ApplyT(func(v *EventHubEventSource) pulumi.StringOutput { return v.CreationTime }).(pulumi.StringOutput)
}

// The name of the event hub.
func (o EventHubEventSourceOutput) EventHubName() pulumi.StringOutput {
	return o.ApplyT(func(v *EventHubEventSource) pulumi.StringOutput { return v.EventHubName }).(pulumi.StringOutput)
}

// The resource id of the event source in Azure Resource Manager.
func (o EventHubEventSourceOutput) EventSourceResourceId() pulumi.StringOutput {
	return o.ApplyT(func(v *EventHubEventSource) pulumi.StringOutput { return v.EventSourceResourceId }).(pulumi.StringOutput)
}

// The name of the SAS key that grants the Time Series Insights service access to the event hub. The shared access policies for this key must grant 'Listen' permissions to the event hub.
func (o EventHubEventSourceOutput) KeyName() pulumi.StringOutput {
	return o.ApplyT(func(v *EventHubEventSource) pulumi.StringOutput { return v.KeyName }).(pulumi.StringOutput)
}

// The kind of the event source.
// Expected value is 'Microsoft.EventHub'.
func (o EventHubEventSourceOutput) Kind() pulumi.StringOutput {
	return o.ApplyT(func(v *EventHubEventSource) pulumi.StringOutput { return v.Kind }).(pulumi.StringOutput)
}

// An object that represents the local timestamp property. It contains the format of local timestamp that needs to be used and the corresponding timezone offset information. If a value isn't specified for localTimestamp, or if null, then the local timestamp will not be ingressed with the events.
func (o EventHubEventSourceOutput) LocalTimestamp() LocalTimestampResponsePtrOutput {
	return o.ApplyT(func(v *EventHubEventSource) LocalTimestampResponsePtrOutput { return v.LocalTimestamp }).(LocalTimestampResponsePtrOutput)
}

// Resource location
func (o EventHubEventSourceOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *EventHubEventSource) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// The name of the resource
func (o EventHubEventSourceOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *EventHubEventSource) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Provisioning state of the resource.
func (o EventHubEventSourceOutput) ProvisioningState() pulumi.StringOutput {
	return o.ApplyT(func(v *EventHubEventSource) pulumi.StringOutput { return v.ProvisioningState }).(pulumi.StringOutput)
}

// The name of the service bus that contains the event hub.
func (o EventHubEventSourceOutput) ServiceBusNamespace() pulumi.StringOutput {
	return o.ApplyT(func(v *EventHubEventSource) pulumi.StringOutput { return v.ServiceBusNamespace }).(pulumi.StringOutput)
}

// Resource tags
func (o EventHubEventSourceOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *EventHubEventSource) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

// ISO8601 UTC datetime with seconds precision (milliseconds are optional), specifying the date and time that will be the starting point for Events to be consumed.
func (o EventHubEventSourceOutput) Time() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EventHubEventSource) pulumi.StringPtrOutput { return v.Time }).(pulumi.StringPtrOutput)
}

// The event property that will be used as the event source's timestamp. If a value isn't specified for timestampPropertyName, or if null or empty-string is specified, the event creation time will be used.
func (o EventHubEventSourceOutput) TimestampPropertyName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EventHubEventSource) pulumi.StringPtrOutput { return v.TimestampPropertyName }).(pulumi.StringPtrOutput)
}

// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
func (o EventHubEventSourceOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *EventHubEventSource) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(EventHubEventSourceOutput{})
}
