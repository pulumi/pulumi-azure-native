// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v20200515

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// An environment is a set of time-series data available for query, and is the top level Azure Time Series Insights resource. Gen1 environments have data retention limits.
type Gen1Environment struct {
	pulumi.CustomResourceState

	// The time the resource was created.
	CreationTime pulumi.StringOutput `pulumi:"creationTime"`
	// The fully qualified domain name used to access the environment data, e.g. to query the environment's events or upload reference data for the environment.
	DataAccessFqdn pulumi.StringOutput `pulumi:"dataAccessFqdn"`
	// An id used to access the environment data, e.g. to query the environment's events or upload reference data for the environment.
	DataAccessId pulumi.StringOutput `pulumi:"dataAccessId"`
	// ISO8601 timespan specifying the minimum number of days the environment's events will be available for query.
	DataRetentionTime pulumi.StringOutput `pulumi:"dataRetentionTime"`
	// The kind of the environment.
	// Expected value is 'Gen1'.
	Kind pulumi.StringOutput `pulumi:"kind"`
	// Resource location
	Location pulumi.StringOutput `pulumi:"location"`
	// Resource name
	Name pulumi.StringOutput `pulumi:"name"`
	// The list of event properties which will be used to partition data in the environment. Currently, only a single partition key property is supported.
	PartitionKeyProperties TimeSeriesIdPropertyResponseArrayOutput `pulumi:"partitionKeyProperties"`
	// Provisioning state of the resource.
	ProvisioningState pulumi.StringOutput `pulumi:"provisioningState"`
	// The sku determines the type of environment, either Gen1 (S1 or S2) or Gen2 (L1). For Gen1 environments the sku determines the capacity of the environment, the ingress rate, and the billing rate.
	Sku SkuResponseOutput `pulumi:"sku"`
	// An object that represents the status of the environment, and its internal state in the Time Series Insights service.
	Status EnvironmentStatusResponseOutput `pulumi:"status"`
	// The behavior the Time Series Insights service should take when the environment's capacity has been exceeded. If "PauseIngress" is specified, new events will not be read from the event source. If "PurgeOldData" is specified, new events will continue to be read and old events will be deleted from the environment. The default behavior is PurgeOldData.
	StorageLimitExceededBehavior pulumi.StringPtrOutput `pulumi:"storageLimitExceededBehavior"`
	// Resource tags
	Tags pulumi.StringMapOutput `pulumi:"tags"`
	// Resource type
	Type pulumi.StringOutput `pulumi:"type"`
}

// NewGen1Environment registers a new resource with the given unique name, arguments, and options.
func NewGen1Environment(ctx *pulumi.Context,
	name string, args *Gen1EnvironmentArgs, opts ...pulumi.ResourceOption) (*Gen1Environment, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DataRetentionTime == nil {
		return nil, errors.New("invalid value for required argument 'DataRetentionTime'")
	}
	if args.Kind == nil {
		return nil, errors.New("invalid value for required argument 'Kind'")
	}
	if args.ResourceGroupName == nil {
		return nil, errors.New("invalid value for required argument 'ResourceGroupName'")
	}
	if args.Sku == nil {
		return nil, errors.New("invalid value for required argument 'Sku'")
	}
	args.Kind = pulumi.String("Gen1")
	aliases := pulumi.Aliases([]pulumi.Alias{
		{
			Type: pulumi.String("azure-native:timeseriesinsights:Gen1Environment"),
		},
		{
			Type: pulumi.String("azure-native:timeseriesinsights/v20170228preview:Gen1Environment"),
		},
		{
			Type: pulumi.String("azure-native:timeseriesinsights/v20171115:Gen1Environment"),
		},
		{
			Type: pulumi.String("azure-native:timeseriesinsights/v20180815preview:Gen1Environment"),
		},
		{
			Type: pulumi.String("azure-native:timeseriesinsights/v20210331preview:Gen1Environment"),
		},
		{
			Type: pulumi.String("azure-native:timeseriesinsights/v20210630preview:Gen1Environment"),
		},
	})
	opts = append(opts, aliases)
	var resource Gen1Environment
	err := ctx.RegisterResource("azure-native:timeseriesinsights/v20200515:Gen1Environment", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetGen1Environment gets an existing Gen1Environment resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetGen1Environment(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *Gen1EnvironmentState, opts ...pulumi.ResourceOption) (*Gen1Environment, error) {
	var resource Gen1Environment
	err := ctx.ReadResource("azure-native:timeseriesinsights/v20200515:Gen1Environment", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Gen1Environment resources.
type gen1EnvironmentState struct {
}

type Gen1EnvironmentState struct {
}

func (Gen1EnvironmentState) ElementType() reflect.Type {
	return reflect.TypeOf((*gen1EnvironmentState)(nil)).Elem()
}

type gen1EnvironmentArgs struct {
	// ISO8601 timespan specifying the minimum number of days the environment's events will be available for query.
	DataRetentionTime string `pulumi:"dataRetentionTime"`
	// Name of the environment
	EnvironmentName *string `pulumi:"environmentName"`
	// The kind of the environment.
	// Expected value is 'Gen1'.
	Kind string `pulumi:"kind"`
	// The location of the resource.
	Location *string `pulumi:"location"`
	// The list of event properties which will be used to partition data in the environment. Currently, only a single partition key property is supported.
	PartitionKeyProperties []TimeSeriesIdProperty `pulumi:"partitionKeyProperties"`
	// Name of an Azure Resource group.
	ResourceGroupName string `pulumi:"resourceGroupName"`
	// The sku determines the type of environment, either Gen1 (S1 or S2) or Gen2 (L1). For Gen1 environments the sku determines the capacity of the environment, the ingress rate, and the billing rate.
	Sku Sku `pulumi:"sku"`
	// The behavior the Time Series Insights service should take when the environment's capacity has been exceeded. If "PauseIngress" is specified, new events will not be read from the event source. If "PurgeOldData" is specified, new events will continue to be read and old events will be deleted from the environment. The default behavior is PurgeOldData.
	StorageLimitExceededBehavior *string `pulumi:"storageLimitExceededBehavior"`
	// Key-value pairs of additional properties for the resource.
	Tags map[string]string `pulumi:"tags"`
}

// The set of arguments for constructing a Gen1Environment resource.
type Gen1EnvironmentArgs struct {
	// ISO8601 timespan specifying the minimum number of days the environment's events will be available for query.
	DataRetentionTime pulumi.StringInput
	// Name of the environment
	EnvironmentName pulumi.StringPtrInput
	// The kind of the environment.
	// Expected value is 'Gen1'.
	Kind pulumi.StringInput
	// The location of the resource.
	Location pulumi.StringPtrInput
	// The list of event properties which will be used to partition data in the environment. Currently, only a single partition key property is supported.
	PartitionKeyProperties TimeSeriesIdPropertyArrayInput
	// Name of an Azure Resource group.
	ResourceGroupName pulumi.StringInput
	// The sku determines the type of environment, either Gen1 (S1 or S2) or Gen2 (L1). For Gen1 environments the sku determines the capacity of the environment, the ingress rate, and the billing rate.
	Sku SkuInput
	// The behavior the Time Series Insights service should take when the environment's capacity has been exceeded. If "PauseIngress" is specified, new events will not be read from the event source. If "PurgeOldData" is specified, new events will continue to be read and old events will be deleted from the environment. The default behavior is PurgeOldData.
	StorageLimitExceededBehavior pulumi.StringPtrInput
	// Key-value pairs of additional properties for the resource.
	Tags pulumi.StringMapInput
}

func (Gen1EnvironmentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*gen1EnvironmentArgs)(nil)).Elem()
}

type Gen1EnvironmentInput interface {
	pulumi.Input

	ToGen1EnvironmentOutput() Gen1EnvironmentOutput
	ToGen1EnvironmentOutputWithContext(ctx context.Context) Gen1EnvironmentOutput
}

func (*Gen1Environment) ElementType() reflect.Type {
	return reflect.TypeOf((**Gen1Environment)(nil)).Elem()
}

func (i *Gen1Environment) ToGen1EnvironmentOutput() Gen1EnvironmentOutput {
	return i.ToGen1EnvironmentOutputWithContext(context.Background())
}

func (i *Gen1Environment) ToGen1EnvironmentOutputWithContext(ctx context.Context) Gen1EnvironmentOutput {
	return pulumi.ToOutputWithContext(ctx, i).(Gen1EnvironmentOutput)
}

type Gen1EnvironmentOutput struct{ *pulumi.OutputState }

func (Gen1EnvironmentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Gen1Environment)(nil)).Elem()
}

func (o Gen1EnvironmentOutput) ToGen1EnvironmentOutput() Gen1EnvironmentOutput {
	return o
}

func (o Gen1EnvironmentOutput) ToGen1EnvironmentOutputWithContext(ctx context.Context) Gen1EnvironmentOutput {
	return o
}

// The time the resource was created.
func (o Gen1EnvironmentOutput) CreationTime() pulumi.StringOutput {
	return o.ApplyT(func(v *Gen1Environment) pulumi.StringOutput { return v.CreationTime }).(pulumi.StringOutput)
}

// The fully qualified domain name used to access the environment data, e.g. to query the environment's events or upload reference data for the environment.
func (o Gen1EnvironmentOutput) DataAccessFqdn() pulumi.StringOutput {
	return o.ApplyT(func(v *Gen1Environment) pulumi.StringOutput { return v.DataAccessFqdn }).(pulumi.StringOutput)
}

// An id used to access the environment data, e.g. to query the environment's events or upload reference data for the environment.
func (o Gen1EnvironmentOutput) DataAccessId() pulumi.StringOutput {
	return o.ApplyT(func(v *Gen1Environment) pulumi.StringOutput { return v.DataAccessId }).(pulumi.StringOutput)
}

// ISO8601 timespan specifying the minimum number of days the environment's events will be available for query.
func (o Gen1EnvironmentOutput) DataRetentionTime() pulumi.StringOutput {
	return o.ApplyT(func(v *Gen1Environment) pulumi.StringOutput { return v.DataRetentionTime }).(pulumi.StringOutput)
}

// The kind of the environment.
// Expected value is 'Gen1'.
func (o Gen1EnvironmentOutput) Kind() pulumi.StringOutput {
	return o.ApplyT(func(v *Gen1Environment) pulumi.StringOutput { return v.Kind }).(pulumi.StringOutput)
}

// Resource location
func (o Gen1EnvironmentOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *Gen1Environment) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// Resource name
func (o Gen1EnvironmentOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Gen1Environment) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The list of event properties which will be used to partition data in the environment. Currently, only a single partition key property is supported.
func (o Gen1EnvironmentOutput) PartitionKeyProperties() TimeSeriesIdPropertyResponseArrayOutput {
	return o.ApplyT(func(v *Gen1Environment) TimeSeriesIdPropertyResponseArrayOutput { return v.PartitionKeyProperties }).(TimeSeriesIdPropertyResponseArrayOutput)
}

// Provisioning state of the resource.
func (o Gen1EnvironmentOutput) ProvisioningState() pulumi.StringOutput {
	return o.ApplyT(func(v *Gen1Environment) pulumi.StringOutput { return v.ProvisioningState }).(pulumi.StringOutput)
}

// The sku determines the type of environment, either Gen1 (S1 or S2) or Gen2 (L1). For Gen1 environments the sku determines the capacity of the environment, the ingress rate, and the billing rate.
func (o Gen1EnvironmentOutput) Sku() SkuResponseOutput {
	return o.ApplyT(func(v *Gen1Environment) SkuResponseOutput { return v.Sku }).(SkuResponseOutput)
}

// An object that represents the status of the environment, and its internal state in the Time Series Insights service.
func (o Gen1EnvironmentOutput) Status() EnvironmentStatusResponseOutput {
	return o.ApplyT(func(v *Gen1Environment) EnvironmentStatusResponseOutput { return v.Status }).(EnvironmentStatusResponseOutput)
}

// The behavior the Time Series Insights service should take when the environment's capacity has been exceeded. If "PauseIngress" is specified, new events will not be read from the event source. If "PurgeOldData" is specified, new events will continue to be read and old events will be deleted from the environment. The default behavior is PurgeOldData.
func (o Gen1EnvironmentOutput) StorageLimitExceededBehavior() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Gen1Environment) pulumi.StringPtrOutput { return v.StorageLimitExceededBehavior }).(pulumi.StringPtrOutput)
}

// Resource tags
func (o Gen1EnvironmentOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Gen1Environment) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

// Resource type
func (o Gen1EnvironmentOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *Gen1Environment) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(Gen1EnvironmentOutput{})
}
