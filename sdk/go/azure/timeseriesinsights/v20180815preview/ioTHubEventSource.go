// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v20180815preview

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// An event source that receives its data from an Azure IoTHub.
type IoTHubEventSource struct {
	pulumi.CustomResourceState

	// The name of the iot hub's consumer group that holds the partitions from which events will be read.
	ConsumerGroupName pulumi.StringOutput `pulumi:"consumerGroupName"`
	// The time the resource was created.
	CreationTime pulumi.StringOutput `pulumi:"creationTime"`
	// The resource id of the event source in Azure Resource Manager.
	EventSourceResourceId pulumi.StringOutput `pulumi:"eventSourceResourceId"`
	// The name of the iot hub.
	IotHubName pulumi.StringOutput `pulumi:"iotHubName"`
	// The name of the Shared Access Policy key that grants the Time Series Insights service access to the iot hub. This shared access policy key must grant 'service connect' permissions to the iot hub.
	KeyName pulumi.StringOutput `pulumi:"keyName"`
	// The kind of the event source.
	// Expected value is 'Microsoft.IoTHub'.
	Kind pulumi.StringOutput `pulumi:"kind"`
	// Resource location
	Location pulumi.StringOutput `pulumi:"location"`
	// Resource name
	Name pulumi.StringOutput `pulumi:"name"`
	// Provisioning state of the resource.
	ProvisioningState pulumi.StringOutput `pulumi:"provisioningState"`
	// Resource tags
	Tags pulumi.StringMapOutput `pulumi:"tags"`
	// The event property that will be used as the event source's timestamp. If a value isn't specified for timestampPropertyName, or if null or empty-string is specified, the event creation time will be used.
	TimestampPropertyName pulumi.StringPtrOutput `pulumi:"timestampPropertyName"`
	// Resource type
	Type pulumi.StringOutput `pulumi:"type"`
}

// NewIoTHubEventSource registers a new resource with the given unique name, arguments, and options.
func NewIoTHubEventSource(ctx *pulumi.Context,
	name string, args *IoTHubEventSourceArgs, opts ...pulumi.ResourceOption) (*IoTHubEventSource, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ConsumerGroupName == nil {
		return nil, errors.New("invalid value for required argument 'ConsumerGroupName'")
	}
	if args.EnvironmentName == nil {
		return nil, errors.New("invalid value for required argument 'EnvironmentName'")
	}
	if args.EventSourceResourceId == nil {
		return nil, errors.New("invalid value for required argument 'EventSourceResourceId'")
	}
	if args.IotHubName == nil {
		return nil, errors.New("invalid value for required argument 'IotHubName'")
	}
	if args.KeyName == nil {
		return nil, errors.New("invalid value for required argument 'KeyName'")
	}
	if args.Kind == nil {
		return nil, errors.New("invalid value for required argument 'Kind'")
	}
	if args.ResourceGroupName == nil {
		return nil, errors.New("invalid value for required argument 'ResourceGroupName'")
	}
	if args.SharedAccessKey == nil {
		return nil, errors.New("invalid value for required argument 'SharedAccessKey'")
	}
	args.Kind = pulumi.String("Microsoft.IoTHub")
	aliases := pulumi.Aliases([]pulumi.Alias{
		{
			Type: pulumi.String("azure-nextgen:timeseriesinsights/v20180815preview:IoTHubEventSource"),
		},
		{
			Type: pulumi.String("azure-native:timeseriesinsights:IoTHubEventSource"),
		},
		{
			Type: pulumi.String("azure-nextgen:timeseriesinsights:IoTHubEventSource"),
		},
		{
			Type: pulumi.String("azure-native:timeseriesinsights/v20170228preview:IoTHubEventSource"),
		},
		{
			Type: pulumi.String("azure-nextgen:timeseriesinsights/v20170228preview:IoTHubEventSource"),
		},
		{
			Type: pulumi.String("azure-native:timeseriesinsights/v20171115:IoTHubEventSource"),
		},
		{
			Type: pulumi.String("azure-nextgen:timeseriesinsights/v20171115:IoTHubEventSource"),
		},
		{
			Type: pulumi.String("azure-native:timeseriesinsights/v20200515:IoTHubEventSource"),
		},
		{
			Type: pulumi.String("azure-nextgen:timeseriesinsights/v20200515:IoTHubEventSource"),
		},
	})
	opts = append(opts, aliases)
	var resource IoTHubEventSource
	err := ctx.RegisterResource("azure-native:timeseriesinsights/v20180815preview:IoTHubEventSource", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetIoTHubEventSource gets an existing IoTHubEventSource resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetIoTHubEventSource(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *IoTHubEventSourceState, opts ...pulumi.ResourceOption) (*IoTHubEventSource, error) {
	var resource IoTHubEventSource
	err := ctx.ReadResource("azure-native:timeseriesinsights/v20180815preview:IoTHubEventSource", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering IoTHubEventSource resources.
type ioTHubEventSourceState struct {
}

type IoTHubEventSourceState struct {
}

func (IoTHubEventSourceState) ElementType() reflect.Type {
	return reflect.TypeOf((*ioTHubEventSourceState)(nil)).Elem()
}

type ioTHubEventSourceArgs struct {
	// The name of the iot hub's consumer group that holds the partitions from which events will be read.
	ConsumerGroupName string `pulumi:"consumerGroupName"`
	// The name of the Time Series Insights environment associated with the specified resource group.
	EnvironmentName string `pulumi:"environmentName"`
	// Name of the event source.
	EventSourceName *string `pulumi:"eventSourceName"`
	// The resource id of the event source in Azure Resource Manager.
	EventSourceResourceId string `pulumi:"eventSourceResourceId"`
	// The name of the iot hub.
	IotHubName string `pulumi:"iotHubName"`
	// The name of the Shared Access Policy key that grants the Time Series Insights service access to the iot hub. This shared access policy key must grant 'service connect' permissions to the iot hub.
	KeyName string `pulumi:"keyName"`
	// The kind of the event source.
	// Expected value is 'Microsoft.IoTHub'.
	Kind string `pulumi:"kind"`
	// An object that represents the local timestamp property. It contains the format of local timestamp that needs to be used and the corresponding timezone offset information. If a value isn't specified for localTimestamp, or if null, then the local timestamp will not be ingressed with the events.
	LocalTimestamp *LocalTimestamp `pulumi:"localTimestamp"`
	// The location of the resource.
	Location *string `pulumi:"location"`
	// Name of an Azure Resource group.
	ResourceGroupName string `pulumi:"resourceGroupName"`
	// The value of the Shared Access Policy key that grants the Time Series Insights service read access to the iot hub. This property is not shown in event source responses.
	SharedAccessKey string `pulumi:"sharedAccessKey"`
	// Key-value pairs of additional properties for the resource.
	Tags map[string]string `pulumi:"tags"`
	// The event property that will be used as the event source's timestamp. If a value isn't specified for timestampPropertyName, or if null or empty-string is specified, the event creation time will be used.
	TimestampPropertyName *string `pulumi:"timestampPropertyName"`
}

// The set of arguments for constructing a IoTHubEventSource resource.
type IoTHubEventSourceArgs struct {
	// The name of the iot hub's consumer group that holds the partitions from which events will be read.
	ConsumerGroupName pulumi.StringInput
	// The name of the Time Series Insights environment associated with the specified resource group.
	EnvironmentName pulumi.StringInput
	// Name of the event source.
	EventSourceName pulumi.StringPtrInput
	// The resource id of the event source in Azure Resource Manager.
	EventSourceResourceId pulumi.StringInput
	// The name of the iot hub.
	IotHubName pulumi.StringInput
	// The name of the Shared Access Policy key that grants the Time Series Insights service access to the iot hub. This shared access policy key must grant 'service connect' permissions to the iot hub.
	KeyName pulumi.StringInput
	// The kind of the event source.
	// Expected value is 'Microsoft.IoTHub'.
	Kind pulumi.StringInput
	// An object that represents the local timestamp property. It contains the format of local timestamp that needs to be used and the corresponding timezone offset information. If a value isn't specified for localTimestamp, or if null, then the local timestamp will not be ingressed with the events.
	LocalTimestamp LocalTimestampPtrInput
	// The location of the resource.
	Location pulumi.StringPtrInput
	// Name of an Azure Resource group.
	ResourceGroupName pulumi.StringInput
	// The value of the Shared Access Policy key that grants the Time Series Insights service read access to the iot hub. This property is not shown in event source responses.
	SharedAccessKey pulumi.StringInput
	// Key-value pairs of additional properties for the resource.
	Tags pulumi.StringMapInput
	// The event property that will be used as the event source's timestamp. If a value isn't specified for timestampPropertyName, or if null or empty-string is specified, the event creation time will be used.
	TimestampPropertyName pulumi.StringPtrInput
}

func (IoTHubEventSourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ioTHubEventSourceArgs)(nil)).Elem()
}

type IoTHubEventSourceInput interface {
	pulumi.Input

	ToIoTHubEventSourceOutput() IoTHubEventSourceOutput
	ToIoTHubEventSourceOutputWithContext(ctx context.Context) IoTHubEventSourceOutput
}

func (*IoTHubEventSource) ElementType() reflect.Type {
	return reflect.TypeOf((*IoTHubEventSource)(nil))
}

func (i *IoTHubEventSource) ToIoTHubEventSourceOutput() IoTHubEventSourceOutput {
	return i.ToIoTHubEventSourceOutputWithContext(context.Background())
}

func (i *IoTHubEventSource) ToIoTHubEventSourceOutputWithContext(ctx context.Context) IoTHubEventSourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IoTHubEventSourceOutput)
}

type IoTHubEventSourceOutput struct {
	*pulumi.OutputState
}

func (IoTHubEventSourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IoTHubEventSource)(nil))
}

func (o IoTHubEventSourceOutput) ToIoTHubEventSourceOutput() IoTHubEventSourceOutput {
	return o
}

func (o IoTHubEventSourceOutput) ToIoTHubEventSourceOutputWithContext(ctx context.Context) IoTHubEventSourceOutput {
	return o
}

func init() {
	pulumi.RegisterOutputType(IoTHubEventSourceOutput{})
}
