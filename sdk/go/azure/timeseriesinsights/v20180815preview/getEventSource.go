// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v20180815preview

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// An environment receives data from one or more event sources. Each event source has associated connection info that allows the Time Series Insights ingress pipeline to connect to and pull data from the event source
//
// Deprecated: Version 2018-08-15-preview will be removed in v2 of the provider.
func LookupEventSource(ctx *pulumi.Context, args *LookupEventSourceArgs, opts ...pulumi.InvokeOption) (*LookupEventSourceResult, error) {
	var rv LookupEventSourceResult
	err := ctx.Invoke("azure-native:timeseriesinsights/v20180815preview:getEventSource", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type LookupEventSourceArgs struct {
	// The name of the Time Series Insights environment associated with the specified resource group.
	EnvironmentName string `pulumi:"environmentName"`
	// The name of the Time Series Insights event source associated with the specified environment.
	EventSourceName string `pulumi:"eventSourceName"`
	// Name of an Azure Resource group.
	ResourceGroupName string `pulumi:"resourceGroupName"`
}

// An environment receives data from one or more event sources. Each event source has associated connection info that allows the Time Series Insights ingress pipeline to connect to and pull data from the event source
type LookupEventSourceResult struct {
	// Resource Id
	Id string `pulumi:"id"`
	// The kind of the event source.
	Kind string `pulumi:"kind"`
	// Resource location
	Location string `pulumi:"location"`
	// Resource name
	Name string `pulumi:"name"`
	// Resource tags
	Tags map[string]string `pulumi:"tags"`
	// Resource type
	Type string `pulumi:"type"`
}

func LookupEventSourceOutput(ctx *pulumi.Context, args LookupEventSourceOutputArgs, opts ...pulumi.InvokeOption) LookupEventSourceResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupEventSourceResult, error) {
			args := v.(LookupEventSourceArgs)
			r, err := LookupEventSource(ctx, &args, opts...)
			var s LookupEventSourceResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupEventSourceResultOutput)
}

type LookupEventSourceOutputArgs struct {
	// The name of the Time Series Insights environment associated with the specified resource group.
	EnvironmentName pulumi.StringInput `pulumi:"environmentName"`
	// The name of the Time Series Insights event source associated with the specified environment.
	EventSourceName pulumi.StringInput `pulumi:"eventSourceName"`
	// Name of an Azure Resource group.
	ResourceGroupName pulumi.StringInput `pulumi:"resourceGroupName"`
}

func (LookupEventSourceOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupEventSourceArgs)(nil)).Elem()
}

// An environment receives data from one or more event sources. Each event source has associated connection info that allows the Time Series Insights ingress pipeline to connect to and pull data from the event source
type LookupEventSourceResultOutput struct{ *pulumi.OutputState }

func (LookupEventSourceResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupEventSourceResult)(nil)).Elem()
}

func (o LookupEventSourceResultOutput) ToLookupEventSourceResultOutput() LookupEventSourceResultOutput {
	return o
}

func (o LookupEventSourceResultOutput) ToLookupEventSourceResultOutputWithContext(ctx context.Context) LookupEventSourceResultOutput {
	return o
}

// Resource Id
func (o LookupEventSourceResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupEventSourceResult) string { return v.Id }).(pulumi.StringOutput)
}

// The kind of the event source.
func (o LookupEventSourceResultOutput) Kind() pulumi.StringOutput {
	return o.ApplyT(func(v LookupEventSourceResult) string { return v.Kind }).(pulumi.StringOutput)
}

// Resource location
func (o LookupEventSourceResultOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v LookupEventSourceResult) string { return v.Location }).(pulumi.StringOutput)
}

// Resource name
func (o LookupEventSourceResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupEventSourceResult) string { return v.Name }).(pulumi.StringOutput)
}

// Resource tags
func (o LookupEventSourceResultOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v LookupEventSourceResult) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

// Resource type
func (o LookupEventSourceResultOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v LookupEventSourceResult) string { return v.Type }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupEventSourceResultOutput{})
}
