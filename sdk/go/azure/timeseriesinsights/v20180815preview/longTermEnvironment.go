// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v20180815preview

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// An environment is a set of time-series data available for query, and is the top level Azure Time Series Insights resource. LongTerm environments do not have set data retention limits.
type LongTermEnvironment struct {
	pulumi.CustomResourceState

	// The time the resource was created.
	CreationTime pulumi.StringOutput `pulumi:"creationTime"`
	// The fully qualified domain name used to access the environment data, e.g. to query the environment's events or upload reference data for the environment.
	DataAccessFqdn pulumi.StringOutput `pulumi:"dataAccessFqdn"`
	// An id used to access the environment data, e.g. to query the environment's events or upload reference data for the environment.
	DataAccessId pulumi.StringOutput `pulumi:"dataAccessId"`
	// The kind of the environment.
	// Expected value is 'LongTerm'.
	Kind pulumi.StringOutput `pulumi:"kind"`
	// Resource location
	Location pulumi.StringOutput `pulumi:"location"`
	// Resource name
	Name pulumi.StringOutput `pulumi:"name"`
	// Provisioning state of the resource.
	ProvisioningState pulumi.StringOutput `pulumi:"provisioningState"`
	// The sku determines the type of environment, either standard (S1 or S2) or long-term (L1). For standard environments the sku determines the capacity of the environment, the ingress rate, and the billing rate.
	Sku SkuResponseOutput `pulumi:"sku"`
	// An object that represents the status of the environment, and its internal state in the Time Series Insights service.
	Status EnvironmentStatusResponseOutput `pulumi:"status"`
	// The storage configuration provides the connection details that allows the Time Series Insights service to connect to the customer storage account that is used to store the environment's data.
	StorageConfiguration LongTermStorageConfigurationOutputResponseOutput `pulumi:"storageConfiguration"`
	// Resource tags
	Tags pulumi.StringMapOutput `pulumi:"tags"`
	// The list of event properties which will be used to define the environment's time series id.
	TimeSeriesIdProperties TimeSeriesIdPropertyResponseArrayOutput `pulumi:"timeSeriesIdProperties"`
	// Resource type
	Type pulumi.StringOutput `pulumi:"type"`
	// The warm store configuration provides the details to create a warm store cache that will retain a copy of the environment's data available for faster query.
	WarmStoreConfiguration WarmStoreConfigurationPropertiesResponsePtrOutput `pulumi:"warmStoreConfiguration"`
}

// NewLongTermEnvironment registers a new resource with the given unique name, arguments, and options.
func NewLongTermEnvironment(ctx *pulumi.Context,
	name string, args *LongTermEnvironmentArgs, opts ...pulumi.ResourceOption) (*LongTermEnvironment, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Kind == nil {
		return nil, errors.New("invalid value for required argument 'Kind'")
	}
	if args.ResourceGroupName == nil {
		return nil, errors.New("invalid value for required argument 'ResourceGroupName'")
	}
	if args.Sku == nil {
		return nil, errors.New("invalid value for required argument 'Sku'")
	}
	if args.StorageConfiguration == nil {
		return nil, errors.New("invalid value for required argument 'StorageConfiguration'")
	}
	if args.TimeSeriesIdProperties == nil {
		return nil, errors.New("invalid value for required argument 'TimeSeriesIdProperties'")
	}
	args.Kind = pulumi.String("LongTerm")
	aliases := pulumi.Aliases([]pulumi.Alias{
		{
			Type: pulumi.String("azure-native:timeseriesinsights:LongTermEnvironment"),
		},
		{
			Type: pulumi.String("azure-native:timeseriesinsights/v20170228preview:LongTermEnvironment"),
		},
		{
			Type: pulumi.String("azure-native:timeseriesinsights/v20171115:LongTermEnvironment"),
		},
		{
			Type: pulumi.String("azure-native:timeseriesinsights/v20200515:LongTermEnvironment"),
		},
		{
			Type: pulumi.String("azure-native:timeseriesinsights/v20210331preview:LongTermEnvironment"),
		},
		{
			Type: pulumi.String("azure-native:timeseriesinsights/v20210630preview:LongTermEnvironment"),
		},
	})
	opts = append(opts, aliases)
	var resource LongTermEnvironment
	err := ctx.RegisterResource("azure-native:timeseriesinsights/v20180815preview:LongTermEnvironment", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetLongTermEnvironment gets an existing LongTermEnvironment resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetLongTermEnvironment(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *LongTermEnvironmentState, opts ...pulumi.ResourceOption) (*LongTermEnvironment, error) {
	var resource LongTermEnvironment
	err := ctx.ReadResource("azure-native:timeseriesinsights/v20180815preview:LongTermEnvironment", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering LongTermEnvironment resources.
type longTermEnvironmentState struct {
}

type LongTermEnvironmentState struct {
}

func (LongTermEnvironmentState) ElementType() reflect.Type {
	return reflect.TypeOf((*longTermEnvironmentState)(nil)).Elem()
}

type longTermEnvironmentArgs struct {
	// Name of the environment
	EnvironmentName *string `pulumi:"environmentName"`
	// The kind of the environment.
	// Expected value is 'LongTerm'.
	Kind string `pulumi:"kind"`
	// The location of the resource.
	Location *string `pulumi:"location"`
	// Name of an Azure Resource group.
	ResourceGroupName string `pulumi:"resourceGroupName"`
	// The sku determines the type of environment, either standard (S1 or S2) or long-term (L1). For standard environments the sku determines the capacity of the environment, the ingress rate, and the billing rate.
	Sku Sku `pulumi:"sku"`
	// The storage configuration provides the connection details that allows the Time Series Insights service to connect to the customer storage account that is used to store the environment's data.
	StorageConfiguration LongTermStorageConfigurationInput `pulumi:"storageConfiguration"`
	// Key-value pairs of additional properties for the resource.
	Tags map[string]string `pulumi:"tags"`
	// The list of event properties which will be used to define the environment's time series id.
	TimeSeriesIdProperties []TimeSeriesIdProperty `pulumi:"timeSeriesIdProperties"`
	// The warm store configuration provides the details to create a warm store cache that will retain a copy of the environment's data available for faster query.
	WarmStoreConfiguration *WarmStoreConfigurationProperties `pulumi:"warmStoreConfiguration"`
}

// The set of arguments for constructing a LongTermEnvironment resource.
type LongTermEnvironmentArgs struct {
	// Name of the environment
	EnvironmentName pulumi.StringPtrInput
	// The kind of the environment.
	// Expected value is 'LongTerm'.
	Kind pulumi.StringInput
	// The location of the resource.
	Location pulumi.StringPtrInput
	// Name of an Azure Resource group.
	ResourceGroupName pulumi.StringInput
	// The sku determines the type of environment, either standard (S1 or S2) or long-term (L1). For standard environments the sku determines the capacity of the environment, the ingress rate, and the billing rate.
	Sku SkuInput
	// The storage configuration provides the connection details that allows the Time Series Insights service to connect to the customer storage account that is used to store the environment's data.
	StorageConfiguration LongTermStorageConfigurationInputInput
	// Key-value pairs of additional properties for the resource.
	Tags pulumi.StringMapInput
	// The list of event properties which will be used to define the environment's time series id.
	TimeSeriesIdProperties TimeSeriesIdPropertyArrayInput
	// The warm store configuration provides the details to create a warm store cache that will retain a copy of the environment's data available for faster query.
	WarmStoreConfiguration WarmStoreConfigurationPropertiesPtrInput
}

func (LongTermEnvironmentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*longTermEnvironmentArgs)(nil)).Elem()
}

type LongTermEnvironmentInput interface {
	pulumi.Input

	ToLongTermEnvironmentOutput() LongTermEnvironmentOutput
	ToLongTermEnvironmentOutputWithContext(ctx context.Context) LongTermEnvironmentOutput
}

func (*LongTermEnvironment) ElementType() reflect.Type {
	return reflect.TypeOf((**LongTermEnvironment)(nil)).Elem()
}

func (i *LongTermEnvironment) ToLongTermEnvironmentOutput() LongTermEnvironmentOutput {
	return i.ToLongTermEnvironmentOutputWithContext(context.Background())
}

func (i *LongTermEnvironment) ToLongTermEnvironmentOutputWithContext(ctx context.Context) LongTermEnvironmentOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LongTermEnvironmentOutput)
}

type LongTermEnvironmentOutput struct{ *pulumi.OutputState }

func (LongTermEnvironmentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LongTermEnvironment)(nil)).Elem()
}

func (o LongTermEnvironmentOutput) ToLongTermEnvironmentOutput() LongTermEnvironmentOutput {
	return o
}

func (o LongTermEnvironmentOutput) ToLongTermEnvironmentOutputWithContext(ctx context.Context) LongTermEnvironmentOutput {
	return o
}

// The time the resource was created.
func (o LongTermEnvironmentOutput) CreationTime() pulumi.StringOutput {
	return o.ApplyT(func(v *LongTermEnvironment) pulumi.StringOutput { return v.CreationTime }).(pulumi.StringOutput)
}

// The fully qualified domain name used to access the environment data, e.g. to query the environment's events or upload reference data for the environment.
func (o LongTermEnvironmentOutput) DataAccessFqdn() pulumi.StringOutput {
	return o.ApplyT(func(v *LongTermEnvironment) pulumi.StringOutput { return v.DataAccessFqdn }).(pulumi.StringOutput)
}

// An id used to access the environment data, e.g. to query the environment's events or upload reference data for the environment.
func (o LongTermEnvironmentOutput) DataAccessId() pulumi.StringOutput {
	return o.ApplyT(func(v *LongTermEnvironment) pulumi.StringOutput { return v.DataAccessId }).(pulumi.StringOutput)
}

// The kind of the environment.
// Expected value is 'LongTerm'.
func (o LongTermEnvironmentOutput) Kind() pulumi.StringOutput {
	return o.ApplyT(func(v *LongTermEnvironment) pulumi.StringOutput { return v.Kind }).(pulumi.StringOutput)
}

// Resource location
func (o LongTermEnvironmentOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *LongTermEnvironment) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// Resource name
func (o LongTermEnvironmentOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *LongTermEnvironment) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Provisioning state of the resource.
func (o LongTermEnvironmentOutput) ProvisioningState() pulumi.StringOutput {
	return o.ApplyT(func(v *LongTermEnvironment) pulumi.StringOutput { return v.ProvisioningState }).(pulumi.StringOutput)
}

// The sku determines the type of environment, either standard (S1 or S2) or long-term (L1). For standard environments the sku determines the capacity of the environment, the ingress rate, and the billing rate.
func (o LongTermEnvironmentOutput) Sku() SkuResponseOutput {
	return o.ApplyT(func(v *LongTermEnvironment) SkuResponseOutput { return v.Sku }).(SkuResponseOutput)
}

// An object that represents the status of the environment, and its internal state in the Time Series Insights service.
func (o LongTermEnvironmentOutput) Status() EnvironmentStatusResponseOutput {
	return o.ApplyT(func(v *LongTermEnvironment) EnvironmentStatusResponseOutput { return v.Status }).(EnvironmentStatusResponseOutput)
}

// The storage configuration provides the connection details that allows the Time Series Insights service to connect to the customer storage account that is used to store the environment's data.
func (o LongTermEnvironmentOutput) StorageConfiguration() LongTermStorageConfigurationOutputResponseOutput {
	return o.ApplyT(func(v *LongTermEnvironment) LongTermStorageConfigurationOutputResponseOutput {
		return v.StorageConfiguration
	}).(LongTermStorageConfigurationOutputResponseOutput)
}

// Resource tags
func (o LongTermEnvironmentOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *LongTermEnvironment) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

// The list of event properties which will be used to define the environment's time series id.
func (o LongTermEnvironmentOutput) TimeSeriesIdProperties() TimeSeriesIdPropertyResponseArrayOutput {
	return o.ApplyT(func(v *LongTermEnvironment) TimeSeriesIdPropertyResponseArrayOutput { return v.TimeSeriesIdProperties }).(TimeSeriesIdPropertyResponseArrayOutput)
}

// Resource type
func (o LongTermEnvironmentOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *LongTermEnvironment) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

// The warm store configuration provides the details to create a warm store cache that will retain a copy of the environment's data available for faster query.
func (o LongTermEnvironmentOutput) WarmStoreConfiguration() WarmStoreConfigurationPropertiesResponsePtrOutput {
	return o.ApplyT(func(v *LongTermEnvironment) WarmStoreConfigurationPropertiesResponsePtrOutput {
		return v.WarmStoreConfiguration
	}).(WarmStoreConfigurationPropertiesResponsePtrOutput)
}

func init() {
	pulumi.RegisterOutputType(LongTermEnvironmentOutput{})
}
