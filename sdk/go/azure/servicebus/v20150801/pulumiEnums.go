// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v20150801

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type AccessRights string

const (
	AccessRightsManage = AccessRights("Manage")
	AccessRightsSend   = AccessRights("Send")
	AccessRightsListen = AccessRights("Listen")
)

func (AccessRights) ElementType() reflect.Type {
	return reflect.TypeOf((*AccessRights)(nil)).Elem()
}

func (e AccessRights) ToAccessRightsOutput() AccessRightsOutput {
	return pulumi.ToOutput(e).(AccessRightsOutput)
}

func (e AccessRights) ToAccessRightsOutputWithContext(ctx context.Context) AccessRightsOutput {
	return pulumi.ToOutputWithContext(ctx, e).(AccessRightsOutput)
}

func (e AccessRights) ToAccessRightsPtrOutput() AccessRightsPtrOutput {
	return e.ToAccessRightsPtrOutputWithContext(context.Background())
}

func (e AccessRights) ToAccessRightsPtrOutputWithContext(ctx context.Context) AccessRightsPtrOutput {
	return AccessRights(e).ToAccessRightsOutputWithContext(ctx).ToAccessRightsPtrOutputWithContext(ctx)
}

func (e AccessRights) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e AccessRights) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e AccessRights) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e AccessRights) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type AccessRightsOutput struct{ *pulumi.OutputState }

func (AccessRightsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AccessRights)(nil)).Elem()
}

func (o AccessRightsOutput) ToAccessRightsOutput() AccessRightsOutput {
	return o
}

func (o AccessRightsOutput) ToAccessRightsOutputWithContext(ctx context.Context) AccessRightsOutput {
	return o
}

func (o AccessRightsOutput) ToAccessRightsPtrOutput() AccessRightsPtrOutput {
	return o.ToAccessRightsPtrOutputWithContext(context.Background())
}

func (o AccessRightsOutput) ToAccessRightsPtrOutputWithContext(ctx context.Context) AccessRightsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v AccessRights) *AccessRights {
		return &v
	}).(AccessRightsPtrOutput)
}

func (o AccessRightsOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o AccessRightsOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e AccessRights) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o AccessRightsOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o AccessRightsOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e AccessRights) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type AccessRightsPtrOutput struct{ *pulumi.OutputState }

func (AccessRightsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AccessRights)(nil)).Elem()
}

func (o AccessRightsPtrOutput) ToAccessRightsPtrOutput() AccessRightsPtrOutput {
	return o
}

func (o AccessRightsPtrOutput) ToAccessRightsPtrOutputWithContext(ctx context.Context) AccessRightsPtrOutput {
	return o
}

func (o AccessRightsPtrOutput) Elem() AccessRightsOutput {
	return o.ApplyT(func(v *AccessRights) AccessRights {
		if v != nil {
			return *v
		}
		var ret AccessRights
		return ret
	}).(AccessRightsOutput)
}

func (o AccessRightsPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o AccessRightsPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *AccessRights) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// AccessRightsInput is an input type that accepts AccessRightsArgs and AccessRightsOutput values.
// You can construct a concrete instance of `AccessRightsInput` via:
//
//	AccessRightsArgs{...}
type AccessRightsInput interface {
	pulumi.Input

	ToAccessRightsOutput() AccessRightsOutput
	ToAccessRightsOutputWithContext(context.Context) AccessRightsOutput
}

var accessRightsPtrType = reflect.TypeOf((**AccessRights)(nil)).Elem()

type AccessRightsPtrInput interface {
	pulumi.Input

	ToAccessRightsPtrOutput() AccessRightsPtrOutput
	ToAccessRightsPtrOutputWithContext(context.Context) AccessRightsPtrOutput
}

type accessRightsPtr string

func AccessRightsPtr(v string) AccessRightsPtrInput {
	return (*accessRightsPtr)(&v)
}

func (*accessRightsPtr) ElementType() reflect.Type {
	return accessRightsPtrType
}

func (in *accessRightsPtr) ToAccessRightsPtrOutput() AccessRightsPtrOutput {
	return pulumi.ToOutput(in).(AccessRightsPtrOutput)
}

func (in *accessRightsPtr) ToAccessRightsPtrOutputWithContext(ctx context.Context) AccessRightsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(AccessRightsPtrOutput)
}

// AccessRightsArrayInput is an input type that accepts AccessRightsArray and AccessRightsArrayOutput values.
// You can construct a concrete instance of `AccessRightsArrayInput` via:
//
//	AccessRightsArray{ AccessRightsArgs{...} }
type AccessRightsArrayInput interface {
	pulumi.Input

	ToAccessRightsArrayOutput() AccessRightsArrayOutput
	ToAccessRightsArrayOutputWithContext(context.Context) AccessRightsArrayOutput
}

type AccessRightsArray []AccessRights

func (AccessRightsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AccessRights)(nil)).Elem()
}

func (i AccessRightsArray) ToAccessRightsArrayOutput() AccessRightsArrayOutput {
	return i.ToAccessRightsArrayOutputWithContext(context.Background())
}

func (i AccessRightsArray) ToAccessRightsArrayOutputWithContext(ctx context.Context) AccessRightsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AccessRightsArrayOutput)
}

type AccessRightsArrayOutput struct{ *pulumi.OutputState }

func (AccessRightsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AccessRights)(nil)).Elem()
}

func (o AccessRightsArrayOutput) ToAccessRightsArrayOutput() AccessRightsArrayOutput {
	return o
}

func (o AccessRightsArrayOutput) ToAccessRightsArrayOutputWithContext(ctx context.Context) AccessRightsArrayOutput {
	return o
}

func (o AccessRightsArrayOutput) Index(i pulumi.IntInput) AccessRightsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AccessRights {
		return vs[0].([]AccessRights)[vs[1].(int)]
	}).(AccessRightsOutput)
}

// Entity availability status for the topic.
type EntityAvailabilityStatus string

const (
	EntityAvailabilityStatusAvailable = EntityAvailabilityStatus("Available")
	EntityAvailabilityStatusLimited   = EntityAvailabilityStatus("Limited")
	EntityAvailabilityStatusRenaming  = EntityAvailabilityStatus("Renaming")
	EntityAvailabilityStatusRestoring = EntityAvailabilityStatus("Restoring")
	EntityAvailabilityStatusUnknown   = EntityAvailabilityStatus("Unknown")
)

func (EntityAvailabilityStatus) ElementType() reflect.Type {
	return reflect.TypeOf((*EntityAvailabilityStatus)(nil)).Elem()
}

func (e EntityAvailabilityStatus) ToEntityAvailabilityStatusOutput() EntityAvailabilityStatusOutput {
	return pulumi.ToOutput(e).(EntityAvailabilityStatusOutput)
}

func (e EntityAvailabilityStatus) ToEntityAvailabilityStatusOutputWithContext(ctx context.Context) EntityAvailabilityStatusOutput {
	return pulumi.ToOutputWithContext(ctx, e).(EntityAvailabilityStatusOutput)
}

func (e EntityAvailabilityStatus) ToEntityAvailabilityStatusPtrOutput() EntityAvailabilityStatusPtrOutput {
	return e.ToEntityAvailabilityStatusPtrOutputWithContext(context.Background())
}

func (e EntityAvailabilityStatus) ToEntityAvailabilityStatusPtrOutputWithContext(ctx context.Context) EntityAvailabilityStatusPtrOutput {
	return EntityAvailabilityStatus(e).ToEntityAvailabilityStatusOutputWithContext(ctx).ToEntityAvailabilityStatusPtrOutputWithContext(ctx)
}

func (e EntityAvailabilityStatus) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e EntityAvailabilityStatus) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e EntityAvailabilityStatus) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e EntityAvailabilityStatus) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type EntityAvailabilityStatusOutput struct{ *pulumi.OutputState }

func (EntityAvailabilityStatusOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EntityAvailabilityStatus)(nil)).Elem()
}

func (o EntityAvailabilityStatusOutput) ToEntityAvailabilityStatusOutput() EntityAvailabilityStatusOutput {
	return o
}

func (o EntityAvailabilityStatusOutput) ToEntityAvailabilityStatusOutputWithContext(ctx context.Context) EntityAvailabilityStatusOutput {
	return o
}

func (o EntityAvailabilityStatusOutput) ToEntityAvailabilityStatusPtrOutput() EntityAvailabilityStatusPtrOutput {
	return o.ToEntityAvailabilityStatusPtrOutputWithContext(context.Background())
}

func (o EntityAvailabilityStatusOutput) ToEntityAvailabilityStatusPtrOutputWithContext(ctx context.Context) EntityAvailabilityStatusPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v EntityAvailabilityStatus) *EntityAvailabilityStatus {
		return &v
	}).(EntityAvailabilityStatusPtrOutput)
}

func (o EntityAvailabilityStatusOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o EntityAvailabilityStatusOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e EntityAvailabilityStatus) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o EntityAvailabilityStatusOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o EntityAvailabilityStatusOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e EntityAvailabilityStatus) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type EntityAvailabilityStatusPtrOutput struct{ *pulumi.OutputState }

func (EntityAvailabilityStatusPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EntityAvailabilityStatus)(nil)).Elem()
}

func (o EntityAvailabilityStatusPtrOutput) ToEntityAvailabilityStatusPtrOutput() EntityAvailabilityStatusPtrOutput {
	return o
}

func (o EntityAvailabilityStatusPtrOutput) ToEntityAvailabilityStatusPtrOutputWithContext(ctx context.Context) EntityAvailabilityStatusPtrOutput {
	return o
}

func (o EntityAvailabilityStatusPtrOutput) Elem() EntityAvailabilityStatusOutput {
	return o.ApplyT(func(v *EntityAvailabilityStatus) EntityAvailabilityStatus {
		if v != nil {
			return *v
		}
		var ret EntityAvailabilityStatus
		return ret
	}).(EntityAvailabilityStatusOutput)
}

func (o EntityAvailabilityStatusPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o EntityAvailabilityStatusPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *EntityAvailabilityStatus) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// EntityAvailabilityStatusInput is an input type that accepts EntityAvailabilityStatusArgs and EntityAvailabilityStatusOutput values.
// You can construct a concrete instance of `EntityAvailabilityStatusInput` via:
//
//	EntityAvailabilityStatusArgs{...}
type EntityAvailabilityStatusInput interface {
	pulumi.Input

	ToEntityAvailabilityStatusOutput() EntityAvailabilityStatusOutput
	ToEntityAvailabilityStatusOutputWithContext(context.Context) EntityAvailabilityStatusOutput
}

var entityAvailabilityStatusPtrType = reflect.TypeOf((**EntityAvailabilityStatus)(nil)).Elem()

type EntityAvailabilityStatusPtrInput interface {
	pulumi.Input

	ToEntityAvailabilityStatusPtrOutput() EntityAvailabilityStatusPtrOutput
	ToEntityAvailabilityStatusPtrOutputWithContext(context.Context) EntityAvailabilityStatusPtrOutput
}

type entityAvailabilityStatusPtr string

func EntityAvailabilityStatusPtr(v string) EntityAvailabilityStatusPtrInput {
	return (*entityAvailabilityStatusPtr)(&v)
}

func (*entityAvailabilityStatusPtr) ElementType() reflect.Type {
	return entityAvailabilityStatusPtrType
}

func (in *entityAvailabilityStatusPtr) ToEntityAvailabilityStatusPtrOutput() EntityAvailabilityStatusPtrOutput {
	return pulumi.ToOutput(in).(EntityAvailabilityStatusPtrOutput)
}

func (in *entityAvailabilityStatusPtr) ToEntityAvailabilityStatusPtrOutputWithContext(ctx context.Context) EntityAvailabilityStatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(EntityAvailabilityStatusPtrOutput)
}

// Enumerates the possible values for the status of a messaging entity.
type EntityStatus string

const (
	EntityStatusActive          = EntityStatus("Active")
	EntityStatusCreating        = EntityStatus("Creating")
	EntityStatusDeleting        = EntityStatus("Deleting")
	EntityStatusDisabled        = EntityStatus("Disabled")
	EntityStatusReceiveDisabled = EntityStatus("ReceiveDisabled")
	EntityStatusRenaming        = EntityStatus("Renaming")
	EntityStatusRestoring       = EntityStatus("Restoring")
	EntityStatusSendDisabled    = EntityStatus("SendDisabled")
	EntityStatusUnknown         = EntityStatus("Unknown")
)

func (EntityStatus) ElementType() reflect.Type {
	return reflect.TypeOf((*EntityStatus)(nil)).Elem()
}

func (e EntityStatus) ToEntityStatusOutput() EntityStatusOutput {
	return pulumi.ToOutput(e).(EntityStatusOutput)
}

func (e EntityStatus) ToEntityStatusOutputWithContext(ctx context.Context) EntityStatusOutput {
	return pulumi.ToOutputWithContext(ctx, e).(EntityStatusOutput)
}

func (e EntityStatus) ToEntityStatusPtrOutput() EntityStatusPtrOutput {
	return e.ToEntityStatusPtrOutputWithContext(context.Background())
}

func (e EntityStatus) ToEntityStatusPtrOutputWithContext(ctx context.Context) EntityStatusPtrOutput {
	return EntityStatus(e).ToEntityStatusOutputWithContext(ctx).ToEntityStatusPtrOutputWithContext(ctx)
}

func (e EntityStatus) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e EntityStatus) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e EntityStatus) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e EntityStatus) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type EntityStatusOutput struct{ *pulumi.OutputState }

func (EntityStatusOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EntityStatus)(nil)).Elem()
}

func (o EntityStatusOutput) ToEntityStatusOutput() EntityStatusOutput {
	return o
}

func (o EntityStatusOutput) ToEntityStatusOutputWithContext(ctx context.Context) EntityStatusOutput {
	return o
}

func (o EntityStatusOutput) ToEntityStatusPtrOutput() EntityStatusPtrOutput {
	return o.ToEntityStatusPtrOutputWithContext(context.Background())
}

func (o EntityStatusOutput) ToEntityStatusPtrOutputWithContext(ctx context.Context) EntityStatusPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v EntityStatus) *EntityStatus {
		return &v
	}).(EntityStatusPtrOutput)
}

func (o EntityStatusOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o EntityStatusOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e EntityStatus) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o EntityStatusOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o EntityStatusOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e EntityStatus) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type EntityStatusPtrOutput struct{ *pulumi.OutputState }

func (EntityStatusPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EntityStatus)(nil)).Elem()
}

func (o EntityStatusPtrOutput) ToEntityStatusPtrOutput() EntityStatusPtrOutput {
	return o
}

func (o EntityStatusPtrOutput) ToEntityStatusPtrOutputWithContext(ctx context.Context) EntityStatusPtrOutput {
	return o
}

func (o EntityStatusPtrOutput) Elem() EntityStatusOutput {
	return o.ApplyT(func(v *EntityStatus) EntityStatus {
		if v != nil {
			return *v
		}
		var ret EntityStatus
		return ret
	}).(EntityStatusOutput)
}

func (o EntityStatusPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o EntityStatusPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *EntityStatus) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// EntityStatusInput is an input type that accepts EntityStatusArgs and EntityStatusOutput values.
// You can construct a concrete instance of `EntityStatusInput` via:
//
//	EntityStatusArgs{...}
type EntityStatusInput interface {
	pulumi.Input

	ToEntityStatusOutput() EntityStatusOutput
	ToEntityStatusOutputWithContext(context.Context) EntityStatusOutput
}

var entityStatusPtrType = reflect.TypeOf((**EntityStatus)(nil)).Elem()

type EntityStatusPtrInput interface {
	pulumi.Input

	ToEntityStatusPtrOutput() EntityStatusPtrOutput
	ToEntityStatusPtrOutputWithContext(context.Context) EntityStatusPtrOutput
}

type entityStatusPtr string

func EntityStatusPtr(v string) EntityStatusPtrInput {
	return (*entityStatusPtr)(&v)
}

func (*entityStatusPtr) ElementType() reflect.Type {
	return entityStatusPtrType
}

func (in *entityStatusPtr) ToEntityStatusPtrOutput() EntityStatusPtrOutput {
	return pulumi.ToOutput(in).(EntityStatusPtrOutput)
}

func (in *entityStatusPtr) ToEntityStatusPtrOutputWithContext(ctx context.Context) EntityStatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(EntityStatusPtrOutput)
}

// State of the namespace.
type NamespaceStateEnum string

const (
	NamespaceStateEnumUnknown      = NamespaceStateEnum("Unknown")
	NamespaceStateEnumCreating     = NamespaceStateEnum("Creating")
	NamespaceStateEnumCreated      = NamespaceStateEnum("Created")
	NamespaceStateEnumActivating   = NamespaceStateEnum("Activating")
	NamespaceStateEnumEnabling     = NamespaceStateEnum("Enabling")
	NamespaceStateEnumActive       = NamespaceStateEnum("Active")
	NamespaceStateEnumDisabling    = NamespaceStateEnum("Disabling")
	NamespaceStateEnumDisabled     = NamespaceStateEnum("Disabled")
	NamespaceStateEnumSoftDeleting = NamespaceStateEnum("SoftDeleting")
	NamespaceStateEnumSoftDeleted  = NamespaceStateEnum("SoftDeleted")
	NamespaceStateEnumRemoving     = NamespaceStateEnum("Removing")
	NamespaceStateEnumRemoved      = NamespaceStateEnum("Removed")
	NamespaceStateEnumFailed       = NamespaceStateEnum("Failed")
)

func (NamespaceStateEnum) ElementType() reflect.Type {
	return reflect.TypeOf((*NamespaceStateEnum)(nil)).Elem()
}

func (e NamespaceStateEnum) ToNamespaceStateEnumOutput() NamespaceStateEnumOutput {
	return pulumi.ToOutput(e).(NamespaceStateEnumOutput)
}

func (e NamespaceStateEnum) ToNamespaceStateEnumOutputWithContext(ctx context.Context) NamespaceStateEnumOutput {
	return pulumi.ToOutputWithContext(ctx, e).(NamespaceStateEnumOutput)
}

func (e NamespaceStateEnum) ToNamespaceStateEnumPtrOutput() NamespaceStateEnumPtrOutput {
	return e.ToNamespaceStateEnumPtrOutputWithContext(context.Background())
}

func (e NamespaceStateEnum) ToNamespaceStateEnumPtrOutputWithContext(ctx context.Context) NamespaceStateEnumPtrOutput {
	return NamespaceStateEnum(e).ToNamespaceStateEnumOutputWithContext(ctx).ToNamespaceStateEnumPtrOutputWithContext(ctx)
}

func (e NamespaceStateEnum) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e NamespaceStateEnum) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e NamespaceStateEnum) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e NamespaceStateEnum) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type NamespaceStateEnumOutput struct{ *pulumi.OutputState }

func (NamespaceStateEnumOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NamespaceStateEnum)(nil)).Elem()
}

func (o NamespaceStateEnumOutput) ToNamespaceStateEnumOutput() NamespaceStateEnumOutput {
	return o
}

func (o NamespaceStateEnumOutput) ToNamespaceStateEnumOutputWithContext(ctx context.Context) NamespaceStateEnumOutput {
	return o
}

func (o NamespaceStateEnumOutput) ToNamespaceStateEnumPtrOutput() NamespaceStateEnumPtrOutput {
	return o.ToNamespaceStateEnumPtrOutputWithContext(context.Background())
}

func (o NamespaceStateEnumOutput) ToNamespaceStateEnumPtrOutputWithContext(ctx context.Context) NamespaceStateEnumPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v NamespaceStateEnum) *NamespaceStateEnum {
		return &v
	}).(NamespaceStateEnumPtrOutput)
}

func (o NamespaceStateEnumOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o NamespaceStateEnumOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e NamespaceStateEnum) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o NamespaceStateEnumOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o NamespaceStateEnumOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e NamespaceStateEnum) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type NamespaceStateEnumPtrOutput struct{ *pulumi.OutputState }

func (NamespaceStateEnumPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NamespaceStateEnum)(nil)).Elem()
}

func (o NamespaceStateEnumPtrOutput) ToNamespaceStateEnumPtrOutput() NamespaceStateEnumPtrOutput {
	return o
}

func (o NamespaceStateEnumPtrOutput) ToNamespaceStateEnumPtrOutputWithContext(ctx context.Context) NamespaceStateEnumPtrOutput {
	return o
}

func (o NamespaceStateEnumPtrOutput) Elem() NamespaceStateEnumOutput {
	return o.ApplyT(func(v *NamespaceStateEnum) NamespaceStateEnum {
		if v != nil {
			return *v
		}
		var ret NamespaceStateEnum
		return ret
	}).(NamespaceStateEnumOutput)
}

func (o NamespaceStateEnumPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o NamespaceStateEnumPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *NamespaceStateEnum) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// NamespaceStateEnumInput is an input type that accepts NamespaceStateEnumArgs and NamespaceStateEnumOutput values.
// You can construct a concrete instance of `NamespaceStateEnumInput` via:
//
//	NamespaceStateEnumArgs{...}
type NamespaceStateEnumInput interface {
	pulumi.Input

	ToNamespaceStateEnumOutput() NamespaceStateEnumOutput
	ToNamespaceStateEnumOutputWithContext(context.Context) NamespaceStateEnumOutput
}

var namespaceStateEnumPtrType = reflect.TypeOf((**NamespaceStateEnum)(nil)).Elem()

type NamespaceStateEnumPtrInput interface {
	pulumi.Input

	ToNamespaceStateEnumPtrOutput() NamespaceStateEnumPtrOutput
	ToNamespaceStateEnumPtrOutputWithContext(context.Context) NamespaceStateEnumPtrOutput
}

type namespaceStateEnumPtr string

func NamespaceStateEnumPtr(v string) NamespaceStateEnumPtrInput {
	return (*namespaceStateEnumPtr)(&v)
}

func (*namespaceStateEnumPtr) ElementType() reflect.Type {
	return namespaceStateEnumPtrType
}

func (in *namespaceStateEnumPtr) ToNamespaceStateEnumPtrOutput() NamespaceStateEnumPtrOutput {
	return pulumi.ToOutput(in).(NamespaceStateEnumPtrOutput)
}

func (in *namespaceStateEnumPtr) ToNamespaceStateEnumPtrOutputWithContext(ctx context.Context) NamespaceStateEnumPtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(NamespaceStateEnumPtrOutput)
}

// Name of this SKU.
type SkuName string

const (
	SkuNameBasic    = SkuName("Basic")
	SkuNameStandard = SkuName("Standard")
	SkuNamePremium  = SkuName("Premium")
)

// The billing tier of this particular SKU.
type SkuTier string

const (
	SkuTierBasic    = SkuTier("Basic")
	SkuTierStandard = SkuTier("Standard")
	SkuTierPremium  = SkuTier("Premium")
)

func init() {
	pulumi.RegisterOutputType(AccessRightsOutput{})
	pulumi.RegisterOutputType(AccessRightsPtrOutput{})
	pulumi.RegisterOutputType(AccessRightsArrayOutput{})
	pulumi.RegisterOutputType(EntityAvailabilityStatusOutput{})
	pulumi.RegisterOutputType(EntityAvailabilityStatusPtrOutput{})
	pulumi.RegisterOutputType(EntityStatusOutput{})
	pulumi.RegisterOutputType(EntityStatusPtrOutput{})
	pulumi.RegisterOutputType(NamespaceStateEnumOutput{})
	pulumi.RegisterOutputType(NamespaceStateEnumPtrOutput{})
}
