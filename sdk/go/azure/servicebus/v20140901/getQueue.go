// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v20140901

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Description of queue Resource.
//
// Deprecated: Version 2014-09-01 will be removed in v2 of the provider.
func LookupQueue(ctx *pulumi.Context, args *LookupQueueArgs, opts ...pulumi.InvokeOption) (*LookupQueueResult, error) {
	var rv LookupQueueResult
	err := ctx.Invoke("azure-native:servicebus/v20140901:getQueue", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type LookupQueueArgs struct {
	// The namespace name
	NamespaceName string `pulumi:"namespaceName"`
	// The queue name.
	QueueName string `pulumi:"queueName"`
	// Name of the Resource group within the Azure subscription.
	ResourceGroupName string `pulumi:"resourceGroupName"`
}

// Description of queue Resource.
type LookupQueueResult struct {
	// Last time a message was sent, or the last time there was a receive request to this queue.
	AccessedAt string `pulumi:"accessedAt"`
	// the TimeSpan idle interval after which the queue is automatically deleted. The minimum duration is 5 minutes.
	AutoDeleteOnIdle *string `pulumi:"autoDeleteOnIdle"`
	// Message Count Details.
	CountDetails MessageCountDetailsResponse `pulumi:"countDetails"`
	// The exact time the message was created.
	CreatedAt string `pulumi:"createdAt"`
	// A value that indicates whether this queue has dead letter support when a message expires.
	DeadLetteringOnMessageExpiration *bool `pulumi:"deadLetteringOnMessageExpiration"`
	// The default message time to live value. This is the duration after which the message expires, starting from when the message is sent to Service Bus. This is the default value used when TimeToLive is not set on a message itself.
	DefaultMessageTimeToLive *string `pulumi:"defaultMessageTimeToLive"`
	// TimeSpan structure that defines the duration of the duplicate detection history. The default value is 10 minutes.
	DuplicateDetectionHistoryTimeWindow *string `pulumi:"duplicateDetectionHistoryTimeWindow"`
	// A value that indicates whether server-side batched operations are enabled.
	EnableBatchedOperations *bool `pulumi:"enableBatchedOperations"`
	// A value that indicates whether Express Entities are enabled. An express queue holds a message in memory temporarily before writing it to persistent storage.
	EnableExpress *bool `pulumi:"enableExpress"`
	// A value that indicates whether the queue is to be partitioned across multiple message brokers.
	EnablePartitioning *bool `pulumi:"enablePartitioning"`
	// Entity availability status for the queue.
	EntityAvailabilityStatus *string `pulumi:"entityAvailabilityStatus"`
	// Resource Id
	Id string `pulumi:"id"`
	// A value that indicates whether the message is accessible anonymously.
	IsAnonymousAccessible *bool `pulumi:"isAnonymousAccessible"`
	// Resource location.
	Location *string `pulumi:"location"`
	// The duration of a peek-lock; that is, the amount of time that the message is locked for other receivers. The maximum value for LockDuration is 5 minutes; the default value is 1 minute.
	LockDuration *string `pulumi:"lockDuration"`
	// The maximum delivery count. A message is automatically deadlettered after this number of deliveries.
	MaxDeliveryCount *int `pulumi:"maxDeliveryCount"`
	// The maximum size of the queue in megabytes, which is the size of memory allocated for the queue.
	MaxSizeInMegabytes *float64 `pulumi:"maxSizeInMegabytes"`
	// The number of messages in the queue.
	MessageCount float64 `pulumi:"messageCount"`
	// Resource name
	Name string `pulumi:"name"`
	// A value indicating if this queue requires duplicate detection.
	RequiresDuplicateDetection *bool `pulumi:"requiresDuplicateDetection"`
	// A value that indicates whether the queue supports the concept of sessions.
	RequiresSession *bool `pulumi:"requiresSession"`
	// The size of the queue, in bytes.
	SizeInBytes float64 `pulumi:"sizeInBytes"`
	// Enumerates the possible values for the status of a messaging entity.
	Status *string `pulumi:"status"`
	// A value that indicates whether the queue supports ordering.
	SupportOrdering *bool `pulumi:"supportOrdering"`
	// Resource type
	Type string `pulumi:"type"`
	// The exact time the message was updated.
	UpdatedAt string `pulumi:"updatedAt"`
}

func LookupQueueOutput(ctx *pulumi.Context, args LookupQueueOutputArgs, opts ...pulumi.InvokeOption) LookupQueueResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupQueueResult, error) {
			args := v.(LookupQueueArgs)
			r, err := LookupQueue(ctx, &args, opts...)
			var s LookupQueueResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupQueueResultOutput)
}

type LookupQueueOutputArgs struct {
	// The namespace name
	NamespaceName pulumi.StringInput `pulumi:"namespaceName"`
	// The queue name.
	QueueName pulumi.StringInput `pulumi:"queueName"`
	// Name of the Resource group within the Azure subscription.
	ResourceGroupName pulumi.StringInput `pulumi:"resourceGroupName"`
}

func (LookupQueueOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupQueueArgs)(nil)).Elem()
}

// Description of queue Resource.
type LookupQueueResultOutput struct{ *pulumi.OutputState }

func (LookupQueueResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupQueueResult)(nil)).Elem()
}

func (o LookupQueueResultOutput) ToLookupQueueResultOutput() LookupQueueResultOutput {
	return o
}

func (o LookupQueueResultOutput) ToLookupQueueResultOutputWithContext(ctx context.Context) LookupQueueResultOutput {
	return o
}

// Last time a message was sent, or the last time there was a receive request to this queue.
func (o LookupQueueResultOutput) AccessedAt() pulumi.StringOutput {
	return o.ApplyT(func(v LookupQueueResult) string { return v.AccessedAt }).(pulumi.StringOutput)
}

// the TimeSpan idle interval after which the queue is automatically deleted. The minimum duration is 5 minutes.
func (o LookupQueueResultOutput) AutoDeleteOnIdle() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupQueueResult) *string { return v.AutoDeleteOnIdle }).(pulumi.StringPtrOutput)
}

// Message Count Details.
func (o LookupQueueResultOutput) CountDetails() MessageCountDetailsResponseOutput {
	return o.ApplyT(func(v LookupQueueResult) MessageCountDetailsResponse { return v.CountDetails }).(MessageCountDetailsResponseOutput)
}

// The exact time the message was created.
func (o LookupQueueResultOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v LookupQueueResult) string { return v.CreatedAt }).(pulumi.StringOutput)
}

// A value that indicates whether this queue has dead letter support when a message expires.
func (o LookupQueueResultOutput) DeadLetteringOnMessageExpiration() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v LookupQueueResult) *bool { return v.DeadLetteringOnMessageExpiration }).(pulumi.BoolPtrOutput)
}

// The default message time to live value. This is the duration after which the message expires, starting from when the message is sent to Service Bus. This is the default value used when TimeToLive is not set on a message itself.
func (o LookupQueueResultOutput) DefaultMessageTimeToLive() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupQueueResult) *string { return v.DefaultMessageTimeToLive }).(pulumi.StringPtrOutput)
}

// TimeSpan structure that defines the duration of the duplicate detection history. The default value is 10 minutes.
func (o LookupQueueResultOutput) DuplicateDetectionHistoryTimeWindow() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupQueueResult) *string { return v.DuplicateDetectionHistoryTimeWindow }).(pulumi.StringPtrOutput)
}

// A value that indicates whether server-side batched operations are enabled.
func (o LookupQueueResultOutput) EnableBatchedOperations() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v LookupQueueResult) *bool { return v.EnableBatchedOperations }).(pulumi.BoolPtrOutput)
}

// A value that indicates whether Express Entities are enabled. An express queue holds a message in memory temporarily before writing it to persistent storage.
func (o LookupQueueResultOutput) EnableExpress() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v LookupQueueResult) *bool { return v.EnableExpress }).(pulumi.BoolPtrOutput)
}

// A value that indicates whether the queue is to be partitioned across multiple message brokers.
func (o LookupQueueResultOutput) EnablePartitioning() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v LookupQueueResult) *bool { return v.EnablePartitioning }).(pulumi.BoolPtrOutput)
}

// Entity availability status for the queue.
func (o LookupQueueResultOutput) EntityAvailabilityStatus() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupQueueResult) *string { return v.EntityAvailabilityStatus }).(pulumi.StringPtrOutput)
}

// Resource Id
func (o LookupQueueResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupQueueResult) string { return v.Id }).(pulumi.StringOutput)
}

// A value that indicates whether the message is accessible anonymously.
func (o LookupQueueResultOutput) IsAnonymousAccessible() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v LookupQueueResult) *bool { return v.IsAnonymousAccessible }).(pulumi.BoolPtrOutput)
}

// Resource location.
func (o LookupQueueResultOutput) Location() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupQueueResult) *string { return v.Location }).(pulumi.StringPtrOutput)
}

// The duration of a peek-lock; that is, the amount of time that the message is locked for other receivers. The maximum value for LockDuration is 5 minutes; the default value is 1 minute.
func (o LookupQueueResultOutput) LockDuration() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupQueueResult) *string { return v.LockDuration }).(pulumi.StringPtrOutput)
}

// The maximum delivery count. A message is automatically deadlettered after this number of deliveries.
func (o LookupQueueResultOutput) MaxDeliveryCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v LookupQueueResult) *int { return v.MaxDeliveryCount }).(pulumi.IntPtrOutput)
}

// The maximum size of the queue in megabytes, which is the size of memory allocated for the queue.
func (o LookupQueueResultOutput) MaxSizeInMegabytes() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v LookupQueueResult) *float64 { return v.MaxSizeInMegabytes }).(pulumi.Float64PtrOutput)
}

// The number of messages in the queue.
func (o LookupQueueResultOutput) MessageCount() pulumi.Float64Output {
	return o.ApplyT(func(v LookupQueueResult) float64 { return v.MessageCount }).(pulumi.Float64Output)
}

// Resource name
func (o LookupQueueResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupQueueResult) string { return v.Name }).(pulumi.StringOutput)
}

// A value indicating if this queue requires duplicate detection.
func (o LookupQueueResultOutput) RequiresDuplicateDetection() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v LookupQueueResult) *bool { return v.RequiresDuplicateDetection }).(pulumi.BoolPtrOutput)
}

// A value that indicates whether the queue supports the concept of sessions.
func (o LookupQueueResultOutput) RequiresSession() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v LookupQueueResult) *bool { return v.RequiresSession }).(pulumi.BoolPtrOutput)
}

// The size of the queue, in bytes.
func (o LookupQueueResultOutput) SizeInBytes() pulumi.Float64Output {
	return o.ApplyT(func(v LookupQueueResult) float64 { return v.SizeInBytes }).(pulumi.Float64Output)
}

// Enumerates the possible values for the status of a messaging entity.
func (o LookupQueueResultOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupQueueResult) *string { return v.Status }).(pulumi.StringPtrOutput)
}

// A value that indicates whether the queue supports ordering.
func (o LookupQueueResultOutput) SupportOrdering() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v LookupQueueResult) *bool { return v.SupportOrdering }).(pulumi.BoolPtrOutput)
}

// Resource type
func (o LookupQueueResultOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v LookupQueueResult) string { return v.Type }).(pulumi.StringOutput)
}

// The exact time the message was updated.
func (o LookupQueueResultOutput) UpdatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v LookupQueueResult) string { return v.UpdatedAt }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupQueueResultOutput{})
}
