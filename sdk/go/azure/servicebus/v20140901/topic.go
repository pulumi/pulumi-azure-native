// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v20140901

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type Topic struct {
	pulumi.CustomResourceState

	AccessedAt                          pulumi.StringOutput               `pulumi:"accessedAt"`
	AutoDeleteOnIdle                    pulumi.StringPtrOutput            `pulumi:"autoDeleteOnIdle"`
	CountDetails                        MessageCountDetailsResponseOutput `pulumi:"countDetails"`
	CreatedAt                           pulumi.StringOutput               `pulumi:"createdAt"`
	DefaultMessageTimeToLive            pulumi.StringPtrOutput            `pulumi:"defaultMessageTimeToLive"`
	DuplicateDetectionHistoryTimeWindow pulumi.StringPtrOutput            `pulumi:"duplicateDetectionHistoryTimeWindow"`
	EnableBatchedOperations             pulumi.BoolPtrOutput              `pulumi:"enableBatchedOperations"`
	EnableExpress                       pulumi.BoolPtrOutput              `pulumi:"enableExpress"`
	EnablePartitioning                  pulumi.BoolPtrOutput              `pulumi:"enablePartitioning"`
	EntityAvailabilityStatus            pulumi.StringPtrOutput            `pulumi:"entityAvailabilityStatus"`
	FilteringMessagesBeforePublishing   pulumi.BoolPtrOutput              `pulumi:"filteringMessagesBeforePublishing"`
	IsAnonymousAccessible               pulumi.BoolPtrOutput              `pulumi:"isAnonymousAccessible"`
	IsExpress                           pulumi.BoolPtrOutput              `pulumi:"isExpress"`
	Location                            pulumi.StringPtrOutput            `pulumi:"location"`
	MaxSizeInMegabytes                  pulumi.Float64PtrOutput           `pulumi:"maxSizeInMegabytes"`
	Name                                pulumi.StringOutput               `pulumi:"name"`
	RequiresDuplicateDetection          pulumi.BoolPtrOutput              `pulumi:"requiresDuplicateDetection"`
	SizeInBytes                         pulumi.Float64Output              `pulumi:"sizeInBytes"`
	Status                              pulumi.StringPtrOutput            `pulumi:"status"`
	SubscriptionCount                   pulumi.IntOutput                  `pulumi:"subscriptionCount"`
	SupportOrdering                     pulumi.BoolPtrOutput              `pulumi:"supportOrdering"`
	Type                                pulumi.StringOutput               `pulumi:"type"`
	UpdatedAt                           pulumi.StringOutput               `pulumi:"updatedAt"`
}

// NewTopic registers a new resource with the given unique name, arguments, and options.
func NewTopic(ctx *pulumi.Context,
	name string, args *TopicArgs, opts ...pulumi.ResourceOption) (*Topic, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.NamespaceName == nil {
		return nil, errors.New("invalid value for required argument 'NamespaceName'")
	}
	if args.ResourceGroupName == nil {
		return nil, errors.New("invalid value for required argument 'ResourceGroupName'")
	}
	aliases := pulumi.Aliases([]pulumi.Alias{
		{
			Type: pulumi.String("azure-nextgen:servicebus/v20140901:Topic"),
		},
		{
			Type: pulumi.String("azure-native:servicebus:Topic"),
		},
		{
			Type: pulumi.String("azure-nextgen:servicebus:Topic"),
		},
		{
			Type: pulumi.String("azure-native:servicebus/v20150801:Topic"),
		},
		{
			Type: pulumi.String("azure-nextgen:servicebus/v20150801:Topic"),
		},
		{
			Type: pulumi.String("azure-native:servicebus/v20170401:Topic"),
		},
		{
			Type: pulumi.String("azure-nextgen:servicebus/v20170401:Topic"),
		},
		{
			Type: pulumi.String("azure-native:servicebus/v20180101preview:Topic"),
		},
		{
			Type: pulumi.String("azure-nextgen:servicebus/v20180101preview:Topic"),
		},
		{
			Type: pulumi.String("azure-native:servicebus/v20210101preview:Topic"),
		},
		{
			Type: pulumi.String("azure-nextgen:servicebus/v20210101preview:Topic"),
		},
		{
			Type: pulumi.String("azure-native:servicebus/v20210601preview:Topic"),
		},
		{
			Type: pulumi.String("azure-nextgen:servicebus/v20210601preview:Topic"),
		},
	})
	opts = append(opts, aliases)
	var resource Topic
	err := ctx.RegisterResource("azure-native:servicebus/v20140901:Topic", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetTopic gets an existing Topic resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetTopic(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *TopicState, opts ...pulumi.ResourceOption) (*Topic, error) {
	var resource Topic
	err := ctx.ReadResource("azure-native:servicebus/v20140901:Topic", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Topic resources.
type topicState struct {
}

type TopicState struct {
}

func (TopicState) ElementType() reflect.Type {
	return reflect.TypeOf((*topicState)(nil)).Elem()
}

type topicArgs struct {
	AutoDeleteOnIdle                    *string                   `pulumi:"autoDeleteOnIdle"`
	DefaultMessageTimeToLive            *string                   `pulumi:"defaultMessageTimeToLive"`
	DuplicateDetectionHistoryTimeWindow *string                   `pulumi:"duplicateDetectionHistoryTimeWindow"`
	EnableBatchedOperations             *bool                     `pulumi:"enableBatchedOperations"`
	EnableExpress                       *bool                     `pulumi:"enableExpress"`
	EnablePartitioning                  *bool                     `pulumi:"enablePartitioning"`
	EntityAvailabilityStatus            *EntityAvailabilityStatus `pulumi:"entityAvailabilityStatus"`
	FilteringMessagesBeforePublishing   *bool                     `pulumi:"filteringMessagesBeforePublishing"`
	IsAnonymousAccessible               *bool                     `pulumi:"isAnonymousAccessible"`
	IsExpress                           *bool                     `pulumi:"isExpress"`
	Location                            *string                   `pulumi:"location"`
	MaxSizeInMegabytes                  *float64                  `pulumi:"maxSizeInMegabytes"`
	Name                                *string                   `pulumi:"name"`
	NamespaceName                       string                    `pulumi:"namespaceName"`
	RequiresDuplicateDetection          *bool                     `pulumi:"requiresDuplicateDetection"`
	ResourceGroupName                   string                    `pulumi:"resourceGroupName"`
	Status                              *EntityStatus             `pulumi:"status"`
	SupportOrdering                     *bool                     `pulumi:"supportOrdering"`
	TopicName                           *string                   `pulumi:"topicName"`
}

// The set of arguments for constructing a Topic resource.
type TopicArgs struct {
	AutoDeleteOnIdle                    pulumi.StringPtrInput
	DefaultMessageTimeToLive            pulumi.StringPtrInput
	DuplicateDetectionHistoryTimeWindow pulumi.StringPtrInput
	EnableBatchedOperations             pulumi.BoolPtrInput
	EnableExpress                       pulumi.BoolPtrInput
	EnablePartitioning                  pulumi.BoolPtrInput
	EntityAvailabilityStatus            EntityAvailabilityStatusPtrInput
	FilteringMessagesBeforePublishing   pulumi.BoolPtrInput
	IsAnonymousAccessible               pulumi.BoolPtrInput
	IsExpress                           pulumi.BoolPtrInput
	Location                            pulumi.StringPtrInput
	MaxSizeInMegabytes                  pulumi.Float64PtrInput
	Name                                pulumi.StringPtrInput
	NamespaceName                       pulumi.StringInput
	RequiresDuplicateDetection          pulumi.BoolPtrInput
	ResourceGroupName                   pulumi.StringInput
	Status                              EntityStatusPtrInput
	SupportOrdering                     pulumi.BoolPtrInput
	TopicName                           pulumi.StringPtrInput
}

func (TopicArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*topicArgs)(nil)).Elem()
}

type TopicInput interface {
	pulumi.Input

	ToTopicOutput() TopicOutput
	ToTopicOutputWithContext(ctx context.Context) TopicOutput
}

func (*Topic) ElementType() reflect.Type {
	return reflect.TypeOf((*Topic)(nil))
}

func (i *Topic) ToTopicOutput() TopicOutput {
	return i.ToTopicOutputWithContext(context.Background())
}

func (i *Topic) ToTopicOutputWithContext(ctx context.Context) TopicOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TopicOutput)
}

type TopicOutput struct{ *pulumi.OutputState }

func (TopicOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Topic)(nil))
}

func (o TopicOutput) ToTopicOutput() TopicOutput {
	return o
}

func (o TopicOutput) ToTopicOutputWithContext(ctx context.Context) TopicOutput {
	return o
}

func init() {
	pulumi.RegisterOutputType(TopicOutput{})
}
