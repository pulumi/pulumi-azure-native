// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v20170901preview

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Pipeline resource type.
//
// Deprecated: Version 2017-09-01-preview will be removed in v2 of the provider.
type Pipeline struct {
	pulumi.CustomResourceState

	// List of activities in pipeline.
	Activities pulumi.ArrayOutput `pulumi:"activities"`
	// List of tags that can be used for describing the Pipeline.
	Annotations pulumi.ArrayOutput `pulumi:"annotations"`
	// The max number of concurrent runs for the pipeline.
	Concurrency pulumi.IntPtrOutput `pulumi:"concurrency"`
	// The description of the pipeline.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// Etag identifies change in the resource.
	Etag pulumi.StringOutput `pulumi:"etag"`
	// The resource name.
	Name pulumi.StringOutput `pulumi:"name"`
	// List of parameters for pipeline.
	Parameters ParameterSpecificationResponseMapOutput `pulumi:"parameters"`
	// The resource type.
	Type pulumi.StringOutput `pulumi:"type"`
}

// NewPipeline registers a new resource with the given unique name, arguments, and options.
func NewPipeline(ctx *pulumi.Context,
	name string, args *PipelineArgs, opts ...pulumi.ResourceOption) (*Pipeline, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.FactoryName == nil {
		return nil, errors.New("invalid value for required argument 'FactoryName'")
	}
	if args.ResourceGroupName == nil {
		return nil, errors.New("invalid value for required argument 'ResourceGroupName'")
	}
	aliases := pulumi.Aliases([]pulumi.Alias{
		{
			Type: pulumi.String("azure-native:datafactory:Pipeline"),
		},
		{
			Type: pulumi.String("azure-native:datafactory/v20180601:Pipeline"),
		},
	})
	opts = append(opts, aliases)
	var resource Pipeline
	err := ctx.RegisterResource("azure-native:datafactory/v20170901preview:Pipeline", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetPipeline gets an existing Pipeline resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetPipeline(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *PipelineState, opts ...pulumi.ResourceOption) (*Pipeline, error) {
	var resource Pipeline
	err := ctx.ReadResource("azure-native:datafactory/v20170901preview:Pipeline", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Pipeline resources.
type pipelineState struct {
}

type PipelineState struct {
}

func (PipelineState) ElementType() reflect.Type {
	return reflect.TypeOf((*pipelineState)(nil)).Elem()
}

type pipelineArgs struct {
	// List of activities in pipeline.
	Activities []interface{} `pulumi:"activities"`
	// List of tags that can be used for describing the Pipeline.
	Annotations []interface{} `pulumi:"annotations"`
	// The max number of concurrent runs for the pipeline.
	Concurrency *int `pulumi:"concurrency"`
	// The description of the pipeline.
	Description *string `pulumi:"description"`
	// The factory name.
	FactoryName string `pulumi:"factoryName"`
	// List of parameters for pipeline.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// The pipeline name.
	PipelineName *string `pulumi:"pipelineName"`
	// The resource group name.
	ResourceGroupName string `pulumi:"resourceGroupName"`
}

// The set of arguments for constructing a Pipeline resource.
type PipelineArgs struct {
	// List of activities in pipeline.
	Activities pulumi.ArrayInput
	// List of tags that can be used for describing the Pipeline.
	Annotations pulumi.ArrayInput
	// The max number of concurrent runs for the pipeline.
	Concurrency pulumi.IntPtrInput
	// The description of the pipeline.
	Description pulumi.StringPtrInput
	// The factory name.
	FactoryName pulumi.StringInput
	// List of parameters for pipeline.
	Parameters ParameterSpecificationMapInput
	// The pipeline name.
	PipelineName pulumi.StringPtrInput
	// The resource group name.
	ResourceGroupName pulumi.StringInput
}

func (PipelineArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*pipelineArgs)(nil)).Elem()
}

type PipelineInput interface {
	pulumi.Input

	ToPipelineOutput() PipelineOutput
	ToPipelineOutputWithContext(ctx context.Context) PipelineOutput
}

func (*Pipeline) ElementType() reflect.Type {
	return reflect.TypeOf((**Pipeline)(nil)).Elem()
}

func (i *Pipeline) ToPipelineOutput() PipelineOutput {
	return i.ToPipelineOutputWithContext(context.Background())
}

func (i *Pipeline) ToPipelineOutputWithContext(ctx context.Context) PipelineOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipelineOutput)
}

type PipelineOutput struct{ *pulumi.OutputState }

func (PipelineOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Pipeline)(nil)).Elem()
}

func (o PipelineOutput) ToPipelineOutput() PipelineOutput {
	return o
}

func (o PipelineOutput) ToPipelineOutputWithContext(ctx context.Context) PipelineOutput {
	return o
}

// List of activities in pipeline.
func (o PipelineOutput) Activities() pulumi.ArrayOutput {
	return o.ApplyT(func(v *Pipeline) pulumi.ArrayOutput { return v.Activities }).(pulumi.ArrayOutput)
}

// List of tags that can be used for describing the Pipeline.
func (o PipelineOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v *Pipeline) pulumi.ArrayOutput { return v.Annotations }).(pulumi.ArrayOutput)
}

// The max number of concurrent runs for the pipeline.
func (o PipelineOutput) Concurrency() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Pipeline) pulumi.IntPtrOutput { return v.Concurrency }).(pulumi.IntPtrOutput)
}

// The description of the pipeline.
func (o PipelineOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Pipeline) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// Etag identifies change in the resource.
func (o PipelineOutput) Etag() pulumi.StringOutput {
	return o.ApplyT(func(v *Pipeline) pulumi.StringOutput { return v.Etag }).(pulumi.StringOutput)
}

// The resource name.
func (o PipelineOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Pipeline) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// List of parameters for pipeline.
func (o PipelineOutput) Parameters() ParameterSpecificationResponseMapOutput {
	return o.ApplyT(func(v *Pipeline) ParameterSpecificationResponseMapOutput { return v.Parameters }).(ParameterSpecificationResponseMapOutput)
}

// The resource type.
func (o PipelineOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *Pipeline) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(PipelineOutput{})
}
