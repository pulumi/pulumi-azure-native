// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v20180601

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Activity dependency information.
type ActivityDependency struct {
	// Activity name.
	Activity string `pulumi:"activity"`
	// Match-Condition for the dependency.
	DependencyConditions []string `pulumi:"dependencyConditions"`
}

// Activity dependency information.
type ActivityDependencyResponse struct {
	// Activity name.
	Activity string `pulumi:"activity"`
	// Match-Condition for the dependency.
	DependencyConditions []string `pulumi:"dependencyConditions"`
}

// Execution policy for an activity.
type ActivityPolicy struct {
	// Maximum ordinary retry attempts. Default is 0. Type: integer (or Expression with resultType integer), minimum: 0.
	Retry interface{} `pulumi:"retry"`
	// Interval between each retry attempt (in seconds). The default is 30 sec.
	RetryIntervalInSeconds *int `pulumi:"retryIntervalInSeconds"`
	// When set to true, Input from activity is considered as secure and will not be logged to monitoring.
	SecureInput *bool `pulumi:"secureInput"`
	// When set to true, Output from activity is considered as secure and will not be logged to monitoring.
	SecureOutput *bool `pulumi:"secureOutput"`
	// Specifies the timeout for the activity to run. The default timeout is 7 days. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	Timeout interface{} `pulumi:"timeout"`
}

// Execution policy for an activity.
type ActivityPolicyResponse struct {
	// Maximum ordinary retry attempts. Default is 0. Type: integer (or Expression with resultType integer), minimum: 0.
	Retry interface{} `pulumi:"retry"`
	// Interval between each retry attempt (in seconds). The default is 30 sec.
	RetryIntervalInSeconds *int `pulumi:"retryIntervalInSeconds"`
	// When set to true, Input from activity is considered as secure and will not be logged to monitoring.
	SecureInput *bool `pulumi:"secureInput"`
	// When set to true, Output from activity is considered as secure and will not be logged to monitoring.
	SecureOutput *bool `pulumi:"secureOutput"`
	// Specifies the timeout for the activity to run. The default timeout is 7 days. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	Timeout interface{} `pulumi:"timeout"`
}

// Amazon Marketplace Web Service linked service.
type AmazonMWSLinkedService struct {
	// The access key id used to access data.
	AccessKeyId interface{} `pulumi:"accessKeyId"`
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference `pulumi:"connectVia"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential interface{} `pulumi:"encryptedCredential"`
	// The endpoint of the Amazon MWS server, (i.e. mws.amazonservices.com)
	Endpoint interface{} `pulumi:"endpoint"`
	// The Amazon Marketplace ID you want to retrieve data from. To retrieve data from multiple Marketplace IDs, separate them with a comma (,). (i.e. A2EUQ1WTGCTBG2)
	MarketplaceID interface{} `pulumi:"marketplaceID"`
	// The Amazon MWS authentication token.
	MwsAuthToken interface{} `pulumi:"mwsAuthToken"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// The secret key used to access data.
	SecretKey interface{} `pulumi:"secretKey"`
	// The Amazon seller ID.
	SellerID interface{} `pulumi:"sellerID"`
	// Type of linked service.
	// Expected value is 'AmazonMWS'.
	Type string `pulumi:"type"`
	// Specifies whether the data source endpoints are encrypted using HTTPS. The default value is true.
	UseEncryptedEndpoints interface{} `pulumi:"useEncryptedEndpoints"`
	// Specifies whether to require the host name in the server's certificate to match the host name of the server when connecting over SSL. The default value is true.
	UseHostVerification interface{} `pulumi:"useHostVerification"`
	// Specifies whether to verify the identity of the server when connecting over SSL. The default value is true.
	UsePeerVerification interface{} `pulumi:"usePeerVerification"`
}

// Amazon Marketplace Web Service linked service.
type AmazonMWSLinkedServiceResponse struct {
	// The access key id used to access data.
	AccessKeyId interface{} `pulumi:"accessKeyId"`
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReferenceResponse `pulumi:"connectVia"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential interface{} `pulumi:"encryptedCredential"`
	// The endpoint of the Amazon MWS server, (i.e. mws.amazonservices.com)
	Endpoint interface{} `pulumi:"endpoint"`
	// The Amazon Marketplace ID you want to retrieve data from. To retrieve data from multiple Marketplace IDs, separate them with a comma (,). (i.e. A2EUQ1WTGCTBG2)
	MarketplaceID interface{} `pulumi:"marketplaceID"`
	// The Amazon MWS authentication token.
	MwsAuthToken interface{} `pulumi:"mwsAuthToken"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// The secret key used to access data.
	SecretKey interface{} `pulumi:"secretKey"`
	// The Amazon seller ID.
	SellerID interface{} `pulumi:"sellerID"`
	// Type of linked service.
	// Expected value is 'AmazonMWS'.
	Type string `pulumi:"type"`
	// Specifies whether the data source endpoints are encrypted using HTTPS. The default value is true.
	UseEncryptedEndpoints interface{} `pulumi:"useEncryptedEndpoints"`
	// Specifies whether to require the host name in the server's certificate to match the host name of the server when connecting over SSL. The default value is true.
	UseHostVerification interface{} `pulumi:"useHostVerification"`
	// Specifies whether to verify the identity of the server when connecting over SSL. The default value is true.
	UsePeerVerification interface{} `pulumi:"usePeerVerification"`
}

// Amazon Marketplace Web Service dataset.
type AmazonMWSObjectDataset struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReference `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// The table name. Type: string (or Expression with resultType string).
	TableName interface{} `pulumi:"tableName"`
	// Type of dataset.
	// Expected value is 'AmazonMWSObject'.
	Type string `pulumi:"type"`
}

// Amazon Marketplace Web Service dataset.
type AmazonMWSObjectDatasetResponse struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetResponseFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceResponse `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// The table name. Type: string (or Expression with resultType string).
	TableName interface{} `pulumi:"tableName"`
	// Type of dataset.
	// Expected value is 'AmazonMWSObject'.
	Type string `pulumi:"type"`
}

// A copy activity Amazon Marketplace Web Service source.
type AmazonMWSSource struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns interface{} `pulumi:"additionalColumns"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// A query to retrieve data from source. Type: string (or Expression with resultType string).
	Query interface{} `pulumi:"query"`
	// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	QueryTimeout interface{} `pulumi:"queryTimeout"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// Copy source type.
	// Expected value is 'AmazonMWSSource'.
	Type string `pulumi:"type"`
}

// A copy activity Amazon Marketplace Web Service source.
type AmazonMWSSourceResponse struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns interface{} `pulumi:"additionalColumns"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// A query to retrieve data from source. Type: string (or Expression with resultType string).
	Query interface{} `pulumi:"query"`
	// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	QueryTimeout interface{} `pulumi:"queryTimeout"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// Copy source type.
	// Expected value is 'AmazonMWSSource'.
	Type string `pulumi:"type"`
}

// AmazonRdsForOracle database.
type AmazonRdsForOracleLinkedService struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference `pulumi:"connectVia"`
	// The connection string. Type: string, SecureString or AzureKeyVaultSecretReference.
	ConnectionString interface{} `pulumi:"connectionString"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential interface{} `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// The Azure key vault secret reference of password in connection string.
	Password interface{} `pulumi:"password"`
	// Type of linked service.
	// Expected value is 'AmazonRdsForOracle'.
	Type string `pulumi:"type"`
}

// AmazonRdsForOracle database.
type AmazonRdsForOracleLinkedServiceResponse struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReferenceResponse `pulumi:"connectVia"`
	// The connection string. Type: string, SecureString or AzureKeyVaultSecretReference.
	ConnectionString interface{} `pulumi:"connectionString"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential interface{} `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// The Azure key vault secret reference of password in connection string.
	Password interface{} `pulumi:"password"`
	// Type of linked service.
	// Expected value is 'AmazonRdsForOracle'.
	Type string `pulumi:"type"`
}

// The settings that will be leveraged for AmazonRdsForOracle source partitioning.
type AmazonRdsForOraclePartitionSettings struct {
	// The name of the column in integer type that will be used for proceeding range partitioning. Type: string (or Expression with resultType string).
	PartitionColumnName interface{} `pulumi:"partitionColumnName"`
	// The minimum value of column specified in partitionColumnName that will be used for proceeding range partitioning. Type: string (or Expression with resultType string).
	PartitionLowerBound interface{} `pulumi:"partitionLowerBound"`
	// Names of the physical partitions of AmazonRdsForOracle table.
	PartitionNames []interface{} `pulumi:"partitionNames"`
	// The maximum value of column specified in partitionColumnName that will be used for proceeding range partitioning. Type: string (or Expression with resultType string).
	PartitionUpperBound interface{} `pulumi:"partitionUpperBound"`
}

// The settings that will be leveraged for AmazonRdsForOracle source partitioning.
type AmazonRdsForOraclePartitionSettingsResponse struct {
	// The name of the column in integer type that will be used for proceeding range partitioning. Type: string (or Expression with resultType string).
	PartitionColumnName interface{} `pulumi:"partitionColumnName"`
	// The minimum value of column specified in partitionColumnName that will be used for proceeding range partitioning. Type: string (or Expression with resultType string).
	PartitionLowerBound interface{} `pulumi:"partitionLowerBound"`
	// Names of the physical partitions of AmazonRdsForOracle table.
	PartitionNames []interface{} `pulumi:"partitionNames"`
	// The maximum value of column specified in partitionColumnName that will be used for proceeding range partitioning. Type: string (or Expression with resultType string).
	PartitionUpperBound interface{} `pulumi:"partitionUpperBound"`
}

// A copy activity AmazonRdsForOracle source.
type AmazonRdsForOracleSource struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns interface{} `pulumi:"additionalColumns"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// AmazonRdsForOracle reader query. Type: string (or Expression with resultType string).
	OracleReaderQuery interface{} `pulumi:"oracleReaderQuery"`
	// The partition mechanism that will be used for AmazonRdsForOracle read in parallel. Type: string (or Expression with resultType string).
	PartitionOption interface{} `pulumi:"partitionOption"`
	// The settings that will be leveraged for AmazonRdsForOracle source partitioning.
	PartitionSettings *AmazonRdsForOraclePartitionSettings `pulumi:"partitionSettings"`
	// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	QueryTimeout interface{} `pulumi:"queryTimeout"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// Copy source type.
	// Expected value is 'AmazonRdsForOracleSource'.
	Type string `pulumi:"type"`
}

// A copy activity AmazonRdsForOracle source.
type AmazonRdsForOracleSourceResponse struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns interface{} `pulumi:"additionalColumns"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// AmazonRdsForOracle reader query. Type: string (or Expression with resultType string).
	OracleReaderQuery interface{} `pulumi:"oracleReaderQuery"`
	// The partition mechanism that will be used for AmazonRdsForOracle read in parallel. Type: string (or Expression with resultType string).
	PartitionOption interface{} `pulumi:"partitionOption"`
	// The settings that will be leveraged for AmazonRdsForOracle source partitioning.
	PartitionSettings *AmazonRdsForOraclePartitionSettingsResponse `pulumi:"partitionSettings"`
	// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	QueryTimeout interface{} `pulumi:"queryTimeout"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// Copy source type.
	// Expected value is 'AmazonRdsForOracleSource'.
	Type string `pulumi:"type"`
}

// The AmazonRdsForOracle database dataset.
type AmazonRdsForOracleTableDataset struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReference `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// The table name of the AmazonRdsForOracle database. Type: string (or Expression with resultType string).
	Table interface{} `pulumi:"table"`
	// Type of dataset.
	// Expected value is 'AmazonRdsForOracleTable'.
	Type string `pulumi:"type"`
}

// The AmazonRdsForOracle database dataset.
type AmazonRdsForOracleTableDatasetResponse struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetResponseFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceResponse `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// The table name of the AmazonRdsForOracle database. Type: string (or Expression with resultType string).
	Table interface{} `pulumi:"table"`
	// Type of dataset.
	// Expected value is 'AmazonRdsForOracleTable'.
	Type string `pulumi:"type"`
}

// Amazon RDS for SQL Server linked service.
type AmazonRdsForSqlServerLinkedService struct {
	// Sql always encrypted properties.
	AlwaysEncryptedSettings *SqlAlwaysEncryptedProperties `pulumi:"alwaysEncryptedSettings"`
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference `pulumi:"connectVia"`
	// The connection string. Type: string, SecureString or AzureKeyVaultSecretReference.
	ConnectionString interface{} `pulumi:"connectionString"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential interface{} `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// The on-premises Windows authentication password.
	Password interface{} `pulumi:"password"`
	// Type of linked service.
	// Expected value is 'AmazonRdsForSqlServer'.
	Type string `pulumi:"type"`
	// The on-premises Windows authentication user name. Type: string (or Expression with resultType string).
	UserName interface{} `pulumi:"userName"`
}

// Amazon RDS for SQL Server linked service.
type AmazonRdsForSqlServerLinkedServiceResponse struct {
	// Sql always encrypted properties.
	AlwaysEncryptedSettings *SqlAlwaysEncryptedPropertiesResponse `pulumi:"alwaysEncryptedSettings"`
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReferenceResponse `pulumi:"connectVia"`
	// The connection string. Type: string, SecureString or AzureKeyVaultSecretReference.
	ConnectionString interface{} `pulumi:"connectionString"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential interface{} `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// The on-premises Windows authentication password.
	Password interface{} `pulumi:"password"`
	// Type of linked service.
	// Expected value is 'AmazonRdsForSqlServer'.
	Type string `pulumi:"type"`
	// The on-premises Windows authentication user name. Type: string (or Expression with resultType string).
	UserName interface{} `pulumi:"userName"`
}

// A copy activity Amazon RDS for SQL Server source.
type AmazonRdsForSqlServerSource struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns interface{} `pulumi:"additionalColumns"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// The partition mechanism that will be used for Sql read in parallel. Possible values include: "None", "PhysicalPartitionsOfTable", "DynamicRange".
	PartitionOption interface{} `pulumi:"partitionOption"`
	// The settings that will be leveraged for Sql source partitioning.
	PartitionSettings *SqlPartitionSettings `pulumi:"partitionSettings"`
	// Which additional types to produce.
	ProduceAdditionalTypes interface{} `pulumi:"produceAdditionalTypes"`
	// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	QueryTimeout interface{} `pulumi:"queryTimeout"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// SQL reader query. Type: string (or Expression with resultType string).
	SqlReaderQuery interface{} `pulumi:"sqlReaderQuery"`
	// Name of the stored procedure for a SQL Database source. This cannot be used at the same time as SqlReaderQuery. Type: string (or Expression with resultType string).
	SqlReaderStoredProcedureName interface{} `pulumi:"sqlReaderStoredProcedureName"`
	// Value and type setting for stored procedure parameters. Example: "{Parameter1: {value: "1", type: "int"}}".
	StoredProcedureParameters map[string]StoredProcedureParameter `pulumi:"storedProcedureParameters"`
	// Copy source type.
	// Expected value is 'AmazonRdsForSqlServerSource'.
	Type string `pulumi:"type"`
}

// A copy activity Amazon RDS for SQL Server source.
type AmazonRdsForSqlServerSourceResponse struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns interface{} `pulumi:"additionalColumns"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// The partition mechanism that will be used for Sql read in parallel. Possible values include: "None", "PhysicalPartitionsOfTable", "DynamicRange".
	PartitionOption interface{} `pulumi:"partitionOption"`
	// The settings that will be leveraged for Sql source partitioning.
	PartitionSettings *SqlPartitionSettingsResponse `pulumi:"partitionSettings"`
	// Which additional types to produce.
	ProduceAdditionalTypes interface{} `pulumi:"produceAdditionalTypes"`
	// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	QueryTimeout interface{} `pulumi:"queryTimeout"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// SQL reader query. Type: string (or Expression with resultType string).
	SqlReaderQuery interface{} `pulumi:"sqlReaderQuery"`
	// Name of the stored procedure for a SQL Database source. This cannot be used at the same time as SqlReaderQuery. Type: string (or Expression with resultType string).
	SqlReaderStoredProcedureName interface{} `pulumi:"sqlReaderStoredProcedureName"`
	// Value and type setting for stored procedure parameters. Example: "{Parameter1: {value: "1", type: "int"}}".
	StoredProcedureParameters map[string]StoredProcedureParameterResponse `pulumi:"storedProcedureParameters"`
	// Copy source type.
	// Expected value is 'AmazonRdsForSqlServerSource'.
	Type string `pulumi:"type"`
}

// The Amazon RDS for SQL Server dataset.
type AmazonRdsForSqlServerTableDataset struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReference `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// The table name of the SQL Server dataset. Type: string (or Expression with resultType string).
	Table interface{} `pulumi:"table"`
	// Type of dataset.
	// Expected value is 'AmazonRdsForSqlServerTable'.
	Type string `pulumi:"type"`
}

// The Amazon RDS for SQL Server dataset.
type AmazonRdsForSqlServerTableDatasetResponse struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetResponseFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceResponse `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// The table name of the SQL Server dataset. Type: string (or Expression with resultType string).
	Table interface{} `pulumi:"table"`
	// Type of dataset.
	// Expected value is 'AmazonRdsForSqlServerTable'.
	Type string `pulumi:"type"`
}

// Linked service for Amazon Redshift.
type AmazonRedshiftLinkedService struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference `pulumi:"connectVia"`
	// The database name of the Amazon Redshift source. Type: string (or Expression with resultType string).
	Database interface{} `pulumi:"database"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential interface{} `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// The password of the Amazon Redshift source.
	Password interface{} `pulumi:"password"`
	// The TCP port number that the Amazon Redshift server uses to listen for client connections. The default value is 5439. Type: integer (or Expression with resultType integer).
	Port interface{} `pulumi:"port"`
	// The name of the Amazon Redshift server. Type: string (or Expression with resultType string).
	Server interface{} `pulumi:"server"`
	// Type of linked service.
	// Expected value is 'AmazonRedshift'.
	Type string `pulumi:"type"`
	// The username of the Amazon Redshift source. Type: string (or Expression with resultType string).
	Username interface{} `pulumi:"username"`
}

// Linked service for Amazon Redshift.
type AmazonRedshiftLinkedServiceResponse struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReferenceResponse `pulumi:"connectVia"`
	// The database name of the Amazon Redshift source. Type: string (or Expression with resultType string).
	Database interface{} `pulumi:"database"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential interface{} `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// The password of the Amazon Redshift source.
	Password interface{} `pulumi:"password"`
	// The TCP port number that the Amazon Redshift server uses to listen for client connections. The default value is 5439. Type: integer (or Expression with resultType integer).
	Port interface{} `pulumi:"port"`
	// The name of the Amazon Redshift server. Type: string (or Expression with resultType string).
	Server interface{} `pulumi:"server"`
	// Type of linked service.
	// Expected value is 'AmazonRedshift'.
	Type string `pulumi:"type"`
	// The username of the Amazon Redshift source. Type: string (or Expression with resultType string).
	Username interface{} `pulumi:"username"`
}

// A copy activity source for Amazon Redshift Source.
type AmazonRedshiftSource struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns interface{} `pulumi:"additionalColumns"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// Database query. Type: string (or Expression with resultType string).
	Query interface{} `pulumi:"query"`
	// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	QueryTimeout interface{} `pulumi:"queryTimeout"`
	// The Amazon S3 settings needed for the interim Amazon S3 when copying from Amazon Redshift with unload. With this, data from Amazon Redshift source will be unloaded into S3 first and then copied into the targeted sink from the interim S3.
	RedshiftUnloadSettings *RedshiftUnloadSettings `pulumi:"redshiftUnloadSettings"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// Copy source type.
	// Expected value is 'AmazonRedshiftSource'.
	Type string `pulumi:"type"`
}

// A copy activity source for Amazon Redshift Source.
type AmazonRedshiftSourceResponse struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns interface{} `pulumi:"additionalColumns"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// Database query. Type: string (or Expression with resultType string).
	Query interface{} `pulumi:"query"`
	// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	QueryTimeout interface{} `pulumi:"queryTimeout"`
	// The Amazon S3 settings needed for the interim Amazon S3 when copying from Amazon Redshift with unload. With this, data from Amazon Redshift source will be unloaded into S3 first and then copied into the targeted sink from the interim S3.
	RedshiftUnloadSettings *RedshiftUnloadSettingsResponse `pulumi:"redshiftUnloadSettings"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// Copy source type.
	// Expected value is 'AmazonRedshiftSource'.
	Type string `pulumi:"type"`
}

// The Amazon Redshift table dataset.
type AmazonRedshiftTableDataset struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReference `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// The Amazon Redshift table name. Type: string (or Expression with resultType string).
	Table interface{} `pulumi:"table"`
	// This property will be retired. Please consider using schema + table properties instead.
	TableName interface{} `pulumi:"tableName"`
	// Type of dataset.
	// Expected value is 'AmazonRedshiftTable'.
	Type string `pulumi:"type"`
}

// The Amazon Redshift table dataset.
type AmazonRedshiftTableDatasetResponse struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetResponseFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceResponse `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// The Amazon Redshift table name. Type: string (or Expression with resultType string).
	Table interface{} `pulumi:"table"`
	// This property will be retired. Please consider using schema + table properties instead.
	TableName interface{} `pulumi:"tableName"`
	// Type of dataset.
	// Expected value is 'AmazonRedshiftTable'.
	Type string `pulumi:"type"`
}

// Linked service for Amazon S3 Compatible.
type AmazonS3CompatibleLinkedService struct {
	// The access key identifier of the Amazon S3 Compatible Identity and Access Management (IAM) user. Type: string (or Expression with resultType string).
	AccessKeyId interface{} `pulumi:"accessKeyId"`
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference `pulumi:"connectVia"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential interface{} `pulumi:"encryptedCredential"`
	// If true, use S3 path-style access instead of virtual hosted-style access. Default value is false. Type: boolean (or Expression with resultType boolean).
	ForcePathStyle interface{} `pulumi:"forcePathStyle"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// The secret access key of the Amazon S3 Compatible Identity and Access Management (IAM) user.
	SecretAccessKey interface{} `pulumi:"secretAccessKey"`
	// This value specifies the endpoint to access with the Amazon S3 Compatible Connector. This is an optional property; change it only if you want to try a different service endpoint or want to switch between https and http. Type: string (or Expression with resultType string).
	ServiceUrl interface{} `pulumi:"serviceUrl"`
	// Type of linked service.
	// Expected value is 'AmazonS3Compatible'.
	Type string `pulumi:"type"`
}

// Linked service for Amazon S3 Compatible.
type AmazonS3CompatibleLinkedServiceResponse struct {
	// The access key identifier of the Amazon S3 Compatible Identity and Access Management (IAM) user. Type: string (or Expression with resultType string).
	AccessKeyId interface{} `pulumi:"accessKeyId"`
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReferenceResponse `pulumi:"connectVia"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential interface{} `pulumi:"encryptedCredential"`
	// If true, use S3 path-style access instead of virtual hosted-style access. Default value is false. Type: boolean (or Expression with resultType boolean).
	ForcePathStyle interface{} `pulumi:"forcePathStyle"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// The secret access key of the Amazon S3 Compatible Identity and Access Management (IAM) user.
	SecretAccessKey interface{} `pulumi:"secretAccessKey"`
	// This value specifies the endpoint to access with the Amazon S3 Compatible Connector. This is an optional property; change it only if you want to try a different service endpoint or want to switch between https and http. Type: string (or Expression with resultType string).
	ServiceUrl interface{} `pulumi:"serviceUrl"`
	// Type of linked service.
	// Expected value is 'AmazonS3Compatible'.
	Type string `pulumi:"type"`
}

// The location of Amazon S3 Compatible dataset.
type AmazonS3CompatibleLocation struct {
	// Specify the bucketName of Amazon S3 Compatible. Type: string (or Expression with resultType string)
	BucketName interface{} `pulumi:"bucketName"`
	// Specify the file name of dataset. Type: string (or Expression with resultType string).
	FileName interface{} `pulumi:"fileName"`
	// Specify the folder path of dataset. Type: string (or Expression with resultType string)
	FolderPath interface{} `pulumi:"folderPath"`
	// Type of dataset storage location.
	// Expected value is 'AmazonS3CompatibleLocation'.
	Type string `pulumi:"type"`
	// Specify the version of Amazon S3 Compatible. Type: string (or Expression with resultType string).
	Version interface{} `pulumi:"version"`
}

// The location of Amazon S3 Compatible dataset.
type AmazonS3CompatibleLocationResponse struct {
	// Specify the bucketName of Amazon S3 Compatible. Type: string (or Expression with resultType string)
	BucketName interface{} `pulumi:"bucketName"`
	// Specify the file name of dataset. Type: string (or Expression with resultType string).
	FileName interface{} `pulumi:"fileName"`
	// Specify the folder path of dataset. Type: string (or Expression with resultType string)
	FolderPath interface{} `pulumi:"folderPath"`
	// Type of dataset storage location.
	// Expected value is 'AmazonS3CompatibleLocation'.
	Type string `pulumi:"type"`
	// Specify the version of Amazon S3 Compatible. Type: string (or Expression with resultType string).
	Version interface{} `pulumi:"version"`
}

// Amazon S3 Compatible read settings.
type AmazonS3CompatibleReadSettings struct {
	// Indicates whether the source files need to be deleted after copy completion. Default is false. Type: boolean (or Expression with resultType boolean).
	DeleteFilesAfterCompletion interface{} `pulumi:"deleteFilesAfterCompletion"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// Indicates whether to enable partition discovery.
	EnablePartitionDiscovery *bool `pulumi:"enablePartitionDiscovery"`
	// Point to a text file that lists each file (relative path to the path configured in the dataset) that you want to copy. Type: string (or Expression with resultType string).
	FileListPath interface{} `pulumi:"fileListPath"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// The end of file's modified datetime. Type: string (or Expression with resultType string).
	ModifiedDatetimeEnd interface{} `pulumi:"modifiedDatetimeEnd"`
	// The start of file's modified datetime. Type: string (or Expression with resultType string).
	ModifiedDatetimeStart interface{} `pulumi:"modifiedDatetimeStart"`
	// Specify the root path where partition discovery starts from. Type: string (or Expression with resultType string).
	PartitionRootPath interface{} `pulumi:"partitionRootPath"`
	// The prefix filter for the S3 Compatible object name. Type: string (or Expression with resultType string).
	Prefix interface{} `pulumi:"prefix"`
	// If true, files under the folder path will be read recursively. Default is true. Type: boolean (or Expression with resultType boolean).
	Recursive interface{} `pulumi:"recursive"`
	// The read setting type.
	// Expected value is 'AmazonS3CompatibleReadSettings'.
	Type string `pulumi:"type"`
	// Amazon S3 Compatible wildcardFileName. Type: string (or Expression with resultType string).
	WildcardFileName interface{} `pulumi:"wildcardFileName"`
	// Amazon S3 Compatible wildcardFolderPath. Type: string (or Expression with resultType string).
	WildcardFolderPath interface{} `pulumi:"wildcardFolderPath"`
}

// Amazon S3 Compatible read settings.
type AmazonS3CompatibleReadSettingsResponse struct {
	// Indicates whether the source files need to be deleted after copy completion. Default is false. Type: boolean (or Expression with resultType boolean).
	DeleteFilesAfterCompletion interface{} `pulumi:"deleteFilesAfterCompletion"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// Indicates whether to enable partition discovery.
	EnablePartitionDiscovery *bool `pulumi:"enablePartitionDiscovery"`
	// Point to a text file that lists each file (relative path to the path configured in the dataset) that you want to copy. Type: string (or Expression with resultType string).
	FileListPath interface{} `pulumi:"fileListPath"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// The end of file's modified datetime. Type: string (or Expression with resultType string).
	ModifiedDatetimeEnd interface{} `pulumi:"modifiedDatetimeEnd"`
	// The start of file's modified datetime. Type: string (or Expression with resultType string).
	ModifiedDatetimeStart interface{} `pulumi:"modifiedDatetimeStart"`
	// Specify the root path where partition discovery starts from. Type: string (or Expression with resultType string).
	PartitionRootPath interface{} `pulumi:"partitionRootPath"`
	// The prefix filter for the S3 Compatible object name. Type: string (or Expression with resultType string).
	Prefix interface{} `pulumi:"prefix"`
	// If true, files under the folder path will be read recursively. Default is true. Type: boolean (or Expression with resultType boolean).
	Recursive interface{} `pulumi:"recursive"`
	// The read setting type.
	// Expected value is 'AmazonS3CompatibleReadSettings'.
	Type string `pulumi:"type"`
	// Amazon S3 Compatible wildcardFileName. Type: string (or Expression with resultType string).
	WildcardFileName interface{} `pulumi:"wildcardFileName"`
	// Amazon S3 Compatible wildcardFolderPath. Type: string (or Expression with resultType string).
	WildcardFolderPath interface{} `pulumi:"wildcardFolderPath"`
}

// A single Amazon Simple Storage Service (S3) object or a set of S3 objects.
type AmazonS3Dataset struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// The name of the Amazon S3 bucket. Type: string (or Expression with resultType string).
	BucketName interface{} `pulumi:"bucketName"`
	// The data compression method used for the Amazon S3 object.
	Compression *DatasetCompression `pulumi:"compression"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetFolder `pulumi:"folder"`
	// The format of files.
	Format interface{} `pulumi:"format"`
	// The key of the Amazon S3 object. Type: string (or Expression with resultType string).
	Key interface{} `pulumi:"key"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReference `pulumi:"linkedServiceName"`
	// The end of S3 object's modified datetime. Type: string (or Expression with resultType string).
	ModifiedDatetimeEnd interface{} `pulumi:"modifiedDatetimeEnd"`
	// The start of S3 object's modified datetime. Type: string (or Expression with resultType string).
	ModifiedDatetimeStart interface{} `pulumi:"modifiedDatetimeStart"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// The prefix filter for the S3 object name. Type: string (or Expression with resultType string).
	Prefix interface{} `pulumi:"prefix"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// Type of dataset.
	// Expected value is 'AmazonS3Object'.
	Type string `pulumi:"type"`
	// The version for the S3 object. Type: string (or Expression with resultType string).
	Version interface{} `pulumi:"version"`
}

// A single Amazon Simple Storage Service (S3) object or a set of S3 objects.
type AmazonS3DatasetResponse struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// The name of the Amazon S3 bucket. Type: string (or Expression with resultType string).
	BucketName interface{} `pulumi:"bucketName"`
	// The data compression method used for the Amazon S3 object.
	Compression *DatasetCompressionResponse `pulumi:"compression"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetResponseFolder `pulumi:"folder"`
	// The format of files.
	Format interface{} `pulumi:"format"`
	// The key of the Amazon S3 object. Type: string (or Expression with resultType string).
	Key interface{} `pulumi:"key"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceResponse `pulumi:"linkedServiceName"`
	// The end of S3 object's modified datetime. Type: string (or Expression with resultType string).
	ModifiedDatetimeEnd interface{} `pulumi:"modifiedDatetimeEnd"`
	// The start of S3 object's modified datetime. Type: string (or Expression with resultType string).
	ModifiedDatetimeStart interface{} `pulumi:"modifiedDatetimeStart"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// The prefix filter for the S3 object name. Type: string (or Expression with resultType string).
	Prefix interface{} `pulumi:"prefix"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// Type of dataset.
	// Expected value is 'AmazonS3Object'.
	Type string `pulumi:"type"`
	// The version for the S3 object. Type: string (or Expression with resultType string).
	Version interface{} `pulumi:"version"`
}

// Linked service for Amazon S3.
type AmazonS3LinkedService struct {
	// The access key identifier of the Amazon S3 Identity and Access Management (IAM) user. Type: string (or Expression with resultType string).
	AccessKeyId interface{} `pulumi:"accessKeyId"`
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The authentication type of S3. Allowed value: AccessKey (default) or TemporarySecurityCredentials. Type: string (or Expression with resultType string).
	AuthenticationType interface{} `pulumi:"authenticationType"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference `pulumi:"connectVia"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential interface{} `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// The secret access key of the Amazon S3 Identity and Access Management (IAM) user.
	SecretAccessKey interface{} `pulumi:"secretAccessKey"`
	// This value specifies the endpoint to access with the S3 Connector. This is an optional property; change it only if you want to try a different service endpoint or want to switch between https and http. Type: string (or Expression with resultType string).
	ServiceUrl interface{} `pulumi:"serviceUrl"`
	// The session token for the S3 temporary security credential.
	SessionToken interface{} `pulumi:"sessionToken"`
	// Type of linked service.
	// Expected value is 'AmazonS3'.
	Type string `pulumi:"type"`
}

// Linked service for Amazon S3.
type AmazonS3LinkedServiceResponse struct {
	// The access key identifier of the Amazon S3 Identity and Access Management (IAM) user. Type: string (or Expression with resultType string).
	AccessKeyId interface{} `pulumi:"accessKeyId"`
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The authentication type of S3. Allowed value: AccessKey (default) or TemporarySecurityCredentials. Type: string (or Expression with resultType string).
	AuthenticationType interface{} `pulumi:"authenticationType"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReferenceResponse `pulumi:"connectVia"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential interface{} `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// The secret access key of the Amazon S3 Identity and Access Management (IAM) user.
	SecretAccessKey interface{} `pulumi:"secretAccessKey"`
	// This value specifies the endpoint to access with the S3 Connector. This is an optional property; change it only if you want to try a different service endpoint or want to switch between https and http. Type: string (or Expression with resultType string).
	ServiceUrl interface{} `pulumi:"serviceUrl"`
	// The session token for the S3 temporary security credential.
	SessionToken interface{} `pulumi:"sessionToken"`
	// Type of linked service.
	// Expected value is 'AmazonS3'.
	Type string `pulumi:"type"`
}

// The location of amazon S3 dataset.
type AmazonS3Location struct {
	// Specify the bucketName of amazon S3. Type: string (or Expression with resultType string)
	BucketName interface{} `pulumi:"bucketName"`
	// Specify the file name of dataset. Type: string (or Expression with resultType string).
	FileName interface{} `pulumi:"fileName"`
	// Specify the folder path of dataset. Type: string (or Expression with resultType string)
	FolderPath interface{} `pulumi:"folderPath"`
	// Type of dataset storage location.
	// Expected value is 'AmazonS3Location'.
	Type string `pulumi:"type"`
	// Specify the version of amazon S3. Type: string (or Expression with resultType string).
	Version interface{} `pulumi:"version"`
}

// The location of amazon S3 dataset.
type AmazonS3LocationResponse struct {
	// Specify the bucketName of amazon S3. Type: string (or Expression with resultType string)
	BucketName interface{} `pulumi:"bucketName"`
	// Specify the file name of dataset. Type: string (or Expression with resultType string).
	FileName interface{} `pulumi:"fileName"`
	// Specify the folder path of dataset. Type: string (or Expression with resultType string)
	FolderPath interface{} `pulumi:"folderPath"`
	// Type of dataset storage location.
	// Expected value is 'AmazonS3Location'.
	Type string `pulumi:"type"`
	// Specify the version of amazon S3. Type: string (or Expression with resultType string).
	Version interface{} `pulumi:"version"`
}

// Amazon S3 read settings.
type AmazonS3ReadSettings struct {
	// Indicates whether the source files need to be deleted after copy completion. Default is false. Type: boolean (or Expression with resultType boolean).
	DeleteFilesAfterCompletion interface{} `pulumi:"deleteFilesAfterCompletion"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// Indicates whether to enable partition discovery.
	EnablePartitionDiscovery *bool `pulumi:"enablePartitionDiscovery"`
	// Point to a text file that lists each file (relative path to the path configured in the dataset) that you want to copy. Type: string (or Expression with resultType string).
	FileListPath interface{} `pulumi:"fileListPath"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// The end of file's modified datetime. Type: string (or Expression with resultType string).
	ModifiedDatetimeEnd interface{} `pulumi:"modifiedDatetimeEnd"`
	// The start of file's modified datetime. Type: string (or Expression with resultType string).
	ModifiedDatetimeStart interface{} `pulumi:"modifiedDatetimeStart"`
	// Specify the root path where partition discovery starts from. Type: string (or Expression with resultType string).
	PartitionRootPath interface{} `pulumi:"partitionRootPath"`
	// The prefix filter for the S3 object name. Type: string (or Expression with resultType string).
	Prefix interface{} `pulumi:"prefix"`
	// If true, files under the folder path will be read recursively. Default is true. Type: boolean (or Expression with resultType boolean).
	Recursive interface{} `pulumi:"recursive"`
	// The read setting type.
	// Expected value is 'AmazonS3ReadSettings'.
	Type string `pulumi:"type"`
	// AmazonS3 wildcardFileName. Type: string (or Expression with resultType string).
	WildcardFileName interface{} `pulumi:"wildcardFileName"`
	// AmazonS3 wildcardFolderPath. Type: string (or Expression with resultType string).
	WildcardFolderPath interface{} `pulumi:"wildcardFolderPath"`
}

// Amazon S3 read settings.
type AmazonS3ReadSettingsResponse struct {
	// Indicates whether the source files need to be deleted after copy completion. Default is false. Type: boolean (or Expression with resultType boolean).
	DeleteFilesAfterCompletion interface{} `pulumi:"deleteFilesAfterCompletion"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// Indicates whether to enable partition discovery.
	EnablePartitionDiscovery *bool `pulumi:"enablePartitionDiscovery"`
	// Point to a text file that lists each file (relative path to the path configured in the dataset) that you want to copy. Type: string (or Expression with resultType string).
	FileListPath interface{} `pulumi:"fileListPath"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// The end of file's modified datetime. Type: string (or Expression with resultType string).
	ModifiedDatetimeEnd interface{} `pulumi:"modifiedDatetimeEnd"`
	// The start of file's modified datetime. Type: string (or Expression with resultType string).
	ModifiedDatetimeStart interface{} `pulumi:"modifiedDatetimeStart"`
	// Specify the root path where partition discovery starts from. Type: string (or Expression with resultType string).
	PartitionRootPath interface{} `pulumi:"partitionRootPath"`
	// The prefix filter for the S3 object name. Type: string (or Expression with resultType string).
	Prefix interface{} `pulumi:"prefix"`
	// If true, files under the folder path will be read recursively. Default is true. Type: boolean (or Expression with resultType boolean).
	Recursive interface{} `pulumi:"recursive"`
	// The read setting type.
	// Expected value is 'AmazonS3ReadSettings'.
	Type string `pulumi:"type"`
	// AmazonS3 wildcardFileName. Type: string (or Expression with resultType string).
	WildcardFileName interface{} `pulumi:"wildcardFileName"`
	// AmazonS3 wildcardFolderPath. Type: string (or Expression with resultType string).
	WildcardFolderPath interface{} `pulumi:"wildcardFolderPath"`
}

// Linked service for AppFigures.
type AppFiguresLinkedService struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The client key for the AppFigures source.
	ClientKey interface{} `pulumi:"clientKey"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference `pulumi:"connectVia"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// The password of the AppFigures source.
	Password interface{} `pulumi:"password"`
	// Type of linked service.
	// Expected value is 'AppFigures'.
	Type string `pulumi:"type"`
	// The username of the Appfigures source.
	UserName interface{} `pulumi:"userName"`
}

// Linked service for AppFigures.
type AppFiguresLinkedServiceResponse struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The client key for the AppFigures source.
	ClientKey interface{} `pulumi:"clientKey"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReferenceResponse `pulumi:"connectVia"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// The password of the AppFigures source.
	Password interface{} `pulumi:"password"`
	// Type of linked service.
	// Expected value is 'AppFigures'.
	Type string `pulumi:"type"`
	// The username of the Appfigures source.
	UserName interface{} `pulumi:"userName"`
}

// Append value for a Variable of type Array.
type AppendVariableActivity struct {
	// Activity depends on condition.
	DependsOn []ActivityDependency `pulumi:"dependsOn"`
	// Activity description.
	Description *string `pulumi:"description"`
	// Activity name.
	Name string `pulumi:"name"`
	// Type of activity.
	// Expected value is 'AppendVariable'.
	Type string `pulumi:"type"`
	// Activity user properties.
	UserProperties []UserProperty `pulumi:"userProperties"`
	// Value to be appended. Could be a static value or Expression
	Value interface{} `pulumi:"value"`
	// Name of the variable whose value needs to be appended to.
	VariableName *string `pulumi:"variableName"`
}

// Append value for a Variable of type Array.
type AppendVariableActivityResponse struct {
	// Activity depends on condition.
	DependsOn []ActivityDependencyResponse `pulumi:"dependsOn"`
	// Activity description.
	Description *string `pulumi:"description"`
	// Activity name.
	Name string `pulumi:"name"`
	// Type of activity.
	// Expected value is 'AppendVariable'.
	Type string `pulumi:"type"`
	// Activity user properties.
	UserProperties []UserPropertyResponse `pulumi:"userProperties"`
	// Value to be appended. Could be a static value or Expression
	Value interface{} `pulumi:"value"`
	// Name of the variable whose value needs to be appended to.
	VariableName *string `pulumi:"variableName"`
}

// A wrapper for an ARM resource id
type ArmIdWrapperResponse struct {
	Id string `pulumi:"id"`
}

// A wrapper for an ARM resource id
type ArmIdWrapperResponseOutput struct{ *pulumi.OutputState }

func (ArmIdWrapperResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ArmIdWrapperResponse)(nil)).Elem()
}

func (o ArmIdWrapperResponseOutput) ToArmIdWrapperResponseOutput() ArmIdWrapperResponseOutput {
	return o
}

func (o ArmIdWrapperResponseOutput) ToArmIdWrapperResponseOutputWithContext(ctx context.Context) ArmIdWrapperResponseOutput {
	return o
}

func (o ArmIdWrapperResponseOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v ArmIdWrapperResponse) string { return v.Id }).(pulumi.StringOutput)
}

type ArmIdWrapperResponsePtrOutput struct{ *pulumi.OutputState }

func (ArmIdWrapperResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ArmIdWrapperResponse)(nil)).Elem()
}

func (o ArmIdWrapperResponsePtrOutput) ToArmIdWrapperResponsePtrOutput() ArmIdWrapperResponsePtrOutput {
	return o
}

func (o ArmIdWrapperResponsePtrOutput) ToArmIdWrapperResponsePtrOutputWithContext(ctx context.Context) ArmIdWrapperResponsePtrOutput {
	return o
}

func (o ArmIdWrapperResponsePtrOutput) Elem() ArmIdWrapperResponseOutput {
	return o.ApplyT(func(v *ArmIdWrapperResponse) ArmIdWrapperResponse {
		if v != nil {
			return *v
		}
		var ret ArmIdWrapperResponse
		return ret
	}).(ArmIdWrapperResponseOutput)
}

func (o ArmIdWrapperResponsePtrOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ArmIdWrapperResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Id
	}).(pulumi.StringPtrOutput)
}

// Linked service for Asana.
type AsanaLinkedService struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The api token for the Asana source.
	ApiToken interface{} `pulumi:"apiToken"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference `pulumi:"connectVia"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential interface{} `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Type of linked service.
	// Expected value is 'Asana'.
	Type string `pulumi:"type"`
}

// Linked service for Asana.
type AsanaLinkedServiceResponse struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The api token for the Asana source.
	ApiToken interface{} `pulumi:"apiToken"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReferenceResponse `pulumi:"connectVia"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential interface{} `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Type of linked service.
	// Expected value is 'Asana'.
	Type string `pulumi:"type"`
}

// Avro dataset.
type AvroDataset struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// The data avroCompressionCodec. Type: string (or Expression with resultType string).
	AvroCompressionCodec interface{} `pulumi:"avroCompressionCodec"`
	AvroCompressionLevel *int        `pulumi:"avroCompressionLevel"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReference `pulumi:"linkedServiceName"`
	// The location of the avro storage.
	Location interface{} `pulumi:"location"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// Type of dataset.
	// Expected value is 'Avro'.
	Type string `pulumi:"type"`
}

// Avro dataset.
type AvroDatasetResponse struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// The data avroCompressionCodec. Type: string (or Expression with resultType string).
	AvroCompressionCodec interface{} `pulumi:"avroCompressionCodec"`
	AvroCompressionLevel *int        `pulumi:"avroCompressionLevel"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetResponseFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceResponse `pulumi:"linkedServiceName"`
	// The location of the avro storage.
	Location interface{} `pulumi:"location"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// Type of dataset.
	// Expected value is 'Avro'.
	Type string `pulumi:"type"`
}

// The data stored in Avro format.
type AvroFormat struct {
	// Deserializer. Type: string (or Expression with resultType string).
	Deserializer interface{} `pulumi:"deserializer"`
	// Serializer. Type: string (or Expression with resultType string).
	Serializer interface{} `pulumi:"serializer"`
	// Type of dataset storage format.
	// Expected value is 'AvroFormat'.
	Type string `pulumi:"type"`
}

// The data stored in Avro format.
type AvroFormatResponse struct {
	// Deserializer. Type: string (or Expression with resultType string).
	Deserializer interface{} `pulumi:"deserializer"`
	// Serializer. Type: string (or Expression with resultType string).
	Serializer interface{} `pulumi:"serializer"`
	// Type of dataset storage format.
	// Expected value is 'AvroFormat'.
	Type string `pulumi:"type"`
}

// A copy activity Avro sink.
type AvroSink struct {
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// Avro format settings.
	FormatSettings *AvroWriteSettings `pulumi:"formatSettings"`
	// The maximum concurrent connection count for the sink data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// Sink retry count. Type: integer (or Expression with resultType integer).
	SinkRetryCount interface{} `pulumi:"sinkRetryCount"`
	// Sink retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SinkRetryWait interface{} `pulumi:"sinkRetryWait"`
	// Avro store settings.
	StoreSettings interface{} `pulumi:"storeSettings"`
	// Copy sink type.
	// Expected value is 'AvroSink'.
	Type string `pulumi:"type"`
	// Write batch size. Type: integer (or Expression with resultType integer), minimum: 0.
	WriteBatchSize interface{} `pulumi:"writeBatchSize"`
	// Write batch timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	WriteBatchTimeout interface{} `pulumi:"writeBatchTimeout"`
}

// A copy activity Avro sink.
type AvroSinkResponse struct {
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// Avro format settings.
	FormatSettings *AvroWriteSettingsResponse `pulumi:"formatSettings"`
	// The maximum concurrent connection count for the sink data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// Sink retry count. Type: integer (or Expression with resultType integer).
	SinkRetryCount interface{} `pulumi:"sinkRetryCount"`
	// Sink retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SinkRetryWait interface{} `pulumi:"sinkRetryWait"`
	// Avro store settings.
	StoreSettings interface{} `pulumi:"storeSettings"`
	// Copy sink type.
	// Expected value is 'AvroSink'.
	Type string `pulumi:"type"`
	// Write batch size. Type: integer (or Expression with resultType integer), minimum: 0.
	WriteBatchSize interface{} `pulumi:"writeBatchSize"`
	// Write batch timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	WriteBatchTimeout interface{} `pulumi:"writeBatchTimeout"`
}

// A copy activity Avro source.
type AvroSource struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns interface{} `pulumi:"additionalColumns"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// Avro store settings.
	StoreSettings interface{} `pulumi:"storeSettings"`
	// Copy source type.
	// Expected value is 'AvroSource'.
	Type string `pulumi:"type"`
}

// A copy activity Avro source.
type AvroSourceResponse struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns interface{} `pulumi:"additionalColumns"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// Avro store settings.
	StoreSettings interface{} `pulumi:"storeSettings"`
	// Copy source type.
	// Expected value is 'AvroSource'.
	Type string `pulumi:"type"`
}

// Avro write settings.
type AvroWriteSettings struct {
	// Specifies the file name pattern <fileNamePrefix>_<fileIndex>.<fileExtension> when copy from non-file based store without partitionOptions. Type: string (or Expression with resultType string).
	FileNamePrefix interface{} `pulumi:"fileNamePrefix"`
	// Limit the written file's row count to be smaller than or equal to the specified count. Type: integer (or Expression with resultType integer).
	MaxRowsPerFile interface{} `pulumi:"maxRowsPerFile"`
	// Top level record name in write result, which is required in AVRO spec.
	RecordName *string `pulumi:"recordName"`
	// Record namespace in the write result.
	RecordNamespace *string `pulumi:"recordNamespace"`
	// The write setting type.
	// Expected value is 'AvroWriteSettings'.
	Type string `pulumi:"type"`
}

// Avro write settings.
type AvroWriteSettingsResponse struct {
	// Specifies the file name pattern <fileNamePrefix>_<fileIndex>.<fileExtension> when copy from non-file based store without partitionOptions. Type: string (or Expression with resultType string).
	FileNamePrefix interface{} `pulumi:"fileNamePrefix"`
	// Limit the written file's row count to be smaller than or equal to the specified count. Type: integer (or Expression with resultType integer).
	MaxRowsPerFile interface{} `pulumi:"maxRowsPerFile"`
	// Top level record name in write result, which is required in AVRO spec.
	RecordName *string `pulumi:"recordName"`
	// Record namespace in the write result.
	RecordNamespace *string `pulumi:"recordNamespace"`
	// The write setting type.
	// Expected value is 'AvroWriteSettings'.
	Type string `pulumi:"type"`
}

// The express custom setup of installing Azure PowerShell.
type AzPowerShellSetup struct {
	// The type of custom setup.
	// Expected value is 'AzPowerShellSetup'.
	Type string `pulumi:"type"`
	// The required version of Azure PowerShell to install.
	Version string `pulumi:"version"`
}

// The express custom setup of installing Azure PowerShell.
type AzPowerShellSetupResponse struct {
	// The type of custom setup.
	// Expected value is 'AzPowerShellSetup'.
	Type string `pulumi:"type"`
	// The required version of Azure PowerShell to install.
	Version string `pulumi:"version"`
}

// Azure Batch linked service.
type AzureBatchLinkedService struct {
	// The Azure Batch account access key.
	AccessKey interface{} `pulumi:"accessKey"`
	// The Azure Batch account name. Type: string (or Expression with resultType string).
	AccountName interface{} `pulumi:"accountName"`
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The Azure Batch URI. Type: string (or Expression with resultType string).
	BatchUri interface{} `pulumi:"batchUri"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference `pulumi:"connectVia"`
	// The credential reference containing authentication information.
	Credential *CredentialReference `pulumi:"credential"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential interface{} `pulumi:"encryptedCredential"`
	// The Azure Storage linked service reference.
	LinkedServiceName LinkedServiceReference `pulumi:"linkedServiceName"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// The Azure Batch pool name. Type: string (or Expression with resultType string).
	PoolName interface{} `pulumi:"poolName"`
	// Type of linked service.
	// Expected value is 'AzureBatch'.
	Type string `pulumi:"type"`
}

// Azure Batch linked service.
type AzureBatchLinkedServiceResponse struct {
	// The Azure Batch account access key.
	AccessKey interface{} `pulumi:"accessKey"`
	// The Azure Batch account name. Type: string (or Expression with resultType string).
	AccountName interface{} `pulumi:"accountName"`
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The Azure Batch URI. Type: string (or Expression with resultType string).
	BatchUri interface{} `pulumi:"batchUri"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReferenceResponse `pulumi:"connectVia"`
	// The credential reference containing authentication information.
	Credential *CredentialReferenceResponse `pulumi:"credential"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential interface{} `pulumi:"encryptedCredential"`
	// The Azure Storage linked service reference.
	LinkedServiceName LinkedServiceReferenceResponse `pulumi:"linkedServiceName"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// The Azure Batch pool name. Type: string (or Expression with resultType string).
	PoolName interface{} `pulumi:"poolName"`
	// Type of linked service.
	// Expected value is 'AzureBatch'.
	Type string `pulumi:"type"`
}

// The Azure Blob storage.
type AzureBlobDataset struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// The data compression method used for the blob storage.
	Compression *DatasetCompression `pulumi:"compression"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The name of the Azure Blob. Type: string (or Expression with resultType string).
	FileName interface{} `pulumi:"fileName"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetFolder `pulumi:"folder"`
	// The path of the Azure Blob storage. Type: string (or Expression with resultType string).
	FolderPath interface{} `pulumi:"folderPath"`
	// The format of the Azure Blob storage.
	Format interface{} `pulumi:"format"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReference `pulumi:"linkedServiceName"`
	// The end of Azure Blob's modified datetime. Type: string (or Expression with resultType string).
	ModifiedDatetimeEnd interface{} `pulumi:"modifiedDatetimeEnd"`
	// The start of Azure Blob's modified datetime. Type: string (or Expression with resultType string).
	ModifiedDatetimeStart interface{} `pulumi:"modifiedDatetimeStart"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// The root of blob path. Type: string (or Expression with resultType string).
	TableRootLocation interface{} `pulumi:"tableRootLocation"`
	// Type of dataset.
	// Expected value is 'AzureBlob'.
	Type string `pulumi:"type"`
}

// The Azure Blob storage.
type AzureBlobDatasetResponse struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// The data compression method used for the blob storage.
	Compression *DatasetCompressionResponse `pulumi:"compression"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The name of the Azure Blob. Type: string (or Expression with resultType string).
	FileName interface{} `pulumi:"fileName"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetResponseFolder `pulumi:"folder"`
	// The path of the Azure Blob storage. Type: string (or Expression with resultType string).
	FolderPath interface{} `pulumi:"folderPath"`
	// The format of the Azure Blob storage.
	Format interface{} `pulumi:"format"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceResponse `pulumi:"linkedServiceName"`
	// The end of Azure Blob's modified datetime. Type: string (or Expression with resultType string).
	ModifiedDatetimeEnd interface{} `pulumi:"modifiedDatetimeEnd"`
	// The start of Azure Blob's modified datetime. Type: string (or Expression with resultType string).
	ModifiedDatetimeStart interface{} `pulumi:"modifiedDatetimeStart"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// The root of blob path. Type: string (or Expression with resultType string).
	TableRootLocation interface{} `pulumi:"tableRootLocation"`
	// Type of dataset.
	// Expected value is 'AzureBlob'.
	Type string `pulumi:"type"`
}

// The Azure Data Lake Storage Gen2 storage.
type AzureBlobFSDataset struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// The data compression method used for the blob storage.
	Compression *DatasetCompression `pulumi:"compression"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The name of the Azure Data Lake Storage Gen2. Type: string (or Expression with resultType string).
	FileName interface{} `pulumi:"fileName"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetFolder `pulumi:"folder"`
	// The path of the Azure Data Lake Storage Gen2 storage. Type: string (or Expression with resultType string).
	FolderPath interface{} `pulumi:"folderPath"`
	// The format of the Azure Data Lake Storage Gen2 storage.
	Format interface{} `pulumi:"format"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReference `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// Type of dataset.
	// Expected value is 'AzureBlobFSFile'.
	Type string `pulumi:"type"`
}

// The Azure Data Lake Storage Gen2 storage.
type AzureBlobFSDatasetResponse struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// The data compression method used for the blob storage.
	Compression *DatasetCompressionResponse `pulumi:"compression"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The name of the Azure Data Lake Storage Gen2. Type: string (or Expression with resultType string).
	FileName interface{} `pulumi:"fileName"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetResponseFolder `pulumi:"folder"`
	// The path of the Azure Data Lake Storage Gen2 storage. Type: string (or Expression with resultType string).
	FolderPath interface{} `pulumi:"folderPath"`
	// The format of the Azure Data Lake Storage Gen2 storage.
	Format interface{} `pulumi:"format"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceResponse `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// Type of dataset.
	// Expected value is 'AzureBlobFSFile'.
	Type string `pulumi:"type"`
}

// Azure Data Lake Storage Gen2 linked service.
type AzureBlobFSLinkedService struct {
	// Account key for the Azure Data Lake Storage Gen2 service. Type: string (or Expression with resultType string).
	AccountKey interface{} `pulumi:"accountKey"`
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// Indicates the azure cloud type of the service principle auth. Allowed values are AzurePublic, AzureChina, AzureUsGovernment, AzureGermany. Default value is the data factory regions’ cloud type. Type: string (or Expression with resultType string).
	AzureCloudType interface{} `pulumi:"azureCloudType"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference `pulumi:"connectVia"`
	// The credential reference containing authentication information.
	Credential *CredentialReference `pulumi:"credential"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential interface{} `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// The credential of the service principal object in Azure Active Directory. If servicePrincipalCredentialType is 'ServicePrincipalKey', servicePrincipalCredential can be SecureString or AzureKeyVaultSecretReference. If servicePrincipalCredentialType is 'ServicePrincipalCert', servicePrincipalCredential can only be AzureKeyVaultSecretReference.
	ServicePrincipalCredential interface{} `pulumi:"servicePrincipalCredential"`
	// The service principal credential type to use in Server-To-Server authentication. 'ServicePrincipalKey' for key/secret, 'ServicePrincipalCert' for certificate. Type: string (or Expression with resultType string).
	ServicePrincipalCredentialType interface{} `pulumi:"servicePrincipalCredentialType"`
	// The ID of the application used to authenticate against the Azure Data Lake Storage Gen2 account. Type: string (or Expression with resultType string).
	ServicePrincipalId interface{} `pulumi:"servicePrincipalId"`
	// The Key of the application used to authenticate against the Azure Data Lake Storage Gen2 account.
	ServicePrincipalKey interface{} `pulumi:"servicePrincipalKey"`
	// The name or ID of the tenant to which the service principal belongs. Type: string (or Expression with resultType string).
	Tenant interface{} `pulumi:"tenant"`
	// Type of linked service.
	// Expected value is 'AzureBlobFS'.
	Type string `pulumi:"type"`
	// Endpoint for the Azure Data Lake Storage Gen2 service. Type: string (or Expression with resultType string).
	Url interface{} `pulumi:"url"`
}

// Azure Data Lake Storage Gen2 linked service.
type AzureBlobFSLinkedServiceResponse struct {
	// Account key for the Azure Data Lake Storage Gen2 service. Type: string (or Expression with resultType string).
	AccountKey interface{} `pulumi:"accountKey"`
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// Indicates the azure cloud type of the service principle auth. Allowed values are AzurePublic, AzureChina, AzureUsGovernment, AzureGermany. Default value is the data factory regions’ cloud type. Type: string (or Expression with resultType string).
	AzureCloudType interface{} `pulumi:"azureCloudType"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReferenceResponse `pulumi:"connectVia"`
	// The credential reference containing authentication information.
	Credential *CredentialReferenceResponse `pulumi:"credential"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential interface{} `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// The credential of the service principal object in Azure Active Directory. If servicePrincipalCredentialType is 'ServicePrincipalKey', servicePrincipalCredential can be SecureString or AzureKeyVaultSecretReference. If servicePrincipalCredentialType is 'ServicePrincipalCert', servicePrincipalCredential can only be AzureKeyVaultSecretReference.
	ServicePrincipalCredential interface{} `pulumi:"servicePrincipalCredential"`
	// The service principal credential type to use in Server-To-Server authentication. 'ServicePrincipalKey' for key/secret, 'ServicePrincipalCert' for certificate. Type: string (or Expression with resultType string).
	ServicePrincipalCredentialType interface{} `pulumi:"servicePrincipalCredentialType"`
	// The ID of the application used to authenticate against the Azure Data Lake Storage Gen2 account. Type: string (or Expression with resultType string).
	ServicePrincipalId interface{} `pulumi:"servicePrincipalId"`
	// The Key of the application used to authenticate against the Azure Data Lake Storage Gen2 account.
	ServicePrincipalKey interface{} `pulumi:"servicePrincipalKey"`
	// The name or ID of the tenant to which the service principal belongs. Type: string (or Expression with resultType string).
	Tenant interface{} `pulumi:"tenant"`
	// Type of linked service.
	// Expected value is 'AzureBlobFS'.
	Type string `pulumi:"type"`
	// Endpoint for the Azure Data Lake Storage Gen2 service. Type: string (or Expression with resultType string).
	Url interface{} `pulumi:"url"`
}

// The location of azure blobFS dataset.
type AzureBlobFSLocation struct {
	// Specify the file name of dataset. Type: string (or Expression with resultType string).
	FileName interface{} `pulumi:"fileName"`
	// Specify the fileSystem of azure blobFS. Type: string (or Expression with resultType string).
	FileSystem interface{} `pulumi:"fileSystem"`
	// Specify the folder path of dataset. Type: string (or Expression with resultType string)
	FolderPath interface{} `pulumi:"folderPath"`
	// Type of dataset storage location.
	// Expected value is 'AzureBlobFSLocation'.
	Type string `pulumi:"type"`
}

// The location of azure blobFS dataset.
type AzureBlobFSLocationResponse struct {
	// Specify the file name of dataset. Type: string (or Expression with resultType string).
	FileName interface{} `pulumi:"fileName"`
	// Specify the fileSystem of azure blobFS. Type: string (or Expression with resultType string).
	FileSystem interface{} `pulumi:"fileSystem"`
	// Specify the folder path of dataset. Type: string (or Expression with resultType string)
	FolderPath interface{} `pulumi:"folderPath"`
	// Type of dataset storage location.
	// Expected value is 'AzureBlobFSLocation'.
	Type string `pulumi:"type"`
}

// Azure blobFS read settings.
type AzureBlobFSReadSettings struct {
	// Indicates whether the source files need to be deleted after copy completion. Default is false. Type: boolean (or Expression with resultType boolean).
	DeleteFilesAfterCompletion interface{} `pulumi:"deleteFilesAfterCompletion"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// Indicates whether to enable partition discovery.
	EnablePartitionDiscovery *bool `pulumi:"enablePartitionDiscovery"`
	// Point to a text file that lists each file (relative path to the path configured in the dataset) that you want to copy. Type: string (or Expression with resultType string).
	FileListPath interface{} `pulumi:"fileListPath"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// The end of file's modified datetime. Type: string (or Expression with resultType string).
	ModifiedDatetimeEnd interface{} `pulumi:"modifiedDatetimeEnd"`
	// The start of file's modified datetime. Type: string (or Expression with resultType string).
	ModifiedDatetimeStart interface{} `pulumi:"modifiedDatetimeStart"`
	// Specify the root path where partition discovery starts from. Type: string (or Expression with resultType string).
	PartitionRootPath interface{} `pulumi:"partitionRootPath"`
	// If true, files under the folder path will be read recursively. Default is true. Type: boolean (or Expression with resultType boolean).
	Recursive interface{} `pulumi:"recursive"`
	// The read setting type.
	// Expected value is 'AzureBlobFSReadSettings'.
	Type string `pulumi:"type"`
	// Azure blobFS wildcardFileName. Type: string (or Expression with resultType string).
	WildcardFileName interface{} `pulumi:"wildcardFileName"`
	// Azure blobFS wildcardFolderPath. Type: string (or Expression with resultType string).
	WildcardFolderPath interface{} `pulumi:"wildcardFolderPath"`
}

// Azure blobFS read settings.
type AzureBlobFSReadSettingsResponse struct {
	// Indicates whether the source files need to be deleted after copy completion. Default is false. Type: boolean (or Expression with resultType boolean).
	DeleteFilesAfterCompletion interface{} `pulumi:"deleteFilesAfterCompletion"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// Indicates whether to enable partition discovery.
	EnablePartitionDiscovery *bool `pulumi:"enablePartitionDiscovery"`
	// Point to a text file that lists each file (relative path to the path configured in the dataset) that you want to copy. Type: string (or Expression with resultType string).
	FileListPath interface{} `pulumi:"fileListPath"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// The end of file's modified datetime. Type: string (or Expression with resultType string).
	ModifiedDatetimeEnd interface{} `pulumi:"modifiedDatetimeEnd"`
	// The start of file's modified datetime. Type: string (or Expression with resultType string).
	ModifiedDatetimeStart interface{} `pulumi:"modifiedDatetimeStart"`
	// Specify the root path where partition discovery starts from. Type: string (or Expression with resultType string).
	PartitionRootPath interface{} `pulumi:"partitionRootPath"`
	// If true, files under the folder path will be read recursively. Default is true. Type: boolean (or Expression with resultType boolean).
	Recursive interface{} `pulumi:"recursive"`
	// The read setting type.
	// Expected value is 'AzureBlobFSReadSettings'.
	Type string `pulumi:"type"`
	// Azure blobFS wildcardFileName. Type: string (or Expression with resultType string).
	WildcardFileName interface{} `pulumi:"wildcardFileName"`
	// Azure blobFS wildcardFolderPath. Type: string (or Expression with resultType string).
	WildcardFolderPath interface{} `pulumi:"wildcardFolderPath"`
}

// A copy activity Azure Data Lake Storage Gen2 sink.
type AzureBlobFSSink struct {
	// The type of copy behavior for copy sink.
	CopyBehavior interface{} `pulumi:"copyBehavior"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the sink data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// Specify the custom metadata to be added to sink data. Type: array of objects (or Expression with resultType array of objects).
	Metadata []MetadataItem `pulumi:"metadata"`
	// Sink retry count. Type: integer (or Expression with resultType integer).
	SinkRetryCount interface{} `pulumi:"sinkRetryCount"`
	// Sink retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SinkRetryWait interface{} `pulumi:"sinkRetryWait"`
	// Copy sink type.
	// Expected value is 'AzureBlobFSSink'.
	Type string `pulumi:"type"`
	// Write batch size. Type: integer (or Expression with resultType integer), minimum: 0.
	WriteBatchSize interface{} `pulumi:"writeBatchSize"`
	// Write batch timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	WriteBatchTimeout interface{} `pulumi:"writeBatchTimeout"`
}

// A copy activity Azure Data Lake Storage Gen2 sink.
type AzureBlobFSSinkResponse struct {
	// The type of copy behavior for copy sink.
	CopyBehavior interface{} `pulumi:"copyBehavior"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the sink data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// Specify the custom metadata to be added to sink data. Type: array of objects (or Expression with resultType array of objects).
	Metadata []MetadataItemResponse `pulumi:"metadata"`
	// Sink retry count. Type: integer (or Expression with resultType integer).
	SinkRetryCount interface{} `pulumi:"sinkRetryCount"`
	// Sink retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SinkRetryWait interface{} `pulumi:"sinkRetryWait"`
	// Copy sink type.
	// Expected value is 'AzureBlobFSSink'.
	Type string `pulumi:"type"`
	// Write batch size. Type: integer (or Expression with resultType integer), minimum: 0.
	WriteBatchSize interface{} `pulumi:"writeBatchSize"`
	// Write batch timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	WriteBatchTimeout interface{} `pulumi:"writeBatchTimeout"`
}

// A copy activity Azure BlobFS source.
type AzureBlobFSSource struct {
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// If true, files under the folder path will be read recursively. Default is true. Type: boolean (or Expression with resultType boolean).
	Recursive interface{} `pulumi:"recursive"`
	// Number of header lines to skip from each blob. Type: integer (or Expression with resultType integer).
	SkipHeaderLineCount interface{} `pulumi:"skipHeaderLineCount"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// Treat empty as null. Type: boolean (or Expression with resultType boolean).
	TreatEmptyAsNull interface{} `pulumi:"treatEmptyAsNull"`
	// Copy source type.
	// Expected value is 'AzureBlobFSSource'.
	Type string `pulumi:"type"`
}

// A copy activity Azure BlobFS source.
type AzureBlobFSSourceResponse struct {
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// If true, files under the folder path will be read recursively. Default is true. Type: boolean (or Expression with resultType boolean).
	Recursive interface{} `pulumi:"recursive"`
	// Number of header lines to skip from each blob. Type: integer (or Expression with resultType integer).
	SkipHeaderLineCount interface{} `pulumi:"skipHeaderLineCount"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// Treat empty as null. Type: boolean (or Expression with resultType boolean).
	TreatEmptyAsNull interface{} `pulumi:"treatEmptyAsNull"`
	// Copy source type.
	// Expected value is 'AzureBlobFSSource'.
	Type string `pulumi:"type"`
}

// Azure blobFS write settings.
type AzureBlobFSWriteSettings struct {
	// Indicates the block size(MB) when writing data to blob. Type: integer (or Expression with resultType integer).
	BlockSizeInMB interface{} `pulumi:"blockSizeInMB"`
	// The type of copy behavior for copy sink.
	CopyBehavior interface{} `pulumi:"copyBehavior"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// The write setting type.
	// Expected value is 'AzureBlobFSWriteSettings'.
	Type string `pulumi:"type"`
}

// Azure blobFS write settings.
type AzureBlobFSWriteSettingsResponse struct {
	// Indicates the block size(MB) when writing data to blob. Type: integer (or Expression with resultType integer).
	BlockSizeInMB interface{} `pulumi:"blockSizeInMB"`
	// The type of copy behavior for copy sink.
	CopyBehavior interface{} `pulumi:"copyBehavior"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// The write setting type.
	// Expected value is 'AzureBlobFSWriteSettings'.
	Type string `pulumi:"type"`
}

// The azure blob storage linked service.
type AzureBlobStorageLinkedService struct {
	// The Azure key vault secret reference of accountKey in connection string.
	AccountKey *AzureKeyVaultSecretReference `pulumi:"accountKey"`
	// Specify the kind of your storage account. Allowed values are: Storage (general purpose v1), StorageV2 (general purpose v2), BlobStorage, or BlockBlobStorage. Type: string (or Expression with resultType string).
	AccountKind *string `pulumi:"accountKind"`
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// Indicates the azure cloud type of the service principle auth. Allowed values are AzurePublic, AzureChina, AzureUsGovernment, AzureGermany. Default value is the data factory regions’ cloud type. Type: string (or Expression with resultType string).
	AzureCloudType interface{} `pulumi:"azureCloudType"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference `pulumi:"connectVia"`
	// The connection string. It is mutually exclusive with sasUri, serviceEndpoint property. Type: string, SecureString or AzureKeyVaultSecretReference.
	ConnectionString interface{} `pulumi:"connectionString"`
	// The credential reference containing authentication information.
	Credential *CredentialReference `pulumi:"credential"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential *string `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// The Azure key vault secret reference of sasToken in sas uri.
	SasToken *AzureKeyVaultSecretReference `pulumi:"sasToken"`
	// SAS URI of the Azure Blob Storage resource. It is mutually exclusive with connectionString, serviceEndpoint property. Type: string, SecureString or AzureKeyVaultSecretReference.
	SasUri interface{} `pulumi:"sasUri"`
	// Blob service endpoint of the Azure Blob Storage resource. It is mutually exclusive with connectionString, sasUri property.
	ServiceEndpoint *string `pulumi:"serviceEndpoint"`
	// The ID of the service principal used to authenticate against Azure SQL Data Warehouse. Type: string (or Expression with resultType string).
	ServicePrincipalId interface{} `pulumi:"servicePrincipalId"`
	// The key of the service principal used to authenticate against Azure SQL Data Warehouse.
	ServicePrincipalKey interface{} `pulumi:"servicePrincipalKey"`
	// The name or ID of the tenant to which the service principal belongs. Type: string (or Expression with resultType string).
	Tenant interface{} `pulumi:"tenant"`
	// Type of linked service.
	// Expected value is 'AzureBlobStorage'.
	Type string `pulumi:"type"`
}

// The azure blob storage linked service.
type AzureBlobStorageLinkedServiceResponse struct {
	// The Azure key vault secret reference of accountKey in connection string.
	AccountKey *AzureKeyVaultSecretReferenceResponse `pulumi:"accountKey"`
	// Specify the kind of your storage account. Allowed values are: Storage (general purpose v1), StorageV2 (general purpose v2), BlobStorage, or BlockBlobStorage. Type: string (or Expression with resultType string).
	AccountKind *string `pulumi:"accountKind"`
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// Indicates the azure cloud type of the service principle auth. Allowed values are AzurePublic, AzureChina, AzureUsGovernment, AzureGermany. Default value is the data factory regions’ cloud type. Type: string (or Expression with resultType string).
	AzureCloudType interface{} `pulumi:"azureCloudType"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReferenceResponse `pulumi:"connectVia"`
	// The connection string. It is mutually exclusive with sasUri, serviceEndpoint property. Type: string, SecureString or AzureKeyVaultSecretReference.
	ConnectionString interface{} `pulumi:"connectionString"`
	// The credential reference containing authentication information.
	Credential *CredentialReferenceResponse `pulumi:"credential"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential *string `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// The Azure key vault secret reference of sasToken in sas uri.
	SasToken *AzureKeyVaultSecretReferenceResponse `pulumi:"sasToken"`
	// SAS URI of the Azure Blob Storage resource. It is mutually exclusive with connectionString, serviceEndpoint property. Type: string, SecureString or AzureKeyVaultSecretReference.
	SasUri interface{} `pulumi:"sasUri"`
	// Blob service endpoint of the Azure Blob Storage resource. It is mutually exclusive with connectionString, sasUri property.
	ServiceEndpoint *string `pulumi:"serviceEndpoint"`
	// The ID of the service principal used to authenticate against Azure SQL Data Warehouse. Type: string (or Expression with resultType string).
	ServicePrincipalId interface{} `pulumi:"servicePrincipalId"`
	// The key of the service principal used to authenticate against Azure SQL Data Warehouse.
	ServicePrincipalKey interface{} `pulumi:"servicePrincipalKey"`
	// The name or ID of the tenant to which the service principal belongs. Type: string (or Expression with resultType string).
	Tenant interface{} `pulumi:"tenant"`
	// Type of linked service.
	// Expected value is 'AzureBlobStorage'.
	Type string `pulumi:"type"`
}

// The location of azure blob dataset.
type AzureBlobStorageLocation struct {
	// Specify the container of azure blob. Type: string (or Expression with resultType string).
	Container interface{} `pulumi:"container"`
	// Specify the file name of dataset. Type: string (or Expression with resultType string).
	FileName interface{} `pulumi:"fileName"`
	// Specify the folder path of dataset. Type: string (or Expression with resultType string)
	FolderPath interface{} `pulumi:"folderPath"`
	// Type of dataset storage location.
	// Expected value is 'AzureBlobStorageLocation'.
	Type string `pulumi:"type"`
}

// The location of azure blob dataset.
type AzureBlobStorageLocationResponse struct {
	// Specify the container of azure blob. Type: string (or Expression with resultType string).
	Container interface{} `pulumi:"container"`
	// Specify the file name of dataset. Type: string (or Expression with resultType string).
	FileName interface{} `pulumi:"fileName"`
	// Specify the folder path of dataset. Type: string (or Expression with resultType string)
	FolderPath interface{} `pulumi:"folderPath"`
	// Type of dataset storage location.
	// Expected value is 'AzureBlobStorageLocation'.
	Type string `pulumi:"type"`
}

// Azure blob read settings.
type AzureBlobStorageReadSettings struct {
	// Indicates whether the source files need to be deleted after copy completion. Default is false. Type: boolean (or Expression with resultType boolean).
	DeleteFilesAfterCompletion interface{} `pulumi:"deleteFilesAfterCompletion"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// Indicates whether to enable partition discovery.
	EnablePartitionDiscovery *bool `pulumi:"enablePartitionDiscovery"`
	// Point to a text file that lists each file (relative path to the path configured in the dataset) that you want to copy. Type: string (or Expression with resultType string).
	FileListPath interface{} `pulumi:"fileListPath"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// The end of file's modified datetime. Type: string (or Expression with resultType string).
	ModifiedDatetimeEnd interface{} `pulumi:"modifiedDatetimeEnd"`
	// The start of file's modified datetime. Type: string (or Expression with resultType string).
	ModifiedDatetimeStart interface{} `pulumi:"modifiedDatetimeStart"`
	// Specify the root path where partition discovery starts from. Type: string (or Expression with resultType string).
	PartitionRootPath interface{} `pulumi:"partitionRootPath"`
	// The prefix filter for the Azure Blob name. Type: string (or Expression with resultType string).
	Prefix interface{} `pulumi:"prefix"`
	// If true, files under the folder path will be read recursively. Default is true. Type: boolean (or Expression with resultType boolean).
	Recursive interface{} `pulumi:"recursive"`
	// The read setting type.
	// Expected value is 'AzureBlobStorageReadSettings'.
	Type string `pulumi:"type"`
	// Azure blob wildcardFileName. Type: string (or Expression with resultType string).
	WildcardFileName interface{} `pulumi:"wildcardFileName"`
	// Azure blob wildcardFolderPath. Type: string (or Expression with resultType string).
	WildcardFolderPath interface{} `pulumi:"wildcardFolderPath"`
}

// Azure blob read settings.
type AzureBlobStorageReadSettingsResponse struct {
	// Indicates whether the source files need to be deleted after copy completion. Default is false. Type: boolean (or Expression with resultType boolean).
	DeleteFilesAfterCompletion interface{} `pulumi:"deleteFilesAfterCompletion"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// Indicates whether to enable partition discovery.
	EnablePartitionDiscovery *bool `pulumi:"enablePartitionDiscovery"`
	// Point to a text file that lists each file (relative path to the path configured in the dataset) that you want to copy. Type: string (or Expression with resultType string).
	FileListPath interface{} `pulumi:"fileListPath"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// The end of file's modified datetime. Type: string (or Expression with resultType string).
	ModifiedDatetimeEnd interface{} `pulumi:"modifiedDatetimeEnd"`
	// The start of file's modified datetime. Type: string (or Expression with resultType string).
	ModifiedDatetimeStart interface{} `pulumi:"modifiedDatetimeStart"`
	// Specify the root path where partition discovery starts from. Type: string (or Expression with resultType string).
	PartitionRootPath interface{} `pulumi:"partitionRootPath"`
	// The prefix filter for the Azure Blob name. Type: string (or Expression with resultType string).
	Prefix interface{} `pulumi:"prefix"`
	// If true, files under the folder path will be read recursively. Default is true. Type: boolean (or Expression with resultType boolean).
	Recursive interface{} `pulumi:"recursive"`
	// The read setting type.
	// Expected value is 'AzureBlobStorageReadSettings'.
	Type string `pulumi:"type"`
	// Azure blob wildcardFileName. Type: string (or Expression with resultType string).
	WildcardFileName interface{} `pulumi:"wildcardFileName"`
	// Azure blob wildcardFolderPath. Type: string (or Expression with resultType string).
	WildcardFolderPath interface{} `pulumi:"wildcardFolderPath"`
}

// Azure blob write settings.
type AzureBlobStorageWriteSettings struct {
	// Indicates the block size(MB) when writing data to blob. Type: integer (or Expression with resultType integer).
	BlockSizeInMB interface{} `pulumi:"blockSizeInMB"`
	// The type of copy behavior for copy sink.
	CopyBehavior interface{} `pulumi:"copyBehavior"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// The write setting type.
	// Expected value is 'AzureBlobStorageWriteSettings'.
	Type string `pulumi:"type"`
}

// Azure blob write settings.
type AzureBlobStorageWriteSettingsResponse struct {
	// Indicates the block size(MB) when writing data to blob. Type: integer (or Expression with resultType integer).
	BlockSizeInMB interface{} `pulumi:"blockSizeInMB"`
	// The type of copy behavior for copy sink.
	CopyBehavior interface{} `pulumi:"copyBehavior"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// The write setting type.
	// Expected value is 'AzureBlobStorageWriteSettings'.
	Type string `pulumi:"type"`
}

// Azure Data Explorer command activity.
type AzureDataExplorerCommandActivity struct {
	// A control command, according to the Azure Data Explorer command syntax. Type: string (or Expression with resultType string).
	Command interface{} `pulumi:"command"`
	// Control command timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9]))..)
	CommandTimeout interface{} `pulumi:"commandTimeout"`
	// Activity depends on condition.
	DependsOn []ActivityDependency `pulumi:"dependsOn"`
	// Activity description.
	Description *string `pulumi:"description"`
	// Linked service reference.
	LinkedServiceName *LinkedServiceReference `pulumi:"linkedServiceName"`
	// Activity name.
	Name string `pulumi:"name"`
	// Activity policy.
	Policy *ActivityPolicy `pulumi:"policy"`
	// Type of activity.
	// Expected value is 'AzureDataExplorerCommand'.
	Type string `pulumi:"type"`
	// Activity user properties.
	UserProperties []UserProperty `pulumi:"userProperties"`
}

// Azure Data Explorer command activity.
type AzureDataExplorerCommandActivityResponse struct {
	// A control command, according to the Azure Data Explorer command syntax. Type: string (or Expression with resultType string).
	Command interface{} `pulumi:"command"`
	// Control command timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9]))..)
	CommandTimeout interface{} `pulumi:"commandTimeout"`
	// Activity depends on condition.
	DependsOn []ActivityDependencyResponse `pulumi:"dependsOn"`
	// Activity description.
	Description *string `pulumi:"description"`
	// Linked service reference.
	LinkedServiceName *LinkedServiceReferenceResponse `pulumi:"linkedServiceName"`
	// Activity name.
	Name string `pulumi:"name"`
	// Activity policy.
	Policy *ActivityPolicyResponse `pulumi:"policy"`
	// Type of activity.
	// Expected value is 'AzureDataExplorerCommand'.
	Type string `pulumi:"type"`
	// Activity user properties.
	UserProperties []UserPropertyResponse `pulumi:"userProperties"`
}

// Azure Data Explorer (Kusto) linked service.
type AzureDataExplorerLinkedService struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference `pulumi:"connectVia"`
	// The credential reference containing authentication information.
	Credential *CredentialReference `pulumi:"credential"`
	// Database name for connection. Type: string (or Expression with resultType string).
	Database interface{} `pulumi:"database"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The endpoint of Azure Data Explorer (the engine's endpoint). URL will be in the format https://<clusterName>.<regionName>.kusto.windows.net. Type: string (or Expression with resultType string)
	Endpoint interface{} `pulumi:"endpoint"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// The ID of the service principal used to authenticate against Azure Data Explorer. Type: string (or Expression with resultType string).
	ServicePrincipalId interface{} `pulumi:"servicePrincipalId"`
	// The key of the service principal used to authenticate against Kusto.
	ServicePrincipalKey interface{} `pulumi:"servicePrincipalKey"`
	// The name or ID of the tenant to which the service principal belongs. Type: string (or Expression with resultType string).
	Tenant interface{} `pulumi:"tenant"`
	// Type of linked service.
	// Expected value is 'AzureDataExplorer'.
	Type string `pulumi:"type"`
}

// Azure Data Explorer (Kusto) linked service.
type AzureDataExplorerLinkedServiceResponse struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReferenceResponse `pulumi:"connectVia"`
	// The credential reference containing authentication information.
	Credential *CredentialReferenceResponse `pulumi:"credential"`
	// Database name for connection. Type: string (or Expression with resultType string).
	Database interface{} `pulumi:"database"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The endpoint of Azure Data Explorer (the engine's endpoint). URL will be in the format https://<clusterName>.<regionName>.kusto.windows.net. Type: string (or Expression with resultType string)
	Endpoint interface{} `pulumi:"endpoint"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// The ID of the service principal used to authenticate against Azure Data Explorer. Type: string (or Expression with resultType string).
	ServicePrincipalId interface{} `pulumi:"servicePrincipalId"`
	// The key of the service principal used to authenticate against Kusto.
	ServicePrincipalKey interface{} `pulumi:"servicePrincipalKey"`
	// The name or ID of the tenant to which the service principal belongs. Type: string (or Expression with resultType string).
	Tenant interface{} `pulumi:"tenant"`
	// Type of linked service.
	// Expected value is 'AzureDataExplorer'.
	Type string `pulumi:"type"`
}

// A copy activity Azure Data Explorer sink.
type AzureDataExplorerSink struct {
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// If set to true, any aggregation will be skipped. Default is false. Type: boolean.
	FlushImmediately interface{} `pulumi:"flushImmediately"`
	// An explicit column mapping description provided in a json format. Type: string.
	IngestionMappingAsJson interface{} `pulumi:"ingestionMappingAsJson"`
	// A name of a pre-created csv mapping that was defined on the target Kusto table. Type: string.
	IngestionMappingName interface{} `pulumi:"ingestionMappingName"`
	// The maximum concurrent connection count for the sink data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// Sink retry count. Type: integer (or Expression with resultType integer).
	SinkRetryCount interface{} `pulumi:"sinkRetryCount"`
	// Sink retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SinkRetryWait interface{} `pulumi:"sinkRetryWait"`
	// Copy sink type.
	// Expected value is 'AzureDataExplorerSink'.
	Type string `pulumi:"type"`
	// Write batch size. Type: integer (or Expression with resultType integer), minimum: 0.
	WriteBatchSize interface{} `pulumi:"writeBatchSize"`
	// Write batch timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	WriteBatchTimeout interface{} `pulumi:"writeBatchTimeout"`
}

// A copy activity Azure Data Explorer sink.
type AzureDataExplorerSinkResponse struct {
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// If set to true, any aggregation will be skipped. Default is false. Type: boolean.
	FlushImmediately interface{} `pulumi:"flushImmediately"`
	// An explicit column mapping description provided in a json format. Type: string.
	IngestionMappingAsJson interface{} `pulumi:"ingestionMappingAsJson"`
	// A name of a pre-created csv mapping that was defined on the target Kusto table. Type: string.
	IngestionMappingName interface{} `pulumi:"ingestionMappingName"`
	// The maximum concurrent connection count for the sink data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// Sink retry count. Type: integer (or Expression with resultType integer).
	SinkRetryCount interface{} `pulumi:"sinkRetryCount"`
	// Sink retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SinkRetryWait interface{} `pulumi:"sinkRetryWait"`
	// Copy sink type.
	// Expected value is 'AzureDataExplorerSink'.
	Type string `pulumi:"type"`
	// Write batch size. Type: integer (or Expression with resultType integer), minimum: 0.
	WriteBatchSize interface{} `pulumi:"writeBatchSize"`
	// Write batch timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	WriteBatchTimeout interface{} `pulumi:"writeBatchTimeout"`
}

// A copy activity Azure Data Explorer (Kusto) source.
type AzureDataExplorerSource struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns interface{} `pulumi:"additionalColumns"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// The name of the Boolean option that controls whether truncation is applied to result-sets that go beyond a certain row-count limit.
	NoTruncation interface{} `pulumi:"noTruncation"`
	// Database query. Should be a Kusto Query Language (KQL) query. Type: string (or Expression with resultType string).
	Query interface{} `pulumi:"query"`
	// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9]))..
	QueryTimeout interface{} `pulumi:"queryTimeout"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// Copy source type.
	// Expected value is 'AzureDataExplorerSource'.
	Type string `pulumi:"type"`
}

// A copy activity Azure Data Explorer (Kusto) source.
type AzureDataExplorerSourceResponse struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns interface{} `pulumi:"additionalColumns"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// The name of the Boolean option that controls whether truncation is applied to result-sets that go beyond a certain row-count limit.
	NoTruncation interface{} `pulumi:"noTruncation"`
	// Database query. Should be a Kusto Query Language (KQL) query. Type: string (or Expression with resultType string).
	Query interface{} `pulumi:"query"`
	// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9]))..
	QueryTimeout interface{} `pulumi:"queryTimeout"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// Copy source type.
	// Expected value is 'AzureDataExplorerSource'.
	Type string `pulumi:"type"`
}

// The Azure Data Explorer (Kusto) dataset.
type AzureDataExplorerTableDataset struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReference `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// The table name of the Azure Data Explorer database. Type: string (or Expression with resultType string).
	Table interface{} `pulumi:"table"`
	// Type of dataset.
	// Expected value is 'AzureDataExplorerTable'.
	Type string `pulumi:"type"`
}

// The Azure Data Explorer (Kusto) dataset.
type AzureDataExplorerTableDatasetResponse struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetResponseFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceResponse `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// The table name of the Azure Data Explorer database. Type: string (or Expression with resultType string).
	Table interface{} `pulumi:"table"`
	// Type of dataset.
	// Expected value is 'AzureDataExplorerTable'.
	Type string `pulumi:"type"`
}

// Azure Data Lake Analytics linked service.
type AzureDataLakeAnalyticsLinkedService struct {
	// The Azure Data Lake Analytics account name. Type: string (or Expression with resultType string).
	AccountName interface{} `pulumi:"accountName"`
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference `pulumi:"connectVia"`
	// Azure Data Lake Analytics URI Type: string (or Expression with resultType string).
	DataLakeAnalyticsUri interface{} `pulumi:"dataLakeAnalyticsUri"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential interface{} `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Data Lake Analytics account resource group name (if different from Data Factory account). Type: string (or Expression with resultType string).
	ResourceGroupName interface{} `pulumi:"resourceGroupName"`
	// The ID of the application used to authenticate against the Azure Data Lake Analytics account. Type: string (or Expression with resultType string).
	ServicePrincipalId interface{} `pulumi:"servicePrincipalId"`
	// The Key of the application used to authenticate against the Azure Data Lake Analytics account.
	ServicePrincipalKey interface{} `pulumi:"servicePrincipalKey"`
	// Data Lake Analytics account subscription ID (if different from Data Factory account). Type: string (or Expression with resultType string).
	SubscriptionId interface{} `pulumi:"subscriptionId"`
	// The name or ID of the tenant to which the service principal belongs. Type: string (or Expression with resultType string).
	Tenant interface{} `pulumi:"tenant"`
	// Type of linked service.
	// Expected value is 'AzureDataLakeAnalytics'.
	Type string `pulumi:"type"`
}

// Azure Data Lake Analytics linked service.
type AzureDataLakeAnalyticsLinkedServiceResponse struct {
	// The Azure Data Lake Analytics account name. Type: string (or Expression with resultType string).
	AccountName interface{} `pulumi:"accountName"`
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReferenceResponse `pulumi:"connectVia"`
	// Azure Data Lake Analytics URI Type: string (or Expression with resultType string).
	DataLakeAnalyticsUri interface{} `pulumi:"dataLakeAnalyticsUri"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential interface{} `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Data Lake Analytics account resource group name (if different from Data Factory account). Type: string (or Expression with resultType string).
	ResourceGroupName interface{} `pulumi:"resourceGroupName"`
	// The ID of the application used to authenticate against the Azure Data Lake Analytics account. Type: string (or Expression with resultType string).
	ServicePrincipalId interface{} `pulumi:"servicePrincipalId"`
	// The Key of the application used to authenticate against the Azure Data Lake Analytics account.
	ServicePrincipalKey interface{} `pulumi:"servicePrincipalKey"`
	// Data Lake Analytics account subscription ID (if different from Data Factory account). Type: string (or Expression with resultType string).
	SubscriptionId interface{} `pulumi:"subscriptionId"`
	// The name or ID of the tenant to which the service principal belongs. Type: string (or Expression with resultType string).
	Tenant interface{} `pulumi:"tenant"`
	// Type of linked service.
	// Expected value is 'AzureDataLakeAnalytics'.
	Type string `pulumi:"type"`
}

// Azure Data Lake Store dataset.
type AzureDataLakeStoreDataset struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// The data compression method used for the item(s) in the Azure Data Lake Store.
	Compression *DatasetCompression `pulumi:"compression"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The name of the file in the Azure Data Lake Store. Type: string (or Expression with resultType string).
	FileName interface{} `pulumi:"fileName"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetFolder `pulumi:"folder"`
	// Path to the folder in the Azure Data Lake Store. Type: string (or Expression with resultType string).
	FolderPath interface{} `pulumi:"folderPath"`
	// The format of the Data Lake Store.
	Format interface{} `pulumi:"format"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReference `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// Type of dataset.
	// Expected value is 'AzureDataLakeStoreFile'.
	Type string `pulumi:"type"`
}

// Azure Data Lake Store dataset.
type AzureDataLakeStoreDatasetResponse struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// The data compression method used for the item(s) in the Azure Data Lake Store.
	Compression *DatasetCompressionResponse `pulumi:"compression"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The name of the file in the Azure Data Lake Store. Type: string (or Expression with resultType string).
	FileName interface{} `pulumi:"fileName"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetResponseFolder `pulumi:"folder"`
	// Path to the folder in the Azure Data Lake Store. Type: string (or Expression with resultType string).
	FolderPath interface{} `pulumi:"folderPath"`
	// The format of the Data Lake Store.
	Format interface{} `pulumi:"format"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceResponse `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// Type of dataset.
	// Expected value is 'AzureDataLakeStoreFile'.
	Type string `pulumi:"type"`
}

// Azure Data Lake Store linked service.
type AzureDataLakeStoreLinkedService struct {
	// Data Lake Store account name. Type: string (or Expression with resultType string).
	AccountName interface{} `pulumi:"accountName"`
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// Indicates the azure cloud type of the service principle auth. Allowed values are AzurePublic, AzureChina, AzureUsGovernment, AzureGermany. Default value is the data factory regions’ cloud type. Type: string (or Expression with resultType string).
	AzureCloudType interface{} `pulumi:"azureCloudType"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference `pulumi:"connectVia"`
	// The credential reference containing authentication information.
	Credential *CredentialReference `pulumi:"credential"`
	// Data Lake Store service URI. Type: string (or Expression with resultType string).
	DataLakeStoreUri interface{} `pulumi:"dataLakeStoreUri"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential interface{} `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Data Lake Store account resource group name (if different from Data Factory account). Type: string (or Expression with resultType string).
	ResourceGroupName interface{} `pulumi:"resourceGroupName"`
	// The ID of the application used to authenticate against the Azure Data Lake Store account. Type: string (or Expression with resultType string).
	ServicePrincipalId interface{} `pulumi:"servicePrincipalId"`
	// The Key of the application used to authenticate against the Azure Data Lake Store account.
	ServicePrincipalKey interface{} `pulumi:"servicePrincipalKey"`
	// Data Lake Store account subscription ID (if different from Data Factory account). Type: string (or Expression with resultType string).
	SubscriptionId interface{} `pulumi:"subscriptionId"`
	// The name or ID of the tenant to which the service principal belongs. Type: string (or Expression with resultType string).
	Tenant interface{} `pulumi:"tenant"`
	// Type of linked service.
	// Expected value is 'AzureDataLakeStore'.
	Type string `pulumi:"type"`
}

// Azure Data Lake Store linked service.
type AzureDataLakeStoreLinkedServiceResponse struct {
	// Data Lake Store account name. Type: string (or Expression with resultType string).
	AccountName interface{} `pulumi:"accountName"`
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// Indicates the azure cloud type of the service principle auth. Allowed values are AzurePublic, AzureChina, AzureUsGovernment, AzureGermany. Default value is the data factory regions’ cloud type. Type: string (or Expression with resultType string).
	AzureCloudType interface{} `pulumi:"azureCloudType"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReferenceResponse `pulumi:"connectVia"`
	// The credential reference containing authentication information.
	Credential *CredentialReferenceResponse `pulumi:"credential"`
	// Data Lake Store service URI. Type: string (or Expression with resultType string).
	DataLakeStoreUri interface{} `pulumi:"dataLakeStoreUri"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential interface{} `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Data Lake Store account resource group name (if different from Data Factory account). Type: string (or Expression with resultType string).
	ResourceGroupName interface{} `pulumi:"resourceGroupName"`
	// The ID of the application used to authenticate against the Azure Data Lake Store account. Type: string (or Expression with resultType string).
	ServicePrincipalId interface{} `pulumi:"servicePrincipalId"`
	// The Key of the application used to authenticate against the Azure Data Lake Store account.
	ServicePrincipalKey interface{} `pulumi:"servicePrincipalKey"`
	// Data Lake Store account subscription ID (if different from Data Factory account). Type: string (or Expression with resultType string).
	SubscriptionId interface{} `pulumi:"subscriptionId"`
	// The name or ID of the tenant to which the service principal belongs. Type: string (or Expression with resultType string).
	Tenant interface{} `pulumi:"tenant"`
	// Type of linked service.
	// Expected value is 'AzureDataLakeStore'.
	Type string `pulumi:"type"`
}

// The location of azure data lake store dataset.
type AzureDataLakeStoreLocation struct {
	// Specify the file name of dataset. Type: string (or Expression with resultType string).
	FileName interface{} `pulumi:"fileName"`
	// Specify the folder path of dataset. Type: string (or Expression with resultType string)
	FolderPath interface{} `pulumi:"folderPath"`
	// Type of dataset storage location.
	// Expected value is 'AzureDataLakeStoreLocation'.
	Type string `pulumi:"type"`
}

// The location of azure data lake store dataset.
type AzureDataLakeStoreLocationResponse struct {
	// Specify the file name of dataset. Type: string (or Expression with resultType string).
	FileName interface{} `pulumi:"fileName"`
	// Specify the folder path of dataset. Type: string (or Expression with resultType string)
	FolderPath interface{} `pulumi:"folderPath"`
	// Type of dataset storage location.
	// Expected value is 'AzureDataLakeStoreLocation'.
	Type string `pulumi:"type"`
}

// Azure data lake store read settings.
type AzureDataLakeStoreReadSettings struct {
	// Indicates whether the source files need to be deleted after copy completion. Default is false. Type: boolean (or Expression with resultType boolean).
	DeleteFilesAfterCompletion interface{} `pulumi:"deleteFilesAfterCompletion"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// Indicates whether to enable partition discovery.
	EnablePartitionDiscovery *bool `pulumi:"enablePartitionDiscovery"`
	// Point to a text file that lists each file (relative path to the path configured in the dataset) that you want to copy. Type: string (or Expression with resultType string).
	FileListPath interface{} `pulumi:"fileListPath"`
	// Lists files after the value (exclusive) based on file/folder names’ lexicographical order. Applies under the folderPath in data set, and filter files/sub-folders under the folderPath. Type: string (or Expression with resultType string).
	ListAfter interface{} `pulumi:"listAfter"`
	// Lists files before the value (inclusive) based on file/folder names’ lexicographical order. Applies under the folderPath in data set, and filter files/sub-folders under the folderPath. Type: string (or Expression with resultType string).
	ListBefore interface{} `pulumi:"listBefore"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// The end of file's modified datetime. Type: string (or Expression with resultType string).
	ModifiedDatetimeEnd interface{} `pulumi:"modifiedDatetimeEnd"`
	// The start of file's modified datetime. Type: string (or Expression with resultType string).
	ModifiedDatetimeStart interface{} `pulumi:"modifiedDatetimeStart"`
	// Specify the root path where partition discovery starts from. Type: string (or Expression with resultType string).
	PartitionRootPath interface{} `pulumi:"partitionRootPath"`
	// If true, files under the folder path will be read recursively. Default is true. Type: boolean (or Expression with resultType boolean).
	Recursive interface{} `pulumi:"recursive"`
	// The read setting type.
	// Expected value is 'AzureDataLakeStoreReadSettings'.
	Type string `pulumi:"type"`
	// ADLS wildcardFileName. Type: string (or Expression with resultType string).
	WildcardFileName interface{} `pulumi:"wildcardFileName"`
	// ADLS wildcardFolderPath. Type: string (or Expression with resultType string).
	WildcardFolderPath interface{} `pulumi:"wildcardFolderPath"`
}

// Azure data lake store read settings.
type AzureDataLakeStoreReadSettingsResponse struct {
	// Indicates whether the source files need to be deleted after copy completion. Default is false. Type: boolean (or Expression with resultType boolean).
	DeleteFilesAfterCompletion interface{} `pulumi:"deleteFilesAfterCompletion"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// Indicates whether to enable partition discovery.
	EnablePartitionDiscovery *bool `pulumi:"enablePartitionDiscovery"`
	// Point to a text file that lists each file (relative path to the path configured in the dataset) that you want to copy. Type: string (or Expression with resultType string).
	FileListPath interface{} `pulumi:"fileListPath"`
	// Lists files after the value (exclusive) based on file/folder names’ lexicographical order. Applies under the folderPath in data set, and filter files/sub-folders under the folderPath. Type: string (or Expression with resultType string).
	ListAfter interface{} `pulumi:"listAfter"`
	// Lists files before the value (inclusive) based on file/folder names’ lexicographical order. Applies under the folderPath in data set, and filter files/sub-folders under the folderPath. Type: string (or Expression with resultType string).
	ListBefore interface{} `pulumi:"listBefore"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// The end of file's modified datetime. Type: string (or Expression with resultType string).
	ModifiedDatetimeEnd interface{} `pulumi:"modifiedDatetimeEnd"`
	// The start of file's modified datetime. Type: string (or Expression with resultType string).
	ModifiedDatetimeStart interface{} `pulumi:"modifiedDatetimeStart"`
	// Specify the root path where partition discovery starts from. Type: string (or Expression with resultType string).
	PartitionRootPath interface{} `pulumi:"partitionRootPath"`
	// If true, files under the folder path will be read recursively. Default is true. Type: boolean (or Expression with resultType boolean).
	Recursive interface{} `pulumi:"recursive"`
	// The read setting type.
	// Expected value is 'AzureDataLakeStoreReadSettings'.
	Type string `pulumi:"type"`
	// ADLS wildcardFileName. Type: string (or Expression with resultType string).
	WildcardFileName interface{} `pulumi:"wildcardFileName"`
	// ADLS wildcardFolderPath. Type: string (or Expression with resultType string).
	WildcardFolderPath interface{} `pulumi:"wildcardFolderPath"`
}

// A copy activity Azure Data Lake Store sink.
type AzureDataLakeStoreSink struct {
	// The type of copy behavior for copy sink.
	CopyBehavior interface{} `pulumi:"copyBehavior"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// Single File Parallel.
	EnableAdlsSingleFileParallel interface{} `pulumi:"enableAdlsSingleFileParallel"`
	// The maximum concurrent connection count for the sink data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// Sink retry count. Type: integer (or Expression with resultType integer).
	SinkRetryCount interface{} `pulumi:"sinkRetryCount"`
	// Sink retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SinkRetryWait interface{} `pulumi:"sinkRetryWait"`
	// Copy sink type.
	// Expected value is 'AzureDataLakeStoreSink'.
	Type string `pulumi:"type"`
	// Write batch size. Type: integer (or Expression with resultType integer), minimum: 0.
	WriteBatchSize interface{} `pulumi:"writeBatchSize"`
	// Write batch timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	WriteBatchTimeout interface{} `pulumi:"writeBatchTimeout"`
}

// A copy activity Azure Data Lake Store sink.
type AzureDataLakeStoreSinkResponse struct {
	// The type of copy behavior for copy sink.
	CopyBehavior interface{} `pulumi:"copyBehavior"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// Single File Parallel.
	EnableAdlsSingleFileParallel interface{} `pulumi:"enableAdlsSingleFileParallel"`
	// The maximum concurrent connection count for the sink data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// Sink retry count. Type: integer (or Expression with resultType integer).
	SinkRetryCount interface{} `pulumi:"sinkRetryCount"`
	// Sink retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SinkRetryWait interface{} `pulumi:"sinkRetryWait"`
	// Copy sink type.
	// Expected value is 'AzureDataLakeStoreSink'.
	Type string `pulumi:"type"`
	// Write batch size. Type: integer (or Expression with resultType integer), minimum: 0.
	WriteBatchSize interface{} `pulumi:"writeBatchSize"`
	// Write batch timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	WriteBatchTimeout interface{} `pulumi:"writeBatchTimeout"`
}

// A copy activity Azure Data Lake source.
type AzureDataLakeStoreSource struct {
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// If true, files under the folder path will be read recursively. Default is true. Type: boolean (or Expression with resultType boolean).
	Recursive interface{} `pulumi:"recursive"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// Copy source type.
	// Expected value is 'AzureDataLakeStoreSource'.
	Type string `pulumi:"type"`
}

// A copy activity Azure Data Lake source.
type AzureDataLakeStoreSourceResponse struct {
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// If true, files under the folder path will be read recursively. Default is true. Type: boolean (or Expression with resultType boolean).
	Recursive interface{} `pulumi:"recursive"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// Copy source type.
	// Expected value is 'AzureDataLakeStoreSource'.
	Type string `pulumi:"type"`
}

// Azure data lake store write settings.
type AzureDataLakeStoreWriteSettings struct {
	// The type of copy behavior for copy sink.
	CopyBehavior interface{} `pulumi:"copyBehavior"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// Specifies the expiry time of the written files. The time is applied to the UTC time zone in the format of "2018-12-01T05:00:00Z". Default value is NULL. Type: integer (or Expression with resultType integer).
	ExpiryDateTime interface{} `pulumi:"expiryDateTime"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// The write setting type.
	// Expected value is 'AzureDataLakeStoreWriteSettings'.
	Type string `pulumi:"type"`
}

// Azure data lake store write settings.
type AzureDataLakeStoreWriteSettingsResponse struct {
	// The type of copy behavior for copy sink.
	CopyBehavior interface{} `pulumi:"copyBehavior"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// Specifies the expiry time of the written files. The time is applied to the UTC time zone in the format of "2018-12-01T05:00:00Z". Default value is NULL. Type: integer (or Expression with resultType integer).
	ExpiryDateTime interface{} `pulumi:"expiryDateTime"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// The write setting type.
	// Expected value is 'AzureDataLakeStoreWriteSettings'.
	Type string `pulumi:"type"`
}

// Azure Databricks Delta Lake dataset.
type AzureDatabricksDeltaLakeDataset struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// The database name of delta table. Type: string (or Expression with resultType string).
	Database interface{} `pulumi:"database"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReference `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// The name of delta table. Type: string (or Expression with resultType string).
	Table interface{} `pulumi:"table"`
	// Type of dataset.
	// Expected value is 'AzureDatabricksDeltaLakeDataset'.
	Type string `pulumi:"type"`
}

// Azure Databricks Delta Lake dataset.
type AzureDatabricksDeltaLakeDatasetResponse struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// The database name of delta table. Type: string (or Expression with resultType string).
	Database interface{} `pulumi:"database"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetResponseFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceResponse `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// The name of delta table. Type: string (or Expression with resultType string).
	Table interface{} `pulumi:"table"`
	// Type of dataset.
	// Expected value is 'AzureDatabricksDeltaLakeDataset'.
	Type string `pulumi:"type"`
}

// Azure Databricks Delta Lake export command settings.
type AzureDatabricksDeltaLakeExportCommand struct {
	// Specify the date format for the csv in Azure Databricks Delta Lake Copy. Type: string (or Expression with resultType string).
	DateFormat interface{} `pulumi:"dateFormat"`
	// Specify the timestamp format for the csv in Azure Databricks Delta Lake Copy. Type: string (or Expression with resultType string).
	TimestampFormat interface{} `pulumi:"timestampFormat"`
	// The export setting type.
	// Expected value is 'AzureDatabricksDeltaLakeExportCommand'.
	Type string `pulumi:"type"`
}

// Azure Databricks Delta Lake export command settings.
type AzureDatabricksDeltaLakeExportCommandResponse struct {
	// Specify the date format for the csv in Azure Databricks Delta Lake Copy. Type: string (or Expression with resultType string).
	DateFormat interface{} `pulumi:"dateFormat"`
	// Specify the timestamp format for the csv in Azure Databricks Delta Lake Copy. Type: string (or Expression with resultType string).
	TimestampFormat interface{} `pulumi:"timestampFormat"`
	// The export setting type.
	// Expected value is 'AzureDatabricksDeltaLakeExportCommand'.
	Type string `pulumi:"type"`
}

// Azure Databricks Delta Lake import command settings.
type AzureDatabricksDeltaLakeImportCommand struct {
	// Specify the date format for csv in Azure Databricks Delta Lake Copy. Type: string (or Expression with resultType string).
	DateFormat interface{} `pulumi:"dateFormat"`
	// Specify the timestamp format for csv in Azure Databricks Delta Lake Copy. Type: string (or Expression with resultType string).
	TimestampFormat interface{} `pulumi:"timestampFormat"`
	// The import setting type.
	// Expected value is 'AzureDatabricksDeltaLakeImportCommand'.
	Type string `pulumi:"type"`
}

// Azure Databricks Delta Lake import command settings.
type AzureDatabricksDeltaLakeImportCommandResponse struct {
	// Specify the date format for csv in Azure Databricks Delta Lake Copy. Type: string (or Expression with resultType string).
	DateFormat interface{} `pulumi:"dateFormat"`
	// Specify the timestamp format for csv in Azure Databricks Delta Lake Copy. Type: string (or Expression with resultType string).
	TimestampFormat interface{} `pulumi:"timestampFormat"`
	// The import setting type.
	// Expected value is 'AzureDatabricksDeltaLakeImportCommand'.
	Type string `pulumi:"type"`
}

// Azure Databricks Delta Lake linked service.
type AzureDatabricksDeltaLakeLinkedService struct {
	// Access token for databricks REST API. Refer to https://docs.azuredatabricks.net/api/latest/authentication.html. Type: string, SecureString or AzureKeyVaultSecretReference.
	AccessToken interface{} `pulumi:"accessToken"`
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The id of an existing interactive cluster that will be used for all runs of this job. Type: string (or Expression with resultType string).
	ClusterId interface{} `pulumi:"clusterId"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference `pulumi:"connectVia"`
	// The credential reference containing authentication information.
	Credential *CredentialReference `pulumi:"credential"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// <REGION>.azuredatabricks.net, domain name of your Databricks deployment. Type: string (or Expression with resultType string).
	Domain interface{} `pulumi:"domain"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential interface{} `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Type of linked service.
	// Expected value is 'AzureDatabricksDeltaLake'.
	Type string `pulumi:"type"`
	// Workspace resource id for databricks REST API. Type: string (or Expression with resultType string).
	WorkspaceResourceId interface{} `pulumi:"workspaceResourceId"`
}

// Azure Databricks Delta Lake linked service.
type AzureDatabricksDeltaLakeLinkedServiceResponse struct {
	// Access token for databricks REST API. Refer to https://docs.azuredatabricks.net/api/latest/authentication.html. Type: string, SecureString or AzureKeyVaultSecretReference.
	AccessToken interface{} `pulumi:"accessToken"`
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The id of an existing interactive cluster that will be used for all runs of this job. Type: string (or Expression with resultType string).
	ClusterId interface{} `pulumi:"clusterId"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReferenceResponse `pulumi:"connectVia"`
	// The credential reference containing authentication information.
	Credential *CredentialReferenceResponse `pulumi:"credential"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// <REGION>.azuredatabricks.net, domain name of your Databricks deployment. Type: string (or Expression with resultType string).
	Domain interface{} `pulumi:"domain"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential interface{} `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Type of linked service.
	// Expected value is 'AzureDatabricksDeltaLake'.
	Type string `pulumi:"type"`
	// Workspace resource id for databricks REST API. Type: string (or Expression with resultType string).
	WorkspaceResourceId interface{} `pulumi:"workspaceResourceId"`
}

// A copy activity Azure Databricks Delta Lake sink.
type AzureDatabricksDeltaLakeSink struct {
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// Azure Databricks Delta Lake import settings.
	ImportSettings *AzureDatabricksDeltaLakeImportCommand `pulumi:"importSettings"`
	// The maximum concurrent connection count for the sink data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// SQL pre-copy script. Type: string (or Expression with resultType string).
	PreCopyScript interface{} `pulumi:"preCopyScript"`
	// Sink retry count. Type: integer (or Expression with resultType integer).
	SinkRetryCount interface{} `pulumi:"sinkRetryCount"`
	// Sink retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SinkRetryWait interface{} `pulumi:"sinkRetryWait"`
	// Copy sink type.
	// Expected value is 'AzureDatabricksDeltaLakeSink'.
	Type string `pulumi:"type"`
	// Write batch size. Type: integer (or Expression with resultType integer), minimum: 0.
	WriteBatchSize interface{} `pulumi:"writeBatchSize"`
	// Write batch timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	WriteBatchTimeout interface{} `pulumi:"writeBatchTimeout"`
}

// A copy activity Azure Databricks Delta Lake sink.
type AzureDatabricksDeltaLakeSinkResponse struct {
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// Azure Databricks Delta Lake import settings.
	ImportSettings *AzureDatabricksDeltaLakeImportCommandResponse `pulumi:"importSettings"`
	// The maximum concurrent connection count for the sink data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// SQL pre-copy script. Type: string (or Expression with resultType string).
	PreCopyScript interface{} `pulumi:"preCopyScript"`
	// Sink retry count. Type: integer (or Expression with resultType integer).
	SinkRetryCount interface{} `pulumi:"sinkRetryCount"`
	// Sink retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SinkRetryWait interface{} `pulumi:"sinkRetryWait"`
	// Copy sink type.
	// Expected value is 'AzureDatabricksDeltaLakeSink'.
	Type string `pulumi:"type"`
	// Write batch size. Type: integer (or Expression with resultType integer), minimum: 0.
	WriteBatchSize interface{} `pulumi:"writeBatchSize"`
	// Write batch timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	WriteBatchTimeout interface{} `pulumi:"writeBatchTimeout"`
}

// A copy activity Azure Databricks Delta Lake source.
type AzureDatabricksDeltaLakeSource struct {
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// Azure Databricks Delta Lake export settings.
	ExportSettings *AzureDatabricksDeltaLakeExportCommand `pulumi:"exportSettings"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// Azure Databricks Delta Lake Sql query. Type: string (or Expression with resultType string).
	Query interface{} `pulumi:"query"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// Copy source type.
	// Expected value is 'AzureDatabricksDeltaLakeSource'.
	Type string `pulumi:"type"`
}

// A copy activity Azure Databricks Delta Lake source.
type AzureDatabricksDeltaLakeSourceResponse struct {
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// Azure Databricks Delta Lake export settings.
	ExportSettings *AzureDatabricksDeltaLakeExportCommandResponse `pulumi:"exportSettings"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// Azure Databricks Delta Lake Sql query. Type: string (or Expression with resultType string).
	Query interface{} `pulumi:"query"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// Copy source type.
	// Expected value is 'AzureDatabricksDeltaLakeSource'.
	Type string `pulumi:"type"`
}

// Azure Databricks linked service.
type AzureDatabricksLinkedService struct {
	// Access token for databricks REST API. Refer to https://docs.azuredatabricks.net/api/latest/authentication.html. Type: string (or Expression with resultType string).
	AccessToken interface{} `pulumi:"accessToken"`
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// Required to specify MSI, if using Workspace resource id for databricks REST API. Type: string (or Expression with resultType string).
	Authentication interface{} `pulumi:"authentication"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference `pulumi:"connectVia"`
	// The credential reference containing authentication information.
	Credential *CredentialReference `pulumi:"credential"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// <REGION>.azuredatabricks.net, domain name of your Databricks deployment. Type: string (or Expression with resultType string).
	Domain interface{} `pulumi:"domain"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential interface{} `pulumi:"encryptedCredential"`
	// The id of an existing interactive cluster that will be used for all runs of this activity. Type: string (or Expression with resultType string).
	ExistingClusterId interface{} `pulumi:"existingClusterId"`
	// The id of an existing instance pool that will be used for all runs of this activity. Type: string (or Expression with resultType string).
	InstancePoolId interface{} `pulumi:"instancePoolId"`
	// Additional tags for cluster resources. This property is ignored in instance pool configurations.
	NewClusterCustomTags map[string]interface{} `pulumi:"newClusterCustomTags"`
	// The driver node type for the new job cluster. This property is ignored in instance pool configurations. Type: string (or Expression with resultType string).
	NewClusterDriverNodeType interface{} `pulumi:"newClusterDriverNodeType"`
	// Enable the elastic disk on the new cluster. This property is now ignored, and takes the default elastic disk behavior in Databricks (elastic disks are always enabled). Type: boolean (or Expression with resultType boolean).
	NewClusterEnableElasticDisk interface{} `pulumi:"newClusterEnableElasticDisk"`
	// User-defined initialization scripts for the new cluster. Type: array of strings (or Expression with resultType array of strings).
	NewClusterInitScripts interface{} `pulumi:"newClusterInitScripts"`
	// Specify a location to deliver Spark driver, worker, and event logs. Type: string (or Expression with resultType string).
	NewClusterLogDestination interface{} `pulumi:"newClusterLogDestination"`
	// The node type of the new job cluster. This property is required if newClusterVersion is specified and instancePoolId is not specified. If instancePoolId is specified, this property is ignored. Type: string (or Expression with resultType string).
	NewClusterNodeType interface{} `pulumi:"newClusterNodeType"`
	// If not using an existing interactive cluster, this specifies the number of worker nodes to use for the new job cluster or instance pool. For new job clusters, this a string-formatted Int32, like '1' means numOfWorker is 1 or '1:10' means auto-scale from 1 (min) to 10 (max). For instance pools, this is a string-formatted Int32, and can only specify a fixed number of worker nodes, such as '2'. Required if newClusterVersion is specified. Type: string (or Expression with resultType string).
	NewClusterNumOfWorker interface{} `pulumi:"newClusterNumOfWorker"`
	// A set of optional, user-specified Spark configuration key-value pairs.
	NewClusterSparkConf map[string]interface{} `pulumi:"newClusterSparkConf"`
	// A set of optional, user-specified Spark environment variables key-value pairs.
	NewClusterSparkEnvVars map[string]interface{} `pulumi:"newClusterSparkEnvVars"`
	// If not using an existing interactive cluster, this specifies the Spark version of a new job cluster or instance pool nodes created for each run of this activity. Required if instancePoolId is specified. Type: string (or Expression with resultType string).
	NewClusterVersion interface{} `pulumi:"newClusterVersion"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// The policy id for limiting the ability to configure clusters based on a user defined set of rules. Type: string (or Expression with resultType string).
	PolicyId interface{} `pulumi:"policyId"`
	// Type of linked service.
	// Expected value is 'AzureDatabricks'.
	Type string `pulumi:"type"`
	// Workspace resource id for databricks REST API. Type: string (or Expression with resultType string).
	WorkspaceResourceId interface{} `pulumi:"workspaceResourceId"`
}

// Azure Databricks linked service.
type AzureDatabricksLinkedServiceResponse struct {
	// Access token for databricks REST API. Refer to https://docs.azuredatabricks.net/api/latest/authentication.html. Type: string (or Expression with resultType string).
	AccessToken interface{} `pulumi:"accessToken"`
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// Required to specify MSI, if using Workspace resource id for databricks REST API. Type: string (or Expression with resultType string).
	Authentication interface{} `pulumi:"authentication"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReferenceResponse `pulumi:"connectVia"`
	// The credential reference containing authentication information.
	Credential *CredentialReferenceResponse `pulumi:"credential"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// <REGION>.azuredatabricks.net, domain name of your Databricks deployment. Type: string (or Expression with resultType string).
	Domain interface{} `pulumi:"domain"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential interface{} `pulumi:"encryptedCredential"`
	// The id of an existing interactive cluster that will be used for all runs of this activity. Type: string (or Expression with resultType string).
	ExistingClusterId interface{} `pulumi:"existingClusterId"`
	// The id of an existing instance pool that will be used for all runs of this activity. Type: string (or Expression with resultType string).
	InstancePoolId interface{} `pulumi:"instancePoolId"`
	// Additional tags for cluster resources. This property is ignored in instance pool configurations.
	NewClusterCustomTags map[string]interface{} `pulumi:"newClusterCustomTags"`
	// The driver node type for the new job cluster. This property is ignored in instance pool configurations. Type: string (or Expression with resultType string).
	NewClusterDriverNodeType interface{} `pulumi:"newClusterDriverNodeType"`
	// Enable the elastic disk on the new cluster. This property is now ignored, and takes the default elastic disk behavior in Databricks (elastic disks are always enabled). Type: boolean (or Expression with resultType boolean).
	NewClusterEnableElasticDisk interface{} `pulumi:"newClusterEnableElasticDisk"`
	// User-defined initialization scripts for the new cluster. Type: array of strings (or Expression with resultType array of strings).
	NewClusterInitScripts interface{} `pulumi:"newClusterInitScripts"`
	// Specify a location to deliver Spark driver, worker, and event logs. Type: string (or Expression with resultType string).
	NewClusterLogDestination interface{} `pulumi:"newClusterLogDestination"`
	// The node type of the new job cluster. This property is required if newClusterVersion is specified and instancePoolId is not specified. If instancePoolId is specified, this property is ignored. Type: string (or Expression with resultType string).
	NewClusterNodeType interface{} `pulumi:"newClusterNodeType"`
	// If not using an existing interactive cluster, this specifies the number of worker nodes to use for the new job cluster or instance pool. For new job clusters, this a string-formatted Int32, like '1' means numOfWorker is 1 or '1:10' means auto-scale from 1 (min) to 10 (max). For instance pools, this is a string-formatted Int32, and can only specify a fixed number of worker nodes, such as '2'. Required if newClusterVersion is specified. Type: string (or Expression with resultType string).
	NewClusterNumOfWorker interface{} `pulumi:"newClusterNumOfWorker"`
	// A set of optional, user-specified Spark configuration key-value pairs.
	NewClusterSparkConf map[string]interface{} `pulumi:"newClusterSparkConf"`
	// A set of optional, user-specified Spark environment variables key-value pairs.
	NewClusterSparkEnvVars map[string]interface{} `pulumi:"newClusterSparkEnvVars"`
	// If not using an existing interactive cluster, this specifies the Spark version of a new job cluster or instance pool nodes created for each run of this activity. Required if instancePoolId is specified. Type: string (or Expression with resultType string).
	NewClusterVersion interface{} `pulumi:"newClusterVersion"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// The policy id for limiting the ability to configure clusters based on a user defined set of rules. Type: string (or Expression with resultType string).
	PolicyId interface{} `pulumi:"policyId"`
	// Type of linked service.
	// Expected value is 'AzureDatabricks'.
	Type string `pulumi:"type"`
	// Workspace resource id for databricks REST API. Type: string (or Expression with resultType string).
	WorkspaceResourceId interface{} `pulumi:"workspaceResourceId"`
}

// Azure File Storage linked service.
type AzureFileStorageLinkedService struct {
	// The Azure key vault secret reference of accountKey in connection string.
	AccountKey *AzureKeyVaultSecretReference `pulumi:"accountKey"`
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference `pulumi:"connectVia"`
	// The connection string. It is mutually exclusive with sasUri property. Type: string, SecureString or AzureKeyVaultSecretReference.
	ConnectionString interface{} `pulumi:"connectionString"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential interface{} `pulumi:"encryptedCredential"`
	// The azure file share name. It is required when auth with accountKey/sasToken. Type: string (or Expression with resultType string).
	FileShare interface{} `pulumi:"fileShare"`
	// Host name of the server. Type: string (or Expression with resultType string).
	Host interface{} `pulumi:"host"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Password to logon the server.
	Password interface{} `pulumi:"password"`
	// The Azure key vault secret reference of sasToken in sas uri.
	SasToken *AzureKeyVaultSecretReference `pulumi:"sasToken"`
	// SAS URI of the Azure File resource. It is mutually exclusive with connectionString property. Type: string, SecureString or AzureKeyVaultSecretReference.
	SasUri interface{} `pulumi:"sasUri"`
	// The azure file share snapshot version. Type: string (or Expression with resultType string).
	Snapshot interface{} `pulumi:"snapshot"`
	// Type of linked service.
	// Expected value is 'AzureFileStorage'.
	Type string `pulumi:"type"`
	// User ID to logon the server. Type: string (or Expression with resultType string).
	UserId interface{} `pulumi:"userId"`
}

// Azure File Storage linked service.
type AzureFileStorageLinkedServiceResponse struct {
	// The Azure key vault secret reference of accountKey in connection string.
	AccountKey *AzureKeyVaultSecretReferenceResponse `pulumi:"accountKey"`
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReferenceResponse `pulumi:"connectVia"`
	// The connection string. It is mutually exclusive with sasUri property. Type: string, SecureString or AzureKeyVaultSecretReference.
	ConnectionString interface{} `pulumi:"connectionString"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential interface{} `pulumi:"encryptedCredential"`
	// The azure file share name. It is required when auth with accountKey/sasToken. Type: string (or Expression with resultType string).
	FileShare interface{} `pulumi:"fileShare"`
	// Host name of the server. Type: string (or Expression with resultType string).
	Host interface{} `pulumi:"host"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Password to logon the server.
	Password interface{} `pulumi:"password"`
	// The Azure key vault secret reference of sasToken in sas uri.
	SasToken *AzureKeyVaultSecretReferenceResponse `pulumi:"sasToken"`
	// SAS URI of the Azure File resource. It is mutually exclusive with connectionString property. Type: string, SecureString or AzureKeyVaultSecretReference.
	SasUri interface{} `pulumi:"sasUri"`
	// The azure file share snapshot version. Type: string (or Expression with resultType string).
	Snapshot interface{} `pulumi:"snapshot"`
	// Type of linked service.
	// Expected value is 'AzureFileStorage'.
	Type string `pulumi:"type"`
	// User ID to logon the server. Type: string (or Expression with resultType string).
	UserId interface{} `pulumi:"userId"`
}

// The location of file server dataset.
type AzureFileStorageLocation struct {
	// Specify the file name of dataset. Type: string (or Expression with resultType string).
	FileName interface{} `pulumi:"fileName"`
	// Specify the folder path of dataset. Type: string (or Expression with resultType string)
	FolderPath interface{} `pulumi:"folderPath"`
	// Type of dataset storage location.
	// Expected value is 'AzureFileStorageLocation'.
	Type string `pulumi:"type"`
}

// The location of file server dataset.
type AzureFileStorageLocationResponse struct {
	// Specify the file name of dataset. Type: string (or Expression with resultType string).
	FileName interface{} `pulumi:"fileName"`
	// Specify the folder path of dataset. Type: string (or Expression with resultType string)
	FolderPath interface{} `pulumi:"folderPath"`
	// Type of dataset storage location.
	// Expected value is 'AzureFileStorageLocation'.
	Type string `pulumi:"type"`
}

// Azure File Storage read settings.
type AzureFileStorageReadSettings struct {
	// Indicates whether the source files need to be deleted after copy completion. Default is false. Type: boolean (or Expression with resultType boolean).
	DeleteFilesAfterCompletion interface{} `pulumi:"deleteFilesAfterCompletion"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// Indicates whether to enable partition discovery.
	EnablePartitionDiscovery *bool `pulumi:"enablePartitionDiscovery"`
	// Point to a text file that lists each file (relative path to the path configured in the dataset) that you want to copy. Type: string (or Expression with resultType string).
	FileListPath interface{} `pulumi:"fileListPath"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// The end of file's modified datetime. Type: string (or Expression with resultType string).
	ModifiedDatetimeEnd interface{} `pulumi:"modifiedDatetimeEnd"`
	// The start of file's modified datetime. Type: string (or Expression with resultType string).
	ModifiedDatetimeStart interface{} `pulumi:"modifiedDatetimeStart"`
	// Specify the root path where partition discovery starts from. Type: string (or Expression with resultType string).
	PartitionRootPath interface{} `pulumi:"partitionRootPath"`
	// The prefix filter for the Azure File name starting from root path. Type: string (or Expression with resultType string).
	Prefix interface{} `pulumi:"prefix"`
	// If true, files under the folder path will be read recursively. Default is true. Type: boolean (or Expression with resultType boolean).
	Recursive interface{} `pulumi:"recursive"`
	// The read setting type.
	// Expected value is 'AzureFileStorageReadSettings'.
	Type string `pulumi:"type"`
	// Azure File Storage wildcardFileName. Type: string (or Expression with resultType string).
	WildcardFileName interface{} `pulumi:"wildcardFileName"`
	// Azure File Storage wildcardFolderPath. Type: string (or Expression with resultType string).
	WildcardFolderPath interface{} `pulumi:"wildcardFolderPath"`
}

// Azure File Storage read settings.
type AzureFileStorageReadSettingsResponse struct {
	// Indicates whether the source files need to be deleted after copy completion. Default is false. Type: boolean (or Expression with resultType boolean).
	DeleteFilesAfterCompletion interface{} `pulumi:"deleteFilesAfterCompletion"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// Indicates whether to enable partition discovery.
	EnablePartitionDiscovery *bool `pulumi:"enablePartitionDiscovery"`
	// Point to a text file that lists each file (relative path to the path configured in the dataset) that you want to copy. Type: string (or Expression with resultType string).
	FileListPath interface{} `pulumi:"fileListPath"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// The end of file's modified datetime. Type: string (or Expression with resultType string).
	ModifiedDatetimeEnd interface{} `pulumi:"modifiedDatetimeEnd"`
	// The start of file's modified datetime. Type: string (or Expression with resultType string).
	ModifiedDatetimeStart interface{} `pulumi:"modifiedDatetimeStart"`
	// Specify the root path where partition discovery starts from. Type: string (or Expression with resultType string).
	PartitionRootPath interface{} `pulumi:"partitionRootPath"`
	// The prefix filter for the Azure File name starting from root path. Type: string (or Expression with resultType string).
	Prefix interface{} `pulumi:"prefix"`
	// If true, files under the folder path will be read recursively. Default is true. Type: boolean (or Expression with resultType boolean).
	Recursive interface{} `pulumi:"recursive"`
	// The read setting type.
	// Expected value is 'AzureFileStorageReadSettings'.
	Type string `pulumi:"type"`
	// Azure File Storage wildcardFileName. Type: string (or Expression with resultType string).
	WildcardFileName interface{} `pulumi:"wildcardFileName"`
	// Azure File Storage wildcardFolderPath. Type: string (or Expression with resultType string).
	WildcardFolderPath interface{} `pulumi:"wildcardFolderPath"`
}

// Azure File Storage write settings.
type AzureFileStorageWriteSettings struct {
	// The type of copy behavior for copy sink.
	CopyBehavior interface{} `pulumi:"copyBehavior"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// The write setting type.
	// Expected value is 'AzureFileStorageWriteSettings'.
	Type string `pulumi:"type"`
}

// Azure File Storage write settings.
type AzureFileStorageWriteSettingsResponse struct {
	// The type of copy behavior for copy sink.
	CopyBehavior interface{} `pulumi:"copyBehavior"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// The write setting type.
	// Expected value is 'AzureFileStorageWriteSettings'.
	Type string `pulumi:"type"`
}

// Azure Function activity.
type AzureFunctionActivity struct {
	// Represents the payload that will be sent to the endpoint. Required for POST/PUT method, not allowed for GET method Type: string (or Expression with resultType string).
	Body interface{} `pulumi:"body"`
	// Activity depends on condition.
	DependsOn []ActivityDependency `pulumi:"dependsOn"`
	// Activity description.
	Description *string `pulumi:"description"`
	// Name of the Function that the Azure Function Activity will call. Type: string (or Expression with resultType string)
	FunctionName interface{} `pulumi:"functionName"`
	// Represents the headers that will be sent to the request. For example, to set the language and type on a request: "headers" : { "Accept-Language": "en-us", "Content-Type": "application/json" }. Type: string (or Expression with resultType string).
	Headers interface{} `pulumi:"headers"`
	// Linked service reference.
	LinkedServiceName *LinkedServiceReference `pulumi:"linkedServiceName"`
	// Rest API method for target endpoint.
	Method string `pulumi:"method"`
	// Activity name.
	Name string `pulumi:"name"`
	// Activity policy.
	Policy *ActivityPolicy `pulumi:"policy"`
	// Type of activity.
	// Expected value is 'AzureFunctionActivity'.
	Type string `pulumi:"type"`
	// Activity user properties.
	UserProperties []UserProperty `pulumi:"userProperties"`
}

// Azure Function activity.
type AzureFunctionActivityResponse struct {
	// Represents the payload that will be sent to the endpoint. Required for POST/PUT method, not allowed for GET method Type: string (or Expression with resultType string).
	Body interface{} `pulumi:"body"`
	// Activity depends on condition.
	DependsOn []ActivityDependencyResponse `pulumi:"dependsOn"`
	// Activity description.
	Description *string `pulumi:"description"`
	// Name of the Function that the Azure Function Activity will call. Type: string (or Expression with resultType string)
	FunctionName interface{} `pulumi:"functionName"`
	// Represents the headers that will be sent to the request. For example, to set the language and type on a request: "headers" : { "Accept-Language": "en-us", "Content-Type": "application/json" }. Type: string (or Expression with resultType string).
	Headers interface{} `pulumi:"headers"`
	// Linked service reference.
	LinkedServiceName *LinkedServiceReferenceResponse `pulumi:"linkedServiceName"`
	// Rest API method for target endpoint.
	Method string `pulumi:"method"`
	// Activity name.
	Name string `pulumi:"name"`
	// Activity policy.
	Policy *ActivityPolicyResponse `pulumi:"policy"`
	// Type of activity.
	// Expected value is 'AzureFunctionActivity'.
	Type string `pulumi:"type"`
	// Activity user properties.
	UserProperties []UserPropertyResponse `pulumi:"userProperties"`
}

// Azure Function linked service.
type AzureFunctionLinkedService struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// Type of authentication (Required to specify MSI) used to connect to AzureFunction. Type: string (or Expression with resultType string).
	Authentication interface{} `pulumi:"authentication"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference `pulumi:"connectVia"`
	// The credential reference containing authentication information.
	Credential *CredentialReference `pulumi:"credential"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential interface{} `pulumi:"encryptedCredential"`
	// The endpoint of the Azure Function App. URL will be in the format https://<accountName>.azurewebsites.net.
	FunctionAppUrl interface{} `pulumi:"functionAppUrl"`
	// Function or Host key for Azure Function App.
	FunctionKey interface{} `pulumi:"functionKey"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Allowed token audiences for azure function.
	ResourceId interface{} `pulumi:"resourceId"`
	// Type of linked service.
	// Expected value is 'AzureFunction'.
	Type string `pulumi:"type"`
}

// Azure Function linked service.
type AzureFunctionLinkedServiceResponse struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// Type of authentication (Required to specify MSI) used to connect to AzureFunction. Type: string (or Expression with resultType string).
	Authentication interface{} `pulumi:"authentication"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReferenceResponse `pulumi:"connectVia"`
	// The credential reference containing authentication information.
	Credential *CredentialReferenceResponse `pulumi:"credential"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential interface{} `pulumi:"encryptedCredential"`
	// The endpoint of the Azure Function App. URL will be in the format https://<accountName>.azurewebsites.net.
	FunctionAppUrl interface{} `pulumi:"functionAppUrl"`
	// Function or Host key for Azure Function App.
	FunctionKey interface{} `pulumi:"functionKey"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Allowed token audiences for azure function.
	ResourceId interface{} `pulumi:"resourceId"`
	// Type of linked service.
	// Expected value is 'AzureFunction'.
	Type string `pulumi:"type"`
}

// Azure Key Vault linked service.
type AzureKeyVaultLinkedService struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The base URL of the Azure Key Vault. e.g. https://myakv.vault.azure.net Type: string (or Expression with resultType string).
	BaseUrl interface{} `pulumi:"baseUrl"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference `pulumi:"connectVia"`
	// The credential reference containing authentication information.
	Credential *CredentialReference `pulumi:"credential"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Type of linked service.
	// Expected value is 'AzureKeyVault'.
	Type string `pulumi:"type"`
}

// Azure Key Vault linked service.
type AzureKeyVaultLinkedServiceResponse struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The base URL of the Azure Key Vault. e.g. https://myakv.vault.azure.net Type: string (or Expression with resultType string).
	BaseUrl interface{} `pulumi:"baseUrl"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReferenceResponse `pulumi:"connectVia"`
	// The credential reference containing authentication information.
	Credential *CredentialReferenceResponse `pulumi:"credential"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Type of linked service.
	// Expected value is 'AzureKeyVault'.
	Type string `pulumi:"type"`
}

// Azure Key Vault secret reference.
type AzureKeyVaultSecretReference struct {
	// The name of the secret in Azure Key Vault. Type: string (or Expression with resultType string).
	SecretName interface{} `pulumi:"secretName"`
	// The version of the secret in Azure Key Vault. The default value is the latest version of the secret. Type: string (or Expression with resultType string).
	SecretVersion interface{} `pulumi:"secretVersion"`
	// The Azure Key Vault linked service reference.
	Store LinkedServiceReference `pulumi:"store"`
	// Type of the secret.
	// Expected value is 'AzureKeyVaultSecret'.
	Type string `pulumi:"type"`
}

// Azure Key Vault secret reference.
type AzureKeyVaultSecretReferenceResponse struct {
	// The name of the secret in Azure Key Vault. Type: string (or Expression with resultType string).
	SecretName interface{} `pulumi:"secretName"`
	// The version of the secret in Azure Key Vault. The default value is the latest version of the secret. Type: string (or Expression with resultType string).
	SecretVersion interface{} `pulumi:"secretVersion"`
	// The Azure Key Vault linked service reference.
	Store LinkedServiceReferenceResponse `pulumi:"store"`
	// Type of the secret.
	// Expected value is 'AzureKeyVaultSecret'.
	Type string `pulumi:"type"`
}

// Azure ML Batch Execution activity.
type AzureMLBatchExecutionActivity struct {
	// Activity depends on condition.
	DependsOn []ActivityDependency `pulumi:"dependsOn"`
	// Activity description.
	Description *string `pulumi:"description"`
	// Key,Value pairs to be passed to the Azure ML Batch Execution Service endpoint. Keys must match the names of web service parameters defined in the published Azure ML web service. Values will be passed in the GlobalParameters property of the Azure ML batch execution request.
	GlobalParameters map[string]interface{} `pulumi:"globalParameters"`
	// Linked service reference.
	LinkedServiceName *LinkedServiceReference `pulumi:"linkedServiceName"`
	// Activity name.
	Name string `pulumi:"name"`
	// Activity policy.
	Policy *ActivityPolicy `pulumi:"policy"`
	// Type of activity.
	// Expected value is 'AzureMLBatchExecution'.
	Type string `pulumi:"type"`
	// Activity user properties.
	UserProperties []UserProperty `pulumi:"userProperties"`
	// Key,Value pairs, mapping the names of Azure ML endpoint's Web Service Inputs to AzureMLWebServiceFile objects specifying the input Blob locations.. This information will be passed in the WebServiceInputs property of the Azure ML batch execution request.
	WebServiceInputs map[string]AzureMLWebServiceFile `pulumi:"webServiceInputs"`
	// Key,Value pairs, mapping the names of Azure ML endpoint's Web Service Outputs to AzureMLWebServiceFile objects specifying the output Blob locations. This information will be passed in the WebServiceOutputs property of the Azure ML batch execution request.
	WebServiceOutputs map[string]AzureMLWebServiceFile `pulumi:"webServiceOutputs"`
}

// Azure ML Batch Execution activity.
type AzureMLBatchExecutionActivityResponse struct {
	// Activity depends on condition.
	DependsOn []ActivityDependencyResponse `pulumi:"dependsOn"`
	// Activity description.
	Description *string `pulumi:"description"`
	// Key,Value pairs to be passed to the Azure ML Batch Execution Service endpoint. Keys must match the names of web service parameters defined in the published Azure ML web service. Values will be passed in the GlobalParameters property of the Azure ML batch execution request.
	GlobalParameters map[string]interface{} `pulumi:"globalParameters"`
	// Linked service reference.
	LinkedServiceName *LinkedServiceReferenceResponse `pulumi:"linkedServiceName"`
	// Activity name.
	Name string `pulumi:"name"`
	// Activity policy.
	Policy *ActivityPolicyResponse `pulumi:"policy"`
	// Type of activity.
	// Expected value is 'AzureMLBatchExecution'.
	Type string `pulumi:"type"`
	// Activity user properties.
	UserProperties []UserPropertyResponse `pulumi:"userProperties"`
	// Key,Value pairs, mapping the names of Azure ML endpoint's Web Service Inputs to AzureMLWebServiceFile objects specifying the input Blob locations.. This information will be passed in the WebServiceInputs property of the Azure ML batch execution request.
	WebServiceInputs map[string]AzureMLWebServiceFileResponse `pulumi:"webServiceInputs"`
	// Key,Value pairs, mapping the names of Azure ML endpoint's Web Service Outputs to AzureMLWebServiceFile objects specifying the output Blob locations. This information will be passed in the WebServiceOutputs property of the Azure ML batch execution request.
	WebServiceOutputs map[string]AzureMLWebServiceFileResponse `pulumi:"webServiceOutputs"`
}

// Azure ML Execute Pipeline activity.
type AzureMLExecutePipelineActivity struct {
	// Whether to continue execution of other steps in the PipelineRun if a step fails. This information will be passed in the continueOnStepFailure property of the published pipeline execution request. Type: boolean (or Expression with resultType boolean).
	ContinueOnStepFailure interface{} `pulumi:"continueOnStepFailure"`
	// Dictionary used for changing data path assignments without retraining. Values will be passed in the dataPathAssignments property of the published pipeline execution request. Type: object with key value pairs (or Expression with resultType object).
	DataPathAssignments interface{} `pulumi:"dataPathAssignments"`
	// Activity depends on condition.
	DependsOn []ActivityDependency `pulumi:"dependsOn"`
	// Activity description.
	Description *string `pulumi:"description"`
	// Run history experiment name of the pipeline run. This information will be passed in the ExperimentName property of the published pipeline execution request. Type: string (or Expression with resultType string).
	ExperimentName interface{} `pulumi:"experimentName"`
	// Linked service reference.
	LinkedServiceName *LinkedServiceReference `pulumi:"linkedServiceName"`
	// The parent Azure ML Service pipeline run id. This information will be passed in the ParentRunId property of the published pipeline execution request. Type: string (or Expression with resultType string).
	MlParentRunId interface{} `pulumi:"mlParentRunId"`
	// ID of the published Azure ML pipeline endpoint. Type: string (or Expression with resultType string).
	MlPipelineEndpointId interface{} `pulumi:"mlPipelineEndpointId"`
	// ID of the published Azure ML pipeline. Type: string (or Expression with resultType string).
	MlPipelineId interface{} `pulumi:"mlPipelineId"`
	// Key,Value pairs to be passed to the published Azure ML pipeline endpoint. Keys must match the names of pipeline parameters defined in the published pipeline. Values will be passed in the ParameterAssignments property of the published pipeline execution request. Type: object with key value pairs (or Expression with resultType object).
	MlPipelineParameters interface{} `pulumi:"mlPipelineParameters"`
	// Activity name.
	Name string `pulumi:"name"`
	// Activity policy.
	Policy *ActivityPolicy `pulumi:"policy"`
	// Type of activity.
	// Expected value is 'AzureMLExecutePipeline'.
	Type string `pulumi:"type"`
	// Activity user properties.
	UserProperties []UserProperty `pulumi:"userProperties"`
	// Version of the published Azure ML pipeline endpoint. Type: string (or Expression with resultType string).
	Version interface{} `pulumi:"version"`
}

// Azure ML Execute Pipeline activity.
type AzureMLExecutePipelineActivityResponse struct {
	// Whether to continue execution of other steps in the PipelineRun if a step fails. This information will be passed in the continueOnStepFailure property of the published pipeline execution request. Type: boolean (or Expression with resultType boolean).
	ContinueOnStepFailure interface{} `pulumi:"continueOnStepFailure"`
	// Dictionary used for changing data path assignments without retraining. Values will be passed in the dataPathAssignments property of the published pipeline execution request. Type: object with key value pairs (or Expression with resultType object).
	DataPathAssignments interface{} `pulumi:"dataPathAssignments"`
	// Activity depends on condition.
	DependsOn []ActivityDependencyResponse `pulumi:"dependsOn"`
	// Activity description.
	Description *string `pulumi:"description"`
	// Run history experiment name of the pipeline run. This information will be passed in the ExperimentName property of the published pipeline execution request. Type: string (or Expression with resultType string).
	ExperimentName interface{} `pulumi:"experimentName"`
	// Linked service reference.
	LinkedServiceName *LinkedServiceReferenceResponse `pulumi:"linkedServiceName"`
	// The parent Azure ML Service pipeline run id. This information will be passed in the ParentRunId property of the published pipeline execution request. Type: string (or Expression with resultType string).
	MlParentRunId interface{} `pulumi:"mlParentRunId"`
	// ID of the published Azure ML pipeline endpoint. Type: string (or Expression with resultType string).
	MlPipelineEndpointId interface{} `pulumi:"mlPipelineEndpointId"`
	// ID of the published Azure ML pipeline. Type: string (or Expression with resultType string).
	MlPipelineId interface{} `pulumi:"mlPipelineId"`
	// Key,Value pairs to be passed to the published Azure ML pipeline endpoint. Keys must match the names of pipeline parameters defined in the published pipeline. Values will be passed in the ParameterAssignments property of the published pipeline execution request. Type: object with key value pairs (or Expression with resultType object).
	MlPipelineParameters interface{} `pulumi:"mlPipelineParameters"`
	// Activity name.
	Name string `pulumi:"name"`
	// Activity policy.
	Policy *ActivityPolicyResponse `pulumi:"policy"`
	// Type of activity.
	// Expected value is 'AzureMLExecutePipeline'.
	Type string `pulumi:"type"`
	// Activity user properties.
	UserProperties []UserPropertyResponse `pulumi:"userProperties"`
	// Version of the published Azure ML pipeline endpoint. Type: string (or Expression with resultType string).
	Version interface{} `pulumi:"version"`
}

// Azure ML Studio Web Service linked service.
type AzureMLLinkedService struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The API key for accessing the Azure ML model endpoint.
	ApiKey interface{} `pulumi:"apiKey"`
	// Type of authentication (Required to specify MSI) used to connect to AzureML. Type: string (or Expression with resultType string).
	Authentication interface{} `pulumi:"authentication"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference `pulumi:"connectVia"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential interface{} `pulumi:"encryptedCredential"`
	// The Batch Execution REST URL for an Azure ML Studio Web Service endpoint. Type: string (or Expression with resultType string).
	MlEndpoint interface{} `pulumi:"mlEndpoint"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// The ID of the service principal used to authenticate against the ARM-based updateResourceEndpoint of an Azure ML Studio web service. Type: string (or Expression with resultType string).
	ServicePrincipalId interface{} `pulumi:"servicePrincipalId"`
	// The key of the service principal used to authenticate against the ARM-based updateResourceEndpoint of an Azure ML Studio web service.
	ServicePrincipalKey interface{} `pulumi:"servicePrincipalKey"`
	// The name or ID of the tenant to which the service principal belongs. Type: string (or Expression with resultType string).
	Tenant interface{} `pulumi:"tenant"`
	// Type of linked service.
	// Expected value is 'AzureML'.
	Type string `pulumi:"type"`
	// The Update Resource REST URL for an Azure ML Studio Web Service endpoint. Type: string (or Expression with resultType string).
	UpdateResourceEndpoint interface{} `pulumi:"updateResourceEndpoint"`
}

// Azure ML Studio Web Service linked service.
type AzureMLLinkedServiceResponse struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The API key for accessing the Azure ML model endpoint.
	ApiKey interface{} `pulumi:"apiKey"`
	// Type of authentication (Required to specify MSI) used to connect to AzureML. Type: string (or Expression with resultType string).
	Authentication interface{} `pulumi:"authentication"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReferenceResponse `pulumi:"connectVia"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential interface{} `pulumi:"encryptedCredential"`
	// The Batch Execution REST URL for an Azure ML Studio Web Service endpoint. Type: string (or Expression with resultType string).
	MlEndpoint interface{} `pulumi:"mlEndpoint"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// The ID of the service principal used to authenticate against the ARM-based updateResourceEndpoint of an Azure ML Studio web service. Type: string (or Expression with resultType string).
	ServicePrincipalId interface{} `pulumi:"servicePrincipalId"`
	// The key of the service principal used to authenticate against the ARM-based updateResourceEndpoint of an Azure ML Studio web service.
	ServicePrincipalKey interface{} `pulumi:"servicePrincipalKey"`
	// The name or ID of the tenant to which the service principal belongs. Type: string (or Expression with resultType string).
	Tenant interface{} `pulumi:"tenant"`
	// Type of linked service.
	// Expected value is 'AzureML'.
	Type string `pulumi:"type"`
	// The Update Resource REST URL for an Azure ML Studio Web Service endpoint. Type: string (or Expression with resultType string).
	UpdateResourceEndpoint interface{} `pulumi:"updateResourceEndpoint"`
}

// Azure ML Service linked service.
type AzureMLServiceLinkedService struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference `pulumi:"connectVia"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential interface{} `pulumi:"encryptedCredential"`
	// Azure ML Service workspace name. Type: string (or Expression with resultType string).
	MlWorkspaceName interface{} `pulumi:"mlWorkspaceName"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Azure ML Service workspace resource group name. Type: string (or Expression with resultType string).
	ResourceGroupName interface{} `pulumi:"resourceGroupName"`
	// The ID of the service principal used to authenticate against the endpoint of a published Azure ML Service pipeline. Type: string (or Expression with resultType string).
	ServicePrincipalId interface{} `pulumi:"servicePrincipalId"`
	// The key of the service principal used to authenticate against the endpoint of a published Azure ML Service pipeline.
	ServicePrincipalKey interface{} `pulumi:"servicePrincipalKey"`
	// Azure ML Service workspace subscription ID. Type: string (or Expression with resultType string).
	SubscriptionId interface{} `pulumi:"subscriptionId"`
	// The name or ID of the tenant to which the service principal belongs. Type: string (or Expression with resultType string).
	Tenant interface{} `pulumi:"tenant"`
	// Type of linked service.
	// Expected value is 'AzureMLService'.
	Type string `pulumi:"type"`
}

// Azure ML Service linked service.
type AzureMLServiceLinkedServiceResponse struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReferenceResponse `pulumi:"connectVia"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential interface{} `pulumi:"encryptedCredential"`
	// Azure ML Service workspace name. Type: string (or Expression with resultType string).
	MlWorkspaceName interface{} `pulumi:"mlWorkspaceName"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Azure ML Service workspace resource group name. Type: string (or Expression with resultType string).
	ResourceGroupName interface{} `pulumi:"resourceGroupName"`
	// The ID of the service principal used to authenticate against the endpoint of a published Azure ML Service pipeline. Type: string (or Expression with resultType string).
	ServicePrincipalId interface{} `pulumi:"servicePrincipalId"`
	// The key of the service principal used to authenticate against the endpoint of a published Azure ML Service pipeline.
	ServicePrincipalKey interface{} `pulumi:"servicePrincipalKey"`
	// Azure ML Service workspace subscription ID. Type: string (or Expression with resultType string).
	SubscriptionId interface{} `pulumi:"subscriptionId"`
	// The name or ID of the tenant to which the service principal belongs. Type: string (or Expression with resultType string).
	Tenant interface{} `pulumi:"tenant"`
	// Type of linked service.
	// Expected value is 'AzureMLService'.
	Type string `pulumi:"type"`
}

// Azure ML Update Resource management activity.
type AzureMLUpdateResourceActivity struct {
	// Activity depends on condition.
	DependsOn []ActivityDependency `pulumi:"dependsOn"`
	// Activity description.
	Description *string `pulumi:"description"`
	// Linked service reference.
	LinkedServiceName *LinkedServiceReference `pulumi:"linkedServiceName"`
	// Activity name.
	Name string `pulumi:"name"`
	// Activity policy.
	Policy *ActivityPolicy `pulumi:"policy"`
	// The relative file path in trainedModelLinkedService to represent the .ilearner file that will be uploaded by the update operation.  Type: string (or Expression with resultType string).
	TrainedModelFilePath interface{} `pulumi:"trainedModelFilePath"`
	// Name of Azure Storage linked service holding the .ilearner file that will be uploaded by the update operation.
	TrainedModelLinkedServiceName LinkedServiceReference `pulumi:"trainedModelLinkedServiceName"`
	// Name of the Trained Model module in the Web Service experiment to be updated. Type: string (or Expression with resultType string).
	TrainedModelName interface{} `pulumi:"trainedModelName"`
	// Type of activity.
	// Expected value is 'AzureMLUpdateResource'.
	Type string `pulumi:"type"`
	// Activity user properties.
	UserProperties []UserProperty `pulumi:"userProperties"`
}

// Azure ML Update Resource management activity.
type AzureMLUpdateResourceActivityResponse struct {
	// Activity depends on condition.
	DependsOn []ActivityDependencyResponse `pulumi:"dependsOn"`
	// Activity description.
	Description *string `pulumi:"description"`
	// Linked service reference.
	LinkedServiceName *LinkedServiceReferenceResponse `pulumi:"linkedServiceName"`
	// Activity name.
	Name string `pulumi:"name"`
	// Activity policy.
	Policy *ActivityPolicyResponse `pulumi:"policy"`
	// The relative file path in trainedModelLinkedService to represent the .ilearner file that will be uploaded by the update operation.  Type: string (or Expression with resultType string).
	TrainedModelFilePath interface{} `pulumi:"trainedModelFilePath"`
	// Name of Azure Storage linked service holding the .ilearner file that will be uploaded by the update operation.
	TrainedModelLinkedServiceName LinkedServiceReferenceResponse `pulumi:"trainedModelLinkedServiceName"`
	// Name of the Trained Model module in the Web Service experiment to be updated. Type: string (or Expression with resultType string).
	TrainedModelName interface{} `pulumi:"trainedModelName"`
	// Type of activity.
	// Expected value is 'AzureMLUpdateResource'.
	Type string `pulumi:"type"`
	// Activity user properties.
	UserProperties []UserPropertyResponse `pulumi:"userProperties"`
}

// Azure ML WebService Input/Output file
type AzureMLWebServiceFile struct {
	// The relative file path, including container name, in the Azure Blob Storage specified by the LinkedService. Type: string (or Expression with resultType string).
	FilePath interface{} `pulumi:"filePath"`
	// Reference to an Azure Storage LinkedService, where Azure ML WebService Input/Output file located.
	LinkedServiceName LinkedServiceReference `pulumi:"linkedServiceName"`
}

// Azure ML WebService Input/Output file
type AzureMLWebServiceFileResponse struct {
	// The relative file path, including container name, in the Azure Blob Storage specified by the LinkedService. Type: string (or Expression with resultType string).
	FilePath interface{} `pulumi:"filePath"`
	// Reference to an Azure Storage LinkedService, where Azure ML WebService Input/Output file located.
	LinkedServiceName LinkedServiceReferenceResponse `pulumi:"linkedServiceName"`
}

// Azure Database for MariaDB linked service.
type AzureMariaDBLinkedService struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference `pulumi:"connectVia"`
	// An ODBC connection string. Type: string, SecureString or AzureKeyVaultSecretReference.
	ConnectionString interface{} `pulumi:"connectionString"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential interface{} `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// The Azure key vault secret reference of password in connection string.
	Pwd *AzureKeyVaultSecretReference `pulumi:"pwd"`
	// Type of linked service.
	// Expected value is 'AzureMariaDB'.
	Type string `pulumi:"type"`
}

// Azure Database for MariaDB linked service.
type AzureMariaDBLinkedServiceResponse struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReferenceResponse `pulumi:"connectVia"`
	// An ODBC connection string. Type: string, SecureString or AzureKeyVaultSecretReference.
	ConnectionString interface{} `pulumi:"connectionString"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential interface{} `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// The Azure key vault secret reference of password in connection string.
	Pwd *AzureKeyVaultSecretReferenceResponse `pulumi:"pwd"`
	// Type of linked service.
	// Expected value is 'AzureMariaDB'.
	Type string `pulumi:"type"`
}

// A copy activity Azure MariaDB source.
type AzureMariaDBSource struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns interface{} `pulumi:"additionalColumns"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// A query to retrieve data from source. Type: string (or Expression with resultType string).
	Query interface{} `pulumi:"query"`
	// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	QueryTimeout interface{} `pulumi:"queryTimeout"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// Copy source type.
	// Expected value is 'AzureMariaDBSource'.
	Type string `pulumi:"type"`
}

// A copy activity Azure MariaDB source.
type AzureMariaDBSourceResponse struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns interface{} `pulumi:"additionalColumns"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// A query to retrieve data from source. Type: string (or Expression with resultType string).
	Query interface{} `pulumi:"query"`
	// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	QueryTimeout interface{} `pulumi:"queryTimeout"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// Copy source type.
	// Expected value is 'AzureMariaDBSource'.
	Type string `pulumi:"type"`
}

// Azure Database for MariaDB dataset.
type AzureMariaDBTableDataset struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReference `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// The table name. Type: string (or Expression with resultType string).
	TableName interface{} `pulumi:"tableName"`
	// Type of dataset.
	// Expected value is 'AzureMariaDBTable'.
	Type string `pulumi:"type"`
}

// Azure Database for MariaDB dataset.
type AzureMariaDBTableDatasetResponse struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetResponseFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceResponse `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// The table name. Type: string (or Expression with resultType string).
	TableName interface{} `pulumi:"tableName"`
	// Type of dataset.
	// Expected value is 'AzureMariaDBTable'.
	Type string `pulumi:"type"`
}

// Azure MySQL database linked service.
type AzureMySqlLinkedService struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference `pulumi:"connectVia"`
	// The connection string. Type: string, SecureString or AzureKeyVaultSecretReference.
	ConnectionString interface{} `pulumi:"connectionString"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential interface{} `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// The Azure key vault secret reference of password in connection string.
	Password *AzureKeyVaultSecretReference `pulumi:"password"`
	// Type of linked service.
	// Expected value is 'AzureMySql'.
	Type string `pulumi:"type"`
}

// Azure MySQL database linked service.
type AzureMySqlLinkedServiceResponse struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReferenceResponse `pulumi:"connectVia"`
	// The connection string. Type: string, SecureString or AzureKeyVaultSecretReference.
	ConnectionString interface{} `pulumi:"connectionString"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential interface{} `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// The Azure key vault secret reference of password in connection string.
	Password *AzureKeyVaultSecretReferenceResponse `pulumi:"password"`
	// Type of linked service.
	// Expected value is 'AzureMySql'.
	Type string `pulumi:"type"`
}

// A copy activity Azure MySql sink.
type AzureMySqlSink struct {
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the sink data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// A query to execute before starting the copy. Type: string (or Expression with resultType string).
	PreCopyScript interface{} `pulumi:"preCopyScript"`
	// Sink retry count. Type: integer (or Expression with resultType integer).
	SinkRetryCount interface{} `pulumi:"sinkRetryCount"`
	// Sink retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SinkRetryWait interface{} `pulumi:"sinkRetryWait"`
	// Copy sink type.
	// Expected value is 'AzureMySqlSink'.
	Type string `pulumi:"type"`
	// Write batch size. Type: integer (or Expression with resultType integer), minimum: 0.
	WriteBatchSize interface{} `pulumi:"writeBatchSize"`
	// Write batch timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	WriteBatchTimeout interface{} `pulumi:"writeBatchTimeout"`
}

// A copy activity Azure MySql sink.
type AzureMySqlSinkResponse struct {
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the sink data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// A query to execute before starting the copy. Type: string (or Expression with resultType string).
	PreCopyScript interface{} `pulumi:"preCopyScript"`
	// Sink retry count. Type: integer (or Expression with resultType integer).
	SinkRetryCount interface{} `pulumi:"sinkRetryCount"`
	// Sink retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SinkRetryWait interface{} `pulumi:"sinkRetryWait"`
	// Copy sink type.
	// Expected value is 'AzureMySqlSink'.
	Type string `pulumi:"type"`
	// Write batch size. Type: integer (or Expression with resultType integer), minimum: 0.
	WriteBatchSize interface{} `pulumi:"writeBatchSize"`
	// Write batch timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	WriteBatchTimeout interface{} `pulumi:"writeBatchTimeout"`
}

// A copy activity Azure MySQL source.
type AzureMySqlSource struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns interface{} `pulumi:"additionalColumns"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// Database query. Type: string (or Expression with resultType string).
	Query interface{} `pulumi:"query"`
	// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	QueryTimeout interface{} `pulumi:"queryTimeout"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// Copy source type.
	// Expected value is 'AzureMySqlSource'.
	Type string `pulumi:"type"`
}

// A copy activity Azure MySQL source.
type AzureMySqlSourceResponse struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns interface{} `pulumi:"additionalColumns"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// Database query. Type: string (or Expression with resultType string).
	Query interface{} `pulumi:"query"`
	// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	QueryTimeout interface{} `pulumi:"queryTimeout"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// Copy source type.
	// Expected value is 'AzureMySqlSource'.
	Type string `pulumi:"type"`
}

// The Azure MySQL database dataset.
type AzureMySqlTableDataset struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReference `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// The name of Azure MySQL database table. Type: string (or Expression with resultType string).
	Table interface{} `pulumi:"table"`
	// The Azure MySQL database table name. Type: string (or Expression with resultType string).
	TableName interface{} `pulumi:"tableName"`
	// Type of dataset.
	// Expected value is 'AzureMySqlTable'.
	Type string `pulumi:"type"`
}

// The Azure MySQL database dataset.
type AzureMySqlTableDatasetResponse struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetResponseFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceResponse `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// The name of Azure MySQL database table. Type: string (or Expression with resultType string).
	Table interface{} `pulumi:"table"`
	// The Azure MySQL database table name. Type: string (or Expression with resultType string).
	TableName interface{} `pulumi:"tableName"`
	// Type of dataset.
	// Expected value is 'AzureMySqlTable'.
	Type string `pulumi:"type"`
}

// Azure PostgreSQL linked service.
type AzurePostgreSqlLinkedService struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference `pulumi:"connectVia"`
	// An ODBC connection string. Type: string, SecureString or AzureKeyVaultSecretReference.
	ConnectionString interface{} `pulumi:"connectionString"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential interface{} `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// The Azure key vault secret reference of password in connection string.
	Password *AzureKeyVaultSecretReference `pulumi:"password"`
	// Type of linked service.
	// Expected value is 'AzurePostgreSql'.
	Type string `pulumi:"type"`
}

// Azure PostgreSQL linked service.
type AzurePostgreSqlLinkedServiceResponse struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReferenceResponse `pulumi:"connectVia"`
	// An ODBC connection string. Type: string, SecureString or AzureKeyVaultSecretReference.
	ConnectionString interface{} `pulumi:"connectionString"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential interface{} `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// The Azure key vault secret reference of password in connection string.
	Password *AzureKeyVaultSecretReferenceResponse `pulumi:"password"`
	// Type of linked service.
	// Expected value is 'AzurePostgreSql'.
	Type string `pulumi:"type"`
}

// A copy activity Azure PostgreSQL sink.
type AzurePostgreSqlSink struct {
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the sink data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// A query to execute before starting the copy. Type: string (or Expression with resultType string).
	PreCopyScript interface{} `pulumi:"preCopyScript"`
	// Sink retry count. Type: integer (or Expression with resultType integer).
	SinkRetryCount interface{} `pulumi:"sinkRetryCount"`
	// Sink retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SinkRetryWait interface{} `pulumi:"sinkRetryWait"`
	// Copy sink type.
	// Expected value is 'AzurePostgreSqlSink'.
	Type string `pulumi:"type"`
	// Write batch size. Type: integer (or Expression with resultType integer), minimum: 0.
	WriteBatchSize interface{} `pulumi:"writeBatchSize"`
	// Write batch timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	WriteBatchTimeout interface{} `pulumi:"writeBatchTimeout"`
}

// A copy activity Azure PostgreSQL sink.
type AzurePostgreSqlSinkResponse struct {
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the sink data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// A query to execute before starting the copy. Type: string (or Expression with resultType string).
	PreCopyScript interface{} `pulumi:"preCopyScript"`
	// Sink retry count. Type: integer (or Expression with resultType integer).
	SinkRetryCount interface{} `pulumi:"sinkRetryCount"`
	// Sink retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SinkRetryWait interface{} `pulumi:"sinkRetryWait"`
	// Copy sink type.
	// Expected value is 'AzurePostgreSqlSink'.
	Type string `pulumi:"type"`
	// Write batch size. Type: integer (or Expression with resultType integer), minimum: 0.
	WriteBatchSize interface{} `pulumi:"writeBatchSize"`
	// Write batch timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	WriteBatchTimeout interface{} `pulumi:"writeBatchTimeout"`
}

// A copy activity Azure PostgreSQL source.
type AzurePostgreSqlSource struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns interface{} `pulumi:"additionalColumns"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// A query to retrieve data from source. Type: string (or Expression with resultType string).
	Query interface{} `pulumi:"query"`
	// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	QueryTimeout interface{} `pulumi:"queryTimeout"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// Copy source type.
	// Expected value is 'AzurePostgreSqlSource'.
	Type string `pulumi:"type"`
}

// A copy activity Azure PostgreSQL source.
type AzurePostgreSqlSourceResponse struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns interface{} `pulumi:"additionalColumns"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// A query to retrieve data from source. Type: string (or Expression with resultType string).
	Query interface{} `pulumi:"query"`
	// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	QueryTimeout interface{} `pulumi:"queryTimeout"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// Copy source type.
	// Expected value is 'AzurePostgreSqlSource'.
	Type string `pulumi:"type"`
}

// Azure PostgreSQL dataset.
type AzurePostgreSqlTableDataset struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReference `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// The table name of the Azure PostgreSQL database. Type: string (or Expression with resultType string).
	Table interface{} `pulumi:"table"`
	// The table name of the Azure PostgreSQL database which includes both schema and table. Type: string (or Expression with resultType string).
	TableName interface{} `pulumi:"tableName"`
	// Type of dataset.
	// Expected value is 'AzurePostgreSqlTable'.
	Type string `pulumi:"type"`
}

// Azure PostgreSQL dataset.
type AzurePostgreSqlTableDatasetResponse struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetResponseFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceResponse `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// The table name of the Azure PostgreSQL database. Type: string (or Expression with resultType string).
	Table interface{} `pulumi:"table"`
	// The table name of the Azure PostgreSQL database which includes both schema and table. Type: string (or Expression with resultType string).
	TableName interface{} `pulumi:"tableName"`
	// Type of dataset.
	// Expected value is 'AzurePostgreSqlTable'.
	Type string `pulumi:"type"`
}

// A copy activity Azure Queue sink.
type AzureQueueSink struct {
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the sink data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// Sink retry count. Type: integer (or Expression with resultType integer).
	SinkRetryCount interface{} `pulumi:"sinkRetryCount"`
	// Sink retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SinkRetryWait interface{} `pulumi:"sinkRetryWait"`
	// Copy sink type.
	// Expected value is 'AzureQueueSink'.
	Type string `pulumi:"type"`
	// Write batch size. Type: integer (or Expression with resultType integer), minimum: 0.
	WriteBatchSize interface{} `pulumi:"writeBatchSize"`
	// Write batch timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	WriteBatchTimeout interface{} `pulumi:"writeBatchTimeout"`
}

// A copy activity Azure Queue sink.
type AzureQueueSinkResponse struct {
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the sink data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// Sink retry count. Type: integer (or Expression with resultType integer).
	SinkRetryCount interface{} `pulumi:"sinkRetryCount"`
	// Sink retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SinkRetryWait interface{} `pulumi:"sinkRetryWait"`
	// Copy sink type.
	// Expected value is 'AzureQueueSink'.
	Type string `pulumi:"type"`
	// Write batch size. Type: integer (or Expression with resultType integer), minimum: 0.
	WriteBatchSize interface{} `pulumi:"writeBatchSize"`
	// Write batch timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	WriteBatchTimeout interface{} `pulumi:"writeBatchTimeout"`
}

// The Azure Search Index.
type AzureSearchIndexDataset struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetFolder `pulumi:"folder"`
	// The name of the Azure Search Index. Type: string (or Expression with resultType string).
	IndexName interface{} `pulumi:"indexName"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReference `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// Type of dataset.
	// Expected value is 'AzureSearchIndex'.
	Type string `pulumi:"type"`
}

// The Azure Search Index.
type AzureSearchIndexDatasetResponse struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetResponseFolder `pulumi:"folder"`
	// The name of the Azure Search Index. Type: string (or Expression with resultType string).
	IndexName interface{} `pulumi:"indexName"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceResponse `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// Type of dataset.
	// Expected value is 'AzureSearchIndex'.
	Type string `pulumi:"type"`
}

// A copy activity Azure Search Index sink.
type AzureSearchIndexSink struct {
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the sink data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// Sink retry count. Type: integer (or Expression with resultType integer).
	SinkRetryCount interface{} `pulumi:"sinkRetryCount"`
	// Sink retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SinkRetryWait interface{} `pulumi:"sinkRetryWait"`
	// Copy sink type.
	// Expected value is 'AzureSearchIndexSink'.
	Type string `pulumi:"type"`
	// Write batch size. Type: integer (or Expression with resultType integer), minimum: 0.
	WriteBatchSize interface{} `pulumi:"writeBatchSize"`
	// Write batch timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	WriteBatchTimeout interface{} `pulumi:"writeBatchTimeout"`
	// Specify the write behavior when upserting documents into Azure Search Index.
	WriteBehavior *string `pulumi:"writeBehavior"`
}

// A copy activity Azure Search Index sink.
type AzureSearchIndexSinkResponse struct {
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the sink data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// Sink retry count. Type: integer (or Expression with resultType integer).
	SinkRetryCount interface{} `pulumi:"sinkRetryCount"`
	// Sink retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SinkRetryWait interface{} `pulumi:"sinkRetryWait"`
	// Copy sink type.
	// Expected value is 'AzureSearchIndexSink'.
	Type string `pulumi:"type"`
	// Write batch size. Type: integer (or Expression with resultType integer), minimum: 0.
	WriteBatchSize interface{} `pulumi:"writeBatchSize"`
	// Write batch timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	WriteBatchTimeout interface{} `pulumi:"writeBatchTimeout"`
	// Specify the write behavior when upserting documents into Azure Search Index.
	WriteBehavior *string `pulumi:"writeBehavior"`
}

// Linked service for Windows Azure Search Service.
type AzureSearchLinkedService struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference `pulumi:"connectVia"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential interface{} `pulumi:"encryptedCredential"`
	// Admin Key for Azure Search service
	Key interface{} `pulumi:"key"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Type of linked service.
	// Expected value is 'AzureSearch'.
	Type string `pulumi:"type"`
	// URL for Azure Search service. Type: string (or Expression with resultType string).
	Url interface{} `pulumi:"url"`
}

// Linked service for Windows Azure Search Service.
type AzureSearchLinkedServiceResponse struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReferenceResponse `pulumi:"connectVia"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential interface{} `pulumi:"encryptedCredential"`
	// Admin Key for Azure Search service
	Key interface{} `pulumi:"key"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Type of linked service.
	// Expected value is 'AzureSearch'.
	Type string `pulumi:"type"`
	// URL for Azure Search service. Type: string (or Expression with resultType string).
	Url interface{} `pulumi:"url"`
}

// Azure SQL Data Warehouse linked service.
type AzureSqlDWLinkedService struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// Indicates the azure cloud type of the service principle auth. Allowed values are AzurePublic, AzureChina, AzureUsGovernment, AzureGermany. Default value is the data factory regions’ cloud type. Type: string (or Expression with resultType string).
	AzureCloudType interface{} `pulumi:"azureCloudType"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference `pulumi:"connectVia"`
	// The connection string. Type: string, SecureString or AzureKeyVaultSecretReference. Type: string, SecureString or AzureKeyVaultSecretReference.
	ConnectionString interface{} `pulumi:"connectionString"`
	// The credential reference containing authentication information.
	Credential *CredentialReference `pulumi:"credential"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential interface{} `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// The Azure key vault secret reference of password in connection string.
	Password *AzureKeyVaultSecretReference `pulumi:"password"`
	// The ID of the service principal used to authenticate against Azure SQL Data Warehouse. Type: string (or Expression with resultType string).
	ServicePrincipalId interface{} `pulumi:"servicePrincipalId"`
	// The key of the service principal used to authenticate against Azure SQL Data Warehouse.
	ServicePrincipalKey interface{} `pulumi:"servicePrincipalKey"`
	// The name or ID of the tenant to which the service principal belongs. Type: string (or Expression with resultType string).
	Tenant interface{} `pulumi:"tenant"`
	// Type of linked service.
	// Expected value is 'AzureSqlDW'.
	Type string `pulumi:"type"`
}

// Azure SQL Data Warehouse linked service.
type AzureSqlDWLinkedServiceResponse struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// Indicates the azure cloud type of the service principle auth. Allowed values are AzurePublic, AzureChina, AzureUsGovernment, AzureGermany. Default value is the data factory regions’ cloud type. Type: string (or Expression with resultType string).
	AzureCloudType interface{} `pulumi:"azureCloudType"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReferenceResponse `pulumi:"connectVia"`
	// The connection string. Type: string, SecureString or AzureKeyVaultSecretReference. Type: string, SecureString or AzureKeyVaultSecretReference.
	ConnectionString interface{} `pulumi:"connectionString"`
	// The credential reference containing authentication information.
	Credential *CredentialReferenceResponse `pulumi:"credential"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential interface{} `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// The Azure key vault secret reference of password in connection string.
	Password *AzureKeyVaultSecretReferenceResponse `pulumi:"password"`
	// The ID of the service principal used to authenticate against Azure SQL Data Warehouse. Type: string (or Expression with resultType string).
	ServicePrincipalId interface{} `pulumi:"servicePrincipalId"`
	// The key of the service principal used to authenticate against Azure SQL Data Warehouse.
	ServicePrincipalKey interface{} `pulumi:"servicePrincipalKey"`
	// The name or ID of the tenant to which the service principal belongs. Type: string (or Expression with resultType string).
	Tenant interface{} `pulumi:"tenant"`
	// Type of linked service.
	// Expected value is 'AzureSqlDW'.
	Type string `pulumi:"type"`
}

// The Azure SQL Data Warehouse dataset.
type AzureSqlDWTableDataset struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReference `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// The table name of the Azure SQL Data Warehouse. Type: string (or Expression with resultType string).
	Table interface{} `pulumi:"table"`
	// This property will be retired. Please consider using schema + table properties instead.
	TableName interface{} `pulumi:"tableName"`
	// Type of dataset.
	// Expected value is 'AzureSqlDWTable'.
	Type string `pulumi:"type"`
}

// The Azure SQL Data Warehouse dataset.
type AzureSqlDWTableDatasetResponse struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetResponseFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceResponse `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// The table name of the Azure SQL Data Warehouse. Type: string (or Expression with resultType string).
	Table interface{} `pulumi:"table"`
	// This property will be retired. Please consider using schema + table properties instead.
	TableName interface{} `pulumi:"tableName"`
	// Type of dataset.
	// Expected value is 'AzureSqlDWTable'.
	Type string `pulumi:"type"`
}

// Microsoft Azure SQL Database linked service.
type AzureSqlDatabaseLinkedService struct {
	// Sql always encrypted properties.
	AlwaysEncryptedSettings *SqlAlwaysEncryptedProperties `pulumi:"alwaysEncryptedSettings"`
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// Indicates the azure cloud type of the service principle auth. Allowed values are AzurePublic, AzureChina, AzureUsGovernment, AzureGermany. Default value is the data factory regions’ cloud type. Type: string (or Expression with resultType string).
	AzureCloudType interface{} `pulumi:"azureCloudType"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference `pulumi:"connectVia"`
	// The connection string. Type: string, SecureString or AzureKeyVaultSecretReference.
	ConnectionString interface{} `pulumi:"connectionString"`
	// The credential reference containing authentication information.
	Credential *CredentialReference `pulumi:"credential"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential interface{} `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// The Azure key vault secret reference of password in connection string.
	Password *AzureKeyVaultSecretReference `pulumi:"password"`
	// The ID of the service principal used to authenticate against Azure SQL Database. Type: string (or Expression with resultType string).
	ServicePrincipalId interface{} `pulumi:"servicePrincipalId"`
	// The key of the service principal used to authenticate against Azure SQL Database.
	ServicePrincipalKey interface{} `pulumi:"servicePrincipalKey"`
	// The name or ID of the tenant to which the service principal belongs. Type: string (or Expression with resultType string).
	Tenant interface{} `pulumi:"tenant"`
	// Type of linked service.
	// Expected value is 'AzureSqlDatabase'.
	Type string `pulumi:"type"`
}

// Microsoft Azure SQL Database linked service.
type AzureSqlDatabaseLinkedServiceResponse struct {
	// Sql always encrypted properties.
	AlwaysEncryptedSettings *SqlAlwaysEncryptedPropertiesResponse `pulumi:"alwaysEncryptedSettings"`
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// Indicates the azure cloud type of the service principle auth. Allowed values are AzurePublic, AzureChina, AzureUsGovernment, AzureGermany. Default value is the data factory regions’ cloud type. Type: string (or Expression with resultType string).
	AzureCloudType interface{} `pulumi:"azureCloudType"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReferenceResponse `pulumi:"connectVia"`
	// The connection string. Type: string, SecureString or AzureKeyVaultSecretReference.
	ConnectionString interface{} `pulumi:"connectionString"`
	// The credential reference containing authentication information.
	Credential *CredentialReferenceResponse `pulumi:"credential"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential interface{} `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// The Azure key vault secret reference of password in connection string.
	Password *AzureKeyVaultSecretReferenceResponse `pulumi:"password"`
	// The ID of the service principal used to authenticate against Azure SQL Database. Type: string (or Expression with resultType string).
	ServicePrincipalId interface{} `pulumi:"servicePrincipalId"`
	// The key of the service principal used to authenticate against Azure SQL Database.
	ServicePrincipalKey interface{} `pulumi:"servicePrincipalKey"`
	// The name or ID of the tenant to which the service principal belongs. Type: string (or Expression with resultType string).
	Tenant interface{} `pulumi:"tenant"`
	// Type of linked service.
	// Expected value is 'AzureSqlDatabase'.
	Type string `pulumi:"type"`
}

// Azure SQL Managed Instance linked service.
type AzureSqlMILinkedService struct {
	// Sql always encrypted properties.
	AlwaysEncryptedSettings *SqlAlwaysEncryptedProperties `pulumi:"alwaysEncryptedSettings"`
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// Indicates the azure cloud type of the service principle auth. Allowed values are AzurePublic, AzureChina, AzureUsGovernment, AzureGermany. Default value is the data factory regions’ cloud type. Type: string (or Expression with resultType string).
	AzureCloudType interface{} `pulumi:"azureCloudType"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference `pulumi:"connectVia"`
	// The connection string. Type: string, SecureString or AzureKeyVaultSecretReference.
	ConnectionString interface{} `pulumi:"connectionString"`
	// The credential reference containing authentication information.
	Credential *CredentialReference `pulumi:"credential"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential interface{} `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// The Azure key vault secret reference of password in connection string.
	Password *AzureKeyVaultSecretReference `pulumi:"password"`
	// The ID of the service principal used to authenticate against Azure SQL Managed Instance. Type: string (or Expression with resultType string).
	ServicePrincipalId interface{} `pulumi:"servicePrincipalId"`
	// The key of the service principal used to authenticate against Azure SQL Managed Instance.
	ServicePrincipalKey interface{} `pulumi:"servicePrincipalKey"`
	// The name or ID of the tenant to which the service principal belongs. Type: string (or Expression with resultType string).
	Tenant interface{} `pulumi:"tenant"`
	// Type of linked service.
	// Expected value is 'AzureSqlMI'.
	Type string `pulumi:"type"`
}

// Azure SQL Managed Instance linked service.
type AzureSqlMILinkedServiceResponse struct {
	// Sql always encrypted properties.
	AlwaysEncryptedSettings *SqlAlwaysEncryptedPropertiesResponse `pulumi:"alwaysEncryptedSettings"`
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// Indicates the azure cloud type of the service principle auth. Allowed values are AzurePublic, AzureChina, AzureUsGovernment, AzureGermany. Default value is the data factory regions’ cloud type. Type: string (or Expression with resultType string).
	AzureCloudType interface{} `pulumi:"azureCloudType"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReferenceResponse `pulumi:"connectVia"`
	// The connection string. Type: string, SecureString or AzureKeyVaultSecretReference.
	ConnectionString interface{} `pulumi:"connectionString"`
	// The credential reference containing authentication information.
	Credential *CredentialReferenceResponse `pulumi:"credential"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential interface{} `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// The Azure key vault secret reference of password in connection string.
	Password *AzureKeyVaultSecretReferenceResponse `pulumi:"password"`
	// The ID of the service principal used to authenticate against Azure SQL Managed Instance. Type: string (or Expression with resultType string).
	ServicePrincipalId interface{} `pulumi:"servicePrincipalId"`
	// The key of the service principal used to authenticate against Azure SQL Managed Instance.
	ServicePrincipalKey interface{} `pulumi:"servicePrincipalKey"`
	// The name or ID of the tenant to which the service principal belongs. Type: string (or Expression with resultType string).
	Tenant interface{} `pulumi:"tenant"`
	// Type of linked service.
	// Expected value is 'AzureSqlMI'.
	Type string `pulumi:"type"`
}

// The Azure SQL Managed Instance dataset.
type AzureSqlMITableDataset struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReference `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// The table name of the Azure SQL Managed Instance dataset. Type: string (or Expression with resultType string).
	Table interface{} `pulumi:"table"`
	// This property will be retired. Please consider using schema + table properties instead.
	TableName interface{} `pulumi:"tableName"`
	// Type of dataset.
	// Expected value is 'AzureSqlMITable'.
	Type string `pulumi:"type"`
}

// The Azure SQL Managed Instance dataset.
type AzureSqlMITableDatasetResponse struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetResponseFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceResponse `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// The table name of the Azure SQL Managed Instance dataset. Type: string (or Expression with resultType string).
	Table interface{} `pulumi:"table"`
	// This property will be retired. Please consider using schema + table properties instead.
	TableName interface{} `pulumi:"tableName"`
	// Type of dataset.
	// Expected value is 'AzureSqlMITable'.
	Type string `pulumi:"type"`
}

// A copy activity Azure SQL sink.
type AzureSqlSink struct {
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the sink data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// SQL pre-copy script. Type: string (or Expression with resultType string).
	PreCopyScript interface{} `pulumi:"preCopyScript"`
	// Sink retry count. Type: integer (or Expression with resultType integer).
	SinkRetryCount interface{} `pulumi:"sinkRetryCount"`
	// Sink retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SinkRetryWait interface{} `pulumi:"sinkRetryWait"`
	// SQL writer stored procedure name. Type: string (or Expression with resultType string).
	SqlWriterStoredProcedureName interface{} `pulumi:"sqlWriterStoredProcedureName"`
	// SQL writer table type. Type: string (or Expression with resultType string).
	SqlWriterTableType interface{} `pulumi:"sqlWriterTableType"`
	// Whether to use table lock during bulk copy. Type: boolean (or Expression with resultType boolean).
	SqlWriterUseTableLock interface{} `pulumi:"sqlWriterUseTableLock"`
	// SQL stored procedure parameters.
	StoredProcedureParameters map[string]StoredProcedureParameter `pulumi:"storedProcedureParameters"`
	// The stored procedure parameter name of the table type. Type: string (or Expression with resultType string).
	StoredProcedureTableTypeParameterName interface{} `pulumi:"storedProcedureTableTypeParameterName"`
	// The option to handle sink table, such as autoCreate. For now only 'autoCreate' value is supported. Type: string (or Expression with resultType string).
	TableOption interface{} `pulumi:"tableOption"`
	// Copy sink type.
	// Expected value is 'AzureSqlSink'.
	Type string `pulumi:"type"`
	// SQL upsert settings.
	UpsertSettings *SqlUpsertSettings `pulumi:"upsertSettings"`
	// Write batch size. Type: integer (or Expression with resultType integer), minimum: 0.
	WriteBatchSize interface{} `pulumi:"writeBatchSize"`
	// Write batch timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	WriteBatchTimeout interface{} `pulumi:"writeBatchTimeout"`
	// Write behavior when copying data into Azure SQL. Type: SqlWriteBehaviorEnum (or Expression with resultType SqlWriteBehaviorEnum)
	WriteBehavior interface{} `pulumi:"writeBehavior"`
}

// A copy activity Azure SQL sink.
type AzureSqlSinkResponse struct {
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the sink data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// SQL pre-copy script. Type: string (or Expression with resultType string).
	PreCopyScript interface{} `pulumi:"preCopyScript"`
	// Sink retry count. Type: integer (or Expression with resultType integer).
	SinkRetryCount interface{} `pulumi:"sinkRetryCount"`
	// Sink retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SinkRetryWait interface{} `pulumi:"sinkRetryWait"`
	// SQL writer stored procedure name. Type: string (or Expression with resultType string).
	SqlWriterStoredProcedureName interface{} `pulumi:"sqlWriterStoredProcedureName"`
	// SQL writer table type. Type: string (or Expression with resultType string).
	SqlWriterTableType interface{} `pulumi:"sqlWriterTableType"`
	// Whether to use table lock during bulk copy. Type: boolean (or Expression with resultType boolean).
	SqlWriterUseTableLock interface{} `pulumi:"sqlWriterUseTableLock"`
	// SQL stored procedure parameters.
	StoredProcedureParameters map[string]StoredProcedureParameterResponse `pulumi:"storedProcedureParameters"`
	// The stored procedure parameter name of the table type. Type: string (or Expression with resultType string).
	StoredProcedureTableTypeParameterName interface{} `pulumi:"storedProcedureTableTypeParameterName"`
	// The option to handle sink table, such as autoCreate. For now only 'autoCreate' value is supported. Type: string (or Expression with resultType string).
	TableOption interface{} `pulumi:"tableOption"`
	// Copy sink type.
	// Expected value is 'AzureSqlSink'.
	Type string `pulumi:"type"`
	// SQL upsert settings.
	UpsertSettings *SqlUpsertSettingsResponse `pulumi:"upsertSettings"`
	// Write batch size. Type: integer (or Expression with resultType integer), minimum: 0.
	WriteBatchSize interface{} `pulumi:"writeBatchSize"`
	// Write batch timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	WriteBatchTimeout interface{} `pulumi:"writeBatchTimeout"`
	// Write behavior when copying data into Azure SQL. Type: SqlWriteBehaviorEnum (or Expression with resultType SqlWriteBehaviorEnum)
	WriteBehavior interface{} `pulumi:"writeBehavior"`
}

// A copy activity Azure SQL source.
type AzureSqlSource struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns interface{} `pulumi:"additionalColumns"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// The partition mechanism that will be used for Sql read in parallel. Possible values include: "None", "PhysicalPartitionsOfTable", "DynamicRange".
	PartitionOption interface{} `pulumi:"partitionOption"`
	// The settings that will be leveraged for Sql source partitioning.
	PartitionSettings *SqlPartitionSettings `pulumi:"partitionSettings"`
	// Which additional types to produce.
	ProduceAdditionalTypes interface{} `pulumi:"produceAdditionalTypes"`
	// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	QueryTimeout interface{} `pulumi:"queryTimeout"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// SQL reader query. Type: string (or Expression with resultType string).
	SqlReaderQuery interface{} `pulumi:"sqlReaderQuery"`
	// Name of the stored procedure for a SQL Database source. This cannot be used at the same time as SqlReaderQuery. Type: string (or Expression with resultType string).
	SqlReaderStoredProcedureName interface{} `pulumi:"sqlReaderStoredProcedureName"`
	// Value and type setting for stored procedure parameters. Example: "{Parameter1: {value: "1", type: "int"}}".
	StoredProcedureParameters map[string]StoredProcedureParameter `pulumi:"storedProcedureParameters"`
	// Copy source type.
	// Expected value is 'AzureSqlSource'.
	Type string `pulumi:"type"`
}

// A copy activity Azure SQL source.
type AzureSqlSourceResponse struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns interface{} `pulumi:"additionalColumns"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// The partition mechanism that will be used for Sql read in parallel. Possible values include: "None", "PhysicalPartitionsOfTable", "DynamicRange".
	PartitionOption interface{} `pulumi:"partitionOption"`
	// The settings that will be leveraged for Sql source partitioning.
	PartitionSettings *SqlPartitionSettingsResponse `pulumi:"partitionSettings"`
	// Which additional types to produce.
	ProduceAdditionalTypes interface{} `pulumi:"produceAdditionalTypes"`
	// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	QueryTimeout interface{} `pulumi:"queryTimeout"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// SQL reader query. Type: string (or Expression with resultType string).
	SqlReaderQuery interface{} `pulumi:"sqlReaderQuery"`
	// Name of the stored procedure for a SQL Database source. This cannot be used at the same time as SqlReaderQuery. Type: string (or Expression with resultType string).
	SqlReaderStoredProcedureName interface{} `pulumi:"sqlReaderStoredProcedureName"`
	// Value and type setting for stored procedure parameters. Example: "{Parameter1: {value: "1", type: "int"}}".
	StoredProcedureParameters map[string]StoredProcedureParameterResponse `pulumi:"storedProcedureParameters"`
	// Copy source type.
	// Expected value is 'AzureSqlSource'.
	Type string `pulumi:"type"`
}

// The Azure SQL Server database dataset.
type AzureSqlTableDataset struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReference `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// The table name of the Azure SQL database. Type: string (or Expression with resultType string).
	Table interface{} `pulumi:"table"`
	// This property will be retired. Please consider using schema + table properties instead.
	TableName interface{} `pulumi:"tableName"`
	// Type of dataset.
	// Expected value is 'AzureSqlTable'.
	Type string `pulumi:"type"`
}

// The Azure SQL Server database dataset.
type AzureSqlTableDatasetResponse struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetResponseFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceResponse `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// The table name of the Azure SQL database. Type: string (or Expression with resultType string).
	Table interface{} `pulumi:"table"`
	// This property will be retired. Please consider using schema + table properties instead.
	TableName interface{} `pulumi:"tableName"`
	// Type of dataset.
	// Expected value is 'AzureSqlTable'.
	Type string `pulumi:"type"`
}

// The storage account linked service.
type AzureStorageLinkedService struct {
	// The Azure key vault secret reference of accountKey in connection string.
	AccountKey *AzureKeyVaultSecretReference `pulumi:"accountKey"`
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference `pulumi:"connectVia"`
	// The connection string. It is mutually exclusive with sasUri property. Type: string, SecureString or AzureKeyVaultSecretReference.
	ConnectionString interface{} `pulumi:"connectionString"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential *string `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// The Azure key vault secret reference of sasToken in sas uri.
	SasToken *AzureKeyVaultSecretReference `pulumi:"sasToken"`
	// SAS URI of the Azure Storage resource. It is mutually exclusive with connectionString property. Type: string, SecureString or AzureKeyVaultSecretReference.
	SasUri interface{} `pulumi:"sasUri"`
	// Type of linked service.
	// Expected value is 'AzureStorage'.
	Type string `pulumi:"type"`
}

// The storage account linked service.
type AzureStorageLinkedServiceResponse struct {
	// The Azure key vault secret reference of accountKey in connection string.
	AccountKey *AzureKeyVaultSecretReferenceResponse `pulumi:"accountKey"`
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReferenceResponse `pulumi:"connectVia"`
	// The connection string. It is mutually exclusive with sasUri property. Type: string, SecureString or AzureKeyVaultSecretReference.
	ConnectionString interface{} `pulumi:"connectionString"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential *string `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// The Azure key vault secret reference of sasToken in sas uri.
	SasToken *AzureKeyVaultSecretReferenceResponse `pulumi:"sasToken"`
	// SAS URI of the Azure Storage resource. It is mutually exclusive with connectionString property. Type: string, SecureString or AzureKeyVaultSecretReference.
	SasUri interface{} `pulumi:"sasUri"`
	// Type of linked service.
	// Expected value is 'AzureStorage'.
	Type string `pulumi:"type"`
}

// The Azure Table storage dataset.
type AzureTableDataset struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReference `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// The table name of the Azure Table storage. Type: string (or Expression with resultType string).
	TableName interface{} `pulumi:"tableName"`
	// Type of dataset.
	// Expected value is 'AzureTable'.
	Type string `pulumi:"type"`
}

// The Azure Table storage dataset.
type AzureTableDatasetResponse struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetResponseFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceResponse `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// The table name of the Azure Table storage. Type: string (or Expression with resultType string).
	TableName interface{} `pulumi:"tableName"`
	// Type of dataset.
	// Expected value is 'AzureTable'.
	Type string `pulumi:"type"`
}

// A copy activity Azure Table sink.
type AzureTableSink struct {
	// Azure Table default partition key value. Type: string (or Expression with resultType string).
	AzureTableDefaultPartitionKeyValue interface{} `pulumi:"azureTableDefaultPartitionKeyValue"`
	// Azure Table insert type. Type: string (or Expression with resultType string).
	AzureTableInsertType interface{} `pulumi:"azureTableInsertType"`
	// Azure Table partition key name. Type: string (or Expression with resultType string).
	AzureTablePartitionKeyName interface{} `pulumi:"azureTablePartitionKeyName"`
	// Azure Table row key name. Type: string (or Expression with resultType string).
	AzureTableRowKeyName interface{} `pulumi:"azureTableRowKeyName"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the sink data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// Sink retry count. Type: integer (or Expression with resultType integer).
	SinkRetryCount interface{} `pulumi:"sinkRetryCount"`
	// Sink retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SinkRetryWait interface{} `pulumi:"sinkRetryWait"`
	// Copy sink type.
	// Expected value is 'AzureTableSink'.
	Type string `pulumi:"type"`
	// Write batch size. Type: integer (or Expression with resultType integer), minimum: 0.
	WriteBatchSize interface{} `pulumi:"writeBatchSize"`
	// Write batch timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	WriteBatchTimeout interface{} `pulumi:"writeBatchTimeout"`
}

// A copy activity Azure Table sink.
type AzureTableSinkResponse struct {
	// Azure Table default partition key value. Type: string (or Expression with resultType string).
	AzureTableDefaultPartitionKeyValue interface{} `pulumi:"azureTableDefaultPartitionKeyValue"`
	// Azure Table insert type. Type: string (or Expression with resultType string).
	AzureTableInsertType interface{} `pulumi:"azureTableInsertType"`
	// Azure Table partition key name. Type: string (or Expression with resultType string).
	AzureTablePartitionKeyName interface{} `pulumi:"azureTablePartitionKeyName"`
	// Azure Table row key name. Type: string (or Expression with resultType string).
	AzureTableRowKeyName interface{} `pulumi:"azureTableRowKeyName"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the sink data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// Sink retry count. Type: integer (or Expression with resultType integer).
	SinkRetryCount interface{} `pulumi:"sinkRetryCount"`
	// Sink retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SinkRetryWait interface{} `pulumi:"sinkRetryWait"`
	// Copy sink type.
	// Expected value is 'AzureTableSink'.
	Type string `pulumi:"type"`
	// Write batch size. Type: integer (or Expression with resultType integer), minimum: 0.
	WriteBatchSize interface{} `pulumi:"writeBatchSize"`
	// Write batch timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	WriteBatchTimeout interface{} `pulumi:"writeBatchTimeout"`
}

// A copy activity Azure Table source.
type AzureTableSource struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns interface{} `pulumi:"additionalColumns"`
	// Azure Table source ignore table not found. Type: boolean (or Expression with resultType boolean).
	AzureTableSourceIgnoreTableNotFound interface{} `pulumi:"azureTableSourceIgnoreTableNotFound"`
	// Azure Table source query. Type: string (or Expression with resultType string).
	AzureTableSourceQuery interface{} `pulumi:"azureTableSourceQuery"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	QueryTimeout interface{} `pulumi:"queryTimeout"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// Copy source type.
	// Expected value is 'AzureTableSource'.
	Type string `pulumi:"type"`
}

// A copy activity Azure Table source.
type AzureTableSourceResponse struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns interface{} `pulumi:"additionalColumns"`
	// Azure Table source ignore table not found. Type: boolean (or Expression with resultType boolean).
	AzureTableSourceIgnoreTableNotFound interface{} `pulumi:"azureTableSourceIgnoreTableNotFound"`
	// Azure Table source query. Type: string (or Expression with resultType string).
	AzureTableSourceQuery interface{} `pulumi:"azureTableSourceQuery"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	QueryTimeout interface{} `pulumi:"queryTimeout"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// Copy source type.
	// Expected value is 'AzureTableSource'.
	Type string `pulumi:"type"`
}

// The azure table storage linked service.
type AzureTableStorageLinkedService struct {
	// The Azure key vault secret reference of accountKey in connection string.
	AccountKey *AzureKeyVaultSecretReference `pulumi:"accountKey"`
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference `pulumi:"connectVia"`
	// The connection string. It is mutually exclusive with sasUri property. Type: string, SecureString or AzureKeyVaultSecretReference.
	ConnectionString interface{} `pulumi:"connectionString"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential *string `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// The Azure key vault secret reference of sasToken in sas uri.
	SasToken *AzureKeyVaultSecretReference `pulumi:"sasToken"`
	// SAS URI of the Azure Storage resource. It is mutually exclusive with connectionString property. Type: string, SecureString or AzureKeyVaultSecretReference.
	SasUri interface{} `pulumi:"sasUri"`
	// Type of linked service.
	// Expected value is 'AzureTableStorage'.
	Type string `pulumi:"type"`
}

// The azure table storage linked service.
type AzureTableStorageLinkedServiceResponse struct {
	// The Azure key vault secret reference of accountKey in connection string.
	AccountKey *AzureKeyVaultSecretReferenceResponse `pulumi:"accountKey"`
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReferenceResponse `pulumi:"connectVia"`
	// The connection string. It is mutually exclusive with sasUri property. Type: string, SecureString or AzureKeyVaultSecretReference.
	ConnectionString interface{} `pulumi:"connectionString"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential *string `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// The Azure key vault secret reference of sasToken in sas uri.
	SasToken *AzureKeyVaultSecretReferenceResponse `pulumi:"sasToken"`
	// SAS URI of the Azure Storage resource. It is mutually exclusive with connectionString property. Type: string, SecureString or AzureKeyVaultSecretReference.
	SasUri interface{} `pulumi:"sasUri"`
	// Type of linked service.
	// Expected value is 'AzureTableStorage'.
	Type string `pulumi:"type"`
}

// Binary dataset.
type BinaryDataset struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// The data compression method used for the binary dataset.
	Compression *DatasetCompression `pulumi:"compression"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReference `pulumi:"linkedServiceName"`
	// The location of the Binary storage.
	Location interface{} `pulumi:"location"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// Type of dataset.
	// Expected value is 'Binary'.
	Type string `pulumi:"type"`
}

// Binary dataset.
type BinaryDatasetResponse struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// The data compression method used for the binary dataset.
	Compression *DatasetCompressionResponse `pulumi:"compression"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetResponseFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceResponse `pulumi:"linkedServiceName"`
	// The location of the Binary storage.
	Location interface{} `pulumi:"location"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// Type of dataset.
	// Expected value is 'Binary'.
	Type string `pulumi:"type"`
}

// Binary read settings.
type BinaryReadSettings struct {
	// Compression settings.
	CompressionProperties interface{} `pulumi:"compressionProperties"`
	// The read setting type.
	// Expected value is 'BinaryReadSettings'.
	Type string `pulumi:"type"`
}

// Binary read settings.
type BinaryReadSettingsResponse struct {
	// Compression settings.
	CompressionProperties interface{} `pulumi:"compressionProperties"`
	// The read setting type.
	// Expected value is 'BinaryReadSettings'.
	Type string `pulumi:"type"`
}

// A copy activity Binary sink.
type BinarySink struct {
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the sink data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// Sink retry count. Type: integer (or Expression with resultType integer).
	SinkRetryCount interface{} `pulumi:"sinkRetryCount"`
	// Sink retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SinkRetryWait interface{} `pulumi:"sinkRetryWait"`
	// Binary store settings.
	StoreSettings interface{} `pulumi:"storeSettings"`
	// Copy sink type.
	// Expected value is 'BinarySink'.
	Type string `pulumi:"type"`
	// Write batch size. Type: integer (or Expression with resultType integer), minimum: 0.
	WriteBatchSize interface{} `pulumi:"writeBatchSize"`
	// Write batch timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	WriteBatchTimeout interface{} `pulumi:"writeBatchTimeout"`
}

// A copy activity Binary sink.
type BinarySinkResponse struct {
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the sink data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// Sink retry count. Type: integer (or Expression with resultType integer).
	SinkRetryCount interface{} `pulumi:"sinkRetryCount"`
	// Sink retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SinkRetryWait interface{} `pulumi:"sinkRetryWait"`
	// Binary store settings.
	StoreSettings interface{} `pulumi:"storeSettings"`
	// Copy sink type.
	// Expected value is 'BinarySink'.
	Type string `pulumi:"type"`
	// Write batch size. Type: integer (or Expression with resultType integer), minimum: 0.
	WriteBatchSize interface{} `pulumi:"writeBatchSize"`
	// Write batch timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	WriteBatchTimeout interface{} `pulumi:"writeBatchTimeout"`
}

// A copy activity Binary source.
type BinarySource struct {
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// Binary format settings.
	FormatSettings *BinaryReadSettings `pulumi:"formatSettings"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// Binary store settings.
	StoreSettings interface{} `pulumi:"storeSettings"`
	// Copy source type.
	// Expected value is 'BinarySource'.
	Type string `pulumi:"type"`
}

// A copy activity Binary source.
type BinarySourceResponse struct {
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// Binary format settings.
	FormatSettings *BinaryReadSettingsResponse `pulumi:"formatSettings"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// Binary store settings.
	StoreSettings interface{} `pulumi:"storeSettings"`
	// Copy source type.
	// Expected value is 'BinarySource'.
	Type string `pulumi:"type"`
}

// Trigger that runs every time a Blob event occurs.
type BlobEventsTrigger struct {
	// List of tags that can be used for describing the trigger.
	Annotations []interface{} `pulumi:"annotations"`
	// The blob path must begin with the pattern provided for trigger to fire. For example, '/records/blobs/december/' will only fire the trigger for blobs in the december folder under the records container. At least one of these must be provided: blobPathBeginsWith, blobPathEndsWith.
	BlobPathBeginsWith *string `pulumi:"blobPathBeginsWith"`
	// The blob path must end with the pattern provided for trigger to fire. For example, 'december/boxes.csv' will only fire the trigger for blobs named boxes in a december folder. At least one of these must be provided: blobPathBeginsWith, blobPathEndsWith.
	BlobPathEndsWith *string `pulumi:"blobPathEndsWith"`
	// Trigger description.
	Description *string `pulumi:"description"`
	// The type of events that cause this trigger to fire.
	Events []string `pulumi:"events"`
	// If set to true, blobs with zero bytes will be ignored.
	IgnoreEmptyBlobs *bool `pulumi:"ignoreEmptyBlobs"`
	// Pipelines that need to be started.
	Pipelines []TriggerPipelineReference `pulumi:"pipelines"`
	// The ARM resource ID of the Storage Account.
	Scope string `pulumi:"scope"`
	// Trigger type.
	// Expected value is 'BlobEventsTrigger'.
	Type string `pulumi:"type"`
}

// Trigger that runs every time a Blob event occurs.
type BlobEventsTriggerResponse struct {
	// List of tags that can be used for describing the trigger.
	Annotations []interface{} `pulumi:"annotations"`
	// The blob path must begin with the pattern provided for trigger to fire. For example, '/records/blobs/december/' will only fire the trigger for blobs in the december folder under the records container. At least one of these must be provided: blobPathBeginsWith, blobPathEndsWith.
	BlobPathBeginsWith *string `pulumi:"blobPathBeginsWith"`
	// The blob path must end with the pattern provided for trigger to fire. For example, 'december/boxes.csv' will only fire the trigger for blobs named boxes in a december folder. At least one of these must be provided: blobPathBeginsWith, blobPathEndsWith.
	BlobPathEndsWith *string `pulumi:"blobPathEndsWith"`
	// Trigger description.
	Description *string `pulumi:"description"`
	// The type of events that cause this trigger to fire.
	Events []string `pulumi:"events"`
	// If set to true, blobs with zero bytes will be ignored.
	IgnoreEmptyBlobs *bool `pulumi:"ignoreEmptyBlobs"`
	// Pipelines that need to be started.
	Pipelines []TriggerPipelineReferenceResponse `pulumi:"pipelines"`
	// Indicates if trigger is running or not. Updated when Start/Stop APIs are called on the Trigger.
	RuntimeState string `pulumi:"runtimeState"`
	// The ARM resource ID of the Storage Account.
	Scope string `pulumi:"scope"`
	// Trigger type.
	// Expected value is 'BlobEventsTrigger'.
	Type string `pulumi:"type"`
}

// A copy activity Azure Blob sink.
type BlobSink struct {
	// Blob writer add header. Type: boolean (or Expression with resultType boolean).
	BlobWriterAddHeader interface{} `pulumi:"blobWriterAddHeader"`
	// Blob writer date time format. Type: string (or Expression with resultType string).
	BlobWriterDateTimeFormat interface{} `pulumi:"blobWriterDateTimeFormat"`
	// Blob writer overwrite files. Type: boolean (or Expression with resultType boolean).
	BlobWriterOverwriteFiles interface{} `pulumi:"blobWriterOverwriteFiles"`
	// The type of copy behavior for copy sink.
	CopyBehavior interface{} `pulumi:"copyBehavior"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the sink data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// Specify the custom metadata to be added to sink data. Type: array of objects (or Expression with resultType array of objects).
	Metadata []MetadataItem `pulumi:"metadata"`
	// Sink retry count. Type: integer (or Expression with resultType integer).
	SinkRetryCount interface{} `pulumi:"sinkRetryCount"`
	// Sink retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SinkRetryWait interface{} `pulumi:"sinkRetryWait"`
	// Copy sink type.
	// Expected value is 'BlobSink'.
	Type string `pulumi:"type"`
	// Write batch size. Type: integer (or Expression with resultType integer), minimum: 0.
	WriteBatchSize interface{} `pulumi:"writeBatchSize"`
	// Write batch timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	WriteBatchTimeout interface{} `pulumi:"writeBatchTimeout"`
}

// A copy activity Azure Blob sink.
type BlobSinkResponse struct {
	// Blob writer add header. Type: boolean (or Expression with resultType boolean).
	BlobWriterAddHeader interface{} `pulumi:"blobWriterAddHeader"`
	// Blob writer date time format. Type: string (or Expression with resultType string).
	BlobWriterDateTimeFormat interface{} `pulumi:"blobWriterDateTimeFormat"`
	// Blob writer overwrite files. Type: boolean (or Expression with resultType boolean).
	BlobWriterOverwriteFiles interface{} `pulumi:"blobWriterOverwriteFiles"`
	// The type of copy behavior for copy sink.
	CopyBehavior interface{} `pulumi:"copyBehavior"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the sink data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// Specify the custom metadata to be added to sink data. Type: array of objects (or Expression with resultType array of objects).
	Metadata []MetadataItemResponse `pulumi:"metadata"`
	// Sink retry count. Type: integer (or Expression with resultType integer).
	SinkRetryCount interface{} `pulumi:"sinkRetryCount"`
	// Sink retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SinkRetryWait interface{} `pulumi:"sinkRetryWait"`
	// Copy sink type.
	// Expected value is 'BlobSink'.
	Type string `pulumi:"type"`
	// Write batch size. Type: integer (or Expression with resultType integer), minimum: 0.
	WriteBatchSize interface{} `pulumi:"writeBatchSize"`
	// Write batch timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	WriteBatchTimeout interface{} `pulumi:"writeBatchTimeout"`
}

// A copy activity Azure Blob source.
type BlobSource struct {
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// If true, files under the folder path will be read recursively. Default is true. Type: boolean (or Expression with resultType boolean).
	Recursive interface{} `pulumi:"recursive"`
	// Number of header lines to skip from each blob. Type: integer (or Expression with resultType integer).
	SkipHeaderLineCount interface{} `pulumi:"skipHeaderLineCount"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// Treat empty as null. Type: boolean (or Expression with resultType boolean).
	TreatEmptyAsNull interface{} `pulumi:"treatEmptyAsNull"`
	// Copy source type.
	// Expected value is 'BlobSource'.
	Type string `pulumi:"type"`
}

// A copy activity Azure Blob source.
type BlobSourceResponse struct {
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// If true, files under the folder path will be read recursively. Default is true. Type: boolean (or Expression with resultType boolean).
	Recursive interface{} `pulumi:"recursive"`
	// Number of header lines to skip from each blob. Type: integer (or Expression with resultType integer).
	SkipHeaderLineCount interface{} `pulumi:"skipHeaderLineCount"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// Treat empty as null. Type: boolean (or Expression with resultType boolean).
	TreatEmptyAsNull interface{} `pulumi:"treatEmptyAsNull"`
	// Copy source type.
	// Expected value is 'BlobSource'.
	Type string `pulumi:"type"`
}

// Trigger that runs every time the selected Blob container changes.
type BlobTrigger struct {
	// List of tags that can be used for describing the trigger.
	Annotations []interface{} `pulumi:"annotations"`
	// Trigger description.
	Description *string `pulumi:"description"`
	// The path of the container/folder that will trigger the pipeline.
	FolderPath string `pulumi:"folderPath"`
	// The Azure Storage linked service reference.
	LinkedService LinkedServiceReference `pulumi:"linkedService"`
	// The max number of parallel files to handle when it is triggered.
	MaxConcurrency int `pulumi:"maxConcurrency"`
	// Pipelines that need to be started.
	Pipelines []TriggerPipelineReference `pulumi:"pipelines"`
	// Trigger type.
	// Expected value is 'BlobTrigger'.
	Type string `pulumi:"type"`
}

// Trigger that runs every time the selected Blob container changes.
type BlobTriggerResponse struct {
	// List of tags that can be used for describing the trigger.
	Annotations []interface{} `pulumi:"annotations"`
	// Trigger description.
	Description *string `pulumi:"description"`
	// The path of the container/folder that will trigger the pipeline.
	FolderPath string `pulumi:"folderPath"`
	// The Azure Storage linked service reference.
	LinkedService LinkedServiceReferenceResponse `pulumi:"linkedService"`
	// The max number of parallel files to handle when it is triggered.
	MaxConcurrency int `pulumi:"maxConcurrency"`
	// Pipelines that need to be started.
	Pipelines []TriggerPipelineReferenceResponse `pulumi:"pipelines"`
	// Indicates if trigger is running or not. Updated when Start/Stop APIs are called on the Trigger.
	RuntimeState string `pulumi:"runtimeState"`
	// Trigger type.
	// Expected value is 'BlobTrigger'.
	Type string `pulumi:"type"`
}

// Managed Identity used for CMK.
type CMKIdentityDefinition struct {
	// The resource id of the user assigned identity to authenticate to customer's key vault.
	UserAssignedIdentity *string `pulumi:"userAssignedIdentity"`
}

// CMKIdentityDefinitionInput is an input type that accepts CMKIdentityDefinitionArgs and CMKIdentityDefinitionOutput values.
// You can construct a concrete instance of `CMKIdentityDefinitionInput` via:
//
//	CMKIdentityDefinitionArgs{...}
type CMKIdentityDefinitionInput interface {
	pulumi.Input

	ToCMKIdentityDefinitionOutput() CMKIdentityDefinitionOutput
	ToCMKIdentityDefinitionOutputWithContext(context.Context) CMKIdentityDefinitionOutput
}

// Managed Identity used for CMK.
type CMKIdentityDefinitionArgs struct {
	// The resource id of the user assigned identity to authenticate to customer's key vault.
	UserAssignedIdentity pulumi.StringPtrInput `pulumi:"userAssignedIdentity"`
}

func (CMKIdentityDefinitionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CMKIdentityDefinition)(nil)).Elem()
}

func (i CMKIdentityDefinitionArgs) ToCMKIdentityDefinitionOutput() CMKIdentityDefinitionOutput {
	return i.ToCMKIdentityDefinitionOutputWithContext(context.Background())
}

func (i CMKIdentityDefinitionArgs) ToCMKIdentityDefinitionOutputWithContext(ctx context.Context) CMKIdentityDefinitionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CMKIdentityDefinitionOutput)
}

func (i CMKIdentityDefinitionArgs) ToCMKIdentityDefinitionPtrOutput() CMKIdentityDefinitionPtrOutput {
	return i.ToCMKIdentityDefinitionPtrOutputWithContext(context.Background())
}

func (i CMKIdentityDefinitionArgs) ToCMKIdentityDefinitionPtrOutputWithContext(ctx context.Context) CMKIdentityDefinitionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CMKIdentityDefinitionOutput).ToCMKIdentityDefinitionPtrOutputWithContext(ctx)
}

// CMKIdentityDefinitionPtrInput is an input type that accepts CMKIdentityDefinitionArgs, CMKIdentityDefinitionPtr and CMKIdentityDefinitionPtrOutput values.
// You can construct a concrete instance of `CMKIdentityDefinitionPtrInput` via:
//
//	        CMKIdentityDefinitionArgs{...}
//
//	or:
//
//	        nil
type CMKIdentityDefinitionPtrInput interface {
	pulumi.Input

	ToCMKIdentityDefinitionPtrOutput() CMKIdentityDefinitionPtrOutput
	ToCMKIdentityDefinitionPtrOutputWithContext(context.Context) CMKIdentityDefinitionPtrOutput
}

type cmkidentityDefinitionPtrType CMKIdentityDefinitionArgs

func CMKIdentityDefinitionPtr(v *CMKIdentityDefinitionArgs) CMKIdentityDefinitionPtrInput {
	return (*cmkidentityDefinitionPtrType)(v)
}

func (*cmkidentityDefinitionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CMKIdentityDefinition)(nil)).Elem()
}

func (i *cmkidentityDefinitionPtrType) ToCMKIdentityDefinitionPtrOutput() CMKIdentityDefinitionPtrOutput {
	return i.ToCMKIdentityDefinitionPtrOutputWithContext(context.Background())
}

func (i *cmkidentityDefinitionPtrType) ToCMKIdentityDefinitionPtrOutputWithContext(ctx context.Context) CMKIdentityDefinitionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CMKIdentityDefinitionPtrOutput)
}

// Managed Identity used for CMK.
type CMKIdentityDefinitionOutput struct{ *pulumi.OutputState }

func (CMKIdentityDefinitionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CMKIdentityDefinition)(nil)).Elem()
}

func (o CMKIdentityDefinitionOutput) ToCMKIdentityDefinitionOutput() CMKIdentityDefinitionOutput {
	return o
}

func (o CMKIdentityDefinitionOutput) ToCMKIdentityDefinitionOutputWithContext(ctx context.Context) CMKIdentityDefinitionOutput {
	return o
}

func (o CMKIdentityDefinitionOutput) ToCMKIdentityDefinitionPtrOutput() CMKIdentityDefinitionPtrOutput {
	return o.ToCMKIdentityDefinitionPtrOutputWithContext(context.Background())
}

func (o CMKIdentityDefinitionOutput) ToCMKIdentityDefinitionPtrOutputWithContext(ctx context.Context) CMKIdentityDefinitionPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v CMKIdentityDefinition) *CMKIdentityDefinition {
		return &v
	}).(CMKIdentityDefinitionPtrOutput)
}

// The resource id of the user assigned identity to authenticate to customer's key vault.
func (o CMKIdentityDefinitionOutput) UserAssignedIdentity() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CMKIdentityDefinition) *string { return v.UserAssignedIdentity }).(pulumi.StringPtrOutput)
}

type CMKIdentityDefinitionPtrOutput struct{ *pulumi.OutputState }

func (CMKIdentityDefinitionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CMKIdentityDefinition)(nil)).Elem()
}

func (o CMKIdentityDefinitionPtrOutput) ToCMKIdentityDefinitionPtrOutput() CMKIdentityDefinitionPtrOutput {
	return o
}

func (o CMKIdentityDefinitionPtrOutput) ToCMKIdentityDefinitionPtrOutputWithContext(ctx context.Context) CMKIdentityDefinitionPtrOutput {
	return o
}

func (o CMKIdentityDefinitionPtrOutput) Elem() CMKIdentityDefinitionOutput {
	return o.ApplyT(func(v *CMKIdentityDefinition) CMKIdentityDefinition {
		if v != nil {
			return *v
		}
		var ret CMKIdentityDefinition
		return ret
	}).(CMKIdentityDefinitionOutput)
}

// The resource id of the user assigned identity to authenticate to customer's key vault.
func (o CMKIdentityDefinitionPtrOutput) UserAssignedIdentity() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CMKIdentityDefinition) *string {
		if v == nil {
			return nil
		}
		return v.UserAssignedIdentity
	}).(pulumi.StringPtrOutput)
}

// Managed Identity used for CMK.
type CMKIdentityDefinitionResponse struct {
	// The resource id of the user assigned identity to authenticate to customer's key vault.
	UserAssignedIdentity *string `pulumi:"userAssignedIdentity"`
}

// Managed Identity used for CMK.
type CMKIdentityDefinitionResponseOutput struct{ *pulumi.OutputState }

func (CMKIdentityDefinitionResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CMKIdentityDefinitionResponse)(nil)).Elem()
}

func (o CMKIdentityDefinitionResponseOutput) ToCMKIdentityDefinitionResponseOutput() CMKIdentityDefinitionResponseOutput {
	return o
}

func (o CMKIdentityDefinitionResponseOutput) ToCMKIdentityDefinitionResponseOutputWithContext(ctx context.Context) CMKIdentityDefinitionResponseOutput {
	return o
}

// The resource id of the user assigned identity to authenticate to customer's key vault.
func (o CMKIdentityDefinitionResponseOutput) UserAssignedIdentity() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CMKIdentityDefinitionResponse) *string { return v.UserAssignedIdentity }).(pulumi.StringPtrOutput)
}

type CMKIdentityDefinitionResponsePtrOutput struct{ *pulumi.OutputState }

func (CMKIdentityDefinitionResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CMKIdentityDefinitionResponse)(nil)).Elem()
}

func (o CMKIdentityDefinitionResponsePtrOutput) ToCMKIdentityDefinitionResponsePtrOutput() CMKIdentityDefinitionResponsePtrOutput {
	return o
}

func (o CMKIdentityDefinitionResponsePtrOutput) ToCMKIdentityDefinitionResponsePtrOutputWithContext(ctx context.Context) CMKIdentityDefinitionResponsePtrOutput {
	return o
}

func (o CMKIdentityDefinitionResponsePtrOutput) Elem() CMKIdentityDefinitionResponseOutput {
	return o.ApplyT(func(v *CMKIdentityDefinitionResponse) CMKIdentityDefinitionResponse {
		if v != nil {
			return *v
		}
		var ret CMKIdentityDefinitionResponse
		return ret
	}).(CMKIdentityDefinitionResponseOutput)
}

// The resource id of the user assigned identity to authenticate to customer's key vault.
func (o CMKIdentityDefinitionResponsePtrOutput) UserAssignedIdentity() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CMKIdentityDefinitionResponse) *string {
		if v == nil {
			return nil
		}
		return v.UserAssignedIdentity
	}).(pulumi.StringPtrOutput)
}

// Linked service for Cassandra data source.
type CassandraLinkedService struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// AuthenticationType to be used for connection. Type: string (or Expression with resultType string).
	AuthenticationType interface{} `pulumi:"authenticationType"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference `pulumi:"connectVia"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential interface{} `pulumi:"encryptedCredential"`
	// Host name for connection. Type: string (or Expression with resultType string).
	Host interface{} `pulumi:"host"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Password for authentication.
	Password interface{} `pulumi:"password"`
	// The port for the connection. Type: integer (or Expression with resultType integer).
	Port interface{} `pulumi:"port"`
	// Type of linked service.
	// Expected value is 'Cassandra'.
	Type string `pulumi:"type"`
	// Username for authentication. Type: string (or Expression with resultType string).
	Username interface{} `pulumi:"username"`
}

// Linked service for Cassandra data source.
type CassandraLinkedServiceResponse struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// AuthenticationType to be used for connection. Type: string (or Expression with resultType string).
	AuthenticationType interface{} `pulumi:"authenticationType"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReferenceResponse `pulumi:"connectVia"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential interface{} `pulumi:"encryptedCredential"`
	// Host name for connection. Type: string (or Expression with resultType string).
	Host interface{} `pulumi:"host"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Password for authentication.
	Password interface{} `pulumi:"password"`
	// The port for the connection. Type: integer (or Expression with resultType integer).
	Port interface{} `pulumi:"port"`
	// Type of linked service.
	// Expected value is 'Cassandra'.
	Type string `pulumi:"type"`
	// Username for authentication. Type: string (or Expression with resultType string).
	Username interface{} `pulumi:"username"`
}

// A copy activity source for a Cassandra database.
type CassandraSource struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns interface{} `pulumi:"additionalColumns"`
	// The consistency level specifies how many Cassandra servers must respond to a read request before returning data to the client application. Cassandra checks the specified number of Cassandra servers for data to satisfy the read request. Must be one of cassandraSourceReadConsistencyLevels. The default value is 'ONE'. It is case-insensitive.
	ConsistencyLevel *string `pulumi:"consistencyLevel"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// Database query. Should be a SQL-92 query expression or Cassandra Query Language (CQL) command. Type: string (or Expression with resultType string).
	Query interface{} `pulumi:"query"`
	// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	QueryTimeout interface{} `pulumi:"queryTimeout"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// Copy source type.
	// Expected value is 'CassandraSource'.
	Type string `pulumi:"type"`
}

// A copy activity source for a Cassandra database.
type CassandraSourceResponse struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns interface{} `pulumi:"additionalColumns"`
	// The consistency level specifies how many Cassandra servers must respond to a read request before returning data to the client application. Cassandra checks the specified number of Cassandra servers for data to satisfy the read request. Must be one of cassandraSourceReadConsistencyLevels. The default value is 'ONE'. It is case-insensitive.
	ConsistencyLevel *string `pulumi:"consistencyLevel"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// Database query. Should be a SQL-92 query expression or Cassandra Query Language (CQL) command. Type: string (or Expression with resultType string).
	Query interface{} `pulumi:"query"`
	// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	QueryTimeout interface{} `pulumi:"queryTimeout"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// Copy source type.
	// Expected value is 'CassandraSource'.
	Type string `pulumi:"type"`
}

// The Cassandra database dataset.
type CassandraTableDataset struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetFolder `pulumi:"folder"`
	// The keyspace of the Cassandra database. Type: string (or Expression with resultType string).
	Keyspace interface{} `pulumi:"keyspace"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReference `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// The table name of the Cassandra database. Type: string (or Expression with resultType string).
	TableName interface{} `pulumi:"tableName"`
	// Type of dataset.
	// Expected value is 'CassandraTable'.
	Type string `pulumi:"type"`
}

// The Cassandra database dataset.
type CassandraTableDatasetResponse struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetResponseFolder `pulumi:"folder"`
	// The keyspace of the Cassandra database. Type: string (or Expression with resultType string).
	Keyspace interface{} `pulumi:"keyspace"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceResponse `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// The table name of the Cassandra database. Type: string (or Expression with resultType string).
	TableName interface{} `pulumi:"tableName"`
	// Type of dataset.
	// Expected value is 'CassandraTable'.
	Type string `pulumi:"type"`
}

// Trigger that allows the referenced pipeline to depend on other pipeline runs based on runDimension Name/Value pairs. Upstream pipelines should declare the same runDimension Name and their runs should have the values for those runDimensions. The referenced pipeline run would be triggered if the values for the runDimension match for all upstream pipeline runs.
type ChainingTrigger struct {
	// List of tags that can be used for describing the trigger.
	Annotations []interface{} `pulumi:"annotations"`
	// Upstream Pipelines.
	DependsOn []PipelineReference `pulumi:"dependsOn"`
	// Trigger description.
	Description *string `pulumi:"description"`
	// Pipeline for which runs are created when all upstream pipelines complete successfully.
	Pipeline TriggerPipelineReference `pulumi:"pipeline"`
	// Run Dimension property that needs to be emitted by upstream pipelines.
	RunDimension string `pulumi:"runDimension"`
	// Trigger type.
	// Expected value is 'ChainingTrigger'.
	Type string `pulumi:"type"`
}

// Trigger that allows the referenced pipeline to depend on other pipeline runs based on runDimension Name/Value pairs. Upstream pipelines should declare the same runDimension Name and their runs should have the values for those runDimensions. The referenced pipeline run would be triggered if the values for the runDimension match for all upstream pipeline runs.
type ChainingTriggerResponse struct {
	// List of tags that can be used for describing the trigger.
	Annotations []interface{} `pulumi:"annotations"`
	// Upstream Pipelines.
	DependsOn []PipelineReferenceResponse `pulumi:"dependsOn"`
	// Trigger description.
	Description *string `pulumi:"description"`
	// Pipeline for which runs are created when all upstream pipelines complete successfully.
	Pipeline TriggerPipelineReferenceResponse `pulumi:"pipeline"`
	// Run Dimension property that needs to be emitted by upstream pipelines.
	RunDimension string `pulumi:"runDimension"`
	// Indicates if trigger is running or not. Updated when Start/Stop APIs are called on the Trigger.
	RuntimeState string `pulumi:"runtimeState"`
	// Trigger type.
	// Expected value is 'ChainingTrigger'.
	Type string `pulumi:"type"`
}

// The custom setup of running cmdkey commands.
type CmdkeySetup struct {
	// The password of data source access.
	Password interface{} `pulumi:"password"`
	// The server name of data source access.
	TargetName interface{} `pulumi:"targetName"`
	// The type of custom setup.
	// Expected value is 'CmdkeySetup'.
	Type string `pulumi:"type"`
	// The user name of data source access.
	UserName interface{} `pulumi:"userName"`
}

// The custom setup of running cmdkey commands.
type CmdkeySetupResponse struct {
	// The password of data source access.
	Password interface{} `pulumi:"password"`
	// The server name of data source access.
	TargetName interface{} `pulumi:"targetName"`
	// The type of custom setup.
	// Expected value is 'CmdkeySetup'.
	Type string `pulumi:"type"`
	// The user name of data source access.
	UserName interface{} `pulumi:"userName"`
}

// The Common Data Service for Apps entity dataset.
type CommonDataServiceForAppsEntityDataset struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The logical name of the entity. Type: string (or Expression with resultType string).
	EntityName interface{} `pulumi:"entityName"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReference `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// Type of dataset.
	// Expected value is 'CommonDataServiceForAppsEntity'.
	Type string `pulumi:"type"`
}

// The Common Data Service for Apps entity dataset.
type CommonDataServiceForAppsEntityDatasetResponse struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The logical name of the entity. Type: string (or Expression with resultType string).
	EntityName interface{} `pulumi:"entityName"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetResponseFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceResponse `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// Type of dataset.
	// Expected value is 'CommonDataServiceForAppsEntity'.
	Type string `pulumi:"type"`
}

// Common Data Service for Apps linked service.
type CommonDataServiceForAppsLinkedService struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The authentication type to connect to Common Data Service for Apps server. 'Office365' for online scenario, 'Ifd' for on-premises with Ifd scenario. 'AADServicePrincipal' for Server-To-Server authentication in online scenario. Type: string (or Expression with resultType string).
	AuthenticationType interface{} `pulumi:"authenticationType"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference `pulumi:"connectVia"`
	// The deployment type of the Common Data Service for Apps instance. 'Online' for Common Data Service for Apps Online and 'OnPremisesWithIfd' for Common Data Service for Apps on-premises with Ifd. Type: string (or Expression with resultType string).
	DeploymentType interface{} `pulumi:"deploymentType"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential interface{} `pulumi:"encryptedCredential"`
	// The host name of the on-premises Common Data Service for Apps server. The property is required for on-prem and not allowed for online. Type: string (or Expression with resultType string).
	HostName interface{} `pulumi:"hostName"`
	// The organization name of the Common Data Service for Apps instance. The property is required for on-prem and required for online when there are more than one Common Data Service for Apps instances associated with the user. Type: string (or Expression with resultType string).
	OrganizationName interface{} `pulumi:"organizationName"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Password to access the Common Data Service for Apps instance.
	Password interface{} `pulumi:"password"`
	// The port of on-premises Common Data Service for Apps server. The property is required for on-prem and not allowed for online. Default is 443. Type: integer (or Expression with resultType integer), minimum: 0.
	Port interface{} `pulumi:"port"`
	// The credential of the service principal object in Azure Active Directory. If servicePrincipalCredentialType is 'ServicePrincipalKey', servicePrincipalCredential can be SecureString or AzureKeyVaultSecretReference. If servicePrincipalCredentialType is 'ServicePrincipalCert', servicePrincipalCredential can only be AzureKeyVaultSecretReference.
	ServicePrincipalCredential interface{} `pulumi:"servicePrincipalCredential"`
	// The service principal credential type to use in Server-To-Server authentication. 'ServicePrincipalKey' for key/secret, 'ServicePrincipalCert' for certificate. Type: string (or Expression with resultType string).
	ServicePrincipalCredentialType interface{} `pulumi:"servicePrincipalCredentialType"`
	// The client ID of the application in Azure Active Directory used for Server-To-Server authentication. Type: string (or Expression with resultType string).
	ServicePrincipalId interface{} `pulumi:"servicePrincipalId"`
	// The URL to the Microsoft Common Data Service for Apps server. The property is required for on-line and not allowed for on-prem. Type: string (or Expression with resultType string).
	ServiceUri interface{} `pulumi:"serviceUri"`
	// Type of linked service.
	// Expected value is 'CommonDataServiceForApps'.
	Type string `pulumi:"type"`
	// User name to access the Common Data Service for Apps instance. Type: string (or Expression with resultType string).
	Username interface{} `pulumi:"username"`
}

// Common Data Service for Apps linked service.
type CommonDataServiceForAppsLinkedServiceResponse struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The authentication type to connect to Common Data Service for Apps server. 'Office365' for online scenario, 'Ifd' for on-premises with Ifd scenario. 'AADServicePrincipal' for Server-To-Server authentication in online scenario. Type: string (or Expression with resultType string).
	AuthenticationType interface{} `pulumi:"authenticationType"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReferenceResponse `pulumi:"connectVia"`
	// The deployment type of the Common Data Service for Apps instance. 'Online' for Common Data Service for Apps Online and 'OnPremisesWithIfd' for Common Data Service for Apps on-premises with Ifd. Type: string (or Expression with resultType string).
	DeploymentType interface{} `pulumi:"deploymentType"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential interface{} `pulumi:"encryptedCredential"`
	// The host name of the on-premises Common Data Service for Apps server. The property is required for on-prem and not allowed for online. Type: string (or Expression with resultType string).
	HostName interface{} `pulumi:"hostName"`
	// The organization name of the Common Data Service for Apps instance. The property is required for on-prem and required for online when there are more than one Common Data Service for Apps instances associated with the user. Type: string (or Expression with resultType string).
	OrganizationName interface{} `pulumi:"organizationName"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Password to access the Common Data Service for Apps instance.
	Password interface{} `pulumi:"password"`
	// The port of on-premises Common Data Service for Apps server. The property is required for on-prem and not allowed for online. Default is 443. Type: integer (or Expression with resultType integer), minimum: 0.
	Port interface{} `pulumi:"port"`
	// The credential of the service principal object in Azure Active Directory. If servicePrincipalCredentialType is 'ServicePrincipalKey', servicePrincipalCredential can be SecureString or AzureKeyVaultSecretReference. If servicePrincipalCredentialType is 'ServicePrincipalCert', servicePrincipalCredential can only be AzureKeyVaultSecretReference.
	ServicePrincipalCredential interface{} `pulumi:"servicePrincipalCredential"`
	// The service principal credential type to use in Server-To-Server authentication. 'ServicePrincipalKey' for key/secret, 'ServicePrincipalCert' for certificate. Type: string (or Expression with resultType string).
	ServicePrincipalCredentialType interface{} `pulumi:"servicePrincipalCredentialType"`
	// The client ID of the application in Azure Active Directory used for Server-To-Server authentication. Type: string (or Expression with resultType string).
	ServicePrincipalId interface{} `pulumi:"servicePrincipalId"`
	// The URL to the Microsoft Common Data Service for Apps server. The property is required for on-line and not allowed for on-prem. Type: string (or Expression with resultType string).
	ServiceUri interface{} `pulumi:"serviceUri"`
	// Type of linked service.
	// Expected value is 'CommonDataServiceForApps'.
	Type string `pulumi:"type"`
	// User name to access the Common Data Service for Apps instance. Type: string (or Expression with resultType string).
	Username interface{} `pulumi:"username"`
}

// A copy activity Common Data Service for Apps sink.
type CommonDataServiceForAppsSink struct {
	// The logical name of the alternate key which will be used when upserting records. Type: string (or Expression with resultType string).
	AlternateKeyName interface{} `pulumi:"alternateKeyName"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The flag indicating whether to ignore null values from input dataset (except key fields) during write operation. Default is false. Type: boolean (or Expression with resultType boolean).
	IgnoreNullValues interface{} `pulumi:"ignoreNullValues"`
	// The maximum concurrent connection count for the sink data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// Sink retry count. Type: integer (or Expression with resultType integer).
	SinkRetryCount interface{} `pulumi:"sinkRetryCount"`
	// Sink retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SinkRetryWait interface{} `pulumi:"sinkRetryWait"`
	// Copy sink type.
	// Expected value is 'CommonDataServiceForAppsSink'.
	Type string `pulumi:"type"`
	// Write batch size. Type: integer (or Expression with resultType integer), minimum: 0.
	WriteBatchSize interface{} `pulumi:"writeBatchSize"`
	// Write batch timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	WriteBatchTimeout interface{} `pulumi:"writeBatchTimeout"`
	// The write behavior for the operation.
	WriteBehavior string `pulumi:"writeBehavior"`
}

// A copy activity Common Data Service for Apps sink.
type CommonDataServiceForAppsSinkResponse struct {
	// The logical name of the alternate key which will be used when upserting records. Type: string (or Expression with resultType string).
	AlternateKeyName interface{} `pulumi:"alternateKeyName"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The flag indicating whether to ignore null values from input dataset (except key fields) during write operation. Default is false. Type: boolean (or Expression with resultType boolean).
	IgnoreNullValues interface{} `pulumi:"ignoreNullValues"`
	// The maximum concurrent connection count for the sink data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// Sink retry count. Type: integer (or Expression with resultType integer).
	SinkRetryCount interface{} `pulumi:"sinkRetryCount"`
	// Sink retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SinkRetryWait interface{} `pulumi:"sinkRetryWait"`
	// Copy sink type.
	// Expected value is 'CommonDataServiceForAppsSink'.
	Type string `pulumi:"type"`
	// Write batch size. Type: integer (or Expression with resultType integer), minimum: 0.
	WriteBatchSize interface{} `pulumi:"writeBatchSize"`
	// Write batch timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	WriteBatchTimeout interface{} `pulumi:"writeBatchTimeout"`
	// The write behavior for the operation.
	WriteBehavior string `pulumi:"writeBehavior"`
}

// A copy activity Common Data Service for Apps source.
type CommonDataServiceForAppsSource struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns interface{} `pulumi:"additionalColumns"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// FetchXML is a proprietary query language that is used in Microsoft Common Data Service for Apps (online & on-premises). Type: string (or Expression with resultType string).
	Query interface{} `pulumi:"query"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// Copy source type.
	// Expected value is 'CommonDataServiceForAppsSource'.
	Type string `pulumi:"type"`
}

// A copy activity Common Data Service for Apps source.
type CommonDataServiceForAppsSourceResponse struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns interface{} `pulumi:"additionalColumns"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// FetchXML is a proprietary query language that is used in Microsoft Common Data Service for Apps (online & on-premises). Type: string (or Expression with resultType string).
	Query interface{} `pulumi:"query"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// Copy source type.
	// Expected value is 'CommonDataServiceForAppsSource'.
	Type string `pulumi:"type"`
}

// The custom setup of installing 3rd party components.
type ComponentSetup struct {
	// The name of the 3rd party component.
	ComponentName string `pulumi:"componentName"`
	// The license key to activate the component.
	LicenseKey interface{} `pulumi:"licenseKey"`
	// The type of custom setup.
	// Expected value is 'ComponentSetup'.
	Type string `pulumi:"type"`
}

// The custom setup of installing 3rd party components.
type ComponentSetupResponse struct {
	// The name of the 3rd party component.
	ComponentName string `pulumi:"componentName"`
	// The license key to activate the component.
	LicenseKey interface{} `pulumi:"licenseKey"`
	// The type of custom setup.
	// Expected value is 'ComponentSetup'.
	Type string `pulumi:"type"`
}

// Concur Service linked service.
type ConcurLinkedService struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// Application client_id supplied by Concur App Management.
	ClientId interface{} `pulumi:"clientId"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference `pulumi:"connectVia"`
	// Properties used to connect to Concur. It is mutually exclusive with any other properties in the linked service. Type: object.
	ConnectionProperties interface{} `pulumi:"connectionProperties"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential interface{} `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// The password corresponding to the user name that you provided in the username field.
	Password interface{} `pulumi:"password"`
	// Type of linked service.
	// Expected value is 'Concur'.
	Type string `pulumi:"type"`
	// Specifies whether the data source endpoints are encrypted using HTTPS. The default value is true.
	UseEncryptedEndpoints interface{} `pulumi:"useEncryptedEndpoints"`
	// Specifies whether to require the host name in the server's certificate to match the host name of the server when connecting over SSL. The default value is true.
	UseHostVerification interface{} `pulumi:"useHostVerification"`
	// Specifies whether to verify the identity of the server when connecting over SSL. The default value is true.
	UsePeerVerification interface{} `pulumi:"usePeerVerification"`
	// The user name that you use to access Concur Service.
	Username interface{} `pulumi:"username"`
}

// Concur Service linked service.
type ConcurLinkedServiceResponse struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// Application client_id supplied by Concur App Management.
	ClientId interface{} `pulumi:"clientId"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReferenceResponse `pulumi:"connectVia"`
	// Properties used to connect to Concur. It is mutually exclusive with any other properties in the linked service. Type: object.
	ConnectionProperties interface{} `pulumi:"connectionProperties"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential interface{} `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// The password corresponding to the user name that you provided in the username field.
	Password interface{} `pulumi:"password"`
	// Type of linked service.
	// Expected value is 'Concur'.
	Type string `pulumi:"type"`
	// Specifies whether the data source endpoints are encrypted using HTTPS. The default value is true.
	UseEncryptedEndpoints interface{} `pulumi:"useEncryptedEndpoints"`
	// Specifies whether to require the host name in the server's certificate to match the host name of the server when connecting over SSL. The default value is true.
	UseHostVerification interface{} `pulumi:"useHostVerification"`
	// Specifies whether to verify the identity of the server when connecting over SSL. The default value is true.
	UsePeerVerification interface{} `pulumi:"usePeerVerification"`
	// The user name that you use to access Concur Service.
	Username interface{} `pulumi:"username"`
}

// Concur Service dataset.
type ConcurObjectDataset struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReference `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// The table name. Type: string (or Expression with resultType string).
	TableName interface{} `pulumi:"tableName"`
	// Type of dataset.
	// Expected value is 'ConcurObject'.
	Type string `pulumi:"type"`
}

// Concur Service dataset.
type ConcurObjectDatasetResponse struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetResponseFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceResponse `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// The table name. Type: string (or Expression with resultType string).
	TableName interface{} `pulumi:"tableName"`
	// Type of dataset.
	// Expected value is 'ConcurObject'.
	Type string `pulumi:"type"`
}

// A copy activity Concur Service source.
type ConcurSource struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns interface{} `pulumi:"additionalColumns"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// A query to retrieve data from source. Type: string (or Expression with resultType string).
	Query interface{} `pulumi:"query"`
	// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	QueryTimeout interface{} `pulumi:"queryTimeout"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// Copy source type.
	// Expected value is 'ConcurSource'.
	Type string `pulumi:"type"`
}

// A copy activity Concur Service source.
type ConcurSourceResponse struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns interface{} `pulumi:"additionalColumns"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// A query to retrieve data from source. Type: string (or Expression with resultType string).
	Query interface{} `pulumi:"query"`
	// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	QueryTimeout interface{} `pulumi:"queryTimeout"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// Copy source type.
	// Expected value is 'ConcurSource'.
	Type string `pulumi:"type"`
}

// The connection state of a managed private endpoint
type ConnectionStatePropertiesResponse struct {
	// The actions required on the managed private endpoint
	ActionsRequired string `pulumi:"actionsRequired"`
	// The managed private endpoint description
	Description string `pulumi:"description"`
	// The approval status
	Status string `pulumi:"status"`
}

// The connection state of a managed private endpoint
type ConnectionStatePropertiesResponseOutput struct{ *pulumi.OutputState }

func (ConnectionStatePropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectionStatePropertiesResponse)(nil)).Elem()
}

func (o ConnectionStatePropertiesResponseOutput) ToConnectionStatePropertiesResponseOutput() ConnectionStatePropertiesResponseOutput {
	return o
}

func (o ConnectionStatePropertiesResponseOutput) ToConnectionStatePropertiesResponseOutputWithContext(ctx context.Context) ConnectionStatePropertiesResponseOutput {
	return o
}

// The actions required on the managed private endpoint
func (o ConnectionStatePropertiesResponseOutput) ActionsRequired() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectionStatePropertiesResponse) string { return v.ActionsRequired }).(pulumi.StringOutput)
}

// The managed private endpoint description
func (o ConnectionStatePropertiesResponseOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectionStatePropertiesResponse) string { return v.Description }).(pulumi.StringOutput)
}

// The approval status
func (o ConnectionStatePropertiesResponseOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectionStatePropertiesResponse) string { return v.Status }).(pulumi.StringOutput)
}

type ConnectionStatePropertiesResponsePtrOutput struct{ *pulumi.OutputState }

func (ConnectionStatePropertiesResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ConnectionStatePropertiesResponse)(nil)).Elem()
}

func (o ConnectionStatePropertiesResponsePtrOutput) ToConnectionStatePropertiesResponsePtrOutput() ConnectionStatePropertiesResponsePtrOutput {
	return o
}

func (o ConnectionStatePropertiesResponsePtrOutput) ToConnectionStatePropertiesResponsePtrOutputWithContext(ctx context.Context) ConnectionStatePropertiesResponsePtrOutput {
	return o
}

func (o ConnectionStatePropertiesResponsePtrOutput) Elem() ConnectionStatePropertiesResponseOutput {
	return o.ApplyT(func(v *ConnectionStatePropertiesResponse) ConnectionStatePropertiesResponse {
		if v != nil {
			return *v
		}
		var ret ConnectionStatePropertiesResponse
		return ret
	}).(ConnectionStatePropertiesResponseOutput)
}

// The actions required on the managed private endpoint
func (o ConnectionStatePropertiesResponsePtrOutput) ActionsRequired() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConnectionStatePropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return &v.ActionsRequired
	}).(pulumi.StringPtrOutput)
}

// The managed private endpoint description
func (o ConnectionStatePropertiesResponsePtrOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConnectionStatePropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Description
	}).(pulumi.StringPtrOutput)
}

// The approval status
func (o ConnectionStatePropertiesResponsePtrOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConnectionStatePropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Status
	}).(pulumi.StringPtrOutput)
}

// Base class for all control activities like IfCondition, ForEach , Until.
type ControlActivity struct {
	// Activity depends on condition.
	DependsOn []ActivityDependency `pulumi:"dependsOn"`
	// Activity description.
	Description *string `pulumi:"description"`
	// Activity name.
	Name string `pulumi:"name"`
	// Type of activity.
	// Expected value is 'Container'.
	Type string `pulumi:"type"`
	// Activity user properties.
	UserProperties []UserProperty `pulumi:"userProperties"`
}

// Base class for all control activities like IfCondition, ForEach , Until.
type ControlActivityResponse struct {
	// Activity depends on condition.
	DependsOn []ActivityDependencyResponse `pulumi:"dependsOn"`
	// Activity description.
	Description *string `pulumi:"description"`
	// Activity name.
	Name string `pulumi:"name"`
	// Type of activity.
	// Expected value is 'Container'.
	Type string `pulumi:"type"`
	// Activity user properties.
	UserProperties []UserPropertyResponse `pulumi:"userProperties"`
}

// Copy activity.
type CopyActivity struct {
	// Maximum number of data integration units that can be used to perform this data movement. Type: integer (or Expression with resultType integer), minimum: 0.
	DataIntegrationUnits interface{} `pulumi:"dataIntegrationUnits"`
	// Activity depends on condition.
	DependsOn []ActivityDependency `pulumi:"dependsOn"`
	// Activity description.
	Description *string `pulumi:"description"`
	// Whether to skip incompatible row. Default value is false. Type: boolean (or Expression with resultType boolean).
	EnableSkipIncompatibleRow interface{} `pulumi:"enableSkipIncompatibleRow"`
	// Specifies whether to copy data via an interim staging. Default value is false. Type: boolean (or Expression with resultType boolean).
	EnableStaging interface{} `pulumi:"enableStaging"`
	// List of inputs for the activity.
	Inputs []DatasetReference `pulumi:"inputs"`
	// Linked service reference.
	LinkedServiceName *LinkedServiceReference `pulumi:"linkedServiceName"`
	// Log settings customer needs provide when enabling log.
	LogSettings *LogSettings `pulumi:"logSettings"`
	// (Deprecated. Please use LogSettings) Log storage settings customer need to provide when enabling session log.
	LogStorageSettings *LogStorageSettings `pulumi:"logStorageSettings"`
	// Activity name.
	Name string `pulumi:"name"`
	// List of outputs for the activity.
	Outputs []DatasetReference `pulumi:"outputs"`
	// Maximum number of concurrent sessions opened on the source or sink to avoid overloading the data store. Type: integer (or Expression with resultType integer), minimum: 0.
	ParallelCopies interface{} `pulumi:"parallelCopies"`
	// Activity policy.
	Policy *ActivityPolicy `pulumi:"policy"`
	// Preserve rules.
	Preserve []interface{} `pulumi:"preserve"`
	// Preserve Rules.
	PreserveRules []interface{} `pulumi:"preserveRules"`
	// Redirect incompatible row settings when EnableSkipIncompatibleRow is true.
	RedirectIncompatibleRowSettings *RedirectIncompatibleRowSettings `pulumi:"redirectIncompatibleRowSettings"`
	// Copy activity sink.
	Sink interface{} `pulumi:"sink"`
	// Specify the fault tolerance for data consistency.
	SkipErrorFile *SkipErrorFile `pulumi:"skipErrorFile"`
	// Copy activity source.
	Source interface{} `pulumi:"source"`
	// Specifies interim staging settings when EnableStaging is true.
	StagingSettings *StagingSettings `pulumi:"stagingSettings"`
	// Copy activity translator. If not specified, tabular translator is used.
	Translator interface{} `pulumi:"translator"`
	// Type of activity.
	// Expected value is 'Copy'.
	Type string `pulumi:"type"`
	// Activity user properties.
	UserProperties []UserProperty `pulumi:"userProperties"`
	// Whether to enable Data Consistency validation. Type: boolean (or Expression with resultType boolean).
	ValidateDataConsistency interface{} `pulumi:"validateDataConsistency"`
}

// Settings for copy activity log.
type CopyActivityLogSettings struct {
	// Specifies whether to enable reliable logging. Type: boolean (or Expression with resultType boolean).
	EnableReliableLogging interface{} `pulumi:"enableReliableLogging"`
	// Gets or sets the log level, support: Info, Warning. Type: string (or Expression with resultType string).
	LogLevel interface{} `pulumi:"logLevel"`
}

// Settings for copy activity log.
type CopyActivityLogSettingsResponse struct {
	// Specifies whether to enable reliable logging. Type: boolean (or Expression with resultType boolean).
	EnableReliableLogging interface{} `pulumi:"enableReliableLogging"`
	// Gets or sets the log level, support: Info, Warning. Type: string (or Expression with resultType string).
	LogLevel interface{} `pulumi:"logLevel"`
}

// Copy activity.
type CopyActivityResponse struct {
	// Maximum number of data integration units that can be used to perform this data movement. Type: integer (or Expression with resultType integer), minimum: 0.
	DataIntegrationUnits interface{} `pulumi:"dataIntegrationUnits"`
	// Activity depends on condition.
	DependsOn []ActivityDependencyResponse `pulumi:"dependsOn"`
	// Activity description.
	Description *string `pulumi:"description"`
	// Whether to skip incompatible row. Default value is false. Type: boolean (or Expression with resultType boolean).
	EnableSkipIncompatibleRow interface{} `pulumi:"enableSkipIncompatibleRow"`
	// Specifies whether to copy data via an interim staging. Default value is false. Type: boolean (or Expression with resultType boolean).
	EnableStaging interface{} `pulumi:"enableStaging"`
	// List of inputs for the activity.
	Inputs []DatasetReferenceResponse `pulumi:"inputs"`
	// Linked service reference.
	LinkedServiceName *LinkedServiceReferenceResponse `pulumi:"linkedServiceName"`
	// Log settings customer needs provide when enabling log.
	LogSettings *LogSettingsResponse `pulumi:"logSettings"`
	// (Deprecated. Please use LogSettings) Log storage settings customer need to provide when enabling session log.
	LogStorageSettings *LogStorageSettingsResponse `pulumi:"logStorageSettings"`
	// Activity name.
	Name string `pulumi:"name"`
	// List of outputs for the activity.
	Outputs []DatasetReferenceResponse `pulumi:"outputs"`
	// Maximum number of concurrent sessions opened on the source or sink to avoid overloading the data store. Type: integer (or Expression with resultType integer), minimum: 0.
	ParallelCopies interface{} `pulumi:"parallelCopies"`
	// Activity policy.
	Policy *ActivityPolicyResponse `pulumi:"policy"`
	// Preserve rules.
	Preserve []interface{} `pulumi:"preserve"`
	// Preserve Rules.
	PreserveRules []interface{} `pulumi:"preserveRules"`
	// Redirect incompatible row settings when EnableSkipIncompatibleRow is true.
	RedirectIncompatibleRowSettings *RedirectIncompatibleRowSettingsResponse `pulumi:"redirectIncompatibleRowSettings"`
	// Copy activity sink.
	Sink interface{} `pulumi:"sink"`
	// Specify the fault tolerance for data consistency.
	SkipErrorFile *SkipErrorFileResponse `pulumi:"skipErrorFile"`
	// Copy activity source.
	Source interface{} `pulumi:"source"`
	// Specifies interim staging settings when EnableStaging is true.
	StagingSettings *StagingSettingsResponse `pulumi:"stagingSettings"`
	// Copy activity translator. If not specified, tabular translator is used.
	Translator interface{} `pulumi:"translator"`
	// Type of activity.
	// Expected value is 'Copy'.
	Type string `pulumi:"type"`
	// Activity user properties.
	UserProperties []UserPropertyResponse `pulumi:"userProperties"`
	// Whether to enable Data Consistency validation. Type: boolean (or Expression with resultType boolean).
	ValidateDataConsistency interface{} `pulumi:"validateDataConsistency"`
}

// Microsoft Azure Cosmos Database (CosmosDB) linked service.
type CosmosDbLinkedService struct {
	// The endpoint of the Azure CosmosDB account. Type: string (or Expression with resultType string)
	AccountEndpoint interface{} `pulumi:"accountEndpoint"`
	// The account key of the Azure CosmosDB account. Type: SecureString or AzureKeyVaultSecretReference.
	AccountKey interface{} `pulumi:"accountKey"`
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// Indicates the azure cloud type of the service principle auth. Allowed values are AzurePublic, AzureChina, AzureUsGovernment, AzureGermany. Default value is the data factory regions’ cloud type. Type: string (or Expression with resultType string).
	AzureCloudType interface{} `pulumi:"azureCloudType"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference `pulumi:"connectVia"`
	// The connection mode used to access CosmosDB account. Type: string (or Expression with resultType string).
	ConnectionMode *string `pulumi:"connectionMode"`
	// The connection string. Type: string, SecureString or AzureKeyVaultSecretReference.
	ConnectionString interface{} `pulumi:"connectionString"`
	// The credential reference containing authentication information.
	Credential *CredentialReference `pulumi:"credential"`
	// The name of the database. Type: string (or Expression with resultType string)
	Database interface{} `pulumi:"database"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential interface{} `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// The credential of the service principal object in Azure Active Directory. If servicePrincipalCredentialType is 'ServicePrincipalKey', servicePrincipalCredential can be SecureString or AzureKeyVaultSecretReference. If servicePrincipalCredentialType is 'ServicePrincipalCert', servicePrincipalCredential can only be AzureKeyVaultSecretReference.
	ServicePrincipalCredential interface{} `pulumi:"servicePrincipalCredential"`
	// The service principal credential type to use in Server-To-Server authentication. 'ServicePrincipalKey' for key/secret, 'ServicePrincipalCert' for certificate. Type: string (or Expression with resultType string).
	ServicePrincipalCredentialType *string `pulumi:"servicePrincipalCredentialType"`
	// The client ID of the application in Azure Active Directory used for Server-To-Server authentication. Type: string (or Expression with resultType string).
	ServicePrincipalId interface{} `pulumi:"servicePrincipalId"`
	// The name or ID of the tenant to which the service principal belongs. Type: string (or Expression with resultType string).
	Tenant interface{} `pulumi:"tenant"`
	// Type of linked service.
	// Expected value is 'CosmosDb'.
	Type string `pulumi:"type"`
}

// Microsoft Azure Cosmos Database (CosmosDB) linked service.
type CosmosDbLinkedServiceResponse struct {
	// The endpoint of the Azure CosmosDB account. Type: string (or Expression with resultType string)
	AccountEndpoint interface{} `pulumi:"accountEndpoint"`
	// The account key of the Azure CosmosDB account. Type: SecureString or AzureKeyVaultSecretReference.
	AccountKey interface{} `pulumi:"accountKey"`
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// Indicates the azure cloud type of the service principle auth. Allowed values are AzurePublic, AzureChina, AzureUsGovernment, AzureGermany. Default value is the data factory regions’ cloud type. Type: string (or Expression with resultType string).
	AzureCloudType interface{} `pulumi:"azureCloudType"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReferenceResponse `pulumi:"connectVia"`
	// The connection mode used to access CosmosDB account. Type: string (or Expression with resultType string).
	ConnectionMode *string `pulumi:"connectionMode"`
	// The connection string. Type: string, SecureString or AzureKeyVaultSecretReference.
	ConnectionString interface{} `pulumi:"connectionString"`
	// The credential reference containing authentication information.
	Credential *CredentialReferenceResponse `pulumi:"credential"`
	// The name of the database. Type: string (or Expression with resultType string)
	Database interface{} `pulumi:"database"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential interface{} `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// The credential of the service principal object in Azure Active Directory. If servicePrincipalCredentialType is 'ServicePrincipalKey', servicePrincipalCredential can be SecureString or AzureKeyVaultSecretReference. If servicePrincipalCredentialType is 'ServicePrincipalCert', servicePrincipalCredential can only be AzureKeyVaultSecretReference.
	ServicePrincipalCredential interface{} `pulumi:"servicePrincipalCredential"`
	// The service principal credential type to use in Server-To-Server authentication. 'ServicePrincipalKey' for key/secret, 'ServicePrincipalCert' for certificate. Type: string (or Expression with resultType string).
	ServicePrincipalCredentialType *string `pulumi:"servicePrincipalCredentialType"`
	// The client ID of the application in Azure Active Directory used for Server-To-Server authentication. Type: string (or Expression with resultType string).
	ServicePrincipalId interface{} `pulumi:"servicePrincipalId"`
	// The name or ID of the tenant to which the service principal belongs. Type: string (or Expression with resultType string).
	Tenant interface{} `pulumi:"tenant"`
	// Type of linked service.
	// Expected value is 'CosmosDb'.
	Type string `pulumi:"type"`
}

// The CosmosDB (MongoDB API) database dataset.
type CosmosDbMongoDbApiCollectionDataset struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// The collection name of the CosmosDB (MongoDB API) database. Type: string (or Expression with resultType string).
	Collection interface{} `pulumi:"collection"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReference `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// Type of dataset.
	// Expected value is 'CosmosDbMongoDbApiCollection'.
	Type string `pulumi:"type"`
}

// The CosmosDB (MongoDB API) database dataset.
type CosmosDbMongoDbApiCollectionDatasetResponse struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// The collection name of the CosmosDB (MongoDB API) database. Type: string (or Expression with resultType string).
	Collection interface{} `pulumi:"collection"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetResponseFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceResponse `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// Type of dataset.
	// Expected value is 'CosmosDbMongoDbApiCollection'.
	Type string `pulumi:"type"`
}

// Linked service for CosmosDB (MongoDB API) data source.
type CosmosDbMongoDbApiLinkedService struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference `pulumi:"connectVia"`
	// The CosmosDB (MongoDB API) connection string. Type: string, SecureString or AzureKeyVaultSecretReference. Type: string, SecureString or AzureKeyVaultSecretReference.
	ConnectionString interface{} `pulumi:"connectionString"`
	// The name of the CosmosDB (MongoDB API) database that you want to access. Type: string (or Expression with resultType string).
	Database interface{} `pulumi:"database"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// Whether the CosmosDB (MongoDB API) server version is higher than 3.2. The default value is false. Type: boolean (or Expression with resultType boolean).
	IsServerVersionAbove32 interface{} `pulumi:"isServerVersionAbove32"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Type of linked service.
	// Expected value is 'CosmosDbMongoDbApi'.
	Type string `pulumi:"type"`
}

// Linked service for CosmosDB (MongoDB API) data source.
type CosmosDbMongoDbApiLinkedServiceResponse struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReferenceResponse `pulumi:"connectVia"`
	// The CosmosDB (MongoDB API) connection string. Type: string, SecureString or AzureKeyVaultSecretReference. Type: string, SecureString or AzureKeyVaultSecretReference.
	ConnectionString interface{} `pulumi:"connectionString"`
	// The name of the CosmosDB (MongoDB API) database that you want to access. Type: string (or Expression with resultType string).
	Database interface{} `pulumi:"database"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// Whether the CosmosDB (MongoDB API) server version is higher than 3.2. The default value is false. Type: boolean (or Expression with resultType boolean).
	IsServerVersionAbove32 interface{} `pulumi:"isServerVersionAbove32"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Type of linked service.
	// Expected value is 'CosmosDbMongoDbApi'.
	Type string `pulumi:"type"`
}

// A copy activity sink for a CosmosDB (MongoDB API) database.
type CosmosDbMongoDbApiSink struct {
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the sink data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// Sink retry count. Type: integer (or Expression with resultType integer).
	SinkRetryCount interface{} `pulumi:"sinkRetryCount"`
	// Sink retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SinkRetryWait interface{} `pulumi:"sinkRetryWait"`
	// Copy sink type.
	// Expected value is 'CosmosDbMongoDbApiSink'.
	Type string `pulumi:"type"`
	// Write batch size. Type: integer (or Expression with resultType integer), minimum: 0.
	WriteBatchSize interface{} `pulumi:"writeBatchSize"`
	// Write batch timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	WriteBatchTimeout interface{} `pulumi:"writeBatchTimeout"`
	// Specifies whether the document with same key to be overwritten (upsert) rather than throw exception (insert). The default value is "insert". Type: string (or Expression with resultType string). Type: string (or Expression with resultType string).
	WriteBehavior interface{} `pulumi:"writeBehavior"`
}

// A copy activity sink for a CosmosDB (MongoDB API) database.
type CosmosDbMongoDbApiSinkResponse struct {
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the sink data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// Sink retry count. Type: integer (or Expression with resultType integer).
	SinkRetryCount interface{} `pulumi:"sinkRetryCount"`
	// Sink retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SinkRetryWait interface{} `pulumi:"sinkRetryWait"`
	// Copy sink type.
	// Expected value is 'CosmosDbMongoDbApiSink'.
	Type string `pulumi:"type"`
	// Write batch size. Type: integer (or Expression with resultType integer), minimum: 0.
	WriteBatchSize interface{} `pulumi:"writeBatchSize"`
	// Write batch timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	WriteBatchTimeout interface{} `pulumi:"writeBatchTimeout"`
	// Specifies whether the document with same key to be overwritten (upsert) rather than throw exception (insert). The default value is "insert". Type: string (or Expression with resultType string). Type: string (or Expression with resultType string).
	WriteBehavior interface{} `pulumi:"writeBehavior"`
}

// A copy activity source for a CosmosDB (MongoDB API) database.
type CosmosDbMongoDbApiSource struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns interface{} `pulumi:"additionalColumns"`
	// Specifies the number of documents to return in each batch of the response from MongoDB instance. In most cases, modifying the batch size will not affect the user or the application. This property's main purpose is to avoid hit the limitation of response size. Type: integer (or Expression with resultType integer).
	BatchSize interface{} `pulumi:"batchSize"`
	// Cursor methods for Mongodb query.
	CursorMethods *MongoDbCursorMethodsProperties `pulumi:"cursorMethods"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// Specifies selection filter using query operators. To return all documents in a collection, omit this parameter or pass an empty document ({}). Type: string (or Expression with resultType string).
	Filter interface{} `pulumi:"filter"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	QueryTimeout interface{} `pulumi:"queryTimeout"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// Copy source type.
	// Expected value is 'CosmosDbMongoDbApiSource'.
	Type string `pulumi:"type"`
}

// A copy activity source for a CosmosDB (MongoDB API) database.
type CosmosDbMongoDbApiSourceResponse struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns interface{} `pulumi:"additionalColumns"`
	// Specifies the number of documents to return in each batch of the response from MongoDB instance. In most cases, modifying the batch size will not affect the user or the application. This property's main purpose is to avoid hit the limitation of response size. Type: integer (or Expression with resultType integer).
	BatchSize interface{} `pulumi:"batchSize"`
	// Cursor methods for Mongodb query.
	CursorMethods *MongoDbCursorMethodsPropertiesResponse `pulumi:"cursorMethods"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// Specifies selection filter using query operators. To return all documents in a collection, omit this parameter or pass an empty document ({}). Type: string (or Expression with resultType string).
	Filter interface{} `pulumi:"filter"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	QueryTimeout interface{} `pulumi:"queryTimeout"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// Copy source type.
	// Expected value is 'CosmosDbMongoDbApiSource'.
	Type string `pulumi:"type"`
}

// Microsoft Azure CosmosDB (SQL API) Collection dataset.
type CosmosDbSqlApiCollectionDataset struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// CosmosDB (SQL API) collection name. Type: string (or Expression with resultType string).
	CollectionName interface{} `pulumi:"collectionName"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReference `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// Type of dataset.
	// Expected value is 'CosmosDbSqlApiCollection'.
	Type string `pulumi:"type"`
}

// Microsoft Azure CosmosDB (SQL API) Collection dataset.
type CosmosDbSqlApiCollectionDatasetResponse struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// CosmosDB (SQL API) collection name. Type: string (or Expression with resultType string).
	CollectionName interface{} `pulumi:"collectionName"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetResponseFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceResponse `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// Type of dataset.
	// Expected value is 'CosmosDbSqlApiCollection'.
	Type string `pulumi:"type"`
}

// A copy activity Azure CosmosDB (SQL API) Collection sink.
type CosmosDbSqlApiSink struct {
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the sink data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// Sink retry count. Type: integer (or Expression with resultType integer).
	SinkRetryCount interface{} `pulumi:"sinkRetryCount"`
	// Sink retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SinkRetryWait interface{} `pulumi:"sinkRetryWait"`
	// Copy sink type.
	// Expected value is 'CosmosDbSqlApiSink'.
	Type string `pulumi:"type"`
	// Write batch size. Type: integer (or Expression with resultType integer), minimum: 0.
	WriteBatchSize interface{} `pulumi:"writeBatchSize"`
	// Write batch timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	WriteBatchTimeout interface{} `pulumi:"writeBatchTimeout"`
	// Describes how to write data to Azure Cosmos DB. Type: string (or Expression with resultType string). Allowed values: insert and upsert.
	WriteBehavior interface{} `pulumi:"writeBehavior"`
}

// A copy activity Azure CosmosDB (SQL API) Collection sink.
type CosmosDbSqlApiSinkResponse struct {
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the sink data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// Sink retry count. Type: integer (or Expression with resultType integer).
	SinkRetryCount interface{} `pulumi:"sinkRetryCount"`
	// Sink retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SinkRetryWait interface{} `pulumi:"sinkRetryWait"`
	// Copy sink type.
	// Expected value is 'CosmosDbSqlApiSink'.
	Type string `pulumi:"type"`
	// Write batch size. Type: integer (or Expression with resultType integer), minimum: 0.
	WriteBatchSize interface{} `pulumi:"writeBatchSize"`
	// Write batch timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	WriteBatchTimeout interface{} `pulumi:"writeBatchTimeout"`
	// Describes how to write data to Azure Cosmos DB. Type: string (or Expression with resultType string). Allowed values: insert and upsert.
	WriteBehavior interface{} `pulumi:"writeBehavior"`
}

// A copy activity Azure CosmosDB (SQL API) Collection source.
type CosmosDbSqlApiSource struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns interface{} `pulumi:"additionalColumns"`
	// Whether detect primitive values as datetime values. Type: boolean (or Expression with resultType boolean).
	DetectDatetime interface{} `pulumi:"detectDatetime"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// Page size of the result. Type: integer (or Expression with resultType integer).
	PageSize interface{} `pulumi:"pageSize"`
	// Preferred regions. Type: array of strings (or Expression with resultType array of strings).
	PreferredRegions interface{} `pulumi:"preferredRegions"`
	// SQL API query. Type: string (or Expression with resultType string).
	Query interface{} `pulumi:"query"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// Copy source type.
	// Expected value is 'CosmosDbSqlApiSource'.
	Type string `pulumi:"type"`
}

// A copy activity Azure CosmosDB (SQL API) Collection source.
type CosmosDbSqlApiSourceResponse struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns interface{} `pulumi:"additionalColumns"`
	// Whether detect primitive values as datetime values. Type: boolean (or Expression with resultType boolean).
	DetectDatetime interface{} `pulumi:"detectDatetime"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// Page size of the result. Type: integer (or Expression with resultType integer).
	PageSize interface{} `pulumi:"pageSize"`
	// Preferred regions. Type: array of strings (or Expression with resultType array of strings).
	PreferredRegions interface{} `pulumi:"preferredRegions"`
	// SQL API query. Type: string (or Expression with resultType string).
	Query interface{} `pulumi:"query"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// Copy source type.
	// Expected value is 'CosmosDbSqlApiSource'.
	Type string `pulumi:"type"`
}

// Couchbase server linked service.
type CouchbaseLinkedService struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference `pulumi:"connectVia"`
	// An ODBC connection string. Type: string, SecureString or AzureKeyVaultSecretReference.
	ConnectionString interface{} `pulumi:"connectionString"`
	// The Azure key vault secret reference of credString in connection string.
	CredString *AzureKeyVaultSecretReference `pulumi:"credString"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential interface{} `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Type of linked service.
	// Expected value is 'Couchbase'.
	Type string `pulumi:"type"`
}

// Couchbase server linked service.
type CouchbaseLinkedServiceResponse struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReferenceResponse `pulumi:"connectVia"`
	// An ODBC connection string. Type: string, SecureString or AzureKeyVaultSecretReference.
	ConnectionString interface{} `pulumi:"connectionString"`
	// The Azure key vault secret reference of credString in connection string.
	CredString *AzureKeyVaultSecretReferenceResponse `pulumi:"credString"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential interface{} `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Type of linked service.
	// Expected value is 'Couchbase'.
	Type string `pulumi:"type"`
}

// A copy activity Couchbase server source.
type CouchbaseSource struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns interface{} `pulumi:"additionalColumns"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// A query to retrieve data from source. Type: string (or Expression with resultType string).
	Query interface{} `pulumi:"query"`
	// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	QueryTimeout interface{} `pulumi:"queryTimeout"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// Copy source type.
	// Expected value is 'CouchbaseSource'.
	Type string `pulumi:"type"`
}

// A copy activity Couchbase server source.
type CouchbaseSourceResponse struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns interface{} `pulumi:"additionalColumns"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// A query to retrieve data from source. Type: string (or Expression with resultType string).
	Query interface{} `pulumi:"query"`
	// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	QueryTimeout interface{} `pulumi:"queryTimeout"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// Copy source type.
	// Expected value is 'CouchbaseSource'.
	Type string `pulumi:"type"`
}

// Couchbase server dataset.
type CouchbaseTableDataset struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReference `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// The table name. Type: string (or Expression with resultType string).
	TableName interface{} `pulumi:"tableName"`
	// Type of dataset.
	// Expected value is 'CouchbaseTable'.
	Type string `pulumi:"type"`
}

// Couchbase server dataset.
type CouchbaseTableDatasetResponse struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetResponseFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceResponse `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// The table name. Type: string (or Expression with resultType string).
	TableName interface{} `pulumi:"tableName"`
	// Type of dataset.
	// Expected value is 'CouchbaseTable'.
	Type string `pulumi:"type"`
}

// Credential reference type.
type CredentialReference struct {
	// Reference credential name.
	ReferenceName string `pulumi:"referenceName"`
	// Credential reference type.
	Type string `pulumi:"type"`
}

// Credential reference type.
type CredentialReferenceResponse struct {
	// Reference credential name.
	ReferenceName string `pulumi:"referenceName"`
	// Credential reference type.
	Type string `pulumi:"type"`
}

// Custom activity type.
type CustomActivity struct {
	// Elevation level and scope for the user, default is nonadmin task. Type: string (or Expression with resultType double).
	AutoUserSpecification interface{} `pulumi:"autoUserSpecification"`
	// Command for custom activity Type: string (or Expression with resultType string).
	Command interface{} `pulumi:"command"`
	// Activity depends on condition.
	DependsOn []ActivityDependency `pulumi:"dependsOn"`
	// Activity description.
	Description *string `pulumi:"description"`
	// User defined property bag. There is no restriction on the keys or values that can be used. The user specified custom activity has the full responsibility to consume and interpret the content defined.
	ExtendedProperties map[string]interface{} `pulumi:"extendedProperties"`
	// Folder path for resource files Type: string (or Expression with resultType string).
	FolderPath interface{} `pulumi:"folderPath"`
	// Linked service reference.
	LinkedServiceName *LinkedServiceReference `pulumi:"linkedServiceName"`
	// Activity name.
	Name string `pulumi:"name"`
	// Activity policy.
	Policy *ActivityPolicy `pulumi:"policy"`
	// Reference objects
	ReferenceObjects *CustomActivityReferenceObject `pulumi:"referenceObjects"`
	// Resource linked service reference.
	ResourceLinkedService *LinkedServiceReference `pulumi:"resourceLinkedService"`
	// The retention time for the files submitted for custom activity. Type: double (or Expression with resultType double).
	RetentionTimeInDays interface{} `pulumi:"retentionTimeInDays"`
	// Type of activity.
	// Expected value is 'Custom'.
	Type string `pulumi:"type"`
	// Activity user properties.
	UserProperties []UserProperty `pulumi:"userProperties"`
}

// Reference objects for custom activity
type CustomActivityReferenceObject struct {
	// Dataset references.
	Datasets []DatasetReference `pulumi:"datasets"`
	// Linked service references.
	LinkedServices []LinkedServiceReference `pulumi:"linkedServices"`
}

// Reference objects for custom activity
type CustomActivityReferenceObjectResponse struct {
	// Dataset references.
	Datasets []DatasetReferenceResponse `pulumi:"datasets"`
	// Linked service references.
	LinkedServices []LinkedServiceReferenceResponse `pulumi:"linkedServices"`
}

// Custom activity type.
type CustomActivityResponse struct {
	// Elevation level and scope for the user, default is nonadmin task. Type: string (or Expression with resultType double).
	AutoUserSpecification interface{} `pulumi:"autoUserSpecification"`
	// Command for custom activity Type: string (or Expression with resultType string).
	Command interface{} `pulumi:"command"`
	// Activity depends on condition.
	DependsOn []ActivityDependencyResponse `pulumi:"dependsOn"`
	// Activity description.
	Description *string `pulumi:"description"`
	// User defined property bag. There is no restriction on the keys or values that can be used. The user specified custom activity has the full responsibility to consume and interpret the content defined.
	ExtendedProperties map[string]interface{} `pulumi:"extendedProperties"`
	// Folder path for resource files Type: string (or Expression with resultType string).
	FolderPath interface{} `pulumi:"folderPath"`
	// Linked service reference.
	LinkedServiceName *LinkedServiceReferenceResponse `pulumi:"linkedServiceName"`
	// Activity name.
	Name string `pulumi:"name"`
	// Activity policy.
	Policy *ActivityPolicyResponse `pulumi:"policy"`
	// Reference objects
	ReferenceObjects *CustomActivityReferenceObjectResponse `pulumi:"referenceObjects"`
	// Resource linked service reference.
	ResourceLinkedService *LinkedServiceReferenceResponse `pulumi:"resourceLinkedService"`
	// The retention time for the files submitted for custom activity. Type: double (or Expression with resultType double).
	RetentionTimeInDays interface{} `pulumi:"retentionTimeInDays"`
	// Type of activity.
	// Expected value is 'Custom'.
	Type string `pulumi:"type"`
	// Activity user properties.
	UserProperties []UserPropertyResponse `pulumi:"userProperties"`
}

// Custom linked service.
type CustomDataSourceLinkedService struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference `pulumi:"connectVia"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Type of linked service.
	// Expected value is 'CustomDataSource'.
	Type string `pulumi:"type"`
}

// Custom linked service.
type CustomDataSourceLinkedServiceResponse struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReferenceResponse `pulumi:"connectVia"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Type of linked service.
	// Expected value is 'CustomDataSource'.
	Type string `pulumi:"type"`
}

// The custom dataset.
type CustomDataset struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReference `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// Type of dataset.
	// Expected value is 'CustomDataset'.
	Type string `pulumi:"type"`
}

// The custom dataset.
type CustomDatasetResponse struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetResponseFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceResponse `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// Type of dataset.
	// Expected value is 'CustomDataset'.
	Type string `pulumi:"type"`
}

// Trigger that runs every time a custom event is received.
type CustomEventsTrigger struct {
	// List of tags that can be used for describing the trigger.
	Annotations []interface{} `pulumi:"annotations"`
	// Trigger description.
	Description *string `pulumi:"description"`
	// The list of event types that cause this trigger to fire.
	Events []interface{} `pulumi:"events"`
	// Pipelines that need to be started.
	Pipelines []TriggerPipelineReference `pulumi:"pipelines"`
	// The ARM resource ID of the Azure Event Grid Topic.
	Scope string `pulumi:"scope"`
	// The event subject must begin with the pattern provided for trigger to fire. At least one of these must be provided: subjectBeginsWith, subjectEndsWith.
	SubjectBeginsWith *string `pulumi:"subjectBeginsWith"`
	// The event subject must end with the pattern provided for trigger to fire. At least one of these must be provided: subjectBeginsWith, subjectEndsWith.
	SubjectEndsWith *string `pulumi:"subjectEndsWith"`
	// Trigger type.
	// Expected value is 'CustomEventsTrigger'.
	Type string `pulumi:"type"`
}

// Trigger that runs every time a custom event is received.
type CustomEventsTriggerResponse struct {
	// List of tags that can be used for describing the trigger.
	Annotations []interface{} `pulumi:"annotations"`
	// Trigger description.
	Description *string `pulumi:"description"`
	// The list of event types that cause this trigger to fire.
	Events []interface{} `pulumi:"events"`
	// Pipelines that need to be started.
	Pipelines []TriggerPipelineReferenceResponse `pulumi:"pipelines"`
	// Indicates if trigger is running or not. Updated when Start/Stop APIs are called on the Trigger.
	RuntimeState string `pulumi:"runtimeState"`
	// The ARM resource ID of the Azure Event Grid Topic.
	Scope string `pulumi:"scope"`
	// The event subject must begin with the pattern provided for trigger to fire. At least one of these must be provided: subjectBeginsWith, subjectEndsWith.
	SubjectBeginsWith *string `pulumi:"subjectBeginsWith"`
	// The event subject must end with the pattern provided for trigger to fire. At least one of these must be provided: subjectBeginsWith, subjectEndsWith.
	SubjectEndsWith *string `pulumi:"subjectEndsWith"`
	// Trigger type.
	// Expected value is 'CustomEventsTrigger'.
	Type string `pulumi:"type"`
}

// Default value.
type DWCopyCommandDefaultValue struct {
	// Column name. Type: object (or Expression with resultType string).
	ColumnName interface{} `pulumi:"columnName"`
	// The default value of the column. Type: object (or Expression with resultType string).
	DefaultValue interface{} `pulumi:"defaultValue"`
}

// Default value.
type DWCopyCommandDefaultValueResponse struct {
	// Column name. Type: object (or Expression with resultType string).
	ColumnName interface{} `pulumi:"columnName"`
	// The default value of the column. Type: object (or Expression with resultType string).
	DefaultValue interface{} `pulumi:"defaultValue"`
}

// DW Copy Command settings.
type DWCopyCommandSettings struct {
	// Additional options directly passed to SQL DW in Copy Command. Type: key value pairs (value should be string type) (or Expression with resultType object). Example: "additionalOptions": { "MAXERRORS": "1000", "DATEFORMAT": "'ymd'" }
	AdditionalOptions map[string]string `pulumi:"additionalOptions"`
	// Specifies the default values for each target column in SQL DW. The default values in the property overwrite the DEFAULT constraint set in the DB, and identity column cannot have a default value. Type: array of objects (or Expression with resultType array of objects).
	DefaultValues []DWCopyCommandDefaultValue `pulumi:"defaultValues"`
}

// DW Copy Command settings.
type DWCopyCommandSettingsResponse struct {
	// Additional options directly passed to SQL DW in Copy Command. Type: key value pairs (value should be string type) (or Expression with resultType object). Example: "additionalOptions": { "MAXERRORS": "1000", "DATEFORMAT": "'ymd'" }
	AdditionalOptions map[string]string `pulumi:"additionalOptions"`
	// Specifies the default values for each target column in SQL DW. The default values in the property overwrite the DEFAULT constraint set in the DB, and identity column cannot have a default value. Type: array of objects (or Expression with resultType array of objects).
	DefaultValues []DWCopyCommandDefaultValueResponse `pulumi:"defaultValues"`
}

// The folder that this data flow is in. If not specified, Data flow will appear at the root level.
type DataFlowFolder struct {
	// The name of the folder that this data flow is in.
	Name *string `pulumi:"name"`
}

// Data flow reference type.
type DataFlowReference struct {
	// Reference data flow parameters from dataset.
	DatasetParameters interface{} `pulumi:"datasetParameters"`
	// Data flow parameters
	Parameters map[string]interface{} `pulumi:"parameters"`
	// Reference data flow name.
	ReferenceName string `pulumi:"referenceName"`
	// Data flow reference type.
	Type string `pulumi:"type"`
}

// Data flow reference type.
type DataFlowReferenceResponse struct {
	// Reference data flow parameters from dataset.
	DatasetParameters interface{} `pulumi:"datasetParameters"`
	// Data flow parameters
	Parameters map[string]interface{} `pulumi:"parameters"`
	// Reference data flow name.
	ReferenceName string `pulumi:"referenceName"`
	// Data flow reference type.
	Type string `pulumi:"type"`
}

// The folder that this data flow is in. If not specified, Data flow will appear at the root level.
type DataFlowResponseFolder struct {
	// The name of the folder that this data flow is in.
	Name *string `pulumi:"name"`
}

// Transformation for data flow sink.
type DataFlowSink struct {
	// Dataset reference.
	Dataset *DatasetReference `pulumi:"dataset"`
	// Transformation description.
	Description *string `pulumi:"description"`
	// Flowlet Reference
	Flowlet *DataFlowReference `pulumi:"flowlet"`
	// Linked service reference.
	LinkedService *LinkedServiceReference `pulumi:"linkedService"`
	// Transformation name.
	Name string `pulumi:"name"`
	// Rejected data linked service reference.
	RejectedDataLinkedService *LinkedServiceReference `pulumi:"rejectedDataLinkedService"`
	// Schema linked service reference.
	SchemaLinkedService *LinkedServiceReference `pulumi:"schemaLinkedService"`
}

// Transformation for data flow sink.
type DataFlowSinkResponse struct {
	// Dataset reference.
	Dataset *DatasetReferenceResponse `pulumi:"dataset"`
	// Transformation description.
	Description *string `pulumi:"description"`
	// Flowlet Reference
	Flowlet *DataFlowReferenceResponse `pulumi:"flowlet"`
	// Linked service reference.
	LinkedService *LinkedServiceReferenceResponse `pulumi:"linkedService"`
	// Transformation name.
	Name string `pulumi:"name"`
	// Rejected data linked service reference.
	RejectedDataLinkedService *LinkedServiceReferenceResponse `pulumi:"rejectedDataLinkedService"`
	// Schema linked service reference.
	SchemaLinkedService *LinkedServiceReferenceResponse `pulumi:"schemaLinkedService"`
}

// Transformation for data flow source.
type DataFlowSource struct {
	// Dataset reference.
	Dataset *DatasetReference `pulumi:"dataset"`
	// Transformation description.
	Description *string `pulumi:"description"`
	// Flowlet Reference
	Flowlet *DataFlowReference `pulumi:"flowlet"`
	// Linked service reference.
	LinkedService *LinkedServiceReference `pulumi:"linkedService"`
	// Transformation name.
	Name string `pulumi:"name"`
	// Schema linked service reference.
	SchemaLinkedService *LinkedServiceReference `pulumi:"schemaLinkedService"`
}

// Transformation for data flow source.
type DataFlowSourceResponse struct {
	// Dataset reference.
	Dataset *DatasetReferenceResponse `pulumi:"dataset"`
	// Transformation description.
	Description *string `pulumi:"description"`
	// Flowlet Reference
	Flowlet *DataFlowReferenceResponse `pulumi:"flowlet"`
	// Linked service reference.
	LinkedService *LinkedServiceReferenceResponse `pulumi:"linkedService"`
	// Transformation name.
	Name string `pulumi:"name"`
	// Schema linked service reference.
	SchemaLinkedService *LinkedServiceReferenceResponse `pulumi:"schemaLinkedService"`
}

// Staging info for execute data flow activity.
type DataFlowStagingInfo struct {
	// Folder path for staging blob. Type: string (or Expression with resultType string)
	FolderPath interface{} `pulumi:"folderPath"`
	// Staging linked service reference.
	LinkedService *LinkedServiceReference `pulumi:"linkedService"`
}

// Staging info for execute data flow activity.
type DataFlowStagingInfoResponse struct {
	// Folder path for staging blob. Type: string (or Expression with resultType string)
	FolderPath interface{} `pulumi:"folderPath"`
	// Staging linked service reference.
	LinkedService *LinkedServiceReferenceResponse `pulumi:"linkedService"`
}

// Data Lake Analytics U-SQL activity.
type DataLakeAnalyticsUSQLActivity struct {
	// Compilation mode of U-SQL. Must be one of these values : Semantic, Full and SingleBox. Type: string (or Expression with resultType string).
	CompilationMode interface{} `pulumi:"compilationMode"`
	// The maximum number of nodes simultaneously used to run the job. Default value is 1. Type: integer (or Expression with resultType integer), minimum: 1.
	DegreeOfParallelism interface{} `pulumi:"degreeOfParallelism"`
	// Activity depends on condition.
	DependsOn []ActivityDependency `pulumi:"dependsOn"`
	// Activity description.
	Description *string `pulumi:"description"`
	// Linked service reference.
	LinkedServiceName *LinkedServiceReference `pulumi:"linkedServiceName"`
	// Activity name.
	Name string `pulumi:"name"`
	// Parameters for U-SQL job request.
	Parameters map[string]interface{} `pulumi:"parameters"`
	// Activity policy.
	Policy *ActivityPolicy `pulumi:"policy"`
	// Determines which jobs out of all that are queued should be selected to run first. The lower the number, the higher the priority. Default value is 1000. Type: integer (or Expression with resultType integer), minimum: 1.
	Priority interface{} `pulumi:"priority"`
	// Runtime version of the U-SQL engine to use. Type: string (or Expression with resultType string).
	RuntimeVersion interface{} `pulumi:"runtimeVersion"`
	// Script linked service reference.
	ScriptLinkedService LinkedServiceReference `pulumi:"scriptLinkedService"`
	// Case-sensitive path to folder that contains the U-SQL script. Type: string (or Expression with resultType string).
	ScriptPath interface{} `pulumi:"scriptPath"`
	// Type of activity.
	// Expected value is 'DataLakeAnalyticsU-SQL'.
	Type string `pulumi:"type"`
	// Activity user properties.
	UserProperties []UserProperty `pulumi:"userProperties"`
}

// Data Lake Analytics U-SQL activity.
type DataLakeAnalyticsUSQLActivityResponse struct {
	// Compilation mode of U-SQL. Must be one of these values : Semantic, Full and SingleBox. Type: string (or Expression with resultType string).
	CompilationMode interface{} `pulumi:"compilationMode"`
	// The maximum number of nodes simultaneously used to run the job. Default value is 1. Type: integer (or Expression with resultType integer), minimum: 1.
	DegreeOfParallelism interface{} `pulumi:"degreeOfParallelism"`
	// Activity depends on condition.
	DependsOn []ActivityDependencyResponse `pulumi:"dependsOn"`
	// Activity description.
	Description *string `pulumi:"description"`
	// Linked service reference.
	LinkedServiceName *LinkedServiceReferenceResponse `pulumi:"linkedServiceName"`
	// Activity name.
	Name string `pulumi:"name"`
	// Parameters for U-SQL job request.
	Parameters map[string]interface{} `pulumi:"parameters"`
	// Activity policy.
	Policy *ActivityPolicyResponse `pulumi:"policy"`
	// Determines which jobs out of all that are queued should be selected to run first. The lower the number, the higher the priority. Default value is 1000. Type: integer (or Expression with resultType integer), minimum: 1.
	Priority interface{} `pulumi:"priority"`
	// Runtime version of the U-SQL engine to use. Type: string (or Expression with resultType string).
	RuntimeVersion interface{} `pulumi:"runtimeVersion"`
	// Script linked service reference.
	ScriptLinkedService LinkedServiceReferenceResponse `pulumi:"scriptLinkedService"`
	// Case-sensitive path to folder that contains the U-SQL script. Type: string (or Expression with resultType string).
	ScriptPath interface{} `pulumi:"scriptPath"`
	// Type of activity.
	// Expected value is 'DataLakeAnalyticsU-SQL'.
	Type string `pulumi:"type"`
	// Activity user properties.
	UserProperties []UserPropertyResponse `pulumi:"userProperties"`
}

// DatabricksNotebook activity.
type DatabricksNotebookActivity struct {
	// Base parameters to be used for each run of this job.If the notebook takes a parameter that is not specified, the default value from the notebook will be used.
	BaseParameters map[string]interface{} `pulumi:"baseParameters"`
	// Activity depends on condition.
	DependsOn []ActivityDependency `pulumi:"dependsOn"`
	// Activity description.
	Description *string `pulumi:"description"`
	// A list of libraries to be installed on the cluster that will execute the job.
	Libraries []map[string]interface{} `pulumi:"libraries"`
	// Linked service reference.
	LinkedServiceName *LinkedServiceReference `pulumi:"linkedServiceName"`
	// Activity name.
	Name string `pulumi:"name"`
	// The absolute path of the notebook to be run in the Databricks Workspace. This path must begin with a slash. Type: string (or Expression with resultType string).
	NotebookPath interface{} `pulumi:"notebookPath"`
	// Activity policy.
	Policy *ActivityPolicy `pulumi:"policy"`
	// Type of activity.
	// Expected value is 'DatabricksNotebook'.
	Type string `pulumi:"type"`
	// Activity user properties.
	UserProperties []UserProperty `pulumi:"userProperties"`
}

// DatabricksNotebook activity.
type DatabricksNotebookActivityResponse struct {
	// Base parameters to be used for each run of this job.If the notebook takes a parameter that is not specified, the default value from the notebook will be used.
	BaseParameters map[string]interface{} `pulumi:"baseParameters"`
	// Activity depends on condition.
	DependsOn []ActivityDependencyResponse `pulumi:"dependsOn"`
	// Activity description.
	Description *string `pulumi:"description"`
	// A list of libraries to be installed on the cluster that will execute the job.
	Libraries []map[string]interface{} `pulumi:"libraries"`
	// Linked service reference.
	LinkedServiceName *LinkedServiceReferenceResponse `pulumi:"linkedServiceName"`
	// Activity name.
	Name string `pulumi:"name"`
	// The absolute path of the notebook to be run in the Databricks Workspace. This path must begin with a slash. Type: string (or Expression with resultType string).
	NotebookPath interface{} `pulumi:"notebookPath"`
	// Activity policy.
	Policy *ActivityPolicyResponse `pulumi:"policy"`
	// Type of activity.
	// Expected value is 'DatabricksNotebook'.
	Type string `pulumi:"type"`
	// Activity user properties.
	UserProperties []UserPropertyResponse `pulumi:"userProperties"`
}

// DatabricksSparkJar activity.
type DatabricksSparkJarActivity struct {
	// Activity depends on condition.
	DependsOn []ActivityDependency `pulumi:"dependsOn"`
	// Activity description.
	Description *string `pulumi:"description"`
	// A list of libraries to be installed on the cluster that will execute the job.
	Libraries []map[string]interface{} `pulumi:"libraries"`
	// Linked service reference.
	LinkedServiceName *LinkedServiceReference `pulumi:"linkedServiceName"`
	// The full name of the class containing the main method to be executed. This class must be contained in a JAR provided as a library. Type: string (or Expression with resultType string).
	MainClassName interface{} `pulumi:"mainClassName"`
	// Activity name.
	Name string `pulumi:"name"`
	// Parameters that will be passed to the main method.
	Parameters []interface{} `pulumi:"parameters"`
	// Activity policy.
	Policy *ActivityPolicy `pulumi:"policy"`
	// Type of activity.
	// Expected value is 'DatabricksSparkJar'.
	Type string `pulumi:"type"`
	// Activity user properties.
	UserProperties []UserProperty `pulumi:"userProperties"`
}

// DatabricksSparkJar activity.
type DatabricksSparkJarActivityResponse struct {
	// Activity depends on condition.
	DependsOn []ActivityDependencyResponse `pulumi:"dependsOn"`
	// Activity description.
	Description *string `pulumi:"description"`
	// A list of libraries to be installed on the cluster that will execute the job.
	Libraries []map[string]interface{} `pulumi:"libraries"`
	// Linked service reference.
	LinkedServiceName *LinkedServiceReferenceResponse `pulumi:"linkedServiceName"`
	// The full name of the class containing the main method to be executed. This class must be contained in a JAR provided as a library. Type: string (or Expression with resultType string).
	MainClassName interface{} `pulumi:"mainClassName"`
	// Activity name.
	Name string `pulumi:"name"`
	// Parameters that will be passed to the main method.
	Parameters []interface{} `pulumi:"parameters"`
	// Activity policy.
	Policy *ActivityPolicyResponse `pulumi:"policy"`
	// Type of activity.
	// Expected value is 'DatabricksSparkJar'.
	Type string `pulumi:"type"`
	// Activity user properties.
	UserProperties []UserPropertyResponse `pulumi:"userProperties"`
}

// DatabricksSparkPython activity.
type DatabricksSparkPythonActivity struct {
	// Activity depends on condition.
	DependsOn []ActivityDependency `pulumi:"dependsOn"`
	// Activity description.
	Description *string `pulumi:"description"`
	// A list of libraries to be installed on the cluster that will execute the job.
	Libraries []map[string]interface{} `pulumi:"libraries"`
	// Linked service reference.
	LinkedServiceName *LinkedServiceReference `pulumi:"linkedServiceName"`
	// Activity name.
	Name string `pulumi:"name"`
	// Command line parameters that will be passed to the Python file.
	Parameters []interface{} `pulumi:"parameters"`
	// Activity policy.
	Policy *ActivityPolicy `pulumi:"policy"`
	// The URI of the Python file to be executed. DBFS paths are supported. Type: string (or Expression with resultType string).
	PythonFile interface{} `pulumi:"pythonFile"`
	// Type of activity.
	// Expected value is 'DatabricksSparkPython'.
	Type string `pulumi:"type"`
	// Activity user properties.
	UserProperties []UserProperty `pulumi:"userProperties"`
}

// DatabricksSparkPython activity.
type DatabricksSparkPythonActivityResponse struct {
	// Activity depends on condition.
	DependsOn []ActivityDependencyResponse `pulumi:"dependsOn"`
	// Activity description.
	Description *string `pulumi:"description"`
	// A list of libraries to be installed on the cluster that will execute the job.
	Libraries []map[string]interface{} `pulumi:"libraries"`
	// Linked service reference.
	LinkedServiceName *LinkedServiceReferenceResponse `pulumi:"linkedServiceName"`
	// Activity name.
	Name string `pulumi:"name"`
	// Command line parameters that will be passed to the Python file.
	Parameters []interface{} `pulumi:"parameters"`
	// Activity policy.
	Policy *ActivityPolicyResponse `pulumi:"policy"`
	// The URI of the Python file to be executed. DBFS paths are supported. Type: string (or Expression with resultType string).
	PythonFile interface{} `pulumi:"pythonFile"`
	// Type of activity.
	// Expected value is 'DatabricksSparkPython'.
	Type string `pulumi:"type"`
	// Activity user properties.
	UserProperties []UserPropertyResponse `pulumi:"userProperties"`
}

// The compression method used on a dataset.
type DatasetCompression struct {
	// The dataset compression level. Type: string (or Expression with resultType string).
	Level interface{} `pulumi:"level"`
	// Type of dataset compression. Type: string (or Expression with resultType string).
	Type interface{} `pulumi:"type"`
}

// The compression method used on a dataset.
type DatasetCompressionResponse struct {
	// The dataset compression level. Type: string (or Expression with resultType string).
	Level interface{} `pulumi:"level"`
	// Type of dataset compression. Type: string (or Expression with resultType string).
	Type interface{} `pulumi:"type"`
}

// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
type DatasetFolder struct {
	// The name of the folder that this Dataset is in.
	Name *string `pulumi:"name"`
}

// Dataset reference type.
type DatasetReference struct {
	// Arguments for dataset.
	Parameters map[string]interface{} `pulumi:"parameters"`
	// Reference dataset name.
	ReferenceName string `pulumi:"referenceName"`
	// Dataset reference type.
	Type string `pulumi:"type"`
}

// Dataset reference type.
type DatasetReferenceResponse struct {
	// Arguments for dataset.
	Parameters map[string]interface{} `pulumi:"parameters"`
	// Reference dataset name.
	ReferenceName string `pulumi:"referenceName"`
	// Dataset reference type.
	Type string `pulumi:"type"`
}

// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
type DatasetResponseFolder struct {
	// The name of the folder that this Dataset is in.
	Name *string `pulumi:"name"`
}

// Linked service for Dataworld.
type DataworldLinkedService struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The api token for the Dataworld source.
	ApiToken interface{} `pulumi:"apiToken"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference `pulumi:"connectVia"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential interface{} `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Type of linked service.
	// Expected value is 'Dataworld'.
	Type string `pulumi:"type"`
}

// Linked service for Dataworld.
type DataworldLinkedServiceResponse struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The api token for the Dataworld source.
	ApiToken interface{} `pulumi:"apiToken"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReferenceResponse `pulumi:"connectVia"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential interface{} `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Type of linked service.
	// Expected value is 'Dataworld'.
	Type string `pulumi:"type"`
}

// Linked service for DB2 data source.
type Db2LinkedService struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// AuthenticationType to be used for connection. It is mutually exclusive with connectionString property.
	AuthenticationType *string `pulumi:"authenticationType"`
	// Certificate Common Name when TLS is enabled. It is mutually exclusive with connectionString property. Type: string (or Expression with resultType string).
	CertificateCommonName interface{} `pulumi:"certificateCommonName"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference `pulumi:"connectVia"`
	// The connection string. It is mutually exclusive with server, database, authenticationType, userName, packageCollection and certificateCommonName property. Type: string, SecureString or AzureKeyVaultSecretReference.
	ConnectionString interface{} `pulumi:"connectionString"`
	// Database name for connection. It is mutually exclusive with connectionString property. Type: string (or Expression with resultType string).
	Database interface{} `pulumi:"database"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. It is mutually exclusive with connectionString property. Type: string (or Expression with resultType string).
	EncryptedCredential interface{} `pulumi:"encryptedCredential"`
	// Under where packages are created when querying database. It is mutually exclusive with connectionString property. Type: string (or Expression with resultType string).
	PackageCollection interface{} `pulumi:"packageCollection"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Password for authentication.
	Password interface{} `pulumi:"password"`
	// Server name for connection. It is mutually exclusive with connectionString property. Type: string (or Expression with resultType string).
	Server interface{} `pulumi:"server"`
	// Type of linked service.
	// Expected value is 'Db2'.
	Type string `pulumi:"type"`
	// Username for authentication. It is mutually exclusive with connectionString property. Type: string (or Expression with resultType string).
	Username interface{} `pulumi:"username"`
}

// Linked service for DB2 data source.
type Db2LinkedServiceResponse struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// AuthenticationType to be used for connection. It is mutually exclusive with connectionString property.
	AuthenticationType *string `pulumi:"authenticationType"`
	// Certificate Common Name when TLS is enabled. It is mutually exclusive with connectionString property. Type: string (or Expression with resultType string).
	CertificateCommonName interface{} `pulumi:"certificateCommonName"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReferenceResponse `pulumi:"connectVia"`
	// The connection string. It is mutually exclusive with server, database, authenticationType, userName, packageCollection and certificateCommonName property. Type: string, SecureString or AzureKeyVaultSecretReference.
	ConnectionString interface{} `pulumi:"connectionString"`
	// Database name for connection. It is mutually exclusive with connectionString property. Type: string (or Expression with resultType string).
	Database interface{} `pulumi:"database"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. It is mutually exclusive with connectionString property. Type: string (or Expression with resultType string).
	EncryptedCredential interface{} `pulumi:"encryptedCredential"`
	// Under where packages are created when querying database. It is mutually exclusive with connectionString property. Type: string (or Expression with resultType string).
	PackageCollection interface{} `pulumi:"packageCollection"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Password for authentication.
	Password interface{} `pulumi:"password"`
	// Server name for connection. It is mutually exclusive with connectionString property. Type: string (or Expression with resultType string).
	Server interface{} `pulumi:"server"`
	// Type of linked service.
	// Expected value is 'Db2'.
	Type string `pulumi:"type"`
	// Username for authentication. It is mutually exclusive with connectionString property. Type: string (or Expression with resultType string).
	Username interface{} `pulumi:"username"`
}

// A copy activity source for Db2 databases.
type Db2Source struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns interface{} `pulumi:"additionalColumns"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// Database query. Type: string (or Expression with resultType string).
	Query interface{} `pulumi:"query"`
	// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	QueryTimeout interface{} `pulumi:"queryTimeout"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// Copy source type.
	// Expected value is 'Db2Source'.
	Type string `pulumi:"type"`
}

// A copy activity source for Db2 databases.
type Db2SourceResponse struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns interface{} `pulumi:"additionalColumns"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// Database query. Type: string (or Expression with resultType string).
	Query interface{} `pulumi:"query"`
	// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	QueryTimeout interface{} `pulumi:"queryTimeout"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// Copy source type.
	// Expected value is 'Db2Source'.
	Type string `pulumi:"type"`
}

// The Db2 table dataset.
type Db2TableDataset struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReference `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// The Db2 table name. Type: string (or Expression with resultType string).
	Table interface{} `pulumi:"table"`
	// This property will be retired. Please consider using schema + table properties instead.
	TableName interface{} `pulumi:"tableName"`
	// Type of dataset.
	// Expected value is 'Db2Table'.
	Type string `pulumi:"type"`
}

// The Db2 table dataset.
type Db2TableDatasetResponse struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetResponseFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceResponse `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// The Db2 table name. Type: string (or Expression with resultType string).
	Table interface{} `pulumi:"table"`
	// This property will be retired. Please consider using schema + table properties instead.
	TableName interface{} `pulumi:"tableName"`
	// Type of dataset.
	// Expected value is 'Db2Table'.
	Type string `pulumi:"type"`
}

// Delete activity.
type DeleteActivity struct {
	// Delete activity dataset reference.
	Dataset DatasetReference `pulumi:"dataset"`
	// Activity depends on condition.
	DependsOn []ActivityDependency `pulumi:"dependsOn"`
	// Activity description.
	Description *string `pulumi:"description"`
	// Whether to record detailed logs of delete-activity execution. Default value is false. Type: boolean (or Expression with resultType boolean).
	EnableLogging interface{} `pulumi:"enableLogging"`
	// Linked service reference.
	LinkedServiceName *LinkedServiceReference `pulumi:"linkedServiceName"`
	// Log storage settings customer need to provide when enableLogging is true.
	LogStorageSettings *LogStorageSettings `pulumi:"logStorageSettings"`
	// The max concurrent connections to connect data source at the same time.
	MaxConcurrentConnections *int `pulumi:"maxConcurrentConnections"`
	// Activity name.
	Name string `pulumi:"name"`
	// Activity policy.
	Policy *ActivityPolicy `pulumi:"policy"`
	// If true, files or sub-folders under current folder path will be deleted recursively. Default is false. Type: boolean (or Expression with resultType boolean).
	Recursive interface{} `pulumi:"recursive"`
	// Delete activity store settings.
	StoreSettings interface{} `pulumi:"storeSettings"`
	// Type of activity.
	// Expected value is 'Delete'.
	Type string `pulumi:"type"`
	// Activity user properties.
	UserProperties []UserProperty `pulumi:"userProperties"`
}

// Delete activity.
type DeleteActivityResponse struct {
	// Delete activity dataset reference.
	Dataset DatasetReferenceResponse `pulumi:"dataset"`
	// Activity depends on condition.
	DependsOn []ActivityDependencyResponse `pulumi:"dependsOn"`
	// Activity description.
	Description *string `pulumi:"description"`
	// Whether to record detailed logs of delete-activity execution. Default value is false. Type: boolean (or Expression with resultType boolean).
	EnableLogging interface{} `pulumi:"enableLogging"`
	// Linked service reference.
	LinkedServiceName *LinkedServiceReferenceResponse `pulumi:"linkedServiceName"`
	// Log storage settings customer need to provide when enableLogging is true.
	LogStorageSettings *LogStorageSettingsResponse `pulumi:"logStorageSettings"`
	// The max concurrent connections to connect data source at the same time.
	MaxConcurrentConnections *int `pulumi:"maxConcurrentConnections"`
	// Activity name.
	Name string `pulumi:"name"`
	// Activity policy.
	Policy *ActivityPolicyResponse `pulumi:"policy"`
	// If true, files or sub-folders under current folder path will be deleted recursively. Default is false. Type: boolean (or Expression with resultType boolean).
	Recursive interface{} `pulumi:"recursive"`
	// Delete activity store settings.
	StoreSettings interface{} `pulumi:"storeSettings"`
	// Type of activity.
	// Expected value is 'Delete'.
	Type string `pulumi:"type"`
	// Activity user properties.
	UserProperties []UserPropertyResponse `pulumi:"userProperties"`
}

// Delimited text dataset.
type DelimitedTextDataset struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// The column delimiter. Type: string (or Expression with resultType string).
	ColumnDelimiter interface{} `pulumi:"columnDelimiter"`
	// The data compressionCodec. Type: string (or Expression with resultType string).
	CompressionCodec interface{} `pulumi:"compressionCodec"`
	// The data compression method used for DelimitedText.
	CompressionLevel interface{} `pulumi:"compressionLevel"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The code page name of the preferred encoding. If miss, the default value is UTF-8, unless BOM denotes another Unicode encoding. Refer to the name column of the table in the following link to set supported values: https://msdn.microsoft.com/library/system.text.encoding.aspx. Type: string (or Expression with resultType string).
	EncodingName interface{} `pulumi:"encodingName"`
	// The escape character. Type: string (or Expression with resultType string).
	EscapeChar interface{} `pulumi:"escapeChar"`
	// When used as input, treat the first row of data as headers. When used as output,write the headers into the output as the first row of data. The default value is false. Type: boolean (or Expression with resultType boolean).
	FirstRowAsHeader interface{} `pulumi:"firstRowAsHeader"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReference `pulumi:"linkedServiceName"`
	// The location of the delimited text storage.
	Location interface{} `pulumi:"location"`
	// The null value string. Type: string (or Expression with resultType string).
	NullValue interface{} `pulumi:"nullValue"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// The quote character. Type: string (or Expression with resultType string).
	QuoteChar interface{} `pulumi:"quoteChar"`
	// The row delimiter. Type: string (or Expression with resultType string).
	RowDelimiter interface{} `pulumi:"rowDelimiter"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// Type of dataset.
	// Expected value is 'DelimitedText'.
	Type string `pulumi:"type"`
}

// Delimited text dataset.
type DelimitedTextDatasetResponse struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// The column delimiter. Type: string (or Expression with resultType string).
	ColumnDelimiter interface{} `pulumi:"columnDelimiter"`
	// The data compressionCodec. Type: string (or Expression with resultType string).
	CompressionCodec interface{} `pulumi:"compressionCodec"`
	// The data compression method used for DelimitedText.
	CompressionLevel interface{} `pulumi:"compressionLevel"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The code page name of the preferred encoding. If miss, the default value is UTF-8, unless BOM denotes another Unicode encoding. Refer to the name column of the table in the following link to set supported values: https://msdn.microsoft.com/library/system.text.encoding.aspx. Type: string (or Expression with resultType string).
	EncodingName interface{} `pulumi:"encodingName"`
	// The escape character. Type: string (or Expression with resultType string).
	EscapeChar interface{} `pulumi:"escapeChar"`
	// When used as input, treat the first row of data as headers. When used as output,write the headers into the output as the first row of data. The default value is false. Type: boolean (or Expression with resultType boolean).
	FirstRowAsHeader interface{} `pulumi:"firstRowAsHeader"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetResponseFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceResponse `pulumi:"linkedServiceName"`
	// The location of the delimited text storage.
	Location interface{} `pulumi:"location"`
	// The null value string. Type: string (or Expression with resultType string).
	NullValue interface{} `pulumi:"nullValue"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// The quote character. Type: string (or Expression with resultType string).
	QuoteChar interface{} `pulumi:"quoteChar"`
	// The row delimiter. Type: string (or Expression with resultType string).
	RowDelimiter interface{} `pulumi:"rowDelimiter"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// Type of dataset.
	// Expected value is 'DelimitedText'.
	Type string `pulumi:"type"`
}

// Delimited text read settings.
type DelimitedTextReadSettings struct {
	// Compression settings.
	CompressionProperties interface{} `pulumi:"compressionProperties"`
	// Indicates the number of non-empty rows to skip when reading data from input files. Type: integer (or Expression with resultType integer).
	SkipLineCount interface{} `pulumi:"skipLineCount"`
	// The read setting type.
	// Expected value is 'DelimitedTextReadSettings'.
	Type string `pulumi:"type"`
}

// Delimited text read settings.
type DelimitedTextReadSettingsResponse struct {
	// Compression settings.
	CompressionProperties interface{} `pulumi:"compressionProperties"`
	// Indicates the number of non-empty rows to skip when reading data from input files. Type: integer (or Expression with resultType integer).
	SkipLineCount interface{} `pulumi:"skipLineCount"`
	// The read setting type.
	// Expected value is 'DelimitedTextReadSettings'.
	Type string `pulumi:"type"`
}

// A copy activity DelimitedText sink.
type DelimitedTextSink struct {
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// DelimitedText format settings.
	FormatSettings *DelimitedTextWriteSettings `pulumi:"formatSettings"`
	// The maximum concurrent connection count for the sink data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// Sink retry count. Type: integer (or Expression with resultType integer).
	SinkRetryCount interface{} `pulumi:"sinkRetryCount"`
	// Sink retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SinkRetryWait interface{} `pulumi:"sinkRetryWait"`
	// DelimitedText store settings.
	StoreSettings interface{} `pulumi:"storeSettings"`
	// Copy sink type.
	// Expected value is 'DelimitedTextSink'.
	Type string `pulumi:"type"`
	// Write batch size. Type: integer (or Expression with resultType integer), minimum: 0.
	WriteBatchSize interface{} `pulumi:"writeBatchSize"`
	// Write batch timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	WriteBatchTimeout interface{} `pulumi:"writeBatchTimeout"`
}

// A copy activity DelimitedText sink.
type DelimitedTextSinkResponse struct {
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// DelimitedText format settings.
	FormatSettings *DelimitedTextWriteSettingsResponse `pulumi:"formatSettings"`
	// The maximum concurrent connection count for the sink data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// Sink retry count. Type: integer (or Expression with resultType integer).
	SinkRetryCount interface{} `pulumi:"sinkRetryCount"`
	// Sink retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SinkRetryWait interface{} `pulumi:"sinkRetryWait"`
	// DelimitedText store settings.
	StoreSettings interface{} `pulumi:"storeSettings"`
	// Copy sink type.
	// Expected value is 'DelimitedTextSink'.
	Type string `pulumi:"type"`
	// Write batch size. Type: integer (or Expression with resultType integer), minimum: 0.
	WriteBatchSize interface{} `pulumi:"writeBatchSize"`
	// Write batch timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	WriteBatchTimeout interface{} `pulumi:"writeBatchTimeout"`
}

// A copy activity DelimitedText source.
type DelimitedTextSource struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns interface{} `pulumi:"additionalColumns"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// DelimitedText format settings.
	FormatSettings *DelimitedTextReadSettings `pulumi:"formatSettings"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// DelimitedText store settings.
	StoreSettings interface{} `pulumi:"storeSettings"`
	// Copy source type.
	// Expected value is 'DelimitedTextSource'.
	Type string `pulumi:"type"`
}

// A copy activity DelimitedText source.
type DelimitedTextSourceResponse struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns interface{} `pulumi:"additionalColumns"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// DelimitedText format settings.
	FormatSettings *DelimitedTextReadSettingsResponse `pulumi:"formatSettings"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// DelimitedText store settings.
	StoreSettings interface{} `pulumi:"storeSettings"`
	// Copy source type.
	// Expected value is 'DelimitedTextSource'.
	Type string `pulumi:"type"`
}

// Delimited text write settings.
type DelimitedTextWriteSettings struct {
	// The file extension used to create the files. Type: string (or Expression with resultType string).
	FileExtension interface{} `pulumi:"fileExtension"`
	// Specifies the file name pattern <fileNamePrefix>_<fileIndex>.<fileExtension> when copy from non-file based store without partitionOptions. Type: string (or Expression with resultType string).
	FileNamePrefix interface{} `pulumi:"fileNamePrefix"`
	// Limit the written file's row count to be smaller than or equal to the specified count. Type: integer (or Expression with resultType integer).
	MaxRowsPerFile interface{} `pulumi:"maxRowsPerFile"`
	// Indicates whether string values should always be enclosed with quotes. Type: boolean (or Expression with resultType boolean).
	QuoteAllText interface{} `pulumi:"quoteAllText"`
	// The write setting type.
	// Expected value is 'DelimitedTextWriteSettings'.
	Type string `pulumi:"type"`
}

// Delimited text write settings.
type DelimitedTextWriteSettingsResponse struct {
	// The file extension used to create the files. Type: string (or Expression with resultType string).
	FileExtension interface{} `pulumi:"fileExtension"`
	// Specifies the file name pattern <fileNamePrefix>_<fileIndex>.<fileExtension> when copy from non-file based store without partitionOptions. Type: string (or Expression with resultType string).
	FileNamePrefix interface{} `pulumi:"fileNamePrefix"`
	// Limit the written file's row count to be smaller than or equal to the specified count. Type: integer (or Expression with resultType integer).
	MaxRowsPerFile interface{} `pulumi:"maxRowsPerFile"`
	// Indicates whether string values should always be enclosed with quotes. Type: boolean (or Expression with resultType boolean).
	QuoteAllText interface{} `pulumi:"quoteAllText"`
	// The write setting type.
	// Expected value is 'DelimitedTextWriteSettings'.
	Type string `pulumi:"type"`
}

// Distcp settings.
type DistcpSettings struct {
	// Specifies the Distcp options. Type: string (or Expression with resultType string).
	DistcpOptions interface{} `pulumi:"distcpOptions"`
	// Specifies the Yarn ResourceManager endpoint. Type: string (or Expression with resultType string).
	ResourceManagerEndpoint interface{} `pulumi:"resourceManagerEndpoint"`
	// Specifies an existing folder path which will be used to store temp Distcp command script. The script file is generated by ADF and will be removed after Copy job finished. Type: string (or Expression with resultType string).
	TempScriptPath interface{} `pulumi:"tempScriptPath"`
}

// Distcp settings.
type DistcpSettingsResponse struct {
	// Specifies the Distcp options. Type: string (or Expression with resultType string).
	DistcpOptions interface{} `pulumi:"distcpOptions"`
	// Specifies the Yarn ResourceManager endpoint. Type: string (or Expression with resultType string).
	ResourceManagerEndpoint interface{} `pulumi:"resourceManagerEndpoint"`
	// Specifies an existing folder path which will be used to store temp Distcp command script. The script file is generated by ADF and will be removed after Copy job finished. Type: string (or Expression with resultType string).
	TempScriptPath interface{} `pulumi:"tempScriptPath"`
}

// Microsoft Azure Document Database Collection dataset.
type DocumentDbCollectionDataset struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Document Database collection name. Type: string (or Expression with resultType string).
	CollectionName interface{} `pulumi:"collectionName"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReference `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// Type of dataset.
	// Expected value is 'DocumentDbCollection'.
	Type string `pulumi:"type"`
}

// Microsoft Azure Document Database Collection dataset.
type DocumentDbCollectionDatasetResponse struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Document Database collection name. Type: string (or Expression with resultType string).
	CollectionName interface{} `pulumi:"collectionName"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetResponseFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceResponse `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// Type of dataset.
	// Expected value is 'DocumentDbCollection'.
	Type string `pulumi:"type"`
}

// A copy activity Document Database Collection sink.
type DocumentDbCollectionSink struct {
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the sink data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// Nested properties separator. Default is . (dot). Type: string (or Expression with resultType string).
	NestingSeparator interface{} `pulumi:"nestingSeparator"`
	// Sink retry count. Type: integer (or Expression with resultType integer).
	SinkRetryCount interface{} `pulumi:"sinkRetryCount"`
	// Sink retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SinkRetryWait interface{} `pulumi:"sinkRetryWait"`
	// Copy sink type.
	// Expected value is 'DocumentDbCollectionSink'.
	Type string `pulumi:"type"`
	// Write batch size. Type: integer (or Expression with resultType integer), minimum: 0.
	WriteBatchSize interface{} `pulumi:"writeBatchSize"`
	// Write batch timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	WriteBatchTimeout interface{} `pulumi:"writeBatchTimeout"`
	// Describes how to write data to Azure Cosmos DB. Type: string (or Expression with resultType string). Allowed values: insert and upsert.
	WriteBehavior interface{} `pulumi:"writeBehavior"`
}

// A copy activity Document Database Collection sink.
type DocumentDbCollectionSinkResponse struct {
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the sink data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// Nested properties separator. Default is . (dot). Type: string (or Expression with resultType string).
	NestingSeparator interface{} `pulumi:"nestingSeparator"`
	// Sink retry count. Type: integer (or Expression with resultType integer).
	SinkRetryCount interface{} `pulumi:"sinkRetryCount"`
	// Sink retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SinkRetryWait interface{} `pulumi:"sinkRetryWait"`
	// Copy sink type.
	// Expected value is 'DocumentDbCollectionSink'.
	Type string `pulumi:"type"`
	// Write batch size. Type: integer (or Expression with resultType integer), minimum: 0.
	WriteBatchSize interface{} `pulumi:"writeBatchSize"`
	// Write batch timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	WriteBatchTimeout interface{} `pulumi:"writeBatchTimeout"`
	// Describes how to write data to Azure Cosmos DB. Type: string (or Expression with resultType string). Allowed values: insert and upsert.
	WriteBehavior interface{} `pulumi:"writeBehavior"`
}

// A copy activity Document Database Collection source.
type DocumentDbCollectionSource struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns interface{} `pulumi:"additionalColumns"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// Nested properties separator. Type: string (or Expression with resultType string).
	NestingSeparator interface{} `pulumi:"nestingSeparator"`
	// Documents query. Type: string (or Expression with resultType string).
	Query interface{} `pulumi:"query"`
	// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	QueryTimeout interface{} `pulumi:"queryTimeout"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// Copy source type.
	// Expected value is 'DocumentDbCollectionSource'.
	Type string `pulumi:"type"`
}

// A copy activity Document Database Collection source.
type DocumentDbCollectionSourceResponse struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns interface{} `pulumi:"additionalColumns"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// Nested properties separator. Type: string (or Expression with resultType string).
	NestingSeparator interface{} `pulumi:"nestingSeparator"`
	// Documents query. Type: string (or Expression with resultType string).
	Query interface{} `pulumi:"query"`
	// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	QueryTimeout interface{} `pulumi:"queryTimeout"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// Copy source type.
	// Expected value is 'DocumentDbCollectionSource'.
	Type string `pulumi:"type"`
}

// Drill server linked service.
type DrillLinkedService struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference `pulumi:"connectVia"`
	// An ODBC connection string. Type: string, SecureString or AzureKeyVaultSecretReference.
	ConnectionString interface{} `pulumi:"connectionString"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential interface{} `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// The Azure key vault secret reference of password in connection string.
	Pwd *AzureKeyVaultSecretReference `pulumi:"pwd"`
	// Type of linked service.
	// Expected value is 'Drill'.
	Type string `pulumi:"type"`
}

// Drill server linked service.
type DrillLinkedServiceResponse struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReferenceResponse `pulumi:"connectVia"`
	// An ODBC connection string. Type: string, SecureString or AzureKeyVaultSecretReference.
	ConnectionString interface{} `pulumi:"connectionString"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential interface{} `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// The Azure key vault secret reference of password in connection string.
	Pwd *AzureKeyVaultSecretReferenceResponse `pulumi:"pwd"`
	// Type of linked service.
	// Expected value is 'Drill'.
	Type string `pulumi:"type"`
}

// A copy activity Drill server source.
type DrillSource struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns interface{} `pulumi:"additionalColumns"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// A query to retrieve data from source. Type: string (or Expression with resultType string).
	Query interface{} `pulumi:"query"`
	// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	QueryTimeout interface{} `pulumi:"queryTimeout"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// Copy source type.
	// Expected value is 'DrillSource'.
	Type string `pulumi:"type"`
}

// A copy activity Drill server source.
type DrillSourceResponse struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns interface{} `pulumi:"additionalColumns"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// A query to retrieve data from source. Type: string (or Expression with resultType string).
	Query interface{} `pulumi:"query"`
	// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	QueryTimeout interface{} `pulumi:"queryTimeout"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// Copy source type.
	// Expected value is 'DrillSource'.
	Type string `pulumi:"type"`
}

// Drill server dataset.
type DrillTableDataset struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReference `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// The table name of the Drill. Type: string (or Expression with resultType string).
	Table interface{} `pulumi:"table"`
	// This property will be retired. Please consider using schema + table properties instead.
	TableName interface{} `pulumi:"tableName"`
	// Type of dataset.
	// Expected value is 'DrillTable'.
	Type string `pulumi:"type"`
}

// Drill server dataset.
type DrillTableDatasetResponse struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetResponseFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceResponse `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// The table name of the Drill. Type: string (or Expression with resultType string).
	Table interface{} `pulumi:"table"`
	// This property will be retired. Please consider using schema + table properties instead.
	TableName interface{} `pulumi:"tableName"`
	// Type of dataset.
	// Expected value is 'DrillTable'.
	Type string `pulumi:"type"`
}

// Dynamics AX linked service.
type DynamicsAXLinkedService struct {
	// Specify the resource you are requesting authorization. Type: string (or Expression with resultType string).
	AadResourceId interface{} `pulumi:"aadResourceId"`
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference `pulumi:"connectVia"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential interface{} `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Specify the application's client ID. Type: string (or Expression with resultType string).
	ServicePrincipalId interface{} `pulumi:"servicePrincipalId"`
	// Specify the application's key. Mark this field as a SecureString to store it securely in Data Factory, or reference a secret stored in Azure Key Vault. Type: string (or Expression with resultType string).
	ServicePrincipalKey interface{} `pulumi:"servicePrincipalKey"`
	// Specify the tenant information (domain name or tenant ID) under which your application resides. Retrieve it by hovering the mouse in the top-right corner of the Azure portal. Type: string (or Expression with resultType string).
	Tenant interface{} `pulumi:"tenant"`
	// Type of linked service.
	// Expected value is 'DynamicsAX'.
	Type string `pulumi:"type"`
	// The Dynamics AX (or Dynamics 365 Finance and Operations) instance OData endpoint.
	Url interface{} `pulumi:"url"`
}

// Dynamics AX linked service.
type DynamicsAXLinkedServiceResponse struct {
	// Specify the resource you are requesting authorization. Type: string (or Expression with resultType string).
	AadResourceId interface{} `pulumi:"aadResourceId"`
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReferenceResponse `pulumi:"connectVia"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential interface{} `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Specify the application's client ID. Type: string (or Expression with resultType string).
	ServicePrincipalId interface{} `pulumi:"servicePrincipalId"`
	// Specify the application's key. Mark this field as a SecureString to store it securely in Data Factory, or reference a secret stored in Azure Key Vault. Type: string (or Expression with resultType string).
	ServicePrincipalKey interface{} `pulumi:"servicePrincipalKey"`
	// Specify the tenant information (domain name or tenant ID) under which your application resides. Retrieve it by hovering the mouse in the top-right corner of the Azure portal. Type: string (or Expression with resultType string).
	Tenant interface{} `pulumi:"tenant"`
	// Type of linked service.
	// Expected value is 'DynamicsAX'.
	Type string `pulumi:"type"`
	// The Dynamics AX (or Dynamics 365 Finance and Operations) instance OData endpoint.
	Url interface{} `pulumi:"url"`
}

// The path of the Dynamics AX OData entity.
type DynamicsAXResourceDataset struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReference `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// The path of the Dynamics AX OData entity. Type: string (or Expression with resultType string).
	Path interface{} `pulumi:"path"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// Type of dataset.
	// Expected value is 'DynamicsAXResource'.
	Type string `pulumi:"type"`
}

// The path of the Dynamics AX OData entity.
type DynamicsAXResourceDatasetResponse struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetResponseFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceResponse `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// The path of the Dynamics AX OData entity. Type: string (or Expression with resultType string).
	Path interface{} `pulumi:"path"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// Type of dataset.
	// Expected value is 'DynamicsAXResource'.
	Type string `pulumi:"type"`
}

// A copy activity Dynamics AX source.
type DynamicsAXSource struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns interface{} `pulumi:"additionalColumns"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The timeout (TimeSpan) to get an HTTP response. It is the timeout to get a response, not the timeout to read response data. Default value: 00:05:00. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	HttpRequestTimeout interface{} `pulumi:"httpRequestTimeout"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// A query to retrieve data from source. Type: string (or Expression with resultType string).
	Query interface{} `pulumi:"query"`
	// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	QueryTimeout interface{} `pulumi:"queryTimeout"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// Copy source type.
	// Expected value is 'DynamicsAXSource'.
	Type string `pulumi:"type"`
}

// A copy activity Dynamics AX source.
type DynamicsAXSourceResponse struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns interface{} `pulumi:"additionalColumns"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The timeout (TimeSpan) to get an HTTP response. It is the timeout to get a response, not the timeout to read response data. Default value: 00:05:00. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	HttpRequestTimeout interface{} `pulumi:"httpRequestTimeout"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// A query to retrieve data from source. Type: string (or Expression with resultType string).
	Query interface{} `pulumi:"query"`
	// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	QueryTimeout interface{} `pulumi:"queryTimeout"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// Copy source type.
	// Expected value is 'DynamicsAXSource'.
	Type string `pulumi:"type"`
}

// The Dynamics CRM entity dataset.
type DynamicsCrmEntityDataset struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The logical name of the entity. Type: string (or Expression with resultType string).
	EntityName interface{} `pulumi:"entityName"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReference `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// Type of dataset.
	// Expected value is 'DynamicsCrmEntity'.
	Type string `pulumi:"type"`
}

// The Dynamics CRM entity dataset.
type DynamicsCrmEntityDatasetResponse struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The logical name of the entity. Type: string (or Expression with resultType string).
	EntityName interface{} `pulumi:"entityName"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetResponseFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceResponse `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// Type of dataset.
	// Expected value is 'DynamicsCrmEntity'.
	Type string `pulumi:"type"`
}

// Dynamics CRM linked service.
type DynamicsCrmLinkedService struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The authentication type to connect to Dynamics CRM server. 'Office365' for online scenario, 'Ifd' for on-premises with Ifd scenario, 'AADServicePrincipal' for Server-To-Server authentication in online scenario. Type: string (or Expression with resultType string).
	AuthenticationType interface{} `pulumi:"authenticationType"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference `pulumi:"connectVia"`
	// The deployment type of the Dynamics CRM instance. 'Online' for Dynamics CRM Online and 'OnPremisesWithIfd' for Dynamics CRM on-premises with Ifd. Type: string (or Expression with resultType string).
	DeploymentType interface{} `pulumi:"deploymentType"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential interface{} `pulumi:"encryptedCredential"`
	// The host name of the on-premises Dynamics CRM server. The property is required for on-prem and not allowed for online. Type: string (or Expression with resultType string).
	HostName interface{} `pulumi:"hostName"`
	// The organization name of the Dynamics CRM instance. The property is required for on-prem and required for online when there are more than one Dynamics CRM instances associated with the user. Type: string (or Expression with resultType string).
	OrganizationName interface{} `pulumi:"organizationName"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Password to access the Dynamics CRM instance.
	Password interface{} `pulumi:"password"`
	// The port of on-premises Dynamics CRM server. The property is required for on-prem and not allowed for online. Default is 443. Type: integer (or Expression with resultType integer), minimum: 0.
	Port interface{} `pulumi:"port"`
	// The credential of the service principal object in Azure Active Directory. If servicePrincipalCredentialType is 'ServicePrincipalKey', servicePrincipalCredential can be SecureString or AzureKeyVaultSecretReference. If servicePrincipalCredentialType is 'ServicePrincipalCert', servicePrincipalCredential can only be AzureKeyVaultSecretReference.
	ServicePrincipalCredential interface{} `pulumi:"servicePrincipalCredential"`
	// The service principal credential type to use in Server-To-Server authentication. 'ServicePrincipalKey' for key/secret, 'ServicePrincipalCert' for certificate. Type: string (or Expression with resultType string).
	ServicePrincipalCredentialType interface{} `pulumi:"servicePrincipalCredentialType"`
	// The client ID of the application in Azure Active Directory used for Server-To-Server authentication. Type: string (or Expression with resultType string).
	ServicePrincipalId interface{} `pulumi:"servicePrincipalId"`
	// The URL to the Microsoft Dynamics CRM server. The property is required for on-line and not allowed for on-prem. Type: string (or Expression with resultType string).
	ServiceUri interface{} `pulumi:"serviceUri"`
	// Type of linked service.
	// Expected value is 'DynamicsCrm'.
	Type string `pulumi:"type"`
	// User name to access the Dynamics CRM instance. Type: string (or Expression with resultType string).
	Username interface{} `pulumi:"username"`
}

// Dynamics CRM linked service.
type DynamicsCrmLinkedServiceResponse struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The authentication type to connect to Dynamics CRM server. 'Office365' for online scenario, 'Ifd' for on-premises with Ifd scenario, 'AADServicePrincipal' for Server-To-Server authentication in online scenario. Type: string (or Expression with resultType string).
	AuthenticationType interface{} `pulumi:"authenticationType"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReferenceResponse `pulumi:"connectVia"`
	// The deployment type of the Dynamics CRM instance. 'Online' for Dynamics CRM Online and 'OnPremisesWithIfd' for Dynamics CRM on-premises with Ifd. Type: string (or Expression with resultType string).
	DeploymentType interface{} `pulumi:"deploymentType"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential interface{} `pulumi:"encryptedCredential"`
	// The host name of the on-premises Dynamics CRM server. The property is required for on-prem and not allowed for online. Type: string (or Expression with resultType string).
	HostName interface{} `pulumi:"hostName"`
	// The organization name of the Dynamics CRM instance. The property is required for on-prem and required for online when there are more than one Dynamics CRM instances associated with the user. Type: string (or Expression with resultType string).
	OrganizationName interface{} `pulumi:"organizationName"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Password to access the Dynamics CRM instance.
	Password interface{} `pulumi:"password"`
	// The port of on-premises Dynamics CRM server. The property is required for on-prem and not allowed for online. Default is 443. Type: integer (or Expression with resultType integer), minimum: 0.
	Port interface{} `pulumi:"port"`
	// The credential of the service principal object in Azure Active Directory. If servicePrincipalCredentialType is 'ServicePrincipalKey', servicePrincipalCredential can be SecureString or AzureKeyVaultSecretReference. If servicePrincipalCredentialType is 'ServicePrincipalCert', servicePrincipalCredential can only be AzureKeyVaultSecretReference.
	ServicePrincipalCredential interface{} `pulumi:"servicePrincipalCredential"`
	// The service principal credential type to use in Server-To-Server authentication. 'ServicePrincipalKey' for key/secret, 'ServicePrincipalCert' for certificate. Type: string (or Expression with resultType string).
	ServicePrincipalCredentialType interface{} `pulumi:"servicePrincipalCredentialType"`
	// The client ID of the application in Azure Active Directory used for Server-To-Server authentication. Type: string (or Expression with resultType string).
	ServicePrincipalId interface{} `pulumi:"servicePrincipalId"`
	// The URL to the Microsoft Dynamics CRM server. The property is required for on-line and not allowed for on-prem. Type: string (or Expression with resultType string).
	ServiceUri interface{} `pulumi:"serviceUri"`
	// Type of linked service.
	// Expected value is 'DynamicsCrm'.
	Type string `pulumi:"type"`
	// User name to access the Dynamics CRM instance. Type: string (or Expression with resultType string).
	Username interface{} `pulumi:"username"`
}

// A copy activity Dynamics CRM sink.
type DynamicsCrmSink struct {
	// The logical name of the alternate key which will be used when upserting records. Type: string (or Expression with resultType string).
	AlternateKeyName interface{} `pulumi:"alternateKeyName"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The flag indicating whether to ignore null values from input dataset (except key fields) during write operation. Default is false. Type: boolean (or Expression with resultType boolean).
	IgnoreNullValues interface{} `pulumi:"ignoreNullValues"`
	// The maximum concurrent connection count for the sink data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// Sink retry count. Type: integer (or Expression with resultType integer).
	SinkRetryCount interface{} `pulumi:"sinkRetryCount"`
	// Sink retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SinkRetryWait interface{} `pulumi:"sinkRetryWait"`
	// Copy sink type.
	// Expected value is 'DynamicsCrmSink'.
	Type string `pulumi:"type"`
	// Write batch size. Type: integer (or Expression with resultType integer), minimum: 0.
	WriteBatchSize interface{} `pulumi:"writeBatchSize"`
	// Write batch timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	WriteBatchTimeout interface{} `pulumi:"writeBatchTimeout"`
	// The write behavior for the operation.
	WriteBehavior string `pulumi:"writeBehavior"`
}

// A copy activity Dynamics CRM sink.
type DynamicsCrmSinkResponse struct {
	// The logical name of the alternate key which will be used when upserting records. Type: string (or Expression with resultType string).
	AlternateKeyName interface{} `pulumi:"alternateKeyName"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The flag indicating whether to ignore null values from input dataset (except key fields) during write operation. Default is false. Type: boolean (or Expression with resultType boolean).
	IgnoreNullValues interface{} `pulumi:"ignoreNullValues"`
	// The maximum concurrent connection count for the sink data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// Sink retry count. Type: integer (or Expression with resultType integer).
	SinkRetryCount interface{} `pulumi:"sinkRetryCount"`
	// Sink retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SinkRetryWait interface{} `pulumi:"sinkRetryWait"`
	// Copy sink type.
	// Expected value is 'DynamicsCrmSink'.
	Type string `pulumi:"type"`
	// Write batch size. Type: integer (or Expression with resultType integer), minimum: 0.
	WriteBatchSize interface{} `pulumi:"writeBatchSize"`
	// Write batch timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	WriteBatchTimeout interface{} `pulumi:"writeBatchTimeout"`
	// The write behavior for the operation.
	WriteBehavior string `pulumi:"writeBehavior"`
}

// A copy activity Dynamics CRM source.
type DynamicsCrmSource struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns interface{} `pulumi:"additionalColumns"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// FetchXML is a proprietary query language that is used in Microsoft Dynamics CRM (online & on-premises). Type: string (or Expression with resultType string).
	Query interface{} `pulumi:"query"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// Copy source type.
	// Expected value is 'DynamicsCrmSource'.
	Type string `pulumi:"type"`
}

// A copy activity Dynamics CRM source.
type DynamicsCrmSourceResponse struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns interface{} `pulumi:"additionalColumns"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// FetchXML is a proprietary query language that is used in Microsoft Dynamics CRM (online & on-premises). Type: string (or Expression with resultType string).
	Query interface{} `pulumi:"query"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// Copy source type.
	// Expected value is 'DynamicsCrmSource'.
	Type string `pulumi:"type"`
}

// The Dynamics entity dataset.
type DynamicsEntityDataset struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The logical name of the entity. Type: string (or Expression with resultType string).
	EntityName interface{} `pulumi:"entityName"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReference `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// Type of dataset.
	// Expected value is 'DynamicsEntity'.
	Type string `pulumi:"type"`
}

// The Dynamics entity dataset.
type DynamicsEntityDatasetResponse struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The logical name of the entity. Type: string (or Expression with resultType string).
	EntityName interface{} `pulumi:"entityName"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetResponseFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceResponse `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// Type of dataset.
	// Expected value is 'DynamicsEntity'.
	Type string `pulumi:"type"`
}

// Dynamics linked service.
type DynamicsLinkedService struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The authentication type to connect to Dynamics server. 'Office365' for online scenario, 'Ifd' for on-premises with Ifd scenario, 'AADServicePrincipal' for Server-To-Server authentication in online scenario. Type: string (or Expression with resultType string).
	AuthenticationType interface{} `pulumi:"authenticationType"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference `pulumi:"connectVia"`
	// The credential reference containing authentication information.
	Credential *CredentialReference `pulumi:"credential"`
	// The deployment type of the Dynamics instance. 'Online' for Dynamics Online and 'OnPremisesWithIfd' for Dynamics on-premises with Ifd. Type: string (or Expression with resultType string).
	DeploymentType interface{} `pulumi:"deploymentType"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential interface{} `pulumi:"encryptedCredential"`
	// The host name of the on-premises Dynamics server. The property is required for on-prem and not allowed for online. Type: string (or Expression with resultType string).
	HostName interface{} `pulumi:"hostName"`
	// The organization name of the Dynamics instance. The property is required for on-prem and required for online when there are more than one Dynamics instances associated with the user. Type: string (or Expression with resultType string).
	OrganizationName interface{} `pulumi:"organizationName"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Password to access the Dynamics instance.
	Password interface{} `pulumi:"password"`
	// The port of on-premises Dynamics server. The property is required for on-prem and not allowed for online. Default is 443. Type: integer (or Expression with resultType integer), minimum: 0.
	Port interface{} `pulumi:"port"`
	// The credential of the service principal object in Azure Active Directory. If servicePrincipalCredentialType is 'ServicePrincipalKey', servicePrincipalCredential can be SecureString or AzureKeyVaultSecretReference. If servicePrincipalCredentialType is 'ServicePrincipalCert', servicePrincipalCredential can only be AzureKeyVaultSecretReference.
	ServicePrincipalCredential interface{} `pulumi:"servicePrincipalCredential"`
	// The service principal credential type to use in Server-To-Server authentication. 'ServicePrincipalKey' for key/secret, 'ServicePrincipalCert' for certificate. Type: string (or Expression with resultType string).
	ServicePrincipalCredentialType interface{} `pulumi:"servicePrincipalCredentialType"`
	// The client ID of the application in Azure Active Directory used for Server-To-Server authentication. Type: string (or Expression with resultType string).
	ServicePrincipalId interface{} `pulumi:"servicePrincipalId"`
	// The URL to the Microsoft Dynamics server. The property is required for on-line and not allowed for on-prem. Type: string (or Expression with resultType string).
	ServiceUri interface{} `pulumi:"serviceUri"`
	// Type of linked service.
	// Expected value is 'Dynamics'.
	Type string `pulumi:"type"`
	// User name to access the Dynamics instance. Type: string (or Expression with resultType string).
	Username interface{} `pulumi:"username"`
}

// Dynamics linked service.
type DynamicsLinkedServiceResponse struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The authentication type to connect to Dynamics server. 'Office365' for online scenario, 'Ifd' for on-premises with Ifd scenario, 'AADServicePrincipal' for Server-To-Server authentication in online scenario. Type: string (or Expression with resultType string).
	AuthenticationType interface{} `pulumi:"authenticationType"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReferenceResponse `pulumi:"connectVia"`
	// The credential reference containing authentication information.
	Credential *CredentialReferenceResponse `pulumi:"credential"`
	// The deployment type of the Dynamics instance. 'Online' for Dynamics Online and 'OnPremisesWithIfd' for Dynamics on-premises with Ifd. Type: string (or Expression with resultType string).
	DeploymentType interface{} `pulumi:"deploymentType"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential interface{} `pulumi:"encryptedCredential"`
	// The host name of the on-premises Dynamics server. The property is required for on-prem and not allowed for online. Type: string (or Expression with resultType string).
	HostName interface{} `pulumi:"hostName"`
	// The organization name of the Dynamics instance. The property is required for on-prem and required for online when there are more than one Dynamics instances associated with the user. Type: string (or Expression with resultType string).
	OrganizationName interface{} `pulumi:"organizationName"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Password to access the Dynamics instance.
	Password interface{} `pulumi:"password"`
	// The port of on-premises Dynamics server. The property is required for on-prem and not allowed for online. Default is 443. Type: integer (or Expression with resultType integer), minimum: 0.
	Port interface{} `pulumi:"port"`
	// The credential of the service principal object in Azure Active Directory. If servicePrincipalCredentialType is 'ServicePrincipalKey', servicePrincipalCredential can be SecureString or AzureKeyVaultSecretReference. If servicePrincipalCredentialType is 'ServicePrincipalCert', servicePrincipalCredential can only be AzureKeyVaultSecretReference.
	ServicePrincipalCredential interface{} `pulumi:"servicePrincipalCredential"`
	// The service principal credential type to use in Server-To-Server authentication. 'ServicePrincipalKey' for key/secret, 'ServicePrincipalCert' for certificate. Type: string (or Expression with resultType string).
	ServicePrincipalCredentialType interface{} `pulumi:"servicePrincipalCredentialType"`
	// The client ID of the application in Azure Active Directory used for Server-To-Server authentication. Type: string (or Expression with resultType string).
	ServicePrincipalId interface{} `pulumi:"servicePrincipalId"`
	// The URL to the Microsoft Dynamics server. The property is required for on-line and not allowed for on-prem. Type: string (or Expression with resultType string).
	ServiceUri interface{} `pulumi:"serviceUri"`
	// Type of linked service.
	// Expected value is 'Dynamics'.
	Type string `pulumi:"type"`
	// User name to access the Dynamics instance. Type: string (or Expression with resultType string).
	Username interface{} `pulumi:"username"`
}

// A copy activity Dynamics sink.
type DynamicsSink struct {
	// The logical name of the alternate key which will be used when upserting records. Type: string (or Expression with resultType string).
	AlternateKeyName interface{} `pulumi:"alternateKeyName"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The flag indicating whether ignore null values from input dataset (except key fields) during write operation. Default is false. Type: boolean (or Expression with resultType boolean).
	IgnoreNullValues interface{} `pulumi:"ignoreNullValues"`
	// The maximum concurrent connection count for the sink data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// Sink retry count. Type: integer (or Expression with resultType integer).
	SinkRetryCount interface{} `pulumi:"sinkRetryCount"`
	// Sink retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SinkRetryWait interface{} `pulumi:"sinkRetryWait"`
	// Copy sink type.
	// Expected value is 'DynamicsSink'.
	Type string `pulumi:"type"`
	// Write batch size. Type: integer (or Expression with resultType integer), minimum: 0.
	WriteBatchSize interface{} `pulumi:"writeBatchSize"`
	// Write batch timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	WriteBatchTimeout interface{} `pulumi:"writeBatchTimeout"`
	// The write behavior for the operation.
	WriteBehavior string `pulumi:"writeBehavior"`
}

// A copy activity Dynamics sink.
type DynamicsSinkResponse struct {
	// The logical name of the alternate key which will be used when upserting records. Type: string (or Expression with resultType string).
	AlternateKeyName interface{} `pulumi:"alternateKeyName"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The flag indicating whether ignore null values from input dataset (except key fields) during write operation. Default is false. Type: boolean (or Expression with resultType boolean).
	IgnoreNullValues interface{} `pulumi:"ignoreNullValues"`
	// The maximum concurrent connection count for the sink data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// Sink retry count. Type: integer (or Expression with resultType integer).
	SinkRetryCount interface{} `pulumi:"sinkRetryCount"`
	// Sink retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SinkRetryWait interface{} `pulumi:"sinkRetryWait"`
	// Copy sink type.
	// Expected value is 'DynamicsSink'.
	Type string `pulumi:"type"`
	// Write batch size. Type: integer (or Expression with resultType integer), minimum: 0.
	WriteBatchSize interface{} `pulumi:"writeBatchSize"`
	// Write batch timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	WriteBatchTimeout interface{} `pulumi:"writeBatchTimeout"`
	// The write behavior for the operation.
	WriteBehavior string `pulumi:"writeBehavior"`
}

// A copy activity Dynamics source.
type DynamicsSource struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns interface{} `pulumi:"additionalColumns"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// FetchXML is a proprietary query language that is used in Microsoft Dynamics (online & on-premises). Type: string (or Expression with resultType string).
	Query interface{} `pulumi:"query"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// Copy source type.
	// Expected value is 'DynamicsSource'.
	Type string `pulumi:"type"`
}

// A copy activity Dynamics source.
type DynamicsSourceResponse struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns interface{} `pulumi:"additionalColumns"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// FetchXML is a proprietary query language that is used in Microsoft Dynamics (online & on-premises). Type: string (or Expression with resultType string).
	Query interface{} `pulumi:"query"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// Copy source type.
	// Expected value is 'DynamicsSource'.
	Type string `pulumi:"type"`
}

// Eloqua server linked service.
type EloquaLinkedService struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference `pulumi:"connectVia"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential interface{} `pulumi:"encryptedCredential"`
	// The endpoint of the Eloqua server. (i.e. eloqua.example.com)
	Endpoint interface{} `pulumi:"endpoint"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// The password corresponding to the user name.
	Password interface{} `pulumi:"password"`
	// Type of linked service.
	// Expected value is 'Eloqua'.
	Type string `pulumi:"type"`
	// Specifies whether the data source endpoints are encrypted using HTTPS. The default value is true.
	UseEncryptedEndpoints interface{} `pulumi:"useEncryptedEndpoints"`
	// Specifies whether to require the host name in the server's certificate to match the host name of the server when connecting over SSL. The default value is true.
	UseHostVerification interface{} `pulumi:"useHostVerification"`
	// Specifies whether to verify the identity of the server when connecting over SSL. The default value is true.
	UsePeerVerification interface{} `pulumi:"usePeerVerification"`
	// The site name and user name of your Eloqua account in the form: sitename/username. (i.e. Eloqua/Alice)
	Username interface{} `pulumi:"username"`
}

// Eloqua server linked service.
type EloquaLinkedServiceResponse struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReferenceResponse `pulumi:"connectVia"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential interface{} `pulumi:"encryptedCredential"`
	// The endpoint of the Eloqua server. (i.e. eloqua.example.com)
	Endpoint interface{} `pulumi:"endpoint"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// The password corresponding to the user name.
	Password interface{} `pulumi:"password"`
	// Type of linked service.
	// Expected value is 'Eloqua'.
	Type string `pulumi:"type"`
	// Specifies whether the data source endpoints are encrypted using HTTPS. The default value is true.
	UseEncryptedEndpoints interface{} `pulumi:"useEncryptedEndpoints"`
	// Specifies whether to require the host name in the server's certificate to match the host name of the server when connecting over SSL. The default value is true.
	UseHostVerification interface{} `pulumi:"useHostVerification"`
	// Specifies whether to verify the identity of the server when connecting over SSL. The default value is true.
	UsePeerVerification interface{} `pulumi:"usePeerVerification"`
	// The site name and user name of your Eloqua account in the form: sitename/username. (i.e. Eloqua/Alice)
	Username interface{} `pulumi:"username"`
}

// Eloqua server dataset.
type EloquaObjectDataset struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReference `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// The table name. Type: string (or Expression with resultType string).
	TableName interface{} `pulumi:"tableName"`
	// Type of dataset.
	// Expected value is 'EloquaObject'.
	Type string `pulumi:"type"`
}

// Eloqua server dataset.
type EloquaObjectDatasetResponse struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetResponseFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceResponse `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// The table name. Type: string (or Expression with resultType string).
	TableName interface{} `pulumi:"tableName"`
	// Type of dataset.
	// Expected value is 'EloquaObject'.
	Type string `pulumi:"type"`
}

// A copy activity Eloqua server source.
type EloquaSource struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns interface{} `pulumi:"additionalColumns"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// A query to retrieve data from source. Type: string (or Expression with resultType string).
	Query interface{} `pulumi:"query"`
	// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	QueryTimeout interface{} `pulumi:"queryTimeout"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// Copy source type.
	// Expected value is 'EloquaSource'.
	Type string `pulumi:"type"`
}

// A copy activity Eloqua server source.
type EloquaSourceResponse struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns interface{} `pulumi:"additionalColumns"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// A query to retrieve data from source. Type: string (or Expression with resultType string).
	Query interface{} `pulumi:"query"`
	// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	QueryTimeout interface{} `pulumi:"queryTimeout"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// Copy source type.
	// Expected value is 'EloquaSource'.
	Type string `pulumi:"type"`
}

// Definition of CMK for the factory.
type EncryptionConfiguration struct {
	// User assigned identity to use to authenticate to customer's key vault. If not provided Managed Service Identity will be used.
	Identity *CMKIdentityDefinition `pulumi:"identity"`
	// The name of the key in Azure Key Vault to use as Customer Managed Key.
	KeyName string `pulumi:"keyName"`
	// The version of the key used for CMK. If not provided, latest version will be used.
	KeyVersion *string `pulumi:"keyVersion"`
	// The url of the Azure Key Vault used for CMK.
	VaultBaseUrl string `pulumi:"vaultBaseUrl"`
}

// EncryptionConfigurationInput is an input type that accepts EncryptionConfigurationArgs and EncryptionConfigurationOutput values.
// You can construct a concrete instance of `EncryptionConfigurationInput` via:
//
//	EncryptionConfigurationArgs{...}
type EncryptionConfigurationInput interface {
	pulumi.Input

	ToEncryptionConfigurationOutput() EncryptionConfigurationOutput
	ToEncryptionConfigurationOutputWithContext(context.Context) EncryptionConfigurationOutput
}

// Definition of CMK for the factory.
type EncryptionConfigurationArgs struct {
	// User assigned identity to use to authenticate to customer's key vault. If not provided Managed Service Identity will be used.
	Identity CMKIdentityDefinitionPtrInput `pulumi:"identity"`
	// The name of the key in Azure Key Vault to use as Customer Managed Key.
	KeyName pulumi.StringInput `pulumi:"keyName"`
	// The version of the key used for CMK. If not provided, latest version will be used.
	KeyVersion pulumi.StringPtrInput `pulumi:"keyVersion"`
	// The url of the Azure Key Vault used for CMK.
	VaultBaseUrl pulumi.StringInput `pulumi:"vaultBaseUrl"`
}

func (EncryptionConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EncryptionConfiguration)(nil)).Elem()
}

func (i EncryptionConfigurationArgs) ToEncryptionConfigurationOutput() EncryptionConfigurationOutput {
	return i.ToEncryptionConfigurationOutputWithContext(context.Background())
}

func (i EncryptionConfigurationArgs) ToEncryptionConfigurationOutputWithContext(ctx context.Context) EncryptionConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EncryptionConfigurationOutput)
}

func (i EncryptionConfigurationArgs) ToEncryptionConfigurationPtrOutput() EncryptionConfigurationPtrOutput {
	return i.ToEncryptionConfigurationPtrOutputWithContext(context.Background())
}

func (i EncryptionConfigurationArgs) ToEncryptionConfigurationPtrOutputWithContext(ctx context.Context) EncryptionConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EncryptionConfigurationOutput).ToEncryptionConfigurationPtrOutputWithContext(ctx)
}

// EncryptionConfigurationPtrInput is an input type that accepts EncryptionConfigurationArgs, EncryptionConfigurationPtr and EncryptionConfigurationPtrOutput values.
// You can construct a concrete instance of `EncryptionConfigurationPtrInput` via:
//
//	        EncryptionConfigurationArgs{...}
//
//	or:
//
//	        nil
type EncryptionConfigurationPtrInput interface {
	pulumi.Input

	ToEncryptionConfigurationPtrOutput() EncryptionConfigurationPtrOutput
	ToEncryptionConfigurationPtrOutputWithContext(context.Context) EncryptionConfigurationPtrOutput
}

type encryptionConfigurationPtrType EncryptionConfigurationArgs

func EncryptionConfigurationPtr(v *EncryptionConfigurationArgs) EncryptionConfigurationPtrInput {
	return (*encryptionConfigurationPtrType)(v)
}

func (*encryptionConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**EncryptionConfiguration)(nil)).Elem()
}

func (i *encryptionConfigurationPtrType) ToEncryptionConfigurationPtrOutput() EncryptionConfigurationPtrOutput {
	return i.ToEncryptionConfigurationPtrOutputWithContext(context.Background())
}

func (i *encryptionConfigurationPtrType) ToEncryptionConfigurationPtrOutputWithContext(ctx context.Context) EncryptionConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EncryptionConfigurationPtrOutput)
}

// Definition of CMK for the factory.
type EncryptionConfigurationOutput struct{ *pulumi.OutputState }

func (EncryptionConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EncryptionConfiguration)(nil)).Elem()
}

func (o EncryptionConfigurationOutput) ToEncryptionConfigurationOutput() EncryptionConfigurationOutput {
	return o
}

func (o EncryptionConfigurationOutput) ToEncryptionConfigurationOutputWithContext(ctx context.Context) EncryptionConfigurationOutput {
	return o
}

func (o EncryptionConfigurationOutput) ToEncryptionConfigurationPtrOutput() EncryptionConfigurationPtrOutput {
	return o.ToEncryptionConfigurationPtrOutputWithContext(context.Background())
}

func (o EncryptionConfigurationOutput) ToEncryptionConfigurationPtrOutputWithContext(ctx context.Context) EncryptionConfigurationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v EncryptionConfiguration) *EncryptionConfiguration {
		return &v
	}).(EncryptionConfigurationPtrOutput)
}

// User assigned identity to use to authenticate to customer's key vault. If not provided Managed Service Identity will be used.
func (o EncryptionConfigurationOutput) Identity() CMKIdentityDefinitionPtrOutput {
	return o.ApplyT(func(v EncryptionConfiguration) *CMKIdentityDefinition { return v.Identity }).(CMKIdentityDefinitionPtrOutput)
}

// The name of the key in Azure Key Vault to use as Customer Managed Key.
func (o EncryptionConfigurationOutput) KeyName() pulumi.StringOutput {
	return o.ApplyT(func(v EncryptionConfiguration) string { return v.KeyName }).(pulumi.StringOutput)
}

// The version of the key used for CMK. If not provided, latest version will be used.
func (o EncryptionConfigurationOutput) KeyVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EncryptionConfiguration) *string { return v.KeyVersion }).(pulumi.StringPtrOutput)
}

// The url of the Azure Key Vault used for CMK.
func (o EncryptionConfigurationOutput) VaultBaseUrl() pulumi.StringOutput {
	return o.ApplyT(func(v EncryptionConfiguration) string { return v.VaultBaseUrl }).(pulumi.StringOutput)
}

type EncryptionConfigurationPtrOutput struct{ *pulumi.OutputState }

func (EncryptionConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EncryptionConfiguration)(nil)).Elem()
}

func (o EncryptionConfigurationPtrOutput) ToEncryptionConfigurationPtrOutput() EncryptionConfigurationPtrOutput {
	return o
}

func (o EncryptionConfigurationPtrOutput) ToEncryptionConfigurationPtrOutputWithContext(ctx context.Context) EncryptionConfigurationPtrOutput {
	return o
}

func (o EncryptionConfigurationPtrOutput) Elem() EncryptionConfigurationOutput {
	return o.ApplyT(func(v *EncryptionConfiguration) EncryptionConfiguration {
		if v != nil {
			return *v
		}
		var ret EncryptionConfiguration
		return ret
	}).(EncryptionConfigurationOutput)
}

// User assigned identity to use to authenticate to customer's key vault. If not provided Managed Service Identity will be used.
func (o EncryptionConfigurationPtrOutput) Identity() CMKIdentityDefinitionPtrOutput {
	return o.ApplyT(func(v *EncryptionConfiguration) *CMKIdentityDefinition {
		if v == nil {
			return nil
		}
		return v.Identity
	}).(CMKIdentityDefinitionPtrOutput)
}

// The name of the key in Azure Key Vault to use as Customer Managed Key.
func (o EncryptionConfigurationPtrOutput) KeyName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EncryptionConfiguration) *string {
		if v == nil {
			return nil
		}
		return &v.KeyName
	}).(pulumi.StringPtrOutput)
}

// The version of the key used for CMK. If not provided, latest version will be used.
func (o EncryptionConfigurationPtrOutput) KeyVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EncryptionConfiguration) *string {
		if v == nil {
			return nil
		}
		return v.KeyVersion
	}).(pulumi.StringPtrOutput)
}

// The url of the Azure Key Vault used for CMK.
func (o EncryptionConfigurationPtrOutput) VaultBaseUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EncryptionConfiguration) *string {
		if v == nil {
			return nil
		}
		return &v.VaultBaseUrl
	}).(pulumi.StringPtrOutput)
}

// Definition of CMK for the factory.
type EncryptionConfigurationResponse struct {
	// User assigned identity to use to authenticate to customer's key vault. If not provided Managed Service Identity will be used.
	Identity *CMKIdentityDefinitionResponse `pulumi:"identity"`
	// The name of the key in Azure Key Vault to use as Customer Managed Key.
	KeyName string `pulumi:"keyName"`
	// The version of the key used for CMK. If not provided, latest version will be used.
	KeyVersion *string `pulumi:"keyVersion"`
	// The url of the Azure Key Vault used for CMK.
	VaultBaseUrl string `pulumi:"vaultBaseUrl"`
}

// Definition of CMK for the factory.
type EncryptionConfigurationResponseOutput struct{ *pulumi.OutputState }

func (EncryptionConfigurationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EncryptionConfigurationResponse)(nil)).Elem()
}

func (o EncryptionConfigurationResponseOutput) ToEncryptionConfigurationResponseOutput() EncryptionConfigurationResponseOutput {
	return o
}

func (o EncryptionConfigurationResponseOutput) ToEncryptionConfigurationResponseOutputWithContext(ctx context.Context) EncryptionConfigurationResponseOutput {
	return o
}

// User assigned identity to use to authenticate to customer's key vault. If not provided Managed Service Identity will be used.
func (o EncryptionConfigurationResponseOutput) Identity() CMKIdentityDefinitionResponsePtrOutput {
	return o.ApplyT(func(v EncryptionConfigurationResponse) *CMKIdentityDefinitionResponse { return v.Identity }).(CMKIdentityDefinitionResponsePtrOutput)
}

// The name of the key in Azure Key Vault to use as Customer Managed Key.
func (o EncryptionConfigurationResponseOutput) KeyName() pulumi.StringOutput {
	return o.ApplyT(func(v EncryptionConfigurationResponse) string { return v.KeyName }).(pulumi.StringOutput)
}

// The version of the key used for CMK. If not provided, latest version will be used.
func (o EncryptionConfigurationResponseOutput) KeyVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EncryptionConfigurationResponse) *string { return v.KeyVersion }).(pulumi.StringPtrOutput)
}

// The url of the Azure Key Vault used for CMK.
func (o EncryptionConfigurationResponseOutput) VaultBaseUrl() pulumi.StringOutput {
	return o.ApplyT(func(v EncryptionConfigurationResponse) string { return v.VaultBaseUrl }).(pulumi.StringOutput)
}

type EncryptionConfigurationResponsePtrOutput struct{ *pulumi.OutputState }

func (EncryptionConfigurationResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EncryptionConfigurationResponse)(nil)).Elem()
}

func (o EncryptionConfigurationResponsePtrOutput) ToEncryptionConfigurationResponsePtrOutput() EncryptionConfigurationResponsePtrOutput {
	return o
}

func (o EncryptionConfigurationResponsePtrOutput) ToEncryptionConfigurationResponsePtrOutputWithContext(ctx context.Context) EncryptionConfigurationResponsePtrOutput {
	return o
}

func (o EncryptionConfigurationResponsePtrOutput) Elem() EncryptionConfigurationResponseOutput {
	return o.ApplyT(func(v *EncryptionConfigurationResponse) EncryptionConfigurationResponse {
		if v != nil {
			return *v
		}
		var ret EncryptionConfigurationResponse
		return ret
	}).(EncryptionConfigurationResponseOutput)
}

// User assigned identity to use to authenticate to customer's key vault. If not provided Managed Service Identity will be used.
func (o EncryptionConfigurationResponsePtrOutput) Identity() CMKIdentityDefinitionResponsePtrOutput {
	return o.ApplyT(func(v *EncryptionConfigurationResponse) *CMKIdentityDefinitionResponse {
		if v == nil {
			return nil
		}
		return v.Identity
	}).(CMKIdentityDefinitionResponsePtrOutput)
}

// The name of the key in Azure Key Vault to use as Customer Managed Key.
func (o EncryptionConfigurationResponsePtrOutput) KeyName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EncryptionConfigurationResponse) *string {
		if v == nil {
			return nil
		}
		return &v.KeyName
	}).(pulumi.StringPtrOutput)
}

// The version of the key used for CMK. If not provided, latest version will be used.
func (o EncryptionConfigurationResponsePtrOutput) KeyVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EncryptionConfigurationResponse) *string {
		if v == nil {
			return nil
		}
		return v.KeyVersion
	}).(pulumi.StringPtrOutput)
}

// The url of the Azure Key Vault used for CMK.
func (o EncryptionConfigurationResponsePtrOutput) VaultBaseUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EncryptionConfigurationResponse) *string {
		if v == nil {
			return nil
		}
		return &v.VaultBaseUrl
	}).(pulumi.StringPtrOutput)
}

// The entity reference.
type EntityReference struct {
	// The name of this referenced entity.
	ReferenceName *string `pulumi:"referenceName"`
	// The type of this referenced entity.
	Type *string `pulumi:"type"`
}

// The entity reference.
type EntityReferenceResponse struct {
	// The name of this referenced entity.
	ReferenceName *string `pulumi:"referenceName"`
	// The type of this referenced entity.
	Type *string `pulumi:"type"`
}

// The custom setup of setting environment variable.
type EnvironmentVariableSetup struct {
	// The type of custom setup.
	// Expected value is 'EnvironmentVariableSetup'.
	Type string `pulumi:"type"`
	// The name of the environment variable.
	VariableName string `pulumi:"variableName"`
	// The value of the environment variable.
	VariableValue string `pulumi:"variableValue"`
}

// The custom setup of setting environment variable.
type EnvironmentVariableSetupResponse struct {
	// The type of custom setup.
	// Expected value is 'EnvironmentVariableSetup'.
	Type string `pulumi:"type"`
	// The name of the environment variable.
	VariableName string `pulumi:"variableName"`
	// The value of the environment variable.
	VariableValue string `pulumi:"variableValue"`
}

// Excel dataset.
type ExcelDataset struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// The data compression method used for the json dataset.
	Compression *DatasetCompression `pulumi:"compression"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// When used as input, treat the first row of data as headers. When used as output,write the headers into the output as the first row of data. The default value is false. Type: boolean (or Expression with resultType boolean).
	FirstRowAsHeader interface{} `pulumi:"firstRowAsHeader"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReference `pulumi:"linkedServiceName"`
	// The location of the excel storage.
	Location interface{} `pulumi:"location"`
	// The null value string. Type: string (or Expression with resultType string).
	NullValue interface{} `pulumi:"nullValue"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// The partial data of one sheet. Type: string (or Expression with resultType string).
	Range interface{} `pulumi:"range"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// The sheet index of excel file and default value is 0. Type: integer (or Expression with resultType integer)
	SheetIndex interface{} `pulumi:"sheetIndex"`
	// The sheet name of excel file. Type: string (or Expression with resultType string).
	SheetName interface{} `pulumi:"sheetName"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// Type of dataset.
	// Expected value is 'Excel'.
	Type string `pulumi:"type"`
}

// Excel dataset.
type ExcelDatasetResponse struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// The data compression method used for the json dataset.
	Compression *DatasetCompressionResponse `pulumi:"compression"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// When used as input, treat the first row of data as headers. When used as output,write the headers into the output as the first row of data. The default value is false. Type: boolean (or Expression with resultType boolean).
	FirstRowAsHeader interface{} `pulumi:"firstRowAsHeader"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetResponseFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceResponse `pulumi:"linkedServiceName"`
	// The location of the excel storage.
	Location interface{} `pulumi:"location"`
	// The null value string. Type: string (or Expression with resultType string).
	NullValue interface{} `pulumi:"nullValue"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// The partial data of one sheet. Type: string (or Expression with resultType string).
	Range interface{} `pulumi:"range"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// The sheet index of excel file and default value is 0. Type: integer (or Expression with resultType integer)
	SheetIndex interface{} `pulumi:"sheetIndex"`
	// The sheet name of excel file. Type: string (or Expression with resultType string).
	SheetName interface{} `pulumi:"sheetName"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// Type of dataset.
	// Expected value is 'Excel'.
	Type string `pulumi:"type"`
}

// A copy activity excel source.
type ExcelSource struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns interface{} `pulumi:"additionalColumns"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// Excel store settings.
	StoreSettings interface{} `pulumi:"storeSettings"`
	// Copy source type.
	// Expected value is 'ExcelSource'.
	Type string `pulumi:"type"`
}

// A copy activity excel source.
type ExcelSourceResponse struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns interface{} `pulumi:"additionalColumns"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// Excel store settings.
	StoreSettings interface{} `pulumi:"storeSettings"`
	// Copy source type.
	// Expected value is 'ExcelSource'.
	Type string `pulumi:"type"`
}

// Execute data flow activity.
type ExecuteDataFlowActivity struct {
	// Compute properties for data flow activity.
	Compute *ExecuteDataFlowActivityTypePropertiesCompute `pulumi:"compute"`
	// Continue on error setting used for data flow execution. Enables processing to continue if a sink fails. Type: boolean (or Expression with resultType boolean)
	ContinueOnError interface{} `pulumi:"continueOnError"`
	// Data flow reference.
	DataFlow DataFlowReference `pulumi:"dataFlow"`
	// Activity depends on condition.
	DependsOn []ActivityDependency `pulumi:"dependsOn"`
	// Activity description.
	Description *string `pulumi:"description"`
	// The integration runtime reference.
	IntegrationRuntime *IntegrationRuntimeReference `pulumi:"integrationRuntime"`
	// Linked service reference.
	LinkedServiceName *LinkedServiceReference `pulumi:"linkedServiceName"`
	// Activity name.
	Name string `pulumi:"name"`
	// Activity policy.
	Policy *ActivityPolicy `pulumi:"policy"`
	// Concurrent run setting used for data flow execution. Allows sinks with the same save order to be processed concurrently. Type: boolean (or Expression with resultType boolean)
	RunConcurrently interface{} `pulumi:"runConcurrently"`
	// Specify number of parallel staging for sources applicable to the sink. Type: integer (or Expression with resultType integer)
	SourceStagingConcurrency interface{} `pulumi:"sourceStagingConcurrency"`
	// Staging info for execute data flow activity.
	Staging *DataFlowStagingInfo `pulumi:"staging"`
	// Trace level setting used for data flow monitoring output. Supported values are: 'coarse', 'fine', and 'none'. Type: string (or Expression with resultType string)
	TraceLevel interface{} `pulumi:"traceLevel"`
	// Type of activity.
	// Expected value is 'ExecuteDataFlow'.
	Type string `pulumi:"type"`
	// Activity user properties.
	UserProperties []UserProperty `pulumi:"userProperties"`
}

// Execute data flow activity.
type ExecuteDataFlowActivityResponse struct {
	// Compute properties for data flow activity.
	Compute *ExecuteDataFlowActivityTypePropertiesResponseCompute `pulumi:"compute"`
	// Continue on error setting used for data flow execution. Enables processing to continue if a sink fails. Type: boolean (or Expression with resultType boolean)
	ContinueOnError interface{} `pulumi:"continueOnError"`
	// Data flow reference.
	DataFlow DataFlowReferenceResponse `pulumi:"dataFlow"`
	// Activity depends on condition.
	DependsOn []ActivityDependencyResponse `pulumi:"dependsOn"`
	// Activity description.
	Description *string `pulumi:"description"`
	// The integration runtime reference.
	IntegrationRuntime *IntegrationRuntimeReferenceResponse `pulumi:"integrationRuntime"`
	// Linked service reference.
	LinkedServiceName *LinkedServiceReferenceResponse `pulumi:"linkedServiceName"`
	// Activity name.
	Name string `pulumi:"name"`
	// Activity policy.
	Policy *ActivityPolicyResponse `pulumi:"policy"`
	// Concurrent run setting used for data flow execution. Allows sinks with the same save order to be processed concurrently. Type: boolean (or Expression with resultType boolean)
	RunConcurrently interface{} `pulumi:"runConcurrently"`
	// Specify number of parallel staging for sources applicable to the sink. Type: integer (or Expression with resultType integer)
	SourceStagingConcurrency interface{} `pulumi:"sourceStagingConcurrency"`
	// Staging info for execute data flow activity.
	Staging *DataFlowStagingInfoResponse `pulumi:"staging"`
	// Trace level setting used for data flow monitoring output. Supported values are: 'coarse', 'fine', and 'none'. Type: string (or Expression with resultType string)
	TraceLevel interface{} `pulumi:"traceLevel"`
	// Type of activity.
	// Expected value is 'ExecuteDataFlow'.
	Type string `pulumi:"type"`
	// Activity user properties.
	UserProperties []UserPropertyResponse `pulumi:"userProperties"`
}

// Compute properties for data flow activity.
type ExecuteDataFlowActivityTypePropertiesCompute struct {
	// Compute type of the cluster which will execute data flow job. Possible values include: 'General', 'MemoryOptimized', 'ComputeOptimized'. Type: string (or Expression with resultType string)
	ComputeType interface{} `pulumi:"computeType"`
	// Core count of the cluster which will execute data flow job. Supported values are: 8, 16, 32, 48, 80, 144 and 272. Type: integer (or Expression with resultType integer)
	CoreCount interface{} `pulumi:"coreCount"`
}

// Compute properties for data flow activity.
type ExecuteDataFlowActivityTypePropertiesResponseCompute struct {
	// Compute type of the cluster which will execute data flow job. Possible values include: 'General', 'MemoryOptimized', 'ComputeOptimized'. Type: string (or Expression with resultType string)
	ComputeType interface{} `pulumi:"computeType"`
	// Core count of the cluster which will execute data flow job. Supported values are: 8, 16, 32, 48, 80, 144 and 272. Type: integer (or Expression with resultType integer)
	CoreCount interface{} `pulumi:"coreCount"`
}

// Execute pipeline activity.
type ExecutePipelineActivity struct {
	// Activity depends on condition.
	DependsOn []ActivityDependency `pulumi:"dependsOn"`
	// Activity description.
	Description *string `pulumi:"description"`
	// Activity name.
	Name string `pulumi:"name"`
	// Pipeline parameters.
	Parameters map[string]interface{} `pulumi:"parameters"`
	// Pipeline reference.
	Pipeline PipelineReference `pulumi:"pipeline"`
	// Execute pipeline activity policy.
	Policy *ExecutePipelineActivityPolicy `pulumi:"policy"`
	// Type of activity.
	// Expected value is 'ExecutePipeline'.
	Type string `pulumi:"type"`
	// Activity user properties.
	UserProperties []UserProperty `pulumi:"userProperties"`
	// Defines whether activity execution will wait for the dependent pipeline execution to finish. Default is false.
	WaitOnCompletion *bool `pulumi:"waitOnCompletion"`
}

// Execution policy for an execute pipeline activity.
type ExecutePipelineActivityPolicy struct {
	// When set to true, Input from activity is considered as secure and will not be logged to monitoring.
	SecureInput *bool `pulumi:"secureInput"`
}

// Execution policy for an execute pipeline activity.
type ExecutePipelineActivityPolicyResponse struct {
	// When set to true, Input from activity is considered as secure and will not be logged to monitoring.
	SecureInput *bool `pulumi:"secureInput"`
}

// Execute pipeline activity.
type ExecutePipelineActivityResponse struct {
	// Activity depends on condition.
	DependsOn []ActivityDependencyResponse `pulumi:"dependsOn"`
	// Activity description.
	Description *string `pulumi:"description"`
	// Activity name.
	Name string `pulumi:"name"`
	// Pipeline parameters.
	Parameters map[string]interface{} `pulumi:"parameters"`
	// Pipeline reference.
	Pipeline PipelineReferenceResponse `pulumi:"pipeline"`
	// Execute pipeline activity policy.
	Policy *ExecutePipelineActivityPolicyResponse `pulumi:"policy"`
	// Type of activity.
	// Expected value is 'ExecutePipeline'.
	Type string `pulumi:"type"`
	// Activity user properties.
	UserProperties []UserPropertyResponse `pulumi:"userProperties"`
	// Defines whether activity execution will wait for the dependent pipeline execution to finish. Default is false.
	WaitOnCompletion *bool `pulumi:"waitOnCompletion"`
}

// Execute SSIS package activity.
type ExecuteSSISPackageActivity struct {
	// The integration runtime reference.
	ConnectVia IntegrationRuntimeReference `pulumi:"connectVia"`
	// Activity depends on condition.
	DependsOn []ActivityDependency `pulumi:"dependsOn"`
	// Activity description.
	Description *string `pulumi:"description"`
	// The environment path to execute the SSIS package. Type: string (or Expression with resultType string).
	EnvironmentPath interface{} `pulumi:"environmentPath"`
	// The package execution credential.
	ExecutionCredential *SSISExecutionCredential `pulumi:"executionCredential"`
	// Linked service reference.
	LinkedServiceName *LinkedServiceReference `pulumi:"linkedServiceName"`
	// SSIS package execution log location.
	LogLocation *SSISLogLocation `pulumi:"logLocation"`
	// The logging level of SSIS package execution. Type: string (or Expression with resultType string).
	LoggingLevel interface{} `pulumi:"loggingLevel"`
	// Activity name.
	Name string `pulumi:"name"`
	// The package level connection managers to execute the SSIS package.
	PackageConnectionManagers map[string]map[string]SSISExecutionParameter `pulumi:"packageConnectionManagers"`
	// SSIS package location.
	PackageLocation SSISPackageLocation `pulumi:"packageLocation"`
	// The package level parameters to execute the SSIS package.
	PackageParameters map[string]SSISExecutionParameter `pulumi:"packageParameters"`
	// Activity policy.
	Policy *ActivityPolicy `pulumi:"policy"`
	// The project level connection managers to execute the SSIS package.
	ProjectConnectionManagers map[string]map[string]SSISExecutionParameter `pulumi:"projectConnectionManagers"`
	// The project level parameters to execute the SSIS package.
	ProjectParameters map[string]SSISExecutionParameter `pulumi:"projectParameters"`
	// The property overrides to execute the SSIS package.
	PropertyOverrides map[string]SSISPropertyOverride `pulumi:"propertyOverrides"`
	// Specifies the runtime to execute SSIS package. The value should be "x86" or "x64". Type: string (or Expression with resultType string).
	Runtime interface{} `pulumi:"runtime"`
	// Type of activity.
	// Expected value is 'ExecuteSSISPackage'.
	Type string `pulumi:"type"`
	// Activity user properties.
	UserProperties []UserProperty `pulumi:"userProperties"`
}

// Execute SSIS package activity.
type ExecuteSSISPackageActivityResponse struct {
	// The integration runtime reference.
	ConnectVia IntegrationRuntimeReferenceResponse `pulumi:"connectVia"`
	// Activity depends on condition.
	DependsOn []ActivityDependencyResponse `pulumi:"dependsOn"`
	// Activity description.
	Description *string `pulumi:"description"`
	// The environment path to execute the SSIS package. Type: string (or Expression with resultType string).
	EnvironmentPath interface{} `pulumi:"environmentPath"`
	// The package execution credential.
	ExecutionCredential *SSISExecutionCredentialResponse `pulumi:"executionCredential"`
	// Linked service reference.
	LinkedServiceName *LinkedServiceReferenceResponse `pulumi:"linkedServiceName"`
	// SSIS package execution log location.
	LogLocation *SSISLogLocationResponse `pulumi:"logLocation"`
	// The logging level of SSIS package execution. Type: string (or Expression with resultType string).
	LoggingLevel interface{} `pulumi:"loggingLevel"`
	// Activity name.
	Name string `pulumi:"name"`
	// The package level connection managers to execute the SSIS package.
	PackageConnectionManagers map[string]map[string]SSISExecutionParameterResponse `pulumi:"packageConnectionManagers"`
	// SSIS package location.
	PackageLocation SSISPackageLocationResponse `pulumi:"packageLocation"`
	// The package level parameters to execute the SSIS package.
	PackageParameters map[string]SSISExecutionParameterResponse `pulumi:"packageParameters"`
	// Activity policy.
	Policy *ActivityPolicyResponse `pulumi:"policy"`
	// The project level connection managers to execute the SSIS package.
	ProjectConnectionManagers map[string]map[string]SSISExecutionParameterResponse `pulumi:"projectConnectionManagers"`
	// The project level parameters to execute the SSIS package.
	ProjectParameters map[string]SSISExecutionParameterResponse `pulumi:"projectParameters"`
	// The property overrides to execute the SSIS package.
	PropertyOverrides map[string]SSISPropertyOverrideResponse `pulumi:"propertyOverrides"`
	// Specifies the runtime to execute SSIS package. The value should be "x86" or "x64". Type: string (or Expression with resultType string).
	Runtime interface{} `pulumi:"runtime"`
	// Type of activity.
	// Expected value is 'ExecuteSSISPackage'.
	Type string `pulumi:"type"`
	// Activity user properties.
	UserProperties []UserPropertyResponse `pulumi:"userProperties"`
}

// Execute power query activity.
type ExecuteWranglingDataflowActivity struct {
	// Compute properties for data flow activity.
	Compute *ExecuteDataFlowActivityTypePropertiesCompute `pulumi:"compute"`
	// Continue on error setting used for data flow execution. Enables processing to continue if a sink fails. Type: boolean (or Expression with resultType boolean)
	ContinueOnError interface{} `pulumi:"continueOnError"`
	// Data flow reference.
	DataFlow DataFlowReference `pulumi:"dataFlow"`
	// Activity depends on condition.
	DependsOn []ActivityDependency `pulumi:"dependsOn"`
	// Activity description.
	Description *string `pulumi:"description"`
	// The integration runtime reference.
	IntegrationRuntime *IntegrationRuntimeReference `pulumi:"integrationRuntime"`
	// Activity name.
	Name string `pulumi:"name"`
	// Activity policy.
	Policy *ActivityPolicy `pulumi:"policy"`
	// List of mapping for Power Query mashup query to sink dataset(s).
	Queries []PowerQuerySinkMapping `pulumi:"queries"`
	// Concurrent run setting used for data flow execution. Allows sinks with the same save order to be processed concurrently. Type: boolean (or Expression with resultType boolean)
	RunConcurrently interface{} `pulumi:"runConcurrently"`
	// (Deprecated. Please use Queries). List of Power Query activity sinks mapped to a queryName.
	Sinks map[string]PowerQuerySink `pulumi:"sinks"`
	// Specify number of parallel staging for sources applicable to the sink. Type: integer (or Expression with resultType integer)
	SourceStagingConcurrency interface{} `pulumi:"sourceStagingConcurrency"`
	// Staging info for execute data flow activity.
	Staging *DataFlowStagingInfo `pulumi:"staging"`
	// Trace level setting used for data flow monitoring output. Supported values are: 'coarse', 'fine', and 'none'. Type: string (or Expression with resultType string)
	TraceLevel interface{} `pulumi:"traceLevel"`
	// Type of activity.
	// Expected value is 'ExecuteWranglingDataflow'.
	Type string `pulumi:"type"`
	// Activity user properties.
	UserProperties []UserProperty `pulumi:"userProperties"`
}

// Execute power query activity.
type ExecuteWranglingDataflowActivityResponse struct {
	// Compute properties for data flow activity.
	Compute *ExecuteDataFlowActivityTypePropertiesResponseCompute `pulumi:"compute"`
	// Continue on error setting used for data flow execution. Enables processing to continue if a sink fails. Type: boolean (or Expression with resultType boolean)
	ContinueOnError interface{} `pulumi:"continueOnError"`
	// Data flow reference.
	DataFlow DataFlowReferenceResponse `pulumi:"dataFlow"`
	// Activity depends on condition.
	DependsOn []ActivityDependencyResponse `pulumi:"dependsOn"`
	// Activity description.
	Description *string `pulumi:"description"`
	// The integration runtime reference.
	IntegrationRuntime *IntegrationRuntimeReferenceResponse `pulumi:"integrationRuntime"`
	// Activity name.
	Name string `pulumi:"name"`
	// Activity policy.
	Policy *ActivityPolicyResponse `pulumi:"policy"`
	// List of mapping for Power Query mashup query to sink dataset(s).
	Queries []PowerQuerySinkMappingResponse `pulumi:"queries"`
	// Concurrent run setting used for data flow execution. Allows sinks with the same save order to be processed concurrently. Type: boolean (or Expression with resultType boolean)
	RunConcurrently interface{} `pulumi:"runConcurrently"`
	// (Deprecated. Please use Queries). List of Power Query activity sinks mapped to a queryName.
	Sinks map[string]PowerQuerySinkResponse `pulumi:"sinks"`
	// Specify number of parallel staging for sources applicable to the sink. Type: integer (or Expression with resultType integer)
	SourceStagingConcurrency interface{} `pulumi:"sourceStagingConcurrency"`
	// Staging info for execute data flow activity.
	Staging *DataFlowStagingInfoResponse `pulumi:"staging"`
	// Trace level setting used for data flow monitoring output. Supported values are: 'coarse', 'fine', and 'none'. Type: string (or Expression with resultType string)
	TraceLevel interface{} `pulumi:"traceLevel"`
	// Type of activity.
	// Expected value is 'ExecuteWranglingDataflow'.
	Type string `pulumi:"type"`
	// Activity user properties.
	UserProperties []UserPropertyResponse `pulumi:"userProperties"`
}

// Base class for all execution activities.
type ExecutionActivity struct {
	// Activity depends on condition.
	DependsOn []ActivityDependency `pulumi:"dependsOn"`
	// Activity description.
	Description *string `pulumi:"description"`
	// Linked service reference.
	LinkedServiceName *LinkedServiceReference `pulumi:"linkedServiceName"`
	// Activity name.
	Name string `pulumi:"name"`
	// Activity policy.
	Policy *ActivityPolicy `pulumi:"policy"`
	// Type of activity.
	// Expected value is 'Execution'.
	Type string `pulumi:"type"`
	// Activity user properties.
	UserProperties []UserProperty `pulumi:"userProperties"`
}

// Base class for all execution activities.
type ExecutionActivityResponse struct {
	// Activity depends on condition.
	DependsOn []ActivityDependencyResponse `pulumi:"dependsOn"`
	// Activity description.
	Description *string `pulumi:"description"`
	// Linked service reference.
	LinkedServiceName *LinkedServiceReferenceResponse `pulumi:"linkedServiceName"`
	// Activity name.
	Name string `pulumi:"name"`
	// Activity policy.
	Policy *ActivityPolicyResponse `pulumi:"policy"`
	// Type of activity.
	// Expected value is 'Execution'.
	Type string `pulumi:"type"`
	// Activity user properties.
	UserProperties []UserPropertyResponse `pulumi:"userProperties"`
}

// Azure Data Factory expression definition.
type Expression struct {
	// Expression type.
	Type string `pulumi:"type"`
	// Expression value.
	Value string `pulumi:"value"`
}

// Azure Data Factory expression definition.
type ExpressionResponse struct {
	// Expression type.
	Type string `pulumi:"type"`
	// Expression value.
	Value string `pulumi:"value"`
}

// Factory's GitHub repo information.
type FactoryGitHubConfiguration struct {
	// Account name.
	AccountName string `pulumi:"accountName"`
	// GitHub bring your own app client id.
	ClientId *string `pulumi:"clientId"`
	// GitHub bring your own app client secret information.
	ClientSecret *GitHubClientSecret `pulumi:"clientSecret"`
	// Collaboration branch.
	CollaborationBranch string `pulumi:"collaborationBranch"`
	// GitHub Enterprise host name. For example: `https://github.mydomain.com`
	HostName *string `pulumi:"hostName"`
	// Last commit id.
	LastCommitId *string `pulumi:"lastCommitId"`
	// Repository name.
	RepositoryName string `pulumi:"repositoryName"`
	// Root folder.
	RootFolder string `pulumi:"rootFolder"`
	// Type of repo configuration.
	// Expected value is 'FactoryGitHubConfiguration'.
	Type string `pulumi:"type"`
}

// Factory's GitHub repo information.
type FactoryGitHubConfigurationResponse struct {
	// Account name.
	AccountName string `pulumi:"accountName"`
	// GitHub bring your own app client id.
	ClientId *string `pulumi:"clientId"`
	// GitHub bring your own app client secret information.
	ClientSecret *GitHubClientSecretResponse `pulumi:"clientSecret"`
	// Collaboration branch.
	CollaborationBranch string `pulumi:"collaborationBranch"`
	// GitHub Enterprise host name. For example: `https://github.mydomain.com`
	HostName *string `pulumi:"hostName"`
	// Last commit id.
	LastCommitId *string `pulumi:"lastCommitId"`
	// Repository name.
	RepositoryName string `pulumi:"repositoryName"`
	// Root folder.
	RootFolder string `pulumi:"rootFolder"`
	// Type of repo configuration.
	// Expected value is 'FactoryGitHubConfiguration'.
	Type string `pulumi:"type"`
}

// Identity properties of the factory resource.
type FactoryIdentity struct {
	// The identity type.
	Type string `pulumi:"type"`
	// List of user assigned identities for the factory.
	UserAssignedIdentities map[string]interface{} `pulumi:"userAssignedIdentities"`
}

// FactoryIdentityInput is an input type that accepts FactoryIdentityArgs and FactoryIdentityOutput values.
// You can construct a concrete instance of `FactoryIdentityInput` via:
//
//	FactoryIdentityArgs{...}
type FactoryIdentityInput interface {
	pulumi.Input

	ToFactoryIdentityOutput() FactoryIdentityOutput
	ToFactoryIdentityOutputWithContext(context.Context) FactoryIdentityOutput
}

// Identity properties of the factory resource.
type FactoryIdentityArgs struct {
	// The identity type.
	Type pulumi.StringInput `pulumi:"type"`
	// List of user assigned identities for the factory.
	UserAssignedIdentities pulumi.MapInput `pulumi:"userAssignedIdentities"`
}

func (FactoryIdentityArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FactoryIdentity)(nil)).Elem()
}

func (i FactoryIdentityArgs) ToFactoryIdentityOutput() FactoryIdentityOutput {
	return i.ToFactoryIdentityOutputWithContext(context.Background())
}

func (i FactoryIdentityArgs) ToFactoryIdentityOutputWithContext(ctx context.Context) FactoryIdentityOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FactoryIdentityOutput)
}

func (i FactoryIdentityArgs) ToFactoryIdentityPtrOutput() FactoryIdentityPtrOutput {
	return i.ToFactoryIdentityPtrOutputWithContext(context.Background())
}

func (i FactoryIdentityArgs) ToFactoryIdentityPtrOutputWithContext(ctx context.Context) FactoryIdentityPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FactoryIdentityOutput).ToFactoryIdentityPtrOutputWithContext(ctx)
}

// FactoryIdentityPtrInput is an input type that accepts FactoryIdentityArgs, FactoryIdentityPtr and FactoryIdentityPtrOutput values.
// You can construct a concrete instance of `FactoryIdentityPtrInput` via:
//
//	        FactoryIdentityArgs{...}
//
//	or:
//
//	        nil
type FactoryIdentityPtrInput interface {
	pulumi.Input

	ToFactoryIdentityPtrOutput() FactoryIdentityPtrOutput
	ToFactoryIdentityPtrOutputWithContext(context.Context) FactoryIdentityPtrOutput
}

type factoryIdentityPtrType FactoryIdentityArgs

func FactoryIdentityPtr(v *FactoryIdentityArgs) FactoryIdentityPtrInput {
	return (*factoryIdentityPtrType)(v)
}

func (*factoryIdentityPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**FactoryIdentity)(nil)).Elem()
}

func (i *factoryIdentityPtrType) ToFactoryIdentityPtrOutput() FactoryIdentityPtrOutput {
	return i.ToFactoryIdentityPtrOutputWithContext(context.Background())
}

func (i *factoryIdentityPtrType) ToFactoryIdentityPtrOutputWithContext(ctx context.Context) FactoryIdentityPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FactoryIdentityPtrOutput)
}

// Identity properties of the factory resource.
type FactoryIdentityOutput struct{ *pulumi.OutputState }

func (FactoryIdentityOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FactoryIdentity)(nil)).Elem()
}

func (o FactoryIdentityOutput) ToFactoryIdentityOutput() FactoryIdentityOutput {
	return o
}

func (o FactoryIdentityOutput) ToFactoryIdentityOutputWithContext(ctx context.Context) FactoryIdentityOutput {
	return o
}

func (o FactoryIdentityOutput) ToFactoryIdentityPtrOutput() FactoryIdentityPtrOutput {
	return o.ToFactoryIdentityPtrOutputWithContext(context.Background())
}

func (o FactoryIdentityOutput) ToFactoryIdentityPtrOutputWithContext(ctx context.Context) FactoryIdentityPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v FactoryIdentity) *FactoryIdentity {
		return &v
	}).(FactoryIdentityPtrOutput)
}

// The identity type.
func (o FactoryIdentityOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v FactoryIdentity) string { return v.Type }).(pulumi.StringOutput)
}

// List of user assigned identities for the factory.
func (o FactoryIdentityOutput) UserAssignedIdentities() pulumi.MapOutput {
	return o.ApplyT(func(v FactoryIdentity) map[string]interface{} { return v.UserAssignedIdentities }).(pulumi.MapOutput)
}

type FactoryIdentityPtrOutput struct{ *pulumi.OutputState }

func (FactoryIdentityPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FactoryIdentity)(nil)).Elem()
}

func (o FactoryIdentityPtrOutput) ToFactoryIdentityPtrOutput() FactoryIdentityPtrOutput {
	return o
}

func (o FactoryIdentityPtrOutput) ToFactoryIdentityPtrOutputWithContext(ctx context.Context) FactoryIdentityPtrOutput {
	return o
}

func (o FactoryIdentityPtrOutput) Elem() FactoryIdentityOutput {
	return o.ApplyT(func(v *FactoryIdentity) FactoryIdentity {
		if v != nil {
			return *v
		}
		var ret FactoryIdentity
		return ret
	}).(FactoryIdentityOutput)
}

// The identity type.
func (o FactoryIdentityPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FactoryIdentity) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

// List of user assigned identities for the factory.
func (o FactoryIdentityPtrOutput) UserAssignedIdentities() pulumi.MapOutput {
	return o.ApplyT(func(v *FactoryIdentity) map[string]interface{} {
		if v == nil {
			return nil
		}
		return v.UserAssignedIdentities
	}).(pulumi.MapOutput)
}

// Identity properties of the factory resource.
type FactoryIdentityResponse struct {
	// The principal id of the identity.
	PrincipalId string `pulumi:"principalId"`
	// The client tenant id of the identity.
	TenantId string `pulumi:"tenantId"`
	// The identity type.
	Type string `pulumi:"type"`
	// List of user assigned identities for the factory.
	UserAssignedIdentities map[string]interface{} `pulumi:"userAssignedIdentities"`
}

// Identity properties of the factory resource.
type FactoryIdentityResponseOutput struct{ *pulumi.OutputState }

func (FactoryIdentityResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FactoryIdentityResponse)(nil)).Elem()
}

func (o FactoryIdentityResponseOutput) ToFactoryIdentityResponseOutput() FactoryIdentityResponseOutput {
	return o
}

func (o FactoryIdentityResponseOutput) ToFactoryIdentityResponseOutputWithContext(ctx context.Context) FactoryIdentityResponseOutput {
	return o
}

// The principal id of the identity.
func (o FactoryIdentityResponseOutput) PrincipalId() pulumi.StringOutput {
	return o.ApplyT(func(v FactoryIdentityResponse) string { return v.PrincipalId }).(pulumi.StringOutput)
}

// The client tenant id of the identity.
func (o FactoryIdentityResponseOutput) TenantId() pulumi.StringOutput {
	return o.ApplyT(func(v FactoryIdentityResponse) string { return v.TenantId }).(pulumi.StringOutput)
}

// The identity type.
func (o FactoryIdentityResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v FactoryIdentityResponse) string { return v.Type }).(pulumi.StringOutput)
}

// List of user assigned identities for the factory.
func (o FactoryIdentityResponseOutput) UserAssignedIdentities() pulumi.MapOutput {
	return o.ApplyT(func(v FactoryIdentityResponse) map[string]interface{} { return v.UserAssignedIdentities }).(pulumi.MapOutput)
}

type FactoryIdentityResponsePtrOutput struct{ *pulumi.OutputState }

func (FactoryIdentityResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FactoryIdentityResponse)(nil)).Elem()
}

func (o FactoryIdentityResponsePtrOutput) ToFactoryIdentityResponsePtrOutput() FactoryIdentityResponsePtrOutput {
	return o
}

func (o FactoryIdentityResponsePtrOutput) ToFactoryIdentityResponsePtrOutputWithContext(ctx context.Context) FactoryIdentityResponsePtrOutput {
	return o
}

func (o FactoryIdentityResponsePtrOutput) Elem() FactoryIdentityResponseOutput {
	return o.ApplyT(func(v *FactoryIdentityResponse) FactoryIdentityResponse {
		if v != nil {
			return *v
		}
		var ret FactoryIdentityResponse
		return ret
	}).(FactoryIdentityResponseOutput)
}

// The principal id of the identity.
func (o FactoryIdentityResponsePtrOutput) PrincipalId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FactoryIdentityResponse) *string {
		if v == nil {
			return nil
		}
		return &v.PrincipalId
	}).(pulumi.StringPtrOutput)
}

// The client tenant id of the identity.
func (o FactoryIdentityResponsePtrOutput) TenantId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FactoryIdentityResponse) *string {
		if v == nil {
			return nil
		}
		return &v.TenantId
	}).(pulumi.StringPtrOutput)
}

// The identity type.
func (o FactoryIdentityResponsePtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FactoryIdentityResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

// List of user assigned identities for the factory.
func (o FactoryIdentityResponsePtrOutput) UserAssignedIdentities() pulumi.MapOutput {
	return o.ApplyT(func(v *FactoryIdentityResponse) map[string]interface{} {
		if v == nil {
			return nil
		}
		return v.UserAssignedIdentities
	}).(pulumi.MapOutput)
}

// Factory's VSTS repo information.
type FactoryVSTSConfiguration struct {
	// Account name.
	AccountName string `pulumi:"accountName"`
	// Collaboration branch.
	CollaborationBranch string `pulumi:"collaborationBranch"`
	// Last commit id.
	LastCommitId *string `pulumi:"lastCommitId"`
	// VSTS project name.
	ProjectName string `pulumi:"projectName"`
	// Repository name.
	RepositoryName string `pulumi:"repositoryName"`
	// Root folder.
	RootFolder string `pulumi:"rootFolder"`
	// VSTS tenant id.
	TenantId *string `pulumi:"tenantId"`
	// Type of repo configuration.
	// Expected value is 'FactoryVSTSConfiguration'.
	Type string `pulumi:"type"`
}

// Factory's VSTS repo information.
type FactoryVSTSConfigurationResponse struct {
	// Account name.
	AccountName string `pulumi:"accountName"`
	// Collaboration branch.
	CollaborationBranch string `pulumi:"collaborationBranch"`
	// Last commit id.
	LastCommitId *string `pulumi:"lastCommitId"`
	// VSTS project name.
	ProjectName string `pulumi:"projectName"`
	// Repository name.
	RepositoryName string `pulumi:"repositoryName"`
	// Root folder.
	RootFolder string `pulumi:"rootFolder"`
	// VSTS tenant id.
	TenantId *string `pulumi:"tenantId"`
	// Type of repo configuration.
	// Expected value is 'FactoryVSTSConfiguration'.
	Type string `pulumi:"type"`
}

// This activity will fail within its own scope and output a custom error message and error code. The error message and code can provided either as a string literal or as an expression that can be evaluated to a string at runtime. The activity scope can be the whole pipeline or a control activity (e.g. foreach, switch, until), if the fail activity is contained in it.
type FailActivity struct {
	// Activity depends on condition.
	DependsOn []ActivityDependency `pulumi:"dependsOn"`
	// Activity description.
	Description *string `pulumi:"description"`
	// The error code that categorizes the error type of the Fail activity. It can be dynamic content that's evaluated to a non empty/blank string at runtime. Type: string (or Expression with resultType string).
	ErrorCode interface{} `pulumi:"errorCode"`
	// The error message that surfaced in the Fail activity. It can be dynamic content that's evaluated to a non empty/blank string at runtime. Type: string (or Expression with resultType string).
	Message interface{} `pulumi:"message"`
	// Activity name.
	Name string `pulumi:"name"`
	// Type of activity.
	// Expected value is 'Fail'.
	Type string `pulumi:"type"`
	// Activity user properties.
	UserProperties []UserProperty `pulumi:"userProperties"`
}

// This activity will fail within its own scope and output a custom error message and error code. The error message and code can provided either as a string literal or as an expression that can be evaluated to a string at runtime. The activity scope can be the whole pipeline or a control activity (e.g. foreach, switch, until), if the fail activity is contained in it.
type FailActivityResponse struct {
	// Activity depends on condition.
	DependsOn []ActivityDependencyResponse `pulumi:"dependsOn"`
	// Activity description.
	Description *string `pulumi:"description"`
	// The error code that categorizes the error type of the Fail activity. It can be dynamic content that's evaluated to a non empty/blank string at runtime. Type: string (or Expression with resultType string).
	ErrorCode interface{} `pulumi:"errorCode"`
	// The error message that surfaced in the Fail activity. It can be dynamic content that's evaluated to a non empty/blank string at runtime. Type: string (or Expression with resultType string).
	Message interface{} `pulumi:"message"`
	// Activity name.
	Name string `pulumi:"name"`
	// Type of activity.
	// Expected value is 'Fail'.
	Type string `pulumi:"type"`
	// Activity user properties.
	UserProperties []UserPropertyResponse `pulumi:"userProperties"`
}

// File system linked service.
type FileServerLinkedService struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference `pulumi:"connectVia"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential interface{} `pulumi:"encryptedCredential"`
	// Host name of the server. Type: string (or Expression with resultType string).
	Host interface{} `pulumi:"host"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Password to logon the server.
	Password interface{} `pulumi:"password"`
	// Type of linked service.
	// Expected value is 'FileServer'.
	Type string `pulumi:"type"`
	// User ID to logon the server. Type: string (or Expression with resultType string).
	UserId interface{} `pulumi:"userId"`
}

// File system linked service.
type FileServerLinkedServiceResponse struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReferenceResponse `pulumi:"connectVia"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential interface{} `pulumi:"encryptedCredential"`
	// Host name of the server. Type: string (or Expression with resultType string).
	Host interface{} `pulumi:"host"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Password to logon the server.
	Password interface{} `pulumi:"password"`
	// Type of linked service.
	// Expected value is 'FileServer'.
	Type string `pulumi:"type"`
	// User ID to logon the server. Type: string (or Expression with resultType string).
	UserId interface{} `pulumi:"userId"`
}

// The location of file server dataset.
type FileServerLocation struct {
	// Specify the file name of dataset. Type: string (or Expression with resultType string).
	FileName interface{} `pulumi:"fileName"`
	// Specify the folder path of dataset. Type: string (or Expression with resultType string)
	FolderPath interface{} `pulumi:"folderPath"`
	// Type of dataset storage location.
	// Expected value is 'FileServerLocation'.
	Type string `pulumi:"type"`
}

// The location of file server dataset.
type FileServerLocationResponse struct {
	// Specify the file name of dataset. Type: string (or Expression with resultType string).
	FileName interface{} `pulumi:"fileName"`
	// Specify the folder path of dataset. Type: string (or Expression with resultType string)
	FolderPath interface{} `pulumi:"folderPath"`
	// Type of dataset storage location.
	// Expected value is 'FileServerLocation'.
	Type string `pulumi:"type"`
}

// File server read settings.
type FileServerReadSettings struct {
	// Indicates whether the source files need to be deleted after copy completion. Default is false. Type: boolean (or Expression with resultType boolean).
	DeleteFilesAfterCompletion interface{} `pulumi:"deleteFilesAfterCompletion"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// Indicates whether to enable partition discovery.
	EnablePartitionDiscovery *bool `pulumi:"enablePartitionDiscovery"`
	// Specify a filter to be used to select a subset of files in the folderPath rather than all files. Type: string (or Expression with resultType string).
	FileFilter interface{} `pulumi:"fileFilter"`
	// Point to a text file that lists each file (relative path to the path configured in the dataset) that you want to copy. Type: string (or Expression with resultType string).
	FileListPath interface{} `pulumi:"fileListPath"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// The end of file's modified datetime. Type: string (or Expression with resultType string).
	ModifiedDatetimeEnd interface{} `pulumi:"modifiedDatetimeEnd"`
	// The start of file's modified datetime. Type: string (or Expression with resultType string).
	ModifiedDatetimeStart interface{} `pulumi:"modifiedDatetimeStart"`
	// Specify the root path where partition discovery starts from. Type: string (or Expression with resultType string).
	PartitionRootPath interface{} `pulumi:"partitionRootPath"`
	// If true, files under the folder path will be read recursively. Default is true. Type: boolean (or Expression with resultType boolean).
	Recursive interface{} `pulumi:"recursive"`
	// The read setting type.
	// Expected value is 'FileServerReadSettings'.
	Type string `pulumi:"type"`
	// FileServer wildcardFileName. Type: string (or Expression with resultType string).
	WildcardFileName interface{} `pulumi:"wildcardFileName"`
	// FileServer wildcardFolderPath. Type: string (or Expression with resultType string).
	WildcardFolderPath interface{} `pulumi:"wildcardFolderPath"`
}

// File server read settings.
type FileServerReadSettingsResponse struct {
	// Indicates whether the source files need to be deleted after copy completion. Default is false. Type: boolean (or Expression with resultType boolean).
	DeleteFilesAfterCompletion interface{} `pulumi:"deleteFilesAfterCompletion"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// Indicates whether to enable partition discovery.
	EnablePartitionDiscovery *bool `pulumi:"enablePartitionDiscovery"`
	// Specify a filter to be used to select a subset of files in the folderPath rather than all files. Type: string (or Expression with resultType string).
	FileFilter interface{} `pulumi:"fileFilter"`
	// Point to a text file that lists each file (relative path to the path configured in the dataset) that you want to copy. Type: string (or Expression with resultType string).
	FileListPath interface{} `pulumi:"fileListPath"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// The end of file's modified datetime. Type: string (or Expression with resultType string).
	ModifiedDatetimeEnd interface{} `pulumi:"modifiedDatetimeEnd"`
	// The start of file's modified datetime. Type: string (or Expression with resultType string).
	ModifiedDatetimeStart interface{} `pulumi:"modifiedDatetimeStart"`
	// Specify the root path where partition discovery starts from. Type: string (or Expression with resultType string).
	PartitionRootPath interface{} `pulumi:"partitionRootPath"`
	// If true, files under the folder path will be read recursively. Default is true. Type: boolean (or Expression with resultType boolean).
	Recursive interface{} `pulumi:"recursive"`
	// The read setting type.
	// Expected value is 'FileServerReadSettings'.
	Type string `pulumi:"type"`
	// FileServer wildcardFileName. Type: string (or Expression with resultType string).
	WildcardFileName interface{} `pulumi:"wildcardFileName"`
	// FileServer wildcardFolderPath. Type: string (or Expression with resultType string).
	WildcardFolderPath interface{} `pulumi:"wildcardFolderPath"`
}

// File server write settings.
type FileServerWriteSettings struct {
	// The type of copy behavior for copy sink.
	CopyBehavior interface{} `pulumi:"copyBehavior"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// The write setting type.
	// Expected value is 'FileServerWriteSettings'.
	Type string `pulumi:"type"`
}

// File server write settings.
type FileServerWriteSettingsResponse struct {
	// The type of copy behavior for copy sink.
	CopyBehavior interface{} `pulumi:"copyBehavior"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// The write setting type.
	// Expected value is 'FileServerWriteSettings'.
	Type string `pulumi:"type"`
}

// An on-premises file system dataset.
type FileShareDataset struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// The data compression method used for the file system.
	Compression *DatasetCompression `pulumi:"compression"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// Specify a filter to be used to select a subset of files in the folderPath rather than all files. Type: string (or Expression with resultType string).
	FileFilter interface{} `pulumi:"fileFilter"`
	// The name of the on-premises file system. Type: string (or Expression with resultType string).
	FileName interface{} `pulumi:"fileName"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetFolder `pulumi:"folder"`
	// The path of the on-premises file system. Type: string (or Expression with resultType string).
	FolderPath interface{} `pulumi:"folderPath"`
	// The format of the files.
	Format interface{} `pulumi:"format"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReference `pulumi:"linkedServiceName"`
	// The end of file's modified datetime. Type: string (or Expression with resultType string).
	ModifiedDatetimeEnd interface{} `pulumi:"modifiedDatetimeEnd"`
	// The start of file's modified datetime. Type: string (or Expression with resultType string).
	ModifiedDatetimeStart interface{} `pulumi:"modifiedDatetimeStart"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// Type of dataset.
	// Expected value is 'FileShare'.
	Type string `pulumi:"type"`
}

// An on-premises file system dataset.
type FileShareDatasetResponse struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// The data compression method used for the file system.
	Compression *DatasetCompressionResponse `pulumi:"compression"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// Specify a filter to be used to select a subset of files in the folderPath rather than all files. Type: string (or Expression with resultType string).
	FileFilter interface{} `pulumi:"fileFilter"`
	// The name of the on-premises file system. Type: string (or Expression with resultType string).
	FileName interface{} `pulumi:"fileName"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetResponseFolder `pulumi:"folder"`
	// The path of the on-premises file system. Type: string (or Expression with resultType string).
	FolderPath interface{} `pulumi:"folderPath"`
	// The format of the files.
	Format interface{} `pulumi:"format"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceResponse `pulumi:"linkedServiceName"`
	// The end of file's modified datetime. Type: string (or Expression with resultType string).
	ModifiedDatetimeEnd interface{} `pulumi:"modifiedDatetimeEnd"`
	// The start of file's modified datetime. Type: string (or Expression with resultType string).
	ModifiedDatetimeStart interface{} `pulumi:"modifiedDatetimeStart"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// Type of dataset.
	// Expected value is 'FileShare'.
	Type string `pulumi:"type"`
}

// A copy activity file system sink.
type FileSystemSink struct {
	// The type of copy behavior for copy sink.
	CopyBehavior interface{} `pulumi:"copyBehavior"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the sink data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// Sink retry count. Type: integer (or Expression with resultType integer).
	SinkRetryCount interface{} `pulumi:"sinkRetryCount"`
	// Sink retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SinkRetryWait interface{} `pulumi:"sinkRetryWait"`
	// Copy sink type.
	// Expected value is 'FileSystemSink'.
	Type string `pulumi:"type"`
	// Write batch size. Type: integer (or Expression with resultType integer), minimum: 0.
	WriteBatchSize interface{} `pulumi:"writeBatchSize"`
	// Write batch timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	WriteBatchTimeout interface{} `pulumi:"writeBatchTimeout"`
}

// A copy activity file system sink.
type FileSystemSinkResponse struct {
	// The type of copy behavior for copy sink.
	CopyBehavior interface{} `pulumi:"copyBehavior"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the sink data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// Sink retry count. Type: integer (or Expression with resultType integer).
	SinkRetryCount interface{} `pulumi:"sinkRetryCount"`
	// Sink retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SinkRetryWait interface{} `pulumi:"sinkRetryWait"`
	// Copy sink type.
	// Expected value is 'FileSystemSink'.
	Type string `pulumi:"type"`
	// Write batch size. Type: integer (or Expression with resultType integer), minimum: 0.
	WriteBatchSize interface{} `pulumi:"writeBatchSize"`
	// Write batch timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	WriteBatchTimeout interface{} `pulumi:"writeBatchTimeout"`
}

// A copy activity file system source.
type FileSystemSource struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns interface{} `pulumi:"additionalColumns"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// If true, files under the folder path will be read recursively. Default is true. Type: boolean (or Expression with resultType boolean).
	Recursive interface{} `pulumi:"recursive"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// Copy source type.
	// Expected value is 'FileSystemSource'.
	Type string `pulumi:"type"`
}

// A copy activity file system source.
type FileSystemSourceResponse struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns interface{} `pulumi:"additionalColumns"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// If true, files under the folder path will be read recursively. Default is true. Type: boolean (or Expression with resultType boolean).
	Recursive interface{} `pulumi:"recursive"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// Copy source type.
	// Expected value is 'FileSystemSource'.
	Type string `pulumi:"type"`
}

// Filter and return results from input array based on the conditions.
type FilterActivity struct {
	// Condition to be used for filtering the input.
	Condition Expression `pulumi:"condition"`
	// Activity depends on condition.
	DependsOn []ActivityDependency `pulumi:"dependsOn"`
	// Activity description.
	Description *string `pulumi:"description"`
	// Input array on which filter should be applied.
	Items Expression `pulumi:"items"`
	// Activity name.
	Name string `pulumi:"name"`
	// Type of activity.
	// Expected value is 'Filter'.
	Type string `pulumi:"type"`
	// Activity user properties.
	UserProperties []UserProperty `pulumi:"userProperties"`
}

// Filter and return results from input array based on the conditions.
type FilterActivityResponse struct {
	// Condition to be used for filtering the input.
	Condition ExpressionResponse `pulumi:"condition"`
	// Activity depends on condition.
	DependsOn []ActivityDependencyResponse `pulumi:"dependsOn"`
	// Activity description.
	Description *string `pulumi:"description"`
	// Input array on which filter should be applied.
	Items ExpressionResponse `pulumi:"items"`
	// Activity name.
	Name string `pulumi:"name"`
	// Type of activity.
	// Expected value is 'Filter'.
	Type string `pulumi:"type"`
	// Activity user properties.
	UserProperties []UserPropertyResponse `pulumi:"userProperties"`
}

// Data flow flowlet
type Flowlet struct {
	// List of tags that can be used for describing the data flow.
	Annotations []interface{} `pulumi:"annotations"`
	// The description of the data flow.
	Description *string `pulumi:"description"`
	// The folder that this data flow is in. If not specified, Data flow will appear at the root level.
	Folder *DataFlowFolder `pulumi:"folder"`
	// Flowlet script.
	Script *string `pulumi:"script"`
	// Flowlet script lines.
	ScriptLines []string `pulumi:"scriptLines"`
	// List of sinks in Flowlet.
	Sinks []DataFlowSink `pulumi:"sinks"`
	// List of sources in Flowlet.
	Sources []DataFlowSource `pulumi:"sources"`
	// List of transformations in Flowlet.
	Transformations []Transformation `pulumi:"transformations"`
	// Type of data flow.
	// Expected value is 'Flowlet'.
	Type string `pulumi:"type"`
}

// Data flow flowlet
type FlowletResponse struct {
	// List of tags that can be used for describing the data flow.
	Annotations []interface{} `pulumi:"annotations"`
	// The description of the data flow.
	Description *string `pulumi:"description"`
	// The folder that this data flow is in. If not specified, Data flow will appear at the root level.
	Folder *DataFlowResponseFolder `pulumi:"folder"`
	// Flowlet script.
	Script *string `pulumi:"script"`
	// Flowlet script lines.
	ScriptLines []string `pulumi:"scriptLines"`
	// List of sinks in Flowlet.
	Sinks []DataFlowSinkResponse `pulumi:"sinks"`
	// List of sources in Flowlet.
	Sources []DataFlowSourceResponse `pulumi:"sources"`
	// List of transformations in Flowlet.
	Transformations []TransformationResponse `pulumi:"transformations"`
	// Type of data flow.
	// Expected value is 'Flowlet'.
	Type string `pulumi:"type"`
}

// This activity is used for iterating over a collection and execute given activities.
type ForEachActivity struct {
	// List of activities to execute .
	Activities []interface{} `pulumi:"activities"`
	// Batch count to be used for controlling the number of parallel execution (when isSequential is set to false).
	BatchCount *int `pulumi:"batchCount"`
	// Activity depends on condition.
	DependsOn []ActivityDependency `pulumi:"dependsOn"`
	// Activity description.
	Description *string `pulumi:"description"`
	// Should the loop be executed in sequence or in parallel (max 50)
	IsSequential *bool `pulumi:"isSequential"`
	// Collection to iterate.
	Items Expression `pulumi:"items"`
	// Activity name.
	Name string `pulumi:"name"`
	// Type of activity.
	// Expected value is 'ForEach'.
	Type string `pulumi:"type"`
	// Activity user properties.
	UserProperties []UserProperty `pulumi:"userProperties"`
}

// This activity is used for iterating over a collection and execute given activities.
type ForEachActivityResponse struct {
	// List of activities to execute .
	Activities []interface{} `pulumi:"activities"`
	// Batch count to be used for controlling the number of parallel execution (when isSequential is set to false).
	BatchCount *int `pulumi:"batchCount"`
	// Activity depends on condition.
	DependsOn []ActivityDependencyResponse `pulumi:"dependsOn"`
	// Activity description.
	Description *string `pulumi:"description"`
	// Should the loop be executed in sequence or in parallel (max 50)
	IsSequential *bool `pulumi:"isSequential"`
	// Collection to iterate.
	Items ExpressionResponse `pulumi:"items"`
	// Activity name.
	Name string `pulumi:"name"`
	// Type of activity.
	// Expected value is 'ForEach'.
	Type string `pulumi:"type"`
	// Activity user properties.
	UserProperties []UserPropertyResponse `pulumi:"userProperties"`
}

// Ftp read settings.
type FtpReadSettings struct {
	// Indicates whether the source files need to be deleted after copy completion. Default is false. Type: boolean (or Expression with resultType boolean).
	DeleteFilesAfterCompletion interface{} `pulumi:"deleteFilesAfterCompletion"`
	// If true, disable parallel reading within each file. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableChunking interface{} `pulumi:"disableChunking"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// Indicates whether to enable partition discovery.
	EnablePartitionDiscovery *bool `pulumi:"enablePartitionDiscovery"`
	// Point to a text file that lists each file (relative path to the path configured in the dataset) that you want to copy. Type: string (or Expression with resultType string).
	FileListPath interface{} `pulumi:"fileListPath"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// Specify the root path where partition discovery starts from. Type: string (or Expression with resultType string).
	PartitionRootPath interface{} `pulumi:"partitionRootPath"`
	// If true, files under the folder path will be read recursively. Default is true. Type: boolean (or Expression with resultType boolean).
	Recursive interface{} `pulumi:"recursive"`
	// The read setting type.
	// Expected value is 'FtpReadSettings'.
	Type string `pulumi:"type"`
	// Specify whether to use binary transfer mode for FTP stores.
	UseBinaryTransfer *bool `pulumi:"useBinaryTransfer"`
	// Ftp wildcardFileName. Type: string (or Expression with resultType string).
	WildcardFileName interface{} `pulumi:"wildcardFileName"`
	// Ftp wildcardFolderPath. Type: string (or Expression with resultType string).
	WildcardFolderPath interface{} `pulumi:"wildcardFolderPath"`
}

// Ftp read settings.
type FtpReadSettingsResponse struct {
	// Indicates whether the source files need to be deleted after copy completion. Default is false. Type: boolean (or Expression with resultType boolean).
	DeleteFilesAfterCompletion interface{} `pulumi:"deleteFilesAfterCompletion"`
	// If true, disable parallel reading within each file. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableChunking interface{} `pulumi:"disableChunking"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// Indicates whether to enable partition discovery.
	EnablePartitionDiscovery *bool `pulumi:"enablePartitionDiscovery"`
	// Point to a text file that lists each file (relative path to the path configured in the dataset) that you want to copy. Type: string (or Expression with resultType string).
	FileListPath interface{} `pulumi:"fileListPath"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// Specify the root path where partition discovery starts from. Type: string (or Expression with resultType string).
	PartitionRootPath interface{} `pulumi:"partitionRootPath"`
	// If true, files under the folder path will be read recursively. Default is true. Type: boolean (or Expression with resultType boolean).
	Recursive interface{} `pulumi:"recursive"`
	// The read setting type.
	// Expected value is 'FtpReadSettings'.
	Type string `pulumi:"type"`
	// Specify whether to use binary transfer mode for FTP stores.
	UseBinaryTransfer *bool `pulumi:"useBinaryTransfer"`
	// Ftp wildcardFileName. Type: string (or Expression with resultType string).
	WildcardFileName interface{} `pulumi:"wildcardFileName"`
	// Ftp wildcardFolderPath. Type: string (or Expression with resultType string).
	WildcardFolderPath interface{} `pulumi:"wildcardFolderPath"`
}

// A FTP server Linked Service.
type FtpServerLinkedService struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The authentication type to be used to connect to the FTP server.
	AuthenticationType *string `pulumi:"authenticationType"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference `pulumi:"connectVia"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// If true, validate the FTP server SSL certificate when connect over SSL/TLS channel. Default value is true. Type: boolean (or Expression with resultType boolean).
	EnableServerCertificateValidation interface{} `pulumi:"enableServerCertificateValidation"`
	// If true, connect to the FTP server over SSL/TLS channel. Default value is true. Type: boolean (or Expression with resultType boolean).
	EnableSsl interface{} `pulumi:"enableSsl"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential interface{} `pulumi:"encryptedCredential"`
	// Host name of the FTP server. Type: string (or Expression with resultType string).
	Host interface{} `pulumi:"host"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Password to logon the FTP server.
	Password interface{} `pulumi:"password"`
	// The TCP port number that the FTP server uses to listen for client connections. Default value is 21. Type: integer (or Expression with resultType integer), minimum: 0.
	Port interface{} `pulumi:"port"`
	// Type of linked service.
	// Expected value is 'FtpServer'.
	Type string `pulumi:"type"`
	// Username to logon the FTP server. Type: string (or Expression with resultType string).
	UserName interface{} `pulumi:"userName"`
}

// A FTP server Linked Service.
type FtpServerLinkedServiceResponse struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The authentication type to be used to connect to the FTP server.
	AuthenticationType *string `pulumi:"authenticationType"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReferenceResponse `pulumi:"connectVia"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// If true, validate the FTP server SSL certificate when connect over SSL/TLS channel. Default value is true. Type: boolean (or Expression with resultType boolean).
	EnableServerCertificateValidation interface{} `pulumi:"enableServerCertificateValidation"`
	// If true, connect to the FTP server over SSL/TLS channel. Default value is true. Type: boolean (or Expression with resultType boolean).
	EnableSsl interface{} `pulumi:"enableSsl"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential interface{} `pulumi:"encryptedCredential"`
	// Host name of the FTP server. Type: string (or Expression with resultType string).
	Host interface{} `pulumi:"host"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Password to logon the FTP server.
	Password interface{} `pulumi:"password"`
	// The TCP port number that the FTP server uses to listen for client connections. Default value is 21. Type: integer (or Expression with resultType integer), minimum: 0.
	Port interface{} `pulumi:"port"`
	// Type of linked service.
	// Expected value is 'FtpServer'.
	Type string `pulumi:"type"`
	// Username to logon the FTP server. Type: string (or Expression with resultType string).
	UserName interface{} `pulumi:"userName"`
}

// The location of ftp server dataset.
type FtpServerLocation struct {
	// Specify the file name of dataset. Type: string (or Expression with resultType string).
	FileName interface{} `pulumi:"fileName"`
	// Specify the folder path of dataset. Type: string (or Expression with resultType string)
	FolderPath interface{} `pulumi:"folderPath"`
	// Type of dataset storage location.
	// Expected value is 'FtpServerLocation'.
	Type string `pulumi:"type"`
}

// The location of ftp server dataset.
type FtpServerLocationResponse struct {
	// Specify the file name of dataset. Type: string (or Expression with resultType string).
	FileName interface{} `pulumi:"fileName"`
	// Specify the folder path of dataset. Type: string (or Expression with resultType string)
	FolderPath interface{} `pulumi:"folderPath"`
	// Type of dataset storage location.
	// Expected value is 'FtpServerLocation'.
	Type string `pulumi:"type"`
}

// Activity to get metadata of dataset
type GetMetadataActivity struct {
	// GetMetadata activity dataset reference.
	Dataset DatasetReference `pulumi:"dataset"`
	// Activity depends on condition.
	DependsOn []ActivityDependency `pulumi:"dependsOn"`
	// Activity description.
	Description *string `pulumi:"description"`
	// Fields of metadata to get from dataset.
	FieldList []interface{} `pulumi:"fieldList"`
	// GetMetadata activity format settings.
	FormatSettings interface{} `pulumi:"formatSettings"`
	// Linked service reference.
	LinkedServiceName *LinkedServiceReference `pulumi:"linkedServiceName"`
	// Activity name.
	Name string `pulumi:"name"`
	// Activity policy.
	Policy *ActivityPolicy `pulumi:"policy"`
	// GetMetadata activity store settings.
	StoreSettings interface{} `pulumi:"storeSettings"`
	// Type of activity.
	// Expected value is 'GetMetadata'.
	Type string `pulumi:"type"`
	// Activity user properties.
	UserProperties []UserProperty `pulumi:"userProperties"`
}

// Activity to get metadata of dataset
type GetMetadataActivityResponse struct {
	// GetMetadata activity dataset reference.
	Dataset DatasetReferenceResponse `pulumi:"dataset"`
	// Activity depends on condition.
	DependsOn []ActivityDependencyResponse `pulumi:"dependsOn"`
	// Activity description.
	Description *string `pulumi:"description"`
	// Fields of metadata to get from dataset.
	FieldList []interface{} `pulumi:"fieldList"`
	// GetMetadata activity format settings.
	FormatSettings interface{} `pulumi:"formatSettings"`
	// Linked service reference.
	LinkedServiceName *LinkedServiceReferenceResponse `pulumi:"linkedServiceName"`
	// Activity name.
	Name string `pulumi:"name"`
	// Activity policy.
	Policy *ActivityPolicyResponse `pulumi:"policy"`
	// GetMetadata activity store settings.
	StoreSettings interface{} `pulumi:"storeSettings"`
	// Type of activity.
	// Expected value is 'GetMetadata'.
	Type string `pulumi:"type"`
	// Activity user properties.
	UserProperties []UserPropertyResponse `pulumi:"userProperties"`
}

// Client secret information for factory's bring your own app repository configuration.
type GitHubClientSecret struct {
	// Bring your own app client secret AKV URL.
	ByoaSecretAkvUrl *string `pulumi:"byoaSecretAkvUrl"`
	// Bring your own app client secret name in AKV.
	ByoaSecretName *string `pulumi:"byoaSecretName"`
}

// GitHubClientSecretInput is an input type that accepts GitHubClientSecretArgs and GitHubClientSecretOutput values.
// You can construct a concrete instance of `GitHubClientSecretInput` via:
//
//	GitHubClientSecretArgs{...}
type GitHubClientSecretInput interface {
	pulumi.Input

	ToGitHubClientSecretOutput() GitHubClientSecretOutput
	ToGitHubClientSecretOutputWithContext(context.Context) GitHubClientSecretOutput
}

// Client secret information for factory's bring your own app repository configuration.
type GitHubClientSecretArgs struct {
	// Bring your own app client secret AKV URL.
	ByoaSecretAkvUrl pulumi.StringPtrInput `pulumi:"byoaSecretAkvUrl"`
	// Bring your own app client secret name in AKV.
	ByoaSecretName pulumi.StringPtrInput `pulumi:"byoaSecretName"`
}

func (GitHubClientSecretArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GitHubClientSecret)(nil)).Elem()
}

func (i GitHubClientSecretArgs) ToGitHubClientSecretOutput() GitHubClientSecretOutput {
	return i.ToGitHubClientSecretOutputWithContext(context.Background())
}

func (i GitHubClientSecretArgs) ToGitHubClientSecretOutputWithContext(ctx context.Context) GitHubClientSecretOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GitHubClientSecretOutput)
}

func (i GitHubClientSecretArgs) ToGitHubClientSecretPtrOutput() GitHubClientSecretPtrOutput {
	return i.ToGitHubClientSecretPtrOutputWithContext(context.Background())
}

func (i GitHubClientSecretArgs) ToGitHubClientSecretPtrOutputWithContext(ctx context.Context) GitHubClientSecretPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GitHubClientSecretOutput).ToGitHubClientSecretPtrOutputWithContext(ctx)
}

// GitHubClientSecretPtrInput is an input type that accepts GitHubClientSecretArgs, GitHubClientSecretPtr and GitHubClientSecretPtrOutput values.
// You can construct a concrete instance of `GitHubClientSecretPtrInput` via:
//
//	        GitHubClientSecretArgs{...}
//
//	or:
//
//	        nil
type GitHubClientSecretPtrInput interface {
	pulumi.Input

	ToGitHubClientSecretPtrOutput() GitHubClientSecretPtrOutput
	ToGitHubClientSecretPtrOutputWithContext(context.Context) GitHubClientSecretPtrOutput
}

type gitHubClientSecretPtrType GitHubClientSecretArgs

func GitHubClientSecretPtr(v *GitHubClientSecretArgs) GitHubClientSecretPtrInput {
	return (*gitHubClientSecretPtrType)(v)
}

func (*gitHubClientSecretPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GitHubClientSecret)(nil)).Elem()
}

func (i *gitHubClientSecretPtrType) ToGitHubClientSecretPtrOutput() GitHubClientSecretPtrOutput {
	return i.ToGitHubClientSecretPtrOutputWithContext(context.Background())
}

func (i *gitHubClientSecretPtrType) ToGitHubClientSecretPtrOutputWithContext(ctx context.Context) GitHubClientSecretPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GitHubClientSecretPtrOutput)
}

// Client secret information for factory's bring your own app repository configuration.
type GitHubClientSecretOutput struct{ *pulumi.OutputState }

func (GitHubClientSecretOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GitHubClientSecret)(nil)).Elem()
}

func (o GitHubClientSecretOutput) ToGitHubClientSecretOutput() GitHubClientSecretOutput {
	return o
}

func (o GitHubClientSecretOutput) ToGitHubClientSecretOutputWithContext(ctx context.Context) GitHubClientSecretOutput {
	return o
}

func (o GitHubClientSecretOutput) ToGitHubClientSecretPtrOutput() GitHubClientSecretPtrOutput {
	return o.ToGitHubClientSecretPtrOutputWithContext(context.Background())
}

func (o GitHubClientSecretOutput) ToGitHubClientSecretPtrOutputWithContext(ctx context.Context) GitHubClientSecretPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GitHubClientSecret) *GitHubClientSecret {
		return &v
	}).(GitHubClientSecretPtrOutput)
}

// Bring your own app client secret AKV URL.
func (o GitHubClientSecretOutput) ByoaSecretAkvUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GitHubClientSecret) *string { return v.ByoaSecretAkvUrl }).(pulumi.StringPtrOutput)
}

// Bring your own app client secret name in AKV.
func (o GitHubClientSecretOutput) ByoaSecretName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GitHubClientSecret) *string { return v.ByoaSecretName }).(pulumi.StringPtrOutput)
}

type GitHubClientSecretPtrOutput struct{ *pulumi.OutputState }

func (GitHubClientSecretPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GitHubClientSecret)(nil)).Elem()
}

func (o GitHubClientSecretPtrOutput) ToGitHubClientSecretPtrOutput() GitHubClientSecretPtrOutput {
	return o
}

func (o GitHubClientSecretPtrOutput) ToGitHubClientSecretPtrOutputWithContext(ctx context.Context) GitHubClientSecretPtrOutput {
	return o
}

func (o GitHubClientSecretPtrOutput) Elem() GitHubClientSecretOutput {
	return o.ApplyT(func(v *GitHubClientSecret) GitHubClientSecret {
		if v != nil {
			return *v
		}
		var ret GitHubClientSecret
		return ret
	}).(GitHubClientSecretOutput)
}

// Bring your own app client secret AKV URL.
func (o GitHubClientSecretPtrOutput) ByoaSecretAkvUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GitHubClientSecret) *string {
		if v == nil {
			return nil
		}
		return v.ByoaSecretAkvUrl
	}).(pulumi.StringPtrOutput)
}

// Bring your own app client secret name in AKV.
func (o GitHubClientSecretPtrOutput) ByoaSecretName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GitHubClientSecret) *string {
		if v == nil {
			return nil
		}
		return v.ByoaSecretName
	}).(pulumi.StringPtrOutput)
}

// Client secret information for factory's bring your own app repository configuration.
type GitHubClientSecretResponse struct {
	// Bring your own app client secret AKV URL.
	ByoaSecretAkvUrl *string `pulumi:"byoaSecretAkvUrl"`
	// Bring your own app client secret name in AKV.
	ByoaSecretName *string `pulumi:"byoaSecretName"`
}

// Definition of a single parameter for an entity.
type GlobalParameterSpecification struct {
	// Global Parameter type.
	Type string `pulumi:"type"`
	// Value of parameter.
	Value interface{} `pulumi:"value"`
}

// GlobalParameterSpecificationInput is an input type that accepts GlobalParameterSpecificationArgs and GlobalParameterSpecificationOutput values.
// You can construct a concrete instance of `GlobalParameterSpecificationInput` via:
//
//	GlobalParameterSpecificationArgs{...}
type GlobalParameterSpecificationInput interface {
	pulumi.Input

	ToGlobalParameterSpecificationOutput() GlobalParameterSpecificationOutput
	ToGlobalParameterSpecificationOutputWithContext(context.Context) GlobalParameterSpecificationOutput
}

// Definition of a single parameter for an entity.
type GlobalParameterSpecificationArgs struct {
	// Global Parameter type.
	Type pulumi.StringInput `pulumi:"type"`
	// Value of parameter.
	Value pulumi.Input `pulumi:"value"`
}

func (GlobalParameterSpecificationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GlobalParameterSpecification)(nil)).Elem()
}

func (i GlobalParameterSpecificationArgs) ToGlobalParameterSpecificationOutput() GlobalParameterSpecificationOutput {
	return i.ToGlobalParameterSpecificationOutputWithContext(context.Background())
}

func (i GlobalParameterSpecificationArgs) ToGlobalParameterSpecificationOutputWithContext(ctx context.Context) GlobalParameterSpecificationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GlobalParameterSpecificationOutput)
}

// GlobalParameterSpecificationMapInput is an input type that accepts GlobalParameterSpecificationMap and GlobalParameterSpecificationMapOutput values.
// You can construct a concrete instance of `GlobalParameterSpecificationMapInput` via:
//
//	GlobalParameterSpecificationMap{ "key": GlobalParameterSpecificationArgs{...} }
type GlobalParameterSpecificationMapInput interface {
	pulumi.Input

	ToGlobalParameterSpecificationMapOutput() GlobalParameterSpecificationMapOutput
	ToGlobalParameterSpecificationMapOutputWithContext(context.Context) GlobalParameterSpecificationMapOutput
}

type GlobalParameterSpecificationMap map[string]GlobalParameterSpecificationInput

func (GlobalParameterSpecificationMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]GlobalParameterSpecification)(nil)).Elem()
}

func (i GlobalParameterSpecificationMap) ToGlobalParameterSpecificationMapOutput() GlobalParameterSpecificationMapOutput {
	return i.ToGlobalParameterSpecificationMapOutputWithContext(context.Background())
}

func (i GlobalParameterSpecificationMap) ToGlobalParameterSpecificationMapOutputWithContext(ctx context.Context) GlobalParameterSpecificationMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GlobalParameterSpecificationMapOutput)
}

// Definition of a single parameter for an entity.
type GlobalParameterSpecificationOutput struct{ *pulumi.OutputState }

func (GlobalParameterSpecificationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GlobalParameterSpecification)(nil)).Elem()
}

func (o GlobalParameterSpecificationOutput) ToGlobalParameterSpecificationOutput() GlobalParameterSpecificationOutput {
	return o
}

func (o GlobalParameterSpecificationOutput) ToGlobalParameterSpecificationOutputWithContext(ctx context.Context) GlobalParameterSpecificationOutput {
	return o
}

// Global Parameter type.
func (o GlobalParameterSpecificationOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v GlobalParameterSpecification) string { return v.Type }).(pulumi.StringOutput)
}

// Value of parameter.
func (o GlobalParameterSpecificationOutput) Value() pulumi.AnyOutput {
	return o.ApplyT(func(v GlobalParameterSpecification) interface{} { return v.Value }).(pulumi.AnyOutput)
}

type GlobalParameterSpecificationMapOutput struct{ *pulumi.OutputState }

func (GlobalParameterSpecificationMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]GlobalParameterSpecification)(nil)).Elem()
}

func (o GlobalParameterSpecificationMapOutput) ToGlobalParameterSpecificationMapOutput() GlobalParameterSpecificationMapOutput {
	return o
}

func (o GlobalParameterSpecificationMapOutput) ToGlobalParameterSpecificationMapOutputWithContext(ctx context.Context) GlobalParameterSpecificationMapOutput {
	return o
}

func (o GlobalParameterSpecificationMapOutput) MapIndex(k pulumi.StringInput) GlobalParameterSpecificationOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) GlobalParameterSpecification {
		return vs[0].(map[string]GlobalParameterSpecification)[vs[1].(string)]
	}).(GlobalParameterSpecificationOutput)
}

// Definition of a single parameter for an entity.
type GlobalParameterSpecificationResponse struct {
	// Global Parameter type.
	Type string `pulumi:"type"`
	// Value of parameter.
	Value interface{} `pulumi:"value"`
}

// Definition of a single parameter for an entity.
type GlobalParameterSpecificationResponseOutput struct{ *pulumi.OutputState }

func (GlobalParameterSpecificationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GlobalParameterSpecificationResponse)(nil)).Elem()
}

func (o GlobalParameterSpecificationResponseOutput) ToGlobalParameterSpecificationResponseOutput() GlobalParameterSpecificationResponseOutput {
	return o
}

func (o GlobalParameterSpecificationResponseOutput) ToGlobalParameterSpecificationResponseOutputWithContext(ctx context.Context) GlobalParameterSpecificationResponseOutput {
	return o
}

// Global Parameter type.
func (o GlobalParameterSpecificationResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v GlobalParameterSpecificationResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Value of parameter.
func (o GlobalParameterSpecificationResponseOutput) Value() pulumi.AnyOutput {
	return o.ApplyT(func(v GlobalParameterSpecificationResponse) interface{} { return v.Value }).(pulumi.AnyOutput)
}

type GlobalParameterSpecificationResponseMapOutput struct{ *pulumi.OutputState }

func (GlobalParameterSpecificationResponseMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]GlobalParameterSpecificationResponse)(nil)).Elem()
}

func (o GlobalParameterSpecificationResponseMapOutput) ToGlobalParameterSpecificationResponseMapOutput() GlobalParameterSpecificationResponseMapOutput {
	return o
}

func (o GlobalParameterSpecificationResponseMapOutput) ToGlobalParameterSpecificationResponseMapOutputWithContext(ctx context.Context) GlobalParameterSpecificationResponseMapOutput {
	return o
}

func (o GlobalParameterSpecificationResponseMapOutput) MapIndex(k pulumi.StringInput) GlobalParameterSpecificationResponseOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) GlobalParameterSpecificationResponse {
		return vs[0].(map[string]GlobalParameterSpecificationResponse)[vs[1].(string)]
	}).(GlobalParameterSpecificationResponseOutput)
}

// Google AdWords service linked service.
type GoogleAdWordsLinkedService struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The OAuth 2.0 authentication mechanism used for authentication. ServiceAuthentication can only be used on self-hosted IR.
	AuthenticationType *string `pulumi:"authenticationType"`
	// The Client customer ID of the AdWords account that you want to fetch report data for.
	ClientCustomerID interface{} `pulumi:"clientCustomerID"`
	// The client id of the google application used to acquire the refresh token. Type: string (or Expression with resultType string).
	ClientId interface{} `pulumi:"clientId"`
	// The client secret of the google application used to acquire the refresh token.
	ClientSecret interface{} `pulumi:"clientSecret"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference `pulumi:"connectVia"`
	// Properties used to connect to GoogleAds. It is mutually exclusive with any other properties in the linked service. Type: object.
	ConnectionProperties interface{} `pulumi:"connectionProperties"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The developer token associated with the manager account that you use to grant access to the AdWords API.
	DeveloperToken interface{} `pulumi:"developerToken"`
	// The service account email ID that is used for ServiceAuthentication and can only be used on self-hosted IR.
	Email interface{} `pulumi:"email"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential interface{} `pulumi:"encryptedCredential"`
	// The full path to the .p12 key file that is used to authenticate the service account email address and can only be used on self-hosted IR.
	KeyFilePath interface{} `pulumi:"keyFilePath"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// The refresh token obtained from Google for authorizing access to AdWords for UserAuthentication.
	RefreshToken interface{} `pulumi:"refreshToken"`
	// The full path of the .pem file containing trusted CA certificates for verifying the server when connecting over SSL. This property can only be set when using SSL on self-hosted IR. The default value is the cacerts.pem file installed with the IR.
	TrustedCertPath interface{} `pulumi:"trustedCertPath"`
	// Type of linked service.
	// Expected value is 'GoogleAdWords'.
	Type string `pulumi:"type"`
	// Specifies whether to use a CA certificate from the system trust store or from a specified PEM file. The default value is false.
	UseSystemTrustStore interface{} `pulumi:"useSystemTrustStore"`
}

// Google AdWords service linked service.
type GoogleAdWordsLinkedServiceResponse struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The OAuth 2.0 authentication mechanism used for authentication. ServiceAuthentication can only be used on self-hosted IR.
	AuthenticationType *string `pulumi:"authenticationType"`
	// The Client customer ID of the AdWords account that you want to fetch report data for.
	ClientCustomerID interface{} `pulumi:"clientCustomerID"`
	// The client id of the google application used to acquire the refresh token. Type: string (or Expression with resultType string).
	ClientId interface{} `pulumi:"clientId"`
	// The client secret of the google application used to acquire the refresh token.
	ClientSecret interface{} `pulumi:"clientSecret"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReferenceResponse `pulumi:"connectVia"`
	// Properties used to connect to GoogleAds. It is mutually exclusive with any other properties in the linked service. Type: object.
	ConnectionProperties interface{} `pulumi:"connectionProperties"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The developer token associated with the manager account that you use to grant access to the AdWords API.
	DeveloperToken interface{} `pulumi:"developerToken"`
	// The service account email ID that is used for ServiceAuthentication and can only be used on self-hosted IR.
	Email interface{} `pulumi:"email"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential interface{} `pulumi:"encryptedCredential"`
	// The full path to the .p12 key file that is used to authenticate the service account email address and can only be used on self-hosted IR.
	KeyFilePath interface{} `pulumi:"keyFilePath"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// The refresh token obtained from Google for authorizing access to AdWords for UserAuthentication.
	RefreshToken interface{} `pulumi:"refreshToken"`
	// The full path of the .pem file containing trusted CA certificates for verifying the server when connecting over SSL. This property can only be set when using SSL on self-hosted IR. The default value is the cacerts.pem file installed with the IR.
	TrustedCertPath interface{} `pulumi:"trustedCertPath"`
	// Type of linked service.
	// Expected value is 'GoogleAdWords'.
	Type string `pulumi:"type"`
	// Specifies whether to use a CA certificate from the system trust store or from a specified PEM file. The default value is false.
	UseSystemTrustStore interface{} `pulumi:"useSystemTrustStore"`
}

// Google AdWords service dataset.
type GoogleAdWordsObjectDataset struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReference `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// The table name. Type: string (or Expression with resultType string).
	TableName interface{} `pulumi:"tableName"`
	// Type of dataset.
	// Expected value is 'GoogleAdWordsObject'.
	Type string `pulumi:"type"`
}

// Google AdWords service dataset.
type GoogleAdWordsObjectDatasetResponse struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetResponseFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceResponse `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// The table name. Type: string (or Expression with resultType string).
	TableName interface{} `pulumi:"tableName"`
	// Type of dataset.
	// Expected value is 'GoogleAdWordsObject'.
	Type string `pulumi:"type"`
}

// A copy activity Google AdWords service source.
type GoogleAdWordsSource struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns interface{} `pulumi:"additionalColumns"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// A query to retrieve data from source. Type: string (or Expression with resultType string).
	Query interface{} `pulumi:"query"`
	// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	QueryTimeout interface{} `pulumi:"queryTimeout"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// Copy source type.
	// Expected value is 'GoogleAdWordsSource'.
	Type string `pulumi:"type"`
}

// A copy activity Google AdWords service source.
type GoogleAdWordsSourceResponse struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns interface{} `pulumi:"additionalColumns"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// A query to retrieve data from source. Type: string (or Expression with resultType string).
	Query interface{} `pulumi:"query"`
	// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	QueryTimeout interface{} `pulumi:"queryTimeout"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// Copy source type.
	// Expected value is 'GoogleAdWordsSource'.
	Type string `pulumi:"type"`
}

// Google BigQuery service linked service.
type GoogleBigQueryLinkedService struct {
	// A comma-separated list of public BigQuery projects to access.
	AdditionalProjects interface{} `pulumi:"additionalProjects"`
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The OAuth 2.0 authentication mechanism used for authentication. ServiceAuthentication can only be used on self-hosted IR.
	AuthenticationType string `pulumi:"authenticationType"`
	// The client id of the google application used to acquire the refresh token. Type: string (or Expression with resultType string).
	ClientId interface{} `pulumi:"clientId"`
	// The client secret of the google application used to acquire the refresh token.
	ClientSecret interface{} `pulumi:"clientSecret"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference `pulumi:"connectVia"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The service account email ID that is used for ServiceAuthentication and can only be used on self-hosted IR.
	Email interface{} `pulumi:"email"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential interface{} `pulumi:"encryptedCredential"`
	// The full path to the .p12 key file that is used to authenticate the service account email address and can only be used on self-hosted IR.
	KeyFilePath interface{} `pulumi:"keyFilePath"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// The default BigQuery project to query against.
	Project interface{} `pulumi:"project"`
	// The refresh token obtained from Google for authorizing access to BigQuery for UserAuthentication.
	RefreshToken interface{} `pulumi:"refreshToken"`
	// Whether to request access to Google Drive. Allowing Google Drive access enables support for federated tables that combine BigQuery data with data from Google Drive. The default value is false.
	RequestGoogleDriveScope interface{} `pulumi:"requestGoogleDriveScope"`
	// The full path of the .pem file containing trusted CA certificates for verifying the server when connecting over SSL. This property can only be set when using SSL on self-hosted IR. The default value is the cacerts.pem file installed with the IR.
	TrustedCertPath interface{} `pulumi:"trustedCertPath"`
	// Type of linked service.
	// Expected value is 'GoogleBigQuery'.
	Type string `pulumi:"type"`
	// Specifies whether to use a CA certificate from the system trust store or from a specified PEM file. The default value is false.
	UseSystemTrustStore interface{} `pulumi:"useSystemTrustStore"`
}

// Google BigQuery service linked service.
type GoogleBigQueryLinkedServiceResponse struct {
	// A comma-separated list of public BigQuery projects to access.
	AdditionalProjects interface{} `pulumi:"additionalProjects"`
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The OAuth 2.0 authentication mechanism used for authentication. ServiceAuthentication can only be used on self-hosted IR.
	AuthenticationType string `pulumi:"authenticationType"`
	// The client id of the google application used to acquire the refresh token. Type: string (or Expression with resultType string).
	ClientId interface{} `pulumi:"clientId"`
	// The client secret of the google application used to acquire the refresh token.
	ClientSecret interface{} `pulumi:"clientSecret"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReferenceResponse `pulumi:"connectVia"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The service account email ID that is used for ServiceAuthentication and can only be used on self-hosted IR.
	Email interface{} `pulumi:"email"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential interface{} `pulumi:"encryptedCredential"`
	// The full path to the .p12 key file that is used to authenticate the service account email address and can only be used on self-hosted IR.
	KeyFilePath interface{} `pulumi:"keyFilePath"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// The default BigQuery project to query against.
	Project interface{} `pulumi:"project"`
	// The refresh token obtained from Google for authorizing access to BigQuery for UserAuthentication.
	RefreshToken interface{} `pulumi:"refreshToken"`
	// Whether to request access to Google Drive. Allowing Google Drive access enables support for federated tables that combine BigQuery data with data from Google Drive. The default value is false.
	RequestGoogleDriveScope interface{} `pulumi:"requestGoogleDriveScope"`
	// The full path of the .pem file containing trusted CA certificates for verifying the server when connecting over SSL. This property can only be set when using SSL on self-hosted IR. The default value is the cacerts.pem file installed with the IR.
	TrustedCertPath interface{} `pulumi:"trustedCertPath"`
	// Type of linked service.
	// Expected value is 'GoogleBigQuery'.
	Type string `pulumi:"type"`
	// Specifies whether to use a CA certificate from the system trust store or from a specified PEM file. The default value is false.
	UseSystemTrustStore interface{} `pulumi:"useSystemTrustStore"`
}

// Google BigQuery service dataset.
type GoogleBigQueryObjectDataset struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// The database name of the Google BigQuery. Type: string (or Expression with resultType string).
	Dataset interface{} `pulumi:"dataset"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReference `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// The table name of the Google BigQuery. Type: string (or Expression with resultType string).
	Table interface{} `pulumi:"table"`
	// This property will be retired. Please consider using database + table properties instead.
	TableName interface{} `pulumi:"tableName"`
	// Type of dataset.
	// Expected value is 'GoogleBigQueryObject'.
	Type string `pulumi:"type"`
}

// Google BigQuery service dataset.
type GoogleBigQueryObjectDatasetResponse struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// The database name of the Google BigQuery. Type: string (or Expression with resultType string).
	Dataset interface{} `pulumi:"dataset"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetResponseFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceResponse `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// The table name of the Google BigQuery. Type: string (or Expression with resultType string).
	Table interface{} `pulumi:"table"`
	// This property will be retired. Please consider using database + table properties instead.
	TableName interface{} `pulumi:"tableName"`
	// Type of dataset.
	// Expected value is 'GoogleBigQueryObject'.
	Type string `pulumi:"type"`
}

// A copy activity Google BigQuery service source.
type GoogleBigQuerySource struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns interface{} `pulumi:"additionalColumns"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// A query to retrieve data from source. Type: string (or Expression with resultType string).
	Query interface{} `pulumi:"query"`
	// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	QueryTimeout interface{} `pulumi:"queryTimeout"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// Copy source type.
	// Expected value is 'GoogleBigQuerySource'.
	Type string `pulumi:"type"`
}

// A copy activity Google BigQuery service source.
type GoogleBigQuerySourceResponse struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns interface{} `pulumi:"additionalColumns"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// A query to retrieve data from source. Type: string (or Expression with resultType string).
	Query interface{} `pulumi:"query"`
	// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	QueryTimeout interface{} `pulumi:"queryTimeout"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// Copy source type.
	// Expected value is 'GoogleBigQuerySource'.
	Type string `pulumi:"type"`
}

// Linked service for Google Cloud Storage.
type GoogleCloudStorageLinkedService struct {
	// The access key identifier of the Google Cloud Storage Identity and Access Management (IAM) user. Type: string (or Expression with resultType string).
	AccessKeyId interface{} `pulumi:"accessKeyId"`
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference `pulumi:"connectVia"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential interface{} `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// The secret access key of the Google Cloud Storage Identity and Access Management (IAM) user.
	SecretAccessKey interface{} `pulumi:"secretAccessKey"`
	// This value specifies the endpoint to access with the Google Cloud Storage Connector. This is an optional property; change it only if you want to try a different service endpoint or want to switch between https and http. Type: string (or Expression with resultType string).
	ServiceUrl interface{} `pulumi:"serviceUrl"`
	// Type of linked service.
	// Expected value is 'GoogleCloudStorage'.
	Type string `pulumi:"type"`
}

// Linked service for Google Cloud Storage.
type GoogleCloudStorageLinkedServiceResponse struct {
	// The access key identifier of the Google Cloud Storage Identity and Access Management (IAM) user. Type: string (or Expression with resultType string).
	AccessKeyId interface{} `pulumi:"accessKeyId"`
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReferenceResponse `pulumi:"connectVia"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential interface{} `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// The secret access key of the Google Cloud Storage Identity and Access Management (IAM) user.
	SecretAccessKey interface{} `pulumi:"secretAccessKey"`
	// This value specifies the endpoint to access with the Google Cloud Storage Connector. This is an optional property; change it only if you want to try a different service endpoint or want to switch between https and http. Type: string (or Expression with resultType string).
	ServiceUrl interface{} `pulumi:"serviceUrl"`
	// Type of linked service.
	// Expected value is 'GoogleCloudStorage'.
	Type string `pulumi:"type"`
}

// The location of Google Cloud Storage dataset.
type GoogleCloudStorageLocation struct {
	// Specify the bucketName of Google Cloud Storage. Type: string (or Expression with resultType string)
	BucketName interface{} `pulumi:"bucketName"`
	// Specify the file name of dataset. Type: string (or Expression with resultType string).
	FileName interface{} `pulumi:"fileName"`
	// Specify the folder path of dataset. Type: string (or Expression with resultType string)
	FolderPath interface{} `pulumi:"folderPath"`
	// Type of dataset storage location.
	// Expected value is 'GoogleCloudStorageLocation'.
	Type string `pulumi:"type"`
	// Specify the version of Google Cloud Storage. Type: string (or Expression with resultType string).
	Version interface{} `pulumi:"version"`
}

// The location of Google Cloud Storage dataset.
type GoogleCloudStorageLocationResponse struct {
	// Specify the bucketName of Google Cloud Storage. Type: string (or Expression with resultType string)
	BucketName interface{} `pulumi:"bucketName"`
	// Specify the file name of dataset. Type: string (or Expression with resultType string).
	FileName interface{} `pulumi:"fileName"`
	// Specify the folder path of dataset. Type: string (or Expression with resultType string)
	FolderPath interface{} `pulumi:"folderPath"`
	// Type of dataset storage location.
	// Expected value is 'GoogleCloudStorageLocation'.
	Type string `pulumi:"type"`
	// Specify the version of Google Cloud Storage. Type: string (or Expression with resultType string).
	Version interface{} `pulumi:"version"`
}

// Google Cloud Storage read settings.
type GoogleCloudStorageReadSettings struct {
	// Indicates whether the source files need to be deleted after copy completion. Default is false. Type: boolean (or Expression with resultType boolean).
	DeleteFilesAfterCompletion interface{} `pulumi:"deleteFilesAfterCompletion"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// Indicates whether to enable partition discovery.
	EnablePartitionDiscovery *bool `pulumi:"enablePartitionDiscovery"`
	// Point to a text file that lists each file (relative path to the path configured in the dataset) that you want to copy. Type: string (or Expression with resultType string).
	FileListPath interface{} `pulumi:"fileListPath"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// The end of file's modified datetime. Type: string (or Expression with resultType string).
	ModifiedDatetimeEnd interface{} `pulumi:"modifiedDatetimeEnd"`
	// The start of file's modified datetime. Type: string (or Expression with resultType string).
	ModifiedDatetimeStart interface{} `pulumi:"modifiedDatetimeStart"`
	// Specify the root path where partition discovery starts from. Type: string (or Expression with resultType string).
	PartitionRootPath interface{} `pulumi:"partitionRootPath"`
	// The prefix filter for the Google Cloud Storage object name. Type: string (or Expression with resultType string).
	Prefix interface{} `pulumi:"prefix"`
	// If true, files under the folder path will be read recursively. Default is true. Type: boolean (or Expression with resultType boolean).
	Recursive interface{} `pulumi:"recursive"`
	// The read setting type.
	// Expected value is 'GoogleCloudStorageReadSettings'.
	Type string `pulumi:"type"`
	// Google Cloud Storage wildcardFileName. Type: string (or Expression with resultType string).
	WildcardFileName interface{} `pulumi:"wildcardFileName"`
	// Google Cloud Storage wildcardFolderPath. Type: string (or Expression with resultType string).
	WildcardFolderPath interface{} `pulumi:"wildcardFolderPath"`
}

// Google Cloud Storage read settings.
type GoogleCloudStorageReadSettingsResponse struct {
	// Indicates whether the source files need to be deleted after copy completion. Default is false. Type: boolean (or Expression with resultType boolean).
	DeleteFilesAfterCompletion interface{} `pulumi:"deleteFilesAfterCompletion"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// Indicates whether to enable partition discovery.
	EnablePartitionDiscovery *bool `pulumi:"enablePartitionDiscovery"`
	// Point to a text file that lists each file (relative path to the path configured in the dataset) that you want to copy. Type: string (or Expression with resultType string).
	FileListPath interface{} `pulumi:"fileListPath"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// The end of file's modified datetime. Type: string (or Expression with resultType string).
	ModifiedDatetimeEnd interface{} `pulumi:"modifiedDatetimeEnd"`
	// The start of file's modified datetime. Type: string (or Expression with resultType string).
	ModifiedDatetimeStart interface{} `pulumi:"modifiedDatetimeStart"`
	// Specify the root path where partition discovery starts from. Type: string (or Expression with resultType string).
	PartitionRootPath interface{} `pulumi:"partitionRootPath"`
	// The prefix filter for the Google Cloud Storage object name. Type: string (or Expression with resultType string).
	Prefix interface{} `pulumi:"prefix"`
	// If true, files under the folder path will be read recursively. Default is true. Type: boolean (or Expression with resultType boolean).
	Recursive interface{} `pulumi:"recursive"`
	// The read setting type.
	// Expected value is 'GoogleCloudStorageReadSettings'.
	Type string `pulumi:"type"`
	// Google Cloud Storage wildcardFileName. Type: string (or Expression with resultType string).
	WildcardFileName interface{} `pulumi:"wildcardFileName"`
	// Google Cloud Storage wildcardFolderPath. Type: string (or Expression with resultType string).
	WildcardFolderPath interface{} `pulumi:"wildcardFolderPath"`
}

// Greenplum Database linked service.
type GreenplumLinkedService struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference `pulumi:"connectVia"`
	// An ODBC connection string. Type: string, SecureString or AzureKeyVaultSecretReference.
	ConnectionString interface{} `pulumi:"connectionString"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential interface{} `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// The Azure key vault secret reference of password in connection string.
	Pwd *AzureKeyVaultSecretReference `pulumi:"pwd"`
	// Type of linked service.
	// Expected value is 'Greenplum'.
	Type string `pulumi:"type"`
}

// Greenplum Database linked service.
type GreenplumLinkedServiceResponse struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReferenceResponse `pulumi:"connectVia"`
	// An ODBC connection string. Type: string, SecureString or AzureKeyVaultSecretReference.
	ConnectionString interface{} `pulumi:"connectionString"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential interface{} `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// The Azure key vault secret reference of password in connection string.
	Pwd *AzureKeyVaultSecretReferenceResponse `pulumi:"pwd"`
	// Type of linked service.
	// Expected value is 'Greenplum'.
	Type string `pulumi:"type"`
}

// A copy activity Greenplum Database source.
type GreenplumSource struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns interface{} `pulumi:"additionalColumns"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// A query to retrieve data from source. Type: string (or Expression with resultType string).
	Query interface{} `pulumi:"query"`
	// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	QueryTimeout interface{} `pulumi:"queryTimeout"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// Copy source type.
	// Expected value is 'GreenplumSource'.
	Type string `pulumi:"type"`
}

// A copy activity Greenplum Database source.
type GreenplumSourceResponse struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns interface{} `pulumi:"additionalColumns"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// A query to retrieve data from source. Type: string (or Expression with resultType string).
	Query interface{} `pulumi:"query"`
	// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	QueryTimeout interface{} `pulumi:"queryTimeout"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// Copy source type.
	// Expected value is 'GreenplumSource'.
	Type string `pulumi:"type"`
}

// Greenplum Database dataset.
type GreenplumTableDataset struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReference `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// The table name of Greenplum. Type: string (or Expression with resultType string).
	Table interface{} `pulumi:"table"`
	// This property will be retired. Please consider using schema + table properties instead.
	TableName interface{} `pulumi:"tableName"`
	// Type of dataset.
	// Expected value is 'GreenplumTable'.
	Type string `pulumi:"type"`
}

// Greenplum Database dataset.
type GreenplumTableDatasetResponse struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetResponseFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceResponse `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// The table name of Greenplum. Type: string (or Expression with resultType string).
	Table interface{} `pulumi:"table"`
	// This property will be retired. Please consider using schema + table properties instead.
	TableName interface{} `pulumi:"tableName"`
	// Type of dataset.
	// Expected value is 'GreenplumTable'.
	Type string `pulumi:"type"`
}

// HBase server linked service.
type HBaseLinkedService struct {
	// Specifies whether to require a CA-issued SSL certificate name to match the host name of the server when connecting over SSL. The default value is false.
	AllowHostNameCNMismatch interface{} `pulumi:"allowHostNameCNMismatch"`
	// Specifies whether to allow self-signed certificates from the server. The default value is false.
	AllowSelfSignedServerCert interface{} `pulumi:"allowSelfSignedServerCert"`
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The authentication mechanism to use to connect to the HBase server.
	AuthenticationType string `pulumi:"authenticationType"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference `pulumi:"connectVia"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// Specifies whether the connections to the server are encrypted using SSL. The default value is false.
	EnableSsl interface{} `pulumi:"enableSsl"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential interface{} `pulumi:"encryptedCredential"`
	// The IP address or host name of the HBase server. (i.e. 192.168.222.160)
	Host interface{} `pulumi:"host"`
	// The partial URL corresponding to the HBase server. (i.e. /gateway/sandbox/hbase/version)
	HttpPath interface{} `pulumi:"httpPath"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// The password corresponding to the user name.
	Password interface{} `pulumi:"password"`
	// The TCP port that the HBase instance uses to listen for client connections. The default value is 9090.
	Port interface{} `pulumi:"port"`
	// The full path of the .pem file containing trusted CA certificates for verifying the server when connecting over SSL. This property can only be set when using SSL on self-hosted IR. The default value is the cacerts.pem file installed with the IR.
	TrustedCertPath interface{} `pulumi:"trustedCertPath"`
	// Type of linked service.
	// Expected value is 'HBase'.
	Type string `pulumi:"type"`
	// The user name used to connect to the HBase instance.
	Username interface{} `pulumi:"username"`
}

// HBase server linked service.
type HBaseLinkedServiceResponse struct {
	// Specifies whether to require a CA-issued SSL certificate name to match the host name of the server when connecting over SSL. The default value is false.
	AllowHostNameCNMismatch interface{} `pulumi:"allowHostNameCNMismatch"`
	// Specifies whether to allow self-signed certificates from the server. The default value is false.
	AllowSelfSignedServerCert interface{} `pulumi:"allowSelfSignedServerCert"`
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The authentication mechanism to use to connect to the HBase server.
	AuthenticationType string `pulumi:"authenticationType"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReferenceResponse `pulumi:"connectVia"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// Specifies whether the connections to the server are encrypted using SSL. The default value is false.
	EnableSsl interface{} `pulumi:"enableSsl"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential interface{} `pulumi:"encryptedCredential"`
	// The IP address or host name of the HBase server. (i.e. 192.168.222.160)
	Host interface{} `pulumi:"host"`
	// The partial URL corresponding to the HBase server. (i.e. /gateway/sandbox/hbase/version)
	HttpPath interface{} `pulumi:"httpPath"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// The password corresponding to the user name.
	Password interface{} `pulumi:"password"`
	// The TCP port that the HBase instance uses to listen for client connections. The default value is 9090.
	Port interface{} `pulumi:"port"`
	// The full path of the .pem file containing trusted CA certificates for verifying the server when connecting over SSL. This property can only be set when using SSL on self-hosted IR. The default value is the cacerts.pem file installed with the IR.
	TrustedCertPath interface{} `pulumi:"trustedCertPath"`
	// Type of linked service.
	// Expected value is 'HBase'.
	Type string `pulumi:"type"`
	// The user name used to connect to the HBase instance.
	Username interface{} `pulumi:"username"`
}

// HBase server dataset.
type HBaseObjectDataset struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReference `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// The table name. Type: string (or Expression with resultType string).
	TableName interface{} `pulumi:"tableName"`
	// Type of dataset.
	// Expected value is 'HBaseObject'.
	Type string `pulumi:"type"`
}

// HBase server dataset.
type HBaseObjectDatasetResponse struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetResponseFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceResponse `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// The table name. Type: string (or Expression with resultType string).
	TableName interface{} `pulumi:"tableName"`
	// Type of dataset.
	// Expected value is 'HBaseObject'.
	Type string `pulumi:"type"`
}

// A copy activity HBase server source.
type HBaseSource struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns interface{} `pulumi:"additionalColumns"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// A query to retrieve data from source. Type: string (or Expression with resultType string).
	Query interface{} `pulumi:"query"`
	// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	QueryTimeout interface{} `pulumi:"queryTimeout"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// Copy source type.
	// Expected value is 'HBaseSource'.
	Type string `pulumi:"type"`
}

// A copy activity HBase server source.
type HBaseSourceResponse struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns interface{} `pulumi:"additionalColumns"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// A query to retrieve data from source. Type: string (or Expression with resultType string).
	Query interface{} `pulumi:"query"`
	// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	QueryTimeout interface{} `pulumi:"queryTimeout"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// Copy source type.
	// Expected value is 'HBaseSource'.
	Type string `pulumi:"type"`
}

// HDInsight Hive activity type.
type HDInsightHiveActivity struct {
	// User specified arguments to HDInsightActivity.
	Arguments []interface{} `pulumi:"arguments"`
	// Allows user to specify defines for Hive job request.
	Defines map[string]interface{} `pulumi:"defines"`
	// Activity depends on condition.
	DependsOn []ActivityDependency `pulumi:"dependsOn"`
	// Activity description.
	Description *string `pulumi:"description"`
	// Debug info option.
	GetDebugInfo *string `pulumi:"getDebugInfo"`
	// Linked service reference.
	LinkedServiceName *LinkedServiceReference `pulumi:"linkedServiceName"`
	// Activity name.
	Name string `pulumi:"name"`
	// Activity policy.
	Policy *ActivityPolicy `pulumi:"policy"`
	// Query timeout value (in minutes).  Effective when the HDInsight cluster is with ESP (Enterprise Security Package)
	QueryTimeout *int `pulumi:"queryTimeout"`
	// Script linked service reference.
	ScriptLinkedService *LinkedServiceReference `pulumi:"scriptLinkedService"`
	// Script path. Type: string (or Expression with resultType string).
	ScriptPath interface{} `pulumi:"scriptPath"`
	// Storage linked service references.
	StorageLinkedServices []LinkedServiceReference `pulumi:"storageLinkedServices"`
	// Type of activity.
	// Expected value is 'HDInsightHive'.
	Type string `pulumi:"type"`
	// Activity user properties.
	UserProperties []UserProperty `pulumi:"userProperties"`
	// User specified arguments under hivevar namespace.
	Variables []interface{} `pulumi:"variables"`
}

// HDInsight Hive activity type.
type HDInsightHiveActivityResponse struct {
	// User specified arguments to HDInsightActivity.
	Arguments []interface{} `pulumi:"arguments"`
	// Allows user to specify defines for Hive job request.
	Defines map[string]interface{} `pulumi:"defines"`
	// Activity depends on condition.
	DependsOn []ActivityDependencyResponse `pulumi:"dependsOn"`
	// Activity description.
	Description *string `pulumi:"description"`
	// Debug info option.
	GetDebugInfo *string `pulumi:"getDebugInfo"`
	// Linked service reference.
	LinkedServiceName *LinkedServiceReferenceResponse `pulumi:"linkedServiceName"`
	// Activity name.
	Name string `pulumi:"name"`
	// Activity policy.
	Policy *ActivityPolicyResponse `pulumi:"policy"`
	// Query timeout value (in minutes).  Effective when the HDInsight cluster is with ESP (Enterprise Security Package)
	QueryTimeout *int `pulumi:"queryTimeout"`
	// Script linked service reference.
	ScriptLinkedService *LinkedServiceReferenceResponse `pulumi:"scriptLinkedService"`
	// Script path. Type: string (or Expression with resultType string).
	ScriptPath interface{} `pulumi:"scriptPath"`
	// Storage linked service references.
	StorageLinkedServices []LinkedServiceReferenceResponse `pulumi:"storageLinkedServices"`
	// Type of activity.
	// Expected value is 'HDInsightHive'.
	Type string `pulumi:"type"`
	// Activity user properties.
	UserProperties []UserPropertyResponse `pulumi:"userProperties"`
	// User specified arguments under hivevar namespace.
	Variables []interface{} `pulumi:"variables"`
}

// HDInsight linked service.
type HDInsightLinkedService struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// HDInsight cluster URI. Type: string (or Expression with resultType string).
	ClusterUri interface{} `pulumi:"clusterUri"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference `pulumi:"connectVia"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential interface{} `pulumi:"encryptedCredential"`
	// Specify the FileSystem if the main storage for the HDInsight is ADLS Gen2. Type: string (or Expression with resultType string).
	FileSystem interface{} `pulumi:"fileSystem"`
	// A reference to the Azure SQL linked service that points to the HCatalog database.
	HcatalogLinkedServiceName *LinkedServiceReference `pulumi:"hcatalogLinkedServiceName"`
	// Specify if the HDInsight is created with ESP (Enterprise Security Package). Type: Boolean.
	IsEspEnabled interface{} `pulumi:"isEspEnabled"`
	// The Azure Storage linked service reference.
	LinkedServiceName *LinkedServiceReference `pulumi:"linkedServiceName"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// HDInsight cluster password.
	Password interface{} `pulumi:"password"`
	// Type of linked service.
	// Expected value is 'HDInsight'.
	Type string `pulumi:"type"`
	// HDInsight cluster user name. Type: string (or Expression with resultType string).
	UserName interface{} `pulumi:"userName"`
}

// HDInsight linked service.
type HDInsightLinkedServiceResponse struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// HDInsight cluster URI. Type: string (or Expression with resultType string).
	ClusterUri interface{} `pulumi:"clusterUri"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReferenceResponse `pulumi:"connectVia"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential interface{} `pulumi:"encryptedCredential"`
	// Specify the FileSystem if the main storage for the HDInsight is ADLS Gen2. Type: string (or Expression with resultType string).
	FileSystem interface{} `pulumi:"fileSystem"`
	// A reference to the Azure SQL linked service that points to the HCatalog database.
	HcatalogLinkedServiceName *LinkedServiceReferenceResponse `pulumi:"hcatalogLinkedServiceName"`
	// Specify if the HDInsight is created with ESP (Enterprise Security Package). Type: Boolean.
	IsEspEnabled interface{} `pulumi:"isEspEnabled"`
	// The Azure Storage linked service reference.
	LinkedServiceName *LinkedServiceReferenceResponse `pulumi:"linkedServiceName"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// HDInsight cluster password.
	Password interface{} `pulumi:"password"`
	// Type of linked service.
	// Expected value is 'HDInsight'.
	Type string `pulumi:"type"`
	// HDInsight cluster user name. Type: string (or Expression with resultType string).
	UserName interface{} `pulumi:"userName"`
}

// HDInsight MapReduce activity type.
type HDInsightMapReduceActivity struct {
	// User specified arguments to HDInsightActivity.
	Arguments []interface{} `pulumi:"arguments"`
	// Class name. Type: string (or Expression with resultType string).
	ClassName interface{} `pulumi:"className"`
	// Allows user to specify defines for the MapReduce job request.
	Defines map[string]interface{} `pulumi:"defines"`
	// Activity depends on condition.
	DependsOn []ActivityDependency `pulumi:"dependsOn"`
	// Activity description.
	Description *string `pulumi:"description"`
	// Debug info option.
	GetDebugInfo *string `pulumi:"getDebugInfo"`
	// Jar path. Type: string (or Expression with resultType string).
	JarFilePath interface{} `pulumi:"jarFilePath"`
	// Jar libs.
	JarLibs []interface{} `pulumi:"jarLibs"`
	// Jar linked service reference.
	JarLinkedService *LinkedServiceReference `pulumi:"jarLinkedService"`
	// Linked service reference.
	LinkedServiceName *LinkedServiceReference `pulumi:"linkedServiceName"`
	// Activity name.
	Name string `pulumi:"name"`
	// Activity policy.
	Policy *ActivityPolicy `pulumi:"policy"`
	// Storage linked service references.
	StorageLinkedServices []LinkedServiceReference `pulumi:"storageLinkedServices"`
	// Type of activity.
	// Expected value is 'HDInsightMapReduce'.
	Type string `pulumi:"type"`
	// Activity user properties.
	UserProperties []UserProperty `pulumi:"userProperties"`
}

// HDInsight MapReduce activity type.
type HDInsightMapReduceActivityResponse struct {
	// User specified arguments to HDInsightActivity.
	Arguments []interface{} `pulumi:"arguments"`
	// Class name. Type: string (or Expression with resultType string).
	ClassName interface{} `pulumi:"className"`
	// Allows user to specify defines for the MapReduce job request.
	Defines map[string]interface{} `pulumi:"defines"`
	// Activity depends on condition.
	DependsOn []ActivityDependencyResponse `pulumi:"dependsOn"`
	// Activity description.
	Description *string `pulumi:"description"`
	// Debug info option.
	GetDebugInfo *string `pulumi:"getDebugInfo"`
	// Jar path. Type: string (or Expression with resultType string).
	JarFilePath interface{} `pulumi:"jarFilePath"`
	// Jar libs.
	JarLibs []interface{} `pulumi:"jarLibs"`
	// Jar linked service reference.
	JarLinkedService *LinkedServiceReferenceResponse `pulumi:"jarLinkedService"`
	// Linked service reference.
	LinkedServiceName *LinkedServiceReferenceResponse `pulumi:"linkedServiceName"`
	// Activity name.
	Name string `pulumi:"name"`
	// Activity policy.
	Policy *ActivityPolicyResponse `pulumi:"policy"`
	// Storage linked service references.
	StorageLinkedServices []LinkedServiceReferenceResponse `pulumi:"storageLinkedServices"`
	// Type of activity.
	// Expected value is 'HDInsightMapReduce'.
	Type string `pulumi:"type"`
	// Activity user properties.
	UserProperties []UserPropertyResponse `pulumi:"userProperties"`
}

// HDInsight ondemand linked service.
type HDInsightOnDemandLinkedService struct {
	// Specifies additional storage accounts for the HDInsight linked service so that the Data Factory service can register them on your behalf.
	AdditionalLinkedServiceNames []LinkedServiceReference `pulumi:"additionalLinkedServiceNames"`
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The prefix of cluster name, postfix will be distinct with timestamp. Type: string (or Expression with resultType string).
	ClusterNamePrefix interface{} `pulumi:"clusterNamePrefix"`
	// The password to access the cluster.
	ClusterPassword interface{} `pulumi:"clusterPassword"`
	// The resource group where the cluster belongs. Type: string (or Expression with resultType string).
	ClusterResourceGroup interface{} `pulumi:"clusterResourceGroup"`
	// Number of worker/data nodes in the cluster. Suggestion value: 4. Type: string (or Expression with resultType string).
	ClusterSize interface{} `pulumi:"clusterSize"`
	// The password to SSH remotely connect cluster’s node (for Linux).
	ClusterSshPassword interface{} `pulumi:"clusterSshPassword"`
	// The username to SSH remotely connect to cluster’s node (for Linux). Type: string (or Expression with resultType string).
	ClusterSshUserName interface{} `pulumi:"clusterSshUserName"`
	// The cluster type. Type: string (or Expression with resultType string).
	ClusterType interface{} `pulumi:"clusterType"`
	// The username to access the cluster. Type: string (or Expression with resultType string).
	ClusterUserName interface{} `pulumi:"clusterUserName"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference `pulumi:"connectVia"`
	// Specifies the core configuration parameters (as in core-site.xml) for the HDInsight cluster to be created.
	CoreConfiguration interface{} `pulumi:"coreConfiguration"`
	// The credential reference containing authentication information.
	Credential *CredentialReference `pulumi:"credential"`
	// Specifies the size of the data node for the HDInsight cluster.
	DataNodeSize interface{} `pulumi:"dataNodeSize"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential interface{} `pulumi:"encryptedCredential"`
	// Specifies the HBase configuration parameters (hbase-site.xml) for the HDInsight cluster.
	HBaseConfiguration interface{} `pulumi:"hBaseConfiguration"`
	// The name of Azure SQL linked service that point to the HCatalog database. The on-demand HDInsight cluster is created by using the Azure SQL database as the metastore.
	HcatalogLinkedServiceName *LinkedServiceReference `pulumi:"hcatalogLinkedServiceName"`
	// Specifies the HDFS configuration parameters (hdfs-site.xml) for the HDInsight cluster.
	HdfsConfiguration interface{} `pulumi:"hdfsConfiguration"`
	// Specifies the size of the head node for the HDInsight cluster.
	HeadNodeSize interface{} `pulumi:"headNodeSize"`
	// Specifies the hive configuration parameters (hive-site.xml) for the HDInsight cluster.
	HiveConfiguration interface{} `pulumi:"hiveConfiguration"`
	// The customer’s subscription to host the cluster. Type: string (or Expression with resultType string).
	HostSubscriptionId interface{} `pulumi:"hostSubscriptionId"`
	// Azure Storage linked service to be used by the on-demand cluster for storing and processing data.
	LinkedServiceName LinkedServiceReference `pulumi:"linkedServiceName"`
	// Specifies the MapReduce configuration parameters (mapred-site.xml) for the HDInsight cluster.
	MapReduceConfiguration interface{} `pulumi:"mapReduceConfiguration"`
	// Specifies the Oozie configuration parameters (oozie-site.xml) for the HDInsight cluster.
	OozieConfiguration interface{} `pulumi:"oozieConfiguration"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Custom script actions to run on HDI ondemand cluster once it's up. Please refer to https://docs.microsoft.com/en-us/azure/hdinsight/hdinsight-hadoop-customize-cluster-linux?toc=%2Fen-us%2Fazure%2Fhdinsight%2Fr-server%2FTOC.json&bc=%2Fen-us%2Fazure%2Fbread%2Ftoc.json#understanding-script-actions.
	ScriptActions []ScriptAction `pulumi:"scriptActions"`
	// The service principal id for the hostSubscriptionId. Type: string (or Expression with resultType string).
	ServicePrincipalId interface{} `pulumi:"servicePrincipalId"`
	// The key for the service principal id.
	ServicePrincipalKey interface{} `pulumi:"servicePrincipalKey"`
	// The version of spark if the cluster type is 'spark'. Type: string (or Expression with resultType string).
	SparkVersion interface{} `pulumi:"sparkVersion"`
	// Specifies the Storm configuration parameters (storm-site.xml) for the HDInsight cluster.
	StormConfiguration interface{} `pulumi:"stormConfiguration"`
	// The ARM resource ID for the subnet in the vNet. If virtualNetworkId was specified, then this property is required. Type: string (or Expression with resultType string).
	SubnetName interface{} `pulumi:"subnetName"`
	// The Tenant id/name to which the service principal belongs. Type: string (or Expression with resultType string).
	Tenant interface{} `pulumi:"tenant"`
	// The allowed idle time for the on-demand HDInsight cluster. Specifies how long the on-demand HDInsight cluster stays alive after completion of an activity run if there are no other active jobs in the cluster. The minimum value is 5 mins. Type: string (or Expression with resultType string).
	TimeToLive interface{} `pulumi:"timeToLive"`
	// Type of linked service.
	// Expected value is 'HDInsightOnDemand'.
	Type string `pulumi:"type"`
	// Version of the HDInsight cluster.  Type: string (or Expression with resultType string).
	Version interface{} `pulumi:"version"`
	// The ARM resource ID for the vNet to which the cluster should be joined after creation. Type: string (or Expression with resultType string).
	VirtualNetworkId interface{} `pulumi:"virtualNetworkId"`
	// Specifies the Yarn configuration parameters (yarn-site.xml) for the HDInsight cluster.
	YarnConfiguration interface{} `pulumi:"yarnConfiguration"`
	// Specifies the size of the Zoo Keeper node for the HDInsight cluster.
	ZookeeperNodeSize interface{} `pulumi:"zookeeperNodeSize"`
}

// HDInsight ondemand linked service.
type HDInsightOnDemandLinkedServiceResponse struct {
	// Specifies additional storage accounts for the HDInsight linked service so that the Data Factory service can register them on your behalf.
	AdditionalLinkedServiceNames []LinkedServiceReferenceResponse `pulumi:"additionalLinkedServiceNames"`
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The prefix of cluster name, postfix will be distinct with timestamp. Type: string (or Expression with resultType string).
	ClusterNamePrefix interface{} `pulumi:"clusterNamePrefix"`
	// The password to access the cluster.
	ClusterPassword interface{} `pulumi:"clusterPassword"`
	// The resource group where the cluster belongs. Type: string (or Expression with resultType string).
	ClusterResourceGroup interface{} `pulumi:"clusterResourceGroup"`
	// Number of worker/data nodes in the cluster. Suggestion value: 4. Type: string (or Expression with resultType string).
	ClusterSize interface{} `pulumi:"clusterSize"`
	// The password to SSH remotely connect cluster’s node (for Linux).
	ClusterSshPassword interface{} `pulumi:"clusterSshPassword"`
	// The username to SSH remotely connect to cluster’s node (for Linux). Type: string (or Expression with resultType string).
	ClusterSshUserName interface{} `pulumi:"clusterSshUserName"`
	// The cluster type. Type: string (or Expression with resultType string).
	ClusterType interface{} `pulumi:"clusterType"`
	// The username to access the cluster. Type: string (or Expression with resultType string).
	ClusterUserName interface{} `pulumi:"clusterUserName"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReferenceResponse `pulumi:"connectVia"`
	// Specifies the core configuration parameters (as in core-site.xml) for the HDInsight cluster to be created.
	CoreConfiguration interface{} `pulumi:"coreConfiguration"`
	// The credential reference containing authentication information.
	Credential *CredentialReferenceResponse `pulumi:"credential"`
	// Specifies the size of the data node for the HDInsight cluster.
	DataNodeSize interface{} `pulumi:"dataNodeSize"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential interface{} `pulumi:"encryptedCredential"`
	// Specifies the HBase configuration parameters (hbase-site.xml) for the HDInsight cluster.
	HBaseConfiguration interface{} `pulumi:"hBaseConfiguration"`
	// The name of Azure SQL linked service that point to the HCatalog database. The on-demand HDInsight cluster is created by using the Azure SQL database as the metastore.
	HcatalogLinkedServiceName *LinkedServiceReferenceResponse `pulumi:"hcatalogLinkedServiceName"`
	// Specifies the HDFS configuration parameters (hdfs-site.xml) for the HDInsight cluster.
	HdfsConfiguration interface{} `pulumi:"hdfsConfiguration"`
	// Specifies the size of the head node for the HDInsight cluster.
	HeadNodeSize interface{} `pulumi:"headNodeSize"`
	// Specifies the hive configuration parameters (hive-site.xml) for the HDInsight cluster.
	HiveConfiguration interface{} `pulumi:"hiveConfiguration"`
	// The customer’s subscription to host the cluster. Type: string (or Expression with resultType string).
	HostSubscriptionId interface{} `pulumi:"hostSubscriptionId"`
	// Azure Storage linked service to be used by the on-demand cluster for storing and processing data.
	LinkedServiceName LinkedServiceReferenceResponse `pulumi:"linkedServiceName"`
	// Specifies the MapReduce configuration parameters (mapred-site.xml) for the HDInsight cluster.
	MapReduceConfiguration interface{} `pulumi:"mapReduceConfiguration"`
	// Specifies the Oozie configuration parameters (oozie-site.xml) for the HDInsight cluster.
	OozieConfiguration interface{} `pulumi:"oozieConfiguration"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Custom script actions to run on HDI ondemand cluster once it's up. Please refer to https://docs.microsoft.com/en-us/azure/hdinsight/hdinsight-hadoop-customize-cluster-linux?toc=%2Fen-us%2Fazure%2Fhdinsight%2Fr-server%2FTOC.json&bc=%2Fen-us%2Fazure%2Fbread%2Ftoc.json#understanding-script-actions.
	ScriptActions []ScriptActionResponse `pulumi:"scriptActions"`
	// The service principal id for the hostSubscriptionId. Type: string (or Expression with resultType string).
	ServicePrincipalId interface{} `pulumi:"servicePrincipalId"`
	// The key for the service principal id.
	ServicePrincipalKey interface{} `pulumi:"servicePrincipalKey"`
	// The version of spark if the cluster type is 'spark'. Type: string (or Expression with resultType string).
	SparkVersion interface{} `pulumi:"sparkVersion"`
	// Specifies the Storm configuration parameters (storm-site.xml) for the HDInsight cluster.
	StormConfiguration interface{} `pulumi:"stormConfiguration"`
	// The ARM resource ID for the subnet in the vNet. If virtualNetworkId was specified, then this property is required. Type: string (or Expression with resultType string).
	SubnetName interface{} `pulumi:"subnetName"`
	// The Tenant id/name to which the service principal belongs. Type: string (or Expression with resultType string).
	Tenant interface{} `pulumi:"tenant"`
	// The allowed idle time for the on-demand HDInsight cluster. Specifies how long the on-demand HDInsight cluster stays alive after completion of an activity run if there are no other active jobs in the cluster. The minimum value is 5 mins. Type: string (or Expression with resultType string).
	TimeToLive interface{} `pulumi:"timeToLive"`
	// Type of linked service.
	// Expected value is 'HDInsightOnDemand'.
	Type string `pulumi:"type"`
	// Version of the HDInsight cluster.  Type: string (or Expression with resultType string).
	Version interface{} `pulumi:"version"`
	// The ARM resource ID for the vNet to which the cluster should be joined after creation. Type: string (or Expression with resultType string).
	VirtualNetworkId interface{} `pulumi:"virtualNetworkId"`
	// Specifies the Yarn configuration parameters (yarn-site.xml) for the HDInsight cluster.
	YarnConfiguration interface{} `pulumi:"yarnConfiguration"`
	// Specifies the size of the Zoo Keeper node for the HDInsight cluster.
	ZookeeperNodeSize interface{} `pulumi:"zookeeperNodeSize"`
}

// HDInsight Pig activity type.
type HDInsightPigActivity struct {
	// User specified arguments to HDInsightActivity. Type: array (or Expression with resultType array).
	Arguments interface{} `pulumi:"arguments"`
	// Allows user to specify defines for Pig job request.
	Defines map[string]interface{} `pulumi:"defines"`
	// Activity depends on condition.
	DependsOn []ActivityDependency `pulumi:"dependsOn"`
	// Activity description.
	Description *string `pulumi:"description"`
	// Debug info option.
	GetDebugInfo *string `pulumi:"getDebugInfo"`
	// Linked service reference.
	LinkedServiceName *LinkedServiceReference `pulumi:"linkedServiceName"`
	// Activity name.
	Name string `pulumi:"name"`
	// Activity policy.
	Policy *ActivityPolicy `pulumi:"policy"`
	// Script linked service reference.
	ScriptLinkedService *LinkedServiceReference `pulumi:"scriptLinkedService"`
	// Script path. Type: string (or Expression with resultType string).
	ScriptPath interface{} `pulumi:"scriptPath"`
	// Storage linked service references.
	StorageLinkedServices []LinkedServiceReference `pulumi:"storageLinkedServices"`
	// Type of activity.
	// Expected value is 'HDInsightPig'.
	Type string `pulumi:"type"`
	// Activity user properties.
	UserProperties []UserProperty `pulumi:"userProperties"`
}

// HDInsight Pig activity type.
type HDInsightPigActivityResponse struct {
	// User specified arguments to HDInsightActivity. Type: array (or Expression with resultType array).
	Arguments interface{} `pulumi:"arguments"`
	// Allows user to specify defines for Pig job request.
	Defines map[string]interface{} `pulumi:"defines"`
	// Activity depends on condition.
	DependsOn []ActivityDependencyResponse `pulumi:"dependsOn"`
	// Activity description.
	Description *string `pulumi:"description"`
	// Debug info option.
	GetDebugInfo *string `pulumi:"getDebugInfo"`
	// Linked service reference.
	LinkedServiceName *LinkedServiceReferenceResponse `pulumi:"linkedServiceName"`
	// Activity name.
	Name string `pulumi:"name"`
	// Activity policy.
	Policy *ActivityPolicyResponse `pulumi:"policy"`
	// Script linked service reference.
	ScriptLinkedService *LinkedServiceReferenceResponse `pulumi:"scriptLinkedService"`
	// Script path. Type: string (or Expression with resultType string).
	ScriptPath interface{} `pulumi:"scriptPath"`
	// Storage linked service references.
	StorageLinkedServices []LinkedServiceReferenceResponse `pulumi:"storageLinkedServices"`
	// Type of activity.
	// Expected value is 'HDInsightPig'.
	Type string `pulumi:"type"`
	// Activity user properties.
	UserProperties []UserPropertyResponse `pulumi:"userProperties"`
}

// HDInsight Spark activity.
type HDInsightSparkActivity struct {
	// The user-specified arguments to HDInsightSparkActivity.
	Arguments []interface{} `pulumi:"arguments"`
	// The application's Java/Spark main class.
	ClassName *string `pulumi:"className"`
	// Activity depends on condition.
	DependsOn []ActivityDependency `pulumi:"dependsOn"`
	// Activity description.
	Description *string `pulumi:"description"`
	// The relative path to the root folder of the code/package to be executed. Type: string (or Expression with resultType string).
	EntryFilePath interface{} `pulumi:"entryFilePath"`
	// Debug info option.
	GetDebugInfo *string `pulumi:"getDebugInfo"`
	// Linked service reference.
	LinkedServiceName *LinkedServiceReference `pulumi:"linkedServiceName"`
	// Activity name.
	Name string `pulumi:"name"`
	// Activity policy.
	Policy *ActivityPolicy `pulumi:"policy"`
	// The user to impersonate that will execute the job. Type: string (or Expression with resultType string).
	ProxyUser interface{} `pulumi:"proxyUser"`
	// The root path in 'sparkJobLinkedService' for all the job’s files. Type: string (or Expression with resultType string).
	RootPath interface{} `pulumi:"rootPath"`
	// Spark configuration property.
	SparkConfig map[string]interface{} `pulumi:"sparkConfig"`
	// The storage linked service for uploading the entry file and dependencies, and for receiving logs.
	SparkJobLinkedService *LinkedServiceReference `pulumi:"sparkJobLinkedService"`
	// Type of activity.
	// Expected value is 'HDInsightSpark'.
	Type string `pulumi:"type"`
	// Activity user properties.
	UserProperties []UserProperty `pulumi:"userProperties"`
}

// HDInsight Spark activity.
type HDInsightSparkActivityResponse struct {
	// The user-specified arguments to HDInsightSparkActivity.
	Arguments []interface{} `pulumi:"arguments"`
	// The application's Java/Spark main class.
	ClassName *string `pulumi:"className"`
	// Activity depends on condition.
	DependsOn []ActivityDependencyResponse `pulumi:"dependsOn"`
	// Activity description.
	Description *string `pulumi:"description"`
	// The relative path to the root folder of the code/package to be executed. Type: string (or Expression with resultType string).
	EntryFilePath interface{} `pulumi:"entryFilePath"`
	// Debug info option.
	GetDebugInfo *string `pulumi:"getDebugInfo"`
	// Linked service reference.
	LinkedServiceName *LinkedServiceReferenceResponse `pulumi:"linkedServiceName"`
	// Activity name.
	Name string `pulumi:"name"`
	// Activity policy.
	Policy *ActivityPolicyResponse `pulumi:"policy"`
	// The user to impersonate that will execute the job. Type: string (or Expression with resultType string).
	ProxyUser interface{} `pulumi:"proxyUser"`
	// The root path in 'sparkJobLinkedService' for all the job’s files. Type: string (or Expression with resultType string).
	RootPath interface{} `pulumi:"rootPath"`
	// Spark configuration property.
	SparkConfig map[string]interface{} `pulumi:"sparkConfig"`
	// The storage linked service for uploading the entry file and dependencies, and for receiving logs.
	SparkJobLinkedService *LinkedServiceReferenceResponse `pulumi:"sparkJobLinkedService"`
	// Type of activity.
	// Expected value is 'HDInsightSpark'.
	Type string `pulumi:"type"`
	// Activity user properties.
	UserProperties []UserPropertyResponse `pulumi:"userProperties"`
}

// HDInsight streaming activity type.
type HDInsightStreamingActivity struct {
	// User specified arguments to HDInsightActivity.
	Arguments []interface{} `pulumi:"arguments"`
	// Combiner executable name. Type: string (or Expression with resultType string).
	Combiner interface{} `pulumi:"combiner"`
	// Command line environment values.
	CommandEnvironment []interface{} `pulumi:"commandEnvironment"`
	// Allows user to specify defines for streaming job request.
	Defines map[string]interface{} `pulumi:"defines"`
	// Activity depends on condition.
	DependsOn []ActivityDependency `pulumi:"dependsOn"`
	// Activity description.
	Description *string `pulumi:"description"`
	// Linked service reference where the files are located.
	FileLinkedService *LinkedServiceReference `pulumi:"fileLinkedService"`
	// Paths to streaming job files. Can be directories.
	FilePaths []interface{} `pulumi:"filePaths"`
	// Debug info option.
	GetDebugInfo *string `pulumi:"getDebugInfo"`
	// Input blob path. Type: string (or Expression with resultType string).
	Input interface{} `pulumi:"input"`
	// Linked service reference.
	LinkedServiceName *LinkedServiceReference `pulumi:"linkedServiceName"`
	// Mapper executable name. Type: string (or Expression with resultType string).
	Mapper interface{} `pulumi:"mapper"`
	// Activity name.
	Name string `pulumi:"name"`
	// Output blob path. Type: string (or Expression with resultType string).
	Output interface{} `pulumi:"output"`
	// Activity policy.
	Policy *ActivityPolicy `pulumi:"policy"`
	// Reducer executable name. Type: string (or Expression with resultType string).
	Reducer interface{} `pulumi:"reducer"`
	// Storage linked service references.
	StorageLinkedServices []LinkedServiceReference `pulumi:"storageLinkedServices"`
	// Type of activity.
	// Expected value is 'HDInsightStreaming'.
	Type string `pulumi:"type"`
	// Activity user properties.
	UserProperties []UserProperty `pulumi:"userProperties"`
}

// HDInsight streaming activity type.
type HDInsightStreamingActivityResponse struct {
	// User specified arguments to HDInsightActivity.
	Arguments []interface{} `pulumi:"arguments"`
	// Combiner executable name. Type: string (or Expression with resultType string).
	Combiner interface{} `pulumi:"combiner"`
	// Command line environment values.
	CommandEnvironment []interface{} `pulumi:"commandEnvironment"`
	// Allows user to specify defines for streaming job request.
	Defines map[string]interface{} `pulumi:"defines"`
	// Activity depends on condition.
	DependsOn []ActivityDependencyResponse `pulumi:"dependsOn"`
	// Activity description.
	Description *string `pulumi:"description"`
	// Linked service reference where the files are located.
	FileLinkedService *LinkedServiceReferenceResponse `pulumi:"fileLinkedService"`
	// Paths to streaming job files. Can be directories.
	FilePaths []interface{} `pulumi:"filePaths"`
	// Debug info option.
	GetDebugInfo *string `pulumi:"getDebugInfo"`
	// Input blob path. Type: string (or Expression with resultType string).
	Input interface{} `pulumi:"input"`
	// Linked service reference.
	LinkedServiceName *LinkedServiceReferenceResponse `pulumi:"linkedServiceName"`
	// Mapper executable name. Type: string (or Expression with resultType string).
	Mapper interface{} `pulumi:"mapper"`
	// Activity name.
	Name string `pulumi:"name"`
	// Output blob path. Type: string (or Expression with resultType string).
	Output interface{} `pulumi:"output"`
	// Activity policy.
	Policy *ActivityPolicyResponse `pulumi:"policy"`
	// Reducer executable name. Type: string (or Expression with resultType string).
	Reducer interface{} `pulumi:"reducer"`
	// Storage linked service references.
	StorageLinkedServices []LinkedServiceReferenceResponse `pulumi:"storageLinkedServices"`
	// Type of activity.
	// Expected value is 'HDInsightStreaming'.
	Type string `pulumi:"type"`
	// Activity user properties.
	UserProperties []UserPropertyResponse `pulumi:"userProperties"`
}

// Hadoop Distributed File System (HDFS) linked service.
type HdfsLinkedService struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// Type of authentication used to connect to the HDFS. Possible values are: Anonymous and Windows. Type: string (or Expression with resultType string).
	AuthenticationType interface{} `pulumi:"authenticationType"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference `pulumi:"connectVia"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential interface{} `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Password for Windows authentication.
	Password interface{} `pulumi:"password"`
	// Type of linked service.
	// Expected value is 'Hdfs'.
	Type string `pulumi:"type"`
	// The URL of the HDFS service endpoint, e.g. http://myhostname:50070/webhdfs/v1 . Type: string (or Expression with resultType string).
	Url interface{} `pulumi:"url"`
	// User name for Windows authentication. Type: string (or Expression with resultType string).
	UserName interface{} `pulumi:"userName"`
}

// Hadoop Distributed File System (HDFS) linked service.
type HdfsLinkedServiceResponse struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// Type of authentication used to connect to the HDFS. Possible values are: Anonymous and Windows. Type: string (or Expression with resultType string).
	AuthenticationType interface{} `pulumi:"authenticationType"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReferenceResponse `pulumi:"connectVia"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential interface{} `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Password for Windows authentication.
	Password interface{} `pulumi:"password"`
	// Type of linked service.
	// Expected value is 'Hdfs'.
	Type string `pulumi:"type"`
	// The URL of the HDFS service endpoint, e.g. http://myhostname:50070/webhdfs/v1 . Type: string (or Expression with resultType string).
	Url interface{} `pulumi:"url"`
	// User name for Windows authentication. Type: string (or Expression with resultType string).
	UserName interface{} `pulumi:"userName"`
}

// The location of HDFS.
type HdfsLocation struct {
	// Specify the file name of dataset. Type: string (or Expression with resultType string).
	FileName interface{} `pulumi:"fileName"`
	// Specify the folder path of dataset. Type: string (or Expression with resultType string)
	FolderPath interface{} `pulumi:"folderPath"`
	// Type of dataset storage location.
	// Expected value is 'HdfsLocation'.
	Type string `pulumi:"type"`
}

// The location of HDFS.
type HdfsLocationResponse struct {
	// Specify the file name of dataset. Type: string (or Expression with resultType string).
	FileName interface{} `pulumi:"fileName"`
	// Specify the folder path of dataset. Type: string (or Expression with resultType string)
	FolderPath interface{} `pulumi:"folderPath"`
	// Type of dataset storage location.
	// Expected value is 'HdfsLocation'.
	Type string `pulumi:"type"`
}

// HDFS read settings.
type HdfsReadSettings struct {
	// Indicates whether the source files need to be deleted after copy completion. Default is false. Type: boolean (or Expression with resultType boolean).
	DeleteFilesAfterCompletion interface{} `pulumi:"deleteFilesAfterCompletion"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// Specifies Distcp-related settings.
	DistcpSettings *DistcpSettings `pulumi:"distcpSettings"`
	// Indicates whether to enable partition discovery.
	EnablePartitionDiscovery *bool `pulumi:"enablePartitionDiscovery"`
	// Point to a text file that lists each file (relative path to the path configured in the dataset) that you want to copy. Type: string (or Expression with resultType string).
	FileListPath interface{} `pulumi:"fileListPath"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// The end of file's modified datetime. Type: string (or Expression with resultType string).
	ModifiedDatetimeEnd interface{} `pulumi:"modifiedDatetimeEnd"`
	// The start of file's modified datetime. Type: string (or Expression with resultType string).
	ModifiedDatetimeStart interface{} `pulumi:"modifiedDatetimeStart"`
	// Specify the root path where partition discovery starts from. Type: string (or Expression with resultType string).
	PartitionRootPath interface{} `pulumi:"partitionRootPath"`
	// If true, files under the folder path will be read recursively. Default is true. Type: boolean (or Expression with resultType boolean).
	Recursive interface{} `pulumi:"recursive"`
	// The read setting type.
	// Expected value is 'HdfsReadSettings'.
	Type string `pulumi:"type"`
	// HDFS wildcardFileName. Type: string (or Expression with resultType string).
	WildcardFileName interface{} `pulumi:"wildcardFileName"`
	// HDFS wildcardFolderPath. Type: string (or Expression with resultType string).
	WildcardFolderPath interface{} `pulumi:"wildcardFolderPath"`
}

// HDFS read settings.
type HdfsReadSettingsResponse struct {
	// Indicates whether the source files need to be deleted after copy completion. Default is false. Type: boolean (or Expression with resultType boolean).
	DeleteFilesAfterCompletion interface{} `pulumi:"deleteFilesAfterCompletion"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// Specifies Distcp-related settings.
	DistcpSettings *DistcpSettingsResponse `pulumi:"distcpSettings"`
	// Indicates whether to enable partition discovery.
	EnablePartitionDiscovery *bool `pulumi:"enablePartitionDiscovery"`
	// Point to a text file that lists each file (relative path to the path configured in the dataset) that you want to copy. Type: string (or Expression with resultType string).
	FileListPath interface{} `pulumi:"fileListPath"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// The end of file's modified datetime. Type: string (or Expression with resultType string).
	ModifiedDatetimeEnd interface{} `pulumi:"modifiedDatetimeEnd"`
	// The start of file's modified datetime. Type: string (or Expression with resultType string).
	ModifiedDatetimeStart interface{} `pulumi:"modifiedDatetimeStart"`
	// Specify the root path where partition discovery starts from. Type: string (or Expression with resultType string).
	PartitionRootPath interface{} `pulumi:"partitionRootPath"`
	// If true, files under the folder path will be read recursively. Default is true. Type: boolean (or Expression with resultType boolean).
	Recursive interface{} `pulumi:"recursive"`
	// The read setting type.
	// Expected value is 'HdfsReadSettings'.
	Type string `pulumi:"type"`
	// HDFS wildcardFileName. Type: string (or Expression with resultType string).
	WildcardFileName interface{} `pulumi:"wildcardFileName"`
	// HDFS wildcardFolderPath. Type: string (or Expression with resultType string).
	WildcardFolderPath interface{} `pulumi:"wildcardFolderPath"`
}

// A copy activity HDFS source.
type HdfsSource struct {
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// Specifies Distcp-related settings.
	DistcpSettings *DistcpSettings `pulumi:"distcpSettings"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// If true, files under the folder path will be read recursively. Default is true. Type: boolean (or Expression with resultType boolean).
	Recursive interface{} `pulumi:"recursive"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// Copy source type.
	// Expected value is 'HdfsSource'.
	Type string `pulumi:"type"`
}

// A copy activity HDFS source.
type HdfsSourceResponse struct {
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// Specifies Distcp-related settings.
	DistcpSettings *DistcpSettingsResponse `pulumi:"distcpSettings"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// If true, files under the folder path will be read recursively. Default is true. Type: boolean (or Expression with resultType boolean).
	Recursive interface{} `pulumi:"recursive"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// Copy source type.
	// Expected value is 'HdfsSource'.
	Type string `pulumi:"type"`
}

// Hive Server linked service.
type HiveLinkedService struct {
	// Specifies whether to require a CA-issued SSL certificate name to match the host name of the server when connecting over SSL. The default value is false.
	AllowHostNameCNMismatch interface{} `pulumi:"allowHostNameCNMismatch"`
	// Specifies whether to allow self-signed certificates from the server. The default value is false.
	AllowSelfSignedServerCert interface{} `pulumi:"allowSelfSignedServerCert"`
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The authentication method used to access the Hive server.
	AuthenticationType string `pulumi:"authenticationType"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference `pulumi:"connectVia"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// Specifies whether the connections to the server are encrypted using SSL. The default value is false.
	EnableSsl interface{} `pulumi:"enableSsl"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential interface{} `pulumi:"encryptedCredential"`
	// IP address or host name of the Hive server, separated by ';' for multiple hosts (only when serviceDiscoveryMode is enable).
	Host interface{} `pulumi:"host"`
	// The partial URL corresponding to the Hive server.
	HttpPath interface{} `pulumi:"httpPath"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// The password corresponding to the user name that you provided in the Username field
	Password interface{} `pulumi:"password"`
	// The TCP port that the Hive server uses to listen for client connections.
	Port interface{} `pulumi:"port"`
	// The type of Hive server.
	ServerType *string `pulumi:"serverType"`
	// true to indicate using the ZooKeeper service, false not.
	ServiceDiscoveryMode interface{} `pulumi:"serviceDiscoveryMode"`
	// The transport protocol to use in the Thrift layer.
	ThriftTransportProtocol *string `pulumi:"thriftTransportProtocol"`
	// The full path of the .pem file containing trusted CA certificates for verifying the server when connecting over SSL. This property can only be set when using SSL on self-hosted IR. The default value is the cacerts.pem file installed with the IR.
	TrustedCertPath interface{} `pulumi:"trustedCertPath"`
	// Type of linked service.
	// Expected value is 'Hive'.
	Type string `pulumi:"type"`
	// Specifies whether the driver uses native HiveQL queries,or converts them into an equivalent form in HiveQL.
	UseNativeQuery interface{} `pulumi:"useNativeQuery"`
	// Specifies whether to use a CA certificate from the system trust store or from a specified PEM file. The default value is false.
	UseSystemTrustStore interface{} `pulumi:"useSystemTrustStore"`
	// The user name that you use to access Hive Server.
	Username interface{} `pulumi:"username"`
	// The namespace on ZooKeeper under which Hive Server 2 nodes are added.
	ZooKeeperNameSpace interface{} `pulumi:"zooKeeperNameSpace"`
}

// Hive Server linked service.
type HiveLinkedServiceResponse struct {
	// Specifies whether to require a CA-issued SSL certificate name to match the host name of the server when connecting over SSL. The default value is false.
	AllowHostNameCNMismatch interface{} `pulumi:"allowHostNameCNMismatch"`
	// Specifies whether to allow self-signed certificates from the server. The default value is false.
	AllowSelfSignedServerCert interface{} `pulumi:"allowSelfSignedServerCert"`
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The authentication method used to access the Hive server.
	AuthenticationType string `pulumi:"authenticationType"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReferenceResponse `pulumi:"connectVia"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// Specifies whether the connections to the server are encrypted using SSL. The default value is false.
	EnableSsl interface{} `pulumi:"enableSsl"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential interface{} `pulumi:"encryptedCredential"`
	// IP address or host name of the Hive server, separated by ';' for multiple hosts (only when serviceDiscoveryMode is enable).
	Host interface{} `pulumi:"host"`
	// The partial URL corresponding to the Hive server.
	HttpPath interface{} `pulumi:"httpPath"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// The password corresponding to the user name that you provided in the Username field
	Password interface{} `pulumi:"password"`
	// The TCP port that the Hive server uses to listen for client connections.
	Port interface{} `pulumi:"port"`
	// The type of Hive server.
	ServerType *string `pulumi:"serverType"`
	// true to indicate using the ZooKeeper service, false not.
	ServiceDiscoveryMode interface{} `pulumi:"serviceDiscoveryMode"`
	// The transport protocol to use in the Thrift layer.
	ThriftTransportProtocol *string `pulumi:"thriftTransportProtocol"`
	// The full path of the .pem file containing trusted CA certificates for verifying the server when connecting over SSL. This property can only be set when using SSL on self-hosted IR. The default value is the cacerts.pem file installed with the IR.
	TrustedCertPath interface{} `pulumi:"trustedCertPath"`
	// Type of linked service.
	// Expected value is 'Hive'.
	Type string `pulumi:"type"`
	// Specifies whether the driver uses native HiveQL queries,or converts them into an equivalent form in HiveQL.
	UseNativeQuery interface{} `pulumi:"useNativeQuery"`
	// Specifies whether to use a CA certificate from the system trust store or from a specified PEM file. The default value is false.
	UseSystemTrustStore interface{} `pulumi:"useSystemTrustStore"`
	// The user name that you use to access Hive Server.
	Username interface{} `pulumi:"username"`
	// The namespace on ZooKeeper under which Hive Server 2 nodes are added.
	ZooKeeperNameSpace interface{} `pulumi:"zooKeeperNameSpace"`
}

// Hive Server dataset.
type HiveObjectDataset struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReference `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// The table name of the Hive. Type: string (or Expression with resultType string).
	Table interface{} `pulumi:"table"`
	// This property will be retired. Please consider using schema + table properties instead.
	TableName interface{} `pulumi:"tableName"`
	// Type of dataset.
	// Expected value is 'HiveObject'.
	Type string `pulumi:"type"`
}

// Hive Server dataset.
type HiveObjectDatasetResponse struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetResponseFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceResponse `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// The table name of the Hive. Type: string (or Expression with resultType string).
	Table interface{} `pulumi:"table"`
	// This property will be retired. Please consider using schema + table properties instead.
	TableName interface{} `pulumi:"tableName"`
	// Type of dataset.
	// Expected value is 'HiveObject'.
	Type string `pulumi:"type"`
}

// A copy activity Hive Server source.
type HiveSource struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns interface{} `pulumi:"additionalColumns"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// A query to retrieve data from source. Type: string (or Expression with resultType string).
	Query interface{} `pulumi:"query"`
	// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	QueryTimeout interface{} `pulumi:"queryTimeout"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// Copy source type.
	// Expected value is 'HiveSource'.
	Type string `pulumi:"type"`
}

// A copy activity Hive Server source.
type HiveSourceResponse struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns interface{} `pulumi:"additionalColumns"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// A query to retrieve data from source. Type: string (or Expression with resultType string).
	Query interface{} `pulumi:"query"`
	// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	QueryTimeout interface{} `pulumi:"queryTimeout"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// Copy source type.
	// Expected value is 'HiveSource'.
	Type string `pulumi:"type"`
}

// A file in an HTTP web server.
type HttpDataset struct {
	// The headers for the HTTP Request. e.g. request-header-name-1:request-header-value-1
	// ...
	// request-header-name-n:request-header-value-n Type: string (or Expression with resultType string).
	AdditionalHeaders interface{} `pulumi:"additionalHeaders"`
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// The data compression method used on files.
	Compression *DatasetCompression `pulumi:"compression"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetFolder `pulumi:"folder"`
	// The format of files.
	Format interface{} `pulumi:"format"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReference `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// The relative URL based on the URL in the HttpLinkedService refers to an HTTP file Type: string (or Expression with resultType string).
	RelativeUrl interface{} `pulumi:"relativeUrl"`
	// The body for the HTTP request. Type: string (or Expression with resultType string).
	RequestBody interface{} `pulumi:"requestBody"`
	// The HTTP method for the HTTP request. Type: string (or Expression with resultType string).
	RequestMethod interface{} `pulumi:"requestMethod"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// Type of dataset.
	// Expected value is 'HttpFile'.
	Type string `pulumi:"type"`
}

// A file in an HTTP web server.
type HttpDatasetResponse struct {
	// The headers for the HTTP Request. e.g. request-header-name-1:request-header-value-1
	// ...
	// request-header-name-n:request-header-value-n Type: string (or Expression with resultType string).
	AdditionalHeaders interface{} `pulumi:"additionalHeaders"`
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// The data compression method used on files.
	Compression *DatasetCompressionResponse `pulumi:"compression"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetResponseFolder `pulumi:"folder"`
	// The format of files.
	Format interface{} `pulumi:"format"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceResponse `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// The relative URL based on the URL in the HttpLinkedService refers to an HTTP file Type: string (or Expression with resultType string).
	RelativeUrl interface{} `pulumi:"relativeUrl"`
	// The body for the HTTP request. Type: string (or Expression with resultType string).
	RequestBody interface{} `pulumi:"requestBody"`
	// The HTTP method for the HTTP request. Type: string (or Expression with resultType string).
	RequestMethod interface{} `pulumi:"requestMethod"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// Type of dataset.
	// Expected value is 'HttpFile'.
	Type string `pulumi:"type"`
}

// Linked service for an HTTP source.
type HttpLinkedService struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The additional HTTP headers in the request to RESTful API used for authorization. Type: object (or Expression with resultType object).
	AuthHeaders interface{} `pulumi:"authHeaders"`
	// The authentication type to be used to connect to the HTTP server.
	AuthenticationType *string `pulumi:"authenticationType"`
	// Thumbprint of certificate for ClientCertificate authentication. Only valid for on-premises copy. For on-premises copy with ClientCertificate authentication, either CertThumbprint or EmbeddedCertData/Password should be specified. Type: string (or Expression with resultType string).
	CertThumbprint interface{} `pulumi:"certThumbprint"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference `pulumi:"connectVia"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// Base64 encoded certificate data for ClientCertificate authentication. For on-premises copy with ClientCertificate authentication, either CertThumbprint or EmbeddedCertData/Password should be specified. Type: string (or Expression with resultType string).
	EmbeddedCertData interface{} `pulumi:"embeddedCertData"`
	// If true, validate the HTTPS server SSL certificate. Default value is true. Type: boolean (or Expression with resultType boolean).
	EnableServerCertificateValidation interface{} `pulumi:"enableServerCertificateValidation"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential interface{} `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Password for Basic, Digest, Windows, or ClientCertificate with EmbeddedCertData authentication.
	Password interface{} `pulumi:"password"`
	// Type of linked service.
	// Expected value is 'HttpServer'.
	Type string `pulumi:"type"`
	// The base URL of the HTTP endpoint, e.g. https://www.microsoft.com. Type: string (or Expression with resultType string).
	Url interface{} `pulumi:"url"`
	// User name for Basic, Digest, or Windows authentication. Type: string (or Expression with resultType string).
	UserName interface{} `pulumi:"userName"`
}

// Linked service for an HTTP source.
type HttpLinkedServiceResponse struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The additional HTTP headers in the request to RESTful API used for authorization. Type: object (or Expression with resultType object).
	AuthHeaders interface{} `pulumi:"authHeaders"`
	// The authentication type to be used to connect to the HTTP server.
	AuthenticationType *string `pulumi:"authenticationType"`
	// Thumbprint of certificate for ClientCertificate authentication. Only valid for on-premises copy. For on-premises copy with ClientCertificate authentication, either CertThumbprint or EmbeddedCertData/Password should be specified. Type: string (or Expression with resultType string).
	CertThumbprint interface{} `pulumi:"certThumbprint"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReferenceResponse `pulumi:"connectVia"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// Base64 encoded certificate data for ClientCertificate authentication. For on-premises copy with ClientCertificate authentication, either CertThumbprint or EmbeddedCertData/Password should be specified. Type: string (or Expression with resultType string).
	EmbeddedCertData interface{} `pulumi:"embeddedCertData"`
	// If true, validate the HTTPS server SSL certificate. Default value is true. Type: boolean (or Expression with resultType boolean).
	EnableServerCertificateValidation interface{} `pulumi:"enableServerCertificateValidation"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential interface{} `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Password for Basic, Digest, Windows, or ClientCertificate with EmbeddedCertData authentication.
	Password interface{} `pulumi:"password"`
	// Type of linked service.
	// Expected value is 'HttpServer'.
	Type string `pulumi:"type"`
	// The base URL of the HTTP endpoint, e.g. https://www.microsoft.com. Type: string (or Expression with resultType string).
	Url interface{} `pulumi:"url"`
	// User name for Basic, Digest, or Windows authentication. Type: string (or Expression with resultType string).
	UserName interface{} `pulumi:"userName"`
}

// Sftp read settings.
type HttpReadSettings struct {
	// The additional HTTP headers in the request to the RESTful API. Type: string (or Expression with resultType string).
	AdditionalHeaders interface{} `pulumi:"additionalHeaders"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// Indicates whether to enable partition discovery.
	EnablePartitionDiscovery *bool `pulumi:"enablePartitionDiscovery"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// Specify the root path where partition discovery starts from. Type: string (or Expression with resultType string).
	PartitionRootPath interface{} `pulumi:"partitionRootPath"`
	// The HTTP request body to the RESTful API if requestMethod is POST. Type: string (or Expression with resultType string).
	RequestBody interface{} `pulumi:"requestBody"`
	// The HTTP method used to call the RESTful API. The default is GET. Type: string (or Expression with resultType string).
	RequestMethod interface{} `pulumi:"requestMethod"`
	// Specifies the timeout for a HTTP client to get HTTP response from HTTP server.
	RequestTimeout interface{} `pulumi:"requestTimeout"`
	// The read setting type.
	// Expected value is 'HttpReadSettings'.
	Type string `pulumi:"type"`
}

// Sftp read settings.
type HttpReadSettingsResponse struct {
	// The additional HTTP headers in the request to the RESTful API. Type: string (or Expression with resultType string).
	AdditionalHeaders interface{} `pulumi:"additionalHeaders"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// Indicates whether to enable partition discovery.
	EnablePartitionDiscovery *bool `pulumi:"enablePartitionDiscovery"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// Specify the root path where partition discovery starts from. Type: string (or Expression with resultType string).
	PartitionRootPath interface{} `pulumi:"partitionRootPath"`
	// The HTTP request body to the RESTful API if requestMethod is POST. Type: string (or Expression with resultType string).
	RequestBody interface{} `pulumi:"requestBody"`
	// The HTTP method used to call the RESTful API. The default is GET. Type: string (or Expression with resultType string).
	RequestMethod interface{} `pulumi:"requestMethod"`
	// Specifies the timeout for a HTTP client to get HTTP response from HTTP server.
	RequestTimeout interface{} `pulumi:"requestTimeout"`
	// The read setting type.
	// Expected value is 'HttpReadSettings'.
	Type string `pulumi:"type"`
}

// The location of http server.
type HttpServerLocation struct {
	// Specify the file name of dataset. Type: string (or Expression with resultType string).
	FileName interface{} `pulumi:"fileName"`
	// Specify the folder path of dataset. Type: string (or Expression with resultType string)
	FolderPath interface{} `pulumi:"folderPath"`
	// Specify the relativeUrl of http server. Type: string (or Expression with resultType string)
	RelativeUrl interface{} `pulumi:"relativeUrl"`
	// Type of dataset storage location.
	// Expected value is 'HttpServerLocation'.
	Type string `pulumi:"type"`
}

// The location of http server.
type HttpServerLocationResponse struct {
	// Specify the file name of dataset. Type: string (or Expression with resultType string).
	FileName interface{} `pulumi:"fileName"`
	// Specify the folder path of dataset. Type: string (or Expression with resultType string)
	FolderPath interface{} `pulumi:"folderPath"`
	// Specify the relativeUrl of http server. Type: string (or Expression with resultType string)
	RelativeUrl interface{} `pulumi:"relativeUrl"`
	// Type of dataset storage location.
	// Expected value is 'HttpServerLocation'.
	Type string `pulumi:"type"`
}

// A copy activity source for an HTTP file.
type HttpSource struct {
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// Specifies the timeout for a HTTP client to get HTTP response from HTTP server. The default value is equivalent to System.Net.HttpWebRequest.Timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	HttpRequestTimeout interface{} `pulumi:"httpRequestTimeout"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// Copy source type.
	// Expected value is 'HttpSource'.
	Type string `pulumi:"type"`
}

// A copy activity source for an HTTP file.
type HttpSourceResponse struct {
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// Specifies the timeout for a HTTP client to get HTTP response from HTTP server. The default value is equivalent to System.Net.HttpWebRequest.Timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	HttpRequestTimeout interface{} `pulumi:"httpRequestTimeout"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// Copy source type.
	// Expected value is 'HttpSource'.
	Type string `pulumi:"type"`
}

// Hubspot Service linked service.
type HubspotLinkedService struct {
	// The access token obtained when initially authenticating your OAuth integration.
	AccessToken interface{} `pulumi:"accessToken"`
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The client ID associated with your Hubspot application.
	ClientId interface{} `pulumi:"clientId"`
	// The client secret associated with your Hubspot application.
	ClientSecret interface{} `pulumi:"clientSecret"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference `pulumi:"connectVia"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential interface{} `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// The refresh token obtained when initially authenticating your OAuth integration.
	RefreshToken interface{} `pulumi:"refreshToken"`
	// Type of linked service.
	// Expected value is 'Hubspot'.
	Type string `pulumi:"type"`
	// Specifies whether the data source endpoints are encrypted using HTTPS. The default value is true.
	UseEncryptedEndpoints interface{} `pulumi:"useEncryptedEndpoints"`
	// Specifies whether to require the host name in the server's certificate to match the host name of the server when connecting over SSL. The default value is true.
	UseHostVerification interface{} `pulumi:"useHostVerification"`
	// Specifies whether to verify the identity of the server when connecting over SSL. The default value is true.
	UsePeerVerification interface{} `pulumi:"usePeerVerification"`
}

// Hubspot Service linked service.
type HubspotLinkedServiceResponse struct {
	// The access token obtained when initially authenticating your OAuth integration.
	AccessToken interface{} `pulumi:"accessToken"`
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The client ID associated with your Hubspot application.
	ClientId interface{} `pulumi:"clientId"`
	// The client secret associated with your Hubspot application.
	ClientSecret interface{} `pulumi:"clientSecret"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReferenceResponse `pulumi:"connectVia"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential interface{} `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// The refresh token obtained when initially authenticating your OAuth integration.
	RefreshToken interface{} `pulumi:"refreshToken"`
	// Type of linked service.
	// Expected value is 'Hubspot'.
	Type string `pulumi:"type"`
	// Specifies whether the data source endpoints are encrypted using HTTPS. The default value is true.
	UseEncryptedEndpoints interface{} `pulumi:"useEncryptedEndpoints"`
	// Specifies whether to require the host name in the server's certificate to match the host name of the server when connecting over SSL. The default value is true.
	UseHostVerification interface{} `pulumi:"useHostVerification"`
	// Specifies whether to verify the identity of the server when connecting over SSL. The default value is true.
	UsePeerVerification interface{} `pulumi:"usePeerVerification"`
}

// Hubspot Service dataset.
type HubspotObjectDataset struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReference `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// The table name. Type: string (or Expression with resultType string).
	TableName interface{} `pulumi:"tableName"`
	// Type of dataset.
	// Expected value is 'HubspotObject'.
	Type string `pulumi:"type"`
}

// Hubspot Service dataset.
type HubspotObjectDatasetResponse struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetResponseFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceResponse `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// The table name. Type: string (or Expression with resultType string).
	TableName interface{} `pulumi:"tableName"`
	// Type of dataset.
	// Expected value is 'HubspotObject'.
	Type string `pulumi:"type"`
}

// A copy activity Hubspot Service source.
type HubspotSource struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns interface{} `pulumi:"additionalColumns"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// A query to retrieve data from source. Type: string (or Expression with resultType string).
	Query interface{} `pulumi:"query"`
	// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	QueryTimeout interface{} `pulumi:"queryTimeout"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// Copy source type.
	// Expected value is 'HubspotSource'.
	Type string `pulumi:"type"`
}

// A copy activity Hubspot Service source.
type HubspotSourceResponse struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns interface{} `pulumi:"additionalColumns"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// A query to retrieve data from source. Type: string (or Expression with resultType string).
	Query interface{} `pulumi:"query"`
	// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	QueryTimeout interface{} `pulumi:"queryTimeout"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// Copy source type.
	// Expected value is 'HubspotSource'.
	Type string `pulumi:"type"`
}

// This activity evaluates a boolean expression and executes either the activities under the ifTrueActivities property or the ifFalseActivities property depending on the result of the expression.
type IfConditionActivity struct {
	// Activity depends on condition.
	DependsOn []ActivityDependency `pulumi:"dependsOn"`
	// Activity description.
	Description *string `pulumi:"description"`
	// An expression that would evaluate to Boolean. This is used to determine the block of activities (ifTrueActivities or ifFalseActivities) that will be executed.
	Expression Expression `pulumi:"expression"`
	// List of activities to execute if expression is evaluated to false. This is an optional property and if not provided, the activity will exit without any action.
	IfFalseActivities []interface{} `pulumi:"ifFalseActivities"`
	// List of activities to execute if expression is evaluated to true. This is an optional property and if not provided, the activity will exit without any action.
	IfTrueActivities []interface{} `pulumi:"ifTrueActivities"`
	// Activity name.
	Name string `pulumi:"name"`
	// Type of activity.
	// Expected value is 'IfCondition'.
	Type string `pulumi:"type"`
	// Activity user properties.
	UserProperties []UserProperty `pulumi:"userProperties"`
}

// This activity evaluates a boolean expression and executes either the activities under the ifTrueActivities property or the ifFalseActivities property depending on the result of the expression.
type IfConditionActivityResponse struct {
	// Activity depends on condition.
	DependsOn []ActivityDependencyResponse `pulumi:"dependsOn"`
	// Activity description.
	Description *string `pulumi:"description"`
	// An expression that would evaluate to Boolean. This is used to determine the block of activities (ifTrueActivities or ifFalseActivities) that will be executed.
	Expression ExpressionResponse `pulumi:"expression"`
	// List of activities to execute if expression is evaluated to false. This is an optional property and if not provided, the activity will exit without any action.
	IfFalseActivities []interface{} `pulumi:"ifFalseActivities"`
	// List of activities to execute if expression is evaluated to true. This is an optional property and if not provided, the activity will exit without any action.
	IfTrueActivities []interface{} `pulumi:"ifTrueActivities"`
	// Activity name.
	Name string `pulumi:"name"`
	// Type of activity.
	// Expected value is 'IfCondition'.
	Type string `pulumi:"type"`
	// Activity user properties.
	UserProperties []UserPropertyResponse `pulumi:"userProperties"`
}

// Impala server linked service.
type ImpalaLinkedService struct {
	// Specifies whether to require a CA-issued SSL certificate name to match the host name of the server when connecting over SSL. The default value is false.
	AllowHostNameCNMismatch interface{} `pulumi:"allowHostNameCNMismatch"`
	// Specifies whether to allow self-signed certificates from the server. The default value is false.
	AllowSelfSignedServerCert interface{} `pulumi:"allowSelfSignedServerCert"`
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The authentication type to use.
	AuthenticationType string `pulumi:"authenticationType"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference `pulumi:"connectVia"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// Specifies whether the connections to the server are encrypted using SSL. The default value is false.
	EnableSsl interface{} `pulumi:"enableSsl"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential interface{} `pulumi:"encryptedCredential"`
	// The IP address or host name of the Impala server. (i.e. 192.168.222.160)
	Host interface{} `pulumi:"host"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// The password corresponding to the user name when using UsernameAndPassword.
	Password interface{} `pulumi:"password"`
	// The TCP port that the Impala server uses to listen for client connections. The default value is 21050.
	Port interface{} `pulumi:"port"`
	// The full path of the .pem file containing trusted CA certificates for verifying the server when connecting over SSL. This property can only be set when using SSL on self-hosted IR. The default value is the cacerts.pem file installed with the IR.
	TrustedCertPath interface{} `pulumi:"trustedCertPath"`
	// Type of linked service.
	// Expected value is 'Impala'.
	Type string `pulumi:"type"`
	// Specifies whether to use a CA certificate from the system trust store or from a specified PEM file. The default value is false.
	UseSystemTrustStore interface{} `pulumi:"useSystemTrustStore"`
	// The user name used to access the Impala server. The default value is anonymous when using SASLUsername.
	Username interface{} `pulumi:"username"`
}

// Impala server linked service.
type ImpalaLinkedServiceResponse struct {
	// Specifies whether to require a CA-issued SSL certificate name to match the host name of the server when connecting over SSL. The default value is false.
	AllowHostNameCNMismatch interface{} `pulumi:"allowHostNameCNMismatch"`
	// Specifies whether to allow self-signed certificates from the server. The default value is false.
	AllowSelfSignedServerCert interface{} `pulumi:"allowSelfSignedServerCert"`
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The authentication type to use.
	AuthenticationType string `pulumi:"authenticationType"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReferenceResponse `pulumi:"connectVia"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// Specifies whether the connections to the server are encrypted using SSL. The default value is false.
	EnableSsl interface{} `pulumi:"enableSsl"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential interface{} `pulumi:"encryptedCredential"`
	// The IP address or host name of the Impala server. (i.e. 192.168.222.160)
	Host interface{} `pulumi:"host"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// The password corresponding to the user name when using UsernameAndPassword.
	Password interface{} `pulumi:"password"`
	// The TCP port that the Impala server uses to listen for client connections. The default value is 21050.
	Port interface{} `pulumi:"port"`
	// The full path of the .pem file containing trusted CA certificates for verifying the server when connecting over SSL. This property can only be set when using SSL on self-hosted IR. The default value is the cacerts.pem file installed with the IR.
	TrustedCertPath interface{} `pulumi:"trustedCertPath"`
	// Type of linked service.
	// Expected value is 'Impala'.
	Type string `pulumi:"type"`
	// Specifies whether to use a CA certificate from the system trust store or from a specified PEM file. The default value is false.
	UseSystemTrustStore interface{} `pulumi:"useSystemTrustStore"`
	// The user name used to access the Impala server. The default value is anonymous when using SASLUsername.
	Username interface{} `pulumi:"username"`
}

// Impala server dataset.
type ImpalaObjectDataset struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReference `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// The table name of the Impala. Type: string (or Expression with resultType string).
	Table interface{} `pulumi:"table"`
	// This property will be retired. Please consider using schema + table properties instead.
	TableName interface{} `pulumi:"tableName"`
	// Type of dataset.
	// Expected value is 'ImpalaObject'.
	Type string `pulumi:"type"`
}

// Impala server dataset.
type ImpalaObjectDatasetResponse struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetResponseFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceResponse `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// The table name of the Impala. Type: string (or Expression with resultType string).
	Table interface{} `pulumi:"table"`
	// This property will be retired. Please consider using schema + table properties instead.
	TableName interface{} `pulumi:"tableName"`
	// Type of dataset.
	// Expected value is 'ImpalaObject'.
	Type string `pulumi:"type"`
}

// A copy activity Impala server source.
type ImpalaSource struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns interface{} `pulumi:"additionalColumns"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// A query to retrieve data from source. Type: string (or Expression with resultType string).
	Query interface{} `pulumi:"query"`
	// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	QueryTimeout interface{} `pulumi:"queryTimeout"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// Copy source type.
	// Expected value is 'ImpalaSource'.
	Type string `pulumi:"type"`
}

// A copy activity Impala server source.
type ImpalaSourceResponse struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns interface{} `pulumi:"additionalColumns"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// A query to retrieve data from source. Type: string (or Expression with resultType string).
	Query interface{} `pulumi:"query"`
	// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	QueryTimeout interface{} `pulumi:"queryTimeout"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// Copy source type.
	// Expected value is 'ImpalaSource'.
	Type string `pulumi:"type"`
}

// Informix linked service.
type InformixLinkedService struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// Type of authentication used to connect to the Informix as ODBC data store. Possible values are: Anonymous and Basic. Type: string (or Expression with resultType string).
	AuthenticationType interface{} `pulumi:"authenticationType"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference `pulumi:"connectVia"`
	// The non-access credential portion of the connection string as well as an optional encrypted credential. Type: string, SecureString or AzureKeyVaultSecretReference.
	ConnectionString interface{} `pulumi:"connectionString"`
	// The access credential portion of the connection string specified in driver-specific property-value format.
	Credential interface{} `pulumi:"credential"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential interface{} `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Password for Basic authentication.
	Password interface{} `pulumi:"password"`
	// Type of linked service.
	// Expected value is 'Informix'.
	Type string `pulumi:"type"`
	// User name for Basic authentication. Type: string (or Expression with resultType string).
	UserName interface{} `pulumi:"userName"`
}

// Informix linked service.
type InformixLinkedServiceResponse struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// Type of authentication used to connect to the Informix as ODBC data store. Possible values are: Anonymous and Basic. Type: string (or Expression with resultType string).
	AuthenticationType interface{} `pulumi:"authenticationType"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReferenceResponse `pulumi:"connectVia"`
	// The non-access credential portion of the connection string as well as an optional encrypted credential. Type: string, SecureString or AzureKeyVaultSecretReference.
	ConnectionString interface{} `pulumi:"connectionString"`
	// The access credential portion of the connection string specified in driver-specific property-value format.
	Credential interface{} `pulumi:"credential"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential interface{} `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Password for Basic authentication.
	Password interface{} `pulumi:"password"`
	// Type of linked service.
	// Expected value is 'Informix'.
	Type string `pulumi:"type"`
	// User name for Basic authentication. Type: string (or Expression with resultType string).
	UserName interface{} `pulumi:"userName"`
}

// A copy activity Informix sink.
type InformixSink struct {
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the sink data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// A query to execute before starting the copy. Type: string (or Expression with resultType string).
	PreCopyScript interface{} `pulumi:"preCopyScript"`
	// Sink retry count. Type: integer (or Expression with resultType integer).
	SinkRetryCount interface{} `pulumi:"sinkRetryCount"`
	// Sink retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SinkRetryWait interface{} `pulumi:"sinkRetryWait"`
	// Copy sink type.
	// Expected value is 'InformixSink'.
	Type string `pulumi:"type"`
	// Write batch size. Type: integer (or Expression with resultType integer), minimum: 0.
	WriteBatchSize interface{} `pulumi:"writeBatchSize"`
	// Write batch timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	WriteBatchTimeout interface{} `pulumi:"writeBatchTimeout"`
}

// A copy activity Informix sink.
type InformixSinkResponse struct {
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the sink data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// A query to execute before starting the copy. Type: string (or Expression with resultType string).
	PreCopyScript interface{} `pulumi:"preCopyScript"`
	// Sink retry count. Type: integer (or Expression with resultType integer).
	SinkRetryCount interface{} `pulumi:"sinkRetryCount"`
	// Sink retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SinkRetryWait interface{} `pulumi:"sinkRetryWait"`
	// Copy sink type.
	// Expected value is 'InformixSink'.
	Type string `pulumi:"type"`
	// Write batch size. Type: integer (or Expression with resultType integer), minimum: 0.
	WriteBatchSize interface{} `pulumi:"writeBatchSize"`
	// Write batch timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	WriteBatchTimeout interface{} `pulumi:"writeBatchTimeout"`
}

// A copy activity source for Informix.
type InformixSource struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns interface{} `pulumi:"additionalColumns"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// Database query. Type: string (or Expression with resultType string).
	Query interface{} `pulumi:"query"`
	// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	QueryTimeout interface{} `pulumi:"queryTimeout"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// Copy source type.
	// Expected value is 'InformixSource'.
	Type string `pulumi:"type"`
}

// A copy activity source for Informix.
type InformixSourceResponse struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns interface{} `pulumi:"additionalColumns"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// Database query. Type: string (or Expression with resultType string).
	Query interface{} `pulumi:"query"`
	// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	QueryTimeout interface{} `pulumi:"queryTimeout"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// Copy source type.
	// Expected value is 'InformixSource'.
	Type string `pulumi:"type"`
}

// The Informix table dataset.
type InformixTableDataset struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReference `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// The Informix table name. Type: string (or Expression with resultType string).
	TableName interface{} `pulumi:"tableName"`
	// Type of dataset.
	// Expected value is 'InformixTable'.
	Type string `pulumi:"type"`
}

// The Informix table dataset.
type InformixTableDatasetResponse struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetResponseFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceResponse `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// The Informix table name. Type: string (or Expression with resultType string).
	TableName interface{} `pulumi:"tableName"`
	// Type of dataset.
	// Expected value is 'InformixTable'.
	Type string `pulumi:"type"`
}

// The compute resource properties for managed integration runtime.
type IntegrationRuntimeComputeProperties struct {
	// Data flow properties for managed integration runtime.
	DataFlowProperties *IntegrationRuntimeDataFlowProperties `pulumi:"dataFlowProperties"`
	// The location for managed integration runtime. The supported regions could be found on https://docs.microsoft.com/en-us/azure/data-factory/data-factory-data-movement-activities
	Location *string `pulumi:"location"`
	// Maximum parallel executions count per node for managed integration runtime.
	MaxParallelExecutionsPerNode *int `pulumi:"maxParallelExecutionsPerNode"`
	// The node size requirement to managed integration runtime.
	NodeSize *string `pulumi:"nodeSize"`
	// The required number of nodes for managed integration runtime.
	NumberOfNodes *int `pulumi:"numberOfNodes"`
	// VNet properties for managed integration runtime.
	VNetProperties *IntegrationRuntimeVNetProperties `pulumi:"vNetProperties"`
}

// The compute resource properties for managed integration runtime.
type IntegrationRuntimeComputePropertiesResponse struct {
	// Data flow properties for managed integration runtime.
	DataFlowProperties *IntegrationRuntimeDataFlowPropertiesResponse `pulumi:"dataFlowProperties"`
	// The location for managed integration runtime. The supported regions could be found on https://docs.microsoft.com/en-us/azure/data-factory/data-factory-data-movement-activities
	Location *string `pulumi:"location"`
	// Maximum parallel executions count per node for managed integration runtime.
	MaxParallelExecutionsPerNode *int `pulumi:"maxParallelExecutionsPerNode"`
	// The node size requirement to managed integration runtime.
	NodeSize *string `pulumi:"nodeSize"`
	// The required number of nodes for managed integration runtime.
	NumberOfNodes *int `pulumi:"numberOfNodes"`
	// VNet properties for managed integration runtime.
	VNetProperties *IntegrationRuntimeVNetPropertiesResponse `pulumi:"vNetProperties"`
}

// Custom setup script properties for a managed dedicated integration runtime.
type IntegrationRuntimeCustomSetupScriptProperties struct {
	// The URI of the Azure blob container that contains the custom setup script.
	BlobContainerUri *string `pulumi:"blobContainerUri"`
	// The SAS token of the Azure blob container.
	SasToken *SecureString `pulumi:"sasToken"`
}

// Custom setup script properties for a managed dedicated integration runtime.
type IntegrationRuntimeCustomSetupScriptPropertiesResponse struct {
	// The URI of the Azure blob container that contains the custom setup script.
	BlobContainerUri *string `pulumi:"blobContainerUri"`
	// The SAS token of the Azure blob container.
	SasToken *SecureStringResponse `pulumi:"sasToken"`
}

// The definition and properties of virtual network to which Azure-SSIS integration runtime will join.
type IntegrationRuntimeCustomerVirtualNetwork struct {
	// The ID of subnet to which Azure-SSIS integration runtime will join.
	SubnetId *string `pulumi:"subnetId"`
}

// The definition and properties of virtual network to which Azure-SSIS integration runtime will join.
type IntegrationRuntimeCustomerVirtualNetworkResponse struct {
	// The ID of subnet to which Azure-SSIS integration runtime will join.
	SubnetId *string `pulumi:"subnetId"`
}

// Data flow properties for managed integration runtime.
type IntegrationRuntimeDataFlowProperties struct {
	// Cluster will not be recycled and it will be used in next data flow activity run until TTL (time to live) is reached if this is set as false. Default is true.
	Cleanup *bool `pulumi:"cleanup"`
	// Compute type of the cluster which will execute data flow job.
	ComputeType *string `pulumi:"computeType"`
	// Core count of the cluster which will execute data flow job. Supported values are: 8, 16, 32, 48, 80, 144 and 272.
	CoreCount *int `pulumi:"coreCount"`
	// Time to live (in minutes) setting of the cluster which will execute data flow job.
	TimeToLive *int `pulumi:"timeToLive"`
}

// Data flow properties for managed integration runtime.
type IntegrationRuntimeDataFlowPropertiesResponse struct {
	// Cluster will not be recycled and it will be used in next data flow activity run until TTL (time to live) is reached if this is set as false. Default is true.
	Cleanup *bool `pulumi:"cleanup"`
	// Compute type of the cluster which will execute data flow job.
	ComputeType *string `pulumi:"computeType"`
	// Core count of the cluster which will execute data flow job. Supported values are: 8, 16, 32, 48, 80, 144 and 272.
	CoreCount *int `pulumi:"coreCount"`
	// Time to live (in minutes) setting of the cluster which will execute data flow job.
	TimeToLive *int `pulumi:"timeToLive"`
}

// Data proxy properties for a managed dedicated integration runtime.
type IntegrationRuntimeDataProxyProperties struct {
	// The self-hosted integration runtime reference.
	ConnectVia *EntityReference `pulumi:"connectVia"`
	// The path to contain the staged data in the Blob storage.
	Path *string `pulumi:"path"`
	// The staging linked service reference.
	StagingLinkedService *EntityReference `pulumi:"stagingLinkedService"`
}

// Data proxy properties for a managed dedicated integration runtime.
type IntegrationRuntimeDataProxyPropertiesResponse struct {
	// The self-hosted integration runtime reference.
	ConnectVia *EntityReferenceResponse `pulumi:"connectVia"`
	// The path to contain the staged data in the Blob storage.
	Path *string `pulumi:"path"`
	// The staging linked service reference.
	StagingLinkedService *EntityReferenceResponse `pulumi:"stagingLinkedService"`
}

// Integration runtime reference type.
type IntegrationRuntimeReference struct {
	// Arguments for integration runtime.
	Parameters map[string]interface{} `pulumi:"parameters"`
	// Reference integration runtime name.
	ReferenceName string `pulumi:"referenceName"`
	// Type of integration runtime.
	Type string `pulumi:"type"`
}

// Integration runtime reference type.
type IntegrationRuntimeReferenceResponse struct {
	// Arguments for integration runtime.
	Parameters map[string]interface{} `pulumi:"parameters"`
	// Reference integration runtime name.
	ReferenceName string `pulumi:"referenceName"`
	// Type of integration runtime.
	Type string `pulumi:"type"`
}

// Catalog information for managed dedicated integration runtime.
type IntegrationRuntimeSsisCatalogInfo struct {
	// The password of the administrator user account of the catalog database.
	CatalogAdminPassword *SecureString `pulumi:"catalogAdminPassword"`
	// The administrator user name of catalog database.
	CatalogAdminUserName *string `pulumi:"catalogAdminUserName"`
	// The pricing tier for the catalog database. The valid values could be found in https://azure.microsoft.com/en-us/pricing/details/sql-database/
	CatalogPricingTier *string `pulumi:"catalogPricingTier"`
	// The catalog database server URL.
	CatalogServerEndpoint *string `pulumi:"catalogServerEndpoint"`
	// The dual standby pair name of Azure-SSIS Integration Runtimes to support SSISDB failover.
	DualStandbyPairName *string `pulumi:"dualStandbyPairName"`
}

// Catalog information for managed dedicated integration runtime.
type IntegrationRuntimeSsisCatalogInfoResponse struct {
	// The password of the administrator user account of the catalog database.
	CatalogAdminPassword *SecureStringResponse `pulumi:"catalogAdminPassword"`
	// The administrator user name of catalog database.
	CatalogAdminUserName *string `pulumi:"catalogAdminUserName"`
	// The pricing tier for the catalog database. The valid values could be found in https://azure.microsoft.com/en-us/pricing/details/sql-database/
	CatalogPricingTier *string `pulumi:"catalogPricingTier"`
	// The catalog database server URL.
	CatalogServerEndpoint *string `pulumi:"catalogServerEndpoint"`
	// The dual standby pair name of Azure-SSIS Integration Runtimes to support SSISDB failover.
	DualStandbyPairName *string `pulumi:"dualStandbyPairName"`
}

// SSIS properties for managed integration runtime.
type IntegrationRuntimeSsisProperties struct {
	// Catalog information for managed dedicated integration runtime.
	CatalogInfo *IntegrationRuntimeSsisCatalogInfo `pulumi:"catalogInfo"`
	// The credential reference containing authentication information.
	Credential *CredentialReference `pulumi:"credential"`
	// Custom setup script properties for a managed dedicated integration runtime.
	CustomSetupScriptProperties *IntegrationRuntimeCustomSetupScriptProperties `pulumi:"customSetupScriptProperties"`
	// Data proxy properties for a managed dedicated integration runtime.
	DataProxyProperties *IntegrationRuntimeDataProxyProperties `pulumi:"dataProxyProperties"`
	// The edition for the SSIS Integration Runtime
	Edition *string `pulumi:"edition"`
	// Custom setup without script properties for a SSIS integration runtime.
	ExpressCustomSetupProperties []interface{} `pulumi:"expressCustomSetupProperties"`
	// License type for bringing your own license scenario.
	LicenseType *string `pulumi:"licenseType"`
	// Package stores for the SSIS Integration Runtime.
	PackageStores []PackageStore `pulumi:"packageStores"`
}

// SSIS properties for managed integration runtime.
type IntegrationRuntimeSsisPropertiesResponse struct {
	// Catalog information for managed dedicated integration runtime.
	CatalogInfo *IntegrationRuntimeSsisCatalogInfoResponse `pulumi:"catalogInfo"`
	// The credential reference containing authentication information.
	Credential *CredentialReferenceResponse `pulumi:"credential"`
	// Custom setup script properties for a managed dedicated integration runtime.
	CustomSetupScriptProperties *IntegrationRuntimeCustomSetupScriptPropertiesResponse `pulumi:"customSetupScriptProperties"`
	// Data proxy properties for a managed dedicated integration runtime.
	DataProxyProperties *IntegrationRuntimeDataProxyPropertiesResponse `pulumi:"dataProxyProperties"`
	// The edition for the SSIS Integration Runtime
	Edition *string `pulumi:"edition"`
	// Custom setup without script properties for a SSIS integration runtime.
	ExpressCustomSetupProperties []interface{} `pulumi:"expressCustomSetupProperties"`
	// License type for bringing your own license scenario.
	LicenseType *string `pulumi:"licenseType"`
	// Package stores for the SSIS Integration Runtime.
	PackageStores []PackageStoreResponse `pulumi:"packageStores"`
}

// VNet properties for managed integration runtime.
type IntegrationRuntimeVNetProperties struct {
	// Resource IDs of the public IP addresses that this integration runtime will use.
	PublicIPs []string `pulumi:"publicIPs"`
	// The name of the subnet this integration runtime will join.
	Subnet *string `pulumi:"subnet"`
	// The ID of subnet, to which this Azure-SSIS integration runtime will be joined.
	SubnetId *string `pulumi:"subnetId"`
	// The ID of the VNet that this integration runtime will join.
	VNetId *string `pulumi:"vNetId"`
}

// VNet properties for managed integration runtime.
type IntegrationRuntimeVNetPropertiesResponse struct {
	// Resource IDs of the public IP addresses that this integration runtime will use.
	PublicIPs []string `pulumi:"publicIPs"`
	// The name of the subnet this integration runtime will join.
	Subnet *string `pulumi:"subnet"`
	// The ID of subnet, to which this Azure-SSIS integration runtime will be joined.
	SubnetId *string `pulumi:"subnetId"`
	// The ID of the VNet that this integration runtime will join.
	VNetId *string `pulumi:"vNetId"`
}

// Jira Service linked service.
type JiraLinkedService struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference `pulumi:"connectVia"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential interface{} `pulumi:"encryptedCredential"`
	// The IP address or host name of the Jira service. (e.g. jira.example.com)
	Host interface{} `pulumi:"host"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// The password corresponding to the user name that you provided in the username field.
	Password interface{} `pulumi:"password"`
	// The TCP port that the Jira server uses to listen for client connections. The default value is 443 if connecting through HTTPS, or 8080 if connecting through HTTP.
	Port interface{} `pulumi:"port"`
	// Type of linked service.
	// Expected value is 'Jira'.
	Type string `pulumi:"type"`
	// Specifies whether the data source endpoints are encrypted using HTTPS. The default value is true.
	UseEncryptedEndpoints interface{} `pulumi:"useEncryptedEndpoints"`
	// Specifies whether to require the host name in the server's certificate to match the host name of the server when connecting over SSL. The default value is true.
	UseHostVerification interface{} `pulumi:"useHostVerification"`
	// Specifies whether to verify the identity of the server when connecting over SSL. The default value is true.
	UsePeerVerification interface{} `pulumi:"usePeerVerification"`
	// The user name that you use to access Jira Service.
	Username interface{} `pulumi:"username"`
}

// Jira Service linked service.
type JiraLinkedServiceResponse struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReferenceResponse `pulumi:"connectVia"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential interface{} `pulumi:"encryptedCredential"`
	// The IP address or host name of the Jira service. (e.g. jira.example.com)
	Host interface{} `pulumi:"host"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// The password corresponding to the user name that you provided in the username field.
	Password interface{} `pulumi:"password"`
	// The TCP port that the Jira server uses to listen for client connections. The default value is 443 if connecting through HTTPS, or 8080 if connecting through HTTP.
	Port interface{} `pulumi:"port"`
	// Type of linked service.
	// Expected value is 'Jira'.
	Type string `pulumi:"type"`
	// Specifies whether the data source endpoints are encrypted using HTTPS. The default value is true.
	UseEncryptedEndpoints interface{} `pulumi:"useEncryptedEndpoints"`
	// Specifies whether to require the host name in the server's certificate to match the host name of the server when connecting over SSL. The default value is true.
	UseHostVerification interface{} `pulumi:"useHostVerification"`
	// Specifies whether to verify the identity of the server when connecting over SSL. The default value is true.
	UsePeerVerification interface{} `pulumi:"usePeerVerification"`
	// The user name that you use to access Jira Service.
	Username interface{} `pulumi:"username"`
}

// Jira Service dataset.
type JiraObjectDataset struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReference `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// The table name. Type: string (or Expression with resultType string).
	TableName interface{} `pulumi:"tableName"`
	// Type of dataset.
	// Expected value is 'JiraObject'.
	Type string `pulumi:"type"`
}

// Jira Service dataset.
type JiraObjectDatasetResponse struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetResponseFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceResponse `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// The table name. Type: string (or Expression with resultType string).
	TableName interface{} `pulumi:"tableName"`
	// Type of dataset.
	// Expected value is 'JiraObject'.
	Type string `pulumi:"type"`
}

// A copy activity Jira Service source.
type JiraSource struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns interface{} `pulumi:"additionalColumns"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// A query to retrieve data from source. Type: string (or Expression with resultType string).
	Query interface{} `pulumi:"query"`
	// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	QueryTimeout interface{} `pulumi:"queryTimeout"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// Copy source type.
	// Expected value is 'JiraSource'.
	Type string `pulumi:"type"`
}

// A copy activity Jira Service source.
type JiraSourceResponse struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns interface{} `pulumi:"additionalColumns"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// A query to retrieve data from source. Type: string (or Expression with resultType string).
	Query interface{} `pulumi:"query"`
	// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	QueryTimeout interface{} `pulumi:"queryTimeout"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// Copy source type.
	// Expected value is 'JiraSource'.
	Type string `pulumi:"type"`
}

// Json dataset.
type JsonDataset struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// The data compression method used for the json dataset.
	Compression *DatasetCompression `pulumi:"compression"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The code page name of the preferred encoding. If not specified, the default value is UTF-8, unless BOM denotes another Unicode encoding. Refer to the name column of the table in the following link to set supported values: https://msdn.microsoft.com/library/system.text.encoding.aspx. Type: string (or Expression with resultType string).
	EncodingName interface{} `pulumi:"encodingName"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReference `pulumi:"linkedServiceName"`
	// The location of the json data storage.
	Location interface{} `pulumi:"location"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// Type of dataset.
	// Expected value is 'Json'.
	Type string `pulumi:"type"`
}

// Json dataset.
type JsonDatasetResponse struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// The data compression method used for the json dataset.
	Compression *DatasetCompressionResponse `pulumi:"compression"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The code page name of the preferred encoding. If not specified, the default value is UTF-8, unless BOM denotes another Unicode encoding. Refer to the name column of the table in the following link to set supported values: https://msdn.microsoft.com/library/system.text.encoding.aspx. Type: string (or Expression with resultType string).
	EncodingName interface{} `pulumi:"encodingName"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetResponseFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceResponse `pulumi:"linkedServiceName"`
	// The location of the json data storage.
	Location interface{} `pulumi:"location"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// Type of dataset.
	// Expected value is 'Json'.
	Type string `pulumi:"type"`
}

// The data stored in JSON format.
type JsonFormat struct {
	// Deserializer. Type: string (or Expression with resultType string).
	Deserializer interface{} `pulumi:"deserializer"`
	// The code page name of the preferred encoding. If not provided, the default value is 'utf-8', unless the byte order mark (BOM) denotes another Unicode encoding. The full list of supported values can be found in the 'Name' column of the table of encodings in the following reference: https://go.microsoft.com/fwlink/?linkid=861078. Type: string (or Expression with resultType string).
	EncodingName interface{} `pulumi:"encodingName"`
	// File pattern of JSON. To be more specific, the way of separating a collection of JSON objects. The default value is 'setOfObjects'. It is case-sensitive.
	FilePattern interface{} `pulumi:"filePattern"`
	// The JSONPath of the JSON array element to be flattened. Example: "$.ArrayPath". Type: string (or Expression with resultType string).
	JsonNodeReference interface{} `pulumi:"jsonNodeReference"`
	// The JSONPath definition for each column mapping with a customized column name to extract data from JSON file. For fields under root object, start with "$"; for fields inside the array chosen by jsonNodeReference property, start from the array element. Example: {"Column1": "$.Column1Path", "Column2": "Column2PathInArray"}. Type: object (or Expression with resultType object).
	JsonPathDefinition interface{} `pulumi:"jsonPathDefinition"`
	// The character used to separate nesting levels. Default value is '.' (dot). Type: string (or Expression with resultType string).
	NestingSeparator interface{} `pulumi:"nestingSeparator"`
	// Serializer. Type: string (or Expression with resultType string).
	Serializer interface{} `pulumi:"serializer"`
	// Type of dataset storage format.
	// Expected value is 'JsonFormat'.
	Type string `pulumi:"type"`
}

// The data stored in JSON format.
type JsonFormatResponse struct {
	// Deserializer. Type: string (or Expression with resultType string).
	Deserializer interface{} `pulumi:"deserializer"`
	// The code page name of the preferred encoding. If not provided, the default value is 'utf-8', unless the byte order mark (BOM) denotes another Unicode encoding. The full list of supported values can be found in the 'Name' column of the table of encodings in the following reference: https://go.microsoft.com/fwlink/?linkid=861078. Type: string (or Expression with resultType string).
	EncodingName interface{} `pulumi:"encodingName"`
	// File pattern of JSON. To be more specific, the way of separating a collection of JSON objects. The default value is 'setOfObjects'. It is case-sensitive.
	FilePattern interface{} `pulumi:"filePattern"`
	// The JSONPath of the JSON array element to be flattened. Example: "$.ArrayPath". Type: string (or Expression with resultType string).
	JsonNodeReference interface{} `pulumi:"jsonNodeReference"`
	// The JSONPath definition for each column mapping with a customized column name to extract data from JSON file. For fields under root object, start with "$"; for fields inside the array chosen by jsonNodeReference property, start from the array element. Example: {"Column1": "$.Column1Path", "Column2": "Column2PathInArray"}. Type: object (or Expression with resultType object).
	JsonPathDefinition interface{} `pulumi:"jsonPathDefinition"`
	// The character used to separate nesting levels. Default value is '.' (dot). Type: string (or Expression with resultType string).
	NestingSeparator interface{} `pulumi:"nestingSeparator"`
	// Serializer. Type: string (or Expression with resultType string).
	Serializer interface{} `pulumi:"serializer"`
	// Type of dataset storage format.
	// Expected value is 'JsonFormat'.
	Type string `pulumi:"type"`
}

// Json read settings.
type JsonReadSettings struct {
	// Compression settings.
	CompressionProperties interface{} `pulumi:"compressionProperties"`
	// The read setting type.
	// Expected value is 'JsonReadSettings'.
	Type string `pulumi:"type"`
}

// Json read settings.
type JsonReadSettingsResponse struct {
	// Compression settings.
	CompressionProperties interface{} `pulumi:"compressionProperties"`
	// The read setting type.
	// Expected value is 'JsonReadSettings'.
	Type string `pulumi:"type"`
}

// A copy activity Json sink.
type JsonSink struct {
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// Json format settings.
	FormatSettings *JsonWriteSettings `pulumi:"formatSettings"`
	// The maximum concurrent connection count for the sink data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// Sink retry count. Type: integer (or Expression with resultType integer).
	SinkRetryCount interface{} `pulumi:"sinkRetryCount"`
	// Sink retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SinkRetryWait interface{} `pulumi:"sinkRetryWait"`
	// Json store settings.
	StoreSettings interface{} `pulumi:"storeSettings"`
	// Copy sink type.
	// Expected value is 'JsonSink'.
	Type string `pulumi:"type"`
	// Write batch size. Type: integer (or Expression with resultType integer), minimum: 0.
	WriteBatchSize interface{} `pulumi:"writeBatchSize"`
	// Write batch timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	WriteBatchTimeout interface{} `pulumi:"writeBatchTimeout"`
}

// A copy activity Json sink.
type JsonSinkResponse struct {
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// Json format settings.
	FormatSettings *JsonWriteSettingsResponse `pulumi:"formatSettings"`
	// The maximum concurrent connection count for the sink data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// Sink retry count. Type: integer (or Expression with resultType integer).
	SinkRetryCount interface{} `pulumi:"sinkRetryCount"`
	// Sink retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SinkRetryWait interface{} `pulumi:"sinkRetryWait"`
	// Json store settings.
	StoreSettings interface{} `pulumi:"storeSettings"`
	// Copy sink type.
	// Expected value is 'JsonSink'.
	Type string `pulumi:"type"`
	// Write batch size. Type: integer (or Expression with resultType integer), minimum: 0.
	WriteBatchSize interface{} `pulumi:"writeBatchSize"`
	// Write batch timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	WriteBatchTimeout interface{} `pulumi:"writeBatchTimeout"`
}

// A copy activity Json source.
type JsonSource struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns interface{} `pulumi:"additionalColumns"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// Json format settings.
	FormatSettings *JsonReadSettings `pulumi:"formatSettings"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// Json store settings.
	StoreSettings interface{} `pulumi:"storeSettings"`
	// Copy source type.
	// Expected value is 'JsonSource'.
	Type string `pulumi:"type"`
}

// A copy activity Json source.
type JsonSourceResponse struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns interface{} `pulumi:"additionalColumns"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// Json format settings.
	FormatSettings *JsonReadSettingsResponse `pulumi:"formatSettings"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// Json store settings.
	StoreSettings interface{} `pulumi:"storeSettings"`
	// Copy source type.
	// Expected value is 'JsonSource'.
	Type string `pulumi:"type"`
}

// Json write settings.
type JsonWriteSettings struct {
	// File pattern of JSON. This setting controls the way a collection of JSON objects will be treated. The default value is 'setOfObjects'. It is case-sensitive.
	FilePattern interface{} `pulumi:"filePattern"`
	// The write setting type.
	// Expected value is 'JsonWriteSettings'.
	Type string `pulumi:"type"`
}

// Json write settings.
type JsonWriteSettingsResponse struct {
	// File pattern of JSON. This setting controls the way a collection of JSON objects will be treated. The default value is 'setOfObjects'. It is case-sensitive.
	FilePattern interface{} `pulumi:"filePattern"`
	// The write setting type.
	// Expected value is 'JsonWriteSettings'.
	Type string `pulumi:"type"`
}

// The key authorization type integration runtime.
type LinkedIntegrationRuntimeKeyAuthorization struct {
	// The authorization type for integration runtime sharing.
	// Expected value is 'Key'.
	AuthorizationType string `pulumi:"authorizationType"`
	// The key used for authorization.
	Key SecureString `pulumi:"key"`
}

// The key authorization type integration runtime.
type LinkedIntegrationRuntimeKeyAuthorizationResponse struct {
	// The authorization type for integration runtime sharing.
	// Expected value is 'Key'.
	AuthorizationType string `pulumi:"authorizationType"`
	// The key used for authorization.
	Key SecureStringResponse `pulumi:"key"`
}

// The role based access control (RBAC) authorization type integration runtime.
type LinkedIntegrationRuntimeRbacAuthorization struct {
	// The authorization type for integration runtime sharing.
	// Expected value is 'RBAC'.
	AuthorizationType string `pulumi:"authorizationType"`
	// The credential reference containing authentication information.
	Credential *CredentialReference `pulumi:"credential"`
	// The resource identifier of the integration runtime to be shared.
	ResourceId string `pulumi:"resourceId"`
}

// The role based access control (RBAC) authorization type integration runtime.
type LinkedIntegrationRuntimeRbacAuthorizationResponse struct {
	// The authorization type for integration runtime sharing.
	// Expected value is 'RBAC'.
	AuthorizationType string `pulumi:"authorizationType"`
	// The credential reference containing authentication information.
	Credential *CredentialReferenceResponse `pulumi:"credential"`
	// The resource identifier of the integration runtime to be shared.
	ResourceId string `pulumi:"resourceId"`
}

// The linked integration runtime information.
type LinkedIntegrationRuntimeResponse struct {
	// The creating time of the linked integration runtime.
	CreateTime string `pulumi:"createTime"`
	// The location of the data factory for which the linked integration runtime belong to.
	DataFactoryLocation string `pulumi:"dataFactoryLocation"`
	// The name of the data factory for which the linked integration runtime belong to.
	DataFactoryName string `pulumi:"dataFactoryName"`
	// The name of the linked integration runtime.
	Name string `pulumi:"name"`
	// The subscription ID for which the linked integration runtime belong to.
	SubscriptionId string `pulumi:"subscriptionId"`
}

// Linked service reference type.
type LinkedServiceReference struct {
	// Arguments for LinkedService.
	Parameters map[string]interface{} `pulumi:"parameters"`
	// Reference LinkedService name.
	ReferenceName string `pulumi:"referenceName"`
	// Linked service reference type.
	Type string `pulumi:"type"`
}

// Linked service reference type.
type LinkedServiceReferenceResponse struct {
	// Arguments for LinkedService.
	Parameters map[string]interface{} `pulumi:"parameters"`
	// Reference LinkedService name.
	ReferenceName string `pulumi:"referenceName"`
	// Linked service reference type.
	Type string `pulumi:"type"`
}

// Log location settings.
type LogLocationSettings struct {
	// Log storage linked service reference.
	LinkedServiceName LinkedServiceReference `pulumi:"linkedServiceName"`
	// The path to storage for storing detailed logs of activity execution. Type: string (or Expression with resultType string).
	Path interface{} `pulumi:"path"`
}

// Log location settings.
type LogLocationSettingsResponse struct {
	// Log storage linked service reference.
	LinkedServiceName LinkedServiceReferenceResponse `pulumi:"linkedServiceName"`
	// The path to storage for storing detailed logs of activity execution. Type: string (or Expression with resultType string).
	Path interface{} `pulumi:"path"`
}

// Log settings.
type LogSettings struct {
	// Specifies settings for copy activity log.
	CopyActivityLogSettings *CopyActivityLogSettings `pulumi:"copyActivityLogSettings"`
	// Specifies whether to enable copy activity log. Type: boolean (or Expression with resultType boolean).
	EnableCopyActivityLog interface{} `pulumi:"enableCopyActivityLog"`
	// Log location settings customer needs to provide when enabling log.
	LogLocationSettings LogLocationSettings `pulumi:"logLocationSettings"`
}

// Log settings.
type LogSettingsResponse struct {
	// Specifies settings for copy activity log.
	CopyActivityLogSettings *CopyActivityLogSettingsResponse `pulumi:"copyActivityLogSettings"`
	// Specifies whether to enable copy activity log. Type: boolean (or Expression with resultType boolean).
	EnableCopyActivityLog interface{} `pulumi:"enableCopyActivityLog"`
	// Log location settings customer needs to provide when enabling log.
	LogLocationSettings LogLocationSettingsResponse `pulumi:"logLocationSettings"`
}

// (Deprecated. Please use LogSettings) Log storage settings.
type LogStorageSettings struct {
	// Specifies whether to enable reliable logging. Type: boolean (or Expression with resultType boolean).
	EnableReliableLogging interface{} `pulumi:"enableReliableLogging"`
	// Log storage linked service reference.
	LinkedServiceName LinkedServiceReference `pulumi:"linkedServiceName"`
	// Gets or sets the log level, support: Info, Warning. Type: string (or Expression with resultType string).
	LogLevel interface{} `pulumi:"logLevel"`
	// The path to storage for storing detailed logs of activity execution. Type: string (or Expression with resultType string).
	Path interface{} `pulumi:"path"`
}

// (Deprecated. Please use LogSettings) Log storage settings.
type LogStorageSettingsResponse struct {
	// Specifies whether to enable reliable logging. Type: boolean (or Expression with resultType boolean).
	EnableReliableLogging interface{} `pulumi:"enableReliableLogging"`
	// Log storage linked service reference.
	LinkedServiceName LinkedServiceReferenceResponse `pulumi:"linkedServiceName"`
	// Gets or sets the log level, support: Info, Warning. Type: string (or Expression with resultType string).
	LogLevel interface{} `pulumi:"logLevel"`
	// The path to storage for storing detailed logs of activity execution. Type: string (or Expression with resultType string).
	Path interface{} `pulumi:"path"`
}

// Lookup activity.
type LookupActivity struct {
	// Lookup activity dataset reference.
	Dataset DatasetReference `pulumi:"dataset"`
	// Activity depends on condition.
	DependsOn []ActivityDependency `pulumi:"dependsOn"`
	// Activity description.
	Description *string `pulumi:"description"`
	// Whether to return first row or all rows. Default value is true. Type: boolean (or Expression with resultType boolean).
	FirstRowOnly interface{} `pulumi:"firstRowOnly"`
	// Linked service reference.
	LinkedServiceName *LinkedServiceReference `pulumi:"linkedServiceName"`
	// Activity name.
	Name string `pulumi:"name"`
	// Activity policy.
	Policy *ActivityPolicy `pulumi:"policy"`
	// Dataset-specific source properties, same as copy activity source.
	Source interface{} `pulumi:"source"`
	// Type of activity.
	// Expected value is 'Lookup'.
	Type string `pulumi:"type"`
	// Activity user properties.
	UserProperties []UserProperty `pulumi:"userProperties"`
}

// Lookup activity.
type LookupActivityResponse struct {
	// Lookup activity dataset reference.
	Dataset DatasetReferenceResponse `pulumi:"dataset"`
	// Activity depends on condition.
	DependsOn []ActivityDependencyResponse `pulumi:"dependsOn"`
	// Activity description.
	Description *string `pulumi:"description"`
	// Whether to return first row or all rows. Default value is true. Type: boolean (or Expression with resultType boolean).
	FirstRowOnly interface{} `pulumi:"firstRowOnly"`
	// Linked service reference.
	LinkedServiceName *LinkedServiceReferenceResponse `pulumi:"linkedServiceName"`
	// Activity name.
	Name string `pulumi:"name"`
	// Activity policy.
	Policy *ActivityPolicyResponse `pulumi:"policy"`
	// Dataset-specific source properties, same as copy activity source.
	Source interface{} `pulumi:"source"`
	// Type of activity.
	// Expected value is 'Lookup'.
	Type string `pulumi:"type"`
	// Activity user properties.
	UserProperties []UserPropertyResponse `pulumi:"userProperties"`
}

// Magento server linked service.
type MagentoLinkedService struct {
	// The access token from Magento.
	AccessToken interface{} `pulumi:"accessToken"`
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference `pulumi:"connectVia"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential interface{} `pulumi:"encryptedCredential"`
	// The URL of the Magento instance. (i.e. 192.168.222.110/magento3)
	Host interface{} `pulumi:"host"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Type of linked service.
	// Expected value is 'Magento'.
	Type string `pulumi:"type"`
	// Specifies whether the data source endpoints are encrypted using HTTPS. The default value is true.
	UseEncryptedEndpoints interface{} `pulumi:"useEncryptedEndpoints"`
	// Specifies whether to require the host name in the server's certificate to match the host name of the server when connecting over SSL. The default value is true.
	UseHostVerification interface{} `pulumi:"useHostVerification"`
	// Specifies whether to verify the identity of the server when connecting over SSL. The default value is true.
	UsePeerVerification interface{} `pulumi:"usePeerVerification"`
}

// Magento server linked service.
type MagentoLinkedServiceResponse struct {
	// The access token from Magento.
	AccessToken interface{} `pulumi:"accessToken"`
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReferenceResponse `pulumi:"connectVia"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential interface{} `pulumi:"encryptedCredential"`
	// The URL of the Magento instance. (i.e. 192.168.222.110/magento3)
	Host interface{} `pulumi:"host"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Type of linked service.
	// Expected value is 'Magento'.
	Type string `pulumi:"type"`
	// Specifies whether the data source endpoints are encrypted using HTTPS. The default value is true.
	UseEncryptedEndpoints interface{} `pulumi:"useEncryptedEndpoints"`
	// Specifies whether to require the host name in the server's certificate to match the host name of the server when connecting over SSL. The default value is true.
	UseHostVerification interface{} `pulumi:"useHostVerification"`
	// Specifies whether to verify the identity of the server when connecting over SSL. The default value is true.
	UsePeerVerification interface{} `pulumi:"usePeerVerification"`
}

// Magento server dataset.
type MagentoObjectDataset struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReference `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// The table name. Type: string (or Expression with resultType string).
	TableName interface{} `pulumi:"tableName"`
	// Type of dataset.
	// Expected value is 'MagentoObject'.
	Type string `pulumi:"type"`
}

// Magento server dataset.
type MagentoObjectDatasetResponse struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetResponseFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceResponse `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// The table name. Type: string (or Expression with resultType string).
	TableName interface{} `pulumi:"tableName"`
	// Type of dataset.
	// Expected value is 'MagentoObject'.
	Type string `pulumi:"type"`
}

// A copy activity Magento server source.
type MagentoSource struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns interface{} `pulumi:"additionalColumns"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// A query to retrieve data from source. Type: string (or Expression with resultType string).
	Query interface{} `pulumi:"query"`
	// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	QueryTimeout interface{} `pulumi:"queryTimeout"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// Copy source type.
	// Expected value is 'MagentoSource'.
	Type string `pulumi:"type"`
}

// A copy activity Magento server source.
type MagentoSourceResponse struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns interface{} `pulumi:"additionalColumns"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// A query to retrieve data from source. Type: string (or Expression with resultType string).
	Query interface{} `pulumi:"query"`
	// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	QueryTimeout interface{} `pulumi:"queryTimeout"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// Copy source type.
	// Expected value is 'MagentoSource'.
	Type string `pulumi:"type"`
}

// Managed integration runtime, including managed elastic and managed dedicated integration runtimes.
type ManagedIntegrationRuntime struct {
	// The compute resource for managed integration runtime.
	ComputeProperties *IntegrationRuntimeComputeProperties `pulumi:"computeProperties"`
	// The name of virtual network to which Azure-SSIS integration runtime will join
	CustomerVirtualNetwork *IntegrationRuntimeCustomerVirtualNetwork `pulumi:"customerVirtualNetwork"`
	// Integration runtime description.
	Description *string `pulumi:"description"`
	// Managed Virtual Network reference.
	ManagedVirtualNetwork *ManagedVirtualNetworkReference `pulumi:"managedVirtualNetwork"`
	// SSIS properties for managed integration runtime.
	SsisProperties *IntegrationRuntimeSsisProperties `pulumi:"ssisProperties"`
	// The type of integration runtime.
	// Expected value is 'Managed'.
	Type string `pulumi:"type"`
}

// Error definition for managed integration runtime.
type ManagedIntegrationRuntimeErrorResponse struct {
	// Error code.
	Code string `pulumi:"code"`
	// Error message.
	Message string `pulumi:"message"`
	// Managed integration runtime error parameters.
	Parameters []string `pulumi:"parameters"`
	// The time when the error occurred.
	Time string `pulumi:"time"`
}

// Properties of integration runtime node.
type ManagedIntegrationRuntimeNodeResponse struct {
	// The errors that occurred on this integration runtime node.
	Errors []ManagedIntegrationRuntimeErrorResponse `pulumi:"errors"`
	// The managed integration runtime node id.
	NodeId string `pulumi:"nodeId"`
	// The managed integration runtime node status.
	Status string `pulumi:"status"`
}

// Properties of managed integration runtime operation result.
type ManagedIntegrationRuntimeOperationResultResponse struct {
	// The activity id for the operation request.
	ActivityId string `pulumi:"activityId"`
	// The error code.
	ErrorCode string `pulumi:"errorCode"`
	// Managed integration runtime error parameters.
	Parameters []string `pulumi:"parameters"`
	// The operation result.
	Result string `pulumi:"result"`
	// The start time of the operation.
	StartTime string `pulumi:"startTime"`
	// The operation type. Could be start or stop.
	Type string `pulumi:"type"`
}

// Managed integration runtime, including managed elastic and managed dedicated integration runtimes.
type ManagedIntegrationRuntimeResponse struct {
	// The compute resource for managed integration runtime.
	ComputeProperties *IntegrationRuntimeComputePropertiesResponse `pulumi:"computeProperties"`
	// The name of virtual network to which Azure-SSIS integration runtime will join
	CustomerVirtualNetwork *IntegrationRuntimeCustomerVirtualNetworkResponse `pulumi:"customerVirtualNetwork"`
	// Integration runtime description.
	Description *string `pulumi:"description"`
	// Managed Virtual Network reference.
	ManagedVirtualNetwork *ManagedVirtualNetworkReferenceResponse `pulumi:"managedVirtualNetwork"`
	// SSIS properties for managed integration runtime.
	SsisProperties *IntegrationRuntimeSsisPropertiesResponse `pulumi:"ssisProperties"`
	// Integration runtime state, only valid for managed dedicated integration runtime.
	State string `pulumi:"state"`
	// The type of integration runtime.
	// Expected value is 'Managed'.
	Type string `pulumi:"type"`
}

// Managed integration runtime status.
type ManagedIntegrationRuntimeStatusResponse struct {
	// The time at which the integration runtime was created, in ISO8601 format.
	CreateTime string `pulumi:"createTime"`
	// The data factory name which the integration runtime belong to.
	DataFactoryName string `pulumi:"dataFactoryName"`
	// The last operation result that occurred on this integration runtime.
	LastOperation ManagedIntegrationRuntimeOperationResultResponse `pulumi:"lastOperation"`
	// The list of nodes for managed integration runtime.
	Nodes []ManagedIntegrationRuntimeNodeResponse `pulumi:"nodes"`
	// The errors that occurred on this integration runtime.
	OtherErrors []ManagedIntegrationRuntimeErrorResponse `pulumi:"otherErrors"`
	// The state of integration runtime.
	State string `pulumi:"state"`
	// The type of integration runtime.
	// Expected value is 'Managed'.
	Type string `pulumi:"type"`
}

// Properties of a managed private endpoint
type ManagedPrivateEndpointType struct {
	// Fully qualified domain names
	Fqdns []string `pulumi:"fqdns"`
	// The groupId to which the managed private endpoint is created
	GroupId *string `pulumi:"groupId"`
	// The ARM resource ID of the resource to which the managed private endpoint is created
	PrivateLinkResourceId *string `pulumi:"privateLinkResourceId"`
}

// ManagedPrivateEndpointTypeInput is an input type that accepts ManagedPrivateEndpointTypeArgs and ManagedPrivateEndpointTypeOutput values.
// You can construct a concrete instance of `ManagedPrivateEndpointTypeInput` via:
//
//	ManagedPrivateEndpointTypeArgs{...}
type ManagedPrivateEndpointTypeInput interface {
	pulumi.Input

	ToManagedPrivateEndpointTypeOutput() ManagedPrivateEndpointTypeOutput
	ToManagedPrivateEndpointTypeOutputWithContext(context.Context) ManagedPrivateEndpointTypeOutput
}

// Properties of a managed private endpoint
type ManagedPrivateEndpointTypeArgs struct {
	// Fully qualified domain names
	Fqdns pulumi.StringArrayInput `pulumi:"fqdns"`
	// The groupId to which the managed private endpoint is created
	GroupId pulumi.StringPtrInput `pulumi:"groupId"`
	// The ARM resource ID of the resource to which the managed private endpoint is created
	PrivateLinkResourceId pulumi.StringPtrInput `pulumi:"privateLinkResourceId"`
}

func (ManagedPrivateEndpointTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedPrivateEndpointType)(nil)).Elem()
}

func (i ManagedPrivateEndpointTypeArgs) ToManagedPrivateEndpointTypeOutput() ManagedPrivateEndpointTypeOutput {
	return i.ToManagedPrivateEndpointTypeOutputWithContext(context.Background())
}

func (i ManagedPrivateEndpointTypeArgs) ToManagedPrivateEndpointTypeOutputWithContext(ctx context.Context) ManagedPrivateEndpointTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedPrivateEndpointTypeOutput)
}

// Properties of a managed private endpoint
type ManagedPrivateEndpointTypeOutput struct{ *pulumi.OutputState }

func (ManagedPrivateEndpointTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedPrivateEndpointType)(nil)).Elem()
}

func (o ManagedPrivateEndpointTypeOutput) ToManagedPrivateEndpointTypeOutput() ManagedPrivateEndpointTypeOutput {
	return o
}

func (o ManagedPrivateEndpointTypeOutput) ToManagedPrivateEndpointTypeOutputWithContext(ctx context.Context) ManagedPrivateEndpointTypeOutput {
	return o
}

// Fully qualified domain names
func (o ManagedPrivateEndpointTypeOutput) Fqdns() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ManagedPrivateEndpointType) []string { return v.Fqdns }).(pulumi.StringArrayOutput)
}

// The groupId to which the managed private endpoint is created
func (o ManagedPrivateEndpointTypeOutput) GroupId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagedPrivateEndpointType) *string { return v.GroupId }).(pulumi.StringPtrOutput)
}

// The ARM resource ID of the resource to which the managed private endpoint is created
func (o ManagedPrivateEndpointTypeOutput) PrivateLinkResourceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagedPrivateEndpointType) *string { return v.PrivateLinkResourceId }).(pulumi.StringPtrOutput)
}

// Properties of a managed private endpoint
type ManagedPrivateEndpointResponse struct {
	// The managed private endpoint connection state
	ConnectionState *ConnectionStatePropertiesResponse `pulumi:"connectionState"`
	// Fully qualified domain names
	Fqdns []string `pulumi:"fqdns"`
	// The groupId to which the managed private endpoint is created
	GroupId *string `pulumi:"groupId"`
	// Denotes whether the managed private endpoint is reserved
	IsReserved bool `pulumi:"isReserved"`
	// The ARM resource ID of the resource to which the managed private endpoint is created
	PrivateLinkResourceId *string `pulumi:"privateLinkResourceId"`
	// The managed private endpoint provisioning state
	ProvisioningState string `pulumi:"provisioningState"`
}

// Properties of a managed private endpoint
type ManagedPrivateEndpointResponseOutput struct{ *pulumi.OutputState }

func (ManagedPrivateEndpointResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedPrivateEndpointResponse)(nil)).Elem()
}

func (o ManagedPrivateEndpointResponseOutput) ToManagedPrivateEndpointResponseOutput() ManagedPrivateEndpointResponseOutput {
	return o
}

func (o ManagedPrivateEndpointResponseOutput) ToManagedPrivateEndpointResponseOutputWithContext(ctx context.Context) ManagedPrivateEndpointResponseOutput {
	return o
}

// The managed private endpoint connection state
func (o ManagedPrivateEndpointResponseOutput) ConnectionState() ConnectionStatePropertiesResponsePtrOutput {
	return o.ApplyT(func(v ManagedPrivateEndpointResponse) *ConnectionStatePropertiesResponse { return v.ConnectionState }).(ConnectionStatePropertiesResponsePtrOutput)
}

// Fully qualified domain names
func (o ManagedPrivateEndpointResponseOutput) Fqdns() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ManagedPrivateEndpointResponse) []string { return v.Fqdns }).(pulumi.StringArrayOutput)
}

// The groupId to which the managed private endpoint is created
func (o ManagedPrivateEndpointResponseOutput) GroupId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagedPrivateEndpointResponse) *string { return v.GroupId }).(pulumi.StringPtrOutput)
}

// Denotes whether the managed private endpoint is reserved
func (o ManagedPrivateEndpointResponseOutput) IsReserved() pulumi.BoolOutput {
	return o.ApplyT(func(v ManagedPrivateEndpointResponse) bool { return v.IsReserved }).(pulumi.BoolOutput)
}

// The ARM resource ID of the resource to which the managed private endpoint is created
func (o ManagedPrivateEndpointResponseOutput) PrivateLinkResourceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagedPrivateEndpointResponse) *string { return v.PrivateLinkResourceId }).(pulumi.StringPtrOutput)
}

// The managed private endpoint provisioning state
func (o ManagedPrivateEndpointResponseOutput) ProvisioningState() pulumi.StringOutput {
	return o.ApplyT(func(v ManagedPrivateEndpointResponse) string { return v.ProvisioningState }).(pulumi.StringOutput)
}

// Managed Virtual Network reference type.
type ManagedVirtualNetworkReference struct {
	// Reference ManagedVirtualNetwork name.
	ReferenceName string `pulumi:"referenceName"`
	// Managed Virtual Network reference type.
	Type string `pulumi:"type"`
}

// Managed Virtual Network reference type.
type ManagedVirtualNetworkReferenceResponse struct {
	// Reference ManagedVirtualNetwork name.
	ReferenceName string `pulumi:"referenceName"`
	// Managed Virtual Network reference type.
	Type string `pulumi:"type"`
}

// Mapping data flow.
type MappingDataFlow struct {
	// List of tags that can be used for describing the data flow.
	Annotations []interface{} `pulumi:"annotations"`
	// The description of the data flow.
	Description *string `pulumi:"description"`
	// The folder that this data flow is in. If not specified, Data flow will appear at the root level.
	Folder *DataFlowFolder `pulumi:"folder"`
	// DataFlow script.
	Script *string `pulumi:"script"`
	// Data flow script lines.
	ScriptLines []string `pulumi:"scriptLines"`
	// List of sinks in data flow.
	Sinks []DataFlowSink `pulumi:"sinks"`
	// List of sources in data flow.
	Sources []DataFlowSource `pulumi:"sources"`
	// List of transformations in data flow.
	Transformations []Transformation `pulumi:"transformations"`
	// Type of data flow.
	// Expected value is 'MappingDataFlow'.
	Type string `pulumi:"type"`
}

// Mapping data flow.
type MappingDataFlowResponse struct {
	// List of tags that can be used for describing the data flow.
	Annotations []interface{} `pulumi:"annotations"`
	// The description of the data flow.
	Description *string `pulumi:"description"`
	// The folder that this data flow is in. If not specified, Data flow will appear at the root level.
	Folder *DataFlowResponseFolder `pulumi:"folder"`
	// DataFlow script.
	Script *string `pulumi:"script"`
	// Data flow script lines.
	ScriptLines []string `pulumi:"scriptLines"`
	// List of sinks in data flow.
	Sinks []DataFlowSinkResponse `pulumi:"sinks"`
	// List of sources in data flow.
	Sources []DataFlowSourceResponse `pulumi:"sources"`
	// List of transformations in data flow.
	Transformations []TransformationResponse `pulumi:"transformations"`
	// Type of data flow.
	// Expected value is 'MappingDataFlow'.
	Type string `pulumi:"type"`
}

// MariaDB server linked service.
type MariaDBLinkedService struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference `pulumi:"connectVia"`
	// An ODBC connection string. Type: string, SecureString or AzureKeyVaultSecretReference.
	ConnectionString interface{} `pulumi:"connectionString"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential interface{} `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// The Azure key vault secret reference of password in connection string.
	Pwd *AzureKeyVaultSecretReference `pulumi:"pwd"`
	// Type of linked service.
	// Expected value is 'MariaDB'.
	Type string `pulumi:"type"`
}

// MariaDB server linked service.
type MariaDBLinkedServiceResponse struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReferenceResponse `pulumi:"connectVia"`
	// An ODBC connection string. Type: string, SecureString or AzureKeyVaultSecretReference.
	ConnectionString interface{} `pulumi:"connectionString"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential interface{} `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// The Azure key vault secret reference of password in connection string.
	Pwd *AzureKeyVaultSecretReferenceResponse `pulumi:"pwd"`
	// Type of linked service.
	// Expected value is 'MariaDB'.
	Type string `pulumi:"type"`
}

// A copy activity MariaDB server source.
type MariaDBSource struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns interface{} `pulumi:"additionalColumns"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// A query to retrieve data from source. Type: string (or Expression with resultType string).
	Query interface{} `pulumi:"query"`
	// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	QueryTimeout interface{} `pulumi:"queryTimeout"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// Copy source type.
	// Expected value is 'MariaDBSource'.
	Type string `pulumi:"type"`
}

// A copy activity MariaDB server source.
type MariaDBSourceResponse struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns interface{} `pulumi:"additionalColumns"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// A query to retrieve data from source. Type: string (or Expression with resultType string).
	Query interface{} `pulumi:"query"`
	// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	QueryTimeout interface{} `pulumi:"queryTimeout"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// Copy source type.
	// Expected value is 'MariaDBSource'.
	Type string `pulumi:"type"`
}

// MariaDB server dataset.
type MariaDBTableDataset struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReference `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// The table name. Type: string (or Expression with resultType string).
	TableName interface{} `pulumi:"tableName"`
	// Type of dataset.
	// Expected value is 'MariaDBTable'.
	Type string `pulumi:"type"`
}

// MariaDB server dataset.
type MariaDBTableDatasetResponse struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetResponseFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceResponse `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// The table name. Type: string (or Expression with resultType string).
	TableName interface{} `pulumi:"tableName"`
	// Type of dataset.
	// Expected value is 'MariaDBTable'.
	Type string `pulumi:"type"`
}

// Marketo server linked service.
type MarketoLinkedService struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The client Id of your Marketo service.
	ClientId interface{} `pulumi:"clientId"`
	// The client secret of your Marketo service.
	ClientSecret interface{} `pulumi:"clientSecret"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference `pulumi:"connectVia"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential interface{} `pulumi:"encryptedCredential"`
	// The endpoint of the Marketo server. (i.e. 123-ABC-321.mktorest.com)
	Endpoint interface{} `pulumi:"endpoint"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Type of linked service.
	// Expected value is 'Marketo'.
	Type string `pulumi:"type"`
	// Specifies whether the data source endpoints are encrypted using HTTPS. The default value is true.
	UseEncryptedEndpoints interface{} `pulumi:"useEncryptedEndpoints"`
	// Specifies whether to require the host name in the server's certificate to match the host name of the server when connecting over SSL. The default value is true.
	UseHostVerification interface{} `pulumi:"useHostVerification"`
	// Specifies whether to verify the identity of the server when connecting over SSL. The default value is true.
	UsePeerVerification interface{} `pulumi:"usePeerVerification"`
}

// Marketo server linked service.
type MarketoLinkedServiceResponse struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The client Id of your Marketo service.
	ClientId interface{} `pulumi:"clientId"`
	// The client secret of your Marketo service.
	ClientSecret interface{} `pulumi:"clientSecret"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReferenceResponse `pulumi:"connectVia"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential interface{} `pulumi:"encryptedCredential"`
	// The endpoint of the Marketo server. (i.e. 123-ABC-321.mktorest.com)
	Endpoint interface{} `pulumi:"endpoint"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Type of linked service.
	// Expected value is 'Marketo'.
	Type string `pulumi:"type"`
	// Specifies whether the data source endpoints are encrypted using HTTPS. The default value is true.
	UseEncryptedEndpoints interface{} `pulumi:"useEncryptedEndpoints"`
	// Specifies whether to require the host name in the server's certificate to match the host name of the server when connecting over SSL. The default value is true.
	UseHostVerification interface{} `pulumi:"useHostVerification"`
	// Specifies whether to verify the identity of the server when connecting over SSL. The default value is true.
	UsePeerVerification interface{} `pulumi:"usePeerVerification"`
}

// Marketo server dataset.
type MarketoObjectDataset struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReference `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// The table name. Type: string (or Expression with resultType string).
	TableName interface{} `pulumi:"tableName"`
	// Type of dataset.
	// Expected value is 'MarketoObject'.
	Type string `pulumi:"type"`
}

// Marketo server dataset.
type MarketoObjectDatasetResponse struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetResponseFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceResponse `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// The table name. Type: string (or Expression with resultType string).
	TableName interface{} `pulumi:"tableName"`
	// Type of dataset.
	// Expected value is 'MarketoObject'.
	Type string `pulumi:"type"`
}

// A copy activity Marketo server source.
type MarketoSource struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns interface{} `pulumi:"additionalColumns"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// A query to retrieve data from source. Type: string (or Expression with resultType string).
	Query interface{} `pulumi:"query"`
	// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	QueryTimeout interface{} `pulumi:"queryTimeout"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// Copy source type.
	// Expected value is 'MarketoSource'.
	Type string `pulumi:"type"`
}

// A copy activity Marketo server source.
type MarketoSourceResponse struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns interface{} `pulumi:"additionalColumns"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// A query to retrieve data from source. Type: string (or Expression with resultType string).
	Query interface{} `pulumi:"query"`
	// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	QueryTimeout interface{} `pulumi:"queryTimeout"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// Copy source type.
	// Expected value is 'MarketoSource'.
	Type string `pulumi:"type"`
}

// Specify the name and value of custom metadata item.
type MetadataItem struct {
	// Metadata item key name. Type: string (or Expression with resultType string).
	Name interface{} `pulumi:"name"`
	// Metadata item value. Type: string (or Expression with resultType string).
	Value interface{} `pulumi:"value"`
}

// Specify the name and value of custom metadata item.
type MetadataItemResponse struct {
	// Metadata item key name. Type: string (or Expression with resultType string).
	Name interface{} `pulumi:"name"`
	// Metadata item value. Type: string (or Expression with resultType string).
	Value interface{} `pulumi:"value"`
}

// Microsoft Access linked service.
type MicrosoftAccessLinkedService struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// Type of authentication used to connect to the Microsoft Access as ODBC data store. Possible values are: Anonymous and Basic. Type: string (or Expression with resultType string).
	AuthenticationType interface{} `pulumi:"authenticationType"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference `pulumi:"connectVia"`
	// The non-access credential portion of the connection string as well as an optional encrypted credential. Type: string, SecureString or AzureKeyVaultSecretReference.
	ConnectionString interface{} `pulumi:"connectionString"`
	// The access credential portion of the connection string specified in driver-specific property-value format.
	Credential interface{} `pulumi:"credential"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential interface{} `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Password for Basic authentication.
	Password interface{} `pulumi:"password"`
	// Type of linked service.
	// Expected value is 'MicrosoftAccess'.
	Type string `pulumi:"type"`
	// User name for Basic authentication. Type: string (or Expression with resultType string).
	UserName interface{} `pulumi:"userName"`
}

// Microsoft Access linked service.
type MicrosoftAccessLinkedServiceResponse struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// Type of authentication used to connect to the Microsoft Access as ODBC data store. Possible values are: Anonymous and Basic. Type: string (or Expression with resultType string).
	AuthenticationType interface{} `pulumi:"authenticationType"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReferenceResponse `pulumi:"connectVia"`
	// The non-access credential portion of the connection string as well as an optional encrypted credential. Type: string, SecureString or AzureKeyVaultSecretReference.
	ConnectionString interface{} `pulumi:"connectionString"`
	// The access credential portion of the connection string specified in driver-specific property-value format.
	Credential interface{} `pulumi:"credential"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential interface{} `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Password for Basic authentication.
	Password interface{} `pulumi:"password"`
	// Type of linked service.
	// Expected value is 'MicrosoftAccess'.
	Type string `pulumi:"type"`
	// User name for Basic authentication. Type: string (or Expression with resultType string).
	UserName interface{} `pulumi:"userName"`
}

// A copy activity Microsoft Access sink.
type MicrosoftAccessSink struct {
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the sink data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// A query to execute before starting the copy. Type: string (or Expression with resultType string).
	PreCopyScript interface{} `pulumi:"preCopyScript"`
	// Sink retry count. Type: integer (or Expression with resultType integer).
	SinkRetryCount interface{} `pulumi:"sinkRetryCount"`
	// Sink retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SinkRetryWait interface{} `pulumi:"sinkRetryWait"`
	// Copy sink type.
	// Expected value is 'MicrosoftAccessSink'.
	Type string `pulumi:"type"`
	// Write batch size. Type: integer (or Expression with resultType integer), minimum: 0.
	WriteBatchSize interface{} `pulumi:"writeBatchSize"`
	// Write batch timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	WriteBatchTimeout interface{} `pulumi:"writeBatchTimeout"`
}

// A copy activity Microsoft Access sink.
type MicrosoftAccessSinkResponse struct {
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the sink data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// A query to execute before starting the copy. Type: string (or Expression with resultType string).
	PreCopyScript interface{} `pulumi:"preCopyScript"`
	// Sink retry count. Type: integer (or Expression with resultType integer).
	SinkRetryCount interface{} `pulumi:"sinkRetryCount"`
	// Sink retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SinkRetryWait interface{} `pulumi:"sinkRetryWait"`
	// Copy sink type.
	// Expected value is 'MicrosoftAccessSink'.
	Type string `pulumi:"type"`
	// Write batch size. Type: integer (or Expression with resultType integer), minimum: 0.
	WriteBatchSize interface{} `pulumi:"writeBatchSize"`
	// Write batch timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	WriteBatchTimeout interface{} `pulumi:"writeBatchTimeout"`
}

// A copy activity source for Microsoft Access.
type MicrosoftAccessSource struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns interface{} `pulumi:"additionalColumns"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// Database query. Type: string (or Expression with resultType string).
	Query interface{} `pulumi:"query"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// Copy source type.
	// Expected value is 'MicrosoftAccessSource'.
	Type string `pulumi:"type"`
}

// A copy activity source for Microsoft Access.
type MicrosoftAccessSourceResponse struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns interface{} `pulumi:"additionalColumns"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// Database query. Type: string (or Expression with resultType string).
	Query interface{} `pulumi:"query"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// Copy source type.
	// Expected value is 'MicrosoftAccessSource'.
	Type string `pulumi:"type"`
}

// The Microsoft Access table dataset.
type MicrosoftAccessTableDataset struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReference `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// The Microsoft Access table name. Type: string (or Expression with resultType string).
	TableName interface{} `pulumi:"tableName"`
	// Type of dataset.
	// Expected value is 'MicrosoftAccessTable'.
	Type string `pulumi:"type"`
}

// The Microsoft Access table dataset.
type MicrosoftAccessTableDatasetResponse struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetResponseFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceResponse `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// The Microsoft Access table name. Type: string (or Expression with resultType string).
	TableName interface{} `pulumi:"tableName"`
	// Type of dataset.
	// Expected value is 'MicrosoftAccessTable'.
	Type string `pulumi:"type"`
}

// The MongoDB Atlas database dataset.
type MongoDbAtlasCollectionDataset struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// The collection name of the MongoDB Atlas database. Type: string (or Expression with resultType string).
	Collection interface{} `pulumi:"collection"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReference `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// Type of dataset.
	// Expected value is 'MongoDbAtlasCollection'.
	Type string `pulumi:"type"`
}

// The MongoDB Atlas database dataset.
type MongoDbAtlasCollectionDatasetResponse struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// The collection name of the MongoDB Atlas database. Type: string (or Expression with resultType string).
	Collection interface{} `pulumi:"collection"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetResponseFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceResponse `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// Type of dataset.
	// Expected value is 'MongoDbAtlasCollection'.
	Type string `pulumi:"type"`
}

// Linked service for MongoDB Atlas data source.
type MongoDbAtlasLinkedService struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference `pulumi:"connectVia"`
	// The MongoDB Atlas connection string. Type: string, SecureString or AzureKeyVaultSecretReference. Type: string, SecureString or AzureKeyVaultSecretReference.
	ConnectionString interface{} `pulumi:"connectionString"`
	// The name of the MongoDB Atlas database that you want to access. Type: string (or Expression with resultType string).
	Database interface{} `pulumi:"database"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Type of linked service.
	// Expected value is 'MongoDbAtlas'.
	Type string `pulumi:"type"`
}

// Linked service for MongoDB Atlas data source.
type MongoDbAtlasLinkedServiceResponse struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReferenceResponse `pulumi:"connectVia"`
	// The MongoDB Atlas connection string. Type: string, SecureString or AzureKeyVaultSecretReference. Type: string, SecureString or AzureKeyVaultSecretReference.
	ConnectionString interface{} `pulumi:"connectionString"`
	// The name of the MongoDB Atlas database that you want to access. Type: string (or Expression with resultType string).
	Database interface{} `pulumi:"database"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Type of linked service.
	// Expected value is 'MongoDbAtlas'.
	Type string `pulumi:"type"`
}

// A copy activity MongoDB Atlas sink.
type MongoDbAtlasSink struct {
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the sink data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// Sink retry count. Type: integer (or Expression with resultType integer).
	SinkRetryCount interface{} `pulumi:"sinkRetryCount"`
	// Sink retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SinkRetryWait interface{} `pulumi:"sinkRetryWait"`
	// Copy sink type.
	// Expected value is 'MongoDbAtlasSink'.
	Type string `pulumi:"type"`
	// Write batch size. Type: integer (or Expression with resultType integer), minimum: 0.
	WriteBatchSize interface{} `pulumi:"writeBatchSize"`
	// Write batch timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	WriteBatchTimeout interface{} `pulumi:"writeBatchTimeout"`
	// Specifies whether the document with same key to be overwritten (upsert) rather than throw exception (insert). The default value is "insert". Type: string (or Expression with resultType string). Type: string (or Expression with resultType string).
	WriteBehavior interface{} `pulumi:"writeBehavior"`
}

// A copy activity MongoDB Atlas sink.
type MongoDbAtlasSinkResponse struct {
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the sink data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// Sink retry count. Type: integer (or Expression with resultType integer).
	SinkRetryCount interface{} `pulumi:"sinkRetryCount"`
	// Sink retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SinkRetryWait interface{} `pulumi:"sinkRetryWait"`
	// Copy sink type.
	// Expected value is 'MongoDbAtlasSink'.
	Type string `pulumi:"type"`
	// Write batch size. Type: integer (or Expression with resultType integer), minimum: 0.
	WriteBatchSize interface{} `pulumi:"writeBatchSize"`
	// Write batch timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	WriteBatchTimeout interface{} `pulumi:"writeBatchTimeout"`
	// Specifies whether the document with same key to be overwritten (upsert) rather than throw exception (insert). The default value is "insert". Type: string (or Expression with resultType string). Type: string (or Expression with resultType string).
	WriteBehavior interface{} `pulumi:"writeBehavior"`
}

// A copy activity source for a MongoDB Atlas database.
type MongoDbAtlasSource struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns interface{} `pulumi:"additionalColumns"`
	// Specifies the number of documents to return in each batch of the response from MongoDB Atlas instance. In most cases, modifying the batch size will not affect the user or the application. This property's main purpose is to avoid hit the limitation of response size. Type: integer (or Expression with resultType integer).
	BatchSize interface{} `pulumi:"batchSize"`
	// Cursor methods for Mongodb query
	CursorMethods *MongoDbCursorMethodsProperties `pulumi:"cursorMethods"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// Specifies selection filter using query operators. To return all documents in a collection, omit this parameter or pass an empty document ({}). Type: string (or Expression with resultType string).
	Filter interface{} `pulumi:"filter"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	QueryTimeout interface{} `pulumi:"queryTimeout"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// Copy source type.
	// Expected value is 'MongoDbAtlasSource'.
	Type string `pulumi:"type"`
}

// A copy activity source for a MongoDB Atlas database.
type MongoDbAtlasSourceResponse struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns interface{} `pulumi:"additionalColumns"`
	// Specifies the number of documents to return in each batch of the response from MongoDB Atlas instance. In most cases, modifying the batch size will not affect the user or the application. This property's main purpose is to avoid hit the limitation of response size. Type: integer (or Expression with resultType integer).
	BatchSize interface{} `pulumi:"batchSize"`
	// Cursor methods for Mongodb query
	CursorMethods *MongoDbCursorMethodsPropertiesResponse `pulumi:"cursorMethods"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// Specifies selection filter using query operators. To return all documents in a collection, omit this parameter or pass an empty document ({}). Type: string (or Expression with resultType string).
	Filter interface{} `pulumi:"filter"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	QueryTimeout interface{} `pulumi:"queryTimeout"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// Copy source type.
	// Expected value is 'MongoDbAtlasSource'.
	Type string `pulumi:"type"`
}

// The MongoDB database dataset.
type MongoDbCollectionDataset struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// The table name of the MongoDB database. Type: string (or Expression with resultType string).
	CollectionName interface{} `pulumi:"collectionName"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReference `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// Type of dataset.
	// Expected value is 'MongoDbCollection'.
	Type string `pulumi:"type"`
}

// The MongoDB database dataset.
type MongoDbCollectionDatasetResponse struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// The table name of the MongoDB database. Type: string (or Expression with resultType string).
	CollectionName interface{} `pulumi:"collectionName"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetResponseFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceResponse `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// Type of dataset.
	// Expected value is 'MongoDbCollection'.
	Type string `pulumi:"type"`
}

// Cursor methods for Mongodb query
type MongoDbCursorMethodsProperties struct {
	// Specifies the maximum number of documents the server returns. limit() is analogous to the LIMIT statement in a SQL database. Type: integer (or Expression with resultType integer).
	Limit interface{} `pulumi:"limit"`
	// Specifies the fields to return in the documents that match the query filter. To return all fields in the matching documents, omit this parameter. Type: string (or Expression with resultType string).
	Project interface{} `pulumi:"project"`
	// Specifies the how many documents skipped and where MongoDB begins returning results. This approach may be useful in implementing paginated results. Type: integer (or Expression with resultType integer).
	Skip interface{} `pulumi:"skip"`
	// Specifies the order in which the query returns matching documents. Type: string (or Expression with resultType string). Type: string (or Expression with resultType string).
	Sort interface{} `pulumi:"sort"`
}

// Cursor methods for Mongodb query
type MongoDbCursorMethodsPropertiesResponse struct {
	// Specifies the maximum number of documents the server returns. limit() is analogous to the LIMIT statement in a SQL database. Type: integer (or Expression with resultType integer).
	Limit interface{} `pulumi:"limit"`
	// Specifies the fields to return in the documents that match the query filter. To return all fields in the matching documents, omit this parameter. Type: string (or Expression with resultType string).
	Project interface{} `pulumi:"project"`
	// Specifies the how many documents skipped and where MongoDB begins returning results. This approach may be useful in implementing paginated results. Type: integer (or Expression with resultType integer).
	Skip interface{} `pulumi:"skip"`
	// Specifies the order in which the query returns matching documents. Type: string (or Expression with resultType string). Type: string (or Expression with resultType string).
	Sort interface{} `pulumi:"sort"`
}

// Linked service for MongoDb data source.
type MongoDbLinkedService struct {
	// Specifies whether to allow self-signed certificates from the server. The default value is false. Type: boolean (or Expression with resultType boolean).
	AllowSelfSignedServerCert interface{} `pulumi:"allowSelfSignedServerCert"`
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// Database to verify the username and password. Type: string (or Expression with resultType string).
	AuthSource interface{} `pulumi:"authSource"`
	// The authentication type to be used to connect to the MongoDB database.
	AuthenticationType *string `pulumi:"authenticationType"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference `pulumi:"connectVia"`
	// The name of the MongoDB database that you want to access. Type: string (or Expression with resultType string).
	DatabaseName interface{} `pulumi:"databaseName"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// Specifies whether the connections to the server are encrypted using SSL. The default value is false. Type: boolean (or Expression with resultType boolean).
	EnableSsl interface{} `pulumi:"enableSsl"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential interface{} `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Password for authentication.
	Password interface{} `pulumi:"password"`
	// The TCP port number that the MongoDB server uses to listen for client connections. The default value is 27017. Type: integer (or Expression with resultType integer), minimum: 0.
	Port interface{} `pulumi:"port"`
	// The IP address or server name of the MongoDB server. Type: string (or Expression with resultType string).
	Server interface{} `pulumi:"server"`
	// Type of linked service.
	// Expected value is 'MongoDb'.
	Type string `pulumi:"type"`
	// Username for authentication. Type: string (or Expression with resultType string).
	Username interface{} `pulumi:"username"`
}

// Linked service for MongoDb data source.
type MongoDbLinkedServiceResponse struct {
	// Specifies whether to allow self-signed certificates from the server. The default value is false. Type: boolean (or Expression with resultType boolean).
	AllowSelfSignedServerCert interface{} `pulumi:"allowSelfSignedServerCert"`
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// Database to verify the username and password. Type: string (or Expression with resultType string).
	AuthSource interface{} `pulumi:"authSource"`
	// The authentication type to be used to connect to the MongoDB database.
	AuthenticationType *string `pulumi:"authenticationType"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReferenceResponse `pulumi:"connectVia"`
	// The name of the MongoDB database that you want to access. Type: string (or Expression with resultType string).
	DatabaseName interface{} `pulumi:"databaseName"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// Specifies whether the connections to the server are encrypted using SSL. The default value is false. Type: boolean (or Expression with resultType boolean).
	EnableSsl interface{} `pulumi:"enableSsl"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential interface{} `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Password for authentication.
	Password interface{} `pulumi:"password"`
	// The TCP port number that the MongoDB server uses to listen for client connections. The default value is 27017. Type: integer (or Expression with resultType integer), minimum: 0.
	Port interface{} `pulumi:"port"`
	// The IP address or server name of the MongoDB server. Type: string (or Expression with resultType string).
	Server interface{} `pulumi:"server"`
	// Type of linked service.
	// Expected value is 'MongoDb'.
	Type string `pulumi:"type"`
	// Username for authentication. Type: string (or Expression with resultType string).
	Username interface{} `pulumi:"username"`
}

// A copy activity source for a MongoDB database.
type MongoDbSource struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns interface{} `pulumi:"additionalColumns"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// Database query. Should be a SQL-92 query expression. Type: string (or Expression with resultType string).
	Query interface{} `pulumi:"query"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// Copy source type.
	// Expected value is 'MongoDbSource'.
	Type string `pulumi:"type"`
}

// A copy activity source for a MongoDB database.
type MongoDbSourceResponse struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns interface{} `pulumi:"additionalColumns"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// Database query. Should be a SQL-92 query expression. Type: string (or Expression with resultType string).
	Query interface{} `pulumi:"query"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// Copy source type.
	// Expected value is 'MongoDbSource'.
	Type string `pulumi:"type"`
}

// The MongoDB database dataset.
type MongoDbV2CollectionDataset struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// The collection name of the MongoDB database. Type: string (or Expression with resultType string).
	Collection interface{} `pulumi:"collection"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReference `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// Type of dataset.
	// Expected value is 'MongoDbV2Collection'.
	Type string `pulumi:"type"`
}

// The MongoDB database dataset.
type MongoDbV2CollectionDatasetResponse struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// The collection name of the MongoDB database. Type: string (or Expression with resultType string).
	Collection interface{} `pulumi:"collection"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetResponseFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceResponse `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// Type of dataset.
	// Expected value is 'MongoDbV2Collection'.
	Type string `pulumi:"type"`
}

// Linked service for MongoDB data source.
type MongoDbV2LinkedService struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference `pulumi:"connectVia"`
	// The MongoDB connection string. Type: string, SecureString or AzureKeyVaultSecretReference. Type: string, SecureString or AzureKeyVaultSecretReference.
	ConnectionString interface{} `pulumi:"connectionString"`
	// The name of the MongoDB database that you want to access. Type: string (or Expression with resultType string).
	Database interface{} `pulumi:"database"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Type of linked service.
	// Expected value is 'MongoDbV2'.
	Type string `pulumi:"type"`
}

// Linked service for MongoDB data source.
type MongoDbV2LinkedServiceResponse struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReferenceResponse `pulumi:"connectVia"`
	// The MongoDB connection string. Type: string, SecureString or AzureKeyVaultSecretReference. Type: string, SecureString or AzureKeyVaultSecretReference.
	ConnectionString interface{} `pulumi:"connectionString"`
	// The name of the MongoDB database that you want to access. Type: string (or Expression with resultType string).
	Database interface{} `pulumi:"database"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Type of linked service.
	// Expected value is 'MongoDbV2'.
	Type string `pulumi:"type"`
}

// A copy activity MongoDB sink.
type MongoDbV2Sink struct {
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the sink data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// Sink retry count. Type: integer (or Expression with resultType integer).
	SinkRetryCount interface{} `pulumi:"sinkRetryCount"`
	// Sink retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SinkRetryWait interface{} `pulumi:"sinkRetryWait"`
	// Copy sink type.
	// Expected value is 'MongoDbV2Sink'.
	Type string `pulumi:"type"`
	// Write batch size. Type: integer (or Expression with resultType integer), minimum: 0.
	WriteBatchSize interface{} `pulumi:"writeBatchSize"`
	// Write batch timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	WriteBatchTimeout interface{} `pulumi:"writeBatchTimeout"`
	// Specifies whether the document with same key to be overwritten (upsert) rather than throw exception (insert). The default value is "insert". Type: string (or Expression with resultType string). Type: string (or Expression with resultType string).
	WriteBehavior interface{} `pulumi:"writeBehavior"`
}

// A copy activity MongoDB sink.
type MongoDbV2SinkResponse struct {
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the sink data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// Sink retry count. Type: integer (or Expression with resultType integer).
	SinkRetryCount interface{} `pulumi:"sinkRetryCount"`
	// Sink retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SinkRetryWait interface{} `pulumi:"sinkRetryWait"`
	// Copy sink type.
	// Expected value is 'MongoDbV2Sink'.
	Type string `pulumi:"type"`
	// Write batch size. Type: integer (or Expression with resultType integer), minimum: 0.
	WriteBatchSize interface{} `pulumi:"writeBatchSize"`
	// Write batch timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	WriteBatchTimeout interface{} `pulumi:"writeBatchTimeout"`
	// Specifies whether the document with same key to be overwritten (upsert) rather than throw exception (insert). The default value is "insert". Type: string (or Expression with resultType string). Type: string (or Expression with resultType string).
	WriteBehavior interface{} `pulumi:"writeBehavior"`
}

// A copy activity source for a MongoDB database.
type MongoDbV2Source struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns interface{} `pulumi:"additionalColumns"`
	// Specifies the number of documents to return in each batch of the response from MongoDB instance. In most cases, modifying the batch size will not affect the user or the application. This property's main purpose is to avoid hit the limitation of response size. Type: integer (or Expression with resultType integer).
	BatchSize interface{} `pulumi:"batchSize"`
	// Cursor methods for Mongodb query
	CursorMethods *MongoDbCursorMethodsProperties `pulumi:"cursorMethods"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// Specifies selection filter using query operators. To return all documents in a collection, omit this parameter or pass an empty document ({}). Type: string (or Expression with resultType string).
	Filter interface{} `pulumi:"filter"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	QueryTimeout interface{} `pulumi:"queryTimeout"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// Copy source type.
	// Expected value is 'MongoDbV2Source'.
	Type string `pulumi:"type"`
}

// A copy activity source for a MongoDB database.
type MongoDbV2SourceResponse struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns interface{} `pulumi:"additionalColumns"`
	// Specifies the number of documents to return in each batch of the response from MongoDB instance. In most cases, modifying the batch size will not affect the user or the application. This property's main purpose is to avoid hit the limitation of response size. Type: integer (or Expression with resultType integer).
	BatchSize interface{} `pulumi:"batchSize"`
	// Cursor methods for Mongodb query
	CursorMethods *MongoDbCursorMethodsPropertiesResponse `pulumi:"cursorMethods"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// Specifies selection filter using query operators. To return all documents in a collection, omit this parameter or pass an empty document ({}). Type: string (or Expression with resultType string).
	Filter interface{} `pulumi:"filter"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	QueryTimeout interface{} `pulumi:"queryTimeout"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// Copy source type.
	// Expected value is 'MongoDbV2Source'.
	Type string `pulumi:"type"`
}

// Base class for all triggers that support one to many model for trigger to pipeline.
type MultiplePipelineTrigger struct {
	// List of tags that can be used for describing the trigger.
	Annotations []interface{} `pulumi:"annotations"`
	// Trigger description.
	Description *string `pulumi:"description"`
	// Pipelines that need to be started.
	Pipelines []TriggerPipelineReference `pulumi:"pipelines"`
	// Trigger type.
	// Expected value is 'MultiplePipelineTrigger'.
	Type string `pulumi:"type"`
}

// Base class for all triggers that support one to many model for trigger to pipeline.
type MultiplePipelineTriggerResponse struct {
	// List of tags that can be used for describing the trigger.
	Annotations []interface{} `pulumi:"annotations"`
	// Trigger description.
	Description *string `pulumi:"description"`
	// Pipelines that need to be started.
	Pipelines []TriggerPipelineReferenceResponse `pulumi:"pipelines"`
	// Indicates if trigger is running or not. Updated when Start/Stop APIs are called on the Trigger.
	RuntimeState string `pulumi:"runtimeState"`
	// Trigger type.
	// Expected value is 'MultiplePipelineTrigger'.
	Type string `pulumi:"type"`
}

// Linked service for MySQL data source.
type MySqlLinkedService struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference `pulumi:"connectVia"`
	// The connection string.
	ConnectionString interface{} `pulumi:"connectionString"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential interface{} `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// The Azure key vault secret reference of password in connection string.
	Password *AzureKeyVaultSecretReference `pulumi:"password"`
	// Type of linked service.
	// Expected value is 'MySql'.
	Type string `pulumi:"type"`
}

// Linked service for MySQL data source.
type MySqlLinkedServiceResponse struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReferenceResponse `pulumi:"connectVia"`
	// The connection string.
	ConnectionString interface{} `pulumi:"connectionString"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential interface{} `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// The Azure key vault secret reference of password in connection string.
	Password *AzureKeyVaultSecretReferenceResponse `pulumi:"password"`
	// Type of linked service.
	// Expected value is 'MySql'.
	Type string `pulumi:"type"`
}

// A copy activity source for MySQL databases.
type MySqlSource struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns interface{} `pulumi:"additionalColumns"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// Database query. Type: string (or Expression with resultType string).
	Query interface{} `pulumi:"query"`
	// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	QueryTimeout interface{} `pulumi:"queryTimeout"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// Copy source type.
	// Expected value is 'MySqlSource'.
	Type string `pulumi:"type"`
}

// A copy activity source for MySQL databases.
type MySqlSourceResponse struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns interface{} `pulumi:"additionalColumns"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// Database query. Type: string (or Expression with resultType string).
	Query interface{} `pulumi:"query"`
	// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	QueryTimeout interface{} `pulumi:"queryTimeout"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// Copy source type.
	// Expected value is 'MySqlSource'.
	Type string `pulumi:"type"`
}

// The MySQL table dataset.
type MySqlTableDataset struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReference `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// The MySQL table name. Type: string (or Expression with resultType string).
	TableName interface{} `pulumi:"tableName"`
	// Type of dataset.
	// Expected value is 'MySqlTable'.
	Type string `pulumi:"type"`
}

// The MySQL table dataset.
type MySqlTableDatasetResponse struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetResponseFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceResponse `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// The MySQL table name. Type: string (or Expression with resultType string).
	TableName interface{} `pulumi:"tableName"`
	// Type of dataset.
	// Expected value is 'MySqlTable'.
	Type string `pulumi:"type"`
}

// Netezza linked service.
type NetezzaLinkedService struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference `pulumi:"connectVia"`
	// An ODBC connection string. Type: string, SecureString or AzureKeyVaultSecretReference.
	ConnectionString interface{} `pulumi:"connectionString"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential interface{} `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// The Azure key vault secret reference of password in connection string.
	Pwd *AzureKeyVaultSecretReference `pulumi:"pwd"`
	// Type of linked service.
	// Expected value is 'Netezza'.
	Type string `pulumi:"type"`
}

// Netezza linked service.
type NetezzaLinkedServiceResponse struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReferenceResponse `pulumi:"connectVia"`
	// An ODBC connection string. Type: string, SecureString or AzureKeyVaultSecretReference.
	ConnectionString interface{} `pulumi:"connectionString"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential interface{} `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// The Azure key vault secret reference of password in connection string.
	Pwd *AzureKeyVaultSecretReferenceResponse `pulumi:"pwd"`
	// Type of linked service.
	// Expected value is 'Netezza'.
	Type string `pulumi:"type"`
}

// The settings that will be leveraged for Netezza source partitioning.
type NetezzaPartitionSettings struct {
	// The name of the column in integer type that will be used for proceeding range partitioning. Type: string (or Expression with resultType string).
	PartitionColumnName interface{} `pulumi:"partitionColumnName"`
	// The minimum value of column specified in partitionColumnName that will be used for proceeding range partitioning. Type: string (or Expression with resultType string).
	PartitionLowerBound interface{} `pulumi:"partitionLowerBound"`
	// The maximum value of column specified in partitionColumnName that will be used for proceeding range partitioning. Type: string (or Expression with resultType string).
	PartitionUpperBound interface{} `pulumi:"partitionUpperBound"`
}

// The settings that will be leveraged for Netezza source partitioning.
type NetezzaPartitionSettingsResponse struct {
	// The name of the column in integer type that will be used for proceeding range partitioning. Type: string (or Expression with resultType string).
	PartitionColumnName interface{} `pulumi:"partitionColumnName"`
	// The minimum value of column specified in partitionColumnName that will be used for proceeding range partitioning. Type: string (or Expression with resultType string).
	PartitionLowerBound interface{} `pulumi:"partitionLowerBound"`
	// The maximum value of column specified in partitionColumnName that will be used for proceeding range partitioning. Type: string (or Expression with resultType string).
	PartitionUpperBound interface{} `pulumi:"partitionUpperBound"`
}

// A copy activity Netezza source.
type NetezzaSource struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns interface{} `pulumi:"additionalColumns"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// The partition mechanism that will be used for Netezza read in parallel. Possible values include: "None", "DataSlice", "DynamicRange".
	PartitionOption interface{} `pulumi:"partitionOption"`
	// The settings that will be leveraged for Netezza source partitioning.
	PartitionSettings *NetezzaPartitionSettings `pulumi:"partitionSettings"`
	// A query to retrieve data from source. Type: string (or Expression with resultType string).
	Query interface{} `pulumi:"query"`
	// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	QueryTimeout interface{} `pulumi:"queryTimeout"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// Copy source type.
	// Expected value is 'NetezzaSource'.
	Type string `pulumi:"type"`
}

// A copy activity Netezza source.
type NetezzaSourceResponse struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns interface{} `pulumi:"additionalColumns"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// The partition mechanism that will be used for Netezza read in parallel. Possible values include: "None", "DataSlice", "DynamicRange".
	PartitionOption interface{} `pulumi:"partitionOption"`
	// The settings that will be leveraged for Netezza source partitioning.
	PartitionSettings *NetezzaPartitionSettingsResponse `pulumi:"partitionSettings"`
	// A query to retrieve data from source. Type: string (or Expression with resultType string).
	Query interface{} `pulumi:"query"`
	// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	QueryTimeout interface{} `pulumi:"queryTimeout"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// Copy source type.
	// Expected value is 'NetezzaSource'.
	Type string `pulumi:"type"`
}

// Netezza dataset.
type NetezzaTableDataset struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReference `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// The table name of the Netezza. Type: string (or Expression with resultType string).
	Table interface{} `pulumi:"table"`
	// This property will be retired. Please consider using schema + table properties instead.
	TableName interface{} `pulumi:"tableName"`
	// Type of dataset.
	// Expected value is 'NetezzaTable'.
	Type string `pulumi:"type"`
}

// Netezza dataset.
type NetezzaTableDatasetResponse struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetResponseFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceResponse `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// The table name of the Netezza. Type: string (or Expression with resultType string).
	Table interface{} `pulumi:"table"`
	// This property will be retired. Please consider using schema + table properties instead.
	TableName interface{} `pulumi:"tableName"`
	// Type of dataset.
	// Expected value is 'NetezzaTable'.
	Type string `pulumi:"type"`
}

// Open Data Protocol (OData) linked service.
type ODataLinkedService struct {
	// Specify the resource you are requesting authorization to use Directory. Type: string (or Expression with resultType string).
	AadResourceId interface{} `pulumi:"aadResourceId"`
	// Specify the credential type (key or cert) is used for service principal.
	AadServicePrincipalCredentialType *string `pulumi:"aadServicePrincipalCredentialType"`
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The additional HTTP headers in the request to RESTful API used for authorization. Type: object (or Expression with resultType object).
	AuthHeaders interface{} `pulumi:"authHeaders"`
	// Type of authentication used to connect to the OData service.
	AuthenticationType *string `pulumi:"authenticationType"`
	// Indicates the azure cloud type of the service principle auth. Allowed values are AzurePublic, AzureChina, AzureUsGovernment, AzureGermany. Default value is the data factory regions’ cloud type. Type: string (or Expression with resultType string).
	AzureCloudType interface{} `pulumi:"azureCloudType"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference `pulumi:"connectVia"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential interface{} `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Password of the OData service.
	Password interface{} `pulumi:"password"`
	// Specify the base64 encoded certificate of your application registered in Azure Active Directory. Type: string (or Expression with resultType string).
	ServicePrincipalEmbeddedCert interface{} `pulumi:"servicePrincipalEmbeddedCert"`
	// Specify the password of your certificate if your certificate has a password and you are using AadServicePrincipal authentication. Type: string (or Expression with resultType string).
	ServicePrincipalEmbeddedCertPassword interface{} `pulumi:"servicePrincipalEmbeddedCertPassword"`
	// Specify the application id of your application registered in Azure Active Directory. Type: string (or Expression with resultType string).
	ServicePrincipalId interface{} `pulumi:"servicePrincipalId"`
	// Specify the secret of your application registered in Azure Active Directory. Type: string (or Expression with resultType string).
	ServicePrincipalKey interface{} `pulumi:"servicePrincipalKey"`
	// Specify the tenant information (domain name or tenant ID) under which your application resides. Type: string (or Expression with resultType string).
	Tenant interface{} `pulumi:"tenant"`
	// Type of linked service.
	// Expected value is 'OData'.
	Type string `pulumi:"type"`
	// The URL of the OData service endpoint. Type: string (or Expression with resultType string).
	Url interface{} `pulumi:"url"`
	// User name of the OData service. Type: string (or Expression with resultType string).
	UserName interface{} `pulumi:"userName"`
}

// Open Data Protocol (OData) linked service.
type ODataLinkedServiceResponse struct {
	// Specify the resource you are requesting authorization to use Directory. Type: string (or Expression with resultType string).
	AadResourceId interface{} `pulumi:"aadResourceId"`
	// Specify the credential type (key or cert) is used for service principal.
	AadServicePrincipalCredentialType *string `pulumi:"aadServicePrincipalCredentialType"`
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The additional HTTP headers in the request to RESTful API used for authorization. Type: object (or Expression with resultType object).
	AuthHeaders interface{} `pulumi:"authHeaders"`
	// Type of authentication used to connect to the OData service.
	AuthenticationType *string `pulumi:"authenticationType"`
	// Indicates the azure cloud type of the service principle auth. Allowed values are AzurePublic, AzureChina, AzureUsGovernment, AzureGermany. Default value is the data factory regions’ cloud type. Type: string (or Expression with resultType string).
	AzureCloudType interface{} `pulumi:"azureCloudType"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReferenceResponse `pulumi:"connectVia"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential interface{} `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Password of the OData service.
	Password interface{} `pulumi:"password"`
	// Specify the base64 encoded certificate of your application registered in Azure Active Directory. Type: string (or Expression with resultType string).
	ServicePrincipalEmbeddedCert interface{} `pulumi:"servicePrincipalEmbeddedCert"`
	// Specify the password of your certificate if your certificate has a password and you are using AadServicePrincipal authentication. Type: string (or Expression with resultType string).
	ServicePrincipalEmbeddedCertPassword interface{} `pulumi:"servicePrincipalEmbeddedCertPassword"`
	// Specify the application id of your application registered in Azure Active Directory. Type: string (or Expression with resultType string).
	ServicePrincipalId interface{} `pulumi:"servicePrincipalId"`
	// Specify the secret of your application registered in Azure Active Directory. Type: string (or Expression with resultType string).
	ServicePrincipalKey interface{} `pulumi:"servicePrincipalKey"`
	// Specify the tenant information (domain name or tenant ID) under which your application resides. Type: string (or Expression with resultType string).
	Tenant interface{} `pulumi:"tenant"`
	// Type of linked service.
	// Expected value is 'OData'.
	Type string `pulumi:"type"`
	// The URL of the OData service endpoint. Type: string (or Expression with resultType string).
	Url interface{} `pulumi:"url"`
	// User name of the OData service. Type: string (or Expression with resultType string).
	UserName interface{} `pulumi:"userName"`
}

// The Open Data Protocol (OData) resource dataset.
type ODataResourceDataset struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReference `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// The OData resource path. Type: string (or Expression with resultType string).
	Path interface{} `pulumi:"path"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// Type of dataset.
	// Expected value is 'ODataResource'.
	Type string `pulumi:"type"`
}

// The Open Data Protocol (OData) resource dataset.
type ODataResourceDatasetResponse struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetResponseFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceResponse `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// The OData resource path. Type: string (or Expression with resultType string).
	Path interface{} `pulumi:"path"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// Type of dataset.
	// Expected value is 'ODataResource'.
	Type string `pulumi:"type"`
}

// A copy activity source for OData source.
type ODataSource struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns interface{} `pulumi:"additionalColumns"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The timeout (TimeSpan) to get an HTTP response. It is the timeout to get a response, not the timeout to read response data. Default value: 00:05:00. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	HttpRequestTimeout interface{} `pulumi:"httpRequestTimeout"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// OData query. For example, "$top=1". Type: string (or Expression with resultType string).
	Query interface{} `pulumi:"query"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// Copy source type.
	// Expected value is 'ODataSource'.
	Type string `pulumi:"type"`
}

// A copy activity source for OData source.
type ODataSourceResponse struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns interface{} `pulumi:"additionalColumns"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The timeout (TimeSpan) to get an HTTP response. It is the timeout to get a response, not the timeout to read response data. Default value: 00:05:00. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	HttpRequestTimeout interface{} `pulumi:"httpRequestTimeout"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// OData query. For example, "$top=1". Type: string (or Expression with resultType string).
	Query interface{} `pulumi:"query"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// Copy source type.
	// Expected value is 'ODataSource'.
	Type string `pulumi:"type"`
}

// Open Database Connectivity (ODBC) linked service.
type OdbcLinkedService struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// Type of authentication used to connect to the ODBC data store. Possible values are: Anonymous and Basic. Type: string (or Expression with resultType string).
	AuthenticationType interface{} `pulumi:"authenticationType"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference `pulumi:"connectVia"`
	// The non-access credential portion of the connection string as well as an optional encrypted credential. Type: string, SecureString or AzureKeyVaultSecretReference.
	ConnectionString interface{} `pulumi:"connectionString"`
	// The access credential portion of the connection string specified in driver-specific property-value format.
	Credential interface{} `pulumi:"credential"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential interface{} `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Password for Basic authentication.
	Password interface{} `pulumi:"password"`
	// Type of linked service.
	// Expected value is 'Odbc'.
	Type string `pulumi:"type"`
	// User name for Basic authentication. Type: string (or Expression with resultType string).
	UserName interface{} `pulumi:"userName"`
}

// Open Database Connectivity (ODBC) linked service.
type OdbcLinkedServiceResponse struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// Type of authentication used to connect to the ODBC data store. Possible values are: Anonymous and Basic. Type: string (or Expression with resultType string).
	AuthenticationType interface{} `pulumi:"authenticationType"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReferenceResponse `pulumi:"connectVia"`
	// The non-access credential portion of the connection string as well as an optional encrypted credential. Type: string, SecureString or AzureKeyVaultSecretReference.
	ConnectionString interface{} `pulumi:"connectionString"`
	// The access credential portion of the connection string specified in driver-specific property-value format.
	Credential interface{} `pulumi:"credential"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential interface{} `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Password for Basic authentication.
	Password interface{} `pulumi:"password"`
	// Type of linked service.
	// Expected value is 'Odbc'.
	Type string `pulumi:"type"`
	// User name for Basic authentication. Type: string (or Expression with resultType string).
	UserName interface{} `pulumi:"userName"`
}

// A copy activity ODBC sink.
type OdbcSink struct {
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the sink data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// A query to execute before starting the copy. Type: string (or Expression with resultType string).
	PreCopyScript interface{} `pulumi:"preCopyScript"`
	// Sink retry count. Type: integer (or Expression with resultType integer).
	SinkRetryCount interface{} `pulumi:"sinkRetryCount"`
	// Sink retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SinkRetryWait interface{} `pulumi:"sinkRetryWait"`
	// Copy sink type.
	// Expected value is 'OdbcSink'.
	Type string `pulumi:"type"`
	// Write batch size. Type: integer (or Expression with resultType integer), minimum: 0.
	WriteBatchSize interface{} `pulumi:"writeBatchSize"`
	// Write batch timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	WriteBatchTimeout interface{} `pulumi:"writeBatchTimeout"`
}

// A copy activity ODBC sink.
type OdbcSinkResponse struct {
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the sink data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// A query to execute before starting the copy. Type: string (or Expression with resultType string).
	PreCopyScript interface{} `pulumi:"preCopyScript"`
	// Sink retry count. Type: integer (or Expression with resultType integer).
	SinkRetryCount interface{} `pulumi:"sinkRetryCount"`
	// Sink retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SinkRetryWait interface{} `pulumi:"sinkRetryWait"`
	// Copy sink type.
	// Expected value is 'OdbcSink'.
	Type string `pulumi:"type"`
	// Write batch size. Type: integer (or Expression with resultType integer), minimum: 0.
	WriteBatchSize interface{} `pulumi:"writeBatchSize"`
	// Write batch timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	WriteBatchTimeout interface{} `pulumi:"writeBatchTimeout"`
}

// A copy activity source for ODBC databases.
type OdbcSource struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns interface{} `pulumi:"additionalColumns"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// Database query. Type: string (or Expression with resultType string).
	Query interface{} `pulumi:"query"`
	// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	QueryTimeout interface{} `pulumi:"queryTimeout"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// Copy source type.
	// Expected value is 'OdbcSource'.
	Type string `pulumi:"type"`
}

// A copy activity source for ODBC databases.
type OdbcSourceResponse struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns interface{} `pulumi:"additionalColumns"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// Database query. Type: string (or Expression with resultType string).
	Query interface{} `pulumi:"query"`
	// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	QueryTimeout interface{} `pulumi:"queryTimeout"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// Copy source type.
	// Expected value is 'OdbcSource'.
	Type string `pulumi:"type"`
}

// The ODBC table dataset.
type OdbcTableDataset struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReference `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// The ODBC table name. Type: string (or Expression with resultType string).
	TableName interface{} `pulumi:"tableName"`
	// Type of dataset.
	// Expected value is 'OdbcTable'.
	Type string `pulumi:"type"`
}

// The ODBC table dataset.
type OdbcTableDatasetResponse struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetResponseFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceResponse `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// The ODBC table name. Type: string (or Expression with resultType string).
	TableName interface{} `pulumi:"tableName"`
	// Type of dataset.
	// Expected value is 'OdbcTable'.
	Type string `pulumi:"type"`
}

// The Office365 account.
type Office365Dataset struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReference `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// A predicate expression that can be used to filter the specific rows to extract from Office 365. Type: string (or Expression with resultType string).
	Predicate interface{} `pulumi:"predicate"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// Name of the dataset to extract from Office 365. Type: string (or Expression with resultType string).
	TableName interface{} `pulumi:"tableName"`
	// Type of dataset.
	// Expected value is 'Office365Table'.
	Type string `pulumi:"type"`
}

// The Office365 account.
type Office365DatasetResponse struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetResponseFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceResponse `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// A predicate expression that can be used to filter the specific rows to extract from Office 365. Type: string (or Expression with resultType string).
	Predicate interface{} `pulumi:"predicate"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// Name of the dataset to extract from Office 365. Type: string (or Expression with resultType string).
	TableName interface{} `pulumi:"tableName"`
	// Type of dataset.
	// Expected value is 'Office365Table'.
	Type string `pulumi:"type"`
}

// Office365 linked service.
type Office365LinkedService struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference `pulumi:"connectVia"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential interface{} `pulumi:"encryptedCredential"`
	// Azure tenant ID to which the Office 365 account belongs. Type: string (or Expression with resultType string).
	Office365TenantId interface{} `pulumi:"office365TenantId"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Specify the application's client ID. Type: string (or Expression with resultType string).
	ServicePrincipalId interface{} `pulumi:"servicePrincipalId"`
	// Specify the application's key.
	ServicePrincipalKey interface{} `pulumi:"servicePrincipalKey"`
	// Specify the tenant information under which your Azure AD web application resides. Type: string (or Expression with resultType string).
	ServicePrincipalTenantId interface{} `pulumi:"servicePrincipalTenantId"`
	// Type of linked service.
	// Expected value is 'Office365'.
	Type string `pulumi:"type"`
}

// Office365 linked service.
type Office365LinkedServiceResponse struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReferenceResponse `pulumi:"connectVia"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential interface{} `pulumi:"encryptedCredential"`
	// Azure tenant ID to which the Office 365 account belongs. Type: string (or Expression with resultType string).
	Office365TenantId interface{} `pulumi:"office365TenantId"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Specify the application's client ID. Type: string (or Expression with resultType string).
	ServicePrincipalId interface{} `pulumi:"servicePrincipalId"`
	// Specify the application's key.
	ServicePrincipalKey interface{} `pulumi:"servicePrincipalKey"`
	// Specify the tenant information under which your Azure AD web application resides. Type: string (or Expression with resultType string).
	ServicePrincipalTenantId interface{} `pulumi:"servicePrincipalTenantId"`
	// Type of linked service.
	// Expected value is 'Office365'.
	Type string `pulumi:"type"`
}

// A copy activity source for an Office 365 service.
type Office365Source struct {
	// The groups containing all the users. Type: array of strings (or Expression with resultType array of strings).
	AllowedGroups interface{} `pulumi:"allowedGroups"`
	// The Column to apply the <paramref name="StartTime"/> and <paramref name="EndTime"/>. Type: string (or Expression with resultType string).
	DateFilterColumn interface{} `pulumi:"dateFilterColumn"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// End time of the requested range for this dataset. Type: string (or Expression with resultType string).
	EndTime interface{} `pulumi:"endTime"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// The columns to be read out from the Office 365 table. Type: array of objects (or Expression with resultType array of objects). Example: [ { "name": "Id" }, { "name": "CreatedDateTime" } ]
	OutputColumns interface{} `pulumi:"outputColumns"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// Start time of the requested range for this dataset. Type: string (or Expression with resultType string).
	StartTime interface{} `pulumi:"startTime"`
	// Copy source type.
	// Expected value is 'Office365Source'.
	Type string `pulumi:"type"`
	// The user scope uri. Type: string (or Expression with resultType string).
	UserScopeFilterUri interface{} `pulumi:"userScopeFilterUri"`
}

// A copy activity source for an Office 365 service.
type Office365SourceResponse struct {
	// The groups containing all the users. Type: array of strings (or Expression with resultType array of strings).
	AllowedGroups interface{} `pulumi:"allowedGroups"`
	// The Column to apply the <paramref name="StartTime"/> and <paramref name="EndTime"/>. Type: string (or Expression with resultType string).
	DateFilterColumn interface{} `pulumi:"dateFilterColumn"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// End time of the requested range for this dataset. Type: string (or Expression with resultType string).
	EndTime interface{} `pulumi:"endTime"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// The columns to be read out from the Office 365 table. Type: array of objects (or Expression with resultType array of objects). Example: [ { "name": "Id" }, { "name": "CreatedDateTime" } ]
	OutputColumns interface{} `pulumi:"outputColumns"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// Start time of the requested range for this dataset. Type: string (or Expression with resultType string).
	StartTime interface{} `pulumi:"startTime"`
	// Copy source type.
	// Expected value is 'Office365Source'.
	Type string `pulumi:"type"`
	// The user scope uri. Type: string (or Expression with resultType string).
	UserScopeFilterUri interface{} `pulumi:"userScopeFilterUri"`
}

// Linked service for Oracle Cloud Storage.
type OracleCloudStorageLinkedService struct {
	// The access key identifier of the Oracle Cloud Storage Identity and Access Management (IAM) user. Type: string (or Expression with resultType string).
	AccessKeyId interface{} `pulumi:"accessKeyId"`
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference `pulumi:"connectVia"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential interface{} `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// The secret access key of the Oracle Cloud Storage Identity and Access Management (IAM) user.
	SecretAccessKey interface{} `pulumi:"secretAccessKey"`
	// This value specifies the endpoint to access with the Oracle Cloud Storage Connector. This is an optional property; change it only if you want to try a different service endpoint or want to switch between https and http. Type: string (or Expression with resultType string).
	ServiceUrl interface{} `pulumi:"serviceUrl"`
	// Type of linked service.
	// Expected value is 'OracleCloudStorage'.
	Type string `pulumi:"type"`
}

// Linked service for Oracle Cloud Storage.
type OracleCloudStorageLinkedServiceResponse struct {
	// The access key identifier of the Oracle Cloud Storage Identity and Access Management (IAM) user. Type: string (or Expression with resultType string).
	AccessKeyId interface{} `pulumi:"accessKeyId"`
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReferenceResponse `pulumi:"connectVia"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential interface{} `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// The secret access key of the Oracle Cloud Storage Identity and Access Management (IAM) user.
	SecretAccessKey interface{} `pulumi:"secretAccessKey"`
	// This value specifies the endpoint to access with the Oracle Cloud Storage Connector. This is an optional property; change it only if you want to try a different service endpoint or want to switch between https and http. Type: string (or Expression with resultType string).
	ServiceUrl interface{} `pulumi:"serviceUrl"`
	// Type of linked service.
	// Expected value is 'OracleCloudStorage'.
	Type string `pulumi:"type"`
}

// The location of Oracle Cloud Storage dataset.
type OracleCloudStorageLocation struct {
	// Specify the bucketName of Oracle Cloud Storage. Type: string (or Expression with resultType string)
	BucketName interface{} `pulumi:"bucketName"`
	// Specify the file name of dataset. Type: string (or Expression with resultType string).
	FileName interface{} `pulumi:"fileName"`
	// Specify the folder path of dataset. Type: string (or Expression with resultType string)
	FolderPath interface{} `pulumi:"folderPath"`
	// Type of dataset storage location.
	// Expected value is 'OracleCloudStorageLocation'.
	Type string `pulumi:"type"`
	// Specify the version of Oracle Cloud Storage. Type: string (or Expression with resultType string).
	Version interface{} `pulumi:"version"`
}

// The location of Oracle Cloud Storage dataset.
type OracleCloudStorageLocationResponse struct {
	// Specify the bucketName of Oracle Cloud Storage. Type: string (or Expression with resultType string)
	BucketName interface{} `pulumi:"bucketName"`
	// Specify the file name of dataset. Type: string (or Expression with resultType string).
	FileName interface{} `pulumi:"fileName"`
	// Specify the folder path of dataset. Type: string (or Expression with resultType string)
	FolderPath interface{} `pulumi:"folderPath"`
	// Type of dataset storage location.
	// Expected value is 'OracleCloudStorageLocation'.
	Type string `pulumi:"type"`
	// Specify the version of Oracle Cloud Storage. Type: string (or Expression with resultType string).
	Version interface{} `pulumi:"version"`
}

// Oracle Cloud Storage read settings.
type OracleCloudStorageReadSettings struct {
	// Indicates whether the source files need to be deleted after copy completion. Default is false. Type: boolean (or Expression with resultType boolean).
	DeleteFilesAfterCompletion interface{} `pulumi:"deleteFilesAfterCompletion"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// Indicates whether to enable partition discovery.
	EnablePartitionDiscovery *bool `pulumi:"enablePartitionDiscovery"`
	// Point to a text file that lists each file (relative path to the path configured in the dataset) that you want to copy. Type: string (or Expression with resultType string).
	FileListPath interface{} `pulumi:"fileListPath"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// The end of file's modified datetime. Type: string (or Expression with resultType string).
	ModifiedDatetimeEnd interface{} `pulumi:"modifiedDatetimeEnd"`
	// The start of file's modified datetime. Type: string (or Expression with resultType string).
	ModifiedDatetimeStart interface{} `pulumi:"modifiedDatetimeStart"`
	// Specify the root path where partition discovery starts from. Type: string (or Expression with resultType string).
	PartitionRootPath interface{} `pulumi:"partitionRootPath"`
	// The prefix filter for the Oracle Cloud Storage object name. Type: string (or Expression with resultType string).
	Prefix interface{} `pulumi:"prefix"`
	// If true, files under the folder path will be read recursively. Default is true. Type: boolean (or Expression with resultType boolean).
	Recursive interface{} `pulumi:"recursive"`
	// The read setting type.
	// Expected value is 'OracleCloudStorageReadSettings'.
	Type string `pulumi:"type"`
	// Oracle Cloud Storage wildcardFileName. Type: string (or Expression with resultType string).
	WildcardFileName interface{} `pulumi:"wildcardFileName"`
	// Oracle Cloud Storage wildcardFolderPath. Type: string (or Expression with resultType string).
	WildcardFolderPath interface{} `pulumi:"wildcardFolderPath"`
}

// Oracle Cloud Storage read settings.
type OracleCloudStorageReadSettingsResponse struct {
	// Indicates whether the source files need to be deleted after copy completion. Default is false. Type: boolean (or Expression with resultType boolean).
	DeleteFilesAfterCompletion interface{} `pulumi:"deleteFilesAfterCompletion"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// Indicates whether to enable partition discovery.
	EnablePartitionDiscovery *bool `pulumi:"enablePartitionDiscovery"`
	// Point to a text file that lists each file (relative path to the path configured in the dataset) that you want to copy. Type: string (or Expression with resultType string).
	FileListPath interface{} `pulumi:"fileListPath"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// The end of file's modified datetime. Type: string (or Expression with resultType string).
	ModifiedDatetimeEnd interface{} `pulumi:"modifiedDatetimeEnd"`
	// The start of file's modified datetime. Type: string (or Expression with resultType string).
	ModifiedDatetimeStart interface{} `pulumi:"modifiedDatetimeStart"`
	// Specify the root path where partition discovery starts from. Type: string (or Expression with resultType string).
	PartitionRootPath interface{} `pulumi:"partitionRootPath"`
	// The prefix filter for the Oracle Cloud Storage object name. Type: string (or Expression with resultType string).
	Prefix interface{} `pulumi:"prefix"`
	// If true, files under the folder path will be read recursively. Default is true. Type: boolean (or Expression with resultType boolean).
	Recursive interface{} `pulumi:"recursive"`
	// The read setting type.
	// Expected value is 'OracleCloudStorageReadSettings'.
	Type string `pulumi:"type"`
	// Oracle Cloud Storage wildcardFileName. Type: string (or Expression with resultType string).
	WildcardFileName interface{} `pulumi:"wildcardFileName"`
	// Oracle Cloud Storage wildcardFolderPath. Type: string (or Expression with resultType string).
	WildcardFolderPath interface{} `pulumi:"wildcardFolderPath"`
}

// Oracle database.
type OracleLinkedService struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference `pulumi:"connectVia"`
	// The connection string. Type: string, SecureString or AzureKeyVaultSecretReference.
	ConnectionString interface{} `pulumi:"connectionString"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential interface{} `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// The Azure key vault secret reference of password in connection string.
	Password *AzureKeyVaultSecretReference `pulumi:"password"`
	// Type of linked service.
	// Expected value is 'Oracle'.
	Type string `pulumi:"type"`
}

// Oracle database.
type OracleLinkedServiceResponse struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReferenceResponse `pulumi:"connectVia"`
	// The connection string. Type: string, SecureString or AzureKeyVaultSecretReference.
	ConnectionString interface{} `pulumi:"connectionString"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential interface{} `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// The Azure key vault secret reference of password in connection string.
	Password *AzureKeyVaultSecretReferenceResponse `pulumi:"password"`
	// Type of linked service.
	// Expected value is 'Oracle'.
	Type string `pulumi:"type"`
}

// The settings that will be leveraged for Oracle source partitioning.
type OraclePartitionSettings struct {
	// The name of the column in integer type that will be used for proceeding range partitioning. Type: string (or Expression with resultType string).
	PartitionColumnName interface{} `pulumi:"partitionColumnName"`
	// The minimum value of column specified in partitionColumnName that will be used for proceeding range partitioning. Type: string (or Expression with resultType string).
	PartitionLowerBound interface{} `pulumi:"partitionLowerBound"`
	// Names of the physical partitions of Oracle table.
	PartitionNames []interface{} `pulumi:"partitionNames"`
	// The maximum value of column specified in partitionColumnName that will be used for proceeding range partitioning. Type: string (or Expression with resultType string).
	PartitionUpperBound interface{} `pulumi:"partitionUpperBound"`
}

// The settings that will be leveraged for Oracle source partitioning.
type OraclePartitionSettingsResponse struct {
	// The name of the column in integer type that will be used for proceeding range partitioning. Type: string (or Expression with resultType string).
	PartitionColumnName interface{} `pulumi:"partitionColumnName"`
	// The minimum value of column specified in partitionColumnName that will be used for proceeding range partitioning. Type: string (or Expression with resultType string).
	PartitionLowerBound interface{} `pulumi:"partitionLowerBound"`
	// Names of the physical partitions of Oracle table.
	PartitionNames []interface{} `pulumi:"partitionNames"`
	// The maximum value of column specified in partitionColumnName that will be used for proceeding range partitioning. Type: string (or Expression with resultType string).
	PartitionUpperBound interface{} `pulumi:"partitionUpperBound"`
}

// Oracle Service Cloud linked service.
type OracleServiceCloudLinkedService struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference `pulumi:"connectVia"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential interface{} `pulumi:"encryptedCredential"`
	// The URL of the Oracle Service Cloud instance.
	Host interface{} `pulumi:"host"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// The password corresponding to the user name that you provided in the username key.
	Password interface{} `pulumi:"password"`
	// Type of linked service.
	// Expected value is 'OracleServiceCloud'.
	Type string `pulumi:"type"`
	// Specifies whether the data source endpoints are encrypted using HTTPS. The default value is true. Type: boolean (or Expression with resultType boolean).
	UseEncryptedEndpoints interface{} `pulumi:"useEncryptedEndpoints"`
	// Specifies whether to require the host name in the server's certificate to match the host name of the server when connecting over SSL. The default value is true. Type: boolean (or Expression with resultType boolean).
	UseHostVerification interface{} `pulumi:"useHostVerification"`
	// Specifies whether to verify the identity of the server when connecting over SSL. The default value is true. Type: boolean (or Expression with resultType boolean).
	UsePeerVerification interface{} `pulumi:"usePeerVerification"`
	// The user name that you use to access Oracle Service Cloud server.
	Username interface{} `pulumi:"username"`
}

// Oracle Service Cloud linked service.
type OracleServiceCloudLinkedServiceResponse struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReferenceResponse `pulumi:"connectVia"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential interface{} `pulumi:"encryptedCredential"`
	// The URL of the Oracle Service Cloud instance.
	Host interface{} `pulumi:"host"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// The password corresponding to the user name that you provided in the username key.
	Password interface{} `pulumi:"password"`
	// Type of linked service.
	// Expected value is 'OracleServiceCloud'.
	Type string `pulumi:"type"`
	// Specifies whether the data source endpoints are encrypted using HTTPS. The default value is true. Type: boolean (or Expression with resultType boolean).
	UseEncryptedEndpoints interface{} `pulumi:"useEncryptedEndpoints"`
	// Specifies whether to require the host name in the server's certificate to match the host name of the server when connecting over SSL. The default value is true. Type: boolean (or Expression with resultType boolean).
	UseHostVerification interface{} `pulumi:"useHostVerification"`
	// Specifies whether to verify the identity of the server when connecting over SSL. The default value is true. Type: boolean (or Expression with resultType boolean).
	UsePeerVerification interface{} `pulumi:"usePeerVerification"`
	// The user name that you use to access Oracle Service Cloud server.
	Username interface{} `pulumi:"username"`
}

// Oracle Service Cloud dataset.
type OracleServiceCloudObjectDataset struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReference `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// The table name. Type: string (or Expression with resultType string).
	TableName interface{} `pulumi:"tableName"`
	// Type of dataset.
	// Expected value is 'OracleServiceCloudObject'.
	Type string `pulumi:"type"`
}

// Oracle Service Cloud dataset.
type OracleServiceCloudObjectDatasetResponse struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetResponseFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceResponse `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// The table name. Type: string (or Expression with resultType string).
	TableName interface{} `pulumi:"tableName"`
	// Type of dataset.
	// Expected value is 'OracleServiceCloudObject'.
	Type string `pulumi:"type"`
}

// A copy activity Oracle Service Cloud source.
type OracleServiceCloudSource struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns interface{} `pulumi:"additionalColumns"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// A query to retrieve data from source. Type: string (or Expression with resultType string).
	Query interface{} `pulumi:"query"`
	// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	QueryTimeout interface{} `pulumi:"queryTimeout"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// Copy source type.
	// Expected value is 'OracleServiceCloudSource'.
	Type string `pulumi:"type"`
}

// A copy activity Oracle Service Cloud source.
type OracleServiceCloudSourceResponse struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns interface{} `pulumi:"additionalColumns"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// A query to retrieve data from source. Type: string (or Expression with resultType string).
	Query interface{} `pulumi:"query"`
	// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	QueryTimeout interface{} `pulumi:"queryTimeout"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// Copy source type.
	// Expected value is 'OracleServiceCloudSource'.
	Type string `pulumi:"type"`
}

// A copy activity Oracle sink.
type OracleSink struct {
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the sink data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// SQL pre-copy script. Type: string (or Expression with resultType string).
	PreCopyScript interface{} `pulumi:"preCopyScript"`
	// Sink retry count. Type: integer (or Expression with resultType integer).
	SinkRetryCount interface{} `pulumi:"sinkRetryCount"`
	// Sink retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SinkRetryWait interface{} `pulumi:"sinkRetryWait"`
	// Copy sink type.
	// Expected value is 'OracleSink'.
	Type string `pulumi:"type"`
	// Write batch size. Type: integer (or Expression with resultType integer), minimum: 0.
	WriteBatchSize interface{} `pulumi:"writeBatchSize"`
	// Write batch timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	WriteBatchTimeout interface{} `pulumi:"writeBatchTimeout"`
}

// A copy activity Oracle sink.
type OracleSinkResponse struct {
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the sink data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// SQL pre-copy script. Type: string (or Expression with resultType string).
	PreCopyScript interface{} `pulumi:"preCopyScript"`
	// Sink retry count. Type: integer (or Expression with resultType integer).
	SinkRetryCount interface{} `pulumi:"sinkRetryCount"`
	// Sink retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SinkRetryWait interface{} `pulumi:"sinkRetryWait"`
	// Copy sink type.
	// Expected value is 'OracleSink'.
	Type string `pulumi:"type"`
	// Write batch size. Type: integer (or Expression with resultType integer), minimum: 0.
	WriteBatchSize interface{} `pulumi:"writeBatchSize"`
	// Write batch timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	WriteBatchTimeout interface{} `pulumi:"writeBatchTimeout"`
}

// A copy activity Oracle source.
type OracleSource struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns interface{} `pulumi:"additionalColumns"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// Oracle reader query. Type: string (or Expression with resultType string).
	OracleReaderQuery interface{} `pulumi:"oracleReaderQuery"`
	// The partition mechanism that will be used for Oracle read in parallel. Possible values include: "None", "PhysicalPartitionsOfTable", "DynamicRange".
	PartitionOption interface{} `pulumi:"partitionOption"`
	// The settings that will be leveraged for Oracle source partitioning.
	PartitionSettings *OraclePartitionSettings `pulumi:"partitionSettings"`
	// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	QueryTimeout interface{} `pulumi:"queryTimeout"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// Copy source type.
	// Expected value is 'OracleSource'.
	Type string `pulumi:"type"`
}

// A copy activity Oracle source.
type OracleSourceResponse struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns interface{} `pulumi:"additionalColumns"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// Oracle reader query. Type: string (or Expression with resultType string).
	OracleReaderQuery interface{} `pulumi:"oracleReaderQuery"`
	// The partition mechanism that will be used for Oracle read in parallel. Possible values include: "None", "PhysicalPartitionsOfTable", "DynamicRange".
	PartitionOption interface{} `pulumi:"partitionOption"`
	// The settings that will be leveraged for Oracle source partitioning.
	PartitionSettings *OraclePartitionSettingsResponse `pulumi:"partitionSettings"`
	// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	QueryTimeout interface{} `pulumi:"queryTimeout"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// Copy source type.
	// Expected value is 'OracleSource'.
	Type string `pulumi:"type"`
}

// The on-premises Oracle database dataset.
type OracleTableDataset struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReference `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// The table name of the on-premises Oracle database. Type: string (or Expression with resultType string).
	Table interface{} `pulumi:"table"`
	// This property will be retired. Please consider using schema + table properties instead.
	TableName interface{} `pulumi:"tableName"`
	// Type of dataset.
	// Expected value is 'OracleTable'.
	Type string `pulumi:"type"`
}

// The on-premises Oracle database dataset.
type OracleTableDatasetResponse struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetResponseFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceResponse `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// The table name of the on-premises Oracle database. Type: string (or Expression with resultType string).
	Table interface{} `pulumi:"table"`
	// This property will be retired. Please consider using schema + table properties instead.
	TableName interface{} `pulumi:"tableName"`
	// Type of dataset.
	// Expected value is 'OracleTable'.
	Type string `pulumi:"type"`
}

// ORC dataset.
type OrcDataset struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReference `pulumi:"linkedServiceName"`
	// The location of the ORC data storage.
	Location interface{} `pulumi:"location"`
	// The data orcCompressionCodec. Type: string (or Expression with resultType string).
	OrcCompressionCodec interface{} `pulumi:"orcCompressionCodec"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// Type of dataset.
	// Expected value is 'Orc'.
	Type string `pulumi:"type"`
}

// ORC dataset.
type OrcDatasetResponse struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetResponseFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceResponse `pulumi:"linkedServiceName"`
	// The location of the ORC data storage.
	Location interface{} `pulumi:"location"`
	// The data orcCompressionCodec. Type: string (or Expression with resultType string).
	OrcCompressionCodec interface{} `pulumi:"orcCompressionCodec"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// Type of dataset.
	// Expected value is 'Orc'.
	Type string `pulumi:"type"`
}

// The data stored in Optimized Row Columnar (ORC) format.
type OrcFormat struct {
	// Deserializer. Type: string (or Expression with resultType string).
	Deserializer interface{} `pulumi:"deserializer"`
	// Serializer. Type: string (or Expression with resultType string).
	Serializer interface{} `pulumi:"serializer"`
	// Type of dataset storage format.
	// Expected value is 'OrcFormat'.
	Type string `pulumi:"type"`
}

// The data stored in Optimized Row Columnar (ORC) format.
type OrcFormatResponse struct {
	// Deserializer. Type: string (or Expression with resultType string).
	Deserializer interface{} `pulumi:"deserializer"`
	// Serializer. Type: string (or Expression with resultType string).
	Serializer interface{} `pulumi:"serializer"`
	// Type of dataset storage format.
	// Expected value is 'OrcFormat'.
	Type string `pulumi:"type"`
}

// A copy activity ORC sink.
type OrcSink struct {
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// ORC format settings.
	FormatSettings *OrcWriteSettings `pulumi:"formatSettings"`
	// The maximum concurrent connection count for the sink data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// Sink retry count. Type: integer (or Expression with resultType integer).
	SinkRetryCount interface{} `pulumi:"sinkRetryCount"`
	// Sink retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SinkRetryWait interface{} `pulumi:"sinkRetryWait"`
	// ORC store settings.
	StoreSettings interface{} `pulumi:"storeSettings"`
	// Copy sink type.
	// Expected value is 'OrcSink'.
	Type string `pulumi:"type"`
	// Write batch size. Type: integer (or Expression with resultType integer), minimum: 0.
	WriteBatchSize interface{} `pulumi:"writeBatchSize"`
	// Write batch timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	WriteBatchTimeout interface{} `pulumi:"writeBatchTimeout"`
}

// A copy activity ORC sink.
type OrcSinkResponse struct {
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// ORC format settings.
	FormatSettings *OrcWriteSettingsResponse `pulumi:"formatSettings"`
	// The maximum concurrent connection count for the sink data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// Sink retry count. Type: integer (or Expression with resultType integer).
	SinkRetryCount interface{} `pulumi:"sinkRetryCount"`
	// Sink retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SinkRetryWait interface{} `pulumi:"sinkRetryWait"`
	// ORC store settings.
	StoreSettings interface{} `pulumi:"storeSettings"`
	// Copy sink type.
	// Expected value is 'OrcSink'.
	Type string `pulumi:"type"`
	// Write batch size. Type: integer (or Expression with resultType integer), minimum: 0.
	WriteBatchSize interface{} `pulumi:"writeBatchSize"`
	// Write batch timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	WriteBatchTimeout interface{} `pulumi:"writeBatchTimeout"`
}

// A copy activity ORC source.
type OrcSource struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns interface{} `pulumi:"additionalColumns"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// ORC store settings.
	StoreSettings interface{} `pulumi:"storeSettings"`
	// Copy source type.
	// Expected value is 'OrcSource'.
	Type string `pulumi:"type"`
}

// A copy activity ORC source.
type OrcSourceResponse struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns interface{} `pulumi:"additionalColumns"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// ORC store settings.
	StoreSettings interface{} `pulumi:"storeSettings"`
	// Copy source type.
	// Expected value is 'OrcSource'.
	Type string `pulumi:"type"`
}

// Orc write settings.
type OrcWriteSettings struct {
	// Specifies the file name pattern <fileNamePrefix>_<fileIndex>.<fileExtension> when copy from non-file based store without partitionOptions. Type: string (or Expression with resultType string).
	FileNamePrefix interface{} `pulumi:"fileNamePrefix"`
	// Limit the written file's row count to be smaller than or equal to the specified count. Type: integer (or Expression with resultType integer).
	MaxRowsPerFile interface{} `pulumi:"maxRowsPerFile"`
	// The write setting type.
	// Expected value is 'OrcWriteSettings'.
	Type string `pulumi:"type"`
}

// Orc write settings.
type OrcWriteSettingsResponse struct {
	// Specifies the file name pattern <fileNamePrefix>_<fileIndex>.<fileExtension> when copy from non-file based store without partitionOptions. Type: string (or Expression with resultType string).
	FileNamePrefix interface{} `pulumi:"fileNamePrefix"`
	// Limit the written file's row count to be smaller than or equal to the specified count. Type: integer (or Expression with resultType integer).
	MaxRowsPerFile interface{} `pulumi:"maxRowsPerFile"`
	// The write setting type.
	// Expected value is 'OrcWriteSettings'.
	Type string `pulumi:"type"`
}

// Package store for the SSIS integration runtime.
type PackageStore struct {
	// The name of the package store
	Name string `pulumi:"name"`
	// The package store linked service reference.
	PackageStoreLinkedService EntityReference `pulumi:"packageStoreLinkedService"`
}

// Package store for the SSIS integration runtime.
type PackageStoreResponse struct {
	// The name of the package store
	Name string `pulumi:"name"`
	// The package store linked service reference.
	PackageStoreLinkedService EntityReferenceResponse `pulumi:"packageStoreLinkedService"`
}

// Definition of a single parameter for an entity.
type ParameterSpecification struct {
	// Default value of parameter.
	DefaultValue interface{} `pulumi:"defaultValue"`
	// Parameter type.
	Type string `pulumi:"type"`
}

// ParameterSpecificationInput is an input type that accepts ParameterSpecificationArgs and ParameterSpecificationOutput values.
// You can construct a concrete instance of `ParameterSpecificationInput` via:
//
//	ParameterSpecificationArgs{...}
type ParameterSpecificationInput interface {
	pulumi.Input

	ToParameterSpecificationOutput() ParameterSpecificationOutput
	ToParameterSpecificationOutputWithContext(context.Context) ParameterSpecificationOutput
}

// Definition of a single parameter for an entity.
type ParameterSpecificationArgs struct {
	// Default value of parameter.
	DefaultValue pulumi.Input `pulumi:"defaultValue"`
	// Parameter type.
	Type pulumi.StringInput `pulumi:"type"`
}

func (ParameterSpecificationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ParameterSpecification)(nil)).Elem()
}

func (i ParameterSpecificationArgs) ToParameterSpecificationOutput() ParameterSpecificationOutput {
	return i.ToParameterSpecificationOutputWithContext(context.Background())
}

func (i ParameterSpecificationArgs) ToParameterSpecificationOutputWithContext(ctx context.Context) ParameterSpecificationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ParameterSpecificationOutput)
}

// ParameterSpecificationMapInput is an input type that accepts ParameterSpecificationMap and ParameterSpecificationMapOutput values.
// You can construct a concrete instance of `ParameterSpecificationMapInput` via:
//
//	ParameterSpecificationMap{ "key": ParameterSpecificationArgs{...} }
type ParameterSpecificationMapInput interface {
	pulumi.Input

	ToParameterSpecificationMapOutput() ParameterSpecificationMapOutput
	ToParameterSpecificationMapOutputWithContext(context.Context) ParameterSpecificationMapOutput
}

type ParameterSpecificationMap map[string]ParameterSpecificationInput

func (ParameterSpecificationMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]ParameterSpecification)(nil)).Elem()
}

func (i ParameterSpecificationMap) ToParameterSpecificationMapOutput() ParameterSpecificationMapOutput {
	return i.ToParameterSpecificationMapOutputWithContext(context.Background())
}

func (i ParameterSpecificationMap) ToParameterSpecificationMapOutputWithContext(ctx context.Context) ParameterSpecificationMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ParameterSpecificationMapOutput)
}

// Definition of a single parameter for an entity.
type ParameterSpecificationOutput struct{ *pulumi.OutputState }

func (ParameterSpecificationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ParameterSpecification)(nil)).Elem()
}

func (o ParameterSpecificationOutput) ToParameterSpecificationOutput() ParameterSpecificationOutput {
	return o
}

func (o ParameterSpecificationOutput) ToParameterSpecificationOutputWithContext(ctx context.Context) ParameterSpecificationOutput {
	return o
}

// Default value of parameter.
func (o ParameterSpecificationOutput) DefaultValue() pulumi.AnyOutput {
	return o.ApplyT(func(v ParameterSpecification) interface{} { return v.DefaultValue }).(pulumi.AnyOutput)
}

// Parameter type.
func (o ParameterSpecificationOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ParameterSpecification) string { return v.Type }).(pulumi.StringOutput)
}

type ParameterSpecificationMapOutput struct{ *pulumi.OutputState }

func (ParameterSpecificationMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]ParameterSpecification)(nil)).Elem()
}

func (o ParameterSpecificationMapOutput) ToParameterSpecificationMapOutput() ParameterSpecificationMapOutput {
	return o
}

func (o ParameterSpecificationMapOutput) ToParameterSpecificationMapOutputWithContext(ctx context.Context) ParameterSpecificationMapOutput {
	return o
}

func (o ParameterSpecificationMapOutput) MapIndex(k pulumi.StringInput) ParameterSpecificationOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) ParameterSpecification {
		return vs[0].(map[string]ParameterSpecification)[vs[1].(string)]
	}).(ParameterSpecificationOutput)
}

// Definition of a single parameter for an entity.
type ParameterSpecificationResponse struct {
	// Default value of parameter.
	DefaultValue interface{} `pulumi:"defaultValue"`
	// Parameter type.
	Type string `pulumi:"type"`
}

// Definition of a single parameter for an entity.
type ParameterSpecificationResponseOutput struct{ *pulumi.OutputState }

func (ParameterSpecificationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ParameterSpecificationResponse)(nil)).Elem()
}

func (o ParameterSpecificationResponseOutput) ToParameterSpecificationResponseOutput() ParameterSpecificationResponseOutput {
	return o
}

func (o ParameterSpecificationResponseOutput) ToParameterSpecificationResponseOutputWithContext(ctx context.Context) ParameterSpecificationResponseOutput {
	return o
}

// Default value of parameter.
func (o ParameterSpecificationResponseOutput) DefaultValue() pulumi.AnyOutput {
	return o.ApplyT(func(v ParameterSpecificationResponse) interface{} { return v.DefaultValue }).(pulumi.AnyOutput)
}

// Parameter type.
func (o ParameterSpecificationResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ParameterSpecificationResponse) string { return v.Type }).(pulumi.StringOutput)
}

type ParameterSpecificationResponseMapOutput struct{ *pulumi.OutputState }

func (ParameterSpecificationResponseMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]ParameterSpecificationResponse)(nil)).Elem()
}

func (o ParameterSpecificationResponseMapOutput) ToParameterSpecificationResponseMapOutput() ParameterSpecificationResponseMapOutput {
	return o
}

func (o ParameterSpecificationResponseMapOutput) ToParameterSpecificationResponseMapOutputWithContext(ctx context.Context) ParameterSpecificationResponseMapOutput {
	return o
}

func (o ParameterSpecificationResponseMapOutput) MapIndex(k pulumi.StringInput) ParameterSpecificationResponseOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) ParameterSpecificationResponse {
		return vs[0].(map[string]ParameterSpecificationResponse)[vs[1].(string)]
	}).(ParameterSpecificationResponseOutput)
}

// Parquet dataset.
type ParquetDataset struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// The data compressionCodec. Type: string (or Expression with resultType string).
	CompressionCodec interface{} `pulumi:"compressionCodec"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReference `pulumi:"linkedServiceName"`
	// The location of the parquet storage.
	Location interface{} `pulumi:"location"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// Type of dataset.
	// Expected value is 'Parquet'.
	Type string `pulumi:"type"`
}

// Parquet dataset.
type ParquetDatasetResponse struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// The data compressionCodec. Type: string (or Expression with resultType string).
	CompressionCodec interface{} `pulumi:"compressionCodec"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetResponseFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceResponse `pulumi:"linkedServiceName"`
	// The location of the parquet storage.
	Location interface{} `pulumi:"location"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// Type of dataset.
	// Expected value is 'Parquet'.
	Type string `pulumi:"type"`
}

// The data stored in Parquet format.
type ParquetFormat struct {
	// Deserializer. Type: string (or Expression with resultType string).
	Deserializer interface{} `pulumi:"deserializer"`
	// Serializer. Type: string (or Expression with resultType string).
	Serializer interface{} `pulumi:"serializer"`
	// Type of dataset storage format.
	// Expected value is 'ParquetFormat'.
	Type string `pulumi:"type"`
}

// The data stored in Parquet format.
type ParquetFormatResponse struct {
	// Deserializer. Type: string (or Expression with resultType string).
	Deserializer interface{} `pulumi:"deserializer"`
	// Serializer. Type: string (or Expression with resultType string).
	Serializer interface{} `pulumi:"serializer"`
	// Type of dataset storage format.
	// Expected value is 'ParquetFormat'.
	Type string `pulumi:"type"`
}

// A copy activity Parquet sink.
type ParquetSink struct {
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// Parquet format settings.
	FormatSettings *ParquetWriteSettings `pulumi:"formatSettings"`
	// The maximum concurrent connection count for the sink data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// Sink retry count. Type: integer (or Expression with resultType integer).
	SinkRetryCount interface{} `pulumi:"sinkRetryCount"`
	// Sink retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SinkRetryWait interface{} `pulumi:"sinkRetryWait"`
	// Parquet store settings.
	StoreSettings interface{} `pulumi:"storeSettings"`
	// Copy sink type.
	// Expected value is 'ParquetSink'.
	Type string `pulumi:"type"`
	// Write batch size. Type: integer (or Expression with resultType integer), minimum: 0.
	WriteBatchSize interface{} `pulumi:"writeBatchSize"`
	// Write batch timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	WriteBatchTimeout interface{} `pulumi:"writeBatchTimeout"`
}

// A copy activity Parquet sink.
type ParquetSinkResponse struct {
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// Parquet format settings.
	FormatSettings *ParquetWriteSettingsResponse `pulumi:"formatSettings"`
	// The maximum concurrent connection count for the sink data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// Sink retry count. Type: integer (or Expression with resultType integer).
	SinkRetryCount interface{} `pulumi:"sinkRetryCount"`
	// Sink retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SinkRetryWait interface{} `pulumi:"sinkRetryWait"`
	// Parquet store settings.
	StoreSettings interface{} `pulumi:"storeSettings"`
	// Copy sink type.
	// Expected value is 'ParquetSink'.
	Type string `pulumi:"type"`
	// Write batch size. Type: integer (or Expression with resultType integer), minimum: 0.
	WriteBatchSize interface{} `pulumi:"writeBatchSize"`
	// Write batch timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	WriteBatchTimeout interface{} `pulumi:"writeBatchTimeout"`
}

// A copy activity Parquet source.
type ParquetSource struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns interface{} `pulumi:"additionalColumns"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// Parquet store settings.
	StoreSettings interface{} `pulumi:"storeSettings"`
	// Copy source type.
	// Expected value is 'ParquetSource'.
	Type string `pulumi:"type"`
}

// A copy activity Parquet source.
type ParquetSourceResponse struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns interface{} `pulumi:"additionalColumns"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// Parquet store settings.
	StoreSettings interface{} `pulumi:"storeSettings"`
	// Copy source type.
	// Expected value is 'ParquetSource'.
	Type string `pulumi:"type"`
}

// Parquet write settings.
type ParquetWriteSettings struct {
	// Specifies the file name pattern <fileNamePrefix>_<fileIndex>.<fileExtension> when copy from non-file based store without partitionOptions. Type: string (or Expression with resultType string).
	FileNamePrefix interface{} `pulumi:"fileNamePrefix"`
	// Limit the written file's row count to be smaller than or equal to the specified count. Type: integer (or Expression with resultType integer).
	MaxRowsPerFile interface{} `pulumi:"maxRowsPerFile"`
	// The write setting type.
	// Expected value is 'ParquetWriteSettings'.
	Type string `pulumi:"type"`
}

// Parquet write settings.
type ParquetWriteSettingsResponse struct {
	// Specifies the file name pattern <fileNamePrefix>_<fileIndex>.<fileExtension> when copy from non-file based store without partitionOptions. Type: string (or Expression with resultType string).
	FileNamePrefix interface{} `pulumi:"fileNamePrefix"`
	// Limit the written file's row count to be smaller than or equal to the specified count. Type: integer (or Expression with resultType integer).
	MaxRowsPerFile interface{} `pulumi:"maxRowsPerFile"`
	// The write setting type.
	// Expected value is 'ParquetWriteSettings'.
	Type string `pulumi:"type"`
}

// Paypal Service linked service.
type PaypalLinkedService struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The client ID associated with your PayPal application.
	ClientId interface{} `pulumi:"clientId"`
	// The client secret associated with your PayPal application.
	ClientSecret interface{} `pulumi:"clientSecret"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference `pulumi:"connectVia"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential interface{} `pulumi:"encryptedCredential"`
	// The URL of the PayPal instance. (i.e. api.sandbox.paypal.com)
	Host interface{} `pulumi:"host"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Type of linked service.
	// Expected value is 'Paypal'.
	Type string `pulumi:"type"`
	// Specifies whether the data source endpoints are encrypted using HTTPS. The default value is true.
	UseEncryptedEndpoints interface{} `pulumi:"useEncryptedEndpoints"`
	// Specifies whether to require the host name in the server's certificate to match the host name of the server when connecting over SSL. The default value is true.
	UseHostVerification interface{} `pulumi:"useHostVerification"`
	// Specifies whether to verify the identity of the server when connecting over SSL. The default value is true.
	UsePeerVerification interface{} `pulumi:"usePeerVerification"`
}

// Paypal Service linked service.
type PaypalLinkedServiceResponse struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The client ID associated with your PayPal application.
	ClientId interface{} `pulumi:"clientId"`
	// The client secret associated with your PayPal application.
	ClientSecret interface{} `pulumi:"clientSecret"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReferenceResponse `pulumi:"connectVia"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential interface{} `pulumi:"encryptedCredential"`
	// The URL of the PayPal instance. (i.e. api.sandbox.paypal.com)
	Host interface{} `pulumi:"host"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Type of linked service.
	// Expected value is 'Paypal'.
	Type string `pulumi:"type"`
	// Specifies whether the data source endpoints are encrypted using HTTPS. The default value is true.
	UseEncryptedEndpoints interface{} `pulumi:"useEncryptedEndpoints"`
	// Specifies whether to require the host name in the server's certificate to match the host name of the server when connecting over SSL. The default value is true.
	UseHostVerification interface{} `pulumi:"useHostVerification"`
	// Specifies whether to verify the identity of the server when connecting over SSL. The default value is true.
	UsePeerVerification interface{} `pulumi:"usePeerVerification"`
}

// Paypal Service dataset.
type PaypalObjectDataset struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReference `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// The table name. Type: string (or Expression with resultType string).
	TableName interface{} `pulumi:"tableName"`
	// Type of dataset.
	// Expected value is 'PaypalObject'.
	Type string `pulumi:"type"`
}

// Paypal Service dataset.
type PaypalObjectDatasetResponse struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetResponseFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceResponse `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// The table name. Type: string (or Expression with resultType string).
	TableName interface{} `pulumi:"tableName"`
	// Type of dataset.
	// Expected value is 'PaypalObject'.
	Type string `pulumi:"type"`
}

// A copy activity Paypal Service source.
type PaypalSource struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns interface{} `pulumi:"additionalColumns"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// A query to retrieve data from source. Type: string (or Expression with resultType string).
	Query interface{} `pulumi:"query"`
	// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	QueryTimeout interface{} `pulumi:"queryTimeout"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// Copy source type.
	// Expected value is 'PaypalSource'.
	Type string `pulumi:"type"`
}

// A copy activity Paypal Service source.
type PaypalSourceResponse struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns interface{} `pulumi:"additionalColumns"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// A query to retrieve data from source. Type: string (or Expression with resultType string).
	Query interface{} `pulumi:"query"`
	// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	QueryTimeout interface{} `pulumi:"queryTimeout"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// Copy source type.
	// Expected value is 'PaypalSource'.
	Type string `pulumi:"type"`
}

// Phoenix server linked service.
type PhoenixLinkedService struct {
	// Specifies whether to require a CA-issued SSL certificate name to match the host name of the server when connecting over SSL. The default value is false.
	AllowHostNameCNMismatch interface{} `pulumi:"allowHostNameCNMismatch"`
	// Specifies whether to allow self-signed certificates from the server. The default value is false.
	AllowSelfSignedServerCert interface{} `pulumi:"allowSelfSignedServerCert"`
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The authentication mechanism used to connect to the Phoenix server.
	AuthenticationType string `pulumi:"authenticationType"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference `pulumi:"connectVia"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// Specifies whether the connections to the server are encrypted using SSL. The default value is false.
	EnableSsl interface{} `pulumi:"enableSsl"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential interface{} `pulumi:"encryptedCredential"`
	// The IP address or host name of the Phoenix server. (i.e. 192.168.222.160)
	Host interface{} `pulumi:"host"`
	// The partial URL corresponding to the Phoenix server. (i.e. /gateway/sandbox/phoenix/version). The default value is hbasephoenix if using WindowsAzureHDInsightService.
	HttpPath interface{} `pulumi:"httpPath"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// The password corresponding to the user name.
	Password interface{} `pulumi:"password"`
	// The TCP port that the Phoenix server uses to listen for client connections. The default value is 8765.
	Port interface{} `pulumi:"port"`
	// The full path of the .pem file containing trusted CA certificates for verifying the server when connecting over SSL. This property can only be set when using SSL on self-hosted IR. The default value is the cacerts.pem file installed with the IR.
	TrustedCertPath interface{} `pulumi:"trustedCertPath"`
	// Type of linked service.
	// Expected value is 'Phoenix'.
	Type string `pulumi:"type"`
	// Specifies whether to use a CA certificate from the system trust store or from a specified PEM file. The default value is false.
	UseSystemTrustStore interface{} `pulumi:"useSystemTrustStore"`
	// The user name used to connect to the Phoenix server.
	Username interface{} `pulumi:"username"`
}

// Phoenix server linked service.
type PhoenixLinkedServiceResponse struct {
	// Specifies whether to require a CA-issued SSL certificate name to match the host name of the server when connecting over SSL. The default value is false.
	AllowHostNameCNMismatch interface{} `pulumi:"allowHostNameCNMismatch"`
	// Specifies whether to allow self-signed certificates from the server. The default value is false.
	AllowSelfSignedServerCert interface{} `pulumi:"allowSelfSignedServerCert"`
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The authentication mechanism used to connect to the Phoenix server.
	AuthenticationType string `pulumi:"authenticationType"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReferenceResponse `pulumi:"connectVia"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// Specifies whether the connections to the server are encrypted using SSL. The default value is false.
	EnableSsl interface{} `pulumi:"enableSsl"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential interface{} `pulumi:"encryptedCredential"`
	// The IP address or host name of the Phoenix server. (i.e. 192.168.222.160)
	Host interface{} `pulumi:"host"`
	// The partial URL corresponding to the Phoenix server. (i.e. /gateway/sandbox/phoenix/version). The default value is hbasephoenix if using WindowsAzureHDInsightService.
	HttpPath interface{} `pulumi:"httpPath"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// The password corresponding to the user name.
	Password interface{} `pulumi:"password"`
	// The TCP port that the Phoenix server uses to listen for client connections. The default value is 8765.
	Port interface{} `pulumi:"port"`
	// The full path of the .pem file containing trusted CA certificates for verifying the server when connecting over SSL. This property can only be set when using SSL on self-hosted IR. The default value is the cacerts.pem file installed with the IR.
	TrustedCertPath interface{} `pulumi:"trustedCertPath"`
	// Type of linked service.
	// Expected value is 'Phoenix'.
	Type string `pulumi:"type"`
	// Specifies whether to use a CA certificate from the system trust store or from a specified PEM file. The default value is false.
	UseSystemTrustStore interface{} `pulumi:"useSystemTrustStore"`
	// The user name used to connect to the Phoenix server.
	Username interface{} `pulumi:"username"`
}

// Phoenix server dataset.
type PhoenixObjectDataset struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReference `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// The table name of the Phoenix. Type: string (or Expression with resultType string).
	Table interface{} `pulumi:"table"`
	// This property will be retired. Please consider using schema + table properties instead.
	TableName interface{} `pulumi:"tableName"`
	// Type of dataset.
	// Expected value is 'PhoenixObject'.
	Type string `pulumi:"type"`
}

// Phoenix server dataset.
type PhoenixObjectDatasetResponse struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetResponseFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceResponse `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// The table name of the Phoenix. Type: string (or Expression with resultType string).
	Table interface{} `pulumi:"table"`
	// This property will be retired. Please consider using schema + table properties instead.
	TableName interface{} `pulumi:"tableName"`
	// Type of dataset.
	// Expected value is 'PhoenixObject'.
	Type string `pulumi:"type"`
}

// A copy activity Phoenix server source.
type PhoenixSource struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns interface{} `pulumi:"additionalColumns"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// A query to retrieve data from source. Type: string (or Expression with resultType string).
	Query interface{} `pulumi:"query"`
	// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	QueryTimeout interface{} `pulumi:"queryTimeout"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// Copy source type.
	// Expected value is 'PhoenixSource'.
	Type string `pulumi:"type"`
}

// A copy activity Phoenix server source.
type PhoenixSourceResponse struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns interface{} `pulumi:"additionalColumns"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// A query to retrieve data from source. Type: string (or Expression with resultType string).
	Query interface{} `pulumi:"query"`
	// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	QueryTimeout interface{} `pulumi:"queryTimeout"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// Copy source type.
	// Expected value is 'PhoenixSource'.
	Type string `pulumi:"type"`
}

// Pipeline ElapsedTime Metric Policy.
type PipelineElapsedTimeMetricPolicy struct {
	// TimeSpan value, after which an Azure Monitoring Metric is fired.
	Duration interface{} `pulumi:"duration"`
}

// PipelineElapsedTimeMetricPolicyInput is an input type that accepts PipelineElapsedTimeMetricPolicyArgs and PipelineElapsedTimeMetricPolicyOutput values.
// You can construct a concrete instance of `PipelineElapsedTimeMetricPolicyInput` via:
//
//	PipelineElapsedTimeMetricPolicyArgs{...}
type PipelineElapsedTimeMetricPolicyInput interface {
	pulumi.Input

	ToPipelineElapsedTimeMetricPolicyOutput() PipelineElapsedTimeMetricPolicyOutput
	ToPipelineElapsedTimeMetricPolicyOutputWithContext(context.Context) PipelineElapsedTimeMetricPolicyOutput
}

// Pipeline ElapsedTime Metric Policy.
type PipelineElapsedTimeMetricPolicyArgs struct {
	// TimeSpan value, after which an Azure Monitoring Metric is fired.
	Duration pulumi.Input `pulumi:"duration"`
}

func (PipelineElapsedTimeMetricPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PipelineElapsedTimeMetricPolicy)(nil)).Elem()
}

func (i PipelineElapsedTimeMetricPolicyArgs) ToPipelineElapsedTimeMetricPolicyOutput() PipelineElapsedTimeMetricPolicyOutput {
	return i.ToPipelineElapsedTimeMetricPolicyOutputWithContext(context.Background())
}

func (i PipelineElapsedTimeMetricPolicyArgs) ToPipelineElapsedTimeMetricPolicyOutputWithContext(ctx context.Context) PipelineElapsedTimeMetricPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipelineElapsedTimeMetricPolicyOutput)
}

func (i PipelineElapsedTimeMetricPolicyArgs) ToPipelineElapsedTimeMetricPolicyPtrOutput() PipelineElapsedTimeMetricPolicyPtrOutput {
	return i.ToPipelineElapsedTimeMetricPolicyPtrOutputWithContext(context.Background())
}

func (i PipelineElapsedTimeMetricPolicyArgs) ToPipelineElapsedTimeMetricPolicyPtrOutputWithContext(ctx context.Context) PipelineElapsedTimeMetricPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipelineElapsedTimeMetricPolicyOutput).ToPipelineElapsedTimeMetricPolicyPtrOutputWithContext(ctx)
}

// PipelineElapsedTimeMetricPolicyPtrInput is an input type that accepts PipelineElapsedTimeMetricPolicyArgs, PipelineElapsedTimeMetricPolicyPtr and PipelineElapsedTimeMetricPolicyPtrOutput values.
// You can construct a concrete instance of `PipelineElapsedTimeMetricPolicyPtrInput` via:
//
//	        PipelineElapsedTimeMetricPolicyArgs{...}
//
//	or:
//
//	        nil
type PipelineElapsedTimeMetricPolicyPtrInput interface {
	pulumi.Input

	ToPipelineElapsedTimeMetricPolicyPtrOutput() PipelineElapsedTimeMetricPolicyPtrOutput
	ToPipelineElapsedTimeMetricPolicyPtrOutputWithContext(context.Context) PipelineElapsedTimeMetricPolicyPtrOutput
}

type pipelineElapsedTimeMetricPolicyPtrType PipelineElapsedTimeMetricPolicyArgs

func PipelineElapsedTimeMetricPolicyPtr(v *PipelineElapsedTimeMetricPolicyArgs) PipelineElapsedTimeMetricPolicyPtrInput {
	return (*pipelineElapsedTimeMetricPolicyPtrType)(v)
}

func (*pipelineElapsedTimeMetricPolicyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PipelineElapsedTimeMetricPolicy)(nil)).Elem()
}

func (i *pipelineElapsedTimeMetricPolicyPtrType) ToPipelineElapsedTimeMetricPolicyPtrOutput() PipelineElapsedTimeMetricPolicyPtrOutput {
	return i.ToPipelineElapsedTimeMetricPolicyPtrOutputWithContext(context.Background())
}

func (i *pipelineElapsedTimeMetricPolicyPtrType) ToPipelineElapsedTimeMetricPolicyPtrOutputWithContext(ctx context.Context) PipelineElapsedTimeMetricPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipelineElapsedTimeMetricPolicyPtrOutput)
}

// Pipeline ElapsedTime Metric Policy.
type PipelineElapsedTimeMetricPolicyOutput struct{ *pulumi.OutputState }

func (PipelineElapsedTimeMetricPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PipelineElapsedTimeMetricPolicy)(nil)).Elem()
}

func (o PipelineElapsedTimeMetricPolicyOutput) ToPipelineElapsedTimeMetricPolicyOutput() PipelineElapsedTimeMetricPolicyOutput {
	return o
}

func (o PipelineElapsedTimeMetricPolicyOutput) ToPipelineElapsedTimeMetricPolicyOutputWithContext(ctx context.Context) PipelineElapsedTimeMetricPolicyOutput {
	return o
}

func (o PipelineElapsedTimeMetricPolicyOutput) ToPipelineElapsedTimeMetricPolicyPtrOutput() PipelineElapsedTimeMetricPolicyPtrOutput {
	return o.ToPipelineElapsedTimeMetricPolicyPtrOutputWithContext(context.Background())
}

func (o PipelineElapsedTimeMetricPolicyOutput) ToPipelineElapsedTimeMetricPolicyPtrOutputWithContext(ctx context.Context) PipelineElapsedTimeMetricPolicyPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PipelineElapsedTimeMetricPolicy) *PipelineElapsedTimeMetricPolicy {
		return &v
	}).(PipelineElapsedTimeMetricPolicyPtrOutput)
}

// TimeSpan value, after which an Azure Monitoring Metric is fired.
func (o PipelineElapsedTimeMetricPolicyOutput) Duration() pulumi.AnyOutput {
	return o.ApplyT(func(v PipelineElapsedTimeMetricPolicy) interface{} { return v.Duration }).(pulumi.AnyOutput)
}

type PipelineElapsedTimeMetricPolicyPtrOutput struct{ *pulumi.OutputState }

func (PipelineElapsedTimeMetricPolicyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PipelineElapsedTimeMetricPolicy)(nil)).Elem()
}

func (o PipelineElapsedTimeMetricPolicyPtrOutput) ToPipelineElapsedTimeMetricPolicyPtrOutput() PipelineElapsedTimeMetricPolicyPtrOutput {
	return o
}

func (o PipelineElapsedTimeMetricPolicyPtrOutput) ToPipelineElapsedTimeMetricPolicyPtrOutputWithContext(ctx context.Context) PipelineElapsedTimeMetricPolicyPtrOutput {
	return o
}

func (o PipelineElapsedTimeMetricPolicyPtrOutput) Elem() PipelineElapsedTimeMetricPolicyOutput {
	return o.ApplyT(func(v *PipelineElapsedTimeMetricPolicy) PipelineElapsedTimeMetricPolicy {
		if v != nil {
			return *v
		}
		var ret PipelineElapsedTimeMetricPolicy
		return ret
	}).(PipelineElapsedTimeMetricPolicyOutput)
}

// TimeSpan value, after which an Azure Monitoring Metric is fired.
func (o PipelineElapsedTimeMetricPolicyPtrOutput) Duration() pulumi.AnyOutput {
	return o.ApplyT(func(v *PipelineElapsedTimeMetricPolicy) interface{} {
		if v == nil {
			return nil
		}
		return v.Duration
	}).(pulumi.AnyOutput)
}

// Pipeline ElapsedTime Metric Policy.
type PipelineElapsedTimeMetricPolicyResponse struct {
	// TimeSpan value, after which an Azure Monitoring Metric is fired.
	Duration interface{} `pulumi:"duration"`
}

// Pipeline ElapsedTime Metric Policy.
type PipelineElapsedTimeMetricPolicyResponseOutput struct{ *pulumi.OutputState }

func (PipelineElapsedTimeMetricPolicyResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PipelineElapsedTimeMetricPolicyResponse)(nil)).Elem()
}

func (o PipelineElapsedTimeMetricPolicyResponseOutput) ToPipelineElapsedTimeMetricPolicyResponseOutput() PipelineElapsedTimeMetricPolicyResponseOutput {
	return o
}

func (o PipelineElapsedTimeMetricPolicyResponseOutput) ToPipelineElapsedTimeMetricPolicyResponseOutputWithContext(ctx context.Context) PipelineElapsedTimeMetricPolicyResponseOutput {
	return o
}

// TimeSpan value, after which an Azure Monitoring Metric is fired.
func (o PipelineElapsedTimeMetricPolicyResponseOutput) Duration() pulumi.AnyOutput {
	return o.ApplyT(func(v PipelineElapsedTimeMetricPolicyResponse) interface{} { return v.Duration }).(pulumi.AnyOutput)
}

type PipelineElapsedTimeMetricPolicyResponsePtrOutput struct{ *pulumi.OutputState }

func (PipelineElapsedTimeMetricPolicyResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PipelineElapsedTimeMetricPolicyResponse)(nil)).Elem()
}

func (o PipelineElapsedTimeMetricPolicyResponsePtrOutput) ToPipelineElapsedTimeMetricPolicyResponsePtrOutput() PipelineElapsedTimeMetricPolicyResponsePtrOutput {
	return o
}

func (o PipelineElapsedTimeMetricPolicyResponsePtrOutput) ToPipelineElapsedTimeMetricPolicyResponsePtrOutputWithContext(ctx context.Context) PipelineElapsedTimeMetricPolicyResponsePtrOutput {
	return o
}

func (o PipelineElapsedTimeMetricPolicyResponsePtrOutput) Elem() PipelineElapsedTimeMetricPolicyResponseOutput {
	return o.ApplyT(func(v *PipelineElapsedTimeMetricPolicyResponse) PipelineElapsedTimeMetricPolicyResponse {
		if v != nil {
			return *v
		}
		var ret PipelineElapsedTimeMetricPolicyResponse
		return ret
	}).(PipelineElapsedTimeMetricPolicyResponseOutput)
}

// TimeSpan value, after which an Azure Monitoring Metric is fired.
func (o PipelineElapsedTimeMetricPolicyResponsePtrOutput) Duration() pulumi.AnyOutput {
	return o.ApplyT(func(v *PipelineElapsedTimeMetricPolicyResponse) interface{} {
		if v == nil {
			return nil
		}
		return v.Duration
	}).(pulumi.AnyOutput)
}

// The folder that this Pipeline is in. If not specified, Pipeline will appear at the root level.
type PipelineFolder struct {
	// The name of the folder that this Pipeline is in.
	Name *string `pulumi:"name"`
}

// PipelineFolderInput is an input type that accepts PipelineFolderArgs and PipelineFolderOutput values.
// You can construct a concrete instance of `PipelineFolderInput` via:
//
//	PipelineFolderArgs{...}
type PipelineFolderInput interface {
	pulumi.Input

	ToPipelineFolderOutput() PipelineFolderOutput
	ToPipelineFolderOutputWithContext(context.Context) PipelineFolderOutput
}

// The folder that this Pipeline is in. If not specified, Pipeline will appear at the root level.
type PipelineFolderArgs struct {
	// The name of the folder that this Pipeline is in.
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (PipelineFolderArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PipelineFolder)(nil)).Elem()
}

func (i PipelineFolderArgs) ToPipelineFolderOutput() PipelineFolderOutput {
	return i.ToPipelineFolderOutputWithContext(context.Background())
}

func (i PipelineFolderArgs) ToPipelineFolderOutputWithContext(ctx context.Context) PipelineFolderOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipelineFolderOutput)
}

func (i PipelineFolderArgs) ToPipelineFolderPtrOutput() PipelineFolderPtrOutput {
	return i.ToPipelineFolderPtrOutputWithContext(context.Background())
}

func (i PipelineFolderArgs) ToPipelineFolderPtrOutputWithContext(ctx context.Context) PipelineFolderPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipelineFolderOutput).ToPipelineFolderPtrOutputWithContext(ctx)
}

// PipelineFolderPtrInput is an input type that accepts PipelineFolderArgs, PipelineFolderPtr and PipelineFolderPtrOutput values.
// You can construct a concrete instance of `PipelineFolderPtrInput` via:
//
//	        PipelineFolderArgs{...}
//
//	or:
//
//	        nil
type PipelineFolderPtrInput interface {
	pulumi.Input

	ToPipelineFolderPtrOutput() PipelineFolderPtrOutput
	ToPipelineFolderPtrOutputWithContext(context.Context) PipelineFolderPtrOutput
}

type pipelineFolderPtrType PipelineFolderArgs

func PipelineFolderPtr(v *PipelineFolderArgs) PipelineFolderPtrInput {
	return (*pipelineFolderPtrType)(v)
}

func (*pipelineFolderPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PipelineFolder)(nil)).Elem()
}

func (i *pipelineFolderPtrType) ToPipelineFolderPtrOutput() PipelineFolderPtrOutput {
	return i.ToPipelineFolderPtrOutputWithContext(context.Background())
}

func (i *pipelineFolderPtrType) ToPipelineFolderPtrOutputWithContext(ctx context.Context) PipelineFolderPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipelineFolderPtrOutput)
}

// The folder that this Pipeline is in. If not specified, Pipeline will appear at the root level.
type PipelineFolderOutput struct{ *pulumi.OutputState }

func (PipelineFolderOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PipelineFolder)(nil)).Elem()
}

func (o PipelineFolderOutput) ToPipelineFolderOutput() PipelineFolderOutput {
	return o
}

func (o PipelineFolderOutput) ToPipelineFolderOutputWithContext(ctx context.Context) PipelineFolderOutput {
	return o
}

func (o PipelineFolderOutput) ToPipelineFolderPtrOutput() PipelineFolderPtrOutput {
	return o.ToPipelineFolderPtrOutputWithContext(context.Background())
}

func (o PipelineFolderOutput) ToPipelineFolderPtrOutputWithContext(ctx context.Context) PipelineFolderPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PipelineFolder) *PipelineFolder {
		return &v
	}).(PipelineFolderPtrOutput)
}

// The name of the folder that this Pipeline is in.
func (o PipelineFolderOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PipelineFolder) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type PipelineFolderPtrOutput struct{ *pulumi.OutputState }

func (PipelineFolderPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PipelineFolder)(nil)).Elem()
}

func (o PipelineFolderPtrOutput) ToPipelineFolderPtrOutput() PipelineFolderPtrOutput {
	return o
}

func (o PipelineFolderPtrOutput) ToPipelineFolderPtrOutputWithContext(ctx context.Context) PipelineFolderPtrOutput {
	return o
}

func (o PipelineFolderPtrOutput) Elem() PipelineFolderOutput {
	return o.ApplyT(func(v *PipelineFolder) PipelineFolder {
		if v != nil {
			return *v
		}
		var ret PipelineFolder
		return ret
	}).(PipelineFolderOutput)
}

// The name of the folder that this Pipeline is in.
func (o PipelineFolderPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PipelineFolder) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// Pipeline Policy.
type PipelinePolicy struct {
	// Pipeline ElapsedTime Metric Policy.
	ElapsedTimeMetric *PipelineElapsedTimeMetricPolicy `pulumi:"elapsedTimeMetric"`
}

// PipelinePolicyInput is an input type that accepts PipelinePolicyArgs and PipelinePolicyOutput values.
// You can construct a concrete instance of `PipelinePolicyInput` via:
//
//	PipelinePolicyArgs{...}
type PipelinePolicyInput interface {
	pulumi.Input

	ToPipelinePolicyOutput() PipelinePolicyOutput
	ToPipelinePolicyOutputWithContext(context.Context) PipelinePolicyOutput
}

// Pipeline Policy.
type PipelinePolicyArgs struct {
	// Pipeline ElapsedTime Metric Policy.
	ElapsedTimeMetric PipelineElapsedTimeMetricPolicyPtrInput `pulumi:"elapsedTimeMetric"`
}

func (PipelinePolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PipelinePolicy)(nil)).Elem()
}

func (i PipelinePolicyArgs) ToPipelinePolicyOutput() PipelinePolicyOutput {
	return i.ToPipelinePolicyOutputWithContext(context.Background())
}

func (i PipelinePolicyArgs) ToPipelinePolicyOutputWithContext(ctx context.Context) PipelinePolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipelinePolicyOutput)
}

func (i PipelinePolicyArgs) ToPipelinePolicyPtrOutput() PipelinePolicyPtrOutput {
	return i.ToPipelinePolicyPtrOutputWithContext(context.Background())
}

func (i PipelinePolicyArgs) ToPipelinePolicyPtrOutputWithContext(ctx context.Context) PipelinePolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipelinePolicyOutput).ToPipelinePolicyPtrOutputWithContext(ctx)
}

// PipelinePolicyPtrInput is an input type that accepts PipelinePolicyArgs, PipelinePolicyPtr and PipelinePolicyPtrOutput values.
// You can construct a concrete instance of `PipelinePolicyPtrInput` via:
//
//	        PipelinePolicyArgs{...}
//
//	or:
//
//	        nil
type PipelinePolicyPtrInput interface {
	pulumi.Input

	ToPipelinePolicyPtrOutput() PipelinePolicyPtrOutput
	ToPipelinePolicyPtrOutputWithContext(context.Context) PipelinePolicyPtrOutput
}

type pipelinePolicyPtrType PipelinePolicyArgs

func PipelinePolicyPtr(v *PipelinePolicyArgs) PipelinePolicyPtrInput {
	return (*pipelinePolicyPtrType)(v)
}

func (*pipelinePolicyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PipelinePolicy)(nil)).Elem()
}

func (i *pipelinePolicyPtrType) ToPipelinePolicyPtrOutput() PipelinePolicyPtrOutput {
	return i.ToPipelinePolicyPtrOutputWithContext(context.Background())
}

func (i *pipelinePolicyPtrType) ToPipelinePolicyPtrOutputWithContext(ctx context.Context) PipelinePolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipelinePolicyPtrOutput)
}

// Pipeline Policy.
type PipelinePolicyOutput struct{ *pulumi.OutputState }

func (PipelinePolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PipelinePolicy)(nil)).Elem()
}

func (o PipelinePolicyOutput) ToPipelinePolicyOutput() PipelinePolicyOutput {
	return o
}

func (o PipelinePolicyOutput) ToPipelinePolicyOutputWithContext(ctx context.Context) PipelinePolicyOutput {
	return o
}

func (o PipelinePolicyOutput) ToPipelinePolicyPtrOutput() PipelinePolicyPtrOutput {
	return o.ToPipelinePolicyPtrOutputWithContext(context.Background())
}

func (o PipelinePolicyOutput) ToPipelinePolicyPtrOutputWithContext(ctx context.Context) PipelinePolicyPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PipelinePolicy) *PipelinePolicy {
		return &v
	}).(PipelinePolicyPtrOutput)
}

// Pipeline ElapsedTime Metric Policy.
func (o PipelinePolicyOutput) ElapsedTimeMetric() PipelineElapsedTimeMetricPolicyPtrOutput {
	return o.ApplyT(func(v PipelinePolicy) *PipelineElapsedTimeMetricPolicy { return v.ElapsedTimeMetric }).(PipelineElapsedTimeMetricPolicyPtrOutput)
}

type PipelinePolicyPtrOutput struct{ *pulumi.OutputState }

func (PipelinePolicyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PipelinePolicy)(nil)).Elem()
}

func (o PipelinePolicyPtrOutput) ToPipelinePolicyPtrOutput() PipelinePolicyPtrOutput {
	return o
}

func (o PipelinePolicyPtrOutput) ToPipelinePolicyPtrOutputWithContext(ctx context.Context) PipelinePolicyPtrOutput {
	return o
}

func (o PipelinePolicyPtrOutput) Elem() PipelinePolicyOutput {
	return o.ApplyT(func(v *PipelinePolicy) PipelinePolicy {
		if v != nil {
			return *v
		}
		var ret PipelinePolicy
		return ret
	}).(PipelinePolicyOutput)
}

// Pipeline ElapsedTime Metric Policy.
func (o PipelinePolicyPtrOutput) ElapsedTimeMetric() PipelineElapsedTimeMetricPolicyPtrOutput {
	return o.ApplyT(func(v *PipelinePolicy) *PipelineElapsedTimeMetricPolicy {
		if v == nil {
			return nil
		}
		return v.ElapsedTimeMetric
	}).(PipelineElapsedTimeMetricPolicyPtrOutput)
}

// Pipeline Policy.
type PipelinePolicyResponse struct {
	// Pipeline ElapsedTime Metric Policy.
	ElapsedTimeMetric *PipelineElapsedTimeMetricPolicyResponse `pulumi:"elapsedTimeMetric"`
}

// Pipeline Policy.
type PipelinePolicyResponseOutput struct{ *pulumi.OutputState }

func (PipelinePolicyResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PipelinePolicyResponse)(nil)).Elem()
}

func (o PipelinePolicyResponseOutput) ToPipelinePolicyResponseOutput() PipelinePolicyResponseOutput {
	return o
}

func (o PipelinePolicyResponseOutput) ToPipelinePolicyResponseOutputWithContext(ctx context.Context) PipelinePolicyResponseOutput {
	return o
}

// Pipeline ElapsedTime Metric Policy.
func (o PipelinePolicyResponseOutput) ElapsedTimeMetric() PipelineElapsedTimeMetricPolicyResponsePtrOutput {
	return o.ApplyT(func(v PipelinePolicyResponse) *PipelineElapsedTimeMetricPolicyResponse { return v.ElapsedTimeMetric }).(PipelineElapsedTimeMetricPolicyResponsePtrOutput)
}

type PipelinePolicyResponsePtrOutput struct{ *pulumi.OutputState }

func (PipelinePolicyResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PipelinePolicyResponse)(nil)).Elem()
}

func (o PipelinePolicyResponsePtrOutput) ToPipelinePolicyResponsePtrOutput() PipelinePolicyResponsePtrOutput {
	return o
}

func (o PipelinePolicyResponsePtrOutput) ToPipelinePolicyResponsePtrOutputWithContext(ctx context.Context) PipelinePolicyResponsePtrOutput {
	return o
}

func (o PipelinePolicyResponsePtrOutput) Elem() PipelinePolicyResponseOutput {
	return o.ApplyT(func(v *PipelinePolicyResponse) PipelinePolicyResponse {
		if v != nil {
			return *v
		}
		var ret PipelinePolicyResponse
		return ret
	}).(PipelinePolicyResponseOutput)
}

// Pipeline ElapsedTime Metric Policy.
func (o PipelinePolicyResponsePtrOutput) ElapsedTimeMetric() PipelineElapsedTimeMetricPolicyResponsePtrOutput {
	return o.ApplyT(func(v *PipelinePolicyResponse) *PipelineElapsedTimeMetricPolicyResponse {
		if v == nil {
			return nil
		}
		return v.ElapsedTimeMetric
	}).(PipelineElapsedTimeMetricPolicyResponsePtrOutput)
}

// Pipeline reference type.
type PipelineReference struct {
	// Reference name.
	Name *string `pulumi:"name"`
	// Reference pipeline name.
	ReferenceName string `pulumi:"referenceName"`
	// Pipeline reference type.
	Type string `pulumi:"type"`
}

// Pipeline reference type.
type PipelineReferenceResponse struct {
	// Reference name.
	Name *string `pulumi:"name"`
	// Reference pipeline name.
	ReferenceName string `pulumi:"referenceName"`
	// Pipeline reference type.
	Type string `pulumi:"type"`
}

// The folder that this Pipeline is in. If not specified, Pipeline will appear at the root level.
type PipelineResponseFolder struct {
	// The name of the folder that this Pipeline is in.
	Name *string `pulumi:"name"`
}

// The folder that this Pipeline is in. If not specified, Pipeline will appear at the root level.
type PipelineResponseFolderOutput struct{ *pulumi.OutputState }

func (PipelineResponseFolderOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PipelineResponseFolder)(nil)).Elem()
}

func (o PipelineResponseFolderOutput) ToPipelineResponseFolderOutput() PipelineResponseFolderOutput {
	return o
}

func (o PipelineResponseFolderOutput) ToPipelineResponseFolderOutputWithContext(ctx context.Context) PipelineResponseFolderOutput {
	return o
}

// The name of the folder that this Pipeline is in.
func (o PipelineResponseFolderOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PipelineResponseFolder) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type PipelineResponseFolderPtrOutput struct{ *pulumi.OutputState }

func (PipelineResponseFolderPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PipelineResponseFolder)(nil)).Elem()
}

func (o PipelineResponseFolderPtrOutput) ToPipelineResponseFolderPtrOutput() PipelineResponseFolderPtrOutput {
	return o
}

func (o PipelineResponseFolderPtrOutput) ToPipelineResponseFolderPtrOutputWithContext(ctx context.Context) PipelineResponseFolderPtrOutput {
	return o
}

func (o PipelineResponseFolderPtrOutput) Elem() PipelineResponseFolderOutput {
	return o.ApplyT(func(v *PipelineResponseFolder) PipelineResponseFolder {
		if v != nil {
			return *v
		}
		var ret PipelineResponseFolder
		return ret
	}).(PipelineResponseFolderOutput)
}

// The name of the folder that this Pipeline is in.
func (o PipelineResponseFolderPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PipelineResponseFolder) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// PolyBase settings.
type PolybaseSettings struct {
	// Determines the number of rows to attempt to retrieve before the PolyBase recalculates the percentage of rejected rows. Type: integer (or Expression with resultType integer), minimum: 0.
	RejectSampleValue interface{} `pulumi:"rejectSampleValue"`
	// Reject type.
	RejectType *string `pulumi:"rejectType"`
	// Specifies the value or the percentage of rows that can be rejected before the query fails. Type: number (or Expression with resultType number), minimum: 0.
	RejectValue interface{} `pulumi:"rejectValue"`
	// Specifies how to handle missing values in delimited text files when PolyBase retrieves data from the text file. Type: boolean (or Expression with resultType boolean).
	UseTypeDefault interface{} `pulumi:"useTypeDefault"`
}

// PolyBase settings.
type PolybaseSettingsResponse struct {
	// Determines the number of rows to attempt to retrieve before the PolyBase recalculates the percentage of rejected rows. Type: integer (or Expression with resultType integer), minimum: 0.
	RejectSampleValue interface{} `pulumi:"rejectSampleValue"`
	// Reject type.
	RejectType *string `pulumi:"rejectType"`
	// Specifies the value or the percentage of rows that can be rejected before the query fails. Type: number (or Expression with resultType number), minimum: 0.
	RejectValue interface{} `pulumi:"rejectValue"`
	// Specifies how to handle missing values in delimited text files when PolyBase retrieves data from the text file. Type: boolean (or Expression with resultType boolean).
	UseTypeDefault interface{} `pulumi:"useTypeDefault"`
}

// Linked service for PostgreSQL data source.
type PostgreSqlLinkedService struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference `pulumi:"connectVia"`
	// The connection string.
	ConnectionString interface{} `pulumi:"connectionString"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential interface{} `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// The Azure key vault secret reference of password in connection string.
	Password *AzureKeyVaultSecretReference `pulumi:"password"`
	// Type of linked service.
	// Expected value is 'PostgreSql'.
	Type string `pulumi:"type"`
}

// Linked service for PostgreSQL data source.
type PostgreSqlLinkedServiceResponse struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReferenceResponse `pulumi:"connectVia"`
	// The connection string.
	ConnectionString interface{} `pulumi:"connectionString"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential interface{} `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// The Azure key vault secret reference of password in connection string.
	Password *AzureKeyVaultSecretReferenceResponse `pulumi:"password"`
	// Type of linked service.
	// Expected value is 'PostgreSql'.
	Type string `pulumi:"type"`
}

// A copy activity source for PostgreSQL databases.
type PostgreSqlSource struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns interface{} `pulumi:"additionalColumns"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// Database query. Type: string (or Expression with resultType string).
	Query interface{} `pulumi:"query"`
	// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	QueryTimeout interface{} `pulumi:"queryTimeout"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// Copy source type.
	// Expected value is 'PostgreSqlSource'.
	Type string `pulumi:"type"`
}

// A copy activity source for PostgreSQL databases.
type PostgreSqlSourceResponse struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns interface{} `pulumi:"additionalColumns"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// Database query. Type: string (or Expression with resultType string).
	Query interface{} `pulumi:"query"`
	// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	QueryTimeout interface{} `pulumi:"queryTimeout"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// Copy source type.
	// Expected value is 'PostgreSqlSource'.
	Type string `pulumi:"type"`
}

// The PostgreSQL table dataset.
type PostgreSqlTableDataset struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReference `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// The PostgreSQL table name. Type: string (or Expression with resultType string).
	Table interface{} `pulumi:"table"`
	// This property will be retired. Please consider using schema + table properties instead.
	TableName interface{} `pulumi:"tableName"`
	// Type of dataset.
	// Expected value is 'PostgreSqlTable'.
	Type string `pulumi:"type"`
}

// The PostgreSQL table dataset.
type PostgreSqlTableDatasetResponse struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetResponseFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceResponse `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// The PostgreSQL table name. Type: string (or Expression with resultType string).
	Table interface{} `pulumi:"table"`
	// This property will be retired. Please consider using schema + table properties instead.
	TableName interface{} `pulumi:"tableName"`
	// Type of dataset.
	// Expected value is 'PostgreSqlTable'.
	Type string `pulumi:"type"`
}

// Power query sink.
type PowerQuerySink struct {
	// Dataset reference.
	Dataset *DatasetReference `pulumi:"dataset"`
	// Transformation description.
	Description *string `pulumi:"description"`
	// Flowlet Reference
	Flowlet *DataFlowReference `pulumi:"flowlet"`
	// Linked service reference.
	LinkedService *LinkedServiceReference `pulumi:"linkedService"`
	// Transformation name.
	Name string `pulumi:"name"`
	// Rejected data linked service reference.
	RejectedDataLinkedService *LinkedServiceReference `pulumi:"rejectedDataLinkedService"`
	// Schema linked service reference.
	SchemaLinkedService *LinkedServiceReference `pulumi:"schemaLinkedService"`
	// sink script.
	Script *string `pulumi:"script"`
}

// Map Power Query mashup query to sink dataset(s).
type PowerQuerySinkMapping struct {
	// List of sinks mapped to Power Query mashup query.
	DataflowSinks []PowerQuerySink `pulumi:"dataflowSinks"`
	// Name of the query in Power Query mashup document.
	QueryName *string `pulumi:"queryName"`
}

// Map Power Query mashup query to sink dataset(s).
type PowerQuerySinkMappingResponse struct {
	// List of sinks mapped to Power Query mashup query.
	DataflowSinks []PowerQuerySinkResponse `pulumi:"dataflowSinks"`
	// Name of the query in Power Query mashup document.
	QueryName *string `pulumi:"queryName"`
}

// Power query sink.
type PowerQuerySinkResponse struct {
	// Dataset reference.
	Dataset *DatasetReferenceResponse `pulumi:"dataset"`
	// Transformation description.
	Description *string `pulumi:"description"`
	// Flowlet Reference
	Flowlet *DataFlowReferenceResponse `pulumi:"flowlet"`
	// Linked service reference.
	LinkedService *LinkedServiceReferenceResponse `pulumi:"linkedService"`
	// Transformation name.
	Name string `pulumi:"name"`
	// Rejected data linked service reference.
	RejectedDataLinkedService *LinkedServiceReferenceResponse `pulumi:"rejectedDataLinkedService"`
	// Schema linked service reference.
	SchemaLinkedService *LinkedServiceReferenceResponse `pulumi:"schemaLinkedService"`
	// sink script.
	Script *string `pulumi:"script"`
}

// Power query source.
type PowerQuerySource struct {
	// Dataset reference.
	Dataset *DatasetReference `pulumi:"dataset"`
	// Transformation description.
	Description *string `pulumi:"description"`
	// Flowlet Reference
	Flowlet *DataFlowReference `pulumi:"flowlet"`
	// Linked service reference.
	LinkedService *LinkedServiceReference `pulumi:"linkedService"`
	// Transformation name.
	Name string `pulumi:"name"`
	// Schema linked service reference.
	SchemaLinkedService *LinkedServiceReference `pulumi:"schemaLinkedService"`
	// source script.
	Script *string `pulumi:"script"`
}

// Power query source.
type PowerQuerySourceResponse struct {
	// Dataset reference.
	Dataset *DatasetReferenceResponse `pulumi:"dataset"`
	// Transformation description.
	Description *string `pulumi:"description"`
	// Flowlet Reference
	Flowlet *DataFlowReferenceResponse `pulumi:"flowlet"`
	// Linked service reference.
	LinkedService *LinkedServiceReferenceResponse `pulumi:"linkedService"`
	// Transformation name.
	Name string `pulumi:"name"`
	// Schema linked service reference.
	SchemaLinkedService *LinkedServiceReferenceResponse `pulumi:"schemaLinkedService"`
	// source script.
	Script *string `pulumi:"script"`
}

// Presto server linked service.
type PrestoLinkedService struct {
	// Specifies whether to require a CA-issued SSL certificate name to match the host name of the server when connecting over SSL. The default value is false.
	AllowHostNameCNMismatch interface{} `pulumi:"allowHostNameCNMismatch"`
	// Specifies whether to allow self-signed certificates from the server. The default value is false.
	AllowSelfSignedServerCert interface{} `pulumi:"allowSelfSignedServerCert"`
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The authentication mechanism used to connect to the Presto server.
	AuthenticationType string `pulumi:"authenticationType"`
	// The catalog context for all request against the server.
	Catalog interface{} `pulumi:"catalog"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference `pulumi:"connectVia"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// Specifies whether the connections to the server are encrypted using SSL. The default value is false.
	EnableSsl interface{} `pulumi:"enableSsl"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential interface{} `pulumi:"encryptedCredential"`
	// The IP address or host name of the Presto server. (i.e. 192.168.222.160)
	Host interface{} `pulumi:"host"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// The password corresponding to the user name.
	Password interface{} `pulumi:"password"`
	// The TCP port that the Presto server uses to listen for client connections. The default value is 8080.
	Port interface{} `pulumi:"port"`
	// The version of the Presto server. (i.e. 0.148-t)
	ServerVersion interface{} `pulumi:"serverVersion"`
	// The local time zone used by the connection. Valid values for this option are specified in the IANA Time Zone Database. The default value is the system time zone.
	TimeZoneID interface{} `pulumi:"timeZoneID"`
	// The full path of the .pem file containing trusted CA certificates for verifying the server when connecting over SSL. This property can only be set when using SSL on self-hosted IR. The default value is the cacerts.pem file installed with the IR.
	TrustedCertPath interface{} `pulumi:"trustedCertPath"`
	// Type of linked service.
	// Expected value is 'Presto'.
	Type string `pulumi:"type"`
	// Specifies whether to use a CA certificate from the system trust store or from a specified PEM file. The default value is false.
	UseSystemTrustStore interface{} `pulumi:"useSystemTrustStore"`
	// The user name used to connect to the Presto server.
	Username interface{} `pulumi:"username"`
}

// Presto server linked service.
type PrestoLinkedServiceResponse struct {
	// Specifies whether to require a CA-issued SSL certificate name to match the host name of the server when connecting over SSL. The default value is false.
	AllowHostNameCNMismatch interface{} `pulumi:"allowHostNameCNMismatch"`
	// Specifies whether to allow self-signed certificates from the server. The default value is false.
	AllowSelfSignedServerCert interface{} `pulumi:"allowSelfSignedServerCert"`
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The authentication mechanism used to connect to the Presto server.
	AuthenticationType string `pulumi:"authenticationType"`
	// The catalog context for all request against the server.
	Catalog interface{} `pulumi:"catalog"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReferenceResponse `pulumi:"connectVia"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// Specifies whether the connections to the server are encrypted using SSL. The default value is false.
	EnableSsl interface{} `pulumi:"enableSsl"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential interface{} `pulumi:"encryptedCredential"`
	// The IP address or host name of the Presto server. (i.e. 192.168.222.160)
	Host interface{} `pulumi:"host"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// The password corresponding to the user name.
	Password interface{} `pulumi:"password"`
	// The TCP port that the Presto server uses to listen for client connections. The default value is 8080.
	Port interface{} `pulumi:"port"`
	// The version of the Presto server. (i.e. 0.148-t)
	ServerVersion interface{} `pulumi:"serverVersion"`
	// The local time zone used by the connection. Valid values for this option are specified in the IANA Time Zone Database. The default value is the system time zone.
	TimeZoneID interface{} `pulumi:"timeZoneID"`
	// The full path of the .pem file containing trusted CA certificates for verifying the server when connecting over SSL. This property can only be set when using SSL on self-hosted IR. The default value is the cacerts.pem file installed with the IR.
	TrustedCertPath interface{} `pulumi:"trustedCertPath"`
	// Type of linked service.
	// Expected value is 'Presto'.
	Type string `pulumi:"type"`
	// Specifies whether to use a CA certificate from the system trust store or from a specified PEM file. The default value is false.
	UseSystemTrustStore interface{} `pulumi:"useSystemTrustStore"`
	// The user name used to connect to the Presto server.
	Username interface{} `pulumi:"username"`
}

// Presto server dataset.
type PrestoObjectDataset struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReference `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// The table name of the Presto. Type: string (or Expression with resultType string).
	Table interface{} `pulumi:"table"`
	// This property will be retired. Please consider using schema + table properties instead.
	TableName interface{} `pulumi:"tableName"`
	// Type of dataset.
	// Expected value is 'PrestoObject'.
	Type string `pulumi:"type"`
}

// Presto server dataset.
type PrestoObjectDatasetResponse struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetResponseFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceResponse `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// The table name of the Presto. Type: string (or Expression with resultType string).
	Table interface{} `pulumi:"table"`
	// This property will be retired. Please consider using schema + table properties instead.
	TableName interface{} `pulumi:"tableName"`
	// Type of dataset.
	// Expected value is 'PrestoObject'.
	Type string `pulumi:"type"`
}

// A copy activity Presto server source.
type PrestoSource struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns interface{} `pulumi:"additionalColumns"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// A query to retrieve data from source. Type: string (or Expression with resultType string).
	Query interface{} `pulumi:"query"`
	// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	QueryTimeout interface{} `pulumi:"queryTimeout"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// Copy source type.
	// Expected value is 'PrestoSource'.
	Type string `pulumi:"type"`
}

// A copy activity Presto server source.
type PrestoSourceResponse struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns interface{} `pulumi:"additionalColumns"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// A query to retrieve data from source. Type: string (or Expression with resultType string).
	Query interface{} `pulumi:"query"`
	// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	QueryTimeout interface{} `pulumi:"queryTimeout"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// Copy source type.
	// Expected value is 'PrestoSource'.
	Type string `pulumi:"type"`
}

// Private endpoint which a connection belongs to.
type PrivateEndpoint struct {
	// The resource Id for private endpoint
	Id *string `pulumi:"id"`
}

// PrivateEndpointInput is an input type that accepts PrivateEndpointArgs and PrivateEndpointOutput values.
// You can construct a concrete instance of `PrivateEndpointInput` via:
//
//	PrivateEndpointArgs{...}
type PrivateEndpointInput interface {
	pulumi.Input

	ToPrivateEndpointOutput() PrivateEndpointOutput
	ToPrivateEndpointOutputWithContext(context.Context) PrivateEndpointOutput
}

// Private endpoint which a connection belongs to.
type PrivateEndpointArgs struct {
	// The resource Id for private endpoint
	Id pulumi.StringPtrInput `pulumi:"id"`
}

func (PrivateEndpointArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PrivateEndpoint)(nil)).Elem()
}

func (i PrivateEndpointArgs) ToPrivateEndpointOutput() PrivateEndpointOutput {
	return i.ToPrivateEndpointOutputWithContext(context.Background())
}

func (i PrivateEndpointArgs) ToPrivateEndpointOutputWithContext(ctx context.Context) PrivateEndpointOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PrivateEndpointOutput)
}

func (i PrivateEndpointArgs) ToPrivateEndpointPtrOutput() PrivateEndpointPtrOutput {
	return i.ToPrivateEndpointPtrOutputWithContext(context.Background())
}

func (i PrivateEndpointArgs) ToPrivateEndpointPtrOutputWithContext(ctx context.Context) PrivateEndpointPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PrivateEndpointOutput).ToPrivateEndpointPtrOutputWithContext(ctx)
}

// PrivateEndpointPtrInput is an input type that accepts PrivateEndpointArgs, PrivateEndpointPtr and PrivateEndpointPtrOutput values.
// You can construct a concrete instance of `PrivateEndpointPtrInput` via:
//
//	        PrivateEndpointArgs{...}
//
//	or:
//
//	        nil
type PrivateEndpointPtrInput interface {
	pulumi.Input

	ToPrivateEndpointPtrOutput() PrivateEndpointPtrOutput
	ToPrivateEndpointPtrOutputWithContext(context.Context) PrivateEndpointPtrOutput
}

type privateEndpointPtrType PrivateEndpointArgs

func PrivateEndpointPtr(v *PrivateEndpointArgs) PrivateEndpointPtrInput {
	return (*privateEndpointPtrType)(v)
}

func (*privateEndpointPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PrivateEndpoint)(nil)).Elem()
}

func (i *privateEndpointPtrType) ToPrivateEndpointPtrOutput() PrivateEndpointPtrOutput {
	return i.ToPrivateEndpointPtrOutputWithContext(context.Background())
}

func (i *privateEndpointPtrType) ToPrivateEndpointPtrOutputWithContext(ctx context.Context) PrivateEndpointPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PrivateEndpointPtrOutput)
}

// Private endpoint which a connection belongs to.
type PrivateEndpointOutput struct{ *pulumi.OutputState }

func (PrivateEndpointOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PrivateEndpoint)(nil)).Elem()
}

func (o PrivateEndpointOutput) ToPrivateEndpointOutput() PrivateEndpointOutput {
	return o
}

func (o PrivateEndpointOutput) ToPrivateEndpointOutputWithContext(ctx context.Context) PrivateEndpointOutput {
	return o
}

func (o PrivateEndpointOutput) ToPrivateEndpointPtrOutput() PrivateEndpointPtrOutput {
	return o.ToPrivateEndpointPtrOutputWithContext(context.Background())
}

func (o PrivateEndpointOutput) ToPrivateEndpointPtrOutputWithContext(ctx context.Context) PrivateEndpointPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PrivateEndpoint) *PrivateEndpoint {
		return &v
	}).(PrivateEndpointPtrOutput)
}

// The resource Id for private endpoint
func (o PrivateEndpointOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PrivateEndpoint) *string { return v.Id }).(pulumi.StringPtrOutput)
}

type PrivateEndpointPtrOutput struct{ *pulumi.OutputState }

func (PrivateEndpointPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PrivateEndpoint)(nil)).Elem()
}

func (o PrivateEndpointPtrOutput) ToPrivateEndpointPtrOutput() PrivateEndpointPtrOutput {
	return o
}

func (o PrivateEndpointPtrOutput) ToPrivateEndpointPtrOutputWithContext(ctx context.Context) PrivateEndpointPtrOutput {
	return o
}

func (o PrivateEndpointPtrOutput) Elem() PrivateEndpointOutput {
	return o.ApplyT(func(v *PrivateEndpoint) PrivateEndpoint {
		if v != nil {
			return *v
		}
		var ret PrivateEndpoint
		return ret
	}).(PrivateEndpointOutput)
}

// The resource Id for private endpoint
func (o PrivateEndpointPtrOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PrivateEndpoint) *string {
		if v == nil {
			return nil
		}
		return v.Id
	}).(pulumi.StringPtrOutput)
}

// A request to approve or reject a private endpoint connection
type PrivateLinkConnectionApprovalRequest struct {
	// The resource of private endpoint.
	PrivateEndpoint *PrivateEndpoint `pulumi:"privateEndpoint"`
	// The state of a private link connection
	PrivateLinkServiceConnectionState *PrivateLinkConnectionState `pulumi:"privateLinkServiceConnectionState"`
}

// PrivateLinkConnectionApprovalRequestInput is an input type that accepts PrivateLinkConnectionApprovalRequestArgs and PrivateLinkConnectionApprovalRequestOutput values.
// You can construct a concrete instance of `PrivateLinkConnectionApprovalRequestInput` via:
//
//	PrivateLinkConnectionApprovalRequestArgs{...}
type PrivateLinkConnectionApprovalRequestInput interface {
	pulumi.Input

	ToPrivateLinkConnectionApprovalRequestOutput() PrivateLinkConnectionApprovalRequestOutput
	ToPrivateLinkConnectionApprovalRequestOutputWithContext(context.Context) PrivateLinkConnectionApprovalRequestOutput
}

// A request to approve or reject a private endpoint connection
type PrivateLinkConnectionApprovalRequestArgs struct {
	// The resource of private endpoint.
	PrivateEndpoint PrivateEndpointPtrInput `pulumi:"privateEndpoint"`
	// The state of a private link connection
	PrivateLinkServiceConnectionState PrivateLinkConnectionStatePtrInput `pulumi:"privateLinkServiceConnectionState"`
}

func (PrivateLinkConnectionApprovalRequestArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PrivateLinkConnectionApprovalRequest)(nil)).Elem()
}

func (i PrivateLinkConnectionApprovalRequestArgs) ToPrivateLinkConnectionApprovalRequestOutput() PrivateLinkConnectionApprovalRequestOutput {
	return i.ToPrivateLinkConnectionApprovalRequestOutputWithContext(context.Background())
}

func (i PrivateLinkConnectionApprovalRequestArgs) ToPrivateLinkConnectionApprovalRequestOutputWithContext(ctx context.Context) PrivateLinkConnectionApprovalRequestOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PrivateLinkConnectionApprovalRequestOutput)
}

func (i PrivateLinkConnectionApprovalRequestArgs) ToPrivateLinkConnectionApprovalRequestPtrOutput() PrivateLinkConnectionApprovalRequestPtrOutput {
	return i.ToPrivateLinkConnectionApprovalRequestPtrOutputWithContext(context.Background())
}

func (i PrivateLinkConnectionApprovalRequestArgs) ToPrivateLinkConnectionApprovalRequestPtrOutputWithContext(ctx context.Context) PrivateLinkConnectionApprovalRequestPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PrivateLinkConnectionApprovalRequestOutput).ToPrivateLinkConnectionApprovalRequestPtrOutputWithContext(ctx)
}

// PrivateLinkConnectionApprovalRequestPtrInput is an input type that accepts PrivateLinkConnectionApprovalRequestArgs, PrivateLinkConnectionApprovalRequestPtr and PrivateLinkConnectionApprovalRequestPtrOutput values.
// You can construct a concrete instance of `PrivateLinkConnectionApprovalRequestPtrInput` via:
//
//	        PrivateLinkConnectionApprovalRequestArgs{...}
//
//	or:
//
//	        nil
type PrivateLinkConnectionApprovalRequestPtrInput interface {
	pulumi.Input

	ToPrivateLinkConnectionApprovalRequestPtrOutput() PrivateLinkConnectionApprovalRequestPtrOutput
	ToPrivateLinkConnectionApprovalRequestPtrOutputWithContext(context.Context) PrivateLinkConnectionApprovalRequestPtrOutput
}

type privateLinkConnectionApprovalRequestPtrType PrivateLinkConnectionApprovalRequestArgs

func PrivateLinkConnectionApprovalRequestPtr(v *PrivateLinkConnectionApprovalRequestArgs) PrivateLinkConnectionApprovalRequestPtrInput {
	return (*privateLinkConnectionApprovalRequestPtrType)(v)
}

func (*privateLinkConnectionApprovalRequestPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PrivateLinkConnectionApprovalRequest)(nil)).Elem()
}

func (i *privateLinkConnectionApprovalRequestPtrType) ToPrivateLinkConnectionApprovalRequestPtrOutput() PrivateLinkConnectionApprovalRequestPtrOutput {
	return i.ToPrivateLinkConnectionApprovalRequestPtrOutputWithContext(context.Background())
}

func (i *privateLinkConnectionApprovalRequestPtrType) ToPrivateLinkConnectionApprovalRequestPtrOutputWithContext(ctx context.Context) PrivateLinkConnectionApprovalRequestPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PrivateLinkConnectionApprovalRequestPtrOutput)
}

// A request to approve or reject a private endpoint connection
type PrivateLinkConnectionApprovalRequestOutput struct{ *pulumi.OutputState }

func (PrivateLinkConnectionApprovalRequestOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PrivateLinkConnectionApprovalRequest)(nil)).Elem()
}

func (o PrivateLinkConnectionApprovalRequestOutput) ToPrivateLinkConnectionApprovalRequestOutput() PrivateLinkConnectionApprovalRequestOutput {
	return o
}

func (o PrivateLinkConnectionApprovalRequestOutput) ToPrivateLinkConnectionApprovalRequestOutputWithContext(ctx context.Context) PrivateLinkConnectionApprovalRequestOutput {
	return o
}

func (o PrivateLinkConnectionApprovalRequestOutput) ToPrivateLinkConnectionApprovalRequestPtrOutput() PrivateLinkConnectionApprovalRequestPtrOutput {
	return o.ToPrivateLinkConnectionApprovalRequestPtrOutputWithContext(context.Background())
}

func (o PrivateLinkConnectionApprovalRequestOutput) ToPrivateLinkConnectionApprovalRequestPtrOutputWithContext(ctx context.Context) PrivateLinkConnectionApprovalRequestPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PrivateLinkConnectionApprovalRequest) *PrivateLinkConnectionApprovalRequest {
		return &v
	}).(PrivateLinkConnectionApprovalRequestPtrOutput)
}

// The resource of private endpoint.
func (o PrivateLinkConnectionApprovalRequestOutput) PrivateEndpoint() PrivateEndpointPtrOutput {
	return o.ApplyT(func(v PrivateLinkConnectionApprovalRequest) *PrivateEndpoint { return v.PrivateEndpoint }).(PrivateEndpointPtrOutput)
}

// The state of a private link connection
func (o PrivateLinkConnectionApprovalRequestOutput) PrivateLinkServiceConnectionState() PrivateLinkConnectionStatePtrOutput {
	return o.ApplyT(func(v PrivateLinkConnectionApprovalRequest) *PrivateLinkConnectionState {
		return v.PrivateLinkServiceConnectionState
	}).(PrivateLinkConnectionStatePtrOutput)
}

type PrivateLinkConnectionApprovalRequestPtrOutput struct{ *pulumi.OutputState }

func (PrivateLinkConnectionApprovalRequestPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PrivateLinkConnectionApprovalRequest)(nil)).Elem()
}

func (o PrivateLinkConnectionApprovalRequestPtrOutput) ToPrivateLinkConnectionApprovalRequestPtrOutput() PrivateLinkConnectionApprovalRequestPtrOutput {
	return o
}

func (o PrivateLinkConnectionApprovalRequestPtrOutput) ToPrivateLinkConnectionApprovalRequestPtrOutputWithContext(ctx context.Context) PrivateLinkConnectionApprovalRequestPtrOutput {
	return o
}

func (o PrivateLinkConnectionApprovalRequestPtrOutput) Elem() PrivateLinkConnectionApprovalRequestOutput {
	return o.ApplyT(func(v *PrivateLinkConnectionApprovalRequest) PrivateLinkConnectionApprovalRequest {
		if v != nil {
			return *v
		}
		var ret PrivateLinkConnectionApprovalRequest
		return ret
	}).(PrivateLinkConnectionApprovalRequestOutput)
}

// The resource of private endpoint.
func (o PrivateLinkConnectionApprovalRequestPtrOutput) PrivateEndpoint() PrivateEndpointPtrOutput {
	return o.ApplyT(func(v *PrivateLinkConnectionApprovalRequest) *PrivateEndpoint {
		if v == nil {
			return nil
		}
		return v.PrivateEndpoint
	}).(PrivateEndpointPtrOutput)
}

// The state of a private link connection
func (o PrivateLinkConnectionApprovalRequestPtrOutput) PrivateLinkServiceConnectionState() PrivateLinkConnectionStatePtrOutput {
	return o.ApplyT(func(v *PrivateLinkConnectionApprovalRequest) *PrivateLinkConnectionState {
		if v == nil {
			return nil
		}
		return v.PrivateLinkServiceConnectionState
	}).(PrivateLinkConnectionStatePtrOutput)
}

// The state of a private link connection
type PrivateLinkConnectionState struct {
	// ActionsRequired for a private link connection
	ActionsRequired *string `pulumi:"actionsRequired"`
	// Description of a private link connection
	Description *string `pulumi:"description"`
	// Status of a private link connection
	Status *string `pulumi:"status"`
}

// PrivateLinkConnectionStateInput is an input type that accepts PrivateLinkConnectionStateArgs and PrivateLinkConnectionStateOutput values.
// You can construct a concrete instance of `PrivateLinkConnectionStateInput` via:
//
//	PrivateLinkConnectionStateArgs{...}
type PrivateLinkConnectionStateInput interface {
	pulumi.Input

	ToPrivateLinkConnectionStateOutput() PrivateLinkConnectionStateOutput
	ToPrivateLinkConnectionStateOutputWithContext(context.Context) PrivateLinkConnectionStateOutput
}

// The state of a private link connection
type PrivateLinkConnectionStateArgs struct {
	// ActionsRequired for a private link connection
	ActionsRequired pulumi.StringPtrInput `pulumi:"actionsRequired"`
	// Description of a private link connection
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Status of a private link connection
	Status pulumi.StringPtrInput `pulumi:"status"`
}

func (PrivateLinkConnectionStateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PrivateLinkConnectionState)(nil)).Elem()
}

func (i PrivateLinkConnectionStateArgs) ToPrivateLinkConnectionStateOutput() PrivateLinkConnectionStateOutput {
	return i.ToPrivateLinkConnectionStateOutputWithContext(context.Background())
}

func (i PrivateLinkConnectionStateArgs) ToPrivateLinkConnectionStateOutputWithContext(ctx context.Context) PrivateLinkConnectionStateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PrivateLinkConnectionStateOutput)
}

func (i PrivateLinkConnectionStateArgs) ToPrivateLinkConnectionStatePtrOutput() PrivateLinkConnectionStatePtrOutput {
	return i.ToPrivateLinkConnectionStatePtrOutputWithContext(context.Background())
}

func (i PrivateLinkConnectionStateArgs) ToPrivateLinkConnectionStatePtrOutputWithContext(ctx context.Context) PrivateLinkConnectionStatePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PrivateLinkConnectionStateOutput).ToPrivateLinkConnectionStatePtrOutputWithContext(ctx)
}

// PrivateLinkConnectionStatePtrInput is an input type that accepts PrivateLinkConnectionStateArgs, PrivateLinkConnectionStatePtr and PrivateLinkConnectionStatePtrOutput values.
// You can construct a concrete instance of `PrivateLinkConnectionStatePtrInput` via:
//
//	        PrivateLinkConnectionStateArgs{...}
//
//	or:
//
//	        nil
type PrivateLinkConnectionStatePtrInput interface {
	pulumi.Input

	ToPrivateLinkConnectionStatePtrOutput() PrivateLinkConnectionStatePtrOutput
	ToPrivateLinkConnectionStatePtrOutputWithContext(context.Context) PrivateLinkConnectionStatePtrOutput
}

type privateLinkConnectionStatePtrType PrivateLinkConnectionStateArgs

func PrivateLinkConnectionStatePtr(v *PrivateLinkConnectionStateArgs) PrivateLinkConnectionStatePtrInput {
	return (*privateLinkConnectionStatePtrType)(v)
}

func (*privateLinkConnectionStatePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PrivateLinkConnectionState)(nil)).Elem()
}

func (i *privateLinkConnectionStatePtrType) ToPrivateLinkConnectionStatePtrOutput() PrivateLinkConnectionStatePtrOutput {
	return i.ToPrivateLinkConnectionStatePtrOutputWithContext(context.Background())
}

func (i *privateLinkConnectionStatePtrType) ToPrivateLinkConnectionStatePtrOutputWithContext(ctx context.Context) PrivateLinkConnectionStatePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PrivateLinkConnectionStatePtrOutput)
}

// The state of a private link connection
type PrivateLinkConnectionStateOutput struct{ *pulumi.OutputState }

func (PrivateLinkConnectionStateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PrivateLinkConnectionState)(nil)).Elem()
}

func (o PrivateLinkConnectionStateOutput) ToPrivateLinkConnectionStateOutput() PrivateLinkConnectionStateOutput {
	return o
}

func (o PrivateLinkConnectionStateOutput) ToPrivateLinkConnectionStateOutputWithContext(ctx context.Context) PrivateLinkConnectionStateOutput {
	return o
}

func (o PrivateLinkConnectionStateOutput) ToPrivateLinkConnectionStatePtrOutput() PrivateLinkConnectionStatePtrOutput {
	return o.ToPrivateLinkConnectionStatePtrOutputWithContext(context.Background())
}

func (o PrivateLinkConnectionStateOutput) ToPrivateLinkConnectionStatePtrOutputWithContext(ctx context.Context) PrivateLinkConnectionStatePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PrivateLinkConnectionState) *PrivateLinkConnectionState {
		return &v
	}).(PrivateLinkConnectionStatePtrOutput)
}

// ActionsRequired for a private link connection
func (o PrivateLinkConnectionStateOutput) ActionsRequired() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PrivateLinkConnectionState) *string { return v.ActionsRequired }).(pulumi.StringPtrOutput)
}

// Description of a private link connection
func (o PrivateLinkConnectionStateOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PrivateLinkConnectionState) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Status of a private link connection
func (o PrivateLinkConnectionStateOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PrivateLinkConnectionState) *string { return v.Status }).(pulumi.StringPtrOutput)
}

type PrivateLinkConnectionStatePtrOutput struct{ *pulumi.OutputState }

func (PrivateLinkConnectionStatePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PrivateLinkConnectionState)(nil)).Elem()
}

func (o PrivateLinkConnectionStatePtrOutput) ToPrivateLinkConnectionStatePtrOutput() PrivateLinkConnectionStatePtrOutput {
	return o
}

func (o PrivateLinkConnectionStatePtrOutput) ToPrivateLinkConnectionStatePtrOutputWithContext(ctx context.Context) PrivateLinkConnectionStatePtrOutput {
	return o
}

func (o PrivateLinkConnectionStatePtrOutput) Elem() PrivateLinkConnectionStateOutput {
	return o.ApplyT(func(v *PrivateLinkConnectionState) PrivateLinkConnectionState {
		if v != nil {
			return *v
		}
		var ret PrivateLinkConnectionState
		return ret
	}).(PrivateLinkConnectionStateOutput)
}

// ActionsRequired for a private link connection
func (o PrivateLinkConnectionStatePtrOutput) ActionsRequired() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PrivateLinkConnectionState) *string {
		if v == nil {
			return nil
		}
		return v.ActionsRequired
	}).(pulumi.StringPtrOutput)
}

// Description of a private link connection
func (o PrivateLinkConnectionStatePtrOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PrivateLinkConnectionState) *string {
		if v == nil {
			return nil
		}
		return v.Description
	}).(pulumi.StringPtrOutput)
}

// Status of a private link connection
func (o PrivateLinkConnectionStatePtrOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PrivateLinkConnectionState) *string {
		if v == nil {
			return nil
		}
		return v.Status
	}).(pulumi.StringPtrOutput)
}

// The state of a private link connection
type PrivateLinkConnectionStateResponse struct {
	// ActionsRequired for a private link connection
	ActionsRequired *string `pulumi:"actionsRequired"`
	// Description of a private link connection
	Description *string `pulumi:"description"`
	// Status of a private link connection
	Status *string `pulumi:"status"`
}

// The state of a private link connection
type PrivateLinkConnectionStateResponseOutput struct{ *pulumi.OutputState }

func (PrivateLinkConnectionStateResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PrivateLinkConnectionStateResponse)(nil)).Elem()
}

func (o PrivateLinkConnectionStateResponseOutput) ToPrivateLinkConnectionStateResponseOutput() PrivateLinkConnectionStateResponseOutput {
	return o
}

func (o PrivateLinkConnectionStateResponseOutput) ToPrivateLinkConnectionStateResponseOutputWithContext(ctx context.Context) PrivateLinkConnectionStateResponseOutput {
	return o
}

// ActionsRequired for a private link connection
func (o PrivateLinkConnectionStateResponseOutput) ActionsRequired() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PrivateLinkConnectionStateResponse) *string { return v.ActionsRequired }).(pulumi.StringPtrOutput)
}

// Description of a private link connection
func (o PrivateLinkConnectionStateResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PrivateLinkConnectionStateResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Status of a private link connection
func (o PrivateLinkConnectionStateResponseOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PrivateLinkConnectionStateResponse) *string { return v.Status }).(pulumi.StringPtrOutput)
}

type PrivateLinkConnectionStateResponsePtrOutput struct{ *pulumi.OutputState }

func (PrivateLinkConnectionStateResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PrivateLinkConnectionStateResponse)(nil)).Elem()
}

func (o PrivateLinkConnectionStateResponsePtrOutput) ToPrivateLinkConnectionStateResponsePtrOutput() PrivateLinkConnectionStateResponsePtrOutput {
	return o
}

func (o PrivateLinkConnectionStateResponsePtrOutput) ToPrivateLinkConnectionStateResponsePtrOutputWithContext(ctx context.Context) PrivateLinkConnectionStateResponsePtrOutput {
	return o
}

func (o PrivateLinkConnectionStateResponsePtrOutput) Elem() PrivateLinkConnectionStateResponseOutput {
	return o.ApplyT(func(v *PrivateLinkConnectionStateResponse) PrivateLinkConnectionStateResponse {
		if v != nil {
			return *v
		}
		var ret PrivateLinkConnectionStateResponse
		return ret
	}).(PrivateLinkConnectionStateResponseOutput)
}

// ActionsRequired for a private link connection
func (o PrivateLinkConnectionStateResponsePtrOutput) ActionsRequired() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PrivateLinkConnectionStateResponse) *string {
		if v == nil {
			return nil
		}
		return v.ActionsRequired
	}).(pulumi.StringPtrOutput)
}

// Description of a private link connection
func (o PrivateLinkConnectionStateResponsePtrOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PrivateLinkConnectionStateResponse) *string {
		if v == nil {
			return nil
		}
		return v.Description
	}).(pulumi.StringPtrOutput)
}

// Status of a private link connection
func (o PrivateLinkConnectionStateResponsePtrOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PrivateLinkConnectionStateResponse) *string {
		if v == nil {
			return nil
		}
		return v.Status
	}).(pulumi.StringPtrOutput)
}

// Purview configuration.
type PurviewConfiguration struct {
	// Purview resource id.
	PurviewResourceId *string `pulumi:"purviewResourceId"`
}

// PurviewConfigurationInput is an input type that accepts PurviewConfigurationArgs and PurviewConfigurationOutput values.
// You can construct a concrete instance of `PurviewConfigurationInput` via:
//
//	PurviewConfigurationArgs{...}
type PurviewConfigurationInput interface {
	pulumi.Input

	ToPurviewConfigurationOutput() PurviewConfigurationOutput
	ToPurviewConfigurationOutputWithContext(context.Context) PurviewConfigurationOutput
}

// Purview configuration.
type PurviewConfigurationArgs struct {
	// Purview resource id.
	PurviewResourceId pulumi.StringPtrInput `pulumi:"purviewResourceId"`
}

func (PurviewConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PurviewConfiguration)(nil)).Elem()
}

func (i PurviewConfigurationArgs) ToPurviewConfigurationOutput() PurviewConfigurationOutput {
	return i.ToPurviewConfigurationOutputWithContext(context.Background())
}

func (i PurviewConfigurationArgs) ToPurviewConfigurationOutputWithContext(ctx context.Context) PurviewConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PurviewConfigurationOutput)
}

func (i PurviewConfigurationArgs) ToPurviewConfigurationPtrOutput() PurviewConfigurationPtrOutput {
	return i.ToPurviewConfigurationPtrOutputWithContext(context.Background())
}

func (i PurviewConfigurationArgs) ToPurviewConfigurationPtrOutputWithContext(ctx context.Context) PurviewConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PurviewConfigurationOutput).ToPurviewConfigurationPtrOutputWithContext(ctx)
}

// PurviewConfigurationPtrInput is an input type that accepts PurviewConfigurationArgs, PurviewConfigurationPtr and PurviewConfigurationPtrOutput values.
// You can construct a concrete instance of `PurviewConfigurationPtrInput` via:
//
//	        PurviewConfigurationArgs{...}
//
//	or:
//
//	        nil
type PurviewConfigurationPtrInput interface {
	pulumi.Input

	ToPurviewConfigurationPtrOutput() PurviewConfigurationPtrOutput
	ToPurviewConfigurationPtrOutputWithContext(context.Context) PurviewConfigurationPtrOutput
}

type purviewConfigurationPtrType PurviewConfigurationArgs

func PurviewConfigurationPtr(v *PurviewConfigurationArgs) PurviewConfigurationPtrInput {
	return (*purviewConfigurationPtrType)(v)
}

func (*purviewConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PurviewConfiguration)(nil)).Elem()
}

func (i *purviewConfigurationPtrType) ToPurviewConfigurationPtrOutput() PurviewConfigurationPtrOutput {
	return i.ToPurviewConfigurationPtrOutputWithContext(context.Background())
}

func (i *purviewConfigurationPtrType) ToPurviewConfigurationPtrOutputWithContext(ctx context.Context) PurviewConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PurviewConfigurationPtrOutput)
}

// Purview configuration.
type PurviewConfigurationOutput struct{ *pulumi.OutputState }

func (PurviewConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PurviewConfiguration)(nil)).Elem()
}

func (o PurviewConfigurationOutput) ToPurviewConfigurationOutput() PurviewConfigurationOutput {
	return o
}

func (o PurviewConfigurationOutput) ToPurviewConfigurationOutputWithContext(ctx context.Context) PurviewConfigurationOutput {
	return o
}

func (o PurviewConfigurationOutput) ToPurviewConfigurationPtrOutput() PurviewConfigurationPtrOutput {
	return o.ToPurviewConfigurationPtrOutputWithContext(context.Background())
}

func (o PurviewConfigurationOutput) ToPurviewConfigurationPtrOutputWithContext(ctx context.Context) PurviewConfigurationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PurviewConfiguration) *PurviewConfiguration {
		return &v
	}).(PurviewConfigurationPtrOutput)
}

// Purview resource id.
func (o PurviewConfigurationOutput) PurviewResourceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PurviewConfiguration) *string { return v.PurviewResourceId }).(pulumi.StringPtrOutput)
}

type PurviewConfigurationPtrOutput struct{ *pulumi.OutputState }

func (PurviewConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PurviewConfiguration)(nil)).Elem()
}

func (o PurviewConfigurationPtrOutput) ToPurviewConfigurationPtrOutput() PurviewConfigurationPtrOutput {
	return o
}

func (o PurviewConfigurationPtrOutput) ToPurviewConfigurationPtrOutputWithContext(ctx context.Context) PurviewConfigurationPtrOutput {
	return o
}

func (o PurviewConfigurationPtrOutput) Elem() PurviewConfigurationOutput {
	return o.ApplyT(func(v *PurviewConfiguration) PurviewConfiguration {
		if v != nil {
			return *v
		}
		var ret PurviewConfiguration
		return ret
	}).(PurviewConfigurationOutput)
}

// Purview resource id.
func (o PurviewConfigurationPtrOutput) PurviewResourceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PurviewConfiguration) *string {
		if v == nil {
			return nil
		}
		return v.PurviewResourceId
	}).(pulumi.StringPtrOutput)
}

// Purview configuration.
type PurviewConfigurationResponse struct {
	// Purview resource id.
	PurviewResourceId *string `pulumi:"purviewResourceId"`
}

// Purview configuration.
type PurviewConfigurationResponseOutput struct{ *pulumi.OutputState }

func (PurviewConfigurationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PurviewConfigurationResponse)(nil)).Elem()
}

func (o PurviewConfigurationResponseOutput) ToPurviewConfigurationResponseOutput() PurviewConfigurationResponseOutput {
	return o
}

func (o PurviewConfigurationResponseOutput) ToPurviewConfigurationResponseOutputWithContext(ctx context.Context) PurviewConfigurationResponseOutput {
	return o
}

// Purview resource id.
func (o PurviewConfigurationResponseOutput) PurviewResourceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PurviewConfigurationResponse) *string { return v.PurviewResourceId }).(pulumi.StringPtrOutput)
}

type PurviewConfigurationResponsePtrOutput struct{ *pulumi.OutputState }

func (PurviewConfigurationResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PurviewConfigurationResponse)(nil)).Elem()
}

func (o PurviewConfigurationResponsePtrOutput) ToPurviewConfigurationResponsePtrOutput() PurviewConfigurationResponsePtrOutput {
	return o
}

func (o PurviewConfigurationResponsePtrOutput) ToPurviewConfigurationResponsePtrOutputWithContext(ctx context.Context) PurviewConfigurationResponsePtrOutput {
	return o
}

func (o PurviewConfigurationResponsePtrOutput) Elem() PurviewConfigurationResponseOutput {
	return o.ApplyT(func(v *PurviewConfigurationResponse) PurviewConfigurationResponse {
		if v != nil {
			return *v
		}
		var ret PurviewConfigurationResponse
		return ret
	}).(PurviewConfigurationResponseOutput)
}

// Purview resource id.
func (o PurviewConfigurationResponsePtrOutput) PurviewResourceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PurviewConfigurationResponse) *string {
		if v == nil {
			return nil
		}
		return v.PurviewResourceId
	}).(pulumi.StringPtrOutput)
}

// QuickBooks server linked service.
type QuickBooksLinkedService struct {
	// The access token for OAuth 1.0 authentication.
	AccessToken interface{} `pulumi:"accessToken"`
	// The access token secret for OAuth 1.0 authentication.
	AccessTokenSecret interface{} `pulumi:"accessTokenSecret"`
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The company ID of the QuickBooks company to authorize.
	CompanyId interface{} `pulumi:"companyId"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference `pulumi:"connectVia"`
	// Properties used to connect to QuickBooks. It is mutually exclusive with any other properties in the linked service. Type: object.
	ConnectionProperties interface{} `pulumi:"connectionProperties"`
	// The consumer key for OAuth 1.0 authentication.
	ConsumerKey interface{} `pulumi:"consumerKey"`
	// The consumer secret for OAuth 1.0 authentication.
	ConsumerSecret interface{} `pulumi:"consumerSecret"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential interface{} `pulumi:"encryptedCredential"`
	// The endpoint of the QuickBooks server. (i.e. quickbooks.api.intuit.com)
	Endpoint interface{} `pulumi:"endpoint"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Type of linked service.
	// Expected value is 'QuickBooks'.
	Type string `pulumi:"type"`
	// Specifies whether the data source endpoints are encrypted using HTTPS. The default value is true.
	UseEncryptedEndpoints interface{} `pulumi:"useEncryptedEndpoints"`
}

// QuickBooks server linked service.
type QuickBooksLinkedServiceResponse struct {
	// The access token for OAuth 1.0 authentication.
	AccessToken interface{} `pulumi:"accessToken"`
	// The access token secret for OAuth 1.0 authentication.
	AccessTokenSecret interface{} `pulumi:"accessTokenSecret"`
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The company ID of the QuickBooks company to authorize.
	CompanyId interface{} `pulumi:"companyId"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReferenceResponse `pulumi:"connectVia"`
	// Properties used to connect to QuickBooks. It is mutually exclusive with any other properties in the linked service. Type: object.
	ConnectionProperties interface{} `pulumi:"connectionProperties"`
	// The consumer key for OAuth 1.0 authentication.
	ConsumerKey interface{} `pulumi:"consumerKey"`
	// The consumer secret for OAuth 1.0 authentication.
	ConsumerSecret interface{} `pulumi:"consumerSecret"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential interface{} `pulumi:"encryptedCredential"`
	// The endpoint of the QuickBooks server. (i.e. quickbooks.api.intuit.com)
	Endpoint interface{} `pulumi:"endpoint"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Type of linked service.
	// Expected value is 'QuickBooks'.
	Type string `pulumi:"type"`
	// Specifies whether the data source endpoints are encrypted using HTTPS. The default value is true.
	UseEncryptedEndpoints interface{} `pulumi:"useEncryptedEndpoints"`
}

// QuickBooks server dataset.
type QuickBooksObjectDataset struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReference `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// The table name. Type: string (or Expression with resultType string).
	TableName interface{} `pulumi:"tableName"`
	// Type of dataset.
	// Expected value is 'QuickBooksObject'.
	Type string `pulumi:"type"`
}

// QuickBooks server dataset.
type QuickBooksObjectDatasetResponse struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetResponseFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceResponse `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// The table name. Type: string (or Expression with resultType string).
	TableName interface{} `pulumi:"tableName"`
	// Type of dataset.
	// Expected value is 'QuickBooksObject'.
	Type string `pulumi:"type"`
}

// A copy activity QuickBooks server source.
type QuickBooksSource struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns interface{} `pulumi:"additionalColumns"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// A query to retrieve data from source. Type: string (or Expression with resultType string).
	Query interface{} `pulumi:"query"`
	// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	QueryTimeout interface{} `pulumi:"queryTimeout"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// Copy source type.
	// Expected value is 'QuickBooksSource'.
	Type string `pulumi:"type"`
}

// A copy activity QuickBooks server source.
type QuickBooksSourceResponse struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns interface{} `pulumi:"additionalColumns"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// A query to retrieve data from source. Type: string (or Expression with resultType string).
	Query interface{} `pulumi:"query"`
	// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	QueryTimeout interface{} `pulumi:"queryTimeout"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// Copy source type.
	// Expected value is 'QuickBooksSource'.
	Type string `pulumi:"type"`
}

// Linked service for Quickbase.
type QuickbaseLinkedService struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference `pulumi:"connectVia"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential interface{} `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Type of linked service.
	// Expected value is 'Quickbase'.
	Type string `pulumi:"type"`
	// The url to connect Quickbase source. Type: string (or Expression with resultType string).
	Url interface{} `pulumi:"url"`
	// The user token for the Quickbase source.
	UserToken interface{} `pulumi:"userToken"`
}

// Linked service for Quickbase.
type QuickbaseLinkedServiceResponse struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReferenceResponse `pulumi:"connectVia"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential interface{} `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Type of linked service.
	// Expected value is 'Quickbase'.
	Type string `pulumi:"type"`
	// The url to connect Quickbase source. Type: string (or Expression with resultType string).
	Url interface{} `pulumi:"url"`
	// The user token for the Quickbase source.
	UserToken interface{} `pulumi:"userToken"`
}

// The recurrence schedule.
type RecurrenceSchedule struct {
	// The hours.
	Hours []int `pulumi:"hours"`
	// The minutes.
	Minutes []int `pulumi:"minutes"`
	// The month days.
	MonthDays []int `pulumi:"monthDays"`
	// The monthly occurrences.
	MonthlyOccurrences []RecurrenceScheduleOccurrence `pulumi:"monthlyOccurrences"`
	// The days of the week.
	WeekDays []DaysOfWeek `pulumi:"weekDays"`
}

// The recurrence schedule occurrence.
type RecurrenceScheduleOccurrence struct {
	// The day of the week.
	Day *DayOfWeek `pulumi:"day"`
	// The occurrence.
	Occurrence *int `pulumi:"occurrence"`
}

// The recurrence schedule occurrence.
type RecurrenceScheduleOccurrenceResponse struct {
	// The day of the week.
	Day *string `pulumi:"day"`
	// The occurrence.
	Occurrence *int `pulumi:"occurrence"`
}

// The recurrence schedule.
type RecurrenceScheduleResponse struct {
	// The hours.
	Hours []int `pulumi:"hours"`
	// The minutes.
	Minutes []int `pulumi:"minutes"`
	// The month days.
	MonthDays []int `pulumi:"monthDays"`
	// The monthly occurrences.
	MonthlyOccurrences []RecurrenceScheduleOccurrenceResponse `pulumi:"monthlyOccurrences"`
	// The days of the week.
	WeekDays []string `pulumi:"weekDays"`
}

// Redirect incompatible row settings
type RedirectIncompatibleRowSettings struct {
	// Name of the Azure Storage, Storage SAS, or Azure Data Lake Store linked service used for redirecting incompatible row. Must be specified if redirectIncompatibleRowSettings is specified. Type: string (or Expression with resultType string).
	LinkedServiceName interface{} `pulumi:"linkedServiceName"`
	// The path for storing the redirect incompatible row data. Type: string (or Expression with resultType string).
	Path interface{} `pulumi:"path"`
}

// Redirect incompatible row settings
type RedirectIncompatibleRowSettingsResponse struct {
	// Name of the Azure Storage, Storage SAS, or Azure Data Lake Store linked service used for redirecting incompatible row. Must be specified if redirectIncompatibleRowSettings is specified. Type: string (or Expression with resultType string).
	LinkedServiceName interface{} `pulumi:"linkedServiceName"`
	// The path for storing the redirect incompatible row data. Type: string (or Expression with resultType string).
	Path interface{} `pulumi:"path"`
}

// The Amazon S3 settings needed for the interim Amazon S3 when copying from Amazon Redshift with unload. With this, data from Amazon Redshift source will be unloaded into S3 first and then copied into the targeted sink from the interim S3.
type RedshiftUnloadSettings struct {
	// The bucket of the interim Amazon S3 which will be used to store the unloaded data from Amazon Redshift source. The bucket must be in the same region as the Amazon Redshift source. Type: string (or Expression with resultType string).
	BucketName interface{} `pulumi:"bucketName"`
	// The name of the Amazon S3 linked service which will be used for the unload operation when copying from the Amazon Redshift source.
	S3LinkedServiceName LinkedServiceReference `pulumi:"s3LinkedServiceName"`
}

// The Amazon S3 settings needed for the interim Amazon S3 when copying from Amazon Redshift with unload. With this, data from Amazon Redshift source will be unloaded into S3 first and then copied into the targeted sink from the interim S3.
type RedshiftUnloadSettingsResponse struct {
	// The bucket of the interim Amazon S3 which will be used to store the unloaded data from Amazon Redshift source. The bucket must be in the same region as the Amazon Redshift source. Type: string (or Expression with resultType string).
	BucketName interface{} `pulumi:"bucketName"`
	// The name of the Amazon S3 linked service which will be used for the unload operation when copying from the Amazon Redshift source.
	S3LinkedServiceName LinkedServiceReferenceResponse `pulumi:"s3LinkedServiceName"`
}

// A copy activity source for various relational databases.
type RelationalSource struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns interface{} `pulumi:"additionalColumns"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// Database query. Type: string (or Expression with resultType string).
	Query interface{} `pulumi:"query"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// Copy source type.
	// Expected value is 'RelationalSource'.
	Type string `pulumi:"type"`
}

// A copy activity source for various relational databases.
type RelationalSourceResponse struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns interface{} `pulumi:"additionalColumns"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// Database query. Type: string (or Expression with resultType string).
	Query interface{} `pulumi:"query"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// Copy source type.
	// Expected value is 'RelationalSource'.
	Type string `pulumi:"type"`
}

// The relational table dataset.
type RelationalTableDataset struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReference `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// The relational table name. Type: string (or Expression with resultType string).
	TableName interface{} `pulumi:"tableName"`
	// Type of dataset.
	// Expected value is 'RelationalTable'.
	Type string `pulumi:"type"`
}

// The relational table dataset.
type RelationalTableDatasetResponse struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetResponseFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceResponse `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// The relational table name. Type: string (or Expression with resultType string).
	TableName interface{} `pulumi:"tableName"`
	// Type of dataset.
	// Expected value is 'RelationalTable'.
	Type string `pulumi:"type"`
}

// A remote private endpoint connection
type RemotePrivateEndpointConnectionResponse struct {
	// PrivateEndpoint of a remote private endpoint connection
	PrivateEndpoint *ArmIdWrapperResponse `pulumi:"privateEndpoint"`
	// The state of a private link connection
	PrivateLinkServiceConnectionState *PrivateLinkConnectionStateResponse `pulumi:"privateLinkServiceConnectionState"`
	ProvisioningState                 string                              `pulumi:"provisioningState"`
}

// A remote private endpoint connection
type RemotePrivateEndpointConnectionResponseOutput struct{ *pulumi.OutputState }

func (RemotePrivateEndpointConnectionResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RemotePrivateEndpointConnectionResponse)(nil)).Elem()
}

func (o RemotePrivateEndpointConnectionResponseOutput) ToRemotePrivateEndpointConnectionResponseOutput() RemotePrivateEndpointConnectionResponseOutput {
	return o
}

func (o RemotePrivateEndpointConnectionResponseOutput) ToRemotePrivateEndpointConnectionResponseOutputWithContext(ctx context.Context) RemotePrivateEndpointConnectionResponseOutput {
	return o
}

// PrivateEndpoint of a remote private endpoint connection
func (o RemotePrivateEndpointConnectionResponseOutput) PrivateEndpoint() ArmIdWrapperResponsePtrOutput {
	return o.ApplyT(func(v RemotePrivateEndpointConnectionResponse) *ArmIdWrapperResponse { return v.PrivateEndpoint }).(ArmIdWrapperResponsePtrOutput)
}

// The state of a private link connection
func (o RemotePrivateEndpointConnectionResponseOutput) PrivateLinkServiceConnectionState() PrivateLinkConnectionStateResponsePtrOutput {
	return o.ApplyT(func(v RemotePrivateEndpointConnectionResponse) *PrivateLinkConnectionStateResponse {
		return v.PrivateLinkServiceConnectionState
	}).(PrivateLinkConnectionStateResponsePtrOutput)
}

func (o RemotePrivateEndpointConnectionResponseOutput) ProvisioningState() pulumi.StringOutput {
	return o.ApplyT(func(v RemotePrivateEndpointConnectionResponse) string { return v.ProvisioningState }).(pulumi.StringOutput)
}

// Trigger that schedules pipeline reruns for all fixed time interval windows from a requested start time to requested end time.
type RerunTumblingWindowTrigger struct {
	// List of tags that can be used for describing the trigger.
	Annotations []interface{} `pulumi:"annotations"`
	// Trigger description.
	Description *string `pulumi:"description"`
	// The parent trigger reference.
	ParentTrigger interface{} `pulumi:"parentTrigger"`
	// The end time for the time period for which restatement is initiated. Only UTC time is currently supported.
	RequestedEndTime string `pulumi:"requestedEndTime"`
	// The start time for the time period for which restatement is initiated. Only UTC time is currently supported.
	RequestedStartTime string `pulumi:"requestedStartTime"`
	// The max number of parallel time windows (ready for execution) for which a rerun is triggered.
	RerunConcurrency int `pulumi:"rerunConcurrency"`
	// Trigger type.
	// Expected value is 'RerunTumblingWindowTrigger'.
	Type string `pulumi:"type"`
}

// Trigger that schedules pipeline reruns for all fixed time interval windows from a requested start time to requested end time.
type RerunTumblingWindowTriggerResponse struct {
	// List of tags that can be used for describing the trigger.
	Annotations []interface{} `pulumi:"annotations"`
	// Trigger description.
	Description *string `pulumi:"description"`
	// The parent trigger reference.
	ParentTrigger interface{} `pulumi:"parentTrigger"`
	// The end time for the time period for which restatement is initiated. Only UTC time is currently supported.
	RequestedEndTime string `pulumi:"requestedEndTime"`
	// The start time for the time period for which restatement is initiated. Only UTC time is currently supported.
	RequestedStartTime string `pulumi:"requestedStartTime"`
	// The max number of parallel time windows (ready for execution) for which a rerun is triggered.
	RerunConcurrency int `pulumi:"rerunConcurrency"`
	// Indicates if trigger is running or not. Updated when Start/Stop APIs are called on the Trigger.
	RuntimeState string `pulumi:"runtimeState"`
	// Trigger type.
	// Expected value is 'RerunTumblingWindowTrigger'.
	Type string `pulumi:"type"`
}

// Responsys linked service.
type ResponsysLinkedService struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The client ID associated with the Responsys application. Type: string (or Expression with resultType string).
	ClientId interface{} `pulumi:"clientId"`
	// The client secret associated with the Responsys application. Type: string (or Expression with resultType string).
	ClientSecret interface{} `pulumi:"clientSecret"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference `pulumi:"connectVia"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential interface{} `pulumi:"encryptedCredential"`
	// The endpoint of the Responsys server.
	Endpoint interface{} `pulumi:"endpoint"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Type of linked service.
	// Expected value is 'Responsys'.
	Type string `pulumi:"type"`
	// Specifies whether the data source endpoints are encrypted using HTTPS. The default value is true. Type: boolean (or Expression with resultType boolean).
	UseEncryptedEndpoints interface{} `pulumi:"useEncryptedEndpoints"`
	// Specifies whether to require the host name in the server's certificate to match the host name of the server when connecting over SSL. The default value is true. Type: boolean (or Expression with resultType boolean).
	UseHostVerification interface{} `pulumi:"useHostVerification"`
	// Specifies whether to verify the identity of the server when connecting over SSL. The default value is true. Type: boolean (or Expression with resultType boolean).
	UsePeerVerification interface{} `pulumi:"usePeerVerification"`
}

// Responsys linked service.
type ResponsysLinkedServiceResponse struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The client ID associated with the Responsys application. Type: string (or Expression with resultType string).
	ClientId interface{} `pulumi:"clientId"`
	// The client secret associated with the Responsys application. Type: string (or Expression with resultType string).
	ClientSecret interface{} `pulumi:"clientSecret"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReferenceResponse `pulumi:"connectVia"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential interface{} `pulumi:"encryptedCredential"`
	// The endpoint of the Responsys server.
	Endpoint interface{} `pulumi:"endpoint"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Type of linked service.
	// Expected value is 'Responsys'.
	Type string `pulumi:"type"`
	// Specifies whether the data source endpoints are encrypted using HTTPS. The default value is true. Type: boolean (or Expression with resultType boolean).
	UseEncryptedEndpoints interface{} `pulumi:"useEncryptedEndpoints"`
	// Specifies whether to require the host name in the server's certificate to match the host name of the server when connecting over SSL. The default value is true. Type: boolean (or Expression with resultType boolean).
	UseHostVerification interface{} `pulumi:"useHostVerification"`
	// Specifies whether to verify the identity of the server when connecting over SSL. The default value is true. Type: boolean (or Expression with resultType boolean).
	UsePeerVerification interface{} `pulumi:"usePeerVerification"`
}

// Responsys dataset.
type ResponsysObjectDataset struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReference `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// The table name. Type: string (or Expression with resultType string).
	TableName interface{} `pulumi:"tableName"`
	// Type of dataset.
	// Expected value is 'ResponsysObject'.
	Type string `pulumi:"type"`
}

// Responsys dataset.
type ResponsysObjectDatasetResponse struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetResponseFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceResponse `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// The table name. Type: string (or Expression with resultType string).
	TableName interface{} `pulumi:"tableName"`
	// Type of dataset.
	// Expected value is 'ResponsysObject'.
	Type string `pulumi:"type"`
}

// A copy activity Responsys source.
type ResponsysSource struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns interface{} `pulumi:"additionalColumns"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// A query to retrieve data from source. Type: string (or Expression with resultType string).
	Query interface{} `pulumi:"query"`
	// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	QueryTimeout interface{} `pulumi:"queryTimeout"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// Copy source type.
	// Expected value is 'ResponsysSource'.
	Type string `pulumi:"type"`
}

// A copy activity Responsys source.
type ResponsysSourceResponse struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns interface{} `pulumi:"additionalColumns"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// A query to retrieve data from source. Type: string (or Expression with resultType string).
	Query interface{} `pulumi:"query"`
	// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	QueryTimeout interface{} `pulumi:"queryTimeout"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// Copy source type.
	// Expected value is 'ResponsysSource'.
	Type string `pulumi:"type"`
}

// A Rest service dataset.
type RestResourceDataset struct {
	// The additional HTTP headers in the request to the RESTful API. Type: string (or Expression with resultType string).
	AdditionalHeaders interface{} `pulumi:"additionalHeaders"`
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReference `pulumi:"linkedServiceName"`
	// The pagination rules to compose next page requests. Type: string (or Expression with resultType string).
	PaginationRules interface{} `pulumi:"paginationRules"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// The relative URL to the resource that the RESTful API provides. Type: string (or Expression with resultType string).
	RelativeUrl interface{} `pulumi:"relativeUrl"`
	// The HTTP request body to the RESTful API if requestMethod is POST. Type: string (or Expression with resultType string).
	RequestBody interface{} `pulumi:"requestBody"`
	// The HTTP method used to call the RESTful API. The default is GET. Type: string (or Expression with resultType string).
	RequestMethod interface{} `pulumi:"requestMethod"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// Type of dataset.
	// Expected value is 'RestResource'.
	Type string `pulumi:"type"`
}

// A Rest service dataset.
type RestResourceDatasetResponse struct {
	// The additional HTTP headers in the request to the RESTful API. Type: string (or Expression with resultType string).
	AdditionalHeaders interface{} `pulumi:"additionalHeaders"`
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetResponseFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceResponse `pulumi:"linkedServiceName"`
	// The pagination rules to compose next page requests. Type: string (or Expression with resultType string).
	PaginationRules interface{} `pulumi:"paginationRules"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// The relative URL to the resource that the RESTful API provides. Type: string (or Expression with resultType string).
	RelativeUrl interface{} `pulumi:"relativeUrl"`
	// The HTTP request body to the RESTful API if requestMethod is POST. Type: string (or Expression with resultType string).
	RequestBody interface{} `pulumi:"requestBody"`
	// The HTTP method used to call the RESTful API. The default is GET. Type: string (or Expression with resultType string).
	RequestMethod interface{} `pulumi:"requestMethod"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// Type of dataset.
	// Expected value is 'RestResource'.
	Type string `pulumi:"type"`
}

// Rest Service linked service.
type RestServiceLinkedService struct {
	// The resource you are requesting authorization to use.
	AadResourceId interface{} `pulumi:"aadResourceId"`
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The additional HTTP headers in the request to RESTful API used for authorization. Type: object (or Expression with resultType object).
	AuthHeaders interface{} `pulumi:"authHeaders"`
	// Type of authentication used to connect to the REST service.
	AuthenticationType string `pulumi:"authenticationType"`
	// Indicates the azure cloud type of the service principle auth. Allowed values are AzurePublic, AzureChina, AzureUsGovernment, AzureGermany. Default value is the data factory regions’ cloud type. Type: string (or Expression with resultType string).
	AzureCloudType interface{} `pulumi:"azureCloudType"`
	// The client ID associated with your application. Type: string (or Expression with resultType string).
	ClientId interface{} `pulumi:"clientId"`
	// The client secret associated with your application.
	ClientSecret interface{} `pulumi:"clientSecret"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference `pulumi:"connectVia"`
	// The credential reference containing authentication information.
	Credential *CredentialReference `pulumi:"credential"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// Whether to validate server side SSL certificate when connecting to the endpoint.The default value is true. Type: boolean (or Expression with resultType boolean).
	EnableServerCertificateValidation interface{} `pulumi:"enableServerCertificateValidation"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential interface{} `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// The password used in Basic authentication type.
	Password interface{} `pulumi:"password"`
	// The target service or resource to which the access will be requested. Type: string (or Expression with resultType string).
	Resource interface{} `pulumi:"resource"`
	// The scope of the access required. It describes what kind of access will be requested. Type: string (or Expression with resultType string).
	Scope interface{} `pulumi:"scope"`
	// The application's client ID used in AadServicePrincipal authentication type.
	ServicePrincipalId interface{} `pulumi:"servicePrincipalId"`
	// The application's key used in AadServicePrincipal authentication type.
	ServicePrincipalKey interface{} `pulumi:"servicePrincipalKey"`
	// The tenant information (domain name or tenant ID) used in AadServicePrincipal authentication type under which your application resides.
	Tenant interface{} `pulumi:"tenant"`
	// The token endpoint of the authorization server to acquire access token. Type: string (or Expression with resultType string).
	TokenEndpoint interface{} `pulumi:"tokenEndpoint"`
	// Type of linked service.
	// Expected value is 'RestService'.
	Type string `pulumi:"type"`
	// The base URL of the REST service.
	Url interface{} `pulumi:"url"`
	// The user name used in Basic authentication type.
	UserName interface{} `pulumi:"userName"`
}

// Rest Service linked service.
type RestServiceLinkedServiceResponse struct {
	// The resource you are requesting authorization to use.
	AadResourceId interface{} `pulumi:"aadResourceId"`
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The additional HTTP headers in the request to RESTful API used for authorization. Type: object (or Expression with resultType object).
	AuthHeaders interface{} `pulumi:"authHeaders"`
	// Type of authentication used to connect to the REST service.
	AuthenticationType string `pulumi:"authenticationType"`
	// Indicates the azure cloud type of the service principle auth. Allowed values are AzurePublic, AzureChina, AzureUsGovernment, AzureGermany. Default value is the data factory regions’ cloud type. Type: string (or Expression with resultType string).
	AzureCloudType interface{} `pulumi:"azureCloudType"`
	// The client ID associated with your application. Type: string (or Expression with resultType string).
	ClientId interface{} `pulumi:"clientId"`
	// The client secret associated with your application.
	ClientSecret interface{} `pulumi:"clientSecret"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReferenceResponse `pulumi:"connectVia"`
	// The credential reference containing authentication information.
	Credential *CredentialReferenceResponse `pulumi:"credential"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// Whether to validate server side SSL certificate when connecting to the endpoint.The default value is true. Type: boolean (or Expression with resultType boolean).
	EnableServerCertificateValidation interface{} `pulumi:"enableServerCertificateValidation"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential interface{} `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// The password used in Basic authentication type.
	Password interface{} `pulumi:"password"`
	// The target service or resource to which the access will be requested. Type: string (or Expression with resultType string).
	Resource interface{} `pulumi:"resource"`
	// The scope of the access required. It describes what kind of access will be requested. Type: string (or Expression with resultType string).
	Scope interface{} `pulumi:"scope"`
	// The application's client ID used in AadServicePrincipal authentication type.
	ServicePrincipalId interface{} `pulumi:"servicePrincipalId"`
	// The application's key used in AadServicePrincipal authentication type.
	ServicePrincipalKey interface{} `pulumi:"servicePrincipalKey"`
	// The tenant information (domain name or tenant ID) used in AadServicePrincipal authentication type under which your application resides.
	Tenant interface{} `pulumi:"tenant"`
	// The token endpoint of the authorization server to acquire access token. Type: string (or Expression with resultType string).
	TokenEndpoint interface{} `pulumi:"tokenEndpoint"`
	// Type of linked service.
	// Expected value is 'RestService'.
	Type string `pulumi:"type"`
	// The base URL of the REST service.
	Url interface{} `pulumi:"url"`
	// The user name used in Basic authentication type.
	UserName interface{} `pulumi:"userName"`
}

// A copy activity Rest service Sink.
type RestSink struct {
	// The additional HTTP headers in the request to the RESTful API. Type: string (or Expression with resultType string).
	AdditionalHeaders interface{} `pulumi:"additionalHeaders"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// Http Compression Type to Send data in compressed format with Optimal Compression Level, Default is None. And The Only Supported option is Gzip.
	HttpCompressionType interface{} `pulumi:"httpCompressionType"`
	// The timeout (TimeSpan) to get an HTTP response. It is the timeout to get a response, not the timeout to read response data. Default value: 00:01:40. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	HttpRequestTimeout interface{} `pulumi:"httpRequestTimeout"`
	// The maximum concurrent connection count for the sink data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// The time to await before sending next request, in milliseconds
	RequestInterval interface{} `pulumi:"requestInterval"`
	// The HTTP method used to call the RESTful API. The default is POST. Type: string (or Expression with resultType string).
	RequestMethod interface{} `pulumi:"requestMethod"`
	// Sink retry count. Type: integer (or Expression with resultType integer).
	SinkRetryCount interface{} `pulumi:"sinkRetryCount"`
	// Sink retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SinkRetryWait interface{} `pulumi:"sinkRetryWait"`
	// Copy sink type.
	// Expected value is 'RestSink'.
	Type string `pulumi:"type"`
	// Write batch size. Type: integer (or Expression with resultType integer), minimum: 0.
	WriteBatchSize interface{} `pulumi:"writeBatchSize"`
	// Write batch timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	WriteBatchTimeout interface{} `pulumi:"writeBatchTimeout"`
}

// A copy activity Rest service Sink.
type RestSinkResponse struct {
	// The additional HTTP headers in the request to the RESTful API. Type: string (or Expression with resultType string).
	AdditionalHeaders interface{} `pulumi:"additionalHeaders"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// Http Compression Type to Send data in compressed format with Optimal Compression Level, Default is None. And The Only Supported option is Gzip.
	HttpCompressionType interface{} `pulumi:"httpCompressionType"`
	// The timeout (TimeSpan) to get an HTTP response. It is the timeout to get a response, not the timeout to read response data. Default value: 00:01:40. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	HttpRequestTimeout interface{} `pulumi:"httpRequestTimeout"`
	// The maximum concurrent connection count for the sink data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// The time to await before sending next request, in milliseconds
	RequestInterval interface{} `pulumi:"requestInterval"`
	// The HTTP method used to call the RESTful API. The default is POST. Type: string (or Expression with resultType string).
	RequestMethod interface{} `pulumi:"requestMethod"`
	// Sink retry count. Type: integer (or Expression with resultType integer).
	SinkRetryCount interface{} `pulumi:"sinkRetryCount"`
	// Sink retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SinkRetryWait interface{} `pulumi:"sinkRetryWait"`
	// Copy sink type.
	// Expected value is 'RestSink'.
	Type string `pulumi:"type"`
	// Write batch size. Type: integer (or Expression with resultType integer), minimum: 0.
	WriteBatchSize interface{} `pulumi:"writeBatchSize"`
	// Write batch timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	WriteBatchTimeout interface{} `pulumi:"writeBatchTimeout"`
}

// A copy activity Rest service source.
type RestSource struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns interface{} `pulumi:"additionalColumns"`
	// The additional HTTP headers in the request to the RESTful API. Type: string (or Expression with resultType string).
	AdditionalHeaders interface{} `pulumi:"additionalHeaders"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The timeout (TimeSpan) to get an HTTP response. It is the timeout to get a response, not the timeout to read response data. Default value: 00:01:40. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	HttpRequestTimeout interface{} `pulumi:"httpRequestTimeout"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// The pagination rules to compose next page requests. Type: string (or Expression with resultType string).
	PaginationRules interface{} `pulumi:"paginationRules"`
	// The HTTP request body to the RESTful API if requestMethod is POST. Type: string (or Expression with resultType string).
	RequestBody interface{} `pulumi:"requestBody"`
	// The time to await before sending next page request.
	RequestInterval interface{} `pulumi:"requestInterval"`
	// The HTTP method used to call the RESTful API. The default is GET. Type: string (or Expression with resultType string).
	RequestMethod interface{} `pulumi:"requestMethod"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// Copy source type.
	// Expected value is 'RestSource'.
	Type string `pulumi:"type"`
}

// A copy activity Rest service source.
type RestSourceResponse struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns interface{} `pulumi:"additionalColumns"`
	// The additional HTTP headers in the request to the RESTful API. Type: string (or Expression with resultType string).
	AdditionalHeaders interface{} `pulumi:"additionalHeaders"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The timeout (TimeSpan) to get an HTTP response. It is the timeout to get a response, not the timeout to read response data. Default value: 00:01:40. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	HttpRequestTimeout interface{} `pulumi:"httpRequestTimeout"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// The pagination rules to compose next page requests. Type: string (or Expression with resultType string).
	PaginationRules interface{} `pulumi:"paginationRules"`
	// The HTTP request body to the RESTful API if requestMethod is POST. Type: string (or Expression with resultType string).
	RequestBody interface{} `pulumi:"requestBody"`
	// The time to await before sending next page request.
	RequestInterval interface{} `pulumi:"requestInterval"`
	// The HTTP method used to call the RESTful API. The default is GET. Type: string (or Expression with resultType string).
	RequestMethod interface{} `pulumi:"requestMethod"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// Copy source type.
	// Expected value is 'RestSource'.
	Type string `pulumi:"type"`
}

// Execution policy for an activity.
type RetryPolicy struct {
	// Maximum ordinary retry attempts. Default is 0. Type: integer (or Expression with resultType integer), minimum: 0.
	Count interface{} `pulumi:"count"`
	// Interval between retries in seconds. Default is 30.
	IntervalInSeconds *int `pulumi:"intervalInSeconds"`
}

// Execution policy for an activity.
type RetryPolicyResponse struct {
	// Maximum ordinary retry attempts. Default is 0. Type: integer (or Expression with resultType integer), minimum: 0.
	Count interface{} `pulumi:"count"`
	// Interval between retries in seconds. Default is 30.
	IntervalInSeconds *int `pulumi:"intervalInSeconds"`
}

// SSIS access credential.
type SSISAccessCredential struct {
	// Domain for windows authentication.
	Domain interface{} `pulumi:"domain"`
	// Password for windows authentication.
	Password interface{} `pulumi:"password"`
	// UseName for windows authentication.
	UserName interface{} `pulumi:"userName"`
}

// SSIS access credential.
type SSISAccessCredentialResponse struct {
	// Domain for windows authentication.
	Domain interface{} `pulumi:"domain"`
	// Password for windows authentication.
	Password interface{} `pulumi:"password"`
	// UseName for windows authentication.
	UserName interface{} `pulumi:"userName"`
}

// SSIS embedded child package.
type SSISChildPackage struct {
	// Content for embedded child package. Type: string (or Expression with resultType string).
	PackageContent interface{} `pulumi:"packageContent"`
	// Last modified date for embedded child package.
	PackageLastModifiedDate *string `pulumi:"packageLastModifiedDate"`
	// Name for embedded child package.
	PackageName *string `pulumi:"packageName"`
	// Path for embedded child package. Type: string (or Expression with resultType string).
	PackagePath interface{} `pulumi:"packagePath"`
}

// SSIS embedded child package.
type SSISChildPackageResponse struct {
	// Content for embedded child package. Type: string (or Expression with resultType string).
	PackageContent interface{} `pulumi:"packageContent"`
	// Last modified date for embedded child package.
	PackageLastModifiedDate *string `pulumi:"packageLastModifiedDate"`
	// Name for embedded child package.
	PackageName *string `pulumi:"packageName"`
	// Path for embedded child package. Type: string (or Expression with resultType string).
	PackagePath interface{} `pulumi:"packagePath"`
}

// SSIS package execution credential.
type SSISExecutionCredential struct {
	// Domain for windows authentication.
	Domain interface{} `pulumi:"domain"`
	// Password for windows authentication.
	Password SecureString `pulumi:"password"`
	// UseName for windows authentication.
	UserName interface{} `pulumi:"userName"`
}

// SSIS package execution credential.
type SSISExecutionCredentialResponse struct {
	// Domain for windows authentication.
	Domain interface{} `pulumi:"domain"`
	// Password for windows authentication.
	Password SecureStringResponse `pulumi:"password"`
	// UseName for windows authentication.
	UserName interface{} `pulumi:"userName"`
}

// SSIS execution parameter.
type SSISExecutionParameter struct {
	// SSIS package execution parameter value. Type: string (or Expression with resultType string).
	Value interface{} `pulumi:"value"`
}

// SSIS execution parameter.
type SSISExecutionParameterResponse struct {
	// SSIS package execution parameter value. Type: string (or Expression with resultType string).
	Value interface{} `pulumi:"value"`
}

// SSIS package execution log location
type SSISLogLocation struct {
	// The package execution log access credential.
	AccessCredential *SSISAccessCredential `pulumi:"accessCredential"`
	// The SSIS package execution log path. Type: string (or Expression with resultType string).
	LogPath interface{} `pulumi:"logPath"`
	// Specifies the interval to refresh log. The default interval is 5 minutes. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	LogRefreshInterval interface{} `pulumi:"logRefreshInterval"`
	// The type of SSIS log location.
	Type string `pulumi:"type"`
}

// SSIS package execution log location
type SSISLogLocationResponse struct {
	// The package execution log access credential.
	AccessCredential *SSISAccessCredentialResponse `pulumi:"accessCredential"`
	// The SSIS package execution log path. Type: string (or Expression with resultType string).
	LogPath interface{} `pulumi:"logPath"`
	// Specifies the interval to refresh log. The default interval is 5 minutes. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	LogRefreshInterval interface{} `pulumi:"logRefreshInterval"`
	// The type of SSIS log location.
	Type string `pulumi:"type"`
}

// SSIS package location.
type SSISPackageLocation struct {
	// The package access credential.
	AccessCredential *SSISAccessCredential `pulumi:"accessCredential"`
	// The embedded child package list.
	ChildPackages []SSISChildPackage `pulumi:"childPackages"`
	// The configuration file access credential.
	ConfigurationAccessCredential *SSISAccessCredential `pulumi:"configurationAccessCredential"`
	// The configuration file of the package execution. Type: string (or Expression with resultType string).
	ConfigurationPath interface{} `pulumi:"configurationPath"`
	// The embedded package content. Type: string (or Expression with resultType string).
	PackageContent interface{} `pulumi:"packageContent"`
	// The embedded package last modified date.
	PackageLastModifiedDate *string `pulumi:"packageLastModifiedDate"`
	// The package name.
	PackageName *string `pulumi:"packageName"`
	// Password of the package.
	PackagePassword interface{} `pulumi:"packagePassword"`
	// The SSIS package path. Type: string (or Expression with resultType string).
	PackagePath interface{} `pulumi:"packagePath"`
	// The type of SSIS package location.
	Type *string `pulumi:"type"`
}

// SSIS package location.
type SSISPackageLocationResponse struct {
	// The package access credential.
	AccessCredential *SSISAccessCredentialResponse `pulumi:"accessCredential"`
	// The embedded child package list.
	ChildPackages []SSISChildPackageResponse `pulumi:"childPackages"`
	// The configuration file access credential.
	ConfigurationAccessCredential *SSISAccessCredentialResponse `pulumi:"configurationAccessCredential"`
	// The configuration file of the package execution. Type: string (or Expression with resultType string).
	ConfigurationPath interface{} `pulumi:"configurationPath"`
	// The embedded package content. Type: string (or Expression with resultType string).
	PackageContent interface{} `pulumi:"packageContent"`
	// The embedded package last modified date.
	PackageLastModifiedDate *string `pulumi:"packageLastModifiedDate"`
	// The package name.
	PackageName *string `pulumi:"packageName"`
	// Password of the package.
	PackagePassword interface{} `pulumi:"packagePassword"`
	// The SSIS package path. Type: string (or Expression with resultType string).
	PackagePath interface{} `pulumi:"packagePath"`
	// The type of SSIS package location.
	Type *string `pulumi:"type"`
}

// SSIS property override.
type SSISPropertyOverride struct {
	// Whether SSIS package property override value is sensitive data. Value will be encrypted in SSISDB if it is true
	IsSensitive *bool `pulumi:"isSensitive"`
	// SSIS package property override value. Type: string (or Expression with resultType string).
	Value interface{} `pulumi:"value"`
}

// SSIS property override.
type SSISPropertyOverrideResponse struct {
	// Whether SSIS package property override value is sensitive data. Value will be encrypted in SSISDB if it is true
	IsSensitive *bool `pulumi:"isSensitive"`
	// SSIS package property override value. Type: string (or Expression with resultType string).
	Value interface{} `pulumi:"value"`
}

// Linked service for Salesforce.
type SalesforceLinkedService struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The Salesforce API version used in ADF. Type: string (or Expression with resultType string).
	ApiVersion interface{} `pulumi:"apiVersion"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference `pulumi:"connectVia"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential interface{} `pulumi:"encryptedCredential"`
	// The URL of Salesforce instance. Default is 'https://login.salesforce.com'. To copy data from sandbox, specify 'https://test.salesforce.com'. To copy data from custom domain, specify, for example, 'https://[domain].my.salesforce.com'. Type: string (or Expression with resultType string).
	EnvironmentUrl interface{} `pulumi:"environmentUrl"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// The password for Basic authentication of the Salesforce instance.
	Password interface{} `pulumi:"password"`
	// The security token is optional to remotely access Salesforce instance.
	SecurityToken interface{} `pulumi:"securityToken"`
	// Type of linked service.
	// Expected value is 'Salesforce'.
	Type string `pulumi:"type"`
	// The username for Basic authentication of the Salesforce instance. Type: string (or Expression with resultType string).
	Username interface{} `pulumi:"username"`
}

// Linked service for Salesforce.
type SalesforceLinkedServiceResponse struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The Salesforce API version used in ADF. Type: string (or Expression with resultType string).
	ApiVersion interface{} `pulumi:"apiVersion"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReferenceResponse `pulumi:"connectVia"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential interface{} `pulumi:"encryptedCredential"`
	// The URL of Salesforce instance. Default is 'https://login.salesforce.com'. To copy data from sandbox, specify 'https://test.salesforce.com'. To copy data from custom domain, specify, for example, 'https://[domain].my.salesforce.com'. Type: string (or Expression with resultType string).
	EnvironmentUrl interface{} `pulumi:"environmentUrl"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// The password for Basic authentication of the Salesforce instance.
	Password interface{} `pulumi:"password"`
	// The security token is optional to remotely access Salesforce instance.
	SecurityToken interface{} `pulumi:"securityToken"`
	// Type of linked service.
	// Expected value is 'Salesforce'.
	Type string `pulumi:"type"`
	// The username for Basic authentication of the Salesforce instance. Type: string (or Expression with resultType string).
	Username interface{} `pulumi:"username"`
}

// Salesforce Marketing Cloud linked service.
type SalesforceMarketingCloudLinkedService struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The client ID associated with the Salesforce Marketing Cloud application. Type: string (or Expression with resultType string).
	ClientId interface{} `pulumi:"clientId"`
	// The client secret associated with the Salesforce Marketing Cloud application. Type: string (or Expression with resultType string).
	ClientSecret interface{} `pulumi:"clientSecret"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference `pulumi:"connectVia"`
	// Properties used to connect to Salesforce Marketing Cloud. It is mutually exclusive with any other properties in the linked service. Type: object.
	ConnectionProperties interface{} `pulumi:"connectionProperties"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential interface{} `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Type of linked service.
	// Expected value is 'SalesforceMarketingCloud'.
	Type string `pulumi:"type"`
	// Specifies whether the data source endpoints are encrypted using HTTPS. The default value is true. Type: boolean (or Expression with resultType boolean).
	UseEncryptedEndpoints interface{} `pulumi:"useEncryptedEndpoints"`
	// Specifies whether to require the host name in the server's certificate to match the host name of the server when connecting over SSL. The default value is true. Type: boolean (or Expression with resultType boolean).
	UseHostVerification interface{} `pulumi:"useHostVerification"`
	// Specifies whether to verify the identity of the server when connecting over SSL. The default value is true. Type: boolean (or Expression with resultType boolean).
	UsePeerVerification interface{} `pulumi:"usePeerVerification"`
}

// Salesforce Marketing Cloud linked service.
type SalesforceMarketingCloudLinkedServiceResponse struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The client ID associated with the Salesforce Marketing Cloud application. Type: string (or Expression with resultType string).
	ClientId interface{} `pulumi:"clientId"`
	// The client secret associated with the Salesforce Marketing Cloud application. Type: string (or Expression with resultType string).
	ClientSecret interface{} `pulumi:"clientSecret"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReferenceResponse `pulumi:"connectVia"`
	// Properties used to connect to Salesforce Marketing Cloud. It is mutually exclusive with any other properties in the linked service. Type: object.
	ConnectionProperties interface{} `pulumi:"connectionProperties"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential interface{} `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Type of linked service.
	// Expected value is 'SalesforceMarketingCloud'.
	Type string `pulumi:"type"`
	// Specifies whether the data source endpoints are encrypted using HTTPS. The default value is true. Type: boolean (or Expression with resultType boolean).
	UseEncryptedEndpoints interface{} `pulumi:"useEncryptedEndpoints"`
	// Specifies whether to require the host name in the server's certificate to match the host name of the server when connecting over SSL. The default value is true. Type: boolean (or Expression with resultType boolean).
	UseHostVerification interface{} `pulumi:"useHostVerification"`
	// Specifies whether to verify the identity of the server when connecting over SSL. The default value is true. Type: boolean (or Expression with resultType boolean).
	UsePeerVerification interface{} `pulumi:"usePeerVerification"`
}

// Salesforce Marketing Cloud dataset.
type SalesforceMarketingCloudObjectDataset struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReference `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// The table name. Type: string (or Expression with resultType string).
	TableName interface{} `pulumi:"tableName"`
	// Type of dataset.
	// Expected value is 'SalesforceMarketingCloudObject'.
	Type string `pulumi:"type"`
}

// Salesforce Marketing Cloud dataset.
type SalesforceMarketingCloudObjectDatasetResponse struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetResponseFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceResponse `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// The table name. Type: string (or Expression with resultType string).
	TableName interface{} `pulumi:"tableName"`
	// Type of dataset.
	// Expected value is 'SalesforceMarketingCloudObject'.
	Type string `pulumi:"type"`
}

// A copy activity Salesforce Marketing Cloud source.
type SalesforceMarketingCloudSource struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns interface{} `pulumi:"additionalColumns"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// A query to retrieve data from source. Type: string (or Expression with resultType string).
	Query interface{} `pulumi:"query"`
	// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	QueryTimeout interface{} `pulumi:"queryTimeout"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// Copy source type.
	// Expected value is 'SalesforceMarketingCloudSource'.
	Type string `pulumi:"type"`
}

// A copy activity Salesforce Marketing Cloud source.
type SalesforceMarketingCloudSourceResponse struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns interface{} `pulumi:"additionalColumns"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// A query to retrieve data from source. Type: string (or Expression with resultType string).
	Query interface{} `pulumi:"query"`
	// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	QueryTimeout interface{} `pulumi:"queryTimeout"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// Copy source type.
	// Expected value is 'SalesforceMarketingCloudSource'.
	Type string `pulumi:"type"`
}

// The Salesforce object dataset.
type SalesforceObjectDataset struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReference `pulumi:"linkedServiceName"`
	// The Salesforce object API name. Type: string (or Expression with resultType string).
	ObjectApiName interface{} `pulumi:"objectApiName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// Type of dataset.
	// Expected value is 'SalesforceObject'.
	Type string `pulumi:"type"`
}

// The Salesforce object dataset.
type SalesforceObjectDatasetResponse struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetResponseFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceResponse `pulumi:"linkedServiceName"`
	// The Salesforce object API name. Type: string (or Expression with resultType string).
	ObjectApiName interface{} `pulumi:"objectApiName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// Type of dataset.
	// Expected value is 'SalesforceObject'.
	Type string `pulumi:"type"`
}

// Linked service for Salesforce Service Cloud.
type SalesforceServiceCloudLinkedService struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The Salesforce API version used in ADF. Type: string (or Expression with resultType string).
	ApiVersion interface{} `pulumi:"apiVersion"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference `pulumi:"connectVia"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential interface{} `pulumi:"encryptedCredential"`
	// The URL of Salesforce Service Cloud instance. Default is 'https://login.salesforce.com'. To copy data from sandbox, specify 'https://test.salesforce.com'. To copy data from custom domain, specify, for example, 'https://[domain].my.salesforce.com'. Type: string (or Expression with resultType string).
	EnvironmentUrl interface{} `pulumi:"environmentUrl"`
	// Extended properties appended to the connection string. Type: string (or Expression with resultType string).
	ExtendedProperties interface{} `pulumi:"extendedProperties"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// The password for Basic authentication of the Salesforce instance.
	Password interface{} `pulumi:"password"`
	// The security token is optional to remotely access Salesforce instance.
	SecurityToken interface{} `pulumi:"securityToken"`
	// Type of linked service.
	// Expected value is 'SalesforceServiceCloud'.
	Type string `pulumi:"type"`
	// The username for Basic authentication of the Salesforce instance. Type: string (or Expression with resultType string).
	Username interface{} `pulumi:"username"`
}

// Linked service for Salesforce Service Cloud.
type SalesforceServiceCloudLinkedServiceResponse struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The Salesforce API version used in ADF. Type: string (or Expression with resultType string).
	ApiVersion interface{} `pulumi:"apiVersion"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReferenceResponse `pulumi:"connectVia"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential interface{} `pulumi:"encryptedCredential"`
	// The URL of Salesforce Service Cloud instance. Default is 'https://login.salesforce.com'. To copy data from sandbox, specify 'https://test.salesforce.com'. To copy data from custom domain, specify, for example, 'https://[domain].my.salesforce.com'. Type: string (or Expression with resultType string).
	EnvironmentUrl interface{} `pulumi:"environmentUrl"`
	// Extended properties appended to the connection string. Type: string (or Expression with resultType string).
	ExtendedProperties interface{} `pulumi:"extendedProperties"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// The password for Basic authentication of the Salesforce instance.
	Password interface{} `pulumi:"password"`
	// The security token is optional to remotely access Salesforce instance.
	SecurityToken interface{} `pulumi:"securityToken"`
	// Type of linked service.
	// Expected value is 'SalesforceServiceCloud'.
	Type string `pulumi:"type"`
	// The username for Basic authentication of the Salesforce instance. Type: string (or Expression with resultType string).
	Username interface{} `pulumi:"username"`
}

// The Salesforce Service Cloud object dataset.
type SalesforceServiceCloudObjectDataset struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReference `pulumi:"linkedServiceName"`
	// The Salesforce Service Cloud object API name. Type: string (or Expression with resultType string).
	ObjectApiName interface{} `pulumi:"objectApiName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// Type of dataset.
	// Expected value is 'SalesforceServiceCloudObject'.
	Type string `pulumi:"type"`
}

// The Salesforce Service Cloud object dataset.
type SalesforceServiceCloudObjectDatasetResponse struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetResponseFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceResponse `pulumi:"linkedServiceName"`
	// The Salesforce Service Cloud object API name. Type: string (or Expression with resultType string).
	ObjectApiName interface{} `pulumi:"objectApiName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// Type of dataset.
	// Expected value is 'SalesforceServiceCloudObject'.
	Type string `pulumi:"type"`
}

// A copy activity Salesforce Service Cloud sink.
type SalesforceServiceCloudSink struct {
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The name of the external ID field for upsert operation. Default value is 'Id' column. Type: string (or Expression with resultType string).
	ExternalIdFieldName interface{} `pulumi:"externalIdFieldName"`
	// The flag indicating whether or not to ignore null values from input dataset (except key fields) during write operation. Default value is false. If set it to true, it means ADF will leave the data in the destination object unchanged when doing upsert/update operation and insert defined default value when doing insert operation, versus ADF will update the data in the destination object to NULL when doing upsert/update operation and insert NULL value when doing insert operation. Type: boolean (or Expression with resultType boolean).
	IgnoreNullValues interface{} `pulumi:"ignoreNullValues"`
	// The maximum concurrent connection count for the sink data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// Sink retry count. Type: integer (or Expression with resultType integer).
	SinkRetryCount interface{} `pulumi:"sinkRetryCount"`
	// Sink retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SinkRetryWait interface{} `pulumi:"sinkRetryWait"`
	// Copy sink type.
	// Expected value is 'SalesforceServiceCloudSink'.
	Type string `pulumi:"type"`
	// Write batch size. Type: integer (or Expression with resultType integer), minimum: 0.
	WriteBatchSize interface{} `pulumi:"writeBatchSize"`
	// Write batch timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	WriteBatchTimeout interface{} `pulumi:"writeBatchTimeout"`
	// The write behavior for the operation. Default is Insert.
	WriteBehavior *string `pulumi:"writeBehavior"`
}

// A copy activity Salesforce Service Cloud sink.
type SalesforceServiceCloudSinkResponse struct {
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The name of the external ID field for upsert operation. Default value is 'Id' column. Type: string (or Expression with resultType string).
	ExternalIdFieldName interface{} `pulumi:"externalIdFieldName"`
	// The flag indicating whether or not to ignore null values from input dataset (except key fields) during write operation. Default value is false. If set it to true, it means ADF will leave the data in the destination object unchanged when doing upsert/update operation and insert defined default value when doing insert operation, versus ADF will update the data in the destination object to NULL when doing upsert/update operation and insert NULL value when doing insert operation. Type: boolean (or Expression with resultType boolean).
	IgnoreNullValues interface{} `pulumi:"ignoreNullValues"`
	// The maximum concurrent connection count for the sink data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// Sink retry count. Type: integer (or Expression with resultType integer).
	SinkRetryCount interface{} `pulumi:"sinkRetryCount"`
	// Sink retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SinkRetryWait interface{} `pulumi:"sinkRetryWait"`
	// Copy sink type.
	// Expected value is 'SalesforceServiceCloudSink'.
	Type string `pulumi:"type"`
	// Write batch size. Type: integer (or Expression with resultType integer), minimum: 0.
	WriteBatchSize interface{} `pulumi:"writeBatchSize"`
	// Write batch timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	WriteBatchTimeout interface{} `pulumi:"writeBatchTimeout"`
	// The write behavior for the operation. Default is Insert.
	WriteBehavior *string `pulumi:"writeBehavior"`
}

// A copy activity Salesforce Service Cloud source.
type SalesforceServiceCloudSource struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns interface{} `pulumi:"additionalColumns"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// Database query. Type: string (or Expression with resultType string).
	Query interface{} `pulumi:"query"`
	// The read behavior for the operation. Default is Query.
	ReadBehavior *string `pulumi:"readBehavior"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// Copy source type.
	// Expected value is 'SalesforceServiceCloudSource'.
	Type string `pulumi:"type"`
}

// A copy activity Salesforce Service Cloud source.
type SalesforceServiceCloudSourceResponse struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns interface{} `pulumi:"additionalColumns"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// Database query. Type: string (or Expression with resultType string).
	Query interface{} `pulumi:"query"`
	// The read behavior for the operation. Default is Query.
	ReadBehavior *string `pulumi:"readBehavior"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// Copy source type.
	// Expected value is 'SalesforceServiceCloudSource'.
	Type string `pulumi:"type"`
}

// A copy activity Salesforce sink.
type SalesforceSink struct {
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The name of the external ID field for upsert operation. Default value is 'Id' column. Type: string (or Expression with resultType string).
	ExternalIdFieldName interface{} `pulumi:"externalIdFieldName"`
	// The flag indicating whether or not to ignore null values from input dataset (except key fields) during write operation. Default value is false. If set it to true, it means ADF will leave the data in the destination object unchanged when doing upsert/update operation and insert defined default value when doing insert operation, versus ADF will update the data in the destination object to NULL when doing upsert/update operation and insert NULL value when doing insert operation. Type: boolean (or Expression with resultType boolean).
	IgnoreNullValues interface{} `pulumi:"ignoreNullValues"`
	// The maximum concurrent connection count for the sink data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// Sink retry count. Type: integer (or Expression with resultType integer).
	SinkRetryCount interface{} `pulumi:"sinkRetryCount"`
	// Sink retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SinkRetryWait interface{} `pulumi:"sinkRetryWait"`
	// Copy sink type.
	// Expected value is 'SalesforceSink'.
	Type string `pulumi:"type"`
	// Write batch size. Type: integer (or Expression with resultType integer), minimum: 0.
	WriteBatchSize interface{} `pulumi:"writeBatchSize"`
	// Write batch timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	WriteBatchTimeout interface{} `pulumi:"writeBatchTimeout"`
	// The write behavior for the operation. Default is Insert.
	WriteBehavior *string `pulumi:"writeBehavior"`
}

// A copy activity Salesforce sink.
type SalesforceSinkResponse struct {
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The name of the external ID field for upsert operation. Default value is 'Id' column. Type: string (or Expression with resultType string).
	ExternalIdFieldName interface{} `pulumi:"externalIdFieldName"`
	// The flag indicating whether or not to ignore null values from input dataset (except key fields) during write operation. Default value is false. If set it to true, it means ADF will leave the data in the destination object unchanged when doing upsert/update operation and insert defined default value when doing insert operation, versus ADF will update the data in the destination object to NULL when doing upsert/update operation and insert NULL value when doing insert operation. Type: boolean (or Expression with resultType boolean).
	IgnoreNullValues interface{} `pulumi:"ignoreNullValues"`
	// The maximum concurrent connection count for the sink data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// Sink retry count. Type: integer (or Expression with resultType integer).
	SinkRetryCount interface{} `pulumi:"sinkRetryCount"`
	// Sink retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SinkRetryWait interface{} `pulumi:"sinkRetryWait"`
	// Copy sink type.
	// Expected value is 'SalesforceSink'.
	Type string `pulumi:"type"`
	// Write batch size. Type: integer (or Expression with resultType integer), minimum: 0.
	WriteBatchSize interface{} `pulumi:"writeBatchSize"`
	// Write batch timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	WriteBatchTimeout interface{} `pulumi:"writeBatchTimeout"`
	// The write behavior for the operation. Default is Insert.
	WriteBehavior *string `pulumi:"writeBehavior"`
}

// A copy activity Salesforce source.
type SalesforceSource struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns interface{} `pulumi:"additionalColumns"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// Database query. Type: string (or Expression with resultType string).
	Query interface{} `pulumi:"query"`
	// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	QueryTimeout interface{} `pulumi:"queryTimeout"`
	// The read behavior for the operation. Default is Query.
	ReadBehavior *string `pulumi:"readBehavior"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// Copy source type.
	// Expected value is 'SalesforceSource'.
	Type string `pulumi:"type"`
}

// A copy activity Salesforce source.
type SalesforceSourceResponse struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns interface{} `pulumi:"additionalColumns"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// Database query. Type: string (or Expression with resultType string).
	Query interface{} `pulumi:"query"`
	// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	QueryTimeout interface{} `pulumi:"queryTimeout"`
	// The read behavior for the operation. Default is Query.
	ReadBehavior *string `pulumi:"readBehavior"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// Copy source type.
	// Expected value is 'SalesforceSource'.
	Type string `pulumi:"type"`
}

// SAP Business Warehouse Linked Service.
type SapBWLinkedService struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// Client ID of the client on the BW system. (Usually a three-digit decimal number represented as a string) Type: string (or Expression with resultType string).
	ClientId interface{} `pulumi:"clientId"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference `pulumi:"connectVia"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential interface{} `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Password to access the SAP BW server.
	Password interface{} `pulumi:"password"`
	// Host name of the SAP BW instance. Type: string (or Expression with resultType string).
	Server interface{} `pulumi:"server"`
	// System number of the BW system. (Usually a two-digit decimal number represented as a string.) Type: string (or Expression with resultType string).
	SystemNumber interface{} `pulumi:"systemNumber"`
	// Type of linked service.
	// Expected value is 'SapBW'.
	Type string `pulumi:"type"`
	// Username to access the SAP BW server. Type: string (or Expression with resultType string).
	UserName interface{} `pulumi:"userName"`
}

// SAP Business Warehouse Linked Service.
type SapBWLinkedServiceResponse struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// Client ID of the client on the BW system. (Usually a three-digit decimal number represented as a string) Type: string (or Expression with resultType string).
	ClientId interface{} `pulumi:"clientId"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReferenceResponse `pulumi:"connectVia"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential interface{} `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Password to access the SAP BW server.
	Password interface{} `pulumi:"password"`
	// Host name of the SAP BW instance. Type: string (or Expression with resultType string).
	Server interface{} `pulumi:"server"`
	// System number of the BW system. (Usually a two-digit decimal number represented as a string.) Type: string (or Expression with resultType string).
	SystemNumber interface{} `pulumi:"systemNumber"`
	// Type of linked service.
	// Expected value is 'SapBW'.
	Type string `pulumi:"type"`
	// Username to access the SAP BW server. Type: string (or Expression with resultType string).
	UserName interface{} `pulumi:"userName"`
}

// The SAP BW cube dataset.
type SapBwCubeDataset struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReference `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// Type of dataset.
	// Expected value is 'SapBwCube'.
	Type string `pulumi:"type"`
}

// The SAP BW cube dataset.
type SapBwCubeDatasetResponse struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetResponseFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceResponse `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// Type of dataset.
	// Expected value is 'SapBwCube'.
	Type string `pulumi:"type"`
}

// A copy activity source for SapBW server via MDX.
type SapBwSource struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns interface{} `pulumi:"additionalColumns"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// MDX query. Type: string (or Expression with resultType string).
	Query interface{} `pulumi:"query"`
	// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	QueryTimeout interface{} `pulumi:"queryTimeout"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// Copy source type.
	// Expected value is 'SapBwSource'.
	Type string `pulumi:"type"`
}

// A copy activity source for SapBW server via MDX.
type SapBwSourceResponse struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns interface{} `pulumi:"additionalColumns"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// MDX query. Type: string (or Expression with resultType string).
	Query interface{} `pulumi:"query"`
	// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	QueryTimeout interface{} `pulumi:"queryTimeout"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// Copy source type.
	// Expected value is 'SapBwSource'.
	Type string `pulumi:"type"`
}

// Linked service for SAP Cloud for Customer.
type SapCloudForCustomerLinkedService struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference `pulumi:"connectVia"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Either encryptedCredential or username/password must be provided. Type: string (or Expression with resultType string).
	EncryptedCredential interface{} `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// The password for Basic authentication.
	Password interface{} `pulumi:"password"`
	// Type of linked service.
	// Expected value is 'SapCloudForCustomer'.
	Type string `pulumi:"type"`
	// The URL of SAP Cloud for Customer OData API. For example, '[https://[tenantname].crm.ondemand.com/sap/c4c/odata/v1]'. Type: string (or Expression with resultType string).
	Url interface{} `pulumi:"url"`
	// The username for Basic authentication. Type: string (or Expression with resultType string).
	Username interface{} `pulumi:"username"`
}

// Linked service for SAP Cloud for Customer.
type SapCloudForCustomerLinkedServiceResponse struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReferenceResponse `pulumi:"connectVia"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Either encryptedCredential or username/password must be provided. Type: string (or Expression with resultType string).
	EncryptedCredential interface{} `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// The password for Basic authentication.
	Password interface{} `pulumi:"password"`
	// Type of linked service.
	// Expected value is 'SapCloudForCustomer'.
	Type string `pulumi:"type"`
	// The URL of SAP Cloud for Customer OData API. For example, '[https://[tenantname].crm.ondemand.com/sap/c4c/odata/v1]'. Type: string (or Expression with resultType string).
	Url interface{} `pulumi:"url"`
	// The username for Basic authentication. Type: string (or Expression with resultType string).
	Username interface{} `pulumi:"username"`
}

// The path of the SAP Cloud for Customer OData entity.
type SapCloudForCustomerResourceDataset struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReference `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// The path of the SAP Cloud for Customer OData entity. Type: string (or Expression with resultType string).
	Path interface{} `pulumi:"path"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// Type of dataset.
	// Expected value is 'SapCloudForCustomerResource'.
	Type string `pulumi:"type"`
}

// The path of the SAP Cloud for Customer OData entity.
type SapCloudForCustomerResourceDatasetResponse struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetResponseFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceResponse `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// The path of the SAP Cloud for Customer OData entity. Type: string (or Expression with resultType string).
	Path interface{} `pulumi:"path"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// Type of dataset.
	// Expected value is 'SapCloudForCustomerResource'.
	Type string `pulumi:"type"`
}

// A copy activity SAP Cloud for Customer sink.
type SapCloudForCustomerSink struct {
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The timeout (TimeSpan) to get an HTTP response. It is the timeout to get a response, not the timeout to read response data. Default value: 00:05:00. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	HttpRequestTimeout interface{} `pulumi:"httpRequestTimeout"`
	// The maximum concurrent connection count for the sink data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// Sink retry count. Type: integer (or Expression with resultType integer).
	SinkRetryCount interface{} `pulumi:"sinkRetryCount"`
	// Sink retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SinkRetryWait interface{} `pulumi:"sinkRetryWait"`
	// Copy sink type.
	// Expected value is 'SapCloudForCustomerSink'.
	Type string `pulumi:"type"`
	// Write batch size. Type: integer (or Expression with resultType integer), minimum: 0.
	WriteBatchSize interface{} `pulumi:"writeBatchSize"`
	// Write batch timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	WriteBatchTimeout interface{} `pulumi:"writeBatchTimeout"`
	// The write behavior for the operation. Default is 'Insert'.
	WriteBehavior *string `pulumi:"writeBehavior"`
}

// A copy activity SAP Cloud for Customer sink.
type SapCloudForCustomerSinkResponse struct {
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The timeout (TimeSpan) to get an HTTP response. It is the timeout to get a response, not the timeout to read response data. Default value: 00:05:00. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	HttpRequestTimeout interface{} `pulumi:"httpRequestTimeout"`
	// The maximum concurrent connection count for the sink data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// Sink retry count. Type: integer (or Expression with resultType integer).
	SinkRetryCount interface{} `pulumi:"sinkRetryCount"`
	// Sink retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SinkRetryWait interface{} `pulumi:"sinkRetryWait"`
	// Copy sink type.
	// Expected value is 'SapCloudForCustomerSink'.
	Type string `pulumi:"type"`
	// Write batch size. Type: integer (or Expression with resultType integer), minimum: 0.
	WriteBatchSize interface{} `pulumi:"writeBatchSize"`
	// Write batch timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	WriteBatchTimeout interface{} `pulumi:"writeBatchTimeout"`
	// The write behavior for the operation. Default is 'Insert'.
	WriteBehavior *string `pulumi:"writeBehavior"`
}

// A copy activity source for SAP Cloud for Customer source.
type SapCloudForCustomerSource struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns interface{} `pulumi:"additionalColumns"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The timeout (TimeSpan) to get an HTTP response. It is the timeout to get a response, not the timeout to read response data. Default value: 00:05:00. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	HttpRequestTimeout interface{} `pulumi:"httpRequestTimeout"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// SAP Cloud for Customer OData query. For example, "$top=1". Type: string (or Expression with resultType string).
	Query interface{} `pulumi:"query"`
	// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	QueryTimeout interface{} `pulumi:"queryTimeout"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// Copy source type.
	// Expected value is 'SapCloudForCustomerSource'.
	Type string `pulumi:"type"`
}

// A copy activity source for SAP Cloud for Customer source.
type SapCloudForCustomerSourceResponse struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns interface{} `pulumi:"additionalColumns"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The timeout (TimeSpan) to get an HTTP response. It is the timeout to get a response, not the timeout to read response data. Default value: 00:05:00. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	HttpRequestTimeout interface{} `pulumi:"httpRequestTimeout"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// SAP Cloud for Customer OData query. For example, "$top=1". Type: string (or Expression with resultType string).
	Query interface{} `pulumi:"query"`
	// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	QueryTimeout interface{} `pulumi:"queryTimeout"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// Copy source type.
	// Expected value is 'SapCloudForCustomerSource'.
	Type string `pulumi:"type"`
}

// Linked service for SAP ERP Central Component(SAP ECC).
type SapEccLinkedService struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference `pulumi:"connectVia"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Either encryptedCredential or username/password must be provided. Type: string (or Expression with resultType string).
	EncryptedCredential *string `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// The password for Basic authentication.
	Password interface{} `pulumi:"password"`
	// Type of linked service.
	// Expected value is 'SapEcc'.
	Type string `pulumi:"type"`
	// The URL of SAP ECC OData API. For example, '[https://hostname:port/sap/opu/odata/sap/servicename/]'. Type: string (or Expression with resultType string).
	Url string `pulumi:"url"`
	// The username for Basic authentication. Type: string (or Expression with resultType string).
	Username *string `pulumi:"username"`
}

// Linked service for SAP ERP Central Component(SAP ECC).
type SapEccLinkedServiceResponse struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReferenceResponse `pulumi:"connectVia"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Either encryptedCredential or username/password must be provided. Type: string (or Expression with resultType string).
	EncryptedCredential *string `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// The password for Basic authentication.
	Password interface{} `pulumi:"password"`
	// Type of linked service.
	// Expected value is 'SapEcc'.
	Type string `pulumi:"type"`
	// The URL of SAP ECC OData API. For example, '[https://hostname:port/sap/opu/odata/sap/servicename/]'. Type: string (or Expression with resultType string).
	Url string `pulumi:"url"`
	// The username for Basic authentication. Type: string (or Expression with resultType string).
	Username *string `pulumi:"username"`
}

// The path of the SAP ECC OData entity.
type SapEccResourceDataset struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReference `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// The path of the SAP ECC OData entity. Type: string (or Expression with resultType string).
	Path interface{} `pulumi:"path"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// Type of dataset.
	// Expected value is 'SapEccResource'.
	Type string `pulumi:"type"`
}

// The path of the SAP ECC OData entity.
type SapEccResourceDatasetResponse struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetResponseFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceResponse `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// The path of the SAP ECC OData entity. Type: string (or Expression with resultType string).
	Path interface{} `pulumi:"path"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// Type of dataset.
	// Expected value is 'SapEccResource'.
	Type string `pulumi:"type"`
}

// A copy activity source for SAP ECC source.
type SapEccSource struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns interface{} `pulumi:"additionalColumns"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The timeout (TimeSpan) to get an HTTP response. It is the timeout to get a response, not the timeout to read response data. Default value: 00:05:00. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	HttpRequestTimeout interface{} `pulumi:"httpRequestTimeout"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// SAP ECC OData query. For example, "$top=1". Type: string (or Expression with resultType string).
	Query interface{} `pulumi:"query"`
	// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	QueryTimeout interface{} `pulumi:"queryTimeout"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// Copy source type.
	// Expected value is 'SapEccSource'.
	Type string `pulumi:"type"`
}

// A copy activity source for SAP ECC source.
type SapEccSourceResponse struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns interface{} `pulumi:"additionalColumns"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The timeout (TimeSpan) to get an HTTP response. It is the timeout to get a response, not the timeout to read response data. Default value: 00:05:00. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	HttpRequestTimeout interface{} `pulumi:"httpRequestTimeout"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// SAP ECC OData query. For example, "$top=1". Type: string (or Expression with resultType string).
	Query interface{} `pulumi:"query"`
	// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	QueryTimeout interface{} `pulumi:"queryTimeout"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// Copy source type.
	// Expected value is 'SapEccSource'.
	Type string `pulumi:"type"`
}

// SAP HANA Linked Service.
type SapHanaLinkedService struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The authentication type to be used to connect to the SAP HANA server.
	AuthenticationType *string `pulumi:"authenticationType"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference `pulumi:"connectVia"`
	// SAP HANA ODBC connection string. Type: string, SecureString or AzureKeyVaultSecretReference.
	ConnectionString interface{} `pulumi:"connectionString"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential interface{} `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Password to access the SAP HANA server.
	Password interface{} `pulumi:"password"`
	// Host name of the SAP HANA server. Type: string (or Expression with resultType string).
	Server interface{} `pulumi:"server"`
	// Type of linked service.
	// Expected value is 'SapHana'.
	Type string `pulumi:"type"`
	// Username to access the SAP HANA server. Type: string (or Expression with resultType string).
	UserName interface{} `pulumi:"userName"`
}

// SAP HANA Linked Service.
type SapHanaLinkedServiceResponse struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The authentication type to be used to connect to the SAP HANA server.
	AuthenticationType *string `pulumi:"authenticationType"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReferenceResponse `pulumi:"connectVia"`
	// SAP HANA ODBC connection string. Type: string, SecureString or AzureKeyVaultSecretReference.
	ConnectionString interface{} `pulumi:"connectionString"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential interface{} `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Password to access the SAP HANA server.
	Password interface{} `pulumi:"password"`
	// Host name of the SAP HANA server. Type: string (or Expression with resultType string).
	Server interface{} `pulumi:"server"`
	// Type of linked service.
	// Expected value is 'SapHana'.
	Type string `pulumi:"type"`
	// Username to access the SAP HANA server. Type: string (or Expression with resultType string).
	UserName interface{} `pulumi:"userName"`
}

// The settings that will be leveraged for SAP HANA source partitioning.
type SapHanaPartitionSettings struct {
	// The name of the column that will be used for proceeding range partitioning. Type: string (or Expression with resultType string).
	PartitionColumnName interface{} `pulumi:"partitionColumnName"`
}

// The settings that will be leveraged for SAP HANA source partitioning.
type SapHanaPartitionSettingsResponse struct {
	// The name of the column that will be used for proceeding range partitioning. Type: string (or Expression with resultType string).
	PartitionColumnName interface{} `pulumi:"partitionColumnName"`
}

// A copy activity source for SAP HANA source.
type SapHanaSource struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns interface{} `pulumi:"additionalColumns"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// The packet size of data read from SAP HANA. Type: integer(or Expression with resultType integer).
	PacketSize interface{} `pulumi:"packetSize"`
	// The partition mechanism that will be used for SAP HANA read in parallel. Possible values include: "None", "PhysicalPartitionsOfTable", "SapHanaDynamicRange".
	PartitionOption interface{} `pulumi:"partitionOption"`
	// The settings that will be leveraged for SAP HANA source partitioning.
	PartitionSettings *SapHanaPartitionSettings `pulumi:"partitionSettings"`
	// SAP HANA Sql query. Type: string (or Expression with resultType string).
	Query interface{} `pulumi:"query"`
	// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	QueryTimeout interface{} `pulumi:"queryTimeout"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// Copy source type.
	// Expected value is 'SapHanaSource'.
	Type string `pulumi:"type"`
}

// A copy activity source for SAP HANA source.
type SapHanaSourceResponse struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns interface{} `pulumi:"additionalColumns"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// The packet size of data read from SAP HANA. Type: integer(or Expression with resultType integer).
	PacketSize interface{} `pulumi:"packetSize"`
	// The partition mechanism that will be used for SAP HANA read in parallel. Possible values include: "None", "PhysicalPartitionsOfTable", "SapHanaDynamicRange".
	PartitionOption interface{} `pulumi:"partitionOption"`
	// The settings that will be leveraged for SAP HANA source partitioning.
	PartitionSettings *SapHanaPartitionSettingsResponse `pulumi:"partitionSettings"`
	// SAP HANA Sql query. Type: string (or Expression with resultType string).
	Query interface{} `pulumi:"query"`
	// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	QueryTimeout interface{} `pulumi:"queryTimeout"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// Copy source type.
	// Expected value is 'SapHanaSource'.
	Type string `pulumi:"type"`
}

// SAP HANA Table properties.
type SapHanaTableDataset struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReference `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// The table name of SAP HANA. Type: string (or Expression with resultType string).
	Table interface{} `pulumi:"table"`
	// Type of dataset.
	// Expected value is 'SapHanaTable'.
	Type string `pulumi:"type"`
}

// SAP HANA Table properties.
type SapHanaTableDatasetResponse struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetResponseFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceResponse `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// The table name of SAP HANA. Type: string (or Expression with resultType string).
	Table interface{} `pulumi:"table"`
	// Type of dataset.
	// Expected value is 'SapHanaTable'.
	Type string `pulumi:"type"`
}

// SAP ODP Linked Service.
type SapOdpLinkedService struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// Client ID of the client on the SAP system where the table is located. (Usually a three-digit decimal number represented as a string) Type: string (or Expression with resultType string).
	ClientId interface{} `pulumi:"clientId"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference `pulumi:"connectVia"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential interface{} `pulumi:"encryptedCredential"`
	// Language of the SAP system where the table is located. The default value is EN. Type: string (or Expression with resultType string).
	Language interface{} `pulumi:"language"`
	// The Logon Group for the SAP System. Type: string (or Expression with resultType string).
	LogonGroup interface{} `pulumi:"logonGroup"`
	// The hostname of the SAP Message Server. Type: string (or Expression with resultType string).
	MessageServer interface{} `pulumi:"messageServer"`
	// The service name or port number of the Message Server. Type: string (or Expression with resultType string).
	MessageServerService interface{} `pulumi:"messageServerService"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Password to access the SAP server where the table is located.
	Password interface{} `pulumi:"password"`
	// Host name of the SAP instance where the table is located. Type: string (or Expression with resultType string).
	Server interface{} `pulumi:"server"`
	// External security product's library to access the SAP server where the table is located. Type: string (or Expression with resultType string).
	SncLibraryPath interface{} `pulumi:"sncLibraryPath"`
	// SNC activation indicator to access the SAP server where the table is located. Must be either 0 (off) or 1 (on). Type: string (or Expression with resultType string).
	SncMode interface{} `pulumi:"sncMode"`
	// Initiator's SNC name to access the SAP server where the table is located. Type: string (or Expression with resultType string).
	SncMyName interface{} `pulumi:"sncMyName"`
	// Communication partner's SNC name to access the SAP server where the table is located. Type: string (or Expression with resultType string).
	SncPartnerName interface{} `pulumi:"sncPartnerName"`
	// SNC Quality of Protection. Allowed value include: 1, 2, 3, 8, 9. Type: string (or Expression with resultType string).
	SncQop interface{} `pulumi:"sncQop"`
	// The subscriber name. Type: string (or Expression with resultType string).
	SubscriberName interface{} `pulumi:"subscriberName"`
	// SystemID of the SAP system where the table is located. Type: string (or Expression with resultType string).
	SystemId interface{} `pulumi:"systemId"`
	// System number of the SAP system where the table is located. (Usually a two-digit decimal number represented as a string.) Type: string (or Expression with resultType string).
	SystemNumber interface{} `pulumi:"systemNumber"`
	// Type of linked service.
	// Expected value is 'SapOdp'.
	Type string `pulumi:"type"`
	// Username to access the SAP server where the table is located. Type: string (or Expression with resultType string).
	UserName interface{} `pulumi:"userName"`
	// SNC X509 certificate file path. Type: string (or Expression with resultType string).
	X509CertificatePath interface{} `pulumi:"x509CertificatePath"`
}

// SAP ODP Linked Service.
type SapOdpLinkedServiceResponse struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// Client ID of the client on the SAP system where the table is located. (Usually a three-digit decimal number represented as a string) Type: string (or Expression with resultType string).
	ClientId interface{} `pulumi:"clientId"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReferenceResponse `pulumi:"connectVia"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential interface{} `pulumi:"encryptedCredential"`
	// Language of the SAP system where the table is located. The default value is EN. Type: string (or Expression with resultType string).
	Language interface{} `pulumi:"language"`
	// The Logon Group for the SAP System. Type: string (or Expression with resultType string).
	LogonGroup interface{} `pulumi:"logonGroup"`
	// The hostname of the SAP Message Server. Type: string (or Expression with resultType string).
	MessageServer interface{} `pulumi:"messageServer"`
	// The service name or port number of the Message Server. Type: string (or Expression with resultType string).
	MessageServerService interface{} `pulumi:"messageServerService"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Password to access the SAP server where the table is located.
	Password interface{} `pulumi:"password"`
	// Host name of the SAP instance where the table is located. Type: string (or Expression with resultType string).
	Server interface{} `pulumi:"server"`
	// External security product's library to access the SAP server where the table is located. Type: string (or Expression with resultType string).
	SncLibraryPath interface{} `pulumi:"sncLibraryPath"`
	// SNC activation indicator to access the SAP server where the table is located. Must be either 0 (off) or 1 (on). Type: string (or Expression with resultType string).
	SncMode interface{} `pulumi:"sncMode"`
	// Initiator's SNC name to access the SAP server where the table is located. Type: string (or Expression with resultType string).
	SncMyName interface{} `pulumi:"sncMyName"`
	// Communication partner's SNC name to access the SAP server where the table is located. Type: string (or Expression with resultType string).
	SncPartnerName interface{} `pulumi:"sncPartnerName"`
	// SNC Quality of Protection. Allowed value include: 1, 2, 3, 8, 9. Type: string (or Expression with resultType string).
	SncQop interface{} `pulumi:"sncQop"`
	// The subscriber name. Type: string (or Expression with resultType string).
	SubscriberName interface{} `pulumi:"subscriberName"`
	// SystemID of the SAP system where the table is located. Type: string (or Expression with resultType string).
	SystemId interface{} `pulumi:"systemId"`
	// System number of the SAP system where the table is located. (Usually a two-digit decimal number represented as a string.) Type: string (or Expression with resultType string).
	SystemNumber interface{} `pulumi:"systemNumber"`
	// Type of linked service.
	// Expected value is 'SapOdp'.
	Type string `pulumi:"type"`
	// Username to access the SAP server where the table is located. Type: string (or Expression with resultType string).
	UserName interface{} `pulumi:"userName"`
	// SNC X509 certificate file path. Type: string (or Expression with resultType string).
	X509CertificatePath interface{} `pulumi:"x509CertificatePath"`
}

// SAP ODP Resource properties.
type SapOdpResourceDataset struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// The context of the SAP ODP Object. Type: string (or Expression with resultType string).
	Context interface{} `pulumi:"context"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReference `pulumi:"linkedServiceName"`
	// The name of the SAP ODP Object. Type: string (or Expression with resultType string).
	ObjectName interface{} `pulumi:"objectName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// Type of dataset.
	// Expected value is 'SapOdpResource'.
	Type string `pulumi:"type"`
}

// SAP ODP Resource properties.
type SapOdpResourceDatasetResponse struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// The context of the SAP ODP Object. Type: string (or Expression with resultType string).
	Context interface{} `pulumi:"context"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetResponseFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceResponse `pulumi:"linkedServiceName"`
	// The name of the SAP ODP Object. Type: string (or Expression with resultType string).
	ObjectName interface{} `pulumi:"objectName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// Type of dataset.
	// Expected value is 'SapOdpResource'.
	Type string `pulumi:"type"`
}

// A copy activity source for SAP ODP source.
type SapOdpSource struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns interface{} `pulumi:"additionalColumns"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The extraction mode. Allowed value include: Full, Delta and Recovery. The default value is Full. Type: string (or Expression with resultType string).
	ExtractionMode interface{} `pulumi:"extractionMode"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// Specifies the columns to be selected from source data. Type: array of objects(projection) (or Expression with resultType array of objects).
	Projection interface{} `pulumi:"projection"`
	// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	QueryTimeout interface{} `pulumi:"queryTimeout"`
	// Specifies the selection conditions from source data. Type: array of objects(selection) (or Expression with resultType array of objects).
	Selection interface{} `pulumi:"selection"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// The subscriber process to manage the delta process. Type: string (or Expression with resultType string).
	SubscriberProcess interface{} `pulumi:"subscriberProcess"`
	// Copy source type.
	// Expected value is 'SapOdpSource'.
	Type string `pulumi:"type"`
}

// A copy activity source for SAP ODP source.
type SapOdpSourceResponse struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns interface{} `pulumi:"additionalColumns"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The extraction mode. Allowed value include: Full, Delta and Recovery. The default value is Full. Type: string (or Expression with resultType string).
	ExtractionMode interface{} `pulumi:"extractionMode"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// Specifies the columns to be selected from source data. Type: array of objects(projection) (or Expression with resultType array of objects).
	Projection interface{} `pulumi:"projection"`
	// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	QueryTimeout interface{} `pulumi:"queryTimeout"`
	// Specifies the selection conditions from source data. Type: array of objects(selection) (or Expression with resultType array of objects).
	Selection interface{} `pulumi:"selection"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// The subscriber process to manage the delta process. Type: string (or Expression with resultType string).
	SubscriberProcess interface{} `pulumi:"subscriberProcess"`
	// Copy source type.
	// Expected value is 'SapOdpSource'.
	Type string `pulumi:"type"`
}

// SAP Business Warehouse Open Hub Destination Linked Service.
type SapOpenHubLinkedService struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// Client ID of the client on the BW system where the open hub destination is located. (Usually a three-digit decimal number represented as a string) Type: string (or Expression with resultType string).
	ClientId interface{} `pulumi:"clientId"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference `pulumi:"connectVia"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential interface{} `pulumi:"encryptedCredential"`
	// Language of the BW system where the open hub destination is located. The default value is EN. Type: string (or Expression with resultType string).
	Language interface{} `pulumi:"language"`
	// The Logon Group for the SAP System. Type: string (or Expression with resultType string).
	LogonGroup interface{} `pulumi:"logonGroup"`
	// The hostname of the SAP Message Server. Type: string (or Expression with resultType string).
	MessageServer interface{} `pulumi:"messageServer"`
	// The service name or port number of the Message Server. Type: string (or Expression with resultType string).
	MessageServerService interface{} `pulumi:"messageServerService"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Password to access the SAP BW server where the open hub destination is located.
	Password interface{} `pulumi:"password"`
	// Host name of the SAP BW instance where the open hub destination is located. Type: string (or Expression with resultType string).
	Server interface{} `pulumi:"server"`
	// SystemID of the SAP system where the table is located. Type: string (or Expression with resultType string).
	SystemId interface{} `pulumi:"systemId"`
	// System number of the BW system where the open hub destination is located. (Usually a two-digit decimal number represented as a string.) Type: string (or Expression with resultType string).
	SystemNumber interface{} `pulumi:"systemNumber"`
	// Type of linked service.
	// Expected value is 'SapOpenHub'.
	Type string `pulumi:"type"`
	// Username to access the SAP BW server where the open hub destination is located. Type: string (or Expression with resultType string).
	UserName interface{} `pulumi:"userName"`
}

// SAP Business Warehouse Open Hub Destination Linked Service.
type SapOpenHubLinkedServiceResponse struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// Client ID of the client on the BW system where the open hub destination is located. (Usually a three-digit decimal number represented as a string) Type: string (or Expression with resultType string).
	ClientId interface{} `pulumi:"clientId"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReferenceResponse `pulumi:"connectVia"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential interface{} `pulumi:"encryptedCredential"`
	// Language of the BW system where the open hub destination is located. The default value is EN. Type: string (or Expression with resultType string).
	Language interface{} `pulumi:"language"`
	// The Logon Group for the SAP System. Type: string (or Expression with resultType string).
	LogonGroup interface{} `pulumi:"logonGroup"`
	// The hostname of the SAP Message Server. Type: string (or Expression with resultType string).
	MessageServer interface{} `pulumi:"messageServer"`
	// The service name or port number of the Message Server. Type: string (or Expression with resultType string).
	MessageServerService interface{} `pulumi:"messageServerService"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Password to access the SAP BW server where the open hub destination is located.
	Password interface{} `pulumi:"password"`
	// Host name of the SAP BW instance where the open hub destination is located. Type: string (or Expression with resultType string).
	Server interface{} `pulumi:"server"`
	// SystemID of the SAP system where the table is located. Type: string (or Expression with resultType string).
	SystemId interface{} `pulumi:"systemId"`
	// System number of the BW system where the open hub destination is located. (Usually a two-digit decimal number represented as a string.) Type: string (or Expression with resultType string).
	SystemNumber interface{} `pulumi:"systemNumber"`
	// Type of linked service.
	// Expected value is 'SapOpenHub'.
	Type string `pulumi:"type"`
	// Username to access the SAP BW server where the open hub destination is located. Type: string (or Expression with resultType string).
	UserName interface{} `pulumi:"userName"`
}

// A copy activity source for SAP Business Warehouse Open Hub Destination source.
type SapOpenHubSource struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns interface{} `pulumi:"additionalColumns"`
	// The ID of request for delta loading. Once it is set, only data with requestId larger than the value of this property will be retrieved. The default value is 0. Type: integer (or Expression with resultType integer ).
	BaseRequestId interface{} `pulumi:"baseRequestId"`
	// Specifies the custom RFC function module that will be used to read data from SAP Table. Type: string (or Expression with resultType string).
	CustomRfcReadTableFunctionModule interface{} `pulumi:"customRfcReadTableFunctionModule"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// Whether to exclude the records of the last request. The default value is true. Type: boolean (or Expression with resultType boolean).
	ExcludeLastRequest interface{} `pulumi:"excludeLastRequest"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	QueryTimeout interface{} `pulumi:"queryTimeout"`
	// The single character that will be used as delimiter passed to SAP RFC as well as splitting the output data retrieved. Type: string (or Expression with resultType string).
	SapDataColumnDelimiter interface{} `pulumi:"sapDataColumnDelimiter"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// Copy source type.
	// Expected value is 'SapOpenHubSource'.
	Type string `pulumi:"type"`
}

// A copy activity source for SAP Business Warehouse Open Hub Destination source.
type SapOpenHubSourceResponse struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns interface{} `pulumi:"additionalColumns"`
	// The ID of request for delta loading. Once it is set, only data with requestId larger than the value of this property will be retrieved. The default value is 0. Type: integer (or Expression with resultType integer ).
	BaseRequestId interface{} `pulumi:"baseRequestId"`
	// Specifies the custom RFC function module that will be used to read data from SAP Table. Type: string (or Expression with resultType string).
	CustomRfcReadTableFunctionModule interface{} `pulumi:"customRfcReadTableFunctionModule"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// Whether to exclude the records of the last request. The default value is true. Type: boolean (or Expression with resultType boolean).
	ExcludeLastRequest interface{} `pulumi:"excludeLastRequest"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	QueryTimeout interface{} `pulumi:"queryTimeout"`
	// The single character that will be used as delimiter passed to SAP RFC as well as splitting the output data retrieved. Type: string (or Expression with resultType string).
	SapDataColumnDelimiter interface{} `pulumi:"sapDataColumnDelimiter"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// Copy source type.
	// Expected value is 'SapOpenHubSource'.
	Type string `pulumi:"type"`
}

// Sap Business Warehouse Open Hub Destination Table properties.
type SapOpenHubTableDataset struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// The ID of request for delta loading. Once it is set, only data with requestId larger than the value of this property will be retrieved. The default value is 0. Type: integer (or Expression with resultType integer ).
	BaseRequestId interface{} `pulumi:"baseRequestId"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// Whether to exclude the records of the last request. The default value is true. Type: boolean (or Expression with resultType boolean).
	ExcludeLastRequest interface{} `pulumi:"excludeLastRequest"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReference `pulumi:"linkedServiceName"`
	// The name of the Open Hub Destination with destination type as Database Table. Type: string (or Expression with resultType string).
	OpenHubDestinationName interface{} `pulumi:"openHubDestinationName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// Type of dataset.
	// Expected value is 'SapOpenHubTable'.
	Type string `pulumi:"type"`
}

// Sap Business Warehouse Open Hub Destination Table properties.
type SapOpenHubTableDatasetResponse struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// The ID of request for delta loading. Once it is set, only data with requestId larger than the value of this property will be retrieved. The default value is 0. Type: integer (or Expression with resultType integer ).
	BaseRequestId interface{} `pulumi:"baseRequestId"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// Whether to exclude the records of the last request. The default value is true. Type: boolean (or Expression with resultType boolean).
	ExcludeLastRequest interface{} `pulumi:"excludeLastRequest"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetResponseFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceResponse `pulumi:"linkedServiceName"`
	// The name of the Open Hub Destination with destination type as Database Table. Type: string (or Expression with resultType string).
	OpenHubDestinationName interface{} `pulumi:"openHubDestinationName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// Type of dataset.
	// Expected value is 'SapOpenHubTable'.
	Type string `pulumi:"type"`
}

// SAP Table Linked Service.
type SapTableLinkedService struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// Client ID of the client on the SAP system where the table is located. (Usually a three-digit decimal number represented as a string) Type: string (or Expression with resultType string).
	ClientId interface{} `pulumi:"clientId"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference `pulumi:"connectVia"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential interface{} `pulumi:"encryptedCredential"`
	// Language of the SAP system where the table is located. The default value is EN. Type: string (or Expression with resultType string).
	Language interface{} `pulumi:"language"`
	// The Logon Group for the SAP System. Type: string (or Expression with resultType string).
	LogonGroup interface{} `pulumi:"logonGroup"`
	// The hostname of the SAP Message Server. Type: string (or Expression with resultType string).
	MessageServer interface{} `pulumi:"messageServer"`
	// The service name or port number of the Message Server. Type: string (or Expression with resultType string).
	MessageServerService interface{} `pulumi:"messageServerService"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Password to access the SAP server where the table is located.
	Password interface{} `pulumi:"password"`
	// Host name of the SAP instance where the table is located. Type: string (or Expression with resultType string).
	Server interface{} `pulumi:"server"`
	// External security product's library to access the SAP server where the table is located. Type: string (or Expression with resultType string).
	SncLibraryPath interface{} `pulumi:"sncLibraryPath"`
	// SNC activation indicator to access the SAP server where the table is located. Must be either 0 (off) or 1 (on). Type: string (or Expression with resultType string).
	SncMode interface{} `pulumi:"sncMode"`
	// Initiator's SNC name to access the SAP server where the table is located. Type: string (or Expression with resultType string).
	SncMyName interface{} `pulumi:"sncMyName"`
	// Communication partner's SNC name to access the SAP server where the table is located. Type: string (or Expression with resultType string).
	SncPartnerName interface{} `pulumi:"sncPartnerName"`
	// SNC Quality of Protection. Allowed value include: 1, 2, 3, 8, 9. Type: string (or Expression with resultType string).
	SncQop interface{} `pulumi:"sncQop"`
	// SystemID of the SAP system where the table is located. Type: string (or Expression with resultType string).
	SystemId interface{} `pulumi:"systemId"`
	// System number of the SAP system where the table is located. (Usually a two-digit decimal number represented as a string.) Type: string (or Expression with resultType string).
	SystemNumber interface{} `pulumi:"systemNumber"`
	// Type of linked service.
	// Expected value is 'SapTable'.
	Type string `pulumi:"type"`
	// Username to access the SAP server where the table is located. Type: string (or Expression with resultType string).
	UserName interface{} `pulumi:"userName"`
}

// SAP Table Linked Service.
type SapTableLinkedServiceResponse struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// Client ID of the client on the SAP system where the table is located. (Usually a three-digit decimal number represented as a string) Type: string (or Expression with resultType string).
	ClientId interface{} `pulumi:"clientId"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReferenceResponse `pulumi:"connectVia"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential interface{} `pulumi:"encryptedCredential"`
	// Language of the SAP system where the table is located. The default value is EN. Type: string (or Expression with resultType string).
	Language interface{} `pulumi:"language"`
	// The Logon Group for the SAP System. Type: string (or Expression with resultType string).
	LogonGroup interface{} `pulumi:"logonGroup"`
	// The hostname of the SAP Message Server. Type: string (or Expression with resultType string).
	MessageServer interface{} `pulumi:"messageServer"`
	// The service name or port number of the Message Server. Type: string (or Expression with resultType string).
	MessageServerService interface{} `pulumi:"messageServerService"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Password to access the SAP server where the table is located.
	Password interface{} `pulumi:"password"`
	// Host name of the SAP instance where the table is located. Type: string (or Expression with resultType string).
	Server interface{} `pulumi:"server"`
	// External security product's library to access the SAP server where the table is located. Type: string (or Expression with resultType string).
	SncLibraryPath interface{} `pulumi:"sncLibraryPath"`
	// SNC activation indicator to access the SAP server where the table is located. Must be either 0 (off) or 1 (on). Type: string (or Expression with resultType string).
	SncMode interface{} `pulumi:"sncMode"`
	// Initiator's SNC name to access the SAP server where the table is located. Type: string (or Expression with resultType string).
	SncMyName interface{} `pulumi:"sncMyName"`
	// Communication partner's SNC name to access the SAP server where the table is located. Type: string (or Expression with resultType string).
	SncPartnerName interface{} `pulumi:"sncPartnerName"`
	// SNC Quality of Protection. Allowed value include: 1, 2, 3, 8, 9. Type: string (or Expression with resultType string).
	SncQop interface{} `pulumi:"sncQop"`
	// SystemID of the SAP system where the table is located. Type: string (or Expression with resultType string).
	SystemId interface{} `pulumi:"systemId"`
	// System number of the SAP system where the table is located. (Usually a two-digit decimal number represented as a string.) Type: string (or Expression with resultType string).
	SystemNumber interface{} `pulumi:"systemNumber"`
	// Type of linked service.
	// Expected value is 'SapTable'.
	Type string `pulumi:"type"`
	// Username to access the SAP server where the table is located. Type: string (or Expression with resultType string).
	UserName interface{} `pulumi:"userName"`
}

// The settings that will be leveraged for SAP table source partitioning.
type SapTablePartitionSettings struct {
	// The maximum value of partitions the table will be split into. Type: integer (or Expression with resultType string).
	MaxPartitionsNumber interface{} `pulumi:"maxPartitionsNumber"`
	// The name of the column that will be used for proceeding range partitioning. Type: string (or Expression with resultType string).
	PartitionColumnName interface{} `pulumi:"partitionColumnName"`
	// The minimum value of column specified in partitionColumnName that will be used for proceeding range partitioning. Type: string (or Expression with resultType string).
	PartitionLowerBound interface{} `pulumi:"partitionLowerBound"`
	// The maximum value of column specified in partitionColumnName that will be used for proceeding range partitioning. Type: string (or Expression with resultType string).
	PartitionUpperBound interface{} `pulumi:"partitionUpperBound"`
}

// The settings that will be leveraged for SAP table source partitioning.
type SapTablePartitionSettingsResponse struct {
	// The maximum value of partitions the table will be split into. Type: integer (or Expression with resultType string).
	MaxPartitionsNumber interface{} `pulumi:"maxPartitionsNumber"`
	// The name of the column that will be used for proceeding range partitioning. Type: string (or Expression with resultType string).
	PartitionColumnName interface{} `pulumi:"partitionColumnName"`
	// The minimum value of column specified in partitionColumnName that will be used for proceeding range partitioning. Type: string (or Expression with resultType string).
	PartitionLowerBound interface{} `pulumi:"partitionLowerBound"`
	// The maximum value of column specified in partitionColumnName that will be used for proceeding range partitioning. Type: string (or Expression with resultType string).
	PartitionUpperBound interface{} `pulumi:"partitionUpperBound"`
}

// SAP Table Resource properties.
type SapTableResourceDataset struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReference `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// The name of the SAP Table. Type: string (or Expression with resultType string).
	TableName interface{} `pulumi:"tableName"`
	// Type of dataset.
	// Expected value is 'SapTableResource'.
	Type string `pulumi:"type"`
}

// SAP Table Resource properties.
type SapTableResourceDatasetResponse struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetResponseFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceResponse `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// The name of the SAP Table. Type: string (or Expression with resultType string).
	TableName interface{} `pulumi:"tableName"`
	// Type of dataset.
	// Expected value is 'SapTableResource'.
	Type string `pulumi:"type"`
}

// A copy activity source for SAP Table source.
type SapTableSource struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns interface{} `pulumi:"additionalColumns"`
	// Specifies the maximum number of rows that will be retrieved at a time when retrieving data from SAP Table. Type: integer (or Expression with resultType integer).
	BatchSize interface{} `pulumi:"batchSize"`
	// Specifies the custom RFC function module that will be used to read data from SAP Table. Type: string (or Expression with resultType string).
	CustomRfcReadTableFunctionModule interface{} `pulumi:"customRfcReadTableFunctionModule"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// The partition mechanism that will be used for SAP table read in parallel. Possible values include: "None", "PartitionOnInt", "PartitionOnCalendarYear", "PartitionOnCalendarMonth", "PartitionOnCalendarDate", "PartitionOnTime".
	PartitionOption interface{} `pulumi:"partitionOption"`
	// The settings that will be leveraged for SAP table source partitioning.
	PartitionSettings *SapTablePartitionSettings `pulumi:"partitionSettings"`
	// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	QueryTimeout interface{} `pulumi:"queryTimeout"`
	// The fields of the SAP table that will be retrieved. For example, column0, column1. Type: string (or Expression with resultType string).
	RfcTableFields interface{} `pulumi:"rfcTableFields"`
	// The options for the filtering of the SAP Table. For example, COLUMN0 EQ SOME VALUE. Type: string (or Expression with resultType string).
	RfcTableOptions interface{} `pulumi:"rfcTableOptions"`
	// The number of rows to be retrieved. Type: integer(or Expression with resultType integer).
	RowCount interface{} `pulumi:"rowCount"`
	// The number of rows that will be skipped. Type: integer (or Expression with resultType integer).
	RowSkips interface{} `pulumi:"rowSkips"`
	// The single character that will be used as delimiter passed to SAP RFC as well as splitting the output data retrieved. Type: string (or Expression with resultType string).
	SapDataColumnDelimiter interface{} `pulumi:"sapDataColumnDelimiter"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// Copy source type.
	// Expected value is 'SapTableSource'.
	Type string `pulumi:"type"`
}

// A copy activity source for SAP Table source.
type SapTableSourceResponse struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns interface{} `pulumi:"additionalColumns"`
	// Specifies the maximum number of rows that will be retrieved at a time when retrieving data from SAP Table. Type: integer (or Expression with resultType integer).
	BatchSize interface{} `pulumi:"batchSize"`
	// Specifies the custom RFC function module that will be used to read data from SAP Table. Type: string (or Expression with resultType string).
	CustomRfcReadTableFunctionModule interface{} `pulumi:"customRfcReadTableFunctionModule"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// The partition mechanism that will be used for SAP table read in parallel. Possible values include: "None", "PartitionOnInt", "PartitionOnCalendarYear", "PartitionOnCalendarMonth", "PartitionOnCalendarDate", "PartitionOnTime".
	PartitionOption interface{} `pulumi:"partitionOption"`
	// The settings that will be leveraged for SAP table source partitioning.
	PartitionSettings *SapTablePartitionSettingsResponse `pulumi:"partitionSettings"`
	// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	QueryTimeout interface{} `pulumi:"queryTimeout"`
	// The fields of the SAP table that will be retrieved. For example, column0, column1. Type: string (or Expression with resultType string).
	RfcTableFields interface{} `pulumi:"rfcTableFields"`
	// The options for the filtering of the SAP Table. For example, COLUMN0 EQ SOME VALUE. Type: string (or Expression with resultType string).
	RfcTableOptions interface{} `pulumi:"rfcTableOptions"`
	// The number of rows to be retrieved. Type: integer(or Expression with resultType integer).
	RowCount interface{} `pulumi:"rowCount"`
	// The number of rows that will be skipped. Type: integer (or Expression with resultType integer).
	RowSkips interface{} `pulumi:"rowSkips"`
	// The single character that will be used as delimiter passed to SAP RFC as well as splitting the output data retrieved. Type: string (or Expression with resultType string).
	SapDataColumnDelimiter interface{} `pulumi:"sapDataColumnDelimiter"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// Copy source type.
	// Expected value is 'SapTableSource'.
	Type string `pulumi:"type"`
}

// Trigger that creates pipeline runs periodically, on schedule.
type ScheduleTrigger struct {
	// List of tags that can be used for describing the trigger.
	Annotations []interface{} `pulumi:"annotations"`
	// Trigger description.
	Description *string `pulumi:"description"`
	// Pipelines that need to be started.
	Pipelines []TriggerPipelineReference `pulumi:"pipelines"`
	// Recurrence schedule configuration.
	Recurrence ScheduleTriggerRecurrence `pulumi:"recurrence"`
	// Trigger type.
	// Expected value is 'ScheduleTrigger'.
	Type string `pulumi:"type"`
}

// The workflow trigger recurrence.
type ScheduleTriggerRecurrence struct {
	// The end time.
	EndTime *string `pulumi:"endTime"`
	// The frequency.
	Frequency *string `pulumi:"frequency"`
	// The interval.
	Interval *int `pulumi:"interval"`
	// The recurrence schedule.
	Schedule *RecurrenceSchedule `pulumi:"schedule"`
	// The start time.
	StartTime *string `pulumi:"startTime"`
	// The time zone.
	TimeZone *string `pulumi:"timeZone"`
}

// The workflow trigger recurrence.
type ScheduleTriggerRecurrenceResponse struct {
	// The end time.
	EndTime *string `pulumi:"endTime"`
	// The frequency.
	Frequency *string `pulumi:"frequency"`
	// The interval.
	Interval *int `pulumi:"interval"`
	// The recurrence schedule.
	Schedule *RecurrenceScheduleResponse `pulumi:"schedule"`
	// The start time.
	StartTime *string `pulumi:"startTime"`
	// The time zone.
	TimeZone *string `pulumi:"timeZone"`
}

// Trigger that creates pipeline runs periodically, on schedule.
type ScheduleTriggerResponse struct {
	// List of tags that can be used for describing the trigger.
	Annotations []interface{} `pulumi:"annotations"`
	// Trigger description.
	Description *string `pulumi:"description"`
	// Pipelines that need to be started.
	Pipelines []TriggerPipelineReferenceResponse `pulumi:"pipelines"`
	// Recurrence schedule configuration.
	Recurrence ScheduleTriggerRecurrenceResponse `pulumi:"recurrence"`
	// Indicates if trigger is running or not. Updated when Start/Stop APIs are called on the Trigger.
	RuntimeState string `pulumi:"runtimeState"`
	// Trigger type.
	// Expected value is 'ScheduleTrigger'.
	Type string `pulumi:"type"`
}

// Custom script action to run on HDI ondemand cluster once it's up.
type ScriptAction struct {
	// The user provided name of the script action.
	Name string `pulumi:"name"`
	// The parameters for the script action.
	Parameters *string `pulumi:"parameters"`
	// The node types on which the script action should be executed.
	Roles interface{} `pulumi:"roles"`
	// The URI for the script action.
	Uri string `pulumi:"uri"`
}

// Custom script action to run on HDI ondemand cluster once it's up.
type ScriptActionResponse struct {
	// The user provided name of the script action.
	Name string `pulumi:"name"`
	// The parameters for the script action.
	Parameters *string `pulumi:"parameters"`
	// The node types on which the script action should be executed.
	Roles interface{} `pulumi:"roles"`
	// The URI for the script action.
	Uri string `pulumi:"uri"`
}

// Script activity type.
type ScriptActivity struct {
	// Activity depends on condition.
	DependsOn []ActivityDependency `pulumi:"dependsOn"`
	// Activity description.
	Description *string `pulumi:"description"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReference `pulumi:"linkedServiceName"`
	// Log settings of script activity.
	LogSettings *ScriptActivityTypePropertiesLogSettings `pulumi:"logSettings"`
	// Activity name.
	Name string `pulumi:"name"`
	// Activity policy.
	Policy *ActivityPolicy `pulumi:"policy"`
	// Array of script blocks. Type: array.
	Scripts []ScriptActivityScriptBlock `pulumi:"scripts"`
	// Type of activity.
	// Expected value is 'Script'.
	Type string `pulumi:"type"`
	// Activity user properties.
	UserProperties []UserProperty `pulumi:"userProperties"`
}

// Parameters of a script block.
type ScriptActivityParameter struct {
	// The direction of the parameter.
	Direction *string `pulumi:"direction"`
	// The name of the parameter. Type: string (or Expression with resultType string).
	Name interface{} `pulumi:"name"`
	// The size of the output direction parameter.
	Size *int `pulumi:"size"`
	// The type of the parameter.
	Type *string `pulumi:"type"`
	// The value of the parameter.
	Value interface{} `pulumi:"value"`
}

// Parameters of a script block.
type ScriptActivityParameterResponse struct {
	// The direction of the parameter.
	Direction *string `pulumi:"direction"`
	// The name of the parameter. Type: string (or Expression with resultType string).
	Name interface{} `pulumi:"name"`
	// The size of the output direction parameter.
	Size *int `pulumi:"size"`
	// The type of the parameter.
	Type *string `pulumi:"type"`
	// The value of the parameter.
	Value interface{} `pulumi:"value"`
}

// Script activity type.
type ScriptActivityResponse struct {
	// Activity depends on condition.
	DependsOn []ActivityDependencyResponse `pulumi:"dependsOn"`
	// Activity description.
	Description *string `pulumi:"description"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceResponse `pulumi:"linkedServiceName"`
	// Log settings of script activity.
	LogSettings *ScriptActivityTypePropertiesResponseLogSettings `pulumi:"logSettings"`
	// Activity name.
	Name string `pulumi:"name"`
	// Activity policy.
	Policy *ActivityPolicyResponse `pulumi:"policy"`
	// Array of script blocks. Type: array.
	Scripts []ScriptActivityScriptBlockResponse `pulumi:"scripts"`
	// Type of activity.
	// Expected value is 'Script'.
	Type string `pulumi:"type"`
	// Activity user properties.
	UserProperties []UserPropertyResponse `pulumi:"userProperties"`
}

// Script block of scripts.
type ScriptActivityScriptBlock struct {
	// Array of script parameters. Type: array.
	Parameters []ScriptActivityParameter `pulumi:"parameters"`
	// The query text. Type: string (or Expression with resultType string).
	Text interface{} `pulumi:"text"`
	// The type of the query. Type: string.
	Type string `pulumi:"type"`
}

// Script block of scripts.
type ScriptActivityScriptBlockResponse struct {
	// Array of script parameters. Type: array.
	Parameters []ScriptActivityParameterResponse `pulumi:"parameters"`
	// The query text. Type: string (or Expression with resultType string).
	Text interface{} `pulumi:"text"`
	// The type of the query. Type: string.
	Type string `pulumi:"type"`
}

// Log settings of script activity.
type ScriptActivityTypePropertiesLogSettings struct {
	// The destination of logs. Type: string.
	LogDestination string `pulumi:"logDestination"`
	// Log location settings customer needs to provide when enabling log.
	LogLocationSettings *LogLocationSettings `pulumi:"logLocationSettings"`
}

// Log settings of script activity.
type ScriptActivityTypePropertiesResponseLogSettings struct {
	// The destination of logs. Type: string.
	LogDestination string `pulumi:"logDestination"`
	// Log location settings customer needs to provide when enabling log.
	LogLocationSettings *LogLocationSettingsResponse `pulumi:"logLocationSettings"`
}

// Azure Data Factory secure string definition. The string value will be masked with asterisks '*' during Get or List API calls.
type SecureString struct {
	// Type of the secret.
	// Expected value is 'SecureString'.
	Type string `pulumi:"type"`
	// Value of secure string.
	Value string `pulumi:"value"`
}

// Azure Data Factory secure string definition. The string value will be masked with asterisks '*' during Get or List API calls.
type SecureStringResponse struct {
	// Type of the secret.
	// Expected value is 'SecureString'.
	Type string `pulumi:"type"`
	// Value of secure string.
	Value string `pulumi:"value"`
}

// Self referenced tumbling window trigger dependency.
type SelfDependencyTumblingWindowTriggerReference struct {
	// Timespan applied to the start time of a tumbling window when evaluating dependency.
	Offset string `pulumi:"offset"`
	// The size of the window when evaluating the dependency. If undefined the frequency of the tumbling window will be used.
	Size *string `pulumi:"size"`
	// The type of dependency reference.
	// Expected value is 'SelfDependencyTumblingWindowTriggerReference'.
	Type string `pulumi:"type"`
}

// Self referenced tumbling window trigger dependency.
type SelfDependencyTumblingWindowTriggerReferenceResponse struct {
	// Timespan applied to the start time of a tumbling window when evaluating dependency.
	Offset string `pulumi:"offset"`
	// The size of the window when evaluating the dependency. If undefined the frequency of the tumbling window will be used.
	Size *string `pulumi:"size"`
	// The type of dependency reference.
	// Expected value is 'SelfDependencyTumblingWindowTriggerReference'.
	Type string `pulumi:"type"`
}

// Self-hosted integration runtime.
type SelfHostedIntegrationRuntime struct {
	// Integration runtime description.
	Description *string `pulumi:"description"`
	// The base definition of a linked integration runtime.
	LinkedInfo interface{} `pulumi:"linkedInfo"`
	// The type of integration runtime.
	// Expected value is 'SelfHosted'.
	Type string `pulumi:"type"`
}

// Properties of Self-hosted integration runtime node.
type SelfHostedIntegrationRuntimeNodeResponse struct {
	// The integration runtime capabilities dictionary
	Capabilities map[string]string `pulumi:"capabilities"`
	// Maximum concurrent jobs on the integration runtime node.
	ConcurrentJobsLimit int `pulumi:"concurrentJobsLimit"`
	// The time at which the integration runtime will expire in ISO8601 format.
	ExpiryTime string `pulumi:"expiryTime"`
	// URI for the host machine of the integration runtime.
	HostServiceUri string `pulumi:"hostServiceUri"`
	// Indicates whether this node is the active dispatcher for integration runtime requests.
	IsActiveDispatcher bool `pulumi:"isActiveDispatcher"`
	// The most recent time at which the integration runtime was connected in ISO8601 format.
	LastConnectTime string `pulumi:"lastConnectTime"`
	// The last time for the integration runtime node update end.
	LastEndUpdateTime string `pulumi:"lastEndUpdateTime"`
	// The time the node last started up.
	LastStartTime string `pulumi:"lastStartTime"`
	// The last time for the integration runtime node update start.
	LastStartUpdateTime string `pulumi:"lastStartUpdateTime"`
	// The integration runtime node last stop time.
	LastStopTime string `pulumi:"lastStopTime"`
	// The result of the last integration runtime node update.
	LastUpdateResult string `pulumi:"lastUpdateResult"`
	// Machine name of the integration runtime node.
	MachineName string `pulumi:"machineName"`
	// The maximum concurrent jobs in this integration runtime.
	MaxConcurrentJobs int `pulumi:"maxConcurrentJobs"`
	// Name of the integration runtime node.
	NodeName string `pulumi:"nodeName"`
	// The time at which the integration runtime node was registered in ISO8601 format.
	RegisterTime string `pulumi:"registerTime"`
	// Status of the integration runtime node.
	Status string `pulumi:"status"`
	// Version of the integration runtime node.
	Version string `pulumi:"version"`
	// Status of the integration runtime node version.
	VersionStatus string `pulumi:"versionStatus"`
}

// Self-hosted integration runtime.
type SelfHostedIntegrationRuntimeResponse struct {
	// Integration runtime description.
	Description *string `pulumi:"description"`
	// The base definition of a linked integration runtime.
	LinkedInfo interface{} `pulumi:"linkedInfo"`
	// The type of integration runtime.
	// Expected value is 'SelfHosted'.
	Type string `pulumi:"type"`
}

// Self-hosted integration runtime status.
type SelfHostedIntegrationRuntimeStatusResponse struct {
	// Whether Self-hosted integration runtime auto update has been turned on.
	AutoUpdate string `pulumi:"autoUpdate"`
	// The estimated time when the self-hosted integration runtime will be updated.
	AutoUpdateETA string `pulumi:"autoUpdateETA"`
	// Object with additional information about integration runtime capabilities.
	Capabilities map[string]string `pulumi:"capabilities"`
	// The time at which the integration runtime was created, in ISO8601 format.
	CreateTime string `pulumi:"createTime"`
	// The data factory name which the integration runtime belong to.
	DataFactoryName string `pulumi:"dataFactoryName"`
	// It is used to set the encryption mode for node-node communication channel (when more than 2 self-hosted integration runtime nodes exist).
	InternalChannelEncryption string `pulumi:"internalChannelEncryption"`
	// The latest version on download center.
	LatestVersion string `pulumi:"latestVersion"`
	// The list of linked integration runtimes that are created to share with this integration runtime.
	Links []LinkedIntegrationRuntimeResponse `pulumi:"links"`
	// The local time zone offset in hours.
	LocalTimeZoneOffset string `pulumi:"localTimeZoneOffset"`
	// The list of nodes for this integration runtime.
	Nodes []SelfHostedIntegrationRuntimeNodeResponse `pulumi:"nodes"`
	// The version that the integration runtime is going to update to.
	PushedVersion string `pulumi:"pushedVersion"`
	// The date at which the integration runtime will be scheduled to update, in ISO8601 format.
	ScheduledUpdateDate string `pulumi:"scheduledUpdateDate"`
	// The URLs for the services used in integration runtime backend service.
	ServiceUrls []string `pulumi:"serviceUrls"`
	// The state of integration runtime.
	State string `pulumi:"state"`
	// The task queue id of the integration runtime.
	TaskQueueId string `pulumi:"taskQueueId"`
	// The type of integration runtime.
	// Expected value is 'SelfHosted'.
	Type string `pulumi:"type"`
	// The time in the date scheduled by service to update the integration runtime, e.g., PT03H is 3 hours
	UpdateDelayOffset string `pulumi:"updateDelayOffset"`
	// Version of the integration runtime.
	Version string `pulumi:"version"`
	// Status of the integration runtime version.
	VersionStatus string `pulumi:"versionStatus"`
}

// ServiceNow server linked service.
type ServiceNowLinkedService struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The authentication type to use.
	AuthenticationType string `pulumi:"authenticationType"`
	// The client id for OAuth2 authentication.
	ClientId interface{} `pulumi:"clientId"`
	// The client secret for OAuth2 authentication.
	ClientSecret interface{} `pulumi:"clientSecret"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference `pulumi:"connectVia"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential interface{} `pulumi:"encryptedCredential"`
	// The endpoint of the ServiceNow server. (i.e. <instance>.service-now.com)
	Endpoint interface{} `pulumi:"endpoint"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// The password corresponding to the user name for Basic and OAuth2 authentication.
	Password interface{} `pulumi:"password"`
	// Type of linked service.
	// Expected value is 'ServiceNow'.
	Type string `pulumi:"type"`
	// Specifies whether the data source endpoints are encrypted using HTTPS. The default value is true.
	UseEncryptedEndpoints interface{} `pulumi:"useEncryptedEndpoints"`
	// Specifies whether to require the host name in the server's certificate to match the host name of the server when connecting over SSL. The default value is true.
	UseHostVerification interface{} `pulumi:"useHostVerification"`
	// Specifies whether to verify the identity of the server when connecting over SSL. The default value is true.
	UsePeerVerification interface{} `pulumi:"usePeerVerification"`
	// The user name used to connect to the ServiceNow server for Basic and OAuth2 authentication.
	Username interface{} `pulumi:"username"`
}

// ServiceNow server linked service.
type ServiceNowLinkedServiceResponse struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The authentication type to use.
	AuthenticationType string `pulumi:"authenticationType"`
	// The client id for OAuth2 authentication.
	ClientId interface{} `pulumi:"clientId"`
	// The client secret for OAuth2 authentication.
	ClientSecret interface{} `pulumi:"clientSecret"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReferenceResponse `pulumi:"connectVia"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential interface{} `pulumi:"encryptedCredential"`
	// The endpoint of the ServiceNow server. (i.e. <instance>.service-now.com)
	Endpoint interface{} `pulumi:"endpoint"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// The password corresponding to the user name for Basic and OAuth2 authentication.
	Password interface{} `pulumi:"password"`
	// Type of linked service.
	// Expected value is 'ServiceNow'.
	Type string `pulumi:"type"`
	// Specifies whether the data source endpoints are encrypted using HTTPS. The default value is true.
	UseEncryptedEndpoints interface{} `pulumi:"useEncryptedEndpoints"`
	// Specifies whether to require the host name in the server's certificate to match the host name of the server when connecting over SSL. The default value is true.
	UseHostVerification interface{} `pulumi:"useHostVerification"`
	// Specifies whether to verify the identity of the server when connecting over SSL. The default value is true.
	UsePeerVerification interface{} `pulumi:"usePeerVerification"`
	// The user name used to connect to the ServiceNow server for Basic and OAuth2 authentication.
	Username interface{} `pulumi:"username"`
}

// ServiceNow server dataset.
type ServiceNowObjectDataset struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReference `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// The table name. Type: string (or Expression with resultType string).
	TableName interface{} `pulumi:"tableName"`
	// Type of dataset.
	// Expected value is 'ServiceNowObject'.
	Type string `pulumi:"type"`
}

// ServiceNow server dataset.
type ServiceNowObjectDatasetResponse struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetResponseFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceResponse `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// The table name. Type: string (or Expression with resultType string).
	TableName interface{} `pulumi:"tableName"`
	// Type of dataset.
	// Expected value is 'ServiceNowObject'.
	Type string `pulumi:"type"`
}

// A copy activity ServiceNow server source.
type ServiceNowSource struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns interface{} `pulumi:"additionalColumns"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// A query to retrieve data from source. Type: string (or Expression with resultType string).
	Query interface{} `pulumi:"query"`
	// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	QueryTimeout interface{} `pulumi:"queryTimeout"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// Copy source type.
	// Expected value is 'ServiceNowSource'.
	Type string `pulumi:"type"`
}

// A copy activity ServiceNow server source.
type ServiceNowSourceResponse struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns interface{} `pulumi:"additionalColumns"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// A query to retrieve data from source. Type: string (or Expression with resultType string).
	Query interface{} `pulumi:"query"`
	// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	QueryTimeout interface{} `pulumi:"queryTimeout"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// Copy source type.
	// Expected value is 'ServiceNowSource'.
	Type string `pulumi:"type"`
}

// Set value for a Variable.
type SetVariableActivity struct {
	// Activity depends on condition.
	DependsOn []ActivityDependency `pulumi:"dependsOn"`
	// Activity description.
	Description *string `pulumi:"description"`
	// Activity name.
	Name string `pulumi:"name"`
	// Type of activity.
	// Expected value is 'SetVariable'.
	Type string `pulumi:"type"`
	// Activity user properties.
	UserProperties []UserProperty `pulumi:"userProperties"`
	// Value to be set. Could be a static value or Expression
	Value interface{} `pulumi:"value"`
	// Name of the variable whose value needs to be set.
	VariableName *string `pulumi:"variableName"`
}

// Set value for a Variable.
type SetVariableActivityResponse struct {
	// Activity depends on condition.
	DependsOn []ActivityDependencyResponse `pulumi:"dependsOn"`
	// Activity description.
	Description *string `pulumi:"description"`
	// Activity name.
	Name string `pulumi:"name"`
	// Type of activity.
	// Expected value is 'SetVariable'.
	Type string `pulumi:"type"`
	// Activity user properties.
	UserProperties []UserPropertyResponse `pulumi:"userProperties"`
	// Value to be set. Could be a static value or Expression
	Value interface{} `pulumi:"value"`
	// Name of the variable whose value needs to be set.
	VariableName *string `pulumi:"variableName"`
}

// The location of SFTP dataset.
type SftpLocation struct {
	// Specify the file name of dataset. Type: string (or Expression with resultType string).
	FileName interface{} `pulumi:"fileName"`
	// Specify the folder path of dataset. Type: string (or Expression with resultType string)
	FolderPath interface{} `pulumi:"folderPath"`
	// Type of dataset storage location.
	// Expected value is 'SftpLocation'.
	Type string `pulumi:"type"`
}

// The location of SFTP dataset.
type SftpLocationResponse struct {
	// Specify the file name of dataset. Type: string (or Expression with resultType string).
	FileName interface{} `pulumi:"fileName"`
	// Specify the folder path of dataset. Type: string (or Expression with resultType string)
	FolderPath interface{} `pulumi:"folderPath"`
	// Type of dataset storage location.
	// Expected value is 'SftpLocation'.
	Type string `pulumi:"type"`
}

// Sftp read settings.
type SftpReadSettings struct {
	// Indicates whether the source files need to be deleted after copy completion. Default is false. Type: boolean (or Expression with resultType boolean).
	DeleteFilesAfterCompletion interface{} `pulumi:"deleteFilesAfterCompletion"`
	// If true, disable parallel reading within each file. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableChunking interface{} `pulumi:"disableChunking"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// Indicates whether to enable partition discovery.
	EnablePartitionDiscovery *bool `pulumi:"enablePartitionDiscovery"`
	// Point to a text file that lists each file (relative path to the path configured in the dataset) that you want to copy. Type: string (or Expression with resultType string).
	FileListPath interface{} `pulumi:"fileListPath"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// The end of file's modified datetime. Type: string (or Expression with resultType string).
	ModifiedDatetimeEnd interface{} `pulumi:"modifiedDatetimeEnd"`
	// The start of file's modified datetime. Type: string (or Expression with resultType string).
	ModifiedDatetimeStart interface{} `pulumi:"modifiedDatetimeStart"`
	// Specify the root path where partition discovery starts from. Type: string (or Expression with resultType string).
	PartitionRootPath interface{} `pulumi:"partitionRootPath"`
	// If true, files under the folder path will be read recursively. Default is true. Type: boolean (or Expression with resultType boolean).
	Recursive interface{} `pulumi:"recursive"`
	// The read setting type.
	// Expected value is 'SftpReadSettings'.
	Type string `pulumi:"type"`
	// Sftp wildcardFileName. Type: string (or Expression with resultType string).
	WildcardFileName interface{} `pulumi:"wildcardFileName"`
	// Sftp wildcardFolderPath. Type: string (or Expression with resultType string).
	WildcardFolderPath interface{} `pulumi:"wildcardFolderPath"`
}

// Sftp read settings.
type SftpReadSettingsResponse struct {
	// Indicates whether the source files need to be deleted after copy completion. Default is false. Type: boolean (or Expression with resultType boolean).
	DeleteFilesAfterCompletion interface{} `pulumi:"deleteFilesAfterCompletion"`
	// If true, disable parallel reading within each file. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableChunking interface{} `pulumi:"disableChunking"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// Indicates whether to enable partition discovery.
	EnablePartitionDiscovery *bool `pulumi:"enablePartitionDiscovery"`
	// Point to a text file that lists each file (relative path to the path configured in the dataset) that you want to copy. Type: string (or Expression with resultType string).
	FileListPath interface{} `pulumi:"fileListPath"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// The end of file's modified datetime. Type: string (or Expression with resultType string).
	ModifiedDatetimeEnd interface{} `pulumi:"modifiedDatetimeEnd"`
	// The start of file's modified datetime. Type: string (or Expression with resultType string).
	ModifiedDatetimeStart interface{} `pulumi:"modifiedDatetimeStart"`
	// Specify the root path where partition discovery starts from. Type: string (or Expression with resultType string).
	PartitionRootPath interface{} `pulumi:"partitionRootPath"`
	// If true, files under the folder path will be read recursively. Default is true. Type: boolean (or Expression with resultType boolean).
	Recursive interface{} `pulumi:"recursive"`
	// The read setting type.
	// Expected value is 'SftpReadSettings'.
	Type string `pulumi:"type"`
	// Sftp wildcardFileName. Type: string (or Expression with resultType string).
	WildcardFileName interface{} `pulumi:"wildcardFileName"`
	// Sftp wildcardFolderPath. Type: string (or Expression with resultType string).
	WildcardFolderPath interface{} `pulumi:"wildcardFolderPath"`
}

// A linked service for an SSH File Transfer Protocol (SFTP) server.
type SftpServerLinkedService struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The authentication type to be used to connect to the FTP server.
	AuthenticationType *string `pulumi:"authenticationType"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference `pulumi:"connectVia"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential interface{} `pulumi:"encryptedCredential"`
	// The SFTP server host name. Type: string (or Expression with resultType string).
	Host interface{} `pulumi:"host"`
	// The host key finger-print of the SFTP server. When SkipHostKeyValidation is false, HostKeyFingerprint should be specified. Type: string (or Expression with resultType string).
	HostKeyFingerprint interface{} `pulumi:"hostKeyFingerprint"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// The password to decrypt the SSH private key if the SSH private key is encrypted.
	PassPhrase interface{} `pulumi:"passPhrase"`
	// Password to logon the SFTP server for Basic authentication.
	Password interface{} `pulumi:"password"`
	// The TCP port number that the SFTP server uses to listen for client connections. Default value is 22. Type: integer (or Expression with resultType integer), minimum: 0.
	Port interface{} `pulumi:"port"`
	// Base64 encoded SSH private key content for SshPublicKey authentication. For on-premises copy with SshPublicKey authentication, either PrivateKeyPath or PrivateKeyContent should be specified. SSH private key should be OpenSSH format.
	PrivateKeyContent interface{} `pulumi:"privateKeyContent"`
	// The SSH private key file path for SshPublicKey authentication. Only valid for on-premises copy. For on-premises copy with SshPublicKey authentication, either PrivateKeyPath or PrivateKeyContent should be specified. SSH private key should be OpenSSH format. Type: string (or Expression with resultType string).
	PrivateKeyPath interface{} `pulumi:"privateKeyPath"`
	// If true, skip the SSH host key validation. Default value is false. Type: boolean (or Expression with resultType boolean).
	SkipHostKeyValidation interface{} `pulumi:"skipHostKeyValidation"`
	// Type of linked service.
	// Expected value is 'Sftp'.
	Type string `pulumi:"type"`
	// The username used to log on to the SFTP server. Type: string (or Expression with resultType string).
	UserName interface{} `pulumi:"userName"`
}

// A linked service for an SSH File Transfer Protocol (SFTP) server.
type SftpServerLinkedServiceResponse struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The authentication type to be used to connect to the FTP server.
	AuthenticationType *string `pulumi:"authenticationType"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReferenceResponse `pulumi:"connectVia"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential interface{} `pulumi:"encryptedCredential"`
	// The SFTP server host name. Type: string (or Expression with resultType string).
	Host interface{} `pulumi:"host"`
	// The host key finger-print of the SFTP server. When SkipHostKeyValidation is false, HostKeyFingerprint should be specified. Type: string (or Expression with resultType string).
	HostKeyFingerprint interface{} `pulumi:"hostKeyFingerprint"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// The password to decrypt the SSH private key if the SSH private key is encrypted.
	PassPhrase interface{} `pulumi:"passPhrase"`
	// Password to logon the SFTP server for Basic authentication.
	Password interface{} `pulumi:"password"`
	// The TCP port number that the SFTP server uses to listen for client connections. Default value is 22. Type: integer (or Expression with resultType integer), minimum: 0.
	Port interface{} `pulumi:"port"`
	// Base64 encoded SSH private key content for SshPublicKey authentication. For on-premises copy with SshPublicKey authentication, either PrivateKeyPath or PrivateKeyContent should be specified. SSH private key should be OpenSSH format.
	PrivateKeyContent interface{} `pulumi:"privateKeyContent"`
	// The SSH private key file path for SshPublicKey authentication. Only valid for on-premises copy. For on-premises copy with SshPublicKey authentication, either PrivateKeyPath or PrivateKeyContent should be specified. SSH private key should be OpenSSH format. Type: string (or Expression with resultType string).
	PrivateKeyPath interface{} `pulumi:"privateKeyPath"`
	// If true, skip the SSH host key validation. Default value is false. Type: boolean (or Expression with resultType boolean).
	SkipHostKeyValidation interface{} `pulumi:"skipHostKeyValidation"`
	// Type of linked service.
	// Expected value is 'Sftp'.
	Type string `pulumi:"type"`
	// The username used to log on to the SFTP server. Type: string (or Expression with resultType string).
	UserName interface{} `pulumi:"userName"`
}

// Sftp write settings.
type SftpWriteSettings struct {
	// The type of copy behavior for copy sink.
	CopyBehavior interface{} `pulumi:"copyBehavior"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// Specifies the timeout for writing each chunk to SFTP server. Default value: 01:00:00 (one hour). Type: string (or Expression with resultType string).
	OperationTimeout interface{} `pulumi:"operationTimeout"`
	// The write setting type.
	// Expected value is 'SftpWriteSettings'.
	Type string `pulumi:"type"`
	// Upload to temporary file(s) and rename. Disable this option if your SFTP server doesn't support rename operation. Type: boolean (or Expression with resultType boolean).
	UseTempFileRename interface{} `pulumi:"useTempFileRename"`
}

// Sftp write settings.
type SftpWriteSettingsResponse struct {
	// The type of copy behavior for copy sink.
	CopyBehavior interface{} `pulumi:"copyBehavior"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// Specifies the timeout for writing each chunk to SFTP server. Default value: 01:00:00 (one hour). Type: string (or Expression with resultType string).
	OperationTimeout interface{} `pulumi:"operationTimeout"`
	// The write setting type.
	// Expected value is 'SftpWriteSettings'.
	Type string `pulumi:"type"`
	// Upload to temporary file(s) and rename. Disable this option if your SFTP server doesn't support rename operation. Type: boolean (or Expression with resultType boolean).
	UseTempFileRename interface{} `pulumi:"useTempFileRename"`
}

// SharePoint Online List linked service.
type SharePointOnlineListLinkedService struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference `pulumi:"connectVia"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential interface{} `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// The application (client) ID of your application registered in Azure Active Directory. Make sure to grant SharePoint site permission to this application. Type: string (or Expression with resultType string).
	ServicePrincipalId interface{} `pulumi:"servicePrincipalId"`
	// The client secret of your application registered in Azure Active Directory. Type: string (or Expression with resultType string).
	ServicePrincipalKey interface{} `pulumi:"servicePrincipalKey"`
	// The URL of the SharePoint Online site. For example, https://contoso.sharepoint.com/sites/siteName. Type: string (or Expression with resultType string).
	SiteUrl interface{} `pulumi:"siteUrl"`
	// The tenant ID under which your application resides. You can find it from Azure portal Active Directory overview page. Type: string (or Expression with resultType string).
	TenantId interface{} `pulumi:"tenantId"`
	// Type of linked service.
	// Expected value is 'SharePointOnlineList'.
	Type string `pulumi:"type"`
}

// SharePoint Online List linked service.
type SharePointOnlineListLinkedServiceResponse struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReferenceResponse `pulumi:"connectVia"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential interface{} `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// The application (client) ID of your application registered in Azure Active Directory. Make sure to grant SharePoint site permission to this application. Type: string (or Expression with resultType string).
	ServicePrincipalId interface{} `pulumi:"servicePrincipalId"`
	// The client secret of your application registered in Azure Active Directory. Type: string (or Expression with resultType string).
	ServicePrincipalKey interface{} `pulumi:"servicePrincipalKey"`
	// The URL of the SharePoint Online site. For example, https://contoso.sharepoint.com/sites/siteName. Type: string (or Expression with resultType string).
	SiteUrl interface{} `pulumi:"siteUrl"`
	// The tenant ID under which your application resides. You can find it from Azure portal Active Directory overview page. Type: string (or Expression with resultType string).
	TenantId interface{} `pulumi:"tenantId"`
	// Type of linked service.
	// Expected value is 'SharePointOnlineList'.
	Type string `pulumi:"type"`
}

// The sharepoint online list resource dataset.
type SharePointOnlineListResourceDataset struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReference `pulumi:"linkedServiceName"`
	// The name of the SharePoint Online list. Type: string (or Expression with resultType string).
	ListName interface{} `pulumi:"listName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// Type of dataset.
	// Expected value is 'SharePointOnlineListResource'.
	Type string `pulumi:"type"`
}

// The sharepoint online list resource dataset.
type SharePointOnlineListResourceDatasetResponse struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetResponseFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceResponse `pulumi:"linkedServiceName"`
	// The name of the SharePoint Online list. Type: string (or Expression with resultType string).
	ListName interface{} `pulumi:"listName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// Type of dataset.
	// Expected value is 'SharePointOnlineListResource'.
	Type string `pulumi:"type"`
}

// A copy activity source for sharePoint online list source.
type SharePointOnlineListSource struct {
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The wait time to get a response from SharePoint Online. Default value is 5 minutes (00:05:00). Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	HttpRequestTimeout interface{} `pulumi:"httpRequestTimeout"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// The OData query to filter the data in SharePoint Online list. For example, "$top=1". Type: string (or Expression with resultType string).
	Query interface{} `pulumi:"query"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// Copy source type.
	// Expected value is 'SharePointOnlineListSource'.
	Type string `pulumi:"type"`
}

// A copy activity source for sharePoint online list source.
type SharePointOnlineListSourceResponse struct {
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The wait time to get a response from SharePoint Online. Default value is 5 minutes (00:05:00). Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	HttpRequestTimeout interface{} `pulumi:"httpRequestTimeout"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// The OData query to filter the data in SharePoint Online list. For example, "$top=1". Type: string (or Expression with resultType string).
	Query interface{} `pulumi:"query"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// Copy source type.
	// Expected value is 'SharePointOnlineListSource'.
	Type string `pulumi:"type"`
}

// Shopify Service linked service.
type ShopifyLinkedService struct {
	// The API access token that can be used to access Shopify’s data. The token won't expire if it is offline mode.
	AccessToken interface{} `pulumi:"accessToken"`
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference `pulumi:"connectVia"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential interface{} `pulumi:"encryptedCredential"`
	// The endpoint of the Shopify server. (i.e. mystore.myshopify.com)
	Host interface{} `pulumi:"host"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Type of linked service.
	// Expected value is 'Shopify'.
	Type string `pulumi:"type"`
	// Specifies whether the data source endpoints are encrypted using HTTPS. The default value is true.
	UseEncryptedEndpoints interface{} `pulumi:"useEncryptedEndpoints"`
	// Specifies whether to require the host name in the server's certificate to match the host name of the server when connecting over SSL. The default value is true.
	UseHostVerification interface{} `pulumi:"useHostVerification"`
	// Specifies whether to verify the identity of the server when connecting over SSL. The default value is true.
	UsePeerVerification interface{} `pulumi:"usePeerVerification"`
}

// Shopify Service linked service.
type ShopifyLinkedServiceResponse struct {
	// The API access token that can be used to access Shopify’s data. The token won't expire if it is offline mode.
	AccessToken interface{} `pulumi:"accessToken"`
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReferenceResponse `pulumi:"connectVia"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential interface{} `pulumi:"encryptedCredential"`
	// The endpoint of the Shopify server. (i.e. mystore.myshopify.com)
	Host interface{} `pulumi:"host"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Type of linked service.
	// Expected value is 'Shopify'.
	Type string `pulumi:"type"`
	// Specifies whether the data source endpoints are encrypted using HTTPS. The default value is true.
	UseEncryptedEndpoints interface{} `pulumi:"useEncryptedEndpoints"`
	// Specifies whether to require the host name in the server's certificate to match the host name of the server when connecting over SSL. The default value is true.
	UseHostVerification interface{} `pulumi:"useHostVerification"`
	// Specifies whether to verify the identity of the server when connecting over SSL. The default value is true.
	UsePeerVerification interface{} `pulumi:"usePeerVerification"`
}

// Shopify Service dataset.
type ShopifyObjectDataset struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReference `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// The table name. Type: string (or Expression with resultType string).
	TableName interface{} `pulumi:"tableName"`
	// Type of dataset.
	// Expected value is 'ShopifyObject'.
	Type string `pulumi:"type"`
}

// Shopify Service dataset.
type ShopifyObjectDatasetResponse struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetResponseFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceResponse `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// The table name. Type: string (or Expression with resultType string).
	TableName interface{} `pulumi:"tableName"`
	// Type of dataset.
	// Expected value is 'ShopifyObject'.
	Type string `pulumi:"type"`
}

// A copy activity Shopify Service source.
type ShopifySource struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns interface{} `pulumi:"additionalColumns"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// A query to retrieve data from source. Type: string (or Expression with resultType string).
	Query interface{} `pulumi:"query"`
	// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	QueryTimeout interface{} `pulumi:"queryTimeout"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// Copy source type.
	// Expected value is 'ShopifySource'.
	Type string `pulumi:"type"`
}

// A copy activity Shopify Service source.
type ShopifySourceResponse struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns interface{} `pulumi:"additionalColumns"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// A query to retrieve data from source. Type: string (or Expression with resultType string).
	Query interface{} `pulumi:"query"`
	// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	QueryTimeout interface{} `pulumi:"queryTimeout"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// Copy source type.
	// Expected value is 'ShopifySource'.
	Type string `pulumi:"type"`
}

// Skip error file.
type SkipErrorFile struct {
	// Skip if source/sink file changed by other concurrent write. Default is false. Type: boolean (or Expression with resultType boolean).
	DataInconsistency interface{} `pulumi:"dataInconsistency"`
	// Skip if file is deleted by other client during copy. Default is true. Type: boolean (or Expression with resultType boolean).
	FileMissing interface{} `pulumi:"fileMissing"`
}

// Skip error file.
type SkipErrorFileResponse struct {
	// Skip if source/sink file changed by other concurrent write. Default is false. Type: boolean (or Expression with resultType boolean).
	DataInconsistency interface{} `pulumi:"dataInconsistency"`
	// Skip if file is deleted by other client during copy. Default is true. Type: boolean (or Expression with resultType boolean).
	FileMissing interface{} `pulumi:"fileMissing"`
}

// Linked service for Smartsheet.
type SmartsheetLinkedService struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The api token for the Smartsheet source.
	ApiToken interface{} `pulumi:"apiToken"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference `pulumi:"connectVia"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential interface{} `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Type of linked service.
	// Expected value is 'Smartsheet'.
	Type string `pulumi:"type"`
}

// Linked service for Smartsheet.
type SmartsheetLinkedServiceResponse struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The api token for the Smartsheet source.
	ApiToken interface{} `pulumi:"apiToken"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReferenceResponse `pulumi:"connectVia"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential interface{} `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Type of linked service.
	// Expected value is 'Smartsheet'.
	Type string `pulumi:"type"`
}

// The snowflake dataset.
type SnowflakeDataset struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReference `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// The table name of the Snowflake database. Type: string (or Expression with resultType string).
	Table interface{} `pulumi:"table"`
	// Type of dataset.
	// Expected value is 'SnowflakeTable'.
	Type string `pulumi:"type"`
}

// The snowflake dataset.
type SnowflakeDatasetResponse struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetResponseFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceResponse `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// The table name of the Snowflake database. Type: string (or Expression with resultType string).
	Table interface{} `pulumi:"table"`
	// Type of dataset.
	// Expected value is 'SnowflakeTable'.
	Type string `pulumi:"type"`
}

// Snowflake export command settings.
type SnowflakeExportCopyCommand struct {
	// Additional copy options directly passed to snowflake Copy Command. Type: key value pairs (value should be string type) (or Expression with resultType object). Example: "additionalCopyOptions": { "DATE_FORMAT": "MM/DD/YYYY", "TIME_FORMAT": "'HH24:MI:SS.FF'" }
	AdditionalCopyOptions map[string]interface{} `pulumi:"additionalCopyOptions"`
	// Additional format options directly passed to snowflake Copy Command. Type: key value pairs (value should be string type) (or Expression with resultType object). Example: "additionalFormatOptions": { "OVERWRITE": "TRUE", "MAX_FILE_SIZE": "'FALSE'" }
	AdditionalFormatOptions map[string]interface{} `pulumi:"additionalFormatOptions"`
	// The export setting type.
	// Expected value is 'SnowflakeExportCopyCommand'.
	Type string `pulumi:"type"`
}

// Snowflake export command settings.
type SnowflakeExportCopyCommandResponse struct {
	// Additional copy options directly passed to snowflake Copy Command. Type: key value pairs (value should be string type) (or Expression with resultType object). Example: "additionalCopyOptions": { "DATE_FORMAT": "MM/DD/YYYY", "TIME_FORMAT": "'HH24:MI:SS.FF'" }
	AdditionalCopyOptions map[string]interface{} `pulumi:"additionalCopyOptions"`
	// Additional format options directly passed to snowflake Copy Command. Type: key value pairs (value should be string type) (or Expression with resultType object). Example: "additionalFormatOptions": { "OVERWRITE": "TRUE", "MAX_FILE_SIZE": "'FALSE'" }
	AdditionalFormatOptions map[string]interface{} `pulumi:"additionalFormatOptions"`
	// The export setting type.
	// Expected value is 'SnowflakeExportCopyCommand'.
	Type string `pulumi:"type"`
}

// Snowflake import command settings.
type SnowflakeImportCopyCommand struct {
	// Additional copy options directly passed to snowflake Copy Command. Type: key value pairs (value should be string type) (or Expression with resultType object). Example: "additionalCopyOptions": { "DATE_FORMAT": "MM/DD/YYYY", "TIME_FORMAT": "'HH24:MI:SS.FF'" }
	AdditionalCopyOptions map[string]interface{} `pulumi:"additionalCopyOptions"`
	// Additional format options directly passed to snowflake Copy Command. Type: key value pairs (value should be string type) (or Expression with resultType object). Example: "additionalFormatOptions": { "FORCE": "TRUE", "LOAD_UNCERTAIN_FILES": "'FALSE'" }
	AdditionalFormatOptions map[string]interface{} `pulumi:"additionalFormatOptions"`
	// The import setting type.
	// Expected value is 'SnowflakeImportCopyCommand'.
	Type string `pulumi:"type"`
}

// Snowflake import command settings.
type SnowflakeImportCopyCommandResponse struct {
	// Additional copy options directly passed to snowflake Copy Command. Type: key value pairs (value should be string type) (or Expression with resultType object). Example: "additionalCopyOptions": { "DATE_FORMAT": "MM/DD/YYYY", "TIME_FORMAT": "'HH24:MI:SS.FF'" }
	AdditionalCopyOptions map[string]interface{} `pulumi:"additionalCopyOptions"`
	// Additional format options directly passed to snowflake Copy Command. Type: key value pairs (value should be string type) (or Expression with resultType object). Example: "additionalFormatOptions": { "FORCE": "TRUE", "LOAD_UNCERTAIN_FILES": "'FALSE'" }
	AdditionalFormatOptions map[string]interface{} `pulumi:"additionalFormatOptions"`
	// The import setting type.
	// Expected value is 'SnowflakeImportCopyCommand'.
	Type string `pulumi:"type"`
}

// Snowflake linked service.
type SnowflakeLinkedService struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference `pulumi:"connectVia"`
	// The connection string of snowflake. Type: string, SecureString.
	ConnectionString interface{} `pulumi:"connectionString"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential interface{} `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// The Azure key vault secret reference of password in connection string.
	Password *AzureKeyVaultSecretReference `pulumi:"password"`
	// Type of linked service.
	// Expected value is 'Snowflake'.
	Type string `pulumi:"type"`
}

// Snowflake linked service.
type SnowflakeLinkedServiceResponse struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReferenceResponse `pulumi:"connectVia"`
	// The connection string of snowflake. Type: string, SecureString.
	ConnectionString interface{} `pulumi:"connectionString"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential interface{} `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// The Azure key vault secret reference of password in connection string.
	Password *AzureKeyVaultSecretReferenceResponse `pulumi:"password"`
	// Type of linked service.
	// Expected value is 'Snowflake'.
	Type string `pulumi:"type"`
}

// A copy activity snowflake sink.
type SnowflakeSink struct {
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// Snowflake import settings.
	ImportSettings *SnowflakeImportCopyCommand `pulumi:"importSettings"`
	// The maximum concurrent connection count for the sink data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// SQL pre-copy script. Type: string (or Expression with resultType string).
	PreCopyScript interface{} `pulumi:"preCopyScript"`
	// Sink retry count. Type: integer (or Expression with resultType integer).
	SinkRetryCount interface{} `pulumi:"sinkRetryCount"`
	// Sink retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SinkRetryWait interface{} `pulumi:"sinkRetryWait"`
	// Copy sink type.
	// Expected value is 'SnowflakeSink'.
	Type string `pulumi:"type"`
	// Write batch size. Type: integer (or Expression with resultType integer), minimum: 0.
	WriteBatchSize interface{} `pulumi:"writeBatchSize"`
	// Write batch timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	WriteBatchTimeout interface{} `pulumi:"writeBatchTimeout"`
}

// A copy activity snowflake sink.
type SnowflakeSinkResponse struct {
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// Snowflake import settings.
	ImportSettings *SnowflakeImportCopyCommandResponse `pulumi:"importSettings"`
	// The maximum concurrent connection count for the sink data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// SQL pre-copy script. Type: string (or Expression with resultType string).
	PreCopyScript interface{} `pulumi:"preCopyScript"`
	// Sink retry count. Type: integer (or Expression with resultType integer).
	SinkRetryCount interface{} `pulumi:"sinkRetryCount"`
	// Sink retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SinkRetryWait interface{} `pulumi:"sinkRetryWait"`
	// Copy sink type.
	// Expected value is 'SnowflakeSink'.
	Type string `pulumi:"type"`
	// Write batch size. Type: integer (or Expression with resultType integer), minimum: 0.
	WriteBatchSize interface{} `pulumi:"writeBatchSize"`
	// Write batch timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	WriteBatchTimeout interface{} `pulumi:"writeBatchTimeout"`
}

// A copy activity snowflake source.
type SnowflakeSource struct {
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// Snowflake export settings.
	ExportSettings *SnowflakeExportCopyCommand `pulumi:"exportSettings"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// Snowflake Sql query. Type: string (or Expression with resultType string).
	Query interface{} `pulumi:"query"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// Copy source type.
	// Expected value is 'SnowflakeSource'.
	Type string `pulumi:"type"`
}

// A copy activity snowflake source.
type SnowflakeSourceResponse struct {
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// Snowflake export settings.
	ExportSettings *SnowflakeExportCopyCommandResponse `pulumi:"exportSettings"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// Snowflake Sql query. Type: string (or Expression with resultType string).
	Query interface{} `pulumi:"query"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// Copy source type.
	// Expected value is 'SnowflakeSource'.
	Type string `pulumi:"type"`
}

// Spark Server linked service.
type SparkLinkedService struct {
	// Specifies whether to require a CA-issued SSL certificate name to match the host name of the server when connecting over SSL. The default value is false.
	AllowHostNameCNMismatch interface{} `pulumi:"allowHostNameCNMismatch"`
	// Specifies whether to allow self-signed certificates from the server. The default value is false.
	AllowSelfSignedServerCert interface{} `pulumi:"allowSelfSignedServerCert"`
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The authentication method used to access the Spark server.
	AuthenticationType string `pulumi:"authenticationType"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference `pulumi:"connectVia"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// Specifies whether the connections to the server are encrypted using SSL. The default value is false.
	EnableSsl interface{} `pulumi:"enableSsl"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential interface{} `pulumi:"encryptedCredential"`
	// IP address or host name of the Spark server
	Host interface{} `pulumi:"host"`
	// The partial URL corresponding to the Spark server.
	HttpPath interface{} `pulumi:"httpPath"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// The password corresponding to the user name that you provided in the Username field
	Password interface{} `pulumi:"password"`
	// The TCP port that the Spark server uses to listen for client connections.
	Port interface{} `pulumi:"port"`
	// The type of Spark server.
	ServerType *string `pulumi:"serverType"`
	// The transport protocol to use in the Thrift layer.
	ThriftTransportProtocol *string `pulumi:"thriftTransportProtocol"`
	// The full path of the .pem file containing trusted CA certificates for verifying the server when connecting over SSL. This property can only be set when using SSL on self-hosted IR. The default value is the cacerts.pem file installed with the IR.
	TrustedCertPath interface{} `pulumi:"trustedCertPath"`
	// Type of linked service.
	// Expected value is 'Spark'.
	Type string `pulumi:"type"`
	// Specifies whether to use a CA certificate from the system trust store or from a specified PEM file. The default value is false.
	UseSystemTrustStore interface{} `pulumi:"useSystemTrustStore"`
	// The user name that you use to access Spark Server.
	Username interface{} `pulumi:"username"`
}

// Spark Server linked service.
type SparkLinkedServiceResponse struct {
	// Specifies whether to require a CA-issued SSL certificate name to match the host name of the server when connecting over SSL. The default value is false.
	AllowHostNameCNMismatch interface{} `pulumi:"allowHostNameCNMismatch"`
	// Specifies whether to allow self-signed certificates from the server. The default value is false.
	AllowSelfSignedServerCert interface{} `pulumi:"allowSelfSignedServerCert"`
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The authentication method used to access the Spark server.
	AuthenticationType string `pulumi:"authenticationType"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReferenceResponse `pulumi:"connectVia"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// Specifies whether the connections to the server are encrypted using SSL. The default value is false.
	EnableSsl interface{} `pulumi:"enableSsl"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential interface{} `pulumi:"encryptedCredential"`
	// IP address or host name of the Spark server
	Host interface{} `pulumi:"host"`
	// The partial URL corresponding to the Spark server.
	HttpPath interface{} `pulumi:"httpPath"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// The password corresponding to the user name that you provided in the Username field
	Password interface{} `pulumi:"password"`
	// The TCP port that the Spark server uses to listen for client connections.
	Port interface{} `pulumi:"port"`
	// The type of Spark server.
	ServerType *string `pulumi:"serverType"`
	// The transport protocol to use in the Thrift layer.
	ThriftTransportProtocol *string `pulumi:"thriftTransportProtocol"`
	// The full path of the .pem file containing trusted CA certificates for verifying the server when connecting over SSL. This property can only be set when using SSL on self-hosted IR. The default value is the cacerts.pem file installed with the IR.
	TrustedCertPath interface{} `pulumi:"trustedCertPath"`
	// Type of linked service.
	// Expected value is 'Spark'.
	Type string `pulumi:"type"`
	// Specifies whether to use a CA certificate from the system trust store or from a specified PEM file. The default value is false.
	UseSystemTrustStore interface{} `pulumi:"useSystemTrustStore"`
	// The user name that you use to access Spark Server.
	Username interface{} `pulumi:"username"`
}

// Spark Server dataset.
type SparkObjectDataset struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReference `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// The table name of the Spark. Type: string (or Expression with resultType string).
	Table interface{} `pulumi:"table"`
	// This property will be retired. Please consider using schema + table properties instead.
	TableName interface{} `pulumi:"tableName"`
	// Type of dataset.
	// Expected value is 'SparkObject'.
	Type string `pulumi:"type"`
}

// Spark Server dataset.
type SparkObjectDatasetResponse struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetResponseFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceResponse `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// The table name of the Spark. Type: string (or Expression with resultType string).
	Table interface{} `pulumi:"table"`
	// This property will be retired. Please consider using schema + table properties instead.
	TableName interface{} `pulumi:"tableName"`
	// Type of dataset.
	// Expected value is 'SparkObject'.
	Type string `pulumi:"type"`
}

// A copy activity Spark Server source.
type SparkSource struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns interface{} `pulumi:"additionalColumns"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// A query to retrieve data from source. Type: string (or Expression with resultType string).
	Query interface{} `pulumi:"query"`
	// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	QueryTimeout interface{} `pulumi:"queryTimeout"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// Copy source type.
	// Expected value is 'SparkSource'.
	Type string `pulumi:"type"`
}

// A copy activity Spark Server source.
type SparkSourceResponse struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns interface{} `pulumi:"additionalColumns"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// A query to retrieve data from source. Type: string (or Expression with resultType string).
	Query interface{} `pulumi:"query"`
	// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	QueryTimeout interface{} `pulumi:"queryTimeout"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// Copy source type.
	// Expected value is 'SparkSource'.
	Type string `pulumi:"type"`
}

// Sql always encrypted properties.
type SqlAlwaysEncryptedProperties struct {
	// Sql always encrypted AKV authentication type. Type: string (or Expression with resultType string).
	AlwaysEncryptedAkvAuthType string `pulumi:"alwaysEncryptedAkvAuthType"`
	// The credential reference containing authentication information.
	Credential *CredentialReference `pulumi:"credential"`
	// The client ID of the application in Azure Active Directory used for Azure Key Vault authentication. Type: string (or Expression with resultType string).
	ServicePrincipalId interface{} `pulumi:"servicePrincipalId"`
	// The key of the service principal used to authenticate against Azure Key Vault.
	ServicePrincipalKey interface{} `pulumi:"servicePrincipalKey"`
}

// Sql always encrypted properties.
type SqlAlwaysEncryptedPropertiesResponse struct {
	// Sql always encrypted AKV authentication type. Type: string (or Expression with resultType string).
	AlwaysEncryptedAkvAuthType string `pulumi:"alwaysEncryptedAkvAuthType"`
	// The credential reference containing authentication information.
	Credential *CredentialReferenceResponse `pulumi:"credential"`
	// The client ID of the application in Azure Active Directory used for Azure Key Vault authentication. Type: string (or Expression with resultType string).
	ServicePrincipalId interface{} `pulumi:"servicePrincipalId"`
	// The key of the service principal used to authenticate against Azure Key Vault.
	ServicePrincipalKey interface{} `pulumi:"servicePrincipalKey"`
}

// A copy activity SQL Data Warehouse sink.
type SqlDWSink struct {
	// Indicates to use Copy Command to copy data into SQL Data Warehouse. Type: boolean (or Expression with resultType boolean).
	AllowCopyCommand interface{} `pulumi:"allowCopyCommand"`
	// Indicates to use PolyBase to copy data into SQL Data Warehouse when applicable. Type: boolean (or Expression with resultType boolean).
	AllowPolyBase interface{} `pulumi:"allowPolyBase"`
	// Specifies Copy Command related settings when allowCopyCommand is true.
	CopyCommandSettings *DWCopyCommandSettings `pulumi:"copyCommandSettings"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the sink data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// Specifies PolyBase-related settings when allowPolyBase is true.
	PolyBaseSettings *PolybaseSettings `pulumi:"polyBaseSettings"`
	// SQL pre-copy script. Type: string (or Expression with resultType string).
	PreCopyScript interface{} `pulumi:"preCopyScript"`
	// Sink retry count. Type: integer (or Expression with resultType integer).
	SinkRetryCount interface{} `pulumi:"sinkRetryCount"`
	// Sink retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SinkRetryWait interface{} `pulumi:"sinkRetryWait"`
	// Whether to use table lock during bulk copy. Type: boolean (or Expression with resultType boolean).
	SqlWriterUseTableLock interface{} `pulumi:"sqlWriterUseTableLock"`
	// The option to handle sink table, such as autoCreate. For now only 'autoCreate' value is supported. Type: string (or Expression with resultType string).
	TableOption interface{} `pulumi:"tableOption"`
	// Copy sink type.
	// Expected value is 'SqlDWSink'.
	Type string `pulumi:"type"`
	// SQL DW upsert settings.
	UpsertSettings *SqlDWUpsertSettings `pulumi:"upsertSettings"`
	// Write batch size. Type: integer (or Expression with resultType integer), minimum: 0.
	WriteBatchSize interface{} `pulumi:"writeBatchSize"`
	// Write batch timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	WriteBatchTimeout interface{} `pulumi:"writeBatchTimeout"`
	// Write behavior when copying data into azure SQL DW. Type: SqlDWWriteBehaviorEnum (or Expression with resultType SqlDWWriteBehaviorEnum)
	WriteBehavior interface{} `pulumi:"writeBehavior"`
}

// A copy activity SQL Data Warehouse sink.
type SqlDWSinkResponse struct {
	// Indicates to use Copy Command to copy data into SQL Data Warehouse. Type: boolean (or Expression with resultType boolean).
	AllowCopyCommand interface{} `pulumi:"allowCopyCommand"`
	// Indicates to use PolyBase to copy data into SQL Data Warehouse when applicable. Type: boolean (or Expression with resultType boolean).
	AllowPolyBase interface{} `pulumi:"allowPolyBase"`
	// Specifies Copy Command related settings when allowCopyCommand is true.
	CopyCommandSettings *DWCopyCommandSettingsResponse `pulumi:"copyCommandSettings"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the sink data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// Specifies PolyBase-related settings when allowPolyBase is true.
	PolyBaseSettings *PolybaseSettingsResponse `pulumi:"polyBaseSettings"`
	// SQL pre-copy script. Type: string (or Expression with resultType string).
	PreCopyScript interface{} `pulumi:"preCopyScript"`
	// Sink retry count. Type: integer (or Expression with resultType integer).
	SinkRetryCount interface{} `pulumi:"sinkRetryCount"`
	// Sink retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SinkRetryWait interface{} `pulumi:"sinkRetryWait"`
	// Whether to use table lock during bulk copy. Type: boolean (or Expression with resultType boolean).
	SqlWriterUseTableLock interface{} `pulumi:"sqlWriterUseTableLock"`
	// The option to handle sink table, such as autoCreate. For now only 'autoCreate' value is supported. Type: string (or Expression with resultType string).
	TableOption interface{} `pulumi:"tableOption"`
	// Copy sink type.
	// Expected value is 'SqlDWSink'.
	Type string `pulumi:"type"`
	// SQL DW upsert settings.
	UpsertSettings *SqlDWUpsertSettingsResponse `pulumi:"upsertSettings"`
	// Write batch size. Type: integer (or Expression with resultType integer), minimum: 0.
	WriteBatchSize interface{} `pulumi:"writeBatchSize"`
	// Write batch timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	WriteBatchTimeout interface{} `pulumi:"writeBatchTimeout"`
	// Write behavior when copying data into azure SQL DW. Type: SqlDWWriteBehaviorEnum (or Expression with resultType SqlDWWriteBehaviorEnum)
	WriteBehavior interface{} `pulumi:"writeBehavior"`
}

// A copy activity SQL Data Warehouse source.
type SqlDWSource struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns interface{} `pulumi:"additionalColumns"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// The partition mechanism that will be used for Sql read in parallel. Possible values include: "None", "PhysicalPartitionsOfTable", "DynamicRange".
	PartitionOption interface{} `pulumi:"partitionOption"`
	// The settings that will be leveraged for Sql source partitioning.
	PartitionSettings *SqlPartitionSettings `pulumi:"partitionSettings"`
	// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	QueryTimeout interface{} `pulumi:"queryTimeout"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// SQL Data Warehouse reader query. Type: string (or Expression with resultType string).
	SqlReaderQuery interface{} `pulumi:"sqlReaderQuery"`
	// Name of the stored procedure for a SQL Data Warehouse source. This cannot be used at the same time as SqlReaderQuery. Type: string (or Expression with resultType string).
	SqlReaderStoredProcedureName interface{} `pulumi:"sqlReaderStoredProcedureName"`
	// Value and type setting for stored procedure parameters. Example: "{Parameter1: {value: "1", type: "int"}}". Type: object (or Expression with resultType object), itemType: StoredProcedureParameter.
	StoredProcedureParameters interface{} `pulumi:"storedProcedureParameters"`
	// Copy source type.
	// Expected value is 'SqlDWSource'.
	Type string `pulumi:"type"`
}

// A copy activity SQL Data Warehouse source.
type SqlDWSourceResponse struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns interface{} `pulumi:"additionalColumns"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// The partition mechanism that will be used for Sql read in parallel. Possible values include: "None", "PhysicalPartitionsOfTable", "DynamicRange".
	PartitionOption interface{} `pulumi:"partitionOption"`
	// The settings that will be leveraged for Sql source partitioning.
	PartitionSettings *SqlPartitionSettingsResponse `pulumi:"partitionSettings"`
	// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	QueryTimeout interface{} `pulumi:"queryTimeout"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// SQL Data Warehouse reader query. Type: string (or Expression with resultType string).
	SqlReaderQuery interface{} `pulumi:"sqlReaderQuery"`
	// Name of the stored procedure for a SQL Data Warehouse source. This cannot be used at the same time as SqlReaderQuery. Type: string (or Expression with resultType string).
	SqlReaderStoredProcedureName interface{} `pulumi:"sqlReaderStoredProcedureName"`
	// Value and type setting for stored procedure parameters. Example: "{Parameter1: {value: "1", type: "int"}}". Type: object (or Expression with resultType object), itemType: StoredProcedureParameter.
	StoredProcedureParameters interface{} `pulumi:"storedProcedureParameters"`
	// Copy source type.
	// Expected value is 'SqlDWSource'.
	Type string `pulumi:"type"`
}

// Sql DW upsert option settings
type SqlDWUpsertSettings struct {
	// Schema name for interim table. Type: string (or Expression with resultType string).
	InterimSchemaName interface{} `pulumi:"interimSchemaName"`
	// Key column names for unique row identification. Type: array of strings (or Expression with resultType array of strings).
	Keys interface{} `pulumi:"keys"`
}

// Sql DW upsert option settings
type SqlDWUpsertSettingsResponse struct {
	// Schema name for interim table. Type: string (or Expression with resultType string).
	InterimSchemaName interface{} `pulumi:"interimSchemaName"`
	// Key column names for unique row identification. Type: array of strings (or Expression with resultType array of strings).
	Keys interface{} `pulumi:"keys"`
}

// A copy activity Azure SQL Managed Instance sink.
type SqlMISink struct {
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the sink data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// SQL pre-copy script. Type: string (or Expression with resultType string).
	PreCopyScript interface{} `pulumi:"preCopyScript"`
	// Sink retry count. Type: integer (or Expression with resultType integer).
	SinkRetryCount interface{} `pulumi:"sinkRetryCount"`
	// Sink retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SinkRetryWait interface{} `pulumi:"sinkRetryWait"`
	// SQL writer stored procedure name. Type: string (or Expression with resultType string).
	SqlWriterStoredProcedureName interface{} `pulumi:"sqlWriterStoredProcedureName"`
	// SQL writer table type. Type: string (or Expression with resultType string).
	SqlWriterTableType interface{} `pulumi:"sqlWriterTableType"`
	// Whether to use table lock during bulk copy. Type: boolean (or Expression with resultType boolean).
	SqlWriterUseTableLock interface{} `pulumi:"sqlWriterUseTableLock"`
	// SQL stored procedure parameters.
	StoredProcedureParameters map[string]StoredProcedureParameter `pulumi:"storedProcedureParameters"`
	// The stored procedure parameter name of the table type. Type: string (or Expression with resultType string).
	StoredProcedureTableTypeParameterName interface{} `pulumi:"storedProcedureTableTypeParameterName"`
	// The option to handle sink table, such as autoCreate. For now only 'autoCreate' value is supported. Type: string (or Expression with resultType string).
	TableOption interface{} `pulumi:"tableOption"`
	// Copy sink type.
	// Expected value is 'SqlMISink'.
	Type string `pulumi:"type"`
	// SQL upsert settings.
	UpsertSettings *SqlUpsertSettings `pulumi:"upsertSettings"`
	// Write batch size. Type: integer (or Expression with resultType integer), minimum: 0.
	WriteBatchSize interface{} `pulumi:"writeBatchSize"`
	// Write batch timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	WriteBatchTimeout interface{} `pulumi:"writeBatchTimeout"`
	// White behavior when copying data into azure SQL MI. Type: SqlWriteBehaviorEnum (or Expression with resultType SqlWriteBehaviorEnum)
	WriteBehavior interface{} `pulumi:"writeBehavior"`
}

// A copy activity Azure SQL Managed Instance sink.
type SqlMISinkResponse struct {
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the sink data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// SQL pre-copy script. Type: string (or Expression with resultType string).
	PreCopyScript interface{} `pulumi:"preCopyScript"`
	// Sink retry count. Type: integer (or Expression with resultType integer).
	SinkRetryCount interface{} `pulumi:"sinkRetryCount"`
	// Sink retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SinkRetryWait interface{} `pulumi:"sinkRetryWait"`
	// SQL writer stored procedure name. Type: string (or Expression with resultType string).
	SqlWriterStoredProcedureName interface{} `pulumi:"sqlWriterStoredProcedureName"`
	// SQL writer table type. Type: string (or Expression with resultType string).
	SqlWriterTableType interface{} `pulumi:"sqlWriterTableType"`
	// Whether to use table lock during bulk copy. Type: boolean (or Expression with resultType boolean).
	SqlWriterUseTableLock interface{} `pulumi:"sqlWriterUseTableLock"`
	// SQL stored procedure parameters.
	StoredProcedureParameters map[string]StoredProcedureParameterResponse `pulumi:"storedProcedureParameters"`
	// The stored procedure parameter name of the table type. Type: string (or Expression with resultType string).
	StoredProcedureTableTypeParameterName interface{} `pulumi:"storedProcedureTableTypeParameterName"`
	// The option to handle sink table, such as autoCreate. For now only 'autoCreate' value is supported. Type: string (or Expression with resultType string).
	TableOption interface{} `pulumi:"tableOption"`
	// Copy sink type.
	// Expected value is 'SqlMISink'.
	Type string `pulumi:"type"`
	// SQL upsert settings.
	UpsertSettings *SqlUpsertSettingsResponse `pulumi:"upsertSettings"`
	// Write batch size. Type: integer (or Expression with resultType integer), minimum: 0.
	WriteBatchSize interface{} `pulumi:"writeBatchSize"`
	// Write batch timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	WriteBatchTimeout interface{} `pulumi:"writeBatchTimeout"`
	// White behavior when copying data into azure SQL MI. Type: SqlWriteBehaviorEnum (or Expression with resultType SqlWriteBehaviorEnum)
	WriteBehavior interface{} `pulumi:"writeBehavior"`
}

// A copy activity Azure SQL Managed Instance source.
type SqlMISource struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns interface{} `pulumi:"additionalColumns"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// The partition mechanism that will be used for Sql read in parallel. Possible values include: "None", "PhysicalPartitionsOfTable", "DynamicRange".
	PartitionOption interface{} `pulumi:"partitionOption"`
	// The settings that will be leveraged for Sql source partitioning.
	PartitionSettings *SqlPartitionSettings `pulumi:"partitionSettings"`
	// Which additional types to produce.
	ProduceAdditionalTypes interface{} `pulumi:"produceAdditionalTypes"`
	// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	QueryTimeout interface{} `pulumi:"queryTimeout"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// SQL reader query. Type: string (or Expression with resultType string).
	SqlReaderQuery interface{} `pulumi:"sqlReaderQuery"`
	// Name of the stored procedure for a Azure SQL Managed Instance source. This cannot be used at the same time as SqlReaderQuery. Type: string (or Expression with resultType string).
	SqlReaderStoredProcedureName interface{} `pulumi:"sqlReaderStoredProcedureName"`
	// Value and type setting for stored procedure parameters. Example: "{Parameter1: {value: "1", type: "int"}}".
	StoredProcedureParameters map[string]StoredProcedureParameter `pulumi:"storedProcedureParameters"`
	// Copy source type.
	// Expected value is 'SqlMISource'.
	Type string `pulumi:"type"`
}

// A copy activity Azure SQL Managed Instance source.
type SqlMISourceResponse struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns interface{} `pulumi:"additionalColumns"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// The partition mechanism that will be used for Sql read in parallel. Possible values include: "None", "PhysicalPartitionsOfTable", "DynamicRange".
	PartitionOption interface{} `pulumi:"partitionOption"`
	// The settings that will be leveraged for Sql source partitioning.
	PartitionSettings *SqlPartitionSettingsResponse `pulumi:"partitionSettings"`
	// Which additional types to produce.
	ProduceAdditionalTypes interface{} `pulumi:"produceAdditionalTypes"`
	// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	QueryTimeout interface{} `pulumi:"queryTimeout"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// SQL reader query. Type: string (or Expression with resultType string).
	SqlReaderQuery interface{} `pulumi:"sqlReaderQuery"`
	// Name of the stored procedure for a Azure SQL Managed Instance source. This cannot be used at the same time as SqlReaderQuery. Type: string (or Expression with resultType string).
	SqlReaderStoredProcedureName interface{} `pulumi:"sqlReaderStoredProcedureName"`
	// Value and type setting for stored procedure parameters. Example: "{Parameter1: {value: "1", type: "int"}}".
	StoredProcedureParameters map[string]StoredProcedureParameterResponse `pulumi:"storedProcedureParameters"`
	// Copy source type.
	// Expected value is 'SqlMISource'.
	Type string `pulumi:"type"`
}

// The settings that will be leveraged for Sql source partitioning.
type SqlPartitionSettings struct {
	// The name of the column in integer or datetime type that will be used for proceeding partitioning. If not specified, the primary key of the table is auto-detected and used as the partition column. Type: string (or Expression with resultType string).
	PartitionColumnName interface{} `pulumi:"partitionColumnName"`
	// The minimum value of the partition column for partition range splitting. This value is used to decide the partition stride, not for filtering the rows in table. All rows in the table or query result will be partitioned and copied. Type: string (or Expression with resultType string).
	PartitionLowerBound interface{} `pulumi:"partitionLowerBound"`
	// The maximum value of the partition column for partition range splitting. This value is used to decide the partition stride, not for filtering the rows in table. All rows in the table or query result will be partitioned and copied. Type: string (or Expression with resultType string).
	PartitionUpperBound interface{} `pulumi:"partitionUpperBound"`
}

// The settings that will be leveraged for Sql source partitioning.
type SqlPartitionSettingsResponse struct {
	// The name of the column in integer or datetime type that will be used for proceeding partitioning. If not specified, the primary key of the table is auto-detected and used as the partition column. Type: string (or Expression with resultType string).
	PartitionColumnName interface{} `pulumi:"partitionColumnName"`
	// The minimum value of the partition column for partition range splitting. This value is used to decide the partition stride, not for filtering the rows in table. All rows in the table or query result will be partitioned and copied. Type: string (or Expression with resultType string).
	PartitionLowerBound interface{} `pulumi:"partitionLowerBound"`
	// The maximum value of the partition column for partition range splitting. This value is used to decide the partition stride, not for filtering the rows in table. All rows in the table or query result will be partitioned and copied. Type: string (or Expression with resultType string).
	PartitionUpperBound interface{} `pulumi:"partitionUpperBound"`
}

// SQL Server linked service.
type SqlServerLinkedService struct {
	// Sql always encrypted properties.
	AlwaysEncryptedSettings *SqlAlwaysEncryptedProperties `pulumi:"alwaysEncryptedSettings"`
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference `pulumi:"connectVia"`
	// The connection string. Type: string, SecureString or AzureKeyVaultSecretReference.
	ConnectionString interface{} `pulumi:"connectionString"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential interface{} `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// The on-premises Windows authentication password.
	Password interface{} `pulumi:"password"`
	// Type of linked service.
	// Expected value is 'SqlServer'.
	Type string `pulumi:"type"`
	// The on-premises Windows authentication user name. Type: string (or Expression with resultType string).
	UserName interface{} `pulumi:"userName"`
}

// SQL Server linked service.
type SqlServerLinkedServiceResponse struct {
	// Sql always encrypted properties.
	AlwaysEncryptedSettings *SqlAlwaysEncryptedPropertiesResponse `pulumi:"alwaysEncryptedSettings"`
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReferenceResponse `pulumi:"connectVia"`
	// The connection string. Type: string, SecureString or AzureKeyVaultSecretReference.
	ConnectionString interface{} `pulumi:"connectionString"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential interface{} `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// The on-premises Windows authentication password.
	Password interface{} `pulumi:"password"`
	// Type of linked service.
	// Expected value is 'SqlServer'.
	Type string `pulumi:"type"`
	// The on-premises Windows authentication user name. Type: string (or Expression with resultType string).
	UserName interface{} `pulumi:"userName"`
}

// A copy activity SQL server sink.
type SqlServerSink struct {
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the sink data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// SQL pre-copy script. Type: string (or Expression with resultType string).
	PreCopyScript interface{} `pulumi:"preCopyScript"`
	// Sink retry count. Type: integer (or Expression with resultType integer).
	SinkRetryCount interface{} `pulumi:"sinkRetryCount"`
	// Sink retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SinkRetryWait interface{} `pulumi:"sinkRetryWait"`
	// SQL writer stored procedure name. Type: string (or Expression with resultType string).
	SqlWriterStoredProcedureName interface{} `pulumi:"sqlWriterStoredProcedureName"`
	// SQL writer table type. Type: string (or Expression with resultType string).
	SqlWriterTableType interface{} `pulumi:"sqlWriterTableType"`
	// Whether to use table lock during bulk copy. Type: boolean (or Expression with resultType boolean).
	SqlWriterUseTableLock interface{} `pulumi:"sqlWriterUseTableLock"`
	// SQL stored procedure parameters.
	StoredProcedureParameters map[string]StoredProcedureParameter `pulumi:"storedProcedureParameters"`
	// The stored procedure parameter name of the table type. Type: string (or Expression with resultType string).
	StoredProcedureTableTypeParameterName interface{} `pulumi:"storedProcedureTableTypeParameterName"`
	// The option to handle sink table, such as autoCreate. For now only 'autoCreate' value is supported. Type: string (or Expression with resultType string).
	TableOption interface{} `pulumi:"tableOption"`
	// Copy sink type.
	// Expected value is 'SqlServerSink'.
	Type string `pulumi:"type"`
	// SQL upsert settings.
	UpsertSettings *SqlUpsertSettings `pulumi:"upsertSettings"`
	// Write batch size. Type: integer (or Expression with resultType integer), minimum: 0.
	WriteBatchSize interface{} `pulumi:"writeBatchSize"`
	// Write batch timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	WriteBatchTimeout interface{} `pulumi:"writeBatchTimeout"`
	// Write behavior when copying data into sql server. Type: SqlWriteBehaviorEnum (or Expression with resultType SqlWriteBehaviorEnum)
	WriteBehavior interface{} `pulumi:"writeBehavior"`
}

// A copy activity SQL server sink.
type SqlServerSinkResponse struct {
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the sink data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// SQL pre-copy script. Type: string (or Expression with resultType string).
	PreCopyScript interface{} `pulumi:"preCopyScript"`
	// Sink retry count. Type: integer (or Expression with resultType integer).
	SinkRetryCount interface{} `pulumi:"sinkRetryCount"`
	// Sink retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SinkRetryWait interface{} `pulumi:"sinkRetryWait"`
	// SQL writer stored procedure name. Type: string (or Expression with resultType string).
	SqlWriterStoredProcedureName interface{} `pulumi:"sqlWriterStoredProcedureName"`
	// SQL writer table type. Type: string (or Expression with resultType string).
	SqlWriterTableType interface{} `pulumi:"sqlWriterTableType"`
	// Whether to use table lock during bulk copy. Type: boolean (or Expression with resultType boolean).
	SqlWriterUseTableLock interface{} `pulumi:"sqlWriterUseTableLock"`
	// SQL stored procedure parameters.
	StoredProcedureParameters map[string]StoredProcedureParameterResponse `pulumi:"storedProcedureParameters"`
	// The stored procedure parameter name of the table type. Type: string (or Expression with resultType string).
	StoredProcedureTableTypeParameterName interface{} `pulumi:"storedProcedureTableTypeParameterName"`
	// The option to handle sink table, such as autoCreate. For now only 'autoCreate' value is supported. Type: string (or Expression with resultType string).
	TableOption interface{} `pulumi:"tableOption"`
	// Copy sink type.
	// Expected value is 'SqlServerSink'.
	Type string `pulumi:"type"`
	// SQL upsert settings.
	UpsertSettings *SqlUpsertSettingsResponse `pulumi:"upsertSettings"`
	// Write batch size. Type: integer (or Expression with resultType integer), minimum: 0.
	WriteBatchSize interface{} `pulumi:"writeBatchSize"`
	// Write batch timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	WriteBatchTimeout interface{} `pulumi:"writeBatchTimeout"`
	// Write behavior when copying data into sql server. Type: SqlWriteBehaviorEnum (or Expression with resultType SqlWriteBehaviorEnum)
	WriteBehavior interface{} `pulumi:"writeBehavior"`
}

// A copy activity SQL server source.
type SqlServerSource struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns interface{} `pulumi:"additionalColumns"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// The partition mechanism that will be used for Sql read in parallel. Possible values include: "None", "PhysicalPartitionsOfTable", "DynamicRange".
	PartitionOption interface{} `pulumi:"partitionOption"`
	// The settings that will be leveraged for Sql source partitioning.
	PartitionSettings *SqlPartitionSettings `pulumi:"partitionSettings"`
	// Which additional types to produce.
	ProduceAdditionalTypes interface{} `pulumi:"produceAdditionalTypes"`
	// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	QueryTimeout interface{} `pulumi:"queryTimeout"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// SQL reader query. Type: string (or Expression with resultType string).
	SqlReaderQuery interface{} `pulumi:"sqlReaderQuery"`
	// Name of the stored procedure for a SQL Database source. This cannot be used at the same time as SqlReaderQuery. Type: string (or Expression with resultType string).
	SqlReaderStoredProcedureName interface{} `pulumi:"sqlReaderStoredProcedureName"`
	// Value and type setting for stored procedure parameters. Example: "{Parameter1: {value: "1", type: "int"}}".
	StoredProcedureParameters map[string]StoredProcedureParameter `pulumi:"storedProcedureParameters"`
	// Copy source type.
	// Expected value is 'SqlServerSource'.
	Type string `pulumi:"type"`
}

// A copy activity SQL server source.
type SqlServerSourceResponse struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns interface{} `pulumi:"additionalColumns"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// The partition mechanism that will be used for Sql read in parallel. Possible values include: "None", "PhysicalPartitionsOfTable", "DynamicRange".
	PartitionOption interface{} `pulumi:"partitionOption"`
	// The settings that will be leveraged for Sql source partitioning.
	PartitionSettings *SqlPartitionSettingsResponse `pulumi:"partitionSettings"`
	// Which additional types to produce.
	ProduceAdditionalTypes interface{} `pulumi:"produceAdditionalTypes"`
	// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	QueryTimeout interface{} `pulumi:"queryTimeout"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// SQL reader query. Type: string (or Expression with resultType string).
	SqlReaderQuery interface{} `pulumi:"sqlReaderQuery"`
	// Name of the stored procedure for a SQL Database source. This cannot be used at the same time as SqlReaderQuery. Type: string (or Expression with resultType string).
	SqlReaderStoredProcedureName interface{} `pulumi:"sqlReaderStoredProcedureName"`
	// Value and type setting for stored procedure parameters. Example: "{Parameter1: {value: "1", type: "int"}}".
	StoredProcedureParameters map[string]StoredProcedureParameterResponse `pulumi:"storedProcedureParameters"`
	// Copy source type.
	// Expected value is 'SqlServerSource'.
	Type string `pulumi:"type"`
}

// SQL stored procedure activity type.
type SqlServerStoredProcedureActivity struct {
	// Activity depends on condition.
	DependsOn []ActivityDependency `pulumi:"dependsOn"`
	// Activity description.
	Description *string `pulumi:"description"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReference `pulumi:"linkedServiceName"`
	// Activity name.
	Name string `pulumi:"name"`
	// Activity policy.
	Policy *ActivityPolicy `pulumi:"policy"`
	// Stored procedure name. Type: string (or Expression with resultType string).
	StoredProcedureName interface{} `pulumi:"storedProcedureName"`
	// Value and type setting for stored procedure parameters. Example: "{Parameter1: {value: "1", type: "int"}}".
	StoredProcedureParameters interface{} `pulumi:"storedProcedureParameters"`
	// Type of activity.
	// Expected value is 'SqlServerStoredProcedure'.
	Type string `pulumi:"type"`
	// Activity user properties.
	UserProperties []UserProperty `pulumi:"userProperties"`
}

// SQL stored procedure activity type.
type SqlServerStoredProcedureActivityResponse struct {
	// Activity depends on condition.
	DependsOn []ActivityDependencyResponse `pulumi:"dependsOn"`
	// Activity description.
	Description *string `pulumi:"description"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceResponse `pulumi:"linkedServiceName"`
	// Activity name.
	Name string `pulumi:"name"`
	// Activity policy.
	Policy *ActivityPolicyResponse `pulumi:"policy"`
	// Stored procedure name. Type: string (or Expression with resultType string).
	StoredProcedureName interface{} `pulumi:"storedProcedureName"`
	// Value and type setting for stored procedure parameters. Example: "{Parameter1: {value: "1", type: "int"}}".
	StoredProcedureParameters interface{} `pulumi:"storedProcedureParameters"`
	// Type of activity.
	// Expected value is 'SqlServerStoredProcedure'.
	Type string `pulumi:"type"`
	// Activity user properties.
	UserProperties []UserPropertyResponse `pulumi:"userProperties"`
}

// The on-premises SQL Server dataset.
type SqlServerTableDataset struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReference `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// The table name of the SQL Server dataset. Type: string (or Expression with resultType string).
	Table interface{} `pulumi:"table"`
	// This property will be retired. Please consider using schema + table properties instead.
	TableName interface{} `pulumi:"tableName"`
	// Type of dataset.
	// Expected value is 'SqlServerTable'.
	Type string `pulumi:"type"`
}

// The on-premises SQL Server dataset.
type SqlServerTableDatasetResponse struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetResponseFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceResponse `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// The table name of the SQL Server dataset. Type: string (or Expression with resultType string).
	Table interface{} `pulumi:"table"`
	// This property will be retired. Please consider using schema + table properties instead.
	TableName interface{} `pulumi:"tableName"`
	// Type of dataset.
	// Expected value is 'SqlServerTable'.
	Type string `pulumi:"type"`
}

// A copy activity SQL sink.
type SqlSink struct {
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the sink data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// SQL pre-copy script. Type: string (or Expression with resultType string).
	PreCopyScript interface{} `pulumi:"preCopyScript"`
	// Sink retry count. Type: integer (or Expression with resultType integer).
	SinkRetryCount interface{} `pulumi:"sinkRetryCount"`
	// Sink retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SinkRetryWait interface{} `pulumi:"sinkRetryWait"`
	// SQL writer stored procedure name. Type: string (or Expression with resultType string).
	SqlWriterStoredProcedureName interface{} `pulumi:"sqlWriterStoredProcedureName"`
	// SQL writer table type. Type: string (or Expression with resultType string).
	SqlWriterTableType interface{} `pulumi:"sqlWriterTableType"`
	// Whether to use table lock during bulk copy. Type: boolean (or Expression with resultType boolean).
	SqlWriterUseTableLock interface{} `pulumi:"sqlWriterUseTableLock"`
	// SQL stored procedure parameters.
	StoredProcedureParameters map[string]StoredProcedureParameter `pulumi:"storedProcedureParameters"`
	// The stored procedure parameter name of the table type. Type: string (or Expression with resultType string).
	StoredProcedureTableTypeParameterName interface{} `pulumi:"storedProcedureTableTypeParameterName"`
	// The option to handle sink table, such as autoCreate. For now only 'autoCreate' value is supported. Type: string (or Expression with resultType string).
	TableOption interface{} `pulumi:"tableOption"`
	// Copy sink type.
	// Expected value is 'SqlSink'.
	Type string `pulumi:"type"`
	// SQL upsert settings.
	UpsertSettings *SqlUpsertSettings `pulumi:"upsertSettings"`
	// Write batch size. Type: integer (or Expression with resultType integer), minimum: 0.
	WriteBatchSize interface{} `pulumi:"writeBatchSize"`
	// Write batch timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	WriteBatchTimeout interface{} `pulumi:"writeBatchTimeout"`
	// Write behavior when copying data into sql. Type: SqlWriteBehaviorEnum (or Expression with resultType SqlWriteBehaviorEnum)
	WriteBehavior interface{} `pulumi:"writeBehavior"`
}

// A copy activity SQL sink.
type SqlSinkResponse struct {
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the sink data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// SQL pre-copy script. Type: string (or Expression with resultType string).
	PreCopyScript interface{} `pulumi:"preCopyScript"`
	// Sink retry count. Type: integer (or Expression with resultType integer).
	SinkRetryCount interface{} `pulumi:"sinkRetryCount"`
	// Sink retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SinkRetryWait interface{} `pulumi:"sinkRetryWait"`
	// SQL writer stored procedure name. Type: string (or Expression with resultType string).
	SqlWriterStoredProcedureName interface{} `pulumi:"sqlWriterStoredProcedureName"`
	// SQL writer table type. Type: string (or Expression with resultType string).
	SqlWriterTableType interface{} `pulumi:"sqlWriterTableType"`
	// Whether to use table lock during bulk copy. Type: boolean (or Expression with resultType boolean).
	SqlWriterUseTableLock interface{} `pulumi:"sqlWriterUseTableLock"`
	// SQL stored procedure parameters.
	StoredProcedureParameters map[string]StoredProcedureParameterResponse `pulumi:"storedProcedureParameters"`
	// The stored procedure parameter name of the table type. Type: string (or Expression with resultType string).
	StoredProcedureTableTypeParameterName interface{} `pulumi:"storedProcedureTableTypeParameterName"`
	// The option to handle sink table, such as autoCreate. For now only 'autoCreate' value is supported. Type: string (or Expression with resultType string).
	TableOption interface{} `pulumi:"tableOption"`
	// Copy sink type.
	// Expected value is 'SqlSink'.
	Type string `pulumi:"type"`
	// SQL upsert settings.
	UpsertSettings *SqlUpsertSettingsResponse `pulumi:"upsertSettings"`
	// Write batch size. Type: integer (or Expression with resultType integer), minimum: 0.
	WriteBatchSize interface{} `pulumi:"writeBatchSize"`
	// Write batch timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	WriteBatchTimeout interface{} `pulumi:"writeBatchTimeout"`
	// Write behavior when copying data into sql. Type: SqlWriteBehaviorEnum (or Expression with resultType SqlWriteBehaviorEnum)
	WriteBehavior interface{} `pulumi:"writeBehavior"`
}

// A copy activity SQL source.
type SqlSource struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns interface{} `pulumi:"additionalColumns"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// Specifies the transaction locking behavior for the SQL source. Allowed values: ReadCommitted/ReadUncommitted/RepeatableRead/Serializable/Snapshot. The default value is ReadCommitted. Type: string (or Expression with resultType string).
	IsolationLevel interface{} `pulumi:"isolationLevel"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// The partition mechanism that will be used for Sql read in parallel. Possible values include: "None", "PhysicalPartitionsOfTable", "DynamicRange".
	PartitionOption interface{} `pulumi:"partitionOption"`
	// The settings that will be leveraged for Sql source partitioning.
	PartitionSettings *SqlPartitionSettings `pulumi:"partitionSettings"`
	// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	QueryTimeout interface{} `pulumi:"queryTimeout"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// SQL reader query. Type: string (or Expression with resultType string).
	SqlReaderQuery interface{} `pulumi:"sqlReaderQuery"`
	// Name of the stored procedure for a SQL Database source. This cannot be used at the same time as SqlReaderQuery. Type: string (or Expression with resultType string).
	SqlReaderStoredProcedureName interface{} `pulumi:"sqlReaderStoredProcedureName"`
	// Value and type setting for stored procedure parameters. Example: "{Parameter1: {value: "1", type: "int"}}".
	StoredProcedureParameters map[string]StoredProcedureParameter `pulumi:"storedProcedureParameters"`
	// Copy source type.
	// Expected value is 'SqlSource'.
	Type string `pulumi:"type"`
}

// A copy activity SQL source.
type SqlSourceResponse struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns interface{} `pulumi:"additionalColumns"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// Specifies the transaction locking behavior for the SQL source. Allowed values: ReadCommitted/ReadUncommitted/RepeatableRead/Serializable/Snapshot. The default value is ReadCommitted. Type: string (or Expression with resultType string).
	IsolationLevel interface{} `pulumi:"isolationLevel"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// The partition mechanism that will be used for Sql read in parallel. Possible values include: "None", "PhysicalPartitionsOfTable", "DynamicRange".
	PartitionOption interface{} `pulumi:"partitionOption"`
	// The settings that will be leveraged for Sql source partitioning.
	PartitionSettings *SqlPartitionSettingsResponse `pulumi:"partitionSettings"`
	// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	QueryTimeout interface{} `pulumi:"queryTimeout"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// SQL reader query. Type: string (or Expression with resultType string).
	SqlReaderQuery interface{} `pulumi:"sqlReaderQuery"`
	// Name of the stored procedure for a SQL Database source. This cannot be used at the same time as SqlReaderQuery. Type: string (or Expression with resultType string).
	SqlReaderStoredProcedureName interface{} `pulumi:"sqlReaderStoredProcedureName"`
	// Value and type setting for stored procedure parameters. Example: "{Parameter1: {value: "1", type: "int"}}".
	StoredProcedureParameters map[string]StoredProcedureParameterResponse `pulumi:"storedProcedureParameters"`
	// Copy source type.
	// Expected value is 'SqlSource'.
	Type string `pulumi:"type"`
}

// Sql upsert option settings
type SqlUpsertSettings struct {
	// Schema name for interim table. Type: string (or Expression with resultType string).
	InterimSchemaName interface{} `pulumi:"interimSchemaName"`
	// Key column names for unique row identification. Type: array of strings (or Expression with resultType array of strings).
	Keys interface{} `pulumi:"keys"`
	// Specifies whether to use temp db for upsert interim table. Type: boolean (or Expression with resultType boolean).
	UseTempDB interface{} `pulumi:"useTempDB"`
}

// Sql upsert option settings
type SqlUpsertSettingsResponse struct {
	// Schema name for interim table. Type: string (or Expression with resultType string).
	InterimSchemaName interface{} `pulumi:"interimSchemaName"`
	// Key column names for unique row identification. Type: array of strings (or Expression with resultType array of strings).
	Keys interface{} `pulumi:"keys"`
	// Specifies whether to use temp db for upsert interim table. Type: boolean (or Expression with resultType boolean).
	UseTempDB interface{} `pulumi:"useTempDB"`
}

// Square Service linked service.
type SquareLinkedService struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The client ID associated with your Square application.
	ClientId interface{} `pulumi:"clientId"`
	// The client secret associated with your Square application.
	ClientSecret interface{} `pulumi:"clientSecret"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference `pulumi:"connectVia"`
	// Properties used to connect to Square. It is mutually exclusive with any other properties in the linked service. Type: object.
	ConnectionProperties interface{} `pulumi:"connectionProperties"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential interface{} `pulumi:"encryptedCredential"`
	// The URL of the Square instance. (i.e. mystore.mysquare.com)
	Host interface{} `pulumi:"host"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// The redirect URL assigned in the Square application dashboard. (i.e. http://localhost:2500)
	RedirectUri interface{} `pulumi:"redirectUri"`
	// Type of linked service.
	// Expected value is 'Square'.
	Type string `pulumi:"type"`
	// Specifies whether the data source endpoints are encrypted using HTTPS. The default value is true.
	UseEncryptedEndpoints interface{} `pulumi:"useEncryptedEndpoints"`
	// Specifies whether to require the host name in the server's certificate to match the host name of the server when connecting over SSL. The default value is true.
	UseHostVerification interface{} `pulumi:"useHostVerification"`
	// Specifies whether to verify the identity of the server when connecting over SSL. The default value is true.
	UsePeerVerification interface{} `pulumi:"usePeerVerification"`
}

// Square Service linked service.
type SquareLinkedServiceResponse struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The client ID associated with your Square application.
	ClientId interface{} `pulumi:"clientId"`
	// The client secret associated with your Square application.
	ClientSecret interface{} `pulumi:"clientSecret"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReferenceResponse `pulumi:"connectVia"`
	// Properties used to connect to Square. It is mutually exclusive with any other properties in the linked service. Type: object.
	ConnectionProperties interface{} `pulumi:"connectionProperties"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential interface{} `pulumi:"encryptedCredential"`
	// The URL of the Square instance. (i.e. mystore.mysquare.com)
	Host interface{} `pulumi:"host"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// The redirect URL assigned in the Square application dashboard. (i.e. http://localhost:2500)
	RedirectUri interface{} `pulumi:"redirectUri"`
	// Type of linked service.
	// Expected value is 'Square'.
	Type string `pulumi:"type"`
	// Specifies whether the data source endpoints are encrypted using HTTPS. The default value is true.
	UseEncryptedEndpoints interface{} `pulumi:"useEncryptedEndpoints"`
	// Specifies whether to require the host name in the server's certificate to match the host name of the server when connecting over SSL. The default value is true.
	UseHostVerification interface{} `pulumi:"useHostVerification"`
	// Specifies whether to verify the identity of the server when connecting over SSL. The default value is true.
	UsePeerVerification interface{} `pulumi:"usePeerVerification"`
}

// Square Service dataset.
type SquareObjectDataset struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReference `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// The table name. Type: string (or Expression with resultType string).
	TableName interface{} `pulumi:"tableName"`
	// Type of dataset.
	// Expected value is 'SquareObject'.
	Type string `pulumi:"type"`
}

// Square Service dataset.
type SquareObjectDatasetResponse struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetResponseFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceResponse `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// The table name. Type: string (or Expression with resultType string).
	TableName interface{} `pulumi:"tableName"`
	// Type of dataset.
	// Expected value is 'SquareObject'.
	Type string `pulumi:"type"`
}

// A copy activity Square Service source.
type SquareSource struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns interface{} `pulumi:"additionalColumns"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// A query to retrieve data from source. Type: string (or Expression with resultType string).
	Query interface{} `pulumi:"query"`
	// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	QueryTimeout interface{} `pulumi:"queryTimeout"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// Copy source type.
	// Expected value is 'SquareSource'.
	Type string `pulumi:"type"`
}

// A copy activity Square Service source.
type SquareSourceResponse struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns interface{} `pulumi:"additionalColumns"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// A query to retrieve data from source. Type: string (or Expression with resultType string).
	Query interface{} `pulumi:"query"`
	// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	QueryTimeout interface{} `pulumi:"queryTimeout"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// Copy source type.
	// Expected value is 'SquareSource'.
	Type string `pulumi:"type"`
}

// Ssis environment reference.
type SsisEnvironmentReferenceResponse struct {
	// Environment folder name.
	EnvironmentFolderName *string `pulumi:"environmentFolderName"`
	// Environment name.
	EnvironmentName *string `pulumi:"environmentName"`
	// Environment reference id.
	Id *float64 `pulumi:"id"`
	// Reference type
	ReferenceType *string `pulumi:"referenceType"`
}

// Ssis environment.
type SsisEnvironmentResponse struct {
	// Metadata description.
	Description *string `pulumi:"description"`
	// Folder id which contains environment.
	FolderId *float64 `pulumi:"folderId"`
	// Metadata id.
	Id *float64 `pulumi:"id"`
	// Metadata name.
	Name *string `pulumi:"name"`
	// The type of SSIS object metadata.
	// Expected value is 'Environment'.
	Type string `pulumi:"type"`
	// Variable in environment
	Variables []SsisVariableResponse `pulumi:"variables"`
}

// Ssis folder.
type SsisFolderResponse struct {
	// Metadata description.
	Description *string `pulumi:"description"`
	// Metadata id.
	Id *float64 `pulumi:"id"`
	// Metadata name.
	Name *string `pulumi:"name"`
	// The type of SSIS object metadata.
	// Expected value is 'Folder'.
	Type string `pulumi:"type"`
}

// Ssis Package.
type SsisPackageResponse struct {
	// Metadata description.
	Description *string `pulumi:"description"`
	// Folder id which contains package.
	FolderId *float64 `pulumi:"folderId"`
	// Metadata id.
	Id *float64 `pulumi:"id"`
	// Metadata name.
	Name *string `pulumi:"name"`
	// Parameters in package
	Parameters []SsisParameterResponse `pulumi:"parameters"`
	// Project id which contains package.
	ProjectId *float64 `pulumi:"projectId"`
	// Project version which contains package.
	ProjectVersion *float64 `pulumi:"projectVersion"`
	// The type of SSIS object metadata.
	// Expected value is 'Package'.
	Type string `pulumi:"type"`
}

// Ssis parameter.
type SsisParameterResponse struct {
	// Parameter type.
	DataType *string `pulumi:"dataType"`
	// Default value of parameter.
	DefaultValue *string `pulumi:"defaultValue"`
	// Parameter description.
	Description *string `pulumi:"description"`
	// Design default value of parameter.
	DesignDefaultValue *string `pulumi:"designDefaultValue"`
	// Parameter id.
	Id *float64 `pulumi:"id"`
	// Parameter name.
	Name *string `pulumi:"name"`
	// Whether parameter is required.
	Required *bool `pulumi:"required"`
	// Whether parameter is sensitive.
	Sensitive *bool `pulumi:"sensitive"`
	// Default sensitive value of parameter.
	SensitiveDefaultValue *string `pulumi:"sensitiveDefaultValue"`
	// Parameter value set.
	ValueSet *bool `pulumi:"valueSet"`
	// Parameter value type.
	ValueType *string `pulumi:"valueType"`
	// Parameter reference variable.
	Variable *string `pulumi:"variable"`
}

// Ssis project.
type SsisProjectResponse struct {
	// Metadata description.
	Description *string `pulumi:"description"`
	// Environment reference in project
	EnvironmentRefs []SsisEnvironmentReferenceResponse `pulumi:"environmentRefs"`
	// Folder id which contains project.
	FolderId *float64 `pulumi:"folderId"`
	// Metadata id.
	Id *float64 `pulumi:"id"`
	// Metadata name.
	Name *string `pulumi:"name"`
	// Parameters in project
	Parameters []SsisParameterResponse `pulumi:"parameters"`
	// The type of SSIS object metadata.
	// Expected value is 'Project'.
	Type string `pulumi:"type"`
	// Project version.
	Version *float64 `pulumi:"version"`
}

// Ssis variable.
type SsisVariableResponse struct {
	// Variable type.
	DataType *string `pulumi:"dataType"`
	// Variable description.
	Description *string `pulumi:"description"`
	// Variable id.
	Id *float64 `pulumi:"id"`
	// Variable name.
	Name *string `pulumi:"name"`
	// Whether variable is sensitive.
	Sensitive *bool `pulumi:"sensitive"`
	// Variable sensitive value.
	SensitiveValue *string `pulumi:"sensitiveValue"`
	// Variable value.
	Value *string `pulumi:"value"`
}

// Staging settings.
type StagingSettings struct {
	// Specifies whether to use compression when copying data via an interim staging. Default value is false. Type: boolean (or Expression with resultType boolean).
	EnableCompression interface{} `pulumi:"enableCompression"`
	// Staging linked service reference.
	LinkedServiceName LinkedServiceReference `pulumi:"linkedServiceName"`
	// The path to storage for storing the interim data. Type: string (or Expression with resultType string).
	Path interface{} `pulumi:"path"`
}

// Staging settings.
type StagingSettingsResponse struct {
	// Specifies whether to use compression when copying data via an interim staging. Default value is false. Type: boolean (or Expression with resultType boolean).
	EnableCompression interface{} `pulumi:"enableCompression"`
	// Staging linked service reference.
	LinkedServiceName LinkedServiceReferenceResponse `pulumi:"linkedServiceName"`
	// The path to storage for storing the interim data. Type: string (or Expression with resultType string).
	Path interface{} `pulumi:"path"`
}

// SQL stored procedure parameter.
type StoredProcedureParameter struct {
	// Stored procedure parameter type.
	Type *string `pulumi:"type"`
	// Stored procedure parameter value. Type: string (or Expression with resultType string).
	Value interface{} `pulumi:"value"`
}

// SQL stored procedure parameter.
type StoredProcedureParameterResponse struct {
	// Stored procedure parameter type.
	Type *string `pulumi:"type"`
	// Stored procedure parameter value. Type: string (or Expression with resultType string).
	Value interface{} `pulumi:"value"`
}

// This activity evaluates an expression and executes activities under the cases property that correspond to the expression evaluation expected in the equals property.
type SwitchActivity struct {
	// List of cases that correspond to expected values of the 'on' property. This is an optional property and if not provided, the activity will execute activities provided in defaultActivities.
	Cases []SwitchCase `pulumi:"cases"`
	// List of activities to execute if no case condition is satisfied. This is an optional property and if not provided, the activity will exit without any action.
	DefaultActivities []interface{} `pulumi:"defaultActivities"`
	// Activity depends on condition.
	DependsOn []ActivityDependency `pulumi:"dependsOn"`
	// Activity description.
	Description *string `pulumi:"description"`
	// Activity name.
	Name string `pulumi:"name"`
	// An expression that would evaluate to a string or integer. This is used to determine the block of activities in cases that will be executed.
	On Expression `pulumi:"on"`
	// Type of activity.
	// Expected value is 'Switch'.
	Type string `pulumi:"type"`
	// Activity user properties.
	UserProperties []UserProperty `pulumi:"userProperties"`
}

// This activity evaluates an expression and executes activities under the cases property that correspond to the expression evaluation expected in the equals property.
type SwitchActivityResponse struct {
	// List of cases that correspond to expected values of the 'on' property. This is an optional property and if not provided, the activity will execute activities provided in defaultActivities.
	Cases []SwitchCaseResponse `pulumi:"cases"`
	// List of activities to execute if no case condition is satisfied. This is an optional property and if not provided, the activity will exit without any action.
	DefaultActivities []interface{} `pulumi:"defaultActivities"`
	// Activity depends on condition.
	DependsOn []ActivityDependencyResponse `pulumi:"dependsOn"`
	// Activity description.
	Description *string `pulumi:"description"`
	// Activity name.
	Name string `pulumi:"name"`
	// An expression that would evaluate to a string or integer. This is used to determine the block of activities in cases that will be executed.
	On ExpressionResponse `pulumi:"on"`
	// Type of activity.
	// Expected value is 'Switch'.
	Type string `pulumi:"type"`
	// Activity user properties.
	UserProperties []UserPropertyResponse `pulumi:"userProperties"`
}

// Switch cases with have a value and corresponding activities.
type SwitchCase struct {
	// List of activities to execute for satisfied case condition.
	Activities []interface{} `pulumi:"activities"`
	// Expected value that satisfies the expression result of the 'on' property.
	Value *string `pulumi:"value"`
}

// Switch cases with have a value and corresponding activities.
type SwitchCaseResponse struct {
	// List of activities to execute for satisfied case condition.
	Activities []interface{} `pulumi:"activities"`
	// Expected value that satisfies the expression result of the 'on' property.
	Value *string `pulumi:"value"`
}

// Linked service for Sybase data source.
type SybaseLinkedService struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// AuthenticationType to be used for connection.
	AuthenticationType *string `pulumi:"authenticationType"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference `pulumi:"connectVia"`
	// Database name for connection. Type: string (or Expression with resultType string).
	Database interface{} `pulumi:"database"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential interface{} `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Password for authentication.
	Password interface{} `pulumi:"password"`
	// Schema name for connection. Type: string (or Expression with resultType string).
	Schema interface{} `pulumi:"schema"`
	// Server name for connection. Type: string (or Expression with resultType string).
	Server interface{} `pulumi:"server"`
	// Type of linked service.
	// Expected value is 'Sybase'.
	Type string `pulumi:"type"`
	// Username for authentication. Type: string (or Expression with resultType string).
	Username interface{} `pulumi:"username"`
}

// Linked service for Sybase data source.
type SybaseLinkedServiceResponse struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// AuthenticationType to be used for connection.
	AuthenticationType *string `pulumi:"authenticationType"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReferenceResponse `pulumi:"connectVia"`
	// Database name for connection. Type: string (or Expression with resultType string).
	Database interface{} `pulumi:"database"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential interface{} `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Password for authentication.
	Password interface{} `pulumi:"password"`
	// Schema name for connection. Type: string (or Expression with resultType string).
	Schema interface{} `pulumi:"schema"`
	// Server name for connection. Type: string (or Expression with resultType string).
	Server interface{} `pulumi:"server"`
	// Type of linked service.
	// Expected value is 'Sybase'.
	Type string `pulumi:"type"`
	// Username for authentication. Type: string (or Expression with resultType string).
	Username interface{} `pulumi:"username"`
}

// A copy activity source for Sybase databases.
type SybaseSource struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns interface{} `pulumi:"additionalColumns"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// Database query. Type: string (or Expression with resultType string).
	Query interface{} `pulumi:"query"`
	// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	QueryTimeout interface{} `pulumi:"queryTimeout"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// Copy source type.
	// Expected value is 'SybaseSource'.
	Type string `pulumi:"type"`
}

// A copy activity source for Sybase databases.
type SybaseSourceResponse struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns interface{} `pulumi:"additionalColumns"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// Database query. Type: string (or Expression with resultType string).
	Query interface{} `pulumi:"query"`
	// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	QueryTimeout interface{} `pulumi:"queryTimeout"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// Copy source type.
	// Expected value is 'SybaseSource'.
	Type string `pulumi:"type"`
}

// The Sybase table dataset.
type SybaseTableDataset struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReference `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// The Sybase table name. Type: string (or Expression with resultType string).
	TableName interface{} `pulumi:"tableName"`
	// Type of dataset.
	// Expected value is 'SybaseTable'.
	Type string `pulumi:"type"`
}

// The Sybase table dataset.
type SybaseTableDatasetResponse struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetResponseFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceResponse `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// The Sybase table name. Type: string (or Expression with resultType string).
	TableName interface{} `pulumi:"tableName"`
	// Type of dataset.
	// Expected value is 'SybaseTable'.
	Type string `pulumi:"type"`
}

// Copy activity sources of tabular type.
type TabularSource struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns interface{} `pulumi:"additionalColumns"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	QueryTimeout interface{} `pulumi:"queryTimeout"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// Copy source type.
	// Expected value is 'TabularSource'.
	Type string `pulumi:"type"`
}

// Copy activity sources of tabular type.
type TabularSourceResponse struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns interface{} `pulumi:"additionalColumns"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	QueryTimeout interface{} `pulumi:"queryTimeout"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// Copy source type.
	// Expected value is 'TabularSource'.
	Type string `pulumi:"type"`
}

// The TarGZip compression read settings.
type TarGZipReadSettings struct {
	// Preserve the compression file name as folder path. Type: boolean (or Expression with resultType boolean).
	PreserveCompressionFileNameAsFolder interface{} `pulumi:"preserveCompressionFileNameAsFolder"`
	// The Compression setting type.
	// Expected value is 'TarGZipReadSettings'.
	Type string `pulumi:"type"`
}

// The TarGZip compression read settings.
type TarGZipReadSettingsResponse struct {
	// Preserve the compression file name as folder path. Type: boolean (or Expression with resultType boolean).
	PreserveCompressionFileNameAsFolder interface{} `pulumi:"preserveCompressionFileNameAsFolder"`
	// The Compression setting type.
	// Expected value is 'TarGZipReadSettings'.
	Type string `pulumi:"type"`
}

// The Tar compression read settings.
type TarReadSettings struct {
	// Preserve the compression file name as folder path. Type: boolean (or Expression with resultType boolean).
	PreserveCompressionFileNameAsFolder interface{} `pulumi:"preserveCompressionFileNameAsFolder"`
	// The Compression setting type.
	// Expected value is 'TarReadSettings'.
	Type string `pulumi:"type"`
}

// The Tar compression read settings.
type TarReadSettingsResponse struct {
	// Preserve the compression file name as folder path. Type: boolean (or Expression with resultType boolean).
	PreserveCompressionFileNameAsFolder interface{} `pulumi:"preserveCompressionFileNameAsFolder"`
	// The Compression setting type.
	// Expected value is 'TarReadSettings'.
	Type string `pulumi:"type"`
}

// Linked service for TeamDesk.
type TeamDeskLinkedService struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The api token for the TeamDesk source.
	ApiToken interface{} `pulumi:"apiToken"`
	// The authentication type to use.
	AuthenticationType string `pulumi:"authenticationType"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference `pulumi:"connectVia"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential interface{} `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// The password of the TeamDesk source.
	Password interface{} `pulumi:"password"`
	// Type of linked service.
	// Expected value is 'TeamDesk'.
	Type string `pulumi:"type"`
	// The url to connect TeamDesk source. Type: string (or Expression with resultType string).
	Url interface{} `pulumi:"url"`
	// The username of the TeamDesk source. Type: string (or Expression with resultType string).
	UserName interface{} `pulumi:"userName"`
}

// Linked service for TeamDesk.
type TeamDeskLinkedServiceResponse struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The api token for the TeamDesk source.
	ApiToken interface{} `pulumi:"apiToken"`
	// The authentication type to use.
	AuthenticationType string `pulumi:"authenticationType"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReferenceResponse `pulumi:"connectVia"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential interface{} `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// The password of the TeamDesk source.
	Password interface{} `pulumi:"password"`
	// Type of linked service.
	// Expected value is 'TeamDesk'.
	Type string `pulumi:"type"`
	// The url to connect TeamDesk source. Type: string (or Expression with resultType string).
	Url interface{} `pulumi:"url"`
	// The username of the TeamDesk source. Type: string (or Expression with resultType string).
	UserName interface{} `pulumi:"userName"`
}

// Linked service for Teradata data source.
type TeradataLinkedService struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// AuthenticationType to be used for connection.
	AuthenticationType *string `pulumi:"authenticationType"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference `pulumi:"connectVia"`
	// Teradata ODBC connection string. Type: string, SecureString or AzureKeyVaultSecretReference.
	ConnectionString interface{} `pulumi:"connectionString"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential interface{} `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Password for authentication.
	Password interface{} `pulumi:"password"`
	// Server name for connection. Type: string (or Expression with resultType string).
	Server interface{} `pulumi:"server"`
	// Type of linked service.
	// Expected value is 'Teradata'.
	Type string `pulumi:"type"`
	// Username for authentication. Type: string (or Expression with resultType string).
	Username interface{} `pulumi:"username"`
}

// Linked service for Teradata data source.
type TeradataLinkedServiceResponse struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// AuthenticationType to be used for connection.
	AuthenticationType *string `pulumi:"authenticationType"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReferenceResponse `pulumi:"connectVia"`
	// Teradata ODBC connection string. Type: string, SecureString or AzureKeyVaultSecretReference.
	ConnectionString interface{} `pulumi:"connectionString"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential interface{} `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Password for authentication.
	Password interface{} `pulumi:"password"`
	// Server name for connection. Type: string (or Expression with resultType string).
	Server interface{} `pulumi:"server"`
	// Type of linked service.
	// Expected value is 'Teradata'.
	Type string `pulumi:"type"`
	// Username for authentication. Type: string (or Expression with resultType string).
	Username interface{} `pulumi:"username"`
}

// The settings that will be leveraged for teradata source partitioning.
type TeradataPartitionSettings struct {
	// The name of the column that will be used for proceeding range or hash partitioning. Type: string (or Expression with resultType string).
	PartitionColumnName interface{} `pulumi:"partitionColumnName"`
	// The minimum value of column specified in partitionColumnName that will be used for proceeding range partitioning. Type: string (or Expression with resultType string).
	PartitionLowerBound interface{} `pulumi:"partitionLowerBound"`
	// The maximum value of column specified in partitionColumnName that will be used for proceeding range partitioning. Type: string (or Expression with resultType string).
	PartitionUpperBound interface{} `pulumi:"partitionUpperBound"`
}

// The settings that will be leveraged for teradata source partitioning.
type TeradataPartitionSettingsResponse struct {
	// The name of the column that will be used for proceeding range or hash partitioning. Type: string (or Expression with resultType string).
	PartitionColumnName interface{} `pulumi:"partitionColumnName"`
	// The minimum value of column specified in partitionColumnName that will be used for proceeding range partitioning. Type: string (or Expression with resultType string).
	PartitionLowerBound interface{} `pulumi:"partitionLowerBound"`
	// The maximum value of column specified in partitionColumnName that will be used for proceeding range partitioning. Type: string (or Expression with resultType string).
	PartitionUpperBound interface{} `pulumi:"partitionUpperBound"`
}

// A copy activity Teradata source.
type TeradataSource struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns interface{} `pulumi:"additionalColumns"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// The partition mechanism that will be used for teradata read in parallel. Possible values include: "None", "Hash", "DynamicRange".
	PartitionOption interface{} `pulumi:"partitionOption"`
	// The settings that will be leveraged for teradata source partitioning.
	PartitionSettings *TeradataPartitionSettings `pulumi:"partitionSettings"`
	// Teradata query. Type: string (or Expression with resultType string).
	Query interface{} `pulumi:"query"`
	// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	QueryTimeout interface{} `pulumi:"queryTimeout"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// Copy source type.
	// Expected value is 'TeradataSource'.
	Type string `pulumi:"type"`
}

// A copy activity Teradata source.
type TeradataSourceResponse struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns interface{} `pulumi:"additionalColumns"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// The partition mechanism that will be used for teradata read in parallel. Possible values include: "None", "Hash", "DynamicRange".
	PartitionOption interface{} `pulumi:"partitionOption"`
	// The settings that will be leveraged for teradata source partitioning.
	PartitionSettings *TeradataPartitionSettingsResponse `pulumi:"partitionSettings"`
	// Teradata query. Type: string (or Expression with resultType string).
	Query interface{} `pulumi:"query"`
	// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	QueryTimeout interface{} `pulumi:"queryTimeout"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// Copy source type.
	// Expected value is 'TeradataSource'.
	Type string `pulumi:"type"`
}

// The Teradata database dataset.
type TeradataTableDataset struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// The database name of Teradata. Type: string (or Expression with resultType string).
	Database interface{} `pulumi:"database"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReference `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// The table name of Teradata. Type: string (or Expression with resultType string).
	Table interface{} `pulumi:"table"`
	// Type of dataset.
	// Expected value is 'TeradataTable'.
	Type string `pulumi:"type"`
}

// The Teradata database dataset.
type TeradataTableDatasetResponse struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// The database name of Teradata. Type: string (or Expression with resultType string).
	Database interface{} `pulumi:"database"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetResponseFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceResponse `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// The table name of Teradata. Type: string (or Expression with resultType string).
	Table interface{} `pulumi:"table"`
	// Type of dataset.
	// Expected value is 'TeradataTable'.
	Type string `pulumi:"type"`
}

// The data stored in text format.
type TextFormat struct {
	// The column delimiter. Type: string (or Expression with resultType string).
	ColumnDelimiter interface{} `pulumi:"columnDelimiter"`
	// Deserializer. Type: string (or Expression with resultType string).
	Deserializer interface{} `pulumi:"deserializer"`
	// The code page name of the preferred encoding. If miss, the default value is ΓÇ£utf-8ΓÇ¥, unless BOM denotes another Unicode encoding. Refer to the ΓÇ£NameΓÇ¥ column of the table in the following link to set supported values: https://msdn.microsoft.com/library/system.text.encoding.aspx. Type: string (or Expression with resultType string).
	EncodingName interface{} `pulumi:"encodingName"`
	// The escape character. Type: string (or Expression with resultType string).
	EscapeChar interface{} `pulumi:"escapeChar"`
	// When used as input, treat the first row of data as headers. When used as output,write the headers into the output as the first row of data. The default value is false. Type: boolean (or Expression with resultType boolean).
	FirstRowAsHeader interface{} `pulumi:"firstRowAsHeader"`
	// The null value string. Type: string (or Expression with resultType string).
	NullValue interface{} `pulumi:"nullValue"`
	// The quote character. Type: string (or Expression with resultType string).
	QuoteChar interface{} `pulumi:"quoteChar"`
	// The row delimiter. Type: string (or Expression with resultType string).
	RowDelimiter interface{} `pulumi:"rowDelimiter"`
	// Serializer. Type: string (or Expression with resultType string).
	Serializer interface{} `pulumi:"serializer"`
	// The number of lines/rows to be skipped when parsing text files. The default value is 0. Type: integer (or Expression with resultType integer).
	SkipLineCount interface{} `pulumi:"skipLineCount"`
	// Treat empty column values in the text file as null. The default value is true. Type: boolean (or Expression with resultType boolean).
	TreatEmptyAsNull interface{} `pulumi:"treatEmptyAsNull"`
	// Type of dataset storage format.
	// Expected value is 'TextFormat'.
	Type string `pulumi:"type"`
}

// The data stored in text format.
type TextFormatResponse struct {
	// The column delimiter. Type: string (or Expression with resultType string).
	ColumnDelimiter interface{} `pulumi:"columnDelimiter"`
	// Deserializer. Type: string (or Expression with resultType string).
	Deserializer interface{} `pulumi:"deserializer"`
	// The code page name of the preferred encoding. If miss, the default value is ΓÇ£utf-8ΓÇ¥, unless BOM denotes another Unicode encoding. Refer to the ΓÇ£NameΓÇ¥ column of the table in the following link to set supported values: https://msdn.microsoft.com/library/system.text.encoding.aspx. Type: string (or Expression with resultType string).
	EncodingName interface{} `pulumi:"encodingName"`
	// The escape character. Type: string (or Expression with resultType string).
	EscapeChar interface{} `pulumi:"escapeChar"`
	// When used as input, treat the first row of data as headers. When used as output,write the headers into the output as the first row of data. The default value is false. Type: boolean (or Expression with resultType boolean).
	FirstRowAsHeader interface{} `pulumi:"firstRowAsHeader"`
	// The null value string. Type: string (or Expression with resultType string).
	NullValue interface{} `pulumi:"nullValue"`
	// The quote character. Type: string (or Expression with resultType string).
	QuoteChar interface{} `pulumi:"quoteChar"`
	// The row delimiter. Type: string (or Expression with resultType string).
	RowDelimiter interface{} `pulumi:"rowDelimiter"`
	// Serializer. Type: string (or Expression with resultType string).
	Serializer interface{} `pulumi:"serializer"`
	// The number of lines/rows to be skipped when parsing text files. The default value is 0. Type: integer (or Expression with resultType integer).
	SkipLineCount interface{} `pulumi:"skipLineCount"`
	// Treat empty column values in the text file as null. The default value is true. Type: boolean (or Expression with resultType boolean).
	TreatEmptyAsNull interface{} `pulumi:"treatEmptyAsNull"`
	// Type of dataset storage format.
	// Expected value is 'TextFormat'.
	Type string `pulumi:"type"`
}

// A data flow transformation.
type Transformation struct {
	// Dataset reference.
	Dataset *DatasetReference `pulumi:"dataset"`
	// Transformation description.
	Description *string `pulumi:"description"`
	// Flowlet Reference
	Flowlet *DataFlowReference `pulumi:"flowlet"`
	// Linked service reference.
	LinkedService *LinkedServiceReference `pulumi:"linkedService"`
	// Transformation name.
	Name string `pulumi:"name"`
}

// A data flow transformation.
type TransformationResponse struct {
	// Dataset reference.
	Dataset *DatasetReferenceResponse `pulumi:"dataset"`
	// Transformation description.
	Description *string `pulumi:"description"`
	// Flowlet Reference
	Flowlet *DataFlowReferenceResponse `pulumi:"flowlet"`
	// Linked service reference.
	LinkedService *LinkedServiceReferenceResponse `pulumi:"linkedService"`
	// Transformation name.
	Name string `pulumi:"name"`
}

// Trigger referenced dependency.
type TriggerDependencyReference struct {
	// Referenced trigger.
	ReferenceTrigger TriggerReference `pulumi:"referenceTrigger"`
	// The type of dependency reference.
	// Expected value is 'TriggerDependencyReference'.
	Type string `pulumi:"type"`
}

// Trigger referenced dependency.
type TriggerDependencyReferenceResponse struct {
	// Referenced trigger.
	ReferenceTrigger TriggerReferenceResponse `pulumi:"referenceTrigger"`
	// The type of dependency reference.
	// Expected value is 'TriggerDependencyReference'.
	Type string `pulumi:"type"`
}

// Pipeline that needs to be triggered with the given parameters.
type TriggerPipelineReference struct {
	// Pipeline parameters.
	Parameters map[string]interface{} `pulumi:"parameters"`
	// Pipeline reference.
	PipelineReference *PipelineReference `pulumi:"pipelineReference"`
}

// Pipeline that needs to be triggered with the given parameters.
type TriggerPipelineReferenceResponse struct {
	// Pipeline parameters.
	Parameters map[string]interface{} `pulumi:"parameters"`
	// Pipeline reference.
	PipelineReference *PipelineReferenceResponse `pulumi:"pipelineReference"`
}

// Trigger reference type.
type TriggerReference struct {
	// Reference trigger name.
	ReferenceName string `pulumi:"referenceName"`
	// Trigger reference type.
	Type string `pulumi:"type"`
}

// Trigger reference type.
type TriggerReferenceResponse struct {
	// Reference trigger name.
	ReferenceName string `pulumi:"referenceName"`
	// Trigger reference type.
	Type string `pulumi:"type"`
}

// Trigger that schedules pipeline runs for all fixed time interval windows from a start time without gaps and also supports backfill scenarios (when start time is in the past).
type TumblingWindowTrigger struct {
	// List of tags that can be used for describing the trigger.
	Annotations []interface{} `pulumi:"annotations"`
	// Specifies how long the trigger waits past due time before triggering new run. It doesn't alter window start and end time. The default is 0. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	Delay interface{} `pulumi:"delay"`
	// Triggers that this trigger depends on. Only tumbling window triggers are supported.
	DependsOn []interface{} `pulumi:"dependsOn"`
	// Trigger description.
	Description *string `pulumi:"description"`
	// The end time for the time period for the trigger during which events are fired for windows that are ready. Only UTC time is currently supported.
	EndTime *string `pulumi:"endTime"`
	// The frequency of the time windows.
	Frequency string `pulumi:"frequency"`
	// The interval of the time windows. The minimum interval allowed is 15 Minutes.
	Interval int `pulumi:"interval"`
	// The max number of parallel time windows (ready for execution) for which a new run is triggered.
	MaxConcurrency int `pulumi:"maxConcurrency"`
	// Pipeline for which runs are created when an event is fired for trigger window that is ready.
	Pipeline TriggerPipelineReference `pulumi:"pipeline"`
	// Retry policy that will be applied for failed pipeline runs.
	RetryPolicy *RetryPolicy `pulumi:"retryPolicy"`
	// The start time for the time period for the trigger during which events are fired for windows that are ready. Only UTC time is currently supported.
	StartTime string `pulumi:"startTime"`
	// Trigger type.
	// Expected value is 'TumblingWindowTrigger'.
	Type string `pulumi:"type"`
}

// Referenced tumbling window trigger dependency.
type TumblingWindowTriggerDependencyReference struct {
	// Timespan applied to the start time of a tumbling window when evaluating dependency.
	Offset *string `pulumi:"offset"`
	// Referenced trigger.
	ReferenceTrigger TriggerReference `pulumi:"referenceTrigger"`
	// The size of the window when evaluating the dependency. If undefined the frequency of the tumbling window will be used.
	Size *string `pulumi:"size"`
	// The type of dependency reference.
	// Expected value is 'TumblingWindowTriggerDependencyReference'.
	Type string `pulumi:"type"`
}

// Referenced tumbling window trigger dependency.
type TumblingWindowTriggerDependencyReferenceResponse struct {
	// Timespan applied to the start time of a tumbling window when evaluating dependency.
	Offset *string `pulumi:"offset"`
	// Referenced trigger.
	ReferenceTrigger TriggerReferenceResponse `pulumi:"referenceTrigger"`
	// The size of the window when evaluating the dependency. If undefined the frequency of the tumbling window will be used.
	Size *string `pulumi:"size"`
	// The type of dependency reference.
	// Expected value is 'TumblingWindowTriggerDependencyReference'.
	Type string `pulumi:"type"`
}

// Trigger that schedules pipeline runs for all fixed time interval windows from a start time without gaps and also supports backfill scenarios (when start time is in the past).
type TumblingWindowTriggerResponse struct {
	// List of tags that can be used for describing the trigger.
	Annotations []interface{} `pulumi:"annotations"`
	// Specifies how long the trigger waits past due time before triggering new run. It doesn't alter window start and end time. The default is 0. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	Delay interface{} `pulumi:"delay"`
	// Triggers that this trigger depends on. Only tumbling window triggers are supported.
	DependsOn []interface{} `pulumi:"dependsOn"`
	// Trigger description.
	Description *string `pulumi:"description"`
	// The end time for the time period for the trigger during which events are fired for windows that are ready. Only UTC time is currently supported.
	EndTime *string `pulumi:"endTime"`
	// The frequency of the time windows.
	Frequency string `pulumi:"frequency"`
	// The interval of the time windows. The minimum interval allowed is 15 Minutes.
	Interval int `pulumi:"interval"`
	// The max number of parallel time windows (ready for execution) for which a new run is triggered.
	MaxConcurrency int `pulumi:"maxConcurrency"`
	// Pipeline for which runs are created when an event is fired for trigger window that is ready.
	Pipeline TriggerPipelineReferenceResponse `pulumi:"pipeline"`
	// Retry policy that will be applied for failed pipeline runs.
	RetryPolicy *RetryPolicyResponse `pulumi:"retryPolicy"`
	// Indicates if trigger is running or not. Updated when Start/Stop APIs are called on the Trigger.
	RuntimeState string `pulumi:"runtimeState"`
	// The start time for the time period for the trigger during which events are fired for windows that are ready. Only UTC time is currently supported.
	StartTime string `pulumi:"startTime"`
	// Trigger type.
	// Expected value is 'TumblingWindowTrigger'.
	Type string `pulumi:"type"`
}

// Linked service for Twilio.
type TwilioLinkedService struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference `pulumi:"connectVia"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// The auth token of Twilio service.
	Password interface{} `pulumi:"password"`
	// Type of linked service.
	// Expected value is 'Twilio'.
	Type string `pulumi:"type"`
	// The Account SID of Twilio service.
	UserName interface{} `pulumi:"userName"`
}

// Linked service for Twilio.
type TwilioLinkedServiceResponse struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReferenceResponse `pulumi:"connectVia"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// The auth token of Twilio service.
	Password interface{} `pulumi:"password"`
	// Type of linked service.
	// Expected value is 'Twilio'.
	Type string `pulumi:"type"`
	// The Account SID of Twilio service.
	UserName interface{} `pulumi:"userName"`
}

// This activity executes inner activities until the specified boolean expression results to true or timeout is reached, whichever is earlier.
type UntilActivity struct {
	// List of activities to execute.
	Activities []interface{} `pulumi:"activities"`
	// Activity depends on condition.
	DependsOn []ActivityDependency `pulumi:"dependsOn"`
	// Activity description.
	Description *string `pulumi:"description"`
	// An expression that would evaluate to Boolean. The loop will continue until this expression evaluates to true
	Expression Expression `pulumi:"expression"`
	// Activity name.
	Name string `pulumi:"name"`
	// Specifies the timeout for the activity to run. If there is no value specified, it takes the value of TimeSpan.FromDays(7) which is 1 week as default. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])). Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	Timeout interface{} `pulumi:"timeout"`
	// Type of activity.
	// Expected value is 'Until'.
	Type string `pulumi:"type"`
	// Activity user properties.
	UserProperties []UserProperty `pulumi:"userProperties"`
}

// This activity executes inner activities until the specified boolean expression results to true or timeout is reached, whichever is earlier.
type UntilActivityResponse struct {
	// List of activities to execute.
	Activities []interface{} `pulumi:"activities"`
	// Activity depends on condition.
	DependsOn []ActivityDependencyResponse `pulumi:"dependsOn"`
	// Activity description.
	Description *string `pulumi:"description"`
	// An expression that would evaluate to Boolean. The loop will continue until this expression evaluates to true
	Expression ExpressionResponse `pulumi:"expression"`
	// Activity name.
	Name string `pulumi:"name"`
	// Specifies the timeout for the activity to run. If there is no value specified, it takes the value of TimeSpan.FromDays(7) which is 1 week as default. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])). Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	Timeout interface{} `pulumi:"timeout"`
	// Type of activity.
	// Expected value is 'Until'.
	Type string `pulumi:"type"`
	// Activity user properties.
	UserProperties []UserPropertyResponse `pulumi:"userProperties"`
}

// Get Data Plane read only token request definition.
type UserAccessPolicyResponse struct {
	// The resource path to get access relative to factory. Currently only empty string is supported which corresponds to the factory resource.
	AccessResourcePath *string `pulumi:"accessResourcePath"`
	// Expiration time for the token. Maximum duration for the token is eight hours and by default the token will expire in eight hours.
	ExpireTime *string `pulumi:"expireTime"`
	// The string with permissions for Data Plane access. Currently only 'r' is supported which grants read only access.
	Permissions *string `pulumi:"permissions"`
	// The name of the profile. Currently only the default is supported. The default value is DefaultProfile.
	ProfileName *string `pulumi:"profileName"`
	// Start time for the token. If not specified the current time will be used.
	StartTime *string `pulumi:"startTime"`
}

// Get Data Plane read only token request definition.
type UserAccessPolicyResponseOutput struct{ *pulumi.OutputState }

func (UserAccessPolicyResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*UserAccessPolicyResponse)(nil)).Elem()
}

func (o UserAccessPolicyResponseOutput) ToUserAccessPolicyResponseOutput() UserAccessPolicyResponseOutput {
	return o
}

func (o UserAccessPolicyResponseOutput) ToUserAccessPolicyResponseOutputWithContext(ctx context.Context) UserAccessPolicyResponseOutput {
	return o
}

// The resource path to get access relative to factory. Currently only empty string is supported which corresponds to the factory resource.
func (o UserAccessPolicyResponseOutput) AccessResourcePath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v UserAccessPolicyResponse) *string { return v.AccessResourcePath }).(pulumi.StringPtrOutput)
}

// Expiration time for the token. Maximum duration for the token is eight hours and by default the token will expire in eight hours.
func (o UserAccessPolicyResponseOutput) ExpireTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v UserAccessPolicyResponse) *string { return v.ExpireTime }).(pulumi.StringPtrOutput)
}

// The string with permissions for Data Plane access. Currently only 'r' is supported which grants read only access.
func (o UserAccessPolicyResponseOutput) Permissions() pulumi.StringPtrOutput {
	return o.ApplyT(func(v UserAccessPolicyResponse) *string { return v.Permissions }).(pulumi.StringPtrOutput)
}

// The name of the profile. Currently only the default is supported. The default value is DefaultProfile.
func (o UserAccessPolicyResponseOutput) ProfileName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v UserAccessPolicyResponse) *string { return v.ProfileName }).(pulumi.StringPtrOutput)
}

// Start time for the token. If not specified the current time will be used.
func (o UserAccessPolicyResponseOutput) StartTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v UserAccessPolicyResponse) *string { return v.StartTime }).(pulumi.StringPtrOutput)
}

type UserAccessPolicyResponsePtrOutput struct{ *pulumi.OutputState }

func (UserAccessPolicyResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**UserAccessPolicyResponse)(nil)).Elem()
}

func (o UserAccessPolicyResponsePtrOutput) ToUserAccessPolicyResponsePtrOutput() UserAccessPolicyResponsePtrOutput {
	return o
}

func (o UserAccessPolicyResponsePtrOutput) ToUserAccessPolicyResponsePtrOutputWithContext(ctx context.Context) UserAccessPolicyResponsePtrOutput {
	return o
}

func (o UserAccessPolicyResponsePtrOutput) Elem() UserAccessPolicyResponseOutput {
	return o.ApplyT(func(v *UserAccessPolicyResponse) UserAccessPolicyResponse {
		if v != nil {
			return *v
		}
		var ret UserAccessPolicyResponse
		return ret
	}).(UserAccessPolicyResponseOutput)
}

// The resource path to get access relative to factory. Currently only empty string is supported which corresponds to the factory resource.
func (o UserAccessPolicyResponsePtrOutput) AccessResourcePath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *UserAccessPolicyResponse) *string {
		if v == nil {
			return nil
		}
		return v.AccessResourcePath
	}).(pulumi.StringPtrOutput)
}

// Expiration time for the token. Maximum duration for the token is eight hours and by default the token will expire in eight hours.
func (o UserAccessPolicyResponsePtrOutput) ExpireTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *UserAccessPolicyResponse) *string {
		if v == nil {
			return nil
		}
		return v.ExpireTime
	}).(pulumi.StringPtrOutput)
}

// The string with permissions for Data Plane access. Currently only 'r' is supported which grants read only access.
func (o UserAccessPolicyResponsePtrOutput) Permissions() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *UserAccessPolicyResponse) *string {
		if v == nil {
			return nil
		}
		return v.Permissions
	}).(pulumi.StringPtrOutput)
}

// The name of the profile. Currently only the default is supported. The default value is DefaultProfile.
func (o UserAccessPolicyResponsePtrOutput) ProfileName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *UserAccessPolicyResponse) *string {
		if v == nil {
			return nil
		}
		return v.ProfileName
	}).(pulumi.StringPtrOutput)
}

// Start time for the token. If not specified the current time will be used.
func (o UserAccessPolicyResponsePtrOutput) StartTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *UserAccessPolicyResponse) *string {
		if v == nil {
			return nil
		}
		return v.StartTime
	}).(pulumi.StringPtrOutput)
}

// User property.
type UserProperty struct {
	// User property name.
	Name string `pulumi:"name"`
	// User property value. Type: string (or Expression with resultType string).
	Value interface{} `pulumi:"value"`
}

// User property.
type UserPropertyResponse struct {
	// User property name.
	Name string `pulumi:"name"`
	// User property value. Type: string (or Expression with resultType string).
	Value interface{} `pulumi:"value"`
}

// This activity verifies that an external resource exists.
type ValidationActivity struct {
	// Can be used if dataset points to a folder. If set to true, the folder must have at least one file. If set to false, the folder must be empty. Type: boolean (or Expression with resultType boolean).
	ChildItems interface{} `pulumi:"childItems"`
	// Validation activity dataset reference.
	Dataset DatasetReference `pulumi:"dataset"`
	// Activity depends on condition.
	DependsOn []ActivityDependency `pulumi:"dependsOn"`
	// Activity description.
	Description *string `pulumi:"description"`
	// Can be used if dataset points to a file. The file must be greater than or equal in size to the value specified. Type: integer (or Expression with resultType integer).
	MinimumSize interface{} `pulumi:"minimumSize"`
	// Activity name.
	Name string `pulumi:"name"`
	// A delay in seconds between validation attempts. If no value is specified, 10 seconds will be used as the default. Type: integer (or Expression with resultType integer).
	Sleep interface{} `pulumi:"sleep"`
	// Specifies the timeout for the activity to run. If there is no value specified, it takes the value of TimeSpan.FromDays(7) which is 1 week as default. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	Timeout interface{} `pulumi:"timeout"`
	// Type of activity.
	// Expected value is 'Validation'.
	Type string `pulumi:"type"`
	// Activity user properties.
	UserProperties []UserProperty `pulumi:"userProperties"`
}

// This activity verifies that an external resource exists.
type ValidationActivityResponse struct {
	// Can be used if dataset points to a folder. If set to true, the folder must have at least one file. If set to false, the folder must be empty. Type: boolean (or Expression with resultType boolean).
	ChildItems interface{} `pulumi:"childItems"`
	// Validation activity dataset reference.
	Dataset DatasetReferenceResponse `pulumi:"dataset"`
	// Activity depends on condition.
	DependsOn []ActivityDependencyResponse `pulumi:"dependsOn"`
	// Activity description.
	Description *string `pulumi:"description"`
	// Can be used if dataset points to a file. The file must be greater than or equal in size to the value specified. Type: integer (or Expression with resultType integer).
	MinimumSize interface{} `pulumi:"minimumSize"`
	// Activity name.
	Name string `pulumi:"name"`
	// A delay in seconds between validation attempts. If no value is specified, 10 seconds will be used as the default. Type: integer (or Expression with resultType integer).
	Sleep interface{} `pulumi:"sleep"`
	// Specifies the timeout for the activity to run. If there is no value specified, it takes the value of TimeSpan.FromDays(7) which is 1 week as default. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	Timeout interface{} `pulumi:"timeout"`
	// Type of activity.
	// Expected value is 'Validation'.
	Type string `pulumi:"type"`
	// Activity user properties.
	UserProperties []UserPropertyResponse `pulumi:"userProperties"`
}

// Definition of a single variable for a Pipeline.
type VariableSpecification struct {
	// Default value of variable.
	DefaultValue interface{} `pulumi:"defaultValue"`
	// Variable type.
	Type string `pulumi:"type"`
}

// VariableSpecificationInput is an input type that accepts VariableSpecificationArgs and VariableSpecificationOutput values.
// You can construct a concrete instance of `VariableSpecificationInput` via:
//
//	VariableSpecificationArgs{...}
type VariableSpecificationInput interface {
	pulumi.Input

	ToVariableSpecificationOutput() VariableSpecificationOutput
	ToVariableSpecificationOutputWithContext(context.Context) VariableSpecificationOutput
}

// Definition of a single variable for a Pipeline.
type VariableSpecificationArgs struct {
	// Default value of variable.
	DefaultValue pulumi.Input `pulumi:"defaultValue"`
	// Variable type.
	Type pulumi.StringInput `pulumi:"type"`
}

func (VariableSpecificationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VariableSpecification)(nil)).Elem()
}

func (i VariableSpecificationArgs) ToVariableSpecificationOutput() VariableSpecificationOutput {
	return i.ToVariableSpecificationOutputWithContext(context.Background())
}

func (i VariableSpecificationArgs) ToVariableSpecificationOutputWithContext(ctx context.Context) VariableSpecificationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VariableSpecificationOutput)
}

// VariableSpecificationMapInput is an input type that accepts VariableSpecificationMap and VariableSpecificationMapOutput values.
// You can construct a concrete instance of `VariableSpecificationMapInput` via:
//
//	VariableSpecificationMap{ "key": VariableSpecificationArgs{...} }
type VariableSpecificationMapInput interface {
	pulumi.Input

	ToVariableSpecificationMapOutput() VariableSpecificationMapOutput
	ToVariableSpecificationMapOutputWithContext(context.Context) VariableSpecificationMapOutput
}

type VariableSpecificationMap map[string]VariableSpecificationInput

func (VariableSpecificationMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]VariableSpecification)(nil)).Elem()
}

func (i VariableSpecificationMap) ToVariableSpecificationMapOutput() VariableSpecificationMapOutput {
	return i.ToVariableSpecificationMapOutputWithContext(context.Background())
}

func (i VariableSpecificationMap) ToVariableSpecificationMapOutputWithContext(ctx context.Context) VariableSpecificationMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VariableSpecificationMapOutput)
}

// Definition of a single variable for a Pipeline.
type VariableSpecificationOutput struct{ *pulumi.OutputState }

func (VariableSpecificationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VariableSpecification)(nil)).Elem()
}

func (o VariableSpecificationOutput) ToVariableSpecificationOutput() VariableSpecificationOutput {
	return o
}

func (o VariableSpecificationOutput) ToVariableSpecificationOutputWithContext(ctx context.Context) VariableSpecificationOutput {
	return o
}

// Default value of variable.
func (o VariableSpecificationOutput) DefaultValue() pulumi.AnyOutput {
	return o.ApplyT(func(v VariableSpecification) interface{} { return v.DefaultValue }).(pulumi.AnyOutput)
}

// Variable type.
func (o VariableSpecificationOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v VariableSpecification) string { return v.Type }).(pulumi.StringOutput)
}

type VariableSpecificationMapOutput struct{ *pulumi.OutputState }

func (VariableSpecificationMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]VariableSpecification)(nil)).Elem()
}

func (o VariableSpecificationMapOutput) ToVariableSpecificationMapOutput() VariableSpecificationMapOutput {
	return o
}

func (o VariableSpecificationMapOutput) ToVariableSpecificationMapOutputWithContext(ctx context.Context) VariableSpecificationMapOutput {
	return o
}

func (o VariableSpecificationMapOutput) MapIndex(k pulumi.StringInput) VariableSpecificationOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) VariableSpecification {
		return vs[0].(map[string]VariableSpecification)[vs[1].(string)]
	}).(VariableSpecificationOutput)
}

// Definition of a single variable for a Pipeline.
type VariableSpecificationResponse struct {
	// Default value of variable.
	DefaultValue interface{} `pulumi:"defaultValue"`
	// Variable type.
	Type string `pulumi:"type"`
}

// Definition of a single variable for a Pipeline.
type VariableSpecificationResponseOutput struct{ *pulumi.OutputState }

func (VariableSpecificationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VariableSpecificationResponse)(nil)).Elem()
}

func (o VariableSpecificationResponseOutput) ToVariableSpecificationResponseOutput() VariableSpecificationResponseOutput {
	return o
}

func (o VariableSpecificationResponseOutput) ToVariableSpecificationResponseOutputWithContext(ctx context.Context) VariableSpecificationResponseOutput {
	return o
}

// Default value of variable.
func (o VariableSpecificationResponseOutput) DefaultValue() pulumi.AnyOutput {
	return o.ApplyT(func(v VariableSpecificationResponse) interface{} { return v.DefaultValue }).(pulumi.AnyOutput)
}

// Variable type.
func (o VariableSpecificationResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v VariableSpecificationResponse) string { return v.Type }).(pulumi.StringOutput)
}

type VariableSpecificationResponseMapOutput struct{ *pulumi.OutputState }

func (VariableSpecificationResponseMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]VariableSpecificationResponse)(nil)).Elem()
}

func (o VariableSpecificationResponseMapOutput) ToVariableSpecificationResponseMapOutput() VariableSpecificationResponseMapOutput {
	return o
}

func (o VariableSpecificationResponseMapOutput) ToVariableSpecificationResponseMapOutputWithContext(ctx context.Context) VariableSpecificationResponseMapOutput {
	return o
}

func (o VariableSpecificationResponseMapOutput) MapIndex(k pulumi.StringInput) VariableSpecificationResponseOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) VariableSpecificationResponse {
		return vs[0].(map[string]VariableSpecificationResponse)[vs[1].(string)]
	}).(VariableSpecificationResponseOutput)
}

// Vertica linked service.
type VerticaLinkedService struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference `pulumi:"connectVia"`
	// An ODBC connection string. Type: string, SecureString or AzureKeyVaultSecretReference.
	ConnectionString interface{} `pulumi:"connectionString"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential interface{} `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// The Azure key vault secret reference of password in connection string.
	Pwd *AzureKeyVaultSecretReference `pulumi:"pwd"`
	// Type of linked service.
	// Expected value is 'Vertica'.
	Type string `pulumi:"type"`
}

// Vertica linked service.
type VerticaLinkedServiceResponse struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReferenceResponse `pulumi:"connectVia"`
	// An ODBC connection string. Type: string, SecureString or AzureKeyVaultSecretReference.
	ConnectionString interface{} `pulumi:"connectionString"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential interface{} `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// The Azure key vault secret reference of password in connection string.
	Pwd *AzureKeyVaultSecretReferenceResponse `pulumi:"pwd"`
	// Type of linked service.
	// Expected value is 'Vertica'.
	Type string `pulumi:"type"`
}

// A copy activity Vertica source.
type VerticaSource struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns interface{} `pulumi:"additionalColumns"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// A query to retrieve data from source. Type: string (or Expression with resultType string).
	Query interface{} `pulumi:"query"`
	// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	QueryTimeout interface{} `pulumi:"queryTimeout"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// Copy source type.
	// Expected value is 'VerticaSource'.
	Type string `pulumi:"type"`
}

// A copy activity Vertica source.
type VerticaSourceResponse struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns interface{} `pulumi:"additionalColumns"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// A query to retrieve data from source. Type: string (or Expression with resultType string).
	Query interface{} `pulumi:"query"`
	// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	QueryTimeout interface{} `pulumi:"queryTimeout"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// Copy source type.
	// Expected value is 'VerticaSource'.
	Type string `pulumi:"type"`
}

// Vertica dataset.
type VerticaTableDataset struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReference `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// The table name of the Vertica. Type: string (or Expression with resultType string).
	Table interface{} `pulumi:"table"`
	// This property will be retired. Please consider using schema + table properties instead.
	TableName interface{} `pulumi:"tableName"`
	// Type of dataset.
	// Expected value is 'VerticaTable'.
	Type string `pulumi:"type"`
}

// Vertica dataset.
type VerticaTableDatasetResponse struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetResponseFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceResponse `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// The table name of the Vertica. Type: string (or Expression with resultType string).
	Table interface{} `pulumi:"table"`
	// This property will be retired. Please consider using schema + table properties instead.
	TableName interface{} `pulumi:"tableName"`
	// Type of dataset.
	// Expected value is 'VerticaTable'.
	Type string `pulumi:"type"`
}

// This activity suspends pipeline execution for the specified interval.
type WaitActivity struct {
	// Activity depends on condition.
	DependsOn []ActivityDependency `pulumi:"dependsOn"`
	// Activity description.
	Description *string `pulumi:"description"`
	// Activity name.
	Name string `pulumi:"name"`
	// Type of activity.
	// Expected value is 'Wait'.
	Type string `pulumi:"type"`
	// Activity user properties.
	UserProperties []UserProperty `pulumi:"userProperties"`
	// Duration in seconds.
	WaitTimeInSeconds interface{} `pulumi:"waitTimeInSeconds"`
}

// This activity suspends pipeline execution for the specified interval.
type WaitActivityResponse struct {
	// Activity depends on condition.
	DependsOn []ActivityDependencyResponse `pulumi:"dependsOn"`
	// Activity description.
	Description *string `pulumi:"description"`
	// Activity name.
	Name string `pulumi:"name"`
	// Type of activity.
	// Expected value is 'Wait'.
	Type string `pulumi:"type"`
	// Activity user properties.
	UserProperties []UserPropertyResponse `pulumi:"userProperties"`
	// Duration in seconds.
	WaitTimeInSeconds interface{} `pulumi:"waitTimeInSeconds"`
}

// Web activity.
type WebActivity struct {
	// Authentication method used for calling the endpoint.
	Authentication *WebActivityAuthentication `pulumi:"authentication"`
	// Represents the payload that will be sent to the endpoint. Required for POST/PUT method, not allowed for GET method Type: string (or Expression with resultType string).
	Body interface{} `pulumi:"body"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference `pulumi:"connectVia"`
	// List of datasets passed to web endpoint.
	Datasets []DatasetReference `pulumi:"datasets"`
	// Activity depends on condition.
	DependsOn []ActivityDependency `pulumi:"dependsOn"`
	// Activity description.
	Description *string `pulumi:"description"`
	// When set to true, Certificate validation will be disabled.
	DisableCertValidation *bool `pulumi:"disableCertValidation"`
	// Represents the headers that will be sent to the request. For example, to set the language and type on a request: "headers" : { "Accept-Language": "en-us", "Content-Type": "application/json" }. Type: string (or Expression with resultType string).
	Headers interface{} `pulumi:"headers"`
	// Linked service reference.
	LinkedServiceName *LinkedServiceReference `pulumi:"linkedServiceName"`
	// List of linked services passed to web endpoint.
	LinkedServices []LinkedServiceReference `pulumi:"linkedServices"`
	// Rest API method for target endpoint.
	Method string `pulumi:"method"`
	// Activity name.
	Name string `pulumi:"name"`
	// Activity policy.
	Policy *ActivityPolicy `pulumi:"policy"`
	// Type of activity.
	// Expected value is 'WebActivity'.
	Type string `pulumi:"type"`
	// Web activity target endpoint and path. Type: string (or Expression with resultType string).
	Url interface{} `pulumi:"url"`
	// Activity user properties.
	UserProperties []UserProperty `pulumi:"userProperties"`
}

// Web activity authentication properties.
type WebActivityAuthentication struct {
	// The credential reference containing authentication information.
	Credential *CredentialReference `pulumi:"credential"`
	// Password for the PFX file or basic authentication / Secret when used for ServicePrincipal
	Password interface{} `pulumi:"password"`
	// Base64-encoded contents of a PFX file or Certificate when used for ServicePrincipal
	Pfx interface{} `pulumi:"pfx"`
	// Resource for which Azure Auth token will be requested when using MSI Authentication. Type: string (or Expression with resultType string).
	Resource interface{} `pulumi:"resource"`
	// Web activity authentication (Basic/ClientCertificate/MSI/ServicePrincipal)
	Type *string `pulumi:"type"`
	// TenantId for which Azure Auth token will be requested when using ServicePrincipal Authentication. Type: string (or Expression with resultType string).
	UserTenant interface{} `pulumi:"userTenant"`
	// Web activity authentication user name for basic authentication or ClientID when used for ServicePrincipal. Type: string (or Expression with resultType string).
	Username interface{} `pulumi:"username"`
}

// Web activity authentication properties.
type WebActivityAuthenticationResponse struct {
	// The credential reference containing authentication information.
	Credential *CredentialReferenceResponse `pulumi:"credential"`
	// Password for the PFX file or basic authentication / Secret when used for ServicePrincipal
	Password interface{} `pulumi:"password"`
	// Base64-encoded contents of a PFX file or Certificate when used for ServicePrincipal
	Pfx interface{} `pulumi:"pfx"`
	// Resource for which Azure Auth token will be requested when using MSI Authentication. Type: string (or Expression with resultType string).
	Resource interface{} `pulumi:"resource"`
	// Web activity authentication (Basic/ClientCertificate/MSI/ServicePrincipal)
	Type *string `pulumi:"type"`
	// TenantId for which Azure Auth token will be requested when using ServicePrincipal Authentication. Type: string (or Expression with resultType string).
	UserTenant interface{} `pulumi:"userTenant"`
	// Web activity authentication user name for basic authentication or ClientID when used for ServicePrincipal. Type: string (or Expression with resultType string).
	Username interface{} `pulumi:"username"`
}

// Web activity.
type WebActivityResponse struct {
	// Authentication method used for calling the endpoint.
	Authentication *WebActivityAuthenticationResponse `pulumi:"authentication"`
	// Represents the payload that will be sent to the endpoint. Required for POST/PUT method, not allowed for GET method Type: string (or Expression with resultType string).
	Body interface{} `pulumi:"body"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReferenceResponse `pulumi:"connectVia"`
	// List of datasets passed to web endpoint.
	Datasets []DatasetReferenceResponse `pulumi:"datasets"`
	// Activity depends on condition.
	DependsOn []ActivityDependencyResponse `pulumi:"dependsOn"`
	// Activity description.
	Description *string `pulumi:"description"`
	// When set to true, Certificate validation will be disabled.
	DisableCertValidation *bool `pulumi:"disableCertValidation"`
	// Represents the headers that will be sent to the request. For example, to set the language and type on a request: "headers" : { "Accept-Language": "en-us", "Content-Type": "application/json" }. Type: string (or Expression with resultType string).
	Headers interface{} `pulumi:"headers"`
	// Linked service reference.
	LinkedServiceName *LinkedServiceReferenceResponse `pulumi:"linkedServiceName"`
	// List of linked services passed to web endpoint.
	LinkedServices []LinkedServiceReferenceResponse `pulumi:"linkedServices"`
	// Rest API method for target endpoint.
	Method string `pulumi:"method"`
	// Activity name.
	Name string `pulumi:"name"`
	// Activity policy.
	Policy *ActivityPolicyResponse `pulumi:"policy"`
	// Type of activity.
	// Expected value is 'WebActivity'.
	Type string `pulumi:"type"`
	// Web activity target endpoint and path. Type: string (or Expression with resultType string).
	Url interface{} `pulumi:"url"`
	// Activity user properties.
	UserProperties []UserPropertyResponse `pulumi:"userProperties"`
}

// A WebLinkedService that uses anonymous authentication to communicate with an HTTP endpoint.
type WebAnonymousAuthentication struct {
	// Type of authentication used to connect to the web table source.
	// Expected value is 'Anonymous'.
	AuthenticationType string `pulumi:"authenticationType"`
	// The URL of the web service endpoint, e.g. https://www.microsoft.com . Type: string (or Expression with resultType string).
	Url interface{} `pulumi:"url"`
}

// A WebLinkedService that uses anonymous authentication to communicate with an HTTP endpoint.
type WebAnonymousAuthenticationResponse struct {
	// Type of authentication used to connect to the web table source.
	// Expected value is 'Anonymous'.
	AuthenticationType string `pulumi:"authenticationType"`
	// The URL of the web service endpoint, e.g. https://www.microsoft.com . Type: string (or Expression with resultType string).
	Url interface{} `pulumi:"url"`
}

// A WebLinkedService that uses basic authentication to communicate with an HTTP endpoint.
type WebBasicAuthentication struct {
	// Type of authentication used to connect to the web table source.
	// Expected value is 'Basic'.
	AuthenticationType string `pulumi:"authenticationType"`
	// The password for Basic authentication.
	Password interface{} `pulumi:"password"`
	// The URL of the web service endpoint, e.g. https://www.microsoft.com . Type: string (or Expression with resultType string).
	Url interface{} `pulumi:"url"`
	// User name for Basic authentication. Type: string (or Expression with resultType string).
	Username interface{} `pulumi:"username"`
}

// A WebLinkedService that uses basic authentication to communicate with an HTTP endpoint.
type WebBasicAuthenticationResponse struct {
	// Type of authentication used to connect to the web table source.
	// Expected value is 'Basic'.
	AuthenticationType string `pulumi:"authenticationType"`
	// The password for Basic authentication.
	Password interface{} `pulumi:"password"`
	// The URL of the web service endpoint, e.g. https://www.microsoft.com . Type: string (or Expression with resultType string).
	Url interface{} `pulumi:"url"`
	// User name for Basic authentication. Type: string (or Expression with resultType string).
	Username interface{} `pulumi:"username"`
}

// A WebLinkedService that uses client certificate based authentication to communicate with an HTTP endpoint. This scheme follows mutual authentication; the server must also provide valid credentials to the client.
type WebClientCertificateAuthentication struct {
	// Type of authentication used to connect to the web table source.
	// Expected value is 'ClientCertificate'.
	AuthenticationType string `pulumi:"authenticationType"`
	// Password for the PFX file.
	Password interface{} `pulumi:"password"`
	// Base64-encoded contents of a PFX file.
	Pfx interface{} `pulumi:"pfx"`
	// The URL of the web service endpoint, e.g. https://www.microsoft.com . Type: string (or Expression with resultType string).
	Url interface{} `pulumi:"url"`
}

// A WebLinkedService that uses client certificate based authentication to communicate with an HTTP endpoint. This scheme follows mutual authentication; the server must also provide valid credentials to the client.
type WebClientCertificateAuthenticationResponse struct {
	// Type of authentication used to connect to the web table source.
	// Expected value is 'ClientCertificate'.
	AuthenticationType string `pulumi:"authenticationType"`
	// Password for the PFX file.
	Password interface{} `pulumi:"password"`
	// Base64-encoded contents of a PFX file.
	Pfx interface{} `pulumi:"pfx"`
	// The URL of the web service endpoint, e.g. https://www.microsoft.com . Type: string (or Expression with resultType string).
	Url interface{} `pulumi:"url"`
}

// WebHook activity.
type WebHookActivity struct {
	// Authentication method used for calling the endpoint.
	Authentication *WebActivityAuthentication `pulumi:"authentication"`
	// Represents the payload that will be sent to the endpoint. Required for POST/PUT method, not allowed for GET method Type: string (or Expression with resultType string).
	Body interface{} `pulumi:"body"`
	// Activity depends on condition.
	DependsOn []ActivityDependency `pulumi:"dependsOn"`
	// Activity description.
	Description *string `pulumi:"description"`
	// Represents the headers that will be sent to the request. For example, to set the language and type on a request: "headers" : { "Accept-Language": "en-us", "Content-Type": "application/json" }. Type: string (or Expression with resultType string).
	Headers interface{} `pulumi:"headers"`
	// Rest API method for target endpoint.
	Method string `pulumi:"method"`
	// Activity name.
	Name string `pulumi:"name"`
	// When set to true, statusCode, output and error in callback request body will be consumed by activity. The activity can be marked as failed by setting statusCode >= 400 in callback request. Default is false. Type: boolean (or Expression with resultType boolean).
	ReportStatusOnCallBack interface{} `pulumi:"reportStatusOnCallBack"`
	// The timeout within which the webhook should be called back. If there is no value specified, it defaults to 10 minutes. Type: string. Pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	Timeout *string `pulumi:"timeout"`
	// Type of activity.
	// Expected value is 'WebHook'.
	Type string `pulumi:"type"`
	// WebHook activity target endpoint and path. Type: string (or Expression with resultType string).
	Url interface{} `pulumi:"url"`
	// Activity user properties.
	UserProperties []UserProperty `pulumi:"userProperties"`
}

// WebHook activity.
type WebHookActivityResponse struct {
	// Authentication method used for calling the endpoint.
	Authentication *WebActivityAuthenticationResponse `pulumi:"authentication"`
	// Represents the payload that will be sent to the endpoint. Required for POST/PUT method, not allowed for GET method Type: string (or Expression with resultType string).
	Body interface{} `pulumi:"body"`
	// Activity depends on condition.
	DependsOn []ActivityDependencyResponse `pulumi:"dependsOn"`
	// Activity description.
	Description *string `pulumi:"description"`
	// Represents the headers that will be sent to the request. For example, to set the language and type on a request: "headers" : { "Accept-Language": "en-us", "Content-Type": "application/json" }. Type: string (or Expression with resultType string).
	Headers interface{} `pulumi:"headers"`
	// Rest API method for target endpoint.
	Method string `pulumi:"method"`
	// Activity name.
	Name string `pulumi:"name"`
	// When set to true, statusCode, output and error in callback request body will be consumed by activity. The activity can be marked as failed by setting statusCode >= 400 in callback request. Default is false. Type: boolean (or Expression with resultType boolean).
	ReportStatusOnCallBack interface{} `pulumi:"reportStatusOnCallBack"`
	// The timeout within which the webhook should be called back. If there is no value specified, it defaults to 10 minutes. Type: string. Pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	Timeout *string `pulumi:"timeout"`
	// Type of activity.
	// Expected value is 'WebHook'.
	Type string `pulumi:"type"`
	// WebHook activity target endpoint and path. Type: string (or Expression with resultType string).
	Url interface{} `pulumi:"url"`
	// Activity user properties.
	UserProperties []UserPropertyResponse `pulumi:"userProperties"`
}

// Web linked service.
type WebLinkedService struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference `pulumi:"connectVia"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Type of linked service.
	// Expected value is 'Web'.
	Type string `pulumi:"type"`
	// Web linked service properties.
	TypeProperties interface{} `pulumi:"typeProperties"`
}

// Web linked service.
type WebLinkedServiceResponse struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReferenceResponse `pulumi:"connectVia"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Type of linked service.
	// Expected value is 'Web'.
	Type string `pulumi:"type"`
	// Web linked service properties.
	TypeProperties interface{} `pulumi:"typeProperties"`
}

// A copy activity source for web page table.
type WebSource struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns interface{} `pulumi:"additionalColumns"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// Copy source type.
	// Expected value is 'WebSource'.
	Type string `pulumi:"type"`
}

// A copy activity source for web page table.
type WebSourceResponse struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns interface{} `pulumi:"additionalColumns"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// Copy source type.
	// Expected value is 'WebSource'.
	Type string `pulumi:"type"`
}

// The dataset points to a HTML table in the web page.
type WebTableDataset struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetFolder `pulumi:"folder"`
	// The zero-based index of the table in the web page. Type: integer (or Expression with resultType integer), minimum: 0.
	Index interface{} `pulumi:"index"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReference `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// The relative URL to the web page from the linked service URL. Type: string (or Expression with resultType string).
	Path interface{} `pulumi:"path"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// Type of dataset.
	// Expected value is 'WebTable'.
	Type string `pulumi:"type"`
}

// The dataset points to a HTML table in the web page.
type WebTableDatasetResponse struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetResponseFolder `pulumi:"folder"`
	// The zero-based index of the table in the web page. Type: integer (or Expression with resultType integer), minimum: 0.
	Index interface{} `pulumi:"index"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceResponse `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// The relative URL to the web page from the linked service URL. Type: string (or Expression with resultType string).
	Path interface{} `pulumi:"path"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// Type of dataset.
	// Expected value is 'WebTable'.
	Type string `pulumi:"type"`
}

// Power Query data flow.
type WranglingDataFlow struct {
	// List of tags that can be used for describing the data flow.
	Annotations []interface{} `pulumi:"annotations"`
	// The description of the data flow.
	Description *string `pulumi:"description"`
	// Locale of the Power query mashup document.
	DocumentLocale *string `pulumi:"documentLocale"`
	// The folder that this data flow is in. If not specified, Data flow will appear at the root level.
	Folder *DataFlowFolder `pulumi:"folder"`
	// Power query mashup script.
	Script *string `pulumi:"script"`
	// List of sources in Power Query.
	Sources []PowerQuerySource `pulumi:"sources"`
	// Type of data flow.
	// Expected value is 'WranglingDataFlow'.
	Type string `pulumi:"type"`
}

// Power Query data flow.
type WranglingDataFlowResponse struct {
	// List of tags that can be used for describing the data flow.
	Annotations []interface{} `pulumi:"annotations"`
	// The description of the data flow.
	Description *string `pulumi:"description"`
	// Locale of the Power query mashup document.
	DocumentLocale *string `pulumi:"documentLocale"`
	// The folder that this data flow is in. If not specified, Data flow will appear at the root level.
	Folder *DataFlowResponseFolder `pulumi:"folder"`
	// Power query mashup script.
	Script *string `pulumi:"script"`
	// List of sources in Power Query.
	Sources []PowerQuerySourceResponse `pulumi:"sources"`
	// Type of data flow.
	// Expected value is 'WranglingDataFlow'.
	Type string `pulumi:"type"`
}

// Xero Service linked service.
type XeroLinkedService struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference `pulumi:"connectVia"`
	// Properties used to connect to Xero. It is mutually exclusive with any other properties in the linked service. Type: object.
	ConnectionProperties interface{} `pulumi:"connectionProperties"`
	// The consumer key associated with the Xero application.
	ConsumerKey interface{} `pulumi:"consumerKey"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential interface{} `pulumi:"encryptedCredential"`
	// The endpoint of the Xero server. (i.e. api.xero.com)
	Host interface{} `pulumi:"host"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// The private key from the .pem file that was generated for your Xero private application. You must include all the text from the .pem file, including the Unix line endings(
	// ).
	PrivateKey interface{} `pulumi:"privateKey"`
	// Type of linked service.
	// Expected value is 'Xero'.
	Type string `pulumi:"type"`
	// Specifies whether the data source endpoints are encrypted using HTTPS. The default value is true.
	UseEncryptedEndpoints interface{} `pulumi:"useEncryptedEndpoints"`
	// Specifies whether to require the host name in the server's certificate to match the host name of the server when connecting over SSL. The default value is true.
	UseHostVerification interface{} `pulumi:"useHostVerification"`
	// Specifies whether to verify the identity of the server when connecting over SSL. The default value is true.
	UsePeerVerification interface{} `pulumi:"usePeerVerification"`
}

// Xero Service linked service.
type XeroLinkedServiceResponse struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReferenceResponse `pulumi:"connectVia"`
	// Properties used to connect to Xero. It is mutually exclusive with any other properties in the linked service. Type: object.
	ConnectionProperties interface{} `pulumi:"connectionProperties"`
	// The consumer key associated with the Xero application.
	ConsumerKey interface{} `pulumi:"consumerKey"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential interface{} `pulumi:"encryptedCredential"`
	// The endpoint of the Xero server. (i.e. api.xero.com)
	Host interface{} `pulumi:"host"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// The private key from the .pem file that was generated for your Xero private application. You must include all the text from the .pem file, including the Unix line endings(
	// ).
	PrivateKey interface{} `pulumi:"privateKey"`
	// Type of linked service.
	// Expected value is 'Xero'.
	Type string `pulumi:"type"`
	// Specifies whether the data source endpoints are encrypted using HTTPS. The default value is true.
	UseEncryptedEndpoints interface{} `pulumi:"useEncryptedEndpoints"`
	// Specifies whether to require the host name in the server's certificate to match the host name of the server when connecting over SSL. The default value is true.
	UseHostVerification interface{} `pulumi:"useHostVerification"`
	// Specifies whether to verify the identity of the server when connecting over SSL. The default value is true.
	UsePeerVerification interface{} `pulumi:"usePeerVerification"`
}

// Xero Service dataset.
type XeroObjectDataset struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReference `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// The table name. Type: string (or Expression with resultType string).
	TableName interface{} `pulumi:"tableName"`
	// Type of dataset.
	// Expected value is 'XeroObject'.
	Type string `pulumi:"type"`
}

// Xero Service dataset.
type XeroObjectDatasetResponse struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetResponseFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceResponse `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// The table name. Type: string (or Expression with resultType string).
	TableName interface{} `pulumi:"tableName"`
	// Type of dataset.
	// Expected value is 'XeroObject'.
	Type string `pulumi:"type"`
}

// A copy activity Xero Service source.
type XeroSource struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns interface{} `pulumi:"additionalColumns"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// A query to retrieve data from source. Type: string (or Expression with resultType string).
	Query interface{} `pulumi:"query"`
	// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	QueryTimeout interface{} `pulumi:"queryTimeout"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// Copy source type.
	// Expected value is 'XeroSource'.
	Type string `pulumi:"type"`
}

// A copy activity Xero Service source.
type XeroSourceResponse struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns interface{} `pulumi:"additionalColumns"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// A query to retrieve data from source. Type: string (or Expression with resultType string).
	Query interface{} `pulumi:"query"`
	// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	QueryTimeout interface{} `pulumi:"queryTimeout"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// Copy source type.
	// Expected value is 'XeroSource'.
	Type string `pulumi:"type"`
}

// Xml dataset.
type XmlDataset struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// The data compression method used for the json dataset.
	Compression *DatasetCompression `pulumi:"compression"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The code page name of the preferred encoding. If not specified, the default value is UTF-8, unless BOM denotes another Unicode encoding. Refer to the name column of the table in the following link to set supported values: https://msdn.microsoft.com/library/system.text.encoding.aspx. Type: string (or Expression with resultType string).
	EncodingName interface{} `pulumi:"encodingName"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReference `pulumi:"linkedServiceName"`
	// The location of the json data storage.
	Location interface{} `pulumi:"location"`
	// The null value string. Type: string (or Expression with resultType string).
	NullValue interface{} `pulumi:"nullValue"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// Type of dataset.
	// Expected value is 'Xml'.
	Type string `pulumi:"type"`
}

// Xml dataset.
type XmlDatasetResponse struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// The data compression method used for the json dataset.
	Compression *DatasetCompressionResponse `pulumi:"compression"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The code page name of the preferred encoding. If not specified, the default value is UTF-8, unless BOM denotes another Unicode encoding. Refer to the name column of the table in the following link to set supported values: https://msdn.microsoft.com/library/system.text.encoding.aspx. Type: string (or Expression with resultType string).
	EncodingName interface{} `pulumi:"encodingName"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetResponseFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceResponse `pulumi:"linkedServiceName"`
	// The location of the json data storage.
	Location interface{} `pulumi:"location"`
	// The null value string. Type: string (or Expression with resultType string).
	NullValue interface{} `pulumi:"nullValue"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// Type of dataset.
	// Expected value is 'Xml'.
	Type string `pulumi:"type"`
}

// Xml read settings.
type XmlReadSettings struct {
	// Compression settings.
	CompressionProperties interface{} `pulumi:"compressionProperties"`
	// Indicates whether type detection is enabled when reading the xml files. Type: boolean (or Expression with resultType boolean).
	DetectDataType interface{} `pulumi:"detectDataType"`
	// Namespace uri to prefix mappings to override the prefixes in column names when namespace is enabled, if no prefix is defined for a namespace uri, the prefix of xml element/attribute name in the xml data file will be used. Example: "{"http://www.example.com/xml":"prefix"}" Type: object (or Expression with resultType object).
	NamespacePrefixes interface{} `pulumi:"namespacePrefixes"`
	// Indicates whether namespace is enabled when reading the xml files. Type: boolean (or Expression with resultType boolean).
	Namespaces interface{} `pulumi:"namespaces"`
	// The read setting type.
	// Expected value is 'XmlReadSettings'.
	Type string `pulumi:"type"`
	// Indicates what validation method is used when reading the xml files. Allowed values: 'none', 'xsd', or 'dtd'. Type: string (or Expression with resultType string).
	ValidationMode interface{} `pulumi:"validationMode"`
}

// Xml read settings.
type XmlReadSettingsResponse struct {
	// Compression settings.
	CompressionProperties interface{} `pulumi:"compressionProperties"`
	// Indicates whether type detection is enabled when reading the xml files. Type: boolean (or Expression with resultType boolean).
	DetectDataType interface{} `pulumi:"detectDataType"`
	// Namespace uri to prefix mappings to override the prefixes in column names when namespace is enabled, if no prefix is defined for a namespace uri, the prefix of xml element/attribute name in the xml data file will be used. Example: "{"http://www.example.com/xml":"prefix"}" Type: object (or Expression with resultType object).
	NamespacePrefixes interface{} `pulumi:"namespacePrefixes"`
	// Indicates whether namespace is enabled when reading the xml files. Type: boolean (or Expression with resultType boolean).
	Namespaces interface{} `pulumi:"namespaces"`
	// The read setting type.
	// Expected value is 'XmlReadSettings'.
	Type string `pulumi:"type"`
	// Indicates what validation method is used when reading the xml files. Allowed values: 'none', 'xsd', or 'dtd'. Type: string (or Expression with resultType string).
	ValidationMode interface{} `pulumi:"validationMode"`
}

// A copy activity Xml source.
type XmlSource struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns interface{} `pulumi:"additionalColumns"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// Xml format settings.
	FormatSettings *XmlReadSettings `pulumi:"formatSettings"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// Xml store settings.
	StoreSettings interface{} `pulumi:"storeSettings"`
	// Copy source type.
	// Expected value is 'XmlSource'.
	Type string `pulumi:"type"`
}

// A copy activity Xml source.
type XmlSourceResponse struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns interface{} `pulumi:"additionalColumns"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// Xml format settings.
	FormatSettings *XmlReadSettingsResponse `pulumi:"formatSettings"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// Xml store settings.
	StoreSettings interface{} `pulumi:"storeSettings"`
	// Copy source type.
	// Expected value is 'XmlSource'.
	Type string `pulumi:"type"`
}

// Linked service for Zendesk.
type ZendeskLinkedService struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The api token for the Zendesk source.
	ApiToken interface{} `pulumi:"apiToken"`
	// The authentication type to use.
	AuthenticationType string `pulumi:"authenticationType"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference `pulumi:"connectVia"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential interface{} `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// The password of the Zendesk source.
	Password interface{} `pulumi:"password"`
	// Type of linked service.
	// Expected value is 'Zendesk'.
	Type string `pulumi:"type"`
	// The url to connect Zendesk source. Type: string (or Expression with resultType string).
	Url interface{} `pulumi:"url"`
	// The username of the Zendesk source. Type: string (or Expression with resultType string).
	UserName interface{} `pulumi:"userName"`
}

// Linked service for Zendesk.
type ZendeskLinkedServiceResponse struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The api token for the Zendesk source.
	ApiToken interface{} `pulumi:"apiToken"`
	// The authentication type to use.
	AuthenticationType string `pulumi:"authenticationType"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReferenceResponse `pulumi:"connectVia"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential interface{} `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// The password of the Zendesk source.
	Password interface{} `pulumi:"password"`
	// Type of linked service.
	// Expected value is 'Zendesk'.
	Type string `pulumi:"type"`
	// The url to connect Zendesk source. Type: string (or Expression with resultType string).
	Url interface{} `pulumi:"url"`
	// The username of the Zendesk source. Type: string (or Expression with resultType string).
	UserName interface{} `pulumi:"userName"`
}

// The ZipDeflate compression read settings.
type ZipDeflateReadSettings struct {
	// Preserve the zip file name as folder path. Type: boolean (or Expression with resultType boolean).
	PreserveZipFileNameAsFolder interface{} `pulumi:"preserveZipFileNameAsFolder"`
	// The Compression setting type.
	// Expected value is 'ZipDeflateReadSettings'.
	Type string `pulumi:"type"`
}

// The ZipDeflate compression read settings.
type ZipDeflateReadSettingsResponse struct {
	// Preserve the zip file name as folder path. Type: boolean (or Expression with resultType boolean).
	PreserveZipFileNameAsFolder interface{} `pulumi:"preserveZipFileNameAsFolder"`
	// The Compression setting type.
	// Expected value is 'ZipDeflateReadSettings'.
	Type string `pulumi:"type"`
}

// Zoho server linked service.
type ZohoLinkedService struct {
	// The access token for Zoho authentication.
	AccessToken interface{} `pulumi:"accessToken"`
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference `pulumi:"connectVia"`
	// Properties used to connect to Zoho. It is mutually exclusive with any other properties in the linked service. Type: object.
	ConnectionProperties interface{} `pulumi:"connectionProperties"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential interface{} `pulumi:"encryptedCredential"`
	// The endpoint of the Zoho server. (i.e. crm.zoho.com/crm/private)
	Endpoint interface{} `pulumi:"endpoint"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Type of linked service.
	// Expected value is 'Zoho'.
	Type string `pulumi:"type"`
	// Specifies whether the data source endpoints are encrypted using HTTPS. The default value is true.
	UseEncryptedEndpoints interface{} `pulumi:"useEncryptedEndpoints"`
	// Specifies whether to require the host name in the server's certificate to match the host name of the server when connecting over SSL. The default value is true.
	UseHostVerification interface{} `pulumi:"useHostVerification"`
	// Specifies whether to verify the identity of the server when connecting over SSL. The default value is true.
	UsePeerVerification interface{} `pulumi:"usePeerVerification"`
}

// Zoho server linked service.
type ZohoLinkedServiceResponse struct {
	// The access token for Zoho authentication.
	AccessToken interface{} `pulumi:"accessToken"`
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReferenceResponse `pulumi:"connectVia"`
	// Properties used to connect to Zoho. It is mutually exclusive with any other properties in the linked service. Type: object.
	ConnectionProperties interface{} `pulumi:"connectionProperties"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential interface{} `pulumi:"encryptedCredential"`
	// The endpoint of the Zoho server. (i.e. crm.zoho.com/crm/private)
	Endpoint interface{} `pulumi:"endpoint"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Type of linked service.
	// Expected value is 'Zoho'.
	Type string `pulumi:"type"`
	// Specifies whether the data source endpoints are encrypted using HTTPS. The default value is true.
	UseEncryptedEndpoints interface{} `pulumi:"useEncryptedEndpoints"`
	// Specifies whether to require the host name in the server's certificate to match the host name of the server when connecting over SSL. The default value is true.
	UseHostVerification interface{} `pulumi:"useHostVerification"`
	// Specifies whether to verify the identity of the server when connecting over SSL. The default value is true.
	UsePeerVerification interface{} `pulumi:"usePeerVerification"`
}

// Zoho server dataset.
type ZohoObjectDataset struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReference `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// The table name. Type: string (or Expression with resultType string).
	TableName interface{} `pulumi:"tableName"`
	// Type of dataset.
	// Expected value is 'ZohoObject'.
	Type string `pulumi:"type"`
}

// Zoho server dataset.
type ZohoObjectDatasetResponse struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetResponseFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceResponse `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// The table name. Type: string (or Expression with resultType string).
	TableName interface{} `pulumi:"tableName"`
	// Type of dataset.
	// Expected value is 'ZohoObject'.
	Type string `pulumi:"type"`
}

// A copy activity Zoho server source.
type ZohoSource struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns interface{} `pulumi:"additionalColumns"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// A query to retrieve data from source. Type: string (or Expression with resultType string).
	Query interface{} `pulumi:"query"`
	// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	QueryTimeout interface{} `pulumi:"queryTimeout"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// Copy source type.
	// Expected value is 'ZohoSource'.
	Type string `pulumi:"type"`
}

// A copy activity Zoho server source.
type ZohoSourceResponse struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns interface{} `pulumi:"additionalColumns"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// A query to retrieve data from source. Type: string (or Expression with resultType string).
	Query interface{} `pulumi:"query"`
	// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	QueryTimeout interface{} `pulumi:"queryTimeout"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// Copy source type.
	// Expected value is 'ZohoSource'.
	Type string `pulumi:"type"`
}

func init() {
	pulumi.RegisterOutputType(ArmIdWrapperResponseOutput{})
	pulumi.RegisterOutputType(ArmIdWrapperResponsePtrOutput{})
	pulumi.RegisterOutputType(CMKIdentityDefinitionOutput{})
	pulumi.RegisterOutputType(CMKIdentityDefinitionPtrOutput{})
	pulumi.RegisterOutputType(CMKIdentityDefinitionResponseOutput{})
	pulumi.RegisterOutputType(CMKIdentityDefinitionResponsePtrOutput{})
	pulumi.RegisterOutputType(ConnectionStatePropertiesResponseOutput{})
	pulumi.RegisterOutputType(ConnectionStatePropertiesResponsePtrOutput{})
	pulumi.RegisterOutputType(EncryptionConfigurationOutput{})
	pulumi.RegisterOutputType(EncryptionConfigurationPtrOutput{})
	pulumi.RegisterOutputType(EncryptionConfigurationResponseOutput{})
	pulumi.RegisterOutputType(EncryptionConfigurationResponsePtrOutput{})
	pulumi.RegisterOutputType(FactoryIdentityOutput{})
	pulumi.RegisterOutputType(FactoryIdentityPtrOutput{})
	pulumi.RegisterOutputType(FactoryIdentityResponseOutput{})
	pulumi.RegisterOutputType(FactoryIdentityResponsePtrOutput{})
	pulumi.RegisterOutputType(GitHubClientSecretOutput{})
	pulumi.RegisterOutputType(GitHubClientSecretPtrOutput{})
	pulumi.RegisterOutputType(GlobalParameterSpecificationOutput{})
	pulumi.RegisterOutputType(GlobalParameterSpecificationMapOutput{})
	pulumi.RegisterOutputType(GlobalParameterSpecificationResponseOutput{})
	pulumi.RegisterOutputType(GlobalParameterSpecificationResponseMapOutput{})
	pulumi.RegisterOutputType(ManagedPrivateEndpointTypeOutput{})
	pulumi.RegisterOutputType(ManagedPrivateEndpointResponseOutput{})
	pulumi.RegisterOutputType(ParameterSpecificationOutput{})
	pulumi.RegisterOutputType(ParameterSpecificationMapOutput{})
	pulumi.RegisterOutputType(ParameterSpecificationResponseOutput{})
	pulumi.RegisterOutputType(ParameterSpecificationResponseMapOutput{})
	pulumi.RegisterOutputType(PipelineElapsedTimeMetricPolicyOutput{})
	pulumi.RegisterOutputType(PipelineElapsedTimeMetricPolicyPtrOutput{})
	pulumi.RegisterOutputType(PipelineElapsedTimeMetricPolicyResponseOutput{})
	pulumi.RegisterOutputType(PipelineElapsedTimeMetricPolicyResponsePtrOutput{})
	pulumi.RegisterOutputType(PipelineFolderOutput{})
	pulumi.RegisterOutputType(PipelineFolderPtrOutput{})
	pulumi.RegisterOutputType(PipelinePolicyOutput{})
	pulumi.RegisterOutputType(PipelinePolicyPtrOutput{})
	pulumi.RegisterOutputType(PipelinePolicyResponseOutput{})
	pulumi.RegisterOutputType(PipelinePolicyResponsePtrOutput{})
	pulumi.RegisterOutputType(PipelineResponseFolderOutput{})
	pulumi.RegisterOutputType(PipelineResponseFolderPtrOutput{})
	pulumi.RegisterOutputType(PrivateEndpointOutput{})
	pulumi.RegisterOutputType(PrivateEndpointPtrOutput{})
	pulumi.RegisterOutputType(PrivateLinkConnectionApprovalRequestOutput{})
	pulumi.RegisterOutputType(PrivateLinkConnectionApprovalRequestPtrOutput{})
	pulumi.RegisterOutputType(PrivateLinkConnectionStateOutput{})
	pulumi.RegisterOutputType(PrivateLinkConnectionStatePtrOutput{})
	pulumi.RegisterOutputType(PrivateLinkConnectionStateResponseOutput{})
	pulumi.RegisterOutputType(PrivateLinkConnectionStateResponsePtrOutput{})
	pulumi.RegisterOutputType(PurviewConfigurationOutput{})
	pulumi.RegisterOutputType(PurviewConfigurationPtrOutput{})
	pulumi.RegisterOutputType(PurviewConfigurationResponseOutput{})
	pulumi.RegisterOutputType(PurviewConfigurationResponsePtrOutput{})
	pulumi.RegisterOutputType(RemotePrivateEndpointConnectionResponseOutput{})
	pulumi.RegisterOutputType(UserAccessPolicyResponseOutput{})
	pulumi.RegisterOutputType(UserAccessPolicyResponsePtrOutput{})
	pulumi.RegisterOutputType(VariableSpecificationOutput{})
	pulumi.RegisterOutputType(VariableSpecificationMapOutput{})
	pulumi.RegisterOutputType(VariableSpecificationResponseOutput{})
	pulumi.RegisterOutputType(VariableSpecificationResponseMapOutput{})
}
